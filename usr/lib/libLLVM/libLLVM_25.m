unsigned int *llvm::RegPressureTracker::recedeSkipDebugValues(unsigned int *this)
{
  unsigned int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unsigned int v8;
  __int16 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v1 = this;
  v2 = *((_QWORD *)this + 6);
  if (!*((_BYTE *)this + 56))
  {
    if (!*(_QWORD *)(v2 + 320))
    {
LABEL_10:
      if (!*(_QWORD *)(v2 + 312) && !*((_QWORD *)v1 + 8))
      {
        *(_QWORD *)(v2 + 312) = 0;
        *(_DWORD *)(v2 + 32) = 0;
      }
      goto LABEL_13;
    }
    *(_QWORD *)(v2 + 320) = *((_QWORD *)this + 8);
    v2 = *((_QWORD *)this + 6);
LABEL_6:
    v3 = v1[26];
    if (*(_DWORD *)(v2 + 180) < v3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 168, v2 + 184, v3, 16);
      v2 = *((_QWORD *)v1 + 6);
    }
    this = sub_1C5258650(v1 + 24, v2 + 168);
    if (*((_BYTE *)v1 + 56))
      goto LABEL_13;
    v2 = *((_QWORD *)v1 + 6);
    goto LABEL_10;
  }
  if (*(_QWORD *)(v2 + 320) <= 7uLL)
  {
    *(_QWORD *)(v2 + 320) = llvm::RegPressureTracker::getCurrSlot((llvm::RegPressureTracker *)this);
    goto LABEL_6;
  }
LABEL_13:
  v4 = *(_QWORD *)(*((_QWORD *)v1 + 5) + 56);
  v5 = **((_QWORD **)v1 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (*(_BYTE *)v5 & 4) == 0)
  {
    while ((*(_WORD *)(v5 + 44) & 4) != 0)
      v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
  }
  while (v5 != v4)
  {
    v6 = **(unsigned __int16 **)(v5 + 16);
    if ((v6 - 13) >= 5 && v6 != 23)
    {
      v4 = v5;
      break;
    }
    v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
    if (!v5 || (*(_BYTE *)v5 & 4) == 0)
    {
      while ((*(_WORD *)(v5 + 44) & 4) != 0)
        v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  *((_QWORD *)v1 + 8) = v4;
  if (*((_BYTE *)v1 + 56))
  {
    v8 = **(unsigned __int16 **)(v4 + 16) - 13;
    if (v8 < 0xB && ((0x41Fu >> v8) & 1) != 0)
    {
      v24 = 0;
      goto LABEL_51;
    }
    v9 = *(_WORD *)(v4 + 44);
    v10 = v4;
    if ((v9 & 4) != 0)
    {
      v10 = v4;
      do
        v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v10 + 44) & 4) != 0);
    }
    v11 = *(_QWORD *)(*((_QWORD *)v1 + 4) + 288);
    if ((v9 & 8) != 0)
    {
      do
        v4 = *(_QWORD *)(v4 + 8);
      while ((*(_WORD *)(v4 + 44) & 8) != 0);
    }
    v12 = *(_QWORD *)(v4 + 8);
    if (v10 != v12)
    {
      while (1)
      {
        v13 = **(unsigned __int16 **)(v10 + 16);
        v14 = v13 > 0x17;
        v15 = (1 << v13) & 0x83E000;
        if (v14 || v15 == 0)
          break;
        v10 = *(_QWORD *)(v10 + 8);
        if (v10 == v12)
        {
          v10 = v12;
          break;
        }
      }
    }
    v17 = *(_QWORD *)(v11 + 368);
    v18 = *(unsigned int *)(v11 + 384);
    if ((_DWORD)v18)
    {
      LODWORD(v19) = ((v10 >> 4) ^ (v10 >> 9)) & (v18 - 1);
      v20 = (uint64_t *)(v17 + 16 * v19);
      v21 = *v20;
      if (v10 == *v20)
      {
LABEL_50:
        v24 = v20[1] & 0xFFFFFFFFFFFFFFF8 | 4;
LABEL_51:
        v25 = *((_QWORD *)v1 + 6);
        v26 = *(_QWORD *)(v25 + 312);
        if (v26 >= 8
          && (*(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 24) | (v26 >> 1) & 3) > (*(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 24) | (v24 >> 1) & 3))
        {
          *(_QWORD *)(v25 + 312) = 0;
          *(_DWORD *)(v25 + 32) = 0;
        }
        return this;
      }
      v22 = 1;
      while (v21 != -4096)
      {
        v23 = v19 + v22++;
        v19 = v23 & (v18 - 1);
        v21 = *(_QWORD *)(v17 + 16 * v19);
        if (v10 == v21)
        {
          v20 = (uint64_t *)(v17 + 16 * v19);
          goto LABEL_50;
        }
      }
    }
    v20 = (uint64_t *)(v17 + 16 * v18);
    goto LABEL_50;
  }
  return this;
}

void llvm::RegPressureTracker::recede(uint64_t a1, uint64_t a2)
{
  unsigned __int16 **v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  void *v25[2];
  _BYTE v26[128];
  void *v27;
  uint64_t v28;
  _BYTE v29[128];
  void *v30;
  uint64_t v31;
  _QWORD v32[17];

  v32[16] = *MEMORY[0x1E0C80C00];
  llvm::RegPressureTracker::recedeSkipDebugValues((unsigned int *)a1);
  v4 = *(unsigned __int16 ***)(a1 + 64);
  v5 = *v4[2];
  v6 = v5 > 0x17;
  v7 = (1 << v5) & 0x83E000;
  if (!v6 && v7 != 0)
    return;
  v25[0] = v26;
  v25[1] = (void *)0x800000000;
  v27 = v29;
  v28 = 0x800000000;
  v30 = v32;
  v31 = 0x800000000;
  llvm::RegisterOperands::collect(v25, (const llvm::MachineInstr *)v4, *(const llvm::TargetRegisterInfo **)(a1 + 8), *(const llvm::MachineRegisterInfo **)(a1 + 24), *(unsigned __int8 *)(a1 + 58), 0);
  if (!*(_BYTE *)(a1 + 58))
  {
    if (*(_BYTE *)(a1 + 56))
      llvm::RegisterOperands::detectDeadDefs((uint64_t)v25, (const llvm::MachineInstr *)v4, *(const llvm::LiveIntervals **)(a1 + 32));
    goto LABEL_17;
  }
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(v9 + 288);
  v12 = *(_WORD *)(v10 + 44);
  v13 = v10;
  if ((v12 & 0xC) != 0)
  {
    if ((v12 & 4) != 0)
    {
      v13 = *(_QWORD *)(a1 + 64);
      do
        v13 = *(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v13 + 44) & 4) != 0);
    }
    if ((v12 & 8) != 0)
    {
      do
        v10 = *(_QWORD *)(v10 + 8);
      while ((*(_WORD *)(v10 + 44) & 8) != 0);
    }
  }
  v14 = *(_QWORD *)(v10 + 8);
  if (v13 != v14)
  {
    while (1)
    {
      v15 = **(unsigned __int16 **)(v13 + 16);
      v6 = v15 > 0x17;
      v16 = (1 << v15) & 0x83E000;
      if (v6 || v16 == 0)
        break;
      v13 = *(_QWORD *)(v13 + 8);
      if (v13 == v14)
      {
        v13 = v14;
        break;
      }
    }
  }
  v18 = *(_QWORD *)(v11 + 368);
  v19 = *(unsigned int *)(v11 + 384);
  if (!(_DWORD)v19)
    goto LABEL_28;
  LODWORD(v20) = ((v13 >> 4) ^ (v13 >> 9)) & (v19 - 1);
  v21 = (uint64_t *)(v18 + 16 * v20);
  v22 = *v21;
  if (v13 != *v21)
  {
    v23 = 1;
    while (v22 != -4096)
    {
      v24 = v20 + v23++;
      v20 = v24 & (v19 - 1);
      v22 = *(_QWORD *)(v18 + 16 * v20);
      if (v13 == v22)
      {
        v21 = (uint64_t *)(v18 + 16 * v20);
        goto LABEL_16;
      }
    }
LABEL_28:
    v21 = (uint64_t *)(v18 + 16 * v19);
  }
LABEL_16:
  llvm::RegisterOperands::adjustLaneLiveness((uint64_t)v25, v9, *(_QWORD *)(a1 + 24), v21[1] & 0xFFFFFFFFFFFFFFF8 | 4, 0);
LABEL_17:
  llvm::RegPressureTracker::recede(a1, (unsigned int **)v25, a2);
  if (v30 != v32)
    free(v30);
  if (v27 != v29)
    free(v27);
  if (v25[0] != v26)
    free(v25[0]);
}

uint64_t llvm::RegPressureTracker::advance(llvm::RegPressureTracker *this, unsigned int **a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t CurrSlot;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t result;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  uint64_t LastUsedLanes;
  uint64_t v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;

  v4 = *((_QWORD *)this + 6);
  if (*((_BYTE *)this + 56))
  {
    if (*(_QWORD *)(v4 + 312) > 7uLL)
      goto LABEL_13;
    *(_QWORD *)(v4 + 312) = llvm::RegPressureTracker::getCurrSlot(this);
  }
  else
  {
    if (!*(_QWORD *)(v4 + 312))
      goto LABEL_10;
    *(_QWORD *)(v4 + 312) = *((_QWORD *)this + 8);
    v4 = *((_QWORD *)this + 6);
  }
  v5 = *((unsigned int *)this + 26);
  if (*(_DWORD *)(v4 + 36) < v5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 24, v4 + 40, v5, 16);
    v4 = *((_QWORD *)this + 6);
  }
  sub_1C5258650((unsigned int *)this + 24, v4 + 24);
  if (*((_BYTE *)this + 56))
  {
LABEL_13:
    CurrSlot = llvm::RegPressureTracker::getCurrSlot(this);
    v6 = CurrSlot;
    v4 = *((_QWORD *)this + 6);
    v8 = *(_QWORD *)(v4 + 320);
    if (v8 <= 7
      || (*(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 24) | (v8 >> 1) & 3) > (*(_DWORD *)((CurrSlot & 0xFFFFFFFFFFFFFFF8) + 24) | (CurrSlot >> 1) & 3))
    {
      goto LABEL_17;
    }
LABEL_15:
    *(_QWORD *)(v4 + 320) = 0;
    *(_DWORD *)(v4 + 32) = 0;
    goto LABEL_17;
  }
  v4 = *((_QWORD *)this + 6);
LABEL_10:
  if (*(_QWORD *)(v4 + 320))
  {
    v6 = 0;
    goto LABEL_17;
  }
  v6 = 0;
  if (!*((_QWORD *)this + 8))
    goto LABEL_15;
LABEL_17:
  v9 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v9)
  {
    v21 = *a2;
    v22 = (uint64_t)&(*a2)[4 * v9];
    do
    {
      v23 = *v21;
      v24 = v23;
      v25 = *v21;
      if ((v23 & 0x80000000) != 0)
      {
        v24 = *((_DWORD *)this + 64) + (v23 & 0x7FFFFFFF);
        v25 = *((_DWORD *)this + 64) + (v23 & 0x7FFFFFFF);
      }
      v26 = *(unsigned __int8 *)(*((_QWORD *)this + 30) + v24);
      v27 = *((_DWORD *)this + 26);
      if (v27 <= v26)
        goto LABEL_36;
      v28 = *((_QWORD *)this + 12);
      while (1)
      {
        v29 = v26;
        if (*(_DWORD *)(v28 + 16 * v26) == v25)
          break;
        v26 += 256;
        if (v29 + 256 >= v27)
          goto LABEL_36;
      }
      if (v27 == v26)
LABEL_36:
        v30 = 0;
      else
        v30 = *(_QWORD *)(v28 + 16 * v26 + 8);
      v31 = *((_QWORD *)v21 + 1);
      if ((v31 & ~v30) != 0)
      {
        llvm::RegPressureTracker::discoverLiveInOrOut((uint64_t)this, *v21, v31 & ~v30, *((_QWORD *)this + 6) + 24);
        llvm::RegPressureTracker::increaseRegPressure((uint64_t)this, v23, v30, v31 | v30);
        v32 = v23;
        if ((v23 & 0x80000000) != 0)
          v32 = *((_DWORD *)this + 64) + (v23 & 0x7FFFFFFF);
        v52 = v32;
        v53 = v31 & ~v30;
        v33 = sub_1C525D1D8((uint64_t)this + 96, &v52);
        if ((v34 & 1) == 0)
          *(_QWORD *)(v33 + 8) |= v31 & ~v30;
      }
      if (*((_BYTE *)this + 56))
      {
        LastUsedLanes = llvm::RegPressureTracker::getLastUsedLanes((uint64_t)this, v23, v6);
        if (LastUsedLanes)
        {
          v36 = v23;
          v37 = v23;
          if ((v23 & 0x80000000) != 0)
          {
            v36 = *((_DWORD *)this + 64) + (v23 & 0x7FFFFFFF);
            v37 = *((_DWORD *)this + 64) + (v23 & 0x7FFFFFFF);
          }
          v38 = *(unsigned __int8 *)(*((_QWORD *)this + 30) + v36);
          v39 = *((_DWORD *)this + 26);
          if (v39 > v38)
          {
            v40 = *((_QWORD *)this + 12);
            while (1)
            {
              v41 = v38;
              if (*(_DWORD *)(v40 + 16 * v38) == v37)
                break;
              v38 += 256;
              if (v41 + 256 >= v39)
                goto LABEL_53;
            }
            if (v39 != v38)
              *(_QWORD *)(v40 + 16 * v38 + 8) &= ~LastUsedLanes;
          }
LABEL_53:
          if (v30 && (v30 & ~LastUsedLanes) == 0)
          {
            v42 = (_QWORD *)*((_QWORD *)this + 3);
            v43 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v42 + 16) + 176))(*(_QWORD *)(*v42 + 16));
            v44 = v43;
            if ((v23 & 0x80000000) != 0)
            {
              v45 = *(_QWORD *)(v42[3] + 16 * (v23 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
              v46 = (unsigned int *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v43 + 320))(v43, v45);
              v47 = *(_DWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v44 + 280))(v44, v45);
            }
            else
            {
              v46 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 328))(v43, v23);
              v47 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 288))(v44, v23);
            }
            v48 = *v46;
            if ((_DWORD)v48 != -1)
            {
              v49 = *((_QWORD *)this + 9);
              v50 = v46 + 1;
              do
              {
                *(_DWORD *)(v49 + 4 * v48) -= v47;
                v51 = *v50++;
                v48 = v51;
              }
              while (v51 != -1);
            }
          }
        }
      }
      v21 += 4;
    }
    while (v21 != (unsigned int *)v22);
  }
  v10 = *((unsigned int *)a2 + 38);
  if ((_DWORD)v10)
  {
    v11 = a2[18];
    v12 = &v11[4 * v10];
    do
    {
      v13 = *v11;
      if ((*v11 & 0x80000000) != 0)
        v13 = *((_DWORD *)this + 64) + (v13 & 0x7FFFFFFF);
      v14 = *((_QWORD *)v11 + 1);
      v52 = v13;
      v53 = v14;
      v15 = sub_1C525D1D8((uint64_t)this + 96, &v52);
      if ((v16 & 1) != 0)
      {
        v17 = 0;
      }
      else
      {
        v17 = *(_QWORD *)(v15 + 8);
        *(_QWORD *)(v15 + 8) = v17 | v14;
      }
      v18 = *((_QWORD *)v11 + 1) | v17;
      v19 = *v11;
      v11 += 4;
      llvm::RegPressureTracker::increaseRegPressure((uint64_t)this, v19, v17, v18);
    }
    while (v11 != v12);
  }
  llvm::RegPressureTracker::bumpDeadDefs((uint64_t)this, a2[36], *((unsigned int *)a2 + 74));
  result = sub_1C620E3C0(*((_QWORD *)this + 8), *((_QWORD *)this + 5) + 48);
  *((_QWORD *)this + 8) = result;
  return result;
}

uint64_t llvm::RegPressureTracker::getLastUsedLanes(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  int v39;
  unsigned int v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned int v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a3 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 0x80000000) == 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v3 + 680) + 8 * a2);
    if (!v5)
      return 0;
    v6 = *(unsigned int *)(v5 + 8);
    v7 = *(_QWORD **)v5;
    if ((_DWORD)v6)
    {
      v8 = v7[3 * v6 - 2];
      v9 = *(_DWORD *)(v4 + 24);
      if (v9 < ((v8 >> 1) & 3 | *(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 24)))
      {
        v10 = v7;
        v11 = v6;
        do
        {
          v12 = v11 >> 1;
          v13 = v10[3 * (v11 >> 1) + 1];
          LODWORD(v13) = (v13 >> 1) & 3 | *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24);
          v11 -= (v11 >> 1) + 1;
          v14 = v9 >= v13;
          if (v9 >= v13)
            v15 = v12 + 1;
          else
            v15 = 0;
          v10 += 3 * v15;
          if (!v14)
            v11 = v12;
        }
        while (v11);
LABEL_37:
        if (v10 != &v7[3 * v6]
          && ((*v10 >> 1) & 3 | *(_DWORD *)((*v10 & 0xFFFFFFFFFFFFFFF8) + 24)) <= *(_DWORD *)(v4 + 24))
        {
          if (v10[1] == (v4 | 4))
            return -1;
          else
            return 0;
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v6) = 0;
    }
    v10 = &v7[3 * v6];
    goto LABEL_37;
  }
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(unsigned __int8 *)(a1 + 58);
  v18 = a2 & 0x7FFFFFFF;
  if (v18 < *(unsigned int *)(v3 + 416) && (v19 = *(_QWORD *)(*(_QWORD *)(v3 + 408) + 8 * v18)) != 0)
  {
    if (!*(_BYTE *)(a1 + 58))
      goto LABEL_49;
  }
  else
  {
    v54 = *(_QWORD *)(a1 + 24);
    v55 = a3 & 0xFFFFFFFFFFFFFFF8;
    v53 = a2 & 0x7FFFFFFF;
    v52 = *(unsigned __int8 *)(a1 + 58);
    v19 = sub_1C4851220(*(_QWORD *)(a1 + 32), a2);
    v33 = *(_QWORD *)(v3 + 304);
    v34 = *(_QWORD *)(v3 + 248);
    v35 = *(_QWORD *)(v34 + 40);
    *(_QWORD *)v33 = v34;
    *(_QWORD *)(v33 + 8) = v35;
    *(_OWORD *)(v33 + 16) = *(_OWORD *)(v3 + 288);
    *(_QWORD *)(v33 + 32) = v3 + 312;
    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v33);
    *(_DWORD *)(v33 + 184) = 0;
    v36 = *(_QWORD *)(v3 + 256);
    v38 = *(_BYTE *)(v36 + 16) == 0;
    v37 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v36 + 24) + 16 * (*(_DWORD *)(v19 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                             + 34);
    v38 = v38 || v37 == 0;
    v39 = !v38;
    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v3 + 304), (llvm::LiveInterval *)v19, v39);
    llvm::LiveIntervals::computeDeadValues(v3, v19, 0);
    v17 = v52;
    v18 = v53;
    v16 = v54;
    v4 = v55;
    if (!v52)
      goto LABEL_49;
  }
  v20 = *(_QWORD *)(v19 + 104);
  if (v20)
  {
    result = 0;
    while (1)
    {
      v22 = *(_DWORD *)(v20 + 8);
      v23 = *(_QWORD **)v20;
      if (v22)
      {
        v24 = v23[3 * v22 - 2];
        v25 = *(_DWORD *)(v4 + 24);
        v26 = (v24 >> 1) & 3 | *(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 24);
        v27 = *(_QWORD **)v20;
        v28 = *(unsigned int *)(v20 + 8);
        if (v25 < v26)
        {
          do
          {
            v29 = v28 >> 1;
            v30 = v27[3 * (v28 >> 1) + 1];
            LODWORD(v30) = (v30 >> 1) & 3 | *(_DWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 24);
            v28 -= (v28 >> 1) + 1;
            v31 = v25 >= v30;
            if (v25 >= v30)
              v32 = v29 + 1;
            else
              v32 = 0;
            v27 += 3 * v32;
            if (!v31)
              v28 = v29;
          }
          while (v28);
          goto LABEL_29;
        }
      }
      else
      {
        v22 = 0;
      }
      v27 = &v23[3 * v22];
LABEL_29:
      if (v27 != &v23[3 * v22]
        && ((*v27 >> 1) & 3 | *(_DWORD *)((*v27 & 0xFFFFFFFFFFFFFFF8) + 24)) <= *(_DWORD *)(v4 + 24)
        && v27[1] == (v4 | 4))
      {
        result |= *(_QWORD *)(v20 + 112);
      }
      v20 = *(_QWORD *)(v20 + 104);
      if (!v20)
        return result;
    }
  }
LABEL_49:
  v40 = *(_DWORD *)(v19 + 8);
  v41 = *(_QWORD **)v19;
  if (!v40)
  {
    v40 = 0;
    goto LABEL_60;
  }
  v42 = v41[3 * v40 - 2];
  v43 = *(_DWORD *)(v4 + 24);
  if (v43 >= ((v42 >> 1) & 3 | *(_DWORD *)((v42 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_60:
    v44 = &v41[3 * v40];
    goto LABEL_61;
  }
  v44 = *(_QWORD **)v19;
  v45 = *(unsigned int *)(v19 + 8);
  do
  {
    v46 = v45 >> 1;
    v47 = v44[3 * (v45 >> 1) + 1];
    LODWORD(v47) = (v47 >> 1) & 3 | *(_DWORD *)((v47 & 0xFFFFFFFFFFFFFFF8) + 24);
    v45 -= (v45 >> 1) + 1;
    v48 = v43 >= v47;
    if (v43 >= v47)
      v49 = v46 + 1;
    else
      v49 = 0;
    v44 += 3 * v49;
    if (!v48)
      v45 = v46;
  }
  while (v45);
LABEL_61:
  if (v44 == &v41[3 * v40]
    || ((*v44 >> 1) & 3 | *(_DWORD *)((*v44 & 0xFFFFFFFFFFFFFFF8) + 24)) > *(_DWORD *)(v4 + 24))
  {
    return 0;
  }
  v50 = v4 | 4;
  v51 = v44[1];
  if (v51 == v50)
    result = -1;
  else
    result = 0;
  if (v17 && v51 == v50)
    return *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v16 + 24) + 16 * v18) & 0xFFFFFFFFFFFFFFF8) + 24);
  return result;
}

void llvm::RegPressureTracker::advance(llvm::RegPressureTracker *this)
{
  const llvm::MachineInstr *v2;
  unint64_t CurrSlot;
  void *v4[2];
  _BYTE v5[128];
  void *v6;
  uint64_t v7;
  _BYTE v8[128];
  void *v9;
  uint64_t v10;
  _QWORD v11[17];

  v11[16] = *MEMORY[0x1E0C80C00];
  v2 = (const llvm::MachineInstr *)*((_QWORD *)this + 8);
  v4[0] = v5;
  v4[1] = (void *)0x800000000;
  v6 = v8;
  v7 = 0x800000000;
  v9 = v11;
  v10 = 0x800000000;
  llvm::RegisterOperands::collect(v4, v2, *((const llvm::TargetRegisterInfo **)this + 1), *((const llvm::MachineRegisterInfo **)this + 3), *((unsigned __int8 *)this + 58), 0);
  if (*((_BYTE *)this + 58))
  {
    CurrSlot = llvm::RegPressureTracker::getCurrSlot(this);
    llvm::RegisterOperands::adjustLaneLiveness((uint64_t)v4, *((_QWORD *)this + 4), *((_QWORD *)this + 3), CurrSlot, 0);
  }
  llvm::RegPressureTracker::advance(this, (unsigned int **)v4);
  if (v9 != v11)
    free(v9);
  if (v6 != v8)
    free(v6);
  if (v4[0] != v5)
    free(v4[0]);
}

void llvm::RegPressureTracker::bumpUpwardPressure(llvm::RegPressureTracker *this, const llvm::MachineInstr *a2)
{
  __int16 v4;
  const llvm::MachineInstr *v5;
  uint64_t v6;
  const llvm::MachineInstr *v7;
  const llvm::MachineInstr *v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const llvm::MachineInstr **v16;
  const llvm::MachineInstr *v17;
  int v18;
  int v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[128];
  void *v57;
  uint64_t v58;
  _BYTE v59[128];
  void *v60;
  uint64_t v61;
  _QWORD v62[17];

  v62[16] = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 56))
  {
    v20 = 0;
    goto LABEL_20;
  }
  v4 = *((_WORD *)a2 + 22);
  v5 = a2;
  if ((v4 & 4) != 0)
  {
    v5 = a2;
    do
      v5 = (const llvm::MachineInstr *)(*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8);
    while ((*((_WORD *)v5 + 22) & 4) != 0);
  }
  v6 = *(_QWORD *)(*((_QWORD *)this + 4) + 288);
  v7 = a2;
  if ((v4 & 8) != 0)
  {
    v7 = a2;
    do
      v7 = (const llvm::MachineInstr *)*((_QWORD *)v7 + 1);
    while ((*((_WORD *)v7 + 22) & 8) != 0);
  }
  v8 = (const llvm::MachineInstr *)*((_QWORD *)v7 + 1);
  if (v5 != v8)
  {
    while (1)
    {
      v9 = **((unsigned __int16 **)v5 + 2);
      v10 = v9 > 0x17;
      v11 = (1 << v9) & 0x83E000;
      if (v10 || v11 == 0)
        break;
      v5 = (const llvm::MachineInstr *)*((_QWORD *)v5 + 1);
      if (v5 == v8)
      {
        v5 = (const llvm::MachineInstr *)*((_QWORD *)v7 + 1);
        break;
      }
    }
  }
  v13 = *(_QWORD *)(v6 + 368);
  v14 = *(unsigned int *)(v6 + 384);
  if (!(_DWORD)v14)
    goto LABEL_18;
  LODWORD(v15) = ((v5 >> 4) ^ (v5 >> 9)) & (v14 - 1);
  v16 = (const llvm::MachineInstr **)(v13 + 16 * v15);
  v17 = *v16;
  if (v5 != *v16)
  {
    v18 = 1;
    while (v17 != (const llvm::MachineInstr *)-4096)
    {
      v19 = v15 + v18++;
      v15 = v19 & (v14 - 1);
      v17 = *(const llvm::MachineInstr **)(v13 + 16 * v15);
      if (v5 == v17)
      {
        v16 = (const llvm::MachineInstr **)(v13 + 16 * v15);
        goto LABEL_19;
      }
    }
LABEL_18:
    v16 = (const llvm::MachineInstr **)(v13 + 16 * v14);
  }
LABEL_19:
  v20 = (unint64_t)v16[1] & 0xFFFFFFFFFFFFFFF8 | 4;
LABEL_20:
  v54 = v56;
  v55 = 0x800000000;
  v57 = v59;
  v58 = 0x800000000;
  v60 = v62;
  v61 = 0x800000000;
  llvm::RegisterOperands::collect(&v54, a2, *((const llvm::TargetRegisterInfo **)this + 1), *((const llvm::MachineRegisterInfo **)this + 3), *((unsigned __int8 *)this + 58), 1);
  if (*((_BYTE *)this + 58))
  {
    llvm::RegisterOperands::adjustLaneLiveness((uint64_t)&v54, *((_QWORD *)this + 4), *((_QWORD *)this + 3), v20, 0);
  }
  else if (*((_BYTE *)this + 56))
  {
    llvm::RegisterOperands::detectDeadDefs((uint64_t)&v54, a2, *((const llvm::LiveIntervals **)this + 4));
  }
  llvm::RegPressureTracker::bumpDeadDefs((uint64_t)this, (unsigned int *)v60, v61);
  if ((_DWORD)v58)
  {
    v21 = (char *)v57;
    v22 = (char *)v57 + 16 * v58;
    do
    {
      v23 = *(unsigned int *)v21;
      v24 = v23;
      if ((v23 & 0x80000000) != 0)
        v24 = *((_DWORD *)this + 64) + (v23 & 0x7FFFFFFF);
      v25 = *(unsigned __int8 *)(*((_QWORD *)this + 30) + v24);
      v26 = *((_DWORD *)this + 26);
      if (v26 <= v25)
        goto LABEL_34;
      v27 = *((_QWORD *)this + 12);
      while (1)
      {
        v28 = v25;
        if (*(_DWORD *)(v27 + 16 * v25) == v24)
          break;
        v25 += 256;
        if (v28 + 256 >= v26)
          goto LABEL_34;
      }
      if (v26 == v25)
LABEL_34:
        v29 = 0;
      else
        v29 = *(_QWORD *)(v27 + 16 * v25 + 8);
      if ((_DWORD)v55)
      {
        v30 = (char *)v54 + 8;
        v31 = 16 * v55;
        while ((_DWORD)v23 != *((_DWORD *)v30 - 2))
        {
          v30 += 2;
          v31 -= 16;
          if (!v31)
            goto LABEL_39;
        }
        v32 = *v30;
      }
      else
      {
LABEL_39:
        v32 = 0;
      }
      if (v29 & ~*((_QWORD *)v21 + 1) | v32)
        v33 = 1;
      else
        v33 = v29 == 0;
      if (!v33)
      {
        v34 = (_QWORD *)*((_QWORD *)this + 3);
        v35 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v34 + 16) + 176))(*(_QWORD *)(*v34 + 16));
        v36 = v35;
        if ((v23 & 0x80000000) != 0)
        {
          v37 = *(_QWORD *)(v34[3] + 16 * (v23 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
          v38 = (unsigned int *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v35 + 320))(v35, v37);
          v39 = *(_DWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v36 + 280))(v36, v37);
        }
        else
        {
          v38 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 328))(v35, v23);
          v39 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 288))(v36, v23);
        }
        v40 = *v38;
        if ((_DWORD)v40 != -1)
        {
          v41 = *((_QWORD *)this + 9);
          v42 = v38 + 1;
          do
          {
            *(_DWORD *)(v41 + 4 * v40) -= v39;
            v43 = *v42++;
            v40 = v43;
          }
          while (v43 != -1);
        }
      }
      v21 += 16;
    }
    while (v21 != v22);
  }
  if ((_DWORD)v55)
  {
    v44 = (char *)v54;
    v45 = (char *)v54 + 16 * v55;
    do
    {
      v46 = *(unsigned int *)v44;
      v47 = v46;
      v48 = *(_DWORD *)v44;
      if ((v46 & 0x80000000) != 0)
      {
        v47 = *((_DWORD *)this + 64) + (v46 & 0x7FFFFFFF);
        v48 = *((_DWORD *)this + 64) + (v46 & 0x7FFFFFFF);
      }
      v49 = *(unsigned __int8 *)(*((_QWORD *)this + 30) + v47);
      v50 = *((_DWORD *)this + 26);
      if (v50 <= v49)
        goto LABEL_64;
      v51 = *((_QWORD *)this + 12);
      while (1)
      {
        v52 = v49;
        if (*(_DWORD *)(v51 + 16 * v49) == v48)
          break;
        v49 += 256;
        if (v52 + 256 >= v50)
          goto LABEL_64;
      }
      if (v50 == v49)
LABEL_64:
        v53 = 0;
      else
        v53 = *(_QWORD *)(v51 + 16 * v49 + 8);
      llvm::RegPressureTracker::increaseRegPressure((uint64_t)this, v46, v53, *((_QWORD *)v44 + 1) | v53);
      v44 += 16;
    }
    while (v44 != v45);
  }
  if (v60 != v62)
    free(v60);
  if (v57 != v59)
    free(v57);
  if (v54 != v56)
    free(v54);
}

uint64_t sub_1C525C0D8(uint64_t result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, llvm::RegisterClassInfo *this, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;

  *(_DWORD *)a5 = 0;
  v8 = a2;
  if (a2)
  {
    v14 = result;
    v15 = 0;
    while (1)
    {
      v16 = *(_DWORD *)(v14 + 4 * v15);
      v17 = *(_DWORD *)(a3 + 4 * v15);
      if (v17 == v16)
        goto LABEL_15;
      result = *(unsigned int *)(*((_QWORD *)this + 27) + 4 * v15);
      if ((_DWORD)result)
        break;
      result = llvm::RegisterClassInfo::computePSetLimit(this, v15);
      *(_DWORD *)(*((_QWORD *)this + 27) + 4 * v15) = result;
      if (a8)
        goto LABEL_6;
LABEL_7:
      if (result <= v17)
        v18 = v17;
      else
        v18 = result;
      v19 = v18 - v16;
      v20 = v17 - result;
      if (v17 < result)
        v20 = 0;
      if (result > v16)
        v19 = v20;
      if (v19)
      {
        *(_DWORD *)a5 = (unsigned __int16)(v15 + 1);
        *(_WORD *)(a5 + 2) = v19;
        return result;
      }
LABEL_15:
      if (v8 == ++v15)
        return result;
    }
    if (!a8)
      goto LABEL_7;
LABEL_6:
    result = (*(_DWORD *)(a7 + 4 * v15) + result);
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_1C525C1BC(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  int v17;

  *(_DWORD *)(a9 + 4) = 0;
  *(_DWORD *)(a9 + 8) = 0;
  if (a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = *(_DWORD *)(a3 + 4 * v12);
      v15 = v14 - *(_DWORD *)(result + 4 * v12);
      if (v15)
      {
        if (v11 || v13 == a6)
        {
LABEL_13:
          if (v10)
            goto LABEL_20;
        }
        else
        {
          while (1)
          {
            v16 = *(unsigned __int16 *)(a5 + 4 * v13) - 1;
            if (v16 >= v12)
              break;
            if (a6 == ++v13)
            {
              v11 = 0;
              v13 = a6;
              if (v10)
                goto LABEL_20;
              goto LABEL_14;
            }
          }
          if (v16 == v12)
          {
            v17 = v14 - *(__int16 *)(a5 + 4 * v13 + 2);
            if (v17 >= 1)
            {
              v9 = (unsigned __int16)(v12 + 1);
              *(_DWORD *)(a9 + 4) = v9;
              *(_WORD *)(a9 + 6) = v17;
              v11 = v9;
              goto LABEL_13;
            }
          }
          v11 = 0;
          if (v10)
            goto LABEL_20;
        }
LABEL_14:
        if (v14 <= *(_DWORD *)(a7 + 4 * v12))
        {
          v10 = 0;
        }
        else
        {
          v10 = (unsigned __int16)(v12 + 1);
          *(_DWORD *)(a9 + 8) = v10;
          *(_WORD *)(a9 + 10) = v15;
          if (v13 == a6 || v9)
            return result;
          v11 = 0;
        }
      }
LABEL_20:
      ++v12;
    }
    while (v12 != a2);
  }
  return result;
}

uint64_t llvm::RegPressureTracker::getUpwardPressureDelta(uint64_t result, uint64_t a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int16 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;

  v10 = a3;
  v11 = result;
  v12 = 0;
  v13 = a3 + 32;
  do
  {
    v14 = *v10;
    if (!*v10)
      break;
    v15 = (v14 - 1);
    v16 = *(_QWORD *)(v11 + 16);
    result = *(unsigned int *)(*(_QWORD *)(v16 + 216) + 4 * v15);
    if (!(_DWORD)result)
    {
      result = llvm::RegisterClassInfo::computePSetLimit(*(llvm::RegisterClassInfo **)(v11 + 16), (v14 - 1));
      *(_DWORD *)(*(_QWORD *)(v16 + 216) + 4 * v15) = result;
    }
    v17 = *(_QWORD *)(v11 + 328);
    if (v17 != *(_QWORD *)(v11 + 336))
      result = (*(_DWORD *)(v17 + 4 * v15) + result);
    v18 = *(_DWORD *)(*(_QWORD *)(v11 + 72) + 4 * v15);
    v19 = *(_DWORD *)(**(_QWORD **)(v11 + 48) + 4 * v15);
    v20 = v18 + (__int16)v10[1];
    if (v20 <= v19)
      v21 = *(_DWORD *)(**(_QWORD **)(v11 + 48) + 4 * v15);
    else
      v21 = v18 + (__int16)v10[1];
    if (!*(_WORD *)a4)
    {
      v22 = v18 - result;
      if (v18 < result)
        v22 = 0;
      if (v18 <= result)
        v23 = v20 - result;
      else
        v23 = (__int16)v10[1];
      if (v20 <= result)
        v23 = -v22;
      if (v23)
      {
        *(_DWORD *)a4 = v14;
        *(_WORD *)(a4 + 2) = v23;
      }
    }
    if (v19 < v20)
    {
      if (!*(_WORD *)(a4 + 4) && v12 != a6)
      {
        while (1)
        {
          v24 = *(unsigned __int16 *)(a5 + 4 * v12);
          if (v24 - 1 >= v15)
            break;
          if (a6 == ++v12)
          {
            v12 = a6;
            goto LABEL_29;
          }
        }
        if (v24 == v14)
        {
          v25 = v21 - *(__int16 *)(a5 + 4 * v12 + 2);
          if (v25 - 0x8000 >= 0xFFFF8001)
          {
            *(_DWORD *)(a4 + 4) = v14;
            *(_WORD *)(a4 + 6) = v25;
          }
        }
      }
LABEL_29:
      if (!*(_WORD *)(a4 + 8) && v21 > *(_DWORD *)(a7 + 4 * v15))
      {
        *(_DWORD *)(a4 + 8) = v14;
        *(_WORD *)(a4 + 10) = v21 - v19;
      }
    }
    v10 += 2;
  }
  while (v10 != v13);
  return result;
}

uint64_t llvm::RegPressureTracker::getLiveLanesAt(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  int v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned int v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v3 = *(_QWORD *)(a1 + 32);
  if ((a2 & 0x80000000) == 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 680) + 8 * a2);
    if (!v4)
      return -1;
    v5 = *(unsigned int *)(v4 + 8);
    v6 = *(_QWORD **)v4;
    if ((_DWORD)v5)
    {
      v7 = v6[3 * v5 - 2];
      v8 = *(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3;
      if (v8 < ((v7 >> 1) & 3 | *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24)))
      {
        v9 = v6;
        v10 = v5;
        do
        {
          v11 = v10 >> 1;
          v12 = v9[3 * (v10 >> 1) + 1];
          LODWORD(v12) = (v12 >> 1) & 3 | *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24);
          v10 -= (v10 >> 1) + 1;
          v13 = v8 >= v12;
          if (v8 >= v12)
            v14 = v11 + 1;
          else
            v14 = 0;
          v9 += 3 * v14;
          if (!v13)
            v10 = v11;
        }
        while (v10);
LABEL_37:
        if (v9 != &v6[3 * v5])
        {
          if (((*v9 >> 1) & 3 | *(_DWORD *)((*v9 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3))
            return 0;
          else
            return -1;
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v5) = 0;
    }
    v9 = &v6[3 * v5];
    goto LABEL_37;
  }
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(unsigned __int8 *)(a1 + 58);
  v17 = a2 & 0x7FFFFFFF;
  if (v17 < *(unsigned int *)(v3 + 416) && (v18 = *(_QWORD *)(*(_QWORD *)(v3 + 408) + 8 * v17)) != 0)
  {
    if (!*(_BYTE *)(a1 + 58))
      goto LABEL_48;
  }
  else
  {
    v55 = *(_QWORD *)(a1 + 24);
    v56 = a3;
    v54 = a2 & 0x7FFFFFFF;
    v53 = *(unsigned __int8 *)(a1 + 58);
    v18 = sub_1C4851220(*(_QWORD *)(a1 + 32), a2);
    v34 = *(_QWORD *)(v3 + 304);
    v35 = *(_QWORD *)(v3 + 248);
    v36 = *(_QWORD *)(v35 + 40);
    *(_QWORD *)v34 = v35;
    *(_QWORD *)(v34 + 8) = v36;
    *(_OWORD *)(v34 + 16) = *(_OWORD *)(v3 + 288);
    *(_QWORD *)(v34 + 32) = v3 + 312;
    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v34);
    *(_DWORD *)(v34 + 184) = 0;
    v37 = *(_QWORD *)(v3 + 256);
    v39 = *(_BYTE *)(v37 + 16) == 0;
    v38 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v37 + 24) + 16 * (*(_DWORD *)(v18 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                             + 34);
    v39 = v39 || v38 == 0;
    v40 = !v39;
    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v3 + 304), (llvm::LiveInterval *)v18, v40);
    llvm::LiveIntervals::computeDeadValues(v3, v18, 0);
    v16 = v53;
    v17 = v54;
    v15 = v55;
    a3 = v56;
    if (!v53)
      goto LABEL_48;
  }
  v19 = *(_QWORD *)(v18 + 104);
  if (v19)
  {
    result = 0;
    v21 = a3 & 0xFFFFFFFFFFFFFFF8;
    v22 = (a3 >> 1) & 3;
    while (1)
    {
      v23 = *(_DWORD *)(v19 + 8);
      v24 = *(_QWORD **)v19;
      if (v23)
      {
        v25 = v24[3 * v23 - 2];
        v26 = *(_DWORD *)(v21 + 24) | v22;
        v27 = (v25 >> 1) & 3 | *(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 24);
        v28 = *(_QWORD **)v19;
        v29 = *(unsigned int *)(v19 + 8);
        if (v26 < v27)
        {
          do
          {
            v30 = v29 >> 1;
            v31 = v28[3 * (v29 >> 1) + 1];
            LODWORD(v31) = (v31 >> 1) & 3 | *(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 24);
            v29 -= (v29 >> 1) + 1;
            v32 = v26 >= v31;
            if (v26 >= v31)
              v33 = v30 + 1;
            else
              v33 = 0;
            v28 += 3 * v33;
            if (!v32)
              v29 = v30;
          }
          while (v29);
          goto LABEL_29;
        }
      }
      else
      {
        v23 = 0;
      }
      v28 = &v24[3 * v23];
LABEL_29:
      if (v28 != &v24[3 * v23]
        && ((*v28 >> 1) & 3 | *(_DWORD *)((*v28 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v21 + 24) | v22))
      {
        result |= *(_QWORD *)(v19 + 112);
      }
      v19 = *(_QWORD *)(v19 + 104);
      if (!v19)
        return result;
    }
  }
LABEL_48:
  v41 = *(_DWORD *)(v18 + 8);
  v42 = *(_QWORD **)v18;
  if (!v41)
  {
    v41 = 0;
    goto LABEL_59;
  }
  v43 = v42[3 * v41 - 2];
  v44 = *(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3;
  if (v44 >= ((v43 >> 1) & 3 | *(_DWORD *)((v43 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_59:
    v45 = &v42[3 * v41];
    goto LABEL_60;
  }
  v45 = *(_QWORD **)v18;
  v46 = *(unsigned int *)(v18 + 8);
  do
  {
    v47 = v46 >> 1;
    v48 = v45[3 * (v46 >> 1) + 1];
    LODWORD(v48) = (v48 >> 1) & 3 | *(_DWORD *)((v48 & 0xFFFFFFFFFFFFFFF8) + 24);
    v46 -= (v46 >> 1) + 1;
    v49 = v44 >= v48;
    if (v44 >= v48)
      v50 = v47 + 1;
    else
      v50 = 0;
    v45 += 3 * v50;
    if (!v49)
      v46 = v47;
  }
  while (v46);
LABEL_60:
  if (v45 == &v42[3 * v41])
    return 0;
  v51 = (*v45 >> 1) & 3 | *(_DWORD *)((*v45 & 0xFFFFFFFFFFFFFFF8) + 24);
  v52 = *(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3;
  if (v51 > v52)
    result = 0;
  else
    result = -1;
  if (v16 && v51 <= v52)
    return *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v15 + 24) + 16 * v17) & 0xFFFFFFFFFFFFFFF8) + 24);
  return result;
}

void llvm::RegPressureTracker::bumpDownwardPressure(llvm::RegPressureTracker *this, const llvm::MachineInstr *a2)
{
  __int16 v3;
  const llvm::MachineInstr *v4;
  uint64_t v5;
  const llvm::MachineInstr *v6;
  const llvm::MachineInstr *v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const llvm::MachineInstr **v15;
  const llvm::MachineInstr *v16;
  int v17;
  int v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t LastUsedLanes;
  uint64_t v24;
  unint64_t CurrSlot;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int **v29;
  int *v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  __int16 v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  _BYTE v78[128];
  void *v79;
  uint64_t v80;
  _BYTE v81[128];
  void *v82;
  uint64_t v83;
  _QWORD v84[18];

  v84[16] = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 56))
  {
    v19 = 0;
    goto LABEL_20;
  }
  v3 = *((_WORD *)a2 + 22);
  v4 = a2;
  if ((v3 & 4) != 0)
  {
    v4 = a2;
    do
      v4 = (const llvm::MachineInstr *)(*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8);
    while ((*((_WORD *)v4 + 22) & 4) != 0);
  }
  v5 = *(_QWORD *)(*((_QWORD *)this + 4) + 288);
  v6 = a2;
  if ((v3 & 8) != 0)
  {
    v6 = a2;
    do
      v6 = (const llvm::MachineInstr *)*((_QWORD *)v6 + 1);
    while ((*((_WORD *)v6 + 22) & 8) != 0);
  }
  v7 = (const llvm::MachineInstr *)*((_QWORD *)v6 + 1);
  if (v4 != v7)
  {
    while (1)
    {
      v8 = **((unsigned __int16 **)v4 + 2);
      v9 = v8 > 0x17;
      v10 = (1 << v8) & 0x83E000;
      if (v9 || v10 == 0)
        break;
      v4 = (const llvm::MachineInstr *)*((_QWORD *)v4 + 1);
      if (v4 == v7)
      {
        v4 = (const llvm::MachineInstr *)*((_QWORD *)v6 + 1);
        break;
      }
    }
  }
  v12 = *(_QWORD *)(v5 + 368);
  v13 = *(unsigned int *)(v5 + 384);
  if (!(_DWORD)v13)
    goto LABEL_18;
  LODWORD(v14) = ((v4 >> 4) ^ (v4 >> 9)) & (v13 - 1);
  v15 = (const llvm::MachineInstr **)(v12 + 16 * v14);
  v16 = *v15;
  if (v4 != *v15)
  {
    v17 = 1;
    while (v16 != (const llvm::MachineInstr *)-4096)
    {
      v18 = v14 + v17++;
      v14 = v18 & (v13 - 1);
      v16 = *(const llvm::MachineInstr **)(v12 + 16 * v14);
      if (v4 == v16)
      {
        v15 = (const llvm::MachineInstr **)(v12 + 16 * v14);
        goto LABEL_19;
      }
    }
LABEL_18:
    v15 = (const llvm::MachineInstr **)(v12 + 16 * v13);
  }
LABEL_19:
  v19 = (unint64_t)v15[1] & 0xFFFFFFFFFFFFFFF8 | 4;
LABEL_20:
  v76 = v78;
  v77 = 0x800000000;
  v79 = v81;
  v80 = 0x800000000;
  v82 = v84;
  v83 = 0x800000000;
  llvm::RegisterOperands::collect(&v76, a2, *((const llvm::TargetRegisterInfo **)this + 1), *((const llvm::MachineRegisterInfo **)this + 3), *((unsigned __int8 *)this + 58), 0);
  if (*((_BYTE *)this + 58))
    llvm::RegisterOperands::adjustLaneLiveness((uint64_t)&v76, *((_QWORD *)this + 4), *((_QWORD *)this + 3), v19, 0);
  if (*((_BYTE *)this + 56) && (_DWORD)v77)
  {
    v20 = (unsigned int *)v76;
    v21 = (unsigned int *)((char *)v76 + 16 * v77);
    while (1)
    {
      v22 = *v20;
      LastUsedLanes = llvm::RegPressureTracker::getLastUsedLanes((uint64_t)this, *v20, v19);
      if (!LastUsedLanes)
        goto LABEL_77;
      v24 = LastUsedLanes;
      CurrSlot = llvm::RegPressureTracker::getCurrSlot(this);
      v27 = (_QWORD *)*((_QWORD *)this + 3);
      v26 = *((_QWORD *)this + 4);
      v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v27 + 16) + 176))(*(_QWORD *)(*v27 + 16));
      if ((v22 & 0x80000000) != 0)
        v29 = (int **)(v27[3] + 16 * (v22 & 0x7FFFFFFF) + 8);
      else
        v29 = (int **)(v27[34] + 8 * v22);
      v30 = *v29;
      if (!v30)
        goto LABEL_32;
      while (1)
      {
        v31 = *v30;
        if ((*v30 & 0x81000000) == 0)
          break;
        v30 = (int *)*((_QWORD *)v30 + 3);
        if (!v30)
          goto LABEL_32;
      }
LABEL_39:
      if ((v31 & 0x10000000) != 0)
        goto LABEL_59;
      v38 = *((_QWORD *)v30 + 1);
      v39 = *(_WORD *)(v38 + 44);
      v40 = v38;
      if ((v39 & 4) != 0)
      {
        do
          v40 = *(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v40 + 44) & 4) != 0);
      }
      if ((v39 & 8) != 0)
      {
        do
          v38 = *(_QWORD *)(v38 + 8);
        while ((*(_WORD *)(v38 + 44) & 8) != 0);
      }
      v41 = *(_QWORD *)(v38 + 8);
      if (v40 != v41)
      {
        while (1)
        {
          v42 = **(unsigned __int16 **)(v40 + 16);
          v9 = v42 > 0x17;
          v43 = (1 << v42) & 0x83E000;
          if (v9 || v43 == 0)
            break;
          v40 = *(_QWORD *)(v40 + 8);
          if (v40 == v41)
          {
            v40 = v41;
            break;
          }
        }
      }
      v45 = *(_QWORD *)(v26 + 288);
      v46 = *(_QWORD *)(v45 + 368);
      v47 = *(unsigned int *)(v45 + 384);
      if (!(_DWORD)v47)
        goto LABEL_55;
      LODWORD(v48) = ((v40 >> 4) ^ (v40 >> 9)) & (v47 - 1);
      v49 = (uint64_t *)(v46 + 16 * v48);
      v50 = *v49;
      if (v40 != *v49)
        break;
LABEL_56:
      v53 = *(_DWORD *)((v49[1] & 0xFFFFFFFFFFFFFFF8) + 24) | 2;
      if (v53 < (*(_DWORD *)((CurrSlot & 0xFFFFFFFFFFFFFFF8) + 24) | (CurrSlot >> 1) & 3)
        || v53 >= (*(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24) | (v19 >> 1) & 3)
        || (v24 &= ~*(_QWORD *)(*(_QWORD *)(v28 + 232) + 8 * ((v31 >> 8) & 0xFFF))) != 0)
      {
LABEL_59:
        while (1)
        {
          v30 = (int *)*((_QWORD *)v30 + 3);
          if (!v30)
            break;
          v31 = *v30;
          if ((*v30 & 0x81000000) == 0)
            goto LABEL_39;
        }
LABEL_32:
        v32 = v22;
        v33 = v22;
        if ((v22 & 0x80000000) != 0)
        {
          v32 = *((_DWORD *)this + 64) + (v22 & 0x7FFFFFFF);
          v33 = *((_DWORD *)this + 64) + (v22 & 0x7FFFFFFF);
        }
        v34 = *(unsigned __int8 *)(*((_QWORD *)this + 30) + v32);
        v35 = *((_DWORD *)this + 26);
        if (v35 > v34)
        {
          v36 = *((_QWORD *)this + 12);
          while (1)
          {
            v37 = v34;
            if (*(_DWORD *)(v36 + 16 * v34) == v33)
              break;
            v34 += 256;
            if (v37 + 256 >= v35)
              goto LABEL_77;
          }
          if (v35 != v34)
          {
            v54 = *(_QWORD *)(v36 + 16 * v34 + 8);
            if (v54 && (v54 & ~v24) == 0)
            {
              v56 = (_QWORD *)*((_QWORD *)this + 3);
              v57 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v56 + 16) + 176))(*(_QWORD *)(*v56 + 16));
              v58 = v57;
              if ((v22 & 0x80000000) != 0)
              {
                v59 = *(_QWORD *)(v56[3] + 16 * (v22 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
                v60 = (unsigned int *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v57 + 320))(v57, v59);
                v61 = *(_DWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v58 + 280))(v58, v59);
              }
              else
              {
                v60 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 328))(v57, v22);
                v61 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 288))(v58, v22);
              }
              v62 = *v60;
              if ((_DWORD)v62 != -1)
              {
                v63 = *((_QWORD *)this + 9);
                v64 = v60 + 1;
                do
                {
                  *(_DWORD *)(v63 + 4 * v62) -= v61;
                  v65 = *v64++;
                  v62 = v65;
                }
                while (v65 != -1);
              }
            }
          }
        }
      }
LABEL_77:
      v20 += 4;
      if (v20 == v21)
        goto LABEL_80;
    }
    v51 = 1;
    while (v50 != -4096)
    {
      v52 = v48 + v51++;
      v48 = v52 & (v47 - 1);
      v50 = *(_QWORD *)(v46 + 16 * v48);
      if (v40 == v50)
      {
        v49 = (uint64_t *)(v46 + 16 * v48);
        goto LABEL_56;
      }
    }
LABEL_55:
    v49 = (uint64_t *)(v46 + 16 * v47);
    goto LABEL_56;
  }
LABEL_80:
  if ((_DWORD)v80)
  {
    v66 = (char *)v79;
    v67 = (char *)v79 + 16 * v80;
    do
    {
      v68 = *(unsigned int *)v66;
      v69 = v68;
      v70 = *(_DWORD *)v66;
      if ((v68 & 0x80000000) != 0)
      {
        v69 = *((_DWORD *)this + 64) + (v68 & 0x7FFFFFFF);
        v70 = *((_DWORD *)this + 64) + (v68 & 0x7FFFFFFF);
      }
      v71 = *(unsigned __int8 *)(*((_QWORD *)this + 30) + v69);
      v72 = *((_DWORD *)this + 26);
      if (v72 <= v71)
        goto LABEL_90;
      v73 = *((_QWORD *)this + 12);
      while (1)
      {
        v74 = v71;
        if (*(_DWORD *)(v73 + 16 * v71) == v70)
          break;
        v71 += 256;
        if (v74 + 256 >= v72)
          goto LABEL_90;
      }
      if (v72 == v71)
LABEL_90:
        v75 = 0;
      else
        v75 = *(_QWORD *)(v73 + 16 * v71 + 8);
      llvm::RegPressureTracker::increaseRegPressure((uint64_t)this, v68, v75, *((_QWORD *)v66 + 1) | v75);
      v66 += 16;
    }
    while (v66 != v67);
  }
  llvm::RegPressureTracker::bumpDeadDefs((uint64_t)this, (unsigned int *)v82, v83);
  if (v82 != v84)
    free(v82);
  if (v79 != v81)
    free(v79);
  if (v76 != v78)
    free(v76);
}

void llvm::RegPressureTracker::getUpwardPressure(char **this, llvm::MachineInstr *a2, char **a3, char **a4)
{
  char **v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  if (this + 9 != a3)
    sub_1C4FCE520(a3, this[9], this[10], (this[10] - this[9]) >> 2);
  v8 = (char **)this[6];
  if (v8 != a4)
    sub_1C4FCE520(a4, *v8, v8[1], (v8[1] - *v8) >> 2);
  llvm::RegPressureTracker::bumpUpwardPressure((llvm::RegPressureTracker *)this, a2);
  v9 = this[6];
  v10 = *(char **)v9;
  *(_QWORD *)v9 = *a4;
  *a4 = v10;
  v11 = (char *)*((_QWORD *)v9 + 1);
  *((_QWORD *)v9 + 1) = a4[1];
  a4[1] = v11;
  v12 = (char *)*((_QWORD *)v9 + 2);
  *((_QWORD *)v9 + 2) = a4[2];
  a4[2] = v12;
  v13 = this[9];
  this[9] = *a3;
  *a3 = v13;
  v14 = this[10];
  this[10] = a3[1];
  a3[1] = v14;
  v15 = this[11];
  this[11] = a3[2];
  a3[2] = v15;
}

void llvm::RegPressureTracker::getDownwardPressure(char **this, llvm::MachineInstr *a2, char **a3, char **a4)
{
  char **v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  if (this + 9 != a3)
    sub_1C4FCE520(a3, this[9], this[10], (this[10] - this[9]) >> 2);
  v8 = (char **)this[6];
  if (v8 != a4)
    sub_1C4FCE520(a4, *v8, v8[1], (v8[1] - *v8) >> 2);
  llvm::RegPressureTracker::bumpDownwardPressure((llvm::RegPressureTracker *)this, a2);
  v9 = this[6];
  v10 = *(char **)v9;
  *(_QWORD *)v9 = *a4;
  *a4 = v10;
  v11 = (char *)*((_QWORD *)v9 + 1);
  *((_QWORD *)v9 + 1) = a4[1];
  a4[1] = v11;
  v12 = (char *)*((_QWORD *)v9 + 2);
  *((_QWORD *)v9 + 2) = a4[2];
  a4[2] = v12;
  v13 = this[9];
  this[9] = *a3;
  *a3 = v13;
  v14 = this[10];
  this[10] = a3[1];
  a3[1] = v14;
  v15 = this[11];
  this[11] = a3[2];
  a3[2] = v15;
}

unsigned int *sub_1C525CFE0(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  _QWORD *v7;
  unsigned int *result;
  uint64_t v9;
  _QWORD *v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  int v13;
  int v14;
  int v15;
  uint64_t *v16;

  if ((a2 & 0x80000000) != 0)
  {
    if (a3)
      v16 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 232) + 8 * a3);
    else
      v16 = (uint64_t *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                      + 24);
    return sub_1C525A8B8(a4, a2, *v16);
  }
  else
  {
    v7 = *(_QWORD **)(a1 + 16);
    result = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v7 + 16) + 176))(*(_QWORD *)(*v7 + 16));
    if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)result + 27) + 16) + a2)
      && ((*(_QWORD *)(v7[44] + 8 * (a2 >> 6)) >> a2) & 1) == 0)
    {
      v9 = *(_QWORD *)(a1 + 8);
      if (v9)
        v10 = (_QWORD *)(v9 + 8);
      else
        v10 = 0;
      v11 = (unsigned __int16 *)(v10[6]
                               + (((unint64_t)*(unsigned int *)(*v10 + 24 * a2 + 16) >> 3) & 0x1FFFFFFE));
      v13 = *v11;
      v12 = v11 + 1;
      v14 = v13 + (*(_DWORD *)(*v10 + 24 * a2 + 16) & 0xF) * a2;
      do
      {
        result = sub_1C525A8B8(a4, (unsigned __int16)v14, -1);
        v15 = *v12++;
        v14 += v15;
      }
      while (v15);
    }
  }
  return result;
}

unsigned int *sub_1C525D0F4(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  _QWORD *v6;
  unsigned int *result;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  int v12;
  int v13;
  int v14;

  if ((a2 & 0x80000000) != 0)
    return sub_1C525A8B8(a3, a2, -1);
  v6 = *(_QWORD **)(a1 + 16);
  result = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v6 + 16) + 176))(*(_QWORD *)(*v6 + 16));
  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)result + 27) + 16) + a2)
    && ((*(_QWORD *)(v6[44] + 8 * (a2 >> 6)) >> a2) & 1) == 0)
  {
    v8 = *(_QWORD *)(a1 + 8);
    if (v8)
      v9 = (_QWORD *)(v8 + 8);
    else
      v9 = 0;
    v10 = (unsigned __int16 *)(v9[6] + (((unint64_t)*(unsigned int *)(*v9 + 24 * a2 + 16) >> 3) & 0x1FFFFFFE));
    v12 = *v10;
    v11 = v10 + 1;
    v13 = v12 + (*(_DWORD *)(*v9 + 24 * a2 + 16) & 0xF) * a2;
    do
    {
      result = sub_1C525A8B8(a3, (unsigned __int16)v13, -1);
      v14 = *v11++;
      v13 += v14;
    }
    while (v14);
  }
  return result;
}

uint64_t sub_1C525D1D8(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  unsigned int v11;
  __int128 v13;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 144);
  v5 = *(unsigned __int8 *)(v4 + v3);
  v6 = *(_DWORD *)(a1 + 8);
  if (v6 > v5)
  {
    v7 = *(_QWORD *)a1;
    while (1)
    {
      v8 = v5;
      if (*(_DWORD *)(v7 + 16 * v5) == (_DWORD)v3)
        break;
      v5 += 256;
      if (v8 + 256 >= v6)
        goto LABEL_7;
    }
    if (v6 != v5)
      return v7 + 16 * v5;
  }
LABEL_7:
  *(_BYTE *)(v4 + v3) = v6;
  v9 = *(_OWORD *)a2;
  v10 = *(unsigned int *)(a1 + 8);
  if (v10 >= *(_DWORD *)(a1 + 12))
  {
    v13 = *(_OWORD *)a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v10 + 1, 16);
    v9 = v13;
    LODWORD(v10) = *(_DWORD *)(a1 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a1 + 16 * v10) = v9;
  v11 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v11;
  return *(_QWORD *)a1 + 16 * v11 - 16;
}

_QWORD *sub_1C525D2AC(_QWORD *result, unsigned int a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _WORD *v7;
  unsigned __int16 *v8;
  __int16 v9;
  unsigned __int16 v10;
  _QWORD *v11;
  BOOL v12;
  int v13;

  if (*result)
    v3 = (_QWORD *)(*result + 8);
  else
    v3 = 0;
  v4 = *v3 + 24 * a2;
  v5 = *(unsigned int *)(v4 + 16);
  v6 = v3[7];
  v7 = (_WORD *)(v3[6] + ((v5 >> 3) & 0x1FFFFFFE));
  v9 = *v7;
  v8 = v7 + 1;
  v10 = v9 + (v5 & 0xF) * a2;
  v11 = (_QWORD *)(v6 + 8 * *(unsigned __int16 *)(v4 + 20));
  do
  {
    if (*v11)
      v12 = (*v11 & a3) == 0;
    else
      v12 = 0;
    if (!v12)
      *(_QWORD *)(result[1] + 8 * (v10 >> 6)) |= 1 << v10;
    ++v11;
    v13 = *v8++;
    v10 += v13;
  }
  while (v13);
  return result;
}

void llvm::RegScavenger::init(llvm::RegScavenger *this, llvm::MachineBasicBlock *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;

  v4 = *((_QWORD *)a2 + 4);
  *((_QWORD *)this + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 16) + 104))(*(_QWORD *)(v4 + 16));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 16) + 176))(*(_QWORD *)(v4 + 16));
  *(_QWORD *)this = v5;
  *((_QWORD *)this + 2) = *(_QWORD *)(v4 + 40);
  *((_QWORD *)this + 12) = v5;
  v6 = *((_QWORD *)this + 13);
  v7 = *((unsigned int *)this + 28);
  v8 = v7;
  if ((_DWORD)v7)
    bzero(*((void **)this + 13), 8 * v7);
  v9 = *(_DWORD *)(v5 + 44);
  if ((*((_DWORD *)this + 42) & 0x3F) != 0)
    *(_QWORD *)(v6 + 8 * v7 - 8) &= ~(-1 << (*((_DWORD *)this + 42) & 0x3F));
  *((_DWORD *)this + 42) = v9;
  v10 = (v9 + 63) >> 6;
  v11 = v10 - v7;
  if ((_DWORD)v10 != (_DWORD)v7)
  {
    if (v10 >= v7)
    {
      v12 = v7;
      if (v10 > *((_DWORD *)this + 29))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 104, (uint64_t)this + 120, (v9 + 63) >> 6, 8);
        v12 = *((unsigned int *)this + 28);
        v6 = *((_QWORD *)this + 13);
        v9 = *((_DWORD *)this + 42);
        LODWORD(v7) = *((_DWORD *)this + 28);
      }
      bzero((void *)(v6 + 8 * v12), 8 * (v10 - v8));
      LODWORD(v7) = v7 + v11;
    }
    else
    {
      LODWORD(v7) = (v9 + 63) >> 6;
    }
    *((_DWORD *)this + 28) = v7;
  }
  if ((v9 & 0x3F) != 0)
    *(_QWORD *)(v6 + 8 * v7 - 8) &= ~(-1 << (v9 & 0x3F));
  if (!*((_QWORD *)this + 3))
  {
    v16 = *(_DWORD *)(*(_QWORD *)this + 44);
    *((_DWORD *)this + 10) = v16;
    sub_1C4833580((_DWORD *)this + 44, v16, 0);
    sub_1C4833580((_DWORD *)this + 62, *((_DWORD *)this + 10), 0);
    sub_1C4833580((_DWORD *)this + 80, *((_DWORD *)this + 10), 0);
  }
  *((_QWORD *)this + 3) = a2;
  v13 = *((unsigned int *)this + 14);
  if ((_DWORD)v13)
  {
    v14 = 16 * v13;
    v15 = (_QWORD *)(*((_QWORD *)this + 6) + 8);
    do
    {
      *((_DWORD *)v15 - 1) = 0;
      *v15 = 0;
      v15 += 2;
      v14 -= 16;
    }
    while (v14);
  }
  *((_BYTE *)this + 44) = 0;
}

uint64_t llvm::RegScavenger::enterBasicBlockEnd(llvm::RegScavenger *this, llvm::MachineBasicBlock *a2)
{
  uint64_t result;
  _WORD *v5;

  llvm::RegScavenger::init(this, a2);
  result = llvm::LiveRegUnits::addLiveOuts((llvm::RegScavenger *)((char *)this + 96), a2);
  v5 = (_WORD *)(*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFFFF8);
  if ((_WORD *)((char *)a2 + 48) != v5)
  {
    if (!v5 || (*(_BYTE *)v5 & 4) == 0)
    {
      while ((v5[22] & 4) != 0)
        v5 = (_WORD *)(*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8);
    }
    *((_QWORD *)this + 4) = v5;
    *((_BYTE *)this + 44) = 1;
  }
  return result;
}

_QWORD *llvm::RegScavenger::removeRegUnits(_QWORD *result, uint64_t *a2, unsigned int a3)
{
  _QWORD *v3;
  unint64_t v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;

  if (*result)
    v3 = (_QWORD *)(*result + 8);
  else
    v3 = 0;
  v4 = *(unsigned int *)(*v3 + 24 * a3 + 16);
  v5 = (unsigned __int16 *)(v3[6] + ((v4 >> 3) & 0x1FFFFFFE));
  v7 = *v5;
  v6 = v5 + 1;
  v8 = v7 + (v4 & 0xF) * a3;
  v9 = *a2;
  do
  {
    *(_QWORD *)(v9 + 8 * ((unsigned __int16)v8 >> 6)) &= ~(1 << v8);
    v10 = *v6++;
    v8 += v10;
  }
  while (v10);
  return result;
}

uint64_t sub_1C525D5D8(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  int v16;

  v4 = *(_DWORD *)(a2 + 64);
  if (*(_DWORD *)(a1 + 64) < v4)
  {
    v10 = *(_DWORD *)(a1 + 64) & 0x3F;
    v11 = *(unsigned int *)(a1 + 8);
    if (v10)
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11 - 8) &= ~(-1 << v10);
    v12 = v11;
    *(_DWORD *)(a1 + 64) = v4;
    v13 = v4 + 63;
    if ((_DWORD)v11 != (v4 + 63) >> 6)
    {
      v14 = v13 >> 6;
      if (v11 > v14)
      {
        *(_DWORD *)(a1 + 8) = v14;
        v12 = v13 >> 6;
      }
      else
      {
        v15 = v11;
        if (v14 > *(_DWORD *)(a1 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v14, 8);
          v15 = *(unsigned int *)(a1 + 8);
          v12 = *(_DWORD *)(a1 + 8);
        }
        if (v14 != v11)
          bzero((void *)(*(_QWORD *)a1 + 8 * v15), 8 * (v14 - v11));
        v12 += v14 - v11;
        *(_DWORD *)(a1 + 8) = v12;
        v4 = *(_DWORD *)(a1 + 64);
      }
    }
    v16 = v4 & 0x3F;
    if (v16)
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v12 - 8) &= ~(-1 << v16);
  }
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)a2;
    v7 = *(_QWORD **)a1;
    do
    {
      v8 = *v6++;
      *v7++ |= v8;
      --v5;
    }
    while (v5);
  }
  return a1;
}

void llvm::RegScavenger::forward(llvm::RegScavenger *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;

  if (*((_BYTE *)this + 44))
  {
    v2 = *((_QWORD *)this + 4);
    if (!v2 || (*(_BYTE *)v2 & 4) == 0)
    {
      while ((*(_WORD *)(v2 + 44) & 8) != 0)
        v2 = *(_QWORD *)(v2 + 8);
    }
    v3 = *(_QWORD *)(v2 + 8);
    *((_QWORD *)this + 4) = v3;
  }
  else
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 56);
    *((_QWORD *)this + 4) = v3;
    *((_BYTE *)this + 44) = 1;
  }
  v4 = *((unsigned int *)this + 14);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    v6 = (_QWORD *)(*((_QWORD *)this + 6) + 8);
    do
    {
      if (*v6 == v3)
      {
        *((_DWORD *)v6 - 1) = 0;
        *v6 = 0;
      }
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  v7 = **(unsigned __int16 **)(v3 + 16);
  if ((v7 - 13) >= 5 && v7 != 23)
  {
    llvm::RegScavenger::determineKillsAndDefs(this);
    v9 = *((unsigned int *)this + 28);
    LODWORD(v10) = *((_DWORD *)this + 46);
    if (v10 >= v9)
      v10 = v9;
    else
      v10 = v10;
    if ((_DWORD)v10)
    {
      v11 = (uint64_t *)*((_QWORD *)this + 22);
      v12 = (_QWORD *)*((_QWORD *)this + 13);
      do
      {
        v13 = *v11++;
        *v12++ &= ~v13;
        --v10;
      }
      while (v10);
    }
    v14 = *((_DWORD *)this + 78);
    if (*((_DWORD *)this + 42) < v14)
    {
      v19 = (_QWORD *)((char *)this + 104);
      v20 = *((_DWORD *)this + 42) & 0x3F;
      if (v20)
        *(_QWORD *)(*v19 + 8 * v9 - 8) &= ~(-1 << v20);
      *((_DWORD *)this + 42) = v14;
      v21 = v14 + 63;
      if ((_DWORD)v9 != (v14 + 63) >> 6)
      {
        v22 = v21 >> 6;
        if (v9 > v22)
        {
          *((_DWORD *)this + 28) = v22;
          LODWORD(v9) = v21 >> 6;
        }
        else
        {
          v23 = v9;
          v24 = v9;
          if (v22 > *((_DWORD *)this + 29))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 104, (uint64_t)this + 120, v22, 8);
            v23 = *((unsigned int *)this + 28);
            v24 = *((_DWORD *)this + 28);
          }
          if (v22 != v9)
            bzero((void *)(*v19 + 8 * v23), 8 * (v22 - v9));
          LODWORD(v9) = v24 + v22 - v9;
          *((_DWORD *)this + 28) = v9;
          v14 = *((_DWORD *)this + 42);
        }
      }
      v25 = v14 & 0x3F;
      if (v25)
        *(_QWORD *)(*v19 + 8 * v9 - 8) &= ~(-1 << v25);
    }
    v15 = *((unsigned int *)this + 64);
    if ((_DWORD)v15)
    {
      v16 = (uint64_t *)*((_QWORD *)this + 31);
      v17 = (_QWORD *)*((_QWORD *)this + 13);
      do
      {
        v18 = *v16++;
        *v17++ |= v18;
        --v15;
      }
      while (v15);
    }
  }
}

_QWORD *llvm::RegScavenger::backward(llvm::RegScavenger *this)
{
  const llvm::MachineInstr *v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = (const llvm::MachineInstr *)*((_QWORD *)this + 4);
  result = llvm::LiveRegUnits::stepBackward((llvm::RegScavenger *)((char *)this + 96), v2);
  v4 = *((unsigned int *)this + 14);
  if ((_DWORD)v4)
  {
    v7 = 16 * v4;
    v8 = (_QWORD *)(*((_QWORD *)this + 6) + 8);
    do
    {
      if ((const llvm::MachineInstr *)*v8 == v2)
      {
        *((_DWORD *)v8 - 1) = 0;
        *v8 = 0;
      }
      v8 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  v5 = (_QWORD *)*((_QWORD *)this + 4);
  if (v5 == *(_QWORD **)(*((_QWORD *)this + 3) + 56))
  {
    *((_QWORD *)this + 4) = 0;
    *((_BYTE *)this + 44) = 0;
  }
  else
  {
    v6 = *v5 & 0xFFFFFFFFFFFFFFF8;
    if (!v6 || (*(_BYTE *)v6 & 4) == 0)
    {
      while ((*(_WORD *)(v6 + 44) & 4) != 0)
        v6 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8;
    }
    *((_QWORD *)this + 4) = v6;
  }
  return result;
}

BOOL llvm::RegScavenger::isRegUsed(_QWORD *a1, unsigned int a2, _BOOL8 a3)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _WORD *v6;
  unsigned __int16 *v7;
  __int16 v8;
  unsigned __int16 v9;
  uint64_t v10;
  int v11;

  if (((*(_QWORD *)(*(_QWORD *)(a1[2] + 352) + 8 * (a2 >> 6)) >> a2) & 1) == 0)
  {
    v3 = a1[12];
    if (v3)
      v4 = (_QWORD *)(v3 + 8);
    else
      v4 = 0;
    v5 = *(unsigned int *)(*v4 + 24 * (unsigned __int16)a2 + 16);
    v6 = (_WORD *)(v4[6] + ((v5 >> 3) & 0x1FFFFFFE));
    v8 = *v6;
    v7 = v6 + 1;
    v9 = v8 + (v5 & 0xF) * a2;
    do
    {
      v10 = (1 << v9) & *(_QWORD *)(a1[13] + 8 * (v9 >> 6));
      a3 = v10 != 0;
      if (v10)
        break;
      v11 = *v7++;
      v9 += v11;
    }
    while (v11);
  }
  return a3;
}

BOOL sub_1C525DA68(_QWORD *a1, unsigned int a2)
{
  _QWORD *v2;
  unint64_t v3;
  _WORD *v4;
  unsigned __int16 *v5;
  __int16 v6;
  unsigned __int16 v7;
  uint64_t v8;
  int v9;

  if (*a1)
    v2 = (_QWORD *)(*a1 + 8);
  else
    v2 = 0;
  v3 = *(unsigned int *)(*v2 + 24 * a2 + 16);
  v4 = (_WORD *)(v2[6] + ((v3 >> 3) & 0x1FFFFFFE));
  v6 = *v4;
  v5 = v4 + 1;
  v7 = v6 + (v3 & 0xF) * a2;
  do
  {
    v8 = (1 << v7) & *(_QWORD *)(a1[1] + 8 * (v7 >> 6));
    if (v8)
      break;
    v9 = *v5++;
    v7 += v9;
  }
  while (v9);
  return v8 == 0;
}

char *llvm::RegScavenger::getRegsAvailable@<X0>(_QWORD *a1@<X0>, unsigned __int16 ***a2@<X1>, char *a3@<X8>)
{
  int v6;
  char *result;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  int v18;
  int v19;

  v6 = *(_DWORD *)(*a1 + 16);
  *(_QWORD *)a3 = a3 + 16;
  *((_QWORD *)a3 + 1) = 0x600000000;
  result = sub_1C4765AA4(a3, (v6 + 63) >> 6, 0);
  *((_DWORD *)a3 + 16) = v6;
  if (*((_WORD *)*a2 + 10))
  {
    v8 = **a2;
    v9 = &v8[*((unsigned __int16 *)*a2 + 10)];
    v10 = *(_QWORD *)(a1[2] + 352);
    v11 = *(_QWORD *)a3;
    do
    {
      v12 = *v8;
      if (((*(_QWORD *)(v10 + ((v12 >> 3) & 0x1FF8)) >> v12) & 1) == 0)
      {
        v13 = a1[12];
        if (v13)
          v14 = (_QWORD *)(v13 + 8);
        else
          v14 = 0;
        v15 = *(unsigned int *)(*v14 + 24 * *v8 + 16);
        v16 = (unsigned __int16 *)(v14[6] + ((v15 >> 3) & 0x1FFFFFFE));
        v18 = *v16;
        v17 = v16 + 1;
        result = (char *)(v18 + (v15 & 0xF) * v12);
        while (((*(_QWORD *)(a1[13] + 8 * ((unsigned __int16)result >> 6)) >> (char)result) & 1) == 0)
        {
          v19 = *v17++;
          result = (char *)(v19 + (_DWORD)result);
          if (!v19)
          {
            *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FF8)) |= 1 << v12;
            break;
          }
        }
      }
      ++v8;
    }
    while (v8 != v9);
  }
  return result;
}

uint64_t llvm::RegScavenger::findSurvivorReg(uint64_t a1, unint64_t a2, uint64_t a3, int a4, unint64_t *a5)
{
  uint64_t v10;
  unint64_t FirstTerminator;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v17;
  char v18;
  int v19;
  int *v20;
  int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned __int16 *v31;
  _WORD *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v38;
  unsigned int v39;
  _QWORD *v40;
  unsigned int i;
  unsigned __int16 *v42;
  int v43;
  unsigned __int16 *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v50;
  unint64_t v51;
  char v52;
  _QWORD *v53;

  v10 = sub_1C476B7EC(a3);
  v53 = (_QWORD *)a1;
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(*(llvm::MachineBasicBlock **)(a1 + 24));
  v12 = FirstTerminator;
  if (!a2 || (v13 = a2, (*(_BYTE *)a2 & 4) == 0))
  {
    v13 = a2;
    if ((*(_WORD *)(a2 + 44) & 8) != 0)
    {
      v13 = a2;
      do
        v13 = *(_QWORD *)(v13 + 8);
      while ((*(_WORD *)(v13 + 44) & 8) != 0);
    }
  }
  v14 = *(_QWORD *)(v13 + 8);
  if (a4 && v14 != FirstTerminator)
  {
    v52 = 0;
    do
    {
      v15 = **(unsigned __int16 **)(v14 + 16);
      if ((v15 - 13) < 5 || v15 == 23)
      {
        ++a4;
      }
      else
      {
        v50 = v10;
        v51 = a2;
        v17 = *(unsigned int *)(v14 + 40);
        if ((_DWORD)v17)
        {
          v18 = 0;
          v19 = 0;
          v20 = *(int **)(v14 + 32);
          v21 = &v20[8 * v17];
          do
          {
            v22 = *v20;
            if (*v20 == 12)
            {
              sub_1C5109220(a3, *((unsigned int **)v20 + 2), 0xFFFFFFFF);
              v22 = *v20;
            }
            if ((v22 & 0x100000FF) == 0)
            {
              v23 = v20[1];
              if (v23)
              {
                if ((v23 & 0x80000000) != 0)
                {
                  if ((v22 & 0x1000000) != 0)
                    v18 = 1;
                  else
                    v19 |= (v22 >> 26) & ~HIBYTE(v22);
                }
                else
                {
                  if (*v53)
                    v24 = (uint64_t *)(*v53 + 8);
                  else
                    v24 = 0;
                  v25 = *v24;
                  v26 = *(_DWORD *)(*v24 + 24 * v23 + 16) & 0xF;
                  v27 = ((unint64_t)*(unsigned int *)(*v24 + 24 * v23 + 16) >> 3) & 0x1FFFFFFE;
                  v30 = v24 + 5;
                  v29 = v24[5];
                  v28 = v30[1];
                  v31 = (unsigned __int16 *)(v28 + v27);
                  v33 = *v31;
                  v32 = v31 + 1;
                  v34 = v33 + v26 * v23;
                  while (1)
                  {
                    v35 = 4 * (unsigned __int16)v34;
                    v36 = *(unsigned __int16 *)(v29 + v35);
                    if (*(_WORD *)(v29 + v35) && v28 != 0)
                      break;
                    v38 = (unsigned __int16)*v32++;
                    v34 += v38;
                    if (!v38)
                      goto LABEL_22;
                  }
                  v39 = *(unsigned __int16 *)(v29 + 4 * (unsigned __int16)v34 + 2) << 16;
                  v40 = *(_QWORD **)a3;
                  for (i = v36; ; i = v36)
                  {
                    while (1)
                    {
                      v42 = (unsigned __int16 *)(v28 + 2 * *(unsigned int *)(v25 + 24 * v36 + 8));
                      do
                      {
                        v40[(unsigned __int16)i >> 6] &= ~(1 << i);
                        v43 = *v42++;
                        i += v43;
                      }
                      while (v43);
                      v36 = HIWORD(v39);
                      if (!(_DWORD)v36)
                        break;
                      i = HIWORD(v39);
                      v39 >>= 16;
                    }
                    if (!*v32)
                      break;
                    v34 += (unsigned __int16)*v32++;
                    v44 = (unsigned __int16 *)(v29 + 4 * (unsigned __int16)v34);
                    v36 = *v44;
                    v39 = v44[1] << 16;
                  }
                }
              }
            }
LABEL_22:
            v20 += 8;
          }
          while (v20 != v21);
        }
        else
        {
          LOBYTE(v19) = 0;
          v18 = 0;
        }
        v10 = v50;
        a2 = v51;
        if ((v52 & 1) == 0)
          a2 = v14;
        v45 = *(_QWORD **)a3;
        if (((*(_QWORD *)(*(_QWORD *)a3 + 8 * (v50 >> 6)) >> v50) & 1) == 0)
        {
          v46 = *(unsigned int *)(a3 + 8);
          if (!(_DWORD)v46)
            break;
          v47 = 8 * v46;
          while (!*v45)
          {
            ++v45;
            v47 -= 8;
            if (!v47)
              goto LABEL_62;
          }
          v10 = sub_1C476B7EC(a3);
        }
        v52 = v18 | (v19 ^ 1) & v52;
        if (!v14)
        {
LABEL_59:
          while ((*(_WORD *)(v14 + 44) & 8) != 0)
            v14 = *(_QWORD *)(v14 + 8);
          goto LABEL_60;
        }
      }
      if ((*(_BYTE *)v14 & 4) == 0)
        goto LABEL_59;
LABEL_60:
      v14 = *(_QWORD *)(v14 + 8);
      --a4;
    }
    while (a4 && v14 != v12);
  }
LABEL_62:
  if (v14 == v12)
    v48 = v12;
  else
    v48 = a2;
  *a5 = v48;
  return v10;
}

uint64_t llvm::RegScavenger::spill(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v47;
  _BYTE *v48;
  int v49;
  const char *v50;
  char v51;
  _BYTE *v52;
  char v53;
  const char *v54;
  __int16 v55;
  uint64_t v56[4];
  char v57;
  char v58;
  _QWORD v59[4];
  __int16 v60;
  uint64_t v61[4];
  char v62;
  char v63;
  uint64_t v64[5];
  _BYTE v65[48];

  v11 = *(_QWORD *)(*(_QWORD *)(a5[3] + 32) + 56);
  v12 = a1 + 6;
  v13 = *((unsigned int *)a1 + 14);
  v14 = *(_DWORD *)(v11 + 32);
  v15 = -v14;
  v16 = *(_QWORD *)(v11 + 8);
  v17 = -858993459 * ((unint64_t)(*(_QWORD *)(v11 + 16) - v16) >> 3) - v14;
  if (!(_DWORD)v13)
  {
    v38 = 0;
    v23 = 0;
LABEL_18:
    if (v13 >= *((_DWORD *)a1 + 15))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v12, (uint64_t)(a1 + 8), v23 + 1, 16);
      v23 = *((unsigned int *)a1 + 14);
    }
    v39 = (_QWORD *)(a1[6] + 16 * v23);
    *v39 = v17;
    v39[1] = 0;
    ++*((_DWORD *)a1 + 14);
    v19 = *a1;
    v26 = a1[6];
    goto LABEL_21;
  }
  v18 = 0;
  v19 = *a1;
  v20 = *(_QWORD *)(*a1 + 264);
  v21 = *(unsigned __int16 *)(*(_QWORD *)a3 + 24)
      + *(_DWORD *)(*a1 + 272) * ((*(_QWORD *)(*a1 + 248) - *(_QWORD *)(*a1 + 240)) >> 3);
  v22 = *(_DWORD *)(v20 + 24 * v21 + 4) >> 3;
  v23 = v13;
  LOBYTE(v20) = 63 - __clz((unint64_t)*(unsigned int *)(v20 + 24 * v21 + 8) >> 3);
  v24 = v20;
  v25 = -1 << v20;
  v26 = *v12;
  v27 = (_DWORD *)(*v12 + 4);
  v28 = -1;
  v29 = v13;
  do
  {
    if (!*v27)
    {
      v30 = *(v27 - 1);
      if (v30 >= v15 && v30 < (int)v17)
      {
        v32 = v30 + v14;
        v33 = *(_DWORD *)(v16 + 40 * (v30 + v14) + 8);
        v34 = v33 >= v22;
        v35 = v33 - v22;
        if (v34)
        {
          v36 = *(unsigned __int8 *)(v16 + 40 * v32 + 16);
          if (v24 <= v36)
          {
            v37 = v35 + v25 + (1 << v36);
            if (v37 < v28)
            {
              v28 = v37;
              v29 = v18;
            }
          }
        }
      }
    }
    ++v18;
    v27 += 4;
  }
  while (v13 != v18);
  v38 = v29;
  if ((_DWORD)v13 == v29)
    goto LABEL_18;
LABEL_21:
  *(_DWORD *)(v26 + 16 * v38 + 4) = a2;
  if (((*(uint64_t (**)(uint64_t, _QWORD, _QWORD *, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)v19 + 496))(v19, a1[3], a5, a6, a3, a2) & 1) == 0)
  {
    v40 = *(unsigned int *)(*v12 + 16 * v38);
    if ((int)v40 < v15 || (int)v40 >= (int)v17)
    {
      v47 = *a1;
      v48 = (_BYTE *)(*(_QWORD *)(*a1 + 72) + *(unsigned int *)(*(_QWORD *)(*a1 + 8) + 24 * a2));
      v49 = *v48;
      v50 = "Error while trying to spill ";
      if (*v48)
      {
        v59[0] = "Error while trying to spill ";
        v59[2] = v48;
        v60 = 771;
        v51 = 2;
      }
      else
      {
        v59[0] = "Error while trying to spill ";
        v60 = 259;
        v51 = 3;
      }
      if (v49)
        v50 = (const char *)v59;
      v61[0] = (uint64_t)v50;
      v61[2] = (uint64_t)" from class ";
      v62 = v51;
      v63 = 3;
      v52 = (_BYTE *)(*(_QWORD *)(v47 + 80) + *(unsigned int *)(*(_QWORD *)a3 + 16));
      v53 = 1;
      v58 = 1;
      if (*v52)
      {
        v56[0] = (uint64_t)v52;
        v53 = 3;
      }
      v57 = v53;
      sub_1C6131AAC(v61, v56, (uint64_t)v64);
      v54 = ": Cannot scavenge register without an emergency spill slot!";
      v55 = 259;
      sub_1C6131AAC(v64, (uint64_t *)&v54, (uint64_t)v65);
      llvm::report_fatal_error((uint64_t)v65, 1);
    }
    (*(void (**)(_QWORD, _QWORD, _QWORD *, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1[1] + 448))(a1[1], a1[3], a5, a2, 1, *(unsigned int *)(*v12 + 16 * v38), a3, *a1);
    v42 = *a5 & 0xFFFFFFFFFFFFFFF8;
    if (!v42 || (*(_BYTE *)v42 & 4) == 0)
    {
      while ((*(_WORD *)(v42 + 44) & 4) != 0)
        v42 = *(_QWORD *)v42 & 0xFFFFFFFFFFFFFFF8;
    }
    v43 = -1;
    do
      ++v43;
    while (*(_BYTE *)(*(_QWORD *)(v42 + 32) + 32 * v43) != 5);
    (*(void (**)(void))(*(_QWORD *)*a1 + 504))();
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1[1] + 464))(a1[1], a1[3], *a6, a2, v40, a3, *a1);
    v44 = *(_QWORD *)*a6 & 0xFFFFFFFFFFFFFFF8;
    if (!v44 || (*(_BYTE *)v44 & 4) == 0)
    {
      while ((*(_WORD *)(v44 + 44) & 4) != 0)
        v44 = *(_QWORD *)v44 & 0xFFFFFFFFFFFFFFF8;
    }
    v45 = -1;
    do
      ++v45;
    while (*(_BYTE *)(*(_QWORD *)(v44 + 32) + 32 * v45) != 5);
    (*(void (**)(void))(*(_QWORD *)*a1 + 504))();
  }
  return *v12 + 16 * v38;
}

uint64_t llvm::RegScavenger::scavengeRegister(uint64_t a1, unsigned __int16 ***a2, unint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned __int16 *v23;
  _WORD *v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int16 *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned __int16 *v47;
  _WORD *v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  int v54;
  unsigned int v55;
  uint64_t i;
  unsigned __int16 *v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  _WORD *v62;
  unsigned __int16 *v63;
  __int16 v64;
  unsigned __int16 v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  size_t v76;
  uint64_t v77;
  uint64_t SurvivorReg;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  _WORD *v85;
  unsigned __int16 *v86;
  __int16 v87;
  unsigned __int16 v88;
  int v89;
  uint64_t v91;
  _QWORD *v92;
  void *__src;
  unsigned int v94;
  _DWORD v95[14];
  void *__dst;
  unsigned int v97;
  unsigned int v98;
  _DWORD v99[14];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  llvm::TargetRegisterInfo::getAllocatableSet(*(_QWORD *)a1, *(_QWORD *)(*(_QWORD *)(a3 + 24) + 32), a2, (char *)&__dst);
  v10 = *(unsigned int *)(a3 + 40);
  if ((_DWORD)v10)
  {
    v11 = *(_DWORD **)(a3 + 32);
    v12 = &v11[8 * v10];
    v13 = __dst;
    do
    {
      if (!*v11)
      {
        v14 = v11[1];
        if ((*v11 & 0x11000000) != 0x10000000 && (int)v14 >= 1)
        {
          if (*(_QWORD *)a1)
            v16 = (uint64_t *)(*(_QWORD *)a1 + 8);
          else
            v16 = 0;
          v17 = *v16;
          v18 = *(_DWORD *)(*v16 + 24 * v14 + 16) & 0xF;
          v19 = ((unint64_t)*(unsigned int *)(*v16 + 24 * v14 + 16) >> 3) & 0x1FFFFFFE;
          v22 = v16 + 5;
          v21 = v16[5];
          v20 = v22[1];
          v23 = (unsigned __int16 *)(v20 + v19);
          v25 = *v23;
          v24 = v23 + 1;
          v26 = v25 + v18 * v14;
          while (1)
          {
            v27 = (unsigned __int16)v26;
            v28 = *(unsigned __int16 *)(v21 + 4 * (unsigned __int16)v26);
            if (*(_WORD *)(v21 + 4 * (unsigned __int16)v26) && v20 != 0)
              break;
            v30 = (unsigned __int16)*v24++;
            v26 += v30;
            if (!v30)
              goto LABEL_9;
          }
          while (1)
          {
            v31 = *(unsigned __int16 *)(v21 + 4 * v27 + 2) << 16;
            v32 = (unsigned __int16)v28;
            while (1)
            {
              v33 = (unsigned __int16 *)(v20 + 2 * *(unsigned int *)(v17 + 24 * v32 + 8));
              do
              {
                v13[(unsigned __int16)v28 >> 6] &= ~(1 << v28);
                v34 = *v33++;
                v28 += v34;
              }
              while (v34);
              v32 = HIWORD(v31);
              if (!(_DWORD)v32)
                break;
              v28 = HIWORD(v31);
              v31 >>= 16;
            }
            if (!*v24)
              break;
            v26 += (unsigned __int16)*v24++;
            v27 = (unsigned __int16)v26;
            v28 = *(unsigned __int16 *)(v21 + 4 * (unsigned __int16)v26);
          }
        }
      }
LABEL_9:
      v11 += 8;
    }
    while (v11 != v12);
  }
  v35 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v35)
  {
    v36 = *(_QWORD *)(a1 + 48);
    v37 = v36 + 16 * v35;
    v38 = __dst;
    do
    {
      v39 = *(unsigned int *)(v36 + 4);
      if ((_DWORD)v39)
      {
        if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 352) + ((v39 >> 3) & 0x1FFFFFF8)) >> v39) & 1) == 0)
        {
          v59 = *(_QWORD *)(a1 + 96);
          if (v59)
            v60 = (_QWORD *)(v59 + 8);
          else
            v60 = 0;
          v61 = *(unsigned int *)(*v60 + 24 * (unsigned __int16)*(_DWORD *)(v36 + 4) + 16);
          v62 = (_WORD *)(v60[6] + ((v61 >> 3) & 0x1FFFFFFE));
          v64 = *v62;
          v63 = v62 + 1;
          v65 = v64 + (v61 & 0xF) * v39;
          while (((*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * (v65 >> 6)) >> v65) & 1) == 0)
          {
            v66 = *v63++;
            v65 += v66;
            if (!v66)
              goto LABEL_57;
          }
        }
        if (*(_QWORD *)a1)
          v40 = (uint64_t *)(*(_QWORD *)a1 + 8);
        else
          v40 = 0;
        v41 = *v40;
        v42 = *(_DWORD *)(*v40 + 24 * v39 + 16) & 0xF;
        v43 = ((unint64_t)*(unsigned int *)(*v40 + 24 * v39 + 16) >> 3) & 0x1FFFFFFE;
        v46 = v40 + 5;
        v45 = v40[5];
        v44 = v46[1];
        v47 = (unsigned __int16 *)(v44 + v43);
        v49 = *v47;
        v48 = v47 + 1;
        v50 = v49 + v42 * v39;
        while (1)
        {
          v51 = (unsigned __int16)v50;
          v52 = *(unsigned __int16 *)(v45 + 4 * (unsigned __int16)v50);
          if (*(_WORD *)(v45 + 4 * (unsigned __int16)v50) && v44 != 0)
            break;
          v54 = (unsigned __int16)*v48++;
          v50 += v54;
          if (!v54)
            goto LABEL_57;
        }
        while (1)
        {
          v55 = *(unsigned __int16 *)(v45 + 4 * v51 + 2) << 16;
          for (i = (unsigned __int16)v52; ; v52 = i)
          {
            v57 = (unsigned __int16 *)(v44 + 2 * *(unsigned int *)(v41 + 24 * i + 8));
            do
            {
              v38[(unsigned __int16)v52 >> 6] &= ~(1 << v52);
              v58 = *v57++;
              v52 += v58;
            }
            while (v58);
            i = HIWORD(v55);
            if (!(_DWORD)i)
              break;
            v55 >>= 16;
          }
          if (!*v48)
            break;
          v50 += (unsigned __int16)*v48++;
          v51 = (unsigned __int16)v50;
          v52 = *(unsigned __int16 *)(v45 + 4 * (unsigned __int16)v50);
        }
      }
LABEL_57:
      v36 += 16;
    }
    while (v36 != v37);
  }
  llvm::RegScavenger::getRegsAvailable((_QWORD *)a1, a2, (char *)&__src);
  v67 = v94;
  v68 = v97;
  if (v97 >= v94)
    v69 = v94;
  else
    v69 = v97;
  v70 = __src;
  if ((_DWORD)v69)
  {
    v71 = (uint64_t *)__dst;
    v72 = __src;
    v73 = v69;
    do
    {
      v74 = *v71++;
      *v72++ &= v74;
      --v73;
    }
    while (v73);
  }
  if (v67 > v68)
  {
    do
    {
      v70[v69] = 0;
      LODWORD(v69) = v69 + 1;
    }
    while ((_DWORD)v67 != (_DWORD)v69);
  }
  if ((_DWORD)v67)
  {
    v75 = 0;
    v76 = 8 * v67;
    while (!v70[v75 / 8])
    {
      v75 += 8;
      if (v76 == v75)
        goto LABEL_81;
    }
    if (v67 <= v68)
    {
      memmove(__dst, v70, v76);
LABEL_80:
      v97 = v67;
      v99[12] = v95[12];
      goto LABEL_81;
    }
    if (v98 < v67)
    {
      v97 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v99, v67, 8);
    }
    else if ((_DWORD)v68)
    {
      v91 = v68;
      memmove(__dst, v70, 8 * v68);
      v77 = v91;
      goto LABEL_78;
    }
    v77 = 0;
LABEL_78:
    if (v77 != v94)
      memcpy((char *)__dst + 8 * v77, (char *)__src + 8 * v77, 8 * v94 - 8 * v77);
    goto LABEL_80;
  }
LABEL_81:
  v92 = 0;
  SurvivorReg = llvm::RegScavenger::findSurvivorReg(a1, a3, (uint64_t)&__dst, 25, (unint64_t *)&v92);
  v79 = SurvivorReg;
  if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 352)
                   + (((unint64_t)SurvivorReg >> 3) & 0x1FFFFFF8)) >> SurvivorReg) & 1) == 0)
  {
    v82 = *(_QWORD *)(a1 + 96);
    if (v82)
      v83 = (_QWORD *)(v82 + 8);
    else
      v83 = 0;
    v84 = *(unsigned int *)(*v83 + 24 * (unsigned __int16)SurvivorReg + 16);
    v85 = (_WORD *)(v83[6] + ((v84 >> 3) & 0x1FFFFFFE));
    v87 = *v85;
    v86 = v85 + 1;
    v88 = v87 + (v84 & 0xF) * SurvivorReg;
    while (((*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * (v88 >> 6)) >> v88) & 1) == 0)
    {
      v89 = *v86++;
      v88 += v89;
      if (!v89)
        goto LABEL_98;
    }
    if ((a5 & 1) != 0)
      goto LABEL_83;
LABEL_97:
    v79 = 0;
    goto LABEL_98;
  }
  if (!a5)
    goto LABEL_97;
LABEL_83:
  v80 = llvm::RegScavenger::spill((_QWORD *)a1, SurvivorReg, (uint64_t)a2, a4, (_QWORD *)a3, &v92);
  v81 = *v92 & 0xFFFFFFFFFFFFFFF8;
  if (!v81 || (*(_BYTE *)v81 & 4) == 0)
  {
    while ((*(_WORD *)(v81 + 44) & 4) != 0)
      v81 = *(_QWORD *)v81 & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(v80 + 8) = v81;
LABEL_98:
  if (__src != v95)
    free(__src);
  if (__dst != v99)
    free(__dst);
  return v79;
}

unint64_t llvm::RegScavenger::scavengeRegisterBackwards(_QWORD *a1, uint64_t a2, _QWORD *a3, int a4, unsigned int a5, int a6)
{
  uint64_t v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  char v26;
  int v27;
  unint64_t v28;
  unsigned __int16 *v29;
  _BYTE *v30;
  _QWORD *v31;
  unsigned __int16 *v32;
  unint64_t v33;
  unint64_t v34;
  __int16 v35;
  _WORD *v36;
  unsigned __int16 *v37;
  __int16 v38;
  unsigned __int16 v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  _WORD *v44;
  unsigned __int16 *v45;
  __int16 v46;
  unsigned __int16 v47;
  int v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  _WORD *v52;
  unsigned __int16 *v53;
  __int16 v54;
  unsigned __int16 v55;
  int v56;
  unint64_t v57;
  unsigned __int16 *v58;
  _QWORD *v59;
  unint64_t v60;
  __int16 v61;
  _WORD *v62;
  unsigned __int16 *v63;
  __int16 v64;
  unsigned __int16 v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  unint64_t result;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  unsigned __int16 *v81;
  unsigned __int16 *v82;
  int v83;
  int v84;
  int v85;
  uint64_t *v86;
  uint64_t v87;
  unsigned int v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  _BYTE v99[48];
  int v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v11 = a3[3];
  v12 = *(uint64_t (**)(_QWORD))(a2 + 48);
  if (v12)
  {
    v95 = v12(*(_QWORD *)(v11 + 32));
    v14 = v13;
  }
  else
  {
    v95 = **(_QWORD **)a2;
    v14 = *(unsigned __int16 *)(*(_QWORD *)a2 + 20);
  }
  v15 = a1[4];
  v86 = a1 + 4;
  v93 = (_QWORD *)a1[2];
  v94 = *(_QWORD *)(v15 + 24);
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v93 + 16) + 176))(*(_QWORD *)(*v93 + 16));
  v98 = 0x600000000;
  v96 = v16;
  v97 = v99;
  v17 = *(_DWORD *)(v16 + 44);
  v100 = v17;
  v18 = v17 + 63;
  v88 = a5;
  v87 = a2;
  v90 = a6;
  if ((v17 + 63) < 0x40)
  {
    v23 = 0;
    v22 = v99;
  }
  else
  {
    v19 = v18 >> 6;
    if (v18 >= 0x1C0)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, (uint64_t)v99, v18 >> 6, 8);
      v22 = v97;
      v20 = v98;
      LOBYTE(v17) = v100;
      v21 = v98;
    }
    else
    {
      v20 = 0;
      v21 = 0;
      v22 = v99;
    }
    bzero(&v22[8 * v20], 8 * v19);
    v23 = (v21 + v19);
    LODWORD(v98) = v21 + v19;
  }
  v91 = v11;
  if ((v17 & 0x3F) != 0)
    *(_QWORD *)&v22[8 * v23 - 8] &= ~(-1 << (v17 & 0x3F));
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v89 = v15;
  v27 = 25;
  v28 = v15;
  v29 = (unsigned __int16 *)(v95 + 2 * v14);
  while (1)
  {
    llvm::LiveRegUnits::accumulate((llvm::LiveRegUnits *)&v96, (const llvm::MachineInstr *)v28);
    if ((_QWORD *)v28 == a3)
      break;
    if ((v26 & 1) != 0)
      goto LABEL_38;
    v26 = 0;
LABEL_66:
    v28 = *(_QWORD *)v28 & 0xFFFFFFFFFFFFFFF8;
    if (!v28 || (*(_BYTE *)v28 & 4) == 0)
    {
      while ((*(_WORD *)(v28 + 44) & 4) != 0)
        v28 = *(_QWORD *)v28 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  if (v14)
  {
    v30 = v97;
    if (v96)
      v31 = (_QWORD *)(v96 + 8);
    else
      v31 = 0;
    v32 = (unsigned __int16 *)v95;
    do
    {
      v33 = *v32;
      if (((*(_QWORD *)(v93[44] + ((v33 >> 3) & 0x1FF8)) >> v33) & 1) == 0)
      {
        v34 = *(unsigned int *)(*v31 + 24 * *v32 + 16);
        v35 = v34 & 0xF;
        v36 = (_WORD *)(v31[6] + ((v34 >> 3) & 0x1FFFFFFE));
        v38 = *v36;
        v37 = v36 + 1;
        v39 = v38 + v35 * v33;
        while (((*((_QWORD *)v97 + (v39 >> 6)) >> v39) & 1) == 0)
        {
          v40 = *v37++;
          v39 += v40;
          if (!v40)
          {
            v41 = a1[12];
            if (v41)
              v42 = (_QWORD *)(v41 + 8);
            else
              v42 = 0;
            v43 = *(unsigned int *)(*v42 + 24 * *v32 + 16);
            v44 = (_WORD *)(v42[6] + ((v43 >> 3) & 0x1FFFFFFE));
            v46 = *v44;
            v45 = v44 + 1;
            v47 = v46 + (v43 & 0xF) * v33;
            while (((*(_QWORD *)(a1[13] + 8 * (v47 >> 6)) >> v47) & 1) == 0)
            {
              v48 = *v45++;
              v47 += v48;
              if (!v48)
              {
                v70 = v91;
                v24 = (_QWORD *)(v94 + 48);
                goto LABEL_74;
              }
            }
            break;
          }
        }
      }
      ++v32;
    }
    while (v32 != v29);
  }
  v24 = a3;
  if (a4)
  {
    v49 = v89;
    if ((*(_BYTE *)v89 & 4) == 0)
    {
      v49 = v89;
      if ((*(_WORD *)(v89 + 44) & 8) != 0)
      {
        v49 = v89;
        do
          v49 = *(_QWORD *)(v49 + 8);
        while ((*(_WORD *)(v49 + 44) & 8) != 0);
      }
    }
    llvm::LiveRegUnits::accumulate((llvm::LiveRegUnits *)&v96, *(const llvm::MachineInstr **)(v49 + 8));
    v24 = a3;
  }
LABEL_38:
  v30 = v97;
  if ((_WORD)v25)
  {
    if (v96)
      v50 = (_QWORD *)(v96 + 8);
    else
      v50 = 0;
    v51 = *(unsigned int *)(*v50 + 24 * (unsigned __int16)v25 + 16);
    v52 = (_WORD *)(v50[6] + ((v51 >> 3) & 0x1FFFFFFE));
    v54 = *v52;
    v53 = v52 + 1;
    v55 = v54 + (v51 & 0xF) * v25;
    while (((*((_QWORD *)v97 + (v55 >> 6)) >> v55) & 1) == 0)
    {
      v56 = *v53++;
      v55 += v56;
      if (!v56)
      {
        v57 = v25;
LABEL_56:
        if (--v27)
        {
          v67 = *(unsigned int *)(v28 + 40);
          if ((_DWORD)v67)
          {
            v68 = 32 * v67;
            v69 = (_DWORD *)(*(_QWORD *)(v28 + 32) + 4);
            while (*((_BYTE *)v69 - 4) || (*v69 & 0x80000000) == 0)
            {
              v69 += 8;
              v68 -= 32;
              if (!v68)
                goto LABEL_64;
            }
            v27 = 25;
            v24 = (_QWORD *)v28;
          }
LABEL_64:
          if (v28 != *(_QWORD *)(v94 + 56))
          {
            v26 = 1;
            v25 = v57;
            goto LABEL_66;
          }
        }
        LOWORD(v25) = v57;
        goto LABEL_73;
      }
    }
  }
  if (v14)
  {
    v58 = (unsigned __int16 *)v95;
    v59 = (_QWORD *)(v96 + 8);
    if (!v96)
      v59 = 0;
    do
    {
      v57 = *v58;
      if (((*(_QWORD *)(v93[44] + ((v57 >> 3) & 0x1FF8)) >> v57) & 1) == 0)
      {
        v60 = *(unsigned int *)(*v59 + 24 * *v58 + 16);
        v61 = v60 & 0xF;
        v62 = (_WORD *)(v59[6] + ((v60 >> 3) & 0x1FFFFFFE));
        v64 = *v62;
        v63 = v62 + 1;
        v65 = v64 + v61 * v57;
        while (((*((_QWORD *)v97 + (v65 >> 6)) >> v65) & 1) == 0)
        {
          v66 = *v63++;
          v65 += v66;
          if (!v66)
          {
            if (!*v58)
              goto LABEL_73;
            goto LABEL_56;
          }
        }
      }
      ++v58;
    }
    while (v58 != v29);
  }
LABEL_73:
  v33 = (unsigned __int16)v25;
  v70 = v91;
LABEL_74:
  if (v30 != v99)
    free(v30);
  if ((_DWORD)v33 != 0 && v70 + 48 == (_QWORD)v24)
    result = v33;
  else
    result = 0;
  if (((_DWORD)v33 == 0 || v70 + 48 != (_QWORD)v24) && v90)
  {
    if (a4)
    {
      v72 = *v86;
      if (!*v86 || (*(_BYTE *)v72 & 4) == 0)
      {
        while ((*(_WORD *)(v72 + 44) & 8) != 0)
          v72 = *(_QWORD *)(v72 + 8);
      }
      v73 = (uint64_t *)(v72 + 8);
    }
    else
    {
      v73 = a1 + 4;
    }
    v74 = *v73;
    if (!v74 || (*(_BYTE *)v74 & 4) == 0)
    {
      while ((*(_WORD *)(v74 + 44) & 8) != 0)
        v74 = *(_QWORD *)(v74 + 8);
    }
    v96 = *(_QWORD *)(v74 + 8);
    v75 = llvm::RegScavenger::spill(a1, v33, v87, v88, v24, &v96);
    v76 = *v24 & 0xFFFFFFFFFFFFFFF8;
    if (!v76 || (*(_BYTE *)v76 & 4) == 0)
    {
      while ((*(_WORD *)(v76 + 44) & 4) != 0)
        v76 = *(_QWORD *)v76 & 0xFFFFFFFFFFFFFFF8;
    }
    *(_QWORD *)(v75 + 8) = v76;
    v78 = a1[12];
    v77 = a1[13];
    if (v78)
      v79 = (_QWORD *)(v78 + 8);
    else
      v79 = 0;
    v80 = *(unsigned int *)(*v79 + 24 * v33 + 16);
    v81 = (unsigned __int16 *)(v79[6] + ((v80 >> 3) & 0x1FFFFFFE));
    v83 = *v81;
    v82 = v81 + 1;
    v84 = v83 + (v80 & 0xF) * v33;
    do
    {
      *(_QWORD *)(v77 + 8 * ((unsigned __int16)v84 >> 6)) &= ~(1 << v84);
      v85 = *v82++;
      v84 += v85;
    }
    while (v85);
    return v33;
  }
  return result;
}

_QWORD *llvm::scavengeFrameVirtualRegs(_QWORD *this, llvm::MachineFunction *a2, llvm::RegScavenger *a3)
{
  uint64_t v3;
  _DWORD *v4;
  llvm::MachineBasicBlock *v5;
  llvm::MachineBasicBlock *v6;

  v3 = (uint64_t)this;
  v4 = (_DWORD *)this[5];
  if (v4[8])
  {
    v5 = (llvm::MachineBasicBlock *)(this + 40);
    v6 = (llvm::MachineBasicBlock *)this[41];
    if (v6 != (llvm::MachineBasicBlock *)(this + 40))
    {
      do
      {
        if ((llvm::MachineBasicBlock *)((char *)v6 + 48) != (llvm::MachineBasicBlock *)(*((_QWORD *)v6 + 6) & 0xFFFFFFFFFFFFFFF8)
          && sub_1C525EF10(v4, a2, v6)
          && sub_1C525EF10(v4, a2, v6))
        {
          llvm::report_fatal_error((llvm *)"Incomplete scavenging after 2nd pass", (const char *)1);
        }
        v6 = (llvm::MachineBasicBlock *)*((_QWORD *)v6 + 1);
      }
      while (v6 != v5);
    }
    this = (_QWORD *)llvm::MachineRegisterInfo::clearVirtRegs((uint64_t)v4);
  }
  **(_QWORD **)(v3 + 360) |= 8uLL;
  return this;
}

BOOL sub_1C525EF10(_DWORD *a1, llvm::RegScavenger *a2, llvm::MachineBasicBlock *a3)
{
  unsigned int v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  int v14;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  llvm::MachineBasicBlock *v36;
  uint64_t v37;

  v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 16) + 176))(*(_QWORD *)(*(_QWORD *)a1 + 16));
  llvm::RegScavenger::enterBasicBlockEnd(a2, a3);
  v6 = a1[8];
  v7 = (unint64_t)a3 + 48;
  v36 = a3;
  if ((llvm::MachineBasicBlock *)((char *)a3 + 48) == *((llvm::MachineBasicBlock **)a3 + 7))
  {
    v34 = a1[8];
  }
  else
  {
    LOBYTE(v8) = 0;
    do
    {
      v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
      if (!v7 || (*(_BYTE *)v7 & 4) == 0)
      {
        while ((*(_WORD *)(v7 + 44) & 4) != 0)
          v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
      }
      while (*((_QWORD *)a2 + 4) != v7)
        llvm::RegScavenger::backward(a2);
      if ((v8 & 1) != 0)
      {
        if (!v7 || (v9 = v7, (*(_BYTE *)v7 & 4) == 0))
        {
          v9 = v7;
          if ((*(_WORD *)(v7 + 44) & 8) != 0)
          {
            v9 = v7;
            do
              v9 = *(_QWORD *)(v9 + 8);
            while ((*(_WORD *)(v9 + 44) & 8) != 0);
          }
        }
        v10 = *(_QWORD *)(v9 + 8);
        v11 = *(unsigned int *)(v10 + 40);
        if ((_DWORD)v11)
        {
          v12 = *(int **)(v10 + 32);
          v13 = &v12[8 * v11];
          do
          {
            v14 = *v12;
            if (!*v12 && (v14 & 0x10FFF00) != 0x1000000 && (v14 & 0x30000000) == 0)
            {
              v16 = v12[1];
              if ((v16 & 0x80000000) != 0 && (v16 & 0x7FFFFFFF) < v6)
              {
                v17 = sub_1C525F298(a1, a2, v16, 1);
                llvm::MachineInstr::addRegisterKilled((llvm::MachineInstr *)v10, v17, v37, 0);
                v19 = *((_QWORD *)a2 + 12);
                v18 = *((_QWORD *)a2 + 13);
                if (v19)
                  v20 = (_QWORD *)(v19 + 8);
                else
                  v20 = 0;
                v21 = *(unsigned int *)(*v20 + 24 * v17 + 16);
                v22 = (unsigned __int16 *)(v20[6] + ((v21 >> 3) & 0x1FFFFFFE));
                v24 = *v22;
                v23 = v22 + 1;
                v25 = v24 + (v21 & 0xF) * v17;
                do
                {
                  *(_QWORD *)(v18 + 8 * ((unsigned __int16)v25 >> 6)) |= 1 << v25;
                  v26 = *v23++;
                  v25 += v26;
                }
                while (v26);
              }
            }
            v12 += 8;
          }
          while (v12 != v13);
        }
      }
      v27 = *(unsigned int *)(v7 + 40);
      if ((_DWORD)v27)
      {
        v8 = 0;
        v28 = 32 * v27;
        v29 = (unsigned int *)(*(_QWORD *)(v7 + 32) + 4);
        do
        {
          v30 = *(v29 - 1);
          if (!(_BYTE)v30)
          {
            v31 = *v29;
            if ((*v29 & 0x80000000) != 0 && (v31 & 0x7FFFFFFF) < v6)
            {
              if ((v30 & 0x10FFF00) == 0x1000000)
                v32 = v8;
              else
                v32 = 1;
              if ((v30 & 0x30000000) == 0)
                v8 = v32;
              if ((v30 & 0x1000000) != 0)
              {
                v33 = sub_1C525F298(a1, a2, v31, 0);
                llvm::MachineInstr::addRegisterDead((llvm::MachineInstr *)v7, v33, v37, 0);
              }
            }
          }
          v29 += 8;
          v28 -= 32;
        }
        while (v28);
      }
      else
      {
        LOBYTE(v8) = 0;
      }
    }
    while (v7 != *((_QWORD *)v36 + 7));
    v34 = a1[8];
  }
  return v34 != v6;
}

void llvm::initializeScavengerTestPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8F2F60);
  if (v1 != -1)
  {
    v4[0] = sub_1C525F208;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8F2F60, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C525F208(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Scavenge virtual registers inside basic blocks";
  *(_QWORD *)(v2 + 8) = 46;
  *(_QWORD *)(v2 + 16) = "scavenger-test";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F2F68;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C525F3CC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C525F298(_QWORD *a1, _QWORD *a2, unsigned int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 16) + 176))(*(_QWORD *)(*a1 + 16));
  v9 = a3 & 0x7FFFFFFF;
  v10 = *(_QWORD *)(a1[3] + 16 * v9 + 8);
  if ((*(_BYTE *)(v10 + 3) & 1) != 0)
    goto LABEL_3;
  do
  {
    v10 = *(_QWORD *)(v10 + 24);
LABEL_3:
    ;
  }
  while (llvm::MachineInstr::findRegisterUseOperandIdx(*(_QWORD *)(v10 + 8), a3, 0, v8) != -1);
  v11 = llvm::RegScavenger::scavengeRegisterBackwards(a2, *(_QWORD *)(a1[3] + 16 * v9) & 0xFFFFFFFFFFFFFFF8, *(_QWORD **)(v10 + 8), a4, 0, 1);
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 16) + 176))(*(_QWORD *)(*a1 + 16));
  if ((a3 & 0x80000000) != 0)
    v13 = (uint64_t *)(a1[3] + 16 * v9 + 8);
  else
    v13 = (uint64_t *)(a1[34] + 8 * a3);
  v14 = *v13;
  if (*v13)
  {
    do
    {
      v15 = *(_QWORD *)(v14 + 24);
      if ((v11 - 1) <= 0x3FFFFFFE)
        llvm::MachineOperand::substPhysReg((unsigned int *)v14, v11, v12);
      else
        llvm::MachineOperand::setReg(v14, v11);
      v14 = v15;
    }
    while (v15);
  }
  return v11;
}

_QWORD *sub_1C525F3CC()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F2F68);
  *result = &off_1E8149CB8;
  return result;
}

void sub_1C525F40C(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C525F4A0(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C525F52C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  llvm::RegScavenger *v4;
  void *v6[2];
  _DWORD v7[14];
  _BYTE v8[24];
  uint64_t v9;
  _QWORD v10[2];
  void *v11;
  uint64_t v12;
  _QWORD v13[5];
  void *v14;
  uint64_t v15;
  _DWORD v16[14];
  void *v17;
  uint64_t v18;
  _DWORD v19[14];
  void *v20;
  uint64_t v21;
  _DWORD v22[14];
  void *v23;
  uint64_t v24;
  _DWORD v25[14];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 112))(*(_QWORD *)(a2 + 16));
  v9 = 0;
  v10[0] = 0;
  *(_QWORD *)((char *)v10 + 5) = 0;
  v11 = v13;
  v12 = 0x200000000;
  v13[4] = 0;
  v14 = v16;
  v15 = 0x600000000;
  v16[12] = 0;
  v17 = v19;
  v18 = 0x600000000;
  v19[12] = 0;
  v20 = v22;
  v21 = 0x600000000;
  v22[12] = 0;
  v23 = v25;
  v24 = 0x600000000;
  v25[12] = 0;
  v6[0] = v7;
  v6[1] = (void *)0x600000000;
  v7[12] = 0;
  (*(void (**)(uint64_t, uint64_t, void **, _BYTE *))(*(_QWORD *)v3 + 264))(v3, a2, v6, v8);
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v3 + 272))(v3, a2, v8);
  llvm::scavengeFrameVirtualRegs((_QWORD *)a2, (llvm::MachineFunction *)v8, v4);
  if (v6[0] != v7)
    free(v6[0]);
  if (v23 != v25)
    free(v23);
  if (v20 != v22)
    free(v20);
  if (v17 != v19)
    free(v17);
  if (v14 != v16)
    free(v14);
  if (v11 != v13)
    free(v11);
  return 1;
}

uint64_t sub_1C525F6E0(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Remove Redundant DEBUG_VALUE analysis";
  *(_QWORD *)(v2 + 8) = 37;
  *(_QWORD *)(v2 + 16) = "removeredundantdebugvalues";
  *(_QWORD *)(v2 + 24) = 26;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6FE8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C525F770;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C525F770()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F6FE8) = &off_1E8149D80;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED7FF348);
  if (v2 != -1)
  {
    v6[0] = sub_1C525F6E0;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED7FF348, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C525F848(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C525F8DC(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C525F968(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C525F998(uint64_t a1, void **a2)
{
  uint64_t ***v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD ***v10;
  _QWORD *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  void *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  void **v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE **v52;
  _BYTE **v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int16 *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  int v83;
  unint64_t v84;
  int64x2_t v85;
  uint64_t *v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  char *v90;
  char *v91;
  int v92;
  void **v93;
  __int32 v94;
  _BYTE *v95;
  _BYTE *v96;
  int v97;
  _QWORD *v99;
  void *v100;
  _QWORD *v101;
  void *v102;
  void **v103;
  __int32 v104;
  void **v105;
  int v106;
  int64x2_t v107;
  char v108;
  __int128 v109;
  unsigned int v110;
  char v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  _DWORD v115[38];
  int64x2_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t ***)*a2;
  if ((*((_BYTE *)*a2 + 23) & 0x20) == 0)
    goto LABEL_165;
  v4 = ***v2;
  v113 = *a2;
  v5 = *(_DWORD *)(v4 + 2496);
  if (!v5)
  {
    v99 = 0;
LABEL_170:
    v9 = sub_1C541AB24(v4 + 2480, (uint64_t)&v113, (uint64_t *)&v113, v99);
    v100 = v113;
    v9[3] = 0;
    v9[4] = 0;
    *v9 = v100;
    v9[1] = v9 + 3;
    v9[2] = 0x100000000;
    goto LABEL_12;
  }
  v6 = *(_QWORD *)(v4 + 2480);
  v7 = v5 - 1;
  v8 = v7 & ((v2 >> 4) ^ (v2 >> 9));
  v9 = (_QWORD *)(v6 + 40 * v8);
  v10 = (_QWORD ***)*v9;
  if ((uint64_t ***)*v9 != v2)
  {
    v11 = 0;
    v12 = 1;
    while (v10 != (_QWORD ***)-4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == (_QWORD ***)-8192;
      if (v13)
        v11 = v9;
      v14 = v8 + v12++;
      v8 = v14 & v7;
      v9 = (_QWORD *)(v6 + 40 * v8);
      v10 = (_QWORD ***)*v9;
      if ((uint64_t ***)*v9 == v2)
        goto LABEL_12;
    }
    if (v11)
      v99 = v11;
    else
      v99 = v9;
    goto LABEL_170;
  }
LABEL_12:
  v15 = *((unsigned int *)v9 + 4);
  if (!(_DWORD)v15)
    goto LABEL_165;
  v16 = (_QWORD *)(v9[1] + 8);
  v17 = 16 * v15;
  LOBYTE(v18) = 0;
  while (*((_DWORD *)v16 - 2))
  {
    v16 += 2;
    v17 -= 16;
    if (!v17)
      return v18 & 1;
  }
  if (!*v16)
    goto LABEL_165;
  v19 = *a2;
  v20 = ***(_QWORD ***)*a2;
  v113 = *a2;
  v21 = *(_DWORD *)(v20 + 2496);
  if (v21)
  {
    v22 = *(_QWORD *)(v20 + 2480);
    v23 = v21 - 1;
    v24 = v23 & ((v19 >> 4) ^ (v19 >> 9));
    v25 = (_QWORD *)(v22 + 40 * v24);
    v26 = (void *)*v25;
    if ((void *)*v25 == v19)
      goto LABEL_28;
    v27 = 0;
    v28 = 1;
    while (v26 != (void *)-4096)
    {
      if (v27)
        v29 = 0;
      else
        v29 = v26 == (void *)-8192;
      if (v29)
        v27 = v25;
      v30 = v24 + v28++;
      v24 = v30 & v23;
      v25 = (_QWORD *)(v22 + 40 * v24);
      v26 = (void *)*v25;
      if ((void *)*v25 == v19)
        goto LABEL_28;
    }
    if (v27)
      v101 = v27;
    else
      v101 = v25;
  }
  else
  {
    v101 = 0;
  }
  v25 = sub_1C541AB24(v20 + 2480, (uint64_t)&v113, (uint64_t *)&v113, v101);
  v102 = v113;
  v25[3] = 0;
  v25[4] = 0;
  *v25 = v102;
  v25[1] = v25 + 3;
  v25[2] = 0x100000000;
LABEL_28:
  v31 = v25[1];
  if (*(_DWORD *)v31)
  {
    v32 = 16 * *((unsigned int *)v25 + 4) - 16;
    do
    {
      v33 = *(_DWORD *)(v31 + 16);
      v31 += 16;
      v32 -= 16;
    }
    while (v33);
  }
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 8) - 8 * *(unsigned int *)(*(_QWORD *)(v31 + 8) + 8) + 40) + 36))
  {
    v34 = (void **)a2[41];
    v103 = a2 + 40;
    if (v34 != a2 + 40)
    {
      v18 = 0;
      while (1)
      {
        v116.i64[0] = (uint64_t)&v117;
        v116.i64[1] = 0x800000000;
        v35 = 8;
        v113 = (void *)1;
        do
        {
          v36 = (char *)&v113 + v35;
          *(_QWORD *)v36 = 0;
          v36[8] = 0;
          v36[24] = 0;
          *((_QWORD *)v36 + 4) = 0;
          v35 += 40;
        }
        while (v36 + 40 != (char *)&v116);
        v37 = v34 + 6;
        v38 = (unint64_t)v34[6] & 0xFFFFFFFFFFFFFFF8;
        if (!v38 || (*(_BYTE *)v38 & 4) == 0)
        {
          while ((*(_WORD *)(v38 + 44) & 4) != 0)
            v38 = *(_QWORD *)v38 & 0xFFFFFFFFFFFFFFF8;
        }
        if ((_QWORD *)v38 == v37)
        {
LABEL_90:
          v104 = 0;
          goto LABEL_91;
        }
        do
        {
          v42 = **(unsigned __int16 **)(v38 + 16);
          if ((v42 - 13) > 1)
          {
            if (v113 > 1 || HIDWORD(v113) != 0)
            {
              if ((v113 & 1) != 0)
              {
                v39 = &v114;
                v40 = (uint64_t *)&v116;
                goto LABEL_60;
              }
              if (((2 * (_DWORD)v113) & 0xFFFFFFFC) >= v115[0])
              {
                if (!v115[0])
                {
                  v41 = 0;
LABEL_62:
                  v113 = (void *)v41;
                  goto LABEL_75;
                }
LABEL_59:
                v39 = (uint64_t *)v114;
                v40 = (uint64_t *)(v114 + 40 * v115[0]);
                do
                {
LABEL_60:
                  *v39 = 0;
                  *((_BYTE *)v39 + 8) = 0;
                  *(uint64_t *)((char *)v39 + 9) = v109;
                  v39[2] = *(_QWORD *)((char *)&v109 + 7);
                  *((_BYTE *)v39 + 24) = 0;
                  *(_DWORD *)((char *)v39 + 25) = v107.i32[0];
                  *((_DWORD *)v39 + 7) = *(__int32 *)((char *)v107.i32 + 3);
                  v39[4] = 0;
                  v39 += 5;
                }
                while (v39 != v40);
                v41 = v113 & 1;
                goto LABEL_62;
              }
              if (v115[0] <= 0x40u)
                goto LABEL_59;
              sub_1C620EAA4((uint64_t)&v113);
            }
          }
          else
          {
            v13 = v42 == 14;
            v43 = v42 != 14;
            v44 = 96;
            if (v13)
              v44 = 32;
            v45 = *(_QWORD *)(v38 + 56);
            if (*(_DWORD *)(v45 + 8) == 2)
              v46 = *(_QWORD *)(v45 - 8);
            else
              v46 = 0;
            v48 = *(_QWORD *)(v38 + 32);
            v49 = *(_QWORD *)(v48 + (v43 << 6) + 16);
            v50 = *(_QWORD *)(v48 + v44 + 16);
            *(_QWORD *)&v109 = v49;
            if (v50)
            {
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v50 + 24), *(uint64_t **)(v50 + 32), (int8x16_t *)((char *)&v109 + 8));
            }
            else
            {
              BYTE8(v109) = 0;
              v111 = 0;
            }
            v112 = v46;
            sub_1C5260430((uint64_t)&v113, (uint64_t)&v109, (uint64_t)&v107);
            if (**(_WORD **)(v38 + 16) == 13 && **(_BYTE **)(v38 + 32))
            {
              if (!v108)
                sub_1C620EA48(&v113, (uint64_t *)&v109);
            }
            else if (!v108)
            {
              v51 = v116.u32[2];
              if (v116.u32[2] >= (unint64_t)v116.u32[3])
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, (uint64_t)&v117, v116.u32[2] + 1, 8);
                v51 = v116.u32[2];
              }
              *(_QWORD *)(v116.i64[0] + 8 * v51) = v38;
              ++v116.i32[2];
            }
          }
LABEL_75:
          v38 = *(_QWORD *)v38 & 0xFFFFFFFFFFFFFFF8;
          if (!v38 || (*(_BYTE *)v38 & 4) == 0)
          {
            while ((*(_WORD *)(v38 + 44) & 4) != 0)
              v38 = *(_QWORD *)v38 & 0xFFFFFFFFFFFFFFF8;
          }
        }
        while ((_QWORD *)v38 != v37);
        if (!v116.i32[2])
          goto LABEL_90;
        v52 = (_BYTE **)v116.i64[0];
        v53 = (_BYTE **)(v116.i64[0] + 8 * v116.u32[2]);
        do
        {
          v54 = *v52;
          v55 = *v52;
          if ((**v52 & 4) == 0)
          {
            v55 = *v52;
            if ((*((_WORD *)v54 + 22) & 8) != 0)
            {
              v55 = *v52;
              do
                v55 = (_BYTE *)*((_QWORD *)v55 + 1);
              while ((*((_WORD *)v55 + 22) & 8) != 0);
            }
          }
          sub_1C487FE80(*((_QWORD *)v54 + 3) + 40, (uint64_t)v54, *((_QWORD *)v55 + 1));
          ++v52;
        }
        while (v52 != v53);
        v104 = v116.i32[2];
LABEL_91:
        if ((v113 & 1) == 0)
          MEMORY[0x1CAA32FB4](v114, 8);
        v106 = v18;
        if ((__int128 *)v116.i64[0] != &v117)
          free((void *)v116.i64[0]);
        v113 = v115;
        v114 = 0x800000000;
        v109 = 0uLL;
        v110 = 0;
        v56 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v34[4] + 2) + 176))(*((_QWORD *)v34[4] + 2));
        v105 = v34;
        v57 = (uint64_t)v34[7];
        if ((_QWORD *)v57 != v37)
        {
          v58 = v56;
          v59 = 0;
          while (1)
          {
            v60 = *(unsigned __int16 **)(v57 + 16);
            v61 = *v60;
            if ((v61 - 13) <= 1)
            {
              v62 = v61 != 14;
              v63 = *(_QWORD *)(v57 + 56);
              if (*(_DWORD *)(v63 + 8) == 2)
                v64 = *(_QWORD *)(v63 - 8);
              else
                v64 = 0;
              v116.i64[0] = *(_QWORD *)(*(_QWORD *)(v57 + 32) + (v62 << 6) + 16);
              v116.i8[8] = 0;
              BYTE8(v117) = 0;
              v118 = v64;
              v107.i64[0] = 0;
              v65 = v110;
              v66 = sub_1C5260944(v59, v110, v116.i64, v107.i64);
              v67 = v107.i64[0];
              v68 = v59 + 56 * v110;
              if (!v66)
                v67 = v59 + 56 * v110;
              v69 = **(unsigned __int16 **)(v57 + 16);
              if (v69 == 14 && v67 != v68)
                goto LABEL_110;
              v71 = *(_QWORD *)(v57 + 32);
              v72 = (_BYTE *)(v71 + ((unint64_t)(v69 == 14) << 6));
              if (*v72)
              {
                if (v67 == v68)
                  goto LABEL_141;
LABEL_110:
                *(_QWORD *)v67 = 0;
                *(_QWORD *)(v67 + 8) = 0;
                *(_QWORD *)(v67 + 16) = 0;
                *(_BYTE *)(v67 + 24) = 1;
                *(_QWORD *)(v67 + 32) = 0;
                *((int32x2_t *)&v109 + 1) = vadd_s32(*(int32x2_t *)((char *)&v109 + 8), (int32x2_t)0x1FFFFFFFFLL);
                goto LABEL_141;
              }
              if (v67 == v68
                || *(_DWORD *)(*(_QWORD *)(v67 + 40) + 4) != *(_DWORD *)(v71 + ((unint64_t)(v69 == 14) << 6) + 4))
              {
                goto LABEL_116;
              }
              v73 = *(_QWORD *)(v67 + 48);
              v74 = 96;
              if (v69 == 14)
                v74 = 32;
              if (v73 != *(_QWORD *)(v71 + v74 + 16))
              {
LABEL_116:
                v75 = 96;
                if (v69 == 14)
                  v75 = 32;
                v76 = *(_QWORD *)(v71 + v75 + 16);
                v107.i64[0] = 0;
                v77 = sub_1C5260944(v59, v65, v116.i64, v107.i64);
                v78 = v107.i64[0];
                if ((v77 & 1) != 0)
                  goto LABEL_126;
                if (4 * DWORD2(v109) + 4 >= 3 * v65)
                {
                  v89 = 2 * v65;
                }
                else
                {
                  if (v65 + ~DWORD2(v109) - HIDWORD(v109) > v65 >> 3)
                  {
LABEL_121:
                    ++DWORD2(v109);
                    if (*(_QWORD *)v78 || *(_BYTE *)(v78 + 24) || *(_QWORD *)(v78 + 32))
                      --HIDWORD(v109);
                    v79 = v117;
                    v80 = v118;
                    *(int64x2_t *)v78 = v116;
                    *(_OWORD *)(v78 + 16) = v79;
                    *(_QWORD *)(v78 + 40) = 0;
                    *(_QWORD *)(v78 + 48) = 0;
                    *(_QWORD *)(v78 + 32) = v80;
LABEL_126:
                    *(_QWORD *)(v78 + 40) = v72;
                    *(_QWORD *)(v78 + 48) = v76;
                    goto LABEL_141;
                  }
                  v89 = v65;
                }
                sub_1C5260AAC((uint64_t)&v109, v89);
                v107.i64[0] = 0;
                v59 = v109;
                sub_1C5260944(v109, v110, v116.i64, v107.i64);
                v78 = v107.i64[0];
                goto LABEL_121;
              }
              v81 = v114;
              if (v114 >= (unint64_t)HIDWORD(v114))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, (uint64_t)v115, v114 + 1, 8);
                v81 = v114;
              }
              *((_QWORD *)v113 + v81) = v57;
              LODWORD(v114) = v114 + 1;
              v60 = *(unsigned __int16 **)(v57 + 16);
            }
            if ((v60[4] & 0x10) == 0)
            {
              v82 = DWORD2(v109);
              v83 = v110;
              v84 = v59 + 56 * v110;
              if (DWORD2(v109))
              {
                v116.i64[0] = v59;
                v116.i64[1] = v59 + 56 * v110;
                sub_1C5260A5C(&v116);
                v85 = v116;
              }
              else
              {
                v85 = vdupq_n_s64(v84);
              }
              v107 = v85;
              v86 = (uint64_t *)v85.i64[0];
              if (v84 != v85.i64[0])
              {
                v87 = HIDWORD(v109);
                do
                {
                  if (llvm::MachineInstr::findRegisterDefOperandIdx(v57, *(_DWORD *)(v86[5] + 4), 0, 1, v58) != -1)
                  {
                    v116.i64[0] = 0;
                    if (sub_1C5260944(v59, v83, v86, v116.i64))
                    {
                      v88 = v116.i64[0];
                      *(_QWORD *)v116.i64[0] = 0;
                      *(_QWORD *)(v88 + 8) = 0;
                      *(_QWORD *)(v88 + 16) = 0;
                      *(_BYTE *)(v88 + 24) = 1;
                      *(_QWORD *)(v88 + 32) = 0;
                      --v82;
                      ++v87;
                    }
                  }
                  v107.i64[0] += 56;
                  sub_1C5260A5C(&v107);
                  v86 = (uint64_t *)v107.i64[0];
                }
                while (v107.i64[0] != v84);
                *((_QWORD *)&v109 + 1) = __PAIR64__(v87, v82);
                if (!v57)
                {
LABEL_144:
                  while ((*(_WORD *)(v57 + 44) & 8) != 0)
                    v57 = *(_QWORD *)(v57 + 8);
                  goto LABEL_145;
                }
              }
            }
LABEL_141:
            if ((*(_BYTE *)v57 & 4) == 0)
              goto LABEL_144;
LABEL_145:
            v57 = *(_QWORD *)(v57 + 8);
            if ((_QWORD *)v57 == v37)
              goto LABEL_151;
          }
        }
        v59 = 0;
LABEL_151:
        if ((_DWORD)v114)
        {
          v90 = (char *)v113;
          v91 = (char *)v113 + 8 * v114;
          v92 = v106;
          v93 = v105;
          v94 = v104;
          do
          {
            v95 = *(_BYTE **)v90;
            v96 = *(_BYTE **)v90;
            if ((**(_BYTE **)v90 & 4) == 0)
            {
              v96 = *(_BYTE **)v90;
              if ((*((_WORD *)v95 + 22) & 8) != 0)
              {
                v96 = *(_BYTE **)v90;
                do
                  v96 = (_BYTE *)*((_QWORD *)v96 + 1);
                while ((*((_WORD *)v96 + 22) & 8) != 0);
              }
            }
            sub_1C487FE80(*((_QWORD *)v95 + 3) + 40, (uint64_t)v95, *((_QWORD *)v96 + 1));
            v90 += 8;
          }
          while (v90 != v91);
          v97 = v114;
        }
        else
        {
          v97 = 0;
          v92 = v106;
          v93 = v105;
          v94 = v104;
        }
        MEMORY[0x1CAA32FB4](v59, 8);
        if (v113 != v115)
          free(v113);
        v18 = v92 | ((v97 | v94) != 0);
        v34 = (void **)v93[1];
        if (v34 == v103)
          return v18 & 1;
      }
    }
  }
LABEL_165:
  LOBYTE(v18) = 0;
  return v18 & 1;
}

int *sub_1C52603E0(int *result)
{
  int v1;
  int *v2;
  int *v3;
  unsigned int v4;

  v1 = *result;
  *(_QWORD *)result = *result & 1;
  if ((v1 & 1) != 0)
  {
    v2 = result + 2;
    v3 = result + 42;
  }
  else
  {
    v4 = result[4];
    if (!v4)
      return result;
    v2 = (int *)*((_QWORD *)result + 1);
    v3 = &v2[10 * v4];
  }
  do
  {
    *(_QWORD *)v2 = 0;
    *((_BYTE *)v2 + 8) = 0;
    *((_BYTE *)v2 + 24) = 0;
    *((_QWORD *)v2 + 4) = 0;
    v2 += 10;
  }
  while (v2 != v3);
  return result;
}

uint64_t sub_1C5260430@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v16 = 0;
  result = sub_1C52604F8(a1, (uint64_t *)a2, &v16);
  v7 = v16;
  if ((_DWORD)result)
  {
    v14 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v15 = 4;
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(_DWORD *)(a1 + 16);
    }
    v13 = 0;
    v12 = v14 + 40 * v15;
  }
  else
  {
    result = sub_1C5260624((_DWORD *)a1, a2, (uint64_t *)a2, v16);
    v7 = result;
    v8 = *(_OWORD *)a2;
    v9 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)result = v8;
    *(_OWORD *)(result + 16) = v9;
    v10 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v11 = 4;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(_DWORD *)(a1 + 16);
    }
    v12 = v10 + 40 * v11;
    v13 = 1;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v12;
  *(_BYTE *)(a3 + 16) = v13;
  return result;
}

uint64_t sub_1C52604F8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;

  v5 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v6 = 4;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 16);
    if (!v6)
    {
      v9 = 0;
      result = 0;
      goto LABEL_7;
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  v7 = v6 - 1;
  v8 = sub_1C50FD958(a2) & (v6 - 1);
  v9 = v5 + 40 * v8;
  if (sub_1C50FDDD0((uint64_t)a2, v9))
  {
    result = 1;
    goto LABEL_7;
  }
  v11 = 0;
  v12 = 1;
  while (1)
  {
    if (*(_QWORD *)v9)
      goto LABEL_11;
    if (!*(_BYTE *)(v9 + 24))
      break;
    if (*(_OWORD *)(v9 + 8) == 0)
    {
      v13 = *(_QWORD *)(v9 + 32) == 0;
      goto LABEL_12;
    }
LABEL_11:
    v13 = 0;
LABEL_12:
    if (v13 && v11 == 0)
      v11 = v9;
    v14 = v12 + 1;
    v8 = (v8 + v12) & v7;
    v9 = v5 + 40 * v8;
    v15 = sub_1C50FDDD0((uint64_t)a2, v9);
    result = 1;
    v12 = v14;
    if (v15)
      goto LABEL_7;
  }
  if (*(_QWORD *)(v9 + 32))
    goto LABEL_11;
  result = 0;
  if (v11)
    v9 = v11;
LABEL_7:
  *a3 = v9;
  return result;
}

uint64_t sub_1C5260624(_DWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  uint64_t v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_11;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_11:
    sub_1C52606F0((uint64_t)a1, v7);
    v9 = 0;
    sub_1C52604F8((uint64_t)a1, a3, &v9);
    a4 = v9;
  }
  *a1 += 2;
  if (*(_QWORD *)a4 || *(_BYTE *)(a4 + 24) || *(_QWORD *)(a4 + 32))
    --a1[1];
  return a4;
}

uint64_t sub_1C52606F0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  __int128 *v6;
  unsigned int v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16[10];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(__int128 **)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 4)
    {
      v15 = a2;
      *(_QWORD *)(a1 + 8) = operator new(40 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C52608A4((int *)a1, v6, (__int128 *)((char *)v6 + 40 * v7));
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v16;
  do
  {
    v10 = a1 + v8;
    if (*(_QWORD *)(a1 + v8 + 8) || *(_BYTE *)(v10 + 32) && *(_OWORD *)(a1 + v8 + 16) != 0 || *(_QWORD *)(v10 + 40))
    {
      v11 = *(_OWORD *)(a1 + v8 + 8);
      v12 = *(_OWORD *)(a1 + v8 + 24);
      *((_QWORD *)v9 + 4) = *(_QWORD *)(a1 + v8 + 40);
      *v9 = v11;
      v9[1] = v12;
      v9 = (__int128 *)((char *)v9 + 40);
    }
    v8 += 40;
  }
  while (v8 != 160);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v13 = a2;
    *(_QWORD *)(a1 + 8) = operator new(40 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v13;
  }
  return sub_1C52608A4((int *)a1, v16, v9);
}

uint64_t sub_1C52608A4(int *a1, __int128 *a2, __int128 *a3)
{
  uint64_t result;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  result = (uint64_t)sub_1C52603E0(a1);
  while (a2 != a3)
  {
    if (*(_QWORD *)a2 || *((_BYTE *)a2 + 24) && *(__int128 *)((char *)a2 + 8) != 0 || *((_QWORD *)a2 + 4))
    {
      v10 = 0;
      result = sub_1C52604F8((uint64_t)a1, (uint64_t *)a2, &v10);
      v7 = (_OWORD *)v10;
      v8 = *a2;
      v9 = a2[1];
      *(_QWORD *)(v10 + 32) = *((_QWORD *)a2 + 4);
      *v7 = v8;
      v7[1] = v9;
      *a1 += 2;
    }
    a2 = (__int128 *)((char *)a2 + 40);
  }
  return result;
}

uint64_t sub_1C5260944(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;

  if (!a2)
  {
    v9 = 0;
    result = 0;
    goto LABEL_5;
  }
  v7 = a2 - 1;
  v8 = sub_1C50FD958(a3) & (a2 - 1);
  v9 = a1 + 56 * v8;
  if (sub_1C50FDDD0((uint64_t)a3, v9))
  {
    result = 1;
    goto LABEL_5;
  }
  v11 = 0;
  v12 = 1;
  while (1)
  {
    if (*(_QWORD *)v9)
      goto LABEL_8;
    if (!*(_BYTE *)(v9 + 24))
      break;
    if (*(_OWORD *)(v9 + 8) == 0)
    {
      v13 = *(_QWORD *)(v9 + 32) == 0;
      goto LABEL_9;
    }
LABEL_8:
    v13 = 0;
LABEL_9:
    if (v13 && v11 == 0)
      v11 = v9;
    v14 = v12 + 1;
    v8 = (v8 + v12) & v7;
    v9 = a1 + 56 * v8;
    v15 = sub_1C50FDDD0((uint64_t)a3, v9);
    result = 1;
    v12 = v14;
    if (v15)
      goto LABEL_5;
  }
  if (*(_QWORD *)(v9 + 32))
    goto LABEL_8;
  result = 0;
  if (v11)
    v9 = v11;
LABEL_5:
  *a4 = v9;
  return result;
}

_QWORD *sub_1C5260A5C(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)result[1];
  if ((_QWORD *)*result != v1)
  {
    v2 = (_QWORD *)(*result + 32);
    do
    {
      if (*(v2 - 4) || *((_BYTE *)v2 - 8) && *(_OWORD *)(v2 - 3) != 0)
        break;
      if (*v2)
        break;
      v3 = v2 + 3;
      *result = v2 + 3;
      v2 += 7;
    }
    while (v3 != v1);
  }
  return result;
}

char *sub_1C5260AAC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  int v17;
  char *v18;
  uint64_t v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(56 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = &result[56 * v10];
      do
      {
        *(_QWORD *)result = 0;
        result[8] = 0;
        result[24] = 0;
        *((_QWORD *)result + 4) = 0;
        result += 56;
      }
      while (result != v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 56 * v3;
      v13 = v4;
      do
      {
        if (*(_QWORD *)v13 || *(_BYTE *)(v13 + 24) && *(_OWORD *)(v13 + 8) != 0 || *(_QWORD *)(v13 + 32))
        {
          v19 = 0;
          sub_1C5260944(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t *)v13, &v19);
          v14 = (_OWORD *)v19;
          v15 = *(_OWORD *)v13;
          v16 = *(_OWORD *)(v13 + 16);
          *(_QWORD *)(v19 + 32) = *(_QWORD *)(v13 + 32);
          *v14 = v15;
          v14[1] = v16;
          *(_OWORD *)((char *)v14 + 40) = *(_OWORD *)(v13 + 40);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 56;
        v12 -= 56;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(_DWORD *)(a1 + 16);
  if (v17)
  {
    v18 = &result[56 * v17];
    do
    {
      *(_QWORD *)result = 0;
      result[8] = 0;
      result[24] = 0;
      *((_QWORD *)result + 4) = 0;
      result += 56;
    }
    while (result != v18);
  }
  return result;
}

uint64_t sub_1C5260C24(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeSlotIndexesPass(a1);
  llvm::initializeLiveIntervalsPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Rename Independent Subregisters";
  *(_QWORD *)(v2 + 8) = 31;
  *(_QWORD *)(v2 + 16) = "rename-independent-subregs";
  *(_QWORD *)(v2 + 24) = 26;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6FE9;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5260CC0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C5260CC0()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F6FE9);
  *result = &off_1E8149E48;
  return result;
}

void sub_1C5260D00(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C5260D94(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5260E20()
{
  return "Rename Disconnected Subregister Components";
}

void *sub_1C5260E30(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::SlotIndexes::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C5260EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const llvm::LiveRange *v10;
  int v11;
  int v12;
  unint64_t v13;
  unsigned __int8 *v14;
  int v15;
  char *v16;
  unsigned __int8 **v17;
  uint64_t *v18;
  unsigned __int8 **v19;
  void **v20;
  unsigned __int8 **v21;
  _DWORD *v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  unsigned __int8 *v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  void **v36;
  unsigned int v37;
  BOOL v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  _BYTE *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  int **v53;
  int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t IncompleteVirtualRegister;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  _DWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  __int16 v77;
  unint64_t v78;
  unint64_t v79;
  unsigned int v80;
  int v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  _QWORD *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  BOOL v104;
  unint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int **v114;
  unsigned int *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  unsigned __int8 *v130;
  int v131;
  _BYTE *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  _BYTE *v136;
  unint64_t v137;
  uint64_t v138;
  void *v139;
  _QWORD *v140;
  int v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  _BYTE *v147;
  int64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int *v153;
  int v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  llvm::MachineBasicBlock *v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  int **v165;
  int *v166;
  int v167;
  unint64_t v168;
  __int16 v169;
  unint64_t v170;
  unint64_t v171;
  unsigned int v172;
  int v173;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unsigned int v186;
  unsigned int v187;
  _QWORD *v188;
  uint64_t v189;
  unsigned int v190;
  unsigned int v191;
  _QWORD *v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  BOOL v196;
  unint64_t v197;
  unint64_t v198;
  __int16 v199;
  unint64_t v200;
  unint64_t v201;
  unsigned int v202;
  int v203;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  int v211;
  int v212;
  uint64_t v213;
  unint64_t v214;
  unsigned int v215;
  _QWORD *v216;
  uint64_t v217;
  unsigned int v218;
  unsigned int v219;
  _QWORD *v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  BOOL v224;
  unint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v234;
  llvm **v235;
  llvm **v236;
  llvm *v237;
  uint64_t v238;
  unsigned int v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unsigned int v244;
  unsigned int v245;
  _QWORD *v246;
  uint64_t v247;
  unsigned int v248;
  unsigned int v249;
  _QWORD *v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  BOOL v254;
  unint64_t v255;
  llvm::MachineBasicBlock *v256;
  uint64_t *v257;
  llvm::MachineBasicBlock *v258;
  _QWORD *PHICopyInsertPoint;
  uint64_t v260;
  llvm::MachineFunction *v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  _DWORD *v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  char *v282;
  unsigned int *v283;
  unint64_t v284;
  unint64_t v286;
  __int16 v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  unsigned int v291;
  int v292;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t *v298;
  uint64_t v299;
  int v300;
  int v301;
  uint64_t v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  char *v306;
  unint64_t v307;
  unsigned int v308;
  uint64_t v309;
  unint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  unsigned int v313;
  unsigned int v314;
  _QWORD *v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v318;
  BOOL v319;
  unint64_t v320;
  unsigned int *v321;
  uint64_t v322;
  unsigned int v323;
  unsigned int TiedOperandIdx;
  uint64_t v326;
  unsigned int **v327;
  uint64_t v329;
  int v330;
  uint64_t v331;
  llvm::LiveInterval *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  llvm::MachineBasicBlock *v340;
  uint64_t v341;
  uint64_t v342;
  llvm **i;
  uint64_t v344;
  char *v345;
  uint64_t v346;
  unsigned __int8 *v347;
  void *v348;
  uint64_t v349;
  _QWORD v350[4];
  void *v351;
  uint64_t v352;
  _BYTE v353[32];
  unsigned int v354;
  void *v355;
  uint64_t v356;
  _BYTE v357[320];
  void *v358;
  uint64_t v359;
  _BYTE v360[32];
  unsigned __int8 *v361;
  uint64_t v362;
  uint64_t v363;
  _QWORD v364[4];
  int v365;
  const llvm::LiveRange *v366;
  int v367;
  _DWORD *v368;
  uint64_t v369;
  _QWORD v370[6];

  v370[4] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 256) = v2;
  if (*(_BYTE *)(v2 + 16))
  {
    v4 = a1;
    v5 = **(void ****)(a1 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
    }
    while (v6 != &llvm::LiveIntervals::ID);
    *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::LiveIntervals::ID);
    *(_QWORD *)(v4 + 264) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
    v333 = *(unsigned int *)(*(_QWORD *)(v4 + 256) + 32);
    if ((_DWORD)v333)
    {
      v7 = 0;
      v330 = 0;
      v338 = v4;
      while (1)
      {
        v8 = *(_QWORD *)(v4 + 248);
        if ((v7 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v8 + 416))
          goto LABEL_416;
        v9 = *(_QWORD *)(*(_QWORD *)(v8 + 408) + 8 * (v7 & 0x7FFFFFFF));
        if (!v9)
          goto LABEL_416;
        v334 = v7;
        v10 = *(const llvm::LiveRange **)(v9 + 104);
        if (v10)
          break;
        v7 = v334;
LABEL_416:
        if (++v7 == v333)
          return v330 & 1;
      }
      if (*(_DWORD *)(v9 + 72) < 2u)
      {
        v11 = 0;
        v12 = v330;
        v7 = v334;
LABEL_415:
        v330 = v12 | v11;
        goto LABEL_416;
      }
      v344 = v9;
      LODWORD(v13) = 0;
      v355 = v357;
      v356 = 0x400000000;
      v351 = v353;
      v352 = 0x800000000;
      v354 = 0;
      while (1)
      {
        v14 = *(unsigned __int8 **)(v4 + 248);
        v361 = v14;
        v362 = (uint64_t)v364;
        v363 = 0x800000000;
        v365 = 0;
        v366 = v10;
        v367 = v13;
        v15 = v356;
        v16 = (char *)v355;
        if (v356 < HIDWORD(v356))
        {
          v17 = &v361;
          v18 = &v363;
          goto LABEL_15;
        }
        v28 = v355 <= &v361 && (char *)v355 + 80 * v356 > (char *)&v361;
        v29 = v28;
        if (v29 == 1)
          v30 = 0xCCCCCCCCCCCCCCCDLL * (((char *)&v361 - (_BYTE *)v355) >> 4);
        else
          v30 = -1;
        v368 = 0;
        v16 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v355, v356 + 1, 80, (unint64_t *)&v368);
        v31 = (char *)v355;
        if (!(_DWORD)v356)
        {
          v45 = v355;
          goto LABEL_65;
        }
        v336 = v30;
        v339 = v29;
        v32 = 0;
        v341 = 80 * v356;
        do
        {
          v33 = &v31[v32];
          v34 = &v16[v32];
          *(_QWORD *)v34 = *(_QWORD *)&v31[v32];
          v35 = &v16[v32 + 24];
          *(_QWORD *)&v16[v32 + 8] = v35;
          v36 = (void **)&v16[v32 + 8];
          *((_QWORD *)v34 + 2) = 0x800000000;
          v37 = *(_DWORD *)&v31[v32 + 16];
          if (v37)
            v38 = v33 == v34;
          else
            v38 = 1;
          if (!v38)
          {
            v39 = (char *)*((_QWORD *)v33 + 1);
            if (v33 + 24 == v39)
            {
              if (v37 < 9)
              {
                v40 = *(unsigned int *)&v31[v32 + 16];
                goto LABEL_49;
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16[v32 + 8], (uint64_t)&v16[v32 + 24], *(unsigned int *)&v31[v32 + 16], 4);
              v40 = *((unsigned int *)v33 + 4);
              if ((_DWORD)v40)
              {
                v39 = (char *)*((_QWORD *)v33 + 1);
                v35 = (char *)*v36;
LABEL_49:
                memcpy(v35, v39, 4 * v40);
              }
              *((_DWORD *)v34 + 4) = v37;
            }
            else
            {
              *v36 = v39;
              *((_DWORD *)v34 + 4) = v37;
              *((_DWORD *)v34 + 5) = *(_DWORD *)&v31[v32 + 20];
              *((_QWORD *)v33 + 1) = v33 + 24;
              *(_DWORD *)&v31[v32 + 20] = 0;
            }
            *((_DWORD *)v33 + 4) = 0;
          }
          *((_DWORD *)v34 + 14) = *((_DWORD *)v33 + 14);
          v41 = *((_QWORD *)v33 + 8);
          *((_DWORD *)v34 + 18) = *((_DWORD *)v33 + 18);
          *((_QWORD *)v34 + 8) = v41;
          v32 += 80;
        }
        while (v341 != v32);
        v42 = (char *)v355;
        if ((_DWORD)v356)
        {
          v43 = 80 * v356;
          v29 = v339;
          v30 = v336;
          do
          {
            v44 = *(char **)&v42[v43 - 72];
            if (&v42[v43 - 56] != v44)
              free(v44);
            v43 -= 80;
          }
          while (v43);
          v45 = v355;
        }
        else
        {
          v29 = v339;
          v30 = v336;
          v45 = v355;
        }
LABEL_65:
        v46 = (int)v368;
        if (v45 != v357)
          free(v45);
        v355 = v16;
        HIDWORD(v356) = v46;
        if (v29)
          v17 = (unsigned __int8 **)&v16[80 * v30];
        else
          v17 = &v361;
        v18 = &v363;
        if (v29)
          v18 = (uint64_t *)&v16[80 * v30 + 16];
        v15 = v356;
        v14 = *v17;
LABEL_15:
        v19 = (unsigned __int8 **)&v16[80 * v15];
        *v19 = v14;
        v19[1] = (unsigned __int8 *)(v19 + 3);
        v20 = (void **)(v19 + 1);
        v19[2] = (unsigned __int8 *)0x800000000;
        if (*(_DWORD *)v18 && v19 != v17)
        {
          v21 = (unsigned __int8 **)v17[1];
          if (v21 == v17 + 3)
          {
            v22 = v17 + 2;
            v23 = *((_DWORD *)v17 + 4);
            if (v23)
            {
              if (v23 >= 9)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v20, (uint64_t)(v19 + 3), *((unsigned int *)v17 + 4), 4);
                v24 = *v22;
                if (*v22)
LABEL_21:
                  memcpy(*v20, v17[1], 4 * v24);
              }
              else
              {
                v24 = *((unsigned int *)v17 + 4);
                if (*((_DWORD *)v17 + 4))
                  goto LABEL_21;
              }
              *((_DWORD *)v19 + 4) = v23;
            }
          }
          else
          {
            v19[1] = (unsigned __int8 *)v21;
            v22 = v17 + 2;
            v19[2] = v17[2];
            v17[1] = (unsigned __int8 *)(v17 + 3);
            *((_DWORD *)v17 + 5) = 0;
          }
          *v22 = 0;
        }
        *((_DWORD *)v19 + 14) = *((_DWORD *)v17 + 14);
        v25 = &v16[80 * v15];
        v26 = v17[8];
        *((_DWORD *)v25 + 18) = *((_DWORD *)v17 + 18);
        *((_QWORD *)v25 + 8) = v26;
        v27 = v356 + 1;
        LODWORD(v356) = v356 + 1;
        if ((_QWORD *)v362 != v364)
        {
          free((void *)v362);
          v27 = v356;
        }
        v4 = v338;
        v13 = llvm::ConnectedVNInfoEqClasses::Classify((llvm::ConnectedVNInfoEqClasses *)((char *)v355 + 80 * v27 - 80), v10)+ v13;
        v10 = (const llvm::LiveRange *)*((_QWORD *)v10 + 13);
        if (!v10)
        {
          if (v356 < 2)
          {
            v11 = 0;
            v7 = v334;
            goto LABEL_404;
          }
          v47 = *(_QWORD *)(**(_QWORD **)(v338 + 256) + 16);
          v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 176))(v47);
          v7 = v334;
          if (HIDWORD(v352) < v13)
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v351, (uint64_t)v353, v13, 4);
          v49 = v352;
          while (v49 < v13)
          {
            v50 = v49;
            if (v49 >= HIDWORD(v352))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v351, (uint64_t)v353, v49 + 1, 4);
              v50 = v352;
            }
            *((_DWORD *)v351 + v50) = v49;
            v49 = v352 + 1;
            LODWORD(v352) = v352 + 1;
          }
          v51 = *(unsigned int *)(v344 + 112);
          v52 = *(_QWORD *)(v338 + 256);
          if ((v51 & 0x80000000) != 0)
            v53 = (int **)(*(_QWORD *)(v52 + 24) + 16 * (v51 & 0x7FFFFFFF) + 8);
          else
            v53 = (int **)(*(_QWORD *)(v52 + 272) + 8 * v51);
          v54 = *v53;
          if (v54)
          {
            while (1)
            {
              v55 = *v54;
              if ((*v54 & 0x80000000) == 0)
                break;
              v54 = (int *)*((_QWORD *)v54 + 3);
              if (!v54)
                goto LABEL_88;
            }
            v69 = (char *)v355;
LABEL_106:
            if (((v55 & 0x1000000) != 0 || (v55 & 0x30000000) == 0 && (v55 & 0x10FFF00) != 0x1000000) && (_DWORD)v356)
            {
              v70 = *(_QWORD *)(*(_QWORD *)(v48 + 232) + 8 * ((v55 >> 8) & 0xFFF));
              v71 = &v69[80 * v356];
              v72 = 0xFFFFFFFFLL;
              v73 = v351;
              v74 = v69;
              while (2)
              {
                v75 = *((_QWORD *)v74 + 8);
                if ((*(_QWORD *)(v75 + 112) & v70) == 0)
                  goto LABEL_154;
                v76 = *((_QWORD *)v54 + 1);
                v77 = *(_WORD *)(v76 + 44);
                v78 = v76;
                if ((v77 & 4) != 0)
                {
                  do
                    v78 = *(_QWORD *)v78 & 0xFFFFFFFFFFFFFFF8;
                  while ((*(_WORD *)(v78 + 44) & 4) != 0);
                }
                if ((v77 & 8) != 0)
                {
                  do
                    v76 = *(_QWORD *)(v76 + 8);
                  while ((*(_WORD *)(v76 + 44) & 8) != 0);
                }
                v79 = *(_QWORD *)(v76 + 8);
                if (v78 != v79)
                {
                  do
                  {
                    v80 = **(unsigned __int16 **)(v78 + 16);
                    v28 = v80 > 0x17;
                    v81 = (1 << v80) & 0x83E000;
                    if (v28 || v81 == 0)
                      goto LABEL_121;
                    v78 = *(_QWORD *)(v78 + 8);
                  }
                  while (v78 != v79);
                  v78 = v79;
                }
LABEL_121:
                v83 = *(_QWORD *)(*(_QWORD *)(v338 + 248) + 288);
                v84 = *(_QWORD *)(v83 + 368);
                v85 = *(unsigned int *)(v83 + 384);
                if ((_DWORD)v85)
                {
                  LODWORD(v86) = ((v78 >> 4) ^ (v78 >> 9)) & (v85 - 1);
                  v87 = (uint64_t *)(v84 + 16 * v86);
                  v88 = *v87;
                  if (v78 != *v87)
                  {
                    v89 = 1;
                    do
                    {
                      if (v88 == -4096)
                        goto LABEL_127;
                      v90 = v86 + v89++;
                      v86 = v90 & (v85 - 1);
                      v88 = *(_QWORD *)(v84 + 16 * v86);
                    }
                    while (v78 != v88);
                    v87 = (uint64_t *)(v84 + 16 * v86);
                  }
                }
                else
                {
LABEL_127:
                  v87 = (uint64_t *)(v84 + 16 * v85);
                }
                v91 = v87[1];
                if ((*v54 & 0x1000000) != 0)
                {
                  v93 = v91 & 0xFFFFFFFFFFFFFFF8;
                  if ((*v54 & 0x40000000) != 0)
                    v94 = 2;
                  else
                    v94 = 4;
                  v92 = v94 | v93;
                }
                else
                {
                  v92 = v91 & 0xFFFFFFFFFFFFFFF8;
                }
                v95 = *(unsigned int *)(v75 + 8);
                v96 = *(_QWORD **)v75;
                if ((_DWORD)v95)
                {
                  v97 = v96[3 * v95 - 2];
                  v98 = *(_DWORD *)((v92 & 0xFFFFFFFFFFFFFFF8) + 24) | (v92 >> 1) & 3;
                  v99 = (v97 >> 1) & 3 | *(_DWORD *)((v97 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v100 = v96;
                  v101 = v95;
                  if (v98 < v99)
                  {
                    do
                    {
                      v102 = v101 >> 1;
                      v103 = v100[3 * (v101 >> 1) + 1];
                      LODWORD(v103) = (v103 >> 1) & 3 | *(_DWORD *)((v103 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v101 -= (v101 >> 1) + 1;
                      v104 = v98 >= v103;
                      if (v98 >= v103)
                        v105 = v102 + 1;
                      else
                        v105 = 0;
                      v100 += 3 * v105;
                      if (!v104)
                        v101 = v102;
                    }
                    while (v101);
                    goto LABEL_145;
                  }
                }
                else
                {
                  LODWORD(v95) = 0;
                }
                v100 = &v96[3 * v95];
LABEL_145:
                if (v100 != &v96[3 * v95]
                  && ((*v100 >> 1) & 3 | *(_DWORD *)((*v100 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v92 & 0xFFFFFFFFFFFFFFF8) + 24) | (v92 >> 1) & 3))
                {
                  v106 = (unsigned int *)v100[2];
                  if (v106)
                  {
                    v107 = *((_DWORD *)v74 + 18) + *(_DWORD *)(*((_QWORD *)v74 + 1) + 4 * *v106);
                    if ((_DWORD)v72 == -1)
                    {
                      v108 = (*((_DWORD *)v74 + 18) + *(_DWORD *)(*((_QWORD *)v74 + 1) + 4 * *v106));
                    }
                    else
                    {
                      v108 = v73[v72];
                      v109 = v73[v107];
                      while ((_DWORD)v108 != v109)
                      {
                        if (v108 < v109)
                        {
                          v73[v107] = v108;
                          v107 = v109;
                          v109 = v73[v109];
                        }
                        else
                        {
                          v73[v72] = v109;
                          LODWORD(v72) = v108;
                          v108 = v73[v108];
                        }
                      }
                    }
                    goto LABEL_155;
                  }
                }
LABEL_154:
                v108 = v72;
LABEL_155:
                v74 += 80;
                v72 = v108;
                if (v74 == v71)
                  break;
                continue;
              }
            }
            while (1)
            {
              v54 = (int *)*((_QWORD *)v54 + 3);
              if (!v54)
                break;
              v55 = *v54;
              if ((*v54 & 0x80000000) == 0)
                goto LABEL_106;
            }
          }
LABEL_88:
          v56 = v354;
          if (!v354)
          {
            v57 = v352;
            if ((_DWORD)v352)
            {
              v58 = 0;
              v59 = v351;
              do
              {
                v60 = v59[v58];
                if (v58 == v60)
                  v61 = v354++;
                else
                  v61 = v59[v60];
                v59[v58++] = v61;
              }
              while (v57 != v58);
              v56 = v354;
              goto LABEL_96;
            }
LABEL_104:
            v11 = 0;
LABEL_404:
            if (v351 != v353)
              free(v351);
            v280 = (char *)v355;
            if ((_DWORD)v356)
            {
              v281 = 80 * v356;
              do
              {
                v282 = *(char **)&v280[v281 - 72];
                if (&v280[v281 - 56] != v282)
                  free(v282);
                v281 -= 80;
              }
              while (v281);
              v280 = (char *)v355;
              v7 = v334;
            }
            if (v280 != v357)
              free(v280);
            v12 = v330;
            goto LABEL_415;
          }
LABEL_96:
          if (v56 < 2)
            goto LABEL_104;
          v62 = *(_QWORD *)(*(_QWORD *)(v52 + 24) + 16 * (*(_DWORD *)(v344 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
          v348 = v350;
          v350[0] = v344;
          v349 = 0x400000001;
          v63 = v56 - 1;
          do
          {
            v64 = *(_QWORD *)(v338 + 256);
            IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v64, "", 0);
            *(_QWORD *)(*(_QWORD *)(v64 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v62;
            v66 = *(_QWORD *)(v64 + 8);
            if (v66)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 24))(v66, IncompleteVirtualRegister);
            v67 = sub_1C4851220(*(_QWORD *)(v338 + 248), IncompleteVirtualRegister);
            v68 = v349;
            if (v349 >= (unint64_t)HIDWORD(v349))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v348, (uint64_t)v350, v349 + 1, 8);
              v68 = v349;
            }
            *((_QWORD *)v348 + v68) = v67;
            LODWORD(v349) = v349 + 1;
            --v63;
          }
          while (v63);
          v110 = *(_QWORD *)(**(_QWORD **)(v338 + 256) + 16);
          v111 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v110 + 176))(v110);
          v112 = *(unsigned int *)(*(_QWORD *)v348 + 112);
          v113 = *(_QWORD *)(v338 + 256);
          if ((v112 & 0x80000000) != 0)
            v114 = (unsigned int **)(*(_QWORD *)(v113 + 24) + 16 * (v112 & 0x7FFFFFFF) + 8);
          else
            v114 = (unsigned int **)(*(_QWORD *)(v113 + 272) + 8 * v112);
          v115 = *v114;
          if (!*v114)
            goto LABEL_171;
          while ((*v115 & 0x80000000) != 0)
          {
            v115 = (unsigned int *)*((_QWORD *)v115 + 3);
            if (!v115)
              goto LABEL_171;
          }
          v283 = v115;
          do
LABEL_419:
            v283 = (unsigned int *)*((_QWORD *)v283 + 3);
          while (v283 && (*v283 & 0x80000000) != 0);
          v284 = *v115;
          if ((v284 & 0x1000000) == 0 && ((v284 & 0x30000000) != 0 || (v284 & 0x10FFF00) == 0x1000000))
            goto LABEL_471;
          v286 = *((_QWORD *)v115 + 1);
          v287 = *(_WORD *)(v286 + 44);
          v288 = v286;
          if ((v287 & 4) != 0)
          {
            do
              v288 = *(_QWORD *)v288 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v288 + 44) & 4) != 0);
          }
          v289 = *((_QWORD *)v115 + 1);
          if ((v287 & 8) != 0)
          {
            do
              v289 = *(_QWORD *)(v289 + 8);
            while ((*(_WORD *)(v289 + 44) & 8) != 0);
          }
          v290 = *(_QWORD *)(v289 + 8);
          if (v288 != v290)
          {
            while (1)
            {
              v291 = **(unsigned __int16 **)(v288 + 16);
              v28 = v291 > 0x17;
              v292 = (1 << v291) & 0x83E000;
              if (v28 || v292 == 0)
                break;
              v288 = *(_QWORD *)(v288 + 8);
              if (v288 == v290)
              {
                v288 = v290;
                break;
              }
            }
          }
          v294 = *(_QWORD *)(*(_QWORD *)(v338 + 248) + 288);
          v295 = *(_QWORD *)(v294 + 368);
          v296 = *(unsigned int *)(v294 + 384);
          if ((_DWORD)v296)
          {
            LODWORD(v297) = ((v288 >> 4) ^ (v288 >> 9)) & (v296 - 1);
            v298 = (uint64_t *)(v295 + 16 * v297);
            v299 = *v298;
            if (v288 != *v298)
            {
              v300 = 1;
              while (v299 != -4096)
              {
                v301 = v297 + v300++;
                v297 = v301 & (v296 - 1);
                v299 = *(_QWORD *)(v295 + 16 * v297);
                if (v288 == v299)
                {
                  v298 = (uint64_t *)(v295 + 16 * v297);
                  goto LABEL_442;
                }
              }
              goto LABEL_441;
            }
          }
          else
          {
LABEL_441:
            v298 = (uint64_t *)(v295 + 16 * v296);
          }
LABEL_442:
          v302 = 4;
          if ((v284 & 0x40000000) != 0)
            v302 = 2;
          v303 = v298[1] & 0xFFFFFFFFFFFFFFF8 | v302;
          if ((v284 & 0x1000000) != 0)
            v304 = v303;
          else
            v304 = v298[1] & 0xFFFFFFFFFFFFFFF8;
          if (!(_DWORD)v356)
          {
LABEL_465:
            v322 = 0xFFFFFFFFLL;
            goto LABEL_466;
          }
          v305 = *(_QWORD *)(*(_QWORD *)(v111 + 232) + 8 * ((v284 >> 8) & 0xFFF));
          v306 = (char *)v355;
          v307 = v304 & 0xFFFFFFFFFFFFFFF8;
          v308 = (v304 >> 1) & 3;
          while (2)
          {
            v309 = *((_QWORD *)v306 + 8);
            if ((*(_QWORD *)(v309 + 112) & v305) == 0)
              goto LABEL_464;
            v310 = *(unsigned int *)(v309 + 8);
            v311 = *(_QWORD **)v309;
            if ((_DWORD)v310)
            {
              v312 = v311[3 * v310 - 2];
              v313 = *(_DWORD *)(v307 + 24) | v308;
              v314 = (v312 >> 1) & 3 | *(_DWORD *)((v312 & 0xFFFFFFFFFFFFFFF8) + 24);
              v315 = v311;
              v316 = v310;
              if (v313 < v314)
              {
                do
                {
                  v317 = v316 >> 1;
                  v318 = v315[3 * (v316 >> 1) + 1];
                  LODWORD(v318) = (v318 >> 1) & 3 | *(_DWORD *)((v318 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v316 -= (v316 >> 1) + 1;
                  v319 = v313 >= v318;
                  if (v313 >= v318)
                    v320 = v317 + 1;
                  else
                    v320 = 0;
                  v315 += 3 * v320;
                  if (!v319)
                    v316 = v317;
                }
                while (v316);
LABEL_461:
                if (v315 == &v311[3 * v310]
                  || ((*v315 >> 1) & 3 | *(_DWORD *)((*v315 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v307 + 24) | v308)
                  || (v321 = (unsigned int *)v315[2]) == 0)
                {
LABEL_464:
                  v306 += 80;
                  if (v306 == (char *)v355 + 80 * v356)
                    goto LABEL_465;
                  continue;
                }
                v322 = *((unsigned int *)v351
                       + (*((_DWORD *)v306 + 18) + *(_DWORD *)(*((_QWORD *)v306 + 1) + 4 * *v321)));
LABEL_466:
                v323 = *(_DWORD *)(*((_QWORD *)v348 + v322) + 112);
                llvm::MachineOperand::setReg((uint64_t)v115, v323);
                if ((_DWORD)v112 == v323 || (*v115 & 0xF00000) == 0)
                {
LABEL_471:
                  v115 = v283;
                  if (!v283)
                    goto LABEL_171;
                  goto LABEL_419;
                }
                TiedOperandIdx = llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)v286, ((unint64_t)v115 - *(_QWORD *)(v286 + 32)) >> 5);
                llvm::MachineOperand::setReg(*(_QWORD *)(v286 + 32) + 32 * TiedOperandIdx, v323);
                v326 = *(_QWORD *)(v338 + 256);
                if ((v112 & 0x80000000) != 0)
                  v327 = (unsigned int **)(*(_QWORD *)(v326 + 24) + 16 * (v112 & 0x7FFFFFFF) + 8);
                else
                  v327 = (unsigned int **)(*(_QWORD *)(v326 + 272) + 8 * v112);
                v283 = *v327;
                if (*v327)
                {
                  while ((*v283 & 0x80000000) != 0)
                  {
                    v283 = (unsigned int *)*((_QWORD *)v283 + 3);
                    if (!v283)
                      goto LABEL_171;
                  }
                  goto LABEL_471;
                }
LABEL_171:
                v368 = v370;
                v369 = 0x800000000;
                v361 = (unsigned __int8 *)&v363;
                v362 = 0x800000000;
                v7 = v334;
                if (!(_DWORD)v356)
                  goto LABEL_226;
                v116 = *(_QWORD *)(v338 + 248) + 312;
                v117 = (char *)v355;
                v118 = v354 - 1;
                v342 = v118;
                v345 = (char *)v355 + 80 * v356;
                while (2)
                {
                  v119 = *((_QWORD *)v117 + 8);
                  v120 = *(unsigned int *)(v119 + 72);
                  LODWORD(v369) = 0;
                  if (HIDWORD(v369) < v120)
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v368, (uint64_t)v370, v120, 4);
                  LODWORD(v362) = 0;
                  if ((_DWORD)v118)
                    sub_1C510F7B8((unsigned int *)&v361, v118, 0);
                  v121 = (uint64_t *)(v119 + 64);
                  if ((_DWORD)v120)
                  {
                    v122 = 0;
                    v123 = 8 * v120;
                    do
                    {
                      v124 = *((unsigned int *)v351
                             + (*((_DWORD *)v117 + 18)
                                            + *(_DWORD *)(*((_QWORD *)v117 + 1) + 4
                                                                                * **(unsigned int **)(*v121 + v122))));
                      v125 = v369;
                      if (v369 >= (unint64_t)HIDWORD(v369))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v368, (uint64_t)v370, v369 + 1, 4);
                        v125 = v369;
                      }
                      v368[v125] = v124;
                      LODWORD(v369) = v369 + 1;
                      if ((_DWORD)v124)
                      {
                        v126 = (v124 - 1);
                        if (!*(_QWORD *)&v361[8 * v126])
                        {
                          v127 = *((_QWORD *)v348 + v124);
                          v128 = *(_QWORD *)(v119 + 112);
                          v129 = (_QWORD *)sub_1C484358C(v116, 120, 3);
                          *v129 = v129 + 2;
                          v129[1] = 0x200000000;
                          v129[8] = v129 + 10;
                          v129[9] = 0x200000000;
                          v129[12] = 0;
                          v129[13] = 0;
                          v129[14] = v128;
                          v129[13] = *(_QWORD *)(v127 + 104);
                          *(_QWORD *)(v127 + 104) = v129;
                          *(_QWORD *)&v361[8 * v126] = v129;
                        }
                      }
                      v122 += 8;
                    }
                    while (v123 != v122);
                  }
                  v130 = v361;
                  v358 = v360;
                  v359 = 0x800000000;
                  v131 = v369;
                  if ((_DWORD)v369)
                  {
                    v132 = v360;
                    v133 = v369;
                    if (v369 < 9uLL)
                      goto LABEL_187;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v358, (uint64_t)v360, v369, 4);
                    v133 = v369;
                    if ((_DWORD)v369)
                    {
                      v132 = v358;
LABEL_187:
                      memcpy(v132, v368, 4 * v133);
                    }
                    LODWORD(v359) = v131;
                  }
                  v134 = *(_QWORD *)v119;
                  v135 = *(unsigned int *)(v119 + 8);
                  v136 = (_BYTE *)(*(_QWORD *)v119 + 24 * v135);
                  v137 = *(_QWORD *)v119;
                  if ((_DWORD)v135)
                  {
                    v138 = 0;
                    while (1)
                    {
                      v137 = v134 + v138;
                      if (*((_DWORD *)v358 + **(unsigned int **)(v134 + v138 + 16)))
                        break;
                      v138 += 24;
                      if (24 * v135 == v138)
                      {
                        v139 = (void *)(*(_QWORD *)v119 + 24 * v135);
                        goto LABEL_200;
                      }
                    }
                  }
                  v139 = (void *)(*(_QWORD *)v119 + 24 * v135);
                  v140 = (_QWORD *)v137;
                  if ((_BYTE *)v137 != v136)
                  {
                    do
                    {
                      v141 = *((_DWORD *)v358 + **(unsigned int **)(v137 + 16));
                      if (v141)
                      {
                        v142 = *(_QWORD *)&v130[8 * (v141 - 1)];
                        v143 = sub_1C4926708(v142, v137, 1);
                        v144 = *(_QWORD *)v142 + 24 * *(unsigned int *)(v142 + 8);
                        v145 = *(_OWORD *)v143;
                        *(_QWORD *)(v144 + 16) = *(_QWORD *)(v143 + 16);
                        *(_OWORD *)v144 = v145;
                        ++*(_DWORD *)(v142 + 8);
                      }
                      else
                      {
                        v146 = *(_OWORD *)v137;
                        v140[2] = *(_QWORD *)(v137 + 16);
                        *(_OWORD *)v140 = v146;
                        v140 += 3;
                      }
                      v137 += 24;
                    }
                    while ((_BYTE *)v137 != v136);
                    v134 = *(_QWORD *)v119;
                    LODWORD(v135) = *(_DWORD *)(v119 + 8);
                    v139 = v140;
                  }
LABEL_200:
                  v147 = (_BYTE *)(v134 + 24 * v135);
                  v148 = v147 - v136;
                  if (v147 != v136)
                  {
                    memmove(v139, v136, v147 - v136);
                    v134 = *(_QWORD *)v119;
                  }
                  *(_DWORD *)(v119 + 8) = -1431655765 * (((unint64_t)v139 + v148 - v134) >> 3);
                  v149 = *(unsigned int *)(v119 + 72);
                  if ((_DWORD)v149)
                  {
                    v150 = 0;
                    while (!*((_DWORD *)v358 + v150))
                    {
                      if (v149 == ++v150)
                        goto LABEL_209;
                    }
                  }
                  else
                  {
                    LODWORD(v150) = 0;
                  }
                  if ((_DWORD)v150 == (_DWORD)v149)
                  {
LABEL_209:
                    v151 = *(_DWORD *)(v119 + 72);
                  }
                  else
                  {
                    v151 = v150;
                    do
                    {
                      v152 = *v121;
                      v153 = *(unsigned int **)(*v121 + 8 * v150);
                      v154 = *((_DWORD *)v358 + v150);
                      if (v154)
                      {
                        v155 = *(_QWORD *)&v130[8 * (v154 - 1)];
                        v156 = *(unsigned int *)(v155 + 72);
                        *v153 = v156;
                        if (v156 >= *(unsigned int *)(v155 + 76))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod(v155 + 64, v155 + 80, v156 + 1, 8);
                          v156 = *(unsigned int *)(v155 + 72);
                        }
                        *(_QWORD *)(*(_QWORD *)(v155 + 64) + 8 * v156) = v153;
                        ++*(_DWORD *)(v155 + 72);
                      }
                      else
                      {
                        *v153 = v151;
                        *(_QWORD *)(v152 + 8 * v151++) = v153;
                      }
                      LODWORD(v150) = v150 + 1;
                    }
                    while ((_DWORD)v149 != (_DWORD)v150);
                  }
                  sub_1C4DFC134((uint64_t)v121, v151);
                  if (v358 != v360)
                    free(v358);
                  v117 += 80;
                  v118 = v342;
                  v4 = v338;
                  v7 = v334;
                  if (v117 != v345)
                    continue;
                  break;
                }
                if (v361 != (unsigned __int8 *)&v363)
                  free(v361);
LABEL_226:
                if (v368 != (_DWORD *)v370)
                  free(v368);
                v329 = v349;
                if (!(_DWORD)v349)
                {
LABEL_401:
                  if (v348 != v350)
                    free(v348);
                  v11 = 1;
                  goto LABEL_404;
                }
                v157 = 0;
                v158 = *(_QWORD *)(v4 + 248);
                v159 = v158 + 312;
                v346 = *(_QWORD *)(v158 + 288);
                while (2)
                {
                  v160 = *((_QWORD *)v348 + v157);
                  v161 = (llvm::MachineBasicBlock *)*(unsigned int *)(v160 + 112);
                  v331 = v157;
                  v332 = (llvm::LiveInterval *)v160;
                  v163 = (uint64_t *)(v160 + 104);
                  v162 = *(_QWORD *)(v160 + 104);
                  if (!v162)
                    goto LABEL_231;
                  v226 = (_QWORD *)(v160 + 104);
                  while (1)
                  {
                    v227 = v162;
                    if (!*(_DWORD *)(v162 + 8))
                      break;
LABEL_324:
                    v226 = (_QWORD *)(v162 + 104);
                    v162 = *(_QWORD *)(v162 + 104);
                    if (!v162)
                      goto LABEL_337;
                  }
                  while (2)
                  {
                    v228 = *(_QWORD *)(v227 + 96);
                    v162 = *(_QWORD *)(v227 + 104);
                    *(_QWORD *)(v227 + 96) = 0;
                    if (v228)
                    {
                      sub_1C47655E8(v228, *(_QWORD **)(v228 + 8));
                      MEMORY[0x1CAA32FC0](v228, 0x1020C4062D53EE8);
                    }
                    v229 = *(void **)(v227 + 64);
                    if (v229 != (void *)(v227 + 80))
                      free(v229);
                    if (*(_QWORD *)v227 != v227 + 16)
                    {
                      free(*(void **)v227);
                      if (!v162)
                        break;
                      goto LABEL_334;
                    }
                    if (v162)
                    {
LABEL_334:
                      v227 = v162;
                      if (*(_DWORD *)(v162 + 8))
                      {
                        *v226 = v162;
                        goto LABEL_324;
                      }
                      continue;
                    }
                    break;
                  }
                  *v226 = 0;
LABEL_337:
                  v230 = *v163;
                  if (*v163)
                  {
                    while (!*(_DWORD *)(v230 + 72))
                    {
LABEL_399:
                      v230 = *(_QWORD *)(v230 + 104);
                      if (!v230)
                        goto LABEL_231;
                    }
                    v231 = 0;
                    v335 = v230;
                    while (1)
                    {
                      v337 = v231;
                      v232 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v230 + 64) + 8 * v231) + 8);
                      if (v232 >= 8 && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v230 + 64) + 8 * v231) + 8) & 6) == 0)
                        break;
LABEL_344:
                      v230 = v335;
                      v231 = v337 + 1;
                      if (v337 + 1 >= (unint64_t)*(unsigned int *)(v335 + 72))
                        goto LABEL_399;
                    }
                    v234 = sub_1C499C548(v346, v232);
                    v236 = *(llvm ***)(v234 + 64);
                    v235 = *(llvm ***)(v234 + 72);
                    v340 = (llvm::MachineBasicBlock *)v234;
                    for (i = v235; ; v235 = i)
                    {
                      if (v236 == v235)
                        goto LABEL_344;
                      v237 = *v236;
                      v238 = *(_QWORD *)(*(_QWORD *)(v346 + 392) + 16 * *((unsigned int *)*v236 + 6) + 8);
                      v239 = (v238 >> 1) & 3;
                      v240 = v238 & 0xFFFFFFFFFFFFFFF8;
                      v241 = v239 ? v240 | (2 * (v239 - 1)) : *(_QWORD *)v240 | 6;
                      v242 = *v163;
                      if (*v163)
                        break;
LABEL_367:
                      v256 = v161;
                      v257 = v163;
                      v258 = v256;
                      PHICopyInsertPoint = (_QWORD *)llvm::findPHICopyInsertPoint(*v236, v340, v256);
                      v260 = *(_QWORD *)(*(_QWORD *)(v4 + 264) + 8);
                      v347 = 0;
                      v261 = (llvm::MachineFunction *)*((_QWORD *)v237 + 4);
                      v358 = 0;
                      v262 = *((_QWORD *)v261 + 28);
                      if (v262)
                      {
                        *((_QWORD *)v261 + 28) = *(_QWORD *)v262;
                        v361 = 0;
                      }
                      else
                      {
                        v262 = sub_1C484358C((uint64_t)v261 + 128, 72, 3);
                        v361 = (unsigned __int8 *)v358;
                        if (v358)
                        {
                          llvm::MetadataTracking::retrack((uint64_t)&v358, (unsigned __int8 *)v358, (uint64_t)&v361);
                          v358 = 0;
                        }
                      }
                      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v262, v261, v260 + 480, &v361, 0);
                      if (v361)
                        llvm::MetadataTracking::untrack((uint64_t)&v361, v361);
                      v163 = v257;
                      if (v358)
                        llvm::MetadataTracking::untrack((uint64_t)&v358, (unsigned __int8 *)v358);
                      v263 = *((_QWORD *)v237 + 5);
                      *(_QWORD *)(v262 + 24) = v263;
                      v264 = *(_QWORD *)(v263 + 32);
                      v265 = *(unsigned int *)(v262 + 40);
                      v161 = v258;
                      if ((_DWORD)v265)
                      {
                        v273 = *(_QWORD *)(v262 + 32);
                        v274 = *(_QWORD *)(v264 + 40);
                        v275 = 32 * v265;
                        do
                        {
                          if (!*(_BYTE *)v273)
                          {
                            v276 = *(unsigned int *)(v273 + 4);
                            if ((int)v276 >= 0)
                              v277 = (uint64_t *)(*(_QWORD *)(v274 + 272) + 8 * v276);
                            else
                              v277 = (uint64_t *)(*(_QWORD *)(v274 + 24) + 16 * (v276 & 0x7FFFFFFF) + 8);
                            v278 = *v277;
                            if (*v277)
                            {
                              v279 = *(_QWORD *)(v278 + 16);
                              *(_QWORD *)(v278 + 16) = v273;
                              *(_QWORD *)(v273 + 16) = v279;
                              if ((*(_BYTE *)(v273 + 3) & 1) != 0)
                              {
                                *(_QWORD *)(v273 + 24) = v278;
                              }
                              else
                              {
                                *(_QWORD *)(v273 + 24) = 0;
                                v277 = (uint64_t *)(v279 + 24);
                              }
                            }
                            else
                            {
                              *(_QWORD *)(v273 + 16) = v273;
                              *(_QWORD *)(v273 + 24) = 0;
                            }
                            *v277 = v273;
                          }
                          v273 += 32;
                          v275 -= 32;
                        }
                        while (v275);
                      }
                      v266 = *(_QWORD *)(v264 + 728);
                      if (v266)
                        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v266 + 24))(v266, v262);
                      v267 = *PHICopyInsertPoint & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)v262 = v267 | *(_QWORD *)v262 & 7;
                      *(_QWORD *)(v262 + 8) = PHICopyInsertPoint;
                      *(_QWORD *)(v267 + 8) = v262;
                      *PHICopyInsertPoint = *PHICopyInsertPoint & 7 | v262;
                      v362 = 0;
                      v363 = 0;
                      v364[0] = 0;
                      LODWORD(v361) = 0x1000000;
                      HIDWORD(v361) = (_DWORD)v258;
                      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v262, v261, (const llvm::MachineOperand *)&v361);
                      if (v347)
                        llvm::MetadataTracking::untrack((uint64_t)&v347, v347);
                      v4 = v338;
                      v268 = sub_1C4850BC8(*(_QWORD *)(*(_QWORD *)(v338 + 248) + 288), v262, 0);
                      v269 = *v163;
                      if (*v163)
                      {
                        v270 = (_DWORD *)(v268 & 0xFFFFFFFFFFFFFFF8 | 4);
                        do
                        {
                          v271 = sub_1C484358C(v159, 16, 3);
                          v272 = *(unsigned int *)(v269 + 72);
                          *(_DWORD *)v271 = v272;
                          *(_QWORD *)(v271 + 8) = v270;
                          if (v272 >= *(unsigned int *)(v269 + 76))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod(v269 + 64, v269 + 80, v272 + 1, 8);
                            v272 = *(unsigned int *)(v269 + 72);
                          }
                          *(_QWORD *)(*(_QWORD *)(v269 + 64) + 8 * v272) = v271;
                          ++*(_DWORD *)(v269 + 72);
                          v368 = v270;
                          v369 = v238;
                          v370[0] = v271;
                          llvm::LiveRange::addSegment(v269, (uint64_t)&v368);
                          v269 = *(_QWORD *)(v269 + 104);
                        }
                        while (v269);
                      }
LABEL_385:
                      ++v236;
                    }
                    v243 = v241 & 0xFFFFFFFFFFFFFFF8;
                    v244 = (v241 >> 1) & 3;
                    while (2)
                    {
                      v245 = *(_DWORD *)(v242 + 8);
                      v246 = *(_QWORD **)v242;
                      if (v245)
                      {
                        v247 = v246[3 * v245 - 2];
                        v248 = *(_DWORD *)(v243 + 24) | v244;
                        v249 = (v247 >> 1) & 3 | *(_DWORD *)((v247 & 0xFFFFFFFFFFFFFFF8) + 24);
                        v250 = *(_QWORD **)v242;
                        v251 = *(unsigned int *)(v242 + 8);
                        if (v248 < v249)
                        {
                          do
                          {
                            v252 = v251 >> 1;
                            v253 = v250[3 * (v251 >> 1) + 1];
                            LODWORD(v253) = (v253 >> 1) & 3 | *(_DWORD *)((v253 & 0xFFFFFFFFFFFFFFF8)
                                                                                      + 24);
                            v251 -= (v251 >> 1) + 1;
                            v254 = v248 >= v253;
                            if (v248 >= v253)
                              v255 = v252 + 1;
                            else
                              v255 = 0;
                            v250 += 3 * v255;
                            if (!v254)
                              v251 = v252;
                          }
                          while (v251);
                          goto LABEL_364;
                        }
                      }
                      else
                      {
                        v245 = 0;
                      }
                      v250 = &v246[3 * v245];
LABEL_364:
                      if (v250 != &v246[3 * v245]
                        && ((*v250 >> 1) & 3 | *(_DWORD *)((*v250 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v243 + 24) | v244))
                      {
                        goto LABEL_385;
                      }
                      v242 = *(_QWORD *)(v242 + 104);
                      if (!v242)
                        goto LABEL_367;
                      continue;
                    }
                  }
LABEL_231:
                  v164 = *(_QWORD *)(v4 + 256);
                  if ((v161 & 0x80000000) != 0)
                    v165 = (int **)(*(_QWORD *)(v164 + 24) + 16 * (v161 & 0x7FFFFFFF) + 8);
                  else
                    v165 = (int **)(*(_QWORD *)(v164 + 272) + 8 * (_QWORD)v161);
                  v7 = v334;
                  v166 = *v165;
                  if (v166)
                  {
                    while (1)
                    {
                      v167 = *v166;
                      if ((*v166 & 0x80000000) == 0)
                        break;
                      v166 = (int *)*((_QWORD *)v166 + 3);
                      if (!v166)
                        goto LABEL_237;
                    }
LABEL_241:
                    if ((v167 & 0x1000000) != 0 && (v167 & 0xFFF00) != 0)
                    {
                      if ((v167 & 0x10000000) == 0)
                      {
                        v168 = *((_QWORD *)v166 + 1);
                        v169 = *(_WORD *)(v168 + 44);
                        v170 = v168;
                        if ((v169 & 4) != 0)
                        {
                          do
                            v170 = *(_QWORD *)v170 & 0xFFFFFFFFFFFFFFF8;
                          while ((*(_WORD *)(v170 + 44) & 4) != 0);
                        }
                        if ((v169 & 8) != 0)
                        {
                          do
                            v168 = *(_QWORD *)(v168 + 8);
                          while ((*(_WORD *)(v168 + 44) & 8) != 0);
                        }
                        v171 = *(_QWORD *)(v168 + 8);
                        if (v170 != v171)
                        {
                          do
                          {
                            v172 = **(unsigned __int16 **)(v170 + 16);
                            v28 = v172 > 0x17;
                            v173 = (1 << v172) & 0x83E000;
                            if (v28 || v173 == 0)
                              goto LABEL_253;
                            v170 = *(_QWORD *)(v170 + 8);
                          }
                          while (v170 != v171);
                          v170 = v171;
                        }
LABEL_253:
                        v175 = *(_QWORD *)(*(_QWORD *)(v4 + 248) + 288);
                        v176 = *(_QWORD *)(v175 + 368);
                        v177 = *(unsigned int *)(v175 + 384);
                        if ((_DWORD)v177)
                        {
                          LODWORD(v178) = ((v170 >> 4) ^ (v170 >> 9)) & (v177 - 1);
                          v179 = (uint64_t *)(v176 + 16 * v178);
                          v180 = *v179;
                          if (v170 != *v179)
                          {
                            v181 = 1;
                            do
                            {
                              if (v180 == -4096)
                                goto LABEL_259;
                              v182 = v178 + v181++;
                              v178 = v182 & (v177 - 1);
                              v180 = *(_QWORD *)(v176 + 16 * v178);
                            }
                            while (v170 != v180);
                            v179 = (uint64_t *)(v176 + 16 * v178);
                          }
                        }
                        else
                        {
LABEL_259:
                          v179 = (uint64_t *)(v176 + 16 * v177);
                        }
                        v183 = *v163;
                        if (*v163)
                        {
                          v184 = v179[1];
                          v185 = v184 & 0xFFFFFFFFFFFFFFF8;
                          v186 = (v184 >> 1) & 3;
                          while (1)
                          {
                            v187 = *(_DWORD *)(v183 + 8);
                            v188 = *(_QWORD **)v183;
                            if (!v187)
                              break;
                            v189 = v188[3 * v187 - 2];
                            v190 = *(_DWORD *)(v185 + 24) | v186;
                            v191 = (v189 >> 1) & 3 | *(_DWORD *)((v189 & 0xFFFFFFFFFFFFFFF8) + 24);
                            v192 = *(_QWORD **)v183;
                            v193 = *(unsigned int *)(v183 + 8);
                            if (v190 >= v191)
                              goto LABEL_272;
                            do
                            {
                              v194 = v193 >> 1;
                              v195 = v192[3 * (v193 >> 1) + 1];
                              LODWORD(v195) = (v195 >> 1) & 3 | *(_DWORD *)((v195 & 0xFFFFFFFFFFFFFFF8)
                                                                                        + 24);
                              v193 -= (v193 >> 1) + 1;
                              v196 = v190 >= v195;
                              if (v190 >= v195)
                                v197 = v194 + 1;
                              else
                                v197 = 0;
                              v192 += 3 * v197;
                              if (!v196)
                                v193 = v194;
                            }
                            while (v193);
LABEL_273:
                            if (v192 != &v188[3 * v187]
                              && ((*v192 >> 1) & 3 | *(_DWORD *)((*v192 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v185 + 24) | v186))
                            {
                              goto LABEL_277;
                            }
                            v183 = *(_QWORD *)(v183 + 104);
                            if (!v183)
                              goto LABEL_276;
                          }
                          v187 = 0;
LABEL_272:
                          v192 = &v188[3 * v187];
                          goto LABEL_273;
                        }
LABEL_276:
                        v167 |= 0x10000000u;
                        *v166 = v167;
                      }
LABEL_277:
                      if ((~v167 & 0x5000000) == 0)
                        goto LABEL_311;
                      v198 = *((_QWORD *)v166 + 1);
                      v199 = *(_WORD *)(v198 + 44);
                      v200 = v198;
                      if ((v199 & 4) != 0)
                      {
                        do
                          v200 = *(_QWORD *)v200 & 0xFFFFFFFFFFFFFFF8;
                        while ((*(_WORD *)(v200 + 44) & 4) != 0);
                      }
                      if ((v199 & 8) != 0)
                      {
                        do
                          v198 = *(_QWORD *)(v198 + 8);
                        while ((*(_WORD *)(v198 + 44) & 8) != 0);
                      }
                      v201 = *(_QWORD *)(v198 + 8);
                      if (v200 != v201)
                      {
                        do
                        {
                          v202 = **(unsigned __int16 **)(v200 + 16);
                          v28 = v202 > 0x17;
                          v203 = (1 << v202) & 0x83E000;
                          if (v28 || v203 == 0)
                            goto LABEL_287;
                          v200 = *(_QWORD *)(v200 + 8);
                        }
                        while (v200 != v201);
                        v200 = v201;
                      }
LABEL_287:
                      v205 = *(_QWORD *)(*(_QWORD *)(v4 + 248) + 288);
                      v206 = *(_QWORD *)(v205 + 368);
                      v207 = *(unsigned int *)(v205 + 384);
                      if ((_DWORD)v207)
                      {
                        LODWORD(v208) = ((v200 >> 4) ^ (v200 >> 9)) & (v207 - 1);
                        v209 = (uint64_t *)(v206 + 16 * v208);
                        v210 = *v209;
                        if (v200 != *v209)
                        {
                          v211 = 1;
                          do
                          {
                            if (v210 == -4096)
                              goto LABEL_293;
                            v212 = v208 + v211++;
                            v208 = v212 & (v207 - 1);
                            v210 = *(_QWORD *)(v206 + 16 * v208);
                          }
                          while (v200 != v210);
                          v209 = (uint64_t *)(v206 + 16 * v208);
                        }
                      }
                      else
                      {
LABEL_293:
                        v209 = (uint64_t *)(v206 + 16 * v207);
                      }
                      v213 = *v163;
                      if (!*v163)
                      {
LABEL_310:
                        *v166 = v167 | 0x4000000;
                        goto LABEL_311;
                      }
                      v214 = v209[1] & 0xFFFFFFFFFFFFFFF8;
                      while (2)
                      {
                        v215 = *(_DWORD *)(v213 + 8);
                        v216 = *(_QWORD **)v213;
                        if (v215)
                        {
                          v217 = v216[3 * v215 - 2];
                          v218 = *(_DWORD *)(v214 + 24) | 3;
                          v219 = (v217 >> 1) & 3 | *(_DWORD *)((v217 & 0xFFFFFFFFFFFFFFF8) + 24);
                          v220 = *(_QWORD **)v213;
                          v221 = *(unsigned int *)(v213 + 8);
                          if (v218 < v219)
                          {
                            do
                            {
                              v222 = v221 >> 1;
                              v223 = v220[3 * (v221 >> 1) + 1];
                              LODWORD(v223) = (v223 >> 1) & 3 | *(_DWORD *)((v223 & 0xFFFFFFFFFFFFFFF8)
                                                                                        + 24);
                              v221 -= (v221 >> 1) + 1;
                              v224 = v218 >= v223;
                              if (v218 >= v223)
                                v225 = v222 + 1;
                              else
                                v225 = 0;
                              v220 += 3 * v225;
                              if (!v224)
                                v221 = v222;
                            }
                            while (v221);
LABEL_307:
                            if (v220 != &v216[3 * v215]
                              && ((*v220 >> 1) & 3 | *(_DWORD *)((*v220 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v214 + 24) | 3u))
                            {
                              goto LABEL_311;
                            }
                            v213 = *(_QWORD *)(v213 + 104);
                            if (!v213)
                              goto LABEL_310;
                            continue;
                          }
                        }
                        else
                        {
                          v215 = 0;
                        }
                        break;
                      }
                      v220 = &v216[3 * v215];
                      goto LABEL_307;
                    }
LABEL_311:
                    while (1)
                    {
                      v166 = (int *)*((_QWORD *)v166 + 3);
                      if (!v166)
                        break;
                      v167 = *v166;
                      if ((*v166 & 0x80000000) == 0)
                        goto LABEL_241;
                    }
                  }
LABEL_237:
                  if (!v331)
                  {
                    *((_DWORD *)v332 + 18) = 0;
                    *((_DWORD *)v332 + 2) = 0;
                  }
                  llvm::LiveIntervals::constructMainRangeFromSubranges(*(llvm::LiveIntervals **)(v4 + 248), v332);
                  llvm::LiveIntervals::shrinkToUses(*(_QWORD **)(v4 + 248), (uint64_t)v332, 0);
                  v157 = v331 + 1;
                  if (v331 + 1 == v329)
                    goto LABEL_401;
                  continue;
                }
              }
            }
            else
            {
              LODWORD(v310) = 0;
            }
            break;
          }
          v315 = &v311[3 * v310];
          goto LABEL_461;
        }
      }
    }
  }
  LOBYTE(v330) = 0;
  return v330 & 1;
}

void llvm::stableHashValue(llvm *this, const llvm::MachineOperand *a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1C5262A38@<X0>(unsigned int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  int v62;

  v53 = 0xCBF29CE484222325;
  v54 = a1;
  v55 = (a1 >> 8) & 0xFFF;
  v56 = *(int *)(v52 + 16);
  v57 = 8;
  v58 = v54;
  do
  {
    v59 = v53 ^ v58;
    v58 = 0;
    v53 = 0x100000001B3 * v59;
    --v57;
  }
  while (v57);
  if ((_DWORD)v54)
    v60 = v55;
  else
    v60 = 0;
  v61 = 8;
  do
  {
    v53 = 0x100000001B3 * (v60 ^ (unint64_t)v53);
    v60 >>= 8;
    --v61;
  }
  while (v61);
  v62 = 8;
  do
  {
    v53 = 0x100000001B3 * (v56 ^ (unint64_t)v53);
    v56 >>= 8;
    --v62;
  }
  while (v62);
  return v53;
}

uint64_t llvm::stableHashValue(llvm *this, const llvm::MachineInstr *a2, BOOL a3, int a4)
{
  char v5;
  unint64_t v7;
  char *v8;
  int v9;
  int *v10;
  int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  llvm *v20;
  unsigned int *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  int v57;
  void *v59;
  uint64_t v60;
  _QWORD v61[18];

  v5 = (char)a2;
  v61[16] = *MEMORY[0x1E0C80C00];
  v59 = v61;
  v60 = 0x1000000000;
  v8 = (char *)this + 48;
  v7 = *((_QWORD *)this + 6);
  v9 = *((_DWORD *)this + 10);
  if (v7 < 8)
  {
LABEL_8:
    v12 = 0;
    goto LABEL_10;
  }
  if ((v7 & 7) != 0)
  {
    v10 = (int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    if ((*((_QWORD *)this + 6) & 7) == 3 && v10 != 0)
    {
      v12 = *v10;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  *(_QWORD *)v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  v12 = 1;
LABEL_10:
  v13 = (v9 + v12 + 2);
  if (v13 <= 0x10)
  {
    v14 = 0;
    v15 = **((unsigned __int16 **)this + 2);
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, (uint64_t)v61, v13, 8);
    v14 = v60;
    v15 = **((unsigned __int16 **)this + 2);
    if (v60 >= HIDWORD(v60))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, (uint64_t)v61, v60 + 1, 8);
      v14 = v60;
    }
  }
  *((_QWORD *)v59 + v14) = v15;
  v16 = (v60 + 1);
  LODWORD(v60) = v16;
  v17 = *((unsigned __int16 *)this + 22);
  if (v16 >= HIDWORD(v60))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, (uint64_t)v61, v16 + 1, 8);
    LODWORD(v16) = v60;
  }
  *((_QWORD *)v59 + v16) = v17;
  v18 = v60 + 1;
  LODWORD(v60) = v60 + 1;
  v19 = *((unsigned int *)this + 10);
  if ((_DWORD)v19)
  {
    v20 = (llvm *)*((_QWORD *)this + 4);
    v21 = (unsigned int *)((char *)v20 + 32 * v19);
    do
    {
      v22 = *(unsigned int *)v20;
      if ((v5 & 1) != 0 || (v22 & 0x10000FF) != 0x1000000 || (*((_DWORD *)v20 + 1) & 0x80000000) == 0)
      {
        if (*(_DWORD *)v20 == 6)
        {
          v23 = (v22 >> 8) & 0xFFF;
          v24 = *((int *)v20 + 4);
          v25 = 0x6AD26A20123BA583;
          v26 = 8;
          do
          {
            v25 = 0x100000001B3 * (v23 ^ (unint64_t)v25);
            v23 >>= 8;
            --v26;
          }
          while (v26);
          v27 = 8;
          do
          {
            v25 = 0x100000001B3 * (v24 ^ (unint64_t)v25);
            v24 >>= 8;
            --v27;
          }
          while (v27);
        }
        else
        {
          llvm::stableHashValue(v20, a2);
          if (!v28)
          {
            v33 = 0;
            v34 = v59;
            goto LABEL_71;
          }
          v25 = v28;
          v18 = v60;
        }
        if (v18 >= HIDWORD(v60))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, (uint64_t)v61, v18 + 1, 8);
          v18 = v60;
        }
        *((_QWORD *)v59 + v18) = v25;
        v18 = v60 + 1;
        LODWORD(v60) = v60 + 1;
      }
      v20 = (llvm *)((char *)v20 + 32);
    }
    while (v20 != (llvm *)v21);
  }
  v29 = *(_QWORD *)v8;
  if (*(_QWORD *)v8 >= 8uLL)
  {
    if ((v29 & 7) != 0)
    {
      if ((*(_QWORD *)v8 & 7) != 3)
        goto LABEL_66;
      v30 = (int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      if ((v29 & 0xFFFFFFFFFFFFFFF8) == 0)
        goto LABEL_66;
      v32 = *v30;
      v8 = (char *)(v30 + 2);
      v31 = v32;
      if (!v32)
        goto LABEL_66;
    }
    else
    {
      *(_QWORD *)v8 = v29 & 0xFFFFFFFFFFFFFFF8;
      v31 = 1;
    }
    if (a4)
    {
      v35 = 8 * v31;
      do
      {
        v36 = *(_QWORD *)v8;
        if ((*(_QWORD *)(*(_QWORD *)v8 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
        {
          v38 = sub_1C4825F50((unint64_t *)(*(_QWORD *)v8 + 24));
          if ((_DWORD)v37 == 1)
          v39 = (unint64_t)(v38 + 7) >> 3;
          v18 = v60;
        }
        else
        {
          LODWORD(v39) = -1;
        }
        if (v18 >= HIDWORD(v60))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, (uint64_t)v61, v18 + 1, 8);
          v18 = v60;
        }
        *((_QWORD *)v59 + v18) = v39;
        v40 = (v60 + 1);
        LODWORD(v60) = v40;
        v41 = *(unsigned __int16 *)(v36 + 32);
        if (v40 >= HIDWORD(v60))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, (uint64_t)v61, v40 + 1, 8);
          LODWORD(v40) = v60;
        }
        *((_QWORD *)v59 + v40) = v41;
        v42 = (v60 + 1);
        LODWORD(v60) = v42;
        v43 = *(unsigned int *)(v36 + 8);
        if (v42 >= HIDWORD(v60))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, (uint64_t)v61, v42 + 1, 8);
          LODWORD(v42) = v60;
        }
        *((_QWORD *)v59 + v42) = v43;
        v44 = (v60 + 1);
        LODWORD(v60) = v44;
        v45 = *(_BYTE *)(v36 + 37);
        if (v44 >= HIDWORD(v60))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, (uint64_t)v61, v44 + 1, 8);
          LODWORD(v44) = v60;
        }
        *((_QWORD *)v59 + v44) = v45 & 0xF;
        v46 = (v60 + 1);
        LODWORD(v60) = v46;
        v47 = *(unsigned int *)(v36 + 16);
        if (v46 >= HIDWORD(v60))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, (uint64_t)v61, v46 + 1, 8);
          LODWORD(v46) = v60;
        }
        *((_QWORD *)v59 + v46) = v47;
        v48 = (v60 + 1);
        LODWORD(v60) = v48;
        v49 = *(unsigned __int8 *)(v36 + 36);
        if (v48 >= HIDWORD(v60))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, (uint64_t)v61, v48 + 1, 8);
          LODWORD(v48) = v60;
        }
        *((_QWORD *)v59 + v48) = v49;
        v50 = (v60 + 1);
        LODWORD(v60) = v50;
        v51 = *(_BYTE *)(v36 + 34);
        if (v50 >= HIDWORD(v60))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, (uint64_t)v61, v50 + 1, 8);
          LODWORD(v50) = v60;
        }
        *((_QWORD *)v59 + v50) = (1 << v51);
        v52 = (v60 + 1);
        LODWORD(v60) = v52;
        v53 = *(unsigned __int16 *)(v36 + 36);
        if (v52 >= HIDWORD(v60))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, (uint64_t)v61, v52 + 1, 8);
          LODWORD(v52) = v60;
        }
        *((_QWORD *)v59 + v52) = v53 >> 12;
        v18 = v60 + 1;
        LODWORD(v60) = v60 + 1;
        v8 += 8;
        v35 -= 8;
      }
      while (v35);
    }
  }
LABEL_66:
  v33 = 0xCBF29CE484222325;
  v34 = v59;
  if (v18)
  {
    v54 = (char *)v59 + 8 * v18;
    v55 = (char *)v59;
    do
    {
      v56 = *(_QWORD *)v55;
      v57 = 8;
      do
      {
        v33 = 0x100000001B3 * (v56 ^ (unint64_t)v33);
        v56 >>= 8;
        --v57;
      }
      while (v57);
      v55 += 8;
    }
    while (v55 != v54);
  }
LABEL_71:
  if (v34 != v61)
    free(v34);
  return v33;
}

uint64_t llvm::stableHashValue(llvm *this, const llvm::MachineBasicBlock *a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  char *v9;
  unint64_t v10;
  int v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x1E0C80C00];
  v2 = 0xCBF29CE484222325;
  v13 = v15;
  v14 = 0x600000000;
  v3 = (char *)this + 48;
  v4 = *((_QWORD *)this + 7);
  if ((llvm *)v4 != (llvm *)((char *)this + 48))
  {
    do
    {
      v5 = llvm::stableHashValue((llvm *)v4, 0, 0, 0);
      v6 = v14;
      if (v14 >= (unint64_t)HIDWORD(v14))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, (uint64_t)v15, v14 + 1, 8);
        v6 = v14;
      }
      *((_QWORD *)v13 + v6) = v5;
      v7 = v14 + 1;
      LODWORD(v14) = v14 + 1;
      if ((*(_BYTE *)v4 & 4) == 0)
      {
        while ((*(_WORD *)(v4 + 44) & 8) != 0)
          v4 = *(_QWORD *)(v4 + 8);
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while ((char *)v4 != v3);
    if (v7)
    {
      v8 = (char *)v13 + 8 * v7;
      v9 = (char *)v13;
      do
      {
        v10 = *(_QWORD *)v9;
        v11 = 8;
        do
        {
          v2 = 0x100000001B3 * (v10 ^ (unint64_t)v2);
          v10 >>= 8;
          --v11;
        }
        while (v11);
        v9 += 8;
      }
      while (v9 != v8);
    }
    if (v13 != v15)
      free(v13);
  }
  return v2;
}

uint64_t llvm::stableHashValue(llvm *this, const llvm::MachineFunction *a2)
{
  uint64_t v2;
  llvm *v3;
  llvm *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  char *v9;
  unint64_t v10;
  int v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x1E0C80C00];
  v2 = 0xCBF29CE484222325;
  v13 = v15;
  v14 = 0x600000000;
  v3 = (llvm *)((char *)this + 320);
  v4 = (llvm *)*((_QWORD *)this + 41);
  if (v4 != (llvm *)((char *)this + 320))
  {
    do
    {
      v5 = llvm::stableHashValue(v4, a2);
      v6 = v14;
      if (v14 >= (unint64_t)HIDWORD(v14))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, (uint64_t)v15, v14 + 1, 8);
        v6 = v14;
      }
      *((_QWORD *)v13 + v6) = v5;
      v7 = v14 + 1;
      LODWORD(v14) = v14 + 1;
      v4 = (llvm *)*((_QWORD *)v4 + 1);
    }
    while (v4 != v3);
    if (v7)
    {
      v8 = (char *)v13 + 8 * v7;
      v9 = (char *)v13;
      do
      {
        v10 = *(_QWORD *)v9;
        v11 = 8;
        do
        {
          v2 = 0x100000001B3 * (v10 ^ (unint64_t)v2);
          v10 >>= 8;
          --v11;
        }
        while (v11);
        v9 += 8;
      }
      while (v9 != v8);
    }
    if (v13 != v15)
      free(v13);
  }
  return v2;
}

BOOL llvm::VRegRenamer::doVRegRenaming(_QWORD **a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _BOOL8 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;

  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
    return 0;
  LOBYTE(v5) = 0;
  do
  {
    v6 = *a1;
    v7 = *((unsigned int *)v3 + 7);
    if (v5)
    {
      v5 = 1;
    }
    else
    {
      if ((v7 & 0x80000000) != 0)
        v8 = (_QWORD *)(v6[3] + 16 * (v7 & 0x7FFFFFFF) + 8);
      else
        v8 = (_QWORD *)(v6[34] + 8 * v7);
      v5 = *v8 != 0;
    }
    v9 = *((_DWORD *)v3 + 8);
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v6 + 16) + 176))(*(_QWORD *)(*v6 + 16));
    if ((v7 & 0x80000000) != 0)
      v11 = (uint64_t *)(v6[3] + 16 * (v7 & 0x7FFFFFFF) + 8);
    else
      v11 = (uint64_t *)(v6[34] + 8 * v7);
    v12 = *v11;
    if (*v11)
    {
      do
      {
        v13 = *(_QWORD *)(v12 + 24);
        if (v9 - 1 <= 0x3FFFFFFE)
          llvm::MachineOperand::substPhysReg((unsigned int *)v12, v9, v10);
        else
          llvm::MachineOperand::setReg(v12, v9);
        v12 = v13;
      }
      while (v13);
    }
    v14 = (_QWORD *)v3[1];
    if (v14)
    {
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        v15 = (_QWORD *)v3[2];
        v16 = *v15 == (_QWORD)v3;
        v3 = v15;
      }
      while (!v16);
    }
    v3 = v15;
  }
  while (v15 != v2);
  return v5;
}

uint64_t llvm::VRegRenamer::getVRegRenameMap@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 v9;
  int v10;
  unsigned __int8 *v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  int v15;
  size_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  unsigned __int8 *v25;
  size_t v26;
  int v27;
  size_t v28;
  unsigned __int8 *v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  unsigned int v43;
  uint64_t j;
  _QWORD *v45;
  BOOL v46;
  uint64_t v47;
  unsigned __int8 *v48;
  size_t v49;
  int v50;
  size_t v51;
  unsigned __int8 *v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  unsigned int v66;
  uint64_t i;
  _QWORD *v68;
  BOOL v69;
  uint64_t v70;
  unsigned int v71;
  char v72;
  int v73;
  size_t v74;
  size_t v75;
  std::string *v76;
  unsigned __int8 *v77;
  std::string *v78;
  std::string::size_type size;
  std::string *v80;
  std::string::size_type v81;
  char *v82;
  unint64_t v83;
  int VirtualRegisterWithLowerName;
  uint64_t v86;
  size_t v89;
  size_t v90;
  unsigned __int8 *v91;
  int v92;
  unsigned __int8 *v93;
  uint64_t v94;
  unsigned __int8 *__s1;
  unsigned __int8 *__s1a;
  void *__p[2];
  uint64_t v98;
  unsigned int v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  std::string v103;
  std::string v104;

  v100 = 0;
  v101 = 0;
  v102 = 0x1000000000;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  v3 = *a2;
  v86 = a2[1];
  if (*a2 != v86)
  {
    v4 = 0;
    while (1)
    {
      v5 = *(_DWORD *)v3;
      v99 = *(_DWORD *)v3;
      v94 = v3;
      v8 = *(unsigned __int8 **)(v3 + 8);
      v7 = (unsigned __int8 *)(v3 + 8);
      v6 = v8;
      v9 = v7[23];
      v10 = (char)v9;
      v11 = (v9 & 0x80u) == 0 ? v7 : v6;
      __s1 = v11;
      v93 = v7;
      v12 = v9 & 0x7F;
      v13 = v10 >= 0 ? v12 : *((_QWORD *)v7 + 1);
      v14 = v101;
      v92 = v5;
      if (!(_DWORD)v101)
        break;
      v90 = *((_QWORD *)v7 + 1);
      v91 = v6;
      v89 = v12;
      v15 = 0;
      if (v13)
      {
        v16 = v13;
        v17 = v11;
        do
        {
          v18 = *v17++;
          v15 = 33 * v15 + v18;
          --v16;
        }
        while (v16);
      }
      v19 = HIDWORD(v102);
      v20 = 1;
      v21 = v15;
      while (1)
      {
        v22 = v21 & (v14 - 1);
        v23 = (_QWORD *)v4[v22];
        if (v23 != (_QWORD *)-8)
        {
          if (!v23)
            goto LABEL_23;
          if (*((_DWORD *)&v4[v14 + 1] + v22) == v15 && v13 == *v23 && (!v13 || !memcmp(__s1, (char *)v23 + v19, v13)))
            break;
        }
        v21 = v20 + v22;
        ++v20;
      }
      if ((_DWORD)v22 == -1)
        goto LABEL_23;
      v24 = v90;
      v25 = v91;
      v26 = v89;
      if ((int)v22 == v14)
        goto LABEL_23;
LABEL_55:
      v48 = v93;
      if ((v10 & 0x80u) != 0)
        v48 = v25;
      __s1a = v48;
      if ((v10 & 0x80u) == 0)
        v49 = v26;
      else
        v49 = v24;
      if (!(_DWORD)v14)
      {
        HIDWORD(v101) = 0;
        LODWORD(v102) = 0;
        v68 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
        if (!v68)
LABEL_126:
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        v4 = v68;
        v68[16] = 2;
        v100 = v68;
        LODWORD(v14) = 16;
        LODWORD(v101) = 16;
      }
      v50 = 0;
      if (v49)
      {
        v51 = v49;
        v52 = __s1a;
        do
        {
          v53 = *v52++;
          v50 = 33 * v50 + v53;
          --v51;
        }
        while (v51);
      }
      v54 = v14 - 1;
      v55 = (uint64_t)&v4[v14 + 1];
      v56 = HIDWORD(v102);
      v57 = -1;
      v58 = 1;
      v59 = v50;
      while (1)
      {
        v60 = v59 & v54;
        v61 = v4[v60];
        if (!v61)
          break;
        if (v61 == -8)
        {
          if (v57 == -1)
            v57 = v59 & v54;
        }
        else if (*(_DWORD *)(v55 + 4 * v60) == v50
               && v49 == *(_QWORD *)v61
               && (!v49 || !memcmp(__s1a, (const void *)(v61 + v56), v49)))
        {
          goto LABEL_79;
        }
        v59 = v58 + v60;
        ++v58;
      }
      v62 = v57;
      if (v57 == -1)
      {
        v62 = v60;
        v60 = v60;
      }
      else
      {
        v60 = v57;
      }
      *(_DWORD *)(v55 + 4 * v62) = v50;
      v61 = v4[v60];
LABEL_79:
      if (!v61)
        goto LABEL_80;
      if (v61 == -8)
      {
        LODWORD(v102) = v102 - 1;
LABEL_80:
        v63 = (char *)operator new(v49 + 17, (std::align_val_t)8uLL);
        v64 = v63;
        v65 = v63 + 16;
        if (v49)
          memcpy(v63 + 16, __s1a, v49);
        v65[v49] = 0;
        *(_QWORD *)v64 = v49;
        *((_DWORD *)v64 + 2) = 0;
        v4[v60] = v64;
        ++HIDWORD(v101);
        v66 = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v100, v60);
        v4 = v100;
        for (i = v66; ; ++i)
        {
          v61 = v100[i];
          v69 = !v61 || v61 == -8;
          v70 = v94;
          if (!v69)
            break;
        }
        goto LABEL_90;
      }
      v70 = v94;
LABEL_90:
      v71 = *(_DWORD *)(v61 + 8) + 1;
      *(_DWORD *)(v61 + 8) = v71;
      v72 = *(_BYTE *)(v70 + 31);
      v73 = v72;
      v74 = v72 & 0x7F;
      if (v73 >= 0)
        v75 = v74;
      else
        v75 = *(_QWORD *)(v70 + 16);
      sub_1C484371C((uint64_t)&v104, v75 + 2);
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v76 = &v104;
      else
        v76 = (std::string *)v104.__r_.__value_.__r.__words[0];
      if (v75)
      {
        if (*(char *)(v70 + 31) >= 0)
          v77 = v93;
        else
          v77 = *(unsigned __int8 **)(v70 + 8);
        memmove(v76, v77, v75);
      }
      strcpy((char *)v76 + v75, "__");
      std::to_string(&v103, v71);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v78 = &v103;
      else
        v78 = (std::string *)v103.__r_.__value_.__r.__words[0];
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v103.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v103.__r_.__value_.__l.__size_;
      v80 = std::string::append(&v104, (const std::string::value_type *)v78, size);
      v81 = v80->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      v98 = v81;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v103.__r_.__value_.__l.__data_);
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v104.__r_.__value_.__l.__data_);
      if (v98 >= 0)
        v82 = (char *)__p;
      else
        v82 = (char *)__p[0];
      if (v98 >= 0)
        v83 = HIBYTE(v98) & 0x7F;
      else
        v83 = (unint64_t)__p[1];
      VirtualRegisterWithLowerName = llvm::VRegRenamer::createVirtualRegisterWithLowerName(a1, v92, v82, v83);
      v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
      *((_DWORD *)sub_1C52451B0((uint64_t **)a3, &v99, (uint64_t)&std::piecewise_construct, &v104) + 8) = VirtualRegisterWithLowerName;
      if (SHIBYTE(v98) < 0)
        operator delete(__p[0]);
      v3 = v70 + 32;
      if (v3 == v86)
        return sub_1C51838C8((uint64_t)&v100);
    }
    v101 = 0;
    LODWORD(v102) = 0;
    v45 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v45)
      goto LABEL_126;
    v4 = v45;
    v45[16] = 2;
    v100 = v45;
    LODWORD(v14) = 16;
    LODWORD(v101) = 16;
LABEL_23:
    v27 = 0;
    if (v13)
    {
      v28 = v13;
      v29 = __s1;
      do
      {
        v30 = *v29++;
        v27 = 33 * v27 + v30;
        --v28;
      }
      while (v28);
    }
    v31 = v14 - 1;
    v32 = (uint64_t)&v4[v14 + 1];
    v33 = HIDWORD(v102);
    v34 = -1;
    v35 = 1;
    v36 = v27;
    while (1)
    {
      v37 = v36 & v31;
      v38 = v4[v37];
      if (!v38)
        break;
      if (v38 == -8)
      {
        if (v34 == -1)
          v34 = v36 & v31;
      }
      else if (*(_DWORD *)(v32 + 4 * v37) == v27
             && v13 == *(_QWORD *)v38
             && (!v13 || !memcmp(__s1, (const void *)(v38 + v33), v13)))
      {
        goto LABEL_41;
      }
      v36 = v35 + v37;
      ++v35;
    }
    v39 = v34;
    if (v34 == -1)
    {
      v39 = v37;
      v37 = v37;
    }
    else
    {
      v37 = v34;
    }
    *(_DWORD *)(v32 + 4 * v39) = v27;
    v38 = v4[v37];
LABEL_41:
    if (v38)
    {
      if (v38 != -8)
      {
        v47 = v94;
LABEL_54:
        *(_DWORD *)(v38 + 8) = 0;
        LOBYTE(v10) = *(_BYTE *)(v47 + 31);
        v25 = *(unsigned __int8 **)(v47 + 8);
        v24 = *(_QWORD *)(v47 + 16);
        LODWORD(v14) = v101;
        v26 = v10 & 0x7F;
        goto LABEL_55;
      }
      LODWORD(v102) = v102 - 1;
    }
    v40 = (char *)operator new(v13 + 17, (std::align_val_t)8uLL);
    v41 = v40;
    v42 = v40 + 16;
    if (v13)
      memcpy(v40 + 16, __s1, v13);
    v42[v13] = 0;
    *(_QWORD *)v41 = v13;
    *((_DWORD *)v41 + 2) = 0;
    v4[v37] = v41;
    ++HIDWORD(v101);
    v43 = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v100, v37);
    v4 = v100;
    for (j = v43; ; ++j)
    {
      v38 = v100[j];
      v46 = !v38 || v38 == -8;
      v47 = v94;
      if (!v46)
        break;
    }
    goto LABEL_54;
  }
  return sub_1C51838C8((uint64_t)&v100);
}

uint64_t llvm::VRegRenamer::createVirtualRegisterWithLowerName(uint64_t *a1, int a2, char *a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  size_t v11;
  uint64_t GenericVirtualRegister;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *p_p;
  size_t v16;
  void *__p;
  size_t v19;
  char v20;

  sub_1C5E3DEA4(&__p, a3, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &a3[a4], (uint64_t)sub_1C5E3C6A8, a4);
  v6 = *a1;
  v7 = a2 & 0x7FFFFFFF;
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16 * v7);
  if ((v8 & 4) != 0 || (v9 = v8 & 0xFFFFFFFFFFFFFFF8, (v8 & 0xFFFFFFFFFFFFFFF8) == 0))
  {
    if (a2 < 0 && v7 < *(_DWORD *)(v6 + 432))
      v14 = *(_QWORD *)(*(_QWORD *)(v6 + 424) + 8 * v7);
    else
      v14 = 0;
    if (v20 >= 0)
      p_p = (unsigned __int8 *)&__p;
    else
      p_p = (unsigned __int8 *)__p;
    if (v20 >= 0)
      v16 = v20 & 0x7F;
    else
      v16 = v19;
    GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v6, v14, p_p, v16);
  }
  else
  {
    if (v20 >= 0)
      v10 = (unsigned __int8 *)&__p;
    else
      v10 = (unsigned __int8 *)__p;
    if (v20 >= 0)
      v11 = v20 & 0x7F;
    else
      v11 = v19;
    GenericVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v6, v10, v11);
    *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16 * (GenericVirtualRegister & 0x7FFFFFFF)) = v9;
    v13 = *(_QWORD *)(v6 + 8);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  }
  if (v20 < 0)
    operator delete(__p);
  return GenericVirtualRegister;
}

void llvm::VRegRenamer::getInstructionOpcodeHash(llvm::VRegRenamer *this@<X0>, llvm::MachineInstr *a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  const char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  std::string __p;
  uint64_t v40;
  std::string __str;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (byte_1ED7FF3D8)
  {
    v4 = llvm::stableHashValue(a2, (const llvm::MachineInstr *)1, 1, 1);
    std::to_string(&__str, v4);
    std::string::basic_string(a3, &__str, 0, 5uLL, (std::allocator<char> *)&__p);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    return;
  }
  v5 = (unsigned __int16 *)*((_QWORD *)a2 + 2);
  v6 = *v5;
  v7 = *((unsigned __int16 *)a2 + 22);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__r.__words[2];
  __str.__r_.__value_.__r.__words[2] = v6 | (v7 << 32);
  __str.__r_.__value_.__l.__size_ = 0x1000000002;
  v8 = *((_QWORD *)a2 + 4);
  v9 = *((unsigned __int8 *)v5 + 4);
  v10 = *((_DWORD *)a2 + 10);
  if ((v5[4] & 2) != 0)
  {
    if (v10 == v9)
    {
      v12 = 2;
      goto LABEL_9;
    }
    v11 = *((unsigned __int8 *)v5 + 4);
    do
    {
      v38 = *(_DWORD *)(v8 + 32 * v9);
      if ((v38 & 0x10000FF) != 0x1000000)
        break;
      v11 += (v38 & 0x2000000) == 0;
      if (v10 - 1 == v9)
        break;
      ++v9;
    }
    while ((v38 & 0x2000000) == 0);
  }
  else
  {
    v11 = *((unsigned __int8 *)v5 + 4);
  }
  v12 = 2;
  if (v11 != v10)
    __asm { BR              X10 }
LABEL_9:
  v14 = (char *)a2 + 48;
  v13 = *((_QWORD *)a2 + 6);
  if (v13 >= 8)
  {
    if ((v13 & 7) == 0)
    {
      *((_QWORD *)a2 + 6) = v13 & 0xFFFFFFFFFFFFFFF8;
      v15 = (char *)a2 + 56;
      goto LABEL_12;
    }
    if ((*((_QWORD *)a2 + 6) & 7) == 3)
    {
      v34 = (int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      if ((v13 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v36 = *v34;
        v14 = (char *)(v34 + 2);
        v35 = v36;
        if ((_DWORD)v36)
        {
          v15 = &v14[8 * v35];
          do
          {
LABEL_12:
            v16 = *(_QWORD *)v14;
            if ((*(_QWORD *)(*(_QWORD *)v14 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
            {
              v18 = (unint64_t)(sub_1C4825F50((unint64_t *)(*(_QWORD *)v14 + 24)) + 7) >> 3;
              if ((_DWORD)v17 == 1)
            }
            else
            {
              LODWORD(v18) = -1;
            }
            v19 = LODWORD(__str.__r_.__value_.__r.__words[1]);
            if (LODWORD(__str.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(__str.__r_.__value_.__r.__words[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__str, (uint64_t)&__str.__r_.__value_.__r.__words[2], LODWORD(__str.__r_.__value_.__r.__words[1]) + 1, 4);
              v19 = LODWORD(__str.__r_.__value_.__r.__words[1]);
            }
            *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4 * v19) = v18;
            v20 = (LODWORD(__str.__r_.__value_.__r.__words[1]) + 1);
            LODWORD(__str.__r_.__value_.__r.__words[1]) = v20;
            v21 = *(unsigned __int16 *)(v16 + 32);
            if (v20 >= HIDWORD(__str.__r_.__value_.__r.__words[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__str, (uint64_t)&__str.__r_.__value_.__r.__words[2], v20 + 1, 4);
              LODWORD(v20) = __str.__r_.__value_.__r.__words[1];
            }
            *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4 * v20) = v21;
            v22 = (LODWORD(__str.__r_.__value_.__r.__words[1]) + 1);
            LODWORD(__str.__r_.__value_.__r.__words[1]) = v22;
            v23 = *(_DWORD *)(v16 + 8);
            if (v22 >= HIDWORD(__str.__r_.__value_.__r.__words[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__str, (uint64_t)&__str.__r_.__value_.__r.__words[2], v22 + 1, 4);
              LODWORD(v22) = __str.__r_.__value_.__r.__words[1];
            }
            *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4 * v22) = v23;
            v24 = (LODWORD(__str.__r_.__value_.__r.__words[1]) + 1);
            LODWORD(__str.__r_.__value_.__r.__words[1]) = v24;
            v25 = *(_BYTE *)(v16 + 37);
            if (v24 >= HIDWORD(__str.__r_.__value_.__r.__words[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__str, (uint64_t)&__str.__r_.__value_.__r.__words[2], v24 + 1, 4);
              LODWORD(v24) = __str.__r_.__value_.__r.__words[1];
            }
            *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4 * v24) = v25 & 0xF;
            v26 = (LODWORD(__str.__r_.__value_.__r.__words[1]) + 1);
            LODWORD(__str.__r_.__value_.__r.__words[1]) = v26;
            v27 = *(_DWORD *)(v16 + 16);
            if (v26 >= HIDWORD(__str.__r_.__value_.__r.__words[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__str, (uint64_t)&__str.__r_.__value_.__r.__words[2], v26 + 1, 4);
              LODWORD(v26) = __str.__r_.__value_.__r.__words[1];
            }
            *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4 * v26) = v27;
            v28 = (LODWORD(__str.__r_.__value_.__r.__words[1]) + 1);
            LODWORD(__str.__r_.__value_.__r.__words[1]) = v28;
            v29 = *(unsigned __int8 *)(v16 + 36);
            if (v28 >= HIDWORD(__str.__r_.__value_.__r.__words[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__str, (uint64_t)&__str.__r_.__value_.__r.__words[2], v28 + 1, 4);
              LODWORD(v28) = __str.__r_.__value_.__r.__words[1];
            }
            *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4 * v28) = v29;
            v30 = (LODWORD(__str.__r_.__value_.__r.__words[1]) + 1);
            LODWORD(__str.__r_.__value_.__r.__words[1]) = v30;
            v31 = *(_BYTE *)(v16 + 34);
            if (v30 >= HIDWORD(__str.__r_.__value_.__r.__words[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__str, (uint64_t)&__str.__r_.__value_.__r.__words[2], v30 + 1, 4);
              LODWORD(v30) = __str.__r_.__value_.__r.__words[1];
            }
            *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4 * v30) = 1 << v31;
            v32 = (LODWORD(__str.__r_.__value_.__r.__words[1]) + 1);
            LODWORD(__str.__r_.__value_.__r.__words[1]) = v32;
            v33 = *(unsigned __int16 *)(v16 + 36);
            if (v32 >= HIDWORD(__str.__r_.__value_.__r.__words[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__str, (uint64_t)&__str.__r_.__value_.__r.__words[2], v32 + 1, 4);
              LODWORD(v32) = __str.__r_.__value_.__r.__words[1];
            }
            *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4 * v32) = v33 >> 12;
            v12 = ++LODWORD(__str.__r_.__value_.__r.__words[1]);
            v14 += 8;
          }
          while (v14 != v15);
        }
      }
    }
  }
  v37 = sub_1C6193EA0(__str.__r_.__value_.__l.__data_, __str.__r_.__value_.__r.__words[0] + 4 * v12);
  std::to_string(&__p, v37);
  std::string::basic_string(a3, &__p, 0, 5uLL, (std::allocator<char> *)&v40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((std::string::size_type *)__str.__r_.__value_.__l.__data_ != &__str.__r_.__value_.__r.__words[2])
    free(__str.__r_.__value_.__l.__data_);
}

uint64_t llvm::VRegRenamer::createVirtualRegister(llvm::VRegRenamer *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  std::string *p_p;
  unint64_t size;
  uint64_t VirtualRegisterWithLowerName;
  std::string __p;

  v4 = *(_QWORD *)this;
  if ((a2 & 0x80000000) != 0)
    v5 = (uint64_t *)(*(_QWORD *)(v4 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v5 = (uint64_t *)(*(_QWORD *)(v4 + 272) + 8 * a2);
  v6 = *v5;
  if ((*(_BYTE *)(v6 + 3) & 1) == 0)
    v6 = *(_QWORD *)(v6 + 24);
  llvm::VRegRenamer::getInstructionOpcodeHash(this, *(llvm::MachineInstr **)(v6 + 8), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  VirtualRegisterWithLowerName = llvm::VRegRenamer::createVirtualRegisterWithLowerName((uint64_t *)this, a2, (char *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return VirtualRegisterWithLowerName;
}

BOOL llvm::VRegRenamer::renameInstsInMBB(llvm::VRegRenamer *this, llvm::MachineBasicBlock *a2)
{
  llvm::VRegRenamer *v3;
  std::string *v4;
  std::string::size_type v5;
  std::string *v6;
  std::string::size_type v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unsigned __int16 *v12;
  uint64_t v13;
  llvm::VRegRenamer *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void **v21;
  std::string::size_type v22;
  std::string *v23;
  void *v24;
  unint64_t size;
  int v26;
  void *v27;
  __int128 v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  void **v40;
  char *v41;
  void *v42;
  char *v43;
  _BOOL8 v44;
  char v45;
  void *v47;
  llvm::VRegRenamer *v48;
  _BYTE v49[7];
  std::string v50;
  uint64_t v51;
  std::string v52;
  void *__p[2];
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;

  v3 = this;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  std::to_string(&v52, *((_DWORD *)this + 2));
  v4 = std::string::insert(&v52, 0, "bb");
  v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v50, "_");
  v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v54 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  v8 = (char *)a2 + 48;
  v9 = *((_QWORD *)a2 + 7);
  if ((llvm::MachineBasicBlock *)v9 == (llvm::MachineBasicBlock *)((char *)a2 + 48))
  {
    v10 = 0;
    v43 = 0;
    goto LABEL_75;
  }
  v10 = 0;
  v11 = &v51;
  do
  {
    v12 = *(unsigned __int16 **)(v9 + 16);
    if (*v12 - 1 > 1 || (*(_BYTE *)(*(_QWORD *)(v9 + 32) + 48) & 0x10) == 0)
    {
      v13 = *((_QWORD *)v12 + 1);
      if ((*(_WORD *)(v9 + 44) & 0xC) != 0 && (*(_WORD *)(v9 + 44) & 4) == 0)
      {
        v15 = v3;
        v16 = v11;
        v17 = v9;
        if ((v13 & 0x100000) != 0)
          goto LABEL_29;
        while ((*(_WORD *)(v17 + 44) & 8) != 0)
        {
          v17 = *(_QWORD *)(v17 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v17 + 16) + 10) & 0x10) != 0)
            goto LABEL_29;
        }
        if ((v13 & 0x400) != 0)
        {
LABEL_29:
          v11 = v16;
          v3 = v15;
          goto LABEL_13;
        }
        v18 = v9;
        while (1)
        {
          v11 = v16;
          v3 = v15;
          if ((*(_WORD *)(v18 + 44) & 8) == 0)
            break;
          v18 = *(_QWORD *)(v18 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v18 + 16) + 9) & 4) != 0)
            goto LABEL_29;
        }
      }
      else if ((v13 & 0x100400) != 0)
      {
        goto LABEL_13;
      }
      if (*(_DWORD *)(v9 + 40))
      {
        v19 = *(_QWORD *)(v9 + 32);
        if (!*(_BYTE *)v19)
        {
          v20 = *(_DWORD *)(v19 + 4);
          if (v20 < 0)
          {
            llvm::VRegRenamer::getInstructionOpcodeHash(v3, (llvm::MachineInstr *)v9, &v52);
            if (v54 >= 0)
              v21 = __p;
            else
              v21 = (void **)__p[0];
            if (v54 >= 0)
              v22 = HIBYTE(v54) & 0x7F;
            else
              v22 = (std::string::size_type)__p[1];
            v23 = std::string::insert(&v52, 0, (const std::string::value_type *)v21, v22);
            v24 = (void *)v23->__r_.__value_.__r.__words[0];
            size = v23->__r_.__value_.__l.__size_;
            *(_DWORD *)v49 = v23->__r_.__value_.__r.__words[2];
            *(_DWORD *)&v49[3] = *(_DWORD *)((char *)&v23->__r_.__value_.__r.__words[2] + 3);
            v26 = SHIBYTE(v23->__r_.__value_.__r.__words[2]);
            v23->__r_.__value_.__r.__words[0] = 0;
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            LODWORD(v50.__r_.__value_.__l.__data_) = v20;
            if (v26 < 0)
            {
              v27 = v24;
              sub_1C47EBC30(&v50.__r_.__value_.__s.__data_[8], v24, size);
              v24 = v27;
            }
            else
            {
              v50.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
              v50.__r_.__value_.__r.__words[2] = size;
              *(_DWORD *)v11 = *(_DWORD *)v49;
              *(_DWORD *)((char *)v11 + 3) = *(_DWORD *)&v49[3];
              HIBYTE(v51) = v26;
            }
            if (v10 >= v57)
            {
              v47 = v24;
              v48 = v3;
              v29 = v11;
              v30 = (uint64_t)v55;
              v31 = (v10 - v55) >> 5;
              v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 59)
                abort();
              v33 = v57 - v55;
              if ((v57 - v55) >> 4 > v32)
                v32 = v33 >> 4;
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0)
                v34 = 0x7FFFFFFFFFFFFFFLL;
              else
                v34 = v32;
              if (v34)
              {
                if (v34 >> 59)
                  sub_1C4764EE4();
                v35 = (char *)operator new(32 * v34);
              }
              else
              {
                v35 = 0;
              }
              v36 = &v35[32 * v31];
              *(_DWORD *)v36 = v50.__r_.__value_.__l.__data_;
              *(_OWORD *)(v36 + 8) = *(_OWORD *)&v50.__r_.__value_.__r.__words[1];
              *((_QWORD *)v36 + 3) = v51;
              *(_OWORD *)&v50.__r_.__value_.__r.__words[1] = 0uLL;
              v51 = 0;
              if (v10 == (char *)v30)
              {
                v41 = v36 + 32;
                v55 = &v35[32 * v31];
                v56 = v36 + 32;
                v57 = &v35[32 * v34];
              }
              else
              {
                v37 = (uint64_t)&v35[32 * v31];
                do
                {
                  v38 = *((_DWORD *)v10 - 8);
                  v10 -= 32;
                  *(_DWORD *)(v37 - 32) = v38;
                  v37 -= 32;
                  v39 = *(_OWORD *)(v10 + 8);
                  *(_QWORD *)(v37 + 24) = *((_QWORD *)v10 + 3);
                  *(_OWORD *)(v37 + 8) = v39;
                  *((_QWORD *)v10 + 2) = 0;
                  *((_QWORD *)v10 + 3) = 0;
                  *((_QWORD *)v10 + 1) = 0;
                }
                while (v10 != (char *)v30);
                v10 = v55;
                v40 = (void **)v56;
                v41 = v36 + 32;
                v55 = (char *)v37;
                v56 = v36 + 32;
                v57 = &v35[32 * v34];
                while (v40 != (void **)v10)
                {
                  if (*((char *)v40 - 1) < 0)
                    operator delete(*(v40 - 3));
                  v40 -= 4;
                }
              }
              v11 = v29;
              if (v10)
                operator delete(v10);
              v10 = v41;
              v24 = v47;
              v3 = v48;
            }
            else
            {
              *(_DWORD *)v10 = v50.__r_.__value_.__l.__data_;
              v28 = *(_OWORD *)&v50.__r_.__value_.__r.__words[1];
              *((_QWORD *)v10 + 3) = v51;
              *(_OWORD *)(v10 + 8) = v28;
              v51 = 0;
              *(_OWORD *)&v50.__r_.__value_.__r.__words[1] = 0uLL;
              v10 += 32;
            }
            v56 = v10;
            if (SHIBYTE(v51) < 0)
            {
              v42 = v24;
              operator delete((void *)v50.__r_.__value_.__l.__size_);
              v24 = v42;
              if ((v26 & 0x80000000) == 0)
                goto LABEL_68;
            }
            else if ((v26 & 0x80000000) == 0)
            {
              goto LABEL_68;
            }
            operator delete(v24);
LABEL_68:
            if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v52.__r_.__value_.__l.__data_);
          }
        }
      }
    }
LABEL_13:
    if ((*(_BYTE *)v9 & 4) == 0)
    {
      while ((*(_WORD *)(v9 + 44) & 8) != 0)
        v9 = *(_QWORD *)(v9 + 8);
    }
    v9 = *(_QWORD *)(v9 + 8);
  }
  while ((char *)v9 != v8);
  v43 = v55;
  if (v10 != v55)
  {
    llvm::VRegRenamer::getVRegRenameMap((uint64_t *)v3, (uint64_t *)&v55, (uint64_t)&v50);
    v44 = llvm::VRegRenamer::doVRegRenaming((_QWORD **)v3, &v50);
    sub_1C47655E8((uint64_t)&v50, (_QWORD *)v50.__r_.__value_.__l.__size_);
    v45 = 0;
    goto LABEL_76;
  }
LABEL_75:
  v44 = 0;
  v45 = 1;
LABEL_76:
  if (SHIBYTE(v54) < 0)
    operator delete(__p[0]);
  if (v43)
  {
    if ((v45 & 1) == 0)
    {
      do
      {
        if (*(v10 - 1) < 0)
          operator delete(*((void **)v10 - 3));
        v10 -= 32;
      }
      while (v10 != v43);
    }
    operator delete(v43);
  }
  return v44;
}

uint64_t sub_1C5264F5C()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Use Stable Hashing for MIR VReg Renaming";
  v1.n128_u64[1] = 40;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7FF358, "mir-vreg-namer-use-stable-hash", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FF358, &dword_1C475E000);
}

uint64_t sub_1C5264FDC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Rename Register Operands";
  *(_QWORD *)(v2 + 8) = 24;
  *(_QWORD *)(v2 + 16) = "mir-namer";
  *(_QWORD *)(v2 + 24) = 9;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6FEA;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C526506C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C526506C()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F6FEA);
  *result = &off_1E8149F10;
  return result;
}

void sub_1C52650AC(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C5265140(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C52651CC()
{
  return "Rename virtual register operands";
}

void *sub_1C52651DC(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C526520C(uint64_t a1, _QWORD *a2)
{
  int v2;
  uint64_t v4;
  char *v5;
  char *v6;
  int v7;
  llvm::MachineBasicBlock *v8;
  int v9;
  uint64_t v10;
  void *__p;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  if ((_QWORD *)a2[40] == a2 + 40)
  {
    LOBYTE(v2) = 0;
    return v2 & 1;
  }
  v4 = a2[5];
  v13 = 0;
  v14 = v4;
  v15 = 0;
  v10 = a2[41];
  __p = 0;
  v12 = 0;
  sub_1C61D9B18((char **)&__p, &v10);
  v6 = (char *)__p;
  v5 = v12;
  if (v12 == __p)
  {
    LOBYTE(v2) = 0;
    if (!v12)
      return v2 & 1;
LABEL_10:
    v12 = v5;
    operator delete(v5);
    return v2 & 1;
  }
  v2 = 0;
  v7 = 0;
  do
  {
    v8 = (llvm::MachineBasicBlock *)*((_QWORD *)v5 - 1);
    v5 -= 8;
    v9 = v7 + 1;
    v15 = v7;
    v2 |= llvm::VRegRenamer::renameInstsInMBB((llvm::VRegRenamer *)&v14, v8);
    v7 = v9;
  }
  while (v5 != v6);
  v5 = (char *)__p;
  if (__p)
    goto LABEL_10;
  return v2 & 1;
}

uint64_t sub_1C52652CC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Rename Register Operands Canonically";
  *(_QWORD *)(v2 + 8) = 36;
  *(_QWORD *)(v2 + 16) = "mir-canonicalizer";
  *(_QWORD *)(v2 + 24) = 17;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F2F70;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C526535C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C526535C()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F2F70);
  *result = &off_1E8149FD8;
  return result;
}

void sub_1C526539C(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C5265430(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C52654BC()
{
  return "Rename register operands in a canonical ordering.";
}

void *sub_1C52654CC(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C52654FC(uint64_t a1, _QWORD *a2)
{
  int v3;
  BOOL v4;
  char v5;
  uint64_t *v7;
  uint64_t *v8;
  int64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  unint64_t **v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  unint64_t *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  int v57;
  uint64_t v58;
  char *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int16 *v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  _DWORD *v68;
  int v69;
  uint64_t v70;
  int v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  unint64_t *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t *v95;
  uint64_t **i;
  uint64_t **v97;
  unsigned int v98;
  uint64_t *v99;
  unint64_t *v100;
  uint64_t *v101;
  unint64_t *v102;
  unint64_t *v103;
  unint64_t *v104;
  uint64_t **v105;
  uint64_t **v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t **v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t **v129;
  uint64_t *v130;
  uint64_t *v131;
  int64_t v132;
  char *v133;
  llvm::MachineInstr **v134;
  BOOL v135;
  void (**v136)(void);
  uint64_t *v137;
  uint64_t **v138;
  int64_t v139;
  char *v140;
  llvm::MachineInstr **v141;
  uint64_t v142;
  BOOL v143;
  uint64_t *v144;
  void (**v145)(uint64_t *);
  BOOL v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  unsigned int *v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  BOOL v172;
  unint64_t v173;
  char *v174;
  char *v175;
  unint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t *v184;
  unsigned int v185;
  unint64_t v186;
  unint64_t **v187;
  char *v188;
  char *v189;
  char *v190;
  llvm::MachineBasicBlock *v191;
  unsigned int v192;
  uint64_t **v193;
  char *v194;
  char *v195;
  char v196;
  int v197;
  char v198;
  unsigned int v199;
  int v200;
  unsigned int v201;
  unint64_t v202;
  char *__p;
  _QWORD *__pa;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t **v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t *v211;
  _QWORD *v212[2];
  unint64_t *v213;
  uint64_t v214[3];
  uint64_t *v215;
  uint64_t *v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t **v219;
  uint64_t v220;

  v220 = *MEMORY[0x1E0C80C00];
  if (dword_1ED7FF4B0 == -1)
  {
    if ((_QWORD *)a2[40] != a2 + 40)
      goto LABEL_10;
LABEL_7:
    v5 = 0;
    return v5 & 1;
  }
  v3 = dword_1ED7FF428++;
  v4 = dword_1ED7FF4B0 != v3 || a2[40] == (_QWORD)(a2 + 40);
  if (v4)
    goto LABEL_7;
LABEL_10:
  v214[0] = a2[41];
  v217 = 0;
  v218 = 0;
  v216 = 0;
  sub_1C61D9B18((char **)&v216, v214);
  v8 = v216;
  v7 = v217;
  v9 = (char *)v217 - (char *)v216;
  if ((char *)v217 - (char *)v216 < 1)
  {
    v188 = 0;
    v189 = 0;
    if (!v216)
      goto LABEL_15;
  }
  else
  {
    v10 = (char *)operator new((char *)v217 - (char *)v216);
    v11 = 0;
    v188 = &v10[v9 & 0xFFFFFFFFFFFFFFF8];
    v12 = v7 - 1;
    do
    {
      v13 = *v12--;
      *(_QWORD *)&v10[v11] = v13;
      v11 += 8;
    }
    while ((v9 & 0xFFFFFFFFFFFFFFF8) != v11);
    v189 = v10;
    if (!v8)
      goto LABEL_15;
  }
  v217 = v8;
  operator delete(v8);
LABEL_15:
  v206 = a2[5];
  v207 = 0;
  v14 = v189;
  if (v189 == v188)
  {
    v196 = 0;
    goto LABEL_360;
  }
  v196 = 0;
  v197 = 0;
  v15 = (unint64_t **)v189;
  do
  {
    v16 = *v15;
    v17 = (uint64_t)(*v15 + 6);
    v18 = (*v15)[7];
    v205 = v17;
    v187 = v15;
    v191 = (llvm::MachineBasicBlock *)*v15;
    if (v18 == v17)
    {
      v198 = 0;
    }
    else
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = *(_QWORD **)(v16[4] + 40);
      do
      {
        if (**(_WORD **)(v18 + 16) == 19)
        {
          if (v20 >= v21)
          {
            v23 = v20 - v19;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61)
              goto LABEL_363;
            if (((char *)v21 - (char *)v19) >> 2 > v24)
              v24 = ((char *)v21 - (char *)v19) >> 2;
            if ((unint64_t)((char *)v21 - (char *)v19) >= 0x7FFFFFFFFFFFFFF8)
              v25 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v25 = v24;
            if (v25)
            {
              if (v25 >> 61)
LABEL_364:
                sub_1C4764EE4();
              v26 = (char *)operator new(8 * v25);
            }
            else
            {
              v26 = 0;
            }
            v27 = (uint64_t *)&v26[8 * v23];
            *v27 = v18;
            v28 = v27 + 1;
            while (v20 != v19)
            {
              v29 = *--v20;
              *--v27 = v29;
            }
            v21 = (uint64_t *)&v26[8 * v25];
            if (v19)
              operator delete(v19);
            v20 = v28;
            v19 = v27;
            v17 = v205;
          }
          else
          {
            *v20++ = v18;
          }
        }
        v18 = *(_QWORD *)(v18 + 8);
      }
      while (v18 != v17);
      if (v19 == v20)
      {
        v198 = 0;
      }
      else
      {
        v198 = 0;
        v153 = v19;
        __pa = v22;
        do
        {
          v154 = *v153;
          v155 = *(_QWORD *)(*v153 + 32);
          if (!*(_BYTE *)v155 && !*(_BYTE *)(v155 + 32))
          {
            v156 = *(_DWORD *)(v155 + 4);
            if (v156 < 0)
            {
              v157 = *(_DWORD *)(v155 + 36);
              if ((v157 & 0x80000000) != 0)
              {
                v158 = v156 & 0x7FFFFFFF;
                v159 = v22[3];
                v160 = *(_QWORD *)(v159 + 16 * v158);
                if ((v160 & 4) == 0)
                {
                  v161 = v160 & 0xFFFFFFFFFFFFFFF8;
                  if (v161)
                  {
                    if (v161 == (*(_QWORD *)(v159 + 16 * (v157 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8))
                    {
                      v162 = *(_QWORD *)(v159 + 16 * v158 + 8);
                      if (v162)
                      {
                        while ((*(_BYTE *)(v162 + 3) & 1) != 0)
                        {
                          v162 = *(_QWORD *)(v162 + 24);
                          if (!v162)
                            goto LABEL_313;
                        }
                        v164 = 0;
                        v165 = 0;
                        v166 = 0;
LABEL_317:
                        if (v165 >= v166)
                        {
                          v168 = (v165 - v164) >> 3;
                          v169 = v168 + 1;
                          if ((unint64_t)(v168 + 1) >> 61)
                            goto LABEL_363;
                          v170 = v166 - v164;
                          v171 = (v166 - v164) >> 2;
                          if (v171 > v169)
                            v169 = v171;
                          v172 = v170 >= 0x7FFFFFFFFFFFFFF8;
                          v173 = 0x1FFFFFFFFFFFFFFFLL;
                          if (!v172)
                            v173 = v169;
                          v202 = v173;
                          if (v173)
                          {
                            if (v173 >> 61)
                              goto LABEL_364;
                            v174 = (char *)operator new(8 * v173);
                          }
                          else
                          {
                            v174 = 0;
                          }
                          v175 = &v174[8 * v168];
                          *(_QWORD *)v175 = v162;
                          v167 = v175 + 8;
                          if (v165 == v164)
                          {
                            v176 = v202;
                          }
                          else
                          {
                            v176 = v202;
                            do
                            {
                              v177 = *((_QWORD *)v165 - 1);
                              v165 -= 8;
                              *((_QWORD *)v175 - 1) = v177;
                              v175 -= 8;
                            }
                            while (v165 != v164);
                          }
                          v166 = &v174[8 * v176];
                          if (v164)
                          {
                            v178 = v164;
                            v179 = v166;
                            operator delete(v178);
                            v166 = v179;
                          }
                          v164 = v175;
                        }
                        else
                        {
                          *(_QWORD *)v165 = v162;
                          v167 = v165 + 8;
                        }
                        v22 = __pa;
                        while (1)
                        {
                          v162 = *(_QWORD *)(v162 + 24);
                          if (!v162)
                            break;
                          if ((*(_BYTE *)(v162 + 3) & 1) == 0)
                          {
                            v165 = v167;
                            goto LABEL_317;
                          }
                        }
                        v180 = (uint64_t *)v164;
                        if (v164 != v167)
                        {
                          do
                          {
                            v181 = *v180++;
                            llvm::MachineOperand::setReg(v181, v157);
                          }
                          while (v180 != (uint64_t *)v167);
                        }
                        v182 = v154;
                        if ((*(_BYTE *)v154 & 4) == 0)
                        {
                          v182 = v154;
                          if ((*(_WORD *)(v154 + 44) & 8) != 0)
                          {
                            v182 = v154;
                            do
                              v182 = *(_QWORD *)(v182 + 8);
                            while ((*(_WORD *)(v182 + 44) & 8) != 0);
                          }
                        }
                        sub_1C487FE80(*(_QWORD *)(v154 + 24) + 40, v154, *(_QWORD *)(v182 + 8));
                        v17 = v205;
                        if (v164)
                          operator delete(v164);
                        v198 = 1;
                      }
                      else
                      {
LABEL_313:
                        v163 = *v153;
                        if ((*(_BYTE *)v154 & 4) == 0)
                        {
                          v163 = *v153;
                          if ((*(_WORD *)(v154 + 44) & 8) != 0)
                          {
                            v163 = *v153;
                            do
                              v163 = *(_QWORD *)(v163 + 8);
                            while ((*(_WORD *)(v163 + 44) & 8) != 0);
                          }
                        }
                        sub_1C487FE80(*(_QWORD *)(v154 + 24) + 40, *v153, *(_QWORD *)(v163 + 8));
                        v198 = 1;
                      }
                    }
                  }
                }
              }
            }
          }
          ++v153;
        }
        while (v153 != v20);
      }
      if (v19)
        operator delete(v19);
      v16 = (unint64_t *)v191;
    }
    v213 = v16;
    v30 = v16[7];
    if (v30 != v17)
    {
      v33 = 0;
      v32 = 0;
      v31 = 0;
      while (1)
      {
        if (v32 >= (unint64_t *)v33)
        {
          v34 = ((char *)v32 - v31) >> 3;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61)
            goto LABEL_363;
          if ((v33 - v31) >> 2 > v35)
            v35 = (v33 - v31) >> 2;
          if ((unint64_t)(v33 - v31) >= 0x7FFFFFFFFFFFFFF8)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v36 = v35;
          if (v36)
          {
            if (v36 >> 61)
              goto LABEL_364;
            v37 = (char *)operator new(8 * v36);
          }
          else
          {
            v37 = 0;
          }
          v38 = (unint64_t *)&v37[8 * v34];
          *v38 = v30;
          v39 = v38 + 1;
          if (v32 != (unint64_t *)v31)
          {
            do
            {
              v40 = *--v32;
              *--v38 = v40;
            }
            while (v32 != (unint64_t *)v31);
            v32 = (unint64_t *)v31;
          }
          v31 = (char *)v38;
          v33 = &v37[8 * v36];
          if (v32)
            operator delete(v32);
          v32 = v39;
          if (!v30)
          {
LABEL_70:
            while ((*(_WORD *)(v30 + 44) & 8) != 0)
              v30 = *(_QWORD *)(v30 + 8);
            goto LABEL_71;
          }
        }
        else
        {
          *v32++ = v30;
          if (!v30)
            goto LABEL_70;
        }
        if ((*(_BYTE *)v30 & 4) == 0)
          goto LABEL_70;
LABEL_71:
        v30 = *(_QWORD *)(v30 + 8);
        if (v30 == v17)
          goto LABEL_72;
      }
    }
    v31 = 0;
    v32 = 0;
LABEL_72:
    v212[0] = 0;
    v212[1] = 0;
    v211 = (uint64_t *)v212;
    v209 = 0;
    v210 = 0;
    v208 = &v209;
    v190 = v31;
    v41 = 0;
    if (v31 != (char *)v32)
    {
      v44 = 0;
      v45 = (unint64_t *)v31;
      v46 = 0;
      do
      {
        v47 = *v45;
        if (*(_DWORD *)(*v45 + 40) >= 2u)
        {
          v48 = 1;
          v49 = v44;
          while (1)
          {
            v50 = *(_QWORD *)(v47 + 32);
            if (*(_DWORD *)(v50 + 32 * v48))
              goto LABEL_78;
            if ((*(_DWORD *)(v50 + 32 * v48) & 0x1000000) == 0)
              goto LABEL_78;
            v51 = *(_DWORD *)(v50 + 32 * v48 + 4);
            if (v51 < 0)
              goto LABEL_78;
            if (v49 < v46)
              break;
            v52 = (v49 - v41) >> 2;
            v53 = v52 + 1;
            if ((unint64_t)(v52 + 1) >> 62)
              goto LABEL_363;
            if ((v46 - v41) >> 1 > v53)
              v53 = (v46 - v41) >> 1;
            if ((unint64_t)(v46 - v41) >= 0x7FFFFFFFFFFFFFFCLL)
              v54 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v54 = v53;
            if (v54)
            {
              if (v54 >> 62)
                goto LABEL_364;
              v55 = (char *)operator new(4 * v54);
            }
            else
            {
              v55 = 0;
            }
            v56 = &v55[4 * v52];
            *(_DWORD *)v56 = v51;
            v44 = v56 + 4;
            while (v49 != v41)
            {
              v57 = *((_DWORD *)v49 - 1);
              v49 -= 4;
              *((_DWORD *)v56 - 1) = v57;
              v56 -= 4;
            }
            v46 = &v55[4 * v54];
            if (v41)
              operator delete(v41);
            v41 = v56;
LABEL_79:
            ++v48;
            v49 = v44;
            if (v48 >= *(unsigned int *)(v47 + 40))
              goto LABEL_101;
          }
          *(_DWORD *)v49 = v51;
          v49 += 4;
LABEL_78:
          v44 = v49;
          goto LABEL_79;
        }
LABEL_101:
        ++v45;
      }
      while (v45 != v32);
      v43 = 0;
      v58 = 0;
      __p = 0;
      v42 = 0;
      v59 = 0;
      v60 = (uint64_t *)v190;
      while (1)
      {
        v61 = *v60;
        v62 = *(unsigned int *)(*v60 + 40);
        if (!(_DWORD)v62)
          goto LABEL_114;
        v63 = *(unsigned __int16 **)(v61 + 16);
        v64 = *v63 - 1;
        if (v64 <= 1 && (*(_BYTE *)(*(_QWORD *)(v61 + 32) + 48) & 8) != 0)
          goto LABEL_114;
        v65 = *(unsigned __int16 *)(v61 + 44);
        v4 = (v65 & 0xC) == 0;
        v66 = (v65 >> 2) & 1;
        if (v4)
          LOBYTE(v66) = 1;
        v67 = *((_QWORD *)v63 + 1);
        if ((v66 & 1) != 0)
        {
          if ((v67 & 0x80000) != 0)
            goto LABEL_114;
        }
        else
        {
          v118 = v59;
          v119 = v58;
          v120 = v43;
          v121 = *v60;
          if ((v67 & 0x80000) != 0)
          {
LABEL_239:
            v43 = v120;
            v58 = v119;
            v59 = v118;
            goto LABEL_114;
          }
          while (1)
          {
            v43 = v120;
            v58 = v119;
            v59 = v118;
            if ((*(_WORD *)(v121 + 44) & 8) == 0)
              break;
            v121 = *(_QWORD *)(v121 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v121 + 16) + 10) & 8) != 0)
              goto LABEL_239;
          }
        }
        if (v64 <= 1 && (*(_BYTE *)(*(_QWORD *)(v61 + 32) + 48) & 0x10) != 0)
          goto LABEL_114;
        if ((v66 & 1) != 0)
        {
          if ((v67 & 0x100000) != 0)
            goto LABEL_114;
        }
        else
        {
          v122 = v59;
          v123 = v58;
          v124 = v43;
          v125 = *v60;
          if ((v67 & 0x100000) != 0)
          {
LABEL_240:
            v43 = v124;
            v58 = v123;
            v59 = v122;
            goto LABEL_114;
          }
          while (1)
          {
            v43 = v124;
            v58 = v123;
            v59 = v122;
            if ((*(_WORD *)(v125 + 44) & 8) == 0)
              break;
            v125 = *(_QWORD *)(v125 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v125 + 16) + 10) & 0x10) != 0)
              goto LABEL_240;
          }
        }
        v68 = *(_DWORD **)(v61 + 32);
        if (!*v68 && (*v68 & 0x1000000) != 0)
        {
          v69 = v68[1];
          if (v69 < 0)
          {
            if (v62 < 2)
            {
LABEL_130:
              if (v42 >= v59)
              {
                v73 = (v42 - __p) >> 3;
                v74 = v73 + 1;
                if ((unint64_t)(v73 + 1) >> 61)
                  goto LABEL_363;
                if ((v59 - __p) >> 2 > v74)
                  v74 = (v59 - __p) >> 2;
                if ((unint64_t)(v59 - __p) >= 0x7FFFFFFFFFFFFFF8)
                  v75 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v75 = v74;
                v199 = v58;
                if (v75)
                {
                  if (v75 >> 61)
                    goto LABEL_364;
                  v76 = (char *)operator new(8 * v75);
                }
                else
                {
                  v76 = 0;
                }
                v79 = &v76[8 * v73];
                *(_QWORD *)v79 = v61;
                v80 = v79 + 8;
                if (v42 == __p)
                {
                  v81 = __p;
                }
                else
                {
                  v81 = __p;
                  do
                  {
                    v82 = *((_QWORD *)v42 - 1);
                    v42 -= 8;
                    *((_QWORD *)v79 - 1) = v82;
                    v79 -= 8;
                  }
                  while (v42 != __p);
                }
                v59 = &v76[8 * v75];
                if (v81)
                {
                  v83 = &v76[8 * v75];
                  operator delete(v81);
                  v59 = v83;
                }
                v42 = v80;
                __p = v79;
                v58 = v199;
              }
              else
              {
                *(_QWORD *)v42 = v61;
                v42 += 8;
              }
            }
            else
            {
              v70 = 1;
              while (1)
              {
                if (LOBYTE(v68[8 * v70]) != 1)
                {
                  if (LOBYTE(v68[8 * v70]))
                    break;
                  v71 = v68[8 * v70 + 1];
                  if (v71 < 0)
                    break;
                  v72 = v44;
                  if (v41 != v44)
                  {
                    v72 = v41;
                    while (*(_DWORD *)v72 != v71)
                    {
                      v72 += 4;
                      if (v72 == v44)
                      {
                        v72 = v44;
                        break;
                      }
                    }
                  }
                  if (v72 != v44)
                    break;
                }
                if (++v70 == v62)
                  goto LABEL_130;
              }
              v216 = 0;
              v77 = v213;
              v78 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v213[4] + 40) + 24) + 16 * (v69 & 0x7FFFFFFF) + 8);
              if (v78)
              {
                while ((*(_DWORD *)v78 & 0x81000000) != 0)
                {
                  v78 = *(_QWORD *)(v78 + 24);
                  if (!v78)
                    goto LABEL_194;
                }
                v84 = -1;
                v192 = v43;
LABEL_155:
                v85 = *(_QWORD *)(v61 + 24);
                v86 = *(_QWORD *)(v85 + 56);
                if (v86 == v85 + 48)
                {
LABEL_164:
                  v88 = -1;
                }
                else
                {
                  v87 = 0;
                  while (1)
                  {
                    v88 = v87;
                    if (v86 == v61)
                      break;
                    ++v87;
                    if (!v86 || (*(_BYTE *)v86 & 4) == 0)
                    {
                      while ((*(_WORD *)(v86 + 44) & 8) != 0)
                        v86 = *(_QWORD *)(v86 + 8);
                    }
                    v86 = *(_QWORD *)(v86 + 8);
                    if (v86 == v85 + 48)
                      goto LABEL_164;
                  }
                }
                v89 = *(uint64_t **)(v78 + 8);
                v90 = v89[3];
                v91 = *(_QWORD *)(v90 + 56);
                if (v91 == v90 + 48)
                {
LABEL_174:
                  v93 = -1;
                }
                else
                {
                  v92 = 0;
                  while (1)
                  {
                    v93 = v92;
                    if ((uint64_t *)v91 == v89)
                      break;
                    ++v92;
                    if (!v91 || (*(_BYTE *)v91 & 4) == 0)
                    {
                      while ((*(_WORD *)(v91 + 44) & 8) != 0)
                        v91 = *(_QWORD *)(v91 + 8);
                    }
                    v91 = *(_QWORD *)(v91 + 8);
                    if (v91 == v90 + 48)
                      goto LABEL_174;
                  }
                }
                if (v90 == v85 && v93 > v88)
                {
                  v94 = v93 - v88;
                  if (v93 - v88 < v84)
                  {
                    v216 = *(uint64_t **)(v78 + 8);
                    v95 = v209;
                    for (i = &v209; ; v95 = *i)
                    {
                      v97 = i;
                      if (!v95)
                        break;
                      while (1)
                      {
                        i = (uint64_t **)v95;
                        v98 = *((_DWORD *)v95 + 8);
                        if (v98 > v58)
                          break;
                        if (v98 >= v58)
                          goto LABEL_188;
                        v95 = i[1];
                        if (!v95)
                        {
                          v97 = i + 1;
                          goto LABEL_185;
                        }
                      }
                    }
LABEL_185:
                    v185 = v93 - v88;
                    v194 = v59;
                    v183 = (uint64_t *)i;
                    v200 = v58;
                    i = (uint64_t **)operator new(0x30uLL);
                    *((_DWORD *)i + 8) = v200;
                    i[5] = 0;
                    *i = 0;
                    i[1] = 0;
                    i[2] = v183;
                    *v97 = (uint64_t *)i;
                    v99 = (uint64_t *)i;
                    if (*v208)
                    {
                      v208 = (uint64_t **)*v208;
                      v99 = *v97;
                    }
                    sub_1C4768E74(v209, v99);
                    ++v210;
                    LODWORD(v58) = v200;
                    v59 = v194;
                    v94 = v185;
LABEL_188:
                    v58 = (v58 + 1);
                    i[5] = v89;
                    v84 = v94;
                  }
                }
                v43 = v192;
                while (1)
                {
                  v78 = *(_QWORD *)(v78 + 24);
                  if (!v78)
                    break;
                  if ((*(_DWORD *)v78 & 0x81000000) == 0)
                    goto LABEL_155;
                }
                v77 = v213;
              }
LABEL_194:
              v100 = v77 + 6;
              v101 = (uint64_t *)v77[7];
              if (v101 != (uint64_t *)v100)
              {
                v102 = v100;
                v103 = v100;
                do
                {
                  if (v102 != v100 && v103 != v100)
                    break;
                  v104 = v101 == v216 ? (unint64_t *)v101 : v103;
                  if (v101 == (uint64_t *)v61)
                    v102 = (unint64_t *)v101;
                  else
                    v103 = v104;
                  v101 = (uint64_t *)v101[1];
                }
                while (v101 != (uint64_t *)v100);
                if (v102 != v100 && v103 != v100)
                {
                  v195 = v59;
                  v201 = v58;
                  v105 = sub_1C4FCE454(&v211, (unint64_t)v216, &v216);
                  v106 = v105;
                  v108 = v105[6];
                  v107 = v105[7];
                  if (v108 >= v107)
                  {
                    v193 = v105;
                    v110 = v105[5];
                    v111 = v108 - v110;
                    v112 = v111 + 1;
                    if ((unint64_t)(v111 + 1) >> 61)
                      goto LABEL_363;
                    v113 = (char *)v107 - (char *)v110;
                    if (v113 >> 2 > v112)
                      v112 = v113 >> 2;
                    if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
                      v112 = 0x1FFFFFFFFFFFFFFFLL;
                    v186 = v112;
                    if (v112)
                    {
                      v184 = v105[5];
                      if (v112 >> 61)
                        goto LABEL_364;
                      v114 = (char *)operator new(8 * v112);
                      v110 = v184;
                    }
                    else
                    {
                      v114 = 0;
                    }
                    v115 = (uint64_t *)&v114[8 * v111];
                    *v115 = v61;
                    v109 = v115 + 1;
                    if (v108 == v110)
                    {
                      v106 = v193;
                    }
                    else
                    {
                      v106 = v193;
                      do
                      {
                        v116 = *--v108;
                        *--v115 = v116;
                      }
                      while (v108 != v110);
                      v108 = v193[5];
                    }
                    v106[5] = v115;
                    v106[6] = v109;
                    v106[7] = (uint64_t *)&v114[8 * v186];
                    if (v108)
                    {
                      v117 = v109;
                      operator delete(v108);
                      v109 = v117;
                    }
                  }
                  else
                  {
                    *v108 = v61;
                    v109 = v108 + 1;
                  }
                  v106[6] = v109;
                  sub_1C48532D0(v213, v103, v213, v102);
                  v43 = 1;
                  v58 = v201;
                  v59 = v195;
                }
              }
            }
          }
        }
LABEL_114:
        if (++v60 == (uint64_t *)v32)
          goto LABEL_241;
      }
    }
    v42 = 0;
    __p = 0;
    LOBYTE(v43) = 0;
LABEL_241:
    v126 = v208;
    if (v208 != &v209)
    {
      while (1)
      {
        v127 = (unint64_t *)v213[7];
        if (v127 != v213 + 6)
          break;
LABEL_258:
        v137 = v126[1];
        if (v137)
        {
          do
          {
            v138 = (uint64_t **)v137;
            v137 = (uint64_t *)*v137;
          }
          while (v137);
        }
        else
        {
          do
          {
            v138 = (uint64_t **)v126[2];
            v4 = *v138 == (uint64_t *)v126;
            v126 = v138;
          }
          while (!v4);
        }
        v126 = v138;
        if (v138 == &v209)
          goto LABEL_264;
      }
      v128 = (unint64_t)v126[5];
      while ((unint64_t *)v128 != v127)
      {
        v127 = (unint64_t *)v127[1];
        if (v127 == v213 + 6)
          goto LABEL_258;
      }
      v214[0] = (uint64_t)v126[5];
      v129 = sub_1C4FCE454(&v211, v128, v126 + 5);
      v131 = v129[5];
      v130 = v129[6];
      v132 = (char *)v130 - (char *)v131;
      if (v130 == v131)
      {
        v133 = 0;
        v134 = 0;
      }
      else
      {
        if (v132 < 0)
          goto LABEL_363;
        v133 = (char *)operator new((char *)v130 - (char *)v131);
        v134 = (llvm::MachineInstr **)&v133[8 * (v132 >> 3)];
        memmove(v133, v131, v132);
      }
      v216 = (uint64_t *)&off_1E814A098;
      v217 = v214;
      v219 = &v216;
      v135 = sub_1C5266528((llvm::MachineInstr **)v133, v134, v213, (uint64_t)&v216);
      if (v219 == &v216)
      {
        v136 = (void (**)(void))(v216 + 4);
      }
      else
      {
        if (!v219)
          goto LABEL_256;
        v136 = (void (**)(void))(*v219 + 5);
      }
      (*v136)();
LABEL_256:
      LOBYTE(v43) = v43 | v135;
      if (v133)
        operator delete(v133);
      goto LABEL_258;
    }
LABEL_264:
    v139 = v42 - __p;
    if (v42 == __p)
    {
      v140 = 0;
      v141 = 0;
      v142 = v205;
    }
    else
    {
      v142 = v205;
      if (v139 < 0)
LABEL_363:
        abort();
      v140 = (char *)operator new(v139);
      v141 = (llvm::MachineInstr **)&v140[8 * (v139 >> 3)];
      memmove(v140, __p, v139);
    }
    v214[0] = (uint64_t)&off_1E814A0E0;
    v214[1] = (uint64_t)&v213;
    v215 = v214;
    v143 = sub_1C5266528((llvm::MachineInstr **)v140, v141, v213, (uint64_t)v214);
    v144 = v215;
    v14 = v189;
    if (v215 == v214)
    {
      v145 = (void (**)(uint64_t *))(v214[0] + 32);
      v144 = v214;
    }
    else
    {
      if (!v215)
      {
        if (v140)
          goto LABEL_355;
        goto LABEL_272;
      }
      v145 = (void (**)(uint64_t *))(*v215 + 40);
    }
    (*v145)(v144);
    if (v140)
    {
LABEL_355:
      operator delete(v140);
      if (!v41)
        goto LABEL_274;
LABEL_273:
      operator delete(v41);
      goto LABEL_274;
    }
LABEL_272:
    if (v41)
      goto LABEL_273;
LABEL_274:
    if (__p)
      operator delete(__p);
    sub_1C6143384(v209);
    sub_1C61CEBB4(v212[0]);
    if (v190)
      operator delete(v190);
    v207 = v197;
    v146 = llvm::VRegRenamer::renameInstsInMBB((llvm::VRegRenamer *)&v206, v191);
    v147 = *((_QWORD *)v191 + 7);
    if (v147 == v142)
    {
      v148 = 0;
      goto LABEL_298;
    }
    v148 = 0;
    do
    {
      v149 = *(unsigned int *)(v147 + 40);
      if (!(_DWORD)v149)
        goto LABEL_291;
      v150 = *(unsigned int **)(v147 + 32);
      v151 = 32 * v149;
      do
      {
        v152 = *v150;
        if (*v150)
          goto LABEL_286;
        if ((v152 & 0x1000000) == 0)
        {
          if (((v152 >> 26) & ~HIBYTE(v152) & 1) == 0)
            goto LABEL_286;
LABEL_285:
          *v150 = v152 & 0xFBFFFFFF;
          v148 = 1;
          goto LABEL_286;
        }
        if ((~v152 & 0x5000000) == 0)
          goto LABEL_285;
LABEL_286:
        v150 += 8;
        v151 -= 32;
      }
      while (v151);
      if (v147)
      {
LABEL_291:
        if ((*(_BYTE *)v147 & 4) != 0)
          goto LABEL_295;
      }
      while ((*(_WORD *)(v147 + 44) & 8) != 0)
        v147 = *(_QWORD *)(v147 + 8);
LABEL_295:
      v147 = *(_QWORD *)(v147 + 8);
    }
    while (v147 != v142);
LABEL_298:
    v196 |= v148 | v198 | v43 | (v143 || v146);
    ++v197;
    v15 = v187 + 1;
  }
  while (v187 + 1 != (unint64_t **)v188);
LABEL_360:
  if (v14)
    operator delete(v14);
  v5 = v196;
  return v5 & 1;
}

BOOL sub_1C5266528(llvm::MachineInstr **a1, llvm::MachineInstr **a2, unint64_t *a3, uint64_t a4)
{
  llvm::MachineInstr **v6;
  llvm::MachineInstr **v7;
  void **v8;
  unint64_t v9;
  char *v10;
  llvm::MachineInstr *v11;
  uint64_t v12;
  std::string::size_type v13;
  std::string::size_type v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  void **v22;
  char *v23;
  __int128 v24;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  unint64_t **v28;
  uint64_t v29;
  unint64_t *v30;
  void **v31;
  char *v34;
  std::string __dst;
  void (**v36)(llvm::raw_ostream *__hidden);
  int v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char v41;
  uint64_t v42;
  int v43;
  std::string *p_str;
  std::string __str;
  _QWORD v46[4];

  v46[2] = *MEMORY[0x1E0C80C00];
  if (a1 == a2)
  {
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v6 = a2;
    v7 = a1;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *v7;
      memset(&__str, 0, sizeof(__str));
      v37 = 0;
      v41 = 0;
      v42 = 0;
      v36 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
      p_str = &__str;
      v43 = 0;
      v39 = 0;
      v40 = 0;
      v38 = 0;
      llvm::MachineInstr::print(v11, (llvm::raw_ostream *)&v36, 1, 0, 0, 1, 0);
      v12 = v40 - v38;
      if (v40 != v38)
      {
        v40 = v38;
        llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v36, v38, v12);
      }
      v13 = std::string::find(&__str, 61, 0);
      if (v13 == -1)
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          sub_1C47EBC30(&__dst, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        else
          __dst = __str;
      }
      else
      {
        std::string::basic_string(&__dst, &__str, v13, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v46);
      }
      v46[0] = __dst.__r_.__value_.__l.__size_;
      v14 = __dst.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7);
      v15 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      memset(&__dst, 0, sizeof(__dst));
      if (v9 >= (unint64_t)v10)
      {
        v17 = (uint64_t)(v9 - (_QWORD)v8) >> 5;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 59)
          abort();
        if ((v10 - (char *)v8) >> 4 > v18)
          v18 = (v10 - (char *)v8) >> 4;
        if ((unint64_t)(v10 - (char *)v8) >= 0x7FFFFFFFFFFFFFE0)
          v19 = 0x7FFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19 >> 59)
          sub_1C4764EE4();
        v34 = (char *)operator new(32 * v19);
        v20 = &v34[32 * v17];
        v21 = v46[0];
        *(_QWORD *)v20 = v14;
        *((_QWORD *)v20 + 1) = v21;
        *(_QWORD *)(v20 + 15) = *(_QWORD *)((char *)v46 + 7);
        v20[23] = v15;
        v46[0] = 0;
        *(_QWORD *)((char *)v46 + 7) = 0;
        *((_QWORD *)v20 + 3) = v11;
        if ((void **)v9 == v8)
        {
          v23 = v20;
        }
        else
        {
          v22 = (void **)v9;
          v23 = v20;
          do
          {
            v24 = *((_OWORD *)v22 - 2);
            *((_QWORD *)v23 - 2) = *(v22 - 2);
            *((_OWORD *)v23 - 2) = v24;
            *(v22 - 3) = 0;
            *(v22 - 2) = 0;
            *(v22 - 4) = 0;
            *((_QWORD *)v23 - 1) = *(v22 - 1);
            v23 -= 32;
            v22 -= 4;
          }
          while (v22 != v8);
          while ((void **)v9 != v8)
          {
            if (*(char *)(v9 - 9) < 0)
              operator delete(*(void **)(v9 - 32));
            v9 -= 32;
          }
        }
        v9 = (unint64_t)(v20 + 32);
        v10 = &v34[32 * v19];
        if (v8)
          operator delete(v8);
        v8 = (void **)v23;
        v6 = a2;
      }
      else
      {
        *(_QWORD *)v9 = v14;
        v16 = *(_QWORD *)((char *)v46 + 7);
        *(_QWORD *)(v9 + 8) = v46[0];
        *(_QWORD *)(v9 + 15) = v16;
        *(_BYTE *)(v9 + 23) = v15;
        *(_QWORD *)(v9 + 24) = v11;
        v9 += 32;
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v36 = off_1E81A6E70;
      if (v43 == 1 && v38)
        MEMORY[0x1CAA32F9C](v38, 0x1000C8077774924);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      ++v7;
    }
    while (v7 != v6);
  }
  v25 = 126 - 2 * __clz((uint64_t)(v9 - (_QWORD)v8) >> 5);
  if ((void **)v9 == v8)
    v26 = 0;
  else
    v26 = v25;
  v27 = sub_1C5266928((uint64_t)v8, v9, v26, 1);
  if ((void **)v9 != v8)
  {
    v28 = (unint64_t **)v8;
    do
    {
      v29 = *(_QWORD *)(a4 + 24);
      if (!v29)
        sub_1C485C2F0();
      v30 = (unint64_t *)(*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v29 + 48))(v29, v27);
      sub_1C48532D0(a3, v30, a3, v28[3]);
      v28 += 4;
    }
    while (v28 != (unint64_t **)v9);
  }
  if (v8)
  {
    if ((void **)v9 != v8)
    {
      v31 = (void **)v9;
      do
      {
        if (*((char *)v31 - 9) < 0)
          operator delete(*(v31 - 4));
        v31 -= 4;
      }
      while (v31 != v8);
    }
    operator delete(v8);
  }
  return v8 != (void **)v9;
}

__n128 sub_1C5266928(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  const void **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  char v18;
  BOOL v19;
  const void *v20;
  size_t v21;
  size_t v22;
  const void *v23;
  size_t v24;
  size_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  __int128 v29;
  const void *v30;
  void *v31;
  void **v32;
  _QWORD *v33;
  size_t v34;
  size_t v35;
  int v36;
  BOOL v37;
  unint64_t v38;
  char *v39;
  size_t v40;
  char *v41;
  size_t v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  size_t v46;
  const void *v47;
  size_t v48;
  int v49;
  BOOL v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  const void *v55;
  void **v56;
  void *v57;
  char *v58;
  size_t v59;
  char *v60;
  size_t v61;
  int v62;
  BOOL v63;
  char *v64;
  size_t v65;
  char *v66;
  size_t v67;
  int v68;
  _BOOL4 v69;
  void **v70;
  __int128 v71;
  __int128 v72;
  BOOL v73;
  __n128 result;
  __int128 v75;
  const void *v76;
  char v77;
  BOOL v78;
  const void *v79;
  size_t v80;
  size_t v81;
  void *v82;
  void **v83;
  size_t v84;
  int v85;
  BOOL v86;
  const void **v87;
  char v88;
  BOOL v89;
  const void *v90;
  size_t v91;
  size_t v92;
  size_t v93;
  int v94;
  BOOL v95;
  void **v96;
  char v97;
  BOOL v98;
  const void *v99;
  size_t v100;
  size_t v101;
  size_t v102;
  int v103;
  BOOL v104;
  unint64_t v105;
  const void **v106;
  char v107;
  BOOL v108;
  const void *v109;
  size_t v110;
  size_t v111;
  size_t v112;
  int v113;
  BOOL v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  const void *v118;
  void *v119;
  void **v120;
  const void **v121;
  char v122;
  BOOL v123;
  const void *v124;
  size_t v125;
  size_t v126;
  size_t v127;
  int v128;
  _BOOL4 v129;
  char v130;
  BOOL v131;
  const void *v132;
  size_t v133;
  size_t v134;
  size_t v135;
  int v136;
  BOOL v137;
  void **v138;
  __int128 v139;
  char v140;
  BOOL v141;
  const void *v142;
  size_t v143;
  size_t v144;
  size_t v145;
  const void *v146;
  uint64_t v147;
  uint64_t v148;
  const void **v149;
  const void **v150;
  char v151;
  BOOL v152;
  const void *v153;
  size_t v154;
  size_t v155;
  size_t v156;
  const void *v157;
  size_t v158;
  int v159;
  _BOOL4 v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  void **v164;
  uint64_t v165;
  char v166;
  const void *v167;
  size_t v168;
  void *v169;
  void **v170;
  size_t v171;
  int v172;
  BOOL v173;
  uint64_t v174;
  int64_t v175;
  int64_t v176;
  int64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  int v181;
  const void *v182;
  size_t v183;
  size_t v184;
  size_t v185;
  const void *v186;
  size_t v187;
  int v188;
  _BOOL4 v189;
  uint64_t v190;
  char v191;
  BOOL v192;
  const void *v193;
  size_t v194;
  size_t v195;
  size_t v196;
  const void *v197;
  size_t v198;
  int v199;
  BOOL v200;
  __int128 v201;
  uint64_t v202;
  __int128 v203;
  uint64_t v204;
  char v205;
  int v206;
  const void *v207;
  size_t v208;
  size_t v209;
  size_t v210;
  const void *v211;
  size_t v212;
  int v213;
  _BOOL4 v214;
  void **v215;
  void *v216;
  size_t v217;
  const void *v218;
  size_t v219;
  int v220;
  _BOOL4 v221;
  __int128 v222;
  void **v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char v229;
  int v230;
  const void *v231;
  size_t v232;
  size_t v233;
  size_t v234;
  const void *v235;
  size_t v236;
  int v237;
  _BOOL4 v238;
  int v239;
  void *v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  char v244;
  BOOL v245;
  const void *v246;
  size_t v247;
  size_t v248;
  size_t v249;
  const void *v250;
  uint64_t v251;
  size_t v252;
  int v253;
  _BOOL4 v254;
  __int128 v255;
  const void *v256;
  uint64_t v257;
  __int128 v258;
  void **v259;
  void *v260;
  size_t v261;
  const void *v262;
  size_t v263;
  int v264;
  BOOL v265;
  uint64_t v267;
  _QWORD *v268;
  const void **v269;
  char v270;
  BOOL v271;
  const void *v272;
  size_t v273;
  size_t v274;
  size_t v275;
  const void *v276;
  size_t v277;
  int v278;
  _BOOL4 v279;
  __int128 v280;
  _QWORD *v281;
  void **v282;
  _QWORD *v283;
  char v284;
  int v285;
  _QWORD *v286;
  size_t v287;
  size_t v288;
  void *v289;
  void **v290;
  size_t v291;
  int v292;
  BOOL v293;
  void **v294;
  size_t v295;
  int v296;
  _BOOL4 v297;
  __int128 v298;
  __n128 v299;
  uint64_t v300;
  const void **v301;
  const void **v302;
  void **v303;
  void **v304;
  void *v305;
  uint64_t v306;
  void *v307;
  char v309;
  void *__p[2];
  const void *v311;
  const void *v312;
  __int128 v313;
  const void *v314;
  uint64_t v315;

  v315 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v7 = a2 - 32;
  v301 = (const void **)(a2 - 96);
  v302 = (const void **)(a2 - 64);
  v8 = (const void **)a1;
  v304 = (void **)a2;
  v306 = a2 - 32;
  while (2)
  {
    a1 = (uint64_t)v8;
    v9 = a2 - (_QWORD)v8;
    v10 = (a2 - (uint64_t)v8) >> 5;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v140 = *(_BYTE *)(a1 + 23);
        v141 = v140 < 0;
        if (v140 >= 0)
          v142 = (const void *)a1;
        else
          v142 = *(const void **)a1;
        v143 = v140 & 0x7F;
        if (v141)
          v144 = *(_QWORD *)(a1 + 8);
        else
          v144 = v143;
        if (*(char *)(a2 - 9) < 0)
        {
          v146 = *(const void **)(a2 - 32);
          v145 = *(_QWORD *)(a2 - 24);
        }
        else
        {
          v145 = *(unsigned __int8 *)(a2 - 9);
          v146 = (const void *)v7;
        }
        if (v144 >= v145)
          v295 = v145;
        else
          v295 = v144;
        v296 = memcmp(v146, v142, v295);
        v297 = v145 < v144;
        if (v296)
          v297 = v296 < 0;
        if (v297)
        {
          v298 = *(_OWORD *)a1;
          v311 = *(const void **)(a1 + 16);
          *(_OWORD *)__p = v298;
          v299 = *(__n128 *)v7;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 + 16);
          *(__n128 *)a1 = v299;
          result = *(__n128 *)__p;
          *(_QWORD *)(v7 + 16) = v311;
          *(__n128 *)v7 = result;
          v300 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v300;
        }
        return result;
      case 3:
        sub_1C5267E30((const void **)a1, (_QWORD *)(a1 + 32), (const void **)v7);
        return result;
      case 4:
        result.n128_u64[0] = sub_1C52683DC(a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64), (__int128 *)v7).n128_u64[0];
        return result;
      case 5:
        result.n128_u64[0] = sub_1C5267BB0(a1, a1 + 32, a1 + 64, a1 + 96, v7).n128_u64[0];
        return result;
      default:
        if (v9 > 767)
        {
          if (!a3)
          {
            if (a1 != a2)
            {
              v175 = (unint64_t)(v10 - 2) >> 1;
              v176 = v175;
              do
              {
                v177 = v176;
                if (v175 >= v176)
                {
                  v178 = (2 * v176) | 1;
                  v179 = a1 + 32 * v178;
                  if (2 * v176 + 2 < v10)
                  {
                    v180 = *(_BYTE *)(v179 + 55);
                    v181 = v180;
                    if (v180 >= 0)
                      v182 = (const void *)(v179 + 32);
                    else
                      v182 = *(const void **)(v179 + 32);
                    v183 = v180 & 0x7F;
                    if (v181 >= 0)
                      v184 = v183;
                    else
                      v184 = *(_QWORD *)(v179 + 40);
                    if (*(char *)(v179 + 23) < 0)
                    {
                      v186 = *(const void **)v179;
                      v185 = *(_QWORD *)(v179 + 8);
                    }
                    else
                    {
                      v185 = *(unsigned __int8 *)(v179 + 23);
                      v186 = (const void *)(a1 + 32 * v178);
                    }
                    if (v184 >= v185)
                      v187 = v185;
                    else
                      v187 = v184;
                    v188 = memcmp(v186, v182, v187);
                    v189 = v185 < v184;
                    if (v188)
                      v189 = v188 < 0;
                    if (v189)
                    {
                      v179 += 32;
                      v178 = 2 * v177 + 2;
                    }
                  }
                  v190 = a1 + 32 * v177;
                  v191 = *(_BYTE *)(v190 + 23);
                  v192 = v191 < 0;
                  if (v191 >= 0)
                    v193 = (const void *)(a1 + 32 * v177);
                  else
                    v193 = *(const void **)v190;
                  v194 = v191 & 0x7F;
                  if (v192)
                    v195 = *(_QWORD *)(v190 + 8);
                  else
                    v195 = v194;
                  if (*(char *)(v179 + 23) < 0)
                  {
                    v197 = *(const void **)v179;
                    v196 = *(_QWORD *)(v179 + 8);
                  }
                  else
                  {
                    v196 = *(unsigned __int8 *)(v179 + 23);
                    v197 = (const void *)v179;
                  }
                  if (v195 >= v196)
                    v198 = v196;
                  else
                    v198 = v195;
                  v199 = memcmp(v197, v193, v198);
                  v200 = v196 < v195;
                  if (v199)
                    v200 = v199 < 0;
                  v175 = (unint64_t)(v10 - 2) >> 1;
                  if (!v200)
                  {
                    v201 = *(_OWORD *)v190;
                    v311 = *(const void **)(v190 + 16);
                    *(_OWORD *)__p = v201;
                    *(_QWORD *)(v190 + 8) = 0;
                    *(_QWORD *)(v190 + 16) = 0;
                    *(_QWORD *)v190 = 0;
                    v312 = *(const void **)(a1 + 32 * v177 + 24);
                    do
                    {
                      v202 = v179;
                      if (*(char *)(v190 + 23) < 0)
                        operator delete(*(void **)v190);
                      v203 = *(_OWORD *)v179;
                      *(_QWORD *)(v190 + 16) = *(_QWORD *)(v179 + 16);
                      *(_OWORD *)v190 = v203;
                      *(_BYTE *)(v179 + 23) = 0;
                      *(_BYTE *)v179 = 0;
                      *(_QWORD *)(v190 + 24) = *(_QWORD *)(v179 + 24);
                      if (v175 < v178)
                        break;
                      v204 = (2 * v178) | 1;
                      v179 = a1 + 32 * v204;
                      v178 = 2 * v178 + 2;
                      if (v178 >= v10)
                      {
                        v178 = v204;
                      }
                      else
                      {
                        v205 = *(_BYTE *)(v179 + 55);
                        v206 = v205;
                        if (v205 >= 0)
                          v207 = (const void *)(v179 + 32);
                        else
                          v207 = *(const void **)(v179 + 32);
                        v208 = v205 & 0x7F;
                        if (v206 >= 0)
                          v209 = v208;
                        else
                          v209 = *(_QWORD *)(v179 + 40);
                        if (*(char *)(v179 + 23) < 0)
                        {
                          v211 = *(const void **)v179;
                          v210 = *(_QWORD *)(v179 + 8);
                        }
                        else
                        {
                          v210 = *(unsigned __int8 *)(v179 + 23);
                          v211 = (const void *)(a1 + 32 * v204);
                        }
                        if (v209 >= v210)
                          v212 = v210;
                        else
                          v212 = v209;
                        v213 = memcmp(v211, v207, v212);
                        v214 = v210 < v209;
                        if (v213)
                          v214 = v213 < 0;
                        if (v214)
                          v179 += 32;
                        else
                          v178 = v204;
                        v175 = (unint64_t)(v10 - 2) >> 1;
                      }
                      if (SHIBYTE(v311) >= 0)
                        v215 = __p;
                      else
                        v215 = (void **)__p[0];
                      if (SHIBYTE(v311) >= 0)
                        v216 = (void *)(HIBYTE(v311) & 0x7F);
                      else
                        v216 = __p[1];
                      if (*(char *)(v179 + 23) < 0)
                      {
                        v218 = *(const void **)v179;
                        v217 = *(_QWORD *)(v179 + 8);
                      }
                      else
                      {
                        v217 = *(unsigned __int8 *)(v179 + 23);
                        v218 = (const void *)v179;
                      }
                      if ((unint64_t)v216 >= v217)
                        v219 = v217;
                      else
                        v219 = (size_t)v216;
                      v220 = memcmp(v218, v215, v219);
                      v221 = v217 < (unint64_t)v216;
                      if (v220)
                        v221 = v220 < 0;
                      v190 = v202;
                    }
                    while (!v221);
                    if (*(char *)(v202 + 23) < 0)
                      operator delete(*(void **)v202);
                    v222 = *(_OWORD *)__p;
                    *(_QWORD *)(v202 + 16) = v311;
                    *(_OWORD *)v202 = v222;
                    *(_QWORD *)(v202 + 24) = v312;
                  }
                }
                v176 = v177 - 1;
              }
              while (v177);
              v223 = v304;
              do
              {
                v224 = 0;
                v307 = *(void **)a1;
                *(_QWORD *)&v313 = *(_QWORD *)(a1 + 8);
                *(_QWORD *)((char *)&v313 + 7) = *(_QWORD *)(a1 + 15);
                v309 = *(_BYTE *)(a1 + 23);
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                *(_QWORD *)a1 = 0;
                v303 = v223;
                v305 = *(void **)(a1 + 24);
                v225 = a1;
                do
                {
                  v226 = v225 + 32 * v224 + 32;
                  v227 = 2 * v224;
                  v224 = (2 * v224) | 1;
                  v228 = v227 + 2;
                  if (v227 + 2 < v10)
                  {
                    v229 = *(_BYTE *)(v226 + 55);
                    v230 = v229;
                    if (v229 >= 0)
                      v231 = (const void *)(v226 + 32);
                    else
                      v231 = *(const void **)(v226 + 32);
                    v232 = v229 & 0x7F;
                    if (v230 >= 0)
                      v233 = v232;
                    else
                      v233 = *(_QWORD *)(v226 + 40);
                    if (*(char *)(v226 + 23) < 0)
                    {
                      v235 = *(const void **)v226;
                      v234 = *(_QWORD *)(v226 + 8);
                    }
                    else
                    {
                      v234 = *(unsigned __int8 *)(v226 + 23);
                      v235 = (const void *)v226;
                    }
                    if (v233 >= v234)
                      v236 = v234;
                    else
                      v236 = v233;
                    v237 = memcmp(v235, v231, v236);
                    v238 = v234 < v233;
                    if (v237)
                      v238 = v237 < 0;
                    if (v238)
                    {
                      v226 += 32;
                      v224 = v228;
                    }
                  }
                  if (*(char *)(v225 + 23) < 0)
                    operator delete(*(void **)v225);
                  result = *(__n128 *)v226;
                  *(_QWORD *)(v225 + 16) = *(_QWORD *)(v226 + 16);
                  *(__n128 *)v225 = result;
                  *(_BYTE *)(v226 + 23) = 0;
                  *(_BYTE *)v226 = 0;
                  *(_QWORD *)(v225 + 24) = *(_QWORD *)(v226 + 24);
                  v225 = v226;
                }
                while (v224 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
                v223 = v303 - 4;
                v239 = *(char *)(v226 + 23);
                if ((void **)v226 == v303 - 4)
                {
                  if (v239 < 0)
                    operator delete(*(void **)v226);
                  *(_QWORD *)v226 = v307;
                  v251 = *(_QWORD *)((char *)&v313 + 7);
                  *(_QWORD *)(v226 + 8) = v313;
                  *(_QWORD *)(v226 + 15) = v251;
                  *(_BYTE *)(v226 + 23) = v309;
                  *(_QWORD *)(v226 + 24) = v305;
                }
                else
                {
                  if (v239 < 0)
                    operator delete(*(void **)v226);
                  result = *(__n128 *)v223;
                  *(_QWORD *)(v226 + 16) = *(v303 - 2);
                  *(__n128 *)v226 = result;
                  *((_BYTE *)v303 - 9) = 0;
                  *((_BYTE *)v303 - 32) = 0;
                  *(_QWORD *)(v226 + 24) = *(v303 - 1);
                  if (*((char *)v303 - 9) < 0)
                    operator delete(*v223);
                  *(v303 - 4) = v307;
                  v240 = (void *)v313;
                  *(void **)((char *)v303 - 17) = *(void **)((char *)&v313 + 7);
                  *(v303 - 3) = v240;
                  *((_BYTE *)v303 - 9) = v309;
                  *(v303 - 1) = v305;
                  v241 = v226 + 32 - a1;
                  if (v241 >= 33)
                  {
                    v242 = (((unint64_t)v241 >> 5) - 2) >> 1;
                    v243 = a1 + 32 * v242;
                    v244 = *(_BYTE *)(v226 + 23);
                    v245 = v244 < 0;
                    if (v244 >= 0)
                      v246 = (const void *)v226;
                    else
                      v246 = *(const void **)v226;
                    v247 = v244 & 0x7F;
                    if (v245)
                      v248 = *(_QWORD *)(v226 + 8);
                    else
                      v248 = v247;
                    if (*(char *)(v243 + 23) < 0)
                    {
                      v250 = *(const void **)v243;
                      v249 = *(_QWORD *)(v243 + 8);
                    }
                    else
                    {
                      v249 = *(unsigned __int8 *)(v243 + 23);
                      v250 = (const void *)(a1 + 32 * v242);
                    }
                    if (v248 >= v249)
                      v252 = v249;
                    else
                      v252 = v248;
                    v253 = memcmp(v250, v246, v252);
                    v254 = v249 < v248;
                    if (v253)
                      v254 = v253 < 0;
                    if (v254)
                    {
                      v255 = *(_OWORD *)v226;
                      v256 = *(const void **)(v226 + 24);
                      v311 = *(const void **)(v226 + 16);
                      *(_OWORD *)__p = v255;
                      *(_QWORD *)(v226 + 8) = 0;
                      *(_QWORD *)(v226 + 16) = 0;
                      *(_QWORD *)v226 = 0;
                      v312 = v256;
                      do
                      {
                        v257 = v243;
                        if (*(char *)(v226 + 23) < 0)
                          operator delete(*(void **)v226);
                        v258 = *(_OWORD *)v243;
                        *(_QWORD *)(v226 + 16) = *(_QWORD *)(v243 + 16);
                        *(_OWORD *)v226 = v258;
                        *(_BYTE *)(v243 + 23) = 0;
                        *(_BYTE *)v243 = 0;
                        *(_QWORD *)(v226 + 24) = *(_QWORD *)(v243 + 24);
                        if (!v242)
                          break;
                        v242 = (v242 - 1) >> 1;
                        v243 = a1 + 32 * v242;
                        if (SHIBYTE(v311) >= 0)
                          v259 = __p;
                        else
                          v259 = (void **)__p[0];
                        if (SHIBYTE(v311) >= 0)
                          v260 = (void *)(HIBYTE(v311) & 0x7F);
                        else
                          v260 = __p[1];
                        if (*(char *)(v243 + 23) < 0)
                        {
                          v262 = *(const void **)v243;
                          v261 = *(_QWORD *)(v243 + 8);
                        }
                        else
                        {
                          v261 = *(unsigned __int8 *)(v243 + 23);
                          v262 = (const void *)(a1 + 32 * v242);
                        }
                        if ((unint64_t)v260 >= v261)
                          v263 = v261;
                        else
                          v263 = (size_t)v260;
                        v264 = memcmp(v262, v259, v263);
                        v265 = v261 < (unint64_t)v260;
                        if (v264)
                          v265 = v264 < 0;
                        v226 = v257;
                      }
                      while (v265);
                      if (*(char *)(v257 + 23) < 0)
                        operator delete(*(void **)v257);
                      result = *(__n128 *)__p;
                      *(_QWORD *)(v257 + 16) = v311;
                      *(__n128 *)v257 = result;
                      *(_QWORD *)(v257 + 24) = v312;
                    }
                  }
                }
              }
              while (v10-- > 2);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = a1 + 32 * ((unint64_t)v10 >> 1);
          if ((unint64_t)v9 <= 0x1000)
          {
            sub_1C5267E30((const void **)v12, (_QWORD *)a1, (const void **)v7);
          }
          else
          {
            sub_1C5267E30((const void **)a1, (_QWORD *)v12, (const void **)v7);
            sub_1C5267E30((const void **)(a1 + 32), (_QWORD *)(v12 - 32), v302);
            sub_1C5267E30((const void **)(a1 + 64), (_QWORD *)(a1 + 32 + 32 * v11), v301);
            sub_1C5267E30((const void **)(v12 - 32), (_QWORD *)v12, (const void **)(a1 + 32 + 32 * v11));
            v13 = *(_OWORD *)a1;
            v14 = *(_QWORD *)(a1 + 24);
            v311 = *(const void **)(a1 + 16);
            *(_OWORD *)__p = v13;
            v15 = *(_QWORD *)(v12 + 16);
            v16 = *(_QWORD *)(v12 + 24);
            *(_OWORD *)a1 = *(_OWORD *)v12;
            *(_QWORD *)(a1 + 16) = v15;
            *(_QWORD *)(a1 + 24) = v16;
            v17 = v311;
            *(_OWORD *)v12 = *(_OWORD *)__p;
            *(_QWORD *)(v12 + 16) = v17;
            *(_QWORD *)(v12 + 24) = v14;
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            v18 = *(_BYTE *)(a1 + 23);
            v19 = v18 < 0;
            if (v18 >= 0)
              v20 = (const void *)a1;
            else
              v20 = *(const void **)a1;
            v21 = v18 & 0x7F;
            if (v19)
              v22 = *(_QWORD *)(a1 + 8);
            else
              v22 = v21;
            if (*(char *)(a1 - 9) < 0)
            {
              v23 = *(const void **)(a1 - 32);
              v24 = *(_QWORD *)(a1 - 24);
            }
            else
            {
              v23 = (const void *)(a1 - 32);
              v24 = *(unsigned __int8 *)(a1 - 9);
            }
            if (v22 >= v24)
              v25 = v24;
            else
              v25 = v22;
            v26 = memcmp(v23, v20, v25);
            v27 = v24 < v22;
            if (v26)
              v27 = v26 < 0;
            if (!v27)
            {
              v75 = *(_OWORD *)a1;
              v76 = *(const void **)(a1 + 24);
              v311 = *(const void **)(a1 + 16);
              *(_OWORD *)__p = v75;
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v312 = v76;
              v77 = *(_BYTE *)(a2 - 9);
              v78 = v77 < 0;
              if (v77 >= 0)
                v79 = (const void *)v7;
              else
                v79 = *(const void **)(a2 - 32);
              v80 = v77 & 0x7F;
              if (v78)
                v81 = *(_QWORD *)(a2 - 24);
              else
                v81 = v80;
              if (SHIBYTE(v311) >= 0)
                v82 = (void *)(HIBYTE(v311) & 0x7F);
              else
                v82 = __p[1];
              if (SHIBYTE(v311) >= 0)
                v83 = __p;
              else
                v83 = (void **)__p[0];
              if (v81 >= (unint64_t)v82)
                v84 = (size_t)v82;
              else
                v84 = v81;
              v85 = memcmp(v83, v79, v84);
              v86 = (unint64_t)v82 < v81;
              if (v85)
                v86 = v85 < 0;
              if (v86)
              {
                v87 = (const void **)(a1 + 32);
                do
                {
                  v88 = *((_BYTE *)v87 + 23);
                  v89 = v88 < 0;
                  if (v88 >= 0)
                    v90 = v87;
                  else
                    v90 = *v87;
                  v91 = v88 & 0x7F;
                  if (v89)
                    v92 = (size_t)v87[1];
                  else
                    v92 = v91;
                  if (v92 >= (unint64_t)v82)
                    v93 = (size_t)v82;
                  else
                    v93 = v92;
                  v94 = memcmp(v83, v90, v93);
                  v95 = (unint64_t)v82 < v92;
                  if (v94)
                    v95 = v94 < 0;
                  v87 += 4;
                }
                while (!v95);
                v8 = v87 - 4;
              }
              else
              {
                v96 = (void **)(a1 + 32);
                do
                {
                  v8 = (const void **)v96;
                  if (v96 >= v304)
                    break;
                  v97 = *((_BYTE *)v96 + 23);
                  v98 = v97 < 0;
                  if (v97 >= 0)
                    v99 = v8;
                  else
                    v99 = *v8;
                  v100 = v97 & 0x7F;
                  if (v98)
                    v101 = (size_t)v8[1];
                  else
                    v101 = v100;
                  if (v101 >= (unint64_t)v82)
                    v102 = (size_t)v82;
                  else
                    v102 = v101;
                  v103 = memcmp(v83, v99, v102);
                  v104 = v103 < 0;
                  if (!v103)
                    v104 = (unint64_t)v82 < v101;
                  v96 = (void **)(v8 + 4);
                }
                while (!v104);
              }
              v105 = (unint64_t)v304;
              if (v8 >= (const void **)v304)
                goto LABEL_167;
              v106 = (const void **)v306;
              do
              {
                v107 = *((_BYTE *)v106 + 23);
                v108 = v107 < 0;
                if (v107 >= 0)
                  v109 = v106;
                else
                  v109 = *v106;
                v110 = v107 & 0x7F;
                if (v108)
                  v111 = (size_t)v106[1];
                else
                  v111 = v110;
                if (v111 >= (unint64_t)v82)
                  v112 = (size_t)v82;
                else
                  v112 = v111;
                v113 = memcmp(v83, v109, v112);
                v114 = (unint64_t)v82 < v111;
                if (v113)
                  v114 = v113 < 0;
                v106 -= 4;
              }
              while (v114);
              while (1)
              {
                v105 = (unint64_t)(v106 + 4);
LABEL_167:
                if ((unint64_t)v8 >= v105)
                  break;
                v115 = *(_OWORD *)v8;
                v314 = v8[2];
                v313 = v115;
                v116 = *(_OWORD *)v105;
                v8[2] = *(const void **)(v105 + 16);
                *(_OWORD *)v8 = v116;
                v117 = v313;
                *(_QWORD *)(v105 + 16) = v314;
                *(_OWORD *)v105 = v117;
                v118 = v8[3];
                v8[3] = *(const void **)(v105 + 24);
                *(_QWORD *)(v105 + 24) = v118;
                if (SHIBYTE(v311) >= 0)
                  v119 = (void *)(HIBYTE(v311) & 0x7F);
                else
                  v119 = __p[1];
                if (SHIBYTE(v311) >= 0)
                  v120 = __p;
                else
                  v120 = (void **)__p[0];
                v121 = v8 + 4;
                do
                {
                  v122 = *((_BYTE *)v121 + 23);
                  v123 = v122 < 0;
                  if (v122 >= 0)
                    v124 = v121;
                  else
                    v124 = *v121;
                  v125 = v122 & 0x7F;
                  if (v123)
                    v126 = (size_t)v121[1];
                  else
                    v126 = v125;
                  if (v126 >= (unint64_t)v119)
                    v127 = (size_t)v119;
                  else
                    v127 = v126;
                  v128 = memcmp(v120, v124, v127);
                  v129 = (unint64_t)v119 < v126;
                  if (v128)
                    v129 = v128 < 0;
                  v121 += 4;
                }
                while (!v129);
                v8 = v121 - 4;
                v106 = (const void **)(v105 - 32);
                do
                {
                  v130 = *((_BYTE *)v106 + 23);
                  v131 = v130 < 0;
                  if (v130 >= 0)
                    v132 = v106;
                  else
                    v132 = *v106;
                  v133 = v130 & 0x7F;
                  if (v131)
                    v134 = (size_t)v106[1];
                  else
                    v134 = v133;
                  if (v134 >= (unint64_t)v119)
                    v135 = (size_t)v119;
                  else
                    v135 = v134;
                  v136 = memcmp(v120, v132, v135);
                  v137 = (unint64_t)v119 < v134;
                  if (v136)
                    v137 = v136 < 0;
                  v106 -= 4;
                }
                while (v137);
              }
              v138 = (void **)(v8 - 4);
              a2 = (uint64_t)v304;
              v7 = v306;
              if (v8 - 4 != (const void **)a1)
              {
                if (*(char *)(a1 + 23) < 0)
                  operator delete(*(void **)a1);
                v139 = *(_OWORD *)v138;
                *(_QWORD *)(a1 + 16) = *(v8 - 2);
                *(_OWORD *)a1 = v139;
                *((_BYTE *)v8 - 9) = 0;
                *((_BYTE *)v8 - 32) = 0;
                *(_QWORD *)(a1 + 24) = *(v8 - 1);
              }
              if (*((char *)v8 - 9) < 0)
                operator delete(*v138);
              result = *(__n128 *)__p;
              *(v8 - 2) = v311;
              *(__n128 *)v138 = result;
              HIBYTE(v311) = 0;
              LOBYTE(__p[0]) = 0;
              *(v8 - 1) = v312;
              if (SHIBYTE(v311) < 0)
                operator delete(__p[0]);
              goto LABEL_105;
            }
          }
          v28 = 0;
          v29 = *(_OWORD *)a1;
          v30 = *(const void **)(a1 + 24);
          v311 = *(const void **)(a1 + 16);
          *(_OWORD *)__p = v29;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v312 = v30;
          if (SHIBYTE(v311) >= 0)
            v31 = (void *)(HIBYTE(v311) & 0x7F);
          else
            v31 = __p[1];
          if (SHIBYTE(v311) >= 0)
            v32 = __p;
          else
            v32 = (void **)__p[0];
          do
          {
            v33 = (_QWORD *)(a1 + v28 + 32);
            if (*(char *)(a1 + v28 + 55) < 0)
            {
              v34 = *(_QWORD *)(a1 + v28 + 40);
              v33 = (_QWORD *)*v33;
            }
            else
            {
              v34 = *(unsigned __int8 *)(a1 + v28 + 55);
            }
            if ((unint64_t)v31 >= v34)
              v35 = v34;
            else
              v35 = (size_t)v31;
            v36 = memcmp(v33, v32, v35);
            v37 = v34 < (unint64_t)v31;
            if (v36)
              v37 = v36 < 0;
            v28 += 32;
          }
          while (v37);
          v38 = a1 + v28;
          v39 = (char *)v7;
          if (v28 == 32)
          {
            while (1)
            {
              v45 = v7 + 32;
              if (v38 >= v7 + 32)
                break;
              if (*(char *)(v7 + 23) < 0)
              {
                v47 = *(const void **)v7;
                v46 = *(_QWORD *)(v7 + 8);
              }
              else
              {
                v46 = *(unsigned __int8 *)(v7 + 23);
                v47 = (const void *)v7;
              }
              if ((unint64_t)v31 >= v46)
                v48 = v46;
              else
                v48 = (size_t)v31;
              v49 = memcmp(v47, v32, v48);
              v50 = v46 < (unint64_t)v31;
              if (v49)
                v50 = v49 < 0;
              v7 -= 32;
              if (v50)
              {
                v45 = v7 + 32;
                break;
              }
            }
            v7 = v306;
          }
          else
          {
            do
            {
              if (v39[23] < 0)
              {
                v41 = *(char **)v39;
                v40 = *((_QWORD *)v39 + 1);
              }
              else
              {
                v40 = v39[23];
                v41 = v39;
              }
              if ((unint64_t)v31 >= v40)
                v42 = v40;
              else
                v42 = (size_t)v31;
              v43 = memcmp(v41, v32, v42);
              v44 = v40 < (unint64_t)v31;
              if (v43)
                v44 = v43 < 0;
              v39 -= 32;
            }
            while (!v44);
            v45 = (unint64_t)(v39 + 32);
          }
          v8 = (const void **)v38;
          if (v38 < v45)
          {
            v51 = (char *)v45;
            do
            {
              v52 = *(_OWORD *)v8;
              v314 = v8[2];
              v313 = v52;
              v53 = *(_OWORD *)v51;
              v8[2] = (const void *)*((_QWORD *)v51 + 2);
              *(_OWORD *)v8 = v53;
              v54 = v313;
              *((_QWORD *)v51 + 2) = v314;
              *(_OWORD *)v51 = v54;
              v55 = v8[3];
              v8[3] = (const void *)*((_QWORD *)v51 + 3);
              *((_QWORD *)v51 + 3) = v55;
              if (SHIBYTE(v311) >= 0)
                v56 = __p;
              else
                v56 = (void **)__p[0];
              if (SHIBYTE(v311) >= 0)
                v57 = (void *)(HIBYTE(v311) & 0x7F);
              else
                v57 = __p[1];
              v58 = (char *)(v8 + 4);
              do
              {
                if (v58[23] < 0)
                {
                  v60 = *(char **)v58;
                  v59 = *((_QWORD *)v58 + 1);
                }
                else
                {
                  v59 = v58[23];
                  v60 = v58;
                }
                if ((unint64_t)v57 >= v59)
                  v61 = v59;
                else
                  v61 = (size_t)v57;
                v62 = memcmp(v60, v56, v61);
                v63 = v59 < (unint64_t)v57;
                if (v62)
                  v63 = v62 < 0;
                v58 += 32;
              }
              while (v63);
              v8 = (const void **)(v58 - 32);
              v64 = v51 - 32;
              do
              {
                if (v64[23] < 0)
                {
                  v66 = *(char **)v64;
                  v65 = *((_QWORD *)v64 + 1);
                }
                else
                {
                  v65 = v64[23];
                  v66 = v64;
                }
                if ((unint64_t)v57 >= v65)
                  v67 = v65;
                else
                  v67 = (size_t)v57;
                v68 = memcmp(v66, v56, v67);
                v69 = v65 < (unint64_t)v57;
                if (v68)
                  v69 = v68 < 0;
                v64 -= 32;
              }
              while (!v69);
              v51 = v64 + 32;
            }
            while (v8 < (const void **)v64 + 4);
            a2 = (uint64_t)v304;
            v7 = v306;
          }
          v70 = (void **)(v8 - 4);
          if (v8 - 4 != (const void **)a1)
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v71 = *(_OWORD *)v70;
            *(_QWORD *)(a1 + 16) = *(v8 - 2);
            *(_OWORD *)a1 = v71;
            *((_BYTE *)v8 - 9) = 0;
            *((_BYTE *)v8 - 32) = 0;
            *(_QWORD *)(a1 + 24) = *(v8 - 1);
          }
          if (*((char *)v8 - 9) < 0)
            operator delete(*v70);
          v72 = *(_OWORD *)__p;
          *(v8 - 2) = v311;
          *(_OWORD *)v70 = v72;
          HIBYTE(v311) = 0;
          LOBYTE(__p[0]) = 0;
          *(v8 - 1) = v312;
          if (SHIBYTE(v311) < 0)
            operator delete(__p[0]);
          if (v38 < v45)
            goto LABEL_104;
          v73 = sub_1C52680D4(a1, (uint64_t)(v8 - 4));
          if (!sub_1C52680D4((uint64_t)v8, a2))
          {
            if (v73)
              continue;
LABEL_104:
            sub_1C5266928(a1, v8 - 4, a3, a4 & 1);
LABEL_105:
            a4 = 0;
            continue;
          }
          a2 = (uint64_t)(v8 - 4);
          if (v73)
            return result;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if (a1 != a2)
          {
            v147 = a1 + 32;
            if (a1 + 32 != a2)
            {
              v148 = 0;
              v149 = (const void **)a1;
              do
              {
                v150 = (const void **)v147;
                v151 = *((_BYTE *)v149 + 23);
                v152 = v151 < 0;
                if (v151 >= 0)
                  v153 = v149;
                else
                  v153 = *v149;
                v154 = v151 & 0x7F;
                if (v152)
                  v155 = (size_t)v149[1];
                else
                  v155 = v154;
                if (*((char *)v149 + 55) < 0)
                {
                  v156 = (size_t)v149[5];
                  v157 = *v150;
                }
                else
                {
                  v156 = *((unsigned __int8 *)v149 + 55);
                  v157 = v150;
                }
                if (v155 >= v156)
                  v158 = v156;
                else
                  v158 = v155;
                v159 = memcmp(v157, v153, v158);
                v160 = v156 < v155;
                if (v159)
                  v160 = v159 < 0;
                if (v160)
                {
                  v161 = *(_OWORD *)v150;
                  v311 = v150[2];
                  *(_OWORD *)__p = v161;
                  v150[1] = 0;
                  v150[2] = 0;
                  *v150 = 0;
                  v312 = v149[7];
                  v162 = v148;
                  while (1)
                  {
                    v163 = a1 + v162;
                    v164 = (void **)(a1 + v162 + 32);
                    if (*(char *)(a1 + v162 + 55) < 0)
                      operator delete(*v164);
                    *(_OWORD *)v164 = *(_OWORD *)v163;
                    v165 = *(_QWORD *)(v163 + 24);
                    *(_QWORD *)(a1 + v162 + 48) = *(_QWORD *)(v163 + 16);
                    *(_BYTE *)(v163 + 23) = 0;
                    *(_BYTE *)v163 = 0;
                    *(_QWORD *)(v163 + 56) = v165;
                    if (!v162)
                      break;
                    v166 = *(_BYTE *)(a1 + v162 - 9);
                    if (v166 >= 0)
                      v167 = (const void *)(a1 + v162 - 32);
                    else
                      v167 = *(const void **)(a1 + v162 - 32);
                    if (v166 >= 0)
                      v168 = v166 & 0x7F;
                    else
                      v168 = *(_QWORD *)(a1 + v162 - 24);
                    if (SHIBYTE(v311) >= 0)
                      v169 = (void *)(HIBYTE(v311) & 0x7F);
                    else
                      v169 = __p[1];
                    if (SHIBYTE(v311) >= 0)
                      v170 = __p;
                    else
                      v170 = (void **)__p[0];
                    if (v168 >= (unint64_t)v169)
                      v171 = (size_t)v169;
                    else
                      v171 = v168;
                    v172 = memcmp(v170, v167, v171);
                    v173 = (unint64_t)v169 < v168;
                    if (v172)
                      v173 = v172 < 0;
                    v162 -= 32;
                    if (!v173)
                    {
                      v174 = a1 + v162 + 32;
                      goto LABEL_266;
                    }
                  }
                  v174 = a1;
LABEL_266:
                  if (*(char *)(v174 + 23) < 0)
                    operator delete(*(void **)v174);
                  result = *(__n128 *)__p;
                  *(_QWORD *)(v174 + 16) = v311;
                  *(__n128 *)v174 = result;
                  *(_QWORD *)(v174 + 24) = v312;
                }
                v147 = (uint64_t)(v150 + 4);
                v148 += 32;
                v149 = v150;
              }
              while (v150 + 4 != (const void **)v304);
            }
          }
        }
        else if (a1 != a2)
        {
          v267 = a1 + 32;
          if (a1 + 32 != a2)
          {
            v268 = (_QWORD *)(a1 + 56);
            do
            {
              v269 = (const void **)v267;
              v270 = *(_BYTE *)(a1 + 23);
              v271 = v270 < 0;
              if (v270 >= 0)
                v272 = (const void *)a1;
              else
                v272 = *(const void **)a1;
              v273 = v270 & 0x7F;
              if (v271)
                v274 = *(_QWORD *)(a1 + 8);
              else
                v274 = v273;
              if (*(char *)(a1 + 55) < 0)
              {
                v275 = *(_QWORD *)(a1 + 40);
                v276 = *v269;
              }
              else
              {
                v275 = *(unsigned __int8 *)(a1 + 55);
                v276 = v269;
              }
              if (v274 >= v275)
                v277 = v275;
              else
                v277 = v274;
              v278 = memcmp(v276, v272, v277);
              v279 = v275 < v274;
              if (v278)
                v279 = v278 < 0;
              if (v279)
              {
                v280 = *(_OWORD *)v269;
                v311 = v269[2];
                *(_OWORD *)__p = v280;
                v269[1] = 0;
                v269[2] = 0;
                *v269 = 0;
                v312 = *(const void **)(a1 + 56);
                v281 = v268;
                do
                {
                  v282 = (void **)(v281 - 3);
                  if (*((char *)v281 - 1) < 0)
                    operator delete(*v282);
                  *(_OWORD *)v282 = *(_OWORD *)(v281 - 7);
                  *(v281 - 1) = *(v281 - 5);
                  *((_BYTE *)v281 - 33) = 0;
                  *((_BYTE *)v281 - 56) = 0;
                  v283 = v281 - 4;
                  *v281 = *(v281 - 4);
                  v284 = *((_BYTE *)v281 - 65);
                  v285 = v284;
                  if (v284 >= 0)
                    v286 = v281 - 11;
                  else
                    v286 = (_QWORD *)*(v281 - 11);
                  v287 = v284 & 0x7F;
                  if (v285 >= 0)
                    v288 = v287;
                  else
                    v288 = *(v281 - 10);
                  if (SHIBYTE(v311) >= 0)
                    v289 = (void *)(HIBYTE(v311) & 0x7F);
                  else
                    v289 = __p[1];
                  if (SHIBYTE(v311) >= 0)
                    v290 = __p;
                  else
                    v290 = (void **)__p[0];
                  if (v288 >= (unint64_t)v289)
                    v291 = (size_t)v289;
                  else
                    v291 = v288;
                  v292 = memcmp(v290, v286, v291);
                  v293 = (unint64_t)v289 < v288;
                  if (v292)
                    v293 = v292 < 0;
                  v281 = v283;
                }
                while (v293);
                v294 = (void **)(v283 - 3);
                if (*((char *)v283 - 1) < 0)
                  operator delete(*v294);
                result = *(__n128 *)__p;
                *(v283 - 1) = v311;
                *(__n128 *)v294 = result;
                HIBYTE(v311) = 0;
                LOBYTE(__p[0]) = 0;
                *v283 = v312;
              }
              v267 = (uint64_t)(v269 + 4);
              v268 += 4;
              a1 = (uint64_t)v269;
            }
            while (v269 + 4 != (const void **)a2);
          }
        }
        return result;
    }
  }
}

__n128 sub_1C5267BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v10;
  BOOL v11;
  const void *v12;
  size_t v13;
  size_t v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  __n128 result;
  _BOOL4 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  BOOL v26;
  const void *v27;
  size_t v28;
  size_t v29;
  size_t v30;
  const void *v31;
  size_t v32;
  int v33;
  _BOOL4 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  BOOL v40;
  const void *v41;
  size_t v42;
  size_t v43;
  size_t v44;
  const void *v45;
  size_t v46;
  int v47;
  _BOOL4 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  BOOL v54;
  const void *v55;
  size_t v56;
  size_t v57;
  size_t v58;
  const void *v59;
  size_t v60;
  int v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  sub_1C52683DC(a1, (__int128 *)a2, (__int128 *)a3, (__int128 *)a4);
  v10 = *(_BYTE *)(a4 + 23);
  v11 = v10 < 0;
  if (v10 >= 0)
    v12 = (const void *)a4;
  else
    v12 = *(const void **)a4;
  v13 = v10 & 0x7F;
  if (v11)
    v14 = *(_QWORD *)(a4 + 8);
  else
    v14 = v13;
  if (*(char *)(a5 + 23) < 0)
  {
    v16 = *(const void **)a5;
    v15 = *(_QWORD *)(a5 + 8);
  }
  else
  {
    v15 = *(unsigned __int8 *)(a5 + 23);
    v16 = (const void *)a5;
  }
  if (v14 >= v15)
    v17 = v15;
  else
    v17 = v14;
  v18 = memcmp(v16, v12, v17);
  v20 = v15 < v14;
  if (v18)
    v20 = v18 < 0;
  if (v20)
  {
    v21 = *(_QWORD *)(a4 + 16);
    v22 = *(_OWORD *)a4;
    v23 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v23;
    *(_OWORD *)a5 = v22;
    *(_QWORD *)(a5 + 16) = v21;
    v24 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 24) = *(_QWORD *)(a5 + 24);
    *(_QWORD *)(a5 + 24) = v24;
    v25 = *(_BYTE *)(a3 + 23);
    v26 = v25 < 0;
    if (v25 >= 0)
      v27 = (const void *)a3;
    else
      v27 = *(const void **)a3;
    v28 = v25 & 0x7F;
    if (v26)
      v29 = *(_QWORD *)(a3 + 8);
    else
      v29 = v28;
    if (*(char *)(a4 + 23) < 0)
    {
      v31 = *(const void **)a4;
      v30 = *(_QWORD *)(a4 + 8);
    }
    else
    {
      v30 = *(unsigned __int8 *)(a4 + 23);
      v31 = (const void *)a4;
    }
    if (v29 >= v30)
      v32 = v30;
    else
      v32 = v29;
    v33 = memcmp(v31, v27, v32);
    v34 = v30 < v29;
    if (v33)
      v34 = v33 < 0;
    if (v34)
    {
      v35 = *(_QWORD *)(a3 + 16);
      v36 = *(_OWORD *)a3;
      v37 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v37;
      *(_OWORD *)a4 = v36;
      *(_QWORD *)(a4 + 16) = v35;
      v38 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(a4 + 24);
      *(_QWORD *)(a4 + 24) = v38;
      v39 = *(_BYTE *)(a2 + 23);
      v40 = v39 < 0;
      if (v39 >= 0)
        v41 = (const void *)a2;
      else
        v41 = *(const void **)a2;
      v42 = v39 & 0x7F;
      if (v40)
        v43 = *(_QWORD *)(a2 + 8);
      else
        v43 = v42;
      if (*(char *)(a3 + 23) < 0)
      {
        v45 = *(const void **)a3;
        v44 = *(_QWORD *)(a3 + 8);
      }
      else
      {
        v44 = *(unsigned __int8 *)(a3 + 23);
        v45 = (const void *)a3;
      }
      if (v43 >= v44)
        v46 = v44;
      else
        v46 = v43;
      v47 = memcmp(v45, v41, v46);
      v48 = v44 < v43;
      if (v47)
        v48 = v47 < 0;
      if (v48)
      {
        v49 = *(_QWORD *)(a2 + 16);
        v50 = *(_OWORD *)a2;
        v51 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v51;
        *(_OWORD *)a3 = v50;
        *(_QWORD *)(a3 + 16) = v49;
        v52 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a3 + 24) = v52;
        v53 = *(_BYTE *)(a1 + 23);
        v54 = v53 < 0;
        if (v53 >= 0)
          v55 = (const void *)a1;
        else
          v55 = *(const void **)a1;
        v56 = v53 & 0x7F;
        if (v54)
          v57 = *(_QWORD *)(a1 + 8);
        else
          v57 = v56;
        if (*(char *)(a2 + 23) < 0)
        {
          v59 = *(const void **)a2;
          v58 = *(_QWORD *)(a2 + 8);
        }
        else
        {
          v58 = *(unsigned __int8 *)(a2 + 23);
          v59 = (const void *)a2;
        }
        if (v57 >= v58)
          v60 = v58;
        else
          v60 = v57;
        v61 = memcmp(v59, v55, v60);
        v62 = v58 < v57;
        if (v61)
          v62 = v61 < 0;
        if (v62)
        {
          v63 = *(_QWORD *)(a1 + 16);
          result = *(__n128 *)a1;
          v64 = *(_QWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v64;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 16) = v63;
          v65 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a2 + 24) = v65;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5267E30(const void **a1, _QWORD *__s1, const void **a3)
{
  char v6;
  BOOL v7;
  const void *v8;
  size_t v9;
  size_t v10;
  size_t v11;
  _QWORD *v12;
  size_t v13;
  int v14;
  BOOL v15;
  size_t v16;
  const void *v17;
  size_t v18;
  uint64_t result;
  _BOOL4 v20;
  uint64_t *v21;
  const void *v22;
  __int128 v23;
  const void *v24;
  size_t v25;
  _BOOL4 v26;
  const void *v27;
  __int128 v28;
  const void *v29;
  const void *v30;
  uint64_t *v31;
  char v32;
  BOOL v33;
  const void *v34;
  size_t v35;
  size_t v36;
  size_t v37;
  _QWORD *v38;
  const void *v39;
  __int128 v40;
  const void *v41;
  const void *v42;
  char v43;
  BOOL v44;
  _QWORD *v45;
  size_t v46;
  size_t v47;
  size_t v48;
  const void *v49;
  size_t v50;
  _BOOL4 v51;
  const void *v52;
  __int128 v53;
  const void *v54;
  size_t v55;
  _BOOL4 v56;
  const void *v57;
  uint64_t v58;

  v6 = *((_BYTE *)a1 + 23);
  v7 = v6 < 0;
  if (v6 >= 0)
    v8 = a1;
  else
    v8 = *a1;
  v9 = v6 & 0x7F;
  if (v7)
    v10 = (size_t)a1[1];
  else
    v10 = v9;
  if (*((char *)__s1 + 23) < 0)
  {
    v12 = (_QWORD *)*__s1;
    v11 = __s1[1];
  }
  else
  {
    v11 = *((unsigned __int8 *)__s1 + 23);
    v12 = __s1;
  }
  if (v10 >= v11)
    v13 = v11;
  else
    v13 = v10;
  v14 = memcmp(v12, v8, v13);
  v15 = v11 < v10;
  if (v14)
    v15 = v14 < 0;
  v16 = *((unsigned __int8 *)a3 + 23);
  v17 = a3;
  if (v15)
  {
    if ((v16 & 0x80) != 0)
    {
      v17 = *a3;
      v16 = (size_t)a3[1];
    }
    if (v11 >= v16)
      v18 = v16;
    else
      v18 = v11;
    result = memcmp(v17, v12, v18);
    v20 = v16 < v11;
    if ((_DWORD)result)
      v20 = (int)result < 0;
    if (v20)
    {
      v21 = (uint64_t *)(a1 + 3);
      v22 = a1[2];
      v23 = *(_OWORD *)a1;
      v24 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v24;
LABEL_65:
      *(_OWORD *)a3 = v23;
      a3[2] = v22;
      v31 = (uint64_t *)(a3 + 3);
      goto LABEL_66;
    }
    v39 = a1[2];
    v40 = *(_OWORD *)a1;
    v41 = (const void *)__s1[2];
    *(_OWORD *)a1 = *(_OWORD *)__s1;
    a1[2] = v41;
    *(_OWORD *)__s1 = v40;
    __s1[2] = v39;
    v21 = __s1 + 3;
    v42 = a1[3];
    a1[3] = (const void *)__s1[3];
    __s1[3] = v42;
    v43 = *((_BYTE *)__s1 + 23);
    v44 = v43 < 0;
    if (v43 >= 0)
      v45 = __s1;
    else
      v45 = (_QWORD *)*__s1;
    v46 = v43 & 0x7F;
    if (v44)
      v47 = __s1[1];
    else
      v47 = v46;
    if (*((char *)a3 + 23) < 0)
    {
      v49 = *a3;
      v48 = (size_t)a3[1];
    }
    else
    {
      v48 = *((unsigned __int8 *)a3 + 23);
      v49 = a3;
    }
    if (v47 >= v48)
      v55 = v48;
    else
      v55 = v47;
    result = memcmp(v49, v45, v55);
    v56 = v48 < v47;
    if ((_DWORD)result)
      v56 = (int)result < 0;
    if (v56)
    {
      v22 = (const void *)__s1[2];
      v23 = *(_OWORD *)__s1;
      v57 = a3[2];
      *(_OWORD *)__s1 = *(_OWORD *)a3;
      __s1[2] = v57;
      goto LABEL_65;
    }
  }
  else
  {
    if ((v16 & 0x80) != 0)
    {
      v17 = *a3;
      v16 = (size_t)a3[1];
    }
    if (v11 >= v16)
      v25 = v16;
    else
      v25 = v11;
    result = memcmp(v17, v12, v25);
    v26 = v16 < v11;
    if ((_DWORD)result)
      v26 = (int)result < 0;
    if (v26)
    {
      v27 = (const void *)__s1[2];
      v28 = *(_OWORD *)__s1;
      v29 = a3[2];
      *(_OWORD *)__s1 = *(_OWORD *)a3;
      __s1[2] = v29;
      *(_OWORD *)a3 = v28;
      a3[2] = v27;
      v31 = __s1 + 3;
      v30 = (const void *)__s1[3];
      __s1[3] = a3[3];
      a3[3] = v30;
      v32 = *((_BYTE *)a1 + 23);
      v33 = v32 < 0;
      if (v32 >= 0)
        v34 = a1;
      else
        v34 = *a1;
      v35 = v32 & 0x7F;
      if (v33)
        v36 = (size_t)a1[1];
      else
        v36 = v35;
      if (*((char *)__s1 + 23) < 0)
      {
        v38 = (_QWORD *)*__s1;
        v37 = __s1[1];
      }
      else
      {
        v37 = *((unsigned __int8 *)__s1 + 23);
        v38 = __s1;
      }
      if (v36 >= v37)
        v50 = v37;
      else
        v50 = v36;
      result = memcmp(v38, v34, v50);
      v51 = v37 < v36;
      if ((_DWORD)result)
        v51 = (int)result < 0;
      if (v51)
      {
        v52 = a1[2];
        v53 = *(_OWORD *)a1;
        v54 = (const void *)__s1[2];
        *(_OWORD *)a1 = *(_OWORD *)__s1;
        a1[2] = v54;
        *(_OWORD *)__s1 = v53;
        __s1[2] = v52;
        v21 = (uint64_t *)(a1 + 3);
LABEL_66:
        v58 = *v21;
        *v21 = *v31;
        *v31 = v58;
      }
    }
  }
  return result;
}

BOOL sub_1C52680D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  char v7;
  BOOL v8;
  const void *v9;
  size_t v10;
  size_t v11;
  size_t v12;
  const void *v13;
  const void **v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  BOOL v19;
  const void *v20;
  size_t v21;
  size_t v22;
  size_t v23;
  const void *v24;
  size_t v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  char v33;
  const void *v34;
  size_t v35;
  size_t v36;
  __int128 *v37;
  size_t v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  int v44;
  _BOOL4 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (_OWORD *)(a2 - 32);
      v7 = *(_BYTE *)(a1 + 23);
      v8 = v7 < 0;
      if (v7 >= 0)
        v9 = (const void *)a1;
      else
        v9 = *(const void **)a1;
      v10 = v7 & 0x7F;
      if (v8)
        v11 = *(_QWORD *)(a1 + 8);
      else
        v11 = v10;
      if (*(char *)(a2 - 9) < 0)
      {
        v13 = *(const void **)(a2 - 32);
        v12 = *(_QWORD *)(a2 - 24);
      }
      else
      {
        v12 = *(unsigned __int8 *)(a2 - 9);
        v13 = (const void *)(a2 - 32);
      }
      if (v11 >= v12)
        v43 = v12;
      else
        v43 = v11;
      v44 = memcmp(v13, v9, v43);
      v45 = v12 < v11;
      if (v44)
        v45 = v44 < 0;
      if (v45)
      {
        v46 = *(_QWORD *)(a1 + 16);
        v47 = *(_OWORD *)a1;
        v48 = *(_QWORD *)(a2 - 16);
        *(_OWORD *)a1 = *v6;
        *(_QWORD *)(a1 + 16) = v48;
        *v6 = v47;
        *(_QWORD *)(a2 - 16) = v46;
        v49 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v49;
      }
      return 1;
    case 3:
      sub_1C5267E30((const void **)a1, (_QWORD *)(a1 + 32), (const void **)(a2 - 32));
      return 1;
    case 4:
      sub_1C52683DC(a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64), (__int128 *)(a2 - 32));
      return 1;
    case 5:
      sub_1C5267BB0(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      return 1;
    default:
      v14 = (const void **)(a1 + 64);
      sub_1C5267E30((const void **)a1, (_QWORD *)(a1 + 32), (const void **)(a1 + 64));
      v15 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    v18 = *((_BYTE *)v14 + 23);
    v19 = v18 < 0;
    if (v18 >= 0)
      v20 = v14;
    else
      v20 = *v14;
    v21 = v18 & 0x7F;
    if (v19)
      v22 = (size_t)v14[1];
    else
      v22 = v21;
    if (*(char *)(v15 + 23) < 0)
    {
      v24 = *(const void **)v15;
      v23 = *(_QWORD *)(v15 + 8);
    }
    else
    {
      v23 = *(unsigned __int8 *)(v15 + 23);
      v24 = (const void *)v15;
    }
    if (v22 >= v23)
      v25 = v23;
    else
      v25 = v22;
    v26 = memcmp(v24, v20, v25);
    v27 = v23 < v22;
    if (v26)
      v27 = v26 < 0;
    if (v27)
    {
      v50 = *(_OWORD *)v15;
      v28 = *(_QWORD *)(v15 + 16);
      v29 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v15 + 16) = 0;
      *(_QWORD *)v15 = 0;
      v51 = v28;
      v52 = v29;
      v30 = v16;
      while (1)
      {
        v31 = a1 + v30;
        v32 = (void **)(a1 + v30 + 96);
        if (*(char *)(a1 + v30 + 119) < 0)
          operator delete(*v32);
        *(_OWORD *)v32 = *(_OWORD *)(v31 + 64);
        *(_QWORD *)(a1 + v30 + 112) = *(_QWORD *)(v31 + 80);
        *(_BYTE *)(v31 + 87) = 0;
        *(_BYTE *)(v31 + 64) = 0;
        *(_QWORD *)(v31 + 120) = *(_QWORD *)(v31 + 88);
        if (v30 == -64)
          break;
        v33 = *(_BYTE *)(a1 + v30 + 55);
        if (v33 >= 0)
          v34 = (const void *)(a1 + v30 + 32);
        else
          v34 = *(const void **)(a1 + v30 + 32);
        if (v33 >= 0)
          v35 = v33 & 0x7F;
        else
          v35 = *(_QWORD *)(a1 + v30 + 40);
        if (v51 >= 0)
          v36 = HIBYTE(v51) & 0x7F;
        else
          v36 = *((_QWORD *)&v50 + 1);
        if (v51 >= 0)
          v37 = &v50;
        else
          v37 = (__int128 *)v50;
        if (v35 >= v36)
          v38 = v36;
        else
          v38 = v35;
        v39 = memcmp(v37, v34, v38);
        v40 = v36 < v35;
        if (v39)
          v40 = v39 < 0;
        v30 -= 32;
        if (!v40)
        {
          v41 = a1 + v30 + 96;
          goto LABEL_51;
        }
      }
      v41 = a1;
LABEL_51:
      if (*(char *)(v41 + 23) < 0)
        operator delete(*(void **)v41);
      *(_OWORD *)v41 = v50;
      v42 = v52;
      *(_QWORD *)(v41 + 16) = v51;
      *(_QWORD *)(v41 + 24) = v42;
      if (++v17 == 8)
        return v15 + 32 == a2;
    }
    v14 = (const void **)v15;
    v16 += 32;
    v15 += 32;
    if (v15 == a2)
      return 1;
  }
}

__n128 sub_1C52683DC(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  char v8;
  BOOL v9;
  const void *v10;
  size_t v11;
  size_t v12;
  size_t v13;
  const void *v14;
  size_t v15;
  int v16;
  __n128 result;
  _BOOL4 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  BOOL v24;
  const void *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  const void *v29;
  size_t v30;
  int v31;
  _BOOL4 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  BOOL v38;
  const void *v39;
  size_t v40;
  size_t v41;
  size_t v42;
  const void *v43;
  size_t v44;
  int v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  sub_1C5267E30((const void **)a1, a2, (const void **)a3);
  v8 = *((_BYTE *)a3 + 23);
  v9 = v8 < 0;
  if (v8 >= 0)
    v10 = a3;
  else
    v10 = *(const void **)a3;
  v11 = v8 & 0x7F;
  if (v9)
    v12 = *((_QWORD *)a3 + 1);
  else
    v12 = v11;
  if (*((char *)a4 + 23) < 0)
  {
    v14 = *(const void **)a4;
    v13 = *((_QWORD *)a4 + 1);
  }
  else
  {
    v13 = *((unsigned __int8 *)a4 + 23);
    v14 = a4;
  }
  if (v12 >= v13)
    v15 = v13;
  else
    v15 = v12;
  v16 = memcmp(v14, v10, v15);
  v18 = v13 < v12;
  if (v16)
    v18 = v16 < 0;
  if (v18)
  {
    v19 = *((_QWORD *)a3 + 2);
    v20 = *a3;
    v21 = *((_QWORD *)a4 + 2);
    *a3 = *a4;
    *((_QWORD *)a3 + 2) = v21;
    *a4 = v20;
    *((_QWORD *)a4 + 2) = v19;
    v22 = *((_QWORD *)a3 + 3);
    *((_QWORD *)a3 + 3) = *((_QWORD *)a4 + 3);
    *((_QWORD *)a4 + 3) = v22;
    v23 = *((_BYTE *)a2 + 23);
    v24 = v23 < 0;
    if (v23 >= 0)
      v25 = a2;
    else
      v25 = *(const void **)a2;
    v26 = v23 & 0x7F;
    if (v24)
      v27 = *((_QWORD *)a2 + 1);
    else
      v27 = v26;
    if (*((char *)a3 + 23) < 0)
    {
      v29 = *(const void **)a3;
      v28 = *((_QWORD *)a3 + 1);
    }
    else
    {
      v28 = *((unsigned __int8 *)a3 + 23);
      v29 = a3;
    }
    if (v27 >= v28)
      v30 = v28;
    else
      v30 = v27;
    v31 = memcmp(v29, v25, v30);
    v32 = v28 < v27;
    if (v31)
      v32 = v31 < 0;
    if (v32)
    {
      v33 = *((_QWORD *)a2 + 2);
      v34 = *a2;
      v35 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v35;
      *a3 = v34;
      *((_QWORD *)a3 + 2) = v33;
      v36 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a2 + 3) = *((_QWORD *)a3 + 3);
      *((_QWORD *)a3 + 3) = v36;
      v37 = *(_BYTE *)(a1 + 23);
      v38 = v37 < 0;
      if (v37 >= 0)
        v39 = (const void *)a1;
      else
        v39 = *(const void **)a1;
      v40 = v37 & 0x7F;
      if (v38)
        v41 = *(_QWORD *)(a1 + 8);
      else
        v41 = v40;
      if (*((char *)a2 + 23) < 0)
      {
        v43 = *(const void **)a2;
        v42 = *((_QWORD *)a2 + 1);
      }
      else
      {
        v42 = *((unsigned __int8 *)a2 + 23);
        v43 = a2;
      }
      if (v41 >= v42)
        v44 = v42;
      else
        v44 = v41;
      v45 = memcmp(v43, v39, v44);
      v46 = v42 < v41;
      if (v45)
        v46 = v45 < 0;
      if (v46)
      {
        v47 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v48 = *((_QWORD *)a2 + 2);
        *(_OWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 16) = v48;
        *a2 = (__int128)result;
        *((_QWORD *)a2 + 2) = v47;
        v49 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        *((_QWORD *)a2 + 3) = v49;
      }
    }
  }
  return result;
}

void sub_1C52685C8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C52685DC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E814A098;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5268610(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E814A098;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C526862C(uint64_t a1)
{
  return **(_QWORD **)(a1 + 8);
}

void sub_1C526863C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5268650(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E814A0E0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5268684(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E814A0E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C52686A0(uint64_t a1)
{
  return *(_QWORD *)(**(_QWORD **)(a1 + 8) + 56);
}

uint64_t sub_1C52686B0()
{
  __n128 v1;
  __int128 v2;
  int v3;
  int *v4;
  int v5;

  v5 = 1;
  v3 = -1;
  v4 = &v3;
  *(_QWORD *)&v2 = "N";
  *((_QWORD *)&v2 + 1) = 1;
  v1.n128_u64[0] = (unint64_t)"Function number to canonicalize.";
  v1.n128_u64[1] = 32;
  sub_1C620ECF0(&v5, &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7FF430, &dword_1C475E000);
}

uint64_t sub_1C526872C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Register Usage Information Storage";
  *(_QWORD *)(v2 + 8) = 34;
  *(_QWORD *)(v2 + 16) = "reg-usage-info";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &llvm::PhysicalRegisterUsageInfo::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::PhysicalRegisterUsageInfo>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::PhysicalRegisterUsageInfo::setTargetMachine(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 56) = a2;
  return result;
}

uint64_t llvm::PhysicalRegisterUsageInfo::doInitialization(llvm::PhysicalRegisterUsageInfo *this, llvm::Module *a2)
{
  char *v2;
  int v3;
  char *v4;

  v2 = (char *)a2 + 24;
  v3 = -1;
  v4 = v2;
  do
  {
    v4 = (char *)*((_QWORD *)v4 + 1);
    ++v3;
  }
  while (v4 != v2);
  sub_1C5268800((uint64_t)this + 32, v3);
  return 0;
}

_QWORD *sub_1C5268800(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 32 * v3;
      v13 = (_QWORD *)v4;
      do
      {
        if (*v13 != -4096 && *v13 != -8192)
        {
          v17 = v13;
          v18 = 0;
          sub_1C5269044((uint64_t *)a1, v13, &v18);
          v13 = v17;
          v14 = v18;
          *v18 = *v17;
          v14[1] = 0;
          v14[2] = 0;
          v14[3] = 0;
          *(_OWORD *)(v14 + 1) = *(_OWORD *)(v17 + 1);
          v14[3] = v17[3];
          v17[1] = 0;
          v17[2] = 0;
          v17[3] = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 4;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
  {
    v16 = 32 * v15;
    do
    {
      *result = -4096;
      result += 4;
      v16 -= 32;
    }
    while (v16);
  }
  return result;
}

uint64_t llvm::PhysicalRegisterUsageInfo::doFinalization(llvm::PhysicalRegisterUsageInfo *this, llvm::Module *a2)
{
  _QWORD *v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  if (byte_1ED7FF570)
  {
    v15 = llvm::errs(this);
    (*(void (**)(llvm::PhysicalRegisterUsageInfo *, void *, _QWORD))(*(_QWORD *)this + 40))(this, v15, 0);
  }
  v3 = (_QWORD *)((char *)this + 32);
  v4 = *((_DWORD *)this + 10);
  sub_1C5268FE0((unsigned int *)this + 8);
  if (v4)
  {
    v5 = 1 << (33 - __clz(v4 - 1));
    if (v5 <= 64)
      v6 = 64;
    else
      v6 = v5;
    if (v6 == *((_DWORD *)this + 12))
    {
      *((_QWORD *)this + 5) = 0;
      v7 = 32 * v6;
      v8 = (_QWORD *)*((_QWORD *)this + 4);
      do
      {
        *v8 = -4096;
        v8 += 4;
        v7 -= 32;
      }
      while (v7);
    }
    else
    {
      MEMORY[0x1CAA32FB4](*((_QWORD *)this + 4), 8);
      v10 = (4 * v6 / 3 + 1) | ((unint64_t)(4 * v6 / 3 + 1) >> 1);
      v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
      LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
      *((_DWORD *)this + 12) = v11;
      v12 = operator new(32 * v11, (std::align_val_t)8uLL);
      *((_QWORD *)this + 4) = v12;
      *((_QWORD *)this + 5) = 0;
      v13 = *((unsigned int *)this + 12);
      if ((_DWORD)v13)
      {
        v14 = 32 * v13;
        do
        {
          *v12 = -4096;
          v12 += 4;
          v14 -= 32;
        }
        while (v14);
      }
    }
  }
  else if (*((_DWORD *)this + 12))
  {
    MEMORY[0x1CAA32FB4](*v3, 8);
    *v3 = 0;
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  return 0;
}

double llvm::PhysicalRegisterUsageInfo::storeUpdateRegUsageInfo(uint64_t a1, uint64_t a2, const void *a3, unint64_t a4)
{
  _QWORD *v6;
  void *v7;
  double result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v10 = 0uLL;
  v11 = 0;
  sub_1C4979194(&v10, a3, (uint64_t)a3 + 4 * a4, a4);
  v9 = a2;
  v6 = sub_1C52690E0((uint64_t *)(a1 + 32), &v9);
  v7 = (void *)v6[1];
  if (v7)
  {
    v6[2] = v7;
    operator delete(v7);
  }
  result = *(double *)&v10;
  *(_OWORD *)(v6 + 1) = v10;
  v6[3] = v11;
  return result;
}

uint64_t llvm::PhysicalRegisterUsageInfo::getRegUsageInfo(llvm::PhysicalRegisterUsageInfo *this, const llvm::Function *a2)
{
  uint64_t result;
  const llvm::Function *v4;
  uint64_t v5;

  v4 = a2;
  v5 = 0;
  if (!sub_1C5269044((uint64_t *)this + 4, &v4, &v5))
    return 0;
  result = 0;
  if (v5 != *((_QWORD *)this + 4) + 32 * *((unsigned int *)this + 12))
    return *(_QWORD *)(v5 + 8);
  return result;
}

void llvm::PhysicalRegisterUsageInfo::print(llvm::PhysicalRegisterUsageInfo *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t *****v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t ****v17;
  uint64_t ***v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ****v23;
  uint64_t ***v24;
  int v25;
  int v26;
  uint64_t ***v27;
  const char *v28;
  size_t v29;
  size_t v30;
  _BYTE *v31;
  llvm::raw_ostream *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t i;
  _DWORD *v39;
  _BYTE *v40;
  void (**v41)(void);
  _BYTE *v42;
  uint64_t v44;
  uint64_t *v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[66];

  v48[64] = *MEMORY[0x1E0C80C00];
  v46 = v48;
  v47 = 0x4000000000;
  v4 = *((_QWORD *)this + 4);
  v5 = *((unsigned int *)this + 12);
  v6 = (_QWORD *)(v4 + 32 * v5);
  if (*((_DWORD *)this + 10))
  {
    if ((_DWORD)v5)
    {
      v7 = 32 * v5;
      v8 = (_QWORD *)*((_QWORD *)this + 4);
      while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v8 += 4;
        v7 -= 32;
        if (!v7)
          goto LABEL_6;
      }
    }
    else
    {
      v8 = (_QWORD *)*((_QWORD *)this + 4);
    }
  }
  else
  {
LABEL_6:
    v8 = (_QWORD *)(v4 + 32 * v5);
  }
  v9 = (_QWORD *)(v4 + 32 * v5);
  if (v8 == v9)
  {
    v13 = (uint64_t *****)v48;
    v12 = (char *)v48;
LABEL_21:
    v14 = 0;
    goto LABEL_22;
  }
  LODWORD(v10) = 0;
  do
  {
    if (v10 >= HIDWORD(v47))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v10 + 1, 8);
      LODWORD(v10) = v47;
    }
    *((_QWORD *)v46 + v10) = v8;
    v10 = (v47 + 1);
    LODWORD(v47) = v47 + 1;
    v11 = v8 + 4;
    v8 = v6;
    if (v11 != v6)
    {
      v8 = v11;
      while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v8 += 4;
        if (v8 == v6)
        {
          v8 = v6;
          break;
        }
      }
    }
  }
  while (v8 != v9);
  v12 = (char *)v46;
  v13 = (uint64_t *****)((char *)v46 + 8 * v10);
  if (!(_DWORD)v10)
    goto LABEL_21;
  v14 = 126 - 2 * __clz(v10);
LABEL_22:
  sub_1C52691EC(v12, v13, v14, 1);
  v15 = (char *)v46;
  if (!(_DWORD)v47)
    goto LABEL_62;
  v16 = (char *)v46 + 8 * v47;
  do
  {
    v17 = *(uint64_t *****)v15;
    v18 = **(uint64_t *****)v15;
    if ((*((_BYTE *)v18 + 23) & 0x10) == 0)
    {
      v31 = (_BYTE *)*((_QWORD *)a2 + 4);
      goto LABEL_36;
    }
    v19 = ***v18;
    v20 = *(_QWORD *)(v19 + 152);
    v21 = *(unsigned int *)(v19 + 168);
    if (!(_DWORD)v21)
      goto LABEL_31;
    LODWORD(v22) = (v21 - 1) & ((v18 >> 4) ^ (v18 >> 9));
    v23 = (uint64_t ****)(v20 + 16 * v22);
    v24 = *v23;
    if (*v23 != v18)
    {
      v25 = 1;
      while (v24 != (uint64_t ***)-4096)
      {
        v26 = v22 + v25++;
        v22 = v26 & (v21 - 1);
        v24 = *(uint64_t ****)(v20 + 16 * v22);
        if (v24 == v18)
        {
          v23 = (uint64_t ****)(v20 + 16 * v22);
          goto LABEL_32;
        }
      }
LABEL_31:
      v23 = (uint64_t ****)(v20 + 16 * v21);
    }
LABEL_32:
    v27 = v23[1];
    v30 = (size_t)*v27;
    v28 = (const char *)(v27 + 2);
    v29 = v30;
    v31 = (_BYTE *)*((_QWORD *)a2 + 4);
    if (v30 > *((_QWORD *)a2 + 3) - (_QWORD)v31)
    {
      v32 = llvm::raw_ostream::write(a2, v28, v29);
      v31 = (_BYTE *)*((_QWORD *)v32 + 4);
      goto LABEL_37;
    }
    if (v29)
    {
      memcpy(*((void **)a2 + 4), v28, v29);
      v31 = (_BYTE *)(*((_QWORD *)a2 + 4) + v29);
      *((_QWORD *)a2 + 4) = v31;
    }
LABEL_36:
    v32 = a2;
LABEL_37:
    if (*((_BYTE **)v32 + 3) == v31)
    {
      v32 = llvm::raw_ostream::write(v32, " ", 1uLL);
      v33 = (void *)*((_QWORD *)v32 + 4);
    }
    else
    {
      *v31 = 32;
      v33 = (void *)(*((_QWORD *)v32 + 4) + 1);
      *((_QWORD *)v32 + 4) = v33;
    }
    if (*((_QWORD *)v32 + 3) - (_QWORD)v33 > 0x14uLL)
    {
      qmemcpy(v33, "Clobbered Registers: ", 21);
      *((_QWORD *)v32 + 4) += 21;
    }
    else
    {
      llvm::raw_ostream::write(v32, "Clobbered Registers: ", 0x15uLL);
    }
    v34 = (*(uint64_t (**)(_QWORD, uint64_t ***))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7), *v17);
    v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 176))(v34);
    v36 = *(unsigned int *)(v35 + 16);
    if (v36 >= 2)
    {
      v37 = v35;
      for (i = 1; v36 != i; ++i)
      {
        if (((*(_DWORD *)((char *)v17[1] + ((i >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> i) & 1) == 0)
        {
          v39 = operator new(0x28uLL);
          *(_QWORD *)v39 = &off_1E814D010;
          v39[2] = i;
          *((_QWORD *)v39 + 2) = v37;
          v39[6] = 0;
          *((_QWORD *)v39 + 4) = 0;
          v45 = (uint64_t *)v39;
          sub_1C52C9630((llvm::raw_ostream *)v39, a2);
          v40 = (_BYTE *)*((_QWORD *)a2 + 4);
          if (*((_BYTE **)a2 + 3) == v40)
          {
            llvm::raw_ostream::write(a2, " ", 1uLL);
          }
          else
          {
            *v40 = 32;
            ++*((_QWORD *)a2 + 4);
          }
          if (v45 == &v44)
          {
            v41 = (void (**)(void))(v44 + 32);
            goto LABEL_50;
          }
          if (v45)
          {
            v41 = (void (**)(void))(*v45 + 40);
LABEL_50:
            (*v41)();
          }
        }
      }
    }
    v42 = (_BYTE *)*((_QWORD *)a2 + 4);
    if (*((_BYTE **)a2 + 3) == v42)
    {
      llvm::raw_ostream::write(a2, "\n", 1uLL);
    }
    else
    {
      *v42 = 10;
      ++*((_QWORD *)a2 + 4);
    }
    v15 += 8;
  }
  while (v15 != v16);
  v15 = (char *)v46;
LABEL_62:
  if (v15 != (char *)v48)
    free(v15);
}

void sub_1C5268FE0(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    v3 = (_QWORD *)(*(_QWORD *)a1 + 16);
    do
    {
      v4 = *(v3 - 2);
      if (v4 != -4096 && v4 != -8192)
      {
        v5 = (void *)*(v3 - 1);
        if (v5)
        {
          *v3 = v5;
          operator delete(v5);
        }
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
}

uint64_t sub_1C5269044(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 32 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 32 * v6);
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_7;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C52690E0(uint64_t *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_1C5269044(a1, a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C5269140(a1, (uint64_t)a2, a2, v8);
    v6 = *a2;
    v5[2] = 0;
    v5[3] = 0;
    *v5 = v6;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C5269140(uint64_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t *v8;
  _QWORD *v9;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *((_DWORD *)a1 + 4);
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
  }
  else if (v5 + ~v4 - *((_DWORD *)a1 + 3) > v5 >> 3)
  {
    goto LABEL_3;
  }
  v8 = a1;
  sub_1C5268800((uint64_t)a1, v5);
  v9 = 0;
  sub_1C5269044(v8, a3, &v9);
  a1 = v8;
  a4 = v9;
LABEL_3:
  ++*((_DWORD *)a1 + 2);
  if (*a4 != -4096)
    --*((_DWORD *)a1 + 3);
  return a4;
}

char *sub_1C52691EC(char *result, uint64_t *****a2, uint64_t a3, char a4)
{
  uint64_t *****v5;
  uint64_t *****v6;
  uint64_t *****v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *****v11;
  uint64_t ****v12;
  uint64_t ****v13;
  uint64_t ***v14;
  int v15;
  uint64_t ***v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ****v21;
  uint64_t ***v22;
  int v23;
  int v24;
  uint64_t ***v25;
  char *v26;
  size_t v27;
  size_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ****v35;
  uint64_t ***v36;
  int v37;
  int v38;
  uint64_t ***v39;
  char *v40;
  size_t v41;
  size_t v42;
  size_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t ****v49;
  uint64_t ***v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t *****v54;
  uint64_t *****v55;
  uint64_t ****v56;
  uint64_t ****v57;
  uint64_t ***v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t ****v63;
  uint64_t ***v64;
  int v65;
  int v66;
  uint64_t ***v67;
  char *v68;
  size_t v69;
  size_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t ****v75;
  uint64_t ***v76;
  int v77;
  int v78;
  uint64_t ***v79;
  char *v80;
  size_t v81;
  size_t v82;
  size_t v83;
  int v84;
  int v85;
  uint64_t *****v86;
  uint64_t ****v87;
  uint64_t ***v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t ****v93;
  uint64_t ***v94;
  int v95;
  int v96;
  uint64_t ***v97;
  char *v98;
  size_t v99;
  size_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t ****v105;
  uint64_t ***v106;
  int v107;
  int v108;
  uint64_t ***v109;
  char *v110;
  size_t v111;
  size_t v112;
  size_t v113;
  int v114;
  int v115;
  uint64_t ****v116;
  uint64_t ***v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t ****v122;
  uint64_t ***v123;
  int v124;
  int v125;
  uint64_t ***v126;
  char *v127;
  size_t v128;
  size_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t ****v134;
  uint64_t ***v135;
  int v136;
  int v137;
  uint64_t ***v138;
  char *v139;
  size_t v140;
  size_t v141;
  size_t v142;
  int v143;
  int v144;
  uint64_t *****v145;
  uint64_t ****v146;
  uint64_t ***v147;
  int v148;
  unsigned int v149;
  uint64_t ****v150;
  uint64_t ***v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t ****v156;
  uint64_t ***v157;
  int v158;
  int v159;
  uint64_t ***v160;
  char *v161;
  size_t v162;
  size_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t ****v168;
  uint64_t ***v169;
  int v170;
  int v171;
  uint64_t ***v172;
  char *v173;
  size_t v174;
  size_t v175;
  size_t v176;
  int v177;
  int v178;
  size_t v179;
  char *v180;
  size_t v181;
  char *v182;
  uint64_t ****v183;
  uint64_t ***v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t ****v189;
  uint64_t ***v190;
  int v191;
  int v192;
  uint64_t ***v193;
  size_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t ****v199;
  uint64_t ***v200;
  int v201;
  int v202;
  uint64_t ***v203;
  size_t v204;
  size_t v205;
  int v206;
  int v207;
  uint64_t *****v208;
  BOOL v209;
  uint64_t ***v210;
  size_t v211;
  size_t v212;
  uint64_t ***v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t ****v218;
  uint64_t ***v219;
  int v220;
  int v221;
  uint64_t ***v222;
  char *v223;
  size_t v224;
  size_t v225;
  size_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t ****v231;
  uint64_t ***v232;
  int v233;
  int v234;
  uint64_t ***v235;
  size_t v236;
  size_t v237;
  uint64_t ***v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t ****v243;
  uint64_t ***v244;
  int v245;
  int v246;
  uint64_t ***v247;
  char *v248;
  size_t v249;
  size_t v250;
  size_t v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t ****v257;
  uint64_t ***v258;
  int v259;
  int v260;
  uint64_t ***v261;
  size_t v262;
  size_t v263;
  uint64_t ****v264;
  uint64_t ***v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t ****v270;
  uint64_t ***v271;
  int v272;
  int v273;
  uint64_t ***v274;
  char *v275;
  size_t v276;
  size_t v277;
  size_t v278;
  int v279;
  uint64_t *****v280;
  unsigned int v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t ****v286;
  uint64_t ***v287;
  int v288;
  int v289;
  uint64_t ***v290;
  size_t v291;
  size_t v292;
  uint64_t ****v293;
  uint64_t ***v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t ****v299;
  uint64_t ***v300;
  int v301;
  int v302;
  uint64_t ***v303;
  char *v304;
  size_t v305;
  size_t v306;
  size_t v307;
  int v308;
  uint64_t ****v309;
  uint64_t ****v310;
  uint64_t ****v311;
  uint64_t ****v312;
  uint64_t ***v313;
  int v314;
  unsigned int v315;
  uint64_t ****v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t ****v321;
  uint64_t ***v322;
  int v323;
  int v324;
  uint64_t ***v325;
  char *v326;
  size_t v327;
  size_t v328;
  uint64_t ***v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t ****v334;
  uint64_t ***v335;
  int v336;
  int v337;
  uint64_t ***v338;
  char *v339;
  size_t v340;
  size_t v341;
  size_t v342;
  int v343;
  int v344;
  size_t v345;
  size_t v346;
  char *v347;
  uint64_t ****v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t ****v353;
  uint64_t ***v354;
  int v355;
  int v356;
  uint64_t ***v357;
  size_t v358;
  uint64_t ***v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t ****v364;
  uint64_t ***v365;
  int v366;
  int v367;
  uint64_t ***v368;
  size_t v369;
  size_t v370;
  int v371;
  uint64_t *****v372;
  uint64_t ****v373;
  uint64_t ****v374;
  uint64_t ***v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t ****v380;
  uint64_t ***v381;
  int v382;
  int v383;
  uint64_t *****v384;
  uint64_t *****v385;
  uint64_t ****v386;
  uint64_t ****v387;
  uint64_t ***v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t ****v393;
  uint64_t ***v394;
  int v395;
  int v396;
  uint64_t *****v397;
  BOOL v399;
  uint64_t *****v400;
  uint64_t *****v401;
  uint64_t ****v402;
  uint64_t ***v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t ****v408;
  uint64_t ***v409;
  int v410;
  int v411;
  uint64_t ***v412;
  unint64_t v413;
  unint64_t v414;
  uint64_t ****v415;
  uint64_t ***v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t ****v421;
  uint64_t ***v422;
  int v423;
  int v424;
  uint64_t ***v425;
  char *v426;
  unint64_t v427;
  unint64_t v428;
  size_t v429;
  uint64_t *****v430;
  uint64_t ***v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t ****v436;
  uint64_t ***v437;
  int v438;
  int v439;
  uint64_t ***v440;
  unint64_t v441;
  unint64_t v442;
  uint64_t ***v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t ****v448;
  uint64_t ***v449;
  int v450;
  int v451;
  uint64_t ***v452;
  char *v453;
  unint64_t v454;
  unint64_t v455;
  size_t v456;
  int v457;
  int64_t v458;
  int64_t v459;
  uint64_t v460;
  uint64_t *****v461;
  uint64_t *****v462;
  uint64_t ***v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t ****v468;
  uint64_t ***v469;
  int v470;
  int v471;
  uint64_t ***v472;
  char *v473;
  size_t v474;
  size_t v475;
  uint64_t ****v476;
  uint64_t ***v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t ****v482;
  uint64_t ***v483;
  int v484;
  int v485;
  uint64_t ***v486;
  char *v487;
  size_t v488;
  size_t v489;
  size_t v490;
  int v491;
  int v492;
  uint64_t *****v493;
  uint64_t ****v494;
  uint64_t ****v495;
  uint64_t ***v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t ****v501;
  uint64_t ***v502;
  int v503;
  int v504;
  uint64_t ***v505;
  size_t v506;
  size_t v507;
  uint64_t ***v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t ****v513;
  uint64_t ***v514;
  int v515;
  int v516;
  uint64_t ***v517;
  char *v518;
  size_t v519;
  size_t v520;
  size_t v521;
  BOOL v522;
  uint64_t *****v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t ***v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t ****v531;
  uint64_t ***v532;
  int v533;
  int v534;
  uint64_t ***v535;
  char *v536;
  unint64_t v537;
  unint64_t v538;
  uint64_t ****v539;
  uint64_t ***v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t ****v545;
  uint64_t ***v546;
  int v547;
  int v548;
  uint64_t ***v549;
  char *v550;
  unint64_t v551;
  unint64_t v552;
  size_t v553;
  int v554;
  int v555;
  uint64_t ***v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t ****v561;
  uint64_t ***v562;
  int v563;
  int v564;
  uint64_t ***v565;
  unint64_t v566;
  unint64_t v567;
  uint64_t ***v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t ****v573;
  uint64_t ***v574;
  int v575;
  int v576;
  uint64_t ***v577;
  char *v578;
  unint64_t v579;
  unint64_t v580;
  size_t v581;
  int v582;
  uint64_t *****v583;
  uint64_t *****v584;
  uint64_t v585;
  uint64_t *****v586;
  uint64_t *****v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t ***v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t ****v595;
  uint64_t ***v596;
  int v597;
  int v598;
  uint64_t ***v599;
  size_t v600;
  size_t v601;
  uint64_t ***v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t ****v607;
  uint64_t ***v608;
  int v609;
  int v610;
  uint64_t ***v611;
  char *v612;
  size_t v613;
  size_t v614;
  size_t v615;
  int v616;
  uint64_t v617;
  unint64_t v618;
  uint64_t *****v619;
  uint64_t ****v620;
  uint64_t ***v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t ****v626;
  uint64_t ***v627;
  int v628;
  int v629;
  uint64_t ***v630;
  size_t v631;
  size_t v632;
  uint64_t ****v633;
  uint64_t ***v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t ****v639;
  uint64_t ***v640;
  int v641;
  int v642;
  uint64_t ***v643;
  char *v644;
  size_t v645;
  size_t v646;
  size_t v647;
  uint64_t *****v648;
  uint64_t ***v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t ****v654;
  uint64_t ***v655;
  int v656;
  int v657;
  uint64_t ***v658;
  unint64_t v659;
  unint64_t v660;
  uint64_t ***v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t ****v666;
  uint64_t ***v667;
  int v668;
  int v669;
  uint64_t ***v670;
  char *v671;
  unint64_t v672;
  unint64_t v673;
  size_t v674;
  int v675;
  BOOL v676;
  uint64_t *****v677;
  uint64_t ****v678;
  uint64_t ***v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t ****v684;
  uint64_t ***v685;
  int v686;
  int v687;
  uint64_t ***v688;
  size_t v689;
  size_t v690;
  uint64_t ****v691;
  uint64_t ***v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t ****v697;
  uint64_t ***v698;
  int v699;
  int v700;
  uint64_t ***v701;
  char *v702;
  size_t v703;
  size_t v704;
  size_t v705;
  uint64_t *****v706;
  uint64_t ***v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t ****v712;
  uint64_t ***v713;
  int v714;
  int v715;
  uint64_t ***v716;
  size_t v717;
  size_t v718;
  uint64_t ***v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t ****v724;
  uint64_t ***v725;
  int v726;
  int v727;
  uint64_t ***v728;
  char *v729;
  size_t v730;
  size_t v731;
  size_t v732;
  int v733;
  uint64_t ***v734;
  size_t v735;
  size_t v736;
  uint64_t ***v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t ****v742;
  uint64_t ***v743;
  int v744;
  int v745;
  uint64_t ***v746;
  size_t v747;
  size_t v748;
  uint64_t ***v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t ****v754;
  uint64_t ***v755;
  int v756;
  int v757;
  uint64_t ***v758;
  char *v759;
  size_t v760;
  size_t v761;
  size_t v762;
  uint64_t ***v763;
  char *v764;
  size_t v765;
  size_t v766;
  size_t v767;
  uint64_t ****v768;
  uint64_t ****v769;
  uint64_t ***v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t ****v775;
  uint64_t ***v776;
  int v777;
  int v778;
  uint64_t ***v779;
  size_t v780;
  size_t v781;
  uint64_t ***v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t ****v787;
  uint64_t ***v788;
  int v789;
  int v790;
  uint64_t ***v791;
  char *v792;
  size_t v793;
  size_t v794;
  size_t v795;
  uint64_t ****v796;
  uint64_t ***v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t ****v802;
  uint64_t ***v803;
  int v804;
  int v805;
  uint64_t ***v806;
  size_t v807;
  size_t v808;
  uint64_t ***v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t ****v814;
  uint64_t ***v815;
  int v816;
  int v817;
  uint64_t ***v818;
  char *v819;
  size_t v820;
  size_t v821;
  size_t v822;
  uint64_t ****v823;
  uint64_t ***v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t ****v829;
  uint64_t ***v830;
  int v831;
  int v832;
  uint64_t ***v833;
  size_t v834;
  size_t v835;
  uint64_t ***v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t ****v841;
  uint64_t ***v842;
  int v843;
  int v844;
  uint64_t ***v845;
  char *v846;
  size_t v847;
  size_t v848;
  size_t v849;
  uint64_t *****v850;
  uint64_t *****v851;
  uint64_t *****v852;
  uint64_t *****v854;
  uint64_t v855;
  uint64_t *****v856;
  uint64_t *****v857;
  uint64_t ****v858;
  int64_t v859;
  uint64_t ****v860;

  v5 = (uint64_t *****)result;
LABEL_2:
  v851 = a2 - 2;
  v852 = a2 - 1;
  v856 = a2;
  v850 = a2 - 3;
  v6 = v5;
  while (2)
  {
    v7 = v6;
    v8 = (char *)v856 - (char *)v6;
    v9 = v856 - v6;
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v373 = *(v856 - 1);
        v374 = *v7;
        v375 = *v373;
        if ((*((_BYTE *)*v373 + 23) & 0x10) != 0)
        {
          v376 = ***v375;
          v377 = *(_QWORD *)(v376 + 152);
          v378 = *(unsigned int *)(v376 + 168);
          if ((_DWORD)v378)
          {
            LODWORD(v379) = (v378 - 1) & ((v375 >> 4) ^ (v375 >> 9));
            v380 = (uint64_t ****)(v377 + 16 * v379);
            v381 = *v380;
            if (*v380 != v375)
            {
              v382 = 1;
              do
              {
                if (v381 == (uint64_t ***)-4096)
                  goto LABEL_799;
                v383 = v379 + v382++;
                v379 = v383 & (v378 - 1);
                v381 = *(uint64_t ****)(v377 + 16 * v379);
              }
              while (v381 != v375);
              v380 = (uint64_t ****)(v377 + 16 * v379);
            }
          }
          else
          {
LABEL_799:
            v380 = (uint64_t ****)(v377 + 16 * v378);
          }
          v734 = v380[1];
          v736 = (size_t)*v734;
          result = (char *)(v734 + 2);
          v735 = v736;
          goto LABEL_801;
        }
        v735 = 0;
        result = &byte_1C871356D;
LABEL_801:
        v737 = *v374;
        if ((*((_BYTE *)*v374 + 23) & 0x10) != 0)
        {
          v738 = ***v737;
          v739 = *(_QWORD *)(v738 + 152);
          v740 = *(unsigned int *)(v738 + 168);
          if ((_DWORD)v740)
          {
            LODWORD(v741) = (v740 - 1) & ((v737 >> 4) ^ (v737 >> 9));
            v742 = (uint64_t ****)(v739 + 16 * v741);
            v743 = *v742;
            if (*v742 != v737)
            {
              v744 = 1;
              do
              {
                if (v743 == (uint64_t ***)-4096)
                  goto LABEL_817;
                v745 = v741 + v744++;
                v741 = v745 & (v740 - 1);
                v743 = *(uint64_t ****)(v739 + 16 * v741);
              }
              while (v743 != v737);
              v742 = (uint64_t ****)(v739 + 16 * v741);
            }
          }
          else
          {
LABEL_817:
            v742 = (uint64_t ****)(v739 + 16 * v740);
          }
          v758 = v742[1];
          v761 = (size_t)*v758;
          v759 = (char *)(v758 + 2);
          v760 = v761;
          goto LABEL_819;
        }
        v760 = 0;
        v759 = &byte_1C871356D;
LABEL_819:
        if (v760 >= v735)
          v762 = v735;
        else
          v762 = v760;
        if (v762 && (result = (char *)memcmp(result, v759, v762), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v735 >= v760)
        {
          return result;
        }
        *v7 = v373;
        *(v856 - 1) = v374;
        return result;
      case 3:
        return sub_1C526BC94(v7, v7 + 1, v852);
      case 4:
        return sub_1C526CDC8(v7, v7 + 1, v7 + 2, v852);
      case 5:
        v384 = v7 + 2;
        v385 = v7 + 3;
        sub_1C526CDC8(v7, v7 + 1, v7 + 2, v7 + 3);
        v386 = *(v856 - 1);
        v387 = v7[3];
        v388 = *v386;
        if ((*((_BYTE *)*v386 + 23) & 0x10) != 0)
        {
          v389 = ***v388;
          v390 = *(_QWORD *)(v389 + 152);
          v391 = *(unsigned int *)(v389 + 168);
          if ((_DWORD)v391)
          {
            LODWORD(v392) = (v391 - 1) & ((v388 >> 4) ^ (v388 >> 9));
            v393 = (uint64_t ****)(v390 + 16 * v392);
            v394 = *v393;
            if (*v393 != v388)
            {
              v395 = 1;
              do
              {
                if (v394 == (uint64_t ***)-4096)
                  goto LABEL_808;
                v396 = v392 + v395++;
                v392 = v396 & (v391 - 1);
                v394 = *(uint64_t ****)(v390 + 16 * v392);
              }
              while (v394 != v388);
              v393 = (uint64_t ****)(v390 + 16 * v392);
            }
          }
          else
          {
LABEL_808:
            v393 = (uint64_t ****)(v390 + 16 * v391);
          }
          v746 = v393[1];
          v748 = (size_t)*v746;
          result = (char *)(v746 + 2);
          v747 = v748;
          goto LABEL_810;
        }
        v747 = 0;
        result = &byte_1C871356D;
LABEL_810:
        v749 = *v387;
        if ((*((_BYTE *)*v387 + 23) & 0x10) != 0)
        {
          v750 = ***v749;
          v751 = *(_QWORD *)(v750 + 152);
          v752 = *(unsigned int *)(v750 + 168);
          if ((_DWORD)v752)
          {
            LODWORD(v753) = (v752 - 1) & ((v749 >> 4) ^ (v749 >> 9));
            v754 = (uint64_t ****)(v751 + 16 * v753);
            v755 = *v754;
            if (*v754 != v749)
            {
              v756 = 1;
              do
              {
                if (v755 == (uint64_t ***)-4096)
                  goto LABEL_828;
                v757 = v753 + v756++;
                v753 = v757 & (v752 - 1);
                v755 = *(uint64_t ****)(v751 + 16 * v753);
              }
              while (v755 != v749);
              v754 = (uint64_t ****)(v751 + 16 * v753);
            }
          }
          else
          {
LABEL_828:
            v754 = (uint64_t ****)(v751 + 16 * v752);
          }
          v763 = v754[1];
          v766 = (size_t)*v763;
          v764 = (char *)(v763 + 2);
          v765 = v766;
          goto LABEL_830;
        }
        v765 = 0;
        v764 = &byte_1C871356D;
LABEL_830:
        if (v765 >= v747)
          v767 = v747;
        else
          v767 = v765;
        if (v767 && (result = (char *)memcmp(result, v764, v767), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v747 >= v765)
        {
          return result;
        }
        *v385 = v386;
        *(v856 - 1) = v387;
        v768 = *v385;
        v769 = *v384;
        v770 = **v385;
        if ((*((_BYTE *)v770 + 23) & 0x10) != 0)
        {
          v771 = ***v770;
          v772 = *(_QWORD *)(v771 + 152);
          v773 = *(unsigned int *)(v771 + 168);
          if ((_DWORD)v773)
          {
            LODWORD(v774) = (v773 - 1) & ((v770 >> 4) ^ (v770 >> 9));
            v775 = (uint64_t ****)(v772 + 16 * v774);
            v776 = *v775;
            if (*v775 != v770)
            {
              v777 = 1;
              do
              {
                if (v776 == (uint64_t ***)-4096)
                  goto LABEL_845;
                v778 = v774 + v777++;
                v774 = v778 & (v773 - 1);
                v776 = *(uint64_t ****)(v772 + 16 * v774);
              }
              while (v776 != v770);
              v775 = (uint64_t ****)(v772 + 16 * v774);
            }
          }
          else
          {
LABEL_845:
            v775 = (uint64_t ****)(v772 + 16 * v773);
          }
          v779 = v775[1];
          v781 = (size_t)*v779;
          result = (char *)(v779 + 2);
          v780 = v781;
          goto LABEL_847;
        }
        v780 = 0;
        result = &byte_1C871356D;
LABEL_847:
        v782 = *v769;
        if ((*((_BYTE *)*v769 + 23) & 0x10) != 0)
        {
          v783 = ***v782;
          v784 = *(_QWORD *)(v783 + 152);
          v785 = *(unsigned int *)(v783 + 168);
          if ((_DWORD)v785)
          {
            LODWORD(v786) = (v785 - 1) & ((v782 >> 4) ^ (v782 >> 9));
            v787 = (uint64_t ****)(v784 + 16 * v786);
            v788 = *v787;
            if (*v787 != v782)
            {
              v789 = 1;
              do
              {
                if (v788 == (uint64_t ***)-4096)
                  goto LABEL_854;
                v790 = v786 + v789++;
                v786 = v790 & (v785 - 1);
                v788 = *(uint64_t ****)(v784 + 16 * v786);
              }
              while (v788 != v782);
              v787 = (uint64_t ****)(v784 + 16 * v786);
            }
          }
          else
          {
LABEL_854:
            v787 = (uint64_t ****)(v784 + 16 * v785);
          }
          v791 = v787[1];
          v794 = (size_t)*v791;
          v792 = (char *)(v791 + 2);
          v793 = v794;
          goto LABEL_856;
        }
        v793 = 0;
        v792 = &byte_1C871356D;
LABEL_856:
        if (v793 >= v780)
          v795 = v780;
        else
          v795 = v793;
        if (v795 && (result = (char *)memcmp(result, v792, v795), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v780 >= v793)
        {
          return result;
        }
        *v384 = v768;
        *v385 = v769;
        v796 = v7[1];
        v797 = *v768;
        if ((*((_BYTE *)*v768 + 23) & 0x10) != 0)
        {
          v798 = ***v797;
          v799 = *(_QWORD *)(v798 + 152);
          v800 = *(unsigned int *)(v798 + 168);
          if ((_DWORD)v800)
          {
            LODWORD(v801) = (v800 - 1) & ((v797 >> 4) ^ (v797 >> 9));
            v802 = (uint64_t ****)(v799 + 16 * v801);
            v803 = *v802;
            if (*v802 != v797)
            {
              v804 = 1;
              do
              {
                if (v803 == (uint64_t ***)-4096)
                  goto LABEL_871;
                v805 = v801 + v804++;
                v801 = v805 & (v800 - 1);
                v803 = *(uint64_t ****)(v799 + 16 * v801);
              }
              while (v803 != v797);
              v802 = (uint64_t ****)(v799 + 16 * v801);
            }
          }
          else
          {
LABEL_871:
            v802 = (uint64_t ****)(v799 + 16 * v800);
          }
          v806 = v802[1];
          v808 = (size_t)*v806;
          result = (char *)(v806 + 2);
          v807 = v808;
          goto LABEL_873;
        }
        v807 = 0;
        result = &byte_1C871356D;
LABEL_873:
        v809 = *v796;
        if ((*((_BYTE *)*v796 + 23) & 0x10) != 0)
        {
          v810 = ***v809;
          v811 = *(_QWORD *)(v810 + 152);
          v812 = *(unsigned int *)(v810 + 168);
          if ((_DWORD)v812)
          {
            LODWORD(v813) = (v812 - 1) & ((v809 >> 4) ^ (v809 >> 9));
            v814 = (uint64_t ****)(v811 + 16 * v813);
            v815 = *v814;
            if (*v814 != v809)
            {
              v816 = 1;
              do
              {
                if (v815 == (uint64_t ***)-4096)
                  goto LABEL_880;
                v817 = v813 + v816++;
                v813 = v817 & (v812 - 1);
                v815 = *(uint64_t ****)(v811 + 16 * v813);
              }
              while (v815 != v809);
              v814 = (uint64_t ****)(v811 + 16 * v813);
            }
          }
          else
          {
LABEL_880:
            v814 = (uint64_t ****)(v811 + 16 * v812);
          }
          v818 = v814[1];
          v821 = (size_t)*v818;
          v819 = (char *)(v818 + 2);
          v820 = v821;
          goto LABEL_882;
        }
        v820 = 0;
        v819 = &byte_1C871356D;
LABEL_882:
        if (v820 >= v807)
          v822 = v807;
        else
          v822 = v820;
        if (v822 && (result = (char *)memcmp(result, v819, v822), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v807 >= v820)
        {
          return result;
        }
        v7[1] = v768;
        v7[2] = v796;
        v823 = *v7;
        v824 = *v768;
        if ((*((_BYTE *)*v768 + 23) & 0x10) != 0)
        {
          v825 = ***v824;
          v826 = *(_QWORD *)(v825 + 152);
          v827 = *(unsigned int *)(v825 + 168);
          if ((_DWORD)v827)
          {
            LODWORD(v828) = (v827 - 1) & ((v824 >> 4) ^ (v824 >> 9));
            v829 = (uint64_t ****)(v826 + 16 * v828);
            v830 = *v829;
            if (*v829 != v824)
            {
              v831 = 1;
              do
              {
                if (v830 == (uint64_t ***)-4096)
                  goto LABEL_901;
                v832 = v828 + v831++;
                v828 = v832 & (v827 - 1);
                v830 = *(uint64_t ****)(v826 + 16 * v828);
              }
              while (v830 != v824);
              v829 = (uint64_t ****)(v826 + 16 * v828);
            }
          }
          else
          {
LABEL_901:
            v829 = (uint64_t ****)(v826 + 16 * v827);
          }
          v833 = v829[1];
          v835 = (size_t)*v833;
          result = (char *)(v833 + 2);
          v834 = v835;
          goto LABEL_903;
        }
        v834 = 0;
        result = &byte_1C871356D;
LABEL_903:
        v836 = *v823;
        if ((*((_BYTE *)*v823 + 23) & 0x10) != 0)
        {
          v837 = ***v836;
          v838 = *(_QWORD *)(v837 + 152);
          v839 = *(unsigned int *)(v837 + 168);
          if ((_DWORD)v839)
          {
            LODWORD(v840) = (v839 - 1) & ((v836 >> 4) ^ (v836 >> 9));
            v841 = (uint64_t ****)(v838 + 16 * v840);
            v842 = *v841;
            if (*v841 != v836)
            {
              v843 = 1;
              do
              {
                if (v842 == (uint64_t ***)-4096)
                  goto LABEL_910;
                v844 = v840 + v843++;
                v840 = v844 & (v839 - 1);
                v842 = *(uint64_t ****)(v838 + 16 * v840);
              }
              while (v842 != v836);
              v841 = (uint64_t ****)(v838 + 16 * v840);
            }
          }
          else
          {
LABEL_910:
            v841 = (uint64_t ****)(v838 + 16 * v839);
          }
          v845 = v841[1];
          v848 = (size_t)*v845;
          v846 = (char *)(v845 + 2);
          v847 = v848;
          goto LABEL_912;
        }
        v847 = 0;
        v846 = &byte_1C871356D;
LABEL_912:
        if (v847 >= v834)
          v849 = v834;
        else
          v849 = v847;
        if (v849 && (result = (char *)memcmp(result, v846, v849), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v834 >= v847)
        {
          return result;
        }
        *v7 = v768;
        v7[1] = v823;
        return result;
      default:
        v857 = v7;
        if (v8 <= 191)
        {
          v397 = v7 + 1;
          v399 = v7 == v856 || v397 == v856;
          if ((a4 & 1) != 0)
          {
            if (v399)
              return result;
            v400 = v7;
            while (1)
            {
              v401 = v400;
              v400 = v397;
              v402 = v401[1];
              v403 = *v402;
              if ((*((_BYTE *)*v402 + 23) & 0x10) != 0)
              {
                v404 = ***v403;
                v405 = *(_QWORD *)(v404 + 152);
                v406 = *(unsigned int *)(v404 + 168);
                if ((_DWORD)v406)
                {
                  LODWORD(v407) = (v406 - 1) & ((v403 >> 4) ^ (v403 >> 9));
                  v408 = (uint64_t ****)(v405 + 16 * v407);
                  v409 = *v408;
                  if (*v408 != v403)
                  {
                    v410 = 1;
                    do
                    {
                      if (v409 == (uint64_t ***)-4096)
                        goto LABEL_436;
                      v411 = v407 + v410++;
                      v407 = v411 & (v406 - 1);
                      v409 = *(uint64_t ****)(v405 + 16 * v407);
                    }
                    while (v409 != v403);
                    v408 = (uint64_t ****)(v405 + 16 * v407);
                  }
                }
                else
                {
LABEL_436:
                  v408 = (uint64_t ****)(v405 + 16 * v406);
                }
                v412 = v408[1];
                v414 = (unint64_t)*v412;
                result = (char *)(v412 + 2);
                v413 = v414;
              }
              else
              {
                v413 = 0;
                result = &byte_1C871356D;
              }
              v415 = *v401;
              v416 = **v401;
              if ((*((_BYTE *)v416 + 23) & 0x10) != 0)
              {
                v417 = ***v416;
                v418 = *(_QWORD *)(v417 + 152);
                v419 = *(unsigned int *)(v417 + 168);
                if ((_DWORD)v419)
                {
                  LODWORD(v420) = (v419 - 1) & ((v416 >> 4) ^ (v416 >> 9));
                  v421 = (uint64_t ****)(v418 + 16 * v420);
                  v422 = *v421;
                  if (*v421 != v416)
                  {
                    v423 = 1;
                    do
                    {
                      if (v422 == (uint64_t ***)-4096)
                        goto LABEL_445;
                      v424 = v420 + v423++;
                      v420 = v424 & (v419 - 1);
                      v422 = *(uint64_t ****)(v418 + 16 * v420);
                    }
                    while (v422 != v416);
                    v421 = (uint64_t ****)(v418 + 16 * v420);
                  }
                }
                else
                {
LABEL_445:
                  v421 = (uint64_t ****)(v418 + 16 * v419);
                }
                v425 = v421[1];
                v428 = (unint64_t)*v425;
                v426 = (char *)(v425 + 2);
                v427 = v428;
              }
              else
              {
                v427 = 0;
                v426 = &byte_1C871356D;
              }
              v429 = v427 >= v413 ? v413 : v427;
              if (v429 && (result = (char *)memcmp(result, v426, v429), (_DWORD)result))
              {
                if ((result & 0x80000000) == 0)
                  goto LABEL_490;
              }
              else if (v413 >= v427)
              {
                goto LABEL_490;
              }
              v430 = v400;
              while (1)
              {
                *v430 = v415;
                if (v401 == v7)
                {
                  v430 = v7;
                  goto LABEL_489;
                }
                v430 = v401;
                v431 = *v402;
                if ((*((_BYTE *)*v402 + 23) & 0x10) != 0)
                {
                  v432 = ***v431;
                  v433 = *(_QWORD *)(v432 + 152);
                  v434 = *(unsigned int *)(v432 + 168);
                  if ((_DWORD)v434)
                  {
                    LODWORD(v435) = (v434 - 1) & ((v431 >> 4) ^ (v431 >> 9));
                    v436 = (uint64_t ****)(v433 + 16 * v435);
                    v437 = *v436;
                    if (*v436 != v431)
                    {
                      v438 = 1;
                      do
                      {
                        if (v437 == (uint64_t ***)-4096)
                          goto LABEL_464;
                        v439 = v435 + v438++;
                        v435 = v439 & (v434 - 1);
                        v437 = *(uint64_t ****)(v433 + 16 * v435);
                      }
                      while (v437 != v431);
                      v436 = (uint64_t ****)(v433 + 16 * v435);
                    }
                  }
                  else
                  {
LABEL_464:
                    v436 = (uint64_t ****)(v433 + 16 * v434);
                  }
                  v440 = v436[1];
                  v442 = (unint64_t)*v440;
                  result = (char *)(v440 + 2);
                  v441 = v442;
                }
                else
                {
                  v441 = 0;
                  result = &byte_1C871356D;
                }
                --v401;
                v415 = *(v430 - 1);
                v443 = *v415;
                if ((*((_BYTE *)*v415 + 23) & 0x10) != 0)
                {
                  v444 = ***v443;
                  v445 = *(_QWORD *)(v444 + 152);
                  v446 = *(unsigned int *)(v444 + 168);
                  if ((_DWORD)v446)
                  {
                    LODWORD(v447) = (v446 - 1) & ((v443 >> 4) ^ (v443 >> 9));
                    v448 = (uint64_t ****)(v445 + 16 * v447);
                    v449 = *v448;
                    if (*v448 != v443)
                    {
                      v450 = 1;
                      do
                      {
                        if (v449 == (uint64_t ***)-4096)
                          goto LABEL_473;
                        v451 = v447 + v450++;
                        v447 = v451 & (v446 - 1);
                        v449 = *(uint64_t ****)(v445 + 16 * v447);
                      }
                      while (v449 != v443);
                      v448 = (uint64_t ****)(v445 + 16 * v447);
                    }
                  }
                  else
                  {
LABEL_473:
                    v448 = (uint64_t ****)(v445 + 16 * v446);
                  }
                  v452 = v448[1];
                  v455 = (unint64_t)*v452;
                  v453 = (char *)(v452 + 2);
                  v454 = v455;
                }
                else
                {
                  v454 = 0;
                  v453 = &byte_1C871356D;
                }
                v456 = v454 >= v441 ? v441 : v454;
                if (!v456)
                  break;
                result = (char *)memcmp(result, v453, v456);
                if (!(_DWORD)result)
                  break;
                v457 = ((int)result >> 31) | 1;
LABEL_483:
                v7 = v857;
                if (v457 != -1)
                  goto LABEL_489;
              }
              if (v441 < v454)
                break;
              v7 = v857;
LABEL_489:
              *v430 = v402;
LABEL_490:
              v397 = v400 + 1;
              if (v400 + 1 == v856)
                return result;
            }
            v457 = -1;
            goto LABEL_483;
          }
          if (v399)
            return result;
          while (1)
          {
            v677 = v7;
            v7 = v397;
            v678 = v677[1];
            v679 = *v678;
            if ((*((_BYTE *)*v678 + 23) & 0x10) != 0)
            {
              v680 = ***v679;
              v681 = *(_QWORD *)(v680 + 152);
              v682 = *(unsigned int *)(v680 + 168);
              if ((_DWORD)v682)
              {
                LODWORD(v683) = (v682 - 1) & ((v679 >> 4) ^ (v679 >> 9));
                v684 = (uint64_t ****)(v681 + 16 * v683);
                v685 = *v684;
                if (*v684 != v679)
                {
                  v686 = 1;
                  do
                  {
                    if (v685 == (uint64_t ***)-4096)
                      goto LABEL_744;
                    v687 = v683 + v686++;
                    v683 = v687 & (v682 - 1);
                    v685 = *(uint64_t ****)(v681 + 16 * v683);
                  }
                  while (v685 != v679);
                  v684 = (uint64_t ****)(v681 + 16 * v683);
                }
              }
              else
              {
LABEL_744:
                v684 = (uint64_t ****)(v681 + 16 * v682);
              }
              v688 = v684[1];
              v690 = (size_t)*v688;
              result = (char *)(v688 + 2);
              v689 = v690;
            }
            else
            {
              v689 = 0;
              result = &byte_1C871356D;
            }
            v691 = *v677;
            v692 = **v677;
            if ((*((_BYTE *)v692 + 23) & 0x10) != 0)
            {
              v693 = ***v692;
              v694 = *(_QWORD *)(v693 + 152);
              v695 = *(unsigned int *)(v693 + 168);
              if ((_DWORD)v695)
              {
                LODWORD(v696) = (v695 - 1) & ((v692 >> 4) ^ (v692 >> 9));
                v697 = (uint64_t ****)(v694 + 16 * v696);
                v698 = *v697;
                if (*v697 != v692)
                {
                  v699 = 1;
                  do
                  {
                    if (v698 == (uint64_t ***)-4096)
                      goto LABEL_753;
                    v700 = v696 + v699++;
                    v696 = v700 & (v695 - 1);
                    v698 = *(uint64_t ****)(v694 + 16 * v696);
                  }
                  while (v698 != v692);
                  v697 = (uint64_t ****)(v694 + 16 * v696);
                }
              }
              else
              {
LABEL_753:
                v697 = (uint64_t ****)(v694 + 16 * v695);
              }
              v701 = v697[1];
              v704 = (size_t)*v701;
              v702 = (char *)(v701 + 2);
              v703 = v704;
            }
            else
            {
              v703 = 0;
              v702 = &byte_1C871356D;
            }
            if (v703 >= v689)
              v705 = v689;
            else
              v705 = v703;
            if (v705 && (result = (char *)memcmp(result, v702, v705), (_DWORD)result))
            {
              if ((result & 0x80000000) == 0)
                goto LABEL_795;
            }
            else if (v689 >= v703)
            {
              goto LABEL_795;
            }
            v706 = v7;
            do
            {
              *v706 = v691;
              v706 = v677;
              v707 = *v678;
              if ((*((_BYTE *)*v678 + 23) & 0x10) != 0)
              {
                v708 = ***v707;
                v709 = *(_QWORD *)(v708 + 152);
                v710 = *(unsigned int *)(v708 + 168);
                if ((_DWORD)v710)
                {
                  LODWORD(v711) = (v710 - 1) & ((v707 >> 4) ^ (v707 >> 9));
                  v712 = (uint64_t ****)(v709 + 16 * v711);
                  v713 = *v712;
                  if (*v712 != v707)
                  {
                    v714 = 1;
                    do
                    {
                      if (v713 == (uint64_t ***)-4096)
                        goto LABEL_771;
                      v715 = v711 + v714++;
                      v711 = v715 & (v710 - 1);
                      v713 = *(uint64_t ****)(v709 + 16 * v711);
                    }
                    while (v713 != v707);
                    v712 = (uint64_t ****)(v709 + 16 * v711);
                  }
                }
                else
                {
LABEL_771:
                  v712 = (uint64_t ****)(v709 + 16 * v710);
                }
                v716 = v712[1];
                v718 = (size_t)*v716;
                result = (char *)(v716 + 2);
                v717 = v718;
              }
              else
              {
                v717 = 0;
                result = &byte_1C871356D;
              }
              --v677;
              v691 = *(v706 - 1);
              v719 = *v691;
              if ((*((_BYTE *)*v691 + 23) & 0x10) != 0)
              {
                v720 = ***v719;
                v721 = *(_QWORD *)(v720 + 152);
                v722 = *(unsigned int *)(v720 + 168);
                if ((_DWORD)v722)
                {
                  LODWORD(v723) = (v722 - 1) & ((v719 >> 4) ^ (v719 >> 9));
                  v724 = (uint64_t ****)(v721 + 16 * v723);
                  v725 = *v724;
                  if (*v724 != v719)
                  {
                    v726 = 1;
                    do
                    {
                      if (v725 == (uint64_t ***)-4096)
                        goto LABEL_780;
                      v727 = v723 + v726++;
                      v723 = v727 & (v722 - 1);
                      v725 = *(uint64_t ****)(v721 + 16 * v723);
                    }
                    while (v725 != v719);
                    v724 = (uint64_t ****)(v721 + 16 * v723);
                  }
                }
                else
                {
LABEL_780:
                  v724 = (uint64_t ****)(v721 + 16 * v722);
                }
                v728 = v724[1];
                v731 = (size_t)*v728;
                v729 = (char *)(v728 + 2);
                v730 = v731;
              }
              else
              {
                v730 = 0;
                v729 = &byte_1C871356D;
              }
              if (v730 >= v717)
                v732 = v717;
              else
                v732 = v730;
              if (v732 && (result = (char *)memcmp(result, v729, v732), (_DWORD)result))
              {
                v733 = ((int)result >> 31) | 1;
              }
              else
              {
                if (v717 >= v730)
                  break;
                v733 = -1;
              }
            }
            while (v733 == -1);
            *v706 = v678;
LABEL_795:
            v397 = v7 + 1;
            if (v7 + 1 == v856)
              return result;
          }
        }
        if (!a3)
        {
          if (v7 == v856)
            return result;
          v458 = (unint64_t)(v9 - 2) >> 1;
          v859 = v458;
          while (1)
          {
            v459 = v458;
            if (v859 >= v458)
            {
              v460 = (2 * v458) | 1;
              v461 = &v7[v460];
              v462 = v461;
              if (2 * v458 + 2 < v9)
              {
                v463 = **v461;
                if ((*((_BYTE *)v463 + 23) & 0x10) != 0)
                {
                  v464 = ***v463;
                  v465 = *(_QWORD *)(v464 + 152);
                  v466 = *(unsigned int *)(v464 + 168);
                  if ((_DWORD)v466)
                  {
                    LODWORD(v467) = (v466 - 1) & ((v463 >> 4) ^ (v463 >> 9));
                    v468 = (uint64_t ****)(v465 + 16 * v467);
                    v469 = *v468;
                    if (*v468 != v463)
                    {
                      v470 = 1;
                      do
                      {
                        if (v469 == (uint64_t ***)-4096)
                          goto LABEL_505;
                        v471 = v467 + v470++;
                        v467 = v471 & (v466 - 1);
                        v469 = *(uint64_t ****)(v465 + 16 * v467);
                      }
                      while (v469 != v463);
                      v468 = (uint64_t ****)(v465 + 16 * v467);
                    }
                  }
                  else
                  {
LABEL_505:
                    v468 = (uint64_t ****)(v465 + 16 * v466);
                  }
                  v472 = v468[1];
                  v475 = (size_t)*v472;
                  v473 = (char *)(v472 + 2);
                  v474 = v475;
                }
                else
                {
                  v474 = 0;
                  v473 = &byte_1C871356D;
                }
                v476 = v461[1];
                v462 = v461 + 1;
                v477 = *v476;
                if ((*((_BYTE *)*v476 + 23) & 0x10) != 0)
                {
                  v478 = ***v477;
                  v479 = *(_QWORD *)(v478 + 152);
                  v480 = *(unsigned int *)(v478 + 168);
                  if ((_DWORD)v480)
                  {
                    LODWORD(v481) = (v480 - 1) & ((v477 >> 4) ^ (v477 >> 9));
                    v482 = (uint64_t ****)(v479 + 16 * v481);
                    v483 = *v482;
                    if (*v482 != v477)
                    {
                      v484 = 1;
                      do
                      {
                        if (v483 == (uint64_t ***)-4096)
                          goto LABEL_514;
                        v485 = v481 + v484++;
                        v481 = v485 & (v480 - 1);
                        v483 = *(uint64_t ****)(v479 + 16 * v481);
                      }
                      while (v483 != v477);
                      v482 = (uint64_t ****)(v479 + 16 * v481);
                    }
                  }
                  else
                  {
LABEL_514:
                    v482 = (uint64_t ****)(v479 + 16 * v480);
                  }
                  v486 = v482[1];
                  v489 = (size_t)*v486;
                  v487 = (char *)(v486 + 2);
                  v488 = v489;
                }
                else
                {
                  v488 = 0;
                  v487 = &byte_1C871356D;
                }
                if (v488 >= v474)
                  v490 = v474;
                else
                  v490 = v488;
                if (v490 && (v491 = memcmp(v473, v487, v490)) != 0)
                {
                  v492 = (v491 >> 31) | 1;
                }
                else
                {
                  if (v474 < v488)
                    v492 = -1;
                  else
                    v492 = 1;
                  if (v474 == v488)
                    v492 = 0;
                }
                v7 = v857;
                if (v492 == -1)
                  v460 = 2 * v459 + 2;
                else
                  v462 = v461;
              }
              v493 = &v7[v459];
              v494 = *v462;
              v495 = *v493;
              v496 = **v462;
              if ((*((_BYTE *)v496 + 23) & 0x10) != 0)
              {
                v497 = ***v496;
                v498 = *(_QWORD *)(v497 + 152);
                v499 = *(unsigned int *)(v497 + 168);
                if ((_DWORD)v499)
                {
                  LODWORD(v500) = (v499 - 1) & ((v496 >> 4) ^ (v496 >> 9));
                  v501 = (uint64_t ****)(v498 + 16 * v500);
                  v502 = *v501;
                  if (*v501 != v496)
                  {
                    v503 = 1;
                    do
                    {
                      if (v502 == (uint64_t ***)-4096)
                        goto LABEL_537;
                      v504 = v500 + v503++;
                      v500 = v504 & (v499 - 1);
                      v502 = *(uint64_t ****)(v498 + 16 * v500);
                    }
                    while (v502 != v496);
                    v501 = (uint64_t ****)(v498 + 16 * v500);
                  }
                }
                else
                {
LABEL_537:
                  v501 = (uint64_t ****)(v498 + 16 * v499);
                }
                v505 = v501[1];
                v507 = (size_t)*v505;
                result = (char *)(v505 + 2);
                v506 = v507;
              }
              else
              {
                v506 = 0;
                result = &byte_1C871356D;
              }
              v508 = *v495;
              if ((*((_BYTE *)*v495 + 23) & 0x10) != 0)
              {
                v509 = ***v508;
                v510 = *(_QWORD *)(v509 + 152);
                v511 = *(unsigned int *)(v509 + 168);
                if ((_DWORD)v511)
                {
                  LODWORD(v512) = (v511 - 1) & ((v508 >> 4) ^ (v508 >> 9));
                  v513 = (uint64_t ****)(v510 + 16 * v512);
                  v514 = *v513;
                  if (*v513 != v508)
                  {
                    v515 = 1;
                    do
                    {
                      if (v514 == (uint64_t ***)-4096)
                        goto LABEL_546;
                      v516 = v512 + v515++;
                      v512 = v516 & (v511 - 1);
                      v514 = *(uint64_t ****)(v510 + 16 * v512);
                    }
                    while (v514 != v508);
                    v513 = (uint64_t ****)(v510 + 16 * v512);
                  }
                }
                else
                {
LABEL_546:
                  v513 = (uint64_t ****)(v510 + 16 * v511);
                }
                v517 = v513[1];
                v520 = (size_t)*v517;
                v518 = (char *)(v517 + 2);
                v519 = v520;
              }
              else
              {
                v519 = 0;
                v518 = &byte_1C871356D;
              }
              if (v519 >= v506)
                v521 = v506;
              else
                v521 = v519;
              if (v521 && (result = (char *)memcmp(result, v518, v521), (_DWORD)result))
              {
                v7 = v857;
                if ((result & 0x80000000) == 0)
                  goto LABEL_557;
              }
              else
              {
                v522 = v506 >= v519;
                v7 = v857;
                if (v522)
                {
                  do
                  {
LABEL_557:
                    v523 = v462;
                    *v493 = v494;
                    if (v859 < v460)
                      break;
                    v524 = (2 * v460) | 1;
                    v462 = &v857[v524];
                    v525 = 2 * v460 + 2;
                    if (v525 >= v9)
                    {
                      v460 = (2 * v460) | 1;
                    }
                    else
                    {
                      v526 = **v462;
                      if ((*((_BYTE *)v526 + 23) & 0x10) != 0)
                      {
                        v527 = ***v526;
                        v528 = *(_QWORD *)(v527 + 152);
                        v529 = *(unsigned int *)(v527 + 168);
                        if ((_DWORD)v529)
                        {
                          LODWORD(v530) = (v529 - 1) & ((v526 >> 4) ^ (v526 >> 9));
                          v531 = (uint64_t ****)(v528 + 16 * v530);
                          v532 = *v531;
                          if (*v531 != v526)
                          {
                            v533 = 1;
                            do
                            {
                              if (v532 == (uint64_t ***)-4096)
                                goto LABEL_567;
                              v534 = v530 + v533++;
                              v530 = v534 & (v529 - 1);
                              v532 = *(uint64_t ****)(v528 + 16 * v530);
                            }
                            while (v532 != v526);
                            v531 = (uint64_t ****)(v528 + 16 * v530);
                          }
                        }
                        else
                        {
LABEL_567:
                          v531 = (uint64_t ****)(v528 + 16 * v529);
                        }
                        v535 = v531[1];
                        v538 = (unint64_t)*v535;
                        v536 = (char *)(v535 + 2);
                        v537 = v538;
                      }
                      else
                      {
                        v537 = 0;
                        v536 = &byte_1C871356D;
                      }
                      v539 = v462[1];
                      ++v462;
                      v540 = *v539;
                      if ((*((_BYTE *)*v539 + 23) & 0x10) != 0)
                      {
                        v541 = ***v540;
                        v542 = *(_QWORD *)(v541 + 152);
                        v543 = *(unsigned int *)(v541 + 168);
                        if ((_DWORD)v543)
                        {
                          LODWORD(v544) = (v543 - 1) & ((v540 >> 4) ^ (v540 >> 9));
                          v545 = (uint64_t ****)(v542 + 16 * v544);
                          v546 = *v545;
                          if (*v545 != v540)
                          {
                            v547 = 1;
                            do
                            {
                              if (v546 == (uint64_t ***)-4096)
                                goto LABEL_576;
                              v548 = v544 + v547++;
                              v544 = v548 & (v543 - 1);
                              v546 = *(uint64_t ****)(v542 + 16 * v544);
                            }
                            while (v546 != v540);
                            v545 = (uint64_t ****)(v542 + 16 * v544);
                          }
                        }
                        else
                        {
LABEL_576:
                          v545 = (uint64_t ****)(v542 + 16 * v543);
                        }
                        v549 = v545[1];
                        v552 = (unint64_t)*v549;
                        v550 = (char *)(v549 + 2);
                        v551 = v552;
                      }
                      else
                      {
                        v551 = 0;
                        v550 = &byte_1C871356D;
                      }
                      v553 = v551 >= v537 ? v537 : v551;
                      if (v553 && (v554 = memcmp(v536, v550, v553)) != 0)
                      {
                        v555 = (v554 >> 31) | 1;
                      }
                      else
                      {
                        if (v537 < v551)
                          v555 = -1;
                        else
                          v555 = 1;
                        if (v537 == v551)
                          v555 = 0;
                      }
                      if (v555 == -1)
                      {
                        v460 = v525;
                      }
                      else
                      {
                        v462 = &v857[v524];
                        v460 = v524;
                      }
                    }
                    v494 = *v462;
                    v556 = **v462;
                    if ((*((_BYTE *)v556 + 23) & 0x10) != 0)
                    {
                      v557 = ***v556;
                      v558 = *(_QWORD *)(v557 + 152);
                      v559 = *(unsigned int *)(v557 + 168);
                      if ((_DWORD)v559)
                      {
                        LODWORD(v560) = (v559 - 1) & ((v556 >> 4) ^ (v556 >> 9));
                        v561 = (uint64_t ****)(v558 + 16 * v560);
                        v562 = *v561;
                        if (*v561 != v556)
                        {
                          v563 = 1;
                          do
                          {
                            if (v562 == (uint64_t ***)-4096)
                              goto LABEL_599;
                            v564 = v560 + v563++;
                            v560 = v564 & (v559 - 1);
                            v562 = *(uint64_t ****)(v558 + 16 * v560);
                          }
                          while (v562 != v556);
                          v561 = (uint64_t ****)(v558 + 16 * v560);
                        }
                      }
                      else
                      {
LABEL_599:
                        v561 = (uint64_t ****)(v558 + 16 * v559);
                      }
                      v565 = v561[1];
                      v567 = (unint64_t)*v565;
                      result = (char *)(v565 + 2);
                      v566 = v567;
                    }
                    else
                    {
                      v566 = 0;
                      result = &byte_1C871356D;
                    }
                    v568 = *v495;
                    if ((*((_BYTE *)*v495 + 23) & 0x10) != 0)
                    {
                      v569 = ***v568;
                      v570 = *(_QWORD *)(v569 + 152);
                      v571 = *(unsigned int *)(v569 + 168);
                      if ((_DWORD)v571)
                      {
                        LODWORD(v572) = (v571 - 1) & ((v568 >> 4) ^ (v568 >> 9));
                        v573 = (uint64_t ****)(v570 + 16 * v572);
                        v574 = *v573;
                        if (*v573 != v568)
                        {
                          v575 = 1;
                          do
                          {
                            if (v574 == (uint64_t ***)-4096)
                              goto LABEL_608;
                            v576 = v572 + v575++;
                            v572 = v576 & (v571 - 1);
                            v574 = *(uint64_t ****)(v570 + 16 * v572);
                          }
                          while (v574 != v568);
                          v573 = (uint64_t ****)(v570 + 16 * v572);
                        }
                      }
                      else
                      {
LABEL_608:
                        v573 = (uint64_t ****)(v570 + 16 * v571);
                      }
                      v577 = v573[1];
                      v580 = (unint64_t)*v577;
                      v578 = (char *)(v577 + 2);
                      v579 = v580;
                    }
                    else
                    {
                      v579 = 0;
                      v578 = &byte_1C871356D;
                    }
                    v581 = v579 >= v566 ? v566 : v579;
                    if (v581 && (result = (char *)memcmp(result, v578, v581), (_DWORD)result))
                    {
                      v582 = ((int)result >> 31) | 1;
                    }
                    else if (v566 == v579)
                    {
                      v582 = 0;
                    }
                    else
                    {
                      if (v566 < v579)
                        break;
                      v582 = 1;
                    }
                    v493 = v523;
                  }
                  while (v582 != -1);
                  *v523 = v495;
                  v7 = v857;
                }
              }
            }
            v458 = v459 - 1;
            if (!v459)
            {
              v583 = v856;
              while (1)
              {
                v584 = v583;
                v585 = 0;
                v860 = *v7;
                v586 = v7;
                do
                {
                  v587 = &v586[v585 + 1];
                  v588 = (2 * v585) | 1;
                  v589 = 2 * v585 + 2;
                  if (v589 < v9)
                  {
                    v590 = **v587;
                    if ((*((_BYTE *)v590 + 23) & 0x10) != 0)
                    {
                      v591 = ***v590;
                      v592 = *(_QWORD *)(v591 + 152);
                      v593 = *(unsigned int *)(v591 + 168);
                      if ((_DWORD)v593)
                      {
                        LODWORD(v594) = (v593 - 1) & ((v590 >> 4) ^ (v590 >> 9));
                        v595 = (uint64_t ****)(v592 + 16 * v594);
                        v596 = *v595;
                        if (*v595 != v590)
                        {
                          v597 = 1;
                          do
                          {
                            if (v596 == (uint64_t ***)-4096)
                              goto LABEL_642;
                            v598 = v594 + v597++;
                            v594 = v598 & (v593 - 1);
                            v596 = *(uint64_t ****)(v592 + 16 * v594);
                          }
                          while (v596 != v590);
                          v595 = (uint64_t ****)(v592 + 16 * v594);
                        }
                      }
                      else
                      {
LABEL_642:
                        v595 = (uint64_t ****)(v592 + 16 * v593);
                      }
                      v599 = v595[1];
                      v601 = (size_t)*v599;
                      result = (char *)(v599 + 2);
                      v600 = v601;
                    }
                    else
                    {
                      v600 = 0;
                      result = &byte_1C871356D;
                    }
                    v602 = *v587[1];
                    if ((*((_BYTE *)v602 + 23) & 0x10) != 0)
                    {
                      v603 = ***v602;
                      v604 = *(_QWORD *)(v603 + 152);
                      v605 = *(unsigned int *)(v603 + 168);
                      if ((_DWORD)v605)
                      {
                        LODWORD(v606) = (v605 - 1) & ((v602 >> 4) ^ (v602 >> 9));
                        v607 = (uint64_t ****)(v604 + 16 * v606);
                        v608 = *v607;
                        if (*v607 != v602)
                        {
                          v609 = 1;
                          do
                          {
                            if (v608 == (uint64_t ***)-4096)
                              goto LABEL_651;
                            v610 = v606 + v609++;
                            v606 = v610 & (v605 - 1);
                            v608 = *(uint64_t ****)(v604 + 16 * v606);
                          }
                          while (v608 != v602);
                          v607 = (uint64_t ****)(v604 + 16 * v606);
                        }
                      }
                      else
                      {
LABEL_651:
                        v607 = (uint64_t ****)(v604 + 16 * v605);
                      }
                      v611 = v607[1];
                      v614 = (size_t)*v611;
                      v612 = (char *)(v611 + 2);
                      v613 = v614;
                    }
                    else
                    {
                      v613 = 0;
                      v612 = &byte_1C871356D;
                    }
                    if (v613 >= v600)
                      v615 = v600;
                    else
                      v615 = v613;
                    if (v615 && (result = (char *)memcmp(result, v612, v615), (_DWORD)result))
                    {
                      v616 = ((int)result >> 31) | 1;
                    }
                    else
                    {
                      if (v600 < v613)
                        v616 = -1;
                      else
                        v616 = 1;
                      if (v600 == v613)
                        v616 = 0;
                    }
                    if (v616 == -1)
                    {
                      ++v587;
                      v588 = v589;
                    }
                  }
                  *v586 = *v587;
                  v586 = v587;
                  v585 = v588;
                }
                while (v588 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
                --v583;
                if (v587 == v584 - 1)
                {
                  *v587 = v860;
                }
                else
                {
                  *v587 = *v583;
                  *v583 = v860;
                  v617 = (char *)v587 - (char *)v857 + 8;
                  if (v617 >= 9)
                  {
                    v618 = (((unint64_t)v617 >> 3) - 2) >> 1;
                    v619 = &v857[v618];
                    v620 = *v619;
                    v621 = **v619;
                    if ((*((_BYTE *)v621 + 23) & 0x10) != 0)
                    {
                      v622 = ***v621;
                      v623 = *(_QWORD *)(v622 + 152);
                      v624 = *(unsigned int *)(v622 + 168);
                      if ((_DWORD)v624)
                      {
                        LODWORD(v625) = (v624 - 1) & ((v621 >> 4) ^ (v621 >> 9));
                        v626 = (uint64_t ****)(v623 + 16 * v625);
                        v627 = *v626;
                        if (*v626 != v621)
                        {
                          v628 = 1;
                          do
                          {
                            if (v627 == (uint64_t ***)-4096)
                              goto LABEL_680;
                            v629 = v625 + v628++;
                            v625 = v629 & (v624 - 1);
                            v627 = *(uint64_t ****)(v623 + 16 * v625);
                          }
                          while (v627 != v621);
                          v626 = (uint64_t ****)(v623 + 16 * v625);
                        }
                      }
                      else
                      {
LABEL_680:
                        v626 = (uint64_t ****)(v623 + 16 * v624);
                      }
                      v630 = v626[1];
                      v632 = (size_t)*v630;
                      result = (char *)(v630 + 2);
                      v631 = v632;
                    }
                    else
                    {
                      v631 = 0;
                      result = &byte_1C871356D;
                    }
                    v633 = *v587;
                    v634 = **v587;
                    if ((*((_BYTE *)v634 + 23) & 0x10) != 0)
                    {
                      v635 = ***v634;
                      v636 = *(_QWORD *)(v635 + 152);
                      v637 = *(unsigned int *)(v635 + 168);
                      if ((_DWORD)v637)
                      {
                        LODWORD(v638) = (v637 - 1) & ((v634 >> 4) ^ (v634 >> 9));
                        v639 = (uint64_t ****)(v636 + 16 * v638);
                        v640 = *v639;
                        if (*v639 != v634)
                        {
                          v641 = 1;
                          do
                          {
                            if (v640 == (uint64_t ***)-4096)
                              goto LABEL_689;
                            v642 = v638 + v641++;
                            v638 = v642 & (v637 - 1);
                            v640 = *(uint64_t ****)(v636 + 16 * v638);
                          }
                          while (v640 != v634);
                          v639 = (uint64_t ****)(v636 + 16 * v638);
                        }
                      }
                      else
                      {
LABEL_689:
                        v639 = (uint64_t ****)(v636 + 16 * v637);
                      }
                      v643 = v639[1];
                      v646 = (size_t)*v643;
                      v644 = (char *)(v643 + 2);
                      v645 = v646;
                    }
                    else
                    {
                      v645 = 0;
                      v644 = &byte_1C871356D;
                    }
                    if (v645 >= v631)
                      v647 = v631;
                    else
                      v647 = v645;
                    if (v647 && (result = (char *)memcmp(result, v644, v647), (_DWORD)result))
                    {
                      if ((result & 0x80000000) != 0)
                      {
                        do
                        {
LABEL_699:
                          v648 = v619;
                          *v587 = v620;
                          if (!v618)
                            break;
                          v618 = (v618 - 1) >> 1;
                          v619 = &v857[v618];
                          v620 = *v619;
                          v649 = **v619;
                          if ((*((_BYTE *)v649 + 23) & 0x10) != 0)
                          {
                            v650 = ***v649;
                            v651 = *(_QWORD *)(v650 + 152);
                            v652 = *(unsigned int *)(v650 + 168);
                            if ((_DWORD)v652)
                            {
                              LODWORD(v653) = (v652 - 1) & ((v649 >> 4) ^ (v649 >> 9));
                              v654 = (uint64_t ****)(v651 + 16 * v653);
                              v655 = *v654;
                              if (*v654 != v649)
                              {
                                v656 = 1;
                                do
                                {
                                  if (v655 == (uint64_t ***)-4096)
                                    goto LABEL_707;
                                  v657 = v653 + v656++;
                                  v653 = v657 & (v652 - 1);
                                  v655 = *(uint64_t ****)(v651 + 16 * v653);
                                }
                                while (v655 != v649);
                                v654 = (uint64_t ****)(v651 + 16 * v653);
                              }
                            }
                            else
                            {
LABEL_707:
                              v654 = (uint64_t ****)(v651 + 16 * v652);
                            }
                            v658 = v654[1];
                            v660 = (unint64_t)*v658;
                            result = (char *)(v658 + 2);
                            v659 = v660;
                          }
                          else
                          {
                            v659 = 0;
                            result = &byte_1C871356D;
                          }
                          v661 = *v633;
                          if ((*((_BYTE *)*v633 + 23) & 0x10) != 0)
                          {
                            v662 = ***v661;
                            v663 = *(_QWORD *)(v662 + 152);
                            v664 = *(unsigned int *)(v662 + 168);
                            if ((_DWORD)v664)
                            {
                              LODWORD(v665) = (v664 - 1) & ((v661 >> 4) ^ (v661 >> 9));
                              v666 = (uint64_t ****)(v663 + 16 * v665);
                              v667 = *v666;
                              if (*v666 != v661)
                              {
                                v668 = 1;
                                do
                                {
                                  if (v667 == (uint64_t ***)-4096)
                                    goto LABEL_716;
                                  v669 = v665 + v668++;
                                  v665 = v669 & (v664 - 1);
                                  v667 = *(uint64_t ****)(v663 + 16 * v665);
                                }
                                while (v667 != v661);
                                v666 = (uint64_t ****)(v663 + 16 * v665);
                              }
                            }
                            else
                            {
LABEL_716:
                              v666 = (uint64_t ****)(v663 + 16 * v664);
                            }
                            v670 = v666[1];
                            v673 = (unint64_t)*v670;
                            v671 = (char *)(v670 + 2);
                            v672 = v673;
                          }
                          else
                          {
                            v672 = 0;
                            v671 = &byte_1C871356D;
                          }
                          v674 = v672 >= v659 ? v659 : v672;
                          if (v674 && (result = (char *)memcmp(result, v671, v674), (_DWORD)result))
                          {
                            v675 = ((int)result >> 31) | 1;
                          }
                          else
                          {
                            if (v659 >= v672)
                              break;
                            v675 = -1;
                          }
                          v587 = v648;
                        }
                        while (v675 == -1);
                        *v648 = v633;
                      }
                    }
                    else if (v631 < v645)
                    {
                      goto LABEL_699;
                    }
                  }
                }
                v676 = v9-- <= 2;
                v7 = v857;
                if (v676)
                  return result;
              }
            }
          }
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = &v7[(unint64_t)v9 >> 1];
        if ((unint64_t)v8 < 0x401)
        {
          sub_1C526BC94(v11, v7, v852);
        }
        else
        {
          sub_1C526BC94(v7, v11, v852);
          sub_1C526BC94(v7 + 1, v11 - 1, v851);
          sub_1C526BC94(v7 + 2, &v7[v10 + 1], v850);
          sub_1C526BC94(v11 - 1, v11, &v7[v10 + 1]);
          v12 = *v7;
          *v7 = *v11;
          *v11 = v12;
        }
        v13 = *v7;
        v855 = a3 - 1;
        v858 = *v7;
        if ((a4 & 1) == 0)
        {
          v16 = **(v7 - 1);
          if ((*((_BYTE *)v16 + 23) & 0x10) != 0)
          {
            v17 = ***v16;
            v18 = *(_QWORD *)(v17 + 152);
            v19 = *(unsigned int *)(v17 + 168);
            if ((_DWORD)v19)
            {
              LODWORD(v20) = (v19 - 1) & ((v16 >> 4) ^ (v16 >> 9));
              v21 = (uint64_t ****)(v18 + 16 * v20);
              v22 = *v21;
              if (*v21 == v16)
              {
LABEL_19:
                v25 = v21[1];
                v28 = (size_t)*v25;
                v26 = (char *)(v25 + 2);
                v27 = v28;
                goto LABEL_20;
              }
              v23 = 1;
              while (v22 != (uint64_t ***)-4096)
              {
                v24 = v20 + v23++;
                v20 = v24 & (v19 - 1);
                v22 = *(uint64_t ****)(v18 + 16 * v20);
                if (v22 == v16)
                {
                  v21 = (uint64_t ****)(v18 + 16 * v20);
                  goto LABEL_19;
                }
              }
            }
            v21 = (uint64_t ****)(v18 + 16 * v19);
            goto LABEL_19;
          }
          v27 = 0;
          v26 = &byte_1C871356D;
LABEL_20:
          v14 = *v13;
          v29 = *((_DWORD *)*v13 + 5);
          v30 = *v13 >> 4;
          if ((v29 & 0x10000000) != 0)
          {
            v31 = ***v14;
            v32 = *(_QWORD *)(v31 + 152);
            v33 = *(unsigned int *)(v31 + 168);
            if ((_DWORD)v33)
            {
              LODWORD(v34) = (v33 - 1) & (v30 ^ (v14 >> 9));
              v35 = (uint64_t ****)(v32 + 16 * v34);
              v36 = *v35;
              if (*v35 == v14)
              {
LABEL_28:
                v39 = v35[1];
                v42 = (size_t)*v39;
                v40 = (char *)(v39 + 2);
                v41 = v42;
                goto LABEL_29;
              }
              v37 = 1;
              while (v36 != (uint64_t ***)-4096)
              {
                v38 = v34 + v37++;
                v34 = v38 & (v33 - 1);
                v36 = *(uint64_t ****)(v32 + 16 * v34);
                if (v36 == v14)
                {
                  v35 = (uint64_t ****)(v32 + 16 * v34);
                  goto LABEL_28;
                }
              }
            }
            v35 = (uint64_t ****)(v32 + 16 * v33);
            goto LABEL_28;
          }
          v41 = 0;
          v40 = &byte_1C871356D;
LABEL_29:
          v15 = v29 & 0x10000000;
          if (v41 >= v27)
            v43 = v27;
          else
            v43 = v41;
          if (v43 && (v44 = memcmp(v26, v40, v43)) != 0)
          {
            if (v44 < 0)
              goto LABEL_43;
          }
          else if (v27 < v41)
          {
            goto LABEL_43;
          }
          if (v15)
          {
            v45 = ***v14;
            v46 = *(_QWORD *)(v45 + 152);
            v47 = *(unsigned int *)(v45 + 168);
            if (!(_DWORD)v47)
              goto LABEL_211;
            LODWORD(v48) = (v47 - 1) & (v30 ^ (v14 >> 9));
            v49 = (uint64_t ****)(v46 + 16 * v48);
            v50 = *v49;
            if (*v49 != v14)
            {
              v51 = 1;
              while (v50 != (uint64_t ***)-4096)
              {
                v52 = v48 + v51++;
                v48 = v52 & (v47 - 1);
                v50 = *(uint64_t ****)(v46 + 16 * v48);
                if (v50 == v14)
                {
                  v49 = (uint64_t ****)(v46 + 16 * v48);
                  goto LABEL_212;
                }
              }
LABEL_211:
              v49 = (uint64_t ****)(v46 + 16 * v47);
            }
LABEL_212:
            v210 = v49[1];
            v212 = (size_t)*v210;
            result = (char *)(v210 + 2);
            v211 = v212;
            goto LABEL_213;
          }
          v211 = 0;
          result = &byte_1C871356D;
LABEL_213:
          v213 = **v852;
          if ((*((_BYTE *)v213 + 23) & 0x10) != 0)
          {
            v214 = ***v213;
            v215 = *(_QWORD *)(v214 + 152);
            v216 = *(unsigned int *)(v214 + 168);
            if ((_DWORD)v216)
            {
              LODWORD(v217) = (v216 - 1) & ((v213 >> 4) ^ (v213 >> 9));
              v218 = (uint64_t ****)(v215 + 16 * v217);
              v219 = *v218;
              if (*v218 == v213)
              {
LABEL_221:
                v222 = v218[1];
                v225 = (size_t)*v222;
                v223 = (char *)(v222 + 2);
                v224 = v225;
                goto LABEL_222;
              }
              v220 = 1;
              while (v219 != (uint64_t ***)-4096)
              {
                v221 = v217 + v220++;
                v217 = v221 & (v216 - 1);
                v219 = *(uint64_t ****)(v215 + 16 * v217);
                if (v219 == v213)
                {
                  v218 = (uint64_t ****)(v215 + 16 * v217);
                  goto LABEL_221;
                }
              }
            }
            v218 = (uint64_t ****)(v215 + 16 * v216);
            goto LABEL_221;
          }
          v224 = 0;
          v223 = &byte_1C871356D;
LABEL_222:
          if (v224 >= v211)
            v226 = v211;
          else
            v226 = v224;
          if (v226)
          {
            result = (char *)memcmp(result, v223, v226);
            if ((_DWORD)result)
            {
              if ((result & 0x80000000) == 0)
                goto LABEL_228;
              goto LABEL_263;
            }
          }
          if (v211 >= v224)
          {
LABEL_228:
            v6 = v7;
            while (1)
            {
              if (++v6 >= v856)
                goto LABEL_296;
              if (v15)
                break;
              v236 = 0;
              result = &byte_1C871356D;
LABEL_239:
              v238 = **v6;
              if ((*((_BYTE *)v238 + 23) & 0x10) == 0)
              {
                v249 = 0;
                v248 = &byte_1C871356D;
                goto LABEL_248;
              }
              v239 = ***v238;
              v240 = *(_QWORD *)(v239 + 152);
              v241 = *(unsigned int *)(v239 + 168);
              if (!(_DWORD)v241)
                goto LABEL_246;
              LODWORD(v242) = (v241 - 1) & ((v238 >> 4) ^ (v238 >> 9));
              v243 = (uint64_t ****)(v240 + 16 * v242);
              v244 = *v243;
              if (*v243 != v238)
              {
                v245 = 1;
                while (v244 != (uint64_t ***)-4096)
                {
                  v246 = v242 + v245++;
                  v242 = v246 & (v241 - 1);
                  v244 = *(uint64_t ****)(v240 + 16 * v242);
                  if (v244 == v238)
                  {
                    v243 = (uint64_t ****)(v240 + 16 * v242);
                    goto LABEL_247;
                  }
                }
LABEL_246:
                v243 = (uint64_t ****)(v240 + 16 * v241);
              }
LABEL_247:
              v247 = v243[1];
              v250 = (size_t)*v247;
              v248 = (char *)(v247 + 2);
              v249 = v250;
LABEL_248:
              if (v249 >= v236)
                v251 = v236;
              else
                v251 = v249;
              if (v251 && (result = (char *)memcmp(result, v248, v251), (_DWORD)result))
              {
                v252 = ((int)result >> 31) | 1;
              }
              else if (v236 == v249)
              {
                v252 = 0;
              }
              else
              {
                if (v236 < v249)
                  goto LABEL_296;
                v252 = 1;
              }
              if (v252 == -1)
                goto LABEL_296;
            }
            v227 = ***v14;
            v228 = *(_QWORD *)(v227 + 152);
            v229 = *(unsigned int *)(v227 + 168);
            if ((_DWORD)v229)
            {
              LODWORD(v230) = (v229 - 1) & (v30 ^ (v14 >> 9));
              v231 = (uint64_t ****)(v228 + 16 * v230);
              v232 = *v231;
              if (*v231 != v14)
              {
                v233 = 1;
                while (v232 != (uint64_t ***)-4096)
                {
                  v234 = v230 + v233++;
                  v230 = v234 & (v229 - 1);
                  v232 = *(uint64_t ****)(v228 + 16 * v230);
                  if (v232 == v14)
                  {
                    v231 = (uint64_t ****)(v228 + 16 * v230);
                    goto LABEL_238;
                  }
                }
                goto LABEL_237;
              }
            }
            else
            {
LABEL_237:
              v231 = (uint64_t ****)(v228 + 16 * v229);
            }
LABEL_238:
            v235 = v231[1];
            v237 = (size_t)*v235;
            result = (char *)(v235 + 2);
            v236 = v237;
            goto LABEL_239;
          }
LABEL_263:
          v6 = v7;
          do
          {
            if (v15)
            {
              v253 = ***v14;
              v254 = *(_QWORD *)(v253 + 152);
              v255 = *(unsigned int *)(v253 + 168);
              if ((_DWORD)v255)
              {
                LODWORD(v256) = (v255 - 1) & (v30 ^ (v14 >> 9));
                v257 = (uint64_t ****)(v254 + 16 * v256);
                v258 = *v257;
                if (*v257 == v14)
                {
LABEL_272:
                  v261 = v257[1];
                  v263 = (size_t)*v261;
                  result = (char *)(v261 + 2);
                  v262 = v263;
                  goto LABEL_273;
                }
                v259 = 1;
                while (v258 != (uint64_t ***)-4096)
                {
                  v260 = v256 + v259++;
                  v256 = v260 & (v255 - 1);
                  v258 = *(uint64_t ****)(v254 + 16 * v256);
                  if (v258 == v14)
                  {
                    v257 = (uint64_t ****)(v254 + 16 * v256);
                    goto LABEL_272;
                  }
                }
              }
              v257 = (uint64_t ****)(v254 + 16 * v255);
              goto LABEL_272;
            }
            v262 = 0;
            result = &byte_1C871356D;
LABEL_273:
            v264 = v6[1];
            ++v6;
            v265 = *v264;
            if ((*((_BYTE *)*v264 + 23) & 0x10) != 0)
            {
              v266 = ***v265;
              v267 = *(_QWORD *)(v266 + 152);
              v268 = *(unsigned int *)(v266 + 168);
              if ((_DWORD)v268)
              {
                LODWORD(v269) = (v268 - 1) & ((v265 >> 4) ^ (v265 >> 9));
                v270 = (uint64_t ****)(v267 + 16 * v269);
                v271 = *v270;
                if (*v270 == v265)
                {
LABEL_281:
                  v274 = v270[1];
                  v277 = (size_t)*v274;
                  v275 = (char *)(v274 + 2);
                  v276 = v277;
                  goto LABEL_282;
                }
                v272 = 1;
                while (v271 != (uint64_t ***)-4096)
                {
                  v273 = v269 + v272++;
                  v269 = v273 & (v268 - 1);
                  v271 = *(uint64_t ****)(v267 + 16 * v269);
                  if (v271 == v265)
                  {
                    v270 = (uint64_t ****)(v267 + 16 * v269);
                    goto LABEL_281;
                  }
                }
              }
              v270 = (uint64_t ****)(v267 + 16 * v268);
              goto LABEL_281;
            }
            v276 = 0;
            v275 = &byte_1C871356D;
LABEL_282:
            if (v276 >= v262)
              v278 = v262;
            else
              v278 = v276;
            if (v278 && (result = (char *)memcmp(result, v275, v278), (_DWORD)result))
            {
              v279 = ((int)result >> 31) | 1;
            }
            else if (v262 == v276)
            {
              v279 = 0;
            }
            else
            {
              if (v262 < v276)
                break;
              v279 = 1;
            }
          }
          while (v279 != -1);
LABEL_296:
          v280 = v856;
          if (v6 < v856)
          {
            v281 = v30 ^ (v14 >> 9);
            v280 = v856;
            while (!v15)
            {
              v291 = 0;
              result = &byte_1C871356D;
LABEL_307:
              v293 = *--v280;
              v294 = *v293;
              if ((*((_BYTE *)*v293 + 23) & 0x10) == 0)
              {
                v305 = 0;
                v304 = &byte_1C871356D;
                goto LABEL_316;
              }
              v295 = ***v294;
              v296 = *(_QWORD *)(v295 + 152);
              v297 = *(unsigned int *)(v295 + 168);
              if (!(_DWORD)v297)
                goto LABEL_314;
              LODWORD(v298) = (v297 - 1) & ((v294 >> 4) ^ (v294 >> 9));
              v299 = (uint64_t ****)(v296 + 16 * v298);
              v300 = *v299;
              if (*v299 != v294)
              {
                v301 = 1;
                while (v300 != (uint64_t ***)-4096)
                {
                  v302 = v298 + v301++;
                  v298 = v302 & (v297 - 1);
                  v300 = *(uint64_t ****)(v296 + 16 * v298);
                  if (v300 == v294)
                  {
                    v299 = (uint64_t ****)(v296 + 16 * v298);
                    goto LABEL_315;
                  }
                }
LABEL_314:
                v299 = (uint64_t ****)(v296 + 16 * v297);
              }
LABEL_315:
              v303 = v299[1];
              v306 = (size_t)*v303;
              v304 = (char *)(v303 + 2);
              v305 = v306;
LABEL_316:
              if (v305 >= v291)
                v307 = v291;
              else
                v307 = v305;
              if (v307 && (result = (char *)memcmp(result, v304, v307), (_DWORD)result))
              {
                v308 = ((int)result >> 31) | 1;
              }
              else
              {
                if (v291 >= v305)
                  goto LABEL_328;
                v308 = -1;
              }
              if (v308 != -1)
                goto LABEL_328;
            }
            v282 = ***v14;
            v283 = *(_QWORD *)(v282 + 152);
            v284 = *(unsigned int *)(v282 + 168);
            if ((_DWORD)v284)
            {
              LODWORD(v285) = (v284 - 1) & v281;
              v286 = (uint64_t ****)(v283 + 16 * v285);
              v287 = *v286;
              if (*v286 != v14)
              {
                v288 = 1;
                while (v287 != (uint64_t ***)-4096)
                {
                  v289 = v285 + v288++;
                  v285 = v289 & (v284 - 1);
                  v287 = *(uint64_t ****)(v283 + 16 * v285);
                  if (v287 == v14)
                  {
                    v286 = (uint64_t ****)(v283 + 16 * v285);
                    goto LABEL_306;
                  }
                }
                goto LABEL_305;
              }
            }
            else
            {
LABEL_305:
              v286 = (uint64_t ****)(v283 + 16 * v284);
            }
LABEL_306:
            v290 = v286[1];
            v292 = (size_t)*v290;
            result = (char *)(v290 + 2);
            v291 = v292;
            goto LABEL_307;
          }
LABEL_328:
          if (v6 >= v280)
          {
            v311 = v858;
            goto LABEL_395;
          }
          v309 = *v6;
          v310 = *v280;
          v311 = v858;
          while (2)
          {
            *v6 = v310;
            *v280 = v309;
            v312 = v311;
            v313 = *v311;
            v314 = *((_DWORD *)*v311 + 5);
            v315 = (*v311 >> 4) ^ (*v311 >> 9);
            while (2)
            {
              v316 = v6[1];
              ++v6;
              v309 = v316;
              if ((v314 & 0x10000000) != 0)
              {
                v317 = ***v313;
                v318 = *(_QWORD *)(v317 + 152);
                v319 = *(unsigned int *)(v317 + 168);
                if (!(_DWORD)v319)
                  goto LABEL_338;
                LODWORD(v320) = (v319 - 1) & v315;
                v321 = (uint64_t ****)(v318 + 16 * v320);
                v322 = *v321;
                if (*v321 != v313)
                {
                  v323 = 1;
                  while (v322 != (uint64_t ***)-4096)
                  {
                    v324 = v320 + v323++;
                    v320 = v324 & (v319 - 1);
                    v322 = *(uint64_t ****)(v318 + 16 * v320);
                    if (v322 == v313)
                    {
                      v321 = (uint64_t ****)(v318 + 16 * v320);
                      goto LABEL_339;
                    }
                  }
LABEL_338:
                  v321 = (uint64_t ****)(v318 + 16 * v319);
                }
LABEL_339:
                v325 = v321[1];
                v328 = (size_t)*v325;
                v326 = (char *)(v325 + 2);
                v327 = v328;
              }
              else
              {
                v327 = 0;
                v326 = &byte_1C871356D;
              }
              v329 = *v309;
              if ((*((_BYTE *)*v309 + 23) & 0x10) != 0)
              {
                v330 = ***v329;
                v331 = *(_QWORD *)(v330 + 152);
                v332 = *(unsigned int *)(v330 + 168);
                if (!(_DWORD)v332)
                  goto LABEL_347;
                LODWORD(v333) = (v332 - 1) & ((v329 >> 4) ^ (v329 >> 9));
                v334 = (uint64_t ****)(v331 + 16 * v333);
                v335 = *v334;
                if (*v334 != v329)
                {
                  v336 = 1;
                  while (v335 != (uint64_t ***)-4096)
                  {
                    v337 = v333 + v336++;
                    v333 = v337 & (v332 - 1);
                    v335 = *(uint64_t ****)(v331 + 16 * v333);
                    if (v335 == v329)
                    {
                      v334 = (uint64_t ****)(v331 + 16 * v333);
                      goto LABEL_348;
                    }
                  }
LABEL_347:
                  v334 = (uint64_t ****)(v331 + 16 * v332);
                }
LABEL_348:
                v338 = v334[1];
                v341 = (size_t)*v338;
                v339 = (char *)(v338 + 2);
                v340 = v341;
              }
              else
              {
                v340 = 0;
                v339 = &byte_1C871356D;
              }
              if (v340 >= v327)
                v342 = v327;
              else
                v342 = v340;
              if (v342 && (v343 = memcmp(v326, v339, v342)) != 0)
              {
                v344 = (v343 >> 31) | 1;
              }
              else if (v327 == v340)
              {
                v344 = 0;
              }
              else
              {
                if (v327 < v340)
                  break;
                v344 = 1;
              }
              if (v344 != -1)
                continue;
              break;
            }
            while (2)
            {
              v348 = *--v280;
              v310 = v348;
              if ((v314 & 0x10000000) != 0)
              {
                v349 = ***v313;
                v350 = *(_QWORD *)(v349 + 152);
                v351 = *(unsigned int *)(v349 + 168);
                if (!(_DWORD)v351)
                  goto LABEL_372;
                LODWORD(v352) = (v351 - 1) & v315;
                v353 = (uint64_t ****)(v350 + 16 * v352);
                v354 = *v353;
                if (*v353 != v313)
                {
                  v355 = 1;
                  while (v354 != (uint64_t ***)-4096)
                  {
                    v356 = v352 + v355++;
                    v352 = v356 & (v351 - 1);
                    v354 = *(uint64_t ****)(v350 + 16 * v352);
                    if (v354 == v313)
                    {
                      v353 = (uint64_t ****)(v350 + 16 * v352);
                      goto LABEL_373;
                    }
                  }
LABEL_372:
                  v353 = (uint64_t ****)(v350 + 16 * v351);
                }
LABEL_373:
                v357 = v353[1];
                v358 = (size_t)*v357;
                result = (char *)(v357 + 2);
                v345 = v358;
              }
              else
              {
                v345 = 0;
                result = &byte_1C871356D;
              }
              v359 = *v310;
              if ((*((_BYTE *)*v310 + 23) & 0x10) != 0)
              {
                v360 = ***v359;
                v361 = *(_QWORD *)(v360 + 152);
                v362 = *(unsigned int *)(v360 + 168);
                if (!(_DWORD)v362)
                  goto LABEL_381;
                LODWORD(v363) = (v362 - 1) & ((v359 >> 4) ^ (v359 >> 9));
                v364 = (uint64_t ****)(v361 + 16 * v363);
                v365 = *v364;
                if (*v364 != v359)
                {
                  v366 = 1;
                  while (v365 != (uint64_t ***)-4096)
                  {
                    v367 = v363 + v366++;
                    v363 = v367 & (v362 - 1);
                    v365 = *(uint64_t ****)(v361 + 16 * v363);
                    if (v365 == v359)
                    {
                      v364 = (uint64_t ****)(v361 + 16 * v363);
                      goto LABEL_382;
                    }
                  }
LABEL_381:
                  v364 = (uint64_t ****)(v361 + 16 * v362);
                }
LABEL_382:
                v368 = v364[1];
                v369 = (size_t)*v368;
                v347 = (char *)(v368 + 2);
                v346 = v369;
              }
              else
              {
                v346 = 0;
                v347 = &byte_1C871356D;
              }
              if (v346 >= v345)
                v370 = v345;
              else
                v370 = v346;
              if (v370 && (result = (char *)memcmp(result, v347, v370), (_DWORD)result))
              {
                v371 = ((int)result >> 31) | 1;
              }
              else
              {
                if (v345 >= v346)
                  break;
                v371 = -1;
              }
              if (v371 == -1)
                continue;
              break;
            }
            v311 = v312;
            if (v6 < v280)
              continue;
            break;
          }
LABEL_395:
          v372 = v6 - 1;
          if (v6 - 1 != v857)
            *v857 = *v372;
          a4 = 0;
          *v372 = v311;
          a3 = v855;
          continue;
        }
        v14 = *v13;
        v15 = *((_DWORD *)*v13 + 5) & 0x10000000;
LABEL_43:
        v53 = (v14 >> 4) ^ (v14 >> 9);
        v54 = v7;
        while (2)
        {
          v55 = v54;
          v57 = v54[1];
          ++v54;
          v56 = v57;
          v58 = *v57;
          if ((*((_BYTE *)*v57 + 23) & 0x10) == 0)
          {
            v69 = 0;
            v68 = &byte_1C871356D;
            if (v15)
              goto LABEL_53;
LABEL_72:
            v81 = 0;
            v80 = &byte_1C871356D;
            goto LABEL_61;
          }
          v59 = ***v58;
          v60 = *(_QWORD *)(v59 + 152);
          v61 = *(unsigned int *)(v59 + 168);
          if (!(_DWORD)v61)
            goto LABEL_51;
          LODWORD(v62) = (v61 - 1) & ((v58 >> 4) ^ (v58 >> 9));
          v63 = (uint64_t ****)(v60 + 16 * v62);
          v64 = *v63;
          if (*v63 != v58)
          {
            v65 = 1;
            while (v64 != (uint64_t ***)-4096)
            {
              v66 = v62 + v65++;
              v62 = v66 & (v61 - 1);
              v64 = *(uint64_t ****)(v60 + 16 * v62);
              if (v64 == v58)
              {
                v63 = (uint64_t ****)(v60 + 16 * v62);
                goto LABEL_52;
              }
            }
LABEL_51:
            v63 = (uint64_t ****)(v60 + 16 * v61);
          }
LABEL_52:
          v67 = v63[1];
          v70 = (size_t)*v67;
          v68 = (char *)(v67 + 2);
          v69 = v70;
          if (!v15)
            goto LABEL_72;
LABEL_53:
          v71 = ***v14;
          v72 = *(_QWORD *)(v71 + 152);
          v73 = *(unsigned int *)(v71 + 168);
          if (!(_DWORD)v73)
            goto LABEL_59;
          LODWORD(v74) = (v73 - 1) & v53;
          v75 = (uint64_t ****)(v72 + 16 * v74);
          v76 = *v75;
          if (*v75 != v14)
          {
            v77 = 1;
            while (v76 != (uint64_t ***)-4096)
            {
              v78 = v74 + v77++;
              v74 = v78 & (v73 - 1);
              v76 = *(uint64_t ****)(v72 + 16 * v74);
              if (v76 == v14)
              {
                v75 = (uint64_t ****)(v72 + 16 * v74);
                goto LABEL_60;
              }
            }
LABEL_59:
            v75 = (uint64_t ****)(v72 + 16 * v73);
          }
LABEL_60:
          v79 = v75[1];
          v82 = (size_t)*v79;
          v80 = (char *)(v79 + 2);
          v81 = v82;
LABEL_61:
          if (v81 >= v69)
            v83 = v69;
          else
            v83 = v81;
          if (v83 && (v84 = memcmp(v68, v80, v83)) != 0)
          {
            v85 = (v84 >> 31) | 1;
          }
          else
          {
            if (v69 >= v81)
              break;
            v85 = -1;
          }
          if (v85 == -1)
            continue;
          break;
        }
        v86 = v856;
        if (v55 != v857)
        {
          while (2)
          {
            v87 = *--v86;
            v88 = *v87;
            if ((*((_BYTE *)*v87 + 23) & 0x10) != 0)
            {
              v89 = ***v88;
              v90 = *(_QWORD *)(v89 + 152);
              v91 = *(unsigned int *)(v89 + 168);
              if (!(_DWORD)v91)
                goto LABEL_81;
              LODWORD(v92) = (v91 - 1) & ((v88 >> 4) ^ (v88 >> 9));
              v93 = (uint64_t ****)(v90 + 16 * v92);
              v94 = *v93;
              if (*v93 != v88)
              {
                v95 = 1;
                while (v94 != (uint64_t ***)-4096)
                {
                  v96 = v92 + v95++;
                  v92 = v96 & (v91 - 1);
                  v94 = *(uint64_t ****)(v90 + 16 * v92);
                  if (v94 == v88)
                  {
                    v93 = (uint64_t ****)(v90 + 16 * v92);
                    goto LABEL_82;
                  }
                }
LABEL_81:
                v93 = (uint64_t ****)(v90 + 16 * v91);
              }
LABEL_82:
              v97 = v93[1];
              v100 = (size_t)*v97;
              v98 = (char *)(v97 + 2);
              v99 = v100;
              if (v15)
              {
LABEL_83:
                v101 = ***v14;
                v102 = *(_QWORD *)(v101 + 152);
                v103 = *(unsigned int *)(v101 + 168);
                if (!(_DWORD)v103)
                  goto LABEL_89;
                LODWORD(v104) = (v103 - 1) & v53;
                v105 = (uint64_t ****)(v102 + 16 * v104);
                v106 = *v105;
                if (*v105 != v14)
                {
                  v107 = 1;
                  while (v106 != (uint64_t ***)-4096)
                  {
                    v108 = v104 + v107++;
                    v104 = v108 & (v103 - 1);
                    v106 = *(uint64_t ****)(v102 + 16 * v104);
                    if (v106 == v14)
                    {
                      v105 = (uint64_t ****)(v102 + 16 * v104);
                      goto LABEL_90;
                    }
                  }
LABEL_89:
                  v105 = (uint64_t ****)(v102 + 16 * v103);
                }
LABEL_90:
                v109 = v105[1];
                v112 = (size_t)*v109;
                v110 = (char *)(v109 + 2);
                v111 = v112;
LABEL_91:
                if (v111 >= v99)
                  v113 = v99;
                else
                  v113 = v111;
                if (v113 && (v114 = memcmp(v98, v110, v113)) != 0)
                {
                  v115 = (v114 >> 31) | 1;
                }
                else if (v99 == v111)
                {
                  v115 = 0;
                }
                else
                {
                  if (v99 < v111)
                    goto LABEL_138;
                  v115 = 1;
                }
                if (v115 == -1)
                  goto LABEL_138;
                continue;
              }
            }
            else
            {
              v99 = 0;
              v98 = &byte_1C871356D;
              if (v15)
                goto LABEL_83;
            }
            break;
          }
          v111 = 0;
          v110 = &byte_1C871356D;
          goto LABEL_91;
        }
        v86 = v856;
        while (2)
        {
          if (v54 < v86)
          {
            v116 = *--v86;
            v117 = *v116;
            if ((*((_BYTE *)*v116 + 23) & 0x10) != 0)
            {
              v118 = ***v117;
              v119 = *(_QWORD *)(v118 + 152);
              v120 = *(unsigned int *)(v118 + 168);
              if (!(_DWORD)v120)
                goto LABEL_114;
              LODWORD(v121) = (v120 - 1) & ((v117 >> 4) ^ (v117 >> 9));
              v122 = (uint64_t ****)(v119 + 16 * v121);
              v123 = *v122;
              if (*v122 != v117)
              {
                v124 = 1;
                while (v123 != (uint64_t ***)-4096)
                {
                  v125 = v121 + v124++;
                  v121 = v125 & (v120 - 1);
                  v123 = *(uint64_t ****)(v119 + 16 * v121);
                  if (v123 == v117)
                  {
                    v122 = (uint64_t ****)(v119 + 16 * v121);
                    goto LABEL_115;
                  }
                }
LABEL_114:
                v122 = (uint64_t ****)(v119 + 16 * v120);
              }
LABEL_115:
              v126 = v122[1];
              v129 = (size_t)*v126;
              v127 = (char *)(v126 + 2);
              v128 = v129;
              if (v15)
              {
LABEL_116:
                v130 = ***v14;
                v131 = *(_QWORD *)(v130 + 152);
                v132 = *(unsigned int *)(v130 + 168);
                if (!(_DWORD)v132)
                  goto LABEL_122;
                LODWORD(v133) = (v132 - 1) & v53;
                v134 = (uint64_t ****)(v131 + 16 * v133);
                v135 = *v134;
                if (*v134 != v14)
                {
                  v136 = 1;
                  while (v135 != (uint64_t ***)-4096)
                  {
                    v137 = v133 + v136++;
                    v133 = v137 & (v132 - 1);
                    v135 = *(uint64_t ****)(v131 + 16 * v133);
                    if (v135 == v14)
                    {
                      v134 = (uint64_t ****)(v131 + 16 * v133);
                      goto LABEL_123;
                    }
                  }
LABEL_122:
                  v134 = (uint64_t ****)(v131 + 16 * v132);
                }
LABEL_123:
                v138 = v134[1];
                v141 = (size_t)*v138;
                v139 = (char *)(v138 + 2);
                v140 = v141;
LABEL_124:
                if (v140 >= v128)
                  v142 = v128;
                else
                  v142 = v140;
                if (v142 && (v143 = memcmp(v127, v139, v142)) != 0)
                {
                  v144 = (v143 >> 31) | 1;
                }
                else if (v128 == v140)
                {
                  v144 = 0;
                }
                else
                {
                  if (v128 < v140)
                    break;
                  v144 = 1;
                }
                if (v144 == -1)
                  break;
                continue;
              }
            }
            else
            {
              v128 = 0;
              v127 = &byte_1C871356D;
              if (v15)
                goto LABEL_116;
            }
            v140 = 0;
            v139 = &byte_1C871356D;
            goto LABEL_124;
          }
          break;
        }
LABEL_138:
        v854 = v86;
        if (v54 >= v86)
        {
          v6 = v54;
          goto LABEL_203;
        }
        v145 = v86;
        v146 = *v86;
        v6 = v54;
        while (2)
        {
          *v6 = v146;
          *v145 = v56;
          v147 = *v858;
          v148 = *((_DWORD *)*v858 + 5);
          v149 = (*v858 >> 4) ^ (*v858 >> 9);
          while (2)
          {
            v150 = v6[1];
            ++v6;
            v56 = v150;
            v151 = *v150;
            if ((*((_BYTE *)*v150 + 23) & 0x10) == 0)
            {
              v162 = 0;
              v161 = &byte_1C871356D;
              if ((v148 & 0x10000000) != 0)
                goto LABEL_150;
LABEL_169:
              v174 = 0;
              v173 = &byte_1C871356D;
              goto LABEL_158;
            }
            v152 = ***v151;
            v153 = *(_QWORD *)(v152 + 152);
            v154 = *(unsigned int *)(v152 + 168);
            if (!(_DWORD)v154)
              goto LABEL_148;
            LODWORD(v155) = (v154 - 1) & ((v151 >> 4) ^ (v151 >> 9));
            v156 = (uint64_t ****)(v153 + 16 * v155);
            v157 = *v156;
            if (*v156 != v151)
            {
              v158 = 1;
              while (v157 != (uint64_t ***)-4096)
              {
                v159 = v155 + v158++;
                v155 = v159 & (v154 - 1);
                v157 = *(uint64_t ****)(v153 + 16 * v155);
                if (v157 == v151)
                {
                  v156 = (uint64_t ****)(v153 + 16 * v155);
                  goto LABEL_149;
                }
              }
LABEL_148:
              v156 = (uint64_t ****)(v153 + 16 * v154);
            }
LABEL_149:
            v160 = v156[1];
            v163 = (size_t)*v160;
            v161 = (char *)(v160 + 2);
            v162 = v163;
            if ((v148 & 0x10000000) == 0)
              goto LABEL_169;
LABEL_150:
            v164 = ***v147;
            v165 = *(_QWORD *)(v164 + 152);
            v166 = *(unsigned int *)(v164 + 168);
            if (!(_DWORD)v166)
              goto LABEL_156;
            LODWORD(v167) = (v166 - 1) & v149;
            v168 = (uint64_t ****)(v165 + 16 * v167);
            v169 = *v168;
            if (*v168 != v147)
            {
              v170 = 1;
              while (v169 != (uint64_t ***)-4096)
              {
                v171 = v167 + v170++;
                v167 = v171 & (v166 - 1);
                v169 = *(uint64_t ****)(v165 + 16 * v167);
                if (v169 == v147)
                {
                  v168 = (uint64_t ****)(v165 + 16 * v167);
                  goto LABEL_157;
                }
              }
LABEL_156:
              v168 = (uint64_t ****)(v165 + 16 * v166);
            }
LABEL_157:
            v172 = v168[1];
            v175 = (size_t)*v172;
            v173 = (char *)(v172 + 2);
            v174 = v175;
LABEL_158:
            if (v174 >= v162)
              v176 = v162;
            else
              v176 = v174;
            if (v176 && (v177 = memcmp(v161, v173, v176)) != 0)
            {
              v178 = (v177 >> 31) | 1;
            }
            else
            {
              if (v162 >= v174)
                break;
              v178 = -1;
            }
            if (v178 == -1)
              continue;
            break;
          }
          while (2)
          {
            v183 = *--v145;
            v146 = v183;
            v184 = *v183;
            if ((*((_BYTE *)*v183 + 23) & 0x10) == 0)
            {
              v179 = 0;
              v180 = &byte_1C871356D;
              if ((v148 & 0x10000000) != 0)
                goto LABEL_181;
LABEL_171:
              v181 = 0;
              v182 = &byte_1C871356D;
              goto LABEL_189;
            }
            v185 = ***v184;
            v186 = *(_QWORD *)(v185 + 152);
            v187 = *(unsigned int *)(v185 + 168);
            if (!(_DWORD)v187)
              goto LABEL_179;
            LODWORD(v188) = (v187 - 1) & ((v184 >> 4) ^ (v184 >> 9));
            v189 = (uint64_t ****)(v186 + 16 * v188);
            v190 = *v189;
            if (*v189 != v184)
            {
              v191 = 1;
              while (v190 != (uint64_t ***)-4096)
              {
                v192 = v188 + v191++;
                v188 = v192 & (v187 - 1);
                v190 = *(uint64_t ****)(v186 + 16 * v188);
                if (v190 == v184)
                {
                  v189 = (uint64_t ****)(v186 + 16 * v188);
                  goto LABEL_180;
                }
              }
LABEL_179:
              v189 = (uint64_t ****)(v186 + 16 * v187);
            }
LABEL_180:
            v193 = v189[1];
            v194 = (size_t)*v193;
            v180 = (char *)(v193 + 2);
            v179 = v194;
            if ((v148 & 0x10000000) == 0)
              goto LABEL_171;
LABEL_181:
            v195 = ***v147;
            v196 = *(_QWORD *)(v195 + 152);
            v197 = *(unsigned int *)(v195 + 168);
            if (!(_DWORD)v197)
              goto LABEL_187;
            LODWORD(v198) = (v197 - 1) & v149;
            v199 = (uint64_t ****)(v196 + 16 * v198);
            v200 = *v199;
            if (*v199 != v147)
            {
              v201 = 1;
              while (v200 != (uint64_t ***)-4096)
              {
                v202 = v198 + v201++;
                v198 = v202 & (v197 - 1);
                v200 = *(uint64_t ****)(v196 + 16 * v198);
                if (v200 == v147)
                {
                  v199 = (uint64_t ****)(v196 + 16 * v198);
                  goto LABEL_188;
                }
              }
LABEL_187:
              v199 = (uint64_t ****)(v196 + 16 * v197);
            }
LABEL_188:
            v203 = v199[1];
            v204 = (size_t)*v203;
            v182 = (char *)(v203 + 2);
            v181 = v204;
LABEL_189:
            if (v181 >= v179)
              v205 = v179;
            else
              v205 = v181;
            if (v205 && (v206 = memcmp(v180, v182, v205)) != 0)
            {
              v207 = (v206 >> 31) | 1;
            }
            else if (v179 == v181)
            {
              v207 = 0;
            }
            else
            {
              if (v179 < v181)
                break;
              v207 = 1;
            }
            if (v207 != -1)
              continue;
            break;
          }
          if (v6 < v145)
            continue;
          break;
        }
LABEL_203:
        v208 = v6 - 1;
        v5 = v857;
        if (v6 - 1 != v857)
          *v857 = *v208;
        *v208 = v858;
        a3 = v855;
        if (v54 < v854)
        {
LABEL_208:
          result = (char *)sub_1C52691EC(v857, v6 - 1, v855, a4 & 1);
          a4 = 0;
          continue;
        }
        v209 = sub_1C526C354(v857, v6 - 1);
        result = (char *)sub_1C526C354(v6, v856);
        if (!(_DWORD)result)
        {
          if (v209)
            continue;
          goto LABEL_208;
        }
        a2 = v6 - 1;
        if (!v209)
          goto LABEL_2;
        return result;
    }
  }
}

char *sub_1C526BC94(uint64_t *****a1, uint64_t *****a2, uint64_t *****a3)
{
  uint64_t *****v4;
  uint64_t *****v5;
  uint64_t ****v6;
  uint64_t ****v7;
  uint64_t ***v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ****v15;
  uint64_t ***v16;
  int v17;
  int v18;
  uint64_t ***v19;
  char *v20;
  size_t v21;
  size_t v22;
  uint64_t ***v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ****v28;
  uint64_t ***v29;
  int v30;
  int v31;
  uint64_t ***v32;
  char *v33;
  size_t v34;
  size_t v35;
  size_t v36;
  int v37;
  uint64_t ****v38;
  uint64_t ***v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t ****v44;
  uint64_t ***v45;
  int v46;
  int v47;
  uint64_t ****v48;
  uint64_t ***v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t ****v54;
  uint64_t ***v55;
  int v56;
  int v57;
  uint64_t ***v58;
  char *result;
  size_t v60;
  size_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t ****v66;
  uint64_t ***v67;
  int v68;
  int v69;
  uint64_t ***v70;
  char *v71;
  size_t v72;
  size_t v73;
  size_t v74;
  uint64_t ***v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t ****v80;
  uint64_t ***v81;
  int v82;
  int v83;
  uint64_t ***v84;
  size_t v85;
  size_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t ****v91;
  uint64_t ***v92;
  int v93;
  int v94;
  uint64_t ***v95;
  char *v96;
  size_t v97;
  size_t v98;
  size_t v99;
  uint64_t ***v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t ****v105;
  uint64_t ***v106;
  int v107;
  int v108;
  uint64_t ***v109;
  size_t v110;
  size_t v111;
  uint64_t ***v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t ****v117;
  uint64_t ***v118;
  int v119;
  int v120;
  uint64_t ***v121;
  size_t v122;
  size_t v123;
  uint64_t ***v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t ****v129;
  uint64_t ***v130;
  int v131;
  int v132;
  uint64_t ***v133;
  char *v134;
  size_t v135;
  size_t v136;
  size_t v137;
  uint64_t ***v138;
  char *v139;
  size_t v140;
  size_t v141;
  size_t v142;

  v4 = a2;
  v5 = a1;
  v6 = *a2;
  v7 = *a1;
  v8 = **a2;
  v9 = *((_DWORD *)v8 + 5);
  v10 = v8 >> 4;
  if ((v9 & 0x10000000) != 0)
  {
    v11 = ***v8;
    v12 = *(_QWORD *)(v11 + 152);
    v13 = *(unsigned int *)(v11 + 168);
    if ((_DWORD)v13)
    {
      LODWORD(v14) = (v13 - 1) & (v10 ^ (v8 >> 9));
      v15 = (uint64_t ****)(v12 + 16 * v14);
      v16 = *v15;
      if (*v15 == v8)
      {
LABEL_9:
        v19 = v15[1];
        v22 = (size_t)*v19;
        v20 = (char *)(v19 + 2);
        v21 = v22;
        goto LABEL_10;
      }
      v17 = 1;
      while (v16 != (uint64_t ***)-4096)
      {
        v18 = v14 + v17++;
        v14 = v18 & (v13 - 1);
        v16 = *(uint64_t ****)(v12 + 16 * v14);
        if (v16 == v8)
        {
          v15 = (uint64_t ****)(v12 + 16 * v14);
          goto LABEL_9;
        }
      }
    }
    v15 = (uint64_t ****)(v12 + 16 * v13);
    goto LABEL_9;
  }
  v21 = 0;
  v20 = &byte_1C871356D;
LABEL_10:
  v23 = *v7;
  if ((*((_BYTE *)*v7 + 23) & 0x10) != 0)
  {
    v24 = ***v23;
    v25 = *(_QWORD *)(v24 + 152);
    v26 = *(unsigned int *)(v24 + 168);
    if ((_DWORD)v26)
    {
      LODWORD(v27) = (v26 - 1) & ((v23 >> 4) ^ (v23 >> 9));
      v28 = (uint64_t ****)(v25 + 16 * v27);
      v29 = *v28;
      if (*v28 == v23)
      {
LABEL_18:
        v32 = v28[1];
        v35 = (size_t)*v32;
        v33 = (char *)(v32 + 2);
        v34 = v35;
        goto LABEL_19;
      }
      v30 = 1;
      while (v29 != (uint64_t ***)-4096)
      {
        v31 = v27 + v30++;
        v27 = v31 & (v26 - 1);
        v29 = *(uint64_t ****)(v25 + 16 * v27);
        if (v29 == v23)
        {
          v28 = (uint64_t ****)(v25 + 16 * v27);
          goto LABEL_18;
        }
      }
    }
    v28 = (uint64_t ****)(v25 + 16 * v26);
    goto LABEL_18;
  }
  v34 = 0;
  v33 = &byte_1C871356D;
LABEL_19:
  if (v34 >= v21)
    v36 = v21;
  else
    v36 = v34;
  if (v36)
  {
    v37 = memcmp(v20, v33, v36);
    if (v37)
    {
      if ((v37 & 0x80000000) == 0)
        goto LABEL_25;
LABEL_33:
      v48 = *a3;
      v49 = **a3;
      if ((*((_BYTE *)v49 + 23) & 0x10) == 0)
      {
        v85 = 0;
        result = &byte_1C871356D;
        if ((v9 & 0x10000000) != 0)
        {
LABEL_67:
          v87 = ***v8;
          v88 = *(_QWORD *)(v87 + 152);
          v89 = *(unsigned int *)(v87 + 168);
          if ((_DWORD)v89)
          {
            LODWORD(v90) = (v89 - 1) & (v10 ^ (v8 >> 9));
            v91 = (uint64_t ****)(v88 + 16 * v90);
            v92 = *v91;
            if (*v91 == v8)
            {
LABEL_74:
              v95 = v91[1];
              v98 = (size_t)*v95;
              v96 = (char *)(v95 + 2);
              v97 = v98;
              goto LABEL_75;
            }
            v93 = 1;
            while (v92 != (uint64_t ***)-4096)
            {
              v94 = v90 + v93++;
              v90 = v94 & (v89 - 1);
              v92 = *(uint64_t ****)(v88 + 16 * v90);
              if (v92 == v8)
              {
                v91 = (uint64_t ****)(v88 + 16 * v90);
                goto LABEL_74;
              }
            }
          }
          v91 = (uint64_t ****)(v88 + 16 * v89);
          goto LABEL_74;
        }
LABEL_135:
        v97 = 0;
        v96 = &byte_1C871356D;
LABEL_75:
        if (v97 >= v85)
          v99 = v85;
        else
          v99 = v97;
        if (v99 && (result = (char *)memcmp(result, v96, v99), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            goto LABEL_81;
        }
        else if (v85 >= v97)
        {
LABEL_81:
          *v5 = v6;
          *v4 = v7;
          v48 = *a3;
          v100 = **a3;
          if ((*((_BYTE *)v100 + 23) & 0x10) == 0)
          {
            v122 = 0;
            result = &byte_1C871356D;
LABEL_101:
            v124 = *v7;
            if ((*((_BYTE *)*v7 + 23) & 0x10) == 0)
            {
              v140 = 0;
              v139 = &byte_1C871356D;
              goto LABEL_120;
            }
            v125 = ***v124;
            v126 = *(_QWORD *)(v125 + 152);
            v127 = *(unsigned int *)(v125 + 168);
            if ((_DWORD)v127)
            {
              LODWORD(v128) = (v127 - 1) & ((v124 >> 4) ^ (v124 >> 9));
              v129 = (uint64_t ****)(v126 + 16 * v128);
              v130 = *v129;
              if (*v129 == v124)
              {
LABEL_119:
                v138 = v129[1];
                v141 = (size_t)*v138;
                v139 = (char *)(v138 + 2);
                v140 = v141;
LABEL_120:
                if (v140 >= v122)
                  v142 = v122;
                else
                  v142 = v140;
                if (v142)
                {
                  result = (char *)memcmp(result, v139, v142);
                  if ((_DWORD)result)
                  {
                    v5 = v4;
                    v4 = a3;
                    goto LABEL_126;
                  }
                }
                v5 = v4;
                v4 = a3;
                if (v122 >= v140)
                  return result;
LABEL_116:
                *v5 = v48;
                *v4 = v7;
                return result;
              }
              v131 = 1;
              while (v130 != (uint64_t ***)-4096)
              {
                v132 = v128 + v131++;
                v128 = v132 & (v127 - 1);
                v130 = *(uint64_t ****)(v126 + 16 * v128);
                if (v130 == v124)
                {
                  v129 = (uint64_t ****)(v126 + 16 * v128);
                  goto LABEL_119;
                }
              }
            }
            v129 = (uint64_t ****)(v126 + 16 * v127);
            goto LABEL_119;
          }
          v101 = ***v100;
          v102 = *(_QWORD *)(v101 + 152);
          v103 = *(unsigned int *)(v101 + 168);
          if ((_DWORD)v103)
          {
            LODWORD(v104) = (v103 - 1) & ((v100 >> 4) ^ (v100 >> 9));
            v105 = (uint64_t ****)(v102 + 16 * v104);
            v106 = *v105;
            if (*v105 == v100)
            {
LABEL_100:
              v121 = v105[1];
              v123 = (size_t)*v121;
              result = (char *)(v121 + 2);
              v122 = v123;
              goto LABEL_101;
            }
            v107 = 1;
            while (v106 != (uint64_t ***)-4096)
            {
              v108 = v104 + v107++;
              v104 = v108 & (v103 - 1);
              v106 = *(uint64_t ****)(v102 + 16 * v104);
              if (v106 == v100)
              {
                v105 = (uint64_t ****)(v102 + 16 * v104);
                goto LABEL_100;
              }
            }
          }
          v105 = (uint64_t ****)(v102 + 16 * v103);
          goto LABEL_100;
        }
        v4 = a3;
        goto LABEL_116;
      }
      v50 = ***v49;
      v51 = *(_QWORD *)(v50 + 152);
      v52 = *(unsigned int *)(v50 + 168);
      if ((_DWORD)v52)
      {
        LODWORD(v53) = (v52 - 1) & ((v49 >> 4) ^ (v49 >> 9));
        v54 = (uint64_t ****)(v51 + 16 * v53);
        v55 = *v54;
        if (*v54 == v49)
          goto LABEL_66;
        v56 = 1;
        while (v55 != (uint64_t ***)-4096)
        {
          v57 = v53 + v56++;
          v53 = v57 & (v52 - 1);
          v55 = *(uint64_t ****)(v51 + 16 * v53);
          if (v55 == v49)
          {
            v54 = (uint64_t ****)(v51 + 16 * v53);
            goto LABEL_66;
          }
        }
      }
      v54 = (uint64_t ****)(v51 + 16 * v52);
LABEL_66:
      v84 = v54[1];
      v86 = (size_t)*v84;
      result = (char *)(v84 + 2);
      v85 = v86;
      if ((v9 & 0x10000000) != 0)
        goto LABEL_67;
      goto LABEL_135;
    }
  }
  if (v21 < v34)
    goto LABEL_33;
LABEL_25:
  v38 = *a3;
  v39 = **a3;
  if ((*((_BYTE *)v39 + 23) & 0x10) != 0)
  {
    v40 = ***v39;
    v41 = *(_QWORD *)(v40 + 152);
    v42 = *(unsigned int *)(v40 + 168);
    if ((_DWORD)v42)
    {
      LODWORD(v43) = (v42 - 1) & ((v39 >> 4) ^ (v39 >> 9));
      v44 = (uint64_t ****)(v41 + 16 * v43);
      v45 = *v44;
      if (*v44 == v39)
        goto LABEL_41;
      v46 = 1;
      while (v45 != (uint64_t ***)-4096)
      {
        v47 = v43 + v46++;
        v43 = v47 & (v42 - 1);
        v45 = *(uint64_t ****)(v41 + 16 * v43);
        if (v45 == v39)
        {
          v44 = (uint64_t ****)(v41 + 16 * v43);
          goto LABEL_41;
        }
      }
    }
    v44 = (uint64_t ****)(v41 + 16 * v42);
LABEL_41:
    v58 = v44[1];
    v61 = (size_t)*v58;
    result = (char *)(v58 + 2);
    v60 = v61;
    if ((v9 & 0x10000000) != 0)
      goto LABEL_42;
    goto LABEL_133;
  }
  v60 = 0;
  result = &byte_1C871356D;
  if ((v9 & 0x10000000) != 0)
  {
LABEL_42:
    v62 = ***v8;
    v63 = *(_QWORD *)(v62 + 152);
    v64 = *(unsigned int *)(v62 + 168);
    if ((_DWORD)v64)
    {
      LODWORD(v65) = (v64 - 1) & (v10 ^ (v8 >> 9));
      v66 = (uint64_t ****)(v63 + 16 * v65);
      v67 = *v66;
      if (*v66 == v8)
      {
LABEL_49:
        v70 = v66[1];
        v73 = (size_t)*v70;
        v71 = (char *)(v70 + 2);
        v72 = v73;
        goto LABEL_50;
      }
      v68 = 1;
      while (v67 != (uint64_t ***)-4096)
      {
        v69 = v65 + v68++;
        v65 = v69 & (v64 - 1);
        v67 = *(uint64_t ****)(v63 + 16 * v65);
        if (v67 == v8)
        {
          v66 = (uint64_t ****)(v63 + 16 * v65);
          goto LABEL_49;
        }
      }
    }
    v66 = (uint64_t ****)(v63 + 16 * v64);
    goto LABEL_49;
  }
LABEL_133:
  v72 = 0;
  v71 = &byte_1C871356D;
LABEL_50:
  if (v72 >= v60)
    v74 = v60;
  else
    v74 = v72;
  if (v74 && (result = (char *)memcmp(result, v71, v74), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v60 >= v72)
  {
    return result;
  }
  *v4 = v38;
  *a3 = v6;
  v48 = *v4;
  v7 = *v5;
  v75 = **v4;
  if ((*((_BYTE *)v75 + 23) & 0x10) != 0)
  {
    v76 = ***v75;
    v77 = *(_QWORD *)(v76 + 152);
    v78 = *(unsigned int *)(v76 + 168);
    if ((_DWORD)v78)
    {
      LODWORD(v79) = (v78 - 1) & ((v75 >> 4) ^ (v75 >> 9));
      v80 = (uint64_t ****)(v77 + 16 * v79);
      v81 = *v80;
      if (*v80 == v75)
      {
LABEL_91:
        v109 = v80[1];
        v111 = (size_t)*v109;
        result = (char *)(v109 + 2);
        v110 = v111;
        goto LABEL_92;
      }
      v82 = 1;
      while (v81 != (uint64_t ***)-4096)
      {
        v83 = v79 + v82++;
        v79 = v83 & (v78 - 1);
        v81 = *(uint64_t ****)(v77 + 16 * v79);
        if (v81 == v75)
        {
          v80 = (uint64_t ****)(v77 + 16 * v79);
          goto LABEL_91;
        }
      }
    }
    v80 = (uint64_t ****)(v77 + 16 * v78);
    goto LABEL_91;
  }
  v110 = 0;
  result = &byte_1C871356D;
LABEL_92:
  v112 = *v7;
  if ((*((_BYTE *)*v7 + 23) & 0x10) != 0)
  {
    v113 = ***v112;
    v114 = *(_QWORD *)(v113 + 152);
    v115 = *(unsigned int *)(v113 + 168);
    if ((_DWORD)v115)
    {
      LODWORD(v116) = (v115 - 1) & ((v112 >> 4) ^ (v112 >> 9));
      v117 = (uint64_t ****)(v114 + 16 * v116);
      v118 = *v117;
      if (*v117 == v112)
      {
LABEL_109:
        v133 = v117[1];
        v136 = (size_t)*v133;
        v134 = (char *)(v133 + 2);
        v135 = v136;
        goto LABEL_110;
      }
      v119 = 1;
      while (v118 != (uint64_t ***)-4096)
      {
        v120 = v116 + v119++;
        v116 = v120 & (v115 - 1);
        v118 = *(uint64_t ****)(v114 + 16 * v116);
        if (v118 == v112)
        {
          v117 = (uint64_t ****)(v114 + 16 * v116);
          goto LABEL_109;
        }
      }
    }
    v117 = (uint64_t ****)(v114 + 16 * v115);
    goto LABEL_109;
  }
  v135 = 0;
  v134 = &byte_1C871356D;
LABEL_110:
  if (v135 >= v110)
    v137 = v110;
  else
    v137 = v135;
  if (!v137 || (result = (char *)memcmp(result, v134, v137), !(_DWORD)result))
  {
    if (v110 >= v135)
      return result;
    goto LABEL_116;
  }
LABEL_126:
  if ((result & 0x80000000) != 0)
    goto LABEL_116;
  return result;
}

BOOL sub_1C526C354(uint64_t *****a1, uint64_t *****a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t ****v6;
  uint64_t ****v7;
  uint64_t ***v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ****v13;
  uint64_t ***v14;
  int v15;
  int v16;
  uint64_t *****v17;
  uint64_t *****v18;
  int v19;
  uint64_t ****v20;
  uint64_t ***v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ****v26;
  uint64_t ***v27;
  int v28;
  int v29;
  uint64_t ***v30;
  char *v31;
  size_t v32;
  size_t v33;
  uint64_t ****v34;
  uint64_t ***v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t ****v40;
  uint64_t ***v41;
  int v42;
  int v43;
  uint64_t ***v44;
  char *v45;
  size_t v46;
  size_t v47;
  size_t v48;
  int v49;
  uint64_t *****v50;
  uint64_t ***v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t ****v56;
  uint64_t ***v57;
  int v58;
  int v59;
  uint64_t ***v60;
  char *v61;
  size_t v62;
  size_t v63;
  uint64_t ***v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t ****v69;
  uint64_t ***v70;
  int v71;
  int v72;
  uint64_t ***v73;
  char *v74;
  size_t v75;
  size_t v76;
  size_t v77;
  int v78;
  int v79;
  uint64_t *****v80;
  uint64_t *****v81;
  uint64_t ****v82;
  uint64_t ****v83;
  uint64_t ***v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t ****v89;
  uint64_t ***v90;
  int v91;
  int v92;
  uint64_t ***v93;
  char *v94;
  size_t v95;
  size_t v96;
  uint64_t ***v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t ****v102;
  uint64_t ***v103;
  int v104;
  int v105;
  uint64_t ***v106;
  char *v107;
  size_t v108;
  size_t v109;
  uint64_t ***v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t ****v115;
  uint64_t ***v116;
  int v117;
  int v118;
  uint64_t ***v119;
  char *v120;
  size_t v121;
  size_t v122;
  size_t v123;
  int v124;
  uint64_t ***v125;
  char *v126;
  size_t v127;
  size_t v128;
  size_t v129;
  int v130;
  uint64_t ****v131;
  uint64_t ****v132;
  uint64_t ***v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t ****v138;
  uint64_t ***v139;
  int v140;
  int v141;
  uint64_t ***v142;
  char *v143;
  size_t v144;
  size_t v145;
  uint64_t ***v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t ****v151;
  uint64_t ***v152;
  int v153;
  int v154;
  uint64_t ***v155;
  char *v156;
  size_t v157;
  size_t v158;
  size_t v159;
  int v160;
  uint64_t ****v161;
  uint64_t ***v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t ****v167;
  uint64_t ***v168;
  int v169;
  int v170;
  uint64_t ***v171;
  char *v172;
  size_t v173;
  size_t v174;
  uint64_t ***v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t ****v180;
  uint64_t ***v181;
  int v182;
  int v183;
  uint64_t ***v184;
  char *v185;
  size_t v186;
  size_t v187;
  size_t v188;
  int v189;
  uint64_t ****v190;
  uint64_t ***v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t ****v196;
  uint64_t ***v197;
  int v198;
  int v199;
  uint64_t ***v200;
  char *v201;
  size_t v202;
  size_t v203;
  uint64_t ***v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t ****v209;
  uint64_t ***v210;
  int v211;
  int v212;
  uint64_t ***v213;
  char *v214;
  size_t v215;
  size_t v216;
  size_t v217;
  int v218;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = *v6;
      if ((*((_BYTE *)*v6 + 23) & 0x10) != 0)
      {
        v9 = ***v8;
        v10 = *(_QWORD *)(v9 + 152);
        v11 = *(unsigned int *)(v9 + 168);
        if ((_DWORD)v11)
        {
          LODWORD(v12) = (v11 - 1) & ((v8 >> 4) ^ (v8 >> 9));
          v13 = (uint64_t ****)(v10 + 16 * v12);
          v14 = *v13;
          if (*v13 != v8)
          {
            v15 = 1;
            do
            {
              if (v14 == (uint64_t ***)-4096)
                goto LABEL_85;
              v16 = v12 + v15++;
              v12 = v16 & (v11 - 1);
              v14 = *(uint64_t ****)(v10 + 16 * v12);
            }
            while (v14 != v8);
            v13 = (uint64_t ****)(v10 + 16 * v12);
          }
        }
        else
        {
LABEL_85:
          v13 = (uint64_t ****)(v10 + 16 * v11);
        }
        v93 = v13[1];
        v96 = (size_t)*v93;
        v94 = (char *)(v93 + 2);
        v95 = v96;
      }
      else
      {
        v95 = 0;
        v94 = &byte_1C871356D;
      }
      v97 = *v7;
      if ((*((_BYTE *)*v7 + 23) & 0x10) != 0)
      {
        v98 = ***v97;
        v99 = *(_QWORD *)(v98 + 152);
        v100 = *(unsigned int *)(v98 + 168);
        if ((_DWORD)v100)
        {
          LODWORD(v101) = (v100 - 1) & ((v97 >> 4) ^ (v97 >> 9));
          v102 = (uint64_t ****)(v99 + 16 * v101);
          v103 = *v102;
          if (*v102 != v97)
          {
            v104 = 1;
            do
            {
              if (v103 == (uint64_t ***)-4096)
                goto LABEL_103;
              v105 = v101 + v104++;
              v101 = v105 & (v100 - 1);
              v103 = *(uint64_t ****)(v99 + 16 * v101);
            }
            while (v103 != v97);
            v102 = (uint64_t ****)(v99 + 16 * v101);
          }
        }
        else
        {
LABEL_103:
          v102 = (uint64_t ****)(v99 + 16 * v100);
        }
        v119 = v102[1];
        v122 = (size_t)*v119;
        v120 = (char *)(v119 + 2);
        v121 = v122;
      }
      else
      {
        v121 = 0;
        v120 = &byte_1C871356D;
      }
      if (v121 >= v95)
        v123 = v95;
      else
        v123 = v121;
      if (v123 && (v124 = memcmp(v94, v120, v123)) != 0)
      {
        if ((v124 & 0x80000000) == 0)
          return 1;
      }
      else if (v95 >= v121)
      {
        return 1;
      }
      *a1 = v6;
      *(a2 - 1) = v7;
      return 1;
    case 3:
      sub_1C526BC94(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C526CDC8(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v80 = a1 + 2;
      v81 = a1 + 3;
      sub_1C526CDC8(a1, a1 + 1, a1 + 2, a1 + 3);
      v82 = *(a2 - 1);
      v83 = a1[3];
      v84 = *v82;
      if ((*((_BYTE *)*v82 + 23) & 0x10) != 0)
      {
        v85 = ***v84;
        v86 = *(_QWORD *)(v85 + 152);
        v87 = *(unsigned int *)(v85 + 168);
        if ((_DWORD)v87)
        {
          LODWORD(v88) = (v87 - 1) & ((v84 >> 4) ^ (v84 >> 9));
          v89 = (uint64_t ****)(v86 + 16 * v88);
          v90 = *v89;
          if (*v89 != v84)
          {
            v91 = 1;
            do
            {
              if (v90 == (uint64_t ***)-4096)
                goto LABEL_94;
              v92 = v88 + v91++;
              v88 = v92 & (v87 - 1);
              v90 = *(uint64_t ****)(v86 + 16 * v88);
            }
            while (v90 != v84);
            v89 = (uint64_t ****)(v86 + 16 * v88);
          }
        }
        else
        {
LABEL_94:
          v89 = (uint64_t ****)(v86 + 16 * v87);
        }
        v106 = v89[1];
        v109 = (size_t)*v106;
        v107 = (char *)(v106 + 2);
        v108 = v109;
        goto LABEL_96;
      }
      v108 = 0;
      v107 = &byte_1C871356D;
LABEL_96:
      v110 = *v83;
      if ((*((_BYTE *)*v83 + 23) & 0x10) != 0)
      {
        v111 = ***v110;
        v112 = *(_QWORD *)(v111 + 152);
        v113 = *(unsigned int *)(v111 + 168);
        if ((_DWORD)v113)
        {
          LODWORD(v114) = (v113 - 1) & ((v110 >> 4) ^ (v110 >> 9));
          v115 = (uint64_t ****)(v112 + 16 * v114);
          v116 = *v115;
          if (*v115 != v110)
          {
            v117 = 1;
            do
            {
              if (v116 == (uint64_t ***)-4096)
                goto LABEL_114;
              v118 = v114 + v117++;
              v114 = v118 & (v113 - 1);
              v116 = *(uint64_t ****)(v112 + 16 * v114);
            }
            while (v116 != v110);
            v115 = (uint64_t ****)(v112 + 16 * v114);
          }
        }
        else
        {
LABEL_114:
          v115 = (uint64_t ****)(v112 + 16 * v113);
        }
        v125 = v115[1];
        v128 = (size_t)*v125;
        v126 = (char *)(v125 + 2);
        v127 = v128;
        goto LABEL_116;
      }
      v127 = 0;
      v126 = &byte_1C871356D;
LABEL_116:
      if (v127 >= v108)
        v129 = v108;
      else
        v129 = v127;
      if (v129 && (v130 = memcmp(v107, v126, v129)) != 0)
      {
        if ((v130 & 0x80000000) == 0)
          return 1;
      }
      else if (v108 >= v127)
      {
        return 1;
      }
      *v81 = v82;
      *(a2 - 1) = v83;
      v131 = *v81;
      v132 = *v80;
      v133 = **v81;
      if ((*((_BYTE *)v133 + 23) & 0x10) != 0)
      {
        v134 = ***v133;
        v135 = *(_QWORD *)(v134 + 152);
        v136 = *(unsigned int *)(v134 + 168);
        if ((_DWORD)v136)
        {
          LODWORD(v137) = (v136 - 1) & ((v133 >> 4) ^ (v133 >> 9));
          v138 = (uint64_t ****)(v135 + 16 * v137);
          v139 = *v138;
          if (*v138 != v133)
          {
            v140 = 1;
            do
            {
              if (v139 == (uint64_t ***)-4096)
                goto LABEL_131;
              v141 = v137 + v140++;
              v137 = v141 & (v136 - 1);
              v139 = *(uint64_t ****)(v135 + 16 * v137);
            }
            while (v139 != v133);
            v138 = (uint64_t ****)(v135 + 16 * v137);
          }
        }
        else
        {
LABEL_131:
          v138 = (uint64_t ****)(v135 + 16 * v136);
        }
        v142 = v138[1];
        v145 = (size_t)*v142;
        v143 = (char *)(v142 + 2);
        v144 = v145;
        goto LABEL_133;
      }
      v144 = 0;
      v143 = &byte_1C871356D;
LABEL_133:
      v146 = *v132;
      if ((*((_BYTE *)*v132 + 23) & 0x10) != 0)
      {
        v147 = ***v146;
        v148 = *(_QWORD *)(v147 + 152);
        v149 = *(unsigned int *)(v147 + 168);
        if ((_DWORD)v149)
        {
          LODWORD(v150) = (v149 - 1) & ((v146 >> 4) ^ (v146 >> 9));
          v151 = (uint64_t ****)(v148 + 16 * v150);
          v152 = *v151;
          if (*v151 != v146)
          {
            v153 = 1;
            do
            {
              if (v152 == (uint64_t ***)-4096)
                goto LABEL_140;
              v154 = v150 + v153++;
              v150 = v154 & (v149 - 1);
              v152 = *(uint64_t ****)(v148 + 16 * v150);
            }
            while (v152 != v146);
            v151 = (uint64_t ****)(v148 + 16 * v150);
          }
        }
        else
        {
LABEL_140:
          v151 = (uint64_t ****)(v148 + 16 * v149);
        }
        v155 = v151[1];
        v158 = (size_t)*v155;
        v156 = (char *)(v155 + 2);
        v157 = v158;
        goto LABEL_142;
      }
      v157 = 0;
      v156 = &byte_1C871356D;
LABEL_142:
      if (v157 >= v144)
        v159 = v144;
      else
        v159 = v157;
      if (v159 && (v160 = memcmp(v143, v156, v159)) != 0)
      {
        if ((v160 & 0x80000000) == 0)
          return 1;
      }
      else if (v144 >= v157)
      {
        return 1;
      }
      *v80 = v131;
      *v81 = v132;
      v161 = a1[1];
      v162 = *v131;
      if ((*((_BYTE *)*v131 + 23) & 0x10) != 0)
      {
        v163 = ***v162;
        v164 = *(_QWORD *)(v163 + 152);
        v165 = *(unsigned int *)(v163 + 168);
        if ((_DWORD)v165)
        {
          LODWORD(v166) = (v165 - 1) & ((v162 >> 4) ^ (v162 >> 9));
          v167 = (uint64_t ****)(v164 + 16 * v166);
          v168 = *v167;
          if (*v167 != v162)
          {
            v169 = 1;
            do
            {
              if (v168 == (uint64_t ***)-4096)
                goto LABEL_157;
              v170 = v166 + v169++;
              v166 = v170 & (v165 - 1);
              v168 = *(uint64_t ****)(v164 + 16 * v166);
            }
            while (v168 != v162);
            v167 = (uint64_t ****)(v164 + 16 * v166);
          }
        }
        else
        {
LABEL_157:
          v167 = (uint64_t ****)(v164 + 16 * v165);
        }
        v171 = v167[1];
        v174 = (size_t)*v171;
        v172 = (char *)(v171 + 2);
        v173 = v174;
        goto LABEL_159;
      }
      v173 = 0;
      v172 = &byte_1C871356D;
LABEL_159:
      v175 = *v161;
      if ((*((_BYTE *)*v161 + 23) & 0x10) != 0)
      {
        v176 = ***v175;
        v177 = *(_QWORD *)(v176 + 152);
        v178 = *(unsigned int *)(v176 + 168);
        if ((_DWORD)v178)
        {
          LODWORD(v179) = (v178 - 1) & ((v175 >> 4) ^ (v175 >> 9));
          v180 = (uint64_t ****)(v177 + 16 * v179);
          v181 = *v180;
          if (*v180 != v175)
          {
            v182 = 1;
            do
            {
              if (v181 == (uint64_t ***)-4096)
                goto LABEL_166;
              v183 = v179 + v182++;
              v179 = v183 & (v178 - 1);
              v181 = *(uint64_t ****)(v177 + 16 * v179);
            }
            while (v181 != v175);
            v180 = (uint64_t ****)(v177 + 16 * v179);
          }
        }
        else
        {
LABEL_166:
          v180 = (uint64_t ****)(v177 + 16 * v178);
        }
        v184 = v180[1];
        v187 = (size_t)*v184;
        v185 = (char *)(v184 + 2);
        v186 = v187;
        goto LABEL_168;
      }
      v186 = 0;
      v185 = &byte_1C871356D;
LABEL_168:
      if (v186 >= v173)
        v188 = v173;
      else
        v188 = v186;
      if (v188 && (v189 = memcmp(v172, v185, v188)) != 0)
      {
        if ((v189 & 0x80000000) == 0)
          return 1;
      }
      else if (v173 >= v186)
      {
        return 1;
      }
      a1[1] = v131;
      a1[2] = v161;
      v190 = *a1;
      v191 = *v131;
      if ((*((_BYTE *)*v131 + 23) & 0x10) != 0)
      {
        v192 = ***v191;
        v193 = *(_QWORD *)(v192 + 152);
        v194 = *(unsigned int *)(v192 + 168);
        if ((_DWORD)v194)
        {
          LODWORD(v195) = (v194 - 1) & ((v191 >> 4) ^ (v191 >> 9));
          v196 = (uint64_t ****)(v193 + 16 * v195);
          v197 = *v196;
          if (*v196 != v191)
          {
            v198 = 1;
            do
            {
              if (v197 == (uint64_t ***)-4096)
                goto LABEL_187;
              v199 = v195 + v198++;
              v195 = v199 & (v194 - 1);
              v197 = *(uint64_t ****)(v193 + 16 * v195);
            }
            while (v197 != v191);
            v196 = (uint64_t ****)(v193 + 16 * v195);
          }
        }
        else
        {
LABEL_187:
          v196 = (uint64_t ****)(v193 + 16 * v194);
        }
        v200 = v196[1];
        v203 = (size_t)*v200;
        v201 = (char *)(v200 + 2);
        v202 = v203;
        goto LABEL_189;
      }
      v202 = 0;
      v201 = &byte_1C871356D;
LABEL_189:
      v204 = *v190;
      if ((*((_BYTE *)*v190 + 23) & 0x10) != 0)
      {
        v205 = ***v204;
        v206 = *(_QWORD *)(v205 + 152);
        v207 = *(unsigned int *)(v205 + 168);
        if ((_DWORD)v207)
        {
          LODWORD(v208) = (v207 - 1) & ((v204 >> 4) ^ (v204 >> 9));
          v209 = (uint64_t ****)(v206 + 16 * v208);
          v210 = *v209;
          if (*v209 != v204)
          {
            v211 = 1;
            do
            {
              if (v210 == (uint64_t ***)-4096)
                goto LABEL_196;
              v212 = v208 + v211++;
              v208 = v212 & (v207 - 1);
              v210 = *(uint64_t ****)(v206 + 16 * v208);
            }
            while (v210 != v204);
            v209 = (uint64_t ****)(v206 + 16 * v208);
          }
        }
        else
        {
LABEL_196:
          v209 = (uint64_t ****)(v206 + 16 * v207);
        }
        v213 = v209[1];
        v216 = (size_t)*v213;
        v214 = (char *)(v213 + 2);
        v215 = v216;
        goto LABEL_198;
      }
      v215 = 0;
      v214 = &byte_1C871356D;
LABEL_198:
      if (v215 >= v202)
        v217 = v202;
      else
        v217 = v215;
      if (v217 && (v218 = memcmp(v201, v214, v217)) != 0)
      {
        if ((v218 & 0x80000000) == 0)
          return 1;
      }
      else if (v202 >= v215)
      {
        return 1;
      }
      *a1 = v131;
      a1[1] = v190;
      return 1;
    default:
      v17 = a1 + 2;
      sub_1C526BC94(a1, a1 + 1, a1 + 2);
      v18 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v19 = 0;
      break;
  }
  do
  {
    v20 = *v18;
    v21 = **v18;
    if ((*((_BYTE *)v21 + 23) & 0x10) != 0)
    {
      v22 = ***v21;
      v23 = *(_QWORD *)(v22 + 152);
      v24 = *(unsigned int *)(v22 + 168);
      if ((_DWORD)v24)
      {
        LODWORD(v25) = (v24 - 1) & ((v21 >> 4) ^ (v21 >> 9));
        v26 = (uint64_t ****)(v23 + 16 * v25);
        v27 = *v26;
        if (*v26 == v21)
        {
LABEL_19:
          v30 = v26[1];
          v33 = (size_t)*v30;
          v31 = (char *)(v30 + 2);
          v32 = v33;
          goto LABEL_20;
        }
        v28 = 1;
        while (v27 != (uint64_t ***)-4096)
        {
          v29 = v25 + v28++;
          v25 = v29 & (v24 - 1);
          v27 = *(uint64_t ****)(v23 + 16 * v25);
          if (v27 == v21)
          {
            v26 = (uint64_t ****)(v23 + 16 * v25);
            goto LABEL_19;
          }
        }
      }
      v26 = (uint64_t ****)(v23 + 16 * v24);
      goto LABEL_19;
    }
    v32 = 0;
    v31 = &byte_1C871356D;
LABEL_20:
    v34 = *v17;
    v35 = **v17;
    if ((*((_BYTE *)v35 + 23) & 0x10) == 0)
    {
      v46 = 0;
      v45 = &byte_1C871356D;
      goto LABEL_29;
    }
    v36 = ***v35;
    v37 = *(_QWORD *)(v36 + 152);
    v38 = *(unsigned int *)(v36 + 168);
    if (!(_DWORD)v38)
      goto LABEL_27;
    LODWORD(v39) = (v38 - 1) & ((v35 >> 4) ^ (v35 >> 9));
    v40 = (uint64_t ****)(v37 + 16 * v39);
    v41 = *v40;
    if (*v40 != v35)
    {
      v42 = 1;
      while (v41 != (uint64_t ***)-4096)
      {
        v43 = v39 + v42++;
        v39 = v43 & (v38 - 1);
        v41 = *(uint64_t ****)(v37 + 16 * v39);
        if (v41 == v35)
        {
          v40 = (uint64_t ****)(v37 + 16 * v39);
          goto LABEL_28;
        }
      }
LABEL_27:
      v40 = (uint64_t ****)(v37 + 16 * v38);
    }
LABEL_28:
    v44 = v40[1];
    v47 = (size_t)*v44;
    v45 = (char *)(v44 + 2);
    v46 = v47;
LABEL_29:
    if (v46 >= v32)
      v48 = v32;
    else
      v48 = v46;
    if (v48 && (v49 = memcmp(v31, v45, v48)) != 0)
    {
      if ((v49 & 0x80000000) == 0)
        goto LABEL_71;
    }
    else if (v32 >= v46)
    {
      goto LABEL_71;
    }
    v50 = v18;
    while (1)
    {
      *v50 = v34;
      if (v17 == a1)
        break;
      v50 = v17;
      v51 = *v20;
      if ((*((_BYTE *)*v20 + 23) & 0x10) != 0)
      {
        v52 = ***v51;
        v53 = *(_QWORD *)(v52 + 152);
        v54 = *(unsigned int *)(v52 + 168);
        if (!(_DWORD)v54)
          goto LABEL_46;
        LODWORD(v55) = (v54 - 1) & ((v51 >> 4) ^ (v51 >> 9));
        v56 = (uint64_t ****)(v53 + 16 * v55);
        v57 = *v56;
        if (*v56 != v51)
        {
          v58 = 1;
          while (v57 != (uint64_t ***)-4096)
          {
            v59 = v55 + v58++;
            v55 = v59 & (v54 - 1);
            v57 = *(uint64_t ****)(v53 + 16 * v55);
            if (v57 == v51)
            {
              v56 = (uint64_t ****)(v53 + 16 * v55);
              goto LABEL_47;
            }
          }
LABEL_46:
          v56 = (uint64_t ****)(v53 + 16 * v54);
        }
LABEL_47:
        v60 = v56[1];
        v63 = (size_t)*v60;
        v61 = (char *)(v60 + 2);
        v62 = v63;
        goto LABEL_48;
      }
      v62 = 0;
      v61 = &byte_1C871356D;
LABEL_48:
      --v17;
      v34 = *(v50 - 1);
      v64 = *v34;
      if ((*((_BYTE *)*v34 + 23) & 0x10) == 0)
      {
        v75 = 0;
        v74 = &byte_1C871356D;
        goto LABEL_57;
      }
      v65 = ***v64;
      v66 = *(_QWORD *)(v65 + 152);
      v67 = *(unsigned int *)(v65 + 168);
      if (!(_DWORD)v67)
        goto LABEL_55;
      LODWORD(v68) = (v67 - 1) & ((v64 >> 4) ^ (v64 >> 9));
      v69 = (uint64_t ****)(v66 + 16 * v68);
      v70 = *v69;
      if (*v69 != v64)
      {
        v71 = 1;
        while (v70 != (uint64_t ***)-4096)
        {
          v72 = v68 + v71++;
          v68 = v72 & (v67 - 1);
          v70 = *(uint64_t ****)(v66 + 16 * v68);
          if (v70 == v64)
          {
            v69 = (uint64_t ****)(v66 + 16 * v68);
            goto LABEL_56;
          }
        }
LABEL_55:
        v69 = (uint64_t ****)(v66 + 16 * v67);
      }
LABEL_56:
      v73 = v69[1];
      v76 = (size_t)*v73;
      v74 = (char *)(v73 + 2);
      v75 = v76;
LABEL_57:
      if (v75 >= v62)
        v77 = v62;
      else
        v77 = v75;
      if (v77 && (v78 = memcmp(v61, v74, v77)) != 0)
      {
        v79 = (v78 >> 31) | 1;
      }
      else
      {
        if (v62 >= v75)
          goto LABEL_70;
        v79 = -1;
      }
      if (v79 != -1)
        goto LABEL_70;
    }
    v50 = a1;
LABEL_70:
    *v50 = v20;
    if (++v19 == 8)
      return v18 + 1 == a2;
LABEL_71:
    v17 = v18++;
  }
  while (v18 != a2);
  return 1;
}

char *sub_1C526CDC8(uint64_t *****a1, uint64_t *****a2, uint64_t *****a3, uint64_t *****a4)
{
  uint64_t ****v8;
  uint64_t ****v9;
  uint64_t ***v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ****v15;
  uint64_t ***v16;
  int v17;
  int v18;
  uint64_t ***v19;
  char *result;
  size_t v21;
  size_t v22;
  uint64_t ***v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ****v28;
  uint64_t ***v29;
  int v30;
  int v31;
  uint64_t ***v32;
  char *v33;
  size_t v34;
  size_t v35;
  size_t v36;
  uint64_t ****v37;
  uint64_t ****v38;
  uint64_t ***v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t ****v44;
  uint64_t ***v45;
  int v46;
  int v47;
  uint64_t ***v48;
  size_t v49;
  size_t v50;
  uint64_t ***v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t ****v56;
  uint64_t ***v57;
  int v58;
  int v59;
  uint64_t ***v60;
  char *v61;
  size_t v62;
  size_t v63;
  size_t v64;
  uint64_t ****v65;
  uint64_t ****v66;
  uint64_t ***v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t ****v72;
  uint64_t ***v73;
  int v74;
  int v75;
  uint64_t ***v76;
  size_t v77;
  size_t v78;
  uint64_t ***v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t ****v84;
  uint64_t ***v85;
  int v86;
  int v87;
  uint64_t ***v88;
  char *v89;
  size_t v90;
  size_t v91;
  size_t v92;

  sub_1C526BC94(a1, a2, a3);
  v8 = *a4;
  v9 = *a3;
  v10 = **a4;
  if ((*((_BYTE *)v10 + 23) & 0x10) != 0)
  {
    v11 = ***v10;
    v12 = *(_QWORD *)(v11 + 152);
    v13 = *(unsigned int *)(v11 + 168);
    if ((_DWORD)v13)
    {
      LODWORD(v14) = (v13 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      v15 = (uint64_t ****)(v12 + 16 * v14);
      v16 = *v15;
      if (*v15 == v10)
      {
LABEL_9:
        v19 = v15[1];
        v22 = (size_t)*v19;
        result = (char *)(v19 + 2);
        v21 = v22;
        goto LABEL_10;
      }
      v17 = 1;
      while (v16 != (uint64_t ***)-4096)
      {
        v18 = v14 + v17++;
        v14 = v18 & (v13 - 1);
        v16 = *(uint64_t ****)(v12 + 16 * v14);
        if (v16 == v10)
        {
          v15 = (uint64_t ****)(v12 + 16 * v14);
          goto LABEL_9;
        }
      }
    }
    v15 = (uint64_t ****)(v12 + 16 * v13);
    goto LABEL_9;
  }
  v21 = 0;
  result = &byte_1C871356D;
LABEL_10:
  v23 = *v9;
  if ((*((_BYTE *)*v9 + 23) & 0x10) != 0)
  {
    v24 = ***v23;
    v25 = *(_QWORD *)(v24 + 152);
    v26 = *(unsigned int *)(v24 + 168);
    if ((_DWORD)v26)
    {
      LODWORD(v27) = (v26 - 1) & ((v23 >> 4) ^ (v23 >> 9));
      v28 = (uint64_t ****)(v25 + 16 * v27);
      v29 = *v28;
      if (*v28 == v23)
      {
LABEL_18:
        v32 = v28[1];
        v35 = (size_t)*v32;
        v33 = (char *)(v32 + 2);
        v34 = v35;
        goto LABEL_19;
      }
      v30 = 1;
      while (v29 != (uint64_t ***)-4096)
      {
        v31 = v27 + v30++;
        v27 = v31 & (v26 - 1);
        v29 = *(uint64_t ****)(v25 + 16 * v27);
        if (v29 == v23)
        {
          v28 = (uint64_t ****)(v25 + 16 * v27);
          goto LABEL_18;
        }
      }
    }
    v28 = (uint64_t ****)(v25 + 16 * v26);
    goto LABEL_18;
  }
  v34 = 0;
  v33 = &byte_1C871356D;
LABEL_19:
  if (v34 >= v21)
    v36 = v21;
  else
    v36 = v34;
  if (v36 && (result = (char *)memcmp(result, v33, v36), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v21 >= v34)
  {
    return result;
  }
  *a3 = v8;
  *a4 = v9;
  v37 = *a3;
  v38 = *a2;
  v39 = **a3;
  if ((*((_BYTE *)v39 + 23) & 0x10) != 0)
  {
    v40 = ***v39;
    v41 = *(_QWORD *)(v40 + 152);
    v42 = *(unsigned int *)(v40 + 168);
    if ((_DWORD)v42)
    {
      LODWORD(v43) = (v42 - 1) & ((v39 >> 4) ^ (v39 >> 9));
      v44 = (uint64_t ****)(v41 + 16 * v43);
      v45 = *v44;
      if (*v44 == v39)
      {
LABEL_35:
        v48 = v44[1];
        v50 = (size_t)*v48;
        result = (char *)(v48 + 2);
        v49 = v50;
        goto LABEL_36;
      }
      v46 = 1;
      while (v45 != (uint64_t ***)-4096)
      {
        v47 = v43 + v46++;
        v43 = v47 & (v42 - 1);
        v45 = *(uint64_t ****)(v41 + 16 * v43);
        if (v45 == v39)
        {
          v44 = (uint64_t ****)(v41 + 16 * v43);
          goto LABEL_35;
        }
      }
    }
    v44 = (uint64_t ****)(v41 + 16 * v42);
    goto LABEL_35;
  }
  v49 = 0;
  result = &byte_1C871356D;
LABEL_36:
  v51 = *v38;
  if ((*((_BYTE *)*v38 + 23) & 0x10) != 0)
  {
    v52 = ***v51;
    v53 = *(_QWORD *)(v52 + 152);
    v54 = *(unsigned int *)(v52 + 168);
    if ((_DWORD)v54)
    {
      LODWORD(v55) = (v54 - 1) & ((v51 >> 4) ^ (v51 >> 9));
      v56 = (uint64_t ****)(v53 + 16 * v55);
      v57 = *v56;
      if (*v56 == v51)
      {
LABEL_44:
        v60 = v56[1];
        v63 = (size_t)*v60;
        v61 = (char *)(v60 + 2);
        v62 = v63;
        goto LABEL_45;
      }
      v58 = 1;
      while (v57 != (uint64_t ***)-4096)
      {
        v59 = v55 + v58++;
        v55 = v59 & (v54 - 1);
        v57 = *(uint64_t ****)(v53 + 16 * v55);
        if (v57 == v51)
        {
          v56 = (uint64_t ****)(v53 + 16 * v55);
          goto LABEL_44;
        }
      }
    }
    v56 = (uint64_t ****)(v53 + 16 * v54);
    goto LABEL_44;
  }
  v62 = 0;
  v61 = &byte_1C871356D;
LABEL_45:
  if (v62 >= v49)
    v64 = v49;
  else
    v64 = v62;
  if (v64 && (result = (char *)memcmp(result, v61, v64), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v49 >= v62)
  {
    return result;
  }
  *a2 = v37;
  *a3 = v38;
  v65 = *a2;
  v66 = *a1;
  v67 = **a2;
  if ((*((_BYTE *)v67 + 23) & 0x10) != 0)
  {
    v68 = ***v67;
    v69 = *(_QWORD *)(v68 + 152);
    v70 = *(unsigned int *)(v68 + 168);
    if ((_DWORD)v70)
    {
      LODWORD(v71) = (v70 - 1) & ((v67 >> 4) ^ (v67 >> 9));
      v72 = (uint64_t ****)(v69 + 16 * v71);
      v73 = *v72;
      if (*v72 == v67)
      {
LABEL_61:
        v76 = v72[1];
        v78 = (size_t)*v76;
        result = (char *)(v76 + 2);
        v77 = v78;
        goto LABEL_62;
      }
      v74 = 1;
      while (v73 != (uint64_t ***)-4096)
      {
        v75 = v71 + v74++;
        v71 = v75 & (v70 - 1);
        v73 = *(uint64_t ****)(v69 + 16 * v71);
        if (v73 == v67)
        {
          v72 = (uint64_t ****)(v69 + 16 * v71);
          goto LABEL_61;
        }
      }
    }
    v72 = (uint64_t ****)(v69 + 16 * v70);
    goto LABEL_61;
  }
  v77 = 0;
  result = &byte_1C871356D;
LABEL_62:
  v79 = *v66;
  if ((*((_BYTE *)*v66 + 23) & 0x10) != 0)
  {
    v80 = ***v79;
    v81 = *(_QWORD *)(v80 + 152);
    v82 = *(unsigned int *)(v80 + 168);
    if ((_DWORD)v82)
    {
      LODWORD(v83) = (v82 - 1) & ((v79 >> 4) ^ (v79 >> 9));
      v84 = (uint64_t ****)(v81 + 16 * v83);
      v85 = *v84;
      if (*v84 == v79)
      {
LABEL_70:
        v88 = v84[1];
        v91 = (size_t)*v88;
        v89 = (char *)(v88 + 2);
        v90 = v91;
        goto LABEL_71;
      }
      v86 = 1;
      while (v85 != (uint64_t ***)-4096)
      {
        v87 = v83 + v86++;
        v83 = v87 & (v82 - 1);
        v85 = *(uint64_t ****)(v81 + 16 * v83);
        if (v85 == v79)
        {
          v84 = (uint64_t ****)(v81 + 16 * v83);
          goto LABEL_70;
        }
      }
    }
    v84 = (uint64_t ****)(v81 + 16 * v82);
    goto LABEL_70;
  }
  v90 = 0;
  v89 = &byte_1C871356D;
LABEL_71:
  if (v90 >= v77)
    v92 = v77;
  else
    v92 = v90;
  if (v92 && (result = (char *)memcmp(result, v89, v92), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v77 >= v90)
  {
    return result;
  }
  *a1 = v65;
  *a2 = v66;
  return result;
}

uint64_t sub_1C526D208()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"print register usage details collected for analysis.";
  v1.n128_u64[1] = 52;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7FF4F0, "print-regusage", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FF4F0, &dword_1C475E000);
}

uint64_t sub_1C526D288(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializePhysicalRegisterUsageInfoPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "Register Usage Information Collector";
  *(_QWORD *)(v3 + 8) = 36;
  *(_QWORD *)(v3 + 16) = "RegUsageInfoCollector";
  *(_QWORD *)(v3 + 24) = 21;
  *(_QWORD *)(v3 + 32) = &unk_1ED7FF5B0;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C526D3DC;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C526D31C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7FF5B0) = &off_1E814A1D0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7FF5B8);
  if (v3 != -1)
  {
    v7[0] = sub_1C526D288;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7FF5B8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C526D3DC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C526D31C(v0);
}

void sub_1C526D404(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C526D498(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C526D524()
{
  return "Register Usage Information Collector Pass";
}

void *sub_1C526D534(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::PhysicalRegisterUsageInfo::ID);
  *((_BYTE *)a2 + 160) = 1;
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1C526D574(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  void **v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _WORD *v22;
  int v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int16 *v29;
  int v30;
  unsigned __int16 *v31;
  unint64_t v32;
  unsigned __int16 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  unint64_t v38;
  int v39;
  _WORD *v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned __int16 *v47;
  int v48;
  uint64_t v49;
  uint64_t i;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int16 *v55;
  _WORD *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v62;
  unsigned int v63;
  _QWORD *v64;
  _DWORD *v65;
  unsigned __int16 v66;
  unsigned __int16 *v67;
  unsigned int v68;
  unsigned __int16 *v69;
  uint64_t v70;
  uint64_t v71;
  void *__p;
  _BYTE *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  _BYTE v77[48];
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 40);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  v6 = *(_QWORD *)a2;
  v7 = ((*(unsigned __int16 *)(*(_QWORD *)a2 + 18) >> 4) & 0x3FF) - 87;
  v8 = v7 > 9;
  v9 = (1 << v7) & 0x35F;
  if (v8 || v9 == 0)
  {
    v12 = v5;
    v13 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)(v6 + 8) || (*(_BYTE *)(v6 + 23) & 8) != 0)
    {
      v73 = 0;
      v74 = 0;
      __p = 0;
      v14 = *(_DWORD *)(v5 + 16) + 31;
      LODWORD(v75) = -1;
      if (v14 >= 0x20)
      {
        sub_1C50F0728((uint64_t)&__p, v14 >> 5, &v75);
        v6 = *(_QWORD *)a2;
      }
      v15 = **(void ****)(a1 + 8);
      do
      {
        v16 = *v15;
        v15 += 2;
      }
      while (v16 != &llvm::PhysicalRegisterUsageInfo::ID);
      v17 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), &llvm::PhysicalRegisterUsageInfo::ID);
      *(_QWORD *)(v17 + 56) = v13;
      v71 = v17;
      v75 = v77;
      v76 = 0x600000000;
      v78 = 0;
      v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 112))(*(_QWORD *)(a2 + 16));
      v19 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
      v78 = 0;
      LODWORD(v76) = 0;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v18 + 256))(v18, a2, &v75);
      if ((_DWORD)v76)
      {
        v20 = v75;
        v21 = 8 * v76;
        while (!*v20)
        {
          ++v20;
          v21 -= 8;
          if (!v21)
            goto LABEL_24;
        }
        v22 = (_WORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v19 + 32))(v19, a2);
        v23 = (unsigned __int16)*v22;
        if (*v22)
        {
          v24 = 0;
          v25 = v75;
          do
          {
            if (((v25[(unsigned __int16)v23 >> 6] >> v23) & 1) != 0)
            {
              v26 = v19[7];
              v27 = *(unsigned int *)(v19[1] + 24 * (unsigned __int16)v23 + 4);
              if (*(_WORD *)(v26 + 2 * v27))
              {
                v28 = *(unsigned __int16 *)(v26 + 2 * v27) + v23;
                v29 = (unsigned __int16 *)(v26 + 2 * v27 + 2);
                do
                {
                  v25[(unsigned __int16)v28 >> 6] |= 1 << v28;
                  v30 = *v29++;
                  v28 += v30;
                }
                while (v30);
              }
            }
            v23 = (unsigned __int16)v22[++v24];
          }
          while (v22[v24]);
        }
      }
LABEL_24:
      v31 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 64))(v12, a2);
      if (v32)
      {
        v33 = &v31[v32];
        v34 = *(_QWORD *)(v12 + 8);
        v36 = *(_QWORD *)(v12 + 48);
        v35 = *(_QWORD *)(v12 + 56);
        v37 = __p;
        do
        {
          v38 = ((unint64_t)*(unsigned int *)(v34 + 24 * *v31 + 16) >> 3) & 0x1FFFFFFE;
          v39 = *(unsigned __int16 *)(v35 + v38) + (*(_DWORD *)(v34 + 24 * *v31 + 16) & 0xF) * *v31;
          v40 = (_WORD *)(v35 + 2 + v38);
          while (1)
          {
            v41 = (unsigned __int16)v39;
            v42 = *(unsigned __int16 *)(v36 + 4 * (unsigned __int16)v39);
            if (*(_WORD *)(v36 + 4 * (unsigned __int16)v39) && v35 != 0)
              break;
            v44 = (unsigned __int16)*v40++;
            v32 = v44;
            v39 += v44;
            if (!v44)
              goto LABEL_33;
          }
          while (1)
          {
            v45 = *(unsigned __int16 *)(v36 + 4 * v41 + 2) << 16;
            v46 = (unsigned __int16)v42;
            while (1)
            {
              v47 = (unsigned __int16 *)(v35 + 2 * *(unsigned int *)(v34 + 24 * v46 + 8));
              do
              {
                v37[(unsigned __int16)v42 >> 5] &= ~(1 << v42);
                v48 = *v47++;
                v42 += v48;
              }
              while (v48);
              v46 = HIWORD(v45);
              if (!(_DWORD)v46)
                break;
              v42 = HIWORD(v45);
              v45 >>= 16;
            }
            v32 = (unsigned __int16)*v40;
            if (!*v40)
              break;
            v39 += v32;
            ++v40;
            v41 = (unsigned __int16)v39;
            v42 = *(unsigned __int16 *)(v36 + 4 * (unsigned __int16)v39);
          }
LABEL_33:
          ++v31;
        }
        while (v31 != v33);
      }
      v49 = *(unsigned int *)(v12 + 16);
      if (v49 >= 2)
      {
        for (i = 1; i != v49; ++i)
        {
          v51 = i >> 6;
          if ((*((_QWORD *)v75 + v51) & (1 << i)) == 0)
          {
            if (sub_1C50E3E8C(v4, i))
            {
              if ((*(_QWORD *)(*(_QWORD *)(v4 + 280) + 8 * v51) & (1 << i)) != 0)
                *((_DWORD *)__p + (i >> 5)) &= ~(1 << i);
            }
            else
            {
              v52 = *(_QWORD *)(v12 + 8);
              v54 = *(_QWORD *)(v12 + 48);
              v53 = *(_QWORD *)(v12 + 56);
              v55 = (unsigned __int16 *)(v53
                                       + (((unint64_t)*(unsigned int *)(v52 + 24 * i + 16) >> 3) & 0x1FFFFFFE));
              v57 = *v55;
              v56 = v55 + 1;
              v58 = v57 + (*(_DWORD *)(v52 + 24 * i + 16) & 0xF) * i;
              while (1)
              {
                v59 = 4 * (unsigned __int16)v58;
                v60 = *(unsigned __int16 *)(v54 + v59);
                if (*(_WORD *)(v54 + v59) && v53 != 0)
                  break;
                v62 = (unsigned __int16)*v56++;
                v58 += v62;
                if (!v62)
                  goto LABEL_45;
              }
              v63 = *(unsigned __int16 *)(v54 + 4 * (unsigned __int16)v58 + 2) << 16;
              v64 = v75;
              v65 = __p;
              while (1)
              {
                while (1)
                {
                  v66 = v60;
                  v67 = (unsigned __int16 *)(v53 + 2 * *(unsigned int *)(v52 + 24 * v60 + 8));
                  do
                  {
                    if (((v64[v66 >> 6] >> v66) & 1) == 0)
                      v65[v66 >> 5] &= ~(1 << v66);
                    v68 = *v67++;
                    v32 = v68;
                    v66 += v68;
                  }
                  while (v68);
                  v60 = HIWORD(v63);
                  if (!(_DWORD)v60)
                    break;
                  v63 >>= 16;
                }
                if (!*v56)
                  break;
                v58 += (unsigned __int16)*v56++;
                v69 = (unsigned __int16 *)(v54 + 4 * (unsigned __int16)v58);
                v60 = *v69;
                v63 = v69[1] << 16;
              }
            }
          }
LABEL_45:
          ;
        }
      }
      if ((llvm::TargetFrameLowering::isSafeForNoCSROpt((llvm::TargetFrameLowering *)v6, (const llvm::Function *)v32) & 1) != 0)
      {
        v70 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 112))(*(_QWORD *)(a2 + 16));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 344))(v70, v6);
      }
      llvm::PhysicalRegisterUsageInfo::storeUpdateRegUsageInfo(v71, v6, __p, (v73 - (_BYTE *)__p) >> 2);
      if (v75 != v77)
        free(v75);
      if (__p)
      {
        v73 = __p;
        operator delete(__p);
      }
    }
  }
  return 0;
}

uint64_t sub_1C526DA94(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializePhysicalRegisterUsageInfoPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "Register Usage Information Propagation";
  *(_QWORD *)(v3 + 8) = 38;
  *(_QWORD *)(v3 + 16) = "reg-usage-propagation";
  *(_QWORD *)(v3 + 24) = 21;
  *(_QWORD *)(v3 + 32) = &unk_1ED7FF5C0;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C526DBE8;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C526DB28(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7FF5C0) = &off_1E814A290;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7FF5C8);
  if (v3 != -1)
  {
    v7[0] = sub_1C526DA94;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7FF5C8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C526DBE8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C526DB28(v0);
}

void sub_1C526DC10(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C526DCA4(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C526DD30()
{
  return "Register Usage Information Propagation";
}

void *sub_1C526DD40(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::PhysicalRegisterUsageInfo::ID);
  *((_BYTE *)a2 + 160) = 1;
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

BOOL sub_1C526DD80(uint64_t a1, _QWORD *a2)
{
  void **v3;
  void *v4;
  llvm::PhysicalRegisterUsageInfo *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Module *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t RegUsageInfo;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  size_t v41;
  void *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  _DWORD *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _QWORD v64[9];

  v64[8] = *MEMORY[0x1E0C80C00];
  v61 = *(_QWORD *)(*a2 + 40);
  v3 = **(void ****)(a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::PhysicalRegisterUsageInfo::ID);
  v5 = (llvm::PhysicalRegisterUsageInfo *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::PhysicalRegisterUsageInfo::ID);
  v6 = a2[7];
  if (!*(_BYTE *)(v6 + 62) && !*(_BYTE *)(v6 + 654))
    return 0;
  v7 = (_QWORD *)a2[41];
  v60 = a2 + 40;
  if (v7 == a2 + 40)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v58 = (uint64_t)(a2 + 16);
    v59 = a2;
    do
    {
      for (i = v7[7]; (_QWORD *)i != v7 + 6; i = *(_QWORD *)(i + 8))
      {
        v10 = *(_QWORD *)(*(_QWORD *)(i + 16) + 8);
        if ((*(_WORD *)(i + 44) & 0xC) != 0 && (*(_WORD *)(i + 44) & 4) == 0)
        {
          v18 = i;
          if ((v10 & 0x80) == 0)
          {
            do
            {
              if ((*(_WORD *)(v18 + 44) & 8) == 0)
                goto LABEL_75;
              v18 = *(_QWORD *)(v18 + 8);
            }
            while ((*(_BYTE *)(*(_QWORD *)(v18 + 16) + 8) & 0x80) == 0);
          }
        }
        else if ((v10 & 0x80) == 0)
        {
          goto LABEL_75;
        }
        v12 = *(unsigned int *)(i + 40);
        if (!(_DWORD)v12)
          goto LABEL_75;
        v13 = 0;
        v14 = *(_QWORD *)(i + 32);
        v15 = v14 + 32 * v12;
        v16 = 32 * v12;
        while (1)
        {
          v17 = *(unsigned __int8 *)(v14 + v13);
          if (v17 == 9)
            break;
          if (v17 == 10)
          {
            v19 = *(_QWORD *)(v14 + v13 + 16);
            if (*(_BYTE *)(v19 + 16))
              goto LABEL_41;
            goto LABEL_25;
          }
          v13 += 32;
          if (v16 == v13)
          {
            while (1)
            {
LABEL_41:
              if (*(_BYTE *)v14 == 14)
              {
                v31 = *(_QWORD *)(v14 + 16);
                v32 = *(unsigned int *)(v31 + 8);
                if (!(_DWORD)v32)
                {
                  v62 = v64;
                  v63 = 0x400000000;
LABEL_57:
                  v41 = ((*(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v59[2] + 176))(v59[2])
                                                  + 16)
                                      + 31) >> 3) & 0x1FFFFFFC;
                  v42 = (void *)sub_1C484358C(v58, v41, 2);
                  bzero(v42, v41);
                  v43 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v59[2] + 176))(v59[2]) + 16) + 31;
                  v44 = v43 >> 5;
                  memcpy(v42, *(const void **)v62, 4 * (v43 >> 5));
                  v45 = v63;
                  if (v63 >= 2)
                  {
                    v46 = v62;
                    if (v44 <= 1)
                      v47 = 1;
                    else
                      v47 = v44;
                    v48 = 1;
                    do
                    {
                      if (v43 >= 0x20)
                      {
                        v49 = (int *)v46[2 * v48];
                        v50 = v42;
                        v51 = v47;
                        do
                        {
                          v52 = *v49++;
                          *v50++ &= v52;
                          --v51;
                        }
                        while (v51);
                      }
                      ++v48;
                    }
                    while (v48 != v45);
                  }
                  v53 = *(_QWORD *)(i + 32);
                  v54 = *(unsigned int *)(i + 40);
                  if ((_DWORD)v54)
                  {
                    v55 = 32 * v54;
                    v56 = v53 + 32 * v54;
                    while (*(_BYTE *)v53 != 12)
                    {
                      v53 += 32;
                      v55 -= 32;
                      if (!v55)
                      {
                        v53 = v56;
                        break;
                      }
                    }
                  }
                  *(_QWORD *)(v53 + 16) = v42;
LABEL_72:
                  if (v62 != v64)
                    free(v62);
LABEL_74:
                  if (i)
                    goto LABEL_75;
                  goto LABEL_78;
                }
                v33 = -8 * v32;
                while (*(_QWORD *)(v31 + v33))
                {
                  v33 += 8;
                  if (!v33)
                  {
                    if (!v31)
                      goto LABEL_74;
                    v62 = v64;
                    v63 = 0x400000000;
                    v34 = -8 * v32;
                    while (1)
                    {
                      RegUsageInfo = llvm::PhysicalRegisterUsageInfo::getRegUsageInfo(v5, *(const llvm::Function **)(*(_QWORD *)(v31 + v34) + 128));
                      if (!v36)
                        goto LABEL_72;
                      v37 = RegUsageInfo;
                      v38 = v36;
                      v39 = v63;
                      if (v63 >= (unint64_t)HIDWORD(v63))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 16);
                        v39 = v63;
                      }
                      v40 = (uint64_t *)((char *)v62 + 16 * v39);
                      *v40 = v37;
                      v40[1] = v38;
                      LODWORD(v63) = v63 + 1;
                      v34 += 8;
                      if (!v34)
                        goto LABEL_57;
                    }
                  }
                }
              }
              v14 += 32;
              if (v14 == v15)
                goto LABEL_74;
            }
          }
        }
        v26 = v14 + v13;
        v27 = *(unsigned __int8 **)(v26 + 16);
        if (v27)
          v28 = strlen(*(const char **)(v26 + 16));
        else
          v28 = 0;
        v29 = sub_1C4FB7E80(*(uint64_t **)(v61 + 112), v27, v28);
        if (!v29 || (v19 = v29, *(_BYTE *)(v29 + 16)))
        {
          v30 = *(unsigned int *)(i + 40);
          if ((_DWORD)v30)
          {
            v14 = *(_QWORD *)(i + 32);
            v15 = v14 + 32 * v30;
            goto LABEL_41;
          }
          goto LABEL_75;
        }
LABEL_25:
        if (((1 << (*(_DWORD *)(v19 + 32) & 0xF)) & 0x63E) != 0)
          goto LABEL_74;
        v20 = *(llvm::Module **)(v19 + 40);
        if (v20)
        {
          if (llvm::Module::getSemanticInterposition(v20) && (*(_BYTE *)(v19 + 33) & 0x40) == 0)
            goto LABEL_74;
        }
        v21 = llvm::PhysicalRegisterUsageInfo::getRegUsageInfo(v5, (const llvm::Function *)v19);
        if (!v22)
          goto LABEL_74;
        v23 = *(unsigned int *)(i + 40);
        if ((_DWORD)v23)
        {
          v24 = 32 * v23;
          v25 = (uint64_t *)(*(_QWORD *)(i + 32) + 16);
          do
          {
            if (*((_BYTE *)v25 - 16) == 12)
              *v25 = v21;
            v25 += 4;
            v8 = 1;
            v24 -= 32;
          }
          while (v24);
          goto LABEL_74;
        }
        v8 = 1;
LABEL_75:
        if ((*(_BYTE *)i & 4) == 0)
        {
LABEL_78:
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
      }
      v7 = (_QWORD *)v7[1];
    }
    while (v7 != v60);
  }
  return v8 != 0;
}

_QWORD *llvm::ReplaceWithVeclib::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t ResultImpl;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;
  int v12;

  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, a1);
  v12 = sub_1C526E2F8((uint64_t *)(ResultImpl + 8), a1, v6, v7, v8, v9, v10, v11);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if (!v12)
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
  sub_1C4DDB144(a3, (uint64_t)&llvm::TargetLibraryAnalysis::Key);
  sub_1C4DDB144(a3, (uint64_t)&llvm::ScalarEvolutionAnalysis::Key);
  sub_1C4DDB144(a3, (uint64_t)&llvm::LoopAccessAnalysis::Key);
  sub_1C4DDB144(a3, (uint64_t)&llvm::DemandedBitsAnalysis::Key);
  return sub_1C4DDB144(a3, (uint64_t)&llvm::OptimizationRemarkEmitterAnalysis::Key);
}

uint64_t sub_1C526E2F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::string *a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  char *v17;
  std::string::value_type *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  _BOOL4 v39;
  char *v40;
  size_t v41;
  std::string::size_type v42;
  std::string *p_dst;
  uint64_t v44;
  uint64_t v45;
  char v46;
  std::string *p_p;
  size_t size;
  uint64_t v49;
  _BYTE *VectorizedFunction;
  unint64_t v51;
  const void *v52;
  size_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t **v61;
  uint64_t v62;
  llvm::PointerType *v63;
  uint64_t *v64;
  llvm::ValueAsMetadata *v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t **v80;
  llvm::Value *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  llvm::ValueAsMetadata *v91;
  uint64_t v92;
  char *v93;
  unsigned int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v104;
  int v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  std::string::pointer v109;
  char *v110;
  uint64_t *v111;
  llvm::ValueAsMetadata *v112;
  llvm *v113;
  void *v114;
  size_t v115;
  int64_t v116;
  std::string __p;
  uint64_t v118;
  _QWORD v119[4];
  __int16 v120;
  void *v121;
  uint64_t v122;
  _BYTE v123[48];
  void *v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  std::string __dst;
  __int16 v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v8 = (uint64_t *)v123;
  v121 = v123;
  v122 = 0x600000000;
  v9 = a2 + 72;
  v10 = *(_QWORD *)(a2 + 80);
  if (v10 == a2 + 72)
  {
LABEL_6:
    LOBYTE(v14) = 0;
    return v14 & 1;
  }
  while (1)
  {
    v12 = v10 - 24;
    if (!v10)
      v12 = 0;
    v13 = *(_QWORD *)(v12 + 48);
    if (v13 != v12 + 40)
      break;
    v10 = *(_QWORD *)(v10 + 8);
    if (v10 == v9)
      goto LABEL_6;
  }
  v14 = 0;
  v15 = &v126;
  v16 = &v132;
  v17 = (char *)&v129;
  v18 = &__dst.__r_.__value_.__s.__data_[16];
  while (1)
  {
    v19 = v13 - 24;
    if (!v13)
      v19 = 0;
    v20 = *(unsigned __int8 *)(v19 + 16);
    if (v20 == 84)
      v21 = v19;
    else
      v21 = 0;
    if (!v13)
      goto LABEL_18;
    if (v20 != 84)
      goto LABEL_18;
    v22 = *(_QWORD *)(v21 - 32);
    if (!v22)
      goto LABEL_18;
    if (*(_BYTE *)(v22 + 16))
      goto LABEL_18;
    if (*(_QWORD *)(v22 + 24) != *(_QWORD *)(v21 + 72))
      goto LABEL_18;
    v25 = *(unsigned int *)(v22 + 36);
    if (!(_DWORD)v25)
      goto LABEL_18;
    v111 = v16;
    v26 = 0;
    v118 = 0;
    v124 = v15;
    v125 = 0x600000000;
    v27 = *(unsigned __int8 *)(v21 + 16);
    v105 = v14;
    v113 = (llvm *)v25;
    if (v27 != 84)
    {
      if (v27 == 39)
        v26 = (*(_DWORD *)(v21 + 80) + 1);
      else
        v26 = 2;
    }
    v28 = *(_DWORD *)(v21 + 20);
    v29 = v28 & 0x7FFFFFF;
    v30 = (uint64_t **)(v21 - 32 * v29);
    if (v28 < 0)
    {
      v87 = (uint64_t)*(v30 - 1);
      if ((v87 & 0xFFFFFFFF0) != 0)
        v31 = (*((_DWORD *)v30 - 3) - *(_DWORD *)((char *)v30 - v87));
      else
        v31 = 0;
    }
    else
    {
      v31 = 0;
    }
    v109 = v18;
    v110 = v17;
    v107 = a1;
    v108 = v15;
    v106 = v8;
    v112 = (llvm::ValueAsMetadata *)v21;
    if (v30 != (uint64_t **)(v21 - 32 * v26 - 32 * v31 - 32))
    {
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = 32 * v29 - 32 * v26 - 32 * v31 - 32;
      while (1)
      {
        v36 = **v30;
        if (llvm::hasVectorInstrinsicScalarOpd((llvm *)v25, v34))
        {
          v37 = v33;
          if (v32 >= HIDWORD(v125))
            goto LABEL_46;
          v37 = v33;
        }
        else
        {
          v38 = (*(_DWORD *)(v36 + 8) & 0xFE) != 0x12 || v36 == 0;
          if (v38
            || *(_DWORD *)(v36 + 8) == 19
            || (v37 = *(unsigned int *)(v36 + 32), (_DWORD)v33) && (_DWORD)v33 != (_DWORD)v37)
          {
            v39 = 0;
            v8 = v106;
            a1 = v107;
            v14 = v105;
            v17 = v110;
            v16 = v111;
            goto LABEL_129;
          }
          v118 = *(unsigned int *)(v36 + 32);
          v36 = *(_QWORD *)(v36 + 24);
          if (v32 >= HIDWORD(v125))
          {
LABEL_46:
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v124, (uint64_t)v108, v32 + 1, 8);
            v32 = v125;
          }
        }
        *((_QWORD *)v124 + v32) = v36;
        v32 = v125 + 1;
        LODWORD(v125) = v125 + 1;
        v30 += 4;
        ++v34;
        v33 = v37;
        v35 -= 32;
        v25 = (unint64_t)v113;
        if (!v35)
          goto LABEL_49;
      }
    }
    v32 = 0;
LABEL_49:
    memset(&__p, 0, sizeof(__p));
    if (((byte_1C860FB7B[v25 >> 3] >> (v25 & 7)) & 1) == 0)
    {
      v40 = off_1E814EB28[v25];
      a1 = v107;
      if (!v40)
      {
        memset(&__dst, 0, sizeof(__dst));
        v17 = v110;
LABEL_64:
        __p = __dst;
        goto LABEL_65;
      }
      v41 = strlen(off_1E814EB28[v25]);
      if (v41 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_163;
      v42 = v41;
      if (v41 >= 0x17)
      {
        v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v41 | 7) != 0x17)
          v44 = v41 | 7;
        v45 = v44 + 1;
        p_dst = (std::string *)operator new(v44 + 1);
        __dst.__r_.__value_.__l.__size_ = v42;
        __dst.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        v17 = v110;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v41;
        p_dst = &__dst;
        v17 = v110;
        if (!v41)
        {
LABEL_62:
          p_dst->__r_.__value_.__s.__data_[v42] = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_64;
        }
      }
      memmove(p_dst, v40, v42);
      goto LABEL_62;
    }
    sub_1C53CF274(v25, (uint64_t *)v124, v32, *(uint64_t **)(*(_QWORD *)(*((_QWORD *)v112 + 5) + 56) + 40), 0, a6, a7, a8, &__dst);
    a1 = v107;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __dst;
    v17 = v110;
LABEL_65:
    v46 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    v49 = *a1;
    if (!llvm::TargetLibraryInfoImpl::isFunctionVectorizable(*a1, p_p, size))
    {
      v39 = 0;
      v8 = v106;
      v14 = v105;
      v16 = v111;
      goto LABEL_127;
    }
    VectorizedFunction = llvm::TargetLibraryInfoImpl::getVectorizedFunction(v49, p_p, size, (int *)&v118);
    if (v51 > 0x7FFFFFFFFFFFFFF7)
LABEL_163:
      abort();
    v52 = VectorizedFunction;
    v53 = v51;
    if (v51 >= 0x17)
    {
      v55 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v51 | 7) != 0x17)
        v55 = v51 | 7;
      v56 = v55 + 1;
      v54 = operator new(v55 + 1);
      v115 = v53;
      v116 = v56 | 0x8000000000000000;
      v114 = v54;
    }
    else
    {
      HIBYTE(v116) = v51;
      v54 = &v114;
      if (!v51)
        goto LABEL_81;
    }
    memmove(v54, v52, v53);
LABEL_81:
    v16 = v111;
    *((_BYTE *)v54 + v53) = 0;
    v57 = HIBYTE(v116);
    v58 = v116 >= 0 ? HIBYTE(v116) & 0x7F : v115;
    v39 = v58 != 0;
    if (v58)
    {
      if (v116 >= 0)
        v59 = (unsigned __int8 *)&v114;
      else
        v59 = (unsigned __int8 *)v114;
      v60 = *((_QWORD *)v112 - 4);
      if (!v60 || *(_BYTE *)(v60 + 16) || *(_QWORD *)(v60 + 24) != *((_QWORD *)v112 + 9))
        v60 = 0;
      v61 = *(uint64_t ***)(*(_QWORD *)(*((_QWORD *)v112 + 5) + 56) + 40);
      v62 = sub_1C4FB7E80(v61[14], v59, v58);
      if (!v62 || (v64 = (uint64_t *)v62, *(_BYTE *)(v62 + 16)))
      {
        v63 = *(llvm::PointerType **)(v60 + 24);
        v134 = 261;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
        __dst.__r_.__value_.__l.__size_ = v58;
        v64 = llvm::Function::Create(v63, 0, (uint64_t)&__dst, (uint64_t)v61);
        llvm::Function::copyAttributesFrom((llvm::Function *)v64, (const llvm::Function *)v60);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
        sub_1C5F50CB4(v61, "llvm.compiler.used", 0x12uLL, (llvm::UndefValue **)&__dst, 1);
      }
      v104 = (uint64_t)v64;
      sub_1C4773D54((uint64_t)&__dst, (uint64_t)v112, 0, 0, 0);
      v65 = v112;
      v66 = 0;
      v67 = *((_DWORD *)v112 + 5);
      v68 = *((unsigned __int8 *)v112 + 16);
      if (v68 != 84)
      {
        if (v68 == 39)
        {
          v65 = v112;
          v66 = (*((_DWORD *)v112 + 20) + 1);
          a1 = v107;
        }
        else
        {
          v66 = 2;
          a1 = v107;
          v65 = v112;
        }
      }
      v69 = v67 & 0x7FFFFFF;
      v70 = (_QWORD *)((char *)v65 - 32 * v69);
      if (v67 < 0)
      {
        v88 = *(v70 - 1);
        if ((v88 & 0xFFFFFFFF0) != 0)
          v71 = (*((_DWORD *)v70 - 3) - *(_DWORD *)((char *)v70 - v88));
        else
          v71 = 0;
        a1 = v107;
        v65 = v112;
      }
      else
      {
        v71 = 0;
      }
      v72 = (uint64_t)v65 + -32 * v71 + -32 * v66 - 32;
      v130 = v111;
      v131 = 0x600000000;
      v73 = v72 - (_QWORD)v70;
      if ((unint64_t)(v72 - (_QWORD)v70) >= 0xC1)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, (uint64_t)v111, v73 >> 5, 8);
        v65 = v112;
        v74 = v131;
        v75 = v131;
      }
      else
      {
        v74 = 0;
        v75 = 0;
      }
      if (v70 != (_QWORD *)v72)
      {
        v76 = (char *)v130 + 8 * v74;
        v77 = 32 * v69 - 32 * v66 - 32 * v71 - 32;
        do
        {
          v78 = *v70;
          v70 += 4;
          *v76++ = v78;
          v77 -= 32;
        }
        while (v77);
      }
      LODWORD(v131) = v75 + ((unint64_t)v73 >> 5);
      v17 = v110;
      v127 = v110;
      v128 = 0x100000000;
      v79 = *((_DWORD *)v65 + 5);
      if (v79 < 0)
      {
        v89 = *((_QWORD *)v65 - 4 * (v79 & 0x7FFFFFF) - 1);
        if ((v89 & 0xFFFFFFFF0) != 0)
        {
          v90 = (v89 >> 4);
          v91 = v65;
          do
          {
            v92 = *((_DWORD *)v65 + 5) & 0x7FFFFFF;
            v93 = (char *)v65 - 32 * v92;
            v94 = (unsigned int *)((char *)v91 - *((_QWORD *)v93 - 1) + -32 * v92);
            v95 = *v94;
            v96 = v94[1];
            v97 = *((_QWORD *)v94 - 1);
            v119[0] = &v93[32 * v95];
            v119[1] = v96 - v95;
            v119[2] = v97;
            sub_1C623D924((uint64_t)&v127, (uint64_t)v119);
            v65 = v112;
            v91 = (llvm::ValueAsMetadata *)((char *)v91 + 16);
            --v90;
          }
          while (v90);
        }
      }
      v8 = v106;
      v14 = v105;
      if (v104)
        v80 = *(uint64_t ***)(v104 + 24);
      else
        v80 = 0;
      v120 = 257;
      v81 = (llvm::Value *)sub_1C5062DD8((uint64_t *)&__dst, v80, v104, (uint64_t *)v130, v131, (uint64_t)v127, v128, (uint64_t)v119, 0);
      llvm::Value::doRAUW(v112, v81, (llvm::Value *)1);
      if (sub_1C4774A9C((uint64_t)v81))
        *((_BYTE *)v81 + 17) = *((_BYTE *)v112 + 17) & 0xFE | *((_BYTE *)v81 + 17) & 1;
      v82 = (char *)v127;
      if ((_DWORD)v128)
      {
        v83 = 48 * v128;
        do
        {
          v84 = &v82[v83];
          v85 = *(void **)&v82[v83 - 24];
          if (v85)
          {
            *((_QWORD *)v84 - 2) = v85;
            operator delete(v85);
          }
          if (*(v84 - 25) < 0)
            operator delete(*((void **)v84 - 6));
          v83 -= 48;
        }
        while (v83);
        v82 = (char *)v127;
      }
      v16 = v111;
      if (v82 != v110)
        free(v82);
      if (v130 != v111)
        free(v130);
      v39 = 1;
      if (__dst.__r_.__value_.__l.__data_ != v109)
        free(__dst.__r_.__value_.__l.__data_);
      v57 = HIBYTE(v116);
    }
    else
    {
      v8 = v106;
      v14 = v105;
      v17 = v110;
    }
    if (v57 < 0)
      operator delete(v114);
    v46 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_127:
    if (v46 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_129:
    v15 = v108;
    if (v124 != v108)
      free(v124);
    v18 = v109;
    if (v39)
    {
      v86 = v122;
      if (v122 >= (unint64_t)HIDWORD(v122))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, (uint64_t)v8, v122 + 1, 8);
        v18 = v109;
        v86 = v122;
      }
      *((_QWORD *)v121 + v86) = v112;
      LODWORD(v122) = v122 + 1;
      v14 = 1;
    }
LABEL_18:
    v13 = *(_QWORD *)(v13 + 8);
    v23 = v10 - 24;
    if (!v10)
      v23 = 0;
    if (v13 == v23 + 40)
      break;
LABEL_25:
    if (v10 == v9)
      goto LABEL_156;
  }
  while (1)
  {
    v10 = *(_QWORD *)(v10 + 8);
    if (v10 == v9)
      break;
    v24 = v10 - 24;
    if (!v10)
      v24 = 0;
    v13 = *(_QWORD *)(v24 + 48);
    if (v13 != v24 + 40)
      goto LABEL_25;
  }
LABEL_156:
  v98 = (uint64_t *)v121;
  if ((_DWORD)v122)
  {
    v99 = 8 * v122;
    do
    {
      v100 = *v98++;
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v100 + 40) + 40, (uint64_t ***)v100);
      v101 = *(_QWORD *)(v100 + 24);
      v102 = *(_QWORD **)(v100 + 32);
      *v102 = v101;
      *(_QWORD *)(v101 + 8) = v102;
      *(_QWORD *)(v100 + 24) = 0;
      *(_QWORD *)(v100 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v100);
      v99 -= 8;
    }
    while (v99);
    v98 = (uint64_t *)v121;
  }
  if (v98 != v8)
    free(v98);
  return v14 & 1;
}

void llvm::initializeReplaceWithVeclibLegacyPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8F2F78);
  if (v1 != -1)
  {
    v4[0] = sub_1C526ED48;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8F2F78, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C526ED48(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Replace intrinsics with calls to vector library";
  *(_QWORD *)(v2 + 8) = 47;
  *(_QWORD *)(v2 + 16) = "replace-with-veclib";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &llvm::ReplaceWithVeclibLegacy::ID;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::ReplaceWithVeclibLegacy>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::initializeResetMachineFunctionPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8F2F80);
  if (v1 != -1)
  {
    v4[0] = sub_1C526EE3C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8F2F80, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C526EE3C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Reset machine function if ISel failed";
  *(_QWORD *)(v2 + 8) = 37;
  *(_QWORD *)(v2 + 16) = "reset-machine-function";
  *(_QWORD *)(v2 + 24) = 22;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6FF2;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C526EECC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C526EECC()
{
  uint64_t v0;
  uint64_t result;

  v0 = operator new();
  result = sub_1C4776848(v0, (uint64_t)&unk_1EF8F6FF2);
  *(_QWORD *)result = &off_1E814A3F0;
  *(_WORD *)(result + 248) = 0;
  return result;
}

void sub_1C526EF10(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C526EFA4(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C526F030()
{
  return "ResetMachineFunction";
}

void *sub_1C526F040(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::StackProtector::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

unint64_t sub_1C526F07C(uint64_t a1, llvm::MachineFunction *this)
{
  unint64_t v3;
  uint64_t **v5;
  unint64_t result;
  void *v7;
  int v8;
  char v9;
  uint64_t **v10;

  v3 = **((_QWORD **)this + 45);
  if ((v3 & 0x10) != 0)
  {
    if (*(_BYTE *)(a1 + 249))
      llvm::report_fatal_error((llvm *)"Instruction selection failed", (const char *)1);
    llvm::MachineFunction::clear(this);
    llvm::MachineFunction::init(this);
    if (*(_BYTE *)(a1 + 248))
    {
      v5 = *(uint64_t ***)this;
      v8 = 7;
      v9 = 1;
      v7 = &unk_1E814E8A0;
      v10 = v5;
      llvm::LLVMContext::diagnose(**v5, (const llvm::DiagnosticInfo *)&v7);
    }
  }
  result = (v3 >> 4) & 1;
  *(_DWORD *)(*((_QWORD *)this + 5) + 432) = 0;
  return result;
}

llvm::RegisterBank *llvm::RegisterBank::RegisterBank(llvm::RegisterBank *this, int a2, const char *a3, int a4, unsigned int *a5, int a6)
{
  int v6;
  char *v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  LOBYTE(v6) = a6;
  *(_DWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_DWORD *)this + 4) = a4;
  v9 = (char *)this + 40;
  *((_QWORD *)this + 3) = (char *)this + 40;
  v10 = (char *)this + 24;
  *((_QWORD *)this + 4) = 0x600000000;
  *((_DWORD *)this + 22) = a6;
  v11 = a6 + 63;
  if ((a6 + 63) < 0x40)
  {
    v15 = 0;
  }
  else
  {
    v12 = v11 >> 6;
    if (v11 >= 0x1C0)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 24, (uint64_t)v9, v11 >> 6, 8);
      v13 = *((unsigned int *)this + 8);
      v9 = (char *)*((_QWORD *)this + 3);
      v6 = *((_DWORD *)this + 22);
      v14 = *((_DWORD *)this + 8);
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
    bzero(&v9[8 * v13], 8 * v12);
    v15 = (v14 + v12);
    *((_DWORD *)this + 8) = v15;
  }
  if ((v6 & 0x3F) != 0)
    *(_QWORD *)&v9[8 * v15 - 8] &= ~(-1 << (v6 & 0x3F));
  sub_1C4914230((uint64_t)v10, a5, 0xFFFFFFFF);
  return this;
}

{
  char *v8;

  *(_DWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_DWORD *)this + 4) = a4;
  *((_QWORD *)this + 3) = (char *)this + 40;
  v8 = (char *)this + 24;
  *((_QWORD *)this + 4) = 0x600000000;
  *((_DWORD *)this + 22) = 0;
  sub_1C4833580((_DWORD *)this + 6, a6, 0);
  sub_1C4914230((uint64_t)v8, a5, 0xFFFFFFFF);
  return this;
}

uint64_t llvm::RegisterBank::verify()
{
  return 1;
}

uint64_t llvm::RegisterBank::covers(uint64_t a1, uint64_t a2)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 24)
                    + (((unint64_t)*(unsigned __int16 *)(*(_QWORD *)a2 + 24) >> 3) & 0x1FF8)) >> *(_WORD *)(*(_QWORD *)a2 + 24)) & 1;
}

BOOL llvm::RegisterBank::isValid(llvm::RegisterBank *this)
{
  return *(_DWORD *)this != -1 && *((_QWORD *)this + 1) && *((_DWORD *)this + 4) && *((_DWORD *)this + 22) != 0;
}

BOOL llvm::RegisterBank::operator==(uint64_t a1, uint64_t a2)
{
  return a2 == a1;
}

uint64_t llvm::RegisterBankInfo::RegisterBankInfo(uint64_t this, llvm::RegisterBank **a2, int a3)
{
  *(_QWORD *)this = &off_1E814A4B0;
  *(_QWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 16) = a3;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_DWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 80) = 0;
  *(_DWORD *)(this + 88) = 0;
  *(_QWORD *)(this + 96) = 0;
  *(_QWORD *)(this + 104) = 0;
  *(_DWORD *)(this + 112) = 0;
  *(_DWORD *)(this + 136) = 0;
  *(_QWORD *)(this + 120) = 0;
  *(_QWORD *)(this + 128) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E814A4B0;
  *(_QWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 16) = a3;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_DWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 80) = 0;
  *(_DWORD *)(this + 88) = 0;
  *(_QWORD *)(this + 96) = 0;
  *(_QWORD *)(this + 104) = 0;
  *(_DWORD *)(this + 112) = 0;
  *(_DWORD *)(this + 136) = 0;
  *(_QWORD *)(this + 120) = 0;
  *(_QWORD *)(this + 128) = 0;
  return this;
}

uint64_t llvm::RegisterBankInfo::verify()
{
  return 1;
}

unint64_t llvm::RegisterBankInfo::getRegBank(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t *MinimalPhysRegClass;
  unint64_t result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (a2 - 1 > 0x3FFFFFFE)
  {
    v8 = a2 & 0x7FFFFFFF;
    v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 16 * v8);
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    v11 = (v9 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 16 * v8) & 4) == 0;
    result = v9 & 0xFFFFFFFFFFFFFFF8;
    if (v11)
    {
      result = 0;
      if ((v9 & 4) == 0)
      {
        if (v10)
        {
          v12 = 0;
          if ((a2 & 0x80000000) != 0 && v8 < *(unsigned int *)(a3 + 432))
            v12 = *(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * v8);
          return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v10, v12);
        }
      }
    }
  }
  else
  {
    MinimalPhysRegClass = llvm::RegisterBankInfo::getMinimalPhysRegClass(a1, a2, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a1 + 24))(a1, MinimalPhysRegClass, 0);
  }
  return result;
}

uint64_t *llvm::RegisterBankInfo::getMinimalPhysRegClass(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;

  v6 = a1 + 120;
  v15 = a2;
  v7 = sub_1C4A1156C((uint64_t *)(a1 + 120), &v15);
  if ((int *)(*(_QWORD *)(a1 + 120) + 16 * *(unsigned int *)(a1 + 136)) != v7)
    return (uint64_t *)*((_QWORD *)v7 + 1);
  v9 = *(uint64_t ***)(a3 + 240);
  v10 = *(uint64_t ***)(a3 + 248);
  if (v9 == v10)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v11 = (unint64_t)a2 >> 3;
    do
    {
      if (a2 - 0x40000000 >= 0xC0000001)
      {
        v12 = **v9;
        if (v11 < *(unsigned __int16 *)(v12 + 22)
          && ((1 << (a2 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v12 + 8) + v11)) != 0
          && (!v8
           || *v9 != v8
           && ((*(_DWORD *)(v8[1] + ((*(unsigned __int16 *)(v12 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v12 + 24)) & 1) != 0))
        {
          v8 = *v9;
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  v14 = a2;
  *((_QWORD *)sub_1C5270984(v6, &v14) + 1) = v8;
  return v8;
}

uint64_t llvm::RegisterBankInfo::getRegBankFromConstraints(llvm::RegisterBankInfo *this, const llvm::MachineInstr *a2, uint64_t a3, const llvm::TargetInstrInfo *a4, const llvm::MachineRegisterInfo *a5)
{
  const llvm::TargetRegisterInfo *v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v10 = (const llvm::TargetRegisterInfo *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a5 + 16) + 176))(*(_QWORD *)(*(_QWORD *)a5 + 16));
  result = llvm::MachineInstr::getRegClassConstraint(a2, a3, a4, v10);
  if (result)
  {
    v12 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 32 * a3 + 4);
    if (v12 < 0 && (v13 = v12 & 0x7FFFFFFF, v13 < *((_DWORD *)a5 + 108)))
      v14 = *(_QWORD *)(*((_QWORD *)a5 + 53) + 8 * v13);
    else
      v14 = 0;
    return (*(uint64_t (**)(llvm::RegisterBankInfo *, uint64_t, uint64_t))(*(_QWORD *)this + 24))(this, result, v14);
  }
  return result;
}

uint64_t llvm::RegisterBankInfo::constrainGenericRegister(int a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v7;

  v3 = a2;
  v4 = (uint64_t *)(a3[3] + 16 * (a1 & 0x7FFFFFFF));
  v5 = *v4;
  if ((*v4 & 4) == 0)
    return sub_1C51A3F30(a3, a1, v5 & 0xFFFFFFFFFFFFFFF8, a2, 0);
  v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  if (v7
    && ((*(_QWORD *)(*(_QWORD *)(v7 + 24)
                   + (((unint64_t)*(unsigned __int16 *)(*(_QWORD *)a2 + 24) >> 3) & 0x1FF8)) >> *(_WORD *)(*(_QWORD *)a2 + 24)) & 1) == 0)
  {
    return 0;
  }
  *v4 = a2;
  return v3;
}

uint64_t llvm::RegisterBankInfo::getSizeInBits(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (a2 - 1 <= 0x3FFFFFFE)
    return *(unsigned int *)(*(_QWORD *)(a4 + 264)
                           + 24
                           * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(a1, a2, a4) + 24)
                            + *(_DWORD *)(a4 + 272)
                            * ((*(_QWORD *)(a4 + 248) - *(_QWORD *)(a4 + 240)) >> 3)));
  else
    return llvm::TargetRegisterInfo::getRegSizeInBits(a4, a2, a3);
}

unint64_t llvm::hash_value(llvm *this, const llvm::RegisterBankInfo::PartialMapping *a2)
{
  int v2;
  _DWORD *v3;
  int v5;
  int v6;
  int v7;

  v2 = *((_DWORD *)this + 1);
  v3 = (_DWORD *)*((_QWORD *)this + 1);
  v7 = *(_DWORD *)this;
  v6 = v2;
  if (v3)
    LODWORD(v3) = *v3;
  v5 = (int)v3;
  return sub_1C621038C(&v7, &v6, &v5);
}

uint64_t llvm::RegisterBankInfo::getPartialMapping(llvm::RegisterBankInfo *this, int a2, int a3, const llvm::RegisterBank *a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  int *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  int *v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  BOOL v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  int v48;

  v47 = a3;
  v48 = a2;
  v46 = *(_DWORD *)a4;
  v8 = sub_1C621038C(&v48, &v47, &v46);
  v9 = *((_QWORD *)this + 3);
  v10 = *((unsigned int *)this + 10);
  if ((_DWORD)v10)
  {
    v11 = ((_DWORD)v10 - 1) & (37 * v8);
    v12 = *(_DWORD *)(v9 + 16 * v11);
    if (v12 == v8)
    {
      if ((_DWORD)v10 != (_DWORD)v11)
      {
LABEL_15:
        v20 = v9 + 16 * v11 + 8;
        return *(_QWORD *)v20;
      }
      goto LABEL_12;
    }
    v13 = 1;
    while (v12 != -1)
    {
      v14 = v11 + v13++;
      v11 = v14 & (v10 - 1);
      v12 = *(_DWORD *)(v9 + 16 * v11);
      if (v12 == v8)
        goto LABEL_10;
    }
  }
  v11 = *((unsigned int *)this + 10);
LABEL_10:
  if (v11 != v10)
    goto LABEL_15;
  if (!(_DWORD)v10)
  {
    v16 = 0;
    goto LABEL_18;
  }
LABEL_12:
  v15 = (v10 - 1) & (37 * v8);
  v16 = (int *)(v9 + 16 * v15);
  v17 = *v16;
  if (*v16 != v8)
  {
    v24 = 0;
    v25 = 1;
    while (v17 != -1)
    {
      if (v24)
        v26 = 0;
      else
        v26 = v17 == -2;
      if (v26)
        v24 = v16;
      v27 = v15 + v25++;
      v15 = v27 & (v10 - 1);
      v16 = (int *)(v9 + 16 * v15);
      v17 = *v16;
      if (*v16 == v8)
        goto LABEL_13;
    }
    if (v24)
      v16 = v24;
LABEL_18:
    v23 = *((_DWORD *)this + 8);
    if (4 * v23 + 4 >= (3 * v10))
    {
      v45 = v8;
      sub_1C5270BC4((uint64_t *)this + 3, 2 * v10);
      v28 = *((_DWORD *)this + 10);
      if (v28)
      {
        v29 = *((_QWORD *)this + 3);
        v30 = v28 - 1;
        v31 = v30 & (37 * v45);
        v16 = (int *)(v29 + 16 * v31);
        v32 = *v16;
        if (*v16 != v45)
        {
          v33 = 0;
          v34 = 1;
          v8 = v45;
          while (v32 != -1)
          {
            if (v33)
              v35 = 0;
            else
              v35 = v32 == -2;
            if (v35)
              v33 = v16;
            v36 = v31 + v34++;
            v31 = v36 & v30;
            v16 = (int *)(v29 + 16 * v31);
            v32 = *v16;
            if (*v16 == v45)
              goto LABEL_20;
          }
          goto LABEL_59;
        }
LABEL_58:
        v8 = v45;
        goto LABEL_20;
      }
    }
    else
    {
      if ((int)v10 + ~v23 - *((_DWORD *)this + 9) > v10 >> 3)
      {
LABEL_20:
        ++*((_DWORD *)this + 8);
        if (*v16 != -1)
          --*((_DWORD *)this + 9);
        *v16 = v8;
        *((_QWORD *)v16 + 1) = 0;
        goto LABEL_13;
      }
      v45 = v8;
      sub_1C5270BC4((uint64_t *)this + 3, v10);
      v37 = *((_DWORD *)this + 10);
      if (v37)
      {
        v38 = *((_QWORD *)this + 3);
        v39 = v37 - 1;
        v40 = v39 & (37 * v45);
        v16 = (int *)(v38 + 16 * v40);
        v41 = *v16;
        if (*v16 != v45)
        {
          v33 = 0;
          v42 = 1;
          v8 = v45;
          while (v41 != -1)
          {
            if (v33)
              v43 = 0;
            else
              v43 = v41 == -2;
            if (v43)
              v33 = v16;
            v44 = v40 + v42++;
            v40 = v44 & v39;
            v16 = (int *)(v38 + 16 * v40);
            v41 = *v16;
            if (*v16 == v45)
              goto LABEL_20;
          }
LABEL_59:
          if (v33)
            v16 = v33;
          goto LABEL_58;
        }
        goto LABEL_58;
      }
    }
    v16 = 0;
    goto LABEL_58;
  }
LABEL_13:
  v18 = operator new();
  *(_QWORD *)(v18 + 8) = a4;
  v21 = *((_QWORD *)v16 + 1);
  v20 = (uint64_t)(v16 + 2);
  v19 = v21;
  *(_DWORD *)v18 = a2;
  *(_DWORD *)(v18 + 4) = a3;
  *(_QWORD *)v20 = v18;
  if (v21)
    MEMORY[0x1CAA32FC0](v19, 0x1060C40832E3BDALL);
  return *(_QWORD *)v20;
}

uint64_t llvm::RegisterBankInfo::getValueMapping(llvm::RegisterBankInfo *this, const llvm::RegisterBankInfo::PartialMapping *a2, unsigned int a3)
{
  int v6;
  _DWORD *v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD **v15;
  int v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  int *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  int *v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  int v40;
  int *v41;
  int v42;
  BOOL v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  BOOL v51;
  unsigned int v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  void *v57;
  uint64_t v58;
  _QWORD v59[9];

  v59[8] = *MEMORY[0x1E0C80C00];
  if (a3 == 1)
  {
    v6 = *(_DWORD *)a2;
    v7 = (_DWORD *)*((_QWORD *)a2 + 1);
    v56 = *((_DWORD *)a2 + 1);
    LODWORD(v57) = v6;
    if (v7)
      LODWORD(v7) = *v7;
    v55 = (int)v7;
    v8 = sub_1C621038C(&v57, &v56, &v55);
  }
  else
  {
    v14 = a3;
    v57 = v59;
    v58 = 0x800000000;
    sub_1C4765AA4((char *)&v57, a3, 0);
    if (a3)
    {
      v15 = (_DWORD **)((char *)a2 + 8);
      do
      {
        v16 = *((_DWORD *)v15 - 2);
        v17 = *v15;
        v55 = *((_DWORD *)v15 - 1);
        v56 = v16;
        if (v17)
          LODWORD(v17) = *v17;
        v54 = (int)v17;
        v18 = sub_1C621038C(&v56, &v55, &v54);
        v19 = v58;
        if (v58 >= (unint64_t)HIDWORD(v58))
        {
          v53 = v18;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v58 + 1, 8);
          v18 = v53;
          v19 = v58;
        }
        *((_QWORD *)v57 + v19) = v18;
        v20 = v58 + 1;
        LODWORD(v58) = v58 + 1;
        v15 += 2;
        --v14;
      }
      while (v14);
    }
    else
    {
      v20 = v58;
    }
    v8 = sub_1C4F5AB38(v57, (uint64_t)v57 + 8 * v20);
    if (v57 != v59)
      free(v57);
  }
  v9 = (uint64_t *)((char *)this + 48);
  v10 = *((_QWORD *)this + 6);
  v11 = *((unsigned int *)this + 16);
  if ((_DWORD)v11)
  {
    v12 = ((_DWORD)v11 - 1) & (37 * v8);
    v13 = *(_DWORD *)(v10 + 16 * v12);
    if (v13 == v8)
    {
      if ((_DWORD)v11 != (_DWORD)v12)
      {
LABEL_27:
        v28 = v10 + 16 * v12 + 8;
        return *(_QWORD *)v28;
      }
      goto LABEL_24;
    }
    v21 = 1;
    while (v13 != -1)
    {
      v22 = v12 + v21++;
      v12 = v22 & (v11 - 1);
      v13 = *(_DWORD *)(v10 + 16 * v12);
      if (v13 == v8)
        goto LABEL_22;
    }
  }
  v12 = *((unsigned int *)this + 16);
LABEL_22:
  if (v12 != v11)
    goto LABEL_27;
  if (!(_DWORD)v11)
  {
    v24 = 0;
    goto LABEL_30;
  }
LABEL_24:
  v23 = (v11 - 1) & (37 * v8);
  v24 = (int *)(v10 + 16 * v23);
  v25 = *v24;
  if (*v24 != v8)
  {
    v32 = 0;
    v33 = 1;
    while (v25 != -1)
    {
      if (v32)
        v34 = 0;
      else
        v34 = v25 == -2;
      if (v34)
        v32 = v24;
      v35 = v23 + v33++;
      v23 = v35 & (v11 - 1);
      v24 = (int *)(v10 + 16 * v23);
      v25 = *v24;
      if (*v24 == v8)
        goto LABEL_25;
    }
    if (v32)
      v24 = v32;
LABEL_30:
    v31 = *((_DWORD *)this + 14);
    if (4 * v31 + 4 >= (3 * v11))
    {
      sub_1C5270D70(v9, 2 * v11);
      v36 = *((_DWORD *)this + 16);
      if (v36)
      {
        v37 = *((_QWORD *)this + 6);
        v38 = v36 - 1;
        v39 = v38 & (37 * v8);
        v24 = (int *)(v37 + 16 * v39);
        v40 = *v24;
        if (*v24 == v8)
          goto LABEL_32;
        v41 = 0;
        v42 = 1;
        while (v40 != -1)
        {
          if (v41)
            v43 = 0;
          else
            v43 = v40 == -2;
          if (v43)
            v41 = v24;
          v44 = v39 + v42++;
          v39 = v44 & v38;
          v24 = (int *)(v37 + 16 * v39);
          v40 = *v24;
          if (*v24 == v8)
            goto LABEL_32;
        }
LABEL_73:
        if (v41)
          v24 = v41;
        goto LABEL_32;
      }
    }
    else
    {
      if ((int)v11 + ~v31 - *((_DWORD *)this + 15) > v11 >> 3)
      {
LABEL_32:
        ++*((_DWORD *)this + 14);
        if (*v24 != -1)
          --*((_DWORD *)this + 15);
        *v24 = v8;
        *((_QWORD *)v24 + 1) = 0;
        goto LABEL_25;
      }
      sub_1C5270D70(v9, v11);
      v45 = *((_DWORD *)this + 16);
      if (v45)
      {
        v46 = *((_QWORD *)this + 6);
        v47 = v45 - 1;
        v48 = v47 & (37 * v8);
        v24 = (int *)(v46 + 16 * v48);
        v49 = *v24;
        if (*v24 == v8)
          goto LABEL_32;
        v41 = 0;
        v50 = 1;
        while (v49 != -1)
        {
          if (v41)
            v51 = 0;
          else
            v51 = v49 == -2;
          if (v51)
            v41 = v24;
          v52 = v48 + v50++;
          v48 = v52 & v47;
          v24 = (int *)(v46 + 16 * v48);
          v49 = *v24;
          if (*v24 == v8)
            goto LABEL_32;
        }
        goto LABEL_73;
      }
    }
    v24 = 0;
    goto LABEL_32;
  }
LABEL_25:
  v26 = operator new();
  *(_QWORD *)v26 = a2;
  v29 = *((_QWORD *)v24 + 1);
  v28 = (uint64_t)(v24 + 2);
  v27 = v29;
  *(_DWORD *)(v26 + 8) = a3;
  *(_QWORD *)v28 = v26;
  if (v29)
    MEMORY[0x1CAA32FC0](v27, 0x1060C40ADAFC7CALL);
  return *(_QWORD *)v28;
}

uint64_t llvm::RegisterBankInfo::getOperandsMapping(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  return sub_1C620FA4C(a1, a2, (uint64_t)&a2[a3]);
}

uint64_t llvm::RegisterBankInfo::getInstructionMappingImpl(llvm::RegisterBankInfo *this, BOOL a2, int a3, int a4, const llvm::RegisterBankInfo::ValueMapping *a5, int a6)
{
  int v11;
  int *v12;
  int *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  const llvm::RegisterBankInfo::ValueMapping *v20;
  int v21;
  int v22;

  v21 = a4;
  v22 = a3;
  v20 = a5;
  v19 = a6;
  v11 = sub_1C6210440(&v22, &v21, (uint64_t *)&v20, &v19);
  LODWORD(v20) = v11;
  v12 = sub_1C4A1156C((uint64_t *)this + 12, &v20);
  if ((int *)(*((_QWORD *)this + 12) + 16 * *((unsigned int *)this + 28)) == v12)
  {
    LODWORD(v20) = v11;
    v14 = sub_1C52712D0((uint64_t)this + 96, &v20);
    v15 = operator new();
    *(_QWORD *)(v15 + 8) = a5;
    v17 = *((_QWORD *)v14 + 1);
    v13 = v14 + 2;
    v16 = v17;
    *(_DWORD *)v15 = a3;
    *(_DWORD *)(v15 + 4) = a4;
    *(_DWORD *)(v15 + 16) = a6;
    *(_QWORD *)v13 = v15;
    if (v17)
      MEMORY[0x1CAA32FC0](v16, 0x1060C40F2FE4B89);
  }
  else
  {
    v13 = v12 + 2;
  }
  return *(_QWORD *)v13;
}

uint64_t llvm::RegisterBankInfo::applyDefaultMapping(uint64_t this, const llvm::RegisterBankInfo::OperandsMapper *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(unsigned int *)(*(_QWORD *)(this + 112) + 16);
  if ((_DWORD)v2)
  {
    v3 = this;
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(this + 96);
    v7 = *(_QWORD *)(this + 104);
    v8 = 32 * v2;
    do
    {
      this = *(_QWORD *)(v7 + 32) + v5;
      if (*(_BYTE *)this)
        goto LABEL_4;
      v9 = *(_DWORD *)(this + 4);
      if (!v9)
        goto LABEL_4;
      v10 = *(int *)(*(_QWORD *)v3 + v4);
      if ((_DWORD)v10 == -1)
        goto LABEL_4;
      v11 = *(_DWORD *)(v3 + 56);
      LODWORD(v12) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 112) + 8) + 4 * v4 + 8) + v10;
      v12 = v11 >= v12 ? v12 : v11;
      if (v10 == v12)
        goto LABEL_4;
      v13 = *(_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v10);
      this = llvm::MachineOperand::setReg(this, v13);
      if (v9 < 0 && (v9 & 0x7FFFFFFFu) < *(_DWORD *)(v6 + 432))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v6 + 424) + 8 * (v9 & 0x7FFFFFFF));
        if ((v13 & 0x80000000) == 0)
          goto LABEL_19;
      }
      else
      {
        v14 = 0;
        if ((v13 & 0x80000000) == 0)
          goto LABEL_19;
      }
      if ((v13 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v6 + 432))
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v6 + 424) + 8 * (v13 & 0x7FFFFFFF));
        goto LABEL_20;
      }
LABEL_19:
      v15 = 0;
LABEL_20:
      if (v14 != v15)
        this = (uint64_t)llvm::MachineRegisterInfo::setType((_QWORD *)v6, v13, v14);
LABEL_4:
      v5 += 32;
      v4 += 4;
    }
    while (v8 != v5);
  }
  return this;
}

uint64_t llvm::RegisterBankInfo::PartialMapping::verify(llvm::RegisterBankInfo::PartialMapping *this)
{
  return 1;
}

BOOL llvm::RegisterBankInfo::ValueMapping::partsAllUniform(llvm::RegisterBankInfo::ValueMapping *this)
{
  uint64_t v1;
  _BOOL8 result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((unsigned int *)this + 2);
  if (v1 < 2)
    return 1;
  v3 = *(_QWORD *)this;
  v4 = (_QWORD *)(*(_QWORD *)this + 24);
  v5 = 16 * v1 - 16;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    if (*((_DWORD *)v4 - 1) != *(_DWORD *)(v3 + 4))
      break;
    v6 = *v4;
    v4 += 2;
    v5 -= 16;
  }
  while (v6 == *(_QWORD *)(v3 + 8));
  return result;
}

uint64_t llvm::RegisterBankInfo::ValueMapping::verify(unsigned int **this)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;

  v1 = *this;
  v2 = *((unsigned int *)this + 2);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = *this;
    do
    {
      v5 = *v4;
      v6 = v4[1];
      v4 += 4;
      v7 = v6 + v5;
      if (v3 <= v7)
        v3 = v7;
    }
    while (v4 != &v1[4 * v2]);
    v23 = v3;
    if (v3 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v22, 0, 0);
      v9 = 0;
      v1 = *this;
      v2 = *((unsigned int *)this + 2);
      goto LABEL_10;
    }
  }
  else
  {
    v3 = 0;
    v23 = 0;
  }
  v22 = 0;
  v9 = 1;
LABEL_10:
  if ((_DWORD)v2)
  {
    v10 = &v1[4 * v2];
    v11 = v23;
    v12 = ((unint64_t)v23 + 63) >> 6;
    do
    {
      v13 = *v1;
      v14 = v1[1];
      v21 = v3;
      if (v9)
        v20 = 0;
      else
        llvm::APInt::initSlowCase((llvm::APInt *)&v20, 0, 0);
      sub_1C4912E54(&v20, v13, v14 + v13);
      if (v23 > 0x40)
      {
        if (v11)
        {
          v15 = (_QWORD *)v22;
          v16 = (uint64_t *)v20;
          v17 = v12;
          do
          {
            v18 = *v16++;
            *v15++ ^= v18;
            --v17;
          }
          while (v17);
        }
      }
      else
      {
        v22 ^= v20;
      }
      if (v21 >= 0x41 && v20)
        MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
      v1 += 4;
    }
    while (v1 != v10);
  }
  if (v23 >= 0x41 && v22)
    MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
  return 1;
}

uint64_t llvm::RegisterBankInfo::InstructionMapping::verify(llvm::RegisterBankInfo::InstructionMapping *this, const llvm::MachineInstr *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 32) + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 184))(v2);
  return 1;
}

uint64_t llvm::RegisterBankInfo::OperandsMapper::getNewVRegsEnd(llvm::RegisterBankInfo::OperandsMapper *this, int a2, int a3)
{
  unsigned int v3;

  v3 = *((_DWORD *)this + 14);
  if (v3 >= a3 + a2)
    v3 = a3 + a2;
  return *((_QWORD *)this + 6) + 4 * v3;
}

{
  unsigned int v3;

  v3 = *((_DWORD *)this + 14);
  if (v3 >= a3 + a2)
    v3 = a3 + a2;
  return *((_QWORD *)this + 6) + 4 * v3;
}

uint64_t llvm::RegisterBankInfo::OperandsMapper::setVRegs(llvm::RegisterBankInfo::OperandsMapper *a1, unsigned int a2, int a3, int a4)
{
  uint64_t result;

  result = llvm::RegisterBankInfo::OperandsMapper::getVRegsMem(a1, a2);
  *(_DWORD *)(*((_QWORD *)a1 + 6) + 4 * (*(_DWORD *)(*(_QWORD *)a1 + 4 * a2) + a3)) = a4;
  return result;
}

llvm::raw_ostream *llvm::RegisterBankInfo::OperandsMapper::print(llvm::RegisterBankInfo::OperandsMapper *this, llvm::raw_ostream *a2, int a3)
{
  uint64_t v5;
  unint64_t v6;
  llvm::raw_ostream *result;
  char *v8;
  char v9;
  llvm::raw_ostream *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  uint64_t v16;
  char v17;
  _WORD *v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t (**v22)(void);
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _WORD *v26;
  int *v27;
  uint64_t v28;
  char v29;
  int v30;
  _WORD *v31;
  _DWORD *v32;
  uint64_t (**v33)(void);
  uint64_t v34;
  _BYTE *v35;
  void *v36;
  unint64_t v37;
  char v38;
  _WORD *v39;
  _WORD *v40;
  unint64_t v41;
  llvm::raw_ostream *v42;
  int v43;
  _BYTE *v44;
  uint64_t v45;
  _QWORD v46[3];
  llvm::raw_ostream *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v45 = *(unsigned int *)(*((_QWORD *)this + 14) + 16);
  v5 = *((_QWORD *)a2 + 4);
  v6 = *((_QWORD *)a2 + 3) - v5;
  if (a3)
  {
    if (v6 > 0xB)
    {
      *(_DWORD *)(v5 + 8) = 544370534;
      *(_QWORD *)v5 = *(_QWORD *)"Mapping for ";
      *((_QWORD *)a2 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(a2, "Mapping for ", 0xCuLL);
    }
    llvm::MachineInstr::print(*((llvm::MachineInstr **)this + 13), a2, 1, 0, 0, 1, 0);
    v34 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v34) > 5)
    {
      *(_WORD *)(v34 + 4) = 8296;
      *(_DWORD *)v34 = 1953068810;
      *((_QWORD *)a2 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(a2, "\nwith ", 6uLL);
    }
    result = llvm::RegisterBankInfo::InstructionMapping::print(*((llvm::RegisterBankInfo::InstructionMapping **)this + 14), a2);
    v35 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v35 >= *((_QWORD *)a2 + 3))
    {
      result = llvm::raw_ostream::write(a2, 10);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v35 + 1;
      *v35 = 10;
    }
    v36 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v36 > 0x30uLL)
    {
      qmemcpy(v36, "Populated indices (CellNumber, IndexInNewVRegs): ", 49);
      *((_QWORD *)a2 + 4) += 49;
    }
    else
    {
      result = llvm::raw_ostream::write(a2, "Populated indices (CellNumber, IndexInNewVRegs): ", 0x31uLL);
    }
    if ((_DWORD)v45)
    {
      v37 = 0;
      v38 = 1;
      do
      {
        if (*(_DWORD *)(*(_QWORD *)this + 4 * v37) != -1)
        {
          v39 = (_WORD *)*((_QWORD *)a2 + 4);
          if ((v38 & 1) == 0)
          {
            if (*((_QWORD *)a2 + 3) - (_QWORD)v39 > 1uLL)
            {
              *v39 = 8236;
              v39 = (_WORD *)(*((_QWORD *)a2 + 4) + 2);
              *((_QWORD *)a2 + 4) = v39;
            }
            else
            {
              llvm::raw_ostream::write(a2, ", ", 2uLL);
              v39 = (_WORD *)*((_QWORD *)a2 + 4);
            }
          }
          if ((unint64_t)v39 >= *((_QWORD *)a2 + 3))
          {
            llvm::raw_ostream::write(a2, 40);
          }
          else
          {
            *((_QWORD *)a2 + 4) = (char *)v39 + 1;
            *(_BYTE *)v39 = 40;
          }
          sub_1C5E21910(a2, v37, 0, 0, 0);
          v40 = (_WORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v40 > 1uLL)
          {
            *v40 = 8236;
            *((_QWORD *)a2 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(a2, ", ", 2uLL);
          }
          v41 = *(int *)(*(_QWORD *)this + 4 * v37);
          if ((v41 & 0x80000000) != 0)
          {
            v41 = -(uint64_t)v41;
            v42 = a2;
            v43 = 1;
          }
          else
          {
            v42 = a2;
            v43 = 0;
          }
          result = sub_1C5E21910(v42, v41, 0, 0, v43);
          v44 = (_BYTE *)*((_QWORD *)a2 + 4);
          if ((unint64_t)v44 >= *((_QWORD *)a2 + 3))
          {
            result = llvm::raw_ostream::write(a2, 41);
            v38 = 0;
          }
          else
          {
            v38 = 0;
            *((_QWORD *)a2 + 4) = v44 + 1;
            *v44 = 41;
          }
        }
        ++v37;
      }
      while (v45 != v37);
    }
    v8 = (char *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v8 < *((_QWORD *)a2 + 3))
    {
      *((_QWORD *)a2 + 4) = v8 + 1;
      v9 = 10;
      goto LABEL_6;
    }
    v10 = a2;
    v11 = 10;
  }
  else
  {
    if (v6 > 0xB)
    {
      *(_DWORD *)(v5 + 8) = 540689481;
      *(_QWORD *)v5 = *(_QWORD *)"Mapping ID: ";
      *((_QWORD *)a2 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(a2, "Mapping ID: ", 0xCuLL);
    }
    result = sub_1C5E21910(a2, **((unsigned int **)this + 14), 0, 0, 0);
    v8 = (char *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v8 < *((_QWORD *)a2 + 3))
    {
      *((_QWORD *)a2 + 4) = v8 + 1;
      v9 = 32;
LABEL_6:
      *v8 = v9;
      goto LABEL_9;
    }
    v10 = a2;
    v11 = 32;
  }
  result = llvm::raw_ostream::write(v10, v11);
LABEL_9:
  v12 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v12) > 0x10)
  {
    *(_BYTE *)(v12 + 16) = 32;
    *(_OWORD *)v12 = *(_OWORD *)"Operand Mapping: ";
    *((_QWORD *)a2 + 4) += 17;
  }
  else
  {
    result = llvm::raw_ostream::write(a2, "Operand Mapping: ", 0x11uLL);
  }
  v13 = *(_QWORD *)(*((_QWORD *)this + 13) + 24);
  if (v13 && (v14 = *(_QWORD *)(v13 + 32)) != 0)
  {
    result = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 16) + 176))(*(_QWORD *)(v14 + 16));
    v15 = result;
  }
  else
  {
    v15 = 0;
  }
  if ((_DWORD)v45)
  {
    v16 = 0;
    v17 = 1;
    while (*(_DWORD *)(*(_QWORD *)this + 4 * v16) == -1)
    {
LABEL_38:
      if (++v16 == v45)
        return result;
    }
    v18 = (_WORD *)*((_QWORD *)a2 + 4);
    if ((v17 & 1) == 0)
    {
      if (*((_QWORD *)a2 + 3) - (_QWORD)v18 > 1uLL)
      {
        *v18 = 8236;
        v18 = (_WORD *)(*((_QWORD *)a2 + 4) + 2);
        *((_QWORD *)a2 + 4) = v18;
      }
      else
      {
        llvm::raw_ostream::write(a2, ", ", 2uLL);
        v18 = (_WORD *)*((_QWORD *)a2 + 4);
      }
    }
    if ((unint64_t)v18 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 40);
    }
    else
    {
      *((_QWORD *)a2 + 4) = (char *)v18 + 1;
      *(_BYTE *)v18 = 40;
    }
    v19 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 13) + 32) + 32 * v16 + 4);
    v20 = operator new(0x28uLL);
    *(_QWORD *)v20 = &off_1E814D010;
    v20[2] = v19;
    *((_QWORD *)v20 + 2) = v15;
    v20[6] = 0;
    *((_QWORD *)v20 + 4) = 0;
    v47 = (llvm::raw_ostream *)v20;
    sub_1C52C9630((llvm::raw_ostream *)v20, a2);
    v21 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v21) > 2)
    {
      *(_BYTE *)(v21 + 2) = 91;
      *(_WORD *)v21 = 8236;
      *((_QWORD *)a2 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(a2, ", [", 3uLL);
    }
    result = v47;
    if (v47 == (llvm::raw_ostream *)v46)
    {
      v22 = (uint64_t (**)(void))(v46[0] + 32);
    }
    else
    {
      if (!v47)
        goto LABEL_31;
      v22 = (uint64_t (**)(void))(*(_QWORD *)v47 + 40);
    }
    result = (llvm::raw_ostream *)(*v22)();
LABEL_31:
    v23 = *(int *)(*(_QWORD *)this + 4 * v16);
    if ((_DWORD)v23 == -1
      || ((v24 = *((_DWORD *)this + 14),
           LODWORD(v25) = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 8) + 16 * v16 + 8) + v23,
           v24 >= v25)
        ? (v25 = v25)
        : (v25 = v24),
          v23 == v25))
    {
LABEL_36:
      v26 = (_WORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v26 > 1uLL)
      {
        v17 = 0;
        *v26 = 10589;
        *((_QWORD *)a2 + 4) += 2;
      }
      else
      {
        result = llvm::raw_ostream::write(a2, "])", 2uLL);
        v17 = 0;
      }
      goto LABEL_38;
    }
    v27 = (int *)(*((_QWORD *)this + 6) + 4 * v23);
    v28 = 4 * v25 - 4 * v23;
    v29 = 1;
    while (1)
    {
      v30 = *v27;
      if ((v29 & 1) == 0)
      {
        v31 = (_WORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v31 > 1uLL)
        {
          *v31 = 8236;
          *((_QWORD *)a2 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(a2, ", ", 2uLL);
        }
      }
      v32 = operator new(0x28uLL);
      *(_QWORD *)v32 = &off_1E814D010;
      v32[2] = v30;
      *((_QWORD *)v32 + 2) = v15;
      v32[6] = 0;
      *((_QWORD *)v32 + 4) = 0;
      v47 = (llvm::raw_ostream *)v32;
      sub_1C52C9630((llvm::raw_ostream *)v32, a2);
      result = v47;
      if (v47 == (llvm::raw_ostream *)v46)
        break;
      if (v47)
      {
        v33 = (uint64_t (**)(void))(*(_QWORD *)v47 + 40);
LABEL_48:
        result = (llvm::raw_ostream *)(*v33)();
      }
      v29 = 0;
      ++v27;
      v28 -= 4;
      if (!v28)
        goto LABEL_36;
    }
    v33 = (uint64_t (**)(void))(v46[0] + 32);
    goto LABEL_48;
  }
  return result;
}

_DWORD *sub_1C5270984(uint64_t a1, _DWORD *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _DWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_13:
    v6 = sub_1C5270A40(a1, (uint64_t)a2, a2, v12);
    *v6 = *a2;
    *((_QWORD *)v6 + 1) = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = (37 * *a2) & (v3 - 1);
  v6 = (_DWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_DWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_13;
  }
  return v6;
}

_DWORD *sub_1C5270A40(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  BOOL v22;
  unsigned int v23;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_3;
    sub_1C49F41C0((uint64_t *)a1, v7);
    v17 = *(_DWORD *)(a1 + 16);
    if (v17)
    {
      v18 = v17 - 1;
      v19 = (37 * *a3) & v18;
      a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v19);
      v20 = *a4;
      if (*a3 == *a4)
        goto LABEL_3;
      v13 = 0;
      v21 = 1;
      while (v20 != -1)
      {
        if (v13)
          v22 = 0;
        else
          v22 = v20 == -2;
        if (v22)
          v13 = a4;
        v23 = v19 + v21++;
        v19 = v23 & v18;
        a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v19);
        v20 = *a4;
        if (*a3 == *a4)
          goto LABEL_3;
      }
      goto LABEL_29;
    }
LABEL_28:
    a4 = 0;
    goto LABEL_3;
  }
  sub_1C49F41C0((uint64_t *)a1, 2 * v7);
  v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_28;
  v10 = v9 - 1;
  v11 = (37 * *a3) & v10;
  a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 == *a4)
    goto LABEL_3;
  v13 = 0;
  v14 = 1;
  while (v12 != -1)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == -2;
    if (v15)
      v13 = a4;
    v16 = v11 + v14++;
    v11 = v16 & v10;
    a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v11);
    v12 = *a4;
    if (*a3 == *a4)
      goto LABEL_3;
  }
LABEL_29:
  if (v13)
    a4 = v13;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *sub_1C5270BC4(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      v13 = &v4[4 * v3];
      do
      {
        v14 = *v12;
        if (*v12 <= 0xFFFFFFFD)
        {
          v15 = *((_DWORD *)a1 + 4) - 1;
          v16 = v15 & (37 * v14);
          v17 = *a1 + 16 * v16;
          v18 = *(_DWORD *)v17;
          if (v14 != *(_DWORD *)v17)
          {
            v21 = 0;
            v22 = 1;
            while (v18 != -1)
            {
              if (v21)
                v23 = 0;
              else
                v23 = v18 == -2;
              if (v23)
                v21 = v17;
              v24 = v16 + v22++;
              v16 = v24 & v15;
              v17 = *a1 + 16 * (v24 & v15);
              v18 = *(_DWORD *)v17;
              if (v14 == *(_DWORD *)v17)
                goto LABEL_12;
            }
            if (v21)
              v17 = v21;
          }
LABEL_12:
          *(_DWORD *)v17 = v14;
          v19 = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          *(_QWORD *)(v17 + 8) = v19;
          ++*((_DWORD *)a1 + 2);
          v20 = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          if (v20)
            MEMORY[0x1CAA32FC0](v20, 0x1060C40832E3BDALL);
        }
        v12 += 4;
      }
      while (v12 != v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v25 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v25)
  {
    v26 = 16 * v25;
    do
    {
      *result = -1;
      result += 4;
      v26 -= 16;
    }
    while (v26);
  }
  return result;
}

_DWORD *sub_1C5270D70(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      v13 = &v4[4 * v3];
      do
      {
        v14 = *v12;
        if (*v12 <= 0xFFFFFFFD)
        {
          v15 = *((_DWORD *)a1 + 4) - 1;
          v16 = v15 & (37 * v14);
          v17 = *a1 + 16 * v16;
          v18 = *(_DWORD *)v17;
          if (v14 != *(_DWORD *)v17)
          {
            v21 = 0;
            v22 = 1;
            while (v18 != -1)
            {
              if (v21)
                v23 = 0;
              else
                v23 = v18 == -2;
              if (v23)
                v21 = v17;
              v24 = v16 + v22++;
              v16 = v24 & v15;
              v17 = *a1 + 16 * (v24 & v15);
              v18 = *(_DWORD *)v17;
              if (v14 == *(_DWORD *)v17)
                goto LABEL_12;
            }
            if (v21)
              v17 = v21;
          }
LABEL_12:
          *(_DWORD *)v17 = v14;
          v19 = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          *(_QWORD *)(v17 + 8) = v19;
          ++*((_DWORD *)a1 + 2);
          v20 = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          if (v20)
            MEMORY[0x1CAA32FC0](v20, 0x1060C40ADAFC7CALL);
        }
        v12 += 4;
      }
      while (v12 != v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v25 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v25)
  {
    v26 = 16 * v25;
    do
    {
      *result = -1;
      result += 4;
      v26 -= 16;
    }
    while (v26);
  }
  return result;
}

uint64_t sub_1C5270F1C(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = (37 * *a2) & (v4 - 1);
    result = *(_QWORD *)a1 + 16 * v5;
    v7 = *(_DWORD *)result;
    if (*a2 == *(_DWORD *)result)
      return result;
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = result;
      v11 = v5 + v9++;
      v5 = v11 & (v4 - 1);
      result = *(_QWORD *)a1 + 16 * v5;
      v7 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result)
        return result;
    }
    if (v8)
      result = v8;
  }
  else
  {
    result = 0;
  }
  v12 = *(_DWORD *)(a1 + 8);
  if (4 * v12 + 4 >= 3 * v4)
  {
    sub_1C5271124((uint64_t *)a1, 2 * v4);
    v13 = *(_DWORD *)(a1 + 16);
    if (v13)
    {
      v14 = v13 - 1;
      v15 = (37 * *a2) & v14;
      result = *(_QWORD *)a1 + 16 * v15;
      v16 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result)
        goto LABEL_15;
      v17 = 0;
      v18 = 1;
      while (v16 != -1)
      {
        if (v17)
          v19 = 0;
        else
          v19 = v16 == -2;
        if (v19)
          v17 = result;
        v20 = v15 + v18++;
        v15 = v20 & v14;
        result = *(_QWORD *)a1 + 16 * v15;
        v16 = *(_DWORD *)result;
        if (*a2 == *(_DWORD *)result)
          goto LABEL_15;
      }
LABEL_45:
      if (v17)
        result = v17;
      goto LABEL_15;
    }
LABEL_44:
    result = 0;
    goto LABEL_15;
  }
  if (v4 + ~v12 - *(_DWORD *)(a1 + 12) <= v4 >> 3)
  {
    sub_1C5271124((uint64_t *)a1, v4);
    v21 = *(_DWORD *)(a1 + 16);
    if (v21)
    {
      v22 = v21 - 1;
      v23 = (37 * *a2) & v22;
      result = *(_QWORD *)a1 + 16 * v23;
      v24 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result)
        goto LABEL_15;
      v17 = 0;
      v25 = 1;
      while (v24 != -1)
      {
        if (v17)
          v26 = 0;
        else
          v26 = v24 == -2;
        if (v26)
          v17 = result;
        v27 = v23 + v25++;
        v23 = v27 & v22;
        result = *(_QWORD *)a1 + 16 * v23;
        v24 = *(_DWORD *)result;
        if (*a2 == *(_DWORD *)result)
          goto LABEL_15;
      }
      goto LABEL_45;
    }
    goto LABEL_44;
  }
LABEL_15:
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)result != -1)
    --*(_DWORD *)(a1 + 12);
  *(_DWORD *)result = *a2;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

_DWORD *sub_1C5271124(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      v13 = &v4[4 * v3];
      do
      {
        v14 = *v12;
        if (*v12 <= 0xFFFFFFFD)
        {
          v15 = *((_DWORD *)a1 + 4) - 1;
          v16 = v15 & (37 * v14);
          v17 = *a1 + 16 * v16;
          v18 = *(_DWORD *)v17;
          if (v14 != *(_DWORD *)v17)
          {
            v21 = 0;
            v22 = 1;
            while (v18 != -1)
            {
              if (v21)
                v23 = 0;
              else
                v23 = v18 == -2;
              if (v23)
                v21 = v17;
              v24 = v16 + v22++;
              v16 = v24 & v15;
              v17 = *a1 + 16 * (v24 & v15);
              v18 = *(_DWORD *)v17;
              if (v14 == *(_DWORD *)v17)
                goto LABEL_12;
            }
            if (v21)
              v17 = v21;
          }
LABEL_12:
          *(_DWORD *)v17 = v14;
          v19 = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          *(_QWORD *)(v17 + 8) = v19;
          ++*((_DWORD *)a1 + 2);
          v20 = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          if (v20)
            MEMORY[0x1CAA32F9C](v20, 0x1060C80ADAFC7CALL);
        }
        v12 += 4;
      }
      while (v12 != v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v25 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v25)
  {
    v26 = 16 * v25;
    do
    {
      *result = -1;
      result += 4;
      v26 -= 16;
    }
    while (v26);
  }
  return result;
}

_DWORD *sub_1C52712D0(uint64_t a1, _DWORD *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _DWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_13:
    v6 = sub_1C527138C(a1, (uint64_t)a2, a2, v12);
    *v6 = *a2;
    *((_QWORD *)v6 + 1) = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = (37 * *a2) & (v3 - 1);
  v6 = (_DWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_DWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_13;
  }
  return v6;
}

_DWORD *sub_1C527138C(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  BOOL v22;
  unsigned int v23;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_3;
    sub_1C5271510((uint64_t *)a1, v7);
    v17 = *(_DWORD *)(a1 + 16);
    if (v17)
    {
      v18 = v17 - 1;
      v19 = (37 * *a3) & v18;
      a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v19);
      v20 = *a4;
      if (*a3 == *a4)
        goto LABEL_3;
      v13 = 0;
      v21 = 1;
      while (v20 != -1)
      {
        if (v13)
          v22 = 0;
        else
          v22 = v20 == -2;
        if (v22)
          v13 = a4;
        v23 = v19 + v21++;
        v19 = v23 & v18;
        a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v19);
        v20 = *a4;
        if (*a3 == *a4)
          goto LABEL_3;
      }
      goto LABEL_29;
    }
LABEL_28:
    a4 = 0;
    goto LABEL_3;
  }
  sub_1C5271510((uint64_t *)a1, 2 * v7);
  v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_28;
  v10 = v9 - 1;
  v11 = (37 * *a3) & v10;
  a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 == *a4)
    goto LABEL_3;
  v13 = 0;
  v14 = 1;
  while (v12 != -1)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == -2;
    if (v15)
      v13 = a4;
    v16 = v11 + v14++;
    v11 = v16 & v10;
    a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v11);
    v12 = *a4;
    if (*a3 == *a4)
      goto LABEL_3;
  }
LABEL_29:
  if (v13)
    a4 = v13;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *sub_1C5271510(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      v13 = &v4[4 * v3];
      do
      {
        v14 = *v12;
        if (*v12 <= 0xFFFFFFFD)
        {
          v15 = *((_DWORD *)a1 + 4) - 1;
          v16 = v15 & (37 * v14);
          v17 = *a1 + 16 * v16;
          v18 = *(_DWORD *)v17;
          if (v14 != *(_DWORD *)v17)
          {
            v21 = 0;
            v22 = 1;
            while (v18 != -1)
            {
              if (v21)
                v23 = 0;
              else
                v23 = v18 == -2;
              if (v23)
                v21 = v17;
              v24 = v16 + v22++;
              v16 = v24 & v15;
              v17 = *a1 + 16 * (v24 & v15);
              v18 = *(_DWORD *)v17;
              if (v14 == *(_DWORD *)v17)
                goto LABEL_12;
            }
            if (v21)
              v17 = v21;
          }
LABEL_12:
          *(_DWORD *)v17 = v14;
          v19 = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          *(_QWORD *)(v17 + 8) = v19;
          ++*((_DWORD *)a1 + 2);
          v20 = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          if (v20)
            MEMORY[0x1CAA32FC0](v20, 0x1060C40F2FE4B89);
        }
        v12 += 4;
      }
      while (v12 != v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v25 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v25)
  {
    v26 = 16 * v25;
    do
    {
      *result = -1;
      result += 4;
      v26 -= 16;
    }
    while (v26);
  }
  return result;
}

uint64_t sub_1C52716BC(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(unsigned int *)(result + 8);
  v4 = *(unsigned int *)(result + 12);
  v5 = v3 + a2 > v4;
  v6 = v3 + a2 <= v4;
  if (!v5 && a2)
  {
    v7 = (_DWORD *)(*(_QWORD *)result + 4 * v3);
    v8 = a2;
    do
    {
      *v7++ = a3;
      --v8;
    }
    while (v8);
LABEL_5:
    LODWORD(v3) = *(_DWORD *)(result + 8);
    goto LABEL_6;
  }
  if (!v6)
  {
    v13 = result;
    v12 = a2;
    v11 = a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v3 + a2, 4);
    a3 = v11;
    a2 = v12;
    result = v13;
    v3 = *(unsigned int *)(v13 + 8);
  }
  if (a2)
  {
    v9 = (_DWORD *)(*(_QWORD *)result + 4 * v3);
    v10 = a2;
    do
    {
      *v9++ = a3;
      --v10;
    }
    while (v10);
    goto LABEL_5;
  }
LABEL_6:
  *(_DWORD *)(result + 8) = v3 + a2;
  return result;
}

uint64_t sub_1C5271768(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetPassConfigPass(a1);
  llvm::initializeDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Safe Stack instrumentation pass";
  *(_QWORD *)(v2 + 8) = 31;
  *(_QWORD *)(v2 + 16) = "safe-stack";
  *(_QWORD *)(v2 + 24) = 10;
  *(_QWORD *)(v2 + 32) = &unk_1ED7FF5D0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C52718D0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5271804(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED7FF5D0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E814A500;
  *(_QWORD *)(a1 + 32) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7FF5D8);
  if (v3 != -1)
  {
    v7[0] = sub_1C5271768;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7FF5D8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C52718D0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5271804(v0);
}

void sub_1C52718FC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5271920(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::TargetPassConfig::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::AssumptionCacheTracker::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

BOOL sub_1C5271984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  llvm::Function *v9;
  uint64_t v10;
  void **v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  char **v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  void **v22;
  unint64_t v23;
  uint64_t v24;
  void **v25;
  void *v26;
  llvm::AssumptionCacheTracker *v27;
  uint64_t AssumptionCache;
  uint64_t AnalysisPass;
  uint64_t v30;
  void **v31;
  void **v32;
  llvm::ConstantInt *IntPtrType;
  uint64_t v34;
  _QWORD ***v35;
  _QWORD **i;
  _QWORD **v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD **v56;
  _QWORD **v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD **v60;
  _QWORD **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  llvm::AttributeList *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t ParamByValType;
  const char *v71;
  uint64_t v72;
  int v73;
  _BOOL4 v74;
  uint64_t *v75;
  _QWORD **v76;
  uint64_t **v77;
  uint64_t v78;
  uint64_t j;
  uint64_t v80;
  unsigned int v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  uint64_t **v90;
  uint64_t *v91;
  uint64_t **v92;
  int v93;
  BOOL v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  llvm::PointerType *v100;
  uint64_t v101;
  char v102;
  char v103;
  char *v104;
  char *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  char v113;
  char *v114;
  char *v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  unsigned __int8 **v122;
  int v123;
  unsigned __int8 *v124;
  unsigned __int8 *v125;
  unsigned __int8 *v126;
  unsigned __int8 **v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  unsigned __int8 *Impl;
  unsigned __int8 *v132;
  uint64_t *v133;
  uint64_t Declaration;
  uint64_t **v135;
  char *v136;
  char *v137;
  unsigned __int8 **v138;
  int v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  unsigned __int8 *v142;
  uint64_t v143;
  uint64_t **v144;
  uint64_t **v145;
  uint64_t v146;
  char v147;
  char v148;
  char *v149;
  char *v150;
  unsigned __int8 ***v151;
  llvm::Value *v152;
  _QWORD *v153;
  uint64_t v154;
  unsigned __int8 ****v155;
  unsigned __int8 *v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t v160;
  char v161;
  char v162;
  char *v163;
  char *v164;
  llvm::Value *v165;
  uint64_t v166;
  llvm::Value *v167;
  unsigned int v168;
  unsigned int v169;
  llvm::MDNode *BranchWeights;
  uint64_t *v171;
  char *v172;
  uint64_t **v173;
  uint64_t v174;
  char *v175;
  char *v176;
  unsigned __int8 **v177;
  int v178;
  unsigned __int8 *v179;
  unsigned __int8 *v180;
  unsigned __int8 *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  unsigned __int8 **v186;
  char v187;
  char v188;
  char *v189;
  char *v190;
  unsigned __int8 ***v191;
  llvm::Value *v192;
  _QWORD *v193;
  uint64_t v194;
  unsigned __int8 ****v195;
  unsigned __int8 *v196;
  char *v197;
  char *v198;
  unsigned __int8 **v199;
  int v200;
  unsigned __int8 *v201;
  unsigned __int8 *v202;
  unsigned __int8 *v203;
  unsigned __int8 **v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  BOOL v208;
  uint64_t v209;
  unsigned __int8 *v210;
  uint64_t *v211;
  llvm::PointerType *v212;
  char v213;
  char v214;
  char *v215;
  char *v216;
  unsigned __int8 *v217;
  uint64_t v218;
  char v219;
  char v220;
  char *v221;
  char *v222;
  uint64_t *v223;
  llvm::Value *v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t **v229;
  uint64_t v230;
  char *v231;
  char *v232;
  unsigned __int8 **v233;
  int v234;
  unsigned __int8 *v235;
  unsigned __int8 *v236;
  unsigned __int8 *v237;
  char *v238;
  char *v239;
  unsigned __int8 **v240;
  int v241;
  unsigned __int8 *v242;
  unsigned __int8 *v243;
  unsigned __int8 *v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  unsigned __int8 *v250;
  llvm::ConstantInt *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  BOOL v257;
  const char *v258;
  char v259;
  char v260;
  llvm::Value **v261;
  llvm::PointerType *v262;
  char v263;
  char v264;
  char *v265;
  char *v266;
  unsigned __int8 *v267;
  uint64_t *v268;
  unsigned __int8 *v269;
  _QWORD *v270;
  char v271;
  unint64_t v272;
  llvm::Value **v273;
  unsigned __int8 *v274;
  uint64_t *v275;
  char v276;
  char v277;
  char *v278;
  char *v279;
  uint64_t *v280;
  llvm::Value *v281;
  uint64_t v282;
  _QWORD *v283;
  uint64_t *v284;
  char v285;
  char v286;
  char *v287;
  char *v288;
  llvm::Value *v289;
  uint64_t v290;
  unsigned __int8 *v291;
  uint64_t v292;
  unsigned __int8 *v293;
  llvm::Value *v294;
  uint64_t v295;
  _QWORD *v296;
  char *v297;
  char *v298;
  unsigned __int8 **v299;
  int v300;
  unsigned __int8 *v301;
  unsigned __int8 *v302;
  unsigned __int8 **v303;
  unsigned __int8 **v304;
  unsigned __int8 *v305;
  unsigned __int8 **v306;
  char *v307;
  char *v308;
  unsigned __int8 **v309;
  int v310;
  unsigned __int8 *v311;
  unsigned __int8 *v312;
  unsigned __int8 *v313;
  char *v314;
  char *v315;
  unsigned __int8 **v316;
  int v317;
  unsigned __int8 *v318;
  unsigned __int8 *v319;
  unsigned __int8 *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t *v323;
  uint64_t *k;
  uint64_t *v325;
  uint64_t *v326;
  uint64_t *v327;
  uint64_t *v328;
  uint64_t *v329;
  uint64_t *v330;
  uint64_t v331;
  int v332;
  llvm::PointerType *v333;
  char v334;
  char v335;
  char *v336;
  char *v337;
  llvm::Value *v338;
  uint64_t *v339;
  uint64_t *v340;
  uint64_t *v341;
  uint64_t *v342;
  char v343;
  char v344;
  char *v345;
  char *v346;
  uint64_t *v347;
  llvm::Value *v348;
  uint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t *v354;
  char *v355;
  char *v356;
  unsigned __int8 **v357;
  int v358;
  unsigned __int8 *v359;
  unsigned __int8 *v360;
  unsigned __int8 *v361;
  char *v362;
  char *v363;
  unsigned __int8 **v364;
  int v365;
  unsigned __int8 *v366;
  unsigned __int8 *v367;
  unsigned __int8 *v368;
  uint64_t v369;
  unsigned __int8 *v370;
  unsigned __int8 *v371;
  uint64_t v372;
  char *v373;
  char *v374;
  uint64_t *v375;
  uint64_t v376;
  uint64_t v377;
  unsigned __int8 *v378;
  uint64_t v379;
  char v380;
  char v381;
  char *v382;
  char *v383;
  llvm::Value *v384;
  uint64_t v385;
  uint64_t v386;
  char *v387;
  char *v388;
  unsigned __int8 **v389;
  int v390;
  unsigned __int8 **v391;
  _QWORD **v392;
  uint64_t v393;
  llvm::AllocaInst **v394;
  std::string::size_type *v395;
  unsigned __int8 v396;
  void **v397;
  void (**v398)(void **);
  uint64_t **v399;
  uint64_t *v400;
  uint64_t v401;
  llvm::GlobalValue *Section;
  uint64_t v403;
  llvm::Module *v404;
  uint64_t v405;
  uint64_t v406;
  std::string *v407;
  void (**v408)(std::string *);
  std::string::__raw *v409;
  uint64_t *v410;
  uint64_t ****v411;
  uint64_t ***v412;
  uint64_t **v413;
  uint64_t v414;
  uint64_t **v415;
  uint64_t **v416;
  BOOL v417;
  uint64_t *v418;
  uint64_t *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unsigned __int8 v423;
  unsigned int v424;
  unsigned __int8 v425;
  int v426;
  char v427;
  std::string::size_type *v428;
  uint64_t v429;
  uint64_t v430;
  BOOL v431;
  uint64_t v432;
  unsigned __int8 *v433;
  llvm::ConstantInt *v434;
  unsigned __int8 *v435;
  llvm::Value **v436;
  unsigned __int8 *v437;
  uint64_t v438;
  uint64_t v439;
  BOOL v440;
  uint64_t v441;
  unsigned __int8 *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t *v445;
  uint64_t v446;
  uint64_t v447;
  const char *v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  unsigned __int8 v452;
  unsigned __int8 v453;
  unsigned int v454;
  __int16 ParamAlignment;
  unsigned __int8 v456;
  unsigned __int8 v457;
  uint64_t v458;
  uint64_t v459;
  llvm::AllocaInst **v460;
  llvm::AllocaInst *v461;
  uint64_t v462;
  unint64_t v463;
  int v464;
  unsigned __int8 v465;
  unsigned int v466;
  unsigned __int8 v467;
  uint64_t *LiveRange;
  char *v469;
  char *v470;
  unsigned __int8 **v471;
  int v472;
  unsigned __int8 *v473;
  unsigned __int8 *v474;
  unsigned __int8 *v475;
  unsigned int v476;
  uint64_t **v477;
  uint64_t *v478;
  uint64_t **v479;
  int v480;
  BOOL v481;
  unsigned int v482;
  uint64_t **v483;
  llvm::GetElementPtrInst *v484;
  llvm::Value **v485;
  unsigned __int8 *v486;
  uint64_t v487;
  unsigned __int8 *v488;
  uint64_t v489;
  uint64_t *v490;
  llvm **v491;
  llvm::ConstantInt *v492;
  uint64_t v493;
  std::string::size_type v494;
  unsigned int v495;
  unsigned int v496;
  _QWORD *v497;
  uint64_t v498;
  _QWORD *v499;
  int v500;
  BOOL v501;
  unsigned int v502;
  _QWORD *v503;
  int v504;
  __int16 v505;
  uint64_t v506;
  const char *v507;
  uint64_t v508;
  uint64_t v509;
  int v510;
  llvm::Value **v511;
  unsigned __int8 *v512;
  uint64_t **v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t *v518;
  uint64_t v519;
  int v520;
  int v521;
  _QWORD *v522;
  std::string::size_type v523;
  char *v524;
  std::string::size_type v525;
  unint64_t v526;
  unsigned __int8 *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  BOOL v531;
  uint64_t v532;
  unsigned __int8 *v533;
  const llvm::APInt *v534;
  __int16 v535;
  llvm::ConstantInt *v536;
  unsigned int v537;
  unint64_t v538;
  uint64_t *v539;
  llvm *v540;
  uint64_t v541;
  unsigned __int8 *v542;
  uint64_t v543;
  unsigned int v544;
  unsigned int v545;
  llvm **v546;
  llvm *v547;
  llvm **v548;
  int v549;
  BOOL v550;
  unsigned int v551;
  llvm **v552;
  int v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  llvm **v559;
  llvm *v560;
  int v561;
  int v562;
  unint64_t *v563;
  std::string::size_type v564;
  const void *v565;
  unint64_t v566;
  std::string *v567;
  uint64_t v568;
  uint64_t v569;
  std::string *v570;
  std::string::size_type v571;
  unsigned __int8 **v572;
  llvm::GetElementPtrInst *v573;
  llvm::ConstantInt *v574;
  uint64_t v575;
  uint64_t v576;
  int v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  llvm::Value **v582;
  unsigned __int8 *v583;
  uint64_t v584;
  unsigned __int8 *v585;
  int v586;
  uint64_t v587;
  unsigned __int8 *v588;
  unsigned __int8 *v589;
  unsigned __int8 *v590;
  _QWORD **v591;
  _QWORD *v592;
  uint64_t *v593;
  uint64_t v594;
  llvm::ConstantInt *v595;
  llvm::Value **v596;
  llvm::Value *v597;
  _QWORD *v598;
  unsigned int v599;
  llvm::MDNode *v600;
  uint64_t v601;
  uint64_t v602;
  BOOL v603;
  uint64_t v604;
  unsigned __int8 *v605;
  llvm::GetElementPtrInst *v606;
  llvm::Value **v607;
  uint64_t *v608;
  char v609;
  char v610;
  char *v611;
  char *v612;
  uint64_t *v613;
  llvm::Value *v614;
  uint64_t v615;
  _QWORD *v616;
  uint64_t v617;
  uint64_t **v618;
  uint64_t v619;
  char *v620;
  char *v621;
  unsigned __int8 **v622;
  int v623;
  unsigned __int8 *v624;
  unsigned __int8 *v625;
  unsigned __int8 *v626;
  void *v627;
  _OWORD *v628;
  int v629;
  uint64_t v630;
  char *v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  BOOL v635;
  uint64_t *v636;
  unsigned __int8 **v637;
  unsigned __int8 **v638;
  unsigned __int8 **v639;
  char *v640;
  char *v641;
  char *v642;
  _BOOL4 v643;
  char *v644;
  char *v645;
  char *v646;
  _QWORD *v647;
  uint64_t ***v648;
  std::string::size_type *v649;
  uint64_t *v650;
  uint64_t v651;
  uint64_t v652;
  unsigned __int8 **v653;
  llvm::GetElementPtrInst *v654;
  uint64_t ***v655;
  uint64_t *v656;
  uint64_t v657;
  char *v658;
  uint64_t v659;
  uint64_t *v660;
  uint64_t *v661;
  unsigned __int8 **v662;
  std::string::size_type *v663;
  llvm::AllocaInst **v664;
  unsigned __int8 **v665;
  uint64_t *v666;
  uint64_t **v667;
  uint64_t *v668;
  _QWORD *v669;
  uint64_t *v670;
  uint64_t v671;
  char *v672;
  char *v673;
  unsigned __int8 **v674;
  unsigned __int8 **v675;
  unsigned __int8 **v676;
  llvm::AllocaInst **v677;
  llvm **v678;
  uint64_t *v679;
  uint64_t v680;
  _QWORD **v681;
  void **v682;
  _BYTE *v683;
  llvm::PointerType *v684;
  llvm::ConstantInt *v685;
  llvm::ConstantInt *v686;
  llvm::GetElementPtrInst *v687;
  uint64_t v688;
  unsigned __int8 *v689;
  void *__p[2];
  std::string::size_type v691;
  __int16 v692;
  _BYTE v693[1336];
  void *v694[2];
  _QWORD v695[36];
  char v696;
  _BYTE *v697;
  void *v698;
  uint64_t v699;
  int v700;
  _BYTE v701[64];
  _QWORD v702[3];
  __int16 v703;
  _QWORD v704[2];
  int v705;
  __int128 v706;
  __int128 v707;
  uint64_t v708;
  _QWORD *v709;
  uint64_t v710;
  _QWORD v711[6];
  _QWORD v712[2];
  void *v713[2];
  uint64_t v714;
  uint64_t v715[2];
  int v716;
  uint64_t v717;
  llvm::Function *v718;
  char v719;
  int v720;
  char v721;
  void *v722;
  unsigned int v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  void *v729;
  uint64_t v730;
  _BYTE v731[32];
  void *v732;
  uint64_t v733;
  _BYTE v734[32];
  void *v735;
  uint64_t v736;
  _BYTE v737[32];
  void *v738;
  uint64_t v739;
  _BYTE v740[32];
  void *v741;
  uint64_t v742;
  _BYTE v743[128];
  std::string __dst;
  std::string *p_dst;
  __int16 v746;
  std::string *v747;
  __int128 v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t *v752;
  void *v753;
  uint64_t v754;
  uint64_t v755;
  int v756;
  uint64_t *v757;
  char *v758[2];
  uint64_t v759;
  void *v760;
  uint64_t v761;
  _BYTE v762[984];
  uint64_t *v763;
  uint64_t v764;
  uint64_t v765;
  __int128 v766;
  int v767;
  __int128 v768;
  int v769;
  void *v770;
  uint64_t v771;
  uint64_t v772;
  void **v773;
  __int16 v774;
  uint64_t *v775;
  void *v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  void *v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  char *v788;
  void *v789;
  uint64_t v790;
  uint64_t v791[4];
  uint64_t *v792[4];
  __int16 v793;
  uint64_t v794;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v794 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(v5 + 112);
  if (!v6 || (*(_BYTE *)(v6 + 18) & 2) == 0)
    return 0;
  v9 = (llvm::Function *)v5;
  v10 = v4;
  if (*(_BYTE *)(v5 + 16))
  {
    if (*(_BYTE *)(v5 + 16) == 3 && (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 0)
      return 0;
  }
  else if (*(_QWORD *)(v5 + 72) == v5 + 72 && (*(_BYTE *)(v5 + 34) & 0x80) == 0)
  {
    return 0;
  }
  v11 = **(void ****)(v4 + 8);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != &llvm::TargetPassConfig::ID);
  v13 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), &llvm::TargetPassConfig::ID)+ 112);
  *(_QWORD *)(v10 + 32) = v13;
  v14 = (*(uint64_t (**)(uint64_t, llvm::Function *))(*(_QWORD *)v13 + 16))(v13, v9);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 120))(v14);
  if (!v15)
  {
    v631 = "TargetLowering instance is required";
LABEL_910:
    llvm::report_fatal_error((llvm *)v631, (const char *)1);
  }
  v16 = v15;
  v17 = (_QWORD **)*((_QWORD *)v9 + 5);
  v18 = **(char ****)(v10 + 8);
  do
  {
    v19 = *v18;
    v18 += 2;
  }
  while (v19 != llvm::TargetLibraryInfoWrapperPass::ID);
  v20 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v18 - 1) + 96))(*(v18 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v777 = 0;
  v776 = 0;
  LODWORD(v778) = 0;
  v780 = 0;
  v779 = 0;
  LODWORD(v781) = 0;
  v783 = 0;
  v782 = 0;
  LODWORD(v784) = 0;
  llvm::TargetLibraryAnalysis::run(v20 + 32, (uint64_t)v9, (uint64_t)&v748);
  *(_QWORD *)(v20 + 240) = v748;
  v21 = (__int128 *)(v20 + 240);
  if (*(_BYTE *)(v20 + 320))
  {
    if (v21 == &v748)
    {
LABEL_29:
      *(_DWORD *)(v20 + 312) = v756;
      goto LABEL_30;
    }
    v22 = (void **)(v20 + 248);
    v23 = v749;
    v24 = *(unsigned int *)(v20 + 256);
    if (v24 >= v749)
    {
      if ((_DWORD)v749)
        memmove(*v22, *((const void **)&v748 + 1), 8 * v749);
      goto LABEL_28;
    }
    if (*(_DWORD *)(v20 + 260) < v749)
    {
      *(_DWORD *)(v20 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v20 + 248, v20 + 264, v23, 8);
    }
    else if ((_DWORD)v24)
    {
      memmove(*v22, *((const void **)&v748 + 1), 8 * v24);
      goto LABEL_26;
    }
    v24 = 0;
LABEL_26:
    if (v24 != v749)
      memcpy((char *)*v22 + 8 * v24, (const void *)(*((_QWORD *)&v748 + 1) + 8 * v24), 8 * v749 - 8 * v24);
LABEL_28:
    *(_DWORD *)(v20 + 256) = v23;
    goto LABEL_29;
  }
  v627 = (void *)(v20 + 264);
  *(_QWORD *)(v20 + 248) = v20 + 264;
  v628 = (_OWORD *)(v20 + 248);
  *(_QWORD *)(v20 + 256) = 0x600000000;
  v629 = v749;
  if ((_DWORD)v749 && v628 != (__int128 *)((char *)&v748 + 8))
  {
    if (v749 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v20 + 248, v20 + 264, v749, 8);
      v630 = v749;
      if (!(_DWORD)v749)
      {
LABEL_918:
        *(_DWORD *)(v20 + 256) = v629;
        goto LABEL_919;
      }
      v627 = *(void **)v628;
    }
    else
    {
      v630 = v749;
    }
    memcpy(v627, *((const void **)&v748 + 1), 8 * v630);
    goto LABEL_918;
  }
LABEL_919:
  *(_DWORD *)(v20 + 312) = v756;
  *(_BYTE *)(v20 + 320) = 1;
LABEL_30:
  if (*((uint64_t **)&v748 + 1) != &v750)
    free(*((void **)&v748 + 1));
  MEMORY[0x1CAA32FB4](v782, 8);
  sub_1C4D8B440(&v779);
  sub_1C4D8B52C((uint64_t *)&v776);
  v25 = **(void ****)(v10 + 8);
  do
  {
    v26 = *v25;
    v25 += 2;
  }
  while (v26 != &llvm::AssumptionCacheTracker::ID);
  v27 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v25 - 1) + 96))(*(v25 - 1), &llvm::AssumptionCacheTracker::ID);
  AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v27, v9);
  LOBYTE(v713[0]) = 0;
  v721 = 0;
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(v10 + 8) + 24), &llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass
    && (v30 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::DominatorTreeWrapperPass::ID)) != 0)
  {
    v31 = (void **)(v30 + 32);
    v32 = v694;
  }
  else
  {
    v31 = v713;
    v713[0] = &v714;
    v713[1] = (void *)0x100000000;
    v720 = 0;
    v715[1] = 0;
    v715[0] = 0;
    v716 = 0;
    v719 = 0;
    v717 = 0;
    v718 = v9;
    sub_1C53BA620((uint64_t)v713, 0);
    v32 = 0;
    v721 = 1;
  }
  v704[1] = 0;
  v704[0] = 0;
  v705 = 0;
  v706 = 0u;
  v707 = 0u;
  v708 = 0;
  v709 = v711;
  v710 = 0x400000000;
  v711[4] = v712;
  v711[5] = 0;
  v712[0] = 0;
  v712[1] = 1;
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze((uint64_t)v704, (uint64_t)v31);
  v694[0] = v695;
  v694[1] = (void *)0x1000000000;
  v695[33] = 0;
  v695[32] = 0;
  v695[34] = v31;
  v695[35] = 0;
  v696 = 1;
  v697 = v701;
  v698 = v701;
  v699 = 8;
  v700 = 0;
  memset(v702, 0, sizeof(v702));
  v703 = 0;
  llvm::ScalarEvolution::ScalarEvolution((uint64_t)v693, (uint64_t)v9, (uint64_t)v21, AssumptionCache, (uint64_t)v31, (uint64_t)v704);
  v679 = (uint64_t *)v9;
  v680 = v16;
  v681 = v17 + 34;
  v682 = v32;
  v683 = v693;
  v684 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(***(_QWORD ***)v9 + 1912), 0);
  IntPtrType = (llvm::ConstantInt *)llvm::DataLayout::getIntPtrType((llvm::DataLayout *)(v17 + 34), **(llvm::LLVMContext ***)v9, 0);
  v34 = ***(_QWORD ***)v9;
  v685 = IntPtrType;
  v686 = (llvm::ConstantInt *)(v34 + 1960);
  v687 = (llvm::GetElementPtrInst *)(v34 + 1912);
  v688 = 0;
  v741 = v743;
  v742 = 0x1000000000;
  v738 = v740;
  v739 = 0x400000000;
  v735 = v737;
  v736 = 0x400000000;
  v732 = v734;
  v733 = 0x400000000;
  v729 = v731;
  v730 = 0x400000000;
  v35 = (_QWORD ***)((char *)v9 + 72);
  for (i = (_QWORD **)*((_QWORD *)v9 + 10); ; i = (_QWORD **)i[1])
  {
    if (i == v35)
      goto LABEL_112;
    v37 = i - 3;
    if (!i)
      v37 = 0;
    v38 = v37[6];
    if (v38 != v37 + 5)
      break;
  }
  while (1)
  {
    if (v38)
      v39 = (uint64_t)(v38 - 3);
    else
      v39 = 0;
    v40 = *(unsigned __int8 *)(v39 + 16);
    if (v40 == 59)
      v41 = v39;
    else
      v41 = 0;
    if (v38 && v40 == 59)
    {
      sub_1C5275E7C((uint64_t)v681, (llvm::AllocaInst *)v41);
      if ((sub_1C5275F4C((uint64_t)&v679, v41) & 1) != 0)
        goto LABEL_96;
      if (*(_BYTE *)(*(_QWORD *)(v41 - 32) + 16) == 16
        && ((v42 = *(_QWORD *)(v41 + 40), (v43 = *(_QWORD *)(*(_QWORD *)(v42 + 56) + 80)) != 0)
          ? (v44 = v43 - 24)
          : (v44 = 0),
            v42 == v44 && (*(_WORD *)(v41 + 18) & 0x40) == 0))
      {
        v45 = v742;
        if (v742 >= (unint64_t)HIDWORD(v742))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v741, (uint64_t)v743, v742 + 1, 8);
          v45 = v742;
        }
        *((_QWORD *)v741 + v45) = v41;
        v46 = &v742;
      }
      else
      {
        v54 = v739;
        if (v739 >= (unint64_t)HIDWORD(v739))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v738, (uint64_t)v740, v739 + 1, 8);
          v54 = v739;
        }
        *((_QWORD *)v738 + v54) = v41;
        v46 = &v739;
      }
      goto LABEL_95;
    }
    if (v38 && v40 == 29)
    {
      v47 = llvm::BasicBlock::getTerminatingMustTailCall(*(llvm::BasicBlock **)(v39 + 40));
      v48 = v733;
      if (v47)
      {
        v49 = v47;
        if (v733 >= (unint64_t)HIDWORD(v733))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v732, (uint64_t)v734, v733 + 1, 8);
          v48 = v733;
        }
        *((_QWORD *)v732 + v48) = v49;
      }
      else
      {
        if (v733 >= (unint64_t)HIDWORD(v733))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v732, (uint64_t)v734, v733 + 1, 8);
          v48 = v733;
        }
        *((_QWORD *)v732 + v48) = v39;
      }
      v46 = &v733;
      goto LABEL_95;
    }
    v50 = v40 == 84 ? v39 : 0;
    if (v38 && v40 == 84)
    {
      v51 = *(_QWORD *)(v50 - 32);
      if (v51
        && !*(_BYTE *)(v51 + 16)
        && *(_QWORD *)(v51 + 24) == *(_QWORD *)(v50 + 72)
        && ((v52 = *(_QWORD *)(v50 + 64)) != 0 && *(char *)(v52 + 17) < 0
         || llvm::CallBase::hasFnAttrOnCalledFunction(v50, 47)))
      {
        v53 = v730;
        if (v730 >= (unint64_t)HIDWORD(v730))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v729, (uint64_t)v731, v730 + 1, 8);
          v53 = v730;
        }
        *((_QWORD *)v729 + v53) = v50;
LABEL_90:
        v46 = &v730;
LABEL_95:
        ++*(_DWORD *)v46;
      }
    }
    else
    {
      if (v38 && v40 == 94)
      {
        v55 = v730;
        if (v730 >= (unint64_t)HIDWORD(v730))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v729, (uint64_t)v731, v730 + 1, 8);
          v55 = v730;
        }
        *((_QWORD *)v729 + v55) = v39;
        goto LABEL_90;
      }
      if (v40 == 84)
      {
        v58 = *(_QWORD *)(v39 - 32);
        if (v58)
        {
          if (!*(_BYTE *)(v58 + 16)
            && *(_QWORD *)(v58 + 24) == *(_QWORD *)(v39 + 72)
            && (*(_BYTE *)(v58 + 33) & 0x20) != 0
            && *(_DWORD *)(*(v38 - 7) + 36) == 151)
          {
            v631 = "gcroot intrinsic not compatible with safestack attribute";
            goto LABEL_910;
          }
        }
      }
    }
LABEL_96:
    v38 = (_QWORD *)v38[1];
    v56 = i - 3;
    if (!i)
      v56 = 0;
    if (v38 == v56 + 5)
      break;
LABEL_103:
    if (i == v35)
      goto LABEL_112;
  }
  while (1)
  {
    i = (_QWORD **)i[1];
    if (i == v35)
      break;
    v57 = i - 3;
    if (!i)
      v57 = 0;
    v38 = v57[6];
    if (v38 != v57 + 5)
      goto LABEL_103;
  }
LABEL_112:
  if ((*((_WORD *)v9 + 9) & 1) == 0)
  {
    v59 = *((_QWORD *)v9 + 11);
    goto LABEL_114;
  }
  llvm::Function::BuildLazyArguments(v9);
  v59 = *((_QWORD *)v9 + 11);
  if ((*((_WORD *)v9 + 9) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(v9);
    v60 = (_QWORD **)*((_QWORD *)v9 + 11);
  }
  else
  {
LABEL_114:
    v60 = (_QWORD **)v59;
  }
  v61 = &v60[5 * *((_QWORD *)v9 + 12)];
  if ((_QWORD **)v59 != v61)
  {
    v62 = (uint64_t)v681;
    v63 = v59;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)v59 + 8) == 15)
      {
        v64 = *(_QWORD *)(v59 + 24);
        v67 = *(_QWORD *)(v64 + 112);
        v65 = (llvm::AttributeList *)(v64 + 112);
        v66 = v67;
        if (v67)
        {
          v68 = *(_DWORD *)(v59 + 32);
          if ((v68 + 2) < *(_DWORD *)(v66 + 8))
          {
            v69 = *(_QWORD *)(v66 + 8 * (v68 + 2) + 40);
            if (v69)
            {
              if ((*(_BYTE *)(v69 + 20) & 0x20) != 0)
              {
                ParamByValType = llvm::AttributeList::getParamByValType(v65, v68);
                sub_1C4768AD0(v62, ParamByValType);
                if ((_DWORD)v71 == 1)
                if ((sub_1C5275F4C((uint64_t)&v679, v59) & 1) == 0)
                {
                  v72 = v736;
                  if (v736 >= (unint64_t)HIDWORD(v736))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v735, (uint64_t)v737, v736 + 1, 8);
                    v72 = v736;
                  }
                  *((_QWORD *)v735 + v72) = v63;
                  LODWORD(v736) = v736 + 1;
                }
              }
            }
          }
        }
      }
      v59 += 40;
      v63 += 40;
    }
    while ((_QWORD **)v59 != v61);
  }
  v73 = v742 | v739 | v736 | v730;
  v74 = v73 == 0;
  if (!v73)
    goto LABEL_548;
  v75 = v679;
  v76 = (_QWORD **)v679[10];
  if (v76)
    v77 = v76 - 3;
  else
    v77 = 0;
  v78 = (uint64_t)(v77 + 5);
  for (j = (uint64_t)v77[6]; j != v78; j = *(_QWORD *)(j + 8))
  {
    v80 = j - 24;
    if (!j)
      v80 = 0;
    if (*(_BYTE *)(v80 + 16) != 83)
    {
      v81 = *(unsigned __int8 *)(j - 8) - 38;
      v82 = v81 > 0x38;
      v83 = (1 << v81) & 0x100060000000001;
      if (v82 || v83 == 0)
        v78 = j;
      else
        v78 = *(_QWORD *)(j + 8);
      break;
    }
  }
  sub_1C4D8ADA0((uint64_t)&v722, v77, v78, 0, 0, 0);
  if ((*((_BYTE *)v75 + 23) & 0x20) != 0)
  {
    v85 = **(_QWORD **)*v75;
    *(_QWORD *)&v748 = v75;
    v86 = *(_DWORD *)(v85 + 2496);
    if (!v86)
    {
      v399 = 0;
      goto LABEL_573;
    }
    v87 = *(_QWORD *)(v85 + 2480);
    v88 = v86 - 1;
    v89 = v88 & ((v75 >> 4) ^ (v75 >> 9));
    v90 = (uint64_t **)(v87 + 40 * v89);
    v91 = *v90;
    if (*v90 != v75)
    {
      v92 = 0;
      v93 = 1;
      while (v91 != (uint64_t *)-4096)
      {
        if (v92)
          v94 = 0;
        else
          v94 = v91 == (uint64_t *)-8192;
        if (v94)
          v92 = v90;
        v95 = v89 + v93++;
        v89 = v95 & v88;
        v90 = (uint64_t **)(v87 + 40 * v89);
        v91 = *v90;
        if (*v90 == v75)
          goto LABEL_156;
      }
      if (v92)
        v399 = v92;
      else
        v399 = v90;
LABEL_573:
      v90 = (uint64_t **)sub_1C541AB24(v85 + 2480, (uint64_t)&v748, (uint64_t *)&v748, v399);
      v400 = (uint64_t *)v748;
      v90[3] = 0;
      v90[4] = 0;
      *v90 = v400;
      v90[1] = (uint64_t *)(v90 + 3);
      v90[2] = (uint64_t *)0x100000000;
    }
LABEL_156:
    v96 = *((unsigned int *)v90 + 4);
    if ((_DWORD)v96)
    {
      v97 = v90[1] + 1;
      v98 = 16 * v96;
      while (*((_DWORD *)v97 - 2))
      {
        v97 += 2;
        v98 -= 16;
        if (!v98)
          goto LABEL_160;
      }
      v128 = *v97;
      if (*v97)
      {
        v129 = *(_QWORD *)(v128 + 16);
        v130 = (uint64_t *)(v129 & 0xFFFFFFFFFFFFFFF8);
        if ((v129 & 4) != 0)
          v130 = (uint64_t *)*v130;
        Impl = (unsigned __int8 *)llvm::DILocation::getImpl(v130, *(_DWORD *)(v128 + 28), 0, v128, 0, 0, 0, 1);
        v132 = 0;
        v689 = Impl;
        if (Impl)
        {
          llvm::MetadataTracking::track((uint64_t)&v689, Impl, 2);
          v132 = v689;
        }
        sub_1C4774EF4((uint64_t)&v722, 0, (uint64_t)v132);
        if (v689)
          llvm::MetadataTracking::untrack((uint64_t)&v689, v689);
      }
    }
  }
LABEL_160:
  if (byte_1ED7FF6B0)
  {
    v143 = v75[5];
    v100 = v684;
    v144 = (uint64_t **)llvm::PointerType::get(v684, 0);
    v145 = (uint64_t **)sub_1C6210688(v143, "__safestack_pointer_address", 0x1BuLL, 0, v144);
    LOWORD(v751) = 257;
    v99 = sub_1C4774778((uint64_t *)&v722, v145, v146, 0, 0, (uint64_t)&v748, 0);
  }
  else
  {
    v99 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v680 + 808))(v680, &v722);
    v100 = v684;
  }
  v688 = v99;
  v776 = "unsafe_stack_ptr";
  LOWORD(v780) = 259;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v725 + 56) + 40) + 272, (uint64_t)v100);
  v101 = v99;
  v103 = v102;
  v104 = (char *)operator new(0x60uLL);
  v105 = v104;
  *((_QWORD *)v104 + 2) = 0;
  *((_QWORD *)v104 + 3) = v104 + 32;
  v655 = (uint64_t ***)(v104 + 32);
  LOWORD(v751) = 257;
  *((_QWORD *)v104 + 4) = v100;
  *((_QWORD *)v104 + 5) = 0;
  v670 = (uint64_t *)(v104 + 40);
  v671 = v101;
  *((_WORD *)v104 + 24) = 60;
  *((_DWORD *)v104 + 13) = 1;
  *(_OWORD *)(v104 + 56) = 0u;
  *(_OWORD *)(v104 + 72) = 0u;
  *((_DWORD *)v104 + 22) = 0;
  *(_QWORD *)v104 = v101;
  *((_QWORD *)v104 + 1) = 0;
  if (v101)
  {
    v106 = (_QWORD *)(v101 + 8);
    v107 = *(_QWORD *)(v101 + 8);
    *((_QWORD *)v104 + 1) = v107;
    if (v107)
      *(_QWORD *)(v107 + 16) = v104 + 8;
    *((_QWORD *)v104 + 2) = v106;
    *v106 = v104;
  }
  *((_WORD *)v104 + 25) = 2 * (v103 & 0x3F);
  v104[92] = 1;
  llvm::Value::setName(v655, (uint64_t)&v748);
  (*(void (**)(uint64_t, uint64_t ***, void **, uint64_t, uint64_t))(*(_QWORD *)v728 + 16))(v728, v655, &v776, v725, v726);
  if (v723)
  {
    v136 = (char *)v722;
    v137 = (char *)v722 + 16 * v723;
    v138 = (unsigned __int8 **)(v105 + 80);
    do
    {
      v139 = *(_DWORD *)v136;
      v140 = (unsigned __int8 *)*((_QWORD *)v136 + 1);
      if (v140)
      {
        if (!v139)
        {
          v792[0] = *((uint64_t **)v136 + 1);
          llvm::MetadataTracking::track((uint64_t)v792, v140, 2);
          v141 = *v138;
          goto LABEL_211;
        }
      }
      else
      {
        v141 = *v138;
        if (!*v138 && (v105[55] & 0x20) == 0)
          goto LABEL_208;
        if (!v139)
        {
          v792[0] = 0;
LABEL_211:
          if (v141)
            llvm::MetadataTracking::untrack((uint64_t)(v105 + 80), v141);
          v142 = (unsigned __int8 *)v792[0];
          *v138 = (unsigned __int8 *)v792[0];
          if (v142)
            llvm::MetadataTracking::retrack((uint64_t)v792, v142, (uint64_t)(v105 + 80));
          goto LABEL_208;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v655, *(_DWORD *)v136, (llvm::MDNode *)v140);
LABEL_208:
      v136 += 16;
    }
    while (v136 != v137);
  }
  v108 = v75[14];
  v643 = v74;
  if (!v108 || (*(_BYTE *)(v108 + 19) & 0x1C) == 0)
  {
    v127 = 0;
    goto LABEL_256;
  }
  v109 = v680;
  v110 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v680 + 760))(v680, &v722);
  if (v110)
  {
    v111 = v110;
    v776 = "StackGuard";
    LOWORD(v780) = 259;
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v725 + 56) + 40) + 272, (uint64_t)v100);
    v113 = v112;
    v114 = (char *)operator new(0x60uLL);
    v115 = v114;
    *((_QWORD *)v114 + 1) = 0;
    v116 = v114 + 32;
    *((_QWORD *)v114 + 2) = 0;
    *((_QWORD *)v114 + 3) = v114 + 32;
    LOWORD(v751) = 257;
    *((_QWORD *)v114 + 4) = v100;
    *((_QWORD *)v114 + 5) = 0;
    *((_WORD *)v114 + 24) = 60;
    *((_DWORD *)v114 + 13) = 1;
    *(_OWORD *)(v114 + 56) = 0u;
    *(_OWORD *)(v114 + 72) = 0u;
    *((_DWORD *)v114 + 22) = 0;
    *(_QWORD *)v114 = v111;
    v119 = *(_QWORD *)(v111 + 8);
    v118 = (_QWORD *)(v111 + 8);
    v117 = v119;
    *((_QWORD *)v114 + 1) = v119;
    if (v119)
      *(_QWORD *)(v117 + 16) = v114 + 8;
    *((_QWORD *)v114 + 2) = v118;
    *v118 = v114;
    *((_WORD *)v114 + 25) = 2 * (v113 & 0x3F);
    v114[92] = 1;
    llvm::Value::setName((uint64_t ***)v114 + 4, (uint64_t)&v748);
    (*(void (**)(uint64_t, _QWORD *, void **, uint64_t, uint64_t))(*(_QWORD *)v728 + 16))(v728, v116, &v776, v725, v726);
    if (v723)
    {
      v120 = (char *)v722;
      v121 = (char *)v722 + 16 * v723;
      v122 = (unsigned __int8 **)(v115 + 80);
      do
      {
        v123 = *(_DWORD *)v120;
        v124 = (unsigned __int8 *)*((_QWORD *)v120 + 1);
        if (v124)
        {
          if (!v123)
          {
            v792[0] = *((uint64_t **)v120 + 1);
            llvm::MetadataTracking::track((uint64_t)v792, v124, 2);
            v125 = *v122;
            goto LABEL_184;
          }
        }
        else
        {
          v125 = *v122;
          if (!*v122 && (v115[55] & 0x20) == 0)
            goto LABEL_181;
          if (!v123)
          {
            v792[0] = 0;
LABEL_184:
            if (v125)
              llvm::MetadataTracking::untrack((uint64_t)(v115 + 80), v125);
            v126 = (unsigned __int8 *)v792[0];
            *v122 = (unsigned __int8 *)v792[0];
            if (v126)
              llvm::MetadataTracking::retrack((uint64_t)v792, v126, (uint64_t)(v115 + 80));
            goto LABEL_181;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)v116, *(_DWORD *)v120, (llvm::MDNode *)v124);
LABEL_181:
        v120 += 16;
      }
      while (v120 != v121);
    }
  }
  else
  {
    v133 = (uint64_t *)v75[5];
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v109 + 768))(v109, v133);
    Declaration = llvm::Intrinsic::getDeclaration(v133, 285, 0, 0);
    if (Declaration)
      v135 = *(uint64_t ***)(Declaration + 24);
    else
      v135 = 0;
    LOWORD(v751) = 257;
    v116 = (_QWORD *)sub_1C4774778((uint64_t *)&v722, v135, Declaration, 0, 0, (uint64_t)&v748, 0);
  }
  LOWORD(v751) = 257;
  v127 = sub_1C486A5CC((uint64_t *)&v722, v100, 0, (uint64_t)&v748);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v725 + 56) + 40) + 272, *v116);
  v148 = v147;
  v149 = (char *)operator new(0x80uLL);
  v150 = v149;
  *((_DWORD *)v149 + 21) = *((_DWORD *)v149 + 21) & 0x38000000 | 2;
  *(_QWORD *)v149 = 0;
  *((_QWORD *)v149 + 2) = 0;
  *((_QWORD *)v149 + 1) = 0;
  *((_QWORD *)v149 + 5) = 0;
  *((_QWORD *)v149 + 6) = 0;
  *((_QWORD *)v149 + 4) = 0;
  v151 = (unsigned __int8 ***)(v149 + 32);
  *((_QWORD *)v149 + 8) = **(_QWORD **)*v116 + 1576;
  v152 = (llvm::Value *)(v149 + 64);
  *((_QWORD *)v149 + 3) = v149 + 64;
  *((_QWORD *)v149 + 7) = v149 + 64;
  *((_QWORD *)v149 + 9) = 0;
  v149[80] = 61;
  v149[81] = 0;
  *((_WORD *)v149 + 41) = 0;
  *((_DWORD *)v149 + 21) = 2;
  *(_OWORD *)(v149 + 88) = 0u;
  *(_OWORD *)(v149 + 104) = 0u;
  *((_DWORD *)v149 + 30) = 0;
  *(_QWORD *)v149 = v116;
  v153 = v116 + 1;
  v154 = v116[1];
  *((_QWORD *)v149 + 1) = v154;
  if (v154)
    *(_QWORD *)(v154 + 16) = v149 + 8;
  *((_QWORD *)v149 + 2) = v153;
  *v153 = v149;
  if (*((_QWORD *)v149 + 4))
  {
    **((_QWORD **)v149 + 6) = *((_QWORD *)v149 + 5);
    v633 = *((_QWORD *)v149 + 5);
    if (v633)
      *(_QWORD *)(v633 + 16) = *((_QWORD *)v149 + 6);
  }
  *v151 = v127;
  if (v127)
  {
    v155 = (unsigned __int8 ****)(v127 + 1);
    v156 = v127[1];
    *((_QWORD *)v149 + 5) = v156;
    if (v156)
      *((_QWORD *)v156 + 2) = v149 + 40;
    *((_QWORD *)v149 + 6) = v155;
    *v155 = v151;
  }
  *((_WORD *)v149 + 41) = 2 * (v148 & 0x3F);
  v149[124] = 1;
  LOWORD(v751) = 257;
  (*(void (**)(uint64_t, llvm::Value *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v728 + 16))(v728, v152, &v748, v725, v726);
  v665 = v127;
  if (v723)
  {
    v469 = (char *)v722;
    v470 = (char *)v722 + 16 * v723;
    v471 = (unsigned __int8 **)(v150 + 112);
    do
    {
      v472 = *(_DWORD *)v469;
      v473 = (unsigned __int8 *)*((_QWORD *)v469 + 1);
      if (v473)
      {
        if (!v472)
        {
          v776 = (void *)*((_QWORD *)v469 + 1);
          llvm::MetadataTracking::track((uint64_t)&v776, v473, 2);
          v474 = *v471;
          goto LABEL_704;
        }
      }
      else
      {
        v474 = *v471;
        if (!*v471 && (v150[87] & 0x20) == 0)
          goto LABEL_701;
        if (!v472)
        {
          v776 = 0;
LABEL_704:
          if (v474)
            llvm::MetadataTracking::untrack((uint64_t)(v150 + 112), v474);
          v475 = (unsigned __int8 *)v776;
          *v471 = (unsigned __int8 *)v776;
          if (v475)
            llvm::MetadataTracking::retrack((uint64_t)&v776, v475, (uint64_t)(v150 + 112));
          v127 = v665;
          goto LABEL_701;
        }
      }
      llvm::Value::setMetadata(v152, *(_DWORD *)v469, (llvm::MDNode *)v473);
LABEL_701:
      v469 += 16;
    }
    while (v469 != v470);
  }
  if (!(_DWORD)v733)
    goto LABEL_256;
  v659 = (uint64_t)v116;
  v157 = (uint64_t *)v732;
  v656 = (uint64_t *)((char *)v732 + 8 * v733);
  v652 = (uint64_t)v682;
  v158 = (uint64_t *)(v127 + 1);
  while (2)
  {
    v159 = v75;
    v160 = *v157;
    sub_1C4773D54((uint64_t)&v776, *v157, 0, 0, 0);
    v793 = 257;
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v782 + 56) + 40) + 272, (uint64_t)v100);
    v162 = v161;
    v163 = (char *)operator new(0x60uLL);
    v164 = v163;
    v165 = (llvm::Value *)(v163 + 32);
    *((_QWORD *)v163 + 2) = 0;
    *((_QWORD *)v163 + 3) = v163 + 32;
    LOWORD(v751) = 257;
    *((_QWORD *)v163 + 4) = v100;
    *((_QWORD *)v163 + 5) = 0;
    *((_WORD *)v163 + 24) = 60;
    *((_DWORD *)v163 + 13) = 1;
    *(_OWORD *)(v163 + 56) = 0u;
    *(_OWORD *)(v163 + 72) = 0u;
    *((_DWORD *)v163 + 22) = 0;
    *(_QWORD *)v163 = v665;
    *((_QWORD *)v163 + 1) = 0;
    if (v665)
    {
      v166 = *v158;
      *((_QWORD *)v163 + 1) = *v158;
      if (v166)
        *(_QWORD *)(v166 + 16) = v163 + 8;
      *((_QWORD *)v163 + 2) = v158;
      *v158 = (uint64_t)v163;
    }
    *((_WORD *)v163 + 25) = 2 * (v162 & 0x3F);
    v163[92] = 1;
    llvm::Value::setName((uint64_t ***)v163 + 4, (uint64_t)&v748);
    (*(void (**)(uint64_t, llvm::Value *, uint64_t **, uint64_t, uint64_t))(*(_QWORD *)v785 + 16))(v785, v165, v792, v782, v783);
    if ((_DWORD)v777)
    {
      v175 = (char *)v776;
      v176 = (char *)v776 + 16 * v777;
      v177 = (unsigned __int8 **)(v164 + 80);
      do
      {
        v178 = *(_DWORD *)v175;
        v179 = (unsigned __int8 *)*((_QWORD *)v175 + 1);
        if (v179)
        {
          if (!v178)
          {
            __dst.__r_.__value_.__r.__words[0] = *((_QWORD *)v175 + 1);
            v645 = v176;
            v638 = v177;
            llvm::MetadataTracking::track((uint64_t)&__dst, v179, 2);
            v177 = v638;
            v176 = v645;
            v180 = *v638;
            goto LABEL_252;
          }
        }
        else
        {
          v180 = *v177;
          if (!*v177 && (v164[55] & 0x20) == 0)
            goto LABEL_249;
          if (!v178)
          {
            __dst.__r_.__value_.__r.__words[0] = 0;
LABEL_252:
            if (v180)
            {
              v646 = v176;
              v639 = v177;
              llvm::MetadataTracking::untrack((uint64_t)v177, v180);
              v177 = v639;
              v176 = v646;
            }
            v181 = (unsigned __int8 *)__dst.__r_.__value_.__r.__words[0];
            *v177 = (unsigned __int8 *)__dst.__r_.__value_.__r.__words[0];
            if (!v181)
              goto LABEL_249;
            v644 = v176;
            v637 = v177;
            llvm::MetadataTracking::retrack((uint64_t)&__dst, v181, (uint64_t)v177);
            goto LABEL_248;
          }
        }
        v644 = v176;
        v637 = v177;
        llvm::Value::setMetadata(v165, *(_DWORD *)v175, (llvm::MDNode *)v179);
LABEL_248:
        v177 = v637;
        v176 = v644;
LABEL_249:
        v175 += 16;
      }
      while (v175 != v176);
    }
    LOWORD(v751) = 257;
    v167 = (llvm::Value *)sub_1C4774B48((uint64_t)&v776, 33, v659, (uint64_t)v165, (uint64_t)&v748);
    v168 = sub_1C61DA3B4(1);
    v169 = sub_1C61DA3B4(0);
    v792[0] = *(uint64_t **)*v159;
    *(_QWORD *)&v748 = __PAIR64__(v169, v168);
    BranchWeights = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights(v792, (uint64_t)&v748, 2);
    v171 = (uint64_t *)v160;
    v75 = v159;
    v172 = sub_1C5EBFBC0(v167, v171, 1, BranchWeights, v652, 0, 0, 0);
    sub_1C4773D54((uint64_t)&v748, (uint64_t)v172, 0, 0, 0);
    v173 = (uint64_t **)sub_1C6210688(v159[5], "__stack_chk_fail", 0x10uLL, 0, (uint64_t **)(*(_QWORD *)v784 + 1576));
    v793 = 257;
    sub_1C4774778((uint64_t *)&v748, v173, v174, 0, 0, (uint64_t)v792, 0);
    if ((uint64_t *)v748 != &v749)
      free((void *)v748);
    if (v776 != &v778)
      free(v776);
    if (++v157 != v656)
      continue;
    break;
  }
  v127 = v665;
LABEL_256:
  v182 = v742;
  v183 = v736;
  v666 = (uint64_t *)v655;
  if (v742 | v736)
  {
    v394 = (llvm::AllocaInst **)v741;
    v395 = (std::string::size_type *)v735;
    llvm::DIBuilder::DIBuilder((uint64_t)v792, (_QWORD *)v75[5], 1, 0);
    v677 = v394;
    llvm::StackLifetime::StackLifetime((llvm::StackLifetime *)&v776, (uint64_t)v75, v394, v182, 0);
    v396 = atomic_load((unsigned __int8 *)&qword_1ED7FF5E0);
    if ((v396 & 1) == 0 && __cxa_guard_acquire((__guard *)&qword_1ED7FF5E0))
    {
      qword_1ED7FF5E8 = (uint64_t)&unk_1ED7FF5F8;
      qword_1ED7FF5F0 = 0x600000000;
      sub_1C4765AA4((char *)&qword_1ED7FF5E8, 1uLL, -1);
      dword_1ED7FF628 = 1;
      *(_QWORD *)(qword_1ED7FF5E8 + 8 * qword_1ED7FF5F0 - 8) &= 1uLL;
      __cxa_atexit((void (*)(void *))sub_1C6210720, &qword_1ED7FF5E8, &dword_1C475E000);
      __cxa_guard_release((__guard *)&qword_1ED7FF5E0);
    }
    if (byte_1ED7FF770)
      llvm::StackLifetime::run((llvm::StackLifetime *)&v776);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E814A5A0;
    p_dst = &__dst;
    v773 = &v770;
    v770 = &off_1E814A5A0;
    sub_1C6210754(&v748, (uint64_t)&v781, &v770);
    v397 = v773;
    if (v773 == &v770)
    {
      v398 = (void (**)(void **))((char *)v770 + 32);
      v397 = &v770;
    }
    else
    {
      if (!v773)
        goto LABEL_597;
      v398 = (void (**)(void **))((char *)*v773 + 40);
    }
    (*v398)(v397);
LABEL_597:
    v407 = p_dst;
    if (p_dst == &__dst)
    {
      v408 = (void (**)(std::string *))(__dst.__r_.__value_.__r.__words[0] + 32);
      v407 = &__dst;
    }
    else
    {
      if (!p_dst)
        goto LABEL_602;
      v408 = (void (**)(std::string *))(p_dst->__r_.__value_.__r.__words[0] + 40);
    }
    (*v408)(v407);
LABEL_602:
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v748;
    v409 = (std::string::__raw *)&__dst.__r_.__value_.__r.__words[2];
    v651 = v182;
    if (v752)
    {
      if (v752 == &v749)
      {
        v747 = (std::string *)&__dst.__r_.__value_.__r.__words[2];
        (*(void (**)(void))(*v752 + 24))();
      }
      else
      {
        v747 = (std::string *)(*(uint64_t (**)(void))(*v752 + 16))();
      }
    }
    else
    {
      v747 = 0;
    }
    v770 = v753;
    v771 = v754;
    v410 = &v772;
    if (v757)
    {
      if (v757 == &v755)
      {
        v775 = &v772;
        (*(void (**)(void))(*v757 + 24))();
      }
      else
      {
        v775 = (uint64_t *)(*(uint64_t (**)(void))(*v757 + 16))();
      }
    }
    else
    {
      v775 = 0;
    }
LABEL_612:
    v411 = (uint64_t ****)__dst.__r_.__value_.__r.__words[0];
    while (v411 != v770)
    {
      v412 = *v411;
      v413 = (*v411)[-4 * (*((_DWORD *)*v411 + 5) & 0x7FFFFFF) + 4];
      v414 = *((unsigned __int8 *)v413 + 16);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)((*v411)[5] + 5), *v411);
      v415 = v412[3];
      v416 = v412[4];
      *v416 = (uint64_t *)v415;
      v415[1] = (uint64_t *)v416;
      v412[3] = 0;
      v412[4] = 0;
      llvm::Value::deleteValue((llvm::Value *)v412);
      if (v413)
        v417 = v414 >= 0x1C;
      else
        v417 = 0;
      if (v417 && !v413[1])
      {
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v413[5] + 5), (uint64_t ***)v413);
        v418 = v413[3];
        v419 = v413[4];
        *v419 = (uint64_t)v418;
        v418[1] = (uint64_t)v419;
        v413[3] = 0;
        v413[4] = 0;
        llvm::Value::deleteValue((llvm::Value *)v413);
      }
      while (1)
      {
        v411 = (uint64_t ****)(__dst.__r_.__value_.__r.__words[0] + 8);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v411;
        if (v411 == (uint64_t ****)__dst.__r_.__value_.__l.__size_)
          break;
        __p[0] = *v411;
        if (!v747)
        {
          sub_1C485C2F0();
          goto LABEL_907;
        }
        if ((*(unsigned int (**)(std::string *, void **))(v747->__r_.__value_.__r.__words[0] + 48))(v747, __p))
        {
          goto LABEL_612;
        }
      }
    }
    if (v775 == &v772)
    {
      v420 = 4;
    }
    else
    {
      if (!v775)
        goto LABEL_630;
      v420 = 5;
      v410 = v775;
    }
    (*(void (**)(uint64_t *))(*v410 + 8 * v420))(v410);
LABEL_630:
    if (v747 == (std::string *)&__dst.__r_.__value_.__r.__words[2])
    {
      v421 = 4;
    }
    else
    {
      if (!v747)
      {
LABEL_635:
        sub_1C619047C(&v748);
        LOBYTE(v748) = 4;
        *((_QWORD *)&v748 + 1) = &v750;
        v749 = 0x1000000000;
        v763 = &v765;
        v764 = 0x800000000;
        v766 = 0u;
        v767 = 0;
        v768 = 0u;
        v769 = 0;
        if (v127)
        {
          v422 = (uint64_t)v681;
          llvm::DataLayout::getAlignment((uint64_t)v681, (uint64_t)v127[8]);
          v424 = __clz(1 << *((_WORD *)v127 + 9)) ^ 0x3F;
          v425 = v423 <= v424 ? v424 : v423;
          v426 = sub_1C5275E7C(v422, (llvm::AllocaInst *)v127);
          sub_1C496F858((uint64_t)&__dst, v782, 1);
          llvm::safestack::StackLayout::addObject((uint64_t *)&v748, (uint64_t)v127, v426, v425, (uint64_t)&__dst);
          if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[2])
            free(__dst.__r_.__value_.__l.__data_);
        }
        v648 = (uint64_t ***)v75;
        v649 = v395;
        v668 = (uint64_t *)v127;
        if ((_DWORD)v183)
        {
          v443 = (uint64_t)v681;
          v444 = 8 * v183;
          v445 = (uint64_t *)v649;
          do
          {
            v446 = *v445;
            v447 = llvm::AttributeList::getParamByValType((llvm::AttributeList *)(*(_QWORD *)(*v445 + 24) + 112), *(_DWORD *)(*v445 + 32));
            sub_1C4768AD0(v443, v447);
            v450 = v449;
            if ((_DWORD)v448 == 1)
            if ((unint64_t)(v450 + 7) >> 3 <= 1)
              LODWORD(v451) = 1;
            else
              v451 = (unint64_t)(v450 + 7) >> 3;
            llvm::DataLayout::getAlignment(v443, v447);
            v453 = v452;
            v454 = v452;
            ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(*(_QWORD *)(v446 + 24) + 112), *(_DWORD *)(v446 + 32));
            v456 = ParamAlignment;
            if (v454 > ParamAlignment)
              v456 = v454;
            if ((ParamAlignment & 0xFF00) != 0)
              v457 = v456;
            else
              v457 = v453;
            sub_1C496F858((uint64_t)&__dst, v782, 1);
            llvm::safestack::StackLayout::addObject((uint64_t *)&v748, v446, v451, v457, (uint64_t)&__dst);
            if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[2])
              free(__dst.__r_.__value_.__l.__data_);
            ++v445;
            v444 -= 8;
          }
          while (v444);
        }
        if ((_DWORD)v651)
        {
          v458 = (uint64_t)v681;
          v459 = 8 * v651;
          v460 = v677;
          do
          {
            v461 = *v460;
            v462 = *((_QWORD *)*v460 + 8);
            v463 = sub_1C5275E7C(v458, *v460);
            if (v463 <= 1)
              v464 = 1;
            else
              v464 = v463;
            llvm::DataLayout::getAlignment(v458, v462);
            v466 = __clz(1 << *((_WORD *)v461 + 9)) ^ 0x3F;
            if (v465 <= v466)
              v467 = v466;
            else
              v467 = v465;
            LiveRange = &qword_1ED7FF5E8;
            if (byte_1ED7FF770)
              LiveRange = (uint64_t *)llvm::StackLifetime::getLiveRange((llvm::StackLifetime *)&v776, v461);
            llvm::safestack::StackLayout::addObject((uint64_t *)&v748, (uint64_t)v461, v464, v467, (uint64_t)LiveRange);
            ++v460;
            v459 -= 8;
          }
          while (v459);
        }
        llvm::safestack::StackLayout::computeLayout((llvm::safestack::StackLayout *)&v748);
        v427 = v748;
        v75 = (uint64_t *)v655;
        v428 = v649;
        if (v748 > 4uLL)
        {
          v429 = 0;
          v430 = *((_QWORD *)v105 + 8);
          if (v430)
            v431 = v430 == *((_QWORD *)v105 + 9) + 40;
          else
            v431 = 1;
          if (v431)
            v432 = 0;
          else
            v432 = v430 - 24;
          v725 = *(_QWORD *)(v432 + 40);
          v726 = v432 + 24;
          v433 = *(unsigned __int8 **)(v432 + 48);
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v433;
          if (v433)
          {
            llvm::MetadataTracking::track((uint64_t)&__dst, v433, 2);
            v429 = __dst.__r_.__value_.__r.__words[0];
          }
          sub_1C4774EF4((uint64_t)&v722, 0, v429);
          if (__dst.__r_.__value_.__r.__words[0])
            llvm::MetadataTracking::untrack((uint64_t)&__dst, (unsigned __int8 *)__dst.__r_.__value_.__l.__data_);
          v434 = v685;
          v746 = 257;
          v435 = sub_1C4773E38((uint64_t *)&v722, 47, (unsigned __int8 *)v655, (uint64_t)v685, (uint64_t)&__dst);
          v436 = llvm::ConstantInt::get(v434, -1 << v427, 0);
          v774 = 257;
          v437 = (unsigned __int8 *)sub_1C4D89BCC((uint64_t)&v722, v435, (uint64_t)v436, (uint64_t)&v770);
          v692 = 257;
          v75 = (uint64_t *)sub_1C4773E38((uint64_t *)&v722, 48, v437, (uint64_t)v684, (uint64_t)__p);
        }
        v438 = 0;
        v439 = v75[4];
        if (v439)
          v440 = v439 == v75[5] + 40;
        else
          v440 = 1;
        if (v440)
          v441 = 0;
        else
          v441 = v439 - 24;
        v725 = *(_QWORD *)(v441 + 40);
        v726 = v441 + 24;
        v442 = *(unsigned __int8 **)(v441 + 48);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v442;
        if (v442)
        {
          llvm::MetadataTracking::track((uint64_t)&__dst, v442, 2);
          v438 = __dst.__r_.__value_.__r.__words[0];
        }
        sub_1C4774EF4((uint64_t)&v722, 0, v438);
        if (__dst.__r_.__value_.__r.__words[0])
        {
          llvm::MetadataTracking::untrack((uint64_t)&__dst, (unsigned __int8 *)__dst.__r_.__value_.__l.__data_);
          if (!v668)
          {
LABEL_665:
            if ((_DWORD)v183)
              goto LABEL_729;
LABEL_726:
            v491 = v677;
            if (!(_DWORD)v651)
            {
LABEL_727:
              if ((_DWORD)v749)
                LODWORD(v410) = (*(_DWORD *)(*((_QWORD *)&v748 + 1) + 80 * v749 - 76) + 15) & 0xFFFFFFF0;
              else
                LODWORD(v410) = 0;
              v412 = v648;
              v593 = **v648;
              v414 = (uint64_t)&v772;
              v770 = &v772;
              v771 = 0x200000000;
              v409 = (std::string::__raw *)llvm::MDString::get(v593, "unsafe-stack-size", 0x11uLL);
              v594 = v771;
              if (v771 >= HIDWORD(v771))
              {
LABEL_907:
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v770, v414, v594 + 1, 8);
                LODWORD(v594) = v771;
              }
              *((_QWORD *)v770 + v594) = v409;
              LODWORD(v771) = v771 + 1;
              v595 = v686;
              v596 = llvm::ConstantInt::get(v686, v410 & 0xFFFFFFF0, 0);
              v598 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v596, v597);
              v599 = v771;
              if (v771 >= HIDWORD(v771))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v770, v414, v771 + 1, 8);
                v599 = v771;
              }
              *((_QWORD *)v770 + v599) = v598;
              LODWORD(v771) = v771 + 1;
              v600 = (llvm::MDNode *)llvm::MDTuple::getImpl(**v412, v770, v771, 0, 1);
              llvm::Value::setMetadata((llvm::Value *)v412, 30, v600);
              v601 = 0;
              v602 = v75[4];
              if (v602)
                v603 = v602 == v75[5] + 40;
              else
                v603 = 1;
              if (v603)
                v604 = 0;
              else
                v604 = v602 - 24;
              v725 = *(_QWORD *)(v604 + 40);
              v726 = v604 + 24;
              v605 = *(unsigned __int8 **)(v604 + 48);
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v605;
              if (v605)
              {
                llvm::MetadataTracking::track((uint64_t)&__dst, v605, 2);
                v601 = __dst.__r_.__value_.__r.__words[0];
              }
              sub_1C4774EF4((uint64_t)&v722, 0, v601);
              if (__dst.__r_.__value_.__r.__words[0])
                llvm::MetadataTracking::untrack((uint64_t)&__dst, (unsigned __int8 *)__dst.__r_.__value_.__l.__data_);
              v606 = v687;
              v607 = llvm::ConstantInt::get(v595, -(int)v410 & 0xFFFFFFF0, 0);
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"unsafe_stack_static_top";
              v746 = 259;
              v608 = (uint64_t *)sub_1C4867B70((uint64_t *)&v722, v606, v75, (uint64_t)v607, (uint64_t)&__dst);
              v671 = v688;
              llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v725 + 56) + 40) + 272, *v608);
              v610 = v609;
              v611 = (char *)operator new(0x80uLL);
              v612 = v611;
              *((_DWORD *)v611 + 21) = *((_DWORD *)v611 + 21) & 0x38000000 | 2;
              *(_QWORD *)v611 = 0;
              *((_QWORD *)v611 + 2) = 0;
              *((_QWORD *)v611 + 1) = 0;
              *((_QWORD *)v611 + 5) = 0;
              *((_QWORD *)v611 + 6) = 0;
              *((_QWORD *)v611 + 4) = 0;
              v613 = (uint64_t *)(v611 + 32);
              *((_QWORD *)v611 + 8) = **(_QWORD **)*v608 + 1576;
              v614 = (llvm::Value *)(v611 + 64);
              *((_QWORD *)v611 + 3) = v611 + 64;
              *((_QWORD *)v611 + 7) = v611 + 64;
              *((_QWORD *)v611 + 9) = 0;
              v611[80] = 61;
              v611[81] = 0;
              *((_WORD *)v611 + 41) = 0;
              *((_DWORD *)v611 + 21) = 2;
              *(_OWORD *)(v611 + 88) = 0u;
              *(_OWORD *)(v611 + 104) = 0u;
              *((_DWORD *)v611 + 30) = 0;
              *(_QWORD *)v611 = v608;
              v666 = v608;
              v617 = v608[1];
              v616 = v608 + 1;
              v615 = v617;
              *((_QWORD *)v611 + 1) = v617;
              if (v617)
                *(_QWORD *)(v615 + 16) = v611 + 8;
              *((_QWORD *)v611 + 2) = v616;
              *v616 = v611;
              if (*((_QWORD *)v611 + 4))
              {
                **((_QWORD **)v611 + 6) = *((_QWORD *)v611 + 5);
                v634 = *((_QWORD *)v611 + 5);
                if (v634)
                  *(_QWORD *)(v634 + 16) = *((_QWORD *)v611 + 6);
              }
              *v613 = v671;
              if (v671)
              {
                v618 = (uint64_t **)(v671 + 8);
                v619 = *(_QWORD *)(v671 + 8);
                *((_QWORD *)v611 + 5) = v619;
                if (v619)
                  *(_QWORD *)(v619 + 16) = v611 + 40;
                *((_QWORD *)v611 + 6) = v618;
                *v618 = v613;
              }
              *((_WORD *)v611 + 41) = 2 * (v610 & 0x3F);
              v611[124] = 1;
              v746 = 257;
              (*(void (**)(uint64_t, llvm::Value *, std::string *, uint64_t, uint64_t))(*(_QWORD *)v728 + 16))(v728, v614, &__dst, v725, v726);
              if (!v723)
              {
LABEL_880:
                if (v770 != (void *)v414)
                  free(v770);
                sub_1C6210BA0((uint64_t)&v748);
                sub_1C61B5658((uint64_t)&v791);
                MEMORY[0x1CAA32FB4](v791, 8);
                if (v789 != &v790)
                  free(v789);
                sub_1C61B56BC(&v788);
                MEMORY[0x1CAA32FB4](v787, 8);
                MEMORY[0x1CAA32FB4](v786, 8);
                if (v781 != &v783)
                  free(v781);
                sub_1C4F65B54(&v778);
                sub_1C50F023C((uint64_t)v792);
                goto LABEL_257;
              }
              v620 = (char *)v722;
              v621 = (char *)v722 + 16 * v723;
              v622 = (unsigned __int8 **)(v612 + 112);
              while (1)
              {
                v623 = *(_DWORD *)v620;
                v624 = (unsigned __int8 *)*((_QWORD *)v620 + 1);
                if (v624)
                {
                  if (!v623)
                  {
                    __p[0] = *((void **)v620 + 1);
                    llvm::MetadataTracking::track((uint64_t)__p, v624, 2);
                    v625 = *v622;
                    goto LABEL_901;
                  }
                }
                else
                {
                  v625 = *v622;
                  if (!*v622 && (v612[87] & 0x20) == 0)
                    goto LABEL_898;
                  if (!v623)
                  {
                    __p[0] = 0;
LABEL_901:
                    if (v625)
                      llvm::MetadataTracking::untrack((uint64_t)(v612 + 112), v625);
                    v626 = (unsigned __int8 *)__p[0];
                    *v622 = (unsigned __int8 *)__p[0];
                    if (v626)
                      llvm::MetadataTracking::retrack((uint64_t)__p, v626, (uint64_t)(v612 + 112));
                    goto LABEL_898;
                  }
                }
                llvm::Value::setMetadata(v614, *(_DWORD *)v620, (llvm::MDNode *)v624);
LABEL_898:
                v620 += 16;
                if (v620 == v621)
                  goto LABEL_880;
              }
            }
            v664 = &v677[v651];
            while (1)
            {
              v540 = *v491;
              v541 = (uint64_t)*v491 + 24;
              v725 = *((_QWORD *)*v491 + 5);
              v726 = v541;
              v542 = (unsigned __int8 *)*((_QWORD *)v540 + 6);
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v542;
              if (v542)
              {
                llvm::MetadataTracking::track((uint64_t)&__dst, v542, 2);
                v543 = __dst.__r_.__value_.__r.__words[0];
              }
              else
              {
                v543 = 0;
              }
              sub_1C4774EF4((uint64_t)&v722, 0, v543);
              if (__dst.__r_.__value_.__r.__words[0])
                llvm::MetadataTracking::untrack((uint64_t)&__dst, (unsigned __int8 *)__dst.__r_.__value_.__l.__data_);
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v540;
              v544 = v540 >> 4;
              if (v767)
              {
                v545 = (v767 - 1) & (v544 ^ (v540 >> 9));
                v546 = (llvm **)(v766 + 16 * v545);
                v547 = *v546;
                if (v540 == *v546)
                  goto LABEL_802;
                v548 = 0;
                v549 = 1;
                while (v547 != (llvm *)-4096)
                {
                  if (v548)
                    v550 = 0;
                  else
                    v550 = v547 == (llvm *)-8192;
                  if (v550)
                    v548 = v546;
                  v551 = v545 + v549++;
                  v545 = v551 & (v767 - 1);
                  v546 = (llvm **)(v766 + 16 * v545);
                  v547 = *v546;
                  if (v540 == *v546)
                    goto LABEL_802;
                }
                if (v548)
                  v552 = v548;
                else
                  v552 = v546;
              }
              else
              {
                v552 = 0;
              }
              v546 = (llvm **)sub_1C504A120((uint64_t)&v766, (uint64_t)&__dst, (uint64_t *)&__dst, v552);
              *v546 = (llvm *)__dst.__r_.__value_.__r.__words[0];
              *((_DWORD *)v546 + 2) = 0;
LABEL_802:
              v553 = *((_DWORD *)v546 + 2);
              v554 = -v553;
              llvm::replaceDbgDeclare(v540, (llvm::Value *)v75, (llvm::Value *)v792, 0, -v553);
              llvm::replaceDbgValueForAlloca((uint64_t ***)v540, (llvm::AllocaInst *)v75, (llvm::Value *)v792, (llvm::DIBuilder *)v554);
              v678 = v491;
              v669 = (_QWORD *)v541;
              if ((*((_BYTE *)v540 + 23) & 0x10) == 0)
              {
                v564 = 0;
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
                v567 = &__dst;
                goto LABEL_818;
              }
              v555 = ***(_QWORD ***)v540;
              v556 = *(_QWORD *)(v555 + 152);
              v557 = *(unsigned int *)(v555 + 168);
              if (!(_DWORD)v557)
                goto LABEL_809;
              LODWORD(v558) = (v557 - 1) & (v544 ^ (v540 >> 9));
              v559 = (llvm **)(v556 + 16 * v558);
              v560 = *v559;
              if (*v559 != v540)
              {
                v561 = 1;
                while (v560 != (llvm *)-4096)
                {
                  v562 = v558 + v561++;
                  v558 = v562 & (v557 - 1);
                  v560 = *(llvm **)(v556 + 16 * v558);
                  if (v560 == v540)
                  {
                    v559 = (llvm **)(v556 + 16 * v558);
                    goto LABEL_810;
                  }
                }
LABEL_809:
                v559 = (llvm **)(v556 + 16 * v557);
              }
LABEL_810:
              v563 = (unint64_t *)v559[1];
              v566 = *v563;
              v565 = v563 + 2;
              v564 = v566;
              if (v566 >= 0x7FFFFFFFFFFFFFF8)
                abort();
              if (v564 >= 0x17)
              {
                v568 = (v564 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v564 | 7) != 0x17)
                  v568 = v564 | 7;
                v569 = v568 + 1;
                v567 = (std::string *)operator new(v568 + 1);
                __dst.__r_.__value_.__r.__words[2] = v569 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v567;
                __dst.__r_.__value_.__l.__size_ = v564;
              }
              else
              {
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v564;
                v567 = &__dst;
                if (!v564)
                  goto LABEL_818;
              }
              memmove(v567, v565, v564);
LABEL_818:
              v567->__r_.__value_.__s.__data_[v564] = 0;
              v570 = std::string::append(&__dst, ".unsafe");
              v571 = v570->__r_.__value_.__r.__words[2];
              *(_OWORD *)__p = *(_OWORD *)&v570->__r_.__value_.__l.__data_;
              v691 = v571;
              v570->__r_.__value_.__l.__size_ = 0;
              v570->__r_.__value_.__r.__words[2] = 0;
              v570->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__dst.__r_.__value_.__l.__data_);
              v572 = (unsigned __int8 **)*((_QWORD *)v540 + 1);
              if (v572)
              {
                v574 = v686;
                v573 = v687;
                do
                {
                  v575 = (uint64_t)v572[3];
                  v576 = v575;
                  if (v575)
                  {
                    v576 = (uint64_t)v572[3];
                    if (*(_BYTE *)(v575 + 16) == 83)
                    {
                      v577 = *(_DWORD *)(v575 + 20);
                      if ((v577 & 0x40000000) != 0)
                        v578 = *(_QWORD *)(v575 - 8);
                      else
                        v578 = v575 - 32 * (v577 & 0x7FFFFFF);
                      v579 = *(_QWORD *)(v578
                                       + 32 * *(unsigned int *)(v575 + 60)
                                       + 8 * (((unint64_t)v572 - v578) >> 5));
                      v580 = *(_QWORD *)(v579 + 40);
                      if (v580 == v579 + 40)
                      {
                        v576 = 0;
                      }
                      else
                      {
                        if (v580)
                          v581 = v580 - 24;
                        else
                          v581 = 0;
                        if (*(unsigned __int8 *)(v581 + 16) - 29 >= 0xB)
                          v576 = 0;
                        else
                          v576 = v581;
                      }
                    }
                  }
                  sub_1C4773D54((uint64_t)&__dst, v576, 0, 0, 0);
                  v582 = llvm::ConstantInt::get(v574, v554, 0);
                  v774 = 257;
                  v583 = (unsigned __int8 *)sub_1C4867B70((uint64_t *)&__dst, v573, v75, (uint64_t)v582, (uint64_t)&v770);
                  v584 = *(_QWORD *)v540;
                  v774 = 260;
                  v770 = __p;
                  v585 = sub_1C4773E38((uint64_t *)&__dst, 49, v583, v584, (uint64_t)&v770);
                  if (v575 && *(_BYTE *)(v575 + 16) == 83)
                  {
                    v586 = *(_DWORD *)(v575 + 20);
                    if ((v586 & 0x40000000) != 0)
                      v587 = *(_QWORD *)(v575 - 8);
                    else
                      v587 = v575 - 32 * (v586 & 0x7FFFFFF);
                    sub_1C5276870(v575, *(_QWORD *)(v587+ 32 * *(unsigned int *)(v575 + 60)+ 8 * (((unint64_t)v572 - v587) >> 5)), (uint64_t)v585);
                  }
                  else
                  {
                    if (*v572)
                    {
                      *(_QWORD *)v572[2] = v572[1];
                      v588 = v572[1];
                      if (v588)
                        *((_QWORD *)v588 + 2) = v572[2];
                    }
                    *v572 = v585;
                    if (v585)
                    {
                      v589 = v585 + 8;
                      v590 = (unsigned __int8 *)*((_QWORD *)v585 + 1);
                      v572[1] = v590;
                      if (v590)
                        *((_QWORD *)v590 + 2) = v572 + 1;
                      v572[2] = v589;
                      *(_QWORD *)v589 = v572;
                    }
                  }
                  if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[2])
                    free(__dst.__r_.__value_.__l.__data_);
                  v572 = (unsigned __int8 **)*((_QWORD *)v540 + 1);
                }
                while (v572);
              }
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v540 + 5) + 40, (uint64_t ***)v540);
              v591 = (_QWORD **)*((_QWORD *)v540 + 3);
              v592 = (_QWORD *)*((_QWORD *)v540 + 4);
              *v592 = v591;
              v591[1] = v592;
              *v669 = 0;
              v669[1] = 0;
              llvm::Value::deleteValue(v540);
              if (SHIBYTE(v691) < 0)
                operator delete(__p[0]);
              v491 = v678 + 1;
              if (v678 + 1 == v664)
                goto LABEL_727;
            }
          }
        }
        else if (!v668)
        {
          goto LABEL_665;
        }
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v668;
        if (v767)
        {
          v476 = (v767 - 1) & ((v668 >> 4) ^ (v668 >> 9));
          v477 = (uint64_t **)(v766 + 16 * v476);
          v478 = *v477;
          if (v668 == *v477)
            goto LABEL_725;
          v479 = 0;
          v480 = 1;
          while (v478 != (uint64_t *)-4096)
          {
            if (v479)
              v481 = 0;
            else
              v481 = v478 == (uint64_t *)-8192;
            if (v481)
              v479 = v477;
            v482 = v476 + v480++;
            v476 = v482 & (v767 - 1);
            v477 = (uint64_t **)(v766 + 16 * v476);
            v478 = *v477;
            if (v668 == *v477)
              goto LABEL_725;
          }
          if (v479)
            v483 = v479;
          else
            v483 = v477;
        }
        else
        {
          v483 = 0;
        }
        v477 = (uint64_t **)sub_1C504A120((uint64_t)&v766, (uint64_t)&__dst, (uint64_t *)&__dst, v483);
        *v477 = (uint64_t *)__dst.__r_.__value_.__r.__words[0];
        *((_DWORD *)v477 + 2) = 0;
LABEL_725:
        v484 = v687;
        v485 = llvm::ConstantInt::get(v686, -*((_DWORD *)v477 + 2), 0);
        v746 = 257;
        v486 = (unsigned __int8 *)sub_1C4867B70((uint64_t *)&v722, v484, v75, (uint64_t)v485, (uint64_t)&__dst);
        v487 = *v668;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"StackGuardSlot";
        v746 = 259;
        v488 = sub_1C4773E38((uint64_t *)&v722, 49, v486, v487, (uint64_t)&__dst);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v668, (llvm::Value *)v488, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v668[5] + 40, (uint64_t ***)v668);
        v489 = v668[3];
        v490 = (uint64_t *)v668[4];
        *v490 = v489;
        *(_QWORD *)(v489 + 8) = v490;
        v668[3] = 0;
        v668[4] = 0;
        llvm::Value::deleteValue((llvm::Value *)v668);
        if ((_DWORD)v183)
        {
LABEL_729:
          v663 = &v649[v183];
          v492 = v686;
          v654 = v687;
          v493 = (uint64_t)v681;
          while (1)
          {
            v494 = *v428;
            __dst.__r_.__value_.__r.__words[0] = v494;
            v495 = v494 >> 4;
            if (v767)
            {
              v496 = (v767 - 1) & (v495 ^ (v494 >> 9));
              v497 = (_QWORD *)(v766 + 16 * v496);
              v498 = *v497;
              if (v494 == *v497)
                goto LABEL_745;
              v499 = 0;
              v500 = 1;
              while (v498 != -4096)
              {
                if (v499)
                  v501 = 0;
                else
                  v501 = v498 == -8192;
                if (v501)
                  v499 = v497;
                v502 = v496 + v500++;
                v496 = v502 & (v767 - 1);
                v497 = (_QWORD *)(v766 + 16 * v496);
                v498 = *v497;
                if (v494 == *v497)
                  goto LABEL_745;
              }
              if (v499)
                v503 = v499;
              else
                v503 = v497;
            }
            else
            {
              v503 = 0;
            }
            v497 = sub_1C504A120((uint64_t)&v766, (uint64_t)&__dst, (uint64_t *)&__dst, v503);
            *v497 = __dst.__r_.__value_.__r.__words[0];
            *((_DWORD *)v497 + 2) = 0;
LABEL_745:
            v504 = *((_DWORD *)v497 + 2);
            __dst.__r_.__value_.__r.__words[0] = v494;
            v505 = *((unsigned __int8 *)sub_1C617F758((uint64_t *)&v768, &__dst) + 8);
            v506 = llvm::AttributeList::getParamByValType((llvm::AttributeList *)(*(_QWORD *)(v494 + 24) + 112), *(_DWORD *)(v494 + 32));
            sub_1C4768AD0(v493, v506);
            v509 = v508;
            if ((_DWORD)v507 == 1)
            v510 = -v504;
            v511 = llvm::ConstantInt::get(v492, -v504, 0);
            v746 = 257;
            v512 = (unsigned __int8 *)sub_1C4867B70((uint64_t *)&v722, v654, v75, (uint64_t)v511, (uint64_t)&__dst);
            v513 = *(uint64_t ***)v494;
            if ((*(_BYTE *)(v494 + 23) & 0x10) == 0)
            {
              v523 = 0;
              v524 = &byte_1C871356D;
              goto LABEL_756;
            }
            v514 = **v513;
            v515 = *(_QWORD *)(v514 + 152);
            v516 = *(unsigned int *)(v514 + 168);
            if (!(_DWORD)v516)
              goto LABEL_754;
            LODWORD(v517) = (v516 - 1) & (v495 ^ (v494 >> 9));
            v518 = (uint64_t *)(v515 + 16 * v517);
            v519 = *v518;
            if (*v518 != v494)
            {
              v520 = 1;
              while (v519 != -4096)
              {
                v521 = v517 + v520++;
                v517 = v521 & (v516 - 1);
                v519 = *(_QWORD *)(v515 + 16 * v517);
                if (v519 == v494)
                {
                  v518 = (uint64_t *)(v515 + 16 * v517);
                  goto LABEL_755;
                }
              }
LABEL_754:
              v518 = (uint64_t *)(v515 + 16 * v516);
            }
LABEL_755:
            v522 = (_QWORD *)v518[1];
            v525 = *v522;
            v524 = (char *)(v522 + 2);
            v523 = v525;
LABEL_756:
            v746 = 773;
            v526 = (unint64_t)(v509 + 7) >> 3;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v524;
            __dst.__r_.__value_.__l.__size_ = v523;
            __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)".unsafe-byval";
            v527 = sub_1C4773E38((uint64_t *)&v722, 49, v512, (uint64_t)v513, (uint64_t)&__dst);
            llvm::replaceDbgDeclare((llvm *)v494, (llvm::Value *)v75, (llvm::Value *)v792, 0, v510);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v494, (llvm::Value *)v527, (llvm::Value *)1);
            v528 = 0;
            v529 = *((_QWORD *)v527 + 4);
            if (v526 <= 1)
              v530 = 1;
            else
              v530 = v526;
            if (v529)
              v531 = v529 == *((_QWORD *)v527 + 5) + 40;
            else
              v531 = 1;
            if (v531)
              v532 = 0;
            else
              v532 = v529 - 24;
            v725 = *(_QWORD *)(v532 + 40);
            v726 = v532 + 24;
            v533 = *(unsigned __int8 **)(v532 + 48);
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v533;
            if (v533)
            {
              llvm::MetadataTracking::track((uint64_t)&__dst, v533, 2);
              v528 = __dst.__r_.__value_.__r.__words[0];
            }
            sub_1C4774EF4((uint64_t)&v722, 0, v528);
            if (__dst.__r_.__value_.__r.__words[0])
              llvm::MetadataTracking::untrack((uint64_t)&__dst, (unsigned __int8 *)__dst.__r_.__value_.__l.__data_);
            v535 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(*(_QWORD *)(v494 + 24) + 112), *(_DWORD *)(v494 + 32));
            v536 = *(llvm::ConstantInt **)(*(_QWORD *)v727 + 1984);
            v537 = *(_DWORD *)(*(_QWORD *)v727 + 1992);
            LODWORD(__dst.__r_.__value_.__r.__words[1]) = v537 >> 8;
            if (v537 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&__dst, v530, 0);
            }
            else
            {
              if (v537 <= 0xFF)
                v538 = 0;
              else
                v538 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v537);
              __dst.__r_.__value_.__r.__words[0] = v538 & v530;
            }
            v539 = (uint64_t *)llvm::ConstantInt::get(v536, (llvm::LLVMContext *)&__dst, v534);
            if (LODWORD(__dst.__r_.__value_.__r.__words[1]) >= 0x41 && __dst.__r_.__value_.__r.__words[0])
              MEMORY[0x1CAA32F9C](__dst.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
            llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v722, 194, (llvm::Value *)v512, v505 | 0x100, (llvm::Value *)v494, v535, v539, 0, 0, 0, 0, 0);
            if (++v428 == v663)
              goto LABEL_726;
          }
        }
        goto LABEL_726;
      }
      v421 = 5;
      v409 = (std::string::__raw *)v747;
    }
    (*(void (**)(std::string::__raw *))(v409->__words[0] + 8 * v421))(v409);
    goto LABEL_635;
  }
LABEL_257:
  v184 = v730;
  if (!(_DWORD)v730)
  {
    v204 = 0;
    goto LABEL_341;
  }
  v185 = (char *)v729;
  if ((_DWORD)v739)
  {
    *(_QWORD *)&v748 = "unsafe_stack_dynamic_ptr";
    LOWORD(v751) = 259;
    v186 = sub_1C486A5CC((uint64_t *)&v722, v684, 0, (uint64_t)&v748);
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v725 + 56) + 40) + 272, *v666);
    v188 = v187;
    v189 = (char *)operator new(0x80uLL);
    v190 = v189;
    *((_DWORD *)v189 + 21) = *((_DWORD *)v189 + 21) & 0x38000000 | 2;
    *(_QWORD *)v189 = 0;
    *((_QWORD *)v189 + 2) = 0;
    *((_QWORD *)v189 + 1) = 0;
    *((_QWORD *)v189 + 5) = 0;
    *((_QWORD *)v189 + 6) = 0;
    *((_QWORD *)v189 + 4) = 0;
    v191 = (unsigned __int8 ***)(v189 + 32);
    *((_QWORD *)v189 + 8) = **(_QWORD **)*v666 + 1576;
    v192 = (llvm::Value *)(v189 + 64);
    *((_QWORD *)v189 + 3) = v189 + 64;
    *((_QWORD *)v189 + 7) = v189 + 64;
    *((_QWORD *)v189 + 9) = 0;
    v189[80] = 61;
    v189[81] = 0;
    *((_WORD *)v189 + 41) = 0;
    *((_DWORD *)v189 + 21) = 2;
    *(_OWORD *)(v189 + 88) = 0u;
    *(_OWORD *)(v189 + 104) = 0u;
    *((_DWORD *)v189 + 30) = 0;
    *(_QWORD *)v189 = v666;
    v193 = v666 + 1;
    v194 = v666[1];
    *((_QWORD *)v189 + 1) = v194;
    if (v194)
      *(_QWORD *)(v194 + 16) = v189 + 8;
    *((_QWORD *)v189 + 2) = v193;
    *v193 = v189;
    if (*((_QWORD *)v189 + 4))
    {
      **((_QWORD **)v189 + 6) = *((_QWORD *)v189 + 5);
      v632 = *((_QWORD *)v189 + 5);
      if (v632)
        *(_QWORD *)(v632 + 16) = *((_QWORD *)v189 + 6);
    }
    *v191 = v186;
    if (v186)
    {
      v195 = (unsigned __int8 ****)(v186 + 1);
      v196 = v186[1];
      *((_QWORD *)v189 + 5) = v196;
      if (v196)
        *((_QWORD *)v196 + 2) = v189 + 40;
      *((_QWORD *)v189 + 6) = v195;
      *v195 = v191;
    }
    *((_WORD *)v189 + 41) = 2 * (v188 & 0x3F);
    v189[124] = 1;
    LOWORD(v751) = 257;
    (*(void (**)(uint64_t, llvm::Value *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v728 + 16))(v728, v192, &v748, v725, v726);
    if (v723)
    {
      v197 = (char *)v722;
      v198 = (char *)v722 + 16 * v723;
      v199 = (unsigned __int8 **)(v190 + 112);
      do
      {
        v200 = *(_DWORD *)v197;
        v201 = (unsigned __int8 *)*((_QWORD *)v197 + 1);
        if (v201)
        {
          if (!v200)
          {
            v776 = (void *)*((_QWORD *)v197 + 1);
            llvm::MetadataTracking::track((uint64_t)&v776, v201, 2);
            v202 = *v199;
            goto LABEL_278;
          }
        }
        else
        {
          v202 = *v199;
          if (!*v199 && (v190[87] & 0x20) == 0)
            goto LABEL_275;
          if (!v200)
          {
            v776 = 0;
LABEL_278:
            if (v202)
              llvm::MetadataTracking::untrack((uint64_t)(v190 + 112), v202);
            v203 = (unsigned __int8 *)v776;
            *v199 = (unsigned __int8 *)v776;
            if (v203)
              llvm::MetadataTracking::retrack((uint64_t)&v776, v203, (uint64_t)(v190 + 112));
            goto LABEL_275;
          }
        }
        llvm::Value::setMetadata(v192, *(_DWORD *)v197, (llvm::MDNode *)v201);
LABEL_275:
        v197 += 16;
      }
      while (v197 != v198);
    }
  }
  else
  {
    v186 = 0;
  }
  v204 = v186;
  v205 = v186 + 1;
  v672 = &v185[8 * v184];
  while (2)
  {
    v206 = 0;
    v207 = *(_QWORD *)(*(_QWORD *)v185 + 32);
    if (v207)
      v208 = v207 == *(_QWORD *)(*(_QWORD *)v185 + 40) + 40;
    else
      v208 = 1;
    if (v208)
      v209 = 0;
    else
      v209 = v207 - 24;
    v725 = *(_QWORD *)(v209 + 40);
    v726 = v209 + 24;
    v210 = *(unsigned __int8 **)(v209 + 48);
    *(_QWORD *)&v748 = v210;
    if (v210)
    {
      llvm::MetadataTracking::track((uint64_t)&v748, v210, 2);
      v206 = v748;
    }
    sub_1C4774EF4((uint64_t)&v722, 0, v206);
    if ((_QWORD)v748)
      llvm::MetadataTracking::untrack((uint64_t)&v748, (unsigned __int8 *)v748);
    v211 = v666;
    if (v186)
    {
      v212 = v684;
      LOWORD(v780) = 257;
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v725 + 56) + 40) + 272, (uint64_t)v684);
      v214 = v213;
      v215 = (char *)operator new(0x60uLL);
      v216 = v215;
      *((_QWORD *)v215 + 1) = 0;
      v211 = (uint64_t *)(v215 + 32);
      *((_QWORD *)v215 + 2) = 0;
      *((_QWORD *)v215 + 3) = v215 + 32;
      LOWORD(v751) = 257;
      *((_QWORD *)v215 + 4) = v212;
      *((_QWORD *)v215 + 5) = 0;
      *((_WORD *)v215 + 24) = 60;
      *((_DWORD *)v215 + 13) = 1;
      *(_OWORD *)(v215 + 56) = 0u;
      *(_OWORD *)(v215 + 72) = 0u;
      *((_DWORD *)v215 + 22) = 0;
      *(_QWORD *)v215 = v186;
      v217 = v186[1];
      *((_QWORD *)v215 + 1) = v217;
      if (v217)
        *((_QWORD *)v217 + 2) = v215 + 8;
      *((_QWORD *)v215 + 2) = v205;
      *v205 = v215;
      *((_WORD *)v215 + 25) = 2 * (v214 & 0x3F);
      v215[92] = 1;
      llvm::Value::setName((uint64_t ***)v215 + 4, (uint64_t)&v748);
      (*(void (**)(uint64_t, uint64_t *, void **, uint64_t, uint64_t))(*(_QWORD *)v728 + 16))(v728, v211, &v776, v725, v726);
      if (v723)
      {
        v231 = (char *)v722;
        v232 = (char *)v722 + 16 * v723;
        v233 = (unsigned __int8 **)(v216 + 80);
        do
        {
          v234 = *(_DWORD *)v231;
          v235 = (unsigned __int8 *)*((_QWORD *)v231 + 1);
          if (v235)
          {
            if (!v234)
            {
              v792[0] = *((uint64_t **)v231 + 1);
              llvm::MetadataTracking::track((uint64_t)v792, v235, 2);
              v236 = *v233;
              goto LABEL_320;
            }
          }
          else
          {
            v236 = *v233;
            if (!*v233 && (v216[55] & 0x20) == 0)
              goto LABEL_317;
            if (!v234)
            {
              v792[0] = 0;
LABEL_320:
              if (v236)
                llvm::MetadataTracking::untrack((uint64_t)(v216 + 80), v236);
              v237 = (unsigned __int8 *)v792[0];
              *v233 = (unsigned __int8 *)v792[0];
              if (v237)
                llvm::MetadataTracking::retrack((uint64_t)v792, v237, (uint64_t)(v216 + 80));
              goto LABEL_317;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)v211, *(_DWORD *)v231, (llvm::MDNode *)v235);
LABEL_317:
          v231 += 16;
        }
        while (v231 != v232);
      }
    }
    v218 = v688;
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v725 + 56) + 40) + 272, *v211);
    v220 = v219;
    v221 = (char *)operator new(0x80uLL);
    v222 = v221;
    *((_DWORD *)v221 + 21) = *((_DWORD *)v221 + 21) & 0x38000000 | 2;
    *(_QWORD *)v221 = 0;
    *((_QWORD *)v221 + 2) = 0;
    *((_QWORD *)v221 + 1) = 0;
    *((_QWORD *)v221 + 5) = 0;
    *((_QWORD *)v221 + 6) = 0;
    *((_QWORD *)v221 + 4) = 0;
    v223 = (uint64_t *)(v221 + 32);
    *((_QWORD *)v221 + 8) = **(_QWORD **)*v211 + 1576;
    v224 = (llvm::Value *)(v221 + 64);
    *((_QWORD *)v221 + 3) = v221 + 64;
    *((_QWORD *)v221 + 7) = v221 + 64;
    *((_QWORD *)v221 + 9) = 0;
    v221[80] = 61;
    v221[81] = 0;
    *((_WORD *)v221 + 41) = 0;
    *((_DWORD *)v221 + 21) = 2;
    *(_OWORD *)(v221 + 88) = 0u;
    *(_OWORD *)(v221 + 104) = 0u;
    *((_DWORD *)v221 + 30) = 0;
    *(_QWORD *)v221 = v211;
    v227 = v211[1];
    v226 = v211 + 1;
    v225 = v227;
    *((_QWORD *)v221 + 1) = v227;
    if (v227)
      *(_QWORD *)(v225 + 16) = v221 + 8;
    *((_QWORD *)v221 + 2) = v226;
    *v226 = v221;
    if (*((_QWORD *)v221 + 4))
    {
      **((_QWORD **)v221 + 6) = *((_QWORD *)v221 + 5);
      v245 = *((_QWORD *)v221 + 5);
      if (v245)
        *(_QWORD *)(v245 + 16) = *((_QWORD *)v221 + 6);
    }
    *v223 = v218;
    if (v218)
    {
      v230 = *(_QWORD *)(v218 + 8);
      v229 = (uint64_t **)(v218 + 8);
      v228 = v230;
      *((_QWORD *)v221 + 5) = v230;
      if (v230)
        *(_QWORD *)(v228 + 16) = v221 + 40;
      *((_QWORD *)v221 + 6) = v229;
      *v229 = v223;
    }
    *((_WORD *)v221 + 41) = 2 * (v220 & 0x3F);
    v221[124] = 1;
    LOWORD(v751) = 257;
    (*(void (**)(uint64_t, llvm::Value *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v728 + 16))(v728, v224, &v748, v725, v726);
    if (v723)
    {
      v238 = (char *)v722;
      v239 = (char *)v722 + 16 * v723;
      v240 = (unsigned __int8 **)(v222 + 112);
      do
      {
        v241 = *(_DWORD *)v238;
        v242 = (unsigned __int8 *)*((_QWORD *)v238 + 1);
        if (v242)
        {
          if (!v241)
          {
            v776 = (void *)*((_QWORD *)v238 + 1);
            llvm::MetadataTracking::track((uint64_t)&v776, v242, 2);
            v243 = *v240;
            goto LABEL_335;
          }
        }
        else
        {
          v243 = *v240;
          if (!*v240 && (v222[87] & 0x20) == 0)
            goto LABEL_332;
          if (!v241)
          {
            v776 = 0;
LABEL_335:
            if (v243)
              llvm::MetadataTracking::untrack((uint64_t)(v222 + 112), v243);
            v244 = (unsigned __int8 *)v776;
            *v240 = (unsigned __int8 *)v776;
            if (v244)
              llvm::MetadataTracking::retrack((uint64_t)&v776, v244, (uint64_t)(v222 + 112));
            goto LABEL_332;
          }
        }
        llvm::Value::setMetadata(v224, *(_DWORD *)v238, (llvm::MDNode *)v242);
LABEL_332:
        v238 += 16;
      }
      while (v238 != v239);
    }
    v185 += 8;
    if (v185 != v672)
      continue;
    break;
  }
  v671 = v688;
LABEL_341:
  v246 = v679;
  v247 = (uint64_t *)v738;
  v248 = v739;
  llvm::DIBuilder::DIBuilder((uint64_t)&v748, (_QWORD *)v679[5], 1, 0);
  if ((_DWORD)v248)
  {
    v636 = v246;
    v650 = &v247[v248];
    v667 = (uint64_t **)(v671 + 8);
    v647 = v204 + 1;
    v653 = v204;
    while (1)
    {
      v249 = *v247;
      sub_1C4773D54((uint64_t)&v776, *v247, 0, 0, 0);
      v250 = *(unsigned __int8 **)(v249 - 32);
      v251 = v685;
      v660 = v247;
      if (*(llvm::ConstantInt **)v250 != v685)
      {
        v793 = 257;
        v250 = sub_1C4D8D514((uint64_t *)&v776, v250, (uint64_t)v685, 0, (uint64_t)v792);
      }
      v252 = *(_QWORD *)(v249 + 64);
      v253 = (uint64_t)v681;
      sub_1C4768AD0((uint64_t)v681, v252);
      v255 = v254;
      v257 = v256 == 1;
      llvm::DataLayout::getAlignment(v253, v252);
      v260 = v259;
      if (v257)
      v261 = llvm::ConstantInt::get(v251, ((1 << v260) + ((unint64_t)(v255 + 7) >> 3) - 1) & -(1 << v260), 0);
      v793 = 257;
      v657 = sub_1C4EC4040((uint64_t)&v776, (uint64_t)v250, (uint64_t)v261, (uint64_t)v792, 0, 0);
      v262 = v684;
      v746 = 257;
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v782 + 56) + 40) + 272, (uint64_t)v684);
      v264 = v263;
      v265 = (char *)operator new(0x60uLL);
      v266 = v265;
      v267 = (unsigned __int8 *)(v265 + 32);
      *((_QWORD *)v265 + 2) = 0;
      *((_QWORD *)v265 + 3) = v265 + 32;
      v793 = 257;
      *((_QWORD *)v265 + 4) = v262;
      *((_QWORD *)v265 + 5) = 0;
      *((_WORD *)v265 + 24) = 60;
      *((_DWORD *)v265 + 13) = 1;
      *(_OWORD *)(v265 + 56) = 0u;
      *(_OWORD *)(v265 + 72) = 0u;
      *((_DWORD *)v265 + 22) = 0;
      *(_QWORD *)v265 = v671;
      *((_QWORD *)v265 + 1) = 0;
      if (v671)
      {
        v268 = *v667;
        *((_QWORD *)v265 + 1) = *v667;
        if (v268)
          v268[2] = (uint64_t)(v265 + 8);
        *((_QWORD *)v265 + 2) = v667;
        *v667 = (uint64_t *)v265;
      }
      *((_WORD *)v265 + 25) = 2 * (v264 & 0x3F);
      v265[92] = 1;
      llvm::Value::setName((uint64_t ***)v265 + 4, (uint64_t)v792);
      (*(void (**)(uint64_t, unsigned __int8 *, std::string *, uint64_t, uint64_t))(*(_QWORD *)v785 + 16))(v785, v267, &__dst, v782, v783);
      if ((_DWORD)v777)
        break;
LABEL_352:
      v793 = 257;
      v269 = sub_1C4773E38((uint64_t *)&v776, 47, v267, (uint64_t)v251, (uint64_t)v792);
      v793 = 257;
      v270 = (_QWORD *)sub_1C47733F8((uint64_t)&v776, (uint64_t)v269, v657, (uint64_t)v792, 0, 0);
      llvm::DataLayout::getAlignment(v253, v252);
      v272 = 1 << v271;
      if (1 << v271 <= (unint64_t)(1 << *(_WORD *)(v249 + 18)))
        v272 = 1 << *(_WORD *)(v249 + 18);
      if (v272 <= 0x10)
        v272 = 16;
      v273 = llvm::ConstantInt::get(v251, -(uint64_t)v272, 0);
      v793 = 257;
      v274 = (unsigned __int8 *)sub_1C4D89BCC((uint64_t)&v776, v270, (uint64_t)v273, (uint64_t)v792);
      v746 = 257;
      v275 = (uint64_t *)sub_1C4773E38((uint64_t *)&v776, 48, v274, (uint64_t)v262, (uint64_t)&__dst);
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v782 + 56) + 40) + 272, *v275);
      v277 = v276;
      v278 = (char *)operator new(0x80uLL);
      v279 = v278;
      *((_DWORD *)v278 + 21) = *((_DWORD *)v278 + 21) & 0x38000000 | 2;
      *(_QWORD *)v278 = 0;
      *((_QWORD *)v278 + 2) = 0;
      *((_QWORD *)v278 + 1) = 0;
      *((_QWORD *)v278 + 5) = 0;
      *((_QWORD *)v278 + 6) = 0;
      *((_QWORD *)v278 + 4) = 0;
      v280 = (uint64_t *)(v278 + 32);
      *((_QWORD *)v278 + 8) = **(_QWORD **)*v275 + 1576;
      v281 = (llvm::Value *)(v278 + 64);
      *((_QWORD *)v278 + 3) = v278 + 64;
      *((_QWORD *)v278 + 7) = v278 + 64;
      *((_QWORD *)v278 + 9) = 0;
      v278[80] = 61;
      v278[81] = 0;
      *((_WORD *)v278 + 41) = 0;
      *((_DWORD *)v278 + 21) = 2;
      *(_OWORD *)(v278 + 88) = 0u;
      *(_OWORD *)(v278 + 104) = 0u;
      *((_DWORD *)v278 + 30) = 0;
      *(_QWORD *)v278 = v275;
      v283 = v275 + 1;
      v282 = v275[1];
      *((_QWORD *)v278 + 1) = v282;
      if (v282)
        *(_QWORD *)(v282 + 16) = v278 + 8;
      *((_QWORD *)v278 + 2) = v283;
      *v283 = v278;
      if (*((_QWORD *)v278 + 4))
      {
        **((_QWORD **)v278 + 6) = *((_QWORD *)v278 + 5);
        v321 = *((_QWORD *)v278 + 5);
        if (v321)
          *(_QWORD *)(v321 + 16) = *((_QWORD *)v278 + 6);
      }
      *v280 = v671;
      if (v671)
      {
        v284 = *v667;
        *((_QWORD *)v278 + 5) = *v667;
        if (v284)
          v284[2] = (uint64_t)(v278 + 40);
        *((_QWORD *)v278 + 6) = v667;
        *v667 = v280;
      }
      *((_WORD *)v278 + 41) = 2 * (v277 & 0x3F);
      v278[124] = 1;
      v793 = 257;
      (*(void (**)(uint64_t, llvm::Value *, uint64_t **, uint64_t, uint64_t))(*(_QWORD *)v785 + 16))(v785, v281, v792, v782, v783);
      if ((_DWORD)v777)
      {
        v307 = (char *)v776;
        v308 = (char *)v776 + 16 * v777;
        v309 = (unsigned __int8 **)(v279 + 112);
        do
        {
          v310 = *(_DWORD *)v307;
          v311 = (unsigned __int8 *)*((_QWORD *)v307 + 1);
          if (v311)
          {
            if (!v310)
            {
              __dst.__r_.__value_.__r.__words[0] = *((_QWORD *)v307 + 1);
              llvm::MetadataTracking::track((uint64_t)&__dst, v311, 2);
              v312 = *v309;
              goto LABEL_405;
            }
          }
          else
          {
            v312 = *v309;
            if (!*v309 && (v279[87] & 0x20) == 0)
              goto LABEL_402;
            if (!v310)
            {
              __dst.__r_.__value_.__r.__words[0] = 0;
LABEL_405:
              if (v312)
                llvm::MetadataTracking::untrack((uint64_t)(v279 + 112), v312);
              v313 = (unsigned __int8 *)__dst.__r_.__value_.__r.__words[0];
              *v309 = (unsigned __int8 *)__dst.__r_.__value_.__r.__words[0];
              if (v313)
                llvm::MetadataTracking::retrack((uint64_t)&__dst, v313, (uint64_t)(v279 + 112));
              goto LABEL_402;
            }
          }
          llvm::Value::setMetadata(v281, *(_DWORD *)v307, (llvm::MDNode *)v311);
LABEL_402:
          v307 += 16;
        }
        while (v307 != v308);
      }
      if (v653)
      {
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v782 + 56) + 40) + 272, *v275);
        v286 = v285;
        v287 = (char *)operator new(0x80uLL);
        v288 = v287;
        *((_DWORD *)v287 + 21) = *((_DWORD *)v287 + 21) & 0x38000000 | 2;
        *(_QWORD *)v287 = 0;
        *((_QWORD *)v287 + 2) = 0;
        *((_QWORD *)v287 + 1) = 0;
        *((_QWORD *)v287 + 5) = 0;
        *((_QWORD *)v287 + 6) = 0;
        *((_QWORD *)v287 + 4) = 0;
        *((_QWORD *)v287 + 8) = **(_QWORD **)*v275 + 1576;
        v289 = (llvm::Value *)(v287 + 64);
        *((_QWORD *)v287 + 3) = v287 + 64;
        *((_QWORD *)v287 + 7) = v287 + 64;
        *((_QWORD *)v287 + 9) = 0;
        v287[80] = 61;
        v287[81] = 0;
        *((_WORD *)v287 + 41) = 0;
        *((_DWORD *)v287 + 21) = 2;
        *(_OWORD *)(v287 + 88) = 0u;
        *(_OWORD *)(v287 + 104) = 0u;
        *((_DWORD *)v287 + 30) = 0;
        *(_QWORD *)v287 = v275;
        v290 = v275[1];
        *((_QWORD *)v287 + 1) = v290;
        if (v290)
          *(_QWORD *)(v290 + 16) = v287 + 8;
        *((_QWORD *)v287 + 2) = v283;
        *v283 = v287;
        if (*((_QWORD *)v287 + 4))
        {
          **((_QWORD **)v287 + 6) = *((_QWORD *)v287 + 5);
          v322 = *((_QWORD *)v287 + 5);
          if (v322)
            *(_QWORD *)(v322 + 16) = *((_QWORD *)v287 + 6);
        }
        *((_QWORD *)v287 + 4) = v653;
        v291 = v653[1];
        *((_QWORD *)v287 + 5) = v291;
        if (v291)
          *((_QWORD *)v291 + 2) = v287 + 40;
        *((_QWORD *)v287 + 6) = v647;
        *v647 = v287 + 32;
        *((_WORD *)v287 + 41) = 2 * (v286 & 0x3F);
        v287[124] = 1;
        v793 = 257;
        (*(void (**)(uint64_t, llvm::Value *, uint64_t **, uint64_t, uint64_t))(*(_QWORD *)v785 + 16))(v785, v289, v792, v782, v783);
        if ((_DWORD)v777)
        {
          v314 = (char *)v776;
          v315 = (char *)v776 + 16 * v777;
          v316 = (unsigned __int8 **)(v288 + 112);
          do
          {
            v317 = *(_DWORD *)v314;
            v318 = (unsigned __int8 *)*((_QWORD *)v314 + 1);
            if (v318)
            {
              if (!v317)
              {
                __dst.__r_.__value_.__r.__words[0] = *((_QWORD *)v314 + 1);
                llvm::MetadataTracking::track((uint64_t)&__dst, v318, 2);
                v319 = *v316;
                goto LABEL_420;
              }
            }
            else
            {
              v319 = *v316;
              if (!*v316 && (v288[87] & 0x20) == 0)
                goto LABEL_417;
              if (!v317)
              {
                __dst.__r_.__value_.__r.__words[0] = 0;
LABEL_420:
                if (v319)
                  llvm::MetadataTracking::untrack((uint64_t)(v288 + 112), v319);
                v320 = (unsigned __int8 *)__dst.__r_.__value_.__r.__words[0];
                *v316 = (unsigned __int8 *)__dst.__r_.__value_.__r.__words[0];
                if (v320)
                  llvm::MetadataTracking::retrack((uint64_t)&__dst, v320, (uint64_t)(v288 + 112));
                goto LABEL_417;
              }
            }
            llvm::Value::setMetadata(v289, *(_DWORD *)v314, (llvm::MDNode *)v318);
LABEL_417:
            v314 += 16;
          }
          while (v314 != v315);
        }
      }
      v292 = *(_QWORD *)v249;
      v793 = 257;
      v293 = sub_1C5098D9C((uint64_t *)&v776, (unsigned __int8 *)v275, v292, (uint64_t)v792);
      v294 = (llvm::Value *)v293;
      if ((*(_BYTE *)(v249 + 23) & 0x10) != 0 && v293[16] >= 0x1Cu)
        llvm::Value::takeName((llvm::Value *)v293, (llvm::Value *)v249);
      llvm::replaceDbgDeclare((llvm *)v249, v294, (llvm::Value *)&v748, 0, 0);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v249, v294, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v249 + 40) + 40, (uint64_t ***)v249);
      v295 = *(_QWORD *)(v249 + 24);
      v296 = *(_QWORD **)(v249 + 32);
      *v296 = v295;
      *(_QWORD *)(v295 + 8) = v296;
      *(_QWORD *)(v249 + 24) = 0;
      *(_QWORD *)(v249 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v249);
      if (v776 != &v778)
        free(v776);
      ++v247;
      if (v660 + 1 == v650)
      {
        v323 = v636 + 9;
        for (k = (uint64_t *)v636[10]; ; k = (uint64_t *)k[1])
        {
          if (k == v323)
            goto LABEL_508;
          v325 = k - 3;
          if (!k)
            v325 = 0;
          v326 = (uint64_t *)v325[6];
          if (v326 != v325 + 5)
            break;
        }
        v327 = &v778;
        while (1)
        {
          v328 = v326;
          v326 = (uint64_t *)v326[1];
          v329 = k - 3;
          if (!k)
            v329 = 0;
          if (v326 == v329 + 5)
          {
            v340 = (uint64_t *)k[1];
            k = v636 + 9;
            if (v340 != v323)
            {
              while (1)
              {
                v341 = v340 - 3;
                if (!v340)
                  v341 = 0;
                v326 = (uint64_t *)v341[6];
                if (v326 != v341 + 5)
                  break;
                v340 = (uint64_t *)v340[1];
                if (v340 == v323)
                {
                  k = v636 + 9;
                  goto LABEL_437;
                }
              }
              k = v340;
            }
          }
LABEL_437:
          if (v328)
            v330 = v328 - 3;
          else
            v330 = 0;
          if (*((_BYTE *)v330 + 16) != 84)
            goto LABEL_471;
          v331 = *(v330 - 4);
          if (!v331
            || *(_BYTE *)(v331 + 16)
            || *(_QWORD *)(v331 + 24) != v330[9]
            || (*(_BYTE *)(v331 + 33) & 0x20) == 0)
          {
            goto LABEL_471;
          }
          v332 = *(_DWORD *)(*(v328 - 7) + 36);
          if (v332 == 287)
            break;
          if (v332 == 288)
          {
            sub_1C4773D54((uint64_t)&v776, (uint64_t)(v328 - 3), 0, 0, 0);
            v333 = v684;
            v661 = v327;
            v746 = 257;
            llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v782 + 56) + 40) + 272, (uint64_t)v684);
            v335 = v334;
            v336 = (char *)operator new(0x60uLL);
            v337 = v336;
            v338 = (llvm::Value *)(v336 + 32);
            *((_QWORD *)v336 + 2) = 0;
            *((_QWORD *)v336 + 3) = v336 + 32;
            v793 = 257;
            *((_QWORD *)v336 + 4) = v333;
            *((_QWORD *)v336 + 5) = 0;
            *((_WORD *)v336 + 24) = 60;
            *((_DWORD *)v336 + 13) = 1;
            *(_OWORD *)(v336 + 56) = 0u;
            *(_OWORD *)(v336 + 72) = 0u;
            *((_DWORD *)v336 + 22) = 0;
            *(_QWORD *)v336 = v671;
            *((_QWORD *)v336 + 1) = 0;
            if (v671)
            {
              v339 = *v667;
              *((_QWORD *)v336 + 1) = *v667;
              if (v339)
                v339[2] = (uint64_t)(v336 + 8);
              *((_QWORD *)v336 + 2) = v667;
              *v667 = (uint64_t *)v336;
            }
            *((_WORD *)v336 + 25) = 2 * (v335 & 0x3F);
            v336[92] = 1;
            llvm::Value::setName((uint64_t ***)v336 + 4, (uint64_t)v792);
            (*(void (**)(uint64_t, llvm::Value *, std::string *, uint64_t, uint64_t))(*(_QWORD *)v785 + 16))(v785, v338, &__dst, v782, v783);
            if (!(_DWORD)v777)
            {
LABEL_452:
              llvm::Value::takeName(v338, (llvm::Value *)(v328 - 3));
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v328 - 3), v338, (llvm::Value *)1);
              goto LABEL_469;
            }
            v355 = (char *)v776;
            v356 = (char *)v776 + 16 * v777;
            v357 = (unsigned __int8 **)(v337 + 80);
            while (2)
            {
              v358 = *(_DWORD *)v355;
              v359 = (unsigned __int8 *)*((_QWORD *)v355 + 1);
              if (v359)
              {
                v658 = v356;
                if (v358)
                  goto LABEL_480;
                v770 = (void *)*((_QWORD *)v355 + 1);
                llvm::MetadataTracking::track((uint64_t)&v770, v359, 2);
                v360 = *v357;
LABEL_485:
                if (v360)
                  llvm::MetadataTracking::untrack((uint64_t)(v337 + 80), v360);
                v361 = (unsigned __int8 *)v770;
                *v357 = (unsigned __int8 *)v770;
                if (v361)
                  llvm::MetadataTracking::retrack((uint64_t)&v770, v361, (uint64_t)(v337 + 80));
                v327 = v661;
LABEL_481:
                v356 = v658;
              }
              else
              {
                v360 = *v357;
                if (*v357 || (v337[55] & 0x20) != 0)
                {
                  v658 = v356;
                  if (!v358)
                  {
                    v770 = 0;
                    goto LABEL_485;
                  }
LABEL_480:
                  llvm::Value::setMetadata(v338, v358, (llvm::MDNode *)v359);
                  goto LABEL_481;
                }
              }
              v355 += 16;
              if (v355 == v356)
                goto LABEL_452;
              continue;
            }
          }
LABEL_471:
          if (k == v323)
            goto LABEL_508;
        }
        sub_1C4773D54((uint64_t)&v776, (uint64_t)(v328 - 3), 0, 0, 0);
        v342 = (uint64_t *)v328[-4 * (*((_DWORD *)v328 - 1) & 0x7FFFFFF) - 3];
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v782 + 56) + 40) + 272, *v342);
        v344 = v343;
        v345 = (char *)operator new(0x80uLL);
        v346 = v345;
        *((_DWORD *)v345 + 21) = *((_DWORD *)v345 + 21) & 0x38000000 | 2;
        *(_QWORD *)v345 = 0;
        *((_QWORD *)v345 + 2) = 0;
        *((_QWORD *)v345 + 1) = 0;
        *((_QWORD *)v345 + 5) = 0;
        *((_QWORD *)v345 + 6) = 0;
        *((_QWORD *)v345 + 4) = 0;
        v347 = (uint64_t *)(v345 + 32);
        *((_QWORD *)v345 + 8) = **(_QWORD **)*v342 + 1576;
        v348 = (llvm::Value *)(v345 + 64);
        *((_QWORD *)v345 + 3) = v345 + 64;
        *((_QWORD *)v345 + 7) = v345 + 64;
        *((_QWORD *)v345 + 9) = 0;
        v345[80] = 61;
        v345[81] = 0;
        *((_WORD *)v345 + 41) = 0;
        *((_DWORD *)v345 + 21) = 2;
        *(_OWORD *)(v345 + 88) = 0u;
        *(_OWORD *)(v345 + 104) = 0u;
        *((_DWORD *)v345 + 30) = 0;
        *(_QWORD *)v345 = v342;
        v351 = v342[1];
        v350 = v342 + 1;
        v349 = v351;
        *((_QWORD *)v345 + 1) = v351;
        if (v351)
          *(_QWORD *)(v349 + 16) = v345 + 8;
        *((_QWORD *)v345 + 2) = v350;
        *v350 = v345;
        if (*((_QWORD *)v345 + 4))
        {
          **((_QWORD **)v345 + 6) = *((_QWORD *)v345 + 5);
          v369 = *((_QWORD *)v345 + 5);
          if (v369)
            *(_QWORD *)(v369 + 16) = *((_QWORD *)v345 + 6);
        }
        *v347 = v671;
        if (v671)
        {
          v352 = *v667;
          *((_QWORD *)v345 + 5) = *v667;
          if (v352)
            v352[2] = (uint64_t)(v345 + 40);
          *((_QWORD *)v345 + 6) = v667;
          *v667 = v347;
        }
        *((_WORD *)v345 + 41) = 2 * (v344 & 0x3F);
        v345[124] = 1;
        v793 = 257;
        (*(void (**)(uint64_t, llvm::Value *, uint64_t **, uint64_t, uint64_t))(*(_QWORD *)v785 + 16))(v785, v348, v792, v782, v783);
        if (!(_DWORD)v777)
        {
LABEL_468:
          llvm::Value::takeName(v348, (llvm::Value *)(v328 - 3));
LABEL_469:
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v328[2] + 40, (uint64_t ***)v328 - 3);
          v353 = *v328;
          v354 = (uint64_t *)v328[1];
          *v354 = *v328;
          *(_QWORD *)(v353 + 8) = v354;
          *v328 = 0;
          v328[1] = 0;
          llvm::Value::deleteValue((llvm::Value *)(v328 - 3));
          if (v776 != v327)
            free(v776);
          goto LABEL_471;
        }
        v362 = (char *)v776;
        v363 = (char *)v776 + 16 * v777;
        v364 = (unsigned __int8 **)(v346 + 112);
        while (1)
        {
          v365 = *(_DWORD *)v362;
          v366 = (unsigned __int8 *)*((_QWORD *)v362 + 1);
          if (v366)
          {
            v662 = v364;
            if (!v365)
            {
              __dst.__r_.__value_.__r.__words[0] = *((_QWORD *)v362 + 1);
              llvm::MetadataTracking::track((uint64_t)&__dst, v366, 2);
              v367 = *v662;
              goto LABEL_502;
            }
          }
          else
          {
            v367 = *v364;
            if (!*v364 && (v346[87] & 0x20) == 0)
              goto LABEL_499;
            v662 = v364;
            if (!v365)
            {
              __dst.__r_.__value_.__r.__words[0] = 0;
LABEL_502:
              if (v367)
                llvm::MetadataTracking::untrack((uint64_t)v662, v367);
              v368 = (unsigned __int8 *)__dst.__r_.__value_.__r.__words[0];
              *v662 = (unsigned __int8 *)__dst.__r_.__value_.__r.__words[0];
              if (v368)
                llvm::MetadataTracking::retrack((uint64_t)&__dst, v368, (uint64_t)v662);
              goto LABEL_498;
            }
          }
          llvm::Value::setMetadata(v348, v365, (llvm::MDNode *)v366);
LABEL_498:
          v364 = v662;
LABEL_499:
          v362 += 16;
          if (v362 == v363)
            goto LABEL_468;
        }
      }
    }
    v297 = (char *)v776;
    v298 = (char *)v776 + 16 * v777;
    v299 = (unsigned __int8 **)(v266 + 80);
    while (2)
    {
      v300 = *(_DWORD *)v297;
      v301 = (unsigned __int8 *)*((_QWORD *)v297 + 1);
      if (v301)
      {
        if (v300)
          goto LABEL_385;
        v770 = (void *)*((_QWORD *)v297 + 1);
        v641 = v298;
        v304 = v299;
        llvm::MetadataTracking::track((uint64_t)&v770, v301, 2);
        v299 = v304;
        v298 = v641;
        v302 = *v304;
LABEL_390:
        if (v302)
        {
          v642 = v298;
          v306 = v299;
          llvm::MetadataTracking::untrack((uint64_t)v299, v302);
          v299 = v306;
          v298 = v642;
        }
        v305 = (unsigned __int8 *)v770;
        *v299 = (unsigned __int8 *)v770;
        if (v305)
        {
          v640 = v298;
          v303 = v299;
          llvm::MetadataTracking::retrack((uint64_t)&v770, v305, (uint64_t)v299);
          goto LABEL_386;
        }
      }
      else
      {
        v302 = *v299;
        if (*v299 || (v266[55] & 0x20) != 0)
        {
          if (!v300)
          {
            v770 = 0;
            goto LABEL_390;
          }
LABEL_385:
          v640 = v298;
          v303 = v299;
          llvm::Value::setMetadata((llvm::Value *)v267, *(_DWORD *)v297, (llvm::MDNode *)v301);
LABEL_386:
          v299 = v303;
          v298 = v640;
        }
      }
      v297 += 16;
      if (v297 == v298)
        goto LABEL_352;
      continue;
    }
  }
LABEL_508:
  sub_1C50F023C((uint64_t)&v748);
  v372 = v688;
  if ((_DWORD)v733)
  {
    v373 = (char *)v732;
    v374 = (char *)v732 + 8 * v733;
    v375 = (uint64_t *)(v688 + 8);
    while (1)
    {
      v376 = *(_QWORD *)v373;
      v377 = *(_QWORD *)v373 + 24;
      v725 = *(_QWORD *)(*(_QWORD *)v373 + 40);
      v726 = v377;
      v378 = *(unsigned __int8 **)(v376 + 48);
      *(_QWORD *)&v748 = v378;
      if (v378)
      {
        llvm::MetadataTracking::track((uint64_t)&v748, v378, 2);
        v379 = v748;
      }
      else
      {
        v379 = 0;
      }
      sub_1C4774EF4((uint64_t)&v722, 0, v379);
      if ((_QWORD)v748)
        llvm::MetadataTracking::untrack((uint64_t)&v748, (unsigned __int8 *)v748);
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v725 + 56) + 40) + 272, (uint64_t)*v655);
      v381 = v380;
      v382 = (char *)operator new(0x80uLL);
      v383 = v382;
      *((_DWORD *)v382 + 21) = *((_DWORD *)v382 + 21) & 0x38000000 | 2;
      *(_QWORD *)v382 = 0;
      *((_QWORD *)v382 + 2) = 0;
      *((_QWORD *)v382 + 1) = 0;
      *((_QWORD *)v382 + 5) = 0;
      *((_QWORD *)v382 + 6) = 0;
      *((_QWORD *)v382 + 4) = 0;
      *((_QWORD *)v382 + 8) = ***v655 + 1576;
      v384 = (llvm::Value *)(v382 + 64);
      *((_QWORD *)v382 + 3) = v382 + 64;
      *((_QWORD *)v382 + 7) = v382 + 64;
      *((_QWORD *)v382 + 9) = 0;
      v382[80] = 61;
      v382[81] = 0;
      *((_DWORD *)v382 + 21) = 2;
      *(_OWORD *)(v382 + 88) = 0u;
      *(_OWORD *)(v382 + 104) = 0u;
      *((_DWORD *)v382 + 30) = 0;
      v385 = *v670;
      *(_QWORD *)v382 = v655;
      *((_QWORD *)v382 + 1) = v385;
      if (v385)
        *(_QWORD *)(v385 + 16) = v382 + 8;
      *((_QWORD *)v382 + 2) = v670;
      *v670 = (uint64_t)v382;
      *((_QWORD *)v382 + 4) = v372;
      if (v372)
      {
        v386 = *v375;
        *((_QWORD *)v382 + 5) = *v375;
        if (v386)
          *(_QWORD *)(v386 + 16) = v382 + 40;
        *((_QWORD *)v382 + 6) = v375;
        *v375 = (uint64_t)(v382 + 32);
      }
      *((_WORD *)v382 + 41) = 2 * (v381 & 0x3F);
      v382[124] = 1;
      LOWORD(v751) = 257;
      (*(void (**)(uint64_t, llvm::Value *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v728 + 16))(v728, v384, &v748, v725, v726);
      if (v723)
        break;
LABEL_521:
      v373 += 8;
      if (v373 == v374)
        goto LABEL_539;
    }
    v387 = (char *)v722;
    v388 = (char *)v722 + 16 * v723;
    v389 = (unsigned __int8 **)(v383 + 112);
    while (2)
    {
      v390 = *(_DWORD *)v387;
      v371 = (unsigned __int8 *)*((_QWORD *)v387 + 1);
      if (v371)
      {
        if (v390)
          goto LABEL_531;
        v776 = (void *)*((_QWORD *)v387 + 1);
        v674 = v389;
        llvm::MetadataTracking::track((uint64_t)&v776, v371, 2);
        v389 = v674;
        v370 = *v674;
LABEL_535:
        if (v370)
        {
          v676 = v389;
          llvm::MetadataTracking::untrack((uint64_t)v389, v370);
          v389 = v676;
        }
        v370 = (unsigned __int8 *)v776;
        *v389 = (unsigned __int8 *)v776;
        if (v370)
        {
          v675 = v389;
          llvm::MetadataTracking::retrack((uint64_t)&v776, v370, (uint64_t)v389);
          v389 = v675;
        }
      }
      else
      {
        v370 = *v389;
        if (*v389 || (v383[87] & 0x20) != 0)
        {
          if (!v390)
          {
            v776 = 0;
            goto LABEL_535;
          }
LABEL_531:
          v673 = v388;
          v391 = v389;
          llvm::Value::setMetadata(v384, *(_DWORD *)v387, (llvm::MDNode *)v371);
          v389 = v391;
          v388 = v673;
        }
      }
      v387 += 16;
      if (v387 == v388)
        goto LABEL_521;
      continue;
    }
  }
LABEL_539:
  v74 = v643;
  if (v372)
  {
    if (*(_BYTE *)(v372 + 16) == 84)
    {
      v392 = (_QWORD **)v679[14];
      if (!v392 || (*((_BYTE *)v392 + 17) & 8) == 0)
      {
        v393 = *(_QWORD *)(v372 - 32);
        if (v393)
        {
          if (!*(_BYTE *)(v393 + 16)
            && *(_QWORD *)(v393 + 24) == *(_QWORD *)(v372 + 72)
            && (*(_QWORD *)(v393 + 72) != v393 + 72 || (*(_BYTE *)(v393 + 34) & 0x80) != 0))
          {
            if (((v401 = *(_QWORD *)(v372 + 64)) != 0 && (*(_BYTE *)(v401 + 12) & 4) != 0
               || llvm::CallBase::hasFnAttrOnCalledFunction(v372, 2))
              && !llvm::isInlineViable((llvm *)v393, (llvm::Function *)v370, (llvm::BasicBlock *)v371)
              || (*(_BYTE *)(v393 + 16) != 3
               || (Section = llvm::GlobalValue::getSection((llvm::GlobalValue *)v393), v403 != 12)
               || (*(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
                 ? (v635 = *((unsigned int *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
                 : (v635 = 0),
                   !v635))
              && ((*(_DWORD *)(v393 + 32) & 0xFu) - 5 < 4 || ((1 << (*(_DWORD *)(v393 + 32) & 0xF)) & 0x614) == 0)
              && ((v404 = *(llvm::Module **)(v393 + 40)) == 0
               || !llvm::Module::getSemanticInterposition(v404)
               || (*(_BYTE *)(v393 + 33) & 0x40) != 0)
              && ((v405 = *(_QWORD *)(v393 + 112)) == 0 || (*(_BYTE *)(v405 + 15) & 8) == 0)
              && ((v406 = *(_QWORD *)(v372 + 64)) == 0 || (*(_BYTE *)(v406 + 15) & 8) == 0)
              && (llvm::CallBase::hasFnAttrOnCalledFunction(v372, 27) & 1) == 0)
            {
              v748 = 0uLL;
              v750 = 0;
              v751 = 0;
              v752 = 0;
              v753 = &v755;
              v754 = 0x400000000;
              v758[0] = (char *)&v759;
              v758[1] = (char *)0x800000000;
              v760 = v762;
              v761 = 0x800000000;
              v762[64] = 1;
              llvm::InlineFunction((uint64_t ***)v372, (uint64_t)&v748, 0, 1, 0);
              if (v760 != v762)
                free(v760);
              sub_1C52768FC(v758);
              if (v753 != &v755)
                free(v753);
            }
          }
        }
      }
    }
  }
  if (v722 != &v724)
    free(v722);
LABEL_548:
  if (v729 != v731)
    free(v729);
  if (v732 != v734)
    free(v732);
  if (v735 != v737)
    free(v735);
  if (v738 != v740)
    free(v738);
  if (v741 != v743)
    free(v741);
  llvm::ScalarEvolution::~ScalarEvolution((llvm::ScalarEvolution *)v693);
  llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)v694);
  *(_QWORD *)&v748 = v702;
  sub_1C50B10F0((void ***)&v748);
  if (v698 != v697)
    free(v698);
  if (v694[0] != v695)
    free(v694[0]);
  v7 = !v74;
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(v704);
  if (v721)
  {
    sub_1C4DC4E38(v715);
    if (v713[0] != &v714)
      free(v713[0]);
  }
  return v7;
}

uint64_t sub_1C5275E7C(uint64_t a1, llvm::AllocaInst *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  BOOL v8;
  const char *v9;
  char v10;
  uint64_t v11;
  int isArrayAllocation;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;

  v4 = *((_QWORD *)a2 + 8);
  sub_1C4768AD0(a1, v4);
  v6 = (unint64_t)(v5 + 7) >> 3;
  v8 = v7 == 1;
  llvm::DataLayout::getAlignment(a1, v4);
  v11 = ((1 << v10) + v6 - 1) & -(1 << v10);
  if (v8)
  isArrayAllocation = llvm::AllocaInst::isArrayAllocation(a2);
  result = v11;
  if (isArrayAllocation)
  {
    result = 0;
    v14 = *((_QWORD *)a2 - 4);
    if (v14)
    {
      if (*(_BYTE *)(v14 + 16) == 16)
      {
        v15 = (_QWORD *)(v14 + 24);
        if (*(_DWORD *)(v14 + 32) >= 0x41u)
          v15 = (_QWORD *)*v15;
        return *v15 * v11;
      }
    }
  }
  return result;
}

uint64_t sub_1C5275F4C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t **v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  int v51;
  _BYTE v52[132];
  __int32 v53;
  void *v54;
  unsigned int v55;
  unsigned int v56;
  _QWORD v57[10];

  v57[8] = *MEMORY[0x1E0C80C00];
  v48 = v52;
  v49 = v52;
  v50 = 16;
  v51 = 0;
  v54 = v57;
  v56 = 8;
  v57[0] = a2;
  v4 = 1;
  while (1)
  {
    v5 = (uint64_t *)*((_QWORD *)v54 + --v4);
    v55 = v4;
    v6 = (unint64_t *)v5[1];
    if (v6)
      break;
LABEL_72:
    if (!v4)
    {
      v46 = 1;
      goto LABEL_75;
    }
  }
  while (1)
  {
    v7 = v6[3];
    v8 = *(unsigned __int8 *)(v7 + 16);
    if (v8 <= 0x3C)
      break;
    if (v8 == 61)
    {
      v21 = *(_DWORD *)(v7 + 20);
      if ((v21 & 0x40000000) != 0)
        v22 = *(uint64_t ***)(v7 - 8);
      else
        v22 = (uint64_t **)(v7 - 32 * (v21 & 0x7FFFFFF));
      v25 = *v22;
      if (v5 == v25)
        goto LABEL_74;
      v26 = *v6;
      sub_1C4768AD0(*(_QWORD *)(a1 + 16), *v25);
      v29 = v28;
      if ((_DWORD)v27 == 1)
      v13 = (unint64_t)(v29 + 7) >> 3;
      v14 = a1;
      v15 = v26;
LABEL_64:
      if ((sub_1C52763A4(v14, v15, v13, a2) & 1) == 0)
        goto LABEL_74;
      goto LABEL_65;
    }
    if (v8 == 84)
      goto LABEL_13;
    if (v8 != 88)
      goto LABEL_25;
LABEL_65:
    v6 = (unint64_t *)v6[1];
    if (!v6)
    {
      v4 = v55;
      goto LABEL_72;
    }
  }
  if (v8 != 33)
  {
    if (v8 != 60)
    {
      if (v8 == 29)
        goto LABEL_74;
LABEL_25:
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v48, v6[3]);
      if (v23)
      {
        v24 = v55;
        if (v55 >= (unint64_t)v56)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v57, v55 + 1, 8);
          v24 = v55;
        }
        *((_QWORD *)v54 + v24) = v7;
        ++v55;
      }
      goto LABEL_65;
    }
    v9 = *v6;
    sub_1C4768AD0(*(_QWORD *)(a1 + 16), *(_QWORD *)v7);
    v12 = v11;
    if ((_DWORD)v10 == 1)
    v13 = (unint64_t)(v12 + 7) >> 3;
    v14 = a1;
    v15 = v9;
    goto LABEL_64;
  }
LABEL_13:
  if (llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)v6[3]))
    goto LABEL_65;
  if (sub_1C4DE85D0(v7))
  {
    v16 = *(_DWORD *)(*(_QWORD *)(v7 - 32) + 36) - 194;
    if (v16 > 3 || v16 == 1)
    {
      v41 = *(_DWORD *)(v7 + 20) & 0x7FFFFFF;
      v15 = *(_QWORD *)(v7 - 32 * v41);
      if (v15 != *v6)
        goto LABEL_65;
      v19 = -v41;
    }
    else
    {
      v18 = *(_DWORD *)(v7 + 20) & 0x7FFFFFF;
      v19 = -v18;
      v20 = (_QWORD *)(v7 - 32 * v18);
      v15 = v20[4];
      if (v15 != *v6)
      {
        if (*v20 != *v6)
          goto LABEL_65;
        v15 = *v6;
      }
    }
    v42 = *(_QWORD *)(v7 + 32 * v19 + 64);
    if (v42)
      v43 = *(_BYTE *)(v42 + 16) == 16;
    else
      v43 = 0;
    if (!v43)
      goto LABEL_74;
    v44 = (unint64_t *)(v42 + 24);
    if (*(_DWORD *)(v42 + 32) >= 0x41u)
      v44 = (unint64_t *)*v44;
    v13 = *v44;
    v14 = a1;
    goto LABEL_64;
  }
  v30 = *(unsigned __int8 *)(v7 + 16);
  if (v30 == 84)
  {
    v31 = 0;
  }
  else if (v30 == 39)
  {
    v31 = (*(_DWORD *)(v7 + 80) + 1);
  }
  else
  {
    v31 = 2;
  }
  v32 = *(_DWORD *)(v7 + 20);
  v33 = v32 & 0x7FFFFFF;
  v34 = v7 - 32 * v33;
  if (v32 < 0 && (v45 = *(_QWORD *)(v34 - 8), (v45 & 0xFFFFFFFF0) != 0))
    v35 = (*(_DWORD *)(v34 - 12) - *(_DWORD *)(v34 - v45));
  else
    v35 = 0;
  if (v34 == v7 - 32 * v31 - 32 * v35 - 32)
    goto LABEL_65;
  v36 = 0;
  v37 = (32 * v31 + 32 * v35) ^ 0xFFFFFFFFFFFFFFE0;
  v38 = -32 * v33;
  while (1)
  {
    if (*(uint64_t **)(v7 + v38) == v5)
    {
      if (!sub_1C4D91D40(v7, v36, 22))
        break;
      if ((sub_1C4D91D40(v7, v36, 44) & 1) == 0)
      {
        v39 = *(_QWORD *)(v7 + 64);
        if (!v39 || (*(_BYTE *)(v39 + 17) & 0x10) == 0)
        {
          v53 = 7;
          if (sub_1C53E4BBC(v7, &v53, 1uLL))
          {
            v40 = *(_QWORD *)(v7 - 32);
            if (!v40
              || *(_BYTE *)(v40 + 16)
              || *(_QWORD *)(v40 + 24) != *(_QWORD *)(v7 + 72)
              || *(_DWORD *)(v40 + 36) != 7)
            {
              break;
            }
          }
          if (!llvm::CallBase::hasFnAttrOnCalledFunction(v7, 44))
            break;
        }
      }
    }
    v38 += 32;
    ++v36;
    if (v37 == v38)
      goto LABEL_65;
  }
LABEL_74:
  v46 = 0;
LABEL_75:
  if (v54 != v57)
    free(v54);
  if (v49 != v48)
    free(v49);
  return v46;
}

uint64_t sub_1C52763A4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  const llvm::SCEV *SCEVIter;
  uint64_t PointerBase;
  BOOL v17;
  char *v19;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(v6 + 104);
  v8 = *(_DWORD *)(v6 + 120);
  if (!v8)
  {
LABEL_7:
    v11 = v7 + 48 * v8;
    goto LABEL_8;
  }
  v9 = v8 - 1;
  v10 = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v11 = v7 + 48 * v10;
  v12 = *(_QWORD *)(v11 + 24);
  if (v12 != a2)
  {
    v13 = 1;
    while (v12 != -4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & v9;
      v11 = v7 + 48 * (v14 & v9);
      v12 = *(_QWORD *)(v11 + 24);
      if (v12 == a2)
        goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v11 == v7 + 48 * v8 || (SCEVIter = *(const llvm::SCEV **)(v11 + 40)) == 0)
  {
    SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v6, a2);
    v6 = *(_QWORD *)(a1 + 32);
  }
  PointerBase = llvm::ScalarEvolution::getPointerBase((llvm::ScalarEvolution *)v6, SCEVIter);
  if (PointerBase)
    v17 = *(unsigned __int16 *)(PointerBase + 24) == 14;
  else
    v17 = 0;
  if (v17 && *(_QWORD *)(PointerBase - 8) == a4)
  {
    v19 = (char *)sub_1C52764D0
        + 4
        * byte_1C85FB8C8[*(unsigned __int16 *)(llvm::ScalarEvolution::removePointerBase(*(llvm::ScalarEvolution **)(a1 + 32), SCEVIter)+ 24)];
    __asm { BR              X12 }
  }
  return 0;
}

void sub_1C52764D0()
{
  JUMPOUT(0x1C52764BCLL);
}

void sub_1C52764DC()
{
  JUMPOUT(0x1C52764D4);
}

void sub_1C52764E4(uint64_t a1@<X8>, unint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, unint64_t a8, unsigned int a9, uint64_t a10, unsigned int a11, uint64_t a12, unsigned int a13, unint64_t a14, unsigned int a15, uint64_t a16, unsigned int a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  unsigned int v27;
  unsigned int IndexTypeSizeInBits;
  uint64_t RangeRef;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  void *v47;
  size_t v48;
  void *v49;

  v23 = *(uint64_t **)(v17 + 32);
  v24 = *v23;
  v25 = *(_QWORD *)(*(_QWORD *)a1 + 40) + 272;
  if (*(_BYTE *)(*v23 + 8) == 15)
  {
    IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v25, v24);
  }
  else
  {
    sub_1C4768AD0(v25, v24);
    IndexTypeSizeInBits = v27;
    if ((_DWORD)v26 == 1)
  }
  RangeRef = llvm::ScalarEvolution::getRangeRef(*(_QWORD *)(v20 + 32), v21, 0, 0);
  v30 = RangeRef;
  v31 = *(unsigned int *)(RangeRef + 8);
  *(_DWORD *)(v22 - 72) = v31;
  if (v31 > 0x40)
  {
    v46 = ((unint64_t)(v31 + 63) >> 3) & 0x3FFFFFF8;
    v47 = (void *)operator new[]();
    *(_QWORD *)(v22 - 80) = v47;
    memcpy(v47, *(const void **)v30, v46);
  }
  else
  {
    *(_QWORD *)(v22 - 80) = *(_QWORD *)RangeRef;
  }
  v32 = *(unsigned int *)(v30 + 24);
  *(_DWORD *)(v22 - 56) = v32;
  if (v32 > 0x40)
  {
    v48 = ((unint64_t)(v32 + 63) >> 3) & 0x3FFFFFF8;
    v49 = (void *)operator new[]();
    *(_QWORD *)(v22 - 64) = v49;
    memcpy(v49, *(const void **)(v30 + 16), v48);
  }
  else
  {
    *(_QWORD *)(v22 - 64) = *(_QWORD *)(v30 + 16);
  }
  a17 = IndexTypeSizeInBits;
  if (IndexTypeSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&a16, 0, 0);
    a15 = IndexTypeSizeInBits;
    llvm::APInt::initSlowCase((llvm::APInt *)&a14, v19, 0);
    v37 = a17;
    v34 = a16;
    v36 = a15;
    v35 = a14;
  }
  else
  {
    if (IndexTypeSizeInBits)
      v33 = 0xFFFFFFFFFFFFFFFFLL >> -(char)IndexTypeSizeInBits;
    else
      v33 = 0;
    v34 = 0;
    v35 = v33 & v19;
    v36 = IndexTypeSizeInBits;
    v37 = IndexTypeSizeInBits;
  }
  *(_DWORD *)(v22 - 104) = v37;
  *(_QWORD *)(v22 - 112) = v34;
  *(_DWORD *)(v22 - 88) = v36;
  *(_QWORD *)(v22 - 96) = v35;
  llvm::ConstantRange::add((llvm::ConstantRange *)(v22 - 80), (const llvm::ConstantRange *)(v22 - 112), (uint64_t)&a10);
  a5 = IndexTypeSizeInBits;
  if (IndexTypeSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&a4, 0, 0);
    a3 = IndexTypeSizeInBits;
    llvm::APInt::initSlowCase((llvm::APInt *)&a2, v18, 0);
    v41 = a5;
    v39 = a4;
    IndexTypeSizeInBits = a3;
    v40 = a2;
  }
  else
  {
    if (IndexTypeSizeInBits)
      v38 = 0xFFFFFFFFFFFFFFFFLL >> -(char)IndexTypeSizeInBits;
    else
      v38 = 0;
    v39 = 0;
    v40 = v38 & v18;
    v41 = IndexTypeSizeInBits;
  }
  a7 = v41;
  a6 = v39;
  a9 = IndexTypeSizeInBits;
  a8 = v40;
  llvm::ConstantRange::contains((llvm::ConstantRange *)&a6, (const llvm::ConstantRange *)&a10);
  if (IndexTypeSizeInBits >= 0x41 && v40)
  {
    MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
    v41 = a7;
  }
  if (v41 >= 0x41 && a6)
    MEMORY[0x1CAA32F9C](a6, 0x1000C8000313F17);
  if (a13 >= 0x41 && a12)
    MEMORY[0x1CAA32F9C](a12, 0x1000C8000313F17);
  if (a11 >= 0x41 && a10)
    MEMORY[0x1CAA32F9C](a10, 0x1000C8000313F17);
  if (*(_DWORD *)(v22 - 88) >= 0x41u)
  {
    v43 = *(_QWORD *)(v22 - 96);
    if (v43)
      MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(v22 - 104) >= 0x41u)
  {
    v44 = *(_QWORD *)(v22 - 112);
    if (v44)
      MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(v22 - 56) >= 0x41u)
  {
    v45 = *(_QWORD *)(v22 - 64);
    if (v45)
      MEMORY[0x1CAA32F9C](v45, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(v22 - 72) >= 0x41u)
  {
    v42 = *(_QWORD *)(v22 - 80);
    if (v42)
      MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
  }
  JUMPOUT(0x1C5276480);
}

uint64_t sub_1C5276870(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v3 = *(_DWORD *)(result + 20);
  v4 = v3 & 0x7FFFFFF;
  if ((v3 & 0x7FFFFFF) != 0)
  {
    v7 = result;
    v8 = 0;
    do
    {
      v9 = *(_DWORD *)(v7 + 20);
      if ((v9 & 0x40000000) != 0)
        v10 = *(_QWORD *)(v7 - 8);
      else
        v10 = v7 - 32 * (v9 & 0x7FFFFFF);
      if (*(_QWORD *)(v10 + 32 * *(unsigned int *)(v7 + 60) + 8 * v8) == a2)
        result = sub_1C6125834(v7, v8, a3);
      ++v8;
    }
    while (v4 != v8);
  }
  return result;
}

char **sub_1C52768FC(char **a1)
{
  char *v2;
  int v3;
  char *v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  int32x2_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v5 = &v2[24 * v3];
    do
    {
      v6 = *((_QWORD *)v5 - 1);
      if (v6 != -8192 && v6 != -4096 && v6 != 0)
      {
        v8 = *((_QWORD *)v5 - 3) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v8 = *((_QWORD *)v5 - 2);
        v9 = (unint64_t *)*((_QWORD *)v5 - 2);
        if (v9)
        {
          *v9 = *v9 & 7 | v8;
        }
        else
        {
          v10 = *((_QWORD *)v5 - 1);
          v11 = ***(int32x2_t ****)v10;
          v12 = (unint64_t)v11[303];
          if (v12 <= v8)
          {
            v13 = v11[305].u32[0];
            if (v12 + 16 * v13 > v8)
            {
              v14 = v13 - 1;
              LODWORD(v15) = v14 & ((v10 >> 4) ^ (v10 >> 9));
              v16 = (uint64_t *)(v12 + 16 * v15);
              v17 = *v16;
              if (v10 == *v16)
              {
LABEL_24:
                *v16 = -8192;
                v11[304] = vadd_s32(v11[304], (int32x2_t)0x1FFFFFFFFLL);
                v10 = *((_QWORD *)v5 - 1);
              }
              else
              {
                v18 = 1;
                while (v17 != -4096)
                {
                  v19 = v15 + v18++;
                  v15 = v19 & v14;
                  v17 = *(_QWORD *)(v12 + 16 * v15);
                  if (v10 == v17)
                  {
                    v16 = (uint64_t *)(v12 + 16 * v15);
                    goto LABEL_24;
                  }
                }
              }
              *(_BYTE *)(v10 + 17) &= ~1u;
            }
          }
        }
      }
      v5 -= 24;
    }
    while (v5 != v2);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C5276A48()
{
  char v1;
  char *v2;
  int v3;
  __n128 v4;

  LOBYTE(v3) = 0;
  v4.n128_u64[0] = (unint64_t)&v3;
  LODWORD(v2) = 1;
  sub_1C6210CD0((char **)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7FF630, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"enable safe stack coloring";
  v4.n128_u64[1] = 26;
  v3 = 1;
  v1 = 1;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED7FF6F0, "safe-stack-coloring", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FF6F0, &dword_1C475E000);
}

void llvm::safestack::StackLayout::print(llvm::safestack::StackLayout *this, llvm::raw_ostream *a2)
{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  _WORD *v7;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  _BYTE *v21;
  uint64_t v22;

  v4 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v4 > 0xEuLL)
  {
    qmemcpy(v4, "Stack regions:\n", 15);
    *((_QWORD *)a2 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Stack regions:\n", 0xFuLL);
  }
  if (*((_DWORD *)this + 4))
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = (_WORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v7 > 1uLL)
      {
        *v7 = 8224;
        *((_QWORD *)a2 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a2, "  ", 2uLL);
      }
      sub_1C5E21910(a2, v6, 0, 0, 0);
      v8 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v8) > 2)
      {
        *(_BYTE *)(v8 + 2) = 91;
        *(_WORD *)v8 = 8250;
        *((_QWORD *)a2 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(a2, ": [", 3uLL);
      }
      sub_1C5E21910(a2, *(unsigned int *)(*((_QWORD *)this + 1) + v5), 0, 0, 0);
      v9 = (_WORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v9 > 1uLL)
      {
        *v9 = 8236;
        *((_QWORD *)a2 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a2, ", ", 2uLL);
      }
      sub_1C5E21910(a2, *(unsigned int *)(*((_QWORD *)this + 1) + v5 + 4), 0, 0, 0);
      v10 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v10) > 8)
      {
        *(_BYTE *)(v10 + 8) = 32;
        *(_QWORD *)v10 = *(_QWORD *)"), range ";
        *((_QWORD *)a2 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(a2, "), range ", 9uLL);
      }
      sub_1C6210DA4(a2, *((_QWORD *)this + 1) + v5 + 8);
      v11 = (_BYTE *)*((_QWORD *)a2 + 4);
      if (*((_BYTE **)a2 + 3) == v11)
      {
        llvm::raw_ostream::write(a2, "\n", 1uLL);
      }
      else
      {
        *v11 = 10;
        ++*((_QWORD *)a2 + 4);
      }
      ++v6;
      v5 += 80;
    }
    while (v6 < *((unsigned int *)this + 4));
  }
  v12 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v12 > 0xEuLL)
  {
    qmemcpy(v12, "Stack objects:\n", 15);
    *((_QWORD *)a2 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Stack objects:\n", 0xFuLL);
  }
  v13 = *((_QWORD *)this + 253);
  v14 = *((unsigned int *)this + 510);
  v15 = v13 + 16 * v14;
  if (*((_DWORD *)this + 508))
  {
    if ((_DWORD)v14)
    {
      v16 = 16 * v14;
      v17 = *((_QWORD *)this + 253);
      while ((*(_QWORD *)v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v17 += 16;
        v16 -= 16;
        if (!v16)
          goto LABEL_29;
      }
    }
    else
    {
      v17 = *((_QWORD *)this + 253);
    }
  }
  else
  {
LABEL_29:
    v17 = v13 + 16 * v14;
  }
  v18 = v13 + 16 * v14;
  while (v17 != v18)
  {
    v19 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v19) > 4)
    {
      *(_BYTE *)(v19 + 4) = 32;
      *(_DWORD *)v19 = 1952522272;
      *((_QWORD *)a2 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(a2, "  at ", 5uLL);
    }
    sub_1C5E21910(a2, *(unsigned int *)(v17 + 8), 0, 0, 0);
    v20 = (_WORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v20 > 1uLL)
    {
      *v20 = 8250;
      *((_QWORD *)a2 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a2, ": ", 2uLL);
    }
    llvm::Value::print(*(llvm::Value **)v17, a2, 0);
    v21 = (_BYTE *)*((_QWORD *)a2 + 4);
    if (*((_BYTE **)a2 + 3) == v21)
    {
      llvm::raw_ostream::write(a2, "\n", 1uLL);
    }
    else
    {
      *v21 = 10;
      ++*((_QWORD *)a2 + 4);
    }
    v22 = v17 + 16;
    v17 = v15;
    if (v22 != v15)
    {
      v17 = v22;
      while ((*(_QWORD *)v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v17 += 16;
        if (v17 == v15)
        {
          v17 = v15;
          break;
        }
      }
    }
  }
}

_QWORD *llvm::safestack::StackLayout::addObject(uint64_t *a1, uint64_t a2, int a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v8;
  unsigned int v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *result;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 v17;
  void *__dst;
  uint64_t v19;
  _DWORD v20[14];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v14 = a2;
  v15 = a2;
  v8 = (uint64_t)(a1 + 163);
  v16 = a3;
  v17 = a4;
  __dst = v20;
  v19 = 0x600000000;
  if (&__dst != (void **)a5)
  {
    v9 = *(_DWORD *)(a5 + 8);
    if (v9)
    {
      if (v9 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v20, *(unsigned int *)(a5 + 8), 8);
        v11 = *(unsigned int *)(a5 + 8);
        if (!(_DWORD)v11)
        {
LABEL_8:
          LODWORD(v19) = v9;
          goto LABEL_9;
        }
        v10 = __dst;
      }
      else
      {
        v10 = v20;
        v11 = *(unsigned int *)(a5 + 8);
      }
      memcpy(v10, *(const void **)a5, 8 * v11);
      goto LABEL_8;
    }
  }
LABEL_9:
  v20[12] = *(_DWORD *)(a5 + 64);
  sub_1C6210E90(v8, (unint64_t)&v15);
  if (__dst != v20)
    free(__dst);
  result = sub_1C617F758(a1 + 256, &v14);
  *((_BYTE *)result + 8) = a4;
  v13 = a4;
  if (*(unsigned __int8 *)a1 > a4)
    v13 = *(_BYTE *)a1;
  *(_BYTE *)a1 = v13;
  return result;
}

_QWORD *llvm::safestack::StackLayout::layoutObject(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v30;
  unsigned int v31;
  void **v32;
  BOOL v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned int v44;
  int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  void **v56;
  BOOL v57;
  _DWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  _QWORD *result;
  uint64_t v69;
  _QWORD *v70;
  int v71;
  BOOL v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  _QWORD *v79;
  int v80;
  BOOL v81;
  unsigned int v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  void *v90;
  void *__dst;
  uint64_t v92;
  _DWORD v93[12];
  unsigned int v94;
  uint64_t v95;

  v2 = (uint64_t *)a2;
  v3 = a1;
  v95 = *MEMORY[0x1E0C80C00];
  if (!byte_1ED7FF830)
  {
    v60 = (_QWORD *)(a1 + 8);
    v61 = *(_DWORD *)(v3 + 16);
    if (v61)
      v61 = *(_DWORD *)(*v60 + 80 * v61 - 76);
    v62 = *(_DWORD *)(a2 + 8);
    v63 = (v62 + v61 + (1 << *(_BYTE *)(a2 + 12)) - 1) & -(1 << *(_BYTE *)(a2 + 12));
    v89 = v63;
    LODWORD(v90) = v63 - v62;
    sub_1C6210F20((uint64_t)v60, &v90, (int *)&v89, a2 + 16);
    v64 = *(_DWORD *)(v3 + 2040);
    if (v64)
    {
      v65 = *(_QWORD *)(v3 + 2024);
      v66 = v64 - 1;
      v67 = ((*v2 >> 4) ^ (*v2 >> 9)) & v66;
      result = (_QWORD *)(v65 + 16 * v67);
      v69 = *result;
      if (*v2 == *result)
      {
LABEL_126:
        *((_DWORD *)result + 2) = v63;
        return result;
      }
      v70 = 0;
      v71 = 1;
      while (v69 != -4096)
      {
        if (v70)
          v72 = 0;
        else
          v72 = v69 == -8192;
        if (v72)
          v70 = result;
        v73 = v67 + v71++;
        v67 = v73 & v66;
        result = (_QWORD *)(v65 + 16 * v67);
        v69 = *result;
        if (*v2 == *result)
          goto LABEL_126;
      }
      if (v70)
        v84 = v70;
      else
        v84 = result;
    }
    else
    {
      v84 = 0;
    }
    result = sub_1C504A120(v3 + 2024, (uint64_t)v2, v2, v84);
    *result = *v2;
    *((_DWORD *)result + 2) = 0;
    goto LABEL_126;
  }
  v4 = *(_DWORD *)(a2 + 8);
  v5 = 1 << *(_BYTE *)(a2 + 12);
  v6 = v5 - 1;
  v7 = -v5;
  v8 = (v5 - 1 + v4) & -(int)v5;
  v9 = v8 - v4;
  v88 = v8;
  v89 = v8 - v4;
  v11 = (uint64_t *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 8);
  v12 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v12)
  {
    v13 = v10 + 80 * v12;
    v14 = *(_DWORD *)(a2 + 24);
    do
    {
      v15 = *(_DWORD *)(v10 + 4);
      if (v9 < v15)
      {
        LODWORD(v16) = *(_DWORD *)(v10 + 16);
        if (v16 >= v14)
          v16 = v14;
        else
          v16 = v16;
        if ((_DWORD)v16)
        {
          v17 = *(uint64_t **)(v10 + 8);
          v18 = (uint64_t *)v2[2];
          while (1)
          {
            v20 = *v18++;
            v19 = v20;
            v21 = *v17++;
            if ((v21 & v19) != 0)
              break;
            if (!--v16)
              goto LABEL_12;
          }
          v8 = (v6 + v15 + v4) & v7;
          v9 = v8 - v4;
        }
        else
        {
LABEL_12:
          if (v8 <= v15)
            break;
        }
      }
      v10 += 80;
    }
    while (v10 != v13);
    v88 = v8;
    v89 = v9;
    v22 = *(_DWORD *)(v13 - 76);
  }
  else
  {
    v22 = 0;
  }
  v87 = v22;
  if (v8 > v22)
  {
    if (v9 > v22)
    {
      v90 = &v92;
      __dst = (void *)0x600000000;
      sub_1C4765AA4((char *)&v90, 0, 0);
      v93[10] = 0;
      sub_1C6210F20(v3 + 8, &v87, (int *)&v89, (uint64_t)&v90);
      if (v90 != &v92)
        free(v90);
      v87 = v9;
    }
    sub_1C6210F20(v3 + 8, &v87, (int *)&v88, (uint64_t)(v2 + 2));
    v87 = v8;
    v12 = *(unsigned int *)(v3 + 16);
    if (!*(_DWORD *)(v3 + 16))
      goto LABEL_105;
  }
  else if (!v12)
  {
    goto LABEL_105;
  }
  v85 = v2;
  v23 = 0;
  v24 = 0;
  v86 = v3;
  while (1)
  {
    v25 = *v11;
    v26 = *v11 + v23;
    v27 = *(_DWORD *)(v26 + 4);
    if (v9 > *(_DWORD *)v26 && v9 < v27)
    {
      v30 = (uint64_t)v11;
      v90 = *(void **)v26;
      __dst = v93;
      v92 = 0x600000000;
      v31 = *(_DWORD *)(v26 + 16);
      v32 = (void **)(v26 + 8);
      if (v31)
        v33 = v32 == &__dst;
      else
        v33 = 1;
      if (v33)
        goto LABEL_41;
      if (v31 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v93, *(unsigned int *)(v26 + 16), 8);
        v35 = *(unsigned int *)(v25 + v23 + 16);
        v3 = v86;
        if (!(_DWORD)v35)
        {
LABEL_40:
          LODWORD(v92) = v31;
LABEL_41:
          v94 = *(_DWORD *)(v25 + v23 + 72);
          HIDWORD(v90) = v9;
          *(_DWORD *)(v25 + v23) = v9;
          v11 = (uint64_t *)v30;
          sub_1C5277864(v30, v26, (unint64_t)&v90);
          if (__dst != v93)
            free(__dst);
          v12 = *(unsigned int *)(v3 + 16);
          goto LABEL_44;
        }
        v34 = __dst;
      }
      else
      {
        v34 = v93;
        v35 = *(unsigned int *)(v26 + 16);
      }
      memcpy(v34, *v32, 8 * v35);
      goto LABEL_40;
    }
    if (v8 > *(_DWORD *)v26 && v8 < v27)
      break;
LABEL_44:
    ++v24;
    v23 += 80;
    if (v24 >= v12)
    {
      if (!v12)
        goto LABEL_104;
      goto LABEL_46;
    }
  }
  v54 = (unsigned int *)(v25 + v23);
  v90 = *(void **)(v25 + v23);
  __dst = v93;
  v92 = 0x600000000;
  v55 = *(_DWORD *)(v25 + v23 + 16);
  v56 = (void **)(v25 + v23 + 8);
  if (v55)
    v57 = v56 == &__dst;
  else
    v57 = 1;
  if (!v57)
  {
    if (v55 < 7)
    {
      v58 = v93;
      v59 = *(unsigned int *)(v25 + v23 + 16);
      goto LABEL_99;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v93, *(unsigned int *)(v25 + v23 + 16), 8);
    v59 = *(unsigned int *)(v25 + v23 + 16);
    if ((_DWORD)v59)
    {
      v58 = __dst;
LABEL_99:
      memcpy(v58, *v56, 8 * v59);
    }
    LODWORD(v92) = v55;
  }
  v94 = v54[18];
  *v54 = v8;
  HIDWORD(v90) = v8;
  sub_1C5277864((uint64_t)v11, v25 + v23, (unint64_t)&v90);
  if (__dst != v93)
    free(__dst);
  v3 = v86;
  v12 = *(unsigned int *)(v86 + 16);
  if (!*(_DWORD *)(v86 + 16))
  {
LABEL_104:
    v2 = v85;
    goto LABEL_105;
  }
LABEL_46:
  v36 = *v11;
  v37 = *v11 + 80 * v12;
  v2 = v85;
  do
  {
    if (v89 < *(_DWORD *)(v36 + 4) && v8 > *(_DWORD *)v36)
    {
      v38 = (_QWORD *)(v36 + 8);
      v39 = *((_DWORD *)v85 + 20);
      if (*(_DWORD *)(v36 + 72) < v39)
      {
        v46 = *(_DWORD *)(v36 + 72) & 0x3F;
        v47 = *(unsigned int *)(v36 + 16);
        if (v46)
        {
          v53 = *(_QWORD *)(v36 + 8) + 8 * v47;
          *(_QWORD *)(v53 - 8) &= ~(-1 << v46);
        }
        v48 = v47;
        *(_DWORD *)(v36 + 72) = v39;
        v49 = v39 + 63;
        if ((_DWORD)v47 != (v39 + 63) >> 6)
        {
          v50 = v49 >> 6;
          if (v47 > v50)
          {
            *(_DWORD *)(v36 + 16) = v50;
            v48 = v49 >> 6;
          }
          else
          {
            v51 = v47;
            if (v50 > *(_DWORD *)(v36 + 20))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v36 + 8, v36 + 24, v50, 8);
              v51 = *(unsigned int *)(v36 + 16);
              v48 = *(_DWORD *)(v36 + 16);
            }
            if (v50 != v47)
              bzero((void *)(*v38 + 8 * v51), 8 * (v50 - v47));
            v48 += v50 - v47;
            *(_DWORD *)(v36 + 16) = v48;
            v39 = *(_DWORD *)(v36 + 72);
          }
          v3 = v86;
        }
        v52 = v39 & 0x3F;
        if (v52)
          *(_QWORD *)(*v38 + 8 * v48 - 8) &= ~(-1 << v52);
      }
      v40 = *((unsigned int *)v85 + 6);
      if ((_DWORD)v40)
      {
        v41 = (uint64_t *)v85[2];
        v42 = (_QWORD *)*v38;
        do
        {
          v43 = *v41++;
          *v42++ |= v43;
          --v40;
        }
        while (v40);
      }
    }
    v8 = v88;
    v44 = *(_DWORD *)(v36 + 4);
    v36 += 80;
  }
  while (v88 > v44 && v36 != v37);
LABEL_105:
  v74 = *(_DWORD *)(v3 + 2040);
  if (!v74)
  {
    v83 = 0;
    goto LABEL_119;
  }
  v75 = *(_QWORD *)(v3 + 2024);
  v76 = v74 - 1;
  v77 = ((*v2 >> 4) ^ (*v2 >> 9)) & v76;
  result = (_QWORD *)(v75 + 16 * v77);
  v78 = *result;
  if (*v2 != *result)
  {
    v79 = 0;
    v80 = 1;
    while (v78 != -4096)
    {
      if (v79)
        v81 = 0;
      else
        v81 = v78 == -8192;
      if (v81)
        v79 = result;
      v82 = v77 + v80++;
      v77 = v82 & v76;
      result = (_QWORD *)(v75 + 16 * v77);
      v78 = *result;
      if (*v2 == *result)
        goto LABEL_120;
    }
    if (v79)
      v83 = v79;
    else
      v83 = result;
LABEL_119:
    result = sub_1C504A120(v3 + 2024, (uint64_t)v2, v2, v83);
    *result = *v2;
    *((_DWORD *)result + 2) = 0;
  }
LABEL_120:
  *((_DWORD *)result + 2) = v8;
  return result;
}

void llvm::safestack::StackLayout::computeLayout(llvm::safestack::StackLayout *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  const std::nothrow_t *v7;
  unint64_t v8;
  _DWORD *v9;
  BOOL v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((unsigned int *)this + 328);
  if (v2 >= 3)
  {
    v3 = *((_QWORD *)this + 163);
    v4 = v3 + 88;
    v5 = (uint64_t *)(v3 + 88 * v2);
    v6 = v2 - 1;
    v7 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v8 = v2 - 1;
    while (1)
    {
      v9 = operator new(88 * v8, v7);
      if (v9)
        break;
      v10 = v8 >= 2;
      v8 >>= 1;
      if (!v10)
      {
        sub_1C5277C5C(v4, v5, v6, 0, 0);
        goto LABEL_7;
      }
    }
    v11 = v9;
    sub_1C5277C5C(v4, v5, v6, v9, v8);
    operator delete(v11);
LABEL_7:
    LODWORD(v2) = *((_DWORD *)this + 328);
  }
  if ((_DWORD)v2)
  {
    v12 = *((_QWORD *)this + 163);
    v13 = 88 * v2;
    do
    {
      llvm::safestack::StackLayout::layoutObject((uint64_t)this, v12);
      v12 += 88;
      v13 -= 88;
    }
    while (v13);
  }
}

unint64_t sub_1C52777FC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 88 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C6210FC4(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C6210FC4(a1, v5);
    }
  }
  return a2;
}

void sub_1C5277864(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  void **v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  void **v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  unint64_t v28;
  _BOOL4 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 8) == a2)
  {
    sub_1C62112D0(a1, a3);
    return;
  }
  v5 = a2 - v4;
  v6 = (a2 - v4) >> 4;
  v39 = sub_1C5277BF4(a1, a3);
  v7 = *(_QWORD *)a1;
  v8 = (_QWORD *)(*(_QWORD *)a1 + v5);
  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_QWORD *)a1 + 80 * v9;
  *(_QWORD *)v10 = *(_QWORD *)(v10 - 80);
  v11 = (void *)(v10 + 24);
  *(_QWORD *)(v10 + 8) = v10 + 24;
  v12 = (void **)(v10 + 8);
  *(_QWORD *)(v10 + 16) = 0x600000000;
  v13 = *(unsigned int *)(v10 - 64);
  if (!(_DWORD)v13 || v12 == (void **)(v10 - 72))
    goto LABEL_10;
  v14 = *(void **)(v10 - 72);
  if (v14 != (void *)(v10 - 56))
  {
    *v12 = v14;
    v38 = *(_DWORD *)(v10 - 60);
    *(_DWORD *)(v10 + 16) = v13;
    *(_DWORD *)(v10 + 20) = v38;
    *(_QWORD *)(v10 - 72) = v10 - 56;
    *(_DWORD *)(v10 - 60) = 0;
    goto LABEL_9;
  }
  if (v13 >= 7)
  {
    *(_DWORD *)(v10 + 16) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod(v10 + 8, v10 + 24, v13, 8);
    v15 = *(unsigned int *)(v10 - 64);
    if (!(_DWORD)v15)
      goto LABEL_8;
    v14 = *(void **)(v10 - 72);
    v11 = *v12;
  }
  else
  {
    v15 = *(unsigned int *)(v10 - 64);
  }
  memcpy(v11, v14, 8 * v15);
LABEL_8:
  *(_DWORD *)(v10 + 16) = v13;
LABEL_9:
  *(_DWORD *)(v10 - 64) = 0;
LABEL_10:
  *(_DWORD *)(v7 + 80 * v9 + 72) = *(_DWORD *)(v10 - 8);
  v16 = *(_QWORD *)a1;
  v17 = *(_DWORD *)(a1 + 8);
  v18 = *(_QWORD *)a1 + 80 * v17 - 80;
  if ((_QWORD *)v18 == v8)
    goto LABEL_29;
  v19 = *(_QWORD *)a1 + 80 * v17 - 80;
  do
  {
    v20 = *(_QWORD *)(v19 - 80);
    v19 -= 80;
    *(_QWORD *)v18 = v20;
    v21 = *(const void **)(v18 - 72);
    if ((const void *)(v18 - 56) == v21)
    {
      v22 = (void **)(v18 + 8);
      v23 = *(unsigned int *)(v18 - 64);
      v24 = *(unsigned int *)(v18 + 16);
      if (v24 >= v23)
      {
        if ((_DWORD)v23)
          memmove(*v22, v21, 8 * v23);
LABEL_16:
        *(_DWORD *)(v18 + 16) = v23;
        goto LABEL_17;
      }
      if (*(_DWORD *)(v18 + 20) < v23)
      {
        *(_DWORD *)(v18 + 16) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v22, v18 + 24, v23, 8);
      }
      else if ((_DWORD)v24)
      {
        memmove(*v22, v21, 8 * v24);
LABEL_22:
        v25 = *(unsigned int *)(v18 - 64);
        if (v24 != v25)
          memcpy((void *)(*(_QWORD *)(v18 + 8) + 8 * v24), (const void *)(*(_QWORD *)(v18 - 72) + 8 * v24), 8 * v25 - 8 * v24);
        goto LABEL_16;
      }
      v24 = 0;
      goto LABEL_22;
    }
    v26 = *(void **)(v18 + 8);
    if ((void *)(v18 + 24) != v26)
    {
      free(v26);
      v21 = *(const void **)(v18 - 72);
    }
    *(_QWORD *)(v18 + 8) = v21;
    *(_QWORD *)(v18 + 16) = *(_QWORD *)(v18 - 64);
    *(_QWORD *)(v18 - 72) = v18 - 56;
    *(_DWORD *)(v18 - 60) = 0;
LABEL_17:
    *(_DWORD *)(v18 - 64) = 0;
    *(_DWORD *)(v18 + 72) = *(_DWORD *)(v18 - 8);
    v18 = v19;
  }
  while ((_QWORD *)v19 != v8);
  v17 = *(_DWORD *)(a1 + 8);
  v16 = *(_QWORD *)a1;
LABEL_29:
  v27 = v17 + 1;
  *(_DWORD *)(a1 + 8) = v27;
  v28 = v16 + 80 * v27;
  v30 = v39 >= (unint64_t)v8 && v39 < v28;
  v31 = v39 + 80 * v30;
  v32 = v31 + 8;
  *v8 = *(_QWORD *)v31;
  v33 = v7 + 16 * v6;
  if (v33 == v31)
    goto LABEL_47;
  v34 = v33 + 8;
  v35 = *(unsigned int *)(v31 + 16);
  v36 = *(unsigned int *)(v33 + 16);
  if (v36 >= v35)
  {
    if ((_DWORD)v35)
      memmove(*(void **)v34, *(const void **)v32, 8 * v35);
    goto LABEL_46;
  }
  if (*(_DWORD *)(v33 + 20) < v35)
  {
    *(_DWORD *)(v33 + 16) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod(v33 + 8, v33 + 24, v35, 8);
    goto LABEL_43;
  }
  if (!(_DWORD)v36)
  {
LABEL_43:
    v36 = 0;
    goto LABEL_44;
  }
  memmove(*(void **)v34, *(const void **)v32, 8 * v36);
LABEL_44:
  v37 = *(unsigned int *)(v32 + 8);
  if (v36 != v37)
    memcpy((void *)(*(_QWORD *)v34 + 8 * v36), (const void *)(*(_QWORD *)v32 + 8 * v36), *(_QWORD *)v32 + 8 * v37 - (*(_QWORD *)v32 + 8 * v36));
LABEL_46:
  *(_DWORD *)(v34 + 8) = v35;
LABEL_47:
  *(_DWORD *)(v7 + 16 * v6 + 72) = *(_DWORD *)(v39 + 80 * v30 + 72);
}

unint64_t sub_1C5277BF4(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 80 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C6211354(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C6211354(a1, v5);
    }
  }
  return a2;
}

void sub_1C5277C5C(uint64_t a1, uint64_t *a2, unint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t *v5;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  const void *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  const void *v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  void **v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  _DWORD *v43;
  _QWORD *v44;
  void **v45;
  uint64_t v46;
  const void *v47;
  unint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  unint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  _DWORD *v59;
  uint64_t v60;
  _DWORD *v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  _DWORD *v66;
  unint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  const void *v77;
  void **v78;
  unint64_t v79;
  _DWORD *v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  _DWORD *v90;
  _BYTE v91[13];
  void *v92;
  unint64_t v93;
  _BYTE v94[48];
  int v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  if (a3 < 2)
    return;
  v5 = a2;
  if (a3 == 2)
  {
    if (*((_DWORD *)a2 - 20) > *(_DWORD *)(a1 + 8))
      sub_1C5279F4C(a1, (uint64_t)(a2 - 11));
    return;
  }
  if ((uint64_t)a3 > 0)
  {
    v10 = a3 >> 1;
    v11 = (uint64_t *)(a1 + 88 * (a3 >> 1));
    v12 = a3 >> 1;
    if ((uint64_t)a3 > a5)
    {
      sub_1C5277C5C(a1, v11, v12, a4, a5);
      sub_1C5277C5C(a1 + 88 * (a3 >> 1), v5, a3 - (a3 >> 1), a4, a5);
      sub_1C5279280(a1, a1 + 88 * (a3 >> 1), (uint64_t)v5, a3 >> 1, a3 - (a3 >> 1), a4, a5);
      return;
    }
    sub_1C5278674((uint64_t *)a1, v11, v12, (uint64_t)a4);
    v39 = (uint64_t)&a4[22 * v10];
    sub_1C5278674((uint64_t *)(a1 + 88 * (a3 >> 1)), v5, a3 - (a3 >> 1), v39);
    v88 = a3;
    v90 = a4;
    v40 = &a4[22 * a3];
    v41 = (_DWORD *)(a1 + 80);
    v42 = v39;
    v43 = a4;
    while (1)
    {
      if ((_DWORD *)v42 == v40)
      {
        if (v43 == (_DWORD *)v39)
          goto LABEL_149;
        v60 = 0;
        v61 = v43;
        while (2)
        {
          v62 = &v43[v60];
          v63 = *(_QWORD *)((char *)&v43[v60 + 1] + 1);
          *(_QWORD *)&v41[v60 - 20] = *(_QWORD *)&v43[v60];
          v64 = (uint64_t)&v41[v60 - 20];
          *(_QWORD *)(v64 + 5) = v63;
          if ((_DWORD *)v64 != &v43[v60])
          {
            v65 = (void **)&v41[v60 - 16];
            v66 = (_DWORD *)*((_QWORD *)v62 + 2);
            if (v62 + 8 == v66)
            {
              v68 = &v43[v60 + 6];
              v67 = *v68;
              v69 = &v41[v60];
              v70 = v41[v60 - 14];
              if (v70 >= v67)
              {
                if ((_DWORD)v67)
                  memmove(*v65, v66, 8 * v67);
                goto LABEL_114;
              }
              if (*(v69 - 13) < v67)
              {
                *(v69 - 14) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41[v60 - 16], (uint64_t)&v41[v60 - 12], v67, 8);
LABEL_120:
                v70 = 0;
              }
              else
              {
                if (!(_DWORD)v70)
                  goto LABEL_120;
                memmove(*v65, v66, 8 * v70);
              }
              v71 = *v68;
              if (v70 != v71)
                memcpy((char *)*v65 + 8 * v70, (const void *)(*((_QWORD *)v62 + 2) + 8 * v70), 8 * v71 - 8 * v70);
LABEL_114:
              *(v69 - 14) = v67;
            }
            else
            {
              if (&v41[v60 - 12] != *v65)
              {
                free(*v65);
                v66 = (_DWORD *)*((_QWORD *)v62 + 2);
              }
              *v65 = v66;
              v68 = v61 + 6;
              *(_QWORD *)&v41[v60 - 14] = *(_QWORD *)&v43[v60 + 6];
              *((_QWORD *)v62 + 2) = v62 + 8;
              v43[v60 + 7] = 0;
            }
            *v68 = 0;
          }
          v41[v60] = v62[20];
          v60 += 22;
          v61 = v62 + 22;
          if (v62 + 22 == (_DWORD *)v39)
            goto LABEL_149;
          continue;
        }
      }
      v44 = v41 - 20;
      v45 = (void **)(v41 - 16);
      if (*(_DWORD *)(v42 + 8) <= v43[2])
      {
        v51 = *(_QWORD *)v43;
        *(_QWORD *)((char *)v41 - 75) = *(_QWORD *)((char *)v43 + 5);
        *v44 = v51;
        if (v44 != (_QWORD *)v43)
        {
          v52 = (_DWORD *)*((_QWORD *)v43 + 2);
          if (v52 == v43 + 8)
          {
            v54 = v43 + 6;
            v53 = v43[6];
            v55 = *(v41 - 14);
            if (v55 >= v53)
            {
              if ((_DWORD)v53)
                memmove(*v45, v52, 8 * v53);
              goto LABEL_82;
            }
            if (*(v41 - 13) < v53)
            {
              *(v41 - 14) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v41 - 16), (uint64_t)(v41 - 12), v53, 8);
LABEL_94:
              v55 = 0;
            }
            else
            {
              if (!(_DWORD)v55)
                goto LABEL_94;
              memmove(*v45, v52, 8 * v55);
            }
            v57 = *v54;
            if (v55 != v57)
              memcpy((char *)*v45 + 8 * v55, (const void *)(*((_QWORD *)v43 + 2) + 8 * v55), 8 * v57 - 8 * v55);
LABEL_82:
            *(v41 - 14) = v53;
          }
          else
          {
            v59 = (_DWORD *)*((_QWORD *)v41 - 8);
            if (v41 - 12 != v59)
            {
              free(v59);
              v52 = (_DWORD *)*((_QWORD *)v43 + 2);
            }
            *((_QWORD *)v41 - 8) = v52;
            v54 = v43 + 6;
            *((_QWORD *)v41 - 7) = *((_QWORD *)v43 + 3);
            *((_QWORD *)v43 + 2) = v43 + 8;
            v43[7] = 0;
          }
          *v54 = 0;
        }
        *v41 = v43[20];
        v43 += 22;
        goto LABEL_85;
      }
      v46 = *(_QWORD *)v42;
      *(_QWORD *)((char *)v41 - 75) = *(_QWORD *)(v42 + 5);
      *v44 = v46;
      if (v44 != (_QWORD *)v42)
        break;
LABEL_76:
      *v41 = *(_DWORD *)(v42 + 80);
      v42 += 88;
LABEL_85:
      v41 += 22;
      if (v43 == (_DWORD *)v39)
      {
        if ((_DWORD *)v42 != v40)
        {
          v72 = 0;
          v73 = v42;
          while (1)
          {
            v74 = v42 + v72 * 4;
            v75 = &v41[v72];
            v76 = *(_QWORD *)(v42 + v72 * 4);
            *(_QWORD *)((char *)&v41[v72 - 18] - 3) = *(_QWORD *)(v42 + v72 * 4 + 5);
            *(_QWORD *)&v41[v72 - 20] = v76;
            if (&v41[v72 - 20] != (_DWORD *)(v42 + v72 * 4))
              break;
LABEL_137:
            v41[v72] = *(_DWORD *)(v74 + 80);
            v72 += 22;
            v73 = v74 + 88;
            if ((_DWORD *)(v74 + 88) == v40)
              goto LABEL_149;
          }
          v77 = *(const void **)(v74 + 16);
          if ((const void *)(v74 + 32) == v77)
          {
            v78 = (void **)(v75 - 16);
            v80 = (_DWORD *)(v42 + v72 * 4 + 24);
            v79 = *v80;
            v81 = &v41[v72];
            v82 = v41[v72 - 14];
            if (v82 >= v79)
            {
              if ((_DWORD)v79)
                memmove(*v78, v77, 8 * v79);
              goto LABEL_135;
            }
            if (*(v81 - 13) < v79)
            {
              *(v81 - 14) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v78, (uint64_t)&v41[v72 - 12], v79, 8);
LABEL_141:
              v82 = 0;
            }
            else
            {
              if (!(_DWORD)v82)
                goto LABEL_141;
              memmove(*v78, v77, 8 * v82);
            }
            v83 = *v80;
            if (v82 != v83)
              memcpy((char *)*v78 + 8 * v82, (const void *)(*(_QWORD *)(v74 + 16) + 8 * v82), 8 * v83 - 8 * v82);
LABEL_135:
            *(v81 - 14) = v79;
          }
          else
          {
            v84 = (_DWORD *)*((_QWORD *)v75 - 8);
            if (&v41[v72 - 12] != v84)
            {
              free(v84);
              v77 = *(const void **)(v74 + 16);
            }
            *((_QWORD *)v75 - 8) = v77;
            v80 = (_DWORD *)(v73 + 24);
            *(_QWORD *)&v41[v72 - 14] = *(_QWORD *)(v42 + v72 * 4 + 24);
            *(_QWORD *)(v74 + 16) = v74 + 32;
            *(_DWORD *)(v42 + v72 * 4 + 28) = 0;
          }
          *v80 = 0;
          goto LABEL_137;
        }
LABEL_149:
        if (v90)
        {
          v85 = v88;
          v86 = v90 + 8;
          do
          {
            v87 = (_QWORD *)*(v86 - 2);
            if (v86 != v87)
              free(v87);
            v86 += 11;
            --v85;
          }
          while (v85);
        }
        return;
      }
    }
    v47 = *(const void **)(v42 + 16);
    if (v47 != (const void *)(v42 + 32))
    {
      v58 = (_DWORD *)*((_QWORD *)v41 - 8);
      if (v41 - 12 != v58)
      {
        free(v58);
        v47 = *(const void **)(v42 + 16);
      }
      *((_QWORD *)v41 - 8) = v47;
      v49 = (_DWORD *)(v42 + 24);
      *((_QWORD *)v41 - 7) = *(_QWORD *)(v42 + 24);
      *(_QWORD *)(v42 + 16) = v42 + 32;
      *(_DWORD *)(v42 + 28) = 0;
      goto LABEL_75;
    }
    v49 = (_DWORD *)(v42 + 24);
    v48 = *(unsigned int *)(v42 + 24);
    v50 = *(v41 - 14);
    if (v50 >= v48)
    {
      if ((_DWORD)v48)
        memmove(*v45, v47, 8 * v48);
LABEL_74:
      *(v41 - 14) = v48;
LABEL_75:
      *v49 = 0;
      goto LABEL_76;
    }
    if (*(v41 - 13) < v48)
    {
      *(v41 - 14) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v41 - 16), (uint64_t)(v41 - 12), v48, 8);
    }
    else if ((_DWORD)v50)
    {
      memmove(*v45, v47, 8 * v50);
LABEL_90:
      v56 = *v49;
      if (v50 != v56)
        memcpy((char *)*v45 + 8 * v50, (const void *)(*(_QWORD *)(v42 + 16) + 8 * v50), 8 * v56 - 8 * v50);
      goto LABEL_74;
    }
    v50 = 0;
    goto LABEL_90;
  }
  if ((uint64_t *)a1 == a2)
    return;
  v13 = (_QWORD *)(a1 + 88);
  if ((uint64_t *)(a1 + 88) == a2)
    return;
  v14 = 0;
  v15 = a1;
  do
  {
    v16 = v13;
    if (*(_DWORD *)(v15 + 96) <= *(_DWORD *)(v15 + 8))
      goto LABEL_51;
    v17 = *(_QWORD *)((char *)v13 + 5);
    *(_QWORD *)v91 = *v13;
    *(_QWORD *)&v91[5] = v17;
    v92 = v94;
    v93 = 0x600000000;
    v18 = *(_DWORD *)(v15 + 112);
    if (!v18 || &v92 == (void **)(v15 + 104))
      goto LABEL_21;
    v19 = *(const void **)(v15 + 104);
    if (v19 != (const void *)(v15 + 120))
    {
      v92 = *(void **)(v15 + 104);
      v93 = __PAIR64__(*(_DWORD *)(v15 + 116), v18);
      *(_QWORD *)(v15 + 104) = v15 + 120;
      *(_DWORD *)(v15 + 116) = 0;
      goto LABEL_20;
    }
    if (v18 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, (uint64_t)v94, *(unsigned int *)(v15 + 112), 8);
      v21 = *(unsigned int *)(v15 + 112);
      if (!(_DWORD)v21)
        goto LABEL_19;
      v19 = *(const void **)(v15 + 104);
      v20 = v92;
    }
    else
    {
      v20 = v94;
      v21 = *(unsigned int *)(v15 + 112);
    }
    memcpy(v20, v19, 8 * v21);
LABEL_19:
    LODWORD(v93) = v18;
LABEL_20:
    *(_DWORD *)(v15 + 112) = 0;
LABEL_21:
    v95 = *(_DWORD *)(v15 + 168);
    v22 = v14;
    while (1)
    {
      v23 = a1 + v22;
      *(_QWORD *)(v23 + 88) = *(_QWORD *)(a1 + v22);
      *(_QWORD *)(v23 + 93) = *(_QWORD *)(a1 + v22 + 5);
      v24 = (void **)(a1 + v22 + 104);
      v25 = *(const void **)(a1 + v22 + 16);
      v26 = a1 + v22 + 32;
      if ((const void *)v26 == v25)
      {
        v27 = (_DWORD *)(v23 + 24);
        v28 = *(unsigned int *)(v23 + 24);
        v29 = *(unsigned int *)(v23 + 112);
        if (v29 >= v28)
        {
          if ((_DWORD)v28)
            memmove(*v24, v25, 8 * v28);
LABEL_26:
          *(_DWORD *)(v23 + 112) = v28;
          goto LABEL_27;
        }
        if (*(_DWORD *)(a1 + v22 + 116) < v28)
        {
          *(_DWORD *)(v23 + 112) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v24, a1 + v22 + 120, v28, 8);
        }
        else if ((_DWORD)v29)
        {
          memmove(*v24, v25, 8 * v29);
LABEL_33:
          v31 = *v27;
          if (v29 != v31)
            memcpy((void *)(*(_QWORD *)(v23 + 104) + 8 * v29), (const void *)(*(_QWORD *)(v23 + 16) + 8 * v29), 8 * v31 - 8 * v29);
          goto LABEL_26;
        }
        v29 = 0;
        goto LABEL_33;
      }
      v32 = *v24;
      if ((void *)(v23 + 120) != v32)
      {
        free(v32);
        v25 = *(const void **)(v23 + 16);
      }
      v33 = a1 + v22;
      *(_QWORD *)(v23 + 104) = v25;
      v27 = (_DWORD *)(v15 + 24);
      *(_QWORD *)(v33 + 112) = *(_QWORD *)(a1 + v22 + 24);
      *(_QWORD *)(v23 + 16) = v26;
      *(_DWORD *)(v33 + 28) = 0;
LABEL_27:
      *v27 = 0;
      v30 = a1 + v22;
      *(_DWORD *)(a1 + v22 + 168) = *(_DWORD *)(a1 + v22 + 80);
      if (!v22)
        break;
      v15 -= 88;
      v22 -= 88;
      if (*(_DWORD *)&v91[8] <= *(_DWORD *)(v30 - 80))
      {
        v34 = a1 + v22 + 88;
        goto LABEL_41;
      }
    }
    v34 = a1;
LABEL_41:
    *(_QWORD *)v34 = *(_QWORD *)v91;
    *(_QWORD *)(v34 + 5) = *(_QWORD *)&v91[5];
    v35 = v92;
    if ((_BYTE *)v34 != v91)
    {
      v36 = (void **)(v30 + 16);
      if (v92 == v94)
      {
        v37 = v93;
        v38 = *(unsigned int *)(v34 + 24);
        if (v38 >= v93)
        {
          if ((_DWORD)v93)
            memmove(*v36, v94, 8 * v93);
          goto LABEL_46;
        }
        if (*(_DWORD *)(v34 + 28) < v93)
        {
          *(_DWORD *)(v34 + 24) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v36, v34 + 32, v37, 8);
LABEL_55:
          v38 = 0;
        }
        else
        {
          if (!(_DWORD)v38)
            goto LABEL_55;
          memmove(*v36, v94, 8 * v38);
        }
        if (v38 != v93)
          memcpy((char *)*v36 + 8 * v38, (char *)v92 + 8 * v38, 8 * v93 - 8 * v38);
LABEL_46:
        *(_DWORD *)(v34 + 24) = v37;
      }
      else
      {
        if (*v36 != (void *)(v34 + 32))
        {
          free(*v36);
          v35 = v92;
        }
        *v36 = v35;
        *(_QWORD *)(v34 + 24) = v93;
        v92 = v94;
        HIDWORD(v93) = 0;
      }
      LODWORD(v93) = 0;
      v35 = v92;
    }
    *(_DWORD *)(v34 + 80) = v95;
    if (v35 != v94)
      free(v35);
    v5 = a2;
LABEL_51:
    v13 = v16 + 11;
    v14 += 88;
    v15 = (uint64_t)v16;
  }
  while (v16 + 11 != v5);
}

void sub_1C5278674(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  void **v10;
  unsigned int v11;
  uint64_t *v12;
  const void *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t *v16;
  void **v17;
  void *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void **v27;
  unsigned int v28;
  uint64_t *v29;
  const void *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  void **v35;
  unsigned int v36;
  uint64_t *v37;
  const void *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t *v44;
  void *v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  const void *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t **v65;
  uint64_t *v66;
  void **v67;
  _DWORD *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  int v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void **v82;
  unsigned int v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t *v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  void *v105;
  void **v106;
  unsigned int v107;
  BOOL v108;
  uint64_t *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v115;
  void *v116;
  unsigned int v117;
  BOOL v118;
  uint64_t *v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  uint64_t *v128;
  uint64_t *v129;
  _QWORD *v130;

  if (!a3)
    return;
  v4 = a4;
  v6 = a2;
  v7 = a1;
  if (a3 == 2)
  {
    v16 = a2 - 11;
    v17 = (void **)(a4 + 16);
    v18 = (void *)(a4 + 32);
    if (*((_DWORD *)a2 - 20) > *((_DWORD *)a1 + 2))
    {
      v19 = *v16;
      *(_QWORD *)(a4 + 5) = *(uint64_t *)((char *)a2 - 83);
      *(_QWORD *)a4 = v19;
      *(_QWORD *)(a4 + 16) = v18;
      *(_QWORD *)(a4 + 24) = 0x600000000;
      v20 = *((_DWORD *)a2 - 16);
      if (!v20 || v17 == (void **)(a2 - 9))
      {
LABEL_22:
        *(_DWORD *)(v4 + 80) = *((_DWORD *)v6 - 2);
        v24 = *v7;
        v25 = *(uint64_t *)((char *)v7 + 5);
        v26 = (void *)(v4 + 120);
        *(_QWORD *)(v4 + 104) = v4 + 120;
        v27 = (void **)(v4 + 104);
        *(_QWORD *)(v4 + 93) = v25;
        *(_QWORD *)(v4 + 88) = v24;
        *(_QWORD *)(v4 + 112) = 0x600000000;
        v28 = *((_DWORD *)v7 + 6);
        if (!v28 || v27 == (void **)(v7 + 2))
          goto LABEL_30;
        v29 = (uint64_t *)v7[2];
        v30 = v7 + 4;
        if (v29 != v7 + 4)
        {
          *(_QWORD *)(v4 + 104) = v29;
          v124 = *((_DWORD *)v7 + 7);
          *(_DWORD *)(v4 + 112) = v28;
          *(_DWORD *)(v4 + 116) = v124;
          v7[2] = (uint64_t)v30;
          *((_DWORD *)v7 + 7) = 0;
          goto LABEL_29;
        }
        if (v28 >= 7)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 104, v4 + 120, *((unsigned int *)v7 + 6), 8);
          v31 = *((unsigned int *)v7 + 6);
          if (!(_DWORD)v31)
            goto LABEL_28;
          v30 = (const void *)v7[2];
          v26 = *v27;
        }
        else
        {
          v31 = *((unsigned int *)v7 + 6);
        }
        memcpy(v26, v30, 8 * v31);
LABEL_28:
        *(_DWORD *)(v4 + 112) = v28;
LABEL_29:
        *((_DWORD *)v7 + 6) = 0;
LABEL_30:
        v15 = (_DWORD *)(v4 + 168);
        goto LABEL_31;
      }
      v21 = (uint64_t *)*(a2 - 9);
      v22 = a2 - 7;
      if (v21 != v6 - 7)
      {
        *(_QWORD *)(a4 + 16) = v21;
        v123 = *((_DWORD *)v6 - 15);
        *(_DWORD *)(a4 + 24) = v20;
        *(_DWORD *)(a4 + 28) = v123;
        *(v6 - 9) = (uint64_t)v22;
        *((_DWORD *)v6 - 15) = 0;
        goto LABEL_21;
      }
      if (v20 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4 + 16, a4 + 32, *((unsigned int *)v6 - 16), 8);
        v23 = *((unsigned int *)v6 - 16);
        if (!(_DWORD)v23)
          goto LABEL_20;
        v22 = (uint64_t *)*(v6 - 9);
        v18 = *v17;
      }
      else
      {
        v23 = *((unsigned int *)v6 - 16);
      }
      memcpy(v18, v22, 8 * v23);
LABEL_20:
      *(_DWORD *)(v4 + 24) = v20;
LABEL_21:
      *((_DWORD *)v6 - 16) = 0;
      goto LABEL_22;
    }
    v75 = *a1;
    *(_QWORD *)(a4 + 5) = *(uint64_t *)((char *)a1 + 5);
    *(_QWORD *)a4 = v75;
    *(_QWORD *)(a4 + 16) = v18;
    *(_QWORD *)(a4 + 24) = 0x600000000;
    v76 = *((_DWORD *)a1 + 6);
    if (!v76 || (uint64_t *)a4 == a1)
    {
LABEL_115:
      *(_DWORD *)(v4 + 80) = *((_DWORD *)v7 + 20);
      v79 = *v16;
      v80 = *(uint64_t *)((char *)v6 - 83);
      v81 = (void *)(v4 + 120);
      *(_QWORD *)(v4 + 104) = v4 + 120;
      v82 = (void **)(v4 + 104);
      *(_QWORD *)(v4 + 93) = v80;
      *(_QWORD *)(v4 + 88) = v79;
      *(_QWORD *)(v4 + 112) = 0x600000000;
      v83 = *((_DWORD *)v6 - 16);
      if (!v83 || v82 == (void **)(v6 - 9))
        goto LABEL_123;
      v84 = (uint64_t *)*(v6 - 9);
      if (v84 != v6 - 7)
      {
        *(_QWORD *)(v4 + 104) = v84;
        v126 = *((_DWORD *)v6 - 15);
        *(_DWORD *)(v4 + 112) = v83;
        *(_DWORD *)(v4 + 116) = v126;
        *(v6 - 9) = (uint64_t)(v6 - 7);
        *((_DWORD *)v6 - 15) = 0;
        goto LABEL_122;
      }
      if (v83 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 104, v4 + 120, *((unsigned int *)v6 - 16), 8);
        v85 = *((unsigned int *)v6 - 16);
        if (!(_DWORD)v85)
          goto LABEL_121;
        v84 = (uint64_t *)*(v6 - 9);
        v81 = *v82;
      }
      else
      {
        v85 = *((unsigned int *)v6 - 16);
      }
      memcpy(v81, v84, 8 * v85);
LABEL_121:
      *(_DWORD *)(v4 + 112) = v83;
LABEL_122:
      *((_DWORD *)v6 - 16) = 0;
LABEL_123:
      v15 = (_DWORD *)(v4 + 168);
      v32 = v6 - 1;
      goto LABEL_124;
    }
    v77 = (uint64_t *)a1[2];
    if (v77 != a1 + 4)
    {
      *(_QWORD *)(a4 + 16) = v77;
      v125 = *((_DWORD *)a1 + 7);
      *(_DWORD *)(a4 + 24) = v76;
      *(_DWORD *)(a4 + 28) = v125;
      a1[2] = (uint64_t)(a1 + 4);
      *((_DWORD *)a1 + 7) = 0;
      goto LABEL_114;
    }
    if (v76 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4 + 16, a4 + 32, *((unsigned int *)a1 + 6), 8);
      v78 = *((unsigned int *)v7 + 6);
      if (!(_DWORD)v78)
        goto LABEL_113;
      v77 = (uint64_t *)v7[2];
      v18 = *v17;
    }
    else
    {
      v78 = *((unsigned int *)a1 + 6);
    }
    memcpy(v18, v77, 8 * v78);
LABEL_113:
    *(_DWORD *)(v4 + 24) = v76;
LABEL_114:
    *((_DWORD *)v7 + 6) = 0;
    goto LABEL_115;
  }
  if (a3 == 1)
  {
    v8 = *a1;
    *(_QWORD *)(a4 + 5) = *(uint64_t *)((char *)a1 + 5);
    *(_QWORD *)a4 = v8;
    v9 = (void *)(a4 + 32);
    *(_QWORD *)(a4 + 16) = a4 + 32;
    v10 = (void **)(a4 + 16);
    *(_QWORD *)(a4 + 24) = 0x600000000;
    v11 = *((_DWORD *)a1 + 6);
    if (!v11 || (uint64_t *)a4 == a1)
      goto LABEL_12;
    v12 = (uint64_t *)a1[2];
    v13 = a1 + 4;
    if (v12 != a1 + 4)
    {
      *(_QWORD *)(a4 + 16) = v12;
      v122 = *((_DWORD *)a1 + 7);
      *(_DWORD *)(a4 + 24) = v11;
      *(_DWORD *)(a4 + 28) = v122;
      a1[2] = (uint64_t)v13;
      *((_DWORD *)a1 + 7) = 0;
      goto LABEL_11;
    }
    if (v11 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4 + 16, a4 + 32, *((unsigned int *)a1 + 6), 8);
      v14 = *((unsigned int *)v7 + 6);
      if (!(_DWORD)v14)
        goto LABEL_10;
      v13 = (const void *)v7[2];
      v9 = *v10;
    }
    else
    {
      v14 = *((unsigned int *)a1 + 6);
    }
    memcpy(v9, v13, 8 * v14);
LABEL_10:
    *(_DWORD *)(v4 + 24) = v11;
LABEL_11:
    *((_DWORD *)v7 + 6) = 0;
LABEL_12:
    v15 = (_DWORD *)(v4 + 80);
LABEL_31:
    v32 = v7 + 10;
LABEL_124:
    *v15 = *(_DWORD *)v32;
    return;
  }
  if ((uint64_t)a3 <= 8)
  {
    if (a1 == a2)
      return;
    v33 = *a1;
    *(_QWORD *)(a4 + 5) = *(uint64_t *)((char *)a1 + 5);
    *(_QWORD *)a4 = v33;
    v34 = (void *)(a4 + 32);
    *(_QWORD *)(a4 + 16) = a4 + 32;
    v35 = (void **)(a4 + 16);
    *(_QWORD *)(a4 + 24) = 0x600000000;
    v36 = *((_DWORD *)a1 + 6);
    if (!v36 || (uint64_t *)a4 == a1)
      goto LABEL_42;
    v37 = (uint64_t *)a1[2];
    v38 = a1 + 4;
    if (v37 != a1 + 4)
    {
      *(_QWORD *)(a4 + 16) = v37;
      v127 = *((_DWORD *)a1 + 7);
      *(_DWORD *)(a4 + 24) = v36;
      *(_DWORD *)(a4 + 28) = v127;
      a1[2] = (uint64_t)v38;
      *((_DWORD *)a1 + 7) = 0;
      goto LABEL_41;
    }
    if (v36 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4 + 16, a4 + 32, *((unsigned int *)a1 + 6), 8);
      v39 = *((unsigned int *)v7 + 6);
      if (!(_DWORD)v39)
        goto LABEL_40;
      v38 = (const void *)v7[2];
      v34 = *v35;
    }
    else
    {
      v39 = *((unsigned int *)a1 + 6);
    }
    memcpy(v34, v38, 8 * v39);
LABEL_40:
    *(_DWORD *)(v4 + 24) = v36;
LABEL_41:
    *((_DWORD *)v7 + 6) = 0;
LABEL_42:
    *(_DWORD *)(v4 + 80) = *((_DWORD *)v7 + 20);
    v40 = v7 + 11;
    if (v7 + 11 == v6)
      return;
    v41 = 0;
    v42 = (uint64_t *)v4;
    v128 = v6;
    while (1)
    {
      v43 = v40;
      v44 = v42 + 11;
      v45 = v42 + 15;
      if (*((_DWORD *)v7 + 24) > *((_DWORD *)v42 + 2))
      {
        *v44 = *v42;
        *(uint64_t *)((char *)v42 + 93) = *(uint64_t *)((char *)v42 + 5);
        v42[13] = (uint64_t)v45;
        v42[14] = 0x600000000;
        v46 = *((_DWORD *)v42 + 6);
        if (v46)
        {
          v47 = (uint64_t *)v42[2];
          if (v47 == v42 + 4)
          {
            if (v46 < 7)
            {
              v48 = *((unsigned int *)v42 + 6);
              goto LABEL_49;
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v42 + 13), (uint64_t)(v42 + 15), *((unsigned int *)v42 + 6), 8);
            v48 = *((unsigned int *)v42 + 6);
            if ((_DWORD)v48)
            {
              v47 = (uint64_t *)v42[2];
              v45 = (void *)v42[13];
LABEL_49:
              memcpy(v45, v47, 8 * v48);
            }
            *((_DWORD *)v42 + 28) = v46;
          }
          else
          {
            v42[13] = (uint64_t)v47;
            v73 = *((_DWORD *)v42 + 7);
            *((_DWORD *)v42 + 28) = v46;
            *((_DWORD *)v42 + 29) = v73;
            v42[2] = (uint64_t)(v42 + 4);
            *((_DWORD *)v42 + 7) = 0;
          }
          *((_DWORD *)v42 + 6) = 0;
        }
        v129 = v42 + 11;
        v130 = v43;
        *((_DWORD *)v42 + 42) = *((_DWORD *)v42 + 20);
        v49 = v4;
        if (v42 != (uint64_t *)v4)
        {
          v50 = v41;
          while (1)
          {
            v49 = v4 + v50;
            if (*((_DWORD *)v7 + 24) <= *(_DWORD *)(v4 + v50 - 80))
              goto LABEL_81;
            *(_QWORD *)v49 = *(_QWORD *)(v49 - 88);
            *(_QWORD *)(v49 + 5) = *(_QWORD *)(v49 - 83);
            v51 = (void **)(v49 + 16);
            v52 = *(const void **)(v49 - 72);
            if ((const void *)(v49 - 56) != v52)
            {
              v58 = *v51;
              v59 = v4 + v50;
              if ((void *)(v4 + v50 + 32) != v58)
              {
                free(v58);
                v52 = *(const void **)(v49 - 72);
              }
              *(_QWORD *)(v49 + 16) = v52;
              v55 = v42 - 8;
              *(_QWORD *)(v59 + 24) = *(_QWORD *)(v59 - 64);
              *(_QWORD *)(v49 - 72) = v49 - 56;
              *(_DWORD *)(v59 - 60) = 0;
              goto LABEL_60;
            }
            v53 = v4 + v50;
            v55 = (uint64_t *)(v4 + v50 - 64);
            v54 = *(unsigned int *)v55;
            v56 = *(unsigned int *)(v4 + v50 + 24);
            if (v56 < v54)
              break;
            if ((_DWORD)v54)
              memmove(*v51, v52, 8 * v54);
LABEL_59:
            *(_DWORD *)(v53 + 24) = v54;
LABEL_60:
            v42 -= 11;
            *(_DWORD *)v55 = 0;
            *(_DWORD *)(v4 + v50 + 80) = *(_DWORD *)(v4 + v50 - 8);
            v50 -= 88;
            if (!v50)
            {
              v49 = v4;
              goto LABEL_81;
            }
          }
          if (*(_DWORD *)(v53 + 28) < v54)
          {
            *(_DWORD *)(v53 + 24) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v51, v4 + v50 + 32, v54, 8);
LABEL_64:
            v56 = 0;
          }
          else
          {
            if (!(_DWORD)v56)
              goto LABEL_64;
            memmove(*v51, v52, 8 * v56);
          }
          v57 = *(unsigned int *)v55;
          if (v56 != v57)
            memcpy((void *)(*(_QWORD *)(v49 + 16) + 8 * v56), (const void *)(*(_QWORD *)(v49 - 72) + 8 * v56), 8 * v57 - 8 * v56);
          goto LABEL_59;
        }
LABEL_81:
        v64 = *v130;
        *(_QWORD *)(v49 + 5) = *(_QWORD *)((char *)v130 + 5);
        *(_QWORD *)v49 = v64;
        if ((uint64_t *)v49 != v7 + 11)
        {
          v65 = (uint64_t **)(v7 + 13);
          v66 = (uint64_t *)v7[13];
          if (v66 == v7 + 15)
          {
            v67 = (void **)(v49 + 16);
            v68 = v7 + 14;
            v69 = *((unsigned int *)v7 + 28);
            v70 = *(unsigned int *)(v49 + 24);
            if (v70 >= v69)
            {
              if ((_DWORD)v69)
                memmove(*v67, v7 + 15, 8 * v69);
              goto LABEL_86;
            }
            if (*(_DWORD *)(v49 + 28) < v69)
            {
              *(_DWORD *)(v49 + 24) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod(v49 + 16, v49 + 32, v69, 8);
LABEL_93:
              v70 = 0;
            }
            else
            {
              if (!(_DWORD)v70)
                goto LABEL_93;
              memmove(*v67, v7 + 15, 8 * v70);
            }
            v71 = *v68;
            if (v70 != v71)
              memcpy((char *)*v67 + 8 * v70, &(*v65)[v70], (char *)&(*v65)[v71] - (char *)&(*v65)[v70]);
LABEL_86:
            *(_DWORD *)(v49 + 24) = v69;
          }
          else
          {
            v72 = *(void **)(v49 + 16);
            if (v72 != (void *)(v49 + 32))
            {
              free(v72);
              v66 = *v65;
            }
            *(_QWORD *)(v49 + 16) = v66;
            v68 = v7 + 14;
            *(_QWORD *)(v49 + 24) = v7[14];
            v7[13] = (uint64_t)(v7 + 15);
            *((_DWORD *)v7 + 29) = 0;
          }
          *v68 = 0;
        }
        *(_DWORD *)(v49 + 80) = *((_DWORD *)v7 + 42);
        v6 = v128;
        v44 = v129;
        v43 = v130;
        goto LABEL_89;
      }
      v60 = *v43;
      *(uint64_t *)((char *)v42 + 93) = *(_QWORD *)((char *)v43 + 5);
      *v44 = v60;
      v42[13] = (uint64_t)v45;
      v42[14] = 0x600000000;
      v61 = *((_DWORD *)v7 + 28);
      if (v61)
      {
        if (v42 != v7)
          break;
      }
LABEL_80:
      *((_DWORD *)v42 + 42) = *((_DWORD *)v7 + 42);
LABEL_89:
      v40 = v43 + 11;
      v41 += 88;
      v42 = v44;
      v7 = v43;
      if (v43 + 11 == v6)
        return;
    }
    v62 = (uint64_t *)v7[13];
    if (v62 != v7 + 15)
    {
      v42[13] = (uint64_t)v62;
      v74 = *((_DWORD *)v7 + 29);
      *((_DWORD *)v42 + 28) = v61;
      *((_DWORD *)v42 + 29) = v74;
      v7[13] = (uint64_t)(v7 + 15);
      *((_DWORD *)v7 + 29) = 0;
      goto LABEL_79;
    }
    if (v61 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v42 + 13), (uint64_t)(v42 + 15), *((unsigned int *)v7 + 28), 8);
      v63 = *((unsigned int *)v7 + 28);
      if (!(_DWORD)v63)
        goto LABEL_78;
      v62 = (uint64_t *)v7[13];
      v45 = (void *)v42[13];
    }
    else
    {
      v63 = *((unsigned int *)v7 + 28);
    }
    memcpy(v45, v62, 8 * v63);
LABEL_78:
    *((_DWORD *)v42 + 28) = v61;
LABEL_79:
    *((_DWORD *)v7 + 28) = 0;
    goto LABEL_80;
  }
  v86 = 11 * (a3 >> 1);
  v87 = &a1[v86];
  sub_1C5277C5C(a1, &a1[v86], a3 >> 1, a4, a3 >> 1);
  sub_1C5277C5C(&v7[v86], v6, a3 - (a3 >> 1), v4 + v86 * 8, a3 - (a3 >> 1));
  v88 = &v7[v86];
  do
  {
    if (v88 == v6)
    {
      if (v7 == v87)
        return;
      v101 = 0;
      while (1)
      {
        v102 = (uint64_t *)(v4 + v101 * 8);
        v103 = &v7[v101];
        v104 = v7[v101];
        *(uint64_t *)((char *)v102 + 5) = *(uint64_t *)((char *)&v7[v101] + 5);
        *v102 = v104;
        v105 = (void *)(v4 + v101 * 8 + 32);
        *(_QWORD *)(v4 + v101 * 8 + 16) = v105;
        v106 = (void **)(v4 + v101 * 8 + 16);
        v102[3] = 0x600000000;
        v107 = v7[v101 + 3];
        if (v107)
          v108 = v102 == v103;
        else
          v108 = 1;
        if (v108)
          goto LABEL_167;
        v109 = (uint64_t *)v103[2];
        if (v103 + 4 != v109)
        {
          *v106 = v109;
          v111 = HIDWORD(v7[v101 + 3]);
          *((_DWORD *)v102 + 6) = v107;
          *((_DWORD *)v102 + 7) = v111;
          v103[2] = (uint64_t)(v103 + 4);
          HIDWORD(v7[v101 + 3]) = 0;
          goto LABEL_166;
        }
        if (v107 >= 7)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + v101 * 8 + 16, v4 + v101 * 8 + 32, LODWORD(v7[v101 + 3]), 8);
          v110 = *((unsigned int *)v103 + 6);
          if (!(_DWORD)v110)
            goto LABEL_165;
          v109 = (uint64_t *)v103[2];
          v105 = *v106;
        }
        else
        {
          v110 = LODWORD(v7[v101 + 3]);
        }
        memcpy(v105, v109, 8 * v110);
LABEL_165:
        *((_DWORD *)v102 + 6) = v107;
LABEL_166:
        *((_DWORD *)v103 + 6) = 0;
LABEL_167:
        *((_DWORD *)v102 + 20) = *((_DWORD *)v103 + 20);
        v101 += 11;
        if (&v7[v101] == v87)
          return;
      }
    }
    v89 = v4 + 16;
    v90 = (void *)(v4 + 32);
    if (*((_DWORD *)v88 + 2) > *((_DWORD *)v7 + 2))
    {
      v91 = *v88;
      *(_QWORD *)(v4 + 5) = *(uint64_t *)((char *)v88 + 5);
      *(_QWORD *)v4 = v91;
      *(_QWORD *)(v4 + 16) = v90;
      *(_QWORD *)(v4 + 24) = 0x600000000;
      v92 = *((_DWORD *)v88 + 6);
      if (!v92 || (uint64_t *)v4 == v88)
        goto LABEL_137;
      v93 = (uint64_t *)v88[2];
      if (v93 != v88 + 4)
      {
        *(_QWORD *)(v4 + 16) = v93;
        v99 = *((_DWORD *)v88 + 7);
        *(_DWORD *)(v4 + 24) = v92;
        *(_DWORD *)(v4 + 28) = v99;
        v88[2] = (uint64_t)(v88 + 4);
        *((_DWORD *)v88 + 7) = 0;
        goto LABEL_136;
      }
      if (v92 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v89, v4 + 32, *((unsigned int *)v88 + 6), 8);
        v94 = *((unsigned int *)v88 + 6);
        if (!(_DWORD)v94)
          goto LABEL_135;
        v93 = (uint64_t *)v88[2];
        v90 = *(void **)(v4 + 16);
      }
      else
      {
        v94 = *((unsigned int *)v88 + 6);
      }
      memcpy(v90, v93, 8 * v94);
LABEL_135:
      *(_DWORD *)(v4 + 24) = v92;
LABEL_136:
      *((_DWORD *)v88 + 6) = 0;
LABEL_137:
      *(_DWORD *)(v4 + 80) = *((_DWORD *)v88 + 20);
      v88 += 11;
      goto LABEL_147;
    }
    v95 = *v7;
    *(_QWORD *)(v4 + 5) = *(uint64_t *)((char *)v7 + 5);
    *(_QWORD *)v4 = v95;
    *(_QWORD *)(v4 + 16) = v90;
    *(_QWORD *)(v4 + 24) = 0x600000000;
    v96 = *((_DWORD *)v7 + 6);
    if (v96 && (uint64_t *)v4 != v7)
    {
      v97 = (uint64_t *)v7[2];
      if (v97 == v7 + 4)
      {
        if (v96 < 7)
        {
          v98 = *((unsigned int *)v7 + 6);
          goto LABEL_143;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod(v89, v4 + 32, *((unsigned int *)v7 + 6), 8);
        v98 = *((unsigned int *)v7 + 6);
        if ((_DWORD)v98)
        {
          v97 = (uint64_t *)v7[2];
          v90 = *(void **)(v4 + 16);
LABEL_143:
          memcpy(v90, v97, 8 * v98);
        }
        *(_DWORD *)(v4 + 24) = v96;
      }
      else
      {
        *(_QWORD *)(v4 + 16) = v97;
        v100 = *((_DWORD *)v7 + 7);
        *(_DWORD *)(v4 + 24) = v96;
        *(_DWORD *)(v4 + 28) = v100;
        v7[2] = (uint64_t)(v7 + 4);
        *((_DWORD *)v7 + 7) = 0;
      }
      *((_DWORD *)v7 + 6) = 0;
    }
    *(_DWORD *)(v4 + 80) = *((_DWORD *)v7 + 20);
    v7 += 11;
LABEL_147:
    v4 += 88;
  }
  while (v7 != v87);
  if (v88 != v6)
  {
    v112 = 0;
    while (2)
    {
      v113 = &v88[v112];
      v114 = (uint64_t *)(v4 + v112 * 8);
      v115 = v88[v112];
      *(uint64_t *)((char *)v114 + 5) = *(uint64_t *)((char *)&v88[v112] + 5);
      *v114 = v115;
      v116 = (void *)(v4 + v112 * 8 + 32);
      *(_QWORD *)(v4 + v112 * 8 + 16) = v116;
      v114[3] = 0x600000000;
      v117 = v88[v112 + 3];
      if (v117)
        v118 = v114 == v113;
      else
        v118 = 1;
      if (v118)
        goto LABEL_184;
      v119 = (uint64_t *)v113[2];
      if (v113 + 4 == v119)
      {
        if (v117 < 7)
        {
          v120 = LODWORD(v88[v112 + 3]);
          goto LABEL_181;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + v112 * 8 + 16, v4 + v112 * 8 + 32, LODWORD(v88[v112 + 3]), 8);
        v120 = *((unsigned int *)v113 + 6);
        if ((_DWORD)v120)
        {
          v119 = (uint64_t *)v113[2];
          v116 = (void *)v114[2];
LABEL_181:
          memcpy(v116, v119, 8 * v120);
        }
        *((_DWORD *)v114 + 6) = v117;
      }
      else
      {
        v114[2] = (uint64_t)v119;
        v121 = HIDWORD(v88[v112 + 3]);
        *((_DWORD *)v114 + 6) = v117;
        *((_DWORD *)v114 + 7) = v121;
        v113[2] = (uint64_t)(v113 + 4);
        HIDWORD(v88[v112 + 3]) = 0;
      }
      *((_DWORD *)v113 + 6) = 0;
LABEL_184:
      *((_DWORD *)v114 + 20) = *((_DWORD *)v113 + 20);
      v112 += 11;
      if (&v88[v112] == v6)
        return;
      continue;
    }
  }
}

void sub_1C5279280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  _DWORD *v47;
  unsigned int v48;
  BOOL v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  _DWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  _DWORD *v58;
  unsigned int v59;
  BOOL v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  _QWORD *v68;
  void **v69;
  uint64_t v70;
  uint64_t v71;
  const void *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  _DWORD *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  _DWORD *v84;
  uint64_t *v85;
  _DWORD *v86;
  uint64_t *v87;
  uint64_t *v88;
  void **v89;
  uint64_t v90;
  const void *v91;
  unint64_t v92;
  _DWORD *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  _DWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _DWORD *v111;
  _DWORD *v112;
  _DWORD *v113;
  uint64_t v114;
  void **v115;
  _DWORD *v116;
  unint64_t v117;
  _DWORD *v118;
  _DWORD *v119;
  uint64_t v120;
  uint64_t v121;
  void **v122;
  void **v123;
  unint64_t v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  void **v129;
  uint64_t *v130;
  unint64_t v131;
  uint64_t *v132;
  _DWORD *v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void **v144;

  if (!a5)
    return;
  v7 = a5;
  while (a4 > a7 && v7 > a7)
  {
    if (!a4)
      return;
    v11 = 0;
    v12 = -a4;
    while (1)
    {
      v13 = a1 + v11;
      if (*(_DWORD *)(a2 + 8) > *(_DWORD *)(a1 + v11 + 8))
        break;
      v11 += 88;
      if (__CFADD__(v12++, 1))
        return;
    }
    v15 = -v12;
    if (-v12 >= v7)
    {
      if (v12 == -1)
      {
        sub_1C5279F4C(a1 + v11, a2);
        return;
      }
      if (v12 > 0)
        v15 = 1 - v12;
      v25 = v15 >> 1;
      v24 = a3;
      if (a3 != a2)
      {
        v26 = 0x2E8BA2E8BA2E8BA3 * ((a3 - a2) >> 3);
        v24 = a2;
        do
        {
          v27 = v26 >> 1;
          v28 = v24 + 88 * (v26 >> 1);
          v29 = *(_DWORD *)(v28 + 8);
          v30 = v28 + 88;
          v26 += ~(v26 >> 1);
          if (v29 > *(_DWORD *)(a1 + 88 * v25 + v11 + 8))
            v24 = v30;
          else
            v26 = v27;
        }
        while (v26);
      }
      v18 = a1 + 88 * v25 + v11;
      v17 = 0x2E8BA2E8BA2E8BA3 * ((v24 - a2) >> 3);
    }
    else
    {
      if (v7 >= 0)
        v16 = v7;
      else
        v16 = v7 + 1;
      v17 = v16 >> 1;
      v18 = a2;
      if (v13 != a2)
      {
        v19 = 0x2E8BA2E8BA2E8BA3 * ((a2 - a1 - v11) >> 3);
        v18 = a1 + v11;
        do
        {
          v20 = v19 >> 1;
          v21 = v18 + 88 * (v19 >> 1);
          v22 = *(_DWORD *)(v21 + 8);
          v23 = v21 + 88;
          v19 += ~(v19 >> 1);
          if (*(_DWORD *)(a2 + 88 * v17 + 8) > v22)
            v19 = v20;
          else
            v18 = v23;
        }
        while (v19);
      }
      v24 = a2 + 88 * v17;
      v25 = 0x2E8BA2E8BA2E8BA3 * ((v18 - a1 - v11) >> 3);
    }
    v31 = v24;
    if (v18 != a2)
    {
      v31 = v18;
      if (a2 != v24)
      {
        v138 = v25;
        v139 = v17;
        v140 = a7;
        v142 = a3;
        sub_1C5279F4C(v18, a2);
        v31 = v18 + 88;
        for (i = a2 + 88; i != v24; i += 88)
        {
          if (v31 == a2)
            a2 = i;
          sub_1C5279F4C(v31, i);
          v31 += 88;
        }
        if (v31 == a2)
        {
          v31 = a2;
        }
        else
        {
          v33 = v31;
          v34 = a2;
          do
          {
            while (1)
            {
              sub_1C5279F4C(v33, a2);
              v33 += 88;
              a2 += 88;
              if (a2 == v24)
                break;
              if (v33 == v34)
                v34 = a2;
            }
            a2 = v34;
          }
          while (v33 != v34);
        }
        a7 = v140;
        a3 = v142;
        v25 = v138;
        v17 = v139;
      }
    }
    a4 = -(v25 + v12);
    v35 = v7 - v17;
    if (v25 + v17 >= v7 - (v25 + v17) - v12)
    {
      v38 = v25;
      v39 = -(v25 + v12);
      v40 = v17;
      v37 = a7;
      sub_1C5279280(v31, v24, a3, v39, v35, a6);
      v24 = v18;
      v35 = v40;
      a4 = v38;
      a3 = v31;
    }
    else
    {
      v36 = a3;
      v37 = a7;
      sub_1C5279280(v13, v18, v31, v25, v17, a6);
      a3 = v36;
      v13 = v31;
    }
    v7 = v35;
    a1 = v13;
    a2 = v24;
    a7 = v37;
    if (!v35)
      return;
  }
  if (a4 <= v7)
  {
    if (a1 == a2)
      return;
    v54 = 0;
    v42 = 0;
    v43 = a6;
    while (1)
    {
      v55 = &a6[v54 / 4];
      v56 = (_DWORD *)(a1 + v54);
      v57 = *(_QWORD *)(a1 + v54);
      *(_QWORD *)((char *)v55 + 5) = *(_QWORD *)(a1 + v54 + 5);
      *(_QWORD *)v55 = v57;
      v58 = &a6[v54 / 4 + 8];
      *(_QWORD *)&a6[v54 / 4 + 4] = v58;
      *((_QWORD *)v55 + 3) = 0x600000000;
      v59 = *(_DWORD *)(a1 + v54 + 24);
      if (v59)
        v60 = v56 == v55;
      else
        v60 = 1;
      if (v60)
        goto LABEL_84;
      v61 = (_DWORD *)*((_QWORD *)v56 + 2);
      if (v56 + 8 != v61)
      {
        *((_QWORD *)v55 + 2) = v61;
        v64 = *(_DWORD *)(a1 + v54 + 28);
        v55[6] = v59;
        v55[7] = v64;
        *((_QWORD *)v56 + 2) = v56 + 8;
        *(_DWORD *)(a1 + v54 + 28) = 0;
        goto LABEL_83;
      }
      v62 = a3;
      if (v59 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a6[v54 / 4 + 4], (uint64_t)&a6[v54 / 4 + 8], *(unsigned int *)(a1 + v54 + 24), 8);
        v63 = v56[6];
        if (!(_DWORD)v63)
          goto LABEL_82;
        v61 = (_DWORD *)*((_QWORD *)v56 + 2);
        v58 = *(_DWORD **)&a6[v54 / 4 + 4];
      }
      else
      {
        v63 = *(unsigned int *)(a1 + v54 + 24);
      }
      memcpy(v58, v61, 8 * v63);
LABEL_82:
      v55[6] = v59;
      a3 = v62;
LABEL_83:
      v56[6] = 0;
LABEL_84:
      v55[20] = v56[20];
      ++v42;
      v54 += 88;
      if (a1 + v54 == a2)
      {
        if (!v54)
          goto LABEL_220;
        v85 = (uint64_t *)&a6[v54 / 4];
        v141 = (uint64_t)&a6[v54 / 4 - 22];
        v143 = a3;
        v86 = (_DWORD *)(a1 + 80);
        v87 = (uint64_t *)a6;
        while (2)
        {
          if (a2 == a3)
          {
            if (v85 == v87)
              goto LABEL_220;
            v124 = 0;
            v125 = v87;
            while (2)
            {
              v126 = &v87[v124 / 8];
              v127 = *(uint64_t *)((char *)&v87[v124 / 8] + 5);
              *(_QWORD *)&v86[v124 / 4 - 20] = v87[v124 / 8];
              v128 = (uint64_t)&v86[v124 / 4 - 20];
              *(_QWORD *)(v128 + 5) = v127;
              if ((uint64_t *)v128 != &v87[v124 / 8])
              {
                v129 = (void **)&v86[v124 / 4 - 16];
                v130 = (uint64_t *)v126[2];
                if (v126 + 4 == v130)
                {
                  v132 = &v87[v124 / 8 + 3];
                  v131 = *(unsigned int *)v132;
                  v133 = &v86[v124 / 4];
                  v134 = v86[v124 / 4 - 14];
                  if (v134 >= v131)
                  {
                    if ((_DWORD)v131)
                      memmove(*v129, v130, 8 * v131);
                    goto LABEL_206;
                  }
                  if (*(v133 - 13) < v131)
                  {
                    *(v133 - 14) = 0;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86[v124 / 4 - 16], (uint64_t)&v86[v124 / 4 - 12], v131, 8);
LABEL_212:
                    v134 = 0;
                  }
                  else
                  {
                    if (!(_DWORD)v134)
                      goto LABEL_212;
                    memmove(*v129, v130, 8 * v134);
                  }
                  v135 = *(unsigned int *)v132;
                  if (v134 != v135)
                    memcpy((char *)*v129 + 8 * v134, (const void *)(v126[2] + 8 * v134), 8 * v135 - 8 * v134);
LABEL_206:
                  *(v133 - 14) = v131;
                }
                else
                {
                  if (&v86[v124 / 4 - 12] != *v129)
                  {
                    free(*v129);
                    v130 = (uint64_t *)v126[2];
                  }
                  *v129 = v130;
                  v132 = v125 + 3;
                  *(_QWORD *)&v86[v124 / 4 - 14] = v87[v124 / 8 + 3];
                  v126[2] = (uint64_t)(v126 + 4);
                  HIDWORD(v87[v124 / 8 + 3]) = 0;
                }
                *(_DWORD *)v132 = 0;
                v43 = a6;
              }
              v86[v124 / 4] = *((_DWORD *)v126 + 20);
              v124 += 88;
              v125 = v126 + 11;
              if ((uint64_t *)v141 == v126)
                goto LABEL_220;
              continue;
            }
          }
          v88 = (uint64_t *)(v86 - 20);
          v89 = (void **)(v86 - 16);
          if (*(_DWORD *)(a2 + 8) > *((_DWORD *)v87 + 2))
          {
            v90 = *(_QWORD *)a2;
            *(_QWORD *)((char *)v86 - 75) = *(_QWORD *)(a2 + 5);
            *v88 = v90;
            if (v88 != (uint64_t *)a2)
            {
              v91 = *(const void **)(a2 + 16);
              if (v91 == (const void *)(a2 + 32))
              {
                v93 = (_DWORD *)(a2 + 24);
                v92 = *(unsigned int *)(a2 + 24);
                v94 = *(v86 - 14);
                if (v94 >= v92)
                {
                  if ((_DWORD)v92)
                  {
                    v95 = *v89;
                    v96 = a3;
                    memmove(v95, v91, 8 * v92);
                    a3 = v96;
                  }
                  *(v86 - 14) = v92;
                  goto LABEL_143;
                }
                if (*(v86 - 13) < v92)
                {
                  *(v86 - 14) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v86 - 16), (uint64_t)(v86 - 12), v92, 8);
LABEL_157:
                  v94 = 0;
                }
                else
                {
                  if (!(_DWORD)v94)
                    goto LABEL_157;
                  memmove(*v89, v91, 8 * v94);
                }
                v104 = *v93;
                if (v94 != v104)
                  memcpy((char *)*v89 + 8 * v94, (const void *)(*(_QWORD *)(a2 + 16) + 8 * v94), 8 * v104 - 8 * v94);
                *(v86 - 14) = v92;
                a3 = v143;
              }
              else
              {
                v106 = (_DWORD *)*((_QWORD *)v86 - 8);
                if (v86 - 12 != v106)
                {
                  v108 = a3;
                  free(v106);
                  a3 = v108;
                  v91 = *(const void **)(a2 + 16);
                }
                *((_QWORD *)v86 - 8) = v91;
                v93 = (_DWORD *)(a2 + 24);
                *((_QWORD *)v86 - 7) = *(_QWORD *)(a2 + 24);
                *(_QWORD *)(a2 + 16) = a2 + 32;
                *(_DWORD *)(a2 + 28) = 0;
              }
LABEL_143:
              *v93 = 0;
            }
            *v86 = *(_DWORD *)(a2 + 80);
            a2 += 88;
LABEL_153:
            v86 += 22;
            if (v85 == v87)
              goto LABEL_220;
            continue;
          }
          break;
        }
        v97 = *v87;
        *(_QWORD *)((char *)v86 - 75) = *(uint64_t *)((char *)v87 + 5);
        *v88 = v97;
        if (v88 != v87)
        {
          v98 = (uint64_t *)v87[2];
          if (v98 == v87 + 4)
          {
            v100 = v87 + 3;
            v99 = *((unsigned int *)v87 + 6);
            v101 = *(v86 - 14);
            if (v101 >= v99)
            {
              if ((_DWORD)v99)
              {
                v102 = *v89;
                v103 = a3;
                memmove(v102, v98, 8 * v99);
                a3 = v103;
              }
              *(v86 - 14) = v99;
              goto LABEL_151;
            }
            if (*(v86 - 13) < v99)
            {
              *(v86 - 14) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v86 - 16), (uint64_t)(v86 - 12), v99, 8);
LABEL_163:
              v101 = 0;
            }
            else
            {
              if (!(_DWORD)v101)
                goto LABEL_163;
              memmove(*v89, v98, 8 * v101);
            }
            v105 = *v100;
            if (v101 != v105)
              memcpy((char *)*v89 + 8 * v101, (const void *)(v87[2] + 8 * v101), 8 * v105 - 8 * v101);
            *(v86 - 14) = v99;
            a3 = v143;
          }
          else
          {
            v107 = (_DWORD *)*((_QWORD *)v86 - 8);
            if (v86 - 12 != v107)
            {
              v109 = a3;
              free(v107);
              a3 = v109;
              v98 = (uint64_t *)v87[2];
            }
            *((_QWORD *)v86 - 8) = v98;
            v100 = v87 + 3;
            *((_QWORD *)v86 - 7) = v87[3];
            v87[2] = (uint64_t)(v87 + 4);
            *((_DWORD *)v87 + 7) = 0;
          }
LABEL_151:
          *v100 = 0;
        }
        *v86 = *((_DWORD *)v87 + 20);
        v87 += 11;
        goto LABEL_153;
      }
    }
  }
  if (a2 == a3)
    return;
  v41 = 0;
  v42 = 0;
  v43 = a6;
  do
  {
    v44 = &a6[v41 / 4];
    v45 = (_DWORD *)(a2 + v41);
    v46 = *(_QWORD *)(a2 + v41);
    *(_QWORD *)((char *)v44 + 5) = *(_QWORD *)(a2 + v41 + 5);
    *(_QWORD *)v44 = v46;
    v47 = &a6[v41 / 4 + 8];
    *(_QWORD *)&a6[v41 / 4 + 4] = v47;
    *((_QWORD *)v44 + 3) = 0x600000000;
    v48 = *(_DWORD *)(a2 + v41 + 24);
    if (v48)
      v49 = v45 == v44;
    else
      v49 = 1;
    if (!v49)
    {
      v50 = (_DWORD *)*((_QWORD *)v45 + 2);
      if (v45 + 8 != v50)
      {
        *((_QWORD *)v44 + 2) = v50;
        v53 = *(_DWORD *)(a2 + v41 + 28);
        v44[6] = v48;
        v44[7] = v53;
        *((_QWORD *)v45 + 2) = v45 + 8;
        *(_DWORD *)(a2 + v41 + 28) = 0;
        goto LABEL_66;
      }
      v51 = a3;
      if (v48 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a6[v41 / 4 + 4], (uint64_t)&a6[v41 / 4 + 8], *(unsigned int *)(a2 + v41 + 24), 8);
        v52 = v45[6];
        if (!(_DWORD)v52)
          goto LABEL_65;
        v50 = (_DWORD *)*((_QWORD *)v45 + 2);
        v47 = *(_DWORD **)&a6[v41 / 4 + 4];
      }
      else
      {
        v52 = *(unsigned int *)(a2 + v41 + 24);
      }
      memcpy(v47, v50, 8 * v52);
LABEL_65:
      v44[6] = v48;
      a3 = v51;
LABEL_66:
      v45[6] = 0;
    }
    v44[20] = v45[20];
    ++v42;
    v41 += 88;
  }
  while (a2 + v41 != a3);
  if (v41)
  {
    v65 = &a6[v41 / 4];
    v66 = (_DWORD *)(a3 - 8);
    while (a2 != a1)
    {
      v67 = v66 + 2;
      v68 = v66 - 20;
      v69 = (void **)(v66 - 16);
      if (*(v65 - 20) <= *(_DWORD *)(a2 - 80))
      {
        v77 = v65 - 22;
        v76 = *((_QWORD *)v65 - 11);
        *(_QWORD *)((char *)v66 - 75) = *(_QWORD *)((char *)v65 - 83);
        *v68 = v76;
        if (v67 == v65)
        {
          v75 = (uint64_t)v65;
          goto LABEL_109;
        }
        v78 = (_DWORD *)*((_QWORD *)v65 - 9);
        if (v78 == v65 - 14)
        {
          v79 = *(v65 - 16);
          v80 = *(v66 - 14);
          if (v80 >= v79)
          {
            if ((_DWORD)v79)
              memmove(*v69, v78, 8 * v79);
            goto LABEL_105;
          }
          if (*(v66 - 13) < v79)
          {
            *(v66 - 14) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v66 - 16), (uint64_t)(v66 - 12), v79, 8);
LABEL_118:
            v80 = 0;
          }
          else
          {
            if (!(_DWORD)v80)
              goto LABEL_118;
            memmove(*v69, v78, 8 * v80);
          }
          v82 = *(v65 - 16);
          if (v80 != v82)
            memcpy((char *)*v69 + 8 * v80, (const void *)(*((_QWORD *)v65 - 9) + 8 * v80), 8 * v82 - 8 * v80);
LABEL_105:
          *(v66 - 14) = v79;
        }
        else
        {
          v84 = (_DWORD *)*((_QWORD *)v66 - 8);
          if (v66 - 12 != v84)
          {
            free(v84);
            v78 = (_DWORD *)*((_QWORD *)v65 - 9);
          }
          *((_QWORD *)v66 - 8) = v78;
          *((_QWORD *)v66 - 7) = *((_QWORD *)v65 - 8);
          *((_QWORD *)v65 - 9) = v65 - 14;
          *(v65 - 15) = 0;
        }
        v75 = (uint64_t)v65;
        v71 = a2;
        v65 -= 22;
        goto LABEL_107;
      }
      v71 = a2 - 88;
      v70 = *(_QWORD *)(a2 - 88);
      *(_QWORD *)((char *)v66 - 75) = *(_QWORD *)(a2 - 83);
      *v68 = v70;
      if (v67 == (_DWORD *)a2)
      {
        v75 = a2;
        goto LABEL_108;
      }
      v72 = *(const void **)(a2 - 72);
      if (v72 != (const void *)(a2 - 56))
      {
        v83 = (_DWORD *)*((_QWORD *)v66 - 8);
        if (v66 - 12 != v83)
        {
          free(v83);
          v72 = *(const void **)(a2 - 72);
        }
        *((_QWORD *)v66 - 8) = v72;
        *((_QWORD *)v66 - 7) = *(_QWORD *)(a2 - 64);
        *(_QWORD *)(a2 - 72) = a2 - 56;
        *(_DWORD *)(a2 - 60) = 0;
        goto LABEL_99;
      }
      v73 = *(unsigned int *)(a2 - 64);
      v74 = *(v66 - 14);
      if (v74 < v73)
      {
        if (*(v66 - 13) < v73)
        {
          *(v66 - 14) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v66 - 16), (uint64_t)(v66 - 12), v73, 8);
LABEL_113:
          v74 = 0;
        }
        else
        {
          if (!(_DWORD)v74)
            goto LABEL_113;
          memmove(*v69, v72, 8 * v74);
        }
        v81 = *(unsigned int *)(a2 - 64);
        if (v74 != v81)
          memcpy((char *)*v69 + 8 * v74, (const void *)(*(_QWORD *)(a2 - 72) + 8 * v74), 8 * v81 - 8 * v74);
        goto LABEL_98;
      }
      if ((_DWORD)v73)
        memmove(*v69, v72, 8 * v73);
LABEL_98:
      *(v66 - 14) = v73;
LABEL_99:
      v75 = a2;
LABEL_107:
      *(_DWORD *)(v75 - 64) = 0;
LABEL_108:
      a2 = v71;
      v77 = v65;
LABEL_109:
      *v66 = *(_DWORD *)(v75 - 8);
      v66 -= 22;
      v65 = v77;
      if (v77 == a6)
        goto LABEL_220;
    }
    if (v65 != a6)
    {
      v110 = 0;
      v111 = v65;
      while (1)
      {
        v112 = &v65[v110];
        v113 = &v66[v110];
        v114 = *(_QWORD *)&v65[v110 - 22];
        *(_QWORD *)((char *)v113 - 75) = *(_QWORD *)((char *)&v65[v110 - 20] - 3);
        *((_QWORD *)v113 - 10) = v114;
        if (&v66[v110 + 2] != &v65[v110])
          break;
LABEL_187:
        v111 -= 22;
        v66[v110] = *(v112 - 2);
        v110 -= 22;
        if (&v65[v110] == v43)
          goto LABEL_220;
      }
      v115 = (void **)(v113 - 16);
      v116 = (_DWORD *)*((_QWORD *)v112 - 9);
      if (v112 - 14 == v116)
      {
        v118 = &v65[v110 - 16];
        v117 = *v118;
        v119 = &v66[v110];
        v120 = v66[v110 - 14];
        if (v120 >= v117)
        {
          if ((_DWORD)v117)
            memmove(*v115, v116, 8 * v117);
          goto LABEL_185;
        }
        if (*(v119 - 13) < v117)
        {
          *(v119 - 14) = 0;
          v123 = (void **)(v113 - 16);
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v115, (uint64_t)&v66[v110 - 12], v117, 8);
          v115 = v123;
LABEL_191:
          v120 = 0;
        }
        else
        {
          if (!(_DWORD)v120)
            goto LABEL_191;
          v144 = (void **)(v113 - 16);
          memmove(*v115, v116, 8 * v120);
          v115 = v144;
        }
        v121 = *v118;
        if (v120 != v121)
          memcpy((char *)*v115 + 8 * v120, (const void *)(*((_QWORD *)v112 - 9) + 8 * v120), 8 * v121 - 8 * v120);
LABEL_185:
        *(v119 - 14) = v117;
        v43 = a6;
      }
      else
      {
        if (&v66[v110 - 12] != *v115)
        {
          v122 = (void **)(v113 - 16);
          free(*v115);
          v115 = v122;
          v116 = (_DWORD *)*((_QWORD *)v112 - 9);
        }
        *v115 = v116;
        v118 = v111 - 16;
        *(_QWORD *)&v66[v110 - 14] = *(_QWORD *)&v65[v110 - 16];
        *((_QWORD *)v112 - 9) = v112 - 14;
        v65[v110 - 15] = 0;
      }
      *v118 = 0;
      goto LABEL_187;
    }
  }
LABEL_220:
  if (v43 && v42)
  {
    v136 = a6 + 8;
    do
    {
      v137 = (_QWORD *)*(v136 - 2);
      if (v136 != v137)
        free(v137);
      v136 += 11;
      --v42;
    }
    while (v42);
  }
}

void sub_1C5279F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  const void *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  void **v10;
  void *v11;
  void **v12;
  unint64_t v13;
  _DWORD *v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _BYTE v20[13];
  void *v21;
  unint64_t v22;
  _BYTE v23[48];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 5);
  *(_QWORD *)v20 = *(_QWORD *)a1;
  *(_QWORD *)&v20[5] = v4;
  v21 = v23;
  v22 = 0x600000000;
  v5 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v5 && v20 != (_BYTE *)a1)
  {
    v6 = *(const void **)(a1 + 16);
    if (v6 != (const void *)(a1 + 32))
    {
      v21 = *(void **)(a1 + 16);
      v22 = __PAIR64__(*(_DWORD *)(a1 + 28), v5);
      *(_QWORD *)(a1 + 16) = a1 + 32;
      *(_DWORD *)(a1 + 28) = 0;
      goto LABEL_8;
    }
    if (v5 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, (uint64_t)v23, v5, 8);
      v8 = *(unsigned int *)(a1 + 24);
      if (!(_DWORD)v8)
        goto LABEL_7;
      v6 = *(const void **)(a1 + 16);
      v7 = v21;
    }
    else
    {
      v7 = v23;
      v8 = v5;
    }
    memcpy(v7, v6, 8 * v8);
LABEL_7:
    LODWORD(v22) = v5;
LABEL_8:
    LODWORD(v5) = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }
  v24 = *(_DWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a2 + 5);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 5) = v9;
  v10 = (void **)(a2 + 16);
  if (a1 == a2)
    goto LABEL_16;
  v11 = *(void **)(a2 + 16);
  if (v11 != (void *)(a2 + 32))
  {
    v19 = *(void **)(a1 + 16);
    if (v19 != (void *)(a1 + 32))
    {
      free(v19);
      v11 = *v10;
    }
    *(_QWORD *)(a1 + 16) = v11;
    v14 = (_DWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 16) = a2 + 32;
    *(_DWORD *)(a2 + 28) = 0;
    goto LABEL_15;
  }
  v12 = (void **)(a1 + 16);
  v14 = (_DWORD *)(a2 + 24);
  v13 = *(unsigned int *)(a2 + 24);
  if (v5 < v13)
  {
    if (*(_DWORD *)(a1 + 28) < v13)
    {
      *(_DWORD *)(a1 + 24) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, a1 + 32, v13, 8);
      v12 = (void **)(a1 + 16);
    }
    else if ((_DWORD)v5)
    {
      v5 = v5;
      memmove(*v12, v11, 8 * v5);
      v12 = (void **)(a1 + 16);
LABEL_29:
      v18 = *v14;
      if (v5 != v18)
        memcpy((char *)*v12 + 8 * v5, (char *)*v10 + 8 * v5, (_BYTE *)*v10 + 8 * v18 - ((_BYTE *)*v10 + 8 * v5));
      goto LABEL_14;
    }
    v5 = 0;
    goto LABEL_29;
  }
  if ((_DWORD)v13)
    memmove(*v12, v11, 8 * v13);
LABEL_14:
  *(_DWORD *)(a1 + 24) = v13;
LABEL_15:
  *v14 = 0;
LABEL_16:
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)a2 = *(_QWORD *)v20;
  *(_QWORD *)(a2 + 5) = *(_QWORD *)&v20[5];
  v15 = v21;
  if (v20 == (_BYTE *)a2)
    goto LABEL_23;
  if (v21 != v23)
  {
    if (*(_QWORD *)(a2 + 16) != a2 + 32)
    {
      free(*(void **)(a2 + 16));
      v15 = v21;
    }
    *(_QWORD *)(a2 + 16) = v15;
    *(_QWORD *)(a2 + 24) = v22;
    v21 = v23;
    HIDWORD(v22) = 0;
    goto LABEL_22;
  }
  v16 = v22;
  v17 = *(unsigned int *)(a2 + 24);
  if (v17 < v22)
  {
    if (*(_DWORD *)(a2 + 28) < v22)
    {
      *(_DWORD *)(a2 + 24) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, a2 + 32, v16, 8);
    }
    else if ((_DWORD)v17)
    {
      memmove(*v10, v23, 8 * v17);
LABEL_34:
      if (v17 != v22)
        memcpy((char *)*v10 + 8 * v17, (char *)v21 + 8 * v17, 8 * v22 - 8 * v17);
      goto LABEL_21;
    }
    v17 = 0;
    goto LABEL_34;
  }
  if ((_DWORD)v22)
    memmove(*v10, v23, 8 * v22);
LABEL_21:
  *(_DWORD *)(a2 + 24) = v16;
LABEL_22:
  LODWORD(v22) = 0;
  v15 = v21;
LABEL_23:
  *(_DWORD *)(a2 + 80) = v24;
  if (v15 != v23)
    free(v15);
}

uint64_t sub_1C527A298()
{
  char v1;
  char *v2;
  int v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"enable safe stack layout";
  v4.n128_u64[1] = 24;
  v3 = 1;
  v1 = 1;
  v2 = &v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED7FF7B0, "safe-stack-layout", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FF7B0, &dword_1C475E000);
}

llvm::ScheduleDAG *llvm::ScheduleDAG::ScheduleDAG(llvm::ScheduleDAG *this, llvm::MachineFunction *a2)
{
  uint64_t v4;

  v4 = *((_QWORD *)a2 + 1);
  *(_QWORD *)this = off_1E814A5E8;
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 2) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 104))(*((_QWORD *)a2 + 2));
  *((_QWORD *)this + 3) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 176))(*((_QWORD *)a2 + 2));
  *((_QWORD *)this + 4) = a2;
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = (char *)this + 120;
  *((_QWORD *)this + 14) = 0x400000000;
  *((_QWORD *)this + 23) = (char *)this + 200;
  *((_QWORD *)this + 24) = 0x400000000;
  *((_DWORD *)this + 66) = -1;
  *((_DWORD *)this + 76) = 0;
  *((_WORD *)this + 150) = 0;
  *(_OWORD *)((char *)this + 284) = 0u;
  *(_OWORD *)((char *)this + 268) = 0u;
  *((_BYTE *)this + 308) &= 0xFCu;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_QWORD *)this + 47) = (char *)this + 392;
  *((_QWORD *)this + 48) = 0x400000000;
  *((_QWORD *)this + 57) = (char *)this + 472;
  *((_QWORD *)this + 58) = 0x400000000;
  *((_DWORD *)this + 134) = -1;
  *((_DWORD *)this + 144) = 0;
  *(_OWORD *)((char *)this + 540) = 0u;
  *(_OWORD *)((char *)this + 556) = 0u;
  *((_WORD *)this + 286) = 0;
  *((_BYTE *)this + 580) &= 0xFCu;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  return this;
}

void llvm::ScheduleDAG::~ScheduleDAG(llvm::ScheduleDAG *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E814A5E8;
  v2 = (char *)*((_QWORD *)this + 57);
  if (v2 != (char *)this + 472)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 47);
  if (v3 != (char *)this + 392)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 23);
  if (v4 != (char *)this + 200)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 13);
  if (v5 != (char *)this + 120)
    free(v5);
  v6 = *((_QWORD *)this + 6);
  if (v6)
  {
    sub_1C527C610((uint64_t)this + 48, v6);
    operator delete(*((void **)this + 6));
  }
}

__n128 llvm::ScheduleDAG::clearDAG(llvm::ScheduleDAG *this)
{
  llvm::ScheduleDAG *v1;
  __n128 result;
  _BYTE v3[35];

  v1 = this;
  sub_1C527C610((uint64_t)this + 48, *((_QWORD *)this + 6));
  memset(&v3[3], 0, 32);
  *(_OWORD *)((char *)v1 + 72) = 0u;
  v1 = (llvm::ScheduleDAG *)((char *)v1 + 72);
  *(_OWORD *)((char *)v1 + 237) = *(_OWORD *)v3;
  *((_OWORD *)v1 + 1) = 0u;
  *((_DWORD *)v1 + 10) = 0;
  *((_DWORD *)v1 + 30) = 0;
  *((_DWORD *)v1 + 48) = -1;
  *(_OWORD *)((char *)v1 + 196) = 0u;
  *(_OWORD *)((char *)v1 + 212) = 0u;
  *((_WORD *)v1 + 114) = 0;
  *((_DWORD *)v1 + 58) = 0;
  *((_BYTE *)v1 + 236) = 0;
  *(_OWORD *)((char *)v1 + 253) = *(_OWORD *)&v3[16];
  *((_DWORD *)v1 + 67) = 0;
  memset(&v3[3], 0, 32);
  *((_OWORD *)v1 + 17) = 0u;
  *((_OWORD *)v1 + 18) = 0u;
  *((_DWORD *)v1 + 78) = 0;
  *((_DWORD *)v1 + 98) = 0;
  *((_DWORD *)v1 + 116) = -1;
  *(_OWORD *)((char *)v1 + 468) = 0u;
  *(_OWORD *)((char *)v1 + 484) = 0u;
  *((_WORD *)v1 + 250) = 0;
  *((_DWORD *)v1 + 126) = 0;
  *((_BYTE *)v1 + 508) = 0;
  result = *(__n128 *)v3;
  *(_OWORD *)((char *)v1 + 509) = *(_OWORD *)v3;
  *(_OWORD *)((char *)v1 + 525) = *(_OWORD *)&v3[16];
  *((_DWORD *)v1 + 135) = 0;
  return result;
}

uint64_t llvm::SUnit::addPred(int64_t this, const llvm::SDep *a2, char a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int64_t *v23;
  uint64_t result;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD v44[9];

  v44[8] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(this + 32);
  v4 = (char *)(this + 32);
  v5 = v6;
  v7 = *((unsigned int *)v4 + 2);
  v8 = *(_QWORD *)a2;
  v9 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
  if ((_DWORD)v7)
  {
    v10 = *((_DWORD *)a2 + 2);
    v11 = (unsigned int *)(v5 + 12);
    v12 = 16 * v7;
    while (1)
    {
      v13 = *(_QWORD *)(v11 - 3);
      if ((a3 & 1) == 0 && (v13 & 0xFFFFFFFFFFFFFFF8) == v9)
        return 0;
      if (v13 == v8 && *(v11 - 1) == v10)
        break;
      v11 += 4;
      v12 -= 16;
      if (!v12)
        goto LABEL_8;
    }
    v25 = *((_DWORD *)a2 + 3);
    if (*v11 >= v25)
      return 0;
    v26 = *(unsigned int *)(v9 + 120);
    if ((_DWORD)v26)
    {
      v27 = (unsigned int *)(*(_QWORD *)(v9 + 112) + 12);
      v28 = 16 * v26;
      while (*(_QWORD *)(v27 - 3) != (*(_QWORD *)a2 & 7 | this) || *(v27 - 1) != v10 || *v27 != *v11)
      {
        v27 += 4;
        v28 -= 16;
        if (!v28)
          goto LABEL_42;
      }
      *v27 = v25;
      v25 = *((_DWORD *)a2 + 3);
    }
LABEL_42:
    result = 0;
    *v11 = v25;
  }
  else
  {
LABEL_8:
    v14 = *((_QWORD *)a2 + 1);
    v15 = *(_QWORD *)a2 & 6;
    if ((v8 & 6) == 0)
    {
      ++*(_DWORD *)(this + 200);
      ++*(_DWORD *)(v9 + 204);
    }
    if ((*(_WORD *)(v9 + 228) & 0x400) == 0)
    {
      v16 = *((_DWORD *)a2 + 2) > 3u && v15 == 6;
      v17 = 208;
      if (v16)
        v17 = 216;
      ++*(_DWORD *)(this + v17);
    }
    if ((*(_WORD *)(this + 228) & 0x400) == 0)
    {
      v18 = *((_DWORD *)a2 + 2) > 3u && v15 == 6;
      v19 = 212;
      if (v18)
        v19 = 220;
      ++*(_DWORD *)(v9 + v19);
    }
    v20 = *((_QWORD *)a2 + 1);
    if (v7 >= *(_DWORD *)(this + 44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v4, this + 48, v7 + 1, 16);
      v5 = *(_QWORD *)(this + 32);
      v7 = *(unsigned int *)(this + 40);
    }
    v21 = (_QWORD *)(v5 + 16 * v7);
    *v21 = v8;
    v21[1] = v20;
    ++*(_DWORD *)(this + 40);
    v22 = *(unsigned int *)(v9 + 120);
    if (v22 >= *(_DWORD *)(v9 + 124))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9 + 112, v9 + 128, v22 + 1, 16);
      LODWORD(v22) = *(_DWORD *)(v9 + 120);
    }
    v23 = (int64_t *)(*(_QWORD *)(v9 + 112) + 16 * v22);
    *v23 = v8 & 7 | this;
    v23[1] = v14;
    ++*(_DWORD *)(v9 + 120);
    if (HIDWORD(v14))
    {
      if ((*(_BYTE *)(this + 236) & 1) != 0)
      {
        v41 = v44;
        v43 = 8;
        v44[0] = this;
        v29 = 1;
        do
        {
          v30 = *((_QWORD *)v41 + --v29);
          v42 = v29;
          *(_BYTE *)(v30 + 236) &= ~1u;
          v31 = *(unsigned int *)(v30 + 120);
          if ((_DWORD)v31)
          {
            v32 = *(_QWORD **)(v30 + 112);
            v33 = 16 * v31;
            do
            {
              v34 = *v32 & 0xFFFFFFFFFFFFFFF8;
              if ((*(_BYTE *)(v34 + 236) & 1) != 0)
              {
                if (v29 >= v43)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, (uint64_t)v44, v29 + 1, 8);
                  v29 = v42;
                }
                *((_QWORD *)v41 + v29) = v34;
                v29 = ++v42;
              }
              v32 += 2;
              v33 -= 16;
            }
            while (v33);
          }
        }
        while (v29);
        if (v41 != v44)
          free(v41);
      }
      if ((*(_BYTE *)(v9 + 236) & 2) != 0)
      {
        v41 = v44;
        v43 = 8;
        v44[0] = v9;
        v35 = 1;
        do
        {
          v36 = *((_QWORD *)v41 + --v35);
          v42 = v35;
          *(_BYTE *)(v36 + 236) &= ~2u;
          v37 = *(unsigned int *)(v36 + 40);
          if ((_DWORD)v37)
          {
            v38 = *(_QWORD **)(v36 + 32);
            v39 = 16 * v37;
            do
            {
              v40 = *v38 & 0xFFFFFFFFFFFFFFF8;
              if ((*(_BYTE *)(v40 + 236) & 2) != 0)
              {
                if (v35 >= v43)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, (uint64_t)v44, v35 + 1, 8);
                  v35 = v42;
                }
                *((_QWORD *)v41 + v35) = v40;
                v35 = ++v42;
              }
              v38 += 2;
              v39 -= 16;
            }
            while (v39);
          }
        }
        while (v35);
        if (v41 != v44)
          free(v41);
      }
    }
    return 1;
  }
  return result;
}

void llvm::SUnit::setDepthDirty(llvm::SUnit *this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD v10[9];

  v10[8] = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 236) & 1) != 0)
  {
    v7 = v10;
    v9 = 8;
    v10[0] = this;
    v1 = 1;
    do
    {
      v2 = *((_QWORD *)v7 + --v1);
      v8 = v1;
      *(_BYTE *)(v2 + 236) &= ~1u;
      v3 = *(unsigned int *)(v2 + 120);
      if ((_DWORD)v3)
      {
        v4 = *(_QWORD **)(v2 + 112);
        v5 = 16 * v3;
        do
        {
          v6 = *v4 & 0xFFFFFFFFFFFFFFF8;
          if ((*(_BYTE *)(v6 + 236) & 1) != 0)
          {
            if (v1 >= v9)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v7, (uint64_t)v10, v1 + 1, 8);
              v1 = v8;
            }
            *((_QWORD *)v7 + v1) = v6;
            v1 = ++v8;
          }
          v4 += 2;
          v5 -= 16;
        }
        while (v5);
      }
    }
    while (v1);
    if (v7 != v10)
      free(v7);
  }
}

void llvm::SUnit::setHeightDirty(llvm::SUnit *this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD v10[9];

  v10[8] = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 236) & 2) != 0)
  {
    v7 = v10;
    v9 = 8;
    v10[0] = this;
    v1 = 1;
    do
    {
      v2 = *((_QWORD *)v7 + --v1);
      v8 = v1;
      *(_BYTE *)(v2 + 236) &= ~2u;
      v3 = *(unsigned int *)(v2 + 40);
      if ((_DWORD)v3)
      {
        v4 = *(_QWORD **)(v2 + 32);
        v5 = 16 * v3;
        do
        {
          v6 = *v4 & 0xFFFFFFFFFFFFFFF8;
          if ((*(_BYTE *)(v6 + 236) & 2) != 0)
          {
            if (v1 >= v9)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v7, (uint64_t)v10, v1 + 1, 8);
              v1 = v8;
            }
            *((_QWORD *)v7 + v1) = v6;
            v1 = ++v8;
          }
          v4 += 2;
          v5 -= 16;
        }
        while (v5);
      }
    }
    while (v1);
    if (v7 != v10)
      free(v7);
  }
}

void llvm::SUnit::removePred(unint64_t this, const llvm::SDep *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _DWORD *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD v34[9];

  v34[8] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(this + 32);
  v5 = *(unsigned int *)(this + 40);
  v6 = v4;
  if ((_DWORD)v5)
  {
    v7 = 16 * v5;
    v6 = *(_QWORD *)(this + 32);
    while (*(_QWORD *)v6 != *(_QWORD *)a2
         || *(_DWORD *)(v6 + 8) != *((_DWORD *)a2 + 2)
         || *(_DWORD *)(v6 + 12) != *((_DWORD *)a2 + 3))
    {
      v6 += 16;
      v7 -= 16;
      if (!v7)
      {
        v6 = v4 + 16 * v5;
        break;
      }
    }
  }
  if (v5 != (v6 - v4) >> 4)
  {
    v8 = *((_DWORD *)a2 + 3);
    v9 = *(_QWORD *)a2 & 7 | this;
    v10 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    v11 = *(_QWORD *)(v10 + 112);
    v12 = *(unsigned int *)(v10 + 120);
    v13 = v11 + 16 * v12;
    if ((_DWORD)v12)
    {
      v14 = 16 * v12;
      while (*(_QWORD *)v11 != v9 || *(_DWORD *)(v11 + 8) != *((_DWORD *)a2 + 2) || *(_DWORD *)(v11 + 12) != v8)
      {
        v11 += 16;
        v14 -= 16;
        if (!v14)
        {
          v11 = v13;
          break;
        }
      }
    }
    if (v13 != v11 + 16)
    {
      memmove((void *)v11, (const void *)(v11 + 16), v13 - (v11 + 16));
      LODWORD(v12) = *(_DWORD *)(v10 + 120);
      v4 = *(_QWORD *)(this + 32);
    }
    *(_DWORD *)(v10 + 120) = v12 - 1;
    v15 = *(unsigned int *)(this + 40);
    v16 = v4 + 16 * v15;
    if (v16 != v6 + 16)
    {
      memmove((void *)v6, (const void *)(v6 + 16), v16 - (v6 + 16));
      LODWORD(v15) = *(_DWORD *)(this + 40);
    }
    *(_DWORD *)(this + 40) = v15 - 1;
    if ((v9 & 6) == 0)
    {
      --*(_DWORD *)(this + 200);
      --*(_DWORD *)(v10 + 204);
    }
    if ((*(_WORD *)(v10 + 228) & 0x400) == 0)
    {
      if ((~*(_DWORD *)a2 & 6) != 0 || *((_DWORD *)a2 + 2) < 4u)
        v17 = (char *)(this + 208);
      else
        v17 = (char *)(this + 216);
      --*(_DWORD *)v17;
    }
    if ((*(_WORD *)(this + 228) & 0x400) == 0)
    {
      if ((~*(_DWORD *)a2 & 6) != 0 || *((_DWORD *)a2 + 2) < 4u)
        v18 = (_DWORD *)(v10 + 212);
      else
        v18 = (_DWORD *)(v10 + 220);
      --*v18;
    }
    if (v8)
    {
      if ((*(_BYTE *)(this + 236) & 1) != 0)
      {
        v31 = v34;
        v33 = 8;
        v34[0] = this;
        v25 = 1;
        do
        {
          v26 = *((_QWORD *)v31 + --v25);
          v32 = v25;
          *(_BYTE *)(v26 + 236) &= ~1u;
          v27 = *(unsigned int *)(v26 + 120);
          if ((_DWORD)v27)
          {
            v28 = *(_QWORD **)(v26 + 112);
            v29 = 16 * v27;
            do
            {
              v30 = *v28 & 0xFFFFFFFFFFFFFFF8;
              if ((*(_BYTE *)(v30 + 236) & 1) != 0)
              {
                if (v25 >= v33)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, (uint64_t)v34, v25 + 1, 8);
                  v25 = v32;
                }
                *((_QWORD *)v31 + v25) = v30;
                v25 = ++v32;
              }
              v28 += 2;
              v29 -= 16;
            }
            while (v29);
          }
        }
        while (v25);
        if (v31 != v34)
          free(v31);
      }
      if ((*(_BYTE *)(v10 + 236) & 2) != 0)
      {
        v31 = v34;
        v33 = 8;
        v34[0] = v10;
        v19 = 1;
        do
        {
          v20 = *((_QWORD *)v31 + --v19);
          v32 = v19;
          *(_BYTE *)(v20 + 236) &= ~2u;
          v21 = *(unsigned int *)(v20 + 40);
          if ((_DWORD)v21)
          {
            v22 = *(_QWORD **)(v20 + 32);
            v23 = 16 * v21;
            do
            {
              v24 = *v22 & 0xFFFFFFFFFFFFFFF8;
              if ((*(_BYTE *)(v24 + 236) & 2) != 0)
              {
                if (v19 >= v33)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, (uint64_t)v34, v19 + 1, 8);
                  v19 = v32;
                }
                *((_QWORD *)v31 + v19) = v24;
                v19 = ++v32;
              }
              v22 += 2;
              v23 -= 16;
            }
            while (v23);
          }
        }
        while (v19);
        if (v31 != v34)
          free(v31);
      }
    }
  }
}

void llvm::SUnit::ComputeDepth(llvm::SUnit *this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[8];
  void *v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD v22[9];

  v22[8] = *MEMORY[0x1E0C80C00];
  v16 = v18;
  v18[0] = this;
  v17 = 0x800000001;
  v1 = 1;
  do
  {
    while (1)
    {
      v2 = *((_QWORD *)v16 + v1 - 1);
      v3 = *(unsigned int *)(v2 + 40);
      if ((_DWORD)v3)
        break;
      v4 = 0;
LABEL_18:
      LODWORD(v17) = --v1;
      if (v4 != *(_DWORD *)(v2 + 240))
      {
        if ((*(_BYTE *)(v2 + 236) & 1) != 0)
        {
          v19 = v22;
          v21 = 8;
          v10 = 1;
          v22[0] = v2;
          do
          {
            v11 = *((_QWORD *)v19 + --v10);
            v20 = v10;
            *(_BYTE *)(v11 + 236) &= ~1u;
            v12 = *(unsigned int *)(v11 + 120);
            if ((_DWORD)v12)
            {
              v13 = *(_QWORD **)(v11 + 112);
              v14 = 16 * v12;
              do
              {
                v15 = *v13 & 0xFFFFFFFFFFFFFFF8;
                if ((*(_BYTE *)(v15 + 236) & 1) != 0)
                {
                  if (v10 >= v21)
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, (uint64_t)v22, v10 + 1, 8);
                    v10 = v20;
                  }
                  *((_QWORD *)v19 + v10) = v15;
                  v10 = ++v20;
                }
                v13 += 2;
                v14 -= 16;
              }
              while (v14);
            }
          }
          while (v10);
          if (v19 != v22)
            free(v19);
          v1 = v17;
        }
        *(_DWORD *)(v2 + 240) = v4;
      }
      *(_BYTE *)(v2 + 236) |= 1u;
      if (!v1)
        goto LABEL_35;
    }
    v4 = 0;
    v5 = *(_QWORD *)(v2 + 32);
    v6 = v5 + 16 * v3;
    v7 = 1;
    while (2)
    {
      v5 += 16;
      while (1)
      {
        v8 = v5 - 16;
        v9 = *(_QWORD *)(v5 - 16) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_BYTE *)(v9 + 236) & 1) == 0)
          break;
        if (v4 <= *(_DWORD *)(v5 - 4) + *(_DWORD *)(v9 + 240))
          v4 = *(_DWORD *)(v5 - 4) + *(_DWORD *)(v9 + 240);
        v5 += 16;
        if (v8 + 16 == v6)
        {
          if ((v7 & 1) != 0)
            goto LABEL_18;
          goto LABEL_15;
        }
      }
      if (v1 >= HIDWORD(v17))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, (uint64_t)v18, v1 + 1, 8);
        v1 = v17;
      }
      v7 = 0;
      *((_QWORD *)v16 + v1) = v9;
      v1 = v17 + 1;
      LODWORD(v17) = v17 + 1;
      if (v5 != v6)
        continue;
      break;
    }
LABEL_15:
    ;
  }
  while (v1);
LABEL_35:
  if (v16 != v18)
    free(v16);
}

void llvm::SUnit::ComputeHeight(llvm::SUnit *this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[8];
  void *v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD v22[9];

  v22[8] = *MEMORY[0x1E0C80C00];
  v16 = v18;
  v18[0] = this;
  v17 = 0x800000001;
  v1 = 1;
  do
  {
    while (1)
    {
      v2 = *((_QWORD *)v16 + v1 - 1);
      v3 = *(unsigned int *)(v2 + 120);
      if ((_DWORD)v3)
        break;
      v4 = 0;
LABEL_18:
      LODWORD(v17) = --v1;
      if (v4 != *(_DWORD *)(v2 + 244))
      {
        if ((*(_BYTE *)(v2 + 236) & 2) != 0)
        {
          v19 = v22;
          v21 = 8;
          v10 = 1;
          v22[0] = v2;
          do
          {
            v11 = *((_QWORD *)v19 + --v10);
            v20 = v10;
            *(_BYTE *)(v11 + 236) &= ~2u;
            v12 = *(unsigned int *)(v11 + 40);
            if ((_DWORD)v12)
            {
              v13 = *(_QWORD **)(v11 + 32);
              v14 = 16 * v12;
              do
              {
                v15 = *v13 & 0xFFFFFFFFFFFFFFF8;
                if ((*(_BYTE *)(v15 + 236) & 2) != 0)
                {
                  if (v10 >= v21)
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, (uint64_t)v22, v10 + 1, 8);
                    v10 = v20;
                  }
                  *((_QWORD *)v19 + v10) = v15;
                  v10 = ++v20;
                }
                v13 += 2;
                v14 -= 16;
              }
              while (v14);
            }
          }
          while (v10);
          if (v19 != v22)
            free(v19);
          v1 = v17;
        }
        *(_DWORD *)(v2 + 244) = v4;
      }
      *(_BYTE *)(v2 + 236) |= 2u;
      if (!v1)
        goto LABEL_35;
    }
    v4 = 0;
    v5 = *(_QWORD *)(v2 + 112);
    v6 = v5 + 16 * v3;
    v7 = 1;
    while (2)
    {
      v5 += 16;
      while (1)
      {
        v8 = v5 - 16;
        v9 = *(_QWORD *)(v5 - 16) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_BYTE *)(v9 + 236) & 2) == 0)
          break;
        if (v4 <= *(_DWORD *)(v5 - 4) + *(_DWORD *)(v9 + 244))
          v4 = *(_DWORD *)(v5 - 4) + *(_DWORD *)(v9 + 244);
        v5 += 16;
        if (v8 + 16 == v6)
        {
          if ((v7 & 1) != 0)
            goto LABEL_18;
          goto LABEL_15;
        }
      }
      if (v1 >= HIDWORD(v17))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, (uint64_t)v18, v1 + 1, 8);
        v1 = v17;
      }
      v7 = 0;
      *((_QWORD *)v16 + v1) = v9;
      v1 = v17 + 1;
      LODWORD(v17) = v17 + 1;
      if (v5 != v6)
        continue;
      break;
    }
LABEL_15:
    ;
  }
  while (v1);
LABEL_35:
  if (v16 != v18)
    free(v16);
}

__n128 llvm::SUnit::biasCriticalPath(llvm::SUnit *this)
{
  __n128 *v2;
  unint64_t v3;
  __n128 *v4;
  __n128 result;
  __n128 *v6;
  __n128 *v7;
  unsigned int v8;
  unint64_t v9;
  llvm::SUnit *v10;
  __n128 v11;

  if (*((_DWORD *)this + 50) >= 2u)
  {
    v2 = (__n128 *)*((_QWORD *)this + 4);
    v3 = v2->n128_u64[0] & 0xFFFFFFFFFFFFFFF8;
    v4 = v2;
    if ((*(_BYTE *)(v3 + 236) & 1) == 0)
    {
      llvm::SUnit::ComputeDepth((llvm::SUnit *)(v2->n128_u64[0] & 0xFFFFFFFFFFFFFFF8));
      v4 = (__n128 *)*((_QWORD *)this + 4);
    }
    v6 = &v4[*((unsigned int *)this + 10)];
    v7 = v2 + 1;
    if (&v2[1] != v6)
    {
      v8 = *(_DWORD *)(v3 + 240);
      do
      {
        v9 = v7->n128_u64[0];
        if ((v7->n128_u64[0] & 6) == 0)
        {
          v10 = (llvm::SUnit *)(v9 & 0xFFFFFFFFFFFFFFF8);
          if ((*(_BYTE *)((v9 & 0xFFFFFFFFFFFFFFF8) + 236) & 1) == 0)
            llvm::SUnit::ComputeDepth(v10);
          if (*((_DWORD *)v10 + 60) > v8)
            v2 = v7;
        }
        ++v7;
      }
      while (v7 != v6);
      v4 = (__n128 *)*((_QWORD *)this + 4);
    }
    if (v2 != v4)
    {
      v11 = *v4;
      *v4 = *v2;
      result = v11;
      *v2 = v11;
    }
  }
  return result;
}

void llvm::ScheduleDAGTopologicalSort::InitDAGTopologicalSorting(uint64_t **this)
{
  unsigned int v2;
  uint64_t *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  int v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  signed int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  _QWORD *v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  llvm::ScheduleDAGTopologicalSort *v59;
  _QWORD *v60;
  void *__p;
  char *v62;
  char *v63;

  *((_BYTE *)this + 16) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = -252645135 * (((*this)[1] - **this) >> 4);
  __p = 0;
  v62 = 0;
  v63 = 0;
  sub_1C4DB1D18((uint64_t)&__p, v2);
  v3 = this[37];
  v4 = ((char *)this[38] - (char *)v3) >> 2;
  v60 = this + 37;
  if (v2 <= v4)
  {
    if (v2 < v4)
      this[38] = (uint64_t *)((char *)v3 + 4 * v2);
  }
  else
  {
    sub_1C4D63CD0((char **)this + 37, v2 - v4);
  }
  v5 = this + 40;
  v6 = this[40];
  v7 = ((char *)this[41] - (char *)v6) >> 2;
  if (v2 <= v7)
  {
    if (v2 < v7)
      this[41] = (uint64_t *)((char *)v6 + 4 * v2);
  }
  else
  {
    sub_1C4D63CD0((char **)this + 40, v2 - v7);
  }
  v8 = this[1];
  if (v8)
  {
    v9 = v62;
    if (v62 >= v63)
    {
      v11 = (char *)__p;
      v12 = (v62 - (_BYTE *)__p) >> 3;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
LABEL_91:
        abort();
      v14 = v63 - (_BYTE *)__p;
      if ((v63 - (_BYTE *)__p) >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 61)
LABEL_92:
          sub_1C4764EE4();
        v16 = (char *)operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[8 * v12];
      *(_QWORD *)v17 = v8;
      v10 = v17 + 8;
      if (v9 != v11)
      {
        do
        {
          v18 = *((_QWORD *)v9 - 1);
          v9 -= 8;
          *((_QWORD *)v17 - 1) = v18;
          v17 -= 8;
        }
        while (v9 != v11);
        v9 = (char *)__p;
      }
      __p = v17;
      v62 = v10;
      v63 = &v16[8 * v15];
      if (v9)
        operator delete(v9);
    }
    else
    {
      *(_QWORD *)v62 = v8;
      v10 = v9 + 8;
    }
    v62 = v10;
  }
  v59 = (llvm::ScheduleDAGTopologicalSort *)this;
  v19 = **this;
  for (i = (*this)[1]; v19 != i; v19 += 272)
  {
    v21 = *(_DWORD *)(v19 + 120);
    *(_DWORD *)(*v5 + 4 * *(int *)(v19 + 192)) = v21;
    if (!v21)
    {
      v22 = v62;
      if (v62 >= v63)
      {
        v24 = (char *)__p;
        v25 = (v62 - (_BYTE *)__p) >> 3;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61)
          goto LABEL_91;
        v27 = v63 - (_BYTE *)__p;
        if ((v63 - (_BYTE *)__p) >> 2 > v26)
          v26 = v27 >> 2;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          if (v28 >> 61)
            goto LABEL_92;
          v29 = (char *)operator new(8 * v28);
        }
        else
        {
          v29 = 0;
        }
        v30 = &v29[8 * v25];
        *(_QWORD *)v30 = v19;
        v23 = v30 + 8;
        if (v22 != v24)
        {
          do
          {
            v31 = *((_QWORD *)v22 - 1);
            v22 -= 8;
            *((_QWORD *)v30 - 1) = v31;
            v30 -= 8;
          }
          while (v22 != v24);
          v22 = (char *)__p;
        }
        __p = v30;
        v62 = v23;
        v63 = &v29[8 * v28];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_QWORD *)v62 = v19;
        v23 = v22 + 8;
      }
      v62 = v23;
    }
  }
  v32 = v62;
  if (__p != v62)
  {
    v33 = v2;
    do
    {
      v35 = *((_QWORD *)v32 - 1);
      v32 -= 8;
      v34 = v35;
      v62 = v32;
      v36 = *(_DWORD *)(v35 + 192);
      if (v36 < v2)
      {
        *(_DWORD *)(*v5 + 4 * (int)v36) = --v33;
        *(_DWORD *)(*v60 + 4 * v33) = v36;
      }
      v37 = *(unsigned int *)(v34 + 40);
      if ((_DWORD)v37)
      {
        v38 = *(_QWORD **)(v34 + 32);
        v39 = &v38[2 * v37];
        do
        {
          v40 = *v38 & 0xFFFFFFFFFFFFFFF8;
          v41 = *(unsigned int *)(v40 + 192);
          if (v41 < v2)
          {
            v42 = *(_DWORD *)(*v5 + 4 * v41) - 1;
            *(_DWORD *)(*v5 + 4 * v41) = v42;
            if (!v42)
            {
              if (v32 >= v63)
              {
                v44 = (char *)__p;
                v45 = (v32 - (_BYTE *)__p) >> 3;
                v46 = v45 + 1;
                if ((unint64_t)(v45 + 1) >> 61)
                  goto LABEL_91;
                v47 = v63 - (_BYTE *)__p;
                if ((v63 - (_BYTE *)__p) >> 2 > v46)
                  v46 = v47 >> 2;
                if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
                  v48 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v48 = v46;
                if (v48)
                {
                  if (v48 >> 61)
                    goto LABEL_92;
                  v49 = (char *)operator new(8 * v48);
                }
                else
                {
                  v49 = 0;
                }
                v50 = (unint64_t *)&v49[8 * v45];
                *v50 = v40;
                v43 = (char *)(v50 + 1);
                if (v32 != v44)
                {
                  do
                  {
                    v51 = *((_QWORD *)v32 - 1);
                    v32 -= 8;
                    *--v50 = v51;
                  }
                  while (v32 != v44);
                  v32 = (char *)__p;
                }
                __p = v50;
                v62 = v43;
                v63 = &v49[8 * v48];
                if (v32)
                  operator delete(v32);
              }
              else
              {
                *(_QWORD *)v32 = v40;
                v43 = v32 + 8;
              }
              v62 = v43;
              v32 = v43;
            }
          }
          v38 += 2;
        }
        while (v38 != v39);
      }
    }
    while (__p != v32);
  }
  v52 = *((unsigned int *)v59 + 88);
  if ((*((_DWORD *)v59 + 102) & 0x3F) != 0)
  {
    v58 = *((_QWORD *)v59 + 43) + 8 * v52;
    *(_QWORD *)(v58 - 8) &= ~(-1 << (*((_DWORD *)v59 + 102) & 0x3F));
  }
  v53 = v52;
  v54 = (_QWORD *)((char *)v59 + 344);
  *((_DWORD *)v59 + 102) = v2;
  v55 = v2 + 63;
  if ((_DWORD)v52 != (v2 + 63) >> 6)
  {
    v56 = v55 >> 6;
    if (v52 > v56)
    {
      *((_DWORD *)v59 + 88) = v56;
      v53 = v55 >> 6;
    }
    else
    {
      v57 = v52;
      if (v56 > *((_DWORD *)v59 + 89))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v59 + 344, (uint64_t)v59 + 360, v56, 8);
        v57 = *((unsigned int *)v59 + 88);
        v53 = *((_DWORD *)v59 + 88);
      }
      if (v56 != v52)
        bzero((void *)(*v54 + 8 * v57), 8 * (v56 - v52));
      v53 += v56 - v52;
      *((_DWORD *)v59 + 88) = v53;
      v2 = *((_DWORD *)v59 + 102);
    }
  }
  if ((v2 & 0x3F) != 0)
    *(_QWORD *)(*v54 + 8 * v53 - 8) &= ~(-1 << (v2 & 0x3F));
  if (__p)
  {
    v62 = (char *)__p;
    operator delete(__p);
  }
}

uint64_t llvm::ScheduleDAGTopologicalSort::Allocate(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(*(_QWORD *)(this + 320) + 4 * a2) = a3;
  *(_DWORD *)(*(_QWORD *)(this + 296) + 4 * a3) = a2;
  return this;
}

void llvm::ScheduleDAGTopologicalSort::FixOrder(uint64_t **this)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  llvm::ScheduleDAGTopologicalSort *v6;

  if (*((_BYTE *)this + 16))
  {
    llvm::ScheduleDAGTopologicalSort::InitDAGTopologicalSorting(this);
  }
  else
  {
    v1 = *((unsigned int *)this + 8);
    if ((_DWORD)v1)
    {
      v2 = (unint64_t *)this[3];
      v3 = &v2[2 * v1];
      v6 = (llvm::ScheduleDAGTopologicalSort *)this;
      do
      {
        v4 = *v2;
        v5 = v2[1];
        v2 += 2;
        llvm::ScheduleDAGTopologicalSort::AddPred((uint64_t)v6, v4, v5);
        this = (uint64_t **)v6;
      }
      while (v2 != v3);
    }
    *((_DWORD *)this + 8) = 0;
  }
}

uint64_t llvm::ScheduleDAGTopologicalSort::AddPredQueued(uint64_t this, llvm::SUnit *a2, llvm::SUnit *a3)
{
  unsigned int v3;
  llvm::SUnit *v4;
  llvm::SUnit *v5;

  v4 = a3;
  v5 = a2;
  if (*(_BYTE *)(this + 16))
  {
    *(_BYTE *)(this + 16) = 1;
  }
  else
  {
    v3 = *(_DWORD *)(this + 32);
    *(_BYTE *)(this + 16) = v3 > 0xA;
    if (v3 <= 0xA)
      return sub_1C6211B60(this + 24, (uint64_t *)&v5, (uint64_t *)&v4);
  }
  return this;
}

void llvm::ScheduleDAGTopologicalSort::DFS(_QWORD *a1, unint64_t a2, int a3, _BYTE *a4)
{
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t *v31;
  unint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t *v38;
  unint64_t v39;
  _BYTE *v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t *v43;

  v41 = 0;
  v42 = 0;
  v43 = 0;
  sub_1C4DB1D18((uint64_t)&v41, 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 4));
  v8 = v42;
  v40 = a4;
  if (v42 >= v43)
  {
    v10 = v41;
    v11 = v42 - v41;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
LABEL_52:
      abort();
    v13 = (char *)v43 - (char *)v41;
    if (((char *)v43 - (char *)v41) >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
LABEL_53:
        sub_1C4764EE4();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = (unint64_t *)&v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = a2;
    v9 = v16 + 1;
    if (v8 != v10)
    {
      do
      {
        v18 = *--v8;
        *--v16 = v18;
      }
      while (v8 != v10);
      v8 = v41;
    }
    v41 = v16;
    v43 = (unint64_t *)v17;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v42 = a2;
    v9 = v8 + 1;
  }
  v42 = v9;
  while (1)
  {
    v20 = *--v9;
    v19 = v20;
    v42 = v9;
    *(_QWORD *)(a1[43] + (((unint64_t)*(unsigned int *)(v20 + 192) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v20 + 192);
    v21 = *(unsigned int *)(v20 + 120);
    if ((_DWORD)v21)
      break;
LABEL_47:
    if (v41 == v9)
    {
      if (!v9)
        return;
LABEL_49:
      operator delete(v9);
      return;
    }
  }
  v22 = *(_QWORD *)(v19 + 112);
  v23 = v22 + 16 * v21;
  while (1)
  {
    v24 = *(_QWORD *)(v23 - 16);
    v23 -= 16;
    v25 = v24 & 0xFFFFFFFFFFFFFFF8;
    v26 = *(unsigned int *)((v24 & 0xFFFFFFFFFFFFFFF8) + 192);
    v27 = a1[40];
    if (v26 < (a1[41] - v27) >> 2)
      break;
LABEL_46:
    if (v23 == v22)
      goto LABEL_47;
  }
  v28 = *(_DWORD *)(v27 + 4 * v26);
  if (v28 != a3)
  {
    v29 = *(_QWORD *)(a1[43] + 8 * (v26 >> 6)) & (1 << v26);
    if (v28 < a3 && v29 == 0)
    {
      if (v9 >= v43)
      {
        v32 = v41;
        v33 = v9 - v41;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 61)
          goto LABEL_52;
        v35 = (char *)v43 - (char *)v41;
        if (((char *)v43 - (char *)v41) >> 2 > v34)
          v34 = v35 >> 2;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        if (v36)
        {
          if (v36 >> 61)
            goto LABEL_53;
          v37 = (char *)operator new(8 * v36);
        }
        else
        {
          v37 = 0;
        }
        v38 = (unint64_t *)&v37[8 * v33];
        *v38 = v25;
        v31 = v38 + 1;
        if (v9 != v32)
        {
          do
          {
            v39 = *--v9;
            *--v38 = v39;
          }
          while (v9 != v32);
          v9 = v41;
        }
        v41 = v38;
        v43 = (unint64_t *)&v37[8 * v36];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *v9 = v25;
        v31 = v9 + 1;
      }
      v42 = v31;
      v9 = v31;
    }
    goto LABEL_46;
  }
  v9 = v41;
  *v40 = 1;
  if (v9)
    goto LABEL_49;
}

void llvm::ScheduleDAGTopologicalSort::GetSubGraph(llvm::ScheduleDAGTopologicalSort *this@<X0>, const llvm::SUnit *a2@<X1>, const llvm::SUnit *a3@<X2>, BOOL *a4@<X3>, char **a5@<X8>)
{
  uint64_t v6;
  int v7;
  int v8;
  char *v9;
  BOOL v10;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  unint64_t *v79;
  unint64_t v80;
  char **v81;
  unint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  int v92;
  const llvm::SUnit *v93;
  BOOL *v94;
  int v96;
  void *__p;
  char *v98;
  char *v99;
  void *v100;
  uint64_t v101;
  _BYTE v102[48];
  int v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  __p = 0;
  v98 = 0;
  v6 = *((_QWORD *)this + 40);
  v7 = *(_DWORD *)(v6 + 4 * *((unsigned int *)a2 + 48));
  v8 = *(_DWORD *)(v6 + 4 * *((unsigned int *)a3 + 48));
  v99 = 0;
  v100 = v102;
  v101 = 0x600000000;
  v103 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  if (v7 > v8)
  {
    v9 = 0;
    v10 = 0;
    goto LABEL_127;
  }
  sub_1C4DB1D18((uint64_t)&__p, 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 4));
  v14 = *((unsigned int *)this + 88);
  if ((_DWORD)v14)
    bzero(*((void **)this + 43), 8 * v14);
  v15 = v98;
  v96 = v7;
  v93 = a3;
  v94 = a4;
  if (v98 >= v99)
  {
    v16 = (char *)__p;
    v17 = (v98 - (_BYTE *)__p) >> 3;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61)
LABEL_132:
      abort();
    v19 = v99 - (_BYTE *)__p;
    if ((v99 - (_BYTE *)__p) >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 61)
        goto LABEL_133;
      v21 = (char *)operator new(8 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = a2;
    v9 = v22 + 8;
    if (v15 == v16)
    {
      v7 = v96;
    }
    else
    {
      v7 = v96;
      do
      {
        v24 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v22 - 1) = v24;
        v22 -= 8;
      }
      while (v15 != v16);
      v15 = (char *)__p;
    }
    __p = v22;
    v99 = v23;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *(_QWORD *)v98 = a2;
    v9 = v15 + 8;
  }
  v25 = 0;
  v98 = v9;
  do
  {
    v27 = *((_QWORD *)v9 - 1);
    v9 -= 8;
    v26 = v27;
    v98 = v9;
    v28 = *(unsigned int *)(v27 + 120);
    if ((_DWORD)v28)
    {
      v29 = *(_QWORD *)(v26 + 112);
      v30 = v29 + 16 * v28;
      do
      {
        v31 = *(_QWORD *)(v30 - 16);
        v30 -= 16;
        v32 = v31 & 0xFFFFFFFFFFFFFFF8;
        v33 = *(unsigned int *)((v31 & 0xFFFFFFFFFFFFFFF8) + 192);
        if ((_DWORD)v33 != -1)
        {
          v34 = *(_DWORD *)(*((_QWORD *)this + 40) + 4 * v33);
          if (v34 == v8)
          {
            v25 = 1;
          }
          else
          {
            v35 = 1 << v33;
            v36 = v33 >> 6;
            v37 = *((_QWORD *)this + 43);
            v38 = *(_QWORD *)(v37 + 8 * v36);
            if (v34 < v8 && (v38 & v35) == 0)
            {
              *(_QWORD *)(v37 + 8 * v36) = v38 | v35;
              if (v9 >= v99)
              {
                v41 = (char *)__p;
                v42 = (v9 - (_BYTE *)__p) >> 3;
                v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 61)
                  goto LABEL_132;
                v44 = v99 - (_BYTE *)__p;
                if ((v99 - (_BYTE *)__p) >> 2 > v43)
                  v43 = v44 >> 2;
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
                  v45 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v45 = v43;
                if (v45)
                {
                  if (v45 >> 61)
                    goto LABEL_133;
                  v46 = (char *)operator new(8 * v45);
                }
                else
                {
                  v46 = 0;
                }
                v47 = (unint64_t *)&v46[8 * v42];
                *v47 = v32;
                v40 = (char *)(v47 + 1);
                if (v9 != v41)
                {
                  do
                  {
                    v48 = *((_QWORD *)v9 - 1);
                    v9 -= 8;
                    *--v47 = v48;
                  }
                  while (v9 != v41);
                  v9 = (char *)__p;
                }
                __p = v47;
                v98 = v40;
                v99 = &v46[8 * v45];
                v7 = v96;
                if (v9)
                  operator delete(v9);
              }
              else
              {
                *(_QWORD *)v9 = v32;
                v40 = v9 + 8;
              }
              v98 = v40;
              v9 = v40;
            }
          }
        }
      }
      while (v30 != v29);
    }
  }
  while (__p != v9);
  if ((v25 & 1) != 0)
  {
    v49 = -252645135 * ((*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 4);
    v50 = v101;
    if ((v103 & 0x3F) != 0)
      *((_QWORD *)v100 + v101 - 1) &= ~(-1 << (v103 & 0x3F));
    v51 = v50;
    v103 = v49;
    v52 = v49 + 63;
    if ((_DWORD)v50 != (v49 + 63) >> 6)
    {
      v53 = v52 >> 6;
      if (v50 > v53)
      {
        LODWORD(v101) = v52 >> 6;
        v51 = v52 >> 6;
      }
      else
      {
        v54 = v50;
        if (v53 > HIDWORD(v101))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, (uint64_t)v102, v53, 8);
          v54 = v101;
          v51 = v101;
        }
        if (v53 != v50)
          bzero((char *)v100 + 8 * v54, 8 * (v53 - v50));
        v51 += v53 - v50;
        LODWORD(v101) = v51;
        LOBYTE(v49) = v103;
      }
    }
    v55 = v49 & 0x3F;
    if (v55)
      *((_QWORD *)v100 + v51 - 1) &= ~(-1 << v55);
    if (v9 < v99)
    {
      *(_QWORD *)v9 = v93;
      v56 = v9 + 8;
      goto LABEL_78;
    }
    v57 = (v99 - v9) >> 2;
    if (v57 <= 1)
      v57 = 1;
    if ((unint64_t)(v99 - v9) >= 0x7FFFFFFFFFFFFFF8)
      v58 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v58 = v57;
    if (!(v58 >> 61))
    {
      v59 = (char *)operator new(8 * v58);
      v60 = &v59[8 * v58];
      *(_QWORD *)v59 = v93;
      v56 = v59 + 8;
      __p = v59;
      v98 = v59 + 8;
      v99 = v60;
      if (v9)
        operator delete(v9);
LABEL_78:
      v98 = v56;
      v9 = v56;
      do
      {
        v62 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        v61 = v62;
        v63 = v9;
        v98 = v9;
        v64 = *(unsigned int *)(v62 + 40);
        if ((_DWORD)v64)
        {
          v65 = *(_QWORD *)(v61 + 32);
          v66 = v65 + 16 * v64;
          do
          {
            v67 = *(_QWORD *)(v66 - 16);
            v66 -= 16;
            v68 = v67 & 0xFFFFFFFFFFFFFFF8;
            v69 = *(unsigned int *)((v67 & 0xFFFFFFFFFFFFFFF8) + 192);
            if ((_DWORD)v69 == -1
              || *(_DWORD *)(*((_QWORD *)this + 40) + 4 * v69) == v7
              || (v70 = 1 << v69, v71 = v69 >> 6, v72 = *((_QWORD *)v100 + (v69 >> 6)), (v72 & (1 << v69)) != 0)
              || (*(_QWORD *)(*((_QWORD *)this + 43) + 8 * v71) & v70) == 0)
            {
              v9 = v63;
            }
            else
            {
              *((_QWORD *)v100 + v71) = v72 | v70;
              if (v63 >= v99)
              {
                v73 = (char *)__p;
                v74 = (v63 - (_BYTE *)__p) >> 3;
                v75 = v74 + 1;
                if ((unint64_t)(v74 + 1) >> 61)
                  goto LABEL_132;
                v76 = v99 - (_BYTE *)__p;
                if ((v99 - (_BYTE *)__p) >> 2 > v75)
                  v75 = v76 >> 2;
                if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
                  v77 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v77 = v75;
                if (v77)
                {
                  if (v77 >> 61)
                    goto LABEL_133;
                  v78 = (char *)operator new(8 * v77);
                }
                else
                {
                  v78 = 0;
                }
                v79 = (unint64_t *)&v78[8 * v74];
                *v79 = v68;
                v9 = (char *)(v79 + 1);
                if (v63 != v73)
                {
                  do
                  {
                    v80 = *((_QWORD *)v63 - 1);
                    v63 -= 8;
                    *--v79 = v80;
                  }
                  while (v63 != v73);
                  v63 = (char *)__p;
                }
                __p = v79;
                v98 = v9;
                v99 = &v78[8 * v77];
                v7 = v96;
                if (v63)
                  operator delete(v63);
              }
              else
              {
                *(_QWORD *)v63 = v68;
                v9 = v63 + 8;
              }
              v98 = v9;
              v81 = a5;
              v83 = a5[1];
              v82 = (unint64_t)a5[2];
              if ((unint64_t)v83 >= v82)
              {
                v85 = *a5;
                v86 = (v83 - *a5) >> 2;
                v87 = v86 + 1;
                if ((unint64_t)(v86 + 1) >> 62)
                  goto LABEL_132;
                v88 = v82 - (_QWORD)v85;
                if (v88 >> 1 > v87)
                  v87 = v88 >> 1;
                if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
                  v89 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v89 = v87;
                if (v89)
                {
                  if (v89 >> 62)
                    goto LABEL_133;
                  v90 = (char *)operator new(4 * v89);
                }
                else
                {
                  v90 = 0;
                }
                v91 = &v90[4 * v86];
                *(_DWORD *)v91 = v69;
                v84 = v91 + 4;
                while (v83 != v85)
                {
                  v92 = *((_DWORD *)v83 - 1);
                  v83 -= 4;
                  *((_DWORD *)v91 - 1) = v92;
                  v91 -= 4;
                }
                *a5 = v91;
                a5[2] = &v90[4 * v89];
                if (v85)
                  operator delete(v85);
                v81 = a5;
                v7 = v96;
              }
              else
              {
                *(_DWORD *)v83 = v69;
                v84 = v83 + 4;
              }
              v81[1] = v84;
            }
            v63 = v9;
          }
          while (v66 != v65);
        }
      }
      while (__p != v9);
      v10 = 1;
      goto LABEL_126;
    }
LABEL_133:
    sub_1C4764EE4();
  }
  v10 = 0;
LABEL_126:
  a4 = v94;
LABEL_127:
  *a4 = v10;
  if (v100 != v102)
    free(v100);
  if (v9)
  {
    v98 = v9;
    operator delete(v9);
  }
}

uint64_t llvm::ScheduleDAGTopologicalSort::WillCreateCycle(uint64_t **this, llvm::SUnit *a2, llvm::SUnit *a3)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *i;
  uint64_t v11;

  llvm::ScheduleDAGTopologicalSort::FixOrder(this);
  if (llvm::ScheduleDAGTopologicalSort::IsReachable((llvm::ScheduleDAGTopologicalSort *)this, a3, a2))
    return 1;
  v7 = *((unsigned int *)a2 + 10);
  if ((_DWORD)v7)
  {
    v8 = *((_QWORD *)a2 + 4);
    v9 = 16 * v7;
    for (i = (_DWORD *)(v8 + 8); ; i += 4)
    {
      v11 = *((_QWORD *)i - 1);
      if ((v11 & 6) == 0
        && *i
        && llvm::ScheduleDAGTopologicalSort::IsReachable((llvm::ScheduleDAGTopologicalSort *)this, a3, (const llvm::SUnit *)(v11 & 0xFFFFFFFFFFFFFFF8)))
      {
        break;
      }
      v9 -= 16;
      if (!v9)
        return 0;
    }
    return 1;
  }
  return 0;
}

BOOL llvm::ScheduleDAGTopologicalSort::IsReachable(llvm::ScheduleDAGTopologicalSort *this, const llvm::SUnit *a2, const llvm::SUnit *a3)
{
  _BOOL8 result;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  char v11;

  llvm::ScheduleDAGTopologicalSort::FixOrder((uint64_t **)this);
  result = 0;
  v7 = *((_QWORD *)this + 40);
  v8 = *(_DWORD *)(v7 + 4 * *((unsigned int *)a3 + 48));
  v9 = *(_DWORD *)(v7 + 4 * *((unsigned int *)a2 + 48));
  v11 = 0;
  if (v8 < v9)
  {
    v10 = *((unsigned int *)this + 88);
    if ((_DWORD)v10)
      bzero(*((void **)this + 43), 8 * v10);
    llvm::ScheduleDAGTopologicalSort::DFS(this, (unint64_t)a3, v9, &v11);
    return v11 != 0;
  }
  return result;
}

double llvm::ScheduleDAGTopologicalSort::ScheduleDAGTopologicalSort(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 0x1000000000;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_QWORD *)(a1 + 344) = a1 + 360;
  *(_QWORD *)&result = 0x600000000;
  *(_QWORD *)(a1 + 352) = 0x600000000;
  *(_DWORD *)(a1 + 408) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 0x1000000000;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_QWORD *)(a1 + 344) = a1 + 360;
  *(_QWORD *)&result = 0x600000000;
  *(_QWORD *)(a1 + 352) = 0x600000000;
  *(_DWORD *)(a1 + 408) = 0;
  return result;
}

void sub_1C527C610(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;
  void *v6;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 272)
  {
    v5 = *(void **)(i - 160);
    if ((void *)(i - 144) != v5)
      free(v5);
    v6 = *(void **)(i - 240);
    if ((void *)(i - 224) != v6)
      free(v6);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

char *sub_1C527C67C(char **a1, int a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v2 = *a1;
  v3 = a1[1];
  v4 = (v3 - *a1) >> 2;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 62)
    abort();
  v8 = a1[2] - v2;
  if (v8 >> 1 > v5)
    v5 = v8 >> 1;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v9 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 62)
      sub_1C4764EE4();
    v10 = (char *)operator new(4 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[4 * v4];
  *(_DWORD *)v11 = a2;
  v12 = v11 + 4;
  while (v3 != v2)
  {
    v13 = *((_DWORD *)v3 - 1);
    v3 -= 4;
    *((_DWORD *)v11 - 1) = v13;
    v11 -= 4;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[4 * v9];
  if (v2)
    operator delete(v2);
  return v12;
}

llvm::ScheduleDAGInstrs *llvm::ScheduleDAGInstrs::ScheduleDAGInstrs(llvm::ScheduleDAGInstrs *this, const llvm::TargetSubtargetInfo **a2, const llvm::MachineLoopInfo *a3, char a4)
{
  llvm::ScheduleDAG *v8;
  llvm::TargetSchedModel *v9;
  llvm::UndefValue *v10;
  llvm::Type *v11;

  v8 = llvm::ScheduleDAG::ScheduleDAG(this, (llvm::MachineFunction *)a2);
  *(_QWORD *)v8 = off_1E814A778;
  *((_QWORD *)v8 + 77) = a3;
  *((_QWORD *)v8 + 78) = a2[7];
  v9 = (llvm::ScheduleDAG *)((char *)v8 + 632);
  *((_QWORD *)v8 + 87) = 0;
  *(_OWORD *)((char *)v8 + 664) = xmmword_1C8663800;
  *(_OWORD *)((char *)v8 + 680) = unk_1C8663810;
  *(_OWORD *)((char *)v8 + 632) = llvm::MCSchedModel::Default;
  *(_OWORD *)((char *)v8 + 648) = unk_1C86637F0;
  *((_QWORD *)v8 + 96) = 0;
  *((_OWORD *)v8 + 46) = xmmword_1C8663800;
  *((_OWORD *)v8 + 47) = unk_1C8663810;
  *((_OWORD *)v8 + 44) = llvm::MCSchedModel::Default;
  *((_OWORD *)v8 + 45) = unk_1C86637F0;
  *(_OWORD *)((char *)v8 + 792) = 0u;
  *(_OWORD *)((char *)v8 + 808) = 0u;
  *(_OWORD *)((char *)v8 + 776) = 0u;
  *((_QWORD *)v8 + 103) = (char *)v8 + 840;
  *((_QWORD *)v8 + 104) = 0x1000000000;
  *((_QWORD *)v8 + 113) = 0;
  *((_BYTE *)v8 + 912) = a4;
  *(_WORD *)((char *)v8 + 913) = 0;
  *((_OWORD *)v8 + 58) = 0u;
  *((_DWORD *)v8 + 242) = 0;
  *(_OWORD *)((char *)v8 + 952) = 0u;
  *((_QWORD *)v8 + 122) = (char *)v8 + 992;
  *((_QWORD *)v8 + 123) = 0x800000000;
  *((_QWORD *)v8 + 148) = 0;
  *((_DWORD *)v8 + 298) = 0;
  *((_QWORD *)v8 + 150) = 0xFFFFFFFFLL;
  *((_QWORD *)v8 + 151) = (char *)v8 + 1224;
  *((_QWORD *)v8 + 152) = 0x800000000;
  *((_QWORD *)v8 + 177) = 0;
  *((_DWORD *)v8 + 356) = 0;
  *((_QWORD *)v8 + 179) = 0xFFFFFFFFLL;
  *((_QWORD *)v8 + 180) = (char *)v8 + 1456;
  *((_QWORD *)v8 + 181) = 0x800000000;
  *((_QWORD *)v8 + 214) = 0;
  *((_DWORD *)v8 + 430) = 0;
  *((_QWORD *)v8 + 216) = 0xFFFFFFFFLL;
  *((_QWORD *)v8 + 217) = (char *)v8 + 1752;
  *((_QWORD *)v8 + 218) = 0x800000000;
  *((_QWORD *)v8 + 259) = 0;
  *((_DWORD *)v8 + 520) = 0;
  *(_QWORD *)((char *)v8 + 2100) = 0;
  *(_QWORD *)((char *)v8 + 2092) = 0;
  *((_DWORD *)v8 + 527) = 0;
  v10 = (llvm::UndefValue *)(***(_QWORD ***)*a2 + 1576);
  *((_DWORD *)this + 522) = -1;
  *((_QWORD *)this + 264) = llvm::UndefValue::get(v10, v11);
  *((_QWORD *)this + 265) = (char *)this + 48;
  *((_QWORD *)this + 266) = (char *)this + 344;
  *((_BYTE *)this + 2136) = 0;
  *((_QWORD *)this + 268) = (char *)this + 2160;
  *((_QWORD *)this + 269) = 0x1000000000;
  *((_OWORD *)this + 151) = 0u;
  *((_OWORD *)this + 152) = 0u;
  *((_OWORD *)this + 153) = 0u;
  *((_QWORD *)this + 308) = (char *)this + 2480;
  *((_QWORD *)this + 309) = 0x600000000;
  *((_DWORD *)this + 632) = 0;
  *(_OWORD *)((char *)this + 2536) = 0u;
  *(_OWORD *)((char *)this + 2552) = 0u;
  *((_QWORD *)this + 321) = 0;
  *((_QWORD *)this + 322) = (char *)this + 2600;
  *((_QWORD *)this + 323) = 0;
  *((_QWORD *)this + 324) = 8;
  *((_QWORD *)this + 327) = 0;
  *((_DWORD *)this + 656) = 0;
  llvm::TargetSchedModel::init(v9, a2[2]);
  return this;
}

uint64_t llvm::ScheduleDAGInstrs::startBlock(uint64_t this, llvm::MachineBasicBlock *a2)
{
  *(_QWORD *)(this + 920) = a2;
  return this;
}

uint64_t llvm::ScheduleDAGInstrs::finishBlock(uint64_t this)
{
  *(_QWORD *)(this + 920) = 0;
  return this;
}

uint64_t llvm::ScheduleDAGInstrs::enterRegion(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_QWORD *)(result + 928) = a3;
  *(_QWORD *)(result + 936) = a4;
  *(_DWORD *)(result + 944) = a5;
  return result;
}

void llvm::ScheduleDAGInstrs::addSchedBarrierDeps(llvm::ScheduleDAGInstrs *this)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  unsigned __int16 *v18;
  unsigned __int16 *j;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  int v30;

  v2 = *((_QWORD *)this + 117);
  if (v2 == *((_QWORD *)this + 115) + 48)
  {
    v27 = (char *)this + 344;
    *((_QWORD *)this + 44) = 0;
LABEL_36:
    v15 = *((_QWORD *)this + 115);
    v16 = *(_QWORD *)(v15 + 88);
    for (i = *(_QWORD *)(v15 + 96); v16 != i; v16 += 8)
    {
      v18 = *(unsigned __int16 **)(*(_QWORD *)v16 + 152);
      for (j = *(unsigned __int16 **)(*(_QWORD *)v16 + 160); v18 != j; v18 += 8)
      {
        v20 = *v18;
        v21 = *(unsigned __int16 *)(*((_QWORD *)this + 177) + 2 * v20);
        v22 = *((_DWORD *)this + 304);
        if (v22 > v21)
        {
          v23 = *((_QWORD *)this + 151);
          while (1)
          {
            v24 = v21;
            if (*(_DWORD *)(v23 + 24 * v21 + 12) == (_DWORD)v20)
            {
              v25 = *(_DWORD *)(v23 + 24 * v21 + 16);
              if (v25 != -1 && *(_DWORD *)(v23 + 24 * v25 + 20) == -1)
                break;
            }
            v21 = v24 + 0x10000;
            if (v24 + 0x10000 >= v22)
              goto LABEL_39;
          }
        }
        else
        {
LABEL_39:
          v28 = v27;
          v29 = -1;
          v30 = v20;
          sub_1C527CBFC((uint64_t)this + 1208, (uint64_t)&v28);
        }
      }
    }
    return;
  }
  v3 = *((_QWORD *)this + 116);
  if (v2 != v3)
  {
    do
    {
      v4 = **(unsigned __int16 **)(v2 + 16);
      if ((v4 - 13) >= 5 && v4 != 23)
      {
        v27 = (char *)this + 344;
        *((_QWORD *)this + 44) = v2;
        goto LABEL_16;
      }
      v2 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8;
      if (!v2 || (*(_BYTE *)v2 & 4) == 0)
      {
        while ((*(_WORD *)(v2 + 44) & 4) != 0)
          v2 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    while (v2 != v3);
    v2 = *((_QWORD *)this + 116);
  }
  v27 = (char *)this + 344;
  *((_QWORD *)this + 44) = v2;
  if (!v2)
    goto LABEL_36;
LABEL_16:
  v6 = *(unsigned int *)(v2 + 40);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(v2 + 32);
    v8 = 32 * v6;
    v9 = (int *)(v7 + 4);
    do
    {
      v10 = *(v9 - 1);
      if ((v10 & 0x10000FF) == 0)
      {
        v11 = *v9;
        if ((*v9 - 1) > 0x3FFFFFFE)
        {
          v12 = (v10 & 0x10FFF00) != 0x1000000 && (v10 & 0x30000000) == 0;
          if (v12 && v11 < 0)
            llvm::ScheduleDAGInstrs::addVRegUseDeps((uint64_t)this, (unint64_t)v27, (unint64_t)(v7 - *(_QWORD *)(v2 + 32)) >> 5);
        }
        else
        {
          v28 = v27;
          v29 = -1;
          v30 = v11;
          sub_1C527CBFC((uint64_t)this + 1208, (uint64_t)&v28);
        }
      }
      v7 += 32;
      v9 += 8;
      v8 -= 32;
    }
    while (v8);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8);
  if ((*(_WORD *)(v2 + 44) & 0xC) == 0 || (*(_WORD *)(v2 + 44) & 4) != 0)
  {
    if ((v13 & 0x180) != 0)
      return;
    goto LABEL_36;
  }
  if ((v13 & 0x80) == 0)
  {
    v26 = v2;
    while ((*(_WORD *)(v26 + 44) & 8) != 0)
    {
      v26 = *(_QWORD *)(v26 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v26 + 16) + 8) & 0x80) != 0)
        return;
    }
    if ((v13 & 0x100) == 0)
    {
      while ((*(_WORD *)(v2 + 44) & 8) != 0)
      {
        v2 = *(_QWORD *)(v2 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v2 + 16) + 9) & 1) != 0)
          return;
      }
      goto LABEL_36;
    }
  }
}

void sub_1C527CBFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v3 = *(unsigned int *)(a2 + 12);
  v4 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 208) + 2 * v3);
  v5 = *(_DWORD *)(a1 + 8);
  if (v5 > v4)
  {
    v7 = *(_QWORD *)a1;
    while (1)
    {
      v8 = v4;
      if (*(_DWORD *)(v7 + 24 * v4 + 12) == (_DWORD)v3)
      {
        v9 = *(_DWORD *)(v7 + 24 * v4 + 16);
        if (v9 != -1 && *(_DWORD *)(v7 + 24 * v9 + 20) == -1)
          break;
      }
      v4 = v8 + 0x10000;
      if (v8 + 0x10000 >= v5)
        goto LABEL_2;
    }
    sub_1C5282E98(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    v10 = *(_QWORD *)a1;
    v11 = *(_QWORD *)a1 + 24 * v8;
    v12 = *(_DWORD *)(v11 + 16);
    *(_DWORD *)(*(_QWORD *)a1 + 24 * v12 + 20) = v13;
    *(_DWORD *)(v11 + 16) = v13;
    *(_DWORD *)(v10 + 24 * v13 + 16) = v12;
  }
  else
  {
LABEL_2:
    sub_1C5282E98(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    *(_WORD *)(*(_QWORD *)(a1 + 208) + 2 * v3) = v6;
    *(_DWORD *)(*(_QWORD *)a1 + 24 * v6 + 16) = v6;
  }
}

uint64_t llvm::ScheduleDAGInstrs::addVRegUseDeps(uint64_t this, unint64_t a2, unsigned int a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  BOOL v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;

  v4 = this;
  v5 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 32) + 32 * a3);
  v6 = v5[1];
  if (!*(_BYTE *)(this + 914))
  {
    v7 = v6 & 0x7FFFFFFF;
    goto LABEL_39;
  }
  v7 = v6 & 0x7FFFFFFF;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 40) + 24) + 16 * v7) & 0xFFFFFFFFFFFFFFF8;
  if (!*(_BYTE *)(v8 + 34))
  {
LABEL_39:
    v10 = -1;
    goto LABEL_5;
  }
  v9 = ((unint64_t)*v5 >> 8) & 0xFFF;
  if ((_DWORD)v9)
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 232) + 8 * v9);
  else
    v10 = *(_QWORD *)(v8 + 24);
LABEL_5:
  v11 = (uint64_t *)(this + 1736);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(this + 2072) + v7);
  v13 = *(unsigned int *)(this + 1744);
  if (v13 <= v12)
  {
    v16 = -1;
  }
  else
  {
    v14 = *v11;
    while (1)
    {
      if ((*(_DWORD *)(v14 + 40 * v12) & 0x7FFFFFFF) == (_DWORD)v7)
      {
        v15 = *(_DWORD *)(v14 + 40 * v12 + 32);
        if (v15 != -1 && *(_DWORD *)(v14 + 40 * v15 + 36) == -1)
          break;
      }
      v12 += 256;
      v16 = -1;
      if (v12 >= v13)
        goto LABEL_13;
    }
    v16 = v12;
  }
LABEL_13:
  v17 = v16;
  if (*(_DWORD *)(this + 2092))
  {
    v18 = *(_DWORD *)(this + 2088);
    v19 = *(_QWORD *)(this + 1736) + 40 * v18;
    v20 = *(_DWORD *)(v19 + 36);
    *(_DWORD *)v19 = v6;
    *(_QWORD *)(v19 + 8) = v10;
    *(_QWORD *)(v19 + 16) = a2;
    *(_DWORD *)(v19 + 24) = a3;
    *(_QWORD *)(v19 + 32) = -1;
    *(_DWORD *)(this + 2088) = v20;
    --*(_DWORD *)(this + 2092);
  }
  else
  {
    LODWORD(v38) = v6;
    v39 = v10;
    v40 = a2;
    v41 = a3;
    v42 = -1;
    v30 = *(_QWORD *)(this + 1736);
    v31 = &v38;
    if (v13 >= *(_DWORD *)(this + 1748))
    {
      v35 = v13 + 1;
      v36 = v30 + 40 * v13 > (unint64_t)&v38;
      if (v30 <= (unint64_t)&v38 && v36)
      {
        v37 = (char *)&v38 - v30;
        this = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(this + 1736, this + 1752, v35, 40);
        v30 = *(_QWORD *)(v4 + 1736);
        v31 = (unint64_t *)&v37[v30];
      }
      else
      {
        this = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(this + 1736, this + 1752, v35, 40);
        v30 = *(_QWORD *)(v4 + 1736);
        v31 = &v38;
      }
    }
    v32 = v30 + 40 * *(unsigned int *)(v4 + 1744);
    v33 = *(_OWORD *)v31;
    v34 = *((_OWORD *)v31 + 1);
    *(_QWORD *)(v32 + 32) = v31[4];
    *(_OWORD *)v32 = v33;
    *(_OWORD *)(v32 + 16) = v34;
    v18 = *(_DWORD *)(v4 + 1744);
    *(_DWORD *)(v4 + 1744) = v18 + 1;
  }
  if (v17 == -1)
  {
    *(_BYTE *)(*(_QWORD *)(v4 + 2072) + v7) = v18;
    *(_DWORD *)(*(_QWORD *)(v4 + 1736) + 40 * v18 + 32) = v18;
  }
  else
  {
    v27 = *v11;
    v28 = *v11 + 40 * v17;
    v29 = *(_DWORD *)(v28 + 32);
    *(_DWORD *)(*v11 + 40 * v29 + 36) = v18;
    *(_DWORD *)(v28 + 32) = v18;
    *(_DWORD *)(v27 + 40 * v18 + 32) = v29;
  }
  v21 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 1712) + v7);
  v22 = *(_DWORD *)(v4 + 1448);
  if (v22 > v21)
  {
    v23 = *(_QWORD *)(v4 + 1440);
    while (1)
    {
      if ((*(_DWORD *)(v23 + 32 * v21) & 0x7FFFFFFF) == (_DWORD)v7)
      {
        v24 = *(unsigned int *)(v23 + 32 * v21 + 24);
        if ((_DWORD)v24 != -1 && *(_DWORD *)(v23 + 32 * v24 + 28) == -1)
          break;
      }
      v21 += 256;
      if (v21 >= v22)
        return this;
    }
    do
    {
      v25 = v21;
      v26 = v23 + 32 * v21;
      if ((*(_QWORD *)(v26 + 8) & v10) != 0)
      {
        this = *(_QWORD *)(v26 + 16);
        if (this != a2)
        {
          v38 = a2 & 0xFFFFFFFFFFFFFFF9 | 2;
          v39 = v6;
          this = llvm::SUnit::addPred(this, (const llvm::SDep *)&v38, 1);
          v23 = *(_QWORD *)(v4 + 1440);
        }
      }
      v21 = *(_DWORD *)(v23 + 32 * v25 + 28);
    }
    while (v21 != -1);
  }
  return this;
}

_QWORD *llvm::ScheduleDAGInstrs::addPhysRegDataDeps(_QWORD *this, unint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  _WORD *v13;
  int v14;
  int v15;
  unsigned __int16 v16;
  BOOL v17;
  unsigned int v18;
  unsigned __int16 *v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  __int16 v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int16 *v28;
  unsigned int v29;
  uint64_t v30;
  llvm::SUnit *v31;
  uint64_t v32;
  const llvm::MachineInstr *v33;
  int v34;
  uint64_t v35;
  _WORD *v36;
  int v37;
  unsigned __int16 *v38;
  int v39;
  unsigned __int16 *v40;
  unsigned __int16 v41;
  unsigned __int16 *v42;
  int v43;
  int v44;
  unint64_t v45;
  llvm::TargetSchedModel *v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned int v49;
  const llvm::MachineInstr **v51;
  unint64_t v52;
  uint64_t v53;

  v3 = (uint64_t)this;
  v4 = *(_QWORD *)(a2 + 8);
  v48 = *(_QWORD *)(this[4] + 16);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_DWORD *)(*(_QWORD *)(v4 + 32) + 32 * a3 + 4);
  if (*(unsigned __int16 *)(v5 + 2) <= a3)
  {
    v36 = *(_WORD **)(v5 + 32);
    if (v36 && (v37 = (unsigned __int16)*v36, *v36))
    {
      v38 = v36 + 1;
      do
      {
        v7 = v6 != v37;
        if (v6 == v37)
          break;
        v39 = *v38++;
        v37 = v39;
      }
      while (v39);
    }
    else
    {
      v7 = 1;
    }
  }
  else
  {
    v7 = 0;
  }
  v8 = this[3];
  if (v8)
    v9 = (_QWORD *)(v8 + 8);
  else
    v9 = 0;
  v11 = v9[5];
  v10 = v9[6];
  v12 = (unsigned __int16 *)(v10 + (((unint64_t)*(unsigned int *)(*v9 + 24 * v6 + 16) >> 3) & 0x1FFFFFFE));
  v14 = *v12;
  v13 = v12 + 1;
  v15 = v14 + (*(_DWORD *)(*v9 + 24 * v6 + 16) & 0xF) * v6;
  do
  {
    v16 = *(_WORD *)(v11 + 4 * (unsigned __int16)v15);
    if (v16)
      v17 = v10 == 0;
    else
      v17 = 1;
    if (!v17)
    {
      v18 = *(unsigned __int16 *)(v11 + 4 * (unsigned __int16)v15 + 2) << 16;
      v19 = (unsigned __int16 *)(v10
                               + 2
                               * *(unsigned int *)(*v9
                                                 + 24 * *(unsigned __int16 *)(v11 + 4 * (unsigned __int16)v15)
                                                 + 8));
      v45 = a2 | 6;
      v46 = (llvm::TargetSchedModel *)(this + 79);
      v20 = v15;
      v51 = (const llvm::MachineInstr **)a2;
      v47 = v9;
      while (1)
      {
        v21 = v16;
        v22 = *(unsigned __int16 *)(*(_QWORD *)(v3 + 1416) + 2 * v16);
        v23 = *(_DWORD *)(v3 + 1216);
        if (v23 > v22)
          break;
LABEL_13:
        v25 = *v19++;
        v24 = v25;
        if (v25)
        {
          v16 = v24 + v21;
        }
        else
        {
          v27 = HIWORD(v18);
          if (HIWORD(v18))
          {
            v18 >>= 16;
          }
          else
          {
            if (!*v13)
              return this;
            v20 += (unsigned __int16)*v13++;
            v28 = (unsigned __int16 *)(v9[5] + 4 * (unsigned __int16)v20);
            v27 = *v28;
            v18 = v28[1] << 16;
          }
          v16 = v27;
          v19 = (unsigned __int16 *)(v9[6] + 2 * *(unsigned int *)(*v9 + 24 * v27 + 8));
        }
        if (!v13)
          return this;
      }
      v26 = *(_QWORD *)(v3 + 1208);
      while (1)
      {
        if (*(_DWORD *)(v26 + 24 * v22 + 12) == v21)
        {
          v29 = *(_DWORD *)(v26 + 24 * v22 + 16);
          if (v29 != -1 && *(_DWORD *)(v26 + 24 * v29 + 20) == -1)
            break;
        }
        v22 += 0x10000;
        if (v22 >= v23)
          goto LABEL_13;
      }
      v49 = v18;
      while (1)
      {
        v30 = v26 + 24 * v22;
        v31 = *(llvm::SUnit **)v30;
        if (*(_QWORD *)v30 != a2)
          break;
LABEL_34:
        v22 = *(_DWORD *)(v26 + 24 * v22 + 20);
        if (v22 == -1)
          goto LABEL_13;
      }
      v32 = *(unsigned int *)(v30 + 8);
      if ((v32 & 0x80000000) != 0)
      {
        v33 = 0;
        v52 = v45;
        v53 = 3;
      }
      else
      {
        *(_WORD *)(a2 + 228) |= 0x40u;
        v52 = a2 & 0xFFFFFFFFFFFFFFF9;
        v53 = v21 | 0x100000000;
        v33 = (const llvm::MachineInstr *)*((_QWORD *)v31 + 1);
        if (v33)
        {
          v35 = *((_QWORD *)v33 + 2);
          if (v35)
          {
            if (v32 >= *(unsigned __int16 *)(v35 + 2))
            {
              v40 = *(unsigned __int16 **)(v35 + 24);
              if (!v40)
                goto LABEL_40;
              v41 = *v40;
              if (!*v40)
                goto LABEL_40;
              v42 = v40 + 1;
              while (v21 != v41)
              {
                v34 = 0;
                v43 = *v42++;
                v41 = v43;
                if (!v43)
                  goto LABEL_33;
              }
            }
          }
        }
      }
      if (!v7)
      {
        v34 = llvm::TargetSchedModel::computeOperandLatency(v46, v51[1], a3, v33, v32);
LABEL_33:
        HIDWORD(v53) = v34;
        (*(void (**)(uint64_t, const llvm::MachineInstr **, _QWORD, llvm::SUnit *, uint64_t, unint64_t *))(*(_QWORD *)v48 + 304))(v48, v51, a3, v31, v32, &v52);
        this = (_QWORD *)llvm::SUnit::addPred((int64_t)v31, (const llvm::SDep *)&v52, 1);
        a2 = (unint64_t)v51;
        v26 = *(_QWORD *)(v3 + 1208);
        v9 = v47;
        v18 = v49;
        goto LABEL_34;
      }
LABEL_40:
      v34 = 0;
      goto LABEL_33;
    }
    v44 = (unsigned __int16)*v13++;
    v15 += v44;
  }
  while (v44);
  return this;
}

void llvm::ScheduleDAGInstrs::addPhysRegDeps(llvm::ScheduleDAGInstrs *this, unint64_t a2, unsigned int a3)
{
  llvm::MachineInstr *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  _WORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned __int16 *v21;
  unsigned int v22;
  char *v23;
  unint64_t v24;
  llvm::TargetSchedModel *v25;
  unint64_t v26;
  unsigned __int16 v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  __int16 v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v43;
  int RegisterDefOperandIdx;
  int v45;
  unsigned int v46;
  unsigned __int16 *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned __int16 *v51;
  unsigned __int16 v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  llvm::TargetSchedModel *v79;
  unint64_t v80;
  char *v81;
  int v82;
  uint64_t v83;
  llvm::SUnit *v84;
  unsigned int v85;
  llvm::MachineInstr *v86;
  unsigned int v87;
  unint64_t v88;
  unsigned int v89;
  int v90;

  v6 = *(llvm::MachineInstr **)(a2 + 8);
  v7 = (int *)(*((_QWORD *)v6 + 4) + 32 * a3);
  v8 = v7[1];
  if (llvm::MachineRegisterInfo::isConstantPhysReg(*((_QWORD **)this + 5), v7[1]))
    return;
  v86 = v6;
  v87 = a3;
  v9 = *((_QWORD *)this + 3);
  v10 = *(_QWORD *)(*((_QWORD *)this + 4) + 16);
  if (v9)
    v11 = (_QWORD *)(v9 + 8);
  else
    v11 = 0;
  v13 = v11[5];
  v12 = v11[6];
  v14 = (unsigned __int16 *)(v12
                           + (((unint64_t)*(unsigned int *)(*v11 + 24 * v8 + 16) >> 3) & 0x1FFFFFFE));
  v16 = *v14;
  v15 = v14 + 1;
  v17 = v16 + (*(_DWORD *)(*v11 + 24 * v8 + 16) & 0xF) * v8;
  v18 = *v7;
  while (1)
  {
    v19 = !*(_WORD *)(v13 + 4 * (unsigned __int16)v17) || v12 == 0;
    if (!v19)
      break;
    v20 = (unsigned __int16)*v15++;
    v17 = (v20 + v17);
    if (!v20)
      goto LABEL_50;
  }
  v21 = (unsigned __int16 *)(v12
                           + 2
                           * *(unsigned int *)(*v11 + 24 * *(unsigned __int16 *)(v13 + 4 * (unsigned __int16)v17) + 8));
  v22 = *(unsigned __int16 *)(v13 + 4 * (unsigned __int16)v17 + 2) << 16;
  v23 = (char *)this + 344;
  v24 = a2 & 0xFFFFFFFFFFFFFFF9 | 4;
  v25 = (llvm::ScheduleDAGInstrs *)((char *)this + 632);
  v26 = a2 & 0xFFFFFFFFFFFFFFF9 | 2;
  v27 = *(_WORD *)(v13 + 4 * (unsigned __int16)v17);
  v28 = v17;
  while (1)
  {
    v29 = v27;
    v30 = v27;
    v31 = *(unsigned __int16 *)(*((_QWORD *)this + 148) + 2 * v27);
    v32 = *((_DWORD *)this + 246);
    if (v32 > v31)
    {
      v35 = *((_QWORD *)this + 122);
      v36 = v31;
      while (1)
      {
        v37 = v36;
        if (*(_DWORD *)(v35 + 24 * v36 + 12) == v29)
        {
          v38 = *(_DWORD *)(v35 + 24 * v36 + 16);
          if (v38 != -1 && *(_DWORD *)(v35 + 24 * v38 + 20) == -1)
            break;
        }
        v36 = v37 + 0x10000;
        if (v37 + 0x10000 >= v32)
          goto LABEL_14;
      }
      while (1)
      {
        if (*(_DWORD *)(v35 + 24 * v31 + 12) == v29)
        {
          v39 = *(_DWORD *)(v35 + 24 * v31 + 16);
          if (v39 != -1 && *(_DWORD *)(v35 + 24 * v39 + 20) == -1)
            break;
        }
        v31 += 0x10000;
        if (v31 >= v32)
          goto LABEL_14;
      }
      if (v31 != -1)
      {
        v77 = v28;
        v78 = v26;
        v76 = v22;
        v83 = v10;
        v82 = v18;
        v80 = v24;
        v81 = v23;
        v79 = v25;
        do
        {
          v40 = v31;
          v41 = *(_QWORD *)(v35 + 24 * v31);
          if ((char *)v41 == v23 || v41 == a2)
            goto LABEL_42;
          v84 = (llvm::SUnit *)v41;
          v85 = v40;
          if ((v18 & 0x1000000) != 0)
          {
            if ((~*v7 & 0x5000000) == 0)
            {
              RegisterDefOperandIdx = llvm::MachineInstr::findRegisterDefOperandIdx(*(_QWORD *)(v41 + 8), v30, 1, 0, 0);
              v41 = (unint64_t)v84;
              v40 = v85;
              v22 = v76;
              v28 = v77;
              v26 = v78;
              v24 = v80;
              v23 = v81;
              v18 = v82;
              v19 = RegisterDefOperandIdx == -1;
              v25 = v79;
              v10 = v83;
              if (!v19)
                goto LABEL_42;
            }
            v88 = v24;
            v89 = v29;
            v90 = 0;
            v45 = llvm::TargetSchedModel::computeOutputLatency(v25, v86, a3, *(const llvm::MachineInstr **)(v41 + 8));
            v43 = a3;
            v41 = (unint64_t)v84;
            v40 = v85;
            v90 = v45;
            v10 = v83;
            v35 = *((_QWORD *)this + 122);
          }
          else
          {
            v88 = v26;
            v89 = v29;
            v90 = 0;
            v43 = a3;
          }
          (*(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, _QWORD, unint64_t *))(*(_QWORD *)v10 + 304))(v83, a2, v43, v41, *(unsigned int *)(v35 + 24 * v40 + 8), &v88);
          llvm::SUnit::addPred((int64_t)v84, (const llvm::SDep *)&v88, 1);
          v40 = v85;
          v10 = v83;
          v18 = v82;
          v24 = v80;
          v23 = v81;
          v26 = v78;
          v25 = v79;
          v28 = v77;
          v22 = v76;
LABEL_42:
          v35 = *((_QWORD *)this + 122);
          v31 = *(_DWORD *)(v35 + 24 * v40 + 20);
        }
        while (v31 != -1);
      }
    }
LABEL_14:
    v34 = *v21++;
    v33 = v34;
    if (!v34)
      break;
    v27 = v33 + v29;
LABEL_16:
    if (!v15)
      goto LABEL_49;
  }
  v46 = HIWORD(v22);
  if (HIWORD(v22))
  {
    v22 >>= 16;
    goto LABEL_47;
  }
  if (*v15)
  {
    v28 = (unsigned __int16)*v15++ + v28;
    v47 = (unsigned __int16 *)(v11[5] + 4 * (unsigned __int16)v28);
    v46 = *v47;
    v22 = v47[1] << 16;
LABEL_47:
    v27 = v46;
    v21 = (unsigned __int16 *)(v11[6] + 2 * *(unsigned int *)(*v11 + 24 * v46 + 8));
    goto LABEL_16;
  }
LABEL_49:
  v18 = *v7;
LABEL_50:
  if ((v18 & 0x1000000) != 0)
  {
    llvm::ScheduleDAGInstrs::addPhysRegDataDeps(this, a2, a3);
    v48 = *((_QWORD *)this + 3);
    v49 = (_QWORD *)(v48 + 8);
    if (!v48)
      v49 = 0;
    v50 = v49[6];
    if (v50)
    {
      v51 = (unsigned __int16 *)(v50 + 2 * *(unsigned int *)(*v49 + 24 * v8 + 4));
      v52 = v8;
      do
      {
        v53 = v52;
        v54 = *(unsigned __int16 *)(*((_QWORD *)this + 177) + 2 * v52);
        v55 = *((_DWORD *)this + 304);
        if (v55 > v54)
        {
          v57 = *((_QWORD *)this + 151);
          while (1)
          {
            v58 = v54;
            if (*(_DWORD *)(v57 + 24 * v54 + 12) == v53)
            {
              v59 = *(_DWORD *)(v57 + 24 * v54 + 16);
              if (v59 != -1 && *(_DWORD *)(v57 + 24 * v59 + 20) == -1)
                break;
            }
            v54 = v58 + 0x10000;
            if (v58 + 0x10000 >= v55)
              goto LABEL_58;
          }
          sub_1C527D94C((uint64_t *)this + 151, v53);
        }
LABEL_58:
        if ((~*v7 & 0x5000000) != 0)
          sub_1C527D94C((uint64_t *)this + 122, v53);
        v56 = *v51++;
        v52 = v56 + v53;
      }
      while (v56);
    }
    if ((~*v7 & 0x5000000) == 0 && (*(_WORD *)(a2 + 228) & 2) != 0)
    {
      v60 = *(unsigned __int16 *)(*((_QWORD *)this + 148) + 2 * v8);
      v61 = *((_DWORD *)this + 246);
      if (v61 > v60)
      {
        v62 = *((_QWORD *)this + 122);
        while (1)
        {
          v63 = v60;
          if (*(_DWORD *)(v62 + 24 * v60 + 12) == (_DWORD)v8)
          {
            v64 = *(_DWORD *)(v62 + 24 * v60 + 16);
            if (v64 != -1 && *(_DWORD *)(v62 + 24 * v64 + 20) == -1)
              break;
          }
          v60 = v63 + 0x10000;
          if (v63 + 0x10000 >= v61)
            goto LABEL_72;
        }
        v65 = (v8 << 32) | 0xFFFFFFFFLL;
        v66 = (uint64_t *)((char *)this + 976);
        while (1)
        {
          if (v65 == 0xFFFFFFFFLL)
          {
            v67 = *(unsigned __int16 *)(v66[26] + 2 * HIDWORD(v65));
            v68 = *((_DWORD *)v66 + 2);
            v69 = *v66;
            if (v68 > v67)
            {
              while (1)
              {
                if (*(_DWORD *)(v69 + 24 * v67 + 12) == HIDWORD(v65))
                {
                  v72 = *(_DWORD *)(v69 + 24 * v67 + 16);
                  if (v72 != -1 && *(_DWORD *)(v69 + 24 * v72 + 20) == -1)
                    break;
                }
                v67 += 0x10000;
                v70 = -1;
                if (v67 >= v68)
                  goto LABEL_90;
              }
              v70 = v67;
            }
            else
            {
              v70 = -1;
            }
LABEL_90:
            v71 = v69 + 24 * v70;
          }
          else
          {
            v69 = *v66;
            v71 = *v66 + 24 * v65;
          }
          v73 = *(unsigned int *)(v71 + 16);
          if ((*(_WORD *)(*(_QWORD *)(v69 + 24 * v73) + 228) & 2) == 0)
            break;
          v74 = sub_1C5282F9C((uint64_t *)this + 122, (unsigned int *)(v62 + 24 * v73));
          v62 = *((_QWORD *)this + 122);
          v75 = v62 + 24 * v73;
          *(_DWORD *)(v75 + 16) = -1;
          *(_DWORD *)(v75 + 20) = *((_DWORD *)this + 300);
          *((_DWORD *)this + 300) = v73;
          ++*((_DWORD *)this + 301);
          v19 = v66 == (uint64_t *)((char *)this + 976);
          v66 = v74;
          if (v19)
          {
            v66 = v74;
            if ((_DWORD)v73 == v63)
              break;
          }
        }
      }
    }
LABEL_72:
    v88 = a2;
    v89 = v87;
    v90 = v8;
    sub_1C527CBFC((uint64_t)this + 976, (uint64_t)&v88);
  }
  else
  {
    *(_WORD *)(a2 + 228) |= 0x20u;
    v88 = a2;
    v89 = a3;
    v90 = v8;
    sub_1C527CBFC((uint64_t)this + 1208, (uint64_t)&v88);
    if (*((_BYTE *)this + 912))
      *v7 &= ~0x4000000u;
  }
}

uint64_t *sub_1C527D94C(uint64_t *result, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v14;

  v2 = *(unsigned __int16 *)(result[26] + 2 * a2);
  v3 = *((_DWORD *)result + 2);
  if (v3 > v2)
  {
    v4 = result;
    v5 = *result;
    while (1)
    {
      v6 = v2;
      if (*(_DWORD *)(v5 + 24 * v2 + 12) == a2)
      {
        v7 = *(_DWORD *)(v5 + 24 * v2 + 16);
        if (v7 != -1 && *(_DWORD *)(v5 + 24 * v7 + 20) == -1)
          break;
      }
      v2 = v6 + 0x10000;
      if ((int)v6 + 0x10000 >= v3)
        return result;
    }
    v8 = v6;
    do
    {
      v9 = 3 * v6;
      result = sub_1C5282F9C(v4, (unsigned int *)(v5 + 24 * v6));
      v5 = *v4;
      v11 = *v4 + 8 * v9;
      v12 = *((_DWORD *)v4 + 56);
      v13 = *((_DWORD *)v4 + 57);
      *(_DWORD *)(v11 + 16) = -1;
      *(_DWORD *)(v11 + 20) = v12;
      *((_DWORD *)v4 + 56) = v8;
      *((_DWORD *)v4 + 57) = v13 + 1;
      v6 = v10;
      v14 = result == v4 && v10 == 0xFFFFFFFFLL;
      v8 = v10;
    }
    while (!v14);
  }
  return result;
}

uint64_t llvm::ScheduleDAGInstrs::getLaneMaskForMO(llvm::ScheduleDAGInstrs *this, const llvm::MachineOperand *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 16 * (*((_DWORD *)a2 + 1) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
  if (!*(_BYTE *)(v2 + 34))
    return -1;
  v3 = ((unint64_t)*(unsigned int *)a2 >> 8) & 0xFFF;
  if ((_DWORD)v3)
    v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 232) + 8 * v3;
  else
    v4 = v2 + 24;
  return *(_QWORD *)v4;
}

BOOL llvm::ScheduleDAGInstrs::deadDefHasNoUse(llvm::ScheduleDAGInstrs *this, const llvm::MachineOperand *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v2 = *((_DWORD *)a2 + 1) & 0x7FFFFFFF;
  v3 = *(unsigned __int8 *)(*((_QWORD *)this + 259) + v2);
  v4 = *((_DWORD *)this + 436);
  if (v4 <= v3)
    return 1;
  v5 = *((_QWORD *)this + 217);
  while (1)
  {
    v6 = v3;
    if ((*(_DWORD *)(v5 + 40 * v3) & 0x7FFFFFFF) == (_DWORD)v2)
    {
      v7 = *(_DWORD *)(v5 + 40 * v3 + 32);
      if (v7 != -1 && *(_DWORD *)(v5 + 40 * v7 + 36) == -1)
        break;
    }
    v3 = v6 + 256;
    v8 = 1;
    if (v3 >= v4)
      return v8;
  }
  v9 = (_QWORD *)(v5 + 40 * v6 + 8);
  v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 16 * v2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_BYTE *)(v10 + 34))
  {
    v11 = ((unint64_t)*(unsigned int *)a2 >> 8) & 0xFFF;
    if ((_DWORD)v11)
      v12 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 3) + 232) + 8 * v11);
    else
      v12 = (uint64_t *)(v10 + 24);
    v13 = *v12;
  }
  else
  {
    v13 = -1;
  }
  return (*v9 & v13) == 0;
}

uint64_t llvm::ScheduleDAGInstrs::addVRegDefDeps(llvm::ScheduleDAGInstrs *this, unint64_t a2, unsigned int a3)
{
  uint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const llvm::MachineInstr **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  const llvm::MachineInstr *v47;
  uint64_t v48;
  unsigned int v49;
  _DWORD *v50;
  _DWORD *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  llvm::MachineInstr *v67;
  __int128 v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  int v73;

  v67 = *(llvm::MachineInstr **)(a2 + 8);
  v5 = *((_QWORD *)v67 + 4);
  v6 = (unsigned int *)(v5 + 32 * a3);
  v7 = *v6;
  v8 = v6[1];
  if (*((_BYTE *)this + 914))
  {
    if ((v7 & 0xFFF00) != 0)
      v9 = (v7 >> 28) & 1;
    else
      v9 = 1;
    v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 16 * (v8 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
    v11 = *(unsigned __int8 *)(v10 + 34);
    if (*(_BYTE *)(v10 + 34))
    {
      v12 = (v7 >> 8) & 0xFFF;
      if ((_DWORD)v12)
        v13 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 3) + 232) + 8 * v12);
      else
        v13 = (uint64_t *)(v10 + 24);
      v15 = *v13;
    }
    else
    {
      v15 = -1;
    }
    if (v9)
      result = -1;
    else
      result = v15;
    if ((v7 & 0xFFF00) != 0 && (v7 & 0x10000000) != 0)
    {
      v17 = *((unsigned int *)v67 + 10);
      v18 = a3 + 1;
      if ((_DWORD)v18 != (_DWORD)v17)
      {
        v19 = (uint64_t *)(v10 + 24);
        v20 = 32 * v17 - 32 * v18;
        v21 = (_DWORD *)(v5 + 32 * v18 + 4);
        do
        {
          v22 = *(v21 - 1);
          if ((v22 & 0x10000FF) == 0x1000000 && *v21 == (_DWORD)v8)
          {
            if (v11)
            {
              v23 = (v22 >> 8) & 0xFFF;
              v24 = v19;
              if ((_DWORD)v23)
                v24 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 3) + 232) + 8 * v23);
              v25 = *v24;
            }
            else
            {
              v25 = -1;
            }
            result &= ~v25;
          }
          v21 += 8;
          v20 -= 32;
        }
        while (v20);
      }
    }
    LODWORD(v7) = v7 & 0xEFFFFFFF;
    *v6 = v7;
  }
  else
  {
    result = -1;
    v15 = -1;
  }
  if ((~(_DWORD)v7 & 0x5000000) != 0)
  {
    v26 = *(unsigned __int8 *)(*((_QWORD *)this + 259) + (v8 & 0x7FFFFFFF));
    v27 = *((_DWORD *)this + 436);
    if (v27 > v26)
    {
      v65 = *(_QWORD *)(*((_QWORD *)this + 4) + 16);
      v28 = *((_QWORD *)this + 217);
      while (1)
      {
        if ((*(_DWORD *)(v28 + 40 * v26) & 0x7FFFFFFF) == (v8 & 0x7FFFFFFF))
        {
          v29 = *(_DWORD *)(v28 + 40 * v26 + 32);
          if (v29 != -1 && *(_DWORD *)(v28 + 40 * v29 + 36) == -1)
            break;
        }
        v26 += 256;
        if (v26 >= v27)
          goto LABEL_38;
      }
      v64 = a2 & 0xFFFFFFFFFFFFFFF9;
      v66 = ~result;
      v63 = result;
      do
      {
        v44 = v28 + 40 * v26;
        v45 = *(_QWORD *)(v44 + 8);
        if ((v45 & result) != 0)
        {
          if ((v45 & v15) != 0)
          {
            v46 = *(_QWORD *)(v44 + 16);
            v47 = *(const llvm::MachineInstr **)(v46 + 8);
            *(_QWORD *)&v69 = v64;
            *((_QWORD *)&v69 + 1) = v8 | 0x100000000;
            HIDWORD(v69) = llvm::TargetSchedModel::computeOperandLatency((llvm::ScheduleDAGInstrs *)((char *)this + 632), v67, a3, v47, *(unsigned int *)(v28 + 40 * v26 + 24));
            (*(void (**)(uint64_t, unint64_t, _QWORD, int64_t, _QWORD, __int128 *))(*(_QWORD *)v65 + 304))(v65, a2, a3, v46, *(unsigned int *)(*((_QWORD *)this + 217) + 40 * v26 + 24), &v69);
            llvm::SUnit::addPred(v46, (const llvm::SDep *)&v69, 1);
            result = v63;
            v28 = *((_QWORD *)this + 217);
          }
          if ((v45 & v66) != 0)
          {
            v48 = v28 + 40 * v26;
            *(_QWORD *)(v48 + 8) = v45 & v66;
            v49 = *(_DWORD *)(v48 + 36);
          }
          else
          {
            v50 = (_DWORD *)(v28 + 40 * v26);
            v51 = v50 + 8;
            v52 = v50[8];
            if (v26 == v52)
            {
              v49 = -1;
            }
            else
            {
              v53 = v28 + 40 * v26;
              v56 = *(_DWORD *)(v53 + 36);
              v54 = (unsigned int *)(v53 + 36);
              v55 = v56;
              if (*(_DWORD *)(v28 + 40 * v52 + 36) == -1)
              {
                *(_BYTE *)(*((_QWORD *)this + 259) + (*v50 & 0x7FFFFFFF)) = v55;
                v49 = *v54;
                v28 = *((_QWORD *)this + 217);
                *(_DWORD *)(v28 + 40 * v49 + 32) = *v51;
              }
              else if (v55 == -1)
              {
                v58 = *v50 & 0x7FFFFFFF;
                v59 = *(unsigned __int8 *)(*((_QWORD *)this + 259) + v58);
                v60 = *((_DWORD *)this + 436);
                v49 = -1;
                if (v60 <= v59)
                {
                  v62 = -1;
                }
                else
                {
                  while (1)
                  {
                    if ((*(_DWORD *)(v28 + 40 * v59) & 0x7FFFFFFF) == (_DWORD)v58)
                    {
                      v61 = *(_DWORD *)(v28 + 40 * v59 + 32);
                      if (v61 != -1 && *(_DWORD *)(v28 + 40 * v61 + 36) == -1)
                        break;
                    }
                    v59 += 256;
                    v62 = -1;
                    if (v59 >= v60)
                      goto LABEL_87;
                  }
                  v62 = v59;
                }
LABEL_87:
                *(_DWORD *)(v28 + 40 * v62 + 32) = v52;
                *(_DWORD *)(v28 + 40 * *v51 + 36) = -1;
              }
              else
              {
                *(_DWORD *)(v28 + 40 * v55 + 32) = v52;
                *(_DWORD *)(v28 + 40 * *v51 + 36) = v55;
                v49 = *v54;
              }
            }
            v57 = v28 + 40 * v26;
            *(_DWORD *)(v57 + 32) = -1;
            *(_DWORD *)(v57 + 36) = *((_DWORD *)this + 522);
            *((_DWORD *)this + 522) = v26;
            ++*((_DWORD *)this + 523);
          }
        }
        else
        {
          v49 = *(_DWORD *)(v28 + 40 * v26 + 36);
        }
        v26 = v49;
      }
      while (v49 != -1);
    }
  }
LABEL_38:
  v30 = *((_QWORD *)this + 5);
  if ((v8 & 0x80000000) != 0)
    v31 = (uint64_t *)(*(_QWORD *)(v30 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  else
    v31 = (uint64_t *)(*(_QWORD *)(v30 + 272) + 8 * v8);
  v32 = *v31;
  if (!v32
    || (*(_BYTE *)(v32 + 3) & 1) == 0 && ((v32 = *(_QWORD *)(v32 + 24)) == 0 || (*(_BYTE *)(v32 + 3) & 1) == 0)
    || (v33 = *(_QWORD *)(v32 + 24)) != 0 && (*(_BYTE *)(v33 + 3) & 1) != 0)
  {
    v34 = (uint64_t *)((char *)this + 1440);
    v35 = *(unsigned __int8 *)(*((_QWORD *)this + 214) + (v8 & 0x7FFFFFFF));
    v36 = *((_DWORD *)this + 362);
    if (v36 > v35)
    {
      v37 = *v34;
      while (1)
      {
        if ((*(_DWORD *)(v37 + 32 * v35) & 0x7FFFFFFF) == (v8 & 0x7FFFFFFF))
        {
          v38 = *(unsigned int *)(v37 + 32 * v35 + 24);
          if ((_DWORD)v38 != -1 && *(_DWORD *)(v37 + 32 * v38 + 28) == -1)
            break;
        }
        v35 += 256;
        if (v35 >= v36)
          goto LABEL_60;
      }
      do
      {
        v39 = v35;
        v40 = v37 + 32 * v35;
        if ((*(_QWORD *)(v40 + 8) & v15) != 0)
        {
          v41 = *(const llvm::MachineInstr ***)(v40 + 16);
          if (v41 != (const llvm::MachineInstr **)a2)
          {
            v71 = a2 & 0xFFFFFFFFFFFFFFF9 | 4;
            v72 = v8;
            v73 = llvm::TargetSchedModel::computeOutputLatency((llvm::ScheduleDAGInstrs *)((char *)this + 632), v67, a3, v41[1]);
            result = llvm::SUnit::addPred((int64_t)v41, (const llvm::SDep *)&v71, 1);
            v42 = *(_QWORD *)(v40 + 8);
            *(_QWORD *)(v40 + 8) = v42 & v15;
            *(_QWORD *)(v40 + 16) = a2;
            v43 = v42 & ~v15;
            if (v43)
            {
              LODWORD(v69) = v8;
              *((_QWORD *)&v69 + 1) = v43;
              v70 = (unint64_t)v41;
              result = sub_1C51A7954((uint64_t)this + 1440, &v69);
            }
            v37 = *v34;
          }
        }
        v35 = *(_DWORD *)(v37 + 32 * v39 + 28);
      }
      while (v35 != -1);
    }
LABEL_60:
    if (v15)
    {
      LODWORD(v69) = v8;
      *((_QWORD *)&v69 + 1) = v15;
      v70 = a2;
      return sub_1C51A7954((uint64_t)this + 1440, &v69);
    }
  }
  return result;
}

uint64_t llvm::ScheduleDAGInstrs::addChainDependency(llvm::AAResults **this, unint64_t a2, const llvm::MachineInstr **a3, int a4)
{
  uint64_t result;
  unint64_t v8;
  int v9;
  int v10;

  result = llvm::MachineInstr::mayAlias(*(llvm::MachineInstr **)(a2 + 8), this[262], a3[1], byte_1ED7FF9B0);
  if ((_DWORD)result)
  {
    v8 = a2 | 6;
    v9 = 1;
    v10 = a4;
    return llvm::SUnit::addPred((int64_t)a3, (const llvm::SDep *)&v8, 1);
  }
  return result;
}

void llvm::ScheduleDAGInstrs::initSUnits(llvm::ScheduleDAGInstrs *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  _QWORD *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  _WORD *v25;
  __int16 v26;
  __int16 v27;
  uint64_t v28;
  _WORD *v29;
  uint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v38 = (uint64_t *)((char *)this + 48);
  sub_1C527E4E4((uint64_t *)this + 6, *((unsigned int *)this + 236));
  v2 = *((_QWORD *)this + 116);
  v3 = *((_QWORD *)this + 117);
  if (v2 == v3)
    return;
  do
  {
    v4 = **(unsigned __int16 **)(v2 + 16);
    v5 = v4 > 0x17;
    v6 = (1 << v4) & 0x83E000;
    if (!v5 && v6 != 0)
    {
LABEL_41:
      if ((*(_BYTE *)v2 & 4) == 0)
        goto LABEL_42;
      goto LABEL_43;
    }
    v8 = *((_QWORD *)this + 7);
    v9 = -252645135 * ((v8 - *((_QWORD *)this + 6)) >> 4);
    if (v8 >= *((_QWORD *)this + 8))
    {
      v10 = sub_1C52820E8(v38, v2, v9);
    }
    else
    {
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = v2;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = v8 + 48;
      *(_QWORD *)(v8 + 40) = 0x400000000;
      *(_QWORD *)(v8 + 112) = v8 + 128;
      *(_QWORD *)(v8 + 120) = 0x400000000;
      *(_DWORD *)(v8 + 192) = v9;
      *(_DWORD *)(v8 + 232) = 0;
      *(_OWORD *)(v8 + 196) = 0u;
      *(_OWORD *)(v8 + 212) = 0u;
      *(_WORD *)(v8 + 228) = 0;
      *(_BYTE *)(v8 + 236) &= 0xFCu;
      v10 = v8 + 272;
      *(_OWORD *)(v8 + 240) = 0u;
      *(_OWORD *)(v8 + 256) = 0u;
    }
    *((_QWORD *)this + 7) = v10;
    v39 = v2;
    v11 = *((_DWORD *)this + 242);
    if (!v11)
    {
      v21 = 0;
LABEL_23:
      v15 = sub_1C51944FC((uint64_t)this + 952, (uint64_t)&v39, &v39, v21);
      *v15 = v39;
      v15[1] = 0;
      goto LABEL_24;
    }
    v12 = *((_QWORD *)this + 119);
    v13 = v11 - 1;
    v14 = v13 & ((v2 >> 4) ^ (v2 >> 9));
    v15 = (_QWORD *)(v12 + 16 * v14);
    v16 = *v15;
    if (v2 != *v15)
    {
      v17 = 0;
      v18 = 1;
      while (v16 != -4096)
      {
        if (v17)
          v19 = 0;
        else
          v19 = v16 == -8192;
        if (v19)
          v17 = v15;
        v20 = v14 + v18++;
        v14 = v20 & v13;
        v15 = (_QWORD *)(v12 + 16 * v14);
        v16 = *v15;
        if (v2 == *v15)
          goto LABEL_24;
      }
      if (v17)
        v21 = v17;
      else
        v21 = v15;
      goto LABEL_23;
    }
LABEL_24:
    v15[1] = v10 - 272;
    v22 = *(_WORD *)(v2 + 44);
    v23 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8);
    if ((v22 & 0xC) != 0 && (v22 & 4) == 0)
    {
      v37 = v2;
      if ((v23 & 0x80) == 0)
      {
        while ((*(_WORD *)(v37 + 44) & 8) != 0)
        {
          v37 = *(_QWORD *)(v37 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v37 + 16) + 8) & 0x80) != 0)
            goto LABEL_56;
        }
        v26 = 0;
        v25 = (_WORD *)(v10 - 44);
        v24 = *(_WORD *)(v10 - 44);
        goto LABEL_29;
      }
LABEL_56:
      v25 = (_WORD *)(v10 - 44);
      v24 = *(_WORD *)(v10 - 44);
LABEL_28:
      v26 = 2;
      goto LABEL_29;
    }
    v25 = (_WORD *)(v10 - 44);
    v24 = *(_WORD *)(v10 - 44);
    if ((v23 & 0x80) != 0)
      goto LABEL_28;
    v26 = 0;
LABEL_29:
    v27 = v26 | v24 & 0xFFFD;
    *(_WORD *)(v10 - 44) = v27;
    *(_WORD *)(v10 - 44) = (*(_DWORD *)(*(_QWORD *)(v2 + 16) + 8) >> 21) & 0x10 | v27 & 0xFFEF;
    *(_WORD *)(v10 - 46) = llvm::TargetSchedModel::computeInstrLatency((llvm::ScheduleDAGInstrs *)((char *)this + 632), *(const llvm::MachineInstr **)(v10 - 264), 1);
    if (!byte_1ED8303C8)
      goto LABEL_41;
    v28 = *((_QWORD *)this + 84);
    if (!v28)
      goto LABEL_41;
    v29 = *(_WORD **)(v10 - 248);
    if (!v29)
    {
      v29 = (_WORD *)(v28 + 24 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v10 - 264) + 16) + 6));
      if ((v29[4] & 0x1FFF) == 0x1FFE)
      {
        do
        {
          v35 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 101) + 200))(*((_QWORD *)this + 101));
          v36 = *((_QWORD *)this + 84);
        }
        while ((*(_WORD *)(v36 + 24 * v35 + 8) & 0x1FFF) == 0x1FFE);
        v29 = (_WORD *)(v36 + 24 * v35);
      }
      *(_QWORD *)(v10 - 248) = v29;
    }
    v30 = (unsigned __int16)v29[6];
    if (!v29[6])
      goto LABEL_41;
    v31 = (unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 101) + 136) + 4 * (unsigned __int16)v29[5]);
    v32 = 4 * v30;
    do
    {
      v33 = *(_DWORD *)(*((_QWORD *)this + 83) + 32 * *v31 + 16);
      if (!v33)
      {
        v34 = 0x8000;
LABEL_38:
        *v25 |= v34;
        goto LABEL_39;
      }
      if (v33 == 1)
      {
        v34 = 0x4000;
        goto LABEL_38;
      }
LABEL_39:
      v31 += 2;
      v32 -= 4;
    }
    while (v32);
    if (v2)
      goto LABEL_41;
LABEL_42:
    while ((*(_WORD *)(v2 + 44) & 8) != 0)
      v2 = *(_QWORD *)(v2 + 8);
LABEL_43:
    v2 = *(_QWORD *)(v2 + 8);
  }
  while (v2 != v3);
}

void sub_1C527E4E4(uint64_t *a1, unint64_t a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;

  v2 = (char *)*a1;
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 4) < a2)
  {
    if (a2 >= 0xF0F0F0F0F0F0F1)
      abort();
    v4 = a1[1];
    v5 = 17 * a2;
    v6 = (char *)operator new(272 * a2);
    v7 = &v6[16 * v5];
    v8 = (uint64_t)&v6[v4 - (_QWORD)v2];
    if ((char *)v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = (uint64_t)v7;
    }
    else
    {
      v12 = v8;
      v13 = v7;
      do
      {
        v4 -= 272;
        v8 = sub_1C6212274(v8 - 272, v4);
      }
      while ((char *)v4 != v2);
      v2 = (char *)*a1;
      v9 = (char *)a1[1];
      *a1 = v8;
      a1[1] = v12;
      a1[2] = (uint64_t)v13;
      while (v9 != v2)
      {
        v10 = (char *)*((_QWORD *)v9 - 20);
        if (v9 - 144 != v10)
          free(v10);
        v11 = (char *)*((_QWORD *)v9 - 30);
        if (v9 - 224 != v11)
          free(v11);
        v9 -= 272;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

uint64_t llvm::ScheduleDAGInstrs::addChainDependencies(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;

  v3 = *(_QWORD *)(a3 + 24);
  v11 = *(_QWORD *)(a3 + 32);
  if (v3 != v11)
  {
    v5 = result;
    v6 = a2 | 6;
    do
    {
      v7 = *(_QWORD *)(v3 + 16);
      if (v7 != v3 + 8)
      {
        v8 = *(_DWORD *)(a3 + 52);
        do
        {
          v9 = *(_QWORD *)(v7 + 16);
          result = llvm::MachineInstr::mayAlias(*(llvm::MachineInstr **)(a2 + 8), *(llvm::AAResults **)(v5 + 2096), *(const llvm::MachineInstr **)(v9 + 8), byte_1ED7FF9B0);
          if ((_DWORD)result)
          {
            v12 = v6;
            v13 = 1;
            v14 = v8;
            result = llvm::SUnit::addPred(v9, (const llvm::SDep *)&v12, 1);
          }
          v7 = *(_QWORD *)(v7 + 8);
        }
        while (v7 != v3 + 8);
      }
      v3 += 32;
    }
    while (v3 != v11);
  }
  return result;
}

uint64_t llvm::ScheduleDAGInstrs::addChainDependencies(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int64_t v17;
  uint64_t v18;
  int v19;
  int v20;

  v5 = result;
  v6 = *a3;
  v7 = *((unsigned int *)a3 + 4);
  if (!(_DWORD)v7)
  {
LABEL_7:
    v9 = (uint64_t *)(v6 + 16 * v7);
    goto LABEL_8;
  }
  LODWORD(v8) = (v7 - 1) & (37 * a4);
  v9 = (uint64_t *)(v6 + 16 * v8);
  v10 = *v9;
  if (a4 != *v9)
  {
    v11 = 1;
    while (v10 != -4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v10 = *(_QWORD *)(v6 + 16 * v8);
      if (a4 == v10)
      {
        v9 = (uint64_t *)(v6 + 16 * v8);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if ((uint64_t *)(v6 + 16 * v7) != v9)
  {
    v13 = a3[3] + 32 * *((unsigned int *)v9 + 2);
    if (v13 != a3[4])
    {
      v14 = v13 + 8;
      v15 = *(_QWORD *)(v13 + 16);
      if (v15 != v13 + 8)
      {
        v16 = *((_DWORD *)a3 + 13);
        do
        {
          v17 = *(_QWORD *)(v15 + 16);
          result = llvm::MachineInstr::mayAlias(*(llvm::MachineInstr **)(a2 + 8), *(llvm::AAResults **)(v5 + 2096), *(const llvm::MachineInstr **)(v17 + 8), byte_1ED7FF9B0);
          if ((_DWORD)result)
          {
            v18 = a2 | 6;
            v19 = 1;
            v20 = v16;
            result = llvm::SUnit::addPred(v17, (const llvm::SDep *)&v18, 1);
          }
          v15 = *(_QWORD *)(v15 + 8);
        }
        while (v15 != v14);
      }
    }
  }
  return result;
}

_QWORD *llvm::ScheduleDAGInstrs::addBarrierChain(uint64_t a1, uint64_t a2)
{
  _QWORD *i;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t j;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  for (i = (_QWORD *)(a2 + 24); v4 != v5; v4 += 32)
  {
    for (j = *(_QWORD *)(v4 + 16); j != v4 + 8; j = *(_QWORD *)(j + 8))
      sub_1C527E8C8(*(_QWORD *)(j + 16), *(_QWORD *)(a1 + 2104));
  }
  if (*(_QWORD *)(a2 + 8))
  {
    v9 = *(unsigned int *)(a2 + 16);
    if (v9 > 4 * *(_DWORD *)(a2 + 8) && v9 >= 0x41)
    {
      sub_1C4926838((unsigned int *)a2);
    }
    else
    {
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD **)a2;
        v11 = 16 * v9;
        do
        {
          *v10 = -4096;
          v10 += 2;
          v11 -= 16;
        }
        while (v11);
      }
      *(_QWORD *)(a2 + 8) = 0;
    }
  }
  result = sub_1C52823F0(i, *(_QWORD *)(a2 + 24));
  *(_DWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t sub_1C527E8C8(int64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  uint64_t v4;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;

  v12 = a2 | 6;
  v13 = 0;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(unsigned __int16 **)(v2 + 16);
  if (*v3 - 1 > 1 || (*(_BYTE *)(*(_QWORD *)(v2 + 32) + 48) & 0x10) == 0)
  {
    v4 = *((_QWORD *)v3 + 1);
    if ((*(_WORD *)(v2 + 44) & 0xC) != 0 && (*(_WORD *)(v2 + 44) & 4) == 0)
    {
      if ((v4 & 0x100000) == 0)
      {
        while ((*(_WORD *)(v2 + 44) & 8) != 0)
        {
          v2 = *(_QWORD *)(v2 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v2 + 16) + 10) & 0x10) != 0)
            goto LABEL_7;
        }
        goto LABEL_26;
      }
    }
    else if ((v4 & 0x100000) == 0)
    {
      goto LABEL_26;
    }
  }
LABEL_7:
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned __int16 **)(v6 + 16);
  if (*v7 - 1 <= 1 && (*(_BYTE *)(*(_QWORD *)(v6 + 32) + 48) & 8) != 0)
    goto LABEL_21;
  v8 = *((_QWORD *)v7 + 1);
  if ((*(_WORD *)(v6 + 44) & 0xC) != 0 && (*(_WORD *)(v6 + 44) & 4) == 0)
  {
    if ((v8 & 0x80000) != 0)
    {
LABEL_21:
      v10 = 1;
      goto LABEL_13;
    }
    while ((*(_WORD *)(v6 + 44) & 8) != 0)
    {
      v6 = *(_QWORD *)(v6 + 8);
      v10 = 1;
      if ((*(_BYTE *)(*(_QWORD *)(v6 + 16) + 10) & 8) != 0)
        goto LABEL_13;
    }
LABEL_26:
    v10 = 0;
    goto LABEL_13;
  }
  v10 = (v8 >> 19) & 1;
LABEL_13:
  HIDWORD(v13) = v10;
  return llvm::SUnit::addPred(a1, (const llvm::SDep *)&v12, 1);
}

_QWORD *llvm::ScheduleDAGInstrs::insertBarrierChain(uint64_t a1, int32x2_t *a2)
{
  int32x2_t *v3;
  int32x2_t v4;
  int32x2_t v5;
  char *v6;
  uint64_t *v8;
  uint64_t *i;
  int64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  __int32 v18;
  int32x2_t v19;
  __int32 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int32x2_t v24;
  __int32 v25;
  __int32 v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  _QWORD *v34;
  int v35;
  int v36;
  _QWORD *result;
  int32x2_t v38;
  int32x2_t v39;
  __int32 v40;

  v4 = a2[3];
  v5 = a2[4];
  v3 = a2 + 3;
  if (*(_QWORD *)&v4 == *(_QWORD *)&v5)
  {
    v6 = (char *)a2[3];
    goto LABEL_46;
  }
  do
  {
    v8 = (uint64_t *)(*(_QWORD *)&v4 + 8);
    for (i = *(uint64_t **)(*(_QWORD *)&v4 + 16); i != v8; i = (uint64_t *)i[1])
    {
      v10 = i[2];
      v11 = *(_QWORD *)(a1 + 2104);
      if (*(_DWORD *)(v10 + 192) <= *(_DWORD *)(v11 + 192))
      {
        if (v10 == v11)
          v8 = (uint64_t *)i[1];
        else
          v8 = i;
        break;
      }
      sub_1C527E8C8(v10, v11);
    }
    v12 = *(uint64_t **)(*(_QWORD *)&v4 + 16);
    if (v8 != v12)
    {
      v13 = *v8;
      v14 = *v12;
      *(_QWORD *)(v14 + 8) = *(_QWORD *)(*v8 + 8);
      **(_QWORD **)(v13 + 8) = v14;
      do
      {
        v15 = (uint64_t *)v12[1];
        --*(_QWORD *)(*(_QWORD *)&v4 + 24);
        operator delete(v12);
        v12 = v15;
      }
      while (v15 != v8);
    }
    *(_QWORD *)&v4 += 32;
  }
  while (*(_QWORD *)&v4 != *(_QWORD *)&v5);
  v6 = (char *)a2[3];
  v16 = (char *)a2[4];
  if (v6 == v16)
  {
    v4 = a2[3];
    goto LABEL_46;
  }
  v17 = (char *)a2[3];
  do
  {
    if (*((_QWORD *)v17 + 3))
    {
      if (v17 == v6)
      {
LABEL_19:
        v6 += 32;
        goto LABEL_23;
      }
      *(_QWORD *)v6 = *(_QWORD *)v17;
      sub_1C6212588((_QWORD *)v6 + 1, (_QWORD *)v17 + 1);
      v24 = a2[3];
      v25 = a2[2].i32[0];
      if (v25)
      {
        v26 = v25 - 1;
        v27 = (37 * *(_QWORD *)v6) & v26;
        v28 = (_QWORD *)(*(_QWORD *)a2 + 16 * v27);
        v29 = *v28;
        if (*(_QWORD *)v6 == *v28)
        {
LABEL_38:
          *((_DWORD *)v28 + 2) = (unint64_t)&v6[-*(_QWORD *)&v24] >> 5;
          goto LABEL_19;
        }
        v30 = 0;
        v31 = 1;
        while (v29 != -4096)
        {
          if (v30)
            v32 = 0;
          else
            v32 = v29 == -8192;
          if (v32)
            v30 = v28;
          v33 = v27 + v31++;
          v27 = v33 & v26;
          v28 = (_QWORD *)(*(_QWORD *)a2 + 16 * v27);
          v29 = *v28;
          if (*(_QWORD *)v6 == *v28)
            goto LABEL_38;
        }
        if (v30)
          v34 = v30;
        else
          v34 = v28;
      }
      else
      {
        v34 = 0;
      }
      v28 = sub_1C52827FC((uint64_t)a2, v6, v34);
      *v28 = *(_QWORD *)v6;
      *((_DWORD *)v28 + 2) = 0;
      goto LABEL_38;
    }
    v18 = a2[2].i32[0];
    if (v18)
    {
      v19 = *a2;
      v20 = v18 - 1;
      LODWORD(v21) = (37 * *(_QWORD *)v17) & (v18 - 1);
      v22 = (uint64_t *)(*(_QWORD *)a2 + 16 * v21);
      v23 = *v22;
      if (*(_QWORD *)v17 == *v22)
      {
LABEL_22:
        *v22 = -8192;
        a2[1] = vadd_s32(a2[1], (int32x2_t)0x1FFFFFFFFLL);
      }
      else
      {
        v35 = 1;
        while (v23 != -4096)
        {
          v36 = v21 + v35++;
          v21 = v36 & v20;
          v23 = *(_QWORD *)(*(_QWORD *)&v19 + 16 * v21);
          if (*(_QWORD *)v17 == v23)
          {
            v22 = (uint64_t *)(*(_QWORD *)&v19 + 16 * v21);
            goto LABEL_22;
          }
        }
      }
    }
LABEL_23:
    v17 += 32;
  }
  while (v17 != v16);
  v4 = a2[4];
LABEL_46:
  result = sub_1C621250C(v3, v6, *(char **)&v4);
  a2[6].i32[0] = 0;
  v38 = a2[3];
  v39 = a2[4];
  if (*(_QWORD *)&v38 != *(_QWORD *)&v39)
  {
    v40 = 0;
    do
    {
      v40 += *(_DWORD *)(*(_QWORD *)&v38 + 24);
      *(_QWORD *)&v38 += 32;
    }
    while (*(_QWORD *)&v38 != *(_QWORD *)&v39);
    a2[6].i32[0] = v40;
  }
  return result;
}

uint64_t llvm::ScheduleDAGInstrs::buildSchedGraph(llvm::ScheduleDAGInstrs *this, llvm::AAResults *a2, llvm::RegPressureTracker *a3, llvm::PressureDiffs *a4, llvm::LiveIntervals *a5, int a6)
{
  uint64_t v9;
  int v10;
  llvm::AAResults *v11;
  char *v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  void *v29;
  size_t v30;
  unsigned int v31;
  unsigned int v32;
  size_t v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t j;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t *v49;
  unint64_t *v50;
  unsigned int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  int v60;
  BOOL v61;
  unsigned int v62;
  _QWORD *v63;
  unint64_t v64;
  __int16 v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  BOOL v70;
  int v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  int v79;
  int v80;
  _QWORD *v81;
  uint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int *v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t i;
  uint64_t v100;
  int v101;
  int v102;
  unsigned int v103;
  unsigned __int16 *v104;
  __int16 v105;
  uint64_t v106;
  uint64_t v107;
  int64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t n;
  void *v119;
  _QWORD *v120;
  _QWORD *v121;
  void *v122;
  _QWORD *v123;
  _QWORD *kk;
  unint64_t v125;
  __int16 v126;
  uint64_t v127;
  unsigned __int16 *v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  uint64_t v132;
  uint64_t k;
  _QWORD *m;
  uint64_t ii;
  _QWORD *jj;
  _QWORD *mm;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  int64_t v148;
  unint64_t v149;
  int *v150;
  unsigned int v151;
  uint64_t *v152;
  int *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t **v159;
  char v160;
  char v161;
  uint64_t v162;
  unsigned __int16 v163;
  __int16 v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  BOOL v170;
  int32x2_t *v171;
  int32x2_t *v172;
  uint64_t v173;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  BOOL v179;
  int32x2_t *v180;
  int32x2_t *v181;
  uint64_t *v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t i2;
  int64_t v188;
  uint64_t v189;
  int v190;
  uint64_t i3;
  int64_t v192;
  _QWORD *v193;
  int v194;
  _QWORD *i4;
  int64_t v196;
  _QWORD *v197;
  int v198;
  _QWORD *i5;
  int64_t v200;
  uint64_t *v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t nn;
  int64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t i1;
  int64_t v213;
  uint64_t *v214;
  _QWORD *v215;
  uint64_t v216;
  unsigned __int16 *v217;
  uint64_t v218;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  int32x2_t *v224;
  uint64_t *v225;
  _QWORD *v226;
  uint64_t v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  int v231;
  unint64_t v232;
  unint64_t v233;
  int64_t v234;
  uint64_t *v235;
  _QWORD *v236;
  uint64_t v237;
  unsigned int v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  void *v244;
  void *v245;
  void *v246;
  void *v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  llvm::AAResults *v253;
  uint64_t v255;
  llvm::PressureDiffs *v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  _QWORD *v265;
  uint64_t v266;
  unsigned int v267;
  void *v268[2];
  __int128 v269;
  _QWORD *v270;
  uint64_t v271;
  unsigned int v272;
  void *v273;
  _QWORD *v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  unsigned int v279;
  __int128 v280;
  __int128 v281;
  _QWORD *v282;
  uint64_t v283;
  unsigned int v284;
  void *v285;
  _QWORD *v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  unsigned int v291;
  __int128 v292;
  __int128 v293;
  uint64_t v294;
  void *v295;
  uint64_t v296;
  _BYTE v297[32];
  _BYTE v298[40];
  __int128 v299;
  void *v300;
  uint64_t v301;
  _BYTE v302[128];
  void *v303;
  uint64_t v304;
  _BYTE v305[128];
  uint64_t *v306;
  uint64_t v307;
  _BYTE v308[16];
  uint64_t *v309;
  uint64_t v310;
  _QWORD v311[4];

  v311[2] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(*((_QWORD *)this + 4) + 16);
  if (word_1ED7FF878)
    v10 = byte_1ED7FF8F0 != 0;
  else
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 368))(v9);
  if (v10)
    v11 = a2;
  else
    v11 = 0;
  *((_QWORD *)this + 262) = v11;
  *((_QWORD *)this + 263) = 0;
  *((_BYTE *)this + 914) = a6;
  v12 = (char *)this + 952;
  v13 = *((_DWORD *)this + 240);
  v257 = a4;
  v253 = a2;
  if (v13)
  {
    v14 = *((_DWORD *)this + 242);
    if (v14 > 4 * v13 && v14 >= 0x41)
    {
      v15 = 1 << (33 - __clz(v13 - 1));
      if (v15 <= 64)
        v16 = 64;
      else
        v16 = v15;
LABEL_13:
      if (v16 == v14)
      {
        *((_QWORD *)this + 120) = 0;
        v17 = (_QWORD *)*((_QWORD *)this + 119);
        v18 = 16 * v14;
        do
        {
          *v17 = -4096;
          v17 += 2;
          v18 -= 16;
        }
        while (v18);
      }
      else
      {
        MEMORY[0x1CAA32FB4](*(_QWORD *)v12, 8);
        if (v16)
        {
          v19 = (4 * v16 / 3u + 1) | ((unint64_t)(4 * v16 / 3u + 1) >> 1);
          v20 = v19 | (v19 >> 2) | ((v19 | (v19 >> 2)) >> 4);
          LODWORD(v20) = (((v20 | (v20 >> 8)) >> 16) | v20 | (v20 >> 8)) + 1;
          *((_DWORD *)this + 242) = v20;
          v21 = operator new(16 * v20, (std::align_val_t)8uLL);
          *((_QWORD *)this + 119) = v21;
          *((_QWORD *)this + 120) = 0;
          v22 = *((unsigned int *)this + 242);
          if ((_DWORD)v22)
          {
            v23 = 16 * v22;
            do
            {
              *v21 = -4096;
              v21 += 2;
              v23 -= 16;
            }
            while (v23);
          }
        }
        else
        {
          *(_QWORD *)v12 = 0;
          *((_QWORD *)v12 + 1) = 0;
          *((_DWORD *)v12 + 4) = 0;
        }
      }
      goto LABEL_31;
    }
  }
  else
  {
    if (!*((_DWORD *)this + 241))
      goto LABEL_31;
    v14 = *((_DWORD *)this + 242);
    if (v14 > 0x40)
    {
      v16 = 0;
      v12 = (char *)this + 952;
      goto LABEL_13;
    }
    v12 = (char *)this + 952;
  }
  if (v14)
  {
    v24 = *(_QWORD **)v12;
    v25 = 16 * v14;
    do
    {
      *v24 = -4096;
      v24 += 2;
      v25 -= 16;
    }
    while (v25);
  }
  *((_QWORD *)this + 120) = 0;
LABEL_31:
  sub_1C527C610((uint64_t)this + 48, *((_QWORD *)this + 6));
  memset(&v298[3], 0, 32);
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 28) = 0;
  *((_DWORD *)this + 48) = 0;
  *((_DWORD *)this + 66) = -1;
  *((_WORD *)this + 150) = 0;
  *(_OWORD *)((char *)this + 268) = 0u;
  *(_OWORD *)((char *)this + 284) = 0u;
  *((_DWORD *)this + 76) = 0;
  *((_BYTE *)this + 308) = 0;
  v26 = *(_OWORD *)&v298[16];
  *(_OWORD *)((char *)this + 309) = *(_OWORD *)v298;
  *(_OWORD *)((char *)this + 325) = v26;
  *((_DWORD *)this + 85) = *(_DWORD *)&v298[31];
  memset(&v298[3], 0, 32);
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_DWORD *)this + 96) = 0;
  *((_DWORD *)this + 116) = 0;
  *((_DWORD *)this + 134) = -1;
  *(_OWORD *)((char *)this + 540) = 0u;
  v252 = (char *)this + 344;
  *(_OWORD *)((char *)this + 556) = 0u;
  *((_WORD *)this + 286) = 0;
  *((_DWORD *)this + 144) = 0;
  *((_BYTE *)this + 580) = 0;
  v27 = *(_OWORD *)&v298[16];
  *(_OWORD *)((char *)this + 581) = *(_OWORD *)v298;
  *(_OWORD *)((char *)this + 597) = v27;
  *((_DWORD *)this + 153) = *(_DWORD *)&v298[31];
  llvm::ScheduleDAGInstrs::initSUnits(this);
  if (a4)
  {
    v28 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 4);
    *((_DWORD *)a4 + 2) = v28;
    if (*((_DWORD *)a4 + 3) < v28)
    {
      *((_DWORD *)a4 + 3) = v28;
      free(*(void **)a4);
      v29 = malloc_type_calloc(v28, 0x40uLL, 0x6D9A4F0CuLL);
      if (!v29)
      {
        v248 = "Allocation failed";
LABEL_490:
        llvm::report_bad_alloc_error((llvm *)v248, (const char *)1);
      }
      *(_QWORD *)a4 = v29;
    }
    else
    {
      bzero(*(void **)a4, (unint64_t)v28 << 6);
    }
  }
  v289 = 0;
  v290 = 0;
  v291 = 0;
  v292 = 0u;
  v293 = 0u;
  v282 = 0;
  v283 = 0;
  v284 = 0;
  v285 = 0;
  v286 = 0;
  v287 = 0;
  v288 = 0x100000000;
  v277 = 0;
  v278 = 0;
  v279 = 0;
  v280 = 0u;
  v281 = 0u;
  v270 = 0;
  v271 = 0;
  v272 = 0;
  v273 = 0;
  v274 = 0;
  v275 = 0;
  v276 = 0x100000000;
  v265 = 0;
  v266 = 0;
  v267 = 0;
  *(_OWORD *)v268 = 0u;
  v269 = 0u;
  *((_QWORD *)this + 318) = *((_QWORD *)this + 317);
  *((_QWORD *)this + 320) = 0;
  v30 = *(unsigned int *)(*((_QWORD *)this + 3) + 16);
  v31 = *((_DWORD *)this + 298);
  if (v31 < v30 || v31 >> 2 > v30)
  {
    free(*((void **)this + 148));
    v244 = malloc_type_calloc(v30, 2uLL, 0x6D9A4F0CuLL);
    if (!v244)
    {
      if ((_DWORD)v30)
        goto LABEL_488;
      v244 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v244)
        goto LABEL_488;
    }
    *((_QWORD *)this + 148) = v244;
    *((_DWORD *)this + 298) = v30;
    LODWORD(v30) = *(_DWORD *)(*((_QWORD *)this + 3) + 16);
  }
  v32 = *((_DWORD *)this + 356);
  if (v32 < v30 || v32 >> 2 > v30)
  {
    free(*((void **)this + 177));
    v245 = malloc_type_calloc(v30, 2uLL, 0x6D9A4F0CuLL);
    if (!v245)
    {
      if ((_DWORD)v30)
        goto LABEL_488;
      v245 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v245)
        goto LABEL_488;
    }
    *((_QWORD *)this + 177) = v245;
    *((_DWORD *)this + 356) = v30;
  }
  v33 = *(unsigned int *)(*((_QWORD *)this + 5) + 32);
  v34 = *((_DWORD *)this + 430);
  if (v34 < v33 || v34 >> 2 > v33)
  {
    free(*((void **)this + 214));
    v246 = malloc_type_calloc(v33, 1uLL, 0x6D9A4F0CuLL);
    if (v246 || !(_DWORD)v33 && (v246 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      *((_QWORD *)this + 214) = v246;
      *((_DWORD *)this + 430) = v33;
      goto LABEL_42;
    }
LABEL_488:
    v248 = "Allocation failed";
    goto LABEL_490;
  }
LABEL_42:
  v35 = *((_DWORD *)this + 520);
  if (v35 >= v33 && v35 >> 2 <= v33)
    goto LABEL_44;
  free(*((void **)this + 259));
  v247 = malloc_type_calloc(v33, 1uLL, 0x6D9A4F0CuLL);
  if (!v247)
  {
    if ((_DWORD)v33)
      goto LABEL_488;
    v247 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
    if (!v247)
      goto LABEL_488;
  }
  *((_QWORD *)this + 259) = v247;
  *((_DWORD *)this + 520) = v33;
LABEL_44:
  llvm::ScheduleDAGInstrs::addSchedBarrierDeps(this);
  v36 = *((_QWORD *)this + 117);
  j = *((_QWORD *)this + 116);
  if (v36 == j)
    goto LABEL_456;
  v251 = v9;
  v38 = 0;
  v255 = *((_QWORD *)this + 116);
  do
  {
    v39 = *(_QWORD *)v36 & 0xFFFFFFFFFFFFFFF8;
    if (!v39 || (*(_BYTE *)v39 & 4) == 0)
    {
      while ((*(_WORD *)(v39 + 44) & 4) != 0)
        v39 = *(_QWORD *)v39 & 0xFFFFFFFFFFFFFFF8;
    }
    if (v38)
    {
      v40 = (unint64_t *)*((_QWORD *)this + 318);
      v41 = *((_QWORD *)this + 319);
      if ((unint64_t)v40 >= v41)
      {
        v43 = (char *)*((_QWORD *)this + 317);
        v44 = ((char *)v40 - v43) >> 4;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 60)
          abort();
        v46 = v41 - (_QWORD)v43;
        if (v46 >> 3 > v45)
          v45 = v46 >> 3;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
          v47 = 0xFFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        if (v47)
        {
          if (v47 >> 60)
            sub_1C4764EE4();
          v48 = (char *)operator new(16 * v47);
        }
        else
        {
          v48 = 0;
        }
        v49 = (unint64_t *)&v48[16 * v44];
        *v49 = v38;
        v49[1] = v39;
        v50 = v49;
        if (v40 != (unint64_t *)v43)
        {
          do
          {
            *((_OWORD *)v50 - 1) = *((_OWORD *)v40 - 1);
            v50 -= 2;
            v40 -= 2;
          }
          while (v40 != (unint64_t *)v43);
          v40 = (unint64_t *)*((_QWORD *)this + 317);
        }
        *((_QWORD *)this + 317) = v50;
        v42 = v49 + 2;
        *((_QWORD *)this + 318) = v49 + 2;
        *((_QWORD *)this + 319) = &v48[16 * v47];
        if (v40)
          operator delete(v40);
      }
      else
      {
        *v40 = v38;
        v40[1] = v39;
        v42 = v40 + 2;
      }
      *((_QWORD *)this + 318) = v42;
    }
    v51 = **(unsigned __int16 **)(v39 + 16);
    if (v51 <= 0x17)
    {
      v52 = 1 << v51;
      if ((v52 & 0x16000) != 0)
      {
        v38 = v39;
        goto LABEL_174;
      }
      if ((v52 & 0x828000) != 0)
      {
        v38 = 0;
        goto LABEL_174;
      }
    }
    *(_QWORD *)v298 = v39;
    v53 = *((_DWORD *)this + 242);
    if (v53)
    {
      v54 = *((_QWORD *)this + 119);
      v55 = v53 - 1;
      v56 = v55 & ((v39 >> 4) ^ (v39 >> 9));
      v57 = (_QWORD *)(v54 + 16 * v56);
      v58 = *v57;
      if (v39 == *v57)
        goto LABEL_90;
      v59 = 0;
      v60 = 1;
      while (v58 != -4096)
      {
        if (v59)
          v61 = 0;
        else
          v61 = v58 == -8192;
        if (v61)
          v59 = v57;
        v62 = v56 + v60++;
        v56 = v62 & v55;
        v57 = (_QWORD *)(v54 + 16 * v56);
        v58 = *v57;
        if (v39 == *v57)
          goto LABEL_90;
      }
      if (v59)
        v63 = v59;
      else
        v63 = v57;
    }
    else
    {
      v63 = 0;
    }
    v57 = sub_1C51944FC((uint64_t)this + 952, (uint64_t)v298, (uint64_t *)v298, v63);
    *v57 = *(_QWORD *)v298;
    v57[1] = 0;
LABEL_90:
    v64 = v57[1];
    if (!a3)
      goto LABEL_128;
    *(_QWORD *)v298 = &v298[16];
    *(_QWORD *)&v298[8] = 0x800000000;
    v300 = v302;
    v301 = 0x800000000;
    v303 = v305;
    v304 = 0x800000000;
    llvm::RegisterOperands::collect(v298, (const llvm::MachineInstr *)v39, *((const llvm::TargetRegisterInfo **)this + 3), *((const llvm::MachineRegisterInfo **)this + 5), a6, 0);
    if (a6)
    {
      v65 = *(_WORD *)(v39 + 44);
      v66 = v39;
      if ((v65 & 4) != 0)
      {
        do
          v66 = *(_QWORD *)v66 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v66 + 44) & 4) != 0);
      }
      v67 = v39;
      if ((v65 & 8) != 0)
      {
        do
          v67 = *(_QWORD *)(v67 + 8);
        while ((*(_WORD *)(v67 + 44) & 8) != 0);
      }
      v68 = *(_QWORD *)(v67 + 8);
      if (v66 != v68)
      {
        while (1)
        {
          v69 = **(unsigned __int16 **)(v66 + 16);
          v70 = v69 > 0x17;
          v71 = (1 << v69) & 0x83E000;
          if (v70 || v71 == 0)
            break;
          v66 = *(_QWORD *)(v66 + 8);
          if (v66 == v68)
          {
            v66 = v68;
            break;
          }
        }
      }
      v73 = *((_QWORD *)a5 + 36);
      v74 = *(_QWORD *)(v73 + 368);
      v75 = *(unsigned int *)(v73 + 384);
      if ((_DWORD)v75)
      {
        LODWORD(v76) = ((v66 >> 4) ^ (v66 >> 9)) & (v75 - 1);
        v77 = (uint64_t *)(v74 + 16 * v76);
        v78 = *v77;
        if (v66 != *v77)
        {
          v79 = 1;
          while (v78 != -4096)
          {
            v80 = v76 + v79++;
            v76 = v80 & (v75 - 1);
            v78 = *(_QWORD *)(v74 + 16 * v76);
            if (v66 == v78)
            {
              v77 = (uint64_t *)(v74 + 16 * v76);
              goto LABEL_108;
            }
          }
          goto LABEL_107;
        }
      }
      else
      {
LABEL_107:
        v77 = (uint64_t *)(v74 + 16 * v75);
      }
LABEL_108:
      llvm::RegisterOperands::adjustLaneLiveness((uint64_t)v298, (uint64_t)a5, *((_QWORD *)this + 5), v77[1], 0);
    }
    if (v257)
    {
      v81 = (_QWORD *)*((_QWORD *)this + 5);
      v82 = *(_QWORD *)v257 + ((unint64_t)*(unsigned int *)(v64 + 192) << 6);
      if ((_DWORD)v301)
      {
        v83 = (unsigned int *)v300;
        v84 = 16 * v301;
        do
        {
          v85 = *v83;
          v83 += 4;
          llvm::PressureDiff::addPressureChange(v82, v85, 1, v81);
          v84 -= 16;
        }
        while (v84);
      }
      if (*(_DWORD *)&v298[8])
      {
        v86 = *(unsigned int **)v298;
        v87 = 16 * *(unsigned int *)&v298[8];
        do
        {
          v88 = *v86;
          v86 += 4;
          llvm::PressureDiff::addPressureChange(v82, v88, 0, v81);
          v87 -= 16;
        }
        while (v87);
      }
    }
    v89 = *((_QWORD *)a3 + 8);
    if (v89 != v39 || v89 == *((_QWORD *)this + 117))
      llvm::RegPressureTracker::recedeSkipDebugValues((unsigned int *)a3);
    llvm::RegPressureTracker::recede((uint64_t)a3, (unsigned int **)v298, 0);
    if (v303 != v305)
      free(v303);
    if (v300 != v302)
      free(v300);
    if (*(_BYTE **)v298 != &v298[16])
      free(*(void **)v298);
LABEL_128:
    v91 = *(unsigned int *)(v39 + 40);
    if ((_DWORD)v91)
    {
      v92 = 0;
      v93 = 0;
      v94 = 0;
      do
      {
        v95 = *(_QWORD *)(v39 + 32);
        if ((*(_DWORD *)(v95 + v92) & 0x10000FF) == 0x1000000)
        {
          v96 = *(_DWORD *)(v95 + v92 + 4);
          if ((v96 - 1) > 0x3FFFFFFE)
          {
            if (v96 < 0)
            {
              llvm::ScheduleDAGInstrs::addVRegDefDeps(this, v64, v93);
              v94 = 1;
            }
          }
          else
          {
            llvm::ScheduleDAGInstrs::addPhysRegDeps(this, v64, v93);
          }
        }
        ++v93;
        v92 += 32;
      }
      while (v91 != v93);
      v97 = *(unsigned int *)(v39 + 40);
      if ((_DWORD)v97)
      {
        v98 = 0;
        for (i = 0; i != v97; ++i)
        {
          v100 = *(_QWORD *)(v39 + 32);
          v101 = *(_DWORD *)(v100 + v98);
          if ((v101 & 0x10000FF) == 0)
          {
            v102 = *(_DWORD *)(v100 + v98 + 4);
            if ((v102 - 1) > 0x3FFFFFFE)
            {
              if ((v101 & 0x30000000) == 0 && v102 < 0)
                llvm::ScheduleDAGInstrs::addVRegUseDeps((uint64_t)this, v64, i);
            }
            else
            {
              llvm::ScheduleDAGInstrs::addPhysRegDeps(this, v64, i);
            }
          }
          v98 += 32;
        }
      }
    }
    else
    {
      v94 = 0;
    }
    if (!*(_DWORD *)(v64 + 204))
    {
      v103 = *(unsigned __int16 *)(v64 + 226);
      if (v103 >= 2)
      {
        if ((v94 & 1) != 0)
          goto LABEL_154;
        v104 = *(unsigned __int16 **)(v39 + 16);
        if (*v104 - 1 <= 1 && (*(_BYTE *)(*(_QWORD *)(v39 + 32) + 48) & 8) != 0)
          goto LABEL_154;
        v105 = *(_WORD *)(v39 + 44);
        v106 = *((_QWORD *)v104 + 1);
        if ((v105 & 0xC) == 0 || (v105 & 4) != 0)
        {
          if ((v106 & 0x80000) == 0)
            goto LABEL_155;
LABEL_154:
          *(_QWORD *)v298 = v64 | 6;
          *(_DWORD *)&v298[8] = 3;
          *(_DWORD *)&v298[12] = v103 - 1;
          (*(void (**)(uint64_t, unint64_t, _QWORD, char *, _QWORD, _BYTE *))(*(_QWORD *)v251 + 304))(v251, v64, 0, v252, 0, v298);
          llvm::SUnit::addPred((int64_t)v252, (const llvm::SDep *)v298, 1);
          goto LABEL_155;
        }
        v241 = v39;
        if ((v106 & 0x80000) != 0)
          goto LABEL_154;
        while ((*(_WORD *)(v241 + 44) & 8) != 0)
        {
          v241 = *(_QWORD *)(v241 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v241 + 16) + 10) & 8) != 0)
            goto LABEL_154;
        }
      }
    }
LABEL_155:
    v107 = *(_QWORD *)(*(_QWORD *)(v39 + 16) + 8);
    if ((*(_WORD *)(v39 + 44) & 0xC) != 0 && (*(_WORD *)(v39 + 44) & 4) == 0)
    {
      v125 = v39;
      if ((v107 & 0x80) != 0)
        goto LABEL_161;
      while ((*(_WORD *)(v125 + 44) & 8) != 0)
      {
        v125 = *(_QWORD *)(v125 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v125 + 16) + 8) & 0x80) != 0)
          goto LABEL_161;
      }
    }
    else if ((v107 & 0x80) != 0)
    {
      goto LABEL_161;
    }
    if (llvm::MachineInstr::hasUnmodeledSideEffects((llvm::MachineInstr *)v39)
      || llvm::MachineInstr::hasOrderedMemoryRef((llvm::MachineInstr *)v39)
      && (llvm::MachineInstr::isDereferenceableInvariantLoad((llvm::MachineInstr *)v39, v253) & 1) == 0)
    {
LABEL_161:
      v109 = *((_QWORD *)this + 263);
      if (v109)
        sub_1C527E8C8(v109, v64);
      *((_QWORD *)this + 263) = v64;
      v111 = *((_QWORD *)&v292 + 1);
      v110 = v292;
      v112 = v292;
      for (j = v255; v112 != v111; v112 += 32)
      {
        for (k = *(_QWORD *)(v112 + 16); k != v112 + 8; k = *(_QWORD *)(k + 8))
          sub_1C527E8C8(*(_QWORD *)(k + 16), *((_QWORD *)this + 263));
      }
      if (v290)
      {
        if (v291 > 4 * (int)v290 && v291 >= 0x41)
        {
          sub_1C4926838((unsigned int *)&v289);
          v110 = v292;
        }
        else
        {
          if (v291)
          {
            v138 = v289;
            v139 = 16 * v291;
            do
            {
              *v138 = -4096;
              v138 += 2;
              v139 -= 16;
            }
            while (v139);
          }
          v290 = 0;
        }
      }
      sub_1C52823F0(&v292, v110);
      DWORD2(v293) = 0;
      v113 = v285;
      v114 = v286;
      v115 = v285;
      if (v285 != v286)
      {
        do
        {
          for (m = (_QWORD *)v115[2]; m != v115 + 1; m = (_QWORD *)m[1])
            sub_1C527E8C8(m[2], *((_QWORD *)this + 263));
          v115 += 4;
        }
        while (v115 != v114);
      }
      if (v283)
      {
        if (v284 > 4 * (int)v283 && v284 >= 0x41)
        {
          sub_1C4926838((unsigned int *)&v282);
          v113 = v285;
        }
        else
        {
          if (v284)
          {
            v140 = v282;
            v141 = 16 * v284;
            do
            {
              *v140 = -4096;
              v140 += 2;
              v141 -= 16;
            }
            while (v141);
          }
          v283 = 0;
        }
      }
      sub_1C52823F0(&v285, (uint64_t)v113);
      LODWORD(v288) = 0;
      v117 = *((_QWORD *)&v280 + 1);
      v116 = v280;
      for (n = v280; n != v117; n += 32)
      {
        for (ii = *(_QWORD *)(n + 16); ii != n + 8; ii = *(_QWORD *)(ii + 8))
          sub_1C527E8C8(*(_QWORD *)(ii + 16), *((_QWORD *)this + 263));
      }
      if (v278)
      {
        if (v279 > 4 * (int)v278 && v279 >= 0x41)
        {
          sub_1C4926838((unsigned int *)&v277);
          v116 = v280;
        }
        else
        {
          if (v279)
          {
            v142 = v277;
            v143 = 16 * v279;
            do
            {
              *v142 = -4096;
              v142 += 2;
              v143 -= 16;
            }
            while (v143);
          }
          v278 = 0;
        }
      }
      sub_1C52823F0(&v280, v116);
      DWORD2(v281) = 0;
      v119 = v273;
      v120 = v274;
      v121 = v273;
      if (v273 != v274)
      {
        do
        {
          for (jj = (_QWORD *)v121[2]; jj != v121 + 1; jj = (_QWORD *)jj[1])
            sub_1C527E8C8(jj[2], *((_QWORD *)this + 263));
          v121 += 4;
        }
        while (v121 != v120);
      }
      if (v271)
      {
        if (v272 > 4 * (int)v271 && v272 >= 0x41)
        {
          sub_1C4926838((unsigned int *)&v270);
          v119 = v273;
        }
        else
        {
          if (v272)
          {
            v144 = v270;
            v145 = 16 * v272;
            do
            {
              *v144 = -4096;
              v144 += 2;
              v145 -= 16;
            }
            while (v145);
          }
          v271 = 0;
        }
      }
      sub_1C52823F0(&v273, (uint64_t)v119);
      LODWORD(v276) = 0;
      v122 = v268[0];
      v123 = v268[1];
      for (kk = v268[0]; kk != v123; kk += 4)
      {
        for (mm = (_QWORD *)kk[2]; mm != kk + 1; mm = (_QWORD *)mm[1])
          sub_1C527E8C8(mm[2], *((_QWORD *)this + 263));
      }
      if (v266)
      {
        if (v267 > 4 * (int)v266 && v267 >= 0x41)
        {
          sub_1C4926838((unsigned int *)&v265);
          v122 = v268[0];
        }
        else
        {
          if (v267)
          {
            v146 = v265;
            v147 = 16 * v267;
            do
            {
              *v146 = -4096;
              v146 += 2;
              v147 -= 16;
            }
            while (v147);
          }
          v266 = 0;
        }
      }
      sub_1C52823F0(v268, (uint64_t)v122);
      v38 = 0;
      DWORD2(v269) = 0;
      goto LABEL_174;
    }
    v126 = *(_WORD *)(v39 + 44);
    v127 = *(_QWORD *)(*(_QWORD *)(v39 + 16) + 8);
    if ((v126 & 0xC) != 0 && (v126 & 4) == 0)
    {
      v233 = v39;
      if ((v127 & 0x200000) == 0)
      {
        while ((*(_WORD *)(v233 + 44) & 8) != 0)
        {
          v233 = *(_QWORD *)(v233 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v233 + 16) + 10) & 0x20) != 0)
            goto LABEL_407;
        }
        goto LABEL_190;
      }
LABEL_407:
      if ((*(_WORD *)(v39 + 44) & 0x4000) == 0)
      {
        v234 = *((_QWORD *)this + 263);
        if (v234)
          sub_1C527E8C8(v234, v64);
        *(_QWORD *)v298 = *((_QWORD *)this + 264) & 0xFFFFFFFFFFFFFFFBLL;
        v235 = (uint64_t *)sub_1C5282480((uint64_t)&v265, (uint64_t *)v298);
        v236 = operator new(0x18uLL);
        v236[1] = v235;
        v236[2] = v64;
        *v236 = 0;
        v237 = *v235;
        *v236 = *v235;
        *(_QWORD *)(v237 + 8) = v236;
        *v235 = (uint64_t)v236;
        ++v235[2];
        if (++DWORD2(v269) >= dword_1ED7FFA70)
        {
          memset(v298, 0, 20);
          *(_OWORD *)&v298[24] = 0u;
          v299 = 0u;
          if (word_1ED7FFAB8)
            v238 = dword_1ED7FFB30;
          else
            v238 = dword_1ED7FFA70 >> 1;
          llvm::ScheduleDAGInstrs::reduceHugeMemNodeMaps(this, (int32x2_t *)&v265, (int32x2_t *)v298, v238);
          if (*(_QWORD *)&v298[24])
          {
            sub_1C52823F0(&v298[24], *(uint64_t *)&v298[24]);
            operator delete(*(void **)&v298[24]);
          }
          MEMORY[0x1CAA32FB4](*(_QWORD *)v298, 8);
        }
      }
      goto LABEL_190;
    }
    if ((v127 & 0x200000) != 0)
      goto LABEL_407;
LABEL_190:
    v128 = *(unsigned __int16 **)(v39 + 16);
    v129 = *v128 - 1;
    if (v129 <= 1 && (*(_BYTE *)(*(_QWORD *)(v39 + 32) + 48) & 0x10) != 0)
      goto LABEL_262;
    v130 = *(unsigned __int16 *)(v39 + 44);
    v61 = (v130 & 0xC) == 0;
    v131 = (v130 >> 2) & 1;
    if (v61)
      LOBYTE(v131) = 1;
    v132 = *((_QWORD *)v128 + 1);
    if ((v131 & 1) != 0)
    {
      if ((v132 & 0x100000) != 0)
        goto LABEL_262;
    }
    else
    {
      v232 = v39;
      if ((v132 & 0x100000) != 0)
        goto LABEL_262;
      while ((*(_WORD *)(v232 + 44) & 8) != 0)
      {
        v232 = *(_QWORD *)(v232 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v232 + 16) + 10) & 0x10) != 0)
          goto LABEL_262;
      }
    }
    if (v129 <= 1 && (*(_BYTE *)(*(_QWORD *)(v39 + 32) + 48) & 8) != 0)
      goto LABEL_199;
    if ((v131 & 1) != 0)
    {
      if ((v132 & 0x80000) == 0)
        goto LABEL_200;
LABEL_199:
      if ((llvm::MachineInstr::isDereferenceableInvariantLoad((llvm::MachineInstr *)v39, v253) & 1) != 0)
      {
LABEL_200:
        v38 = 0;
        j = v255;
        goto LABEL_174;
      }
LABEL_262:
      v148 = *((_QWORD *)this + 263);
      if (v148)
        sub_1C527E8C8(v148, v64);
      *(_QWORD *)v298 = &v298[16];
      *(_QWORD *)&v298[8] = 0x400000000;
      v296 = 0x400000000;
      v294 = *((_QWORD *)this + 78);
      v295 = v297;
      v309 = v311;
      v310 = 0x200000000;
      v306 = (uint64_t *)v308;
      v307 = 0x200000000;
      v150 = (int *)(v39 + 48);
      v149 = *(_QWORD *)(v39 + 48);
      if (v149 < 8)
      {
        v151 = 0;
      }
      else
      {
        if ((v149 & 7) == 0)
        {
          *(_QWORD *)(v39 + 48) = v149 & 0xFFFFFFFFFFFFFFF8;
          v156 = v39 + 56;
          do
          {
LABEL_275:
            v158 = *(_QWORD *)v150;
            if ((*(_WORD *)(*(_QWORD *)v150 + 32) & 2) != 0)
            {
              v157 = v310;
              v159 = &v309;
              if (v310 >= (unint64_t)HIDWORD(v310))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v309, (uint64_t)v311, v310 + 1, 8);
                v157 = v310;
              }
            }
            else
            {
              v157 = v307;
              v159 = &v306;
              if (v307 >= (unint64_t)HIDWORD(v307))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, (uint64_t)v308, v307 + 1, 8);
                v157 = v307;
              }
            }
            (*v159)[v157] = v158;
            ++*((_DWORD *)v159 + 2);
            v150 += 2;
          }
          while (v150 != (int *)v156);
          v152 = v309;
          v151 = v310;
          goto LABEL_282;
        }
        v151 = 0;
        if ((*(_QWORD *)(v39 + 48) & 7) == 3)
        {
          v152 = v311;
          v153 = (int *)(v149 & 0xFFFFFFFFFFFFFFF8);
          if ((v149 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v155 = *v153;
            v150 = v153 + 2;
            v154 = v155;
            if ((_DWORD)v155)
            {
              v156 = (unint64_t)&v150[2 * v154];
              goto LABEL_275;
            }
            v151 = 0;
            v152 = v311;
          }
LABEL_282:
          v160 = sub_1C5282B00(&v294, v152, v151, (uint64_t)v298);
          if ((v160 & 1) == 0)
            *(_DWORD *)&v298[8] = 0;
          v161 = sub_1C5282B00(&v294, v306, v307, (uint64_t)&v295);
          if ((v161 & 1) == 0)
            LODWORD(v296) = 0;
          if (v306 != (uint64_t *)v308)
            free(v306);
          if (v309 != v311)
            free(v309);
          if ((v160 & 1) != 0)
          {
            v162 = *(_QWORD *)(v39 + 16);
            v163 = *(_WORD *)v162 - 1;
            if (v163 <= 1u && (*(_BYTE *)(*(_QWORD *)(v39 + 32) + 48) & 0x10) != 0)
            {
LABEL_295:
              if (*(_DWORD *)&v298[8])
              {
                v166 = *(uint64_t **)v298;
                v167 = 8 * *(unsigned int *)&v298[8];
                do
                {
                  v168 = *v166++;
                  v169 = v168 & 0xFFFFFFFFFFFFFFFCLL;
                  v170 = (v168 & 2) == 0;
                  if ((v168 & 2) != 0)
                    v171 = (int32x2_t *)&v289;
                  else
                    v171 = (int32x2_t *)&v277;
                  if (v170)
                    v172 = (int32x2_t *)&v270;
                  else
                    v172 = (int32x2_t *)&v282;
                  llvm::ScheduleDAGInstrs::addChainDependencies((uint64_t)this, v64, (uint64_t *)v171, v169);
                  llvm::ScheduleDAGInstrs::addChainDependencies((uint64_t)this, v64, (uint64_t *)v172, v169);
                  v167 -= 8;
                }
                while (v167);
              }
              llvm::ScheduleDAGInstrs::addChainDependencies((uint64_t)this, v64, (uint64_t *)&v282, *((_QWORD *)this + 264) & 0xFFFFFFFFFFFFFFFBLL);
              llvm::ScheduleDAGInstrs::addChainDependencies((uint64_t)this, v64, (uint64_t *)&v289, *((_QWORD *)this + 264) & 0xFFFFFFFFFFFFFFFBLL);
              v162 = *(_QWORD *)(v39 + 16);
              v163 = *(_WORD *)v162 - 1;
            }
            else
            {
              v164 = *(_WORD *)(v39 + 44);
              v165 = *(_QWORD *)(v162 + 8);
              if ((v164 & 0xC) != 0 && (v164 & 4) == 0)
              {
                v242 = v39;
                if ((v165 & 0x100000) != 0)
                  goto LABEL_295;
                while ((*(_WORD *)(v242 + 44) & 8) != 0)
                {
                  v242 = *(_QWORD *)(v242 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(v242 + 16) + 10) & 0x10) != 0)
                    goto LABEL_295;
                }
              }
              else if ((v165 & 0x100000) != 0)
              {
                goto LABEL_295;
              }
            }
            if (v163 <= 1u && (*(_BYTE *)(*(_QWORD *)(v39 + 32) + 48) & 8) != 0)
            {
LABEL_311:
              if ((llvm::MachineInstr::isDereferenceableInvariantLoad((llvm::MachineInstr *)v39, v253) & 1) == 0)
              {
                if ((v161 & 1) != 0)
                {
                  if ((_DWORD)v296)
                  {
                    v175 = (uint64_t *)v295;
                    v176 = 8 * v296;
                    do
                    {
                      v177 = *v175++;
                      v178 = (uint64_t *)(v177 & 0xFFFFFFFFFFFFFFFCLL);
                      v179 = (v177 & 2) == 0;
                      if ((v177 & 2) != 0)
                        v180 = (int32x2_t *)&v289;
                      else
                        v180 = (int32x2_t *)&v277;
                      if (v179)
                        v181 = (int32x2_t *)&v270;
                      else
                        v181 = (int32x2_t *)&v282;
                      llvm::ScheduleDAGInstrs::addChainDependencies((uint64_t)this, v64, (uint64_t *)v180, (uint64_t)v178);
                      v309 = v178;
                      v182 = (uint64_t *)sub_1C5282480((uint64_t)v181, (uint64_t *)&v309);
                      v183 = operator new(0x18uLL);
                      v183[1] = v182;
                      v183[2] = v64;
                      *v183 = 0;
                      v184 = *v182;
                      *v183 = *v182;
                      *(_QWORD *)(v184 + 8) = v183;
                      *v182 = (uint64_t)v183;
                      ++v182[2];
                      ++v181[6].i32[0];
                      v176 -= 8;
                    }
                    while (v176);
                  }
                  llvm::ScheduleDAGInstrs::addChainDependencies((uint64_t)this, v64, (uint64_t *)&v289, *((_QWORD *)this + 264) & 0xFFFFFFFFFFFFFFFBLL);
                }
                else
                {
                  v249 = *((_QWORD *)&v292 + 1);
                  v204 = v292;
                  if ((_QWORD)v292 != *((_QWORD *)&v292 + 1))
                  {
                    v205 = HIDWORD(v293);
                    do
                    {
                      v206 = v204 + 8;
                      v262 = v204;
                      for (nn = *(_QWORD *)(v204 + 16); nn != v206; nn = *(_QWORD *)(nn + 8))
                      {
                        v208 = *(_QWORD *)(nn + 16);
                        if (llvm::MachineInstr::mayAlias(*(llvm::MachineInstr **)(v64 + 8), *((llvm::AAResults **)this + 262), *(const llvm::MachineInstr **)(v208 + 8), byte_1ED7FF9B0))
                        {
                          v309 = (uint64_t *)(v64 | 6);
                          LODWORD(v310) = 1;
                          HIDWORD(v310) = v205;
                          llvm::SUnit::addPred(v208, (const llvm::SDep *)&v309, 1);
                        }
                      }
                      v204 = v262 + 32;
                    }
                    while (v262 + 32 != v249);
                  }
                  v250 = *((_QWORD *)&v280 + 1);
                  v209 = v280;
                  if ((_QWORD)v280 != *((_QWORD *)&v280 + 1))
                  {
                    v210 = HIDWORD(v281);
                    do
                    {
                      v211 = v209 + 8;
                      v263 = v209;
                      for (i1 = *(_QWORD *)(v209 + 16); i1 != v211; i1 = *(_QWORD *)(i1 + 8))
                      {
                        v213 = *(_QWORD *)(i1 + 16);
                        if (llvm::MachineInstr::mayAlias(*(llvm::MachineInstr **)(v64 + 8), *((llvm::AAResults **)this + 262), *(const llvm::MachineInstr **)(v213 + 8), byte_1ED7FF9B0))
                        {
                          v309 = (uint64_t *)(v64 | 6);
                          LODWORD(v310) = 1;
                          HIDWORD(v310) = v210;
                          llvm::SUnit::addPred(v213, (const llvm::SDep *)&v309, 1);
                        }
                      }
                      v209 = v263 + 32;
                    }
                    while (v263 + 32 != v250);
                  }
                  v309 = (uint64_t *)(*((_QWORD *)this + 264) & 0xFFFFFFFFFFFFFFFBLL);
                  v214 = (uint64_t *)sub_1C5282480((uint64_t)&v282, (uint64_t *)&v309);
                  v215 = operator new(0x18uLL);
                  v215[1] = v214;
                  v215[2] = v64;
                  *v215 = 0;
                  v216 = *v214;
                  *v215 = *v214;
                  *(_QWORD *)(v216 + 8) = v215;
                  *v214 = (uint64_t)v215;
                  ++v214[2];
                  LODWORD(v288) = v288 + 1;
                }
              }
            }
            else
            {
              v173 = *(_QWORD *)(v162 + 8);
              if ((*(_WORD *)(v39 + 44) & 0xC) != 0 && (*(_WORD *)(v39 + 44) & 4) == 0)
              {
                v240 = v39;
                if ((v173 & 0x80000) != 0)
                  goto LABEL_311;
                while ((*(_WORD *)(v240 + 44) & 8) != 0)
                {
                  v240 = *(_QWORD *)(v240 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(v240 + 16) + 10) & 8) != 0)
                    goto LABEL_311;
                }
              }
              else if ((v173 & 0x80000) != 0)
              {
                goto LABEL_311;
              }
            }
            v217 = *(unsigned __int16 **)(v39 + 16);
            if (*v217 - 1 <= 1 && (*(_BYTE *)(*(_QWORD *)(v39 + 32) + 48) & 0x10) != 0)
            {
LABEL_379:
              if (*(_DWORD *)&v298[8])
              {
                v220 = *(uint64_t **)v298;
                v221 = 8 * *(unsigned int *)&v298[8];
                do
                {
                  v222 = *v220++;
                  v223 = (uint64_t *)(v222 & 0xFFFFFFFFFFFFFFFCLL);
                  if ((v222 & 2) != 0)
                    v224 = (int32x2_t *)&v289;
                  else
                    v224 = (int32x2_t *)&v277;
                  v309 = v223;
                  v225 = (uint64_t *)sub_1C5282480((uint64_t)v224, (uint64_t *)&v309);
                  v226 = operator new(0x18uLL);
                  v226[1] = v225;
                  v226[2] = v64;
                  *v226 = 0;
                  v227 = *v225;
                  *v226 = *v225;
                  *(_QWORD *)(v227 + 8) = v226;
                  *v225 = (uint64_t)v226;
                  ++v225[2];
                  ++v224[6].i32[0];
                  v221 -= 8;
                }
                while (v221);
              }
            }
            else
            {
              v218 = *((_QWORD *)v217 + 1);
              if ((*(_WORD *)(v39 + 44) & 0xC) != 0 && (*(_WORD *)(v39 + 44) & 4) == 0)
              {
                if ((v218 & 0x100000) != 0)
                  goto LABEL_379;
                while ((*(_WORD *)(v39 + 44) & 8) != 0)
                {
                  v39 = *(_QWORD *)(v39 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(v39 + 16) + 10) & 0x10) != 0)
                    goto LABEL_379;
                }
              }
              else if ((v218 & 0x100000) != 0)
              {
                goto LABEL_379;
              }
            }
          }
          else
          {
            v258 = *((_QWORD *)&v292 + 1);
            v185 = v292;
            if ((_QWORD)v292 != *((_QWORD *)&v292 + 1))
            {
              v186 = HIDWORD(v293);
              do
              {
                for (i2 = *(_QWORD *)(v185 + 16); i2 != v185 + 8; i2 = *(_QWORD *)(i2 + 8))
                {
                  v188 = *(_QWORD *)(i2 + 16);
                  if (llvm::MachineInstr::mayAlias(*(llvm::MachineInstr **)(v64 + 8), *((llvm::AAResults **)this + 262), *(const llvm::MachineInstr **)(v188 + 8), byte_1ED7FF9B0))
                  {
                    v309 = (uint64_t *)(v64 | 6);
                    LODWORD(v310) = 1;
                    HIDWORD(v310) = v186;
                    llvm::SUnit::addPred(v188, (const llvm::SDep *)&v309, 1);
                  }
                }
                v185 += 32;
              }
              while (v185 != v258);
            }
            v259 = *((_QWORD *)&v280 + 1);
            v189 = v280;
            if ((_QWORD)v280 != *((_QWORD *)&v280 + 1))
            {
              v190 = HIDWORD(v281);
              do
              {
                for (i3 = *(_QWORD *)(v189 + 16); i3 != v189 + 8; i3 = *(_QWORD *)(i3 + 8))
                {
                  v192 = *(_QWORD *)(i3 + 16);
                  if (llvm::MachineInstr::mayAlias(*(llvm::MachineInstr **)(v64 + 8), *((llvm::AAResults **)this + 262), *(const llvm::MachineInstr **)(v192 + 8), byte_1ED7FF9B0))
                  {
                    v309 = (uint64_t *)(v64 | 6);
                    LODWORD(v310) = 1;
                    HIDWORD(v310) = v190;
                    llvm::SUnit::addPred(v192, (const llvm::SDep *)&v309, 1);
                  }
                }
                v189 += 32;
              }
              while (v189 != v259);
            }
            v193 = v285;
            v260 = v286;
            if (v285 != v286)
            {
              v194 = HIDWORD(v288);
              do
              {
                for (i4 = (_QWORD *)v193[2]; i4 != v193 + 1; i4 = (_QWORD *)i4[1])
                {
                  v196 = i4[2];
                  if (llvm::MachineInstr::mayAlias(*(llvm::MachineInstr **)(v64 + 8), *((llvm::AAResults **)this + 262), *(const llvm::MachineInstr **)(v196 + 8), byte_1ED7FF9B0))
                  {
                    v309 = (uint64_t *)(v64 | 6);
                    LODWORD(v310) = 1;
                    HIDWORD(v310) = v194;
                    llvm::SUnit::addPred(v196, (const llvm::SDep *)&v309, 1);
                  }
                }
                v193 += 4;
              }
              while (v193 != v260);
            }
            v197 = v273;
            v261 = v274;
            if (v273 != v274)
            {
              v198 = HIDWORD(v276);
              do
              {
                for (i5 = (_QWORD *)v197[2]; i5 != v197 + 1; i5 = (_QWORD *)i5[1])
                {
                  v200 = i5[2];
                  if (llvm::MachineInstr::mayAlias(*(llvm::MachineInstr **)(v64 + 8), *((llvm::AAResults **)this + 262), *(const llvm::MachineInstr **)(v200 + 8), byte_1ED7FF9B0))
                  {
                    v309 = (uint64_t *)(v64 | 6);
                    LODWORD(v310) = 1;
                    HIDWORD(v310) = v198;
                    llvm::SUnit::addPred(v200, (const llvm::SDep *)&v309, 1);
                  }
                }
                v197 += 4;
              }
              while (v197 != v261);
            }
            v309 = (uint64_t *)(*((_QWORD *)this + 264) & 0xFFFFFFFFFFFFFFFBLL);
            v201 = (uint64_t *)sub_1C5282480((uint64_t)&v289, (uint64_t *)&v309);
            v202 = operator new(0x18uLL);
            v202[1] = v201;
            v202[2] = v64;
            *v202 = 0;
            v203 = *v201;
            *v202 = *v201;
            *(_QWORD *)(v203 + 8) = v202;
            *v201 = (uint64_t)v202;
            ++v201[2];
            ++DWORD2(v293);
          }
          v228 = dword_1ED7FFA70;
          if ((int)v288 + DWORD2(v293) >= dword_1ED7FFA70)
          {
            if (word_1ED7FFAB8)
              v229 = dword_1ED7FFB30;
            else
              v229 = dword_1ED7FFA70 >> 1;
            llvm::ScheduleDAGInstrs::reduceHugeMemNodeMaps(this, (int32x2_t *)&v289, (int32x2_t *)&v282, v229);
            v228 = dword_1ED7FFA70;
          }
          j = v255;
          if ((int)v276 + DWORD2(v281) >= v228)
          {
            v230 = v228 >> 1;
            if (word_1ED7FFAB8)
              v231 = dword_1ED7FFB30;
            else
              v231 = v230;
            llvm::ScheduleDAGInstrs::reduceHugeMemNodeMaps(this, (int32x2_t *)&v277, (int32x2_t *)&v270, v231);
          }
          if (v295 != v297)
            free(v295);
          if (*(_BYTE **)v298 != &v298[16])
            free(*(void **)v298);
          v38 = 0;
          goto LABEL_174;
        }
      }
      v152 = v311;
      goto LABEL_282;
    }
    v239 = v39;
    if ((v132 & 0x80000) != 0)
      goto LABEL_199;
    while ((*(_WORD *)(v239 + 44) & 8) != 0)
    {
      v239 = *(_QWORD *)(v239 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v239 + 16) + 10) & 8) != 0)
        goto LABEL_199;
    }
    v38 = 0;
    j = v255;
LABEL_174:
    v36 = *(_QWORD *)v36 & 0xFFFFFFFFFFFFFFF8;
    if (!v36 || (*(_BYTE *)v36 & 4) == 0)
    {
      while ((*(_WORD *)(v36 + 44) & 4) != 0)
        v36 = *(_QWORD *)v36 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  while (v36 != j);
  if (v38)
    *((_QWORD *)this + 320) = v38;
LABEL_456:
  *((_DWORD *)this + 246) = 0;
  *((_QWORD *)this + 150) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 304) = 0;
  *((_QWORD *)this + 179) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 362) = 0;
  *((_QWORD *)this + 216) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 436) = 0;
  *((_QWORD *)this + 261) = 0xFFFFFFFFLL;
  *((_BYTE *)this + 2136) = 1;
  if (v268[0])
  {
    sub_1C52823F0(v268, (uint64_t)v268[0]);
    operator delete(v268[0]);
  }
  MEMORY[0x1CAA32FB4](v265, 8);
  if (v273)
  {
    sub_1C52823F0(&v273, (uint64_t)v273);
    operator delete(v273);
  }
  MEMORY[0x1CAA32FB4](v270, 8);
  if ((_QWORD)v280)
  {
    sub_1C52823F0(&v280, v280);
    operator delete((void *)v280);
  }
  MEMORY[0x1CAA32FB4](v277, 8);
  if (v285)
  {
    sub_1C52823F0(&v285, (uint64_t)v285);
    operator delete(v285);
  }
  MEMORY[0x1CAA32FB4](v282, 8);
  if ((_QWORD)v292)
  {
    sub_1C52823F0(&v292, v292);
    operator delete((void *)v292);
  }
  return MEMORY[0x1CAA32FB4](v289, 8);
}

uint64_t llvm::operator<<(uint64_t a1, void (***a2)(_QWORD, uint64_t))
{
  (**a2)(a2, a1);
  return a1;
}

llvm *llvm::ScheduleDAGInstrs::Value2SUsMap::dump(llvm *this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;
  llvm::Value *v4;
  unsigned int v5;
  llvm::raw_ostream *v6;
  _DWORD *v7;
  llvm *v8;
  llvm *v9;
  uint64_t v10;
  llvm *v11;
  _WORD *v12;
  _QWORD *v13;
  _QWORD *j;
  uint64_t v15;
  llvm *v16;
  llvm *v17;
  uint64_t v18;
  _BYTE *v19;
  _WORD *v20;
  _WORD *v21;

  v1 = (uint64_t *)*((_QWORD *)this + 3);
  for (i = (uint64_t *)*((_QWORD *)this + 4); v1 != i; v1 += 4)
  {
    v3 = *v1;
    if ((*v1 & 4) != 0)
    {
      v8 = llvm::dbgs(this);
      v6 = (llvm::raw_ostream *)(**(uint64_t (***)(unint64_t, llvm *))(*v1 & 0xFFFFFFFFFFFFFFF8))(*v1 & 0xFFFFFFFFFFFFFFF8, v8);
    }
    else
    {
      v4 = (llvm::Value *)(v3 & 0xFFFFFFFFFFFFFFF8);
      v5 = *(unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFF8) + 16) - 11;
      v6 = llvm::dbgs(this);
      if (v5 > 1)
      {
        v6 = (llvm::raw_ostream *)llvm::Value::printAsOperand(v4, v6, 1, 0);
      }
      else
      {
        v7 = (_DWORD *)*((_QWORD *)v6 + 4);
        if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 6uLL)
        {
          *(_DWORD *)((char *)v7 + 3) = 1853321070;
          *v7 = 1852534357;
          *((_QWORD *)v6 + 4) += 7;
        }
        else
        {
          v6 = llvm::raw_ostream::write(v6, "Unknown", 7uLL);
        }
      }
    }
    v9 = llvm::dbgs(v6);
    v10 = *((_QWORD *)v9 + 4);
    if ((unint64_t)(*((_QWORD *)v9 + 3) - v10) > 2)
    {
      *(_BYTE *)(v10 + 2) = 32;
      *(_WORD *)v10 = 14880;
      *((_QWORD *)v9 + 4) += 3;
    }
    else
    {
      v9 = llvm::raw_ostream::write(v9, " : ", 3uLL);
    }
    v11 = llvm::dbgs(v9);
    v12 = (_WORD *)*((_QWORD *)v11 + 4);
    if (*((_QWORD *)v11 + 3) - (_QWORD)v12 > 1uLL)
    {
      *v12 = 8315;
      *((_QWORD *)v11 + 4) += 2;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, "{ ", 2uLL);
    }
    v13 = v1 + 1;
    for (j = (_QWORD *)v1[2]; j != v13; j = (_QWORD *)j[1])
    {
      v15 = j[2];
      v16 = llvm::dbgs(v11);
      v17 = v16;
      v18 = *((_QWORD *)v16 + 4);
      if ((unint64_t)(*((_QWORD *)v16 + 3) - v18) > 2)
      {
        *(_BYTE *)(v18 + 2) = 40;
        *(_WORD *)v18 = 21843;
        *((_QWORD *)v16 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v16, "SU(", 3uLL);
      }
      v11 = sub_1C5E21910(v17, *(unsigned int *)(v15 + 192), 0, 0, 0);
      v19 = (_BYTE *)*((_QWORD *)v17 + 4);
      if (*((_BYTE **)v17 + 3) == v19)
      {
        v11 = llvm::raw_ostream::write(v17, ")", 1uLL);
      }
      else
      {
        *v19 = 41;
        ++*((_QWORD *)v17 + 4);
      }
      if (v15 != *(_QWORD *)(*v13 + 16))
      {
        v11 = llvm::dbgs(v11);
        v20 = (_WORD *)*((_QWORD *)v11 + 4);
        if (*((_QWORD *)v11 + 3) - (_QWORD)v20 > 1uLL)
        {
          *v20 = 8236;
          *((_QWORD *)v11 + 4) += 2;
        }
        else
        {
          v11 = llvm::raw_ostream::write(v11, ", ", 2uLL);
        }
      }
    }
    this = llvm::dbgs(v11);
    v21 = (_WORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 2685;
      *((_QWORD *)this + 4) += 2;
    }
    else
    {
      this = llvm::raw_ostream::write(this, "}\n", 2uLL);
    }
  }
  return this;
}

uint64_t llvm::ScheduleDAGInstrs::fixupKills(llvm::ScheduleDAGInstrs *this, const llvm::MachineFunction **a2)
{
  llvm::LivePhysRegs *v4;
  uint64_t v5;
  uint64_t result;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  __int16 v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t i;
  int v22;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v4 = (llvm::ScheduleDAGInstrs *)((char *)this + 2568);
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 321) = v5;
  *((_QWORD *)this + 323) = 0;
  sub_1C61D8D14((char *)this + 2576, *(_DWORD *)(v5 + 16));
  result = llvm::LivePhysRegs::addLiveOuts(v4, a2);
  v8 = (unint64_t)a2[6];
  v7 = (char *)(a2 + 6);
  v9 = v8 & 0xFFFFFFFFFFFFFFF8;
  if ((v8 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v9 & 4) == 0)
  {
    while ((*(_WORD *)(v9 + 44) & 4) != 0)
      v9 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
  }
  while ((char *)v9 != v7)
  {
    v10 = **(unsigned __int16 **)(v9 + 16);
    if ((v10 - 13) >= 5 && v10 != 23)
    {
      v12 = *(_WORD *)(v9 + 44);
      v13 = v9;
      if ((v12 & 4) != 0)
      {
        v13 = v9;
        do
          v13 = *(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v13 + 44) & 4) != 0);
      }
      v14 = *(_QWORD *)(v9 + 24) + 48;
      v15 = *(_DWORD **)(v13 + 32);
      v16 = *(unsigned int *)(v13 + 40);
      v17 = &v15[8 * v16];
      if (!(_DWORD)v16)
      {
        v24 = *(_QWORD *)(v13 + 8);
        if (v24 == v14)
        {
          v13 = *(_QWORD *)(v9 + 24) + 48;
        }
        else
        {
          v13 = *(_QWORD *)(v9 + 24) + 48;
          if ((*(_WORD *)(v24 + 44) & 4) != 0)
          {
            while (1)
            {
              v25 = v24;
              v26 = *(unsigned int *)(v24 + 40);
              if ((_DWORD)v26)
                break;
              v24 = *(_QWORD *)(v24 + 8);
              if (v24 == v14 || (*(_WORD *)(v24 + 44) & 4) == 0)
              {
                v13 = *(_QWORD *)(v9 + 24) + 48;
                goto LABEL_63;
              }
            }
            v13 = v24;
LABEL_63:
            v15 = *(_DWORD **)(v25 + 32);
            v17 = &v15[8 * v26];
          }
        }
      }
      if (v15 != v17)
      {
        do
        {
          if (*v15 == 12)
          {
            result = (uint64_t)llvm::LivePhysRegs::removeRegsInMask(v4, (unint64_t)v15, 0);
          }
          else if (!*v15 && (*v15 & 0x1000000) != 0 && v15[1])
          {
            result = sub_1C61E2FF4((uint64_t *)v4, (unsigned __int16)v15[1]);
          }
          v15 += 8;
          if (v15 == v17)
          {
            v18 = *(_QWORD *)(v13 + 8);
            if (v18 == v14)
              break;
            v15 = v17;
            v13 = v14;
            if ((*(_WORD *)(v18 + 44) & 4) != 0)
            {
              while (1)
              {
                v19 = v18;
                v20 = *(unsigned int *)(v18 + 40);
                if ((_DWORD)v20)
                  break;
                v18 = *(_QWORD *)(v18 + 8);
                if (v18 == v14 || (*(_WORD *)(v18 + 44) & 4) == 0)
                {
                  v13 = v14;
                  goto LABEL_35;
                }
              }
              v13 = v18;
LABEL_35:
              v15 = *(_DWORD **)(v19 + 32);
              v17 = &v15[8 * v20];
            }
          }
        }
        while (v15 != v17);
        v12 = *(_WORD *)(v9 + 44);
      }
      if ((v12 & 0xC) != 0)
      {
        if (**(_WORD **)(v9 + 16) == 20)
          result = (uint64_t)sub_1C5280F00(*((const llvm::MachineRegisterInfo **)this + 5), v4, *(unsigned int **)(v9 + 32), *(_DWORD *)(v9 + 40), 0);
        for (i = *(_QWORD *)(v9 + 8); (*(_WORD *)(i + 44) & 8) != 0; i = *(_QWORD *)(i + 8))
          ;
        do
        {
          v22 = **(unsigned __int16 **)(i + 16);
          if ((v22 - 13) >= 5 && v22 != 23)
            result = (uint64_t)sub_1C5280F00(*((const llvm::MachineRegisterInfo **)this + 5), v4, *(unsigned int **)(i + 32), *(_DWORD *)(i + 40), 1);
          i = *(_QWORD *)i & 0xFFFFFFFFFFFFFFF8;
        }
        while (v9 != i);
      }
      else
      {
        result = (uint64_t)sub_1C5280F00(*((const llvm::MachineRegisterInfo **)this + 5), v4, *(unsigned int **)(v9 + 32), *(_DWORD *)(v9 + 40), 1);
      }
    }
    v9 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
    if (!v9 || (*(_BYTE *)v9 & 4) == 0)
    {
      while ((*(_WORD *)(v9 + 44) & 4) != 0)
        v9 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  return result;
}

const llvm::MachineRegisterInfo *sub_1C5280F00(const llvm::MachineRegisterInfo *result, llvm::LivePhysRegs *this, unsigned int *a3, unsigned int a4, int a5)
{
  const llvm::MachineRegisterInfo *v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  int v12;

  if (a4)
  {
    v8 = result;
    v9 = 32 * a4;
    do
    {
      v10 = (*a3 & 0x300000FF) != 0 || (*a3 & 0x10FFF00) == 0x1000000;
      if (!v10 && a3[1])
      {
        v11 = (unsigned __int16)a3[1];
        result = (const llvm::MachineRegisterInfo *)llvm::LivePhysRegs::available(this, v8, v11);
        if ((_DWORD)result)
          v12 = 0x4000000;
        else
          v12 = 0;
        *a3 = *a3 & 0xFBFFFFFF | v12;
        if (a5)
          result = (const llvm::MachineRegisterInfo *)sub_1C61E308C((uint64_t *)this, v11);
      }
      a3 += 8;
      v9 -= 32;
    }
    while (v9);
  }
  return result;
}

void llvm::ScheduleDAGInstrs::getGraphNodeLabel(llvm::ScheduleDAGInstrs *this@<X0>, llvm::MachineInstr **a2@<X1>, uint64_t a3@<X8>)
{
  const char *v4;
  size_t v5;
  __int128 v6;
  void (**v7)(llvm::raw_ostream *__hidden);
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  void **v15;
  void *v16[2];
  uint64_t v17;

  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v8 = 0;
  v12 = 0;
  v13 = 0;
  v7 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v15 = v16;
  v14 = 0;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  if ((llvm::MachineInstr **)((char *)this + 72) == a2)
  {
    v4 = "<entry>";
    v5 = 7;
    goto LABEL_5;
  }
  if ((llvm::MachineInstr **)((char *)this + 344) == a2)
  {
    v4 = "<exit>";
    v5 = 6;
LABEL_5:
    llvm::raw_ostream::write((llvm::raw_ostream *)&v7, v4, v5);
    goto LABEL_6;
  }
  llvm::MachineInstr::print(a2[1], (llvm::raw_ostream *)&v7, 1, 0, 0, 1, 0);
LABEL_6:
  if (*((char *)v15 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a3, *v15, (unint64_t)v15[1]);
  }
  else
  {
    v6 = *(_OWORD *)v15;
    *(_QWORD *)(a3 + 16) = v15[2];
    *(_OWORD *)a3 = v6;
  }
  v7 = off_1E81A6E70;
  if (v14 == 1 && v9)
    MEMORY[0x1CAA32F9C](v9, 0x1000C8077774924);
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);
}

void llvm::ScheduleDAGInstrs::getDAGName(llvm::MachineBasicBlock **this@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  std::string v4;

  llvm::MachineBasicBlock::getFullName(this[115], &v4);
  v3 = std::string::insert(&v4, 0, "dag.");
  *a2 = *v3;
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void llvm::SchedDFSResult::compute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  int v19;
  int v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  unsigned __int16 *v37;
  int v38;
  int v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t *v55;
  unint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  _BYTE *v66;
  uint64_t v67;
  _DWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  _QWORD *v79;
  char *v80;
  _DWORD *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int *v110;
  uint64_t v111;
  _DWORD *v112;
  int v113;
  llvm::SUnit **v114;
  llvm::SUnit **v115;
  llvm::SUnit *v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  _BYTE v132[32];
  unsigned int v133;
  void *__p;
  char *v135;
  char *v136;
  void *v137;
  uint64_t v138;
  _BYTE v139[96];
  void *v140;
  int v141;
  uint64_t v142;

  v5 = 0;
  v142 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
  v7 = v6 >> 3;
  v129 = a1;
  v130 = v132;
  v131 = 0x800000000;
  v133 = 0;
  if ((v6 >> 3) >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, (uint64_t)v132, (v6 >> 3), 4);
    v5 = v131;
  }
  while (v5 < v7)
  {
    v8 = v5;
    if (v5 >= HIDWORD(v131))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, (uint64_t)v132, v5 + 1, 4);
      v8 = v131;
    }
    *((_DWORD *)v130 + v8) = v5;
    v5 = v131 + 1;
    LODWORD(v131) = v131 + 1;
  }
  __p = 0;
  v135 = 0;
  v136 = 0;
  v137 = v139;
  v138 = 0x800000000;
  v140 = 0;
  v141 = 0;
  v9 = *(_QWORD *)(v129 + 16) - *(_QWORD *)(v129 + 8);
  v10 = v9 >> 3;
  if ((v9 >> 3))
  {
    v11 = malloc_type_calloc((v9 >> 3), 1uLL, 0x6D9A4F0CuLL);
    if (!v11)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v140 = v11;
    v141 = v10;
  }
  if (a3)
  {
    v12 = a2 + 272 * a3;
    v127 = v12;
    do
    {
      v13 = *(unsigned int *)(a2 + 192);
      v14 = *(_QWORD *)(v129 + 8);
      if (*(_DWORD *)(v14 + 8 * v13 + 4) == -1)
      {
        v15 = *(unsigned int *)(a2 + 120);
        if ((_DWORD)v15)
        {
          v16 = *(_QWORD **)(a2 + 112);
          v17 = 16 * v15;
          while ((*v16 & 6) != 0 || *(_DWORD *)((*v16 & 0xFFFFFFFFFFFFFFF8) + 192) == -1)
          {
            v16 += 2;
            v17 -= 16;
            if (!v17)
              goto LABEL_18;
          }
        }
        else
        {
LABEL_18:
          v18 = *(unsigned __int16 **)(*(_QWORD *)(a2 + 8) + 16);
          v19 = *v18;
          if ((v19 - 9) <= 0x3C && ((1 << (v19 - 9)) & 0x1000000000000605) != 0
            || v19 == 0)
          {
            v22 = 1;
          }
          else
          {
            v22 = (*((unsigned __int8 *)v18 + 8) >> 4) & 1;
          }
          *(_DWORD *)(v14 + 8 * v13) = v22 ^ 1;
          v23 = *(_QWORD *)(a2 + 32);
          v24 = (char *)operator new(0x10uLL);
          v25 = v24 + 16;
          v128 = a2;
          *(_QWORD *)v24 = a2;
          *((_QWORD *)v24 + 1) = v23;
          v26 = (unint64_t *)(v24 + 16);
          while (1)
          {
            v28 = *(v26 - 2);
            v27 = (uint64_t *)*(v26 - 1);
            v29 = *(_QWORD *)(v28 + 32) + 16 * *(unsigned int *)(v28 + 40);
            v30 = v26;
            while (v27 != (uint64_t *)v29)
            {
              v31 = *v27;
              *(v30 - 1) = (unint64_t)(v27 + 2);
              if ((v31 & 6) == 0)
              {
                v32 = v31 & 0xFFFFFFFFFFFFFFF8;
                v33 = *(unsigned int *)((v31 & 0xFFFFFFFFFFFFFFF8) + 192);
                if ((_DWORD)v33 != -1)
                {
                  v34 = *(_QWORD *)(v129 + 8);
                  if (*(_DWORD *)(v34 + 8 * v33 + 4) == -1)
                  {
                    v37 = *(unsigned __int16 **)(*(_QWORD *)(v32 + 8) + 16);
                    v38 = *v37;
                    if ((v38 - 9) <= 0x3C
                      && ((1 << (v38 - 9)) & 0x1000000000000605) != 0
                      || v38 == 0)
                    {
                      v41 = 1;
                    }
                    else
                    {
                      v41 = (*((unsigned __int8 *)v37 + 8) >> 4) & 1;
                    }
                    *(_DWORD *)(v34 + 8 * v33) = v41 ^ 1;
                    v42 = *(_QWORD *)(v32 + 32);
                    if (v30 >= (unint64_t *)v25)
                    {
                      v49 = ((char *)v30 - v24) >> 4;
                      v50 = v49 + 1;
                      if ((unint64_t)(v49 + 1) >> 60)
LABEL_152:
                        abort();
                      if ((v25 - v24) >> 3 > v50)
                        v50 = (v25 - v24) >> 3;
                      if ((unint64_t)(v25 - v24) >= 0x7FFFFFFFFFFFFFF0)
                        v51 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v51 = v50;
                      if (v51)
                      {
                        if (v51 >> 60)
                          goto LABEL_153;
                        v52 = (char *)operator new(16 * v51);
                      }
                      else
                      {
                        v52 = 0;
                      }
                      v55 = (unint64_t *)&v52[16 * v49];
                      v25 = &v52[16 * v51];
                      *v55 = v32;
                      v55[1] = v42;
                      v56 = v55 + 2;
                      if (v30 == (unint64_t *)v24)
                        goto LABEL_74;
                      do
                      {
                        *((_OWORD *)v55 - 1) = *((_OWORD *)v30 - 1);
                        v55 -= 2;
                        v30 -= 2;
                      }
                      while (v30 != (unint64_t *)v24);
                      if (v24)
LABEL_74:
                        operator delete(v24);
                      v30 = v56;
                      v24 = (char *)v55;
                    }
                    else
                    {
                      *v30 = v32;
                      v30[1] = v42;
                      v30 += 2;
                    }
                  }
                  else
                  {
                    v35 = v135;
                    if (v135 >= v136)
                    {
                      v43 = __p;
                      v44 = (v135 - (_BYTE *)__p) >> 4;
                      v45 = v44 + 1;
                      if ((unint64_t)(v44 + 1) >> 60)
                        goto LABEL_152;
                      v46 = v136 - (_BYTE *)__p;
                      if ((v136 - (_BYTE *)__p) >> 3 > v45)
                        v45 = v46 >> 3;
                      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
                        v47 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v47 = v45;
                      if (v47)
                      {
                        if (v47 >> 60)
                          goto LABEL_153;
                        v48 = (char *)operator new(16 * v47);
                      }
                      else
                      {
                        v48 = 0;
                      }
                      v53 = (unint64_t *)&v48[16 * v44];
                      *v53 = v32;
                      v53[1] = v28;
                      v54 = v53;
                      if (v35 != v43)
                      {
                        do
                        {
                          *((_OWORD *)v54 - 1) = *((_OWORD *)v35 - 1);
                          v54 -= 2;
                          v35 -= 2;
                        }
                        while (v35 != v43);
                        v35 = __p;
                      }
                      v36 = (char *)(v53 + 2);
                      __p = v54;
                      v135 = (char *)(v53 + 2);
                      v136 = &v48[16 * v47];
                      if (v35)
                        operator delete(v35);
                    }
                    else
                    {
                      *(_QWORD *)v135 = v32;
                      v35[1] = v28;
                      v36 = (char *)(v35 + 2);
                    }
                    v135 = v36;
                  }
                }
              }
              v28 = *(v30 - 2);
              v27 = (uint64_t *)*(v30 - 1);
              v29 = *(_QWORD *)(v28 + 32) + 16 * *(unsigned int *)(v28 + 40);
            }
            v26 = v30 - 2;
            if (v24 == (char *)(v30 - 2))
              break;
            v57 = *(v30 - 3);
            sub_1C5281B28((unsigned int *)&v129, v28);
            v58 = v129;
            v59 = *(_QWORD *)(v57 - 16) & 0xFFFFFFFFFFFFFFF8;
            v60 = *(unsigned int *)(v59 + 192);
            v61 = *(_QWORD *)(v129 + 8);
            v62 = (_DWORD *)(v61 + 8 * v60);
            v63 = *(unsigned int *)(*(v30 - 4) + 192);
            *(_DWORD *)(v61 + 8 * v63) += *v62;
            if (v62[1] == v60)
            {
              v64 = *(unsigned int *)(v59 + 120);
              if ((_DWORD)v64)
              {
                v65 = 0;
                v66 = *(_BYTE **)(v59 + 112);
                v67 = 16 * v64;
                while ((*v66 & 6) != 0 || ++v65 <= 3)
                {
                  v66 += 16;
                  v67 -= 16;
                  if (!v67)
                    goto LABEL_84;
                }
              }
              else
              {
LABEL_84:
                if (*v62 <= *(_DWORD *)(v58 + 4))
                {
                  v62[1] = v63;
                  v68 = v130;
                  v69 = *((unsigned int *)v130 + v63);
                  v70 = *((unsigned int *)v130 + v60);
                  while (v69 != v70)
                  {
                    if (v69 < v70)
                    {
                      v68[v60] = v69;
                      v60 = v70;
                      v70 = v68[v70];
                    }
                    else
                    {
                      v68[v63] = v70;
                      v63 = v69;
                      v69 = v68[v69];
                    }
                  }
                }
              }
            }
          }
          sub_1C5281B28((unsigned int *)&v129, v28);
          v12 = v127;
          a2 = v128;
          if (v24)
            operator delete(v24);
        }
      }
      a2 += 272;
    }
    while (a2 != v12);
  }
  v71 = v133;
  if (!v133)
  {
    v72 = v131;
    if ((_DWORD)v131)
    {
      v73 = 0;
      v74 = v130;
      do
      {
        v75 = v74[v73];
        if (v73 == v75)
          v76 = v133++;
        else
          v76 = v74[v75];
        v74[v73++] = v76;
      }
      while (v72 != v73);
      v71 = v133;
    }
    else
    {
      v71 = 0;
    }
  }
  v77 = v129;
  v78 = *(_DWORD *)(v129 + 40);
  if (v78 != v71)
  {
    if (v78 <= v71)
    {
      v79 = (_QWORD *)(v129 + 32);
      if (*(_DWORD *)(v129 + 44) < v71)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v129 + 32, v129 + 48, v71, 8);
        v78 = *(_DWORD *)(v77 + 40);
      }
      if (v78 != v71)
        memset_pattern16((void *)(*v79 + 8 * v78), &unk_1C85FB530, 8 * (v71 - (unint64_t)v78));
    }
    *(_DWORD *)(v77 + 40) = v71;
    v77 = v129;
  }
  if ((_DWORD)v138)
  {
    v80 = (char *)v137;
    v81 = v130;
    v82 = (char *)v137 + 12 * v138;
    v83 = *(_QWORD *)(v77 + 32);
    do
    {
      v84 = *((unsigned int *)v80 + 1);
      v85 = v81[*(unsigned int *)v80];
      if ((_DWORD)v84 != -1)
        *(_DWORD *)(v83 + 8 * v85) = v81[v84];
      *(_DWORD *)(v83 + 8 * v85 + 4) = *((_DWORD *)v80 + 2);
      v80 += 12;
    }
    while (v80 != v82);
  }
  v86 = v133;
  v88 = *(char **)(v77 + 176);
  v87 = *(char **)(v77 + 184);
  v89 = 0xAAAAAAAAAAAAAAABLL * ((v87 - v88) >> 4);
  v90 = v133 - v89;
  if (v133 <= v89)
  {
    if (v133 < v89)
    {
      v120 = &v88[48 * v133];
      while (v87 != v120)
      {
        v122 = (char *)*((_QWORD *)v87 - 6);
        v87 -= 48;
        v121 = v122;
        if (v87 + 16 != v122)
          free(v121);
      }
      *(_QWORD *)(v77 + 184) = v120;
    }
  }
  else
  {
    v91 = *(_QWORD *)(v77 + 192);
    if (0xAAAAAAAAAAAAAAABLL * ((v91 - (uint64_t)v87) >> 4) >= v90)
    {
      v102 = &v87[48 * v90];
      v103 = 48 * v133 - 16 * ((v87 - v88) >> 4);
      v104 = v87 + 16;
      do
      {
        *((_QWORD *)v104 - 2) = v104;
        *((_QWORD *)v104 - 1) = 0x400000000;
        v104 += 48;
        v103 -= 48;
      }
      while (v103);
      *(_QWORD *)(v77 + 184) = v102;
    }
    else
    {
      v92 = 0x5555555555555556 * ((v91 - (uint64_t)v88) >> 4);
      if (v92 <= v133)
        v92 = v133;
      if (0xAAAAAAAAAAAAAAABLL * ((v91 - (uint64_t)v88) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v93 = 0x555555555555555;
      else
        v93 = v92;
      if (v93 > 0x555555555555555)
LABEL_153:
        sub_1C4764EE4();
      v94 = (char *)operator new(48 * v93);
      v95 = &v94[16 * ((v87 - v88) >> 4)];
      v96 = 3 * v86;
      v97 = &v94[48 * v86];
      v98 = 16 * v96;
      v99 = v95 + 16;
      v100 = v98 - 16 * ((v87 - v88) >> 4);
      do
      {
        *((_QWORD *)v99 - 2) = v99;
        *((_QWORD *)v99 - 1) = 0x400000000;
        v99 += 48;
        v100 -= 48;
      }
      while (v100);
      v101 = &v94[48 * v93];
      if (v87 == v88)
      {
        *(_QWORD *)(v77 + 176) = v95;
        *(_QWORD *)(v77 + 184) = v97;
        *(_QWORD *)(v77 + 192) = v101;
      }
      else
      {
        v123 = 0;
        do
        {
          *(_QWORD *)&v95[v123 - 48] = &v95[v123 - 32];
          *(_QWORD *)&v95[v123 - 40] = 0x400000000;
          if (*(_DWORD *)&v87[v123 - 40])
            sub_1C614D378((uint64_t)&v95[v123 - 48], (uint64_t)&v87[v123 - 48]);
          v123 -= 48;
        }
        while (&v87[v123] != v88);
        v124 = *(char **)(v77 + 176);
        v87 = *(char **)(v77 + 184);
        *(_QWORD *)(v77 + 176) = &v95[v123];
        *(_QWORD *)(v77 + 184) = v97;
        *(_QWORD *)(v77 + 192) = v101;
        if (v87 != v124)
        {
          do
          {
            v126 = (char *)*((_QWORD *)v87 - 6);
            v87 -= 48;
            v125 = v126;
            if (v87 + 16 != v126)
              free(v125);
          }
          while (v87 != v124);
          v87 = v124;
        }
      }
      if (v87)
        operator delete(v87);
    }
  }
  v105 = v129;
  v106 = *(_QWORD *)(v129 + 200);
  v107 = (*(_QWORD *)(v129 + 208) - v106) >> 2;
  if (v133 <= v107)
  {
    if (v133 < v107)
      *(_QWORD *)(v129 + 208) = v106 + 4 * v133;
  }
  else
  {
    sub_1C4D63CD0((char **)(v129 + 200), v133 - v107);
    v105 = v129;
  }
  v108 = *(_QWORD *)(v105 + 8);
  v109 = *(_QWORD *)(v105 + 16) - v108;
  if ((v109 & 0x7FFFFFFF8) != 0)
  {
    v110 = (int *)v130;
    v111 = (v109 >> 3);
    v112 = (_DWORD *)(v108 + 4);
    do
    {
      v113 = *v110++;
      *v112 = v113;
      v112 += 2;
      --v111;
    }
    while (v111);
  }
  v114 = (llvm::SUnit **)__p;
  v115 = (llvm::SUnit **)v135;
  while (v114 != v115)
  {
    v116 = *v114;
    v117 = *((_DWORD *)v130 + *((unsigned int *)*v114 + 48));
    v118 = *((_DWORD *)v130 + *((unsigned int *)v114[1] + 48));
    if (v117 != v118)
    {
      if ((*((_BYTE *)v116 + 236) & 1) == 0)
        llvm::SUnit::ComputeDepth(*v114);
      v119 = *((unsigned int *)v116 + 60);
      sub_1C5282D20(&v129, v117, v118, v119);
      sub_1C5282D20(&v129, v118, v117, v119);
    }
    v114 += 2;
  }
  free(v140);
  if (v137 != v139)
    free(v137);
  if (__p)
  {
    v135 = (char *)__p;
    operator delete(__p);
  }
  if (v130 != v132)
    free(v130);
}

void *sub_1C5281B28(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  int v7;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;
  int v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _DWORD *v36;
  unsigned int v37;
  uint64_t v38;
  _DWORD *v39;
  unint64_t v40;
  int v41;
  _DWORD *v42;
  unsigned int v43;
  _DWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  _DWORD *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void *result;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  _DWORD *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  _DWORD *v67;
  unsigned int v68;
  int v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;

  v4 = *(unsigned int *)(a2 + 192);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  *(_DWORD *)(v5 + 8 * v4 + 4) = v4;
  v6 = *(unsigned __int16 **)(*(_QWORD *)(a2 + 8) + 16);
  v7 = *v6;
  v10 = ((v7 - 9) > 0x3C || ((1 << (v7 - 9)) & 0x1000000000000605) == 0)
     && v7 != 0
     && (v6[4] & 0x10) == 0;
  v11 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v11)
  {
    v12 = *(_DWORD *)(v5 + 8 * v4);
    v13 = *(uint64_t **)(a2 + 32);
    v14 = &v13[2 * v11];
    v15 = (uint64_t)(a1 + 22);
    do
    {
      v16 = *v13;
      if ((*v13 & 6) == 0)
      {
        v17 = v16 & 0xFFFFFFFFFFFFFFF8;
        v18 = *(unsigned int *)((v16 & 0xFFFFFFFFFFFFFFF8) + 192);
        v19 = *(_QWORD *)(*(_QWORD *)a1 + 8);
        if ((v12 - *(_DWORD *)(v19 + 8 * v18)) < *(_DWORD *)(*(_QWORD *)a1 + 4))
        {
          v20 = v19 + 8 * v18;
          v22 = *(_DWORD *)(v20 + 4);
          v21 = (_DWORD *)(v20 + 4);
          if (v22 == v18)
          {
            v23 = *(unsigned int *)(v17 + 120);
            if ((_DWORD)v23)
            {
              v24 = 0;
              v25 = *(_BYTE **)(v17 + 112);
              v26 = 16 * v23;
              while ((*v25 & 6) != 0 || ++v24 <= 3)
              {
                v25 += 16;
                v26 -= 16;
                if (!v26)
                  goto LABEL_19;
              }
            }
            else
            {
LABEL_19:
              v27 = *(unsigned int *)(a2 + 192);
              *v21 = v27;
              v28 = *((_QWORD *)a1 + 1);
              v29 = *(unsigned int *)(v28 + 4 * v27);
              v30 = *(unsigned int *)(v28 + 4 * v18);
              if (v29 != v30)
              {
                v52 = v18;
                do
                {
                  if (v29 < v30)
                  {
                    *(_DWORD *)(v28 + 4 * v52) = v29;
                    v52 = v30;
                    v30 = *(unsigned int *)(v28 + 4 * v30);
                  }
                  else
                  {
                    *(_DWORD *)(v28 + 4 * v27) = v30;
                    v27 = v29;
                    v29 = *(unsigned int *)(v28 + 4 * v29);
                  }
                }
                while (v29 != v30);
              }
            }
          }
        }
        if (*(_DWORD *)(v19 + 8 * v18 + 4) == v18)
        {
          v46 = *((_QWORD *)a1 + 25);
          v47 = *(unsigned __int8 *)(v46 + v18);
          v48 = a1[24];
          v49 = *((_QWORD *)a1 + 11);
          if (v48 <= v47)
          {
LABEL_46:
            v50 = (_DWORD *)(v49 + 12 * v48);
          }
          else
          {
            while (1)
            {
              v50 = (_DWORD *)(v49 + 12 * v47);
              if (*v50 == v18)
                break;
              v47 += 256;
              if (v47 >= v48)
                goto LABEL_46;
            }
          }
          v51 = v18 | 0xFFFFFFFF00000000;
          if (v50 == (_DWORD *)(v49 + 12 * v48))
          {
            *(_BYTE *)(v46 + v18) = v48;
            v53 = a1[24];
            if (v53 >= a1[25])
            {
              v74 = v15;
              llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (uint64_t)(a1 + 26), v53 + 1, 12);
              v15 = v74;
              LODWORD(v53) = a1[24];
            }
            v54 = *((_QWORD *)a1 + 11) + 12 * v53;
            *(_QWORD *)v54 = v51;
            *(_DWORD *)(v54 + 8) = 0;
            v48 = a1[24] + 1;
            a1[24] = v48;
            v49 = *((_QWORD *)a1 + 11);
            v50 = (_DWORD *)(v49 + 12 * v48 - 12);
          }
          if (v50[1] == -1)
          {
            v65 = *((_QWORD *)a1 + 25);
            v66 = *(unsigned __int8 *)(v65 + v18);
            if (v48 <= v66)
            {
LABEL_72:
              v68 = v48;
              v67 = (_DWORD *)(v49 + 12 * v48);
            }
            else
            {
              while (1)
              {
                v67 = (_DWORD *)(v49 + 12 * v66);
                if (*v67 == v18)
                  break;
                v66 += 256;
                if (v66 >= v48)
                  goto LABEL_72;
              }
              v68 = v48;
            }
            v69 = *(_DWORD *)(a2 + 192);
            if (v67 == (_DWORD *)(v49 + 12 * v68))
            {
              *(_BYTE *)(v65 + v18) = v48;
              v70 = a1[24];
              if (v70 >= a1[25])
              {
                v73 = v15;
                v75 = v69;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (uint64_t)(a1 + 26), v70 + 1, 12);
                v69 = v75;
                v15 = v73;
                LODWORD(v70) = a1[24];
              }
              v71 = *((_QWORD *)a1 + 11) + 12 * v70;
              *(_QWORD *)v71 = v51;
              *(_DWORD *)(v71 + 8) = 0;
              LODWORD(v71) = a1[24] + 1;
              a1[24] = v71;
              v67 = (_DWORD *)(*((_QWORD *)a1 + 11) + 12 * v71 - 12);
            }
            v67[1] = v69;
          }
        }
        else
        {
          v31 = *((_QWORD *)a1 + 25);
          v32 = *(unsigned __int8 *)(v31 + v18);
          v33 = a1[24];
          v34 = *((_QWORD *)a1 + 11);
          v35 = v32;
          if (v33 <= v32)
          {
LABEL_24:
            v36 = (_DWORD *)(v34 + 12 * v33);
          }
          else
          {
            while (1)
            {
              v36 = (_DWORD *)(v34 + 12 * v35);
              if (*v36 == v18)
                break;
              v35 += 256;
              if (v35 >= v33)
                goto LABEL_24;
            }
          }
          if (v36 != (_DWORD *)(v34 + 12 * v33))
          {
            v37 = *(unsigned __int8 *)(v31 + v18);
            if (v33 <= v32)
              goto LABEL_29;
            while (1)
            {
              v38 = v37;
              v39 = (_DWORD *)(v34 + 12 * v37);
              if (*v39 == v18)
                break;
              v37 = v38 + 256;
              if ((int)v38 + 256 >= v33)
                goto LABEL_29;
            }
            if (v33 == v38)
            {
LABEL_29:
              *(_BYTE *)(v31 + v18) = v33;
              v40 = a1[24];
              if (v40 >= a1[25])
              {
                v72 = v15;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (uint64_t)(a1 + 26), v40 + 1, 12);
                v15 = v72;
                LODWORD(v40) = a1[24];
              }
              v33 = *((_QWORD *)a1 + 11) + 12 * v40;
              *(_QWORD *)v33 = v18 | 0xFFFFFFFF00000000;
              *(_DWORD *)(v33 + 8) = 0;
              LODWORD(v33) = a1[24] + 1;
              a1[24] = v33;
              v34 = *((_QWORD *)a1 + 11);
              v39 = (_DWORD *)(v34 + 12 * v33 - 12);
              v32 = *(unsigned __int8 *)(*((_QWORD *)a1 + 25) + v18);
            }
            v41 = v39[2];
            if (v33 <= v32)
            {
LABEL_36:
              v43 = v33;
              v42 = (_DWORD *)(v34 + 12 * v33);
            }
            else
            {
              while (1)
              {
                v42 = (_DWORD *)(v34 + 12 * v32);
                if (*v42 == v18)
                  break;
                v32 += 256;
                if (v32 >= v33)
                  goto LABEL_36;
              }
              v43 = v33;
            }
            v10 += v41;
            v44 = (_DWORD *)(v34 + 12 * v43);
            if (v42 != v44)
            {
              v45 = v44 - 3;
              if (v45 != v42)
              {
                v33 = *(_QWORD *)v45;
                v42[2] = v45[2];
                *(_QWORD *)v42 = v33;
                *(_BYTE *)(*((_QWORD *)a1 + 25) + *(unsigned int *)(*((_QWORD *)a1 + 11) + 12 * a1[24] - 12)) = -85 * ((v42 - *((_QWORD *)a1 + 11)) >> 2);
                LODWORD(v33) = a1[24];
              }
              a1[24] = v33 - 1;
            }
          }
        }
      }
      v13 += 2;
    }
    while (v13 != v14);
  }
  result = a1 + 22;
  v56 = *((_QWORD *)a1 + 11);
  v57 = *(unsigned int *)(a2 + 192);
  v58 = *((_QWORD *)a1 + 25);
  v59 = *(unsigned __int8 *)(v58 + v57);
  v60 = a1[24];
  if (v60 <= v59)
  {
LABEL_63:
    v61 = (_DWORD *)(v56 + 12 * v60);
  }
  else
  {
    while (1)
    {
      v61 = (_DWORD *)(v56 + 12 * v59);
      if (*v61 == (_DWORD)v57)
        break;
      v59 += 256;
      if (v59 >= v60)
        goto LABEL_63;
    }
  }
  if (v61 == (_DWORD *)(v56 + 12 * v60))
  {
    v62 = v57 | 0xFFFFFFFF00000000;
    *(_BYTE *)(v58 + v57) = v60;
    v63 = a1[24];
    if (v63 >= a1[25])
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(a1 + 26), v63 + 1, 12);
      LODWORD(v63) = a1[24];
    }
    v64 = *((_QWORD *)a1 + 11) + 12 * v63;
    *(_QWORD *)v64 = v62;
    *(_DWORD *)(v64 + 8) = 0;
    LODWORD(v64) = a1[24] + 1;
    a1[24] = v64;
    v61 = (_DWORD *)(*((_QWORD *)a1 + 11) + 12 * v64 - 12);
  }
  *v61 = v4;
  v61[1] = -1;
  v61[2] = v10;
  return result;
}

uint64_t llvm::SchedDFSResult::scheduleTree(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = *(_QWORD *)(this + 176) + 48 * a2;
  v3 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3)
  {
    v4 = *(unsigned int **)v2;
    v5 = &v4[2 * v3];
    v6 = *(_QWORD *)(this + 200);
    do
    {
      v7 = *v4;
      v8 = v4[1];
      v4 += 2;
      if (*(_DWORD *)(v6 + 4 * v7) > v8)
        v8 = *(_DWORD *)(v6 + 4 * v7);
      *(_DWORD *)(v6 + 4 * v7) = v8;
    }
    while (v4 != v5);
  }
  return this;
}

uint64_t sub_1C52820E8(uint64_t *a1, uint64_t a2, int a3)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v3[-*a1] >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0xF0F0F0F0F0F0F0)
    abort();
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - (uint64_t)v4) >> 4) > v6)
    v6 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - (uint64_t)v4) >> 4);
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - (uint64_t)v4) >> 4) >= 0x78787878787878)
    v10 = 0xF0F0F0F0F0F0F0;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 > 0xF0F0F0F0F0F0F0)
      sub_1C4764EE4();
    v11 = (char *)operator new(272 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = (uint64_t)&v11[272 * v5];
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = a2;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  v13 = &v11[272 * v10];
  *(_QWORD *)(v12 + 32) = v12 + 48;
  *(_QWORD *)(v12 + 40) = 0x400000000;
  *(_QWORD *)(v12 + 112) = v12 + 128;
  *(_QWORD *)(v12 + 120) = 0x400000000;
  *(_DWORD *)(v12 + 192) = a3;
  *(_DWORD *)(v12 + 232) = 0;
  *(_OWORD *)(v12 + 196) = 0u;
  *(_OWORD *)(v12 + 212) = 0u;
  *(_WORD *)(v12 + 228) = 0;
  *(_BYTE *)(v12 + 236) &= 0xFCu;
  *(_OWORD *)(v12 + 240) = 0u;
  *(_OWORD *)(v12 + 256) = 0u;
  v14 = v12 + 272;
  if (v3 == v4)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = (uint64_t)v13;
  }
  else
  {
    do
    {
      v3 -= 272;
      v12 = sub_1C6212274(v12 - 272, (uint64_t)v3);
    }
    while (v3 != v4);
    v3 = (char *)*a1;
    v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v14;
    a1[2] = (uint64_t)v13;
    while (v15 != v3)
    {
      v16 = (char *)*((_QWORD *)v15 - 20);
      if (v15 - 144 != v16)
        free(v16);
      v17 = (char *)*((_QWORD *)v15 - 30);
      if (v15 - 224 != v17)
        free(v17);
      v15 -= 272;
    }
  }
  if (v3)
    operator delete(v3);
  return v14;
}

uint64_t sub_1C5282284(uint64_t result, uint64_t a2)
{
  const void *v3;
  const void *v4;
  _DWORD *v5;
  unint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  int v14;
  const void *v15;
  unsigned int *v16;
  _DWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  if (result != a2)
  {
    v4 = (const void *)(a2 + 16);
    v3 = *(const void **)a2;
    if (v3 != v4)
    {
      v15 = v4;
      v11 = a2;
      v18 = (_QWORD *)result;
      v8 = (void *)(result + 16);
      v7 = *(void **)result;
      if (v7 != v8)
      {
        free(v7);
        v3 = *(const void **)v11;
      }
      result = (uint64_t)v18;
      *v18 = v3;
      v5 = (_DWORD *)(v11 + 8);
      v18[1] = *(_QWORD *)(v11 + 8);
      *(_QWORD *)v11 = v15;
      *(_DWORD *)(v11 + 12) = 0;
      goto LABEL_7;
    }
    v5 = (_DWORD *)(a2 + 8);
    v6 = *(unsigned int *)(a2 + 8);
    if (*(_DWORD *)(result + 8) >= v6)
    {
      if ((_DWORD)v6)
      {
        v20 = result;
        v14 = *(_DWORD *)(a2 + 8);
        v17 = (_DWORD *)(a2 + 8);
        memmove(*(void **)result, v3, 16 * v6);
        v5 = v17;
        result = v20;
        LODWORD(v6) = v14;
      }
      *(_DWORD *)(result + 8) = v6;
LABEL_7:
      *v5 = 0;
      return result;
    }
    v10 = *(unsigned int *)(result + 8);
    v16 = (unsigned int *)(a2 + 8);
    v12 = (_QWORD *)a2;
    v19 = result;
    v13 = *(_DWORD *)(a2 + 8);
    if (*(_DWORD *)(result + 12) >= v6)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)result, v3, 16 * v10);
        goto LABEL_15;
      }
    }
    else
    {
      *(_DWORD *)(result + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v6, 16);
    }
    v10 = 0;
LABEL_15:
    v9 = *v16;
    if (v10 != v9)
      memcpy((void *)(*(_QWORD *)v19 + 16 * v10), (const void *)(*v12 + 16 * v10), *v12 + 16 * v9 - (*v12 + 16 * v10));
    v5 = v16;
    result = v19;
    *(_DWORD *)(v19 + 8) = v13;
    goto LABEL_7;
  }
  return result;
}

_QWORD *sub_1C52823F0(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v3 = result;
  for (i = result[1]; i != a2; i -= 32)
  {
    if (*(_QWORD *)(i - 8))
    {
      v5 = *(_QWORD *)(i - 24);
      result = *(_QWORD **)(i - 16);
      v6 = *result;
      *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
      **(_QWORD **)(v5 + 8) = v6;
      *(_QWORD *)(i - 8) = 0;
      if (result != (_QWORD *)(i - 24))
      {
        do
        {
          v7 = (_QWORD *)result[1];
          operator delete(result);
          result = v7;
        }
        while (v7 != (_QWORD *)(i - 24));
      }
    }
  }
  v3[1] = a2;
  return result;
}

uint64_t sub_1C5282480(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  BOOL v50;
  int v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;

  v4 = *a2;
  v67 = *a2;
  v68 = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)a1;
    v7 = v5 - 1;
    v8 = (v5 - 1) & (37 * v4);
    v9 = (_QWORD *)(*(_QWORD *)a1 + 16 * v8);
    v10 = *v9;
    if (v4 == *v9)
    {
LABEL_3:
      v11 = *(_DWORD *)(v6 + 16 * v8 + 8);
      v12 = *(_QWORD *)(a1 + 24);
      return v12 + 32 * v11 + 8;
    }
    v48 = 0;
    v49 = 1;
    while (v10 != -4096)
    {
      if (v48)
        v50 = 0;
      else
        v50 = v10 == -8192;
      if (v50)
        v48 = v9;
      v51 = v8 + v49++;
      v8 = v51 & v7;
      v9 = (_QWORD *)(v6 + 16 * v8);
      v10 = *v9;
      if (v4 == *v9)
        goto LABEL_3;
    }
    if (v48)
      v14 = v48;
    else
      v14 = v9;
  }
  else
  {
    v14 = 0;
  }
  v15 = sub_1C52827FC(a1, &v67, v14);
  *v15 = v4;
  *((_DWORD *)v15 + 2) = 0;
  v60 = (uint64_t)&v60;
  v61 = &v60;
  v16 = *a2;
  v62 = 0;
  v63 = v16;
  v64 = (uint64_t)&v64;
  v65 = &v64;
  v66 = 0;
  v18 = *(char **)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v18 >= v17)
  {
    v20 = *(char **)(a1 + 24);
    v21 = (v18 - v20) >> 5;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 59)
      abort();
    v23 = v17 - (_QWORD)v20;
    if (v23 >> 4 > v22)
      v22 = v23 >> 4;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0)
      v24 = 0x7FFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24 >> 59)
      sub_1C4764EE4();
    v25 = (char *)operator new(32 * v24);
    v26 = &v25[32 * v21];
    *(_QWORD *)v26 = v16;
    *((_QWORD *)v26 + 1) = v26 + 8;
    v27 = &v25[32 * v24];
    *((_QWORD *)v26 + 2) = v26 + 8;
    *((_QWORD *)v26 + 3) = 0;
    v28 = v26 + 32;
    if (v18 == v20)
    {
      *(_QWORD *)(a1 + 24) = v26;
      *(_QWORD *)(a1 + 32) = v28;
      *(_QWORD *)(a1 + 40) = v27;
    }
    else
    {
      v29 = 0;
      do
      {
        v30 = &v26[v29];
        v31 = &v18[v29];
        v32 = &v26[v29 - 24];
        *((_QWORD *)v30 - 4) = *(_QWORD *)&v18[v29 - 32];
        *((_QWORD *)v30 - 3) = v32;
        *((_QWORD *)v30 - 2) = v32;
        *((_QWORD *)v30 - 1) = 0;
        v33 = *(_QWORD *)&v18[v29 - 8];
        if (v33)
        {
          v35 = *((_QWORD *)v31 - 3);
          v34 = (uint64_t *)*((_QWORD *)v31 - 2);
          v36 = *v34;
          *(_QWORD *)(v36 + 8) = *(_QWORD *)(v35 + 8);
          **(_QWORD **)(v35 + 8) = v36;
          v37 = *(_QWORD *)v32;
          *(_QWORD *)(v37 + 8) = v34;
          *v34 = v37;
          *(_QWORD *)v32 = v35;
          *(_QWORD *)(v35 + 8) = v32;
          *((_QWORD *)v30 - 1) = v33;
          *((_QWORD *)v31 - 1) = 0;
        }
        v29 -= 32;
      }
      while (&v18[v29] != v20);
      v18 = *(char **)(a1 + 24);
      v38 = *(char **)(a1 + 32);
      *(_QWORD *)(a1 + 24) = &v26[v29];
      *(_QWORD *)(a1 + 32) = v28;
      *(_QWORD *)(a1 + 40) = v27;
      while (v38 != v18)
      {
        if (*((_QWORD *)v38 - 1))
        {
          v40 = *((_QWORD *)v38 - 3);
          v39 = (char *)*((_QWORD *)v38 - 2);
          v41 = *(_QWORD *)v39;
          *(_QWORD *)(v41 + 8) = *(_QWORD *)(v40 + 8);
          **(_QWORD **)(v40 + 8) = v41;
          *((_QWORD *)v38 - 1) = 0;
          if (v39 != v38 - 24)
          {
            do
            {
              v42 = (char *)*((_QWORD *)v39 + 1);
              operator delete(v39);
              v39 = v42;
            }
            while (v42 != v38 - 24);
          }
        }
        v38 -= 32;
      }
    }
    if (v18)
      operator delete(v18);
    v43 = v66;
    *(_QWORD *)(a1 + 32) = v28;
    if (v43)
    {
      v57 = v64;
      v56 = v65;
      v58 = *v65;
      *(_QWORD *)(v58 + 8) = *(_QWORD *)(v64 + 8);
      **(_QWORD **)(v57 + 8) = v58;
      v66 = 0;
      if (v56 != &v64)
      {
        do
        {
          v59 = (uint64_t *)v56[1];
          operator delete(v56);
          v56 = v59;
        }
        while (v59 != &v64);
      }
    }
  }
  else
  {
    *(_QWORD *)v18 = v16;
    *((_QWORD *)v18 + 1) = v18 + 8;
    *((_QWORD *)v18 + 2) = v18 + 8;
    *((_QWORD *)v18 + 3) = 0;
    v19 = v66;
    if (v66)
    {
      v45 = v64;
      v44 = v65;
      v46 = *v65;
      *(_QWORD *)(v46 + 8) = *(_QWORD *)(v64 + 8);
      **(_QWORD **)(v45 + 8) = v46;
      v47 = *((_QWORD *)v18 + 1);
      *(_QWORD *)(v47 + 8) = v44;
      *v44 = v47;
      *((_QWORD *)v18 + 1) = v45;
      *(_QWORD *)(v45 + 8) = v18 + 8;
      *((_QWORD *)v18 + 3) = v19;
      v66 = 0;
    }
    *(_QWORD *)(a1 + 32) = v18 + 32;
  }
  if (v62)
  {
    v53 = v60;
    v52 = v61;
    v54 = *v61;
    *(_QWORD *)(v54 + 8) = *(_QWORD *)(v60 + 8);
    **(_QWORD **)(v53 + 8) = v54;
    v62 = 0;
    if (v52 != &v60)
    {
      do
      {
        v55 = (uint64_t *)v52[1];
        operator delete(v52);
        v52 = v55;
      }
      while (v55 != &v60);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  v11 = ((unint64_t)(*(_QWORD *)(a1 + 32) - v12) >> 5) - 1;
  *((_DWORD *)v15 + 2) = v11;
  return v12 + 32 * v11 + 8;
}

_QWORD *sub_1C52827FC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
    sub_1C5282980((uint64_t *)a1, v6);
    v16 = *(_DWORD *)(a1 + 16);
    if (v16)
    {
      v17 = v16 - 1;
      v18 = (37 * *a2) & v17;
      a3 = (_QWORD *)(*(_QWORD *)a1 + 16 * v18);
      v19 = *a3;
      if (*a2 == *a3)
        goto LABEL_3;
      v12 = 0;
      v20 = 1;
      while (v19 != -4096)
      {
        if (v12)
          v21 = 0;
        else
          v21 = v19 == -8192;
        if (v21)
          v12 = a3;
        v22 = v18 + v20++;
        v18 = v22 & v17;
        a3 = (_QWORD *)(*(_QWORD *)a1 + 16 * v18);
        v19 = *a3;
        if (*a2 == *a3)
          goto LABEL_3;
      }
      goto LABEL_29;
    }
LABEL_28:
    a3 = 0;
    goto LABEL_3;
  }
  sub_1C5282980((uint64_t *)a1, 2 * v6);
  v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_28;
  v9 = v8 - 1;
  v10 = (37 * *a2) & v9;
  a3 = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
  v11 = *a3;
  if (*a2 == *a3)
    goto LABEL_3;
  v12 = 0;
  v13 = 1;
  while (v11 != -4096)
  {
    if (v12)
      v14 = 0;
    else
      v14 = v11 == -8192;
    if (v14)
      v12 = a3;
    v15 = v10 + v13++;
    v10 = v15 & v9;
    a3 = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
    v11 = *a3;
    if (*a2 == *a3)
      goto LABEL_3;
  }
LABEL_29:
  if (v12)
    a3 = v12;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C5282980(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      do
      {
        v13 = *v12;
        if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v14 = *((_DWORD *)a1 + 4) - 1;
          v15 = v14 & (37 * v13);
          v16 = *a1 + 16 * v15;
          v17 = *(_QWORD *)v16;
          if (v13 != *(_QWORD *)v16)
          {
            v18 = 0;
            v19 = 1;
            while (v17 != -4096)
            {
              if (v18)
                v20 = 0;
              else
                v20 = v17 == -8192;
              if (v20)
                v18 = v16;
              v21 = v15 + v19++;
              v15 = v21 & v14;
              v16 = *a1 + 16 * (v21 & v14);
              v17 = *(_QWORD *)v16;
              if (v13 == *(_QWORD *)v16)
                goto LABEL_12;
            }
            if (v18)
              v16 = v18;
          }
LABEL_12:
          *(_QWORD *)v16 = v13;
          *(_DWORD *)(v16 + 8) = *((_DWORD *)v12 + 2);
          ++*((_DWORD *)a1 + 2);
        }
        v12 += 2;
      }
      while (v12 != &v4[2 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v22 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v22)
  {
    v23 = 16 * v22;
    do
    {
      *result = -4096;
      result += 2;
      v23 -= 16;
    }
    while (v23);
  }
  return result;
}

uint64_t sub_1C5282B00(_QWORD *a1, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  int UnderlyingObjectsForCodeGen;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[5];

  v24[4] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 1;
  v5 = a2;
  v7 = &a2[a3];
  v21 = a4 + 16;
  while (1)
  {
    v8 = (uint64_t *)*v5;
    if ((*(_WORD *)(*v5 + 32) & 4) != 0 || (*((_WORD *)v8 + 18) & 0xF00) != 0)
      break;
    v9 = *v8;
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 4) != 0 && v10)
    {
      if (*(_BYTE *)(*a1 + 654)
        || ((*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 32))(v10) & 1) != 0)
      {
        return 0;
      }
      if ((*(unsigned int (**)(unint64_t, _QWORD))(*(_QWORD *)v10 + 40))(v10, *a1))
        v11 = 2;
      else
        v11 = 0;
      v12 = *(unsigned int *)(a4 + 8);
      if (v12 >= *(unsigned int *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v21, v12 + 1, 8);
        v12 = *(unsigned int *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v12) = v10 | v11 | 4;
      ++*(_DWORD *)(a4 + 8);
    }
    else
    {
      v13 = v9 & 4;
      if (v10)
        v14 = v13 == 0;
      else
        v14 = 0;
      if (!v14)
        return 0;
      v22 = v24;
      v23 = 0x400000000;
      UnderlyingObjectsForCodeGen = llvm::getUnderlyingObjectsForCodeGen(v10, (uint64_t)&v22);
      v16 = (uint64_t *)v22;
      if (UnderlyingObjectsForCodeGen && (_DWORD)v23)
      {
        v17 = *(_DWORD *)(a4 + 8);
        v18 = 8 * v23;
        do
        {
          v19 = *v16;
          if (v17 >= *(_DWORD *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v21, v17 + 1, 8);
            v17 = *(_DWORD *)(a4 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v17) = v19 & 0xFFFFFFFFFFFFFFF9 | 2;
          v17 = *(_DWORD *)(a4 + 8) + 1;
          *(_DWORD *)(a4 + 8) = v17;
          ++v16;
          v18 -= 8;
        }
        while (v18);
        v16 = (uint64_t *)v22;
      }
      if (v16 != v24)
        free(v16);
      if (!UnderlyingObjectsForCodeGen)
        return 0;
    }
    if (++v5 == v7)
      return 1;
  }
  return 0;
}

_QWORD *sub_1C5282D20(_QWORD *result, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v4;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;

  if ((_DWORD)a4)
  {
    v4 = a4;
    v6 = result;
    v7 = a2;
    v8 = a3 | (unint64_t)(a4 << 32);
    v9 = *result;
    while (1)
    {
      v10 = *(_QWORD *)(v9 + 176) + 48 * v7;
      v11 = *(_QWORD *)v10;
      v12 = *(unsigned int *)(v10 + 8);
      if ((_DWORD)v12)
        break;
LABEL_7:
      if (v12 >= *(_DWORD *)(v10 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v10, v10 + 16, v12 + 1, 8);
        v11 = *(_QWORD *)v10;
        v12 = *(unsigned int *)(v10 + 8);
      }
      *(_QWORD *)(v11 + 8 * v12) = v8;
      ++*(_DWORD *)(v10 + 8);
      v9 = *v6;
      v7 = *(unsigned int *)(*(_QWORD *)(*v6 + 32) + 8 * v7);
      if ((_DWORD)v7 == -1)
        return result;
    }
    v13 = (unsigned int *)(v11 + 4);
    v14 = 8 * v12;
    while (*(v13 - 1) != a3)
    {
      v13 += 2;
      v14 -= 8;
      if (!v14)
        goto LABEL_7;
    }
    v15 = *v13;
    if (*v13 <= v4)
      v15 = v4;
    *v13 = v15;
  }
  return result;
}

uint64_t *sub_1C5282E10(uint64_t *result, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;

  v2 = *(unsigned __int16 *)(result[26] + 2 * a2);
  v3 = *((_DWORD *)result + 2);
  if (v3 > v2)
  {
    v4 = *result;
    do
    {
      if (*(_DWORD *)(v4 + 24 * v2 + 12) == a2)
      {
        v5 = *(_DWORD *)(v4 + 24 * v2 + 16);
        if (v5 != -1 && *(_DWORD *)(v4 + 24 * v5 + 20) == -1)
          break;
      }
      v2 += 0x10000;
    }
    while (v2 < v3);
  }
  return result;
}

double sub_1C5282E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  BOOL v12;
  char *v13;
  _QWORD v15[3];

  if (*(_DWORD *)(a1 + 228))
  {
    v9 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 224);
    v10 = *(_DWORD *)(v9 + 20);
    *(_QWORD *)v9 = a2;
    *(_QWORD *)(v9 + 8) = a3;
    *(_QWORD *)&v8 = -1;
    *(_QWORD *)(v9 + 16) = -1;
    LODWORD(v9) = *(_DWORD *)(a1 + 228) - 1;
    *(_DWORD *)(a1 + 224) = v10;
    *(_DWORD *)(a1 + 228) = v9;
  }
  else
  {
    v15[0] = a2;
    v15[1] = a3;
    v15[2] = -1;
    v4 = *(unsigned int *)(a1 + 8);
    v5 = *(_QWORD *)a1;
    v6 = (char *)v15;
    if (v4 >= *(_DWORD *)(a1 + 12))
    {
      v11 = v4 + 1;
      v12 = v5 + 24 * v4 > (unint64_t)v15;
      if (v5 <= (unint64_t)v15 && v12)
      {
        v13 = (char *)v15 - v5;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v11, 24);
        v5 = *(_QWORD *)a1;
        v6 = &v13[*(_QWORD *)a1];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v11, 24);
        v5 = *(_QWORD *)a1;
        v6 = (char *)v15;
      }
    }
    v7 = v5 + 24 * *(unsigned int *)(a1 + 8);
    v8 = *(_OWORD *)v6;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v7 = v8;
    ++*(_DWORD *)(a1 + 8);
  }
  return *(double *)&v8;
}

uint64_t *sub_1C5282F9C(uint64_t *result, unsigned int *a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int *v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  v2 = a2[4];
  v3 = *result;
  if ((unsigned int *)(*result + 24 * v2) != a2)
  {
    v4 = a2[5];
    if (*(_DWORD *)(v3 + 24 * v2 + 20) == -1)
    {
      *(_WORD *)(result[26] + 2 * a2[3]) = v4;
      *(_DWORD *)(v3 + 24 * v4 + 16) = v2;
    }
    else
    {
      v9 = a2[4];
      v10 = *result;
      if (v4 == -1)
      {
        v5 = a2 + 3;
        v6 = result;
        v7 = sub_1C5282E10(result, a2[3]);
        result = v6;
        *(_DWORD *)(*v7 + 24 * v8 + 16) = v9;
        *(_DWORD *)(v10 + 24 * v5[1] + 20) = -1;
      }
      else
      {
        *(_DWORD *)(v3 + 24 * v4 + 16) = v9;
        *(_DWORD *)(v3 + 24 * a2[4] + 20) = v4;
      }
    }
  }
  return result;
}

uint64_t sub_1C52830A0()
{
  char v1;
  int v2;
  char *v3;
  int v4;
  __n128 v5;

  v4 = 1;
  v2 = 1;
  v1 = 0;
  v3 = &v1;
  v5.n128_u64[0] = (unint64_t)"Enable use of AA during MI DAG construction";
  v5.n128_u64[1] = 43;
  sub_1C6212304(&v4, &v2, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7FF870, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v2) = 1;
  v3 = (char *)&v2;
  v5.n128_u64[0] = (unint64_t)"Enable use of TBAA during MI DAG construction";
  v5.n128_u64[1] = 45;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7FF930, "use-tbaa-in-sched-mi", &v4, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FF930, &dword_1C475E000);
  v4 = 1;
  v2 = 1000;
  v3 = (char *)&v2;
  v5.n128_u64[0] = (unint64_t)"The limit to use while constructing the DAG prior to scheduling, at which point a t"
                                     "rade-off is made to avoid excessive compile time.";
  v5.n128_u64[1] = 132;
  sub_1C61798D0((uint64_t)&unk_1ED7FF9F0, "dag-maps-huge-region", &v4, (int **)&v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FF9F0, &dword_1C475E000);
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"A huge scheduling region will have maps reduced by this many nodes at a time. Defau"
                                     "lts to HugeRegion / 2.";
  v5.n128_u64[1] = 105;
  sub_1C621244C(&v3, (__int128 *)&v5);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7FFAB0, &dword_1C475E000);
}

uint64_t llvm::DOTGraphTraits<llvm::ScheduleDAG *>::getNodeLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
}

void llvm::ScheduleDAG::viewGraph(llvm::ScheduleDAG *this)
{
  std::string *v2;
  std::string::size_type v3;
  std::string v4;
  void *__p[2];
  std::string::size_type v6;
  void **v7;
  __int16 v8;
  void *v9[2];
  char v10;
  void **v11;
  __int16 v12;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 56))(v9);
  v12 = 260;
  v11 = v9;
  (*(void (**)(std::string *__return_ptr, llvm::ScheduleDAG *))(*(_QWORD *)this + 56))(&v4, this);
  v2 = std::string::insert(&v4, 0, "Scheduling-Units Graph for ");
  v3 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6 = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v8 = 260;
  v7 = __p;
  (*(void (**)(llvm::ScheduleDAG *, void ***, void ***))(*(_QWORD *)this + 16))(this, &v11, &v7);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete(v9[0]);
}

uint64_t llvm::ScoreboardHazardRecognizer::ScoreboardHazardRecognizer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int *v14;
  int *v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v20;
  void *v21;
  void *v22;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E814A808;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  if (a2
    && (v5 = *(_QWORD *)(a2 + 96)) != 0
    && ((v6 = *(unsigned __int16 *)(v5 + 2), v7 = *(unsigned __int16 *)(v5 + 4), v6 == 0xFFFF)
      ? (v8 = v7 == 0xFFFF)
      : (v8 = 0),
        !v8))
  {
    v9 = 0;
    v10 = *(_QWORD *)(a2 + 72);
    v11 = 1;
    do
    {
      if (v6 != v7)
      {
        v12 = 0;
        v13 = 0;
        v14 = (int *)(v10 + 24 * v7);
        v15 = (int *)(v10 + 24 * v6);
        do
        {
          v16 = *v15;
          if (v12 <= *v15 + v13)
            v12 = *v15 + v13;
          if (v15[4] >= 0)
            v16 = v15[4];
          v13 += v16;
          v15 += 6;
        }
        while (v15 != v14);
        if (v12 > v11)
        {
          do
          {
            v17 = v12 > 2 * v11;
            v11 *= 2;
          }
          while (v17);
          *(_DWORD *)(a1 + 8) = v11;
        }
      }
      v18 = v5 + 10 * ++v9;
      v6 = *(unsigned __int16 *)(v18 + 2);
      v7 = *(unsigned __int16 *)(v18 + 4);
    }
    while (v6 != 0xFFFF || v7 != 0xFFFF);
  }
  else
  {
    v11 = 1;
  }
  v20 = v11;
  *(_QWORD *)(a1 + 56) = v11;
  v21 = (void *)operator new[]();
  *(_QWORD *)(a1 + 48) = v21;
  bzero(v21, 8 * *(_QWORD *)(a1 + 56));
  *(_QWORD *)(a1 + 64) = 0;
  v22 = *(void **)(a1 + 72);
  if (!v22)
  {
    *(_QWORD *)(a1 + 80) = v20;
    v22 = (void *)operator new[]();
    *(_QWORD *)(a1 + 72) = v22;
  }
  bzero(v22, 8 * *(_QWORD *)(a1 + 80));
  *(_QWORD *)(a1 + 88) = 0;
  if (*(_DWORD *)(a1 + 8))
    *(_DWORD *)(a1 + 40) = **(_DWORD **)(a1 + 24);
  return a1;
}

uint64_t llvm::ScoreboardHazardRecognizer::getHazardType(_QWORD *a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;

  v3 = a1[3];
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 96);
    if (v4)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 16);
        if (v6)
          goto LABEL_5;
      }
      else if (*a2)
      {
        v20 = *(__int16 *)(*a2 + 24);
        if (v20 < 0)
        {
          v6 = *(_QWORD *)(*(_QWORD *)(a1[4] + 16) + 8) + 48 * (unsigned __int16)~(_WORD)v20;
          if (v6)
          {
LABEL_5:
            v7 = v4 + 10 * *(unsigned __int16 *)(v6 + 6);
            v8 = *(unsigned __int16 *)(v7 + 2);
            v9 = *(unsigned __int16 *)(v7 + 4);
            if (v8 != v9)
            {
              v10 = *(_QWORD *)(v3 + 72);
              v11 = (unsigned int *)(v10 + 24 * v9);
              v12 = (unsigned int *)(v10 + 24 * v8);
              while (1)
              {
                v13 = *v12;
                if (*v12)
                  break;
LABEL_18:
                v3 = 0;
                if ((v12[4] & 0x80000000) == 0)
                  v13 = v12[4];
                a3 += v13;
                v12 += 6;
                if (v12 == v11)
                  return v3;
              }
              v14 = a3;
              v15 = *v12;
              while (1)
              {
                if ((v14 & 0x80000000) != 0)
                  goto LABEL_17;
                v16 = a1[10];
                if ((int)v14 >= (int)v16)
                  goto LABEL_18;
                v17 = *((_QWORD *)v12 + 1);
                v18 = v12[5];
                if (v18)
                {
                  if (v18 != 1)
                    goto LABEL_16;
                  v19 = v14;
                }
                else
                {
                  v19 = v14;
                  v17 &= ~*(_QWORD *)(a1[6] + 8 * ((a1[7] - 1) & (a1[8] + v14)));
                }
                v17 &= ~*(_QWORD *)(a1[9] + 8 * ((a1[11] + v19) & (v16 - 1)));
LABEL_16:
                if (!v17)
                  return 1;
LABEL_17:
                ++v14;
                if (!--v15)
                  goto LABEL_18;
              }
            }
          }
        }
      }
    }
    return 0;
  }
  return v3;
}

void sub_1C52835D0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E814A808;
  v2 = a1[9];
  if (v2)
    MEMORY[0x1CAA32F9C](v2, 0x1000C8000313F17);
  v3 = a1[6];
  if (v3)
    MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5283644(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E814A808;
  v2 = a1[9];
  if (v2)
    MEMORY[0x1CAA32F9C](v2, 0x1000C8000313F17);
  v3 = a1[6];
  if (v3)
    MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  return a1;
}

uint64_t sub_1C52836A8(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeGCModuleInfoPass(a1, a2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Shadow Stack GC Lowering";
  *(_QWORD *)(v3 + 8) = 24;
  *(_QWORD *)(v3 + 16) = "shadow-stack-gc-lowering";
  *(_QWORD *)(v3 + 24) = 24;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F6FF3;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C528383C;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t llvm::createShadowStackGCLoweringPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5283768(v1);
}

uint64_t sub_1C5283768(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F6FF3;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E814A890;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7FFB70);
  if (v3 != -1)
  {
    v7[0] = sub_1C52836A8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7FFB70, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C528383C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5283768(v0);
}

void sub_1C5283864(llvm::Pass *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E814A890;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  llvm::Pass::~Pass(this);
}

void sub_1C52838A0(llvm::Pass *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E814A890;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C52838F0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *GC;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v17;
  _QWORD *v18;
  llvm::PointerType *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  llvm::Constant *v23;
  uint64_t v24;
  llvm::Type *v25;
  _DWORD *v26;
  uint64_t v27;
  llvm::Type *v28;
  llvm::Value **v29;
  uint64_t v30;
  llvm::Value **NullValue;
  llvm::GlobalValue *v32;
  int v33;
  _QWORD __s2[2];
  char v35;
  __int16 v36;

  v2 = a2 + 24;
  v3 = *(_QWORD *)(a2 + 32);
  if (v3 == a2 + 24)
    return 0;
  while (1)
  {
    if (v3)
      v6 = v3 - 56;
    else
      v6 = 0;
    if ((*(_WORD *)(v6 + 18) & 0x4000) == 0)
      goto LABEL_21;
    GC = llvm::LLVMContext::getGC(**(llvm::LLVMContext ***)v6, (const llvm::Function *)v6);
    v35 = 12;
    strcpy((char *)__s2, "shadow-stack");
    v8 = *((_BYTE *)GC + 23);
    v9 = v8 & 0x7F;
    v10 = v8 >= 0 ? v8 & 0x7F : GC[1];
    if (v10 != 12)
      goto LABEL_21;
    if ((*((_BYTE *)GC + 23) & 0x80) == 0)
      break;
    if (!memcmp((const void *)*GC, __s2, GC[1]))
      goto LABEL_23;
LABEL_21:
    v3 = *(_QWORD *)(v3 + 8);
    if (v3 == v2)
      return 0;
  }
  if ((v8 & 0x7F) != 0)
  {
    v11 = 0;
    v12 = v9 - 1;
    do
    {
      v13 = *((unsigned __int8 *)GC + v11);
      v14 = *((unsigned __int8 *)__s2 + v11);
    }
    while (v13 == v14 && v12 != v11++);
    if (v13 != v14)
      goto LABEL_21;
  }
LABEL_23:
  v17 = **(_QWORD **)a2 + 1960;
  v18 = operator new(0x10uLL);
  *v18 = v17;
  v18[1] = v17;
  v19 = (llvm::PointerType *)llvm::StructType::create((_QWORD ***)v18, 2, "gc_map", 6uLL, 0);
  a1[6] = v19;
  v20 = llvm::PointerType::get(v19, 0);
  v21 = *(_QWORD **)a2;
  v22 = sub_1C484358C(**(_QWORD **)a2 + 2040, 32, 3);
  *(_QWORD *)v22 = v21;
  *(_DWORD *)(v22 + 8) = 16;
  *(_QWORD *)(v22 + 20) = 0;
  *(_QWORD *)(v22 + 12) = 0;
  *(_DWORD *)(v22 + 28) = 0;
  llvm::StructType::setName(v22, "gc_stackentry", 0xDuLL);
  a1[5] = v22;
  *v18 = llvm::PointerType::get((llvm::PointerType *)v22, 0);
  v18[1] = v20;
  llvm::StructType::setBody(a1[5], (uint64_t)v18, 2, 0);
  v23 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)a1[5], 0);
  v24 = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), "llvm_gc_root_chain", 0x12uLL);
  if (v24 && *(_BYTE *)(v24 + 16) == 3 && (*(_DWORD *)(v24 + 32) & 0xFu) - 7 > 1)
  {
    a1[4] = v24;
    if ((*(_BYTE *)(v24 + 32) & 0xF) == 0 && (*(_DWORD *)(v24 + 20) & 0x7FFFFFF) == 0)
    {
      v30 = v24;
      NullValue = llvm::Constant::getNullValue(v23, v25);
      llvm::GlobalVariable::setInitializer(v30, (llvm::Constant *)NullValue);
      v32 = (llvm::GlobalValue *)a1[4];
      v33 = *((_DWORD *)v32 + 8);
      *((_DWORD *)v32 + 8) = v33 & 0xFFFFFFF0 | 2;
      if ((v33 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v32) & 1) == 0)
        *((_DWORD *)v32 + 8) |= 0x4000u;
    }
  }
  else
  {
    a1[4] = 0;
    v26 = operator new(0x78uLL);
    v26[13] = v26[13] & 0x38000000 | 1;
    v27 = (uint64_t)(v26 + 8);
    *(_QWORD *)v26 = 0;
    *((_QWORD *)v26 + 1) = 0;
    *((_QWORD *)v26 + 2) = 0;
    *((_QWORD *)v26 + 3) = v26 + 8;
    v29 = llvm::Constant::getNullValue(v23, v28);
    __s2[0] = "llvm_gc_root_chain";
    v36 = 259;
    llvm::GlobalVariable::GlobalVariable(v27, a2, v23, 0, 2, (uint64_t)v29, (uint64_t)__s2, 0, 0, 0, 0);
    a1[4] = v27;
  }
  operator delete(v18);
  return 1;
}

void *sub_1C5283BE8(uint64_t a1, uint64_t a2)
{
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1C5283BFC(_QWORD *a1, uint64_t a2)
{
  uint64_t ***v2;
  _QWORD *GC;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t *v13;
  uint64_t ***v14;
  uint64_t ***v15;
  uint64_t ***v16;
  uint64_t **v17;
  uint64_t **i;
  llvm::Value *v19;
  uint64_t **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  llvm::Value *v24;
  unsigned __int8 *v25;
  unint64_t v26;
  llvm::Value **v27;
  _QWORD *v28;
  uint64_t v29;
  llvm::Value **v30;
  llvm::Value **v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t ***v39;
  uint64_t *v40;
  __int128 *v41;
  llvm::Value **v42;
  uint64_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t ***v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  __int128 *v54;
  uint64_t v55;
  __int128 *v56;
  llvm::Value **v57;
  __int128 *v58;
  __int128 *v59;
  __int128 v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  __int128 *v68;
  __int128 v69;
  uint64_t AnalysisPass;
  uint64_t v72;
  llvm::Constant *v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  llvm::ConstantInt *v77;
  llvm::PoisonValue *v78;
  char *v79;
  uint64_t v80;
  unsigned int v81;
  llvm::UndefValue *v82;
  uint64_t v83;
  BOOL v84;
  std::string *v85;
  std::string::size_type v86;
  unsigned __int8 *v87;
  size_t v88;
  llvm::ConstantAggregateZero *v89;
  llvm::GetElementPtrInst **v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  llvm::PointerType *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t ****v99;
  uint64_t ***v100;
  int v101;
  int v102;
  uint64_t ***v103;
  char *v104;
  uint64_t **v105;
  uint64_t **v106;
  const llvm::APInt *v107;
  uint64_t v108;
  llvm::ConstantInt *v109;
  const llvm::APInt *v110;
  llvm::ValueHandleBase *v111;
  uint64_t v112;
  llvm::ConstantInt *v113;
  llvm::ValueHandleBase *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  _QWORD *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t ****v136;
  uint64_t ***v137;
  int v138;
  int v139;
  uint64_t ***v140;
  char *v141;
  uint64_t **v142;
  uint64_t **v143;
  unsigned __int8 *v144;
  size_t v145;
  llvm::PointerType *v146;
  uint64_t **v147;
  uint64_t **v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t **v151;
  llvm::BasicBlock *v152;
  char *FirstNonPHIOrDbgOrAlloca;
  uint64_t v154;
  uint64_t v155;
  char v156;
  char v157;
  char *v158;
  char *v159;
  llvm::Value *v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t *v165;
  uint64_t v166;
  char v167;
  char v168;
  char *v169;
  char *v170;
  uint64_t *v171;
  llvm::Value *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t **v176;
  uint64_t v177;
  unint64_t v178;
  const llvm::APInt *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  llvm::Value *v183;
  llvm::Value *v184;
  char *v185;
  uint64_t ***v186;
  _QWORD *v187;
  const llvm::APInt *v188;
  char *v189;
  uint64_t v190;
  uint64_t *v191;
  char v192;
  char v193;
  char *v194;
  char *v195;
  llvm::Value *v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  char v203;
  char *v204;
  char *v205;
  _QWORD *v206;
  llvm::Value *v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  __int128 *p_s2;
  uint64_t *v215;
  char *v216;
  uint64_t *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  char v222;
  char *v223;
  char *v224;
  uint64_t *v225;
  uint64_t *v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  char v233;
  char v234;
  char *v235;
  char *v236;
  llvm::Value *v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unsigned __int8 **v245;
  int v246;
  unsigned __int8 *v247;
  unsigned __int8 *v248;
  unsigned __int8 *v249;
  uint64_t v250;
  uint64_t v251;
  unsigned __int8 **v252;
  int v253;
  unsigned __int8 *v254;
  unsigned __int8 *v255;
  unsigned __int8 *v256;
  llvm::Value **v257;
  llvm::Value **v258;
  llvm::Value *v259;
  uint64_t v260;
  _QWORD *v261;
  llvm::Value *v262;
  uint64_t v263;
  _QWORD *v264;
  char *v265;
  char *v266;
  unsigned __int8 **v267;
  int v268;
  unsigned __int8 *v269;
  unsigned __int8 *v270;
  unsigned __int8 *v271;
  char *v272;
  char *v273;
  unsigned __int8 **v274;
  int v275;
  unsigned __int8 *v276;
  unsigned __int8 *v277;
  unsigned __int8 *v278;
  char *v279;
  char *v280;
  unsigned __int8 **v281;
  int v282;
  unsigned __int8 *v283;
  unsigned __int8 *v284;
  unsigned __int8 *v285;
  char *v286;
  char *v287;
  unsigned __int8 **v288;
  int v289;
  unsigned __int8 *v290;
  unsigned __int8 *v291;
  unsigned __int8 *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t *v295;
  uint64_t *ElementPtr;
  llvm::Value *v297;
  uint64_t ***v298;
  uint64_t ***v299;
  uint64_t ***v300;
  uint64_t ***v301;
  _QWORD *v302;
  _QWORD *v303;
  const llvm::APInt *v304;
  unint64_t v305;
  unsigned int v306;
  uint64_t *v307;
  uint64_t *v308;
  llvm::Value ***v309;
  void *v310;
  uint64_t v311;
  char *v312;
  uint64_t ***v313;
  void *v314;
  uint64_t v315;
  _QWORD v316[10];
  int v317;
  __int16 v318;
  char v319;
  uint64_t v320;
  uint64_t v321;
  void *v322;
  void *v323;
  __int16 v324;
  __int128 *v325;
  void *__p[2];
  _QWORD v327[2];
  __int16 v328;
  llvm::BasicBlock *v329;
  char *v330;
  uint64_t v331;
  __int128 __s2;
  _BYTE v333[296];
  void *v334;
  void *v335;
  uint64_t v336;
  char v337;
  _QWORD **v338;
  llvm::Value *v339;
  llvm::UndefValue *v340;
  llvm::Value **v341;
  llvm::Value **v342;
  llvm::Value **v343;
  __int16 v344;
  std::string v345;
  __int16 v346;
  uint64_t v347;

  v347 = *MEMORY[0x1E0C80C00];
  if ((*(_WORD *)(a2 + 18) & 0x4000) == 0)
    return 0;
  v2 = (uint64_t ***)a2;
  GC = llvm::LLVMContext::getGC(**(llvm::LLVMContext ***)a2, (const llvm::Function *)a2);
  v333[7] = 12;
  strcpy((char *)&__s2, "shadow-stack");
  v5 = *((_BYTE *)GC + 23);
  v6 = v5 & 0x7F;
  v7 = v5 >= 0 ? v5 & 0x7F : GC[1];
  if (v7 != 12)
    return 0;
  if ((*((_BYTE *)GC + 23) & 0x80) != 0)
  {
    if (!memcmp((const void *)*GC, &__s2, GC[1]))
      goto LABEL_17;
    return 0;
  }
  if ((v5 & 0x7F) != 0)
  {
    v8 = 0;
    v9 = v6 - 1;
    do
    {
      v10 = *((unsigned __int8 *)GC + v8);
      v11 = v333[v8 - 16];
    }
    while (v10 == v11 && v9 != v8++);
    if (v10 != v11)
      return 0;
  }
LABEL_17:
  v13 = **v2;
  *(_QWORD *)&__s2 = v333;
  *((_QWORD *)&__s2 + 1) = 0x1000000000;
  v14 = v2 + 9;
  v15 = (uint64_t ***)v2[10];
  if (v15 == v2 + 9)
  {
    v309 = (llvm::Value ***)(a1 + 7);
    goto LABEL_98;
  }
  v309 = (llvm::Value ***)(a1 + 7);
  do
  {
    v16 = v15 - 3;
    if (!v15)
      v16 = 0;
    v17 = (uint64_t **)(v16 + 5);
    for (i = v16[6]; i != v17; i = (uint64_t **)i[1])
    {
      v19 = (llvm::Value *)(i - 3);
      if (i)
        v20 = i - 3;
      else
        v20 = 0;
      if (*((_BYTE *)v20 + 16) == 84)
      {
        v21 = (uint64_t)*(v20 - 4);
        if (v21)
        {
          if (!*(_BYTE *)(v21 + 16) && *(uint64_t **)(v21 + 24) == v20[9] && (*(_BYTE *)(v21 + 33) & 0x20) != 0)
          {
            v22 = (uint64_t)*(i - 7);
            if (v22)
            {
              if (!*(_BYTE *)(v22 + 16) && *(uint64_t **)(v22 + 24) == i[6] && *(_DWORD *)(v22 + 36) == 151)
              {
                v23 = v13;
                v24 = llvm::Value::stripPointerCasts(*((llvm::Value **)v19 - 4 * (*((_DWORD *)i - 1) & 0x7FFFFFF)));
                v25 = (unsigned __int8 *)((_QWORD *)v19 - 4 * (*((_DWORD *)i - 1) & 0x7FFFFFF))[4];
                if (v25 && v25[16] <= 0x14u && llvm::Constant::isNullValue((llvm::Constant *)v25))
                {
                  v298 = v14;
                  v27 = (llvm::Value **)a1[8];
                  v26 = a1[9];
                  v302 = a1;
                  if ((unint64_t)v27 >= v26)
                  {
                    v300 = v2;
                    v31 = *v309;
                    v32 = ((char *)v27 - (char *)*v309) >> 4;
                    v33 = v32 + 1;
                    if ((unint64_t)(v32 + 1) >> 60)
                      goto LABEL_365;
                    v34 = v26 - (_QWORD)v31;
                    if (v34 >> 3 > v33)
                      v33 = v34 >> 3;
                    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
                      v33 = 0xFFFFFFFFFFFFFFFLL;
                    v305 = v33;
                    if (v33)
                    {
                      if (v33 >> 60)
                        goto LABEL_366;
                      v35 = (char *)operator new(16 * v33);
                    }
                    else
                    {
                      v35 = 0;
                    }
                    v36 = &v35[16 * v32];
                    *(_QWORD *)v36 = v19;
                    *((_QWORD *)v36 + 1) = v24;
                    v37 = v36;
                    v13 = v23;
                    if (v27 != v31)
                    {
                      do
                      {
                        *((_OWORD *)v37 - 1) = *((_OWORD *)v27 - 1);
                        v37 -= 16;
                        v27 -= 2;
                      }
                      while (v27 != v31);
                      v27 = *v309;
                    }
                    v28 = v36 + 16;
                    v2 = v300;
                    v302[7] = v37;
                    v302[8] = v36 + 16;
                    v302[9] = &v35[16 * v305];
                    if (v27)
                      operator delete(v27);
                  }
                  else
                  {
                    *v27 = v19;
                    v27[1] = v24;
                    v28 = v27 + 2;
                    v13 = v23;
                  }
                  v14 = v298;
                  v302[8] = v28;
                  a1 = v302;
                }
                else
                {
                  v29 = DWORD2(__s2);
                  if (DWORD2(__s2) >= (unint64_t)HIDWORD(__s2))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v333, DWORD2(__s2) + 1, 16);
                    v29 = DWORD2(__s2);
                  }
                  v30 = (llvm::Value **)(__s2 + 16 * v29);
                  *v30 = v19;
                  v30[1] = v24;
                  ++DWORD2(__s2);
                  v13 = v23;
                }
              }
            }
          }
        }
      }
    }
    v15 = (uint64_t ***)v15[1];
  }
  while (v15 != v14);
  v38 = DWORD2(__s2);
  if (DWORD2(__s2))
  {
    v39 = v14;
    v40 = v13;
    v41 = (__int128 *)__s2;
    v42 = *v309;
    v44 = (__int128 *)a1[8];
    v43 = a1[9];
    v45 = (char *)v44 - (char *)*v309;
    v46 = v45 >> 4;
    if (DWORD2(__s2) > (v43 - (uint64_t)v44) >> 4)
    {
      v47 = v46 + DWORD2(__s2);
      if (v47 >> 60)
LABEL_365:
        abort();
      v48 = v2;
      v49 = a1;
      v50 = v43 - (_QWORD)v42;
      if (v50 >> 3 > v47)
        v47 = v50 >> 3;
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
        v51 = 0xFFFFFFFFFFFFFFFLL;
      else
        v51 = v47;
      if (v51)
      {
        if (v51 >> 60)
LABEL_366:
          sub_1C4764EE4();
        v52 = (char *)operator new(16 * v51);
      }
      else
      {
        v52 = 0;
      }
      v65 = 0;
      v66 = &v52[16 * v38];
      do
      {
        *(_OWORD *)&v52[v65 * 16] = v41[v65];
        ++v65;
      }
      while (v38 != v65);
      v67 = &v52[16 * v51];
      if (v42 == (llvm::Value **)v44)
      {
        a1 = v49;
        v14 = v39;
      }
      else
      {
        v68 = (__int128 *)v42;
        a1 = v49;
        v14 = v39;
        do
        {
          v69 = *v68++;
          *(_OWORD *)v66 = v69;
          v66 += 16;
        }
        while (v68 != v44);
      }
      a1[7] = v52;
      a1[8] = v66;
      a1[9] = v67;
      v2 = v48;
      if (v42)
        operator delete(v42);
      v13 = v40;
      goto LABEL_98;
    }
    if (v46 >= DWORD2(__s2))
    {
      v54 = (__int128 *)(__s2 + 16 * DWORD2(__s2));
      v56 = (__int128 *)a1[8];
    }
    else
    {
      v53 = 0;
      v54 = (__int128 *)(__s2 + 16 * v46);
      v55 = 16 * DWORD2(__s2) - 16 * v46;
      do
      {
        v44[v53 / 0x10] = v54[v53 / 0x10];
        v53 += 16;
      }
      while (v55 != v53);
      v56 = &v44[v53 / 0x10];
      a1[8] = v56;
      if (v45 < 1)
      {
LABEL_86:
        v13 = v40;
        v14 = v39;
        goto LABEL_98;
      }
    }
    v57 = &v42[2 * v38];
    v58 = &v56[-v38];
    v59 = v56;
    if (v58 < v44)
    {
      v59 = v56;
      do
      {
        v60 = *v58++;
        *v59++ = v60;
      }
      while (v58 < v44);
    }
    a1[8] = v59;
    if (v56 != (__int128 *)v57)
    {
      v61 = ((char *)v56 - (char *)v57) >> 4;
      v62 = (_QWORD *)v56 - 1;
      v63 = 2 * v61;
      do
      {
        *(v62 - 1) = v42[v63 - 2];
        *v62 = v42[v63 - 1];
        v62 -= 2;
        v63 -= 2;
      }
      while (v63 * 8);
    }
    for (; v41 != v54; v42 += 2)
    {
      v64 = *v41++;
      *(_OWORD *)v42 = v64;
    }
    goto LABEL_86;
  }
LABEL_98:
  if ((_BYTE *)__s2 != v333)
    free((void *)__s2);
  if (a1[7] == a1[8])
    return 0;
  v299 = v14;
  v308 = v13;
  LOBYTE(__s2) = 0;
  v337 = 0;
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(a1[1] + 24), &llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    v72 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::DominatorTreeWrapperPass::ID);
    if (v72)
    {
      LOBYTE(v310) = 1;
      sub_1C61DFC84((uint64_t)&__s2, v72 + 32, (char *)&v310);
    }
  }
  v73 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(***v2 + 1912), 0);
  v74 = 0;
  v310 = &v312;
  v311 = 0x1000000000;
  v75 = a1[7];
  if (a1[8] != v75)
  {
    v80 = 0;
    v74 = 0;
    v81 = 1;
    do
    {
      v82 = *(llvm::UndefValue **)(*(_QWORD *)(v75 + 16 * v80)
                                 - 32 * (*(_DWORD *)(*(_QWORD *)(v75 + 16 * v80) + 20) & 0x7FFFFFF)
                                 + 32);
      if (!llvm::Constant::isNullValue(v82))
        v74 = v81;
      if (*(llvm::Constant **)v82 != v73)
        v82 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v82, v73, 0);
      v83 = v311;
      if (v311 >= (unint64_t)HIDWORD(v311))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v310, (uint64_t)&v312, v311 + 1, 8);
        v83 = v311;
      }
      *((_QWORD *)v310 + v83) = v82;
      LODWORD(v311) = v311 + 1;
      v80 = v81;
      v75 = a1[7];
      ++v81;
    }
    while (v80 != (a1[8] - v75) >> 4);
  }
  v76 = v74;
  sub_1C515FA1C((uint64_t)&v310, v74);
  v77 = (llvm::ConstantInt *)(***v2 + 1960);
  v342 = 0;
  v343 = 0;
  v342 = llvm::ConstantInt::get(v77, (uint64_t)(a1[8] - a1[7]) >> 4, 0);
  v343 = llvm::ConstantInt::get(v77, v74, 0);
  v340 = 0;
  v341 = 0;
  v340 = llvm::ConstantStruct::get((llvm::ConstantAggregateZero *)a1[6], (llvm::Type *)&v342, 2);
  llvm::ArrayType::get(v73, (llvm::Type *)v74);
  v341 = llvm::ConstantArray::get(v78, (llvm::Type *)v310, v311);
  v338 = 0;
  v339 = 0;
  v338 = *(_QWORD ***)v340;
  v339 = *v341;
  if (v74)
  {
    v79 = (char *)v327 + 5;
    do
    {
      *--v79 = (v76 % 0xA) | 0x30;
      v84 = v76 > 9;
      v76 /= 0xAuLL;
    }
    while (v84);
  }
  else
  {
    v79 = (char *)v327 + 4;
    BYTE4(v327[0]) = 48;
  }
  sub_1C4E61270(&v345, v79, (char *)v327 + 5, (char *)v327 + 5 - v79);
  v85 = std::string::insert(&v345, 0, "gc_map.");
  v86 = v85->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
  v327[0] = v86;
  v85->__r_.__value_.__l.__size_ = 0;
  v85->__r_.__value_.__r.__words[2] = 0;
  v85->__r_.__value_.__r.__words[0] = 0;
  if (v327[0] >= 0)
    v87 = (unsigned __int8 *)__p;
  else
    v87 = (unsigned __int8 *)__p[0];
  if (v327[0] >= 0)
    v88 = HIBYTE(v327[0]) & 0x7F;
  else
    v88 = (size_t)__p[1];
  v89 = (llvm::ConstantAggregateZero *)llvm::StructType::create(&v338, 2, v87, v88, 0);
  if (SHIBYTE(v327[0]) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v345.__r_.__value_.__l.__data_);
  v90 = (llvm::GetElementPtrInst **)llvm::ConstantStruct::get(v89, (llvm::Type *)&v340, 2);
  v91 = (char *)operator new(0x78uLL);
  v92 = (uint64_t *)(v91 + 32);
  *((_DWORD *)v91 + 13) = *((_DWORD *)v91 + 13) & 0x38000000 | 1;
  *(_QWORD *)v91 = 0;
  *((_QWORD *)v91 + 1) = 0;
  *((_QWORD *)v91 + 2) = 0;
  *((_QWORD *)v91 + 3) = v91 + 32;
  v93 = (uint64_t)v2[5];
  v94 = *v90;
  v306 = v2 >> 4;
  if ((*((_BYTE *)v2 + 23) & 0x10) != 0)
  {
    v95 = ***v2;
    v96 = *(_QWORD *)(v95 + 152);
    v97 = *(unsigned int *)(v95 + 168);
    if ((_DWORD)v97)
    {
      LODWORD(v98) = (v97 - 1) & ((v2 >> 4) ^ (v2 >> 9));
      v99 = (uint64_t ****)(v96 + 16 * v98);
      v100 = *v99;
      if (*v99 == v2)
      {
LABEL_137:
        v103 = v99[1];
        v106 = *v103;
        v104 = (char *)(v103 + 2);
        v105 = v106;
        goto LABEL_138;
      }
      v101 = 1;
      while (v100 != (uint64_t ***)-4096)
      {
        v102 = v98 + v101++;
        v98 = v102 & (v97 - 1);
        v100 = *(uint64_t ****)(v96 + 16 * v98);
        if (v100 == v2)
        {
          v99 = (uint64_t ****)(v96 + 16 * v98);
          goto LABEL_137;
        }
      }
    }
    v99 = (uint64_t ****)(v96 + 16 * v97);
    goto LABEL_137;
  }
  v105 = 0;
  v104 = &byte_1C871356D;
LABEL_138:
  v328 = 1283;
  __p[0] = "__gc_";
  v327[0] = v104;
  v327[1] = v105;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v91 + 32), v93, v94, 1, 7, (uint64_t)v90, (uint64_t)__p, 0, 0, 0, 0);
  *(_OWORD *)&v345.__r_.__value_.__l.__data_ = 0uLL;
  v108 = ***v2;
  v109 = *(llvm::ConstantInt **)(v108 + 1960);
  LODWORD(__p[1]) = *(_DWORD *)(v108 + 1968) >> 8;
  if (LODWORD(__p[1]) > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)__p, 0, 0);
  else
    __p[0] = 0;
  v111 = llvm::ConstantInt::get(v109, (llvm::LLVMContext *)__p, v107);
  if (LODWORD(__p[1]) >= 0x41 && __p[0])
    MEMORY[0x1CAA32F9C](__p[0], 0x1000C8000313F17);
  v345.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
  v112 = ***v2;
  v113 = *(llvm::ConstantInt **)(v112 + 1960);
  LODWORD(__p[1]) = *(_DWORD *)(v112 + 1968) >> 8;
  if (LODWORD(__p[1]) > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)__p, 0, 0);
  else
    __p[0] = 0;
  v114 = llvm::ConstantInt::get(v113, (llvm::LLVMContext *)__p, v110);
  if (LODWORD(__p[1]) >= 0x41 && __p[0])
    MEMORY[0x1CAA32F9C](__p[0], 0x1000C8000313F17);
  v301 = v2;
  v345.__r_.__value_.__l.__size_ = (std::string::size_type)v114;
  ElementPtr = (uint64_t *)llvm::ConstantExpr::getGetElementPtr(*v90, v92, (llvm::Value *)&v345, 2, 0, 0, 0);
  if (v310 != &v312)
    free(v310);
  v115 = a1[5];
  v116 = (char *)operator new(8uLL);
  v117 = v116;
  v118 = a1;
  *(_QWORD *)v116 = v115;
  v119 = v116 + 8;
  v120 = v118[7];
  v121 = v118[8];
  v303 = v118;
  if (v120 != v121)
  {
    v123 = v116 + 8;
    while (1)
    {
      v124 = *(_QWORD *)(*(_QWORD *)(v120 + 8) + 64);
      if (v123 >= v119)
        break;
      *(_QWORD *)v123 = v124;
      v122 = v123 + 8;
LABEL_168:
      v120 += 16;
      v123 = v122;
      if (v120 == v121)
        goto LABEL_169;
    }
    v125 = (v123 - v117) >> 3;
    v126 = v125 + 1;
    if ((unint64_t)(v125 + 1) >> 61)
      goto LABEL_365;
    if ((v119 - v117) >> 2 > v126)
      v126 = (v119 - v117) >> 2;
    if ((unint64_t)(v119 - v117) >= 0x7FFFFFFFFFFFFFF8)
      v127 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v127 = v126;
    if (v127)
    {
      if (v127 >> 61)
        goto LABEL_366;
      v128 = (char *)operator new(8 * v127);
    }
    else
    {
      v128 = 0;
    }
    v129 = &v128[8 * v125];
    v119 = &v128[8 * v127];
    *(_QWORD *)v129 = v124;
    v122 = v129 + 8;
    if (v123 == v117)
    {
      v117 = v123;
    }
    else
    {
      do
      {
        v130 = *((_QWORD *)v123 - 1);
        v123 -= 8;
        *((_QWORD *)v129 - 1) = v130;
        v129 -= 8;
      }
      while (v123 != v117);
      if (!v117)
        goto LABEL_167;
    }
    operator delete(v117);
LABEL_167:
    v117 = v129;
    goto LABEL_168;
  }
  v122 = v116 + 8;
LABEL_169:
  if ((*((_BYTE *)v301 + 23) & 0x10) != 0)
  {
    v131 = ***v301;
    v132 = *(_QWORD *)(v131 + 152);
    v133 = *(unsigned int *)(v131 + 168);
    v134 = v308;
    if ((_DWORD)v133)
    {
      LODWORD(v135) = (v133 - 1) & (v306 ^ (v301 >> 9));
      v136 = (uint64_t ****)(v132 + 16 * v135);
      v137 = *v136;
      if (*v136 == v301)
      {
LABEL_177:
        v140 = v136[1];
        v143 = *v140;
        v141 = (char *)(v140 + 2);
        v142 = v143;
        goto LABEL_178;
      }
      v138 = 1;
      while (v137 != (uint64_t ***)-4096)
      {
        v139 = v135 + v138++;
        v135 = v139 & (v133 - 1);
        v137 = *(uint64_t ****)(v132 + 16 * v135);
        if (v137 == v301)
        {
          v136 = (uint64_t ****)(v132 + 16 * v135);
          goto LABEL_177;
        }
      }
    }
    v136 = (uint64_t ****)(v132 + 16 * v133);
    goto LABEL_177;
  }
  v142 = 0;
  v141 = &byte_1C871356D;
  v134 = v308;
LABEL_178:
  LOWORD(v314) = 1283;
  v310 = "gc_stackentry.";
  v312 = v141;
  v313 = (uint64_t ***)v142;
  llvm::Twine::str((llvm::Twine *)&v310, __p);
  if (v327[0] >= 0)
    v144 = (unsigned __int8 *)__p;
  else
    v144 = (unsigned __int8 *)__p[0];
  if (v327[0] >= 0)
    v145 = HIBYTE(v327[0]) & 0x7F;
  else
    v145 = (size_t)__p[1];
  v146 = (llvm::PointerType *)llvm::StructType::create((_QWORD ***)v117, (v122 - v117) >> 3, v144, v145, 0);
  if (SHIBYTE(v327[0]) < 0)
    operator delete(__p[0]);
  if (v117)
    operator delete(v117);
  v147 = v301[10];
  if (v147)
    v148 = v147 - 3;
  else
    v148 = 0;
  v149 = (uint64_t)v148[6];
  v150 = v149 - 24;
  if (!v149)
    v150 = 0;
  sub_1C4D8ADA0((uint64_t)__p, *(uint64_t ***)(v150 + 40), v149, 0, 0, 0);
  v310 = "gc_frame";
  LOWORD(v314) = 259;
  v307 = (uint64_t *)sub_1C486A5CC((uint64_t *)__p, v146, 0, (uint64_t)&v310);
  v151 = v301[10];
  if (v151)
    v152 = (llvm::BasicBlock *)(v151 - 3);
  else
    v152 = 0;
  v329 = v152;
  FirstNonPHIOrDbgOrAlloca = llvm::BasicBlock::getFirstNonPHIOrDbgOrAlloca(v152);
  v330 = FirstNonPHIOrDbgOrAlloca;
  v154 = llvm::PointerType::get((llvm::PointerType *)v303[5], 0);
  v155 = v303[4];
  v345.__r_.__value_.__r.__words[0] = (std::string::size_type)"gc_currhead";
  v346 = 259;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*((_QWORD *)v329 + 7) + 40) + 272, v154);
  v157 = v156;
  v158 = (char *)operator new(0x60uLL);
  v159 = v158;
  v160 = (llvm::Value *)(v158 + 32);
  *((_QWORD *)v158 + 2) = 0;
  *((_QWORD *)v158 + 3) = v158 + 32;
  LOWORD(v314) = 257;
  *((_QWORD *)v158 + 4) = v154;
  *((_QWORD *)v158 + 5) = 0;
  *((_WORD *)v158 + 24) = 60;
  *((_DWORD *)v158 + 13) = 1;
  *(_OWORD *)(v158 + 56) = 0u;
  *(_OWORD *)(v158 + 72) = 0u;
  *((_DWORD *)v158 + 22) = 0;
  *(_QWORD *)v158 = v155;
  *((_QWORD *)v158 + 1) = 0;
  if (v155)
  {
    v163 = *(_QWORD *)(v155 + 8);
    v162 = (_QWORD *)(v155 + 8);
    v161 = v163;
    *((_QWORD *)v158 + 1) = v163;
    if (v163)
      *(_QWORD *)(v161 + 16) = v158 + 8;
    *((_QWORD *)v158 + 2) = v162;
    *v162 = v158;
  }
  v295 = (uint64_t *)(v158 + 40);
  *((_WORD *)v158 + 25) = 2 * (v157 & 0x3F);
  v158[92] = 1;
  llvm::Value::setName((uint64_t ***)v158 + 4, (uint64_t)&v310);
  v297 = v160;
  (*(void (**)(uint64_t, llvm::Value *, std::string *, llvm::BasicBlock *, char *))(*(_QWORD *)v331 + 16))(v331, v160, &v345, v329, v330);
  v164 = v303;
  v304 = v146;
  v165 = v307;
  if (LODWORD(__p[1]))
  {
    v265 = (char *)__p[0];
    v266 = (char *)__p[0] + 16 * LODWORD(__p[1]);
    v267 = (unsigned __int8 **)(v159 + 80);
    do
    {
      v268 = *(_DWORD *)v265;
      v269 = (unsigned __int8 *)*((_QWORD *)v265 + 1);
      if (v269)
      {
        if (!v268)
        {
          v342 = (llvm::Value **)*((_QWORD *)v265 + 1);
          llvm::MetadataTracking::track((uint64_t)&v342, v269, 2);
          v270 = *v267;
          goto LABEL_308;
        }
      }
      else
      {
        v270 = *v267;
        if (!*v267 && (v159[55] & 0x20) == 0)
          goto LABEL_305;
        if (!v268)
        {
          v342 = 0;
LABEL_308:
          if (v270)
            llvm::MetadataTracking::untrack((uint64_t)(v159 + 80), v270);
          v271 = (unsigned __int8 *)v342;
          *v267 = (unsigned __int8 *)v342;
          if (v271)
            llvm::MetadataTracking::retrack((uint64_t)&v342, v271, (uint64_t)(v159 + 80));
          v164 = v303;
          v146 = v304;
          v165 = v307;
          v134 = v308;
          goto LABEL_305;
        }
      }
      llvm::Value::setMetadata(v297, *(_DWORD *)v265, (llvm::MDNode *)v269);
LABEL_305:
      v265 += 16;
    }
    while (v265 != v266);
  }
  v166 = sub_1C52856AC(v134, (uint64_t *)__p, v146, v165, 1u, "gc_frame.map");
  llvm::DataLayout::getAlignment(*(_QWORD *)(*((_QWORD *)v329 + 7) + 40) + 272, *ElementPtr);
  v168 = v167;
  v169 = (char *)operator new(0x80uLL);
  v170 = v169;
  *((_DWORD *)v169 + 21) = *((_DWORD *)v169 + 21) & 0x38000000 | 2;
  *(_QWORD *)v169 = 0;
  *((_QWORD *)v169 + 2) = 0;
  *((_QWORD *)v169 + 1) = 0;
  *((_QWORD *)v169 + 5) = 0;
  *((_QWORD *)v169 + 6) = 0;
  *((_QWORD *)v169 + 4) = 0;
  v171 = (uint64_t *)(v169 + 32);
  *((_QWORD *)v169 + 8) = **(_QWORD **)*ElementPtr + 1576;
  v172 = (llvm::Value *)(v169 + 64);
  *((_QWORD *)v169 + 3) = v169 + 64;
  *((_QWORD *)v169 + 7) = v169 + 64;
  *((_QWORD *)v169 + 9) = 0;
  v169[80] = 61;
  v169[81] = 0;
  *((_WORD *)v169 + 41) = 0;
  *((_DWORD *)v169 + 21) = 2;
  *(_OWORD *)(v169 + 88) = 0u;
  *(_OWORD *)(v169 + 104) = 0u;
  *((_DWORD *)v169 + 30) = 0;
  *(_QWORD *)v169 = ElementPtr;
  v174 = ElementPtr + 1;
  v173 = ElementPtr[1];
  *((_QWORD *)v169 + 1) = v173;
  if (v173)
    *(_QWORD *)(v173 + 16) = v169 + 8;
  *((_QWORD *)v169 + 2) = v174;
  *v174 = v169;
  if (*((_QWORD *)v169 + 4))
  {
    **((_QWORD **)v169 + 6) = *((_QWORD *)v169 + 5);
    v293 = *((_QWORD *)v169 + 5);
    if (v293)
      *(_QWORD *)(v293 + 16) = *((_QWORD *)v169 + 6);
  }
  *v171 = v166;
  if (v166)
  {
    v177 = *(_QWORD *)(v166 + 8);
    v176 = (uint64_t **)(v166 + 8);
    v175 = v177;
    *((_QWORD *)v169 + 5) = v177;
    if (v177)
      *(_QWORD *)(v175 + 16) = v169 + 40;
    *((_QWORD *)v169 + 6) = v176;
    *v176 = v171;
  }
  *((_WORD *)v169 + 41) = 2 * (v168 & 0x3F);
  v169[124] = 1;
  LOWORD(v314) = 257;
  (*(void (**)(uint64_t, llvm::Value *, void **, llvm::BasicBlock *, char *))(*(_QWORD *)v331 + 16))(v331, v172, &v310, v329, v330);
  if (LODWORD(__p[1]))
  {
    v272 = (char *)__p[0];
    v273 = (char *)__p[0] + 16 * LODWORD(__p[1]);
    v274 = (unsigned __int8 **)(v170 + 112);
    do
    {
      v275 = *(_DWORD *)v272;
      v276 = (unsigned __int8 *)*((_QWORD *)v272 + 1);
      if (v276)
      {
        if (!v275)
        {
          v345.__r_.__value_.__r.__words[0] = *((_QWORD *)v272 + 1);
          llvm::MetadataTracking::track((uint64_t)&v345, v276, 2);
          v277 = *v274;
          goto LABEL_326;
        }
      }
      else
      {
        v277 = *v274;
        if (!*v274 && (v170[87] & 0x20) == 0)
          goto LABEL_323;
        if (!v275)
        {
          v345.__r_.__value_.__r.__words[0] = 0;
LABEL_326:
          if (v277)
            llvm::MetadataTracking::untrack((uint64_t)(v170 + 112), v277);
          v278 = (unsigned __int8 *)v345.__r_.__value_.__r.__words[0];
          *v274 = (unsigned __int8 *)v345.__r_.__value_.__r.__words[0];
          if (v278)
            llvm::MetadataTracking::retrack((uint64_t)&v345, v278, (uint64_t)(v170 + 112));
          v164 = v303;
          v146 = v304;
          v165 = v307;
          goto LABEL_323;
        }
      }
      llvm::Value::setMetadata(v172, *(_DWORD *)v272, (llvm::MDNode *)v276);
LABEL_323:
      v272 += 16;
    }
    while (v272 != v273);
  }
  v178 = v164[8] - v164[7];
  if ((v178 & 0xFFFFFFFF0) != 0)
  {
    v179 = v146;
    v180 = 0;
    v181 = (v178 >> 4);
    v182 = 1;
    do
    {
      v183 = (llvm::Value *)sub_1C52858F4(v308, (uint64_t *)__p, v179, v165, ++v180, "gc_root");
      v184 = (*v309)[v182];
      llvm::Value::takeName(v183, v184);
      llvm::Value::doRAUW(v184, v183, (llvm::Value *)1);
      v182 += 2;
    }
    while (v181 != v180);
  }
  v185 = FirstNonPHIOrDbgOrAlloca - 24;
  if (!FirstNonPHIOrDbgOrAlloca)
    v185 = 0;
  if (v185[16] == 61)
  {
    v186 = v301;
    v187 = v303;
    v188 = v304;
    do
    {
      FirstNonPHIOrDbgOrAlloca = (char *)*((_QWORD *)FirstNonPHIOrDbgOrAlloca + 1);
      v189 = FirstNonPHIOrDbgOrAlloca - 24;
      if (!FirstNonPHIOrDbgOrAlloca)
        v189 = 0;
    }
    while (v189[16] == 61);
  }
  else
  {
    v186 = v301;
    v187 = v303;
    v188 = v304;
  }
  sub_1C4D8AE2C((uint64_t)__p, *((_QWORD *)FirstNonPHIOrDbgOrAlloca + 2), (uint64_t)FirstNonPHIOrDbgOrAlloca);
  v190 = sub_1C52856AC(v308, (uint64_t *)__p, v188, v307, 0, "gc_frame.next");
  v191 = (uint64_t *)sub_1C52858F4(v308, (uint64_t *)__p, v188, v307, 0, "gc_newhead");
  llvm::DataLayout::getAlignment(*(_QWORD *)(*((_QWORD *)v329 + 7) + 40) + 272, *(_QWORD *)v297);
  v193 = v192;
  v194 = (char *)operator new(0x80uLL);
  v195 = v194;
  *((_DWORD *)v194 + 21) = *((_DWORD *)v194 + 21) & 0x38000000 | 2;
  *(_QWORD *)v194 = 0;
  *((_QWORD *)v194 + 2) = 0;
  *((_QWORD *)v194 + 1) = 0;
  *((_QWORD *)v194 + 5) = 0;
  *((_QWORD *)v194 + 6) = 0;
  *((_QWORD *)v194 + 4) = 0;
  *((_QWORD *)v194 + 8) = ***(_QWORD ***)v297 + 1576;
  v196 = (llvm::Value *)(v194 + 64);
  *((_QWORD *)v194 + 3) = v194 + 64;
  *((_QWORD *)v194 + 7) = v194 + 64;
  *((_QWORD *)v194 + 9) = 0;
  v194[80] = 61;
  v194[81] = 0;
  *((_DWORD *)v194 + 21) = 2;
  *(_OWORD *)(v194 + 88) = 0u;
  *(_OWORD *)(v194 + 104) = 0u;
  *((_DWORD *)v194 + 30) = 0;
  v197 = *v295;
  *(_QWORD *)v194 = v297;
  *((_QWORD *)v194 + 1) = v197;
  if (v197)
    *(_QWORD *)(v197 + 16) = v194 + 8;
  *((_QWORD *)v194 + 2) = v295;
  *v295 = (uint64_t)v194;
  *((_QWORD *)v194 + 4) = v190;
  if (v190)
  {
    v200 = *(_QWORD *)(v190 + 8);
    v199 = (_QWORD *)(v190 + 8);
    v198 = v200;
    *((_QWORD *)v194 + 5) = v200;
    if (v200)
      *(_QWORD *)(v198 + 16) = v194 + 40;
    *((_QWORD *)v194 + 6) = v199;
    *v199 = v194 + 32;
  }
  *((_WORD *)v194 + 41) = 2 * (v193 & 0x3F);
  v194[124] = 1;
  LOWORD(v314) = 257;
  (*(void (**)(uint64_t, llvm::Value *, void **, llvm::BasicBlock *, char *))(*(_QWORD *)v331 + 16))(v331, v196, &v310, v329, v330);
  if (LODWORD(__p[1]))
  {
    v279 = (char *)__p[0];
    v280 = (char *)__p[0] + 16 * LODWORD(__p[1]);
    v281 = (unsigned __int8 **)(v195 + 112);
    do
    {
      v282 = *(_DWORD *)v279;
      v283 = (unsigned __int8 *)*((_QWORD *)v279 + 1);
      if (v283)
      {
        if (!v282)
        {
          v345.__r_.__value_.__r.__words[0] = *((_QWORD *)v279 + 1);
          llvm::MetadataTracking::track((uint64_t)&v345, v283, 2);
          v284 = *v281;
          goto LABEL_342;
        }
      }
      else
      {
        v284 = *v281;
        if (!*v281 && (v195[87] & 0x20) == 0)
          goto LABEL_339;
        if (!v282)
        {
          v345.__r_.__value_.__r.__words[0] = 0;
LABEL_342:
          if (v284)
            llvm::MetadataTracking::untrack((uint64_t)(v195 + 112), v284);
          v285 = (unsigned __int8 *)v345.__r_.__value_.__r.__words[0];
          *v281 = (unsigned __int8 *)v345.__r_.__value_.__r.__words[0];
          if (v285)
            llvm::MetadataTracking::retrack((uint64_t)&v345, v285, (uint64_t)(v195 + 112));
          v186 = v301;
          v187 = v303;
          goto LABEL_339;
        }
      }
      llvm::Value::setMetadata(v196, *(_DWORD *)v279, (llvm::MDNode *)v283);
LABEL_339:
      v279 += 16;
    }
    while (v279 != v280);
  }
  v201 = v187[4];
  llvm::DataLayout::getAlignment(*(_QWORD *)(*((_QWORD *)v329 + 7) + 40) + 272, *v191);
  v203 = v202;
  v204 = (char *)operator new(0x80uLL);
  v205 = v204;
  *((_DWORD *)v204 + 21) = *((_DWORD *)v204 + 21) & 0x38000000 | 2;
  *(_QWORD *)v204 = 0;
  *((_QWORD *)v204 + 2) = 0;
  *((_QWORD *)v204 + 1) = 0;
  *((_QWORD *)v204 + 5) = 0;
  *((_QWORD *)v204 + 6) = 0;
  *((_QWORD *)v204 + 4) = 0;
  v206 = v204 + 32;
  *((_QWORD *)v204 + 8) = **(_QWORD **)*v191 + 1576;
  v207 = (llvm::Value *)(v204 + 64);
  *((_QWORD *)v204 + 3) = v204 + 64;
  *((_QWORD *)v204 + 7) = v204 + 64;
  *((_QWORD *)v204 + 9) = 0;
  v204[80] = 61;
  v204[81] = 0;
  *((_WORD *)v204 + 41) = 0;
  *((_DWORD *)v204 + 21) = 2;
  *(_OWORD *)(v204 + 88) = 0u;
  *(_OWORD *)(v204 + 104) = 0u;
  *((_DWORD *)v204 + 30) = 0;
  *(_QWORD *)v204 = v191;
  v210 = v191[1];
  v209 = v191 + 1;
  v208 = v210;
  *((_QWORD *)v204 + 1) = v210;
  if (v210)
    *(_QWORD *)(v208 + 16) = v204 + 8;
  *((_QWORD *)v204 + 2) = v209;
  *v209 = v204;
  if (*((_QWORD *)v204 + 4))
  {
    **((_QWORD **)v204 + 6) = *((_QWORD *)v204 + 5);
    v294 = *((_QWORD *)v204 + 5);
    if (v294)
      *(_QWORD *)(v294 + 16) = *((_QWORD *)v204 + 6);
  }
  *v206 = v201;
  if (v201)
  {
    v213 = *(_QWORD *)(v201 + 8);
    v212 = (_QWORD *)(v201 + 8);
    v211 = v213;
    *((_QWORD *)v204 + 5) = v213;
    if (v213)
      *(_QWORD *)(v211 + 16) = v204 + 40;
    *((_QWORD *)v204 + 6) = v212;
    *v212 = v206;
  }
  *((_WORD *)v204 + 41) = 2 * (v203 & 0x3F);
  v204[124] = 1;
  LOWORD(v314) = 257;
  (*(void (**)(uint64_t, llvm::Value *, void **, llvm::BasicBlock *, char *))(*(_QWORD *)v331 + 16))(v331, v207, &v310, v329, v330);
  if (LODWORD(__p[1]))
  {
    v286 = (char *)__p[0];
    v287 = (char *)__p[0] + 16 * LODWORD(__p[1]);
    v288 = (unsigned __int8 **)(v205 + 112);
    do
    {
      v289 = *(_DWORD *)v286;
      v290 = (unsigned __int8 *)*((_QWORD *)v286 + 1);
      if (v290)
      {
        if (!v289)
        {
          v345.__r_.__value_.__r.__words[0] = *((_QWORD *)v286 + 1);
          llvm::MetadataTracking::track((uint64_t)&v345, v290, 2);
          v291 = *v288;
          goto LABEL_358;
        }
      }
      else
      {
        v291 = *v288;
        if (!*v288 && (v205[87] & 0x20) == 0)
          goto LABEL_355;
        if (!v289)
        {
          v345.__r_.__value_.__r.__words[0] = 0;
LABEL_358:
          if (v291)
            llvm::MetadataTracking::untrack((uint64_t)(v205 + 112), v291);
          v292 = (unsigned __int8 *)v345.__r_.__value_.__r.__words[0];
          *v288 = (unsigned __int8 *)v345.__r_.__value_.__r.__words[0];
          if (v292)
            llvm::MetadataTracking::retrack((uint64_t)&v345, v292, (uint64_t)(v205 + 112));
          v186 = v301;
          v187 = v303;
          goto LABEL_355;
        }
      }
      llvm::Value::setMetadata(v207, *(_DWORD *)v286, (llvm::MDNode *)v290);
LABEL_355:
      v286 += 16;
    }
    while (v286 != v287);
  }
  p_s2 = &__s2;
  if (!v337)
    p_s2 = 0;
  v310 = v186;
  v311 = (uint64_t)"gc_cleanup";
  v312 = (char *)v186[10];
  v313 = v299;
  v215 = **v186;
  v314 = v316;
  v315 = 0x200000000;
  v316[6] = v215;
  v316[7] = &v322;
  v316[8] = &v323;
  v316[9] = 0;
  v317 = 0;
  v318 = 512;
  v319 = 7;
  v316[4] = 0;
  v316[5] = 0;
  v320 = 0;
  v321 = 0;
  v322 = &unk_1E8167888;
  v323 = &unk_1E8167A08;
  v324 = 256;
  v325 = p_s2;
  v216 = llvm::EscapeEnumerator::Next((uint64_t ***)&v310);
  v217 = v308;
  if (v216)
  {
    v218 = v216;
    while (1)
    {
      v219 = sub_1C52856AC(v217, (uint64_t *)v218, v304, v307, 0, "gc_frame.next");
      v220 = llvm::PointerType::get((llvm::PointerType *)v187[5], 0);
      v342 = (llvm::Value **)"gc_savedhead";
      v344 = 259;
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v218 + 6) + 56) + 40) + 272, v220);
      v222 = v221;
      v223 = (char *)operator new(0x60uLL);
      v224 = v223;
      v225 = (uint64_t *)(v223 + 32);
      *((_QWORD *)v223 + 2) = 0;
      *((_QWORD *)v223 + 3) = v223 + 32;
      v346 = 257;
      *((_QWORD *)v223 + 4) = v220;
      *((_QWORD *)v223 + 5) = 0;
      v226 = (uint64_t *)(v223 + 40);
      *((_WORD *)v223 + 24) = 60;
      *((_DWORD *)v223 + 13) = 1;
      *(_OWORD *)(v223 + 56) = 0u;
      *(_OWORD *)(v223 + 72) = 0u;
      *((_DWORD *)v223 + 22) = 0;
      *(_QWORD *)v223 = v219;
      *((_QWORD *)v223 + 1) = 0;
      if (v219)
      {
        v229 = *(_QWORD *)(v219 + 8);
        v228 = (_QWORD *)(v219 + 8);
        v227 = v229;
        *((_QWORD *)v223 + 1) = v229;
        if (v229)
          *(_QWORD *)(v227 + 16) = v223 + 8;
        *((_QWORD *)v223 + 2) = v228;
        *v228 = v223;
      }
      *((_WORD *)v223 + 25) = 2 * (v222 & 0x3F);
      v223[92] = 1;
      llvm::Value::setName((uint64_t ***)v223 + 4, (uint64_t)&v345);
      (*(void (**)(_QWORD, uint64_t *, llvm::Value ***, _QWORD, _QWORD))(**((_QWORD **)v218 + 10) + 16))(*((_QWORD *)v218 + 10), v225, &v342, *((_QWORD *)v218 + 6), *((_QWORD *)v218 + 7));
      v230 = *((unsigned int *)v218 + 2);
      if ((_DWORD)v230)
        break;
LABEL_245:
      v231 = v187;
      v232 = v187[4];
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v218 + 6) + 56) + 40) + 272, *v225);
      v234 = v233;
      v235 = (char *)operator new(0x80uLL);
      v236 = v235;
      *((_DWORD *)v235 + 21) = *((_DWORD *)v235 + 21) & 0x38000000 | 2;
      *(_QWORD *)v235 = 0;
      *((_QWORD *)v235 + 2) = 0;
      *((_QWORD *)v235 + 1) = 0;
      *((_QWORD *)v235 + 5) = 0;
      *((_QWORD *)v235 + 6) = 0;
      *((_QWORD *)v235 + 4) = 0;
      *((_QWORD *)v235 + 8) = **(_QWORD **)*v225 + 1576;
      v237 = (llvm::Value *)(v235 + 64);
      *((_QWORD *)v235 + 3) = v235 + 64;
      *((_QWORD *)v235 + 7) = v235 + 64;
      *((_QWORD *)v235 + 9) = 0;
      v235[80] = 61;
      v235[81] = 0;
      *((_DWORD *)v235 + 21) = 2;
      *(_OWORD *)(v235 + 88) = 0u;
      *(_OWORD *)(v235 + 104) = 0u;
      *((_DWORD *)v235 + 30) = 0;
      v238 = *v226;
      *(_QWORD *)v235 = v225;
      *((_QWORD *)v235 + 1) = v238;
      if (v238)
        *(_QWORD *)(v238 + 16) = v235 + 8;
      *((_QWORD *)v235 + 2) = v226;
      *v226 = (uint64_t)v235;
      *((_QWORD *)v235 + 4) = v232;
      if (v232)
      {
        v241 = *(_QWORD *)(v232 + 8);
        v240 = (_QWORD *)(v232 + 8);
        v239 = v241;
        *((_QWORD *)v235 + 5) = v241;
        if (v241)
          *(_QWORD *)(v239 + 16) = v235 + 40;
        *((_QWORD *)v235 + 6) = v240;
        *v240 = v235 + 32;
      }
      *((_WORD *)v235 + 41) = 2 * (v234 & 0x3F);
      v235[124] = 1;
      v346 = 257;
      (*(void (**)(_QWORD, llvm::Value *, std::string *, _QWORD, _QWORD))(**((_QWORD **)v218 + 10) + 16))(*((_QWORD *)v218 + 10), v237, &v345, *((_QWORD *)v218 + 6), *((_QWORD *)v218 + 7));
      v242 = *((unsigned int *)v218 + 2);
      v217 = v308;
      v187 = v231;
      if ((_DWORD)v242)
      {
        v250 = *(_QWORD *)v218;
        v251 = *(_QWORD *)v218 + 16 * v242;
        v252 = (unsigned __int8 **)(v236 + 112);
        do
        {
          v253 = *(_DWORD *)v250;
          v254 = *(unsigned __int8 **)(v250 + 8);
          if (v254)
          {
            if (!v253)
            {
              v342 = *(llvm::Value ***)(v250 + 8);
              llvm::MetadataTracking::track((uint64_t)&v342, v254, 2);
              v255 = *v252;
              goto LABEL_280;
            }
          }
          else
          {
            v255 = *v252;
            if (!*v252 && (v236[87] & 0x20) == 0)
              goto LABEL_277;
            if (!v253)
            {
              v342 = 0;
LABEL_280:
              if (v255)
                llvm::MetadataTracking::untrack((uint64_t)(v236 + 112), v255);
              v256 = (unsigned __int8 *)v342;
              *v252 = (unsigned __int8 *)v342;
              if (v256)
                llvm::MetadataTracking::retrack((uint64_t)&v342, v256, (uint64_t)(v236 + 112));
              goto LABEL_277;
            }
          }
          llvm::Value::setMetadata(v237, *(_DWORD *)v250, (llvm::MDNode *)v254);
LABEL_277:
          v250 += 16;
        }
        while (v250 != v251);
      }
      v218 = llvm::EscapeEnumerator::Next((uint64_t ***)&v310);
      if (!v218)
        goto LABEL_284;
    }
    v243 = *(_QWORD *)v218;
    v244 = *(_QWORD *)v218 + 16 * v230;
    v245 = (unsigned __int8 **)(v224 + 80);
    while (1)
    {
      v246 = *(_DWORD *)v243;
      v247 = *(unsigned __int8 **)(v243 + 8);
      if (v247)
      {
        if (!v246)
        {
          v340 = *(llvm::UndefValue **)(v243 + 8);
          llvm::MetadataTracking::track((uint64_t)&v340, v247, 2);
          v248 = *v245;
          goto LABEL_265;
        }
      }
      else
      {
        v248 = *v245;
        if (!*v245 && (v224[55] & 0x20) == 0)
          goto LABEL_262;
        if (!v246)
        {
          v340 = 0;
LABEL_265:
          if (v248)
            llvm::MetadataTracking::untrack((uint64_t)(v224 + 80), v248);
          v249 = (unsigned __int8 *)v340;
          *v245 = (unsigned __int8 *)v340;
          if (v249)
            llvm::MetadataTracking::retrack((uint64_t)&v340, v249, (uint64_t)(v224 + 80));
          goto LABEL_262;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v225, *(_DWORD *)v243, (llvm::MDNode *)v247);
LABEL_262:
      v243 += 16;
      if (v243 == v244)
        goto LABEL_245;
    }
  }
LABEL_284:
  v257 = (llvm::Value **)v187[7];
  v258 = (llvm::Value **)v187[8];
  if (v257 != v258)
  {
    do
    {
      v259 = *v257;
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)*v257 + 5) + 40, (uint64_t ***)*v257);
      v260 = *((_QWORD *)v259 + 3);
      v261 = (_QWORD *)*((_QWORD *)v259 + 4);
      *v261 = v260;
      *(_QWORD *)(v260 + 8) = v261;
      *((_QWORD *)v259 + 3) = 0;
      *((_QWORD *)v259 + 4) = 0;
      llvm::Value::deleteValue(v259);
      v262 = v257[1];
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v262 + 5) + 40, (uint64_t ***)v262);
      v263 = *((_QWORD *)v262 + 3);
      v264 = (_QWORD *)*((_QWORD *)v262 + 4);
      *v264 = v263;
      *(_QWORD *)(v263 + 8) = v264;
      *((_QWORD *)v262 + 3) = 0;
      *((_QWORD *)v262 + 4) = 0;
      llvm::Value::deleteValue(v262);
      v257 += 2;
    }
    while (v257 != v258);
    v257 = *v309;
  }
  v187[8] = v257;
  if (v314 != v316)
    free(v314);
  if (__p[0] != v327)
    free(__p[0]);
  if (v337)
  {
    llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)&__s2);
    v310 = &v336;
    sub_1C50B10F0((void ***)&v310);
    if (v335 != v334)
      free(v335);
    if ((_BYTE *)__s2 != v333)
      free((void *)__s2);
  }
  return 1;
}

uint64_t sub_1C52856AC(uint64_t *a1, uint64_t *a2, const llvm::APInt *a3, uint64_t *a4, unsigned int a5, _BYTE *a6)
{
  uint64_t v12;
  llvm::ConstantInt *v13;
  llvm::ValueHandleBase *v14;
  const llvm::APInt *v15;
  llvm::ConstantInt *v16;
  llvm::ValueHandleBase *v17;
  const llvm::APInt *v18;
  uint64_t v19;
  llvm::ConstantInt *v20;
  unsigned int v21;
  unint64_t v22;
  llvm::ValueHandleBase *v23;
  char v24;
  uint64_t result;
  llvm::ConstantInt *v26;
  llvm::ConstantInt *v27;
  llvm::ValueHandleBase *v28;
  llvm::ValueHandleBase *v29;
  _BYTE *v30;
  unsigned int v31;
  char v32;
  char v33;
  _QWORD v34[4];

  v34[3] = *MEMORY[0x1E0C80C00];
  v12 = *a1;
  v13 = *(llvm::ConstantInt **)(*a1 + 1960);
  v31 = *(_DWORD *)(v12 + 1968) >> 8;
  if (v31 > 0x40)
  {
    v26 = v13;
    llvm::APInt::initSlowCase((llvm::APInt *)&v30, 0, 0);
    v13 = v26;
  }
  else
  {
    v30 = 0;
  }
  v14 = llvm::ConstantInt::get(v13, (llvm::LLVMContext *)&v30, a3);
  if (v31 >= 0x41 && v30)
  {
    v28 = v14;
    MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
    v14 = v28;
  }
  v34[0] = v14;
  v16 = *(llvm::ConstantInt **)(*a1 + 1960);
  v31 = *(_DWORD *)(*a1 + 1968) >> 8;
  if (v31 > 0x40)
  {
    v27 = v16;
    llvm::APInt::initSlowCase((llvm::APInt *)&v30, 0, 0);
    v16 = v27;
  }
  else
  {
    v30 = 0;
  }
  v17 = llvm::ConstantInt::get(v16, (llvm::LLVMContext *)&v30, v15);
  if (v31 >= 0x41 && v30)
  {
    v29 = v17;
    MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
    v17 = v29;
  }
  v34[1] = v17;
  v19 = a5;
  v20 = *(llvm::ConstantInt **)(*a1 + 1960);
  v21 = *(_DWORD *)(*a1 + 1968);
  v31 = v21 >> 8;
  if (v21 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v30, v19, 0);
  }
  else
  {
    if (v21 <= 0xFF)
      v22 = 0;
    else
      v22 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v21);
    v30 = (_BYTE *)(v22 & v19);
  }
  v23 = llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&v30, v18);
  if (v31 >= 0x41 && v30)
    MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
  v34[2] = v23;
  v24 = 1;
  v33 = 1;
  if (*a6)
  {
    v30 = a6;
    v24 = 3;
  }
  v32 = v24;
  result = sub_1C509D7B0(a2, a3, a4, (llvm::Value *)v34, 3, (uint64_t)&v30);
  if (*(_BYTE *)(result + 16) != 62)
    return 0;
  return result;
}

uint64_t sub_1C52858F4(uint64_t *a1, uint64_t *a2, const llvm::APInt *a3, uint64_t *a4, int a5, _BYTE *a6)
{
  uint64_t v12;
  llvm::ConstantInt *v13;
  llvm::ValueHandleBase *v14;
  const llvm::APInt *v15;
  uint64_t v16;
  llvm::ConstantInt *v17;
  unsigned int v18;
  unint64_t v19;
  llvm::ValueHandleBase *v20;
  char v21;
  uint64_t result;
  llvm::ConstantInt *v23;
  llvm::ValueHandleBase *v24;
  _BYTE *v25;
  unsigned int v26;
  char v27;
  char v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x1E0C80C00];
  v12 = *a1;
  v13 = *(llvm::ConstantInt **)(*a1 + 1960);
  v26 = *(_DWORD *)(v12 + 1968) >> 8;
  if (v26 > 0x40)
  {
    v23 = v13;
    llvm::APInt::initSlowCase((llvm::APInt *)&v25, 0, 0);
    v13 = v23;
  }
  else
  {
    v25 = 0;
  }
  v14 = llvm::ConstantInt::get(v13, (llvm::LLVMContext *)&v25, a3);
  if (v26 >= 0x41 && v25)
  {
    v24 = v14;
    MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
    v14 = v24;
  }
  v29[0] = v14;
  v16 = a5;
  v17 = *(llvm::ConstantInt **)(*a1 + 1960);
  v18 = *(_DWORD *)(*a1 + 1968);
  v26 = v18 >> 8;
  if (v18 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v25, v16, 0);
  }
  else
  {
    if (v18 <= 0xFF)
      v19 = 0;
    else
      v19 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v18);
    v25 = (_BYTE *)(v19 & v16);
  }
  v20 = llvm::ConstantInt::get(v17, (llvm::LLVMContext *)&v25, v15);
  if (v26 >= 0x41 && v25)
    MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
  v29[1] = v20;
  v21 = 1;
  v28 = 1;
  if (*a6)
  {
    v25 = a6;
    v21 = 3;
  }
  v27 = v21;
  result = sub_1C509D7B0(a2, a3, a4, (llvm::Value *)v29, 2, (uint64_t)&v25);
  if (*(_BYTE *)(result + 16) != 62)
    return 0;
  return result;
}

uint64_t sub_1C5285ABC(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  uint64_t v5;

  llvm::initializeMachineBlockFrequencyInfoPass(a1, a2);
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachinePostDominatorTreePass(a1, v3);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  llvm::initializeMachineOptimizationRemarkEmitterPassPass(a1, v4);
  v5 = operator new();
  *(_QWORD *)v5 = "Shrink Wrap Pass";
  *(_QWORD *)(v5 + 8) = 16;
  *(_QWORD *)(v5 + 16) = "shrink-wrap";
  *(_QWORD *)(v5 + 24) = 11;
  *(_QWORD *)(v5 + 32) = &unk_1EF8F6FF4;
  *(_WORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 42) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = sub_1C5285B70;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v5, 1);
  return v5;
}

uint64_t sub_1C5285B70()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8F6FF4);
  *(_QWORD *)v1 = off_1E814A938;
  *(_QWORD *)(v1 + 248) = 0;
  *(_DWORD *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 264) = 0;
  *(_QWORD *)(v1 + 272) = 0;
  *(_QWORD *)(v1 + 280) = 0;
  *(_QWORD *)(v1 + 288) = v1 + 312;
  *(_QWORD *)(v1 + 296) = 0;
  *(_QWORD *)(v1 + 304) = 4;
  *(_QWORD *)(v1 + 320) = v1 + 336;
  *(_QWORD *)(v1 + 328) = 0x600000000;
  *(_DWORD *)(v1 + 384) = 0;
  *(_QWORD *)(v1 + 392) = v1 + 408;
  *(_QWORD *)(v1 + 400) = 0x600000000;
  *(_DWORD *)(v1 + 456) = 0;
  *(_QWORD *)(v1 + 472) = 0;
  *(_QWORD *)(v1 + 480) = 0;
  *(_QWORD *)(v1 + 464) = 0;
  *(_QWORD *)(v1 + 536) = 0;
  *(_DWORD *)(v1 + 560) = 0;
  *(_QWORD *)(v1 + 576) = 1;
  *(_QWORD *)&v2 = -1;
  *((_QWORD *)&v2 + 1) = -1;
  *(_OWORD *)(v1 + 632) = v2;
  *(_OWORD *)(v1 + 616) = v2;
  *(_OWORD *)(v1 + 600) = v2;
  *(_OWORD *)(v1 + 584) = v2;
  *(_QWORD *)(v1 + 648) = v1 + 664;
  *(_QWORD *)(v1 + 656) = 0x1000000000;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED7FFC38);
  if (v4 != -1)
  {
    v8[0] = sub_1C5285ABC;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED7FFC38, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C5285CD4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)a1 = off_1E814A938;
  v2 = *(void **)(a1 + 648);
  if (v2 != (void *)(a1 + 664))
    free(v2);
  if ((*(_BYTE *)(a1 + 576) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 584), 4);
  sub_1C61D92E0((uint64_t *)(a1 + 248));
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = *(void **)(a1 + 176);
  if (v3 != (void *)(a1 + 192))
    free(v3);
  v4 = *(void **)(a1 + 104);
  if (v4 != (void *)(a1 + 120))
    free(v4);
  v5 = *(void **)(a1 + 32);
  if (v5 != (void *)(a1 + 48))
    free(v5);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C5285D8C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)a1 = off_1E814A938;
  v2 = *(void **)(a1 + 648);
  if (v2 != (void *)(a1 + 664))
    free(v2);
  if ((*(_BYTE *)(a1 + 576) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 584), 4);
  sub_1C61D92E0((uint64_t *)(a1 + 248));
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = *(void **)(a1 + 176);
  if (v3 != (void *)(a1 + 192))
    free(v3);
  v4 = *(void **)(a1 + 104);
  if (v4 != (void *)(a1 + 120))
    free(v4);
  v5 = *(void **)(a1 + 32);
  if (v5 != (void *)(a1 + 48))
    free(v5);
  llvm::Pass::~Pass((llvm::Pass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5285E58()
{
  return "Shrink Wrapping analysis";
}

void *sub_1C5285E68(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachinePostDominatorTree::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineOptimizationRemarkEmitterPass::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1C5285EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  void **v9;
  void *v10;
  void **v11;
  void *v12;
  uint64_t v13;
  void **v14;
  void *v15;
  void **v16;
  void *v17;
  void **v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t ****v45;
  const llvm::Function *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  const llvm::Function **v52;
  const llvm::Function *v53;
  const llvm::Function **v54;
  int v55;
  BOOL v56;
  unsigned int v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t i;
  uint64_t v62;
  uint64_t j;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  llvm::MachineBasicBlock *NearestCommonDominator;
  int v86;
  int v87;
  int v88;
  int v89;
  llvm::MachineBasicBlock *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t ****v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  const llvm::Function **v106;
  const llvm::Function *v107;
  uint64_t *v108;
  void *__p;
  char *v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  int v114;
  _BYTE v115[264];

  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, *(const llvm::Function **)a2) & 1) != 0
    || *(_QWORD *)(a2 + 320) == a2 + 320)
  {
    return 0;
  }
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 112))(*(_QWORD *)(a2 + 16));
  if (dword_1ED7FFBF8)
  {
    if (dword_1ED7FFBF8 == 2)
      return 0;
  }
  else
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 72))(v4, a2))
      return 0;
    v5 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 560);
    if (*(_DWORD *)(v5 + 412) == 4)
    {
      v6 = *(_DWORD *)(v5 + 420);
      if (v6 != 6 && v6 != 0)
        return 0;
    }
    v8 = *(_QWORD *)(*(_QWORD *)a2 + 112);
    if (v8)
    {
      if ((*(_BYTE *)(v8 + 18) & 0x6C) != 0)
        return 0;
    }
  }
  llvm::RegisterClassInfo::runOnMachineFunction((llvm::RegisterClassInfo *)(a1 + 248), (const llvm::MachineFunction *)a2);
  v9 = **(void ****)(a1 + 8);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != &llvm::MachineDominatorTree::ID);
  *(_QWORD *)(a1 + 488) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), &llvm::MachineDominatorTree::ID);
  v11 = **(void ****)(a1 + 8);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != &llvm::MachinePostDominatorTree::ID);
  v13 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), &llvm::MachinePostDominatorTree::ID);
  v108 = (uint64_t *)(a1 + 504);
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 496) = v13;
  v14 = **(void ****)(a1 + 8);
  do
  {
    v15 = *v14;
    v14 += 2;
  }
  while (v15 != &llvm::MachineBlockFrequencyInfo::ID);
  *(_QWORD *)(a1 + 520) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), &llvm::MachineBlockFrequencyInfo::ID);
  v16 = **(void ****)(a1 + 8);
  do
  {
    v17 = *v16;
    v16 += 2;
  }
  while (v17 != &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(a1 + 528) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), &llvm::MachineLoopInfo::ID);
  v18 = **(void ****)(a1 + 8);
  do
  {
    v19 = *v18;
    v18 += 2;
  }
  while (v19 != &llvm::MachineOptimizationRemarkEmitterPass::ID);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v18 - 1) + 96))(*(v18 - 1), &llvm::MachineOptimizationRemarkEmitterPass::ID)+ 248);
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 520) + 248);
  if (v20)
    v20 = *(_QWORD *)(*(_QWORD *)(v20 + 8) + 16);
  *(_QWORD *)(a1 + 544) = v20;
  v21 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 104))(v21) + 64);
  *(_DWORD *)(a1 + 560) = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 120))(v21) + 88);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 328);
  sub_1C4AD764C((_DWORD *)(a1 + 576));
  *(_DWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 728) = a2;
  v22 = *(_QWORD *)(a2 + 328);
  v111 = 0;
  *(_QWORD *)&v112 = v22;
  __p = 0;
  v110 = 0;
  sub_1C61D9B18((char **)&__p, (uint64_t *)&v112);
  v23 = *(_QWORD *)(a1 + 528);
  v24 = (char *)__p;
  v25 = v110;
  *(_QWORD *)&v112 = v115;
  *((_QWORD *)&v112 + 1) = v115;
  v113 = 32;
  v114 = 0;
  if (v110 != __p)
  {
    do
    {
      v27 = *((_QWORD *)v25 - 1);
      v25 -= 8;
      v26 = v27;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v112, v27);
      v29 = *(uint64_t **)(v27 + 88);
      v28 = *(uint64_t **)(v27 + 96);
      if (v29 != v28)
      {
        while (1)
        {
          v30 = *v29;
          v31 = sub_1C477672C((uint64_t)&v112, *v29);
          v32 = (void *)*((_QWORD *)&v112 + 1);
          v33 = (void *)v112;
          v34 = (uint64_t *)((char *)&v113 + 4);
          if (*((_QWORD *)&v112 + 1) != (_QWORD)v112)
            v34 = &v113;
          if (v31 != (_QWORD *)(*((_QWORD *)&v112 + 1) + 8 * *(unsigned int *)v34))
          {
            v35 = *(_DWORD *)(v23 + 264);
            if (!v35)
              goto LABEL_49;
            v36 = *(_QWORD *)(v23 + 248);
            v37 = v35 - 1;
            v38 = (v35 - 1) & ((v26 >> 4) ^ (v26 >> 9));
            v39 = *(_QWORD *)(v36 + 16 * v38);
            if (v26 != v39)
            {
              v40 = 1;
              while (v39 != -4096)
              {
                v41 = v38 + v40++;
                v38 = v41 & v37;
                v39 = *(_QWORD *)(v36 + 16 * v38);
                if (v26 == v39)
                  goto LABEL_37;
              }
LABEL_49:
              if (*((_QWORD *)&v112 + 1) != (_QWORD)v112)
                free(*((void **)&v112 + 1));
              v45 = *(uint64_t *****)(a1 + 536);
              v46 = *(const llvm::Function **)a2;
              if ((*(_BYTE *)(*(_QWORD *)a2 + 23) & 0x20) == 0)
                goto LABEL_66;
              v47 = ***(_QWORD ***)v46;
              *(_QWORD *)&v112 = *(_QWORD *)a2;
              v48 = *(_DWORD *)(v47 + 2496);
              if (!v48)
              {
                v106 = 0;
                goto LABEL_159;
              }
              v49 = *(_QWORD *)(v47 + 2480);
              v50 = v48 - 1;
              v51 = v50 & ((v46 >> 4) ^ (v46 >> 9));
              v52 = (const llvm::Function **)(v49 + 40 * v51);
              v53 = *v52;
              if (*v52 != v46)
              {
                v54 = 0;
                v55 = 1;
                while (v53 != (const llvm::Function *)-4096)
                {
                  if (v54)
                    v56 = 0;
                  else
                    v56 = v53 == (const llvm::Function *)-8192;
                  if (v56)
                    v54 = v52;
                  v57 = v51 + v55++;
                  v51 = v57 & v50;
                  v52 = (const llvm::Function **)(v49 + 40 * v51);
                  v53 = *v52;
                  if (*v52 == v46)
                    goto LABEL_62;
                }
                if (v54)
                  v106 = v54;
                else
                  v106 = v52;
LABEL_159:
                v52 = (const llvm::Function **)sub_1C541AB24(v47 + 2480, (uint64_t)&v112, (uint64_t *)&v112, v106);
                v107 = (const llvm::Function *)v112;
                v52[3] = 0;
                v52[4] = 0;
                *v52 = v107;
                v52[1] = (const llvm::Function *)(v52 + 3);
                v52[2] = (const llvm::Function *)0x100000000;
              }
LABEL_62:
              v58 = *((unsigned int *)v52 + 4);
              if ((_DWORD)v58)
              {
                v59 = (_QWORD *)((char *)v52[1] + 8);
                v60 = 16 * v58;
                while (*((_DWORD *)v59 - 2))
                {
                  v59 += 2;
                  v60 -= 16;
                  if (!v60)
                    goto LABEL_66;
                }
                v94 = *v59;
                v112 = 0uLL;
                if (v94)
                {
                  v95 = v94;
                  if (*(_BYTE *)v94 != 15)
                    v95 = *(_QWORD *)(v94 - 8 * *(unsigned int *)(v94 + 8));
                  *(_QWORD *)&v112 = v95;
                  DWORD2(v112) = *(_DWORD *)(v94 + 28);
                }
              }
              else
              {
LABEL_66:
                v112 = 0uLL;
              }
              sub_1C5286A24(v45, (uint64_t)"UnsupportedIrreducibleCFG", 25, "Irreducible CFGs are not supported yet.", (const void *)0x27, &v112, *(_QWORD *)(a2 + 328));
              goto LABEL_153;
            }
LABEL_37:
            v42 = *(uint64_t ***)(v36 + 16 * v38 + 8);
            if (!v42)
              goto LABEL_49;
            while (*v42[4] != v30)
            {
              v42 = (uint64_t **)*v42;
              if (!v42)
                goto LABEL_49;
            }
          }
          if (++v29 == v28)
            goto LABEL_44;
        }
      }
      v32 = (void *)*((_QWORD *)&v112 + 1);
      v33 = (void *)v112;
LABEL_44:
      ;
    }
    while (v25 != v24);
    if (v32 != v33)
      free(v32);
  }
  v43 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 376))(v43, a2))
  {
    v44 = operator new();
    *(_OWORD *)v44 = 0u;
    *(_OWORD *)(v44 + 16) = 0u;
    *(_OWORD *)(v44 + 32) = 0u;
    *(_OWORD *)(v44 + 48) = 0u;
    *(_OWORD *)(v44 + 80) = 0u;
    *(_OWORD *)(v44 + 96) = 0u;
    *(_OWORD *)(v44 + 112) = 0u;
    *(_OWORD *)(v44 + 128) = 0u;
    *(_OWORD *)(v44 + 144) = 0u;
    *(_OWORD *)(v44 + 160) = 0u;
    *(_OWORD *)(v44 + 176) = 0u;
    *(_OWORD *)(v44 + 208) = 0u;
    *(_OWORD *)(v44 + 224) = 0u;
    *(_OWORD *)(v44 + 240) = 0u;
    *(_OWORD *)(v44 + 256) = 0u;
    *(_OWORD *)(v44 + 272) = 0u;
    *(_OWORD *)(v44 + 288) = 0u;
    *(_OWORD *)(v44 + 304) = 0u;
    *(_OWORD *)(v44 + 320) = 0u;
    *(_OWORD *)(v44 + 336) = 0u;
    *(_OWORD *)(v44 + 352) = 0u;
    *(_OWORD *)(v44 + 368) = 0u;
    *(_QWORD *)(v44 + 384) = 0;
    *(_OWORD *)(v44 + 192) = 0u;
    *(_OWORD *)(v44 + 64) = 0u;
    *(_QWORD *)(v44 + 48) = v44 + 64;
    *(_DWORD *)(v44 + 60) = 2;
    *(_QWORD *)(v44 + 104) = v44 + 120;
    *(_DWORD *)(v44 + 116) = 6;
    *(_QWORD *)(v44 + 176) = v44 + 192;
    *(_DWORD *)(v44 + 188) = 6;
    *(_QWORD *)(v44 + 248) = v44 + 264;
    *(_DWORD *)(v44 + 260) = 6;
    *(_QWORD *)(v44 + 320) = v44 + 336;
    *(_DWORD *)(v44 + 332) = 6;
  }
  else
  {
    v44 = 0;
  }
  for (i = *(_QWORD *)(a2 + 328); ; i = *(_QWORD *)(i + 8))
  {
    if (i == a2 + 320)
    {
      v66 = *(_QWORD *)(a1 + 504);
      if (!v66 || v66 == *(_QWORD *)(a1 + 568) || !*(_QWORD *)(a1 + 512))
        break;
      v67 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 112))(*(_QWORD *)(a2 + 16));
      v68 = *v108;
      while (1)
      {
        v69 = *(_QWORD *)(*(_QWORD *)(a1 + 520) + 248);
        if (v69)
        {
          v70 = *(_DWORD *)(v69 + 176);
          if (v70)
          {
            v71 = *(_QWORD *)(a1 + 544);
            v72 = *(_QWORD *)(v69 + 160);
            v73 = v70 - 1;
            v74 = v73 & ((v68 >> 4) ^ (v68 >> 9));
            v75 = *(_QWORD *)(v72 + 16 * v74);
            if (v75 == v68)
            {
LABEL_98:
              v76 = *(unsigned int *)(v72 + 16 * v74 + 8);
              if (v76 != 0xFFFFFFFFLL && v71 < *(_QWORD *)(*(_QWORD *)(v69 + 8) + 24 * v76 + 16))
                goto LABEL_115;
            }
            else
            {
              v86 = 1;
              while (v75 != -4096)
              {
                v87 = v74 + v86++;
                v74 = v87 & v73;
                v75 = *(_QWORD *)(v72 + 16 * v74);
                if (v75 == v68)
                  goto LABEL_98;
              }
            }
            v77 = *(_QWORD *)(a1 + 512);
            v78 = ((v77 >> 4) ^ (v77 >> 9)) & v73;
            v79 = *(_QWORD *)(v72 + 16 * v78);
            if (v79 == v77)
            {
LABEL_101:
              v80 = *(unsigned int *)(v72 + 16 * v78 + 8);
              if (v80 != 0xFFFFFFFFLL && v71 < *(_QWORD *)(*(_QWORD *)(v69 + 8) + 24 * v80 + 16))
                goto LABEL_115;
            }
            else
            {
              v88 = 1;
              while (v79 != -4096)
              {
                v89 = v78 + v88++;
                v78 = v89 & v73;
                v79 = *(_QWORD *)(v72 + 16 * v78);
                if (v79 == v77)
                  goto LABEL_101;
              }
            }
          }
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v67 + 312))(v67, v68) & 1) == 0)
        {
          v68 = *v108;
LABEL_115:
          NearestCommonDominator = (llvm::MachineBasicBlock *)sub_1C5287698(v68, *(uint64_t **)(v68 + 64), *(uint64_t **)(v68 + 72), *(llvm::MachineDominatorTree **)(a1 + 488));
          *(_QWORD *)(a1 + 504) = NearestCommonDominator;
          if (!NearestCommonDominator)
            goto LABEL_128;
          goto LABEL_116;
        }
        if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v67 + 320))(v67, *(_QWORD *)(a1 + 512)) & 1) != 0)
          goto LABEL_128;
        v81 = *(uint64_t ***)(a1 + 512);
        v82 = v81[11];
        v83 = v81[12];
        if (v82 == v83)
        {
          NearestCommonDominator = *(llvm::MachineBasicBlock **)(a1 + 512);
        }
        else
        {
          v84 = *(_QWORD *)(a1 + 496);
          NearestCommonDominator = *(llvm::MachineBasicBlock **)(a1 + 512);
          do
          {
            NearestCommonDominator = (llvm::MachineBasicBlock *)llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(*(_QWORD *)(v84 + 248), (uint64_t)NearestCommonDominator, *v82);
            if (!NearestCommonDominator)
              break;
            ++v82;
          }
          while (v82 != v83);
        }
        v90 = NearestCommonDominator == (llvm::MachineBasicBlock *)v81 ? 0 : NearestCommonDominator;
        *(_QWORD *)(a1 + 512) = v90;
        if (!v90)
        {
LABEL_128:
          v91 = *(_QWORD *)(a1 + 504);
          if (v91)
          {
            if (v91 != *(_QWORD *)(a1 + 568))
            {
              v92 = *(_QWORD *)(a1 + 512);
              if (v92)
              {
                v93 = *(_QWORD *)(a2 + 56);
                *(_QWORD *)(v93 + 656) = v91;
                *(_QWORD *)(v93 + 664) = v92;
              }
            }
          }
          goto LABEL_141;
        }
LABEL_116:
        sub_1C5286C3C(a1, NearestCommonDominator, v44);
        v68 = *(_QWORD *)(a1 + 504);
        if (!v68 || !*(_QWORD *)(a1 + 512))
          goto LABEL_128;
      }
    }
    if (*(_BYTE *)(i + 189))
    {
      v96 = *(uint64_t *****)(a1 + 536);
      v97 = *(_QWORD *)(i + 56);
      v112 = 0uLL;
      v98 = *(_QWORD *)(v97 + 56);
      if (v98)
      {
        v99 = *(_QWORD *)(v98 - 8 * *(unsigned int *)(v98 + 8));
        if (*(_BYTE *)v99 != 15)
          v99 = *(_QWORD *)(v99 - 8 * *(unsigned int *)(v99 + 8));
        *(_QWORD *)&v112 = v99;
        DWORD2(v112) = *(_DWORD *)(v98 + 4);
        HIDWORD(v112) = *(unsigned __int16 *)(v98 + 2);
      }
      sub_1C5286A24(v96, (uint64_t)"UnsupportedEHFunclets", 21, "EH Funclets are not supported yet.", (const void *)0x22, &v112, i);
      break;
    }
    if (!*(_BYTE *)(i + 184) && !*(_BYTE *)(i + 202))
    {
      for (j = *(_QWORD *)(i + 56); j != i + 48; j = *(_QWORD *)(j + 8))
      {
        if (sub_1C52872BC(a1, j, v44))
        {
          sub_1C5286C3C(a1, (llvm::MachineBasicBlock *)i, v44);
          v64 = *(_QWORD *)(a1 + 504);
          if (v64)
            v65 = v64 == *(_QWORD *)(a1 + 568);
          else
            v65 = 1;
          if (v65)
            goto LABEL_141;
          goto LABEL_76;
        }
        if ((*(_BYTE *)j & 4) == 0)
        {
          while ((*(_WORD *)(j + 44) & 8) != 0)
            j = *(_QWORD *)(j + 8);
        }
      }
      continue;
    }
    sub_1C5286C3C(a1, (llvm::MachineBasicBlock *)i, v44);
    v62 = *(_QWORD *)(a1 + 504);
    if (!v62 || v62 == *(_QWORD *)(a1 + 568))
      break;
LABEL_76:
    if (!*(_QWORD *)(a1 + 512))
      break;
  }
LABEL_141:
  if (v44)
  {
    v100 = *(void **)(v44 + 320);
    if (v100 != (void *)(v44 + 336))
      free(v100);
    v101 = *(void **)(v44 + 248);
    if (v101 != (void *)(v44 + 264))
      free(v101);
    v102 = *(void **)(v44 + 176);
    if (v102 != (void *)(v44 + 192))
      free(v102);
    v103 = *(void **)(v44 + 104);
    if (v103 != (void *)(v44 + 120))
      free(v103);
    v104 = *(void **)(v44 + 48);
    if (v104 != (void *)(v44 + 64))
      free(v104);
    MEMORY[0x1CAA32FC0](v44, 0x10E0C4069A138BFLL);
  }
LABEL_153:
  if (__p)
  {
    v110 = (char *)__p;
    operator delete(__p);
  }
  return 0;
}

void sub_1C52868F8(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&v7, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = v7;
  *(_QWORD *)v7 |= 8uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &v7 == (void **)a1)
    goto LABEL_9;
  if (v8 < 7)
  {
    v6 = v8;
LABEL_7:
    memcpy(v4, v3, 8 * v6);
    v3 = v7;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
  v6 = v8;
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = *(void **)a1;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_9:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

void sub_1C5286A24(uint64_t ****a1, uint64_t a2, uint64_t a3, const void *a4, const void *a5, __int128 *a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  void **v18;
  char *v19;
  unint64_t v20;
  void **v21;
  const void *v22[10];
  void *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t (**v26)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[260];
  int v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)****a1;
  if (*(_QWORD *)(v14 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v14 + 72) + 48))(*(_QWORD *)(v14 + 72)))
  {
    v15 = **(_QWORD **)(a7 + 32);
    v27 = 16;
    v28 = 2;
    v29 = v15;
    v30 = *a6;
    v31 = "shrink-wrap";
    v32 = a2;
    v33 = a3;
    v34 = 0;
    v35 = 0;
    v36 = v38;
    v37 = 0x400000000;
    v38[256] = 0;
    v39 = -1;
    v40 = a7;
    v26 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&unk_1E8141F00;
    v22[0] = a4;
    v22[1] = a5;
    sub_1C53B17B4((uint64_t)&v36, v22);
    sub_1C61F875C((uint64_t)v22, (uint64_t)&v26);
    v22[0] = &unk_1E8141F00;
    v26 = &off_1E814E790;
    v16 = (char *)v36;
    if ((_DWORD)v37)
    {
      v17 = (unint64_t)v37 << 6;
      do
      {
        v18 = (void **)&v16[v17];
        if (v16[v17 - 17] < 0)
          operator delete(*(v18 - 5));
        if (*((char *)v18 - 41) < 0)
          operator delete(*(v18 - 8));
        v17 -= 64;
      }
      while (v17);
      v16 = (char *)v36;
    }
    if (v16 != v38)
      free(v16);
    llvm::MachineOptimizationRemarkEmitter::emit(a1, (llvm::DiagnosticInfoOptimizationBase *)v22);
    v22[0] = &off_1E814E790;
    v19 = (char *)v23;
    if (v24)
    {
      v20 = (unint64_t)v24 << 6;
      do
      {
        v21 = (void **)&v19[v20];
        if (v19[v20 - 17] < 0)
          operator delete(*(v21 - 5));
        if (*((char *)v21 - 41) < 0)
          operator delete(*(v21 - 8));
        v20 -= 64;
      }
      while (v20);
      v19 = (char *)v23;
    }
    if (v19 != (char *)&v25)
      free(v19);
  }
}

void sub_1C5286C3C(uint64_t a1, llvm::MachineBasicBlock *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t NearestCommonDominator;
  uint64_t v8;
  uint64_t v9;
  unint64_t FirstTerminator;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  _QWORD *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  _QWORD *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  _QWORD *v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  _QWORD *v89;
  unsigned int v90;
  char v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  _QWORD v99[5];

  v99[4] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 504);
  NearestCommonDominator = (uint64_t)a2;
  if (v6)
  {
    v8 = *(_QWORD *)(a1 + 488);
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v8);
    NearestCommonDominator = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator(*(_QWORD *)(v8 + 1320), v6, (uint64_t)a2);
  }
  *(_QWORD *)(a1 + 504) = NearestCommonDominator;
  if (*(_QWORD *)(a1 + 512))
  {
    if (!sub_1C498DE30(*(_QWORD *)(a1 + 496), (uint64_t)a2))
      goto LABEL_113;
    v9 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(*(_QWORD *)(*(_QWORD *)(a1 + 496) + 248), *(_QWORD *)(a1 + 512), (uint64_t)a2);
    *(_QWORD *)(a1 + 512) = v9;
    if ((llvm::MachineBasicBlock *)v9 != a2)
      goto LABEL_16;
  }
  else
  {
    *(_QWORD *)(a1 + 512) = a2;
  }
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(a2);
  if ((llvm::MachineBasicBlock *)((char *)a2 + 48) != (llvm::MachineBasicBlock *)FirstTerminator)
  {
    v11 = FirstTerminator;
    while (!sub_1C52872BC(a1, v11, a3))
    {
      if ((*(_BYTE *)v11 & 4) == 0)
      {
        while ((*(_WORD *)(v11 + 44) & 8) != 0)
          v11 = *(_QWORD *)(v11 + 8);
      }
      v11 = *(_QWORD *)(v11 + 8);
      if ((llvm::MachineBasicBlock *)v11 == (llvm::MachineBasicBlock *)((char *)a2 + 48))
        goto LABEL_15;
    }
    if (*((_QWORD *)a2 + 11) != *((_QWORD *)a2 + 12))
    {
      v92 = *(_QWORD *)(a1 + 512);
      v93 = *(uint64_t **)(v92 + 88);
      v94 = *(uint64_t **)(v92 + 96);
      if (v93 == v94)
      {
        v96 = *(_QWORD *)(a1 + 512);
      }
      else
      {
        v95 = *(_QWORD *)(a1 + 496);
        v96 = *(_QWORD *)(a1 + 512);
        do
        {
          v96 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(*(_QWORD *)(v95 + 248), v96, *v93);
          if (!v96)
            break;
          ++v93;
        }
        while (v93 != v94);
      }
      if (v96 == v92)
        v9 = 0;
      else
        v9 = v96;
      *(_QWORD *)(a1 + 512) = v9;
      if (!v9)
        return;
      while (1)
      {
LABEL_17:
        v12 = *(_QWORD *)(a1 + 488);
        v13 = *(_QWORD *)(a1 + 504);
        llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v12);
        v14 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v12 + 1320), v13, v9);
        v15 = *(_QWORD *)(a1 + 504);
        v16 = *(_QWORD *)(a1 + 512);
        if (!v14)
        {
          v28 = *(_QWORD *)(a1 + 488);
          llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v28);
          *(_QWORD *)(a1 + 504) = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator(*(_QWORD *)(v28 + 1320), v15, v16);
          goto LABEL_65;
        }
        v17 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::dominates(*(_QWORD *)(*(_QWORD *)(a1 + 496) + 248), *(_QWORD *)(a1 + 512), *(_QWORD *)(a1 + 504));
        v18 = *(_QWORD *)(a1 + 504);
        if (!v17)
        {
          v27 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(*(_QWORD *)(*(_QWORD *)(a1 + 496) + 248), *(_QWORD *)(a1 + 512), v18);
          *(_QWORD *)(a1 + 512) = v27;
          goto LABEL_33;
        }
        v19 = *(_QWORD *)(a1 + 528);
        v20 = *(_DWORD *)(v19 + 264);
        if (!v20)
          return;
        v21 = *(_QWORD *)(v19 + 248);
        v22 = v20 - 1;
        v23 = v22 & ((v18 >> 4) ^ (v18 >> 9));
        v24 = *(_QWORD *)(v21 + 16 * v23);
        if (v18 == v24)
        {
LABEL_24:
          if (*(_QWORD *)(v21 + 16 * v23 + 8))
          {
            v27 = *(_QWORD *)(a1 + 512);
            goto LABEL_33;
          }
        }
        else
        {
          v25 = 1;
          while (v24 != -4096)
          {
            v26 = v23 + v25++;
            v23 = v26 & v22;
            v24 = *(_QWORD *)(v21 + 16 * v23);
            if (v18 == v24)
              goto LABEL_24;
          }
        }
        v27 = *(_QWORD *)(a1 + 512);
        v29 = ((v27 >> 4) ^ (v27 >> 9)) & v22;
        v30 = *(_QWORD *)(v21 + 16 * v29);
        if (v27 != v30)
        {
          v31 = 1;
          while (v30 != -4096)
          {
            v32 = v29 + v31++;
            v29 = v32 & v22;
            v30 = *(_QWORD *)(v21 + 16 * v29);
            if (v27 == v30)
              goto LABEL_32;
          }
          return;
        }
LABEL_32:
        if (!*(_QWORD *)(v21 + 16 * v29 + 8))
          return;
LABEL_33:
        if (!v27)
          goto LABEL_65;
        v33 = *(_QWORD *)(a1 + 528);
        v34 = *(_DWORD *)(v33 + 264);
        if (!v34)
          goto LABEL_65;
        v35 = *(_QWORD *)(a1 + 504);
        v36 = *(_QWORD *)(v33 + 248);
        v37 = v34 - 1;
        v38 = ((v35 >> 4) ^ (v35 >> 9)) & v37;
        v39 = *(_QWORD *)(v36 + 16 * v38);
        v40 = v27 >> 4;
        v41 = v38;
        if (v35 == v39)
        {
LABEL_39:
          if (*(_QWORD *)(v36 + 16 * v41 + 8))
            goto LABEL_45;
        }
        else
        {
          v42 = 1;
          v43 = *(_QWORD *)(v36 + 16 * (((v35 >> 4) ^ (v35 >> 9)) & v37));
          LODWORD(v41) = ((v35 >> 4) ^ (v35 >> 9)) & v37;
          while (v43 != -4096)
          {
            v44 = v41 + v42++;
            v41 = v44 & v37;
            v43 = *(_QWORD *)(v36 + 16 * v41);
            if (v35 == v43)
              goto LABEL_39;
          }
        }
        v45 = v37 & (v40 ^ (v27 >> 9));
        v46 = *(_QWORD *)(v36 + 16 * v45);
        if (v27 != v46)
        {
          v47 = 1;
          while (v46 != -4096)
          {
            v48 = v45 + v47++;
            v45 = v48 & v37;
            v46 = *(_QWORD *)(v36 + 16 * v45);
            if (v27 == v46)
              goto LABEL_44;
          }
          goto LABEL_65;
        }
LABEL_44:
        if (*(_QWORD *)(v36 + 16 * v45 + 8))
        {
LABEL_45:
          if (v35 == v39)
          {
LABEL_49:
            v51 = *(_QWORD **)(v36 + 16 * v38 + 8);
            if (!v51)
              goto LABEL_53;
            v52 = 0;
            do
            {
              v51 = (_QWORD *)*v51;
              ++v52;
            }
            while (v51);
          }
          else
          {
            v49 = 1;
            while (v39 != -4096)
            {
              v50 = v38 + v49++;
              v38 = v50 & v37;
              v39 = *(_QWORD *)(v36 + 16 * v38);
              if (v35 == v39)
                goto LABEL_49;
            }
LABEL_53:
            v52 = 0;
          }
          v53 = v37 & (v40 ^ (v27 >> 9));
          v54 = (uint64_t *)(v36 + 16 * v53);
          v55 = *v54;
          v56 = v53;
          if (v27 == *v54)
          {
LABEL_58:
            v59 = *(_QWORD **)(v36 + 16 * v56 + 8);
            if (!v59)
              goto LABEL_62;
            v60 = 0;
            do
            {
              v59 = (_QWORD *)*v59;
              ++v60;
            }
            while (v59);
          }
          else
          {
            v57 = 1;
            LODWORD(v56) = v53;
            while (v55 != -4096)
            {
              v58 = v56 + v57++;
              v56 = v58 & v37;
              v55 = *(_QWORD *)(v36 + 16 * v56);
              if (v27 == v55)
                goto LABEL_58;
            }
LABEL_62:
            v60 = 0;
          }
          if (v52 > v60)
          {
            v61 = sub_1C5287698(*(_QWORD *)(a1 + 504), *(uint64_t **)(v35 + 64), *(uint64_t **)(v35 + 72), *(llvm::MachineDominatorTree **)(a1 + 488));
            *(_QWORD *)(a1 + 504) = v61;
            if (!v61)
              return;
            goto LABEL_65;
          }
          v97 = v99;
          v98 = 0x400000000;
          v62 = *v54;
          if (v27 == *v54)
          {
LABEL_71:
            v65 = *(_QWORD **)(v36 + 16 * v53 + 8);
          }
          else
          {
            v63 = 1;
            while (v62 != -4096)
            {
              v64 = v53 + v63++;
              v53 = v64 & v37;
              v62 = *(_QWORD *)(v36 + 16 * v53);
              if (v27 == v62)
                goto LABEL_71;
            }
            v65 = 0;
          }
          llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getExitingBlocks(v65, (uint64_t)&v97);
          v66 = *(_QWORD *)(a1 + 512);
          if ((_DWORD)v98)
          {
            v67 = (char *)v97;
            v68 = (char *)v97 + 8 * v98;
            v69 = *(_QWORD *)(a1 + 512);
LABEL_75:
            v70 = *(uint64_t **)(*(_QWORD *)v67 + 88);
            v71 = *(uint64_t **)(*(_QWORD *)v67 + 96);
            if (v70 != v71)
            {
              v72 = *(_QWORD *)(a1 + 496);
              v66 = v69;
              while (1)
              {
                v73 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(*(_QWORD *)(v72 + 248), v66, *v70);
                if (!v73)
                  break;
                v66 = v73;
                if (++v70 == v71)
                {
                  if (v73 == v69)
                    goto LABEL_102;
                  v67 += 8;
                  v69 = v73;
                  if (v67 != v68)
                    goto LABEL_75;
                  goto LABEL_83;
                }
              }
            }
            goto LABEL_102;
          }
          if (!v66)
            goto LABEL_102;
LABEL_83:
          v74 = *(_QWORD *)(a1 + 528);
          v75 = *(_DWORD *)(v74 + 264);
          if (v75)
          {
            v76 = *(_QWORD *)(v74 + 248);
            v77 = v75 - 1;
            v78 = v77 & ((v66 >> 4) ^ (v66 >> 9));
            v79 = *(_QWORD *)(v76 + 16 * v78);
            if (v66 == v79)
            {
LABEL_88:
              v82 = *(_QWORD **)(v76 + 16 * v78 + 8);
              if (!v82)
                goto LABEL_92;
              v83 = 0;
              do
              {
                v82 = (_QWORD *)*v82;
                ++v83;
              }
              while (v82);
            }
            else
            {
              v80 = 1;
              while (v79 != -4096)
              {
                v81 = v78 + v80++;
                v78 = v81 & v77;
                v79 = *(_QWORD *)(v76 + 16 * v78);
                if (v66 == v79)
                  goto LABEL_88;
              }
LABEL_92:
              v83 = 0;
            }
            v84 = *(_QWORD *)(a1 + 512);
            v85 = ((v84 >> 4) ^ (v84 >> 9)) & v77;
            v86 = *(_QWORD *)(v76 + 16 * v85);
            if (v84 != v86)
            {
              v87 = 1;
              while (v86 != -4096)
              {
                v88 = v85 + v87++;
                v85 = v88 & v77;
                v86 = *(_QWORD *)(v76 + 16 * v85);
                if (v84 == v86)
                  goto LABEL_97;
              }
              goto LABEL_102;
            }
LABEL_97:
            v89 = *(_QWORD **)(v76 + 16 * v85 + 8);
            if (!v89)
              goto LABEL_102;
            v90 = 0;
            do
            {
              v89 = (_QWORD *)*v89;
              ++v90;
            }
            while (v89);
            if (v83 >= v90)
              goto LABEL_102;
            v91 = 1;
          }
          else
          {
LABEL_102:
            v66 = 0;
            v91 = 0;
          }
          *(_QWORD *)(a1 + 512) = v66;
          if (v97 != v99)
            free(v97);
          if ((v91 & 1) == 0)
            return;
        }
LABEL_65:
        v9 = *(_QWORD *)(a1 + 512);
        if (!v9)
          return;
      }
    }
LABEL_113:
    *(_QWORD *)(a1 + 512) = 0;
    return;
  }
LABEL_15:
  v9 = *(_QWORD *)(a1 + 512);
LABEL_16:
  if (v9)
    goto LABEL_17;
}

uint64_t sub_1C52872BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 *v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  _DWORD *v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  void *v47[2];
  _BYTE v48[48];
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int16 **)(a2 + 16);
  v7 = *v6;
  if ((v7 - 1) <= 1 && (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 48) & 8) != 0)
    return 1;
  v8 = *(unsigned __int16 *)(a2 + 44);
  v21 = (v8 & 0xC) == 0;
  v9 = (v8 >> 2) & 1;
  if (v21)
    LOBYTE(v9) = 1;
  v10 = *((_QWORD *)v6 + 1);
  if ((v9 & 1) != 0)
  {
    if ((v10 & 0x80000) != 0)
      return 1;
  }
  else
  {
    if ((v10 & 0x80000) != 0)
      return 1;
    v44 = a2;
    result = 1;
    while ((*(_WORD *)(v44 + 44) & 8) != 0)
    {
      v44 = *(_QWORD *)(v44 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v44 + 16) + 10) & 8) != 0)
        return result;
    }
  }
  if ((v7 - 1) <= 1 && (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 48) & 0x10) != 0)
    return 1;
  if ((v9 & 1) != 0)
  {
    if ((v10 & 0x100000) != 0)
      return 1;
  }
  else
  {
    if ((v10 & 0x100000) != 0)
      return 1;
    v45 = a2;
    result = 1;
    while ((*(_WORD *)(v45 + 44) & 8) != 0)
    {
      v45 = *(_QWORD *)(v45 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v45 + 16) + 10) & 0x10) != 0)
        return result;
    }
  }
  if (*(_DWORD *)(a1 + 552) == v7 || *(_DWORD *)(a1 + 556) == v7)
    return 1;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 16);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 176))(v12);
  v14 = *(unsigned int *)(a2 + 40);
  if (!(_DWORD)v14)
    return 0;
  v15 = v13;
  v16 = *(int **)(a2 + 32);
  v17 = &v16[8 * v14];
  while (1)
  {
    v18 = *v16;
    if (*v16 == 12)
      break;
    if (*v16)
      goto LABEL_62;
    if ((v18 & 0x1000000) == 0)
    {
      v19 = v18 & 0x30000000;
      v20 = v18 & 0x10FFF00;
      v21 = v19 || v20 == 0x1000000;
      if (v21)
        goto LABEL_64;
    }
    v22 = v16[1];
    if (!(_DWORD)v22)
      goto LABEL_64;
    v23 = *(unsigned __int16 *)(a2 + 44);
    v21 = (v23 & 0xC) == 0;
    v24 = (v23 >> 2) & 1;
    if (v21)
      LOBYTE(v24) = 1;
    v25 = *(_QWORD *)(a2 + 16);
    v26 = *(_QWORD *)(v25 + 8);
    if ((v24 & 1) != 0)
    {
      if ((v26 & 0x80) == 0)
        goto LABEL_28;
    }
    else
    {
      v38 = a2;
      if ((v26 & 0x80) == 0)
      {
        while ((*(_WORD *)(v38 + 44) & 8) != 0)
        {
          v38 = *(_QWORD *)(v38 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v38 + 16) + 8) & 0x80) != 0)
            goto LABEL_29;
        }
LABEL_28:
        if ((_DWORD)v22 == *(_DWORD *)(a1 + 560))
          return 1;
      }
    }
LABEL_29:
    if (*(_QWORD *)(a1 + 296) > v22 && *(_WORD *)(*(_QWORD *)(a1 + 288) + 2 * v22))
      return 1;
    v27 = *(_QWORD *)(v25 + 8);
    if ((v24 & 1) != 0)
    {
      if ((v27 & 0x20) != 0)
        goto LABEL_62;
    }
    else
    {
      v39 = a2;
      if ((v27 & 0x20) != 0)
        goto LABEL_62;
      while ((*(_WORD *)(v39 + 44) & 8) != 0)
      {
        v39 = *(_QWORD *)(v39 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v39 + 16) + 8) & 0x20) != 0)
          goto LABEL_62;
      }
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 592))(v15) & 1) != 0)
      return 1;
LABEL_62:
    if (*(_BYTE *)v16 == 5 && **(unsigned __int16 **)(a2 + 16) - 13 > 1)
      return 1;
LABEL_64:
    result = 0;
    v16 += 8;
    if (v16 == v17)
      return result;
  }
  v28 = *(unsigned int *)(a1 + 656);
  if (!(_DWORD)v28)
  {
    v47[0] = v48;
    v47[1] = (void *)0x600000000;
    v49 = 0;
    v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 728) + 16) + 112))(*(_QWORD *)(*(_QWORD *)(a1 + 728) + 16));
    (*(void (**)(uint64_t, _QWORD, void **, uint64_t))(*(_QWORD *)v29 + 264))(v29, *(_QWORD *)(a1 + 728), v47, a3);
    v30 = v47[0];
    if (v49)
    {
      v31 = 0;
      v32 = (v49 - 1) & 0xFFFFFFC0;
      v33 = (uint64_t *)v47[0];
      while (1)
      {
        v35 = *v33++;
        v34 = v35;
        v36 = v32 + v31 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v49;
        v37 = v36 & v34;
        if (v37)
          break;
        v31 -= 64;
        if (v32 + v31 == -64)
          goto LABEL_56;
      }
      v40 = __clz(__rbit64(v37));
      if (v40 + 1 != (_DWORD)v31)
      {
        v41 = v40 - v31;
        do
        {
          v46 = v41;
          sub_1C4838834(a1 + 576, &v46);
          v41 = sub_1C476BA0C(v47, v41 + 1, v49, 1u);
        }
        while (v41 != -1);
        v30 = v47[0];
      }
    }
LABEL_56:
    if (v30 != v48)
      free(v30);
    v28 = *(unsigned int *)(a1 + 656);
    if (!(_DWORD)v28)
      goto LABEL_62;
  }
  v42 = *(_DWORD **)(a1 + 648);
  v43 = &v42[v28];
  while (((*(_DWORD *)(*((_QWORD *)v16 + 2) + (((unint64_t)*v42 >> 3) & 0x1FFFFFFC)) >> *v42) & 1) != 0)
  {
    if (++v42 == v43)
      goto LABEL_62;
  }
  return 1;
}

uint64_t sub_1C5287698(uint64_t a1, uint64_t *a2, uint64_t *a3, llvm::MachineDominatorTree *this)
{
  uint64_t NearestCommonDominator;
  uint64_t *v8;
  uint64_t v9;

  NearestCommonDominator = a1;
  if (a2 != a3)
  {
    v8 = a2;
    NearestCommonDominator = a1;
    do
    {
      v9 = *v8;
      llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)this);
      NearestCommonDominator = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator(*((_QWORD *)this + 165), NearestCommonDominator, v9);
      if (!NearestCommonDominator)
        break;
      ++v8;
    }
    while (v8 != a3);
  }
  if (NearestCommonDominator == a1)
    return 0;
  else
    return NearestCommonDominator;
}

uint64_t sub_1C5287718()
{
  __int128 v1;
  int v2;

  v2 = 1;
  *(_QWORD *)&v1 = "enable the shrink-wrapping pass";
  *((_QWORD *)&v1 + 1) = 31;
  sub_1C6212B34(&v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C506F830, &qword_1ED7FFB78, &dword_1C475E000);
}

uint64_t sub_1C528776C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Prepare SjLj exceptions";
  *(_QWORD *)(v2 + 8) = 23;
  *(_QWORD *)(v2 + 16) = "sjljehprepare";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F2F88;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C52877FC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

double sub_1C52877FC()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1EF8F2F88;
  *(_DWORD *)(v0 + 24) = 2;
  *(_QWORD *)v0 = &off_1E814A9F8;
  *(_QWORD *)(v0 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  return result;
}

void sub_1C5287854(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5287878()
{
  return "SJLJ Exception Handling preparation";
}

uint64_t sub_1C5287888(_QWORD *a1, uint64_t a2)
{
  llvm::ArrayType *v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  llvm::ArrayType *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _DWORD *v13;
  int v14;
  llvm::ArrayType *v15;
  __int128 v16;
  llvm::ArrayType *v17;
  llvm::ArrayType *v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::ArrayType *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)a2 + 1912), 0);
  v5 = a1[20];
  if (!v5)
  {
    v7 = *(_QWORD **)a2;
    goto LABEL_5;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 144))(v5);
  v7 = *(_QWORD **)a2;
  LODWORD(v15) = v6;
  if (v6 == 64)
  {
    v8 = (llvm::ArrayType *)(*v7 + 1984);
    goto LABEL_6;
  }
  if (v6 > 15)
  {
    if (v6 == 16)
    {
      v8 = (llvm::ArrayType *)(*v7 + 1936);
      goto LABEL_6;
    }
    if (v6 == 128)
    {
      v8 = (llvm::ArrayType *)(*v7 + 2008);
      goto LABEL_6;
    }
    if (v6 != 32)
      goto LABEL_17;
LABEL_5:
    v8 = (llvm::ArrayType *)(*v7 + 1960);
    goto LABEL_6;
  }
  if (v6 == 8)
  {
    v8 = (llvm::ArrayType *)(*v7 + 1912);
    goto LABEL_6;
  }
  if (v6 == 1)
  {
    v8 = (llvm::ArrayType *)(*v7 + 1888);
    goto LABEL_6;
  }
LABEL_17:
  v13 = sub_1C5270984(*v7 + 2168, &v15);
  v8 = (llvm::ArrayType *)*((_QWORD *)v13 + 1);
  if (!v8)
  {
    v8 = (llvm::ArrayType *)sub_1C484358C(*v7 + 2040, 24, 3);
    v14 = (int)v15;
    *(_QWORD *)v8 = v7;
    *((_QWORD *)v8 + 2) = 0;
    *((_QWORD *)v8 + 1) = (v14 << 8) | 0xDu;
    *((_QWORD *)v13 + 1) = v8;
  }
LABEL_6:
  a1[4] = v8;
  llvm::ArrayType::get(v8, (llvm::Type *)4);
  a1[5] = v9;
  llvm::ArrayType::get(v4, (llvm::Type *)5);
  a1[6] = v10;
  v11 = *(uint64_t **)v4;
  v15 = v4;
  v16 = *((_OWORD *)a1 + 2);
  v17 = v4;
  v18 = v4;
  v19 = v10;
  a1[7] = llvm::StructType::get(v11, (uint64_t)&v15, 6, 0);
  return 1;
}

uint64_t sub_1C5287A40(uint64_t a1, uint64_t ***a2)
{
  unsigned int *v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64x2_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t **v15;
  unsigned int v16;
  uint64_t **v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  llvm::ValueSymbolTable *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t **v48;
  uint64_t **v49;
  uint64_t *j;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t ***v56;
  uint64_t ***v57;
  uint64_t ***v58;
  uint64_t v59;
  uint64_t **v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  llvm::Instruction *v86;
  uint64_t *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  llvm::Instruction *v92;
  uint64_t v93;
  llvm::Instruction *v94;
  uint64_t v95;
  uint64_t v96;
  llvm::Instruction *v97;
  uint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t *v104;
  llvm *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  llvm::Instruction *v109;
  char *v110;
  uint64_t v111;
  uint64_t **v112;
  uint64_t **v113;
  unsigned __int8 v114;
  unsigned __int8 v115;
  _DWORD *v116;
  char *v117;
  uint64_t **v118;
  llvm::PointerType *v119;
  llvm::Type *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t **v123;
  uint64_t v124;
  llvm::Type *v125;
  const llvm::APInt *v126;
  llvm::UndefValue *v127;
  uint64_t *v128;
  uint64_t v129;
  llvm::ValueHandleBase *v130;
  llvm::UndefValue *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t ****v136;
  uint64_t ***v137;
  int v138;
  int v139;
  uint64_t ***v140;
  uint64_t **v141;
  char *v142;
  uint64_t **v143;
  llvm::Value *v144;
  int v145;
  char *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t **v149;
  llvm::ConstantInt *v150;
  unsigned int v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  BOOL v158;
  uint64_t v159;
  llvm::GetElementPtrInst *v161;
  uint64_t *v162;
  uint64_t *v163;
  llvm::GetElementPtrInst *v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  char v168;
  char *v169;
  char *v170;
  llvm::Value *v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  unsigned __int8 *v176;
  llvm::GetElementPtrInst *v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  char v181;
  char *v182;
  char *v183;
  llvm::Value *v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t ***v188;
  uint64_t v189;
  unsigned __int8 *v190;
  uint64_t v191;
  llvm::Value *v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  _QWORD *v196;
  llvm::UndefValue *v197;
  uint64_t v198;
  llvm::Value *v199;
  char *v200;
  char *v201;
  unsigned __int8 **v202;
  int v203;
  unsigned __int8 *v204;
  unsigned __int8 *v205;
  unsigned __int8 *v206;
  char *v207;
  char *v208;
  unsigned __int8 **v209;
  int v210;
  unsigned __int8 *v211;
  unsigned __int8 *v212;
  uint64_t ***v213;
  uint64_t ***v214;
  unsigned __int8 *v215;
  uint64_t ***v216;
  uint64_t v217;
  int v218;
  unsigned __int8 **v219;
  unsigned __int8 *v220;
  llvm::GetElementPtrInst *v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  char v226;
  char v227;
  char *v228;
  char *v229;
  uint64_t *v230;
  llvm::Value *v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t **v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t **v239;
  uint64_t *v240;
  llvm::GetElementPtrInst *v241;
  uint64_t *v242;
  uint64_t v243;
  char v244;
  char v245;
  char *v246;
  char *v247;
  uint64_t *v248;
  llvm::Value *v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t **v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t ***v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t **v260;
  uint64_t **v261;
  uint64_t **v262;
  uint64_t v263;
  llvm::GetElementPtrInst *v264;
  uint64_t *v265;
  llvm::GetElementPtrInst *v266;
  const llvm::APInt *v267;
  uint64_t v268;
  uint64_t **v269;
  uint64_t v270;
  llvm::ConstantInt *v271;
  llvm::ValueHandleBase *v272;
  uint64_t *v273;
  char v274;
  char v275;
  char *v276;
  char *v277;
  uint64_t *v278;
  llvm::Value *v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t **v284;
  uint64_t v285;
  llvm::GetElementPtrInst *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t **v289;
  uint64_t *v290;
  char v291;
  char v292;
  char *v293;
  char *v294;
  uint64_t *v295;
  llvm::Value *v296;
  uint64_t v297;
  _QWORD *v298;
  uint64_t v299;
  uint64_t ***v300;
  uint64_t **v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t **v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t **v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  const llvm::APInt *v311;
  uint64_t v312;
  llvm::ConstantInt *v313;
  unint64_t v314;
  unint64_t v315;
  llvm::ValueHandleBase *v316;
  uint64_t v317;
  uint64_t **v318;
  uint64_t v319;
  char *v320;
  _QWORD *v321;
  llvm::Value *v322;
  char *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  llvm::ValueSymbolTable *v327;
  uint64_t **k;
  uint64_t **v329;
  BOOL v330;
  uint64_t **v331;
  uint64_t *v332;
  uint64_t *m;
  llvm::Instruction *v334;
  uint64_t **v335;
  uint64_t v336;
  _QWORD *v337;
  _QWORD *v338;
  _QWORD *v339;
  _QWORD *v340;
  char *v341;
  char *v342;
  llvm::Value *v343;
  char *v344;
  uint64_t **v345;
  uint64_t **v346;
  BOOL v347;
  uint64_t **v348;
  uint64_t *v349;
  uint64_t *v350;
  uint64_t *v351;
  int v352;
  uint64_t *v353;
  uint64_t v354;
  llvm::Value *v355;
  llvm::Type ***v356;
  _DWORD *v357;
  _DWORD *v358;
  uint64_t v359;
  BOOL v360;
  llvm::Instruction *v361;
  char *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t **v366;
  uint64_t v367;
  char *v368;
  _QWORD *v369;
  llvm::Value *v370;
  char *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  llvm::ValueSymbolTable *v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  char *v379;
  char *v380;
  unsigned __int8 **v381;
  int v382;
  unsigned __int8 *v383;
  unsigned __int8 *v384;
  unsigned __int8 *v385;
  uint64_t *v386;
  unsigned __int8 **v387;
  int v388;
  unsigned __int8 *v389;
  unsigned __int8 *v390;
  uint64_t ***v391;
  unsigned __int8 *v392;
  char *v393;
  char *v394;
  unsigned __int8 **v395;
  int v396;
  unsigned __int8 *v397;
  unsigned __int8 *v398;
  unsigned __int8 *v399;
  char *v400;
  char *v401;
  unsigned __int8 **v402;
  int v403;
  unsigned __int8 *v404;
  unsigned __int8 *v405;
  unsigned __int8 *v406;
  uint64_t v407;
  llvm::ValueSymbolTable *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t ***v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t **v414;
  _QWORD *v416;
  uint64_t **v417;
  uint64_t **v418;
  uint64_t v419;
  _QWORD *v420;
  char *v421;
  llvm::Value *v422;
  uint64_t v423;
  _QWORD *v424;
  int v425[2];
  uint64_t v426[4];
  __int16 v427;
  int v428;
  _QWORD v429[17];
  void *v430;
  uint64_t v431;
  _BYTE v432[128];
  void *v433;
  uint64_t v434;
  _BYTE v435[128];
  void *v436;
  uint64_t v437;
  _BYTE v438[128];
  void *v439;
  void *v440;
  uint64_t v441;
  int v442;
  _WORD v443[8];
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  void *v448;
  uint64_t v449;
  _BYTE v450[16];
  __int16 v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  char *v456;
  uint64_t v457;
  _BYTE v458[16];
  __int16 v459;
  uint64_t v460;

  v460 = *MEMORY[0x1E0C80C00];
  v3 = (unsigned int *)a2[5];
  v4 = (uint64_t **)(**(_QWORD **)v3 + 1576);
  v5 = llvm::PointerType::get(*(llvm::PointerType **)(a1 + 56), 0);
  *(_QWORD *)(a1 + 64) = sub_1C6212CB8((uint64_t)v3, "_Unwind_SjLj_Register", 0x15uLL, 0, v4, v5);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = (uint64_t **)(**(_QWORD **)v3 + 1576);
  v8 = llvm::PointerType::get(*(llvm::PointerType **)(a1 + 56), 0);
  *(_QWORD *)(a1 + 80) = sub_1C6212CB8((uint64_t)v3, "_Unwind_SjLj_Unregister", 0x17uLL, 0, v7, v8);
  *(_QWORD *)(a1 + 88) = v9;
  v439 = (void *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)v3 + 1912), (llvm::Type *)v3[69]);
  *(_QWORD *)(a1 + 104) = llvm::Intrinsic::getDeclaration((uint64_t *)v3, 147, (uint64_t *)&v439, 1);
  *(_QWORD *)(a1 + 112) = llvm::Intrinsic::getDeclaration((uint64_t *)v3, 288, 0, 0);
  *(_QWORD *)(a1 + 120) = llvm::Intrinsic::getDeclaration((uint64_t *)v3, 287, 0, 0);
  *(_QWORD *)(a1 + 96) = llvm::Intrinsic::getDeclaration((uint64_t *)v3, 72, 0, 0);
  *(_QWORD *)(a1 + 128) = llvm::Intrinsic::getDeclaration((uint64_t *)v3, 70, 0, 0);
  *(_QWORD *)(a1 + 136) = llvm::Intrinsic::getDeclaration((uint64_t *)v3, 67, 0, 0);
  v416 = (_QWORD *)a1;
  *(_QWORD *)(a1 + 144) = llvm::Intrinsic::getDeclaration((uint64_t *)v3, 68, 0, 0);
  v436 = v438;
  v437 = 0x1000000000;
  v433 = v435;
  v434 = 0x1000000000;
  v429[0] = 1;
  v10 = 1;
  v11 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v429[v10] = v11;
    v10 += 2;
  }
  while (v10 != 17);
  v430 = v432;
  v431 = 0x1000000000;
  v12 = a2[10];
  v418 = (uint64_t **)(a2 + 9);
  if (v12 == (uint64_t **)(a2 + 9))
  {
    v46 = 0;
    goto LABEL_61;
  }
  do
  {
    if (v12)
      v13 = v12 - 3;
    else
      v13 = 0;
    v14 = (uint64_t **)v13[5];
    if (v14 != v13 + 5)
    {
      if (v14)
        v15 = v14 - 3;
      else
        v15 = 0;
      v16 = *((unsigned __int8 *)v15 + 16) - 40;
      if (v16 >= 0xFFFFFFF5)
        v17 = v15;
      else
        v17 = 0;
      v18 = *((unsigned __int8 *)v17 + 16);
      if (v14 && (v18 == 33 ? (v19 = v16 >= 0xFFFFFFF5) : (v19 = 0), v19))
      {
        v20 = *(v17 - 4);
        if (v20 && !*(_BYTE *)(v20 + 16) && *(_QWORD *)(v20 + 24) == v17[9] && *(_DWORD *)(v20 + 36) == 60)
        {
          v21 = *(v17 - 12);
          v22 = (char *)operator new(0x60uLL);
          *((_DWORD *)v22 + 13) = *((_DWORD *)v22 + 13) & 0x38000000 | 1;
          *((_QWORD *)v22 + 1) = 0;
          *((_QWORD *)v22 + 2) = 0;
          *(_QWORD *)v22 = 0;
          *((_QWORD *)v22 + 4) = ***(_QWORD ***)v21 + 1576;
          *((_QWORD *)v22 + 3) = v22 + 32;
          *((_QWORD *)v22 + 5) = 0;
          *((_WORD *)v22 + 24) = 30;
          *((_WORD *)v22 + 25) = 0;
          *((_DWORD *)v22 + 13) = 1;
          *(_OWORD *)(v22 + 56) = 0u;
          v23 = v22 + 56;
          *(_OWORD *)(v22 + 72) = 0u;
          *((_DWORD *)v22 + 22) = 0;
          v24 = v17[5];
          v25 = v17 + 3;
          *((_QWORD *)v22 + 9) = v24;
          *(_WORD *)(v24 + 18) &= ~0x8000u;
          if ((v22[55] & 0x10) != 0
            && (v40 = *(_QWORD *)(v24 + 56)) != 0
            && (v41 = *(llvm::ValueSymbolTable **)(v40 + 104)) != 0)
          {
            llvm::ValueSymbolTable::reinsertValue(v41, (llvm::Value *)(v22 + 32));
            v42 = *(_QWORD *)v22;
            v43 = *v25;
            *((_QWORD *)v22 + 7) = *v25;
            *((_QWORD *)v22 + 8) = v25;
            *(_QWORD *)(v43 + 8) = v23;
            *v25 = (uint64_t)v23;
            if (v42)
            {
              **((_QWORD **)v22 + 2) = *((_QWORD *)v22 + 1);
              v44 = *((_QWORD *)v22 + 1);
              if (v44)
                *(_QWORD *)(v44 + 16) = *((_QWORD *)v22 + 2);
            }
          }
          else
          {
            v26 = *v25;
            *((_QWORD *)v22 + 7) = *v25;
            *((_QWORD *)v22 + 8) = v25;
            *(_QWORD *)(v26 + 8) = v23;
            *v25 = (uint64_t)v23;
          }
          *(_QWORD *)v22 = v21;
          v29 = *(_QWORD *)(v21 + 8);
          v28 = (_QWORD *)(v21 + 8);
          v27 = v29;
          *((_QWORD *)v22 + 1) = v29;
          if (v29)
            *(_QWORD *)(v27 + 16) = v22 + 8;
          *((_QWORD *)v22 + 2) = v28;
          *v28 = v22;
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v17[5] + 40, (uint64_t ***)v17);
          v30 = v17[3];
          v31 = (_QWORD *)v17[4];
          *v31 = v30;
          *(_QWORD *)(v30 + 8) = v31;
          *v25 = 0;
          v17[4] = 0;
          llvm::Value::deleteValue((llvm::Value *)v17);
        }
        else
        {
          v34 = v434;
          if (v434 >= (unint64_t)HIDWORD(v434))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v433, (uint64_t)v435, v434 + 1, 8);
            v34 = v434;
          }
          *((_QWORD *)v433 + v34) = v17;
          LODWORD(v434) = v434 + 1;
          v35 = *(v17 - 8);
          v36 = v35 + 40;
          for (i = *(_QWORD *)(v35 + 48); i != v36; i = *(_QWORD *)(i + 8))
          {
            v38 = (_BYTE *)(i - 24);
            if (i)
              v39 = i - 24;
            else
              v39 = 0;
            if (*(_BYTE *)(v39 + 16) != 83)
              goto LABEL_53;
          }
          v38 = 0;
LABEL_53:
          if (v38[16] == 94)
            v45 = v38;
          else
            v45 = 0;
          v439 = v45;
          sub_1C61EA984((uint64_t)v429, (uint64_t *)&v439);
        }
      }
      else if (v14)
      {
        if (v18 == 29 && v16 >= 0xFFFFFFF5)
        {
          v33 = v437;
          if (v437 >= (unint64_t)HIDWORD(v437))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v436, (uint64_t)v438, v437 + 1, 8);
            v33 = v437;
          }
          *((_QWORD *)v436 + v33) = v17;
          LODWORD(v437) = v437 + 1;
        }
      }
    }
    v12 = (uint64_t **)v12[1];
  }
  while (v12 != v418);
  if (!(_DWORD)v434)
  {
    v46 = 0;
    goto LABEL_61;
  }
  v48 = a2[10];
  if (v48)
    v49 = v48 - 3;
  else
    v49 = 0;
  for (j = v49[6]; ; j = (uint64_t *)j[1])
  {
    v51 = (uint64_t)(j - 3);
    v52 = j ? (uint64_t)(j - 3) : 0;
    if (*(_BYTE *)(v52 + 16) != 59 || *(_BYTE *)(*(j - 7) + 16) != 16)
      break;
    v53 = j[2];
    v54 = *(_QWORD *)(*(_QWORD *)(v53 + 56) + 80);
    v55 = v54 ? v54 - 24 : 0;
    if (v53 != v55 || (*((_WORD *)j - 3) & 0x40) != 0)
      break;
  }
  if ((*((_WORD *)a2 + 9) & 1) == 0)
  {
    v56 = (uint64_t ***)a2[11];
LABEL_87:
    v57 = v56;
    goto LABEL_88;
  }
  llvm::Function::BuildLazyArguments((llvm::Function *)a2);
  v56 = (uint64_t ***)a2[11];
  if ((*((_WORD *)a2 + 9) & 1) == 0)
    goto LABEL_87;
  llvm::Function::BuildLazyArguments((llvm::Function *)a2);
  v57 = (uint64_t ***)a2[11];
LABEL_88:
  v58 = &v57[5 * (_QWORD)a2[12]];
  if (v56 != v58)
  {
    while (llvm::Value::isSwiftError((llvm::Value *)v56))
    {
LABEL_216:
      v56 += 5;
      if (v56 == v58)
        goto LABEL_89;
    }
    v127 = (llvm::UndefValue *)*v56;
    v128 = **a2;
    v129 = *v128;
    v130 = *(llvm::ValueHandleBase **)(*v128 + 1560);
    if (!v130)
    {
      v150 = *(llvm::ConstantInt **)(v129 + 1888);
      v151 = *(_DWORD *)(v129 + 1896);
      LODWORD(v440) = v151 >> 8;
      if (v151 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v439, 1, 0);
      }
      else
      {
        if (v151 <= 0xFF)
          v152 = 0;
        else
          v152 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v151);
        v439 = (void *)(v152 & 1);
      }
      v130 = llvm::ConstantInt::get(v150, (llvm::LLVMContext *)&v439, v126);
      if (v440 >= 0x41 && v439)
        MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
      *(_QWORD *)(v129 + 1560) = v130;
    }
    v131 = llvm::UndefValue::get(v127, v125);
    if ((*((_BYTE *)v56 + 23) & 0x10) == 0)
    {
      v141 = 0;
      v142 = &byte_1C871356D;
      goto LABEL_208;
    }
    v132 = ***v56;
    v133 = *(_QWORD *)(v132 + 152);
    v134 = *(unsigned int *)(v132 + 168);
    if ((_DWORD)v134)
    {
      LODWORD(v135) = (v134 - 1) & ((v56 >> 4) ^ (v56 >> 9));
      v136 = (uint64_t ****)(v133 + 16 * v135);
      v137 = *v136;
      if (*v136 == v56)
      {
LABEL_207:
        v140 = v136[1];
        v143 = *v140;
        v142 = (char *)(v140 + 2);
        v141 = v143;
LABEL_208:
        v443[0] = 773;
        v439 = v142;
        v440 = v141;
        v441 = (uint64_t)".tmp";
        v144 = sub_1C4FC8748((uint64_t)v130, (uint64_t *)v56, (uint64_t)v131, (uint64_t)&v439, v51, 0);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v56, v144, (llvm::Value *)1);
        v145 = *((_DWORD *)v144 + 5);
        if ((v145 & 0x40000000) != 0)
          v146 = (char *)*((_QWORD *)v144 - 1);
        else
          v146 = (char *)v144 - 32 * (v145 & 0x7FFFFFF);
        if (*((_QWORD *)v146 + 4))
        {
          **((_QWORD **)v146 + 6) = *((_QWORD *)v146 + 5);
          v147 = *((_QWORD *)v146 + 5);
          if (v147)
            *(_QWORD *)(v147 + 16) = *((_QWORD *)v146 + 6);
        }
        *((_QWORD *)v146 + 4) = v56;
        v148 = v56 + 1;
        v149 = v56[1];
        *((_QWORD *)v146 + 5) = v149;
        if (v149)
          v149[2] = (uint64_t *)(v146 + 40);
        *((_QWORD *)v146 + 6) = v148;
        *v148 = v146 + 32;
        goto LABEL_216;
      }
      v138 = 1;
      while (v137 != (uint64_t ***)-4096)
      {
        v139 = v135 + v138++;
        v135 = v139 & (v134 - 1);
        v137 = *(uint64_t ****)(v133 + 16 * v135);
        if (v137 == v56)
        {
          v136 = (uint64_t ****)(v133 + 16 * v135);
          goto LABEL_207;
        }
      }
    }
    v136 = (uint64_t ****)(v133 + 16 * v134);
    goto LABEL_207;
  }
LABEL_89:
  v420 = v433;
  v59 = v434;
  v60 = a2[10];
  if (v60 != v418)
  {
    v61 = v450;
    v419 = 8 * v434;
    do
    {
      v417 = v60;
      if (v60)
        v62 = (uint64_t)(v60 - 3);
      else
        v62 = 0;
      v63 = v62 + 40;
      v64 = *(_QWORD *)(v62 + 48);
      if (v64 != v62 + 40)
      {
        do
        {
          if (v64)
            v65 = v64 - 24;
          else
            v65 = 0;
          v66 = *(_QWORD *)(v65 + 8);
          if (v66)
          {
            if (*(_QWORD *)(v66 + 8)
              || (v67 = *(_QWORD *)(v66 + 24), *(_QWORD *)(v67 + 40) != v62)
              || *(_BYTE *)(v67 + 16) == 83)
            {
              if (!v64
                || *(_BYTE *)(v65 + 16) != 59
                || *(_BYTE *)(*(_QWORD *)(v65 - 32) + 16) != 16
                || ((v68 = *(_QWORD *)(v65 + 40), (v69 = *(_QWORD *)(*(_QWORD *)(v68 + 56) + 80)) != 0)
                  ? (v70 = v69 - 24)
                  : (v70 = 0),
                    v68 != v70 || (*(_WORD *)(v65 + 18) & 0x40) != 0))
              {
                v71 = 0;
                v448 = v61;
                v449 = 0x1000000000;
                do
                {
                  v72 = *(_QWORD *)(v66 + 24);
                  if (*(_QWORD *)(v72 + 40) != v62 || *(_BYTE *)(v72 + 16) == 83)
                  {
                    if (v71 >= HIDWORD(v449))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v448, (uint64_t)v61, v71 + 1, 8);
                      v71 = v449;
                    }
                    *((_QWORD *)v448 + v71) = v72;
                    v71 = v449 + 1;
                    LODWORD(v449) = v449 + 1;
                  }
                  v66 = *(_QWORD *)(v66 + 8);
                }
                while (v66);
                v73 = v61;
                v74 = v59;
                v439 = v443;
                v440 = v443;
                v441 = 32;
                v442 = 0;
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v439, v62);
                while ((_DWORD)v449)
                {
                  v75 = *((_QWORD *)v448 + v449 - 1);
                  LODWORD(v449) = v449 - 1;
                  if (*(_BYTE *)(v75 + 16) == 83)
                  {
                    v76 = *(_DWORD *)(v75 + 20) & 0x7FFFFFF;
                    if ((_DWORD)v76)
                    {
                      v77 = 0;
                      v78 = 0;
                      v79 = 32 * v76;
                      do
                      {
                        v80 = *(_DWORD *)(v75 + 20);
                        if ((v80 & 0x40000000) != 0)
                          v81 = *(_QWORD *)(v75 - 8);
                        else
                          v81 = v75 - 32 * (v80 & 0x7FFFFFF);
                        if (*(_QWORD *)(v81 + v78) == v65)
                          sub_1C528A3B8(*(_QWORD *)(v81 + 32 * *(unsigned int *)(v75 + 60) + v77), (llvm::SmallPtrSetImplBase *)&v439);
                        v78 += 32;
                        v77 += 8;
                      }
                      while (v79 != v78);
                    }
                  }
                  else
                  {
                    sub_1C528A3B8(*(_QWORD *)(v75 + 40), (llvm::SmallPtrSetImplBase *)&v439);
                  }
                }
                v59 = v74;
                v61 = v73;
                v63 = v62 + 40;
                if ((_DWORD)v59)
                {
                  v82 = v419;
                  v83 = v420;
                  while (1)
                  {
                    v84 = *(_QWORD *)(*v83 - 64);
                    if (v84 != v62)
                    {
                      v85 = sub_1C477672C((uint64_t)&v439, v84);
                      v87 = v440 == v439 ? (uint64_t *)((char *)&v441 + 4) : &v441;
                      if (v85 != (_QWORD *)((char *)v440 + 8 * *(unsigned int *)v87))
                        break;
                    }
                    ++v83;
                    v82 -= 8;
                    if (!v82)
                      goto LABEL_140;
                  }
                  llvm::DemoteRegToStack((llvm *)v65, (llvm::Instruction *)1, 0, v86);
                }
LABEL_140:
                if (v440 != v439)
                  free(v440);
                if (v448 != v61)
                  free(v448);
              }
            }
          }
          v64 = *(_QWORD *)(v64 + 8);
        }
        while (v64 != v63);
      }
      v60 = (uint64_t **)v417[1];
    }
    while (v60 != v418);
  }
  v88 = v420;
  if ((_DWORD)v59)
  {
    do
    {
      v89 = *(_QWORD *)(*v88 - 64);
      v90 = *(_QWORD *)(v89 + 48);
      v91 = v90;
      if (v90 == v89 + 40)
      {
LABEL_153:
        v92 = 0;
      }
      else
      {
        while (1)
        {
          v92 = (llvm::Instruction *)(v91 - 24);
          v93 = v91 ? v91 - 24 : 0;
          if (*(_BYTE *)(v93 + 16) != 83)
            break;
          v91 = *(_QWORD *)(v91 + 8);
          if (v91 == v89 + 40)
            goto LABEL_153;
        }
      }
      if (*((_BYTE *)v92 + 16) == 94)
        v94 = v92;
      else
        v94 = 0;
      v439 = v443;
      v440 = v443;
      v441 = 8;
      v442 = 0;
      v95 = v90 - 24;
      if (v90)
        v96 = v90 - 24;
      else
        v96 = 0;
      if (*(_BYTE *)(v96 + 16) == 83)
      {
        do
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v439, v95);
          v90 = *(_QWORD *)(v90 + 8);
          v95 = v90 - 24;
          if (v90)
            v98 = v90 - 24;
          else
            v98 = 0;
        }
        while (*(_BYTE *)(v98 + 16) == 83);
        v99 = v440;
        v100 = v439;
        if (HIDWORD(v441) != v442)
        {
          if (v440 == v439)
            v101 = HIDWORD(v441);
          else
            v101 = v441;
          if ((_DWORD)v101)
          {
            v102 = 8 * v101;
            v103 = (unint64_t *)v440;
            while (*v103 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v103;
              v102 -= 8;
              if (!v102)
                goto LABEL_181;
            }
          }
          else
          {
            v103 = (unint64_t *)v440;
          }
          v104 = (unint64_t *)((char *)v440 + 8 * v101);
          if (v103 != v104)
          {
            v105 = (llvm *)*v103;
LABEL_177:
            llvm::DemotePHIToStack(v105, 0, v97);
            v106 = v103 + 1;
            while (v106 != v104)
            {
              v107 = *v106++;
              v105 = (llvm *)v107;
              if (v107 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v103 = v106 - 1;
                goto LABEL_177;
              }
            }
          }
LABEL_181:
          v108 = *(_QWORD *)(v89 + 48);
          if (v108)
            v109 = (llvm::Instruction *)(v108 - 24);
          else
            v109 = 0;
          llvm::Instruction::moveBefore(v94, v109);
          v99 = v440;
          v100 = v439;
        }
        if (v99 != v100)
          free(v99);
      }
      ++v88;
    }
    while (v88 != &v420[v59]);
  }
  *(_QWORD *)v425 = 0;
  v110 = (char *)v430;
  v111 = v431;
  v112 = a2[10];
  v113 = a2[5];
  llvm::DataLayout::getAlignment((uint64_t)(v113 + 34), v416[7]);
  v115 = v114;
  v116 = operator new(0x68uLL);
  v117 = (char *)(v116 + 8);
  v116[13] = v116[13] & 0x38000000 | 1;
  *(_QWORD *)v116 = 0;
  *((_QWORD *)v116 + 1) = 0;
  *((_QWORD *)v116 + 2) = 0;
  *((_QWORD *)v116 + 3) = v116 + 8;
  if (v112)
    v118 = v112 - 3;
  else
    v118 = 0;
  v119 = (llvm::PointerType *)v416[7];
  v120 = (llvm::Type *)*((unsigned int *)v113 + 69);
  v439 = "fn_context";
  v443[0] = 259;
  v414 = v118;
  v121 = v118[6];
  if (v121)
    v122 = (uint64_t)(v121 - 3);
  else
    v122 = 0;
  llvm::AllocaInst::AllocaInst((uint64_t)(v116 + 8), v119, v120, 0, v115, (uint64_t)&v439, v122);
  v416[19] = v117;
  if (!(_DWORD)v111)
    goto LABEL_195;
  v421 = &v110[8 * v111];
  do
  {
    v153 = *(_QWORD *)(*(_QWORD *)v110 + 40);
    v154 = v153 + 40;
    v155 = *(_QWORD *)(v153 + 48);
    v423 = *(_QWORD *)v110;
    if (v155 != v153 + 40)
    {
      while (1)
      {
        v156 = v155 - 24;
        if (!v155)
          v156 = 0;
        if (*(_BYTE *)(v156 + 16) != 83)
          break;
        v155 = *(_QWORD *)(v155 + 8);
        if (v155 == v154)
          goto LABEL_242;
      }
      v157 = *(unsigned __int8 *)(v155 - 8) - 38;
      v158 = v157 > 0x38;
      v159 = (1 << v157) & 0x100060000000001;
      if (v158 || v159 == 0)
        v154 = v155;
      else
        v154 = *(_QWORD *)(v155 + 8);
    }
LABEL_242:
    sub_1C4D8ADA0((uint64_t)&v448, (uint64_t **)v153, v154, 0, 0, 0);
    v161 = (llvm::GetElementPtrInst *)v416[7];
    v162 = (uint64_t *)v416[19];
    v439 = "__data";
    v443[0] = 259;
    v163 = (uint64_t *)sub_1C6212D88((uint64_t)&v448, v161, v162, 0, 2u, (uint64_t)&v439);
    v164 = (llvm::GetElementPtrInst *)v416[5];
    v439 = "exception_gep";
    v443[0] = 259;
    v165 = sub_1C6212D88((uint64_t)&v448, v164, v163, 0, 0, (uint64_t)&v439);
    v166 = v416[4];
    v456 = "exn_val";
    v459 = 259;
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v452 + 56) + 40) + 272, v166);
    v168 = v167;
    v169 = (char *)operator new(0x60uLL);
    v170 = v169;
    v171 = (llvm::Value *)(v169 + 32);
    *((_QWORD *)v169 + 2) = 0;
    *((_QWORD *)v169 + 3) = v169 + 32;
    v443[0] = 257;
    *((_QWORD *)v169 + 4) = v166;
    *((_QWORD *)v169 + 5) = 0;
    *((_WORD *)v169 + 24) = 60;
    *((_DWORD *)v169 + 13) = 1;
    *(_OWORD *)(v169 + 56) = 0u;
    *(_OWORD *)(v169 + 72) = 0u;
    *((_DWORD *)v169 + 22) = 0;
    *(_QWORD *)v169 = v165;
    *((_QWORD *)v169 + 1) = 0;
    if (v165)
    {
      v174 = *(_QWORD *)(v165 + 8);
      v173 = (_QWORD *)(v165 + 8);
      v172 = v174;
      *((_QWORD *)v169 + 1) = v174;
      if (v174)
        *(_QWORD *)(v172 + 16) = v169 + 8;
      *((_QWORD *)v169 + 2) = v173;
      *v173 = v169;
    }
    *((_WORD *)v169 + 25) = (2 * (v168 & 0x3F)) | 1;
    v169[92] = 1;
    llvm::Value::setName((uint64_t ***)v169 + 4, (uint64_t)&v439);
    (*(void (**)(uint64_t, llvm::Value *, char **, uint64_t, uint64_t))(*(_QWORD *)v455 + 16))(v455, v171, &v456, v452, v453);
    if ((_DWORD)v449)
    {
      v200 = (char *)v448;
      v201 = (char *)v448 + 16 * v449;
      v202 = (unsigned __int8 **)(v170 + 80);
      do
      {
        v203 = *(_DWORD *)v200;
        v204 = (unsigned __int8 *)*((_QWORD *)v200 + 1);
        if (v204)
        {
          if (!v203)
          {
            v426[0] = *((_QWORD *)v200 + 1);
            llvm::MetadataTracking::track((uint64_t)v426, v204, 2);
            v205 = *v202;
            goto LABEL_283;
          }
        }
        else
        {
          v205 = *v202;
          if (!*v202 && (v170[55] & 0x20) == 0)
            goto LABEL_280;
          if (!v203)
          {
            v426[0] = 0;
LABEL_283:
            if (v205)
              llvm::MetadataTracking::untrack((uint64_t)(v170 + 80), v205);
            v206 = (unsigned __int8 *)v426[0];
            *v202 = (unsigned __int8 *)v426[0];
            if (v206)
              llvm::MetadataTracking::retrack((uint64_t)v426, v206, (uint64_t)(v170 + 80));
            goto LABEL_280;
          }
        }
        llvm::Value::setMetadata(v171, *(_DWORD *)v200, (llvm::MDNode *)v204);
LABEL_280:
        v200 += 16;
      }
      while (v200 != v201);
    }
    v175 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v454 + 1912), 0);
    v443[0] = 257;
    v176 = sub_1C4773E38((uint64_t *)&v448, 48, (unsigned __int8 *)v171, v175, (uint64_t)&v439);
    v177 = (llvm::GetElementPtrInst *)v416[5];
    v439 = "exn_selector_gep";
    v443[0] = 259;
    v178 = sub_1C6212D88((uint64_t)&v448, v177, v163, 0, 1u, (uint64_t)&v439);
    v179 = v416[4];
    v456 = "exn_selector_val";
    v459 = 259;
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v452 + 56) + 40) + 272, v179);
    v181 = v180;
    v182 = (char *)operator new(0x60uLL);
    v183 = v182;
    v184 = (llvm::Value *)(v182 + 32);
    *((_QWORD *)v182 + 2) = 0;
    *((_QWORD *)v182 + 3) = v182 + 32;
    v443[0] = 257;
    *((_QWORD *)v182 + 4) = v179;
    *((_QWORD *)v182 + 5) = 0;
    *((_WORD *)v182 + 24) = 60;
    *((_DWORD *)v182 + 13) = 1;
    *(_OWORD *)(v182 + 56) = 0u;
    *(_OWORD *)(v182 + 72) = 0u;
    *((_DWORD *)v182 + 22) = 0;
    *(_QWORD *)v182 = v178;
    *((_QWORD *)v182 + 1) = 0;
    if (v178)
    {
      v187 = *(_QWORD *)(v178 + 8);
      v186 = (_QWORD *)(v178 + 8);
      v185 = v187;
      *((_QWORD *)v182 + 1) = v187;
      if (v187)
        *(_QWORD *)(v185 + 16) = v182 + 8;
      *((_QWORD *)v182 + 2) = v186;
      *v186 = v182;
    }
    *((_WORD *)v182 + 25) = (2 * (v181 & 0x3F)) | 1;
    v182[92] = 1;
    llvm::Value::setName((uint64_t ***)v182 + 4, (uint64_t)&v439);
    (*(void (**)(uint64_t, llvm::Value *, char **, uint64_t, uint64_t))(*(_QWORD *)v455 + 16))(v455, v184, &v456, v452, v453);
    v188 = a2;
    if ((_DWORD)v449)
    {
      v207 = (char *)v448;
      v208 = (char *)v448 + 16 * v449;
      v209 = (unsigned __int8 **)(v183 + 80);
      do
      {
        v210 = *(_DWORD *)v207;
        v211 = (unsigned __int8 *)*((_QWORD *)v207 + 1);
        if (v211)
        {
          if (!v210)
          {
            v426[0] = *((_QWORD *)v207 + 1);
            v214 = v188;
            llvm::MetadataTracking::track((uint64_t)v426, v211, 2);
            v188 = v214;
            v212 = *v209;
            goto LABEL_299;
          }
        }
        else
        {
          v212 = *v209;
          if (!*v209 && (v183[55] & 0x20) == 0)
            goto LABEL_296;
          if (!v210)
          {
            v426[0] = 0;
LABEL_299:
            if (v212)
            {
              v216 = v188;
              llvm::MetadataTracking::untrack((uint64_t)(v183 + 80), v212);
              v188 = v216;
            }
            v215 = (unsigned __int8 *)v426[0];
            *v209 = (unsigned __int8 *)v426[0];
            if (!v215)
              goto LABEL_296;
            v213 = v188;
            llvm::MetadataTracking::retrack((uint64_t)v426, v215, (uint64_t)(v183 + 80));
            goto LABEL_295;
          }
        }
        v213 = v188;
        llvm::Value::setMetadata(v184, *(_DWORD *)v207, (llvm::MDNode *)v211);
LABEL_295:
        v188 = v213;
LABEL_296:
        v207 += 16;
      }
      while (v207 != v208);
    }
    v189 = ***v188 + 1960;
    v443[0] = 257;
    v190 = sub_1C4773E38((uint64_t *)&v448, 38, (unsigned __int8 *)v184, v189, (uint64_t)&v439);
    v191 = *(_QWORD *)(v423 + 8);
    v456 = v458;
    v457 = 0x800000000;
    sub_1C528A680((unsigned int *)&v456, v191, 0);
    while ((_DWORD)v457)
    {
      v193 = *(_QWORD *)&v456[8 * v457 - 8];
      LODWORD(v457) = v457 - 1;
      if (v193 && *(_BYTE *)(v193 + 16) == 92 && *(_DWORD *)(v193 + 72) == 1)
      {
        v194 = **(_DWORD **)(v193 + 64);
        v192 = (llvm::Value *)v176;
        if (!v194)
          goto LABEL_260;
        if (v194 == 1)
        {
          v192 = (llvm::Value *)v190;
LABEL_260:
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v193, v192, (llvm::Value *)1);
        }
        if (!*(_QWORD *)(v193 + 8))
        {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v193 + 40) + 40, (uint64_t ***)v193);
          v195 = *(_QWORD *)(v193 + 24);
          v196 = *(_QWORD **)(v193 + 32);
          *v196 = v195;
          *(_QWORD *)(v195 + 8) = v196;
          *(_QWORD *)(v193 + 24) = 0;
          *(_QWORD *)(v193 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v193);
        }
      }
    }
    if (*(_QWORD *)(v423 + 8))
    {
      v197 = llvm::UndefValue::get(*(llvm::UndefValue **)v423, v192);
      sub_1C4D8ADA0((uint64_t)&v439, *((uint64_t ***)v190 + 5), *((_QWORD *)v190 + 4), 0, 0, 0);
      v428 = 0;
      v426[0] = (uint64_t)"lpad.val";
      v427 = 259;
      v198 = sub_1C506D788((uint64_t)&v439, (uint64_t)v197, (uint64_t)v176, &v428, 1, (uint64_t)v426);
      v428 = 1;
      v426[0] = (uint64_t)"lpad.val";
      v427 = 259;
      v199 = (llvm::Value *)sub_1C506D788((uint64_t)&v439, v198, (uint64_t)v190, &v428, 1, (uint64_t)v426);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v423, v199, (llvm::Value *)1);
      if (v439 != &v441)
        free(v439);
    }
    if (v456 != v458)
      free(v456);
    if (v448 != v450)
      free(v448);
    v110 += 8;
  }
  while (v110 != v421);
LABEL_195:
  v123 = v414[5];
  if (v123 == v414 + 5)
  {
    v124 = 0;
  }
  else
  {
    if (v123)
      v217 = (uint64_t)(v123 - 3);
    else
      v217 = 0;
    if (*(unsigned __int8 *)(v217 + 16) - 29 >= 0xB)
      v124 = 0;
    else
      v124 = v217;
  }
  sub_1C4773D54((uint64_t)&v439, v124, 0, 0, 0);
  v218 = *((_DWORD *)a2 + 5);
  if ((v218 & 0x40000000) != 0)
    v219 = (unsigned __int8 **)*(a2 - 1);
  else
    v219 = (unsigned __int8 **)&a2[-4 * (v218 & 0x7FFFFFF)];
  v220 = *v219;
  v221 = (llvm::GetElementPtrInst *)v416[7];
  v222 = (uint64_t *)v416[19];
  v448 = "pers_fn_gep";
  v451 = 259;
  v223 = sub_1C6212D88((uint64_t)&v439, v221, v222, 0, 3u, (uint64_t)&v448);
  v224 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v446 + 1912), 0);
  v459 = 257;
  v225 = (uint64_t *)sub_1C4773E38((uint64_t *)&v439, 49, v220, v224, (uint64_t)&v456);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v444 + 56) + 40) + 272, *v225);
  v227 = v226;
  v228 = (char *)operator new(0x80uLL);
  v229 = v228;
  *((_DWORD *)v228 + 21) = *((_DWORD *)v228 + 21) & 0x38000000 | 2;
  *(_QWORD *)v228 = 0;
  *((_QWORD *)v228 + 2) = 0;
  *((_QWORD *)v228 + 1) = 0;
  *((_QWORD *)v228 + 5) = 0;
  *((_QWORD *)v228 + 6) = 0;
  *((_QWORD *)v228 + 4) = 0;
  v230 = (uint64_t *)(v228 + 32);
  *((_QWORD *)v228 + 8) = **(_QWORD **)*v225 + 1576;
  v231 = (llvm::Value *)(v228 + 64);
  *((_QWORD *)v228 + 3) = v228 + 64;
  *((_QWORD *)v228 + 7) = v228 + 64;
  *((_QWORD *)v228 + 9) = 0;
  v228[80] = 61;
  v228[81] = 0;
  *((_WORD *)v228 + 41) = 0;
  *((_DWORD *)v228 + 21) = 2;
  *(_OWORD *)(v228 + 88) = 0u;
  *(_OWORD *)(v228 + 104) = 0u;
  *((_DWORD *)v228 + 30) = 0;
  *(_QWORD *)v228 = v225;
  v234 = v225[1];
  v233 = v225 + 1;
  v232 = v234;
  *((_QWORD *)v228 + 1) = v234;
  if (v234)
    *(_QWORD *)(v232 + 16) = v228 + 8;
  *((_QWORD *)v228 + 2) = v233;
  *v233 = v228;
  if (*((_QWORD *)v228 + 4))
  {
    **((_QWORD **)v228 + 6) = *((_QWORD *)v228 + 5);
    v409 = *((_QWORD *)v228 + 5);
    if (v409)
      *(_QWORD *)(v409 + 16) = *((_QWORD *)v228 + 6);
  }
  *v230 = v223;
  if (v223)
  {
    v237 = *(_QWORD *)(v223 + 8);
    v236 = (uint64_t **)(v223 + 8);
    v235 = v237;
    *((_QWORD *)v228 + 5) = v237;
    if (v237)
      *(_QWORD *)(v235 + 16) = v228 + 40;
    *((_QWORD *)v228 + 6) = v236;
    *v236 = v230;
  }
  *((_WORD *)v228 + 41) = (2 * (v227 & 0x3F)) | 1;
  v228[124] = 1;
  v451 = 257;
  (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v447 + 16))(v447, v231, &v448, v444, v445);
  if ((_DWORD)v440)
  {
    v379 = (char *)v439;
    v380 = (char *)v439 + 16 * v440;
    v381 = (unsigned __int8 **)(v229 + 112);
    do
    {
      v382 = *(_DWORD *)v379;
      v383 = (unsigned __int8 *)*((_QWORD *)v379 + 1);
      if (v383)
      {
        if (!v382)
        {
          v426[0] = *((_QWORD *)v379 + 1);
          llvm::MetadataTracking::track((uint64_t)v426, v383, 2);
          v384 = *v381;
          goto LABEL_487;
        }
      }
      else
      {
        v384 = *v381;
        if (!*v381 && (v229[87] & 0x20) == 0)
          goto LABEL_484;
        if (!v382)
        {
          v426[0] = 0;
LABEL_487:
          if (v384)
            llvm::MetadataTracking::untrack((uint64_t)(v229 + 112), v384);
          v385 = (unsigned __int8 *)v426[0];
          *v381 = (unsigned __int8 *)v426[0];
          if (v385)
            llvm::MetadataTracking::retrack((uint64_t)v426, v385, (uint64_t)(v229 + 112));
          goto LABEL_484;
        }
      }
      llvm::Value::setMetadata(v231, *(_DWORD *)v379, (llvm::MDNode *)v383);
LABEL_484:
      v379 += 16;
    }
    while (v379 != v380);
  }
  v238 = v416[16];
  if (v238)
    v239 = *(uint64_t ***)(v238 + 24);
  else
    v239 = 0;
  v448 = "lsda_addr";
  v451 = 259;
  v240 = (uint64_t *)sub_1C4774778((uint64_t *)&v439, v239, v238, 0, 0, (uint64_t)&v448, 0);
  v241 = (llvm::GetElementPtrInst *)v416[7];
  v242 = (uint64_t *)v416[19];
  v448 = "lsda_gep";
  v451 = 259;
  v243 = sub_1C6212D88((uint64_t)&v439, v241, v242, 0, 4u, (uint64_t)&v448);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v444 + 56) + 40) + 272, *v240);
  v245 = v244;
  v246 = (char *)operator new(0x80uLL);
  v247 = v246;
  *((_DWORD *)v246 + 21) = *((_DWORD *)v246 + 21) & 0x38000000 | 2;
  *(_QWORD *)v246 = 0;
  *((_QWORD *)v246 + 2) = 0;
  *((_QWORD *)v246 + 1) = 0;
  *((_QWORD *)v246 + 5) = 0;
  *((_QWORD *)v246 + 6) = 0;
  *((_QWORD *)v246 + 4) = 0;
  v248 = (uint64_t *)(v246 + 32);
  *((_QWORD *)v246 + 8) = **(_QWORD **)*v240 + 1576;
  v249 = (llvm::Value *)(v246 + 64);
  *((_QWORD *)v246 + 3) = v246 + 64;
  *((_QWORD *)v246 + 7) = v246 + 64;
  *((_QWORD *)v246 + 9) = 0;
  v246[80] = 61;
  v246[81] = 0;
  *((_WORD *)v246 + 41) = 0;
  *((_DWORD *)v246 + 21) = 2;
  *(_OWORD *)(v246 + 88) = 0u;
  *(_OWORD *)(v246 + 104) = 0u;
  *((_DWORD *)v246 + 30) = 0;
  *(_QWORD *)v246 = v240;
  v252 = v240[1];
  v251 = v240 + 1;
  v250 = v252;
  *((_QWORD *)v246 + 1) = v252;
  if (v252)
    *(_QWORD *)(v250 + 16) = v246 + 8;
  *((_QWORD *)v246 + 2) = v251;
  *v251 = v246;
  if (*((_QWORD *)v246 + 4))
  {
    **((_QWORD **)v246 + 6) = *((_QWORD *)v246 + 5);
    v410 = *((_QWORD *)v246 + 5);
    if (v410)
      *(_QWORD *)(v410 + 16) = *((_QWORD *)v246 + 6);
  }
  *v248 = v243;
  if (v243)
  {
    v255 = *(_QWORD *)(v243 + 8);
    v254 = (uint64_t **)(v243 + 8);
    v253 = v255;
    *((_QWORD *)v246 + 5) = v255;
    if (v255)
      *(_QWORD *)(v253 + 16) = v246 + 40;
    *((_QWORD *)v246 + 6) = v254;
    *v254 = v248;
  }
  *((_WORD *)v246 + 41) = (2 * (v245 & 0x3F)) | 1;
  v246[124] = 1;
  v451 = 257;
  (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v447 + 16))(v447, v249, &v448, v444, v445);
  v256 = (uint64_t *)v439;
  if (!(_DWORD)v440)
  {
    v257 = a2;
    goto LABEL_333;
  }
  v386 = (uint64_t *)((char *)v439 + 16 * v440);
  v387 = (unsigned __int8 **)(v247 + 112);
  v257 = a2;
  while (2)
  {
    v388 = *(_DWORD *)v256;
    v389 = (unsigned __int8 *)v256[1];
    if (v389)
    {
      v391 = v257;
      if (v388)
        goto LABEL_498;
      v456 = (char *)v256[1];
      llvm::MetadataTracking::track((uint64_t)&v456, v389, 2);
      v390 = *v387;
LABEL_502:
      if (v390)
        llvm::MetadataTracking::untrack((uint64_t)(v247 + 112), v390);
      v392 = (unsigned __int8 *)v456;
      *v387 = (unsigned __int8 *)v456;
      if (v392)
        llvm::MetadataTracking::retrack((uint64_t)&v456, v392, (uint64_t)(v247 + 112));
      v257 = a2;
    }
    else
    {
      v390 = *v387;
      if (*v387 || (v247[87] & 0x20) != 0)
      {
        v391 = v257;
        if (!v388)
        {
          v456 = 0;
          goto LABEL_502;
        }
LABEL_498:
        llvm::Value::setMetadata(v249, *(_DWORD *)v256, (llvm::MDNode *)v389);
        v257 = v391;
      }
    }
    v256 += 2;
    if (v256 != v386)
      continue;
    break;
  }
  v256 = (uint64_t *)v439;
LABEL_333:
  v258 = v416[19];
  if (v256 != &v441)
  {
    v411 = v257;
    free(v256);
    v257 = v411;
  }
  v259 = 0;
  v260 = v257[10];
  v261 = v260 - 3;
  if (!v260)
    v261 = 0;
  v262 = v261[5];
  v424 = v261 + 5;
  *(_QWORD *)v425 = v258;
  if (v262 != v261 + 5)
  {
    if (v262)
      v263 = (uint64_t)(v262 - 3);
    else
      v263 = 0;
    if (*(unsigned __int8 *)(v263 + 16) - 29 >= 0xB)
      v259 = 0;
    else
      v259 = v263;
  }
  sub_1C4773D54((uint64_t)&v439, v259, 0, 0, 0);
  v264 = (llvm::GetElementPtrInst *)v416[7];
  v448 = "jbuf_gep";
  v451 = 259;
  v265 = (uint64_t *)sub_1C6212D88((uint64_t)&v439, v264, *(uint64_t **)v425, 0, 5u, (uint64_t)&v448);
  v266 = (llvm::GetElementPtrInst *)v416[6];
  v448 = "jbuf_fp_gep";
  v451 = 259;
  v268 = sub_1C6212D88((uint64_t)&v439, v266, v265, 0, 0, (uint64_t)&v448);
  v269 = 0;
  v270 = v416[13];
  if (v270)
    v269 = *(uint64_t ***)(v270 + 24);
  v271 = *(llvm::ConstantInt **)(*(_QWORD *)v446 + 1960);
  LODWORD(v449) = *(_DWORD *)(*(_QWORD *)v446 + 1968) >> 8;
  if (v449 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v448, 0, 0);
  else
    v448 = 0;
  v272 = llvm::ConstantInt::get(v271, (llvm::LLVMContext *)&v448, v267);
  if (v449 >= 0x41 && v448)
    MEMORY[0x1CAA32F9C](v448, 0x1000C8000313F17);
  v456 = (char *)v272;
  v448 = "fp";
  v451 = 259;
  v273 = (uint64_t *)sub_1C4774778((uint64_t *)&v439, v269, v270, (uint64_t *)&v456, 1, (uint64_t)&v448, 0);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v444 + 56) + 40) + 272, *v273);
  v275 = v274;
  v276 = (char *)operator new(0x80uLL);
  v277 = v276;
  *((_DWORD *)v276 + 21) = *((_DWORD *)v276 + 21) & 0x38000000 | 2;
  *(_QWORD *)v276 = 0;
  *((_QWORD *)v276 + 2) = 0;
  *((_QWORD *)v276 + 1) = 0;
  *((_QWORD *)v276 + 5) = 0;
  *((_QWORD *)v276 + 6) = 0;
  *((_QWORD *)v276 + 4) = 0;
  v278 = (uint64_t *)(v276 + 32);
  *((_QWORD *)v276 + 8) = **(_QWORD **)*v273 + 1576;
  v279 = (llvm::Value *)(v276 + 64);
  *((_QWORD *)v276 + 3) = v276 + 64;
  *((_QWORD *)v276 + 7) = v276 + 64;
  *((_QWORD *)v276 + 9) = 0;
  v276[80] = 61;
  v276[81] = 0;
  *((_WORD *)v276 + 41) = 0;
  *((_DWORD *)v276 + 21) = 2;
  *(_OWORD *)(v276 + 88) = 0u;
  *(_OWORD *)(v276 + 104) = 0u;
  *((_DWORD *)v276 + 30) = 0;
  *(_QWORD *)v276 = v273;
  v282 = v273[1];
  v281 = v273 + 1;
  v280 = v282;
  *((_QWORD *)v276 + 1) = v282;
  if (v282)
    *(_QWORD *)(v280 + 16) = v276 + 8;
  *((_QWORD *)v276 + 2) = v281;
  *v281 = v276;
  if (*((_QWORD *)v276 + 4))
  {
    **((_QWORD **)v276 + 6) = *((_QWORD *)v276 + 5);
    v412 = *((_QWORD *)v276 + 5);
    if (v412)
      *(_QWORD *)(v412 + 16) = *((_QWORD *)v276 + 6);
  }
  *v278 = v268;
  if (v268)
  {
    v285 = *(_QWORD *)(v268 + 8);
    v284 = (uint64_t **)(v268 + 8);
    v283 = v285;
    *((_QWORD *)v276 + 5) = v285;
    if (v285)
      *(_QWORD *)(v283 + 16) = v276 + 40;
    *((_QWORD *)v276 + 6) = v284;
    *v284 = v278;
  }
  *((_WORD *)v276 + 41) = (2 * (v275 & 0x3F)) | 1;
  v276[124] = 1;
  v451 = 257;
  (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v447 + 16))(v447, v279, &v448, v444, v445);
  if ((_DWORD)v440)
  {
    v393 = (char *)v439;
    v394 = (char *)v439 + 16 * v440;
    v395 = (unsigned __int8 **)(v277 + 112);
    do
    {
      v396 = *(_DWORD *)v393;
      v397 = (unsigned __int8 *)*((_QWORD *)v393 + 1);
      if (v397)
      {
        if (!v396)
        {
          v456 = (char *)*((_QWORD *)v393 + 1);
          llvm::MetadataTracking::track((uint64_t)&v456, v397, 2);
          v398 = *v395;
          goto LABEL_518;
        }
      }
      else
      {
        v398 = *v395;
        if (!*v395 && (v277[87] & 0x20) == 0)
          goto LABEL_515;
        if (!v396)
        {
          v456 = 0;
LABEL_518:
          if (v398)
            llvm::MetadataTracking::untrack((uint64_t)(v277 + 112), v398);
          v399 = (unsigned __int8 *)v456;
          *v395 = (unsigned __int8 *)v456;
          if (v399)
            llvm::MetadataTracking::retrack((uint64_t)&v456, v399, (uint64_t)(v277 + 112));
          goto LABEL_515;
        }
      }
      llvm::Value::setMetadata(v279, *(_DWORD *)v393, (llvm::MDNode *)v397);
LABEL_515:
      v393 += 16;
    }
    while (v393 != v394);
  }
  v286 = (llvm::GetElementPtrInst *)v416[6];
  v448 = "jbuf_sp_gep";
  v451 = 259;
  v287 = sub_1C6212D88((uint64_t)&v439, v286, v265, 0, 2u, (uint64_t)&v448);
  v288 = v416[14];
  if (v288)
    v289 = *(uint64_t ***)(v288 + 24);
  else
    v289 = 0;
  v448 = "sp";
  v451 = 259;
  v290 = (uint64_t *)sub_1C4774778((uint64_t *)&v439, v289, v288, 0, 0, (uint64_t)&v448, 0);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v444 + 56) + 40) + 272, *v290);
  v292 = v291;
  v293 = (char *)operator new(0x80uLL);
  v294 = v293;
  *((_DWORD *)v293 + 21) = *((_DWORD *)v293 + 21) & 0x38000000 | 2;
  *(_QWORD *)v293 = 0;
  *((_QWORD *)v293 + 2) = 0;
  *((_QWORD *)v293 + 1) = 0;
  *((_QWORD *)v293 + 4) = 0;
  v295 = (uint64_t *)(v293 + 32);
  *((_QWORD *)v293 + 5) = 0;
  *((_QWORD *)v293 + 6) = 0;
  *((_QWORD *)v293 + 8) = **(_QWORD **)*v290 + 1576;
  v296 = (llvm::Value *)(v293 + 64);
  *((_QWORD *)v293 + 3) = v293 + 64;
  *((_QWORD *)v293 + 7) = v293 + 64;
  *((_QWORD *)v293 + 9) = 0;
  v293[80] = 61;
  v293[81] = 0;
  *((_WORD *)v293 + 41) = 0;
  *((_DWORD *)v293 + 21) = 2;
  *(_OWORD *)(v293 + 88) = 0u;
  *(_OWORD *)(v293 + 104) = 0u;
  *((_DWORD *)v293 + 30) = 0;
  *(_QWORD *)v293 = v290;
  v299 = v290[1];
  v298 = v290 + 1;
  v297 = v299;
  *((_QWORD *)v293 + 1) = v299;
  v300 = a2;
  if (v299)
    *(_QWORD *)(v297 + 16) = v293 + 8;
  *((_QWORD *)v293 + 2) = v298;
  *v298 = v293;
  if (*((_QWORD *)v293 + 4))
  {
    **((_QWORD **)v293 + 6) = *((_QWORD *)v293 + 5);
    v413 = *((_QWORD *)v293 + 5);
    if (v413)
      *(_QWORD *)(v413 + 16) = *((_QWORD *)v293 + 6);
  }
  *v295 = v287;
  if (v287)
  {
    v301 = (uint64_t **)(v287 + 8);
    v302 = *(_QWORD *)(v287 + 8);
    *((_QWORD *)v293 + 5) = v302;
    if (v302)
      *(_QWORD *)(v302 + 16) = v293 + 40;
    *((_QWORD *)v293 + 6) = v301;
    *v301 = v295;
  }
  *((_WORD *)v293 + 41) = (2 * (v292 & 0x3F)) | 1;
  v293[124] = 1;
  v451 = 257;
  (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v447 + 16))(v447, v296, &v448, v444, v445);
  v422 = (llvm::Value *)v287;
  if ((_DWORD)v440)
  {
    v400 = (char *)v439;
    v401 = (char *)v439 + 16 * v440;
    v402 = (unsigned __int8 **)(v294 + 112);
    do
    {
      v403 = *(_DWORD *)v400;
      v404 = (unsigned __int8 *)*((_QWORD *)v400 + 1);
      if (v404)
      {
        if (!v403)
        {
          v456 = (char *)*((_QWORD *)v400 + 1);
          llvm::MetadataTracking::track((uint64_t)&v456, v404, 2);
          v405 = *v402;
          goto LABEL_533;
        }
      }
      else
      {
        v405 = *v402;
        if (!*v402 && (v294[87] & 0x20) == 0)
          goto LABEL_530;
        if (!v403)
        {
          v456 = 0;
LABEL_533:
          if (v405)
            llvm::MetadataTracking::untrack((uint64_t)(v294 + 112), v405);
          v406 = (unsigned __int8 *)v456;
          *v402 = (unsigned __int8 *)v456;
          if (v406)
            llvm::MetadataTracking::retrack((uint64_t)&v456, v406, (uint64_t)(v294 + 112));
          v300 = a2;
          goto LABEL_530;
        }
      }
      llvm::Value::setMetadata(v296, *(_DWORD *)v400, (llvm::MDNode *)v404);
LABEL_530:
      v400 += 16;
    }
    while (v400 != v401);
  }
  v303 = v416[12];
  if (v303)
    v304 = *(uint64_t ***)(v303 + 24);
  else
    v304 = 0;
  v451 = 257;
  sub_1C4774778((uint64_t *)&v439, v304, v303, 0, 0, (uint64_t)&v448, 0);
  v305 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v446 + 1912), 0);
  v451 = 257;
  v456 = (char *)sub_1C4773E38((uint64_t *)&v439, 49, *(unsigned __int8 **)v425, v305, (uint64_t)&v448);
  v306 = v416[18];
  if (v306)
    v307 = *(uint64_t ***)(v306 + 24);
  else
    v307 = 0;
  v451 = 257;
  sub_1C4774778((uint64_t *)&v439, v307, v306, (uint64_t *)&v456, 1, (uint64_t)&v448, 0);
  v308 = v434;
  if ((_DWORD)v434)
  {
    v309 = 0;
    do
    {
      v310 = v309 + 1;
      sub_1C528A040(v416, *((_QWORD ****)v433 + v309), v309 + 1);
      v312 = ***v300;
      v313 = *(llvm::ConstantInt **)(v312 + 1960);
      v314 = *(unsigned int *)(v312 + 1968);
      LODWORD(v449) = v314 >> 8;
      if (v314 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v448, v309 + 1, 0);
      }
      else
      {
        if (v314 <= 0xFF)
          v315 = 0;
        else
          v315 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v314);
        v448 = (void *)(v315 & v310);
      }
      v316 = llvm::ConstantInt::get(v313, (llvm::LLVMContext *)&v448, v311);
      if (v449 >= 0x41 && v448)
        MEMORY[0x1CAA32F9C](v448, 0x1000C8000313F17);
      v317 = v416[17];
      if (v317)
        v318 = *(uint64_t ***)(v317 + 24);
      else
        v318 = 0;
      v426[0] = (uint64_t)v316;
      v451 = 257;
      v319 = *((_QWORD *)v433 + v309);
      v320 = (char *)operator new(0x90uLL);
      v321 = v320;
      v322 = (llvm::Value *)(v320 + 64);
      *((_DWORD *)v320 + 21) = *((_DWORD *)v320 + 21) & 0x38000000 | 2;
      *(_QWORD *)v320 = 0;
      *((_QWORD *)v320 + 1) = 0;
      *((_QWORD *)v320 + 2) = 0;
      *((_QWORD *)v320 + 3) = v320 + 64;
      *((_QWORD *)v320 + 4) = 0;
      *((_QWORD *)v320 + 5) = 0;
      *((_QWORD *)v320 + 6) = 0;
      *((_QWORD *)v320 + 7) = v320 + 64;
      *((_QWORD *)v320 + 8) = *v318[2];
      *((_QWORD *)v320 + 9) = 0;
      *((_WORD *)v320 + 40) = 84;
      *((_WORD *)v320 + 41) = 0;
      *((_DWORD *)v320 + 21) = 2;
      *(_OWORD *)(v320 + 88) = 0u;
      v323 = v320 + 88;
      *((_DWORD *)v320 + 30) = 0;
      *(_OWORD *)(v320 + 104) = 0u;
      if (v319)
      {
        v324 = *(_QWORD *)(v319 + 40);
        *((_QWORD *)v320 + 13) = v324;
        *(_WORD *)(v324 + 18) &= ~0x8000u;
        if ((v320[87] & 0x10) != 0)
        {
          v326 = *(_QWORD *)(v324 + 56);
          if (v326)
          {
            v327 = *(llvm::ValueSymbolTable **)(v326 + 104);
            if (v327)
              llvm::ValueSymbolTable::reinsertValue(v327, v322);
          }
        }
        v325 = *(_QWORD *)(v319 + 24);
        v321[11] = v325;
        v321[12] = v319 + 24;
        *(_QWORD *)(v325 + 8) = v323;
        *(_QWORD *)(v319 + 24) = v323;
      }
      v321[16] = 0;
      llvm::CallInst::init((uint64_t ***)v322, v318, v317, v426, 1, 0, 0, (uint64_t)&v448);
      v309 = v310;
      v300 = a2;
    }
    while (v308 != v310);
  }
  for (k = v300[10]; k != v418; v300 = a2)
  {
    v329 = k - 3;
    v330 = k == 0;
    if (!k)
      v329 = 0;
    v331 = v300[10];
    if (v331)
      v330 = v331 - 3 == v329;
    if (!v330)
    {
      v332 = (uint64_t *)(v329 + 5);
      for (m = v329[6]; m != v332; m = (uint64_t *)m[1])
      {
        if (m)
          v334 = (llvm::Instruction *)(m - 3);
        else
          v334 = 0;
        if (llvm::Instruction::mayThrow(v334))
          sub_1C528A040(v416, (_QWORD ***)v334, -1);
      }
    }
    k = (uint64_t **)k[1];
  }
  v335 = (uint64_t **)v416[8];
  v336 = v416[9];
  v451 = 257;
  v337 = (_QWORD *)*v424;
  if ((_QWORD *)*v424 == v424)
  {
    v340 = 0;
  }
  else
  {
    v338 = v337 - 3;
    if (v337)
      v339 = v337 - 3;
    else
      v339 = 0;
    if (*((unsigned __int8 *)v339 + 16) - 29 >= 0xB)
      v340 = 0;
    else
      v340 = v338;
  }
  v341 = (char *)operator new(0x90uLL);
  v342 = v341;
  v343 = (llvm::Value *)(v341 + 64);
  *((_DWORD *)v341 + 21) = *((_DWORD *)v341 + 21) & 0x38000000 | 2;
  *(_QWORD *)v341 = 0;
  *((_QWORD *)v341 + 1) = 0;
  *((_QWORD *)v341 + 2) = 0;
  *((_QWORD *)v341 + 3) = v341 + 64;
  *((_QWORD *)v341 + 4) = 0;
  *((_QWORD *)v341 + 5) = 0;
  *((_QWORD *)v341 + 6) = 0;
  *((_QWORD *)v341 + 7) = v341 + 64;
  *((_QWORD *)v341 + 8) = *v335[2];
  *((_QWORD *)v341 + 9) = 0;
  v341[80] = 84;
  v341[81] = 0;
  *((_WORD *)v341 + 41) = 0;
  *((_DWORD *)v341 + 21) = 2;
  *(_OWORD *)(v341 + 88) = 0u;
  v344 = v341 + 88;
  *((_DWORD *)v341 + 30) = 0;
  *(_OWORD *)(v341 + 104) = 0u;
  if (v340)
  {
    v376 = v340[5];
    v377 = v340 + 3;
    *((_QWORD *)v341 + 13) = v376;
    *(_WORD *)(v376 + 18) &= ~0x8000u;
    if ((v341[87] & 0x10) != 0)
    {
      v407 = *(_QWORD *)(v376 + 56);
      if (v407)
      {
        v408 = *(llvm::ValueSymbolTable **)(v407 + 104);
        if (v408)
          llvm::ValueSymbolTable::reinsertValue(v408, v343);
      }
    }
    v378 = *v377;
    *((_QWORD *)v342 + 11) = *v377;
    *((_QWORD *)v342 + 12) = v377;
    *(_QWORD *)(v378 + 8) = v344;
    *v377 = (uint64_t)v344;
  }
  *((_QWORD *)v342 + 16) = 0;
  llvm::CallInst::init((uint64_t ***)v343, v335, v336, (uint64_t *)v425, 1, 0, 0, (uint64_t)&v448);
  *((_QWORD *)v342 + 16) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v342 + 16, **((uint64_t ***)v342 + 8), -1, 37);
  v345 = v300[10];
  if (v345 != v418)
  {
    while (1)
    {
      v346 = v345 - 3;
      v347 = v345 == 0;
      if (!v345)
        v346 = 0;
      v348 = a2[10];
      if (v348)
        v347 = v348 - 3 == v346;
      if (!v347)
        break;
LABEL_427:
      v345 = (uint64_t **)v345[1];
      if (v345 == v418)
        goto LABEL_457;
    }
    v349 = (uint64_t *)(v346 + 5);
    v350 = v346[6];
    while (2)
    {
      if (v350 == v349)
        goto LABEL_427;
      if (v350)
        v351 = v350 - 3;
      else
        v351 = 0;
      v352 = *((unsigned __int8 *)v351 + 16);
      if (v352 == 84)
        v353 = v351;
      else
        v353 = 0;
      if (v350 && v352 == 84)
      {
        v354 = *(v353 - 4);
        if (!v354 || *(_BYTE *)(v354 + 16) || *(_QWORD *)(v354 + 24) != v353[9])
          v354 = 0;
        if (v354 == v416[15])
        {
LABEL_447:
          v355 = (llvm::Value *)v416[14];
          if (v355)
            v356 = (llvm::Type ***)*((_QWORD *)v355 + 3);
          else
            v356 = 0;
          v448 = "sp";
          v451 = 259;
          v357 = operator new(0x70uLL);
          v357[13] = v357[13] & 0x38000000 | 1;
          *(_QWORD *)v357 = 0;
          *((_QWORD *)v357 + 1) = 0;
          *((_QWORD *)v357 + 2) = 0;
          *((_QWORD *)v357 + 3) = v357 + 8;
          llvm::CallInst::CallInst((llvm::CallInst *)(v357 + 8), v356, v355, (const llvm::Twine *)&v448, 0);
          sub_1C53DF664((_QWORD *)(v351[5] + 40), (uint64_t)(v351 + 3), (uint64_t)(v357 + 8));
          v358 = operator new(0x80uLL);
          v358[21] = v358[21] & 0x38000000 | 2;
          *(_QWORD *)v358 = 0;
          *((_QWORD *)v358 + 1) = 0;
          *((_QWORD *)v358 + 2) = 0;
          *((_QWORD *)v358 + 3) = v358 + 16;
          *((_QWORD *)v358 + 4) = 0;
          *((_QWORD *)v358 + 5) = 0;
          *((_QWORD *)v358 + 6) = 0;
          *((_QWORD *)v358 + 7) = v358 + 16;
          v359 = *((_QWORD *)v357 + 8);
          if (v359)
            v360 = v359 == *((_QWORD *)v357 + 9) + 40;
          else
            v360 = 1;
          if (v360)
            v361 = 0;
          else
            v361 = (llvm::Instruction *)(v359 - 24);
          llvm::StoreInst::StoreInst((llvm::StoreInst *)(v358 + 16), (llvm::Value *)(v357 + 8), v422, 1, v361);
        }
      }
      else if (v352 == 59)
      {
        goto LABEL_447;
      }
      v350 = (uint64_t *)v350[1];
      continue;
    }
  }
LABEL_457:
  if ((_DWORD)v437)
  {
    v362 = (char *)v436;
    v363 = 8 * v437;
    do
    {
      v364 = *(_QWORD *)v362;
      v365 = llvm::BasicBlock::getTerminatingMustTailCall(*(llvm::BasicBlock **)(*(_QWORD *)v362 + 40));
      v366 = (uint64_t **)v416[10];
      v367 = v416[11];
      v451 = 257;
      v368 = (char *)operator new(0x90uLL);
      v369 = v368;
      v370 = (llvm::Value *)(v368 + 64);
      *((_DWORD *)v368 + 21) = *((_DWORD *)v368 + 21) & 0x38000000 | 2;
      *(_QWORD *)v368 = 0;
      *((_QWORD *)v368 + 1) = 0;
      *((_QWORD *)v368 + 2) = 0;
      *((_QWORD *)v368 + 3) = v368 + 64;
      *((_QWORD *)v368 + 4) = 0;
      *((_QWORD *)v368 + 5) = 0;
      *((_QWORD *)v368 + 6) = 0;
      *((_QWORD *)v368 + 7) = v368 + 64;
      if (!v365)
        v365 = v364;
      *((_QWORD *)v368 + 8) = *v366[2];
      *((_QWORD *)v368 + 9) = 0;
      *((_WORD *)v368 + 40) = 84;
      *((_WORD *)v368 + 41) = 0;
      *((_DWORD *)v368 + 21) = 2;
      *(_OWORD *)(v368 + 88) = 0u;
      v371 = v368 + 88;
      *((_DWORD *)v368 + 30) = 0;
      *(_OWORD *)(v368 + 104) = 0u;
      if (v365)
      {
        v372 = *(_QWORD *)(v365 + 40);
        *((_QWORD *)v368 + 13) = v372;
        *(_WORD *)(v372 + 18) &= ~0x8000u;
        if ((v368[87] & 0x10) != 0)
        {
          v374 = *(_QWORD *)(v372 + 56);
          if (v374)
          {
            v375 = *(llvm::ValueSymbolTable **)(v374 + 104);
            if (v375)
              llvm::ValueSymbolTable::reinsertValue(v375, v370);
          }
        }
        v373 = *(_QWORD *)(v365 + 24);
        v369[11] = v373;
        v369[12] = v365 + 24;
        *(_QWORD *)(v373 + 8) = v371;
        *(_QWORD *)(v365 + 24) = v371;
      }
      v369[16] = 0;
      llvm::CallInst::init((uint64_t ***)v370, v366, v367, (uint64_t *)v425, 1, 0, 0, (uint64_t)&v448);
      v362 += 8;
      v363 -= 8;
    }
    while (v363);
  }
  if (v439 != &v441)
    free(v439);
  v46 = 1;
LABEL_61:
  if (v430 != v432)
    free(v430);
  if ((v429[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v429[1], 8);
  if (v433 != v435)
    free(v433);
  if (v436 != v438)
    free(v436);
  return v46;
}

void sub_1C528A040(_QWORD *a1, _QWORD ***a2, int a3)
{
  llvm::ConstantInt *v6;
  llvm::GetElementPtrInst *v7;
  uint64_t *v8;
  const llvm::APInt *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::ConstantInt *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  char v17;
  char v18;
  char *v19;
  char *v20;
  uint64_t *v21;
  llvm::Value *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  char *v29;
  char *v30;
  unsigned __int8 **v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  const char *v37;
  unsigned int v38;
  __int16 v39;
  unsigned __int8 *v40;
  _QWORD v41[2];
  void *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)&v42, (uint64_t)a2, 0, 0, 0);
  v6 = (llvm::ConstantInt *)(***a2 + 1960);
  v41[0] = llvm::ConstantInt::get(v6, 0, 0);
  v41[1] = llvm::ConstantInt::get(v6, 1, 0);
  v7 = (llvm::GetElementPtrInst *)a1[7];
  v8 = (uint64_t *)a1[19];
  v37 = "call_site";
  v39 = 259;
  v10 = sub_1C509D7B0((uint64_t *)&v42, v7, v8, (llvm::Value *)v41, 2, (uint64_t)&v37);
  v11 = a1[4];
  v12 = a3;
  v13 = *(llvm::ConstantInt **)v11;
  v14 = *(unsigned int *)(v11 + 8);
  v38 = v14 >> 8;
  if (v14 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v37, v12, 0);
  }
  else
  {
    if (v14 <= 0xFF)
      v15 = 0;
    else
      v15 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v14);
    v37 = (const char *)(v15 & v12);
  }
  v16 = (uint64_t *)llvm::ConstantInt::get(v13, (llvm::LLVMContext *)&v37, v9);
  if (v38 >= 0x41 && v37)
    MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v45 + 56) + 40) + 272, *v16);
  v18 = v17;
  v19 = (char *)operator new(0x80uLL);
  v20 = v19;
  *((_DWORD *)v19 + 21) = *((_DWORD *)v19 + 21) & 0x38000000 | 2;
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 2) = 0;
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 5) = 0;
  *((_QWORD *)v19 + 6) = 0;
  *((_QWORD *)v19 + 4) = 0;
  v21 = (uint64_t *)(v19 + 32);
  *((_QWORD *)v19 + 8) = **(_QWORD **)*v16 + 1576;
  v22 = (llvm::Value *)(v19 + 64);
  *((_QWORD *)v19 + 3) = v19 + 64;
  *((_QWORD *)v19 + 7) = v19 + 64;
  *((_QWORD *)v19 + 9) = 0;
  v19[80] = 61;
  v19[81] = 0;
  *((_WORD *)v19 + 41) = 0;
  *((_DWORD *)v19 + 21) = 2;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_OWORD *)(v19 + 104) = 0u;
  *((_DWORD *)v19 + 30) = 0;
  *(_QWORD *)v19 = v16;
  v25 = v16[1];
  v24 = v16 + 1;
  v23 = v25;
  *((_QWORD *)v19 + 1) = v25;
  if (v25)
    *(_QWORD *)(v23 + 16) = v19 + 8;
  *((_QWORD *)v19 + 2) = v24;
  *v24 = v19;
  if (*((_QWORD *)v19 + 4))
  {
    **((_QWORD **)v19 + 6) = *((_QWORD *)v19 + 5);
    v36 = *((_QWORD *)v19 + 5);
    if (v36)
      *(_QWORD *)(v36 + 16) = *((_QWORD *)v19 + 6);
  }
  *v21 = v10;
  if (v10)
  {
    v28 = *(_QWORD *)(v10 + 8);
    v27 = (uint64_t **)(v10 + 8);
    v26 = v28;
    *((_QWORD *)v19 + 5) = v28;
    if (v28)
      *(_QWORD *)(v26 + 16) = v19 + 40;
    *((_QWORD *)v19 + 6) = v27;
    *v27 = v21;
  }
  *((_WORD *)v19 + 41) = (2 * (v18 & 0x3F)) | 1;
  v19[124] = 1;
  v39 = 257;
  (*(void (**)(uint64_t, llvm::Value *, const char **, uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v22, &v37, v45, v46);
  v29 = (char *)v42;
  if (v43)
  {
    v30 = (char *)v42 + 16 * v43;
    v31 = (unsigned __int8 **)(v20 + 112);
    while (1)
    {
      v32 = *(_DWORD *)v29;
      v33 = (unsigned __int8 *)*((_QWORD *)v29 + 1);
      if (v33)
      {
        if (!v32)
        {
          v40 = (unsigned __int8 *)*((_QWORD *)v29 + 1);
          llvm::MetadataTracking::track((uint64_t)&v40, v33, 2);
          v34 = *v31;
          goto LABEL_29;
        }
      }
      else
      {
        v34 = *v31;
        if (!*v31 && (v20[87] & 0x20) == 0)
          goto LABEL_26;
        if (!v32)
        {
          v40 = 0;
LABEL_29:
          if (v34)
            llvm::MetadataTracking::untrack((uint64_t)(v20 + 112), v34);
          v35 = v40;
          *v31 = v40;
          if (v35)
            llvm::MetadataTracking::retrack((uint64_t)&v40, v35, (uint64_t)(v20 + 112));
          goto LABEL_26;
        }
      }
      llvm::Value::setMetadata(v22, *(_DWORD *)v29, (llvm::MDNode *)v33);
LABEL_26:
      v29 += 16;
      if (v29 == v30)
      {
        v29 = (char *)v42;
        break;
      }
    }
  }
  if (v29 != (char *)&v44)
    free(v29);
}

void sub_1C528A3B8(uint64_t a1, llvm::SmallPtrSetImplBase *this)
{
  char v4;
  char *v5;
  _BYTE *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v20;
  char v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  _QWORD v31[2];
  __int128 v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  int v40;
  _BYTE v41[64];
  llvm::SmallPtrSetImplBase *v42;
  char *v43;
  __int128 v44;

  sub_1C4774094(this, a1);
  if (v4)
  {
    v37 = v41;
    v38 = v41;
    v39 = 8;
    v40 = 0;
    sub_1C61E5F20(&v42, a1, (llvm::SmallPtrSetImplBase *)&v37);
    v5 = v43;
    v31[0] = v42;
    v31[1] = v43;
    v32 = v44;
    v33 = &v37;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v6 = (_BYTE *)v44;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - (_QWORD)v43) >> 3);
    v43 = 0;
    v44 = 0uLL;
    sub_1C4D6CDA0(&v43, v5, v6, v7);
    v8 = (char *)v44;
    if ((char *)v44 == v43)
    {
LABEL_49:
      if (!v8)
        goto LABEL_51;
    }
    else
    {
LABEL_4:
      sub_1C4774094(this, *((_QWORD *)v8 - 3));
      v8 = (char *)v44;
      while (2)
      {
        if (!*(v8 - 8))
        {
          v9 = *((_QWORD *)v8 - 3);
          do
          {
            v9 = *(_QWORD *)(v9 + 8);
            if (!v9)
              break;
            v10 = *(_QWORD *)(v9 + 24);
            v11 = *(unsigned __int8 *)(v10 + 16);
            v12 = v10 && v11 >= 0x1C;
          }
          while (!v12 || v11 - 29 >= 0xB);
          *((_QWORD *)v8 - 2) = v9;
          *(v8 - 8) = 1;
        }
        while (1)
        {
          v14 = *((_QWORD *)v8 - 2);
          if (!v14)
            break;
          v15 = *((_QWORD *)v8 - 2);
          do
          {
            v15 = *(_QWORD *)(v15 + 8);
            if (!v15)
              break;
            v16 = *(_QWORD *)(v15 + 24);
            v17 = *(unsigned __int8 *)(v16 + 16);
            v18 = v16 && v17 >= 0x1C;
          }
          while (!v18 || v17 - 29 > 0xA);
          *((_QWORD *)v8 - 2) = v15;
          v20 = *(_QWORD *)(*(_QWORD *)(v14 + 24) + 40);
          sub_1C4774094(v42, v20);
          if (v21)
          {
            v22 = (char *)v44;
            if ((unint64_t)v44 >= *((_QWORD *)&v44 + 1))
            {
              v23 = v43;
              v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - (_QWORD)v43) >> 3);
              v25 = v24 + 1;
              if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
                abort();
              if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v44 + 1) - (_QWORD)v43) >> 3) > v25)
                v25 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v44 + 1) - (_QWORD)v43) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v44 + 1) - (_QWORD)v43) >> 3) >= 0x555555555555555)
                v26 = 0xAAAAAAAAAAAAAAALL;
              else
                v26 = v25;
              if (v26)
              {
                if (v26 > 0xAAAAAAAAAAAAAAALL)
                  sub_1C4764EE4();
                v27 = (char *)operator new(24 * v26);
              }
              else
              {
                v27 = 0;
              }
              v28 = &v27[24 * v24];
              *(_QWORD *)v28 = v20;
              v28[8] = 0;
              v28[16] = 0;
              v29 = v28;
              if (v22 != v23)
              {
                do
                {
                  v30 = *(_OWORD *)(v22 - 24);
                  *((_QWORD *)v29 - 1) = *((_QWORD *)v22 - 1);
                  *(_OWORD *)(v29 - 24) = v30;
                  v29 -= 24;
                  v22 -= 24;
                }
                while (v22 != v23);
                v22 = v43;
              }
              v8 = v28 + 24;
              v43 = v29;
              *(_QWORD *)&v44 = v28 + 24;
              *((_QWORD *)&v44 + 1) = &v27[24 * v26];
              if (v22)
                operator delete(v22);
            }
            else
            {
              *(_QWORD *)v44 = v20;
              v22[8] = 0;
              v8 = v22 + 24;
              v22[16] = 0;
            }
            *(_QWORD *)&v44 = v8;
            if (v8 == v43)
            {
              v8 = v43;
              goto LABEL_49;
            }
            goto LABEL_4;
          }
        }
        v8 = (char *)(v44 - 24);
        *(_QWORD *)&v44 = v8;
        if (v43 != v8)
          continue;
        break;
      }
    }
    *(_QWORD *)&v44 = v8;
    operator delete(v8);
LABEL_51:
    sub_1C618F0A8(v31);
    if (v38 != v37)
      free(v38);
  }
}

unsigned int *sub_1C528A680(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = a2;
  v5 = result;
  if (a2 == a3)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = a2;
    do
    {
      ++v6;
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != a3);
  }
  v8 = result[2];
  if (v6 + v8 > (unint64_t)result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + v8, 8);
    v8 = v5[2];
  }
  if (v4 != a3)
  {
    v9 = (_QWORD *)(*(_QWORD *)v5 + 8 * v8);
    do
    {
      *v9++ = *(_QWORD *)(v4 + 24);
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != a3);
  }
  v5[2] = v8 + v6;
  return result;
}

void llvm::initializeSlotIndexesPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED8300E8);
  if (v1 != -1)
  {
    v4[0] = sub_1C528A82C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED8300E8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void llvm::SlotIndexes::~SlotIndexes(llvm::SlotIndexes *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E814AA98;
  v2 = (char *)this + 344;
  *((_QWORD *)this + 43) = (char *)this + 344;
  *((_QWORD *)this + 44) = (char *)this + 344;
  v3 = (char *)*((_QWORD *)this + 67);
  if (v3 != (char *)this + 552)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 49);
  if (v4 != (char *)this + 408)
    free(v4);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 46), 8);
  v5 = (char *)*((_QWORD *)this + 44);
  if (v5 != v2)
  {
    do
    {
      v7 = *(_QWORD *)v5;
      v6 = (char *)*((_QWORD *)v5 + 1);
      *(_QWORD *)v6 = *(_QWORD *)v5;
      *(_QWORD *)(v7 + 8) = v6;
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      v5 = v6;
    }
    while (v6 != v2);
  }
  sub_1C4926AE8((uint64_t)this + 248);
  sub_1C4926674(this);
}

{
  llvm::SlotIndexes::~SlotIndexes(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C528A82C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Slot index numbering";
  *(_QWORD *)(v2 + 8) = 20;
  *(_QWORD *)(v2 + 16) = "slotindexes";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &llvm::SlotIndexes::ID;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::SlotIndexes>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::SlotIndexes::releaseMemory(llvm::SlotIndexes *this)
{
  char *v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  llvm::SlotIndexes *v16;
  llvm::SlotIndexes *v17;
  uint64_t v18;

  v2 = (char *)this + 368;
  v3 = *((_DWORD *)this + 94);
  if (v3)
  {
    v4 = *((_DWORD *)this + 96);
    if (v4 > 4 * v3 && v4 >= 0x41)
    {
      v5 = 1 << (33 - __clz(v3 - 1));
      if (v5 <= 64)
        v6 = 64;
      else
        v6 = v5;
LABEL_7:
      if (v6 == v4)
      {
        *((_QWORD *)this + 47) = 0;
        v7 = 16 * v4;
        v8 = (_QWORD *)*((_QWORD *)this + 46);
        do
        {
          *v8 = -4096;
          v8 += 2;
          v7 -= 16;
        }
        while (v7);
      }
      else
      {
        MEMORY[0x1CAA32FB4](*(_QWORD *)v2, 8);
        if (v6)
        {
          v9 = (4 * v6 / 3u + 1) | ((unint64_t)(4 * v6 / 3u + 1) >> 1);
          v10 = v9 | (v9 >> 2) | ((v9 | (v9 >> 2)) >> 4);
          LODWORD(v10) = (((v10 | (v10 >> 8)) >> 16) | v10 | (v10 >> 8)) + 1;
          *((_DWORD *)this + 96) = v10;
          v11 = operator new(16 * v10, (std::align_val_t)8uLL);
          *((_QWORD *)this + 46) = v11;
          *((_QWORD *)this + 47) = 0;
          v12 = *((unsigned int *)this + 96);
          if ((_DWORD)v12)
          {
            v13 = 16 * v12;
            do
            {
              *v11 = -4096;
              v11 += 2;
              v13 -= 16;
            }
            while (v13);
          }
        }
        else
        {
          *(_QWORD *)v2 = 0;
          *((_QWORD *)v2 + 1) = 0;
          *((_DWORD *)v2 + 4) = 0;
        }
      }
      goto LABEL_24;
    }
  }
  else
  {
    if (!*((_DWORD *)this + 95))
      goto LABEL_24;
    v4 = *((_DWORD *)this + 96);
    if (v4 > 0x40)
    {
      v6 = 0;
      goto LABEL_7;
    }
  }
  if (v4)
  {
    v14 = *(_QWORD **)v2;
    v15 = 16 * v4;
    do
    {
      *v14 = -4096;
      v14 += 2;
      v15 -= 16;
    }
    while (v15);
  }
  *((_QWORD *)this + 47) = 0;
LABEL_24:
  *((_DWORD *)this + 100) = 0;
  *((_DWORD *)this + 136) = 0;
  v16 = (llvm::SlotIndexes *)*((_QWORD *)this + 44);
  if (v16 != (llvm::SlotIndexes *)((char *)this + 344))
  {
    do
    {
      v18 = *(_QWORD *)v16;
      v17 = (llvm::SlotIndexes *)*((_QWORD *)v16 + 1);
      *(_QWORD *)v17 = *(_QWORD *)v16;
      *(_QWORD *)(v18 + 8) = v17;
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      v16 = v17;
    }
    while (v17 != (llvm::SlotIndexes *)((char *)this + 344));
  }
  return sub_1C4926A50((uint64_t)this + 248);
}

uint64_t llvm::SlotIndexes::runOnMachineFunction(llvm::SlotIndexes *this, llvm::MachineFunction *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t i;
  int v19;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v44;
  unint64_t v45;

  *((_QWORD *)this + 45) = a2;
  v3 = *((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13);
  v4 = (v3 >> 3);
  v5 = *((unsigned int *)this + 100);
  if (v4 != v5)
  {
    if (v4 >= v5)
    {
      v6 = (_QWORD *)((char *)this + 392);
      if (v4 > *((unsigned int *)this + 101))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 392, (uint64_t)this + 408, (v3 >> 3), 16);
        v5 = *((unsigned int *)this + 100);
      }
      if (v4 != v5)
        bzero((void *)(*v6 + 16 * v5), 16 * (v4 - v5));
    }
    *((_DWORD *)this + 100) = v3 >> 3;
    a2 = (llvm::MachineFunction *)*((_QWORD *)this + 45);
  }
  v7 = -1;
  v8 = (_QWORD *)((char *)a2 + 320);
  do
  {
    v8 = (_QWORD *)v8[1];
    ++v7;
  }
  while (v8 != (_QWORD *)((char *)a2 + 320));
  v9 = (uint64_t *)((char *)this + 536);
  if (v7 > (unint64_t)*((unsigned int *)this + 137))
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 536, (uint64_t)this + 552, v7, 16);
  v10 = (uint64_t *)((char *)this + 344);
  v11 = sub_1C484358C((uint64_t)this + 248, 32, 3);
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_DWORD *)(v11 + 24) = 0;
  *(_QWORD *)v11 = 0;
  v12 = *((_QWORD *)this + 43);
  *(_QWORD *)v11 = v12;
  *(_QWORD *)(v11 + 8) = (char *)this + 344;
  *(_QWORD *)(v12 + 8) = v11;
  *((_QWORD *)this + 43) = v11;
  v13 = *((_QWORD *)this + 45);
  v14 = v13 + 320;
  v15 = *(_QWORD *)(v13 + 328);
  if (v15 != v13 + 320)
  {
    v16 = 0;
    while (1)
    {
      v17 = *v10;
      for (i = *(_QWORD *)(v15 + 56); i != v15 + 48; i = *(_QWORD *)(i + 8))
      {
        v19 = **(unsigned __int16 **)(i + 16);
        if ((v19 - 13) < 5 || v19 == 23)
          goto LABEL_21;
        v16 += 16;
        v21 = sub_1C484358C((uint64_t)this + 248, 32, 3);
        *(_QWORD *)v21 = 0;
        *(_QWORD *)(v21 + 8) = 0;
        *(_QWORD *)(v21 + 16) = i;
        *(_DWORD *)(v21 + 24) = v16;
        v22 = *((_QWORD *)this + 43);
        *(_QWORD *)v21 = v22;
        *(_QWORD *)(v21 + 8) = v10;
        *(_QWORD *)(v22 + 8) = v21;
        *((_QWORD *)this + 43) = v21;
        v44 = i;
        v45 = v21 & 0xFFFFFFFFFFFFFFF9;
        v23 = *((_DWORD *)this + 96);
        if (v23)
        {
          v24 = *((_QWORD *)this + 46);
          v25 = v23 - 1;
          v26 = v25 & ((i >> 4) ^ (i >> 9));
          v27 = (_QWORD *)(v24 + 16 * v26);
          v28 = *v27;
          if (i == *v27)
            goto LABEL_21;
          v29 = 0;
          v30 = 1;
          do
          {
            if (v28 == -4096)
            {
              if (v29)
                v33 = v29;
              else
                v33 = v27;
              goto LABEL_38;
            }
            if (v29)
              v31 = 0;
            else
              v31 = v28 == -8192;
            if (v31)
              v29 = v27;
            v32 = v26 + v30++;
            v26 = v32 & v25;
            v27 = (_QWORD *)(v24 + 16 * v26);
            v28 = *v27;
          }
          while (i != *v27);
          if (i)
            goto LABEL_21;
        }
        else
        {
          v33 = 0;
LABEL_38:
          v34 = sub_1C4850F64((uint64_t)this + 368, (uint64_t)&v44, &v44, v33);
          *v34 = v44;
          v34[1] = v45;
          if (i)
          {
LABEL_21:
            if ((*(_BYTE *)i & 4) != 0)
              continue;
          }
        }
        while ((*(_WORD *)(i + 44) & 8) != 0)
          i = *(_QWORD *)(i + 8);
      }
      v16 += 16;
      v35 = sub_1C484358C((uint64_t)this + 248, 32, 3);
      *(_QWORD *)(v35 + 8) = 0;
      *(_QWORD *)(v35 + 16) = 0;
      *(_QWORD *)v35 = 0;
      *(_DWORD *)(v35 + 24) = v16;
      v36 = *((_QWORD *)this + 43);
      *(_QWORD *)v35 = v36;
      *(_QWORD *)(v35 + 8) = v10;
      *(_QWORD *)(v36 + 8) = v35;
      *((_QWORD *)this + 43) = v35;
      v37 = (unint64_t *)(*((_QWORD *)this + 49) + 16 * *(int *)(v15 + 24));
      *v37 = v17 & 0xFFFFFFFFFFFFFFF9;
      v37[1] = v35 & 0xFFFFFFFFFFFFFFF9;
      v38 = *((unsigned int *)this + 136);
      if (v38 >= *((unsigned int *)this + 137))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 536, (uint64_t)this + 552, v38 + 1, 16);
        v38 = *((unsigned int *)this + 136);
      }
      v39 = (unint64_t *)(*((_QWORD *)this + 67) + 16 * v38);
      *v39 = v17 & 0xFFFFFFFFFFFFFFF9;
      v39[1] = v15;
      v40 = *((_DWORD *)this + 136) + 1;
      *((_DWORD *)this + 136) = v40;
      v15 = *(_QWORD *)(v15 + 8);
      if (v15 == v14)
      {
        v9 = (uint64_t *)((char *)this + 536);
        goto LABEL_49;
      }
    }
  }
  v40 = *((_DWORD *)this + 136);
LABEL_49:
  v41 = 126 - 2 * __clz(v40);
  if (v40)
    v42 = v41;
  else
    v42 = 0;
  sub_1C512D000(*v9, (uint64_t *)(*v9 + 16 * v40), (uint64_t)&v44, v42, 1);
  return 0;
}

int32x2_t llvm::SlotIndexes::removeMachineInstrFromMaps(int32x2_t *this, llvm::MachineInstr *a2)
{
  int32x2_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::MachineInstr *v6;
  unint64_t v7;
  int32x2_t result;
  int v9;
  int v10;

  v2 = this[46];
  v3 = this[48].u32[0];
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = *(_QWORD *)&v2 + 16 * v4;
    v6 = *(llvm::MachineInstr **)v5;
    if (*(llvm::MachineInstr **)v5 == a2)
      goto LABEL_3;
    v9 = 1;
    while (v6 != (llvm::MachineInstr *)-4096)
    {
      v10 = v4 + v9++;
      v4 = v10 & (v3 - 1);
      v6 = *(llvm::MachineInstr **)(*(_QWORD *)&v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = *(_QWORD *)&v2 + 16 * v4;
        goto LABEL_3;
      }
    }
  }
  v5 = *(_QWORD *)&v2 + 16 * v3;
LABEL_3:
  if (v5 != *(_QWORD *)&v2 + 16 * v3)
  {
    v7 = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v5 = -8192;
    result = vadd_s32(this[47], (int32x2_t)0x1FFFFFFFFLL);
    this[47] = result;
    *(_QWORD *)(v7 + 16) = 0;
  }
  return result;
}

int32x2_t *llvm::SlotIndexes::removeSingleMachineInstrFromMaps(int32x2_t *this, llvm::MachineInstr *a2)
{
  int32x2_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::MachineInstr *v6;
  int v7;
  int v8;
  int32x2_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  int32x2_t v22;

  v2 = this[46];
  v3 = this[48].u32[0];
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = *(_QWORD *)&v2 + 16 * v4;
    v6 = *(llvm::MachineInstr **)v5;
    if (*(llvm::MachineInstr **)v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != (llvm::MachineInstr *)-4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(llvm::MachineInstr **)(*(_QWORD *)&v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = *(_QWORD *)&v2 + 16 * v4;
        goto LABEL_8;
      }
    }
  }
  v5 = *(_QWORD *)&v2 + 16 * v3;
LABEL_8:
  if (v5 == *(_QWORD *)&v2 + 16 * v3)
    return this;
  v9 = *(int32x2_t *)(v5 + 8);
  v10 = *(_QWORD *)&v9 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v5 = -8192;
  this[47] = vadd_s32(this[47], (int32x2_t)0x1FFFFFFFFLL);
  if ((*((_BYTE *)a2 + 44) & 8) == 0)
  {
    *(_QWORD *)(v10 + 16) = 0;
    return this;
  }
  this += 46;
  v11 = *((_QWORD *)a2 + 1);
  *(_QWORD *)(v10 + 16) = v11;
  v21 = v11;
  v22 = v9;
  if ((_DWORD)v3)
  {
    v12 = v3 - 1;
    v13 = ((v11 >> 4) ^ (v11 >> 9)) & v12;
    v14 = (_QWORD *)(*(_QWORD *)this + 16 * v13);
    v15 = *v14;
    if (v11 == *v14)
      return this;
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = v14;
      v19 = v13 + v17++;
      v13 = v19 & v12;
      v14 = (_QWORD *)(*(_QWORD *)this + 16 * v13);
      v15 = *v14;
      if (v11 == *v14)
        return this;
    }
    if (v16)
      v20 = v16;
    else
      v20 = v14;
  }
  else
  {
    v20 = 0;
  }
  this = (int32x2_t *)sub_1C4850F64((uint64_t)this, (uint64_t)&v21, &v21, v20);
  *this = (int32x2_t)v21;
  this[1] = v22;
  return this;
}

unint64_t llvm::SlotIndexes::repairIndexesInRange(unint64_t result, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int32x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  __int16 v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unsigned __int8 v63;
  uint64_t v64;
  int32x2_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  int v69;
  int v70;
  int32x2_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t *v77;
  unint64_t v78;
  int v79;
  int32x2_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  int v86;
  int v87;

  v4 = a4;
  v5 = a3;
  v6 = (int32x2_t *)result;
  v7 = *(_QWORD *)(a2 + 56);
  if (v7 != a3)
  {
    v8 = *(_QWORD *)(result + 368);
    v9 = *(_DWORD *)(result + 384);
    v10 = v9 - 1;
    do
    {
      if (v9)
      {
        v11 = ((v5 >> 4) ^ (v5 >> 9)) & v10;
        v12 = *(_QWORD *)(v8 + 16 * v11);
        if (v5 == v12)
          goto LABEL_16;
        v13 = 1;
        while (v12 != -4096)
        {
          v14 = v11 + v13++;
          v11 = v14 & v10;
          v12 = *(_QWORD *)(v8 + 16 * v11);
          if (v5 == v12)
            goto LABEL_16;
        }
      }
      v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
      if (!v5 || (*(_BYTE *)v5 & 4) == 0)
      {
        while ((*(_WORD *)(v5 + 44) & 4) != 0)
          v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    while (v5 != v7);
    v5 = *(_QWORD *)(a2 + 56);
  }
LABEL_16:
  v15 = a2 + 48;
  if (a2 + 48 != a4)
  {
    v16 = *(_QWORD *)(result + 368);
    v17 = *(_DWORD *)(result + 384);
    v18 = v17 - 1;
    while (1)
    {
      if (v17)
      {
        v19 = ((v4 >> 4) ^ (v4 >> 9)) & v18;
        v20 = *(_QWORD *)(v16 + 16 * v19);
        if (v4 == v20)
        {
LABEL_31:
          v23 = 0;
          goto LABEL_33;
        }
        v21 = 1;
        while (v20 != -4096)
        {
          v22 = v19 + v21++;
          v19 = v22 & v18;
          v20 = *(_QWORD *)(v16 + 16 * v19);
          if (v4 == v20)
            goto LABEL_31;
        }
      }
      if (!v4 || (*(_BYTE *)v4 & 4) == 0)
      {
        while ((*(_WORD *)(v4 + 44) & 8) != 0)
          v4 = *(_QWORD *)(v4 + 8);
      }
      v4 = *(_QWORD *)(v4 + 8);
      v23 = 1;
      if (v4 == v15)
      {
        v4 = a2 + 48;
        goto LABEL_33;
      }
    }
  }
  v23 = 1;
LABEL_33:
  if (v5 == v7)
  {
    v39 = (uint64_t *)(*(_QWORD *)(result + 392) + 16 * *(unsigned int *)(a2 + 24));
    goto LABEL_52;
  }
  v24 = *(_WORD *)(v5 + 44);
  v25 = v5;
  if ((v24 & 4) != 0)
  {
    v25 = v5;
    do
      v25 = *(_QWORD *)v25 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v25 + 44) & 4) != 0);
  }
  v26 = v5;
  if ((v24 & 8) != 0)
  {
    v26 = v5;
    do
      v26 = *(_QWORD *)(v26 + 8);
    while ((*(_WORD *)(v26 + 44) & 8) != 0);
  }
  v27 = *(_QWORD *)(v26 + 8);
  if (v25 != v27)
  {
    while (1)
    {
      v28 = **(unsigned __int16 **)(v25 + 16);
      v29 = v28 > 0x17;
      v30 = (1 << v28) & 0x83E000;
      if (v29 || v30 == 0)
        break;
      v25 = *(_QWORD *)(v25 + 8);
      if (v25 == v27)
      {
        v25 = *(_QWORD *)(v26 + 8);
        break;
      }
    }
  }
  v32 = *(_QWORD *)(result + 368);
  v33 = *(unsigned int *)(result + 384);
  if (!(_DWORD)v33)
    goto LABEL_50;
  LODWORD(v34) = ((v25 >> 4) ^ (v25 >> 9)) & (v33 - 1);
  v35 = (uint64_t *)(v32 + 16 * v34);
  v36 = *v35;
  if (v25 != *v35)
  {
    v37 = 1;
    while (v36 != -4096)
    {
      v38 = v34 + v37++;
      v34 = v38 & (v33 - 1);
      v36 = *(_QWORD *)(v32 + 16 * v34);
      if (v25 == v36)
      {
        v35 = (uint64_t *)(v32 + 16 * v34);
        goto LABEL_51;
      }
    }
LABEL_50:
    v35 = (uint64_t *)(v32 + 16 * v33);
  }
LABEL_51:
  v39 = v35 + 1;
LABEL_52:
  v40 = *v39;
  if (v23)
  {
    v41 = (uint64_t *)(*(_QWORD *)(result + 392) + 16 * *(unsigned int *)(a2 + 24) + 8);
    goto LABEL_71;
  }
  v42 = *(_WORD *)(v4 + 44);
  v43 = v4;
  if ((v42 & 4) != 0)
  {
    v43 = v4;
    do
      v43 = *(_QWORD *)v43 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v43 + 44) & 4) != 0);
  }
  v44 = v4;
  if ((v42 & 8) != 0)
  {
    v44 = v4;
    do
      v44 = *(_QWORD *)(v44 + 8);
    while ((*(_WORD *)(v44 + 44) & 8) != 0);
  }
  v45 = *(_QWORD *)(v44 + 8);
  if (v43 != v45)
  {
    while (1)
    {
      v46 = **(unsigned __int16 **)(v43 + 16);
      v29 = v46 > 0x17;
      v47 = (1 << v46) & 0x83E000;
      if (v29 || v47 == 0)
        break;
      v43 = *(_QWORD *)(v43 + 8);
      if (v43 == v45)
      {
        v43 = *(_QWORD *)(v44 + 8);
        break;
      }
    }
  }
  v49 = *(_QWORD *)(result + 368);
  v50 = *(unsigned int *)(result + 384);
  if (!(_DWORD)v50)
    goto LABEL_69;
  LODWORD(v51) = ((v43 >> 4) ^ (v43 >> 9)) & (v50 - 1);
  v52 = (uint64_t *)(v49 + 16 * v51);
  v53 = *v52;
  if (v43 != *v52)
  {
    v54 = 1;
    while (v53 != -4096)
    {
      v55 = v51 + v54++;
      v51 = v55 & (v50 - 1);
      v53 = *(_QWORD *)(v49 + 16 * v51);
      if (v43 == v53)
      {
        v52 = (uint64_t *)(v49 + 16 * v51);
        goto LABEL_70;
      }
    }
LABEL_69:
    v52 = (uint64_t *)(v49 + 16 * v50);
  }
LABEL_70:
  v41 = v52 + 1;
LABEL_71:
  v56 = 0;
  v57 = *v41;
  v58 = v40 & 0xFFFFFFFFFFFFFFF8;
  v59 = (_QWORD *)(v57 & 0xFFFFFFFFFFFFFFF8);
  v60 = v4;
  while (1)
  {
    v61 = v56;
    v62 = (_QWORD *)v60;
    if (v59 == (_QWORD *)v58)
      break;
    v63 = (v5 != v7) | v56;
LABEL_76:
    v64 = v59[2];
    if ((v60 == v15) | v61 & 1)
      v60 = 0;
    result = v62 == (_QWORD *)v5;
    if (v64 != v60 || ((v62 == (_QWORD *)v5) & v63) != 0)
    {
      if (v60)
      {
        v65 = v6[46];
        result = v6[48].u32[0];
        if ((_DWORD)result)
        {
          LODWORD(v66) = (result - 1) & ((v60 >> 4) ^ (v60 >> 9));
          v67 = (uint64_t *)(*(_QWORD *)&v65 + 16 * v66);
          v68 = *v67;
          if (v60 == *v67)
            goto LABEL_94;
          v69 = 1;
          while (v68 != -4096)
          {
            v70 = v66 + v69++;
            v66 = v70 & (result - 1);
            v68 = *(_QWORD *)(*(_QWORD *)&v65 + 16 * v66);
            if (v60 == v68)
            {
              v67 = (uint64_t *)(*(_QWORD *)&v65 + 16 * v66);
              goto LABEL_94;
            }
          }
        }
        v67 = (uint64_t *)(*(_QWORD *)&v65 + 16 * result);
LABEL_94:
        if (v67 != (uint64_t *)(*(_QWORD *)&v65 + 16 * result))
          goto LABEL_95;
        v56 = 1;
        v60 = v5;
        if (v62 != (_QWORD *)v5)
        {
          v60 = *v62 & 0xFFFFFFFFFFFFFFF8;
          if (!v60 || (v56 = v61, (*(_BYTE *)v60 & 4) == 0))
          {
            v56 = v61;
            if ((*(_WORD *)(v60 + 44) & 4) != 0)
            {
              do
                v60 = *(_QWORD *)v60 & 0xFFFFFFFFFFFFFFF8;
              while ((*(_WORD *)(v60 + 44) & 4) != 0);
LABEL_111:
              v56 = v61;
            }
          }
        }
      }
      else
      {
LABEL_95:
        v59 = (_QWORD *)*v59;
        v60 = (unint64_t)v62;
        v56 = v61;
        if (v64)
        {
          v71 = v6[46];
          v72 = v6[48].u32[0];
          if (!(_DWORD)v72)
            goto LABEL_108;
          result = ((_DWORD)v72 - 1) & ((v64 >> 4) ^ (v64 >> 9));
          v73 = (uint64_t *)(*(_QWORD *)&v71 + 16 * result);
          v74 = *v73;
          if (*v73 != v64)
          {
            v75 = 1;
            while (v74 != -4096)
            {
              v76 = result + v75++;
              result = v76 & (v72 - 1);
              v74 = *(_QWORD *)(*(_QWORD *)&v71 + 16 * result);
              if (v74 == v64)
              {
                v73 = (uint64_t *)(*(_QWORD *)&v71 + 16 * result);
                goto LABEL_109;
              }
            }
LABEL_108:
            v73 = (uint64_t *)(*(_QWORD *)&v71 + 16 * v72);
          }
LABEL_109:
          v77 = (uint64_t *)(*(_QWORD *)&v71 + 16 * v72);
          v60 = (unint64_t)v62;
          v56 = v61;
          if (v73 != v77)
          {
            v78 = v73[1] & 0xFFFFFFFFFFFFFFF8;
            *v73 = -8192;
            v6[47] = vadd_s32(v6[47], (int32x2_t)0x1FFFFFFFFLL);
            *(_QWORD *)(v78 + 16) = 0;
            v60 = (unint64_t)v62;
            goto LABEL_111;
          }
        }
      }
    }
    else
    {
      v59 = (_QWORD *)*v59;
      v56 = 1;
      v60 = v5;
      if (v62 != (_QWORD *)v5)
      {
        v60 = *v62 & 0xFFFFFFFFFFFFFFF8;
        if (!v60 || (v56 = v61, (*(_BYTE *)v60 & 4) == 0))
        {
          v56 = v61;
          if ((*(_WORD *)(v60 + 44) & 4) != 0)
          {
            do
              v60 = *(_QWORD *)v60 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v60 + 44) & 4) != 0);
            goto LABEL_111;
          }
        }
      }
    }
  }
  v63 = (v5 != v7) | v56;
  if (v60 != v5 || (v63 & 1) == 0)
    goto LABEL_76;
  while (v4 != v5)
  {
    v4 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8;
    if (!v4 || (*(_BYTE *)v4 & 4) == 0)
    {
      while ((*(_WORD *)(v4 + 44) & 4) != 0)
        v4 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8;
    }
    v79 = **(unsigned __int16 **)(v4 + 16);
    if ((v79 - 13) >= 5 && v79 != 23)
    {
      v81 = v6[46];
      v82 = v6[48].u32[0];
      if (!(_DWORD)v82)
        goto LABEL_127;
      LODWORD(v83) = (v82 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      v84 = (uint64_t *)(*(_QWORD *)&v81 + 16 * v83);
      v85 = *v84;
      if (v4 != *v84)
      {
        v86 = 1;
        while (v85 != -4096)
        {
          v87 = v83 + v86++;
          v83 = v87 & (v82 - 1);
          v85 = *(_QWORD *)(*(_QWORD *)&v81 + 16 * v83);
          if (v4 == v85)
          {
            v84 = (uint64_t *)(*(_QWORD *)&v81 + 16 * v83);
            goto LABEL_128;
          }
        }
LABEL_127:
        v84 = (uint64_t *)(*(_QWORD *)&v81 + 16 * v82);
      }
LABEL_128:
      if (v84 == (uint64_t *)(*(_QWORD *)&v81 + 16 * v82))
        result = sub_1C4850BC8((uint64_t)v6, v4, 0);
    }
  }
  return result;
}

uint64_t sub_1C528B5F8(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeEdgeBundlesPass(a1, a2);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Spill Code Placement Analysis";
  *(_QWORD *)(v3 + 8) = 29;
  *(_QWORD *)(v3 + 16) = "spill-code-placement";
  *(_QWORD *)(v3 + 24) = 20;
  *(_QWORD *)(v3 + 32) = &llvm::SpillPlacement::ID;
  *(_WORD *)(v3 + 40) = 257;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = llvm::callDefaultCtor<llvm::SpillPlacement>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t llvm::SpillPlacement::runOnMachineFunction(llvm::SpillPlacement *this, llvm::MachineFunction *a2)
{
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void **v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;

  *((_QWORD *)this + 31) = a2;
  v4 = (void **)**((_QWORD **)this + 1);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::EdgeBundles::ID);
  *((_QWORD *)this + 32) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::EdgeBundles::ID);
  v6 = (void **)**((_QWORD **)this + 1);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != &llvm::MachineLoopInfo::ID);
  *((_QWORD *)this + 33) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), &llvm::MachineLoopInfo::ID);
  v8 = *(unsigned int *)(*((_QWORD *)this + 32) + 304);
  v9 = (_QWORD *)operator new[]();
  *v9 = 112;
  v9[1] = v8;
  v10 = v9 + 2;
  if ((_DWORD)v8)
  {
    v11 = v9 + 2;
    do
    {
      *v11 = 0;
      v11[1] = 0;
      v11[3] = v11 + 5;
      v11[4] = 0x400000000;
      v11[13] = 0;
      v11 += 14;
    }
    while (v11 != &v10[14 * v8]);
  }
  *((_QWORD *)this + 35) = v10;
  *((_DWORD *)this + 122) = 0;
  sub_1C50B2990((char *)this + 480, *(_DWORD *)(*((_QWORD *)this + 32) + 304));
  v12 = (uint64_t *)((char *)this + 392);
  v13 = *((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13);
  v14 = (v13 >> 3);
  v15 = *((unsigned int *)this + 100);
  if (v14 != v15)
  {
    if (v14 >= v15)
    {
      if (v14 > *((unsigned int *)this + 101))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 392, (uint64_t)this + 408, (v13 >> 3), 8);
        v14 = (v13 >> 3);
        v15 = *((unsigned int *)this + 100);
      }
      v16 = v14 - v15;
      if (v16)
        bzero((void *)(*v12 + 8 * v15), 8 * v16);
    }
    *((_DWORD *)this + 100) = v13 >> 3;
  }
  v17 = (void **)**((_QWORD **)this + 1);
  do
  {
    v18 = *v17;
    v17 += 2;
  }
  while (v18 != &llvm::MachineBlockFrequencyInfo::ID);
  v19 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v17 - 1) + 96))(*(v17 - 1), &llvm::MachineBlockFrequencyInfo::ID);
  *((_QWORD *)this + 34) = v19;
  v20 = *(_QWORD *)(v19 + 248);
  if (v20)
    v21 = *(_QWORD *)(*(_QWORD *)(v20 + 8) + 16);
  else
    v21 = 0;
  v22 = ((v21 >> 12) & 1) + (v21 >> 13);
  if (v22 <= 1)
    v22 = 1;
  *((_QWORD *)this + 59) = v22;
  v23 = *((_QWORD *)a2 + 41);
  if ((llvm::MachineFunction *)v23 != (llvm::MachineFunction *)((char *)a2 + 320))
  {
    v24 = *v12;
    while (1)
    {
      if (!v20)
        goto LABEL_34;
      v25 = *(_DWORD *)(v20 + 176);
      if (!v25)
        goto LABEL_34;
      v26 = *(_QWORD *)(v20 + 160);
      v27 = v25 - 1;
      v28 = (v25 - 1) & ((v23 >> 4) ^ (v23 >> 9));
      v29 = *(_QWORD *)(v26 + 16 * v28);
      if (v29 != v23)
        break;
LABEL_26:
      v30 = *(unsigned int *)(v26 + 16 * v28 + 8);
      if (v30 == 0xFFFFFFFFLL)
        goto LABEL_34;
      v31 = *(_QWORD *)(*(_QWORD *)(v20 + 8) + 24 * v30 + 16);
LABEL_28:
      *(_QWORD *)(v24 + 8 * *(unsigned int *)(v23 + 24)) = v31;
      v23 = *(_QWORD *)(v23 + 8);
      if ((llvm::MachineFunction *)v23 == (llvm::MachineFunction *)((char *)a2 + 320))
        return 0;
    }
    v32 = 1;
    while (v29 != -4096)
    {
      v33 = v28 + v32++;
      v28 = v33 & v27;
      v29 = *(_QWORD *)(v26 + 16 * v28);
      if (v29 == v23)
        goto LABEL_26;
    }
LABEL_34:
    v31 = 0;
    goto LABEL_28;
  }
  return 0;
}

uint64_t llvm::SpillPlacement::setThreshold(uint64_t result, _QWORD *a2)
{
  unint64_t v2;

  v2 = ((*a2 >> 12) & 1) + (*a2 >> 13);
  if (v2 <= 1)
    v2 = 1;
  *(_QWORD *)(result + 472) = v2;
  return result;
}

uint64_t llvm::SpillPlacement::releaseMemory(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = this;
  v2 = *(_QWORD *)(this + 280);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 - 8);
    if (v3)
    {
      v4 = 112 * v3;
      do
      {
        v5 = *(void **)(v2 + v4 - 88);
        if ((void *)(v2 + v4 - 72) != v5)
          free(v5);
        v4 -= 112;
      }
      while (v4);
    }
    this = MEMORY[0x1CAA32F9C](v2 - 16, 0x1080C8068569297);
  }
  *(_QWORD *)(v1 + 280) = 0;
  *(_DWORD *)(v1 + 488) = 0;
  return this;
}

uint64_t llvm::SpillPlacement::activate(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;

  v2 = *(_QWORD *)(this + 528);
  v3 = a2;
  v4 = *(unsigned __int8 *)(v2 + a2);
  v5 = *(_DWORD *)(this + 488);
  if (v5 <= v4)
    goto LABEL_4;
  while (*(_DWORD *)(*(_QWORD *)(this + 480) + 4 * v4) != a2)
  {
    v4 += 256;
    if (v4 >= v5)
      goto LABEL_4;
  }
  if (v5 == v4)
  {
LABEL_4:
    *(_BYTE *)(v2 + a2) = v5;
    v6 = *(unsigned int *)(this + 488);
    if (v6 >= *(_DWORD *)(this + 492))
    {
      v15 = a2;
      v13 = a2;
      v14 = this;
      llvm::SmallVectorBase<unsigned int>::grow_pod(this + 480, this + 496, v6 + 1, 4);
      v3 = v15;
      a2 = v13;
      this = v14;
      LODWORD(v6) = *(_DWORD *)(v14 + 488);
    }
    *(_DWORD *)(*(_QWORD *)(this + 480) + 4 * v6) = a2;
    ++*(_DWORD *)(this + 488);
  }
  v7 = a2 >> 6;
  v8 = **(_QWORD **)(this + 288);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if ((v9 & (1 << a2)) == 0)
  {
    *(_QWORD *)(v8 + 8 * v7) = v9 | (1 << a2);
    v10 = *(_QWORD *)(this + 280);
    v11 = v10 + 112 * v3;
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_DWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 104) = *(_QWORD *)(this + 472);
    *(_DWORD *)(v11 + 32) = 0;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(this + 256) + 312) + 48 * v3 + 8) >= 0x65u)
    {
      *(_QWORD *)(v10 + 112 * v3 + 8) = 0;
      v12 = *(_QWORD *)(*(_QWORD *)(this + 272) + 248);
      if (v12)
        v12 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 16) >> 4;
      *(_QWORD *)(*(_QWORD *)(this + 280) + 112 * v3) = v12;
    }
  }
  return this;
}

_QWORD *llvm::SpillPlacement::addConstraints(_QWORD *this, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a3)
  {
    v3 = this;
    v4 = 8 * a3;
    v5 = (unsigned __int16 *)(a2 + 4);
    do
    {
      v6 = *((unsigned int *)v5 - 1);
      v7 = *(_QWORD *)(v3[49] + 8 * v6);
      v8 = *v5;
      if (*v5)
      {
        v9 = *(_DWORD *)(*(_QWORD *)(v3[32] + 256) + 4 * (2 * v6));
        this = (_QWORD *)llvm::SpillPlacement::activate((uint64_t)v3, v9);
        v10 = v3[35];
        v11 = (uint64_t *)(v10 + 112 * v9);
        v8 = *v5;
        v12 = *v5;
        switch(v12)
        {
          case 4:
            *v11 = -1;
            break;
          case 1:
            v13 = v10 + 112 * v9;
            v14 = *(_QWORD *)(v13 + 8);
            v15 = __CFADD__(v7, v14);
            v16 = v7 + v14;
            if (v15)
              v16 = -1;
            *(_QWORD *)(v13 + 8) = v16;
            break;
          case 2:
            v24 = v7 + *v11;
            if (__CFADD__(v7, *v11))
              v24 = -1;
            *v11 = v24;
            break;
          default:
            goto LABEL_12;
        }
        v8 = *v5;
      }
LABEL_12:
      if (v8 >= 0x100)
      {
        v17 = *(_DWORD *)(*(_QWORD *)(v3[32] + 256) + 4 * ((2 * *((_DWORD *)v5 - 1)) | 1u));
        this = (_QWORD *)llvm::SpillPlacement::activate((uint64_t)v3, v17);
        v18 = v3[35];
        v19 = (uint64_t *)(v18 + 112 * v17);
        v20 = *((unsigned __int8 *)v5 + 1);
        switch(v20)
        {
          case 4:
            *v19 = -1;
            break;
          case 1:
            v21 = v18 + 112 * v17;
            v22 = *(_QWORD *)(v21 + 8);
            v15 = __CFADD__(v7, v22);
            v23 = v7 + v22;
            if (v15)
              v23 = -1;
            *(_QWORD *)(v21 + 8) = v23;
            break;
          case 2:
            v25 = v7 + *v19;
            if (__CFADD__(v7, *v19))
              v25 = -1;
            *v19 = v25;
            break;
        }
      }
      v5 += 4;
      v4 -= 8;
    }
    while (v4);
  }
  return this;
}

_QWORD *llvm::SpillPlacement::addPrefSpill(_QWORD *this, unsigned int *a2, uint64_t a3, int a4)
{
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a3)
  {
    v6 = this;
    v7 = 4 * a3;
    do
    {
      v9 = *a2++;
      v8 = v9;
      v10 = *(_QWORD *)(v6[49] + 8 * v9);
      v11 = 2 * v10;
      if (__CFADD__(v10, v10))
        v11 = -1;
      if (a4)
        v12 = v11;
      else
        v12 = v10;
      v13 = *(_QWORD *)(v6[32] + 256);
      v14 = *(_DWORD *)(v13 + 8 * v8);
      v15 = *(_DWORD *)(v13 + 4 * ((2 * v8) | 1));
      llvm::SpillPlacement::activate((uint64_t)v6, v14);
      this = (_QWORD *)llvm::SpillPlacement::activate((uint64_t)v6, v15);
      v16 = v6[35];
      v17 = *(_QWORD *)(v16 + 112 * v14);
      v18 = __CFADD__(v12, v17);
      v19 = v12 + v17;
      if (v18)
        v19 = -1;
      *(_QWORD *)(v16 + 112 * v14) = v19;
      v20 = *(_QWORD *)(v16 + 112 * v15);
      v18 = __CFADD__(v12, v20);
      v21 = v12 + v20;
      if (v18)
        v21 = -1;
      *(_QWORD *)(v16 + 112 * v15) = v21;
      v7 -= 4;
    }
    while (v7);
  }
  return this;
}

_QWORD *llvm::SpillPlacement::addLinks(_QWORD *this, unsigned int *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  if (a3)
  {
    v4 = this;
    v5 = 4 * a3;
    do
    {
      v6 = *a2;
      v7 = *(_QWORD *)(v4[32] + 256);
      v8 = *(_DWORD *)(v7 + 4 * (2 * v6));
      v9 = *(_DWORD *)(v7 + 4 * ((2 * (_DWORD)v6) | 1u));
      if (v8 != v9)
      {
        llvm::SpillPlacement::activate((uint64_t)v4, *(_DWORD *)(v7 + 4 * (2 * v6)));
        llvm::SpillPlacement::activate((uint64_t)v4, v9);
        v10 = *(_QWORD *)(v4[49] + 8 * v6);
        sub_1C528BE34((unsigned int *)(v4[35] + 112 * v8), v9, v10);
        this = sub_1C528BE34((unsigned int *)(v4[35] + 112 * v9), v8, v10);
      }
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return this;
}

_QWORD *sub_1C528BE34(unsigned int *a1, unsigned int a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v7 = *((_QWORD *)a1 + 3);
  result = a1 + 6;
  v6 = v7;
  v8 = result[10];
  v9 = __CFADD__(a3, v8);
  v10 = a3 + v8;
  if (v9)
    v10 = -1;
  result[10] = v10;
  v11 = *((unsigned int *)result + 2);
  if ((_DWORD)v11)
  {
    v12 = 16 * v11;
    v13 = v6;
    while (*(_DWORD *)(v13 + 8) != a2)
    {
      v13 += 16;
      v12 -= 16;
      if (!v12)
        goto LABEL_8;
    }
    v16 = a3 + *(_QWORD *)v13;
    if (__CFADD__(a3, *(_QWORD *)v13))
      v16 = -1;
    *(_QWORD *)v13 = v16;
  }
  else
  {
LABEL_8:
    v14 = a2;
    if (v11 >= a1[9])
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(a1 + 10), v11 + 1, 16);
      v6 = *((_QWORD *)a1 + 3);
      v11 = a1[8];
    }
    v15 = (_QWORD *)(v6 + 16 * v11);
    *v15 = a3;
    v15[1] = v14;
    ++a1[8];
  }
  return result;
}

BOOL llvm::SpillPlacement::scanActiveBundles(llvm::SpillPlacement *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;

  *((_DWORD *)this + 88) = 0;
  v2 = *((_QWORD *)this + 36);
  v3 = sub_1C476B7EC(v2);
  if (v3 != -1)
  {
    for (i = v3; i != -1; i = sub_1C476BA0C((_QWORD *)v2, i + 1, *(_DWORD *)(v2 + 64), 1u))
    {
      llvm::SpillPlacement::update(this, i);
      v5 = *((_QWORD *)this + 35);
      v6 = (unint64_t *)(v5 + 112 * i);
      v7 = v6[13];
      v8 = *v6;
      v9 = *(_QWORD *)(v5 + 112 * i + 8);
      v10 = __CFADD__(v7, v9);
      v11 = v7 + v9;
      if (v10)
        v11 = -1;
      if (v8 < v11 && *(int *)(v5 + 112 * i + 16) >= 1)
      {
        v12 = *((unsigned int *)this + 88);
        if (v12 >= *((unsigned int *)this + 89))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 344, (uint64_t)this + 360, v12 + 1, 4);
          v12 = *((unsigned int *)this + 88);
        }
        *(_DWORD *)(*((_QWORD *)this + 43) + 4 * v12) = i;
        ++*((_DWORD *)this + 88);
      }
    }
  }
  return *((_DWORD *)this + 88) != 0;
}

uint64_t llvm::SpillPlacement::update(llvm::SpillPlacement *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BOOL4 *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  _BOOL4 *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int *v38;
  unint64_t v39;
  unint64_t v40;

  v2 = *((_QWORD *)this + 35);
  v3 = v2 + 112 * a2;
  v5 = *(_QWORD *)v3;
  v4 = *(_QWORD *)(v3 + 8);
  v39 = v4;
  v40 = v5;
  v6 = *(_QWORD *)(v3 + 24);
  v7 = *(unsigned int *)(v3 + 32);
  if ((_DWORD)v7)
  {
    v8 = 16 * v7;
    v9 = (unsigned int *)(v6 + 8);
    while (1)
    {
      v10 = *(_DWORD *)(v2 + 112 * *v9 + 16);
      if (v10 == 1)
        break;
      if (v10 == -1)
      {
        v11 = (uint64_t *)&v40;
        goto LABEL_5;
      }
LABEL_9:
      v9 += 4;
      v8 -= 16;
      if (!v8)
      {
        v4 = v39;
        v5 = v40;
        goto LABEL_13;
      }
    }
    v11 = (uint64_t *)&v39;
LABEL_5:
    v12 = *((_QWORD *)v9 - 1);
    v13 = __CFADD__(v12, *v11);
    v14 = v12 + *v11;
    if (v13)
      v14 = -1;
    *v11 = v14;
    goto LABEL_9;
  }
LABEL_13:
  v15 = v2 + 112 * a2;
  v18 = *(_DWORD *)(v15 + 16);
  v17 = (_BOOL4 *)(v15 + 16);
  v16 = v18;
  v19 = *((_QWORD *)this + 59);
  v20 = v19 + v4;
  if (__CFADD__(v19, v4))
    v20 = -1;
  if (v5 >= v20)
  {
    *v17 = -1;
    if (v16 <= 0)
      return 0;
  }
  else
  {
    v13 = __CFADD__(v19, v5);
    v21 = v19 + v5;
    if (v13)
      v21 = -1;
    v22 = v4 >= v21;
    *v17 = v22;
    if (v16 > 0 == v22)
      return 0;
  }
  if (!(_DWORD)v7)
    return 1;
  v25 = v6 + 16 * v7;
  v26 = (char *)this + 480;
  do
  {
    v27 = *(unsigned int *)(v6 + 8);
    if (*v17 != *(_DWORD *)(v2 + 112 * v27 + 16))
    {
      v28 = *((_QWORD *)this + 66);
      v29 = *(unsigned __int8 *)(v28 + v27);
      v30 = *((_DWORD *)this + 122);
      if (v30 <= v29)
        goto LABEL_33;
      while (*(_DWORD *)(*((_QWORD *)this + 60) + 4 * v29) != (_DWORD)v27)
      {
        v29 += 256;
        if (v29 >= v30)
          goto LABEL_33;
      }
      if (v30 == v29)
      {
LABEL_33:
        *(_BYTE *)(v28 + v27) = v30;
        v31 = *((unsigned int *)this + 122);
        if (v31 >= *((unsigned int *)this + 123))
        {
          v38 = (unsigned int *)this;
          v33 = v2;
          v34 = v26;
          v35 = v25;
          v36 = v6;
          v32 = v17;
          v37 = v27;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v26, (uint64_t)this + 496, v31 + 1, 4);
          LODWORD(v27) = v37;
          this = (llvm::SpillPlacement *)v38;
          v25 = v35;
          v6 = v36;
          v17 = v32;
          v2 = v33;
          v26 = v34;
          v31 = v38[122];
        }
        *(_DWORD *)(*((_QWORD *)this + 60) + 4 * v31) = v27;
        ++*((_DWORD *)this + 122);
      }
    }
    v6 += 16;
    v23 = 1;
  }
  while (v6 != v25);
  return v23;
}

_DWORD *llvm::SpillPlacement::iterate(_DWORD *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;

  this[88] = 0;
  v1 = *(_DWORD *)(*((_QWORD *)this + 32) + 304);
  if (10 * v1)
  {
    v2 = (uint64_t)this;
    v3 = (uint64_t)(this + 86);
    v4 = -10 * v1;
    do
    {
      v5 = *(unsigned int *)(v2 + 488);
      if (!(_DWORD)v5)
        break;
      v6 = *(_DWORD *)(*(_QWORD *)(v2 + 480) + 4 * v5 - 4);
      *(_DWORD *)(v2 + 488) = v5 - 1;
      this = (_DWORD *)llvm::SpillPlacement::update((llvm::SpillPlacement *)v2, v6);
      if ((_DWORD)this && *(int *)(*(_QWORD *)(v2 + 280) + 112 * v6 + 16) >= 1)
      {
        v7 = *(unsigned int *)(v2 + 352);
        if (v7 >= *(unsigned int *)(v2 + 356))
        {
          this = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v2 + 360, v7 + 1, 4);
          v7 = *(unsigned int *)(v2 + 352);
        }
        *(_DWORD *)(*(_QWORD *)(v2 + 344) + 4 * v7) = v6;
        ++*(_DWORD *)(v2 + 352);
      }
    }
    while (!__CFADD__(v4++, 1));
  }
  return this;
}

void llvm::SpillPlacement::prepare(uint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  *(_DWORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 288) = a2;
  *(_DWORD *)(a2 + 8) = 0;
  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 256) + 304);
  *(_DWORD *)(a2 + 64) = v3;
  if ((v3 + 63) < 0x40)
  {
    v7 = 0;
  }
  else
  {
    v4 = (v3 + 63) >> 6;
    if (v4 > *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v4, 8);
      v5 = *(unsigned int *)(a2 + 8);
      v3 = *(_DWORD *)(a2 + 64);
      v6 = *(_DWORD *)(a2 + 8);
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    bzero((void *)(*(_QWORD *)a2 + 8 * v5), 8 * v4);
    v7 = (v6 + v4);
    *(_DWORD *)(a2 + 8) = v7;
  }
  if ((v3 & 0x3F) != 0)
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v7 - 8) &= ~(-1 << (v3 & 0x3F));
}

uint64_t llvm::SpillPlacement::finish(llvm::SpillPlacement *this)
{
  uint64_t v2;
  unsigned int v3;
  char v4;

  v2 = *((_QWORD *)this + 36);
  v3 = sub_1C476B7EC(v2);
  if (v3 == -1)
  {
    v4 = 1;
  }
  else
  {
    v4 = 1;
    do
    {
      if (*(int *)(*((_QWORD *)this + 35) + 112 * v3 + 16) <= 0)
      {
        v4 = 0;
        *(_QWORD *)(**((_QWORD **)this + 36) + (((unint64_t)v3 >> 3) & 0x1FFFFFF8)) &= ~(1 << v3);
      }
      v3 = sub_1C476BA0C((_QWORD *)v2, v3 + 1, *(_DWORD *)(v2 + 64), 1u);
    }
    while (v3 != -1);
  }
  *((_QWORD *)this + 36) = 0;
  return v4 & 1;
}

llvm::raw_ostream *llvm::SpillPlacement::BlockConstraint::print(llvm::SpillPlacement::BlockConstraint *this, llvm::raw_ostream *a2)
{
  llvm *v3;
  llvm::raw_ostream *v4;
  _BYTE *v5;
  _WORD *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  void *v10;
  _WORD *v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  void *v15;
  _WORD *v16;
  void *v17;
  const char *v18;
  size_t v19;
  llvm::raw_ostream *result;
  _BYTE *v21;

  v3 = llvm::dbgs(this);
  v4 = v3;
  v5 = (_BYTE *)*((_QWORD *)v3 + 4);
  if (*((_BYTE **)v3 + 3) == v5)
  {
    v4 = llvm::raw_ostream::write(v3, "{", 1uLL);
  }
  else
  {
    *v5 = 123;
    ++*((_QWORD *)v3 + 4);
  }
  sub_1C5E21910(v4, *(unsigned int *)this, 0, 0, 0);
  v6 = (_WORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v6 > 1uLL)
  {
    *v6 = 8236;
    *((_QWORD *)v4 + 4) += 2;
  }
  else
  {
    v4 = llvm::raw_ostream::write(v4, ", ", 2uLL);
  }
  v7 = *((char *)this + 4);
  v8 = qword_1C85FB8E0[v7];
  v9 = off_1E814AC10[v7];
  v10 = (void *)*((_QWORD *)v4 + 4);
  if (v8 <= *((_QWORD *)v4 + 3) - (_QWORD)v10)
  {
    memcpy(v10, v9, v8);
    v11 = (_WORD *)(*((_QWORD *)v4 + 4) + v8);
    *((_QWORD *)v4 + 4) = v11;
  }
  else
  {
    v4 = llvm::raw_ostream::write(v4, v9, v8);
    v11 = (_WORD *)*((_QWORD *)v4 + 4);
  }
  if (*((_QWORD *)v4 + 3) - (_QWORD)v11 > 1uLL)
  {
    *v11 = 8236;
    *((_QWORD *)v4 + 4) += 2;
  }
  else
  {
    v4 = llvm::raw_ostream::write(v4, ", ", 2uLL);
  }
  v12 = *((char *)this + 5);
  v13 = qword_1C85FB8E0[v12];
  v14 = off_1E814AC10[v12];
  v15 = (void *)*((_QWORD *)v4 + 4);
  if (v13 <= *((_QWORD *)v4 + 3) - (_QWORD)v15)
  {
    memcpy(v15, v14, v13);
    v16 = (_WORD *)(*((_QWORD *)v4 + 4) + v13);
    *((_QWORD *)v4 + 4) = v16;
  }
  else
  {
    v4 = llvm::raw_ostream::write(v4, v14, v13);
    v16 = (_WORD *)*((_QWORD *)v4 + 4);
  }
  if (*((_QWORD *)v4 + 3) - (_QWORD)v16 > 1uLL)
  {
    *v16 = 8236;
    v17 = (void *)(*((_QWORD *)v4 + 4) + 2);
    *((_QWORD *)v4 + 4) = v17;
  }
  else
  {
    v4 = llvm::raw_ostream::write(v4, ", ", 2uLL);
    v17 = (void *)*((_QWORD *)v4 + 4);
  }
  if (*((_BYTE *)this + 6))
    v18 = "changes";
  else
    v18 = "no change";
  if (*((_BYTE *)this + 6))
    v19 = 7;
  else
    v19 = 9;
  if (v19 <= *((_QWORD *)v4 + 3) - (_QWORD)v17)
  {
    result = (llvm::raw_ostream *)memcpy(v17, v18, v19);
    v21 = (_BYTE *)(*((_QWORD *)v4 + 4) + v19);
    *((_QWORD *)v4 + 4) = v21;
  }
  else
  {
    result = llvm::raw_ostream::write(v4, v18, v19);
    v4 = result;
    v21 = (_BYTE *)*((_QWORD *)result + 4);
  }
  if (*((_BYTE **)v4 + 3) == v21)
    return llvm::raw_ostream::write(v4, "}", 1uLL);
  *v21 = 125;
  ++*((_QWORD *)v4 + 4);
  return result;
}

llvm *llvm::SpillPlacement::BlockConstraint::dump(llvm::SpillPlacement::BlockConstraint *this)
{
  llvm::raw_ostream *v2;
  llvm *v3;
  llvm *result;
  _BYTE *v5;

  llvm::dbgs(this);
  v3 = llvm::SpillPlacement::BlockConstraint::print(this, v2);
  result = llvm::dbgs(v3);
  v5 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v5)
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  *v5 = 10;
  ++*((_QWORD *)result + 4);
  return result;
}

unint64_t sub_1C528C724(_QWORD *a1, uint64_t a2, llvm::MachineBasicBlock *this)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t FirstTerminator;
  _QWORD *v20;
  __int16 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  __int16 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  int v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  BOOL v68;
  unint64_t v69;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  BOOL v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  _QWORD v92[2];

  v92[1] = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned int *)this + 6);
  v7 = a1[1];
  v8 = (unint64_t *)(v7 + 16 * v6);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 288) + 392) + 16 * v6 + 8);
  v90 = v92;
  v91 = 0x100000000;
  v11 = (uint64_t *)*((_QWORD *)this + 11);
  v10 = (uint64_t *)*((_QWORD *)this + 12);
  if (v11 != v10)
  {
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = *v11;
      if (*(_BYTE *)(*v11 + 184))
        break;
      if (*(_BYTE *)(v14 + 202))
      {
        v15 = HIDWORD(v91);
        goto LABEL_7;
      }
LABEL_10:
      if (++v11 == v10)
        goto LABEL_13;
    }
    v15 = HIDWORD(v91);
    v13 = 1;
LABEL_7:
    if (v12 >= v15)
    {
      v88 = a2;
      v89 = v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, (uint64_t)v92, v12 + 1, 8);
      a2 = v88;
      v9 = v89;
      v12 = v91;
    }
    *((_QWORD *)v90 + v12) = v14;
    v12 = v91 + 1;
    LODWORD(v91) = v91 + 1;
    goto LABEL_10;
  }
  v12 = 0;
  v13 = 0;
LABEL_13:
  v16 = *v8;
  if (*v8 > 7)
    goto LABEL_77;
  v17 = a2;
  v18 = v9;
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(this);
  v9 = v18;
  v20 = (_QWORD *)((char *)this + 48);
  v16 = v18;
  if ((llvm::MachineBasicBlock *)((char *)this + 48) != (llvm::MachineBasicBlock *)FirstTerminator)
  {
    v21 = *(_WORD *)(FirstTerminator + 44);
    v22 = FirstTerminator;
    if ((v21 & 4) != 0)
    {
      v22 = FirstTerminator;
      do
        v22 = *(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v22 + 44) & 4) != 0);
    }
    v23 = *(_QWORD *)(*a1 + 288);
    if ((v21 & 8) != 0)
    {
      do
        FirstTerminator = *(_QWORD *)(FirstTerminator + 8);
      while ((*(_WORD *)(FirstTerminator + 44) & 8) != 0);
    }
    v24 = *(_QWORD *)(FirstTerminator + 8);
    if (v22 != v24)
    {
      while (1)
      {
        v25 = **(unsigned __int16 **)(v22 + 16);
        v26 = v25 > 0x17;
        v27 = (1 << v25) & 0x83E000;
        if (v26 || v27 == 0)
          break;
        v22 = *(_QWORD *)(v22 + 8);
        if (v22 == v24)
        {
          v22 = *(_QWORD *)(FirstTerminator + 8);
          break;
        }
      }
    }
    v29 = *(_QWORD *)(v23 + 368);
    v30 = *(unsigned int *)(v23 + 384);
    if ((_DWORD)v30)
    {
      LODWORD(v31) = ((v22 >> 4) ^ (v22 >> 9)) & (v30 - 1);
      v32 = (uint64_t *)(v29 + 16 * v31);
      v33 = *v32;
      if (v22 == *v32)
      {
LABEL_31:
        v16 = v32[1];
        goto LABEL_32;
      }
      v34 = 1;
      while (v33 != -4096)
      {
        v35 = v31 + v34++;
        v31 = v35 & (v30 - 1);
        v33 = *(_QWORD *)(v29 + 16 * v31);
        if (v22 == v33)
        {
          v32 = (uint64_t *)(v29 + 16 * v31);
          goto LABEL_31;
        }
      }
    }
    v32 = (uint64_t *)(v29 + 16 * v30);
    goto LABEL_31;
  }
LABEL_32:
  *v8 = v16;
  v12 = v91;
  if (!(_DWORD)v91)
    goto LABEL_92;
  v36 = *v20 & 0xFFFFFFFFFFFFFFF8;
  if (!v36 || (*(_BYTE *)v36 & 4) == 0)
  {
    while ((*(_WORD *)(v36 + 44) & 4) != 0)
      v36 = *(_QWORD *)v36 & 0xFFFFFFFFFFFFFFF8;
  }
  while ((_QWORD *)v36 != v20)
  {
    if ((v13 & 1) != 0)
    {
      v37 = *(_WORD *)(v36 + 44);
      v38 = v37 & 4;
      v39 = *(_QWORD *)(v36 + 16);
      v40 = *(_QWORD *)(v39 + 8);
      if ((v37 & 0xC) != 0 && v38 == 0)
      {
        v42 = v36;
        if ((v40 & 0x80) != 0)
        {
LABEL_57:
          v43 = *(_QWORD *)(*a1 + 288);
          goto LABEL_60;
        }
        while ((*(_WORD *)(v42 + 44) & 8) != 0)
        {
          v42 = *(_QWORD *)(v42 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v42 + 16) + 8) & 0x80) != 0)
            goto LABEL_57;
        }
      }
      else if ((v40 & 0x80) != 0)
      {
        goto LABEL_59;
      }
    }
    else
    {
      v39 = *(_QWORD *)(v36 + 16);
    }
    if (*(_WORD *)v39 == 2)
    {
      v37 = *(_WORD *)(v36 + 44);
      v38 = v37 & 4;
LABEL_59:
      v43 = *(_QWORD *)(*a1 + 288);
      if (v38)
      {
        v44 = v36;
        do
          v44 = *(_QWORD *)v44 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v44 + 44) & 4) != 0);
        v9 = v18;
        if ((v37 & 8) != 0)
          goto LABEL_125;
      }
      else
      {
LABEL_60:
        v44 = v36;
        if ((v37 & 8) == 0)
          goto LABEL_61;
        do
LABEL_125:
          v36 = *(_QWORD *)(v36 + 8);
        while ((*(_WORD *)(v36 + 44) & 8) != 0);
      }
LABEL_61:
      v45 = *(_QWORD *)(v36 + 8);
      if (v44 != v45)
      {
        while (1)
        {
          v46 = **(unsigned __int16 **)(v44 + 16);
          v26 = v46 > 0x17;
          v47 = (1 << v46) & 0x83E000;
          if (v26 || v47 == 0)
            break;
          v44 = *(_QWORD *)(v44 + 8);
          if (v44 == v45)
          {
            v44 = v45;
            break;
          }
        }
      }
      v49 = *(_QWORD *)(v43 + 368);
      v50 = *(unsigned int *)(v43 + 384);
      if ((_DWORD)v50)
      {
        LODWORD(v51) = ((v44 >> 4) ^ (v44 >> 9)) & (v50 - 1);
        v52 = (uint64_t *)(v49 + 16 * v51);
        v53 = *v52;
        if (v44 != *v52)
        {
          v54 = 1;
          while (v53 != -4096)
          {
            v55 = v51 + v54++;
            v51 = v55 & (v50 - 1);
            v53 = *(_QWORD *)(v49 + 16 * v51);
            if (v44 == v53)
            {
              v52 = (uint64_t *)(v49 + 16 * v51);
              goto LABEL_75;
            }
          }
          goto LABEL_74;
        }
      }
      else
      {
LABEL_74:
        v52 = (uint64_t *)(v49 + 16 * v50);
      }
LABEL_75:
      *(_QWORD *)(v7 + 16 * v6 + 8) = v52[1];
      break;
    }
    v36 = *(_QWORD *)v36 & 0xFFFFFFFFFFFFFFF8;
    if (!v36 || (*(_BYTE *)v36 & 4) == 0)
    {
      while ((*(_WORD *)(v36 + 44) & 4) != 0)
        v36 = *(_QWORD *)v36 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  a2 = v17;
LABEL_77:
  v56 = *(_QWORD *)(v7 + 16 * v6 + 8);
  if (v56 < 8 || !v12)
    goto LABEL_92;
  v57 = (char *)v90;
  v58 = (char *)v90 + 8 * v12;
  v59 = *(unsigned int *)(a2 + 8);
  v60 = *(_QWORD **)a2;
  v61 = &v60[3 * v59];
  while (1)
  {
    v62 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 288) + 392) + 16 * *(unsigned int *)(*(_QWORD *)v57 + 24));
    v63 = &v60[3 * v59];
    if ((_DWORD)v59)
    {
      v64 = *(_DWORD *)((v62 & 0xFFFFFFFFFFFFFFF8) + 24) | (v62 >> 1) & 3;
      v63 = &v60[3 * v59];
      if (v64 < ((*(v61 - 2) >> 1) & 3 | *(_DWORD *)((*(v61 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
      {
        v63 = v60;
        v65 = v59;
        do
        {
          v66 = v65 >> 1;
          v67 = v63[3 * (v65 >> 1) + 1];
          LODWORD(v67) = (v67 >> 1) & 3 | *(_DWORD *)((v67 & 0xFFFFFFFFFFFFFFF8) + 24);
          v65 -= (v65 >> 1) + 1;
          v68 = v64 >= v67;
          if (v64 >= v67)
            v69 = v66 + 1;
          else
            v69 = 0;
          v63 += 3 * v69;
          if (!v68)
            v65 = v66;
        }
        while (v65);
      }
    }
    if (v63 != v61
      && ((*v63 >> 1) & 3 | *(_DWORD *)((*v63 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v62 & 0xFFFFFFFFFFFFFFF8) + 24) | (v62 >> 1) & 3))
    {
      break;
    }
    v57 += 8;
    if (v57 == v58)
      goto LABEL_92;
  }
  v71 = (v9 >> 1) & 3;
  v72 = v9 & 0xFFFFFFFFFFFFFFF8;
  if (v71)
  {
    v73 = v72 | (2 * (v71 - 1));
    if ((_DWORD)v59)
      goto LABEL_98;
LABEL_92:
    v56 = v16;
    goto LABEL_93;
  }
  v73 = *(_QWORD *)v72 | 6;
  if (!(_DWORD)v59)
    goto LABEL_92;
LABEL_98:
  v74 = v73 & 0xFFFFFFFFFFFFFFF8;
  v75 = *(_DWORD *)((v73 & 0xFFFFFFFFFFFFFFF8) + 24);
  v76 = (v73 >> 1) & 3;
  v77 = v75 | v76;
  if (v77 >= ((*(v61 - 2) >> 1) & 3 | *(_DWORD *)((*(v61 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
    goto LABEL_92;
  do
  {
    v78 = v60;
    v79 = v59 >> 1;
    v80 = v60[3 * (v59 >> 1) + 1];
    LODWORD(v80) = (v80 >> 1) & 3 | *(_DWORD *)((v80 & 0xFFFFFFFFFFFFFFF8) + 24);
    v59 -= (v59 >> 1) + 1;
    v81 = v77 >= v80;
    if (v77 >= v80)
      v82 = v79 + 1;
    else
      v82 = 0;
    v60 = &v78[3 * v82];
    if (!v81)
      v59 = v79;
  }
  while (v59);
  if (v60 == v61)
    goto LABEL_92;
  if (((*v60 >> 1) & 3 | *(_DWORD *)((*v60 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v74 + 24) | v76))
    goto LABEL_92;
  v83 = v78[3 * v82 + 2];
  if (!v83)
    goto LABEL_92;
  v84 = *(_QWORD *)(v83 + 8);
  v85 = v84 & 0xFFFFFFFFFFFFFFF8;
  if ((v84 & 0xFFFFFFFFFFFFFFF8) != (v56 & 0xFFFFFFFFFFFFFFF8)
    || (v87 = *(_QWORD *)(v85 + 16)) == 0
    || **(_WORD **)(v87 + 16) != 31)
  {
    v86 = *(_DWORD *)(v85 + 24);
    if (v86 >= *(_DWORD *)((v56 & 0xFFFFFFFFFFFFFFF8) + 24)
      && (v86 | (v84 >> 1) & 3) < (*(_DWORD *)(v72 + 24) | v71))
    {
      goto LABEL_92;
    }
  }
LABEL_93:
  if (v90 != v92)
    free(v90);
  return v56;
}

uint64_t sub_1C528CD90(_QWORD *a1, uint64_t a2, llvm::MachineBasicBlock *this)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v5 = *((unsigned int *)this + 6);
  v6 = a1[1];
  v7 = *(_QWORD *)(v6 + 16 * v5);
  if (v7 < 8 || *(_QWORD *)(v6 + 16 * v5 + 8) >= 8uLL)
  {
    v7 = sub_1C528C724(a1, a2, this);
    v5 = *((unsigned int *)this + 6);
  }
  if (v7 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 288) + 392) + 16 * v5 + 8))
    return (uint64_t)this + 48;
  if (v7 < 8)
    return 0;
  return *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 16);
}

char *sub_1C528CE24(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;

  v6 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)a1 = v6;
  *((_QWORD *)a1 + 1) = a2;
  *((_QWORD *)a1 + 2) = a3;
  *((_QWORD *)a1 + 3) = a4;
  *((_QWORD *)a1 + 4) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 16) + 104))(*(_QWORD *)(v6 + 16));
  *((_QWORD *)a1 + 5) = 0;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 112) - *(_QWORD *)(*(_QWORD *)a1 + 104);
  *((_QWORD *)a1 + 6) = a3;
  *((_QWORD *)a1 + 7) = a1 + 72;
  *((_QWORD *)a1 + 8) = 0x800000000;
  sub_1C529482C(a1 + 56, (v7 >> 3), 0, 0);
  *((_QWORD *)a1 + 25) = a1 + 216;
  *((_QWORD *)a1 + 26) = 0x800000000;
  *((_QWORD *)a1 + 35) = a1 + 296;
  *((_QWORD *)a1 + 36) = 0x800000000;
  *((_QWORD *)a1 + 78) = a1 + 640;
  *((_QWORD *)a1 + 79) = 0x600000000;
  *((_DWORD *)a1 + 172) = 0;
  return a1;
}

void sub_1C528CED8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int **v11;
  int *v12;
  int v13;
  size_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int16 v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  BOOL v29;
  int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  _QWORD *v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t *v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t *v67;
  unsigned int v68;
  unsigned int v69;
  unint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  unint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  __int16 v90;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned int *)(v2 + 72);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD *)(v2 + 64);
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)v4 + 8);
      if (v6 >= 8 && (*(_QWORD *)(*(_QWORD *)v4 + 8) & 6) != 0)
      {
        v8 = *(unsigned int *)(a1 + 208);
        if (v8 >= *(unsigned int *)(a1 + 212))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 200, a1 + 216, v8 + 1, 8);
          v8 = *(unsigned int *)(a1 + 208);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v8) = v6;
        ++*(_DWORD *)(a1 + 208);
      }
      v4 += 8;
      v5 -= 8;
    }
    while (v5);
    v2 = *(_QWORD *)(a1 + 40);
  }
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v10 = *(unsigned int *)(v2 + 112);
  if ((v10 & 0x80000000) != 0)
    v11 = (int **)(*(_QWORD *)(v9 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
  else
    v11 = (int **)(*(_QWORD *)(v9 + 272) + 8 * v10);
  v12 = *v11;
  if (!*v11)
    goto LABEL_18;
  while (1)
  {
    v13 = *v12;
    if ((*v12 & 0x81000000) == 0)
      break;
    v12 = (int *)*((_QWORD *)v12 + 3);
    if (!v12)
      goto LABEL_18;
  }
LABEL_30:
  if ((v13 & 0x10000000) != 0)
    goto LABEL_50;
  v24 = *((_QWORD *)v12 + 1);
  v25 = *(_WORD *)(v24 + 44);
  v26 = v24;
  if ((v25 & 4) != 0)
  {
    do
      v26 = *(_QWORD *)v26 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v26 + 44) & 4) != 0);
  }
  if ((v25 & 8) != 0)
  {
    do
      v24 = *(_QWORD *)(v24 + 8);
    while ((*(_WORD *)(v24 + 44) & 8) != 0);
  }
  v27 = *(_QWORD *)(v24 + 8);
  if (v26 != v27)
  {
    while (1)
    {
      v28 = **(unsigned __int16 **)(v26 + 16);
      v29 = v28 > 0x17;
      v30 = (1 << v28) & 0x83E000;
      if (v29 || v30 == 0)
        break;
      v26 = *(_QWORD *)(v26 + 8);
      if (v26 == v27)
      {
        v26 = v27;
        break;
      }
    }
  }
  v32 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 288);
  v33 = *(_QWORD *)(v32 + 368);
  v34 = *(unsigned int *)(v32 + 384);
  if ((_DWORD)v34)
  {
    LODWORD(v35) = ((v26 >> 4) ^ (v26 >> 9)) & (v34 - 1);
    v36 = (uint64_t *)(v33 + 16 * v35);
    v37 = *v36;
    if (v26 == *v36)
      goto LABEL_47;
    v38 = 1;
    while (v37 != -4096)
    {
      v39 = v35 + v38++;
      v35 = v39 & (v34 - 1);
      v37 = *(_QWORD *)(v33 + 16 * v35);
      if (v26 == v37)
      {
        v36 = (uint64_t *)(v33 + 16 * v35);
        goto LABEL_47;
      }
    }
  }
  v36 = (uint64_t *)(v33 + 16 * v34);
LABEL_47:
  v40 = v36[1];
  v41 = *(unsigned int *)(a1 + 208);
  if (v41 >= *(unsigned int *)(a1 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 200, a1 + 216, v41 + 1, 8);
    v41 = *(unsigned int *)(a1 + 208);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v41) = v40 & 0xFFFFFFFFFFFFFFF8 | 4;
  ++*(_DWORD *)(a1 + 208);
LABEL_50:
  while (1)
  {
    v12 = (int *)*((_QWORD *)v12 + 3);
    if (!v12)
      break;
    v13 = *v12;
    if ((*v12 & 0x81000000) == 0)
      goto LABEL_30;
  }
LABEL_18:
  v14 = *(unsigned int *)(a1 + 208);
  if (v14 >= 2)
  {
    qsort(*(void **)(a1 + 200), v14, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C4A07FB0);
    LODWORD(v14) = *(_DWORD *)(a1 + 208);
  }
  v15 = *(_QWORD *)(a1 + 200);
  if ((_DWORD)v14)
  {
    v16 = (uint64_t *)(v15 + 8 * v14);
    v17 = 8 * v14 - 16;
    v18 = *(uint64_t **)(a1 + 200);
    while (1)
    {
      v19 = v18++;
      if (v18 == v16)
        break;
      v20 = v17;
      v21 = *v19;
      v17 -= 8;
      if ((*v19 & 0xFFFFFFFFFFFFFFF8) == (v19[1] & 0xFFFFFFFFFFFFFFF8))
      {
        if (v19 + 2 != v16)
        {
          v22 = 1;
          do
          {
            v23 = v18[v22];
            if ((v21 & 0xFFFFFFFFFFFFFFF8) != (v23 & 0xFFFFFFFFFFFFFFF8))
            {
              v19[1] = v23;
              ++v19;
              v21 = v23;
            }
            ++v22;
            v20 -= 8;
          }
          while (v20);
        }
        v16 = v19 + 1;
        break;
      }
    }
  }
  else
  {
    v16 = *(uint64_t **)(a1 + 200);
  }
  *(_DWORD *)(a1 + 208) = ((unint64_t)v16 - v15) >> 3;
  v42 = (*(_QWORD *)(*(_QWORD *)a1 + 112) - *(_QWORD *)(*(_QWORD *)a1 + 104)) >> 3;
  v43 = *(unsigned int *)(a1 + 632);
  if ((*(_DWORD *)(a1 + 688) & 0x3F) != 0)
  {
    v83 = *(_QWORD *)(a1 + 624) + 8 * v43;
    *(_QWORD *)(v83 - 8) &= ~(-1 << (*(_DWORD *)(a1 + 688) & 0x3F));
  }
  v44 = v43;
  v45 = (_QWORD *)(a1 + 624);
  *(_DWORD *)(a1 + 688) = v42;
  v46 = v42 + 63;
  if ((_DWORD)v43 != (v42 + 63) >> 6)
  {
    v47 = v46 >> 6;
    if (v43 > v47)
    {
      *(_DWORD *)(a1 + 632) = v47;
      v44 = v46 >> 6;
    }
    else
    {
      v48 = v43;
      if (v47 > *(_DWORD *)(a1 + 636))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 624, a1 + 640, v47, 8);
        v48 = *(unsigned int *)(a1 + 632);
        v44 = *(_DWORD *)(a1 + 632);
      }
      if (v47 != v43)
        bzero((void *)(*v45 + 8 * v48), 8 * (v47 - v43));
      v44 += v47 - v43;
      *(_DWORD *)(a1 + 632) = v44;
      LODWORD(v42) = *(_DWORD *)(a1 + 688);
    }
  }
  v49 = v42 & 0x3F;
  if (v49)
    *(_QWORD *)(*v45 + 8 * v44 - 8) &= ~(-1 << v49);
  *(_DWORD *)(a1 + 616) = 0;
  *(_DWORD *)(a1 + 696) = 0;
  v50 = *(_QWORD *)(a1 + 40);
  v51 = *(_DWORD *)(v50 + 8);
  if (v51)
  {
    v52 = *(unint64_t **)v50;
    v53 = *(_QWORD *)v50 + 24 * v51;
    v54 = *(unint64_t **)(a1 + 200);
    v55 = &v54[*(unsigned int *)(a1 + 208)];
    v56 = sub_1C499C548(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 288), **(_QWORD **)v50);
    v57 = v54;
    v58 = v56;
    v85 = a1 + 280;
    while (1)
    {
      v88 = 0;
      v89 = 0;
      v87 = 0;
      v86 = v58;
      v59 = *(unsigned int *)(v58 + 24);
      v60 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 288) + 392) + 16 * v59);
      v61 = v60[1];
      if (v57 == v55
        || (v62 = *v57,
            v63 = (v61 >> 1) & 3,
            v64 = *(_DWORD *)((v61 & 0xFFFFFFFFFFFFFFF8) + 24) | v63,
            ((*v57 >> 1) & 3 | *(_DWORD *)((*v57 & 0xFFFFFFFFFFFFFFF8) + 24)) >= v64))
      {
        ++*(_DWORD *)(a1 + 696);
        *(_QWORD *)(*(_QWORD *)(a1 + 624) + 8 * (v59 >> 6)) |= 1 << v59;
      }
      else
      {
        v65 = *v60;
        v87 = *v57;
        v66 = v57 + 1;
        while (1)
        {
          v67 = v66;
          if (v66 == v55)
            break;
          ++v66;
          if (((*v67 >> 1) & 3 | *(_DWORD *)((*v67 & 0xFFFFFFFFFFFFFFF8) + 24)) >= v64)
          {
            v84 = v67;
            goto LABEL_79;
          }
        }
        v84 = v55;
LABEL_79:
        v88 = *(v67 - 1);
        v68 = (*v52 >> 1) & 3 | *(_DWORD *)((*v52 & 0xFFFFFFFFFFFFFFF8) + 24);
        v69 = *(_DWORD *)((v65 & 0xFFFFFFFFFFFFFFF8) + 24) | (v65 >> 1) & 3;
        LOBYTE(v90) = v68 <= v69;
        if (v68 > v69)
          v89 = v62;
        else
          v62 = 0;
        HIBYTE(v90) = 1;
        v70 = v52[1];
        v71 = (v70 >> 1) & 3 | *(_DWORD *)((v70 & 0xFFFFFFFFFFFFFFF8) + 24);
        if (v71 < v64)
        {
          v52 += 3;
          while (v52 != (unint64_t *)v53)
          {
            v72 = (*v52 >> 1) & 3 | *(_DWORD *)((*v52 & 0xFFFFFFFFFFFFFFF8) + 24);
            if (v72 >= v64)
              goto LABEL_93;
            if (v71 < v72)
            {
              ++*(_DWORD *)(a1 + 616);
              HIBYTE(v90) = 0;
              v73 = sub_1C4A0EA78(v85, (unint64_t)&v86);
              v74 = *(_QWORD *)(a1 + 280) + 40 * *(unsigned int *)(a1 + 288);
              v75 = *(_OWORD *)v73;
              v76 = *(_OWORD *)(v73 + 16);
              *(_QWORD *)(v74 + 32) = *(_QWORD *)(v73 + 32);
              *(_OWORD *)v74 = v75;
              *(_OWORD *)(v74 + 16) = v76;
              LODWORD(v74) = *(_DWORD *)(a1 + 288) + 1;
              *(_DWORD *)(a1 + 288) = v74;
              *(_QWORD *)(*(_QWORD *)(a1 + 280) + 40 * v74 - 24) = v70;
              v90 = 256;
              v62 = *v52;
              v89 = v62;
              v87 = v62;
            }
            if (v62 <= 7)
            {
              v62 = *v52;
              v89 = *v52;
            }
            v70 = v52[1];
            v71 = (v70 >> 1) & 3 | *(_DWORD *)((v70 & 0xFFFFFFFFFFFFFFF8) + 24);
            v64 = *(_DWORD *)((v61 & 0xFFFFFFFFFFFFFFF8) + 24) | v63;
            v52 += 3;
            if (v71 >= v64)
            {
              v52 -= 3;
              goto LABEL_94;
            }
          }
          v52 = (unint64_t *)v53;
LABEL_93:
          HIBYTE(v90) = 0;
          v88 = v70;
        }
LABEL_94:
        v77 = sub_1C4A0EA78(v85, (unint64_t)&v86);
        v78 = *(_QWORD *)(a1 + 280) + 40 * *(unsigned int *)(a1 + 288);
        v79 = *(_QWORD *)(v77 + 32);
        v80 = *(_OWORD *)(v77 + 16);
        *(_OWORD *)v78 = *(_OWORD *)v77;
        *(_OWORD *)(v78 + 16) = v80;
        *(_QWORD *)(v78 + 32) = v79;
        ++*(_DWORD *)(a1 + 288);
        v57 = v84;
        if (v52 == (unint64_t *)v53)
          return;
      }
      if (v52[1] == v61)
      {
        v52 += 3;
        if (v52 == (unint64_t *)v53)
          return;
      }
      if (((*v52 >> 1) & 3 | *(_DWORD *)((*v52 & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)((v61 & 0xFFFFFFFFFFFFFFF8) + 24) | (v61 >> 1) & 3))
      {
        v81 = v57;
        v82 = sub_1C499C548(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 288), *v52);
        v57 = v81;
        v58 = v82;
      }
      else
      {
        v58 = *(_QWORD *)(v58 + 8);
      }
    }
  }
}

uint64_t sub_1C528D60C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_DWORD *)(a2 + 8);
  if (!v2)
    return 0;
  v5 = *(unint64_t **)a2;
  v6 = *(_QWORD *)a2 + 24 * v2;
  v7 = sub_1C499C548(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 288), **(_QWORD **)a2);
  v8 = sub_1C50E5A80(a2, (uint64_t)v5, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 288) + 392)+ 16 * *(unsigned int *)(v7 + 24)+ 8));
  if (v8 == v6)
    return 1;
  v9 = (_QWORD *)v8;
  LODWORD(v10) = 1;
  do
  {
    do
    {
      v7 = *(_QWORD *)(v7 + 8);
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 288) + 392)
                      + 16 * *(unsigned int *)(v7 + 24)
                      + 8);
    }
    while (((v11 >> 1) & 3 | *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 24)) <= ((*v9 >> 1) & 3 | *(_DWORD *)((*v9 & 0xFFFFFFFFFFFFFFF8) + 24)));
    v10 = (v10 + 1);
    v9 = (_QWORD *)sub_1C50E5A80(a2, (uint64_t)v9, v11);
  }
  while (v9 != (_QWORD *)v6);
  return v10;
}

uint64_t sub_1C528D70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)(a5 + 272) + 40);
  *(_QWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 48) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a5 + 272) + 16) + 104))(*(_QWORD *)(*(_QWORD *)(a5 + 272) + 16));
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a5 + 272) + 16) + 176))(*(_QWORD *)(*(_QWORD *)(a5 + 272) + 16));
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = a7;
  *(_QWORD *)(a1 + 72) = a8;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 136;
  *(_QWORD *)(a1 + 128) = 0x400000000;
  *(_QWORD *)(a1 + 168) = a1 + 184;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 192) = 1;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 392) = a1 + 96;
  *(_DWORD *)(a1 + 416) = 0;
  v13 = 424;
  do
  {
    v14 = a1 + v13;
    *(_OWORD *)v14 = 0uLL;
    *(_OWORD *)(v14 + 16) = 0uLL;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = a1 + v13 + 56;
    *(_QWORD *)(v14 + 48) = 0x600000000;
    *(_DWORD *)(v14 + 104) = 0;
    *(_QWORD *)(v14 + 112) = 0;
    *(_QWORD *)(v14 + 120) = 0;
    *(_DWORD *)(v14 + 128) = 0;
    *(_QWORD *)(a1 + v13 + 152) = 0;
    *(_QWORD *)(v14 + 136) = a1 + v13 + 152;
    *(_QWORD *)(v14 + 144) = 0;
    *(_QWORD *)(v14 + 160) = 0;
    *(_QWORD *)(v14 + 176) = a1 + v13 + 192;
    v13 += 704;
    *(_QWORD *)(v14 + 184) = 0x1000000000;
  }
  while (v14 + 704 != a1 + 1832);
  return a1;
}

uint64_t sub_1C528D84C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  *(_QWORD *)(a1 + 80) = a2;
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 92) = a3;
  if (*(_DWORD *)(a1 + 384))
  {
    sub_1C523B828(a1 + 200, (void (*)(_QWORD *, _QWORD, uint64_t))llvm::IntervalMap<llvm::SlotIndex,unsigned int,9u,llvm::IntervalMapInfo<llvm::SlotIndex>>::deleteNode, 0);
    *(_OWORD *)(a1 + 372) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
  }
  *(_DWORD *)(a1 + 388) = 0;
  sub_1C528D954((_DWORD *)(a1 + 400));
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 272);
  v6 = *(_QWORD *)(v4 + 288);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(v5 + 40);
  *(_QWORD *)(a1 + 424) = v5;
  *(_QWORD *)(a1 + 432) = v8;
  *(_QWORD *)(a1 + 440) = v6;
  *(_QWORD *)(a1 + 448) = v7;
  *(_QWORD *)(a1 + 456) = v4 + 312;
  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)(a1 + 424));
  *(_DWORD *)(a1 + 608) = 0;
  if (*(_DWORD *)(a1 + 92))
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 272);
    v11 = *(_QWORD *)(v9 + 288);
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 1128) = v10;
    *(_QWORD *)(a1 + 1136) = *(_QWORD *)(v10 + 40);
    *(_QWORD *)(a1 + 1144) = v11;
    *(_QWORD *)(a1 + 1152) = v12;
    *(_QWORD *)(a1 + 1160) = v9 + 312;
    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)(a1 + 1128));
    *(_DWORD *)(a1 + 1312) = 0;
  }
  result = *(_QWORD *)(a1 + 80);
  if (!*(_BYTE *)(result + 68))
    return llvm::LiveRangeEdit::scanRemattable(result, 0);
  return result;
}

_DWORD *sub_1C528D954(_DWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 > 4 * result[2] && v1 >= 0x41)
    {
      return sub_1C5294978(result);
    }
    else
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = -1;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
  }
  return result;
}

uint64_t sub_1C528D9A4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;

  v1 = *(_QWORD *)(result + 8);
  v2 = v1 + 16 * *(unsigned int *)(result + 16);
  v3 = *(_DWORD *)(v2 - 4) + 1;
  *(_DWORD *)(v2 - 4) = v3;
  if (v3 == *(_DWORD *)(v1 + 16 * *(unsigned int *)(result + 16) - 8))
  {
    v4 = *(unsigned int *)(*(_QWORD *)result + 184);
    if ((_DWORD)v4)
    {
      v5 = 1;
      v6 = v4 + 1;
      v7 = (_DWORD *)(v1 + 16 * v4 - 8);
      while (1)
      {
        v8 = v7;
        if (v6 == 2)
          break;
        v10 = *v7;
        v9 = v7[1];
        v11 = *v7 - 1;
        --v6;
        v7 -= 4;
        if (v9 != v11)
        {
          v5 = v6;
          goto LABEL_9;
        }
      }
      v10 = *(_DWORD *)(v1 + 8);
      v9 = *(_DWORD *)(v1 + 12);
LABEL_9:
      v12 = v9 + 1;
      v8[1] = v12;
      if (v12 != v10)
      {
        v13 = *(_QWORD *)(*((_QWORD *)v8 - 1) + 8 * v12);
        if ((_DWORD)v4 != v5)
        {
          do
          {
            v15 = *(_QWORD *)(result + 8) + 16 * v5;
            *(_QWORD *)v15 = v13 & 0xFFFFFFFFFFFFFFC0;
            *(_DWORD *)(v15 + 8) = (v13 & 0x3F) + 1;
            *(_DWORD *)(v15 + 12) = 0;
            ++v5;
            v13 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFC0);
          }
          while ((_DWORD)v4 != v5);
          v1 = *(_QWORD *)(result + 8);
        }
        v14 = (unint64_t *)(v1 + 16 * v4);
        *v14 = v13 & 0xFFFFFFFFFFFFFFC0;
        v14[1] = (v13 & 0x3F) + 1;
      }
    }
  }
  return result;
}

uint64_t getSubRangeForMaskExact(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  for (result = *(_QWORD *)(a2 + 104); result; result = *(_QWORD *)(result + 104))
  {
    if (*(_QWORD *)(result + 112) == a1)
      break;
  }
  return result;
}

{
  uint64_t result;

  for (result = *(_QWORD *)(a2 + 104); result; result = *(_QWORD *)(result + 104))
  {
    if (*(_QWORD *)(result + 112) == a1)
      break;
  }
  return result;
}

uint64_t getSubRangeForMask(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  for (result = *(_QWORD *)(a2 + 104); result; result = *(_QWORD *)(result + 104))
  {
    if ((a1 & ~*(_QWORD *)(result + 112)) == 0)
      break;
  }
  return result;
}

unint64_t sub_1C528DB00(unint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t *v39;

  v4 = *(uint64_t **)(a2 + 104);
  if (!v4)
    return llvm::LiveRange::createDeadDef((uint64_t *)a2, a3);
  v5 = result;
  v6 = *(_QWORD *)(a3 + 8);
  if (a4)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    v8 = (v6 >> 1) & 3;
    while (1)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8) + 104;
      do
      {
        v10 = *(_QWORD *)v9;
        v11 = *(_QWORD *)(*(_QWORD *)v9 + 112);
        v9 = *(_QWORD *)v9 + 104;
      }
      while ((v4[14] & ~v11) != 0);
      v12 = *(unsigned int *)(v10 + 8);
      v13 = *(_QWORD **)v10;
      if ((_DWORD)v12)
      {
        v14 = v13[3 * v12 - 2];
        v15 = *(_DWORD *)(v7 + 24) | v8;
        v16 = (v14 >> 1) & 3 | *(_DWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 24);
        v17 = v13;
        v18 = v12;
        if (v15 < v16)
        {
          do
          {
            v19 = v18 >> 1;
            v20 = v17[3 * (v18 >> 1) + 1];
            LODWORD(v20) = (v20 >> 1) & 3 | *(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 24);
            v18 -= (v18 >> 1) + 1;
            v21 = v15 >= v20;
            if (v15 >= v20)
              v22 = v19 + 1;
            else
              v22 = 0;
            v17 += 3 * v22;
            if (!v21)
              v18 = v19;
          }
          while (v18);
          goto LABEL_17;
        }
      }
      else
      {
        LODWORD(v12) = 0;
      }
      v17 = &v13[3 * v12];
LABEL_17:
      if (v17 != &v13[3 * v12]
        && ((*v17 >> 1) & 3 | *(_DWORD *)((*v17 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v7 + 24) | v8))
      {
        v23 = v17[2];
        if (v23)
        {
          if (*(_QWORD *)(v23 + 8) == v6)
          {
            v24 = *(_QWORD *)(v5 + 16) + 312;
            if (v4[12])
            {
              v39 = v4;
              result = sub_1C510A3C0((uint64_t *)&v39, v6, v24, 0);
            }
            else
            {
              v39 = v4;
              result = sub_1C510A6B8(&v39, v6, v24, 0);
            }
          }
        }
      }
      v4 = (uint64_t *)v4[13];
      if (!v4)
        return result;
    }
  }
  if (v6 < 8)
    v25 = 0;
  else
    v25 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 16);
  v26 = *(_QWORD *)(v25 + 32);
  v27 = *(_QWORD *)(v25 + 16);
  v28 = *(unsigned __int8 *)(v27 + 4);
  if ((*(_BYTE *)(v27 + 8) & 2) == 0 || (v36 = *(_DWORD *)(v25 + 40), v36 == v28))
  {
    v29 = *(unsigned __int8 *)(v27 + 4);
  }
  else
  {
    v37 = v36 - 1;
    v29 = v28;
    do
    {
      v38 = *(_DWORD *)(v26 + 32 * v28);
      if ((v38 & 0x10000FF) != 0x1000000)
        break;
      v29 += (v38 & 0x2000000) == 0;
      if (v37 == v28)
        break;
      ++v28;
    }
    while ((v38 & 0x2000000) == 0);
  }
  v30 = 0;
  if (!v29)
    goto LABEL_41;
  v31 = *(_DWORD *)(a2 + 112);
  v32 = 32 * v29;
  v33 = (_DWORD *)(v26 + 4);
  while (*v33 != v31)
  {
LABEL_37:
    v33 += 8;
    v32 -= 32;
    if (!v32)
      goto LABEL_41;
  }
  v34 = ((unint64_t)*(v33 - 1) >> 8) & 0xFFF;
  if ((_DWORD)v34)
  {
    v30 |= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 56) + 232) + 8 * v34);
    goto LABEL_37;
  }
  v30 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 24) + 16 * (v31 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                  + 24);
  do
  {
LABEL_41:
    if ((v4[14] & v30) != 0)
    {
      v35 = *(_QWORD *)(v5 + 16) + 312;
      if (v4[12])
      {
        v39 = v4;
        result = sub_1C510A3C0((uint64_t *)&v39, v6, v35, 0);
      }
      else
      {
        v39 = v4;
        result = sub_1C510A6B8(&v39, v6, v35, 0);
      }
    }
    v4 = (uint64_t *)v4[13];
  }
  while (v4);
  return result;
}

unint64_t sub_1C528DDE4(unint64_t a1, unsigned int a2, unsigned int *a3, uint64_t a4, int a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  _DWORD *v26;
  int v27;
  int v28;
  BOOL v29;
  _DWORD *v31;
  int v32;
  BOOL v33;
  unsigned int v35;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v43;
  _QWORD v44[2];

  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 80) + 16) + 4 * (*(_DWORD *)(*(_QWORD *)(a1 + 80) + 64) + a2));
  if ((v11 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v10 + 416)
    || (v12 = *(_QWORD *)(*(_QWORD *)(v10 + 408) + 8 * (v11 & 0x7FFFFFFF))) == 0)
  {
    v12 = sub_1C4851220(*(_QWORD *)(a1 + 16), v11);
    v38 = *(_QWORD *)(v10 + 304);
    v39 = *(_QWORD *)(v10 + 248);
    *(_QWORD *)v38 = v39;
    *(_QWORD *)(v38 + 8) = *(_QWORD *)(v39 + 40);
    *(_OWORD *)(v38 + 16) = *(_OWORD *)(v10 + 288);
    *(_QWORD *)(v38 + 32) = v10 + 312;
    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v38);
    *(_DWORD *)(v38 + 184) = 0;
    v40 = *(_QWORD *)(v10 + 256);
    v29 = *(_BYTE *)(v40 + 16) == 0;
    v41 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v40 + 24) + 16 * (*(_DWORD *)(v12 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                             + 34);
    v43 = !v29 && v41 != 0;
    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v10 + 304), (llvm::LiveInterval *)v12, v43);
    llvm::LiveIntervals::computeDeadValues(v10, v12, 0);
    v10 = *(_QWORD *)(a1 + 16);
  }
  v13 = sub_1C484358C(v10 + 312, 16, 3);
  v14 = *(unsigned int *)(v12 + 72);
  *(_DWORD *)v13 = v14;
  *(_QWORD *)(v13 + 8) = a4;
  if (v14 >= *(_DWORD *)(v12 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v12 + 64, v12 + 80, v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(v12 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(v12 + 64) + 8 * v14) = v13;
  ++*(_DWORD *)(v12 + 72);
  v15 = *(_QWORD *)(v12 + 104);
  if (v15)
    v16 = 0;
  else
    v16 = v13;
  v17 = v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v15 != 0));
  v18 = *a3;
  v44[0] = a2 | (unint64_t)(v18 << 32);
  v44[1] = v17;
  v19 = *(_DWORD *)(a1 + 416);
  if (!v19)
  {
    v37 = 0;
    goto LABEL_37;
  }
  v20 = *(_QWORD *)(a1 + 400);
  v21 = ((37 * v18) | ((unint64_t)(37 * a2) << 32))
      + ~((unint64_t)(37 * v18) << 32);
  v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
  v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
  v24 = v19 - 1;
  v25 = v24 & (((v23 + ~(v23 << 27)) >> 31) ^ (v23 + ~((_DWORD)v23 << 27)));
  v26 = (_DWORD *)(v20 + 16 * v25);
  v27 = *v26;
  v28 = v26[1];
  v29 = *v26 == a2 && (_DWORD)v18 == v28;
  if (!v29)
  {
    v31 = 0;
    v32 = 1;
    while (v27 != -1 || v28 != -1)
    {
      if (v31)
        v33 = 0;
      else
        v33 = v28 == -2;
      if (v33 && v27 == -2)
        v31 = v26;
      v35 = v25 + v32++;
      v25 = v35 & v24;
      v26 = (_DWORD *)(v20 + 16 * v25);
      v27 = *v26;
      v28 = v26[1];
      if (*v26 == a2 && (_DWORD)v18 == v28)
        goto LABEL_14;
    }
    if (v31)
      v37 = v31;
    else
      v37 = v26;
LABEL_37:
    v26 = sub_1C5294C40(a1 + 400, (int *)v44, v37);
    *v26 = a2;
    v26[1] = v18;
    *((_QWORD *)v26 + 1) = v17;
    if (!v15)
      return v13;
    goto LABEL_15;
  }
LABEL_14:
  v17 = *((_QWORD *)v26 + 1);
LABEL_15:
  if ((v17 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    sub_1C528DB00(a1, v12, v17 & 0xFFFFFFFFFFFFFFF8, a5);
    *((_QWORD *)v26 + 1) = 4 * (v15 != 0);
  }
  sub_1C528DB00(a1, v12, v13, a5);
  return v13;
}

unint64_t sub_1C528E0A8(unint64_t result, unsigned int a2, uint64_t a3)
{
  int v3;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  llvm::LiveInterval *v25;
  BOOL v26;
  unsigned int v28;
  unint64_t v30;

  v3 = a3;
  v5 = result;
  v30 = a2 | (unint64_t)(a3 << 32);
  v6 = *(_DWORD *)(result + 416);
  if (!v6)
  {
    v22 = 0;
LABEL_15:
    result = (unint64_t)sub_1C5294C40(result + 400, (int *)&v30, v22);
    v13 = result;
    *(_DWORD *)result = a2;
    *(_DWORD *)(result + 4) = v3;
    *(_QWORD *)(result + 8) = 0;
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(result + 400);
  v8 = ((37 * a3) | ((unint64_t)(37 * a2) << 32))
     + ~((unint64_t)(37 * a3) << 32);
  v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
  v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
  v11 = v6 - 1;
  v12 = v11 & (((v10 + ~(v10 << 27)) >> 31) ^ (v10 + ~((_DWORD)v10 << 27)));
  v13 = v7 + 16 * v12;
  v14 = *(_DWORD *)v13;
  v15 = *(_DWORD *)(v13 + 4);
  if (*(_DWORD *)v13 != a2 || v15 != (_DWORD)a3)
  {
    v20 = 0;
    v21 = 1;
    while (v14 != -1 || v15 != -1)
    {
      if (v20)
        v26 = 0;
      else
        v26 = v15 == -2;
      if (v26 && v14 == -2)
        v20 = (_DWORD *)v13;
      v28 = v12 + v21++;
      v12 = v28 & v11;
      v13 = v7 + 16 * v12;
      v14 = *(_DWORD *)v13;
      v15 = *(_DWORD *)(v13 + 4);
      if (*(_DWORD *)v13 == a2 && v15 == (_DWORD)a3)
        goto LABEL_7;
    }
    if (v20)
      v22 = v20;
    else
      v22 = (_DWORD *)v13;
    goto LABEL_15;
  }
LABEL_7:
  v17 = *(_QWORD *)(v13 + 8);
  v18 = v17 & 0xFFFFFFFFFFFFFFF8;
  if ((v17 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v23 = *(_QWORD *)(v5 + 16);
    v24 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)(v5 + 80) + 16) + 4 * (*(_DWORD *)(*(_QWORD *)(v5 + 80) + 64) + a2));
    if ((v24 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v23 + 416)
      || (v25 = *(llvm::LiveInterval **)(*(_QWORD *)(v23 + 408) + 8 * (v24 & 0x7FFFFFFF))) == 0)
    {
      v25 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(v5 + 16), v24);
      llvm::LiveIntervals::computeVirtRegInterval((llvm::LiveIntervals *)v23, v25);
    }
    result = sub_1C528DB00(v5, (uint64_t)v25, v18, 0);
    v19 = 4;
  }
  else
  {
    v19 = v17 | 4;
  }
  *(_QWORD *)(v13 + 8) = v19;
  return result;
}

unint64_t sub_1C528E25C(uint64_t *a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5, unint64_t *a6)
{
  unsigned int v10;
  uint64_t v12;
  int v13;
  unint64_t v14;
  llvm::LiveInterval *v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  llvm::MachineFunction *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL4 v48;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  _QWORD *v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  unsigned int v69;
  char *v70;
  void *v71;
  uint64_t v72;
  llvm::MachineFunction *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  llvm::MachineFunction **v81;
  llvm::MachineInstr *v82;
  llvm::MachineFunction *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 **v86;
  unsigned __int8 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  char *v104;
  int v105;
  unsigned int v106;
  llvm::LiveInterval *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  llvm::MachineFunction *v111[2];
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  unint64_t v117;
  uint64_t v118;
  unsigned __int8 **v119;
  uint64_t v120;

  v10 = a2;
  v120 = *MEMORY[0x1E0C80C00];
  v12 = a1[2];
  v13 = *(_DWORD *)(**(_QWORD **)(a1[10] + 16) + 4 * (*(_DWORD *)(a1[10] + 64) + a2));
  v14 = *(unsigned int *)(v12 + 416);
  if ((v13 & 0x7FFFFFFFu) >= v14
    || (v15 = *(llvm::LiveInterval **)(*(_QWORD *)(v12 + 408) + 8 * (v13 & 0x7FFFFFFF))) == 0)
  {
    v15 = (llvm::LiveInterval *)sub_1C4851220(a1[2], v13);
    llvm::LiveIntervals::computeVirtRegInterval((llvm::LiveIntervals *)v12, v15);
    v101 = a1[10];
    v102 = *(_DWORD *)(v101 + 64);
    v103 = **(_QWORD **)(v101 + 16);
    v12 = a1[2];
    v14 = *(unsigned int *)(v12 + 416);
    v13 = *(_DWORD *)(v103 + 4 * (v102 + v10));
  }
  if (*(_DWORD *)(*(_QWORD *)(a1[3] + 328) + 4 * (v13 & 0x7FFFFFFF)))
    v13 = *(_DWORD *)(*(_QWORD *)(a1[3] + 328) + 4 * (v13 & 0x7FFFFFFF));
  if ((v13 & 0x7FFFFFFFu) >= v14 || (v16 = *(_QWORD *)(*(_QWORD *)(v12 + 408) + 8 * (v13 & 0x7FFFFFFF))) == 0)
  {
    v16 = sub_1C4851220(v12, v13);
    llvm::LiveIntervals::computeVirtRegInterval((llvm::LiveIntervals *)v12, (llvm::LiveInterval *)v16);
  }
  v17 = *(_DWORD *)(v16 + 8);
  v18 = *(_QWORD **)v16;
  if (v17)
  {
    v19 = v18[3 * v17 - 2];
    v20 = *(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3;
    if (v20 < ((v19 >> 1) & 3 | *(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24)))
    {
      v21 = *(_QWORD **)v16;
      v22 = *(unsigned int *)(v16 + 8);
      do
      {
        v23 = v22 >> 1;
        v24 = v21[3 * (v22 >> 1) + 1];
        LODWORD(v24) = (v24 >> 1) & 3 | *(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 24);
        v22 -= (v22 >> 1) + 1;
        v25 = v20 >= v24;
        if (v20 >= v24)
          v26 = v23 + 1;
        else
          v26 = 0;
        v21 += 3 * v26;
        if (!v25)
          v22 = v23;
      }
      while (v22);
      goto LABEL_16;
    }
  }
  else
  {
    v17 = 0;
  }
  v21 = &v18[3 * v17];
LABEL_16:
  if (v21 == &v18[3 * v17]
    || ((*v21 >> 1) & 3 | *(_DWORD *)((*v21 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3))
  {
    v28 = *((_DWORD *)v15 + 28);
  }
  else
  {
    v27 = v21[2];
    v28 = *((_DWORD *)v15 + 28);
    if (v27)
    {
      v112 = a3;
      v29 = *(_QWORD *)(v27 + 8);
      v30 = v29 < 8 ? 0 : *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFF8) + 16);
      v113 = v30;
      if (llvm::LiveRangeEdit::canRematerializeAt(a1[10], (uint64_t)&v112, v27, a4, 1))
      {
        v31 = llvm::LiveRangeEdit::rematerializeAt(a1[10], a5, a6, v28, (uint64_t *)&v112, a1[7], v10 != 0);
        return sub_1C528DDE4((unint64_t)a1, v10, (unsigned int *)a3, v31, 0);
      }
    }
  }
  v32 = *(_QWORD *)(v16 + 104);
  if (!v32)
  {
    v33 = -1;
LABEL_26:
    v34 = a1[10];
    v35 = *(_DWORD *)(*(_QWORD *)(v34 + 8) + 112);
    v36 = a1[2];
    v110 = *(_QWORD *)(v36 + 288);
    if (v33 == -1
      || (v66 = a1[4],
          *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v66 + 24) + 16 * (v35 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) + 24) == v33))
    {
      v37 = *(_QWORD *)(a1[6] + 8) + 912;
      v38 = *(llvm::MachineFunction **)(a5 + 32);
      v39 = *((_QWORD *)v38 + 28);
      if (v39)
        *((_QWORD *)v38 + 28) = *(_QWORD *)v39;
      else
        v39 = sub_1C484358C((uint64_t)v38 + 128, 72, 3);
      v112 = 0;
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v39, v38, v37, (unsigned __int8 **)&v112, 0);
      if (v112)
        llvm::MetadataTracking::untrack((uint64_t)&v112, (unsigned __int8 *)v112);
      v40 = *(_QWORD *)(a5 + 40);
      v41 = *(_QWORD *)(v40 + 32);
      v42 = *(_QWORD *)(v39 + 32);
      v43 = *(unsigned int *)(v39 + 40);
      *(_QWORD *)(v39 + 24) = v40;
      if ((_DWORD)v43)
      {
        v88 = *(_QWORD *)(v41 + 40);
        v89 = 32 * v43;
        do
        {
          if (!*(_BYTE *)v42)
          {
            v90 = *(unsigned int *)(v42 + 4);
            if ((int)v90 >= 0)
              v91 = (uint64_t *)(*(_QWORD *)(v88 + 272) + 8 * v90);
            else
              v91 = (uint64_t *)(*(_QWORD *)(v88 + 24) + 16 * (v90 & 0x7FFFFFFF) + 8);
            v92 = *v91;
            if (*v91)
            {
              v93 = *(_QWORD *)(v92 + 16);
              *(_QWORD *)(v92 + 16) = v42;
              *(_QWORD *)(v42 + 16) = v93;
              if ((*(_BYTE *)(v42 + 3) & 1) != 0)
              {
                *(_QWORD *)(v42 + 24) = v92;
              }
              else
              {
                *(_QWORD *)(v42 + 24) = 0;
                v91 = (uint64_t *)(v93 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v42 + 16) = v42;
              *(_QWORD *)(v42 + 24) = 0;
            }
            *v91 = v42;
          }
          v42 += 32;
          v89 -= 32;
        }
        while (v89);
      }
      v44 = *(_QWORD *)(v41 + 728);
      if (v44)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v44 + 24))(v44, v39);
      v45 = *a6 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v39 = v45 | *(_QWORD *)v39 & 7;
      *(_QWORD *)(v39 + 8) = a6;
      *(_QWORD *)(v45 + 8) = v39;
      *a6 = *a6 & 7 | v39;
      v113 = 0;
      v114 = 0;
      v115 = 0;
      LODWORD(v112) = 0x1000000;
      HIDWORD(v112) = v28;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v38, (const llvm::MachineOperand *)&v112);
      v113 = 0;
      v114 = 0;
      LODWORD(v112) = 0;
      HIDWORD(v112) = v35;
      v115 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v38, (const llvm::MachineOperand *)&v112);
      v46 = v110;
      v47 = v39;
      v48 = v10 != 0;
      goto LABEL_35;
    }
    v67 = *(_DWORD *)(**(_QWORD **)(v34 + 16) + 4 * (*(_DWORD *)(v34 + 64) + v10));
    if ((v67 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v36 + 416)
      && *(_QWORD *)(*(_QWORD *)(v36 + 408) + 8 * (v67 & 0x7FFFFFFF)))
    {
      v107 = *(llvm::LiveInterval **)(*(_QWORD *)(v36 + 408) + 8 * (v67 & 0x7FFFFFFF));
    }
    else
    {
      v107 = (llvm::LiveInterval *)sub_1C4851220(v36, v67);
      llvm::LiveIntervals::computeVirtRegInterval((llvm::LiveIntervals *)v36, v107);
      v66 = a1[4];
    }
    v68 = *(_QWORD *)(*(_QWORD *)(v66 + 24) + 16 * (v35 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
    v112 = &v114;
    v113 = 0x800000000;
    if ((llvm::TargetRegisterInfo::getCoveringSubRegIndexes(a1[7], v66, v68, v33, (uint64_t)&v112) & 1) == 0)
      llvm::report_fatal_error((llvm *)"Impossible to implement partial COPY", (const char *)1);
    v31 = 0;
    if ((_DWORD)v113)
    {
      v69 = v28;
      v70 = (char *)v112;
      v104 = (char *)v112 + 4 * v113;
      v105 = v69;
      v106 = v10;
      v109 = a5;
      do
      {
        v71 = a3;
        v108 = *(_DWORD *)v70;
        v72 = *(_QWORD *)(a1[6] + 8);
        v73 = *(llvm::MachineFunction **)(a5 + 32);
        v111[0] = 0;
        v74 = *((_QWORD *)v73 + 28);
        if (v74)
          *((_QWORD *)v73 + 28) = *(_QWORD *)v74;
        else
          v74 = sub_1C484358C((uint64_t)v73 + 128, 72, 3);
        v116 = 0;
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v74, v73, v72 + 912, &v116, 0);
        if (v116)
          llvm::MetadataTracking::untrack((uint64_t)&v116, v116);
        a3 = v71;
        if (v111[0])
          llvm::MetadataTracking::untrack((uint64_t)v111, (unsigned __int8 *)v111[0]);
        v75 = *(_QWORD *)(v109 + 40);
        *(_QWORD *)(v74 + 24) = v75;
        v76 = *(_QWORD *)(v75 + 32);
        v77 = *(unsigned int *)(v74 + 40);
        v10 = v106;
        if ((_DWORD)v77)
        {
          v94 = *(_QWORD *)(v74 + 32);
          v95 = *(_QWORD *)(v76 + 40);
          v96 = 32 * v77;
          do
          {
            if (!*(_BYTE *)v94)
            {
              v97 = *(unsigned int *)(v94 + 4);
              if ((int)v97 >= 0)
                v98 = (uint64_t *)(*(_QWORD *)(v95 + 272) + 8 * v97);
              else
                v98 = (uint64_t *)(*(_QWORD *)(v95 + 24) + 16 * (v97 & 0x7FFFFFFF) + 8);
              v99 = *v98;
              if (*v98)
              {
                v100 = *(_QWORD *)(v99 + 16);
                *(_QWORD *)(v99 + 16) = v94;
                *(_QWORD *)(v94 + 16) = v100;
                if ((*(_BYTE *)(v94 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v94 + 24) = v99;
                }
                else
                {
                  *(_QWORD *)(v94 + 24) = 0;
                  v98 = (uint64_t *)(v100 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v94 + 16) = v94;
                *(_QWORD *)(v94 + 24) = 0;
              }
              *v98 = v94;
            }
            v94 += 32;
            v96 -= 32;
          }
          while (v96);
        }
        v78 = *(_QWORD *)(v76 + 728);
        if (v78)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v78 + 24))(v78, v74);
        v79 = *a6 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v74 = v79 | *(_QWORD *)v74 & 7;
        *(_QWORD *)(v74 + 8) = a6;
        *(_QWORD *)(v79 + 8) = v74;
        *a6 = *a6 & 7 | v74;
        v111[0] = v73;
        v111[1] = (llvm::MachineFunction *)v74;
        if (v31 >= 8)
          v80 = 258;
        else
          v80 = 34;
        v81 = sub_1C47BF4F4(v111, v105, v80, v108);
        v82 = v81[1];
        v83 = *v81;
        v117 = 0;
        v118 = 0;
        v119 = 0;
        LODWORD(v116) = (v108 & 0xFFF) << 8;
        HIDWORD(v116) = v35;
        llvm::MachineInstr::addOperand(v82, v83, (const llvm::MachineOperand *)&v116);
        v84 = (uint64_t)v81[1];
        if (v31 > 7)
        {
          *(_WORD *)(v84 + 44) |= 4u;
          *(_WORD *)((*(_QWORD *)v84 & 0xFFFFFFFFFFFFFFF8) + 44) |= 8u;
        }
        else
        {
          v31 = sub_1C4850BC8(*(_QWORD *)(a1[2] + 288), v84, v106 != 0) & 0xFFFFFFFFFFFFFFF8 | 4;
        }
        a5 = v109;
        v70 += 4;
      }
      while (v70 != v104);
    }
    v85 = a1[2] + 312;
    v116 = (unsigned __int8 *)&off_1E814AC48;
    v117 = v31;
    v118 = v85;
    v119 = &v116;
    llvm::LiveInterval::refineSubRanges((uint64_t)v107, v85, v33, (uint64_t)&v116, v110, (_QWORD *)a1[7], 0);
    v86 = v119;
    if (v119 == &v116)
    {
      v87 = v116 + 32;
      v86 = &v116;
    }
    else
    {
      if (!v119)
      {
LABEL_86:
        if (v112 != &v114)
          free(v112);
        return sub_1C528DDE4((unint64_t)a1, v10, (unsigned int *)a3, v31, 0);
      }
      v87 = *v119 + 40;
    }
    (*(void (**)(unsigned __int8 **))v87)(v86);
    goto LABEL_86;
  }
  v33 = 0;
  v50 = a4 & 0xFFFFFFFFFFFFFFF8;
  v51 = (a4 >> 1) & 3;
  do
  {
    v52 = *(_DWORD *)(v32 + 8);
    v53 = *(_QWORD **)v32;
    if (!v52)
    {
      v52 = 0;
LABEL_52:
      v57 = &v53[3 * v52];
      goto LABEL_46;
    }
    v54 = v53[3 * v52 - 2];
    v55 = *(_DWORD *)(v50 + 24) | v51;
    v56 = (v54 >> 1) & 3 | *(_DWORD *)((v54 & 0xFFFFFFFFFFFFFFF8) + 24);
    v57 = *(_QWORD **)v32;
    v58 = *(unsigned int *)(v32 + 8);
    if (v55 >= v56)
      goto LABEL_52;
    do
    {
      v59 = v58 >> 1;
      v60 = v57[3 * (v58 >> 1) + 1];
      LODWORD(v60) = (v60 >> 1) & 3 | *(_DWORD *)((v60 & 0xFFFFFFFFFFFFFFF8) + 24);
      v58 -= (v58 >> 1) + 1;
      v61 = v55 >= v60;
      if (v55 >= v60)
        v62 = v59 + 1;
      else
        v62 = 0;
      v57 += 3 * v62;
      if (!v61)
        v58 = v59;
    }
    while (v58);
LABEL_46:
    if (v57 != &v53[3 * v52]
      && ((*v57 >> 1) & 3 | *(_DWORD *)((*v57 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v50 + 24) | v51))
    {
      v33 |= *(_QWORD *)(v32 + 112);
    }
    v32 = *(_QWORD *)(v32 + 104);
  }
  while (v32);
  if (v33)
    goto LABEL_26;
  v63 = *(_QWORD *)(a1[6] + 8) + 480;
  v112 = 0;
  sub_1C4787570(a5, a6, (unsigned __int8 **)&v112, v63, v28);
  v65 = v64;
  if (v112)
    llvm::MetadataTracking::untrack((uint64_t)&v112, (unsigned __int8 *)v112);
  v48 = v10 != 0;
  v46 = *(_QWORD *)(a1[2] + 288);
  v47 = v65;
LABEL_35:
  v31 = sub_1C4850BC8(v46, v47, v48) & 0xFFFFFFFFFFFFFFF8 | 4;
  return sub_1C528DDE4((unint64_t)a1, v10, (unsigned int *)a3, v31, 0);
}

uint64_t sub_1C528EB90(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_DWORD *)(*(_QWORD *)(v2 + 16) + 8);
  v4 = *(_DWORD *)(v2 + 64);
  if (v3 == v4)
  {
    llvm::LiveRangeEdit::createEmptyIntervalFrom((_QWORD *)v2, *(_DWORD *)(*(_QWORD *)(v2 + 8) + 112), 1);
    v2 = *(_QWORD *)(a1 + 80);
    v3 = *(_DWORD *)(*(_QWORD *)(v2 + 16) + 8);
    v4 = *(_DWORD *)(v2 + 64);
  }
  *(_DWORD *)(a1 + 88) = v3 - v4;
  llvm::LiveRangeEdit::createEmptyIntervalFrom((_QWORD *)v2, *(_DWORD *)(*(_QWORD *)(v2 + 8) + 112), 1);
  return *(unsigned int *)(a1 + 88);
}

unint64_t sub_1C528EC00(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;

  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v4 = *(unsigned int *)(v3 + 8);
  v5 = *(_QWORD **)v3;
  if (!(_DWORD)v4)
  {
    LODWORD(v4) = 0;
    goto LABEL_18;
  }
  v6 = v5[3 * v4 - 2];
  v7 = *(_DWORD *)(v2 + 24);
  if (v7 >= ((v6 >> 1) & 3 | *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_18:
    v8 = &v5[3 * v4];
    goto LABEL_10;
  }
  v8 = v5;
  v9 = v4;
  do
  {
    v10 = v9 >> 1;
    v11 = v8[3 * (v9 >> 1) + 1];
    LODWORD(v11) = (v11 >> 1) & 3 | *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 24);
    v9 -= (v9 >> 1) + 1;
    v12 = v7 >= v11;
    if (v7 >= v11)
      v13 = v10 + 1;
    else
      v13 = 0;
    v8 += 3 * v13;
    if (!v12)
      v9 = v10;
  }
  while (v9);
LABEL_10:
  if (v8 != &v5[3 * v4]
    && ((*v8 >> 1) & 3 | *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 24)) <= *(_DWORD *)(v2 + 24))
  {
    v14 = (void *)v8[2];
    if (v14)
    {
      if (v2)
        v15 = *(_QWORD *)(v2 + 16);
      else
        v15 = 0;
      return *(_QWORD *)(sub_1C528E25C((uint64_t *)a1, *(_DWORD *)(a1 + 88), v14, v2, *(_QWORD *)(v15 + 24), (unint64_t *)v15)+ 8);
    }
  }
  return v2;
}

unint64_t sub_1C528ED00(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  v3 = a2 & 0xFFFFFFFFFFFFFFF8 | 6;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v5 = *(unsigned int *)(v4 + 8);
  v6 = *(_QWORD **)v4;
  if (!(_DWORD)v5)
  {
    LODWORD(v5) = 0;
    goto LABEL_20;
  }
  v7 = v6[3 * v5 - 2];
  v8 = *(_DWORD *)(v2 + 24) | 3;
  if (v8 >= ((v7 >> 1) & 3 | *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_20:
    v9 = &v6[3 * v5];
    goto LABEL_10;
  }
  v9 = v6;
  v10 = v5;
  do
  {
    v11 = v10 >> 1;
    v12 = v9[3 * (v10 >> 1) + 1];
    LODWORD(v12) = (v12 >> 1) & 3 | *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24);
    v10 -= (v10 >> 1) + 1;
    v13 = v8 >= v12;
    if (v8 >= v12)
      v14 = v11 + 1;
    else
      v14 = 0;
    v9 += 3 * v14;
    if (!v13)
      v10 = v11;
  }
  while (v10);
LABEL_10:
  if (v9 != &v6[3 * v5]
    && ((*v9 >> 1) & 3 | *(_DWORD *)((*v9 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v2 + 24) | 3u))
  {
    v15 = (void *)v9[2];
    if (v15)
    {
      if (v3 < 8)
        v16 = 0;
      else
        v16 = *(_QWORD *)(v2 + 16);
      v17 = *(_QWORD *)(v16 + 24);
      if ((*(_BYTE *)v16 & 4) == 0)
      {
        while ((*(_WORD *)(v16 + 44) & 8) != 0)
          v16 = *(_QWORD *)(v16 + 8);
      }
      return *(_QWORD *)(sub_1C528E25C((uint64_t *)a1, *(_DWORD *)(a1 + 88), v15, v3, v17, *(unint64_t **)(v16 + 8))+ 8);
    }
  }
  return v3;
}

uint64_t sub_1C528EE2C(uint64_t a1, llvm::MachineBasicBlock *this)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;

  v4 = *((unsigned int *)this + 6);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 288) + 392) + 16 * v4 + 8);
  v6 = (v5 >> 1) & 3;
  v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  if (v6)
    v8 = v7 | (2 * (v6 - 1));
  else
    v8 = *(_QWORD *)v7 | 6;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v10 = *(unsigned int *)(v9 + 8);
  v11 = *(_QWORD **)v9;
  if (!(_DWORD)v10)
  {
    LODWORD(v10) = 0;
    goto LABEL_33;
  }
  v12 = v11[3 * v10 - 2];
  v13 = *(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 24) | (v8 >> 1) & 3;
  if (v13 >= ((v12 >> 1) & 3 | *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_33:
    v14 = &v11[3 * v10];
    goto LABEL_12;
  }
  v14 = v11;
  v15 = v10;
  do
  {
    v16 = v15 >> 1;
    v17 = v14[3 * (v15 >> 1) + 1];
    LODWORD(v17) = (v17 >> 1) & 3 | *(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 24);
    v15 -= (v15 >> 1) + 1;
    v18 = v13 >= v17;
    if (v13 >= v17)
      v19 = v16 + 1;
    else
      v19 = 0;
    v14 += 3 * v19;
    if (!v18)
      v15 = v16;
  }
  while (v15);
LABEL_12:
  if (v14 == &v11[3 * v10])
    return v5;
  v20 = (v8 >> 1) & 3;
  v21 = *(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 24) | v20;
  if (((*v14 >> 1) & 3 | *(_DWORD *)((*v14 & 0xFFFFFFFFFFFFFFF8) + 24)) > v21)
    return v5;
  v22 = (void *)v14[2];
  if (!v22)
    return v5;
  v23 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v24 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v25 = *(_QWORD *)(v24 + 16 * v4);
  if (v25 < 8 || *(_QWORD *)(v24 + 16 * v4 + 8) >= 8uLL)
  {
    v25 = sub_1C528C724((_QWORD *)(*(_QWORD *)a1 + 48), v23, this);
    v21 = *(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 24) | v20;
  }
  v26 = (v25 >> 1) & 3 | *(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v26 >= v21)
    goto LABEL_30;
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v28 = *(unsigned int *)(v27 + 8);
  v29 = *(_QWORD **)v27;
  if (!(_DWORD)v28)
  {
    LODWORD(v28) = 0;
    goto LABEL_36;
  }
  v30 = v29[3 * v28 - 2];
  if (v26 >= ((v30 >> 1) & 3 | *(_DWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_36:
    v31 = &v29[3 * v28];
    goto LABEL_27;
  }
  v31 = v29;
  v32 = v28;
  do
  {
    v33 = v32 >> 1;
    v34 = v31[3 * (v32 >> 1) + 1];
    LODWORD(v34) = (v34 >> 1) & 3 | *(_DWORD *)((v34 & 0xFFFFFFFFFFFFFFF8) + 24);
    v32 -= (v32 >> 1) + 1;
    v35 = v26 >= v34;
    if (v26 >= v34)
      v36 = v33 + 1;
    else
      v36 = 0;
    v31 += 3 * v36;
    if (!v35)
      v32 = v33;
  }
  while (v32);
LABEL_27:
  if (v31 != &v29[3 * v28]
    && ((*v31 >> 1) & 3 | *(_DWORD *)((*v31 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v26)
  {
    v22 = (void *)v31[2];
    v8 = v25;
    if (v22)
    {
LABEL_30:
      v37 = *(_DWORD *)(a1 + 88);
      v38 = (unint64_t *)sub_1C528CD90((_QWORD *)(*(_QWORD *)a1 + 48), *(_QWORD *)(*(_QWORD *)a1 + 40), this);
      v39 = sub_1C528E25C((uint64_t *)a1, v37, v22, v8, (uint64_t)this, v38);
      sub_1C528F0F0(a1 + 200, *(_QWORD *)(v39 + 8), v5, *(_DWORD *)(a1 + 88));
      return *(_QWORD *)(v39 + 8);
    }
  }
  return v5;
}

void sub_1C528F0F0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  unsigned int v25;
  __int128 v26;
  char v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  _DWORD *v31;
  _QWORD *v32;
  int v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  _BYTE v44[72];
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 184) || (v8 = *(unsigned int *)(a1 + 188), (_DWORD)v8 == 9))
  {
    v41 = a1;
    v42 = v44;
    v43 = 0x400000000;
    sub_1C528F970(&v41, a2);
    v7 = v41;
    if (!*(_DWORD *)(v41 + 184))
    {
      v12 = sub_1C5295088(v41, (_DWORD *)v42 + 4 * v43 - 1, *(unsigned int *)(v41 + 188), a2, a3, a4);
      if (v12 <= 9)
      {
        *(_DWORD *)(v7 + 188) = v12;
        *((_DWORD *)v42 + 2) = v12;
LABEL_4:
        if (v42 != v44)
          free(v42);
        return;
      }
      v13 = 0;
      v14 = 0;
      LODWORD(v15) = 0;
      v16 = *(_DWORD *)(v7 + 188) + 1;
      v17 = *((_DWORD *)v42 + 4 * v43 - 1);
      v18 = v16 >> 1;
      v19 = v16 & 1;
      v20 = 2;
      do
      {
        if (v13 >= v19)
          v21 = v18;
        else
          v21 = v18 + 1;
        *(_DWORD *)&v44[4 * v13 + 64] = v21;
        v22 = v17 - v14;
        v14 += v21;
        if (v20 == 2 && v14 > v17)
        {
          v20 = v13;
          v15 = v22;
        }
        else
        {
          v15 = v15;
        }
        ++v13;
      }
      while (v13 != 2);
      v23 = 0;
      v24 = 0;
      v25 = 0;
      --*(_DWORD *)&v44[4 * v20 + 64];
      v45 = 0uLL;
      v26 = 0uLL;
      do
      {
        v27 = v23;
        v28 = *(unint64_t **)(v7 + 192);
        v29 = *v28;
        if (*v28)
        {
          *v28 = *(_QWORD *)v29;
        }
        else
        {
          v29 = sub_1C484358C((uint64_t)(v28 + 1), 192, 6);
          v26 = 0uLL;
        }
        *(_QWORD *)(v29 + 176) = 0;
        *(_OWORD *)(v29 + 144) = v26;
        *(_OWORD *)(v29 + 160) = v26;
        *(_OWORD *)(v29 + 112) = v26;
        *(_OWORD *)(v29 + 128) = v26;
        *(_OWORD *)(v29 + 80) = v26;
        *(_OWORD *)(v29 + 96) = v26;
        *(_OWORD *)(v29 + 48) = v26;
        *(_OWORD *)(v29 + 64) = v26;
        *(_OWORD *)(v29 + 16) = v26;
        *(_OWORD *)(v29 + 32) = v26;
        *(_OWORD *)v29 = v26;
        v30 = *(_DWORD *)&v44[4 * v24 + 64];
        if (v30)
        {
          v31 = (_DWORD *)(v29 + 144);
          v32 = (_QWORD *)(v29 + 8);
          v33 = *(_DWORD *)&v44[4 * v24 + 64];
          v34 = v25;
          do
          {
            v35 = (_QWORD *)(v7 + 16 * v34);
            *(v32 - 1) = *v35;
            *v32 = v35[1];
            v32 += 2;
            *v31++ = *(_DWORD *)(v7 + 4 * v34++ + 144);
            --v33;
          }
          while (v33);
        }
        v25 += v30;
        *((_QWORD *)&v45 + v24) = v29 & 0xFFFFFFFFFFFFFFC0 | (v30 - 1);
        v23 = 1;
        v24 = 1;
      }
      while ((v27 & 1) == 0);
      v36 = 0;
      *(_DWORD *)(v7 + 184) = 1;
      *(_OWORD *)v7 = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
      *(_OWORD *)(v7 + 32) = 0u;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_OWORD *)(v7 + 64) = 0u;
      *(_OWORD *)(v7 + 80) = 0u;
      *(_OWORD *)(v7 + 96) = 0u;
      *(_OWORD *)(v7 + 112) = 0u;
      *(_OWORD *)(v7 + 128) = 0u;
      *(_OWORD *)(v7 + 144) = 0u;
      *(_OWORD *)(v7 + 160) = 0u;
      *(_QWORD *)(v7 + 176) = 0;
      do
      {
        v37 = *((_QWORD *)&v45 + v36);
        v38 = v7 + 8 * v36;
        *(_QWORD *)(v38 + 96) = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFFC0)
                                          + 16 * (*(_DWORD *)&v44[4 * v36 + 64] - 1)
                                          + 8);
        *(_QWORD *)(v38 + 8) = v37;
        ++v36;
      }
      while (v36 != 2);
      *(_QWORD *)v7 = *(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFC0);
      *(_DWORD *)(v7 + 188) = 2;
      v39 = v42;
      *(_QWORD *)v42 = v7 + 8;
      v39[2] = 2;
      v39[3] = v20;
      v40 = *(_QWORD *)(*(_QWORD *)v42 + 8 * *((unsigned int *)v42 + 3));
      *(_QWORD *)&v45 = v40 & 0xFFFFFFFFFFFFFFC0;
      *((_QWORD *)&v45 + 1) = (v40 & 0x3F | (v15 << 32)) + 1;
      sub_1C5DF93CC((uint64_t)&v42, (uint64_t)v42 + 16, &v45);
    }
    sub_1C52951CC(&v41, a2, a3, a4);
    goto LABEL_4;
  }
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = (uint64_t *)(a1 + 8);
    while (1)
    {
      v11 = *v10;
      v10 += 2;
      if (((v11 >> 1) & 3 | *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3))
        break;
      if (v8 == ++v9)
      {
        LODWORD(v9) = *(_DWORD *)(a1 + 188);
        break;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  LODWORD(v41) = v9;
  *(_DWORD *)(a1 + 188) = sub_1C5295088(a1, &v41, v8, a2, a3, a4);
}

unint64_t sub_1C528F4A4(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v2 = a2;
  v4 = a2 & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v6 = *(_DWORD *)(v5 + 8);
  v7 = *(_QWORD **)v5;
  if (!v6)
  {
    v6 = 0;
    goto LABEL_25;
  }
  v8 = v7[3 * v6 - 2];
  v9 = *(_DWORD *)(v4 + 24) | 3;
  if (v9 >= ((v8 >> 1) & 3 | *(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_25:
    v10 = &v7[3 * v6];
    goto LABEL_10;
  }
  v10 = *(_QWORD **)v5;
  v11 = *(unsigned int *)(v5 + 8);
  do
  {
    v12 = v11 >> 1;
    v13 = v10[3 * (v11 >> 1) + 1];
    LODWORD(v13) = (v13 >> 1) & 3 | *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24);
    v11 -= (v11 >> 1) + 1;
    v14 = v9 >= v13;
    if (v9 >= v13)
      v15 = v12 + 1;
    else
      v15 = 0;
    v10 += 3 * v15;
    if (!v14)
      v11 = v12;
  }
  while (v11);
LABEL_10:
  if (v10 == &v7[3 * v6])
    return *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF9;
  if (((*v10 >> 1) & 3 | *(_DWORD *)((*v10 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v4 + 24) | 3u))
    return *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF9;
  v16 = (_QWORD *)v10[2];
  if (!v16)
    return *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF9;
  v17 = v4 | 6;
  if ((v4 | 6) < 8)
    v18 = 0;
  else
    v18 = *(_QWORD *)(v4 + 16);
  if (*(_DWORD *)(a1 + 92)
    && (v16[1] & 0xFFFFFFFFFFFFFFF8) != v4
    && (llvm::MachineInstr::readsWritesVirtualRegister(v18, *(_DWORD *)(v5 + 112), 0) & 1) != 0)
  {
    sub_1C528E0A8(a1, 0, *(unsigned int *)v16);
    sub_1C528E25C((uint64_t *)a1, 0, v16, v2, *(_QWORD *)(v18 + 24), (unint64_t *)v18);
  }
  else
  {
    v20 = *(_QWORD *)(v18 + 24);
    if ((*(_BYTE *)v18 & 4) == 0)
    {
      while ((*(_WORD *)(v18 + 44) & 8) != 0)
        v18 = *(_QWORD *)(v18 + 8);
    }
    return *(_QWORD *)(sub_1C528E25C((uint64_t *)a1, 0, v16, v17, v20, *(unint64_t **)(v18 + 8)) + 8);
  }
  return v2;
}

uint64_t sub_1C528F664(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;

  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  v3 = *(_QWORD *)(a1[10] + 8);
  v4 = *(unsigned int *)(v3 + 8);
  v5 = *(_QWORD **)v3;
  if (!(_DWORD)v4)
  {
    LODWORD(v4) = 0;
    goto LABEL_19;
  }
  v6 = v5[3 * v4 - 2];
  v7 = *(_DWORD *)(v2 + 24);
  if (v7 >= ((v6 >> 1) & 3 | *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_19:
    v8 = &v5[3 * v4];
    goto LABEL_10;
  }
  v8 = v5;
  v9 = v4;
  do
  {
    v10 = v9 >> 1;
    v11 = v8[3 * (v9 >> 1) + 1];
    LODWORD(v11) = (v11 >> 1) & 3 | *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 24);
    v9 -= (v9 >> 1) + 1;
    v12 = v7 >= v11;
    if (v7 >= v11)
      v13 = v10 + 1;
    else
      v13 = 0;
    v8 += 3 * v13;
    if (!v12)
      v9 = v10;
  }
  while (v9);
LABEL_10:
  if (v8 == &v5[3 * v4])
    return v2 | 2;
  if (((*v8 >> 1) & 3 | *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 24)) > *(_DWORD *)(v2 + 24))
    return v2 | 2;
  v14 = (void *)v8[2];
  if (!v14)
    return v2 | 2;
  if (v2)
    v15 = *(_QWORD *)(v2 + 16);
  else
    v15 = 0;
  return *(_QWORD *)(sub_1C528E25C(a1, 0, v14, v2, *(_QWORD *)(v15 + 24), (unint64_t *)v15) + 8);
}

void sub_1C528F768(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  _DWORD *v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v7 = *(unsigned int *)(v6 + 8);
  v8 = *(_QWORD **)v6;
  if (!(_DWORD)v7)
  {
    LODWORD(v7) = 0;
    goto LABEL_12;
  }
  v9 = v8[3 * v7 - 2];
  v10 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3;
  if (v10 >= ((v9 >> 1) & 3 | *(_DWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_12:
    v11 = &v8[3 * v7];
    goto LABEL_13;
  }
  v11 = v8;
  v12 = v7;
  do
  {
    v13 = v12 >> 1;
    v14 = v11[3 * (v12 >> 1) + 1];
    LODWORD(v14) = (v14 >> 1) & 3 | *(_DWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 24);
    v12 -= (v12 >> 1) + 1;
    v15 = v10 >= v14;
    if (v10 >= v14)
      v16 = v13 + 1;
    else
      v16 = 0;
    v11 += 3 * v16;
    if (!v15)
      v12 = v13;
  }
  while (v12);
LABEL_13:
  if (v11 != &v8[3 * v7]
    && ((*v11 >> 1) & 3 | *(_DWORD *)((*v11 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3))
  {
    v17 = (unsigned int *)v11[2];
    if (v17)
      sub_1C528E0A8(a1, 0, *v17);
  }
  if (a3 < 8)
    goto LABEL_29;
  v18 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  if (!v18)
    goto LABEL_29;
  v19 = *(_QWORD *)(v18 + 32);
  v20 = *(_QWORD *)(v18 + 16);
  v21 = *(unsigned __int8 *)(v20 + 4);
  if ((*(_BYTE *)(v20 + 8) & 2) == 0 || (v26 = *(_DWORD *)(v18 + 40), v26 == v21))
  {
    v22 = *(unsigned __int8 *)(v20 + 4);
  }
  else
  {
    v27 = v26 - 1;
    v22 = v21;
    do
    {
      v28 = *(_DWORD *)(v19 + 32 * v21);
      if ((v28 & 0x10000FF) != 0x1000000)
        break;
      v22 += (v28 & 0x2000000) == 0;
      if (v27 == v21)
        break;
      ++v21;
    }
    while ((v28 & 0x2000000) == 0);
  }
  if (v22)
  {
    v23 = 32 * v22;
    v24 = (_DWORD *)(v19 + 4);
    while (1)
    {
      v25 = *(v24 - 1) || (*(v24 - 1) & 0xF00000) == 0;
      if (!v25 && *v24 == *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 112))
        break;
      v24 += 8;
      v23 -= 32;
      if (!v23)
        goto LABEL_29;
    }
  }
  else
  {
LABEL_29:
    sub_1C528F0F0(a1 + 200, a2, a3, *(_DWORD *)(a1 + 88));
  }
}

_DWORD *sub_1C528F970(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _DWORD *result;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 184))
  {
    v5 = *(unsigned int *)(v4 + 188);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = v4 + 96;
      while (((*(_QWORD *)(v7 + 8 * v6) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v7 + 8 * v6) & 0xFFFFFFFFFFFFFFF8)
                                                                             + 24)) <= (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8)
                                                                                                  + 24) | (a2 >> 1) & 3))
      {
        if (v5 == ++v6)
        {
          v6 = v5;
          break;
        }
      }
    }
    else
    {
      v6 = 0;
    }
    result = sub_1C5294A90(a1, v6);
    v13 = a1[4];
    if (v13)
    {
      v15 = a1 + 2;
      v14 = *((_QWORD *)a1 + 1);
      if (*(_DWORD *)(v14 + 12) < *(_DWORD *)(v14 + 8))
      {
        v16 = *(_DWORD *)(*(_QWORD *)a1 + 184);
        v17 = *(_QWORD *)(*(_QWORD *)(v14 + 16 * (v13 - 1))
                        + 8 * *(unsigned int *)(v14 + 16 * (v13 - 1) + 12));
        v18 = a2 & 0xFFFFFFFFFFFFFFF8;
        v19 = (a2 >> 1) & 3;
        v20 = v16 - v13;
        if (v16 != v13)
        {
          do
          {
            v23 = v17 & 0xFFFFFFFFFFFFFFC0;
            LODWORD(v24) = -1;
            do
            {
              v24 = (v24 + 1);
              v25 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFC0) + 8 * v24 + 0x60);
            }
            while (((v25 >> 1) & 3 | *(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v18 + 24) | v19));
            sub_1C4A079DC(v15, v17, v24);
            v17 = *(_QWORD *)(v23 + 8 * v24);
            --v20;
          }
          while (v20);
        }
        LODWORD(v21) = -1;
        do
        {
          v21 = (v21 + 1);
          v22 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFC0) + 16 * v21 + 8);
        }
        while (((v22 >> 1) & 3 | *(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v18 + 24) | v19));
        return sub_1C4A079DC(v15, v17, v21);
      }
    }
  }
  else
  {
    v8 = *(unsigned int *)(v4 + 188);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = (uint64_t *)(v4 + 8);
      while (1)
      {
        v11 = *v10;
        v10 += 2;
        if (((v11 >> 1) & 3 | *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3))
          break;
        if (v8 == ++v9)
        {
          v9 = v8;
          return sub_1C5294A90(a1, v9);
        }
      }
    }
    else
    {
      v9 = 0;
    }
    return sub_1C5294A90(a1, v9);
  }
  return result;
}

void sub_1C528FB58(uint64_t a1, uint64_t a2, uint64_t a3, llvm::LiveRangeCalc *a4, uint64_t *a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  uint64_t i;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;

  if (a2 != a3)
  {
    for (i = a2; i != a3; i += 8)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 288) + 392)
                      + 16 * *(unsigned int *)(*(_QWORD *)i + 24)
                      + 8);
      v17 = (v16 >> 1) & 3;
      v18 = v16 & 0xFFFFFFFFFFFFFFF8;
      if (v17)
        v19 = v18 | (2 * (v17 - 1));
      else
        v19 = *(_QWORD *)v18 | 6;
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
      if (a6 != -1)
      {
        v21 = *(_QWORD *)(v20 + 104);
        do
        {
          v20 = v21;
          if (*(_QWORD *)(v21 + 112) == a6)
            break;
          v21 = *(_QWORD *)(v21 + 104);
        }
        while (v21);
      }
      v22 = *(unsigned int *)(v20 + 8);
      v23 = *(_QWORD **)v20;
      if ((_DWORD)v22)
      {
        v24 = v23[3 * v22 - 2];
        v25 = *(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24) | (v19 >> 1) & 3;
        v26 = (v24 >> 1) & 3 | *(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 24);
        v27 = v23;
        v28 = v22;
        if (v25 < v26)
        {
          do
          {
            v29 = v28 >> 1;
            v30 = v27[3 * (v28 >> 1) + 1];
            LODWORD(v30) = (v30 >> 1) & 3 | *(_DWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 24);
            v28 -= (v28 >> 1) + 1;
            v31 = v25 >= v30;
            if (v25 >= v30)
              v32 = v29 + 1;
            else
              v32 = 0;
            v27 += 3 * v32;
            if (!v31)
              v28 = v29;
          }
          while (v28);
          goto LABEL_21;
        }
      }
      else
      {
        LODWORD(v22) = 0;
      }
      v27 = &v23[3 * v22];
LABEL_21:
      if (v27 != &v23[3 * v22]
        && ((*v27 >> 1) & 3 | *(_DWORD *)((*v27 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24) | (v19 >> 1) & 3))
      {
        llvm::LiveRangeCalc::extend(a4, a5, v16, 0, a7, a8);
      }
    }
  }
}

uint64_t sub_1C528FD08(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unint64_t *v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD v26[3];

  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(unint64_t **)a2;
  if (!v3)
  {
    v13 = 0;
    goto LABEL_13;
  }
  v5 = v4[3 * v3 - 2];
  v6 = *(_DWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (a1 >> 1) & 3;
  if (v6 >= ((v5 >> 1) & 3 | *(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
    v13 = *(unsigned int *)(a2 + 8);
LABEL_13:
    v7 = &v4[3 * v13];
    goto LABEL_14;
  }
  v7 = *(unint64_t **)a2;
  v8 = *(unsigned int *)(a2 + 8);
  do
  {
    v9 = v8 >> 1;
    v10 = v7[3 * (v8 >> 1) + 1];
    LODWORD(v10) = (v10 >> 1) & 3 | *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 24);
    v8 -= (v8 >> 1) + 1;
    v11 = v6 >= v10;
    if (v6 >= v10)
      v12 = v9 + 1;
    else
      v12 = 0;
    v7 += 3 * v12;
    if (!v11)
      v8 = v9;
  }
  while (v8);
  v13 = *(unsigned int *)(a2 + 8);
LABEL_14:
  v14 = &v4[3 * v13];
  if (v7 == v14)
    return 1;
  v15 = *v7;
  v16 = (*v7 >> 1) & 3 | *(_DWORD *)((*v7 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v16 > (*(_DWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (a1 >> 1) & 3))
    return 1;
  v18 = a1 & 0xFFFFFFFFFFFFFFF8 | 6;
  if (v7[1] == v18)
  {
    if (v3)
    {
      v19 = &v4[3 * v13];
      if (v16 < ((*(v14 - 2) >> 1) & 3 | *(_DWORD *)((*(v14 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
      {
        v19 = *(unint64_t **)a2;
        do
        {
          v20 = v13 >> 1;
          v21 = v19[3 * (v13 >> 1) + 1];
          LODWORD(v21) = (v21 >> 1) & 3 | *(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 24);
          v13 -= (v13 >> 1) + 1;
          v22 = v16 >= v21;
          if (v16 >= v21)
            v23 = v20 + 1;
          else
            v23 = 0;
          v19 += 3 * v23;
          if (!v22)
            v13 = v20;
        }
        while (v13);
      }
    }
    else
    {
      v19 = &v4[3 * v13];
    }
    v24 = v19[1];
    v25 = v19[2];
    if (*v19 == v15)
    {
      if (v24 == v18)
      {
        if (v14 != v19 + 3)
        {
          memmove(v19, v19 + 3, (char *)v14 - (char *)(v19 + 3));
          v3 = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(a2 + 8) = v3 - 1;
        llvm::LiveRange::removeValNoIfDead(a2, v25);
      }
      else
      {
        *v19 = v18;
      }
    }
    else
    {
      v19[1] = v15;
      if (v24 != v18)
      {
        v26[0] = v18;
        v26[1] = v24;
        v26[2] = v25;
        sub_1C510F69C(a2, (uint64_t)(v19 + 3), (unint64_t)v26);
      }
    }
    return 1;
  }
  return 0;
}

void sub_1C528FF04(unint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int **v5;
  unsigned int **v6;
  _QWORD *v7;
  unint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  unsigned int *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  int *v72;
  int v73;
  int v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t NearestCommonDominator;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  char *v91;
  _QWORD *v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int *v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int *v121;
  int v122;
  int v123;
  uint64_t v124;
  BOOL v125;
  unsigned int v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int v141;
  _DWORD *v142;
  int v143;
  _DWORD *v144;
  int v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  uint64_t v153;
  unint64_t v154;
  unsigned int v155;
  int v156;
  int v157;
  _DWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  _QWORD *v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  BOOL v176;
  unint64_t v177;
  unsigned int *v178;
  uint64_t v179;
  unsigned int v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v186;
  uint64_t v187;
  unint64_t v188;
  int v189;
  char *v190;
  uint64_t v191;
  char *v192;
  void *v193;
  char *v194;
  int v195;
  unsigned int v196;
  int v197;
  unsigned int v198;
  uint64_t *v199;
  void *v200;
  void *v201;
  void *v202;
  unsigned int v203;
  unsigned int v204;
  int v205;
  int v206;
  char *v207;
  int v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t *v211;
  uint64_t *v212;
  unint64_t v213;
  uint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int v218;
  unsigned int v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  BOOL v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int *v228;
  uint64_t v229;
  unsigned int v230;
  int v231;
  char *v232;
  uint64_t **v233;
  uint64_t *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  unint64_t *v240;
  unint64_t *v241;
  uint64_t v242;
  unint64_t *v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t *v246;
  unint64_t *v247;
  unint64_t v248;
  uint64_t *v249;
  unint64_t *v250;
  unint64_t *v251;
  unint64_t v252;
  uint64_t *v253;
  char *v254;
  uint64_t v255;
  _QWORD *v256;
  unint64_t *v257;
  unint64_t *v258;
  unint64_t v259;
  _QWORD *v260;
  unint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  char v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  char *v278;
  uint64_t v279;
  void *v280;
  int v281;
  llvm::LiveInterval *v282;
  unint64_t v283;
  uint64_t v284;
  unsigned int v285;
  uint64_t *v286;
  uint64_t v287;
  int v288;
  char *v289;
  unsigned int v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int v298;
  int v299;
  uint64_t v300;
  int v301;
  int v302;
  int v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unsigned int v308;
  unsigned int v309;
  uint64_t v310;
  int *v311;
  int v312;
  int v313;
  uint64_t v315;
  int v316;
  BOOL v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  unint64_t v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t *v331;
  unint64_t v332;
  unint64_t v333;
  unsigned int v334;
  unsigned int v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t *v339;
  void *v340;
  _OWORD *v341;
  _OWORD *v342;
  __int128 v343;
  _OWORD *v344;
  _OWORD *v345;
  __int128 v346;
  unint64_t v347;
  _QWORD *v348;
  int v349;
  int *v350;
  uint64_t v352;
  uint64_t v353;
  unsigned int v354;
  unsigned int v355;
  unsigned int v356;
  uint64_t v357;
  unsigned int v358;
  uint64_t v359;
  uint64_t v360;
  char *v361;
  uint64_t v362;
  _DWORD *v363;
  unsigned int v364;
  unsigned int v365;
  uint64_t v366;
  uint64_t v367;
  int v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int v373;
  unsigned int v374;
  uint64_t v375;
  llvm::LiveInterval *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  int v381;
  int v383;
  llvm::LiveRangeCalc *v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t *v388;
  _QWORD *v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  __int16 v394;
  unint64_t v395;
  unint64_t v396;
  unsigned int v397;
  BOOL v398;
  int v399;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t *v406;
  uint64_t v407;
  uint64_t v408;
  unint64_t v409;
  int v410;
  unsigned int v411;
  unsigned int v412;
  unsigned int v413;
  uint64_t v414;
  _QWORD *v415;
  unsigned int v416;
  uint64_t v417;
  unsigned int v418;
  int v419;
  int v420;
  uint64_t v421;
  int v422;
  unint64_t v423;
  unsigned int v424;
  int v425;
  void *v426;
  int v427;
  int v428;
  int v429;
  unsigned int v430;
  unint64_t v431;
  uint64_t v432;
  uint64_t v433;
  unint64_t v434;
  _QWORD *v435;
  uint64_t v436;
  unsigned int v437;
  unsigned int v438;
  _QWORD *v439;
  unint64_t v440;
  unint64_t v441;
  uint64_t v442;
  BOOL v443;
  unint64_t v444;
  __int128 v445;
  void **v446;
  char *v447;
  char *v448;
  __int128 v449;
  __int128 v450;
  BOOL v451;
  unsigned int v452;
  char *v453;
  _BYTE *v454;
  uint64_t v455;
  int v456;
  uint64_t v457;
  unint64_t v458;
  uint64_t *v459;
  uint64_t v460;
  _BYTE *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  void *v466;
  unint64_t v467;
  uint64_t v468;
  uint64_t v469;
  _QWORD *v470;
  uint64_t v471;
  _QWORD *v472;
  char *v473;
  uint64_t v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t v477;
  unsigned int *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t *v482;
  uint64_t *v483;
  unint64_t v484;
  uint64_t v485;
  unint64_t v486;
  int v488;
  unsigned int v489;
  unsigned int v490;
  unsigned int v491;
  uint64_t v492;
  _QWORD *v493;
  unsigned int v494;
  uint64_t v495;
  unsigned int v496;
  int v497;
  uint64_t v498;
  int v499;
  llvm::LiveInterval *v500;
  int v501;
  uint64_t v502;
  char v503;
  BOOL v504;
  unsigned int v505;
  int v506;
  uint64_t v507;
  unint64_t v508;
  uint64_t v509;
  uint64_t *v510;
  uint64_t *v511;
  uint64_t v512;
  unint64_t v513;
  int v515;
  unsigned int v516;
  unsigned int v517;
  unsigned int v518;
  uint64_t v519;
  _QWORD *v520;
  unsigned int v521;
  uint64_t v522;
  unsigned int v523;
  int v524;
  uint64_t v525;
  int v526;
  uint64_t v527;
  uint64_t *i;
  char v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  void *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  int *v544;
  int *v545;
  uint64_t v546;
  _QWORD *v547;
  uint64_t v548;
  _QWORD *v549;
  uint64_t v550;
  uint64_t v551;
  unint64_t v552;
  int v553;
  int v554;
  int v555;
  int v556;
  int v557;
  uint64_t v558;
  unint64_t v559;
  llvm::LiveInterval *v560;
  unint64_t v561;
  uint64_t v562;
  uint64_t *v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  unsigned int v567;
  _DWORD *v568;
  uint64_t v569;
  uint64_t v570;
  int *v571;
  int *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  _QWORD *v576;
  uint64_t v577;
  uint64_t v578;
  void *v579;
  uint64_t v580;
  int *v581;
  int *v582;
  uint64_t v583;
  llvm::LiveInterval *v584;
  unsigned int v585;
  uint64_t v586;
  uint64_t v587;
  unint64_t v588;
  uint64_t v590;
  uint64_t v591;
  _DWORD *v592;
  uint64_t v593;
  uint64_t v595;
  char *v596;
  char *v597;
  unint64_t v598;
  uint64_t v599;
  uint64_t v600;
  unint64_t v601;
  unsigned int v602;
  int v603;
  char v605;
  int32x2_t *v606;
  int32x2_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t *v610;
  uint64_t v611;
  unint64_t v612;
  uint64_t v613;
  unsigned int v614;
  unint64_t v615;
  uint64_t v616;
  char *v617;
  uint64_t v618;
  uint64_t v619;
  unsigned int v620;
  unint64_t v621;
  uint64_t *v622;
  unint64_t v623;
  uint64_t v624;
  uint64_t v625;
  unsigned int v626;
  unsigned int v627;
  uint64_t v628;
  unint64_t v629;
  unint64_t v630;
  uint64_t v631;
  BOOL v632;
  unint64_t v633;
  uint64_t v634;
  int v635;
  int v636;
  __int16 v637;
  unint64_t v638;
  unint64_t v639;
  unint64_t v640;
  unsigned int v641;
  int v642;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t *v648;
  uint64_t v649;
  uint64_t v650;
  char v651;
  int v652;
  int v653;
  unsigned int v654;
  int v655;
  int *v656;
  BOOL v657;
  uint64_t v658;
  int v659;
  int v660;
  _BYTE *v661;
  uint64_t v662;
  uint64_t v663;
  int v664;
  int v666;
  int v667;
  unsigned int v668;
  void *v669;
  BOOL v670;
  unsigned int v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  int v675;
  int v677;
  int v678;
  unsigned int v679;
  BOOL v680;
  unsigned int v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  int v685;
  int v687;
  uint64_t v688;
  uint64_t v689;
  int v690;
  int v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  int v696;
  int v698;
  uint64_t v699;
  unsigned int v700;
  unsigned int *v701;
  uint64_t v702;
  int v703;
  int v704;
  unint64_t v705;
  unsigned int v706;
  unint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  unsigned int v712;
  unint64_t v713;
  uint64_t v714;
  unsigned int v715;
  _QWORD *v716;
  uint64_t v717;
  unsigned int v718;
  unsigned int v719;
  _QWORD *v720;
  unint64_t v721;
  unint64_t v722;
  uint64_t v723;
  BOOL v724;
  unint64_t v725;
  uint64_t v726;
  char v727;
  uint64_t v728;
  _QWORD *v729;
  uint64_t v730;
  uint64_t v731;
  _QWORD *v732;
  char *v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  int v737;
  int v739;
  int v740;
  unsigned int v741;
  uint64_t v742;
  unint64_t v743;
  unint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  int v748;
  int v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  int v754;
  int v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  int v760;
  int v762;
  int64_t v763;
  uint64_t v764;
  void *v765;
  uint64_t v766;
  void *v767;
  uint64_t v769;
  char v770;
  _QWORD *v771;
  uint64_t *v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  llvm::LiveInterval *v786;
  char *v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v791;
  uint64_t v792;
  int v793;
  unint64_t v794;
  void *v795;
  uint64_t v796;
  _BYTE v797[64];
  void *v798[2];
  _BYTE v799[64];
  void *v800;
  void *__src;
  unint64_t v802;
  int v803;
  _BYTE v804[64];
  void *v805[2];
  __int128 v806;
  uint64_t v807;
  void *v808;
  uint64_t v809;
  _BYTE v810[48];
  int v811;
  uint64_t v812;
  uint64_t v813;
  unsigned int v814;
  void *v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  void *v819;
  uint64_t v820;
  _BYTE v821[592];
  void *v822;
  void *v823;
  uint64_t v824;
  _QWORD v825[4];
  int v826;
  uint64_t v827;

  v2 = a1;
  v827 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v4 = *(unsigned int *)(v3 + 72);
  if (!(_DWORD)v4)
    goto LABEL_23;
  v5 = *(unsigned int ***)(v3 + 64);
  v6 = &v5[v4];
  v7 = (_QWORD *)(a1 + 200);
  v8 = a1 + 208;
  do
  {
    v9 = *v5;
    v10 = *((_QWORD *)*v5 + 1);
    if (v10 < 8)
      goto LABEL_17;
    v11 = *(_DWORD *)(v2 + 388);
    if (!v11)
      goto LABEL_20;
    v12 = *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 24) | (v10 >> 1) & 3;
    if (v12 < ((*v7 >> 1) & 3 | *(_DWORD *)((*v7 & 0xFFFFFFFFFFFFFFF8) + 24)))
      goto LABEL_20;
    v13 = *(_DWORD *)(v2 + 384);
    v14 = v11 - 1;
    v15 = (uint64_t)&v7[2 * v14 + 1];
    v16 = (_QWORD *)(v8 + 8 * v14 + 88);
    if (!v13)
      v16 = (_QWORD *)v15;
    if (((*v16 >> 1) & 3 | *(_DWORD *)((*v16 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v12)
    {
LABEL_20:
      v20 = 0;
      goto LABEL_13;
    }
    if (v13)
    {
      v25 = sub_1C52968B4((uint64_t)v7, *((_QWORD *)*v5 + 1));
      v2 = a1;
      v20 = v25;
    }
    else
    {
      do
      {
        v17 = v13;
        v18 = v7[2 * v13 + 1];
        v19 = (v18 >> 1) & 3 | *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24);
        v13 = v17 + 1;
      }
      while (v19 <= v12);
      if (v12 < ((v7[2 * v17] >> 1) & 3 | *(_DWORD *)((v7[2 * v17] & 0xFFFFFFFFFFFFFFF8) + 24)))
        goto LABEL_20;
      v20 = *((_DWORD *)v7 + v17 + 36);
    }
LABEL_13:
    sub_1C528DDE4(v2, v20, v9, v10, 1);
    v21 = *(_QWORD *)(a1 + 80);
    v22 = sub_1C477672C(v21 + 144, (uint64_t)v9);
    v2 = a1;
    v23 = *(_QWORD *)(v21 + 152);
    if (v23 == *(_QWORD *)(v21 + 144))
      v24 = 164;
    else
      v24 = 160;
    if (v22 == (_QWORD *)(v23 + 8 * *(unsigned int *)(v21 + v24)))
      goto LABEL_17;
    if ((v9[2] & 6) != 0)
    {
      v658 = *(_QWORD *)(a1 + 80);
      v659 = *(_DWORD *)(*(_QWORD *)(v658 + 16) + 8);
      LODWORD(v658) = *(_DWORD *)(v658 + 64);
      v660 = v659 - v658;
      if (v659 != (_DWORD)v658)
      {
        v26 = 0;
        do
        {
          sub_1C528E0A8(a1, v26, *v9);
          v2 = a1;
          ++v26;
        }
        while (v660 != v26);
      }
      goto LABEL_17;
    }
    v805[0] = &v807;
    v805[1] = &v807;
    *(_QWORD *)&v806 = 8;
    DWORD2(v806) = 0;
    v822 = &v824;
    v823 = (void *)0x400000000;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)v805, (uint64_t)v9);
    v699 = v823;
    if (v823 >= (unint64_t)HIDWORD(v823))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v822, (uint64_t)&v824, v823 + 1, 8);
      v699 = v823;
    }
    v2 = a1;
    *((_QWORD *)v822 + v699) = v9;
    v700 = (_DWORD)v823 + 1;
    v782 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 288);
    v789 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    do
    {
      v701 = (unsigned int *)*((_QWORD *)v822 + v700 - 1);
      LODWORD(v823) = v700 - 1;
      v702 = *(_QWORD *)(v2 + 80);
      v703 = *(_DWORD *)(*(_QWORD *)(v702 + 16) + 8);
      LODWORD(v702) = *(_DWORD *)(v702 + 64);
      v704 = v703 - v702;
      v705 = v2;
      if (v703 != (_DWORD)v702)
      {
        v706 = 0;
        do
          sub_1C528E0A8(v705, v706++, *v701);
        while (v704 != v706);
      }
      v707 = *((_QWORD *)v701 + 1);
      v2 = v705;
      if ((v707 & 6) == 0)
      {
        v708 = sub_1C499C548(v782, v707);
        v2 = a1;
        v709 = *(_QWORD *)(v708 + 64);
        v710 = *(_QWORD *)(v708 + 72);
        while (1)
        {
          if (v709 == v710)
            goto LABEL_890;
          v711 = *(_QWORD *)(*(_QWORD *)(v782 + 392) + 16 * *(unsigned int *)(*(_QWORD *)v709 + 24) + 8);
          v712 = (v711 >> 1) & 3;
          v713 = v711 & 0xFFFFFFFFFFFFFFF8;
          v714 = v712 ? v713 | (2 * (v712 - 1)) : *(_QWORD *)v713 | 6;
          v715 = *(_DWORD *)(v789 + 8);
          v716 = *(_QWORD **)v789;
          if (!v715)
            break;
          v717 = v716[3 * v715 - 2];
          v718 = *(_DWORD *)((v714 & 0xFFFFFFFFFFFFFFF8) + 24) | (v714 >> 1) & 3;
          v719 = (v717 >> 1) & 3 | *(_DWORD *)((v717 & 0xFFFFFFFFFFFFFFF8) + 24);
          v720 = *(_QWORD **)v789;
          v721 = *(unsigned int *)(v789 + 8);
          if (v718 >= v719)
            goto LABEL_914;
          do
          {
            v722 = v721 >> 1;
            v723 = v720[3 * (v721 >> 1) + 1];
            LODWORD(v723) = (v723 >> 1) & 3 | *(_DWORD *)((v723 & 0xFFFFFFFFFFFFFFF8) + 24);
            v721 -= (v721 >> 1) + 1;
            v724 = v718 >= v723;
            if (v718 >= v723)
              v725 = v722 + 1;
            else
              v725 = 0;
            v720 += 3 * v725;
            if (!v724)
              v721 = v722;
          }
          while (v721);
LABEL_904:
          if (v720 == &v716[3 * v715]
            || ((*v720 >> 1) & 3 | *(_DWORD *)((*v720 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v714 & 0xFFFFFFFFFFFFFFF8) + 24) | (v714 >> 1) & 3))
          {
            v726 = 0;
          }
          else
          {
            v726 = v720[2];
          }
          sub_1C4774094((llvm::SmallPtrSetImplBase *)v805, v726);
          v2 = a1;
          if (v727)
          {
            v728 = v823;
            if (v823 >= (unint64_t)HIDWORD(v823))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v822, (uint64_t)&v824, v823 + 1, 8);
              v2 = a1;
              v728 = v823;
            }
            *((_QWORD *)v822 + v728) = v726;
            LODWORD(v823) = (_DWORD)v823 + 1;
          }
          v709 += 8;
        }
        v715 = 0;
LABEL_914:
        v720 = &v716[3 * v715];
        goto LABEL_904;
      }
LABEL_890:
      v700 = v823;
    }
    while ((_DWORD)v823);
    if (v822 != &v824)
    {
      free(v822);
      v2 = a1;
    }
    if (v805[1] != v805[0])
    {
      free(v805[1]);
      v2 = a1;
    }
LABEL_17:
    ++v5;
  }
  while (v5 != v6);
LABEL_23:
  if ((*(_DWORD *)(v2 + 92) - 1) >= 2)
    goto LABEL_354;
  v27 = *(_QWORD *)(v2 + 16);
  v28 = *(_QWORD *)(v2 + 80);
  v29 = *(_DWORD *)(**(_QWORD **)(v28 + 16) + 4 * *(unsigned int *)(v28 + 64));
  if ((v29 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v27 + 416)
    || (v30 = *(_QWORD *)(*(_QWORD *)(v27 + 408) + 8 * (v29 & 0x7FFFFFFF))) == 0)
  {
    v30 = sub_1C4851220(*(_QWORD *)(v2 + 16), v29);
    v745 = *(_QWORD *)(v27 + 304);
    v746 = *(_QWORD *)(v27 + 248);
    *(_QWORD *)v745 = v746;
    *(_QWORD *)(v745 + 8) = *(_QWORD *)(v746 + 40);
    *(_OWORD *)(v745 + 16) = *(_OWORD *)(v27 + 288);
    *(_QWORD *)(v745 + 32) = v27 + 312;
    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v745);
    *(_DWORD *)(v745 + 184) = 0;
    v747 = *(_QWORD *)(v27 + 256);
    v75 = *(_BYTE *)(v747 + 16) == 0;
    v748 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v747 + 24) + 16 * (*(_DWORD *)(v30 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                              + 34);
    v750 = !v75 && v748 != 0;
    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v27 + 304), (llvm::LiveInterval *)v30, v750);
    llvm::LiveIntervals::computeDeadValues(v27, v30, 0);
    v28 = *(_QWORD *)(a1 + 80);
  }
  v31 = *(_QWORD *)(v28 + 8);
  v32 = *(unsigned int *)(v31 + 72);
  v822 = &v824;
  HIDWORD(v823) = 8;
  v775 = v31;
  if (v32 >= 9)
  {
    LODWORD(v823) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v822, (uint64_t)&v824, v32, 16);
    v33 = (uint64_t *)v822;
    goto LABEL_28;
  }
  v33 = &v824;
  if ((_DWORD)v32)
  {
LABEL_28:
    bzero(v33, 16 * v32);
    v34 = *(_DWORD *)(v31 + 72);
  }
  else
  {
    v34 = 0;
  }
  LODWORD(v823) = v32;
  v798[0] = v799;
  v798[1] = (void *)0x800000000;
  sub_1C4765AA4((char *)v798, v34, 0);
  v791 = 0;
  v792 = 0;
  v793 = 0;
  v773 = v30;
  v35 = *(unsigned int *)(v30 + 72);
  v36 = a1;
  if ((_DWORD)v35)
  {
    v37 = *(uint64_t **)(v30 + 64);
    v38 = &v37[v35];
    while (2)
    {
      v39 = *v37;
      v40 = *(_QWORD *)(*v37 + 8);
      if (v40 < 8)
        goto LABEL_32;
      v41 = *(_QWORD **)(v36 + 80);
      v42 = v41[1];
      v43 = *(unsigned int *)(v42 + 8);
      v44 = *(_QWORD **)v42;
      if ((_DWORD)v43)
      {
        v45 = v44[3 * v43 - 2];
        v46 = *(_DWORD *)((v40 & 0xFFFFFFFFFFFFFFF8) + 24) | (v40 >> 1) & 3;
        v47 = (v45 >> 1) & 3 | *(_DWORD *)((v45 & 0xFFFFFFFFFFFFFFF8) + 24);
        v48 = v44;
        v49 = v43;
        if (v46 < v47)
        {
          do
          {
            v50 = v49 >> 1;
            v51 = v48[3 * (v49 >> 1) + 1];
            LODWORD(v51) = (v51 >> 1) & 3 | *(_DWORD *)((v51 & 0xFFFFFFFFFFFFFFF8) + 24);
            v49 -= (v49 >> 1) + 1;
            v52 = v46 >= v51;
            if (v46 >= v51)
              v53 = v50 + 1;
            else
              v53 = 0;
            v48 += 3 * v53;
            if (!v52)
              v49 = v50;
          }
          while (v49);
          goto LABEL_42;
        }
      }
      else
      {
        LODWORD(v43) = 0;
      }
      v48 = &v44[3 * v43];
LABEL_42:
      if (v48 == &v44[3 * v43]
        || ((*v48 >> 1) & 3 | *(_DWORD *)((*v48 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v40 & 0xFFFFFFFFFFFFFFF8) + 24) | (v40 >> 1) & 3))
      {
        v54 = 0;
      }
      else
      {
        v54 = (unsigned int *)v48[2];
      }
      v55 = sub_1C477672C((uint64_t)(v41 + 18), (uint64_t)v54);
      v56 = v41[19];
      if (v56 == v41[18])
        v57 = 164;
      else
        v57 = 160;
      v36 = a1;
      if (v55 != (_QWORD *)(v56 + 8 * *(unsigned int *)((char *)v41 + v57)))
        goto LABEL_32;
      v58 = sub_1C499C548(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 288), *(_QWORD *)(v39 + 8));
      v59 = *v54;
      v60 = v822;
      v61 = (uint64_t *)((char *)v822 + 16 * v59);
      v62 = *((_QWORD *)v54 + 1);
      v63 = *(_QWORD *)(v39 + 8);
      if (v63 == v62)
      {
        *v61 = v58;
        v61[1] = v62;
        v36 = a1;
      }
      else
      {
        v64 = *(_DWORD *)(a1 + 416);
        v36 = a1;
        if (v64)
        {
          v65 = *(_QWORD *)(a1 + 400);
          v66 = ~((unint64_t)(37 * v59) << 32) + (37 * v59);
          v67 = (v66 ^ (v66 >> 22)) + ~((v66 ^ (v66 >> 22)) << 13);
          v68 = (9 * (v67 ^ (v67 >> 8))) ^ ((9 * (v67 ^ (v67 >> 8))) >> 15);
          v69 = ((v68 + ~(v68 << 27)) >> 31) ^ (v68 + ~((_DWORD)v68 << 27));
          v70 = v64 - 1;
          v71 = (v64 - 1) & v69;
          v72 = (int *)(v65 + 16 * v71);
          v74 = *v72;
          v73 = v72[1];
          if (v74)
            v75 = 0;
          else
            v75 = (_DWORD)v59 == v73;
          if (v75)
          {
LABEL_58:
            if (*(_QWORD *)(v65 + 16 * v71 + 8) > 7uLL)
              goto LABEL_32;
          }
          else
          {
            v90 = 1;
            while (v74 != -1 || v73 != -1)
            {
              v655 = v71 + v90++;
              v71 = v655 & v70;
              v656 = (int *)(v65 + 16 * v71);
              v74 = *v656;
              v73 = v656[1];
              if (v74)
                v657 = 0;
              else
                v657 = (_DWORD)v59 == v73;
              if (v657)
                goto LABEL_58;
            }
          }
        }
        v76 = *v61;
        if (*v61)
        {
          if (v76 == v58)
          {
            v91 = (char *)v822 + 16 * v59;
            v94 = *((_QWORD *)v91 + 1);
            v92 = v91 + 8;
            v93 = v94;
            if (v94 < 8
              || (*(_DWORD *)((v63 & 0xFFFFFFFFFFFFFFF8) + 24) | (v63 >> 1) & 3) < (*(_DWORD *)((v93 & 0xFFFFFFFFFFFFFFF8) + 24) | (v93 >> 1) & 3))
            {
              *v92 = v63;
            }
            goto LABEL_32;
          }
          v77 = *(_QWORD *)(a1 + 40);
          v783 = v58;
          llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v77);
          NearestCommonDominator = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator(*(_QWORD *)(v77 + 1320), v76, v783);
          if (NearestCommonDominator == v783)
          {
            v79 = *(_QWORD *)(v39 + 8);
            NearestCommonDominator = v783;
            v36 = a1;
LABEL_64:
            *v61 = NearestCommonDominator;
            v60[2 * v59 + 1] = v79;
          }
          else
          {
            v36 = a1;
            if (NearestCommonDominator != *v61)
            {
              v79 = 0;
              goto LABEL_64;
            }
          }
          v80 = *(_QWORD *)(*(_QWORD *)(v36 + 64) + 248);
          if (v80)
          {
            v81 = *(_DWORD *)(v80 + 176);
            if (v81)
            {
              v82 = *(_QWORD *)(v80 + 160);
              v83 = v81 - 1;
              v84 = (v81 - 1) & ((v783 >> 4) ^ (v783 >> 9));
              v85 = *(_QWORD *)(v82 + 16 * v84);
              if (v85 == v783)
              {
LABEL_68:
                v86 = *(unsigned int *)(v82 + 16 * v84 + 8);
                if (v86 != 0xFFFFFFFFLL)
                {
                  v80 = *(_QWORD *)(*(_QWORD *)(v80 + 8) + 24 * v86 + 16);
                  goto LABEL_70;
                }
              }
              else
              {
                v95 = 1;
                while (v85 != -4096)
                {
                  v96 = v84 + v95++;
                  v84 = v96 & v83;
                  v85 = *(_QWORD *)(v82 + 16 * v84);
                  if (v85 == v783)
                    goto LABEL_68;
                }
              }
            }
            v80 = 0;
          }
LABEL_70:
          v87 = *v54;
          v88 = *((_QWORD *)v798[0] + v87);
          v52 = __CFADD__(v80, v88);
          v89 = v80 + v88;
          if (v52)
            v89 = -1;
          *((_QWORD *)v798[0] + v87) = v89;
          goto LABEL_32;
        }
        *v61 = v58;
        v60[2 * v59 + 1] = v63;
      }
LABEL_32:
      if (++v37 == v38)
        break;
      continue;
    }
  }
  v97 = v775;
  v98 = *(unsigned int *)(v775 + 72);
  if (!(_DWORD)v98)
    goto LABEL_162;
  v99 = 0;
  v778 = *(unsigned int *)(v775 + 72);
  while (2)
  {
    v100 = (char *)v822 + 16 * v99;
    if (!*(_QWORD *)v100 || *((_QWORD *)v100 + 1) > 7uLL)
      goto LABEL_92;
    v101 = *(unint64_t **)(*(_QWORD *)(v97 + 64) + 8 * v99);
    v102 = v36;
    v103 = sub_1C499C548(*(_QWORD *)(*(_QWORD *)(v36 + 16) + 288), v101[1]);
    v104 = (unsigned int *)v103;
    v105 = *(unsigned int **)v100;
    if (*(_QWORD *)v100 == v103)
      goto LABEL_129;
    v106 = *(_QWORD *)(*(_QWORD *)v102 + 24);
    v107 = *(_DWORD *)(v106 + 264);
    if (v107)
    {
      v108 = *(_QWORD *)(v106 + 248);
      v109 = v107 - 1;
      v110 = (v107 - 1) & ((v103 >> 4) ^ (v103 >> 9));
      v111 = *(_QWORD *)(v108 + 16 * v110);
      if (v111 != v103)
      {
        v112 = 1;
        while (v111 != -4096)
        {
          v113 = v110 + v112++;
          v110 = v113 & v109;
          v111 = *(_QWORD *)(v108 + 16 * v110);
          if (v111 == v103)
            goto LABEL_100;
        }
        goto LABEL_101;
      }
LABEL_100:
      v784 = *(_QWORD *)(v108 + 16 * v110 + 8);
    }
    else
    {
LABEL_101:
      v784 = 0;
    }
    v114 = sub_1C49FA70C(*(_QWORD *)(a1 + 40), v103);
    v115 = *(_DWORD *)(v106 + 264);
    if (!v115)
    {
      v104 = v105;
      goto LABEL_129;
    }
    v116 = v114;
    v117 = -1;
    v104 = v105;
    while (2)
    {
      v118 = *(_QWORD *)(v106 + 248);
      v119 = v115 - 1;
      v120 = ((v104 >> 4) ^ (v104 >> 9)) & (v115 - 1);
      v121 = *(unsigned int **)(v118 + 16 * v120);
      if (v104 == v121)
      {
LABEL_108:
        v124 = *(_QWORD *)(v118 + 16 * v120 + 8);
        if (v124)
          v125 = v124 == v784;
        else
          v125 = 1;
        if (v125)
          goto LABEL_129;
        v126 = 0;
        v127 = (_QWORD *)v124;
        do
        {
          v127 = (_QWORD *)*v127;
          ++v126;
        }
        while (v127);
        if (v126 < v117)
        {
          v105 = v104;
          v117 = v126;
        }
        v128 = *(_QWORD *)(sub_1C49FA70C(*(_QWORD *)(a1 + 40), **(_QWORD **)(v124 + 32)) + 8);
        if (!v128)
        {
LABEL_128:
          v104 = v105;
          v97 = v775;
          v98 = v778;
          goto LABEL_129;
        }
        v129 = *(_QWORD *)(a1 + 40);
        llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v129);
        if (v128 == v116)
          goto LABEL_125;
        if (!v116)
          goto LABEL_128;
        if (*(_QWORD *)(v128 + 8) == v116)
          goto LABEL_125;
        if (*(_QWORD *)(v116 + 8) == v128)
          goto LABEL_128;
        v130 = *(_DWORD *)(v116 + 16);
        if (v130 >= *(_DWORD *)(v128 + 16))
          goto LABEL_128;
        v131 = *(_QWORD *)(v129 + 1320);
        if (!*(_BYTE *)(v131 + 64))
        {
          v654 = *(_DWORD *)(v131 + 68) + 1;
          *(_DWORD *)(v131 + 68) = v654;
          v160 = v128;
          if (v654 <= 0x20)
          {
            do
            {
              v159 = v160;
              v160 = *(_QWORD *)(v160 + 8);
            }
            while (v160 && *(_DWORD *)(v160 + 16) >= v130);
            if (v159 != v116)
              goto LABEL_128;
            goto LABEL_125;
          }
          llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::updateDFSNumbers(v131);
        }
        if (*(_DWORD *)(v128 + 72) < *(_DWORD *)(v116 + 72) || *(_DWORD *)(v128 + 76) > *(_DWORD *)(v116 + 76))
          goto LABEL_128;
LABEL_125:
        v104 = *(unsigned int **)v128;
        v115 = *(_DWORD *)(v106 + 264);
        v97 = v775;
        v98 = v778;
        if (!v115)
          goto LABEL_129;
        continue;
      }
      break;
    }
    v122 = 1;
    while (v121 != (unsigned int *)-4096)
    {
      v123 = v120 + v122++;
      v120 = v123 & v119;
      v121 = *(unsigned int **)(v118 + 16 * v120);
      if (v104 == v121)
        goto LABEL_108;
    }
LABEL_129:
    *(_QWORD *)v100 = v104;
    if (*(_DWORD *)(a1 + 92) != 2)
      goto LABEL_144;
    v132 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 248);
    if (!v132)
      goto LABEL_144;
    v133 = *(_DWORD *)(v132 + 176);
    if (!v133)
      goto LABEL_144;
    v134 = *(_QWORD *)(v132 + 160);
    v135 = v133 - 1;
    v136 = (v133 - 1) & ((v104 >> 4) ^ (v104 >> 9));
    v137 = *(unsigned int **)(v134 + 16 * v136);
    if (v137 != v104)
    {
      v146 = 1;
      while (v137 != (unsigned int *)-4096)
      {
        v147 = v136 + v146++;
        v136 = v147 & v135;
        v137 = *(unsigned int **)(v134 + 16 * v136);
        if (v137 == v104)
          goto LABEL_133;
      }
LABEL_144:
      v148 = v104[6];
      v149 = *(_QWORD *)(*(_QWORD *)a1 + 56);
      v150 = *(_QWORD *)(v149 + 16 * v148);
      if (v150 < 8 || *(_QWORD *)(v149 + 16 * v148 + 8) >= 8uLL)
        v150 = sub_1C528C724((_QWORD *)(*(_QWORD *)a1 + 48), *(_QWORD *)(*(_QWORD *)a1 + 40), (llvm::MachineBasicBlock *)v104);
      if (((v150 >> 1) & 3 | *(_DWORD *)((v150 & 0xFFFFFFFFFFFFFFF8) + 24)) > ((v101[1] >> 1) & 3 | *(_DWORD *)((v101[1] & 0xFFFFFFFFFFFFFFF8) + 24)))
      {
        v151 = *(_QWORD *)v100;
        v152 = (unint64_t *)sub_1C528CD90((_QWORD *)(*(_QWORD *)a1 + 48), *(_QWORD *)(*(_QWORD *)a1 + 40), *(llvm::MachineBasicBlock **)v100);
        v153 = v151;
        v98 = v778;
        v154 = sub_1C528E25C((uint64_t *)a1, 0, v101, v150, v153, v152);
        v36 = a1;
        *((_QWORD *)v100 + 1) = *(_QWORD *)(v154 + 8);
        goto LABEL_92;
      }
      v36 = a1;
      if (v793)
      {
        v155 = (37 * *(_DWORD *)v101) & (v793 - 1);
        v142 = (_DWORD *)(v791 + 4 * v155);
        v156 = *v142;
        if (*(_DWORD *)v101 == *v142)
          goto LABEL_92;
        v144 = 0;
        v157 = 1;
        while (v156 != -1)
        {
          if (v144)
            v670 = 0;
          else
            v670 = v156 == -2;
          if (v670)
            v144 = v142;
          v671 = v155 + v157++;
          v155 = v671 & (v793 - 1);
          v142 = (_DWORD *)(v791 + 4 * v155);
          v156 = *v142;
          if (*(_DWORD *)v101 == *v142)
            goto LABEL_92;
        }
LABEL_153:
        if (v144)
          v158 = v144;
        else
          v158 = v142;
      }
      else
      {
LABEL_157:
        v158 = 0;
      }
      *sub_1C4A0C948((uint64_t)&v791, (uint64_t)v101, v101, v158) = *(_DWORD *)v101;
      v36 = a1;
      goto LABEL_92;
    }
LABEL_133:
    v138 = *(unsigned int *)(v134 + 16 * v136 + 8);
    if (v138 == 0xFFFFFFFFLL)
      goto LABEL_144;
    v139 = *(_QWORD *)(*(_QWORD *)(v132 + 8) + 24 * v138 + 16);
    v140 = *(unsigned int *)v101;
    if (v139 <= *((_QWORD *)v798[0] + v140))
      goto LABEL_144;
    if (!v793)
      goto LABEL_157;
    v36 = a1;
    v141 = (v793 - 1) & (37 * v140);
    v142 = (_DWORD *)(v791 + 4 * v141);
    v143 = *v142;
    if ((_DWORD)v140 != *v142)
    {
      v144 = 0;
      v145 = 1;
      while (v143 != -1)
      {
        if (v144)
          v680 = 0;
        else
          v680 = v143 == -2;
        if (v680)
          v144 = v142;
        v681 = v141 + v145++;
        v141 = v681 & (v793 - 1);
        v142 = (_DWORD *)(v791 + 4 * v141);
        v143 = *v142;
        if ((_DWORD)v140 == *v142)
          goto LABEL_92;
      }
      goto LABEL_153;
    }
LABEL_92:
    if (++v99 != v98)
      continue;
    break;
  }
LABEL_162:
  v795 = v797;
  v796 = 0x800000000;
  v161 = *(unsigned int *)(v773 + 72);
  if ((_DWORD)v161)
  {
    v162 = *(uint64_t **)(v773 + 64);
    v163 = &v162[v161];
    while (2)
    {
      v164 = *v162;
      v165 = *(_QWORD *)(*v162 + 8);
      if (v165 < 8)
        goto LABEL_165;
      v166 = *(_QWORD *)(*(_QWORD *)(v36 + 80) + 8);
      v167 = *(unsigned int *)(v166 + 8);
      v168 = *(_QWORD **)v166;
      if ((_DWORD)v167)
      {
        v169 = v168[3 * v167 - 2];
        v170 = *(_DWORD *)((v165 & 0xFFFFFFFFFFFFFFF8) + 24) | (v165 >> 1) & 3;
        v171 = (v169 >> 1) & 3 | *(_DWORD *)((v169 & 0xFFFFFFFFFFFFFFF8) + 24);
        v172 = v168;
        v173 = v167;
        if (v170 < v171)
        {
          do
          {
            v174 = v173 >> 1;
            v175 = v172[3 * (v173 >> 1) + 1];
            LODWORD(v175) = (v175 >> 1) & 3 | *(_DWORD *)((v175 & 0xFFFFFFFFFFFFFFF8) + 24);
            v173 -= (v173 >> 1) + 1;
            v176 = v170 >= v175;
            if (v170 >= v175)
              v177 = v174 + 1;
            else
              v177 = 0;
            v172 += 3 * v177;
            if (!v176)
              v173 = v174;
          }
          while (v173);
LABEL_175:
          if (v172 == &v168[3 * v167]
            || ((*v172 >> 1) & 3 | *(_DWORD *)((*v172 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v165 & 0xFFFFFFFFFFFFFFF8) + 24) | (v165 >> 1) & 3))
          {
            v178 = 0;
          }
          else
          {
            v178 = (unsigned int *)v172[2];
          }
          v179 = *v178;
          if (*((_QWORD *)v822 + 2 * v179) && *((_QWORD *)v822 + 2 * v179 + 1) != v165)
          {
            if (!v793)
              goto LABEL_184;
            v180 = (v793 - 1) & (37 * v179);
            v181 = *(_DWORD *)(v791 + 4 * v180);
            if ((_DWORD)v179 != v181)
            {
              v740 = 1;
              while (v181 != -1)
              {
                v741 = v180 + v740++;
                v180 = v741 & (v793 - 1);
                v181 = *(_DWORD *)(v791 + 4 * v180);
                if ((_DWORD)v179 == v181)
                  goto LABEL_165;
              }
LABEL_184:
              v182 = v796;
              if (v796 >= (unint64_t)HIDWORD(v796))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v795, (uint64_t)v797, v796 + 1, 8);
                v182 = v796;
              }
              *((_QWORD *)v795 + v182) = v164;
              LODWORD(v796) = v796 + 1;
              sub_1C528E0A8(a1, 0, *v178);
              v36 = a1;
            }
          }
LABEL_165:
          if (++v162 == v163)
            goto LABEL_189;
          continue;
        }
      }
      else
      {
        LODWORD(v167) = 0;
      }
      break;
    }
    v172 = &v168[3 * v167];
    goto LABEL_175;
  }
LABEL_189:
  v183 = *(_QWORD *)(v36 + 16);
  v184 = *(_QWORD *)(v36 + 80);
  if (*(_DWORD *)(v36 + 92) == 2 && (_DWORD)v792 != 0)
  {
    v186 = *(_DWORD *)(**(_QWORD **)(v184 + 16) + 4 * *(unsigned int *)(v184 + 64));
    if ((v186 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v183 + 416)
      || (v187 = *(_QWORD *)(*(_QWORD *)(v183 + 408) + 8 * (v186 & 0x7FFFFFFF))) == 0)
    {
      v187 = sub_1C4851220(*(_QWORD *)(v36 + 16), v186);
      v757 = *(_QWORD *)(v183 + 304);
      v758 = *(_QWORD *)(v183 + 248);
      *(_QWORD *)v757 = v758;
      *(_QWORD *)(v757 + 8) = *(_QWORD *)(v758 + 40);
      *(_OWORD *)(v757 + 16) = *(_OWORD *)(v183 + 288);
      *(_QWORD *)(v757 + 32) = v183 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v757);
      *(_DWORD *)(v757 + 184) = 0;
      v759 = *(_QWORD *)(v183 + 256);
      v75 = *(_BYTE *)(v759 + 16) == 0;
      v760 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v759 + 24) + 16 * (*(_DWORD *)(v187 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                + 34);
      v762 = !v75 && v760 != 0;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v183 + 304), (llvm::LiveInterval *)v187, v762);
      llvm::LiveIntervals::computeDeadValues(v183, v187, 0);
      v184 = *(_QWORD *)(a1 + 80);
    }
    v776 = *(_QWORD *)(v184 + 8);
    v188 = *(unsigned int *)(v776 + 72);
    v189 = v188;
    v800 = v804;
    __src = v804;
    v802 = 8;
    v803 = 0;
    v805[0] = &v806;
    v805[1] = (void *)0x800000000;
    if (v188 < 9)
    {
      if ((_DWORD)v188)
      {
        v198 = 0;
        v199 = &v809;
        do
        {
          *(v199 - 4) = (uint64_t)v199;
          v200 = __src;
          if (__src == v800)
          {
            *(v199 - 3) = (uint64_t)v199;
            v201 = v199;
            v202 = v200;
          }
          else
          {
            v206 = v802;
            v201 = malloc_type_malloc(8 * v802, 0x4065EBACuLL);
            if (!v201 && (v206 || (v201 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_997:
              llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
            *(v199 - 3) = (uint64_t)v201;
            v202 = v800;
            v200 = __src;
            v198 = HIDWORD(v802);
          }
          v203 = v802;
          *((_DWORD *)v199 - 4) = v802;
          if (v200 == v202)
            v204 = v198;
          else
            v204 = v203;
          if (v204)
          {
            memmove(v201, v200, 8 * v204);
            v198 = HIDWORD(v802);
          }
          v205 = v803;
          *((_DWORD *)v199 - 3) = v198;
          *((_DWORD *)v199 - 2) = v205;
          v199 += 12;
          --v188;
        }
        while (v188);
      }
    }
    else
    {
      v794 = 0;
      v190 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v805, v188, 96, &v794);
      v191 = 0;
      do
      {
        v192 = &v190[v191 + 32];
        *(_QWORD *)&v190[v191] = v192;
        v193 = __src;
        if (__src == v800)
        {
          *(_QWORD *)&v190[v191 + 8] = v192;
        }
        else
        {
          v197 = v802;
          v192 = (char *)malloc_type_malloc(8 * v802, 0x4065EBACuLL);
          if (!v192)
          {
            if (v197)
              goto LABEL_997;
            v192 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL);
            if (!v192)
              goto LABEL_997;
          }
          *(_QWORD *)&v190[v191 + 8] = v192;
          v193 = v800;
        }
        v194 = &v190[v191];
        *(_DWORD *)&v190[v191 + 16] = v802;
        v195 = HIDWORD(v802);
        if (__src == v193)
          v196 = HIDWORD(v802);
        else
          v196 = v802;
        if (v196)
        {
          memmove(v192, __src, 8 * v196);
          v195 = HIDWORD(v802);
        }
        *((_DWORD *)v194 + 5) = v195;
        *((_DWORD *)v194 + 6) = v803;
        v191 += 96;
      }
      while (96 * v188 != v191);
      v207 = (char *)v805[0];
      if (LODWORD(v805[1]))
      {
        v764 = 96 * LODWORD(v805[1]);
        do
        {
          v765 = *(void **)&v207[v764 - 88];
          if (v765 != *(void **)&v207[v764 - 96])
            free(v765);
          v764 -= 96;
        }
        while (v764);
        v207 = (char *)v805[0];
      }
      v208 = v794;
      if (v207 != (char *)&v806)
        free(v207);
      v805[0] = v190;
      HIDWORD(v805[1]) = v208;
    }
    LODWORD(v805[1]) = v189;
    if (__src != v800)
      free(__src);
    v800 = v804;
    __src = v804;
    v802 = 8;
    v803 = 0;
    v209 = *(unsigned int *)(v187 + 72);
    v210 = a1;
    if ((_DWORD)v209)
    {
      v211 = *(uint64_t **)(v187 + 64);
      v212 = &v211[v209];
      while (1)
      {
        v213 = *(_QWORD *)(*v211 + 8);
        if (v213 >= 8)
          break;
LABEL_244:
        if (++v211 == v212)
          goto LABEL_248;
      }
      v214 = *(uint64_t **)(*(_QWORD *)(v210 + 80) + 8);
      v215 = *((unsigned int *)v214 + 2);
      v216 = *v214;
      if ((_DWORD)v215)
      {
        v217 = *(_QWORD *)(v216 + 24 * v215 - 16);
        v218 = *(_DWORD *)((v213 & 0xFFFFFFFFFFFFFFF8) + 24) | (v213 >> 1) & 3;
        v219 = (v217 >> 1) & 3 | *(_DWORD *)((v217 & 0xFFFFFFFFFFFFFFF8) + 24);
        v220 = v216;
        v221 = v215;
        if (v218 < v219)
        {
          do
          {
            v222 = v221 >> 1;
            v223 = *(_QWORD *)(v220 + 24 * (v221 >> 1) + 8);
            LODWORD(v223) = (v223 >> 1) & 3 | *(_DWORD *)((v223 & 0xFFFFFFFFFFFFFFF8) + 24);
            v221 -= (v221 >> 1) + 1;
            v224 = v218 >= v223;
            if (v218 >= v223)
              v225 = v222 + 1;
            else
              v225 = 0;
            v220 += 24 * v225;
            if (!v224)
              v221 = v222;
          }
          while (v221);
          goto LABEL_240;
        }
      }
      else
      {
        LODWORD(v215) = 0;
      }
      v220 = v216 + 24 * v215;
LABEL_240:
      v226 = v216 + 24 * v215;
      if (v220 == v226
        || ((*(_QWORD *)v220 >> 1) & 3 | *(_DWORD *)((*(_QWORD *)v220 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v213 & 0xFFFFFFFFFFFFFFF8) + 24) | (v213 >> 1) & 3))
      {
        v220 = v226;
      }
      sub_1C4774094((llvm::SmallPtrSetImplBase *)((char *)v805[0] + 96 * **(unsigned int **)(v220 + 16)), *v211);
      v210 = a1;
      goto LABEL_244;
    }
LABEL_248:
    v779 = *(unsigned int *)(v776 + 72);
    if ((_DWORD)v779)
    {
      v227 = 0;
      while (2)
      {
        if (v793)
        {
          v228 = *(unsigned int **)(*(_QWORD *)(v776 + 64) + 8 * v227);
          v229 = *v228;
          v230 = (37 * v229) & (v793 - 1);
          v231 = *(_DWORD *)(v791 + 4 * v230);
          if ((_DWORD)v229 != v231)
          {
            v678 = 1;
            while (v231 != -1)
            {
              v679 = v230 + v678++;
              v230 = v679 & (v793 - 1);
              v231 = *(_DWORD *)(v791 + 4 * v230);
              if ((_DWORD)v229 == v231)
                goto LABEL_252;
            }
            goto LABEL_323;
          }
LABEL_252:
          v232 = (char *)v805[0];
          v233 = (uint64_t **)((char *)v805[0] + 96 * v229);
          v235 = *v233;
          v234 = v233[1];
          v236 = 20;
          if (v234 != *v233)
            v236 = 16;
          v237 = *(unsigned int *)((char *)v233 + v236);
          v238 = v234;
          v785 = v227;
          if ((_DWORD)v237)
          {
            v239 = 8 * v237;
            v238 = v234;
            while ((unint64_t)*v238 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v238;
              v239 -= 8;
              if (!v239)
                goto LABEL_258;
            }
          }
          v249 = &v234[v237];
          if (v238 != v249)
          {
            while (2)
            {
              v250 = (unint64_t *)(v238 + 1);
              v251 = (unint64_t *)(v238 + 1);
              while (v251 != (unint64_t *)v249)
              {
                v252 = *v251++;
                if (v252 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v253 = (uint64_t *)(v251 - 1);
                  goto LABEL_277;
                }
              }
              v253 = v249;
LABEL_277:
              v254 = &v232[96 * v229];
LABEL_278:
              v255 = 20;
              if (v234 != v235)
                v255 = 16;
              if (v253 == &v234[*(unsigned int *)&v254[v255]])
              {
                while (v250 != (unint64_t *)v249)
                {
                  v268 = *v250++;
                  if (v268 <= 0xFFFFFFFFFFFFFFFDLL)
                  {
                    v238 = (uint64_t *)(v250 - 1);
                    goto LABEL_308;
                  }
                }
                v238 = v249;
LABEL_308:
                v269 = 20;
                if (v234 != v235)
                  v269 = 16;
                if (v238 == &v234[*(unsigned int *)&v232[96 * v229 + v269]])
                  goto LABEL_258;
                continue;
              }
              break;
            }
            v256 = sub_1C477672C((uint64_t)&v800, *v238);
            if (__src == v800)
              v257 = (unint64_t *)((char *)&v802 + 4);
            else
              v257 = &v802;
            if (v256 == (_QWORD *)((char *)__src + 8 * *(unsigned int *)v257))
            {
              v260 = sub_1C477672C((uint64_t)&v800, *v253);
              v261 = __src == v800 ? (unint64_t *)((char *)&v802 + 4) : &v802;
              if (v260 == (_QWORD *)((char *)__src + 8 * *(unsigned int *)v261))
              {
                v262 = sub_1C499C548(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 288), *(_QWORD *)(*v238 + 8));
                v263 = sub_1C499C548(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 288), *(_QWORD *)(*v253 + 8));
                if (v262 == v263)
                {
                  if (((*(_QWORD *)(*v238 + 8) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(*v238 + 8) & 0xFFFFFFFFFFFFFFF8)
                                                                                    + 24)) >= (*(_DWORD *)((*(_QWORD *)(*v253 + 8) & 0xFFFFFFFFFFFFFFF8) + 24) | (*(_QWORD *)(*v253 + 8) >> 1) & 3))
                    v266 = *v238;
                  else
                    v266 = *v253;
LABEL_301:
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v800, v266);
                }
                else
                {
                  v264 = v263;
                  v265 = *(_QWORD *)(a1 + 40);
                  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v265);
                  if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v265 + 1320), v262, v264))
                  {
                    v266 = *v253;
                    goto LABEL_301;
                  }
                  v267 = *(_QWORD *)(a1 + 40);
                  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v267);
                  if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v267 + 1320), v264, v262))
                  {
                    v266 = *v238;
                    goto LABEL_301;
                  }
                }
              }
            }
            v258 = (unint64_t *)(v253 + 1);
            while (v258 != (unint64_t *)v249)
            {
              v259 = *v258++;
              if (v259 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v253 = (uint64_t *)(v258 - 1);
                goto LABEL_290;
              }
            }
            v253 = v249;
LABEL_290:
            v229 = *v228;
            v232 = (char *)v805[0];
            v254 = (char *)v805[0] + 96 * v229;
            v235 = *(uint64_t **)v254;
            v234 = (uint64_t *)*((_QWORD *)v254 + 1);
            goto LABEL_278;
          }
LABEL_258:
          v227 = v785;
          if (HIDWORD(v802) != v803)
          {
            sub_1C528E0A8(a1, 0, v229);
            v240 = (unint64_t *)__src;
            if (__src == v800)
              v241 = (unint64_t *)((char *)&v802 + 4);
            else
              v241 = &v802;
            v242 = *(unsigned int *)v241;
            v243 = (unint64_t *)((char *)__src + 8 * v242);
            if ((_DWORD)v242)
            {
              v244 = 8 * v242;
              while (*v240 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v240;
                v244 -= 8;
                if (!v244)
                  goto LABEL_332;
              }
            }
            if (v240 == v243)
            {
LABEL_332:
              v245 = 0;
              v270 = 1;
              v240 = v243;
            }
            else
            {
              v245 = 0;
              v246 = v240;
LABEL_267:
              ++v245;
              v247 = v246 + 1;
              while (v247 != v243)
              {
                v248 = *v247++;
                if (v248 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v246 = v247 - 1;
                  goto LABEL_267;
                }
              }
              v270 = 0;
            }
            v271 = v796;
            v272 = v245 + v796;
            if (v272 > HIDWORD(v796))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v795, (uint64_t)v797, v272, 8);
              v271 = v796;
            }
            if ((v270 & 1) == 0)
            {
              v273 = (unint64_t *)((char *)v795 + 8 * v271);
              v274 = *v240;
LABEL_317:
              *v273 = v274;
              v275 = v240 + 1;
              while (v275 != v243)
              {
                v276 = *v275++;
                v274 = v276;
                if (v276 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  ++v273;
                  v240 = v275 - 1;
                  goto LABEL_317;
                }
              }
            }
            LODWORD(v796) = v271 + v245;
            if (__src == v800)
            {
LABEL_322:
              v803 = 0;
              HIDWORD(v802) = 0;
            }
            else
            {
              if (v802 < 0x21 || 4 * (HIDWORD(v802) - v803) >= v802)
              {
                memset(__src, 255, 8 * v802);
                goto LABEL_322;
              }
              free(__src);
              v667 = 1 << (33 - __clz(HIDWORD(v802) - v803 - 1));
              v398 = (HIDWORD(v802) - v803) > 0x10;
              v803 = 0;
              if (v398)
                v668 = v667;
              else
                v668 = 32;
              v802 = v668;
              v669 = malloc_type_malloc(8 * v668, 0x4065EBACuLL);
              if (!v669)
                goto LABEL_997;
              __src = v669;
              memset(v669, 255, 8 * v802);
            }
          }
        }
LABEL_323:
        if (++v227 == v779)
          break;
        continue;
      }
    }
    if (__src != v800)
      free(__src);
    v278 = (char *)v805[0];
    v36 = a1;
    if (LODWORD(v805[1]))
    {
      v279 = 96 * LODWORD(v805[1]);
      do
      {
        v280 = *(void **)&v278[v279 - 88];
        if (v280 != *(void **)&v278[v279 - 96])
        {
          free(v280);
          v36 = a1;
        }
        v279 -= 96;
      }
      while (v279);
      v278 = (char *)v805[0];
    }
    if (v278 != (char *)&v806)
    {
      free(v278);
      v36 = a1;
    }
    v183 = *(_QWORD *)(v36 + 16);
    v184 = *(_QWORD *)(v36 + 80);
  }
  v281 = *(_DWORD *)(**(_QWORD **)(v184 + 16) + 4 * *(unsigned int *)(v184 + 64));
  if ((v281 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v183 + 416)
    || (v282 = *(llvm::LiveInterval **)(*(_QWORD *)(v183 + 408) + 8 * (v281 & 0x7FFFFFFF))) == 0)
  {
    v282 = (llvm::LiveInterval *)sub_1C4851220(v183, v281);
    v751 = *(_QWORD *)(v183 + 304);
    v752 = *(_QWORD *)(v183 + 248);
    *(_QWORD *)v751 = v752;
    *(_QWORD *)(v751 + 8) = *(_QWORD *)(v752 + 40);
    *(_OWORD *)(v751 + 16) = *(_OWORD *)(v183 + 288);
    *(_QWORD *)(v751 + 32) = v183 + 312;
    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v751);
    *(_DWORD *)(v751 + 184) = 0;
    v753 = *(_QWORD *)(v183 + 256);
    v75 = *(_BYTE *)(v753 + 16) == 0;
    v754 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v753 + 24) + 16 * (*((_DWORD *)v282 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                              + 34);
    v756 = !v75 && v754 != 0;
    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v183 + 304), v282, v756);
    llvm::LiveIntervals::computeDeadValues(v183, (uint64_t)v282, 0);
    v36 = a1;
  }
  *(_QWORD *)&v806 = 0x400000000;
  v805[0] = (void *)(v36 + 200);
  v805[1] = (char *)&v806 + 8;
  if ((_DWORD)v796)
  {
    v596 = (char *)v795;
    v597 = (char *)v795 + 8 * v796;
    while (1)
    {
      v598 = *(_QWORD *)(*(_QWORD *)v596 + 8);
      if (v598 < 8)
        v599 = 0;
      else
        v599 = *(_QWORD *)((v598 & 0xFFFFFFFFFFFFFFF8) + 16);
      v600 = *(_QWORD *)(*(_QWORD *)(v599 + 24) + 56);
      if (v599 == v600)
      {
        v605 = 1;
        v601 = v599;
      }
      else
      {
        v601 = v599;
        do
        {
          v601 = *(_QWORD *)v601 & 0xFFFFFFFFFFFFFFF8;
          if (!v601 || (*(_BYTE *)v601 & 4) == 0)
          {
            while ((*(_WORD *)(v601 + 44) & 4) != 0)
              v601 = *(_QWORD *)v601 & 0xFFFFFFFFFFFFFFF8;
          }
          v602 = **(unsigned __int16 **)(v601 + 16);
          v398 = v602 > 0x17;
          v603 = (1 << v602) & 0x83E000;
          if (v398 || v603 == 0)
          {
            v605 = 0;
            goto LABEL_754;
          }
          v605 = 1;
        }
        while (v601 != v600);
        v601 = *(_QWORD *)(*(_QWORD *)(v599 + 24) + 56);
      }
LABEL_754:
      llvm::LiveIntervals::removeVRegDefAt(*(_QWORD *)(v36 + 16), (uint64_t)v282, *(_QWORD *)(*(_QWORD *)v596 + 8));
      v606 = *(int32x2_t **)(*(_QWORD *)(a1 + 16) + 288);
      v607 = v606[46];
      v608 = v606[48].u32[0];
      if ((_DWORD)v608)
      {
        LODWORD(v609) = (v608 - 1) & ((v599 >> 4) ^ (v599 >> 9));
        v610 = (uint64_t *)(*(_QWORD *)&v607 + 16 * v609);
        v611 = *v610;
        if (*v610 == v599)
          goto LABEL_756;
        v635 = 1;
        while (v611 != -4096)
        {
          v636 = v609 + v635++;
          v609 = v636 & (v608 - 1);
          v611 = *(_QWORD *)(*(_QWORD *)&v607 + 16 * v609);
          if (v611 == v599)
          {
            v610 = (uint64_t *)(*(_QWORD *)&v607 + 16 * v609);
            goto LABEL_756;
          }
        }
      }
      v610 = (uint64_t *)(*(_QWORD *)&v607 + 16 * v608);
LABEL_756:
      if (v610 != (uint64_t *)(*(_QWORD *)&v607 + 16 * v608))
      {
        v612 = v610[1] & 0xFFFFFFFFFFFFFFF8;
        *v610 = -8192;
        v606[47] = vadd_s32(v606[47], (int32x2_t)0x1FFFFFFFFLL);
        *(_QWORD *)(v612 + 16) = 0;
      }
      v613 = v599;
      if ((*(_BYTE *)v599 & 4) == 0)
      {
        v613 = v599;
        if ((*(_WORD *)(v599 + 44) & 8) != 0)
        {
          v613 = v599;
          do
            v613 = *(_QWORD *)(v613 + 8);
          while ((*(_WORD *)(v613 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v599 + 24) + 40, v599, *(_QWORD *)(v613 + 8));
      v614 = (v598 >> 1) & 3;
      v615 = v598 & 0xFFFFFFFFFFFFFFF8;
      if (v614)
        v616 = v615 | (2 * (v614 - 1));
      else
        v616 = *(_QWORD *)v615 | 6;
      sub_1C528F970(v805, v616);
      if (!(_DWORD)v806)
        goto LABEL_779;
      if (*((_DWORD *)v805[1] + 3) >= *((_DWORD *)v805[1] + 2))
        goto LABEL_779;
      v617 = (char *)v805[1] + 16 * v806;
      v618 = *((_QWORD *)v617 - 2);
      v619 = *((unsigned int *)v617 - 1);
      if (((*(_QWORD *)(v618 + 16 * v619) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v618 + 16 * v619) & 0xFFFFFFFFFFFFFFF8)
                                                                               + 24)) >= (*(_DWORD *)(v615 + 24) | v614)
        || *(_QWORD *)(v618 + 16 * v619 + 8) != v598)
      {
        goto LABEL_779;
      }
      v620 = *(_DWORD *)(v618 + 4 * v619 + 144);
      v621 = a1;
      if ((v605 & 1) != 0)
      {
LABEL_767:
        v622 = *(uint64_t **)(*(_QWORD *)(v621 + 80) + 8);
        v623 = *((unsigned int *)v622 + 2);
        v624 = *v622;
        if ((_DWORD)v623)
        {
          v625 = *(_QWORD *)(v624 + 24 * v623 - 16);
          v626 = *(_DWORD *)(v615 + 24) | v614;
          v627 = (v625 >> 1) & 3 | *(_DWORD *)((v625 & 0xFFFFFFFFFFFFFFF8) + 24);
          v628 = v624;
          v629 = v623;
          if (v626 < v627)
          {
            do
            {
              v630 = v629 >> 1;
              v631 = *(_QWORD *)(v628 + 24 * (v629 >> 1) + 8);
              LODWORD(v631) = (v631 >> 1) & 3 | *(_DWORD *)((v631 & 0xFFFFFFFFFFFFFFF8) + 24);
              v629 -= (v629 >> 1) + 1;
              v632 = v626 >= v631;
              if (v626 >= v631)
                v633 = v630 + 1;
              else
                v633 = 0;
              v628 += 24 * v633;
              if (!v632)
                v629 = v630;
            }
            while (v629);
            goto LABEL_775;
          }
        }
        else
        {
          LODWORD(v623) = 0;
        }
        v628 = v624 + 24 * v623;
LABEL_775:
        v634 = v624 + 24 * v623;
        if (v628 == v634
          || ((*(_QWORD *)v628 >> 1) & 3 | *(_DWORD *)((*(_QWORD *)v628 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v615 + 24) | v614))
        {
          v628 = v634;
        }
        sub_1C528E0A8(a1, v620, **(unsigned int **)(v628 + 16));
        goto LABEL_779;
      }
      v637 = *(_WORD *)(v601 + 44);
      v638 = v601;
      if ((v637 & 4) != 0)
      {
        do
          v638 = *(_QWORD *)v638 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v638 + 44) & 4) != 0);
      }
      v639 = v601;
      if ((v637 & 8) != 0)
      {
        do
          v639 = *(_QWORD *)(v639 + 8);
        while ((*(_WORD *)(v639 + 44) & 8) != 0);
      }
      v640 = *(_QWORD *)(v639 + 8);
      if (v638 != v640)
      {
        while (1)
        {
          v641 = **(unsigned __int16 **)(v638 + 16);
          v398 = v641 > 0x17;
          v642 = (1 << v641) & 0x83E000;
          if (v398 || v642 == 0)
            break;
          v638 = *(_QWORD *)(v638 + 8);
          if (v638 == v640)
          {
            v638 = v640;
            break;
          }
        }
      }
      v644 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 288);
      v645 = *(_QWORD *)(v644 + 368);
      v646 = *(unsigned int *)(v644 + 384);
      if (!(_DWORD)v646)
        goto LABEL_833;
      LODWORD(v647) = ((v638 >> 4) ^ (v638 >> 9)) & (v646 - 1);
      v648 = (uint64_t *)(v645 + 16 * v647);
      v649 = *v648;
      if (v638 != *v648)
      {
        v652 = 1;
        while (v649 != -4096)
        {
          v653 = v647 + v652++;
          v647 = v653 & (v646 - 1);
          v649 = *(_QWORD *)(v645 + 16 * v647);
          if (v638 == v649)
          {
            v648 = (uint64_t *)(v645 + 16 * v647);
            goto LABEL_796;
          }
        }
LABEL_833:
        v648 = (uint64_t *)(v645 + 16 * v646);
      }
LABEL_796:
      v650 = v648[1];
      v651 = llvm::MachineInstr::readsWritesVirtualRegister(v601, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 112), 0);
      v621 = a1;
      if ((v651 & 1) == 0)
        goto LABEL_767;
      v742 = *(_QWORD *)(*((_QWORD *)v805[1] + 2 * v806 - 2)
                       + 16 * *((unsigned int *)v805[1] + 4 * v806 - 1));
      if ((*(_DWORD *)((v650 & 0xFFFFFFFFFFFFFFF8) + 24) | 2u) <= ((v742 >> 1) & 3 | *(_DWORD *)((v742 & 0xFFFFFFFFFFFFFFF8) + 24)))
        goto LABEL_767;
      sub_1C6213744((uint64_t)v805, v650 & 0xFFFFFFFFFFFFFFF8 | 4);
LABEL_779:
      v596 += 8;
      v36 = a1;
      if (v596 == v597)
      {
        if (v805[1] != (char *)&v806 + 8)
          free(v805[1]);
        break;
      }
    }
  }
  if (v795 != v797)
    free(v795);
  MEMORY[0x1CAA32FB4](v791, 4);
  if (v798[0] != v799)
    free(v798[0]);
  if (v822 != &v824)
    free(v822);
  v2 = a1;
LABEL_354:
  v771 = (_QWORD *)(v2 + 200);
  v822 = (void *)(v2 + 200);
  v823 = v825;
  v824 = 0x400000000;
  sub_1C5294A10(&v822);
  v805[0] = v822;
  v805[1] = (char *)&v806 + 8;
  *(_QWORD *)&v806 = 0x400000000;
  if ((_DWORD)v824)
    sub_1C50E5C18((uint64_t)&v805[1], (uint64_t)&v823);
  if (v823 != v825)
    free(v823);
  v283 = a1;
  v284 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v285 = *(_DWORD *)(v284 + 8);
  if (!v285)
  {
    v770 = 0;
    goto LABEL_465;
  }
  v770 = 0;
  v286 = *(uint64_t **)v284;
  v769 = *(_QWORD *)v284 + 24 * v285;
  while (2)
  {
    v780 = v286[2];
    v287 = *v286;
    v288 = v806;
    if (!(_DWORD)v806 || *((_DWORD *)v805[1] + 3) >= *((_DWORD *)v805[1] + 2))
      goto LABEL_366;
    v289 = (char *)v805[1] + 16 * v806;
    if (*((_DWORD *)v805[0] + 46))
    {
      v352 = *((_QWORD *)v289 - 2);
      v353 = *(_QWORD *)(v352 + 16 * (*((_DWORD *)v289 - 2) - 1) + 8);
      v354 = (v353 >> 1) & 3 | *(_DWORD *)((v353 & 0xFFFFFFFFFFFFFFF8) + 24);
      v355 = *(_DWORD *)((v287 & 0xFFFFFFFFFFFFFFF8) + 24) | (v287 >> 1) & 3;
      if (v354 > v355)
      {
        v356 = *((_DWORD *)v289 - 1);
        do
          v357 = *(_QWORD *)(v352 + 16 * v356++ + 8);
        while (((v357 >> 1) & 3 | *(_DWORD *)((v357 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v355);
        v290 = v356 - 1;
        goto LABEL_365;
      }
      LODWORD(v806) = v806 - 1;
      v358 = v288 - 2;
      if (v288 == 2)
      {
        v367 = *((unsigned int *)v805[1] + 3);
      }
      else
      {
        v359 = (v288 - 3);
        if ((_DWORD)v359)
        {
          v360 = *(_QWORD *)(*((_QWORD *)v805[1] + 2 * v359)
                           + 8 * *((unsigned int *)v805[1] + 4 * v359 + 3)
                           + 96);
          if (((v360 >> 1) & 3 | *(_DWORD *)((v360 & 0xFFFFFFFFFFFFFFF8) + 24)) > v355)
          {
LABEL_435:
            v361 = (char *)v805[1] + 16 * v358;
            v362 = *(_QWORD *)v361;
            v365 = *((_DWORD *)v361 + 3);
            v363 = v361 + 12;
            v364 = v365;
            do
              v366 = *(_QWORD *)(v362 + 8 * v364++ + 96);
            while (((v366 >> 1) & 3 | *(_DWORD *)((v366 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v355);
            *v363 = v364 - 1;
            goto LABEL_438;
          }
          v370 = 16 * v359;
          while (1)
          {
            LODWORD(v806) = v358;
            v371 = v370 - 16;
            if (v370 == 16)
              break;
            v372 = *(_QWORD *)(*(_QWORD *)((char *)v805[1] + v370 - 16)
                             + 8 * *(unsigned int *)((char *)v805[1] + v370 - 4)
                             + 96);
            v373 = (v372 >> 1) & 3 | *(_DWORD *)((v372 & 0xFFFFFFFFFFFFFFF8) + 24);
            --v358;
            v370 = v371;
            if (v373 > v355)
              goto LABEL_435;
          }
        }
        v367 = *((unsigned int *)v805[1] + 3);
        if (((*((_QWORD *)v805[0] + v367 + 12) >> 1) & 3 | *(_DWORD *)((*((_QWORD *)v805[0] + v367 + 12) & 0xFFFFFFFFFFFFFFF8)
                                                                                    + 24)) > v355)
        {
          v374 = *((_DWORD *)v805[1] + 7);
          do
            v375 = *(_QWORD *)(*((_QWORD *)v805[1] + 2) + 8 * v374++ + 96);
          while (((v375 >> 1) & 3 | *(_DWORD *)((v375 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v355);
          *((_DWORD *)v805[1] + 7) = v374 - 1;
          goto LABEL_438;
        }
      }
      v368 = *((_DWORD *)v805[0] + 47);
      if ((_DWORD)v367 != v368)
      {
        while (1)
        {
          v369 = *((_QWORD *)v805[0] + v367 + 12);
          if (((v369 >> 1) & 3 | *(_DWORD *)((v369 & 0xFFFFFFFFFFFFFFF8) + 24)) > v355)
            break;
          v367 = (v367 + 1);
          if (v368 == (_DWORD)v367)
          {
            v367 = *((unsigned int *)v805[0] + 47);
            break;
          }
        }
      }
      sub_1C5294A90(v805, v367);
      v283 = a1;
      if (!(_DWORD)v806 || *((_DWORD *)v805[1] + 3) >= *((_DWORD *)v805[1] + 2))
        goto LABEL_366;
LABEL_438:
      sub_1C5296788(v805, v287);
      v283 = a1;
      goto LABEL_366;
    }
    v290 = *((_DWORD *)v289 - 1);
    v291 = *((_DWORD *)v805[0] + 47);
    if (v290 != v291)
    {
      while (1)
      {
        v292 = *((_QWORD *)v805[0] + 2 * v290 + 1);
        if (((v292 >> 1) & 3 | *(_DWORD *)((v292 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v287 & 0xFFFFFFFFFFFFFFF8) + 24) | (v287 >> 1) & 3))
          break;
        if (v291 == ++v290)
        {
          v290 = *((_DWORD *)v805[0] + 47);
          break;
        }
      }
    }
LABEL_365:
    *((_DWORD *)v289 - 1) = v290;
LABEL_366:
    v293 = v286[1];
    v772 = v286;
    while (2)
    {
      v294 = v287;
      if (!(_DWORD)v806 || *((_DWORD *)v805[1] + 3) >= *((_DWORD *)v805[1] + 2))
      {
        v299 = 0;
LABEL_374:
        v287 = v293;
        goto LABEL_375;
      }
      v295 = (char *)v805[1] + 16 * v806;
      v296 = *((_QWORD *)v295 - 2);
      v297 = *((unsigned int *)v295 - 1);
      v298 = (*(_QWORD *)(v296 + 16 * v297) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v296 + 16 * v297) & 0xFFFFFFFFFFFFFFF8)
                                                                                + 24);
      if (v298 <= (*(_DWORD *)((v287 & 0xFFFFFFFFFFFFFFF8) + 24) | (v287 >> 1) & 3))
      {
        v299 = *(_DWORD *)(v296 + 4 * v297 + 144);
        v287 = *(_QWORD *)(v296 + 16 * v297 + 8);
        if (((v287 >> 1) & 3 | *(_DWORD *)((v287 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((v293 & 0xFFFFFFFFFFFFFFF8) + 24) | (v293 >> 1) & 3))
        {
          sub_1C528D9A4((uint64_t)v805);
          v283 = a1;
          goto LABEL_375;
        }
        goto LABEL_374;
      }
      v299 = 0;
      if (v298 >= (*(_DWORD *)((v293 & 0xFFFFFFFFFFFFFFF8) + 24) | (v293 >> 1) & 3))
        v287 = v293;
      else
        v287 = *(_QWORD *)(v296 + 16 * v297);
LABEL_375:
      v300 = *(_QWORD *)(v283 + 16);
      v301 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)(v283 + 80) + 16)
                       + 4 * (*(_DWORD *)(*(_QWORD *)(v283 + 80) + 64) + v299));
      if ((v301 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v300 + 416)
        || (v786 = *(llvm::LiveInterval **)(*(_QWORD *)(v300 + 408) + 8 * (v301 & 0x7FFFFFFF))) == 0)
      {
        v376 = (llvm::LiveInterval *)sub_1C4851220(v300, v301);
        v377 = v287;
        v378 = *(_QWORD *)(v300 + 304);
        v379 = *(_QWORD *)(v300 + 248);
        *(_QWORD *)v378 = v379;
        *(_QWORD *)(v378 + 8) = *(_QWORD *)(v379 + 40);
        *(_OWORD *)(v378 + 16) = *(_OWORD *)(v300 + 288);
        *(_QWORD *)(v378 + 32) = v300 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v378);
        *(_DWORD *)(v378 + 184) = 0;
        v287 = v377;
        v380 = *(_QWORD *)(v300 + 256);
        v75 = *(_BYTE *)(v380 + 16) == 0;
        v381 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v380 + 24) + 16 * (*((_DWORD *)v376 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                  + 34);
        v383 = !v75 && v381 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v300 + 304), v376, v383);
        v786 = v376;
        llvm::LiveIntervals::computeDeadValues(v300, (uint64_t)v376, 0);
        v283 = a1;
      }
      v302 = *(_DWORD *)(v283 + 416);
      if (v302)
      {
        v303 = *(_DWORD *)v780;
        v304 = *(_QWORD *)(v283 + 400);
        v305 = ((37 * v303) | ((unint64_t)(37 * v299) << 32))
             + ~((unint64_t)(37 * v303) << 32);
        v306 = (v305 ^ (v305 >> 22)) + ~((v305 ^ (v305 >> 22)) << 13);
        v307 = (9 * (v306 ^ (v306 >> 8))) ^ ((9 * (v306 ^ (v306 >> 8))) >> 15);
        v308 = ((v307 + ~(v307 << 27)) >> 31) ^ (v307 + ~((_DWORD)v307 << 27));
        v309 = v302 - 1;
        v310 = (v302 - 1) & v308;
        v311 = (int *)(v304 + 16 * v310);
        v313 = *v311;
        v312 = v311[1];
        if (v299 != v313 || v303 != v312)
        {
          v316 = 1;
          while (v313 != -1 || v312 != -1)
          {
            v349 = v310 + v316++;
            v310 = v349 & v309;
            v350 = (int *)(v304 + 16 * v310);
            v313 = *v350;
            v312 = v350[1];
            if (v299 == v313 && v303 == v312)
              goto LABEL_383;
          }
          goto LABEL_389;
        }
LABEL_383:
        v315 = *(_QWORD *)(v304 + 16 * v310 + 8);
        if ((v315 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v800 = (void *)v294;
          __src = (void *)v287;
          v802 = v315 & 0xFFFFFFFFFFFFFFF8;
          llvm::LiveRange::addSegment((uint64_t)v786, (uint64_t)&v800);
          v283 = a1;
        }
        else
        {
          if ((v315 & 4) == 0)
            goto LABEL_389;
          v770 = 1;
        }
      }
      else
      {
LABEL_389:
        if (v299)
          v317 = *(_DWORD *)(v283 + 92) == 0;
        else
          v317 = 1;
        v318 = !v317;
        v319 = v283 + 704 * v318 + 424;
        v320 = sub_1C499C548(*(_QWORD *)(*(_QWORD *)(v283 + 16) + 288), v294);
        v283 = a1;
        v321 = v320;
        v322 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 288) + 392)
                         + 16 * *(unsigned int *)(v320 + 24));
        v323 = v287 & 0xFFFFFFFFFFFFFFF8;
        v777 = v287;
        if (v294 == *v322)
        {
          v324 = (v287 >> 1) & 3;
          v325 = *(_DWORD *)((v294 & 0xFFFFFFFFFFFFFFF8) + 24) | (v294 >> 1) & 3;
          v326 = *(_DWORD *)(v323 + 24) | v324;
        }
        else
        {
          v294 = v322[1];
          v324 = (v287 >> 1) & 3;
          v327 = (v294 >> 1) & 3;
          if ((*(_DWORD *)(v323 + 24) | v324) >= (*(_DWORD *)((v294 & 0xFFFFFFFFFFFFFFF8) + 24) | v327))
            v328 = v322[1];
          else
            v328 = v287;
          v329 = llvm::LiveRange::extendInBlock((uint64_t)v786, *v322, v328);
          v325 = *(_DWORD *)((v294 & 0xFFFFFFFFFFFFFFF8) + 24) | v327;
          v326 = *(_DWORD *)(v323 + 24) | v324;
          if (v325 <= v326)
          {
            v330 = *(unsigned int *)(v321 + 24);
            *(_QWORD *)(*(_QWORD *)(v319 + 40) + ((v330 >> 3) & 0x1FFFFFF8)) |= 1 << v330;
            v331 = (uint64_t *)(*(_QWORD *)(v319 + 136) + 16 * v330);
            *v331 = v329;
            v331[1] = 0;
          }
          v321 = *(_QWORD *)(v321 + 8);
          v283 = a1;
        }
        if (v325 < v326)
        {
          v774 = v319 + 176;
          do
          {
            v332 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v283 + 16) + 288) + 392)
                             + 16 * *(unsigned int *)(v321 + 24)
                             + 8);
            v333 = v332 & 0xFFFFFFFFFFFFFFF8;
            v334 = (v332 >> 1) & 3;
            v335 = v334 | *(_DWORD *)((v332 & 0xFFFFFFFFFFFFFFF8) + 24);
            if (v294 == *(_QWORD *)(v780 + 8))
            {
              if (v326 >= v335)
                v336 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v283 + 16) + 288) + 392)
                                 + 16 * *(unsigned int *)(v321 + 24)
                                 + 8);
              else
                v336 = v777;
              v337 = llvm::LiveRange::extendInBlock((uint64_t)v786, v294, v336);
              if ((*(_DWORD *)(v323 + 24) | v324) >= (*(_DWORD *)(v333 + 24) | v334))
              {
                v338 = *(unsigned int *)(v321 + 24);
                *(_QWORD *)(*(_QWORD *)(v319 + 40) + ((v338 >> 3) & 0x1FFFFFF8)) |= 1 << v338;
                v339 = (uint64_t *)(*(_QWORD *)(v319 + 136) + 16 * v338);
                *v339 = v337;
                v339[1] = 0;
              }
            }
            else
            {
              v340 = (void *)sub_1C49FA70C(*(_QWORD *)(v283 + 40), v321);
              v822 = v786;
              v823 = v340;
              if (v326 >= v335)
              {
                v824 = 0;
                v825[0] = 0;
                v344 = (_OWORD *)sub_1C47C0F60(v774, (unint64_t)&v822, 1);
                v345 = (_OWORD *)(*(_QWORD *)(v319 + 176) + 32 * *(unsigned int *)(v319 + 184));
                v346 = v344[1];
                *v345 = *v344;
                v345[1] = v346;
                ++*(_DWORD *)(v319 + 184);
                v347 = *(unsigned int *)(v321 + 24);
                *(_QWORD *)(*(_QWORD *)(v319 + 40) + ((v347 >> 3) & 0x1FFFFFF8)) |= 1 << v347;
                v348 = (_QWORD *)(*(_QWORD *)(v319 + 136) + 16 * v347);
                *v348 = 0;
                v348[1] = 0;
              }
              else
              {
                v824 = v777;
                v825[0] = 0;
                v341 = (_OWORD *)sub_1C47C0F60(v774, (unint64_t)&v822, 1);
                v342 = (_OWORD *)(*(_QWORD *)(v319 + 176) + 32 * *(unsigned int *)(v319 + 184));
                v343 = v341[1];
                *v342 = *v341;
                v342[1] = v343;
                ++*(_DWORD *)(v319 + 184);
              }
            }
            v321 = *(_QWORD *)(v321 + 8);
            v326 = *(_DWORD *)(v323 + 24) | v324;
            v294 = v332;
            v283 = a1;
          }
          while ((*(_DWORD *)(v333 + 24) | v334) < v326);
          v286 = v772;
        }
        v287 = v777;
      }
      v293 = v286[1];
      if (v287 != v293)
        continue;
      break;
    }
    v286 += 3;
    if (v286 != (uint64_t *)v769)
      continue;
    break;
  }
LABEL_465:
  v384 = (llvm::LiveRangeCalc *)(v283 + 424);
  llvm::LiveRangeCalc::updateSSA((llvm::LiveRangeCalc *)(v283 + 424));
  llvm::LiveRangeCalc::updateFromLiveIns(v384);
  v385 = a1;
  if (*(_DWORD *)(a1 + 92))
  {
    llvm::LiveRangeCalc::updateSSA((llvm::LiveRangeCalc *)(a1 + 1128));
    llvm::LiveRangeCalc::updateFromLiveIns((llvm::LiveRangeCalc *)(a1 + 1128));
    v385 = a1;
  }
  if (v805[1] != (char *)&v806 + 8)
  {
    free(v805[1]);
    v385 = a1;
  }
  v822 = &v824;
  v823 = (void *)0x400000000;
  v386 = *(_QWORD *)(v385 + 32);
  v387 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v385 + 80) + 8) + 112);
  if ((v387 & 0x80000000) != 0)
    v388 = (uint64_t *)(*(_QWORD *)(v386 + 24) + 16 * (v387 & 0x7FFFFFFF) + 8);
  else
    v388 = (uint64_t *)(*(_QWORD *)(v386 + 272) + 8 * v387);
  v389 = v771;
  v390 = *v388;
  if (*v388)
  {
    v391 = v385 + 208;
    while (1)
    {
      v392 = v390;
      v390 = *(_QWORD *)(v390 + 24);
      v393 = *(_QWORD *)(v392 + 8);
      if (**(unsigned __int16 **)(v393 + 16) - 13 <= 1)
      {
        llvm::MachineOperand::setReg(v392, 0);
        goto LABEL_475;
      }
      v394 = *(_WORD *)(v393 + 44);
      v395 = *(_QWORD *)(v392 + 8);
      if ((v394 & 4) != 0)
      {
        do
          v395 = *(_QWORD *)v395 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v395 + 44) & 4) != 0);
      }
      if ((v394 & 8) != 0)
      {
        do
          v393 = *(_QWORD *)(v393 + 8);
        while ((*(_WORD *)(v393 + 44) & 8) != 0);
      }
      v396 = *(_QWORD *)(v393 + 8);
      if (v395 != v396)
      {
        while (1)
        {
          v397 = **(unsigned __int16 **)(v395 + 16);
          v398 = v397 > 0x17;
          v399 = (1 << v397) & 0x83E000;
          if (v398 || v399 == 0)
            break;
          v395 = *(_QWORD *)(v395 + 8);
          if (v395 == v396)
          {
            v395 = v396;
            break;
          }
        }
      }
      v401 = *(_QWORD *)(v385 + 16);
      v402 = *(_QWORD *)(v401 + 288);
      v403 = *(_QWORD *)(v402 + 368);
      v404 = *(unsigned int *)(v402 + 384);
      if ((_DWORD)v404)
      {
        LODWORD(v405) = ((v395 >> 4) ^ (v395 >> 9)) & (v404 - 1);
        v406 = (uint64_t *)(v403 + 16 * v405);
        v407 = *v406;
        if (v395 == *v406)
          goto LABEL_487;
        v427 = 1;
        while (v407 != -4096)
        {
          v428 = v405 + v427++;
          v405 = v428 & (v404 - 1);
          v407 = *(_QWORD *)(v403 + 16 * v405);
          if (v395 == v407)
          {
            v406 = (uint64_t *)(v403 + 16 * v405);
            goto LABEL_487;
          }
        }
      }
      v406 = (uint64_t *)(v403 + 16 * v404);
LABEL_487:
      v408 = 2;
      if ((*(_DWORD *)v392 & 0x40000000) == 0)
        v408 = 4;
      if ((*(_DWORD *)v392 & 0x11000000) != 0)
        v409 = v408 | v406[1] & 0xFFFFFFFFFFFFFFF8;
      else
        v409 = v406[1];
      v410 = *(_DWORD *)(v385 + 388);
      if (!v410)
        goto LABEL_515;
      v411 = *(_DWORD *)((v409 & 0xFFFFFFFFFFFFFFF8) + 24) | (v409 >> 1) & 3;
      if (v411 < ((*v389 >> 1) & 3 | *(_DWORD *)((*v389 & 0xFFFFFFFFFFFFFFF8) + 24)))
        goto LABEL_515;
      v412 = *(_DWORD *)(v385 + 384);
      v413 = v410 - 1;
      v414 = (uint64_t)&v389[2 * v413 + 1];
      v415 = (_QWORD *)(v391 + 8 * v413 + 88);
      if (!v412)
        v415 = (_QWORD *)v414;
      if (((*v415 >> 1) & 3 | *(_DWORD *)((*v415 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v411)
      {
LABEL_515:
        v419 = 0;
        goto LABEL_501;
      }
      if (v412)
      {
        v429 = sub_1C52968B4((uint64_t)v389, v409);
        v385 = a1;
        v419 = v429;
      }
      else
      {
        do
        {
          v416 = v412;
          v417 = v389[2 * v412 + 1];
          v418 = (v417 >> 1) & 3 | *(_DWORD *)((v417 & 0xFFFFFFFFFFFFFFF8) + 24);
          v412 = v416 + 1;
        }
        while (v418 <= v411);
        if (v411 < ((v389[2 * v416] >> 1) & 3 | *(_DWORD *)((v389[2 * v416] & 0xFFFFFFFFFFFFFFF8) + 24)))
          goto LABEL_515;
        v419 = *((_DWORD *)v389 + v416 + 36);
      }
LABEL_501:
      v420 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)(v385 + 80) + 16)
                       + 4 * (*(_DWORD *)(*(_QWORD *)(v385 + 80) + 64) + v419));
      if ((v420 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v401 + 416)
        || (v421 = *(_QWORD *)(*(_QWORD *)(v401 + 408) + 8 * (v420 & 0x7FFFFFFF))) == 0)
      {
        v421 = sub_1C4851220(v401, v420);
        v788 = *(_QWORD *)(v401 + 304);
        v688 = *(_QWORD *)(v401 + 248);
        *(_QWORD *)v788 = v688;
        *(_QWORD *)(v788 + 8) = *(_QWORD *)(v688 + 40);
        *(_OWORD *)(v788 + 16) = *(_OWORD *)(v401 + 288);
        *(_QWORD *)(v788 + 32) = v401 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v788);
        *(_DWORD *)(v788 + 184) = 0;
        v689 = *(_QWORD *)(v401 + 256);
        v75 = *(_BYTE *)(v689 + 16) == 0;
        v690 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v689 + 24) + 16 * (*(_DWORD *)(v421 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                  + 34);
        v692 = !v75 && v690 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v401 + 304), (llvm::LiveInterval *)v421, v692);
        llvm::LiveIntervals::computeDeadValues(v401, v421, 0);
      }
      llvm::MachineOperand::setReg(v392, *(_DWORD *)(v421 + 112));
      if ((v770 & 1) == 0)
        goto LABEL_475;
      v422 = *(_DWORD *)v392;
      if ((*(_DWORD *)v392 & 0x10000000) != 0)
        goto LABEL_475;
      if ((v422 & 0x1000000) == 0)
      {
        v423 = v409 & 0xFFFFFFFFFFFFFFF8;
        v424 = ((v409 & 0xFFFFFFF8) >> 1) | 1;
        goto LABEL_507;
      }
      if ((v422 & 0x400FFF00) != 0)
      {
        v430 = (v409 >> 1) & 3;
        v431 = v409 & 0xFFFFFFFFFFFFFFF8;
        if (v430)
          v432 = v431 | (2 * (v430 - 1));
        else
          v432 = *(_QWORD *)v431 | 6;
        v433 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
        v434 = *(unsigned int *)(v433 + 8);
        v435 = *(_QWORD **)v433;
        if ((_DWORD)v434)
        {
          v436 = v435[3 * v434 - 2];
          v437 = *(_DWORD *)((v432 & 0xFFFFFFFFFFFFFFF8) + 24) | (v432 >> 1) & 3;
          v438 = (v436 >> 1) & 3 | *(_DWORD *)((v436 & 0xFFFFFFFFFFFFFFF8) + 24);
          v439 = v435;
          v440 = v434;
          if (v437 < v438)
          {
            do
            {
              v441 = v440 >> 1;
              v442 = v439[3 * (v440 >> 1) + 1];
              LODWORD(v442) = (v442 >> 1) & 3 | *(_DWORD *)((v442 & 0xFFFFFFFFFFFFFFF8) + 24);
              v440 -= (v440 >> 1) + 1;
              v443 = v437 >= v442;
              if (v437 >= v442)
                v444 = v441 + 1;
              else
                v444 = 0;
              v439 += 3 * v444;
              if (!v443)
                v440 = v441;
            }
            while (v440);
LABEL_527:
            if (v439 != &v435[3 * v434])
            {
              v423 = v432 & 0xFFFFFFFFFFFFFFF8;
              if (((*v439 >> 1) & 3 | *(_DWORD *)((*v439 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v432 & 0xFFFFFFFFFFFFFFF8) + 24) | (v432 >> 1) & 3))
              {
                v424 = v432 >> 1;
LABEL_507:
                v425 = v424 & 3;
                if (v425 == 3)
                  v426 = (void *)(*(_QWORD *)(v423 + 8) & 0xFFFFFFFFFFFFFFF9);
                else
                  v426 = (void *)(v423 | (2 * v425 + 2));
                if (*(_QWORD *)(v421 + 104))
                {
                  if ((v422 & 0x1000000) == 0)
                  {
                    v445 = *(_OWORD *)(v392 + 16);
                    *(_OWORD *)v805 = *(_OWORD *)v392;
                    v806 = v445;
                    LODWORD(v807) = v419;
                    v808 = v426;
                    v446 = v805;
                    v447 = (char *)v822;
                    if (v823 >= HIDWORD(v823))
                    {
                      v744 = v823 + 1;
                      if (v822 <= v805 && (char *)v822 + 48 * v823 > (char *)v805)
                      {
                        v763 = (char *)v805 - (_BYTE *)v822;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v822, (uint64_t)&v824, v744, 48);
                        v447 = (char *)v822;
                        v446 = (void **)((char *)v822 + v763);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v822, (uint64_t)&v824, v744, 48);
                        v446 = v805;
                        v447 = (char *)v822;
                      }
                    }
                    v448 = &v447[48 * v823];
                    v449 = *(_OWORD *)v446;
                    v450 = *((_OWORD *)v446 + 2);
                    *((_OWORD *)v448 + 1) = *((_OWORD *)v446 + 1);
                    *((_OWORD *)v448 + 2) = v450;
                    *(_OWORD *)v448 = v449;
                    LODWORD(v823) = (_DWORD)v823 + 1;
                  }
                }
                else
                {
                  if (v419)
                    v451 = *(_DWORD *)(a1 + 92) == 0;
                  else
                    v451 = 1;
                  v452 = !v451;
                  llvm::LiveRangeCalc::extend((llvm::LiveRangeCalc *)(a1 + 704 * v452 + 424), (uint64_t *)v421, (unint64_t)v426, 0, 0, 0);
                }
                goto LABEL_475;
              }
            }
            goto LABEL_475;
          }
        }
        else
        {
          LODWORD(v434) = 0;
        }
        v439 = &v435[3 * v434];
        goto LABEL_527;
      }
LABEL_475:
      v385 = a1;
      v389 = v771;
      if (!v390)
      {
        if ((_DWORD)v823)
        {
          v453 = (char *)v822;
          v787 = (char *)v822 + 48 * v823;
          v454 = v821;
          do
          {
            v455 = *(_QWORD *)(v385 + 16);
            v456 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)(v385 + 80) + 16)
                             + 4 * (*(_DWORD *)(*(_QWORD *)(v385 + 80) + 64) + *((_DWORD *)v453 + 8)));
            if ((v456 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v455 + 416)
              || (v457 = *(_QWORD *)(*(_QWORD *)(v455 + 408) + 8 * (v456 & 0x7FFFFFFF))) == 0)
            {
              v457 = sub_1C4851220(*(_QWORD *)(v385 + 16), v456);
              v682 = *(_QWORD *)(v455 + 304);
              v683 = *(_QWORD *)(v455 + 248);
              *(_QWORD *)v682 = v683;
              *(_QWORD *)(v682 + 8) = *(_QWORD *)(v683 + 40);
              *(_OWORD *)(v682 + 16) = *(_OWORD *)(v455 + 288);
              *(_QWORD *)(v682 + 32) = v455 + 312;
              llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v682);
              *(_DWORD *)(v682 + 184) = 0;
              v684 = *(_QWORD *)(v455 + 256);
              v75 = *(_BYTE *)(v684 + 16) == 0;
              v685 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v684 + 24)
                                                     + 16 * (*(_DWORD *)(v457 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                        + 34);
              v687 = !v75 && v685 != 0;
              llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v455 + 304), (llvm::LiveInterval *)v457, v687);
              llvm::LiveIntervals::computeDeadValues(v455, v457, 0);
              v385 = a1;
            }
            *(_OWORD *)v805 = 0u;
            v806 = 0u;
            v807 = 0;
            v808 = v810;
            v809 = 0x600000000;
            v811 = 0;
            v812 = 0;
            v813 = 0;
            v814 = 0;
            v817 = 0;
            v818 = 0;
            v816 = 0;
            v815 = &v817;
            v819 = v454;
            v820 = 0x1000000000;
            v458 = ((unint64_t)*(unsigned int *)v453 >> 8) & 0xFFF;
            if ((_DWORD)v458)
              v459 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v385 + 56) + 232) + 8 * v458);
            else
              v459 = (uint64_t *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v385 + 32) + 24)
                                            + 16 * (*((_DWORD *)v453 + 1) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                               + 24);
            v460 = *(_QWORD *)(v457 + 104);
            if (v460)
            {
              v461 = v454;
              v462 = *v459;
              do
              {
                if ((*(_QWORD *)(v460 + 112) & v462) != 0 && *(_DWORD *)(v460 + 8))
                {
                  v463 = *(_QWORD *)(v385 + 16);
                  v464 = *(_QWORD *)(v463 + 288);
                  v465 = *(_QWORD *)(v385 + 40);
                  v466 = *(void **)(*(_QWORD *)(*(_QWORD *)(v385 + 24) + 272) + 40);
                  v805[0] = *(void **)(*(_QWORD *)(v385 + 24) + 272);
                  v805[1] = v466;
                  *(_QWORD *)&v806 = v464;
                  *((_QWORD *)&v806 + 1) = v465;
                  v807 = v463 + 312;
                  v467 = v385;
                  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v805);
                  LODWORD(v820) = 0;
                  v800 = &v802;
                  __src = (void *)0x400000000;
                  llvm::LiveInterval::computeSubRangeUndefs(v457, (uint64_t)&v800, *(_QWORD *)(v460 + 112), *(_QWORD **)(v467 + 32), *(_QWORD *)(*(_QWORD *)(v467 + 16) + 288));
                  llvm::LiveRangeCalc::extend((llvm::LiveRangeCalc *)v805, (uint64_t *)v460, *((_QWORD *)v453 + 5), 0, v800, __src);
                  if (v800 != &v802)
                    free(v800);
                  v385 = a1;
                }
                v460 = *(_QWORD *)(v460 + 104);
              }
              while (v460);
              v454 = v461;
              if (v819 != v461)
                free(v819);
            }
            if (v815 != &v817)
              free(v815);
            v468 = v812;
            if (v814)
            {
              v661 = v454;
              v470 = (_QWORD *)(v812 + 96);
              v471 = 152 * v814;
              do
              {
                v469 = *(v470 - 12);
                if (v469 != -4096 && v469 != -8192)
                {
                  v472 = (_QWORD *)*(v470 - 2);
                  if (v470 != v472)
                    free(v472);
                  v473 = (char *)*(v470 - 11);
                  if (v470 - 9 != (_QWORD *)v473)
                    free(v473);
                }
                v470 += 19;
                v471 -= 152;
              }
              while (v471);
              v468 = v812;
              v454 = v661;
            }
            MEMORY[0x1CAA32FB4](v468, 8);
            if (v808 != v810)
              free(v808);
            v453 += 48;
            v385 = a1;
          }
          while (v453 != v787);
        }
        break;
      }
    }
  }
  v474 = *(_QWORD *)(v385 + 80);
  v475 = *(uint64_t **)(v474 + 16);
  v476 = *(unsigned int *)(v474 + 64);
  v477 = *((unsigned int *)v475 + 2);
  v478 = a2;
  if ((_DWORD)v476 != (_DWORD)v477)
  {
    v570 = *v475;
    v571 = (int *)(v570 + 4 * v477);
    v572 = (int *)(v570 + 4 * v476);
    do
    {
      v573 = *(_QWORD *)(v385 + 16);
      if ((*v572 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v573 + 416)
        || (v574 = *(_QWORD *)(*(_QWORD *)(v573 + 408) + 8 * (*v572 & 0x7FFFFFFF))) == 0)
      {
        v574 = sub_1C4851220(*(_QWORD *)(v385 + 16), *v572);
        v672 = *(_QWORD *)(v573 + 304);
        v673 = *(_QWORD *)(v573 + 248);
        *(_QWORD *)v672 = v673;
        *(_QWORD *)(v672 + 8) = *(_QWORD *)(v673 + 40);
        *(_OWORD *)(v672 + 16) = *(_OWORD *)(v573 + 288);
        *(_QWORD *)(v672 + 32) = v573 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v672);
        *(_DWORD *)(v672 + 184) = 0;
        v674 = *(_QWORD *)(v573 + 256);
        v75 = *(_BYTE *)(v674 + 16) == 0;
        v675 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v674 + 24) + 16 * (*(_DWORD *)(v574 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                  + 34);
        v677 = !v75 && v675 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v573 + 304), (llvm::LiveInterval *)v574, v677);
        llvm::LiveIntervals::computeDeadValues(v573, v574, 0);
        v385 = a1;
      }
      v576 = (_QWORD *)(v574 + 104);
      v575 = *(_QWORD *)(v574 + 104);
      if (v575)
      {
        *(_DWORD *)(v574 + 72) = 0;
        *(_DWORD *)(v574 + 8) = 0;
        while (1)
        {
          v577 = v575;
          if (!*(_DWORD *)(v575 + 8))
            break;
LABEL_698:
          v576 = (_QWORD *)(v575 + 104);
          v575 = *(_QWORD *)(v575 + 104);
          if (!v575)
            goto LABEL_699;
        }
        while (1)
        {
          v578 = *(_QWORD *)(v577 + 96);
          v575 = *(_QWORD *)(v577 + 104);
          *(_QWORD *)(v577 + 96) = 0;
          if (v578)
          {
            sub_1C47655E8(v578, *(_QWORD **)(v578 + 8));
            MEMORY[0x1CAA32FC0](v578, 0x1020C4062D53EE8);
            v385 = a1;
          }
          v579 = *(void **)(v577 + 64);
          if (v579 != (void *)(v577 + 80))
          {
            free(v579);
            v385 = a1;
          }
          if (*(_QWORD *)v577 != v577 + 16)
          {
            free(*(void **)v577);
            v385 = a1;
          }
          if (!v575)
            break;
          v577 = v575;
          if (*(_DWORD *)(v575 + 8))
          {
            *v576 = v575;
            goto LABEL_698;
          }
        }
        *v576 = 0;
LABEL_699:
        llvm::LiveIntervals::constructMainRangeFromSubranges(*(llvm::LiveIntervals **)(v385 + 16), (llvm::LiveInterval *)v574);
        v385 = a1;
      }
      ++v572;
    }
    while (v572 != v571);
  }
  if (v822 != &v824)
  {
    free(v822);
    v385 = a1;
  }
  v479 = *(_QWORD *)(v385 + 80);
  if ((v770 & 1) == 0)
    goto LABEL_651;
  v480 = *(_QWORD *)(v479 + 8);
  v481 = *(unsigned int *)(v480 + 72);
  if ((_DWORD)v481)
  {
    v482 = *(uint64_t **)(v480 + 64);
    v483 = &v482[v481];
    v484 = v385 + 208;
    while (1)
    {
      v485 = *v482;
      v486 = *(_QWORD *)(*v482 + 8);
      if (v486 >= 8 && (*(_QWORD *)(*v482 + 8) & 6) == 0)
        break;
LABEL_586:
      if (++v482 == v483)
        goto LABEL_609;
    }
    v488 = *(_DWORD *)(v385 + 388);
    if (!v488)
      goto LABEL_608;
    v489 = *(_DWORD *)((v486 & 0xFFFFFFFFFFFFFFF8) + 24) | (v486 >> 1) & 3;
    if (v489 < ((*v771 >> 1) & 3 | *(_DWORD *)((*v771 & 0xFFFFFFFFFFFFFFF8) + 24)))
      goto LABEL_608;
    v490 = *(_DWORD *)(v385 + 384);
    v491 = v488 - 1;
    v492 = (uint64_t)&v771[2 * v491 + 1];
    v493 = (_QWORD *)(v484 + 8 * v491 + 88);
    if (!v490)
      v493 = (_QWORD *)v492;
    if (((*v493 >> 1) & 3 | *(_DWORD *)((*v493 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v489)
      goto LABEL_608;
    if (v490)
    {
      v506 = sub_1C52968B4((uint64_t)v771, *(_QWORD *)(*v482 + 8));
      v385 = a1;
      v497 = v506;
    }
    else
    {
      do
      {
        v494 = v490;
        v495 = v771[2 * v490 + 1];
        v496 = (v495 >> 1) & 3 | *(_DWORD *)((v495 & 0xFFFFFFFFFFFFFFF8) + 24);
        v490 = v494 + 1;
      }
      while (v496 <= v489);
      if (v489 >= ((v771[2 * v494] >> 1) & 3 | *(_DWORD *)((v771[2 * v494] & 0xFFFFFFFFFFFFFFF8) + 24)))
      {
        v497 = *((_DWORD *)v771 + v494 + 36);
        goto LABEL_597;
      }
LABEL_608:
      v497 = 0;
    }
LABEL_597:
    v498 = *(_QWORD *)(v385 + 16);
    v499 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)(v385 + 80) + 16)
                     + 4 * (*(_DWORD *)(*(_QWORD *)(v385 + 80) + 64) + v497));
    if ((v499 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v498 + 416)
      || (v500 = *(llvm::LiveInterval **)(*(_QWORD *)(v498 + 408) + 8 * (v499 & 0x7FFFFFFF))) == 0)
    {
      v500 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(v385 + 16), v499);
      v734 = *(_QWORD *)(v498 + 304);
      v735 = *(_QWORD *)(v498 + 248);
      *(_QWORD *)v734 = v735;
      *(_QWORD *)(v734 + 8) = *(_QWORD *)(v735 + 40);
      *(_OWORD *)(v734 + 16) = *(_OWORD *)(v498 + 288);
      *(_QWORD *)(v734 + 32) = v498 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v734);
      *(_DWORD *)(v734 + 184) = 0;
      v736 = *(_QWORD *)(v498 + 256);
      v75 = *(_BYTE *)(v736 + 16) == 0;
      v737 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v736 + 24) + 16 * (*((_DWORD *)v500 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                + 34);
      v739 = !v75 && v737 != 0;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v498 + 304), v500, v739);
      llvm::LiveIntervals::computeDeadValues(v498, (uint64_t)v500, 0);
      v385 = a1;
      v498 = *(_QWORD *)(a1 + 16);
      v486 = *(_QWORD *)(v485 + 8);
    }
    v501 = *(_DWORD *)(v385 + 92);
    v502 = sub_1C499C548(*(_QWORD *)(v498 + 288), v486);
    v503 = sub_1C528FD08(*(_QWORD *)(v485 + 8), (uint64_t)v500);
    v385 = a1;
    if ((v503 & 1) == 0)
    {
      if (v497)
        v504 = v501 == 0;
      else
        v504 = 1;
      v505 = !v504;
      sub_1C528FB58(a1, *(_QWORD *)(v502 + 64), *(_QWORD *)(v502 + 72), (llvm::LiveRangeCalc *)(a1 + 704 * v505 + 424), (uint64_t *)v500, -1, 0, 0);
      v385 = a1;
    }
    goto LABEL_586;
  }
LABEL_609:
  v822 = &v824;
  v823 = (void *)0x400000000;
  *(_OWORD *)v805 = 0u;
  v806 = 0u;
  v807 = 0;
  v808 = v810;
  v809 = 0x600000000;
  v811 = 0;
  v812 = 0;
  v813 = 0;
  v814 = 0;
  v815 = &v817;
  v816 = 0;
  v818 = 0;
  v817 = 0;
  v819 = v821;
  v820 = 0x1000000000;
  v507 = *(_QWORD *)(v480 + 104);
  if (!v507)
    goto LABEL_640;
  v508 = v385 + 208;
  while (2)
  {
    v509 = *(unsigned int *)(v507 + 72);
    if ((_DWORD)v509)
    {
      v510 = *(uint64_t **)(v507 + 64);
      v511 = &v510[v509];
      while (1)
      {
        v512 = *v510;
        v513 = *(_QWORD *)(*v510 + 8);
        if (v513 >= 8 && (*(_QWORD *)(*v510 + 8) & 6) == 0)
          break;
LABEL_617:
        if (++v510 == v511)
          goto LABEL_637;
      }
      v515 = *(_DWORD *)(v385 + 388);
      if (!v515)
        goto LABEL_636;
      v516 = *(_DWORD *)((v513 & 0xFFFFFFFFFFFFFFF8) + 24) | (v513 >> 1) & 3;
      if (v516 < ((*v771 >> 1) & 3 | *(_DWORD *)((*v771 & 0xFFFFFFFFFFFFFFF8) + 24)))
        goto LABEL_636;
      v517 = *(_DWORD *)(v385 + 384);
      v518 = v515 - 1;
      v519 = (uint64_t)&v771[2 * v518 + 1];
      v520 = (_QWORD *)(v508 + 8 * v518 + 88);
      if (!v517)
        v520 = (_QWORD *)v519;
      if (((*v520 >> 1) & 3 | *(_DWORD *)((*v520 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v516)
        goto LABEL_636;
      if (v517)
      {
        v524 = sub_1C52968B4((uint64_t)v771, v513);
        v385 = a1;
      }
      else
      {
        do
        {
          v521 = v517;
          v522 = v771[2 * v517 + 1];
          v523 = (v522 >> 1) & 3 | *(_DWORD *)((v522 & 0xFFFFFFFFFFFFFFF8) + 24);
          v517 = v521 + 1;
        }
        while (v523 <= v516);
        if (v516 >= ((v771[2 * v521] >> 1) & 3 | *(_DWORD *)((v771[2 * v521] & 0xFFFFFFFFFFFFFFF8) + 24)))
        {
          v524 = *((_DWORD *)v771 + v521 + 36);
          goto LABEL_628;
        }
LABEL_636:
        v524 = 0;
      }
LABEL_628:
      v525 = *(_QWORD *)(v385 + 16);
      v526 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)(v385 + 80) + 16)
                       + 4 * (*(_DWORD *)(*(_QWORD *)(v385 + 80) + 64) + v524));
      if ((v526 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v525 + 416)
        || (v527 = *(_QWORD *)(*(_QWORD *)(v525 + 408) + 8 * (v526 & 0x7FFFFFFF))) == 0)
      {
        v527 = sub_1C4851220(*(_QWORD *)(v385 + 16), v526);
        v781 = *(_QWORD *)(v525 + 304);
        v662 = *(_QWORD *)(v525 + 248);
        *(_QWORD *)v781 = v662;
        *(_QWORD *)(v781 + 8) = *(_QWORD *)(v662 + 40);
        *(_OWORD *)(v781 + 16) = *(_OWORD *)(v525 + 288);
        *(_QWORD *)(v781 + 32) = v525 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v781);
        *(_DWORD *)(v781 + 184) = 0;
        v663 = *(_QWORD *)(v525 + 256);
        v75 = *(_BYTE *)(v663 + 16) == 0;
        v664 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v663 + 24) + 16 * (*(_DWORD *)(v527 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                  + 34);
        v666 = !v75 && v664 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v525 + 304), (llvm::LiveInterval *)v527, v666);
        llvm::LiveIntervals::computeDeadValues(v525, v527, 0);
      }
      for (i = *(uint64_t **)(v527 + 104); i; i = (uint64_t *)i[13])
      {
        if (i[14] == *(_QWORD *)(v507 + 112))
          break;
      }
      v529 = sub_1C528FD08(*(_QWORD *)(v512 + 8), (uint64_t)i);
      v385 = a1;
      if ((v529 & 1) == 0)
      {
        v530 = sub_1C499C548(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 288), *(_QWORD *)(v512 + 8));
        v531 = *(_QWORD *)(a1 + 16);
        v532 = *(_QWORD *)(v531 + 288);
        v533 = *(_QWORD *)(a1 + 40);
        v534 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 272) + 40);
        v805[0] = *(void **)(*(_QWORD *)(a1 + 24) + 272);
        v805[1] = v534;
        *(_QWORD *)&v806 = v532;
        *((_QWORD *)&v806 + 1) = v533;
        v807 = v531 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v805);
        LODWORD(v820) = 0;
        LODWORD(v823) = 0;
        llvm::LiveInterval::computeSubRangeUndefs(v527, (uint64_t)&v822, *(_QWORD *)(v507 + 112), *(_QWORD **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 288));
        sub_1C528FB58(a1, *(_QWORD *)(v530 + 64), *(_QWORD *)(v530 + 72), (llvm::LiveRangeCalc *)v805, i, *(_QWORD *)(v507 + 112), v822, v823);
        v385 = a1;
      }
      goto LABEL_617;
    }
LABEL_637:
    v507 = *(_QWORD *)(v507 + 104);
    if (v507)
      continue;
    break;
  }
  if (v819 != v821)
    free(v819);
LABEL_640:
  if (v815 != &v817)
    free(v815);
  v535 = v812;
  if (v814)
  {
    v729 = (_QWORD *)(v812 + 96);
    v730 = 152 * v814;
    do
    {
      v731 = *(v729 - 12);
      if (v731 != -4096 && v731 != -8192)
      {
        v732 = (_QWORD *)*(v729 - 2);
        if (v729 != v732)
          free(v732);
        v733 = (char *)*(v729 - 11);
        if (v729 - 9 != (_QWORD *)v733)
          free(v733);
      }
      v729 += 19;
      v730 -= 152;
    }
    while (v730);
    v535 = v812;
  }
  MEMORY[0x1CAA32FB4](v535, 8);
  if (v808 != v810)
    free(v808);
  if (v822 != &v824)
    free(v822);
  v805[0] = &v806;
  v805[1] = (void *)0x800000000;
  v385 = a1;
  v536 = *(_QWORD *)(a1 + 80);
  v537 = *(uint64_t **)(v536 + 16);
  v538 = *(unsigned int *)(v536 + 64);
  v539 = *((unsigned int *)v537 + 2);
  if ((_DWORD)v538 != (_DWORD)v539)
  {
    v580 = *v537;
    v581 = (int *)(v580 + 4 * v539);
    v582 = (int *)(v580 + 4 * v538);
    do
    {
      v583 = *(_QWORD *)(v385 + 16);
      if ((*v582 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v583 + 416)
        || (v584 = *(llvm::LiveInterval **)(*(_QWORD *)(v583 + 408) + 8 * (*v582 & 0x7FFFFFFF))) == 0)
      {
        v584 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(v385 + 16), *v582);
        v693 = *(_QWORD *)(v583 + 304);
        v694 = *(_QWORD *)(v583 + 248);
        *(_QWORD *)v693 = v694;
        *(_QWORD *)(v693 + 8) = *(_QWORD *)(v694 + 40);
        *(_OWORD *)(v693 + 16) = *(_OWORD *)(v583 + 288);
        *(_QWORD *)(v693 + 32) = v583 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v693);
        *(_DWORD *)(v693 + 184) = 0;
        v695 = *(_QWORD *)(v583 + 256);
        v75 = *(_BYTE *)(v695 + 16) == 0;
        v696 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v695 + 24) + 16 * (*((_DWORD *)v584 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                  + 34);
        v698 = !v75 && v696 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v583 + 304), v584, v698);
        llvm::LiveIntervals::computeDeadValues(v583, (uint64_t)v584, 0);
        v385 = a1;
      }
      v585 = *((_DWORD *)v584 + 2);
      if (v585)
      {
        v586 = *(_QWORD *)v584;
        v587 = *(_QWORD *)v584 + 24 * v585;
        do
        {
          v588 = *(_QWORD *)(*(_QWORD *)(v586 + 16) + 8);
          if ((v588 & 6) != 0 && *(_QWORD *)(v586 + 8) == (v588 & 0xFFFFFFFFFFFFFFF8 | 6))
          {
            if (v588 < 8)
              v590 = 0;
            else
              v590 = *(_QWORD *)((v588 & 0xFFFFFFFFFFFFFFF8) + 16);
            llvm::MachineInstr::addRegisterDead((llvm::MachineInstr *)v590, *((_DWORD *)v584 + 28), *(_QWORD *)(a1 + 56), 0);
            v385 = a1;
            v591 = *(unsigned int *)(v590 + 40);
            if ((_DWORD)v591)
            {
              v592 = *(_DWORD **)(v590 + 32);
              v593 = 32 * v591;
              while ((*v592 & 0x10000FF) != 0x1000000 || (*v592 & 0x5000000) == 83886080)
              {
                v592 += 8;
                v593 -= 32;
                if (!v593)
                  goto LABEL_735;
              }
            }
            else
            {
LABEL_735:
              v595 = LODWORD(v805[1]);
              if (LODWORD(v805[1]) >= (unint64_t)HIDWORD(v805[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v805, (uint64_t)&v806, LODWORD(v805[1]) + 1, 8);
                v385 = a1;
                v595 = LODWORD(v805[1]);
              }
              *((_QWORD *)v805[0] + v595) = v590;
              ++LODWORD(v805[1]);
            }
          }
          v586 += 24;
        }
        while (v586 != v587);
      }
      ++v582;
    }
    while (v582 != v581);
    if (LODWORD(v805[1]))
    {
      llvm::LiveRangeEdit::eliminateDeadDefs(*(uint64_t **)(v385 + 80), (uint64_t)v805, 0, 0, *(llvm::AAResults **)(v385 + 8));
      v385 = a1;
    }
  }
  v478 = a2;
  if (v805[0] != &v806)
  {
    free(v805[0]);
    v385 = a1;
  }
  v479 = *(_QWORD *)(v385 + 80);
LABEL_651:
  v540 = *(uint64_t **)(v479 + 16);
  v541 = *(unsigned int *)(v479 + 64);
  v542 = *((unsigned int *)v540 + 2);
  if ((_DWORD)v541 != (_DWORD)v542)
  {
    v543 = *v540;
    v544 = (int *)(v543 + 4 * v542);
    v545 = (int *)(v543 + 4 * v541);
    do
    {
      v546 = *(_QWORD *)(v385 + 16);
      if ((*v545 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v546 + 416)
        || (v547 = *(_QWORD **)(*(_QWORD *)(v546 + 408) + 8 * (*v545 & 0x7FFFFFFF))) == 0)
      {
        v547 = (_QWORD *)sub_1C4851220(*(_QWORD *)(v385 + 16), *v545);
        llvm::LiveIntervals::computeVirtRegInterval((llvm::LiveIntervals *)v546, (llvm::LiveInterval *)v547);
      }
      v549 = v547 + 13;
      v548 = v547[13];
      if (v548)
      {
        while (1)
        {
          v550 = v548;
          if (!*(_DWORD *)(v548 + 8))
            break;
LABEL_659:
          v549 = (_QWORD *)(v548 + 104);
          v548 = *(_QWORD *)(v548 + 104);
          if (!v548)
            goto LABEL_656;
        }
        while (1)
        {
          v766 = *(_QWORD *)(v550 + 96);
          v548 = *(_QWORD *)(v550 + 104);
          *(_QWORD *)(v550 + 96) = 0;
          if (v766)
          {
            sub_1C47655E8(v766, *(_QWORD **)(v766 + 8));
            MEMORY[0x1CAA32FC0](v766, 0x1020C4062D53EE8);
          }
          v767 = *(void **)(v550 + 64);
          if (v767 != (void *)(v550 + 80))
            free(v767);
          if (*(_QWORD *)v550 != v550 + 16)
            free(*(void **)v550);
          if (!v548)
            break;
          v550 = v548;
          if (*(_DWORD *)(v548 + 8))
          {
            *v549 = v548;
            goto LABEL_659;
          }
        }
        *v549 = 0;
      }
LABEL_656:
      llvm::LiveRange::RenumberValues((llvm::LiveRange *)v547);
      ++v545;
      v385 = a1;
    }
    while (v545 != v544);
    v479 = *(_QWORD *)(a1 + 80);
  }
  if (v478)
  {
    v551 = (*(_DWORD *)(*(_QWORD *)(v479 + 16) + 8) - *(_DWORD *)(v479 + 64));
    v478[2] = 0;
    sub_1C50EC5B8(v478, 0, v551);
    v552 = a1;
    v479 = *(_QWORD *)(a1 + 80);
  }
  else
  {
    v552 = a1;
  }
  v822 = *(void **)(v552 + 16);
  v823 = v825;
  v824 = 0x800000000;
  v826 = 0;
  v553 = *(_DWORD *)(*(_QWORD *)(v479 + 16) + 8);
  v554 = *(_DWORD *)(v479 + 64);
  v555 = v553 - v554;
  if (v553 != v554)
  {
    v556 = 0;
    do
    {
      v557 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)(v552 + 80) + 16)
                       + 4 * (*(_DWORD *)(*(_QWORD *)(v552 + 80) + 64) + v556));
      v558 = *(_QWORD *)(v552 + 16);
      v559 = v557 & 0x7FFFFFFF;
      if (v559 >= *(unsigned int *)(v558 + 416)
        || (v560 = *(llvm::LiveInterval **)(*(_QWORD *)(v558 + 408) + 8 * v559)) == 0)
      {
        v743 = v552;
        v560 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(v552 + 16), *(_DWORD *)(**(_QWORD **)(*(_QWORD *)(v552 + 80) + 16)+ 4* (*(_DWORD *)(*(_QWORD *)(v552 + 80) + 64) + v556)));
        llvm::LiveIntervals::computeVirtRegInterval((llvm::LiveIntervals *)v558, v560);
        v558 = *(_QWORD *)(v743 + 16);
      }
      v805[0] = &v806;
      v805[1] = (void *)0x800000000;
      llvm::LiveIntervals::splitSeparateComponents(v558, v560, (uint64_t)v805);
      v552 = a1;
      if (LODWORD(v805[1]))
      {
        v563 = (uint64_t *)v805[0];
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 328) + 4 * v559))
          v557 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 328) + 4 * v559);
        v564 = 8 * LODWORD(v805[1]);
        do
        {
          v565 = *v563++;
          sub_1C5116CCC(*(_QWORD *)(v552 + 24), *(_DWORD *)(v565 + 112), v557);
          v552 = a1;
          v564 -= 8;
        }
        while (v564);
      }
      if (v478)
      {
        v561 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v552 + 80) + 16) + 8)
                            - *(_DWORD *)(*(_QWORD *)(v552 + 80) + 64));
        v562 = v478[2];
        if ((_DWORD)v562 != (_DWORD)v561)
        {
          if (v562 <= v561)
          {
            v566 = v478[2];
            v567 = v478[2];
            if (v561 > v478[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v478, (uint64_t)(v478 + 4), v561, 4);
              v552 = a1;
              v566 = v478[2];
              v567 = v478[2];
            }
            if (v561 != v562)
            {
              v568 = (_DWORD *)(*(_QWORD *)v478 + 4 * v566);
              v569 = v562 - v561;
              do
              {
                *v568++ = v556;
                v52 = __CFADD__(v569++, 1);
              }
              while (!v52);
              v567 = v478[2];
            }
            LODWORD(v561) = v567 + v561 - v562;
          }
          v478[2] = v561;
        }
      }
      if (v805[0] != &v806)
      {
        free(v805[0]);
        v552 = a1;
      }
      ++v556;
    }
    while (v556 != v555);
    v479 = *(_QWORD *)(v552 + 80);
  }
  llvm::LiveRangeEdit::calculateRegClassAndHint((llvm::LiveRangeEdit *)v479, *(llvm::MachineFunction **)(*(_QWORD *)(v552 + 24) + 272), *(llvm::VirtRegAuxInfo **)(v552 + 72));
  if (v823 != v825)
    free(v823);
}

BOOL sub_1C5293EE4(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  unint64_t v5;
  _BOOL8 v6;
  BOOL v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v4 & 0xFFFFFFFFFFFFFFF8) == v5;
  v6 = (v4 & 0xFFFFFFFFFFFFFFF8) != v5;
  v7 = !v7 || a3 == 0;
  if (!v7)
  {
    v8 = *(unsigned __int8 *)(a2 + 32);
    v9 = *(unsigned __int8 *)(a2 + 33);
    if (v8)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (v10)
    {
      v11 = **(unsigned __int16 **)(*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 16) + 16);
      if (v11 != 11 && v11 != 19)
        return sub_1C6213494(a1, v4);
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return v6;
}

void sub_1C5293F4C(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  sub_1C528EB90(a1);
  v4 = *(unsigned int *)(*(_QWORD *)a2 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v6 = *(_QWORD *)(v5 + 16 * v4);
  if (v6 < 8 || *(_QWORD *)(v5 + 16 * v4 + 8) >= 8uLL)
    v6 = sub_1C528C724((_QWORD *)(*(_QWORD *)a1 + 48), *(_QWORD *)(*(_QWORD *)a1 + 40), *(llvm::MachineBasicBlock **)a2);
  v7 = (v6 >> 1) & 3;
  if ((v7 | *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24)) >= ((*(_QWORD *)(a2 + 8) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8) + 24)))
    v8 = *(_QWORD *)(a2 + 8);
  else
    v8 = v6;
  v9 = sub_1C528EC00(a1, v8);
  v10 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 33)
    && (*(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 24) | (v10 >> 1) & 3) >= (*(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24) | v7))
  {
    v12 = sub_1C528F664((uint64_t *)a1, v6);
    sub_1C528F0F0(a1 + 200, v9, v12, *(_DWORD *)(a1 + 88));
    sub_1C528F768(a1, v12, *(_QWORD *)(a2 + 16));
  }
  else
  {
    v11 = sub_1C528F4A4(a1, v10);
    sub_1C528F0F0(a1 + 200, v9, v11, *(_DWORD *)(a1 + 88));
  }
}

void sub_1C5294084(int *a1, unsigned int a2, int a3, unint64_t a4, int a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t *v43;

  v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 288) + 392);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 272) + 104) + 8 * a2);
  if (a5)
  {
    if (!a3)
    {
      a1[22] = a5;
      sub_1C528EE2C((uint64_t)a1, (llvm::MachineBasicBlock *)v9);
      return;
    }
    v13 = (uint64_t *)(v8 + 16 * a2);
    v14 = *v13;
    v15 = v13[1];
    if (a3 == a5 && a4 <= 7 && a6 <= 7)
    {
      a1[22] = a5;
      v16 = (uint64_t)(a1 + 50);
      v17 = v14;
      v18 = v15;
      v19 = a5;
LABEL_38:
      sub_1C528F0F0(v16, v17, v18, v19);
      return;
    }
    v32 = a2;
    v33 = *(_QWORD *)a1;
    v34 = *(_QWORD *)(*(_QWORD *)a1 + 40);
    v35 = *(unsigned int **)(*(_QWORD *)(**(_QWORD **)a1 + 104) + 8 * v32);
    v36 = v35[6];
    v37 = *(_QWORD *)(*(_QWORD *)a1 + 56);
    v38 = *(_QWORD *)(v37 + 16 * v36);
    if (v38 < 8 || *(_QWORD *)(v37 + 16 * v36 + 8) >= 8uLL)
      v38 = sub_1C528C724((_QWORD *)(v33 + 48), v34, (llvm::MachineBasicBlock *)v35);
    if (a3 != a5)
    {
      if (a4 < 8 || a6 < 8)
      {
        a1[22] = a5;
        if (a4 < 8)
          goto LABEL_30;
        v39 = *(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24);
LABEL_28:
        if ((v39 | (a4 >> 1) & 3) < (*(_DWORD *)((v38 & 0xFFFFFFFFFFFFFFF8) + 24) | (v38 >> 1) & 3))
        {
          v41 = sub_1C528EC00((uint64_t)a1, a4);
          sub_1C528F0F0((uint64_t)(a1 + 50), v41, v15, a1[22]);
LABEL_31:
          a1[22] = a3;
          v16 = (uint64_t)(a1 + 50);
          v17 = v14;
          v18 = v41;
          v19 = a3;
          goto LABEL_38;
        }
LABEL_30:
        v41 = sub_1C528EE2C((uint64_t)a1, (llvm::MachineBasicBlock *)v9);
        goto LABEL_31;
      }
      v39 = *(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24);
      if (v39 > (*(_DWORD *)((a6 & 0xFFFFFFFFFFFFFFF8) + 24) | 3u))
      {
        a1[22] = a5;
        goto LABEL_28;
      }
    }
    a1[22] = a5;
    v40 = sub_1C528ED00((uint64_t)a1, a6);
    sub_1C528F0F0((uint64_t)(a1 + 50), v40, v15, a1[22]);
    a1[22] = a3;
    v18 = sub_1C528F664((uint64_t *)a1, a4);
    v19 = a1[22];
    v16 = (uint64_t)(a1 + 50);
    v17 = v14;
    goto LABEL_38;
  }
  a1[22] = a3;
  v20 = *(_QWORD *)(v8 + 16 * *(unsigned int *)(v9 + 24));
  v21 = *(_QWORD *)(*((_QWORD *)a1 + 10) + 8);
  v22 = *(unsigned int *)(v21 + 8);
  v23 = *(_QWORD **)v21;
  if (!(_DWORD)v22)
  {
    LODWORD(v22) = 0;
    goto LABEL_33;
  }
  v24 = v23[3 * v22 - 2];
  v25 = *(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 24) | (v20 >> 1) & 3;
  if (v25 >= ((v24 >> 1) & 3 | *(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_33:
    v26 = &v23[3 * v22];
    goto LABEL_34;
  }
  v26 = v23;
  v27 = v22;
  do
  {
    v28 = v27 >> 1;
    v29 = v26[3 * (v27 >> 1) + 1];
    LODWORD(v29) = (v29 >> 1) & 3 | *(_DWORD *)((v29 & 0xFFFFFFFFFFFFFFF8) + 24);
    v27 -= (v27 >> 1) + 1;
    v30 = v25 >= v29;
    if (v25 >= v29)
      v31 = v28 + 1;
    else
      v31 = 0;
    v26 += 3 * v31;
    if (!v30)
      v27 = v28;
  }
  while (v27);
LABEL_34:
  if (v26 != &v23[3 * v22]
    && ((*v26 >> 1) & 3 | *(_DWORD *)((*v26 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 24) | (v20 >> 1) & 3))
  {
    v42 = (void *)v26[2];
    if (v42)
    {
      v43 = (unint64_t *)llvm::MachineBasicBlock::SkipPHIsLabelsAndDebug(v9, *(_QWORD *)(v9 + 56), 1);
      v18 = *(_QWORD *)(sub_1C528E25C((uint64_t *)a1, 0, v42, v20, v9, v43) + 8);
      v19 = a1[22];
      v16 = (uint64_t)(a1 + 50);
      v17 = v20;
      goto LABEL_38;
    }
  }
}

void sub_1C52943E4(unint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v8 = *(unsigned int *)(*(_QWORD *)a2 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 288) + 392) + 16 * v8);
  if (!*(_BYTE *)(a2 + 33))
  {
    v10 = *(_QWORD *)(a2 + 16);
    if (a4 < 8
      || (*(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3) >= (*(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 24) | (v10 >> 1) & 3))
    {
      *(_DWORD *)(a1 + 88) = a3;
      v11 = a1 + 200;
      v12 = v9;
      v13 = v10;
LABEL_4:
      v14 = a3;
      goto LABEL_5;
    }
  }
  v15 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v16 = *(_QWORD *)(v15 + 16 * v8);
  if (v16 < 8 || *(_QWORD *)(v15 + 16 * v8 + 8) >= 8uLL)
    v16 = sub_1C528C724((_QWORD *)(*(_QWORD *)a1 + 48), *(_QWORD *)(*(_QWORD *)a1 + 40), *(llvm::MachineBasicBlock **)a2);
  v17 = *(_QWORD *)(a2 + 16);
  v18 = v17 & 0xFFFFFFFFFFFFFFF8;
  if (a4 <= 7)
  {
    v20 = *(_DWORD *)(v18 + 24);
  }
  else
  {
    v19 = (a4 >> 1) & 3;
    v20 = *(_DWORD *)(v18 + 24);
    if ((*(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | v19) <= (v20 | 3u))
    {
      sub_1C528EB90(a1);
      v21 = *(_QWORD *)(a2 + 16);
      if (*(_BYTE *)(a2 + 33)
        && (*(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 24) | (v21 >> 1) & 3) >= (*(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24) | (v16 >> 1) & 3))
      {
        v26 = sub_1C528F664((uint64_t *)a1, v16);
        sub_1C528F768(a1, v26, *(_QWORD *)(a2 + 16));
        if ((*(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | v19) >= (*(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 24) | (v26 >> 1) & 3))
          v27 = v26;
        else
          v27 = a4;
        v28 = sub_1C528EC00(a1, v27);
        sub_1C528F0F0(a1 + 200, v28, v26, *(_DWORD *)(a1 + 88));
        *(_DWORD *)(a1 + 88) = a3;
        v11 = a1 + 200;
        v12 = v9;
        v13 = v28;
      }
      else
      {
        v22 = sub_1C528F4A4(a1, v21);
        v23 = sub_1C528EC00(a1, a4);
        sub_1C528F0F0(a1 + 200, v23, v22, *(_DWORD *)(a1 + 88));
        *(_DWORD *)(a1 + 88) = a3;
        v11 = a1 + 200;
        v12 = v9;
        v13 = v23;
      }
      goto LABEL_4;
    }
  }
  v24 = *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24) | (v16 >> 1) & 3;
  *(_DWORD *)(a1 + 88) = a3;
  if ((v20 | (v17 >> 1) & 3) >= v24)
  {
    v25 = sub_1C528F664((uint64_t *)a1, v16);
    sub_1C528F768(a1, v25, *(_QWORD *)(a2 + 16));
    v11 = a1 + 200;
    v14 = *(_DWORD *)(a1 + 88);
    v12 = v9;
    v13 = v25;
  }
  else
  {
    v13 = sub_1C528F4A4(a1, v17);
    v11 = a1 + 200;
    v14 = *(_DWORD *)(a1 + 88);
    v12 = v9;
  }
LABEL_5:
  sub_1C528F0F0(v11, v12, v13, v14);
}

void sub_1C5294668(uint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  llvm::MachineBasicBlock *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v8 = *(llvm::MachineBasicBlock **)a2;
  v9 = *(unsigned int *)(*(_QWORD *)a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 288) + 392) + 16 * v9 + 8);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v13 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v14 = *(_QWORD *)(v13 + 16 * v9);
  if (v14 < 8 || *(_QWORD *)(v13 + 16 * v9 + 8) >= 8uLL)
    v14 = sub_1C528C724((_QWORD *)(v11 + 48), v12, v8);
  v15 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 32))
  {
    v21 = v15 & 0xFFFFFFFFFFFFFFF8;
    if (a4 <= 7)
    {
      v20 = *(_DWORD *)(v21 + 24);
      goto LABEL_11;
    }
    v20 = *(_DWORD *)(v21 + 24);
    v19 = *(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3;
  }
  else if (a4 < 8
         || (v19 = *(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3,
             v20 = *(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24),
             v19 <= (v20 | (v15 >> 1) & 3)))
  {
    *(_DWORD *)(a1 + 88) = a3;
    v16 = a1 + 200;
    v17 = v10;
    v18 = a3;
    goto LABEL_6;
  }
  if (v19 >= v20)
  {
    *(_DWORD *)(a1 + 88) = a3;
    v22 = sub_1C528ED00(a1, a4);
    sub_1C528F0F0(a1 + 200, v22, v10, *(_DWORD *)(a1 + 88));
    sub_1C528EB90(a1);
    if (((*(_QWORD *)(a2 + 8) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 24) | (v22 >> 1) & 3))
      v23 = v22;
    else
      v23 = *(_QWORD *)(a2 + 8);
    v15 = sub_1C528EC00(a1, v23);
    v18 = *(_DWORD *)(a1 + 88);
    v16 = a1 + 200;
    v17 = v22;
    goto LABEL_6;
  }
LABEL_11:
  *(_DWORD *)(a1 + 88) = a3;
  if ((v20 | (v15 >> 1) & 3) >= (*(_DWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 24) | (v14 >> 1) & 3))
    v15 = v14;
  v15 = sub_1C528EC00(a1, v15);
  v16 = a1 + 200;
  v18 = *(_DWORD *)(a1 + 88);
  v17 = v10;
LABEL_6:
  sub_1C528F0F0(v16, v15, v17, v18);
}

char *sub_1C529482C(char *result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD **v7;
  _QWORD *v8;
  unint64_t v9;
  _DWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;

  v7 = (_QWORD **)result;
  if (*((unsigned int *)result + 3) >= a2)
  {
    v11 = *(_QWORD **)result;
    v10 = result + 8;
    v12 = *((unsigned int *)result + 2);
    if (v12 >= a2)
      v13 = a2;
    else
      v13 = *((unsigned int *)result + 2);
    if (v13)
    {
      v14 = *(_QWORD **)result;
      do
      {
        *v14 = a3;
        v14[1] = a4;
        v14 += 2;
        --v13;
      }
      while (v13);
    }
    v15 = v12 - a2;
    if (v12 < a2)
    {
      v16 = &v11[2 * v12];
      do
      {
        *v16 = a3;
        v16[1] = a4;
        v16 += 2;
      }
      while (!__CFADD__(v15++, 1));
    }
  }
  else
  {
    *((_DWORD *)result + 2) = 0;
    result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 16), a2, 16);
    v8 = *v7;
    v9 = a2;
    do
    {
      *v8 = a3;
      v8[1] = a4;
      v8 += 2;
      --v9;
    }
    while (v9);
    v10 = v7 + 1;
  }
  *v10 = a2;
  return result;
}

_DWORD *sub_1C52948E8(_DWORD *result, int a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    result = operator new(16 * v4, (std::align_val_t)8uLL);
    *(_QWORD *)v2 = result;
    *((_QWORD *)v2 + 1) = 0;
    v5 = v2[4];
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      do
      {
        *(_QWORD *)result = -1;
        result += 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

_DWORD *sub_1C5294978(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_QWORD **)result;
      v7 = 16 * v2;
      do
      {
        *v6 = -1;
        v6 += 2;
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    return sub_1C52948E8(v1, v5);
  }
  return result;
}

_DWORD *sub_1C5294A10(_DWORD *a1)
{
  _DWORD *result;
  unsigned int v3;
  unsigned int i;
  uint64_t v5;

  result = sub_1C5294A90(a1, 0);
  v3 = *(_DWORD *)(*(_QWORD *)a1 + 184);
  if (v3)
  {
    for (i = a1[4] - 1; i < v3; i = a1[4] - 1)
    {
      v5 = *((_QWORD *)a1 + 1) + 16 * i;
      result = sub_1C4A079DC(a1 + 2, *(_QWORD *)(*(_QWORD *)v5 + 8 * *(unsigned int *)(v5 + 12)), 0);
    }
  }
  return result;
}

_DWORD *sub_1C5294A90(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  v4 = result + 2;
  v5 = *(_QWORD *)result;
  if (*(_DWORD *)(*(_QWORD *)result + 184))
  {
    v6 = v5 + 8;
    v7 = *(unsigned int *)(v5 + 188);
    result[4] = 0;
    v8 = result + 4;
    if (result[5])
    {
      v9 = 0;
    }
    else
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(result + 2), (uint64_t)(result + 6), 1uLL, 16);
      v9 = v3[4];
    }
    v10 = v7 | (a2 << 32);
    v11 = (_QWORD *)(*v4 + 16 * v9);
    *v11 = v6;
  }
  else
  {
    v12 = *(unsigned int *)(v5 + 188);
    result[4] = 0;
    v8 = result + 4;
    if (result[5])
    {
      v13 = 0;
    }
    else
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(result + 2), (uint64_t)(result + 6), 1uLL, 16);
      v13 = v3[4];
    }
    v10 = v12 | (a2 << 32);
    v11 = (_QWORD *)(*v4 + 16 * v13);
    *v11 = v5;
  }
  v11[1] = v10;
  ++*v8;
  return result;
}

uint64_t sub_1C5294B70(uint64_t result, int a2, int a3, int a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  int v12;
  _DWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v18;

  if (a2)
  {
    v5 = ((37 * a4) | ((unint64_t)(37 * a3) << 32))
       + ~((unint64_t)(37 * a4) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (_DWORD *)(result + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 != a3 || v12 != a4)
    {
      v14 = 0;
      v15 = 1;
      while (v11 != -1 || v12 != -1)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v12 == -2;
        if (v16 && v11 == -2)
          v14 = v10;
        v18 = v9 + v15++;
        v9 = v18 & v8;
        v10 = (_DWORD *)(result + 16 * (v18 & v8));
        v11 = *v10;
        v12 = v10[1];
        if (*v10 == a3 && v12 == a4)
          goto LABEL_7;
      }
      if (v14)
        v10 = v14;
    }
  }
  else
  {
    v10 = 0;
  }
LABEL_7:
  *a5 = v10;
  return result;
}

_DWORD *sub_1C5294C40(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  _DWORD *v19;
  int v20;
  BOOL v21;
  unsigned int v23;
  _DWORD *v25;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1C5294DD4(a1, 2 * v6);
    v9 = *(_DWORD *)(a1 + 16);
    if (v9)
    {
      v10 = a2[1];
      v11 = ((37 * v10) | ((unint64_t)(37 * *a2) << 32))
          + ~((unint64_t)(37 * v10) << 32);
      v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
      v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
      v14 = v9 - 1;
      v15 = v14 & (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~((_DWORD)v13 << 27)));
      a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v15);
      v16 = *a3;
      v17 = a3[1];
      if (*a2 != *a3 || v10 != v17)
      {
        v19 = 0;
        v20 = 1;
        while (v16 != -1 || v17 != -1)
        {
          if (v19)
            v21 = 0;
          else
            v21 = v17 == -2;
          if (v21 && v16 == -2)
            v19 = a3;
          v23 = v15 + v20++;
          v15 = v23 & v14;
          a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v15);
          v16 = *a3;
          v17 = a3[1];
          if (*a2 == *a3 && v10 == v17)
            goto LABEL_4;
        }
        if (v19)
          a3 = v19;
      }
    }
    else
    {
      a3 = 0;
    }
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
    sub_1C5294DD4(a1, v6);
    v25 = 0;
    sub_1C5294B70(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v25);
    a3 = v25;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1 || a3[1] != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C5294DD4(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5294E8C(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -1;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5294E8C(uint64_t result, int *a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v24;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 16 * v3;
    do
    {
      *v4 = -1;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 4)
  {
    v6 = *a2;
    v7 = a2[1];
    if ((*a2 != -1 || v7 != -1) && (v6 != -2 || v7 != -2))
    {
      v10 = ((37 * v7) | ((unint64_t)(37 * v6) << 32))
          + ~((unint64_t)(37 * v7) << 32);
      v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
      v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
      v13 = ((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~((_DWORD)v12 << 27));
      v14 = *(_DWORD *)(result + 16) - 1;
      v15 = v14 & v13;
      v16 = *(_QWORD *)result + 16 * v15;
      v17 = *(_DWORD *)v16;
      v18 = *(_DWORD *)(v16 + 4);
      if (v6 != *(_DWORD *)v16 || v7 != v18)
      {
        v20 = 0;
        v21 = 1;
        while (v17 != -1 || v18 != -1)
        {
          if (v20)
            v22 = 0;
          else
            v22 = v18 == -2;
          if (v22 && v17 == -2)
            v20 = v16;
          v24 = v15 + v21++;
          v15 = v24 & v14;
          v16 = *(_QWORD *)result + 16 * (v24 & v14);
          v17 = *(_DWORD *)v16;
          v18 = *(_DWORD *)(v16 + 4);
          if (v6 == *(_DWORD *)v16 && v7 == v18)
            goto LABEL_18;
        }
        if (v20)
          v16 = v20;
      }
LABEL_18:
      *(_DWORD *)v16 = v6;
      *(_DWORD *)(v16 + 4) = a2[1];
      *(_QWORD *)(v16 + 8) = *((_QWORD *)a2 + 1);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

void sub_1C5294FD0()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5294FE4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E814AC48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C529501C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E814AC48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_1C529503C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2[12])
  {
    v6 = a2;
    return sub_1C510A3C0((uint64_t *)&v6, v3, v4, 0);
  }
  else
  {
    v6 = a2;
    return sub_1C510A6B8(&v6, v3, v4, 0);
  }
}

uint64_t sub_1C5295088(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  _QWORD *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;

  v6 = *a2;
  if (!(_DWORD)v6)
  {
LABEL_10:
    if ((_DWORD)v6 == (_DWORD)a3)
    {
      v18 = (_QWORD *)(a1 + 16 * a3);
      *v18 = a4;
      v18[1] = a5;
      *(_DWORD *)(a1 + 4 * a3 + 144) = a6;
      return (a3 + 1);
    }
    v12 = a1 + 4 * v6;
    v14 = *(_DWORD *)(v12 + 144);
    v13 = (_DWORD *)(v12 + 144);
    if (v14 == a6)
    {
      v15 = (_QWORD *)(a1 + 16 * v6);
      if (*v15 == a5)
      {
        *v15 = a4;
        return a3;
      }
    }
    if ((_DWORD)a3 != 9)
    {
      v16 = a3;
      do
      {
        *(_OWORD *)(a1 + 16 * v16) = *(_OWORD *)(a1 + 16 * (v16 - 1));
        *(_DWORD *)(a1 + 144 + 4 * v16) = *(_DWORD *)(a1 + 144 + 4 * (v16 - 1));
        --v16;
      }
      while ((_DWORD)v6 != v16);
      v17 = (_QWORD *)(a1 + 16 * v6);
      *v17 = a4;
      v17[1] = a5;
      *v13 = a6;
      return (a3 + 1);
    }
    return 10;
  }
  v7 = (v6 - 1);
  if (*(_DWORD *)(a1 + 4 * v7 + 144) != a6
    || (v8 = a1 + 16 * v7, v10 = *(_QWORD *)(v8 + 8), v9 = (_QWORD *)(v8 + 8), v10 != a4))
  {
    if ((_DWORD)v6 == 9)
      return 10;
    goto LABEL_10;
  }
  *a2 = v7;
  if ((_DWORD)v6 != (_DWORD)a3 && *(_DWORD *)(a1 + 4 * v6 + 144) == a6 && *(_QWORD *)(a1 + 16 * v6) == a5)
  {
    *v9 = *(_QWORD *)(a1 + 16 * v6 + 8);
    if ((_DWORD)v6 + 1 != (_DWORD)a3)
    {
      do
      {
        *(_OWORD *)(a1 + 16 * v6) = *(_OWORD *)(a1 + 16 * (v6 + 1));
        *(_DWORD *)(a1 + 144 + 4 * v6) = *(_DWORD *)(a1 + 144 + 4 * (v6 + 1));
        LODWORD(v6) = v6 + 1;
      }
      while ((_DWORD)a3 - 1 != (_DWORD)v6);
    }
    return (a3 - 1);
  }
  else
  {
    *v9 = a5;
  }
  return a3;
}

uint64_t sub_1C52951CC(_DWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  llvm::IntervalMapImpl::Path *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t result;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  int i;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  _DWORD *v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  char v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  unsigned int v106[4];
  __int128 v107;
  __int128 v108;
  _DWORD v109[4];
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v8 = (llvm::IntervalMapImpl::Path *)(a1 + 2);
  v9 = a1[4];
  if (!v9 || (v10 = *(_QWORD *)v8, *(_DWORD *)(*(_QWORD *)v8 + 12) >= *(_DWORD *)(*(_QWORD *)v8 + 8)))
  {
    v11 = *(unsigned int *)(*(_QWORD *)a1 + 184);
    llvm::IntervalMapImpl::Path::moveLeft((llvm::IntervalMapImpl::Path *)(a1 + 2), *(_DWORD *)(*(_QWORD *)a1 + 184));
    v10 = *((_QWORD *)a1 + 1);
    ++*(_DWORD *)(v10 + 16 * v11 + 12);
    v9 = a1[4];
  }
  v12 = v9;
  v13 = v10 + 16 * v9;
  v14 = *(_DWORD *)(v13 - 4);
  if (!v14)
  {
    v15 = *(_QWORD *)(v13 - 16);
    if ((*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3) >= ((*(_QWORD *)v15 >> 1) & 3 | *(_DWORD *)((*(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8) + 24)))
      goto LABEL_22;
    v16 = v9 - 1;
    if (v9 == 1)
      goto LABEL_12;
    v17 = v9 - 2;
    v18 = v9;
    while (1)
    {
      v19 = v17;
      if (!v17)
        break;
      v20 = *(_DWORD *)(v10 + 16 * v17 + 12);
      --v18;
      --v17;
      if (v20)
        goto LABEL_14;
    }
    v20 = *(_DWORD *)(v10 + 12);
    if (!v20)
      goto LABEL_12;
    v18 = 1;
LABEL_14:
    v21 = *(_QWORD *)(*(_QWORD *)(v10 + 16 * v19) + 8 * (v20 - 1));
    if (v18 != v16)
    {
      v96 = ~v18 + v9;
      do
      {
        v21 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFC0) + 8 * (v21 & 0x3F));
        --v96;
      }
      while (v96);
    }
    if (!v21)
    {
LABEL_12:
      v14 = 0;
      **(_QWORD **)a1 = a2;
      goto LABEL_23;
    }
    v22 = v21 & 0xFFFFFFFFFFFFFFC0;
    v23 = v21 & 0x3F;
    if (*(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFC0) + 4 * v23 + 0x90) == a4
      && (v24 = v22 + 16 * v23, v26 = *(_QWORD *)(v24 + 8), v25 = (uint64_t *)(v24 + 8), v26 == a2))
    {
      llvm::IntervalMapImpl::Path::moveLeft(v8, v16);
      if ((*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3) <= ((*(_QWORD *)v15 >> 1) & 3 | *(_DWORD *)((*(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8) + 24))
        && (*(_DWORD *)(v15 + 144) != a4 || *(_QWORD *)v15 != a3))
      {
        v92 = a1[4] - 1;
        *v25 = a3;
        return sub_1C5111404((uint64_t)a1, v92, a3);
      }
      a2 = *(_QWORD *)(v22 + 16 * v23);
      sub_1C5295A34((uint64_t)a1, 0);
      v10 = *((_QWORD *)a1 + 1);
      v12 = a1[4];
      v14 = *(_DWORD *)(v10 + 16 * v12 - 4);
    }
    else
    {
LABEL_22:
      v14 = 0;
    }
  }
LABEL_23:
  v27 = v10 + 16 * v12;
  v28 = *(unsigned int *)(v27 - 8);
  v29 = v14 == v28;
  result = sub_1C5295088(*(_QWORD *)(v27 - 16), (_DWORD *)(v27 - 4), v28, a2, a3, a4);
  if (result < 0xA)
    goto LABEL_97;
  v31 = a1[4];
  v107 = 0u;
  v108 = 0u;
  v32 = *((_QWORD *)a1 + 1);
  v33 = (v31 - 1);
  v34 = *(unsigned int *)(v32 + 16 * v33 + 12);
  v101 = a2;
  if (v31 == 1)
  {
    v38 = 0;
    LODWORD(v39) = 0;
    goto LABEL_35;
  }
  v35 = v31 - 2;
  v36 = v31;
  while (1)
  {
    v37 = v35;
    if (!v35)
      break;
    v38 = *(_DWORD *)(v32 + 16 * v35 + 12);
    --v36;
    --v35;
    if (v38)
      goto LABEL_31;
  }
  v38 = *(_DWORD *)(v32 + 12);
  v36 = 1;
  if (!v38)
  {
    LODWORD(v39) = 0;
    goto LABEL_36;
  }
LABEL_31:
  v39 = *(_QWORD *)(*(_QWORD *)(v32 + 16 * v37) + 8 * (v38 - 1));
  if (v36 != (_DWORD)v33)
  {
    v95 = ~v36 + v31;
    do
    {
      v39 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFFC0) + 8 * (v39 & 0x3F));
      --v95;
    }
    while (v95);
  }
  if (!v39)
  {
    v38 = 0;
LABEL_35:
    LOBYTE(v36) = 1;
    goto LABEL_36;
  }
  LOBYTE(v36) = 0;
  v38 = (v39 & 0x3F) + 1;
  v109[0] = v38;
  v34 = (v38 + v34);
  *(_QWORD *)&v107 = v39 & 0xFFFFFFFFFFFFFFC0;
  LODWORD(v39) = 1;
LABEL_36:
  v40 = v32 + 16 * v33;
  v41 = *(_DWORD *)(v40 + 8);
  v109[v39] = v41;
  v42 = v41 + v38;
  v43 = (v39 + 1);
  *(_QWORD *)((unint64_t)&v107 | (8 * v39)) = *(_QWORD *)v40;
  if (v31 != 1)
  {
    v44 = v31 - 2;
    v45 = v31;
    while (1)
    {
      v46 = v44;
      if (!v44)
        break;
      v47 = *(_DWORD *)(v32 + 16 * v44 + 12);
      v48 = *(_DWORD *)(v32 + 16 * v44 + 8) - 1;
      --v45;
      --v44;
      if (v47 != v48)
        goto LABEL_42;
    }
    v47 = *(_DWORD *)(v32 + 12);
    v48 = *(_DWORD *)(v32 + 8) - 1;
    v45 = 1;
LABEL_42:
    if (v47 != v48)
    {
      v49 = *(_QWORD *)(*(_QWORD *)(v32 + 16 * v46) + 8 * (v47 + 1));
      if (v45 != (_DWORD)v33)
      {
        v94 = ~v45 + v31;
        do
        {
          v49 = *(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFC0);
          --v94;
        }
        while (v94);
      }
      if (v49)
      {
        v50 = (v49 & 0x3F) + 1;
        v109[v43] = v50;
        v42 += v50;
        *((_QWORD *)&v107 + v43) = v49 & 0xFFFFFFFFFFFFFFC0;
        v43 = v39 | 2;
      }
    }
  }
  v103 = a3;
  v102 = a4;
  v100 = v36;
  if (v42 + 1 <= (v43 | (8 * (_DWORD)v43)))
  {
    LODWORD(v51) = 0;
  }
  else
  {
    if ((_DWORD)v43 == 1)
      v51 = 1;
    else
      v51 = (v43 - 1);
    v109[v43] = v109[v51];
    *((_QWORD *)&v107 + v43) = *((_QWORD *)&v107 + v51);
    v109[v51] = 0;
    v52 = *(unint64_t **)(*(_QWORD *)a1 + 192);
    v53 = *v52;
    if (*v52)
      *v52 = *(_QWORD *)v53;
    else
      v53 = sub_1C484358C((uint64_t)(v52 + 1), 192, 6);
    *(_QWORD *)(v53 + 176) = 0;
    *(_OWORD *)(v53 + 144) = 0u;
    *(_OWORD *)(v53 + 160) = 0u;
    *(_OWORD *)(v53 + 112) = 0u;
    *(_OWORD *)(v53 + 128) = 0u;
    *(_OWORD *)(v53 + 80) = 0u;
    *(_OWORD *)(v53 + 96) = 0u;
    *(_OWORD *)(v53 + 48) = 0u;
    *(_OWORD *)(v53 + 64) = 0u;
    *(_OWORD *)(v53 + 16) = 0u;
    *(_OWORD *)(v53 + 32) = 0u;
    v43 = (v43 + 1);
    *(_OWORD *)v53 = 0u;
    *((_QWORD *)&v107 + v51) = v53;
  }
  v54 = llvm::IntervalMapImpl::distribute((llvm::IntervalMapImpl *)v43, v42, 9u, v109, v106, (unsigned int *)v34, 1);
  v105 = v43;
  v55 = (v43 - 1);
  v104 = v54;
  if ((_DWORD)v43 != 1)
  {
    v98 = (v43 - 1);
    do
    {
      v56 = v109[v55];
      v57 = v106[v55];
      if (v56 != v57)
      {
        v58 = v55;
        do
        {
          if (!v58)
            break;
          v59 = v109[v58 - 1];
          v60 = sub_1C5296560(*((_QWORD *)&v107 + v55), v56, *(_QWORD *)&v106[2 * v58 + 2], v59, v57 - v56);
          v109[v58 - 1] = v59 - v60;
          v56 = v109[v55] + v60;
          v109[v55] = v56;
          --v58;
        }
        while (v56 < v57);
      }
      --v55;
    }
    while ((_DWORD)v55);
    LODWORD(v54) = v104;
    v61 = (v43 - 1);
    if (v43 >= 2)
    {
      v62 = 0;
      v63 = 1;
      do
      {
        v64 = v109[v62];
        v65 = v106[v62];
        if (v64 != v65)
        {
          v66 = v63;
          do
          {
            if (v105 == v66)
              break;
            v97 = v109[v66];
            v99 = v66;
            v67 = sub_1C5296560(*((_QWORD *)&v107 + v66), v97, *((_QWORD *)&v107 + v62), v64, v64 - v65);
            v61 = v98;
            v109[v99] = v67 + v97;
            v64 = v109[v62] - v67;
            v109[v62] = v64;
            v66 = v99 + 1;
          }
          while (v64 < v65);
        }
        ++v62;
        ++v63;
      }
      while (v62 != v61);
    }
  }
  if ((v100 & 1) == 0)
    llvm::IntervalMapImpl::Path::moveLeft(v8, v33);
  v68 = 0;
  for (i = v54; ; --i)
  {
    v70 = *((_QWORD *)&v107 + v68);
    v71 = v106[v68];
    v72 = v71 - 1;
    v73 = *(_QWORD *)(v70 + 16 * v72 + 8);
    if ((_DWORD)v51 && v68 == v51)
    {
      LODWORD(v33) = v33 + sub_1C5295EC0((uint64_t)a1, v33, v70 & 0xFFFFFFFFFFFFFFC0 | v72, v73);
    }
    else
    {
      v74 = *(_QWORD *)v8;
      *(_DWORD *)(*(_QWORD *)v8 + 16 * v33 + 8) = v71;
      if ((_DWORD)v33)
        *(_QWORD *)(*(_QWORD *)(v74 + 16 * (v33 - 1))
                  + 8 * *(unsigned int *)(v74 + 16 * (v33 - 1) + 12)) = *(_QWORD *)(*(_QWORD *)(v74 + 16 * (v33 - 1)) + 8 * *(unsigned int *)(v74 + 16 * (v33 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v72;
      sub_1C5111404((uint64_t)a1, v33, v73);
    }
    if (v68 + 1 == v105)
      break;
    v75 = 0;
    ++v68;
    v76 = *(_QWORD *)v8;
    while (1)
    {
      v77 = v75;
      if ((_DWORD)v33 + v75 == 1)
        break;
      v78 = (v33 - 1 + v75);
      v80 = *(_DWORD *)(v76 + 16 * v78 + 8);
      v79 = *(_DWORD *)(v76 + 16 * v78 + 12);
      --v75;
      if (v79 != v80 - 1)
        goto LABEL_86;
    }
    v78 = 0;
    v80 = *(_DWORD *)(v76 + 8);
    v79 = *(_DWORD *)(v76 + 12);
LABEL_86:
    v81 = v79 + 1;
    *(_DWORD *)(v76 + 16 * v78 + 12) = v81;
    if (v81 != v80)
    {
      v82 = *(_QWORD *)(*(_QWORD *)(v76 + 16 * v78) + 8 * v81);
      if (v77)
      {
        do
        {
          v84 = *(_QWORD *)v8 + 16 * (v33 + v77);
          *(_QWORD *)v84 = v82 & 0xFFFFFFFFFFFFFFC0;
          *(_DWORD *)(v84 + 8) = (v82 & 0x3F) + 1;
          *(_DWORD *)(v84 + 12) = 0;
          v82 = *(_QWORD *)(v82 & 0xFFFFFFFFFFFFFFC0);
          v85 = __CFADD__(v77++, 1);
        }
        while (!v85);
        v76 = *(_QWORD *)v8;
      }
      v83 = (unint64_t *)(v76 + 16 * v33);
      *v83 = v82 & 0xFFFFFFFFFFFFFFC0;
      v83[1] = (v82 & 0x3F) + 1;
    }
  }
  if ((_DWORD)v68 != (_DWORD)v104)
  {
    do
    {
      llvm::IntervalMapImpl::Path::moveLeft(v8, v33);
      v85 = __CFADD__(i++, 1);
    }
    while (!v85);
  }
  v86 = *((_QWORD *)a1 + 1);
  *(_DWORD *)(v86 + 16 * v33 + 12) = HIDWORD(v104);
  v87 = (_DWORD *)(v86 + 16 * a1[4]);
  v88 = *--v87;
  v89 = *(v87 - 1);
  v29 = v88 == v89;
  a3 = v103;
  result = sub_1C5295088(*(_QWORD *)(v87 - 3), v87, v89, v101, v103, v102);
LABEL_97:
  v90 = a1[4];
  v91 = *((_QWORD *)a1 + 1);
  v92 = v90 - 1;
  *(_DWORD *)(v91 + 16 * (v90 - 1) + 8) = result;
  if (v90 != 1)
  {
    v93 = v91 + 16 * (v90 - 2);
    *(_QWORD *)(*(_QWORD *)v93 + 8 * *(unsigned int *)(v93 + 12)) = *(_QWORD *)(*(_QWORD *)v93
                                                                                + 8 * *(unsigned int *)(v93 + 12)) & 0xFFFFFFFFFFFFFFC0 | (result - 1);
  }
  if (v29)
    return sub_1C5111404((uint64_t)a1, v92, a3);
  return result;
}

uint64_t sub_1C5295A34(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int *v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;

  v3 = result;
  v5 = *(_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  v6 = *(unsigned int *)(result + 16);
  v7 = v4 + 16 * v6;
  v8 = *(_QWORD **)(v7 - 16);
  v9 = *(_DWORD *)(v7 - 8);
  if (v9 == 1)
  {
    v10 = *(_QWORD **)(v5 + 192);
    *v8 = *v10;
    *v10 = v8;
    result = (uint64_t)sub_1C5295C58((_DWORD *)result, *(_DWORD *)(v5 + 184));
    if (a2)
    {
      if (*(_DWORD *)(v5 + 184))
      {
        v11 = *(unsigned int *)(v3 + 16);
        if ((_DWORD)v11)
        {
          v12 = *(_QWORD *)(v3 + 8);
          if (*(_DWORD *)(v12 + 12) < *(_DWORD *)(v12 + 8))
          {
            v13 = (int *)(v12 + 12);
            v14 = *(unsigned int *)(v3 + 16);
            while (1)
            {
              v15 = *v13;
              v13 += 4;
              if (v15)
                break;
              if (!--v14)
              {
                v16 = *(_QWORD **)(v12 + 16 * v11 - 16);
                goto LABEL_26;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v17 = *(_DWORD *)(v7 - 4);
    if (v17 + 1 != v9)
    {
      do
      {
        *(_OWORD *)&v8[2 * v17] = *(_OWORD *)&v8[2 * v17 + 2];
        *((_DWORD *)v8 + v17 + 36) = *((_DWORD *)v8 + v17 + 37);
        ++v17;
      }
      while (v9 - 1 != v17);
      v6 = *(unsigned int *)(result + 16);
      v9 = *(_DWORD *)(v4 + 16 * v6 - 8);
    }
    v18 = v4 + 16 * v6;
    v19 = *(unsigned int *)(v5 + 184);
    *(_DWORD *)(v4 + 16 * v19 + 8) = v9 - 1;
    if ((_DWORD)v19)
    {
      v20 = v4 + 16 * (v19 - 1);
      *(_QWORD *)(*(_QWORD *)v20 + 8 * *(unsigned int *)(v20 + 12)) = *(_QWORD *)(*(_QWORD *)v20
                                                                                  + 8 * *(unsigned int *)(v20 + 12)) & 0xFFFFFFFFFFFFFFC0 | (v9 - 2);
    }
    if (*(_DWORD *)(v18 - 4) == v9 - 1)
    {
      result = sub_1C5111404(result, v19, v8[2 * (v9 - 2) + 1]);
      v21 = 0;
      v22 = *(unsigned int *)(v5 + 184);
      v23 = *(_QWORD *)(v3 + 8);
      v24 = v22 - 1;
      while (1)
      {
        v25 = v21;
        v26 = (v24 + v21);
        if (!(v24 + v21))
          break;
        v28 = *(_DWORD *)(v23 + 16 * v26 + 8);
        v27 = *(_DWORD *)(v23 + 16 * v26 + 12);
        --v21;
        if (v27 != v28 - 1)
          goto LABEL_28;
      }
      v26 = 0;
      v28 = *(_DWORD *)(v23 + 8);
      v27 = *(_DWORD *)(v23 + 12);
LABEL_28:
      v32 = v27 + 1;
      *(_DWORD *)(v23 + 16 * v26 + 12) = v32;
      if (v32 != v28)
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v23 + 16 * v26) + 8 * v32);
        if (v25)
        {
          do
          {
            v35 = *(_QWORD *)(v3 + 8) + 16 * (v22 + v25);
            *(_QWORD *)v35 = v33 & 0xFFFFFFFFFFFFFFC0;
            *(_DWORD *)(v35 + 8) = (v33 & 0x3F) + 1;
            *(_DWORD *)(v35 + 12) = 0;
            v33 = *(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFC0);
          }
          while (!__CFADD__(v25++, 1));
          v23 = *(_QWORD *)(v3 + 8);
        }
        v34 = (unint64_t *)(v23 + 16 * v22);
        *v34 = v33 & 0xFFFFFFFFFFFFFFC0;
        v34[1] = (v33 & 0x3F) + 1;
      }
    }
    else if (a2)
    {
      if ((_DWORD)v6)
      {
        v29 = v6;
        v30 = (int *)(v4 + 12);
        while (1)
        {
          v31 = *v30;
          v30 += 4;
          if (v31)
            break;
          if (!--v29)
            goto LABEL_25;
        }
      }
      else
      {
LABEL_25:
        v16 = *(_QWORD **)(v18 - 16);
LABEL_26:
        *(_QWORD *)v5 = *v16;
      }
    }
  }
  return result;
}

_DWORD *sub_1C5295C58(_DWORD *result, unsigned int a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  _DWORD *v10;
  int v11;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = result;
  v5 = *(_QWORD *)result;
  v4 = *((_QWORD *)result + 1);
  v6 = a2 - 1;
  if (a2 == 1)
  {
    v14 = *(_DWORD *)(v4 + 12);
    v15 = *(_DWORD *)(v5 + 188);
    if (v14 + 1 != v15)
    {
      do
      {
        *(_QWORD *)(v5 + 8 + 8 * v14) = *(_QWORD *)(v5 + 8 + 8 * (v14 + 1));
        *(_QWORD *)(v5 + 96 + 8 * v14) = *(_QWORD *)(v5 + 96 + 8 * (v14 + 1));
        ++v14;
      }
      while (v15 - 1 != v14);
    }
    v16 = v15 - 1;
    *(_DWORD *)(v5 + 188) = v16;
    *(_DWORD *)(v4 + 8) = v16;
    if (!v16)
    {
      *(_OWORD *)(v5 + 172) = 0u;
      *(_OWORD *)(v5 + 144) = 0u;
      *(_OWORD *)(v5 + 160) = 0u;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)v5 = 0u;
      return sub_1C5294A90(result, 0);
    }
  }
  else
  {
    v7 = v4 + 16 * v6;
    v8 = *(_QWORD **)(v4 + 16 * (a2 - 1));
    v11 = *(_DWORD *)(v7 + 8);
    v10 = (_DWORD *)(v7 + 8);
    v9 = v11;
    v12 = v11 - 1;
    if (v11 == 1)
    {
      v13 = *(_QWORD **)(v5 + 192);
      *v8 = *v13;
      *v13 = v8;
      result = (_DWORD *)sub_1C5295C58(result, a2 - 1);
    }
    else
    {
      v17 = *(_DWORD *)(v4 + 16 * v6 + 12);
      if (v17 + 1 != v9)
      {
        v18 = *(_DWORD *)(v4 + 16 * v6 + 12);
        do
        {
          v8[v18] = v8[v18 + 1];
          v8[v18 + 12] = v8[v18 + 13];
          ++v18;
        }
        while (v12 != v18);
      }
      *v10 = v12;
      v19 = a2 - 2;
      v20 = (uint64_t *)(v4 + 16 * (a2 - 2));
      v21 = *((unsigned int *)v20 + 3);
      v22 = *v20;
      v23 = *(_QWORD *)(*v20 + 8 * v21);
      v24 = (v9 - 2);
      *(_QWORD *)(v22 + 8 * v21) = v23 & 0xFFFFFFFFFFFFFFC0 | v24;
      if (v17 == v12)
      {
        result = (_DWORD *)sub_1C5111404((uint64_t)result, a2 - 1, v8[v24 + 12]);
        v25 = 0;
        v26 = *((_QWORD *)v3 + 1);
        while (1)
        {
          v27 = v25;
          v28 = v19 + v25;
          if (!(v19 + v25))
            break;
          v30 = *(_DWORD *)(v26 + 16 * v28 + 8);
          v29 = *(_DWORD *)(v26 + 16 * v28 + 12);
          --v25;
          if (v29 != v30 - 1)
            goto LABEL_17;
        }
        v28 = 0;
        v30 = *(_DWORD *)(v26 + 8);
        v29 = *(_DWORD *)(v26 + 12);
LABEL_17:
        v31 = v29 + 1;
        *(_DWORD *)(v26 + 16 * v28 + 12) = v31;
        if (v31 != v30)
        {
          v32 = *(_QWORD *)(*(_QWORD *)(v26 + 16 * v28) + 8 * v31);
          if (v27)
          {
            do
            {
              v37 = *((_QWORD *)v3 + 1) + 16 * (v6 + v27);
              *(_QWORD *)v37 = v32 & 0xFFFFFFFFFFFFFFC0;
              *(_DWORD *)(v37 + 8) = (v32 & 0x3F) + 1;
              *(_DWORD *)(v37 + 12) = 0;
              v32 = *(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFC0);
            }
            while (!__CFADD__(v27++, 1));
            v26 = *((_QWORD *)v3 + 1);
          }
          v33 = (unint64_t *)(v26 + 16 * v6);
          *v33 = v32 & 0xFFFFFFFFFFFFFFC0;
          v33[1] = (v32 & 0x3F) + 1;
        }
      }
    }
  }
  if (v3[4])
  {
    v34 = *((_QWORD *)v3 + 1);
    if (*(_DWORD *)(v34 + 12) < *(_DWORD *)(v34 + 8))
    {
      v35 = *(_QWORD *)(*(_QWORD *)(v34 + 16 * v6)
                      + 8 * *(unsigned int *)(v34 + 16 * v6 + 12));
      v36 = v34 + 16 * a2;
      *(_QWORD *)v36 = v35 & 0xFFFFFFFFFFFFFFC0;
      *(_DWORD *)(v36 + 8) = (v35 & 0x3F) + 1;
      *(_DWORD *)(*((_QWORD *)v3 + 1) + 16 * a2 + 12) = 0;
    }
  }
  return result;
}

BOOL sub_1C5295EC0(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  llvm::IntervalMapImpl::Path *v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  BOOL v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83[4];
  __int128 v84[2];
  _DWORD v85[4];
  uint64_t v86;

  v4 = a4;
  v5 = a3;
  v6 = a2;
  v86 = *MEMORY[0x1E0C80C00];
  v9 = (llvm::IntervalMapImpl::Path *)(a1 + 8);
  v8 = *(_QWORD *)a1;
  v10 = a2 == 1;
  if (a2 == 1)
  {
    v11 = *(_DWORD *)(v8 + 188);
    if (v11 <= 0xA)
    {
      v12 = v8 + 8;
      v13 = *(_QWORD *)v9;
      v14 = *(unsigned int *)(*(_QWORD *)v9 + 12);
      if (v11 != (_DWORD)v14)
      {
        v15 = *(_DWORD *)(v8 + 188);
        do
        {
          *(_QWORD *)(v12 + 8 * v15) = *(_QWORD *)(v12 + 8 * (v15 - 1));
          *(_QWORD *)(v8 + 96 + 8 * v15) = *(_QWORD *)(v8 + 96 + 8 * (v15 - 1));
          --v15;
        }
        while ((_DWORD)v14 != v15);
      }
      v10 = 0;
      v16 = (_QWORD *)(v12 + 8 * v14);
      *v16 = a3;
      v16[11] = a4;
      v17 = v11 + 1;
      *(_DWORD *)(v8 + 188) = v17;
      *(_DWORD *)(v13 + 8) = v17;
      v18 = *(_QWORD *)(*(_QWORD *)v13 + 8 * v14);
      *(_QWORD *)(v13 + 16) = v18 & 0xFFFFFFFFFFFFFFC0;
      *(_DWORD *)(v13 + 24) = (v18 & 0x3F) + 1;
      return v10;
    }
    v19 = sub_1C52966B8(*(_QWORD *)a1, *(unsigned int *)(*(_QWORD *)v9 + 12));
    v20 = *(_DWORD *)(v8 + 188);
    v21 = *(_QWORD *)v9;
    *(_QWORD *)v21 = v8 + 8;
    *(_DWORD *)(v21 + 8) = v20;
    *(_DWORD *)(v21 + 12) = v19;
    v22 = *(_QWORD *)(**(_QWORD **)v9 + 8 * *(unsigned int *)(*(_QWORD *)v9 + 12));
    v23 = *(_QWORD *)v9 + 16;
    *(_QWORD *)&v84[0] = v22 & 0xFFFFFFFFFFFFFFC0;
    *((_QWORD *)&v84[0] + 1) = (v19 & 0xFFFFFFFF00000000 | v22 & 0x3F) + 1;
    sub_1C5DF93CC((uint64_t)v9, v23, v84);
    v6 = 2;
  }
  v24 = (v6 - 1);
  if (!*(_DWORD *)(a1 + 16)
    || (v25 = *(_QWORD *)v9, *(_DWORD *)(*(_QWORD *)v9 + 12) >= *(_DWORD *)(*(_QWORD *)v9 + 8)))
  {
    llvm::IntervalMapImpl::Path::moveLeft(v9, v6 - 1);
    v25 = *(_QWORD *)v9;
    ++*(_DWORD *)(*(_QWORD *)v9 + 16 * v24 + 12);
  }
  v26 = *(_DWORD *)(v25 + 16 * v24 + 8);
  if (v26 == 12)
  {
    memset(v84, 0, sizeof(v84));
    v37 = *(unsigned int *)(v25 + 16 * v24 + 12);
    v38 = v6 - 2;
    v39 = v6 - 2;
    v40 = v6;
    v81 = v5;
    v82 = v4;
    while (1)
    {
      v41 = v39;
      if (!v39)
        break;
      v42 = *(_DWORD *)(v25 + 16 * v39 + 12);
      --v40;
      --v39;
      if (v42)
        goto LABEL_27;
    }
    v42 = *(_DWORD *)(v25 + 12);
    v40 = 1;
    if (!v42)
    {
      LODWORD(v43) = 0;
      goto LABEL_31;
    }
LABEL_27:
    v43 = *(_QWORD *)(*(_QWORD *)(v25 + 16 * v41) + 8 * (v42 - 1));
    if (v40 != (_DWORD)v24)
    {
      v80 = ~v40 + v6;
      do
      {
        v43 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFFC0) + 8 * (v43 & 0x3F));
        --v80;
      }
      while (v80);
    }
    if (v43)
    {
      LOBYTE(v40) = 0;
      v42 = (v43 & 0x3F) + 1;
      v85[0] = v42;
      v37 = (v42 + v37);
      *(_QWORD *)&v84[0] = v43 & 0xFFFFFFFFFFFFFFC0;
      LODWORD(v43) = 1;
    }
    else
    {
      v42 = 0;
      LOBYTE(v40) = 1;
    }
LABEL_31:
    v44 = v25 + 16 * v24;
    v45 = *(_DWORD *)(v44 + 8);
    v85[v43] = v45;
    v46 = v45 + v42;
    v47 = (v43 + 1);
    *(_QWORD *)((unint64_t)v84 | (8 * v43)) = *(_QWORD *)v44;
    v48 = v6;
    while (1)
    {
      v49 = v38;
      if (!v38)
        break;
      v50 = *(_DWORD *)(v25 + 16 * v38 + 12);
      v51 = *(_DWORD *)(v25 + 16 * v38 + 8) - 1;
      --v48;
      --v38;
      if (v50 != v51)
        goto LABEL_36;
    }
    v50 = *(_DWORD *)(v25 + 12);
    v51 = *(_DWORD *)(v25 + 8) - 1;
    v48 = 1;
LABEL_36:
    if (v50 != v51)
    {
      v52 = *(_QWORD *)(*(_QWORD *)(v25 + 16 * v49) + 8 * (v50 + 1));
      if (v48 != (_DWORD)v24)
      {
        v79 = ~v48 + v6;
        do
        {
          v52 = *(_QWORD *)(v52 & 0xFFFFFFFFFFFFFFC0);
          --v79;
        }
        while (v79);
      }
      if (v52)
      {
        v53 = (v52 & 0x3F) + 1;
        v85[v47] = v53;
        v46 += v53;
        *((_QWORD *)v84 + v47) = v52 & 0xFFFFFFFFFFFFFFC0;
        v47 = v43 | 2;
      }
    }
    if (v46 + 1 <= (12 * v47))
    {
      LODWORD(v54) = 0;
    }
    else
    {
      if ((_DWORD)v47 == 1)
        v54 = 1;
      else
        v54 = (v47 - 1);
      v85[v47] = v85[v54];
      *((_QWORD *)v84 + v47) = *((_QWORD *)v84 + v54);
      v85[v54] = 0;
      v55 = *(unint64_t **)(*(_QWORD *)a1 + 192);
      v56 = *v55;
      if (*v55)
        *v55 = *(_QWORD *)v56;
      else
        v56 = sub_1C484358C((uint64_t)(v55 + 1), 192, 6);
      *(_OWORD *)(v56 + 160) = 0u;
      *(_OWORD *)(v56 + 176) = 0u;
      *(_OWORD *)(v56 + 128) = 0u;
      *(_OWORD *)(v56 + 144) = 0u;
      *(_OWORD *)(v56 + 96) = 0u;
      *(_OWORD *)(v56 + 112) = 0u;
      *(_OWORD *)(v56 + 64) = 0u;
      *(_OWORD *)(v56 + 80) = 0u;
      *(_OWORD *)(v56 + 32) = 0u;
      *(_OWORD *)(v56 + 48) = 0u;
      v47 = (v47 + 1);
      *(_OWORD *)v56 = 0u;
      *(_OWORD *)(v56 + 16) = 0u;
      *((_QWORD *)v84 + v54) = v56;
    }
    v57 = llvm::IntervalMapImpl::distribute((llvm::IntervalMapImpl *)v47, v46, 0xCu, v85, v83, (unsigned int *)v37, 1);
    v58 = v47;
    sub_1C6213808((uint64_t)v84, v47, (uint64_t)v85, (uint64_t)v83);
    if ((v40 & 1) == 0)
      llvm::IntervalMapImpl::Path::moveLeft(v9, v6 - 1);
    v59 = 0;
    v10 = 0;
    v60 = v57;
    v61 = v24;
    while (1)
    {
      v62 = *((_QWORD *)v84 + v59);
      v63 = v83[v59];
      v64 = v63 - 1;
      v65 = *(_QWORD *)(v62 + 8 * v64 + 96);
      if ((_DWORD)v54 && v59 == v54)
      {
        v66 = sub_1C5295EC0(a1, v61, v62 & 0xFFFFFFFFFFFFFFC0 | v64, v65);
        v10 = v66;
        v61 = (v61 + v66);
      }
      else
      {
        v67 = *(_QWORD *)v9;
        *(_DWORD *)(*(_QWORD *)v9 + 16 * v61 + 8) = v63;
        if ((_DWORD)v61)
          *(_QWORD *)(*(_QWORD *)(v67 + 16 * (v61 - 1))
                    + 8 * *(unsigned int *)(v67 + 16 * (v61 - 1) + 12)) = *(_QWORD *)(*(_QWORD *)(v67 + 16 * (v61 - 1)) + 8 * *(unsigned int *)(v67 + 16 * (v61 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v64;
        sub_1C5111404(a1, v61, v65);
      }
      if (v59 + 1 == v58)
        break;
      v68 = 0;
      ++v59;
      v69 = *(_QWORD *)v9;
      while (1)
      {
        v70 = v68;
        if ((_DWORD)v61 + v68 == 1)
          break;
        v71 = (v61 - 1 + v68);
        v73 = *(_DWORD *)(v69 + 16 * v71 + 8);
        v72 = *(_DWORD *)(v69 + 16 * v71 + 12);
        --v68;
        if (v72 != v73 - 1)
          goto LABEL_64;
      }
      v71 = 0;
      v73 = *(_DWORD *)(v69 + 8);
      v72 = *(_DWORD *)(v69 + 12);
LABEL_64:
      v74 = v72 + 1;
      *(_DWORD *)(v69 + 16 * v71 + 12) = v74;
      if (v74 != v73)
      {
        v75 = *(_QWORD *)(*(_QWORD *)(v69 + 16 * v71) + 8 * v74);
        if (v70)
        {
          do
          {
            v77 = *(_QWORD *)v9 + 16 * (v61 + v70);
            *(_QWORD *)v77 = v75 & 0xFFFFFFFFFFFFFFC0;
            *(_DWORD *)(v77 + 8) = (v75 & 0x3F) + 1;
            *(_DWORD *)(v77 + 12) = 0;
            v75 = *(_QWORD *)(v75 & 0xFFFFFFFFFFFFFFC0);
            v78 = __CFADD__(v70++, 1);
          }
          while (!v78);
          v69 = *(_QWORD *)v9;
        }
        v76 = (unint64_t *)(v69 + 16 * v61);
        *v76 = v75 & 0xFFFFFFFFFFFFFFC0;
        v76[1] = (v75 & 0x3F) + 1;
      }
      --v60;
    }
    if ((_DWORD)v59 != (_DWORD)v57)
    {
      do
      {
        llvm::IntervalMapImpl::Path::moveLeft(v9, v61);
        v78 = __CFADD__(v60++, 1);
      }
      while (!v78);
    }
    v25 = *(_QWORD *)v9;
    *(_DWORD *)(*(_QWORD *)v9 + 16 * v61 + 12) = HIDWORD(v57);
    v24 = v24 + v10;
    v26 = *(_DWORD *)(v25 + 16 * v24 + 8);
    v5 = v81;
    v4 = v82;
  }
  v27 = (uint64_t *)(v25 + 16 * v24);
  v28 = *v27;
  v29 = *((unsigned int *)v27 + 3);
  v30 = v27 + 1;
  if (v26 != (_DWORD)v29)
  {
    v31 = v26;
    do
    {
      *(_QWORD *)(v28 + 8 * v31) = *(_QWORD *)(v28 + 8 * (v31 - 1));
      *(_QWORD *)(v28 + 96 + 8 * v31) = *(_QWORD *)(v28 + 96 + 8 * (v31 - 1));
      --v31;
    }
    while ((_DWORD)v29 != v31);
  }
  v32 = (_QWORD *)(v28 + 8 * v29);
  *v32 = v5;
  v32[12] = v4;
  *v30 = v26 + 1;
  if ((_DWORD)v24)
  {
    v33 = v25 + 16 * (v24 - 1);
    *(_QWORD *)(*(_QWORD *)v33 + 8 * *(unsigned int *)(v33 + 12)) = *(_QWORD *)(*(_QWORD *)v33
                                                                                + 8 * *(unsigned int *)(v33 + 12)) & 0xFFFFFFFFFFFFFFC0 | v26;
  }
  if (v26 == (_DWORD)v29)
  {
    sub_1C5111404(a1, v24, v4);
    v25 = *(_QWORD *)(a1 + 8);
    v28 = *(_QWORD *)(v25 + 16 * v24);
  }
  v34 = *(_QWORD *)(v28 + 8 * *(unsigned int *)(v25 + 16 * v24 + 12));
  v35 = v25 + 16 * (v24 + 1);
  *(_QWORD *)v35 = v34 & 0xFFFFFFFFFFFFFFC0;
  *(_DWORD *)(v35 + 8) = (v34 & 0x3F) + 1;
  return v10;
}

uint64_t sub_1C5296560(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  _DWORD *v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if ((int)a5 < 1)
  {
    v15 = -a5;
    v16 = 9 - a4;
    if (v15 < a2)
      LODWORD(v17) = -a5;
    else
      LODWORD(v17) = a2;
    if (v16 >= v17)
      v17 = v17;
    else
      v17 = v16;
    if ((_DWORD)v17)
    {
      v18 = (_DWORD *)(a1 + 144);
      v19 = (uint64_t *)(a1 + 8);
      v20 = v17;
      do
      {
        v21 = (_QWORD *)(a3 + 16 * a4);
        *v21 = *(v19 - 1);
        v23 = *v19;
        v19 += 2;
        v22 = v23;
        LODWORD(v23) = *v18++;
        v21[1] = v22;
        *(_DWORD *)(a3 + 4 * a4++ + 144) = v23;
        --v20;
      }
      while (v20);
    }
    if (a2 != (_DWORD)v17)
    {
      v24 = 0;
      if (a2 < (unint64_t)v15)
        v15 = a2;
      if (v15 < v16)
        v16 = v15;
      do
      {
        *(_OWORD *)(a1 + 16 * v24) = *(_OWORD *)(a1 + 16 * (v16 + v24));
        *(_DWORD *)(a1 + 4 * v24 + 144) = *(_DWORD *)(a1 + 4 * (v16 + v24) + 144);
        ++v24;
      }
      while (a2 - (_DWORD)v17 != (_DWORD)v24);
    }
    return -(int)v17;
  }
  else
  {
    v5 = 9 - a2;
    if (a4 >= a5)
      LODWORD(v6) = a5;
    else
      LODWORD(v6) = a4;
    if (v5 >= v6)
      v6 = v6;
    else
      v6 = v5;
    if (a2)
    {
      v7 = a2 - 1;
      v8 = -a2;
      v9 = a5;
      if (a5 >= (unint64_t)a4)
        v9 = a4;
      if (v9 < v5)
        v5 = v9;
      do
      {
        *(_OWORD *)(a1 + 16 * (v5 + v7)) = *(_OWORD *)(a1 + 16 * v7);
        *(_DWORD *)(a1 + 4 * (v5 + v7) + 144) = *(_DWORD *)(a1 + 4 * v7 + 144);
        --v7;
        v10 = __CFADD__(v8++, 1);
      }
      while (!v10);
    }
    if ((_DWORD)v6)
    {
      v11 = (_DWORD *)(a1 + 144);
      v12 = (_QWORD *)(a1 + 8);
      v13 = -(int)v6;
      do
      {
        v14 = (_QWORD *)(a3 + 16 * (a4 + v13));
        *(v12 - 1) = *v14;
        *v12 = v14[1];
        v12 += 2;
        *v11++ = *(_DWORD *)(a3 + 4 * (a4 + v13) + 144);
        v10 = __CFADD__(v13++, 1);
      }
      while (!v10);
    }
  }
  return v6;
}

uint64_t sub_1C52966B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(unsigned int *)(a1 + 188);
  v5 = *(unint64_t **)(a1 + 192);
  v6 = *v5;
  if (*v5)
    *v5 = *(_QWORD *)v6;
  else
    v6 = sub_1C484358C((uint64_t)(v5 + 1), 192, 6);
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  if ((_DWORD)v4)
  {
    v7 = (uint64_t *)(a1 + 96);
    v8 = (_QWORD *)v6;
    v9 = v4;
    do
    {
      *v8 = *(v7 - 11);
      v10 = *v7++;
      v8[12] = v10;
      ++v8;
      --v9;
    }
    while (v9);
  }
  v11 = (v4 - 1);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFC0 | v11 & 0xFFFFFFFFFFFFFFC0)
                                   + 8 * v11
                                   + 0x60);
  *(_QWORD *)(a1 + 8) = v6 & 0xFFFFFFFFFFFFFFC0 | v11;
  ++*(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 188) = 1;
  return a2 << 32;
}

_DWORD *sub_1C5296788(_DWORD *a1, uint64_t a2)
{
  int v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = a1[4];
  v4 = a1 + 2;
  v5 = *((_QWORD *)a1 + 1) + 16 * (v3 - 1);
  v6 = *(_DWORD *)(*(_QWORD *)a1 + 184);
  v7 = *(_QWORD *)(*(_QWORD *)v5 + 8 * *(unsigned int *)(v5 + 12));
  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = (a2 >> 1) & 3;
  v10 = v6 - v3;
  if (v6 != v3)
  {
    do
    {
      v14 = v7 & 0xFFFFFFFFFFFFFFC0;
      LODWORD(v15) = -1;
      do
      {
        v15 = (v15 + 1);
        v16 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFC0) + 8 * v15 + 0x60);
      }
      while (((v16 >> 1) & 3 | *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v8 + 24) | v9));
      sub_1C4A079DC(v4, v7, v15);
      v7 = *(_QWORD *)(v14 + 8 * v15);
      --v10;
    }
    while (v10);
  }
  LODWORD(v11) = -1;
  do
  {
    v11 = (v11 + 1);
    v12 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFC0) + 16 * v11 + 8);
  }
  while (((v12 >> 1) & 3 | *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v8 + 24) | v9));
  return sub_1C4A079DC(v4, v7, v11);
}

uint64_t sub_1C5296874(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(unsigned int *)(result + 16);
  *(_QWORD *)(*(_QWORD *)(v2 + 16 * v3 - 16) + 16 * *(unsigned int *)(v2 + 16 * v3 - 4) + 8) = a2;
  if (*(_DWORD *)(v2 + 16 * (v3 - 1) + 12) == *(_DWORD *)(v2 + 16 * (v3 - 1) + 8) - 1)
    return sub_1C5111404(result, (int)v3 - 1, a2);
  return result;
}

uint64_t sub_1C52968B4(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;

  v2 = 0;
  v3 = a1 + 8;
  v4 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3;
  do
  {
    v5 = v2;
    v6 = *(_QWORD *)(v3 + 8 * v2 + 88);
    v7 = (v6 >> 1) & 3 | *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24);
    v2 = v5 + 1;
  }
  while (v7 <= v4);
  v8 = v5;
  v9 = *(_DWORD *)(a1 + 184);
  v10 = *(_QWORD *)(v3 + 8 * v8);
  v11 = v9 - 1;
  if (v9 != 1)
  {
    do
    {
      v18 = 0;
      v19 = v10 & 0xFFFFFFFFFFFFFFC0;
      do
      {
        v20 = v18;
        v21 = *(_QWORD *)(v19 + 8 * v18 + 96);
        v22 = (v21 >> 1) & 3 | *(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 24);
        v18 = v20 + 1;
      }
      while (v22 <= v4);
      v10 = *(_QWORD *)(v19 + 8 * v20);
      --v11;
    }
    while (v11);
  }
  v12 = 0;
  v13 = v10 & 0xFFFFFFFFFFFFFFC0;
  do
  {
    v14 = v12;
    v15 = *(_QWORD *)(v13 + 16 * v12 + 8);
    v16 = (v15 >> 1) & 3 | *(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24);
    v12 = v14 + 1;
  }
  while (v16 <= v4);
  if (v4 < ((*(_QWORD *)(v13 + 16 * v14) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v13 + 16 * v14) & 0xFFFFFFFFFFFFFFF8)
                                                                                + 24)))
    return 0;
  else
    return *(unsigned int *)(v13 + 4 * v14 + 144);
}

uint64_t sub_1C52969B4(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeSlotIndexesPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Merge disjoint stack slots";
  *(_QWORD *)(v2 + 8) = 26;
  *(_QWORD *)(v2 + 16) = "stack-coloring";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F7001;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5297264;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

llvm *sub_1C5296A48(llvm *a1, const char *a2, uint64_t a3)
{
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  size_t v7;
  uint64_t v8;
  int v9;
  llvm *result;
  _WORD *v11;
  unsigned int i;
  llvm *v13;
  _BYTE *v14;

  v5 = llvm::dbgs(a1);
  v6 = v5;
  if (a2)
  {
    v7 = strlen(a2);
    v5 = (llvm::raw_ostream *)*((_QWORD *)v6 + 4);
    if (v7 <= *((_QWORD *)v6 + 3) - (_QWORD)v5)
    {
      if (v7)
      {
        v5 = (llvm::raw_ostream *)memcpy(v5, a2, v7);
        *((_QWORD *)v6 + 4) += v7;
      }
    }
    else
    {
      v5 = llvm::raw_ostream::write(v6, a2, v7);
      v6 = v5;
    }
  }
  v8 = *((_QWORD *)v6 + 4);
  if ((unint64_t)(*((_QWORD *)v6 + 3) - v8) > 4)
  {
    *(_BYTE *)(v8 + 4) = 32;
    *(_DWORD *)v8 = 2065709600;
    *((_QWORD *)v6 + 4) += 5;
  }
  else
  {
    v5 = llvm::raw_ostream::write(v6, " : { ", 5uLL);
  }
  v9 = *(_DWORD *)(a3 + 64);
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v13 = llvm::dbgs(v5);
      v5 = sub_1C5E21910(v13, (*(_QWORD *)(*(_QWORD *)a3 + 8 * (i >> 6)) >> i) & 1, 0, 0, 0);
      v14 = (_BYTE *)*((_QWORD *)v13 + 4);
      if (*((_BYTE **)v13 + 3) == v14)
      {
        v5 = llvm::raw_ostream::write(v13, " ", 1uLL);
      }
      else
      {
        *v14 = 32;
        ++*((_QWORD *)v13 + 4);
      }
    }
  }
  result = llvm::dbgs(v5);
  v11 = (_WORD *)*((_QWORD *)result + 4);
  if (*((_QWORD *)result + 3) - (_QWORD)v11 <= 1uLL)
    return llvm::raw_ostream::write(result, "}\n", 2uLL);
  *v11 = 2685;
  *((_QWORD *)result + 4) += 2;
  return result;
}

llvm *sub_1C5296BE8(uint64_t a1, uint64_t a2)
{
  llvm *v3;
  uint64_t v4;
  llvm *v5;
  llvm *v6;
  llvm *v7;
  uint64_t v9;

  v9 = 0;
  v3 = (llvm *)sub_1C529B200(*(_QWORD *)(a1 + 264), *(_DWORD *)(a1 + 280), a2, &v9);
  if ((_DWORD)v3)
    v4 = v9;
  else
    v4 = *(_QWORD *)(a1 + 264) + 296 * *(unsigned int *)(a1 + 280);
  v5 = sub_1C5296A48(v3, "BEGIN", v4 + 8);
  v6 = sub_1C5296A48(v5, "END", v4 + 80);
  v7 = sub_1C5296A48(v6, "LIVE_IN", v4 + 152);
  return sub_1C5296A48(v7, "LIVE_OUT", v4 + 224);
}

void sub_1C5296C7C(uint64_t a1)
{
  _BYTE *v2;
  const void *v3;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  const void *v8;
  void *v9;
  unsigned int v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  llvm *v17;
  llvm::raw_ostream *v18;
  uint64_t v19;
  unint64_t v20;
  llvm::raw_ostream *v21;
  int v22;
  _WORD *v23;
  uint64_t ***v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ****v30;
  uint64_t ***v31;
  int v32;
  int v33;
  size_t *v34;
  const void *v35;
  size_t v36;
  size_t v37;
  unsigned int v38;
  unsigned int v39;
  _BYTE *v40;
  _BYTE v41[64];
  llvm *v42;
  llvm *v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  _BYTE v50[64];
  void *__p;
  char *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  void *v59;
  _BYTE *v60;
  void *v61;
  void *v62;
  unsigned int v63;
  unsigned int v64;
  void *v65;
  _BYTE *v66;

  sub_1C61D9C90(a1 + 256, &v54);
  v2 = v50;
  v45 = v50;
  v3 = v55;
  if (v55 == v54)
  {
    v46 = v50;
    v4 = v55;
  }
  else
  {
    v38 = v56;
    v2 = malloc_type_malloc(8 * v56, 0x4065EBACuLL);
    if (!v2)
    {
      if (v38)
        goto LABEL_83;
      v2 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v2)
        goto LABEL_83;
    }
    v46 = v2;
    v4 = v54;
    v3 = v55;
  }
  v5 = v57;
  v47 = v56;
  if (v3 == v4)
    v6 = v57;
  else
    v6 = v56;
  if (v6)
  {
    memmove(v2, v3, 8 * v6);
    v5 = v57;
  }
  v48 = v5;
  v49 = v58;
  v52 = 0;
  v53 = 0;
  __p = 0;
  sub_1C4D6CDA0(&__p, v59, v60, 0xAAAAAAAAAAAAAAABLL * ((v60 - (_BYTE *)v59) >> 3));
  v7 = v41;
  v8 = v62;
  if (v62 != v61)
  {
    v39 = v63;
    v7 = malloc_type_malloc(8 * v63, 0x4065EBACuLL);
    if (v7 || !v39 && (v7 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v40 = v7;
      v9 = v61;
      v8 = v62;
      goto LABEL_10;
    }
LABEL_83:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v40 = v41;
  v9 = v62;
LABEL_10:
  if (v8 == v9)
    v10 = v64;
  else
    v10 = v63;
  if (v10)
    memmove(v7, v8, 8 * v10);
  v43 = 0;
  v44 = 0;
  v42 = 0;
  sub_1C4D6CDA0(&v42, v65, v66, 0xAAAAAAAAAAAAAAABLL * ((v66 - (_BYTE *)v65) >> 3));
  while (1)
  {
    if (v52 - (_BYTE *)__p != v43 - v42)
      goto LABEL_30;
    if (__p == v52)
      break;
    v11 = (char *)v42 + 8;
    v12 = (char *)__p + 8;
    while (1)
    {
      v13 = v12 - 8;
      if (*((_QWORD *)v12 - 1) != *((_QWORD *)v11 - 1))
        break;
      v14 = v11[8];
      if (v12[8])
        v15 = v14 == 0;
      else
        v15 = 1;
      if (v15)
      {
        if ((v12[8] == 0) == (v14 != 0))
          break;
      }
      else if (*(_QWORD *)v12 != *(_QWORD *)v11)
      {
        break;
      }
      v11 += 24;
      v12 += 24;
      if (v13 + 24 == v52)
        goto LABEL_57;
    }
LABEL_30:
    v16 = *((_QWORD *)v52 - 3);
    v17 = llvm::dbgs(v42);
    v18 = v17;
    v19 = *((_QWORD *)v17 + 4);
    if ((unint64_t)(*((_QWORD *)v17 + 3) - v19) > 0x11)
    {
      *(_WORD *)(v19 + 16) = 8992;
      *(_OWORD *)v19 = *(_OWORD *)"Inspecting block #";
      *((_QWORD *)v17 + 4) += 18;
    }
    else
    {
      v18 = llvm::raw_ostream::write(v17, "Inspecting block #", 0x12uLL);
    }
    v20 = *(int *)(v16 + 24);
    if ((v20 & 0x80000000) != 0)
    {
      v20 = -(uint64_t)v20;
      v21 = v18;
      v22 = 1;
    }
    else
    {
      v21 = v18;
      v22 = 0;
    }
    sub_1C5E21910(v21, v20, 0, 0, v22);
    v23 = (_WORD *)*((_QWORD *)v18 + 4);
    if (*((_QWORD *)v18 + 3) - (_QWORD)v23 > 1uLL)
    {
      *v23 = 23328;
      *((_QWORD *)v18 + 4) += 2;
    }
    else
    {
      v18 = llvm::raw_ostream::write(v18, " [", 2uLL);
    }
    v24 = *(uint64_t ****)(v16 + 16);
    if (!v24 || (*((_BYTE *)v24 + 23) & 0x10) == 0)
    {
      v25 = (_WORD *)*((_QWORD *)v18 + 4);
      goto LABEL_50;
    }
    v26 = ***v24;
    v27 = *(_QWORD *)(v26 + 152);
    v28 = *(unsigned int *)(v26 + 168);
    if ((_DWORD)v28)
    {
      LODWORD(v29) = (v28 - 1) & ((v24 >> 4) ^ (v24 >> 9));
      v30 = (uint64_t ****)(v27 + 16 * v29);
      v31 = *v30;
      if (*v30 == v24)
        goto LABEL_46;
      v32 = 1;
      while (v31 != (uint64_t ***)-4096)
      {
        v33 = v29 + v32++;
        v29 = v33 & (v28 - 1);
        v31 = *(uint64_t ****)(v27 + 16 * v29);
        if (v31 == v24)
        {
          v30 = (uint64_t ****)(v27 + 16 * v29);
          goto LABEL_46;
        }
      }
    }
    v30 = (uint64_t ****)(v27 + 16 * v28);
LABEL_46:
    v34 = (size_t *)v30[1];
    v37 = *v34;
    v35 = v34 + 2;
    v36 = v37;
    v25 = (_WORD *)*((_QWORD *)v18 + 4);
    if (v37 <= *((_QWORD *)v18 + 3) - (_QWORD)v25)
    {
      if (v36)
      {
        memcpy(v25, v35, v36);
        v25 = (_WORD *)(*((_QWORD *)v18 + 4) + v36);
        *((_QWORD *)v18 + 4) = v25;
      }
    }
    else
    {
      v18 = llvm::raw_ostream::write(v18, (const char *)v35, v36);
      v25 = (_WORD *)*((_QWORD *)v18 + 4);
    }
LABEL_50:
    if (*((_QWORD *)v18 + 3) - (_QWORD)v25 > 1uLL)
    {
      *v25 = 2653;
      *((_QWORD *)v18 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v18, "]\n", 2uLL);
    }
    sub_1C5296BE8(a1, v16);
    sub_1C61D9EC8((char *)&v45);
  }
LABEL_57:
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  if (v40 != v41)
    free(v40);
  if (__p)
  {
    v52 = (char *)__p;
    operator delete(__p);
  }
  if (v46 != v45)
    free(v46);
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
  if (v62 != v61)
    free(v62);
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  if (v55 != v54)
    free(v55);
}

unsigned int *sub_1C529714C(unsigned int *result)
{
  uint64_t v1;
  unsigned int *v2;
  unint64_t i;
  llvm *v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = result[100];
  if ((_DWORD)v1)
  {
    v2 = result;
    for (i = 0; i != v1; ++i)
    {
      v4 = llvm::dbgs((llvm *)result);
      v5 = v4;
      v6 = *((_QWORD *)v4 + 4);
      if ((unint64_t)(*((_QWORD *)v4 + 3) - v6) > 8)
      {
        *(_BYTE *)(v6 + 8) = 91;
        *(_QWORD *)v6 = *(_QWORD *)"Interval[";
        *((_QWORD *)v4 + 4) += 9;
      }
      else
      {
        v5 = llvm::raw_ostream::write(v4, "Interval[", 9uLL);
      }
      sub_1C5E21910(v5, i, 0, 0, 0);
      v7 = *((_QWORD *)v5 + 4);
      if ((unint64_t)(*((_QWORD *)v5 + 3) - v7) > 2)
      {
        *(_BYTE *)(v7 + 2) = 10;
        *(_WORD *)v7 = 14941;
        *((_QWORD *)v5 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v5, "]:\n", 3uLL);
      }
      result = (unsigned int *)llvm::LiveInterval::dump(*(llvm::LiveInterval **)(*((_QWORD *)v2 + 49) + 8 * i));
    }
  }
  return result;
}

uint64_t sub_1C5297264()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8F7001);
  *(_QWORD *)v1 = &off_1E814AC98;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_DWORD *)(v1 + 280) = 0;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_DWORD *)(v1 + 304) = 0;
  *(_QWORD *)(v1 + 312) = v1 + 328;
  *(_QWORD *)(v1 + 320) = 0x800000000;
  *(_QWORD *)(v1 + 392) = v1 + 408;
  *(_QWORD *)(v1 + 400) = 0x1000000000;
  *(_QWORD *)(v1 + 536) = v1 + 552;
  *(_QWORD *)(v1 + 544) = 0x1000000000;
  *(_OWORD *)(v1 + 1320) = 0u;
  *(_QWORD *)(v1 + 1336) = v1 + 1352;
  *(_QWORD *)(v1 + 1344) = 0x400000000;
  *(_QWORD *)(v1 + 1384) = v1 + 1400;
  *(_QWORD *)(v1 + 1400) = 0;
  *(_QWORD *)(v1 + 1392) = 0;
  *(_QWORD *)(v1 + 1408) = 1;
  *(_QWORD *)(v1 + 1424) = v1 + 1440;
  *(_QWORD *)(v1 + 1432) = 0x800000000;
  *(_QWORD *)(v1 + 1504) = v1 + 1520;
  *(_QWORD *)(v1 + 1512) = 0x600000000;
  *(_DWORD *)(v1 + 1568) = 0;
  *(_QWORD *)(v1 + 1576) = v1 + 1592;
  *(_QWORD *)(v1 + 1584) = 0x600000000;
  *(_DWORD *)(v1 + 1640) = 0;
  *(_QWORD *)(v1 + 1648) = v1 + 1664;
  *(_QWORD *)(v1 + 1656) = 0x600000000;
  *(_DWORD *)(v1 + 1712) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7FFC48);
  if (v3 != -1)
  {
    v7[0] = sub_1C52969B4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7FFC48, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C5297400(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  void *v15;
  void *v16;
  void *v17;

  *(_QWORD *)a1 = &off_1E814AC98;
  v2 = *(void **)(a1 + 1648);
  if (v2 != (void *)(a1 + 1664))
    free(v2);
  v3 = *(void **)(a1 + 1576);
  if (v3 != (void *)(a1 + 1592))
    free(v3);
  v4 = *(void **)(a1 + 1504);
  if (v4 != (void *)(a1 + 1520))
    free(v4);
  v5 = *(void **)(a1 + 1424);
  if (v5 != (void *)(a1 + 1440))
    free(v5);
  sub_1C4926AE8(a1 + 1320);
  sub_1C618F3AC((char **)(a1 + 536));
  sub_1C6213ACC((char **)(a1 + 392));
  v6 = *(void **)(a1 + 312);
  if (v6 != (void *)(a1 + 328))
    free(v6);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 288), 8);
  v7 = *(_DWORD *)(a1 + 280);
  v8 = *(_QWORD *)(a1 + 264);
  if (v7)
  {
    v9 = 296 * v7;
    v10 = (_QWORD *)(v8 + 240);
    do
    {
      if ((*(v10 - 30) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v11 = (_QWORD *)*(v10 - 2);
        if (v10 != v11)
          free(v11);
        v12 = (char *)*(v10 - 11);
        if (v10 - 9 != (_QWORD *)v12)
          free(v12);
        v13 = (char *)*(v10 - 20);
        if (v10 - 18 != (_QWORD *)v13)
          free(v13);
        v14 = (char *)*(v10 - 29);
        if (v10 - 27 != (_QWORD *)v14)
          free(v14);
      }
      v10 += 37;
      v9 -= 296;
    }
    while (v9);
    v8 = *(_QWORD *)(a1 + 264);
  }
  MEMORY[0x1CAA32FB4](v8, 8);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v15 = *(void **)(a1 + 176);
  if (v15 != (void *)(a1 + 192))
    free(v15);
  v16 = *(void **)(a1 + 104);
  if (v16 != (void *)(a1 + 120))
    free(v16);
  v17 = *(void **)(a1 + 32);
  if (v17 != (void *)(a1 + 48))
    free(v17);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C52975A0(uint64_t a1)
{
  sub_1C5297400(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C52975C4(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::SlotIndexes::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

BOOL sub_1C52975FC(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  _QWORD *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unsigned int v44;
  uint64_t v45;
  _BYTE *v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  int v61;
  unsigned int v62;
  _QWORD *v63;
  _DWORD *v64;
  _WORD *v65;
  void *v66;
  void *v67;
  int v68;
  unsigned int v69;
  _BYTE *v70;
  void *v71;
  void *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  _QWORD *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  int v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  char v86;
  _QWORD *v87;
  unsigned int v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  _BYTE *v92;
  unsigned int v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  unsigned int v97;
  _QWORD *v98;
  _QWORD *v99;
  int v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  int v107;
  _BYTE *v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t *v112;
  uint64_t v113;
  _QWORD *v114;
  unsigned __int16 *v115;
  int v116;
  uint64_t v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  unsigned int v126;
  _DWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unsigned int v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  BOOL v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  unint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  unsigned int v166;
  BOOL v167;
  uint64_t v168;
  _BYTE **v169;
  _BYTE **v170;
  _BYTE *v171;
  _BYTE *v172;
  _WORD *v173;
  void *v174;
  void *v175;
  int v176;
  unsigned int v177;
  _BYTE *v178;
  void *v179;
  void *v180;
  unsigned int v181;
  unsigned int v182;
  uint64_t m;
  char *v184;
  char *v185;
  char *v186;
  int v187;
  BOOL v188;
  int v189;
  uint64_t v190;
  unint64_t v191;
  char v192;
  unsigned int *v193;
  int *v194;
  uint64_t *v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  unsigned int v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  int v204;
  uint64_t *v205;
  unsigned int v206;
  unsigned int v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int *v227;
  int *v228;
  int *v229;
  int v230;
  void **v231;
  uint64_t v232;
  uint64_t *v233;
  uint64_t v234;
  unsigned int *v235;
  uint64_t *v236;
  uint64_t *v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  _QWORD *v242;
  BOOL v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t *v246;
  _QWORD *v247;
  uint64_t v248;
  void **v249;
  uint64_t v250;
  unsigned int v251;
  unint64_t v252;
  uint64_t v253;
  void **v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t *v257;
  _QWORD *v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  uint64_t *v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t **v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int v274;
  int v275;
  unsigned int v276;
  unint64_t v277;
  uint64_t v278;
  unsigned int v279;
  int v280;
  uint64_t v281;
  uint64_t *v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t **v285;
  uint64_t v286;
  uint64_t v287;
  void **v288;
  uint64_t *v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unsigned int v295;
  int v296;
  unsigned int v297;
  unint64_t v298;
  uint64_t v299;
  unsigned int v300;
  int v301;
  unint64_t v302;
  uint64_t *v303;
  uint64_t v304;
  uint64_t v305;
  unsigned int v306;
  unint64_t v307;
  uint64_t v308;
  int v309;
  uint64_t v310;
  _BYTE *v311;
  _BYTE *v312;
  char v313;
  char *v314;
  int i;
  uint64_t v316;
  __int16 v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t v320;
  unsigned int v321;
  BOOL v322;
  int v323;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  int v331;
  int v332;
  uint64_t v333;
  int *v334;
  uint64_t v335;
  int v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  unsigned int v347;
  int v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  void **v355;
  uint64_t v356;
  void *v357;
  uint64_t v358;
  unint64_t v359;
  BOOL v360;
  char *v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t j;
  unsigned __int16 *v365;
  int v366;
  BOOL v367;
  unsigned int v368;
  unsigned int v369;
  int v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t *v376;
  unint64_t v377;
  __int16 v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unsigned int v382;
  int v383;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t *v389;
  uint64_t v390;
  int v391;
  int v392;
  uint64_t v393;
  uint64_t v394;
  unsigned int v395;
  unint64_t v396;
  uint64_t v397;
  BOOL v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  int *v402;
  unint64_t v403;
  _BYTE *v404;
  int *v405;
  unint64_t v406;
  int *v407;
  const std::nothrow_t *v408;
  unint64_t v409;
  int *v410;
  int *v411;
  uint64_t v412;
  uint64_t v413;
  void **v414;
  size_t v415;
  uint64_t v416;
  char *v417;
  char *v418;
  size_t v419;
  uint64_t v420;
  uint64_t v421;
  const std::nothrow_t *v422;
  BOOL v423;
  uint64_t v424;
  const std::nothrow_t *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  char isLiveAtIndexes;
  uint64_t v434;
  uint64_t *v435;
  _QWORD *v436;
  uint64_t v437;
  uint64_t v438;
  _QWORD *v439;
  void *v440;
  uint64_t v441;
  int v442;
  uint64_t v443;
  uint64_t v444;
  unsigned int v445;
  uint64_t v446;
  uint64_t v447;
  int v448;
  unsigned int v449;
  int v450;
  int v451;
  unsigned int v452;
  char *v453;
  uint64_t v454;
  uint64_t v455;
  size_t v456;
  unint64_t v457;
  unint64_t v458;
  uint64_t *v459;
  int *v460;
  uint64_t v462;
  unint64_t **v463;
  uint64_t v464;
  unint64_t **v465;
  int v466;
  unsigned int v467;
  unsigned int v468;
  _BYTE *v469;
  unint64_t *v470;
  unint64_t v471;
  _BYTE *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  int v476;
  unsigned int v477;
  int v478;
  int v479;
  unsigned int v480;
  uint64_t v481;
  int *v482;
  uint64_t v484;
  uint64_t **v485;
  uint64_t v486;
  uint64_t **v487;
  char v488;
  uint64_t *v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t v492;
  uint64_t *v493;
  uint64_t v494;
  uint64_t v495;
  _QWORD *v496;
  uint64_t *v497;
  char v498;
  uint64_t v499;
  unsigned int v500;
  int *v501;
  char *v502;
  char *v503;
  _QWORD *v504;
  char *v505;
  unint64_t v506;
  _QWORD *v507;
  _QWORD *v508;
  char **v509;
  char *v510;
  uint64_t v511;
  unint64_t v512;
  uint64_t v513;
  unint64_t v514;
  char *v515;
  char *v516;
  unint64_t v517;
  uint64_t v518;
  llvm::MachineFunction *v519;
  unint64_t MachineMemOperand;
  uint64_t v521;
  llvm::MachineFunction *v522;
  unint64_t v523;
  unint64_t v524;
  uint64_t v525;
  int *v526;
  uint64_t v527;
  unsigned __int8 *v528;
  BOOL v529;
  uint64_t v530;
  unint64_t ***v531;
  unint64_t ***v532;
  int v533;
  uint64_t **v534;
  int *v535;
  uint64_t *FixedStack;
  unint64_t **v537;
  unint64_t **v538;
  unint64_t *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  int v547;
  unsigned int v548;
  int v549;
  int v550;
  unsigned int v551;
  char *v552;
  uint64_t v553;
  void *v554;
  char *v555;
  void *v556;
  void *v557;
  _BYTE **v558;
  _BYTE **v559;
  _BYTE *v560;
  _BYTE *v561;
  int v562;
  int v563;
  int v564;
  unsigned int v565;
  int v566;
  int v567;
  unsigned int v568;
  int v569;
  int v570;
  unsigned int v571;
  int v572;
  unsigned int v573;
  uint64_t v574;
  int v575;
  uint64_t v576;
  llvm::Instruction *v577;
  uint64_t v578;
  uint64_t v579;
  int v580;
  llvm::Value *v581;
  _DWORD *v582;
  uint64_t v583;
  llvm::Type *v584;
  uint64_t v585;
  int v586;
  unsigned int v587;
  uint64_t v588;
  int v589;
  uint64_t v590;
  _BYTE *v591;
  int v592;
  int v593;
  BOOL v594;
  llvm::UndefValue *v595;
  llvm::Value *v596;
  uint64_t *k;
  uint64_t v598;
  llvm::UndefValue *v599;
  llvm::Value *v600;
  char *v601;
  int v602;
  uint64_t v603;
  int v604;
  uint64_t v605;
  uint64_t v606;
  _DWORD *v607;
  int v608;
  _DWORD *v609;
  unsigned int v610;
  int v611;
  uint64_t v612;
  int v613;
  unint64_t v614;
  int v615;
  _QWORD *v616;
  uint64_t v617;
  _DWORD *v618;
  _DWORD *v619;
  uint64_t *v620;
  uint64_t v621;
  uint64_t v622;
  _BYTE *v623;
  _BYTE *v624;
  _BYTE *v625;
  uint64_t v626;
  unsigned int v627;
  char **v628;
  _QWORD *v629;
  _QWORD *v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  int v635;
  _QWORD *v636;
  unint64_t v637;
  uint64_t v638;
  unint64_t v639;
  _QWORD *v640;
  unint64_t v641;
  uint64_t *v642;
  _BYTE *v643;
  unsigned int v644;
  unsigned int v645;
  char v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t *v650;
  char v651;
  uint64_t v652;
  size_t v653;
  size_t v654;
  size_t v655;
  size_t v656;
  size_t v657;
  unint64_t *v658;
  uint64_t v659;
  _QWORD v660[2];
  unsigned int v661;
  uint64_t v662;
  void *v663;
  uint64_t v664;
  _BYTE v665[32];
  void *v666;
  uint64_t v667;
  _QWORD v668[6];
  unsigned int v669;
  void *v670;
  uint64_t v671;
  unsigned int v672;
  unsigned int v673;
  int v674;
  _BYTE v675[64];
  char *v676;
  char *v677;
  uint64_t v678;
  void *__dst[4];
  _WORD v680[16];
  unsigned int v681;
  void *__p;
  char *v683;
  uint64_t v684;
  void *v685[2];
  _BYTE v686[32];
  void *v687;
  uint64_t v688;
  _DWORD v689[8];
  void *v690;
  uint64_t v691;
  _QWORD v692[4];
  void *v693;
  void *__src;
  uint64_t v695;
  int v696;
  _BYTE v697[32];
  unsigned int v698;
  void *v699;
  _BYTE *v700;
  void *v701;
  void *v702;
  unsigned int v703;
  unsigned int v704;
  int v705;
  void *v706;
  _BYTE *v707;
  uint64_t v708;

  v708 = *MEMORY[0x1E0C80C00];
  v638 = a1 + 256;
  *(_QWORD *)(a1 + 256) = a2;
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 56);
  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::SlotIndexes::ID);
  *(_QWORD *)(a1 + 1416) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::SlotIndexes::ID);
  v6 = (_QWORD *)(a1 + 264);
  v7 = *(_DWORD *)(a1 + 272);
  if (!v7 && !*(_DWORD *)(a1 + 276))
    goto LABEL_43;
  v8 = *(_DWORD *)(a1 + 280);
  v9 = *(_QWORD *)(a1 + 264);
  if (v8 <= 4 * v7 || v8 < 0x41)
  {
    if (!v8)
    {
LABEL_42:
      *(_QWORD *)(a1 + 272) = 0;
      goto LABEL_43;
    }
    v20 = 296 * v8;
    v21 = (_QWORD *)(v9 + 240);
    while (1)
    {
      v22 = *(v21 - 30);
      if (v22 == -8192)
        goto LABEL_40;
      if (v22 != -4096)
        break;
LABEL_41:
      v21 += 37;
      v20 -= 296;
      if (!v20)
        goto LABEL_42;
    }
    v23 = (_QWORD *)*(v21 - 2);
    if (v21 != v23)
      free(v23);
    v24 = (char *)*(v21 - 11);
    if (v21 - 9 != (_QWORD *)v24)
      free(v24);
    v25 = (char *)*(v21 - 20);
    if (v21 - 18 != (_QWORD *)v25)
      free(v25);
    v26 = (char *)*(v21 - 29);
    if (v21 - 27 != (_QWORD *)v26)
      free(v26);
LABEL_40:
    *(v21 - 30) = -4096;
    goto LABEL_41;
  }
  v10 = 296 * v8;
  v11 = (_QWORD *)(v9 + 240);
  do
  {
    if ((*(v11 - 30) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = (_QWORD *)*(v11 - 2);
      if (v11 != v12)
        free(v12);
      v13 = (char *)*(v11 - 11);
      if (v11 - 9 != (_QWORD *)v13)
        free(v13);
      v14 = (char *)*(v11 - 20);
      if (v11 - 18 != (_QWORD *)v14)
        free(v14);
      v15 = (char *)*(v11 - 29);
      if (v11 - 27 != (_QWORD *)v15)
        free(v15);
    }
    v11 += 37;
    v10 -= 296;
  }
  while (v10);
  v16 = 1 << (33 - __clz(v7 - 1));
  if (v16 <= 64)
    v16 = 64;
  if (v7)
    v17 = v16;
  else
    v17 = 0;
  if (v17 == *(_DWORD *)(a1 + 280))
  {
    *(_QWORD *)(a1 + 272) = 0;
    if (v17)
    {
      v18 = *(_QWORD **)(a1 + 264);
      v19 = 296 * v17;
      do
      {
        *v18 = -4096;
        v18 += 37;
        v19 -= 296;
      }
      while (v19);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*v6, 8);
    if (v17)
    {
      v41 = (4 * v17 / 3 + 1) | ((unint64_t)(4 * v17 / 3 + 1) >> 1);
      v42 = v41 | (v41 >> 2) | ((v41 | (v41 >> 2)) >> 4);
      LODWORD(v42) = (((v42 | (v42 >> 8)) >> 16) | v42 | (v42 >> 8)) + 1;
      *(_DWORD *)(a1 + 280) = v42;
      v43 = operator new(296 * v42, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 264) = v43;
      *(_QWORD *)(a1 + 272) = 0;
      v44 = *(_DWORD *)(a1 + 280);
      if (v44)
      {
        v45 = 296 * v44;
        do
        {
          *v43 = -4096;
          v43 += 37;
          v45 -= 296;
        }
        while (v45);
      }
    }
    else
    {
      *v6 = 0;
      *(_QWORD *)(a1 + 272) = 0;
      *(_DWORD *)(a1 + 280) = 0;
    }
  }
LABEL_43:
  v27 = (uint64_t *)(a1 + 288);
  sub_1C6125098((_DWORD *)(a1 + 288));
  *(_DWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 1432) = 0;
  v28 = *(unsigned int *)(a1 + 400);
  if ((_DWORD)v28)
  {
    v29 = 8 * v28;
    v30 = *(_QWORD *)(a1 + 392) - 8;
    do
    {
      sub_1C50E10CC((uint64_t *)(v30 + v29), 0);
      v29 -= 8;
    }
    while (v29);
  }
  *(_DWORD *)(a1 + 400) = 0;
  v31 = *(unsigned int *)(a1 + 544);
  if ((_DWORD)v31)
  {
    v32 = *(_QWORD *)(a1 + 536);
    v33 = 48 * v31;
    do
    {
      v34 = *(void **)(v32 + v33 - 48);
      if ((void *)(v32 + v33 - 32) != v34)
        free(v34);
      v33 -= 48;
    }
    while (v33);
  }
  *(_DWORD *)(a1 + 544) = 0;
  v35 = a1 + 1320;
  sub_1C4926A50(a1 + 1320);
  v36 = 0;
  v37 = *(_QWORD *)(a1 + 248);
  v38 = -858993459 * ((*(_QWORD *)(v37 + 16) - *(_QWORD *)(v37 + 8)) >> 3);
  LODWORD(v37) = *(_DWORD *)(v37 + 32);
  v39 = (v38 - v37);
  if (v38 != (_DWORD)v37)
  {
    v626 = a1 + 264;
    v46 = v665;
    v663 = v665;
    v664 = 0x800000000;
    if (v39 >= 9)
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v663, (uint64_t)v665, v39, 4);
    v658 = (unint64_t *)(a1 + 392);
    v650 = (uint64_t *)(a1 + 536);
    if (*(_DWORD *)(a1 + 404) < v39)
      sub_1C6213B30((uint64_t)v658, v39);
    sub_1C6213BD8((uint64_t)v650, v39);
    v629 = (_QWORD *)(a1 + 1504);
    v660[0] = 0;
    v660[1] = 0;
    v661 = 0;
    *(_DWORD *)(a1 + 1512) = 0;
    *(_DWORD *)(a1 + 1568) = v39;
    v47 = v39 + 63;
    v48 = (v39 + 63) >> 6;
    v652 = 8 * v48;
    if ((v39 + 63) < 0x40)
    {
      v52 = 0;
      LOBYTE(v51) = v39;
    }
    else
    {
      if (v48 > *(_DWORD *)(a1 + 1516))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v629, a1 + 1520, v47 >> 6, 8);
        v49 = *(unsigned int *)(a1 + 1512);
        v51 = *(_DWORD *)(a1 + 1568);
        v50 = *(_DWORD *)(a1 + 1512);
      }
      else
      {
        v49 = 0;
        v50 = 0;
        LOBYTE(v51) = v39;
      }
      bzero((void *)(*(_QWORD *)(a1 + 1504) + 8 * v49), v652);
      v52 = v50 + v48;
      *(_DWORD *)(a1 + 1512) = v50 + v48;
    }
    if ((v51 & 0x3F) != 0)
      *(_QWORD *)(*v629 + 8 * v52 - 8) &= ~(-1 << (v51 & 0x3F));
    v53 = (_QWORD *)(a1 + 1576);
    *(_DWORD *)(a1 + 1584) = 0;
    *(_DWORD *)(a1 + 1640) = v39;
    v641 = v47 >> 6;
    if (v47 < 0x40)
    {
      v57 = 0;
      LOBYTE(v56) = v39;
    }
    else
    {
      if (v48 > *(_DWORD *)(a1 + 1588))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 1576, a1 + 1592, v47 >> 6, 8);
        v54 = *(unsigned int *)(a1 + 1584);
        v56 = *(_DWORD *)(a1 + 1640);
        v55 = *(_DWORD *)(a1 + 1584);
      }
      else
      {
        v54 = 0;
        v55 = 0;
        LOBYTE(v56) = v39;
      }
      bzero((void *)(*(_QWORD *)(a1 + 1576) + 8 * v54), v652);
      v57 = v55 + v641;
      v48 = v47 >> 6;
      *(_DWORD *)(a1 + 1584) = v57;
    }
    v627 = v39 + 63;
    if ((v56 & 0x3F) != 0)
      *(_QWORD *)(*v53 + 8 * v57 - 8) &= ~(-1 << (v56 & 0x3F));
    v58 = (_QWORD *)(a1 + 1648);
    *(_DWORD *)(a1 + 1656) = 0;
    *(_DWORD *)(a1 + 1712) = v39;
    if (v627 < 0x40)
    {
      v62 = 0;
      LOBYTE(v61) = v39;
    }
    else
    {
      if (v48 > *(_DWORD *)(a1 + 1660))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 1648, a1 + 1664, v48, 8);
        v59 = *(unsigned int *)(a1 + 1656);
        v61 = *(_DWORD *)(a1 + 1712);
        v60 = *(_DWORD *)(a1 + 1656);
      }
      else
      {
        v59 = 0;
        v60 = 0;
        LOBYTE(v61) = v39;
      }
      bzero((void *)(*(_QWORD *)(a1 + 1648) + 8 * v59), v652);
      v62 = v60 + v641;
      *(_DWORD *)(a1 + 1656) = v60 + v641;
    }
    if ((v61 & 0x3F) != 0)
      *(_QWORD *)(*v58 + 8 * v62 - 8) &= ~(-1 << (v61 & 0x3F));
    v63 = v692;
    v690 = v692;
    v691 = 0x800000000;
    sub_1C4893E04((char *)&v690, v39, 0);
    v64 = v689;
    v687 = v689;
    v688 = 0x800000000;
    sub_1C4893E04((char *)&v687, v39, 0);
    v685[0] = v686;
    v685[1] = (void *)0x800000000;
    sub_1C4893E04((char *)v685, v39, 0);
    sub_1C61D9C90(v638, &v693);
    v65 = v680;
    __dst[0] = v680;
    v66 = __src;
    v639 = v39;
    if (__src == v693)
    {
      __dst[1] = v680;
      v67 = __src;
    }
    else
    {
      v346 = v695;
      v65 = malloc_type_malloc(8 * v695, 0x4065EBACuLL);
      if (!v65)
      {
        if (v346)
          goto LABEL_970;
        v65 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v65)
          goto LABEL_970;
      }
      __dst[1] = v65;
      v67 = v693;
      v66 = __src;
      v64 = v689;
    }
    v68 = HIDWORD(v695);
    LODWORD(__dst[2]) = v695;
    if (v66 == v67)
      v69 = HIDWORD(v695);
    else
      v69 = v695;
    if (v69)
    {
      memmove(v65, v66, 8 * v69);
      v68 = HIDWORD(v695);
    }
    HIDWORD(__dst[2]) = v68;
    LODWORD(__dst[3]) = v696;
    v684 = 0;
    __p = 0;
    v683 = 0;
    sub_1C4D6CDA0(&__p, v699, v700, 0xAAAAAAAAAAAAAAABLL * ((v700 - (_BYTE *)v699) >> 3));
    v70 = v675;
    v670 = v675;
    v71 = v702;
    if (v702 == v701)
    {
      v671 = (uint64_t)v675;
      v72 = v702;
    }
    else
    {
      v347 = v703;
      v70 = malloc_type_malloc(8 * v703, 0x4065EBACuLL);
      if (!v70)
      {
        if (v347)
          goto LABEL_970;
        v70 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v70)
          goto LABEL_970;
      }
      v671 = (uint64_t)v70;
      v72 = v701;
      v71 = v702;
      v64 = v689;
    }
    v73 = v704;
    v672 = v703;
    if (v71 == v72)
      v74 = v704;
    else
      v74 = v703;
    if (v74)
    {
      memmove(v70, v71, 8 * v74);
      v73 = v704;
    }
    v673 = v73;
    v674 = v705;
    v677 = 0;
    v678 = 0;
    v676 = 0;
    sub_1C4D6CDA0(&v676, v706, v707, 0xAAAAAAAAAAAAAAABLL * ((v707 - (_BYTE *)v706) >> 3));
    v75 = 0;
    v76 = v668;
    v77 = a1 + 1440;
LABEL_96:
    v644 = v75;
    if (v683 - (_BYTE *)__p != v677 - v676)
    {
LABEL_110:
      v616 = v63;
      v617 = v77;
      v83 = *((_QWORD *)v683 - 3);
      v659 = v83;
      v666 = v76;
      v667 = 0x600000000;
      v669 = v39;
      v622 = v35;
      v623 = v46;
      v618 = v64;
      v621 = (uint64_t)v76;
      if (v627 < 0x40)
      {
        v88 = 0;
        v87 = v76;
        v86 = v39;
      }
      else
      {
        if (v627 >= 0x1C0)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v666, (uint64_t)v76, v641, 8);
          v87 = v666;
          v84 = v667;
          v86 = v669;
          v85 = v667;
        }
        else
        {
          v84 = 0;
          v85 = 0;
          v86 = v39;
          v87 = v76;
        }
        bzero(&v87[v84], v652);
        v88 = v85 + v641;
        LODWORD(v667) = v85 + v641;
      }
      v620 = v27;
      if ((v86 & 0x3F) != 0)
        v87[v88 - 1] &= ~(-1 << (v86 & 0x3F));
      v89 = *(uint64_t **)(v83 + 64);
      v90 = *(uint64_t **)(v83 + 72);
      if (v89 != v90)
      {
        v140 = v661;
        v631 = v660[0] + 80 * v661;
        v633 = v660[0];
        do
        {
          v141 = *v89;
          v662 = 0;
          v142 = sub_1C61B57BC(v633, v140, v141, &v662);
          v143 = v662;
          if (v142)
            v144 = v662 == v631;
          else
            v144 = 1;
          if (!v144)
          {
            v145 = *(_DWORD *)(v662 + 72);
            if (v669 < v145)
            {
              v150 = v667;
              if ((v669 & 0x3F) != 0)
                *((_QWORD *)v666 + v667 - 1) &= ~(-1 << (v669 & 0x3F));
              v151 = v150;
              v669 = v145;
              v152 = v145 + 63;
              if ((_DWORD)v150 != (v145 + 63) >> 6)
              {
                v153 = v152 >> 6;
                if (v150 > v153)
                {
                  LODWORD(v667) = v152 >> 6;
                  v151 = v152 >> 6;
                }
                else
                {
                  v615 = v150;
                  v154 = v150;
                  if (v153 > HIDWORD(v667))
                  {
                    v612 = v150;
                    v614 = v152 >> 6;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v666, v621, v153, 8);
                    v150 = v612;
                    v153 = v614;
                    v154 = v667;
                    v615 = v667;
                  }
                  if (v153 != v150)
                  {
                    v611 = v150;
                    v613 = v153;
                    bzero((char *)v666 + 8 * v154, 8 * (v153 - v150));
                    LODWORD(v150) = v611;
                    LODWORD(v153) = v613;
                  }
                  v151 = v615 + v153 - v150;
                  LODWORD(v667) = v151;
                  LOBYTE(v145) = v669;
                }
              }
              v155 = v145 & 0x3F;
              if (v155)
                *((_QWORD *)v666 + v151 - 1) &= ~(-1 << v155);
            }
            v146 = *(unsigned int *)(v143 + 16);
            if ((_DWORD)v146)
            {
              v147 = *(uint64_t **)(v143 + 8);
              v148 = v666;
              do
              {
                v149 = *v147++;
                *v148++ |= v149;
                --v146;
              }
              while (v146);
            }
          }
          ++v89;
        }
        while (v89 != v90);
      }
      v91 = *(_QWORD *)(v83 + 56);
      v92 = v623;
      v93 = v644;
      v94 = (_QWORD *)(a1 + 1504);
      if (v91 == v83 + 48)
        goto LABEL_118;
      while (1)
      {
        v115 = *(unsigned __int16 **)(v91 + 16);
        v116 = *v115;
        if ((v116 - 13) < 5)
          goto LABEL_182;
        v117 = *(_QWORD *)(v91 + 32);
        if ((v116 - 21) <= 1)
        {
          v118 = *(_DWORD *)(v117 + 16);
          if (v118 < 0)
            v119 = -1;
          else
            v119 = v118;
          if ((v118 & 0x80000000) == 0)
          {
            v120 = 1 << v119;
            v121 = v119 >> 6;
            *(_QWORD *)(*v94 + 8 * v121) |= 1 << v119;
            if (v116 == 21)
            {
              *((_QWORD *)v666 + v121) |= v120;
              v122 = v690;
            }
            else
            {
              *((_QWORD *)v666 + v121) &= ~v120;
              v122 = v687;
            }
            ++v122[v119];
            v138 = *(unsigned int *)(a1 + 1432);
            if (v138 >= *(unsigned int *)(a1 + 1436))
            {
              v139 = v93;
              llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 1424, v617, v138 + 1, 8);
              v93 = v139;
              v94 = (_QWORD *)(a1 + 1504);
              v138 = *(unsigned int *)(a1 + 1432);
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 1424) + 8 * v138) = v91;
            ++*(_DWORD *)(a1 + 1432);
            ++v93;
          }
          goto LABEL_182;
        }
        v123 = *(unsigned int *)(v91 + 40);
        if (!(_DWORD)v123)
          goto LABEL_182;
        v124 = v117 + 32 * v123;
        v125 = v666;
        v126 = v116 - 1;
        v127 = v685[0];
        v128 = *(_QWORD *)(v91 + 32);
        do
        {
          if (*(_BYTE *)v128 != 5)
            goto LABEL_162;
          v129 = *(unsigned int *)(v128 + 16);
          if ((v129 & 0x80000000) != 0)
            goto LABEL_162;
          v130 = 1 << v129;
          v131 = v129 >> 6;
          if ((v125[v131] & (1 << v129)) == 0)
            *(_QWORD *)(*v53 + 8 * v131) |= v130;
          if (v126 <= 1 && (*(_BYTE *)(v117 + 48) & 0x10) != 0)
          {
LABEL_154:
            *(_QWORD *)(*v58 + 8 * v131) |= v130;
            goto LABEL_155;
          }
          v132 = *(_WORD *)(v91 + 44);
          v133 = *((_QWORD *)v115 + 1);
          if ((v132 & 0xC) != 0 && (v132 & 4) == 0)
          {
            v136 = v91;
            if ((v133 & 0x100000) != 0)
              goto LABEL_154;
            while ((*(_WORD *)(v136 + 44) & 8) != 0)
            {
              v136 = *(_QWORD *)(v136 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v136 + 16) + 10) & 0x10) != 0)
                goto LABEL_154;
            }
          }
          else if ((v133 & 0x100000) != 0)
          {
            goto LABEL_154;
          }
LABEL_155:
          if (*(_QWORD *)(*(_QWORD *)v638 + 96) && *(_BYTE *)(v83 + 184))
          {
            if (v126 <= 1 && (*(_BYTE *)(v117 + 48) & 8) != 0)
              goto LABEL_161;
            v134 = *(_WORD *)(v91 + 44);
            v135 = *((_QWORD *)v115 + 1);
            if ((v134 & 0xC) == 0 || (v134 & 4) != 0)
            {
              if ((v135 & 0x80000) == 0)
                goto LABEL_162;
LABEL_161:
              ++v127[v129];
              goto LABEL_162;
            }
            v137 = v91;
            if ((v135 & 0x80000) != 0)
              goto LABEL_161;
            while ((*(_WORD *)(v137 + 44) & 8) != 0)
            {
              v137 = *(_QWORD *)(v137 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v137 + 16) + 10) & 8) != 0)
                goto LABEL_161;
            }
          }
LABEL_162:
          v128 += 32;
        }
        while (v128 != v124);
        if (!v91)
          goto LABEL_185;
LABEL_182:
        if ((*(_BYTE *)v91 & 4) == 0)
        {
LABEL_185:
          while ((*(_WORD *)(v91 + 44) & 8) != 0)
            v91 = *(_QWORD *)(v91 + 8);
        }
        v91 = *(_QWORD *)(v91 + 8);
        if (v91 == v83 + 48)
        {
LABEL_118:
          v645 = v93;
          v95 = sub_1C62049DC((uint64_t)v660, &v659);
          v96 = v95 + 1;
          v97 = v669;
          v98 = (_QWORD *)v621;
          if (*((_DWORD *)v95 + 18) < v669)
          {
            v99 = v95;
            v100 = v95[9] & 0x3F;
            v101 = *((unsigned int *)v95 + 4);
            if (v100)
            {
              v156 = v95[1] + 8 * v101;
              *(_QWORD *)(v156 - 8) &= ~(-1 << v100);
            }
            v102 = v101;
            *((_DWORD *)v95 + 18) = v97;
            v103 = v97 + 63;
            if ((_DWORD)v101 != (v97 + 63) >> 6)
            {
              v104 = v103 >> 6;
              if (v101 > v104)
              {
                *((_DWORD *)v95 + 4) = v104;
                v102 = v103 >> 6;
              }
              else
              {
                v105 = v101;
                if (v104 > *((_DWORD *)v95 + 5))
                {
                  v157 = v95 + 1;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v95 + 1), (uint64_t)(v95 + 3), v104, 8);
                  v96 = v157;
                  v98 = (_QWORD *)v621;
                  v105 = *((unsigned int *)v99 + 4);
                  v102 = *((_DWORD *)v99 + 4);
                }
                if (v104 != v101)
                {
                  v106 = v96;
                  bzero((void *)(*v96 + 8 * v105), 8 * (v104 - v101));
                  v96 = v106;
                  v98 = (_QWORD *)v621;
                }
                v102 += v104 - v101;
                *((_DWORD *)v99 + 4) = v102;
                v97 = *((_DWORD *)v99 + 18);
              }
            }
            v107 = v97 & 0x3F;
            v92 = v623;
            if (v107)
              *(_QWORD *)(*v96 + 8 * v102 - 8) &= ~(-1 << v107);
          }
          v108 = v92;
          v109 = v667;
          v110 = v666;
          v27 = v620;
          if ((_DWORD)v667)
          {
            v111 = (_QWORD *)*v96;
            v112 = (uint64_t *)v666;
            do
            {
              v113 = *v112++;
              *v111++ |= v113;
              --v109;
            }
            while (v109);
          }
          v114 = v98;
          v35 = v622;
          v63 = v616;
          if (v110 != v98)
            free(v110);
          sub_1C61D9EC8((char *)__dst);
          v75 = v645;
          v76 = v114;
          v46 = v108;
          v77 = v617;
          v64 = v618;
          goto LABEL_96;
        }
      }
    }
    if (__p != v683)
    {
      v78 = v676 + 8;
      v79 = (char *)__p + 8;
      do
      {
        v80 = v79 - 8;
        if (*((_QWORD *)v79 - 1) != *((_QWORD *)v78 - 1))
          goto LABEL_110;
        v81 = v78[8];
        if (v79[8])
          v82 = v81 == 0;
        else
          v82 = 1;
        if (v82)
        {
          if ((v79[8] == 0) == (v81 != 0))
            goto LABEL_110;
        }
        else if (*(_QWORD *)v79 != *(_QWORD *)v78)
        {
          goto LABEL_110;
        }
        v78 += 24;
        v79 += 24;
      }
      while (v80 + 24 != v683);
    }
    if (v676)
    {
      v677 = v676;
      operator delete(v676);
    }
    if ((void *)v671 != v670)
      free((void *)v671);
    if (__p)
    {
      v683 = (char *)__p;
      operator delete(__p);
    }
    if (__dst[1] != __dst[0])
      free(__dst[1]);
    if (v706)
    {
      v707 = v706;
      operator delete(v706);
    }
    if (v702 != v701)
      free(v702);
    if (v699)
    {
      v700 = v699;
      operator delete(v699);
    }
    if (__src != v693)
      free(__src);
    if (!v644)
    {
LABEL_231:
      if (v685[0] != v686)
        free(v685[0]);
      if (v687 != v64)
        free(v687);
      if (v690 != v63)
        free(v690);
      v158 = v660[0];
      if (v661)
      {
        v159 = 80 * v661;
        v160 = v660[0] + 24;
        do
        {
          if ((*(_QWORD *)(v160 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v161 = *(void **)(v160 - 16);
            if ((void *)v160 != v161)
              free(v161);
          }
          v160 += 80;
          v159 -= 80;
        }
        while (v159);
      }
      MEMORY[0x1CAA32FB4](v158, 8);
      v162 = *(_QWORD *)(a1 + 248);
      v163 = *(_QWORD *)(v162 + 8);
      v164 = *(_DWORD *)(v162 + 32);
      v165 = -858993459 * ((unint64_t)(*(_QWORD *)(v162 + 16) - v163) >> 3) - v164;
      if ((int)v165 < 1)
        goto LABEL_253;
      v166 = 0;
      do
      {
        v166 += *(_DWORD *)(v163 + 40 * v164++ + 8);
        --v165;
      }
      while (v165);
      if (v644 < 2)
        goto LABEL_253;
      v167 = v166 >= 0x10 && byte_1ED7FFCD0 == 0;
      if (!v167 || (llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, *(const llvm::Function **)a2) & 1) != 0)
      {
LABEL_253:
        v168 = *(unsigned int *)(a1 + 1432);
        if ((_DWORD)v168)
        {
          v169 = *(_BYTE ***)(a1 + 1424);
          v170 = &v169[v168];
          do
          {
            v171 = *v169;
            v172 = *v169;
            if ((**v169 & 4) == 0)
            {
              v172 = *v169;
              if ((*((_WORD *)v171 + 22) & 8) != 0)
              {
                v172 = *v169;
                do
                  v172 = (_BYTE *)*((_QWORD *)v172 + 1);
                while ((*((_WORD *)v172 + 22) & 8) != 0);
              }
            }
            sub_1C487FE80(*((_QWORD *)v171 + 3) + 40, (uint64_t)v171, *((_QWORD *)v172 + 1));
            ++v169;
          }
          while (v169 != v170);
        }
        *(_DWORD *)(a1 + 1432) = 0;
LABEL_263:
        v36 = (_DWORD)v168 != 0;
        if (v663 != v46)
          free(v663);
        return v36;
      }
      v625 = v46;
      if (!(_DWORD)v39)
      {
LABEL_370:
        v230 = 0;
        v231 = &__dst[2];
        do
        {
          ++v230;
          v232 = *(unsigned int *)(a1 + 320);
          if (!(_DWORD)v232)
            break;
          v635 = v230;
          v646 = 0;
          v233 = *(uint64_t **)(a1 + 312);
          v642 = &v233[v232];
          do
          {
            v654 = (size_t)v233;
            v234 = *v233;
            v693 = 0;
            if (sub_1C529B200(*(_QWORD *)(a1 + 264), *(_DWORD *)(a1 + 280), v234, &v693))
              v235 = (unsigned int *)v693;
            else
              v235 = (unsigned int *)(*(_QWORD *)(a1 + 264) + 296 * *(unsigned int *)(a1 + 280));
            v693 = &v695;
            __src = (void *)0x600000000;
            v698 = 0;
            v236 = *(uint64_t **)(v234 + 64);
            v237 = *(uint64_t **)(v234 + 72);
            if (v236 == v237)
            {
              v238 = 0;
              LODWORD(v239) = 0;
              __dst[0] = v231;
              __dst[1] = (void *)0x600000000;
            }
            else
            {
              v238 = 0;
              v239 = 0;
              do
              {
                v240 = *v236;
                __dst[0] = 0;
                v241 = sub_1C529B200(*(_QWORD *)(a1 + 264), *(_DWORD *)(a1 + 280), v240, __dst);
                v242 = __dst[0];
                if (v241)
                  v243 = __dst[0] == (void *)(*(_QWORD *)(a1 + 264) + 296 * *(unsigned int *)(a1 + 280));
                else
                  v243 = 1;
                if (!v243)
                {
                  v244 = *((unsigned int *)__dst[0] + 72);
                  if (v239 < v244)
                  {
                    v249 = v231;
                    v250 = v238;
                    if ((v239 & 0x3F) != 0)
                      *((_QWORD *)v693 + v238 - 1) &= ~(-1 << (v239 & 0x3F));
                    v698 = v244;
                    v251 = v244 + 63;
                    if (v238 != (v244 + 63) >> 6)
                    {
                      v252 = v251 >> 6;
                      if (v238 > v252)
                      {
                        LODWORD(__src) = v251 >> 6;
                        v238 = v251 >> 6;
                      }
                      else
                      {
                        v253 = v238;
                        if (v252 > HIDWORD(__src))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v693, (uint64_t)&v695, v252, 8);
                          v253 = __src;
                          v238 = __src;
                        }
                        if (v252 != v250)
                          bzero((char *)v693 + 8 * v253, 8 * (v252 - v250));
                        v238 += v252 - v250;
                        LODWORD(__src) = v238;
                        v244 = v698;
                      }
                    }
                    v231 = v249;
                    if ((v244 & 0x3F) != 0)
                      *((_QWORD *)v693 + v238 - 1) &= ~(-1 << (v244 & 0x3F));
                  }
                  else
                  {
                    v244 = v239;
                  }
                  v245 = *((unsigned int *)v242 + 58);
                  if ((_DWORD)v245)
                  {
                    v246 = (uint64_t *)v242[28];
                    v247 = v693;
                    do
                    {
                      v248 = *v246++;
                      *v247++ |= v248;
                      --v245;
                    }
                    while (v245);
                  }
                  v239 = v244;
                }
                ++v236;
              }
              while (v236 != v237);
              __dst[0] = v231;
              __dst[1] = (void *)0x600000000;
              if (v238)
              {
                v254 = v231;
                v255 = v238;
                if (v238 < 7)
                  goto LABEL_407;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__dst, (uint64_t)v231, v238, 8);
                v255 = __src;
                if ((_DWORD)__src)
                {
                  v254 = (void **)__dst[0];
LABEL_407:
                  memcpy(v254, v693, 8 * v255);
                }
                LODWORD(__dst[1]) = v238;
                LODWORD(v239) = v698;
              }
            }
            v681 = v239;
            LODWORD(v256) = v235[22];
            if (v256 >= v238)
              v256 = v238;
            else
              v256 = v256;
            if ((_DWORD)v256)
            {
              v257 = (uint64_t *)*((_QWORD *)v235 + 10);
              v258 = __dst[0];
              do
              {
                v259 = *v257++;
                *v258++ &= ~v259;
                --v256;
              }
              while (v256);
            }
            v260 = v235[18];
            if (v239 < v260)
            {
              v305 = v238;
              if ((v239 & 0x3F) != 0)
                *((_QWORD *)__dst[0] + v238 - 1) &= ~(-1 << (v239 & 0x3F));
              v681 = v260;
              v306 = v260 + 63;
              if (v238 != (v260 + 63) >> 6)
              {
                v307 = v306 >> 6;
                if (v238 > v307)
                {
                  LODWORD(__dst[1]) = v306 >> 6;
                  v238 = v306 >> 6;
                }
                else
                {
                  v308 = v238;
                  if (v307 > HIDWORD(__dst[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__dst, (uint64_t)v231, v307, 8);
                    v308 = LODWORD(__dst[1]);
                    v238 = __dst[1];
                  }
                  if (v307 != v305)
                    bzero((char *)__dst[0] + 8 * v308, 8 * (v307 - v305));
                  v238 += v307 - v305;
                  LODWORD(__dst[1]) = v238;
                  LOBYTE(v260) = v681;
                }
              }
              v309 = v260 & 0x3F;
              if (v309)
                *((_QWORD *)__dst[0] + v238 - 1) &= ~(-1 << v309);
            }
            v261 = v235[4];
            if ((_DWORD)v261)
            {
              v262 = (uint64_t *)*((_QWORD *)v235 + 1);
              v263 = __dst[0];
              do
              {
                v264 = *v262++;
                *v263++ |= v264;
                --v261;
              }
              while (v261);
            }
            v265 = (uint64_t **)(v235 + 38);
            v266 = v235[40];
            if (v266 >= __src)
              v267 = __src;
            else
              v267 = v266;
            if ((_DWORD)v267)
            {
              v268 = (uint64_t *)v693;
              v269 = *v265;
              v270 = v267;
              while (1)
              {
                v272 = *v268++;
                v271 = v272;
                v273 = *v269++;
                if ((v271 & ~v273) != 0)
                  break;
                if (!--v270)
                  goto LABEL_427;
              }
            }
            else
            {
LABEL_427:
              if (__src <= v266)
                goto LABEL_447;
              while (!*((_QWORD *)v693 + v267))
              {
                LODWORD(v267) = v267 + 1;
                if ((_DWORD)__src == (_DWORD)v267)
                  goto LABEL_447;
              }
            }
            v274 = v698;
            if (v235[54] < v698)
            {
              v275 = v235[54] & 0x3F;
              if (v275)
                (*v265)[v266 - 1] &= ~(-1 << v275);
              v235[54] = v274;
              v276 = v274 + 63;
              if ((_DWORD)v266 != (v274 + 63) >> 6)
              {
                v277 = v276 >> 6;
                if (v266 > v277)
                {
                  v235[40] = v277;
                  LODWORD(v266) = v276 >> 6;
                }
                else
                {
                  v278 = v266;
                  v279 = v266;
                  if (v277 > v235[41])
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v235 + 38), (uint64_t)(v235 + 42), v277, 8);
                    v278 = v235[40];
                    v279 = v235[40];
                  }
                  if (v277 != v266)
                    bzero(&(*v265)[v278], 8 * (v277 - v266));
                  LODWORD(v266) = v279 + v277 - v266;
                  v235[40] = v266;
                  v274 = v235[54];
                }
              }
              v280 = v274 & 0x3F;
              if (v280)
                (*v265)[v266 - 1] &= ~(-1 << v280);
            }
            v281 = __src;
            if ((_DWORD)__src)
            {
              v282 = (uint64_t *)v693;
              v283 = *v265;
              do
              {
                v284 = *v282++;
                *v283++ |= v284;
                --v281;
              }
              while (v281);
            }
            v646 = 1;
LABEL_447:
            v285 = (uint64_t **)(v235 + 56);
            v286 = v235[58];
            if (v286 >= LODWORD(__dst[1]))
              v287 = LODWORD(__dst[1]);
            else
              v287 = v286;
            v288 = (void **)__dst[0];
            if ((_DWORD)v287)
            {
              v289 = *v285;
              v290 = v287;
              v291 = (uint64_t *)__dst[0];
              while (1)
              {
                v293 = *v291++;
                v292 = v293;
                v294 = *v289++;
                if ((v292 & ~v294) != 0)
                  break;
                if (!--v290)
                  goto LABEL_454;
              }
            }
            else
            {
LABEL_454:
              if (LODWORD(__dst[1]) <= v286)
                goto LABEL_474;
              while (!*((_QWORD *)__dst[0] + v287))
              {
                LODWORD(v287) = v287 + 1;
                if (LODWORD(__dst[1]) == (_DWORD)v287)
                  goto LABEL_474;
              }
            }
            v295 = v681;
            if (v235[72] < v681)
            {
              v296 = v235[72] & 0x3F;
              if (v296)
                (*v285)[v286 - 1] &= ~(-1 << v296);
              v235[72] = v295;
              v297 = v295 + 63;
              if ((_DWORD)v286 != (v295 + 63) >> 6)
              {
                v298 = v297 >> 6;
                if (v286 > v298)
                {
                  v235[58] = v298;
                  LODWORD(v286) = v297 >> 6;
                }
                else
                {
                  v299 = v286;
                  v300 = v286;
                  if (v298 > v235[59])
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v235 + 56), (uint64_t)(v235 + 60), v298, 8);
                    v299 = v235[58];
                    v300 = v235[58];
                  }
                  if (v298 != v286)
                    bzero(&(*v285)[v299], 8 * (v298 - v286));
                  LODWORD(v286) = v300 + v298 - v286;
                  v235[58] = v286;
                  v295 = v235[72];
                }
              }
              v301 = v295 & 0x3F;
              if (v301)
                (*v285)[v286 - 1] &= ~(-1 << v301);
            }
            v288 = (void **)__dst[0];
            if (LODWORD(__dst[1]))
            {
              v302 = 0;
              v303 = *v285;
              v304 = 8 * LODWORD(__dst[1]);
              do
              {
                v303[v302 / 8] |= (unint64_t)v288[v302 / 8];
                v302 += 8;
              }
              while (v304 != v302);
            }
            v646 = 1;
LABEL_474:
            if (v288 != v231)
              free(v288);
            if (v693 != &v695)
              free(v693);
            v233 = (uint64_t *)(v654 + 8);
          }
          while ((uint64_t *)(v654 + 8) != v642);
          v230 = v635;
        }
        while ((v646 & 1) != 0);
        *(_DWORD *)(a1 + 1720) = v230;
        v693 = &v695;
        __src = (void *)0x1000000000;
        __dst[0] = &__dst[3];
        *(_OWORD *)&__dst[1] = xmmword_1C6612EE0;
        v310 = *(_QWORD *)(a1 + 256);
        v647 = v310 + 320;
        v655 = *(_QWORD *)(v310 + 328);
        v311 = (_BYTE *)v639;
        if (v655 == v310 + 320)
          goto LABEL_578;
        while (2)
        {
          LODWORD(__src) = 0;
          sub_1C6154790((uint64_t)&v693, (unint64_t)v311);
          __dst[1] = 0;
          if ((_DWORD)v311)
          {
            if (__dst[2] < v311)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__dst, &__dst[3], (unint64_t)v311, 1);
              v312 = __dst[1];
            }
            else
            {
              v312 = 0;
            }
            if (v311 != v312)
              bzero((char *)__dst[0] + (unint64_t)v312, v311 - v312);
            __dst[1] = v311;
          }
          v687 = (void *)v655;
          v670 = 0;
          v313 = sub_1C529B200(*(_QWORD *)(a1 + 264), *(_DWORD *)(a1 + 280), v655, &v670);
          v314 = (char *)v670;
          if ((v313 & 1) == 0)
          {
            v314 = (char *)sub_1C529B298(v626, (uint64_t *)&v687, v670);
            *(_OWORD *)(v314 + 40) = 0u;
            *(_OWORD *)(v314 + 56) = 0u;
            *(_OWORD *)(v314 + 72) = 0u;
            *(_OWORD *)(v314 + 88) = 0u;
            *(_OWORD *)(v314 + 104) = 0u;
            *(_OWORD *)(v314 + 120) = 0u;
            *(_OWORD *)(v314 + 136) = 0u;
            *(_OWORD *)(v314 + 152) = 0u;
            *(_OWORD *)(v314 + 184) = 0u;
            *(_OWORD *)(v314 + 200) = 0u;
            *(_OWORD *)(v314 + 216) = 0u;
            *(_OWORD *)(v314 + 232) = 0u;
            *(_OWORD *)(v314 + 264) = 0u;
            *(_OWORD *)(v314 + 280) = 0u;
            *(_OWORD *)(v314 + 168) = 0u;
            *(_OWORD *)(v314 + 24) = 0u;
            *(_OWORD *)(v314 + 248) = 0u;
            *(_QWORD *)v314 = v655;
            *((_QWORD *)v314 + 1) = v314 + 24;
            *((_QWORD *)v314 + 2) = 0x600000000;
            *((_QWORD *)v314 + 10) = v314 + 96;
            *((_DWORD *)v314 + 23) = 6;
            *((_QWORD *)v314 + 19) = v314 + 168;
            *((_DWORD *)v314 + 41) = 6;
            *((_QWORD *)v314 + 28) = v314 + 240;
            *((_DWORD *)v314 + 59) = 6;
          }
          for (i = sub_1C476B7EC((uint64_t)(v314 + 152));
                i != -1;
                i = sub_1C476BA0C((_QWORD *)v314 + 19, i + 1, *((_DWORD *)v314 + 54), 1u))
          {
            *((_QWORD *)v693 + i) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1416) + 392)
                                              + 16 * *(unsigned int *)(v655 + 24));
          }
          v316 = *(_QWORD *)(v655 + 56);
          while (2)
          {
            if (v316 != v655 + 48)
            {
              v670 = &v672;
              v671 = 0x400000000;
              LOBYTE(v687) = 0;
              if (sub_1C529AFB4(a1, v316, (uint64_t)&v670, (char *)&v687))
              {
                v317 = *(_WORD *)(v316 + 44);
                v318 = v316;
                if ((v317 & 4) != 0)
                {
                  do
                    v318 = *(_QWORD *)v318 & 0xFFFFFFFFFFFFFFF8;
                  while ((*(_WORD *)(v318 + 44) & 4) != 0);
                }
                v319 = v316;
                if ((v317 & 8) != 0)
                {
                  do
                    v319 = *(_QWORD *)(v319 + 8);
                  while ((*(_WORD *)(v319 + 44) & 8) != 0);
                }
                v320 = *(_QWORD *)(v319 + 8);
                if (v318 != v320)
                {
                  while (1)
                  {
                    v321 = **(unsigned __int16 **)(v318 + 16);
                    v322 = v321 > 0x17;
                    v323 = (1 << v321) & 0x83E000;
                    if (v322 || v323 == 0)
                      break;
                    v318 = *(_QWORD *)(v318 + 8);
                    if (v318 == v320)
                    {
                      v318 = v320;
                      break;
                    }
                  }
                }
                v325 = *(_QWORD *)(a1 + 1416);
                v326 = *(_QWORD *)(v325 + 368);
                v327 = *(unsigned int *)(v325 + 384);
                if ((_DWORD)v327)
                {
                  LODWORD(v328) = ((v318 >> 4) ^ (v318 >> 9)) & (v327 - 1);
                  v329 = (uint64_t *)(v326 + 16 * v328);
                  v330 = *v329;
                  if (v318 != *v329)
                  {
                    v331 = 1;
                    while (v330 != -4096)
                    {
                      v332 = v328 + v331++;
                      v328 = v332 & (v327 - 1);
                      v330 = *(_QWORD *)(v326 + 16 * v328);
                      if (v318 == v330)
                      {
                        v329 = (uint64_t *)(v326 + 16 * v328);
                        goto LABEL_526;
                      }
                    }
                    goto LABEL_525;
                  }
                }
                else
                {
LABEL_525:
                  v329 = (uint64_t *)(v326 + 16 * v327);
                }
LABEL_526:
                if ((_DWORD)v671)
                {
                  v333 = v329[1];
                  v334 = (int *)v670;
                  v335 = 4 * v671;
                  v336 = v687;
                  do
                  {
                    v337 = *v334;
                    if (v336)
                    {
                      if (!*((_BYTE *)__dst[0] + v337))
                      {
                        v338 = *v650 + 48 * (int)v337;
                        v339 = *(unsigned int *)(v338 + 8);
                        if (v339 >= *(unsigned int *)(v338 + 12))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod(*v650 + 48 * (int)v337, v338 + 16, v339 + 1, 8);
                          v339 = *(unsigned int *)(v338 + 8);
                        }
                        *(_QWORD *)(*(_QWORD *)v338 + 8 * v339) = v333;
                        ++*(_DWORD *)(v338 + 8);
                        *((_BYTE *)__dst[0] + v337) = 1;
                      }
                      if (*((_QWORD *)v693 + v337) <= 7uLL)
                        *((_QWORD *)v693 + v337) = v333;
                    }
                    else if (*((_QWORD *)v693 + v337) >= 8uLL)
                    {
                      v340 = *(_QWORD *)(*v658 + 8 * v337);
                      v341 = **(_QWORD **)(v340 + 64);
                      v666 = (void *)*((_QWORD *)v693 + v337);
                      v667 = v333;
                      v668[0] = v341;
                      llvm::LiveRange::addSegment(v340, (uint64_t)&v666);
                      *((_QWORD *)v693 + v337) = 0;
                      *((_BYTE *)__dst[0] + v337) = 0;
                    }
                    ++v334;
                    v335 -= 4;
                  }
                  while (v335);
                }
              }
              if (v670 != &v672)
                free(v670);
              if ((*(_BYTE *)v316 & 4) == 0)
              {
                while ((*(_WORD *)(v316 + 44) & 8) != 0)
                  v316 = *(_QWORD *)(v316 + 8);
              }
              v316 = *(_QWORD *)(v316 + 8);
              continue;
            }
            break;
          }
          v311 = (_BYTE *)v639;
          if ((_DWORD)v639)
          {
            v342 = 0;
            do
            {
              if (*(_QWORD *)((char *)v693 + v342) >= 8uLL)
              {
                v343 = *(_QWORD *)(*(_QWORD *)(a1 + 392) + v342);
                v344 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1416) + 392) + 16 * *(unsigned int *)(v655 + 24) + 8);
                v345 = **(_QWORD **)(v343 + 64);
                v690 = *(void **)((char *)v693 + v342);
                v691 = v344;
                v692[0] = v345;
                llvm::LiveRange::addSegment(v343, (uint64_t)&v690);
              }
              v342 += 8;
            }
            while (8 * v639 != v342);
          }
          v655 = *(_QWORD *)(v655 + 8);
          if (v655 != v647)
            continue;
          break;
        }
        if (__dst[0] != &__dst[3])
          free(__dst[0]);
LABEL_578:
        if (v693 != &v695)
          free(v693);
        if (byte_1ED7FFD90)
        {
          v362 = *(_QWORD *)v638 + 320;
          v363 = *(_QWORD *)(*(_QWORD *)v638 + 328);
          if (v363 != v362)
          {
LABEL_582:
            for (j = *(_QWORD *)(v363 + 56); ; j = *(_QWORD *)(j + 8))
            {
              if (j == v363 + 48)
              {
                v363 = *(_QWORD *)(v363 + 8);
                if (v363 == v362)
                  break;
                goto LABEL_582;
              }
              v365 = *(unsigned __int16 **)(j + 16);
              v366 = *v365;
              v367 = (v366 - 13) >= 5 && (v366 - 21) >= 2;
              if (!v367)
                goto LABEL_635;
              v368 = v366 - 1;
              if (v368 <= 1 && (*(_BYTE *)(*(_QWORD *)(j + 32) + 48) & 8) != 0)
                goto LABEL_598;
              v369 = *(unsigned __int16 *)(j + 44);
              v82 = (v369 & 0xC) == 0;
              v370 = (v369 >> 2) & 1;
              if (v82)
                LOBYTE(v370) = 1;
              v371 = *((_QWORD *)v365 + 1);
              if ((v370 & 1) != 0)
              {
                if ((v371 & 0x80000) == 0)
                  goto LABEL_595;
              }
              else
              {
                v400 = j;
                if ((v371 & 0x80000) == 0)
                {
                  while ((*(_WORD *)(v400 + 44) & 8) != 0)
                  {
                    v400 = *(_QWORD *)(v400 + 8);
                    if ((*(_BYTE *)(*(_QWORD *)(v400 + 16) + 10) & 8) != 0)
                      goto LABEL_598;
                  }
LABEL_595:
                  if (v368 > 1 || (*(_BYTE *)(*(_QWORD *)(j + 32) + 48) & 0x10) == 0)
                  {
                    if ((v370 & 1) != 0)
                    {
                      if ((v371 & 0x100000) == 0)
                        goto LABEL_635;
                    }
                    else
                    {
                      v401 = j;
                      if ((v371 & 0x100000) == 0)
                      {
                        while ((*(_WORD *)(v401 + 44) & 8) != 0)
                        {
                          v401 = *(_QWORD *)(v401 + 8);
                          if ((*(_BYTE *)(*(_QWORD *)(v401 + 16) + 10) & 0x10) != 0)
                            goto LABEL_598;
                        }
LABEL_635:
                        if ((*(_BYTE *)j & 4) == 0)
                          goto LABEL_638;
                        continue;
                      }
                    }
                  }
                }
              }
LABEL_598:
              v372 = *(unsigned int *)(j + 40);
              if (!(_DWORD)v372)
                goto LABEL_635;
              v373 = *(_QWORD *)(j + 32);
              v374 = v373 + 32 * v372;
              do
              {
                if (*(_BYTE *)v373 != 5)
                  goto LABEL_628;
                v375 = *(unsigned int *)(v373 + 16);
                if ((v375 & 0x80000000) != 0)
                  goto LABEL_628;
                v376 = *(uint64_t **)(*v658 + 8 * v375);
                v377 = *((unsigned int *)v376 + 2);
                if (!(_DWORD)v377)
                  goto LABEL_628;
                v378 = *(_WORD *)(j + 44);
                v379 = j;
                if ((v378 & 4) != 0)
                {
                  do
                    v379 = *(_QWORD *)v379 & 0xFFFFFFFFFFFFFFF8;
                  while ((*(_WORD *)(v379 + 44) & 4) != 0);
                }
                v380 = j;
                if ((v378 & 8) != 0)
                {
                  do
                    v380 = *(_QWORD *)(v380 + 8);
                  while ((*(_WORD *)(v380 + 44) & 8) != 0);
                }
                v381 = *(_QWORD *)(v380 + 8);
                if (v379 != v381)
                {
                  while (1)
                  {
                    v382 = **(unsigned __int16 **)(v379 + 16);
                    v322 = v382 > 0x17;
                    v383 = (1 << v382) & 0x83E000;
                    if (v322 || v383 == 0)
                      break;
                    v379 = *(_QWORD *)(v379 + 8);
                    if (v379 == v381)
                    {
                      v379 = v381;
                      break;
                    }
                  }
                }
                v385 = *(_QWORD *)(a1 + 1416);
                v386 = *(_QWORD *)(v385 + 368);
                v387 = *(unsigned int *)(v385 + 384);
                if (!(_DWORD)v387)
                  goto LABEL_618;
                LODWORD(v388) = ((v379 >> 4) ^ (v379 >> 9)) & (v387 - 1);
                v389 = (uint64_t *)(v386 + 16 * v388);
                v390 = *v389;
                if (v379 != *v389)
                {
                  v391 = 1;
                  while (v390 != -4096)
                  {
                    v392 = v388 + v391++;
                    v388 = v392 & (v387 - 1);
                    v390 = *(_QWORD *)(v386 + 16 * v388);
                    if (v379 == v390)
                    {
                      v389 = (uint64_t *)(v386 + 16 * v388);
                      goto LABEL_619;
                    }
                  }
LABEL_618:
                  v389 = (uint64_t *)(v386 + 16 * v387);
                }
LABEL_619:
                v393 = *v376;
                v394 = *v376 + 24 * v377;
                v395 = *(_DWORD *)((v389[1] & 0xFFFFFFFFFFFFFFF8) + 24) | (v389[1] >> 1) & 3;
                if (v395 >= ((*(_QWORD *)(v394 - 16) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v394 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                                          + 24)))
                  goto LABEL_627;
                do
                {
                  v396 = v377 >> 1;
                  v397 = *(_QWORD *)(v393 + 24 * (v377 >> 1) + 8);
                  LODWORD(v397) = (v397 >> 1) & 3 | *(_DWORD *)((v397 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v377 -= (v377 >> 1) + 1;
                  v398 = v395 >= v397;
                  if (v395 >= v397)
                    v399 = v396 + 1;
                  else
                    v399 = 0;
                  v393 += 24 * v399;
                  if (!v398)
                    v377 = v396;
                }
                while (v377);
                if (v393 == v394)
                {
LABEL_627:
                  *((_DWORD *)v376 + 18) = 0;
                  *((_DWORD *)v376 + 2) = 0;
                }
LABEL_628:
                v373 += 32;
              }
              while (v373 != v374);
              if (j)
                goto LABEL_635;
LABEL_638:
              while ((*(_WORD *)(j + 44) & 8) != 0)
                j = *(_QWORD *)(j + 8);
            }
          }
        }
        v688 = 0;
        v687 = 0;
        v689[0] = 0;
        if ((_DWORD)v311)
        {
          v402 = (int *)v663;
          v403 = *v658;
          v404 = v311;
          do
          {
            if (!*(_DWORD *)(*(_QWORD *)(v403 + 8 * *v402) + 8))
              *v402 = -1;
            ++v402;
            --v404;
          }
          while (v404);
        }
        v405 = (int *)v663;
        v406 = v664;
        v407 = (int *)((char *)v663 + 4 * v664);
        v693 = (void *)a1;
        if (v664 < 0x81)
        {
LABEL_662:
          sub_1C529B7A0(v405, v407, (uint64_t *)&v693, v406, 0, 0);
        }
        else
        {
          v408 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
          v409 = v664;
          while (1)
          {
            v410 = (int *)operator new(4 * v409, v408);
            if (v410)
              break;
            v322 = v409 > 1;
            v409 >>= 1;
            if (!v322)
              goto LABEL_662;
          }
          v411 = v410;
          sub_1C529B7A0(v405, v407, (uint64_t *)&v693, v406, v410, v409);
          operator delete(v411);
        }
        v412 = *(unsigned int *)(a1 + 544);
        if ((_DWORD)v412)
        {
          v413 = 48 * v412;
          v414 = (void **)(*(_QWORD *)(a1 + 536) + 8);
          do
          {
            v415 = *(unsigned int *)v414;
            if (v415 >= 2)
              qsort(*(v414 - 1), v415, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C4A07FB0);
            v414 += 6;
            v413 -= 48;
          }
          while (v413);
        }
        if ((_DWORD)v311)
        {
          v419 = 0;
          v420 = 0;
          v421 = 1;
          v422 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
          while (1)
          {
            v643 = (_BYTE *)(v419 + 1);
            v648 = v421;
            v423 = *((_DWORD *)v663 + v419) == -1 || v419 + 1 >= (unint64_t)v311;
            v424 = v420;
            if (!v423)
            {
              v656 = v419;
              do
              {
                if (*((_DWORD *)v663 + v421) != -1)
                {
                  v425 = v422;
                  v426 = v424;
                  v427 = *((int *)v663 + v419);
                  LODWORD(v693) = 0;
                  LODWORD(v693) = *((_DWORD *)v663 + v421);
                  v428 = *(_QWORD *)(*v658 + 8 * v427);
                  v429 = *(_QWORD *)(*v658 + 8 * (int)v693);
                  v430 = *v650;
                  v431 = *v650 + 48 * (int)v693;
                  if ((llvm::LiveRange::isLiveAtIndexes(v428, *(uint64_t **)v431, *(unsigned int *)(v431 + 8)) & 1) != 0)
                  {
                    v424 = v426;
                    v422 = v425;
                  }
                  else
                  {
                    v432 = v430 + 48 * (int)v427;
                    isLiveAtIndexes = llvm::LiveRange::isLiveAtIndexes(v429, *(uint64_t **)v432, *(unsigned int *)(v432 + 8));
                    v424 = v426;
                    v422 = v425;
                    if ((isLiveAtIndexes & 1) == 0)
                    {
                      llvm::LiveRange::MergeSegmentsInAsValue((uint64_t *)v428, v429, **(_QWORD **)(v428 + 64));
                      v434 = *(int *)(v432 + 8);
                      sub_1C618A450((unsigned int *)v432, *(_BYTE **)v431, (_BYTE *)(*(_QWORD *)v431 + 8 * *(unsigned int *)(v431 + 8)));
                      v435 = *(uint64_t **)v432;
                      v436 = (_QWORD *)(*(_QWORD *)v432 + 8 * v434);
                      v636 = (_QWORD *)(*(_QWORD *)v432 + 8 * *(unsigned int *)(v432 + 8));
                      v437 = v636 - v436;
                      if (v437 >= v434)
                        v438 = v434;
                      else
                        v438 = v636 - v436;
                      if (v438 < 1)
                      {
LABEL_698:
                        sub_1C529C294(v435, v436, v636, v434, v437, 0, 0);
                      }
                      else
                      {
                        while (1)
                        {
                          v439 = operator new(8 * v438, v422);
                          if (v439)
                            break;
                          v367 = (unint64_t)v438 >= 2;
                          v438 = (unint64_t)v438 >> 1;
                          if (!v367)
                            goto LABEL_698;
                        }
                        v440 = v439;
                        sub_1C529C294(v435, v436, v636, v434, v437, v439, v438);
                        operator delete(v440);
                      }
                      sub_1C61F8A6C((uint64_t)&v687, &v693)[1] = v427;
                      *((_DWORD *)v663 + v421) = -1;
                      v441 = *(_QWORD *)(a1 + 248);
                      v442 = *(_DWORD *)(v441 + 32);
                      v443 = *(_QWORD *)(v441 + 8);
                      v444 = v443 + 40 * (v442 + v427);
                      v445 = *(unsigned __int8 *)(v443 + 40 * ((_DWORD)v693 + v442) + 16);
                      if (*(unsigned __int8 *)(v444 + 16) > v445)
                        v445 = *(unsigned __int8 *)(v444 + 16);
                      *(_BYTE *)(v444 + 16) = v445;
                      if (!*(_BYTE *)(*(_QWORD *)(v441 + 8) + 40 * (*(_DWORD *)(v441 + 32) + v427) + 20)
                        && v445 > *(unsigned __int8 *)(v441 + 60))
                      {
                        *(_BYTE *)(v441 + 60) = v445;
                      }
                      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 8)
                                + 40 * (*(_DWORD *)(*(_QWORD *)(a1 + 248) + 32) + (_DWORD)v693)
                                + 8) = -1;
                      v424 = 1;
                    }
                  }
                  v311 = (_BYTE *)v639;
                  v419 = v656;
                }
                ++v421;
              }
              while ((_BYTE *)v421 != v311);
            }
            v421 = v648 + 1;
            v419 = (size_t)v643;
            v420 = v424;
            if (v643 == v311)
            {
              v419 = 0;
              v420 = 0;
              v421 = 1;
              if ((v424 & 1) == 0)
                break;
            }
          }
          v562 = 0;
          v563 = v689[0];
          do
          {
            if (v563)
            {
              v564 = v563 - 1;
              v565 = (37 * v562) & (v563 - 1);
              v566 = *((_DWORD *)v687 + 2 * v565);
              if (v562 == v566)
              {
LABEL_902:
                LODWORD(v693) = 0;
                LODWORD(__dst[0]) = v562;
                LODWORD(v693) = sub_1C6213DD0((uint64_t)&v687, (unsigned int *)__dst)[1];
                v563 = v689[0];
                if (v689[0])
                {
                  while (1)
                  {
                    v567 = v563 - 1;
                    v568 = (37 * (_DWORD)v693) & (v563 - 1);
                    v569 = *((_DWORD *)v687 + 2 * v568);
                    if ((_DWORD)v693 != v569)
                      break;
LABEL_904:
                    LODWORD(v693) = sub_1C61F8A6C((uint64_t)&v687, &v693)[1];
                    LODWORD(__dst[0]) = v562;
                    sub_1C6213DD0((uint64_t)&v687, (unsigned int *)__dst)[1] = (_DWORD)v693;
                    v563 = v689[0];
                    if (!v689[0])
                    {
                      LODWORD(v311) = v639;
                      goto LABEL_910;
                    }
                  }
                  v570 = 1;
                  while (1)
                  {
                    LODWORD(v311) = v639;
                    if (v569 == 0x7FFFFFFF)
                      break;
                    v571 = v568 + v570++;
                    v568 = v571 & v567;
                    v569 = *((_DWORD *)v687 + 2 * (v571 & v567));
                    if ((_DWORD)v693 == v569)
                      goto LABEL_904;
                  }
                }
              }
              else
              {
                v572 = 1;
                while (v566 != 0x7FFFFFFF)
                {
                  v573 = v565 + v572++;
                  v565 = v573 & v564;
                  v566 = *((_DWORD *)v687 + 2 * (v573 & v564));
                  if (v562 == v566)
                    goto LABEL_902;
                }
              }
            }
LABEL_910:
            ++v562;
          }
          while (v562 != (_DWORD)v311);
        }
        v416 = *(unsigned int *)(*(_QWORD *)v638 + 776);
        if ((_DWORD)v416)
        {
          v446 = *(_QWORD *)(*(_QWORD *)v638 + 768);
          v447 = v446 + 32 * v416;
          do
          {
            if (*(_QWORD *)v446 && v689[0])
            {
              v448 = *(_DWORD *)(v446 + 16);
              v449 = (37 * v448) & (v689[0] - 1);
              v450 = *((_DWORD *)v687 + 2 * v449);
              if (v448 == v450)
              {
LABEL_710:
                *(_DWORD *)(v446 + 16) = sub_1C61F8A6C((uint64_t)&v687, (_DWORD *)(v446 + 16))[1];
              }
              else
              {
                v451 = 1;
                while (v450 != 0x7FFFFFFF)
                {
                  v452 = v449 + v451++;
                  v449 = v452 & (v689[0] - 1);
                  v450 = *((_DWORD *)v687 + 2 * v449);
                  if (v448 == v450)
                    goto LABEL_710;
                }
              }
            }
            v446 += 32;
          }
          while (v446 != v447);
        }
        v666 = 0;
        v667 = 0;
        LODWORD(v668[0]) = 0;
        v693 = v697;
        __src = v697;
        v695 = 32;
        v696 = 0;
        v417 = (char *)v687 + 8 * v689[0];
        if ((_DWORD)v688)
        {
          if (v689[0])
          {
            v606 = 8 * v689[0];
            v418 = (char *)v687;
            while ((*(_DWORD *)v418 - 0x7FFFFFFF) <= 1)
            {
              v418 += 8;
              v606 -= 8;
              if (!v606)
                goto LABEL_675;
            }
          }
          else
          {
            v418 = (char *)v687;
          }
        }
        else
        {
LABEL_675:
          v418 = (char *)v687 + 8 * v689[0];
        }
        v453 = (char *)v687 + 8 * v689[0];
        while (v418 != v453)
        {
          v670 = 0;
          v574 = *(_QWORD *)(a1 + 248);
          v575 = *(_DWORD *)(v574 + 32);
          v576 = *(_QWORD *)(v574 + 8);
          v670 = *(void **)(v576 + 40 * (v575 + *(_DWORD *)v418) + 24);
          v577 = (llvm::Instruction *)v670;
          v578 = *(_QWORD *)(v576 + 40 * (*((_DWORD *)v418 + 1) + v575) + 24);
          sub_1C6180A54((uint64_t)&v666, (uint64_t *)&v670)[1] = v578;
          v579 = *((_QWORD *)v577 + 5);
          v580 = *(__int16 *)(v579 + 18);
          if ((v580 & 0x80000000) == 0)
          {
            v603 = *(_QWORD *)(v579 + 48);
            if (v603 != v579 + 40)
            {
              v604 = 0;
              do
              {
                v605 = v603 - 24;
                if (!v603)
                  v605 = 0;
                *(_DWORD *)(v605 + 56) = v604++;
                v603 = *(_QWORD *)(v603 + 8);
              }
              while (v603 != v579 + 40);
            }
            *(_WORD *)(v579 + 18) = v580 | 0x8000;
          }
          if (*((_DWORD *)v577 + 14) < *(_DWORD *)(v578 + 56))
            llvm::Instruction::moveBefore((llvm::Instruction *)v578, v577);
          v581 = (llvm::Value *)v578;
          if (*(_QWORD *)v577 != *(_QWORD *)v578)
          {
            v582 = operator new(0x60uLL);
            v581 = (llvm::Value *)(v582 + 8);
            v582[13] = v582[13] & 0x38000000 | 1;
            *(_QWORD *)v582 = 0;
            *((_QWORD *)v582 + 1) = 0;
            *((_QWORD *)v582 + 2) = 0;
            *((_QWORD *)v582 + 3) = v582 + 8;
            v583 = *(_QWORD *)v577;
            v680[0] = 257;
            llvm::BitCastInst::BitCastInst((uint64_t)(v582 + 8), v578, v583, (uint64_t)__dst, 0);
            sub_1C53DF664((_QWORD *)(*(_QWORD *)(v578 + 40) + 40), v578 + 24, (uint64_t)v581);
          }
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v693, (uint64_t)v577);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v693, v578);
          v585 = *(_QWORD *)(a1 + 248);
          v586 = *(_DWORD *)(v585 + 32);
          v587 = v586 + *(_DWORD *)v418;
          v588 = *(_QWORD *)(v585 + 8);
          v589 = *(unsigned __int8 *)(v588 + 40 * v587 + 36);
          if (*(_BYTE *)(v588 + 40 * v587 + 36))
          {
            v590 = v588 + 40 * (*((_DWORD *)v418 + 1) + v586);
            v593 = *(unsigned __int8 *)(v590 + 36);
            v591 = (_BYTE *)(v590 + 36);
            v592 = v593;
            if (!v593 || (v589 != 3 ? (v594 = v592 == 1) : (v594 = 1), !v594))
              *v591 = v589;
          }
          if ((*((_BYTE *)v577 + 23) & 8) != 0)
          {
            v595 = llvm::UndefValue::get(*(llvm::UndefValue **)v577, v584);
            llvm::ValueAsMetadata::handleRAUW((uint64_t *)v577, v595, v596);
          }
          for (k = (uint64_t *)*((_QWORD *)v577 + 1); k; k = (uint64_t *)k[1])
          {
            v598 = *k;
            if (*k && *(_BYTE *)(v598 + 16) == 77 && (*(_BYTE *)(v598 + 23) & 8) != 0)
            {
              v599 = llvm::UndefValue::get(*(llvm::UndefValue **)v598, v584);
              llvm::ValueAsMetadata::handleRAUW((uint64_t *)v598, v599, v600);
            }
          }
          llvm::Value::doRAUW(v577, v581, (llvm::Value *)1);
          v601 = v418 + 8;
          while (v601 != v417)
          {
            v602 = *(_DWORD *)v601;
            v601 += 8;
            if ((v602 - 0x7FFFFFFF) >= 2)
            {
              v418 = v601 - 8;
              goto LABEL_941;
            }
          }
          v418 = v417;
LABEL_941:
          ;
        }
        sub_1C617C694(&v690, (int)(-858993459* ((*(_QWORD *)(*(_QWORD *)(a1 + 248) + 16) - *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8)) >> 3)- *(_DWORD *)(*(_QWORD *)(a1 + 248) + 32)));
        v454 = *(_QWORD *)(a1 + 256);
        v455 = *(_QWORD *)(v454 + 328);
        v632 = v454 + 320;
        if (v455 == v454 + 320)
        {
LABEL_856:
          v531 = (unint64_t ***)v690;
          v532 = (unint64_t ***)v691;
          if (v690 != (void *)v691)
          {
            v533 = 0;
            do
            {
              if (*v531 != v531[1])
              {
                v534 = *(uint64_t ***)(*(_QWORD *)v638 + 432);
                LODWORD(__dst[0]) = v533;
                v535 = sub_1C61F5F34((uint64_t *)&v687, __dst);
                FixedStack = llvm::PseudoSourceValueManager::getFixedStack(v534, v535[1]);
                v537 = *v531;
                v538 = v531[1];
                if (*v531 != v538)
                {
                  do
                  {
                    v539 = *v537++;
                    *v539 = (unint64_t)FixedStack | 4;
                  }
                  while (v537 != v538);
                }
              }
              v531 += 3;
              ++v533;
            }
            while (v531 != v532);
          }
          v540 = *(_QWORD *)(*(_QWORD *)v638 + 96);
          if (v540)
          {
            v541 = *(unsigned int *)(v540 + 184);
            if ((_DWORD)v541)
            {
              v542 = *(_QWORD *)(v540 + 176);
              v543 = v542 + (v541 << 6);
              do
              {
                v544 = *(unsigned int *)(v542 + 24);
                if ((_DWORD)v544)
                {
                  v545 = *(_QWORD *)(v542 + 16);
                  v546 = v545 + 32 * v544;
                  do
                  {
                    v547 = *(_DWORD *)(v545 + 8);
                    if (v547 != 0x7FFFFFFF && v689[0])
                    {
                      v548 = (v689[0] - 1) & (37 * v547);
                      v549 = *((_DWORD *)v687 + 2 * v548);
                      if (v547 == v549)
                      {
LABEL_872:
                        *(_DWORD *)(v545 + 8) = sub_1C61F8A6C((uint64_t)&v687, (_DWORD *)(v545 + 8))[1];
                      }
                      else
                      {
                        v550 = 1;
                        while (v549 != 0x7FFFFFFF)
                        {
                          v551 = v548 + v550++;
                          v548 = v551 & (v689[0] - 1);
                          v549 = *((_DWORD *)v687 + 2 * v548);
                          if (v547 == v549)
                            goto LABEL_872;
                        }
                      }
                    }
                    v545 += 32;
                  }
                  while (v545 != v546);
                }
                v542 += 64;
              }
              while (v542 != v543);
            }
          }
          v552 = (char *)v690;
          v46 = v625;
          if (v690)
          {
            v553 = v691;
            v554 = v690;
            if ((void *)v691 != v690)
            {
              v555 = (char *)v691;
              do
              {
                v557 = (void *)*((_QWORD *)v555 - 3);
                v555 -= 24;
                v556 = v557;
                if (v557)
                {
                  *(_QWORD *)(v553 - 16) = v556;
                  operator delete(v556);
                }
                v553 = (uint64_t)v555;
              }
              while (v555 != v552);
              v554 = v690;
            }
            v691 = (uint64_t)v552;
            operator delete(v554);
          }
          if (__src != v693)
            free(__src);
          MEMORY[0x1CAA32FB4](v666, 8);
          v168 = *(unsigned int *)(a1 + 1432);
          if ((_DWORD)v168)
          {
            v558 = *(_BYTE ***)(a1 + 1424);
            v559 = &v558[v168];
            do
            {
              v560 = *v558;
              v561 = *v558;
              if ((**v558 & 4) == 0)
              {
                v561 = *v558;
                if ((*((_WORD *)v560 + 22) & 8) != 0)
                {
                  v561 = *v558;
                  do
                    v561 = (_BYTE *)*((_QWORD *)v561 + 1);
                  while ((*((_WORD *)v561 + 22) & 8) != 0);
                }
              }
              sub_1C487FE80(*((_QWORD *)v560 + 3) + 40, (uint64_t)v560, *((_QWORD *)v561 + 1));
              ++v558;
            }
            while (v558 != v559);
          }
          *(_DWORD *)(a1 + 1432) = 0;
          MEMORY[0x1CAA32FB4](v687, 4);
          goto LABEL_263;
        }
        while (1)
        {
          v456 = v455 + 48;
          v649 = v455;
          v457 = *(_QWORD *)(v455 + 56);
          v657 = v455 + 48;
          if (v457 != v455 + 48)
            break;
LABEL_855:
          v455 = *(_QWORD *)(v649 + 8);
          if (v455 == v632)
            goto LABEL_856;
        }
        while (1)
        {
          if (**(unsigned __int16 **)(v457 + 16) - 21 < 2)
            goto LABEL_765;
          v459 = (uint64_t *)(v457 + 48);
          v458 = *(_QWORD *)(v457 + 48);
          if (v458 >= 8)
          {
            if ((v458 & 7) != 0)
            {
              v460 = (int *)(v458 & 0xFFFFFFFFFFFFFFF8);
              if ((*(_QWORD *)(v457 + 48) & 7) != 3 || v460 == 0)
                goto LABEL_743;
              v464 = *v460;
              v463 = (unint64_t **)(v460 + 2);
              v462 = v464;
              if (!(_DWORD)v464)
                goto LABEL_743;
              v465 = &v463[v462];
            }
            else
            {
              *(_QWORD *)(v457 + 48) = v458 & 0xFFFFFFFFFFFFFFF8;
              v465 = (unint64_t **)(v457 + 56);
              v463 = (unint64_t **)(v457 + 48);
            }
            do
            {
              v470 = *v463;
              v471 = **v463;
              if ((v471 & 4) == 0)
              {
                v472 = (_BYTE *)(v471 & 0xFFFFFFFFFFFFFFF8);
                if (v472)
                {
                  if (v472[16] == 59)
                  {
                    __dst[0] = v472;
                    if (LODWORD(v668[0]))
                    {
                      v468 = (LODWORD(v668[0]) - 1) & ((v472 >> 4) ^ (v472 >> 9));
                      v469 = (_BYTE *)*((_QWORD *)v666 + 2 * v468);
                      if (v469 == v472)
                      {
LABEL_741:
                        *v470 = sub_1C6180A54((uint64_t)&v666, (uint64_t *)__dst)[1] & 0xFFFFFFFFFFFFFFFBLL;
                      }
                      else
                      {
                        v466 = 1;
                        while (v469 != (_BYTE *)-4096)
                        {
                          v467 = v468 + v466++;
                          v468 = v467 & (LODWORD(v668[0]) - 1);
                          v469 = (_BYTE *)*((_QWORD *)v666 + 2 * v468);
                          if (v469 == v472)
                            goto LABEL_741;
                        }
                      }
                    }
                  }
                }
              }
              ++v463;
            }
            while (v463 != v465);
          }
LABEL_743:
          v473 = *(unsigned int *)(v457 + 40);
          if ((_DWORD)v473)
          {
            v474 = *(_QWORD *)(v457 + 32);
            v475 = v474 + 32 * v473;
            do
            {
              if (*(_BYTE *)v474 == 5)
              {
                v476 = *(_DWORD *)(v474 + 16);
                LODWORD(__dst[0]) = v476;
                if ((v476 & 0x80000000) == 0)
                {
                  if (v689[0])
                  {
                    v477 = (v689[0] - 1) & (37 * v476);
                    v478 = *((_DWORD *)v687 + 2 * v477);
                    if (v476 == v478)
                    {
LABEL_749:
                      *(_DWORD *)(v474 + 16) = sub_1C61F8A6C((uint64_t)&v687, __dst)[1];
                    }
                    else
                    {
                      v479 = 1;
                      while (v478 != 0x7FFFFFFF)
                      {
                        v480 = v477 + v479++;
                        v477 = v480 & (v689[0] - 1);
                        v478 = *((_DWORD *)v687 + 2 * v477);
                        if (v476 == v478)
                          goto LABEL_749;
                      }
                    }
                  }
                }
              }
              v474 += 32;
            }
            while (v474 != v475);
          }
          v670 = &v672;
          v671 = 0x200000000;
          v481 = *v459;
          if ((unint64_t)*v459 < 8)
          {
LABEL_764:
            v456 = v657;
            goto LABEL_765;
          }
          if ((v481 & 7) != 0)
          {
            v482 = (int *)(v481 & 0xFFFFFFFFFFFFFFF8);
            if ((*v459 & 7) != 3 || v482 == 0)
              goto LABEL_764;
            v486 = *v482;
            v485 = (uint64_t **)(v482 + 2);
            v484 = v486;
            if (!(_DWORD)v486)
              goto LABEL_764;
            v487 = &v485[v484];
          }
          else
          {
            *(_QWORD *)(v457 + 48) = v481 & 0xFFFFFFFFFFFFFFF8;
            v487 = (uint64_t **)(v457 + 56);
            v485 = (uint64_t **)(v457 + 48);
          }
          v488 = 0;
LABEL_769:
          v651 = v488;
          do
          {
            v489 = *v485;
            v490 = **v485;
            if ((v490 & 4) != 0)
            {
              v491 = v490 & 0xFFFFFFFFFFFFFFF8;
              if (v491)
              {
                if (*(_DWORD *)(v491 + 8) == 4)
                {
                  LODWORD(__dst[0]) = *(_DWORD *)(v491 + 16);
                  v501 = sub_1C61F5F34((uint64_t *)&v687, __dst);
                  if ((char *)v687 + 8 * v689[0] != (char *)v501)
                  {
                    v502 = (char *)v690 + 24 * SLODWORD(__dst[0]);
                    v505 = (char *)*((_QWORD *)v502 + 1);
                    v504 = v502 + 8;
                    v503 = v505;
                    v507 = v504 + 1;
                    v506 = v504[1];
                    if ((unint64_t)v505 >= v506)
                    {
                      v640 = v504;
                      v509 = (char **)((char *)v690 + 24 * SLODWORD(__dst[0]));
                      v510 = *v509;
                      v511 = (v503 - *v509) >> 3;
                      v512 = v511 + 1;
                      if ((unint64_t)(v511 + 1) >> 61)
                        abort();
                      v513 = v506 - (_QWORD)v510;
                      if (v513 >> 2 > v512)
                        v512 = v513 >> 2;
                      v367 = (unint64_t)v513 >= 0x7FFFFFFFFFFFFFF8;
                      v514 = 0x1FFFFFFFFFFFFFFFLL;
                      if (!v367)
                        v514 = v512;
                      v637 = v514;
                      if (v514)
                      {
                        v628 = (char **)((char *)v690 + 24 * SLODWORD(__dst[0]));
                        v630 = v507;
                        if (v514 >> 61)
                          sub_1C4764EE4();
                        v515 = (char *)operator new(8 * v514);
                        v509 = v628;
                        v507 = v630;
                      }
                      else
                      {
                        v515 = 0;
                      }
                      v516 = &v515[8 * v511];
                      *(_QWORD *)v516 = v489;
                      v508 = v516 + 8;
                      if (v503 == v510)
                      {
                        v517 = v637;
                      }
                      else
                      {
                        v517 = v637;
                        do
                        {
                          v518 = *((_QWORD *)v503 - 1);
                          v503 -= 8;
                          *((_QWORD *)v516 - 1) = v518;
                          v516 -= 8;
                        }
                        while (v503 != v510);
                        v503 = *v509;
                      }
                      *v509 = v516;
                      v504 = v640;
                      *v640 = v508;
                      *v507 = &v515[8 * v517];
                      if (v503)
                        operator delete(v503);
                    }
                    else
                    {
                      *(_QWORD *)v503 = v489;
                      v508 = v503 + 8;
                    }
                    *v504 = v508;
                  }
                }
              }
            }
            if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)(v489 + 5)), (int32x4_t)vceqzq_s64(*(int64x2_t *)(v489 + 7)))))) & 1) != 0)
            {
              v492 = *v489;
              if ((*v489 & 4) == 0 && (v492 & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                __dst[0] = &__dst[2];
                __dst[1] = (void *)0x400000000;
                llvm::getUnderlyingObjectsForCodeGen(v492 & 0xFFFFFFFFFFFFFFF8, (uint64_t)__dst);
                v493 = (uint64_t *)__dst[0];
                if (LODWORD(__dst[1]))
                {
                  v494 = 8 * LODWORD(__dst[1]);
                  while (1)
                  {
                    v495 = *v493;
                    if (*v493 && *(_BYTE *)(v495 + 16) == 59)
                    {
                      v496 = sub_1C477672C((uint64_t)&v693, v495);
                      v497 = __src == v693 ? (uint64_t *)((char *)&v695 + 4) : &v695;
                      if (v496 != (_QWORD *)((char *)__src + 8 * *(unsigned int *)v497))
                        break;
                    }
                    ++v493;
                    v494 -= 8;
                    if (!v494)
                    {
                      v498 = 1;
                      goto LABEL_788;
                    }
                  }
                  v498 = 0;
LABEL_788:
                  v493 = (uint64_t *)__dst[0];
                }
                else
                {
                  v498 = 0;
                }
                if (v493 != (uint64_t *)&__dst[2])
                  free(v493);
                if ((v498 & 1) == 0)
                {
                  v519 = *(llvm::MachineFunction **)v638;
                  memset(__dst, 0, sizeof(__dst));
                  MachineMemOperand = llvm::MachineFunction::getMachineMemOperand(v519, (const llvm::MachineMemOperand *)v489, (const llvm::AAMDNodes *)__dst);
                  v521 = v671;
                  if (v671 >= (unint64_t)HIDWORD(v671))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v670, (uint64_t)&v672, v671 + 1, 8);
                    v521 = v671;
                  }
                  *((_QWORD *)v670 + v521) = MachineMemOperand;
                  v500 = v671 + 1;
                  LODWORD(v671) = v671 + 1;
                  ++v485;
                  v488 = 1;
                  if (v485 == v487)
                  {
                    v526 = (int *)v670;
                    goto LABEL_821;
                  }
                  goto LABEL_769;
                }
              }
            }
            v499 = v671;
            if (v671 >= (unint64_t)HIDWORD(v671))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v670, (uint64_t)&v672, v671 + 1, 8);
              v499 = v671;
            }
            *((_QWORD *)v670 + v499) = v489;
            v500 = v671 + 1;
            LODWORD(v671) = v671 + 1;
            ++v485;
          }
          while (v485 != v487);
          v526 = (int *)v670;
          if ((v651 & 1) == 0)
            goto LABEL_826;
LABEL_821:
          v522 = *(llvm::MachineFunction **)v638;
          if (v500)
          {
            if ((unint64_t)*v459 >= 8)
            {
              v527 = *v459 & 7;
              v528 = (unsigned __int8 *)(*v459 & 0xFFFFFFFFFFFFFFF8);
              if (v527 == 1 && v528)
              {
                v523 = 0;
                v525 = 0;
                v524 = *v459 & 0xFFFFFFFFFFFFFFF8;
              }
              else if (v527 == 3 && v528)
              {
                v530 = v528[4];
                if (v528[4])
                  v524 = *(_QWORD *)&v528[8 * *(int *)v528 + 8];
                else
                  v524 = 0;
                if (v528[5])
                  v523 = *(_QWORD *)&v528[8 * *(int *)v528 + 8 + 8 * v530];
                else
                  v523 = 0;
                if (v528[6])
                  v525 = *(_QWORD *)&v528[8 * *(int *)v528 + 8 + 8 * v528[5] + 8 * v530];
                else
                  v525 = 0;
              }
              else
              {
                v524 = 0;
                v525 = 0;
                if (v528)
                  v529 = v527 == 2;
                else
                  v529 = 0;
                if (v529)
                  v523 = *v459 & 0xFFFFFFFFFFFFFFF8;
                else
                  v523 = 0;
              }
            }
            else
            {
              v523 = 0;
              v524 = 0;
              v525 = 0;
            }
            llvm::MachineInstr::setExtraInfo(v457, (uint64_t)v522, v526, v500, v524, v523, v525);
          }
          else
          {
            llvm::MachineInstr::dropMemRefs(v457, v522);
          }
          v526 = (int *)v670;
LABEL_826:
          if (v526 != (int *)&v672)
            free(v526);
          v456 = v657;
          if (!v457)
          {
LABEL_831:
            while ((*(_WORD *)(v457 + 44) & 8) != 0)
              v457 = *(_QWORD *)(v457 + 8);
            goto LABEL_832;
          }
LABEL_765:
          if ((*(_BYTE *)v457 & 4) == 0)
            goto LABEL_831;
LABEL_832:
          v457 = *(_QWORD *)(v457 + 8);
          if (v457 == v456)
            goto LABEL_855;
        }
      }
      v348 = 0;
      while (1)
      {
        v349 = operator new();
        *(_QWORD *)v349 = v349 + 16;
        *(_QWORD *)(v349 + 8) = 0x200000000;
        *(_QWORD *)(v349 + 64) = v349 + 80;
        *(_QWORD *)(v349 + 72) = 0x200000000;
        *(_QWORD *)(v349 + 96) = 0;
        *(_QWORD *)(v349 + 104) = 0;
        *(_DWORD *)(v349 + 112) = v348;
        *(_DWORD *)(v349 + 116) = 0;
        v693 = (void *)v349;
        v350 = *(_QWORD *)(*(_QWORD *)(a1 + 1416) + 352) & 0xFFFFFFFFFFFFFFF9;
        v351 = sub_1C484358C(v35, 16, 3);
        v352 = *(unsigned int *)(v349 + 72);
        *(_DWORD *)v351 = v352;
        *(_QWORD *)(v351 + 8) = v350;
        if (v352 >= *(unsigned int *)(v349 + 76))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v349 + 64, v349 + 80, v352 + 1, 8);
          v352 = *(unsigned int *)(v349 + 72);
        }
        *(_QWORD *)(*(_QWORD *)(v349 + 64) + 8 * v352) = v351;
        ++*(_DWORD *)(v349 + 72);
        v353 = *(unsigned int *)(a1 + 400);
        v354 = *(_QWORD *)(a1 + 392);
        if (v353 >= *(_DWORD *)(a1 + 404))
        {
          v359 = v353 + 1;
          v360 = v354 + 8 * v353 > (unint64_t)&v693;
          if (v354 <= (unint64_t)&v693 && v360)
          {
            v361 = (char *)&v693 - v354;
            sub_1C6213B30((uint64_t)v658, v359);
            v354 = *v658;
            v355 = (void **)&v361[*v658];
            goto LABEL_568;
          }
          sub_1C6213B30((uint64_t)v658, v359);
          v354 = *v658;
        }
        v355 = &v693;
LABEL_568:
        v356 = *(unsigned int *)(a1 + 400);
        v357 = *v355;
        *v355 = 0;
        *(_QWORD *)(v354 + 8 * v356) = v357;
        *(_DWORD *)(a1 + 400) = v356 + 1;
        v358 = v664;
        if (v664 >= (unint64_t)HIDWORD(v664))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v663, (uint64_t)v46, v664 + 1, 4);
          v358 = v664;
        }
        *((_DWORD *)v663 + v358) = v348;
        LODWORD(v664) = v664 + 1;
        sub_1C50E10CC((uint64_t *)&v693, 0);
        if ((_DWORD)v639 == ++v348)
          goto LABEL_370;
      }
    }
    if ((_DWORD)v39)
    {
      v226 = 0;
      v227 = (int *)v690;
      v228 = (int *)v687;
      v229 = (int *)v685[0];
      do
      {
        if (v227[v226] > 1
          || v228[v226] > 1
          || v229[v226] >= 2 && ((*(_QWORD *)(*v58 + 8 * (v226 >> 6)) >> v226) & 1) == 0)
        {
          *(_QWORD *)(*v53 + 8 * (v226 >> 6)) |= 1 << v226;
        }
        ++v226;
      }
      while (v39 != v226);
    }
    sub_1C61D9C90(v638, &v693);
    v173 = v680;
    __dst[0] = v680;
    v174 = __src;
    if (__src == v693)
    {
      __dst[1] = v680;
      v175 = __src;
    }
    else
    {
      v607 = v64;
      v608 = v695;
      v173 = malloc_type_malloc(8 * v695, 0x4065EBACuLL);
      if (!v173)
      {
        if (v608)
          goto LABEL_970;
        v173 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v173)
          goto LABEL_970;
      }
      __dst[1] = v173;
      v175 = v693;
      v174 = __src;
      v64 = v607;
    }
    v176 = HIDWORD(v695);
    LODWORD(__dst[2]) = v695;
    if (v174 == v175)
      v177 = HIDWORD(v695);
    else
      v177 = v695;
    if (v177)
    {
      memmove(v173, v174, 8 * v177);
      v176 = HIDWORD(v695);
    }
    HIDWORD(__dst[2]) = v176;
    LODWORD(__dst[3]) = v696;
    v684 = 0;
    __p = 0;
    v683 = 0;
    sub_1C4D6CDA0(&__p, v699, v700, 0xAAAAAAAAAAAAAAABLL * ((v700 - (_BYTE *)v699) >> 3));
    v178 = v675;
    v670 = v675;
    v179 = v702;
    if (v702 == v701)
    {
      v671 = (uint64_t)v675;
      v180 = v702;
LABEL_275:
      v181 = v704;
      v672 = v703;
      if (v179 == v180)
        v182 = v704;
      else
        v182 = v703;
      if (v182)
      {
        memmove(v178, v179, 8 * v182);
        v181 = v704;
      }
      v673 = v181;
      v674 = v705;
      v677 = 0;
      v678 = 0;
      v676 = 0;
      sub_1C4D6CDA0(&v676, v706, v707, 0xAAAAAAAAAAAAAAABLL * ((v707 - (_BYTE *)v706) >> 3));
      for (m = a1 + 328; ; m = v634)
      {
        if (v683 - (_BYTE *)__p == v677 - v676)
        {
          if (__p == v683)
          {
LABEL_344:
            if (v676)
            {
              v677 = v676;
              operator delete(v676);
            }
            if ((void *)v671 != v670)
              free((void *)v671);
            if (__p)
            {
              v683 = (char *)__p;
              operator delete(__p);
            }
            if (__dst[1] != __dst[0])
              free(__dst[1]);
            if (v706)
            {
              v707 = v706;
              operator delete(v706);
            }
            if (v702 != v701)
              free(v702);
            if (v699)
            {
              v700 = v699;
              operator delete(v699);
            }
            if (__src != v693)
              free(__src);
            goto LABEL_231;
          }
          v184 = v676 + 8;
          v185 = (char *)__p + 8;
          while (1)
          {
            v186 = v185 - 8;
            if (*((_QWORD *)v185 - 1) != *((_QWORD *)v184 - 1))
              break;
            v187 = v184[8];
            if (v185[8])
              v188 = v187 == 0;
            else
              v188 = 1;
            if (v188)
            {
              if ((v185[8] == 0) == (v187 != 0))
                break;
            }
            else if (*(_QWORD *)v185 != *(_QWORD *)v184)
            {
              break;
            }
            v184 += 24;
            v185 += 24;
            if (v186 + 24 == v683)
              goto LABEL_344;
          }
        }
        v619 = v64;
        v662 = 0;
        v662 = *((_QWORD *)v683 - 3);
        v189 = *(_DWORD *)(a1 + 320);
        *((_DWORD *)sub_1C6128C08(v27, &v662) + 2) = v189;
        v190 = v662;
        v191 = *(unsigned int *)(a1 + 320);
        if (v191 >= *(unsigned int *)(a1 + 324))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 312, m, v191 + 1, 8);
          v191 = *(unsigned int *)(a1 + 320);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * v191) = v190;
        ++*(_DWORD *)(a1 + 320);
        v666 = 0;
        v192 = sub_1C529B200(*(_QWORD *)(a1 + 264), *(_DWORD *)(a1 + 280), v662, &v666);
        v193 = (unsigned int *)v666;
        v624 = v46;
        v634 = m;
        if ((v192 & 1) == 0)
          break;
        v194 = (int *)((char *)v666 + 72);
        v195 = (uint64_t *)((char *)v666 + 8);
        if ((*((_DWORD *)v666 + 18) & 0x3F) == 0)
        {
          v196 = *((_DWORD *)v666 + 4);
LABEL_301:
          v198 = v196;
          goto LABEL_302;
        }
        v198 = *((unsigned int *)v666 + 4);
        v225 = *((_QWORD *)v666 + 1) + 8 * v198;
        *(_QWORD *)(v225 - 8) &= ~(-1 << (*((_DWORD *)v666 + 18) & 0x3F));
        v196 = v198;
LABEL_302:
        LOBYTE(v199) = v39;
        v193[18] = v39;
        v200 = v641;
        v653 = (size_t)v193;
        if (v196 != (_DWORD)v641)
        {
          if (v196 > v641)
          {
            LOBYTE(v199) = v39;
            v200 = v641;
            v193[4] = v641;
          }
          else
          {
            v201 = v198;
            if (v641 > v193[5])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v195, (uint64_t)(v193 + 6), v641, 8);
              v193 = (unsigned int *)v653;
              v201 = *(unsigned int *)(v653 + 16);
              v196 = *(_DWORD *)(v653 + 16);
            }
            if (v641 != v198)
            {
              bzero((void *)(*v195 + 8 * v201), 8 * (v641 - v198));
              v193 = (unsigned int *)v653;
            }
            v200 = v196 + v641 - v198;
            v193[4] = v200;
            v199 = *v194;
          }
        }
        v202 = v199 & 0x3F;
        if (v202)
          *(_QWORD *)(*v195 + 8 * v200 - 8) &= ~(-1 << v202);
        v203 = v193[22];
        if ((v193[36] & 0x3F) != 0)
        {
          v224 = *((_QWORD *)v193 + 10) + 8 * v203;
          *(_QWORD *)(v224 - 8) &= ~(-1 << (v193[36] & 0x3F));
        }
        v204 = v203;
        v205 = (uint64_t *)(v193 + 20);
        LOBYTE(v206) = v39;
        v193[36] = v39;
        v207 = v641;
        if ((_DWORD)v203 != (_DWORD)v641)
        {
          if (v203 > v641)
          {
            LOBYTE(v206) = v39;
            v207 = v641;
            v193[22] = v641;
          }
          else
          {
            v208 = v203;
            if (v641 > v193[23])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v193 + 20), (uint64_t)(v193 + 24), v641, 8);
              v193 = (unsigned int *)v653;
              v208 = *(unsigned int *)(v653 + 88);
              v204 = *(_DWORD *)(v653 + 88);
            }
            if (v641 != v203)
            {
              bzero((void *)(*v205 + 8 * v208), 8 * (v641 - v203));
              v193 = (unsigned int *)v653;
            }
            v207 = v204 + v641 - v203;
            v193[22] = v207;
            v206 = v193[36];
          }
        }
        v209 = v206 & 0x3F;
        if (v209)
          *(_QWORD *)(*v205 + 8 * v207 - 8) &= ~(-1 << v209);
        v666 = v668;
        HIDWORD(v667) = 4;
        v210 = v662 + 48;
        v211 = *(_QWORD *)(v662 + 56);
        if (v211 != v662 + 48)
        {
          do
          {
            LOBYTE(v659) = 0;
            LODWORD(v667) = 0;
            if (sub_1C529AFB4(a1, v211, (uint64_t)&v666, (char *)&v659))
            {
              v212 = (unsigned int *)v666;
              if ((_BYTE)v659)
              {
                if ((_DWORD)v667)
                {
                  v213 = *v205;
                  v214 = *v195;
                  v215 = 4 * v667;
                  do
                  {
                    v216 = *v212;
                    v217 = 1 << v216;
                    v218 = v216 >> 6;
                    v219 = *(_QWORD *)(v213 + 8 * v218);
                    if ((v217 & v219) != 0)
                      *(_QWORD *)(v213 + 8 * v218) = v219 & ~v217;
                    *(_QWORD *)(v214 + 8 * v218) |= v217;
                    ++v212;
                    v215 -= 4;
                  }
                  while (v215);
                }
              }
              else
              {
                v220 = *(unsigned int *)v666;
                v221 = 1 << v220;
                v222 = v220 >> 6;
                v223 = *(_QWORD *)(*v195 + 8 * v222);
                if ((v221 & v223) != 0)
                  *(_QWORD *)(*v195 + 8 * v222) = v223 & ~v221;
                *(_QWORD *)(*v205 + 8 * v222) |= v221;
              }
            }
            if ((*(_BYTE *)v211 & 4) == 0)
            {
              while ((*(_WORD *)(v211 + 44) & 8) != 0)
                v211 = *(_QWORD *)(v211 + 8);
            }
            v211 = *(_QWORD *)(v211 + 8);
          }
          while (v211 != v210);
          if (v666 != v668)
            free(v666);
        }
        sub_1C61D9EC8((char *)__dst);
        v46 = v624;
        v64 = v619;
      }
      v193 = (unsigned int *)sub_1C529B298(v626, &v662, v666);
      v196 = 0;
      *(_OWORD *)(v193 + 18) = 0u;
      v194 = (int *)(v193 + 18);
      *(_OWORD *)(v193 + 42) = 0u;
      v197 = v662;
      *(_OWORD *)(v193 + 6) = 0u;
      v195 = (uint64_t *)(v193 + 2);
      *(_OWORD *)(v193 + 66) = 0u;
      *(_OWORD *)(v193 + 70) = 0u;
      *(_QWORD *)v193 = v197;
      *((_QWORD *)v193 + 1) = v193 + 6;
      *((_QWORD *)v193 + 10) = v193 + 24;
      *(_OWORD *)(v193 + 10) = 0u;
      *(_OWORD *)(v193 + 14) = 0u;
      *(_OWORD *)(v193 + 22) = 0u;
      *(_OWORD *)(v193 + 26) = 0u;
      *(_OWORD *)(v193 + 30) = 0u;
      *(_OWORD *)(v193 + 34) = 0u;
      *(_OWORD *)(v193 + 38) = 0u;
      *(_OWORD *)(v193 + 46) = 0u;
      *(_OWORD *)(v193 + 50) = 0u;
      *(_OWORD *)(v193 + 54) = 0u;
      *(_OWORD *)(v193 + 58) = 0u;
      *(_OWORD *)(v193 + 62) = 0u;
      *((_QWORD *)v193 + 2) = 0x600000000;
      v193[23] = 6;
      *((_QWORD *)v193 + 19) = v193 + 42;
      v193[41] = 6;
      *((_QWORD *)v193 + 28) = v193 + 60;
      v193[59] = 6;
      goto LABEL_301;
    }
    v609 = v64;
    v610 = v703;
    v178 = malloc_type_malloc(8 * v703, 0x4065EBACuLL);
    if (v178 || !v610 && (v178 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v671 = (uint64_t)v178;
      v180 = v701;
      v179 = v702;
      v64 = v609;
      goto LABEL_275;
    }
LABEL_970:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  return v36;
}

uint64_t sub_1C529AFB4(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = **(unsigned __int16 **)(a2 + 16);
  if ((v4 - 21) > 1)
  {
    if ((v4 - 13) >= 5 && byte_1ED7FFE50 != 0 && byte_1ED7FFD90 == 0)
    {
      v12 = *(unsigned int *)(a2 + 40);
      if ((_DWORD)v12)
      {
        v9 = 0;
        v13 = *(_QWORD *)(a2 + 32);
        v14 = v13 + 32 * v12;
        v15 = a3 + 16;
        do
        {
          while (*(_BYTE *)v13 == 5)
          {
            v16 = *(unsigned int *)(v13 + 16);
            if ((v16 & 0x80000000) != 0)
              break;
            v17 = (*(_QWORD *)(*(_QWORD *)(a1 + 1504) + 8 * (v16 >> 6)) & (1 << v16)) == 0 || byte_1ED7FFE50 == 0;
            v18 = !v17 && byte_1ED7FFD90 == 0;
            if (!v18 || (*(_QWORD *)(*(_QWORD *)(a1 + 1576) + 8 * (v16 >> 6)) & (1 << v16)) != 0)
              break;
            v19 = *(unsigned int *)(a3 + 8);
            if (v19 >= *(unsigned int *)(a3 + 12))
            {
              v33 = a1;
              v27 = v15;
              v29 = a4;
              v31 = a3;
              v21 = v14;
              v23 = v13;
              v25 = *(_DWORD *)(v13 + 16);
              llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v15, v19 + 1, 4);
              v13 = v23;
              LODWORD(v16) = v25;
              v14 = v21;
              v15 = v27;
              a3 = v31;
              a1 = v33;
              a4 = v29;
              v19 = *(unsigned int *)(v31 + 8);
            }
            *(_DWORD *)(*(_QWORD *)a3 + 4 * v19) = v16;
            ++*(_DWORD *)(a3 + 8);
            v13 += 32;
            v9 = 1;
            if (v13 == v14)
              goto LABEL_43;
          }
          v13 += 32;
        }
        while (v13 != v14);
        if ((v9 & 1) != 0)
        {
          v9 = 1;
          goto LABEL_43;
        }
      }
    }
  }
  else
  {
    if (*(int *)(*(_QWORD *)(a2 + 32) + 16) < 0)
      v5 = -1;
    else
      v5 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 16);
    if ((v5 & 0x80000000) == 0)
    {
      v6 = 1 << v5;
      v7 = v5 >> 6;
      if ((*(_QWORD *)(*(_QWORD *)(a1 + 1504) + 8 * v7) & (1 << v5)) != 0)
      {
        v8 = *(unsigned int *)(a3 + 8);
        if (v8 >= *(_DWORD *)(a3 + 12))
        {
          v26 = v5 >> 6;
          v28 = 1 << v5;
          v34 = a1;
          v24 = a2;
          v30 = a4;
          v32 = a3;
          v22 = v5;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v8 + 1, 4);
          v5 = v22;
          a2 = v24;
          v7 = v26;
          v6 = v28;
          a3 = v32;
          a1 = v34;
          a4 = v30;
          LODWORD(v8) = *(_DWORD *)(v32 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a3 + 4 * v8) = v5;
        ++*(_DWORD *)(a3 + 8);
        if (**(_WORD **)(a2 + 16) == 22)
        {
          v9 = 0;
LABEL_43:
          *a4 = v9;
          return 1;
        }
        v9 = 1;
        if (!byte_1ED7FFE50 || byte_1ED7FFD90 || (*(_QWORD *)(*(_QWORD *)(a1 + 1576) + 8 * v7) & v6) != 0)
          goto LABEL_43;
      }
    }
  }
  return 0;
}

uint64_t sub_1C529B200(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 296 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 296 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C529B298(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C529B348(a1, v6);
  v8 = 0;
  sub_1C529B200(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C529B348(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  unsigned int v18;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void *v26;
  unint64_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  void *v33;
  unint64_t v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  void *v40;
  unint64_t v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t *v57;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(296 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = 296 * v10;
      do
      {
        *result = -4096;
        result += 37;
        v11 -= 296;
      }
      while (v11);
    }
    if (!v3)
LABEL_72:
      JUMPOUT(0x1CAA32FB4);
    v12 = 0;
    v13 = 296 * v3;
    while (1)
    {
      v14 = v4 + v12;
      v15 = *(_QWORD *)(v4 + v12);
      if ((v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
LABEL_53:
      v12 += 296;
      if (v13 == v12)
        goto LABEL_72;
    }
    v57 = 0;
    sub_1C529B200(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, &v57);
    v16 = v57;
    *v57 = v15;
    v17 = v16 + 3;
    v16[1] = (uint64_t)(v16 + 3);
    v16[2] = 0x600000000;
    v18 = *(_DWORD *)(v14 + 16);
    if ((uint64_t *)v14 == v16 || v18 == 0)
    {
LABEL_21:
      v24 = v4 + v12;
      v25 = *(_DWORD *)(v4 + v12 + 72);
      v26 = v16 + 12;
      v16[10] = (uint64_t)(v16 + 12);
      *((_DWORD *)v16 + 18) = v25;
      v16[11] = 0x600000000;
      v27 = *(unsigned int *)(v4 + v12 + 88);
      if (!(_DWORD)v27 || (uint64_t *)v14 == v16)
      {
LABEL_29:
        v32 = *(_DWORD *)(v24 + 144);
        v33 = v16 + 21;
        v16[19] = (uint64_t)(v16 + 21);
        *((_DWORD *)v16 + 36) = v32;
        v16[20] = 0x600000000;
        v34 = *(unsigned int *)(v24 + 160);
        if (!(_DWORD)v34 || (uint64_t *)v14 == v16)
        {
LABEL_37:
          v38 = v4 + v12;
          v39 = *(_DWORD *)(v4 + v12 + 216);
          v40 = v16 + 30;
          v16[28] = (uint64_t)(v16 + 30);
          *((_DWORD *)v16 + 54) = v39;
          v16[29] = 0x600000000;
          v41 = *(unsigned int *)(v4 + v12 + 232);
          if (!(_DWORD)v41 || (uint64_t *)v14 == v16)
            goto LABEL_45;
          v42 = *(const void **)(v38 + 224);
          v43 = v4 + v12;
          v44 = v4 + v12 + 240;
          if ((const void *)v44 != v42)
          {
            v16[28] = (uint64_t)v42;
            v53 = *(_DWORD *)(v43 + 236);
            *((_DWORD *)v16 + 58) = v41;
            *((_DWORD *)v16 + 59) = v53;
            *(_QWORD *)(v38 + 224) = v44;
            *(_DWORD *)(v43 + 236) = 0;
            goto LABEL_44;
          }
          if (v41 >= 7)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v16 + 28), (uint64_t)(v16 + 30), v41, 8);
            v45 = *(unsigned int *)(v38 + 232);
            if (!(_DWORD)v45)
              goto LABEL_43;
            v42 = *(const void **)(v38 + 224);
            v40 = (void *)v16[28];
          }
          else
          {
            v45 = *(unsigned int *)(v4 + v12 + 232);
          }
          memcpy(v40, v42, 8 * v45);
LABEL_43:
          *((_DWORD *)v16 + 58) = v41;
LABEL_44:
          *(_DWORD *)(v38 + 232) = 0;
LABEL_45:
          *((_DWORD *)v16 + 72) = *(_DWORD *)(v38 + 288);
          ++*(_DWORD *)(a1 + 8);
          v46 = *(void **)(v38 + 224);
          if ((void *)(v38 + 240) != v46)
            free(v46);
          v47 = v4 + v12;
          v48 = *(void **)(v4 + v12 + 152);
          if ((void *)(v4 + v12 + 168) != v48)
            free(v48);
          v49 = *(void **)(v47 + 80);
          if ((void *)(v47 + 96) != v49)
            free(v49);
          v50 = *(void **)(v14 + 8);
          if ((void *)(v4 + v12 + 24) != v50)
            free(v50);
          goto LABEL_53;
        }
        v35 = *(const void **)(v4 + v12 + 152);
        v36 = v4 + v12 + 168;
        if ((const void *)v36 != v35)
        {
          v16[19] = (uint64_t)v35;
          v52 = *(_DWORD *)(v4 + v12 + 164);
          *((_DWORD *)v16 + 40) = v34;
          *((_DWORD *)v16 + 41) = v52;
          *(_QWORD *)(v4 + v12 + 152) = v36;
          *(_DWORD *)(v4 + v12 + 164) = 0;
          goto LABEL_36;
        }
        if (v34 >= 7)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v16 + 19), (uint64_t)(v16 + 21), v34, 8);
          v37 = *(unsigned int *)(v24 + 160);
          if (!(_DWORD)v37)
            goto LABEL_35;
          v35 = *(const void **)(v4 + v12 + 152);
          v33 = (void *)v16[19];
        }
        else
        {
          v37 = *(unsigned int *)(v24 + 160);
        }
        memcpy(v33, v35, 8 * v37);
LABEL_35:
        *((_DWORD *)v16 + 40) = v34;
LABEL_36:
        *(_DWORD *)(v24 + 160) = 0;
        goto LABEL_37;
      }
      v28 = *(const void **)(v24 + 80);
      v29 = v4 + v12;
      v30 = v4 + v12 + 96;
      if ((const void *)v30 != v28)
      {
        v16[10] = (uint64_t)v28;
        v51 = *(_DWORD *)(v29 + 92);
        *((_DWORD *)v16 + 22) = v27;
        *((_DWORD *)v16 + 23) = v51;
        *(_QWORD *)(v24 + 80) = v30;
        *(_DWORD *)(v29 + 92) = 0;
        goto LABEL_28;
      }
      if (v27 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v16 + 10), (uint64_t)(v16 + 12), v27, 8);
        v31 = *(unsigned int *)(v24 + 88);
        if (!(_DWORD)v31)
          goto LABEL_27;
        v28 = *(const void **)(v24 + 80);
        v26 = (void *)v16[10];
      }
      else
      {
        v31 = *(unsigned int *)(v4 + v12 + 88);
      }
      memcpy(v26, v28, 8 * v31);
LABEL_27:
      *((_DWORD *)v16 + 22) = v27;
LABEL_28:
      *(_DWORD *)(v24 + 88) = 0;
      goto LABEL_29;
    }
    v20 = *(const void **)(v14 + 8);
    v21 = v4 + v12;
    v22 = v4 + v12 + 24;
    if ((const void *)v22 != v20)
    {
      v16[1] = (uint64_t)v20;
      v54 = *(_DWORD *)(v21 + 20);
      *((_DWORD *)v16 + 4) = v18;
      *((_DWORD *)v16 + 5) = v54;
      *(_QWORD *)(v14 + 8) = v22;
      *(_DWORD *)(v21 + 20) = 0;
      goto LABEL_20;
    }
    if (v18 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v16 + 1), (uint64_t)(v16 + 3), *(unsigned int *)(v14 + 16), 8);
      v23 = *(unsigned int *)(v14 + 16);
      if (!(_DWORD)v23)
        goto LABEL_19;
      v20 = *(const void **)(v14 + 8);
      v17 = (void *)v16[1];
    }
    else
    {
      v23 = *(unsigned int *)(v14 + 16);
    }
    memcpy(v17, v20, 8 * v23);
LABEL_19:
    *((_DWORD *)v16 + 4) = v18;
LABEL_20:
    *(_DWORD *)(v14 + 16) = 0;
    goto LABEL_21;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v55 = *(_DWORD *)(a1 + 16);
  if (v55)
  {
    v56 = 296 * v55;
    do
    {
      *result = -4096;
      result += 37;
      v56 -= 296;
    }
    while (v56);
  }
  return result;
}

int *sub_1C529B7A0(int *result, int *a2, uint64_t *a3, unint64_t a4, int *a5, uint64_t a6)
{
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int *v17;
  int v18;
  int v19;
  int *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int *v27;
  unint64_t v28;
  int *v29;
  unint64_t v30;
  int *v31;
  int *v32;
  uint64_t v33;
  int *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = *(a2 - 1);
      if (v9 != -1)
      {
        v10 = *result;
        if (*result == -1
          || (v11 = *(_QWORD *)(*a3 + 248),
              *(_QWORD *)(*(_QWORD *)(v11 + 8) + 40 * (*(_DWORD *)(v11 + 32) + v9) + 8) > *(_QWORD *)(*(_QWORD *)(v11 + 8) + 40 * (*(_DWORD *)(v11 + 32) + v10) + 8)))
        {
          *result = v9;
          *(a2 - 1) = v10;
        }
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v27 = a5;
      v28 = a4 >> 1;
      v29 = &result[a4 >> 1];
      v30 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1C529BABC((uint64_t)result, v29, a3, v30, a5);
        v31 = &v27[v28];
        result = (int *)sub_1C529BABC((uint64_t)&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v31);
        v32 = &v27[a4];
        v33 = *a3;
        v34 = v31;
        while (v34 != v32)
        {
          v35 = *v34;
          v36 = *v27;
          if (*v34 == -1
            || v36 != -1
            && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 248) + 8)
                         + 40 * (*(_DWORD *)(*(_QWORD *)(v33 + 248) + 32) + v35)
                         + 8) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 248) + 8)
                                           + 40 * (*(_DWORD *)(*(_QWORD *)(v33 + 248) + 32) + v36)
                                           + 8))
          {
            *v8 = v36;
            ++v27;
          }
          else
          {
            *v8 = v35;
            ++v34;
          }
          ++v8;
          if (v27 == v31)
          {
            if (v34 != v32)
            {
              v37 = 0;
              do
              {
                v8[v37] = v34[v37];
                ++v37;
              }
              while (&v34[v37] != v32);
            }
            return result;
          }
        }
        if (v27 != v31)
        {
          v38 = 0;
          do
          {
            v8[v38] = v27[v38];
            ++v38;
          }
          while (&v27[v38] != v31);
        }
      }
      else
      {
        sub_1C529B7A0(result, v29, a3, v30, a5, a6);
        sub_1C529B7A0(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v27, a6);
        return sub_1C529BD9C(v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), v27, a6);
      }
    }
    else if (result != a2)
    {
      v13 = result + 1;
      if (result + 1 != a2)
      {
        v14 = 0;
        v15 = *a3;
        v16 = result;
        do
        {
          v17 = v16;
          v16 = v13;
          v18 = v17[1];
          if (v18 != -1)
          {
            v19 = *v17;
            if (*v17 == -1
              || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 248) + 8)
                           + 40 * (*(_DWORD *)(*(_QWORD *)(v15 + 248) + 32) + v18)
                           + 8) > *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 248) + 8)
                                            + 40 * (*(_DWORD *)(*(_QWORD *)(v15 + 248) + 32) + v19)
                                            + 8))
            {
              v17[1] = v19;
              v20 = v8;
              if (v17 != v8)
              {
                v21 = v14;
                while (1)
                {
                  v22 = *(int *)((char *)v8 + v21 - 4);
                  if (v22 != -1)
                  {
                    v23 = *(_QWORD *)(v15 + 248);
                    v24 = *(_DWORD *)(v23 + 32);
                    v25 = *(_QWORD *)(v23 + 8);
                    result = *(int **)(v25 + 40 * (v24 + v18) + 8);
                    if ((uint64_t)result <= *(_QWORD *)(v25 + 40 * (v24 + v22) + 8))
                      break;
                  }
                  *(int *)((char *)v8 + v21) = v22;
                  v21 -= 4;
                  if (!v21)
                  {
                    v20 = v8;
                    goto LABEL_22;
                  }
                }
                v20 = (int *)((char *)v8 + v21);
              }
LABEL_22:
              *v20 = v18;
            }
          }
          v13 = v16 + 1;
          v14 += 4;
        }
        while (v16 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C529BABC(uint64_t result, int *a2, uint64_t *a3, unint64_t a4, int *a5)
{
  int *v5;
  int *v7;
  int v10;
  int v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  int *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  int *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  if (a4)
  {
    v5 = a5;
    v7 = (int *)result;
    if (a4 == 1)
    {
LABEL_9:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = *(a2 - 1);
      v11 = *(_DWORD *)result;
      if (v10 == -1
        || v11 != -1
        && (v12 = *(_QWORD *)(*a3 + 248),
            *(_QWORD *)(*(_QWORD *)(v12 + 8) + 40 * (*(_DWORD *)(v12 + 32) + v10) + 8) <= *(_QWORD *)(*(_QWORD *)(v12 + 8) + 40 * (*(_DWORD *)(v12 + 32) + v11) + 8)))
      {
        v10 = *(_DWORD *)result;
        v7 = a2 - 1;
      }
      *a5 = v10;
      v5 = a5 + 1;
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      v28 = (int *)(result + 4 * (a4 >> 1));
      sub_1C529B7A0(result, v28, a3, a4 >> 1, a5, a4 >> 1);
      result = sub_1C529B7A0(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v29 = *a3;
      v30 = &v7[a4 >> 1];
      while (v30 != a2)
      {
        v31 = *v30;
        v32 = *v7;
        if (*v30 == -1
          || v32 != -1
          && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 248) + 8)
                       + 40 * (*(_DWORD *)(*(_QWORD *)(v29 + 248) + 32) + v31)
                       + 8) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 248) + 8)
                                         + 40 * (*(_DWORD *)(*(_QWORD *)(v29 + 248) + 32) + v32)
                                         + 8))
        {
          *v5 = v32;
          ++v7;
        }
        else
        {
          *v5 = v31;
          ++v30;
        }
        ++v5;
        if (v7 == v28)
        {
          if (v30 != a2)
          {
            v33 = 0;
            do
            {
              v5[v33] = v30[v33];
              ++v33;
            }
            while (&v30[v33] != a2);
          }
          return result;
        }
      }
      if (v7 != v28)
      {
        v34 = 0;
        do
        {
          v5[v34] = v7[v34];
          ++v34;
        }
        while (&v7[v34] != v28);
      }
    }
    else if ((int *)result != a2)
    {
      v13 = (int *)(result + 4);
      *a5 = *(_DWORD *)result;
      if ((int *)(result + 4) != a2)
      {
        v14 = 0;
        v15 = *a3;
        v16 = a5;
        v17 = a5;
        do
        {
          v19 = *v17++;
          v18 = v19;
          v20 = *v13;
          if (*v13 == -1
            || v18 != -1
            && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 248) + 8)
                         + 40 * (*(_DWORD *)(*(_QWORD *)(v15 + 248) + 32) + v20)
                         + 8) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 248) + 8)
                                           + 40 * (*(_DWORD *)(*(_QWORD *)(v15 + 248) + 32) + v18)
                                           + 8))
          {
            *v17 = v20;
          }
          else
          {
            v16[1] = v18;
            v21 = a5;
            if (v16 != a5)
            {
              v22 = v14;
              while (1)
              {
                if (*v13 == -1)
                {
                  v21 = v16;
                  goto LABEL_28;
                }
                v23 = *(int *)((char *)a5 + v22 - 4);
                if (v23 != -1)
                {
                  v24 = *(_QWORD *)(v15 + 248);
                  v25 = *(_DWORD *)(v24 + 32);
                  v26 = *(_QWORD *)(v24 + 8);
                  v27 = *(_QWORD *)(v26 + 40 * (v25 + *v13) + 8);
                  result = (v25 + v23);
                  if (v27 <= *(_QWORD *)(v26 + 40 * result + 8))
                    break;
                }
                --v16;
                *(int *)((char *)a5 + v22) = v23;
                v22 -= 4;
                if (!v22)
                {
                  v21 = a5;
                  goto LABEL_28;
                }
              }
              v21 = (int *)((char *)a5 + v22);
            }
LABEL_28:
            *v21 = *v13;
          }
          ++v13;
          v14 += 4;
          v16 = v17;
        }
        while (v13 != a2);
      }
    }
  }
  return result;
}

_DWORD *sub_1C529BD9C(_DWORD *result, _DWORD *a2, _DWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  uint64_t v8;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  _DWORD *v29;
  int v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  _DWORD *v46;
  int v47;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  _DWORD *v59;
  int v60;
  uint64_t v61;
  _DWORD *v62;

  if (!a6)
    return result;
  v8 = a6;
  v11 = result;
  while (a5 > a8 && v8 > a8)
  {
    if (!a5)
      return result;
    v12 = *a2;
    v13 = *a4;
    while (1)
    {
      if (v12 != -1)
      {
        v14 = *v11;
        if (*v11 == -1
          || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 248) + 8)
                       + 40 * (*(_DWORD *)(*(_QWORD *)(v13 + 248) + 32) + v12)
                       + 8) > *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 248) + 8)
                                        + 40 * (*(_DWORD *)(*(_QWORD *)(v13 + 248) + 32) + v14)
                                        + 8))
        {
          break;
        }
      }
      ++v11;
      if (!--a5)
        return result;
    }
    if (a5 >= v8)
    {
      if (a5 == 1)
      {
        *v11 = v12;
        *a2 = v14;
        return result;
      }
      if (a5 >= 0)
        v23 = a5;
      else
        v23 = a5 + 1;
      v22 = v23 >> 1;
      v17 = &v11[v23 >> 1];
      v16 = 0;
      if (a3 == a2)
      {
        v29 = a3;
LABEL_44:
        v31 = v17;
        goto LABEL_48;
      }
      v24 = a3 - a2;
      v25 = *v17;
      do
      {
        v26 = v24 >> 1;
        v27 = v16 + (v24 >> 1);
        v28 = a2[v27];
        if (v28 != -1
          && (v25 == -1
           || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 248) + 8)
                        + 40 * (*(_DWORD *)(*(_QWORD *)(v13 + 248) + 32) + v28)
                        + 8) > *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 248) + 8)
                                         + 40 * (*(_DWORD *)(*(_QWORD *)(v13 + 248) + 32) + v25)
                                         + 8)))
        {
          v16 = v27 + 1;
          v26 = v24 + ~v26;
        }
        v24 = v26;
      }
      while (v26);
    }
    else
    {
      if (v8 >= 0)
        v15 = v8;
      else
        v15 = v8 + 1;
      v16 = v15 >> 1;
      v17 = a2;
      if (v11 != a2)
      {
        v18 = a2 - v11;
        v19 = a2[v16];
        v17 = v11;
        do
        {
          v20 = v18 >> 1;
          v21 = &v17[v18 >> 1];
          if (v19 == -1
            || *v21 != -1
            && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 248) + 8)
                         + 40 * (*(_DWORD *)(*(_QWORD *)(v13 + 248) + 32) + v19)
                         + 8) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 248) + 8)
                                           + 40 * (*(_DWORD *)(*(_QWORD *)(v13 + 248) + 32) + *v21)
                                           + 8))
          {
            v17 = v21 + 1;
            v20 = v18 + ~v20;
          }
          v18 = v20;
        }
        while (v20);
      }
      v22 = v17 - v11;
    }
    v29 = &a2[v16];
    v8 -= v16;
    if (v17 != a2)
    {
      if (v16)
      {
        v61 = a8;
        v62 = a3;
        if (v17 + 1 == a2)
        {
          v60 = *v17;
          v32 = a7;
          memmove(v17, a2, 4 * v16);
          a8 = v61;
          a3 = v62;
          a7 = v32;
          v31 = &v17[v16];
          *v31 = v60;
        }
        else
        {
          v59 = a7;
          if (v16 == 1)
          {
            v30 = *(v29 - 1);
            v31 = v17 + 1;
            if (v29 - 1 != v17)
              memmove(v17 + 1, v17, (char *)(v29 - 1) - (char *)v17);
            *v17 = v30;
            v16 = 1;
          }
          else
          {
            v31 = sub_1C4A00770(v17, a2, &a2[v16]);
          }
          a7 = v59;
          a8 = v61;
          a3 = v62;
        }
        goto LABEL_48;
      }
      goto LABEL_44;
    }
    v17 = a2;
    v31 = &a2[v16];
LABEL_48:
    a5 -= v22;
    if (v16 + v22 >= a5 + v8)
    {
      v39 = v29;
      v40 = v8;
      v41 = a7;
      v42 = a8;
      result = (_DWORD *)sub_1C529BD9C(v31, v39, a3, a4, a5, v40);
      a8 = v42;
      a7 = v41;
      v29 = v17;
      v8 = v16;
      a5 = v22;
      a3 = v31;
    }
    else
    {
      v33 = v11;
      v34 = v17;
      v35 = a3;
      v36 = v16;
      v37 = a7;
      v38 = a8;
      result = (_DWORD *)sub_1C529BD9C(v33, v34, v31, a4, v22, v36);
      a8 = v38;
      a3 = v35;
      a7 = v37;
      v11 = v31;
    }
    a2 = v29;
    if (!v8)
      return result;
  }
  if (a5 <= v8)
  {
    if (v11 != a2)
    {
      v53 = 0;
      do
      {
        a7[v53] = v11[v53];
        ++v53;
      }
      while (&v11[v53] != a2);
      if (v53 * 4)
      {
        v54 = *a4;
        v55 = a7;
        while (a2 != a3)
        {
          v56 = *a2;
          v57 = *v55;
          if (*a2 == -1
            || v57 != -1
            && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 248) + 8)
                         + 40 * (*(_DWORD *)(*(_QWORD *)(v54 + 248) + 32) + v56)
                         + 8) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 248) + 8)
                                           + 40 * (*(_DWORD *)(*(_QWORD *)(v54 + 248) + 32) + v57)
                                           + 8))
          {
            *v11 = v57;
            ++v55;
          }
          else
          {
            *v11 = v56;
            ++a2;
          }
          ++v11;
          if (&a7[v53] == v55)
            return result;
        }
        return memmove(v11, v55, (char *)a7 - (char *)v55 + v53 * 4);
      }
    }
  }
  else if (a2 != a3)
  {
    v43 = 0;
    do
    {
      a7[v43] = a2[v43];
      ++v43;
    }
    while (&a2[v43] != a3);
    if (v43 * 4)
    {
      v44 = &a7[v43];
      v45 = *a4;
      v46 = a3 - 1;
      while (a2 != v11)
      {
        v47 = *(v44 - 1);
        if (v47 == -1
          || (v48 = a2 - 1, v49 = *(a2 - 1), v49 != -1)
          && (v50 = *(_QWORD *)(v45 + 248),
              v51 = *(_DWORD *)(v50 + 32),
              v52 = *(_QWORD *)(v50 + 8),
              result = *(_DWORD **)(v52 + 40 * (v51 + v47) + 8),
              (uint64_t)result <= *(_QWORD *)(v52 + 40 * (v51 + v49) + 8)))
        {
          v49 = *(v44 - 1);
          v48 = a2;
          --v44;
        }
        *v46-- = v49;
        a2 = v48;
        if (v44 == a7)
          return result;
      }
      if (v44 != a7)
      {
        v58 = 0;
        do
        {
          v46[v58] = v44[v58 - 1];
          --v58;
        }
        while (&v44[v58] != a7);
      }
    }
  }
  return result;
}

_QWORD *sub_1C529C294(_QWORD *result, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v8;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  BOOL v45;
  char v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  BOOL v65;
  _BOOL4 v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;

  if (a5)
  {
    v8 = a5;
    v11 = result;
    while (a4 > a7 && v8 > a7)
    {
      while (1)
      {
        v12 = *v11;
        if (((*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24)) < ((*v11 >> 1) & 3 | *(_DWORD *)((*v11 & 0xFFFFFFFFFFFFFFF8) + 24)))
          break;
        ++v11;
        if (!--a4)
          return result;
      }
      if (a4 >= v8)
      {
        if (a4 == 1)
        {
          *v11 = *a2;
          *a2 = v12;
          return result;
        }
        v21 = (unint64_t)a4 >> 1;
        v15 = &v11[(unint64_t)a4 >> 1];
        v14 = a3;
        if (a3 != a2)
        {
          v22 = a3 - a2;
          v14 = a2;
          do
          {
            v23 = v22 >> 1;
            v24 = &v14[v22 >> 1];
            v26 = *v24;
            v25 = v24 + 1;
            v22 += ~(v22 >> 1);
            if (((v26 >> 1) & 3 | *(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 24)) < ((*v15 >> 1) & 3 | *(_DWORD *)((*v15 & 0xFFFFFFFFFFFFFFF8) + 24)))
              v14 = v25;
            else
              v22 = v23;
          }
          while (v22);
        }
        v13 = v14 - a2;
      }
      else
      {
        v13 = (unint64_t)v8 >> 1;
        v14 = &a2[(unint64_t)v8 >> 1];
        v15 = a2;
        if (v11 != a2)
        {
          v16 = a2 - v11;
          v15 = v11;
          do
          {
            v17 = v16 >> 1;
            v18 = &v15[v16 >> 1];
            v20 = *v18;
            v19 = v18 + 1;
            v16 += ~(v16 >> 1);
            if (((*v14 >> 1) & 3 | *(_DWORD *)((*v14 & 0xFFFFFFFFFFFFFFF8) + 24)) < ((v20 >> 1) & 3 | *(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 24)))
              v16 = v17;
            else
              v15 = v19;
          }
          while (v16);
        }
        v21 = v15 - v11;
      }
      v27 = v14;
      if (v15 != a2)
      {
        v27 = v15;
        if (a2 != v14)
        {
          if (v15 + 1 == a2)
          {
            v69 = *v15;
            v71 = a3;
            v34 = (char *)v14 - (char *)a2;
            v73 = a6;
            memmove(v15, a2, (char *)v14 - (char *)a2);
            a3 = v71;
            a6 = v73;
            v27 = (_QWORD *)((char *)v15 + v34);
            *v27 = v69;
          }
          else if (a2 + 1 == v14)
          {
            v35 = *(v14 - 1);
            v27 = v15 + 1;
            if (v14 - 1 != v15)
            {
              v72 = a3;
              v74 = a6;
              v70 = *(v14 - 1);
              memmove(v15 + 1, v15, (char *)(v14 - 1) - (char *)v15);
              v35 = v70;
              a3 = v72;
              a6 = v74;
            }
            *v15 = v35;
          }
          else
          {
            v28 = a2 - v15;
            if (v28 == v14 - a2)
            {
              v29 = 0;
              do
              {
                v30 = v15[v29];
                v15[v29] = a2[v29];
                v31 = (uint64_t)&v15[v29 + 1];
                a2[v29] = v30;
                v32 = (uint64_t)&a2[++v29];
              }
              while ((_QWORD *)v31 != a2 && v32 != (_QWORD)v14);
              v27 = a2;
            }
            else
            {
              v36 = v14 - a2;
              v37 = a2 - v15;
              do
              {
                v38 = v37;
                v37 = v36;
                v36 = v38 % v36;
              }
              while (v36);
              if (v37)
              {
                v39 = &v15[v37];
                do
                {
                  v41 = *--v39;
                  v40 = v41;
                  v42 = &v39[v28];
                  v43 = v39;
                  do
                  {
                    v44 = v43;
                    v43 = v42;
                    *v44 = *v42;
                    v45 = __OFSUB__(v28, v14 - v42);
                    v47 = v28 - (v14 - v42);
                    v46 = (v47 < 0) ^ v45;
                    v42 = &v15[v47];
                    if (v46)
                      v42 = &v43[v28];
                  }
                  while (v42 != v39);
                  *v43 = v40;
                }
                while (v39 != v15);
              }
              v27 = &v15[v14 - a2];
            }
          }
        }
      }
      a4 -= v21;
      v8 -= v13;
      if ((uint64_t)(v21 + v13) >= a4 + v8)
      {
        v52 = v8;
        v53 = a6;
        result = (_QWORD *)sub_1C529C294(v27, v14, a3, a4, v52, a6, a7);
        a6 = v53;
        v14 = v15;
        v8 = v13;
        a4 = v21;
        a3 = v27;
      }
      else
      {
        v48 = v11;
        v49 = v15;
        v50 = a6;
        v51 = a3;
        result = (_QWORD *)sub_1C529C294(v48, v49, v27, v21, v13, a6, a7);
        a3 = v51;
        a6 = v50;
        v11 = v27;
      }
      a2 = v14;
      if (!v8)
        return result;
    }
    if (a4 <= v8)
    {
      if (v11 != a2)
      {
        v60 = 0;
        do
        {
          a6[v60] = v11[v60];
          ++v60;
        }
        while (&v11[v60] != a2);
        if (v60 * 8)
        {
          v61 = a6;
          while (a2 != a3)
          {
            v62 = *v61;
            v63 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
            v64 = *(_DWORD *)((*v61 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v61 >> 1) & 3;
            v65 = v63 >= v64;
            v66 = v63 < v64;
            v67 = v65;
            if (!v65)
              v62 = *a2;
            v61 += v67;
            a2 += v66;
            *v11++ = v62;
            if (&a6[v60] == v61)
              return result;
          }
          return memmove(v11, v61, (char *)a6 - (char *)v61 + v60 * 8);
        }
      }
    }
    else if (a2 != a3)
    {
      v54 = 0;
      do
      {
        a6[v54] = a2[v54];
        ++v54;
      }
      while (&a2[v54] != a3);
      if (v54 * 8)
      {
        v55 = &a6[v54];
        v56 = a3 - 1;
        while (a2 != v11)
        {
          v57 = *(a2 - 1);
          v58 = (*(v55 - 1) >> 1) & 3 | *(_DWORD *)((*(v55 - 1) & 0xFFFFFFFFFFFFFFF8) + 24);
          v59 = *(_DWORD *)((v57 & 0xFFFFFFFFFFFFFFF8) + 24) | (v57 >> 1) & 3;
          if (v58 < v59)
            --a2;
          else
            v57 = *(v55 - 1);
          if (v58 >= v59)
            --v55;
          *v56-- = v57;
          if (v55 == a6)
            return result;
        }
        if (v55 != a6)
        {
          v68 = 0;
          do
          {
            v56[v68] = v55[v68 - 1];
            --v68;
          }
          while (&v55[v68] != a6);
        }
      }
    }
  }
  return result;
}

__n128 sub_1C529C78C(char **a1, _WORD *a2, __n128 *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7FFDD0, "stackcoloring-lifetime-start-on-first-use", 0x29uLL);
  v6 = *a1;
  byte_1ED7FFE50 = **a1;
  byte_1ED7FFE61 = 1;
  byte_1ED7FFE60 = *v6;
  word_1ED7FFDDA = (32 * (*a2 & 3)) | word_1ED7FFDDA & 0xFF9F;
  result = *a3;
  xmmword_1ED7FFDF0 = (__int128)*a3;
  return result;
}

uint64_t sub_1C529C810()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Disable stack coloring";
  v1.n128_u64[1] = 22;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7FFC50, "no-stack-coloring", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FFC50, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Do not optimize lifetime zones that are broken";
  v1.n128_u64[1] = 46;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7FFD10, "protect-from-escaped-allocas", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FFD10, &dword_1C475E000);
  v3 = 1;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Treat stack lifetimes as starting on first use, not on START marker.";
  v1.n128_u64[1] = 68;
  sub_1C6213E8C(&v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7FFDD0, &dword_1C475E000);
}

uint64_t sub_1C529C930(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "StackMap Liveness Analysis";
  *(_QWORD *)(v2 + 8) = 26;
  *(_QWORD *)(v2 + 16) = "stackmap-liveness";
  *(_QWORD *)(v2 + 24) = 17;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F7002;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C529C9C0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C529C9C0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8F7002);
  *(_QWORD *)v1 = &off_1E814AD58;
  *(_QWORD *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 264) = v1 + 288;
  *(_OWORD *)(v1 + 272) = xmmword_1C6464ED0;
  *(_QWORD *)(v1 + 304) = 0;
  *(_DWORD *)(v1 + 312) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7FFF50);
  if (v3 != -1)
  {
    v7[0] = sub_1C529C930;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7FFF50, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C529CAB4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)a1 = &off_1E814AD58;
  free(*(void **)(a1 + 304));
  v2 = *(void **)(a1 + 264);
  if (v2 != (void *)(a1 + 288))
    free(v2);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = *(void **)(a1 + 176);
  if (v3 != (void *)(a1 + 192))
    free(v3);
  v4 = *(void **)(a1 + 104);
  if (v4 != (void *)(a1 + 120))
    free(v4);
  v5 = *(void **)(a1 + 32);
  if (v5 != (void *)(a1 + 48))
    free(v5);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C529CB54(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)a1 = &off_1E814AD58;
  free(*(void **)(a1 + 304));
  v2 = *(void **)(a1 + 264);
  if (v2 != (void *)(a1 + 288))
    free(v2);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = *(void **)(a1 + 176);
  if (v3 != (void *)(a1 + 192))
    free(v3);
  v4 = *(void **)(a1 + 104);
  if (v4 != (void *)(a1 + 120))
    free(v4);
  v5 = *(void **)(a1 + 32);
  if (v5 != (void *)(a1 + 48))
    free(v5);
  llvm::Pass::~Pass((llvm::Pass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C529CC08(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  *((_BYTE *)this + 160) = 1;
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C529CC40(_QWORD *a1, uint64_t a2)
{
  const llvm::MachineBasicBlock *v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int v13;
  int v15;
  uint64_t v16;
  char *v17;

  if (byte_1ED7FFF10
    && (a1[31] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16)),
        *(_BYTE *)(*(_QWORD *)(a2 + 56) + 40))
    && (v4 = *(const llvm::MachineBasicBlock **)(a2 + 328), v4 != (const llvm::MachineBasicBlock *)(a2 + 320)))
  {
    v5 = 0;
    do
    {
      v6 = a1[31];
      a1[32] = v6;
      a1[34] = 0;
      sub_1C61D8D14(a1 + 33, *(_DWORD *)(v6 + 16));
      llvm::LivePhysRegs::addLiveOutsNoPristines((llvm::LivePhysRegs *)(a1 + 32), v4);
      v7 = *((_QWORD *)v4 + 6) & 0xFFFFFFFFFFFFFFF8;
      if (!v7 || (*(_BYTE *)v7 & 4) == 0)
      {
        while ((*(_WORD *)(v7 + 44) & 4) != 0)
          v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((const llvm::MachineBasicBlock *)v7 != (const llvm::MachineBasicBlock *)((char *)v4 + 48))
      {
        if (**(_WORD **)(v7 + 16) == 27)
        {
          v8 = ((*(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16))
                                         + 16)
                             + 31) >> 3) & 0x1FFFFFFC;
          v9 = (char *)sub_1C484358C(a2 + 128, v8, 2);
          bzero(v9, v8);
          v10 = a1[34];
          if (v10)
          {
            v11 = (unsigned __int16 *)a1[33];
            v12 = 2 * v10;
            do
            {
              v13 = *v11++;
              *(_DWORD *)&v9[((unint64_t)v13 >> 3) & 0x1FFC] |= 1 << v13;
              v12 -= 2;
            }
            while (v12);
          }
          (*(void (**)(_QWORD, char *))(*(_QWORD *)a1[31] + 176))(a1[31], v9);
          v15 = 13;
          v16 = 0;
          v17 = v9;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v7, (llvm::MachineFunction *)a2, (const llvm::MachineOperand *)&v15);
          v5 = 1;
        }
        llvm::LivePhysRegs::removeDefs((llvm::LivePhysRegs *)(a1 + 32), (const llvm::MachineInstr *)v7);
        llvm::LivePhysRegs::addUses((llvm::LivePhysRegs *)(a1 + 32), (const llvm::MachineInstr *)v7);
        v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
        if (!v7 || (*(_BYTE *)v7 & 4) == 0)
        {
          while ((*(_WORD *)(v7 + 44) & 4) != 0)
            v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      v4 = (const llvm::MachineBasicBlock *)*((_QWORD *)v4 + 1);
    }
    while (v4 != (const llvm::MachineBasicBlock *)(a2 + 320));
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

void sub_1C529CE4C(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&v7, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = v7;
  *(_QWORD *)v7 |= 8uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &v7 == (void **)a1)
    goto LABEL_9;
  if (v8 < 7)
  {
    v6 = v8;
LABEL_7:
    memcpy(v4, v3, 8 * v6);
    v3 = v7;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
  v6 = v8;
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = *(void **)a1;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_9:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

uint64_t sub_1C529CF78()
{
  __n128 v1;
  char v2;
  char *v3;
  int v4;

  v4 = 1;
  v2 = 1;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Enable PatchPoint Liveness Analysis Pass";
  v1.n128_u64[1] = 40;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7FFE90, "enable-patchpoint-liveness", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FFE90, &dword_1C475E000);
}

_QWORD *llvm::StackMapOpers::StackMapOpers(_QWORD *this, const llvm::MachineInstr *a2)
{
  *this = a2;
  return this;
}

{
  *this = a2;
  return this;
}

uint64_t llvm::PatchPointOpers::PatchPointOpers(uint64_t this, const llvm::MachineInstr *a2)
{
  *(_QWORD *)this = a2;
  *(_BYTE *)(this + 8) = (**((_DWORD **)a2 + 4) & 0x30000FF) == 0x1000000;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(_BYTE *)(this + 8) = (**((_DWORD **)a2 + 4) & 0x30000FF) == 0x1000000;
  return this;
}

uint64_t llvm::PatchPointOpers::getNextScratchIdx(llvm::PatchPointOpers *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;

  v2 = *(_QWORD *)this;
  if (!(_DWORD)a2)
    a2 = *((unsigned __int8 *)this + 8)
       + *(_DWORD *)(*(_QWORD *)(v2 + 32) + 32 * *((unsigned __int8 *)this + 8) + 112)
       + 5;
  v3 = *(unsigned int *)(v2 + 40);
  if (a2 < v3)
  {
    v4 = (int *)(*(_QWORD *)(v2 + 32) + 32 * a2);
    while (1)
    {
      v5 = *v4;
      v4 += 8;
      if ((v5 & 0x430000FF) == 0x43000000)
        break;
      a2 = (a2 + 1);
      if ((_DWORD)v3 == (_DWORD)a2)
        return v3;
    }
  }
  return a2;
}

uint64_t llvm::StatepointOpers::getGCPointerMap(llvm::StatepointOpers *a1, uint64_t a2)
{
  unsigned int NumGcMapEntriesIdx;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  NumGcMapEntriesIdx = llvm::StatepointOpers::getNumGcMapEntriesIdx(a1);
  v5 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 32 * NumGcMapEntriesIdx + 16);
  if ((_DWORD)v5)
  {
    v6 = *(_DWORD *)(a2 + 8);
    v7 = NumGcMapEntriesIdx + 2;
    v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 32 * NumGcMapEntriesIdx + 16);
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v10 = *(unsigned int *)(v9 + 32 * (v7 - 1) + 16);
      v11 = *(_QWORD *)(v9 + 32 * v7 + 16);
      if (v6 >= *(_DWORD *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v6 + 1, 8);
        v6 = *(_DWORD *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v6) = v10 | (v11 << 32);
      v6 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v6;
      v7 += 2;
      --v8;
    }
    while (v8);
  }
  return v5;
}

double llvm::StackMaps::StackMaps(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  return result;
}

int *llvm::StackMaps::parseOperand(llvm::StackMaps *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::StackMaps *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int LLVMRegNum;
  unsigned int SubRegIndex;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  void *v48;
  unsigned int v49;
  _QWORD v50[7];

  v8 = a1;
  v50[6] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 280) + 16);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 176))(v9);
  v11 = v10;
  v12 = *a2;
  v13 = *a2;
  if (!*a2)
  {
    if ((v12 & 0x2000000) != 0)
      return a2 + 8;
    if ((v12 & 0x10000000) != 0)
    {
      v21 = 4278124286;
      v22 = *(_DWORD *)(a4 + 8);
      if (v22 < *(_DWORD *)(a4 + 12))
      {
        v23 = *(_QWORD *)a4 + 24 * v22;
        *(_QWORD *)v23 = 0x800000004;
        *(_DWORD *)(v23 + 8) = 0;
        *(_QWORD *)(v23 + 16) = 4278124286;
LABEL_12:
        *(_DWORD *)(a4 + 8) = v22 + 1;
        return a2 + 8;
      }
      v48 = (void *)0x800000004;
      v49 = 0;
    }
    else
    {
      v29 = a2[1];
      v30 = *(char **)(v10 + 240);
      v31 = *(char **)(v10 + 248);
      if (v30 == v31)
      {
        v32 = 0;
      }
      else
      {
        v32 = 0;
        v33 = v29 >> 3;
        v34 = *(char **)(v10 + 240);
        do
        {
          if ((v29 - 0x40000000) >= 0xC0000001)
          {
            v35 = **(_QWORD **)v34;
            if (v33 < *(unsigned __int16 *)(v35 + 22)
              && ((1 << (v29 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v35 + 8) + v33)) != 0
              && (!v32
               || *(uint64_t **)v34 != v32
               && ((*(_DWORD *)(v32[1] + ((*(unsigned __int16 *)(v35 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v35 + 24)) & 1) != 0))
            {
              v32 = *(uint64_t **)v34;
            }
          }
          v34 += 8;
        }
        while (v34 != v31);
      }
      v36 = sub_1C529D628(a2[1], v10);
      LLVMRegNum = llvm::MCRegisterInfo::getLLVMRegNum((llvm::MCRegisterInfo *)(v11 + 8), v36, 0);
      SubRegIndex = llvm::MCRegisterInfo::getSubRegIndex((_QWORD *)(v11 + 8), LLVMRegNum, v29);
      if (SubRegIndex)
        v21 = *(unsigned __int16 *)(*(_QWORD *)(v11 + 96) + 4 * SubRegIndex);
      else
        v21 = 0;
      v39 = *(_DWORD *)(*(_QWORD *)(v11 + 264)
                      + 24
                      * (*(unsigned __int16 *)(*v32 + 24)
                       + *(_DWORD *)(v11 + 272) * ((unint64_t)(v31 - v30) >> 3))
                      + 4) >> 3;
      v22 = *(_DWORD *)(a4 + 8);
      if (v22 < *(_DWORD *)(a4 + 12))
      {
        v40 = *(_QWORD *)a4 + 24 * v22;
        *(_DWORD *)v40 = 1;
        *(_DWORD *)(v40 + 4) = v39;
        *(_DWORD *)(v40 + 8) = v36;
        *(_QWORD *)(v40 + 16) = v21;
        goto LABEL_12;
      }
      LODWORD(v48) = 1;
      HIDWORD(v48) = v39;
      v49 = v36;
    }
    v50[0] = v21;
    v41 = sub_1C4DC1E54(a4, (unint64_t)&v48);
    v42 = *(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 8);
    v43 = *(_OWORD *)v41;
    *(_QWORD *)(v42 + 16) = *(_QWORD *)(v41 + 16);
    *(_OWORD *)v42 = v43;
    v22 = *(_DWORD *)(a4 + 8);
    goto LABEL_12;
  }
  if (v13 == 13)
  {
    llvm::StackMaps::parseRegisterLiveOutMask(v8, *((const unsigned int **)a2 + 2), (uint64_t)&v48);
    sub_1C529FD80(a5, (uint64_t)&v48);
    if (v48 != v50)
      free(v48);
  }
  else if (v13 == 1)
  {
    v14 = *((_QWORD *)a2 + 2);
    if (v14)
    {
      if (v14 != 1)
      {
        v15 = a2 + 8;
        v25 = *((_QWORD *)a2 + 6);
        v26 = *(_DWORD *)(a4 + 8);
        v19 = (_DWORD *)(a4 + 8);
        if (v26 < *(_DWORD *)(a4 + 12))
        {
          v27 = *(_QWORD *)a4 + 24 * v26;
          *(_QWORD *)v27 = 0x800000004;
          *(_DWORD *)(v27 + 8) = 0;
          *(_QWORD *)(v27 + 16) = v25;
          v18 = v26;
          goto LABEL_19;
        }
        v48 = (void *)0x800000004;
        v49 = 0;
        v50[0] = v25;
LABEL_44:
        v45 = sub_1C4DC1E54(a4, (unint64_t)&v48);
        v46 = *(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 8);
        v47 = *(_OWORD *)v45;
        *(_QWORD *)(v46 + 16) = *(_QWORD *)(v45 + 16);
        *(_OWORD *)v46 = v47;
        v18 = *(_DWORD *)(a4 + 8);
        goto LABEL_19;
      }
      v8 = (llvm::StackMaps *)*((_QWORD *)a2 + 6);
      v15 = a2 + 24;
      v16 = *((_QWORD *)a2 + 14);
      v17 = sub_1C529D628(a2[17], v10);
      v18 = *(_DWORD *)(a4 + 8);
      v19 = (_DWORD *)(a4 + 8);
      if (v18 < *(_DWORD *)(a4 + 12))
      {
        v20 = *(_QWORD *)a4 + 24 * v18;
        *(_DWORD *)v20 = 3;
        *(_DWORD *)(v20 + 4) = (_DWORD)v8;
        *(_DWORD *)(v20 + 8) = v17;
        *(_QWORD *)(v20 + 16) = v16;
LABEL_19:
        *v19 = v18 + 1;
        a2 = v15;
        return a2 + 8;
      }
      v44 = 3;
    }
    else
    {
      LODWORD(v8) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)v8 + 280) + 40) + 504) + 4) >> 3;
      v15 = a2 + 16;
      v16 = *((_QWORD *)a2 + 10);
      v17 = sub_1C529D628(a2[9], v10);
      v18 = *(_DWORD *)(a4 + 8);
      v19 = (_DWORD *)(a4 + 8);
      if (v18 < *(_DWORD *)(a4 + 12))
      {
        v24 = *(_QWORD *)a4 + 24 * v18;
        *(_DWORD *)v24 = 2;
        *(_DWORD *)(v24 + 4) = (_DWORD)v8;
        *(_DWORD *)(v24 + 8) = v17;
        *(_QWORD *)(v24 + 16) = v16;
        goto LABEL_19;
      }
      v44 = 2;
    }
    v48 = (void *)__PAIR64__(v8, v44);
    v49 = v17;
    v50[0] = v16;
    goto LABEL_44;
  }
  return a2 + 8;
}

uint64_t sub_1C529D628(unsigned int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  _WORD *v7;
  unsigned __int16 *v8;
  unsigned __int16 v9;
  int v10;
  int v11;

  v4 = a2 + 8;
  result = llvm::MCRegisterInfo::getDwarfRegNum(a2 + 8, a1, 0);
  if (a2)
    v6 = (_QWORD *)v4;
  else
    v6 = 0;
  v7 = (_WORD *)(v6[6] + 2 * *(unsigned int *)(*v6 + 24 * a1 + 8));
  if (*v7 && (result & 0x80000000) != 0)
  {
    v8 = v7 + 1;
    v9 = *v7 + a1;
    do
    {
      result = llvm::MCRegisterInfo::getDwarfRegNum(v4, v9, 0);
      v11 = *v8++;
      v10 = v11;
      if (!v11)
        v8 = 0;
      if (!v10)
        break;
      v9 += v10;
    }
    while ((result & 0x80000000) != 0);
  }
  return result;
}

_WORD *llvm::StackMaps::parseRegisterLiveOutMask@<X0>(llvm::StackMaps *this@<X0>, const unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  const llvm::TargetRegisterInfo *LiveOutReg;
  const llvm::TargetRegisterInfo *v7;
  unsigned int *v8;
  int v9;
  unsigned int v10;
  unsigned int i;
  const llvm::TargetRegisterInfo *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *result;
  unsigned __int16 *v17;
  unsigned int v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  int v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  int v34;
  uint64_t v35;
  unsigned __int16 *v36;
  int v37;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 280) + 16);
  LiveOutReg = (const llvm::TargetRegisterInfo *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 176))(v5);
  v7 = LiveOutReg;
  v8 = (unsigned int *)(a3 + 16);
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x800000000;
  v9 = *((_DWORD *)LiveOutReg + 4);
  if (v9)
  {
    v10 = 0;
    for (i = 0; i != v9; ++i)
    {
      if (((a2[i >> 5] >> i) & 1) != 0)
      {
        LiveOutReg = (const llvm::TargetRegisterInfo *)llvm::StackMaps::createLiveOutReg(LiveOutReg, i, v7);
        v12 = LiveOutReg;
        if (v10 >= *(_DWORD *)(a3 + 12))
        {
          LiveOutReg = (const llvm::TargetRegisterInfo *)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v10 + 1, 6);
          v10 = *(_DWORD *)(a3 + 8);
        }
        v13 = *(_QWORD *)a3 + 6 * v10;
        *(_WORD *)(v13 + 4) = WORD2(v12);
        *(_DWORD *)v13 = (_DWORD)v12;
        v10 = *(_DWORD *)(a3 + 8) + 1;
        *(_DWORD *)(a3 + 8) = v10;
      }
    }
    v14 = *(_QWORD *)a3;
    v8 = (unsigned int *)(*(_QWORD *)a3 + 6 * v10);
    if (v10)
    {
      v15 = 126 - 2 * __clz(v10);
      goto LABEL_12;
    }
  }
  else
  {
    v14 = a3 + 16;
  }
  v15 = 0;
LABEL_12:
  result = (_WORD *)sub_1C529FEA8(v14, v8, v15, 1);
  v17 = *(unsigned __int16 **)a3;
  v18 = *(_DWORD *)(a3 + 8);
  if (v18)
  {
    v19 = &v17[3 * v18];
    v20 = *(unsigned __int16 **)a3;
    do
    {
      v21 = v20 + 3;
      if (v20 + 3 != v19)
      {
        v22 = v20[1];
        v23 = v20;
        while (1)
        {
          v24 = v21;
          if (v22 != v23[4])
            break;
          v25 = v20[2];
          if (v25 <= v23[5])
            LOWORD(v25) = v23[5];
          v20[2] = v25;
          v26 = v23[3];
          result = (_WORD *)(*((_QWORD *)v7 + 7) + 2 * *(unsigned int *)(*((_QWORD *)v7 + 1) + 24 * *v20 + 8));
          v27 = *result == 0;
          if (*result)
          {
            v28 = (unsigned __int16)*result + *v20;
            if (v26 != (unsigned __int16)v28)
            {
              ++result;
              do
              {
                v30 = (unsigned __int16)*result++;
                v29 = v30;
                v27 = v30 == 0;
                if (!v30)
                  result = 0;
                if (!v29)
                  break;
                v28 += v29;
              }
              while (v26 != (unsigned __int16)v28);
            }
          }
          if (!v27)
            *v20 = v26;
          *v24 = 0;
          v21 = v24 + 3;
          v23 = v24;
          if (v24 + 3 == v19)
            goto LABEL_31;
        }
        v20 = v23;
      }
LABEL_31:
      v20 += 3;
    }
    while (v20 != v19);
    v31 = 6 * v18 - 6;
    v32 = v17;
    v33 = v17;
    while (1)
    {
      v34 = *v33;
      v33 += 3;
      if (!v34)
        break;
      v31 -= 6;
      v32 = v33;
      if (v33 == v19)
        goto LABEL_44;
    }
    if (v33 == v19)
    {
      v19 = v32;
    }
    else
    {
      v35 = 3;
      v19 = v32;
      do
      {
        v36 = &v32[v35];
        if (v32[v35])
        {
          v37 = *(_DWORD *)v36;
          v19[2] = v36[2];
          *(_DWORD *)v19 = v37;
          v19 += 3;
        }
        v35 += 3;
        v31 -= 6;
      }
      while (v31);
      v17 = *(unsigned __int16 **)a3;
    }
  }
  else
  {
    v19 = *(unsigned __int16 **)a3;
  }
LABEL_44:
  *(_DWORD *)(a3 + 8) = -1431655765 * ((unint64_t)((char *)v19 - (char *)v17) >> 1);
  return result;
}

llvm::raw_ostream *llvm::StackMaps::print(llvm::StackMaps *this, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  llvm::raw_ostream *result;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  int *v23;
  unint64_t *v24;
  llvm::raw_ostream *v25;
  size_t v26;
  void *v27;
  uint64_t v28;
  _WORD *v29;
  unint64_t *v30;
  void *v31;
  _BYTE *v32;
  llvm::raw_ostream *v33;
  const char *v34;
  size_t v35;
  _BYTE *v36;
  int v37;
  _DWORD *v38;
  void (**v39)(void);
  _DWORD *v40;
  int v41;
  _DWORD *v42;
  void (**v43)(void);
  _BYTE *v44;
  int v45;
  _DWORD *v46;
  void (**v47)(void);
  void *v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  llvm::raw_ostream *v52;
  _WORD *v53;
  llvm::raw_ostream *v54;
  unint64_t v55;
  llvm::raw_ostream *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  _WORD *v63;
  llvm::raw_ostream *v64;
  size_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned __int16 *v71;
  uint64_t v72;
  llvm::raw_ostream *v73;
  size_t v74;
  void *v75;
  uint64_t v76;
  _WORD *v77;
  int v78;
  _DWORD *v79;
  void (**v80)(void);
  char *v81;
  llvm::raw_ostream *v82;
  uint64_t v83;
  _WORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD v87[3];
  _QWORD *v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)this + 280);
  if (v4)
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 16) + 176))(*(_QWORD *)(v4 + 16));
  else
    v5 = 0;
  result = (llvm::raw_ostream *)a2;
  if (llvm::StackMaps::WSMP)
  {
    v7 = strlen((const char *)llvm::StackMaps::WSMP);
    if (v7 <= (_BYTE *)a2[3] - (_BYTE *)a2[4])
    {
      result = (llvm::raw_ostream *)a2;
      if (v7)
      {
        memcpy(a2[4], (const void *)llvm::StackMaps::WSMP, v7);
        a2[4] = (char *)a2[4] + v7;
        result = (llvm::raw_ostream *)a2;
      }
    }
    else
    {
      result = llvm::raw_ostream::write((llvm::raw_ostream *)a2, (const char *)llvm::StackMaps::WSMP, v7);
    }
  }
  v8 = *((_QWORD *)result + 4);
  if ((unint64_t)(*((_QWORD *)result + 3) - v8) > 0xA)
  {
    *(_DWORD *)(v8 + 7) = 171602789;
    *(_QWORD *)v8 = *(_QWORD *)"callsites:\n";
    *((_QWORD *)result + 4) += 11;
  }
  else
  {
    result = llvm::raw_ostream::write(result, "callsites:\n", 0xBuLL);
  }
  v9 = *((_QWORD *)this + 1);
  v85 = *((_QWORD *)this + 2);
  if (v9 != v85)
  {
    while (1)
    {
      v10 = (llvm::raw_ostream *)a2;
      if (llvm::StackMaps::WSMP)
      {
        v11 = strlen((const char *)llvm::StackMaps::WSMP);
        v12 = a2[4];
        if (v11 <= (_BYTE *)a2[3] - (_BYTE *)v12)
        {
          v10 = (llvm::raw_ostream *)a2;
          if (v11)
          {
            memcpy(v12, (const void *)llvm::StackMaps::WSMP, v11);
            a2[4] = (char *)a2[4] + v11;
            v10 = (llvm::raw_ostream *)a2;
          }
        }
        else
        {
          v10 = llvm::raw_ostream::write((llvm::raw_ostream *)a2, (const char *)llvm::StackMaps::WSMP, v11);
        }
      }
      v13 = *((_QWORD *)v10 + 4);
      if ((unint64_t)(*((_QWORD *)v10 + 3) - v13) > 8)
      {
        *(_BYTE *)(v13 + 8) = 32;
        *(_QWORD *)v13 = *(_QWORD *)"callsite ";
        *((_QWORD *)v10 + 4) += 9;
      }
      else
      {
        v10 = llvm::raw_ostream::write(v10, "callsite ", 9uLL);
      }
      sub_1C5E21910(v10, *(_QWORD *)(v9 + 8), 0, 0, 0);
      v14 = (_BYTE *)*((_QWORD *)v10 + 4);
      if (*((_BYTE **)v10 + 3) == v14)
      {
        llvm::raw_ostream::write(v10, "\n", 1uLL);
      }
      else
      {
        *v14 = 10;
        ++*((_QWORD *)v10 + 4);
      }
      v15 = (llvm::raw_ostream *)a2;
      if (llvm::StackMaps::WSMP)
      {
        v16 = strlen((const char *)llvm::StackMaps::WSMP);
        v17 = a2[4];
        if (v16 <= (_BYTE *)a2[3] - (_BYTE *)v17)
        {
          v15 = (llvm::raw_ostream *)a2;
          if (v16)
          {
            memcpy(v17, (const void *)llvm::StackMaps::WSMP, v16);
            a2[4] = (char *)a2[4] + v16;
            v15 = (llvm::raw_ostream *)a2;
          }
        }
        else
        {
          v15 = llvm::raw_ostream::write((llvm::raw_ostream *)a2, (const char *)llvm::StackMaps::WSMP, v16);
        }
      }
      v18 = *((_QWORD *)v15 + 4);
      if ((unint64_t)(*((_QWORD *)v15 + 3) - v18) > 5)
      {
        *(_WORD *)(v18 + 4) = 8307;
        *(_DWORD *)v18 = 1634213920;
        *((_QWORD *)v15 + 4) += 6;
      }
      else
      {
        v15 = llvm::raw_ostream::write(v15, "  has ", 6uLL);
      }
      sub_1C5E21910(v15, *(unsigned int *)(v9 + 24), 0, 0, 0);
      v19 = *((_QWORD *)v15 + 4);
      if ((unint64_t)(*((_QWORD *)v15 + 3) - v19) > 0xA)
      {
        *(_DWORD *)(v19 + 7) = 175337071;
        *(_QWORD *)v19 = *(_QWORD *)" locations\n";
        *((_QWORD *)v15 + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(v15, " locations\n", 0xBuLL);
      }
      v86 = v9;
      v20 = *(_DWORD *)(v9 + 24);
      if (v20)
      {
        v21 = 0;
        v22 = *(_QWORD *)(v9 + 16);
        v23 = (int *)(v22 + 24 * v20);
        v24 = (unint64_t *)(v22 + 16);
        while (2)
        {
          v25 = (llvm::raw_ostream *)a2;
          if (llvm::StackMaps::WSMP)
          {
            v26 = strlen((const char *)llvm::StackMaps::WSMP);
            v27 = a2[4];
            if (v26 <= (_BYTE *)a2[3] - (_BYTE *)v27)
            {
              v25 = (llvm::raw_ostream *)a2;
              if (v26)
              {
                memcpy(v27, (const void *)llvm::StackMaps::WSMP, v26);
                a2[4] = (char *)a2[4] + v26;
                v25 = (llvm::raw_ostream *)a2;
              }
            }
            else
            {
              v25 = llvm::raw_ostream::write((llvm::raw_ostream *)a2, (const char *)llvm::StackMaps::WSMP, v26);
            }
          }
          v28 = *((_QWORD *)v25 + 4);
          if ((unint64_t)(*((_QWORD *)v25 + 3) - v28) > 5)
          {
            *(_WORD *)(v28 + 4) = 8291;
            *(_DWORD *)v28 = 1867254025;
            *((_QWORD *)v25 + 4) += 6;
          }
          else
          {
            v25 = llvm::raw_ostream::write(v25, "\t\tLoc ", 6uLL);
          }
          sub_1C5E21910(v25, v21, 0, 0, 0);
          v29 = (_WORD *)*((_QWORD *)v25 + 4);
          if (*((_QWORD *)v25 + 3) - (_QWORD)v29 > 1uLL)
          {
            *v29 = 8250;
            *((_QWORD *)v25 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v25, ": ", 2uLL);
          }
          v30 = v24 - 2;
          switch(*((_DWORD *)v24 - 4))
          {
            case 0:
              v31 = a2[4];
              if ((unint64_t)((_BYTE *)a2[3] - (_BYTE *)v31) > 0x14)
              {
                qmemcpy(v31, "<Unprocessed operand>", 21);
                a2[4] = (char *)a2[4] + 21;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)a2, "<Unprocessed operand>", 0x15uLL);
              }
              goto LABEL_80;
            case 1:
              v36 = a2[4];
              if ((unint64_t)((_BYTE *)a2[3] - v36) > 8)
              {
                v36[8] = 32;
                *(_QWORD *)v36 = *(_QWORD *)"Register ";
                a2[4] = (char *)a2[4] + 9;
                if (!v5)
                {
LABEL_68:
                  sub_1C5E21910((llvm::raw_ostream *)a2, *((unsigned int *)v24 - 2), 0, 0, 0);
                  goto LABEL_80;
                }
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)a2, "Register ", 9uLL);
                if (!v5)
                  goto LABEL_68;
              }
              v37 = *((_DWORD *)v24 - 2);
              v38 = operator new(0x28uLL);
              *(_QWORD *)v38 = &off_1E814D010;
              v38[2] = v37;
              *((_QWORD *)v38 + 2) = v5;
              v38[6] = 0;
              *((_QWORD *)v38 + 4) = 0;
              v88 = v38;
              sub_1C52C9630((llvm::raw_ostream *)v38, (llvm::raw_ostream *)a2);
              if (v88 == v87)
              {
                v39 = (void (**)(void))(v87[0] + 32);
              }
              else
              {
                if (!v88)
                  goto LABEL_80;
                v39 = (void (**)(void))(*v88 + 40);
              }
              (*v39)();
              goto LABEL_80;
            case 2:
              v40 = a2[4];
              if ((unint64_t)((_BYTE *)a2[3] - (_BYTE *)v40) > 6)
              {
                *(_DWORD *)((char *)v40 + 3) = 544498533;
                *v40 = 1701996868;
                a2[4] = (char *)a2[4] + 7;
                if (!v5)
                {
LABEL_70:
                  sub_1C5E21910((llvm::raw_ostream *)a2, *((unsigned int *)v24 - 2), 0, 0, 0);
                  goto LABEL_71;
                }
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)a2, "Direct ", 7uLL);
                if (!v5)
                  goto LABEL_70;
              }
              v41 = *((_DWORD *)v24 - 2);
              v42 = operator new(0x28uLL);
              *(_QWORD *)v42 = &off_1E814D010;
              v42[2] = v41;
              *((_QWORD *)v42 + 2) = v5;
              v42[6] = 0;
              *((_QWORD *)v42 + 4) = 0;
              v88 = v42;
              sub_1C52C9630((llvm::raw_ostream *)v42, (llvm::raw_ostream *)a2);
              if (v88 == v87)
              {
                v43 = (void (**)(void))(v87[0] + 32);
              }
              else
              {
                if (!v88)
                  goto LABEL_71;
                v43 = (void (**)(void))(*v88 + 40);
              }
              (*v43)();
LABEL_71:
              if (*v24)
              {
                v50 = a2[4];
                if ((unint64_t)((_BYTE *)a2[3] - v50) <= 2)
                {
                  v33 = (llvm::raw_ostream *)a2;
                  v34 = " + ";
                  v35 = 3;
                  goto LABEL_78;
                }
                v50[2] = 32;
                *(_WORD *)v50 = 11040;
                v49 = (uint64_t)a2[4] + 3;
                goto LABEL_108;
              }
LABEL_80:
              v53 = a2[4];
              if ((unint64_t)((_BYTE *)a2[3] - (_BYTE *)v53) > 0x11)
              {
                v53[8] = 8293;
                *(_OWORD *)v53 = *(_OWORD *)"\t[encoding: .byte ";
                a2[4] = (char *)a2[4] + 18;
                v54 = (llvm::raw_ostream *)a2;
              }
              else
              {
                v54 = llvm::raw_ostream::write((llvm::raw_ostream *)a2, "\t[encoding: .byte ", 0x12uLL);
              }
              v55 = *(int *)v30;
              if ((v55 & 0x80000000) != 0)
              {
                v55 = -(uint64_t)v55;
                v56 = v54;
                v57 = 1;
              }
              else
              {
                v56 = v54;
                v57 = 0;
              }
              sub_1C5E21910(v56, v55, 0, 0, v57);
              v58 = *((_QWORD *)v54 + 4);
              if ((unint64_t)(*((_QWORD *)v54 + 3) - v58) > 8)
              {
                *(_BYTE *)(v58 + 8) = 48;
                *(_QWORD *)v58 = *(_QWORD *)", .byte 0";
                v59 = *((_QWORD *)v54 + 4) + 9;
                *((_QWORD *)v54 + 4) = v59;
              }
              else
              {
                v54 = llvm::raw_ostream::write(v54, ", .byte 0", 9uLL);
                v59 = *((_QWORD *)v54 + 4);
              }
              if ((unint64_t)(*((_QWORD *)v54 + 3) - v59) > 8)
              {
                *(_BYTE *)(v59 + 8) = 32;
                *(_QWORD *)v59 = *(_QWORD *)", .short ";
                *((_QWORD *)v54 + 4) += 9;
              }
              else
              {
                v54 = llvm::raw_ostream::write(v54, ", .short ", 9uLL);
              }
              sub_1C5E21910(v54, *((unsigned int *)v24 - 3), 0, 0, 0);
              v60 = *((_QWORD *)v54 + 4);
              if ((unint64_t)(*((_QWORD *)v54 + 3) - v60) > 8)
              {
                *(_BYTE *)(v60 + 8) = 32;
                *(_QWORD *)v60 = *(_QWORD *)", .short ";
                *((_QWORD *)v54 + 4) += 9;
              }
              else
              {
                v54 = llvm::raw_ostream::write(v54, ", .short ", 9uLL);
              }
              sub_1C5E21910(v54, *((unsigned int *)v24 - 2), 0, 0, 0);
              v61 = *((_QWORD *)v54 + 4);
              if ((unint64_t)(*((_QWORD *)v54 + 3) - v61) > 9)
              {
                *(_WORD *)(v61 + 8) = 12320;
                *(_QWORD *)v61 = *(_QWORD *)", .short 0";
                v62 = (_DWORD *)(*((_QWORD *)v54 + 4) + 10);
                *((_QWORD *)v54 + 4) = v62;
              }
              else
              {
                v54 = llvm::raw_ostream::write(v54, ", .short 0", 0xAuLL);
                v62 = (_DWORD *)*((_QWORD *)v54 + 4);
              }
              if (*((_QWORD *)v54 + 3) - (_QWORD)v62 > 6uLL)
              {
                *(_DWORD *)((char *)v62 + 3) = 544501353;
                *v62 = 1764630572;
                *((_QWORD *)v54 + 4) += 7;
              }
              else
              {
                v54 = llvm::raw_ostream::write(v54, ", .int ", 7uLL);
              }
              llvm::raw_ostream::operator<<(v54, *v24);
              v63 = (_WORD *)*((_QWORD *)v54 + 4);
              if (*((_QWORD *)v54 + 3) - (_QWORD)v63 > 1uLL)
              {
                *v63 = 2653;
                *((_QWORD *)v54 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v54, "]\n", 2uLL);
              }
              ++v21;
              v24 += 3;
              if (v30 + 3 == (unint64_t *)v23)
                break;
              continue;
            case 3:
              v44 = a2[4];
              if ((unint64_t)((_BYTE *)a2[3] - v44) > 8)
              {
                v44[8] = 32;
                *(_QWORD *)v44 = *(_QWORD *)"Indirect ";
                a2[4] = (char *)a2[4] + 9;
                if (v5)
                {
LABEL_50:
                  v45 = *((_DWORD *)v24 - 2);
                  v46 = operator new(0x28uLL);
                  *(_QWORD *)v46 = &off_1E814D010;
                  v46[2] = v45;
                  *((_QWORD *)v46 + 2) = v5;
                  v46[6] = 0;
                  *((_QWORD *)v46 + 4) = 0;
                  v88 = v46;
                  sub_1C52C9630((llvm::raw_ostream *)v46, (llvm::raw_ostream *)a2);
                  if (v88 == v87)
                  {
                    v47 = (void (**)(void))(v87[0] + 32);
                  }
                  else
                  {
                    if (!v88)
                    {
LABEL_76:
                      v51 = a2[4];
                      if (a2[3] == v51)
                      {
                        v33 = (llvm::raw_ostream *)a2;
                        v34 = "+";
                        v35 = 1;
                        goto LABEL_78;
                      }
                      *v51 = 43;
                      v49 = (uint64_t)a2[4] + 1;
                      goto LABEL_108;
                    }
                    v47 = (void (**)(void))(*v88 + 40);
                  }
                  (*v47)();
                  goto LABEL_76;
                }
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)a2, "Indirect ", 9uLL);
                if (v5)
                  goto LABEL_50;
              }
              sub_1C5E21910((llvm::raw_ostream *)a2, *((unsigned int *)v24 - 2), 0, 0, 0);
              goto LABEL_76;
            case 4:
              v32 = a2[4];
              if ((unint64_t)((_BYTE *)a2[3] - v32) <= 8)
              {
                v33 = (llvm::raw_ostream *)a2;
                v34 = "Constant ";
                v35 = 9;
                goto LABEL_78;
              }
              v32[8] = 32;
              *(_QWORD *)v32 = *(_QWORD *)"Constant ";
              v49 = (uint64_t)a2[4] + 9;
              goto LABEL_108;
            case 5:
              v48 = a2[4];
              if ((unint64_t)((_BYTE *)a2[3] - (_BYTE *)v48) > 0xE)
              {
                qmemcpy(v48, "Constant Index ", 15);
                v49 = (uint64_t)a2[4] + 15;
LABEL_108:
                a2[4] = (void *)v49;
                v52 = (llvm::raw_ostream *)a2;
              }
              else
              {
                v33 = (llvm::raw_ostream *)a2;
                v34 = "Constant Index ";
                v35 = 15;
LABEL_78:
                v52 = llvm::raw_ostream::write(v33, v34, v35);
              }
              llvm::raw_ostream::operator<<(v52, *v24);
              goto LABEL_80;
            default:
              goto LABEL_80;
          }
          break;
        }
      }
      v64 = (llvm::raw_ostream *)a2;
      if (llvm::StackMaps::WSMP)
      {
        v65 = strlen((const char *)llvm::StackMaps::WSMP);
        v66 = a2[4];
        if (v65 <= (_BYTE *)a2[3] - (_BYTE *)v66)
        {
          v64 = (llvm::raw_ostream *)a2;
          if (v65)
          {
            memcpy(v66, (const void *)llvm::StackMaps::WSMP, v65);
            a2[4] = (char *)a2[4] + v65;
            v64 = (llvm::raw_ostream *)a2;
          }
        }
        else
        {
          v64 = llvm::raw_ostream::write((llvm::raw_ostream *)a2, (const char *)llvm::StackMaps::WSMP, v65);
        }
      }
      v67 = *((_QWORD *)v64 + 4);
      if ((unint64_t)(*((_QWORD *)v64 + 3) - v67) > 4)
      {
        *(_BYTE *)(v67 + 4) = 32;
        *(_DWORD *)v67 = 1935763465;
        *((_QWORD *)v64 + 4) += 5;
      }
      else
      {
        v64 = llvm::raw_ostream::write(v64, "\thas ", 5uLL);
      }
      result = sub_1C5E21910(v64, *(unsigned int *)(v86 + 232), 0, 0, 0);
      v68 = *((_QWORD *)v64 + 4);
      if ((unint64_t)(*((_QWORD *)v64 + 3) - v68) > 0x13)
      {
        *(_DWORD *)(v68 + 16) = 175338085;
        *(_OWORD *)v68 = *(_OWORD *)" live-out registers\n";
        *((_QWORD *)v64 + 4) += 20;
      }
      else
      {
        result = llvm::raw_ostream::write(v64, " live-out registers\n", 0x14uLL);
      }
      v69 = *(unsigned int *)(v86 + 232);
      if ((_DWORD)v69)
        break;
LABEL_147:
      v9 = v86 + 288;
      if (v86 + 288 == v85)
        return result;
    }
    v70 = 0;
    v71 = *(unsigned __int16 **)(v86 + 224);
    v72 = 6 * v69;
    while (1)
    {
      v73 = (llvm::raw_ostream *)a2;
      if (llvm::StackMaps::WSMP)
      {
        v74 = strlen((const char *)llvm::StackMaps::WSMP);
        v75 = a2[4];
        if (v74 <= (_BYTE *)a2[3] - (_BYTE *)v75)
        {
          v73 = (llvm::raw_ostream *)a2;
          if (v74)
          {
            memcpy(v75, (const void *)llvm::StackMaps::WSMP, v74);
            a2[4] = (char *)a2[4] + v74;
            v73 = (llvm::raw_ostream *)a2;
          }
        }
        else
        {
          v73 = llvm::raw_ostream::write((llvm::raw_ostream *)a2, (const char *)llvm::StackMaps::WSMP, v74);
        }
      }
      v76 = *((_QWORD *)v73 + 4);
      if ((unint64_t)(*((_QWORD *)v73 + 3) - v76) > 4)
      {
        *(_BYTE *)(v76 + 4) = 32;
        *(_DWORD *)v76 = 1330383113;
        *((_QWORD *)v73 + 4) += 5;
      }
      else
      {
        v73 = llvm::raw_ostream::write(v73, "\t\tLO ", 5uLL);
      }
      sub_1C5E21910(v73, v70, 0, 0, 0);
      v77 = (_WORD *)*((_QWORD *)v73 + 4);
      if (*((_QWORD *)v73 + 3) - (_QWORD)v77 > 1uLL)
      {
        *v77 = 8250;
        *((_QWORD *)v73 + 4) += 2;
        if (!v5)
        {
LABEL_135:
          sub_1C5E21910((llvm::raw_ostream *)a2, *v71, 0, 0, 0);
          goto LABEL_136;
        }
      }
      else
      {
        llvm::raw_ostream::write(v73, ": ", 2uLL);
        if (!v5)
          goto LABEL_135;
      }
      v78 = *v71;
      v79 = operator new(0x28uLL);
      *(_QWORD *)v79 = &off_1E814D010;
      v79[2] = v78;
      *((_QWORD *)v79 + 2) = v5;
      v79[6] = 0;
      *((_QWORD *)v79 + 4) = 0;
      v88 = v79;
      sub_1C52C9630((llvm::raw_ostream *)v79, (llvm::raw_ostream *)a2);
      if (v88 == v87)
        break;
      if (v88)
      {
        v80 = (void (**)(void))(*v88 + 40);
LABEL_130:
        (*v80)();
      }
LABEL_136:
      v81 = (char *)a2[4];
      if ((unint64_t)((_BYTE *)a2[3] - v81) > 0x12)
      {
        *(_DWORD *)(v81 + 15) = 544502383;
        *(_OWORD *)v81 = *(_OWORD *)"\t[encoding: .short ";
        a2[4] = (char *)a2[4] + 19;
        v82 = (llvm::raw_ostream *)a2;
      }
      else
      {
        v82 = llvm::raw_ostream::write((llvm::raw_ostream *)a2, "\t[encoding: .short ", 0x13uLL);
      }
      sub_1C5E21910(v82, v71[1], 0, 0, 0);
      v83 = *((_QWORD *)v82 + 4);
      if ((unint64_t)(*((_QWORD *)v82 + 3) - v83) > 0x10)
      {
        *(_BYTE *)(v83 + 16) = 32;
        *(_OWORD *)v83 = *(_OWORD *)", .byte 0, .byte ";
        *((_QWORD *)v82 + 4) += 17;
      }
      else
      {
        v82 = llvm::raw_ostream::write(v82, ", .byte 0, .byte ", 0x11uLL);
      }
      result = sub_1C5E21910(v82, v71[2], 0, 0, 0);
      v84 = (_WORD *)*((_QWORD *)v82 + 4);
      if (*((_QWORD *)v82 + 3) - (_QWORD)v84 > 1uLL)
      {
        *v84 = 2653;
        *((_QWORD *)v82 + 4) += 2;
      }
      else
      {
        result = llvm::raw_ostream::write(v82, "]\n", 2uLL);
      }
      ++v70;
      v71 += 3;
      v72 -= 6;
      if (!v72)
        goto LABEL_147;
    }
    v80 = (void (**)(void))(v87[0] + 32);
    goto LABEL_130;
  }
  return result;
}

unint64_t llvm::StackMaps::createLiveOutReg(llvm::StackMaps *this, unsigned int a2, const llvm::TargetRegisterInfo *a3)
{
  int v5;
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t v10;

  v5 = sub_1C529D628(a2, (uint64_t)a3);
  v6 = 0;
  v7 = (uint64_t **)*((_QWORD *)a3 + 31);
  v8 = (unint64_t)a2 >> 3;
  v9 = (uint64_t **)*((_QWORD *)a3 + 30);
  do
  {
    if (a2 - 0x40000000 >= 0xC0000001)
    {
      v10 = **v9;
      if (v8 < *(unsigned __int16 *)(v10 + 22)
        && ((1 << (a2 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v10 + 8) + v8)) != 0
        && (!v6
         || *v9 != v6
         && ((*(_DWORD *)(v6[1] + ((*(unsigned __int16 *)(v10 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v10 + 24)) & 1) != 0))
      {
        v6 = *v9;
      }
    }
    ++v9;
  }
  while (v9 != v7);
  return (v5 << 16) | ((unint64_t)(*(_DWORD *)(*((_QWORD *)a3 + 33)
                                                                  + 24
                                                                  * (*(unsigned __int16 *)(*v6 + 24)
                                                                   + *((_DWORD *)a3 + 68)
                                                                   * (((unint64_t)v7
                                                                                   - *((_QWORD *)a3 + 30)) >> 3))
                                                                  + 4) >> 3) << 32) | (unsigned __int16)a2;
}

void llvm::StackMaps::parseStatepointOpers(llvm::StackMaps *a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int i;
  int v22;
  int *v23;
  int v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  unsigned int NumGCPtrIdx;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  void *v43;
  uint64_t v44;
  _BYTE v45[64];
  void *v46;
  uint64_t v47;
  _QWORD v48[6];

  v48[4] = *MEMORY[0x1E0C80C00];
  v41 = a2;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(unsigned __int8 *)(v10 + 4);
  if ((*(_BYTE *)(v10 + 8) & 2) == 0 || (v26 = *(_DWORD *)(a2 + 40), v26 == v11))
  {
    v12 = *(unsigned __int8 *)(v10 + 4);
  }
  else
  {
    v27 = v26 - 1;
    v12 = *(unsigned __int8 *)(v10 + 4);
    do
    {
      v28 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v11);
      if ((v28 & 0x10000FF) != 0x1000000)
        break;
      v12 += (v28 & 0x2000000) == 0;
      if (v27 == v11)
        break;
      ++v11;
    }
    while ((v28 & 0x2000000) == 0);
  }
  v13 = *(_QWORD *)(v10 + 32);
  if (v13)
  {
    v14 = -1;
    do
      ++v14;
    while (*(_WORD *)(v13 + 2 * v14));
  }
  else
  {
    v14 = 0;
  }
  v42 = v14 + v12;
  v15 = llvm::StackMaps::parseOperand(a1, a3, (uint64_t)a3, a5, a6);
  v17 = llvm::StackMaps::parseOperand(a1, v15, v16, a5, a6);
  v19 = llvm::StackMaps::parseOperand(a1, v17, v18, a5, a6);
  for (i = *(_DWORD *)(*(_QWORD *)a5 + 24 * *(unsigned int *)(a5 + 8) - 8);
        i;
        v19 = llvm::StackMaps::parseOperand(a1, v19, v20, a5, a6))
  {
    --i;
  }
  v22 = v19[12];
  if (v22)
  {
    v46 = v48;
    v47 = 0x800000000;
    NumGCPtrIdx = llvm::StatepointOpers::getNumGCPtrIdx((llvm::StatepointOpers *)&v41);
    v30 = 0;
    if (*(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * NumGCPtrIdx + 16))
      LODWORD(v31) = NumGCPtrIdx + 1;
    else
      LODWORD(v31) = -1;
    do
    {
      if (v30 >= HIDWORD(v47))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v30 + 1, 4);
        v30 = v47;
      }
      *((_DWORD *)v46 + v30) = v31;
      v30 = v47 + 1;
      LODWORD(v47) = v47 + 1;
      v32 = *(_QWORD *)(a2 + 32);
      if (*(_BYTE *)(v32 + 32 * v31) == 1)
      {
        v33 = *(_QWORD *)(v32 + 32 * v31 + 16);
        if (v33)
        {
          if (v33 == 1)
            LODWORD(v31) = v31 + 3;
          else
            LODWORD(v31) = v31 + 1;
        }
        else
        {
          LODWORD(v31) = v31 + 2;
        }
      }
      v31 = (v31 + 1);
      --v22;
    }
    while (v22);
    v43 = v45;
    v44 = 0x800000000;
    llvm::StatepointOpers::getGCPointerMap((llvm::StatepointOpers *)&v41, (uint64_t)&v43);
    v34 = *(_QWORD *)(a2 + 32);
    v35 = (unsigned int *)v43;
    if ((_DWORD)v44)
    {
      v36 = (unsigned int *)((char *)v43 + 8 * v44);
      do
      {
        v37 = *v35;
        v38 = v35[1];
        v35 += 2;
        v39 = *((unsigned int *)v46 + v38);
        llvm::StackMaps::parseOperand(a1, (int *)(v34 + 32 * *((unsigned int *)v46 + v37)), v20, a5, a6);
        llvm::StackMaps::parseOperand(a1, (int *)(v34 + 32 * v39), v40, a5, a6);
      }
      while (v35 != v36);
      v35 = (unsigned int *)v43;
    }
    if (v35 != (unsigned int *)v45)
      free(v35);
    v23 = (int *)(v34 + 32 * v31);
    if (v46 != v48)
      free(v46);
  }
  else
  {
    v23 = v19 + 16;
  }
  v24 = v23[12];
  if (v24)
  {
    v25 = v23 + 16;
    do
    {
      --v24;
      v25 = llvm::StackMaps::parseOperand(a1, v25, v20, a5, a6);
    }
    while (v24);
  }
}

void llvm::StackMaps::recordStackMapOpers(llvm::StackMaps *this, const llvm::MCSymbol *a2, int **a3, uint64_t a4, const llvm::MachineOperand *a5, const llvm::MachineOperand *a6, int a7)
{
  llvm::StackMaps *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64x2_t *v20;
  int64x2_t *v21;
  uint64_t v22;
  int64x2_t *v23;
  uint64_t v24;
  llvm::StackMaps *v25;
  int64x2_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  int64x2_t *v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  llvm::StackMaps *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  _QWORD *v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t *v79;
  __int128 v80;
  uint64_t v81;
  const llvm::MCSymbol *v82;
  uint64_t v83;
  _QWORD v84[2];
  char v85;
  unint64_t v86;
  int v87;
  void *v88[2];
  _BYTE v89[48];
  void *v90;
  uint64_t v91;
  _QWORD v92[26];

  v12 = this;
  v92[24] = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 272) + 8);
  v90 = v92;
  v91 = 0x800000000;
  v88[0] = v89;
  v88[1] = (void *)0x800000000;
  if (a7)
    llvm::StackMaps::parseOperand(this, a3[4], (uint64_t)a3, (uint64_t)&v90, (uint64_t)v88);
  v81 = a4;
  v82 = a2;
  v83 = v13;
  if (*(_WORD *)a3[2] == 31)
  {
    llvm::StackMaps::parseStatepointOpers(v12, (uint64_t)a3, (int *)a5, a4, (uint64_t)&v90, (uint64_t)v88);
  }
  else
  {
    for (;
          a5 != a6;
          a5 = (const llvm::MachineOperand *)llvm::StackMaps::parseOperand(v12, (int *)a5, (uint64_t)a3, (uint64_t)&v90, (uint64_t)v88))
    {
      ;
    }
  }
  if ((_DWORD)v91)
  {
    v14 = (char *)v90;
    v15 = (char *)v90 + 24 * v91;
    v16 = (uint64_t)v12 + 32;
    do
    {
      if (*(_DWORD *)v14 == 4)
      {
        v17 = *((_QWORD *)v14 + 2);
        if (v17 != (int)v17)
        {
          *(_DWORD *)v14 = 5;
          v86 = v17;
          v87 = 0;
          sub_1C52A0B94(v16, (uint64_t *)&v86, &v87, (uint64_t)v84);
          v18 = v84[0];
          if (v85)
          {
            v20 = (int64x2_t *)*((_QWORD *)v12 + 8);
            v19 = *((_QWORD *)v12 + 9);
            if ((unint64_t)v20 >= v19)
            {
              v24 = v16;
              v25 = v12;
              v26 = (int64x2_t *)*((_QWORD *)v12 + 7);
              v27 = v20 - v26;
              v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 60)
                goto LABEL_96;
              v29 = v19 - (_QWORD)v26;
              if (v29 >> 3 > v28)
                v28 = v29 >> 3;
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
                v30 = 0xFFFFFFFFFFFFFFFLL;
              else
                v30 = v28;
              if (v30)
              {
                if (v30 >> 60)
                  goto LABEL_97;
                v31 = (char *)operator new(16 * v30);
              }
              else
              {
                v31 = 0;
              }
              v32 = (int64x2_t *)&v31[16 * v27];
              *v32 = vdupq_n_s64(v17);
              v21 = v32 + 1;
              v16 = v24;
              if (v20 == v26)
              {
                v12 = v25;
              }
              else
              {
                do
                {
                  v32[-1] = v20[-1];
                  --v32;
                  --v20;
                }
                while (v20 != v26);
                v12 = v25;
                v20 = (int64x2_t *)*((_QWORD *)v25 + 7);
              }
              *((_QWORD *)v12 + 7) = v32;
              *((_QWORD *)v12 + 8) = v21;
              *((_QWORD *)v12 + 9) = &v31[16 * v30];
              if (v20)
                operator delete(v20);
            }
            else
            {
              v20->i64[0] = v17;
              v20->i64[1] = v17;
              v21 = v20 + 1;
            }
            *((_QWORD *)v12 + 8) = v21;
            v22 = *((_QWORD *)v12 + 7);
            *(_DWORD *)(v18 + 8) = (((unint64_t)v21 - v22) >> 4) - 1;
            v23 = v21 - 1;
          }
          else
          {
            v22 = *((_QWORD *)v12 + 7);
            v23 = (int64x2_t *)(v22 + 16 * *(unsigned int *)(v84[0] + 8));
          }
          *((_QWORD *)v14 + 2) = ((uint64_t)v23->i64 - v22) >> 4;
        }
      }
      v14 += 24;
    }
    while (v14 != v15);
  }
  v33 = sub_1C484358C(v83 + 192, 24, 3);
  v34 = *(unsigned __int8 *)(*(_QWORD *)(v83 + 152) + 18) << 16;
  *(_BYTE *)v33 = 2;
  *(_DWORD *)(v33 + 1) = v34 | (*(unsigned __int8 *)(v33 + 4) << 24);
  *(_QWORD *)(v33 + 8) = 0;
  *(_QWORD *)(v33 + 16) = v82;
  v35 = *(_QWORD *)(*(_QWORD *)v12 + 344);
  v36 = sub_1C484358C(v83 + 192, 24, 3);
  v37 = *(unsigned __int8 *)(*(_QWORD *)(v83 + 152) + 18) << 16;
  *(_BYTE *)v36 = 2;
  *(_DWORD *)(v36 + 1) = v37 | (*(unsigned __int8 *)(v36 + 4) << 24);
  *(_QWORD *)(v36 + 8) = 0;
  *(_QWORD *)(v36 + 16) = v35;
  v38 = sub_1C484358C(v83 + 192, 32, 3);
  *(_BYTE *)v38 = 0;
  *(_DWORD *)(v38 + 1) = (*(unsigned __int8 *)(v38 + 4) << 24) | 0x12;
  *(_QWORD *)(v38 + 8) = 0;
  *(_QWORD *)(v38 + 16) = v33;
  *(_QWORD *)(v38 + 24) = v36;
  v39 = (_QWORD *)*((_QWORD *)v12 + 2);
  v40 = *((_QWORD *)v12 + 3);
  if ((unint64_t)v39 >= v40)
  {
    v42 = *((_QWORD *)v12 + 1);
    v43 = 0x8E38E38E38E38E39 * (((uint64_t)v39 - v42) >> 5);
    if (v43 + 1 > 0xE38E38E38E38E3)
      goto LABEL_96;
    v44 = 0x8E38E38E38E38E39 * ((uint64_t)(v40 - v42) >> 5);
    v45 = 2 * v44;
    if (2 * v44 <= v43 + 1)
      v45 = v43 + 1;
    if (v44 >= 0x71C71C71C71C71)
      v46 = 0xE38E38E38E38E3;
    else
      v46 = v45;
    if (v46)
    {
      if (v46 > 0xE38E38E38E38E3)
        goto LABEL_97;
      v47 = (char *)operator new(288 * v46);
    }
    else
    {
      v47 = 0;
    }
    v48 = &v47[288 * v43];
    v49 = &v47[288 * v46];
    sub_1C52A0C84(v48, v38, v81, (uint64_t)&v90, (uint64_t)v88);
    v41 = v48 + 288;
    v51 = (char *)*((_QWORD *)v12 + 1);
    v50 = (char *)*((_QWORD *)v12 + 2);
    if (v50 == v51)
    {
      *((_QWORD *)v12 + 1) = v48;
      *((_QWORD *)v12 + 2) = v41;
      *((_QWORD *)v12 + 3) = v49;
    }
    else
    {
      v52 = v12;
      v53 = 0;
      do
      {
        v54 = &v48[v53];
        v55 = &v50[v53];
        *(_OWORD *)&v48[v53 - 288] = *(_OWORD *)&v50[v53 - 288];
        v56 = &v48[v53 - 272];
        *(_QWORD *)v56 = &v48[v53 - 256];
        *(_QWORD *)&v48[v53 - 264] = 0x800000000;
        if (*(_DWORD *)&v50[v53 - 264])
          sub_1C476393C((uint64_t)v56, (uint64_t)(v55 - 272));
        *((_QWORD *)v54 - 8) = v54 - 48;
        v57 = (uint64_t)(v54 - 64);
        *(_QWORD *)(v57 + 8) = 0x800000000;
        if (*((_DWORD *)v55 - 14))
          sub_1C529FD80(v57, (uint64_t)&v50[v53 - 64]);
        v53 -= 288;
      }
      while (&v50[v53] != v51);
      v12 = v52;
      v50 = (char *)*((_QWORD *)v52 + 1);
      v58 = (char *)*((_QWORD *)v52 + 2);
      *((_QWORD *)v52 + 1) = &v48[v53];
      *((_QWORD *)v52 + 2) = v41;
      *((_QWORD *)v52 + 3) = v49;
      while (v58 != v50)
      {
        v59 = (char *)*((_QWORD *)v58 - 8);
        if (v58 - 48 != v59)
          free(v59);
        v60 = (char *)*((_QWORD *)v58 - 34);
        if (v58 - 256 != v60)
          free(v60);
        v58 -= 288;
      }
    }
    if (v50)
      operator delete(v50);
  }
  else
  {
    v41 = sub_1C52A0C84(v39, v38, v81, (uint64_t)&v90, (uint64_t)v88) + 36;
  }
  *((_QWORD *)v12 + 2) = v41;
  v61 = *(_QWORD *)(*(_QWORD *)v12 + 280);
  v62 = *(_QWORD *)(v61 + 56);
  v63 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v61 + 16) + 176))(*(_QWORD *)(v61 + 16));
  if (*(_BYTE *)(v62 + 36)
    || (v65 = v63,
        v66 = *(_QWORD *)(*(_QWORD *)v12 + 280),
        (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 440))(v63, v66))
    && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 432))(v65, v66) & 1) != 0)
  {
    v64 = -1;
  }
  else
  {
    v64 = *(_QWORD *)(v62 + 48);
  }
  v86 = *(_QWORD *)(*(_QWORD *)v12 + 328);
  v84[0] = 0;
  if (sub_1C52A0CF8((uint64_t *)v12 + 10, &v86, v84))
  {
    if (v84[0] != *((_QWORD *)v12 + 10) + 16 * *((unsigned int *)v12 + 24))
    {
      v67 = *(_DWORD *)(v84[0] + 8);
      v68 = *((_QWORD *)v12 + 13);
      if (*((_QWORD *)v12 + 14) != v68 + 24 * v67)
      {
        ++*(_QWORD *)(v68 + 24 * v67 + 16);
        goto LABEL_72;
      }
    }
  }
  v69 = *(_QWORD *)(*(_QWORD *)v12 + 328);
  v86 = v69;
  v87 = 0;
  sub_1C6214268((uint64_t)v12 + 80, &v86, &v87, (uint64_t)v84);
  if (v85)
  {
    v70 = v84[0];
    v72 = (uint64_t *)*((_QWORD *)v12 + 14);
    v71 = *((_QWORD *)v12 + 15);
    if ((unint64_t)v72 < v71)
    {
      *v72 = v69;
      v72[1] = v64;
      v72[2] = 1;
      v73 = v72 + 3;
LABEL_95:
      *((_QWORD *)v12 + 14) = v73;
      *(_DWORD *)(v70 + 8) = -1431655765 * (((unint64_t)v73 - *((_QWORD *)v12 + 13)) >> 3) - 1;
      goto LABEL_72;
    }
    v74 = (_QWORD *)*((_QWORD *)v12 + 13);
    v75 = 0xAAAAAAAAAAAAAAABLL * (v72 - v74) + 1;
    if (v75 <= 0xAAAAAAAAAAAAAAALL)
    {
      v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - (_QWORD)v74) >> 3);
      if (2 * v76 > v75)
        v75 = 2 * v76;
      if (v76 >= 0x555555555555555)
        v77 = 0xAAAAAAAAAAAAAAALL;
      else
        v77 = v75;
      if (!v77)
      {
        v78 = 0;
        goto LABEL_90;
      }
      if (v77 <= 0xAAAAAAAAAAAAAAALL)
      {
        v78 = (char *)operator new(24 * v77);
LABEL_90:
        v79 = (uint64_t *)&v78[8 * (v72 - v74)];
        *v79 = v69;
        v79[1] = v64;
        v79[2] = 1;
        v73 = v79 + 3;
        if (v72 != v74)
        {
          do
          {
            v80 = *(_OWORD *)(v72 - 3);
            *(v79 - 1) = *(v72 - 1);
            *(_OWORD *)(v79 - 3) = v80;
            v79 -= 3;
            v72 -= 3;
          }
          while (v72 != v74);
          v72 = (uint64_t *)*((_QWORD *)v12 + 13);
        }
        *((_QWORD *)v12 + 13) = v79;
        *((_QWORD *)v12 + 14) = v73;
        *((_QWORD *)v12 + 15) = &v78[24 * v77];
        if (v72)
          operator delete(v72);
        goto LABEL_95;
      }
LABEL_97:
      sub_1C4764EE4();
    }
LABEL_96:
    abort();
  }
LABEL_72:
  if (v88[0] != v89)
    free(v88[0]);
  if (v90 != v92)
    free(v90);
}

void llvm::StackMaps::recordStackMap(llvm::StackMaps *this, const llvm::MCSymbol *a2, int **a3)
{
  llvm::StackMaps::recordStackMapOpers(this, a2, a3, *((_QWORD *)a3[4] + 2), (const llvm::MachineOperand *)(a3[4] + 16), (const llvm::MachineOperand *)&a3[4][8 * *((unsigned int *)a3 + 10)], 0);
}

void llvm::StackMaps::recordPatchPoint(llvm::StackMaps *this, const llvm::MCSymbol *a2, const llvm::MachineInstr *a3)
{
  _DWORD *v3;
  int v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v11;

  v3 = (_DWORD *)*((_QWORD *)a3 + 4);
  v4 = *v3 & 0x30000FF;
  v5 = &v3[8 * (v4 == 0x1000000)];
  v6 = *((_QWORD *)v5 + 2);
  v7 = v5[36];
  v8 = 5;
  if (v4 == 0x1000000)
    v8 = 6;
  if (v7 != 13)
  {
    v9 = 24;
    if (v4 == 0x1000000)
      v9 = 32;
    v8 = (v3[v9 + 4] + v8);
  }
  v11 = v4 == 0x1000000 && v7 == 13;
  llvm::StackMaps::recordStackMapOpers(this, a2, (int **)a3, v6, (const llvm::MachineOperand *)&v3[8 * v8], (const llvm::MachineOperand *)&v3[8 * *((unsigned int *)a3 + 10)], v11);
}

void llvm::StackMaps::recordStatepoint(llvm::StackMaps *this, const llvm::MCSymbol *a2, const llvm::MachineInstr *a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;

  v3 = *((_QWORD *)a3 + 2);
  v4 = *(unsigned __int8 *)(v3 + 4);
  if ((*(_BYTE *)(v3 + 8) & 2) == 0 || (v8 = *((_DWORD *)a3 + 10), v8 == v4))
  {
    v5 = *(unsigned __int8 *)(v3 + 4);
  }
  else
  {
    v9 = v8 - 1;
    v5 = *(unsigned __int8 *)(v3 + 4);
    do
    {
      v10 = *(_DWORD *)(*((_QWORD *)a3 + 4) + 32 * v4);
      if ((v10 & 0x10000FF) != 0x1000000)
        break;
      v5 += (v10 & 0x2000000) == 0;
      if (v9 == v4)
        break;
      ++v4;
    }
    while ((v10 & 0x2000000) == 0);
  }
  v6 = *(_QWORD *)(v3 + 32);
  if (v6)
  {
    v7 = -1;
    do
      ++v7;
    while (*(_WORD *)(v6 + 2 * v7));
  }
  else
  {
    v7 = 0;
  }
  llvm::StackMaps::recordStackMapOpers(this, a2, (int **)a3, *(_QWORD *)(*((_QWORD *)a3 + 4) + 32 * (v7 + v5) + 16), (const llvm::MachineOperand *)(*((_QWORD *)a3 + 4)+ 32 * (v7 + v5 + *(_DWORD *)(*((_QWORD *)a3 + 4) + 32 * (v7 + v5 + 2) + 16) + 4)), (const llvm::MachineOperand *)(*((_QWORD *)a3 + 4) + 32 * *((unsigned int *)a3 + 10)), 0);
}

uint64_t llvm::StackMaps::emitStackmapHeader(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, dword_1ED7FFFD8, 1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0, 1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0, 2);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[14] - a1[13]) >> 3), 4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 512))(a2, (uint64_t)(a1[8] - a1[7]) >> 4, 4);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - a1[1]) >> 5), 4);
}

uint64_t llvm::StackMaps::emitFunctionFrameRecords(uint64_t this, llvm::MCStreamer *a2)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(this + 104);
  for (i = *(_QWORD *)(this + 112); v2 != i; v2 += 24)
  {
    llvm::MCStreamer::emitSymbolValue(a2, *(const llvm::MCSymbol **)v2, 8, 0);
    (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, *(_QWORD *)(v2 + 8), 8);
    this = (*(uint64_t (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, *(_QWORD *)(v2 + 16), 8);
  }
  return this;
}

uint64_t llvm::StackMaps::emitConstantPoolEntries(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(result + 56);
  for (i = *(_QWORD *)(result + 64); v2 != i; v2 += 16)
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, *(_QWORD *)(v2 + 8), 8);
  return result;
}

uint64_t llvm::StackMaps::emitCallsiteEntries(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *i;
  int v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned int v11;

  v2 = *(_QWORD **)(result + 8);
  for (i = *(_QWORD **)(result + 16); v2 != i; v2 += 36)
  {
    if (*((_WORD *)v2 + 13) || *((_DWORD *)v2 + 58) >= 0x10000u)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 512))(a2, -1, 8);
      (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a2 + 504))(a2, *v2, 4, 0);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0, 2);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0, 2);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0, 2);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0, 2);
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0, 4);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, v2[1], 8);
      (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a2 + 504))(a2, *v2, 4, 0);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0, 2);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, *((unsigned int *)v2 + 6), 2);
      v5 = *((_DWORD *)v2 + 6);
      if (v5)
      {
        v6 = (unsigned int *)v2[2];
        v7 = &v6[6 * v5];
        do
        {
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, *v6, 1);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0, 1);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, v6[1], 2);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, v6[2], 2);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0, 2);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, *((_QWORD *)v6 + 2), 4);
          v6 += 6;
        }
        while (v6 != v7);
      }
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a2 + 632))(a2, 8, 0, 1, 0);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0, 2);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, *((unsigned int *)v2 + 58), 2);
      v8 = *((unsigned int *)v2 + 58);
      if ((_DWORD)v8)
      {
        v9 = 6 * v8;
        v10 = (unsigned __int16 *)(v2[28] + 4);
        do
        {
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, *(v10 - 1), 2);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0, 1);
          v11 = *v10;
          v10 += 3;
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, v11, 1);
          v9 -= 6;
        }
        while (v9);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a2 + 632))(a2, 8, 0, 1, 0);
    }
  }
  return result;
}

void llvm::StackMaps::serializeToStackMapSection(llvm::StackMaps *this)
{
  llvm::MCStreamer *v2;
  uint64_t v3;
  unint64_t Symbol;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  _QWORD *v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  __int16 v26;

  if (*((_QWORD *)this + 1) != *((_QWORD *)this + 2))
  {
    v2 = *(llvm::MCStreamer **)(*(_QWORD *)this + 272);
    v3 = *((_QWORD *)v2 + 1);
    (*(void (**)(llvm::MCStreamer *, _QWORD, _QWORD))(*(_QWORD *)v2 + 168))(v2, *(_QWORD *)(*(_QWORD *)(v3 + 168) + 432), 0);
    v25 = "__LLVM_StackMaps";
    v26 = 259;
    Symbol = llvm::MCContext::getOrCreateSymbol(v3, (uint64_t)&v25);
    (*(void (**)(llvm::MCStreamer *, unint64_t, _QWORD))(*(_QWORD *)v2 + 192))(v2, Symbol, 0);
    llvm::StackMaps::emitStackmapHeader(this, (uint64_t)v2);
    llvm::StackMaps::emitFunctionFrameRecords((uint64_t)this, v2);
    v5 = *((_QWORD *)this + 7);
    v6 = *((_QWORD *)this + 8);
    while (v5 != v6)
    {
      (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)v2 + 512))(v2, *(_QWORD *)(v5 + 8), 8);
      v5 += 16;
    }
    llvm::StackMaps::emitCallsiteEntries((uint64_t)this, (uint64_t)v2);
    (*(void (**)(llvm::MCStreamer *))(*(_QWORD *)v2 + 152))(v2);
    v7 = *((_QWORD *)this + 1);
    for (i = *((_QWORD *)this + 2); i != v7; i -= 288)
    {
      v9 = *(void **)(i - 64);
      if ((void *)(i - 48) != v9)
        free(v9);
      v10 = *(void **)(i - 272);
      if ((void *)(i - 256) != v10)
        free(v10);
    }
    *((_QWORD *)this + 2) = v7;
    v11 = (_QWORD *)((char *)this + 32);
    v12 = *((_DWORD *)this + 10);
    if (v12)
    {
      v13 = *((_DWORD *)this + 12);
      if (v13 > 4 * v12 && v13 >= 0x41)
      {
        v14 = 1 << (33 - __clz(v12 - 1));
        if (v14 <= 64)
          v15 = 64;
        else
          v15 = v14;
LABEL_21:
        if (v15 == v13)
        {
          *((_QWORD *)this + 5) = 0;
          v16 = 16 * v13;
          v17 = (_QWORD *)*((_QWORD *)this + 4);
          do
          {
            *v17 = -1;
            v17 += 2;
            v16 -= 16;
          }
          while (v16);
        }
        else
        {
          MEMORY[0x1CAA32FB4](*v11, 8);
          if (v15)
          {
            v20 = (4 * v15 / 3u + 1) | ((unint64_t)(4 * v15 / 3u + 1) >> 1);
            v21 = v20 | (v20 >> 2) | ((v20 | (v20 >> 2)) >> 4);
            LODWORD(v21) = (((v21 | (v21 >> 8)) >> 16) | v21 | (v21 >> 8)) + 1;
            *((_DWORD *)this + 12) = v21;
            v22 = operator new(16 * v21, (std::align_val_t)8uLL);
            *((_QWORD *)this + 4) = v22;
            *((_QWORD *)this + 5) = 0;
            v23 = *((unsigned int *)this + 12);
            if ((_DWORD)v23)
            {
              v24 = 16 * v23;
              do
              {
                *v22 = -1;
                v22 += 2;
                v24 -= 16;
              }
              while (v24);
            }
          }
          else
          {
            *v11 = 0;
            *((_QWORD *)this + 5) = 0;
            *((_DWORD *)this + 12) = 0;
          }
        }
        goto LABEL_29;
      }
    }
    else
    {
      if (!*((_DWORD *)this + 11))
      {
LABEL_29:
        *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
        return;
      }
      v13 = *((_DWORD *)this + 12);
      if (v13 > 0x40)
      {
        v15 = 0;
        goto LABEL_21;
      }
    }
    if (v13)
    {
      v18 = (_QWORD *)*v11;
      v19 = 16 * v13;
      do
      {
        *v18 = -1;
        v18 += 2;
        v19 -= 16;
      }
      while (v19);
    }
    *((_QWORD *)this + 5) = 0;
    goto LABEL_29;
  }
}

__n128 sub_1C529FCF0(uint64_t a1, char *__s, _DWORD **a3, _WORD *a4, __n128 *a5)
{
  size_t v10;
  _DWORD *v11;
  __n128 result;

  v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)__s, v10);
  v11 = *a3;
  *(_DWORD *)(a1 + 128) = **a3;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = *v11;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  result = *a5;
  *(__n128 *)(a1 + 32) = *a5;
  return result;
}

uint64_t sub_1C529FD80(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 6 * v8);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 6 * v9);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 6);
    }
    v9 = 0;
LABEL_14:
    v10 = *v7;
    if (v9 != v10)
      memcpy((void *)(*(_QWORD *)a1 + 6 * v9), (const void *)(*(_QWORD *)a2 + 6 * v9), *(_QWORD *)a2 + 6 * v10 - (*(_QWORD *)a2 + 6 * v9));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    *v7 = 0;
  }
  return a1;
}

uint64_t sub_1C529FEA8(uint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  __int16 v16;
  unsigned int v17;
  uint64_t v18;
  __int16 v19;
  __int16 v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  __int16 v41;
  __int16 v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  unsigned int v55;
  __int16 v56;
  unsigned int v57;
  unsigned int *v58;
  BOOL v60;
  uint64_t v61;
  unsigned __int16 *v62;
  unsigned __int16 *v63;
  unsigned int v64;
  unsigned __int16 v65;
  unsigned __int16 v66;
  uint64_t v67;
  uint64_t v68;
  _WORD *v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  __int16 *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  __int16 *v78;
  __int16 v79;
  __int16 v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  unsigned int v97;
  __int16 v98;
  __int16 v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v103;
  unsigned int v104;
  __int16 v105;
  __int16 v106;
  unsigned int *v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  __int16 v116;
  __int16 v117;
  __int16 v118;
  __int16 v119;
  __int16 v120;
  __int16 v121;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v8) >> 1);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*((unsigned __int16 *)a2 - 2) < *(unsigned __int16 *)(v8 + 2))
        {
          v119 = *(_WORD *)(v8 + 4);
          v113 = *(_DWORD *)v8;
          v47 = *(unsigned int *)((char *)a2 - 6);
          *(_WORD *)(v8 + 4) = *((_WORD *)a2 - 1);
          *(_DWORD *)v8 = v47;
          *((_WORD *)a2 - 1) = v119;
          *(unsigned int *)((char *)a2 - 6) = v113;
        }
        return result;
      case 3:
        return (uint64_t)sub_1C52A0760((unsigned int *)v8, (unsigned int *)(v8 + 6), (unsigned int *)((char *)a2 - 6));
      case 4:
        return (uint64_t)sub_1C52A0AC8(v8, v8 + 6, v8 + 12, (uint64_t)a2 - 6);
      case 5:
        v48 = (unsigned int *)(v8 + 6);
        v49 = (unsigned int *)(v8 + 12);
        v50 = (unsigned int *)(v8 + 18);
        result = (uint64_t)sub_1C52A0AC8(v8, v8 + 6, v8 + 12, v8 + 18);
        if (*((unsigned __int16 *)a2 - 2) < *(unsigned __int16 *)(v8 + 20))
        {
          v51 = *v50;
          v52 = *(_WORD *)(v8 + 22);
          v53 = *((_WORD *)a2 - 1);
          *v50 = *(unsigned int *)((char *)a2 - 6);
          *(_WORD *)(v8 + 22) = v53;
          *((_WORD *)a2 - 1) = v52;
          *(unsigned int *)((char *)a2 - 6) = v51;
          if (*(unsigned __int16 *)(v8 + 20) < *(unsigned __int16 *)(v8 + 14))
          {
            v54 = *(_WORD *)(v8 + 16);
            v55 = *v49;
            *v49 = *v50;
            *(_WORD *)(v8 + 16) = *(_WORD *)(v8 + 22);
            *v50 = v55;
            *(_WORD *)(v8 + 22) = v54;
            if (*(unsigned __int16 *)(v8 + 14) < *(unsigned __int16 *)(v8 + 8))
            {
              v56 = *(_WORD *)(v8 + 10);
              v57 = *v48;
              *v48 = *v49;
              *(_WORD *)(v8 + 10) = *(_WORD *)(v8 + 16);
              *v49 = v57;
              *(_WORD *)(v8 + 16) = v56;
              if (*(unsigned __int16 *)(v8 + 8) < *(unsigned __int16 *)(v8 + 2))
              {
                v120 = *(_WORD *)(v8 + 4);
                v114 = *(_DWORD *)v8;
                *(_DWORD *)v8 = *v48;
                *(_WORD *)(v8 + 4) = *(_WORD *)(v8 + 10);
                *v48 = v114;
                *(_WORD *)(v8 + 10) = v120;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 143)
        {
          v58 = (unsigned int *)(v8 + 6);
          v60 = (unsigned int *)v8 == a2 || v58 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v60)
            {
              v61 = 0;
              v62 = (unsigned __int16 *)v8;
              do
              {
                v63 = (unsigned __int16 *)v58;
                v64 = v62[4];
                if (v64 < v62[1])
                {
                  v65 = *v63;
                  v66 = v62[5];
                  v67 = v61;
                  while (1)
                  {
                    v68 = v8 + v67;
                    *(_DWORD *)(v68 + 6) = *(_DWORD *)(v8 + v67);
                    *(_WORD *)(v68 + 10) = *(_WORD *)(v8 + v67 + 4);
                    if (!v67)
                      break;
                    v67 -= 6;
                    if (v64 >= *(unsigned __int16 *)(v68 - 4))
                    {
                      v69 = (_WORD *)(v8 + v67 + 6);
                      goto LABEL_80;
                    }
                  }
                  v69 = (_WORD *)v8;
LABEL_80:
                  *v69 = v65;
                  v69[1] = v64;
                  v69[2] = v66;
                }
                v58 = (unsigned int *)(v63 + 3);
                v61 += 6;
                v62 = v63;
              }
              while (v63 + 3 != (unsigned __int16 *)a2);
            }
          }
          else if (!v60)
          {
            do
            {
              v103 = v58;
              v104 = *(unsigned __int16 *)(v7 + 8);
              if (v104 < *(unsigned __int16 *)(v7 + 2))
              {
                v105 = *(_WORD *)v58;
                v106 = *(_WORD *)(v7 + 10);
                v107 = v103;
                do
                {
                  v108 = v107;
                  v109 = *(unsigned int *)((char *)v107 - 6);
                  v107 = (unsigned int *)((char *)v107 - 6);
                  *v108 = v109;
                  *((_WORD *)v108 + 2) = *((_WORD *)v108 - 1);
                }
                while (v104 < *((unsigned __int16 *)v108 - 5));
                *(_WORD *)v107 = v105;
                *((_WORD *)v107 + 1) = v104;
                *((_WORD *)v107 + 2) = v106;
              }
              v58 = (unsigned int *)((char *)v103 + 6);
              v7 = (uint64_t)v103;
            }
            while ((unsigned int *)((char *)v103 + 6) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((unsigned int *)v8 != a2)
          {
            v70 = (unint64_t)(v10 - 2) >> 1;
            v71 = v70;
            do
            {
              v72 = v71;
              if (v70 >= v71)
              {
                v73 = (2 * v71) | 1;
                v74 = (__int16 *)(v8 + 6 * v73);
                if (2 * v72 + 2 < v10)
                {
                  v75 = *(unsigned __int16 *)(v8 + 6 * v73 + 2);
                  v76 = (unsigned __int16)v74[4];
                  v74 += 3 * (v75 < v76);
                  if (v75 < v76)
                    v73 = 2 * v72 + 2;
                }
                v77 = *(unsigned __int16 *)(v8 + 6 * v72 + 2);
                if ((unsigned __int16)v74[1] >= v77)
                {
                  v78 = (__int16 *)(v8 + 6 * v72);
                  v79 = *v78;
                  v80 = v78[2];
                  do
                  {
                    result = (uint64_t)v78;
                    v78 = v74;
                    v81 = *(_DWORD *)v74;
                    *(_WORD *)(result + 4) = v78[2];
                    *(_DWORD *)result = v81;
                    if (v70 < v73)
                      break;
                    result = (2 * v73) | 1;
                    v74 = (__int16 *)(v8 + 6 * result);
                    v82 = 2 * v73 + 2;
                    if (v82 < v10)
                    {
                      v83 = *(unsigned __int16 *)(v8 + 6 * result + 2);
                      v84 = (unsigned __int16)v74[4];
                      v74 += 3 * (v83 < v84);
                      if (v83 < v84)
                        result = v82;
                    }
                    v73 = result;
                  }
                  while ((unsigned __int16)v74[1] >= v77);
                  *v78 = v79;
                  v78[1] = v77;
                  v78[2] = v80;
                }
              }
              v71 = v72 - 1;
            }
            while (v72);
            do
            {
              v85 = 0;
              v121 = *(_WORD *)(v8 + 4);
              v115 = *(_DWORD *)v8;
              v86 = v8;
              do
              {
                v87 = v85 + 1;
                v88 = (unsigned int *)(v86 + 6 * (v85 + 1));
                v89 = (2 * v85) | 1;
                v90 = 2 * v85 + 2;
                if (v90 < v10)
                {
                  v91 = *(unsigned __int16 *)(v86 + 6 * v87 + 2);
                  v92 = *((unsigned __int16 *)v88 + 4);
                  v88 = (unsigned int *)((char *)v88 + 6 * (v91 < v92));
                  if (v91 < v92)
                    v89 = v90;
                }
                v93 = *v88;
                *(_WORD *)(v86 + 4) = *((_WORD *)v88 + 2);
                *(_DWORD *)v86 = v93;
                v86 = (unint64_t)v88;
                v85 = v89;
              }
              while (v89 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              a2 = (unsigned int *)((char *)a2 - 6);
              if (v88 == a2)
              {
                *((_WORD *)v88 + 2) = v121;
                *v88 = v115;
              }
              else
              {
                v94 = *a2;
                *((_WORD *)v88 + 2) = *((_WORD *)a2 + 2);
                *v88 = v94;
                *((_WORD *)a2 + 2) = v121;
                *a2 = v115;
                v95 = (uint64_t)v88 - v8 + 6;
                if (v95 >= 7)
                {
                  v96 = (v95 / 6uLL - 2) >> 1;
                  v97 = *((unsigned __int16 *)v88 + 1);
                  if (*(unsigned __int16 *)(v8 + 6 * v96 + 2) < v97)
                  {
                    v98 = *(_WORD *)v88;
                    v99 = *((_WORD *)v88 + 2);
                    do
                    {
                      v100 = v88;
                      v88 = (unsigned int *)(v8 + 6 * v96);
                      v101 = *v88;
                      result = *((unsigned __int16 *)v88 + 2);
                      *((_WORD *)v100 + 2) = result;
                      *v100 = v101;
                      if (!v96)
                        break;
                      v96 = (v96 - 1) >> 1;
                    }
                    while (*(unsigned __int16 *)(v8 + 6 * v96 + 2) < v97);
                    *(_WORD *)v88 = v98;
                    *((_WORD *)v88 + 1) = v97;
                    *((_WORD *)v88 + 2) = v99;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 6 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x301)
        {
          result = (uint64_t)sub_1C52A0760((unsigned int *)(v7 + 6 * v11), (unsigned int *)v7, (unsigned int *)((char *)a2 - 6));
        }
        else
        {
          sub_1C52A0760((unsigned int *)v7, (unsigned int *)(v7 + 6 * v11), (unsigned int *)((char *)a2 - 6));
          v13 = 3 * v11;
          v14 = (unsigned int *)(v7 + 6 * v11 - 6);
          sub_1C52A0760((unsigned int *)(v7 + 6), v14, a2 - 3);
          v15 = (unsigned int *)(v7 + 6 + 2 * v13);
          sub_1C52A0760((unsigned int *)(v7 + 12), v15, (unsigned int *)((char *)a2 - 18));
          result = (uint64_t)sub_1C52A0760(v14, (unsigned int *)v12, v15);
          v116 = *(_WORD *)(v7 + 4);
          v110 = *(_DWORD *)v7;
          v16 = *(_WORD *)(v12 + 4);
          *(_DWORD *)v7 = *(_DWORD *)v12;
          *(_WORD *)(v7 + 4) = v16;
          *(_WORD *)(v12 + 4) = v116;
          *(_DWORD *)v12 = v110;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = *(unsigned __int16 *)(v7 + 2);
          if (*(unsigned __int16 *)(v7 - 4) < v17)
            goto LABEL_12;
          if (v17 >= *((unsigned __int16 *)a2 - 2))
          {
            v36 = v7 + 6;
            do
            {
              v8 = v36;
              if (v36 >= (unint64_t)a2)
                break;
              v37 = *(unsigned __int16 *)(v36 + 2);
              v36 += 6;
            }
            while (v17 >= v37);
          }
          else
          {
            v34 = v7;
            do
            {
              v8 = v34 + 6;
              v35 = *(unsigned __int16 *)(v34 + 8);
              v34 += 6;
            }
            while (v17 >= v35);
          }
          v38 = a2;
          if (v8 < (unint64_t)a2)
          {
            v39 = a2;
            do
            {
              v38 = (unsigned int *)((char *)v39 - 6);
              v40 = *((unsigned __int16 *)v39 - 2);
              v39 = (unsigned int *)((char *)v39 - 6);
            }
            while (v17 < v40);
          }
          v41 = *(_WORD *)v7;
          v42 = *(_WORD *)(v7 + 4);
          while (v8 < (unint64_t)v38)
          {
            v118 = *(_WORD *)(v8 + 4);
            v112 = *(_DWORD *)v8;
            v43 = *v38;
            *(_WORD *)(v8 + 4) = *((_WORD *)v38 + 2);
            *(_DWORD *)v8 = v43;
            *((_WORD *)v38 + 2) = v118;
            *v38 = v112;
            do
            {
              v44 = *(unsigned __int16 *)(v8 + 8);
              v8 += 6;
            }
            while (v17 >= v44);
            do
            {
              v45 = *((unsigned __int16 *)v38 - 2);
              v38 = (unsigned int *)((char *)v38 - 6);
            }
            while (v17 < v45);
          }
          if (v8 - 6 != v7)
          {
            v46 = *(_DWORD *)(v8 - 6);
            *(_WORD *)(v7 + 4) = *(_WORD *)(v8 - 2);
            *(_DWORD *)v7 = v46;
          }
          a4 = 0;
          *(_WORD *)(v8 - 6) = v41;
          *(_WORD *)(v8 - 4) = v17;
          *(_WORD *)(v8 - 2) = v42;
          continue;
        }
        v17 = *(unsigned __int16 *)(v7 + 2);
LABEL_12:
        v18 = 0;
        v19 = *(_WORD *)v7;
        v20 = *(_WORD *)(v7 + 4);
        do
        {
          v21 = *(unsigned __int16 *)(v7 + v18 + 8);
          v18 += 6;
        }
        while (v21 < v17);
        v22 = v7 + v18;
        v23 = a2;
        if (v18 == 6)
        {
          v26 = a2;
          while (v22 < (unint64_t)v26)
          {
            v24 = (unsigned int *)((char *)v26 - 6);
            v27 = *((unsigned __int16 *)v26 - 2);
            v26 = (unsigned int *)((char *)v26 - 6);
            if (v27 < v17)
              goto LABEL_22;
          }
          v24 = v26;
        }
        else
        {
          do
          {
            v24 = (unsigned int *)((char *)v23 - 6);
            v25 = *((unsigned __int16 *)v23 - 2);
            v23 = (unsigned int *)((char *)v23 - 6);
          }
          while (v25 >= v17);
        }
LABEL_22:
        v8 = v22;
        if (v22 < (unint64_t)v24)
        {
          v28 = (unint64_t)v24;
          do
          {
            v117 = *(_WORD *)(v8 + 4);
            v111 = *(_DWORD *)v8;
            v29 = *(_DWORD *)v28;
            *(_WORD *)(v8 + 4) = *(_WORD *)(v28 + 4);
            *(_DWORD *)v8 = v29;
            *(_WORD *)(v28 + 4) = v117;
            *(_DWORD *)v28 = v111;
            do
            {
              v30 = *(unsigned __int16 *)(v8 + 8);
              v8 += 6;
            }
            while (v30 < v17);
            do
            {
              v31 = *(unsigned __int16 *)(v28 - 4);
              v28 -= 6;
            }
            while (v31 >= v17);
          }
          while (v8 < v28);
        }
        if (v8 - 6 != v7)
        {
          v32 = *(_DWORD *)(v8 - 6);
          *(_WORD *)(v7 + 4) = *(_WORD *)(v8 - 2);
          *(_DWORD *)v7 = v32;
        }
        *(_WORD *)(v8 - 6) = v19;
        *(_WORD *)(v8 - 4) = v17;
        *(_WORD *)(v8 - 2) = v20;
        if (v22 < (unint64_t)v24)
        {
LABEL_33:
          result = sub_1C529FEA8(v7, v8 - 6, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = sub_1C52A0850(v7, (_WORD *)(v8 - 6));
        result = sub_1C52A0850(v8, a2);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_33;
        }
        a2 = (unsigned int *)(v8 - 6);
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

unsigned int *sub_1C52A0760(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  __int16 v5;
  unsigned int v6;
  __int16 v7;
  __int16 v8;
  unsigned int v9;
  __int16 v10;
  __int16 v11;
  unsigned int v12;
  __int16 v13;
  __int16 v14;
  unsigned int v15;
  __int16 v16;
  __int16 v17;

  v3 = *((unsigned __int16 *)a2 + 1);
  v4 = *((unsigned __int16 *)a3 + 1);
  if (v3 >= *((unsigned __int16 *)result + 1))
  {
    if (v4 < v3)
    {
      v8 = *((_WORD *)a2 + 2);
      v9 = *a2;
      v10 = *((_WORD *)a3 + 2);
      *a2 = *a3;
      *((_WORD *)a2 + 2) = v10;
      *a3 = v9;
      *((_WORD *)a3 + 2) = v8;
      if (*((unsigned __int16 *)a2 + 1) < *((unsigned __int16 *)result + 1))
      {
        v11 = *((_WORD *)result + 2);
        v12 = *result;
        v13 = *((_WORD *)a2 + 2);
        *result = *a2;
        *((_WORD *)result + 2) = v13;
        *a2 = v12;
        *((_WORD *)a2 + 2) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v14 = *((_WORD *)result + 2);
      v15 = *result;
      v16 = *((_WORD *)a2 + 2);
      *result = *a2;
      *((_WORD *)result + 2) = v16;
      *a2 = v15;
      *((_WORD *)a2 + 2) = v14;
      if (*((unsigned __int16 *)a3 + 1) >= HIWORD(v15))
        return result;
      v5 = *((_WORD *)a2 + 2);
      v6 = *a2;
      v17 = *((_WORD *)a3 + 2);
      *a2 = *a3;
      *((_WORD *)a2 + 2) = v17;
    }
    else
    {
      v5 = *((_WORD *)result + 2);
      v6 = *result;
      v7 = *((_WORD *)a3 + 2);
      *result = *a3;
      *((_WORD *)result + 2) = v7;
    }
    *a3 = v6;
    *((_WORD *)a3 + 2) = v5;
  }
  return result;
}

BOOL sub_1C52A0850(uint64_t a1, _WORD *a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int16 v6;
  unsigned int v7;
  __int16 v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;
  __int16 v22;
  unsigned int v23;
  __int16 v24;
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  unsigned int v30;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if ((unsigned __int16)*(a2 - 2) < *(unsigned __int16 *)(a1 + 2))
      {
        v6 = *(_WORD *)(a1 + 4);
        v7 = *(_DWORD *)a1;
        v8 = *(a2 - 1);
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 3);
        *(_WORD *)(a1 + 4) = v8;
        *(_DWORD *)(a2 - 3) = v7;
        *(a2 - 1) = v6;
      }
      return result;
    case 3uLL:
      sub_1C52A0760((unsigned int *)a1, (unsigned int *)(a1 + 6), (unsigned int *)(a2 - 3));
      return 1;
    case 4uLL:
      sub_1C52A0AC8(a1, a1 + 6, a1 + 12, (uint64_t)(a2 - 3));
      return 1;
    case 5uLL:
      v19 = (unsigned int *)(a1 + 6);
      v20 = (unsigned int *)(a1 + 12);
      v21 = (unsigned int *)(a1 + 18);
      sub_1C52A0AC8(a1, a1 + 6, a1 + 12, a1 + 18);
      if ((unsigned __int16)*(a2 - 2) < *(unsigned __int16 *)(a1 + 20))
      {
        v22 = *(_WORD *)(a1 + 22);
        v23 = *v21;
        v24 = *(a2 - 1);
        *v21 = *(_DWORD *)(a2 - 3);
        *(_WORD *)(a1 + 22) = v24;
        *(_DWORD *)(a2 - 3) = v23;
        *(a2 - 1) = v22;
        if (*(unsigned __int16 *)(a1 + 20) < *(unsigned __int16 *)(a1 + 14))
        {
          v25 = *(_WORD *)(a1 + 16);
          v26 = *v20;
          *v20 = *v21;
          *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 22);
          *v21 = v26;
          *(_WORD *)(a1 + 22) = v25;
          if (*(unsigned __int16 *)(a1 + 14) < *(unsigned __int16 *)(a1 + 8))
          {
            v27 = *(_WORD *)(a1 + 10);
            v28 = *v19;
            *v19 = *v20;
            *(_WORD *)(a1 + 10) = *(_WORD *)(a1 + 16);
            *v20 = v28;
            *(_WORD *)(a1 + 16) = v27;
            if (*(unsigned __int16 *)(a1 + 8) < *(unsigned __int16 *)(a1 + 2))
            {
              v29 = *(_WORD *)(a1 + 4);
              v30 = *(_DWORD *)a1;
              *(_DWORD *)a1 = *v19;
              *(_WORD *)(a1 + 4) = *(_WORD *)(a1 + 10);
              *v19 = v30;
              *(_WORD *)(a1 + 10) = v29;
            }
          }
        }
      }
      return 1;
    default:
      v9 = (_WORD *)(a1 + 12);
      sub_1C52A0760((unsigned int *)a1, (unsigned int *)(a1 + 6), (unsigned int *)(a1 + 12));
      v10 = (_WORD *)(a1 + 18);
      if ((_WORD *)(a1 + 18) == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = (unsigned __int16)v10[1];
    if (v13 < (unsigned __int16)v9[1])
    {
      v14 = *v10;
      v15 = v10[2];
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        *(_DWORD *)(v17 + 18) = *(_DWORD *)(a1 + v16 + 12);
        *(_WORD *)(v17 + 22) = *(_WORD *)(a1 + v16 + 16);
        if (v16 == -12)
          break;
        v16 -= 6;
        if (v13 >= *(unsigned __int16 *)(v17 + 8))
        {
          v18 = (_WORD *)(a1 + v16 + 18);
          goto LABEL_13;
        }
      }
      v18 = (_WORD *)a1;
LABEL_13:
      *v18 = v14;
      v18[1] = v13;
      v18[2] = v15;
      if (++v12 == 8)
        return v10 + 3 == a2;
    }
    v9 = v10;
    v11 += 6;
    v10 += 3;
    if (v10 == a2)
      return 1;
  }
}

unsigned int *sub_1C52A0AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *result;
  __int16 v9;
  unsigned int v10;
  __int16 v11;
  __int16 v12;
  unsigned int v13;
  __int16 v14;
  __int16 v15;
  unsigned int v16;
  __int16 v17;

  result = sub_1C52A0760((unsigned int *)a1, (unsigned int *)a2, (unsigned int *)a3);
  if (*(unsigned __int16 *)(a4 + 2) < *(unsigned __int16 *)(a3 + 2))
  {
    v9 = *(_WORD *)(a3 + 4);
    v10 = *(_DWORD *)a3;
    v11 = *(_WORD *)(a4 + 4);
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_WORD *)(a3 + 4) = v11;
    *(_DWORD *)a4 = v10;
    *(_WORD *)(a4 + 4) = v9;
    if (*(unsigned __int16 *)(a3 + 2) < *(unsigned __int16 *)(a2 + 2))
    {
      v12 = *(_WORD *)(a2 + 4);
      v13 = *(_DWORD *)a2;
      v14 = *(_WORD *)(a3 + 4);
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_WORD *)(a2 + 4) = v14;
      *(_DWORD *)a3 = v13;
      *(_WORD *)(a3 + 4) = v12;
      if (*(unsigned __int16 *)(a2 + 2) < *(unsigned __int16 *)(a1 + 2))
      {
        v15 = *(_WORD *)(a1 + 4);
        v16 = *(_DWORD *)a1;
        v17 = *(_WORD *)(a2 + 4);
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_WORD *)(a1 + 4) = v17;
        *(_DWORD *)a2 = v16;
        *(_WORD *)(a2 + 4) = v15;
      }
    }
  }
  return result;
}

_QWORD *sub_1C52A0B94@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *result;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;

  v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
  {
    v14 = 0;
LABEL_5:
    result = sub_1C5191160(a1, (uint64_t)a2, a2, v14);
    *result = *a2;
    *((_DWORD *)result + 2) = *a3;
    v9 = *(_QWORD *)a1;
    v8 = *(_DWORD *)(a1 + 16);
    v13 = 1;
    goto LABEL_6;
  }
  v9 = *(_QWORD *)a1;
  v10 = (37 * *a2) & (v8 - 1);
  result = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
  v12 = *result;
  if (*a2 != *result)
  {
    v15 = 0;
    v16 = 1;
    while (v12 != -1)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v12 == -2;
      if (v17)
        v15 = result;
      v18 = v10 + v16++;
      v10 = v18 & (v8 - 1);
      result = (_QWORD *)(v9 + 16 * v10);
      v12 = *result;
      if (*a2 == *result)
        goto LABEL_3;
    }
    if (v15)
      v14 = v15;
    else
      v14 = result;
    goto LABEL_5;
  }
LABEL_3:
  v13 = 0;
LABEL_6:
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v9 + 16 * v8;
  *(_BYTE *)(a4 + 16) = v13;
  return result;
}

_QWORD *sub_1C52A0C84(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  *a1 = a2;
  a1[1] = a3;
  a1[2] = a1 + 4;
  v7 = (uint64_t)(a1 + 2);
  a1[3] = 0x800000000;
  if (*(_DWORD *)(a4 + 8))
    sub_1C476393C(v7, a4);
  a1[28] = a1 + 30;
  a1[29] = 0x800000000;
  if (*(_DWORD *)(a5 + 8))
    sub_1C529FD80((uint64_t)(a1 + 28), a5);
  return a1;
}

uint64_t sub_1C52A0CF8(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v6 = *a1;
    v7 = v3 - 1;
    v8 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v4 = (_QWORD *)(*a1 + 16 * v8);
    v9 = *v4;
    if (*a2 == *v4)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -8192;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_QWORD *)(v6 + 16 * (v13 & v7));
        v9 = *v4;
        if (*a2 == *v4)
          goto LABEL_3;
      }
      result = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v4;
  return result;
}

_QWORD *sub_1C52A0D94(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62143A4(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C52A0E4C()
{
  __n128 v1;
  int v2;
  int v3;
  int *v4;

  v4 = &v3;
  v2 = 1;
  v3 = 3;
  v1.n128_u64[0] = (unint64_t)"Specify the stackmap encoding version (default = 3)";
  v1.n128_u64[1] = 51;
  sub_1C62141BC((llvm::cl::Option *)&unk_1ED7FFF58, "stackmap-version", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED7FFF58, &dword_1C475E000);
}

llvm::StackProtector *llvm::StackProtector::StackProtector(llvm::StackProtector *this)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::StackProtector::ID;
  *((_DWORD *)this + 6) = 2;
  *(_QWORD *)this = &off_1E814AE20;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_DWORD *)this + 36) = 8;
  *((_QWORD *)this + 19) = (char *)this + 184;
  *((_QWORD *)this + 20) = (char *)this + 184;
  *((_QWORD *)this + 21) = 16;
  *((_DWORD *)this + 44) = 0;
  *((_WORD *)this + 156) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED8300F8);
  if (v3 != -1)
  {
    v7[0] = sub_1C52A0FD0;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED8300F8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

uint64_t sub_1C52A0FD0(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetPassConfigPass(a1);
  llvm::initializeDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Insert stack protectors";
  *(_QWORD *)(v2 + 8) = 23;
  *(_QWORD *)(v2 + 16) = "stack-protector";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &llvm::StackProtector::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::StackProtector>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::StackProtector::runOnFunction(llvm::StackProtector *this, llvm::Function *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AnalysisPass;
  uint64_t v7;
  void **v8;
  void *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned __int8 v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  int i;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  BOOL v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  const llvm::Value *v40;
  int v41;
  llvm::Value **v42;
  int v44;
  unint64_t v45;
  int v46;

  v4 = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 12) = a2;
  *((_QWORD *)this + 13) = v4;
  v5 = *((_QWORD *)this + 1);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(v5 + 24), &llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    AnalysisPass = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::DominatorTreeWrapperPass::ID);
    v5 = *((_QWORD *)this + 1);
  }
  v7 = AnalysisPass + 32;
  if (!AnalysisPass)
    v7 = 0;
  *((_QWORD *)this + 14) = v7;
  v8 = *(void ***)v5;
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::TargetPassConfig::ID);
  v10 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::TargetPassConfig::ID)+ 112);
  *((_QWORD *)this + 4) = v10;
  std::string::operator=((std::string *)this + 2, (const std::string *)(v10 + 448));
  v11 = *(_OWORD *)(v10 + 472);
  *((_QWORD *)this + 11) = *(_QWORD *)(v10 + 488);
  *(_OWORD *)((char *)this + 72) = v11;
  v12 = (*(uint64_t (**)(_QWORD, llvm::Function *))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), a2);
  *((_QWORD *)this + 5) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 120))(v12);
  *((_WORD *)this + 156) = 0;
  v13 = *((_QWORD *)a2 + 14);
  if (!v13)
    goto LABEL_48;
  if (!*(_DWORD *)(v13 + 8))
    goto LABEL_48;
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
    goto LABEL_48;
  v15 = *(_DWORD *)(v14 + 40);
  if (!v15)
    goto LABEL_48;
  v16 = *(_QWORD *)(v14 + 24);
  v17 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v18 = &unk_1ED7EA000;
  if ((v17 & 1) == 0)
  {
    v46 = v15;
    v44 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v18 = &unk_1ED7EA000;
    v15 = v46;
    if (v44)
    {
      v45 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v45 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v45;
      __cxa_guard_release(&qword_1ED7EAC88);
      v18 = (_QWORD *)&unk_1ED7EA000;
      v15 = v46;
    }
  }
  v19 = v18[400];
  v20 = __ROR8__(v19 ^ 0xB34481606306CA7ALL, 30);
  v21 = 0x9DDFEA08EB382D69
      * ((v19 - 0x3DB671C564579177) ^ ((0x9DDFEA08EB382D69
                                        * ((v20 - 0x67A3B8BE64EA70E9) ^ (v19 - 0x3DB671C564579177))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v20 - 0x67A3B8BE64EA70E9) ^ (v19 - 0x3DB671C564579177))));
  v22 = -348639895 * ((v21 >> 47) ^ v21);
  v23 = v15 - 1;
  for (i = 1; ; ++i)
  {
    v25 = v22 & v23;
    v26 = v16 + 24 * v25;
    v27 = *(_QWORD **)v26;
    if (*(_QWORD *)v26 == -1)
    {
      if ("stack-protector-buffer-size" == (char *)-1)
        goto LABEL_32;
      goto LABEL_15;
    }
    if (v27 != (_QWORD *)-2)
      break;
    if ("stack-protector-buffer-size" == (char *)-2)
      goto LABEL_32;
LABEL_15:
    if (v27 == (_QWORD *)-1)
      goto LABEL_48;
    v22 = i + v25;
  }
  if (*(_QWORD *)(v26 + 8) != 27)
    goto LABEL_15;
  v28 = *v27 == 0x72702D6B63617473 && v27[1] == 0x2D726F746365746FLL;
  v29 = v28 && v27[2] == 0x732D726566667562;
  if (!v29 || *(_QWORD *)((char *)v27 + 19) != 0x657A69732D726566)
    goto LABEL_15;
LABEL_32:
  v31 = *(_QWORD *)(v26 + 16);
  if (v31 && *(_BYTE *)(v31 + 8) == 2)
  {
    v32 = *(unsigned int *)(v31 + 16);
    if ((_DWORD)v32)
    {
      v33 = 0;
      v34 = (unsigned __int8 *)(*(unsigned int *)(v31 + 12) + v31 + 25);
      while (1)
      {
        v36 = *v34++;
        v35 = v36;
        if ((v36 - 48) >= 0xA)
        {
          if ((v35 - 97) >= 0x1A)
          {
            if ((v35 - 65) > 0x19)
              return 0;
            v37 = -55;
          }
          else
          {
            v37 = -87;
          }
        }
        else
        {
          v37 = -48;
        }
        v38 = v37 + v35;
        if (v38 > 9)
          break;
        v39 = 10 * v33 + v38;
        if (v33 > v39 / 0xA)
          break;
        v33 = v39;
        if (!--v32)
        {
          if (HIDWORD(v39))
            return 0;
          *((_DWORD *)this + 36) = v39;
          goto LABEL_48;
        }
      }
    }
    return 0;
  }
LABEL_48:
  if (!llvm::StackProtector::RequiresStackProtector(this))
    return 0;
  if ((*((_WORD *)a2 + 9) & 8) != 0)
  {
    v41 = *((_DWORD *)a2 + 5);
    v42 = (v41 & 0x40000000) != 0
        ? (llvm::Value **)*((_QWORD *)a2 - 1)
        : (llvm::Value **)((char *)a2 - 32 * (v41 & 0x7FFFFFF));
    if (llvm::classifyEHPersonality(*v42, v40) - 7 < 4)
      return 0;
  }
  return llvm::StackProtector::InsertStackProtectors(this);
}

uint64_t llvm::StackProtector::RequiresStackProtector(llvm::StackProtector *this)
{
  const llvm::Function *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  void **v15;
  char v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  int v23;
  llvm::Type **v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  _QWORD **v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  BOOL v36;
  char v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  void **v47;
  char *v48;
  unint64_t v49;
  void **v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  void **v61;
  char *v62;
  unint64_t v63;
  void **v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v68;
  char *v69;
  int v70;
  uint64_t v71;
  BOOL v72;
  _QWORD v73[2];
  uint64_t *v74;
  void *v75[2];
  char v76;
  void *__p;
  char v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  _QWORD v82[9];
  char *v83;
  unsigned int v84;
  _BYTE v85[272];
  uint64_t (**v86)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v87;
  char v88;
  uint64_t v89;
  __int128 v90;
  const char *v91;
  const char *v92;
  uint64_t v93;
  char v94;
  char v95;
  char *v96;
  uint64_t v97;
  _BYTE v98[256];
  char v99;
  int v100;
  uint64_t v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v2 = (const llvm::Function *)*((_QWORD *)this + 12);
  v3 = *((_QWORD *)v2 + 14);
  if (v3 && (*(_BYTE *)(v3 + 18) & 2) != 0)
  {
    v16 = 0;
  }
  else
  {
    llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v73, v2);
    v4 = *((_QWORD *)this + 12);
    v5 = *(_QWORD *)(v4 + 112);
    if (!v5)
    {
      LOBYTE(v70) = 0;
      goto LABEL_137;
    }
    v6 = *(unsigned __int8 *)(v5 + 19);
    if ((v6 & 8) != 0)
    {
      v7 = ***(_QWORD ***)v73[0];
      if (*(_QWORD *)(v7 + 128)
        || (v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 72) + 48))(*(_QWORD *)(v7 + 72)),
            v4 = *((_QWORD *)this + 12),
            v8))
      {
        llvm::OptimizationRemark::OptimizationRemark((uint64_t)&v86, (uint64_t)"stack-protector", (uint64_t)"StackProtectorRequested", 23, v4);
        v81 = "Stack protection applied to function ";
        v82[0] = 37;
        sub_1C53B17B4((uint64_t)&v96, (const void **)&v81);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v75, "Function", 8uLL, *((_BYTE **)this + 12));
        v9 = sub_1C47E3888((uint64_t)&v86, (uint64_t)v75);
        v81 = " due to a function attribute or command-line switch";
        v82[0] = 51;
        sub_1C53B17B4(v9 + 80, (const void **)&v81);
        sub_1C61998EC((uint64_t)&v81, v9);
        v81 = (const char *)&off_1E814E500;
        if (v78 < 0)
          operator delete(__p);
        if (v76 < 0)
          operator delete(v75[0]);
        v86 = &off_1E814E790;
        v10 = v96;
        if ((_DWORD)v97)
        {
          v11 = (unint64_t)v97 << 6;
          do
          {
            v12 = (void **)&v10[v11];
            if (v10[v11 - 17] < 0)
              operator delete(*(v12 - 5));
            if (*((char *)v12 - 41) < 0)
              operator delete(*(v12 - 8));
            v11 -= 64;
          }
          while (v11);
          v10 = v96;
        }
        if (v10 != v98)
          free(v10);
        llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v73, (llvm::DiagnosticInfoOptimizationBase *)&v81);
        v81 = (const char *)&off_1E814E790;
        v13 = v83;
        if (v84)
        {
          v14 = (unint64_t)v84 << 6;
          do
          {
            v15 = (void **)&v13[v14];
            if (v13[v14 - 17] < 0)
              operator delete(*(v15 - 5));
            if (*((char *)v15 - 41) < 0)
              operator delete(*(v15 - 8));
            v14 -= 64;
          }
          while (v14);
          v13 = v83;
        }
        if (v13 != v85)
          free(v13);
        v4 = *((_QWORD *)this + 12);
      }
      goto LABEL_37;
    }
    if ((v6 & 0x10) != 0)
    {
LABEL_37:
      v17 = 1;
      goto LABEL_38;
    }
    v17 = 0;
    LOBYTE(v70) = 0;
    if ((v6 & 4) != 0)
    {
LABEL_38:
      v70 = (v6 >> 3) & 1;
      v18 = *(_QWORD *)(v4 + 80);
      v68 = v4 + 72;
      if (v18 == v4 + 72)
        goto LABEL_137;
      v69 = (char *)this + 120;
      do
      {
        v19 = v18 - 24;
        v71 = v18;
        if (!v18)
          v19 = 0;
        v20 = v19 + 40;
        for (i = *(_QWORD *)(v19 + 48); i != v20; i = *(_QWORD *)(i + 8))
        {
          if (i)
            v22 = i - 24;
          else
            v22 = 0;
          v23 = *(unsigned __int8 *)(v22 + 16);
          if (v23 == 59)
            v24 = (llvm::Type **)v22;
          else
            v24 = 0;
          if (i && v23 == 59)
          {
            if (llvm::AllocaInst::isArrayAllocation((llvm::AllocaInst *)v24))
            {
              v25 = (uint64_t)*(v24 - 4);
              if (v25)
                v26 = *(_BYTE *)(v25 + 16) == 16;
              else
                v26 = 0;
              if (!v26)
              {
                v81 = (const char *)v24;
                v82[0] = 1;
                sub_1C62148A8((uint64_t)&v86, (uint64_t)v69, &v81, v82);
                sub_1C52A2B90((llvm::OptimizationRemarkEmitter *)v73, v22, (uint64_t)this);
                LOBYTE(v70) = 1;
                continue;
              }
              v27 = *((unsigned int *)this + 36);
              v28 = (_QWORD **)(v25 + 24);
              v29 = *(_DWORD *)(v25 + 32);
              if (v29 >= 0x41)
              {
                if (v29 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v25 + 24)) > 0x40)
                  goto LABEL_70;
                v30 = (_QWORD *)**v28;
              }
              else
              {
                v30 = *v28;
              }
              if ((unint64_t)v30 >= v27)
              {
LABEL_70:
                v81 = (const char *)v24;
                v82[0] = 1;
                LOBYTE(v70) = 1;
                sub_1C62148A8((uint64_t)&v86, (uint64_t)v69, &v81, v82);
                sub_1C52A2B90((llvm::OptimizationRemarkEmitter *)v73, v22, (uint64_t)this);
                continue;
              }
              if (!v17)
                continue;
              v81 = (const char *)v24;
              v82[0] = 2;
              sub_1C62148A8((uint64_t)&v86, (uint64_t)v69, &v81, v82);
              sub_1C52A2B90((llvm::OptimizationRemarkEmitter *)v73, v22, (uint64_t)this);
              goto LABEL_103;
            }
            v72 = 0;
            if (llvm::StackProtector::ContainsProtectableArray(this, v24[8], &v72, v17, 0))
            {
              v40 = 1;
              if (!v72)
                v40 = 2;
              v81 = (const char *)v24;
              v82[0] = v40;
              sub_1C62148A8((uint64_t)&v86, (uint64_t)v69, &v81, v82);
              v41 = ***(_QWORD ***)v73[0];
              if (*(_QWORD *)(v41 + 128)
                || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v41 + 72) + 48))(*(_QWORD *)(v41 + 72)))
              {
                v42 = *(_QWORD *)(*(_QWORD *)(v22 + 40) + 56);
                llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v75, (const llvm::DebugLoc *)(v22 + 48));
                v43 = *(_QWORD *)(v22 + 40);
                v87 = 9;
                v88 = 2;
                v89 = v42;
                v90 = *(_OWORD *)v75;
                v91 = "stack-protector";
                v92 = "StackProtectorBuffer";
                v93 = 20;
                v94 = 0;
                v95 = 0;
                v96 = v98;
                v97 = 0x400000000;
                v99 = 0;
                v100 = -1;
                v101 = v43;
                v86 = &off_1E814E500;
                v75[0] = "Stack protection applied to function ";
                v75[1] = (void *)37;
                sub_1C53B17B4((uint64_t)&v96, (const void **)v75);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v75, "Function", 8uLL, *((_BYTE **)this + 12));
                v44 = sub_1C47E3888((uint64_t)&v86, (uint64_t)v75);
                v79 = " due to a stack allocated buffer or struct containing a buffer";
                v80 = 62;
                sub_1C53B17B4(v44 + 80, (const void **)&v79);
                sub_1C61998EC((uint64_t)&v81, v44);
                v81 = (const char *)&off_1E814E500;
                if (v78 < 0)
                  operator delete(__p);
                if (v76 < 0)
                  operator delete(v75[0]);
                v86 = &off_1E814E790;
                v45 = v96;
                if ((_DWORD)v97)
                {
                  v46 = (unint64_t)v97 << 6;
                  do
                  {
                    v47 = (void **)&v45[v46];
                    if (v45[v46 - 17] < 0)
                      operator delete(*(v47 - 5));
                    if (*((char *)v47 - 41) < 0)
                      operator delete(*(v47 - 8));
                    v46 -= 64;
                  }
                  while (v46);
                  v45 = v96;
                }
                if (v45 != v98)
                  free(v45);
                llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v73, (llvm::DiagnosticInfoOptimizationBase *)&v81);
                v81 = (const char *)&off_1E814E790;
                v48 = v83;
                if (v84)
                {
                  v49 = (unint64_t)v84 << 6;
                  do
                  {
                    v50 = (void **)&v48[v49];
                    if (v48[v49 - 17] < 0)
                      operator delete(*(v50 - 5));
                    if (*((char *)v50 - 41) < 0)
                      operator delete(*(v50 - 8));
                    v49 -= 64;
                  }
                  while (v49);
                  v48 = v83;
                }
                if (v48 != v85)
                  free(v48);
              }
LABEL_103:
              LOBYTE(v70) = 1;
              continue;
            }
            if (v17)
            {
              v31 = *((_QWORD *)this + 13) + 272;
              v32 = (uint64_t)v24[8];
              sub_1C4768AD0(v31, v32);
              v34 = (unint64_t)(v33 + 7) >> 3;
              v36 = v35 == 1;
              llvm::DataLayout::getAlignment(v31, v32);
              if (llvm::StackProtector::HasAddressTaken((uint64_t)this, (uint64_t)v24, ((1 << v37) + v34 - 1) & -(1 << v37), v36))
              {
                v81 = (const char *)v24;
                v82[0] = 3;
                sub_1C62148A8((uint64_t)&v86, (uint64_t)v69, &v81, v82);
                v51 = ***(_QWORD ***)v73[0];
                if (*(_QWORD *)(v51 + 128)
                  || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v51 + 72) + 48))(*(_QWORD *)(v51 + 72)))
                {
                  v56 = *(_QWORD *)(*(_QWORD *)(v22 + 40) + 56);
                  llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v75, (const llvm::DebugLoc *)(v22 + 48));
                  v57 = *(_QWORD *)(v22 + 40);
                  v87 = 9;
                  v88 = 2;
                  v89 = v56;
                  v90 = *(_OWORD *)v75;
                  v91 = "stack-protector";
                  v92 = "StackProtectorAddressTaken";
                  v93 = 26;
                  v94 = 0;
                  v95 = 0;
                  v96 = v98;
                  v97 = 0x400000000;
                  v99 = 0;
                  v100 = -1;
                  v101 = v57;
                  v86 = &off_1E814E500;
                  v75[0] = "Stack protection applied to function ";
                  v75[1] = (void *)37;
                  sub_1C53B17B4((uint64_t)&v96, (const void **)v75);
                  llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v75, "Function", 8uLL, *((_BYTE **)this + 12));
                  v58 = sub_1C47E3888((uint64_t)&v86, (uint64_t)v75);
                  v79 = " due to the address of a local variable being taken";
                  v80 = 51;
                  sub_1C53B17B4(v58 + 80, (const void **)&v79);
                  sub_1C61998EC((uint64_t)&v81, v58);
                  v81 = (const char *)&off_1E814E500;
                  if (v78 < 0)
                    operator delete(__p);
                  if (v76 < 0)
                    operator delete(v75[0]);
                  v86 = &off_1E814E790;
                  v59 = v96;
                  if ((_DWORD)v97)
                  {
                    v60 = (unint64_t)v97 << 6;
                    do
                    {
                      v61 = (void **)&v59[v60];
                      if (v59[v60 - 17] < 0)
                        operator delete(*(v61 - 5));
                      if (*((char *)v61 - 41) < 0)
                        operator delete(*(v61 - 8));
                      v60 -= 64;
                    }
                    while (v60);
                    v59 = v96;
                  }
                  if (v59 != v98)
                    free(v59);
                  llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v73, (llvm::DiagnosticInfoOptimizationBase *)&v81);
                  v81 = (const char *)&off_1E814E790;
                  v62 = v83;
                  if (v84)
                  {
                    v63 = (unint64_t)v84 << 6;
                    do
                    {
                      v64 = (void **)&v62[v63];
                      if (v62[v63 - 17] < 0)
                        operator delete(*(v64 - 5));
                      if (*((char *)v64 - 41) < 0)
                        operator delete(*(v64 - 8));
                      v63 -= 64;
                    }
                    while (v63);
                    v62 = v83;
                  }
                  if (v62 != v85)
                    free(v62);
                }
                LOBYTE(v70) = 1;
              }
            }
            v38 = (void *)*((_QWORD *)this + 20);
            if (v38 == *((void **)this + 19))
              goto LABEL_64;
            v39 = *((unsigned int *)this + 42);
            if (v39 < 0x21 || 4 * (*((_DWORD *)this + 43) - *((_DWORD *)this + 44)) >= v39)
            {
              memset(v38, 255, 8 * v39);
LABEL_64:
              *((_DWORD *)this + 43) = 0;
              *((_DWORD *)this + 44) = 0;
              continue;
            }
            free(v38);
            v52 = *((_DWORD *)this + 43) - *((_DWORD *)this + 44);
            v53 = 1 << (33 - __clz(v52 - 1));
            *((_DWORD *)this + 43) = 0;
            *((_DWORD *)this + 44) = 0;
            if (v52 <= 0x10)
              v54 = 32;
            else
              v54 = v53;
            *((_DWORD *)this + 42) = v54;
            v55 = malloc_type_malloc(8 * v54, 0x4065EBACuLL);
            if (!v55)
              llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
            *((_QWORD *)this + 20) = v55;
            memset(v55, 255, 8 * *((unsigned int *)this + 42));
          }
        }
        v18 = *(_QWORD *)(v71 + 8);
      }
      while (v18 != v68);
    }
LABEL_137:
    v65 = v74;
    v74 = 0;
    if (v65)
    {
      v66 = *v65;
      *v65 = 0;
      if (v66)
        (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
      MEMORY[0x1CAA32FC0](v65, 0x20C4093837F09);
    }
    v16 = v70;
  }
  return v16 & 1;
}

uint64_t llvm::StackProtector::InsertStackProtectors(llvm::StackProtector *this)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v16;
  llvm::Module *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::PointerType *v23;
  uint64_t *v24;
  uint64_t Declaration;
  uint64_t **v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  uint64_t v34;
  uint64_t *PrevNonDebugInstruction;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  char *v42;
  char *v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t **v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unsigned __int8 **v51;
  int v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 **v55;
  unsigned __int8 *v56;
  uint64_t FailBB;
  uint64_t *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t ***v61;
  uint64_t ***v62;
  uint64_t **v63;
  uint64_t **v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char *v69;
  char *v70;
  llvm::Value *v71;
  _QWORD *v72;
  uint64_t v73;
  llvm::Value *v74;
  unsigned int v75;
  unsigned int v76;
  llvm::MDNode *BranchWeights;
  char *v78;
  char *v79;
  unsigned __int8 **v80;
  int v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  unsigned __int8 **v84;
  unsigned __int8 *v85;
  char *v87;
  unsigned __int8 **v88;
  unsigned __int8 **v89;
  unsigned __int8 **v90;
  uint64_t v91;
  char *v92;
  unsigned __int8 **v93;
  unsigned __int8 **v94;
  unsigned __int8 **v95;
  llvm::BasicBlock *v96;
  unsigned __int8 *v97;
  uint64_t *v98[4];
  __int16 v99;
  void *v100;
  uint64_t v101;
  _WORD v102[16];
  uint64_t *v103;
  _QWORD **v104;
  uint64_t v105;
  void **v106;
  void **v107;
  uint64_t v108;
  int v109;
  __int16 v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  void *v115;
  _QWORD v116[4];
  __int16 v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 784))(*((_QWORD *)this + 5)) & 1) != 0)
  {
    v2 = 1;
  }
  else if (byte_1ED800098)
  {
    v2 = (*(_WORD *)(*((_QWORD *)this + 4) + 1020) & 0x800) == 0;
  }
  else
  {
    v2 = 0;
  }
  v3 = *((_QWORD *)this + 12);
  v4 = v3 + 72;
  v5 = *(_QWORD *)(v3 + 80);
  if (v5 != v3 + 72)
  {
    v6 = 0;
    while (1)
    {
      v7 = v5 - 24;
      v8 = v5 == 0;
      v5 = *(_QWORD *)(v5 + 8);
      v9 = v8 ? 0 : (uint64_t *)v7;
      v11 = v9 + 5;
      v10 = (uint64_t *)v9[5];
      if (v10 != v9 + 5)
      {
        v12 = v10 ? (uint64_t)(v10 - 3) : 0;
        v13 = *(unsigned __int8 *)(v12 + 16) - 40;
        v14 = v13 >= 0xFFFFFFF5 ? (uint64_t *)v12 : 0;
        if (v10)
        {
          if (*((_BYTE *)v14 + 16) == 29 && v13 >= 0xFFFFFFF5)
            break;
        }
      }
LABEL_75:
      if (v5 == v4)
        return *((unsigned __int8 *)this + 312);
    }
    if (*((_BYTE *)this + 312))
    {
      if (v2)
        return *((unsigned __int8 *)this + 312);
    }
    else
    {
      *((_BYTE *)this + 312) = 1;
      v16 = *((_QWORD *)this + 12);
      v17 = (llvm::Module *)*((_QWORD *)this + 13);
      v18 = *((_QWORD *)this + 5);
      LOBYTE(v97) = 0;
      v19 = *(_QWORD *)(v16 + 80);
      if (v19)
        v20 = v19 - 24;
      else
        v20 = 0;
      v21 = *(_QWORD *)(v20 + 48);
      if (v21)
        v22 = v21 - 24;
      else
        v22 = 0;
      sub_1C4773D54((uint64_t)&v100, v22, 0, 0, 0);
      v23 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)*v14 + 1912), 0);
      v116[0] = "StackGuardSlot";
      v117 = 259;
      v6 = (uint64_t *)sub_1C486A5CC((uint64_t *)&v100, v23, 0, (uint64_t)v116);
      v24 = (uint64_t *)sub_1C52A2E14(v18, v17, (uint64_t)&v100, &v97);
      Declaration = llvm::Intrinsic::getDeclaration((uint64_t *)v17, 286, 0, 0);
      if (Declaration)
        v26 = *(uint64_t ***)(Declaration + 24);
      else
        v26 = 0;
      v98[0] = v24;
      v98[1] = v6;
      v117 = 257;
      sub_1C4774778((uint64_t *)&v100, v26, Declaration, (uint64_t *)v98, 2, (uint64_t)v116, 0);
      v27 = v97;
      if (v100 != v102)
        free(v100);
      if (v2 && v27 != 0)
        return *((unsigned __int8 *)this + 312);
    }
    if (!v6)
    {
      v28 = (uint64_t *)(*((_QWORD *)this + 12) + 80);
LABEL_41:
      v29 = *v28;
      v30 = v29 - 24;
      if (!v29)
        v30 = 0;
      v31 = v30 + 40;
      for (i = *(_QWORD *)(v30 + 48); ; i = *(_QWORD *)(i + 8))
      {
        if (i == v31)
        {
          v28 = (uint64_t *)(v29 + 8);
          goto LABEL_41;
        }
        v33 = i ? i - 24 : 0;
        if (*(_BYTE *)(v33 + 16) == 84)
        {
          v34 = *(_QWORD *)(v33 - 32);
          if (v34)
          {
            if (!*(_BYTE *)(v34 + 16)
              && *(_QWORD *)(v34 + 24) == *(_QWORD *)(v33 + 72)
              && (*(_BYTE *)(v34 + 33) & 0x20) != 0
              && *(_DWORD *)(*(_QWORD *)(i - 56) + 36) == 286)
            {
              break;
            }
          }
        }
      }
      v6 = *(uint64_t **)(i - 24 - 32 * (*(_DWORD *)(i - 4) & 0x7FFFFFF) + 32);
    }
    *((_BYTE *)this + 313) = 1;
    PrevNonDebugInstruction = llvm::Instruction::getPrevNonDebugInstruction((llvm::Instruction *)v14, 0);
    if (PrevNonDebugInstruction)
    {
      if (*((_BYTE *)PrevNonDebugInstruction + 16) == 84 && (*((_WORD *)PrevNonDebugInstruction + 9) & 3) == 2)
      {
        v14 = PrevNonDebugInstruction;
      }
      else
      {
        v36 = llvm::Instruction::getPrevNonDebugInstruction((llvm::Instruction *)PrevNonDebugInstruction, 0);
        if (v36 && *((_BYTE *)v36 + 16) == 84 && (*((_WORD *)v36 + 9) & 3) == 2)
          v14 = v36;
      }
    }
    v37 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 5) + 792))(*((_QWORD *)this + 5), *((_QWORD *)this + 13));
    if (v37)
    {
      v38 = v37;
      sub_1C4773D54((uint64_t)&v100, (uint64_t)v14, 0, 0, 0);
      v39 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v105 + 1912), 0);
      v98[0] = (uint64_t *)"Guard";
      v99 = 259;
      llvm::DataLayout::getAlignment(*(_QWORD *)(v103[7] + 40) + 272, v39);
      v41 = v40;
      v42 = (char *)operator new(0x60uLL);
      v43 = v42;
      v44 = (uint64_t *)(v42 + 32);
      *((_QWORD *)v42 + 2) = 0;
      *((_QWORD *)v42 + 3) = v42 + 32;
      v117 = 257;
      *((_QWORD *)v42 + 4) = v39;
      *((_QWORD *)v42 + 5) = 0;
      *((_WORD *)v42 + 24) = 60;
      *((_DWORD *)v42 + 13) = 1;
      *(_OWORD *)(v42 + 56) = 0u;
      *(_OWORD *)(v42 + 72) = 0u;
      *((_DWORD *)v42 + 22) = 0;
      *(_QWORD *)v42 = v6;
      *((_QWORD *)v42 + 1) = 0;
      if (v6)
      {
        v45 = v6 + 1;
        v46 = v6[1];
        *((_QWORD *)v42 + 1) = v46;
        if (v46)
          *(_QWORD *)(v46 + 16) = v42 + 8;
        *((_QWORD *)v42 + 2) = v45;
        *v45 = v42;
      }
      *((_WORD *)v42 + 25) = (2 * (v41 & 0x3F)) | 1;
      v42[92] = 1;
      llvm::Value::setName((uint64_t ***)v42 + 4, (uint64_t)v116);
      (*((void (**)(void **, uint64_t *, uint64_t **, uint64_t *, _QWORD **))*v107 + 2))(v107, v44, v98, v103, v104);
      if (!(_DWORD)v101)
      {
LABEL_71:
        v47 = *(uint64_t ***)(v38 + 24);
        v98[0] = v44;
        v117 = 257;
        v48 = sub_1C4774778((uint64_t *)&v100, v47, v38, (uint64_t *)v98, 1, (uint64_t)v116, 0);
        *(_QWORD *)(v48 + 64) = *(_QWORD *)(v38 + 112);
        *(_WORD *)(v48 + 18) = (*(_WORD *)(v38 + 18) >> 2) & 0xFFC | *(_WORD *)(v48 + 18) & 0xF003;
LABEL_72:
        if (v100 != v102)
          free(v100);
        v2 = 0;
        goto LABEL_75;
      }
      v49 = (char *)v100;
      v50 = (char *)v100 + 16 * v101;
      v51 = (unsigned __int8 **)(v43 + 80);
      while (1)
      {
        v52 = *(_DWORD *)v49;
        v53 = (unsigned __int8 *)*((_QWORD *)v49 + 1);
        if (v53)
        {
          if (!v52)
          {
            v97 = (unsigned __int8 *)*((_QWORD *)v49 + 1);
            v93 = v51;
            llvm::MetadataTracking::track((uint64_t)&v97, v53, 2);
            v51 = v93;
            v54 = *v93;
            goto LABEL_88;
          }
        }
        else
        {
          v54 = *v51;
          if (!*v51 && (v43[55] & 0x20) == 0)
            goto LABEL_85;
          if (!v52)
          {
            v97 = 0;
LABEL_88:
            if (v54)
            {
              v95 = v51;
              llvm::MetadataTracking::untrack((uint64_t)v51, v54);
              v51 = v95;
            }
            v56 = v97;
            *v51 = v97;
            if (v56)
            {
              v94 = v51;
              llvm::MetadataTracking::retrack((uint64_t)&v97, v56, (uint64_t)v51);
              v51 = v94;
            }
            goto LABEL_85;
          }
        }
        v92 = v50;
        v55 = v51;
        llvm::Value::setMetadata((llvm::Value *)v44, *(_DWORD *)v49, (llvm::MDNode *)v53);
        v51 = v55;
        v50 = v92;
LABEL_85:
        v49 += 16;
        if (v49 == v50)
          goto LABEL_71;
      }
    }
    FailBB = llvm::StackProtector::CreateFailBB(this);
    v100 = "SP_return";
    v102[8] = 259;
    v58 = (uint64_t *)llvm::BasicBlock::splitBasicBlock(v9, v14 + 3, (uint64_t)&v100, 0);
    v59 = *((_QWORD *)this + 14);
    if (v59 && llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(v59, (uint64_t)v9))
    {
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::addNewBlock(*((_QWORD *)this + 14), (uint64_t)v58, (uint64_t)v9);
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::addNewBlock(*((_QWORD *)this + 14), FailBB, (uint64_t)v9);
    }
    v60 = (_QWORD *)*v11;
    v96 = (llvm::BasicBlock *)FailBB;
    if ((_QWORD *)*v11 == v11)
    {
      v61 = 0;
    }
    else
    {
      if (v60)
        v62 = (uint64_t ***)(v60 - 3);
      else
        v62 = 0;
      if (*((unsigned __int8 *)v62 + 16) - 29 >= 0xB)
        v61 = 0;
      else
        v61 = v62;
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v61[5] + 5), v61);
    v63 = v61[3];
    v64 = v61[4];
    *v64 = (uint64_t *)v63;
    v63[1] = (uint64_t *)v64;
    v61[3] = 0;
    v61[4] = 0;
    llvm::Value::deleteValue((llvm::Value *)v61);
    sub_1C4FCEAA0(v9[7] + 72, (uint64_t *)v9[4], v58[7] + 72, v58 + 3);
    v65 = *(_QWORD *)*v9;
    v100 = v102;
    v101 = 0x200000000;
    v105 = v65;
    v106 = &v114;
    v107 = &v115;
    v108 = 0;
    v109 = 0;
    v110 = 512;
    v111 = 7;
    v112 = 0;
    v113 = 0;
    v114 = &unk_1E8167888;
    v115 = &unk_1E8167A08;
    v103 = v9;
    v104 = (_QWORD **)(v9 + 5);
    v91 = sub_1C52A2E14(*((_QWORD *)this + 5), *((llvm::Module **)this + 13), (uint64_t)&v100, 0);
    v66 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v105 + 1912), 0);
    v99 = 257;
    llvm::DataLayout::getAlignment(*(_QWORD *)(v103[7] + 40) + 272, v66);
    v68 = v67;
    v69 = (char *)operator new(0x60uLL);
    v70 = v69;
    v71 = (llvm::Value *)(v69 + 32);
    *((_QWORD *)v69 + 2) = 0;
    *((_QWORD *)v69 + 3) = v69 + 32;
    v117 = 257;
    *((_QWORD *)v69 + 4) = v66;
    *((_QWORD *)v69 + 5) = 0;
    *((_WORD *)v69 + 24) = 60;
    *((_DWORD *)v69 + 13) = 1;
    *(_OWORD *)(v69 + 56) = 0u;
    *(_OWORD *)(v69 + 72) = 0u;
    *((_DWORD *)v69 + 22) = 0;
    *(_QWORD *)v69 = v6;
    *((_QWORD *)v69 + 1) = 0;
    if (v6)
    {
      v72 = v6 + 1;
      v73 = v6[1];
      *((_QWORD *)v69 + 1) = v73;
      if (v73)
        *(_QWORD *)(v73 + 16) = v69 + 8;
      *((_QWORD *)v69 + 2) = v72;
      *v72 = v69;
    }
    *((_WORD *)v69 + 25) = (2 * (v68 & 0x3F)) | 1;
    v69[92] = 1;
    llvm::Value::setName((uint64_t ***)v69 + 4, (uint64_t)v116);
    (*((void (**)(void **, llvm::Value *, uint64_t **, uint64_t *, _QWORD **))*v107 + 2))(v107, v71, v98, v103, v104);
    if (!(_DWORD)v101)
    {
LABEL_108:
      v117 = 257;
      v74 = (llvm::Value *)sub_1C4774B48((uint64_t)&v100, 32, v91, (uint64_t)v71, (uint64_t)v116);
      v75 = sub_1C61DA3B4(1);
      v76 = sub_1C61DA3B4(0);
      v98[0] = ***((uint64_t ****)this + 12);
      v116[0] = __PAIR64__(v76, v75);
      BranchWeights = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights(v98, (uint64_t)v116, 2);
      sub_1C52A30A8((uint64_t *)&v100, v74, (llvm::BasicBlock *)v58, v96, BranchWeights, 0);
      goto LABEL_72;
    }
    v78 = (char *)v100;
    v79 = (char *)v100 + 16 * v101;
    v80 = (unsigned __int8 **)(v70 + 80);
    while (1)
    {
      v81 = *(_DWORD *)v78;
      v82 = (unsigned __int8 *)*((_QWORD *)v78 + 1);
      if (v82)
      {
        if (!v81)
        {
          v97 = (unsigned __int8 *)*((_QWORD *)v78 + 1);
          v88 = v80;
          llvm::MetadataTracking::track((uint64_t)&v97, v82, 2);
          v80 = v88;
          v83 = *v88;
          goto LABEL_120;
        }
      }
      else
      {
        v83 = *v80;
        if (!*v80 && (v70[55] & 0x20) == 0)
          goto LABEL_117;
        if (!v81)
        {
          v97 = 0;
LABEL_120:
          if (v83)
          {
            v90 = v80;
            llvm::MetadataTracking::untrack((uint64_t)v80, v83);
            v80 = v90;
          }
          v85 = v97;
          *v80 = v97;
          if (v85)
          {
            v89 = v80;
            llvm::MetadataTracking::retrack((uint64_t)&v97, v85, (uint64_t)v80);
            v80 = v89;
          }
          goto LABEL_117;
        }
      }
      v87 = v79;
      v84 = v80;
      llvm::Value::setMetadata(v71, *(_DWORD *)v78, (llvm::MDNode *)v82);
      v80 = v84;
      v79 = v87;
LABEL_117:
      v78 += 16;
      if (v78 == v79)
        goto LABEL_108;
    }
  }
  return *((unsigned __int8 *)this + 312);
}

uint64_t llvm::StackProtector::ContainsProtectableArray(llvm::StackProtector *this, llvm::Type *a2, BOOL *a3, BOOL a4, char a5)
{
  int v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  BOOL v17;
  const char *v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  llvm::Type **v22;
  uint64_t v23;

  if (!a2)
    goto LABEL_22;
  v9 = *((unsigned __int8 *)a2 + 8);
  if (v9 == 17)
  {
    if (*(_DWORD *)(*((_QWORD *)a2 + 3) + 8) != 2061 && !a4)
    {
      if ((a5 & 1) != 0)
      {
LABEL_22:
        v10 = 0;
        return v10 & 1;
      }
      v10 = 0;
      v11 = *((_DWORD *)this + 21);
      if (v11 > 0x21 || ((1 << v11) & 0x3F0000888) == 0)
        return v10 & 1;
    }
    v12 = *((unsigned int *)this + 36);
    v13 = *((_QWORD *)this + 13) + 272;
    sub_1C4768AD0(v13, (uint64_t)a2);
    v15 = (unint64_t)(v14 + 7) >> 3;
    v17 = v16 == 1;
    llvm::DataLayout::getAlignment(v13, (uint64_t)a2);
    v20 = ((1 << v19) + v15 - 1) & -(1 << v19);
    if (v17)
    if (v20 >= v12)
    {
      v10 = 1;
      *a3 = 1;
      return v10 & 1;
    }
    if (a4)
    {
      v10 = 1;
      return v10 & 1;
    }
    v9 = *((unsigned __int8 *)a2 + 8);
  }
  if (v9 != 16)
    goto LABEL_22;
  v21 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v21)
    goto LABEL_22;
  v10 = 0;
  v22 = (llvm::Type **)*((_QWORD *)a2 + 2);
  v23 = 8 * v21;
  do
  {
    if (llvm::StackProtector::ContainsProtectableArray(this, *v22, a3, a4, 1))
    {
      v10 = 1;
      if (*a3)
        break;
    }
    ++v22;
    v23 -= 8;
  }
  while (v23);
  return v10 & 1;
}

uint64_t llvm::StackProtector::HasAddressTaken(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  llvm::DataLayout *v9;
  llvm::SmallPtrSetImplBase *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  char v17;
  uint64_t **v19;
  unsigned int IndexTypeSizeInBits;
  _BYTE v21[8];
  unint64_t v22;
  char v23;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    return 0;
  v9 = (llvm::DataLayout *)(*(_QWORD *)(a1 + 104) + 272);
  v10 = (llvm::SmallPtrSetImplBase *)(a1 + 152);
  while (2)
  {
    v11 = *(_QWORD *)(v4 + 24);
    llvm::MemoryLocation::getOrNone((uint64_t ***)v11, (uint64_t)v21);
    if (!v23 || (v22 <= 0xFFFFFFFFFFFFFFFDLL ? (v12 = a3 >= (v22 & 0x7FFFFFFFFFFFFFFFLL)) : (v12 = 1), v12))
    {
      switch(*(_BYTE *)(v11 + 16))
      {
        case '<':
        case 'A':
          goto LABEL_36;
        case '=':
          v13 = *(_QWORD *)(v11 - 64);
          goto LABEL_16;
        case '>':
          IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v9, *(_QWORD *)v11);
          if (IndexTypeSizeInBits > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v19, 0, 0);
          else
            v19 = 0;
          if (llvm::GEPOperator::accumulateConstantOffset(v11, v9, (uint64_t)&v19, 0, v14)
            && (v15 = sub_1C47EE5B8(&v19, 0xFFFFFFFFFFFFFFFFLL), a3 > (unint64_t)v15))
          {
            if (llvm::StackProtector::HasAddressTaken(a1, v11, a3 - (_QWORD)v15, 0))
              v16 = 1;
            else
              v16 = 4;
          }
          else
          {
            v16 = 1;
          }
          if (IndexTypeSizeInBits >= 0x41)
          {
            if (v19)
              MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
          }
          if (v16 != 4)
            return 1;
          goto LABEL_36;
        case '?':
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'L':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
          return 1;
        case '@':
        case 'K':
          v13 = *(_QWORD *)(v11 - 32);
LABEL_16:
          if (v13 == a2)
            return 1;
          goto LABEL_36;
        case 'M':
        case 'N':
        case 'U':
          goto LABEL_10;
        case 'S':
          sub_1C4774094(v10, v11);
          if (!v17)
            goto LABEL_36;
LABEL_10:
          if ((llvm::StackProtector::HasAddressTaken(a1, v11, a3, a4) & 1) != 0)
            return 1;
          goto LABEL_36;
        case 'T':
          if (!sub_1C4D99D08(v11)
            && !sub_1C509DDB0(v11)
            && !llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)v11))
          {
            return 1;
          }
          goto LABEL_36;
        default:
          if (*(_BYTE *)(v11 + 16) != 29)
            return 1;
LABEL_36:
          v4 = *(_QWORD *)(v4 + 8);
          if (!v4)
            return 0;
          continue;
      }
    }
    return 1;
  }
}

void sub_1C52A2B90(llvm::OptimizationRemarkEmitter *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  void **v15;
  void *v16[2];
  char v17;
  void *__p;
  char v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t (**v25)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v26;
  char v27;
  uint64_t v28;
  _QWORD v29[5];
  char v30;
  char v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[260];
  int v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = ****(_QWORD ****)a1;
  if (*(_QWORD *)(v6 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v6 + 72) + 48))(*(_QWORD *)(v6 + 72)))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
    llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v29, (const llvm::DebugLoc *)(a2 + 48));
    v8 = *(_QWORD *)(a2 + 40);
    v26 = 9;
    v27 = 2;
    v28 = v7;
    v29[2] = "stack-protector";
    v29[3] = "StackProtectorAllocaOrArray";
    v29[4] = 27;
    v30 = 0;
    v31 = 0;
    v32 = v34;
    v33 = 0x400000000;
    v34[256] = 0;
    v35 = -1;
    v36 = v8;
    v25 = &off_1E814E500;
    v20 = "Stack protection applied to function ";
    v21 = 37;
    sub_1C53B17B4((uint64_t)&v32, (const void **)&v20);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v16, "Function", 8uLL, *(_BYTE **)(a3 + 96));
    v9 = sub_1C47E3888((uint64_t)&v25, (uint64_t)v16);
    v20 = " due to a call to alloca or use of a variable length array";
    v21 = 58;
    sub_1C53B17B4(v9 + 80, (const void **)&v20);
    sub_1C61998EC((uint64_t)&v20, v9);
    v20 = (const char *)&off_1E814E500;
    if (v19 < 0)
      operator delete(__p);
    if (v17 < 0)
      operator delete(v16[0]);
    v25 = &off_1E814E790;
    v10 = (char *)v32;
    if ((_DWORD)v33)
    {
      v11 = (unint64_t)v33 << 6;
      do
      {
        v12 = (void **)&v10[v11];
        if (v10[v11 - 17] < 0)
          operator delete(*(v12 - 5));
        if (*((char *)v12 - 41) < 0)
          operator delete(*(v12 - 8));
        v11 -= 64;
      }
      while (v11);
      v10 = (char *)v32;
    }
    if (v10 != v34)
      free(v10);
    llvm::OptimizationRemarkEmitter::emit(a1, (llvm::DiagnosticInfoOptimizationBase *)&v20);
    v20 = (const char *)&off_1E814E790;
    v13 = (char *)v22;
    if (v23)
    {
      v14 = (unint64_t)v23 << 6;
      do
      {
        v15 = (void **)&v13[v14];
        if (v13[v14 - 17] < 0)
          operator delete(*(v15 - 5));
        if (*((char *)v15 - 41) < 0)
          operator delete(*(v15 - 8));
        v14 -= 64;
      }
      while (v14);
      v13 = (char *)v22;
    }
    if (v13 != (char *)&v24)
      free(v13);
  }
}

uint64_t sub_1C52A2E14(uint64_t a1, llvm::Module *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v8;
  unsigned __int16 *StackProtectorGuard;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13;
  char v14;
  char *v15;
  char *v16;
  llvm::Value *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 **v24;
  int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t Declaration;
  uint64_t **v30;
  const char *v32;
  __int16 v33;
  _BYTE v34[32];
  __int16 v35;
  unsigned __int8 *v36;

  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 760))(a1, a3);
  StackProtectorGuard = (unsigned __int16 *)llvm::Module::getStackProtectorGuard(a2);
  if (v10 != 3)
  {
    if (!v10 && v8)
      goto LABEL_10;
LABEL_28:
    if (a4)
      *a4 = 1;
    (*(void (**)(uint64_t, llvm::Module *))(*(_QWORD *)a1 + 768))(a1, a2);
    Declaration = llvm::Intrinsic::getDeclaration((uint64_t *)a2, 285, 0, 0);
    if (Declaration)
      v30 = *(uint64_t ***)(Declaration + 24);
    else
      v30 = 0;
    v35 = 257;
    return sub_1C4774778((uint64_t *)a3, v30, Declaration, 0, 0, (uint64_t)v34, 0);
  }
  if (*StackProtectorGuard ^ 0x6C74 | *((unsigned __int8 *)StackProtectorGuard + 2) ^ 0x73)
    v11 = 1;
  else
    v11 = v8 == 0;
  if (v11)
    goto LABEL_28;
LABEL_10:
  v12 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a3 + 64) + 1912), 0);
  v32 = "StackGuard";
  v33 = 259;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 56) + 40) + 272, v12);
  v14 = v13;
  v15 = (char *)operator new(0x60uLL);
  v16 = v15;
  v17 = (llvm::Value *)(v15 + 32);
  v35 = 257;
  *((_QWORD *)v15 + 3) = v15 + 32;
  *((_QWORD *)v15 + 4) = v12;
  *((_QWORD *)v15 + 5) = 0;
  *((_WORD *)v15 + 24) = 60;
  *((_DWORD *)v15 + 13) = 1;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *((_DWORD *)v15 + 22) = 0;
  *(_QWORD *)v15 = v8;
  v20 = *(_QWORD *)(v8 + 8);
  v19 = (_QWORD *)(v8 + 8);
  v18 = v20;
  *((_QWORD *)v15 + 1) = v20;
  if (v20)
    *(_QWORD *)(v18 + 16) = v15 + 8;
  *((_QWORD *)v15 + 2) = v19;
  *v19 = v15;
  *((_WORD *)v15 + 25) = (2 * (v14 & 0x3F)) | 1;
  v15[92] = 1;
  llvm::Value::setName((uint64_t ***)v15 + 4, (uint64_t)v34);
  (*(void (**)(_QWORD, llvm::Value *, const char **, _QWORD, _QWORD))(**(_QWORD **)(a3 + 80) + 16))(*(_QWORD *)(a3 + 80), v17, &v32, *(_QWORD *)(a3 + 48), *(_QWORD *)(a3 + 56));
  v21 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v21)
  {
    v22 = *(_QWORD *)a3;
    v23 = *(_QWORD *)a3 + 16 * v21;
    v24 = (unsigned __int8 **)(v16 + 80);
    do
    {
      v25 = *(_DWORD *)v22;
      v26 = *(unsigned __int8 **)(v22 + 8);
      if (v26)
      {
        if (!v25)
        {
          v36 = *(unsigned __int8 **)(v22 + 8);
          llvm::MetadataTracking::track((uint64_t)&v36, v26, 2);
          v27 = *v24;
          goto LABEL_24;
        }
      }
      else
      {
        v27 = *v24;
        if (!*v24 && (v16[55] & 0x20) == 0)
          goto LABEL_21;
        if (!v25)
        {
          v36 = 0;
LABEL_24:
          if (v27)
            llvm::MetadataTracking::untrack((uint64_t)(v16 + 80), v27);
          v28 = v36;
          *v24 = v36;
          if (v28)
            llvm::MetadataTracking::retrack((uint64_t)&v36, v28, (uint64_t)(v16 + 80));
          goto LABEL_21;
        }
      }
      llvm::Value::setMetadata(v17, *(_DWORD *)v22, (llvm::MDNode *)v26);
LABEL_21:
      v22 += 16;
    }
    while (v22 != v23);
  }
  return (uint64_t)v17;
}

unsigned __int8 **sub_1C52A30A8(uint64_t *a1, llvm::Value *a2, llvm::BasicBlock *a3, llvm::BasicBlock *a4, llvm::MDNode *a5, llvm::MDNode *a6)
{
  _DWORD *v12;
  uint64_t v13;
  llvm::Value *v14;
  _QWORD *v15;
  _BYTE v17[32];
  __int16 v18;

  v12 = operator new(0xA0uLL);
  v13 = 0;
  v14 = (llvm::Value *)(v12 + 24);
  v12[29] = v12[29] & 0x38000000 | 3;
  do
  {
    v15 = &v12[v13];
    *v15 = 0;
    v15[1] = 0;
    v15[2] = 0;
    v15[3] = v14;
    v13 += 8;
  }
  while (v13 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v12 + 24), a3, a4, a2, 0);
  if (a5)
    llvm::Value::setMetadata(v14, 2, a5);
  if (a6)
    llvm::Value::setMetadata(v14, 15, a6);
  v18 = 257;
  return sub_1C4867F8C(a1, (unsigned __int8 **)v14, (uint64_t)v17);
}

BOOL llvm::StackProtector::shouldEmitSDCheck(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 312) || *(_BYTE *)(a1 + 313))
    return 0;
  v3 = *(_QWORD *)(a2 + 40);
  if (v3)
    v4 = v3 - 24;
  else
    v4 = 0;
  if (*(unsigned __int8 *)(v4 + 16) - 29 >= 0xB)
    v4 = 0;
  return *(_BYTE *)(v4 + 16) == 29;
}

uint64_t llvm::StackProtector::copyToMachineFrameInfo(uint64_t this, llvm::MachineFrameInfo *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  llvm::MachineFrameInfo *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_DWORD *)(this + 128))
  {
    v2 = -858993459 * ((*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    v3 = *((_DWORD *)a2 + 8);
    v4 = v2 - v3;
    if (v2 != v3)
    {
      v5 = 0;
      v6 = (uint64_t *)(this + 120);
      do
      {
        v7 = this;
        v8 = v5 + *((_DWORD *)a2 + 8);
        v9 = a2;
        v10 = *((_QWORD *)a2 + 1);
        if (*(_QWORD *)(v10 + 40 * v8 + 8) != -1)
        {
          v11 = *(_QWORD *)(v10 + 40 * v8 + 24);
          if (v11)
          {
            v15 = 0;
            v16 = v11;
            if (sub_1C61252B8(v6, &v16, &v15))
            {
              v12 = v15;
              v13 = *(_QWORD *)(v7 + 120);
              v14 = *(unsigned int *)(v7 + 136);
            }
            else
            {
              v13 = *(_QWORD *)(v7 + 120);
              v14 = *(unsigned int *)(v7 + 136);
              v12 = v13 + 16 * v14;
            }
            if (v12 != v13 + 16 * v14)
              *(_BYTE *)(*((_QWORD *)v9 + 1) + 40 * (v5 + *((_DWORD *)v9 + 8)) + 36) = *(_DWORD *)(v12 + 8);
          }
        }
        ++v5;
        a2 = v9;
        this = v7;
      }
      while (v4 != v5);
    }
  }
  return this;
}

void sub_1C52A32F0(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E814AE20;
  v2 = *(void **)(a1 + 160);
  if (v2 != *(void **)(a1 + 152))
    free(v2);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 120), 8);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

_QWORD *sub_1C52A334C(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C50F3A5C(a1, v7);
      v17 = 0;
      sub_1C4926528(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C50F3A5C(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C52A347C()
{
  int v1;
  char v2;
  char *v3;

  v2 = 1;
  v3 = &v2;
  v1 = 1;
  sub_1C61BCD3C((uint64_t)&unk_1ED800018, "enable-selectiondag-sp", &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED800018, &dword_1C475E000);
}

uint64_t sub_1C52A34E8(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeSlotIndexesPass((uint64_t)a1);
  llvm::initializeLiveStacksPass(a1, v2);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Stack Slot Coloring";
  *(_QWORD *)(v3 + 8) = 19;
  *(_QWORD *)(v3 + 16) = "stack-slot-coloring";
  *(_QWORD *)(v3 + 24) = 19;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F7010;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C52A3588;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C52A3588()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8F7010);
  *(_QWORD *)v1 = &off_1E814AEC8;
  *(_QWORD *)(v1 + 280) = 0;
  *(_QWORD *)(v1 + 288) = 0;
  *(_QWORD *)(v1 + 296) = 0;
  *(_QWORD *)(v1 + 304) = v1 + 320;
  *(_QWORD *)(v1 + 312) = 0x1000000000;
  *(_QWORD *)(v1 + 1600) = v1 + 1624;
  *(_QWORD *)(v1 + 1608) = 0;
  *(_QWORD *)(v1 + 1616) = 16;
  *(_QWORD *)(v1 + 1640) = v1 + 1656;
  *(_QWORD *)(v1 + 1648) = 0x1000000000;
  *(_QWORD *)(v1 + 1720) = v1 + 1736;
  *(_QWORD *)(v1 + 1728) = 0x200000000;
  *(_QWORD *)(v1 + 1880) = v1 + 1896;
  *(_DWORD *)(v1 + 1896) = -1;
  *(_QWORD *)(v1 + 1888) = 0x200000001;
  *(_QWORD *)(v1 + 1904) = v1 + 1920;
  *(_QWORD *)(v1 + 1912) = 0x200000000;
  *(_QWORD *)(v1 + 2064) = v1 + 2080;
  *(_QWORD *)(v1 + 2072) = 0x1000000000;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED8000D8);
  if (v3 != -1)
  {
    v7[0] = sub_1C52A34E8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED8000D8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C52A36E0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)a1 = &off_1E814AEC8;
  sub_1C62149A0((char **)(a1 + 2064));
  sub_1C6214A1C((void **)(a1 + 1904));
  v2 = *(void **)(a1 + 1880);
  if (v2 != (void *)(a1 + 1896))
    free(v2);
  sub_1C6214A1C((void **)(a1 + 1720));
  v3 = *(void **)(a1 + 1640);
  if (v3 != (void *)(a1 + 1656))
    free(v3);
  v4 = *(void **)(a1 + 1600);
  if (v4 != (void *)(a1 + 1624))
    free(v4);
  sub_1C6214AA4((char **)(a1 + 304));
  v5 = *(void **)(a1 + 280);
  if (v5)
  {
    *(_QWORD *)(a1 + 288) = v5;
    operator delete(v5);
  }
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v6 = *(void **)(a1 + 176);
  if (v6 != (void *)(a1 + 192))
    free(v6);
  v7 = *(void **)(a1 + 104);
  if (v7 != (void *)(a1 + 120))
    free(v7);
  v8 = *(void **)(a1 + 32);
  if (v8 != (void *)(a1 + 48))
    free(v8);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C52A37D0(uint64_t a1)
{
  sub_1C52A36E0(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C52A37F4(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LiveStacks::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C52A38A8(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  int v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  int v42;
  int v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t *v48;
  int *v49;
  unint64_t *v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unsigned int v82;
  _QWORD *k;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int *v106;
  char v107;
  uint64_t v108;
  int v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int *v115;
  char v116;
  uint64_t v117;
  int v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  void **v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  char v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  char *v147;
  unint64_t v148;
  _DWORD *v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t m;
  uint64_t v161;
  uint64_t *FixedStack;
  uint64_t v164;
  uint64_t v165;
  unint64_t **v166;
  unint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _DWORD *v171;
  uint64_t v172;
  uint64_t v173;
  _DWORD *v174;
  uint64_t v175;
  int v176;
  BOOL v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  BOOL v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  BOOL v188;
  BOOL v189;
  int RegisterUseOperandIdx;
  unsigned int v191;
  _BYTE **v192;
  _BYTE **v193;
  _BYTE *v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t n;
  int ii;
  char *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _DWORD *v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  _DWORD *v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  uint64_t v224;
  void **v225;
  uint64_t v226;
  uint64_t v227;
  void **v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  int v232;
  _QWORD *v233;
  char *v234;
  char *v235;
  uint64_t i;
  _QWORD *v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  uint64_t v244;
  _DWORD v245[14];
  void *v246;
  uint64_t v247;
  _BYTE v248[512];
  void *v249[2];
  _BYTE v250[64];
  void *v251[2];
  _BYTE v252[64];
  _QWORD *v253;
  uint64_t v254;
  _QWORD v255[6];

  v255[4] = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, *(const llvm::Function **)a2) & 1) != 0)
    return 0;
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 264) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::LiveStacks::ID);
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::LiveStacks::ID);
  v6 = **(void ****)(a1 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != &llvm::MachineBlockFrequencyInfo::ID);
  *(_QWORD *)(a1 + 272) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), &llvm::MachineBlockFrequencyInfo::ID);
  if (!*(_DWORD *)(*(_QWORD *)(a1 + 248) + 376) || *(_BYTE *)(a2 + 353) != 0)
    return 0;
  v10 = (uint64_t *)(a1 + 304);
  v11 = -858993459 * ((*(_QWORD *)(*(_QWORD *)(a1 + 256) + 16) - *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8)) >> 3)
      - *(_DWORD *)(*(_QWORD *)(a1 + 256) + 32);
  v12 = *(unsigned int *)(a1 + 312);
  v240 = (_QWORD *)(a1 + 304);
  if (v12 != v11)
  {
    if (v12 > v11)
    {
      v224 = 5 * v12;
      v225 = (void **)(*v10 + 16 * v224 - 80);
      v226 = 80 * v11 - 16 * v224;
      do
      {
        if (v225 + 2 != *v225)
          free(*v225);
        v225 -= 10;
        v226 += 80;
      }
      while (v226);
    }
    else
    {
      if (*(unsigned int *)(a1 + 316) < (unint64_t)v11)
      {
        sub_1C6214B20((uint64_t)v240, v11);
        v10 = (uint64_t *)(a1 + 304);
        v12 = *(unsigned int *)(a1 + 312);
      }
      if (v12 != v11)
      {
        v13 = *v10;
        v14 = 5 * v12;
        v15 = 80 * v11 - 80 * v12;
        v16 = v13 + 16 * v14 + 16;
        do
        {
          *(_QWORD *)(v16 - 16) = v16;
          *(_QWORD *)(v16 - 8) = 0x800000000;
          v16 += 80;
          v15 -= 80;
        }
        while (v15);
      }
    }
    *(_DWORD *)(a1 + 312) = v11;
  }
  v230 = a2;
  v17 = *(_QWORD *)(a2 + 328);
  for (i = a2 + 320; v17 != i; v17 = *(_QWORD *)(v238 + 8))
  {
    v18 = v17 + 48;
    v238 = v17;
    for (j = *(_QWORD *)(v17 + 56); j != v18; j = *(_QWORD *)(j + 8))
    {
      v20 = *(unsigned int *)(j + 40);
      if ((_DWORD)v20)
      {
        v21 = *(_QWORD *)(j + 32);
        v22 = v21 + 32 * v20;
        do
        {
          if (*(_BYTE *)v21 == 5)
          {
            v23 = *(_DWORD *)(v21 + 16);
            if ((v23 & 0x80000000) == 0)
            {
              v24 = *(_QWORD *)(a1 + 248);
              LODWORD(v246) = *(_DWORD *)(v21 + 16);
              if (sub_1C51D0CE8((_QWORD *)(v24 + 352), (int *)&v246))
              {
                v25 = *(_QWORD *)(a1 + 248);
                LODWORD(v246) = v23;
                v26 = sub_1C50E36C4((_QWORD *)(v25 + 352), (int *)&v246);
                if (**(unsigned __int16 **)(j + 16) - 13 >= 5)
                {
                  v27 = v26;
                  v28 = *(_QWORD *)(a1 + 272);
                  v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(j + 24) + 32) + 16);
                  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 176))(v29);
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 336))(v30, j);
                  v32 = *(_QWORD *)(v28 + 248);
                  if (v32)
                  {
                    v33 = *(_DWORD *)(v32 + 176);
                    v34 = 0.0;
                    if (v33)
                    {
                      v35 = *(_QWORD *)(j + 24);
                      v36 = *(_QWORD *)(v32 + 160);
                      v37 = v33 - 1;
                      v38 = (v33 - 1) & ((v35 >> 4) ^ (v35 >> 9));
                      v39 = *(_QWORD *)(v36 + 16 * v38);
                      if (v39 == v35)
                      {
LABEL_31:
                        v40 = *(unsigned int *)(v36 + 16 * v38 + 8);
                        if (v40 != 0xFFFFFFFFLL)
                          v34 = (float)*(unint64_t *)(*(_QWORD *)(v32 + 8) + 24 * v40 + 16);
                      }
                      else
                      {
                        v42 = 1;
                        while (v39 != -4096)
                        {
                          v43 = v38 + v42++;
                          v38 = v43 & v37;
                          v39 = *(_QWORD *)(v36 + 16 * v38);
                          if (v39 == v35)
                            goto LABEL_31;
                        }
                      }
                    }
                    v41 = (float)*(unint64_t *)(*(_QWORD *)(v32 + 8) + 16);
                  }
                  else
                  {
                    v34 = 0.0;
                    v41 = 0.0;
                  }
                  *((float *)v27 + 35) = *((float *)v27 + 35)
                                       + (float)((float)((float)(v31 * 0.0) + 1.0) * (float)(v34 * (float)(1.0 / v41)));
                }
              }
            }
          }
          v21 += 32;
        }
        while (v21 != v22);
      }
      v44 = (unint64_t *)(j + 48);
      v45 = *(_QWORD *)(j + 48);
      if (v45 < 8)
      {
        v48 = 0;
        v44 = 0;
        v45 = 0;
        v46 = (_QWORD *)(a1 + 304);
        goto LABEL_59;
      }
      v46 = (_QWORD *)(a1 + 304);
      if ((v45 & 7) != 0)
      {
        if ((v45 & 0xFFFFFFFFFFFFFFF8) != 0 && (*(_QWORD *)(j + 48) & 7) == 3)
          v48 = (unint64_t *)((v45 & 0xFFFFFFFFFFFFFFF8) + 8);
        else
          v48 = 0;
      }
      else
      {
        v48 = (unint64_t *)(j + 48);
        v45 &= 0xFFFFFFFFFFFFFFF8;
        *v44 = v45;
        if (!v45)
        {
          v48 = (unint64_t *)(j + 48);
          v44 = 0;
          goto LABEL_59;
        }
      }
      if ((v45 & 7) != 0)
      {
        v44 = 0;
        if ((v45 & 7) == 3 && (v49 = (int *)(v45 & 0xFFFFFFFFFFFFFFF8), (v45 & 0xFFFFFFFFFFFFFFF8) != 0))
        {
          v45 = *v49;
          v44 = (unint64_t *)(v49 + 2);
        }
        else
        {
          v45 = 0;
        }
      }
      else
      {
        *v44 = v45 & 0xFFFFFFFFFFFFFFF8;
        v45 = 1;
      }
LABEL_59:
      v50 = &v44[v45];
      if (v48 != v50)
      {
        do
        {
          v51 = (_QWORD *)*v48;
          v52 = *(_QWORD *)*v48;
          if ((v52 & 4) != 0)
          {
            v53 = v52 & 0xFFFFFFFFFFFFFFF8;
            if (v53)
            {
              if (*(_DWORD *)(v53 + 8) == 4)
              {
                v54 = *(_DWORD *)(v53 + 16);
                if ((v54 & 0x80000000) == 0)
                {
                  v55 = *v46 + 80 * v54;
                  v56 = *(unsigned int *)(v55 + 8);
                  if (v56 >= *(unsigned int *)(v55 + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v55, v55 + 16, v56 + 1, 8);
                    v46 = (_QWORD *)(a1 + 304);
                    v56 = *(unsigned int *)(v55 + 8);
                  }
                  *(_QWORD *)(*(_QWORD *)v55 + 8 * v56) = v51;
                  ++*(_DWORD *)(v55 + 8);
                }
              }
            }
          }
          ++v48;
        }
        while (v48 != v50);
        if (!j)
          goto LABEL_72;
      }
      if ((*(_BYTE *)j & 4) == 0)
      {
LABEL_72:
        while ((*(_WORD *)(j + 44) & 8) != 0)
          j = *(_QWORD *)(j + 8);
      }
    }
  }
  v57 = -*(_DWORD *)(*(_QWORD *)(a1 + 256) + 32)
      - 858993459 * ((*(_QWORD *)(*(_QWORD *)(a1 + 256) + 16) - *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8)) >> 3);
  v58 = a1 + 1720;
  sub_1C52A51A8(a1 + 1720, 1uLL);
  v239 = a1 + 1904;
  sub_1C52A51A8(a1 + 1904, 1uLL);
  v59 = v57;
  v60 = *(_QWORD *)(a1 + 1608);
  v232 = v57;
  if (v60 != v57)
  {
    if (v60 <= v57)
    {
      if (*(_QWORD *)(a1 + 1616) < (unint64_t)v57)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 1600, (void *)(a1 + 1624), v57, 1);
        v60 = *(_QWORD *)(a1 + 1608);
      }
      if (v57 != v60)
        bzero((void *)(*(_QWORD *)(a1 + 1600) + v60), v57 - v60);
    }
    *(_QWORD *)(a1 + 1608) = v57;
  }
  v231 = (_QWORD *)(a1 + 1640);
  v61 = *(unsigned int *)(a1 + 1648);
  if (v61 != v57)
  {
    if (v61 <= v57)
    {
      if (*(unsigned int *)(a1 + 1652) < (unint64_t)v57)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v231, a1 + 1656, v57, 4);
        v61 = *(unsigned int *)(a1 + 1648);
      }
      if (v57 != v61)
        bzero((void *)(*v231 + 4 * v61), 4 * (v57 - v61));
    }
    *(_DWORD *)(a1 + 1648) = v57;
  }
  v62 = *(_QWORD *)v58;
  v63 = *(unsigned int *)(*(_QWORD *)v58 + 8);
  if ((*(_DWORD *)(*(_QWORD *)v58 + 64) & 0x3F) != 0)
    *(_QWORD *)(*(_QWORD *)v62 + 8 * v63 - 8) &= ~(-1 << (*(_DWORD *)(*(_QWORD *)v58 + 64) & 0x3F));
  v64 = v63;
  *(_DWORD *)(v62 + 64) = v232;
  v65 = (v232 + 63) >> 6;
  if ((_DWORD)v63 != (v232 + 63) >> 6)
  {
    if (v63 <= v65)
    {
      v66 = v63;
      if (v65 > *(_DWORD *)(v62 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v62, v62 + 16, v65, 8);
        v66 = *(unsigned int *)(v62 + 8);
        v64 = *(_DWORD *)(v62 + 8);
      }
      if (v65 != v63)
        bzero((void *)(*(_QWORD *)v62 + 8 * v66), 8 * (v65 - v63));
      v64 += v65 - v63;
      *(_DWORD *)(v62 + 8) = v64;
      v67 = *(_DWORD *)(v62 + 64);
      goto LABEL_98;
    }
    *(_DWORD *)(v62 + 8) = v65;
    v64 = (v232 + 63) >> 6;
  }
  LOBYTE(v67) = v232;
LABEL_98:
  v68 = v67 & 0x3F;
  if (v68)
    *(_QWORD *)(*(_QWORD *)v62 + 8 * v64 - 8) &= ~(-1 << v68);
  v69 = *(_QWORD *)v239;
  v70 = *(unsigned int *)(*(_QWORD *)v239 + 8);
  if ((*(_DWORD *)(*(_QWORD *)v239 + 64) & 0x3F) != 0)
    *(_QWORD *)(*(_QWORD *)v69 + 8 * v70 - 8) &= ~(-1 << (*(_DWORD *)(*(_QWORD *)v239 + 64) & 0x3F));
  v71 = v70;
  LOBYTE(v72) = v232;
  *(_DWORD *)(v69 + 64) = v232;
  v73 = (v232 + 63) >> 6;
  if ((_DWORD)v70 != (_DWORD)v65)
  {
    if (v70 > v65)
    {
      *(_DWORD *)(v69 + 8) = v65;
      v73 = (v232 + 63) >> 6;
      LOBYTE(v72) = v232;
    }
    else
    {
      v74 = v70;
      if (v65 > *(_DWORD *)(v69 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v69, v69 + 16, v65, 8);
        v74 = *(unsigned int *)(v69 + 8);
        v71 = *(_DWORD *)(v69 + 8);
      }
      if (v65 != v70)
        bzero((void *)(*(_QWORD *)v69 + 8 * v74), 8 * (v65 - v70));
      v73 = v71 + v65 - v70;
      *(_DWORD *)(v69 + 8) = v73;
      v72 = *(_DWORD *)(v69 + 64);
    }
  }
  v75 = v72 & 0x3F;
  if (v75)
    *(_QWORD *)(*(_QWORD *)v69 + 8 * v73 - 8) &= ~(-1 << v75);
  v237 = (_QWORD *)(a1 + 2064);
  v76 = *(unsigned int *)(a1 + 2072);
  if (v76 != v59)
  {
    if (v76 > v59)
    {
      v58 = a1 + 1720;
      v227 = 3 * v76;
      v228 = (void **)(*v237 + 16 * v227 - 48);
      v229 = 48 * (int)v59 - 16 * v227;
      do
      {
        if (v228 + 2 != *v228)
          free(*v228);
        v228 -= 6;
        v229 += 48;
      }
      while (v229);
    }
    else
    {
      if (*(unsigned int *)(a1 + 2076) < v59)
      {
        sub_1C6214C4C((uint64_t)v237, v59);
        v76 = *(unsigned int *)(a1 + 2072);
      }
      if (v76 != v59)
      {
        v77 = 3 * v76;
        v78 = 48 * (int)v59 - 48 * v76;
        v79 = *v237 + 16 * v77 + 16;
        do
        {
          *(_QWORD *)(v79 - 16) = v79;
          *(_QWORD *)(v79 - 8) = 0x400000000;
          v79 += 48;
          v78 -= 48;
        }
        while (v78);
      }
    }
    *(_DWORD *)(a1 + 2072) = v232;
  }
  v246 = v248;
  v247 = 0x1000000000;
  v80 = *(_QWORD *)(a1 + 248);
  v81 = *(unsigned int *)(v80 + 376);
  if (v81 < 0x11)
  {
    v82 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v246, (uint64_t)v248, v81, 8);
    v80 = *(_QWORD *)(a1 + 248);
    v82 = v247;
  }
  for (k = *(_QWORD **)(v80 + 368); k; k = (_QWORD *)*k)
  {
    if (v82 >= HIDWORD(v247))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v246, (uint64_t)v248, v82 + 1, 8);
      v82 = v247;
    }
    *((_QWORD *)v246 + v82) = k + 2;
    v82 = v247 + 1;
    LODWORD(v247) = v247 + 1;
  }
  v84 = 126 - 2 * __clz(v82);
  if (v82)
    v85 = v84;
  else
    v85 = 0;
  sub_1C52A5288((unint64_t)v246, (int **)v246 + v82, v85, 1);
  if ((_DWORD)v247)
  {
    v86 = (char *)v246;
    v234 = (char *)v246 + 8 * v247;
    do
    {
      v87 = *(_DWORD *)(*(_QWORD *)v86 + 120);
      v88 = v87 - 0x40000000;
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 8)
                     + 40 * (*(_DWORD *)(*(_QWORD *)(a1 + 256) + 32) + v87 - 0x40000000)
                     + 8) != -1)
      {
        v89 = *(_QWORD *)v86 + 8;
        v91 = *(uint64_t **)(a1 + 288);
        v90 = *(_QWORD *)(a1 + 296);
        if ((unint64_t)v91 >= v90)
        {
          v93 = *(_QWORD **)(a1 + 280);
          v94 = v91 - v93;
          v95 = v94 + 1;
          if ((unint64_t)(v94 + 1) >> 61)
            abort();
          v96 = v90 - (_QWORD)v93;
          if (v96 >> 2 > v95)
            v95 = v96 >> 2;
          if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8)
            v97 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v97 = v95;
          if (v97)
          {
            if (v97 >> 61)
              sub_1C4764EE4();
            v98 = (char *)operator new(8 * v97);
          }
          else
          {
            v98 = 0;
          }
          v99 = (uint64_t *)&v98[8 * v94];
          *v99 = v89;
          v92 = v99 + 1;
          if (v91 != v93)
          {
            do
            {
              v100 = *--v91;
              *--v99 = v100;
            }
            while (v91 != v93);
            v91 = *(uint64_t **)(a1 + 280);
          }
          *(_QWORD *)(a1 + 280) = v99;
          *(_QWORD *)(a1 + 288) = v92;
          *(_QWORD *)(a1 + 296) = &v98[8 * v97];
          if (v91)
            operator delete(v91);
          v58 = a1 + 1720;
        }
        else
        {
          *v91 = v89;
          v92 = v91 + 1;
        }
        *(_QWORD *)(a1 + 288) = v92;
        *(_BYTE *)(*(_QWORD *)(a1 + 1600) + (int)v88) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 8)
                                                                 + 40
                                                                 * (*(_DWORD *)(*(_QWORD *)(a1 + 256) + 32) + v88)
                                                                 + 16);
        v101 = *(_QWORD *)(a1 + 256);
        v102 = *(_QWORD *)(v101 + 8);
        *(_DWORD *)(*(_QWORD *)(a1 + 1640) + 4 * (int)v88) = *(_QWORD *)(v102
                                                                         + 40 * (*(_DWORD *)(v101 + 32) + v88)
                                                                         + 8);
        v103 = v102 + 40 * (*(_DWORD *)(v101 + 32) + v88);
        v104 = *(unsigned __int8 *)(v103 + 20);
        if (*(_BYTE *)(v103 + 20))
        {
          sub_1C52A51A8(v58, v104 + 1);
          sub_1C52A51A8(v239, v104 + 1);
          v105 = *(_QWORD *)v58 + 72 * v104;
          v106 = (int *)(v105 + 64);
          v107 = *(_DWORD *)(v105 + 64) & 0x3F;
          v108 = *(unsigned int *)(v105 + 8);
          if (v107)
            *(_QWORD *)(*(_QWORD *)v105 + 8 * v108 - 8) &= ~(-1 << v107);
          v109 = v108;
          LOBYTE(v110) = v232;
          *v106 = v232;
          v111 = (v232 + 63) >> 6;
          if ((_DWORD)v108 != (_DWORD)v65)
          {
            if (v108 > v65)
            {
              *(_DWORD *)(v105 + 8) = v65;
              v111 = (v232 + 63) >> 6;
              LOBYTE(v110) = v232;
            }
            else
            {
              v112 = v108;
              if (v65 > *(_DWORD *)(v105 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v105, v105 + 16, v65, 8);
                v112 = *(unsigned int *)(v105 + 8);
                v109 = *(_DWORD *)(v105 + 8);
              }
              if (v65 != v108)
                bzero((void *)(*(_QWORD *)v105 + 8 * v112), 8 * (v65 - v108));
              v111 = v109 + v65 - v108;
              *(_DWORD *)(v105 + 8) = v111;
              v110 = *v106;
            }
          }
          v113 = v110 & 0x3F;
          if (v113)
            *(_QWORD *)(*(_QWORD *)v105 + 8 * v111 - 8) &= ~(-1 << v113);
          v114 = *(_QWORD *)v239 + 72 * v104;
          v115 = (int *)(v114 + 64);
          v116 = *(_DWORD *)(v114 + 64) & 0x3F;
          v117 = *(unsigned int *)(v114 + 8);
          if (v116)
            *(_QWORD *)(*(_QWORD *)v114 + 8 * v117 - 8) &= ~(-1 << v116);
          v118 = v117;
          LOBYTE(v119) = v232;
          *v115 = v232;
          v120 = (v232 + 63) >> 6;
          if ((_DWORD)v117 != (_DWORD)v65)
          {
            if (v117 > v65)
            {
              *(_DWORD *)(v114 + 8) = v65;
              v120 = (v232 + 63) >> 6;
              LOBYTE(v119) = v232;
            }
            else
            {
              v121 = v117;
              if (v65 > *(_DWORD *)(v114 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v114, v114 + 16, v65, 8);
                v121 = *(unsigned int *)(v114 + 8);
                v118 = *(_DWORD *)(v114 + 8);
              }
              if (v65 != v117)
                bzero((void *)(*(_QWORD *)v114 + 8 * v121), 8 * (v65 - v117));
              v120 = v118 + v65 - v117;
              *(_DWORD *)(v114 + 8) = v120;
              v119 = *v115;
            }
          }
          v122 = v119 & 0x3F;
          if (v122)
            *(_QWORD *)(*(_QWORD *)v114 + 8 * v120 - 8) &= ~(-1 << v122);
          v58 = a1 + 1720;
        }
        v123 = *(_QWORD *)(*(_QWORD *)v58 + 72 * v104);
        *(_QWORD *)(v123 + 8 * (v88 >> 6)) |= 1 << v87;
      }
      v86 += 8;
    }
    while (v86 != v234);
  }
  sub_1C52A50F4(*(char **)(a1 + 280), *(char **)(a1 + 288));
  v124 = (void **)(a1 + 1880);
  sub_1C49F6D78(a1 + 1880, *(unsigned int *)(a1 + 1728));
  v125 = *(unsigned int *)(a1 + 1728);
  if ((_DWORD)v125)
  {
    v126 = 0;
    v127 = 0;
    v128 = 72 * v125;
    do
    {
      *(_DWORD *)((char *)*v124 + v126) = sub_1C476B7EC(*(_QWORD *)v58 + v127);
      v127 += 72;
      v126 += 4;
    }
    while (v128 != v127);
  }
  if (v246 != v248)
    free(v246);
  v129 = -858993459
       * ((*(_QWORD *)(*(_QWORD *)(a1 + 256) + 16) - *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8)) >> 3)
       - *(_DWORD *)(*(_QWORD *)(a1 + 256) + 32);
  v251[0] = v252;
  v251[1] = (void *)0x1000000000;
  sub_1C4893E04((char *)v251, v129, -1);
  v249[0] = v250;
  v249[1] = (void *)0x1000000000;
  sub_1C5234DEC((char *)v249, v129, 0.0);
  v243 = v245;
  v244 = 0x400000000;
  v246 = v248;
  v247 = 0x1000000000;
  sub_1C5191820((uint64_t)&v246, v129, (uint64_t)&v243);
  if (v243 != v245)
    free(v243);
  v243 = v245;
  v244 = 0x600000000;
  sub_1C4765AA4((char *)&v243, (v129 + 63) >> 6, 0);
  v245[12] = v129;
  v130 = *(char **)(a1 + 280);
  v235 = *(char **)(a1 + 288);
  if (v130 == v235)
  {
    sub_1C52A50F4(v130, v130);
    v9 = 0;
    goto LABEL_337;
  }
  v233 = (_QWORD *)(a1 + 1880);
  v131 = 0;
  do
  {
    v132 = *(_QWORD *)v130;
    v133 = *(_DWORD *)(*(_QWORD *)v130 + 112) - 0x40000000;
    v134 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 8)
                              + 40 * (*(_DWORD *)(*(_QWORD *)(a1 + 256) + 32) + v133)
                              + 20);
    if (byte_1ED800160)
      goto LABEL_189;
    v150 = sub_1C476B7EC(*(_QWORD *)v239+ 72* *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 8)+ 40 * (*(_DWORD *)(*(_QWORD *)(a1 + 256) + 32) + v133)+ 20));
    if (v150 == -1)
      goto LABEL_189;
    LODWORD(v135) = v150;
    while (1)
    {
      v151 = *v237 + 48 * (int)v135;
      v152 = *(unsigned int *)(v151 + 8);
      if (!(_DWORD)v152)
        break;
      v153 = 0;
      v154 = 8 * v152;
      while (!*(_DWORD *)(v132 + 8)
           || !llvm::LiveRange::overlapsFrom(*(_QWORD *)(*(_QWORD *)v151 + v153), v132, *(_QWORD **)v132))
      {
        v153 += 8;
        if (v154 == v153)
          goto LABEL_216;
      }
      LODWORD(v135) = sub_1C476BA0C((_QWORD *)(*(_QWORD *)v239 + 72 * v134), (int)v135 + 1, *(_DWORD *)(*(_QWORD *)v239 + 72 * v134 + 64), 1u);
      if ((_DWORD)v135 == -1)
        goto LABEL_189;
    }
LABEL_216:
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 8)
                            + 40 * (*(_DWORD *)(*(_QWORD *)(a1 + 256) + 32) + v135)
                            + 20) != *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 8)
                                                        + 40
                                                        * (*(_DWORD *)(*(_QWORD *)(a1 + 256) + 32) + v133)
                                                        + 20))
    {
LABEL_189:
      v135 = *(unsigned int *)(*v233 + 4 * v134);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v239 + 72 * v134) + ((v135 >> 3) & 0x1FFFFFF8)) |= 1 << v135;
      v136 = 0;
      *(_DWORD *)(*v233 + 4 * v134) = sub_1C476BA0C((_QWORD *)(*(_QWORD *)(a1 + 1720) + 72 * v134), (int)v135 + 1, *(_DWORD *)(*(_QWORD *)(a1 + 1720) + 72 * v134 + 64), 1u);
      v137 = (int)v135;
    }
    else
    {
      v137 = (int)v135;
      v136 = 1;
    }
    v138 = *v237 + 48 * (int)v137;
    v139 = *(unsigned int *)(v138 + 8);
    if (v139 >= *(unsigned int *)(v138 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(*v237 + 48 * (int)v137, v138 + 16, v139 + 1, 8);
      v139 = *(unsigned int *)(v138 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v138 + 8 * v139) = v132;
    ++*(_DWORD *)(v138 + 8);
    v140 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1600) + v133);
    v141 = *(_QWORD *)(a1 + 256);
    if ((v136 & 1) != 0)
    {
      v142 = *(_DWORD *)(v141 + 32) + v135;
      v143 = *(_QWORD *)(v141 + 8);
      if (v140 <= *(unsigned __int8 *)(v143 + 40 * v142 + 16))
      {
        v144 = *(unsigned int *)(*v231 + 4 * v133);
LABEL_200:
        if (*(_QWORD *)(v143 + 40 * v142 + 8) >= v144)
          goto LABEL_202;
        goto LABEL_201;
      }
    }
    else
    {
      v143 = *(_QWORD *)(v141 + 8);
      v142 = *(_DWORD *)(v141 + 32) + v135;
    }
    *(_BYTE *)(v143 + 40 * v142 + 16) = v140;
    if (!*(_BYTE *)(*(_QWORD *)(v141 + 8) + 40 * (*(_DWORD *)(v141 + 32) + v135) + 20)
      && v140 > *(unsigned __int8 *)(v141 + 60))
    {
      *(_BYTE *)(v141 + 60) = v140;
    }
    v144 = *(unsigned int *)(*(_QWORD *)(a1 + 1640) + 4 * v133);
    v145 = *(_QWORD *)(a1 + 256);
    v146 = *(_DWORD *)(v145 + 32);
    v143 = *(_QWORD *)(v145 + 8);
    v142 = v146 + v135;
    if (v136)
      goto LABEL_200;
LABEL_201:
    *(_QWORD *)(v143 + 40 * v142 + 8) = v144;
LABEL_202:
    *((_DWORD *)v251[0] + v133) = v135;
    v147 = (char *)v246 + 32 * v137;
    v148 = *((unsigned int *)v147 + 2);
    if (v148 >= *((unsigned int *)v147 + 3))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v246 + 32 * v137, (uint64_t)(v147 + 16), v148 + 1, 4);
      v148 = *((unsigned int *)v147 + 2);
    }
    *(_DWORD *)(*(_QWORD *)v147 + 4 * v148) = v133;
    ++*((_DWORD *)v147 + 2);
    v149 = v249[0];
    *((float *)v249[0] + v137) = *(float *)(v132 + 116) + *((float *)v249[0] + v137);
    *((_QWORD *)v243 + (v135 >> 6)) |= 1 << v135;
    v131 |= v133 != (_DWORD)v135;
    v130 += 8;
  }
  while (v130 != v235);
  v155 = *(char **)(a1 + 280);
  v156 = *(char **)(a1 + 288);
  if (v155 != v156)
  {
    v157 = *(char **)(a1 + 280);
    do
    {
      v158 = *(_QWORD *)v157;
      v157 += 8;
      *(_DWORD *)(v158 + 116) = v149[*(_DWORD *)(v158 + 112) - 0x40000000];
    }
    while (v157 != v156);
  }
  sub_1C52A50F4(v155, v156);
  v124 = (void **)(a1 + 1880);
  if ((v131 & 1) != 0)
  {
    v159 = *(unsigned int *)(a1 + 312);
    if ((_DWORD)v159)
    {
      for (m = 0; m != v159; ++m)
      {
        v161 = *((unsigned int *)v251[0] + m);
        if ((_DWORD)v161 != -1 && m != v161)
        {
          FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v230 + 432), v161);
          v164 = *v240 + 80 * m;
          v165 = *(unsigned int *)(v164 + 8);
          if ((_DWORD)v165)
          {
            v166 = *(unint64_t ***)v164;
            do
            {
              v167 = *v166++;
              *v167 = (unint64_t)FixedStack | 4;
              --v165;
            }
            while (v165);
          }
        }
      }
    }
    v168 = *(_QWORD *)(v230 + 328);
    if (v168 != i)
    {
      while (1)
      {
        v169 = v168 + 48;
        v170 = *(_QWORD *)(v168 + 56);
        if (v170 != v168 + 48)
        {
          v171 = v251[0];
          do
          {
            v172 = *(unsigned int *)(v170 + 40);
            if ((_DWORD)v172)
            {
              v173 = 32 * v172;
              v174 = (_DWORD *)(*(_QWORD *)(v170 + 32) + 16);
              do
              {
                if (*((_BYTE *)v174 - 16) == 5)
                {
                  v175 = *v174;
                  if ((v175 & 0x80000000) == 0)
                  {
                    v176 = v171[v175];
                    if (v176 != -1 && v176 != (_DWORD)v175)
                      *v174 = v176;
                  }
                }
                v174 += 8;
                v173 -= 32;
              }
              while (v173);
              if (!v170)
                goto LABEL_249;
            }
            if ((*(_BYTE *)v170 & 4) == 0)
            {
LABEL_249:
              while ((*(_WORD *)(v170 + 44) & 8) != 0)
                v170 = *(_QWORD *)(v170 + 8);
            }
            v170 = *(_QWORD *)(v170 + 8);
          }
          while (v170 != v169);
          v170 = *(_QWORD *)(v168 + 56);
        }
        v253 = v255;
        v254 = 0x400000000;
        if (v170 != v169)
          break;
LABEL_327:
        v168 = *(_QWORD *)(v168 + 8);
        if (v168 == i)
          goto LABEL_328;
      }
      while (2)
      {
        if (dword_1ED800220 != -1 && dword_1ED800220 < 1)
        {
LABEL_317:
          v192 = (_BYTE **)v253;
          v193 = (_BYTE **)&v253[v254];
          if ((_DWORD)v254)
          {
            do
            {
              v194 = *v192;
              v195 = *v192;
              if ((**v192 & 4) == 0)
              {
                v195 = *v192;
                if ((*((_WORD *)v194 + 22) & 8) != 0)
                {
                  v195 = *v192;
                  do
                    v195 = (_BYTE *)*((_QWORD *)v195 + 1);
                  while ((*((_WORD *)v195 + 22) & 8) != 0);
                }
              }
              sub_1C487FE80(*((_QWORD *)v194 + 3) + 40, (uint64_t)v194, *((_QWORD *)v195 + 1));
              ++v192;
            }
            while (v192 != v193);
            v192 = (_BYTE **)v253;
          }
          if (v192 != v255)
            free(v192);
          goto LABEL_327;
        }
        v242 = 0;
        if ((*(unsigned int (**)(_QWORD, uint64_t, char *, uint64_t *))(**(_QWORD **)(a1 + 264) + 128))(*(_QWORD *)(a1 + 264), v170, (char *)&v242 + 4, &v242)&& (HIDWORD(v242) != -1 ? (v179 = HIDWORD(v242) == (_DWORD)v242) : (v179 = 0), v179))
        {
          v186 = v254;
          if (v254 >= (unint64_t)HIDWORD(v254))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v253, (uint64_t)v255, v254 + 1, 8);
            v186 = v254;
          }
          v253[v186] = v170;
          LODWORD(v254) = v254 + 1;
          if (v170)
            goto LABEL_298;
        }
        else
        {
          if (!v170 || (v180 = v170, (*(_BYTE *)v170 & 4) == 0))
          {
            v180 = v170;
            if ((*(_WORD *)(v170 + 44) & 8) != 0)
            {
              v180 = v170;
              do
                v180 = *(_QWORD *)(v180 + 8);
              while ((*(_WORD *)(v180 + 44) & 8) != 0);
            }
          }
          v181 = *(_QWORD *)(v180 + 8);
          v241 = 0;
          v182 = (*(uint64_t (**)(_QWORD, uint64_t, char *, char *))(**(_QWORD **)(a1 + 264) + 72))(*(_QWORD *)(a1 + 264), v170, (char *)&v242 + 4, (char *)&v241 + 4);
          if (v182)
            v183 = v181 == v169;
          else
            v183 = 1;
          if (v183)
          {
            v185 = v170;
          }
          else
          {
            v184 = v182;
            v185 = v170;
            while (**(unsigned __int16 **)(v181 + 16) - 13 <= 4)
            {
              if ((*(_BYTE *)v181 & 4) == 0)
              {
                while ((*(_WORD *)(v181 + 44) & 8) != 0)
                  v181 = *(_QWORD *)(v181 + 8);
              }
              if (!v185 || (*(_BYTE *)v185 & 4) == 0)
              {
                while ((*(_WORD *)(v185 + 44) & 8) != 0)
                  v185 = *(_QWORD *)(v185 + 8);
              }
              v181 = *(_QWORD *)(v181 + 8);
              v185 = *(_QWORD *)(v185 + 8);
              if (v181 == v169)
                goto LABEL_297;
            }
            v187 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t *))(**(_QWORD **)(a1 + 264) + 104))(*(_QWORD *)(a1 + 264), v181, &v242, &v241);
            if (v187)
            {
              v188 = HIDWORD(v242) == (_DWORD)v242 && v184 == v187;
              v189 = !v188 || HIDWORD(v242) == -1;
              if (!v189 && HIDWORD(v241) == (_DWORD)v241)
              {
                RegisterUseOperandIdx = llvm::MachineInstr::findRegisterUseOperandIdx(v181, v184, 1, 0);
                v191 = v254;
                if (RegisterUseOperandIdx != -1)
                {
                  if (v254 >= HIDWORD(v254))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v253, (uint64_t)v255, v254 + 1, 8);
                    v191 = v254;
                  }
                  v253[v191] = v170;
                  v191 = v254 + 1;
                  LODWORD(v254) = v254 + 1;
                }
                if (v191 >= HIDWORD(v254))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v253, (uint64_t)v255, v191 + 1, 8);
                  v191 = v254;
                }
                v253[v191] = v181;
                LODWORD(v254) = v254 + 1;
                if (!v185 || (*(_BYTE *)v185 & 4) == 0)
                {
                  while ((*(_WORD *)(v185 + 44) & 8) != 0)
                    v185 = *(_QWORD *)(v185 + 8);
                }
                v185 = *(_QWORD *)(v185 + 8);
              }
            }
          }
LABEL_297:
          v170 = v185;
          if (v185)
          {
LABEL_298:
            if ((*(_BYTE *)v170 & 4) != 0)
              goto LABEL_302;
          }
        }
        while ((*(_WORD *)(v170 + 44) & 8) != 0)
          v170 = *(_QWORD *)(v170 + 8);
LABEL_302:
        v170 = *(_QWORD *)(v170 + 8);
        if (v170 == v169)
          goto LABEL_317;
        continue;
      }
    }
LABEL_328:
    v196 = *(unsigned int *)(a1 + 1728);
    if ((_DWORD)v196)
    {
      for (n = 0; n != v196; ++n)
      {
        for (ii = *(_DWORD *)(*v233 + 4 * n);
              ii != -1;
              ii = sub_1C476BA0C((_QWORD *)(*(_QWORD *)(a1 + 1720) + 72 * n), ii + 1, *(_DWORD *)(*(_QWORD *)(a1 + 1720) + 72 * n + 64), 1u))
        {
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 8)
                    + 40 * (*(_DWORD *)(*(_QWORD *)(a1 + 256) + 32) + ii)
                    + 8) = -1;
        }
      }
    }
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
LABEL_337:
  if (v243 != v245)
    free(v243);
  v199 = (char *)v246;
  if ((_DWORD)v247)
  {
    v200 = 32 * v247;
    do
    {
      v201 = *(char **)&v199[v200 - 32];
      if (&v199[v200 - 16] != v201)
        free(v201);
      v200 -= 32;
    }
    while (v200);
    v199 = (char *)v246;
  }
  if (v199 != v248)
    free(v199);
  if (v249[0] != v250)
    free(v249[0]);
  if (v251[0] != v252)
    free(v251[0]);
  v202 = *(unsigned int *)(a1 + 1888);
  if ((_DWORD)v202)
    memset(*v124, 255, 4 * v202);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a1 + 280);
  v203 = *(unsigned int *)(a1 + 312);
  if ((_DWORD)v203)
  {
    v204 = *(_QWORD *)(a1 + 304);
    v205 = (_DWORD *)(v204 + 8);
    do
    {
      *v205 = 0;
      v205 += 20;
      --v203;
    }
    while (v203);
    v206 = *(unsigned int *)(a1 + 312);
    if ((_DWORD)v206)
    {
      v207 = 80 * v206;
      do
      {
        v208 = *(void **)(v204 + v207 - 80);
        if ((void *)(v204 + v207 - 64) != v208)
          free(v208);
        v207 -= 80;
      }
      while (v207);
    }
  }
  *(_DWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 1608) = 0;
  *(_DWORD *)(a1 + 1648) = 0;
  v209 = *(unsigned int *)(a1 + 1728);
  if ((_DWORD)v209)
  {
    v210 = *(_QWORD *)(a1 + 1720);
    v211 = 72 * v209;
    do
    {
      v212 = *(void **)(v210 + v211 - 72);
      if ((void *)(v210 + v211 - 56) != v212)
        free(v212);
      v211 -= 72;
    }
    while (v211);
  }
  *(_DWORD *)(a1 + 1728) = 0;
  v213 = *(unsigned int *)(a1 + 1912);
  if ((_DWORD)v213)
  {
    v214 = *(_QWORD *)(a1 + 1904);
    v215 = 72 * v213;
    do
    {
      v216 = *(void **)(v214 + v215 - 72);
      if ((void *)(v214 + v215 - 56) != v216)
        free(v216);
      v215 -= 72;
    }
    while (v215);
  }
  *(_DWORD *)(a1 + 1912) = 0;
  v217 = *(unsigned int *)(a1 + 2072);
  if ((_DWORD)v217)
  {
    v218 = *(_QWORD *)(a1 + 2064);
    v219 = (_DWORD *)(v218 + 8);
    do
    {
      *v219 = 0;
      v219 += 12;
      --v217;
    }
    while (v217);
    v220 = *(unsigned int *)(a1 + 2072);
    if ((_DWORD)v220)
    {
      v221 = 48 * v220;
      do
      {
        v222 = *(void **)(v218 + v221 - 48);
        if ((void *)(v218 + v221 - 32) != v222)
          free(v222);
        v221 -= 48;
      }
      while (v221);
    }
  }
  *(_DWORD *)(a1 + 2072) = 0;
  return v9;
}

void sub_1C52A50F4(char *a1, char *a2)
{
  unint64_t v4;
  const std::nothrow_t *v5;
  unint64_t v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;

  v4 = (a2 - a1) >> 3;
  if (a2 - a1 < 1025)
  {
LABEL_5:
    sub_1C52A5C7C(a1, a2, v4, 0, 0);
  }
  else
  {
    v5 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v6 = (a2 - a1) >> 3;
    while (1)
    {
      v7 = (uint64_t *)operator new(8 * v6, v5);
      if (v7)
        break;
      v8 = v6 > 1;
      v6 >>= 1;
      if (!v8)
        goto LABEL_5;
    }
    v9 = v7;
    sub_1C52A5C7C(a1, a2, v4, v7, v6);
    operator delete(v9);
  }
}

uint64_t sub_1C52A51A8(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(unsigned int *)(result + 8);
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      v6 = 9 * v2;
      v7 = (void **)(*(_QWORD *)result + 8 * v6 - 72);
      v8 = 72 * a2 - 8 * v6;
      v9 = a2;
      v11 = result;
      do
      {
        if (v7 + 2 != *v7)
          free(*v7);
        v7 -= 9;
        v8 += 72;
        LODWORD(a2) = v9;
        result = v11;
      }
      while (v8);
    }
    else
    {
      if (*(unsigned int *)(result + 12) < a2)
      {
        v10 = a2;
        v12 = result;
        sub_1C61B6410(result, a2);
        a2 = v10;
        result = v12;
        v2 = *(unsigned int *)(v12 + 8);
      }
      if (v2 != a2)
      {
        v3 = 9 * v2;
        v4 = *(_QWORD *)result + 72 * v2;
        v5 = 72 * a2 - 8 * v3;
        do
        {
          *(_QWORD *)v4 = v4 + 16;
          *(_QWORD *)(v4 + 8) = 0x600000000;
          *(_DWORD *)(v4 + 64) = 0;
          v4 += 72;
          v5 -= 72;
        }
        while (v5);
      }
    }
    *(_DWORD *)(result + 8) = a2;
  }
  return result;
}

unint64_t sub_1C52A5288(unint64_t result, int **a2, uint64_t a3, char a4)
{
  int **v7;
  int **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int **v12;
  int *v13;
  int *v14;
  int v15;
  uint64_t v16;
  int *v17;
  int **v18;
  int **v19;
  int *v20;
  int *v21;
  int *v22;
  int **v23;
  int *v24;
  int *v25;
  int **v26;
  BOOL v27;
  int *v28;
  int **v29;
  int **v30;
  int *v31;
  int *v32;
  int *v33;
  int *v34;
  int *v35;
  int **v36;
  int *v37;
  int *v38;
  int **v39;
  int **v40;
  int **v41;
  int *v42;
  int *v43;
  int *v44;
  int *v45;
  int v46;
  int *v47;
  int *v48;
  int **v49;
  BOOL v51;
  uint64_t v52;
  int **v53;
  int *v54;
  int *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int **v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  int **v64;
  int *v65;
  int v66;
  int **v67;
  int *v68;
  int v69;
  int **v70;
  uint64_t v71;
  signed int v72;
  uint64_t v73;
  int *v74;
  int **v75;
  int **v76;
  int **v77;
  int *v78;
  unsigned int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int **v84;
  int *v85;
  int *v86;
  int v87;
  int **v88;
  int *v90;
  int *v91;
  int v92;

  v7 = (int **)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (*v37 < **v8)
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3:
        return (unint64_t)sub_1C52A5978(v8, v8 + 1, a2 - 1);
      case 4:
        return (unint64_t)sub_1C52A5BE8(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v39 = v8 + 1;
        v40 = v8 + 2;
        v41 = v8 + 3;
        result = (unint64_t)sub_1C52A5BE8(v8, v8 + 1, v8 + 2, v8 + 3);
        v42 = *(a2 - 1);
        v43 = v8[3];
        if (*v42 < *v43)
        {
          *v41 = v42;
          *(a2 - 1) = v43;
          v44 = *v41;
          v45 = *v40;
          v46 = **v41;
          if (v46 < **v40)
          {
            *v40 = v44;
            *v41 = v45;
            v47 = *v39;
            if (v46 < **v39)
            {
              v8[1] = v44;
              v8[2] = v47;
              v48 = *v8;
              if (v46 < **v8)
              {
                *v8 = v44;
                v8[1] = v48;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v49 = v8 + 1;
          v51 = v8 == a2 || v49 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v51)
            {
              v52 = 8;
              v53 = v8;
              do
              {
                v55 = *v53;
                v54 = v53[1];
                v53 = v49;
                v56 = *v54;
                if (*v54 < *v55)
                {
                  v57 = v52;
                  while (1)
                  {
                    *(int **)((char *)v8 + v57) = v55;
                    v58 = v57 - 8;
                    if (v57 == 8)
                      break;
                    v55 = *(int **)((char *)v8 + v57 - 16);
                    v57 -= 8;
                    if (v56 >= *v55)
                    {
                      v59 = (int **)((char *)v8 + v58);
                      goto LABEL_79;
                    }
                  }
                  v59 = v8;
LABEL_79:
                  *v59 = v54;
                }
                v49 = v53 + 1;
                v52 += 8;
              }
              while (v53 + 1 != a2);
            }
          }
          else if (!v51)
          {
            do
            {
              v91 = *v7;
              v90 = v7[1];
              v7 = v49;
              v92 = *v90;
              if (*v90 < *v91)
              {
                do
                {
                  *v49 = v91;
                  v91 = *(v49 - 2);
                  --v49;
                }
                while (v92 < *v91);
                *v49 = v90;
              }
              v49 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (unint64_t)(v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                v65 = *v64;
                if (2 * v62 + 2 >= v10)
                {
                  v66 = *v65;
                }
                else
                {
                  v66 = *v65;
                  result = *v64[1];
                  if (*v65 <= (int)result)
                    v66 = *v64[1];
                  if (*v65 < (int)result)
                  {
                    v65 = v64[1];
                    ++v64;
                    v63 = 2 * v62 + 2;
                  }
                }
                v67 = &v8[v62];
                v68 = *v67;
                v69 = **v67;
                if (v66 >= v69)
                {
                  do
                  {
                    v70 = v64;
                    *v67 = v65;
                    if (v60 < v63)
                      break;
                    v71 = (2 * v63) | 1;
                    v64 = &v8[v71];
                    v63 = 2 * v63 + 2;
                    v65 = *v64;
                    if (v63 >= v10)
                    {
                      result = *v65;
                      v63 = v71;
                    }
                    else
                    {
                      LODWORD(result) = *v65;
                      v72 = *v64[1];
                      result = *v65 <= v72 ? v72 : result;
                      if (*v65 >= v72)
                      {
                        v63 = v71;
                      }
                      else
                      {
                        v65 = v64[1];
                        ++v64;
                      }
                    }
                    v67 = v70;
                  }
                  while ((int)result >= v69);
                  *v70 = v68;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            do
            {
              v73 = 0;
              v74 = *v8;
              v75 = v8;
              do
              {
                v76 = &v75[v73];
                v79 = (unsigned int *)v76[1];
                v77 = v76 + 1;
                v78 = (int *)v79;
                v80 = (2 * v73) | 1;
                v81 = 2 * v73 + 2;
                if (v81 < v10)
                {
                  result = *v78;
                  if ((int)result < *v77[1])
                  {
                    v78 = v77[1];
                    ++v77;
                    v80 = v81;
                  }
                }
                *v75 = v78;
                v75 = v77;
                v73 = v80;
              }
              while (v80 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v77 == --a2)
              {
                *v77 = v74;
              }
              else
              {
                *v77 = *a2;
                *a2 = v74;
                v82 = (char *)v77 - (char *)v8 + 8;
                if (v82 >= 9)
                {
                  v83 = (((unint64_t)v82 >> 3) - 2) >> 1;
                  v84 = &v8[v83];
                  v85 = *v84;
                  v86 = *v77;
                  v87 = **v77;
                  if (**v84 < v87)
                  {
                    do
                    {
                      v88 = v84;
                      *v77 = v85;
                      if (!v83)
                        break;
                      v83 = (v83 - 1) >> 1;
                      v84 = &v8[v83];
                      v85 = *v84;
                      v77 = v88;
                    }
                    while (**v84 < v87);
                    *v88 = v86;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = (unint64_t)sub_1C52A5978(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C52A5978(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C52A5978(v7 + 1, v12 - 1, a2 - 2);
          sub_1C52A5978(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (unint64_t)sub_1C52A5978(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        v15 = **v7;
        if ((a4 & 1) == 0 && **(v7 - 1) >= v15)
        {
          if (v15 >= **(a2 - 1))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v15 >= **v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v15 >= *v28);
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v15 < *v31);
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v15 >= *v34);
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v15 < *v35);
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*v17 < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*v21 >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*v20 >= v15);
        }
        if (v18 >= v19)
        {
          v8 = &v7[v16];
        }
        else
        {
          v22 = *v19;
          v8 = &v7[v16];
          v23 = v19;
          do
          {
            *v8 = v22;
            *v23 = v17;
            do
            {
              v24 = v8[1];
              ++v8;
              v17 = v24;
            }
            while (*v24 < v15);
            do
            {
              v25 = *--v23;
              v22 = v25;
            }
            while (*v25 >= v15);
          }
          while (v8 < v23);
        }
        v26 = v8 - 1;
        if (v8 - 1 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v18 < v19)
        {
LABEL_32:
          result = sub_1C52A5288(v7, v8 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v27 = sub_1C52A5A00(v7, v8 - 1);
        result = sub_1C52A5A00(v8, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 1;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

int **sub_1C52A5978(int **result, int **a2, int **a3)
{
  int *v3;
  int *v4;
  int v5;
  int v6;
  int *v7;
  int v8;
  int *v9;

  v3 = *a2;
  v4 = *result;
  v5 = **a2;
  v6 = **result;
  v7 = *a3;
  v8 = **a3;
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (**a2 < **result)
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (**a3 >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1C52A5A00(int **a1, int **a2)
{
  uint64_t v4;
  _BOOL8 result;
  int *v6;
  int *v7;
  int **v8;
  int **v9;
  int v10;
  uint64_t v11;
  int *v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int *v21;
  int *v22;
  int *v23;
  int *v24;
  int v25;
  int *v26;
  int *v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*v6 < **a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C52A5978(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C52A5BE8(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      sub_1C52A5BE8(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*v21 < *v22)
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = **v20;
        if (v25 < **v19)
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < **v18)
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < **a1)
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C52A5978(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = **v9;
    if (v14 < **v8)
    {
      v15 = v11;
      while (1)
      {
        *(int **)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(int **)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *v13)
        {
          v17 = (int **)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

int **sub_1C52A5BE8(int **a1, int **a2, int **a3, int **a4)
{
  int **result;
  int *v9;
  int *v10;
  int *v11;

  result = sub_1C52A5978(a1, a2, a3);
  v9 = *a3;
  if (**a4 < **a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (**a3 < **a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (**a2 < **a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

char *sub_1C52A5C7C(char *result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  char *v17;
  char *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;

  if (a3 >= 2)
  {
    v6 = result;
    if (a3 == 2)
    {
      v7 = *((_QWORD *)a2 - 1);
      v8 = *(_QWORD *)result;
      if (*(float *)(v7 + 116) > *(float *)(*(_QWORD *)result + 116))
      {
        *(_QWORD *)result = v7;
        *((_QWORD *)a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v19 = (char *)a4;
      v20 = a3 >> 1;
      v21 = &result[8 * (a3 >> 1)];
      v22 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1C52A5EB4((uint64_t)result, v21, v22, a4);
        v23 = (uint64_t *)&v19[8 * v20];
        result = (char *)sub_1C52A5EB4((uint64_t)&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v23);
        v24 = &v19[8 * a3];
        v25 = v23;
        while (v25 != (uint64_t *)v24)
        {
          v26 = v25;
          v27 = *v25;
          v28 = *(_QWORD *)v19;
          v29 = *(float *)(v27 + 116);
          v30 = *(float *)(*(_QWORD *)v19 + 116);
          if (v29 > v30)
            v28 = v27;
          v19 += 8 * (v29 <= v30);
          v25 = &v26[v29 > v30];
          *(_QWORD *)v6 = v28;
          v6 += 8;
          if (v19 == (char *)v23)
          {
            if (v25 != (uint64_t *)v24)
            {
              v31 = 0;
              if (v29 > v30)
                v32 = 1;
              else
                v32 = 2;
              v33 = &v26[v32 & 1];
              do
              {
                *(_QWORD *)&v6[v31 * 8] = v33[v31];
                ++v31;
              }
              while (&v33[v31] != (uint64_t *)v24);
            }
            return result;
          }
        }
        if (v19 != (char *)v23)
        {
          v34 = 0;
          do
          {
            *(_QWORD *)&v6[v34] = *(_QWORD *)&v19[v34];
            v34 += 8;
          }
          while (&v19[v34] != (char *)v23);
        }
      }
      else
      {
        sub_1C52A5C7C(result, v21, v22, a4, a5);
        sub_1C52A5C7C(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v19, a5);
        return sub_1C52A60AC(v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v19, a5);
      }
    }
    else if (result != a2)
    {
      v10 = result + 8;
      if (result + 8 != a2)
      {
        v11 = 0;
        v12 = result;
        do
        {
          v13 = *(_QWORD *)v12;
          v12 = v10;
          v14 = *(_QWORD *)v10;
          v15 = *(float *)(v14 + 116);
          if (v15 > *(float *)(v13 + 116))
          {
            v16 = v11;
            while (1)
            {
              *(_QWORD *)&result[v16 + 8] = v13;
              if (!v16)
                break;
              v13 = *(_QWORD *)&result[v16 - 8];
              v16 -= 8;
              if (v15 <= *(float *)(v13 + 116))
              {
                v17 = &result[v16 + 8];
                goto LABEL_15;
              }
            }
            v17 = result;
LABEL_15:
            *(_QWORD *)v17 = v14;
          }
          v10 = v12 + 8;
          v11 += 8;
        }
        while (v12 + 8 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C52A5EB4(uint64_t result, _QWORD *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_8:
      *v4 = *(_QWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *(a2 - 1);
      v9 = *(float *)(v8 + 116);
      v10 = *(float *)(*(_QWORD *)result + 116);
      if (v9 <= v10)
        v8 = *(_QWORD *)result;
      *a4 = v8;
      v4 = a4 + 1;
      if (v9 <= v10)
        v6 = (uint64_t)(a2 - 1);
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      v20 = result + 8 * (a3 >> 1);
      sub_1C52A5C7C(result, v20, a3 >> 1, a4, a3 >> 1);
      result = sub_1C52A5C7C(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v21 = (_QWORD *)(v6 + 8 * (a3 >> 1));
      while (v21 != a2)
      {
        v22 = v21;
        v23 = *v21;
        v24 = *(_QWORD *)v6;
        v25 = *(float *)(v23 + 116);
        v26 = *(float *)(*(_QWORD *)v6 + 116);
        if (v25 > v26)
          v24 = v23;
        v21 = &v22[v25 > v26];
        v6 += 8 * (v25 <= v26);
        *v4++ = v24;
        if (v6 == v20)
        {
          if (v21 != a2)
          {
            v27 = 0;
            v28 = &v22[v25 > v26];
            do
            {
              v4[v27] = v28[v27];
              ++v27;
            }
            while (&v28[v27] != a2);
          }
          return result;
        }
      }
      if (v6 != v20)
      {
        v29 = 0;
        do
        {
          v4[v29] = *(_QWORD *)(v6 + v29 * 8);
          ++v29;
        }
        while (v6 + v29 * 8 != v20);
      }
    }
    else if ((_QWORD *)result != a2)
    {
      v11 = result + 8;
      *a4 = *(_QWORD *)result;
      if ((_QWORD *)(result + 8) != a2)
      {
        v12 = 0;
        v13 = a4;
        v14 = a4;
        do
        {
          v16 = *v14++;
          v15 = v16;
          if (*(float *)(*(_QWORD *)v11 + 116) <= *(float *)(v16 + 116))
          {
            *v14 = *(_QWORD *)v11;
          }
          else
          {
            v13[1] = v15;
            v17 = a4;
            if (v13 != a4)
            {
              v18 = v12;
              while (1)
              {
                v17 = (uint64_t *)((char *)a4 + v18);
                v19 = *(uint64_t *)((char *)a4 + v18 - 8);
                if (*(float *)(*(_QWORD *)v11 + 116) <= *(float *)(v19 + 116))
                  break;
                *v17 = v19;
                v18 -= 8;
                if (!v18)
                {
                  v17 = a4;
                  break;
                }
              }
            }
            *v17 = *(_QWORD *)v11;
          }
          v11 += 8;
          v12 += 8;
          v13 = v14;
        }
        while ((_QWORD *)v11 != a2);
      }
    }
  }
  return result;
}

char *sub_1C52A60AC(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v7;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  BOOL v34;
  char *v35;
  char *v36;
  uint64_t v37;
  int64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  BOOL v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  float v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;

  if (a5)
  {
    v7 = a5;
    v10 = result;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4)
        return result;
      v11 = 0;
      v12 = -a4;
      while (1)
      {
        v13 = *(_QWORD *)&v10[v11];
        if (*(float *)(*(_QWORD *)a2 + 116) > *(float *)(v13 + 116))
          break;
        v11 += 8;
        if (__CFADD__(v12++, 1))
          return result;
      }
      v15 = &v10[v11];
      if (-v12 >= v7)
      {
        if (v12 == -1)
        {
          *(_QWORD *)&v10[v11] = *(_QWORD *)a2;
          *(_QWORD *)a2 = v13;
          return result;
        }
        if (v12 <= 0)
          v25 = -v12;
        else
          v25 = 1 - v12;
        v26 = v25 >> 1;
        v20 = &v10[8 * (v25 >> 1) + v11];
        v18 = a3;
        if (a3 != a2)
        {
          v27 = (a3 - a2) >> 3;
          v18 = a2;
          do
          {
            v28 = v27 >> 1;
            v29 = &v18[8 * (v27 >> 1)];
            v31 = *(_QWORD *)v29;
            v30 = v29 + 8;
            v27 += ~(v27 >> 1);
            if (*(float *)(v31 + 116) > *(float *)(*(_QWORD *)v20 + 116))
              v18 = v30;
            else
              v27 = v28;
          }
          while (v27);
        }
        v17 = (v18 - a2) >> 3;
      }
      else
      {
        if (v7 >= 0)
          v16 = v7;
        else
          v16 = v7 + 1;
        v17 = v16 >> 1;
        v18 = &a2[8 * (v16 >> 1)];
        if (v15 == a2)
        {
          v20 = a2;
        }
        else
        {
          v19 = (a2 - v10 - v11) >> 3;
          v20 = &v10[v11];
          do
          {
            v21 = v19 >> 1;
            v22 = &v20[8 * (v19 >> 1)];
            v24 = *(_QWORD *)v22;
            v23 = v22 + 8;
            v19 += ~(v19 >> 1);
            if (*(float *)(*(_QWORD *)v18 + 116) > *(float *)(v24 + 116))
              v19 = v21;
            else
              v20 = v23;
          }
          while (v19);
        }
        v26 = (v20 - v10 - v11) >> 3;
      }
      v32 = v18;
      if (v20 != a2)
      {
        v32 = v20;
        if (a2 != v18)
        {
          if (v20 + 8 == a2)
          {
            v80 = *(_QWORD *)v20;
            v82 = v17;
            v38 = v18 - a2;
            v84 = a6;
            v86 = a7;
            v39 = a3;
            v40 = v26;
            memmove(v20, a2, v18 - a2);
            v26 = v40;
            v17 = v82;
            a6 = v84;
            v15 = &v10[v11];
            a7 = v86;
            a3 = v39;
            v32 = &v20[v38];
            *(_QWORD *)v32 = v80;
          }
          else if (a2 + 8 == v18)
          {
            v41 = *((_QWORD *)v18 - 1);
            v32 = v20 + 8;
            if (v18 - 8 != v20)
            {
              v85 = a6;
              v87 = a7;
              v42 = a3;
              v81 = *((_QWORD *)v18 - 1);
              v83 = v17;
              v43 = v26;
              memmove(v20 + 8, v20, v18 - 8 - v20);
              v41 = v81;
              v17 = v83;
              v26 = v43;
              v15 = &v10[v11];
              a6 = v85;
              a7 = v87;
              a3 = v42;
            }
            *(_QWORD *)v20 = v41;
          }
          else
          {
            v33 = (a2 - v20) >> 3;
            if (v33 == (v18 - a2) >> 3)
            {
              v34 = a2 == v18 || v20 == a2;
              if (!v34)
              {
                v35 = v20 + 8;
                v36 = a2 + 8;
                do
                {
                  v37 = *((_QWORD *)v35 - 1);
                  *((_QWORD *)v35 - 1) = *((_QWORD *)v36 - 1);
                  *((_QWORD *)v36 - 1) = v37;
                  if (v35 == a2)
                    break;
                  v35 += 8;
                  v34 = v36 == v18;
                  v36 += 8;
                }
                while (!v34);
              }
              v32 = a2;
            }
            else
            {
              v44 = (v18 - a2) >> 3;
              v45 = (a2 - v20) >> 3;
              do
              {
                v46 = v45;
                v45 = v44;
                v44 = v46 % v44;
              }
              while (v44);
              if (v45)
              {
                v47 = &v20[8 * v45];
                do
                {
                  v49 = *((_QWORD *)v47 - 1);
                  v47 -= 8;
                  v48 = v49;
                  v50 = &v47[8 * v33];
                  v51 = v47;
                  do
                  {
                    v52 = v50;
                    *(_QWORD *)v51 = *(_QWORD *)v50;
                    v53 = &v50[8 * v33];
                    v54 = __OFSUB__(v33, (v18 - v50) >> 3);
                    v56 = v33 - ((v18 - v50) >> 3);
                    v55 = (v56 < 0) ^ v54;
                    v50 = &v20[8 * v56];
                    if (v55)
                      v50 = v53;
                    v51 = v52;
                  }
                  while (v50 != v47);
                  *(_QWORD *)v52 = v48;
                }
                while (v47 != v20);
              }
              v32 = &v20[8 * ((v18 - a2) >> 3)];
            }
          }
        }
      }
      a4 = -(v26 + v12);
      v57 = v7 - v17;
      if (v26 + v17 >= v7 - (v26 + v17) - v12)
      {
        v63 = v26;
        v64 = -(v26 + v12);
        v65 = v17;
        v66 = v7 - v17;
        v67 = a6;
        v68 = a7;
        v69 = v15;
        result = (char *)sub_1C52A60AC(v32, v18, a3, v64, v66);
        v62 = v69;
        a7 = v68;
        a6 = v67;
        v18 = v20;
        v57 = v65;
        a4 = v63;
        a3 = v32;
      }
      else
      {
        v58 = &v10[v11];
        v59 = a6;
        v60 = a7;
        v61 = a3;
        result = (char *)sub_1C52A60AC(v58, v20, v32, v26, v17);
        a7 = v60;
        a3 = v61;
        a6 = v59;
        v62 = v32;
      }
      v7 = v57;
      v10 = v62;
      a2 = v18;
      if (!v57)
        return result;
    }
    if (a4 <= v7)
    {
      if (v10 != a2)
      {
        v74 = 0;
        do
        {
          *(_QWORD *)&a6[v74] = *(_QWORD *)&v10[v74];
          v74 += 8;
        }
        while (&v10[v74] != a2);
        if (v74)
        {
          v75 = a6;
          while (a2 != a3)
          {
            v76 = *(_QWORD *)a2;
            v77 = *(float *)(*(_QWORD *)a2 + 116);
            v78 = *(float *)(*(_QWORD *)v75 + 116);
            if (v77 <= v78)
              v76 = *(_QWORD *)v75;
            a2 += 8 * (v77 > v78);
            v75 += 8 * (v77 <= v78);
            *(_QWORD *)v10 = v76;
            v10 += 8;
            if (&a6[v74] == v75)
              return result;
          }
          return (char *)memmove(v10, v75, a6 - v75 + v74);
        }
      }
    }
    else if (a2 != a3)
    {
      v70 = 0;
      do
      {
        *(_QWORD *)&a6[v70] = *(_QWORD *)&a2[v70];
        v70 += 8;
      }
      while (&a2[v70] != a3);
      if (v70)
      {
        v71 = &a6[v70];
        v72 = a3 - 8;
        while (a2 != v10)
        {
          v73 = *((_QWORD *)v71 - 1);
          if (*(float *)(v73 + 116) <= *(float *)(*((_QWORD *)a2 - 1) + 116))
          {
            v71 -= 8;
          }
          else
          {
            v73 = *((_QWORD *)a2 - 1);
            a2 -= 8;
          }
          *(_QWORD *)v72 = v73;
          v72 -= 8;
          if (v71 == a6)
            return result;
        }
        if (v71 != a6)
        {
          v79 = 0;
          do
          {
            *(_QWORD *)&v72[v79] = *(_QWORD *)&v71[v79 - 8];
            v79 -= 8;
          }
          while (&v71[v79] != a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C52A65D0()
{
  __n128 v1;
  char v2;
  char *v3;
  int v4;

  v2 = 0;
  v3 = &v2;
  v4 = 1;
  v1.n128_u64[0] = (unint64_t)"Suppress slot sharing during stack coloring";
  v1.n128_u64[1] = 43;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED8000E0, "no-stack-slot-sharing", &v3, &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8000E0, &dword_1C475E000);
  LODWORD(v3) = -1;
  v1.n128_u64[0] = (unint64_t)&v3;
  v4 = 1;
  sub_1C61DF88C((uint64_t)&unk_1ED8001A0, "ssc-dce-limit", &v1, &v4);
  return __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED8001A0, &dword_1C475E000);
}

uint64_t llvm::SwiftErrorValueTracking::getOrCreateVRegDefAt(llvm::SwiftErrorValueTracking *this, unint64_t a2, const llvm::MachineBasicBlock *a3, const llvm::Value *a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t IncompleteVirtualRegister;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[2];

  v7 = a2 | 4;
  v23 = a2 | 4;
  v9 = (uint64_t *)((char *)this + 80);
  v8 = *((_QWORD *)this + 10);
  v10 = *((unsigned int *)this + 24);
  if ((_DWORD)v10)
  {
    LODWORD(v11) = (v10 - 1) & ((a2 >> 9) ^ v7);
    v12 = (uint64_t *)(v8 + 16 * v11);
    v13 = *v12;
    if (v7 == *v12)
      goto LABEL_8;
    v14 = 1;
    while (v13 != -4)
    {
      v15 = v11 + v14++;
      v11 = v15 & (v10 - 1);
      v13 = *(_QWORD *)(v8 + 16 * v11);
      if (v7 == v13)
      {
        v12 = (uint64_t *)(v8 + 16 * v11);
        goto LABEL_8;
      }
    }
  }
  v12 = (uint64_t *)(v8 + 16 * v10);
LABEL_8:
  if (v12 != (uint64_t *)(v8 + 16 * v10))
    return *((unsigned int *)v12 + 2);
  v18 = *((_QWORD *)this + 2);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, *(_QWORD *)(**(_QWORD **)this + 40) + 272, 0);
  v20 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v18 + 424))(v18, v19, 0);
  v21 = *(_QWORD *)(*(_QWORD *)this + 40);
  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v21, "", 0);
  *(_QWORD *)(*(_QWORD *)(v21 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v20 & 0xFFFFFFFFFFFFFFFBLL;
  v22 = *(_QWORD *)(v21 + 8);
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
  *((_DWORD *)sub_1C62152E8(v9, &v23) + 2) = IncompleteVirtualRegister;
  v24[0] = a3;
  v24[1] = a4;
  *((_DWORD *)sub_1C62151E0((uint64_t *)this + 4, v24) + 4) = IncompleteVirtualRegister;
  return IncompleteVirtualRegister;
}

uint64_t llvm::SwiftErrorValueTracking::getOrCreateVRegUseAt(llvm::SwiftErrorValueTracking *this, unint64_t a2, const llvm::MachineBasicBlock *a3, const llvm::Value *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t VReg;
  unint64_t v15;

  v4 = a2 & 0xFFFFFFFFFFFFFFFBLL;
  v15 = a2 & 0xFFFFFFFFFFFFFFFBLL;
  v6 = (uint64_t *)((char *)this + 80);
  v5 = *((_QWORD *)this + 10);
  v7 = *((unsigned int *)this + 24);
  if ((_DWORD)v7)
  {
    LODWORD(v8) = (v7 - 1) & ((a2 >> 9) ^ v4);
    v9 = (uint64_t *)(v5 + 16 * v8);
    v10 = *v9;
    if (v4 == *v9)
      goto LABEL_8;
    v11 = 1;
    while (v10 != -4)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v10 = *(_QWORD *)(v5 + 16 * v8);
      if (v4 == v10)
      {
        v9 = (uint64_t *)(v5 + 16 * v8);
        goto LABEL_8;
      }
    }
  }
  v9 = (uint64_t *)(v5 + 16 * v7);
LABEL_8:
  if (v9 != (uint64_t *)(v5 + 16 * v7))
    return *((unsigned int *)v9 + 2);
  VReg = llvm::SwiftErrorValueTracking::getOrCreateVReg(this, a3, a4);
  *((_DWORD *)sub_1C62152E8(v6, &v15) + 2) = VReg;
  return VReg;
}

void llvm::SwiftErrorValueTracking::setFunction(llvm::SwiftErrorValueTracking *this, llvm::MachineFunction *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;

  v3 = *(_QWORD **)a2;
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 120))(*((_QWORD *)a2 + 2));
  *((_QWORD *)this + 3) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 16) + 104))(*(_QWORD *)(*(_QWORD *)this + 16));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 1768))(*((_QWORD *)this + 2)))
  {
    *((_DWORD *)this + 30) = 0;
    sub_1C6201058((unsigned int *)this + 8);
    sub_1C6201058((unsigned int *)this + 14);
    sub_1C6214EA4((unsigned int *)this + 20);
    *((_QWORD *)this + 13) = 0;
    v4 = *((_QWORD *)this + 1);
    if ((*(_WORD *)(v4 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 1));
      v6 = *((_QWORD *)this + 1);
      v5 = *(_QWORD *)(v4 + 88);
      if ((*(_WORD *)(v6 + 18) & 1) != 0)
        llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 1));
      v4 = v6;
    }
    else
    {
      v5 = *(_QWORD *)(v4 + 88);
    }
    v7 = *(_QWORD *)(v4 + 88) + 40 * *(_QWORD *)(v4 + 96);
    if (v5 != v7)
    {
      v8 = v5;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 112);
        if (v9)
        {
          v10 = *(_DWORD *)(v5 + 32) + 2;
          if (v10 < *(_DWORD *)(v9 + 8))
          {
            v11 = *(_QWORD *)(v9 + 8 * v10 + 40);
            if (v11)
            {
              if (*(char *)(v11 + 19) < 0)
              {
                *((_QWORD *)this + 13) = v5;
                v12 = *((unsigned int *)this + 30);
                if (v12 >= *((unsigned int *)this + 31))
                {
                  v13 = v8;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 112, (uint64_t)this + 128, v12 + 1, 8);
                  v8 = v13;
                  v12 = *((unsigned int *)this + 30);
                }
                *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v12) = v8;
                ++*((_DWORD *)this + 30);
              }
            }
          }
        }
        v5 += 40;
        v8 += 40;
      }
      while (v5 != v7);
    }
    v14 = *((_QWORD *)this + 1);
    v15 = v14 + 72;
    v16 = *(_QWORD *)(v14 + 80);
    if (v16 != v14 + 72)
    {
      do
      {
        v17 = v16 - 24;
        if (!v16)
          v17 = 0;
        v18 = v17 + 40;
        for (i = *(_QWORD *)(v17 + 48); i != v18; i = *(_QWORD *)(i + 8))
        {
          v20 = i - 24;
          if (!i)
            v20 = 0;
          v21 = *(unsigned __int8 *)(v20 + 16);
          if (v21 == 59)
            v22 = v20;
          else
            v22 = 0;
          if (i && v21 == 59 && (*(_WORD *)(v22 + 18) & 0x80) != 0)
          {
            v23 = *((unsigned int *)this + 30);
            if (v23 >= *((unsigned int *)this + 31))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 112, (uint64_t)this + 128, v23 + 1, 8);
              v23 = *((unsigned int *)this + 30);
            }
            *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v23) = v22;
            ++*((_DWORD *)this + 30);
          }
        }
        v16 = *(_QWORD *)(v16 + 8);
      }
      while (v16 != v15);
    }
  }
}

uint64_t llvm::SwiftErrorValueTracking::createEntriesInEntryBlock(uint64_t a1, unsigned __int8 **a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int IncompleteVirtualRegister;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::MachineFunction *v21;
  unsigned __int8 *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  unsigned __int8 **v38;
  int v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 1768))(*(_QWORD *)(a1 + 16)))
    goto LABEL_48;
  v4 = *(_DWORD *)(a1 + 120);
  if (!v4)
    return v4 & 1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 328);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, *(_QWORD *)(**(_QWORD **)a1 + 40) + 272, 0);
  v8 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 424))(v6, v7, 0);
  v9 = *(unsigned int *)(a1 + 120);
  if (!(_DWORD)v9)
  {
LABEL_48:
    LOBYTE(v4) = 0;
    return v4 & 1;
  }
  LOBYTE(v4) = 0;
  v10 = *(uint64_t **)(a1 + 112);
  v11 = &v10[v9];
  v37 = v8 & 0xFFFFFFFFFFFFFFFBLL;
  v12 = v5 + 48;
  v38 = a2;
  do
  {
    v13 = *v10;
    v14 = *(_QWORD *)(a1 + 104);
    if (v14)
      v15 = v14 == v13;
    else
      v15 = 0;
    if (!v15)
    {
      v16 = *(_QWORD *)(*(_QWORD *)a1 + 40);
      IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v16, "", 0);
      v39 = IncompleteVirtualRegister;
      *(_QWORD *)(*(_QWORD *)(v16 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v37;
      v18 = *(_QWORD *)(v16 + 8);
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
      v19 = v5 + 48;
      if (*(_QWORD *)(v5 + 56) != v12)
      {
        v19 = *(_QWORD *)(v5 + 56);
        while (!**(_WORD **)(v19 + 16) || **(_WORD **)(v19 + 16) == 69)
        {
          v19 = *(_QWORD *)(v19 + 8);
          if (v19 == v12)
          {
            v19 = v5 + 48;
            break;
          }
        }
      }
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      v21 = *(llvm::MachineFunction **)(v5 + 32);
      v22 = *a2;
      v40 = v22;
      if (v22)
        llvm::MetadataTracking::track((uint64_t)&v40, v22, 2);
      v23 = *((_QWORD *)v21 + 28);
      if (v23)
        *((_QWORD *)v21 + 28) = *(_QWORD *)v23;
      else
        v23 = sub_1C484358C((uint64_t)v21 + 128, 72, 3);
      v41 = v40;
      if (v40)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v40, v40, (uint64_t)&v41);
        v40 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v23, v21, v20 + 480, &v41, 0);
      if (v41)
        llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
      if (v40)
        llvm::MetadataTracking::untrack((uint64_t)&v40, v40);
      v24 = *(_QWORD *)(v5 + 40);
      *(_QWORD *)(v23 + 24) = v24;
      v25 = *(_QWORD *)(v24 + 32);
      v26 = *(unsigned int *)(v23 + 40);
      if ((_DWORD)v26)
      {
        v29 = *(_QWORD *)(v23 + 32);
        v30 = *(_QWORD *)(v25 + 40);
        v31 = 32 * v26;
        do
        {
          if (!*(_BYTE *)v29)
          {
            v32 = *(unsigned int *)(v29 + 4);
            if ((int)v32 >= 0)
              v33 = (uint64_t *)(*(_QWORD *)(v30 + 272) + 8 * v32);
            else
              v33 = (uint64_t *)(*(_QWORD *)(v30 + 24) + 16 * (v32 & 0x7FFFFFFF) + 8);
            v34 = *v33;
            if (*v33)
            {
              v35 = *(_QWORD *)(v34 + 16);
              *(_QWORD *)(v34 + 16) = v29;
              *(_QWORD *)(v29 + 16) = v35;
              if ((*(_BYTE *)(v29 + 3) & 1) != 0)
              {
                *(_QWORD *)(v29 + 24) = v34;
              }
              else
              {
                *(_QWORD *)(v29 + 24) = 0;
                v33 = (uint64_t *)(v35 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v29 + 16) = v29;
              *(_QWORD *)(v29 + 24) = 0;
            }
            *v33 = v29;
          }
          v29 += 32;
          v31 -= 32;
        }
        while (v31);
      }
      v27 = *(_QWORD *)(v25 + 728);
      if (v27)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v27 + 24))(v27, v23);
      v28 = *(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v23 = v28 | *(_QWORD *)v23 & 7;
      *(_QWORD *)(v23 + 8) = v19;
      *(_QWORD *)(v28 + 8) = v23;
      *(_QWORD *)v19 = *(_QWORD *)v19 & 7 | v23;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      LODWORD(v41) = 0x1000000;
      HIDWORD(v41) = v39;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v23, v21, (const llvm::MachineOperand *)&v41);
      v41 = (unsigned __int8 *)v5;
      v42 = v13;
      *((_DWORD *)sub_1C62151E0((uint64_t *)(a1 + 32), &v41) + 4) = v39;
      LOBYTE(v4) = 1;
      a2 = v38;
    }
    ++v10;
  }
  while (v10 != v11);
  return v4 & 1;
}

void llvm::SwiftErrorValueTracking::propagateVRegs(llvm::SwiftErrorValueTracking *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  const llvm::MachineBasicBlock *v13;
  char v14;
  uint64_t v15;
  unsigned int VReg;
  uint64_t v17;
  const llvm::MachineBasicBlock **v18;
  unsigned __int8 *v19;
  char *v20;
  uint64_t v21;
  BOOL v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::MachineFunction *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  llvm::MachineFunction *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  char *v74;
  uint64_t *v75;
  int IncompleteVirtualRegister;
  BOOL v77;
  unsigned __int8 *v78;
  _BYTE *v79;
  _BYTE *v80;
  uint64_t v81;
  int v82;
  _BYTE v83[64];
  void *__p;
  _QWORD *v85;
  uint64_t v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  _QWORD v94[10];

  v94[8] = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 1768))(*((_QWORD *)this + 2))
    && *((_DWORD *)this + 30))
  {
    __p = 0;
    v85 = 0;
    v86 = 0;
    sub_1C486DB3C((char **)&__p, (uint64_t)this);
    v2 = v85;
    v70 = (char *)__p;
    if (v85 != __p)
    {
      v72 = (uint64_t *)((char *)this + 56);
      v73 = (uint64_t *)((char *)this + 32);
      while (1)
      {
        v3 = *(v2 - 1);
        v74 = (char *)(v2 - 1);
        v4 = *((unsigned int *)this + 30);
        if ((_DWORD)v4)
          break;
LABEL_126:
        v2 = v74;
        if (v74 == v70)
        {
          v2 = __p;
          goto LABEL_128;
        }
      }
      v5 = (uint64_t *)*((_QWORD *)this + 14);
      v75 = &v5[v4];
      v6 = v3 + 48;
      while (1)
      {
        v7 = *v5;
        v79 = (_BYTE *)v3;
        v80 = (_BYTE *)v7;
        v92 = 0;
        v8 = (sub_1C6214EF4(v72, &v79, &v92) & 1) != 0
           ? v92
           : (char *)(*((_QWORD *)this + 7) + 24 * *((unsigned int *)this + 18));
        v79 = (_BYTE *)v3;
        v80 = (_BYTE *)v7;
        v92 = 0;
        v9 = (sub_1C6214EF4(v73, &v79, &v92) & 1) != 0
           ? v92
           : (char *)(*((_QWORD *)this + 4) + 24 * *((unsigned int *)this + 12));
        v10 = *((_QWORD *)this + 7) + 24 * *((unsigned int *)this + 18);
        v77 = v8 != (char *)v10;
        if (v8 != (char *)v10)
          break;
        if (v9 == (char *)(*((_QWORD *)this + 4) + 24 * *((unsigned int *)this + 12)))
        {
          IncompleteVirtualRegister = 0;
LABEL_15:
          v92 = (char *)v94;
          v93 = 0x400000000;
          v79 = v83;
          v80 = v83;
          v81 = 8;
          v82 = 0;
          v11 = *(uint64_t **)(v3 + 64);
          v12 = *(uint64_t **)(v3 + 72);
          if (v11 == v12)
            goto LABEL_32;
          do
          {
            v13 = (const llvm::MachineBasicBlock *)*v11;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v79, *v11);
            if (v14)
            {
              v15 = v7;
              VReg = llvm::SwiftErrorValueTracking::getOrCreateVReg(this, v13, (const llvm::Value *)v7);
              v17 = v93;
              if (v93 >= (unint64_t)HIDWORD(v93))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, (uint64_t)v94, v93 + 1, 16);
                v17 = v93;
              }
              v18 = (const llvm::MachineBasicBlock **)&v92[16 * v17];
              *v18 = v13;
              v18[1] = (const llvm::MachineBasicBlock *)VReg;
              LODWORD(v93) = v93 + 1;
              v7 = v15;
              if (v13 == (const llvm::MachineBasicBlock *)v3 && !v77)
              {
                v88 = (unsigned __int8 *)v3;
                v89 = v15;
                v87 = 0;
                if ((sub_1C6214EF4(v72, &v88, &v87) & 1) != 0)
                  v19 = v87;
                else
                  v19 = (unsigned __int8 *)(*((_QWORD *)this + 7) + 24 * *((unsigned int *)this + 18));
                IncompleteVirtualRegister = *((_DWORD *)v19 + 4);
                v77 = 1;
              }
            }
            ++v11;
          }
          while (v11 != v12);
          if (!(_DWORD)v93)
          {
LABEL_32:
            v22 = 0;
          }
          else
          {
            v20 = v92;
            v21 = 16 * v93;
            while (*((_DWORD *)v20 + 2) == *((_DWORD *)v92 + 2))
            {
              v20 += 16;
              v21 -= 16;
              if (!v21)
              {
                v20 = &v92[16 * v93];
                break;
              }
            }
            v22 = v20 != &v92[16 * v93];
          }
          if (v77 || v22)
          {
            v71 = v7;
            if (*(unsigned __int8 *)(v7 + 16) < 0x1Cu)
            {
              v78 = 0;
            }
            else
            {
              v23 = *(unsigned __int8 **)(v7 + 48);
              v78 = v23;
              if (v23)
                llvm::MetadataTracking::track((uint64_t)&v78, v23, 2);
            }
            v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 16) + 104))(*(_QWORD *)(*(_QWORD *)this + 16));
            v25 = v24;
            if (v22)
            {
              v26 = *((_QWORD *)this + 2);
              v27 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, *(_QWORD *)(**(_QWORD **)this + 40) + 272, 0);
              v28 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v26 + 424))(v26, v27, 0);
              if (!v77)
              {
                v29 = v28;
                v30 = *(_QWORD *)(*(_QWORD *)this + 40);
                IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v30, "", 0);
                *(_QWORD *)(*(_QWORD *)(v30 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v29 & 0xFFFFFFFFFFFFFFFBLL;
                v31 = *(_QWORD *)(v30 + 8);
                if (v31)
                  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
              }
              v32 = v6;
              if (*(_QWORD *)(v3 + 56) != v6)
              {
                v32 = *(_QWORD *)(v3 + 56);
                while (!**(_WORD **)(v32 + 16) || **(_WORD **)(v32 + 16) == 69)
                {
                  v32 = *(_QWORD *)(v32 + 8);
                  if (v32 == v6)
                  {
                    v32 = v6;
                    break;
                  }
                }
              }
              v33 = *(_QWORD *)(v25 + 8);
              v34 = *(llvm::MachineFunction **)(v3 + 32);
              v87 = v78;
              if (v78)
                llvm::MetadataTracking::track((uint64_t)&v87, v78, 2);
              v35 = *((_QWORD *)v34 + 28);
              if (v35)
                *((_QWORD *)v34 + 28) = *(_QWORD *)v35;
              else
                v35 = sub_1C484358C((uint64_t)v34 + 128, 72, 3);
              v88 = v87;
              if (v87)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v87, v87, (uint64_t)&v88);
                v87 = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v35, v34, v33, &v88, 0);
              if (v88)
                llvm::MetadataTracking::untrack((uint64_t)&v88, v88);
              if (v87)
                llvm::MetadataTracking::untrack((uint64_t)&v87, v87);
              v40 = *(_QWORD *)(v3 + 40);
              *(_QWORD *)(v35 + 24) = v40;
              v41 = *(_QWORD *)(v40 + 32);
              v42 = *(unsigned int *)(v35 + 40);
              if ((_DWORD)v42)
              {
                v56 = *(_QWORD *)(v35 + 32);
                v57 = *(_QWORD *)(v41 + 40);
                v58 = 32 * v42;
                do
                {
                  if (!*(_BYTE *)v56)
                  {
                    v59 = *(unsigned int *)(v56 + 4);
                    if ((int)v59 >= 0)
                      v60 = (uint64_t *)(*(_QWORD *)(v57 + 272) + 8 * v59);
                    else
                      v60 = (uint64_t *)(*(_QWORD *)(v57 + 24) + 16 * (v59 & 0x7FFFFFFF) + 8);
                    v61 = *v60;
                    if (*v60)
                    {
                      v62 = *(_QWORD *)(v61 + 16);
                      *(_QWORD *)(v61 + 16) = v56;
                      *(_QWORD *)(v56 + 16) = v62;
                      if ((*(_BYTE *)(v56 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v56 + 24) = v61;
                      }
                      else
                      {
                        *(_QWORD *)(v56 + 24) = 0;
                        v60 = (uint64_t *)(v62 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v56 + 16) = v56;
                      *(_QWORD *)(v56 + 24) = 0;
                    }
                    *v60 = v56;
                  }
                  v56 += 32;
                  v58 -= 32;
                }
                while (v58);
              }
              v43 = *(_QWORD *)(v41 + 728);
              if (v43)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v43 + 24))(v43, v35);
              v44 = *(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v35 = v44 | *(_QWORD *)v35 & 7;
              *(_QWORD *)(v35 + 8) = v32;
              *(_QWORD *)(v44 + 8) = v35;
              *(_QWORD *)v32 = *(_QWORD *)v32 & 7 | v35;
              v89 = 0;
              v90 = 0;
              v91 = 0;
              LODWORD(v88) = 0x1000000;
              HIDWORD(v88) = IncompleteVirtualRegister;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v34, (const llvm::MachineOperand *)&v88);
              if ((_DWORD)v93)
              {
                v45 = v92;
                v46 = &v92[16 * v93];
                do
                {
                  v47 = *(_QWORD *)v45;
                  v48 = *((_DWORD *)v45 + 2);
                  v89 = 0;
                  LODWORD(v88) = 0;
                  HIDWORD(v88) = v48;
                  v90 = 0;
                  v91 = 0;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v34, (const llvm::MachineOperand *)&v88);
                  v89 = 0;
                  v90 = v47;
                  LODWORD(v88) = 4;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v34, (const llvm::MachineOperand *)&v88);
                  v45 += 16;
                }
                while (v45 != v46);
              }
              if (!v77)
              {
                v88 = (unsigned __int8 *)v3;
                v89 = v71;
                *((_DWORD *)sub_1C62151E0(v73, &v88) + 4) = IncompleteVirtualRegister;
              }
            }
            else
            {
              v36 = v6;
              if (*(_QWORD *)(v3 + 56) != v6)
              {
                v36 = *(_QWORD *)(v3 + 56);
                while (!**(_WORD **)(v36 + 16) || **(_WORD **)(v36 + 16) == 69)
                {
                  v36 = *(_QWORD *)(v36 + 8);
                  if (v36 == v6)
                  {
                    v36 = v6;
                    break;
                  }
                }
              }
              v37 = *(_QWORD *)(v24 + 8);
              v38 = *(llvm::MachineFunction **)(v3 + 32);
              v87 = v78;
              if (v78)
                llvm::MetadataTracking::track((uint64_t)&v87, v78, 2);
              v39 = *((_QWORD *)v38 + 28);
              if (v39)
                *((_QWORD *)v38 + 28) = *(_QWORD *)v39;
              else
                v39 = sub_1C484358C((uint64_t)v38 + 128, 72, 3);
              v88 = v87;
              if (v87)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v87, v87, (uint64_t)&v88);
                v87 = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v39, v38, v37 + 912, &v88, 0);
              if (v88)
                llvm::MetadataTracking::untrack((uint64_t)&v88, v88);
              if (v87)
                llvm::MetadataTracking::untrack((uint64_t)&v87, v87);
              v49 = *(_QWORD *)(v3 + 40);
              *(_QWORD *)(v39 + 24) = v49;
              v50 = *(_QWORD *)(v49 + 32);
              v51 = *(unsigned int *)(v39 + 40);
              if ((_DWORD)v51)
              {
                v63 = *(_QWORD *)(v39 + 32);
                v64 = *(_QWORD *)(v50 + 40);
                v65 = 32 * v51;
                do
                {
                  if (!*(_BYTE *)v63)
                  {
                    v66 = *(unsigned int *)(v63 + 4);
                    if ((int)v66 >= 0)
                      v67 = (uint64_t *)(*(_QWORD *)(v64 + 272) + 8 * v66);
                    else
                      v67 = (uint64_t *)(*(_QWORD *)(v64 + 24) + 16 * (v66 & 0x7FFFFFFF) + 8);
                    v68 = *v67;
                    if (*v67)
                    {
                      v69 = *(_QWORD *)(v68 + 16);
                      *(_QWORD *)(v68 + 16) = v63;
                      *(_QWORD *)(v63 + 16) = v69;
                      if ((*(_BYTE *)(v63 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v63 + 24) = v68;
                      }
                      else
                      {
                        *(_QWORD *)(v63 + 24) = 0;
                        v67 = (uint64_t *)(v69 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v63 + 16) = v63;
                      *(_QWORD *)(v63 + 24) = 0;
                    }
                    *v67 = v63;
                  }
                  v63 += 32;
                  v65 -= 32;
                }
                while (v65);
              }
              v52 = *(_QWORD *)(v50 + 728);
              if (v52)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v52 + 24))(v52, v39);
              v53 = *(_QWORD *)v36 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v39 = v53 | *(_QWORD *)v39 & 7;
              *(_QWORD *)(v39 + 8) = v36;
              *(_QWORD *)(v53 + 8) = v39;
              *(_QWORD *)v36 = *(_QWORD *)v36 & 7 | v39;
              v89 = 0;
              v90 = 0;
              v91 = 0;
              LODWORD(v88) = 0x1000000;
              HIDWORD(v88) = IncompleteVirtualRegister;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v38, (const llvm::MachineOperand *)&v88);
              v54 = *((_DWORD *)v92 + 2);
              v89 = 0;
              LODWORD(v88) = 0;
              HIDWORD(v88) = v54;
              v90 = 0;
              v91 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v38, (const llvm::MachineOperand *)&v88);
            }
            v6 = v3 + 48;
            if (v78)
              llvm::MetadataTracking::untrack((uint64_t)&v78, v78);
          }
          else
          {
            v55 = *((_DWORD *)v92 + 2);
            v88 = (unsigned __int8 *)v3;
            v89 = v7;
            *((_DWORD *)sub_1C62151E0(v73, &v88) + 4) = v55;
          }
          if (v80 != v79)
            free(v80);
          if (v92 != (char *)v94)
            free(v92);
        }
        if (++v5 == v75)
          goto LABEL_126;
      }
      IncompleteVirtualRegister = *((_DWORD *)v8 + 4);
      goto LABEL_15;
    }
LABEL_128:
    if (v2)
    {
      v85 = v2;
      operator delete(v2);
    }
  }
}

uint64_t llvm::SwiftErrorValueTracking::preassignVRegs(uint64_t a1, const llvm::MachineBasicBlock *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  llvm::Value **v18;
  uint64_t v19;
  llvm::Value *v20;
  uint64_t v21;
  unint64_t v22;
  llvm::Value *v23;
  llvm::SwiftErrorValueTracking *v24;
  unint64_t v25;
  const llvm::MachineBasicBlock *v26;
  const llvm::Value *v27;
  uint64_t v28;
  uint64_t v29;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 1768))(*(_QWORD *)(a1 + 16));
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 120) && a3 != a4)
    {
      while (1)
      {
        v10 = a3 - 24;
        v11 = a3 ? a3 - 24 : 0;
        v12 = *(unsigned __int8 *)(v11 + 16);
        if ((v12 - 33) <= 0x33 && ((1 << (v12 - 33)) & 0x8000000000041) != 0)
          break;
        if (v12 == 60)
          v22 = v11;
        else
          v22 = 0;
        if (!a3 || v12 != 60)
        {
          if (!a3 || v12 != 61)
          {
            if (v12 == 29)
              v25 = v11;
            else
              v25 = 0;
            if (!a3)
              goto LABEL_26;
            if (v12 != 29)
              goto LABEL_26;
            v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 40) + 56) + 112);
            if (!v28 || (*(char *)(v28 + 31) & 0x80000000) == 0)
              goto LABEL_26;
            v27 = *(const llvm::Value **)(a1 + 104);
            v24 = (llvm::SwiftErrorValueTracking *)a1;
            v26 = a2;
            goto LABEL_35;
          }
          v20 = *(llvm::Value **)(v11 - 32);
          result = llvm::Value::isSwiftError(v20);
          if (!(_DWORD)result)
            goto LABEL_26;
          goto LABEL_25;
        }
        v23 = *(llvm::Value **)(v22 - 32);
        result = llvm::Value::isSwiftError(v23);
        if ((_DWORD)result)
        {
          v24 = (llvm::SwiftErrorValueTracking *)a1;
          v25 = v22;
          v26 = a2;
          v27 = v23;
LABEL_35:
          result = llvm::SwiftErrorValueTracking::getOrCreateVRegUseAt(v24, v25, v26, v27);
        }
LABEL_26:
        a3 = *(_QWORD *)(a3 + 8);
        if (a3 == a4)
          return result;
      }
      v14 = *(unsigned __int8 *)(a3 - 8);
      if (v14 == 84)
      {
        v15 = 0;
      }
      else if (v14 == 39)
      {
        v15 = (*(_DWORD *)(a3 + 56) + 1);
      }
      else
      {
        v15 = 2;
      }
      v16 = *(_DWORD *)(a3 - 4);
      v17 = v16 & 0x7FFFFFF;
      v18 = (llvm::Value **)(v10 - 32 * v17);
      if (v16 < 0 && (v29 = (uint64_t)*(v18 - 1), (v29 & 0xFFFFFFFF0) != 0))
        v19 = (*((_DWORD *)v18 - 3) - *(_DWORD *)((char *)v18 - v29));
      else
        v19 = 0;
      if (v18 == (llvm::Value **)(v10 - 32 * v15 - 32 * v19 - 32))
        goto LABEL_26;
      v20 = 0;
      v21 = 32 * v17 - 32 * v15 - 32 * v19 - 32;
      do
      {
        result = llvm::Value::isSwiftError(*v18);
        if ((_DWORD)result)
        {
          v20 = *v18;
          result = llvm::SwiftErrorValueTracking::getOrCreateVRegUseAt((llvm::SwiftErrorValueTracking *)a1, v11, a2, *v18);
        }
        v18 += 4;
        v21 -= 32;
      }
      while (v21);
      if (!v20)
        goto LABEL_26;
LABEL_25:
      result = llvm::SwiftErrorValueTracking::getOrCreateVRegDefAt((llvm::SwiftErrorValueTracking *)a1, v11, a2, v20);
      goto LABEL_26;
    }
  }
  return result;
}

_OWORD *sub_1C52A799C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6215108(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *result = v12;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C52A7A64(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62153F8(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

unsigned int *sub_1C52A7B1C(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_QWORD **)result;
      v7 = 16 * v2;
      do
      {
        *v6 = -4;
        v6 += 2;
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      v1[4] = v9;
      result = (unsigned int *)operator new(16 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v10 = v1[4];
      if ((_DWORD)v10)
      {
        v11 = 16 * v10;
        do
        {
          *(_QWORD *)result = -4;
          result += 4;
          v11 -= 16;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

uint64_t llvm::SwitchCG::getJumpTableNumCases(_QWORD *a1, int a2, unsigned int a3)
{
  int v3;

  if (a2)
    v3 = *(_DWORD *)(*a1 + 4 * (a2 - 1));
  else
    v3 = 0;
  return (*(_DWORD *)(*a1 + 4 * a3) - v3);
}

void llvm::SwitchCG::SwitchLowering::findJumpTables(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _BOOL4 v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  char *JumpTableRange;
  _OWORD *v35;
  unint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t i;
  unsigned int v43;
  char *v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  unsigned int v49;
  _DWORD *v50;
  int64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  __int128 v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  _OWORD v74[2];
  int v75;
  void *v76[2];
  _BYTE v77[32];
  void *v78[2];
  _BYTE v79[32];
  __int128 v80;
  __int128 v81;
  int v82;
  void *v83[2];
  _QWORD v84[6];

  v84[4] = *MEMORY[0x1E0C80C00];
  if (!(*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 528))(*(_QWORD *)(a1 + 80), *(_QWORD *)(*(_QWORD *)(a3 + 40) + 56)))return;
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 696))(*(_QWORD *)(a1 + 80));
  v13 = (_BYTE *)a2[1] - (_BYTE *)*a2;
  if (v13 < 80)
    return;
  v14 = v13 / 40;
  if (v13 / 40 < v12)
    return;
  v69 = a5;
  v70 = a6;
  v71 = a1;
  v72 = a3;
  v65 = v12 >> 1;
  v66 = v12;
  v67 = v12;
  v83[0] = v84;
  v83[1] = (void *)0x800000000;
  sub_1C4893E04((char *)v83, v14, 0);
  v15 = 0;
  v16 = 0;
  v73 = v14;
  do
  {
    v17 = (uint64_t)*a2 + 40 * v15;
    v18 = *(_QWORD *)(v17 + 8);
    v19 = *(_QWORD *)(v17 + 16);
    v20 = *(unsigned int *)(v19 + 32);
    if (v20 >= 0x41)
    {
      v22 = (void *)operator new[]();
      memcpy(v22, *(const void **)(v19 + 24), ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8);
      v23 = 0;
      v24 = *(unint64_t **)(v18 + 24);
      v25 = (unint64_t)(v20 + 63) >> 6;
      v26 = (unint64_t *)v22;
      v27 = v25;
      do
      {
        v28 = *v24++;
        v29 = *v26 - v28;
        v30 = *v26 < v28;
        v31 = *v26 + ~v28;
        if (v23)
        {
          v23 = v31 >= *v26;
        }
        else
        {
          v31 = v29;
          v23 = v30;
        }
        *v26++ = v31;
        --v27;
      }
      while (v27);
      *((_QWORD *)v22 + (v25 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
      v14 = v73;
    }
    else
    {
      v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
      if (!(_DWORD)v20)
        v21 = 0;
      v22 = (void *)(v21 & (*(_QWORD *)(v19 + 24) - *(_QWORD *)(v18 + 24)));
    }
    DWORD2(v80) = v20;
    *(_QWORD *)&v80 = v22;
    v32 = sub_1C47EE5B8((uint64_t ***)&v80, 0xFFFFFFFFFFFFFFFFLL);
    *((_DWORD *)v83[0] + v15) = v32 + 1;
    if (DWORD2(v80) >= 0x41 && (_QWORD)v80)
      MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
    if (v16)
      *((_DWORD *)v83[0] + v15) += *((_DWORD *)v83[0] + v16 - 1);
    v15 = ++v16;
  }
  while (v14 > v16);
  v33 = v14 - 1;
  JumpTableRange = llvm::SwitchCG::getJumpTableRange(a2, 0, (int)v14 - 1);
  if (((*(uint64_t (**)(_QWORD, uint64_t, _QWORD, char *, uint64_t, uint64_t))(**(_QWORD **)(v71 + 80) + 536))(*(_QWORD *)(v71 + 80), v72, *((unsigned int *)v83[0] + (v14 - 1)), JumpTableRange, v69, v70) & 1) != 0)
  {
    v82 = -1;
    if (llvm::SwitchCG::SwitchLowering::buildJumpTable(v71, (uint64_t *)a2, 0, (int)v14 - 1, v72, a4, (uint64_t)&v80))
    {
      v35 = *a2;
      *v35 = v80;
      v35[1] = v81;
      *((_DWORD *)v35 + 8) = v82;
      v36 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a2[1] - (_BYTE *)*a2) >> 3);
      if (a2[1] == *a2)
      {
        sub_1C52AA1A8(a2, 1 - v36);
      }
      else if (v36 >= 2)
      {
        a2[1] = (char *)*a2 + 40;
      }
      goto LABEL_70;
    }
  }
  if (!*(_DWORD *)(*(_QWORD *)(v71 + 88) + 552))
    goto LABEL_70;
  *(_QWORD *)&v80 = &v81;
  *((_QWORD *)&v80 + 1) = 0x800000000;
  sub_1C4893E04((char *)&v80, v14, 0);
  v78[0] = v79;
  v78[1] = (void *)0x800000000;
  sub_1C4893E04((char *)v78, v14, 0);
  v76[0] = v77;
  v76[1] = (void *)0x800000000;
  sub_1C4893E04((char *)v76, v14, 0);
  v37 = 1;
  *(_DWORD *)(v80 + 4 * v33) = 1;
  *((_DWORD *)v78[0] + v33) = v33;
  *((_DWORD *)v76[0] + v33) = 2;
  v38 = v14;
  v39 = v14 - 2;
  v68 = v67 - 1;
  v40 = 4 * v38;
  do
  {
    v41 = 4 * v39 + 4;
    *(_DWORD *)(v80 + 4 * v39) = *(_DWORD *)(v80 + v41) + 1;
    *((_DWORD *)v78[0] + v39) = v39;
    *((_DWORD *)v76[0] + v39) = *(_DWORD *)((char *)v76[0] + v41) + 2;
    if (v33 > v39)
    {
      for (i = 0; v73 + i - 1 > v39; --i)
      {
        v43 = v73 + i - 1;
        v44 = llvm::SwitchCG::getJumpTableRange(a2, v39, v43);
        if ((_DWORD)v39)
          v45 = *((_DWORD *)v83[0] + (v39 - 1));
        else
          v45 = 0;
        if (!(*(unsigned int (**)(_QWORD, uint64_t, _QWORD, char *, uint64_t, uint64_t))(**(_QWORD **)(v71 + 80)
                                                                                                + 536))(*(_QWORD *)(v71 + 80), v72, (*((_DWORD *)v83[0] + v43) - v45), v44, v69, v70))continue;
        if (i)
        {
          v46 = *(_DWORD *)(v80 + v40 + 4 * i) + 1;
          v47 = *(_DWORD *)((char *)v76[0] + 4 * i + v40);
        }
        else
        {
          v47 = 0;
          v46 = 1;
        }
        v48 = v37 + i >= v65 && v37 + i < v68;
        if (!v48)
          ++v47;
        v49 = *(_DWORD *)(v80 + 4 * v39);
        if (v46 >= v49)
        {
          if (v46 != v49)
            continue;
          v50 = v76[0];
          if (v47 <= *((_DWORD *)v76[0] + v39))
            continue;
        }
        else
        {
          v50 = v76[0];
        }
        *(_DWORD *)(v80 + 4 * v39) = v46;
        *((_DWORD *)v78[0] + v39) = v43;
        v50[v39] = v47;
      }
    }
    ++v37;
    v48 = v39-- <= 0;
  }
  while (!v48);
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = v66;
  do
  {
    v55 = *((_DWORD *)v78[0] + v51);
    v75 = -1;
    if (v55 - v52 + 1 >= v54
      && (v56 = llvm::SwitchCG::SwitchLowering::buildJumpTable(v71, (uint64_t *)a2, v52, v55, v72, a4, (uint64_t)v74),
          v54 = v66,
          v56))
    {
      v57 = (uint64_t)*a2 + 40 * v53++;
      v58 = v74[1];
      *(_OWORD *)v57 = v74[0];
      *(_OWORD *)(v57 + 16) = v58;
      *(_DWORD *)(v57 + 32) = v75;
    }
    else if (v55 >= v52)
    {
      v59 = v53;
      do
      {
        v53 = v59 + 1;
        v60 = (uint64_t)*a2 + 40 * v59;
        v61 = (uint64_t)*a2 + 40 * v52;
        v62 = *(_OWORD *)v61;
        v63 = *(_OWORD *)(v61 + 16);
        *(_QWORD *)(v60 + 32) = *(_QWORD *)(v61 + 32);
        *(_OWORD *)v60 = v62;
        *(_OWORD *)(v60 + 16) = v63;
        ++v52;
        v59 = v53;
      }
      while (v52 <= v55);
    }
    v51 = v55 + 1;
    v52 = v55 + 1;
  }
  while (v73 > v51);
  v64 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a2[1] - (_BYTE *)*a2) >> 3);
  if (v53 <= v64)
  {
    if (v53 < v64)
      a2[1] = (char *)*a2 + 40 * v53;
  }
  else
  {
    sub_1C52AA1A8(a2, v53 - v64);
  }
  if (v76[0] != v77)
    free(v76[0]);
  if (v78[0] != v79)
    free(v78[0]);
  if ((__int128 *)v80 != &v81)
    free((void *)v80);
LABEL_70:
  if (v83[0] != v84)
    free(v83[0]);
}

uint64_t llvm::SwitchCG::SwitchLowering::buildJumpTable(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _BOOL4 v40;
  unint64_t v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _BOOL4 v65;
  unint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  char *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t *v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v87;
  uint64_t v88;
  llvm::BasicBlock *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t *i;
  int v93;
  unint64_t v94;
  int JumpTableIndex;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t **v101;
  uint64_t *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  int v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v114;
  unsigned int v116;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v124;
  int v125;
  void *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  __int16 v130;
  _DWORD v131[2];
  unint64_t v132;
  uint64_t v133;
  uint64_t **v134;
  uint64_t **v135;
  uint64_t v136;
  int v137;
  _BYTE v138[64];
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t *v144;

  v7 = a4;
  v8 = a3;
  v142 = 0;
  v143 = 0;
  v144 = 0;
  v139 = 0;
  v140 = 0;
  v141 = 0;
  if (a3 <= a4)
  {
    v15 = a3;
    do
      *((_DWORD *)sub_1C62156AC((uint64_t)&v139, (uint64_t *)(*a2 + 40 * v15++ + 24)) + 2) = 0;
    while (v15 <= v7);
    v12 = 0;
    v14 = 0;
    v13 = 0;
    v16 = v8;
    v116 = v8;
    while (1)
    {
      v17 = v16;
      v18 = *a2;
      v19 = *a2 + 40 * v16;
      v20 = *(unsigned int *)(v19 + 32);
      v21 = v20 + v13;
      v22 = v20 + v13;
      if (v21 > 0x80000000)
        v22 = 0x80000000;
      v24 = *(_QWORD *)(v19 + 8);
      v23 = *(_QWORD *)(v19 + 16);
      v25 = *(unsigned int *)(v24 + 32);
      v120 = v22;
      v121 = v23;
      v122 = v24;
      if (v25 > 0x40)
      {
        v114 = v25 + 63;
        if (!memcmp(*(const void **)(v24 + 24), *(const void **)(v23 + 24), ((unint64_t)(v25 + 63) >> 3) & 0x3FFFFFF8))v32 = 1;
        else
          v32 = 2;
        v119 = v32 + v14;
        if (v17 != v8)
        {
          v33 = *(_QWORD *)(v18 + 40 * (v17 - 1) + 16);
          v31 = (void *)operator new[]();
          memcpy(v31, *(const void **)(v24 + 24), ((unint64_t)(v25 + 63) >> 3) & 0x3FFFFFF8);
          v34 = 0;
          v35 = *(unint64_t **)(v33 + 24);
          v36 = (unint64_t *)v31;
          v37 = v114 >> 6;
          do
          {
            v38 = *v35++;
            v39 = *v36 - v38;
            v40 = *v36 < v38;
            v41 = *v36 + ~v38;
            if (v34)
            {
              v34 = v41 >= *v36;
            }
            else
            {
              v41 = v39;
              v34 = v40;
            }
            *v36++ = v41;
            --v37;
          }
          while (v37);
          *((_QWORD *)v31 + (v114 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
          goto LABEL_26;
        }
      }
      else
      {
        v26 = v23;
        v27 = *(_QWORD *)(v24 + 24);
        if (v27 == *(_QWORD *)(v26 + 24))
          v28 = 1;
        else
          v28 = 2;
        v119 = v28 + v14;
        if (v17 != v8)
        {
          v29 = v27 - *(_QWORD *)(*(_QWORD *)(v18 + 40 * (v17 - 1) + 16) + 24);
          v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
          if (!(_DWORD)v25)
            v30 = 0;
          v31 = (void *)(v30 & v29);
LABEL_26:
          LODWORD(v135) = v25;
          v134 = (uint64_t **)v31;
          v42 = sub_1C47EE5B8(&v134, 0xFFFFFFFFFFFFFFFFLL);
          if (v135 >= 0x41 && v134)
            MEMORY[0x1CAA32F9C](v134, 0x1000C8000313F17);
          v43 = (char *)v42 - 1;
          if (v42 != (uint64_t *)1)
          {
            v44 = 0;
            do
            {
              if (v12 >= v144)
              {
                v45 = v142;
                v46 = v12 - v142;
                v47 = v46 + 1;
                if ((unint64_t)(v46 + 1) >> 61)
LABEL_127:
                  abort();
                v48 = (char *)v144 - (char *)v142;
                if (((char *)v144 - (char *)v142) >> 2 > v47)
                  v47 = v48 >> 2;
                if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                  v49 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v49 = v47;
                if (v49)
                {
                  if (v49 >> 61)
LABEL_128:
                    sub_1C4764EE4();
                  v50 = (char *)operator new(8 * v49);
                }
                else
                {
                  v50 = 0;
                }
                v51 = (uint64_t *)&v50[8 * v46];
                *v51 = a6;
                v52 = v51 + 1;
                if (v12 != v45)
                {
                  do
                  {
                    v53 = *--v12;
                    *--v51 = v53;
                  }
                  while (v12 != v45);
                  v12 = v142;
                }
                v142 = v51;
                v143 = v52;
                v144 = (uint64_t *)&v50[8 * v49];
                if (v12)
                  operator delete(v12);
                v12 = v52;
              }
              else
              {
                *v12++ = a6;
              }
              v143 = v12;
              ++v44;
            }
            while (v44 != v43);
          }
        }
      }
      v54 = v12;
      v55 = *(unsigned int *)(v121 + 32);
      if (v55 >= 0x41)
      {
        v57 = (void *)operator new[]();
        memcpy(v57, *(const void **)(v121 + 24), ((unint64_t)(v55 + 63) >> 3) & 0x3FFFFFF8);
        v58 = 0;
        v59 = *(unint64_t **)(v122 + 24);
        v60 = (unint64_t)(v55 + 63) >> 6;
        v61 = (unint64_t *)v57;
        v62 = v60;
        do
        {
          v63 = *v59++;
          v64 = *v61 - v63;
          v65 = *v61 < v63;
          v66 = *v61 + ~v63;
          if (v58)
          {
            v58 = v66 >= *v61;
          }
          else
          {
            v66 = v64;
            v58 = v65;
          }
          *v61++ = v66;
          --v62;
        }
        while (v62);
        *((_QWORD *)v57 + (v60 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v55;
      }
      else
      {
        v56 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v55;
        if (!(_DWORD)v55)
          v56 = 0;
        v57 = (void *)(v56 & (*(_QWORD *)(v121 + 24) - *(_QWORD *)(v122 + 24)));
      }
      LODWORD(v135) = v55;
      v134 = (uint64_t **)v57;
      v67 = sub_1C47EE5B8(&v134, 0xFFFFFFFFFFFFFFFFLL);
      if (v135 >= 0x41 && v134)
        MEMORY[0x1CAA32F9C](v134, 0x1000C8000313F17);
      if (v67 == (uint64_t *)-1)
      {
        v12 = v54;
      }
      else
      {
        v68 = 0;
        v69 = (char *)v144;
        do
        {
          v70 = (uint64_t *)(*a2 + 40 * v17 + 24);
          if (v54 >= (uint64_t *)v69)
          {
            v71 = v142;
            v72 = v54 - v142;
            v73 = v72 + 1;
            if ((unint64_t)(v72 + 1) >> 61)
              goto LABEL_127;
            if ((v69 - (char *)v142) >> 2 > v73)
              v73 = (v69 - (char *)v142) >> 2;
            if ((unint64_t)(v69 - (char *)v142) >= 0x7FFFFFFFFFFFFFF8)
              v74 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v74 = v73;
            if (v74)
            {
              if (v74 >> 61)
                goto LABEL_128;
              v75 = (char *)operator new(8 * v74);
            }
            else
            {
              v75 = 0;
            }
            v76 = (uint64_t *)&v75[8 * v72];
            *v76 = *v70;
            v12 = v76 + 1;
            if (v54 != v71)
            {
              do
              {
                v77 = *--v54;
                *--v76 = v77;
              }
              while (v54 != v71);
              v54 = v142;
            }
            v69 = &v75[8 * v74];
            v142 = v76;
            v143 = v12;
            v144 = (uint64_t *)v69;
            if (v54)
              operator delete(v54);
          }
          else
          {
            *v54 = *v70;
            v12 = v54 + 1;
          }
          v143 = v12;
          v54 = v12;
          v78 = v68 == v67;
          v68 = (uint64_t *)((char *)v68 + 1);
        }
        while (!v78);
      }
      v79 = *a2 + 40 * v17;
      v80 = *(unsigned int *)(v79 + 32);
      v81 = sub_1C62156AC((uint64_t)&v139, (uint64_t *)(v79 + 24));
      v82 = *((unsigned int *)v81 + 2);
      v83 = v82 + v80;
      v84 = v82 + v80;
      if (v83 > 0x80000000)
        v84 = 0x80000000;
      *((_DWORD *)v81 + 2) = v84;
      v16 = v17 + 1;
      v8 = v116;
      v7 = a4;
      v10 = (uint64_t *)a1;
      v14 = v119;
      v13 = v120;
      if (v17 + 1 > a4)
      {
        v11 = v140;
        goto LABEL_89;
      }
    }
  }
  v10 = (uint64_t *)a1;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
LABEL_89:
  if (sub_1C4844534(v10[10], (unint64_t **)(*(_QWORD *)(*a2 + 40 * v8 + 8) + 24), *(_QWORD *)(*a2 + 40 * v7 + 16) + 24, v10[12])&& (v14 >= 3 && v11 == 1 || v14 >= 5 && v11 == 2 || v14 >= 6 && v11 == 3))
  {
    v85 = 0;
  }
  else
  {
    v87 = v8;
    v88 = *(_QWORD *)(v10[13] + 8);
    v89 = *(llvm::BasicBlock **)(a5 + 40);
    v90 = *(_QWORD *)(v88 + 312);
    if (v90)
      *(_QWORD *)(v88 + 312) = *(_QWORD *)v90;
    else
      v90 = sub_1C484358C(v88 + 128, 232, 3);
    *(_QWORD *)v90 = 0;
    *(_QWORD *)(v90 + 8) = 0;
    *(_QWORD *)(v90 + 16) = v89;
    *(_DWORD *)(v90 + 24) = -1;
    *(_QWORD *)(v90 + 48) = (v90 + 48) | 4;
    *(_QWORD *)(v90 + 56) = v90 + 48;
    *(_BYTE *)(v90 + 144) = 0;
    *(_OWORD *)(v90 + 64) = 0u;
    *(_OWORD *)(v90 + 80) = 0u;
    *(_OWORD *)(v90 + 96) = 0u;
    *(_OWORD *)(v90 + 112) = 0u;
    *(_OWORD *)(v90 + 121) = 0u;
    *(_QWORD *)(v90 + 160) = 0;
    *(_QWORD *)(v90 + 168) = 0;
    *(_QWORD *)(v90 + 152) = 0;
    *(_BYTE *)(v90 + 176) = 0;
    *(_DWORD *)(v90 + 187) = 0;
    *(_QWORD *)(v90 + 180) = 0;
    *(_QWORD *)(v90 + 192) = 0;
    *(_DWORD *)(v90 + 199) = 0;
    *(_QWORD *)(v90 + 216) = 0;
    *(_QWORD *)(v90 + 224) = 0;
    *(_QWORD *)(v90 + 208) = 0;
    *(_QWORD *)(v90 + 32) = v88;
    *(_QWORD *)(v90 + 40) = v90;
    if (v89)
    {
      *(_QWORD *)(v90 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v89);
      *(_QWORD *)(v90 + 144) = v91;
    }
    v134 = (uint64_t **)v138;
    v135 = (uint64_t **)v138;
    v136 = 8;
    v137 = 0;
    for (i = v142; i != v12; ++i)
    {
      v100 = *i;
      v124 = v100;
      v101 = (uint64_t **)sub_1C477672C((uint64_t)&v134, v100);
      if (v135 == v134)
        v102 = (uint64_t *)((char *)&v136 + 4);
      else
        v102 = &v136;
      if (v101 == &v135[*(unsigned int *)v102])
      {
        v103 = sub_1C62156AC((uint64_t)&v139, &v124);
        (**(void (***)(uint64_t, unint64_t, uint64_t, _QWORD))a1)(a1, v90, v100, *((unsigned int *)v103 + 2));
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v134, v100);
      }
    }
    sub_1C50D6C6C(*(unsigned int **)(v90 + 112), *(unsigned int **)(v90 + 120));
    v93 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 1552))(*(_QWORD *)(a1 + 80));
    v94 = *(_QWORD *)(v88 + 72);
    if (!v94)
    {
      v94 = sub_1C484358C(v88 + 128, 32, 3);
      *(_DWORD *)v94 = v93;
      *(_QWORD *)(v94 + 16) = 0;
      *(_QWORD *)(v94 + 24) = 0;
      *(_QWORD *)(v94 + 8) = 0;
      *(_QWORD *)(v88 + 72) = v94;
    }
    JumpTableIndex = llvm::MachineJumpTableInfo::createJumpTableIndex(v94, (uint64_t)&v142);
    v131[0] = -1;
    v131[1] = JumpTableIndex;
    v132 = v90;
    v133 = 0;
    v96 = *a2;
    v97 = *(_QWORD *)(*a2 + 40 * v87 + 8);
    v98 = *(unsigned int *)(v97 + 32);
    if (v98 > 0x40)
    {
      v99 = (void *)operator new[]();
      memcpy(v99, *(const void **)(v97 + 24), ((unint64_t)(v98 + 63) >> 3) & 0x3FFFFFF8);
      v96 = *a2;
    }
    else
    {
      v99 = *(void **)(v97 + 24);
    }
    v104 = *(_QWORD *)(v96 + 40 * a4 + 16);
    v105 = *(unsigned int *)(v104 + 32);
    if (v105 > 0x40)
    {
      v106 = (void *)operator new[]();
      memcpy(v106, *(const void **)(v104 + 24), ((unint64_t)(v105 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v106 = *(void **)(v104 + 24);
    }
    v107 = *(_DWORD *)(a5 + 20);
    if ((v107 & 0x40000000) != 0)
      v108 = *(uint64_t **)(a5 - 8);
    else
      v108 = (uint64_t *)(a5 - 32 * (v107 & 0x7FFFFFF));
    v109 = *v108;
    v125 = v98;
    v124 = (uint64_t)v99;
    v127 = v105;
    v126 = v106;
    v128 = v109;
    v129 = 0;
    v130 = 0;
    sub_1C62155D0(a1 + 32, (uint64_t)&v124, (uint64_t)v131);
    v110 = *(_QWORD *)(*a2 + 40 * v87 + 8);
    v111 = *(_QWORD *)(*a2 + 40 * a4 + 16);
    v112 = (*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 4;
    *(_DWORD *)a7 = 1;
    *(_QWORD *)(a7 + 8) = v110;
    *(_QWORD *)(a7 + 16) = v111;
    *(_DWORD *)(a7 + 24) = -858993459 * v112 - 1;
    *(_DWORD *)(a7 + 32) = v13;
    sub_1C61996A0((uint64_t)&v124);
    if (v135 != v134)
      free(v135);
    v85 = 1;
  }
  MEMORY[0x1CAA32FB4](v139, 8);
  if (v142)
    operator delete(v142);
  return v85;
}

void llvm::SwitchCG::SwitchLowering::findBitTestClusters(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  int8x8_t *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int8x8_t *v23;
  int8x8_t v24;
  uint8x8_t v25;
  int v26;
  unsigned int v27;
  int64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  void *v40[2];
  void *v41[2];
  __int128 v42;
  int v43;
  int v44;
  void *v45[2];
  _BYTE v46[32];
  void *v47[2];
  _QWORD v48[6];

  v48[4] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1[11] + 552))
  {
    LOBYTE(v40[0]) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1[10] + 32))(a1[10], a1[12], 0);
    v40[1] = 0;
    if (LOBYTE(v40[0]))
    {
      v6 = a1[10];
      if ((LOBYTE(v40[0]) == 1 || *(_QWORD *)(v6 + 8 * LOBYTE(v40[0]) + 96))
        && !*(_BYTE *)(v6 + 390 * LOBYTE(v40[0]) + 4037))
      {
        v36 = a3;
        v8 = sub_1C47A8C74((unsigned __int8 *)v40);
        if ((_DWORD)v7 == 1)
        v9 = a2[1] - *a2;
        v10 = 0xCCCCCCCCCCCCCCCDLL * (v9 >> 3);
        v47[0] = v48;
        v47[1] = (void *)0x800000000;
        sub_1C4893E04((char *)v47, v10, 0);
        v45[0] = v46;
        v45[1] = (void *)0x800000000;
        sub_1C4893E04((char *)v45, v10, 0);
        v38 = v10;
        v11 = v10 - 1;
        *((_DWORD *)v47[0] + v10 - 1) = 1;
        *((_DWORD *)v45[0] + v10 - 1) = v10 - 1;
        v37 = v9;
        if (v9 >= 41)
        {
          v12 = v10 - 2;
          v39 = v8 - 1;
          v13 = v10 - 3;
          v14 = 8 * (v9 >> 3) - 80;
          do
          {
            *((_DWORD *)v47[0] + v12) = *((_DWORD *)v47[0] + v12 + 1) + 1;
            *((_DWORD *)v45[0] + v12) = v12;
            if (v39 + v12 >= v11)
              v15 = v11;
            else
              v15 = v39 + v12;
            while (v15 > v12)
            {
              if (sub_1C4844534(a1[10], (unint64_t **)(*(_QWORD *)(*a2 + 40 * v12 + 8) + 24), *(_QWORD *)(*a2 + 40 * v15 + 16) + 24, a1[12]))
              {
                v16 = (*(_QWORD *)(*(_QWORD *)(a1[13] + 8) + 112) - *(_QWORD *)(*(_QWORD *)(a1[13] + 8) + 104)) >> 3;
                v41[0] = &v42;
                v41[1] = (void *)0x600000000;
                sub_1C4765AA4((char *)v41, (v16 + 63) >> 6, 0);
                v44 = v16;
                v17 = (int8x8_t *)v41[0];
                v18 = *a2 + v14;
                v19 = v13;
                while (!*(_DWORD *)v18)
                {
                  v20 = *(unsigned int *)(*(_QWORD *)(v18 + 24) + 24);
                  *(_QWORD *)((char *)v17 + ((v20 >> 3) & 0x1FFFFFF8)) |= 1 << v20;
                  ++v19;
                  v18 += 40;
                  if (v19 >= v15)
                  {
                    if (!LODWORD(v41[1]))
                      goto LABEL_22;
                    v21 = 0;
                    v22 = 8 * LODWORD(v41[1]);
                    v23 = v17;
                    do
                    {
                      v24 = *v23++;
                      v25 = (uint8x8_t)vcnt_s8(v24);
                      v25.i16[0] = vaddlv_u8(v25);
                      v21 += v25.i32[0];
                      v22 -= 8;
                    }
                    while (v22);
                    if (v21 <= 3)
                    {
LABEL_22:
                      if (v15 == v11)
                        v26 = 0;
                      else
                        v26 = *((_DWORD *)v47[0] + v15 + 1);
                      v27 = v26 + 1;
                      if (v27 < *((_DWORD *)v47[0] + v12))
                      {
                        *((_DWORD *)v47[0] + v12) = v27;
                        *((_DWORD *)v45[0] + v12) = v15;
                      }
                      if (v17 != (int8x8_t *)&v42)
                        free(v17);
                      goto LABEL_29;
                    }
                    break;
                  }
                }
                if (v17 != (int8x8_t *)&v42)
                  free(v17);
                break;
              }
LABEL_29:
              --v15;
            }
            --v13;
            v14 -= 40;
          }
          while (v12-- > 0);
        }
        if (v37 < 1)
        {
          v31 = 0;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          do
          {
            v32 = *((_DWORD *)v45[0] + v29);
            v43 = -1;
            if (llvm::SwitchCG::SwitchLowering::buildBitTests(a1, a2, v30, v32, v36, (uint64_t)v41))
            {
              v33 = *a2 + 40 * v31++;
              *(_OWORD *)v33 = *(_OWORD *)v41;
              *(_OWORD *)(v33 + 16) = v42;
              *(_DWORD *)(v33 + 32) = v43;
            }
            else
            {
              v34 = v32 - v30 + 1;
              memmove((void *)(*a2 + 40 * v31), (const void *)(*a2 + 40 * v29), 40 * v34);
              v31 += v34;
            }
            v29 = v32 + 1;
            v30 = v32 + 1;
          }
          while (v38 > v29);
        }
        v35 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3);
        if (v31 <= v35)
        {
          if (v31 < v35)
            a2[1] = *a2 + 40 * v31;
        }
        else
        {
          sub_1C52AA1A8((void **)a2, v31 - v35);
        }
        if (v45[0] != v46)
          free(v45[0]);
        if (v47[0] != v48)
          free(v47[0]);
      }
    }
  }
}

uint64_t llvm::SwitchCG::SwitchLowering::buildBitTests(uint64_t *a1, uint64_t *a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  int8x8_t *v12;
  unsigned int v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int8x8_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  void *v34;
  uint64_t v35;
  BOOL v36;
  char v37;
  char v38;
  __n128 v40;
  unsigned int v41;
  void *v42;
  unsigned int v43;
  unint64_t v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _BOOL4 v53;
  unint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  _BOOL8 v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _BOOL4 v83;
  unint64_t v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _BOOL8 v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _BOOL4 v97;
  unint64_t v98;
  _BOOL4 v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  unsigned int v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t *v112;
  char *v113;
  uint64_t v114;
  llvm::BasicBlock *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  char *v120;
  _OWORD *v121;
  char *v122;
  __int128 v123;
  unint64_t v124;
  int64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  unsigned int v130;
  char v131;
  unsigned int v132;
  uint64_t v133;
  unsigned int v134;
  char *v136;
  unsigned int v137;
  uint64_t *v138;
  unsigned int v140;
  _QWORD v141[3];
  int v142;
  unsigned int v143;
  void *__s2;
  unsigned int v145;
  void *v146;
  unsigned int v147;
  void *__dst;
  unsigned int v149;
  void *v150;
  unsigned int v151;
  void *__src;
  unsigned int v153;
  void *v154;
  uint64_t v155;
  _BYTE v156[96];
  int8x8_t *v157;
  uint64_t v158;
  _DWORD v159[14];
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  if (a3 == a4)
    return 0;
  v8 = a4;
  v9 = a3;
  v11 = (*(_QWORD *)(*(_QWORD *)(a1[13] + 8) + 112) - *(_QWORD *)(*(_QWORD *)(a1[13] + 8) + 104)) >> 3;
  v157 = (int8x8_t *)v159;
  v158 = 0x600000000;
  sub_1C4765AA4((char *)&v157, (v11 + 63) >> 6, 0);
  v159[12] = v11;
  v12 = v157;
  if (v9 <= v8)
  {
    v13 = 0;
    v14 = v8 - (unint64_t)v9 + 1;
    v15 = (_QWORD *)(*a2 + 40 * v9 + 16);
    do
    {
      v16 = *(unsigned int *)(v15[1] + 24);
      *(_QWORD *)((char *)v12 + ((v16 >> 3) & 0x1FFFFFF8)) |= 1 << v16;
      if (*(v15 - 1) == *v15)
        v17 = 1;
      else
        v17 = 2;
      v13 += v17;
      v15 += 5;
      --v14;
    }
    while (v14);
  }
  else
  {
    v13 = 0;
  }
  v134 = v8;
  if ((_DWORD)v158)
  {
    v18 = 0;
    v19 = 8 * v158;
    do
    {
      v20 = *v12++;
      v21 = (uint8x8_t)vcnt_s8(v20);
      v21.i16[0] = vaddlv_u8(v21);
      v18 += v21.i32[0];
      v19 -= 8;
    }
    while (v19);
  }
  else
  {
    v18 = 0;
  }
  v22 = *a2;
  v23 = *(_QWORD *)(*a2 + 40 * v9 + 8);
  v153 = *(_DWORD *)(v23 + 32);
  if (v153 > 0x40)
  {
    __src = (void *)operator new[]();
    memcpy(__src, *(const void **)(v23 + 24), (((unint64_t)v153 + 63) >> 3) & 0x3FFFFFF8);
    v22 = *a2;
  }
  else
  {
    __src = *(void **)(v23 + 24);
  }
  v24 = *(_QWORD *)(v22 + 40 * v8 + 16);
  v151 = *(_DWORD *)(v24 + 32);
  if (v151 > 0x40)
  {
    v150 = (void *)operator new[]();
    memcpy(v150, *(const void **)(v24 + 24), (((unint64_t)v151 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v150 = *(void **)(v24 + 24);
  }
  if (sub_1C4844534(a1[10], (unint64_t **)&__src, (uint64_t)&v150, a1[12]))
  {
    if (v13 >= 3 && v18 == 1 || v13 >= 5 && v18 == 2 || (v6 = 0, v13 >= 6) && v18 == 3)
    {
      v132 = v9;
      v133 = a6;
      v149 = 1;
      __dst = 0;
      v147 = 1;
      v146 = 0;
      LOBYTE(v154) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1[10] + 32))(a1[10], a1[12], 0);
      v26 = sub_1C47A8C74((unsigned __int8 *)&v154);
      if ((_DWORD)v25 == 1)
      v27 = a2;
      if (v9 + 1 > v8)
      {
LABEL_48:
        v38 = 1;
      }
      else
      {
        v28 = 40 * (v9 + 1);
        v29 = v8 - (unint64_t)(v9 + 1) + 1;
        while (1)
        {
          v30 = *a2 + v28;
          v31 = *(_QWORD *)(v30 + 8);
          v32 = *(_QWORD *)(v30 - 24);
          v145 = *(_DWORD *)(v32 + 32);
          if (v145 > 0x40)
          {
            __s2 = (void *)operator new[]();
            memcpy(__s2, *(const void **)(v32 + 24), (((unint64_t)v145 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            __s2 = *(void **)(v32 + 24);
          }
          llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
          v33 = v145;
          v34 = __s2;
          v145 = 0;
          v35 = *(unsigned int *)(v31 + 32);
          if (v35 > 0x40)
            v36 = memcmp(*(const void **)(v31 + 24), __s2, ((unint64_t)(v35 + 63) >> 3) & 0x3FFFFFF8) == 0;
          else
            v36 = *(_QWORD *)(v31 + 24) == (_QWORD)__s2;
          v37 = v36;
          if (v33 >= 0x41)
          {
            if (v34)
            {
              MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
              if (v145 >= 0x41)
              {
                if (__s2)
                  MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
              }
            }
          }
          if ((v37 & 1) == 0)
            break;
          v28 += 40;
          if (!--v29)
            goto LABEL_48;
        }
        v38 = 0;
      }
      v138 = a1;
      if (sub_1C49591DC((llvm::APInt *)&__src) && sub_1C4DA9220((llvm::APInt *)&v150, v26))
      {
        v41 = v153;
        LODWORD(v155) = v153;
        if (v153 >= 0x41)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v154, 0, 0);
          v42 = v154;
          v41 = v155;
        }
        else
        {
          v42 = 0;
        }
        __dst = v42;
        v149 = v41;
        if (v151 > 0x40)
        {
          llvm::APInt::reallocate((uint64_t)&v146, v151);
          if (v147 <= 0x40)
          {
            v131 = 0;
            v146 = v150;
          }
          else
          {
            memcpy(v146, v150, (((unint64_t)v147 + 63) >> 3) & 0x3FFFFFF8);
            v131 = 0;
          }
        }
        else
        {
          v131 = 0;
          v146 = v150;
          v147 = v151;
        }
      }
      else
      {
        v131 = v38;
        if (v153 > 0x40)
        {
          llvm::APInt::reallocate((uint64_t)&__dst, v153);
          if (v149 <= 0x40)
            __dst = __src;
          else
            memcpy(__dst, __src, (((unint64_t)v149 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          __dst = __src;
          v149 = v153;
        }
        v43 = v151;
        if (v151 >= 0x41)
        {
          v46 = v151 + 63;
          v45 = (void *)operator new[]();
          memcpy(v45, v150, (v46 >> 3) & 0x3FFFFFF8);
          v47 = 0;
          v48 = (unint64_t *)__src;
          v49 = (unint64_t *)v45;
          v50 = v46 >> 6;
          do
          {
            v51 = *v48++;
            v52 = *v49 - v51;
            v53 = *v49 < v51;
            v54 = *v49 + ~v51;
            if (v47)
            {
              v47 = v54 >= *v49;
            }
            else
            {
              v54 = v52;
              v47 = v53;
            }
            *v49++ = v54;
            --v50;
          }
          while (v50);
          *((_QWORD *)v45 + (v46 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v43;
        }
        else
        {
          if (v151)
            v44 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v151;
          else
            v44 = 0;
          v45 = (void *)(v44 & ((_BYTE *)v150 - (_BYTE *)__src));
        }
        v146 = v45;
        v147 = v43;
      }
      v143 = 0;
      if (v9 <= v8)
      {
        v136 = 0;
        v56 = 0;
        v55 = 0;
        v137 = v8;
        do
        {
          v57 = (v56 - v55) / 24;
          v58 = 0;
          if (v56 != v55)
          {
            v59 = 1;
            do
            {
              if (*(_QWORD *)&v55[24 * v58 + 8] == *(_QWORD *)(*v27 + 40 * v9 + 24))
                break;
              v58 = v59;
            }
            while (v57 > v59++);
          }
          if (v57 == v58)
          {
            v61 = *(_QWORD *)(*v27 + 40 * v9 + 24);
            if (v56 >= v136)
            {
              v62 = v57 + 1;
              if (v57 + 1 > 0xAAAAAAAAAAAAAAALL)
                abort();
              if (0x5555555555555556 * ((v136 - v55) >> 3) > v62)
                v62 = 0x5555555555555556 * ((v136 - v55) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v136 - v55) >> 3) >= 0x555555555555555)
                v63 = 0xAAAAAAAAAAAAAAALL;
              else
                v63 = v62;
              if (v63)
              {
                if (v63 > 0xAAAAAAAAAAAAAAALL)
                  sub_1C4764EE4();
                v64 = (char *)operator new(24 * v63);
              }
              else
              {
                v64 = 0;
              }
              v65 = &v64[24 * v57];
              *(_QWORD *)v65 = 0;
              *((_QWORD *)v65 + 1) = v61;
              *((_QWORD *)v65 + 2) = 0;
              if (v56 == v55)
              {
                v67 = v56;
                v55 = &v64[24 * v57];
              }
              else
              {
                v66 = &v64[24 * v57];
                do
                {
                  v40 = *(__n128 *)(v56 - 24);
                  *((_QWORD *)v66 - 1) = *((_QWORD *)v56 - 1);
                  *(__n128 *)(v66 - 24) = v40;
                  v66 -= 24;
                  v56 -= 24;
                }
                while (v56 != v55);
                v67 = v55;
                v55 = v66;
              }
              v136 = &v64[24 * v63];
              v56 = v65 + 24;
              if (v67)
                operator delete(v67);
            }
            else
            {
              *(_QWORD *)v56 = 0;
              *((_QWORD *)v56 + 1) = v61;
              *((_QWORD *)v56 + 2) = 0;
              v56 += 24;
            }
          }
          v68 = *v27;
          v69 = *(_QWORD *)(*v27 + 40 * v9 + 8);
          v70 = *(unsigned int *)(v69 + 32);
          v140 = v9;
          if (v70 >= 0x41)
          {
            v76 = (uint64_t *)operator new[]();
            memcpy(v76, *(const void **)(v69 + 24), ((unint64_t)(v70 + 63) >> 3) & 0x3FFFFFF8);
            v77 = 0;
            v78 = 0;
            v72 = (char *)__dst;
            v79 = (unint64_t)(v70 + 63) >> 6;
            do
            {
              v80 = v76[v77];
              v81 = *(_QWORD *)&v72[v77 * 8];
              v82 = v80 - v81;
              v83 = v80 < v81;
              v84 = v80 + ~v81;
              v85 = v84 >= v80;
              if (v78)
              {
                v78 = v85;
              }
              else
              {
                v84 = v82;
                v78 = v83;
              }
              v76[v77++] = v84;
            }
            while (v79 != v77);
            v76[(v79 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v70;
            v75 = *v76;
            MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
            v68 = *v27;
            v8 = v137;
            v9 = v140;
          }
          else
          {
            v71 = *(_QWORD *)(v69 + 24);
            v72 = (char *)__dst;
            v73 = v71 - (_DWORD)__dst;
            v74 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v70;
            if (!(_DWORD)v70)
              LODWORD(v74) = 0;
            LODWORD(v75) = v74 & v73;
          }
          v86 = *(_QWORD *)(v68 + 40 * v9 + 16);
          v87 = *(unsigned int *)(v86 + 32);
          if (v87 >= 0x41)
          {
            v90 = (_QWORD *)operator new[]();
            memcpy(v90, *(const void **)(v86 + 24), ((unint64_t)(v87 + 63) >> 3) & 0x3FFFFFF8);
            v91 = 0;
            v92 = 0;
            v93 = (unint64_t)(v87 + 63) >> 6;
            do
            {
              v94 = v90[v91];
              v95 = *(_QWORD *)&v72[v91 * 8];
              v96 = v94 - v95;
              v97 = v94 < v95;
              v98 = v94 + ~v95;
              v99 = v98 >= v94;
              if (v92)
              {
                v92 = v99;
              }
              else
              {
                v98 = v96;
                v92 = v97;
              }
              v90[v91++] = v98;
            }
            while (v93 != v91);
            v90[(v93 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v87;
            v89 = *v90;
            MEMORY[0x1CAA32F9C](v90, 0x1000C8000313F17);
            v27 = a2;
            v68 = *a2;
            v8 = v137;
            v9 = v140;
          }
          else
          {
            v88 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v87;
            if (!(_DWORD)v87)
              v88 = 0;
            v89 = v88 & (*(_QWORD *)(v86 + 24) - (_QWORD)v72);
          }
          *(_QWORD *)&v55[24 * v58] |= 0xFFFFFFFFFFFFFFFFLL >> ~(v89 - v75) << v75;
          v100 = &v55[24 * v58];
          v101 = *((unsigned int *)v100 + 5);
          *((_DWORD *)v100 + 4) += v89 - v75 + 1;
          v102 = v68 + 40 * v9;
          v103 = *(unsigned int *)(v102 + 32);
          v104 = v101 + v103;
          v105 = v101 + v103;
          if (v104 > 0x80000000)
            v105 = 0x80000000;
          *((_DWORD *)v100 + 5) = v105;
          v106 = *(unsigned int *)(v102 + 32);
          v107 = v143 + v106;
          v108 = v143 + v106;
          if (v107 > 0x80000000)
            v108 = 0x80000000;
          v143 = v108;
          ++v9;
        }
        while (v9 <= v8);
      }
      else
      {
        v55 = 0;
        v56 = 0;
      }
      v109 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v56 - v55) >> 3));
      v154 = v156;
      v40.n128_u64[0] = 0x300000000;
      v155 = 0x300000000;
      if (v56 == v55)
        v110 = 0;
      else
        v110 = v109;
      sub_1C52AA500((uint64_t)v55, (unint64_t)v56, v110, 1, v40);
      if (v56 != v55)
      {
        v113 = v55;
        do
        {
          v114 = *(_QWORD *)(v138[13] + 8);
          v115 = *(llvm::BasicBlock **)(a5 + 40);
          v116 = *(_QWORD *)(v114 + 312);
          if (v116)
            *(_QWORD *)(v114 + 312) = *(_QWORD *)v116;
          else
            v116 = sub_1C484358C(v114 + 128, 232, 3);
          *(_QWORD *)v116 = 0;
          *(_QWORD *)(v116 + 8) = 0;
          *(_QWORD *)(v116 + 16) = v115;
          *(_DWORD *)(v116 + 24) = -1;
          *(_QWORD *)(v116 + 48) = (v116 + 48) | 4;
          *(_QWORD *)(v116 + 56) = v116 + 48;
          *(_BYTE *)(v116 + 144) = 0;
          *(_OWORD *)(v116 + 64) = 0u;
          *(_OWORD *)(v116 + 80) = 0u;
          *(_OWORD *)(v116 + 96) = 0u;
          *(_OWORD *)(v116 + 112) = 0u;
          *(_OWORD *)(v116 + 121) = 0u;
          *(_QWORD *)(v116 + 160) = 0;
          *(_QWORD *)(v116 + 168) = 0;
          *(_QWORD *)(v116 + 152) = 0;
          *(_BYTE *)(v116 + 176) = 0;
          *(_DWORD *)(v116 + 187) = 0;
          *(_QWORD *)(v116 + 180) = 0;
          *(_QWORD *)(v116 + 192) = 0;
          *(_DWORD *)(v116 + 199) = 0;
          *(_QWORD *)(v116 + 216) = 0;
          *(_QWORD *)(v116 + 224) = 0;
          *(_QWORD *)(v116 + 208) = 0;
          *(_QWORD *)(v116 + 32) = v114;
          *(_QWORD *)(v116 + 40) = v116;
          if (v115)
          {
            *(_QWORD *)(v116 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v115);
            *(_QWORD *)(v116 + 144) = v117;
          }
          v118 = *((_QWORD *)v113 + 1);
          v119 = *((_DWORD *)v113 + 5);
          v141[0] = *(_QWORD *)v113;
          v141[1] = v116;
          v141[2] = v118;
          v142 = v119;
          v120 = (char *)v154;
          if (v155 >= HIDWORD(v155))
          {
            v124 = v155 + 1;
            if (v154 <= v141 && (char *)v154 + 32 * v155 > (char *)v141)
            {
              v125 = (char *)v141 - (_BYTE *)v154;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, (uint64_t)v156, v124, 32);
              v120 = (char *)v154;
              v121 = (char *)v154 + v125;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, (uint64_t)v156, v124, 32);
              v121 = v141;
              v120 = (char *)v154;
            }
          }
          else
          {
            v121 = v141;
          }
          v122 = &v120[32 * v155];
          v123 = v121[1];
          *(_OWORD *)v122 = *v121;
          *((_OWORD *)v122 + 1) = v123;
          LODWORD(v155) = v155 + 1;
          v113 += 24;
        }
        while (v113 != v56);
      }
      v111 = *(_DWORD *)(a5 + 20);
      if ((v111 & 0x40000000) != 0)
        v112 = *(uint64_t **)(a5 - 8);
      else
        v112 = (uint64_t *)(a5 - 32 * (v111 & 0x7FFFFFF));
      v126 = *v112;
      LODWORD(v141[0]) = -1;
      sub_1C6215654(v138 + 7, (uint64_t *)&__dst, (uint64_t *)&v146, v126, (int *)v141, 1, 0, v131, (uint64_t)&v154, (int *)&v143);
      v127 = *(_QWORD *)(*a2 + 40 * v132 + 8);
      v128 = *(_QWORD *)(*a2 + 40 * v134 + 16);
      v129 = -1431655765 * ((unint64_t)(v138[8] - v138[7]) >> 6) - 1;
      v130 = v143;
      *(_DWORD *)v133 = 2;
      *(_QWORD *)(v133 + 8) = v127;
      *(_QWORD *)(v133 + 16) = v128;
      *(_DWORD *)(v133 + 24) = v129;
      *(_DWORD *)(v133 + 32) = v130;
      if (v154 != v156)
        free(v154);
      if (v55)
        operator delete(v55);
      if (v147 >= 0x41 && v146)
        MEMORY[0x1CAA32F9C](v146, 0x1000C8000313F17);
      if (v149 >= 0x41 && __dst)
        MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
      v6 = 1;
    }
  }
  else
  {
    v6 = 0;
  }
  if (v151 >= 0x41 && v150)
    MEMORY[0x1CAA32F9C](v150, 0x1000C8000313F17);
  if (v153 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v157 != (int8x8_t *)v159)
    free(v157);
  return v6;
}

void llvm::SwitchCG::sortAndRangeify(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  const void *v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL4 v32;
  unint64_t v33;
  _BOOL4 v34;
  int v35;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;

  v1 = a1;
  v2 = *a1;
  v3 = v1[1];
  v4 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v3 - v2) >> 3));
  if (v3 == v2)
    v5 = 0;
  else
    v5 = v4;
  sub_1C52ABAA0(v2, v3, v5, 1);
  v6 = (char *)*v1;
  v7 = 0xCCCCCCCCCCCCCCCDLL * ((v1[1] - *v1) >> 3);
  v8 = -858993459 * ((v1[1] - *v1) >> 3);
  if (-858993459 * ((v1[1] - *v1) >> 3))
  {
    v9 = 0;
    v10 = 0;
    v45 = -858993459 * ((v1[1] - *v1) >> 3);
    while (1)
    {
      v11 = (char *)*v1;
      if (v10 && (v12 = v10 - 1, *(_QWORD *)&v11[40 * v10 - 16] == *(_QWORD *)&v11[40 * v9 + 24]))
      {
        v18 = *(_QWORD *)&v11[40 * v9 + 8];
        v19 = *(unsigned int *)(v18 + 32);
        if (v19 >= 0x41)
        {
          v21 = v1;
          v22 = *(_QWORD *)&v11[40 * v9 + 8];
          v23 = (uint64_t *)operator new[]();
          v46 = v22;
          v24 = *(const void **)(v22 + 24);
          v1 = v21;
          memcpy(v23, v24, ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8);
          v25 = 0;
          v26 = 0;
          v27 = *(_QWORD *)(*(_QWORD *)(*v21 + 40 * v12 + 16) + 24);
          v28 = (unint64_t)(v19 + 63) >> 6;
          do
          {
            v29 = v23[v25];
            v30 = *(_QWORD *)(v27 + v25 * 8);
            v31 = v29 - v30;
            v32 = v29 < v30;
            v33 = v29 + ~v30;
            v34 = v33 >= v29;
            if (v26)
            {
              v26 = v34;
            }
            else
            {
              v33 = v31;
              v26 = v32;
            }
            v23[v25++] = v33;
          }
          while (v28 != v25);
          v35 = 0;
          v23[(v28 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
          do
          {
            if (v28-- < 1)
              break;
            v37 = v23[v28];
            v35 += __clz(v37);
          }
          while (!v37);
          v38 = v19 | 0xFFFFFFC0;
          if ((v19 & 0x3F) == 0)
            v38 = 0;
          if ((v19 - v35 - v38) >= 0x41)
          {
            MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
            v13 = *v21;
            v8 = v45;
          }
          else
          {
            v39 = *v23;
            MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
            v13 = *v21;
            v8 = v45;
            v18 = v46;
            if (v39 == 1)
              goto LABEL_29;
          }
        }
        else
        {
          v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
          if (!(_DWORD)v19)
            v20 = 0;
          v13 = *v1;
          if ((v20 & (*(_QWORD *)(v18 + 24) - *(_QWORD *)(*(_QWORD *)&v11[40 * v12 + 16] + 24))) == 1)
          {
LABEL_29:
            v40 = v13 + 40 * v12;
            *(_QWORD *)(v40 + 16) = v18;
            v41 = *(unsigned int *)&v11[40 * v9 + 32];
            v42 = *(unsigned int *)(v40 + 32);
            v43 = v42 + v41;
            v44 = v42 + v41;
            if (v43 > 0x80000000)
              v44 = 0x80000000;
            *(_DWORD *)(v40 + 32) = v44;
            goto LABEL_10;
          }
        }
      }
      else
      {
        v13 = *v1;
      }
      v14 = v13 + 40 * v10;
      v15 = (__int128 *)(v13 + 40 * v9);
      v16 = *v15;
      v17 = v15[1];
      *(_QWORD *)(v14 + 32) = *((_QWORD *)v15 + 4);
      ++v10;
      *(_OWORD *)v14 = v16;
      *(_OWORD *)(v14 + 16) = v17;
LABEL_10:
      if (++v9 == v8)
      {
        v6 = (char *)*v1;
        v7 = 0xCCCCCCCCCCCCCCCDLL * ((v1[1] - *v1) >> 3);
        goto LABEL_34;
      }
    }
  }
  v10 = 0;
LABEL_34:
  if (v10 <= v7)
  {
    if (v10 < v7)
      v1[1] = (uint64_t)&v6[40 * v10];
  }
  else
  {
    sub_1C52AA1A8((void **)v1, v10 - v7);
  }
}

void sub_1C52AA1A8(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v5[40 * a2];
      do
      {
        *((_QWORD *)v5 + 4) = 0;
        *(_OWORD *)v5 = 0uLL;
        *((_OWORD *)v5 + 1) = 0uLL;
        *((_DWORD *)v5 + 8) = -1;
        v5 += 40;
      }
      while (v5 != v11);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x666666666666666)
      abort();
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x333333333333333)
      v9 = 0x666666666666666;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x666666666666666)
        sub_1C4764EE4();
      v10 = (char *)operator new(40 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[40 * v6];
    v13 = &v12[40 * a2];
    v14 = v12;
    do
    {
      *((_QWORD *)v14 + 4) = 0;
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_DWORD *)v14 + 8) = -1;
      v14 += 40;
    }
    while (v14 != v13);
    v15 = (char *)*a1;
    if (v5 != *a1)
    {
      do
      {
        v16 = *(_OWORD *)(v5 - 40);
        v17 = *(_OWORD *)(v5 - 24);
        *((_DWORD *)v12 - 2) = *((_DWORD *)v5 - 2);
        *(_OWORD *)(v12 - 24) = v17;
        *(_OWORD *)(v12 - 40) = v16;
        v12 -= 40;
        v5 -= 40;
      }
      while (v5 != v15);
      v5 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v10[40 * v9];
    if (v5)
      operator delete(v5);
  }
}

char *sub_1C52AA344(void **a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - (_BYTE *)*a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333)
    abort();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - v4) >> 4) > v6)
    v6 = 0x999999999999999ALL * (((_BYTE *)a1[2] - v4) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - v4) >> 4) >= 0x199999999999999)
    v10 = 0x333333333333333;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 > 0x333333333333333)
      sub_1C4764EE4();
    v11 = (char *)operator new(80 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[80 * v5];
  *((_DWORD *)v12 + 2) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)v12 = *(_QWORD *)a2;
  v13 = &v11[80 * v10];
  *(_DWORD *)(a2 + 8) = 0;
  *((_DWORD *)v12 + 6) = *(_DWORD *)(a2 + 24);
  *((_QWORD *)v12 + 2) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 24) = 0;
  *((_OWORD *)v12 + 2) = *(_OWORD *)(a2 + 32);
  *((_WORD *)v12 + 24) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(v12 + 56) = *(_OWORD *)a3;
  v14 = *(_QWORD *)(a3 + 16);
  v15 = v12 + 80;
  *((_QWORD *)v12 + 9) = v14;
  if (v3 == v4)
  {
    *a1 = v12;
    a1[1] = v15;
    a1[2] = v13;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v12[v16];
      v18 = &v3[v16];
      *((_DWORD *)v17 - 18) = *(_DWORD *)&v3[v16 - 72];
      *((_QWORD *)v17 - 10) = *(_QWORD *)&v3[v16 - 80];
      *((_DWORD *)v18 - 18) = 0;
      *((_DWORD *)v17 - 14) = *(_DWORD *)&v3[v16 - 56];
      *((_QWORD *)v17 - 8) = *(_QWORD *)&v3[v16 - 64];
      *((_DWORD *)v18 - 14) = 0;
      v19 = *(_OWORD *)&v3[v16 - 48];
      *((_WORD *)v17 - 16) = *(_WORD *)&v3[v16 - 32];
      *((_OWORD *)v17 - 3) = v19;
      v20 = *(_OWORD *)&v3[v16 - 24];
      *((_QWORD *)v17 - 1) = *(_QWORD *)&v3[v16 - 8];
      *(_OWORD *)(v17 - 24) = v20;
      v16 -= 80;
    }
    while (&v3[v16] != v4);
    v3 = (char *)*a1;
    v21 = (uint64_t)a1[1];
    *a1 = &v12[v16];
    a1[1] = v15;
    a1[2] = v13;
    while ((char *)v21 != v3)
      v21 = sub_1C61996A0(v21 - 80);
  }
  if (v3)
    operator delete(v3);
  return v15;
}

void sub_1C52AA500(uint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  unint64_t *v9;
  unint64_t j;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t m;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  unint64_t v44;
  __n128 v45;
  unsigned int v46;
  BOOL v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v51;
  BOOL v52;
  __n128 v53;
  unint64_t v54;
  unsigned int v55;
  BOOL v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v59;
  unsigned int v60;
  unsigned int v61;
  BOOL v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t k;
  BOOL v67;
  unsigned int v68;
  unsigned int v69;
  __n128 v70;
  unsigned int v71;
  BOOL v72;
  unsigned int v73;
  unsigned int v74;
  BOOL v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  unsigned int v81;
  _QWORD *v82;
  BOOL v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unsigned int v99;
  unsigned int v100;
  int64_t v101;
  int64_t v102;
  int64_t v103;
  uint64_t v104;
  unint64_t v105;
  unsigned int v106;
  unsigned int v107;
  BOOL v108;
  unsigned int v109;
  unsigned int v110;
  _BOOL4 v111;
  unint64_t v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  BOOL v124;
  unsigned int v125;
  unsigned int v126;
  _BOOL4 v127;
  unsigned int v128;
  BOOL v129;
  unsigned int v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  BOOL v139;
  unsigned int v140;
  unsigned int v141;
  _BOOL4 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unint64_t v153;
  uint64_t v154;
  __int128 v155;
  unint64_t v156;
  unint64_t v157;
  unsigned int v158;
  BOOL v159;
  unsigned int v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t i;
  unsigned int v171;
  BOOL v172;
  unsigned int v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __n128 v177;
  __n128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;

__n128 sub_1C52AB0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  __n128 result;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;

  result.n128_u64[0] = sub_1C52AB690(a1, a2, a3, a4, a6).n128_u64[0];
  v12 = *(_DWORD *)(a4 + 20);
  v13 = *(_DWORD *)(a5 + 20);
  v14 = v13 > v12;
  if (v13 == v12 && (v15 = *(_DWORD *)(a5 + 16), v16 = *(_DWORD *)(a4 + 16), v14 = v15 > v16, v15 == v16))
  {
    if (*(_QWORD *)a5 >= *(_QWORD *)a4)
      return result;
  }
  else if (!v14)
  {
    return result;
  }
  v17 = *(_QWORD *)(a4 + 16);
  result = *(__n128 *)a4;
  v18 = *(_QWORD *)(a5 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_QWORD *)(a4 + 16) = v18;
  *(__n128 *)a5 = result;
  *(_QWORD *)(a5 + 16) = v17;
  LODWORD(v17) = *(_DWORD *)(a3 + 20);
  LODWORD(v18) = *(_DWORD *)(a4 + 20);
  v19 = v18 > v17;
  if ((_DWORD)v18 == (_DWORD)v17
    && (v20 = *(_DWORD *)(a4 + 16), v21 = *(_DWORD *)(a3 + 16), v19 = v20 > v21, v20 == v21))
  {
    if (*(_QWORD *)a4 >= *(_QWORD *)a3)
      return result;
  }
  else if (!v19)
  {
    return result;
  }
  v22 = *(_QWORD *)(a3 + 16);
  result = *(__n128 *)a3;
  v23 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = v23;
  *(__n128 *)a4 = result;
  *(_QWORD *)(a4 + 16) = v22;
  LODWORD(v22) = *(_DWORD *)(a2 + 20);
  LODWORD(v23) = *(_DWORD *)(a3 + 20);
  v24 = v23 > v22;
  if ((_DWORD)v23 == (_DWORD)v22
    && (v25 = *(_DWORD *)(a3 + 16), v26 = *(_DWORD *)(a2 + 16), v24 = v25 > v26, v25 == v26))
  {
    if (*(_QWORD *)a3 >= *(_QWORD *)a2)
      return result;
  }
  else if (!v24)
  {
    return result;
  }
  v27 = *(_QWORD *)(a2 + 16);
  result = *(__n128 *)a2;
  v28 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v28;
  *(__n128 *)a3 = result;
  *(_QWORD *)(a3 + 16) = v27;
  LODWORD(v27) = *(_DWORD *)(a1 + 20);
  LODWORD(v28) = *(_DWORD *)(a2 + 20);
  v29 = v28 > v27;
  if ((_DWORD)v28 == (_DWORD)v27)
  {
    v30 = *(_DWORD *)(a2 + 16);
    v31 = *(_DWORD *)(a1 + 16);
    v29 = v30 > v31;
    if (v30 == v31)
    {
      if (*(_QWORD *)a2 >= *(_QWORD *)a1)
        return result;
LABEL_25:
      v32 = *(_QWORD *)(a1 + 16);
      result = *(__n128 *)a1;
      v33 = *(_QWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = v33;
      *(__n128 *)a2 = result;
      *(_QWORD *)(a2 + 16) = v32;
      return result;
    }
  }
  if (v29)
    goto LABEL_25;
  return result;
}

__n128 sub_1C52AB288(uint64_t a1, uint64_t a2, uint64_t a3, __n128 result)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *(_DWORD *)(a1 + 20);
  v5 = *(_DWORD *)(a2 + 20);
  v6 = v5 > v4;
  if (v5 == v4)
  {
    v7 = *(_DWORD *)(a2 + 16);
    v8 = *(_DWORD *)(a1 + 16);
    v6 = v7 > v8;
    if (v7 == v8)
    {
      if (*(_QWORD *)a2 >= *(_QWORD *)a1)
        goto LABEL_4;
LABEL_10:
      v13 = *(_DWORD *)(a3 + 20);
      v14 = v13 > v5;
      if (v13 == v5 && (v15 = *(_DWORD *)(a3 + 16), v16 = *(_DWORD *)(a2 + 16), v14 = v15 > v16, v15 == v16))
      {
        if (*(_QWORD *)a3 >= *(_QWORD *)a2)
          goto LABEL_13;
      }
      else if (!v14)
      {
LABEL_13:
        v17 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v18 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v17;
        v17 >>= 32;
        LODWORD(v18) = *(_DWORD *)(a3 + 20);
        v19 = v18 > v17;
        if ((_DWORD)v18 == (_DWORD)v17
          && (v20 = *(_DWORD *)(a3 + 16), v21 = *(_DWORD *)(a2 + 16), v19 = v20 > v21, v20 == v21))
        {
          if (*(_QWORD *)a3 >= *(_QWORD *)a2)
            return result;
        }
        else if (!v19)
        {
          return result;
        }
        v27 = *(_QWORD *)(a2 + 16);
        result = *(__n128 *)a2;
        v29 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v29;
LABEL_29:
        *(__n128 *)a3 = result;
        *(_QWORD *)(a3 + 16) = v27;
        return result;
      }
      v27 = *(_QWORD *)(a1 + 16);
      result = *(__n128 *)a1;
      v28 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_QWORD *)(a1 + 16) = v28;
      goto LABEL_29;
    }
  }
  if (v6)
    goto LABEL_10;
LABEL_4:
  v9 = *(_DWORD *)(a3 + 20);
  v10 = v9 > v5;
  if (v9 == v5 && (v11 = *(_DWORD *)(a3 + 16), v12 = *(_DWORD *)(a2 + 16), v10 = v11 > v12, v11 == v12))
  {
    if (*(_QWORD *)a3 >= *(_QWORD *)a2)
      return result;
  }
  else if (!v10)
  {
    return result;
  }
  v22 = *(_QWORD *)(a2 + 16);
  result = *(__n128 *)a2;
  v23 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v23;
  *(__n128 *)a3 = result;
  *(_QWORD *)(a3 + 16) = v22;
  LODWORD(v22) = *(_DWORD *)(a1 + 20);
  LODWORD(v23) = *(_DWORD *)(a2 + 20);
  v24 = v23 > v22;
  if ((_DWORD)v23 == (_DWORD)v22)
  {
    v25 = *(_DWORD *)(a2 + 16);
    v26 = *(_DWORD *)(a1 + 16);
    v24 = v25 > v26;
    if (v25 == v26)
    {
      if (*(_QWORD *)a2 >= *(_QWORD *)a1)
        return result;
LABEL_32:
      v30 = *(_QWORD *)(a1 + 16);
      result = *(__n128 *)a1;
      v31 = *(_QWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = v31;
      *(__n128 *)a2 = result;
      *(_QWORD *)(a2 + 16) = v30;
      return result;
    }
  }
  if (v24)
    goto LABEL_32;
  return result;
}

BOOL sub_1C52AB43C(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v5;
  _BOOL8 result;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v5 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v7 = (_QWORD *)(a2 - 24);
      v8 = *(_DWORD *)(a1 + 20);
      v9 = *(_DWORD *)(a2 - 4);
      v10 = v9 > v8;
      if (v9 == v8 && (v11 = *(_DWORD *)(a2 - 8), v12 = *(_DWORD *)(a1 + 16), v10 = v11 > v12, v11 == v12))
      {
        if (*v7 >= *(_QWORD *)a1)
          return result;
      }
      else if (!v10)
      {
        return result;
      }
      v29 = *(_QWORD *)(a1 + 16);
      v30 = *(_OWORD *)a1;
      v31 = *(_QWORD *)(a2 - 8);
      *(_OWORD *)a1 = *(_OWORD *)v7;
      *(_QWORD *)(a1 + 16) = v31;
      *(_OWORD *)v7 = v30;
      *(_QWORD *)(a2 - 8) = v29;
      return result;
    case 3uLL:
      sub_1C52AB288(a1, a1 + 24, a2 - 24, a3);
      return 1;
    case 4uLL:
      sub_1C52AB690(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      sub_1C52AB0E0(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      v13 = a1 + 48;
      sub_1C52AB288(a1, a1 + 24, a1 + 48, a3);
      v14 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  do
  {
    v17 = *(_DWORD *)(v13 + 20);
    v18 = *(_DWORD *)(v14 + 20);
    if (v18 == v17)
    {
      v19 = *(_DWORD *)(v14 + 16);
      v20 = *(_DWORD *)(v13 + 16);
      if (v19 == v20)
      {
        if (*(_QWORD *)v14 >= *(_QWORD *)v13)
          goto LABEL_29;
      }
      else if (v19 <= v20)
      {
        goto LABEL_29;
      }
    }
    else
    {
      if (v18 <= v17)
        goto LABEL_29;
      v19 = *(_DWORD *)(v14 + 16);
    }
    v21 = *(_QWORD *)v14;
    v22 = *(_QWORD *)(v14 + 8);
    *(_OWORD *)v14 = *(_OWORD *)v13;
    *(_QWORD *)(v14 + 16) = *(_QWORD *)(v13 + 16);
    v23 = a1;
    if (v13 == a1)
      goto LABEL_28;
    v24 = v15;
    while (1)
    {
      v25 = a1 + v24;
      v26 = (unint64_t *)(a1 + v24 + 24);
      v27 = *(_DWORD *)(a1 + v24 + 44);
      if (v18 != v27)
        break;
      v28 = *(_DWORD *)(v25 + 40);
      if (v19 == v28)
      {
        if (v21 >= *v26)
          goto LABEL_27;
      }
      else if (v19 <= v28)
      {
        v23 = a1 + v24 + 48;
        goto LABEL_28;
      }
LABEL_25:
      v13 -= 24;
      *(_OWORD *)(v25 + 48) = *(_OWORD *)v26;
      *(_QWORD *)(v25 + 64) = *(_QWORD *)(a1 + v24 + 40);
      v24 -= 24;
      if (v24 == -48)
      {
        v23 = a1;
        goto LABEL_28;
      }
    }
    if (v18 > v27)
      goto LABEL_25;
LABEL_27:
    v23 = v13;
LABEL_28:
    *(_QWORD *)v23 = v21;
    *(_QWORD *)(v23 + 8) = v22;
    *(_DWORD *)(v23 + 16) = v19;
    *(_DWORD *)(v23 + 20) = v18;
    if (++v16 == 8)
      return v14 + 24 == a2;
LABEL_29:
    v13 = v14;
    v15 += 24;
    v14 += 24;
  }
  while (v14 != a2);
  return 1;
}

__n128 sub_1C52AB690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  __n128 result;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  result.n128_u64[0] = sub_1C52AB288(a1, a2, a3, a5).n128_u64[0];
  v10 = *(_DWORD *)(a3 + 20);
  v11 = *(_DWORD *)(a4 + 20);
  v12 = v11 > v10;
  if (v11 == v10 && (v13 = *(_DWORD *)(a4 + 16), v14 = *(_DWORD *)(a3 + 16), v12 = v13 > v14, v13 == v14))
  {
    if (*(_QWORD *)a4 >= *(_QWORD *)a3)
      return result;
  }
  else if (!v12)
  {
    return result;
  }
  v15 = *(_QWORD *)(a3 + 16);
  result = *(__n128 *)a3;
  v16 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = v16;
  *(__n128 *)a4 = result;
  *(_QWORD *)(a4 + 16) = v15;
  LODWORD(v15) = *(_DWORD *)(a2 + 20);
  LODWORD(v16) = *(_DWORD *)(a3 + 20);
  v17 = v16 > v15;
  if ((_DWORD)v16 == (_DWORD)v15
    && (v18 = *(_DWORD *)(a3 + 16), v19 = *(_DWORD *)(a2 + 16), v17 = v18 > v19, v18 == v19))
  {
    if (*(_QWORD *)a3 >= *(_QWORD *)a2)
      return result;
  }
  else if (!v17)
  {
    return result;
  }
  v20 = *(_QWORD *)(a2 + 16);
  result = *(__n128 *)a2;
  v21 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v21;
  *(__n128 *)a3 = result;
  *(_QWORD *)(a3 + 16) = v20;
  LODWORD(v20) = *(_DWORD *)(a1 + 20);
  LODWORD(v21) = *(_DWORD *)(a2 + 20);
  v22 = v21 > v20;
  if ((_DWORD)v21 == (_DWORD)v20)
  {
    v23 = *(_DWORD *)(a2 + 16);
    v24 = *(_DWORD *)(a1 + 16);
    v22 = v23 > v24;
    if (v23 == v24)
    {
      if (*(_QWORD *)a2 >= *(_QWORD *)a1)
        return result;
LABEL_19:
      v25 = *(_QWORD *)(a1 + 16);
      result = *(__n128 *)a1;
      v26 = *(_QWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = v26;
      *(__n128 *)a2 = result;
      *(_QWORD *)(a2 + 16) = v25;
      return result;
    }
  }
  if (v22)
    goto LABEL_19;
  return result;
}

uint64_t sub_1C52AB7D4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, int *a5, char a6, char a7, char a8, uint64_t a9, int *a10)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  v11 = v10 + 1;
  if (v10 + 1 > 0x155555555555555)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 6) > v11)
    v11 = 0x5555555555555556 * ((a1[2] - *a1) >> 6);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 6) >= 0xAAAAAAAAAAAAAALL)
    v20 = 0x155555555555555;
  else
    v20 = v11;
  if (v20)
  {
    if (v20 > 0x155555555555555)
      sub_1C4764EE4();
    v21 = (char *)operator new(192 * v20);
  }
  else
  {
    v21 = 0;
  }
  v22 = (uint64_t)&v21[192 * v10];
  v23 = &v21[192 * v20];
  sub_1C52AB950(v22, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  v24 = v22 + 192;
  v26 = (char *)*a1;
  v25 = (char *)a1[1];
  if (v25 == (char *)*a1)
  {
    *a1 = v22;
    a1[1] = v24;
    a1[2] = (uint64_t)v23;
  }
  else
  {
    do
    {
      v22 -= 192;
      v25 -= 192;
      sub_1C6215838(v22, (uint64_t)v25);
    }
    while (v25 != v26);
    v25 = (char *)*a1;
    v27 = a1[1];
    *a1 = v22;
    a1[1] = v24;
    a1[2] = (uint64_t)v23;
    while ((char *)v27 != v25)
      v27 = sub_1C62158C4(v27 - 192);
  }
  if (v25)
    operator delete(v25);
  return v24;
}

void sub_1C52AB950(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, int *a5, char a6, char a7, char a8, uint64_t a9, int *a10)
{
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  int v19;
  char v20;
  char v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[13];

  v24[12] = *MEMORY[0x1E0C80C00];
  v13 = *((_DWORD *)a2 + 2);
  v14 = *a2;
  *((_DWORD *)a2 + 2) = 0;
  v15 = *((_DWORD *)a3 + 2);
  v16 = *a3;
  *((_DWORD *)a3 + 2) = 0;
  v17 = *a5;
  v22 = v24;
  v23 = 0x300000000;
  if (*(_DWORD *)(a9 + 8))
  {
    v20 = a7;
    v21 = a8;
    sub_1C621571C((uint64_t)&v22, a9);
    a7 = v20;
    a8 = v21;
    v18 = (_DWORD)v23 == 0;
  }
  else
  {
    v18 = 1;
  }
  v19 = *a10;
  *(_DWORD *)(a1 + 8) = v13;
  *(_QWORD *)a1 = v14;
  *(_DWORD *)(a1 + 24) = v15;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 40) = v17;
  *(_BYTE *)(a1 + 44) = a6;
  *(_BYTE *)(a1 + 45) = a7;
  *(_BYTE *)(a1 + 46) = a8;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = 0x300000000;
  if (!v18)
    sub_1C621571C(a1 + 64, (uint64_t)&v22);
  *(_DWORD *)(a1 + 176) = v19;
  *(_DWORD *)(a1 + 180) = -1;
  *(_BYTE *)(a1 + 184) = 0;
  if (v22 != v24)
    free(v22);
}

uint64_t sub_1C52ABAA0(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  _QWORD *v61;
  BOOL v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  __int128 v99;
  __int128 v100;
  BOOL v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t i;
  _QWORD *v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  unsigned int v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  __int128 *v186;
  __int128 *v187;
  __int128 *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  __int128 v193;
  int v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  __int128 v217;
  uint64_t v218;
  BOOL v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  __int128 v228;
  unint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int v236;
  unsigned int v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unsigned int v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  int64_t v255;
  int64_t v256;
  int64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  __int128 v270;
  __int128 v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int v282;
  unsigned int v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  uint64_t v287;
  unsigned int v288;
  unsigned int v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int v305;
  unsigned int v306;
  uint64_t v307;
  _QWORD *v308;
  uint64_t v309;
  uint64_t v310;
  unsigned int v311;
  unsigned int v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  unint64_t v325;
  int64_t v326;
  unint64_t v327;
  unint64_t v328;
  int64_t v329;
  uint64_t v330;
  int64_t v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  uint64_t v336;
  __int128 v337;
  __int128 v338;
  uint64_t v339;
  uint64_t v340;
  unsigned int v341;
  unsigned int v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  unint64_t v348;
  __int128 v349;
  __int128 v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  _QWORD *v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  __int128 v359;
  __int128 v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  __int128 v364;
  __int128 v365;
  uint64_t v366;
  uint64_t v367;
  unsigned int v368;
  unsigned int v369;
  uint64_t v370;
  _QWORD *v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  unint64_t v377;
  uint64_t v379;
  uint64_t v380;
  unsigned int v381;
  unsigned int v382;
  uint64_t v383;
  _QWORD *v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unint64_t v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  _QWORD *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  __int128 v399;
  uint64_t v400;
  _QWORD *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unsigned int v405;
  unsigned int v406;
  uint64_t v407;
  unint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unsigned int v416;
  uint64_t v417;
  unint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t v425;
  unsigned int v426;
  unsigned int v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unsigned int v431;
  unsigned int v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unsigned int v436;
  unsigned int v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  unsigned int v441;
  unsigned int v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unsigned int v446;
  unsigned int v447;
  uint64_t v448;
  unint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  unint64_t v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t v465;
  unint64_t v466;
  unint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t v471;
  unint64_t v472;
  unint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  unint64_t v477;
  unint64_t v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  uint64_t v499;
  uint64_t v500;
  __int128 v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v180 = *(_QWORD *)(a2 - 32);
        v181 = *(_QWORD *)(v8 + 8);
        v182 = (_QWORD *)(v181 + 24);
        v183 = *(unsigned int *)(v180 + 32);
        if (v183 > 0x40)
        {
          v424 = *(_QWORD *)(v180 + 24);
          v425 = *(_QWORD *)(v424 + 8 * ((v183 - 1) >> 6)) & (1 << (v183 - 1));
          v426 = *(_DWORD *)(v181 + 32);
          v427 = v426 - 1;
          v428 = *(_QWORD *)(v181 + 24);
          if (v426 >= 0x41)
            v182 = (_QWORD *)(v428 + 8 * (v427 >> 6));
          if ((v425 != 0) == ((*v182 >> v427) & 1))
          {
            v449 = v183 + 63;
            v450 = v428 - 8;
            v451 = (v449 >> 3) & 0x3FFFFFF8;
            v452 = v424 - 8;
            do
            {
              if (!v451)
                return result;
              v453 = *(_QWORD *)(v452 + v451);
              v454 = *(_QWORD *)(v450 + v451);
              v451 -= 8;
            }
            while (v453 == v454);
            if (v453 > v454)
              return result;
          }
          else if (!v425)
          {
            return result;
          }
        }
        else if ((uint64_t)(*(_QWORD *)(v180 + 24) << -(char)v183) >> -(char)v183 >= (uint64_t)(*v182 << -(char)v183) >> -(char)v183)
        {
          return result;
        }
        v505 = *(_QWORD *)(v8 + 32);
        v487 = *(_OWORD *)v8;
        v496 = *(_OWORD *)(v8 + 16);
        v184 = *(_OWORD *)(a2 - 40);
        v185 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(v8 + 32) = *(_DWORD *)(a2 - 8);
        *(_OWORD *)v8 = v184;
        *(_OWORD *)(v8 + 16) = v185;
        *(_DWORD *)(a2 - 8) = v505;
        *(_OWORD *)(a2 - 24) = v496;
        *(_OWORD *)(a2 - 40) = v487;
        return result;
      case 3:
        return (uint64_t)sub_1C52AD7F4((__int128 *)v8, (__int128 *)(v8 + 40), (__int128 *)(a2 - 40));
      case 4:
        return (uint64_t)sub_1C52AE34C(v8, v8 + 40, v8 + 80, a2 - 40);
      case 5:
        v186 = (__int128 *)(v8 + 40);
        v187 = (__int128 *)(v8 + 80);
        v188 = (__int128 *)(v8 + 120);
        result = (uint64_t)sub_1C52AE34C(v8, v8 + 40, v8 + 80, v8 + 120);
        v189 = *(_QWORD *)(a2 - 32);
        v190 = *(_QWORD *)(v8 + 128);
        v191 = (_QWORD *)(v190 + 24);
        v192 = *(unsigned int *)(v189 + 32);
        if (v192 > 0x40)
        {
          v429 = *(_QWORD *)(v189 + 24);
          v430 = *(_QWORD *)(v429 + 8 * ((v192 - 1) >> 6)) & (1 << (v192 - 1));
          v431 = *(_DWORD *)(v190 + 32);
          v432 = v431 - 1;
          v433 = *(_QWORD *)(v190 + 24);
          if (v431 >= 0x41)
            v191 = (_QWORD *)(v433 + 8 * (v432 >> 6));
          if ((v430 != 0) == ((*v191 >> v432) & 1))
          {
            v455 = v192 + 63;
            v456 = v433 - 8;
            v457 = (v455 >> 3) & 0x3FFFFFF8;
            v458 = v429 - 8;
            do
            {
              if (!v457)
                return result;
              v459 = *(_QWORD *)(v458 + v457);
              v460 = *(_QWORD *)(v456 + v457);
              v457 -= 8;
            }
            while (v459 == v460);
            if (v459 > v460)
              return result;
          }
          else if (!v430)
          {
            return result;
          }
        }
        else if ((uint64_t)(*(_QWORD *)(v189 + 24) << -(char)v192) >> -(char)v192 >= (uint64_t)(*v191 << -(char)v192) >> -(char)v192)
        {
          return result;
        }
        v193 = *v188;
        v497 = *(_OWORD *)(v8 + 136);
        v194 = *(_QWORD *)(v8 + 152);
        v195 = *(_OWORD *)(a2 - 24);
        v196 = *(_OWORD *)(a2 - 40);
        *(_DWORD *)(v8 + 152) = *(_DWORD *)(a2 - 8);
        *v188 = v196;
        *(_OWORD *)(v8 + 136) = v195;
        *(_OWORD *)(a2 - 24) = v497;
        *(_DWORD *)(a2 - 8) = v194;
        *(_OWORD *)(a2 - 40) = v193;
        v197 = *(_QWORD *)(v8 + 128);
        v198 = *(_QWORD *)(v8 + 88);
        v199 = (_QWORD *)(v198 + 24);
        v200 = *(unsigned int *)(v197 + 32);
        if (v200 > 0x40)
        {
          v434 = *(_QWORD *)(v197 + 24);
          v435 = *(_QWORD *)(v434 + 8 * ((v200 - 1) >> 6)) & (1 << (v200 - 1));
          v436 = *(_DWORD *)(v198 + 32);
          v437 = v436 - 1;
          v438 = *(_QWORD *)(v198 + 24);
          if (v436 >= 0x41)
            v199 = (_QWORD *)(v438 + 8 * (v437 >> 6));
          if ((v435 != 0) == ((*v199 >> v437) & 1))
          {
            v461 = v200 + 63;
            v462 = v438 - 8;
            v463 = (v461 >> 3) & 0x3FFFFFF8;
            v464 = v434 - 8;
            do
            {
              if (!v463)
                return result;
              v465 = *(_QWORD *)(v464 + v463);
              v466 = *(_QWORD *)(v462 + v463);
              v463 -= 8;
            }
            while (v465 == v466);
            if (v465 > v466)
              return result;
          }
          else if (!v435)
          {
            return result;
          }
        }
        else if ((uint64_t)(*(_QWORD *)(v197 + 24) << -(char)v200) >> -(char)v200 >= (uint64_t)(*v199 << -(char)v200) >> -(char)v200)
        {
          return result;
        }
        v201 = *(_QWORD *)(v8 + 112);
        v203 = *v187;
        v202 = *(_OWORD *)(v8 + 96);
        v204 = *(_OWORD *)(v8 + 136);
        *v187 = *v188;
        *(_OWORD *)(v8 + 96) = v204;
        *(_DWORD *)(v8 + 112) = *(_DWORD *)(v8 + 152);
        *v188 = v203;
        *(_OWORD *)(v8 + 136) = v202;
        *(_DWORD *)(v8 + 152) = v201;
        v205 = *(_QWORD *)(v8 + 88);
        v206 = *(_QWORD *)(v8 + 48);
        v207 = (_QWORD *)(v206 + 24);
        v208 = *(unsigned int *)(v205 + 32);
        if (v208 > 0x40)
        {
          v439 = *(_QWORD *)(v205 + 24);
          v440 = *(_QWORD *)(v439 + 8 * ((v208 - 1) >> 6)) & (1 << (v208 - 1));
          v441 = *(_DWORD *)(v206 + 32);
          v442 = v441 - 1;
          v443 = *(_QWORD *)(v206 + 24);
          if (v441 >= 0x41)
            v207 = (_QWORD *)(v443 + 8 * (v442 >> 6));
          if ((v440 != 0) == ((*v207 >> v442) & 1))
          {
            v467 = v208 + 63;
            v468 = v443 - 8;
            v469 = (v467 >> 3) & 0x3FFFFFF8;
            v470 = v439 - 8;
            do
            {
              if (!v469)
                return result;
              v471 = *(_QWORD *)(v470 + v469);
              v472 = *(_QWORD *)(v468 + v469);
              v469 -= 8;
            }
            while (v471 == v472);
            if (v471 > v472)
              return result;
          }
          else if (!v440)
          {
            return result;
          }
        }
        else if ((uint64_t)(*(_QWORD *)(v205 + 24) << -(char)v208) >> -(char)v208 >= (uint64_t)(*v207 << -(char)v208) >> -(char)v208)
        {
          return result;
        }
        v209 = *(_QWORD *)(v8 + 72);
        v211 = *v186;
        v210 = *(_OWORD *)(v8 + 56);
        v212 = *(_OWORD *)(v8 + 96);
        *v186 = *v187;
        *(_OWORD *)(v8 + 56) = v212;
        *(_DWORD *)(v8 + 72) = *(_DWORD *)(v8 + 112);
        *v187 = v211;
        *(_OWORD *)(v8 + 96) = v210;
        *(_DWORD *)(v8 + 112) = v209;
        v213 = *(_QWORD *)(v8 + 48);
        v214 = *(_QWORD *)(v8 + 8);
        v215 = (_QWORD *)(v214 + 24);
        v216 = *(unsigned int *)(v213 + 32);
        if (v216 > 0x40)
        {
          v444 = *(_QWORD *)(v213 + 24);
          v445 = *(_QWORD *)(v444 + 8 * ((v216 - 1) >> 6)) & (1 << (v216 - 1));
          v446 = *(_DWORD *)(v214 + 32);
          v447 = v446 - 1;
          v448 = *(_QWORD *)(v214 + 24);
          if (v446 >= 0x41)
            v215 = (_QWORD *)(v448 + 8 * (v447 >> 6));
          if ((v445 != 0) == ((*v215 >> v447) & 1))
          {
            v473 = v216 + 63;
            v474 = v448 - 8;
            v475 = (v473 >> 3) & 0x3FFFFFF8;
            v476 = v444 - 8;
            do
            {
              if (!v475)
                return result;
              v477 = *(_QWORD *)(v476 + v475);
              v478 = *(_QWORD *)(v474 + v475);
              v475 -= 8;
            }
            while (v477 == v478);
            if (v477 > v478)
              return result;
          }
          else if (!v445)
          {
            return result;
          }
        }
        else if ((uint64_t)(*(_QWORD *)(v213 + 24) << -(char)v216) >> -(char)v216 >= (uint64_t)(*v215 << -(char)v216) >> -(char)v216)
        {
          return result;
        }
        v506 = *(_QWORD *)(v8 + 32);
        v488 = *(_OWORD *)v8;
        v498 = *(_OWORD *)(v8 + 16);
        v217 = *(_OWORD *)(v8 + 56);
        *(_OWORD *)v8 = *v186;
        *(_OWORD *)(v8 + 16) = v217;
        *(_DWORD *)(v8 + 32) = *(_DWORD *)(v8 + 72);
        *v186 = v488;
        *(_OWORD *)(v8 + 56) = v498;
        *(_DWORD *)(v8 + 72) = v506;
        return result;
      default:
        if (v9 <= 959)
        {
          v218 = v8 + 40;
          v220 = v8 == a2 || v218 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v220)
            {
              v221 = v8;
              while (1)
              {
                v222 = v221;
                v221 = v218;
                v223 = *(_QWORD *)(v222 + 48);
                v224 = *(_QWORD *)(v222 + 8);
                v225 = (_QWORD *)(v224 + 24);
                v226 = *(unsigned int *)(v223 + 32);
                if (v226 <= 0x40)
                  break;
                v245 = *(_QWORD *)(v223 + 24);
                v246 = *(_QWORD *)(v245 + 8 * ((v226 - 1) >> 6)) & (1 << (v226 - 1));
                result = *(unsigned int *)(v224 + 32);
                v247 = result - 1;
                v248 = *(_QWORD *)(v224 + 24);
                if (result >= 0x41)
                  v225 = (_QWORD *)(v248 + 8 * (v247 >> 6));
                if ((v246 != 0) != ((*v225 >> v247) & 1))
                {
                  if (!v246)
                    goto LABEL_246;
                  goto LABEL_230;
                }
                v249 = v226 + 63;
                v250 = v248 - 8;
                v251 = (v249 >> 3) & 0x3FFFFFF8;
                v252 = v245 - 8;
                do
                {
                  if (!v251)
                    goto LABEL_246;
                  v253 = *(_QWORD *)(v252 + v251);
                  v254 = *(_QWORD *)(v250 + v251);
                  v251 -= 8;
                }
                while (v253 == v254);
                if (v253 <= v254)
                  goto LABEL_230;
LABEL_246:
                v218 = v221 + 40;
                if (v221 + 40 == a2)
                  return result;
              }
              if ((uint64_t)(*(_QWORD *)(v223 + 24) << -(char)v226) >> -(char)v226 >= (uint64_t)(*v225 << -(char)v226) >> -(char)v226)
                goto LABEL_246;
LABEL_230:
              v227 = *(_QWORD *)(v222 + 40);
              v499 = *(_QWORD *)(v222 + 72);
              v489 = *(_OWORD *)(v222 + 56);
              *(_DWORD *)(v221 + 32) = *(_DWORD *)(v222 + 32);
              v228 = *(_OWORD *)(v222 + 16);
              *(_OWORD *)v221 = *(_OWORD *)v222;
              *(_OWORD *)(v221 + 16) = v228;
              v229 = v8;
              if (v222 == v8)
                goto LABEL_245;
              while (1)
              {
                v230 = *(_QWORD *)(v222 - 32);
                v231 = (_QWORD *)(v230 + 24);
                v232 = *(unsigned int *)(v223 + 32);
                if (v232 > 0x40)
                {
                  v234 = *(_QWORD *)(v223 + 24);
                  v235 = *(_QWORD *)(v234 + 8 * ((v232 - 1) >> 6)) & (1 << (v232 - 1));
                  result = v235 != 0;
                  v236 = *(_DWORD *)(v230 + 32);
                  v237 = v236 - 1;
                  v238 = *(_QWORD *)(v230 + 24);
                  if (v236 >= 0x41)
                    v231 = (_QWORD *)(v238 + 8 * (v237 >> 6));
                  if ((_DWORD)result == ((*v231 >> v237) & 1))
                  {
                    v239 = v232 + 63;
                    v240 = v238 - 8;
                    v241 = (v239 >> 3) & 0x3FFFFFF8;
                    v242 = v234 - 8;
                    while (v241)
                    {
                      v243 = *(_QWORD *)(v242 + v241);
                      v244 = *(_QWORD *)(v240 + v241);
                      v241 -= 8;
                      if (v243 != v244)
                      {
                        if (v243 <= v244)
                          goto LABEL_233;
                        break;
                      }
                    }
LABEL_244:
                    v229 = v222;
LABEL_245:
                    *(_QWORD *)v229 = v227;
                    *(_QWORD *)(v229 + 8) = v223;
                    *(_OWORD *)(v229 + 16) = v489;
                    *(_DWORD *)(v229 + 32) = v499;
                    goto LABEL_246;
                  }
                  if (!v235)
                    goto LABEL_244;
                }
                else if ((uint64_t)(*(_QWORD *)(v223 + 24) << -(char)v232) >> -(char)v232 >= (uint64_t)(*v231 << -(char)v232) >> -(char)v232)
                {
                  goto LABEL_244;
                }
LABEL_233:
                v233 = *(_OWORD *)(v222 - 24);
                *(_OWORD *)v222 = *(_OWORD *)(v222 - 40);
                *(_OWORD *)(v222 + 16) = v233;
                *(_DWORD *)(v222 + 32) = *(_DWORD *)(v222 - 8);
                v222 -= 40;
                if (v222 == v8)
                {
                  v229 = v8;
                  goto LABEL_245;
                }
              }
            }
            return result;
          }
          if (v220)
            return result;
          while (1)
          {
            v391 = v7;
            v7 = v218;
            v392 = *(_QWORD *)(v391 + 48);
            v393 = *(_QWORD *)(v391 + 8);
            v394 = (_QWORD *)(v393 + 24);
            v395 = *(unsigned int *)(v392 + 32);
            if (v395 > 0x40)
            {
              v414 = *(_QWORD *)(v392 + 24);
              v415 = *(_QWORD *)(v414 + 8 * ((v395 - 1) >> 6)) & (1 << (v395 - 1));
              v416 = *(_DWORD *)(v393 + 32);
              result = v416 - 1;
              v417 = *(_QWORD *)(v393 + 24);
              if (v416 >= 0x41)
                v394 = (_QWORD *)(v417 + 8 * (result >> 6));
              if ((v415 != 0) == ((*v394 >> (v416 - 1)) & 1))
              {
                v418 = v395 + 63;
                v419 = v417 - 8;
                v420 = (v418 >> 3) & 0x3FFFFFF8;
                v421 = v414 - 8;
                while (v420)
                {
                  v422 = *(_QWORD *)(v421 + v420);
                  v423 = *(_QWORD *)(v419 + v420);
                  v420 -= 8;
                  if (v422 != v423)
                  {
                    if (v422 <= v423)
                      goto LABEL_380;
                    goto LABEL_394;
                  }
                }
                goto LABEL_394;
              }
              if (v415)
              {
LABEL_380:
                v396 = *(_QWORD *)v7;
                v492 = *(_OWORD *)(v391 + 56);
                v502 = *(_QWORD *)(v391 + 72);
                v397 = v7;
                while (1)
                {
LABEL_381:
                  while (1)
                  {
                    v398 = v397;
                    v397 = v391;
                    v399 = *(_OWORD *)(v391 + 16);
                    *(_OWORD *)v398 = *(_OWORD *)v391;
                    *(_OWORD *)(v398 + 16) = v399;
                    *(_DWORD *)(v398 + 32) = *(_DWORD *)(v391 + 32);
                    v391 -= 40;
                    v400 = *(_QWORD *)(v397 - 32);
                    v401 = (_QWORD *)(v400 + 24);
                    v402 = *(unsigned int *)(v392 + 32);
                    if (v402 > 0x40)
                      break;
                    if ((uint64_t)(*(_QWORD *)(v392 + 24) << -(char)v402) >> -(char)v402 >= (uint64_t)(*v401 << -(char)v402) >> -(char)v402)
                      goto LABEL_393;
                  }
                  v403 = *(_QWORD *)(v392 + 24);
                  v404 = *(_QWORD *)(v403 + 8 * ((v402 - 1) >> 6)) & (1 << (v402 - 1));
                  result = v404 != 0;
                  v405 = *(_DWORD *)(v400 + 32);
                  v406 = v405 - 1;
                  v407 = *(_QWORD *)(v400 + 24);
                  if (v405 >= 0x41)
                    v401 = (_QWORD *)(v407 + 8 * (v406 >> 6));
                  if ((_DWORD)result == ((*v401 >> v406) & 1))
                    break;
                  if (!v404)
                    goto LABEL_393;
                }
                v408 = v402 + 63;
                v409 = v407 - 8;
                v410 = (v408 >> 3) & 0x3FFFFFF8;
                v411 = v403 - 8;
                while (v410)
                {
                  v412 = *(_QWORD *)(v411 + v410);
                  v413 = *(_QWORD *)(v409 + v410);
                  v410 -= 8;
                  if (v412 != v413)
                  {
                    if (v412 <= v413)
                      goto LABEL_381;
                    break;
                  }
                }
LABEL_393:
                *(_QWORD *)v397 = v396;
                *(_QWORD *)(v397 + 8) = v392;
                *(_OWORD *)(v397 + 16) = v492;
                *(_DWORD *)(v397 + 32) = v502;
              }
            }
            else if ((uint64_t)(*(_QWORD *)(v392 + 24) << -(char)v395) >> -(char)v395 < (uint64_t)(*v394 << -(char)v395) >> -(char)v395)
            {
              goto LABEL_380;
            }
LABEL_394:
            v218 = v7 + 40;
            if (v7 + 40 == a2)
              return result;
          }
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v255 = (unint64_t)(v10 - 2) >> 1;
          v256 = v255;
          while (1)
          {
            v257 = v256;
            if (v255 < v256)
              goto LABEL_299;
            v258 = (2 * v256) | 1;
            v259 = v8 + 40 * v258;
            if (2 * v257 + 2 >= v10)
              goto LABEL_265;
            v260 = *(_QWORD *)(v8 + 40 * v258 + 8);
            v261 = *(_QWORD *)(v259 + 48);
            v262 = (_QWORD *)(v261 + 24);
            v263 = *(unsigned int *)(v260 + 32);
            if (v263 > 0x40)
              break;
            if ((uint64_t)(*(_QWORD *)(v260 + 24) << -(char)v263) >> -(char)v263 < (uint64_t)(*v262 << -(char)v263) >> -(char)v263)
              goto LABEL_264;
LABEL_265:
            v264 = *(_QWORD *)(v259 + 8);
            v265 = *(_QWORD *)(v8 + 40 * v257 + 8);
            v266 = (_QWORD *)(v265 + 24);
            v267 = *(unsigned int *)(v264 + 32);
            if (v267 > 0x40)
            {
              v303 = *(_QWORD *)(v264 + 24);
              v304 = *(_QWORD *)(v303 + 8 * ((v267 - 1) >> 6)) & (1 << (v267 - 1));
              v305 = *(_DWORD *)(v265 + 32);
              v306 = v305 - 1;
              v307 = *(_QWORD *)(v265 + 24);
              if (v305 >= 0x41)
                v308 = (_QWORD *)(v307 + 8 * (v306 >> 6));
              else
                v308 = (_QWORD *)(v265 + 24);
              if ((v304 != 0) == ((*v308 >> v306) & 1))
              {
                v314 = v267 + 63;
                v315 = v307 - 8;
                v316 = (v314 >> 3) & 0x3FFFFFF8;
                v317 = v303 - 8;
                do
                {
                  if (!v316)
                    goto LABEL_267;
                  v318 = *(_QWORD *)(v317 + v316);
                  v319 = *(_QWORD *)(v315 + v316);
                  v316 -= 8;
                }
                while (v318 == v319);
                if (v318 <= v319)
                  goto LABEL_299;
              }
              else if (v304)
              {
                goto LABEL_299;
              }
            }
            else if ((uint64_t)(*(_QWORD *)(v264 + 24) << -(char)v267) >> -(char)v267 < (uint64_t)(*v266 << -(char)v267) >> -(char)v267)
            {
              goto LABEL_299;
            }
LABEL_267:
            v268 = v8 + 40 * v257;
            v269 = *(_QWORD *)v268;
            v500 = *(_QWORD *)(v268 + 32);
            v490 = *(_OWORD *)(v268 + 16);
            do
            {
              while (1)
              {
                while (1)
                {
LABEL_268:
                  v270 = *(_OWORD *)v259;
                  v271 = *(_OWORD *)(v259 + 16);
                  *(_DWORD *)(v268 + 32) = *(_DWORD *)(v259 + 32);
                  *(_OWORD *)v268 = v270;
                  *(_OWORD *)(v268 + 16) = v271;
                  if (v255 < v258)
                    goto LABEL_298;
                  v268 = v259;
                  v272 = 2 * v258;
                  v258 = (2 * v258) | 1;
                  v259 = v8 + 40 * v258;
                  v273 = v272 + 2;
                  if (v273 < v10)
                  {
                    v274 = *(_QWORD *)(v8 + 40 * v258 + 8);
                    v275 = *(_QWORD *)(v259 + 48);
                    v276 = (_QWORD *)(v275 + 24);
                    v277 = *(unsigned int *)(v274 + 32);
                    if (v277 <= 0x40)
                    {
                      if ((uint64_t)(*(_QWORD *)(v274 + 24) << -(char)v277) >> -(char)v277 >= (uint64_t)(*v276 << -(char)v277) >> -(char)v277)
                        goto LABEL_273;
LABEL_272:
                      v259 += 40;
                      v258 = v273;
                      goto LABEL_273;
                    }
                    v286 = *(_QWORD *)(v274 + 24);
                    v287 = *(_QWORD *)(v286 + 8 * ((v277 - 1) >> 6)) & (1 << (v277 - 1));
                    v288 = *(_DWORD *)(v275 + 32);
                    v289 = v288 - 1;
                    v290 = *(_QWORD *)(v275 + 24);
                    if (v288 >= 0x41)
                      v276 = (_QWORD *)(v290 + 8 * (v289 >> 6));
                    if ((v287 != 0) == ((*v276 >> v289) & 1))
                    {
                      v297 = v277 + 63;
                      v298 = v290 - 8;
                      v299 = (v297 >> 3) & 0x3FFFFFF8;
                      v300 = v286 - 8;
                      do
                      {
                        if (!v299)
                          goto LABEL_273;
                        v301 = *(_QWORD *)(v300 + v299);
                        v302 = *(_QWORD *)(v298 + v299);
                        v299 -= 8;
                      }
                      while (v301 == v302);
                      if (v301 <= v302)
                        goto LABEL_272;
                    }
                    else if (v287)
                    {
                      goto LABEL_272;
                    }
                  }
LABEL_273:
                  v278 = *(_QWORD *)(v259 + 8);
                  v279 = *(unsigned int *)(v278 + 32);
                  if (v279 > 0x40)
                    break;
                  if ((uint64_t)(*(_QWORD *)(v278 + 24) << -(char)v279) >> -(char)v279 < (uint64_t)(*v266 << -(char)v279) >> -(char)v279)
                    goto LABEL_297;
                }
                v280 = *(_QWORD *)(v278 + 24);
                v281 = *(_QWORD *)(v280 + 8 * ((v279 - 1) >> 6)) & (1 << (v279 - 1));
                v282 = *(_DWORD *)(v265 + 32);
                v283 = v282 - 1;
                v284 = *(_QWORD *)(v265 + 24);
                v285 = (_QWORD *)(v282 >= 0x41 ? v284 + 8 * (v283 >> 6) : v265 + 24);
                if ((v281 != 0) == ((*v285 >> v283) & 1))
                  break;
                if (v281)
                  goto LABEL_297;
              }
              v291 = v279 + 63;
              v292 = v284 - 8;
              v293 = (v291 >> 3) & 0x3FFFFFF8;
              v294 = v280 - 8;
              do
              {
                if (!v293)
                  goto LABEL_268;
                v295 = *(_QWORD *)(v294 + v293);
                v296 = *(_QWORD *)(v292 + v293);
                v293 -= 8;
              }
              while (v295 == v296);
            }
            while (v295 > v296);
LABEL_297:
            v259 = v268;
LABEL_298:
            *(_QWORD *)v259 = v269;
            *(_QWORD *)(v259 + 8) = v265;
            *(_OWORD *)(v259 + 16) = v490;
            *(_DWORD *)(v259 + 32) = v500;
LABEL_299:
            v256 = v257 - 1;
            if (!v257)
            {
LABEL_322:
              v326 = 0;
              v507 = *(_QWORD *)(v8 + 32);
              v491 = *(_OWORD *)v8;
              v501 = *(_OWORD *)(v8 + 16);
              v327 = v8;
              while (1)
              {
                v328 = v327;
                v329 = v326 + 1;
                v327 += 40 * (v326 + 1);
                v330 = 2 * v326;
                result = (2 * v326) | 1;
                v326 = result;
                v331 = v330 + 2;
                if (v331 < v10)
                {
                  v332 = *(_QWORD *)(v328 + 40 * v329 + 8);
                  v333 = *(_QWORD *)(v327 + 48);
                  v334 = (_QWORD *)(v333 + 24);
                  v335 = *(unsigned int *)(v332 + 32);
                  if (v335 > 0x40)
                  {
                    v339 = *(_QWORD *)(v332 + 24);
                    v340 = *(_QWORD *)(v339 + 8 * ((v335 - 1) >> 6)) & (1 << (v335 - 1));
                    v341 = *(_DWORD *)(v333 + 32);
                    v342 = v341 - 1;
                    v343 = *(_QWORD *)(v333 + 24);
                    if (v341 >= 0x41)
                      v334 = (_QWORD *)(v343 + 8 * (v342 >> 6));
                    result = (*v334 >> v342) & 1;
                    if ((v340 != 0) == (_DWORD)result)
                    {
                      v344 = v335 + 63;
                      v345 = v343 - 8;
                      result = (v344 >> 3) & 0x3FFFFFF8;
                      v346 = v339 - 8;
                      while (result)
                      {
                        v347 = *(_QWORD *)(v346 + result);
                        v348 = *(_QWORD *)(v345 + result);
                        result -= 8;
                        if (v347 != v348)
                        {
                          if (v347 <= v348)
                            goto LABEL_326;
                          goto LABEL_327;
                        }
                      }
                      goto LABEL_327;
                    }
                    if (v340)
                    {
LABEL_326:
                      v327 += 40;
                      v326 = v331;
                    }
                  }
                  else
                  {
                    v336 = -v335;
                    result = *v334 << v336;
                    if ((uint64_t)(*(_QWORD *)(v332 + 24) << v336) >> v336 < result >> v336)
                      goto LABEL_326;
                  }
                }
LABEL_327:
                v337 = *(_OWORD *)v327;
                v338 = *(_OWORD *)(v327 + 16);
                *(_DWORD *)(v328 + 32) = *(_DWORD *)(v327 + 32);
                *(_OWORD *)v328 = v337;
                *(_OWORD *)(v328 + 16) = v338;
                if (v326 > (uint64_t)((unint64_t)(v10 - 2) >> 1))
                {
                  a2 -= 40;
                  if (v327 == a2)
                  {
                    *(_DWORD *)(v327 + 32) = v507;
                    *(_OWORD *)v327 = v491;
                    *(_OWORD *)(v327 + 16) = v501;
                  }
                  else
                  {
                    v349 = *(_OWORD *)a2;
                    v350 = *(_OWORD *)(a2 + 16);
                    *(_DWORD *)(v327 + 32) = *(_DWORD *)(a2 + 32);
                    *(_OWORD *)v327 = v349;
                    *(_OWORD *)(v327 + 16) = v350;
                    *(_DWORD *)(a2 + 32) = v507;
                    *(_OWORD *)a2 = v491;
                    *(_OWORD *)(a2 + 16) = v501;
                    v351 = v327 - v8 + 40;
                    if (v351 >= 41)
                    {
                      result = v351 / 0x28uLL - 2;
                      v352 = (unint64_t)result >> 1;
                      v353 = *(_QWORD *)(v8 + 40 * ((unint64_t)result >> 1) + 8);
                      v354 = *(_QWORD *)(v327 + 8);
                      v355 = (_QWORD *)(v354 + 24);
                      v356 = *(unsigned int *)(v353 + 32);
                      if (v356 > 0x40)
                      {
                        v379 = *(_QWORD *)(v353 + 24);
                        v380 = *(_QWORD *)(v379 + 8 * ((v356 - 1) >> 6)) & (1 << (v356
                                                                                                  - 1));
                        v381 = *(_DWORD *)(v354 + 32);
                        v382 = v381 - 1;
                        v383 = *(_QWORD *)(v354 + 24);
                        if (v381 >= 0x41)
                          v384 = (_QWORD *)(v383 + 8 * (v382 >> 6));
                        else
                          v384 = (_QWORD *)(v354 + 24);
                        if ((v380 != 0) == ((*v384 >> v382) & 1))
                        {
                          v385 = v356 + 63;
                          v386 = v383 - 8;
                          v387 = (v385 >> 3) & 0x3FFFFFF8;
                          v388 = v379 - 8;
                          while (v387)
                          {
                            v389 = *(_QWORD *)(v388 + v387);
                            v390 = *(_QWORD *)(v386 + v387);
                            v387 -= 8;
                            if (v389 != v390)
                            {
                              if (v389 <= v390)
                                goto LABEL_343;
                              break;
                            }
                          }
                        }
                        else if (v380)
                        {
LABEL_343:
                          v357 = *(_QWORD *)v327;
                          v484 = *(_QWORD *)(v327 + 32);
                          v481 = *(_OWORD *)(v327 + 16);
                          v358 = v8 + 40 * v352;
                          v359 = *(_OWORD *)v358;
                          v360 = *(_OWORD *)(v358 + 16);
                          *(_DWORD *)(v327 + 32) = *(_DWORD *)(v358 + 32);
                          *(_OWORD *)v327 = v359;
                          *(_OWORD *)(v327 + 16) = v360;
                          if ((unint64_t)result >= 2)
                          {
                            while (1)
                            {
                              v361 = v352 - 1;
                              v352 = (v352 - 1) >> 1;
                              v362 = *(_QWORD *)(v8 + 40 * v352 + 8);
                              v363 = *(unsigned int *)(v362 + 32);
                              if (v363 > 0x40)
                              {
                                v366 = *(_QWORD *)(v362 + 24);
                                v367 = *(_QWORD *)(v366 + 8 * ((v363 - 1) >> 6)) & (1 << (v363 - 1));
                                v368 = *(_DWORD *)(v354 + 32);
                                v369 = v368 - 1;
                                v370 = *(_QWORD *)(v354 + 24);
                                if (v368 >= 0x41)
                                  v371 = (_QWORD *)(v370 + 8 * (v369 >> 6));
                                else
                                  v371 = (_QWORD *)(v354 + 24);
                                if ((v367 != 0) == ((*v371 >> v369) & 1))
                                {
                                  v372 = v363 + 63;
                                  v373 = v370 - 8;
                                  v374 = (v372 >> 3) & 0x3FFFFFF8;
                                  v375 = v366 - 8;
                                  while (v374)
                                  {
                                    v376 = *(_QWORD *)(v375 + v374);
                                    v377 = *(_QWORD *)(v373 + v374);
                                    v374 -= 8;
                                    if (v376 != v377)
                                    {
                                      if (v376 <= v377)
                                        goto LABEL_348;
                                      goto LABEL_344;
                                    }
                                  }
                                  break;
                                }
                                if (!v367)
                                  break;
                              }
                              else if ((uint64_t)(*(_QWORD *)(v362 + 24) << -(char)v363) >> -(char)v363 >= (uint64_t)(*v355 << -(char)v363) >> -(char)v363)
                              {
                                break;
                              }
LABEL_348:
                              result = v8 + 40 * v352;
                              v364 = *(_OWORD *)result;
                              v365 = *(_OWORD *)(result + 16);
                              *(_DWORD *)(v358 + 32) = *(_DWORD *)(result + 32);
                              *(_OWORD *)v358 = v364;
                              *(_OWORD *)(v358 + 16) = v365;
                              v358 = result;
                              if (v361 <= 1)
                                goto LABEL_345;
                            }
                          }
LABEL_344:
                          result = v358;
LABEL_345:
                          *(_QWORD *)result = v357;
                          *(_QWORD *)(result + 8) = v354;
                          *(_OWORD *)(result + 16) = v481;
                          *(_DWORD *)(result + 32) = v484;
                        }
                      }
                      else if ((uint64_t)(*(_QWORD *)(v353 + 24) << -(char)v356) >> -(char)v356 < (uint64_t)(*v355 << -(char)v356) >> -(char)v356)
                      {
                        goto LABEL_343;
                      }
                    }
                  }
                  if (v10-- <= 2)
                    return result;
                  goto LABEL_322;
                }
              }
            }
          }
          v309 = *(_QWORD *)(v260 + 24);
          v310 = *(_QWORD *)(v309 + 8 * ((v263 - 1) >> 6)) & (1 << (v263 - 1));
          v311 = *(_DWORD *)(v261 + 32);
          v312 = v311 - 1;
          v313 = *(_QWORD *)(v261 + 24);
          if (v311 >= 0x41)
            v262 = (_QWORD *)(v313 + 8 * (v312 >> 6));
          if ((v310 != 0) == ((*v262 >> v312) & 1))
          {
            v320 = v263 + 63;
            v321 = v313 - 8;
            v322 = (v320 >> 3) & 0x3FFFFFF8;
            v323 = v309 - 8;
            do
            {
              if (!v322)
                goto LABEL_265;
              v324 = *(_QWORD *)(v323 + v322);
              v325 = *(_QWORD *)(v321 + v322);
              v322 -= 8;
            }
            while (v324 == v325);
            if (v324 > v325)
              goto LABEL_265;
          }
          else if (!v310)
          {
            goto LABEL_265;
          }
LABEL_264:
          v259 += 40;
          v258 = 2 * v257 + 2;
          goto LABEL_265;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 40 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x1401)
        {
          result = (uint64_t)sub_1C52AD7F4((__int128 *)v12, (__int128 *)v7, (__int128 *)(a2 - 40));
        }
        else
        {
          sub_1C52AD7F4((__int128 *)v7, (__int128 *)v12, (__int128 *)(a2 - 40));
          v13 = 5 * v11;
          v14 = (__int128 *)(v7 + 40 * v11 - 40);
          sub_1C52AD7F4((__int128 *)(v7 + 40), v14, (__int128 *)(a2 - 80));
          v15 = (__int128 *)(v7 + 40 + 8 * v13);
          sub_1C52AD7F4((__int128 *)(v7 + 80), v15, (__int128 *)(a2 - 120));
          result = (uint64_t)sub_1C52AD7F4(v14, (__int128 *)v12, v15);
          v503 = *(_QWORD *)(v7 + 32);
          v485 = *(_OWORD *)v7;
          v493 = *(_OWORD *)(v7 + 16);
          v16 = *(_OWORD *)v12;
          v17 = *(_OWORD *)(v12 + 16);
          *(_DWORD *)(v7 + 32) = *(_DWORD *)(v12 + 32);
          *(_OWORD *)v7 = v16;
          *(_OWORD *)(v7 + 16) = v17;
          *(_DWORD *)(v12 + 32) = v503;
          *(_OWORD *)v12 = v485;
          *(_OWORD *)(v12 + 16) = v493;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v19 = *(_QWORD *)(v7 - 32);
          v18 = *(_QWORD *)(v7 + 8);
          v20 = (uint64_t *)(v18 + 24);
          v21 = *(unsigned int *)(v19 + 32);
          if (v21 > 0x40)
          {
            v156 = *(_QWORD *)(v19 + 24);
            v157 = *(_QWORD *)(v156 + 8 * ((v21 - 1) >> 6)) & (1 << (v21 - 1));
            v102 = *(_DWORD *)(v18 + 32);
            v24 = *(_QWORD *)(v18 + 24);
            v158 = (_QWORD *)(v24 + 8 * ((v102 - 1) >> 6));
            if (v102 < 0x41)
              v158 = (_QWORD *)(v18 + 24);
            if ((v157 != 0) == ((*v158 >> (v102 - 1)) & 1))
            {
              v159 = ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8;
              v160 = v156 - 8;
              do
              {
                if (!v159)
                  goto LABEL_107;
                v161 = *(_QWORD *)(v160 + v159);
                v162 = *(_QWORD *)(v24 + v159 - 8);
                v159 -= 8;
              }
              while (v161 == v162);
              if (v161 <= v162)
                goto LABEL_13;
            }
            else if (v157)
            {
              goto LABEL_13;
            }
          }
          else
          {
            v22 = -v21;
            v23 = (uint64_t)(*(_QWORD *)(v19 + 24) << v22) >> v22;
            v24 = *v20;
            if (v23 < *v20 << v22 >> v22)
              goto LABEL_13;
            v102 = *(_DWORD *)(v18 + 32);
          }
LABEL_107:
          v103 = *(_QWORD *)v7;
          v480 = *(_OWORD *)(v7 + 16);
          v483 = *(_QWORD *)(v7 + 32);
          v104 = *(_QWORD *)(a2 - 32);
          v105 = (_QWORD *)(v104 + 24);
          if (v102 > 0x40)
          {
            v163 = *(_QWORD *)(v24 + 8 * ((v102 - 1) >> 6)) & (1 << (v102 - 1));
            result = *(unsigned int *)(v104 + 32);
            v164 = result - 1;
            v165 = *(_QWORD *)(v104 + 24);
            if (result >= 0x41)
              v105 = (_QWORD *)(v165 + 8 * (v164 >> 6));
            if ((v163 != 0) == ((*v105 >> v164) & 1))
            {
              v178 = (((unint64_t)v102 + 63) >> 3) & 0x3FFFFFF8;
              while (v178)
              {
                v179 = *(_QWORD *)(v24 - 8 + v178);
                result = *(_QWORD *)(v165 - 8 + v178);
                v178 -= 8;
                if (v179 != result)
                {
                  if (v179 <= result)
                    goto LABEL_109;
                  break;
                }
              }
LABEL_181:
              v8 = v7 + 40;
              if (v7 + 40 < a2)
              {
                v166 = (v102 - 1) >> 6;
                v167 = 1 << (v102 - 1);
                result = (((unint64_t)v102 + 63) >> 3) & 0x3FFFFFF8;
                v168 = v7;
                while (1)
                {
                  v169 = *(_QWORD *)(v168 + 48);
                  v168 = v8;
                  v170 = (_QWORD *)(v169 + 24);
                  if (v102 > 0x40)
                  {
                    v171 = *(_DWORD *)(v169 + 32);
                    v172 = v171 - 1;
                    v173 = *(_QWORD *)(v169 + 24);
                    if (v171 >= 0x41)
                      v170 = (_QWORD *)(v173 + 8 * (v172 >> 6));
                    if (((((*(_QWORD *)(v24 + 8 * v166) & v167) != 0) ^ (*v170 >> v172)) & 1) != 0)
                    {
                      if ((*(_QWORD *)(v24 + 8 * v166) & v167) != 0)
                        goto LABEL_122;
                    }
                    else
                    {
                      v174 = v173 - 8;
                      v175 = (((unint64_t)v102 + 63) >> 3) & 0x3FFFFFF8;
                      while (v175)
                      {
                        v176 = *(_QWORD *)(v24 + v175 - 8);
                        v177 = *(_QWORD *)(v174 + v175);
                        v175 -= 8;
                        if (v176 != v177)
                        {
                          if (v176 > v177)
                            break;
                          goto LABEL_122;
                        }
                      }
                    }
                  }
                  else if (v24 << -(char)v102 >> -(char)v102 < (uint64_t)(*v170 << (64 - v102)) >> (64 - v102))
                  {
                    goto LABEL_122;
                  }
                  v8 += 40;
                  if (v168 + 40 >= a2)
                    goto LABEL_122;
                }
              }
              goto LABEL_122;
            }
            if (!v163)
              goto LABEL_181;
          }
          else if (v24 << -(char)v102 >> -(char)v102 >= (uint64_t)(*v105 << -(char)v102) >> -(char)v102)
          {
            goto LABEL_181;
          }
LABEL_109:
          v106 = (v102 - 1) >> 6;
          v107 = 1 << (v102 - 1);
          result = (((unint64_t)v102 + 63) >> 3) & 0x3FFFFFF8;
          v8 = v7;
          do
          {
LABEL_110:
            while (1)
            {
              v108 = *(_QWORD *)(v8 + 48);
              v8 += 40;
              v109 = (_QWORD *)(v108 + 24);
              if (v102 <= 0x40)
                break;
              v110 = *(_DWORD *)(v108 + 32);
              v111 = v110 - 1;
              v112 = *(_QWORD *)(v108 + 24);
              if (v110 >= 0x41)
                v109 = (_QWORD *)(v112 + 8 * (v111 >> 6));
              if (((((*(_QWORD *)(v24 + 8 * v106) & v107) != 0) ^ (*v109 >> v111)) & 1) != 0)
              {
                if ((*(_QWORD *)(v24 + 8 * v106) & v107) != 0)
                  goto LABEL_122;
              }
              else
              {
                v113 = v112 - 8;
                v114 = (((unint64_t)v102 + 63) >> 3) & 0x3FFFFFF8;
                while (v114)
                {
                  v115 = *(_QWORD *)(v24 - 8 + v114);
                  v116 = *(_QWORD *)(v113 + v114);
                  v114 -= 8;
                  if (v115 != v116)
                  {
                    if (v115 <= v116)
                      goto LABEL_122;
                    goto LABEL_110;
                  }
                }
              }
            }
          }
          while (v24 << -(char)v102 >> -(char)v102 >= (uint64_t)(*v109 << (64 - v102)) >> (64 - v102));
LABEL_122:
          v117 = a2;
          if (v8 >= a2)
            goto LABEL_163;
          v118 = (v102 - 1) >> 6;
          v119 = 1 << (v102 - 1);
          result = v24 << -(char)v102 >> -(char)v102;
          for (i = a2; ; i -= 40)
          {
            v117 = i - 40;
            v121 = (_QWORD *)(v104 + 24);
            if (v102 <= 0x40)
            {
              if (result >= (uint64_t)(*v121 << (64 - v102)) >> (64 - v102))
                goto LABEL_163;
              goto LABEL_126;
            }
            v122 = *(_DWORD *)(v104 + 32);
            v123 = v122 - 1;
            v124 = *(_QWORD *)(v104 + 24);
            if (v122 >= 0x41)
              v121 = (_QWORD *)(v124 + 8 * (v123 >> 6));
            if (((((*(_QWORD *)(v24 + 8 * v118) & v119) != 0) ^ (*v121 >> v123)) & 1) == 0)
              break;
            if ((*(_QWORD *)(v24 + 8 * v118) & v119) == 0)
              goto LABEL_163;
LABEL_126:
            v104 = *(_QWORD *)(i - 72);
          }
          v125 = v124 - 8;
          v126 = (((unint64_t)v102 + 63) >> 3) & 0x3FFFFFF8;
          while (v126)
          {
            v127 = *(_QWORD *)(v24 + v126 - 8);
            v128 = *(_QWORD *)(v125 + v126);
            v126 -= 8;
            if (v127 != v128)
            {
              if (v127 <= v128)
                goto LABEL_126;
              break;
            }
          }
LABEL_163:
          while (v8 < v117)
          {
            v504 = *(_QWORD *)(v8 + 32);
            v486 = *(_OWORD *)v8;
            v495 = *(_OWORD *)(v8 + 16);
            v129 = *(_OWORD *)v117;
            v130 = *(_OWORD *)(v117 + 16);
            *(_DWORD *)(v8 + 32) = *(_DWORD *)(v117 + 32);
            *(_OWORD *)v8 = v129;
            *(_OWORD *)(v8 + 16) = v130;
            *(_DWORD *)(v117 + 32) = v504;
            *(_OWORD *)v117 = v486;
            *(_OWORD *)(v117 + 16) = v495;
            v131 = *(unsigned int *)(v18 + 32);
            v132 = (v131 - 1) >> 6;
            v133 = 1 << (v131 - 1);
            v134 = 64 - v131;
            do
            {
              while (1)
              {
LABEL_138:
                while (1)
                {
                  v135 = *(_QWORD *)(v8 + 48);
                  v8 += 40;
                  v136 = (_QWORD *)(v135 + 24);
                  if (v131 > 0x40)
                    break;
                  v137 = *v20;
                  if (*v20 << v134 >> v134 < (uint64_t)(*v136 << v134) >> v134)
                    goto LABEL_150;
                }
                v137 = *v20;
                v138 = *(_DWORD *)(v135 + 32);
                v139 = v138 - 1;
                v140 = *(_QWORD *)(v135 + 24);
                if (v138 >= 0x41)
                  v136 = (_QWORD *)(v140 + 8 * (v139 >> 6));
                if (((((*(_QWORD *)(*v20 + 8 * v132) & v133) != 0) ^ (*v136 >> v139)) & 1) != 0)
                  break;
                v141 = v140 - 8;
                v142 = ((unint64_t)(v131 + 63) >> 3) & 0x3FFFFFF8;
                while (v142)
                {
                  v143 = *(_QWORD *)(v137 + v142 - 8);
                  v144 = *(_QWORD *)(v141 + v142);
                  v142 -= 8;
                  if (v143 != v144)
                  {
                    if (v143 > v144)
                      goto LABEL_138;
                    goto LABEL_150;
                  }
                }
              }
            }
            while ((*(_QWORD *)(*v20 + 8 * v132) & v133) == 0);
LABEL_150:
            result = v137 << v134 >> v134;
            while (1)
            {
LABEL_151:
              while (1)
              {
                v145 = *(_QWORD *)(v117 - 32);
                v117 -= 40;
                v146 = (_QWORD *)(v145 + 24);
                if (v131 > 0x40)
                  break;
                if (result >= (uint64_t)(*v146 << v134) >> v134)
                  goto LABEL_163;
              }
              v147 = *(_DWORD *)(v145 + 32);
              v148 = v147 - 1;
              v149 = *(_QWORD *)(v145 + 24);
              if (v147 >= 0x41)
                v146 = (_QWORD *)(v149 + 8 * (v148 >> 6));
              if (((((*(_QWORD *)(v137 + 8 * v132) & v133) != 0) ^ (*v146 >> v148)) & 1) == 0)
                break;
              if ((*(_QWORD *)(v137 + 8 * v132) & v133) == 0)
                goto LABEL_163;
            }
            v150 = v149 - 8;
            v151 = ((unint64_t)(v131 + 63) >> 3) & 0x3FFFFFF8;
            while (v151)
            {
              v152 = *(_QWORD *)(v137 - 8 + v151);
              v153 = *(_QWORD *)(v150 + v151);
              v151 -= 8;
              if (v152 != v153)
              {
                if (v152 <= v153)
                  goto LABEL_151;
                goto LABEL_163;
              }
            }
          }
          if (v8 - 40 != v7)
          {
            v154 = *(_OWORD *)(v8 - 40);
            v155 = *(_OWORD *)(v8 - 24);
            *(_DWORD *)(v7 + 32) = *(_DWORD *)(v8 - 8);
            *(_OWORD *)v7 = v154;
            *(_OWORD *)(v7 + 16) = v155;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 40) = v103;
          *(_QWORD *)(v8 - 32) = v18;
          *(_DWORD *)(v8 - 8) = v483;
          *(_OWORD *)(v8 - 24) = v480;
          continue;
        }
        v18 = *(_QWORD *)(v7 + 8);
LABEL_13:
        v25 = *(_QWORD *)v7;
        v479 = *(_OWORD *)(v7 + 16);
        v482 = *(_QWORD *)(v7 + 32);
        v26 = (uint64_t *)(v18 + 24);
        v27 = v7;
        while (1)
        {
LABEL_14:
          while (1)
          {
            v28 = v27;
            v27 += 40;
            v29 = *(_QWORD *)(v28 + 48);
            v30 = *(unsigned int *)(v29 + 32);
            if (v30 > 0x40)
              break;
            v31 = -v30;
            v32 = (uint64_t)(*(_QWORD *)(v29 + 24) << v31) >> v31;
            v33 = *v26;
            if (v32 >= *v26 << v31 >> v31)
              goto LABEL_27;
          }
          v34 = *(_QWORD *)(v29 + 24);
          v35 = *(_QWORD *)(v34 + 8 * ((v30 - 1) >> 6)) & (1 << (v30 - 1));
          v36 = *(_DWORD *)(v18 + 32);
          v37 = v36 - 1;
          v33 = *(_QWORD *)(v18 + 24);
          v38 = (_QWORD *)(v36 >= 0x41 ? v33 + 8 * (v37 >> 6) : v18 + 24);
          if ((v35 != 0) == ((*v38 >> v37) & 1))
            break;
          if (!v35)
            goto LABEL_27;
        }
        v39 = ((unint64_t)(v30 + 63) >> 3) & 0x3FFFFFF8;
        v40 = v34 - 8;
        while (v39)
        {
          v41 = *(_QWORD *)(v40 + v39);
          v42 = *(_QWORD *)(v33 + v39 - 8);
          v39 -= 8;
          if (v41 != v42)
          {
            if (v41 <= v42)
              goto LABEL_14;
            break;
          }
        }
LABEL_27:
        if (v28 == v7)
        {
          v43 = a2;
          if (v27 < a2)
          {
            v43 = a2;
            do
            {
LABEL_45:
              while (1)
              {
                v55 = *(_QWORD *)(v43 - 32);
                v43 -= 40;
                v56 = *(unsigned int *)(v55 + 32);
                if (v56 <= 0x40)
                  break;
                v57 = *(_QWORD *)(v55 + 24);
                v58 = *(_QWORD *)(v57 + 8 * ((v56 - 1) >> 6)) & (1 << (v56 - 1));
                v59 = *(_DWORD *)(v18 + 32);
                v60 = v59 - 1;
                if (v59 >= 0x41)
                  v61 = (_QWORD *)(v33 + 8 * (v60 >> 6));
                else
                  v61 = (_QWORD *)(v18 + 24);
                if ((v58 != 0) == ((*v61 >> v60) & 1))
                {
                  v63 = ((unint64_t)(v56 + 63) >> 3) & 0x3FFFFFF8;
                  v64 = v57 - 8;
                  do
                  {
                    if (!v63)
                    {
                      if (v27 < v43)
                        goto LABEL_45;
                      goto LABEL_70;
                    }
                    v65 = *(_QWORD *)(v64 + v63);
                    v66 = *(_QWORD *)(v33 - 8 + v63);
                    v63 -= 8;
                  }
                  while (v65 == v66);
                  if (v65 <= v66 || v27 >= v43)
                    goto LABEL_70;
                }
                else
                {
                  if (v58)
                    v62 = 1;
                  else
                    v62 = v27 >= v43;
                  if (v62)
                    goto LABEL_70;
                }
              }
            }
            while ((uint64_t)(*(_QWORD *)(v55 + 24) << -(char)v56) >> -(char)v56 >= v33 << -(char)v56 >> -(char)v56
                 && v27 < v43);
          }
        }
        else
        {
          v43 = a2;
          do
          {
LABEL_29:
            while (1)
            {
              v44 = *(_QWORD *)(v43 - 32);
              v43 -= 40;
              v45 = *(unsigned int *)(v44 + 32);
              if (v45 <= 0x40)
                break;
              v46 = *(_QWORD *)(v44 + 24);
              v47 = *(_QWORD *)(v46 + 8 * ((v45 - 1) >> 6)) & (1 << (v45 - 1));
              v48 = *(_DWORD *)(v18 + 32);
              v49 = v48 - 1;
              if (v48 >= 0x41)
                v50 = (_QWORD *)(v33 + 8 * (v49 >> 6));
              else
                v50 = (_QWORD *)(v18 + 24);
              if ((v47 != 0) == ((*v50 >> v49) & 1))
              {
                v51 = ((unint64_t)(v45 + 63) >> 3) & 0x3FFFFFF8;
                v52 = v46 - 8;
                while (v51)
                {
                  v53 = *(_QWORD *)(v52 + v51);
                  v54 = *(_QWORD *)(v33 - 8 + v51);
                  v51 -= 8;
                  if (v53 != v54)
                  {
                    if (v53 <= v54)
                      goto LABEL_70;
                    goto LABEL_29;
                  }
                }
              }
              else if (v47)
              {
                goto LABEL_70;
              }
            }
          }
          while ((uint64_t)(*(_QWORD *)(v44 + 24) << -(char)v45) >> -(char)v45 >= v33 << -(char)v45 >> -(char)v45);
        }
LABEL_70:
        v8 = v27;
        if (v27 < v43)
        {
          v69 = v43;
          do
          {
            v70 = *(_OWORD *)v8;
            v494 = *(_OWORD *)(v8 + 16);
            v71 = *(_QWORD *)(v8 + 32);
            v73 = *(_OWORD *)v69;
            v72 = *(_OWORD *)(v69 + 16);
            *(_DWORD *)(v8 + 32) = *(_DWORD *)(v69 + 32);
            *(_OWORD *)v8 = v73;
            *(_OWORD *)(v8 + 16) = v72;
            *(_DWORD *)(v69 + 32) = v71;
            *(_OWORD *)v69 = v70;
            *(_OWORD *)(v69 + 16) = v494;
            do
            {
              while (1)
              {
                while (1)
                {
                  v74 = *(_QWORD *)(v8 + 48);
                  v8 += 40;
                  v75 = *(unsigned int *)(v74 + 32);
                  if (v75 > 0x40)
                    break;
                  v76 = -v75;
                  v77 = (uint64_t)(*(_QWORD *)(v74 + 24) << v76) >> v76;
                  v78 = *v26;
                  if (v77 >= *v26 << v76 >> v76)
                    goto LABEL_86;
                }
                v79 = *(_QWORD *)(v74 + 24);
                v80 = *(_QWORD *)(v79 + 8 * ((v75 - 1) >> 6)) & (1 << (v75 - 1));
                v81 = *(_DWORD *)(v18 + 32);
                v82 = v81 - 1;
                v78 = *(_QWORD *)(v18 + 24);
                v83 = (_QWORD *)(v81 >= 0x41 ? v78 + 8 * (v82 >> 6) : v18 + 24);
                if ((v80 != 0) == ((*v83 >> v82) & 1))
                  break;
                if (!v80)
                  goto LABEL_86;
              }
              v84 = ((unint64_t)(v75 + 63) >> 3) & 0x3FFFFFF8;
              v85 = v79 - 8;
              do
              {
                if (!v84)
                  goto LABEL_86;
                v86 = *(_QWORD *)(v85 + v84);
                v87 = *(_QWORD *)(v78 + v84 - 8);
                v84 -= 8;
              }
              while (v86 == v87);
            }
            while (v86 <= v87);
            do
            {
LABEL_86:
              while (1)
              {
                v88 = *(_QWORD *)(v69 - 32);
                v69 -= 40;
                v89 = *(unsigned int *)(v88 + 32);
                if (v89 <= 0x40)
                  break;
                v90 = *(_QWORD *)(v88 + 24);
                v91 = *(_QWORD *)(v90 + 8 * ((v89 - 1) >> 6)) & (1 << (v89 - 1));
                v92 = *(_DWORD *)(v18 + 32);
                v93 = v92 - 1;
                if (v92 >= 0x41)
                  v94 = (_QWORD *)(v78 + 8 * (v93 >> 6));
                else
                  v94 = (_QWORD *)(v18 + 24);
                if ((v91 != 0) == ((*v94 >> v93) & 1))
                {
                  v95 = ((unint64_t)(v89 + 63) >> 3) & 0x3FFFFFF8;
                  v96 = v90 - 8;
                  while (v95)
                  {
                    v97 = *(_QWORD *)(v96 + v95);
                    v98 = *(_QWORD *)(v78 - 8 + v95);
                    v95 -= 8;
                    if (v97 != v98)
                    {
                      if (v97 <= v98)
                        goto LABEL_99;
                      goto LABEL_86;
                    }
                  }
                }
                else if (v91)
                {
                  goto LABEL_99;
                }
              }
            }
            while ((uint64_t)(*(_QWORD *)(v88 + 24) << -(char)v89) >> -(char)v89 >= v78 << -(char)v89 >> -(char)v89);
LABEL_99:
            ;
          }
          while (v8 < v69);
        }
        if (v8 - 40 != v7)
        {
          v99 = *(_OWORD *)(v8 - 40);
          v100 = *(_OWORD *)(v8 - 24);
          *(_DWORD *)(v7 + 32) = *(_DWORD *)(v8 - 8);
          *(_OWORD *)v7 = v99;
          *(_OWORD *)(v7 + 16) = v100;
        }
        *(_QWORD *)(v8 - 40) = v25;
        *(_QWORD *)(v8 - 32) = v18;
        *(_DWORD *)(v8 - 8) = v482;
        *(_OWORD *)(v8 - 24) = v479;
        if (v27 < v43)
        {
LABEL_105:
          result = sub_1C52ABAA0(v7, v8 - 40, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v101 = sub_1C52ADB98(v7, v8 - 40);
        result = sub_1C52ADB98(v8, a2);
        if (!(_DWORD)result)
        {
          if (v101)
            continue;
          goto LABEL_105;
        }
        a2 = v8 - 40;
        if (!v101)
          goto LABEL_2;
        return result;
    }
  }
}

__int128 *sub_1C52AD7F4(__int128 *result, __int128 *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int v29;
  __int128 v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;

  v3 = *((_QWORD *)a2 + 1);
  v4 = (uint64_t *)(v3 + 24);
  v5 = *((_QWORD *)result + 1);
  v6 = (_QWORD *)(v5 + 24);
  v7 = *(unsigned int *)(v3 + 32);
  if (v7 > 0x40)
  {
    v8 = *v4;
    v9 = *(_QWORD *)(*v4 + 8 * ((v7 - 1) >> 6)) >> (v7 - 1);
    v31 = *(_DWORD *)(v5 + 32);
    v32 = v31 - 1;
    v33 = *(_QWORD *)(v5 + 24);
    if (v31 >= 0x41)
      v6 = (_QWORD *)(v33 + 8 * (v32 >> 6));
    if (((v9 ^ (*v6 >> v32)) & 1) == 0)
    {
      v34 = v33 - 8;
      v35 = ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8;
      while (v35)
      {
        v36 = *(_QWORD *)(v8 + v35 - 8);
        v37 = *(_QWORD *)(v34 + v35);
        v35 -= 8;
        if (v36 != v37)
        {
          LOBYTE(v9) = v36 <= v37;
          goto LABEL_3;
        }
      }
      LOBYTE(v9) = 0;
    }
  }
  else
  {
    v8 = *v4;
    LOBYTE(v9) = *v4 << -(char)v7 >> -(char)v7 < (uint64_t)(*v6 << -(char)v7) >> -(char)v7;
  }
LABEL_3:
  v10 = *((_QWORD *)a3 + 1);
  v11 = *(unsigned int *)(v10 + 32);
  if (v11 > 0x40)
  {
    v38 = *(_QWORD *)(v10 + 24);
    v10 = *(_QWORD *)(v38 + 8 * ((v11 - 1) >> 6)) >> (v11 - 1);
    v39 = v7 - 1;
    if (v7 >= 0x41)
      v4 = (uint64_t *)(v8 + 8 * (v39 >> 6));
    if (((v10 ^ ((unint64_t)*v4 >> v39)) & 1) == 0)
    {
      v40 = v8 - 8;
      v41 = ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8;
      while (v41)
      {
        v42 = *(_QWORD *)(v38 - 8 + v41);
        v10 = *(_QWORD *)(v40 + v41);
        v41 -= 8;
        if (v42 != v10)
        {
          LOBYTE(v10) = v42 <= v10;
          goto LABEL_5;
        }
      }
      if ((v9 & 1) == 0)
        return result;
      goto LABEL_28;
    }
  }
  else
  {
    LOBYTE(v10) = (uint64_t)(*(_QWORD *)(v10 + 24) << -(char)v11) >> -(char)v11 < v8 << -(char)v11 >> -(char)v11;
  }
LABEL_5:
  if ((v9 & 1) == 0)
  {
    if ((v10 & 1) == 0)
      return result;
    v17 = *((_QWORD *)a2 + 4);
    v18 = *a2;
    v19 = a2[1];
    v20 = *((_DWORD *)a3 + 8);
    v21 = a3[1];
    *a2 = *a3;
    a2[1] = v21;
    *((_DWORD *)a2 + 8) = v20;
    *a3 = v18;
    a3[1] = v19;
    *((_DWORD *)a3 + 8) = v17;
    v22 = *((_QWORD *)a2 + 1);
    v23 = *((_QWORD *)result + 1);
    v24 = (_QWORD *)(v23 + 24);
    v25 = *(unsigned int *)(v22 + 32);
    if (v25 > 0x40)
    {
      v59 = *(_QWORD *)(v22 + 24);
      v60 = *(_QWORD *)(v59 + 8 * ((v25 - 1) >> 6)) & (1 << (v25 - 1));
      v61 = *(_DWORD *)(v23 + 32);
      v62 = v61 - 1;
      v63 = *(_QWORD *)(v23 + 24);
      if (v61 >= 0x41)
        v24 = (_QWORD *)(v63 + 8 * (v62 >> 6));
      if ((v60 != 0) == ((*v24 >> v62) & 1))
      {
        v70 = v25 + 63;
        v71 = v63 - 8;
        v72 = (v70 >> 3) & 0x3FFFFFF8;
        v73 = v59 - 8;
        while (v72)
        {
          v74 = *(_QWORD *)(v73 + v72);
          v75 = *(_QWORD *)(v71 + v72);
          v72 -= 8;
          if (v74 != v75)
          {
            if (v74 <= v75)
              goto LABEL_11;
            return result;
          }
        }
        return result;
      }
      if (!v60)
        return result;
    }
    else if ((uint64_t)(*(_QWORD *)(v22 + 24) << -(char)v25) >> -(char)v25 >= (uint64_t)(*v24 << -(char)v25) >> -(char)v25)
    {
      return result;
    }
LABEL_11:
    v26 = *((_QWORD *)result + 4);
    v27 = *result;
    v28 = result[1];
    v29 = *((_DWORD *)a2 + 8);
    v30 = a2[1];
    *result = *a2;
    result[1] = v30;
    *((_DWORD *)result + 8) = v29;
    *a2 = v27;
    a2[1] = v28;
    *((_DWORD *)a2 + 8) = v26;
    return result;
  }
  if ((v10 & 1) != 0)
  {
    v12 = *((_QWORD *)result + 4);
    v13 = *result;
    v14 = result[1];
    v15 = *((_DWORD *)a3 + 8);
    v16 = a3[1];
    *result = *a3;
    result[1] = v16;
    *((_DWORD *)result + 8) = v15;
LABEL_31:
    *a3 = v13;
    a3[1] = v14;
    *((_DWORD *)a3 + 8) = v12;
    return result;
  }
LABEL_28:
  v43 = *((_QWORD *)result + 4);
  v44 = *result;
  v45 = result[1];
  v46 = *((_DWORD *)a2 + 8);
  v47 = a2[1];
  *result = *a2;
  result[1] = v47;
  *((_DWORD *)result + 8) = v46;
  *a2 = v44;
  a2[1] = v45;
  *((_DWORD *)a2 + 8) = v43;
  v48 = *((_QWORD *)a3 + 1);
  v49 = *((_QWORD *)a2 + 1);
  v50 = (_QWORD *)(v49 + 24);
  v51 = *(unsigned int *)(v48 + 32);
  if (v51 <= 0x40)
  {
    if ((uint64_t)(*(_QWORD *)(v48 + 24) << -(char)v51) >> -(char)v51 >= (uint64_t)(*v50 << -(char)v51) >> -(char)v51)
      return result;
    goto LABEL_30;
  }
  v54 = *(_QWORD *)(v48 + 24);
  v55 = *(_QWORD *)(v54 + 8 * ((v51 - 1) >> 6)) & (1 << (v51 - 1));
  v56 = *(_DWORD *)(v49 + 32);
  v57 = v56 - 1;
  v58 = *(_QWORD *)(v49 + 24);
  if (v56 >= 0x41)
    v50 = (_QWORD *)(v58 + 8 * (v57 >> 6));
  if ((v55 != 0) == ((*v50 >> v57) & 1))
  {
    v64 = v51 + 63;
    v65 = v58 - 8;
    v66 = (v64 >> 3) & 0x3FFFFFF8;
    v67 = v54 - 8;
    while (v66)
    {
      v68 = *(_QWORD *)(v67 + v66);
      v69 = *(_QWORD *)(v65 + v66);
      v66 -= 8;
      if (v68 != v69)
      {
        if (v68 <= v69)
          goto LABEL_30;
        return result;
      }
    }
  }
  else if (v55)
  {
LABEL_30:
    v12 = *((_QWORD *)a2 + 4);
    v13 = *a2;
    v14 = a2[1];
    v52 = *((_DWORD *)a3 + 8);
    v53 = a3[1];
    *a2 = *a3;
    a2[1] = v53;
    *((_DWORD *)a2 + 8) = v52;
    goto LABEL_31;
  }
  return result;
}

BOOL sub_1C52ADB98(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __int128 *v51;
  __int128 *v52;
  __int128 *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  __int128 v142;
  uint64_t v143;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(_QWORD *)(a2 - 32);
      v7 = *(_QWORD *)(a1 + 8);
      v8 = (_QWORD *)(v7 + 24);
      v9 = *(unsigned int *)(v6 + 32);
      if (v9 > 0x40)
      {
        v87 = *(_QWORD *)(v6 + 24);
        v88 = *(_QWORD *)(v87 + 8 * ((v9 - 1) >> 6)) & (1 << (v9 - 1));
        v89 = *(_DWORD *)(v7 + 32);
        v90 = v89 - 1;
        v91 = *(_QWORD *)(v7 + 24);
        if (v89 >= 0x41)
          v8 = (_QWORD *)(v91 + 8 * (v90 >> 6));
        if ((v88 != 0) == ((*v8 >> v90) & 1))
        {
          v112 = v9 + 63;
          v113 = v91 - 8;
          v114 = (v112 >> 3) & 0x3FFFFFF8;
          v115 = v87 - 8;
          do
          {
            if (!v114)
              return 1;
            v116 = *(_QWORD *)(v115 + v114);
            v117 = *(_QWORD *)(v113 + v114);
            v114 -= 8;
          }
          while (v116 == v117);
          if (v116 > v117)
            return 1;
        }
        else if (!v88)
        {
          return result;
        }
      }
      else if ((uint64_t)(*(_QWORD *)(v6 + 24) << -(char)v9) >> -(char)v9 >= (uint64_t)(*v8 << -(char)v9) >> -(char)v9)
      {
        return result;
      }
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(_OWORD *)a1;
      v12 = *(_OWORD *)(a1 + 16);
      v13 = *(_DWORD *)(a2 - 8);
      v14 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 16) = v14;
      *(_DWORD *)(a1 + 32) = v13;
      *(_OWORD *)(a2 - 24) = v12;
      *(_OWORD *)(a2 - 40) = v11;
      result = 1;
      *(_DWORD *)(a2 - 8) = v10;
      return result;
    case 3uLL:
      sub_1C52AD7F4((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a2 - 40));
      return 1;
    case 4uLL:
      sub_1C52AE34C(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      v51 = (__int128 *)(a1 + 40);
      v52 = (__int128 *)(a1 + 80);
      v53 = (__int128 *)(a1 + 120);
      sub_1C52AE34C(a1, a1 + 40, a1 + 80, a1 + 120);
      v54 = *(_QWORD *)(a2 - 32);
      v55 = *(_QWORD *)(a1 + 128);
      v56 = (_QWORD *)(v55 + 24);
      v57 = *(unsigned int *)(v54 + 32);
      if (v57 > 0x40)
      {
        v92 = *(_QWORD *)(v54 + 24);
        v93 = *(_QWORD *)(v92 + 8 * ((v57 - 1) >> 6)) & (1 << (v57 - 1));
        v94 = *(_DWORD *)(v55 + 32);
        v95 = v94 - 1;
        v96 = *(_QWORD *)(v55 + 24);
        if (v94 >= 0x41)
          v56 = (_QWORD *)(v96 + 8 * (v95 >> 6));
        if ((v93 != 0) == ((*v56 >> v95) & 1))
        {
          v118 = v57 + 63;
          v119 = v96 - 8;
          v120 = (v118 >> 3) & 0x3FFFFFF8;
          v121 = v92 - 8;
          do
          {
            if (!v120)
              return 1;
            v122 = *(_QWORD *)(v121 + v120);
            v123 = *(_QWORD *)(v119 + v120);
            v120 -= 8;
          }
          while (v122 == v123);
          if (v122 > v123)
            return 1;
        }
        else if (!v93)
        {
          return 1;
        }
      }
      else if ((uint64_t)(*(_QWORD *)(v54 + 24) << -(char)v57) >> -(char)v57 >= (uint64_t)(*v56 << -(char)v57) >> -(char)v57)
      {
        return 1;
      }
      v58 = *(_QWORD *)(a1 + 152);
      v59 = *v53;
      v60 = *(_OWORD *)(a1 + 136);
      v61 = *(_DWORD *)(a2 - 8);
      v62 = *(_OWORD *)(a2 - 24);
      *v53 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 136) = v62;
      *(_DWORD *)(a1 + 152) = v61;
      *(_OWORD *)(a2 - 24) = v60;
      *(_OWORD *)(a2 - 40) = v59;
      *(_DWORD *)(a2 - 8) = v58;
      v63 = *(_QWORD *)(a1 + 128);
      v64 = *(_QWORD *)(a1 + 88);
      v65 = (_QWORD *)(v64 + 24);
      v66 = *(unsigned int *)(v63 + 32);
      if (v66 > 0x40)
      {
        v97 = *(_QWORD *)(v63 + 24);
        v98 = *(_QWORD *)(v97 + 8 * ((v66 - 1) >> 6)) & (1 << (v66 - 1));
        v99 = *(_DWORD *)(v64 + 32);
        v100 = v99 - 1;
        v101 = *(_QWORD *)(v64 + 24);
        if (v99 >= 0x41)
          v65 = (_QWORD *)(v101 + 8 * (v100 >> 6));
        if ((v98 != 0) == ((*v65 >> v100) & 1))
        {
          v124 = v66 + 63;
          v125 = v101 - 8;
          v126 = (v124 >> 3) & 0x3FFFFFF8;
          v127 = v97 - 8;
          do
          {
            if (!v126)
              return 1;
            v128 = *(_QWORD *)(v127 + v126);
            v129 = *(_QWORD *)(v125 + v126);
            v126 -= 8;
          }
          while (v128 == v129);
          if (v128 > v129)
            return 1;
        }
        else if (!v98)
        {
          return 1;
        }
      }
      else if ((uint64_t)(*(_QWORD *)(v63 + 24) << -(char)v66) >> -(char)v66 >= (uint64_t)(*v65 << -(char)v66) >> -(char)v66)
      {
        return 1;
      }
      v67 = *(_QWORD *)(a1 + 112);
      v69 = *v52;
      v68 = *(_OWORD *)(a1 + 96);
      v70 = *(_OWORD *)(a1 + 136);
      *v52 = *v53;
      *(_OWORD *)(a1 + 96) = v70;
      *(_DWORD *)(a1 + 112) = *(_DWORD *)(a1 + 152);
      *v53 = v69;
      *(_OWORD *)(a1 + 136) = v68;
      *(_DWORD *)(a1 + 152) = v67;
      v71 = *(_QWORD *)(a1 + 88);
      v72 = *(_QWORD *)(a1 + 48);
      v73 = (_QWORD *)(v72 + 24);
      v74 = *(unsigned int *)(v71 + 32);
      if (v74 > 0x40)
      {
        v102 = *(_QWORD *)(v71 + 24);
        v103 = *(_QWORD *)(v102 + 8 * ((v74 - 1) >> 6)) & (1 << (v74 - 1));
        v104 = *(_DWORD *)(v72 + 32);
        v105 = v104 - 1;
        v106 = *(_QWORD *)(v72 + 24);
        if (v104 >= 0x41)
          v73 = (_QWORD *)(v106 + 8 * (v105 >> 6));
        if ((v103 != 0) == ((*v73 >> v105) & 1))
        {
          v130 = v74 + 63;
          v131 = v106 - 8;
          v132 = (v130 >> 3) & 0x3FFFFFF8;
          v133 = v102 - 8;
          do
          {
            if (!v132)
              return 1;
            v134 = *(_QWORD *)(v133 + v132);
            v135 = *(_QWORD *)(v131 + v132);
            v132 -= 8;
          }
          while (v134 == v135);
          if (v134 > v135)
            return 1;
        }
        else if (!v103)
        {
          return 1;
        }
      }
      else if ((uint64_t)(*(_QWORD *)(v71 + 24) << -(char)v74) >> -(char)v74 >= (uint64_t)(*v73 << -(char)v74) >> -(char)v74)
      {
        return 1;
      }
      v75 = *(_QWORD *)(a1 + 72);
      v77 = *v51;
      v76 = *(_OWORD *)(a1 + 56);
      v78 = *(_OWORD *)(a1 + 96);
      *v51 = *v52;
      *(_OWORD *)(a1 + 56) = v78;
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
      *v52 = v77;
      *(_OWORD *)(a1 + 96) = v76;
      *(_DWORD *)(a1 + 112) = v75;
      v79 = *(_QWORD *)(a1 + 48);
      v80 = *(_QWORD *)(a1 + 8);
      v81 = (_QWORD *)(v80 + 24);
      v82 = *(unsigned int *)(v79 + 32);
      if (v82 <= 0x40)
      {
        if ((uint64_t)(*(_QWORD *)(v79 + 24) << -(char)v82) >> -(char)v82 >= (uint64_t)(*v81 << -(char)v82) >> -(char)v82)
          return 1;
        goto LABEL_49;
      }
      v107 = *(_QWORD *)(v79 + 24);
      v108 = *(_QWORD *)(v107 + 8 * ((v82 - 1) >> 6)) & (1 << (v82 - 1));
      v109 = *(_DWORD *)(v80 + 32);
      v110 = v109 - 1;
      v111 = *(_QWORD *)(v80 + 24);
      if (v109 >= 0x41)
        v81 = (_QWORD *)(v111 + 8 * (v110 >> 6));
      if ((v108 != 0) == ((*v81 >> v110) & 1))
      {
        v136 = v82 + 63;
        v137 = v111 - 8;
        v138 = (v136 >> 3) & 0x3FFFFFF8;
        v139 = v107 - 8;
        do
        {
          if (!v138)
            return 1;
          v140 = *(_QWORD *)(v139 + v138);
          v141 = *(_QWORD *)(v137 + v138);
          v138 -= 8;
        }
        while (v140 == v141);
        if (v140 <= v141)
        {
LABEL_49:
          v83 = *(_QWORD *)(a1 + 32);
          v85 = *(_OWORD *)a1;
          v84 = *(_OWORD *)(a1 + 16);
          v86 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)a1 = *v51;
          *(_OWORD *)(a1 + 16) = v86;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
          *v51 = v85;
          *(_OWORD *)(a1 + 56) = v84;
          result = 1;
          *(_DWORD *)(a1 + 72) = v83;
          return result;
        }
      }
      else if (v108)
      {
        goto LABEL_49;
      }
      return 1;
    default:
      v15 = a1 + 80;
      sub_1C52AD7F4((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80));
      v16 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v17 = 0;
      while (2)
      {
        v18 = *(_QWORD *)(v16 + 8);
        v19 = *(_QWORD *)(v15 + 8);
        v20 = (_QWORD *)(v19 + 24);
        v21 = *(unsigned int *)(v18 + 32);
        if (v21 > 0x40)
        {
          v40 = *(_QWORD *)(v18 + 24);
          v41 = *(_QWORD *)(v40 + 8 * ((v21 - 1) >> 6)) & (1 << (v21 - 1));
          v42 = *(_DWORD *)(v19 + 32);
          v43 = v42 - 1;
          v44 = *(_QWORD *)(v19 + 24);
          if (v42 >= 0x41)
            v20 = (_QWORD *)(v44 + 8 * (v43 >> 6));
          if ((v41 != 0) == ((*v20 >> v43) & 1))
          {
            v45 = v21 + 63;
            v46 = v44 - 8;
            v47 = (v45 >> 3) & 0x3FFFFFF8;
            v48 = v40 - 8;
            do
            {
              if (!v47)
                goto LABEL_25;
              v49 = *(_QWORD *)(v48 + v47);
              v50 = *(_QWORD *)(v46 + v47);
              v47 -= 8;
            }
            while (v49 == v50);
            if (v49 > v50)
            {
LABEL_25:
              v15 = v16;
              v16 += 40;
              if (v16 == a2)
                return 1;
              continue;
            }
          }
          else if (!v41)
          {
            goto LABEL_25;
          }
        }
        else if ((uint64_t)(*(_QWORD *)(v18 + 24) << -(char)v21) >> -(char)v21 >= (uint64_t)(*v20 << -(char)v21) >> -(char)v21)
        {
          goto LABEL_25;
        }
        break;
      }
      v22 = *(_QWORD *)v16;
      v143 = *(_QWORD *)(v16 + 32);
      v142 = *(_OWORD *)(v16 + 16);
      *(_DWORD *)(v16 + 32) = *(_DWORD *)(v15 + 32);
      v23 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)v16 = *(_OWORD *)v15;
      *(_OWORD *)(v16 + 16) = v23;
      v24 = a1;
      if (v15 == a1)
        goto LABEL_24;
      while (2)
      {
        v25 = *(_QWORD *)(v15 - 32);
        v26 = (_QWORD *)(v25 + 24);
        v27 = *(unsigned int *)(v18 + 32);
        if (v27 <= 0x40)
        {
          if ((uint64_t)(*(_QWORD *)(v18 + 24) << -(char)v27) >> -(char)v27 >= (uint64_t)(*v26 << -(char)v27) >> -(char)v27)
            goto LABEL_23;
LABEL_12:
          v28 = *(_OWORD *)(v15 - 24);
          *(_OWORD *)v15 = *(_OWORD *)(v15 - 40);
          *(_OWORD *)(v15 + 16) = v28;
          *(_DWORD *)(v15 + 32) = *(_DWORD *)(v15 - 8);
          v15 -= 40;
          if (v15 == a1)
          {
            v24 = a1;
            goto LABEL_24;
          }
          continue;
        }
        break;
      }
      v29 = *(_QWORD *)(v18 + 24);
      v30 = *(_QWORD *)(v29 + 8 * ((v27 - 1) >> 6)) & (1 << (v27 - 1));
      v31 = *(_DWORD *)(v25 + 32);
      v32 = v31 - 1;
      v33 = *(_QWORD *)(v25 + 24);
      if (v31 >= 0x41)
        v26 = (_QWORD *)(v33 + 8 * (v32 >> 6));
      if ((v30 != 0) != ((*v26 >> v32) & 1))
      {
        if (!v30)
          goto LABEL_23;
        goto LABEL_12;
      }
      v34 = v27 + 63;
      v35 = v33 - 8;
      v36 = (v34 >> 3) & 0x3FFFFFF8;
      v37 = v29 - 8;
      while (v36)
      {
        v38 = *(_QWORD *)(v37 + v36);
        v39 = *(_QWORD *)(v35 + v36);
        v36 -= 8;
        if (v38 != v39)
        {
          if (v38 <= v39)
            goto LABEL_12;
          break;
        }
      }
LABEL_23:
      v24 = v15;
LABEL_24:
      *(_QWORD *)v24 = v22;
      *(_QWORD *)(v24 + 8) = v18;
      *(_OWORD *)(v24 + 16) = v142;
      *(_DWORD *)(v24 + 32) = v143;
      if (++v17 != 8)
        goto LABEL_25;
      return v16 + 40 == a2;
  }
}

__int128 *sub_1C52AE34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *result;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  int v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;

  result = sub_1C52AD7F4((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  v9 = *(_QWORD *)(a4 + 8);
  v10 = *(_QWORD *)(a3 + 8);
  v11 = (_QWORD *)(v10 + 24);
  v12 = *(unsigned int *)(v9 + 32);
  if (v12 > 0x40)
  {
    v36 = *(_QWORD *)(v9 + 24);
    v37 = *(_QWORD *)(v36 + 8 * ((v12 - 1) >> 6)) & (1 << (v12 - 1));
    v38 = *(_DWORD *)(v10 + 32);
    v39 = v38 - 1;
    v40 = *(_QWORD *)(v10 + 24);
    if (v38 >= 0x41)
      v11 = (_QWORD *)(v40 + 8 * (v39 >> 6));
    if ((v37 != 0) == ((*v11 >> v39) & 1))
    {
      v51 = v12 + 63;
      v52 = v40 - 8;
      v53 = (v51 >> 3) & 0x3FFFFFF8;
      v54 = v36 - 8;
      while (v53)
      {
        v55 = *(_QWORD *)(v54 + v53);
        v56 = *(_QWORD *)(v52 + v53);
        v53 -= 8;
        if (v55 != v56)
        {
          if (v55 <= v56)
            goto LABEL_3;
          return result;
        }
      }
      return result;
    }
    if (!v37)
      return result;
  }
  else if ((uint64_t)(*(_QWORD *)(v9 + 24) << -(char)v12) >> -(char)v12 >= (uint64_t)(*v11 << -(char)v12) >> -(char)v12)
  {
    return result;
  }
LABEL_3:
  v13 = *(_QWORD *)(a3 + 32);
  v14 = *(_OWORD *)a3;
  v15 = *(_OWORD *)(a3 + 16);
  v16 = *(_DWORD *)(a4 + 32);
  v17 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)(a3 + 16) = v17;
  *(_DWORD *)(a3 + 32) = v16;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v15;
  *(_DWORD *)(a4 + 32) = v13;
  v18 = *(_QWORD *)(a3 + 8);
  v19 = *(_QWORD *)(a2 + 8);
  v20 = (_QWORD *)(v19 + 24);
  v21 = *(unsigned int *)(v18 + 32);
  if (v21 > 0x40)
  {
    v41 = *(_QWORD *)(v18 + 24);
    v42 = *(_QWORD *)(v41 + 8 * ((v21 - 1) >> 6)) & (1 << (v21 - 1));
    v43 = *(_DWORD *)(v19 + 32);
    v44 = v43 - 1;
    v45 = *(_QWORD *)(v19 + 24);
    if (v43 >= 0x41)
      v20 = (_QWORD *)(v45 + 8 * (v44 >> 6));
    if ((v42 != 0) == ((*v20 >> v44) & 1))
    {
      v57 = v21 + 63;
      v58 = v45 - 8;
      v59 = (v57 >> 3) & 0x3FFFFFF8;
      v60 = v41 - 8;
      while (v59)
      {
        v61 = *(_QWORD *)(v60 + v59);
        v62 = *(_QWORD *)(v58 + v59);
        v59 -= 8;
        if (v61 != v62)
        {
          if (v61 <= v62)
            goto LABEL_5;
          return result;
        }
      }
      return result;
    }
    if (!v42)
      return result;
  }
  else if ((uint64_t)(*(_QWORD *)(v18 + 24) << -(char)v21) >> -(char)v21 >= (uint64_t)(*v20 << -(char)v21) >> -(char)v21)
  {
    return result;
  }
LABEL_5:
  v22 = *(_QWORD *)(a2 + 32);
  v23 = *(_OWORD *)a2;
  v24 = *(_OWORD *)(a2 + 16);
  v25 = *(_DWORD *)(a3 + 32);
  v26 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v26;
  *(_DWORD *)(a2 + 32) = v25;
  *(_OWORD *)a3 = v23;
  *(_OWORD *)(a3 + 16) = v24;
  *(_DWORD *)(a3 + 32) = v22;
  v27 = *(_QWORD *)(a2 + 8);
  v28 = *(_QWORD *)(a1 + 8);
  v29 = (_QWORD *)(v28 + 24);
  v30 = *(unsigned int *)(v27 + 32);
  if (v30 <= 0x40)
  {
    if ((uint64_t)(*(_QWORD *)(v27 + 24) << -(char)v30) >> -(char)v30 >= (uint64_t)(*v29 << -(char)v30) >> -(char)v30)
      return result;
    goto LABEL_7;
  }
  v46 = *(_QWORD *)(v27 + 24);
  v47 = *(_QWORD *)(v46 + 8 * ((v30 - 1) >> 6)) & (1 << (v30 - 1));
  v48 = *(_DWORD *)(v28 + 32);
  v49 = v48 - 1;
  v50 = *(_QWORD *)(v28 + 24);
  if (v48 >= 0x41)
    v29 = (_QWORD *)(v50 + 8 * (v49 >> 6));
  if ((v47 != 0) == ((*v29 >> v49) & 1))
  {
    v63 = v30 + 63;
    v64 = v50 - 8;
    v65 = (v63 >> 3) & 0x3FFFFFF8;
    v66 = v46 - 8;
    while (v65)
    {
      v67 = *(_QWORD *)(v66 + v65);
      v68 = *(_QWORD *)(v64 + v65);
      v65 -= 8;
      if (v67 != v68)
      {
        if (v67 <= v68)
          goto LABEL_7;
        return result;
      }
    }
  }
  else if (v47)
  {
LABEL_7:
    v31 = *(_QWORD *)(a1 + 32);
    v32 = *(_OWORD *)a1;
    v33 = *(_OWORD *)(a1 + 16);
    v34 = *(_DWORD *)(a2 + 32);
    v35 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v35;
    *(_DWORD *)(a1 + 32) = v34;
    *(_OWORD *)a2 = v32;
    *(_OWORD *)(a2 + 16) = v33;
    *(_DWORD *)(a2 + 32) = v31;
  }
  return result;
}

uint64_t sub_1C52AE640(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Tail Duplication";
  *(_QWORD *)(v2 + 8) = 16;
  *(_QWORD *)(v2 + 16) = "tailduplication";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F7011;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C52AE760;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C52AE6D0(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Early Tail Duplication";
  *(_QWORD *)(v2 + 8) = 22;
  *(_QWORD *)(v2 + 16) = "early-tailduplication";
  *(_QWORD *)(v2 + 24) = 21;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F7012;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C52AED70;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C52AE760()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8F7011);
  *(_QWORD *)(v1 + 320) = v1 + 336;
  *(_QWORD *)(v1 + 328) = 0x1000000000;
  *(_QWORD *)(v1 + 424) = 0;
  *(_BYTE *)(v1 + 432) = 0;
  *(_QWORD *)(v1 + 400) = 0;
  *(_QWORD *)(v1 + 408) = 0;
  *(_DWORD *)(v1 + 416) = 0;
  *(_QWORD *)v1 = &off_1E814AF98;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED800260);
  if (v3 != -1)
  {
    v7[0] = sub_1C52AE640;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED800260, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C52AE85C(llvm::Pass *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)a1 = &off_1E814B058;
  v2 = *((_QWORD *)a1 + 53);
  *((_QWORD *)a1 + 53) = 0;
  if (v2)
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 + 8), 8);
    MEMORY[0x1CAA32FC0](v2, 0x1060C4012208D3FLL);
  }
  sub_1C61EA8E8((uint64_t)a1 + 248);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v3 != (_QWORD *)((char *)a1 + 192))
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v4 != (_QWORD *)((char *)a1 + 120))
    free(v4);
  v5 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v5 != (_QWORD *)((char *)a1 + 48))
    free(v5);
  llvm::Pass::~Pass(a1);
}

void sub_1C52AE918(llvm::Pass *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)a1 = &off_1E814B058;
  v2 = *((_QWORD *)a1 + 53);
  *((_QWORD *)a1 + 53) = 0;
  if (v2)
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 + 8), 8);
    MEMORY[0x1CAA32FC0](v2, 0x1060C4012208D3FLL);
  }
  sub_1C61EA8E8((uint64_t)a1 + 248);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v3 != (_QWORD *)((char *)a1 + 192))
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v4 != (_QWORD *)((char *)a1 + 120))
    free(v4);
  v5 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v5 != (_QWORD *)((char *)a1 + 48))
    free(v5);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C52AE9E8(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineBranchProbabilityInfo::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::LazyMachineBlockFrequencyInfoPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::ProfileSummaryInfoWrapperPass::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1C52AEA48(uint64_t a1, llvm::MachineFunction *a2)
{
  char v4;
  void **v6;
  void *v7;
  const llvm::MachineBranchProbabilityInfo *v8;
  void **v9;
  void *v10;
  llvm::ProfileSummaryInfo *v11;
  uint64_t v12;
  void **v13;
  void *v14;
  llvm::LazyMachineBlockFrequencyInfoPass *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::MachineBasicBlock *v18;
  char v19;
  char v20;

  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, *(const llvm::Function **)a2) & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    v6 = **(void ****)(a1 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
    }
    while (v7 != &llvm::MachineBranchProbabilityInfo::ID);
    v8 = (const llvm::MachineBranchProbabilityInfo *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1)
                                                                                               + 96))(*(v6 - 1), &llvm::MachineBranchProbabilityInfo::ID);
    v9 = **(void ****)(a1 + 8);
    do
    {
      v10 = *v9;
      v9 += 2;
    }
    while (v10 != &llvm::ProfileSummaryInfoWrapperPass::ID);
    v11 = *(llvm::ProfileSummaryInfo **)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), &llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);
    if (*((_QWORD *)v11 + 1))
    {
      v13 = **(void ****)(a1 + 8);
      do
      {
        v14 = *v13;
        v13 += 2;
      }
      while (v14 != &llvm::LazyMachineBlockFrequencyInfoPass::ID);
      v15 = (llvm::LazyMachineBlockFrequencyInfoPass *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v13 - 1)
                                                                                                 + 96))(*(v13 - 1), &llvm::LazyMachineBlockFrequencyInfoPass::ID);
      v16 = llvm::LazyMachineBlockFrequencyInfoPass::calculateIfNotAvailable(v15);
      v12 = operator new();
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)v12 = v16;
      *(_DWORD *)(v12 + 24) = 0;
      v17 = *(_QWORD *)(a1 + 424);
      *(_QWORD *)(a1 + 424) = v12;
      if (v17)
      {
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v17 + 8), 8);
        MEMORY[0x1CAA32FC0](v17, 0x1060C4012208D3FLL);
        v12 = *(_QWORD *)(a1 + 424);
      }
    }
    else
    {
      v12 = 0;
    }
    llvm::TailDuplicator::initMF((llvm::TailDuplicator *)(a1 + 248), a2, *(_BYTE *)(a1 + 432), v8, (llvm::MBFIWrapper *)v12, v11, 0, 0);
    v19 = 0;
    do
    {
      v4 = v19;
      v20 = llvm::TailDuplicator::tailDuplicateBlocks((llvm::TailDuplicator *)(a1 + 248), v18);
      v19 = 1;
    }
    while ((v20 & 1) != 0);
  }
  return v4 & 1;
}

void sub_1C52AEBE4(llvm::Pass *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)a1 = &off_1E814B058;
  v2 = *((_QWORD *)a1 + 53);
  *((_QWORD *)a1 + 53) = 0;
  if (v2)
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 + 8), 8);
    MEMORY[0x1CAA32FC0](v2, 0x1060C4012208D3FLL);
  }
  sub_1C61EA8E8((uint64_t)a1 + 248);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v3 != (_QWORD *)((char *)a1 + 192))
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v4 != (_QWORD *)((char *)a1 + 120))
    free(v4);
  v5 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v5 != (_QWORD *)((char *)a1 + 48))
    free(v5);
  llvm::Pass::~Pass(a1);
}

void sub_1C52AECA0(llvm::Pass *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)a1 = &off_1E814B058;
  v2 = *((_QWORD *)a1 + 53);
  *((_QWORD *)a1 + 53) = 0;
  if (v2)
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 + 8), 8);
    MEMORY[0x1CAA32FC0](v2, 0x1060C4012208D3FLL);
  }
  sub_1C61EA8E8((uint64_t)a1 + 248);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v3 != (_QWORD *)((char *)a1 + 192))
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v4 != (_QWORD *)((char *)a1 + 120))
    free(v4);
  v5 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v5 != (_QWORD *)((char *)a1 + 48))
    free(v5);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C52AED70()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8F7012);
  *(_QWORD *)(v1 + 320) = v1 + 336;
  *(_QWORD *)(v1 + 328) = 0x1000000000;
  *(_QWORD *)(v1 + 424) = 0;
  *(_QWORD *)(v1 + 400) = 0;
  *(_QWORD *)(v1 + 408) = 0;
  *(_DWORD *)(v1 + 416) = 0;
  *(_BYTE *)(v1 + 432) = 1;
  *(_QWORD *)v1 = &off_1E814B118;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED800268);
  if (v3 != -1)
  {
    v7[0] = sub_1C52AE6D0;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED800268, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C52AEE70(llvm::Pass *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)a1 = &off_1E814B058;
  v2 = *((_QWORD *)a1 + 53);
  *((_QWORD *)a1 + 53) = 0;
  if (v2)
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 + 8), 8);
    MEMORY[0x1CAA32FC0](v2, 0x1060C4012208D3FLL);
  }
  sub_1C61EA8E8((uint64_t)a1 + 248);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v3 != (_QWORD *)((char *)a1 + 192))
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v4 != (_QWORD *)((char *)a1 + 120))
    free(v4);
  v5 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v5 != (_QWORD *)((char *)a1 + 48))
    free(v5);
  llvm::Pass::~Pass(a1);
}

void sub_1C52AEF2C(llvm::Pass *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)a1 = &off_1E814B058;
  v2 = *((_QWORD *)a1 + 53);
  *((_QWORD *)a1 + 53) = 0;
  if (v2)
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 + 8), 8);
    MEMORY[0x1CAA32FC0](v2, 0x1060C4012208D3FLL);
  }
  sub_1C61EA8E8((uint64_t)a1 + 248);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v3 != (_QWORD *)((char *)a1 + 192))
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v4 != (_QWORD *)((char *)a1 + 120))
    free(v4);
  v5 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v5 != (_QWORD *)((char *)a1 + 48))
    free(v5);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C52AEFFC(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&v7, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = v7;
  *(_QWORD *)v7 |= 2uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &v7 == (void **)a1)
    goto LABEL_9;
  if (v8 < 7)
  {
    v6 = v8;
LABEL_7:
    memcpy(v4, v3, 8 * v6);
    v3 = v7;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
  v6 = v8;
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = *(void **)a1;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_9:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

uint64_t llvm::TailDuplicator::tailDuplicateAndUpdate(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  llvm::MachineOperand *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  BOOL v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int ValueInMiddleOfBlock;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65[4];
  uint64_t v66;
  void *v67;
  uint64_t v68;
  _BYTE v69[48];
  void *v70[2];
  _BYTE v71[64];
  void *v72;
  uint64_t v73;
  _BYTE v74[128];
  void *v75;
  uint64_t v76;
  _BYTE v77[64];
  uint64_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  void *v83;
  uint64_t v84;
  _QWORD v85[10];

  v85[8] = *MEMORY[0x1E0C80C00];
  v14 = *(uint64_t **)(a3 + 88);
  v15 = *(uint64_t **)(a3 + 96);
  v78 = 1;
  v79 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v80 = v79;
  v81 = v79;
  v82 = v79;
  v83 = v85;
  v84 = 0x800000000;
  sub_1C61F6608(&v78, v14, v15);
  v75 = v77;
  v76 = 0x800000000;
  v72 = v74;
  v73 = 0x1000000000;
  v16 = llvm::TailDuplicator::tailDuplicate((uint64_t *)a1, a2, (llvm::MachineBasicBlock *)a3, a4, (uint64_t)&v75, (uint64_t)&v72, a7);
  if (!(_DWORD)v16)
    goto LABEL_2;
  v63 = a5;
  v70[0] = v71;
  v70[1] = (void *)0x800000000;
  v18 = *(_QWORD *)(a1 + 40);
  v65[0] = 0;
  v65[2] = (uint64_t)v70;
  v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 16) + 104))(*(_QWORD *)(v18 + 16));
  v20 = *(_QWORD *)(v18 + 40);
  v65[3] = v19;
  v66 = v20;
  v21 = *(_QWORD *)(a3 + 64) == *(_QWORD *)(a3 + 72) && *(_BYTE *)(a3 + 185) == 0;
  if (*(_BYTE *)(a1 + 64))
    llvm::TailDuplicator::updateSuccessorsPHIs(a1, a3, v21, (uint64_t)&v75, (uint64_t)&v78);
  if (v21)
    llvm::TailDuplicator::removeDeadBlock(v19, (llvm::MachineBasicBlock *)a3, a6);
  v64 = v16;
  v22 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v22)
  {
    for (i = 0; i != v22; ++i)
    {
      v24 = *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * i);
      v25 = v24 & 0x7FFFFFFF;
      llvm::MachineSSAUpdater::Initialize((uint64_t)v65, *(_QWORD *)(*(_QWORD *)(v66 + 24) + 16 * v25) & 0xFFFFFFFFFFFFFFF8);
      v26 = *(_QWORD *)(a1 + 32);
      if ((v24 & 0x80000000) != 0)
        v27 = (uint64_t *)(*(_QWORD *)(v26 + 24) + 16 * v25 + 8);
      else
        v27 = (uint64_t *)(*(_QWORD *)(v26 + 272) + 8 * v24);
      v28 = *v27;
      if (v28
        && ((*(_BYTE *)(v28 + 3) & 1) != 0 || (v28 = *(_QWORD *)(v28 + 24)) != 0 && (*(_BYTE *)(v28 + 3) & 1) != 0)
        && (v46 = *(_QWORD *)(v28 + 8)) != 0)
      {
        v29 = *(void **)(v46 + 24);
        v67 = v29;
        *((_DWORD *)sub_1C6144C70(v65[0], (uint64_t *)&v67) + 2) = v24;
      }
      else
      {
        v29 = 0;
      }
      v30 = sub_1C4E341F8(*(_QWORD *)(a1 + 152), *(_DWORD *)(a1 + 168), v24);
      v31 = *((_QWORD *)v30 + 1);
      v32 = *((_QWORD *)v30 + 2);
      while (v31 != v32)
      {
        v33 = *(_DWORD *)(v31 + 8);
        v67 = *(void **)v31;
        *((_DWORD *)sub_1C6144C70(v65[0], (uint64_t *)&v67) + 2) = v33;
        v31 += 16;
      }
      v67 = v69;
      v68 = 0x600000000;
      v34 = *(_QWORD *)(a1 + 32);
      if ((v24 & 0x80000000) != 0)
        v35 = (uint64_t *)(*(_QWORD *)(v34 + 24) + 16 * v25 + 8);
      else
        v35 = (uint64_t *)(*(_QWORD *)(v34 + 272) + 8 * v24);
      v36 = *v35;
      if (*v35)
      {
        while ((*(_BYTE *)(v36 + 3) & 1) != 0)
        {
          v36 = *(_QWORD *)(v36 + 24);
          if (!v36)
            goto LABEL_56;
        }
        do
        {
          v37 = (llvm::MachineOperand *)v36;
          do
            v36 = *(_QWORD *)(v36 + 24);
          while (v36 && (*(_BYTE *)(v36 + 3) & 1) != 0);
          v38 = *((_QWORD *)v37 + 1);
          v39 = **(unsigned __int16 **)(v38 + 16);
          if ((v39 - 13) > 1)
          {
            if (*(void **)(v38 + 24) != v29 || (v39 != 69 ? (v41 = v39 == 0) : (v41 = 1), v41))
              llvm::MachineSSAUpdater::RewriteUse((llvm::MachineSSAUpdater *)v65, v37);
          }
          else
          {
            v40 = v68;
            if (v68 >= (unint64_t)HIDWORD(v68))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, (uint64_t)v69, v68 + 1, 8);
              v40 = v68;
            }
            *((_QWORD *)v67 + v40) = v37;
            LODWORD(v68) = v68 + 1;
          }
        }
        while (v36);
        v42 = (uint64_t *)v67;
        if ((_DWORD)v68)
        {
          v43 = 8 * v68;
          do
          {
            v44 = *v42++;
            ValueInMiddleOfBlock = llvm::MachineSSAUpdater::GetValueInMiddleOfBlock((llvm::MachineSSAUpdater *)v65, *(llvm::MachineBasicBlock **)(*(_QWORD *)(v44 + 8) + 24), 1);
            llvm::MachineOperand::setReg(v44, ValueInMiddleOfBlock);
            v43 -= 8;
          }
          while (v43);
          v42 = (uint64_t *)v67;
        }
        if (v42 != (uint64_t *)v69)
          free(v42);
      }
LABEL_56:
      ;
    }
    *(_DWORD *)(a1 + 80) = 0;
    sub_1C61F1FA0((unsigned int *)(a1 + 152));
  }
  v47 = v73;
  if ((_DWORD)v73)
  {
    v51 = 0;
    do
    {
      v52 = *((_QWORD *)v72 + v51);
      if (**(_WORD **)(v52 + 16) == 19)
      {
        v53 = *(_QWORD *)(v52 + 32);
        v54 = *(_DWORD *)(v53 + 36);
        v55 = *(_QWORD **)(a1 + 32);
        if (llvm::MachineRegisterInfo::hasOneNonDBGUse((uint64_t)v55, v54))
        {
          v56 = *(unsigned int *)(v53 + 4);
          if (sub_1C51A3F30(v55, v54, *(_QWORD *)(v55[3] + 16 * (v54 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(v55[3] + 16 * (v56 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, 0))
          {
            v57 = *(_QWORD **)(a1 + 32);
            v58 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v57 + 16) + 176))(*(_QWORD *)(*v57 + 16));
            if ((v56 & 0x80000000) != 0)
              v59 = (uint64_t *)(v57[3] + 16 * (v56 & 0x7FFFFFFF) + 8);
            else
              v59 = (uint64_t *)(v57[34] + 8 * v56);
            v60 = *v59;
            if (*v59)
            {
              do
              {
                v61 = *(_QWORD *)(v60 + 24);
                if (v54 - 1 <= 0x3FFFFFFE)
                  llvm::MachineOperand::substPhysReg((unsigned int *)v60, v54, v58);
                else
                  llvm::MachineOperand::setReg(v60, v54);
                v60 = v61;
              }
              while (v61);
            }
            v62 = v52;
            if ((*(_BYTE *)v52 & 4) == 0)
            {
              v62 = v52;
              if ((*(_WORD *)(v52 + 44) & 8) != 0)
              {
                v62 = v52;
                do
                  v62 = *(_QWORD *)(v62 + 8);
                while ((*(_WORD *)(v62 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(v52 + 24) + 40, v52, *(_QWORD *)(v62 + 8));
          }
        }
      }
      ++v51;
    }
    while (v51 != v47);
  }
  v16 = v64;
  if (v63 && &v75 != (void **)v63)
  {
    v48 = v75;
    if (v75 != v77)
    {
      if (*(_QWORD *)v63 != v63 + 16)
      {
        free(*(void **)v63);
        v48 = v75;
      }
      *(_QWORD *)v63 = v48;
      *(_QWORD *)(v63 + 8) = v76;
      v75 = v77;
      HIDWORD(v76) = 0;
      goto LABEL_74;
    }
    v49 = v76;
    v50 = *(unsigned int *)(v63 + 8);
    if (v50 >= v76)
    {
      if ((_DWORD)v76)
        memmove(*(void **)v63, v77, 8 * v76);
      *(_DWORD *)(v63 + 8) = v49;
      v16 = v64;
      goto LABEL_74;
    }
    if (*(_DWORD *)(v63 + 12) < v76)
    {
      *(_DWORD *)(v63 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v63, v63 + 16, v49, 8);
    }
    else if ((_DWORD)v50)
    {
      memmove(*(void **)v63, v77, 8 * v50);
      goto LABEL_71;
    }
    v50 = 0;
LABEL_71:
    if (v50 != v76)
      memcpy((void *)(*(_QWORD *)v63 + 8 * v50), (char *)v75 + 8 * v50, 8 * v76 - 8 * v50);
    *(_DWORD *)(v63 + 8) = v49;
LABEL_74:
    LODWORD(v76) = 0;
  }
  llvm::MachineSSAUpdater::~MachineSSAUpdater((llvm::MachineSSAUpdater *)v65);
  if (v70[0] != v71)
    free(v70[0]);
LABEL_2:
  if (v72 != v74)
    free(v72);
  if (v75 != v77)
    free(v75);
  if (v83 != v85)
    free(v83);
  if ((v78 & 1) == 0)
    MEMORY[0x1CAA32FB4](v79.i64[0], 8);
  return v16;
}

uint64_t llvm::TailDuplicator::tailDuplicate(uint64_t *a1, int a2, llvm::MachineBasicBlock *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v11;
  uint64_t v12;
  int v13;
  int v15;
  unsigned int i;
  int v17;
  unsigned int v18;
  _DWORD *v19;
  int v20;
  _DWORD *v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  llvm::MachineBasicBlock *v28;
  char v29;
  llvm::MachineBasicBlock **v30;
  llvm::MachineBasicBlock **v31;
  llvm::MachineBasicBlock *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  const llvm::MachineBasicBlock **v39;
  const llvm::MachineBasicBlock **v40;
  const llvm::MachineBasicBlock *v41;
  int EdgeProbability;
  llvm::MachineBasicBlock *v43;
  llvm::MachineBasicBlock **v44;
  llvm::MachineBasicBlock **v45;
  llvm::MachineBasicBlock **v46;
  llvm::MachineBasicBlock *v47;
  llvm::MachineBasicBlock **v48;
  uint64_t v49;
  uint64_t v50;
  llvm::MachineBasicBlock **v51;
  uint64_t v52;
  int v53;
  uint64_t v55;
  char *v56;
  int v58;
  unint64_t FirstTerminator;
  unint64_t *v60;
  unint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  llvm::MachineBasicBlock *v64;
  uint64_t v65;
  int v66;
  uint64_t v68;
  char *v69;
  llvm::MachineBasicBlock *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t FallThrough;
  int32x2_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  llvm::MachineBasicBlock *v84;
  _QWORD v85[2];
  int v86;
  void *v87;
  uint64_t v88;
  _DWORD v89[12];
  void *v90;
  uint64_t v91;
  _BYTE v92[128];
  uint64_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  void *v98;
  uint64_t v99;
  _QWORD v100[10];

  v100[8] = *MEMORY[0x1E0C80C00];
  FallThrough = llvm::MachineBasicBlock::getFallThrough(this);
  v11 = (char *)this + 48;
  v85[0] = 0;
  v85[1] = 0;
  v86 = 0;
  v12 = *((_QWORD *)this + 7);
  if ((llvm::MachineBasicBlock *)v12 == (llvm::MachineBasicBlock *)((char *)this + 48))
    goto LABEL_32;
  do
  {
    v13 = **(unsigned __int16 **)(v12 + 16);
    if (v13 != 69 && v13 != 0)
      break;
    v15 = *(_DWORD *)(v12 + 40);
    if (v15 == 1)
      goto LABEL_27;
    for (i = 1; i != v15; i += 2)
    {
      v17 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 32 * i + 4);
      LODWORD(v93) = v17;
      if (v86)
      {
        v18 = (v86 - 1) & (37 * v17);
        v19 = (_DWORD *)(v85[0] + 4 * v18);
        v20 = *v19;
        if (v17 == *v19)
          continue;
        v21 = 0;
        v22 = 1;
        while (v20 != -1)
        {
          if (v21)
            v23 = 0;
          else
            v23 = v20 == -2;
          if (v23)
            v21 = v19;
          v24 = v18 + v22++;
          v18 = v24 & (v86 - 1);
          v19 = (_DWORD *)(v85[0] + 4 * v18);
          v20 = *v19;
          if (v17 == *v19)
            goto LABEL_25;
        }
        if (v21)
          v25 = v21;
        else
          v25 = v19;
      }
      else
      {
        v25 = 0;
      }
      v26 = sub_1C4978C80((uint64_t)v85, (uint64_t)&v93, (int *)&v93, v25);
      *v26 = v93;
LABEL_25:
      ;
    }
    if (v12)
    {
LABEL_27:
      if ((*(_BYTE *)v12 & 4) != 0)
        goto LABEL_31;
    }
    while ((*(_WORD *)(v12 + 44) & 8) != 0)
      v12 = *(_QWORD *)(v12 + 8);
LABEL_31:
    v12 = *(_QWORD *)(v12 + 8);
  }
  while ((char *)v12 != v11);
LABEL_32:
  if (a2)
  {
    v27 = llvm::TailDuplicator::duplicateSimpleBB(a1, (uint64_t)this, a5);
    goto LABEL_113;
  }
  v93 = 1;
  v94 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v95 = v94;
  v96 = v94;
  v97 = v94;
  v98 = v100;
  v99 = 0x800000000;
  if (a7)
    sub_1C61F6608(&v93, *(uint64_t **)a7, (uint64_t *)(*(_QWORD *)a7 + 8 * *(unsigned int *)(a7 + 8)));
  else
    sub_1C61F6608(&v93, *((uint64_t **)this + 8), *((uint64_t **)this + 9));
  v29 = 0;
  if ((_DWORD)v99)
  {
    v30 = (llvm::MachineBasicBlock **)v98;
    v31 = (llvm::MachineBasicBlock **)((char *)v98 + 8 * v99);
    v75 = a4;
    do
    {
      v32 = *v30;
      if (llvm::TailDuplicator::canTailDuplicate((llvm::TailDuplicator *)a1, v28, *v30))
      {
        llvm::Function::getEntryCount(*(uint64_t ****)a1[5], 0, (uint64_t)&v90);
        if (v92[0] && *((_BYTE *)a1 + 65))
        {
LABEL_47:
          v33 = *(unsigned int *)(a5 + 8);
          if (v33 >= *(unsigned int *)(a5 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v33 + 1, 8);
            v33 = *(unsigned int *)(a5 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a5 + 8 * v33) = v32;
          ++*(_DWORD *)(a5 + 8);
          (*(void (**)(uint64_t, llvm::MachineBasicBlock *, _QWORD))(*(_QWORD *)*a1 + 264))(*a1, v32, 0);
          v87 = 0;
          v88 = 0;
          v89[0] = 0;
          v90 = v92;
          v91 = 0x400000000;
          v34 = *((_QWORD *)this + 7);
          if ((char *)v34 != v11)
          {
            do
            {
              if (!v34 || (v35 = v34, (*(_BYTE *)v34 & 4) == 0))
              {
                v35 = v34;
                if ((*(_WORD *)(v34 + 44) & 8) != 0)
                {
                  v35 = v34;
                  do
                    v35 = *(_QWORD *)(v35 + 8);
                  while ((*(_WORD *)(v35 + 44) & 8) != 0);
                }
              }
              v36 = *(char **)(v35 + 8);
              v37 = **(unsigned __int16 **)(v34 + 16);
              if (v37 == 69 || v37 == 0)
                llvm::TailDuplicator::processPHI(a1, v34, (uint64_t)this, (uint64_t)v32, (uint64_t)&v87, &v90, (uint64_t)v85, 1);
              else
                llvm::TailDuplicator::duplicateInstruction((uint64_t)a1, v34, (uint64_t)this, (uint64_t)v32, (int32x2_t *)&v87, (uint64_t)v85);
              v34 = (uint64_t)v36;
            }
            while (v36 != v11);
          }
          llvm::TailDuplicator::appendCopies((uint64_t)a1, v32, (uint64_t)&v90, a6);
          llvm::MachineBasicBlock::removeSuccessor((uint64_t)v32, *((char **)v32 + 11), 0);
          v40 = (const llvm::MachineBasicBlock **)*((_QWORD *)this + 11);
          v39 = (const llvm::MachineBasicBlock **)*((_QWORD *)this + 12);
          while (v40 != v39)
          {
            v41 = *v40++;
            EdgeProbability = llvm::MachineBranchProbabilityInfo::getEdgeProbability((llvm::MachineBranchProbabilityInfo *)a1[2], this, v41);
            llvm::MachineBasicBlock::addSuccessor(v32, v41, EdgeProbability);
          }
          if (FallThrough)
          {
            if (*((_QWORD *)this + 1) == *((_QWORD *)this + 4) + 320)
              v43 = 0;
            else
              v43 = (llvm::MachineBasicBlock *)*((_QWORD *)this + 1);
            llvm::MachineBasicBlock::updateTerminator(v32, v43);
          }
          a4 = v75;
          if (v90 != v92)
            free(v90);
          MEMORY[0x1CAA32FB4](v87, 4);
          v29 = 1;
          goto LABEL_73;
        }
        if (a4)
        {
          if (v32 != (llvm::MachineBasicBlock *)a4)
            goto LABEL_47;
        }
        else if (*((llvm::MachineBasicBlock **)v32 + 1) != this || !llvm::MachineBasicBlock::getFallThrough(v32))
        {
          goto LABEL_47;
        }
      }
LABEL_73:
      ++v30;
    }
    while (v30 != v31);
  }
  if (!a4)
    a4 = *(_QWORD *)this;
  v83 = 0;
  v84 = 0;
  v90 = v92;
  v91 = 0x400000000;
  v44 = *(llvm::MachineBasicBlock ***)(a4 + 88);
  if (((*(_QWORD *)(a4 + 96) - (_QWORD)v44) & 0x7FFFFFFF8) != 8
    || *v44 != this
    || ((*(uint64_t (**)(uint64_t, uint64_t, llvm::MachineBasicBlock **, uint64_t *, void **, _QWORD))(*(_QWORD *)*a1 + 248))(*a1, a4, &v84, &v83, &v90, 0) & 1) != 0|| (_DWORD)v91|| v84 && v84 != this|| ((*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) & 0x7FFFFFFF8) != 8|| *((_BYTE *)this + 185))
  {
LABEL_78:
    v27 = (*((_BYTE *)a1 + 64) == 0) & v29;
    if (*((_BYTE *)a1 + 64) && (v29 & 1) != 0)
    {
      if ((_DWORD)v99)
      {
        v45 = (llvm::MachineBasicBlock **)v98;
        v46 = (llvm::MachineBasicBlock **)((char *)v98 + 8 * v99);
        do
        {
          v47 = *v45;
          v48 = *(llvm::MachineBasicBlock ***)a5;
          v49 = *(unsigned int *)(a5 + 8);
          if ((_DWORD)v49)
          {
            v50 = 8 * v49;
            v51 = *(llvm::MachineBasicBlock ***)a5;
            while (*v51 != v47)
            {
              ++v51;
              v50 -= 8;
              if (!v50)
              {
                v51 = &v48[v49];
                break;
              }
            }
          }
          else
          {
            v51 = *(llvm::MachineBasicBlock ***)a5;
          }
          if (v49 == v51 - v48 && ((*((_QWORD *)v47 + 12) - *((_QWORD *)v47 + 11)) & 0x7FFFFFFF8) == 8)
          {
            v80 = 0;
            v81 = 0;
            v82 = 0;
            v87 = v89;
            v88 = 0x400000000;
            v52 = *((_QWORD *)this + 7);
            if ((char *)v52 != v11)
            {
              do
              {
                v53 = **(unsigned __int16 **)(v52 + 16);
                if (v53 != 69 && v53 != 0)
                  break;
                v55 = v52;
                if ((*(_BYTE *)v52 & 4) == 0)
                {
                  v55 = v52;
                  if ((*(_WORD *)(v52 + 44) & 8) != 0)
                  {
                    v55 = v52;
                    do
                      v55 = *(_QWORD *)(v55 + 8);
                    while ((*(_WORD *)(v55 + 44) & 8) != 0);
                  }
                }
                v56 = *(char **)(v55 + 8);
                llvm::TailDuplicator::processPHI(a1, v52, (uint64_t)this, (uint64_t)v47, (uint64_t)&v80, &v87, (uint64_t)v85, 0);
                v52 = (uint64_t)v56;
              }
              while (v56 != v11);
            }
            llvm::TailDuplicator::appendCopies((uint64_t)a1, v47, (uint64_t)&v87, a6);
            if (v87 != v89)
              free(v87);
            MEMORY[0x1CAA32FB4](*(_QWORD *)&v80, 4);
          }
          ++v45;
        }
        while (v45 != v46);
      }
      v27 = 1;
    }
    goto LABEL_107;
  }
  v58 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a1 + 264))(*a1, a4, 0);
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)a4);
  if (a4 + 48 == FirstTerminator)
  {
    if (*((_BYTE *)a1 + 64))
    {
      v64 = (llvm::MachineBasicBlock *)a4;
      v80 = 0;
      v81 = 0;
      v82 = 0;
      v87 = v89;
      v88 = 0x400000000;
      v65 = *((_QWORD *)this + 7);
      if ((char *)v65 != v11)
      {
        while (1)
        {
          v66 = **(unsigned __int16 **)(v65 + 16);
          if (v66 != 69 && v66 != 0)
            break;
          v68 = v65;
          if ((*(_BYTE *)v65 & 4) == 0)
          {
            v68 = v65;
            if ((*(_WORD *)(v65 + 44) & 8) != 0)
            {
              v68 = v65;
              do
                v68 = *(_QWORD *)(v68 + 8);
              while ((*(_WORD *)(v68 + 44) & 8) != 0);
            }
          }
          v69 = *(char **)(v68 + 8);
          llvm::TailDuplicator::processPHI(a1, v65, (uint64_t)this, (uint64_t)v64, (uint64_t)&v80, &v87, (uint64_t)v85, 1);
          v65 = (uint64_t)v69;
          if (v69 == v11)
            goto LABEL_142;
        }
        if ((char *)v65 != v11)
        {
          do
          {
            if (!v65 || (v72 = v65, (*(_BYTE *)v65 & 4) == 0))
            {
              v72 = v65;
              if ((*(_WORD *)(v65 + 44) & 8) != 0)
              {
                v72 = v65;
                do
                  v72 = *(_QWORD *)(v72 + 8);
                while ((*(_WORD *)(v72 + 44) & 8) != 0);
              }
            }
            v73 = *(char **)(v72 + 8);
            llvm::TailDuplicator::duplicateInstruction((uint64_t)a1, v65, (uint64_t)this, (uint64_t)v64, &v80, (uint64_t)v85);
            v74 = v65;
            if ((*(_BYTE *)v65 & 4) == 0)
            {
              v74 = v65;
              if ((*(_WORD *)(v65 + 44) & 8) != 0)
              {
                v74 = v65;
                do
                  v74 = *(_QWORD *)(v74 + 8);
                while ((*(_WORD *)(v74 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(v65 + 24) + 40, v65, *(_QWORD *)(v74 + 8));
            v65 = (uint64_t)v73;
          }
          while (v73 != v11);
        }
      }
LABEL_142:
      a4 = (uint64_t)v64;
      llvm::TailDuplicator::appendCopies((uint64_t)a1, v64, (uint64_t)&v87, a6);
      if (v87 != v89)
        free(v87);
      MEMORY[0x1CAA32FB4](*(_QWORD *)&v80, 4);
    }
    else
    {
      v60 = (unint64_t *)FirstTerminator;
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a1 + 264))(*a1, a4, 0);
      if ((llvm::MachineBasicBlock *)a4 != this)
      {
        v61 = (unint64_t *)*((_QWORD *)this + 7);
        if (v61 != (unint64_t *)v11)
        {
          v62 = *(_QWORD *)(a4 + 40);
          v63 = *((_QWORD *)this + 7);
          do
          {
            *(_QWORD *)(v63 + 24) = v62;
            v63 = *(_QWORD *)(v63 + 8);
          }
          while ((char *)v63 != v11);
          sub_1C4785D30(v60, v61, (unint64_t *)this + 6);
        }
      }
    }
    llvm::MachineBasicBlock::removeSuccessor(a4, *(char **)(a4 + 88), 0);
    llvm::MachineBasicBlock::transferSuccessors((char *)a4, this);
    if (FallThrough)
    {
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 4) + 320)
        v70 = 0;
      else
        v70 = (llvm::MachineBasicBlock *)*((_QWORD *)this + 1);
      llvm::MachineBasicBlock::updateTerminator((llvm::MachineBasicBlock *)a4, v70);
    }
    v71 = *(unsigned int *)(a5 + 8);
    if (v71 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v71 + 1, 8);
      LODWORD(v71) = *(_DWORD *)(a5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v71) = a4;
    ++*(_DWORD *)(a5 + 8);
LABEL_122:
    v29 = 1;
    goto LABEL_78;
  }
  v27 = v58 != 0;
  if ((v29 & 1) != 0)
    goto LABEL_122;
LABEL_107:
  if (v90 != v92)
    free(v90);
  if (v98 != v100)
    free(v98);
  if ((v93 & 1) == 0)
    MEMORY[0x1CAA32FB4](v94.i64[0], 8);
LABEL_113:
  MEMORY[0x1CAA32FB4](v85[0], 4);
  return v27;
}

void llvm::TailDuplicator::updateSuccessorsPHIs(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v13;
  uint64_t v14;
  unsigned int v15;
  llvm::MachineFunction *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t i;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v5 = *(unsigned int *)(a5 + 80);
  if ((_DWORD)v5)
  {
    v7 = *(uint64_t **)(a5 + 72);
    v33 = &v7[v5];
    do
    {
      v34 = v7;
      v8 = *v7;
      v9 = *v7 + 48;
      v10 = *(_QWORD *)(*v7 + 56);
      for (i = v9; v10 != v9; v9 = i)
      {
        v11 = **(unsigned __int16 **)(v10 + 16);
        if (v11 != 69 && v11 != 0)
          break;
        v13 = *(_DWORD *)(v10 + 40);
        v14 = *(_QWORD *)(v10 + 32);
        if (v13 == 1)
        {
LABEL_14:
          v15 = 0;
        }
        else
        {
          v15 = 1;
          while (*(_QWORD *)(v14 + 32 * (v15 + 1) + 16) != a2)
          {
            v15 += 2;
            if (v13 == v15)
              goto LABEL_14;
          }
        }
        v16 = *(llvm::MachineFunction **)(a2 + 32);
        v17 = *(_DWORD *)(v14 + 32 * v15 + 4);
        if (a3)
        {
          v18 = v13 - 2;
          if (v13 - 2 != v15)
          {
            do
            {
              v19 = v18 + 1;
              if (*(_QWORD *)(*(_QWORD *)(v10 + 32) + 32 * v19 + 16) == a2)
              {
                llvm::MachineInstr::removeOperand(v10, v19);
                llvm::MachineInstr::removeOperand(v10, v18);
              }
              v18 -= 2;
            }
            while (v15 != v18);
          }
        }
        else
        {
          v15 = 0;
        }
        v20 = *(_QWORD *)(a1 + 152);
        v21 = *(unsigned int *)(a1 + 168);
        v22 = sub_1C4E341F8(v20, *(_DWORD *)(a1 + 168), v17);
        if ((int *)(v20 + 32 * v21) == v22)
        {
          v29 = *(unsigned int *)(a4 + 8);
          if ((_DWORD)v29)
          {
            v30 = *(uint64_t **)a4;
            v31 = 8 * v29;
            do
            {
              v32 = *v30;
              if (v15)
              {
                llvm::MachineOperand::setReg(*(_QWORD *)(v10 + 32) + 32 * v15, v17);
                *(_QWORD *)(*(_QWORD *)(v10 + 32) + 32 * (v15 + 1) + 16) = v32;
              }
              else
              {
                v41 = 0;
                v39 = 0;
                v40 = v17;
                v42 = 0;
                v43 = 0;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v16, (const llvm::MachineOperand *)&v39);
                v41 = 0;
                v42 = v32;
                v39 = 4;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v16, (const llvm::MachineOperand *)&v39);
              }
              v15 = 0;
              ++v30;
              v31 -= 8;
            }
            while (v31);
            goto LABEL_43;
          }
        }
        else
        {
          v23 = (_DWORD *)*((_QWORD *)v22 + 1);
          v24 = (_DWORD *)*((_QWORD *)v22 + 2);
          while (v23 != v24)
          {
            v25 = *(_QWORD *)v23;
            v26 = *(_QWORD **)(*(_QWORD *)v23 + 88);
            v27 = *(_QWORD **)(*(_QWORD *)v23 + 96);
            if (v26 != v27)
            {
              while (*v26 != v8)
              {
                if (++v26 == v27)
                {
                  v26 = *(_QWORD **)(*(_QWORD *)v23 + 96);
                  break;
                }
              }
            }
            if (v26 != v27)
            {
              v28 = v23[2];
              if (v15)
              {
                llvm::MachineOperand::setReg(*(_QWORD *)(v10 + 32) + 32 * v15, v28);
                *(_QWORD *)(*(_QWORD *)(v10 + 32) + 32 * (v15 + 1) + 16) = v25;
                v15 = 0;
              }
              else
              {
                v41 = 0;
                v39 = 0;
                v40 = v28;
                v42 = 0;
                v43 = 0;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v16, (const llvm::MachineOperand *)&v39);
                v41 = 0;
                v42 = v25;
                v39 = 4;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v16, (const llvm::MachineOperand *)&v39);
              }
            }
            v23 += 4;
          }
        }
        if (v15)
        {
          llvm::MachineInstr::removeOperand(v10, v15 + 1);
          llvm::MachineInstr::removeOperand(v10, v15);
        }
LABEL_43:
        if (!v10 || (*(_BYTE *)v10 & 4) == 0)
        {
          while ((*(_WORD *)(v10 + 44) & 8) != 0)
            v10 = *(_QWORD *)(v10 + 8);
        }
        v10 = *(_QWORD *)(v10 + 8);
      }
      v7 = v34 + 1;
    }
    while (v34 + 1 != v33);
  }
}

uint64_t llvm::TailDuplicator::tailDuplicateBlocks(llvm::TailDuplicator *this, llvm::MachineBasicBlock *a2)
{
  BOOL v3;
  uint64_t v4;
  llvm::TailDuplicator *v5;
  llvm::TailDuplicator *v6;
  int v7;
  llvm::TailDuplicator *v8;
  int isSimpleBB;
  BOOL v10;

  if (*((_BYTE *)this + 64))
    v3 = byte_1ED830180 == 0;
  else
    v3 = 1;
  if (!v3)
    sub_1C52B052C(*((_QWORD *)this + 5), 1);
  v4 = *((_QWORD *)this + 5);
  v5 = (llvm::TailDuplicator *)(v4 + 320);
  v6 = *(llvm::TailDuplicator **)(*(_QWORD *)(v4 + 328) + 8);
  if (v6 == (llvm::TailDuplicator *)(v4 + 320))
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      if (!dword_1ED830240)
        break;
      v8 = (llvm::TailDuplicator *)*((_QWORD *)v6 + 1);
      isSimpleBB = llvm::TailDuplicator::isSimpleBB(v6, a2);
      if (llvm::TailDuplicator::shouldTailDuplicate(this, isSimpleBB, v6))
        v7 |= llvm::TailDuplicator::tailDuplicateAndUpdate((uint64_t)this, isSimpleBB, (uint64_t)v6, 0, 0, 0, 0);
      v6 = v8;
    }
    while (v8 != v5);
  }
  if (*((_BYTE *)this + 64))
    v10 = byte_1ED830180 == 0;
  else
    v10 = 1;
  if (!v10)
    sub_1C52B052C(*((_QWORD *)this + 5), 0);
  return v7 & 1;
}

void sub_1C52B052C(uint64_t a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t i;
  int v9;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  llvm *v17;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  llvm *v21;
  llvm::raw_ostream *v22;
  llvm::raw_ostream *v23;
  llvm *v24;
  llvm::raw_ostream *v25;
  llvm::raw_ostream *v26;
  llvm::raw_ostream *v27;
  llvm *v28;
  llvm *v29;
  llvm::raw_ostream *v30;
  llvm::raw_ostream *v31;
  llvm::raw_ostream *v32;
  llvm *v33;
  llvm *v34;
  char *v35;
  int64x2_t v36;
  uint64_t (**v37)();
  _QWORD *v38;
  uint64_t (***v39)();
  uint64_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  void *v45;
  uint64_t v46;
  _QWORD v47[9];

  v47[8] = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(a1 + 320);
  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 328) + 8);
  if (v3 != (_QWORD *)(a1 + 320))
  {
    v36 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      v5 = (uint64_t *)v3[8];
      v6 = (uint64_t *)v3[9];
      v40 = 1;
      v41 = v36;
      v42 = v36;
      v43 = v36;
      v44 = v36;
      v45 = v47;
      v46 = 0x800000000;
      v7 = (uint64_t)sub_1C61F6608(&v40, v5, v6);
      for (i = v3[7]; (_QWORD *)i != v3 + 6; i = *(_QWORD *)(i + 8))
      {
        v9 = **(unsigned __int16 **)(i + 16);
        if (v9 != 69 && v9 != 0)
          break;
        v11 = *(_DWORD *)(i + 40);
        if ((_DWORD)v46)
        {
          v12 = (uint64_t *)v45;
          while (1)
          {
            v13 = *v12;
            if (v11 == 1)
              break;
            v14 = 1;
            while (*(_QWORD *)(*(_QWORD *)(i + 32) + 32 * (v14 + 1) + 16) != v13)
            {
              v14 += 2;
              if (v11 == v14)
                goto LABEL_36;
            }
            if (++v12 == (uint64_t *)((char *)v45 + 8 * v46))
              goto LABEL_18;
          }
LABEL_36:
          v17 = llvm::dbgs((llvm *)v7);
          v18 = sub_1C4816AD8(v17, "Malformed PHI in ");
          v39 = &v37;
          v37 = &off_1E8143F38;
          v38 = v3;
          v19 = (llvm::raw_ostream *)sub_1C6216780((uint64_t)v18, (uint64_t)&v37);
          v20 = sub_1C4816AD8(v19, ": ");
          sub_1C6216740(v20, (llvm::MachineInstr *)i);
          v21 = (llvm *)sub_1C62167BC(&v37);
          v34 = llvm::dbgs(v21);
          v35 = "  missing input from predecessor ";
LABEL_37:
          v22 = sub_1C4816AD8(v34, v35);
          v39 = &v37;
          v37 = &off_1E8143F38;
          v38 = (_QWORD *)v13;
          v23 = (llvm::raw_ostream *)sub_1C6216780((uint64_t)v22, (uint64_t)&v37);
          sub_1C61ABDB8(v23, 10);
          sub_1C62167BC(&v37);
          __break(1u);
        }
LABEL_18:
        if (v11 != 1)
        {
          v15 = 1;
          while (1)
          {
            v16 = *(_QWORD *)(i + 32) + 32 * (v15 + 1);
            v13 = *(_QWORD *)(v16 + 16);
            if (a2)
            {
              v7 = sub_1C61F8EB4((uint64_t)&v40, *(_QWORD *)(v16 + 16), &v37);
              if ((v7 & 1) == 0)
              {
                v29 = llvm::dbgs((llvm *)v7);
                v30 = sub_1C4816AD8(v29, "Warning: malformed PHI in ");
                v39 = &v37;
                v37 = &off_1E8143F38;
                v38 = v3;
                v31 = (llvm::raw_ostream *)sub_1C6216780((uint64_t)v30, (uint64_t)&v37);
                v32 = sub_1C4816AD8(v31, ": ");
                sub_1C6216740(v32, (llvm::MachineInstr *)i);
                v33 = (llvm *)sub_1C62167BC(&v37);
                v34 = llvm::dbgs(v33);
                v35 = "  extra input from predecessor ";
                goto LABEL_37;
              }
            }
            if ((*(_DWORD *)(v13 + 24) & 0x80000000) != 0)
              break;
            v15 += 2;
            if (v11 == v15)
              goto LABEL_19;
          }
          v24 = llvm::dbgs((llvm *)v7);
          v25 = sub_1C4816AD8(v24, "Malformed PHI in ");
          v39 = &v37;
          v37 = &off_1E8143F38;
          v38 = v3;
          v26 = (llvm::raw_ostream *)sub_1C6216780((uint64_t)v25, (uint64_t)&v37);
          v27 = sub_1C4816AD8(v26, ": ");
          sub_1C6216740(v27, (llvm::MachineInstr *)i);
          v28 = (llvm *)sub_1C62167BC(&v37);
          v34 = llvm::dbgs(v28);
          v35 = "  non-existing ";
          goto LABEL_37;
        }
LABEL_19:
        if ((*(_BYTE *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
      }
      if (v45 != v47)
        free(v45);
      if ((v40 & 1) == 0)
        MEMORY[0x1CAA32FB4](v41.i64[0], 8);
      v3 = (_QWORD *)v3[1];
    }
    while (v3 != v2);
  }
}

uint64_t llvm::TailDuplicator::shouldTailDuplicate(llvm::TailDuplicator *this, int a2, llvm::MachineBasicBlock *a3)
{
  llvm::MachineBasicBlock **v6;
  llvm::MachineBasicBlock **v7;
  uint64_t v8;
  int shouldOptimizeForSize;
  unsigned int v10;
  uint64_t v11;
  uint64_t canCompletelyDuplicateBB;
  char *v14;
  unint64_t v15;
  __int16 v16;
  int v17;
  int v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  __int16 v24;
  BOOL v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  uint64_t j;
  int v40;
  int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  void *v47[2];
  _QWORD v48[17];

  v48[16] = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 65) && llvm::MachineBasicBlock::getFallThrough(a3))
    return 0;
  v6 = (llvm::MachineBasicBlock **)*((_QWORD *)a3 + 11);
  v7 = (llvm::MachineBasicBlock **)*((_QWORD *)a3 + 12);
  if (v6 != v7)
  {
    while (*v6 != a3)
    {
      if (++v6 == v7)
      {
        v6 = (llvm::MachineBasicBlock **)*((_QWORD *)a3 + 12);
        break;
      }
    }
  }
  if (v6 != v7)
    return 0;
  v8 = *(_QWORD *)(**((_QWORD **)this + 5) + 112);
  if (v8 && ((*(_BYTE *)(v8 + 17) & 4) != 0 || *(char *)(v8 + 13) < 0)
    || ((shouldOptimizeForSize = llvm::shouldOptimizeForSize(a3, *((_QWORD *)this + 7), *((llvm::MBFIWrapper **)this + 6)), (v10 = *((_DWORD *)this + 17)) != 0)? (v11 = v10): (v11 = dword_1ED8002F0), shouldOptimizeForSize))
  {
    v11 = 1;
  }
  v45 = 0;
  v46 = 0;
  v47[0] = v48;
  v47[1] = (void *)0x400000000;
  if (!(*(unsigned int (**)(_QWORD, llvm::MachineBasicBlock *, uint64_t *, uint64_t *, void **, _QWORD))(**(_QWORD **)this + 248))(*(_QWORD *)this, a3, &v46, &v45, v47, 0)|| !llvm::MachineBasicBlock::getFallThrough(a3))
  {
    v14 = (char *)a3 + 48;
    v15 = *((_QWORD *)a3 + 6) & 0xFFFFFFFFFFFFFFF8;
    if ((llvm::MachineBasicBlock *)((char *)a3 + 48) != (llvm::MachineBasicBlock *)v15)
    {
      if (v15 && (*(_BYTE *)v15 & 4) != 0)
      {
        v16 = *(_WORD *)(v15 + 44);
      }
      else
      {
        while (1)
        {
          v16 = *(_WORD *)(v15 + 44);
          if ((v16 & 4) == 0)
            break;
          v15 = *(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      v17 = v16 & 0xC;
      v18 = v16 & 4;
      v19 = *(_QWORD *)(*(_QWORD *)(v15 + 16) + 8);
      if (v17)
        v20 = v18 == 0;
      else
        v20 = 0;
      if (v20)
      {
        if ((v19 & 0x800) == 0)
        {
          while ((*(_WORD *)(v15 + 44) & 8) != 0)
          {
            v15 = *(_QWORD *)(v15 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v15 + 16) + 9) & 8) != 0)
              goto LABEL_110;
          }
          goto LABEL_34;
        }
      }
      else if ((v19 & 0x800) == 0)
      {
        goto LABEL_34;
      }
LABEL_110:
      if (*((_BYTE *)this + 64))
        v11 = dword_1ED8003B0;
      else
        v11 = v11;
      v21 = 1;
      goto LABEL_35;
    }
LABEL_34:
    v21 = 0;
LABEL_35:
    v22 = *((_QWORD *)a3 + 7);
    if ((char *)v22 == v14)
    {
LABEL_87:
      for (i = *((_QWORD *)a3 + 11); i != *((_QWORD *)a3 + 12); i += 8)
      {
        for (j = *(_QWORD *)(*(_QWORD *)i + 56); j != *(_QWORD *)i + 48; j = *(_QWORD *)(j + 8))
        {
          v40 = **(unsigned __int16 **)(j + 16);
          if (v40 != 69 && v40 != 0)
            break;
          v42 = *(_DWORD *)(j + 40);
          v43 = *(_QWORD *)(j + 32);
          if (v42 == 1)
          {
LABEL_100:
            v44 = 0;
          }
          else
          {
            v44 = 1;
            while (*(llvm::MachineBasicBlock **)(v43 + 32 * (v44 + 1) + 16) != a3)
            {
              v44 += 2;
              if (v42 == v44)
                goto LABEL_100;
            }
          }
          if ((*(_DWORD *)(v43 + 32 * v44) & 0xFFF00) != 0)
            goto LABEL_17;
          if ((*(_BYTE *)j & 4) == 0)
          {
            while ((*(_WORD *)(j + 44) & 8) != 0)
              j = *(_QWORD *)(j + 8);
          }
        }
      }
      if (((v21 | a2) & 1) != 0 || !*((_BYTE *)this + 64))
        canCompletelyDuplicateBB = 1;
      else
        canCompletelyDuplicateBB = llvm::TailDuplicator::canCompletelyDuplicateBB(this, a3);
      goto LABEL_18;
    }
    v23 = 0;
    while (1)
    {
      v24 = *(_WORD *)(v22 + 44);
      v25 = (v24 & 0xC) == 0 || (v24 & 4) != 0;
      v26 = *(unsigned __int16 **)(v22 + 16);
      v27 = *((_QWORD *)v26 + 1);
      if (v25)
      {
        if ((v27 & 0x800000) == 0)
          goto LABEL_42;
      }
      else
      {
        v29 = v22;
        if ((v27 & 0x800000) == 0)
        {
          while ((*(_WORD *)(v29 + 44) & 8) != 0)
          {
            v29 = *(_QWORD *)(v29 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v29 + 16) + 10) & 0x80) != 0)
              goto LABEL_48;
          }
LABEL_42:
          v28 = *v26;
          if ((v28 - 1) <= 1 && (*(_BYTE *)(*(_QWORD *)(v22 + 32) + 48) & 0x20) != 0)
            break;
          goto LABEL_51;
        }
      }
LABEL_48:
      v30 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 4) + 8) + 484) - 3;
      if (v30 < 0x1F && ((0x7E000111u >> v30) & 1) != 0)
        break;
      v28 = *v26;
      if (v28 != 3)
        break;
LABEL_51:
      v31 = *((_QWORD *)v26 + 1);
      if (v25)
      {
        if ((v31 & 0x1000000000) != 0 || *((_BYTE *)this + 64) && (v31 & 0xA0) != 0)
          break;
      }
      else
      {
        v34 = v11;
        v35 = v22;
        if ((v31 & 0x1000000000) != 0)
          break;
        while ((*(_WORD *)(v35 + 44) & 8) != 0)
        {
          canCompletelyDuplicateBB = 0;
          v35 = *(_QWORD *)(v35 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v35 + 16) + 12) & 0x10) != 0)
            goto LABEL_18;
        }
        v11 = v34;
        if (*((_BYTE *)this + 64))
        {
          if ((v31 & 0x20) != 0)
            break;
          v36 = v22;
          while ((*(_WORD *)(v36 + 44) & 8) != 0)
          {
            canCompletelyDuplicateBB = 0;
            v36 = *(_QWORD *)(v36 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v36 + 16) + 8) & 0x20) != 0)
              goto LABEL_18;
          }
          if ((v31 & 0x80) != 0)
            break;
          v37 = v22;
          while (1)
          {
            v11 = v34;
            if ((*(_WORD *)(v37 + 44) & 8) == 0)
              break;
            canCompletelyDuplicateBB = 0;
            v37 = *(_QWORD *)(v37 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v37 + 16) + 8) & 0x80) != 0)
              goto LABEL_18;
          }
        }
      }
      if (v28 <= 19)
      {
        if (v28)
        {
          if (v28 == 2)
            break;
LABEL_64:
          if ((v31 & 0x10) == 0)
            ++v23;
        }
      }
      else if (v28 != 69)
      {
        if (v28 != 20)
          goto LABEL_64;
        v32 = 0;
        if ((v24 & 8) != 0)
        {
          v33 = v22;
          do
          {
            ++v32;
            v33 = *(_QWORD *)(v33 + 8);
          }
          while ((*(_WORD *)(v33 + 44) & 8) != 0);
        }
        v23 += v32;
      }
      if (v23 > v11)
        break;
      if ((v24 & 8) != 0 && (*(_QWORD *)v22 & 4) == 0)
      {
        do
          v22 = *(_QWORD *)(v22 + 8);
        while ((*(_WORD *)(v22 + 44) & 8) != 0);
      }
      v22 = *(_QWORD *)(v22 + 8);
      if ((char *)v22 == v14)
        goto LABEL_87;
    }
  }
LABEL_17:
  canCompletelyDuplicateBB = 0;
LABEL_18:
  if (v47[0] != v48)
    free(v47[0]);
  return canCompletelyDuplicateBB;
}

void llvm::TailDuplicator::addSSAUpdateEntry(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  int *v19;
  int v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  int *v27;
  _OWORD *v28;
  int v29;
  int v30;
  uint64_t v31;
  char *v32;
  int *v33;
  int v34;
  BOOL v35;
  int v36;
  _OWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int *v42;
  int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  BOOL v51;
  int v52;

  v8 = (uint64_t *)(a1 + 152);
  v9 = *(_QWORD *)(a1 + 152);
  v10 = *(unsigned int *)(a1 + 168);
  v11 = sub_1C4E341F8(v9, v10, a2);
  if ((int *)(v9 + 32 * v10) != v11)
  {
    v12 = v11;
    v14 = (char *)*((_QWORD *)v11 + 2);
    v13 = *((_QWORD *)v11 + 3);
    if ((unint64_t)v14 >= v13)
    {
      v21 = (char *)*((_QWORD *)v11 + 1);
      v22 = (v14 - v21) >> 4;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 60)
        abort();
      v24 = v13 - (_QWORD)v21;
      if (v24 >> 3 > v23)
        v23 = v24 >> 3;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
        v25 = 0xFFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        if (v25 >> 60)
          sub_1C4764EE4();
        v26 = (char *)operator new(16 * v25);
      }
      else
      {
        v26 = 0;
      }
      v32 = &v26[16 * v22];
      *(_QWORD *)v32 = a4;
      *((_QWORD *)v32 + 1) = a3;
      v15 = v32 + 16;
      if (v14 != v21)
      {
        do
        {
          *((_OWORD *)v32 - 1) = *((_OWORD *)v14 - 1);
          v32 -= 16;
          v14 -= 16;
        }
        while (v14 != v21);
        v14 = (char *)*((_QWORD *)v12 + 1);
      }
      *((_QWORD *)v12 + 1) = v32;
      *((_QWORD *)v12 + 2) = v15;
      *((_QWORD *)v12 + 3) = &v26[16 * v25];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_QWORD *)v14 = a4;
      *((_QWORD *)v14 + 1) = a3;
      v15 = v14 + 16;
    }
    *((_QWORD *)v12 + 2) = v15;
    return;
  }
  v16 = operator new(0x10uLL);
  *v16 = a4;
  v16[1] = a3;
  v17 = operator new(0x10uLL);
  *v17 = *(_OWORD *)v16;
  if (!(_DWORD)v10)
  {
    v27 = 0;
    goto LABEL_17;
  }
  v18 = ((_DWORD)v10 - 1) & (37 * a2);
  v19 = (int *)(v9 + 32 * v18);
  v20 = *v19;
  if (*v19 != a2)
  {
    v33 = 0;
    v34 = 1;
    while (v20 != -1)
    {
      if (v33)
        v35 = 0;
      else
        v35 = v20 == -2;
      if (v35)
        v33 = v19;
      v36 = v18 + v34++;
      v18 = v36 & (v10 - 1);
      v19 = (int *)(v9 + 32 * v18);
      v20 = *v19;
      if (*v19 == a2)
        goto LABEL_6;
    }
    if (v33)
      v27 = v33;
    else
      v27 = v19;
LABEL_17:
    v28 = v17 + 1;
    v29 = *(_DWORD *)(a1 + 160);
    if (4 * v29 + 4 >= (3 * v10))
    {
      v37 = v17;
      sub_1C510202C(v8, 2 * v10);
      v38 = *(_QWORD *)(a1 + 152);
      v39 = *(_DWORD *)(a1 + 168) - 1;
      v40 = v39 & (37 * a2);
      v27 = (int *)(v38 + 32 * v40);
      v41 = *v27;
      if (*v27 == a2)
        goto LABEL_56;
      v42 = 0;
      v43 = 1;
      while (v41 != -1)
      {
        if (v42)
          v44 = 0;
        else
          v44 = v41 == -2;
        if (v44)
          v42 = v27;
        v45 = v40 + v43++;
        v40 = v45 & v39;
        v27 = (int *)(v38 + 32 * v40);
        v41 = *v27;
        if (*v27 == a2)
          goto LABEL_56;
      }
    }
    else
    {
      if ((int)v10 + ~v29 - *(_DWORD *)(a1 + 164) > v10 >> 3)
      {
LABEL_19:
        v30 = *v27;
LABEL_20:
        ++*(_DWORD *)(a1 + 160);
        if (v30 != -1)
          --*(_DWORD *)(a1 + 164);
        *v27 = a2;
        *((_QWORD *)v27 + 1) = v17;
        *((_QWORD *)v27 + 2) = v28;
        *((_QWORD *)v27 + 3) = v28;
        goto LABEL_23;
      }
      v37 = v17;
      sub_1C510202C(v8, v10);
      v46 = *(_QWORD *)(a1 + 152);
      v47 = *(_DWORD *)(a1 + 168) - 1;
      v48 = v47 & (37 * a2);
      v27 = (int *)(v46 + 32 * v48);
      v49 = *v27;
      if (*v27 == a2)
      {
LABEL_56:
        v30 = a2;
        v17 = v37;
        goto LABEL_20;
      }
      v42 = 0;
      v50 = 1;
      while (v49 != -1)
      {
        if (v42)
          v51 = 0;
        else
          v51 = v49 == -2;
        if (v51)
          v42 = v27;
        v52 = v48 + v50++;
        v48 = v52 & v47;
        v27 = (int *)(v46 + 32 * v48);
        v49 = *v27;
        if (*v27 == a2)
          goto LABEL_56;
      }
    }
    if (v42)
      v27 = v42;
    v17 = v37;
    goto LABEL_19;
  }
LABEL_6:
  operator delete(v17);
LABEL_23:
  v31 = *(unsigned int *)(a1 + 80);
  if (v31 >= *(_DWORD *)(a1 + 84))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 72, a1 + 88, v31 + 1, 4);
    LODWORD(v31) = *(_DWORD *)(a1 + 80);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v31) = a2;
  ++*(_DWORD *)(a1 + 80);
  operator delete(v16);
}

uint64_t sub_1C52B1084(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;

  if ((a1 & 0x80000000) != 0)
    v3 = (uint64_t *)(*(_QWORD *)(a3 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  else
    v3 = (uint64_t *)(*(_QWORD *)(a3 + 272) + 8 * a1);
  v4 = *v3;
  if (!v4)
    return 0;
  while ((*(_BYTE *)(v4 + 3) & 1) != 0)
  {
    v4 = *(_QWORD *)(v4 + 24);
    if (!v4)
      return 0;
  }
  v6 = *(_QWORD *)(v4 + 8);
LABEL_9:
  if (**(unsigned __int16 **)(v6 + 16) - 13 < 2 || *(_QWORD *)(v6 + 24) == a2)
  {
    while (1)
    {
      v4 = *(_QWORD *)(v4 + 24);
      if (!v4)
        return 0;
      if ((*(_BYTE *)(v4 + 3) & 1) == 0 && *(_QWORD *)(v4 + 8) != v6)
      {
        v6 = *(_QWORD *)(v4 + 8);
        goto LABEL_9;
      }
    }
  }
  return 1;
}

uint64_t llvm::TailDuplicator::canCompletelyDuplicateBB(llvm::TailDuplicator *this, llvm::MachineBasicBlock *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)a2 + 8);
  v3 = *((_QWORD *)a2 + 9);
  if (v2 == v3)
    return 1;
  while (((*(_QWORD *)(*(_QWORD *)v2 + 96) - *(_QWORD *)(*(_QWORD *)v2 + 88)) & 0x7FFFFFFF0) == 0
       && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 248))(*(_QWORD *)this))
  {
    v2 += 8;
    if (v2 == v3)
      return 1;
  }
  return 0;
}

uint64_t llvm::TailDuplicator::canTailDuplicate(llvm::TailDuplicator *this, llvm::MachineBasicBlock *a2, llvm::MachineBasicBlock *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[17];

  v10[16] = *MEMORY[0x1E0C80C00];
  if (((*((_QWORD *)a3 + 12) - *((_QWORD *)a3 + 11)) & 0x7FFFFFFF0) != 0)
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = v10;
  v9 = 0x400000000;
  v4 = (*(uint64_t (**)(_QWORD, llvm::MachineBasicBlock *, uint64_t *, uint64_t *, void **, _QWORD))(**(_QWORD **)this + 248))(*(_QWORD *)this, a3, &v7, &v6, &v8, 0);
  v3 = ((_DWORD)v9 == 0) & ~v4;
  if (v8 != v10)
    free(v8);
  return v3;
}

llvm::SmallPtrSetImplBase *sub_1C52B12D8(llvm::SmallPtrSetImplBase *this, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;

  *(_QWORD *)this = (char *)this + 32;
  *((_QWORD *)this + 1) = (char *)this + 32;
  *((_QWORD *)this + 2) = 8;
  *((_DWORD *)this + 6) = 0;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      v6 = *v5++;
      sub_1C4774094(this, v6);
    }
    while (v5 != a3);
  }
  return this;
}

uint64_t sub_1C52B133C()
{
  int v1;
  int *v2;
  __n128 v3;
  int v4;

  v3.n128_u64[0] = (unint64_t)"Maximum instructions to consider tail duplicating";
  v3.n128_u64[1] = 49;
  v4 = 2;
  v2 = &v4;
  v1 = 1;
  sub_1C61D8E94((uint64_t)&unk_1ED800270, "tail-dup-size", &v3, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED800270, &dword_1C475E000);
  v3.n128_u64[0] = (unint64_t)"Maximum instructions to consider tail duplicating blocks that end with indirect branches.";
  v3.n128_u64[1] = 89;
  v4 = 20;
  v2 = &v4;
  v1 = 1;
  sub_1C6216808((__int128 *)&v3, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED800330, &dword_1C475E000);
  v3.n128_u64[0] = (unint64_t)"Verify sanity of PHI instructions during taildup";
  v3.n128_u64[1] = 48;
  LOBYTE(v1) = 0;
  v2 = &v1;
  v4 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED830100, "tail-dup-verify", &v3, (_BYTE **)&v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED830100, &dword_1C475E000);
  LODWORD(v2) = -1;
  v3.n128_u64[0] = (unint64_t)&v2;
  v4 = 1;
  sub_1C62168E4((uint64_t)&unk_1ED8301C0, "tail-dup-limit", &v3, &v4);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED8301C0, &dword_1C475E000);
}

BOOL llvm::TargetFrameLowering::needsFrameIndexResolution(llvm::TargetFrameLowering *this, const llvm::MachineFunction *a2)
{
  return *(_QWORD *)(*((_QWORD *)a2 + 7) + 8) != *(_QWORD *)(*((_QWORD *)a2 + 7) + 16);
}

void llvm::TargetFrameLowering::getCalleeSaves(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;

  v5 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16)) + 16);
  v6 = *(unsigned int *)(a3 + 8);
  if ((*(_DWORD *)(a3 + 64) & 0x3F) != 0)
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v6 - 8) &= ~(-1 << (*(_DWORD *)(a3 + 64) & 0x3F));
  v7 = v6;
  *(_DWORD *)(a3 + 64) = v5;
  v8 = v5 + 63;
  if ((_DWORD)v6 != (v5 + 63) >> 6)
  {
    v9 = v8 >> 6;
    if (v6 > v9)
    {
      *(_DWORD *)(a3 + 8) = v9;
      v7 = v8 >> 6;
    }
    else
    {
      v10 = v6;
      if (v9 > *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9, 8);
        v10 = *(unsigned int *)(a3 + 8);
        v7 = *(_DWORD *)(a3 + 8);
      }
      if (v9 != v6)
        bzero((void *)(*(_QWORD *)a3 + 8 * v10), 8 * (v9 - v6));
      v7 += v9 - v6;
      *(_DWORD *)(a3 + 8) = v7;
      v5 = *(_DWORD *)(a3 + 64);
    }
  }
  v11 = v5 & 0x3F;
  if (v11)
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v7 - 8) &= ~(-1 << v11);
  v12 = *(_QWORD *)(a2 + 56);
  if (*(_BYTE *)(v12 + 104))
  {
    v13 = *(unsigned int **)(v12 + 80);
    v14 = *(unsigned int **)(v12 + 88);
    if (v13 != v14)
    {
      v15 = *(_QWORD *)a3;
      do
      {
        v16 = *v13;
        v13 += 3;
        *(_QWORD *)(v15 + (((unint64_t)v16 >> 3) & 0x1FFFFFF8)) |= 1 << v16;
      }
      while (v13 != v14);
    }
  }
}

void llvm::TargetFrameLowering::determineCalleeSaves(uint64_t a1, llvm::TargetFrameLowering **a2, uint64_t a3)
{
  const llvm::Function *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  llvm::TargetFrameLowering *v14;
  uint64_t v15;
  _WORD *v16;
  unsigned int v17;
  _BYTE *v18;
  int v19;
  llvm::TargetFrameLowering *v20;
  unsigned int v21;

  v7 = *(_DWORD *)((*(uint64_t (**)(llvm::TargetFrameLowering *))(*(_QWORD *)a2[2] + 176))(a2[2]) + 16);
  v8 = *(unsigned int *)(a3 + 8);
  if ((*(_DWORD *)(a3 + 64) & 0x3F) != 0)
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v8 - 8) &= ~(-1 << (*(_DWORD *)(a3 + 64) & 0x3F));
  v9 = v8;
  *(_DWORD *)(a3 + 64) = v7;
  v10 = v7 + 63;
  if ((_DWORD)v8 != (v7 + 63) >> 6)
  {
    v11 = v10 >> 6;
    if (v8 > v11)
    {
      *(_DWORD *)(a3 + 8) = v11;
      v9 = v10 >> 6;
    }
    else
    {
      v12 = v8;
      if (v11 > *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v11, 8);
        v12 = *(unsigned int *)(a3 + 8);
        v9 = *(_DWORD *)(a3 + 8);
      }
      if (v11 != v8)
        bzero((void *)(*(_QWORD *)a3 + 8 * v12), 8 * (v11 - v8));
      v9 += v11 - v8;
      *(_DWORD *)(a3 + 8) = v9;
      v7 = *(_DWORD *)(a3 + 64);
    }
  }
  v13 = v7 & 0x3F;
  if (v13)
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v9 - 8) &= ~(-1 << v13);
  if ((*((_BYTE *)a2[1] + 1042) & 8) == 0
    || !llvm::TargetFrameLowering::isSafeForNoCSROpt(*a2, v6)
    || ((*(uint64_t (**)(uint64_t, llvm::TargetFrameLowering *))(*(_QWORD *)a1 + 344))(a1, *a2) & 1) == 0)
  {
    v14 = a2[5];
    if (*((_BYTE *)v14 + 144))
    {
      v16 = (_WORD *)*((_QWORD *)v14 + 19);
    }
    else
    {
      v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v14 + 16) + 176))(*(_QWORD *)(*(_QWORD *)v14 + 16));
      v16 = (_WORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, *(_QWORD *)v14);
    }
    if (v16)
    {
      v17 = (unsigned __int16)*v16;
      if (*v16)
      {
        v18 = (_BYTE *)*((_QWORD *)*a2 + 14);
        if (!v18
          || (v18[14] & 2) == 0
          && ((v18[16] & 1) == 0
           || (v18[16] & 0x20) == 0
           || (char)v18[21] < 0
           || ((*(uint64_t (**)(uint64_t, llvm::TargetFrameLowering **))(*(_QWORD *)a1 + 88))(a1, a2) & 1) == 0
           && (v17 = (unsigned __int16)*v16, *v16)))
        {
          v19 = *((unsigned __int8 *)a2 + 633);
          v20 = a2[5];
          v21 = 1;
          do
          {
            if (v19 || llvm::MachineRegisterInfo::isPhysRegModified(v20, v17, 0))
              *(_QWORD *)(*(_QWORD *)a3 + 8 * (v17 >> 6)) |= 1 << v17;
            v17 = (unsigned __int16)v16[v21++];
          }
          while (v17);
        }
      }
    }
  }
}

uint64_t llvm::TargetFrameLowering::isSafeForNoCSROpt(llvm::TargetFrameLowering *this, const llvm::Function *a2)
{
  char hasAddressTaken;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*((_DWORD *)this + 8) & 0xFu) - 7 <= 1)
  {
    hasAddressTaken = llvm::Function::hasAddressTaken(this, 0, 0, 1, 0, 0);
    result = 0;
    if ((hasAddressTaken & 1) != 0)
      return result;
    v5 = *((_QWORD *)this + 14);
    if (v5 && (*(_BYTE *)(v5 + 15) & 0x40) != 0)
    {
      v6 = *((_QWORD *)this + 1);
      if (!v6)
        return 1;
      result = 1;
      while (1)
      {
        v7 = *(_QWORD *)(v6 + 24);
        if (*(_BYTE *)(v7 + 16) == 84 && (*(_WORD *)(v7 + 18) & 3u) - 1 < 2)
          break;
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
          return result;
      }
    }
  }
  return 0;
}

unint64_t llvm::TargetFrameLowering::getStackAlignmentSkew(llvm::TargetFrameLowering *this, const llvm::MachineFunction *a2)
{
  if ((*(_WORD *)(*(_QWORD *)a2 + 18) & 0x3FF0) == 0x510)
    return llvm::DataLayout::getPointerSize((llvm::DataLayout *)(*((_QWORD *)a2 + 1) + 16), *(_DWORD *)(*((_QWORD *)a2 + 1) + 20));
  else
    return 0;
}

uint64_t llvm::TargetFrameLowering::allocateScavengingFrameIndexesNearIncomingSP(llvm::TargetFrameLowering *this, const llvm::MachineFunction *a2)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(llvm::TargetFrameLowering *))(*(_QWORD *)this + 200))(this);
  if ((_DWORD)result)
  {
    v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 176))(*((_QWORD *)a2 + 2));
    result = (*(uint64_t (**)(uint64_t, const llvm::MachineFunction *))(*(_QWORD *)v4 + 384))(v4, a2);
    if ((_DWORD)result)
    {
      if ((*(unsigned int (**)(uint64_t, const llvm::MachineFunction *))(*(_QWORD *)v4 + 440))(v4, a2))
        return (*(unsigned int (**)(uint64_t, const llvm::MachineFunction *))(*(_QWORD *)v4 + 432))(v4, a2) ^ 1;
      else
        return 1;
    }
  }
  return result;
}

uint64_t llvm::TargetFrameLowering::getDwarfFrameBase(llvm::TargetFrameLowering *this, const llvm::MachineFunction *a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 176))(*((_QWORD *)a2 + 2));
  return (*(uint64_t (**)(uint64_t, const llvm::MachineFunction *))(*(_QWORD *)v3 + 552))(v3, a2) << 32;
}

uint64_t sub_1C52B1A2C()
{
  return 0;
}

uint64_t sub_1C52B1A34()
{
  return 0;
}

uint64_t llvm::TargetInstrInfo::getRegClass(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4, uint64_t a5)
{
  unsigned __int16 *v5;
  uint64_t v6;

  if (*(unsigned __int16 *)(a2 + 2) <= a3)
    return 0;
  v5 = (unsigned __int16 *)(*(_QWORD *)(a2 + 40) + 6 * a3);
  v6 = (__int16)*v5;
  if ((v5[1] & 1) == 0)
  {
    if ((v6 & 0x80000000) == 0)
      return *(_QWORD *)(a4[30] + 8 * *v5);
    return 0;
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a4 + 240))(a4, a5, v6);
}

uint64_t llvm::TargetInstrInfo::getInlineAsmLength(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  size_t v10;
  int v12;
  int v13;
  int v14;
  int v15;
  char *i;
  unsigned int v17;
  int v18;
  char *__endptr;

  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 72))(a3, a4);
  v7 = 0;
  v8 = 1;
  while (1)
  {
    v9 = *(unsigned __int8 *)a2;
    if (v9 == 10)
    {
LABEL_10:
      v8 = 1;
      goto LABEL_11;
    }
    if (!*a2)
      return v7;
    v10 = strlen(*(const char **)(a3 + 40));
    if (strncmp(a2, *(const char **)(a3 + 40), v10)
      && (strncmp(a2, *(const char **)(a3 + 48), *(_QWORD *)(a3 + 56)) == 0 || (v8 & 1) == 0))
    {
      v8 = 0;
    }
    else
    {
      if (v9 <= 0x20 && ((1 << v9) & 0x100003A00) != 0)
        goto LABEL_10;
      v12 = strncmp(a2, ".space", 6uLL);
      v13 = v6;
      if (!v12)
      {
        __endptr = 0;
        v14 = strtol(a2 + 6, &__endptr, 10);
        v15 = v14 & ~(v14 >> 31);
        for (i = __endptr; ; ++i)
        {
          v17 = *i;
          if (v17 > 0x20)
            goto LABEL_20;
          if (((1 << v17) & 0x100003A00) == 0)
            break;
        }
        if (((1 << v17) & 0x401) != 0)
        {
LABEL_19:
          v13 = v15;
          goto LABEL_21;
        }
LABEL_20:
        v18 = strncmp(i, *(const char **)(a3 + 48), *(_QWORD *)(a3 + 56));
        v13 = v6;
        if (!v18)
          goto LABEL_19;
      }
LABEL_21:
      v8 = 0;
      v7 = (v13 + v7);
    }
LABEL_11:
    ++a2;
  }
}

uint64_t sub_1C52B1C10(uint64_t a1, _BYTE *a2)
{
  _BYTE *v2;

  if (a2)
  {
    v2 = a2;
    if ((*a2 & 4) != 0)
      return sub_1C487FE80(a1 + 40, (uint64_t)a2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v2 = 0;
  }
  while ((*((_WORD *)v2 + 22) & 8) != 0)
    v2 = (_BYTE *)*((_QWORD *)v2 + 1);
  return sub_1C487FE80(a1 + 40, (uint64_t)a2, *((_QWORD *)v2 + 1));
}

llvm::MachineInstr *llvm::TargetInstrInfo::commuteInstructionImpl(llvm::TargetInstrInfo *this, llvm::MachineInstr *a2, int a3, unsigned int a4, unsigned int a5)
{
  llvm::MachineInstr *v5;
  uint64_t v6;
  int v7;
  _DWORD *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  int v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  unsigned int v29;
  llvm::MachineFunction *v30;
  llvm::MachineInstr *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  _BOOL4 v41;
  _BOOL4 v42;
  __int16 v43;
  int v44;
  int v45;
  int v46;
  int v47;

  v5 = a2;
  v6 = *((_QWORD *)a2 + 2);
  v7 = *(unsigned __int8 *)(v6 + 4);
  v8 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (*(_BYTE *)(v6 + 4))
  {
    if (*v8)
      return 0;
    v9 = v8[1];
    v10 = (*v8 >> 8) & 0xFFF;
  }
  else
  {
    v9 = 0;
    LOWORD(v10) = 0;
  }
  v11 = a4;
  v12 = &v8[8 * a4];
  v13 = a5;
  v14 = &v8[8 * a5];
  v16 = *v12;
  v15 = v12[1];
  v17 = *v14;
  v18 = v14[1];
  if (v15 - 0x40000000 < 0xC0000001 || (*v12 & 0x8000000) == 0)
  {
    v42 = 0;
  }
  else
  {
    v20 = *((_QWORD *)v12 + 1);
    if (v20)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v20 + 16) + 8);
      if ((v16 & 0x1000000) != 0)
        v22 = (v21 & 0x100000000) == 0;
      else
        v22 = (int)v21 >= 0;
    }
    else
    {
      v22 = 1;
    }
    v42 = v22;
  }
  v23 = (v16 >> 26) & ~HIBYTE(v16) & 1;
  v24 = (v17 >> 26) & ~HIBYTE(v17) & 1;
  if (v18 - 0x40000000 < 0xC0000001 || (v17 & 0x8000000) == 0)
  {
    v41 = 0;
  }
  else
  {
    v26 = *(_QWORD *)&v8[8 * a5 + 2];
    if (v26)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v26 + 16) + 8);
      if ((v17 & 0x1000000) != 0)
        v28 = (v27 & 0x100000000) == 0;
      else
        v28 = (int)v27 >= 0;
    }
    else
    {
      v28 = 1;
    }
    v41 = v28;
  }
  if (*(_BYTE *)(v6 + 4))
  {
    if (v9 == v15
      && *(unsigned __int16 *)(v6 + 2) > a4
      && (*(_WORD *)(*(_QWORD *)(v6 + 40) + 6 * a4 + 4) & 0xF1) == 1)
    {
      v24 = 0;
      v9 = v14[1];
      v10 = (v17 >> 8) & 0xFFF;
    }
    else if (v9 == v18
           && *(unsigned __int16 *)(v6 + 2) > a5
           && (*(_WORD *)(*(_QWORD *)(v6 + 40) + 6 * a5 + 4) & 0xF1) == 1)
    {
      v23 = 0;
      v9 = v15;
      v10 = (v16 >> 8) & 0xFFF;
    }
  }
  v43 = v10;
  v44 = (v16 >> 8) & 0xFFF;
  v46 = v23;
  v47 = v24;
  v45 = (v17 >> 8) & 0xFFF;
  if (a3)
  {
    v29 = v9;
    v30 = *(llvm::MachineFunction **)(*((_QWORD *)v5 + 3) + 32);
    v31 = (llvm::MachineInstr *)*((_QWORD *)v30 + 28);
    if (v31)
      *((_QWORD *)v30 + 28) = *(_QWORD *)v31;
    else
      v31 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v30 + 128, 72, 3);
    v5 = llvm::MachineInstr::MachineInstr(v31, v30, v5);
    v9 = v29;
  }
  v32 = v16 & 0x10000000;
  v33 = v17 & 0x10000000;
  v34 = v16 & 0x20000000;
  v35 = v17 & 0x20000000;
  if (v7)
  {
    llvm::MachineOperand::setReg(*((_QWORD *)v5 + 4), v9);
    **((_DWORD **)v5 + 4) = **((_DWORD **)v5 + 4) & 0xFFF000FF | ((v43 & 0xFFF) << 8);
  }
  llvm::MachineOperand::setReg(*((_QWORD *)v5 + 4) + 32 * v13, v15);
  llvm::MachineOperand::setReg(*((_QWORD *)v5 + 4) + 32 * v11, v18);
  *(_DWORD *)(*((_QWORD *)v5 + 4) + 32 * v13) = *(_DWORD *)(*((_QWORD *)v5 + 4) + 32 * v13) & 0xFFF000FF | ((v44 & 0xFFF) << 8);
  *(_DWORD *)(*((_QWORD *)v5 + 4) + 32 * v11) = *(_DWORD *)(*((_QWORD *)v5 + 4) + 32 * v11) & 0xFFF000FF | ((v45 & 0xFFF) << 8);
  if (v46)
    v36 = 0x4000000;
  else
    v36 = 0;
  *(_DWORD *)(*((_QWORD *)v5 + 4) + 32 * v13) = *(_DWORD *)(*((_QWORD *)v5 + 4) + 32 * v13) & 0xFBFFFFFF | v36;
  if (v47)
    v37 = 0x4000000;
  else
    v37 = 0;
  *(_DWORD *)(*((_QWORD *)v5 + 4) + 32 * v11) = *(_DWORD *)(*((_QWORD *)v5 + 4) + 32 * v11) & 0xFBFFFFFF | v37;
  *(_DWORD *)(*((_QWORD *)v5 + 4) + 32 * v13) = *(_DWORD *)(*((_QWORD *)v5 + 4) + 32 * v13) & 0xEFFFFFFF | v32;
  *(_DWORD *)(*((_QWORD *)v5 + 4) + 32 * v11) = *(_DWORD *)(*((_QWORD *)v5 + 4) + 32 * v11) & 0xEFFFFFFF | v33;
  *(_DWORD *)(*((_QWORD *)v5 + 4) + 32 * v13) = *(_DWORD *)(*((_QWORD *)v5 + 4) + 32 * v13) & 0xDFFFFFFF | v34;
  *(_DWORD *)(*((_QWORD *)v5 + 4) + 32 * v11) = *(_DWORD *)(*((_QWORD *)v5 + 4) + 32 * v11) & 0xDFFFFFFF | v35;
  if (v15 - 0x40000000 >= 0xC0000001)
  {
    if (v42)
      v38 = 0x8000000;
    else
      v38 = 0;
    *(_DWORD *)(*((_QWORD *)v5 + 4) + 32 * v13) = *(_DWORD *)(*((_QWORD *)v5 + 4) + 32 * v13) & 0xF7FFFFFF | v38;
  }
  if (v18 - 0x40000000 >= 0xC0000001)
  {
    if (v41)
      v39 = 0x8000000;
    else
      v39 = 0;
    *(_DWORD *)(*((_QWORD *)v5 + 4) + 32 * v11) = *(_DWORD *)(*((_QWORD *)v5 + 4) + 32 * v11) & 0xF7FFFFFF | v39;
  }
  return v5;
}

uint64_t llvm::TargetInstrInfo::commuteInstruction(llvm::TargetInstrInfo *this, llvm::MachineInstr *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v9;
  unsigned int v10;

  v9 = a5;
  v10 = a4;
  if ((_DWORD)a4 != -1 && (_DWORD)a5 != -1)
    return (*(uint64_t (**)(llvm::TargetInstrInfo *, llvm::MachineInstr *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 40))(this, a2, a3, a4, a5);
  if ((*(unsigned int (**)(llvm::TargetInstrInfo *, llvm::MachineInstr *, unsigned int *, unsigned int *))(*(_QWORD *)this + 200))(this, a2, &v10, &v9))
  {
    a5 = v9;
    a4 = v10;
    return (*(uint64_t (**)(llvm::TargetInstrInfo *, llvm::MachineInstr *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 40))(this, a2, a3, a4, a5);
  }
  return 0;
}

