uint64_t sub_1C6279440(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if ((sub_1C62796C0(a1, a2, &v6) & 1) != 0)
    return v6;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = a1 + 8;
    v5 = 64;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 8 * v5;
}

BOOL llvm::GPUSDISel::is16BitInteger(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return *(_BYTE *)(*(_QWORD *)(a2 + 40) + 16 * a3) == 4;
}

BOOL llvm::GPUSDISel::is32BitInteger(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return *(_BYTE *)(*(_QWORD *)(a2 + 40) + 16 * a3) == 5;
}

BOOL llvm::GPUSDISel::isHalf(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return *(_BYTE *)(*(_QWORD *)(a2 + 40) + 16 * a3) == 9;
}

BOOL llvm::GPUSDISel::isFloat(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return *(_BYTE *)(*(_QWORD *)(a2 + 40) + 16 * a3) == 10;
}

_QWORD *llvm::GPUSDISel::GetTargetConstantValue(llvm::GPUSDISel *this, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned __int8 *v5[2];

  v2 = *((_QWORD *)this + 5);
  v5[0] = 0;
  v5[1] = 0;
  v3 = sub_1C6366AB4(v2, a2, (const llvm::APInt *)v5, (llvm *)5, 0, 1, 0);
  if (v5[0])
    llvm::MetadataTracking::untrack((uint64_t)v5, v5[0]);
  return v3;
}

void *llvm::GPUSDISel::AddMemOperand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  _QWORD v16[2];
  int v17;
  char v18;
  _QWORD v19[2];
  int v20;
  char v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 8) + 272);
  if (*(_DWORD *)(a2 + 12) == -1)
  {
    v14 = v7();
    v16[0] = v14 | 4;
    v16[1] = 0;
    v18 = 0;
    if (v14)
      v15 = *(_DWORD *)(v14 + 12);
    else
      v15 = 0;
    v17 = v15;
    v22 = 0u;
    v23 = 0u;
    llvm::MachineFunction::getMachineMemOperand(v6, (uint64_t)v16, 2, 16, 3, (uint64_t)&v22, 0, 1, 0, 0, 0);
  }
  else
  {
    v8 = v7();
    v19[0] = v8 | 4;
    v19[1] = 0;
    v21 = 0;
    if (v8)
      v9 = *(_DWORD *)(v8 + 12);
    else
      v9 = 0;
    v20 = v9;
    v22 = 0u;
    v23 = 0u;
    llvm::MachineFunction::getMachineMemOperand(v6, (uint64_t)v19, 1, 16, 3, (uint64_t)&v22, 0, 1, 0, 0, 0);
  }
  v11 = *(void **)(a1 + 40);
  v12 = *a4;
  *(_QWORD *)&v22 = v10;
  return sub_1C636E10C(v11, v12, &v22, 1);
}

uint64_t sub_1C62796C0(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 64;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_DWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != 0x7FFFFFFF)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == 0x80000000;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_DWORD *sub_1C6279770(_DWORD *a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_1C62796C0((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C62797D4(a1, a2, v7);
    *v5 = *a2;
    *((_BYTE *)v5 + 4) = 0;
  }
  return v5;
}

_DWORD *sub_1C62797D4(_DWORD *a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 64;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C556FDF8((uint64_t)a1, v6);
  v8 = 0;
  sub_1C62796C0((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != 0x7FFFFFFF)
    --a1[1];
  return a3;
}

uint64_t sub_1C6279894(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;

  v4 = a2;
  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_DWORD *)(result + 8);
    v9 = (_DWORD *)(result + 520);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_6;
    v8 = *(_DWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = 0x7FFFFFFF;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_6:
  if (a2 != a3)
  {
    do
    {
      v10 = *(_DWORD *)v4;
      if ((*(_DWORD *)v4 - 0x7FFFFFFF) >= 2)
      {
        v12 = 0;
        result = sub_1C62796C0((uint64_t)v5, v10, &v12);
        v11 = v12;
        *v12 = *(_DWORD *)v4;
        *((_BYTE *)v11 + 4) = *(_BYTE *)(v4 + 4);
        *v5 += 2;
      }
      v4 += 8;
    }
    while (v4 != a3);
  }
  return result;
}

void llvm::initializeGPUIterateCombinePass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED806350);
  if (v2 != -1)
  {
    v5[0] = sub_1C5570174;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED806350, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t llvm::createGPUIterateCombinePass(llvm *this, const llvm::GPUIterateCombiner *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = operator new();
  result = sub_1C557022C(v3);
  *(_QWORD *)(result + 1832) = this;
  return result;
}

uint64_t llvm::GPUMetadataEmitter::GPUMetadataEmitter(uint64_t a1, uint64_t a2)
{
  int64x2_t v3;
  uint64_t v4;
  flatbuffers::Parser *v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11[23];
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37[23];
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 1;
  v3 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v4 = a1 + 4677;
  *(int64x2_t *)(a1 + 16) = v3;
  *(int64x2_t *)(a1 + 32) = v3;
  *(int64x2_t *)(a1 + 48) = v3;
  *(int64x2_t *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)(a1 + 88) = 0x800000000;
  *(_QWORD *)(a1 + 160) = a1 + 176;
  *(_QWORD *)(a1 + 168) = 0x600000000;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  v6 = (flatbuffers::Parser *)(a1 + 320);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 259) = 0u;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  *(_DWORD *)((char *)&v7 + 3) = 0;
  LODWORD(v7) = 0;
  *((_QWORD *)&v7 + 1) = 0x10100000002;
  v8 = 1;
  v9 = 0;
  v10 = 0;
  v12 = 15;
  strcpy(v11, "std::unique_ptr");
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v13 = 0;
  v20 = 84;
  v21 = 257;
  v22 = 0;
  v23 = 0;
  *(_QWORD *)((char *)v24 + 5) = 0;
  v24[0] = 0;
  v26 = 0u;
  v27 = 0u;
  v25 = 0u;
  v28 = 1;
  v30 = 0;
  v31[0] = 0;
  *(_DWORD *)((char *)v31 + 7) = 0;
  v29 = 0;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v38 = 10;
  v36 = 0;
  strcpy(v37, "_generated");
  v40 = 0;
  v41 = 0;
  v39 = 0;
  v42 = 1;
  v43 = 0;
  v44 = 257;
  sub_1C55878F0(a1 + 320, &v7);
  sub_1C47652C8((uint64_t)&v7);
  *(_DWORD *)((char *)&v7 + 3) = 0;
  LODWORD(v7) = 0;
  *((_QWORD *)&v7 + 1) = 0x10100000002;
  v8 = 1;
  v9 = 0;
  v10 = 0;
  v12 = 15;
  strcpy(v11, "std::unique_ptr");
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v13 = 0;
  v20 = 84;
  v21 = 257;
  v23 = 0;
  v24[0] = 0;
  *(_QWORD *)((char *)v24 + 5) = 0;
  v22 = 0;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 1;
  v30 = 0;
  v31[0] = 0;
  *(_DWORD *)((char *)v31 + 7) = 0;
  v29 = 0;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0;
  strcpy(v37, "_generated");
  v38 = 10;
  v40 = 0;
  v41 = 0;
  v39 = 0;
  v42 = 1;
  v43 = 0;
  v44 = 257;
  sub_1C55878F0(a1 + 1528, &v7);
  sub_1C47652C8((uint64_t)&v7);
  *(_DWORD *)((char *)&v7 + 3) = 0;
  LODWORD(v7) = 0;
  *((_QWORD *)&v7 + 1) = 0x10100000002;
  v8 = 1;
  v9 = 0;
  v10 = 0;
  v12 = 15;
  strcpy(v11, "std::unique_ptr");
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v13 = 0;
  v20 = 84;
  v21 = 257;
  v23 = 0;
  v24[0] = 0;
  *(_QWORD *)((char *)v24 + 5) = 0;
  v22 = 0;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 1;
  v30 = 0;
  v31[0] = 0;
  *(_DWORD *)((char *)v31 + 7) = 0;
  v29 = 0;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0;
  strcpy(v37, "_generated");
  v38 = 10;
  v40 = 0;
  v41 = 0;
  v39 = 0;
  v42 = 1;
  v43 = 0;
  v44 = 257;
  sub_1C55878F0(a1 + 2736, &v7);
  sub_1C47652C8((uint64_t)&v7);
  *(_DWORD *)((char *)&v7 + 3) = 0;
  LODWORD(v7) = 0;
  *((_QWORD *)&v7 + 1) = 0x10100000002;
  v8 = 1;
  v9 = 0;
  v10 = 0;
  v12 = 15;
  strcpy(v11, "std::unique_ptr");
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v13 = 0;
  v20 = 84;
  v21 = 257;
  v23 = 0;
  v24[0] = 0;
  *(_QWORD *)((char *)v24 + 5) = 0;
  v22 = 0;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 1;
  v30 = 0;
  v31[0] = 0;
  *(_DWORD *)((char *)v31 + 7) = 0;
  v29 = 0;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0;
  strcpy(v37, "_generated");
  v38 = 10;
  v40 = 0;
  v41 = 0;
  v39 = 0;
  v42 = 1;
  v43 = 0;
  v44 = 257;
  sub_1C55878F0(a1 + 3944, &v7);
  sub_1C47652C8((uint64_t)&v7);
  *(_DWORD *)((char *)&v7 + 3) = 0;
  LODWORD(v7) = 0;
  *((_QWORD *)&v7 + 1) = 0x10100000002;
  v8 = 1;
  v9 = 0;
  v10 = 0;
  v12 = 15;
  strcpy(v11, "std::unique_ptr");
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v13 = 0;
  v20 = 84;
  v21 = 257;
  v23 = 0;
  v24[0] = 0;
  *(_QWORD *)((char *)v24 + 5) = 0;
  v22 = 0;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 1;
  v30 = 0;
  v31[0] = 0;
  *(_DWORD *)((char *)v31 + 7) = 0;
  v29 = 0;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0;
  strcpy(v37, "_generated");
  v38 = 10;
  v40 = 0;
  v41 = 0;
  v39 = 0;
  v42 = 1;
  v43 = 0;
  v44 = 257;
  sub_1C55878F0(a1 + 5152, &v7);
  sub_1C47652C8((uint64_t)&v7);
  *(_BYTE *)(v4 + 1683) = 0;
  *(_WORD *)(a1 + 1053) = 257;
  *(_BYTE *)(a1 + 1063) = 1;
  *(_BYTE *)(a1 + 1049) = 1;
  flatbuffers::Parser::Deserialize(v6, byte_1C86554F8);
  *(_WORD *)(a1 + 2261) = 257;
  *(_BYTE *)(a1 + 2271) = 1;
  *(_BYTE *)(a1 + 2257) = 1;
  flatbuffers::Parser::Deserialize((flatbuffers::Parser *)(a1 + 1528), byte_1C8659E10);
  *(_BYTE *)(a1 + 3469) = 1;
  *(_BYTE *)(a1 + 3479) = 1;
  flatbuffers::Parser::Deserialize((flatbuffers::Parser *)(a1 + 2736), byte_1C865E8C8);
  *(_BYTE *)v4 = 1;
  *(_BYTE *)(v4 + 10) = 1;
  flatbuffers::Parser::Deserialize((flatbuffers::Parser *)(a1 + 3944), byte_1C865EE40);
  *(_WORD *)(v4 + 1208) = 257;
  *(_BYTE *)(v4 + 1218) = 1;
  *(_BYTE *)(v4 + 1204) = 1;
  flatbuffers::Parser::Deserialize((flatbuffers::Parser *)(a1 + 5152), byte_1C865EF48);
  return a1;
}

uint64_t *sub_1C6279FC0(uint64_t *result, int a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  if (a2)
  {
    v3 = (uint64_t)result;
    result = (uint64_t *)sub_1C4D66308((uint64_t)result, 4uLL);
    v4 = *(_DWORD *)(v3 + 32) - *(_DWORD *)(v3 + 48) + *(_DWORD *)(v3 + 40) - a2;
    if (v4 != -4 || *(_BYTE *)(v3 + 80))
    {
      v5 = sub_1C4D68A6C(v3, v4 + 4);
      return sub_1C4D66288((uint64_t *)v3, 4, v5);
    }
  }
  return result;
}

void sub_1C627A034(__n128 *a1, char **a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&PrintPerfDiagsForLoopsOnly, 0, 0);
  byte_1ED8312F8 = 0;
  qword_1ED831300 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED831308 = 0;
  PrintPerfDiagsForLoopsOnly = (uint64_t)&unk_1E819E898;
  qword_1ED831310 = (uint64_t)&off_1E819E9A0;
  qword_1ED831318 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED831330 = (uint64_t)&qword_1ED831318;
  sub_1C558A5A8(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&PrintPerfDiagsForLoopsOnly);
}

void llvm::initializeGPUSampleSinkPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED806378);
  if (v2 != -1)
  {
    v5[0] = sub_1C558BB64;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED806378, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

int32x2_t *sub_1C627A138(int32x2_t *result, int a2)
{
  __int32 v2;
  int32x2_t v3;
  __int32 v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  int v9;

  v2 = result[2].i32[0];
  if (v2)
  {
    v3 = *result;
    v4 = v2 - 1;
    LODWORD(v5) = (v2 - 1) & (37 * a2);
    v6 = (int *)(*(_QWORD *)result + 8 * v5);
    v7 = *v6;
    if (*v6 == a2)
    {
LABEL_3:
      *v6 = -2;
      result[1] = vadd_s32(result[1], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v8 = 1;
      while (v7 != -1)
      {
        v9 = v5 + v8++;
        v5 = v9 & v4;
        v7 = *(_DWORD *)(*(_QWORD *)&v3 + 8 * v5);
        if (v7 == a2)
        {
          v6 = (int *)(*(_QWORD *)&v3 + 8 * v5);
          goto LABEL_3;
        }
      }
    }
  }
  return result;
}

void llvm::initializeGPUWaitPlacementPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED806500);
  if (v2 != -1)
  {
    v5[0] = sub_1C558ED00;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED806500, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

_QWORD *llvm::createGPUWaitPlacementPass(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;

  v2 = operator new();
  result = (_QWORD *)sub_1C4776848(v2, (uint64_t)&unk_1EF8F3008);
  *result = &off_1E816F958;
  result[31] = a1;
  return result;
}

void sub_1C627A26C()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C627A280(__int128 *a1)
{
  uint64_t v2;

  v2 = sub_1C47AD050((uint64_t)PrintDetailedPerfDiags, 0, 0);
  byte_1ED8313B8 = 0;
  qword_1ED8313C0 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED8313C8 = 0;
  PrintDetailedPerfDiags[0] = (uint64_t)&unk_1E819E898;
  qword_1ED8313D0 = (uint64_t)&off_1E819E9A0;
  qword_1ED8313D8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED8313F0 = (uint64_t)&qword_1ED8313D8;
  llvm::cl::Option::setArgStr(v2, "print-detailed-perf-diags", 0x19uLL);
  xmmword_1ED831358 = *a1;
  llvm::cl::Option::addArgument((llvm::cl::Option *)PrintDetailedPerfDiags);
}

void sub_1C627A31C(char **a1, __int128 *a2)
{
  uint64_t v4;
  char *v5;

  v4 = sub_1C47AD050((uint64_t)PrintCanonicalRegs, 0, 0);
  byte_1ED831838 = 0;
  qword_1ED831840 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED831848 = 0;
  PrintCanonicalRegs[0] = (uint64_t)&unk_1E819E898;
  qword_1ED831850 = (uint64_t)&off_1E819E9A0;
  qword_1ED831858 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED831870 = (uint64_t)&qword_1ED831858;
  llvm::cl::Option::setArgStr(v4, "print-canonical-regs", 0x14uLL);
  v5 = *a1;
  byte_1ED831838 = **a1;
  byte_1ED831849 = 1;
  byte_1ED831848 = *v5;
  xmmword_1ED8317D8 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)PrintCanonicalRegs);
}

void sub_1C627A3E0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED806510);
  if (v1 != -1)
  {
    v4[0] = sub_1C5593F14;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED806510, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627A444(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  return sub_1C5593FA0(v2, a1);
}

uint64_t sub_1C627A47C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5593FA0(v0, 0);
}

void sub_1C627A4AC(llvm::ModulePass *a1)
{
  llvm::ModulePass::~ModulePass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C627A4D0()
{
  return "AGX Expand Builtins";
}

uint64_t sub_1C627A4E0(uint64_t a1)
{
  llvm::detail::DoubleAPFloat *v1;
  void *v2;

  v2 = *(void **)(a1 + 8);
  v1 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v2 == &unk_1C866F1C0)
    return llvm::detail::DoubleAPFloat::isInteger(v1);
  else
    return llvm::detail::IEEEFloat::isInteger(v1);
}

void sub_1C627A4FC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED806608);
  if (v1 != -1)
  {
    v4[0] = sub_1C55977D0;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED806608, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627A560()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5597860(v0);
}

void sub_1C627A588(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED806610);
  if (v1 != -1)
  {
    v4[0] = sub_1C5597928;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED806610, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627A5EC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55979B8(v0);
}

void sub_1C627A614(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED806618);
  if (v1 != -1)
  {
    v4[0] = sub_1C5597A80;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED806618, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627A678()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5597B34(v0);
}

void sub_1C627A6A0(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_1E817A8F8;
  sub_1C619A658((uint64_t)(a1 + 10));
  v2 = (_QWORD *)a1[9];
  if (v2 == a1 + 6)
  {
    v3 = 4;
    v2 = a1 + 6;
  }
  else
  {
    if (!v2)
      goto LABEL_4;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_4:
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C627A704(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED806630);
  if (v1 != -1)
  {
    v4[0] = sub_1C5598D20;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED806630, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627A768()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5598DB0(v0);
}

void sub_1C627A790(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED806640);
  if (v1 != -1)
  {
    v4[0] = sub_1C559A1F0;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED806640, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void sub_1C627A7F4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED806650);
  if (v1 != -1)
  {
    v4[0] = sub_1C559A438;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED806650, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627A858()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C559A4D4(v0);
}

unint64_t sub_1C627A880(llvm::DataLayout *a1, llvm::AllocaInst *this)
{
  const char *v2;
  _QWORD v4[2];
  uint64_t v5;
  uint64_t v6;
  char v7;

  llvm::AllocaInst::getAllocationSizeInBits(this, a1, (uint64_t)&v5);
  if (!v7)
    return 0;
  v4[0] = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4[1] = (_DWORD)v6 == 1;
  return (unint64_t)llvm::TypeSize::operator unsigned long long(v4, v2) >> 3;
}

void sub_1C627A8E0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED806660);
  if (v1 != -1)
  {
    v4[0] = sub_1C559C9B0;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED806660, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627A944(_QWORD *a1, char a2, char a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void (**v9)(_QWORD *);
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  v7 = (_QWORD *)a1[3];
  if (v7)
  {
    if (v7 == a1)
    {
      v12 = v11;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v11);
    }
    else
    {
      v12 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_1C559CA54(v6, (uint64_t)v11, a2, a3);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = (void (**)(_QWORD *))(v11[0] + 32);
    v8 = v11;
  }
  else
  {
    if (!v12)
      return v6;
    v9 = (void (**)(_QWORD *))(*v12 + 40);
  }
  (*v9)(v8);
  return v6;
}

void sub_1C627AA54(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED806668);
  if (v1 != -1)
  {
    v4[0] = sub_1C559CB8C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED806668, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627AAB8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C559CC20(v0);
}

void sub_1C627AAE4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C627AAF8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8170000;
  result[1] = v3;
  return result;
}

void sub_1C627AB30(char **a1, __int128 *a2)
{
  uint64_t v4;
  char *v5;

  v4 = sub_1C47AD050((uint64_t)qword_1ED806730, 0, 0);
  byte_1ED8067B0 = 0;
  qword_1ED8067B8 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED8067C0 = 0;
  qword_1ED806730[0] = (uint64_t)&unk_1E819E898;
  qword_1ED8067C8 = (uint64_t)&off_1E819E9A0;
  qword_1ED8067D0 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED8067E8 = (uint64_t)&qword_1ED8067D0;
  llvm::cl::Option::setArgStr(v4, "atomicoptimize-datadiverge", 0x1AuLL);
  v5 = *a1;
  byte_1ED8067B0 = **a1;
  byte_1ED8067C1 = 1;
  byte_1ED8067C0 = *v5;
  xmmword_1ED806750 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED806730);
}

void sub_1C627ABF8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED8067F0);
  if (v1 != -1)
  {
    v4[0] = sub_1C55A1454;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED8067F0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

double sub_1C627AC5C()
{
  _QWORD *v0;
  double result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  v0[2] = &unk_1EF8F3010;
  *v0 = &off_1E81700B0;
  *(_QWORD *)&result = 4;
  v0[3] = 4;
  return result;
}

_QWORD *sub_1C627ACA8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *a1 = off_1E8170048;
  v2 = a1 + 23;
  v3 = (_QWORD *)a1[26];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  v5 = (void *)a1[19];
  if (v5)
  {
    a1[20] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[16];
  if (v6)
  {
    a1[17] = v6;
    operator delete(v6);
  }
  return sub_1C47A80D0(a1);
}

uint64_t sub_1C627AD2C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v8;
  _DWORD *v9;
  char *v10;
  _DWORD *v11;
  char *v12;
  uint64_t v13;
  int v15;
  int v16;

  v15 = 0;
  v16 = a2;
  v8 = llvm::cl::parser<unsigned int>::parse(a1 + 176, (_QWORD *)a1, a3, a4, a5, a6, &v15);
  if ((v8 & 1) != 0)
    return v8;
  v9 = *(_DWORD **)(a1 + 136);
  if ((unint64_t)v9 >= *(_QWORD *)(a1 + 144))
  {
    v10 = sub_1C4E36640((char **)(a1 + 128), &v15);
  }
  else
  {
    *v9 = v15;
    v10 = (char *)(v9 + 1);
  }
  *(_QWORD *)(a1 + 136) = v10;
  *(_WORD *)(a1 + 12) = a2;
  v11 = *(_DWORD **)(a1 + 160);
  if ((unint64_t)v11 >= *(_QWORD *)(a1 + 168))
  {
    v12 = sub_1C4E36640((char **)(a1 + 152), &v16);
  }
  else
  {
    *v11 = a2;
    v12 = (char *)(v11 + 1);
  }
  *(_QWORD *)(a1 + 160) = v12;
  v13 = *(_QWORD *)(a1 + 208);
  if (v13)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v13 + 48))(v13, &v15);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C627ADE8();
}

uint64_t sub_1C627ADE8()
{
  return 2;
}

void sub_1C627ADF0(_QWORD *a1)
{
  sub_1C627ACA8(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C627AE14(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 176, a1);
}

llvm::raw_ostream *sub_1C627AE20(uint64_t a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::basic_parser_impl *)(a1 + 176), (const llvm::cl::Option *)a1, a2);
}

_QWORD *sub_1C627AE34(_QWORD *result)
{
  result[20] = result[19];
  result[17] = result[16];
  return result;
}

_QWORD *sub_1C627AE4C(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  _QWORD *result;

  v3 = sub_1C55A2D24(a1, a2, 1);
  result = (_QWORD *)(*(_QWORD *)a1 + 144 * *(unsigned int *)(a1 + 8));
  *result = result + 2;
  result[1] = 0x1000000000;
  if (*(_DWORD *)(v3 + 8))
    result = (_QWORD *)sub_1C55A2D8C((uint64_t)result, (const void **)v3);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_1C627AEB0(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 144, &v5);
  sub_1C627AF1C((uint64_t *)a1, v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C627AF1C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v5 = *a1;
    v6 = 144 * v2;
    do
    {
      *a2 = a2 + 2;
      a2[1] = 0x1000000000;
      if (*(_DWORD *)(v5 + 8))
        sub_1C55A2D8C((uint64_t)a2, (const void **)v5);
      v5 += 144;
      a2 += 18;
      v6 -= 144;
    }
    while (v6);
    v7 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v7)
    {
      v8 = *a1;
      v9 = 144 * v7;
      do
      {
        v10 = *(void **)(v8 + v9 - 144);
        if ((void *)(v8 + v9 - 128) != v10)
          free(v10);
        v9 -= 144;
      }
      while (v9);
    }
  }
}

char **sub_1C627AFCC(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 144 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 144];
      if (&v2[v4 - 128] != v5)
        free(v5);
      v4 -= 144;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_1C627B040(__int128 *a1, __n128 *a2, _WORD *a3, _WORD *a4, _WORD *a5)
{
  sub_1C47AD050((uint64_t)&qword_1ED806A38, 1, 0);
  qword_1ED806AB8 = 0;
  qword_1ED806AC0 = 0;
  qword_1ED806AC8 = 0;
  unk_1ED806AD0 = 0;
  qword_1ED806A38 = (uint64_t)off_1E8170048;
  qword_1ED806AD8 = 0;
  unk_1ED806AE0 = 0;
  qword_1ED806AE8 = (uint64_t)&unk_1E819E2C0;
  qword_1ED806AF0 = (uint64_t)&off_1E8170150;
  qword_1ED806B08 = (uint64_t)&qword_1ED806AF0;
  sub_1C627B0EC(a1, a2, a3, a4, a5);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED806A38);
}

__n128 sub_1C627B0EC(__int128 *a1, __n128 *a2, _WORD *a3, _WORD *a4, _WORD *a5)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED806A38, "bisect-helper-shaderids-filter", 0x1EuLL);
  xmmword_1ED806A68 = *a1;
  result = *a2;
  xmmword_1ED806A58 = (__int128)*a2;
  word_1ED806A42 = word_1ED806A42 & 0xFF9F | (32 * (*a3 & 3));
  word_1ED806A42 = word_1ED806A42 & 0xFFF8 | *a4 & 7;
  word_1ED806A42 |= (*a5 & 0x1F) << 9;
  return result;
}

void sub_1C627B184()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C627B198()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8170150;
  return result;
}

void sub_1C627B1BC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8170150;
}

void sub_1C627B1D8(__int128 *a1, _WORD *a2, int **a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED806978, 0, 0);
  dword_1ED8069F8 = 0;
  qword_1ED806A00 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED806A08 = 0;
  qword_1ED806978 = (uint64_t)&unk_1E819E3B0;
  qword_1ED806A10 = (uint64_t)&unk_1E819E2C0;
  qword_1ED806A18 = (uint64_t)&off_1E7F95260;
  qword_1ED806A30 = (uint64_t)&qword_1ED806A18;
  llvm::cl::Option::setArgStr(v6, "bisect-helper-split-nb-insts", 0x1CuLL);
  xmmword_1ED806998 = *a1;
  word_1ED806982 = (32 * (*a2 & 3)) | word_1ED806982 & 0xFF9F;
  dword_1ED8069F8 = **a3;
  byte_1ED806A0C = 1;
  dword_1ED806A08 = dword_1ED8069F8;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED806978);
}

void sub_1C627B2B4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED807170);
  if (v1 != -1)
  {
    v4[0] = sub_1C55A354C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED807170, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627B318()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55A35E0(v0);
}

uint64_t sub_1C627B340(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C55A9A70(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C627B3EC(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *v5;
  uint64_t result;
  int v10;
  uint64_t *v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  BOOL v16;

  if (!a2)
  {
    v5 = 0;
    result = 0;
    goto LABEL_3;
  }
  v10 = sub_1C627B4EC(a3);
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & (a2 - 1);
    v5 = (uint64_t *)(a1 + 32 * v13);
    v14 = *v5;
    if (*(_QWORD *)a3 == *v5 && *(_QWORD *)(a3 + 8) == v5[1] && *(_DWORD *)(a3 + 16) == *((_DWORD *)v5 + 4))
    {
      result = 1;
      goto LABEL_3;
    }
    if (v14 == -8192)
    {
      v16 = v5[1] == -8192 && *((_DWORD *)v5 + 4) == -2;
      goto LABEL_24;
    }
    if (v14 == -4096 && v5[1] == -4096 && *((_DWORD *)v5 + 4) == -1)
      break;
    v16 = 0;
LABEL_24:
    if (v16 && v11 == 0)
      v11 = (uint64_t *)(a1 + 32 * v13);
    v10 = v13 + i;
  }
  result = 0;
  if (v11)
    v5 = v11;
LABEL_3:
  *a4 = v5;
  return result;
}

uint64_t sub_1C627B4EC(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = (*(_DWORD *)a1 >> 4) ^ (*(_DWORD *)a1 >> 9);
  v2 = sub_1C627B55C(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16));
  v3 = ~((unint64_t)v2 << 32) + v2 + (v1 << 32);
  v4 = 9 * (((v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13)) ^ (((v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  return (v5 >> 31) ^ v5;
}

uint64_t sub_1C627B55C(unsigned int a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v2 = (((unint64_t)(37 * a2) << 32) - 1) ^ ((((unint64_t)(37 * a2) << 32) - 1) >> 22);
  v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
  v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
  v5 = ((v4 >> 31) ^ v4 | ((unint64_t)((a1 >> 4) ^ (a1 >> 9)) << 32))
     + ~((unint64_t)((v4 >> 31) ^ v4) << 32);
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  return ((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27));
}

uint64_t sub_1C627B5D8(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  v4 = sub_1C627B3EC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C627B654(a1, a2, v7);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(v5 + 16) = *(_DWORD *)(a2 + 16);
    *(_QWORD *)(v5 + 24) = 0;
  }
  return v5;
}

uint64_t sub_1C627B654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  BOOL v8;
  uint64_t v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_13;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_13:
    sub_1C55A9F74(a1, v6);
    v9 = 0;
    sub_1C627B3EC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v9);
    a3 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a3 != -4096 || (*(_QWORD *)(a3 + 8) == -4096 ? (v8 = *(_DWORD *)(a3 + 16) == -1) : (v8 = 0), !v8))
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C627B71C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v11;
  _QWORD *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)result;
    v8 = *(_QWORD *)result + 32 * v6;
    do
    {
      *(_QWORD *)v7 = -4096;
      *(_QWORD *)(v7 + 8) = -4096;
      *(_DWORD *)(v7 + 16) = -1;
      v7 += 32;
    }
    while (v7 != v8);
  }
  while (a2 != a3)
  {
    if (*(_QWORD *)a2 == -8192)
    {
      if (*(_QWORD *)(a2 + 8) != -8192 || *(_DWORD *)(a2 + 16) != -2)
      {
LABEL_17:
        v12 = 0;
        result = sub_1C627B3EC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), a2, &v12);
        v11 = v12;
        *v12 = *(_QWORD *)a2;
        v11[1] = *(_QWORD *)(a2 + 8);
        *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
        v11[3] = *(_QWORD *)(a2 + 24);
        ++*(_DWORD *)(v5 + 8);
      }
    }
    else
    {
      if (*(_QWORD *)a2 != -4096)
        goto LABEL_17;
      if (*(_QWORD *)(a2 + 8) != -4096 || *(_DWORD *)(a2 + 16) != -1)
        goto LABEL_17;
    }
    a2 += 32;
  }
  return result;
}

void sub_1C627B81C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED807180);
  if (v1 != -1)
  {
    v4[0] = sub_1C55AA038;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED807180, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627B880()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55AA0C8(v0);
}

void sub_1C627B8A8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED807190);
  if (v1 != -1)
  {
    v4[0] = sub_1C55AAC94;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED807190, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627B90C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void (**v8)(_QWORD *);
  _QWORD *v9;
  void (**v10)(_QWORD *);
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  v5 = (_QWORD *)a1[3];
  if (v5)
  {
    if (v5 == a1)
    {
      v15 = v14;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v14);
    }
    else
    {
      v15 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v15 = 0;
  }
  v6 = (_QWORD *)a2[3];
  if (v6)
  {
    if (v6 == a2)
    {
      v13 = v12;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v12);
    }
    else
    {
      v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    }
  }
  else
  {
    v13 = 0;
  }
  sub_1C55AAD30(v4, (uint64_t)v14, (uint64_t)v12);
  v7 = v13;
  if (v13 == v12)
  {
    v8 = (void (**)(_QWORD *))(v12[0] + 32);
    v7 = v12;
LABEL_9:
    (*v8)(v7);
    goto LABEL_10;
  }
  if (v13)
  {
    v8 = (void (**)(_QWORD *))(*v13 + 40);
    goto LABEL_9;
  }
LABEL_10:
  v9 = v15;
  if (v15 == v14)
  {
    v10 = (void (**)(_QWORD *))(v14[0] + 32);
    v9 = v14;
  }
  else
  {
    if (!v15)
      return v4;
    v10 = (void (**)(_QWORD *))(*v15 + 40);
  }
  (*v10)(v9);
  return v4;
}

_QWORD *sub_1C627BA90(_QWORD *a1, unsigned int a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  int v6;

  if (a2 <= 4)
  {
    *a1 = 1;
LABEL_3:
    result = a1 + 1;
    v4 = a1 + 9;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  v5 = a2;
  result = operator new(16 * a2, (std::align_val_t)8uLL);
  a1[1] = result;
  a1[2] = v5;
  v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
    goto LABEL_3;
  v4 = &result[2 * v5];
  do
  {
LABEL_4:
    *result = -4096;
    result += 2;
  }
  while (result != v4);
  return result;
}

char **sub_1C627BB10(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v9 = v2;
    v5 = v3 << 6;
    do
    {
      v6 = &v9[v5];
      v7 = *(char **)&v9[v5 - 24];
      if (&v9[v5 - 8] != v7)
        free(v7);
      v8 = (char *)*((_QWORD *)v6 - 7);
      if (v6 - 40 != v8)
        free(v8);
      v5 -= 64;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C627BBA4(uint64_t a1)
{
  sub_1C627BBFC((char **)(a1 + 864));
  sub_1C627BC78(a1 + 344);
  if ((*(_BYTE *)(a1 + 80) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 88), 8);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

char **sub_1C627BBFC(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  char *v7;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v7 = v2;
    v5 = 48 * v3;
    do
    {
      v6 = *(char **)&v7[v5 - 24];
      if (&v7[v5 - 8] != v6)
        free(v6);
      v5 -= 48;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C627BC78(uint64_t a1)
{
  sub_1C55AF8EC(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  return a1;
}

void *sub_1C627BCB0(unsigned int *a1, unint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *result;

  v3 = (_DWORD *)sub_1C55B5198(a1, a2, 1);
  v4 = 0;
  v5 = (_QWORD *)(*(_QWORD *)a1 + 1032 * a1[2]);
  *v5 = 1;
  do
  {
    v5[v4 + 1] = -4096;
    v4 += 2;
  }
  while (v4 != 128);
  result = sub_1C55B5380((uint64_t)v5, v3);
  ++a1[2];
  return result;
}

uint64_t sub_1C627BD20(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = a2;
  v8 = 0;
  v3 = sub_1C6185234(a1, &v7, &v8);
  v4 = a1 + 8;
  if (v3)
    return v8;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v6 = 4;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v6 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v6;
}

int *sub_1C627BD9C(int *a1)
{
  int v2;
  int *v3;
  uint64_t v4;
  int *result;
  uint64_t v6;
  int *v7;

  v2 = *a1;
  if (*a1 > 1)
  {
    if ((v2 & 1) != 0)
    {
      result = a1 + 2;
      v7 = a1 + 258;
LABEL_10:
      while ((*(_QWORD *)result | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        result += 4;
        if (result == v7)
          return v7;
      }
    }
    else
    {
      result = (int *)*((_QWORD *)a1 + 1);
      v6 = a1[4];
      if ((_DWORD)v6)
      {
        v7 = &result[4 * v6];
        goto LABEL_10;
      }
    }
  }
  else
  {
    if (v2)
    {
      v3 = a1 + 2;
      v4 = 64;
    }
    else
    {
      v3 = (int *)*((_QWORD *)a1 + 1);
      v4 = a1[4];
    }
    return &v3[4 * v4];
  }
  return result;
}

void *sub_1C627BE14(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE v11[31];
  uint64_t v12;
  uint64_t v13;

  if (a2 != a3)
  {
    v12 = v3;
    v13 = v4;
    v6 = a2;
    v7 = (uint64_t)result;
    v8 = (uint64_t)result + 72;
    do
    {
      result = sub_1C509FAE4(v7, v6, (uint64_t)v11);
      if (v11[16])
      {
        v9 = *v6;
        v10 = *(unsigned int *)(v7 + 80);
        if (v10 >= *(unsigned int *)(v7 + 84))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod(v8, v7 + 88, v10 + 1, 8);
          v10 = *(unsigned int *)(v7 + 80);
        }
        *(_QWORD *)(*(_QWORD *)(v7 + 72) + 8 * v10) = v9;
        ++*(_DWORD *)(v7 + 80);
      }
      ++v6;
    }
    while (v6 != a3);
  }
  return result;
}

uint64_t sub_1C627BEC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  _BYTE v13[32];
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  v9 = *a2;
  v10 = 0;
  sub_1C627C09C(a1, &v9, &v10, (uint64_t)&v7);
  v4 = v7;
  if (v8)
  {
    v11 = v13;
    v12 = 0x400000000;
    v14 = *a2;
    v15 = v17;
    v16 = 0x400000000;
    sub_1C627C02C(a1 + 72, (unint64_t)&v14);
    if (v15 != v17)
      free(v15);
    if (v11 != v13)
      free(v11);
    v5 = *(_DWORD *)(a1 + 80) - 1;
    *(_DWORD *)(v4 + 8) = v5;
  }
  else
  {
    v5 = *(_DWORD *)(v7 + 8);
  }
  return *(_QWORD *)(a1 + 72) + 56 * v5 + 8;
}

uint64_t sub_1C627BFC8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;

  v3 = sub_1C627BD20(a1, *a2);
  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 4;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  if (v4 + 16 * v5 == v3)
    v6 = (unsigned int *)(a1 + 80);
  else
    v6 = (unsigned int *)(v3 + 8);
  return *(_QWORD *)(a1 + 72) + 56 * *v6;
}

unint64_t sub_1C627C02C(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  _QWORD *v4;
  uint64_t v5;

  result = sub_1C55B4E28(a1, a2, 1);
  v4 = (_QWORD *)(*(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 8));
  *v4 = *(_QWORD *)result;
  v4[2] = 0x400000000;
  v4[1] = v4 + 3;
  v5 = (uint64_t)(v4 + 1);
  if (*(_DWORD *)(result + 16))
    result = sub_1C55A2D8C(v5, (const void **)(result + 8));
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C627C09C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v16 = 0;
  result = sub_1C6185234(a1, a2, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v10 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v11 = 4;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(unsigned int *)(a1 + 16);
    }
    v12 = 0;
    v13 = v10 + 16 * v11;
  }
  else
  {
    result = (uint64_t)sub_1C627C160((_DWORD *)a1, (uint64_t)a2, a2, v16);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    v14 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v15 = 4;
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(unsigned int *)(a1 + 16);
    }
    v13 = v14 + 16 * v15;
    v12 = 1;
  }
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v13;
  *(_BYTE *)(a4 + 16) = v12;
  return result;
}

_QWORD *sub_1C627C160(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C55B4CB0((uint64_t)a1, v7);
  v9 = 0;
  sub_1C6185234((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C627C21C(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C6185234((uint64_t)v5, (_QWORD *)a2, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

void sub_1C627C2E8(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 56, &v5);
  sub_1C627C354((uint64_t *)a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C627C354(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v4 = *a1 + 56 * v2;
    v5 = a2 + 24;
    v6 = *a1 + 8;
    do
    {
      v7 = v6 - 8;
      *(_QWORD *)(v5 - 24) = *(_QWORD *)(v6 - 8);
      *(_QWORD *)(v5 - 16) = v5;
      *(_QWORD *)(v5 - 8) = 0x400000000;
      if (*(_DWORD *)(v6 + 8))
        sub_1C55A2D8C(v5 - 16, (const void **)v6);
      v5 += 56;
      v6 += 56;
    }
    while (v7 + 56 != v4);
    v8 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v8)
    {
      v9 = *a1;
      v10 = 56 * v8;
      do
      {
        v11 = *(void **)(v9 + v10 - 48);
        if ((void *)(v9 + v10 - 32) != v11)
          free(v11);
        v10 -= 56;
      }
      while (v10);
    }
  }
}

_QWORD *sub_1C627C418(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6185234((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C627C160(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

char **sub_1C627C47C(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 48];
      if (&v2[v4 - 32] != v5)
        free(v5);
      v4 -= 56;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C627C4F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v16 = 0;
  result = sub_1C627C5B4(a1, a2, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v10 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v11 = 64;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(unsigned int *)(a1 + 16);
    }
    v12 = 0;
    v13 = v10 + 16 * v11;
  }
  else
  {
    result = (uint64_t)sub_1C627C664((_DWORD *)a1, (uint64_t)a2, a2, v16);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_BYTE *)(result + 8) = *a3;
    v14 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v15 = 64;
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(unsigned int *)(a1 + 16);
    }
    v13 = v14 + 16 * v15;
    v12 = 1;
  }
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v13;
  *(_BYTE *)(a4 + 16) = v12;
  return result;
}

uint64_t sub_1C627C5B4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 64;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C627C664(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 64;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C55B4E90((uint64_t)a1, v7);
  v9 = 0;
  sub_1C627C5B4((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C627C720(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 1032);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C627C5B4((uint64_t)v5, (_QWORD *)a2, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_BYTE *)v10 + 8) = *(_BYTE *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

_QWORD *sub_1C627C7EC(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C627C5B4((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C627C84C(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C627C84C(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 64;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C55B5014((uint64_t)a1, v7);
  v9 = 0;
  sub_1C627C5B4((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C627C908(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 1032);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C627C5B4((uint64_t)v5, a2, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

void sub_1C627C9D4(unsigned int *a1, unint64_t a2)
{
  unsigned int *v3;
  unsigned int v4;
  unint64_t v5;

  v5 = 0;
  v3 = (unsigned int *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, a2, 1032, &v5);
  sub_1C627CA40(a1, v3);
  v4 = v5;
  if (*(unsigned int **)a1 != a1 + 4)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  a1[3] = v4;
}

unsigned int *sub_1C627CA40(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[2];
  if (v2)
  {
    v3 = result;
    v4 = *(unsigned int **)result;
    v5 = *(_QWORD *)result + 1032 * v2;
    do
    {
      *(_QWORD *)a2 = 1;
      v6 = a2 + 258;
      for (i = 2; i != 258; i += 4)
        *(_QWORD *)&a2[i] = -4096;
      result = sub_1C55B5200(a2, v4);
      v4 += 258;
      a2 = v6;
    }
    while (v4 != (unsigned int *)v5);
    v8 = v3[2];
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)v3;
      v10 = 1032 * v8;
      do
      {
        if ((*(_BYTE *)(v9 + v10 - 1032) & 1) == 0)
          result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)(v9 + v10 - 1024), 8);
        v10 -= 1032;
      }
      while (v10);
    }
  }
  return result;
}

void *sub_1C627CB08(unsigned int *a1, _DWORD *a2)
{
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  size_t v7;

  v3 = *a1 & 1;
  *a1 = *a2 & 0xFFFFFFFE | v3;
  a1[1] = a2[1];
  v4 = a1 + 2;
  if (!v3)
    v4 = (_QWORD *)*v4;
  v6 = *(_BYTE *)a2;
  v5 = a2 + 2;
  if ((v6 & 1) == 0)
    v5 = (_QWORD *)*v5;
  if (v3)
    v7 = 1024;
  else
    v7 = 16 * a1[4];
  return memcpy(v4, v5, v7);
}

_QWORD *sub_1C627CB58(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C627C5B4((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C627C664(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_BYTE *)v5 + 8) = 0;
  }
  return v5;
}

void sub_1C627CBBC(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 64, &v5);
  sub_1C4AA2B00(a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C627CC28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 40 * v6;
    do
    {
      *v7 = -4096;
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v13 = 0;
        sub_1C55B601C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        v10 = v13;
        *v13 = *(_QWORD *)v4;
        v10[2] = 0x200000000;
        v10[1] = v10 + 3;
        v11 = (uint64_t)(v10 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_1C55A2D8C(v11, (const void **)(v4 + 8));
        ++*(_DWORD *)(a1 + 8);
        v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12)
          free(v12);
      }
      v4 += 40;
    }
    while (v4 != a3);
  }
}

void sub_1C627CD18(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED807320);
  if (v1 != -1)
  {
    v4[0] = sub_1C55B729C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED807320, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627CD7C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55B732C(v0);
}

void sub_1C627CDA4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED807328);
  if (v1 != -1)
  {
    v4[0] = sub_1C55B7AE4;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED807328, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627CE08()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F7118;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E81704F0;
  return result;
}

void sub_1C627CE50(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED807338);
  if (v1 != -1)
  {
    v4[0] = sub_1C55B800C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED807338, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void sub_1C627CEB4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED807348);
  if (v1 != -1)
  {
    v4[0] = sub_1C55B8440;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED807348, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627CF18()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55B84D4(v0);
}

unsigned __int8 **sub_1C627CF40(uint64_t a1, llvm::PointerType *a2, llvm::Type *a3, llvm::ValueHandleBase *a4, uint64_t a5)
{
  llvm::Module *Module;
  uint64_t DataLayout;
  unsigned __int8 v12;
  unsigned __int8 v13;
  char *v14;
  unsigned __int8 **v15;
  _BYTE v17[32];
  __int16 v18;

  Module = (llvm::Module *)llvm::BasicBlock::getModule(*(llvm::BasicBlock **)(a1 + 48));
  DataLayout = llvm::Module::getDataLayout(Module);
  llvm::DataLayout::getPrefTypeAlign(DataLayout, (uint64_t)a2);
  v13 = v12;
  v14 = (char *)operator new(0x68uLL);
  *((_DWORD *)v14 + 13) = *((_DWORD *)v14 + 13) & 0x38000000 | 1;
  v15 = (unsigned __int8 **)(v14 + 32);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *((_QWORD *)v14 + 3) = v14 + 32;
  v18 = 257;
  llvm::AllocaInst::AllocaInst((uint64_t)(v14 + 32), a2, a3, a4, v13, (uint64_t)v17, 0);
  return sub_1C4867F8C((uint64_t *)a1, v15, a5);
}

uint64_t sub_1C627D000(uint64_t a1, uint64_t a2)
{
  int v2;
  _QWORD *v3;

  if (*(_BYTE *)(a2 + 16) == 89
    && ((v2 = *(_DWORD *)(a2 + 20), (v2 & 0x40000000) != 0)
      ? (v3 = *(_QWORD **)(a2 - 8))
      : (v3 = (_QWORD *)(a2 - 32 * (v2 & 0x7FFFFFF))),
        *(_QWORD *)a1 == *v3))
  {
    return sub_1C4E7B154((_QWORD **)(a1 + 8), v3[4]);
  }
  else
  {
    return 0;
  }
}

void sub_1C627D048(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED807358);
  if (v1 != -1)
  {
    v4[0] = sub_1C55BA444;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED807358, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627D0AC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  return sub_1C55BA4D0(v2, a1);
}

void sub_1C627D0E4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED807368);
  if (v1 != -1)
  {
    v4[0] = sub_1C55BAD54;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED807368, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627D148()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55BADE4(v0);
}

void sub_1C627D170(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED807378);
  if (v1 != -1)
  {
    v4[0] = sub_1C55BFD4C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED807378, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627D1D4(char a1)
{
  uint64_t v2;

  v2 = operator new();
  return sub_1C627D238(v2, a1);
}

uint64_t sub_1C627D20C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C627D238(v0, 0);
}

uint64_t sub_1C627D238(uint64_t a1, char a2)
{
  unint64_t v4;
  unint64_t PassRegistry;
  _QWORD *v7;
  _QWORD v8[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED807370;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8170868;
  if (byte_1ED807400)
    a2 = 1;
  *(_BYTE *)(a1 + 28) = a2;
  PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  v4 = atomic_load(&qword_1ED807378);
  if (v4 != -1)
  {
    v8[0] = sub_1C55BFD4C;
    v8[1] = &PassRegistry;
    v7 = v8;
    std::__call_once(&qword_1ED807378, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void sub_1C627D2E0(llvm::ModulePass *a1)
{
  llvm::ModulePass::~ModulePass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C627D304()
{
  return "Expand Fence And Barrier";
}

void sub_1C627D314(__int128 *a1, char **a2)
{
  uint64_t v4;
  char *v5;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED807380, 0, 0);
  byte_1ED807400 = 0;
  qword_1ED807408 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED807410 = 0;
  qword_1ED807380 = (uint64_t)&unk_1E819E898;
  qword_1ED807418 = (uint64_t)&off_1E819E9A0;
  qword_1ED807420 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED807438 = (uint64_t)&qword_1ED807420;
  llvm::cl::Option::setArgStr(v4, "force-multi-l2", 0xEuLL);
  xmmword_1ED8073A0 = *a1;
  v5 = *a2;
  byte_1ED807400 = **a2;
  byte_1ED807411 = 1;
  byte_1ED807410 = *v5;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED807380);
}

void sub_1C627D3D8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8F7120);
  if (v1 != -1)
  {
    v4[0] = sub_1C55BFFC8;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8F7120, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627D43C(char a1)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD v9[2];

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F7128;
  *(_DWORD *)(result + 24) = 2;
  *(_QWORD *)result = &off_1E8170908;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = result + 72;
  *(_QWORD *)(result + 48) = result + 72;
  *(_QWORD *)(result + 56) = 8;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 144) = 0;
  *(_DWORD *)(result + 152) = 5;
  *(_BYTE *)(result + 156) = a1;
  if (!atomic_load(qword_1ED830BC0))
  {
    v5 = result;
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
    result = v5;
  }
  v7 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1EF8F7120);
  if (v4 != -1)
  {
    v9[0] = sub_1C55BFFC8;
    v9[1] = &v7;
    v8 = v9;
    v6 = result;
    std::__call_once(&qword_1EF8F7120, &v8, (void (__cdecl *)(void *))sub_1C4776838);
    return v6;
  }
  return result;
}

void sub_1C627D560(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED807470);
  if (v1 != -1)
  {
    v4[0] = sub_1C55C2370;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED807470, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627D5C4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55C2400(v0, dword_1ED8318F8, dword_1ED8319B8);
}

void sub_1C627D5FC(int **a1, _WORD *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED831878, 0, 0);
  dword_1ED8318F8 = 0;
  qword_1ED831900 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED831908 = 0;
  qword_1ED831878 = (uint64_t)&unk_1E819E3B0;
  qword_1ED831910 = (uint64_t)&unk_1E819E2C0;
  qword_1ED831918 = (uint64_t)&off_1E7F95260;
  qword_1ED831930 = (uint64_t)&qword_1ED831918;
  llvm::cl::Option::setArgStr(v4, "threshold", 9uLL);
  dword_1ED8318F8 = **a1;
  byte_1ED83190C = 1;
  dword_1ED831908 = dword_1ED8318F8;
  word_1ED831882 = (32 * (*a2 & 3)) | word_1ED831882 & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED831878);
}

void sub_1C627D6CC(int **a1, _WORD *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED831938, 0, 0);
  dword_1ED8319B8 = 0;
  qword_1ED8319C0 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED8319C8 = 0;
  qword_1ED831938 = (uint64_t)&unk_1E819E3B0;
  qword_1ED8319D0 = (uint64_t)&unk_1E819E2C0;
  qword_1ED8319D8 = (uint64_t)&off_1E7F95260;
  qword_1ED8319F0 = (uint64_t)&qword_1ED8319D8;
  llvm::cl::Option::setArgStr(v4, "single-threshold", 0x10uLL);
  dword_1ED8319B8 = **a1;
  byte_1ED8319CC = 1;
  dword_1ED8319C8 = dword_1ED8319B8;
  word_1ED831942 = (32 * (*a2 & 3)) | word_1ED831942 & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED831938);
}

void sub_1C627D79C(int **a1, _WORD *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED807478, 0, 0);
  dword_1ED8074F8 = 0;
  qword_1ED807500 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED807508 = 0;
  qword_1ED807478 = (uint64_t)&unk_1E819E3B0;
  qword_1ED807510 = (uint64_t)&unk_1E819E2C0;
  qword_1ED807518 = (uint64_t)&off_1E7F95260;
  qword_1ED807530 = (uint64_t)&qword_1ED807518;
  llvm::cl::Option::setArgStr(v4, "simple-switch-threshold", 0x17uLL);
  dword_1ED8074F8 = **a1;
  byte_1ED80750C = 1;
  dword_1ED807508 = dword_1ED8074F8;
  word_1ED807482 = (32 * (*a2 & 3)) | word_1ED807482 & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED807478);
}

void sub_1C627D86C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED807600);
  if (v1 != -1)
  {
    v4[0] = sub_1C55C5000;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED807600, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627D8D0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55C5090(v0);
}

void sub_1C627D8F8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED807610);
  if (v1 != -1)
  {
    v4[0] = sub_1C55C5CE4;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED807610, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627D95C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55C5D74(v0);
}

void sub_1C627D984(_WORD *a1, __n128 *a2, int **a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED807618, 0, 0);
  dword_1ED807698 = 0;
  qword_1ED8076A0 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED8076A8 = 0;
  qword_1ED807618 = (uint64_t)&unk_1E819E3B0;
  qword_1ED8076B0 = (uint64_t)&unk_1E819E2C0;
  qword_1ED8076B8 = (uint64_t)&off_1E7F95260;
  qword_1ED8076D0 = (uint64_t)&qword_1ED8076B8;
  sub_1C55C7064(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED807618);
}

void sub_1C627DA28(llvm *a1)
{
  llvm::PassRegistry *v2;

  sub_1C627A588((uint64_t)a1);
  sub_1C627A790((uint64_t)a1);
  sub_1C627A3E0((uint64_t)a1);
  sub_1C627A614((uint64_t)a1);
  llvm::initializeAGXInstCombinePass(a1, v2);
  sub_1C627A704((uint64_t)a1);
  sub_1C627AA54((uint64_t)a1);
  sub_1C627D86C((uint64_t)a1);
  sub_1C627A8E0((uint64_t)a1);
  sub_1C627ABF8((uint64_t)a1);
  sub_1C627B2B4((uint64_t)a1);
  sub_1C627B81C((uint64_t)a1);
  sub_1C627B8A8((uint64_t)a1);
  sub_1C55C7154((uint64_t)a1);
  sub_1C627CDA4((uint64_t)a1);
  sub_1C6281380((uint64_t)a1);
  sub_1C627CE50((uint64_t)a1);
  sub_1C627D0E4((uint64_t)a1);
  sub_1C627A7F4((uint64_t)a1);
  sub_1C627D3D8((uint64_t)a1);
  sub_1C627D560((uint64_t)a1);
  sub_1C6280B10((uint64_t)a1);
  sub_1C627D8F8((uint64_t)a1);
  sub_1C627DCEC((uint64_t)a1);
  sub_1C627DD88((uint64_t)a1);
  sub_1C627DE14((uint64_t)a1);
  sub_1C627DEB0((uint64_t)a1);
  sub_1C627E124((uint64_t)a1);
  sub_1C627E2E8((uint64_t)a1);
  sub_1C627A4FC((uint64_t)a1);
  sub_1C62821C0((uint64_t)a1);
  sub_1C627E410((uint64_t)a1);
  sub_1C627F898((uint64_t)a1);
  sub_1C627F980((uint64_t)a1);
  sub_1C627FD80((uint64_t)a1);
  sub_1C627FA0C((uint64_t)a1);
  sub_1C627FCF4((uint64_t)a1);
  sub_1C627E374((uint64_t)a1);
  sub_1C62801E8((uint64_t)a1);
  sub_1C6280344((uint64_t)a1);
  sub_1C6280A84((uint64_t)a1);
  sub_1C6280B9C((uint64_t)a1);
  sub_1C628270C((uint64_t)a1);
  sub_1C6282938((uint64_t)a1);
  sub_1C6283168((uint64_t)a1);
  sub_1C62831CC((uint64_t)a1);
  sub_1C62829C4((uint64_t)a1);
  sub_1C627CD18((uint64_t)a1);
  sub_1C627D048((uint64_t)a1);
  sub_1C6283450((uint64_t)a1);
  sub_1C62825E4((uint64_t)a1);
  sub_1C62834DC((uint64_t)a1);
  sub_1C6282134((uint64_t)a1);
  sub_1C627CEB4((uint64_t)a1);
  sub_1C627D170((uint64_t)a1);
}

uint64_t sub_1C627DBF4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void (**v4)(void);
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = operator new();
  v3 = (_QWORD *)a1[3];
  if (v3)
  {
    if (v3 == a1)
    {
      v7 = v6;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v6);
    }
    else
    {
      v7 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_1C55C724C(v2, (uint64_t)v6);
  if (v7 == v6)
  {
    v4 = (void (**)(void))(v6[0] + 32);
    goto LABEL_7;
  }
  if (v7)
  {
    v4 = (void (**)(void))(*v7 + 40);
LABEL_7:
    (*v4)();
  }
  return v2;
}

void sub_1C627DCEC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED8077B0);
  if (v1 != -1)
  {
    v4[0] = sub_1C55CD0FC;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED8077B0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627DD50(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  return sub_1C55CD18C(v2, a1);
}

void sub_1C627DD88(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED8077C0);
  if (v1 != -1)
  {
    v4[0] = sub_1C55CDFD0;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED8077C0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627DDEC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55CE064(v0);
}

void sub_1C627DE14(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED8077D0);
  if (v1 != -1)
  {
    v4[0] = sub_1C55D123C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED8077D0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627DE78(char a1)
{
  uint64_t v2;

  v2 = operator new();
  return sub_1C55D12D0(v2, a1);
}

void sub_1C627DEB0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED8078A0);
  if (v1 != -1)
  {
    v4[0] = sub_1C55D3CBC;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED8078A0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627DF14(_QWORD *a1, char a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void (**v7)(_QWORD *);
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  v5 = (_QWORD *)a1[3];
  if (v5)
  {
    if (v5 == a1)
    {
      v10 = v9;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_1C55D3D50(v4, (uint64_t)v9, a2);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = (void (**)(_QWORD *))(v9[0] + 32);
    v6 = v9;
  }
  else
  {
    if (!v10)
      return v4;
    v7 = (void (**)(_QWORD *))(*v10 + 40);
  }
  (*v7)(v6);
  return v4;
}

uint64_t sub_1C627E01C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 32;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C627E0C8(uint64_t a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C55E0718(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C55E07C8(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void sub_1C627E124(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED8078B0);
  if (v1 != -1)
  {
    v4[0] = sub_1C55E0C48;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED8078B0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627E188()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55E0CD8(v0);
}

uint64_t sub_1C627E1B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v8 = 0;
  v9 = v3;
  if (sub_1C4E2FBDC((uint64_t *)a1, &v9, &v8))
  {
    v4 = v8;
    v5 = *(_QWORD *)a1;
    v6 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    v5 = *(_QWORD *)a1;
    v6 = *(unsigned int *)(a1 + 16);
    v4 = *(_QWORD *)a1 + 16 * v6;
  }
  if (v4 == v5 + 16 * v6)
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v4 + 8);
}

uint64_t sub_1C627E228(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C55E1EC4((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

void sub_1C627E2E8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED8078C0);
  if (v1 != -1)
  {
    v4[0] = sub_1C55E268C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED8078C0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627E34C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55E271C(v0);
}

void sub_1C627E374(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED8078D0);
  if (v1 != -1)
  {
    v4[0] = sub_1C55E36A8;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED8078D0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627E3D8(char a1)
{
  uint64_t v2;

  v2 = operator new();
  return sub_1C55E3738(v2, a1);
}

void sub_1C627E410(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED8078E0);
  if (v1 != -1)
  {
    v4[0] = sub_1C55E49FC;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED8078E0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627E474()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55E4AA8(v0);
}

void sub_1C627E49C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[25];

  v12[24] = *MEMORY[0x1E0C80C00];
  sub_1C55ECBA0((uint64_t)&v9, a2);
  sub_1C55ECBA0((uint64_t)&v5, a3);
  sub_1C55ECBA0(a1, (uint64_t *)&v9);
  sub_1C55ECBA0(a1 + 304, (uint64_t *)&v5);
  if (v7 != &v8)
    free(v7);
  if (v6 != v5)
    free(v6);
  if (v11 != v12)
    free(v11);
  if (v10 != v9)
    free(v10);
}

void sub_1C627E574(uint64_t a1, uint64_t a2)
{
  llvm::Type *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t FirstInsertionPt;
  uint64_t *v10;
  uint64_t PointerTo;
  uint64_t v12;
  unsigned __int8 *v13;
  llvm::SmallPtrSetImplBase *v14;
  llvm::Value *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[4];
  __int16 v21;
  uint64_t v22;
  void *v23[2];
  _QWORD v24[16];

  v24[15] = *MEMORY[0x1E0C80C00];
  v22 = a2;
  v4 = *(llvm::Type **)a2;
  v5 = *(_QWORD *)(a2 + 32);
  v6 = v5 - 24;
  if (v5)
    v7 = v5 == *(_QWORD *)(a2 + 40) + 40;
  else
    v7 = 1;
  if (v7)
    v8 = 0;
  else
    v8 = v5 - 24;
  if (*(_BYTE *)(v8 + 16) == 83)
  {
    FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(*(llvm::BasicBlock **)(v8 + 40));
    if (FirstInsertionPt)
      v6 = FirstInsertionPt - 24;
    else
      v6 = 0;
  }
  sub_1C4773D54((uint64_t)v23, v6, 0, 0, 0);
  v10 = sub_1C55F8BA8(a1, v6);
  PointerTo = llvm::Type::getPointerTo(v4, 3u);
  v21 = 773;
  v20[0] = llvm::Value::getName((llvm::Value *)v10);
  v20[1] = v12;
  v20[2] = "bc";
  v13 = sub_1C4773E38((uint64_t *)v23, 49, (unsigned __int8 *)v10, PointerTo, (uint64_t)v20);
  v14 = (llvm::SmallPtrSetImplBase *)(a1 + 8);
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 8), (uint64_t)v13);
  v15 = sub_1C509CCE8((uint64_t *)v23, (uint64_t *)a2, (uint64_t)v13, 0, 0);
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 336), *((_QWORD *)v15 + 5));
  v16 = sub_1C617A140(a1 + 704, &v22);
  v16[1] = v15;
  v16[2] = 0;
  if (*(_BYTE *)(a2 + 16) == 83)
  {
    v17 = sub_1C627EDC8(a1 + 1016, &v22);
    v18 = v17;
    v19 = *((unsigned int *)v17 + 4);
    if (v19 >= *((_DWORD *)v17 + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v17 + 1), (uint64_t)(v17 + 3), v19 + 1, 8);
      LODWORD(v19) = *((_DWORD *)v18 + 4);
    }
    *(_QWORD *)(v18[1] + 8 * v19) = v15;
    ++*((_DWORD *)v18 + 4);
  }
  sub_1C4774094(v14, (uint64_t)v15);
  if (v23[0] != v24)
    free(v23[0]);
}

void sub_1C627E758(uint64_t a1, uint64_t **a2)
{
  llvm::Type **v4;
  uint64_t v5;
  llvm::SmallPtrSetImplBase *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t PointerTo;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  llvm::Value *v22;
  char v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  char *Name;
  uint64_t v32;
  const char *v33;
  __int16 v34;
  void *v35[2];
  _QWORD v36[16];

  v36[15] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::Type **)*a2;
  v5 = (uint64_t)a2[3];
  v6 = (llvm::SmallPtrSetImplBase *)(a1 + 8);
  v7 = sub_1C477672C(a1 + 8, v5);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = 24;
  if (v8 == *(_QWORD *)(a1 + 8))
    v9 = 28;
  if (v7 == (_QWORD *)(v8 + 8 * *(unsigned int *)(a1 + v9)))
  {
    if (*(_BYTE *)(v5 + 16) == 83)
    {
      v10 = *(_DWORD *)(v5 + 20);
      if ((v10 & 0x40000000) != 0)
        v11 = *(_QWORD *)(v5 - 8);
      else
        v11 = v5 - 32 * (v10 & 0x7FFFFFF);
      v12 = *(_QWORD *)(v11 + 32 * *(unsigned int *)(v5 + 60) + 8
                                                                * (((unint64_t)a2 - v11) >> 5));
      v13 = *(_QWORD *)(v12 + 40);
      if (v13 == v12 + 40)
      {
        v5 = 0;
      }
      else
      {
        if (v13)
          v14 = v13 - 24;
        else
          v14 = 0;
        if (*(unsigned __int8 *)(v14 + 16) - 29 >= 0xB)
          v5 = 0;
        else
          v5 = v14;
      }
    }
    sub_1C4773D54((uint64_t)v35, v5, 0, 0, 0);
    v15 = sub_1C55F8BA8(a1, v5);
    PointerTo = llvm::Type::getPointerTo((llvm::Type *)**a2, 3u);
    v34 = 773;
    Name = llvm::Value::getName((llvm::Value *)v15);
    v32 = v17;
    v33 = "bc";
    v18 = sub_1C4773E38((uint64_t *)v35, 49, (unsigned __int8 *)v15, PointerTo, (uint64_t)&Name);
    sub_1C4774094(v6, (uint64_t)v18);
    v19 = **a2;
    v20 = llvm::Value::getName((llvm::Value *)v4);
    v34 = 773;
    Name = v20;
    v32 = v21;
    v33 = "_reload";
    v22 = sub_1C506D920((uint64_t *)v35, v19, (uint64_t)v18, 0, 0, (uint64_t)&Name);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 496), *((_QWORD *)v22 + 5));
    Name = (char *)v22;
    sub_1C61DB70C((uint64_t *)(a1 + 656), &Name)[1] = v4;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 728), (uint64_t)v4);
    if (v23)
    {
      Name = (char *)v4;
      sub_1C617A140(a1 + 704, (uint64_t *)&Name)[2] = v22;
    }
    else
    {
      Name = 0;
      if (sub_1C617A1AC(*(_QWORD *)(a1 + 704), *(_DWORD *)(a1 + 720), (uint64_t)v4, &Name))
      {
        *(_QWORD *)Name = -8192;
        *(int32x2_t *)(a1 + 712) = vadd_s32(*(int32x2_t *)(a1 + 712), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    if (*((_BYTE *)v4 + 16) == 83)
    {
      Name = (char *)v4;
      v28 = sub_1C627EDC8(a1 + 1016, (uint64_t *)&Name);
      v29 = v28;
      v30 = *((unsigned int *)v28 + 4);
      if (v30 >= *((_DWORD *)v28 + 5))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v28 + 1), (uint64_t)(v28 + 3), v30 + 1, 8);
        LODWORD(v30) = *((_DWORD *)v29 + 4);
      }
      *(_QWORD *)(v29[1] + 8 * v30) = v22;
      ++*((_DWORD *)v29 + 4);
    }
    sub_1C4774094(v6, (uint64_t)v22);
    if (*a2)
    {
      *a2[2] = (uint64_t)a2[1];
      v24 = a2[1];
      if (v24)
        v24[2] = (uint64_t)a2[2];
    }
    *a2 = (uint64_t *)v22;
    v27 = (uint64_t *)*((_QWORD *)v22 + 1);
    v26 = (uint64_t *)((char *)v22 + 8);
    v25 = v27;
    a2[1] = v27;
    if (v27)
      v25[2] = (uint64_t)(a2 + 1);
    a2[2] = v26;
    *v26 = (uint64_t)a2;
    if (v35[0] != v36)
      free(v35[0]);
  }
}

uint64_t sub_1C627EA80(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t result;
  const char *v9;
  int v10;
  int v11;

  v4 = *a1;
  v5 = *(unsigned __int8 *)(*a1 + 8);
  if (v5 > 0x11)
    goto LABEL_12;
  v6 = *a1;
  if (((1 << v5) & 0xAC7F) != 0)
    goto LABEL_3;
  if (((1 << v5) & 0x30000) == 0)
  {
LABEL_12:
    if ((v5 & 0xFE) != 0x12 && v5 != 21)
      return 0;
  }
  result = llvm::Type::isSizedDerivedType(*a1, 0);
  if (!(_DWORD)result)
    return result;
  v6 = *a1;
LABEL_3:
  llvm::DataLayout::getAlignment(a2, v6);
  if (v7 > 4u)
    return 0;
  sub_1C4768AD0(a2, v4);
  v11 = v10;
  if ((_DWORD)v9 == 1)
  return (v11 & 0xFFFFFFF8) != 0;
}

unsigned __int8 *sub_1C627EB54(uint64_t a1)
{
  unsigned __int8 *result;
  uint64_t *v3;
  llvm::Type *v4;
  uint64_t Declaration;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  llvm::LLVMContext *v12;
  llvm::ConstantInt **Int32Ty;
  llvm::ValueHandleBase *v14;
  llvm::LLVMContext *v15;
  unsigned __int8 *v16;
  llvm::ConstantInt **v17;
  llvm::ValueHandleBase *v18;
  unsigned __int8 **v19;
  uint64_t Int8PtrTy;
  llvm::MDNode **v21;
  llvm::MDNode **v22;
  _WORD v23[20];
  _QWORD v24[4];
  __int16 v25;
  void *v26;
  unsigned int v27;
  _QWORD v28[7];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  result = *(unsigned __int8 **)(a1 + 304);
  if (!result)
  {
    v3 = *(uint64_t **)(*(_QWORD *)a1 + 40);
    v4 = (llvm::Type *)*v3;
    Declaration = llvm::Intrinsic::getDeclaration(v3, 2587, 0, 0);
    v6 = *(_QWORD *)(*(_QWORD *)a1 + 80);
    if (v6)
      v7 = v6 - 24;
    else
      v7 = 0;
    v8 = *(_QWORD *)(v7 + 48);
    if (v8)
      v9 = v8 - 24;
    else
      v9 = 0;
    sub_1C4773D54((uint64_t)&v26, v9, 0, 0, 0);
    if (Declaration)
      v10 = *(uint64_t ***)(Declaration + 24);
    else
      v10 = 0;
    v25 = 257;
    v11 = sub_1C4774778((uint64_t *)&v26, v10, Declaration, 0, 0, (uint64_t)v24, 0);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 8), v11);
    Int32Ty = (llvm::ConstantInt **)llvm::Type::getInt32Ty(v4, v12);
    v14 = llvm::ConstantInt::get(Int32Ty, 233, 0);
    v24[0] = "base_x_lanes";
    v25 = 259;
    v16 = (unsigned __int8 *)sub_1C4EC4040((uint64_t)&v26, v11, (uint64_t)v14, (uint64_t)v24, 0, 0);
    *(_QWORD *)(a1 + 312) = v16;
    if (*(_DWORD *)(a1 + 296))
    {
      v17 = (llvm::ConstantInt **)llvm::Type::getInt32Ty(v4, v15);
      v18 = llvm::ConstantInt::get(v17, *(unsigned int *)(a1 + 296), 0);
      v23[16] = 257;
      v19 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, unsigned __int8 *, llvm::ValueHandleBase *, _QWORD, _QWORD))(*(_QWORD *)v29 + 16))(v29, v16, v18, 0, 0);
      if (!v19)
      {
        v25 = 257;
        v19 = (unsigned __int8 **)llvm::BinaryOperator::Create(13, v16, (uint64_t)v18, (uint64_t)v24, 0);
        (*(void (**)(uint64_t, unsigned __int8 **, _WORD *, _QWORD, _QWORD))(*(_QWORD *)v30 + 16))(v30, v19, v23, v28[4], v28[5]);
        if (v27)
        {
          v21 = (llvm::MDNode **)v26;
          v22 = (llvm::MDNode **)((char *)v26 + 16 * v27);
          do
          {
            llvm::Instruction::setMetadata(v19, *(_DWORD *)v21, v21[1]);
            v21 += 2;
          }
          while (v21 != v22);
        }
      }
      v16 = (unsigned __int8 *)v19;
    }
    Int8PtrTy = llvm::Type::getInt8PtrTy(v4, (llvm::LLVMContext *)3);
    v24[0] = "base_i8_ptr";
    v25 = 259;
    result = sub_1C4773E38((uint64_t *)&v26, 48, v16, Int8PtrTy, (uint64_t)v24);
    *(_QWORD *)(a1 + 304) = result;
    if (v26 != v28)
    {
      free(v26);
      return *(unsigned __int8 **)(a1 + 304);
    }
  }
  return result;
}

_QWORD *sub_1C627EDC8(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C61DE1A0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C627EE40(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x800000000;
  }
  return v5;
}

_QWORD *sub_1C627EE40(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C55F8E14(a1, v6);
  v8 = 0;
  sub_1C61DE1A0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_1C627EEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 88 * v6;
    do
    {
      *v7 = -4096;
      v7 += 11;
      v8 -= 88;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v13 = 0;
        sub_1C61DE1A0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        v10 = v13;
        *v13 = *(_QWORD *)v4;
        v10[2] = 0x800000000;
        v10[1] = v10 + 3;
        v11 = (uint64_t)(v10 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_1C4964480(v11, (const void **)(v4 + 8));
        ++*(_DWORD *)(a1 + 8);
        v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12)
          free(v12);
      }
      v4 += 88;
    }
    while (v4 != a3);
  }
}

void sub_1C627EFE4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *i;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  _BYTE v26[128];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  v5 = (uint64_t *)a3[1];
  if (v5 == (uint64_t *)*a3)
    v6 = (unsigned int *)a3 + 5;
  else
    v6 = (unsigned int *)(a3 + 2);
  v7 = *v6;
  v8 = &v5[v7];
  if ((_DWORD)v7)
  {
    v9 = 8 * v7;
    while ((unint64_t)*v5 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v5;
      v9 -= 8;
      if (!v9)
      {
        v5 = v8;
        break;
      }
    }
  }
  v22 = v26;
  v23 = v26;
  v24 = 16;
  v25 = 0;
  sub_1C4E3D1B8((llvm::SmallPtrSetImplBase *)&v22, v5, v8, v8);
  v12 = *(_QWORD **)(a2 + 40);
  v10 = (_QWORD *)(a2 + 40);
  for (i = v12; i != v10; i = (_QWORD *)*i)
  {
    if (i)
      v13 = (uint64_t)(i - 3);
    else
      v13 = 0;
    if (*(_BYTE *)(v13 + 16) == 83)
      break;
    v14 = (char *)sub_1C477672C((uint64_t)&v22, v13);
    if (v23 == v22)
      v15 = (uint64_t *)((char *)&v24 + 4);
    else
      v15 = &v24;
    if (v14 != &v23[8 * *(unsigned int *)v15])
    {
      *(_QWORD *)v14 = -2;
      ++v25;
    }
    v16 = *(_DWORD *)(v13 + 20);
    if ((v16 & 0x40000000) != 0)
    {
      v18 = *(uint64_t **)(v13 - 8);
      v17 = v16 & 0x7FFFFFF;
    }
    else
    {
      v17 = v16 & 0x7FFFFFF;
      v18 = (uint64_t *)(v13 - 32 * v17);
    }
    if (v17)
    {
      v19 = 32 * v17;
      do
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v22, *v18);
        if (v20)
        {
          v21 = *v18;
          sub_1C6180A54(a1, &v21)[1] = v13;
        }
        v18 += 4;
        v19 -= 32;
      }
      while (v19);
    }
  }
  if (v23 != v22)
    free(v23);
}

uint64_t sub_1C627F18C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v14;

  v7 = sub_1C55EE1E4((uint64_t *)a2, a1[40], a3, a4);
  if (*(unsigned __int8 *)(a2 + 16) < 0x1Cu)
    return (HIDWORD(v7) + v7);
  v8 = v6;
  v9 = sub_1C477672C((uint64_t)(a1 + 1), a2);
  v10 = a1[2];
  v11 = 24;
  if (v10 == a1[1])
    v11 = 28;
  if (v9 == (_QWORD *)(v10 + 8 * *(unsigned int *)((char *)a1 + v11)))
    return (HIDWORD(v7) + v7);
  v12 = a1[38];
  if (*(_BYTE *)(a2 + 16) != 60)
  {
    v14 = v12 == a2;
    v12 = a2;
    if (!v14)
      return 0;
  }
  if (v12 == a2)
    return 0;
  return v8;
}

void sub_1C627F23C(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t **a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t *v11;
  uint64_t v12;
  llvm::BasicBlock *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v6 + 8))
  {
    v11 = *(uint64_t **)a1;
    **(_DWORD **)(a1 + 24) = 0;
    v12 = (*a4)[5];
    v13 = sub_1C627F33C(v11, *a4, v6, *(unsigned __int8 *)(a1 + 40));
    v18 = v14;
    if (*(_BYTE *)(a1 + 40))
    {
      v15 = v14;
      sub_1C4774094(*(llvm::SmallPtrSetImplBase **)(a1 + 32), (uint64_t)v13);
      *a3 = v15 + 40;
      sub_1C4E5D0EC(v11 + 85, &v18)[1] = a5;
      if (*a2 == v12 + 40)
        *a2 = *a3;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8) = 0;
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(unsigned int *)(v16 + 8);
    if ((_DWORD)v17)
      bzero(*(void **)v16, 8 * v17);
    *a4 = 0;
  }
}

llvm::BasicBlock *sub_1C627F33C(uint64_t *a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t *v7;
  llvm::Value *v8;
  _QWORD *v9;
  uint64_t v10;
  llvm::BasicBlock *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::BasicBlock *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Declaration;
  uint64_t **v20;
  uint64_t ***v21;
  llvm::Value **v22;
  llvm::Value *v23;
  char *v24;
  uint64_t v25;
  unsigned __int8 **v26;
  char *v27;
  const char **v28;
  const char **v29;
  llvm::Instruction *v30;
  uint64_t v31;
  llvm::Instruction **v32;
  uint64_t v33;
  uint64_t *v34;
  llvm::Instruction *v35;
  uint64_t v36;
  int v37;
  char *v38;
  uint64_t v39;
  BOOL v40;
  llvm::Instruction *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  llvm::Instruction *v47;
  llvm::BasicBlock *v48;
  uint64_t v49;
  llvm::Instruction *v51;
  llvm::BasicBlock *v52;
  _QWORD v54[4];
  __int16 v55;
  void *Name;
  uint64_t v57;
  const char *v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v7 = *(uint64_t **)(*a1 + 40);
    v8 = (llvm::Value *)a2[5];
    v9 = (_QWORD *)*v7;
    v59 = 773;
    Name = llvm::Value::getName(v8);
    v57 = v10;
    v58 = "_tail";
    v11 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock((uint64_t *)v8, a2 + 3, (uint64_t)&Name, 0);
    v12 = llvm::Value::getName(v8);
    v59 = 773;
    Name = v12;
    v57 = v13;
    v58 = "_execOnce";
    v14 = *a1;
    v15 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock((uint64_t)v15, v9, (uint64_t)&Name, v14, (uint64_t)v11);
    v16 = (_QWORD *)*((_QWORD *)v8 + 5);
    if (v16 == (_QWORD *)((char *)v8 + 40))
    {
      v18 = 0;
    }
    else
    {
      if (v16)
        v17 = (uint64_t)(v16 - 3);
      else
        v17 = 0;
      if (*(unsigned __int8 *)(v17 + 16) - 29 >= 0xB)
        v18 = 0;
      else
        v18 = v17;
    }
    sub_1C4773D54((uint64_t)&Name, v18, 0, 0, 0);
    Declaration = llvm::Intrinsic::getDeclaration(v7, 2484, 0, 0);
    v51 = (llvm::Instruction *)v18;
    if (Declaration)
      v20 = *(uint64_t ***)(Declaration + 24);
    else
      v20 = 0;
    v55 = 257;
    v21 = (uint64_t ***)sub_1C4774778((uint64_t *)&Name, v20, Declaration, 0, 0, (uint64_t)v54, 0);
    v54[0] = "pvSIMD";
    v55 = 259;
    llvm::Value::setName(v21, (uint64_t)v54);
    v22 = llvm::ConstantInt::get((llvm::ConstantInt *)*v21, 0, 0);
    v54[0] = "is_first_active_lane";
    v55 = 259;
    v23 = (llvm::Value *)sub_1C4774B48((uint64_t)&Name, 32, (uint64_t)v21, (uint64_t)v22, (uint64_t)v54);
    v24 = (char *)operator new(0xA0uLL);
    v25 = 0;
    v26 = (unsigned __int8 **)(v24 + 96);
    *((_DWORD *)v24 + 29) = *((_DWORD *)v24 + 29) & 0x38000000 | 3;
    do
    {
      v27 = &v24[v25];
      *(_QWORD *)v27 = 0;
      *((_QWORD *)v27 + 1) = 0;
      *((_QWORD *)v27 + 2) = 0;
      *((_QWORD *)v27 + 3) = v26;
      v25 += 32;
    }
    while (v25 != 96);
    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v24 + 96), v15, v11, v23, 0);
    v55 = 257;
    (*(void (**)(uint64_t, unsigned __int8 **, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v62 + 16))(v62, v26, v54, v60, v61);
    v28 = (const char **)Name;
    if ((_DWORD)v57)
    {
      v29 = (const char **)((char *)Name + 16 * v57);
      do
      {
        llvm::Instruction::setMetadata(v26, *(_DWORD *)v28, (llvm::MDNode *)v28[1]);
        v28 += 2;
      }
      while (v28 != v29);
      v28 = (const char **)Name;
    }
    if (v28 != &v58)
      free(v28);
    v52 = v15;
    v30 = (llvm::Instruction *)a2;
  }
  else
  {
    v30 = (llvm::Instruction *)a2;
    v52 = 0;
    v51 = 0;
  }
  v31 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v31)
  {
    v32 = *(llvm::Instruction ***)a3;
    v33 = *(_QWORD *)a3 + 8 * v31;
    v34 = (uint64_t *)((char *)v52 + 40);
    do
    {
      v35 = *v32;
      if (a4)
      {
        llvm::Instruction::removeFromParent(*v32);
        llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)v34, (uint64_t)v35);
        v36 = *v34;
        *((_QWORD *)v35 + 3) = *v34;
        *((_QWORD *)v35 + 4) = v34;
        *(_QWORD *)(v36 + 8) = (char *)v35 + 24;
        *v34 = (uint64_t)v35 + 24;
      }
      else if (v35 != v30)
      {
        llvm::Instruction::moveBefore(*v32, v30);
      }
      v37 = *((_DWORD *)v35 + 5);
      if ((v37 & 0x40000000) != 0)
        v38 = (char *)*((_QWORD *)v35 - 1);
      else
        v38 = (char *)v35 - 32 * (v37 & 0x7FFFFFF);
      v39 = *((_QWORD *)v38 + 4);
      if (v39)
        v40 = *(unsigned __int8 *)(v39 + 16) >= 0x1Cu;
      else
        v40 = 0;
      if (v40)
      {
        do
        {
          v41 = (llvm::Instruction *)v39;
          v42 = *(_QWORD *)(v39 + 8);
          if (!v42 || *(_QWORD *)(v42 + 8))
            break;
          v43 = sub_1C477672C((uint64_t)(a1 + 1), (uint64_t)v41);
          v44 = a1[2];
          v45 = v44 == a1[1] ? 28 : 24;
          if (v43 == (_QWORD *)(v44 + 8 * *(unsigned int *)((char *)a1 + v45)))
            break;
          llvm::Instruction::moveBefore(v41, v35);
          v46 = *((_DWORD *)v41 + 5);
          if ((v46 & 0x7FFFFFF) == 0)
            break;
          v47 = (v46 & 0x40000000) != 0
              ? (llvm::Instruction *)*((_QWORD *)v41 - 1)
              : (llvm::Instruction *)((char *)v41 - 32 * (v46 & 0x7FFFFFF));
          v39 = *(_QWORD *)v47;
          if (!v39)
            break;
          v35 = v41;
        }
        while (*(unsigned __int8 *)(v39 + 16) > 0x1Bu);
      }
      ++v32;
    }
    while (v32 != (llvm::Instruction **)v33);
  }
  if ((a4 & 1) == 0)
    return 0;
  llvm::Instruction::removeFromParent(v51);
  v48 = v52;
  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)v52 + 40, (uint64_t)v51);
  v49 = *((_QWORD *)v52 + 5);
  *((_QWORD *)v51 + 3) = v49;
  *((_QWORD *)v51 + 4) = (char *)v52 + 40;
  *(_QWORD *)(v49 + 8) = (char *)v51 + 24;
  *((_QWORD *)v52 + 5) = (char *)v51 + 24;
  return v48;
}

_QWORD *sub_1C627F798(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4850EC8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4DA9548((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void sub_1C627F7F4(_WORD *a1, __n128 *a2, char **a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED807BE8, 0, 0);
  byte_1ED807C68 = 0;
  qword_1ED807C70 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED807C78 = 0;
  qword_1ED807BE8 = (uint64_t)&unk_1E819E898;
  qword_1ED807C80 = (uint64_t)&off_1E819E9A0;
  qword_1ED807C88 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED807CA0 = (uint64_t)&qword_1ED807C88;
  sub_1C55F8ED8(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED807BE8);
}

void sub_1C627F898(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED807D70);
  if (v1 != -1)
  {
    v4[0] = sub_1C55F9160;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED807D70, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627F8FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C61DB414((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C61DB4B0(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

void sub_1C627F980(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED807D80);
  if (v1 != -1)
  {
    v4[0] = sub_1C55FC814;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED807D80, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627F9E4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55FC8C8(v0);
}

void sub_1C627FA0C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED8319F8);
  if (v1 != -1)
  {
    v4[0] = sub_1C55FCA78;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED8319F8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627FA70(char a1)
{
  uint64_t v2;

  v2 = operator new();
  return sub_1C55FCB0C(v2, a1);
}

uint64_t sub_1C627FAA8(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_6;
    }
    v7 = (_DWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*(void **)a1, v4, 6 * v9);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)a1, v4, 6 * v10);
LABEL_12:
        v11 = *v7;
        if (v10 != v11)
          memcpy((void *)(*(_QWORD *)a1 + 6 * v10), (const void *)(*(_QWORD *)a2 + 6 * v10), *(_QWORD *)a2 + 6 * v11 - (*(_QWORD *)a2 + 6 * v10));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v9;
LABEL_6:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v9, 6);
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

void sub_1C627FBCC(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 40, &v5);
  sub_1C56008C8(a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

uint64_t sub_1C627FC38(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 40);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C5601EC4((uint64_t)v5, a2, &v10);
      *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

void sub_1C627FCF4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED807E50);
  if (v1 != -1)
  {
    v4[0] = sub_1C5602A10;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED807E50, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627FD58()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5602AA0(v0);
}

void sub_1C627FD80(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED807E60);
  if (v1 != -1)
  {
    v4[0] = sub_1C560325C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED807E60, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627FDE4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C56032EC(v0);
}

uint64_t sub_1C627FE0C(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v11 = 0;
  v8 = llvm::cl::parser<unsigned long long>::parse(a1 + 160, (_QWORD *)a1, a3, a4, a5, a6, &v11);
  if ((v8 & 1) != 0)
    return v8;
  *(_QWORD *)(a1 + 128) = v11;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 192);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v11);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C627FE84();
}

uint64_t sub_1C627FE84()
{
  return 2;
}

void sub_1C627FE8C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E81715A0;
  v2 = a1 + 21;
  v3 = (_QWORD *)a1[24];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_4;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_4:
  sub_1C47A80D0(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C627FF00(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 160, a1);
}

llvm::raw_ostream *sub_1C627FF0C(uint64_t a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::basic_parser_impl *)(a1 + 160), (const llvm::cl::Option *)a1, a2);
}

void sub_1C627FF1C(uint64_t a1, int a2, int a3)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];
  char v6;

  if (a3)
  {
    v3 = *(_QWORD *)(a1 + 128);
LABEL_3:
    v4 = *(_QWORD *)(a1 + 144);
    v6 = *(_BYTE *)(a1 + 152);
    v5[0] = &unk_1E8171608;
    v5[1] = v4;
    llvm::cl::parser<unsigned long long>::printOptionDiff((llvm::cl::basic_parser_impl *)(a1 + 160), (const llvm::cl::Option *)a1, v3, (uint64_t)v5, a2);
    return;
  }
  if (*(_BYTE *)(a1 + 152))
  {
    v3 = *(_QWORD *)(a1 + 128);
    if (*(_QWORD *)(a1 + 144) != v3)
      goto LABEL_3;
  }
}

BOOL sub_1C627FF8C(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 16) && *(_BYTE *)(a1 + 16) && *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8);
}

void sub_1C627FFB8(int **a1, _WORD *a2, __int128 *a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED807E68, 0, 0);
  xmmword_1ED807EE8 = 0u;
  *(_OWORD *)&qword_1ED807EF8 = 0u;
  *((_QWORD *)&xmmword_1ED807EE8 + 1) = &unk_1E8171608;
  qword_1ED807E68 = (uint64_t)&unk_1E81715A0;
  qword_1ED807F08 = (uint64_t)&unk_1E819EA38;
  qword_1ED807F10 = (uint64_t)&unk_1E81716C8;
  qword_1ED807F28 = (uint64_t)&qword_1ED807F10;
  llvm::cl::Option::setArgStr(v6, "memmove-expansion-threshold", 0x1BuLL);
  *(_QWORD *)&xmmword_1ED807EE8 = **a1;
  byte_1ED807F00 = 1;
  qword_1ED807EF8 = xmmword_1ED807EE8;
  word_1ED807E72 = (32 * (*a2 & 3)) | word_1ED807E72 & 0xFF9F;
  xmmword_1ED807E88 = *a3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED807E68);
}

void sub_1C628009C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62800B0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E81716C8;
  return result;
}

void sub_1C62800D8(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E81716C8;
}

uint64_t sub_1C62800F4(uint64_t a1, char *a2, int **a3, _WORD *a4, _OWORD *a5)
{
  uint64_t v10;
  size_t v11;
  uint64_t v12;

  v10 = sub_1C47AD050(a1, 0, 0);
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_QWORD *)(v10 + 136) = &unk_1E8171608;
  *(_QWORD *)v10 = &unk_1E81715A0;
  *(_QWORD *)(v10 + 160) = &unk_1E819EA38;
  *(_QWORD *)(v10 + 168) = &unk_1E81716C8;
  *(_QWORD *)(v10 + 192) = v10 + 168;
  v11 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v11);
  v12 = **a3;
  *(_QWORD *)(a1 + 128) = v12;
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 144) = v12;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  *(_OWORD *)(a1 + 32) = *a5;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void sub_1C62801E8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED8080C8);
  if (v1 != -1)
  {
    v4[0] = sub_1C56072C4;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED8080C8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C628024C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5607368(v0);
}

_QWORD *sub_1C6280274(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  _QWORD *result;
  int v5;
  _QWORD *v6;

  if (a2 <= 8)
  {
    *a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    v3 = a2;
    result = operator new(16 * a2, (std::align_val_t)8uLL);
    a1[1] = result;
    a1[2] = v3;
    v5 = *(_DWORD *)a1;
    *a1 = *(_DWORD *)a1 & 1;
    if ((v5 & 1) == 0)
    {
      v6 = &result[2 * v3];
      goto LABEL_6;
    }
  }
  result = a1 + 1;
  v6 = a1 + 17;
  do
  {
LABEL_6:
    *result = -4096;
    result += 2;
  }
  while (result != v6);
  return result;
}

void sub_1C62802F8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C628030C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81717B0;
  result[1] = v3;
  return result;
}

void sub_1C6280344(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED8080D8);
  if (v1 != -1)
  {
    v4[0] = sub_1C560F49C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED8080D8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C62803A8(_QWORD *a1, _QWORD *a2, char a3, char a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void (**v12)(_QWORD *);
  _QWORD *v13;
  void (**v14)(_QWORD *);
  _QWORD v16[3];
  _QWORD *v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  v9 = (_QWORD *)a1[3];
  if (v9)
  {
    if (v9 == a1)
    {
      v19 = v18;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v18);
    }
    else
    {
      v19 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
    }
  }
  else
  {
    v19 = 0;
  }
  v10 = (_QWORD *)a2[3];
  if (v10)
  {
    if (v10 == a2)
    {
      v17 = v16;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v16);
    }
    else
    {
      v17 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
    }
  }
  else
  {
    v17 = 0;
  }
  sub_1C560F550(v8, (uint64_t)v18, (uint64_t)v16, a3, a4);
  v11 = v17;
  if (v17 == v16)
  {
    v12 = (void (**)(_QWORD *))(v16[0] + 32);
    v11 = v16;
LABEL_9:
    (*v12)(v11);
    goto LABEL_10;
  }
  if (v17)
  {
    v12 = (void (**)(_QWORD *))(*v17 + 40);
    goto LABEL_9;
  }
LABEL_10:
  v13 = v19;
  if (v19 == v18)
  {
    v14 = (void (**)(_QWORD *))(v18[0] + 32);
    v13 = v18;
  }
  else
  {
    if (!v19)
      return v8;
    v14 = (void (**)(_QWORD *))(*v19 + 40);
  }
  (*v14)(v13);
  return v8;
}

BOOL sub_1C6280544(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  _BYTE v9[16];
  unsigned __int8 v10;

  sub_1C6280748(a1, a2, (uint64_t)v9);
  v4 = v10;
  if (v10)
  {
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52))
    {
      v8 = v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 40, a1 + 56, v6 + 1, 8);
      v4 = v8;
      LODWORD(v6) = *(_DWORD *)(a1 + 48);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return v4 != 0;
}

_QWORD *sub_1C62805D0(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v3;
  unsigned int v4;
  uint64_t v7;
  _QWORD *v8;

  v3 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v4 = 4;
  else
    v4 = a1[4];
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[1] > v4 >> 3)
  {
    goto LABEL_5;
  }
  v7 = (uint64_t)a1;
  sub_1C562B224((uint64_t)a1, v4);
  v8 = 0;
  sub_1C562B178(v7, *a2, &v8);
  a1 = (_DWORD *)v7;
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_1C6280690(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 40);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C562B178((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

_QWORD *sub_1C6280748@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_1C4E487E4(a1, a2, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v12 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v13 = 4;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(unsigned int *)(a1 + 16);
    }
    v11 = 0;
    v10 = v12 + 8 * v13;
  }
  else
  {
    result = sub_1C6280800((_DWORD *)a1, (uint64_t)a2, a2, v14);
    v7 = result;
    *result = *a2;
    v8 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v9 = 4;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(unsigned int *)(a1 + 16);
    }
    v10 = v8 + 8 * v9;
    v11 = 1;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v10;
  *(_BYTE *)(a3 + 16) = v11;
  return result;
}

_QWORD *sub_1C6280800(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v8;
  _QWORD *v9;

  v4 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v5 = 4;
  else
    v5 = a1[4];
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
  }
  else if (v5 + ~v4 - a1[1] > v5 >> 3)
  {
    goto LABEL_5;
  }
  v8 = (uint64_t)a1;
  sub_1C562B38C((uint64_t)a1, v5);
  v9 = 0;
  sub_1C4E487E4(v8, a3, &v9);
  a1 = (_DWORD *)v8;
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C62808BC(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 40);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C4E487E4((uint64_t)v5, a2, &v10);
      *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C6280980(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_12:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v12 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_12;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C6280A28(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C562F010((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C562F0B8(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void sub_1C6280A84(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED808628);
  if (v1 != -1)
  {
    v4[0] = sub_1C562F6BC;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED808628, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C6280AE8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C562F74C(v0);
}

void sub_1C6280B10(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED808638);
  if (v1 != -1)
  {
    v4[0] = sub_1C562FC84;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED808638, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C6280B74()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C562FD2C(v0);
}

void sub_1C6280B9C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED808640);
  if (v1 != -1)
  {
    v4[0] = sub_1C5631F14;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED808640, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

int *sub_1C6280C00(int *a1)
{
  int v2;
  int *v3;
  uint64_t v4;
  int *result;
  uint64_t v6;
  int *v7;

  v2 = *a1;
  if (*a1 > 1)
  {
    if ((v2 & 1) != 0)
    {
      result = a1 + 2;
      v7 = a1 + 66;
LABEL_10:
      while ((*(_QWORD *)result | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        result += 4;
        if (result == v7)
          return v7;
      }
    }
    else
    {
      result = (int *)*((_QWORD *)a1 + 1);
      v6 = a1[4];
      if ((_DWORD)v6)
      {
        v7 = &result[4 * v6];
        goto LABEL_10;
      }
    }
  }
  else
  {
    if (v2)
    {
      v3 = a1 + 2;
      v4 = 16;
    }
    else
    {
      v3 = (int *)*((_QWORD *)a1 + 1);
      v4 = a1[4];
    }
    return &v3[4 * v4];
  }
  return result;
}

uint64_t sub_1C6280C78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = a2;
  v7 = 0;
  if ((sub_1C6280D38(a1, &v6, &v7) & 1) != 0)
    return v7;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = a1 + 8;
    v5 = 16;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

_QWORD *sub_1C6280CD8(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6280D38((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6280DE8(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1C6280D38(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C6280DE8(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 16;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C5634798((uint64_t)a1, v7);
  v9 = 0;
  sub_1C6280D38((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C6280EA4(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 264);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C6280D38((uint64_t)v5, a2, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_1C6280F70(_DWORD *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6280FE0((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6281094(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x800000000;
  }
  return v5;
}

uint64_t sub_1C6280FE0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 88 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 88 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C6281094(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 8;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C563491C((uint64_t)a1, v6);
  v8 = 0;
  sub_1C6280FE0((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

void sub_1C6281150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;

  v4 = a2;
  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 712);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (!v7)
      goto LABEL_6;
    v8 = *(_QWORD **)(a1 + 8);
    v9 = &v8[11 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 11;
  }
  while (v8 != v9);
LABEL_6:
  if (a2 != a3)
  {
    do
    {
      v10 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v14 = 0;
        sub_1C6280FE0(a1, v10, &v14);
        v11 = v14;
        *v14 = *(_QWORD *)v4;
        v11[2] = 0x800000000;
        v11[1] = v11 + 3;
        v12 = (uint64_t)(v11 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_1C55A2D8C(v12, (const void **)(v4 + 8));
        *(_DWORD *)a1 += 2;
        v13 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v13)
          free(v13);
      }
      v4 += 88;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1C6281258(uint64_t a1)
{
  sub_1C6281290(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  return a1;
}

void sub_1C6281290(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v2 = a1 + 8;
    v1 = 8;
  }
  else
  {
    v1 = *(_DWORD *)(a1 + 16);
    if (!v1)
      return;
    v2 = *(_QWORD *)(a1 + 8);
  }
  v3 = 88 * v1;
  v4 = (_QWORD *)(v2 + 24);
  do
  {
    if ((*(v4 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v5 = (_QWORD *)*(v4 - 2);
      if (v4 != v5)
        free(v5);
    }
    v4 += 11;
    v3 -= 88;
  }
  while (v3);
}

uint64_t sub_1C6281308(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  char v9;

  if (!a2)
    return 1;
  v8 = a2;
  v9 = 0;
  v4 = sub_1C5634E68(a1 + 152, &v8);
  v5 = v4;
  if ((v6 & 1) == 0)
    return *(_BYTE *)(v4 + 8) != 0;
  result = sub_1C5634C64(a1, a2);
  *(_BYTE *)(v5 + 8) = result;
  return result;
}

void sub_1C6281380(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED808650);
  if (v1 != -1)
  {
    v4[0] = sub_1C5635170;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED808650, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C62813E4(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, char a10, char a11)
{
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  void (**v30)(_QWORD *);
  _QWORD *v31;
  void (**v32)(_QWORD *);
  _QWORD *v33;
  void (**v34)(_QWORD *);
  _QWORD *v35;
  void (**v36)(_QWORD *);
  _QWORD *v37;
  void (**v38)(_QWORD *);
  _QWORD *v39;
  void (**v40)(_QWORD *);
  _QWORD *v41;
  void (**v42)(_QWORD *);
  _QWORD *v43;
  void (**v44)(_QWORD *);
  _QWORD *v45;
  void (**v46)(_QWORD *);
  _QWORD v48[3];
  _QWORD *v49;
  _QWORD v50[3];
  _QWORD *v51;
  _QWORD v52[3];
  _QWORD *v53;
  _QWORD v54[3];
  _QWORD *v55;
  _QWORD v56[3];
  _QWORD *v57;
  _QWORD v58[3];
  _QWORD *v59;
  _QWORD v60[3];
  _QWORD *v61;
  _QWORD v62[3];
  _QWORD *v63;
  _QWORD v64[3];
  _QWORD *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v19 = operator new();
  v20 = (_QWORD *)a1[3];
  if (v20)
  {
    if (v20 == a1)
    {
      v65 = v64;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v64);
    }
    else
    {
      v65 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v20 + 16))(v20);
    }
  }
  else
  {
    v65 = 0;
  }
  v21 = (_QWORD *)a2[3];
  if (v21)
  {
    if (v21 == a2)
    {
      v63 = v62;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v62);
    }
    else
    {
      v63 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v21 + 16))(v21);
    }
  }
  else
  {
    v63 = 0;
  }
  v22 = (_QWORD *)a3[3];
  if (v22)
  {
    if (v22 == a3)
    {
      v61 = v60;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v60);
    }
    else
    {
      v61 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v22 + 16))(v22);
    }
  }
  else
  {
    v61 = 0;
  }
  v23 = (_QWORD *)a4[3];
  if (v23)
  {
    if (v23 == a4)
    {
      v59 = v58;
      (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v58);
    }
    else
    {
      v59 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v23 + 16))(v23);
    }
  }
  else
  {
    v59 = 0;
  }
  v24 = (_QWORD *)a5[3];
  if (v24)
  {
    if (v24 == a5)
    {
      v57 = v56;
      (*(void (**)(_QWORD *, _QWORD *))(*a5 + 24))(a5, v56);
    }
    else
    {
      v57 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v24 + 16))(v24);
    }
  }
  else
  {
    v57 = 0;
  }
  v25 = (_QWORD *)a6[3];
  if (v25)
  {
    if (v25 == a6)
    {
      v55 = v54;
      (*(void (**)(_QWORD *, _QWORD *))(*a6 + 24))(a6, v54);
    }
    else
    {
      v55 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v25 + 16))(v25);
    }
  }
  else
  {
    v55 = 0;
  }
  v26 = (_QWORD *)a7[3];
  if (v26)
  {
    if (v26 == a7)
    {
      v53 = v52;
      (*(void (**)(_QWORD *, _QWORD *))(*a7 + 24))(a7, v52);
    }
    else
    {
      v53 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v26 + 16))(v26);
    }
  }
  else
  {
    v53 = 0;
  }
  v27 = (_QWORD *)a8[3];
  if (v27)
  {
    if (v27 == a8)
    {
      v51 = v50;
      (*(void (**)(_QWORD *, _QWORD *))(*a8 + 24))(a8, v50);
    }
    else
    {
      v51 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v27 + 16))(v27);
    }
  }
  else
  {
    v51 = 0;
  }
  v28 = (_QWORD *)a9[3];
  if (v28)
  {
    if (v28 == a9)
    {
      v49 = v48;
      (*(void (**)(_QWORD *, _QWORD *))(*a9 + 24))(a9, v48);
    }
    else
    {
      v49 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v28 + 16))(v28);
    }
  }
  else
  {
    v49 = 0;
  }
  sub_1C5635224(v19, (uint64_t)v64, (uint64_t)v62, (uint64_t)v60, (uint64_t)v58, (uint64_t)v56, (uint64_t)v54, (uint64_t)v52, (uint64_t)v50, (uint64_t)v48, a10, a11);
  v29 = v49;
  if (v49 == v48)
  {
    v30 = (void (**)(_QWORD *))(v48[0] + 32);
    v29 = v48;
LABEL_30:
    (*v30)(v29);
    goto LABEL_31;
  }
  if (v49)
  {
    v30 = (void (**)(_QWORD *))(*v49 + 40);
    goto LABEL_30;
  }
LABEL_31:
  v31 = v51;
  if (v51 == v50)
  {
    v32 = (void (**)(_QWORD *))(v50[0] + 32);
    v31 = v50;
LABEL_33:
    (*v32)(v31);
    goto LABEL_34;
  }
  if (v51)
  {
    v32 = (void (**)(_QWORD *))(*v51 + 40);
    goto LABEL_33;
  }
LABEL_34:
  v33 = v53;
  if (v53 == v52)
  {
    v34 = (void (**)(_QWORD *))(v52[0] + 32);
    v33 = v52;
LABEL_36:
    (*v34)(v33);
    goto LABEL_37;
  }
  if (v53)
  {
    v34 = (void (**)(_QWORD *))(*v53 + 40);
    goto LABEL_36;
  }
LABEL_37:
  v35 = v55;
  if (v55 == v54)
  {
    v36 = (void (**)(_QWORD *))(v54[0] + 32);
    v35 = v54;
LABEL_39:
    (*v36)(v35);
    goto LABEL_40;
  }
  if (v55)
  {
    v36 = (void (**)(_QWORD *))(*v55 + 40);
    goto LABEL_39;
  }
LABEL_40:
  v37 = v57;
  if (v57 == v56)
  {
    v38 = (void (**)(_QWORD *))(v56[0] + 32);
    v37 = v56;
LABEL_42:
    (*v38)(v37);
    goto LABEL_43;
  }
  if (v57)
  {
    v38 = (void (**)(_QWORD *))(*v57 + 40);
    goto LABEL_42;
  }
LABEL_43:
  v39 = v59;
  if (v59 == v58)
  {
    v40 = (void (**)(_QWORD *))(v58[0] + 32);
    v39 = v58;
LABEL_45:
    (*v40)(v39);
    goto LABEL_46;
  }
  if (v59)
  {
    v40 = (void (**)(_QWORD *))(*v59 + 40);
    goto LABEL_45;
  }
LABEL_46:
  v41 = v61;
  if (v61 == v60)
  {
    v42 = (void (**)(_QWORD *))(v60[0] + 32);
    v41 = v60;
LABEL_48:
    (*v42)(v41);
    goto LABEL_49;
  }
  if (v61)
  {
    v42 = (void (**)(_QWORD *))(*v61 + 40);
    goto LABEL_48;
  }
LABEL_49:
  v43 = v63;
  if (v63 == v62)
  {
    v44 = (void (**)(_QWORD *))(v62[0] + 32);
    v43 = v62;
LABEL_51:
    (*v44)(v43);
    goto LABEL_52;
  }
  if (v63)
  {
    v44 = (void (**)(_QWORD *))(*v63 + 40);
    goto LABEL_51;
  }
LABEL_52:
  v45 = v65;
  if (v65 == v64)
  {
    v46 = (void (**)(_QWORD *))(v64[0] + 32);
    v45 = v64;
  }
  else
  {
    if (!v65)
      return v19;
    v46 = (void (**)(_QWORD *))(*v65 + 40);
  }
  (*v46)(v45);
  return v19;
}

_QWORD *sub_1C628192C(_QWORD *a1)
{
  *a1 = &off_1E8171C38;
  MEMORY[0x1CAA32FB4](a1[5], 8);
  return a1;
}

void sub_1C6281964(_QWORD *a1)
{
  *a1 = &off_1E8171C38;
  MEMORY[0x1CAA32FB4](a1[5], 8);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C62819AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_1E8171C38;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a2 + 17) = *(_BYTE *)(a1 + 17);
  *(_BYTE *)(a2 + 18) = *(_BYTE *)(a1 + 18);
  *(_BYTE *)(a2 + 19) = *(_BYTE *)(a1 + 19);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  result = sub_1C4DFEB14(a2 + 40, a1 + 40);
  *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 64);
  return result;
}

void sub_1C6281A2C()
{
  JUMPOUT(0x1CAA32FB4);
}

_QWORD *sub_1C6281A38(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6200DDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6204848(a1, a2, v7);
    *(_OWORD *)v5 = *(_OWORD *)a2;
    v5[2] = 0;
  }
  return v5;
}

_QWORD *sub_1C6281AA4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_1C5648A2C(a2, a3, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v12 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v13 = 4;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(unsigned int *)(a2 + 16);
    }
    v11 = 0;
    v10 = v12 + 8 * v13;
  }
  else
  {
    result = sub_1C5648ADC(a2, (uint64_t)a3, a3, v14);
    v7 = result;
    *result = *a3;
    v8 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v9 = 4;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(unsigned int *)(a2 + 16);
    }
    v10 = v8 + 8 * v9;
    v11 = 1;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v10;
  *(_BYTE *)(a1 + 16) = v11;
  return result;
}

uint64_t sub_1C6281B64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = (uint64_t *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)*v4;
  v5 = llvm::MetadataAsValue::get(v4, (unsigned __int8 *)a2);
  return LLVMSetArgOperand_0(a1, 1u, v5);
}

_QWORD *sub_1C6281BA0(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6185234((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6281C00(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C6281C00(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C565171C((uint64_t)a1, v7);
  v9 = 0;
  sub_1C6185234((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C6281CBC(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C6185234((uint64_t)v5, a2, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

void sub_1C6281D88(__int128 *a1, int **a2)
{
  uint64_t v4;
  int *v5;

  v4 = sub_1C47AD050((uint64_t)qword_1ED808968, 0, 0);
  dword_1ED8089E8 = 0;
  qword_1ED8089F0 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED8089F8 = 0;
  qword_1ED808968[0] = (uint64_t)&unk_1E819E3B0;
  qword_1ED808A00 = (uint64_t)&unk_1E819E2C0;
  qword_1ED808A08 = (uint64_t)&off_1E7F95260;
  qword_1ED808A20 = (uint64_t)&qword_1ED808A08;
  llvm::cl::Option::setArgStr(v4, "cprog-max-frontier", 0x12uLL);
  xmmword_1ED808988 = *a1;
  v5 = *a2;
  dword_1ED8089E8 = **a2;
  byte_1ED8089FC = 1;
  dword_1ED8089F8 = *v5;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED808968);
}

void sub_1C6281E4C(__int128 *a1)
{
  uint64_t v2;

  v2 = sub_1C47AD050((uint64_t)qword_1ED808A28, 0, 0);
  dword_1ED808AA8 = 0;
  qword_1ED808AB0 = (uint64_t)&unk_1E819E900;
  unk_1ED808AB8 = 0;
  qword_1ED808A28[0] = (uint64_t)&unk_1E8140060;
  qword_1ED808AC0 = (uint64_t)&unk_1E819E920;
  qword_1ED808AC8 = (uint64_t)&unk_1E81400C8;
  qword_1ED808AE0 = (uint64_t)&qword_1ED808AC8;
  llvm::cl::Option::setArgStr(v2, "cprog-can-read-from-uniforms", 0x1CuLL);
  xmmword_1ED808A48 = *a1;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED808A28);
}

uint64_t sub_1C6281EE8(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v16 = 0;
  result = sub_1C61B5A68(a2, *a3, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v10 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v11 = 4;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(unsigned int *)(a2 + 16);
    }
    v12 = 0;
    v13 = v10 + 16 * v11;
  }
  else
  {
    result = (uint64_t)sub_1C6281FB0((_DWORD *)a2, a3, v16);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v14 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v15 = 4;
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(unsigned int *)(a2 + 16);
    }
    v13 = v14 + 16 * v15;
    v12 = 1;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v12;
  return result;
}

_QWORD *sub_1C6281FB0(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 4;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C5651894((uint64_t)a1, v6);
  v8 = 0;
  sub_1C61B5A68((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_1C628206C(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C61B5A68((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

void sub_1C6282134(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED808D30);
  if (v1 != -1)
  {
    v4[0] = sub_1C5651C98;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED808D30, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C6282198()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5651D28(v0);
}

void sub_1C62821C0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED808D40);
  if (v1 != -1)
  {
    v4[0] = sub_1C565273C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED808D40, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C6282224(char a1, char a2, char a3)
{
  uint64_t v6;
  unint64_t v8;
  unint64_t v10;
  _QWORD *v11;
  _QWORD v12[2];

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = &unk_1ED808D38;
  *(_DWORD *)(v6 + 24) = 4;
  *(_QWORD *)v6 = &off_1E8171E40;
  *(_BYTE *)(v6 + 28) = a1;
  *(_BYTE *)(v6 + 29) = a2;
  *(_BYTE *)(v6 + 30) = a3;
  *(_QWORD *)(v6 + 32) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v10 = qword_1ED830BC0[0];
  v8 = atomic_load(&qword_1ED808D40);
  if (v8 != -1)
  {
    v12[0] = sub_1C565273C;
    v12[1] = &v10;
    v11 = v12;
    std::__call_once(&qword_1ED808D40, &v11, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v6;
}

uint64_t sub_1C6282328(uint64_t a1, uint64_t a2, _QWORD *a3, _BYTE *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C61252B8((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C617F7BC(a2, (uint64_t)a3, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_BYTE *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_1C62823C0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = sub_1C56582C4((_DWORD *)a1, a2);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD **)(a1 + 72);
    v6 = *(unsigned int *)(a1 + 80);
    v7 = &v5[v6];
    if ((_DWORD)v6)
    {
      v8 = 8 * v6;
      while (*v5 != *a2)
      {
        ++v5;
        v8 -= 8;
        if (!v8)
        {
          v5 = v7;
          break;
        }
      }
    }
    if (v7 != v5 + 1)
    {
      memmove(v5, v5 + 1, (char *)v7 - (char *)(v5 + 1));
      LODWORD(v6) = *(_DWORD *)(a1 + 80);
    }
    *(_DWORD *)(a1 + 80) = v6 - 1;
  }
  return v4;
}

char *sub_1C6282448(llvm::Type **a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, llvm::BasicBlock *a6)
{
  _DWORD *v12;
  llvm::Instruction *v13;

  v12 = operator new(0xA0uLL);
  v12[21] = v12[21] & 0x38000000 | 2;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = v12 + 16;
  *((_QWORD *)v12 + 4) = 0;
  *((_QWORD *)v12 + 5) = 0;
  *((_QWORD *)v12 + 6) = 0;
  *((_QWORD *)v12 + 7) = v12 + 16;
  v13 = llvm::Instruction::Instruction((llvm::Instruction *)(v12 + 16), *a1, 65, (llvm::Use *)v12, 2, a6);
  *((_QWORD *)v12 + 16) = v12 + 36;
  *((_QWORD *)v12 + 17) = 0x400000000;
  llvm::InsertValueInst::init((uint64_t)v13, (uint64_t)a1, a2, a3, a4, a5);
  return (char *)(v12 + 16);
}

_QWORD *sub_1C628250C(_QWORD *result)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if ((v1 & 1) != 0)
    {
      v3 = result + 1;
      v4 = result + 5;
    }
    else
    {
      v2 = *((unsigned int *)result + 4);
      if (((2 * v1) & 0xFFFFFFFC) < v2 && v2 >= 0x41)
        return sub_1C61A67BC(result);
      if (!(_DWORD)v2)
      {
        v5 = 0;
LABEL_11:
        *(_DWORD *)result = v5;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      v3 = (_QWORD *)result[1];
      v4 = &v3[v2];
    }
    do
      *v3++ = -4096;
    while (v3 != v4);
    v5 = *(_DWORD *)result & 1;
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_1C6282584(uint64_t a1, unsigned int *a2)
{
  int64x2_t v4;

  if ((*(_BYTE *)a1 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  *(_QWORD *)a1 = 1;
  v4 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 8) = v4;
  *(int64x2_t *)(a1 + 24) = v4;
  sub_1C61ACB6C((unsigned int *)a1, a2);
  return a1;
}

void sub_1C62825E4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED808D48);
  if (v1 != -1)
  {
    v4[0] = sub_1C56592CC;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED808D48, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void sub_1C6282648(__int128 *a1, char **a2)
{
  uint64_t v4;
  char *v5;

  v4 = sub_1C47AD050((uint64_t)qword_1ED808D90, 0, 0);
  byte_1ED808E10 = 0;
  qword_1ED808E18 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED808E20 = 0;
  qword_1ED808D90[0] = (uint64_t)&unk_1E819E898;
  qword_1ED808E28 = (uint64_t)&off_1E819E9A0;
  qword_1ED808E30 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED808E48 = (uint64_t)&qword_1ED808E30;
  llvm::cl::Option::setArgStr(v4, "replace-buffer-with-const-list-candidates", 0x29uLL);
  xmmword_1ED808DB0 = *a1;
  v5 = *a2;
  byte_1ED808E10 = **a2;
  byte_1ED808E21 = 1;
  byte_1ED808E20 = *v5;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED808D90);
}

void sub_1C628270C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED808E58);
  if (v1 != -1)
  {
    v4[0] = sub_1C565ACF4;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED808E58, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C6282770(unsigned int a1, unsigned int a2)
{
  uint64_t v4;

  v4 = operator new();
  return sub_1C565AD80(v4, a1, a2);
}

void sub_1C62827B0(int **a1, _WORD *a2)
{
  uint64_t v4;
  int *v5;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED808E60, 0, 0);
  dword_1ED808EE0 = 0;
  qword_1ED808EE8 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED808EF0 = 0;
  qword_1ED808E60 = (uint64_t)&unk_1E819E3B0;
  qword_1ED808EF8 = (uint64_t)&unk_1E819E2C0;
  qword_1ED808F00 = (uint64_t)&off_1E7F95260;
  qword_1ED808F18 = (uint64_t)&qword_1ED808F00;
  llvm::cl::Option::setArgStr(v4, "scalarize-cutoff", 0x10uLL);
  v5 = *a1;
  dword_1ED808EE0 = **a1;
  byte_1ED808EF4 = 1;
  dword_1ED808EF0 = *v5;
  word_1ED808E6A = (32 * (*a2 & 3)) | word_1ED808E6A & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED808E60);
}

llvm::cl::Option *sub_1C6282884(llvm::cl::Option *a1, char *a2, _DWORD **a3, _WORD *a4, __n128 *a5)
{
  uint64_t v10;

  v10 = sub_1C47AD050((uint64_t)a1, 0, 0);
  *(_DWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_1E7F952A8;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = &unk_1E819E3B0;
  *(_QWORD *)(v10 + 152) = &unk_1E819E2C0;
  *(_QWORD *)(v10 + 160) = &off_1E7F95260;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  sub_1C529FCF0(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

void sub_1C6282938(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED808FE8);
  if (v1 != -1)
  {
    v4[0] = sub_1C56600B0;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED808FE8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C628299C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C566013C(v0);
}

void sub_1C62829C4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED808FF8);
  if (v1 != -1)
  {
    v4[0] = sub_1C5660304;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED808FF8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C6282A28(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t a6, char a7)
{
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  void (**v21)(_QWORD *);
  _QWORD *v22;
  void (**v23)(_QWORD *);
  _QWORD *v24;
  void (**v25)(_QWORD *);
  _QWORD *v26;
  void (**v27)(_QWORD *);
  _QWORD *v28;
  void (**v29)(_QWORD *);
  _QWORD v31[3];
  _QWORD *v32;
  _QWORD v33[3];
  _QWORD *v34;
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  _QWORD v39[3];
  _QWORD *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v14 = operator new();
  v15 = (_QWORD *)a1[3];
  if (v15)
  {
    if (v15 == a1)
    {
      v40 = v39;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v39);
    }
    else
    {
      v40 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v15 + 16))(v15);
    }
  }
  else
  {
    v40 = 0;
  }
  v16 = (_QWORD *)a2[3];
  if (v16)
  {
    if (v16 == a2)
    {
      v38 = v37;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v37);
    }
    else
    {
      v38 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v16 + 16))(v16);
    }
  }
  else
  {
    v38 = 0;
  }
  v17 = (_QWORD *)a3[3];
  if (v17)
  {
    if (v17 == a3)
    {
      v36 = v35;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v35);
    }
    else
    {
      v36 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v17 + 16))(v17);
    }
  }
  else
  {
    v36 = 0;
  }
  v18 = (_QWORD *)a4[3];
  if (v18)
  {
    if (v18 == a4)
    {
      v34 = v33;
      (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v33);
    }
    else
    {
      v34 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v18 + 16))(v18);
    }
  }
  else
  {
    v34 = 0;
  }
  v19 = (_QWORD *)a5[3];
  if (v19)
  {
    if (v19 == a5)
    {
      v32 = v31;
      (*(void (**)(_QWORD *, _QWORD *))(*a5 + 24))(a5, v31);
    }
    else
    {
      v32 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v19 + 16))(v19);
    }
  }
  else
  {
    v32 = 0;
  }
  sub_1C56603B0(v14, (uint64_t)v39, (uint64_t)v37, (uint64_t)v35, (uint64_t)v33, (uint64_t)v31, a6, a7);
  v20 = v32;
  if (v32 == v31)
  {
    v21 = (void (**)(_QWORD *))(v31[0] + 32);
    v20 = v31;
LABEL_18:
    (*v21)(v20);
    goto LABEL_19;
  }
  if (v32)
  {
    v21 = (void (**)(_QWORD *))(*v32 + 40);
    goto LABEL_18;
  }
LABEL_19:
  v22 = v34;
  if (v34 == v33)
  {
    v23 = (void (**)(_QWORD *))(v33[0] + 32);
    v22 = v33;
LABEL_21:
    (*v23)(v22);
    goto LABEL_22;
  }
  if (v34)
  {
    v23 = (void (**)(_QWORD *))(*v34 + 40);
    goto LABEL_21;
  }
LABEL_22:
  v24 = v36;
  if (v36 == v35)
  {
    v25 = (void (**)(_QWORD *))(v35[0] + 32);
    v24 = v35;
LABEL_24:
    (*v25)(v24);
    goto LABEL_25;
  }
  if (v36)
  {
    v25 = (void (**)(_QWORD *))(*v36 + 40);
    goto LABEL_24;
  }
LABEL_25:
  v26 = v38;
  if (v38 == v37)
  {
    v27 = (void (**)(_QWORD *))(v37[0] + 32);
    v26 = v37;
LABEL_27:
    (*v27)(v26);
    goto LABEL_28;
  }
  if (v38)
  {
    v27 = (void (**)(_QWORD *))(*v38 + 40);
    goto LABEL_27;
  }
LABEL_28:
  v28 = v40;
  if (v40 == v39)
  {
    v29 = (void (**)(_QWORD *))(v39[0] + 32);
    v28 = v39;
  }
  else
  {
    if (!v40)
      return v14;
    v29 = (void (**)(_QWORD *))(*v40 + 40);
  }
  (*v29)(v28);
  return v14;
}

void sub_1C6282D64()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6282D78(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81721F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C6282DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if ((sub_1C6283094(a1, a2, &v6) & 1) != 0)
    return v6;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = a1 + 8;
    v5 = 8;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

_QWORD *sub_1C6282E0C(_DWORD *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6282E68((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6282F0C(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1C6282E68(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_17;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C6282F0C(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v3;
  unsigned int v4;
  uint64_t v7;
  _QWORD *v8;

  v3 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v4 = 8;
  else
    v4 = a1[4];
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[1] > v4 >> 3)
  {
    goto LABEL_5;
  }
  v7 = (uint64_t)a1;
  sub_1C5667EBC((uint64_t)a1, v4);
  v8 = 0;
  sub_1C6282E68(v7, *a2, &v8);
  a1 = (_DWORD *)v7;
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_1C6282FCC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C6282E68((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C6283094(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_5;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_5;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

uint64_t sub_1C6283140()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C56684D4(v0);
}

void sub_1C6283168(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED809308);
  if (v1 != -1)
  {
    v4[0] = sub_1C566859C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED809308, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void sub_1C62831CC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED8093D8);
  if (v1 != -1)
  {
    v4[0] = sub_1C566A1CC;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED8093D8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C6283230()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C566A260(v0);
}

void sub_1C6283258(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  int v5;
  unint64_t v6;

  v6 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 72, &v6);
  sub_1C62832C8((uint64_t *)a1, (uint64_t)v3);
  v4 = v6;
  if (*(_QWORD *)a1 != a1 + 16)
  {
    v5 = v6;
    free(*(void **)a1);
    v4 = v5;
  }
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C62832C8(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v4 = *a1 + 72 * v2;
    v5 = a2 + 24;
    v6 = *a1 + 8;
    do
    {
      v7 = v6 - 8;
      *(_QWORD *)(v5 - 24) = *(_QWORD *)(v6 - 8);
      *(_QWORD *)(v5 - 16) = v5;
      *(_QWORD *)(v5 - 8) = 0x600000000;
      if (*(_DWORD *)(v6 + 8))
        sub_1C4E41EEC(v5 - 16, v6);
      v5 += 72;
      v6 += 72;
    }
    while (v7 + 72 != v4);
    v8 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v8)
    {
      v9 = *a1;
      v10 = 72 * v8;
      do
      {
        v11 = *(void **)(v9 + v10 - 64);
        if ((void *)(v9 + v10 - 48) != v11)
          free(v11);
        v10 -= 72;
      }
      while (v10);
    }
  }
}

void sub_1C6283390(__int128 *a1, int **a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)qword_1ED809310, 0, 0);
  dword_1ED809390 = 0;
  qword_1ED809398 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED8093A0 = 0;
  qword_1ED809310[0] = (uint64_t)&unk_1E819E3B0;
  qword_1ED8093A8 = (uint64_t)&unk_1E819E2C0;
  qword_1ED8093B0 = (uint64_t)&off_1E7F95260;
  qword_1ED8093C8 = (uint64_t)&qword_1ED8093B0;
  llvm::cl::Option::setArgStr(v4, "trivial-call-promotion-max-nb-expanded-per-call", 0x2FuLL);
  xmmword_1ED809330 = *a1;
  dword_1ED809390 = **a2;
  byte_1ED8093A4 = 1;
  dword_1ED8093A0 = dword_1ED809390;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED809310);
}

void sub_1C6283450(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED8093E8);
  if (v1 != -1)
  {
    v4[0] = sub_1C566AA60;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED8093E8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C62834B4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C566AAF0(v0);
}

void sub_1C62834DC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED8093F8);
  if (v1 != -1)
  {
    v4[0] = sub_1C566AD34;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED8093F8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C6283540()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C62835FC(v0);
}

void sub_1C628356C(llvm::ModulePass *a1)
{
  llvm::ModulePass::~ModulePass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6283590(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::FunctionGroupInfoWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(this);
}

uint64_t sub_1C62835D4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C62835FC(v0);
}

uint64_t sub_1C62835FC(uint64_t a1)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED8093F0;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8172418;
  PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  v2 = atomic_load(&qword_1ED8093F8);
  if (v2 != -1)
  {
    v6[0] = sub_1C566AD34;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1ED8093F8, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t llvm::createAlwaysInlinerLegacyPass(llvm *this)
{
  char v1;
  uint64_t v2;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  v1 = (char)this;
  v2 = operator new();
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = &unk_1EF8F7130;
  *(_DWORD *)(v2 + 24) = 3;
  *(_BYTE *)(v2 + 28) = v1;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = 0x1000000000;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_QWORD *)v2 = &off_1E81724B8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED831A00);
  if (v4 != -1)
  {
    v8[0] = sub_1C566D018;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED831A00, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v2;
}

uint64_t llvm::createAnnotation2MetadataLegacyPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C566D864(v1);
}

_QWORD *llvm::Annotation2MetadataPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  sub_1C566D92C(a1);
  return llvm::InstCountPass::run(a2);
}

uint64_t llvm::createArgumentPromotionPass(llvm *this)
{
  int v1;
  uint64_t v2;

  v1 = (int)this;
  v2 = operator new();
  return sub_1C5671EF0(v2, v1);
}

void sub_1C6283818(unsigned int *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  _BYTE *v10;
  unint64_t v11;
  size_t v12;
  void *v13;

  v5 = *(_QWORD *)a1;
  v6 = a1[2];
  if (*(_QWORD *)a1 + 8 * v6 == a2)
  {
    sub_1C510F7B8(a1, a3, 0);
    return;
  }
  v7 = (a2 - v5) >> 3;
  v8 = v6 + a3;
  if (v6 + a3 > a1[3])
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v8, 8);
    v5 = *(_QWORD *)a1;
    v6 = a1[2];
  }
  v9 = (char *)(v5 + 8 * v7);
  v10 = (_BYTE *)(v5 + 8 * v6);
  v11 = (v10 - v9) >> 3;
  if (v11 < a3)
  {
    a1[2] = v6 + a3;
    if (v7 != v6)
    {
      memcpy((void *)(v5 + 8 * (v6 + a3) - 8 * v11), v9, v10 - v9);
      bzero(v9, v10 - v9);
    }
    if (v11 == a3)
      return;
    v12 = 8 * a3 - (v10 - v9);
    v13 = v10;
LABEL_10:
    bzero(v13, v12);
    return;
  }
  sub_1C6177054(a1, &v10[-8 * a3], (char *)(v5 + 8 * v6));
  if (&v10[-8 * a3] != v9)
    memmove(&v9[8 * a3], v9, &v10[-8 * a3] - v9);
  if (a3)
  {
    v12 = 8 * a3;
    v13 = v9;
    goto LABEL_10;
  }
}

uint64_t llvm::operator|(int a1, unsigned int a2)
{
  if (a1)
    return a2;
  else
    return 0;
}

_DWORD *llvm::operator|=(_DWORD *result, int a2)
{
  int v2;

  if (*result)
    v2 = a2;
  else
    v2 = 0;
  *result = v2;
  return result;
}

llvm::ConstantExpr *llvm::AA::getInitialValueForObj(uint64_t a1, llvm::UndefValue *this, uint64_t *a3)
{
  llvm::ConstantExpr *result;
  int v7;
  llvm::Type *v8;
  _BYTE v9[28];

  if (*(_BYTE *)(a1 + 16) == 59)
    return llvm::UndefValue::get(this, this);
  if (byte_1ED82E438)
    v7 = 59;
  else
    v7 = 63;
  sub_1C4EBF808(a1, v7, a3, v9);
  if (v9[24])
    return llvm::getInitialValueOfAllocation(a1, a3, this);
  if (*(_BYTE *)(a1 + 16) != 3 || (*(_DWORD *)(a1 + 32) & 0xFu) - 7 > 1)
    return 0;
  if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 0)
    return llvm::UndefValue::get(this, this);
  result = llvm::AA::getWithType(*(llvm::AA **)(a1 - 32), this, v8);
  if (result)
  {
    if (*((unsigned __int8 *)result + 16) >= 0x15u)
      return 0;
  }
  return result;
}

uint64_t llvm::AA::isAssumedReadOnly(llvm::AA *this, llvm::Attributor *a2, const llvm::IRPosition *a3, const llvm::AbstractAttribute *a4, BOOL *a5)
{
  return sub_1C5675BDC((uint64_t)this, (uint64_t *)a2, (uint64_t)a3, 0, a4);
}

uint64_t llvm::AA::isPotentiallyReachable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void (**v12)(void);
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 56);
  v10 = (_QWORD *)a5[3];
  if (v10)
  {
    if (v10 == a5)
    {
      v15 = v14;
      (*(void (**)(_QWORD *, _QWORD *))(*a5 + 24))(a5, v14);
    }
    else
    {
      v15 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
    }
  }
  else
  {
    v15 = 0;
  }
  v11 = sub_1C5675CF8(a1, a2, a3, v9, a4, (uint64_t)v14);
  if (v15 == v14)
  {
    v12 = (void (**)(void))(v14[0] + 32);
    goto LABEL_7;
  }
  if (v15)
  {
    v12 = (void (**)(void))(*v15 + 40);
LABEL_7:
    (*v12)();
  }
  return v11;
}

{
  _QWORD *v9;
  uint64_t v10;
  void (**v11)(void);
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v9 = (_QWORD *)a5[3];
  if (v9)
  {
    if (v9 == a5)
    {
      v14 = v13;
      (*(void (**)(_QWORD *, _QWORD *))(*a5 + 24))(a5, v13);
    }
    else
    {
      v14 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
    }
  }
  else
  {
    v14 = 0;
  }
  v10 = sub_1C5675CF8(a1, a2, 0, a3, a4, (uint64_t)v13);
  if (v14 == v13)
  {
    v11 = (void (**)(void))(v13[0] + 32);
    goto LABEL_7;
  }
  if (v14)
  {
    v11 = (void (**)(void))(*v14 + 40);
LABEL_7:
    (*v11)();
  }
  return v10;
}

uint64_t sub_1C6283CA4(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;

  v1 = *a1 & 3;
  if ((_DWORD)v1 == 3)
    return 7;
  if ((_DWORD)v1 == 2)
    return 1;
  v3 = *a1 & 0xFFFFFFFFFFFFFFFCLL;
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 *)(v3 + 16);
  if (v4 == 21)
    return 6;
  if (v4)
  {
    if (v4 < 0x1C)
      return 1;
    v8 = v4 - 33;
    v9 = v8 > 0x33;
    v10 = (1 << v8) & 0x8000000000041;
    if (v9 || v10 == 0)
      return 1;
    v5 = (_DWORD)v1 == 1;
    v6 = 5;
    v7 = 3;
  }
  else
  {
    v5 = (_DWORD)v1 == 1;
    v6 = 4;
    v7 = 2;
  }
  if (v5)
    return v7;
  else
    return v6;
}

unint64_t sub_1C6283D44(uint64_t *a1)
{
  int v1;
  uint64_t v3;
  unsigned int v4;

  v1 = *((_DWORD *)a1 + 4);
  if (v1)
    return (v1 - 1);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(*a1 - 32) + 16);
  if (v4 >= 0x15 && v4 != 24)
    return (v1 - 1);
  v3 = *a1;
  return (sub_1C4DD000C(*a1) - (v3 + 32 * (unint64_t)-(*(_DWORD *)(v3 + 20) & 0x7FFFFFF))) >> 5;
}

uint64_t llvm::IRAttributeManifest::manifestAttrs(uint64_t a1, llvm::IRPosition *a2, uint64_t a3, int a4)
{
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  llvm::Attribute *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int KindAsEnum;
  _QWORD *KindAsString;
  size_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t AttributeAtIndex;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;

  v7 = sub_1C5676204(a2);
  v8 = sub_1C6283CA4(a2);
  v9 = v8;
  v37 = 0;
  if (v8 <= 7)
  {
    v10 = 1;
    if (((1 << v8) & 0x54) != 0)
    {
      v12 = *(_QWORD *)(v7 + 112);
    }
    else
    {
      if (((1 << v8) & 0xA8) == 0)
        return v10;
      v11 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFCLL;
      if ((~*(_DWORD *)a2 & 3) == 0)
        v11 = *(_QWORD *)(v11 + 24);
      v12 = *(_QWORD *)(v11 + 64);
    }
    v37 = v12;
  }
  v13 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)a2 & 3) == 0)
    v13 = *(_QWORD *)(v13 + 24);
  v14 = *(_QWORD *)(a3 + 8);
  v10 = 1;
  if (v14)
  {
    v36 = a4;
    v35 = v7;
    v15 = **(uint64_t ***)v13;
    v16 = *(llvm::Attribute **)a3;
    v17 = 8 * v14;
    v18 = 1;
    while (1)
    {
      v19 = -1;
      v20 = 1 << sub_1C6283CA4(a2);
      if ((v20 & 0xC) != 0)
      {
        v19 = 0;
      }
      else if ((v20 & 0x30) == 0)
      {
        v19 = sub_1C628686C(a2, 0) + 1;
      }
      if (llvm::Attribute::isEnumAttribute(v16))
      {
        KindAsEnum = llvm::Attribute::getKindAsEnum(v16);
        if (v37)
        {
          if ((v19 + 1) < *(_DWORD *)(v37 + 8))
          {
            v31 = *(_QWORD *)(v37 + 8 * (v19 + 1) + 40);
            if (v31)
            {
              if (((*(unsigned __int8 *)(v31 + KindAsEnum / 8 + 12) >> (KindAsEnum & 7)) & 1) != 0 && (v36 & 1) == 0)
              {
                AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex(&v37, v19, KindAsEnum);
                if (!AttributeAtIndex
                  || *(_BYTE *)(AttributeAtIndex + 8) != 1
                  || !*(_QWORD *)v16
                  || *(_QWORD *)(AttributeAtIndex + 16) >= *(_QWORD *)(*(_QWORD *)v16 + 16))
                {
                  goto LABEL_34;
                }
              }
            }
          }
        }
      }
      else if (llvm::Attribute::isStringAttribute(v16))
      {
        KindAsString = (_QWORD *)llvm::Attribute::getKindAsString(v16);
        v24 = v23;
        if (llvm::AttributeList::hasAttributeAtIndex(&v37, v19, KindAsString, v23) && !v36)
        {
          v25 = llvm::AttributeList::getAttributeAtIndex(&v37, v19, KindAsString, v24);
          if (!v25)
            goto LABEL_34;
          if (*(_BYTE *)(v25 + 8) != 1)
            goto LABEL_34;
          v26 = *(_QWORD *)v16;
          if (!*(_QWORD *)v16 || *(_QWORD *)(v25 + 16) >= *(_QWORD *)(v26 + 16))
            goto LABEL_34;
          goto LABEL_33;
        }
      }
      else
      {
        v27 = llvm::Attribute::getKindAsEnum(v16);
        v28 = v27;
        if (v37)
        {
          if ((v19 + 1) < *(_DWORD *)(v37 + 8))
          {
            v33 = *(_QWORD *)(v37 + 8 * (v19 + 1) + 40);
            if (v33)
            {
              if (((*(unsigned __int8 *)(v33 + v27 / 8 + 12) >> (v27 & 7)) & 1) != 0 && (v36 & 1) == 0)
              {
                v34 = llvm::AttributeList::getAttributeAtIndex(&v37, v19, v27);
                if (!v34
                  || *(_BYTE *)(v34 + 8) != 1
                  || !*(_QWORD *)v16
                  || *(_QWORD *)(v34 + 16) >= *(_QWORD *)(*(_QWORD *)v16 + 16))
                {
                  goto LABEL_34;
                }
              }
            }
          }
        }
        v37 = llvm::AttributeList::removeAttributeAtIndex(&v37, v15, v19, v28);
      }
      v26 = *(_QWORD *)v16;
LABEL_33:
      v18 = 0;
      v37 = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)&v37, (llvm::LLVMContext *)v15, v19, v26);
LABEL_34:
      v16 = (llvm::Attribute *)((char *)v16 + 8);
      v17 -= 8;
      if (!v17)
      {
        if (v18 == 1)
          return 1;
        v10 = 0;
        if (v9 <= 7)
        {
          if (((1 << v9) & 0x54) != 0)
          {
            v10 = 0;
            *(_QWORD *)(v35 + 112) = v37;
          }
          else if (((1 << v9) & 0xA8) != 0)
          {
            v30 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFCLL;
            if ((~*(_DWORD *)a2 & 3) == 0)
              v30 = *(_QWORD *)(v30 + 24);
            v10 = 0;
            *(_QWORD *)(v30 + 64) = v37;
          }
        }
        return v10;
      }
    }
  }
  return v10;
}

unint64_t sub_1C6284150(llvm::IRPosition *a1)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = sub_1C628686C(a1, 0);
  v3 = *(_QWORD *)a1 & 3;
  v4 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFCLL;
  if (v2 < 0)
  {
    if (v3 != 3)
      return v4;
    goto LABEL_4;
  }
  if (v3 != 3)
  {
    if (*(_BYTE *)(v4 + 16) == 21)
      return v4;
    goto LABEL_12;
  }
  if (*(_BYTE *)(*(_QWORD *)(v4 + 24) + 16) != 21)
  {
    v4 = *(_QWORD *)(v4 + 24);
LABEL_12:
    v5 = v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) + 32 * sub_1C628686C(a1, 0);
    return *(_QWORD *)v5;
  }
LABEL_4:
  v5 = v4 + 24;
  return *(_QWORD *)v5;
}

BOOL llvm::IRPosition::hasAttr(llvm::IRPosition *a1, int *a2, _BOOL8 AttrsFromAssumes, char a4, uint64_t a5)
{
  llvm::IRPosition *v10;
  llvm::IRPosition *v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  llvm::IRPosition *v19;
  unsigned int v20;
  uint64_t v21;
  void *v22[2];
  _QWORD v23[5];

  v23[4] = *MEMORY[0x1E0C80C00];
  v22[0] = v23;
  v22[1] = (void *)0x400000000;
  llvm::SubsumingPositionIterator::SubsumingPositionIterator((llvm::SubsumingPositionIterator *)&v19, a1);
  v10 = v19;
  if (v20)
  {
    v11 = (llvm::IRPosition *)((char *)v19 + 16 * v20);
    while (!AttrsFromAssumes)
    {
LABEL_7:
      v14 = 2;
      if ((a4 & 1) == 0)
      {
        v10 = (llvm::IRPosition *)((char *)v10 + 16);
        if (v10 != v11)
          continue;
      }
      goto LABEL_11;
    }
    v12 = 4 * AttrsFromAssumes;
    v13 = a2;
    while ((llvm::IRPosition::getAttrsFromIRAttr(v10, *v13, (uint64_t)v22) & 1) == 0)
    {
      ++v13;
      v12 -= 4;
      if (!v12)
        goto LABEL_7;
    }
    v14 = 1;
LABEL_11:
    v10 = v19;
  }
  else
  {
    v14 = 2;
  }
  if (v10 != (llvm::IRPosition *)&v21)
    free(v10);
  if (v14 == 2)
  {
    if (a5)
    {
      if (AttrsFromAssumes)
      {
        v15 = 4 * AttrsFromAssumes - 4;
        do
        {
          v16 = *a2++;
          AttrsFromAssumes = llvm::IRPosition::getAttrsFromAssumes(a1, v16, (uint64_t)v22, a5);
          if (AttrsFromAssumes)
            break;
          v17 = v15;
          v15 -= 4;
        }
        while (v17);
      }
    }
    else
    {
      AttrsFromAssumes = 0;
    }
  }
  else
  {
    AttrsFromAssumes = 1;
  }
  if (v22[0] != v23)
    free(v22[0]);
  return AttrsFromAssumes;
}

void llvm::IRPosition::getAttrs(llvm::IRPosition *a1, int *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  llvm::IRPosition *v12;
  uint64_t v13;
  llvm::IRPosition *v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  uint64_t v19;
  void *v20;
  unsigned int v21;
  _QWORD v22[9];

  v22[8] = *MEMORY[0x1E0C80C00];
  llvm::SubsumingPositionIterator::SubsumingPositionIterator((llvm::SubsumingPositionIterator *)&v20, a1);
  v12 = (llvm::IRPosition *)v20;
  v13 = 4 * a3;
  if (v21)
  {
    v19 = a6;
    v14 = (llvm::IRPosition *)((char *)v20 + 16 * v21);
    do
    {
      if (a3)
      {
        v15 = 4 * a3;
        v16 = a2;
        do
        {
          v17 = *v16++;
          llvm::IRPosition::getAttrsFromIRAttr(v12, v17, a4);
          v15 -= 4;
        }
        while (v15);
      }
      if ((a5 & 1) != 0)
        break;
      v12 = (llvm::IRPosition *)((char *)v12 + 16);
    }
    while (v12 != v14);
    a6 = v19;
    v12 = (llvm::IRPosition *)v20;
  }
  if (v12 != (llvm::IRPosition *)v22)
    free(v12);
  if (a6 && a3)
  {
    do
    {
      v18 = *a2++;
      llvm::IRPosition::getAttrsFromAssumes(a1, v18, a4, a6);
      v13 -= 4;
    }
    while (v13);
  }
}

void *sub_1C6284498(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  void *result;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  result = (void *)sub_1C6179DA8(a2, a3, &v6);
  if ((_DWORD)result)
  {
    v5 = v6 + 16;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    return sub_1C56845B8(a1, v5);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t sub_1C62844FC(uint64_t a1, unint64_t a2, uint64_t *a3, _QWORD *a4)
{
  llvm::MustBeExecutedIterator *v7;
  uint64_t v9;

  if (sub_1C62868F4(a3, a2))
    return 1;
  v9 = a3[4];
  while (v9 != a4[4] || a3[5] != a4[5] || a3[6] != a4[6])
  {
    v9 = llvm::MustBeExecutedIterator::advance((llvm::MustBeExecutedIterator *)a3, v7);
    a3[4] = v9;
    if (v9 == a2)
      return 1;
  }
  return 0;
}

double sub_1C628458C@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t *v4;
  double result;
  unint64_t *v6;

  v6 = 0;
  if (sub_1C62883D4(a1, a2, &v6))
  {
    v4 = v6;
    *a3 = a3 + 2;
    *(_QWORD *)&result = 0x100000000;
    a3[1] = 0x100000000;
    if (*((_DWORD *)v4 + 6))
      sub_1C568462C((uint64_t)a3, (uint64_t)(v4 + 2));
  }
  else
  {
    *a3 = a3 + 2;
    *(_QWORD *)&result = 0x100000000;
    a3[1] = 0x100000000;
  }
  return result;
}

__n128 llvm::Attributor::recordDependence(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  __n128 result;
  uint64_t v12;
  __n128 *v13;
  __n128 *v14;
  _QWORD v15[2];
  int v16;
  uint64_t v17;
  uint64_t v18;

  if (a4 != 2)
  {
    v17 = v4;
    v18 = v5;
    if (*(_DWORD *)(a1 + 272))
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10) & 1) == 0)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * *(unsigned int *)(a1 + 272) - 8);
        v15[0] = a2;
        v15[1] = a3;
        v16 = a4;
        v13 = (__n128 *)sub_1C4926708(v12, (unint64_t)v15, 1);
        v14 = (__n128 *)(*(_QWORD *)v12 + 24 * *(unsigned int *)(v12 + 8));
        result = *v13;
        v14[1].n128_u64[0] = v13[1].n128_u64[0];
        *v14 = result;
        ++*(_DWORD *)(v12 + 8);
      }
    }
  }
  return result;
}

uint64_t sub_1C62846C0(llvm::IRPosition *a1)
{
  unint64_t v2;

  if (sub_1C6283CA4(a1) == 2)
    v2 = *(_QWORD *)(*(_QWORD *)(sub_1C5676C10(a1) + 24) + 16);
  else
    v2 = sub_1C6284150(a1);
  return *(_QWORD *)v2;
}

uint64_t llvm::Attributor::isAssumedDead(uint64_t a1, uint64_t a2, _DWORD *a3, _BYTE *a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;

  v12 = a2 + 16;
  v13 = *(uint64_t **)(a1 + 80);
  v15 = 0;
  v16 = sub_1C5676204((_DWORD *)(a2 + 16));
  result = sub_1C614F7B0(v13, &v16, &v15);
  if ((_DWORD)result)
    return llvm::Attributor::isAssumedDead(a1, v12, a2, a3, a4, a5, a6);
  return result;
}

unint64_t llvm::Attributor::checkForAllCallSites(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t *), uint64_t a3, uint64_t a4, int a5, _BYTE *a6)
{
  unint64_t result;

  result = sub_1C5676C10((llvm::IRPosition *)(a4 + 16));
  if (result)
    return llvm::Attributor::checkForAllCallSites(a1, a2, a3, result, a5, a4, a6);
  return result;
}

uint64_t sub_1C6284A2C(uint64_t *a1, unsigned int a2)
{
  uint64_t v2;
  unsigned int v4;

  if (!*((_DWORD *)a1 + 4))
  {
    v2 = *a1;
    v4 = *(unsigned __int8 *)(*(_QWORD *)(*a1 - 32) + 16);
    if (v4 < 0x15 || v4 == 24)
      return *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 32 * a2);
  }
  a2 = *(_DWORD *)(a1[1] + 4 * (a2 + 1));
  if ((a2 & 0x80000000) == 0)
  {
    v2 = *a1;
    return *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 32 * a2);
  }
  return 0;
}

uint64_t sub_1C6284A84(uint64_t (*a1)(uint64_t, uint64_t *), uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7;
  void *v8[2];
  uint64_t v9;

  v7 = *a3;
  v8[0] = &v9;
  v8[1] = 0;
  if (*((_DWORD *)a3 + 4))
    sub_1C614C900((uint64_t)v8, (uint64_t)(a3 + 1));
  v5 = a1(a2, &v7);
  if (v8[0] != &v9)
    free(v8[0]);
  return v5;
}

uint64_t llvm::Attributor::shouldPropagateCallBaseContext(llvm::Attributor *this, const llvm::IRPosition *a2)
{
  return byte_1ED831CE0;
}

unint64_t llvm::Attributor::checkForAllReturnedValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  llvm::AbstractAttribute *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  result = sub_1C5676C10((llvm::IRPosition *)(a4 + 16));
  if (result)
  {
    v7 = sub_1C5684904(a1, result, *(_QWORD *)(a4 + 24), a4, 0, 0, 1);
    v8 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v7 + 48))(v7);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    result = 0;
    if (v9)
    {
      v10 = v11;
      return (*(uint64_t (**)(llvm::AbstractAttribute *, uint64_t (*)(uint64_t), _QWORD **))(*(_QWORD *)v7 + 120))(v7, sub_1C5684DDC, &v10);
    }
  }
  return result;
}

uint64_t llvm::Attributor::checkForAllInstructions(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, int **a5, _BYTE *a6, unsigned __int8 a7, char a8)
{
  unint64_t v16;

  v16 = sub_1C5676C10((llvm::IRPosition *)(a4 + 16));
  return llvm::Attributor::checkForAllInstructions(a1, a2, a3, v16, a4, a5, a6, a7, a8);
}

uint64_t sub_1C6284C3C(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;

  if (a2 != a4)
  {
    v14 = v4;
    v15 = v5;
    v8 = a2;
    v9 = result;
    do
    {
      v12 = a3(v8);
      result = sub_1C61B7564((uint64_t)v13, v9, &v12);
      if (v13[16])
      {
        v10 = a3(v8);
        v11 = *(uint64_t **)(v9 + 32);
        if ((unint64_t)v11 >= *(_QWORD *)(v9 + 40))
        {
          result = (uint64_t)sub_1C4ABDC28((void **)(v9 + 24), v10);
        }
        else
        {
          *v11 = v10;
          result = (uint64_t)(v11 + 1);
        }
        *(_QWORD *)(v9 + 32) = result;
      }
      v8 += 8;
    }
    while (v8 != a4);
  }
  return result;
}

unsigned int *sub_1C6284CD8(unsigned int *result, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v6 = a2;
  v7 = result;
  v8 = a4 - a2;
  v9 = result[2];
  v10 = v9 + ((a4 - a2) >> 3);
  if (v10 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v10, 8);
    v9 = v7[2];
  }
  if (v6 != a4)
  {
    v11 = (_QWORD *)(*(_QWORD *)v7 + 8 * v9);
    do
    {
      result = (unsigned int *)a3(v6);
      *v11++ = result;
      v6 += 8;
    }
    while (v6 != a4);
    LODWORD(v9) = v7[2];
  }
  v7[2] = v9 + (v8 >> 3);
  return result;
}

BOOL llvm::Attributor::registerForUpdate(llvm::Attributor *this, llvm::AbstractAttribute *a2)
{
  llvm::AbstractAttribute *v3;

  v3 = a2;
  return sub_1C6284D9C((uint64_t)this + 5184, (uint64_t *)&v3);
}

BOOL sub_1C6284D9C(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[16];
  unsigned __int8 v9;

  sub_1C61EAB5C((uint64_t)v8, a1, a2);
  v4 = v9;
  if (v9)
  {
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 144);
    if (v6 >= *(_DWORD *)(a1 + 148))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 136, a1 + 152, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 144);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 144);
  }
  return v4 != 0;
}

BOOL sub_1C6284E2C(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v6;
  unsigned __int8 v7;

  sub_1C6287A28(a1, a2, (uint64_t)&v6);
  v4 = v7;
  if (v7)
    sub_1C4EE5050((unsigned int *)(a1 + 392), (unint64_t)a2);
  return v4 != 0;
}

uint64_t llvm::Attributor::run(llvm::Attributor *this)
{
  uint64_t *v2;
  int v3;
  unsigned int v4;
  _QWORD v6[2];
  _BYTE v7[32];
  __int16 v8;
  const char *v9;
  __int16 v10;
  char *v11;

  v2 = (uint64_t *)off_1EF8EEB50();
  if (*v2)
    llvm::timeTraceProfilerBegin("Attributor::run", 0xFuLL, (uint64_t)&unk_1C872ACEA, 0);
  v6[0] = &off_1E81726C0;
  v6[1] = this;
  if (byte_1ED831DA0)
    sub_1C6284FDC((uint64_t)v6);
  *((_DWORD *)this + 1092) = 1;
  llvm::Attributor::runTillFixpoint(this);
  if (byte_1ED831AA0)
    llvm::AADepGraph::dumpGraph((llvm::Attributor *)((char *)this + 96));
  if (byte_1ED831B60)
  {
    v11 = (char *)this + 96;
    v9 = "Dependency Graph";
    v10 = 259;
    v8 = 257;
    sub_1C567F39C((llvm::raw_ostream *)&v11, (llvm::Twine *)&v9, 0, (llvm::Twine *)v7, 0);
  }
  if (byte_1ED831C20)
    llvm::AADepGraph::print((uint64_t *)this + 12);
  *((_DWORD *)this + 1092) = 2;
  v3 = llvm::Attributor::manifestAttributes(this);
  *((_DWORD *)this + 1092) = 3;
  v4 = llvm::Attributor::cleanupIR(this);
  if (byte_1ED831DA0)
    llvm::AttributorCallGraph::print((llvm::AttributorCallGraph *)v6);
  if (*v2)
    sub_1C6392DC0(*v2);
  if (v3)
    return v4;
  else
    return 0;
}

char *sub_1C6284FDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  char *v6;
  _QWORD v7[2];

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v4 = v3;
  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v7[0] = v2;
  v7[1] = v4;
  if ((char *)v2 != result)
  {
    v6 = result;
    do
    {
      result = llvm::AACallEdgeIterator::operator*((uint64_t)v7);
      v7[0] += 8;
    }
    while ((char *)v7[0] != v6);
  }
  return result;
}

uint64_t llvm::Attributor::rememberDependences(uint64_t this)
{
  uint64_t *v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(uint64_t **)(*(_QWORD *)(this + 264) + 8 * *(unsigned int *)(this + 272) - 8);
  v2 = *((_DWORD *)v1 + 2);
  if (v2)
  {
    v3 = *v1;
    v4 = *v1 + 24 * v2;
    do
    {
      this = sub_1C6285820(*(_QWORD *)v3 + 8, *(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFFBLL | (4 * *(unsigned int *)(v3 + 16)));
      v3 += 24;
    }
    while (v3 != v4);
  }
  return this;
}

void llvm::Attributor::createShallowWrapper(llvm::Attributor *this, llvm::Function *a2)
{
  llvm::LLVMContext **v3;
  llvm::LLVMContext *v4;
  llvm::PointerType *v5;
  char v6;
  llvm::Type *v7;
  uint64_t v8;
  uint64_t *v9;
  llvm::Value *v10;
  llvm::ValueSymbolTable *v11;
  uint64_t v12;
  llvm::MDNode **v13;
  char *v14;
  llvm::BasicBlock *v15;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t ***v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  llvm::Instruction *v22;
  llvm::Instruction *v23;
  int v24;
  llvm::Value *v25;
  llvm::ReturnInst *v26;
  uint64_t v27;
  uint64_t ***v28;
  uint64_t ***v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD v33[4];
  __int16 v34;
  void *Name;
  uint64_t v36;
  _BYTE v37[16];
  __int16 v38;
  llvm::MDNode **v39;
  uint64_t v40;
  _QWORD v41[4];

  v41[2] = *MEMORY[0x1E0C80C00];
  v3 = (llvm::LLVMContext **)*((_QWORD *)this + 5);
  v4 = *v3;
  v5 = (llvm::PointerType *)*((_QWORD *)this + 3);
  v6 = *((_DWORD *)this + 8) & 0xF;
  v7 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)this + 8) >> 8);
  v38 = 261;
  Name = llvm::Value::getName(this);
  v36 = v8;
  v9 = (uint64_t *)operator new(0x80uLL);
  v10 = (llvm::Value *)(v9 + 1);
  *((_DWORD *)v9 + 7) = *((_DWORD *)v9 + 7) & 0x38000000 | 0x40000000;
  *v9 = 0;
  llvm::Function::Function(v9 + 1, v5, v6, v7, (uint64_t)&Name, 0);
  v38 = 257;
  llvm::Value::setName((uint64_t ***)this, (uint64_t)&Name);
  v9[6] = (uint64_t)v3;
  if ((*((_BYTE *)v9 + 31) & 0x10) != 0)
  {
    v11 = v3[14];
    if (v11)
      llvm::ValueSymbolTable::reinsertValue(v11, v10);
  }
  v12 = *((_QWORD *)this + 7);
  v9[8] = v12;
  v9[9] = (uint64_t)this + 56;
  *(_QWORD *)(v12 + 8) = v9 + 8;
  *((_QWORD *)this + 7) = v9 + 8;
  *((_DWORD *)this + 8) = *((_DWORD *)this + 8) & 0xFFFFBFC0 | 0x4007;
  llvm::Value::doRAUW(this, v10, (llvm::Value *)1);
  llvm::GlobalObject::setComdat(v10, *((llvm::Comdat **)this + 6));
  llvm::GlobalObject::setComdat(this, 0);
  v39 = (llvm::MDNode **)v41;
  v40 = 0x100000000;
  llvm::Value::getAllMetadata(this, (uint64_t)&v39);
  if ((_DWORD)v40)
  {
    v13 = v39;
    v14 = (char *)&v39[2 * v40];
    do
    {
      llvm::Value::addMetadata(v10, *(_DWORD *)v13, v13[1]);
      v13 += 2;
    }
    while (v13 != (llvm::MDNode **)v14);
  }
  v9[15] = *((_QWORD *)this + 14);
  Name = "entry";
  v38 = 259;
  v15 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock((uint64_t)v15, v4, (uint64_t)&Name, (uint64_t)v10, 0);
  Name = v37;
  v36 = 0x800000000;
  if ((*((_BYTE *)this + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments(this);
  v16 = (llvm::Value *)*((_QWORD *)this + 11);
  v17 = sub_1C485F330((uint64_t)v10);
  if ((uint64_t ***)v17 != v18)
  {
    v27 = v17;
    v28 = v18;
    v29 = (uint64_t ***)v17;
    do
    {
      v30 = v36;
      if (v36 >= (unint64_t)HIDWORD(v36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Name, (uint64_t)v37, v36 + 1, 8);
        v30 = v36;
      }
      *((_QWORD *)Name + v30) = v27;
      LODWORD(v36) = v36 + 1;
      v31 = llvm::Value::getName(v16);
      v34 = 261;
      v33[0] = v31;
      v33[1] = v32;
      llvm::Value::setName(v29, (uint64_t)v33);
      v29 += 5;
      v27 += 40;
      v16 = (llvm::Value *)((char *)v16 + 40);
    }
    while (v29 != v28);
  }
  v19 = (uint64_t **)*((_QWORD *)this + 3);
  v20 = (uint64_t *)Name;
  v21 = v36;
  v34 = 257;
  v22 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x50, (int)v36 + 1);
  v23 = sub_1C61DD0B0(v22, v19, (uint64_t)this, v20, v21, 0, 0, (uint64_t)v33, v15);
  *((_WORD *)v23 + 9) = *((_WORD *)v23 + 9) & 0xFFFC | 1;
  *((_QWORD *)v22 + 8) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v23 + 8, **(uint64_t ***)v22, -1, 27);
  v24 = *(unsigned __int8 *)(*(_QWORD *)v22 + 8);
  if (v24 == 7)
    v25 = 0;
  else
    v25 = v22;
  v26 = (llvm::ReturnInst *)llvm::User::operator new((llvm::User *)0x40, v24 != 7);
  llvm::ReturnInst::ReturnInst(v26, v4, v25, v15);
  if (Name != v37)
    free(Name);
  if (v39 != v41)
    free(v39);
}

uint64_t llvm::Attributor::isInternalizable(llvm::Attributor *this, llvm::Function *a2)
{
  int v3;
  BOOL v4;
  unsigned int v5;

  if (*((_BYTE *)this + 16))
  {
    if (*((_BYTE *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
      return 0;
  }
  else if (*((llvm::Attributor **)this + 9) == (llvm::Attributor *)((char *)this + 72)
         && (*((_BYTE *)this + 34) & 0x80) == 0)
  {
    return 0;
  }
  v3 = *((_DWORD *)this + 8) & 0xF;
  v4 = (v3 - 7) >= 2;
  v5 = (0x1EBu >> v3) & 1;
  if (v4)
    return v5;
  else
    return 0;
}

uint64_t llvm::Attributor::isValidFunctionSignatureRewrite(uint64_t a1, uint64_t a2)
{
  const llvm::Function *v2;
  uint64_t result;
  uint64_t *v5;
  int v6;
  int *v7[2];
  char v8;
  char v9;
  uint64_t v10;
  const llvm::Function *v11;

  if (!*(_BYTE *)(a1 + 5466))
    return 0;
  v2 = *(const llvm::Function **)(a2 + 24);
  v11 = v2;
  if (*(_DWORD *)(*((_QWORD *)v2 + 3) + 8) > 0xFFu)
    return 0;
  v10 = *((_QWORD *)v2 + 14);
  if (llvm::AttributeList::hasAttrSomewhere(&v10, 18, 0)
    || llvm::AttributeList::hasAttrSomewhere(&v10, 73, 0)
    || llvm::AttributeList::hasAttrSomewhere(&v10, 71, 0)
    || llvm::AttributeList::hasAttrSomewhere(&v10, 72, 0))
  {
    return 0;
  }
  result = llvm::Attributor::checkForAllCallSites(a1, (uint64_t (*)(uint64_t, uint64_t *))sub_1C5685028, (uint64_t)&v11, (uint64_t)v2, 1, 0, &v9);
  if ((_DWORD)result)
  {
    v5 = (uint64_t *)sub_1C6285788(*(uint64_t **)(a1 + 88), v2);
    v7[0] = &v6;
    v7[1] = (int *)1;
    return sub_1C5678D14(0, v5, (uint64_t (*)(uint64_t, uint64_t))sub_1C5685144, (uint64_t)&v8, 0, 0, v7, &v9, 0, 0);
  }
  return result;
}

uint64_t llvm::Attributor::registerFunctionSignatureRewrite(uint64_t a1, uint64_t a2, _BYTE *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v22 = *(_QWORD *)(a2 + 24);
  v12 = sub_1C62889F0(a1 + 56, &v22);
  v13 = v12 + 1;
  if (!*((_DWORD *)v12 + 4))
    sub_1C6288DF8((uint64_t)(v12 + 1), *(_QWORD *)(v22 + 96));
  v14 = *(unsigned int *)(a2 + 32);
  v15 = *v13;
  v16 = *(_QWORD *)(*v13 + 8 * v14);
  if (v16)
  {
    if (a4 >= *(unsigned int *)(v16 + 32))
      return 0;
    *(_QWORD *)(v15 + 8 * v14) = 0;
    v20 = sub_1C6288F00((_QWORD *)v16);
    MEMORY[0x1CAA32FC0](v20, 0x10E0C40D6C35413);
  }
  else
  {
    *(_QWORD *)(v15 + 8 * v14) = 0;
  }
  v18 = operator new();
  sub_1C6286E28(v18, a1, a2, a3, a4, a5, a6);
  v19 = *(_QWORD **)(v15 + 8 * v14);
  *(_QWORD *)(v15 + 8 * v14) = v18;
  if (v19)
  {
    v21 = sub_1C6288F00(v19);
    MEMORY[0x1CAA32FC0](v21, 0x10E0C40D6C35413);
  }
  return 1;
}

uint64_t llvm::Attributor::shouldSeedAttribute()
{
  return 1;
}

uint64_t sub_1C6285700(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = sub_1C5685B8C((_DWORD *)a1, a2);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD **)(a1 + 72);
    v6 = *(unsigned int *)(a1 + 80);
    v7 = &v5[v6];
    if ((_DWORD)v6)
    {
      v8 = 8 * v6;
      while (*v5 != *a2)
      {
        ++v5;
        v8 -= 8;
        if (!v8)
        {
          v5 = v7;
          break;
        }
      }
    }
    if (v7 != v5 + 1)
    {
      memmove(v5, v5 + 1, (char *)v7 - (char *)(v5 + 1));
      LODWORD(v6) = *(_DWORD *)(a1 + 80);
    }
    *(_DWORD *)(a1 + 80) = v6 - 1;
  }
  return v4;
}

uint64_t sub_1C6285788(uint64_t *a1, const llvm::Function *a2)
{
  _QWORD *v4;
  uint64_t result;
  unint64_t v6;
  const llvm::Function *v7;

  v7 = a2;
  v4 = sub_1C61B6040(a1 + 12, &v7);
  result = v4[1];
  if (!result)
  {
    v6 = sub_1C484358C(a1[16], 112, 3);
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 80) = 0u;
    *(_OWORD *)(v6 + 96) = 0u;
    *(_QWORD *)(v6 + 24) = v6 + 40;
    *(_DWORD *)(v6 + 36) = 8;
    v4[1] = v6;
    llvm::InformationCache::initializeInformationCache((llvm::InformationCache *)a1, a2, (llvm::InformationCache::FunctionInfo *)v6);
    return v4[1];
  }
  return result;
}

uint64_t sub_1C6285820(uint64_t result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = (uint64_t *)result;
  v4 = *(_QWORD *)result;
  if (*(_QWORD *)result > 3uLL)
  {
    if ((v4 & 2) == 0)
    {
      v5 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      result = operator new();
      *(_QWORD *)result = result + 16;
      *(_QWORD *)(result + 8) = 0x400000000;
      *v3 = result | 2;
      v6 = result & 0xFFFFFFFFFFFFFFFCLL;
      v7 = *(unsigned int *)((result & 0xFFFFFFFFFFFFFFFCLL) + 8);
      if (v7 >= *(_DWORD *)((result & 0xFFFFFFFFFFFFFFFCLL) + 12))
      {
        v10 = result & 0xFFFFFFFFFFFFFFFCLL;
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(result & 0xFFFFFFFFFFFFFFFCLL, v6 + 16, v7 + 1, 8);
        v6 = v10;
        LODWORD(v7) = *(_DWORD *)(v10 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
      ++*(_DWORD *)(v6 + 8);
      v4 = *v3;
    }
    v8 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v9 = *(unsigned int *)((v4 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    if (v9 >= *(_DWORD *)(v8 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v8, v8 + 16, v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(v8 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = a2;
    ++*(_DWORD *)(v8 + 8);
  }
  else
  {
    *(_QWORD *)result = a2 & 0xFFFFFFFFFFFFFFFDLL;
  }
  return result;
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *a1, llvm::Value **a2)
{
  llvm::Value *v4;
  llvm::raw_ostream *v5;
  int v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  size_t v9;
  char *Name;
  size_t v11;
  void *v12;
  llvm::raw_ostream *v13;
  llvm::Value *v14;
  size_t v15;
  char *v16;
  size_t v17;
  void *v18;
  llvm::raw_ostream *v19;
  int v20;
  llvm::raw_ostream *v21;
  llvm::raw_ostream *v22;

  v4 = (llvm::Value *)sub_1C6284150((llvm::IRPosition *)a2);
  v5 = sub_1C4816AD8(a1, "{");
  v6 = sub_1C6283CA4(a2);
  v7 = llvm::operator<<(v5, v6);
  v8 = sub_1C4816AD8(v7, ":");
  Name = llvm::Value::getName(v4);
  v11 = v9;
  v12 = (void *)*((_QWORD *)v8 + 4);
  if (v9 <= *((_QWORD *)v8 + 3) - (_QWORD)v12)
  {
    if (v9)
    {
      memcpy(v12, Name, v9);
      *((_QWORD *)v8 + 4) += v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(v8, Name, v9);
  }
  v13 = sub_1C4816AD8(v8, " [");
  v14 = (llvm::Value *)((unint64_t)*a2 & 0xFFFFFFFFFFFFFFFCLL);
  if ((~*(_DWORD *)a2 & 3) == 0)
    v14 = (llvm::Value *)*((_QWORD *)v14 + 3);
  v16 = llvm::Value::getName(v14);
  v17 = v15;
  v18 = (void *)*((_QWORD *)v13 + 4);
  if (v15 <= *((_QWORD *)v13 + 3) - (_QWORD)v18)
  {
    if (v15)
    {
      memcpy(v18, v16, v15);
      *((_QWORD *)v13 + 4) += v17;
    }
  }
  else
  {
    llvm::raw_ostream::write(v13, v16, v15);
  }
  v19 = sub_1C4816AD8(v13, "@");
  v20 = sub_1C628686C((llvm::IRPosition *)a2, 0);
  v21 = llvm::raw_ostream::operator<<(v19, v20);
  sub_1C4816AD8(v21, "]");
  if (a2[1])
  {
    v22 = sub_1C4816AD8(a1, "[cb_context:");
    llvm::Value::print(a2[1], v22, 0);
    sub_1C4816AD8(v22, "]");
  }
  return sub_1C4816AD8(a1, "}");
}

_QWORD *llvm::AttributorPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[77];
  _QWORD v16[4];
  _QWORD v17[6];
  _QWORD v18[2];
  _QWORD v19[3];
  int v20;
  _QWORD v21[18];
  _QWORD v22[18];
  _BYTE v23[176];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a2, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, a1)+ 8);
  v13 = 0;
  v14 = v5;
  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  for (i = *(_QWORD *)(a1 + 32); i != a1 + 24; i = *(_QWORD *)(i + 8))
  {
    v7 = i - 56;
    if (!i)
      v7 = 0;
    v15[0] = v7;
    sub_1C567D3D8(v9, v15);
  }
  v19[0] = v21;
  v19[1] = v21;
  v19[2] = 16;
  v20 = 0;
  v21[16] = v22;
  v21[17] = 0x1000000000;
  v22[16] = v23;
  v22[17] = 0x1000000000;
  memset(&v23[128], 0, 48);
  v24 = 0;
  v16[1] = 0;
  v16[0] = 0;
  v16[2] = v17;
  v16[3] = 0x400000000;
  v17[4] = v18;
  v17[5] = 0;
  v18[0] = 0;
  v18[1] = 1;
  sub_1C6286EFC((uint64_t)v15, a1, (uint64_t)&v14, (uint64_t)v16, 0);
  if (sub_1C567FD90((uint64_t)v15, (uint64_t)v9, (uint64_t)v19, 1))
  {
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)(a3 + 88) = 0;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_DWORD *)(a3 + 64) = 2;
  }
  else
  {
    llvm::InstCountPass::run(a3);
  }
  sub_1C56826A4((uint64_t)v15);
  sub_1C4926AE8((uint64_t)v16);
  sub_1C62878B8((llvm::CallGraphUpdater *)v19);
  return sub_1C5408A20(v9);
}

_QWORD *llvm::AttributorCGSCCPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[2];
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[77];
  _QWORD v24[4];
  _QWORD v25[6];
  _QWORD v26[2];
  _QWORD v27[3];
  int v28;
  _QWORD v29[18];
  _QWORD v30[18];
  _OWORD v31[9];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(a2, &llvm::FunctionAnalysisManagerCGSCCProxy::Key, a1, a3)+ 8);
  v21 = 0;
  v22 = v10;
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v11 = *(unsigned int *)(a1 + 16);
  if (!(_DWORD)v11)
    goto LABEL_5;
  v12 = *(uint64_t **)(a1 + 8);
  v13 = 8 * v11;
  do
  {
    v14 = *v12++;
    v23[0] = *(_QWORD *)(v14 + 8);
    sub_1C567D3D8(v17, v23);
    v13 -= 8;
  }
  while (v13);
  if (v19 != v20)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v20 - 8) + 40);
    v27[0] = v29;
    v27[1] = v29;
    v27[2] = 16;
    v28 = 0;
    v29[16] = v30;
    v29[17] = 0x1000000000;
    v30[16] = v31;
    v30[17] = 0x1000000000;
    v31[8] = 0u;
    v36 = 0;
    v32 = a3;
    v33 = a1;
    v34 = a2;
    v35 = a4;
    v36 = *(_QWORD *)(llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(a2, &llvm::FunctionAnalysisManagerCGSCCProxy::Key, a1, a3)+ 8);
    v24[1] = 0;
    v24[0] = 0;
    v24[2] = v25;
    v24[3] = 0x400000000;
    v25[4] = v26;
    v25[5] = 0;
    v26[0] = 0;
    v26[1] = 1;
    sub_1C6286EFC((uint64_t)v23, v16, (uint64_t)&v22, (uint64_t)v24, (uint64_t)v17);
    if (sub_1C567FD90((uint64_t)v23, (uint64_t)v17, (uint64_t)v27, 0))
    {
      *(_QWORD *)a5 = a5 + 32;
      *(_QWORD *)(a5 + 8) = a5 + 32;
      *(_QWORD *)(a5 + 16) = 2;
      *(_DWORD *)(a5 + 24) = 0;
      *(_QWORD *)(a5 + 48) = a5 + 80;
      *(_QWORD *)(a5 + 56) = a5 + 80;
      *(_QWORD *)(a5 + 64) = 2;
      *(_DWORD *)(a5 + 72) = 0;
      sub_1C4DDB144(a5, (uint64_t)&llvm::FunctionAnalysisManagerCGSCCProxy::Key);
    }
    else
    {
      llvm::InstCountPass::run(a5);
    }
    sub_1C56826A4((uint64_t)v23);
    sub_1C4926AE8((uint64_t)v24);
    sub_1C62878B8((llvm::CallGraphUpdater *)v27);
  }
  else
  {
LABEL_5:
    llvm::InstCountPass::run(a5);
  }
  return sub_1C5408A20(v17);
}

uint64_t llvm::createAttributorLegacyPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5680214(v1);
}

uint64_t llvm::createAttributorCGSCCLegacyPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C56802DC(v1);
}

uint64_t sub_1C6286044()
{
  return 0;
}

uint64_t sub_1C628604C()
{
  return 1;
}

uint64_t sub_1C6286054(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AAMemoryLocation::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C62860C0(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t *v12;
  int i;
  uint64_t v14;
  uint64_t v15;
  BOOL v17;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    v5 = 0;
    result = 0;
    goto LABEL_3;
  }
  v8 = *a1;
  v9 = llvm::IRPosition::EmptyKey;
  v10 = llvm::IRPosition::TombstoneKey;
  v11 = sub_1C62861D8((_DWORD *)a2);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & (v4 - 1);
    v5 = (uint64_t *)(v8 + 32 * v14);
    v15 = *v5;
    if (*(_QWORD *)a2 == *v5 && *(_QWORD *)(a2 + 8) == v5[1] && v5[2] == *(_QWORD *)(a2 + 16))
    {
      result = 1;
      goto LABEL_3;
    }
    if (v15 == -8192)
    {
      v17 = v5[1] == (_QWORD)v10 && v5[2] == *((_QWORD *)&v10 + 1);
      goto LABEL_24;
    }
    if (v15 == -4096 && v5[1] == (_QWORD)v9 && v5[2] == *((_QWORD *)&v9 + 1))
      break;
    v17 = 0;
LABEL_24:
    if (v17 && v12 == 0)
      v12 = (uint64_t *)(v8 + 32 * v14);
    v11 = v14 + i;
  }
  result = 0;
  if (v12)
    v5 = v12;
LABEL_3:
  *a3 = v5;
  return result;
}

uint64_t sub_1C62861D8(_DWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = (a1[4] >> 4) ^ (a1[4] >> 9) ^ (a1[2] ^ (a1[2] >> 5)) & 0xFFFFFFF0;
  v2 = (v1 | ((unint64_t)((*a1 >> 4) ^ (*a1 >> 9)) << 32)) + ~(v1 << 32);
  v3 = (v2 ^ (v2 >> 22)) + ~((v2 ^ (v2 >> 22)) << 13);
  v4 = (9 * (v3 ^ (v3 >> 8))) ^ ((9 * (v3 ^ (v3 >> 8))) >> 15);
  return ((v4 + ~(v4 << 27)) >> 31) ^ ((_DWORD)v4 + ~((_DWORD)v4 << 27));
}

uint64_t *sub_1C628623C(uint64_t *a1, uint64_t a2)
{
  char v4;
  uint64_t *v5;
  uint64_t *v7;

  v7 = 0;
  v4 = sub_1C62860C0(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C62862A8((uint64_t)a1, a2, a2, v7);
    *v5 = *(_QWORD *)a2;
    *(_OWORD *)(v5 + 1) = *(_OWORD *)(a2 + 8);
    v5[3] = 0;
  }
  return v5;
}

uint64_t *sub_1C62862A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  BOOL v9;
  uint64_t *v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_13;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_13:
    sub_1C5680A6C(a1, v7);
    v10 = 0;
    sub_1C62860C0((uint64_t *)a1, a3, &v10);
    a4 = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096
    || (a4[1] == (_QWORD)llvm::IRPosition::EmptyKey
      ? (v9 = a4[2] == *((_QWORD *)&llvm::IRPosition::EmptyKey + 1))
      : (v9 = 0),
        !v9))
  {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

uint64_t sub_1C6286374(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t *v14;
  uint64_t *v15;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v7 = *((_QWORD *)&llvm::IRPosition::EmptyKey + 1);
  v6 = llvm::IRPosition::EmptyKey;
  v8 = *(unsigned int *)(result + 16);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD **)result;
    v10 = *(_QWORD *)result + 32 * v8;
    do
    {
      *v9 = -4096;
      v9[1] = v6;
      v9[2] = v7;
      v9 += 4;
    }
    while (v9 != (_QWORD *)v10);
    v7 = *((_QWORD *)&llvm::IRPosition::EmptyKey + 1);
  }
  if (a2 != a3)
  {
    v11 = llvm::IRPosition::TombstoneKey;
    do
    {
      if (*v4 == -8192)
      {
        if (v4[1] == (_QWORD)v11 && v4[2] == *((_QWORD *)&v11 + 1))
          goto LABEL_14;
      }
      else if (*v4 == -4096 && v4[1] == v6 && v4[2] == v7)
      {
        goto LABEL_14;
      }
      v15 = 0;
      result = sub_1C62860C0((uint64_t *)v5, (uint64_t)v4, &v15);
      v14 = v15;
      *v15 = *v4;
      *(_OWORD *)(v14 + 1) = *(_OWORD *)(v4 + 1);
      v14[3] = v4[3];
      ++*(_DWORD *)(v5 + 8);
LABEL_14:
      v4 += 4;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_1C6286490(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AAMemoryBehavior::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C62864FC(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AANoRecurse::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C6286568(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AAReachability::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C62865D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C6214EF4((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6286670(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_QWORD *)(result + 8) = a2[1];
    *(_BYTE *)(result + 16) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *sub_1C6286670(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    sub_1C5681B08(a1, v7);
    v9 = 0;
    sub_1C6214EF4((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096 || a4[1] != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C6286728(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = 24 * v6;
    v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *v7 = v9;
      v7 = (int64x2_t *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v10 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -4096 || v10 != -4096) && (*(_QWORD *)a2 != -8192 || v10 != -8192))
    {
      v12 = 0;
      result = sub_1C6214EF4((uint64_t *)v5, (_QWORD *)a2, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      v11[1] = *(_QWORD *)(a2 + 8);
      *((_BYTE *)v11 + 16) = *(_BYTE *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_1C6286800(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AAFunctionReachability::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

unint64_t sub_1C628686C(llvm::IRPosition *this, int a2)
{
  uint64_t AssociatedArgument;
  int v5;

  if (a2)
  {
    AssociatedArgument = llvm::IRPosition::getAssociatedArgument(this);
    if (AssociatedArgument)
      return *(unsigned int *)(AssociatedArgument + 32);
  }
  v5 = sub_1C6283CA4(this);
  if (v5 == 7)
    return ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL)
          - (*(_QWORD *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL) + 24)
           + 32 * -(*(_DWORD *)(*(_QWORD *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL) + 24) + 20) & 0x7FFFFFF))) >> 5;
  if (v5 == 6)
    return *(unsigned int *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL) + 32);
  return 0xFFFFFFFFLL;
}

BOOL sub_1C62868F4(uint64_t *a1, unint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BOOL8 result;
  unint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;

  v2 = *((_DWORD *)a1 + 4);
  if (!v2)
    return 0;
  v3 = *a1;
  v4 = v2 - 1;
  v5 = v4 & ((a2 >> 9) ^ (a2 | 4));
  v6 = *(_QWORD *)(*a1 + 8 * v5);
  if ((a2 | 4) == v6)
    return 1;
  v8 = a2 & 0xFFFFFFFFFFFFFFFBLL;
  v9 = 1;
  result = 1;
  while (v6 != -4)
  {
    v14 = v5 + v9++;
    v5 = v14 & v4;
    v6 = *(_QWORD *)(v3 + 8 * v5);
    if ((a2 | 4) == v6)
      return result;
  }
  v10 = v4 & ((a2 >> 9) ^ v8);
  v11 = *(_QWORD *)(v3 + 8 * v10);
  if (v8 == v11)
    return 1;
  v12 = 1;
  do
  {
    result = v11 != -4;
    if (v11 == -4)
      break;
    v13 = v10 + v12++;
    v10 = v13 & v4;
    v11 = *(_QWORD *)(v3 + 8 * v10);
  }
  while (v8 != v11);
  return result;
}

_QWORD *sub_1C62869A0(_QWORD *a1)
{
  sub_1C62869D8(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    MEMORY[0x1CAA32FB4](a1[1], 8);
  return a1;
}

_QWORD *sub_1C62869D8(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((*(_BYTE *)result & 1) != 0)
  {
    v9 = 4;
    v10 = 0;
    v11 = -4096;
    v6 = 4;
    v7 = 0;
    v2 = result + 1;
    v1 = 8;
    v8 = -8192;
  }
  else
  {
    v1 = *((unsigned int *)result + 4);
    if (!(_DWORD)v1)
      return result;
    v9 = 4;
    v10 = 0;
    v11 = -4096;
    v6 = 4;
    v7 = 0;
    v8 = -8192;
    v2 = (_QWORD *)result[1];
  }
  v3 = 24 * v1;
  do
  {
    v4 = v2[2];
    if (v4 != -8192 && v4 != -4096 && v4 != 0)
      result = llvm::ValueHandleBase::RemoveFromUseList(v2);
    v2 += 3;
    v3 -= 24;
  }
  while (v3);
  return result;
}

_QWORD *sub_1C6286AC4(_QWORD *a1)
{
  sub_1C6286AFC(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    MEMORY[0x1CAA32FB4](a1[1], 8);
  return a1;
}

_QWORD *sub_1C6286AFC(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((*(_BYTE *)result & 1) != 0)
  {
    v9 = 4;
    v10 = 0;
    v11 = -4096;
    v6 = 4;
    v7 = 0;
    v2 = result + 1;
    v1 = 16;
    v8 = -8192;
  }
  else
  {
    v1 = *((unsigned int *)result + 4);
    if (!(_DWORD)v1)
      return result;
    v9 = 4;
    v10 = 0;
    v11 = -4096;
    v6 = 4;
    v7 = 0;
    v8 = -8192;
    v2 = (_QWORD *)result[1];
  }
  v3 = 24 * v1;
  do
  {
    v4 = v2[2];
    if (v4 != -8192 && v4 != -4096 && v4 != 0)
      result = llvm::ValueHandleBase::RemoveFromUseList(v2);
    v2 += 3;
    v3 -= 24;
  }
  while (v3);
  return result;
}

_QWORD *sub_1C6286BE8(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C6286C1C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C6286C60(int a1, llvm::raw_ostream *a2)
{
  return sub_1C4816AD8(a2, "AADepNode Impl\n");
}

uint64_t *sub_1C6286C70(uint64_t *a1)
{
  uint64_t v2;
  void **v3;

  v2 = *a1;
  if ((*a1 & 2) != 0)
  {
    v3 = (void **)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v2 & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
      if (*v3 != v3 + 2)
        free(*v3);
      MEMORY[0x1CAA32FC0](v3, 0x1080C40ED926357);
    }
  }
  return a1;
}

unint64_t sub_1C6286CCC(_QWORD *a1)
{
  return *a1 & 0xFFFFFFFFFFFFFFF8;
}

uint64_t sub_1C6286CD8(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_1C5651150(a1, a2);
  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 32;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  if ((uint64_t *)(v4 + 16 * v5) == v3)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 520) + 24 * *((unsigned int *)v3 + 2) + 8);
}

uint64_t sub_1C6286D3C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned int v14;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v8 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = *(_QWORD *)(a2 + 16);
  v6 = v4 - 1;
  v7 = ((v5 >> 4) ^ (v5 >> 9)) & (v4 - 1);
  v8 = v3 + 24 * v7;
  v9 = *(_QWORD *)(v8 + 16);
  if (v5 == v9)
  {
    result = 1;
  }
  else
  {
    v11 = 0;
    v12 = 1;
    result = 1;
    while (v9 != -4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v9 == -8192;
      if (v13)
        v11 = v8;
      v14 = v7 + v12++;
      v7 = v14 & v6;
      v8 = v3 + 24 * (v14 & v6);
      v9 = *(_QWORD *)(v8 + 16);
      if (v5 == v9)
        goto LABEL_7;
    }
    result = 0;
    if (v11)
      v8 = v11;
  }
LABEL_7:
  *a3 = v8;
  return result;
}

void sub_1C6286DF4()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6286E08(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + 24);
}

uint64_t sub_1C6286E18(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + 32);
}

uint64_t sub_1C6286E28(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *__src, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 0x800000000;
  sub_1C486AF08((unsigned int *)(a1 + 24), __src, &__src[8 * a5]);
  v10 = *(_QWORD *)(a6 + 24);
  if (v10)
  {
    if (v10 == a6)
    {
      *(_QWORD *)(a1 + 128) = a1 + 104;
      (*(void (**)(_QWORD))(**(_QWORD **)(a6 + 24) + 24))(*(_QWORD *)(a6 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 128) = v10;
      *(_QWORD *)(a6 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 128) = 0;
  }
  v11 = *(_QWORD *)(a7 + 24);
  if (v11)
  {
    if (v11 == a7)
    {
      *(_QWORD *)(a1 + 160) = a1 + 136;
      (*(void (**)(_QWORD))(**(_QWORD **)(a7 + 24) + 24))(*(_QWORD *)(a7 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 160) = v11;
      *(_QWORD *)(a7 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 160) = 0;
  }
  return a1;
}

uint64_t sub_1C6286EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (**v9)(void);
  void (**v10)(void);
  void (**v11)(void);
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a2 + 272;
  *(_QWORD *)(a1 + 128) = a4;
  v19[0] = &off_1E81726F0;
  v19[1] = a3;
  v20 = v19;
  v17[0] = &off_1E8172738;
  v17[1] = a3;
  v18 = v17;
  v15[0] = &off_1E8172780;
  v15[1] = a3;
  v16 = v15;
  sub_1C61AA678(a1 + 136, 1, 1, 1, (uint64_t)v19, (uint64_t)v17, (uint64_t)v15);
  if (v16 == v15)
  {
    v9 = (void (**)(void))(v15[0] + 32);
  }
  else
  {
    if (!v16)
      goto LABEL_5;
    v9 = (void (**)(void))(*v16 + 40);
  }
  (*v9)();
LABEL_5:
  if (v18 == v17)
  {
    v10 = (void (**)(void))(v17[0] + 32);
  }
  else
  {
    if (!v18)
      goto LABEL_9;
    v10 = (void (**)(void))(*v18 + 40);
  }
  (*v10)();
LABEL_9:
  if (v20 == v19)
  {
    v11 = (void (**)(void))(v19[0] + 32);
  }
  else
  {
    if (!v20)
      goto LABEL_13;
    v11 = (void (**)(void))(*v20 + 40);
  }
  (*v11)();
LABEL_13:
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_QWORD *)(a1 + 440) = a3;
  *(_QWORD *)(a1 + 448) = a1 + 480;
  *(_QWORD *)(a1 + 456) = a1 + 480;
  *(_QWORD *)(a1 + 464) = 8;
  *(_DWORD *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_DWORD *)(a1 + 560) = 0;
  v14 = 260;
  v13[0] = a2 + 216;
  llvm::Triple::Triple(a1 + 568, (llvm::Twine *)v13);
  if (a5)
    sub_1C56821F4((llvm::SmallPtrSetImplBase *)a1, a5);
  return a1;
}

void sub_1C62870FC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6287110(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81726F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C6287144(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81726F0;
  a2[1] = v2;
  return result;
}

void sub_1C6287164()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6287178(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8172738;
  result[1] = v3;
  return result;
}

uint64_t sub_1C62871AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8172738;
  a2[1] = v2;
  return result;
}

void sub_1C62871CC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62871E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8172780;
  result[1] = v3;
  return result;
}

uint64_t sub_1C6287214(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8172780;
  a2[1] = v2;
  return result;
}

void sub_1C6287230(uint64_t a1, llvm::SmallPtrSetImplBase *a2, llvm::SmallPtrSetImplBase *a3, int a4)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  llvm::SmallPtrSetImplBase *v11[2];
  void *v12;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  v11[0] = a2;
  v11[1] = a3;
  v5 = *(_QWORD *)(a1 + 8);
  v12 = v14;
  v13 = 0x800000000;
  sub_1C6287358((unsigned int *)&v12, v5, (uint64_t)a3, 0);
  v6 = v13;
  if ((_DWORD)v13)
  {
    v7 = 0;
    do
    {
      v8 = *((_QWORD *)v12 + v7);
      if (a4 && (v9 = *(_QWORD *)(v8 + 24), *(_BYTE *)(v9 + 16) == 5))
      {
        for (i = *(_QWORD *)(v9 + 8); i; i = *(_QWORD *)(i + 8))
        {
          if (v6 >= HIDWORD(v13))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v12, (uint64_t)v14, v6 + 1, 8);
            v6 = v13;
          }
          *((_QWORD *)v12 + v6) = i;
          v6 = v13 + 1;
          LODWORD(v13) = v13 + 1;
        }
      }
      else
      {
        sub_1C5682614(v11, v8);
        v6 = v13;
      }
      ++v7;
    }
    while (v7 < v6);
  }
  if (v12 != v14)
    free(v12);
}

unsigned int *sub_1C6287358(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v5 = a2;
  v6 = result;
  if (a2 == a4)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = a2;
    do
    {
      ++v7;
      v8 = *(_QWORD *)(v8 + 8);
    }
    while (v8 != a4);
  }
  v9 = result[2];
  if (v7 + v9 > (unint64_t)result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v7 + v9, 8);
    v9 = v6[2];
  }
  if (v5 != a4)
  {
    v10 = (_QWORD *)(*(_QWORD *)v6 + 8 * v9);
    do
    {
      *v10++ = v5;
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != a4);
  }
  v6[2] = v9 + v7;
  return result;
}

BOOL sub_1C62873F8(uint64_t a1, llvm::GlobalValue *this)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  if (*((_BYTE *)this + 16))
  {
    if (*((_BYTE *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
      goto LABEL_8;
  }
  else if (*((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72)
         && (*((_BYTE *)this + 34) & 0x80) == 0)
  {
    goto LABEL_8;
  }
  if (((1 << (*((_DWORD *)this + 8) & 0xF)) & 0x7D5) != 0 && (llvm::GlobalValue::isInterposable(this) & 1) == 0)
    return 1;
LABEL_8:
  v4 = *(_QWORD *)(a1 + 88);
  v5 = sub_1C477672C(v4 + 448, (uint64_t)this);
  v6 = *(_QWORD *)(v4 + 456);
  v7 = 464;
  if (v6 == *(_QWORD *)(v4 + 448))
    v7 = 468;
  return v5 != (_QWORD *)(v6 + 8 * *(unsigned int *)(v4 + v7));
}

uint64_t sub_1C62874B8(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  int64x2_t *v6;
  uint64_t v7;
  int64x2_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int64x2_t v16;

  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (int64x2_t *)(a1 + 4632);
  v7 = *(_QWORD *)(a3 + 128);
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = a3;
  *(_QWORD *)(a1 + 96) = &unk_1E8172998;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 1;
  v8 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 120) = v8;
  *(int64x2_t *)(a1 + 136) = v8;
  *(int64x2_t *)(a1 + 152) = v8;
  *(int64x2_t *)(a1 + 168) = v8;
  *(_QWORD *)(a1 + 184) = a1 + 200;
  *(_QWORD *)(a1 + 192) = 0x800000000;
  *(_QWORD *)(a1 + 264) = a1 + 280;
  *(_QWORD *)(a1 + 272) = 0x1000000000;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 424) = 0;
  v9 = 440;
  *(_QWORD *)(a1 + 432) = 1;
  do
  {
    *(_QWORD *)(a1 + v9) = -4096;
    v9 += 16;
  }
  while (v9 != 952);
  *(_QWORD *)(a1 + 952) = a1 + 968;
  *(_QWORD *)(a1 + 960) = 0x2000000000;
  *(_QWORD *)(a1 + 1480) = 1;
  for (i = 1488; i != 2000; i += 16)
    *(_QWORD *)(a1 + i) = -4096;
  *(_QWORD *)(a1 + 2000) = a1 + 2016;
  *(_QWORD *)(a1 + 2008) = 0x2000000000;
  *(_DWORD *)(a1 + 2784) |= 1u;
  sub_1C6287710((int *)(a1 + 2784));
  *(_QWORD *)(a1 + 3176) = a1 + 3192;
  *(_QWORD *)(a1 + 3184) = 0x1000000000;
  *(_DWORD *)(a1 + 3576) |= 1u;
  sub_1C6287710((int *)(a1 + 3576));
  *(_QWORD *)(a1 + 3968) = a1 + 3984;
  *(_QWORD *)(a1 + 3976) = 0x1000000000;
  *(_QWORD *)(a1 + 4368) = 0;
  *(_QWORD *)(a1 + 4376) = a1 + 4408;
  *(_QWORD *)(a1 + 4384) = a1 + 4408;
  *(_QWORD *)(a1 + 4392) = 8;
  *(_DWORD *)(a1 + 4400) = 0;
  *(_QWORD *)(a1 + 4472) = 1;
  v16 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 4480) = v16;
  *(int64x2_t *)(a1 + 4496) = v16;
  *(int64x2_t *)(a1 + 4512) = v16;
  *(int64x2_t *)(a1 + 4528) = v16;
  *(_QWORD *)(a1 + 4544) = a1 + 4560;
  *(_QWORD *)(a1 + 4552) = 0x800000000;
  *(_QWORD *)(a1 + 4624) = 1;
  *v6 = v16;
  v6[1] = v16;
  v6[2] = v16;
  v6[3] = v16;
  *(_QWORD *)(a1 + 4696) = a1 + 4712;
  *(_QWORD *)(a1 + 4704) = 0x800000000;
  *(_DWORD *)(a1 + 4776) |= 1u;
  sub_1C6287760((int *)(a1 + 4776));
  v11 = 0;
  *(_QWORD *)(a1 + 4976) = a1 + 4992;
  *(_QWORD *)(a1 + 4984) = 0x800000000;
  *(_QWORD *)(a1 + 5184) = 1;
  do
  {
    *(int64x2_t *)(a1 + 5192 + v11) = v16;
    v11 += 16;
  }
  while (v11 != 128);
  *(_QWORD *)(a1 + 5320) = a1 + 5336;
  *(_QWORD *)(a1 + 5328) = 0x1000000000;
  v12 = *a4;
  v13 = a4[1];
  v14 = a4[2];
  *(_QWORD *)(a1 + 5512) = *((_QWORD *)a4 + 6);
  *(_OWORD *)(a1 + 5480) = v13;
  *(_OWORD *)(a1 + 5496) = v14;
  *(_OWORD *)(a1 + 5464) = v12;
  return a1;
}

int *sub_1C6287710(int *result)
{
  int v1;
  unsigned int v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = *result;
  *(_QWORD *)result = *result & 1;
  if ((v1 & 1) != 0)
  {
    v3 = result + 2;
    v4 = result + 98;
  }
  else
  {
    v2 = result[4];
    if (!v2)
      return result;
    v3 = (_QWORD *)*((_QWORD *)result + 1);
    v4 = &v3[3 * v2];
  }
  do
  {
    *v3 = 4;
    v3[1] = 0;
    v3[2] = -4096;
    v3 += 3;
  }
  while (v3 != v4);
  return result;
}

int *sub_1C6287760(int *result)
{
  int v1;
  unsigned int v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = *result;
  *(_QWORD *)result = *result & 1;
  if ((v1 & 1) != 0)
  {
    v3 = result + 2;
    v4 = result + 50;
  }
  else
  {
    v2 = result[4];
    if (!v2)
      return result;
    v3 = (_QWORD *)*((_QWORD *)result + 1);
    v4 = &v3[3 * v2];
  }
  do
  {
    *v3 = 4;
    v3[1] = 0;
    v3[2] = -4096;
    v3 += 3;
  }
  while (v3 != v4);
  return result;
}

_QWORD *sub_1C62877B0(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  _QWORD *result;
  int v5;
  _QWORD *v6;

  if (a2 <= 0x10)
  {
    *a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    v3 = a2;
    result = operator new(8 * a2, (std::align_val_t)8uLL);
    a1[1] = result;
    a1[2] = v3;
    v5 = *(_DWORD *)a1;
    *a1 = *(_DWORD *)a1 & 1;
    if ((v5 & 1) == 0)
    {
      v6 = &result[v3];
      goto LABEL_6;
    }
  }
  result = a1 + 1;
  v6 = a1 + 17;
  do
LABEL_6:
    *result++ = -4096;
  while (result != v6);
  return result;
}

uint64_t sub_1C6287830(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;

  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD *)result + 40 * v1;
    v3 = (_QWORD *)(*(_QWORD *)result + 16);
    do
    {
      v5 = v3 - 2;
      v4 = *(v3 - 2);
      v6 = *((_DWORD *)v3 - 2);
      if ((v4 != -4096 || v6 != 82) && (v4 != -8192 || v6 != 83))
        result = MEMORY[0x1CAA32FB4](*v3, 8);
      v3 += 5;
    }
    while (v5 + 5 != (_QWORD *)v2);
  }
  return result;
}

llvm::CallGraphUpdater *sub_1C62878B8(llvm::CallGraphUpdater *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  llvm::CallGraphUpdater::finalize(a1);
  v2 = (_QWORD *)*((_QWORD *)a1 + 38);
  if (v2 != (_QWORD *)((char *)a1 + 320))
    free(v2);
  v3 = (_QWORD *)*((_QWORD *)a1 + 20);
  if (v3 != (_QWORD *)((char *)a1 + 176))
    free(v3);
  v4 = (void *)*((_QWORD *)a1 + 1);
  if (v4 != *(void **)a1)
    free(v4);
  return a1;
}

char **sub_1C6287914(char **result)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;

  v1 = *((unsigned int *)result + 4);
  if ((_DWORD)v1)
  {
    v2 = llvm::IRPosition::EmptyKey;
    v3 = llvm::IRPosition::TombstoneKey;
    v4 = &(*result)[64 * v1];
    result = (char **)(*result + 16);
    do
    {
      v5 = (uint64_t)*(result - 2);
      v6 = (uint64_t)*(result - 1);
      v7 = result - 2;
      if ((v5 != (_QWORD)v2 || v6 != *((_QWORD *)&v2 + 1)) && (v5 != (_QWORD)v3 || v6 != *((_QWORD *)&v3 + 1)))
        result = sub_1C62884A4(result);
      result += 8;
    }
    while (v7 + 8 != (char **)v4);
  }
  return result;
}

char **sub_1C62879A4(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      v6 = *(_QWORD **)&v5[v4];
      *(_QWORD *)&v5[v4] = 0;
      if (v6)
      {
        v7 = sub_1C6288F00(v6);
        MEMORY[0x1CAA32FC0](v7, 0x10E0C40D6C35413);
      }
      v4 -= 8;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

unint64_t sub_1C6287A28@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  unint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t *v14;

  v14 = 0;
  result = sub_1C6287AEC(a1, (uint64_t)a2, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v8 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v9 = 16;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(_DWORD *)(a1 + 16);
    }
    v10 = 0;
    v11 = v8 + 24 * v9;
  }
  else
  {
    v7 = (unint64_t *)sub_1C6287BA4((_DWORD *)a1, (uint64_t)a2, (uint64_t)a2, (uint64_t)v14);
    result = sub_1C4D98DE0(v7, a2);
    v12 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v13 = 16;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(_DWORD *)(a1 + 16);
    }
    v11 = v12 + 24 * v13;
    v10 = 1;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 16) = v10;
  return result;
}

uint64_t sub_1C6287AEC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned int v14;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v8 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = *(_QWORD *)(a2 + 16);
  v6 = v4 - 1;
  v7 = ((v5 >> 4) ^ (v5 >> 9)) & (v4 - 1);
  v8 = v3 + 24 * v7;
  v9 = *(_QWORD *)(v8 + 16);
  if (v5 == v9)
  {
    result = 1;
  }
  else
  {
    v11 = 0;
    v12 = 1;
    result = 1;
    while (v9 != -4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v9 == -8192;
      if (v13)
        v11 = v8;
      v14 = v7 + v12++;
      v7 = v14 & v6;
      v8 = v3 + 24 * (v14 & v6);
      v9 = *(_QWORD *)(v8 + 16);
      if (v5 == v9)
        goto LABEL_7;
    }
    result = 0;
    if (v11)
      v8 = v11;
  }
LABEL_7:
  *a3 = v8;
  return result;
}

uint64_t sub_1C6287BA4(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  uint64_t v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 16;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C5682C68((uint64_t)a1, v7);
  v9 = 0;
  sub_1C6287AEC((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*(_QWORD *)(a4 + 16) != -4096)
    --a1[1];
  return a4;
}

unint64_t sub_1C6287C60(int *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t result;
  uint64_t v7;
  unint64_t *v9;

  result = (unint64_t)sub_1C6287710(a1);
  while (a2 != a3)
  {
    v7 = a2[2];
    if ((v7 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      sub_1C6287AEC((uint64_t)a1, (uint64_t)a2, &v9);
      result = sub_1C4D98DE0(v9, a2);
      *a1 += 2;
      v7 = a2[2];
    }
    if (v7 != -8192 && v7 != -4096 && v7 != 0)
      result = (unint64_t)llvm::ValueHandleBase::RemoveFromUseList(a2);
    a2 += 3;
  }
  return result;
}

uint64_t sub_1C6287D08(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C5682FF4((uint64_t)v5, a2, &v10);
      *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

void sub_1C6287DC4(_WORD *a1, __int128 *a2, _DWORD **a3, int **a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED8094C8, 0, 0);
  byte_1ED80955C = 0;
  qword_1ED809548 = 0;
  unk_1ED809550 = &off_1E7F952A8;
  qword_1ED8094C8 = (uint64_t)&unk_1E8138D38;
  qword_1ED809560 = (uint64_t)&unk_1E819E2C0;
  qword_1ED809568 = (uint64_t)&unk_1E8138DA0;
  qword_1ED809580 = (uint64_t)&qword_1ED809568;
  sub_1C6287E78(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED8094C8);
}

uint64_t sub_1C6287E78(_WORD *a1, __int128 *a2, _DWORD **a3, int **a4)
{
  uint64_t result;
  int v9;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED8094C8, "attributor-max-initialization-chain-length", 0x2AuLL);
  word_1ED8094D2 = (32 * (*a1 & 3)) | word_1ED8094D2 & 0xFF9F;
  xmmword_1ED8094E8 = *a2;
  result = sub_1C4EA2D4C((uint64_t)&qword_1ED809548, &qword_1ED8094C8, *a3);
  v9 = **a4;
  *(_DWORD *)qword_1ED809548 = v9;
  byte_1ED80955C = 1;
  dword_1ED809558 = v9;
  return result;
}

void sub_1C6287F18(char **a1, _WORD *a2)
{
  uint64_t v4;
  char *v5;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED809708, 0, 0);
  byte_1ED809788 = 0;
  qword_1ED809790 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED809798 = 0;
  qword_1ED809708 = (uint64_t)&unk_1E819E898;
  qword_1ED8097A0 = (uint64_t)&off_1E819E9A0;
  qword_1ED8097A8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED8097C0 = (uint64_t)&qword_1ED8097A8;
  llvm::cl::Option::setArgStr(v4, "enable-heap-to-stack-conversion", 0x1FuLL);
  v5 = *a1;
  byte_1ED809788 = **a1;
  byte_1ED809799 = 1;
  byte_1ED809798 = *v5;
  word_1ED809712 = (32 * (*a2 & 3)) | word_1ED809712 & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED809708);
}

void sub_1C6287FEC(_WORD *a1, __n128 *a2, char **a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED831BA0, 0, 0);
  byte_1ED831C20 = 0;
  qword_1ED831C28 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED831C30 = 0;
  qword_1ED831BA0 = (uint64_t)&unk_1E819E898;
  qword_1ED831C38 = (uint64_t)&off_1E819E9A0;
  qword_1ED831C40 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED831C58 = (uint64_t)&qword_1ED831C40;
  sub_1C56832C0(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED831BA0);
}

void sub_1C6288090(_WORD *a1, __n128 *a2, char **a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED831C60, 0, 0);
  byte_1ED831CE0 = 0;
  qword_1ED831CE8 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED831CF0 = 0;
  qword_1ED831C60 = (uint64_t)&unk_1E819E898;
  qword_1ED831CF8 = (uint64_t)&off_1E819E9A0;
  qword_1ED831D00 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED831D18 = (uint64_t)&qword_1ED831D00;
  sub_1C5683344(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED831C60);
}

uint64_t sub_1C6288134(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AANoSync::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C62881A0(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AAInstanceInfo::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

void *sub_1C628820C(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;

  if (a2 != a3)
  {
    v12 = v3;
    v13 = v4;
    v6 = a2;
    v7 = (uint64_t)result;
    v8 = (uint64_t)result + 40;
    do
    {
      result = sub_1C56843D8((uint64_t)v11, v7, v6);
      if (v11[16])
      {
        v9 = *v6;
        v10 = *(unsigned int *)(v7 + 48);
        if (v10 >= *(unsigned int *)(v7 + 52))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod(v8, v7 + 56, v10 + 1, 8);
          v10 = *(unsigned int *)(v7 + 48);
        }
        *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8 * v10) = v9;
        ++*(_DWORD *)(v7 + 48);
      }
      ++v6;
    }
    while (v6 != a3);
  }
  return result;
}

void *sub_1C62882B8(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE v11[31];
  uint64_t v12;
  uint64_t v13;

  if (a2 != a3)
  {
    v12 = v3;
    v13 = v4;
    v6 = a2;
    v7 = (uint64_t)result;
    v8 = (uint64_t)result + 40;
    do
    {
      result = sub_1C6280748(v7, v6, (uint64_t)v11);
      if (v11[16])
      {
        v9 = *v6;
        v10 = *(unsigned int *)(v7 + 48);
        if (v10 >= *(unsigned int *)(v7 + 52))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod(v8, v7 + 56, v10 + 1, 8);
          v10 = *(unsigned int *)(v7 + 48);
        }
        *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8 * v10) = v9;
        ++*(_DWORD *)(v7 + 48);
      }
      ++v6;
    }
    while (v6 != a3);
  }
  return result;
}

uint64_t sub_1C6288368(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AAPointerInfo::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C62883D4(uint64_t *a1, uint64_t *a2, unint64_t **a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v13;
  int v14;
  uint64_t result;
  BOOL v16;
  int v18;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v6 = a2[1];
    v7 = v3 - 1;
    v8 = ((v6 >> 4) ^ (v6 >> 9) ^ (*a2 ^ (*a2 >> 5)) & 0xFFFFFFF0) & (v3 - 1);
    v9 = (unint64_t *)(*a1 + (v8 << 6));
    v10 = *v9;
    v11 = v9[1];
    if (v5 == *v9 && v11 == v6)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (__PAIR128__(v11, v10) != llvm::IRPosition::EmptyKey)
      {
        if (v13)
          v16 = 0;
        else
          v16 = v11 == *((_QWORD *)&llvm::IRPosition::TombstoneKey + 1);
        if (v16 && v10 == (_QWORD)llvm::IRPosition::TombstoneKey)
          v13 = v9;
        v18 = v8 + v14++;
        v8 = v18 & v7;
        v9 = (unint64_t *)(v4 + (v8 << 6));
        v10 = *v9;
        v11 = v9[1];
        if (v5 == *v9 && v11 == v6)
          goto LABEL_8;
      }
      result = 0;
      if (v13)
        v9 = v13;
    }
  }
  else
  {
    v9 = 0;
    result = 0;
  }
LABEL_8:
  *a3 = v9;
  return result;
}

char **sub_1C62884A4(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 32 * v3;
    while (1)
    {
      v5 = *(char **)&v2[v4 - 8];
      if (&v2[v4 - 32] == v5)
        break;
      if (v5)
      {
        v6 = 5;
LABEL_7:
        (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
      }
      v4 -= 32;
      if (!v4)
      {
        v2 = *a1;
        goto LABEL_10;
      }
    }
    v5 = &v2[v4 - 32];
    v6 = 4;
    goto LABEL_7;
  }
LABEL_10:
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C6288530(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AAValueSimplify::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C628859C(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AAIsDead::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

unsigned int *sub_1C6288608(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = a2;
  v3 = result;
  v4 = 0;
  if (a2)
  {
    v5 = a2;
    do
    {
      ++v4;
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5);
  }
  v6 = result[2];
  if (v4 + v6 > (unint64_t)result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v4 + v6, 8);
    v6 = v3[2];
  }
  if (v2)
  {
    v7 = (_QWORD *)(*(_QWORD *)v3 + 8 * v6);
    do
    {
      *v7++ = v2;
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2);
  }
  v3[2] = v6 + v4;
  return result;
}

uint64_t sub_1C628868C(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AAReturnedValues::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

_QWORD *sub_1C62886F8(_QWORD *result)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if ((v1 & 1) != 0)
    {
      v3 = result + 1;
      v4 = result + 17;
    }
    else
    {
      v2 = *((unsigned int *)result + 4);
      if (((2 * v1) & 0xFFFFFFFC) < v2 && v2 >= 0x41)
        return sub_1C6288770(result);
      if (!(_DWORD)v2)
      {
        v5 = 0;
LABEL_11:
        *(_DWORD *)result = v5;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      v3 = (_QWORD *)result[1];
      v4 = &v3[v2];
    }
    do
      *v3++ = -4096;
    while (v3 != v4);
    v5 = *(_DWORD *)result & 1;
    goto LABEL_11;
  }
  return result;
}

_QWORD *sub_1C6288770(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 == 28)
    v4 = 64;
  else
    v4 = 1 << (33 - v3);
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 0x11)
  {
    v6 = result + 1;
    *result = 1;
    v7 = result + 17;
    goto LABEL_10;
  }
  if ((v2 & 1) != 0)
    return sub_1C62877B0(v1, v5);
  if (v5 != *((_DWORD *)result + 4))
  {
    MEMORY[0x1CAA32FB4](result[1], 8);
    return sub_1C62877B0(v1, v5);
  }
  *result = 0;
  if (!v5)
    return result;
  v6 = (_QWORD *)result[1];
  v7 = &v6[v5];
  do
LABEL_10:
    *v6++ = -4096;
  while (v6 != v7);
  return result;
}

char **sub_1C6288830(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    do
    {
      v5 = *(_QWORD *)&v2[v4 - 8];
      if (v5 != -8192 && v5 != -4096 && v5 != 0)
        llvm::ValueHandleBase::RemoveFromUseList(&v2[v4 - 24]);
      v4 -= 24;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C62888B0()
{
  return 1;
}

unint64_t *sub_1C62888B8(uint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;

  v5 = *a1;
  v6 = *((_DWORD *)a1 + 2);
  v7 = *a1 + 24 * v6;
  if ((uint64_t *)v7 == a3)
  {
    v9 = a2;
  }
  else
  {
    v8 = a3;
    v9 = a2;
    do
    {
      sub_1C4D98DE0(v9, v8);
      v8 += 3;
      v9 += 3;
    }
    while (v8 != (uint64_t *)v7);
    v5 = *a1;
    v6 = *((_DWORD *)a1 + 2);
  }
  v10 = (unint64_t *)(v5 + 24 * v6);
  if (v10 != v9)
  {
    do
    {
      v11 = *(v10 - 1);
      v10 -= 3;
      if (v11 != -8192 && v11 != -4096 && v11 != 0)
        llvm::ValueHandleBase::RemoveFromUseList(v10);
    }
    while (v10 != v9);
    v5 = *a1;
  }
  *((_DWORD *)a1 + 2) = -1431655765 * (((unint64_t)v9 - v5) >> 3);
  return a2;
}

llvm::SmallPtrSetImplBase *sub_1C6288990(llvm::SmallPtrSetImplBase *this, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = (char *)this + 32;
  *((_QWORD *)this + 1) = (char *)this + 32;
  *((_QWORD *)this + 2) = 2;
  *((_DWORD *)this + 6) = 0;
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      v6 = *a2++;
      sub_1C4774094(this, v6);
      v5 -= 8;
    }
    while (v5);
  }
  return this;
}

_QWORD *sub_1C62889F0(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C61DE1A0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6288A68(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x800000000;
  }
  return v5;
}

_QWORD *sub_1C6288A68(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5685160(a1, v6);
  v8 = 0;
  sub_1C61DE1A0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

char **sub_1C6288B18(char **result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char **v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char **v11;
  _QWORD *v12;

  v4 = a2;
  v5 = result;
  result[1] = 0;
  v6 = *((_DWORD *)result + 4);
  if (v6)
  {
    v7 = *result;
    v8 = 88 * v6;
    do
    {
      *(_QWORD *)v7 = -4096;
      v7 += 88;
      v8 -= 88;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v12 = 0;
        sub_1C61DE1A0((uint64_t)*v5, *((_DWORD *)v5 + 4), v9, &v12);
        v10 = v12;
        *v12 = *(_QWORD *)v4;
        v10[2] = 0x800000000;
        v10[1] = v10 + 3;
        v11 = (char **)(v10 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_1C5685224(v11, v4 + 8);
        ++*((_DWORD *)v5 + 2);
        result = sub_1C62879A4((char **)(v4 + 8));
      }
      v4 += 88;
    }
    while (v4 != a3);
  }
  return result;
}

double sub_1C6288C04(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = v4 - 8;
    do
    {
      v8 = *(_QWORD **)&v7[v6];
      *(_QWORD *)&v7[v6] = 0;
      if (v8)
      {
        v9 = sub_1C6288F00(v8);
        MEMORY[0x1CAA32FC0](v9, 0x10E0C40D6C35413);
      }
      v6 -= 8;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

uint64_t sub_1C6288CA0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = result;
  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v3 = 8 * v2;
    v4 = *(_QWORD *)result - 8;
    do
    {
      result = *(_QWORD *)(v4 + v3);
      *(_QWORD *)(v4 + v3) = 0;
      if (result)
      {
        v5 = sub_1C6288F00((_QWORD *)result);
        result = MEMORY[0x1CAA32FC0](v5, 0x10E0C40D6C35413);
      }
      v3 -= 8;
    }
    while (v3);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

void sub_1C6288D10(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 8, &v5);
  sub_1C6288D7C(a1, v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

uint64_t sub_1C6288D7C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)result;
    v4 = 8 * v2;
    v5 = 8 * v2;
    do
    {
      v6 = *v3;
      *v3++ = 0;
      *a2++ = v6;
      v5 -= 8;
    }
    while (v5);
    v7 = *(_QWORD *)result - 8;
    do
    {
      result = *(_QWORD *)(v7 + v4);
      *(_QWORD *)(v7 + v4) = 0;
      if (result)
      {
        v8 = sub_1C6288F00((_QWORD *)result);
        result = MEMORY[0x1CAA32FC0](v8, 0x10E0C40D6C35413);
      }
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

void sub_1C6288DF8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      sub_1C6288E7C(a1, a2);
    }
    else
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_1C6288D10(a1, a2);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2)
        bzero((void *)(*(_QWORD *)a1 + 8 * v2), 8 * (a2 - v2));
      *(_DWORD *)(a1 + 8) = a2;
    }
  }
}

uint64_t sub_1C6288E7C(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;

  v2 = a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if (v4 != a2)
  {
    v5 = 8 * a2 - 8 * v4;
    v6 = (uint64_t *)(*(_QWORD *)result + 8 * v4 - 8);
    do
    {
      result = *v6;
      *v6 = 0;
      if (result)
      {
        v7 = sub_1C6288F00((_QWORD *)result);
        result = MEMORY[0x1CAA32FC0](v7, 0x10E0C40D6C35413);
      }
      --v6;
      v5 += 8;
    }
    while (v5);
  }
  *(_DWORD *)(v3 + 8) = v2;
  return result;
}

_QWORD *sub_1C6288F00(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = a1 + 17;
  v3 = (_QWORD *)a1[20];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[16];
  if (v5 == a1 + 13)
  {
    v6 = 4;
    v5 = a1 + 13;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[3];
  if (v7 != a1 + 5)
    free(v7);
  return a1;
}

uint64_t sub_1C6288F94@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C6289018((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C62890B4(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C6289018(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 8 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 8 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_8;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C62890B4(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_1C56853E8(a1, v7);
    v9 = 0;
    sub_1C6289018((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C6289164(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C6289018((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C6289210@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C4A06ED8((uint64_t)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C618803C(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * a1[4];
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C6289294(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AAWillReturn::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C6289300(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AAUndefinedBehavior::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C628936C(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AANoUnwind::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C62893D8(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AANoFree::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C6289444(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AANoReturn::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C62894B0(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AAAssumptionInfo::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C628951C(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AAHeapToStack::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C6289588(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AANoUndef::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C62895F4(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AAAlign::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C6289660(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AANonNull::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C62896CC(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AANoAlias::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C6289738(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AADereferenceable::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C62897A4(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AANoCapture::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C6289810(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AAPrivatizablePtr::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t llvm::clampStateAndIndicateChange<llvm::DerefState>(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;

  v4 = *(_DWORD *)(a1 + 20);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8, *(unsigned int *)(a2 + 20));
  v5 = *(_DWORD *)(a1 + 20);
  v7 = *(_QWORD *)(a1 + 48);
  v6 = a1 + 48;
  v8 = *(_BYTE *)(v6 + 9) == 0;
  (*(void (**)(uint64_t, _QWORD))(v7 + 48))(v6, *(unsigned __int8 *)(a2 + 57));
  if (v4 == v5)
    return v8 ^ (*(_BYTE *)(v6 + 9) != 0);
  else
    return 0;
}

char *llvm::AACallEdgeIterator::operator*(uint64_t a1)
{
  return (char *)sub_1C5692210(*(_QWORD *)(a1 + 8), **(_QWORD **)a1, 0, 0, 2) + 48;
}

llvm::raw_ostream *llvm::AttributorCallGraph::print(llvm::AttributorCallGraph *this)
{
  llvm::raw_ostream *v2;
  _WORD v4[20];
  llvm::AttributorCallGraph *v5;

  v2 = (llvm::raw_ostream *)llvm::outs(this);
  v5 = this;
  v4[16] = 257;
  return sub_1C568BB40(v2, (uint64_t)&v5, (llvm::Twine *)v4);
}

unint64_t llvm::AANoUnwind::createForPosition(llvm::AANoUnwind *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  int v5;
  unint64_t result;
  uint64_t (**v7)();

  v5 = sub_1C6283CA4(this);
  if (v5 == 5)
  {
    result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    v7 = &off_1E8172B48;
    goto LABEL_5;
  }
  if (v5 == 4)
  {
    result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    v7 = &off_1E8172A00;
LABEL_5:
    *(_QWORD *)result = v7;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 32) = v7 + 17;
    return result;
  }
  return 0;
}

unint64_t llvm::AANoSync::createForPosition(llvm::AANoSync *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  int v5;
  unint64_t result;
  uint64_t (**v7)();

  v5 = sub_1C6283CA4(this);
  if (v5 == 5)
  {
    result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    v7 = &off_1E8172D18;
    goto LABEL_5;
  }
  if (v5 == 4)
  {
    result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    v7 = &off_1E8172C30;
LABEL_5:
    *(_QWORD *)result = v7;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 32) = v7 + 17;
    return result;
  }
  return 0;
}

unint64_t llvm::AANoRecurse::createForPosition(llvm::AANoRecurse *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  int v5;
  unint64_t result;
  uint64_t (**v7)();

  v5 = sub_1C6283CA4(this);
  if (v5 == 5)
  {
    result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    v7 = &off_1E8172EE8;
    goto LABEL_5;
  }
  if (v5 == 4)
  {
    result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    v7 = &off_1E8172E00;
LABEL_5:
    *(_QWORD *)result = v7;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 32) = v7 + 17;
    return result;
  }
  return 0;
}

unint64_t llvm::AAWillReturn::createForPosition(llvm::AAWillReturn *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  int v5;
  unint64_t result;
  uint64_t (**v7)();

  v5 = sub_1C6283CA4(this);
  if (v5 == 5)
  {
    result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    v7 = &off_1E81730B8;
    goto LABEL_5;
  }
  if (v5 == 4)
  {
    result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    v7 = &off_1E8172FD0;
LABEL_5:
    *(_QWORD *)result = v7;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 32) = v7 + 17;
    return result;
  }
  return 0;
}

unint64_t llvm::AANoReturn::createForPosition(llvm::AANoReturn *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  int v5;
  unint64_t result;
  uint64_t (**v7)();

  v5 = sub_1C6283CA4(this);
  if (v5 == 5)
  {
    result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    v7 = &off_1E8173288;
    goto LABEL_5;
  }
  if (v5 == 4)
  {
    result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    v7 = &off_1E81731A0;
LABEL_5:
    *(_QWORD *)result = v7;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 32) = v7 + 17;
    return result;
  }
  return 0;
}

unint64_t llvm::AAReturnedValues::createForPosition(llvm::AAReturnedValues *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  int v5;
  unint64_t result;
  uint64_t (**v7)();

  v5 = sub_1C6283CA4(this);
  if (v5 == 5)
  {
    result = sub_1C484358C(*((_QWORD *)a2 + 3), 96, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_DWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_WORD *)(result + 88) = 256;
    *(_QWORD *)(result + 80) = 0;
    v7 = &off_1E8173580;
    goto LABEL_5;
  }
  if (v5 == 4)
  {
    result = sub_1C484358C(*((_QWORD *)a2 + 3), 96, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_DWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_WORD *)(result + 88) = 256;
    *(_QWORD *)(result + 80) = 0;
    v7 = &off_1E8173370;
LABEL_5:
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)result = v7;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 32) = v7 + 25;
    *(_QWORD *)(result + 40) = 0;
    return result;
  }
  return 0;
}

unint64_t llvm::AACallEdges::createForPosition(llvm::AACallEdges *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  int v5;
  unint64_t result;
  __int128 v7;
  uint64_t (**v8)();

  v5 = sub_1C6283CA4(this);
  if (v5 == 5)
  {
    result = sub_1C484358C(*((_QWORD *)a2 + 3), 120, 3);
    v7 = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    v8 = &off_1E8173C40;
    goto LABEL_5;
  }
  if (v5 == 4)
  {
    result = sub_1C484358C(*((_QWORD *)a2 + 3), 120, 3);
    v7 = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    v8 = &off_1E81739D0;
LABEL_5:
    *(_QWORD *)(result + 32) = v8 + 21;
    *(_OWORD *)(result + 16) = v7;
    *(_DWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_WORD *)(result + 112) = 0;
    *(_QWORD *)(result + 96) = 0;
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)result = v8;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 48) = v8 + 33;
    *(_QWORD *)(result + 56) = a2;
    return result;
  }
  return 0;
}

_QWORD *llvm::AAAssumptionInfo::createForPosition(llvm::AAAssumptionInfo *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  int v5;
  _QWORD *v6;
  llvm *v8;
  void *v9;
  llvm *v10;
  llvm *v11;
  llvm *v12;
  _QWORD v13[3];
  _QWORD v14[3];

  v5 = sub_1C6283CA4(this);
  if (v5 == 5)
  {
    v6 = (_QWORD *)sub_1C484358C(*((_QWORD *)a2 + 3), 112, 3);
    *v6 = &off_1E81740D0;
    v6[4] = &unk_1E8174158;
    v10 = (llvm *)sub_1C6284150(this);
    llvm::getAssumptions(v10, (unint64_t)v13);
    v11 = (llvm *)sub_1C5676C10(this);
    if (v11)
    {
      llvm::getAssumptions(v11, (unint64_t)v14);
      sub_1C5324B90((unint64_t)v13, (uint64_t)v14);
      MEMORY[0x1CAA32FB4](v14[0], 8);
    }
    v12 = (llvm *)sub_1C5676C10(this);
    if (v12)
    {
      llvm::getAssumptions(v12, (unint64_t)v14);
      sub_1C5324B90((unint64_t)v13, (uint64_t)v14);
      MEMORY[0x1CAA32FB4](v14[0], 8);
    }
    sub_1C628CD58((uint64_t)v6, this, (uint64_t)a2, (uint64_t)v13);
    *v6 = off_1E8173E40;
    v6[4] = &unk_1E8173EC8;
    MEMORY[0x1CAA32FB4](v13[0], 8);
    *v6 = &off_1E81740D0;
    v9 = &unk_1E8174158;
    goto LABEL_11;
  }
  if (v5 == 4)
  {
    v6 = (_QWORD *)sub_1C484358C(*((_QWORD *)a2 + 3), 112, 3);
    v8 = (llvm *)sub_1C5676C10(this);
    llvm::getAssumptions(v8, (unint64_t)v14);
    sub_1C628CD58((uint64_t)v6, this, (uint64_t)a2, (uint64_t)v14);
    *v6 = off_1E8173E40;
    v6[4] = &unk_1E8173EC8;
    MEMORY[0x1CAA32FB4](v14[0], 8);
    *v6 = &off_1E8173D78;
    v9 = &unk_1E8173E00;
LABEL_11:
    v6[4] = v9;
    return v6;
  }
  return 0;
}

uint64_t llvm::AANonNull::createForPosition(llvm::AANonNull *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  int v5;
  uint64_t result;
  unint64_t v7;
  uint64_t (**v8)();
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v5 = sub_1C6283CA4(this);
  result = 0;
  switch(v5)
  {
    case 1:
      v7 = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      result = sub_1C5694350(v7, this);
      v8 = &off_1E8174198;
      goto LABEL_7;
    case 2:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      v8 = &off_1E8174450;
      *(_QWORD *)(result + 8) = 0;
      goto LABEL_7;
    case 3:
      v9 = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      result = sub_1C5694350(v9, this);
      v8 = &off_1E8174538;
      goto LABEL_7;
    case 6:
      v10 = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      result = sub_1C5694350(v10, this);
      v8 = &off_1E8174368;
      goto LABEL_7;
    case 7:
      v11 = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      result = sub_1C5694350(v11, this);
      v8 = &off_1E8174620;
LABEL_7:
      *(_QWORD *)result = v8;
      *(_QWORD *)(result + 32) = v8 + 17;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t llvm::AANoAlias::createForPosition(llvm::AANoAlias *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  int v5;
  unint64_t result;
  uint64_t (**v7)();

  v5 = sub_1C6283CA4(this);
  result = 0;
  switch(v5)
  {
    case 1:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      v7 = &off_1E8174708;
      goto LABEL_7;
    case 2:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      v7 = &off_1E81748D8;
      goto LABEL_7;
    case 3:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      v7 = &off_1E81749C0;
      goto LABEL_7;
    case 6:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      v7 = &off_1E81747F0;
      goto LABEL_7;
    case 7:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      v7 = &off_1E8174AA8;
LABEL_7:
      *(_QWORD *)result = v7;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 32) = v7 + 17;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t llvm::AAPrivatizablePtr::createForPosition(llvm::AAPrivatizablePtr *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  int v5;
  unint64_t result;
  uint64_t (**v7)();

  v5 = sub_1C6283CA4(this);
  result = 0;
  switch(v5)
  {
    case 1:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 64, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(_BYTE *)(result + 48) = 0;
      *(_BYTE *)(result + 56) = 0;
      v7 = &off_1E8174B90;
      goto LABEL_7;
    case 2:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 64, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(_BYTE *)(result + 48) = 0;
      *(_BYTE *)(result + 56) = 0;
      v7 = &off_1E8174E10;
      goto LABEL_7;
    case 3:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 64, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(_BYTE *)(result + 48) = 0;
      *(_BYTE *)(result + 56) = 0;
      v7 = &off_1E8174F08;
      goto LABEL_7;
    case 6:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 64, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(_BYTE *)(result + 48) = 0;
      *(_BYTE *)(result + 56) = 0;
      v7 = &off_1E8174C88;
      goto LABEL_7;
    case 7:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 64, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(_BYTE *)(result + 48) = 0;
      *(_BYTE *)(result + 56) = 0;
      v7 = &off_1E8175000;
LABEL_7:
      *(_QWORD *)result = v7;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 32) = v7 + 19;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t llvm::AADereferenceable::createForPosition(llvm::AADereferenceable *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  int v5;
  unint64_t result;
  uint64_t (**v7)();

  v5 = sub_1C6283CA4(this);
  result = 0;
  switch(v5)
  {
    case 1:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 104, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_QWORD *)(result + 64) = 0;
      *(_QWORD *)(result + 56) = result + 64;
      *(_QWORD *)(result + 48) = 0xFFFFFFFF00000000;
      *(_QWORD *)(result + 72) = 0;
      *(_QWORD *)(result + 80) = &off_1E8172AE8;
      v7 = &off_1E81750F8;
      goto LABEL_7;
    case 2:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 104, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_QWORD *)(result + 64) = 0;
      *(_QWORD *)(result + 56) = result + 64;
      *(_QWORD *)(result + 48) = 0xFFFFFFFF00000000;
      *(_QWORD *)(result + 72) = 0;
      *(_QWORD *)(result + 80) = &off_1E8172AE8;
      v7 = &off_1E8175388;
      goto LABEL_7;
    case 3:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 104, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_QWORD *)(result + 64) = 0;
      *(_QWORD *)(result + 56) = result + 64;
      *(_QWORD *)(result + 48) = 0xFFFFFFFF00000000;
      *(_QWORD *)(result + 72) = 0;
      *(_QWORD *)(result + 80) = &off_1E8172AE8;
      v7 = &off_1E8175450;
      goto LABEL_7;
    case 6:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 104, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_QWORD *)(result + 64) = 0;
      *(_QWORD *)(result + 56) = result + 64;
      *(_QWORD *)(result + 48) = 0xFFFFFFFF00000000;
      *(_QWORD *)(result + 72) = 0;
      *(_QWORD *)(result + 80) = &off_1E8172AE8;
      v7 = &off_1E81752C0;
      goto LABEL_7;
    case 7:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 104, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_QWORD *)(result + 64) = 0;
      *(_QWORD *)(result + 56) = result + 64;
      *(_QWORD *)(result + 48) = 0xFFFFFFFF00000000;
      *(_QWORD *)(result + 72) = 0;
      *(_QWORD *)(result + 80) = &off_1E8172AE8;
      v7 = &off_1E8175518;
LABEL_7:
      *(_QWORD *)(result + 88) = 256;
      *(_QWORD *)(result + 96) = 0;
      *(_QWORD *)result = v7;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 32) = v7 + 17;
      *(_QWORD *)(result + 40) = &off_1E8175200;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t llvm::AAAlign::createForPosition(llvm::AAAlign *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  int v5;
  unint64_t result;
  uint64_t (**v7)();

  v5 = sub_1C6283CA4(this);
  result = 0;
  switch(v5)
  {
    case 1:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 56, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_OWORD *)(result + 40) = xmmword_1C8660210;
      v7 = &off_1E81755E0;
      goto LABEL_7;
    case 2:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 56, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_OWORD *)(result + 40) = xmmword_1C8660210;
      v7 = &off_1E8175870;
      goto LABEL_7;
    case 3:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 56, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_OWORD *)(result + 40) = xmmword_1C8660210;
      v7 = &off_1E8175958;
      goto LABEL_7;
    case 6:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 56, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_OWORD *)(result + 40) = xmmword_1C8660210;
      v7 = &off_1E8175788;
      goto LABEL_7;
    case 7:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 56, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_OWORD *)(result + 40) = xmmword_1C8660210;
      v7 = &off_1E8175A40;
LABEL_7:
      *(_QWORD *)result = v7;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 32) = v7 + 17;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t llvm::AAInstanceInfo::createForPosition(llvm::AAInstanceInfo *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  int v5;
  unint64_t result;
  uint64_t (**v7)();

  v5 = sub_1C6283CA4(this);
  result = 0;
  switch(v5)
  {
    case 1:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      v7 = &off_1E8175B28;
      goto LABEL_6;
    case 2:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      __break(1u);
      return result;
    case 3:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      v7 = &off_1E8175CE8;
      goto LABEL_6;
    case 6:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      v7 = &off_1E8175C08;
      goto LABEL_6;
    case 7:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      v7 = &off_1E8175DC8;
LABEL_6:
      *(_QWORD *)result = v7;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 32) = v7 + 16;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t llvm::AANoCapture::createForPosition(llvm::AANoCapture *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  int v5;
  unint64_t result;
  uint64_t (**v7)();

  v5 = sub_1C6283CA4(this);
  result = 0;
  switch(v5)
  {
    case 1:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_DWORD *)(result + 40) = 458752;
      v7 = &off_1E8175EA8;
      goto LABEL_6;
    case 2:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      __break(1u);
      return result;
    case 3:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_DWORD *)(result + 40) = 458752;
      v7 = &off_1E81760D8;
      goto LABEL_6;
    case 6:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_DWORD *)(result + 40) = 458752;
      v7 = &off_1E8175FF0;
      goto LABEL_6;
    case 7:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_DWORD *)(result + 40) = 458752;
      v7 = &off_1E81761C0;
LABEL_6:
      *(_QWORD *)result = v7;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 32) = v7 + 17;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::AAValueConstantRange::createForPosition(llvm::AAValueConstantRange *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  int v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t (**v9)();
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v5 = sub_1C6283CA4(this);
  result = 0;
  switch(v5)
  {
    case 1:
      v7 = sub_1C484358C(*((_QWORD *)a2 + 3), 120, 3);
      result = sub_1C56A5D14(v7, this);
      *(_QWORD *)result = &off_1E81762A8;
      *(_QWORD *)(result + 32) = &unk_1E8176338;
      *(_DWORD *)(result + 112) = 0;
      return result;
    case 2:
      v8 = sub_1C484358C(*((_QWORD *)a2 + 3), 112, 3);
      result = sub_1C56A5D14(v8, this);
      v9 = &off_1E8176558;
      goto LABEL_7;
    case 3:
      v10 = sub_1C484358C(*((_QWORD *)a2 + 3), 112, 3);
      result = sub_1C56A5D14(v10, this);
      v9 = &off_1E8176628;
      goto LABEL_7;
    case 6:
      v11 = sub_1C484358C(*((_QWORD *)a2 + 3), 112, 3);
      result = sub_1C56A5D14(v11, this);
      v9 = &off_1E8176488;
      goto LABEL_7;
    case 7:
      v12 = sub_1C484358C(*((_QWORD *)a2 + 3), 120, 3);
      result = sub_1C56A5D14(v12, this);
      *(_DWORD *)(result + 112) = 0;
      v9 = &off_1E81766F8;
LABEL_7:
      *(_QWORD *)result = v9;
      *(_QWORD *)(result + 32) = v9 + 18;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t llvm::AAPotentialConstantValues::createForPosition(llvm::AAPotentialConstantValues *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  int v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = sub_1C6283CA4(this);
  result = 0;
  switch(v5)
  {
    case 1:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 344, 3);
      v7 = 0;
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_QWORD *)(result + 8) = 0;
      *(_WORD *)(result + 48) = 256;
      *(_QWORD *)(result + 40) = &off_1E8172AE8;
      *(_QWORD *)(result + 56) = 1;
      do
      {
        v8 = result + v7;
        *(_DWORD *)(v8 + 72) = 0;
        *(_QWORD *)(v8 + 64) = 0;
        v7 += 16;
      }
      while (v7 != 128);
      *(_QWORD *)(result + 192) = result + 208;
      *(_QWORD *)(result + 200) = 0x800000000;
      *(_BYTE *)(result + 336) = 0;
      v9 = &off_1E81767C8;
      goto LABEL_17;
    case 2:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 344, 3);
      v10 = 0;
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_QWORD *)(result + 8) = 0;
      *(_WORD *)(result + 48) = 256;
      *(_QWORD *)(result + 40) = &off_1E8172AE8;
      *(_QWORD *)(result + 56) = 1;
      do
      {
        v11 = result + v10;
        *(_DWORD *)(v11 + 72) = 0;
        *(_QWORD *)(v11 + 64) = 0;
        v10 += 16;
      }
      while (v10 != 128);
      *(_QWORD *)(result + 192) = result + 208;
      *(_QWORD *)(result + 200) = 0x800000000;
      *(_BYTE *)(result + 336) = 0;
      v9 = &off_1E8176988;
      goto LABEL_17;
    case 3:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 344, 3);
      v12 = 0;
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_QWORD *)(result + 8) = 0;
      *(_WORD *)(result + 48) = 256;
      *(_QWORD *)(result + 40) = &off_1E8172AE8;
      *(_QWORD *)(result + 56) = 1;
      do
      {
        v13 = result + v12;
        *(_DWORD *)(v13 + 72) = 0;
        *(_QWORD *)(v13 + 64) = 0;
        v12 += 16;
      }
      while (v12 != 128);
      *(_QWORD *)(result + 192) = result + 208;
      *(_QWORD *)(result + 200) = 0x800000000;
      *(_BYTE *)(result + 336) = 0;
      v9 = &off_1E8176A48;
      goto LABEL_17;
    case 6:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 344, 3);
      v14 = 0;
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_QWORD *)(result + 8) = 0;
      *(_WORD *)(result + 48) = 256;
      *(_QWORD *)(result + 40) = &off_1E8172AE8;
      *(_QWORD *)(result + 56) = 1;
      do
      {
        v15 = result + v14;
        *(_DWORD *)(v15 + 72) = 0;
        *(_QWORD *)(v15 + 64) = 0;
        v14 += 16;
      }
      while (v14 != 128);
      *(_QWORD *)(result + 192) = result + 208;
      *(_QWORD *)(result + 200) = 0x800000000;
      *(_BYTE *)(result + 336) = 0;
      v9 = &off_1E81768C8;
      goto LABEL_17;
    case 7:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 344, 3);
      v16 = 0;
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_QWORD *)(result + 8) = 0;
      *(_WORD *)(result + 48) = 256;
      *(_QWORD *)(result + 40) = &off_1E8172AE8;
      *(_QWORD *)(result + 56) = 1;
      do
      {
        v17 = result + v16;
        *(_DWORD *)(v17 + 72) = 0;
        *(_QWORD *)(v17 + 64) = 0;
        v16 += 16;
      }
      while (v16 != 128);
      *(_QWORD *)(result + 192) = result + 208;
      *(_QWORD *)(result + 200) = 0x800000000;
      *(_BYTE *)(result + 336) = 0;
      v9 = &off_1E8176B08;
LABEL_17:
      *(_QWORD *)result = v9;
      *(_QWORD *)(result + 32) = v9 + 16;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t llvm::AANoUndef::createForPosition(llvm::AANoUndef *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  int v5;
  unint64_t result;
  uint64_t (**v7)();

  v5 = sub_1C6283CA4(this);
  result = 0;
  switch(v5)
  {
    case 1:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      v7 = &off_1E8176BC8;
      goto LABEL_7;
    case 2:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      v7 = &off_1E8176D98;
      goto LABEL_7;
    case 3:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      v7 = &off_1E8176E80;
      goto LABEL_7;
    case 6:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      v7 = &off_1E8176CB0;
      goto LABEL_7;
    case 7:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      v7 = &off_1E8176F68;
LABEL_7:
      *(_QWORD *)result = v7;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 32) = v7 + 17;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t llvm::AAPointerInfo::createForPosition(llvm::AAPointerInfo *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  int v5;
  unint64_t result;
  uint64_t (**v7)();

  v5 = sub_1C6283CA4(this);
  result = 0;
  switch(v5)
  {
    case 1:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 80, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_OWORD *)(result + 56) = 0u;
      *(_QWORD *)(result + 64) = &off_1E8172AE8;
      *(_QWORD *)(result + 72) = 0;
      *(_BYTE *)(result + 73) = 1;
      *(_OWORD *)(result + 40) = 0u;
      v7 = &off_1E8177050;
      goto LABEL_7;
    case 2:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 80, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_OWORD *)(result + 56) = 0u;
      *(_QWORD *)(result + 64) = &off_1E8172AE8;
      *(_QWORD *)(result + 72) = 0;
      *(_BYTE *)(result + 73) = 1;
      *(_OWORD *)(result + 40) = 0u;
      v7 = &off_1E81772C0;
      goto LABEL_7;
    case 3:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 80, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_OWORD *)(result + 56) = 0u;
      *(_QWORD *)(result + 64) = &off_1E8172AE8;
      *(_QWORD *)(result + 72) = 0;
      *(_BYTE *)(result + 73) = 1;
      *(_OWORD *)(result + 40) = 0u;
      v7 = &off_1E8177390;
      goto LABEL_7;
    case 6:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 80, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_OWORD *)(result + 56) = 0u;
      *(_QWORD *)(result + 64) = &off_1E8172AE8;
      *(_QWORD *)(result + 72) = 0;
      *(_BYTE *)(result + 73) = 1;
      *(_OWORD *)(result + 40) = 0u;
      v7 = &off_1E81771F0;
      goto LABEL_7;
    case 7:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 80, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_OWORD *)(result + 56) = 0u;
      *(_QWORD *)(result + 64) = &off_1E8172AE8;
      *(_QWORD *)(result + 72) = 0;
      *(_BYTE *)(result + 73) = 1;
      *(_OWORD *)(result + 40) = 0u;
      v7 = &off_1E8177460;
LABEL_7:
      *(_QWORD *)result = v7;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 32) = v7 + 18;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t llvm::AAValueSimplify::createForPosition(llvm::AAValueSimplify *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  int v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t (**v9)();

  v5 = sub_1C6283CA4(this) - 1;
  switch(v5)
  {
    case 0:
      v6 = sub_1C484358C(*((_QWORD *)a2 + 3), 80, 3);
      v8 = sub_1C62846C0(this);
      *(_OWORD *)(v6 + 16) = *(_OWORD *)this;
      *(_WORD *)(v6 + 56) = 256;
      *(_QWORD *)(v6 + 48) = &off_1E8172AE8;
      *(_BYTE *)(v6 + 64) = 0;
      v9 = &off_1E81776D0;
      goto LABEL_12;
    case 1:
      v6 = sub_1C484358C(*((_QWORD *)a2 + 3), 80, 3);
      v8 = sub_1C62846C0(this);
      *(_OWORD *)(v6 + 16) = *(_OWORD *)this;
      *(_WORD *)(v6 + 56) = 256;
      *(_QWORD *)(v6 + 48) = &off_1E8172AE8;
      *(_BYTE *)(v6 + 64) = 0;
      v9 = &off_1E8177870;
      goto LABEL_12;
    case 2:
      v6 = sub_1C484358C(*((_QWORD *)a2 + 3), 80, 3);
      v8 = sub_1C62846C0(this);
      *(_OWORD *)(v6 + 16) = *(_OWORD *)this;
      *(_WORD *)(v6 + 56) = 256;
      *(_QWORD *)(v6 + 48) = &off_1E8172AE8;
      *(_BYTE *)(v6 + 64) = 0;
      v9 = &off_1E8177940;
      goto LABEL_12;
    case 3:
      v6 = sub_1C484358C(*((_QWORD *)a2 + 3), 80, 3);
      v8 = sub_1C62846C0(this);
      *(_OWORD *)(v6 + 16) = *(_OWORD *)this;
      *(_WORD *)(v6 + 56) = 256;
      *(_QWORD *)(v6 + 48) = &off_1E8172AE8;
      *(_BYTE *)(v6 + 64) = 0;
      v9 = &off_1E8177530;
      goto LABEL_12;
    case 4:
      v6 = sub_1C484358C(*((_QWORD *)a2 + 3), 80, 3);
      v8 = sub_1C62846C0(this);
      *(_OWORD *)(v6 + 16) = *(_OWORD *)this;
      *(_WORD *)(v6 + 56) = 256;
      *(_QWORD *)(v6 + 48) = &off_1E8172AE8;
      *(_BYTE *)(v6 + 64) = 0;
      v9 = &off_1E8177600;
      goto LABEL_12;
    case 5:
      v6 = sub_1C484358C(*((_QWORD *)a2 + 3), 80, 3);
      v8 = sub_1C62846C0(this);
      *(_OWORD *)(v6 + 16) = *(_OWORD *)this;
      *(_WORD *)(v6 + 56) = 256;
      *(_QWORD *)(v6 + 48) = &off_1E8172AE8;
      *(_BYTE *)(v6 + 64) = 0;
      v9 = &off_1E81777A0;
      goto LABEL_12;
    case 6:
      v6 = sub_1C484358C(*((_QWORD *)a2 + 3), 80, 3);
      v8 = sub_1C62846C0(this);
      *(_OWORD *)(v6 + 16) = *(_OWORD *)this;
      *(_WORD *)(v6 + 56) = 256;
      *(_QWORD *)(v6 + 48) = &off_1E8172AE8;
      *(_BYTE *)(v6 + 64) = 0;
      v9 = &off_1E8177A10;
LABEL_12:
      *(_BYTE *)(v6 + 72) = 0;
      *(_QWORD *)v6 = v9;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 32) = v9 + 18;
      *(_QWORD *)(v6 + 40) = v8;
      break;
    default:
      v6 = 0;
      break;
  }
  return v6;
}

void llvm::AAIsDead::createForPosition(llvm::AAIsDead *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  unint64_t v5;
  uint64_t (**v6)();
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  switch(sub_1C6283CA4(this))
  {
    case 1u:
      v5 = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(v5 + 16) = *(_OWORD *)this;
      *(_WORD *)(v5 + 40) = 768;
      v6 = &off_1E8177D20;
      goto LABEL_9;
    case 2u:
      v5 = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(v5 + 16) = *(_OWORD *)this;
      *(_WORD *)(v5 + 40) = 768;
      v6 = &off_1E8177F60;
      goto LABEL_9;
    case 3u:
      v7 = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(v7 + 16) = *(_OWORD *)this;
      *(_WORD *)(v7 + 40) = 768;
      *(_QWORD *)v7 = &off_1E8178080;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 32) = &unk_1E8178140;
      *(_BYTE *)(v7 + 42) = 1;
      return;
    case 4u:
      v8 = sub_1C484358C(*((_QWORD *)a2 + 3), 400, 3);
      sub_1C56B2EDC(v8, this);
      return;
    case 5u:
      v9 = sub_1C484358C(*((_QWORD *)a2 + 3), 400, 3);
      sub_1C56B2EDC(v9, this);
      v6 = off_1E8177C00;
      goto LABEL_10;
    case 6u:
      v5 = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(v5 + 16) = *(_OWORD *)this;
      *(_WORD *)(v5 + 40) = 768;
      v6 = &off_1E8177E40;
      goto LABEL_9;
    case 7u:
      v5 = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(v5 + 16) = *(_OWORD *)this;
      *(_WORD *)(v5 + 40) = 768;
      v6 = &off_1E81781A0;
LABEL_9:
      *(_QWORD *)(v5 + 8) = 0;
LABEL_10:
      *(_QWORD *)v5 = v6;
      *(_QWORD *)(v5 + 32) = v6 + 24;
      break;
    default:
      return;
  }
}

unint64_t llvm::AANoFree::createForPosition(llvm::AANoFree *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  unint64_t result;
  uint64_t (**v6)();

  switch(sub_1C6283CA4(this))
  {
    case 1u:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      v6 = &off_1E8178490;
      goto LABEL_9;
    case 2u:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      __break(1u);
      return result;
    case 3u:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      v6 = &off_1E8178660;
      goto LABEL_9;
    case 4u:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      v6 = &off_1E81782C0;
      goto LABEL_9;
    case 5u:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      v6 = &off_1E81783A8;
      goto LABEL_9;
    case 6u:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      v6 = &off_1E8178578;
      goto LABEL_9;
    case 7u:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      v6 = &off_1E8178748;
LABEL_9:
      *(_QWORD *)result = v6;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 32) = v6 + 17;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

unint64_t llvm::AAHeapToStack::createForPosition(llvm::AAHeapToStack *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  unint64_t result;

  if (sub_1C6283CA4(this) != 4)
    return 0;
  result = sub_1C484358C(*((_QWORD *)a2 + 3), 144, 3);
  *(_OWORD *)(result + 16) = *(_OWORD *)this;
  *(_WORD *)(result + 40) = 256;
  *(_QWORD *)result = &off_1E8178830;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 32) = &unk_1E81788C0;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_OWORD *)(result + 100) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 120) = 0;
  return result;
}

unint64_t llvm::AAReachability::createForPosition(llvm::AAReachability *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  unint64_t result;

  if (sub_1C6283CA4(this) != 4)
    return 0;
  result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
  *(_OWORD *)(result + 16) = *(_OWORD *)this;
  *(_WORD *)(result + 40) = 256;
  *(_QWORD *)result = &off_1E81789B0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 32) = &unk_1E8178A30;
  return result;
}

unint64_t llvm::AAUndefinedBehavior::createForPosition(llvm::AAUndefinedBehavior *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  unint64_t result;

  if (sub_1C6283CA4(this) != 4)
    return 0;
  result = sub_1C484358C(*((_QWORD *)a2 + 3), 240, 3);
  *(_OWORD *)(result + 16) = *(_OWORD *)this;
  *(_WORD *)(result + 40) = 256;
  *(_QWORD *)(result + 48) = result + 80;
  *(_QWORD *)(result + 56) = result + 80;
  *(_QWORD *)(result + 64) = 8;
  *(_DWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 144) = result + 176;
  *(_QWORD *)(result + 152) = result + 176;
  *(_QWORD *)(result + 160) = 8;
  *(_DWORD *)(result + 168) = 0;
  *(_QWORD *)result = &off_1E8178A90;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 32) = &unk_1E8178B20;
  return result;
}

unint64_t llvm::AAFunctionReachability::createForPosition(llvm::AAFunctionReachability *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  unint64_t result;

  if (sub_1C6283CA4(this) != 4)
    return 0;
  result = sub_1C484358C(*((_QWORD *)a2 + 3), 200, 3);
  *(_OWORD *)(result + 16) = *(_OWORD *)this;
  *(_WORD *)(result + 40) = 256;
  *(_QWORD *)result = &off_1E8178C70;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 32) = &unk_1E8178D10;
  *(_BYTE *)(result + 96) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_DWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_OWORD *)(result + 156) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 184) = 0;
  *(_QWORD *)(result + 192) = 0;
  return result;
}

unint64_t llvm::AAMemoryBehavior::createForPosition(llvm::AAMemoryBehavior *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  int v5;
  unint64_t result;
  uint64_t (**v7)();

  v5 = sub_1C6283CA4(this);
  result = 0;
  switch(v5)
  {
    case 1:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 768;
      v7 = &off_1E8178F40;
      goto LABEL_8;
    case 3:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 768;
      v7 = &off_1E8179110;
      goto LABEL_8;
    case 4:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 768;
      v7 = &off_1E8178D70;
      goto LABEL_8;
    case 5:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 768;
      v7 = &off_1E8178E58;
      goto LABEL_8;
    case 6:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 768;
      v7 = &off_1E8179028;
      goto LABEL_8;
    case 7:
      result = sub_1C484358C(*((_QWORD *)a2 + 3), 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 768;
      v7 = &off_1E81791F8;
LABEL_8:
      *(_QWORD *)result = v7;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 32) = v7 + 17;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1C628B818(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t (*v5)(void);
  unint64_t result;
  unsigned int v7;
  llvm::GlobalValue *v8;
  int v9;

  v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2
    || (v9 = 37, llvm::IRPosition::hasAttr(v4, &v9, 1, 0, a2)))
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 32);
    return v5();
  }
  v7 = sub_1C6283CA4(v4);
  if (v7 > 6 || ((1 << v7) & 0x54) == 0)
    return sub_1C5676204(v4);
  v8 = (llvm::GlobalValue *)sub_1C5676204(v4);
  if (!v8 || (result = sub_1C62873F8(a2, v8), (result & 1) == 0))
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 40);
    return v5();
  }
  return result;
}

uint64_t sub_1C628B910(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1C628B918(uint64_t a1)
{
  return a1 + 32;
}

void sub_1C628B920(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "AANoUnwind");
}

void *sub_1C628B948()
{
  return &llvm::AANoUnwind::ID;
}

uint64_t sub_1C628B954(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t v5;
  unint64_t v7;
  _QWORD v8[2];
  void *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2)
    return 1;
  v9 = v11;
  v10 = 0x400000000;
  v7 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0)
    v7 = *(_QWORD *)(v7 + 24);
  (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)a1 + 112))(a1, **(_QWORD **)v7, &v9);
  v8[0] = v9;
  v8[1] = v10;
  v5 = llvm::IRAttributeManifest::manifestAttrs(a2, v4, (uint64_t)v8, 0);
  if (v9 != v11)
    free(v9);
  return v5;
}

unint64_t sub_1C628BA58(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  unint64_t v5;
  uint64_t v6;

  result = llvm::Attribute::get(a2, 37, 0);
  v5 = result;
  v6 = *(unsigned int *)(a3 + 8);
  if (v6 >= *(_DWORD *)(a3 + 12))
  {
    result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v6 + 1, 8);
    *(_QWORD *)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8)) = v5;
    LODWORD(v6) = *(_DWORD *)(a3 + 8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v6) = result;
  }
  *(_DWORD *)(a3 + 8) = v6 + 1;
  return result;
}

uint64_t sub_1C628BACC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9);
}

BOOL sub_1C628BAD4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9) == *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1C628BAE8(uint64_t a1)
{
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a1 + 9);
  return 1;
}

uint64_t sub_1C628BAF8(uint64_t a1)
{
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a1 + 8);
  return 0;
}

uint64_t sub_1C628BB08(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    *(_BYTE *)(result + 9) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t sub_1C628BB18(uint64_t result, int a2)
{
  if (a2)
    *(_WORD *)(result + 8) = 257;
  return result;
}

uint64_t sub_1C628BB28(uint64_t result, char a2, char a3)
{
  *(_BYTE *)(result + 8) |= a3;
  *(_BYTE *)(result + 9) |= a2;
  return result;
}

uint64_t sub_1C628BB44(uint64_t result, char a2, char a3)
{
  char v3;
  char v4;

  if (*(_BYTE *)(result + 8))
    v3 = a3;
  else
    v3 = 0;
  *(_BYTE *)(result + 8) = v3;
  if (*(_BYTE *)(result + 9))
    v4 = a2;
  else
    v4 = 0;
  *(_BYTE *)(result + 9) = v4;
  return result;
}

void sub_1C628BB6C()
{
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C628BB88(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t (*v5)(void);
  unint64_t result;
  unsigned int v7;
  llvm::GlobalValue *v8;
  int v9;

  v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2
    || (v9 = 35, llvm::IRPosition::hasAttr(v4, &v9, 1, 0, a2)))
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 32);
    return v5();
  }
  v7 = sub_1C6283CA4(v4);
  if (v7 > 6 || ((1 << v7) & 0x54) == 0)
    return sub_1C5676204(v4);
  v8 = (llvm::GlobalValue *)sub_1C5676204(v4);
  if (!v8 || (result = sub_1C62873F8(a2, v8), (result & 1) == 0))
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 40);
    return v5();
  }
  return result;
}

void sub_1C628BC80(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "AANoSync");
}

void *sub_1C628BCA4()
{
  return &llvm::AANoSync::ID;
}

uint64_t sub_1C628BCB0(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t v5;
  unint64_t v7;
  _QWORD v8[2];
  void *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2)
    return 1;
  v9 = v11;
  v10 = 0x400000000;
  v7 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0)
    v7 = *(_QWORD *)(v7 + 24);
  (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)a1 + 112))(a1, **(_QWORD **)v7, &v9);
  v8[0] = v9;
  v8[1] = v10;
  v5 = llvm::IRAttributeManifest::manifestAttrs(a2, v4, (uint64_t)v8, 0);
  if (v9 != v11)
    free(v9);
  return v5;
}

unint64_t sub_1C628BDB4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  unint64_t v5;
  uint64_t v6;

  result = llvm::Attribute::get(a2, 35, 0);
  v5 = result;
  v6 = *(unsigned int *)(a3 + 8);
  if (v6 >= *(_DWORD *)(a3 + 12))
  {
    result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v6 + 1, 8);
    *(_QWORD *)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8)) = v5;
    LODWORD(v6) = *(_DWORD *)(a3 + 8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v6) = result;
  }
  *(_DWORD *)(a3 + 8) = v6 + 1;
  return result;
}

unint64_t sub_1C628BE28(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t (*v5)(void);
  unint64_t result;
  unsigned int v7;
  llvm::GlobalValue *v8;
  int v9;

  v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2
    || (v9 = 30, llvm::IRPosition::hasAttr(v4, &v9, 1, 0, a2)))
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 32);
    return v5();
  }
  v7 = sub_1C6283CA4(v4);
  if (v7 > 6 || ((1 << v7) & 0x54) == 0)
    return sub_1C5676204(v4);
  v8 = (llvm::GlobalValue *)sub_1C5676204(v4);
  if (!v8 || (result = sub_1C62873F8(a2, v8), (result & 1) == 0))
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 40);
    return v5();
  }
  return result;
}

void sub_1C628BF20(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "AANoRecurse");
}

void *sub_1C628BF4C()
{
  return &llvm::AANoRecurse::ID;
}

uint64_t sub_1C628BF58(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t v5;
  unint64_t v7;
  _QWORD v8[2];
  void *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2)
    return 1;
  v9 = v11;
  v10 = 0x400000000;
  v7 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0)
    v7 = *(_QWORD *)(v7 + 24);
  (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)a1 + 112))(a1, **(_QWORD **)v7, &v9);
  v8[0] = v9;
  v8[1] = v10;
  v5 = llvm::IRAttributeManifest::manifestAttrs(a2, v4, (uint64_t)v8, 0);
  if (v9 != v11)
    free(v9);
  return v5;
}

unint64_t sub_1C628C05C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  unint64_t v5;
  uint64_t v6;

  result = llvm::Attribute::get(a2, 30, 0);
  v5 = result;
  v6 = *(unsigned int *)(a3 + 8);
  if (v6 >= *(_DWORD *)(a3 + 12))
  {
    result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v6 + 1, 8);
    *(_QWORD *)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8)) = v5;
    LODWORD(v6) = *(_DWORD *)(a3 + 8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v6) = result;
  }
  *(_DWORD *)(a3 + 8) = v6 + 1;
  return result;
}

void sub_1C628C0D0(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "AAWillReturn");
}

void *sub_1C628C0FC()
{
  return &llvm::AAWillReturn::ID;
}

uint64_t sub_1C628C108(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t v5;
  unint64_t v7;
  _QWORD v8[2];
  void *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2)
    return 1;
  v9 = v11;
  v10 = 0x400000000;
  v7 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0)
    v7 = *(_QWORD *)(v7 + 24);
  (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)a1 + 112))(a1, **(_QWORD **)v7, &v9);
  v8[0] = v9;
  v8[1] = v10;
  v5 = llvm::IRAttributeManifest::manifestAttrs(a2, v4, (uint64_t)v8, 0);
  if (v9 != v11)
    free(v9);
  return v5;
}

unint64_t sub_1C628C20C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  unint64_t v5;
  uint64_t v6;

  result = llvm::Attribute::get(a2, 65, 0);
  v5 = result;
  v6 = *(unsigned int *)(a3 + 8);
  if (v6 >= *(_DWORD *)(a3 + 12))
  {
    result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v6 + 1, 8);
    *(_QWORD *)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8)) = v5;
    LODWORD(v6) = *(_DWORD *)(a3 + 8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v6) = result;
  }
  *(_DWORD *)(a3 + 8) = v6 + 1;
  return result;
}

unint64_t sub_1C628C280(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t (*v5)(void);
  unint64_t result;
  unsigned int v7;
  llvm::GlobalValue *v8;
  int v9;

  v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2
    || (v9 = 65, llvm::IRPosition::hasAttr(v4, &v9, 1, 0, a2)))
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 32);
    return v5();
  }
  v7 = sub_1C6283CA4(v4);
  if (v7 > 6 || ((1 << v7) & 0x54) == 0)
    return sub_1C5676204(v4);
  v8 = (llvm::GlobalValue *)sub_1C5676204(v4);
  if (!v8 || (result = sub_1C62873F8(a2, v8), (result & 1) == 0))
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 40);
    return v5();
  }
  return result;
}

uint64_t sub_1C628C378(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  llvm::Instruction *v7;
  unsigned int v8;
  int v9;
  BOOL v10;

  if ((unint64_t)(a2 - (_QWORD)a1) > 8)
    return 1;
  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 40);
  if (v4 == *a1 + 40)
    return 0;
  v5 = v4 ? (unsigned __int8 *)(v4 - 24) : 0;
  v6 = v5[16] - 29;
  v7 = v6 >= 0xB ? 0 : (llvm::Instruction *)v5;
  if (v6 > 0xA)
    return 0;
  result = llvm::Instruction::getNumSuccessors((llvm::Instruction *)v5);
  if ((_DWORD)result)
  {
    v8 = 0;
    v9 = result - 1;
    do
    {
      v10 = llvm::Instruction::getSuccessor(v7, v8) == v3;
      result = v10;
      if (v10)
        break;
      v10 = v9 == v8++;
    }
    while (!v10);
  }
  return result;
}

void sub_1C628C424(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "AANoReturn");
}

void *sub_1C628C44C()
{
  return &llvm::AANoReturn::ID;
}

uint64_t sub_1C628C458(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t v5;
  unint64_t v7;
  _QWORD v8[2];
  void *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2)
    return 1;
  v9 = v11;
  v10 = 0x400000000;
  v7 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0)
    v7 = *(_QWORD *)(v7 + 24);
  (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)a1 + 112))(a1, **(_QWORD **)v7, &v9);
  v8[0] = v9;
  v8[1] = v10;
  v5 = llvm::IRAttributeManifest::manifestAttrs(a2, v4, (uint64_t)v8, 0);
  if (v9 != v11)
    free(v9);
  return v5;
}

unint64_t sub_1C628C55C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  unint64_t v5;
  uint64_t v6;

  result = llvm::Attribute::get(a2, 32, 0);
  v5 = result;
  v6 = *(unsigned int *)(a3 + 8);
  if (v6 >= *(_DWORD *)(a3 + 12))
  {
    result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v6 + 1, 8);
    *(_QWORD *)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8)) = v5;
    LODWORD(v6) = *(_DWORD *)(a3 + 8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v6) = result;
  }
  *(_DWORD *)(a3 + 8) = v6 + 1;
  return result;
}

unint64_t sub_1C628C5D0(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t (*v5)(void);
  unint64_t result;
  unsigned int v7;
  llvm::GlobalValue *v8;
  int v9;

  v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2
    || (v9 = 32, llvm::IRPosition::hasAttr(v4, &v9, 1, 0, a2)))
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 32);
    return v5();
  }
  v7 = sub_1C6283CA4(v4);
  if (v7 > 6 || ((1 << v7) & 0x54) == 0)
    return sub_1C5676204(v4);
  v8 = (llvm::GlobalValue *)sub_1C5676204(v4);
  if (!v8 || (result = sub_1C62873F8(a2, v8), (result & 1) == 0))
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 40);
    return v5();
  }
  return result;
}

void sub_1C628C6C8(char *a1@<X8>)
{
  a1[23] = 16;
  strcpy(a1, "AAReturnedValues");
}

void *sub_1C628C6E8()
{
  return &llvm::AAReturnedValues::ID;
}

unint64_t sub_1C628C6F4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  unint64_t v5;
  uint64_t v6;

  result = llvm::Attribute::get(a2, 46, 0);
  v5 = result;
  v6 = *(unsigned int *)(a3 + 8);
  if (v6 >= *(_DWORD *)(a3 + 12))
  {
    result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v6 + 1, 8);
    *(_QWORD *)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8)) = v5;
    LODWORD(v6) = *(_DWORD *)(a3 + 8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v6) = result;
  }
  *(_DWORD *)(a3 + 8) = v6 + 1;
  return result;
}

uint64_t sub_1C628C768(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t v5;
  unint64_t v7;
  _QWORD v8[2];
  void *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2)
    return 1;
  v9 = v11;
  v10 = 0x400000000;
  v7 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0)
    v7 = *(_QWORD *)(v7 + 24);
  (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)a1 + 112))(a1, **(_QWORD **)v7, &v9);
  v8[0] = v9;
  v8[1] = v10;
  v5 = llvm::IRAttributeManifest::manifestAttrs(a2, v4, (uint64_t)v8, 0);
  if (v9 != v11)
    free(v9);
  return v5;
}

uint64_t sub_1C628C86C(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    sub_1C568E484((char **)(a1 + 24));
    operator delete(*v2);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  return a1;
}

BOOL sub_1C628C8B4(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[16];
  unsigned __int8 v9;

  sub_1C61540B4((uint64_t)v8, a1, a2);
  v4 = v9;
  if (v9)
  {
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 40, a1 + 56, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 48);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return v4 != 0;
}

uint64_t sub_1C628C944(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1C628C94C(uint64_t a1)
{
  return a1 + 32;
}

std::string *sub_1C628C954@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  return llvm::AAMemoryLocation::getMemoryLocationsAsStr((std::string *)*(unsigned int *)(a1 + 44), a2);
}

void sub_1C628C95C(char *a1@<X8>)
{
  a1[23] = 16;
  strcpy(a1, "AAMemoryLocation");
}

void *sub_1C628C97C()
{
  return &llvm::AAMemoryLocation::ID;
}

BOOL sub_1C628C988(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) != 0;
}

BOOL sub_1C628C998(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == *(_DWORD *)(a1 + 8);
}

uint64_t sub_1C628C9A8(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t sub_1C628C9B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 12) = *(_DWORD *)(result + 12) & a2 | *(_DWORD *)(result + 8);
  return result;
}

int8x8_t sub_1C628C9CC(int8x8_t *a1, unsigned int a2)
{
  int8x8_t result;

  result = vorr_s8(a1[1], (int8x8_t)vdup_n_s32(a2));
  a1[1] = result;
  return result;
}

uint64_t sub_1C628C9E0(uint64_t result, int a2, int a3)
{
  int v3;

  v3 = *(_DWORD *)(result + 12) | a2;
  *(_DWORD *)(result + 8) |= a3;
  *(_DWORD *)(result + 12) = v3;
  return result;
}

uint64_t sub_1C628C9F4(uint64_t result, int a2, int a3)
{
  int v3;

  v3 = *(_DWORD *)(result + 12) & a2;
  *(_DWORD *)(result + 8) &= a3;
  *(_DWORD *)(result + 12) = v3;
  return result;
}

unint64_t sub_1C628CA08(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t (*v5)(void);
  unint64_t result;
  unsigned int v7;
  llvm::GlobalValue *v8;
  int v9;

  v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2
    || (v9 = 44, llvm::IRPosition::hasAttr(v4, &v9, 1, 0, a2)))
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 32);
    return v5();
  }
  v7 = sub_1C6283CA4(v4);
  if (v7 > 6 || ((1 << v7) & 0x54) == 0)
    return sub_1C5676204(v4);
  v8 = (llvm::GlobalValue *)sub_1C5676204(v4);
  if (!v8 || (result = sub_1C62873F8(a2, v8), (result & 1) == 0))
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 40);
    return v5();
  }
  return result;
}

uint64_t sub_1C628CB00(uint64_t a1)
{
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 8);
  return 0;
}

void sub_1C628CB14()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C628CB28(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "AACallEdges");
}

void *sub_1C628CB54()
{
  return &llvm::AACallEdges::ID;
}

uint64_t sub_1C628CB60(uint64_t a1)
{
  return *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1) + 24);
}

uint64_t sub_1C628CB90(uint64_t a1)
{
  return *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1) + 32);
}

uint64_t sub_1C628CBC0(uint64_t a1)
{
  return *(_QWORD *)((*(uint64_t (**)(void))(*(_QWORD *)(a1 - 48) + 112))() + 24);
}

uint64_t sub_1C628CBF0(uint64_t a1)
{
  return *(_QWORD *)((*(uint64_t (**)(void))(*(_QWORD *)(a1 - 48) + 112))() + 32);
}

uint64_t sub_1C628CC20(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AACallEdges::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C628CC8C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1C628CC94(uint64_t a1)
{
  return a1 + 32;
}

void sub_1C628CC9C(char *a1@<X8>)
{
  a1[23] = 16;
  strcpy(a1, "AAAssumptionInfo");
}

void *sub_1C628CCBC()
{
  return &llvm::AAAssumptionInfo::ID;
}

BOOL sub_1C628CCC8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 56) || *(_BYTE *)(a1 + 40) != 0;
}

uint64_t sub_1C628CCE8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 72);
}

uint64_t sub_1C628CCF0(_BYTE *a1)
{
  a1[72] = 1;
  a1[8] = a1[40];
  sub_1C4DFEB14((uint64_t)(a1 + 16), (uint64_t)(a1 + 48));
  return 1;
}

uint64_t sub_1C628CD24(_BYTE *a1)
{
  a1[72] = 1;
  a1[40] = a1[8];
  sub_1C4DFEB14((uint64_t)(a1 + 48), (uint64_t)(a1 + 16));
  return 0;
}

uint64_t sub_1C628CD58(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD v7[2];
  int v8;

  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  sub_1C4DFEB14((uint64_t)v7, a4);
  *(_OWORD *)(a1 + 16) = *a2;
  *(_QWORD *)a1 = &unk_1E8172918;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = &off_1E8174090;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_1C4DFEB14(a1 + 48, (uint64_t)v7);
  *(_BYTE *)(a1 + 72) = 1;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)a1 = off_1E8173FD0;
  *(_QWORD *)(a1 + 32) = &unk_1E8174050;
  MEMORY[0x1CAA32FB4](v7[0], 8);
  *(_QWORD *)a1 = off_1E8173F08;
  *(_QWORD *)(a1 + 32) = &unk_1E8173F90;
  return a1;
}

void sub_1C628CE44(_QWORD *a1)
{
  sub_1C628CE68(a1);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C628CE68(_QWORD *a1)
{
  *a1 = &off_1E8174090;
  MEMORY[0x1CAA32FB4](a1[6], 8);
  MEMORY[0x1CAA32FB4](a1[2], 8);
  return a1;
}

uint64_t sub_1C628CEAC(uint64_t result, uint64_t a2)
{
  _BYTE *v3;
  BOOL v4;
  char v5;

  if (!*(_BYTE *)a2)
  {
    v3 = (_BYTE *)result;
    result += 8;
    if (*v3)
    {
      if ((_BYTE *)a2 != v3)
        result = (uint64_t)sub_1C4DFEB14(result, a2 + 8);
    }
    else
    {
      result = sub_1C5693FD8(result, (uint64_t *)(a2 + 8));
    }
    if (*(_BYTE *)a2)
      v4 = *v3 == 0;
    else
      v4 = 1;
    v5 = !v4;
    *v3 = v5;
  }
  return result;
}

BOOL sub_1C628CF18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = 0;
  if (sub_1C4FAA4F0((uint64_t *)(a1 + 48), a2, &v11))
  {
    v4 = v11;
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(unsigned int *)(a1 + 64);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(unsigned int *)(a1 + 64);
    v4 = v5 + 16 * v6;
  }
  if (v4 != v5 + 16 * v6)
    return 1;
  v11 = 0;
  if (sub_1C4FAA4F0((uint64_t *)(a1 + 16), a2, &v11))
  {
    v8 = v11;
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(unsigned int *)(a1 + 32);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(unsigned int *)(a1 + 32);
    v8 = v9 + 16 * v10;
  }
  return v8 != v9 + 16 * v10;
}

void sub_1C628CFC4(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "AANonNull");
}

void *sub_1C628CFE8()
{
  return &llvm::AANonNull::ID;
}

uint64_t sub_1C628CFF4(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t v5;
  unint64_t v7;
  _QWORD v8[2];
  void *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2)
    return 1;
  v9 = v11;
  v10 = 0x400000000;
  v7 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0)
    v7 = *(_QWORD *)(v7 + 24);
  (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)a1 + 112))(a1, **(_QWORD **)v7, &v9);
  v8[0] = v9;
  v8[1] = v10;
  v5 = llvm::IRAttributeManifest::manifestAttrs(a2, v4, (uint64_t)v8, 0);
  if (v9 != v11)
    free(v9);
  return v5;
}

unint64_t sub_1C628D0F8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  unint64_t v5;
  uint64_t v6;

  result = llvm::Attribute::get(a2, 39, 0);
  v5 = result;
  v6 = *(unsigned int *)(a3 + 8);
  if (v6 >= *(_DWORD *)(a3 + 12))
  {
    result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v6 + 1, 8);
    *(_QWORD *)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8)) = v5;
    LODWORD(v6) = *(_DWORD *)(a3 + 8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v6) = result;
  }
  *(_DWORD *)(a3 + 8) = v6 + 1;
  return result;
}

unint64_t sub_1C628D16C(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t (*v5)(void);
  unint64_t result;
  unsigned int v7;
  llvm::GlobalValue *v8;
  int v9;

  v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2
    || (v9 = 39, llvm::IRPosition::hasAttr(v4, &v9, 1, 0, a2)))
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 32);
    return v5();
  }
  v7 = sub_1C6283CA4(v4);
  if (v7 > 6 || ((1 << v7) & 0x54) == 0)
    return sub_1C5676204(v4);
  v8 = (llvm::GlobalValue *)sub_1C5676204(v4);
  if (!v8 || (result = sub_1C62873F8(a2, v8), (result & 1) == 0))
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 40);
    return v5();
  }
  return result;
}

char *sub_1C628D264(uint64_t a1, char *a2)
{
  char *v4;
  int64_t v5;
  _QWORD *v7;

  v7 = 0;
  if (sub_1C614F7B0((uint64_t *)a1, a2, &v7))
  {
    *v7 = -8192;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  v4 = *(char **)(a1 + 32);
  v5 = v4 - (a2 + 8);
  if (v4 != a2 + 8)
    memmove(a2, a2 + 8, v4 - (a2 + 8));
  *(_QWORD *)(a1 + 32) = &a2[v5];
  return a2;
}

uint64_t sub_1C628D2EC(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AAValueConstantRange::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C628D358(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v8;
  BOOL v9;

  v2 = a2;
  if (sub_1C6283D44((uint64_t *)a1) <= a2)
    return 0;
  if (*(_DWORD *)(a1 + 16)
    || ((v8 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a1 - 32) + 16), v8 >= 0x15) ? (v9 = v8 == 24) : (v9 = 1),
        !v9))
  {
    v2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * (v2 + 1));
  }
  if ((v2 & 0x80000000) != 0)
    return 0;
  v4 = *(_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)a1 + 20);
  if ((v5 & 0x40000000) != 0)
    v6 = *(_QWORD *)(v4 - 8);
  else
    v6 = v4 - 32 * (v5 & 0x7FFFFFF);
  return (v6 + 32 * v2) | 3;
}

void sub_1C628D3EC(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "AANoAlias");
}

void *sub_1C628D410()
{
  return &llvm::AANoAlias::ID;
}

uint64_t sub_1C628D41C(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t v5;
  unint64_t v7;
  _QWORD v8[2];
  void *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2)
    return 1;
  v9 = v11;
  v10 = 0x400000000;
  v7 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0)
    v7 = *(_QWORD *)(v7 + 24);
  (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)a1 + 112))(a1, **(_QWORD **)v7, &v9);
  v8[0] = v9;
  v8[1] = v10;
  v5 = llvm::IRAttributeManifest::manifestAttrs(a2, v4, (uint64_t)v8, 0);
  if (v9 != v11)
    free(v9);
  return v5;
}

unint64_t sub_1C628D520(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  unint64_t v5;
  uint64_t v6;

  result = llvm::Attribute::get(a2, 19, 0);
  v5 = result;
  v6 = *(unsigned int *)(a3 + 8);
  if (v6 >= *(_DWORD *)(a3 + 12))
  {
    result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v6 + 1, 8);
    *(_QWORD *)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8)) = v5;
    LODWORD(v6) = *(_DWORD *)(a3 + 8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v6) = result;
  }
  *(_DWORD *)(a3 + 8) = v6 + 1;
  return result;
}

unint64_t sub_1C628D594(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t (*v5)(void);
  unint64_t result;
  unsigned int v7;
  llvm::GlobalValue *v8;
  int v9;

  v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2
    || (v9 = 19, llvm::IRPosition::hasAttr(v4, &v9, 1, 0, a2)))
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 32);
    return v5();
  }
  v7 = sub_1C6283CA4(v4);
  if (v7 > 6 || ((1 << v7) & 0x54) == 0)
    return sub_1C5676204(v4);
  v8 = (llvm::GlobalValue *)sub_1C5676204(v4);
  if (!v8 || (result = sub_1C62873F8(a2, v8), (result & 1) == 0))
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 40);
    return v5();
  }
  return result;
}

unint64_t sub_1C628D68C(llvm::IRPosition *a1)
{
  unsigned int v2;
  unint64_t result;

  v2 = sub_1C6283CA4(a1);
  if (v2 > 7 || ((1 << v2) & 0xA8) == 0)
    return sub_1C5676C10(a1);
  result = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)a1 & 3) == 0)
    return *(_QWORD *)(result + 24);
  return result;
}

void sub_1C628D6F0(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "AAPrivatizablePtr");
}

void *sub_1C628D714()
{
  return &llvm::AAPrivatizablePtr::ID;
}

void sub_1C628D720(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "AADereferenceable");
}

void *sub_1C628D744()
{
  return &llvm::AADereferenceable::ID;
}

BOOL sub_1C628D750(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) != 0;
}

BOOL sub_1C628D760(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  if (*(_DWORD *)(a1 + 20) == *(_DWORD *)(a1 + 16))
    return *(unsigned __int8 *)(a1 + 57) == *(unsigned __int8 *)(a1 + 56);
  return 0;
}

uint64_t sub_1C628D7B8(uint64_t a1)
{
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 20);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a1 + 57);
  return 1;
}

uint64_t sub_1C628D7D0(uint64_t a1)
{
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 16);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a1 + 56);
  return 0;
}

uint64_t sub_1C628D7E8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E81751C0;
  sub_1C6143384(*(_QWORD **)(a1 + 32));
  return a1;
}

void sub_1C628D81C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E81751C0;
  sub_1C6143384(*(_QWORD **)(a1 + 32));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C628D864()
{
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C628D878(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) != 0;
}

BOOL sub_1C628D888(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == *(_DWORD *)(a1 + 8);
}

uint64_t sub_1C628D898(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t sub_1C628D8A8(uint64_t a1)
{
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 8);
  return 0;
}

uint64_t sub_1C628D8C0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  (*(void (**)(_QWORD *, _QWORD, _QWORD))(a2[1] + 72))(a2 + 1, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16));
  v6 = a2[6];
  a2 += 6;
  (*(void (**)(_QWORD *, _QWORD, _QWORD))(v6 + 72))(a2, *(unsigned __int8 *)(a3 + 57), *(unsigned __int8 *)(a3 + 56));
  v7 = *(a2 - 4);
  *(_QWORD *)a1 = &off_1E81751C0;
  *(_QWORD *)(a1 + 8) = &off_1E8175200;
  *(_QWORD *)(a1 + 16) = v7;
  result = sub_1C569D01C(a1 + 24, a2 - 3);
  *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 4);
  *(_QWORD *)(a1 + 48) = &off_1E8172AE8;
  *(_QWORD *)(a1 + 64) = a2[2];
  return result;
}

uint64_t **sub_1C628D95C(_QWORD **a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t **result;
  uint64_t **v7;
  _OWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  result = (uint64_t **)sub_1C569D0BC(a1, a2, &v13, &v12, a3);
  if (!*result)
  {
    v7 = result;
    v8 = operator new(0x30uLL);
    v8[2] = *a4;
    v9 = v13;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v9;
    *v7 = (uint64_t *)v8;
    v10 = (_QWORD *)**a1;
    if (v10)
    {
      *a1 = v10;
      v11 = *v7;
    }
    else
    {
      v11 = (uint64_t *)v8;
    }
    result = (uint64_t **)sub_1C4768E74(a1[1], v11);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return result;
}

uint64_t sub_1C628D9FC(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  if (*(_BYTE *)(a1 + 72))
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    if (a1 != a2)
      sub_1C569D7D4((_QWORD **)(a1 + 24), *(_QWORD **)(a2 + 24), (_QWORD *)(a2 + 32));
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  }
  else
  {
    *(_QWORD *)a1 = &off_1E81751C0;
    *(_QWORD *)(a1 + 8) = off_1E8175260;
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = &off_1E8175200;
    *(_QWORD *)(a1 + 16) = v5;
    sub_1C569D01C(a1 + 24, (_QWORD *)(a2 + 24));
    *(_QWORD *)(a1 + 48) = &unk_1E81792E0;
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = &off_1E8172AE8;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = 1;
  }
  return a1;
}

uint64_t sub_1C628DAC0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1C628DAC8(uint64_t a1)
{
  return a1 + 32;
}

void sub_1C628DAD0(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "AAAlign");
}

void *sub_1C628DAF8()
{
  return &llvm::AAAlign::ID;
}

BOOL sub_1C628DB04(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 1;
}

BOOL sub_1C628DB14(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 8);
}

uint64_t sub_1C628DB24(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
  return 1;
}

uint64_t sub_1C628DB34(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
  return 0;
}

void sub_1C628DB48()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C628DB64(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "AAInstanceInfo");
}

void *sub_1C628DB8C()
{
  return &llvm::AAInstanceInfo::ID;
}

uint64_t sub_1C628DB98(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1C628DBA0(uint64_t a1)
{
  return a1 + 32;
}

void sub_1C628DBA8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "AANoCapture");
}

void *sub_1C628DBD4()
{
  return &llvm::AANoCapture::ID;
}

uint64_t sub_1C628DBE0(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t v5;
  unint64_t v7;
  _QWORD v8[2];
  void *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2)
    return 1;
  v9 = v11;
  v10 = 0x400000000;
  v7 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0)
    v7 = *(_QWORD *)(v7 + 24);
  (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)a1 + 112))(a1, **(_QWORD **)v7, &v9);
  v8[0] = v9;
  v8[1] = v10;
  v5 = llvm::IRAttributeManifest::manifestAttrs(a2, v4, (uint64_t)v8, 0);
  if (v9 != v11)
    free(v9);
  return v5;
}

BOOL sub_1C628DCE4(uint64_t a1)
{
  return *(_WORD *)(a1 + 10) != 0;
}

BOOL sub_1C628DCF4(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a1 + 8);
}

uint64_t sub_1C628DD08(uint64_t a1)
{
  *(_WORD *)(a1 + 8) = *(_WORD *)(a1 + 10);
  return 1;
}

uint64_t sub_1C628DD18(uint64_t a1)
{
  *(_WORD *)(a1 + 10) = *(_WORD *)(a1 + 8);
  return 0;
}

uint64_t sub_1C628DD28(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 10) = *(_WORD *)(result + 10) & a2 | *(_WORD *)(result + 8);
  return result;
}

uint64_t sub_1C628DD40(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 10) |= a2;
  *(_WORD *)(result + 8) |= a2;
  return result;
}

uint64_t sub_1C628DD5C(uint64_t result, __int16 a2, __int16 a3)
{
  *(_WORD *)(result + 8) |= a3;
  *(_WORD *)(result + 10) |= a2;
  return result;
}

uint64_t sub_1C628DD78(uint64_t result, __int16 a2, __int16 a3)
{
  *(_WORD *)(result + 8) &= a3;
  *(_WORD *)(result + 10) &= a2;
  return result;
}

void sub_1C628DD98()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C628DDAC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1C628DDB4(uint64_t a1)
{
  return a1 + 32;
}

void sub_1C628DDBC(char *a1@<X8>)
{
  a1[23] = 20;
  strcpy(a1, "AAValueConstantRange");
}

void *sub_1C628DDE8()
{
  return &llvm::AAValueConstantRange::ID;
}

BOOL sub_1C628DDF4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) && !llvm::ConstantRange::isFullSet((const void **)(a1 + 16));
}

BOOL sub_1C628DE20(uint64_t a1)
{
  return sub_1C56A6624(a1 + 16, (const void **)(a1 + 48));
}

uint64_t sub_1C628DE30(uint64_t a1)
{
  sub_1C56A6894(a1 + 48, (const void **)(a1 + 16));
  return 0;
}

uint64_t sub_1C628DE50(uint64_t a1)
{
  sub_1C56A6894(a1 + 16, (const void **)(a1 + 48));
  return 0;
}

_QWORD *sub_1C628DE70(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E8176448;
  v2 = (uint64_t)(a1 + 2);
  sub_1C4E8C6FC((uint64_t)(a1 + 6));
  sub_1C4E8C6FC(v2);
  return a1;
}

void sub_1C628DEB0(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E8176448;
  v1 = (uint64_t)(a1 + 2);
  sub_1C4E8C6FC((uint64_t)(a1 + 6));
  sub_1C4E8C6FC(v1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C628DF00(uint64_t a1, llvm::ConstantRange *a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[32];

  v3 = a1;
  v4 = a1 + 16;
  llvm::ConstantRange::intersectWith(a1 + 16, a2, 0, (uint64_t)v6);
  sub_1C4FCC3C8(v4, (uint64_t)v6);
  sub_1C4E8C6FC((uint64_t)v6);
  v3 += 48;
  llvm::ConstantRange::intersectWith(v3, a2, 0, (uint64_t)v6);
  sub_1C4FCC3C8(v3, (uint64_t)v6);
  return sub_1C4E8C6FC((uint64_t)v6);
}

uint64_t sub_1C628DF84(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  _BYTE v5[32];
  _BYTE v6[32];

  v3 = a1 + 16;
  llvm::ConstantRange::unionWith(a1 + 16, a2, 0, (uint64_t)v5);
  llvm::ConstantRange::intersectWith((uint64_t)v5, (llvm::ConstantRange *)(a1 + 48), 0, (uint64_t)v6);
  sub_1C4FCC3C8(v3, (uint64_t)v6);
  sub_1C4E8C6FC((uint64_t)v6);
  return sub_1C4E8C6FC((uint64_t)v5);
}

BOOL sub_1C628DFEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 v5;
  const void *v7[4];
  uint64_t (**v8)();
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[32];

  v4 = a1 + 16;
  sub_1C4E94384((uint64_t)v11, a1 + 16);
  sub_1C628E08C((uint64_t)&v8, a1, a2);
  v8 = &off_1E8176448;
  sub_1C4E8C6FC((uint64_t)&v10);
  sub_1C4E8C6FC((uint64_t)&v9);
  sub_1C4E94384((uint64_t)v7, v4);
  v5 = sub_1C56A6624((uint64_t)v11, v7);
  sub_1C4E8C6FC((uint64_t)v7);
  sub_1C4E8C6FC((uint64_t)v11);
  return v5;
}

uint64_t sub_1C628E08C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6[8];

  sub_1C4E94384((uint64_t)v6, a3 + 16);
  sub_1C628DF84(a2, v6);
  sub_1C4E8C6FC((uint64_t)v6);
  *(_QWORD *)a1 = &off_1E8176448;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  sub_1C4E94384(a1 + 16, a2 + 16);
  return sub_1C4E94384(a1 + 48, a2 + 48);
}

uint64_t sub_1C628E100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v7[8];

  sub_1C4E94384((uint64_t)v7, a3 + 48);
  sub_1C628E1A0(a2, v7);
  sub_1C4E8C6FC((uint64_t)v7);
  sub_1C4E94384((uint64_t)v7, a3 + 16);
  sub_1C628DF84(a2, v7);
  sub_1C4E8C6FC((uint64_t)v7);
  *(_QWORD *)a1 = &off_1E8176448;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  sub_1C4E94384(a1 + 16, a2 + 16);
  return sub_1C4E94384(a1 + 48, a2 + 48);
}

uint64_t sub_1C628E1A0(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int *v3;
  _BYTE v5[32];

  v2 = a1;
  v3 = (unsigned int *)(a1 + 48);
  llvm::ConstantRange::unionWith(a1 + 48, a2, 0, (uint64_t)v5);
  sub_1C4FCC3C8((uint64_t)v3, (uint64_t)v5);
  sub_1C4E8C6FC((uint64_t)v5);
  v2 += 16;
  llvm::ConstantRange::unionWith(v2, v3, 0, (uint64_t)v5);
  sub_1C4FCC3C8(v2, (uint64_t)v5);
  return sub_1C4E8C6FC((uint64_t)v5);
}

uint64_t sub_1C628E218(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 80))
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    sub_1C56A6894(a1 + 16, (const void **)(a2 + 16));
    sub_1C56A6894(a1 + 48, (const void **)(a2 + 48));
  }
  else
  {
    *(_QWORD *)a1 = &off_1E8176448;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    sub_1C4E94384(a1 + 16, a2 + 16);
    sub_1C4E94384(a1 + 48, a2 + 48);
    *(_BYTE *)(a1 + 80) = 1;
  }
  return a1;
}

uint64_t sub_1C628E29C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1C628E2A4(uint64_t a1)
{
  return a1 + 32;
}

double sub_1C628E2AC@<D0>(uint64_t a1@<X8>)
{
  char *v2;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_1C640C680;
  strcpy(v2, "AAPotentialConstantValues");
  return *(double *)"alConstantValues";
}

void *sub_1C628E2FC()
{
  return &llvm::AAPotentialConstantValues::ID;
}

uint64_t sub_1C628E308(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 17);
}

BOOL sub_1C628E310(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1C628E324(uint64_t a1)
{
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 17);
  return 1;
}

uint64_t sub_1C628E334(uint64_t a1)
{
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a1 + 16);
  return 0;
}

uint64_t sub_1C628E344(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E8176888;
  sub_1C618E390((char **)(a1 + 160));
  sub_1C628E3CC(a1 + 24);
  return a1;
}

void sub_1C628E380(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E8176888;
  sub_1C618E390((char **)(a1 + 160));
  sub_1C628E3CC(a1 + 24);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C628E3CC(uint64_t a1)
{
  sub_1C56A9E1C(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  return a1;
}

void sub_1C628E404(uint64_t a1, llvm *a2)
{
  unsigned int v4;
  BOOL v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    sub_1C628E484(a1 + 24, a2);
    v4 = *(_DWORD *)(a1 + 168);
    if (v4 >= llvm::PotentialValuesState<llvm::APInt>::MaxPotentialValues)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    }
    else
    {
      if (v4)
        v5 = 1;
      else
        v5 = *(_BYTE *)(a1 + 304) == 0;
      v6 = !v5;
      *(_BYTE *)(a1 + 304) = v6;
    }
  }
}

void sub_1C628E484(uint64_t a1, llvm *this)
{
  _BYTE v4[24];

  sub_1C628E4DC((uint64_t)v4, a1, this);
  if (v4[16])
    sub_1C5398B48(a1 + 136, (unint64_t)this);
}

uint64_t sub_1C628E4DC(uint64_t a1, uint64_t a2, llvm *this)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  result = sub_1C56A9E90(a2, this, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v8 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v9 = 8;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(unsigned int *)(a2 + 16);
    }
    v10 = 0;
    v11 = v8 + 16 * v9;
  }
  else
  {
    result = (uint64_t)sub_1C628E590((_DWORD *)a2, v14, this);
    v7 = result;
    v12 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v13 = 8;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(unsigned int *)(a2 + 16);
    }
    v11 = v12 + 16 * v13;
    v10 = 1;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

const llvm::APInt *sub_1C628E590(_DWORD *a1, uint64_t a2, llvm *a3)
{
  const llvm::APInt *v4;
  const llvm::APInt *v5;

  v4 = (const llvm::APInt *)sub_1C56A9FC4(a1, a3, a2);
  v5 = v4;
  if (*((_DWORD *)v4 + 2) > 0x40u || *((_DWORD *)a3 + 2) > 0x40u)
  {
    llvm::APInt::assignSlowCase(v4, a3);
  }
  else
  {
    *(_QWORD *)v4 = *(_QWORD *)a3;
    *((_DWORD *)v4 + 2) = *((_DWORD *)a3 + 2);
  }
  return v5;
}

uint64_t sub_1C628E5F8(uint64_t a1, uint64_t a2)
{
  int v4;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) & 1) == 0
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
  {
    return 1;
  }
  if ((*(_BYTE *)(a1 + 304) != 0) != (*(_BYTE *)(a2 + 304) != 0))
    return 0;
  return sub_1C628E844((uint64_t *)(a1 + 160), *(const void ***)(a2 + 160), *(_DWORD *)(a2 + 168));
}

_QWORD *sub_1C628E6B8(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = 0;
  *a1 = 1;
  v5 = (uint64_t)(a1 + 17);
  do
  {
    v6 = &a1[v4];
    *((_DWORD *)v6 + 4) = 0;
    v6[1] = 0;
    v4 += 2;
  }
  while (v4 != 16);
  sub_1C628E744((uint64_t)a1, a2);
  a1[17] = a1 + 19;
  a1[18] = 0x800000000;
  if (a2[36])
    sub_1C56AA42C(v5, (uint64_t)(a2 + 34));
  return a1;
}

_DWORD *sub_1C628E744(uint64_t a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;

  sub_1C56A9E1C(a1);
  v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
    v4 = *(_DWORD *)a1;
  }
  *(_DWORD *)a1 = v4 | 1;
  if ((*(_BYTE *)a2 & 1) == 0 && a2[4] >= 9u)
  {
    *(_DWORD *)a1 = v4 & 0xFFFFFFFE;
    if ((*a2 & 1) != 0)
      v5 = 8;
    else
      v5 = a2[4];
    *(_QWORD *)(a1 + 8) = operator new(16 * v5, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v5;
  }
  return sub_1C56AA31C((_DWORD *)a1, a2);
}

uint64_t sub_1C628E7D8(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AAPotentialConstantValues::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C628E844(uint64_t *a1, const void **a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*((_DWORD *)a1 + 2) != a3)
    return 0;
  if (a3)
  {
    v4 = *a1;
    v5 = 16 * a3;
    do
    {
      v6 = *(unsigned int *)(v4 + 8);
      if (v6 > 0x40)
      {
        if (memcmp(*(const void **)v4, *a2, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8))
          return 0;
      }
      else if (*(const void **)v4 != *a2)
      {
        return 0;
      }
      v4 += 16;
      a2 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return 1;
}

void sub_1C628E8DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  llvm *v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  BOOL v9;
  char v10;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) & 1) == 0)
      goto LABEL_15;
    v4 = *(unsigned int *)(a2 + 168);
    if ((_DWORD)v4)
    {
      v5 = *(llvm **)(a2 + 160);
      v6 = 16 * v4;
      do
      {
        sub_1C628E484(a1 + 24, v5);
        v5 = (llvm *)((char *)v5 + 16);
        v6 -= 16;
      }
      while (v6);
    }
    v7 = *(_BYTE *)(a1 + 304) | *(_BYTE *)(a2 + 304);
    *(_BYTE *)(a1 + 304) = v7;
    v8 = *(_DWORD *)(a1 + 168);
    if (v8 < llvm::PotentialValuesState<llvm::APInt>::MaxPotentialValues)
    {
      if (v7)
        v9 = v8 == 0;
      else
        v9 = 0;
      v10 = v9;
      *(_BYTE *)(a1 + 304) = v10;
    }
    else
    {
LABEL_15:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    }
  }
}

uint64_t sub_1C628E9B4(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  _QWORD v7[17];
  char *v8;
  char v9;
  _QWORD v10[2];
  __int16 v11;
  _QWORD v12[17];
  char *v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11 = *(_WORD *)(a1 + 16);
  v10[0] = &off_1E8176888;
  v10[1] = &off_1E8172AE8;
  v4 = (_DWORD *)(a1 + 24);
  sub_1C628E6B8(v12, (_DWORD *)(a1 + 24));
  v14 = *(_BYTE *)(a1 + 304);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8, *(unsigned __int8 *)(a2 + 17));
  sub_1C628E8DC(a1, a2);
  sub_1C628E6B8(v7, v4);
  v9 = *(_BYTE *)(a1 + 304);
  sub_1C618E390(&v8);
  sub_1C628E3CC((uint64_t)v7);
  v5 = sub_1C628E5F8((uint64_t)v10, a1);
  v10[0] = &off_1E8176888;
  sub_1C618E390(&v13);
  sub_1C628E3CC((uint64_t)v12);
  return v5;
}

_QWORD *sub_1C628EAE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a2 + 8) + 72))(a2 + 8, *(unsigned __int8 *)(a3 + 17), *(unsigned __int8 *)(a3 + 16));
  sub_1C628E8DC(a2, a3);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)a1 = &off_1E8176888;
  *(_QWORD *)(a1 + 8) = &off_1E8172AE8;
  result = sub_1C628E6B8((_QWORD *)(a1 + 24), (_DWORD *)(a2 + 24));
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  return result;
}

uint64_t sub_1C628EB60(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 312))
  {
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    if (a2 != a1)
      sub_1C628E744(a1 + 24, (_DWORD *)(a2 + 24));
    sub_1C56AA42C(a1 + 160, a2 + 160);
    *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  }
  else
  {
    *(_QWORD *)a1 = &off_1E8176888;
    *(_QWORD *)(a1 + 8) = &unk_1E81792E0;
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = &off_1E8172AE8;
    sub_1C628E6B8((_QWORD *)(a1 + 24), (_DWORD *)(a2 + 24));
    *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
    *(_BYTE *)(a1 + 312) = 1;
  }
  return a1;
}

void sub_1C628EC0C(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "AANoUndef");
}

void *sub_1C628EC30()
{
  return &llvm::AANoUndef::ID;
}

unint64_t sub_1C628EC3C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  unint64_t v5;
  uint64_t v6;

  result = llvm::Attribute::get(a2, 36, 0);
  v5 = result;
  v6 = *(unsigned int *)(a3 + 8);
  if (v6 >= *(_DWORD *)(a3 + 12))
  {
    result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v6 + 1, 8);
    *(_QWORD *)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8)) = v5;
    LODWORD(v6) = *(_DWORD *)(a3 + 8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v6) = result;
  }
  *(_DWORD *)(a3 + 8) = v6 + 1;
  return result;
}

unint64_t sub_1C628ECB0(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t (*v5)(void);
  unint64_t result;
  unsigned int v7;
  llvm::GlobalValue *v8;
  int v9;

  v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2
    || (v9 = 36, llvm::IRPosition::hasAttr(v4, &v9, 1, 0, a2)))
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 32);
    return v5();
  }
  v7 = sub_1C6283CA4(v4);
  if (v7 > 6 || ((1 << v7) & 0x54) == 0)
    return sub_1C5676204(v4);
  v8 = (llvm::GlobalValue *)sub_1C5676204(v4);
  if (!v8 || (result = sub_1C62873F8(a2, v8), (result & 1) == 0))
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 40);
    return v5();
  }
  return result;
}

uint64_t sub_1C628EDA8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1C628EDB0(uint64_t a1)
{
  return a1 + 32;
}

void sub_1C628EDB8(char *a1@<X8>)
{
  a1[23] = 13;
  strcpy(a1, "AAPointerInfo");
}

void *sub_1C628EDE0()
{
  return &llvm::AAPointerInfo::ID;
}

uint64_t sub_1C628EDEC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 41);
}

BOOL sub_1C628EDF4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 41) == *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_1C628EE08(uint64_t a1)
{
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a1 + 41);
  return 1;
}

uint64_t sub_1C628EE18(uint64_t a1)
{
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a1 + 40);
  return 0;
}

void sub_1C628EE2C(uint64_t a1)
{
  sub_1C628EE50(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C628EE50(uint64_t a1)
{
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_1E8177120;
  v2 = (uint64_t *)(a1 + 8);
  v4 = sub_1C628EF14(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 24 * *(unsigned int *)(a1 + 24));
  if (v6 != v4)
  {
    v7 = v3;
    do
    {
      sub_1C628EF74(v4[2]);
      while (1)
      {
        v4 += 3;
        if (v4 == v7)
          break;
        v8 = v4[1];
        if ((*v4 != 0x7FFFFFFFFFFFFFFFLL || v8 != 0x7FFFFFFFFFFFFFFFLL)
          && (*v4 != 0x8000000000000000 || v8 != 0x8000000000000000))
        {
          goto LABEL_15;
        }
      }
      v4 = v7;
LABEL_15:
      ;
    }
    while (v4 != v6);
    v5 = *v2;
  }
  MEMORY[0x1CAA32FB4](v5, 8);
  return a1;
}

_QWORD *sub_1C628EF14(uint64_t a1)
{
  int v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_DWORD *)(a1 + 8);
  result = *(_QWORD **)a1;
  v4 = *(unsigned int *)(a1 + 16);
  v5 = &result[3 * v4];
  if (!v2)
    return v5;
  if ((_DWORD)v4)
  {
    v6 = 24 * v4;
    while (1)
    {
      v7 = result[1];
      if ((*result != 0x7FFFFFFFFFFFFFFFLL || v7 != 0x7FFFFFFFFFFFFFFFLL)
        && (*result != 0x8000000000000000 || v7 != 0x8000000000000000))
      {
        break;
      }
      result += 3;
      v6 -= 24;
      if (!v6)
        return v5;
    }
  }
  return result;
}

uint64_t sub_1C628EF74(uint64_t a1)
{
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 208), 8);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

BOOL sub_1C628EFB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::ConstantExpr *v25;
  int v26;
  int v27;
  llvm::ConstantExpr *v28;
  uint64_t v29;
  int v30;
  _BOOL8 result;
  int v32;
  _OWORD *v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  BOOL v37;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  int v42;
  uint64_t v43;
  uint64_t v44[2];
  uint64_t v45;
  uint64_t v46;

  v15 = a11;
  v44[0] = a3;
  v44[1] = a4;
  if (a11)
  {
    v16 = &a11;
  }
  else
  {
    v16 = sub_1C628F1DC(a1 + 8, v44) + 2;
    v15 = *v16;
    if (!*v16)
    {
      v15 = sub_1C484358C(*(_QWORD *)(a2 + 24), 232, 3);
      *(_QWORD *)v15 = v15 + 16;
      *(_QWORD *)(v15 + 8) = 0x400000000;
      *(_QWORD *)(v15 + 208) = 0;
      *(_QWORD *)(v15 + 216) = 0;
      *(_DWORD *)(v15 + 224) = 0;
      *v16 = v15;
    }
  }
  if (a10)
    v17 = a10;
  else
    v17 = a5;
  v39 = a5;
  v40 = v17;
  v41[0] = a6;
  v41[1] = a7;
  v42 = a8;
  v43 = a9;
  v45 = v17;
  v46 = 0;
  if ((sub_1C4926528(v15 + 208, &v45, &v46) & 1) != 0)
    v18 = v46;
  else
    v18 = *(_QWORD *)(v15 + 208) + 16 * *(unsigned int *)(v15 + 224);
  v19 = *v16;
  if (v18 == *(_QWORD *)(v19 + 208) + 16 * *(unsigned int *)(v19 + 224))
  {
    v32 = *(_DWORD *)(v19 + 8);
    v46 = v40;
    *((_DWORD *)sub_1C504894C(v19 + 208, &v46) + 2) = v32;
    v33 = (_OWORD *)sub_1C56AED24(v19, (unint64_t)&v39);
    result = 0;
    v34 = (_OWORD *)(*(_QWORD *)v19 + 48 * *(unsigned int *)(v19 + 8));
    v36 = v33[1];
    v35 = v33[2];
    *v34 = *v33;
    v34[1] = v36;
    v34[2] = v35;
    ++*(_DWORD *)(v19 + 8);
    return result;
  }
  v20 = *(_DWORD *)(v18 + 8);
  v21 = *(_QWORD *)v19;
  v22 = *(_QWORD *)v19 + 48 * v20;
  v24 = *(_QWORD *)v22;
  v23 = *(_QWORD *)(v22 + 8);
  v25 = *(llvm::ConstantExpr **)(v22 + 16);
  v26 = *(unsigned __int8 *)(v22 + 24);
  v27 = *(_DWORD *)(v22 + 32);
  v28 = llvm::AA::combineOptionalValuesInAAValueLatice((unsigned __int8 *)(v22 + 16), (uint64_t)v41, *(llvm::Value **)(v22 + 40));
  *(_QWORD *)(v22 + 16) = v28;
  *(_QWORD *)(v22 + 24) = v29;
  v30 = v42 | *(_DWORD *)(v22 + 32);
  *(_DWORD *)(v22 + 32) = v30;
  if (*(_QWORD *)v22 == v24 && *(_QWORD *)(v21 + 48 * v20 + 8) == v23)
  {
    if ((_BYTE)v29)
      v37 = v26 == 0;
    else
      v37 = 1;
    if (v37)
    {
      if ((v26 != 0) != (v29 == 0))
        return v30 == v27;
    }
    else if (v25 == v28)
    {
      return v30 == v27;
    }
  }
  return 0;
}

_QWORD *sub_1C628F1DC(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C628F248(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C628F338(a1, a2, v7);
    *(_OWORD *)v5 = *(_OWORD *)a2;
    v5[2] = 0;
  }
  return v5;
}

uint64_t sub_1C628F248(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  BOOL v19;
  unsigned int v21;

  if (a2)
  {
    v5 = ((37 * a4) | (unint64_t)(0x2500000000 * a3))
       + ~((unint64_t)(37 * a4) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (_QWORD *)(a1 + 24 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
      v14 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v11 != 0x7FFFFFFFFFFFFFFFLL || v12 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (v16)
          v19 = 0;
        else
          v19 = v12 == 0x8000000000000000;
        if (v19 && v11 == 0x8000000000000000)
          v16 = v10;
        v21 = v9 + v17++;
        v9 = v21 & v8;
        v10 = (_QWORD *)(a1 + 24 * (v21 & v8));
        v11 = *v10;
        v12 = v10[1];
        v14 = 1;
        if (*v10 == a3 && v12 == a4)
          goto LABEL_8;
      }
      v14 = 0;
      if (v16)
        v10 = v16;
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

_QWORD *sub_1C628F338(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C56AEC5C(a1, v6);
  v9 = 0;
  sub_1C628F248(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != 0x7FFFFFFFFFFFFFFFLL || a3[1] != 0x7FFFFFFFFFFFFFFFLL)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C628F3F0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = 24 * v6;
    v9 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    do
    {
      *v7 = v9;
      v7 = (int64x2_t *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v10 = *v4;
      v11 = v4[1];
      if ((*v4 != 0x7FFFFFFFFFFFFFFFLL || v11 != 0x7FFFFFFFFFFFFFFFLL)
        && (v10 != 0x8000000000000000 || v11 != 0x8000000000000000))
      {
        v16 = 0;
        result = sub_1C628F248(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v10, v11, &v16);
        v14 = v16;
        *v16 = *v4;
        v15 = v4[2];
        v14[1] = v4[1];
        v14[2] = v15;
        ++*(_DWORD *)(v5 + 8);
      }
      v4 += 3;
    }
    while (v4 != a3);
  }
  return result;
}

void sub_1C628F4CC(uint64_t a1, unint64_t a2)
{
  _OWORD *v3;
  char *v4;
  unsigned int v5;
  char *v6;
  _OWORD *v7;
  int v8;
  unint64_t v9;

  v9 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 48, &v9);
  v4 = *(char **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = &v4[48 * v5];
    v7 = v3;
    do
    {
      *v7 = *(_OWORD *)v4;
      v7[1] = *((_OWORD *)v4 + 1);
      *((_DWORD *)v7 + 8) = *((_DWORD *)v4 + 8);
      *((_QWORD *)v7 + 5) = *((_QWORD *)v4 + 5);
      v4 += 48;
      v7 += 3;
    }
    while (v4 != v6);
    v4 = *(char **)a1;
  }
  v8 = v9;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v8;
}

uint64_t sub_1C628F574(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _BOOL8), uint64_t a4)
{
  uint64_t v8;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 0;
  v10 = sub_1C628EF14(a1 + 8);
  v12 = *(_QWORD *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 24);
  if ((uint64_t *)v12 == v10)
    return 1;
  do
  {
    v13 = (unsigned int *)v10[2];
    v14 = v13[2];
    if (!(_DWORD)v14)
      goto LABEL_11;
    v15 = (_QWORD *)(*(_QWORD *)v13 + 8);
    v16 = 48 * v14;
    do
    {
      if (*v15 == a2)
      {
        v17 = v10[1];
        if (v17 == -1)
          break;
        return sub_1C56AEE8C(a1, *v10, v17, a3, a4);
      }
      v15 += 6;
      v16 -= 48;
    }
    while (v16);
LABEL_11:
    while (1)
    {
      v10 += 3;
      if (v10 == v11)
        break;
      v18 = v10[1];
      if ((*v10 != 0x7FFFFFFFFFFFFFFFLL || v18 != 0x7FFFFFFFFFFFFFFFLL)
        && (*v10 != 0x8000000000000000 || v18 != 0x8000000000000000))
      {
        goto LABEL_22;
      }
    }
    v10 = v11;
LABEL_22:
    v8 = 1;
  }
  while (v10 != (uint64_t *)v12);
  return v8;
}

uint64_t sub_1C628F690(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1C628F698(uint64_t a1)
{
  return a1 + 32;
}

void sub_1C628F6A0(char *a1@<X8>)
{
  a1[23] = 15;
  strcpy(a1, "AAValueSimplify");
}

void *sub_1C628F6C8()
{
  return &llvm::AAValueSimplify::ID;
}

uint64_t sub_1C628F6D4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

BOOL sub_1C628F6DC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25) == *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_1C628F6F0(uint64_t a1)
{
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a1 + 25);
  return 1;
}

uint64_t sub_1C628F700(uint64_t a1, uint64_t a2, llvm::Value *a3)
{
  llvm::Value **v4;
  llvm::Value *v5;
  uint64_t v7;

  v7 = a2;
  v4 = (llvm::Value **)sub_1C56B0F3C(a1 + 432, &v7);
  if (*v4)
  {
    v5 = llvm::Value::stripPointerCasts(*v4);
    if (v5 == llvm::Value::stripPointerCasts(a3) || *v4 && *((unsigned __int8 *)*v4 + 16) - 11 < 2)
      return 0;
  }
  *v4 = a3;
  return 1;
}

uint64_t sub_1C628F788@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v16 = 0;
  result = sub_1C628F84C(a1, a2, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v10 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v11 = 32;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(unsigned int *)(a1 + 16);
    }
    v12 = 0;
    v13 = v10 + 16 * v11;
  }
  else
  {
    result = (uint64_t)sub_1C628F8FC((_DWORD *)a1, (uint64_t)a2, a2, v16);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    v14 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v15 = 32;
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(unsigned int *)(a1 + 16);
    }
    v13 = v14 + 16 * v15;
    v12 = 1;
  }
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v13;
  *(_BYTE *)(a4 + 16) = v12;
  return result;
}

uint64_t sub_1C628F84C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 32;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C628F8FC(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 32;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C56B0FF8((uint64_t)a1, v7);
  v9 = 0;
  sub_1C628F84C((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C628F9B8(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 520);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C628F84C((uint64_t)v5, (_QWORD *)a2, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

llvm::Value **sub_1C628FA84(uint64_t a1)
{
  uint64_t v2;
  llvm::Value **v3;
  llvm::Type *v5;
  llvm::ConstantInt ***v6;
  const llvm::APInt *v7;
  const void *v8[4];

  (*(void (**)(const void **__return_ptr))(*(_QWORD *)a1 + 112))(v8);
  v2 = sub_1C4E87458((uint64_t)v8);
  if (v2)
  {
    v5 = (llvm::Type *)v2;
    v6 = (llvm::ConstantInt ***)sub_1C6284150((llvm::IRPosition *)(a1 + 16));
    v3 = llvm::ConstantInt::get(*v6, v5, v7);
  }
  else
  {
    v3 = 0;
    llvm::ConstantRange::isEmptySet(v8);
  }
  sub_1C4E8C6FC((uint64_t)v8);
  return v3;
}

llvm::Value **sub_1C628FB0C(uint64_t a1)
{
  int v2;
  llvm::ConstantInt ***v4;
  const llvm::APInt *v5;
  llvm::ConstantInt **v6;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32))
    return 0;
  v2 = *(_DWORD *)(a1 + 200);
  if (v2)
  {
    if (v2 != 1)
      return 0;
    v4 = (llvm::ConstantInt ***)sub_1C6284150((llvm::IRPosition *)(a1 + 16));
    return llvm::ConstantInt::get(*v4, *(llvm::Type **)(a1 + 192), v5);
  }
  else if (*(_BYTE *)(a1 + 336))
  {
    v6 = (llvm::ConstantInt **)sub_1C6284150((llvm::IRPosition *)(a1 + 16));
    return llvm::ConstantInt::get(*v6, 0, 0);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1C628FB98(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1C628FBA0(uint64_t a1)
{
  return a1 + 32;
}

void sub_1C628FBA8(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "AAIsDead");
}

void *sub_1C628FBCC()
{
  return &llvm::AAIsDead::ID;
}

uint64_t sub_1C628FBD8()
{
  return 0;
}

BOOL sub_1C628FBE0(uint64_t a1)
{
  return *(_BYTE *)(a1 + 9) != 0;
}

BOOL sub_1C628FBF0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9) == *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1C628FC04(uint64_t a1)
{
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a1 + 9);
  return 1;
}

uint64_t sub_1C628FC14(uint64_t a1)
{
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a1 + 8);
  return 0;
}

uint64_t sub_1C628FC24(uint64_t result, char a2)
{
  *(_BYTE *)(result + 9) = *(_BYTE *)(result + 9) & a2 | *(_BYTE *)(result + 8);
  return result;
}

uint64_t sub_1C628FC3C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 9) |= a2;
  *(_BYTE *)(result + 8) |= a2;
  return result;
}

uint64_t sub_1C628FC58(uint64_t result, char a2, char a3)
{
  *(_BYTE *)(result + 8) |= a3;
  *(_BYTE *)(result + 9) |= a2;
  return result;
}

uint64_t sub_1C628FC74(uint64_t result, char a2, char a3)
{
  *(_BYTE *)(result + 8) &= a3;
  *(_BYTE *)(result + 9) &= a2;
  return result;
}

uint64_t sub_1C628FC90()
{
  return 0;
}

BOOL sub_1C628FC98(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned __int8 v9;

  sub_1C628FD24(a1, a2, (uint64_t)&v8);
  v4 = v9;
  if (v9)
  {
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 80);
    if (v6 >= *(_DWORD *)(a1 + 84))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 72, a1 + 88, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 80);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 80);
  }
  return v4 != 0;
}

_QWORD *sub_1C628FD24@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_1C61A6880(a1, a2, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v8 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v9 = 8;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(unsigned int *)(a1 + 16);
    }
    v10 = 0;
    v11 = v8 + 8 * v9;
  }
  else
  {
    result = sub_1C628FDDC((_DWORD *)a1, (uint64_t)a2, a2, v14);
    v7 = result;
    *result = *a2;
    v12 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v13 = 8;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(unsigned int *)(a1 + 16);
    }
    v11 = v12 + 8 * v13;
    v10 = 1;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 16) = v10;
  return result;
}

_QWORD *sub_1C628FDDC(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 8;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C56B4748((uint64_t)a1, v7);
  v9 = 0;
  sub_1C61A6880((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C628FE98(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C61A6880((uint64_t)v5, a2, &v10);
      *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

llvm::raw_ostream *sub_1C628FF5C(unsigned __int8 *a1, llvm::Value *a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  size_t v6;
  char *Name;
  size_t v8;
  void *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *result;
  llvm::Value *v13;

  v4 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v5 = sub_1C4816AD8(v4, "Delete ");
  Name = llvm::Value::getName(a2);
  v8 = v6;
  v9 = (void *)*((_QWORD *)v5 + 4);
  if (v6 <= *((_QWORD *)v5 + 3) - (_QWORD)v9)
  {
    if (v6)
    {
      memcpy(v9, Name, v6);
      *((_QWORD *)v5 + 4) += v8;
    }
  }
  else
  {
    llvm::raw_ostream::write(v5, Name, v6);
  }
  v10 = sub_1C4816AD8(v5, " : ");
  v11 = llvm::raw_ostream::operator<<(v10, a1[5465]);
  result = sub_1C4816AD8(v11, "\n");
  if (a1[5465])
  {
    v13 = a2;
    return (llvm::raw_ostream *)sub_1C567A2A0((uint64_t)(a1 + 4472), (uint64_t *)&v13);
  }
  return result;
}

_QWORD *sub_1C6290034(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5[2];
  uint64_t v6;

  v2 = a1 + 3576;
  v5[0] = 4;
  v5[1] = 0;
  v6 = a2;
  if (a2 != -8192 && a2 != -4096 && a2)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v5);
  result = (_QWORD *)sub_1C6284E2C(v2, v5);
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList(v5);
  return result;
}

_QWORD *sub_1C62900AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5[2];
  uint64_t v6;

  v2 = a1 + 2784;
  v5[0] = 4;
  v5[1] = 0;
  v6 = a2;
  if (a2 != -8192 && a2 != -4096 && a2)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v5);
  result = (_QWORD *)sub_1C6284E2C(v2, v5);
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList(v5);
  return result;
}

uint64_t sub_1C6290124(uint64_t a1, unsigned int *a2)
{
  int64x2_t v4;

  if ((*(_BYTE *)a1 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  *(_QWORD *)a1 = 1;
  v4 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 8) = v4;
  *(int64x2_t *)(a1 + 24) = v4;
  *(int64x2_t *)(a1 + 40) = v4;
  *(int64x2_t *)(a1 + 56) = v4;
  sub_1C629018C((unsigned int *)a1, a2);
  return a1;
}

unsigned int *sub_1C629018C(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t i;
  uint64_t v8;
  int *v9;
  int *v10;
  uint64_t v11;
  __int128 v12;

  v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  v3 = result[1];
  *result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  v4 = *a2;
  if ((*result & 1) == 0)
  {
    if ((v4 & 1) == 0)
    {
      v5 = *((_QWORD *)result + 1);
      *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v5;
      LODWORD(v5) = result[4];
      result[4] = a2[4];
      a2[4] = v5;
      return result;
    }
    v4 = *result;
    v6 = result;
    result = a2;
    goto LABEL_7;
  }
  if ((v4 & 1) == 0)
  {
    v6 = a2;
LABEL_7:
    v12 = *(_OWORD *)(v6 + 2);
    *v6 = v4 | 1;
    for (i = 2; i != 18; i += 2)
      *(_QWORD *)&v6[i] = *(_QWORD *)&result[i];
    *result &= ~1u;
    *(_OWORD *)(result + 2) = v12;
    return result;
  }
  v8 = 0;
  v9 = (int *)(result + 2);
  v10 = (int *)(a2 + 2);
  do
  {
    v11 = *(_QWORD *)&v9[v8];
    *(_QWORD *)&v9[v8] = *(_QWORD *)&v10[v8];
    *(_QWORD *)&v10[v8] = v11;
    v8 += 2;
  }
  while (v8 != 16);
  return result;
}

_QWORD *sub_1C6290278(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5[2];
  uint64_t v6;

  v2 = a1 + 4776;
  v5[0] = 4;
  v5[1] = 0;
  v6 = a2;
  if (a2 != -8192 && a2 != -4096 && a2)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v5);
  result = (_QWORD *)sub_1C62902F4(v2, v5);
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList(v5);
  return result;
}

BOOL sub_1C62902F4(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v6;
  unsigned __int8 v7;

  sub_1C629034C(a1, a2, (uint64_t)&v6);
  v4 = v7;
  if (v7)
    sub_1C4EE5050((unsigned int *)(a1 + 200), (unint64_t)a2);
  return v4 != 0;
}

unint64_t sub_1C629034C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  unint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t *v14;

  v14 = 0;
  result = sub_1C6286D3C(a1, (uint64_t)a2, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v8 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v9 = 8;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(_DWORD *)(a1 + 16);
    }
    v10 = 0;
    v11 = v8 + 24 * v9;
  }
  else
  {
    v7 = (unint64_t *)sub_1C6290410((_DWORD *)a1, (uint64_t)a2, (uint64_t)a2, (uint64_t)v14);
    result = sub_1C4D98DE0(v7, a2);
    v12 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v13 = 8;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(_DWORD *)(a1 + 16);
    }
    v11 = v12 + 24 * v13;
    v10 = 1;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 16) = v10;
  return result;
}

uint64_t sub_1C6290410(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  uint64_t v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 8;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C56B5538((uint64_t)a1, v7);
  v9 = 0;
  sub_1C6286D3C((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*(_QWORD *)(a4 + 16) != -4096)
    --a1[1];
  return a4;
}

unint64_t sub_1C62904CC(int *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t result;
  uint64_t v7;
  unint64_t *v9;

  result = (unint64_t)sub_1C6287760(a1);
  while (a2 != a3)
  {
    v7 = a2[2];
    if ((v7 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      sub_1C6286D3C((uint64_t)a1, (uint64_t)a2, &v9);
      result = sub_1C4D98DE0(v9, a2);
      *a1 += 2;
      v7 = a2[2];
    }
    if (v7 != -8192 && v7 != -4096 && v7 != 0)
      result = (unint64_t)llvm::ValueHandleBase::RemoveFromUseList(a2);
    a2 += 3;
  }
  return result;
}

unint64_t sub_1C6290574(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t (*v5)(void);
  unint64_t result;
  unsigned int v7;
  llvm::GlobalValue *v8;
  int v9;

  v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2
    || (v9 = 25, llvm::IRPosition::hasAttr(v4, &v9, 1, 0, a2)))
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 32);
    return v5();
  }
  v7 = sub_1C6283CA4(v4);
  if (v7 > 6 || ((1 << v7) & 0x54) == 0)
    return sub_1C5676204(v4);
  v8 = (llvm::GlobalValue *)sub_1C5676204(v4);
  if (!v8 || (result = sub_1C62873F8(a2, v8), (result & 1) == 0))
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 40);
    return v5();
  }
  return result;
}

void sub_1C629066C(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "AANoFree");
}

void *sub_1C6290690()
{
  return &llvm::AANoFree::ID;
}

uint64_t sub_1C629069C(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t v5;
  unint64_t v7;
  _QWORD v8[2];
  void *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2)
    return 1;
  v9 = v11;
  v10 = 0x400000000;
  v7 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0)
    v7 = *(_QWORD *)(v7 + 24);
  (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)a1 + 112))(a1, **(_QWORD **)v7, &v9);
  v8[0] = v9;
  v8[1] = v10;
  v5 = llvm::IRAttributeManifest::manifestAttrs(a2, v4, (uint64_t)v8, 0);
  if (v9 != v11)
    free(v9);
  return v5;
}

unint64_t sub_1C62907A0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  unint64_t v5;
  uint64_t v6;

  result = llvm::Attribute::get(a2, 25, 0);
  v5 = result;
  v6 = *(unsigned int *)(a3 + 8);
  if (v6 >= *(_DWORD *)(a3 + 12))
  {
    result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v6 + 1, 8);
    *(_QWORD *)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8)) = v5;
    LODWORD(v6) = *(_DWORD *)(a3 + 8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v6) = result;
  }
  *(_DWORD *)(a3 + 8) = v6 + 1;
  return result;
}

void sub_1C6290814(char *a1@<X8>)
{
  a1[23] = 13;
  strcpy(a1, "AAHeapToStack");
}

void *sub_1C629083C()
{
  return &llvm::AAHeapToStack::ID;
}

uint64_t sub_1C6290848(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_1C6290B30(a1, a2);
  v4 = *(_QWORD *)a1 + 32 * v3;
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      *(_QWORD *)(v4 + 24) = v4;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v4);
    }
    else
    {
      *(_QWORD *)(v4 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  else
  {
    *(_QWORD *)(v4 + 24) = 0;
  }
  v6 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v6;
  return *(_QWORD *)a1 + 32 * v6 - 32;
}

unint64_t *sub_1C62908E4(uint64_t *a1, uint64_t *a2)
{
  char v4;
  unint64_t *v5;
  unint64_t *v7;

  v7 = 0;
  v4 = sub_1C62883D4(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6290958((uint64_t)a1, (uint64_t)a2, a2, v7);
    *(_OWORD *)v5 = *(_OWORD *)a2;
    v5[2] = (unint64_t)(v5 + 4);
    v5[3] = 0x100000000;
  }
  return v5;
}

unint64_t *sub_1C6290958(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  int v6;
  unsigned int v7;
  unint64_t *v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C56B8DE8(a1, v7);
  v10 = 0;
  sub_1C62883D4((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != (_QWORD)llvm::IRPosition::EmptyKey || a4[1] != *((_QWORD *)&llvm::IRPosition::EmptyKey + 1))
    --*(_DWORD *)(a1 + 12);
  return a4;
}

char **sub_1C6290A14(char **result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;

  v4 = a2;
  v5 = result;
  result[1] = 0;
  v7 = *((_QWORD *)&llvm::IRPosition::EmptyKey + 1);
  v6 = llvm::IRPosition::EmptyKey;
  v8 = *((unsigned int *)result + 4);
  if ((_DWORD)v8)
  {
    v9 = *result;
    v10 = &(*result)[64 * v8];
    do
    {
      *(_QWORD *)v9 = v6;
      *((_QWORD *)v9 + 1) = v7;
      v9 += 64;
    }
    while (v9 != v10);
    v7 = *((_QWORD *)&llvm::IRPosition::EmptyKey + 1);
    v6 = llvm::IRPosition::EmptyKey;
  }
  if (a2 != a3)
  {
    v11 = llvm::IRPosition::TombstoneKey;
    do
    {
      v12 = *(_QWORD *)(v4 + 8);
      if ((*(_QWORD *)v4 != v6 || v12 != v7) && (*(_QWORD *)v4 != (_QWORD)v11 || v12 != *((_QWORD *)&v11 + 1)))
      {
        v17 = 0;
        sub_1C62883D4((uint64_t *)v5, (uint64_t *)v4, &v17);
        v15 = v17;
        *(_OWORD *)v17 = *(_OWORD *)v4;
        v15[3] = 0x100000000;
        v15[2] = (unint64_t)(v15 + 4);
        v16 = (uint64_t)(v15 + 2);
        if (*(_DWORD *)(v4 + 24))
          sub_1C48AAD34(v16, v4 + 16);
        ++*((_DWORD *)v5 + 2);
        result = sub_1C62884A4((char **)(v4 + 16));
      }
      v4 += 64;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_1C6290B30(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v10;

  v10 = 0;
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 32, &v10);
  v5 = &v4[32 * *(unsigned int *)(a1 + 8)];
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      *((_QWORD *)v5 + 3) = v5;
      (*(void (**)(_QWORD, char *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v5);
    }
    else
    {
      *((_QWORD *)v5 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  else
  {
    *((_QWORD *)v5 + 3) = 0;
  }
  sub_1C613A964(a1, (uint64_t)v4);
  v7 = v10;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  v8 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v7;
  return (uint64_t)&v4[32 * v8 - 32];
}

uint64_t sub_1C6290C00(uint64_t a1, uint64_t a2, llvm::Value *a3, char a4)
{
  uint64_t v6;
  llvm::Value *v7;
  uint64_t v9;

  v9 = a2;
  v6 = sub_1C6290C8C(a1 + 1480, &v9);
  if (*(_QWORD *)v6)
  {
    v7 = llvm::Value::stripPointerCasts(*(llvm::Value **)v6);
    if (v7 == llvm::Value::stripPointerCasts(a3) || *(unsigned __int8 *)(*(_QWORD *)v6 + 16) - 11 < 2)
      return 0;
  }
  *(_QWORD *)v6 = a3;
  *(_BYTE *)(v6 + 8) = a4;
  return 1;
}

uint64_t sub_1C6290C8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;

  v14 = *a2;
  v15 = 0;
  sub_1C6290D4C(a1, &v14, &v15, (uint64_t)&v12);
  v4 = v12;
  if (v13)
  {
    v10[0] = *a2;
    v10[1] = 0;
    v11 = 0;
    v5 = sub_1C4926708(a1 + 520, (unint64_t)v10, 1);
    v6 = *(_QWORD *)(a1 + 520) + 24 * *(unsigned int *)(a1 + 528);
    v7 = *(_OWORD *)v5;
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(v5 + 16);
    *(_OWORD *)v6 = v7;
    v8 = *(_DWORD *)(a1 + 528);
    *(_DWORD *)(a1 + 528) = v8 + 1;
    *(_DWORD *)(v4 + 8) = v8;
  }
  else
  {
    v8 = *(_DWORD *)(v12 + 8);
  }
  return *(_QWORD *)(a1 + 520) + 24 * v8 + 8;
}

uint64_t sub_1C6290D4C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;

  v16 = 0;
  result = sub_1C56506CC(a1, a2, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v10 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v11 = 32;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(unsigned int *)(a1 + 16);
    }
    v14 = 0;
    v15 = v10 + 16 * v11;
  }
  else
  {
    result = (uint64_t)sub_1C5650774(a1, (uint64_t)a2, a2, v16);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    v12 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v13 = 32;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(unsigned int *)(a1 + 16);
    }
    v15 = v12 + 16 * v13;
    v14 = 1;
  }
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v15;
  *(_BYTE *)(a4 + 16) = v14;
  return result;
}

void *sub_1C6290E10(uint64_t a1, uint64_t *a2)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  result = sub_1C6290E90((uint64_t)v7, a1, a2);
  if (v7[16])
  {
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 32);
    if (v6 >= *(_DWORD *)(a1 + 36))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, a1 + 40, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 32);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 32);
  }
  return result;
}

_QWORD *sub_1C6290E90(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_1C6290F4C(a2, *a3, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v8 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v9 = 1;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(unsigned int *)(a2 + 16);
    }
    v10 = 0;
    v11 = v8 + 8 * v9;
  }
  else
  {
    result = sub_1C6290FF8((_DWORD *)a2, a3, v14);
    v7 = result;
    *result = *a3;
    v12 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v13 = 1;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(unsigned int *)(a2 + 16);
    }
    v11 = v12 + 8 * v13;
    v10 = 1;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_1C6290F4C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C6290FF8(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 1;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C56B9744((uint64_t)a1, v6);
  v8 = 0;
  sub_1C6290F4C((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_1C62910B4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 16);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C6290F4C((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C6291174(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13[2];
  int v14;
  __int128 v15;
  __int128 v16;

  v5 = sub_1C61AA84C(a1, a3);
  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  sub_1C4DFE328((uint64_t)v13, v5);
  v6 = *(_OWORD *)(v5 + 40);
  v15 = *(_OWORD *)(v5 + 24);
  v16 = v6;
  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  sub_1C4DFE328((uint64_t)v9, a1 + 176);
  v11 = *(_OWORD *)(a1 + 200);
  v12 = *(_OWORD *)(a1 + 216);
  v7 = sub_1C62844FC(a1, a2, v13, v9);
  MEMORY[0x1CAA32FB4](v9[0], 8);
  MEMORY[0x1CAA32FB4](v13[0], 8);
  return v7;
}

void sub_1C6291228(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "AAReachability");
}

void *sub_1C6291250()
{
  return &llvm::AAReachability::ID;
}

void sub_1C629125C(char *a1@<X8>)
{
  a1[23] = 19;
  strcpy(a1, "AAUndefinedBehavior");
}

void *sub_1C6291288()
{
  return &llvm::AAUndefinedBehavior::ID;
}

uint64_t sub_1C6291294()
{
  return 1;
}

void sub_1C629129C(char *a1@<X8>)
{
  strcpy(a1, "AAFunctionReachability");
  a1[23] = 22;
}

void *sub_1C62912C0()
{
  return &llvm::AAFunctionReachability::ID;
}

uint64_t sub_1C62912CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C4926528(a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C5048A08(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

void sub_1C629135C(char *a1@<X8>)
{
  a1[23] = 16;
  strcpy(a1, "AAMemoryBehavior");
}

void *sub_1C629137C()
{
  return &llvm::AAMemoryBehavior::ID;
}

void sub_1C6291388(int **a1, _WORD *a2)
{
  uint64_t v4;
  int *v5;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED809C78, 0, 0);
  dword_1ED809CF8 = 0;
  qword_1ED809D00 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED809D08 = 0;
  qword_1ED809C78 = (uint64_t)&unk_1E819E418;
  qword_1ED809D10 = (uint64_t)&unk_1E819E230;
  qword_1ED809D18 = (uint64_t)&off_1E7FA9D80;
  qword_1ED809D30 = (uint64_t)&qword_1ED809D18;
  llvm::cl::Option::setArgStr(v4, "max-heap-to-stack-size", 0x16uLL);
  v5 = *a1;
  dword_1ED809CF8 = **a1;
  byte_1ED809D0C = 1;
  dword_1ED809D08 = *v5;
  word_1ED809C82 = (32 * (*a2 & 3)) | word_1ED809C82 & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED809C78);
}

void sub_1C6291454(_WORD *a1, __int128 *a2, _DWORD **a3, int **a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED809D38, 0, 0);
  byte_1ED809DCC = 0;
  qword_1ED809DB8 = 0;
  unk_1ED809DC0 = &off_1E7F952A8;
  qword_1ED809D38 = (uint64_t)&unk_1E8138D38;
  qword_1ED809DD0 = (uint64_t)&unk_1E819E2C0;
  qword_1ED809DD8 = (uint64_t)&unk_1E8138DA0;
  qword_1ED809DF0 = (uint64_t)&qword_1ED809DD8;
  sub_1C6291508(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED809D38);
}

uint64_t sub_1C6291508(_WORD *a1, __int128 *a2, _DWORD **a3, int **a4)
{
  uint64_t result;
  int v9;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED809D38, "attributor-max-potential-values", 0x1FuLL);
  word_1ED809D42 = (32 * (*a1 & 3)) | word_1ED809D42 & 0xFF9F;
  xmmword_1ED809D58 = *a2;
  result = sub_1C4EA2D4C((uint64_t)&qword_1ED809DB8, &qword_1ED809D38, *a3);
  v9 = **a4;
  *(_DWORD *)qword_1ED809DB8 = v9;
  byte_1ED809DCC = 1;
  dword_1ED809DC8 = v9;
  return result;
}

void sub_1C62915A8(_WORD *a1, __int128 *a2, int **a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED809DF8, 0, 0);
  dword_1ED809E78 = 0;
  qword_1ED809E80 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED809E88 = 0;
  qword_1ED809DF8 = (uint64_t)&unk_1E819E3B0;
  qword_1ED809E90 = (uint64_t)&unk_1E819E2C0;
  qword_1ED809E98 = (uint64_t)&off_1E7F95260;
  qword_1ED809EB0 = (uint64_t)&qword_1ED809E98;
  llvm::cl::Option::setArgStr(v6, "attributor-max-interfering-accesses", 0x23uLL);
  word_1ED809E02 = (32 * (*a1 & 3)) | word_1ED809E02 & 0xFF9F;
  xmmword_1ED809E18 = *a2;
  dword_1ED809E78 = **a3;
  byte_1ED809E8C = 1;
  dword_1ED809E88 = dword_1ED809E78;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED809DF8);
}

void sub_1C6291684(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 16))(*v2);
  v5 = v4;
  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 24))(*v2);
  if (v3 != (uint64_t *)v6)
  {
    v7 = (uint64_t *)v6;
    do
    {
      v8 = (char *)sub_1C5692210(v5, *v3, 0, 0, 2) + 48;
      if (**(char ***)(a1 + 8) != v8)
        sub_1C56BDA7C(a1, (unint64_t)v8);
      ++v3;
    }
    while (v3 != v7);
  }
}

uint64_t llvm::createBarrierNoopPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C56BE4DC(v1);
}

uint64_t llvm::createBlockExtractorPass(uint64_t *a1, char a2)
{
  uint64_t v4;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = &unk_1EF8F7138;
  *(_DWORD *)(v4 + 24) = 4;
  *(_QWORD *)v4 = &off_1E81793E0;
  *(_QWORD *)(v4 + 32) = v4 + 48;
  *(_QWORD *)(v4 + 40) = 0x400000000;
  *(_BYTE *)(v4 + 624) = a2;
  *(_QWORD *)(v4 + 632) = v4 + 648;
  *(_QWORD *)(v4 + 640) = 0x400000000;
  sub_1C56BEA10(v4 + 32, a1);
  return v4;
}

char **llvm::BlockExtractorPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  char *v5[2];
  char *v6[2];
  _BYTE v7[584];
  char *v8[2];
  _QWORD v9[69];

  v9[68] = *MEMORY[0x1E0C80C00];
  v5[1] = 0;
  v6[0] = v7;
  v6[1] = (char *)0x400000000;
  v7[576] = 0;
  v8[0] = (char *)v9;
  v8[1] = (char *)0x400000000;
  v5[0] = (char *)v6;
  sub_1C56BEA10((uint64_t)v6, (uint64_t *)v5);
  sub_1C627AFCC(v5);
  if (sub_1C56BEF58((uint64_t)v6, a1))
  {
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)(a2 + 88) = 0;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_QWORD *)a2 = a2 + 32;
    *(_QWORD *)(a2 + 8) = a2 + 32;
    *(_QWORD *)(a2 + 16) = 2;
    *(_QWORD *)(a2 + 48) = a2 + 80;
    *(_QWORD *)(a2 + 56) = a2 + 80;
    *(_DWORD *)(a2 + 64) = 2;
  }
  else
  {
    llvm::InstCountPass::run(a2);
  }
  sub_1C56BFA64(v8);
  return sub_1C627AFCC(v6);
}

_QWORD *sub_1C62918EC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  _QWORD *result;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return (_QWORD *)sub_1C629195C(a1, a2);
  result = (_QWORD *)(*(_QWORD *)a1 + 144 * v3);
  *result = result + 2;
  result[1] = 0x1000000000;
  if (*(_DWORD *)(a2 + 8))
    result = (_QWORD *)sub_1C49EEBE4((uint64_t)result, a2);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C629195C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  unsigned int v7;
  unint64_t v9;

  v9 = 0;
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 144, &v9);
  v5 = &v4[18 * *(unsigned int *)(a1 + 8)];
  *v5 = v5 + 2;
  v5[1] = 0x1000000000;
  if (*(_DWORD *)(a2 + 8))
    sub_1C49EEBE4((uint64_t)v5, a2);
  sub_1C627AF1C((uint64_t *)a1, v4);
  v6 = v9;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v6;
  return (uint64_t)&v4[18 * v7 - 18];
}

void sub_1C6291A14(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 136, &v5);
  sub_1C56BF758((uint64_t *)a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C6291A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  std::string *v9;
  const std::string::value_type *v10;
  std::string::size_type v11;

  v4 = a2;
  v6 = a3 - a2;
  v7 = *(unsigned int *)(a1 + 8);
  v8 = v7 + ((a3 - a2) >> 4);
  if (v8 > *(unsigned int *)(a1 + 12))
  {
    sub_1C618A5D0(a1, v8);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  if (v4 != a3)
  {
    v9 = (std::string *)(*(_QWORD *)a1 + 24 * v7);
    do
    {
      v10 = *(const std::string::value_type **)v4;
      v11 = *(_QWORD *)(v4 + 8);
      v4 += 16;
      std::string::__init(v9++, v10, v11);
    }
    while (v4 != a3);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v7 + (v6 >> 4);
}

void sub_1C6291B14(llvm::Function *a1)
{
  int v2;

  llvm::Function::dropAllReferences(a1);
  v2 = *((_DWORD *)a1 + 8);
  *((_DWORD *)a1 + 8) = v2 & 0xFFFFFFF0;
  if ((v2 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(a1) & 1) == 0)
    *((_DWORD *)a1 + 8) |= 0x4000u;
}

void sub_1C6291B64(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_1C627AEB0(a1, a2);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
      {
        v8 = 9 * v2;
        v9 = 144 * a2 - 144 * v2;
        v10 = *(_QWORD *)a1 + 16 * v8 + 16;
        do
        {
          *(_QWORD *)(v10 - 16) = v10;
          *(_QWORD *)(v10 - 8) = 0x1000000000;
          v10 += 144;
          v9 -= 144;
        }
        while (v9);
      }
    }
    else
    {
      v5 = 9 * v2;
      v6 = (void **)(*(_QWORD *)a1 + 16 * v5 - 144);
      v7 = 144 * a2 - 16 * v5;
      do
      {
        if (v6 + 2 != *v6)
          free(*v6);
        v6 -= 18;
        v7 += 144;
      }
      while (v7);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t sub_1C6291C40(uint64_t a1, char *a2, _OWORD *a3, _WORD *a4)
{
  uint64_t v8;
  size_t v9;

  v8 = sub_1C47AD050(a1, 0, 0);
  *(_BYTE *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 136) = &off_1E7F9E8D8;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)v8 = &unk_1E819E898;
  *(_QWORD *)(v8 + 152) = &off_1E819E9A0;
  *(_QWORD *)(v8 + 160) = &off_1E7F9E8F8;
  *(_QWORD *)(v8 + 184) = v8 + 160;
  v9 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v9);
  *(_OWORD *)(a1 + 32) = *a3;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

_QWORD *llvm::CalledValuePropagationPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  sub_1C56BFC18(a1);
  return llvm::InstCountPass::run(a2);
}

uint64_t llvm::createCalledValuePropagationPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C56C0258(v1);
}

uint64_t sub_1C6291D5C(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  uint64_t **v5;
  uint64_t **v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = (uint64_t **)sub_1C4E296BC(a1, &v12, a2);
  if (*v5)
    return 0;
  v7 = v5;
  v8 = operator new(0x30uLL);
  v8[2] = *a3;
  v9 = v12;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = v9;
  *v7 = (uint64_t *)v8;
  v10 = **(_QWORD **)a1;
  if (v10)
  {
    *(_QWORD *)a1 = v10;
    v11 = *v7;
  }
  else
  {
    v11 = (uint64_t *)v8;
  }
  sub_1C4768E74(*(uint64_t **)(a1 + 8), v11);
  ++*(_QWORD *)(a1 + 16);
  return 1;
}

_QWORD *llvm::ConstantMergePass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)sub_1C56C3668(a1);
  if ((result & 1) == 0)
    return llvm::InstCountPass::run(a2);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = a2 + 32;
  *(_QWORD *)(a2 + 8) = a2 + 32;
  *(_QWORD *)(a2 + 16) = 2;
  *(_QWORD *)(a2 + 48) = a2 + 80;
  *(_QWORD *)(a2 + 56) = a2 + 80;
  *(_DWORD *)(a2 + 64) = 2;
  return result;
}

uint64_t llvm::createConstantMergePass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C56C3C94(v1);
}

void llvm::CrossDSOCFIPass::run(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _BYTE v4[40];

  sub_1C56C4160((uint64_t)v4);
  if (sub_1C56C4228((uint64_t)v4, a1))
  {
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)(a2 + 88) = 0;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_QWORD *)a2 = a2 + 32;
    *(_QWORD *)(a2 + 8) = a2 + 32;
    *(_QWORD *)(a2 + 16) = 2;
    *(_QWORD *)(a2 + 48) = a2 + 80;
    *(_QWORD *)(a2 + 56) = a2 + 80;
    *(_DWORD *)(a2 + 64) = 2;
  }
  else
  {
    llvm::InstCountPass::run(a2);
  }
  llvm::Pass::~Pass((llvm::Pass *)v4);
}

uint64_t sub_1C6291F2C(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::PointerType *v6;
  uint64_t v7;
  uint64_t v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  v9[0] = a3;
  v9[1] = a4;
  v9[2] = a5;
  v6 = (llvm::PointerType *)llvm::FunctionType::get(a2, v9, 3, 0);
  llvm::Module::getOrInsertFunction(a1, "__cfi_check", 0xBuLL, v6, 0);
  return v7;
}

llvm::PointerType *sub_1C6291FE0(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t **a5, uint64_t a6, uint64_t a7)
{
  llvm::PointerType *v11;
  uint64_t v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  v13[0] = a6;
  v13[1] = a7;
  v11 = (llvm::PointerType *)llvm::FunctionType::get(a5, v13, 2, 0);
  return llvm::Module::getOrInsertFunction(a1, a2, a3, v11, a4);
}

uint64_t llvm::createDeadArgEliminationPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C56C5324(v1);
}

char *sub_1C62920D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, llvm::BasicBlock *a10)
{
  int v16;
  uint64_t v17;
  _QWORD *v18;
  signed int v19;
  char *v20;
  llvm::Instruction *v21;
  uint64_t v22;

  v16 = 0;
  if (a8)
  {
    v17 = 48 * a8;
    v18 = (_QWORD *)(a7 + 32);
    do
    {
      v16 += (*v18 - *(v18 - 1)) >> 3;
      v18 += 6;
      v17 -= 48;
    }
    while (v17);
  }
  v19 = a6 + v16 + 3;
  v20 = llvm::User::operator new((llvm::User *)0x50, v19, 16 * (int)a8);
  v21 = llvm::Instruction::Instruction((llvm::Instruction *)v20, **(llvm::Type ***)(a1 + 16), 5, (llvm::Use *)&v20[-32 * v19], v19, a10);
  *((_QWORD *)v21 + 8) = 0;
  llvm::InvokeInst::init((uint64_t)v21, a1, a2, a3, a4, a5, a6, v22, a7, a8, a9);
  return v20;
}

uint64_t llvm::EliminateAvailableExternallyPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = sub_1C56C93C4(a1);
  if ((result & 1) == 0)
    return (uint64_t)llvm::InstCountPass::run(a2);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = a2 + 32;
  *(_QWORD *)(a2 + 8) = a2 + 32;
  *(_QWORD *)(a2 + 16) = 2;
  *(_QWORD *)(a2 + 48) = a2 + 80;
  *(_QWORD *)(a2 + 56) = a2 + 80;
  *(_DWORD *)(a2 + 64) = 2;
  return result;
}

uint64_t llvm::createEliminateAvailableExternallyPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C56C9644(v1);
}

double llvm::ForceFunctionAttrsPass::run@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v4;
  uint64_t i;
  unint64_t v6;

  if (qword_1ED80A1A0 == unk_1ED80A1A8 && qword_1ED80A278 == unk_1ED80A280)
  {
    llvm::InstCountPass::run(a2);
  }
  else
  {
    v4 = a1 + 24;
    for (i = *(_QWORD *)(a1 + 32); i != v4; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v6 = i - 56;
      else
        v6 = 0;
      sub_1C56CA5B0(v6);
    }
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)(a2 + 88) = 0;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_QWORD *)a2 = a2 + 32;
    *(_QWORD *)(a2 + 8) = a2 + 32;
    *(_QWORD *)&result = 2;
    *(_QWORD *)(a2 + 16) = 2;
    *(_QWORD *)(a2 + 48) = a2 + 80;
    *(_QWORD *)(a2 + 56) = a2 + 80;
    *(_DWORD *)(a2 + 64) = 2;
  }
  return result;
}

uint64_t llvm::createForceFunctionAttrsLegacyPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C56CAA04(v1);
}

void sub_1C6292348(_WORD *a1, __int128 *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED80A120, 1, 0);
  qword_1ED80A1A0 = 0;
  unk_1ED80A1A8 = 0;
  qword_1ED80A1B0 = 0;
  unk_1ED80A1B8 = 0;
  qword_1ED80A120 = (uint64_t)&unk_1E81409D8;
  qword_1ED80A1C0 = 0;
  unk_1ED80A1C8 = 0;
  qword_1ED80A1D0 = (uint64_t)&unk_1E819E970;
  qword_1ED80A1D8 = (uint64_t)&unk_1E81415E0;
  qword_1ED80A1F0 = (uint64_t)&qword_1ED80A1D8;
  llvm::cl::Option::setArgStr(v4, "force-attribute", 0xFuLL);
  word_1ED80A12A = (32 * (*a1 & 3)) | word_1ED80A12A & 0xFF9F;
  xmmword_1ED80A140 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80A120);
}

void sub_1C6292400(_WORD *a1, __int128 *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED80A1F8, 1, 0);
  qword_1ED80A278 = 0;
  unk_1ED80A280 = 0;
  qword_1ED80A288 = 0;
  unk_1ED80A290 = 0;
  qword_1ED80A1F8 = (uint64_t)&unk_1E81409D8;
  qword_1ED80A298 = 0;
  unk_1ED80A2A0 = 0;
  qword_1ED80A2A8 = (uint64_t)&unk_1E819E970;
  qword_1ED80A2B0 = (uint64_t)&unk_1E81415E0;
  qword_1ED80A2C8 = (uint64_t)&qword_1ED80A2B0;
  llvm::cl::Option::setArgStr(v4, "force-remove-attribute", 0x16uLL);
  word_1ED80A202 = (32 * (*a1 & 3)) | word_1ED80A202 & 0xFF9F;
  xmmword_1ED80A218 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80A1F8);
}

uint64_t llvm::createPostOrderFunctionAttrsLegacyPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C56CC074(v1);
}

uint64_t llvm::createReversePostOrderFunctionAttrsPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C56CC230(v1);
}

uint64_t llvm::ComputeCrossModuleImportForModule(void *__s2, size_t __n, uint64_t a3, uint64_t a4)
{
  _QWORD v9[2];
  int v10;

  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  llvm::ModuleSummaryIndex::collectDefinedFunctionsForModule(a3, __s2, __n, (uint64_t)v9);
  sub_1C56D3F8C((uint64_t)v9, a3, __s2, __n, a4, 0);
  return MEMORY[0x1CAA32FB4](v9[0], 8);
}

uint64_t llvm::thinLTOFinalizeInModule(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  v13 = a2;
  v4 = result + 24;
  v5 = *(_QWORD *)(result + 32);
  if (v5 != result + 24)
  {
    do
    {
      if (v5)
        v7 = v5 - 56;
      else
        v7 = 0;
      result = sub_1C56D58D0((uint64_t)&v13, v7, a3);
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v4);
  }
  for (i = *(_QWORD *)(v3 + 16); i != v3 + 8; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v9 = i - 56;
    else
      v9 = 0;
    result = sub_1C56D58D0((uint64_t)&v13, v9, 0);
  }
  v10 = v3 + 40;
  for (j = *(_QWORD *)(v3 + 48); j != v10; j = *(_QWORD *)(j + 8))
  {
    if (j)
      v12 = j - 48;
    else
      v12 = 0;
    result = sub_1C56D58D0((uint64_t)&v13, v12, 0);
  }
  return result;
}

uint64_t llvm::thinLTOInternalizeModule(llvm::Module *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t (**v3)(void);
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = &off_1E817A068;
  v4[1] = a2;
  v4[2] = a1;
  v5 = v4;
  sub_1C56D5BC8(a1, v4, 0);
  result = (uint64_t)v5;
  if (v5 == v4)
  {
    v3 = (uint64_t (**)(void))(v4[0] + 32);
  }
  else
  {
    if (!v5)
      return result;
    v3 = (uint64_t (**)(void))(*v5 + 40);
  }
  return (*v3)();
}

_QWORD *llvm::FunctionImportPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)sub_1C56D6CA4(a1);
  if ((result & 1) == 0)
    return llvm::InstCountPass::run(a2);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = a2 + 32;
  *(_QWORD *)(a2 + 8) = a2 + 32;
  *(_QWORD *)(a2 + 16) = 2;
  *(_QWORD *)(a2 + 48) = a2 + 80;
  *(_QWORD *)(a2 + 56) = a2 + 80;
  *(_DWORD *)(a2 + 64) = 2;
  return result;
}

uint64_t llvm::createFunctionImportPass(llvm *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F32B8;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E8179FC8;
  return result;
}

llvm::raw_ostream *sub_1C62927A4(llvm::raw_ostream *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  unint64_t v7;
  char *Name;
  size_t v9;
  size_t v10;
  void *v11;

  sub_1C5E21910(a1, *(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF8), 0, 0, 0);
  v4 = *a2 & 0xFFFFFFFFFFFFFFF8;
  if ((*a2 & 1) != 0)
    llvm::Value::getName(*(llvm::Value **)(v4 + 8));
  else
    v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = sub_1C4816AD8(a1, " (");
    v7 = *a2 & 0xFFFFFFFFFFFFFFF8;
    if ((*a2 & 1) != 0)
    {
      Name = llvm::Value::getName(*(llvm::Value **)(v7 + 8));
      v9 = v10;
    }
    else
    {
      Name = *(char **)(v7 + 8);
      v9 = *(_QWORD *)(v7 + 16);
    }
    v11 = (void *)*((_QWORD *)v6 + 4);
    if (v9 <= *((_QWORD *)v6 + 3) - (_QWORD)v11)
    {
      if (v9)
      {
        memcpy(v11, Name, v9);
        *((_QWORD *)v6 + 4) += v9;
      }
    }
    else
    {
      llvm::raw_ostream::write(v6, Name, v9);
    }
    sub_1C4816AD8(v6, ")");
  }
  return a1;
}

size_t **sub_1C6292894(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6;
  size_t **i;
  size_t *v8;
  size_t *v9;
  _QWORD *v10;
  size_t *v11;
  char *v12;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  i = (size_t **)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == (size_t *)-8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == (size_t *)-8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  v10 = operator new(a3 + 33, (std::align_val_t)8uLL);
  v11 = v10;
  v12 = (char *)(v10 + 4);
  if (a3)
    memcpy(v10 + 4, a2, a3);
  v12[a3] = 0;
  *v11 = a3;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = 0;
  *i = v11;
  ++*(_DWORD *)(a1 + 12);
  for (i = (size_t **)(*(_QWORD *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i + 1 == 0;
  return i;
}

uint64_t sub_1C6292990(uint64_t result)
{
  uint64_t v1;
  llvm::IRMover::StructTypeKeyInfo *EmptyKey;
  const llvm::StructType *v3;
  uint64_t v4;
  const void **v5;
  const void ***v6;
  uint64_t v7;

  if (*(_DWORD *)(result + 16))
  {
    v1 = result;
    EmptyKey = (llvm::IRMover::StructTypeKeyInfo *)llvm::IRMover::StructTypeKeyInfo::getEmptyKey((llvm::IRMover::StructTypeKeyInfo *)result);
    result = llvm::IRMover::StructTypeKeyInfo::getTombstoneKey(EmptyKey);
    v4 = *(unsigned int *)(v1 + 16);
    if ((_DWORD)v4)
    {
      v5 = (const void **)result;
      v6 = *(const void ****)v1;
      v7 = 8 * v4;
      do
      {
        result = llvm::IRMover::StructTypeKeyInfo::isEqual(*v6, (const void **)EmptyKey, v3);
        if ((result & 1) == 0)
          result = llvm::IRMover::StructTypeKeyInfo::isEqual(*v6, v5, v3);
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_1C6292A0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)a1 + v3);
        if (v5 != -8 && v5 != 0)
        {
          sub_1C61B8160(v5 + 8);
          MEMORY[0x1CAA32FB4](v5, 8);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_1C6292A90(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if ((v2 & 1) != 0)
  {
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else if (v3)
  {
    v4 = sub_1C61A8910(v3);
    MEMORY[0x1CAA32FC0](v4, 0x10B0C4007EAB999);
  }
  return a1;
}

void sub_1C6292AF0(int **a1, _WORD *a2, __int128 *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80A5D8, 0, 0);
  dword_1ED80A658 = 0;
  qword_1ED80A660 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED80A668 = 0;
  qword_1ED80A5D8 = (uint64_t)&unk_1E819E3B0;
  qword_1ED80A670 = (uint64_t)&unk_1E819E2C0;
  qword_1ED80A678 = (uint64_t)&off_1E7F95260;
  qword_1ED80A690 = (uint64_t)&qword_1ED80A678;
  sub_1C6292BA4(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80A5D8);
}

__n128 sub_1C6292BA4(int **a1, _WORD *a2, __int128 *a3, __n128 *a4)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80A5D8, "import-instr-limit", 0x12uLL);
  dword_1ED80A658 = **a1;
  byte_1ED80A66C = 1;
  dword_1ED80A668 = dword_1ED80A658;
  word_1ED80A5E2 = (32 * (*a2 & 3)) | word_1ED80A5E2 & 0xFF9F;
  xmmword_1ED80A608 = *a3;
  result = *a4;
  xmmword_1ED80A5F8 = (__int128)*a4;
  return result;
}

void sub_1C6292C38(int **a1, _WORD *a2, __int128 *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80A698, 0, 0);
  dword_1ED80A718 = 0;
  qword_1ED80A720 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED80A728 = 0;
  qword_1ED80A698 = (uint64_t)&unk_1E819E418;
  qword_1ED80A730 = (uint64_t)&unk_1E819E230;
  qword_1ED80A738 = (uint64_t)&off_1E7FA9D80;
  qword_1ED80A750 = (uint64_t)&qword_1ED80A738;
  sub_1C6292CE4(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80A698);
}

__n128 sub_1C6292CE4(int **a1, _WORD *a2, __int128 *a3, __n128 *a4)
{
  int *v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80A698, "import-cutoff", 0xDuLL);
  v8 = *a1;
  dword_1ED80A718 = **a1;
  byte_1ED80A72C = 1;
  dword_1ED80A728 = *v8;
  word_1ED80A6A2 = (32 * (*a2 & 3)) | word_1ED80A6A2 & 0xFF9F;
  xmmword_1ED80A6C8 = *a3;
  result = *a4;
  xmmword_1ED80A6B8 = (__int128)*a4;
  return result;
}

void sub_1C6292D7C(double **a1, _WORD *a2, __int128 *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80A818, 0, 0);
  dword_1ED80A898 = 0;
  qword_1ED80A8A0 = (uint64_t)&unk_1E8139370;
  *(_QWORD *)&dword_1ED80A8A8 = 0;
  qword_1ED80A818 = (uint64_t)&unk_1E8139308;
  qword_1ED80A8B0 = (uint64_t)&unk_1E819E350;
  qword_1ED80A8B8 = (uint64_t)&unk_1E8139390;
  qword_1ED80A8D0 = (uint64_t)&qword_1ED80A8B8;
  sub_1C6292E30(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80A818);
}

__n128 sub_1C6292E30(double **a1, _WORD *a2, __int128 *a3, __n128 *a4)
{
  int v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80A818, "import-instr-evolution-factor", 0x1DuLL);
  *(float *)&v8 = **a1;
  dword_1ED80A898 = v8;
  byte_1ED80A8AC = 1;
  dword_1ED80A8A8 = v8;
  word_1ED80A822 = (32 * (*a2 & 3)) | word_1ED80A822 & 0xFF9F;
  xmmword_1ED80A848 = *a3;
  result = *a4;
  xmmword_1ED80A838 = (__int128)*a4;
  return result;
}

void sub_1C6292EC8(double **a1, _WORD *a2, __int128 *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80A8D8, 0, 0);
  dword_1ED80A958 = 0;
  qword_1ED80A960 = (uint64_t)&unk_1E8139370;
  *(_QWORD *)&dword_1ED80A968 = 0;
  qword_1ED80A8D8 = (uint64_t)&unk_1E8139308;
  qword_1ED80A970 = (uint64_t)&unk_1E819E350;
  qword_1ED80A978 = (uint64_t)&unk_1E8139390;
  qword_1ED80A990 = (uint64_t)&qword_1ED80A978;
  sub_1C6292F7C(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80A8D8);
}

__n128 sub_1C6292F7C(double **a1, _WORD *a2, __int128 *a3, __n128 *a4)
{
  int v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80A8D8, "import-hot-evolution-factor", 0x1BuLL);
  *(float *)&v8 = **a1;
  dword_1ED80A958 = v8;
  byte_1ED80A96C = 1;
  dword_1ED80A968 = v8;
  word_1ED80A8E2 = (32 * (*a2 & 3)) | word_1ED80A8E2 & 0xFF9F;
  xmmword_1ED80A908 = *a3;
  result = *a4;
  xmmword_1ED80A8F8 = (__int128)*a4;
  return result;
}

void sub_1C6293014(double **a1, _WORD *a2, __int128 *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80A998, 0, 0);
  dword_1ED80AA18 = 0;
  qword_1ED80AA20 = (uint64_t)&unk_1E8139370;
  *(_QWORD *)&dword_1ED80AA28 = 0;
  qword_1ED80A998 = (uint64_t)&unk_1E8139308;
  qword_1ED80AA30 = (uint64_t)&unk_1E819E350;
  qword_1ED80AA38 = (uint64_t)&unk_1E8139390;
  qword_1ED80AA50 = (uint64_t)&qword_1ED80AA38;
  sub_1C62930C8(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80A998);
}

__n128 sub_1C62930C8(double **a1, _WORD *a2, __int128 *a3, __n128 *a4)
{
  int v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80A998, "import-hot-multiplier", 0x15uLL);
  *(float *)&v8 = **a1;
  dword_1ED80AA18 = v8;
  byte_1ED80AA2C = 1;
  dword_1ED80AA28 = v8;
  word_1ED80A9A2 = (32 * (*a2 & 3)) | word_1ED80A9A2 & 0xFF9F;
  xmmword_1ED80A9C8 = *a3;
  result = *a4;
  xmmword_1ED80A9B8 = (__int128)*a4;
  return result;
}

void sub_1C6293160(double **a1, _WORD *a2, __int128 *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80AA58, 0, 0);
  dword_1ED80AAD8 = 0;
  qword_1ED80AAE0 = (uint64_t)&unk_1E8139370;
  *(_QWORD *)&dword_1ED80AAE8 = 0;
  qword_1ED80AA58 = (uint64_t)&unk_1E8139308;
  qword_1ED80AAF0 = (uint64_t)&unk_1E819E350;
  qword_1ED80AAF8 = (uint64_t)&unk_1E8139390;
  qword_1ED80AB10 = (uint64_t)&qword_1ED80AAF8;
  sub_1C6293214(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80AA58);
}

__n128 sub_1C6293214(double **a1, _WORD *a2, __int128 *a3, __n128 *a4)
{
  int v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80AA58, "import-critical-multiplier", 0x1AuLL);
  *(float *)&v8 = **a1;
  dword_1ED80AAD8 = v8;
  byte_1ED80AAEC = 1;
  dword_1ED80AAE8 = v8;
  word_1ED80AA62 = (32 * (*a2 & 3)) | word_1ED80AA62 & 0xFF9F;
  xmmword_1ED80AA88 = *a3;
  result = *a4;
  xmmword_1ED80AA78 = (__int128)*a4;
  return result;
}

void sub_1C62932AC(int **a1, _WORD *a2, __int128 *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80AB18, 0, 0);
  dword_1ED80AB98 = 0;
  qword_1ED80ABA0 = (uint64_t)&unk_1E8139370;
  *(_QWORD *)&dword_1ED80ABA8 = 0;
  qword_1ED80AB18 = (uint64_t)&unk_1E8139308;
  qword_1ED80ABB0 = (uint64_t)&unk_1E819E350;
  qword_1ED80ABB8 = (uint64_t)&unk_1E8139390;
  qword_1ED80ABD0 = (uint64_t)&qword_1ED80ABB8;
  sub_1C6293360(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80AB18);
}

__n128 sub_1C6293360(int **a1, _WORD *a2, __int128 *a3, __n128 *a4)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80AB18, "import-cold-multiplier", 0x16uLL);
  *(float *)&dword_1ED80AB98 = (float)**a1;
  byte_1ED80ABAC = 1;
  dword_1ED80ABA8 = dword_1ED80AB98;
  word_1ED80AB22 = (32 * (*a2 & 3)) | word_1ED80AB22 & 0xFF9F;
  xmmword_1ED80AB48 = *a3;
  result = *a4;
  xmmword_1ED80AB38 = (__int128)*a4;
  return result;
}

void sub_1C62933F8(__int128 *a1)
{
  uint64_t v2;

  v2 = sub_1C47AD050((uint64_t)qword_1ED80AED8, 0, 0);
  byte_1ED80AF58 = 0;
  qword_1ED80AF60 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED80AF68 = 0;
  qword_1ED80AED8[0] = (uint64_t)&unk_1E819E898;
  qword_1ED80AF70 = (uint64_t)&off_1E819E9A0;
  qword_1ED80AF78 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED80AF90 = (uint64_t)&qword_1ED80AF78;
  llvm::cl::Option::setArgStr(v2, "import-all-index", 0x10uLL);
  xmmword_1ED80AEF8 = *a1;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED80AED8);
}

uint64_t *sub_1C6293494(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  i = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == -8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  v10 = (char *)operator new(a3 + 49, (std::align_val_t)8uLL);
  v11 = v10;
  v12 = v10 + 48;
  if (a3)
    memcpy(v10 + 48, a2, a3);
  v12[a3] = 0;
  *(_QWORD *)v11 = a3;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *((_DWORD *)v11 + 10) = 1065353216;
  *i = (uint64_t)v11;
  ++*(_DWORD *)(a1 + 12);
  for (i = (uint64_t *)(*(_QWORD *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i == -8;
  return i;
}

void sub_1C62935A0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  char v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v13 = 0;
  v8 = sub_1C62936B0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v13);
  v9 = v13;
  if ((v8 & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    sub_1C629362C(a2, v13, a3, a4);
    v9 = v12;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + ((unint64_t)*(unsigned int *)(a2 + 16) << 6);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
}

__n128 sub_1C629362C(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v6;
  int v7;
  int v8;
  __n128 result;

  v6 = sub_1C6293744(a1, a3, a2);
  *v6 = *a3;
  *(_OWORD *)(v6 + 1) = *(_OWORD *)a4;
  *((_DWORD *)v6 + 10) = 0;
  v6[3] = 0;
  v6[4] = 0;
  v6[3] = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = 0;
  *((_DWORD *)v6 + 8) = *(_DWORD *)(a4 + 24);
  *(_DWORD *)(a4 + 24) = 0;
  v7 = *((_DWORD *)v6 + 9);
  *((_DWORD *)v6 + 9) = *(_DWORD *)(a4 + 28);
  *(_DWORD *)(a4 + 28) = v7;
  v8 = *((_DWORD *)v6 + 10);
  *((_DWORD *)v6 + 10) = *(_DWORD *)(a4 + 32);
  *(_DWORD *)(a4 + 32) = v8;
  result = *(__n128 *)(a4 + 40);
  *((__n128 *)v6 + 3) = result;
  return result;
}

uint64_t sub_1C62936B0(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(a1 + (v4 << 6));
    v6 = *v5;
    if (*v5 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = (_QWORD *)(a1 + (v4 << 6));
        v6 = *v5;
        v7 = 1;
        if (*v5 == a3)
          goto LABEL_4;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_4:
  *a4 = v5;
  return v7;
}

_QWORD *sub_1C6293744(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C56DBADC(a1, v6);
  v8 = 0;
  sub_1C62936B0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C62937F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  int v12;
  _QWORD *v13;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = v6 << 6;
    do
    {
      *v7 = -4096;
      v7 += 8;
      v8 -= 64;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v13 = 0;
      sub_1C62936B0(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v13);
      v10 = v13;
      *v13 = *(_QWORD *)a2;
      *(_OWORD *)(v10 + 1) = *(_OWORD *)(a2 + 8);
      *((_DWORD *)v10 + 10) = 0;
      v10[3] = 0;
      v10[4] = 0;
      v10[3] = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = 0;
      *((_DWORD *)v10 + 8) = *(_DWORD *)(a2 + 32);
      *(_DWORD *)(a2 + 32) = 0;
      v11 = *((_DWORD *)v10 + 9);
      *((_DWORD *)v10 + 9) = *(_DWORD *)(a2 + 36);
      *(_DWORD *)(a2 + 36) = v11;
      v12 = *((_DWORD *)v10 + 10);
      *((_DWORD *)v10 + 10) = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a2 + 40) = v12;
      *((_OWORD *)v10 + 3) = *(_OWORD *)(a2 + 48);
      ++*(_DWORD *)(v5 + 8);
      result = MEMORY[0x1CAA32FB4](*(_QWORD *)(a2 + 24), 8);
    }
    a2 += 64;
  }
  return result;
}

uint64_t sub_1C62938FC(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v16 = 0;
  result = sub_1C617D1A8(a2, *a3, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v10 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v11 = 8;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(unsigned int *)(a2 + 16);
    }
    v12 = 0;
    v13 = v10 + 16 * v11;
  }
  else
  {
    result = (uint64_t)sub_1C62939C4((_DWORD *)a2, a3, v16);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v14 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v15 = 8;
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(unsigned int *)(a2 + 16);
    }
    v13 = v14 + 16 * v15;
    v12 = 1;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v12;
  return result;
}

_QWORD *sub_1C62939C4(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 8;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C56DBF80((uint64_t)a1, v6);
  v8 = 0;
  sub_1C617D1A8((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_1C6293A80(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C617D1A8((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1C6293B48(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  sub_1C485C2F0();
  return sub_1C6293B6C();
}

_QWORD *sub_1C6293B6C(_DWORD *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C617D1A8((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C62939C4(a1, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

_QWORD *sub_1C6293BD0(_QWORD *result)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if ((v1 & 1) != 0)
    {
      v3 = result + 1;
      v4 = result + 17;
    }
    else
    {
      v2 = *((unsigned int *)result + 4);
      if (((2 * v1) & 0xFFFFFFFC) < v2 && v2 >= 0x41)
        return sub_1C560D504(result);
      if (!(_DWORD)v2)
      {
        v5 = 0;
LABEL_10:
        *(_DWORD *)result = v5;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      v3 = (_QWORD *)result[1];
      v4 = &v3[2 * v2];
    }
    do
    {
      *v3 = -4096;
      v3 += 2;
    }
    while (v3 != v4);
    v5 = *(_DWORD *)result & 1;
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1C6293C48(uint64_t result, unsigned int a2)
{
  _QWORD *v2;
  unint64_t v3;

  if (a2)
  {
    v2 = (_QWORD *)result;
    v3 = (unint64_t)a2 << 6;
    do
    {
      if ((*v2 | 0x1000) != 0xFFFFFFFFFFFFF000)
        result = MEMORY[0x1CAA32FB4](v2[3], 8);
      v2 += 8;
      v3 -= 64;
    }
    while (v3);
  }
  return result;
}

void sub_1C6293C94(char **a1, _WORD *a2, __n128 *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED80B500, 0, 0);
  byte_1ED80B580 = 0;
  qword_1ED80B588 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED80B590 = 0;
  qword_1ED80B500 = (uint64_t)&unk_1E819E898;
  qword_1ED80B598 = (uint64_t)&off_1E819E9A0;
  qword_1ED80B5A0 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED80B5B8 = (uint64_t)&qword_1ED80B5A0;
  sub_1C56DD638(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80B500);
}

_QWORD *sub_1C6293D38(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E817A118;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_1C6293D94(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E817A118;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6293E00(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_1E817A118;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    }
    else
    {
      v2[4] = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
    }
  }
  else
  {
    v2[4] = 0;
  }
  return v2;
}

uint64_t sub_1C6293E7C(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_1E817A118;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

_QWORD *sub_1C6293EF0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1C6293F24(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t sub_1C6293F74(uint64_t a1)
{
  uint64_t v1;
  llvm *v3;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  sub_1C485C2F0();
  return llvm::createGlobalDCEPass(v3);
}

uint64_t llvm::createGlobalDCEPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C56DDA18(v1);
}

int32x2_t sub_1C6293FC0(uint64_t a1, uint64_t a2)
{
  int32x2_t result;
  _QWORD *v4;
  void *v5;
  uint64_t v6;

  v6 = 0;
  if (sub_1C6294540(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v6))
  {
    v4 = (_QWORD *)v6;
    v5 = *(void **)(v6 + 16);
    if (v5 != *(void **)(v6 + 8))
      free(v5);
    *v4 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

void llvm::GlobalDCEPass::ScanTypeCheckedLoadIntrinsics(llvm::GlobalDCEPass *this, llvm::Module *a2)
{
  unsigned __int8 *Name;
  unint64_t v5;
  uint64_t Function;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v9;

  Name = (unsigned __int8 *)llvm::Intrinsic::getName((llvm::Intrinsic *)0x129);
  Function = llvm::Module::getFunction((uint64_t)a2, Name, v5);
  v7 = (unsigned __int8 *)llvm::Intrinsic::getName((llvm::Intrinsic *)0x12A);
  v9 = llvm::Module::getFunction((uint64_t)a2, v7, v8);
  sub_1C56DEE2C(this, Function);
  sub_1C56DEE2C(this, v9);
}

void llvm::GlobalDCEPass::PropagateLivenessToConditionallyUsed(llvm::GlobalDCEPass *this, llvm::Module *a2)
{
  uint64_t GlobalVariable;
  llvm::GlobalVariable *v5;
  uint64_t NamedMetadata;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  llvm::Value **v11;
  uint64_t v12;
  llvm::Value *v13;
  llvm::Value *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  _WORD v26[32];

  GlobalVariable = llvm::Module::getGlobalVariable((uint64_t)a2, "llvm.used", 9uLL, 0);
  if (GlobalVariable)
  {
    v5 = (llvm::GlobalVariable *)GlobalVariable;
    v22 = "llvm.used.conditional";
    v26[0] = 259;
    NamedMetadata = llvm::Module::getNamedMetadata((uint64_t)a2, (uint64_t)&v22);
    if (NamedMetadata)
    {
      v7 = NamedMetadata;
      v22 = (const char *)v26;
      v23 = (char *)v26;
      v24 = 8;
      v25 = 0;
      v8 = *((_QWORD *)v5 - 4);
      v9 = *(_DWORD *)(v8 + 20);
      if ((v9 & 0x40000000) != 0)
      {
        v11 = *(llvm::Value ***)(v8 - 8);
        v10 = v9 & 0x7FFFFFF;
      }
      else
      {
        v10 = v9 & 0x7FFFFFF;
        v11 = (llvm::Value **)(v8 - 32 * v10);
      }
      if (v10)
      {
        v12 = 32 * v10;
        do
        {
          v13 = *v11;
          v11 += 4;
          v14 = llvm::Value::stripPointerCasts(v13);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v22, (uint64_t)v14);
          v12 -= 32;
        }
        while (v12);
      }
      do
      {
        llvm::GlobalDCEPass::PropagateLivenessInGlobalValues(this);
        v20 = *(unsigned int *)(*(_QWORD *)(v7 + 48) + 8);
        if (!(_DWORD)v20)
          break;
        v15 = 0;
        v16 = HIDWORD(v24) - v25;
        v17 = 8 * v20;
        do
        {
          v18 = llvm::GlobalDCEPass::TargetFromConditionalUsedIfLive(this, *(llvm::MDNode **)(**(_QWORD **)(v7 + 48) + v15));
          if (v18)
          {
            v19 = v18;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v22, v18);
            llvm::GlobalDCEPass::MarkLive(this, v19, 0);
          }
          v15 += 8;
        }
        while (v17 != v15);
      }
      while (HIDWORD(v24) - v25 != v16);
      v21 = llvm::setUsedInitializer(v5, (uint64_t)&v22);
      llvm::GlobalDCEPass::MarkLive(this, (uint64_t)v21, 0);
      if (v23 != v22)
        free(v23);
    }
  }
}

uint64_t sub_1C6294244(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      sub_1C47A82D8(v5, a2, &v11);
      v9 = v11;
      *v11 = *a2;
      v10 = a2[1];
      a2[1] = 0;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
      result = a2[1];
      a2[1] = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    a2 += 2;
  }
  return result;
}

void sub_1C6294318()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6294330(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E817A230;
  v2 = a1[1];
  if (v2)
  {
    sub_1C4EA4BEC((_DWORD *)(v2 + 48));
    sub_1C5428BE0((_DWORD *)(v2 + 24));
  }
  return a1;
}

void sub_1C6294378(_WORD *a1, char **a2, _WORD *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80B5C0, 0, 0);
  byte_1ED80B640 = 0;
  qword_1ED80B648 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED80B650 = 0;
  qword_1ED80B5C0 = (uint64_t)&unk_1E819E898;
  qword_1ED80B658 = (uint64_t)&off_1E819E9A0;
  qword_1ED80B660 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED80B678 = (uint64_t)&qword_1ED80B660;
  sub_1C629442C(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80B5C0);
}

__n128 sub_1C629442C(_WORD *a1, char **a2, _WORD *a3, __n128 *a4)
{
  char *v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80B5C0, "enable-vfe", 0xAuLL);
  word_1ED80B5CA = word_1ED80B5CA & 0xFF9F | (32 * (*a1 & 3));
  v8 = *a2;
  byte_1ED80B640 = **a2;
  byte_1ED80B651 = 1;
  byte_1ED80B650 = *v8;
  word_1ED80B5CA = word_1ED80B5CA & 0xFFF8 | *a3 & 7;
  result = *a4;
  xmmword_1ED80B5E0 = (__int128)*a4;
  return result;
}

_QWORD *sub_1C62944C0(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6294540(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C62945DC(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 5;
    v5[2] = v5 + 5;
    v5[3] = 8;
    *((_DWORD *)v5 + 8) = 0;
  }
  return v5;
}

uint64_t sub_1C6294540(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 104 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 104 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C62945DC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C56E0CF0(a1, v6);
  v8 = 0;
  sub_1C6294540(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_1C629468C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  void *v11;
  void *v12;
  uint64_t *v13;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 104 * v6;
    do
    {
      *v7 = -4096;
      v7 += 13;
      v8 -= 104;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v13 = 0;
      sub_1C6294540(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
      v10 = v13;
      v11 = v13 + 5;
      *v13 = *a2;
      llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(v10 + 1), v11, 8, a2 + 1);
      ++*(_DWORD *)(a1 + 8);
      v12 = (void *)a2[2];
      if (v12 != (void *)a2[1])
        free(v12);
    }
    a2 += 13;
  }
}

_QWORD *sub_1C629475C(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *sub_1C629484C(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_1C61DE758(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C62948E8(a1, a2, v8);
    v7 = *a2;
    *(_OWORD *)(v5 + 9) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *v5 = v7;
    v5[1] = v5 + 3;
    v5[2] = 0x400000000;
    v5[13] = 0;
    v5[12] = 0;
    v5[11] = v5 + 12;
  }
  return v5;
}

_QWORD *sub_1C62948E8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C56E1168(a1, v6);
  v8 = 0;
  sub_1C61DE758(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_1C6294998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 112 * v6;
    do
    {
      *v7 = -4096;
      v7 += 14;
      v8 -= 112;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      sub_1C61DE758(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v12);
      v10 = v12;
      *v12 = *(_QWORD *)a2;
      sub_1C6294A70(v10 + 1, a2 + 8);
      ++*(_DWORD *)(a1 + 8);
      sub_1C47655E8(a2 + 88, *(_QWORD **)(a2 + 96));
      v11 = *(void **)(a2 + 8);
      if ((void *)(a2 + 24) != v11)
        free(v11);
    }
    a2 += 112;
  }
}

_QWORD *sub_1C6294A70(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *result = result + 2;
  result[1] = 0x400000000;
  if (*(_DWORD *)(a2 + 8))
    result = (_QWORD *)sub_1C4E85538((uint64_t)result, a2);
  result[10] = *(_QWORD *)(a2 + 80);
  v3 = (_QWORD *)(a2 + 88);
  v4 = *(_QWORD *)(a2 + 88);
  result[11] = v4;
  v5 = result + 11;
  v6 = *(_QWORD *)(a2 + 96);
  result[12] = v6;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    *(_QWORD *)(a2 + 80) = v3;
    *v3 = 0;
    *(_QWORD *)(a2 + 96) = 0;
  }
  else
  {
    result[10] = v5;
  }
  return result;
}

uint64_t **sub_1C6294AE8(uint64_t a1, unint64_t a2, unint64_t a3, _OWORD *a4)
{
  uint64_t **result;
  uint64_t **v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  result = (uint64_t **)sub_1C509C468(a1, &v12, a2, a3);
  if (!*result)
  {
    v7 = result;
    v8 = operator new(0x30uLL);
    v8[2] = *a4;
    v9 = v12;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v9;
    *v7 = (uint64_t *)v8;
    v10 = **(_QWORD **)a1;
    if (v10)
    {
      *(_QWORD *)a1 = v10;
      v11 = *v7;
    }
    else
    {
      v11 = (uint64_t *)v8;
    }
    result = (uint64_t **)sub_1C4768E74(*(uint64_t **)(a1 + 8), v11);
    ++*(_QWORD *)(a1 + 16);
  }
  return result;
}

uint64_t sub_1C6294B88(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

_QWORD *sub_1C6294B94(_QWORD *a1, __int128 *a2)
{
  _OWORD *v4;
  __int128 v5;
  unint64_t v6;

  v4 = operator new(0x20uLL);
  v5 = *a2;
  v4[1] = *a2;
  v6 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ DWORD1(v5));
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0x9DDFEA08EB382D69
                      * ((0x9DDFEA08EB382D69 * (DWORD1(v5) ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69
                                                                                   * (DWORD1(v5) ^ (v6 >> 47) ^ v6)) >> 47));
  return sub_1C6294C0C(a1, v4);
}

_QWORD *sub_1C6294C0C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v4 = a2 + 2;
  v5 = a2[2];
  v6 = HIDWORD(v5);
  v7 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  a2[1] = v8;
  v9 = sub_1C483D8EC((uint64_t)a1, v8, v4);
  sub_1C6294C88(a1, a2, v9);
  return a2;
}

_QWORD *sub_1C6294C88(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_15;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_14:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_15;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_14;
  }
LABEL_15:
  ++result[3];
  return result;
}

uint64_t llvm::createGlobalOptimizerPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C56E336C(v1);
}

uint64_t sub_1C6294D98(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))a1)(*(_QWORD *)(a1 + 8));
}

void sub_1C6294DA0(__n128 *a1, char **a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED80B680, 0, 0);
  byte_1ED80B700 = 0;
  qword_1ED80B708 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED80B710 = 0;
  qword_1ED80B680 = (uint64_t)&unk_1E819E898;
  qword_1ED80B718 = (uint64_t)&off_1E819E9A0;
  qword_1ED80B720 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED80B738 = (uint64_t)&qword_1ED80B720;
  sub_1C56EB2F8(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80B680);
}

void sub_1C6294E44(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80B740, 0, 0);
  dword_1ED80B7C0 = 0;
  qword_1ED80B7C8 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED80B7D0 = 0;
  qword_1ED80B740 = (uint64_t)&unk_1E819E418;
  qword_1ED80B7D8 = (uint64_t)&unk_1E819E230;
  qword_1ED80B7E0 = (uint64_t)&off_1E7FA9D80;
  qword_1ED80B7F8 = (uint64_t)&qword_1ED80B7E0;
  sub_1C6294EF0(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80B740);
}

__n128 sub_1C6294EF0(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  int *v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80B740, "coldcc-rel-freq", 0xFuLL);
  word_1ED80B74A = word_1ED80B74A & 0xFF9F | (32 * (*a1 & 3));
  v8 = *a2;
  dword_1ED80B7C0 = **a2;
  byte_1ED80B7D4 = 1;
  dword_1ED80B7D0 = *v8;
  word_1ED80B74A = word_1ED80B74A & 0xFFF8 | *a3 & 7;
  result = *a4;
  xmmword_1ED80B760 = (__int128)*a4;
  return result;
}

uint64_t llvm::GlobalSplitPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = sub_1C56EB6C4(a1);
  if ((result & 1) == 0)
    return (uint64_t)llvm::InstCountPass::run(a2);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = a2 + 32;
  *(_QWORD *)(a2 + 8) = a2 + 32;
  *(_QWORD *)(a2 + 16) = 2;
  *(_QWORD *)(a2 + 48) = a2 + 80;
  *(_QWORD *)(a2 + 56) = a2 + 80;
  *(_DWORD *)(a2 + 64) = 2;
  return result;
}

_QWORD *llvm::HotColdSplittingPass::run@<X0>(llvm::Module *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  void (**v7)(_QWORD *);
  uint64_t v8;
  _QWORD *result;
  uint64_t (**v10)(_QWORD *);
  llvm::ProfileSummaryInfo *v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a2, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, (uint64_t)a1)+ 8);
  v14 = v13;
  v17[0] = &off_1E817A4C0;
  v17[1] = v13;
  v18 = v17;
  v12 = 0;
  v15[0] = &off_1E817A508;
  v15[1] = &v12;
  v16 = v15;
  v11[0] = (llvm::ProfileSummaryInfo *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a2, &llvm::ProfileSummaryAnalysis::Key, (uint64_t)a1)+ 8);
  v11[1] = (llvm::ProfileSummaryInfo *)sub_1C56EF6CC;
  v11[2] = (llvm::ProfileSummaryInfo *)&v13;
  v11[3] = (llvm::ProfileSummaryInfo *)sub_1C56EF6F4;
  v11[4] = (llvm::ProfileSummaryInfo *)v17;
  v11[5] = (llvm::ProfileSummaryInfo *)v15;
  v11[6] = (llvm::ProfileSummaryInfo *)sub_1C56EF718;
  v11[7] = (llvm::ProfileSummaryInfo *)&v14;
  if (llvm::HotColdSplitting::run(v11, a1))
  {
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)(a3 + 88) = 0;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_DWORD *)(a3 + 64) = 2;
  }
  else
  {
    llvm::InstCountPass::run(a3);
  }
  v6 = v16;
  if (v16 == v15)
  {
    v7 = (void (**)(_QWORD *))(v15[0] + 32);
    v6 = v15;
LABEL_5:
    (*v7)(v6);
    goto LABEL_6;
  }
  if (v16)
  {
    v7 = (void (**)(_QWORD *))(*v16 + 40);
    goto LABEL_5;
  }
LABEL_6:
  v8 = v12;
  v12 = 0;
  if (v8)
    sub_1C4EF268C((uint64_t)&v12, v8);
  result = v18;
  if (v18 == v17)
  {
    v10 = (uint64_t (**)(_QWORD *))(v17[0] + 32);
    result = v17;
    return (_QWORD *)(*v10)(result);
  }
  if (v18)
  {
    v10 = (uint64_t (**)(_QWORD *))(*v18 + 40);
    return (_QWORD *)(*v10)(result);
  }
  return result;
}

uint64_t llvm::createHotColdSplittingPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C56EE9B4(v1);
}

void sub_1C62951F0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *__p;
  _BYTE *v6;

  sub_1C6295314((uint64_t)&v3, a2);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)a1, (const void **)(a1 + 32), (const llvm::SmallPtrSetImplBase *)&v3);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  a1 += 96;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1C4D6CDA0((_QWORD *)a1, __p, v6, 0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)__p) >> 3));
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  if (v4 != v3)
    free(v4);
}

void sub_1C6295278(const void **a1)
{
  llvm::SmallPtrSetImplBase *v1;
  char *v2;
  char *v3;
  uint64_t v4;
  _OWORD v5[4];
  uint64_t v6;
  void *__p;
  _BYTE *v8;
  uint64_t v9;

  v6 = 0;
  __p = 0;
  memset(v5, 0, sizeof(v5));
  v2 = (char *)v5 + 8;
  v3 = (char *)v5 + 8;
  v4 = 8;
  v8 = 0;
  v9 = 0;
  v1 = llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)a1, a1 + 4, (const llvm::SmallPtrSetImplBase *)&v2);
  *((_QWORD *)v1 + 12) = 0;
  *((_QWORD *)v1 + 13) = 0;
  v1 = (llvm::SmallPtrSetImplBase *)((char *)v1 + 96);
  *((_QWORD *)v1 + 2) = 0;
  sub_1C4D6CDA0(v1, __p, v8, 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)__p) >> 3));
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  if (v3 != v2)
    free(v3);
}

uint64_t sub_1C6295314(uint64_t a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  char *v6;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v4 = (void **)(a1 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, a2);
  *(_QWORD *)&v9 = a2;
  BYTE8(v9) = 0;
  LOBYTE(v10) = 0;
  v5 = *(_QWORD *)(a1 + 104);
  if (v5 < *(_QWORD *)(a1 + 112))
  {
    v8 = v9;
    *(_QWORD *)(v5 + 16) = v10;
    *(_OWORD *)v5 = v8;
    v6 = (char *)(v5 + 24);
  }
  else
  {
    v6 = sub_1C4D8DBBC(v4, (uint64_t)&v9);
  }
  *(_QWORD *)(a1 + 104) = v6;
  return a1;
}

uint64_t sub_1C62953B0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_1C51E3E94(a1, a2, a3);
  v4 = *(_QWORD *)a1 + 16 * v3;
  *(_QWORD *)v4 = a2;
  *(_DWORD *)(v4 + 8) = a3;
  *(_DWORD *)(a1 + 8) = v3 + 1;
  return a1;
}

void sub_1C62953DC(int **a1, _WORD *a2, __n128 *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED80B8C0, 0, 0);
  dword_1ED80B940 = 0;
  qword_1ED80B948 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED80B950 = 0;
  qword_1ED80B8C0 = (uint64_t)&unk_1E819E418;
  qword_1ED80B958 = (uint64_t)&unk_1E819E230;
  qword_1ED80B960 = (uint64_t)&off_1E7FA9D80;
  qword_1ED80B978 = (uint64_t)&qword_1ED80B960;
  sub_1C56EF464(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80B8C0);
}

__n128 sub_1C6295478(const char **a1, _WORD *a2, __n128 *a3)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80BB00, "hotcoldsplit-cold-section-name", 0x1EuLL);
  sub_1C49C7D74(a1, (uint64_t)&qword_1ED80BB00);
  word_1ED80BB0A = (32 * (*a2 & 3)) | word_1ED80BB0A & 0xFF9F;
  result = *a3;
  xmmword_1ED80BB20 = (__int128)*a3;
  return result;
}

void sub_1C62954EC(int **a1, _WORD *a2, __n128 *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED80BA40, 0, 0);
  dword_1ED80BAC0 = 0;
  qword_1ED80BAC8 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED80BAD0 = 0;
  qword_1ED80BA40 = (uint64_t)&unk_1E819E418;
  qword_1ED80BAD8 = (uint64_t)&unk_1E819E230;
  qword_1ED80BAE0 = (uint64_t)&off_1E7FA9D80;
  qword_1ED80BAF8 = (uint64_t)&qword_1ED80BAE0;
  sub_1C56EF4E8(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80BA40);
}

uint64_t llvm::OutlinableRegion::reattachCandidate(llvm::OutlinableRegion *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  llvm::Instruction *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t *v14;
  unsigned __int8 *v15;
  llvm::Instruction *v16;
  llvm::BasicBlock *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v22[2];
  int v23;

  v2 = *((_QWORD *)this + 28);
  v3 = *(_QWORD *)(v2 + 40);
  if (v3 == v2 + 40)
  {
    v5 = 0;
  }
  else
  {
    if (v3)
      v4 = (unsigned __int8 *)(v3 - 24);
    else
      v4 = 0;
    if (v4[16] - 29 >= 0xB)
      v5 = 0;
    else
      v5 = (llvm::Instruction *)v4;
  }
  llvm::Instruction::eraseFromParent(v5);
  if (!*((_QWORD *)this + 26))
  {
    v22[0] = 0;
    v22[1] = 0;
    v23 = 0;
    sub_1C4E327B0(*(_QWORD *)this, (uint64_t)v22);
    sub_1C56F0800(*((_QWORD *)this + 29), *((_QWORD *)this + 29), *((_QWORD *)this + 28), (uint64_t)v22);
    if (!*((_BYTE *)this + 105))
      sub_1C56F0800(*((_QWORD *)this + 31), *((_QWORD *)this + 31), *((_QWORD *)this + 30), (uint64_t)v22);
    MEMORY[0x1CAA32FB4](v22[0], 8);
  }
  v7 = (uint64_t *)*((_QWORD *)this + 28);
  v6 = *((_QWORD *)this + 29);
  v8 = v6 + 40;
  v9 = *(_QWORD *)(v6 + 48);
  if (v9 != v6 + 40)
  {
    do
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v9)
        v11 = (_QWORD *)(v9 - 24);
      else
        v11 = 0;
      llvm::Instruction::moveBefore(v11, (uint64_t)v7, v7 + 5);
      v9 = v10;
    }
    while (v10 != v8);
    v7 = (uint64_t *)*((_QWORD *)this + 28);
    v6 = *((_QWORD *)this + 29);
  }
  if (v6 != *((_QWORD *)this + 30))
    v7 = (uint64_t *)*((_QWORD *)this + 30);
  if (!*((_BYTE *)this + 105) && llvm::BasicBlock::getUniqueSuccessor((llvm::BasicBlock *)v7))
  {
    v14 = (uint64_t *)v7[5];
    if (v14 == v7 + 5)
    {
      v16 = 0;
    }
    else
    {
      if (v14)
        v15 = (unsigned __int8 *)(v14 - 3);
      else
        v15 = 0;
      if (v15[16] - 29 >= 0xB)
        v16 = 0;
      else
        v16 = (llvm::Instruction *)v15;
    }
    llvm::Instruction::eraseFromParent(v16);
    v17 = (llvm::BasicBlock *)*((_QWORD *)this + 31);
    v18 = (_QWORD *)((char *)v17 + 40);
    v19 = (_QWORD *)*((_QWORD *)v17 + 6);
    if (v19 != (_QWORD *)((char *)v17 + 40))
    {
      do
      {
        v20 = (_QWORD *)v19[1];
        if (v19)
          v21 = v19 - 3;
        else
          v21 = 0;
        llvm::Instruction::moveBefore(v21, (uint64_t)v7, v7 + 5);
        v19 = v20;
      }
      while (v20 != v18);
      v17 = (llvm::BasicBlock *)*((_QWORD *)this + 31);
    }
    llvm::BasicBlock::replaceSuccessorsPhiUsesWith((llvm::BasicBlock *)v7, v17, (llvm::BasicBlock *)v7);
    llvm::BasicBlock::eraseFromParent(*((llvm::BasicBlock **)this + 31));
  }
  llvm::BasicBlock::replaceSuccessorsPhiUsesWith(*((llvm::BasicBlock **)this + 28), *((llvm::BasicBlock **)this + 29), *((llvm::BasicBlock **)this + 28));
  result = llvm::BasicBlock::eraseFromParent(*((llvm::BasicBlock **)this + 29));
  v13 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = v13;
  *((_BYTE *)this + 216) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  return result;
}

uint64_t **OutlinableGroup::collectGVNStoreSets(uint64_t **this, llvm::Module *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  __int128 v10;
  _BYTE v11[24];

  v3 = (uint64_t)this;
  v4 = *this;
  v5 = this[1];
  if (*this != v5)
  {
    do
    {
      v6 = *v4++;
      v7 = *(unsigned int *)(v6 + 168);
      *(_QWORD *)&v10 = *(_QWORD *)(v6 + 160);
      *((_QWORD *)&v10 + 1) = v7;
      this = (uint64_t **)sub_1C62968E0((uint64_t)v11, v3 + 120, &v10);
    }
    while (v4 != v5);
  }
  if (*(_DWORD *)(v3 + 128) > 1u)
  {
    v8 = **(_QWORD **)a2 + 1960;
    v9 = *(uint64_t **)(v3 + 32);
    if ((unint64_t)v9 >= *(_QWORD *)(v3 + 40))
    {
      this = (uint64_t **)sub_1C4ABDC28((void **)(v3 + 24), v8);
    }
    else
    {
      *v9 = v8;
      this = (uint64_t **)(v9 + 1);
    }
    *(_QWORD *)(v3 + 32) = this;
  }
  return this;
}

uint64_t llvm::IROutliner::isCompatibleWithAlreadyOutlinedCode(llvm::IROutliner *this, unsigned int **a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned __int8 *v8;
  uint64_t NextNonDebugInstruction;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int v20;

  v4 = *a2;
  v5 = **a2;
  v6 = v5 + (*a2)[1] - 1;
  v20 = v5;
  v7 = v4;
  if (v5 <= v6)
  {
    while ((int *)(*((_QWORD *)this + 1) + 4 * *((unsigned int *)this + 6)) == sub_1C61940B0((uint64_t *)this + 1, &v20))
    {
      if (++v20 > v6)
      {
        v7 = *a2;
        goto LABEL_2;
      }
    }
    return 0;
  }
  else
  {
LABEL_2:
    v8 = *(unsigned __int8 **)(*((_QWORD *)v7 + 2) + 16);
    if (v8[16] - 29 >= 0xB)
    {
      NextNonDebugInstruction = llvm::Instruction::getNextNonDebugInstruction((llvm::Instruction *)v8, 0);
      if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*a2 + 2) + 8) + 16) != NextNonDebugInstruction)
      {
        v14 = NextNonDebugInstruction;
        v15 = *(_QWORD *)(*((_QWORD *)*a2 + 1) + 152);
        v16 = sub_1C484358C((uint64_t)this + 296, 160, 3);
        v17 = sub_1C62959A0((uint64_t)this + 392, v14);
        llvm::IRSimilarity::IRInstructionData::IRInstructionData(v16, v14, v17, v15);
        v18 = *(unint64_t **)(*((_QWORD *)*a2 + 2) + 8);
        v19 = *v18 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v16 = v19 | *(_QWORD *)v16 & 7;
        *(_QWORD *)(v16 + 8) = v18;
        *(_QWORD *)(v19 + 8) = v16;
        *v18 = *v18 & 7 | v16;
      }
    }
    v10 = *((_QWORD *)v4 + 1);
    v11 = *(_QWORD *)(*((_QWORD *)v4 + 2) + 8);
    if (v10 == v11)
    {
      return 1;
    }
    else
    {
      v12 = (char *)this + 392;
      while (1)
      {
        result = sub_1C56FC2D4(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 16), *(llvm::Instruction **)(v10 + 16));
        if (!(_DWORD)result)
          break;
        result = sub_1C62959A0((uint64_t)v12, *(_QWORD *)(v10 + 16));
        if (!(_DWORD)result)
          break;
        v10 = *(_QWORD *)(v10 + 8);
        if (v10 == v11)
          return 1;
      }
    }
  }
  return result;
}

uint64_t sub_1C62959A0(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_1C62959C8 + 4
                                                                 * byte_1C866035E[*(unsigned __int8 *)(a2 + 16) - 29]))(0);
}

uint64_t sub_1C62959C8()
{
  return 1;
}

BOOL sub_1C62959D0@<W0>(unsigned __int8 *a1@<X8>)
{
  return *a1 != 0;
}

uint64_t sub_1C62959E0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1C6296A18(a2, a1);
}

unint64_t llvm::IROutliner::findBenefitFromAllRegions(llvm::IROutliner *this, llvm::OutlinableRegion ***a2)
{
  llvm::OutlinableRegion **v2;
  llvm::OutlinableRegion **v3;
  unint64_t v5;
  llvm::OutlinableRegion *v6;
  llvm::TargetTransformInfo *v7;
  unint64_t Benefit;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0;
  v5 = 0;
  do
  {
    v6 = *v2++;
    v7 = (llvm::TargetTransformInfo *)(*((uint64_t (**)(_QWORD, _QWORD))this + 4))(*((_QWORD *)this + 5), *(_QWORD *)(*((_QWORD *)v6 + 29) + 56));
    Benefit = llvm::OutlinableRegion::getBenefit(v6, v7);
    if (__OFADD__(v5, Benefit))
      v5 = ((uint64_t)(v5 + Benefit) >> 63) ^ 0x8000000000000000;
    else
      v5 += Benefit;
  }
  while (v2 != v3);
  return v5;
}

unint64_t llvm::IROutliner::findCostOutputReloads(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0;
  v5 = 0;
  do
  {
    v6 = *v2;
    v7 = (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(*v2 + 232) + 56));
    v8 = *(unsigned int *)(v6 + 168);
    if ((_DWORD)v8)
    {
      v9 = (_QWORD *)v7;
      v10 = *(unsigned int **)(v6 + 160);
      v11 = 4 * v8;
      do
      {
        v12 = *v10++;
        v13 = (_QWORD *)sub_1C56F6708(*(_QWORD *)v6, *(_QWORD *)(v6 + 256), v12);
        v14 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)*v9
                                                                                                  + 888))(*v9, 32, *v13, 0, 0, 2, 0);
        if (__OFADD__(v5, v14))
          v5 = ((uint64_t)(v5 + v14) >> 63) ^ 0x8000000000000000;
        else
          v5 += v14;
        v11 -= 4;
      }
      while (v11);
    }
    ++v2;
  }
  while (v2 != v3);
  return v5;
}

uint64_t llvm::IROutliner::updateOutputMapping(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v9 = *(_QWORD *)(a5 - 32);
  v10 = *(unsigned int *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 200);
  result = sub_1C4DD000C(v11);
  if (v10 < ((result - (v11 + 32 * (unint64_t)-(*(_DWORD *)(v11 + 20) & 0x7FFFFFF))) >> 5))
  {
    for (i = 32 * v10; ; i += 32)
    {
      v14 = *(_QWORD *)(a2 + 200);
      if (v9 == *(_QWORD *)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF) + i))
        break;
      ++v10;
      result = sub_1C4DD000C(*(_QWORD *)(a2 + 200));
      if (v10 >= ((result - (v14 + 32 * (unint64_t)-(*(_DWORD *)(v14 + 20) & 0x7FFFFFF))) >> 5))
        return result;
    }
    v15 = (v10 - *(_DWORD *)(a2 + 24));
    v19 = *(_QWORD *)(a3 + 8 * v15);
    v18[0] = 0;
    if (!sub_1C4926528(a1 + 48, &v19, v18)
      || v18[0] == *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64))
    {
      v17 = *(_QWORD *)(a3 + 8 * v15);
    }
    else
    {
      v19 = *(_QWORD *)(a3 + 8 * v15);
      v18[0] = 0;
      if ((sub_1C4926528(a1 + 48, &v19, v18) & 1) != 0)
        v16 = v18[0];
      else
        v16 = *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
      v17 = *(_QWORD *)(v16 + 8);
    }
    v19 = a5;
    v20 = v17;
    return sub_1C509BD8C(a1 + 48, &v19, &v20, (uint64_t)v18);
  }
  return result;
}

_QWORD *llvm::IROutlinerPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  llvm::Module *v4;
  uint64_t v6;
  void (**v7)(void);
  uint64_t v8;
  _QWORD *v9;
  void (**v10)(_QWORD *);
  _QWORD *result;
  uint64_t (**v12)(_QWORD *);
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t (*v18)(uint64_t);
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t (*v23)(uint64_t);
  _QWORD *v24;
  uint64_t (*v25)(uint64_t);
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD v31[12];
  _QWORD v32[12];
  _QWORD v33[6];
  _QWORD v34[2];
  char v35;
  __int16 v36;
  char v37;
  _QWORD v38[3];
  _QWORD *v39;
  _QWORD v40[3];
  _QWORD *v41;
  _QWORD v42[3];
  _QWORD *v43;
  uint64_t v44;

  v4 = (llvm::Module *)a1;
  v44 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a2, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, a1)+ 8);
  v42[0] = &off_1E817A680;
  v42[1] = v6;
  v43 = v42;
  v40[0] = &off_1E817A6C8;
  v40[1] = a2;
  v41 = v40;
  v13 = 0;
  v38[0] = &off_1E817A710;
  v38[1] = &v13;
  v39 = v38;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = sub_1C56EF6F4;
  v19 = v42;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = sub_1C6296C94;
  v24 = v40;
  v25 = sub_1C6296CB8;
  v26 = v38;
  v27 = 0;
  v28 = 0;
  v29 = v31;
  v30 = 0x400000000;
  v31[4] = &v31[6];
  v31[10] = v32;
  memset(&v31[5], 0, 40);
  v31[11] = 0x400000000;
  memset(&v32[5], 0, 40);
  v32[4] = &v32[6];
  v32[10] = v33;
  v32[11] = 0x400000000;
  v33[4] = v34;
  v33[5] = 0;
  v34[0] = 0;
  v34[1] = 0;
  v35 = 0;
  v36 = 1;
  v37 = 0;
  v14[1] = byte_1ED80BD28 ^ 1;
  v14[0] = byte_1ED80BC68;
  LODWORD(v4) = llvm::IROutliner::doOutline((llvm::IROutliner *)v14, v4);
  sub_1C62967FC((uint64_t)v14);
  if ((_DWORD)v4)
  {
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)(a3 + 88) = 0;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_DWORD *)(a3 + 64) = 2;
  }
  else
  {
    llvm::InstCountPass::run(a3);
  }
  if (v39 == v38)
  {
    v7 = (void (**)(void))(v38[0] + 32);
  }
  else
  {
    if (!v39)
      goto LABEL_7;
    v7 = (void (**)(void))(*v39 + 40);
  }
  (*v7)();
LABEL_7:
  v8 = v13;
  v13 = 0;
  if (v8)
    sub_1C4EF268C((uint64_t)&v13, v8);
  v9 = v41;
  if (v41 == v40)
  {
    v10 = (void (**)(_QWORD *))(v40[0] + 32);
    v9 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_13;
    v10 = (void (**)(_QWORD *))(*v41 + 40);
  }
  (*v10)(v9);
LABEL_13:
  result = v43;
  if (v43 == v42)
  {
    v12 = (uint64_t (**)(_QWORD *))(v42[0] + 32);
    result = v42;
  }
  else
  {
    if (!v43)
      return result;
    v12 = (uint64_t (**)(_QWORD *))(*v43 + 40);
  }
  return (_QWORD *)(*v12)(result);
}

uint64_t llvm::createIROutlinerPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C56F8A58(v1);
}

uint64_t *sub_1C6295FA4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v7;
  int v8;

  if (!a2)
    return (uint64_t *)(a1 + 16 * a2);
  LODWORD(v3) = (a2 - 1) & a3;
  v4 = (uint64_t *)(a1 + 16 * v3);
  v5 = *v4;
  if (*v4 != a3)
  {
    v7 = 1;
    while (v5 != -1)
    {
      v8 = v3 + v7++;
      v3 = v8 & (a2 - 1);
      v5 = *(_QWORD *)(a1 + 16 * v3);
      if (v5 == a3)
        return (uint64_t *)(a1 + 16 * v3);
    }
    return (uint64_t *)(a1 + 16 * a2);
  }
  return v4;
}

uint64_t sub_1C6296000(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t result;
  _DWORD *v9;
  char v10;
  uint64_t v11;
  _DWORD *v12;

  v12 = 0;
  result = sub_1C620AE84(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6296090(a2, v12, a3, a4);
    v9 = (_DWORD *)result;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 40 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_DWORD *sub_1C6296090(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  _DWORD *v6;

  v6 = sub_1C6296100(a1, a3, a2);
  *v6 = *a3;
  *((_QWORD *)v6 + 1) = *(_QWORD *)a4;
  *((_QWORD *)v6 + 2) = v6 + 8;
  *((_QWORD *)v6 + 3) = 0x200000000;
  if (*(_DWORD *)(a4 + 16))
    sub_1C4EA2F88((uint64_t)(v6 + 4), a4 + 8);
  return v6;
}

_DWORD *sub_1C6296100(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C56F965C(a1, v6);
  v8 = 0;
  sub_1C620AE84(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_1C62961B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _DWORD *v15;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)a1;
    v8 = 40 * v6;
    do
    {
      *v7 = -1;
      v7 += 10;
      v8 -= 40;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_DWORD *)v4;
      if (*(_DWORD *)v4 <= 0xFFFFFFFD)
      {
        v15 = 0;
        sub_1C620AE84(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v15);
        v10 = v15;
        v11 = v15;
        *v15 = *(_DWORD *)v4;
        v12 = *(_QWORD *)(v4 + 8);
        *((_QWORD *)v10 + 2) = v11 + 8;
        v13 = (uint64_t)(v10 + 4);
        *(_QWORD *)(v13 - 8) = v12;
        *(_QWORD *)(v13 + 8) = 0x200000000;
        if (*(_DWORD *)(v4 + 24))
          sub_1C4EA2F88(v13, v4 + 16);
        ++*(_DWORD *)(a1 + 8);
        v14 = *(void **)(v4 + 16);
        if ((void *)(v4 + 32) != v14)
          free(v14);
      }
      v4 += 40;
    }
    while (v4 != a3);
  }
}

_QWORD *sub_1C62962A8(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *result;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;

  v8 = *(_DWORD *)(a2 + 16);
  if (!v8)
  {
    v14 = 0;
LABEL_6:
    result = sub_1C629638C(a2, a3, v14);
    *result = *a3;
    *((_DWORD *)result + 2) = *a4;
    v9 = *(_QWORD *)a2;
    v8 = *(_DWORD *)(a2 + 16);
    v13 = 1;
    goto LABEL_4;
  }
  v9 = *(_QWORD *)a2;
  v10 = (v8 - 1) & *a3;
  result = (_QWORD *)(*(_QWORD *)a2 + 16 * v10);
  v12 = *result;
  if (*a3 != *result)
  {
    v15 = 0;
    v16 = 1;
    while (v12 != -1)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v12 == -2;
      if (v17)
        v15 = result;
      v18 = v10 + v16++;
      v10 = v18 & (v8 - 1);
      result = (_QWORD *)(v9 + 16 * v10);
      v12 = *result;
      if (*a3 == *result)
        goto LABEL_3;
    }
    if (v15)
      v14 = v15;
    else
      v14 = result;
    goto LABEL_6;
  }
LABEL_3:
  v13 = 0;
LABEL_4:
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v9 + 16 * v8;
  *(_BYTE *)(a1 + 16) = v13;
  return result;
}

_QWORD *sub_1C629638C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1C56F9720(a1, 2 * v6);
    v7 = *a2;
    v9 = *(_DWORD *)(a1 + 16) - 1;
    v10 = v9 & *a2;
    a3 = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
    v11 = *a3;
    if (*a2 != *a3)
    {
      v12 = 0;
      v13 = 1;
      while (v11 != -1)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -2;
        if (v14)
          v12 = a3;
        v15 = v10 + v13++;
        v10 = v15 & v9;
        a3 = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
        v11 = *a3;
        if (v7 == *a3)
          goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a3;
      goto LABEL_4;
    }
    sub_1C56F9720(a1, v6);
    v7 = *a2;
    v16 = *(_DWORD *)(a1 + 16) - 1;
    v17 = v16 & *a2;
    a3 = (_QWORD *)(*(_QWORD *)a1 + 16 * v17);
    v18 = *a3;
    if (*a2 != *a3)
    {
      v12 = 0;
      v19 = 1;
      while (v18 != -1)
      {
        if (v12)
          v20 = 0;
        else
          v20 = v18 == -2;
        if (v20)
          v12 = a3;
        v21 = v17 + v19++;
        v17 = v21 & v16;
        a3 = (_QWORD *)(*(_QWORD *)a1 + 16 * v17);
        v18 = *a3;
        if (v7 == *a3)
          goto LABEL_4;
      }
LABEL_20:
      if (v12)
        a3 = v12;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C62964F0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  int v15;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(_QWORD **)result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    v6 = *(_QWORD **)result;
    do
    {
      *v6 = -1;
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    v7 = *a2;
    if ((unint64_t)*a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v8 = *(_DWORD *)(result + 16) - 1;
      v9 = v8 & v7;
      v10 = &v3[2 * (v8 & v7)];
      v11 = *v10;
      if (v7 != *v10)
      {
        v12 = 0;
        v13 = 1;
        while (v11 != -1)
        {
          if (v12)
            v14 = 0;
          else
            v14 = v11 == -2;
          if (v14)
            v12 = v10;
          v15 = v9 + v13++;
          v9 = v15 & v8;
          v10 = &v3[2 * (v15 & v8)];
          v11 = *v10;
          if (v7 == *v10)
            goto LABEL_7;
        }
        if (v12)
          v10 = v12;
      }
LABEL_7:
      *v10 = v7;
      *((_DWORD *)v10 + 2) = *((_DWORD *)a2 + 2);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t *sub_1C62965BC(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 24) = 0;
    *(_QWORD *)(v4 - 16) = 0;
    v4 -= 24;
    *(_DWORD *)(v4 + 16) = 0;
    v5 = *(_QWORD *)(v2 - 24);
    v2 -= 24;
    *(_QWORD *)v4 = v5;
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
    *(_DWORD *)(v2 + 8) = 0;
    v6 = *(_DWORD *)(v4 + 12);
    *(_DWORD *)(v4 + 12) = *(_DWORD *)(v2 + 12);
    *(_DWORD *)(v2 + 12) = v6;
    v7 = *(_DWORD *)(v4 + 16);
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(v2 + 16);
    *(_DWORD *)(v2 + 16) = v7;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1C629664C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C56FB880((uint64_t *)a2, a3, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C56FB91C(a2, (uint64_t)a3, a3, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_1C62966D8(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C56FB880((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

double sub_1C629677C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;
  uint64_t v4;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xFFFFFFFF00000000;
  *(_WORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 176;
  *(_QWORD *)(a1 + 168) = 0x400000000;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_WORD *)(a1 + 216) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = a3;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16) + 40);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) + 40);
  *(_QWORD *)(a1 + 240) = v4;
  return result;
}

uint64_t sub_1C62967FC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 296;
  sub_1C4E3631C(a1 + 296);
  sub_1C4926AE8(v2);
  sub_1C56FBA84(a1 + 200);
  sub_1C4926AE8(a1 + 200);
  sub_1C56F8798(a1 + 104);
  sub_1C4926AE8(a1 + 104);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 48), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 4);
  return a1;
}

_QWORD *sub_1C6296870(_QWORD *a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)a1[20];
  if (v2 != a1 + 22)
    free(v2);
  MEMORY[0x1CAA32FB4](a1[17], 8);
  MEMORY[0x1CAA32FB4](a1[14], 8);
  MEMORY[0x1CAA32FB4](a1[10], 8);
  MEMORY[0x1CAA32FB4](a1[7], 4);
  MEMORY[0x1CAA32FB4](a1[4], 4);
  return a1;
}

uint64_t sub_1C62968E0(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C56FBF7C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), (uint64_t)a3, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6296968(a2, (uint64_t)a3, v10);
    v7 = (_QWORD *)result;
    *(_OWORD *)result = *a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

_QWORD *sub_1C6296968(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C56FC09C(a1, v6);
  v8 = 0;
  sub_1C56FBF7C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C6296A18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 - 32);
  if (v2
    && !*(_BYTE *)(v2 + 16)
    && *(_QWORD *)(v2 + 24) == *(_QWORD *)(a2 + 72)
    && (*(_DWORD *)(v2 + 36) - 56) < 3)
  {
    return 1;
  }
  else
  {
    return sub_1C56FC200(a1, a2);
  }
}

uint64_t sub_1C6296A54(uint64_t a1, __int128 *a2)
{
  __int128 v4;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  sub_1C6182300(a1 + 24, (uint64_t)a2 + 24);
  sub_1C6182300(a1 + 48, (uint64_t)(a2 + 3));
  sub_1C6296AB4(a1 + 72, (uint64_t)a2 + 72);
  sub_1C6296AB4(a1 + 96, (uint64_t)(a2 + 6));
  return a1;
}

uint64_t sub_1C6296AB4(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 4);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v4;
  v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  return a1;
}

void sub_1C6296B24(void **a1)
{
  _QWORD *v1;
  _QWORD *v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        v3 = sub_1C6193514(v3 - 15);
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *sub_1C6296B80(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xF0F0F0F0F0F0F1)
      abort();
    v3 = 17 * a2;
    v4 = 272 * a2;
    v5 = operator new(272 * a2);
    *a1 = v5;
    v6 = &v5[v3];
    a1[2] = v6;
    do
    {
      v5[15] = 0u;
      v5[16] = 0u;
      v5[13] = 0u;
      v5[14] = 0u;
      v5[11] = 0u;
      v5[12] = 0u;
      v5[9] = 0u;
      v5[10] = 0u;
      v5[7] = 0u;
      v5[8] = 0u;
      v5[5] = 0u;
      v5[6] = 0u;
      v5[3] = 0u;
      v5[4] = 0u;
      v5[1] = 0u;
      v5[2] = 0u;
      *v5 = 0u;
      sub_1C6296C24((uint64_t)v5);
      v5 = (_OWORD *)(v7 + 272);
      v4 -= 272;
    }
    while (v4);
    a1[1] = v6;
  }
  return a1;
}

double sub_1C6296C24(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 144) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 164) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 156) = 0;
  result = NAN;
  *(_QWORD *)(a1 + 176) = 0xFFFFFFFD00000000;
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 268) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  return result;
}

uint64_t sub_1C6296C94(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  sub_1C485C2F0();
  return sub_1C6296CB8();
}

uint64_t sub_1C6296CB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  sub_1C485C2F0();
  return llvm::InferFunctionAttrsPass::run(v3, v4, v5);
}

uint64_t llvm::InferFunctionAttrsPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;

  v6 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a2, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, a1)+ 8);
  result = sub_1C56FEE0C(a1, (llvm::Function *)sub_1C56FF3AC, (uint64_t)&v6);
  if ((result & 1) == 0)
    return (uint64_t)llvm::InstCountPass::run(a3);
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)(a3 + 88) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_DWORD *)(a3 + 64) = 2;
  return result;
}

uint64_t llvm::createInferFunctionAttrsLegacyPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C56FEFE4(v1);
}

double llvm::LegacyInlinerBase::LegacyInlinerBase(llvm::LegacyInlinerBase *this, char *a2)
{
  double result;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = a2;
  *((_DWORD *)this + 6) = 3;
  *(_QWORD *)this = off_1E817A8F8;
  *((_BYTE *)this + 28) = 1;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0x1000000000;
  result = 0.0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  return result;
}

double llvm::LegacyInlinerBase::LegacyInlinerBase(llvm::LegacyInlinerBase *this, char *a2, char a3)
{
  double result;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = a2;
  *((_DWORD *)this + 6) = 3;
  *(_QWORD *)this = off_1E817A8F8;
  *((_BYTE *)this + 28) = a3;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0x1000000000;
  result = 0.0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  return result;
}

void *llvm::LegacyInlinerBase::getAnalysisUsage(llvm::LegacyInlinerBase *this, llvm::AnalysisUsage *a2)
{
  llvm::AnalysisUsage *v4;

  llvm::AnalysisUsage::addRequiredID(a2, llvm::AssumptionCacheTracker::ID);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::ProfileSummaryInfoWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::TargetLibraryInfoWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::TargetTransformInfoWrapperPass::ID);
  llvm::getAAResultsAnalysisUsage(a2, v4);
  return llvm::CallGraphSCCPass::getAnalysisUsage(this, a2);
}

uint64_t llvm::LegacyInlinerBase::runOnSCC(uint64_t a1, uint64_t ****a2)
{
  if ((llvm::CallGraphSCCPass::skipSCC(a1, a2) & 1) != 0)
    return 0;
  else
    return llvm::LegacyInlinerBase::inlineCalls(a1, (uint64_t)a2);
}

uint64_t llvm::ModuleInlinerWrapperPass::ModuleInlinerWrapperPass(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_OWORD *)(a2 + 16);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 64) = v8;
  *(_DWORD *)(a1 + 68) = a4;
  *(_DWORD *)(a1 + 72) = a5;
  *(_OWORD *)(a1 + 80) = 0u;
  v9 = a1 + 80;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  if (a3)
  {
    v13 = 0;
    v14 = 1;
    sub_1C6296FCC(a1 + 80, &v13);
    v10 = v13;
    v13 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v13 = 0;
  v14 = 0;
  sub_1C6296FCC(v9, &v13);
  v11 = v13;
  v13 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void sub_1C6296FCC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = operator new();
  v5 = *a2;
  *a2 = 0;
  v6 = *((_BYTE *)a2 + 8);
  *(_QWORD *)v4 = &unk_1E817AE90;
  *(_QWORD *)(v4 + 8) = v5;
  *(_BYTE *)(v4 + 16) = v6;
  v18 = v4;
  v7 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v7 < *(_QWORD *)(a1 + 16))
  {
    *v7 = v4;
    *(_QWORD *)(a1 + 8) = v7 + 1;
  }
  else
  {
    v8 = sub_1C4D62F9C((char **)a1, &v18);
    v16 = sub_1C5705608((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15, v17, v18);
    if (v16)
      sub_1C57055F0(v16);
  }
  sub_1C57055FC();
}

void sub_1C6297060(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v4 = (_QWORD *)operator new();
  v5 = *a2;
  *a2 = 0;
  *v4 = &unk_1E817AF10;
  v4[1] = v5;
  v17 = v4;
  v6 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v6 >= *(_QWORD *)(a1 + 16))
  {
    v7 = sub_1C4D62F9C((char **)a1, (uint64_t *)&v17);
    v15 = sub_1C5705608((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14, v16, (uint64_t)v17);
    if (v15)
      sub_1C57055F0(v15);
  }
  else
  {
    *v6 = v4;
    *(_QWORD *)(a1 + 8) = v6 + 1;
  }
  sub_1C57055FC();
}

llvm::raw_ostream *sub_1C62970E4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  llvm::raw_ostream *result;

  v6 = sub_1C57052EC();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (llvm::raw_ostream *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(a1, v9, v8);
  if (v8)
  {
    result = (llvm::raw_ostream *)memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

llvm::raw_ostream *llvm::ModuleInlinerWrapperPass::printPipeline(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  llvm::raw_ostream *v8;
  uint64_t v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;

  v9 = *(_QWORD *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 112);
  v8 = (llvm::raw_ostream *)(a1 + 104);
  if (v9 != v10)
  {
    llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::printPipeline(v8, a2, a3, a4);
    sub_1C4816AD8(a2, ",");
  }
  sub_1C4816AD8(a2, "cgscc(");
  if (*(_DWORD *)(a1 + 72))
  {
    v11 = sub_1C4816AD8(a2, "devirt<");
    v12 = llvm::raw_ostream::operator<<(v11, *(unsigned int *)(a1 + 72));
    sub_1C4816AD8(v12, ">(");
  }
  llvm::PassManager<llvm::LazyCallGraph::SCC,llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::LazyCallGraph&,llvm::CGSCCUpdateResult &>::printPipeline((llvm::raw_ostream *)(a1 + 80), a2, a3, a4);
  if (*(_DWORD *)(a1 + 72))
    sub_1C4816AD8(a2, ")");
  return sub_1C4816AD8(a2, ")");
}

_QWORD *sub_1C6297254(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E817AA18;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C6297298(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v12 = 0;
  v8 = sub_1C6159B48(a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v12);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C6297310(v11);
}

uint64_t sub_1C6297310(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C6297328(_QWORD *a1)
{
  sub_1C57039BC(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C629734C(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C6297358(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C6297368(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  void *v4;
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_3:
    v4 = &unk_1E817AA68;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_3;
  }
  return result;
}

_QWORD *sub_1C62973D8(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C62973E0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E817AA18;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6297434(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C629743C(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C6297450(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C6297464(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C6297478(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

_QWORD *sub_1C62974A4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E817AB10;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C62974E8(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v12 = 0;
  v8 = sub_1C6159B48(a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v12);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C6297560(v11);
}

uint64_t sub_1C6297560(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C6297578(_QWORD *a1)
{
  sub_1C5703A58(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C629759C(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C62975A8(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C62975B8(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  void *v4;
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_3:
    v4 = &unk_1E817AB60;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_3;
  }
  return result;
}

_QWORD *sub_1C6297628(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C6297630(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E817AB10;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6297684(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C629768C(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C62976A0(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C62976B4(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C62976C8(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

_QWORD *sub_1C62976F4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E817AC08;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C6297738(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v12 = 0;
  v8 = sub_1C6159B48(a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v12);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C62977B0(v11);
}

uint64_t sub_1C62977B0(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C62977C8(_QWORD *a1)
{
  sub_1C5703AF4(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C62977EC(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C62977F8(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C6297808(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  void *v4;
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_3:
    v4 = &unk_1E817AC58;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_3;
  }
  return result;
}

_QWORD *sub_1C6297878(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C6297880(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E817AC08;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62978D4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C62978DC(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C62978F0(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C6297904(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C6297918(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

uint64_t sub_1C6297944(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C5703B90(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      v10[1] = 0;
      v10[2] = 0;
      v10[3] = 0;
      *(_OWORD *)(v10 + 1) = *(_OWORD *)(a2 + 8);
      v10[3] = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 32;
  }
  return result;
}

void sub_1C6297A04(char **a1, _WORD *a2)
{
  uint64_t v4;
  char *v5;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED80BD68, 0, 0);
  byte_1ED80BDE8 = 0;
  qword_1ED80BDF0 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED80BDF8 = 0;
  qword_1ED80BD68 = (uint64_t)&unk_1E819E898;
  qword_1ED80BE00 = (uint64_t)&off_1E819E9A0;
  qword_1ED80BE08 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED80BE20 = (uint64_t)&qword_1ED80BE08;
  llvm::cl::Option::setArgStr(v4, "disable-inlined-alloca-merging", 0x1EuLL);
  v5 = *a1;
  byte_1ED80BDE8 = **a1;
  byte_1ED80BDF9 = 1;
  byte_1ED80BDF8 = *v5;
  word_1ED80BD72 = (32 * (*a2 & 3)) | word_1ED80BD72 & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80BD68);
}

void sub_1C6297AD8(int **a1, _WORD *a2, __n128 *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED80BE28, 0, 0);
  dword_1ED80BEA8 = 0;
  qword_1ED80BEB0 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED80BEB8 = 0;
  qword_1ED80BE28 = (uint64_t)&unk_1E819E418;
  qword_1ED80BEC0 = (uint64_t)&unk_1E819E230;
  qword_1ED80BEC8 = (uint64_t)&off_1E7FA9D80;
  qword_1ED80BEE0 = (uint64_t)&qword_1ED80BEC8;
  sub_1C5703CDC(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80BE28);
}

__n128 sub_1C6297B74(uint64_t a1, char *__s, const char **a3, _OWORD *a4, __n128 *a5, _WORD *a6)
{
  size_t v12;
  __n128 result;

  v12 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)__s, v12);
  sub_1C49C7D74(a3, a1);
  *(_OWORD *)(a1 + 48) = *a4;
  result = *a5;
  *(__n128 *)(a1 + 32) = *a5;
  *(_WORD *)(a1 + 10) = (32 * (*a6 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  return result;
}

void sub_1C6297C00(int **a1, uint64_t *a2, __n128 *a3, _WORD *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80C150, 0, 0);
  dword_1ED80C1D0 = 0;
  qword_1ED80C1D8 = (uint64_t)&unk_1E817AA68;
  *(_QWORD *)&dword_1ED80C1E0 = 0;
  qword_1ED80C150 = (uint64_t)&unk_1E817A9B0;
  qword_1ED80C1E8 = (uint64_t)&unk_1E817AA18;
  unk_1ED80C1F0 = &qword_1ED80C150;
  qword_1ED80C1F8 = (uint64_t)&unk_1ED80C208;
  qword_1ED80C200 = 0x800000000;
  qword_1ED80C388 = (uint64_t)&unk_1E817AC98;
  qword_1ED80C3A0 = (uint64_t)&qword_1ED80C388;
  sub_1C5703E24(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80C150);
}

void sub_1C6297CCC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6297CE0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E817AC98;
  return result;
}

void sub_1C6297D08(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E817AC98;
}

void sub_1C6297D28(uint64_t a1, unsigned __int8 *a2, size_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  int v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  _QWORD v14[5];
  int v15;
  char v16;

  v9 = *a4;
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = &unk_1E817AA68;
  v16 = 1;
  v15 = v9;
  v10 = sub_1C5703F18(a1 + 16, (unint64_t)v14, 1);
  v11 = *(_QWORD *)(a1 + 16) + 48 * *(unsigned int *)(a1 + 24);
  v12 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v10;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 32) = &unk_1E817AA88;
  v13 = *(_BYTE *)(v10 + 44);
  *(_DWORD *)(v11 + 40) = *(_DWORD *)(v10 + 40);
  *(_BYTE *)(v11 + 44) = v13;
  *(_QWORD *)(v11 + 32) = &unk_1E817AA68;
  ++*(_DWORD *)(a1 + 24);
  llvm::cl::AddLiteralOption(*(_QWORD *)(a1 + 8), a2, a3);
}

void sub_1C6297DEC(uint64_t a1, unint64_t a2)
{
  _OWORD *v3;
  char *v4;
  unsigned int v5;
  char *v6;
  _OWORD *v7;
  __int128 v8;
  int v9;
  int v10;
  unint64_t v11;

  v11 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 48, &v11);
  v4 = *(char **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = &v4[48 * v5];
    v7 = v3;
    do
    {
      v8 = *((_OWORD *)v4 + 1);
      *v7 = *(_OWORD *)v4;
      v7[1] = v8;
      *((_QWORD *)v7 + 4) = &unk_1E817AA88;
      v9 = *((_DWORD *)v4 + 10);
      *((_BYTE *)v7 + 44) = v4[44];
      *((_DWORD *)v7 + 10) = v9;
      *((_QWORD *)v7 + 4) = &unk_1E817AA68;
      v4 += 48;
      v7 += 3;
    }
    while (v4 != v6);
    v4 = *(char **)a1;
  }
  v10 = v11;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v10;
}

void sub_1C6297EAC(int **a1, uint64_t *a2, __n128 *a3, _WORD *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80C3A8, 0, 0);
  dword_1ED80C428 = 0;
  qword_1ED80C430 = (uint64_t)&unk_1E817AB60;
  *(_QWORD *)&dword_1ED80C438 = 0;
  qword_1ED80C3A8 = (uint64_t)&unk_1E817AAA8;
  qword_1ED80C440 = (uint64_t)&unk_1E817AB10;
  unk_1ED80C448 = &qword_1ED80C3A8;
  qword_1ED80C450 = (uint64_t)&unk_1ED80C460;
  qword_1ED80C458 = 0x800000000;
  qword_1ED80C5E0 = (uint64_t)&unk_1E817ACE0;
  qword_1ED80C5F8 = (uint64_t)&qword_1ED80C5E0;
  sub_1C5703F80(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80C3A8);
}

void sub_1C6297F78()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6297F8C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E817ACE0;
  return result;
}

void sub_1C6297FB4(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E817ACE0;
}

void sub_1C6297FD4(uint64_t a1, unint64_t a2)
{
  _OWORD *v3;
  char *v4;
  unsigned int v5;
  char *v6;
  _OWORD *v7;
  __int128 v8;
  int v9;
  int v10;
  unint64_t v11;

  v11 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 48, &v11);
  v4 = *(char **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = &v4[48 * v5];
    v7 = v3;
    do
    {
      v8 = *((_OWORD *)v4 + 1);
      *v7 = *(_OWORD *)v4;
      v7[1] = v8;
      *((_QWORD *)v7 + 4) = &unk_1E817AB80;
      v9 = *((_DWORD *)v4 + 10);
      *((_BYTE *)v7 + 44) = v4[44];
      *((_DWORD *)v7 + 10) = v9;
      *((_QWORD *)v7 + 4) = &unk_1E817AB60;
      v4 += 48;
      v7 += 3;
    }
    while (v4 != v6);
    v4 = *(char **)a1;
  }
  v10 = v11;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v10;
}

void sub_1C6298094(int **a1, uint64_t *a2, __n128 *a3, _WORD *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80C600, 0, 0);
  dword_1ED80C680 = 0;
  qword_1ED80C688 = (uint64_t)&unk_1E817AC58;
  *(_QWORD *)&dword_1ED80C690 = 0;
  qword_1ED80C600 = (uint64_t)&unk_1E817ABA0;
  qword_1ED80C698 = (uint64_t)&unk_1E817AC08;
  unk_1ED80C6A0 = &qword_1ED80C600;
  qword_1ED80C6A8 = (uint64_t)&unk_1ED80C6B8;
  qword_1ED80C6B0 = 0x800000000;
  qword_1ED80C838 = (uint64_t)&unk_1E817AD28;
  qword_1ED80C850 = (uint64_t)&qword_1ED80C838;
  sub_1C57041A0(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80C600);
}

void sub_1C6298160()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6298174()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E817AD28;
  return result;
}

void sub_1C629819C(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E817AD28;
}

void sub_1C62981BC(uint64_t a1, unint64_t a2)
{
  _OWORD *v3;
  char *v4;
  unsigned int v5;
  char *v6;
  _OWORD *v7;
  __int128 v8;
  int v9;
  int v10;
  unint64_t v11;

  v11 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 48, &v11);
  v4 = *(char **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = &v4[48 * v5];
    v7 = v3;
    do
    {
      v8 = *((_OWORD *)v4 + 1);
      *v7 = *(_OWORD *)v4;
      v7[1] = v8;
      *((_QWORD *)v7 + 4) = &unk_1E817AC78;
      v9 = *((_DWORD *)v4 + 10);
      *((_BYTE *)v7 + 44) = v4[44];
      *((_DWORD *)v7 + 10) = v9;
      *((_QWORD *)v7 + 4) = &unk_1E817AC58;
      v4 += 48;
      v7 += 3;
    }
    while (v4 != v6);
    v4 = *(char **)a1;
  }
  v10 = v11;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v10;
}

uint64_t sub_1C629827C(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

void sub_1C629829C(_QWORD *a1)
{
  sub_1C62983E4(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62982C0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_1C62982C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  BOOL (*v7)(uint64_t, uint64_t);

  sub_1C5704918(a1);
  v6 = **(_QWORD **)(a1 + 8);
  sub_1C6128C08((uint64_t *)(a1 + 280), &v6);
  v2 = v6;
  v7 = 0;
  if (sub_1C61252B8((uint64_t *)(a1 + 280), &v6, &v7))
  {
    *(_QWORD *)v7 = -8192;
    *(int32x2_t *)(a1 + 288) = vadd_s32(*(int32x2_t *)(a1 + 288), (int32x2_t)0x1FFFFFFFFLL);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned int *)(a1 + 16);
  v7 = sub_1C6298434;
  sub_1C5704B1C(v3, v3 + 16 * v4, (uint64_t (**)(uint64_t, uint64_t))&v7, v4);
  --*(_DWORD *)(a1 + 16);
  return v2;
}

uint64_t sub_1C6298388(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  sub_1C5704918(a1);
  v3 = **(_QWORD **)(a1 + 8);
  v4 = 0;
  if ((sub_1C61252B8((uint64_t *)(a1 + 280), &v3, &v4) & 1) != 0)
    return v4;
  else
    return *(_QWORD *)(a1 + 280) + 16 * *(unsigned int *)(a1 + 296);
}

_QWORD *sub_1C62983E4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E817AE00;
  MEMORY[0x1CAA32FB4](a1[35], 8);
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

BOOL sub_1C6298434(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8);
}

_QWORD *sub_1C6298448(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E817AE48;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

uint64_t sub_1C629848C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;

  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 4;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 16);
    if (!v5)
    {
      v12 = 0;
      result = 0;
      goto LABEL_11;
    }
    v4 = *(_QWORD *)(a1 + 8);
  }
  v6 = ((a3 >> 4) ^ (a3 >> 9) | ((unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32))
     + ~((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
  v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
  v10 = v5 - 1;
  v11 = (v5 - 1) & v9;
  v12 = (_QWORD *)(v4 + 16 * v11);
  v13 = *v12;
  v14 = v12[1];
  if (*v12 == a2 && v14 == a3)
  {
    result = 1;
  }
  else
  {
    v16 = 0;
    v17 = 1;
    result = 1;
    while (v13 != -4096 || v14 != -4096)
    {
      if (v16)
        v19 = 0;
      else
        v19 = v14 == -8192;
      if (v19 && v13 == -8192)
        v16 = v12;
      v21 = v11 + v17++;
      v11 = v21 & v10;
      v12 = (_QWORD *)(v4 + 16 * (v21 & v10));
      v13 = *v12;
      v14 = v12[1];
      if (*v12 == a2 && v14 == a3)
        goto LABEL_11;
    }
    result = 0;
    if (v16)
      v12 = v16;
  }
LABEL_11:
  *a4 = v12;
  return result;
}

_QWORD *sub_1C629858C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_1C629848C(a2, *a3, a3[1], &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v8 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v9 = 4;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(unsigned int *)(a2 + 16);
    }
    v10 = 0;
    v11 = v8 + 16 * v9;
  }
  else
  {
    result = sub_1C6298650((_DWORD *)a2, a3, v14);
    v7 = result;
    *result = *a3;
    result[1] = a3[1];
    v12 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v13 = 4;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(unsigned int *)(a2 + 16);
    }
    v11 = v12 + 16 * v13;
    v10 = 1;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_1C6298650(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 4;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_11;
  }
  if (v6 + ~v5 - a1[1] <= v6 >> 3)
  {
LABEL_11:
    sub_1C5705080((uint64_t)a1, v6);
    v8 = 0;
    sub_1C629848C((uint64_t)a1, *a2, a2[1], &v8);
    a3 = v8;
  }
  *a1 += 2;
  if (*a3 != -4096 || a3[1] != -4096)
    --a1[1];
  return a3;
}

_QWORD *sub_1C6298718(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &unk_1E817AE90;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1C629875C(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  *a1 = &unk_1E817AE90;
  a1[1] = 0;
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C62987B8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  llvm::raw_ostream *result;

  result = sub_1C62970E4(a2, a3, a4);
  if (*(_BYTE *)(a1 + 16))
    return sub_1C4816AD8(a2, "<only-mandatory>");
  return result;
}

uint64_t sub_1C6298808(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_1E817AED0;
  v3 = (void **)(a1 + 8);
  sub_1C4764BBC(&v3);
  return a1;
}

uint64_t sub_1C6298850(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_1E817AED0;
  v3 = (void **)(a1 + 8);
  sub_1C4764BBC(&v3);
  return MEMORY[0x1CAA32FC0](a1, 0xA1C4030951706);
}

llvm::raw_ostream *sub_1C62988AC(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  return llvm::PassManager<llvm::LazyCallGraph::SCC,llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::LazyCallGraph&,llvm::CGSCCUpdateResult &>::printPipeline((llvm::raw_ostream *)(a1 + 8), a2, a3, a4);
}

_QWORD *sub_1C62988B8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &unk_1E817AF10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1C62988FC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &unk_1E817AF10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6298950(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::ModuleToPostOrderCGSCCPassAdaptor::run((uint64_t *)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *sub_1C6298958(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  sub_1C4816AD8(a2, "cgscc(");
  (*(void (**)(_QWORD, llvm::raw_ostream *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2, a3, a4);
  return sub_1C4816AD8(a2, ")");
}

uint64_t sub_1C62989C4()
{
  return 1;
}

_QWORD *sub_1C62989CC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &unk_1E817AF50;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1C6298A10(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &unk_1E817AF50;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C6298A64(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C6298A6C((int *)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *sub_1C6298A6C(int *a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;

  v8 = sub_1C4816AD8(a2, "devirt<");
  v9 = llvm::raw_ostream::operator<<(v8, a1[2]);
  sub_1C4816AD8(v9, ">(");
  (*(void (**)(_QWORD, llvm::raw_ostream *, uint64_t, uint64_t))(**(_QWORD **)a1 + 24))(*(_QWORD *)a1, a2, a3, a4);
  return sub_1C4816AD8(a2, ")");
}

llvm::GlobalAlias *llvm::InternalizePass::checkComdat(llvm::GlobalAlias *result, llvm::GlobalAlias *this, uint64_t a3)
{
  int v3;
  llvm::InternalizePass *v6;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;

  v3 = *((unsigned __int8 *)this + 16);
  if (v3 != 2)
  {
    v6 = result;
    result = this;
    if (v3 != 1 || (result = (llvm::GlobalAlias *)llvm::GlobalAlias::getAliaseeObject(this)) != 0)
    {
      v9 = *((_QWORD *)result + 6);
      if (v9)
      {
        sub_1C6298B8C((uint64_t)v8, a3, &v9);
        v7 = v8[0];
        ++*(_QWORD *)(v8[0] + 8);
        result = (llvm::GlobalAlias *)llvm::InternalizePass::shouldPreserveGV(v6, this);
        if ((_DWORD)result)
          *(_BYTE *)(v7 + 16) = 1;
      }
    }
  }
  return result;
}

uint64_t sub_1C6298B8C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C617A1AC(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C617A248(a2, a3, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

llvm::InternalizePass *llvm::InternalizePass::InternalizePass(llvm::InternalizePass *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  __int128 v6;

  *(_BYTE *)this = 0;
  sub_1C570631C((llvm::StringMapImpl *)&v5);
  v2 = operator new(0x28uLL);
  v3 = v5;
  *v2 = &off_1E817B030;
  v2[1] = v3;
  *((_OWORD *)v2 + 1) = v6;
  v5 = 0;
  *(_QWORD *)&v6 = 0;
  DWORD2(v6) = 0;
  *((_QWORD *)this + 4) = v2;
  sub_1C4F02264((uint64_t)&v5);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0x800000000;
  return this;
}

uint64_t llvm::createInternalizePass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5706724(v1);
}

uint64_t llvm::createInternalizePass(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v6;
  _QWORD *v7;
  void (**v8)(_QWORD *);
  unint64_t v10;
  _QWORD *v11;
  _QWORD v12[2];
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = operator new();
  v3 = v2;
  v4 = (_QWORD *)a1[3];
  if (!v4)
  {
    v14 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = &unk_1EF8F32E8;
    *(_DWORD *)(v2 + 24) = 4;
    *(_QWORD *)v2 = &off_1E817AF90;
    goto LABEL_15;
  }
  if (v4 == a1)
  {
    v14 = v13;
    (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v13);
    v4 = v14;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = &unk_1EF8F32E8;
    *(_DWORD *)(v3 + 24) = 4;
    *(_QWORD *)v3 = &off_1E817AF90;
    if (v4)
      goto LABEL_4;
LABEL_15:
    *(_QWORD *)(v3 + 56) = 0;
    goto LABEL_6;
  }
  v14 = (_QWORD *)a1[3];
  a1[3] = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = &unk_1EF8F32E8;
  *(_DWORD *)(v2 + 24) = 4;
  *(_QWORD *)v2 = &off_1E817AF90;
LABEL_4:
  if (v4 == v13)
  {
    *(_QWORD *)(v3 + 56) = v3 + 32;
    (*(void (**)(_QWORD *))(v13[0] + 24))(v13);
  }
  else
  {
    *(_QWORD *)(v3 + 56) = v4;
    v14 = 0;
  }
LABEL_6:
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v10 = qword_1ED830BC0[0];
  v6 = atomic_load(&qword_1ED831EC0);
  if (v6 != -1)
  {
    v12[0] = sub_1C5706694;
    v12[1] = &v10;
    v11 = v12;
    std::__call_once(&qword_1ED831EC0, &v11, (void (__cdecl *)(void *))sub_1C4776838);
  }
  v7 = v14;
  if (v14 == v13)
  {
    v8 = (void (**)(_QWORD *))(v13[0] + 32);
    v7 = v13;
  }
  else
  {
    if (!v14)
      return v3;
    v8 = (void (**)(_QWORD *))(*v14 + 40);
  }
  (*v8)(v7);
  return v3;
}

void sub_1C6298EC4(__int128 *a1, __int128 *a2, _WORD *a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED80C858, 1, 0);
  qword_1ED80C8D8 = 0;
  unk_1ED80C8E0 = 0;
  qword_1ED80C8E8 = 0;
  unk_1ED80C8F0 = 0;
  qword_1ED80C858 = (uint64_t)&unk_1E81409D8;
  qword_1ED80C8F8 = 0;
  unk_1ED80C900 = 0;
  qword_1ED80C908 = (uint64_t)&unk_1E819E970;
  qword_1ED80C910 = (uint64_t)&unk_1E81415E0;
  qword_1ED80C928 = (uint64_t)&qword_1ED80C910;
  llvm::cl::Option::setArgStr(v6, "internalize-public-api-list", 0x1BuLL);
  xmmword_1ED80C888 = *a1;
  xmmword_1ED80C878 = *a2;
  word_1ED80C862 |= (*a3 & 0x1F) << 9;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80C858);
}

llvm::StringMapImpl *sub_1C6298F84(llvm::StringMapImpl *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t *v10;
  BOOL v11;
  size_t v12;
  _QWORD *v13;
  size_t *v14;
  char *v15;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0x800000000;
  if (*((_DWORD *)a2 + 3))
  {
    llvm::StringMapImpl::init(this, *((_DWORD *)a2 + 2));
    v4 = *(_QWORD *)this;
    v5 = *((unsigned int *)this + 2);
    v6 = *a2;
    *(_QWORD *)((char *)this + 12) = *(uint64_t *)((char *)a2 + 12);
    if ((_DWORD)v5)
    {
      v7 = 0;
      v8 = v4 + 8 * v5 + 8;
      v9 = v6 + 8 * v5 + 8;
      do
      {
        v10 = *(size_t **)(*a2 + 8 * v7);
        if (v10)
          v11 = v10 + 1 == 0;
        else
          v11 = 1;
        if (v11)
        {
          *(_QWORD *)(*(_QWORD *)this + 8 * v7) = v10;
        }
        else
        {
          v12 = *v10;
          v13 = operator new(*v10 + 9, (std::align_val_t)8uLL);
          v14 = v13;
          v15 = (char *)(v13 + 1);
          if (v12)
            memcpy(v13 + 1, v10 + 1, v12);
          v15[v12] = 0;
          *v14 = v12;
          *(_QWORD *)(*(_QWORD *)this + 8 * v7) = v14;
          *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(v9 + 4 * v7);
        }
        ++v7;
      }
      while (v5 != v7);
    }
  }
  return this;
}

_QWORD *llvm::createSingleLoopExtractorPass(llvm *this)
{
  uint64_t v1;
  _QWORD *result;

  v1 = operator new();
  result = (_QWORD *)sub_1C5707508(v1, 1);
  *result = &off_1E817B118;
  return result;
}

llvm::raw_ostream *llvm::LoopExtractorPass::printPipeline(_DWORD *a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  sub_1C629912C(a2, a3, a4);
  sub_1C4816AD8(a2, "<");
  if (*a1 == 1)
    sub_1C4816AD8(a2, "single");
  return sub_1C4816AD8(a2, ">");
}

llvm::raw_ostream *sub_1C629912C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  llvm::raw_ostream *result;

  v6 = sub_1C5707B3C();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (llvm::raw_ostream *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(a1, v9, v8);
  if (v8)
  {
    result = (llvm::raw_ostream *)memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

uint64_t **llvm::lowertypetests::BitSetBuilder::build@<X0>(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;

  v3 = this[18];
  v4 = this[19];
  if (v3 > v4)
  {
    v3 = 0;
    this[18] = 0;
  }
  v5 = *this;
  v6 = *((unsigned int *)this + 2);
  v7 = 8 * v6;
  v8 = 0;
  if ((_DWORD)v6)
  {
    v9 = 8 * v6;
    v10 = *this;
    do
    {
      v11 = *v10 - (_QWORD)this[18];
      *v10++ = v11;
      v8 |= v11;
      v9 -= 8;
    }
    while (v9);
    v3 = this[18];
    v4 = this[19];
  }
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v3;
  v12 = __clz(__rbit64(v8));
  *(_DWORD *)(a2 + 40) = v12 & 0x3F;
  *(_QWORD *)(a2 + 32) = ((unint64_t)((char *)v4 - (char *)v3) >> v12) + 1;
  if ((_DWORD)v6)
  {
    do
    {
      v13 = *v5++;
      v14 = v13 >> *(_DWORD *)(a2 + 40);
      this = sub_1C47BC21C((uint64_t **)a2, &v14, (uint64_t **)&v14);
      v7 -= 8;
    }
    while (v7);
  }
  return this;
}

uint64_t llvm::createLowerTypeTestsPass(llvm *this, llvm::ModuleSummaryIndex *a2, const llvm::ModuleSummaryIndex *a3)
{
  char v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v10;
  unint64_t v12;
  _QWORD *v13;
  _QWORD v14[2];

  v3 = (char)a3;
  v6 = operator new();
  v7 = v6;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = &unk_1ED80CA18;
  *(_DWORD *)(v6 + 24) = 4;
  *(_QWORD *)v6 = &off_1E817B2B0;
  *(_BYTE *)(v6 + 28) = 0;
  *(_QWORD *)(v6 + 32) = this;
  *(_QWORD *)(v6 + 40) = a2;
  if (byte_1ED80CB60)
    v8 = 1;
  else
    v8 = v3;
  *(_BYTE *)(v6 + 48) = v8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v12 = qword_1ED830BC0[0];
  v10 = atomic_load(&qword_1ED831ED8);
  if (v10 != -1)
  {
    v14[0] = sub_1C57087C0;
    v14[1] = &v12;
    v13 = v14;
    std::__call_once(&qword_1ED831ED8, &v13, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v7;
}

uint64_t llvm::LowerTypeTestsPass::run@<X0>(uint64_t a1@<X0>, llvm::LLVMContext **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v5;
  llvm::LLVMContext **v6[21];

  if (*(_BYTE *)a1)
  {
    result = sub_1C5708850(a2);
    if ((result & 1) != 0)
    {
LABEL_3:
      *(_OWORD *)(a3 + 40) = 0u;
      *(_OWORD *)(a3 + 56) = 0u;
      *(_QWORD *)(a3 + 88) = 0;
      *(_OWORD *)(a3 + 72) = 0u;
      *(_OWORD *)(a3 + 24) = 0u;
      *(_QWORD *)a3 = a3 + 32;
      *(_QWORD *)(a3 + 8) = a3 + 32;
      *(_QWORD *)(a3 + 16) = 2;
      *(_QWORD *)(a3 + 48) = a3 + 80;
      *(_QWORD *)(a3 + 56) = a3 + 80;
      *(_DWORD *)(a3 + 64) = 2;
      return result;
    }
  }
  else
  {
    sub_1C5708E90(v6, a2, *(llvm::LLVMContext ***)(a1 + 8), *(llvm::LLVMContext ***)(a1 + 16), *(_BYTE *)(a1 + 24));
    v5 = sub_1C5708FAC((uint64_t *)v6);
    result = sub_1C570E200((uint64_t)v6);
    if ((v5 & 1) != 0)
      goto LABEL_3;
  }
  return (uint64_t)llvm::InstCountPass::run(a3);
}

_QWORD *sub_1C6299454(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E817B220;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C6299498(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v12 = 0;
  v8 = sub_1C6159B48(a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v12);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C6299510(v11);
}

uint64_t sub_1C6299510(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C6299528(_QWORD *a1)
{
  sub_1C570E2BC(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C629954C(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C6299558(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C6299568(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  void *v4;
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_3:
    v4 = &unk_1E817B270;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_3;
  }
  return result;
}

_QWORD *sub_1C62995D8(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C62995E0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E817B220;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6299634(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C629963C(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C6299650(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C6299664(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C6299678(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

llvm::yaml::Output *sub_1C62996A4(llvm::yaml::Output *a1, uint64_t a2)
{
  llvm::yaml::Output::beginDocuments(a1);
  if (llvm::yaml::Output::preflightDocument(a1, 0))
  {
    (*(void (**)(llvm::yaml::Output *))(*(_QWORD *)a1 + 104))(a1);
    sub_1C6299794((uint64_t *)a1, a2);
    (*(void (**)(llvm::yaml::Output *))(*(_QWORD *)a1 + 112))(a1);
    llvm::yaml::Output::postflightDocument(a1);
  }
  llvm::yaml::Output::endDocuments(a1);
  return a1;
}

void sub_1C6299720()
{
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C6299734(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E817B350;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C629976C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E817B350;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1C629978C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_1C6299794(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const void **v11;
  uint64_t v12;
  const void **v13;
  uint64_t v14;
  int64x2_t *v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  uint64_t v19;
  int64x2_t v20;
  uint64_t v21;

  sub_1C6299A7C(a1, (uint64_t)"GlobalValueMap", (_QWORD *)a2, 0);
  sub_1C629A3F0(a1, (uint64_t)"TypeIdMap", (_QWORD *)(a2 + 56), 0);
  sub_1C6147850((uint64_t)a1, (uint64_t)"WithGlobalValueDeadStripping", (_BYTE *)(a2 + 128), 0);
  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
  {
    sub_1C5710ED8((uint64_t)&v20, *(_QWORD **)(a2 + 144), (_QWORD *)(a2 + 152));
    if (!(*(unsigned int (**)(uint64_t *))(*a1 + 56))(a1) || v20.i64[0] != v20.i64[1])
      sub_1C629B2D0(a1, (uint64_t)"CfiFunctionDefs", &v20, 0);
    sub_1C5710ED8((uint64_t)&v18, *(_QWORD **)(a2 + 168), (_QWORD *)(a2 + 176));
    if (!(*(unsigned int (**)(uint64_t *))(*a1 + 56))(a1) || v18.i64[0] != v18.i64[1])
      sub_1C629B2D0(a1, (uint64_t)"CfiFunctionDecls", &v18, 0);
  }
  else
  {
    v20 = 0uLL;
    v21 = 0;
    if ((*(unsigned int (**)(uint64_t *))(*a1 + 56))(a1))
    {
      v18.i64[1] = 0;
      v19 = 0;
      v18.i64[0] = (uint64_t)&v18.i64[1];
    }
    else
    {
      sub_1C629B2D0(a1, (uint64_t)"CfiFunctionDefs", &v20, 0);
      v12 = v20.i64[1];
      v11 = (const void **)v20.i64[0];
      v18.i64[1] = 0;
      v19 = 0;
      v18.i64[0] = (uint64_t)&v18.i64[1];
      while (v11 != (const void **)v12)
      {
        sub_1C57113EC((uint64_t **)&v18, &v18.i64[1], v11, (uint64_t)v11);
        v11 += 3;
      }
    }
    v4 = a2 + 152;
    sub_1C47653C0(a2 + 144, *(char **)(a2 + 152));
    v5 = v18.i64[1];
    *(_QWORD *)(a2 + 144) = v18.i64[0];
    *(_QWORD *)(a2 + 152) = v5;
    v6 = v19;
    *(_QWORD *)(a2 + 160) = v19;
    if (v6)
    {
      *(_QWORD *)(v5 + 16) = v4;
      v18.i64[1] = 0;
      v19 = 0;
      v18.i64[0] = (uint64_t)&v18.i64[1];
      v5 = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 144) = v4;
    }
    sub_1C47653C0((uint64_t)&v18, (char *)v5);
    v18 = 0uLL;
    v19 = 0;
    if ((*(unsigned int (**)(uint64_t *))(*a1 + 56))(a1))
    {
      v16 = 0;
      v17 = 0;
      v15 = (int64x2_t *)&v16;
    }
    else
    {
      sub_1C629B2D0(a1, (uint64_t)"CfiFunctionDecls", &v18, 0);
      v14 = v18.i64[1];
      v13 = (const void **)v18.i64[0];
      v16 = 0;
      v17 = 0;
      v15 = (int64x2_t *)&v16;
      while (v13 != (const void **)v14)
      {
        sub_1C57113EC((uint64_t **)&v15, &v16, v13, (uint64_t)v13);
        v13 += 3;
      }
    }
    v8 = *(char **)(a2 + 176);
    v7 = (uint64_t *)(a2 + 176);
    sub_1C47653C0((uint64_t)(v7 - 1), v8);
    v9 = v16;
    *(v7 - 1) = (uint64_t)v15;
    *v7 = v9;
    v10 = v17;
    v7[1] = v17;
    if (v10)
    {
      *(_QWORD *)(v9 + 16) = v7;
      v16 = 0;
      v17 = 0;
      v15 = (int64x2_t *)&v16;
      v9 = 0;
    }
    else
    {
      *(v7 - 1) = (uint64_t)v7;
    }
    sub_1C47653C0((uint64_t)&v15, (char *)v9);
  }
  v15 = &v18;
  sub_1C4765410((void ***)&v15);
  v18.i64[0] = (uint64_t)&v20;
  sub_1C4765410((void ***)&v18);
}

uint64_t sub_1C6299A7C(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    sub_1C6299B08(a1, a3);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v8);
  }
  return result;
}

uint64_t sub_1C6299B08(uint64_t *a1, _QWORD *a2)
{
  int v4;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
  (*(void (**)(uint64_t *))(*a1 + 104))(a1);
  if (v4)
  {
    sub_1C570E69C(a1, a2);
    return (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  }
  else
  {
    (*(void (**)(_QWORD **__return_ptr, uint64_t *))(*a1 + 136))(&v10, a1);
    v6 = v10;
    v7 = v11;
    if (v10 != v11)
    {
      do
      {
        v8 = (void *)*v6;
        v9 = v6[1];
        v6 += 2;
        sub_1C570EB6C(a1, v8, v9, (uint64_t)a2);
      }
      while (v6 != v7);
      v6 = v10;
    }
    if (v6)
    {
      v11 = v6;
      operator delete(v6);
    }
    return (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  }
}

__n128 sub_1C6299BE4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __n128 result;

  v2 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_QWORD *)(a1 + 32) = a2[4];
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  *(_QWORD *)(a1 + 56) = a2[7];
  a2[5] = 0;
  a2[6] = 0;
  a2[7] = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_QWORD *)(a1 + 80) = a2[10];
  a2[8] = 0;
  a2[9] = 0;
  a2[10] = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
  *(_QWORD *)(a1 + 104) = a2[13];
  a2[11] = 0;
  a2[12] = 0;
  a2[13] = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
  *(_QWORD *)(a1 + 128) = a2[16];
  a2[14] = 0;
  a2[15] = 0;
  a2[16] = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  result = *(__n128 *)(a2 + 17);
  *(__n128 *)(a1 + 136) = result;
  *(_QWORD *)(a1 + 152) = a2[19];
  a2[17] = 0;
  a2[18] = 0;
  a2[19] = 0;
  return result;
}

uint64_t sub_1C6299CB8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v7;

  v7 = (void **)(a1 + 136);
  sub_1C4EEBCC8(&v7);
  v7 = (void **)(a1 + 112);
  sub_1C4EEBCC8(&v7);
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(_QWORD *)(a1 + 72) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    *(_QWORD *)(a1 + 48) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 16);
  if (v5)
  {
    *(_QWORD *)(a1 + 24) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_1C6299D40(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    sub_1C570F1A0(a1, a3);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v8);
  }
  return result;
}

uint64_t sub_1C6299DC8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  sub_1C6133C1C(a1, (uint64_t)"Linkage", (_DWORD *)a2, 0);
  sub_1C6133C1C(a1, (uint64_t)"Visibility", (_DWORD *)(a2 + 4), 0);
  sub_1C6147850((uint64_t)a1, (uint64_t)"NotEligibleToImport", (_BYTE *)(a2 + 8), 0);
  sub_1C6147850((uint64_t)a1, (uint64_t)"Live", (_BYTE *)(a2 + 9), 0);
  sub_1C6147850((uint64_t)a1, (uint64_t)"Local", (_BYTE *)(a2 + 10), 0);
  sub_1C6147850((uint64_t)a1, (uint64_t)"CanAutoHide", (_BYTE *)(a2 + 11), 0);
  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 56))(a1) || *(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 24))
    sub_1C629A014((uint64_t)a1, (uint64_t)"Refs", (_QWORD *)(a2 + 16), 0);
  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 56))(a1) || *(_QWORD *)(a2 + 40) != *(_QWORD *)(a2 + 48))
    sub_1C629A014((uint64_t)a1, (uint64_t)"TypeTests", (_QWORD *)(a2 + 40), 0);
  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 56))(a1) || *(_QWORD *)(a2 + 64) != *(_QWORD *)(a2 + 72))
    sub_1C629A09C((uint64_t)a1, (uint64_t)"TypeTestAssumeVCalls", (_QWORD *)(a2 + 64), 0);
  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 56))(a1) || *(_QWORD *)(a2 + 88) != *(_QWORD *)(a2 + 96))
    sub_1C629A09C((uint64_t)a1, (uint64_t)"TypeCheckedLoadVCalls", (_QWORD *)(a2 + 88), 0);
  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 56))(a1) || *(_QWORD *)(a2 + 112) != *(_QWORD *)(a2 + 120))
    sub_1C629A124((uint64_t)a1, (uint64_t)"TypeTestAssumeConstVCalls", (uint64_t *)(a2 + 112), 0);
  result = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
  if (!(_DWORD)result || *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
    return sub_1C629A124((uint64_t)a1, (uint64_t)"TypeCheckedLoadConstVCalls", (uint64_t *)(a2 + 136), 0);
  return result;
}

uint64_t sub_1C629A014(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    sub_1C570F2E8(a1, a3);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8);
  }
  return result;
}

uint64_t sub_1C629A09C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    sub_1C570F550(a1, a3);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8);
  }
  return result;
}

uint64_t sub_1C629A124(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    sub_1C570F828(a1, a3);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8);
  }
  return result;
}

uint64_t sub_1C629A1AC(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  sub_1C629A22C(a1, (uint64_t)"VFunc", a2, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  if (!(_DWORD)result || a2[2] != a2[3])
    return sub_1C629A014(a1, (uint64_t)"Args", a2 + 2, 0);
  return result;
}

uint64_t sub_1C629A22C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
    sub_1C6206E70(a1, (uint64_t)"GUID", a3, 0);
    sub_1C6206E70(a1, (uint64_t)"Offset", a3 + 1, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8);
  }
  return result;
}

void sub_1C629A2EC(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;

  v3 = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1C570F970(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 40 * a2;
    while (v3 != v7)
    {
      v8 = *(void **)(v3 - 24);
      if (v8)
      {
        *(_QWORD *)(v3 - 16) = v8;
        operator delete(v8);
      }
      v3 -= 40;
    }
    a1[1] = v7;
  }
}

void sub_1C629A378(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 5);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1C570FAE4((uint64_t)a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 160 * a2;
    while (v3 != v7)
      v3 = sub_1C6299CB8(v3 - 160);
    a1[1] = v7;
  }
}

uint64_t sub_1C629A3F0(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    sub_1C629A47C(a1, a3);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v8);
  }
  return result;
}

uint64_t sub_1C629A47C(uint64_t *a1, _QWORD *a2)
{
  int v4;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
  (*(void (**)(uint64_t *))(*a1 + 104))(a1);
  if (v4)
  {
    sub_1C5710060((uint64_t)a1, a2);
    return (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  }
  else
  {
    (*(void (**)(_QWORD **__return_ptr, uint64_t *))(*a1 + 136))(&v10, a1);
    v6 = v10;
    v7 = v11;
    if (v10 != v11)
    {
      do
      {
        v8 = (void *)*v6;
        v9 = v6[1];
        v6 += 2;
        sub_1C57100F8(a1, v8, v9, (uint64_t)a2);
      }
      while (v6 != v7);
      v6 = v10;
    }
    if (v6)
    {
      v11 = v6;
      operator delete(v6);
    }
    return (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  }
}

uint64_t sub_1C629A558(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *))(*a1 + 104))(a1);
    sub_1C629A618(a1, (uint64_t)"TTRes", a3, 0);
    sub_1C629AA2C(a1, (uint64_t)"WPDRes", (uint64_t **)(a3 + 40), 0);
    (*(void (**)(uint64_t *))(*a1 + 112))(a1);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v8);
  }
  return result;
}

uint64_t sub_1C629A618(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *))(*a1 + 104))(a1);
    sub_1C629A6AC(a1, a3);
    (*(void (**)(uint64_t *))(*a1 + 112))(a1);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v8);
  }
  return result;
}

uint64_t sub_1C629A6AC(uint64_t *a1, uint64_t a2)
{
  sub_1C629A778((uint64_t)a1, (uint64_t)"Kind", (_DWORD *)a2, 0);
  sub_1C6133C1C(a1, (uint64_t)"SizeM1BitWidth", (_DWORD *)(a2 + 4), 0);
  sub_1C6206E70((uint64_t)a1, (uint64_t)"AlignLog2", (unint64_t *)(a2 + 8), 0);
  sub_1C6206E70((uint64_t)a1, (uint64_t)"SizeM1", (unint64_t *)(a2 + 16), 0);
  sub_1C629A9A4(a1, (uint64_t)"BitMask", (_BYTE *)(a2 + 24), 0);
  return sub_1C6206E70((uint64_t)a1, (uint64_t)"InlineBits", (unint64_t *)(a2 + 32), 0);
}

uint64_t sub_1C629A778(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    sub_1C629A80C(a1, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8);
  }
  return result;
}

uint64_t sub_1C629A80C(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 5)
    v5 = v4;
  else
    v5 = 0;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "Unknown", v5))
    *a2 = 5;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2)
    v7 = 0;
  else
    v7 = v6;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "Unsat", v7))
    *a2 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 1)
    v9 = v8;
  else
    v9 = 0;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "ByteArray", v9))
    *a2 = 1;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 2)
    v11 = v10;
  else
    v11 = 0;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "Inline", v11))
    *a2 = 2;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 3)
    v13 = v12;
  else
    v13 = 0;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "Single", v13))
    *a2 = 3;
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 4)
    v15 = v14;
  else
    v15 = 0;
  result = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "AllOnes", v15);
  if ((_DWORD)result)
    *a2 = 4;
  return result;
}

uint64_t sub_1C629A9A4(uint64_t *a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    sub_1C571038C(a1, a3);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v8);
  }
  return result;
}

uint64_t sub_1C629AA2C(uint64_t *a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    sub_1C629AAB8(a1, a3);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v8);
  }
  return result;
}

uint64_t sub_1C629AAB8(uint64_t *a1, uint64_t **a2)
{
  int v4;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
  (*(void (**)(uint64_t *))(*a1 + 104))(a1);
  if (v4)
  {
    sub_1C57104F0(a1, a2);
    return (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  }
  else
  {
    (*(void (**)(_QWORD **__return_ptr, uint64_t *))(*a1 + 136))(&v10, a1);
    v6 = v10;
    v7 = v11;
    if (v10 != v11)
    {
      do
      {
        v8 = (void *)*v6;
        v9 = v6[1];
        v6 += 2;
        sub_1C5710644(a1, v8, v9, a2);
      }
      while (v6 != v7);
      v6 = v10;
    }
    if (v6)
    {
      v11 = v6;
      operator delete(v6);
    }
    return (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  }
}

uint64_t sub_1C629AB94(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *))(*a1 + 104))(a1);
    sub_1C629AC28(a1, a3);
    (*(void (**)(uint64_t *))(*a1 + 112))(a1);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v8);
  }
  return result;
}

uint64_t sub_1C629AC28(uint64_t *a1, uint64_t a2)
{
  sub_1C629ACA0((uint64_t)a1, (uint64_t)"Kind", (_DWORD *)a2, 0);
  sub_1C629AE0C(a1, (uint64_t)"SingleImplName", a2 + 8, 0);
  return sub_1C629AE94(a1, (uint64_t)"ResByArg", (_QWORD *)(a2 + 32), 0);
}

uint64_t sub_1C629ACA0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    sub_1C629AD34(a1, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8);
  }
  return result;
}

uint64_t sub_1C629AD34(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2)
    v5 = 0;
  else
    v5 = v4;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "Indir", v5))
    *a2 = 0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 1)
    v7 = v6;
  else
    v7 = 0;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "SingleImpl", v7))
    *a2 = 1;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 2)
    v9 = v8;
  else
    v9 = 0;
  result = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "BranchFunnel", v9);
  if ((_DWORD)result)
    *a2 = 2;
  return result;
}

uint64_t sub_1C629AE0C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    sub_1C5710824(a1, a3);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v8);
  }
  return result;
}

uint64_t sub_1C629AE94(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    sub_1C629AF20(a1, a3);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v8);
  }
  return result;
}

uint64_t sub_1C629AF20(uint64_t *a1, _QWORD *a2)
{
  int v4;
  char **v6;
  char **v7;
  char *v8;
  size_t v9;
  char **v10;
  char **v11;

  v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
  (*(void (**)(uint64_t *))(*a1 + 104))(a1);
  if (v4)
  {
    sub_1C5710998(a1, a2);
    return (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  }
  else
  {
    (*(void (**)(char ***__return_ptr, uint64_t *))(*a1 + 136))(&v10, a1);
    v6 = v10;
    v7 = v11;
    if (v10 != v11)
    {
      do
      {
        v8 = *v6;
        v9 = (size_t)v6[1];
        v6 += 2;
        sub_1C5710B7C(a1, v8, v9, (uint64_t)a2);
      }
      while (v6 != v7);
      v6 = v10;
    }
    if (v6)
    {
      v11 = v6;
      operator delete(v6);
    }
    return (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  }
}

uint64_t sub_1C629AFFC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *))(*a1 + 104))(a1);
    sub_1C629B090(a1, a3);
    (*(void (**)(uint64_t *))(*a1 + 112))(a1);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v8);
  }
  return result;
}

uint64_t sub_1C629B090(uint64_t *a1, uint64_t a2)
{
  sub_1C629B124((uint64_t)a1, (uint64_t)"Kind", (_DWORD *)a2, 0);
  sub_1C6206E70((uint64_t)a1, (uint64_t)"Info", (unint64_t *)(a2 + 8), 0);
  sub_1C6133C1C(a1, (uint64_t)"Byte", (_DWORD *)(a2 + 16), 0);
  return sub_1C6133C1C(a1, (uint64_t)"Bit", (_DWORD *)(a2 + 20), 0);
}

uint64_t sub_1C629B124(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    sub_1C629B1B8(a1, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8);
  }
  return result;
}

uint64_t sub_1C629B1B8(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t result;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2)
    v5 = 0;
  else
    v5 = v4;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "Indir", v5))
    *a2 = 0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 1)
    v7 = v6;
  else
    v7 = 0;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "UniformRetVal", v7))
    *a2 = 1;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 2)
    v9 = v8;
  else
    v9 = 0;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "UniqueRetVal", v9))
    *a2 = 2;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 3)
    v11 = v10;
  else
    v11 = 0;
  result = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "VirtualConstProp", v11);
  if ((_DWORD)result)
    *a2 = 3;
  return result;
}

uint64_t sub_1C629B2D0(uint64_t *a1, uint64_t a2, int64x2_t *a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    sub_1C5711074(a1, a3);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v8);
  }
  return result;
}

uint64_t sub_1C629B358(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t *sub_1C629B364(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    v5 = (_QWORD *)(v3 + 8);
    do
    {
      if (*(v5 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        v5 = sub_1C571543C(v5);
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

_QWORD *sub_1C629B3C0(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v3 = 3 * a2;
    v4 = 24 * a2;
    v5 = (char *)operator new(24 * a2);
    *a1 = v5;
    v6 = &v5[8 * v3];
    a1[2] = v6;
    v7 = v5 + 8;
    do
    {
      *v7 = 0;
      v7[1] = 0;
      *(v7 - 1) = v7;
      v7 += 3;
      v4 -= 24;
    }
    while (v4);
    a1[1] = v6;
  }
  return a1;
}

uint64_t *sub_1C629B444(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *result;
  *result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v2;
  v5 = result[1];
  v4 = result[2];
  v3 = result + 1;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (result[2])
    result = (uint64_t *)(*v3 + 16);
  *result = (uint64_t)v3;
  v6 = (_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
  if (!v4)
    v6 = (_QWORD *)a2;
  *v6 = a2 + 8;
  return result;
}

void sub_1C629B49C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  sub_1C47655E8(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

_QWORD *sub_1C629B504(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;

  v4 = operator new(0x18uLL);
  a1[1] = v4 + 3;
  a1[2] = v4 + 3;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  *a1 = v4;
  sub_1C5718840(a1 + 3, a2);
  return a1;
}

void sub_1C629B550(__int128 *a1, uint64_t *a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED80CD70, 0, 0);
  dword_1ED80CDF0 = 0;
  qword_1ED80CDF8 = (uint64_t)&unk_1E817B270;
  unk_1ED80CE00 = 0;
  qword_1ED80CD70 = (uint64_t)&unk_1E817B1B8;
  qword_1ED80CE08 = (uint64_t)&unk_1E817B220;
  unk_1ED80CE10 = &qword_1ED80CD70;
  qword_1ED80CE18 = (uint64_t)&unk_1ED80CE28;
  qword_1ED80CE20 = 0x800000000;
  qword_1ED80CFA8 = (uint64_t)&unk_1E817B3D8;
  qword_1ED80CFC0 = (uint64_t)&qword_1ED80CFA8;
  sub_1C571A94C(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80CD70);
}

void sub_1C629B60C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C629B620()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E817B3D8;
  return result;
}

void sub_1C629B648(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E817B3D8;
}

void sub_1C629B668(uint64_t a1, unint64_t a2)
{
  _OWORD *v3;
  char *v4;
  unsigned int v5;
  char *v6;
  _OWORD *v7;
  __int128 v8;
  int v9;
  int v10;
  unint64_t v11;

  v11 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 48, &v11);
  v4 = *(char **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = &v4[48 * v5];
    v7 = v3;
    do
    {
      v8 = *((_OWORD *)v4 + 1);
      *v7 = *(_OWORD *)v4;
      v7[1] = v8;
      *((_QWORD *)v7 + 4) = &unk_1E817B290;
      v9 = *((_DWORD *)v4 + 10);
      *((_BYTE *)v7 + 44) = v4[44];
      *((_DWORD *)v7 + 10) = v9;
      *((_QWORD *)v7 + 4) = &unk_1E817B270;
      v4 += 48;
      v7 += 3;
    }
    while (v4 != v6);
    v4 = *(char **)a1;
  }
  v10 = v11;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v10;
}

uint64_t llvm::createMergeFunctionsPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C571AF68(v1);
}

_QWORD *llvm::MergeFunctionsPass::run@<X0>(llvm::Function *a1@<X1>, uint64_t a2@<X8>)
{
  __n128 v4;
  _QWORD v6[19];

  sub_1C571B030((uint64_t)v6);
  if ((sub_1C571B0D0((uint64_t)v6, a1, v4) & 1) != 0)
  {
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)(a2 + 88) = 0;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_QWORD *)a2 = a2 + 32;
    *(_QWORD *)(a2 + 8) = a2 + 32;
    *(_QWORD *)(a2 + 16) = 2;
    *(_QWORD *)(a2 + 48) = a2 + 80;
    *(_QWORD *)(a2 + 56) = a2 + 80;
    *(_DWORD *)(a2 + 64) = 2;
  }
  else
  {
    llvm::InstCountPass::run(a2);
  }
  return sub_1C571C0B4(v6);
}

_QWORD *sub_1C629B7E0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  void *v5;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  sub_1C4E42548(v6, (_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(a1 + 32);
  v5 = &unk_1E817B4C0;
  v8 = v2;
  result = (_QWORD *)sub_1C629B8C0(v2, (uint64_t)&v5);
  if (v7 != -8192 && v7 != -4096 && v7 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList(v6);
  return result;
}

_QWORD *sub_1C629B858(uint64_t a1)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_1C4E42548(&v4, (_QWORD *)(a1 + 8));
  v6 = *(_QWORD *)(a1 + 32);
  if (v5 != -8192 && v5 != -4096 && v5 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList(result);
  return result;
}

uint64_t sub_1C629B8C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t *v7;
  uint64_t v8[2];
  uint64_t v9;
  unint64_t v10;

  v7 = 0;
  v3 = sub_1C629B974((uint64_t *)a1, a2, (uint64_t *)&v7);
  if ((_DWORD)v3)
  {
    v4 = v7;
    v8[1] = 0;
    v9 = -8192;
    v7 = (unint64_t *)&unk_1E817B4C0;
    v8[0] = 2;
    v10 = 0;
    sub_1C4D98DE0(v4 + 1, v8);
    v5 = v9;
    v4[4] = v10;
    if (v5 != -8192 && v5 != -4096 && v5)
      llvm::ValueHandleBase::RemoveFromUseList(v8);
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  return v3;
}

uint64_t sub_1C629B974(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned int v14;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *(_QWORD *)(a2 + 24);
    v6 = v3 - 1;
    v7 = ((v5 >> 4) ^ (v5 >> 9)) & (v3 - 1);
    v8 = *a1 + 48 * v7;
    v9 = *(_QWORD *)(v8 + 24);
    if (v5 == v9)
    {
      result = 1;
    }
    else
    {
      v11 = 0;
      v12 = 1;
      result = 1;
      while (v9 != -4096)
      {
        if (v11)
          v13 = 0;
        else
          v13 = v9 == -8192;
        if (v13)
          v11 = v8;
        v14 = v7 + v12++;
        v7 = v14 & v6;
        v8 = v4 + 48 * (v14 & v6);
        v9 = *(_QWORD *)(v8 + 24);
        if (v5 == v9)
          goto LABEL_4;
      }
      result = 0;
      if (v11)
        v8 = v11;
    }
  }
  else
  {
    v8 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v8;
  return result;
}

_QWORD *sub_1C629BA18(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *((unsigned int *)result + 4);
  if ((_DWORD)v1)
  {
    v2 = 48 * v1;
    v3 = (uint64_t *)(*result + 24);
    do
    {
      v4 = *v3;
      if (*v3 != -8192 && v4 != -4096 && v4 != 0)
        result = llvm::ValueHandleBase::RemoveFromUseList(v3 - 2);
      v3 += 6;
      v2 -= 48;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1C629BA74(uint64_t a1)
{
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 40), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 16), 8);
  return a1;
}

uint64_t sub_1C629BAAC(uint64_t *a1, uint64_t a2)
{
  llvm::ValueHandleBase *v3;
  uint64_t result;

  v3 = (llvm::ValueHandleBase *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    result = sub_1C571DF5C(a1, a2);
  }
  else
  {
    *(_QWORD *)v3 = 6;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = a2;
    if (a2 != -8192 && a2 != -4096 && a2)
      llvm::ValueHandleBase::AddToUseList(v3);
    result = (uint64_t)v3 + 24;
  }
  a1[1] = result;
  return result;
}

int32x2_t sub_1C629BB10(int32x2_t *a1, uint64_t a2)
{
  uint64_t v4;
  int32x2_t result;
  uint64_t v7[2];
  uint64_t v8;
  uint64_t v9;

  v7[1] = 0;
  v8 = -8192;
  v7[0] = 2;
  v9 = 0;
  sub_1C4D98DE0((unint64_t *)(a2 + 8), v7);
  v4 = v8;
  *(_QWORD *)(a2 + 32) = v9;
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList(v7);
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

char *sub_1C629BBAC(char *result)
{
  char *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12[2];
  uint64_t v13;
  uint64_t v14;

  v1 = result;
  v2 = *((_DWORD *)result + 2);
  if (v2 || *((_DWORD *)result + 3))
  {
    v3 = *((unsigned int *)result + 4);
    if (v3 <= 4 * v2 || v3 < 0x41)
    {
      v12[1] = 0;
      v13 = -4096;
      v8[1] = 0;
      v9 = -8192;
      v11 = &unk_1E817B4C0;
      v12[0] = 2;
      v14 = 0;
      v8[0] = 2;
      v10 = 0;
      if ((_DWORD)v3)
      {
        v4 = 48 * v3;
        v5 = (_QWORD *)(*(_QWORD *)result + 32);
        do
        {
          result = (char *)sub_1C4D98DE0(v5 - 3, v12);
          *v5 = v14;
          v5 += 6;
          v4 -= 48;
        }
        while (v4);
        v6 = v9;
        *((_QWORD *)v1 + 1) = 0;
        if (v6 != -8192 && v6 != -4096 && v6 != 0)
          result = (char *)llvm::ValueHandleBase::RemoveFromUseList(v8);
      }
      else
      {
        *((_QWORD *)result + 1) = 0;
      }
      if (v13 != -8192 && v13 != -4096)
      {
        if (v13)
          return (char *)llvm::ValueHandleBase::RemoveFromUseList(v12);
      }
    }
    else
    {
      return sub_1C571E1CC(result);
    }
  }
  return result;
}

__n128 llvm::ModuleInlinerPass::getAdvisor(uint64_t *a1, uint64_t a2, uint64_t a3, const llvm::Module *a4)
{
  __n128 result;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  __int128 v14;
  int v15;

  if (!*a1
    && !llvm::AnalysisManager<llvm::Module>::getCachedResultImpl(a2, (uint64_t)&llvm::InlineAdvisorAnalysis::Key, (uint64_t)a4))
  {
    v8 = (_QWORD *)operator new();
    v13 = *(_OWORD *)(a1 + 5);
    v14 = *(_OWORD *)(a1 + 7);
    v15 = *((_DWORD *)a1 + 18);
    v11 = *(_OWORD *)(a1 + 1);
    v12 = *(__n128 *)(a1 + 3);
    v9 = llvm::InlineAdvisor::InlineAdvisor(v8, a4, a3);
    *v9 = &off_1E81383D0;
    *((_OWORD *)v9 + 4) = v13;
    *((_OWORD *)v9 + 5) = v14;
    *((_DWORD *)v9 + 24) = v15;
    result = v12;
    *((_OWORD *)v9 + 2) = v11;
    *((__n128 *)v9 + 3) = v12;
    v10 = *a1;
    *a1 = (uint64_t)v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return result;
}

unint64_t llvm::AAExecutionDomain::createForPosition(llvm::AAExecutionDomain *this, const llvm::IRPosition *a2, llvm::Attributor *a3)
{
  unint64_t result;
  uint64_t v6;
  int64x2_t v7;

  if (sub_1C6283CA4(this) != 4)
    return 0;
  result = sub_1C484358C(*((_QWORD *)a2 + 3), 336, 3);
  *(_OWORD *)(result + 16) = *(_OWORD *)this;
  *(_WORD *)(result + 40) = 256;
  *(_QWORD *)result = off_1E817B4E8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 32) = &unk_1E817B578;
  *(_QWORD *)(result + 48) = 1;
  v6 = 56;
  v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)(result + v6) = v7;
    v6 += 16;
  }
  while (v6 != 184);
  *(_QWORD *)(result + 184) = result + 200;
  *(_QWORD *)(result + 192) = 0x1000000000;
  *(_QWORD *)(result + 328) = 0;
  return result;
}

void llvm::OpenMPOptCGSCCPass::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::omp *v19;
  uint64_t ModuleFlag;
  int v21;
  _QWORD v22[2];
  int v23;
  uint64_t v24;
  void **v25;
  _QWORD *v26;
  uint64_t (*v27)(uint64_t *, uint64_t);
  uint64_t *v28;
  _QWORD *v29;
  _BYTE *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t (*v35)(uint64_t *, uint64_t);
  uint64_t *v36;
  const char *v37;
  _QWORD v38[2];
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[6];
  _BYTE v46[5520];
  _QWORD v47[3700];
  _QWORD v48[3];
  int v49;
  _QWORD v50[18];
  _QWORD v51[18];
  _OWORD v52[9];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[4];
  _QWORD v59[6];
  _QWORD v60[2];
  _QWORD *v61;
  uint64_t v62;
  _QWORD v63[18];

  MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v63[16] = *MEMORY[0x1E0C80C00];
  if (llvm::Module::getModuleFlag(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v10 + 8) + 8) + 40), "openmp", 6uLL)
    && !byte_1ED80D348)
  {
    v61 = v63;
    v62 = 0x1000000000;
    v14 = *(unsigned int *)(v11 + 16);
    if (!(_DWORD)v14)
      goto LABEL_10;
    v15 = 0;
    v16 = *(_QWORD *)(v11 + 8);
    v17 = 8 * v14;
    do
    {
      v18 = *(_QWORD *)(*(_QWORD *)v16 + 8);
      if (v15 >= HIDWORD(v62))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v15 + 1, 8);
        v15 = v62;
      }
      v61[v15] = v18;
      v15 = v62 + 1;
      LODWORD(v62) = v62 + 1;
      v16 += 8;
      v17 -= 8;
    }
    while (v17);
    if (v15)
    {
      v19 = *(llvm::omp **)(*(_QWORD *)(**(_QWORD **)(v11 + 8) + 8) + 40);
      llvm::omp::getDeviceKernels(v19, (uint64_t)v45);
      v43 = *(_QWORD *)(llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(v9, &llvm::FunctionAnalysisManagerCGSCCProxy::Key, v11, v7)+ 8);
      v44 = v43;
      v58[1] = 0;
      v58[2] = v59;
      v58[3] = 0x400000000;
      v59[4] = v60;
      v60[0] = 0;
      v59[5] = 0;
      v60[1] = 1;
      v48[0] = v50;
      v48[1] = v50;
      v48[2] = 16;
      v49 = 0;
      v50[16] = v51;
      v50[17] = 0x1000000000;
      v51[16] = v52;
      v51[17] = 0x1000000000;
      v52[8] = 0u;
      v57 = 0;
      v58[0] = 0;
      v53 = v7;
      v54 = v11;
      v55 = v9;
      v56 = v5;
      v57 = *(_QWORD *)(llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(v9, &llvm::FunctionAnalysisManagerCGSCCProxy::Key, v11, v7)+ 8);
      v38[0] = 0;
      v38[1] = 0;
      v39 = 0;
      v41 = 0;
      v42 = 0;
      v40 = 0;
      sub_1C573F0A4(v38, v61, &v61[v62]);
      sub_1C5720134((uint64_t)v47, *(uint64_t **)(*(_QWORD *)(v41 - 8) + 40), (uint64_t)&v44, (uint64_t)v58, (uint64_t)v38, (uint64_t)v45);
      ModuleFlag = llvm::Module::getModuleFlag((uint64_t)v19, "openmp-device", 0xDuLL);
      v21 = dword_1ED80DE88;
      LODWORD(v31) = 256;
      if (!ModuleFlag)
        v21 = 32;
      *((_QWORD *)&v31 + 1) = v48;
      v32 = 0;
      v33 = v21;
      v34 = 1;
      v35 = sub_1C57460A4;
      v36 = &v43;
      v37 = "openmp-opt";
      sub_1C62874B8((uint64_t)v46, (uint64_t)v38, (uint64_t)v47, &v31);
      v22[0] = 0;
      v22[1] = 0;
      v23 = 0;
      v24 = *(_QWORD *)(*v61 + 40);
      v25 = (void **)&v61;
      v26 = v48;
      v27 = sub_1C57460A4;
      v28 = &v43;
      v29 = v47;
      v30 = v46;
      if (sub_1C572045C((uint64_t)v22, 0))
      {
        *(_OWORD *)(v13 + 40) = 0u;
        *(_OWORD *)(v13 + 56) = 0u;
        *(_QWORD *)(v13 + 88) = 0;
        *(_OWORD *)(v13 + 72) = 0u;
        *(_OWORD *)(v13 + 24) = 0u;
        *(_QWORD *)v13 = v13 + 32;
        *(_QWORD *)(v13 + 8) = v13 + 32;
        *(_QWORD *)(v13 + 16) = 2;
        *(_QWORD *)(v13 + 48) = v13 + 80;
        *(_QWORD *)(v13 + 56) = v13 + 80;
        *(_DWORD *)(v13 + 64) = 2;
      }
      else
      {
        llvm::InstCountPass::run(v13);
      }
      MEMORY[0x1CAA32FB4](v22[0], 8);
      llvm::Attributor::~Attributor((llvm::Attributor *)v46);
      sub_1C5723C98(v47);
      sub_1C5408A20(v38);
      sub_1C62878B8((llvm::CallGraphUpdater *)v48);
      sub_1C4926AE8((uint64_t)v58);
      sub_1C5408A20(v45);
    }
    else
    {
LABEL_10:
      llvm::InstCountPass::run(v13);
    }
    if (v61 != v63)
      free(v61);
  }
  else
  {
    llvm::InstCountPass::run(v13);
  }
}

uint64_t llvm::createOpenMPOptCGSCCLegacyPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5723E28(v1);
}

void sub_1C629C2D8(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "AAExecutionDomain");
}

void *sub_1C629C2FC()
{
  return &llvm::AAExecutionDomain::ID;
}

uint64_t sub_1C629C308(uint64_t a1, uint64_t a2)
{
  void *v5;
  __int128 v6;

  v5 = &llvm::AAExecutionDomain::ID;
  v6 = *(_OWORD *)(a2 + 16);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, a2);
  return a2;
}

uint64_t sub_1C629C374(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if (sub_1C61EAAB0(a1, a2, &v6))
    return v6;
  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 16;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 8 * v5;
}

double sub_1C629C3D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double result;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x800000000;
  *(_QWORD *)(a1 + 336) = a2;
  v2 = *a2;
  *(_QWORD *)(a1 + 344) = a1 + 360;
  *(_QWORD *)(a1 + 352) = 0x200000000;
  *(_QWORD *)(a1 + 408) = v2;
  *(_QWORD *)(a1 + 416) = a1 + 464;
  *(_QWORD *)(a1 + 424) = a1 + 472;
  *(_QWORD *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 0;
  *(_WORD *)(a1 + 444) = 512;
  *(_BYTE *)(a1 + 446) = 7;
  result = 0.0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_QWORD *)(a1 + 464) = &unk_1E8167888;
  *(_QWORD *)(a1 + 472) = &unk_1E8167A08;
  *(_DWORD *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_DWORD *)(a1 + 500) = 16;
  *(_DWORD *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_QWORD *)(a1 + 536) = a1 + 552;
  *(_QWORD *)(a1 + 544) = 0x1000000000;
  *(_QWORD *)(a1 + 1976) = 0;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_QWORD *)(a1 + 1984) = 0x1000000000;
  *(_QWORD *)(a1 + 1992) = 0;
  *(_QWORD *)(a1 + 2000) = 0;
  *(_QWORD *)(a1 + 2008) = a1 + 2024;
  *(_QWORD *)(a1 + 2016) = 0x400000000;
  *(_QWORD *)(a1 + 2056) = a1 + 2072;
  *(_QWORD *)(a1 + 2064) = 0;
  *(_QWORD *)(a1 + 2072) = 0;
  *(_QWORD *)(a1 + 2080) = 1;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_OWORD *)(a1 + 2120) = 0u;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_OWORD *)(a1 + 2216) = 0u;
  *(_OWORD *)(a1 + 2232) = 0u;
  *(_OWORD *)(a1 + 2248) = 0u;
  *(_OWORD *)(a1 + 2264) = 0u;
  *(_OWORD *)(a1 + 2280) = 0u;
  *(_OWORD *)(a1 + 2296) = 0u;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_OWORD *)(a1 + 2392) = 0u;
  *(_OWORD *)(a1 + 2408) = 0u;
  return result;
}

_QWORD *sub_1C629C4F8(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C617A1AC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C629C564(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
    v5[2] = 0;
  }
  return v5;
}

_QWORD *sub_1C629C564(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C573537C(a1, v6);
  v8 = 0;
  sub_1C617A1AC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C629C614(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = -4096;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C617A1AC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *(_OWORD *)(v10 + 1) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

void sub_1C629C6D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E817B5F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C629C6E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E817B5F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C629C710(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40))
    free(v2);
}

_QWORD *sub_1C629C730(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](*a1, 1);
  return a1;
}

uint64_t sub_1C629C76C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    sub_1C4DFE328(a1, a2);
    sub_1C4DE4490((_QWORD *)(a1 + 24), *(char **)(a2 + 24), *(char **)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  }
  return a1;
}

uint64_t sub_1C629C7B4(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    sub_1C5737E8C(a1, a2);
    sub_1C5737EF0((_QWORD *)(a1 + 24), *(char **)(a2 + 24), *(char **)(a2 + 32), *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24));
  }
  return a1;
}

unsigned __int8 *sub_1C629C7F8(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *result;
  int v12;
  char v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  BOOL v17;
  uint64_t v18;

  v6 = *(_DWORD *)(a2 + 16);
  if (!v6)
  {
    v14 = 0;
LABEL_6:
    result = sub_1C629C8D8(a2, a3, v14);
    *result = *a3;
    v7 = *(_QWORD *)a2;
    v6 = *(_DWORD *)(a2 + 16);
    v13 = 1;
    goto LABEL_4;
  }
  v7 = *(_QWORD *)a2;
  v8 = *a3;
  v9 = v6 - 1;
  v10 = (37 * v8) & v9;
  result = (unsigned __int8 *)(*(_QWORD *)a2 + v10);
  v12 = *result;
  if (v8 != v12)
  {
    v15 = 0;
    v16 = 1;
    while (v12 != 255)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v12 == 254;
      if (v17)
        v15 = result;
      v18 = (v10 + v16++);
      LODWORD(v10) = v18 & v9;
      result = (unsigned __int8 *)(v7 + (v18 & v9));
      v12 = *result;
      if (v8 == v12)
        goto LABEL_3;
    }
    if (v15)
      v14 = v15;
    else
      v14 = result;
    goto LABEL_6;
  }
LABEL_3:
  v13 = 0;
LABEL_4:
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v7 + v6;
  *(_BYTE *)(a1 + 16) = v13;
  return result;
}

unsigned __int8 *sub_1C629C8D8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v5;
  unsigned int v6;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  BOOL v23;
  uint64_t v24;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
    sub_1C573EF28(a1, v6);
    v17 = *(_DWORD *)(a1 + 16);
    if (v17)
    {
      v18 = *a2;
      v19 = (v17 - 1);
      v20 = (37 * v18) & v19;
      a3 = (unsigned __int8 *)(*(_QWORD *)a1 + v20);
      v21 = *a3;
      if (v18 == v21)
        goto LABEL_3;
      v13 = 0;
      v22 = 1;
      while (v21 != 255)
      {
        if (v13)
          v23 = 0;
        else
          v23 = v21 == 254;
        if (v23)
          v13 = a3;
        v24 = (v20 + v22++);
        LODWORD(v20) = v24 & v19;
        a3 = (unsigned __int8 *)(*(_QWORD *)a1 + (v24 & v19));
        v21 = *a3;
        if (v18 == v21)
          goto LABEL_3;
      }
      goto LABEL_21;
    }
LABEL_24:
    a3 = 0;
    goto LABEL_3;
  }
  sub_1C573EF28(a1, 2 * v6);
  v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_24;
  v9 = *a2;
  v10 = (v8 - 1);
  v11 = (37 * v9) & v10;
  a3 = (unsigned __int8 *)(*(_QWORD *)a1 + v11);
  v12 = *a3;
  if (v9 == v12)
    goto LABEL_3;
  v13 = 0;
  v14 = 1;
  while (v12 != 255)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == 254;
    if (v15)
      v13 = a3;
    v16 = (v11 + v14++);
    LODWORD(v11) = v16 & v10;
    a3 = (unsigned __int8 *)(*(_QWORD *)a1 + (v16 & v10));
    v12 = *a3;
    if (v9 == v12)
      goto LABEL_3;
  }
LABEL_21:
  if (v13)
    a3 = v13;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != 255)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C629CA5C(_QWORD *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  _QWORD *v5;
  size_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  _BYTE *v12;
  int v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  result[1] = 0;
  v6 = *((unsigned int *)result + 4);
  if ((_DWORD)v6)
    result = memset((void *)*result, 255, v6);
  for (; a2 != a3; ++a2)
  {
    v7 = *a2;
    if (v7 <= 0xFD)
    {
      v8 = (*((_DWORD *)v5 + 4) - 1);
      v9 = v8 & (37 * v7);
      v10 = (_BYTE *)(*v5 + v9);
      v11 = *v10;
      if (v7 != v11)
      {
        v12 = 0;
        v13 = 1;
        while (v11 != 255)
        {
          if (v12)
            v14 = 0;
          else
            v14 = v11 == 254;
          if (v14)
            v12 = v10;
          v15 = (v9 + v13++);
          LODWORD(v9) = v15 & v8;
          v10 = (_BYTE *)(*v5 + (v15 & v8));
          v11 = *v10;
          if (v7 == v11)
            goto LABEL_6;
        }
        if (v12)
          v10 = v12;
      }
LABEL_6:
      *v10 = v7;
      ++*((_DWORD *)v5 + 2);
    }
  }
  return result;
}

uint64_t sub_1C629CB44(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C4DA97DC((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C5667894(a2, (uint64_t)a3, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_QWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

void sub_1C629CBDC(uint64_t a1)
{
  int v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 || *(_DWORD *)(a1 + 12))
  {
    v3 = *(_DWORD *)(a1 + 16);
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_1C5742C64(a1);
      return;
    }
    if (!v3)
    {
LABEL_16:
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
    v4 = *(_QWORD **)a1;
    v5 = *(_QWORD *)a1 + 24 * v3;
    while (1)
    {
      if (*v4 == -8192)
        goto LABEL_14;
      if (*v4 != -4096)
        break;
LABEL_15:
      v4 += 3;
      if (v4 == (_QWORD *)v5)
        goto LABEL_16;
    }
    v6 = (std::__shared_weak_count *)v4[2];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
LABEL_14:
    *v4 = -4096;
    goto LABEL_15;
  }
}

void sub_1C629CCBC(uint64_t a1)
{
  unsigned int v1;
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD **)a1;
    v3 = *(_QWORD *)a1 + 24 * v1;
    do
    {
      if ((*v2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = (std::__shared_weak_count *)v2[2];
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
      }
      v2 += 3;
    }
    while (v2 != (_QWORD *)v3);
  }
}

void sub_1C629CD4C(uint64_t a1)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 <= 1u && !*(_DWORD *)(a1 + 4))
    return;
  if ((v2 & 1) != 0)
  {
    v5 = (_QWORD *)(a1 + 8);
    v6 = (_QWORD *)(a1 + 296);
    while (1)
    {
LABEL_9:
      if (*v5 == -8192)
        goto LABEL_13;
      if (*v5 != -4096)
        break;
LABEL_14:
      v5 += 9;
      if (v5 == v6)
      {
        v4 = *(_DWORD *)a1 & 1;
        goto LABEL_16;
      }
    }
    v7 = (void *)v5[2];
    if (v7 != (void *)v5[1])
      free(v7);
LABEL_13:
    *v5 = -4096;
    goto LABEL_14;
  }
  v3 = (2 * v2) & 0xFFFFFFFC;
  v4 = *(_DWORD *)(a1 + 16);
  if (v3 < v4 && v4 >= 0x41)
  {
    sub_1C629D010(a1);
  }
  else
  {
    if (v4)
    {
      v5 = *(_QWORD **)(a1 + 8);
      v6 = &v5[9 * v4];
      goto LABEL_9;
    }
LABEL_16:
    *(_DWORD *)a1 = v4;
    *(_DWORD *)(a1 + 4) = 0;
  }
}

int *sub_1C629CE18(int *a1)
{
  int v2;
  int *v3;
  unsigned int v4;
  int *result;
  unsigned int v6;
  int *v7;

  v2 = *a1;
  if (*a1 > 1)
  {
    if ((v2 & 1) != 0)
    {
      result = a1 + 2;
      v7 = a1 + 74;
LABEL_10:
      while ((*(_QWORD *)result | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        result += 18;
        if (result == v7)
          return v7;
      }
    }
    else
    {
      result = (int *)*((_QWORD *)a1 + 1);
      v6 = a1[4];
      if (v6)
      {
        v7 = &result[18 * v6];
        goto LABEL_10;
      }
    }
  }
  else
  {
    if (v2)
    {
      v3 = a1 + 2;
      v4 = 4;
    }
    else
    {
      v3 = (int *)*((_QWORD *)a1 + 1);
      v4 = a1[4];
    }
    return &v3[18 * v4];
  }
  return result;
}

_QWORD *sub_1C629CE98(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  _QWORD *result;

  v3 = sub_1C57456C4(a1, a2);
  result = (_QWORD *)(*(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 8));
  *result = result + 2;
  result[1] = 0x400000000;
  if (*(_DWORD *)(v3 + 8))
    result = (_QWORD *)llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)result, v3);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C629CEFC(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t i;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)(result + 8) = a2[1];
  v2 = *(unsigned int *)(result + 16);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      *(_QWORD *)(*(_QWORD *)result + 24 * i) = *(_QWORD *)(*a2 + 24 * i);
      v4 = (_QWORD *)(*(_QWORD *)result + 24 * i);
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v5 = *a2 + 24 * i;
        v7 = *(_QWORD *)(v5 + 8);
        v6 = *(_QWORD *)(v5 + 16);
        v4[1] = v7;
        v4[2] = v6;
        if (v6)
        {
          v8 = (unint64_t *)(v6 + 8);
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 1, v8));
          v2 = *(unsigned int *)(result + 16);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C629CF84(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  _QWORD *result;
  int v5;
  _QWORD *v6;

  if (a2 <= 4)
  {
    *a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    v3 = a2;
    result = operator new(72 * a2, (std::align_val_t)8uLL);
    a1[1] = result;
    a1[2] = v3;
    v5 = *(_DWORD *)a1;
    *a1 = *(_DWORD *)a1 & 1;
    if ((v5 & 1) == 0)
    {
      v6 = &result[9 * v3];
      goto LABEL_6;
    }
  }
  result = a1 + 1;
  v6 = a1 + 37;
  do
  {
LABEL_6:
    *result = -4096;
    result += 9;
  }
  while (result != v6);
  return result;
}

void sub_1C629D010(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(_DWORD *)a1;
  sub_1C629D0E0(a1);
  v3 = __clz((v2 >> 1) - 1);
  if (v3 - 28 >= 3)
    v4 = 1 << (33 - v3);
  else
    v4 = 64;
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((*(_DWORD *)a1 & 1) != 0 && v5 < 5)
  {
    v6 = (_QWORD *)(a1 + 296);
    *(_QWORD *)a1 = 1;
    v7 = (_QWORD *)(a1 + 8);
    goto LABEL_10;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
LABEL_17:
    sub_1C629CF84((_QWORD *)a1, v5);
    return;
  }
  if (v5 != *(_DWORD *)(a1 + 16))
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
    goto LABEL_17;
  }
  *(_QWORD *)a1 = 0;
  if (!v5)
    return;
  v7 = *(_QWORD **)(a1 + 8);
  v6 = &v7[9 * v5];
  do
  {
LABEL_10:
    *v7 = -4096;
    v7 += 9;
  }
  while (v7 != v6);
}

void sub_1C629D0E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;

  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v2 = a1 + 8;
    v1 = 4;
  }
  else
  {
    v1 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v1)
      return;
    v2 = *(_QWORD *)(a1 + 8);
  }
  v3 = 72 * v1;
  v4 = (void **)(v2 + 16);
  do
  {
    if (((unint64_t)*(v4 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v4 != *(v4 - 1))
      free(*v4);
    v4 += 9;
    v3 -= 72;
  }
  while (v3);
}

_QWORD *sub_1C629D158(_DWORD *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C61F96EC((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C629D1D0(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 5;
    v5[2] = v5 + 5;
    v5[3] = 4;
    *((_DWORD *)v5 + 8) = 0;
  }
  return v5;
}

_QWORD *sub_1C629D1D0(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 4;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C57454A8((uint64_t)a1, v6);
  v8 = 0;
  sub_1C61F96EC((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

void sub_1C629D28C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  void *v13;
  uint64_t *v14;

  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 296);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (!v7)
      goto LABEL_11;
    v8 = *(_QWORD **)(a1 + 8);
    v9 = &v8[9 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 9;
  }
  while (v8 != v9);
LABEL_11:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v14 = 0;
      sub_1C61F96EC(a1, v10, &v14);
      v11 = v14;
      v12 = v14 + 5;
      *v14 = *a2;
      llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(v11 + 1), v12, 4, a2 + 1);
      *(_DWORD *)a1 += 2;
      v13 = (void *)a2[2];
      if (v13 != (void *)a2[1])
        free(v13);
    }
    a2 += 9;
  }
}

void sub_1C629D370(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 48, &v5);
  sub_1C618F6EC(a1, v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

uint64_t sub_1C629D3DC(uint64_t a1)
{
  sub_1C629D0E0(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  return a1;
}

_QWORD *sub_1C629D414(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C629D47C(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C629D47C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5745F40(a1, v6);
  v8 = 0;
  sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_1C629D52C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  *(_QWORD *)(a1 + 8) = 0;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD **)a1;
    v7 = 16 * v5;
    do
    {
      *v6 = -4096;
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    v8 = a2 + 1;
    do
    {
      v9 = *(v8 - 1);
      if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v14 = 0;
        sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v14);
        v11 = v14;
        *v14 = *(v8 - 1);
        v12 = *v8;
        *v8 = 0;
        v11[1] = v12;
        ++*(_DWORD *)(a1 + 8);
        v13 = *v8;
        *v8 = 0;
        if (v13)
          sub_1C4EF268C((uint64_t)v8, v13);
      }
      v10 = v8 + 1;
      v8 += 2;
    }
    while (v10 != a3);
  }
}

void sub_1C629D600(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  if (a2)
  {
    v2 = 16 * a2;
    v3 = (uint64_t *)(a1 + 8);
    do
    {
      if ((*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = *v3;
        *v3 = 0;
        if (v4)
          sub_1C4EF268C((uint64_t)v3, v4);
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
}

void sub_1C629D65C(_WORD *a1, __n128 *a2, _WORD *a3, char **a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80D2C8, 0, 0);
  byte_1ED80D348 = 0;
  qword_1ED80D350 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED80D358 = 0;
  qword_1ED80D2C8 = (uint64_t)&unk_1E819E898;
  qword_1ED80D360 = (uint64_t)&off_1E819E9A0;
  qword_1ED80D368 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED80D380 = (uint64_t)&qword_1ED80D368;
  sub_1C629D710(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80D2C8);
}

__n128 sub_1C629D710(_WORD *a1, __n128 *a2, _WORD *a3, char **a4)
{
  __n128 result;
  char *v9;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80D2C8, "openmp-opt-disable", 0x12uLL);
  word_1ED80D2D2 = word_1ED80D2D2 & 0xFFF8 | *a1 & 7;
  result = *a2;
  xmmword_1ED80D2E8 = (__int128)*a2;
  word_1ED80D2D2 = (32 * (*a3 & 3)) | word_1ED80D2D2 & 0xFF9F;
  v9 = *a4;
  byte_1ED80D348 = **a4;
  byte_1ED80D359 = 1;
  byte_1ED80D358 = *v9;
  return result;
}

void sub_1C629D7AC(_WORD *a1, __n128 *a2, _WORD *a3, char **a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80D388, 0, 0);
  byte_1ED80D408 = 0;
  qword_1ED80D410 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED80D418 = 0;
  qword_1ED80D388 = (uint64_t)&unk_1E819E898;
  qword_1ED80D420 = (uint64_t)&off_1E819E9A0;
  qword_1ED80D428 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED80D440 = (uint64_t)&qword_1ED80D428;
  sub_1C629D860(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80D388);
}

__n128 sub_1C629D860(_WORD *a1, __n128 *a2, _WORD *a3, char **a4)
{
  __n128 result;
  char *v9;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80D388, "openmp-opt-enable-merging", 0x19uLL);
  word_1ED80D392 = word_1ED80D392 & 0xFFF8 | *a1 & 7;
  result = *a2;
  xmmword_1ED80D3A8 = (__int128)*a2;
  word_1ED80D392 = (32 * (*a3 & 3)) | word_1ED80D392 & 0xFF9F;
  v9 = *a4;
  byte_1ED80D408 = **a4;
  byte_1ED80D419 = 1;
  byte_1ED80D418 = *v9;
  return result;
}

llvm::cl::Option *sub_1C629D8FC(llvm::cl::Option *a1, char *a2, _WORD *a3, __n128 *a4, _WORD *a5, _BYTE **a6)
{
  uint64_t v12;

  v12 = sub_1C47AD050((uint64_t)a1, 0, 0);
  *(_BYTE *)(v12 + 128) = 0;
  *(_QWORD *)(v12 + 136) = &off_1E7F9E8D8;
  *(_QWORD *)(v12 + 144) = 0;
  *(_QWORD *)v12 = &unk_1E819E898;
  *(_QWORD *)(v12 + 152) = &off_1E819E9A0;
  *(_QWORD *)(v12 + 160) = &off_1E7F9E8F8;
  *(_QWORD *)(v12 + 184) = v12 + 160;
  sub_1C629D9B8(v12, a2, a3, a4, a5, a6);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 sub_1C629D9B8(uint64_t a1, char *__s, _WORD *a3, __n128 *a4, _WORD *a5, _BYTE **a6)
{
  size_t v12;
  __int16 v13;
  __n128 result;
  _BYTE *v15;

  v12 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)__s, v12);
  v13 = *(_WORD *)(a1 + 10) & 0xFFF8 | *a3 & 7;
  *(_WORD *)(a1 + 10) = v13;
  result = *a4;
  *(__n128 *)(a1 + 32) = *a4;
  *(_WORD *)(a1 + 10) = (32 * (*a5 & 3)) | v13 & 0xFF9F;
  v15 = *a6;
  *(_BYTE *)(a1 + 128) = **a6;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v15;
  return result;
}

void sub_1C629DA58(_WORD *a1, __n128 *a2, _WORD *a3, char **a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80D988, 0, 0);
  byte_1ED80DA08 = 0;
  qword_1ED80DA10 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED80DA18 = 0;
  qword_1ED80D988 = (uint64_t)&unk_1E819E898;
  qword_1ED80DA20 = (uint64_t)&off_1E819E9A0;
  qword_1ED80DA28 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED80DA40 = (uint64_t)&qword_1ED80DA28;
  sub_1C629DB0C(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80D988);
}

__n128 sub_1C629DB0C(_WORD *a1, __n128 *a2, _WORD *a3, char **a4)
{
  __n128 result;
  char *v9;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80D988, "openmp-opt-disable-state-machine-rewrite", 0x28uLL);
  word_1ED80D992 = word_1ED80D992 & 0xFFF8 | *a1 & 7;
  result = *a2;
  xmmword_1ED80D9A8 = (__int128)*a2;
  word_1ED80D992 = (32 * (*a3 & 3)) | word_1ED80D992 & 0xFF9F;
  v9 = *a4;
  byte_1ED80DA08 = **a4;
  byte_1ED80DA19 = 1;
  byte_1ED80DA18 = *v9;
  return result;
}

void sub_1C629DBA8(_WORD *a1, __n128 *a2, _WORD *a3, char **a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80DA48, 0, 0);
  byte_1ED80DAC8 = 0;
  qword_1ED80DAD0 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED80DAD8 = 0;
  qword_1ED80DA48 = (uint64_t)&unk_1E819E898;
  qword_1ED80DAE0 = (uint64_t)&off_1E819E9A0;
  qword_1ED80DAE8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED80DB00 = (uint64_t)&qword_1ED80DAE8;
  sub_1C629DC5C(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80DA48);
}

__n128 sub_1C629DC5C(_WORD *a1, __n128 *a2, _WORD *a3, char **a4)
{
  __n128 result;
  char *v9;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80DA48, "openmp-opt-disable-barrier-elimination", 0x26uLL);
  word_1ED80DA52 = word_1ED80DA52 & 0xFFF8 | *a1 & 7;
  result = *a2;
  xmmword_1ED80DA68 = (__int128)*a2;
  word_1ED80DA52 = (32 * (*a3 & 3)) | word_1ED80DA52 & 0xFF9F;
  v9 = *a4;
  byte_1ED80DAC8 = **a4;
  byte_1ED80DAD9 = 1;
  byte_1ED80DAD8 = *v9;
  return result;
}

void sub_1C629DCF8(_WORD *a1, __n128 *a2, _WORD *a3, char **a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80DB08, 0, 0);
  byte_1ED80DB88 = 0;
  qword_1ED80DB90 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED80DB98 = 0;
  qword_1ED80DB08 = (uint64_t)&unk_1E819E898;
  qword_1ED80DBA0 = (uint64_t)&off_1E819E9A0;
  qword_1ED80DBA8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED80DBC0 = (uint64_t)&qword_1ED80DBA8;
  sub_1C629DDAC(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80DB08);
}

__n128 sub_1C629DDAC(_WORD *a1, __n128 *a2, _WORD *a3, char **a4)
{
  __n128 result;
  char *v9;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80DB08, "openmp-opt-print-module-after", 0x1DuLL);
  word_1ED80DB12 = word_1ED80DB12 & 0xFFF8 | *a1 & 7;
  result = *a2;
  xmmword_1ED80DB28 = (__int128)*a2;
  word_1ED80DB12 = (32 * (*a3 & 3)) | word_1ED80DB12 & 0xFF9F;
  v9 = *a4;
  byte_1ED80DB88 = **a4;
  byte_1ED80DB99 = 1;
  byte_1ED80DB98 = *v9;
  return result;
}

void sub_1C629DE48(_WORD *a1, __n128 *a2, _WORD *a3, char **a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80DC88, 0, 0);
  byte_1ED80DD08 = 0;
  qword_1ED80DD10 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED80DD18 = 0;
  qword_1ED80DC88 = (uint64_t)&unk_1E819E898;
  qword_1ED80DD20 = (uint64_t)&off_1E819E9A0;
  qword_1ED80DD28 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED80DD40 = (uint64_t)&qword_1ED80DD28;
  sub_1C629DEFC(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80DC88);
}

__n128 sub_1C629DEFC(_WORD *a1, __n128 *a2, _WORD *a3, char **a4)
{
  __n128 result;
  char *v9;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80DC88, "openmp-opt-inline-device", 0x18uLL);
  word_1ED80DC92 = word_1ED80DC92 & 0xFFF8 | *a1 & 7;
  result = *a2;
  xmmword_1ED80DCA8 = (__int128)*a2;
  word_1ED80DC92 = (32 * (*a3 & 3)) | word_1ED80DC92 & 0xFF9F;
  v9 = *a4;
  byte_1ED80DD08 = **a4;
  byte_1ED80DD19 = 1;
  byte_1ED80DD18 = *v9;
  return result;
}

void sub_1C629DF98(_WORD *a1, __n128 *a2, int **a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED80DEC8, 0, 0);
  dword_1ED80DF48 = 0;
  qword_1ED80DF50 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED80DF58 = 0;
  qword_1ED80DEC8 = (uint64_t)&unk_1E819E3B0;
  qword_1ED80DF60 = (uint64_t)&unk_1E819E2C0;
  qword_1ED80DF68 = (uint64_t)&off_1E7F95260;
  qword_1ED80DF80 = (uint64_t)&qword_1ED80DF68;
  sub_1C5745FF8(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80DEC8);
}

uint64_t llvm::createPartialInliningPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5746718(v1);
}

void llvm::PartialInlinerPass::run(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  uint64_t (*v8)(uint64_t *, uint64_t);
  uint64_t *v9;
  uint64_t (*v10)(uint64_t *, uint64_t);
  uint64_t *v11;
  uint64_t (*v12)(uint64_t *, uint64_t);
  uint64_t *v13;
  uint64_t (*v14)(uint64_t *, uint64_t);
  uint64_t *v15;
  uint64_t (*v16)(uint64_t *, uint64_t);
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a2, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, a1)+ 8);
  v23 = v22;
  v20 = v22;
  v21 = v22;
  v19 = v22;
  v7 = 0;
  v8 = sub_1C574EE94;
  v9 = &v23;
  v10 = sub_1C574EEBC;
  v11 = &v22;
  v12 = sub_1C574EEEC;
  v13 = &v20;
  v14 = sub_1C574EF3C;
  v15 = &v21;
  v16 = sub_1C574EF14;
  v17 = &v19;
  v18 = llvm::AnalysisManager<llvm::Module>::getResultImpl(a2, &llvm::ProfileSummaryAnalysis::Key, a1) + 8;
  sub_1C57467E0((uint64_t)&v7, a1);
  if (v6)
  {
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)(a3 + 88) = 0;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_DWORD *)(a3 + 64) = 2;
  }
  else
  {
    llvm::InstCountPass::run(a3);
  }
}

uint64_t sub_1C629E184(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C4E62854((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_BYTE *)v9 + 8) = *(_BYTE *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

_QWORD *sub_1C629E230(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4E62854(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C574EAAC(a1, a2, v7);
    *v5 = *a2;
    *((_BYTE *)v5 + 8) = 0;
  }
  return v5;
}

void sub_1C629E28C(char **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80E288, 0, 0);
  byte_1ED80E308 = 0;
  qword_1ED80E310 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED80E318 = 0;
  qword_1ED80E288 = (uint64_t)&unk_1E819E898;
  qword_1ED80E320 = (uint64_t)&off_1E819E9A0;
  qword_1ED80E328 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED80E340 = (uint64_t)&qword_1ED80E328;
  sub_1C629E340(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80E288);
}

__n128 sub_1C629E340(char **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  char *v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80E288, "skip-partial-inlining-cost-analysis", 0x23uLL);
  v8 = *a1;
  byte_1ED80E308 = **a1;
  byte_1ED80E319 = 1;
  byte_1ED80E318 = *v8;
  word_1ED80E292 = word_1ED80E292 & 0xFFF8 | *a2 & 7;
  word_1ED80E292 = (32 * (*a3 & 3)) | word_1ED80E292 & 0xFF9F;
  result = *a4;
  xmmword_1ED80E2A8 = (__int128)*a4;
  return result;
}

void sub_1C629E3DC(double **a1, _WORD *a2, __n128 *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED80E348, 0, 0);
  dword_1ED80E3C8 = 0;
  qword_1ED80E3D0 = (uint64_t)&unk_1E8139370;
  *(_QWORD *)&dword_1ED80E3D8 = 0;
  qword_1ED80E348 = (uint64_t)&unk_1E8139308;
  qword_1ED80E3E0 = (uint64_t)&unk_1E819E350;
  qword_1ED80E3E8 = (uint64_t)&unk_1E8139390;
  qword_1ED80E400 = (uint64_t)&qword_1ED80E3E8;
  sub_1C574ED8C(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80E348);
}

void sub_1C629E480(double **a1, _WORD *a2, __n128 *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED80E4C8, 0, 0);
  dword_1ED80E548 = 0;
  qword_1ED80E550 = (uint64_t)&unk_1E8139370;
  *(_QWORD *)&dword_1ED80E558 = 0;
  qword_1ED80E4C8 = (uint64_t)&unk_1E8139308;
  qword_1ED80E560 = (uint64_t)&unk_1E819E350;
  qword_1ED80E568 = (uint64_t)&unk_1E8139390;
  qword_1ED80E580 = (uint64_t)&qword_1ED80E568;
  sub_1C574EE10(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80E4C8);
}

void sub_1C629E524(int **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80E648, 0, 0);
  dword_1ED80E6C8 = 0;
  qword_1ED80E6D0 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED80E6D8 = 0;
  qword_1ED80E648 = (uint64_t)&unk_1E819E418;
  qword_1ED80E6E0 = (uint64_t)&unk_1E819E230;
  qword_1ED80E6E8 = (uint64_t)&off_1E7FA9D80;
  qword_1ED80E700 = (uint64_t)&qword_1ED80E6E8;
  sub_1C629E5D0(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80E648);
}

__n128 sub_1C629E5D0(int **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  int *v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80E648, "max-partial-inlining", 0x14uLL);
  v8 = *a1;
  dword_1ED80E6C8 = **a1;
  byte_1ED80E6DC = 1;
  dword_1ED80E6D8 = *v8;
  word_1ED80E652 = word_1ED80E652 & 0xFF9F | (32 * (*a2 & 3));
  word_1ED80E652 = word_1ED80E652 & 0xFFF8 | *a3 & 7;
  result = *a4;
  xmmword_1ED80E668 = (__int128)*a4;
  return result;
}

void sub_1C629E664(int **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80E708, 0, 0);
  dword_1ED80E788 = 0;
  qword_1ED80E790 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED80E798 = 0;
  qword_1ED80E708 = (uint64_t)&unk_1E819E418;
  qword_1ED80E7A0 = (uint64_t)&unk_1E819E230;
  qword_1ED80E7A8 = (uint64_t)&off_1E7FA9D80;
  qword_1ED80E7C0 = (uint64_t)&qword_1ED80E7A8;
  sub_1C629E710(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80E708);
}

__n128 sub_1C629E710(int **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  int *v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80E708, "outline-region-freq-percent", 0x1BuLL);
  v8 = *a1;
  dword_1ED80E788 = **a1;
  byte_1ED80E79C = 1;
  dword_1ED80E798 = *v8;
  word_1ED80E712 = word_1ED80E712 & 0xFF9F | (32 * (*a2 & 3));
  word_1ED80E712 = word_1ED80E712 & 0xFFF8 | *a3 & 7;
  result = *a4;
  xmmword_1ED80E728 = (__int128)*a4;
  return result;
}

uint64_t *llvm::PassManagerBuilder::addExtension(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *result;
  uint64_t v7;
  int v8;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)(a1 + 144);
  v8 = a2;
  v4 = v9;
  v5 = (_QWORD *)a3[3];
  if (v5)
  {
    if (v5 == a3)
    {
      v10 = v9;
      (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v9);
    }
    else
    {
      v10 = (_BYTE *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    v10 = 0;
  }
  result = sub_1C574F914(v3, (uint64_t)&v8);
  if (v10 == v9)
  {
    v7 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v7 = 5;
    v4 = v10;
  }
  return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v4 + 8 * v7))(v4);
}

void llvm::PassManagerBuilder::addExtensionsToPM(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::PassManagerBuilder *v17;
  llvm::legacy::PassManagerBase *v18;

  if (atomic_load(qword_1ED80E890))
  {
    if (!atomic_load(qword_1ED80E890))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED80E890, (void *(*)(void))sub_1C62A1120, (void (*)(void *))sub_1C62A115C);
    if (*(_DWORD *)(qword_1ED80E890[0] + 8))
    {
      if (!atomic_load(qword_1ED80E890))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED80E890, (void *(*)(void))sub_1C62A1120, (void (*)(void *))sub_1C62A115C);
      v9 = *(unsigned int *)(qword_1ED80E890[0] + 8);
      if ((_DWORD)v9)
      {
        v10 = 48 * v9;
        v11 = (_QWORD *)(*(_QWORD *)qword_1ED80E890[0] + 32);
        do
        {
          if (*((_DWORD *)v11 - 8) == a2)
          {
            if (!*v11)
            {
LABEL_20:
              sub_1C485C2F0();
              llvm::PassManagerBuilder::addInitialAliasAnalysisPasses(v17, v18);
              return;
            }
            (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v11 + 48))(*v11, a1, a3);
          }
          v11 += 6;
          v10 -= 48;
        }
        while (v10);
      }
    }
  }
  v12 = -858993459 * ((*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = 40 * v12;
    do
    {
      v15 = *(_QWORD *)(a1 + 144);
      if (*(_DWORD *)(v15 + v13) == a2)
      {
        v16 = *(_QWORD *)(v15 + v13 + 32);
        if (!v16)
          goto LABEL_20;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 48))(v16, a1, a3);
      }
      v13 += 40;
    }
    while (v14 != v13);
  }
}

uint64_t llvm::PassManagerBuilder::addInitialAliasAnalysisPasses(llvm::PassManagerBuilder *this, llvm::legacy::PassManagerBase *a2)
{
  llvm::CFLAndersAAWrapperPass *CFLAndersAAWrapperPass;
  llvm::CFLSteensAAWrapperPass *CFLSteensAAWrapperPass;
  llvm::TypeBasedAAWrapperPass *TypeBasedAAWrapperPass;
  llvm *v6;
  llvm::ScopedNoAliasAAWrapperPass *ScopedNoAliasAAWrapperPass;

  switch(dword_1ED80EE68)
  {
    case 3:
      CFLSteensAAWrapperPass = llvm::createCFLSteensAAWrapperPass(this);
      this = (llvm::PassManagerBuilder *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, llvm::CFLSteensAAWrapperPass *))(*(_QWORD *)a2 + 16))(a2, CFLSteensAAWrapperPass);
      goto LABEL_6;
    case 2:
LABEL_6:
      CFLAndersAAWrapperPass = llvm::createCFLAndersAAWrapperPass(this);
      goto LABEL_7;
    case 1:
      CFLAndersAAWrapperPass = llvm::createCFLSteensAAWrapperPass(this);
LABEL_7:
      this = (llvm::PassManagerBuilder *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, llvm::CFLAndersAAWrapperPass *))(*(_QWORD *)a2 + 16))(a2, CFLAndersAAWrapperPass);
      break;
  }
  TypeBasedAAWrapperPass = llvm::createTypeBasedAAWrapperPass(this);
  v6 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, llvm::TypeBasedAAWrapperPass *))(*(_QWORD *)a2 + 16))(a2, TypeBasedAAWrapperPass);
  ScopedNoAliasAAWrapperPass = llvm::createScopedNoAliasAAWrapperPass(v6);
  return (*(uint64_t (**)(llvm::legacy::PassManagerBase *, llvm::ScopedNoAliasAAWrapperPass *))(*(_QWORD *)a2 + 16))(a2, ScopedNoAliasAAWrapperPass);
}

void llvm::PassManagerBuilder::populateFunctionPassManager(const llvm::TargetLibraryInfoImpl **this, llvm::legacy::FunctionPassManager *a2)
{
  llvm *v4;
  llvm::TargetLibraryInfoWrapperPass *v5;
  uint64_t LowerMatrixIntrinsicsMinimalPass;
  llvm *v7;
  uint64_t LowerExpectIntrinsicPass;
  uint64_t CFGSimplificationPass;
  llvm *v10;
  uint64_t (**v11)(llvm *);
  uint64_t SROAPass;
  uint64_t EarlyCSEPass;
  _DWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  llvm *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  llvm::PassManagerBuilder::addExtensionsToPM((uint64_t)this, 0, (uint64_t)a2);
  if (this[1])
  {
    v5 = (llvm::TargetLibraryInfoWrapperPass *)operator new();
    llvm::TargetLibraryInfoWrapperPass::TargetLibraryInfoWrapperPass(v5, this[1]);
    v4 = (llvm *)(*(uint64_t (**)(llvm::legacy::FunctionPassManager *, llvm::TargetLibraryInfoWrapperPass *))(*(_QWORD *)a2 + 16))(a2, v5);
  }
  if (byte_1ED832B78)
  {
    if (*(_DWORD *)this)
      goto LABEL_7;
    LowerMatrixIntrinsicsMinimalPass = llvm::createLowerMatrixIntrinsicsMinimalPass(v4);
    v4 = (llvm *)(*(uint64_t (**)(llvm::legacy::FunctionPassManager *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LowerMatrixIntrinsicsMinimalPass);
  }
  if (!*(_DWORD *)this)
    return;
LABEL_7:
  v7 = (llvm *)llvm::PassManagerBuilder::addInitialAliasAnalysisPasses(v4, a2);
  LowerExpectIntrinsicPass = llvm::createLowerExpectIntrinsicPass(v7);
  (*(void (**)(llvm::legacy::FunctionPassManager *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LowerExpectIntrinsicPass);
  v14[0] = 1;
  v14[1] = 0x1000000;
  v15 = 16842752;
  v16 = 0;
  v18 = 0;
  CFGSimplificationPass = llvm::createCFGSimplificationPass((uint64_t)v14, v17);
  (*(void (**)(llvm::legacy::FunctionPassManager *, uint64_t))(*(_QWORD *)a2 + 16))(a2, CFGSimplificationPass);
  v10 = v18;
  if (v18 == (llvm *)v17)
  {
    v11 = (uint64_t (**)(llvm *))(v17[0] + 32);
    v10 = (llvm *)v17;
  }
  else
  {
    if (!v18)
      goto LABEL_10;
    v11 = (uint64_t (**)(llvm *))(*(_QWORD *)v18 + 40);
  }
  v10 = (llvm *)(*v11)(v10);
LABEL_10:
  SROAPass = llvm::createSROAPass(v10);
  (*(void (**)(llvm::legacy::FunctionPassManager *, uint64_t))(*(_QWORD *)a2 + 16))(a2, SROAPass);
  EarlyCSEPass = llvm::createEarlyCSEPass(0);
  (*(void (**)(llvm::legacy::FunctionPassManager *, uint64_t))(*(_QWORD *)a2 + 16))(a2, EarlyCSEPass);
}

void llvm::PassManagerBuilder::addFunctionSimplificationPasses(llvm::PassManagerBuilder *this, llvm::legacy::PassManagerBase *a2)
{
  uint64_t SROAPass;
  uint64_t EarlyCSEPass;
  llvm *v6;
  uint64_t AssumeSimplifyPass;
  uint64_t GVNHoistPass;
  uint64_t ConstraintEliminationPass;
  uint64_t HasBranchDivergencePass;
  uint64_t JumpThreadingPass;
  llvm *v12;
  uint64_t CorrelatedValuePropagationPass;
  uint64_t v14;
  llvm *v15;
  uint64_t (**v16)(llvm *);
  uint64_t AggressiveInstCombinerPass;
  llvm::InstructionCombiningPass *InstructionCombiningPass;
  llvm *v19;
  uint64_t LibCallsShrinkWrapPass;
  llvm *v21;
  uint64_t v22;
  uint64_t v23;
  llvm *v24;
  uint64_t (**v25)(llvm *);
  uint64_t ReassociatePass;
  llvm *v27;
  uint64_t VectorCombinePass;
  uint64_t LoopInstSimplifyPass;
  llvm *v30;
  uint64_t LoopSimplifyCFGPass;
  uint64_t LICMPass;
  uint64_t v33;
  uint64_t LoopRotatePass;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t SimpleLoopUnswitchLegacyPass;
  uint64_t GVNSinkPass;
  uint64_t CFGSimplificationPass;
  uint64_t (**v40)(llvm *);
  uint64_t v41;
  llvm *v42;
  uint64_t (**v43)(llvm *);
  llvm::InstructionCombiningPass *v44;
  llvm *v45;
  uint64_t LoopFlattenPass;
  llvm *v47;
  uint64_t v48;
  uint64_t LoopIdiomPass;
  llvm *v50;
  uint64_t IndVarSimplifyPass;
  llvm *v52;
  uint64_t LoopDeletionPass;
  llvm *v54;
  uint64_t LoopInterchangePass;
  uint64_t SimpleLoopUnrollPass;
  llvm *v57;
  uint64_t v58;
  llvm *v59;
  uint64_t MergedLoadStoreMotionPass;
  llvm *v61;
  uint64_t NewGVNPass;
  uint64_t SCCPPass;
  llvm *v64;
  uint64_t v65;
  uint64_t BitTrackingDCEPass;
  llvm *v67;
  llvm::InstructionCombiningPass *v68;
  llvm *v69;
  uint64_t DFAJumpThreadingPass;
  uint64_t v71;
  llvm *v72;
  uint64_t v73;
  uint64_t AggressiveDCEPass;
  llvm *v75;
  uint64_t MemCpyOptPass;
  llvm *v77;
  uint64_t DeadStoreEliminationPass;
  uint64_t v79;
  llvm *v80;
  uint64_t LoopRerollPass;
  uint64_t v82;
  llvm *v83;
  uint64_t (**v84)(llvm *);
  llvm::InstructionCombiningPass *v85;
  llvm *v86;
  uint64_t v87;
  uint64_t ControlHeightReductionLegacyPass;
  uint64_t v89;
  int v90;
  __int16 v91;
  char v92;
  int v93;
  char v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  _QWORD v113[3];
  llvm *v114;
  _QWORD v115[3];
  llvm *v116;
  _QWORD v117[3];
  llvm *v118;
  _QWORD v119[3];
  llvm *v120;
  _QWORD v121[3];
  llvm *v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  SROAPass = llvm::createSROAPass(this);
  (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, SROAPass);
  EarlyCSEPass = llvm::createEarlyCSEPass((llvm *)1);
  v6 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, EarlyCSEPass);
  if (byte_1ED837140)
  {
    AssumeSimplifyPass = llvm::createAssumeSimplifyPass(v6);
    v6 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, AssumeSimplifyPass);
  }
  if (*(_DWORD *)this >= 2u)
  {
    if (byte_1ED8327B8)
    {
      GVNHoistPass = llvm::createGVNHoistPass(v6);
      v6 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, GVNHoistPass);
    }
    if (byte_1ED832878)
    {
      GVNSinkPass = llvm::createGVNSinkPass(v6);
      (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, GVNSinkPass);
      v109 = 1;
      v110 = 0x101000001000100;
      v111 = 0;
      v112 = 0;
      v122 = 0;
      CFGSimplificationPass = llvm::createCFGSimplificationPass((uint64_t)&v109, v121);
      (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, CFGSimplificationPass);
      v6 = v122;
      if (v122 == (llvm *)v121)
      {
        v40 = (uint64_t (**)(llvm *))(v121[0] + 32);
        v6 = (llvm *)v121;
      }
      else
      {
        if (!v122)
          goto LABEL_7;
        v40 = (uint64_t (**)(llvm *))(*(_QWORD *)v122 + 40);
      }
      v6 = (llvm *)(*v40)(v6);
    }
  }
LABEL_7:
  if (byte_1ED832C38)
  {
    ConstraintEliminationPass = llvm::createConstraintEliminationPass(v6);
    v6 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, ConstraintEliminationPass);
  }
  if (*(_DWORD *)this >= 2u)
  {
    HasBranchDivergencePass = llvm::createSpeculativeExecutionIfHasBranchDivergencePass(v6);
    (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, HasBranchDivergencePass);
    JumpThreadingPass = llvm::createJumpThreadingPass(0, -1);
    v12 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, JumpThreadingPass);
    CorrelatedValuePropagationPass = llvm::createCorrelatedValuePropagationPass(v12);
    (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, CorrelatedValuePropagationPass);
  }
  v105 = 1;
  v106 = 0x101000001000100;
  v107 = 0;
  v108 = 0;
  v120 = 0;
  v14 = llvm::createCFGSimplificationPass((uint64_t)&v105, v119);
  (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v14);
  v15 = v120;
  if (v120 == (llvm *)v119)
  {
    v16 = (uint64_t (**)(llvm *))(v119[0] + 32);
    v15 = (llvm *)v119;
LABEL_13:
    v15 = (llvm *)(*v16)(v15);
    goto LABEL_14;
  }
  if (v120)
  {
    v16 = (uint64_t (**)(llvm *))(*(_QWORD *)v120 + 40);
    goto LABEL_13;
  }
LABEL_14:
  if (*(_DWORD *)this >= 3u)
  {
    AggressiveInstCombinerPass = llvm::createAggressiveInstCombinerPass(v15);
    v15 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, AggressiveInstCombinerPass);
  }
  InstructionCombiningPass = llvm::createInstructionCombiningPass(v15);
  v19 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, llvm::InstructionCombiningPass *))(*(_QWORD *)a2 + 16))(a2, InstructionCombiningPass);
  if (!*((_DWORD *)this + 1) && !byte_1ED80ECE8)
  {
    LibCallsShrinkWrapPass = llvm::createLibCallsShrinkWrapPass(v19);
    (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LibCallsShrinkWrapPass);
  }
  llvm::PassManagerBuilder::addExtensionsToPM((uint64_t)this, 7, (uint64_t)a2);
  if (*(_DWORD *)this >= 2u)
  {
    v22 = llvm::createTailCallEliminationPass(v21);
    (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v22);
  }
  v101 = 1;
  v102 = 0x101000001000100;
  v103 = 0;
  v104 = 0;
  v118 = 0;
  v23 = llvm::createCFGSimplificationPass((uint64_t)&v101, v117);
  (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v23);
  v24 = v118;
  if (v118 == (llvm *)v117)
  {
    v25 = (uint64_t (**)(llvm *))(v117[0] + 32);
    v24 = (llvm *)v117;
LABEL_23:
    v24 = (llvm *)(*v25)(v24);
    goto LABEL_24;
  }
  if (v118)
  {
    v25 = (uint64_t (**)(llvm *))(*(_QWORD *)v118 + 40);
    goto LABEL_23;
  }
LABEL_24:
  ReassociatePass = llvm::createReassociatePass(v24);
  v27 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, ReassociatePass);
  if (byte_1ED832B78)
  {
    VectorCombinePass = llvm::createVectorCombinePass(v27);
    v27 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, VectorCombinePass);
  }
  if (byte_1ED80EDA8)
  {
    LoopInstSimplifyPass = llvm::createLoopInstSimplifyPass(v27);
    v30 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LoopInstSimplifyPass);
    LoopSimplifyCFGPass = llvm::createLoopSimplifyCFGPass(v30);
    (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LoopSimplifyCFGPass);
  }
  LICMPass = llvm::createLICMPass((llvm *)*((unsigned int *)this + 15), *((_DWORD *)this + 16), 0);
  (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LICMPass);
  if (*((_DWORD *)this + 1) == 2)
    v33 = 0;
  else
    v33 = 0xFFFFFFFFLL;
  LoopRotatePass = llvm::createLoopRotatePass((llvm *)v33, *((_BYTE *)this + 53));
  (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LoopRotatePass);
  v35 = llvm::createLICMPass((llvm *)*((unsigned int *)this + 15), *((_DWORD *)this + 16), 1);
  (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v35);
  if (byte_1ED80EDA8)
  {
    SimpleLoopUnswitchLegacyPass = llvm::createSimpleLoopUnswitchLegacyPass(0);
  }
  else
  {
    if (*((_DWORD *)this + 1))
      v36 = 1;
    else
      v36 = *(_DWORD *)this < 3u;
    SimpleLoopUnswitchLegacyPass = llvm::createLoopUnswitchPass((llvm *)v36, *((_BYTE *)this + 56));
  }
  (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, SimpleLoopUnswitchLegacyPass);
  v97 = 1;
  v98 = 0x101000001000100;
  v99 = 0;
  v100 = 0;
  v116 = 0;
  v41 = llvm::createCFGSimplificationPass((uint64_t)&v97, v115);
  (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v41);
  v42 = v116;
  if (v116 == (llvm *)v115)
  {
    v43 = (uint64_t (**)(llvm *))(v115[0] + 32);
    v42 = (llvm *)v115;
LABEL_46:
    v42 = (llvm *)(*v43)(v42);
    goto LABEL_47;
  }
  if (v116)
  {
    v43 = (uint64_t (**)(llvm *))(*(_QWORD *)v116 + 40);
    goto LABEL_46;
  }
LABEL_47:
  v44 = llvm::createInstructionCombiningPass(v42);
  v45 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, llvm::InstructionCombiningPass *))(*(_QWORD *)a2 + 16))(a2, v44);
  if (byte_1ED832338)
  {
    LoopFlattenPass = llvm::createLoopFlattenPass(v45);
    v47 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LoopFlattenPass);
    v48 = llvm::createLoopSimplifyCFGPass(v47);
    v45 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v48);
  }
  LoopIdiomPass = llvm::createLoopIdiomPass(v45);
  v50 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LoopIdiomPass);
  IndVarSimplifyPass = llvm::createIndVarSimplifyPass(v50);
  (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, IndVarSimplifyPass);
  llvm::PassManagerBuilder::addExtensionsToPM((uint64_t)this, 8, (uint64_t)a2);
  LoopDeletionPass = llvm::createLoopDeletionPass(v52);
  v54 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LoopDeletionPass);
  if (byte_1ED8321B8)
  {
    LoopInterchangePass = llvm::createLoopInterchangePass(v54);
    (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LoopInterchangePass);
  }
  SimpleLoopUnrollPass = llvm::createSimpleLoopUnrollPass((llvm *)*(unsigned int *)this, *((_BYTE *)this + 40), *((_BYTE *)this + 48));
  (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, SimpleLoopUnrollPass);
  llvm::PassManagerBuilder::addExtensionsToPM((uint64_t)this, 2, (uint64_t)a2);
  v58 = llvm::createSROAPass(v57);
  v59 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v58);
  if (*(_DWORD *)this >= 2u)
  {
    MergedLoadStoreMotionPass = llvm::createMergedLoadStoreMotionPass(0);
    v61 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, MergedLoadStoreMotionPass);
    if (*((_BYTE *)this + 46))
      NewGVNPass = llvm::createNewGVNPass(v61);
    else
      NewGVNPass = llvm::createGVNPass((llvm *)*((unsigned __int8 *)this + 47), 0);
    v59 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, NewGVNPass);
  }
  SCCPPass = llvm::createSCCPPass(v59);
  v64 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, SCCPPass);
  if (byte_1ED832C38)
  {
    v65 = llvm::createConstraintEliminationPass(v64);
    v64 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v65);
  }
  BitTrackingDCEPass = llvm::createBitTrackingDCEPass(v64);
  v67 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, BitTrackingDCEPass);
  v68 = llvm::createInstructionCombiningPass(v67);
  (*(void (**)(llvm::legacy::PassManagerBase *, llvm::InstructionCombiningPass *))(*(_QWORD *)a2 + 16))(a2, v68);
  llvm::PassManagerBuilder::addExtensionsToPM((uint64_t)this, 7, (uint64_t)a2);
  if (*(_DWORD *)this >= 2u)
  {
    if (byte_1ED8323F8 && !*((_DWORD *)this + 1))
    {
      DFAJumpThreadingPass = llvm::createDFAJumpThreadingPass(v69);
      (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, DFAJumpThreadingPass);
    }
    v71 = llvm::createJumpThreadingPass(0, -1);
    v72 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v71);
    v73 = llvm::createCorrelatedValuePropagationPass(v72);
    v69 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v73);
  }
  AggressiveDCEPass = llvm::createAggressiveDCEPass(v69);
  v75 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, AggressiveDCEPass);
  MemCpyOptPass = llvm::createMemCpyOptPass(v75);
  v77 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, MemCpyOptPass);
  if (*(_DWORD *)this >= 2u)
  {
    DeadStoreEliminationPass = llvm::createDeadStoreEliminationPass(v77);
    (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, DeadStoreEliminationPass);
    v79 = llvm::createLICMPass((llvm *)*((unsigned int *)this + 15), *((_DWORD *)this + 16), 1);
    (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v79);
  }
  llvm::PassManagerBuilder::addExtensionsToPM((uint64_t)this, 3, (uint64_t)a2);
  if (*((_BYTE *)this + 45))
  {
    LoopRerollPass = llvm::createLoopRerollPass(v80);
    (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LoopRerollPass);
  }
  v90 = 1;
  v91 = 0;
  v92 = 0;
  v93 = 16843009;
  v94 = 1;
  v95 = 0;
  v96 = 0;
  v114 = 0;
  v82 = llvm::createCFGSimplificationPass((uint64_t)&v90, v113);
  (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v82);
  v83 = v114;
  if (v114 == (llvm *)v113)
  {
    v84 = (uint64_t (**)(llvm *))(v113[0] + 32);
    v83 = (llvm *)v113;
LABEL_71:
    v83 = (llvm *)(*v84)(v83);
    goto LABEL_72;
  }
  if (v114)
  {
    v84 = (uint64_t (**)(llvm *))(*(_QWORD *)v114 + 40);
    goto LABEL_71;
  }
LABEL_72:
  v85 = llvm::createInstructionCombiningPass(v83);
  (*(void (**)(llvm::legacy::PassManagerBase *, llvm::InstructionCombiningPass *))(*(_QWORD *)a2 + 16))(a2, v85);
  llvm::PassManagerBuilder::addExtensionsToPM((uint64_t)this, 7, (uint64_t)a2);
  if (byte_1ED832938 && *(_DWORD *)this >= 3u)
  {
    v87 = *((char *)this + 119) < 0 ? *((_QWORD *)this + 13) : *((unsigned __int8 *)this + 119);
    if (v87
      || (*((char *)this + 143) < 0 ? (v89 = *((_QWORD *)this + 16)) : (v89 = *((unsigned __int8 *)this + 143)),
          v89 || *((_BYTE *)this + 69)))
    {
      ControlHeightReductionLegacyPass = llvm::createControlHeightReductionLegacyPass(v86);
      (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, ControlHeightReductionLegacyPass);
    }
  }
}

uint64_t llvm::PassManagerBuilder::addVectorPasses(llvm::PassManagerBuilder *this, llvm::legacy::PassManagerBase *a2, int a3)
{
  uint64_t LoopVectorizePass;
  llvm *v7;
  uint64_t LoopUnrollAndJamPass;
  uint64_t LoopUnrollPass;
  llvm *v10;
  uint64_t WarnMissedTransformationsPass;
  llvm *v12;
  llvm::InstructionCombiningPass *InstructionCombiningPass;
  uint64_t EarlyCSEPass;
  llvm *v15;
  uint64_t CorrelatedValuePropagationPass;
  llvm *v17;
  llvm::InstructionCombiningPass *v18;
  uint64_t LICMPass;
  _BOOL8 v20;
  uint64_t LoopUnswitchPass;
  uint64_t CFGSimplificationPass;
  llvm *v23;
  uint64_t (**v24)(llvm *);
  llvm::InstructionCombiningPass *v25;
  uint64_t v26;
  llvm *v27;
  uint64_t (**v28)(llvm *);
  uint64_t SCCPPass;
  llvm *v30;
  llvm::InstructionCombiningPass *v31;
  llvm *v32;
  uint64_t BitTrackingDCEPass;
  uint64_t SLPVectorizerPass;
  uint64_t v35;
  uint64_t VectorCombinePass;
  llvm *v37;
  uint64_t AlignmentFromAssumptionsPass;
  llvm *v39;
  llvm::InstructionCombiningPass *v40;
  llvm *v41;
  llvm::InstructionCombiningPass *v42;
  uint64_t v43;
  uint64_t v44;
  llvm *v45;
  uint64_t v46;
  llvm *v47;
  llvm::InstructionCombiningPass *v49;
  uint64_t v50;
  int v51;
  _DWORD v52[2];
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  _QWORD v59[3];
  llvm *v60;
  _QWORD v61[3];
  llvm *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  LoopVectorizePass = llvm::createLoopVectorizePass((llvm *)(*((_BYTE *)this + 44) == 0), *((_BYTE *)this + 43) == 0);
  v7 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LoopVectorizePass);
  if (a3)
  {
    if (byte_1ED832278 && !*((_BYTE *)this + 40))
    {
      LoopUnrollAndJamPass = llvm::createLoopUnrollAndJamPass((llvm *)*(unsigned int *)this);
      (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LoopUnrollAndJamPass);
    }
    LoopUnrollPass = llvm::createLoopUnrollPass((llvm *)*(unsigned int *)this, *((_BYTE *)this + 40), *((_BYTE *)this + 48), -1, -1, -1, -1, -1, -1, v51);
    v10 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LoopUnrollPass);
    WarnMissedTransformationsPass = llvm::createWarnMissedTransformationsPass(v10);
  }
  else
  {
    WarnMissedTransformationsPass = llvm::createLoopLoadEliminationPass(v7);
  }
  v12 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, WarnMissedTransformationsPass);
  InstructionCombiningPass = llvm::createInstructionCombiningPass(v12);
  (*(void (**)(llvm::legacy::PassManagerBase *, llvm::InstructionCombiningPass *))(*(_QWORD *)a2 + 16))(a2, InstructionCombiningPass);
  if (*(_DWORD *)this >= 2u && byte_1ED832038)
  {
    EarlyCSEPass = llvm::createEarlyCSEPass(0);
    v15 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, EarlyCSEPass);
    CorrelatedValuePropagationPass = llvm::createCorrelatedValuePropagationPass(v15);
    v17 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, CorrelatedValuePropagationPass);
    v18 = llvm::createInstructionCombiningPass(v17);
    (*(void (**)(llvm::legacy::PassManagerBase *, llvm::InstructionCombiningPass *))(*(_QWORD *)a2 + 16))(a2, v18);
    LICMPass = llvm::createLICMPass((llvm *)*((unsigned int *)this + 15), *((_DWORD *)this + 16), 1);
    (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LICMPass);
    v20 = 1;
    if (!*((_DWORD *)this + 1))
      v20 = *(_DWORD *)this < 3u;
    LoopUnswitchPass = llvm::createLoopUnswitchPass((llvm *)v20, *((_BYTE *)this + 56));
    (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LoopUnswitchPass);
    v55 = 1;
    v56 = 0x101000001000100;
    v57 = 0;
    v58 = 0;
    v62 = 0;
    CFGSimplificationPass = llvm::createCFGSimplificationPass((uint64_t)&v55, v61);
    (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, CFGSimplificationPass);
    v23 = v62;
    if (v62 == (llvm *)v61)
    {
      v24 = (uint64_t (**)(llvm *))(v61[0] + 32);
      v23 = (llvm *)v61;
    }
    else
    {
      if (!v62)
        goto LABEL_14;
      v24 = (uint64_t (**)(llvm *))(*(_QWORD *)v62 + 40);
    }
    v23 = (llvm *)(*v24)(v23);
LABEL_14:
    v25 = llvm::createInstructionCombiningPass(v23);
    (*(void (**)(llvm::legacy::PassManagerBase *, llvm::InstructionCombiningPass *))(*(_QWORD *)a2 + 16))(a2, v25);
  }
  v52[0] = 1;
  v52[1] = 65793;
  v53 = 16843009;
  v54 = 0;
  v60 = 0;
  v26 = llvm::createCFGSimplificationPass((uint64_t)v52, v59);
  (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v26);
  v27 = v60;
  if (v60 == (llvm *)v59)
  {
    v28 = (uint64_t (**)(llvm *))(v59[0] + 32);
    v27 = (llvm *)v59;
LABEL_17:
    v27 = (llvm *)(*v28)(v27);
    goto LABEL_18;
  }
  if (v60)
  {
    v28 = (uint64_t (**)(llvm *))(*(_QWORD *)v60 + 40);
    goto LABEL_17;
  }
LABEL_18:
  if (a3)
  {
    SCCPPass = llvm::createSCCPPass(v27);
    v30 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, SCCPPass);
    v31 = llvm::createInstructionCombiningPass(v30);
    v32 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, llvm::InstructionCombiningPass *))(*(_QWORD *)a2 + 16))(a2, v31);
    BitTrackingDCEPass = llvm::createBitTrackingDCEPass(v32);
    v27 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, BitTrackingDCEPass);
  }
  if (*((_BYTE *)this + 42))
  {
    SLPVectorizerPass = llvm::createSLPVectorizerPass(v27);
    v27 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, SLPVectorizerPass);
    if (*(_DWORD *)this >= 2u)
    {
      if (byte_1ED832038)
      {
        v35 = llvm::createEarlyCSEPass(0);
        v27 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v35);
      }
    }
  }
  VectorCombinePass = llvm::createVectorCombinePass(v27);
  v37 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, VectorCombinePass);
  if ((a3 & 1) != 0)
  {
    AlignmentFromAssumptionsPass = llvm::createAlignmentFromAssumptionsPass(v37);
    v39 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, AlignmentFromAssumptionsPass);
    v40 = llvm::createInstructionCombiningPass(v39);
  }
  else
  {
    llvm::PassManagerBuilder::addExtensionsToPM((uint64_t)this, 7, (uint64_t)a2);
    v42 = llvm::createInstructionCombiningPass(v41);
    (*(void (**)(llvm::legacy::PassManagerBase *, llvm::InstructionCombiningPass *))(*(_QWORD *)a2 + 16))(a2, v42);
    if (byte_1ED832278 && !*((_BYTE *)this + 40))
    {
      v43 = llvm::createLoopUnrollAndJamPass((llvm *)*(unsigned int *)this);
      (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v43);
    }
    v44 = llvm::createLoopUnrollPass((llvm *)*(unsigned int *)this, *((_BYTE *)this + 40), *((_BYTE *)this + 48), -1, -1, -1, -1, -1, -1, v51);
    v45 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v44);
    if (!*((_BYTE *)this + 40))
    {
      v49 = llvm::createInstructionCombiningPass(v45);
      (*(void (**)(llvm::legacy::PassManagerBase *, llvm::InstructionCombiningPass *))(*(_QWORD *)a2 + 16))(a2, v49);
      v50 = llvm::createLICMPass((llvm *)*((unsigned int *)this + 15), *((_DWORD *)this + 16), 1);
      v45 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v50);
    }
    v46 = llvm::createWarnMissedTransformationsPass(v45);
    v47 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v46);
    v40 = (llvm::InstructionCombiningPass *)llvm::createAlignmentFromAssumptionsPass(v47);
  }
  return (*(uint64_t (**)(llvm::legacy::PassManagerBase *, llvm::InstructionCombiningPass *))(*(_QWORD *)a2 + 16))(a2, v40);
}

uint64_t llvm::PassManagerBuilder::populateModulePassManager(llvm::PassManagerBuilder *this, llvm::legacy::PassManagerBase *a2)
{
  uint64_t Annotation2MetadataLegacyPass;
  llvm *v5;
  uint64_t v6;
  uint64_t ForceFunctionAttrsLegacyPass;
  llvm::PassManagerBuilder *v8;
  uint64_t v10;
  uint64_t PruneEHPass;
  char v12;
  char *v13;
  size_t v14;
  uint64_t SampleProfileLoaderPass;
  llvm::TargetLibraryInfoWrapperPass *v16;
  llvm *v17;
  uint64_t LowerTypeTestsPass;
  uint64_t InferFunctionAttrsLegacyPass;
  llvm *v20;
  uint64_t AttributorLegacyPass;
  llvm *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t IPSCCPPass;
  llvm *v26;
  uint64_t CalledValuePropagationPass;
  llvm *v28;
  uint64_t GlobalOptimizerPass;
  llvm *v30;
  uint64_t PromoteMemoryToRegisterPass;
  llvm *v32;
  uint64_t DeadArgEliminationPass;
  llvm *v34;
  llvm::InstructionCombiningPass *InstructionCombiningPass;
  uint64_t CFGSimplificationPass;
  llvm *v37;
  uint64_t (**v38)(llvm *);
  llvm::GlobalsAAWrapperPass *GlobalsAAWrapperPass;
  llvm *v40;
  uint64_t v41;
  llvm *v42;
  uint64_t v43;
  uint64_t AttributorCGSCCLegacyPass;
  uint64_t OpenMPOptCGSCCLegacyPass;
  uint64_t PostOrderFunctionAttrsLegacyPass;
  uint64_t ArgumentPromotionPass;
  llvm *v48;
  uint64_t BarrierNoopPass;
  llvm *v50;
  uint64_t PartialInliningPass;
  uint64_t EliminateAvailableExternallyPass;
  uint64_t InstrOrderFilePass;
  uint64_t ReversePostOrderFunctionAttrsPass;
  llvm *v55;
  uint64_t v56;
  llvm *v57;
  uint64_t GlobalDCEPass;
  uint64_t v59;
  uint64_t LoopVersioningLICMPass;
  uint64_t LICMPass;
  llvm::GlobalsAAWrapperPass *v62;
  llvm *v63;
  uint64_t Float2IntPass;
  llvm *v65;
  uint64_t LowerConstantIntrinsicsPass;
  llvm *v67;
  uint64_t LowerMatrixIntrinsicsPass;
  uint64_t EarlyCSEPass;
  uint64_t v70;
  uint64_t LoopRotatePass;
  llvm *v72;
  uint64_t LoopDistributePass;
  llvm *v74;
  uint64_t StripDeadPrototypesPass;
  llvm *v76;
  uint64_t v77;
  llvm *v78;
  uint64_t ConstantMergePass;
  uint64_t HotColdSplittingPass;
  uint64_t IROutlinerPass;
  uint64_t MergeFunctionsPass;
  uint64_t CGProfileLegacyPass;
  uint64_t LoopSinkPass;
  llvm *v85;
  uint64_t InstSimplifyLegacyPass;
  llvm *v87;
  uint64_t DivRemPairsPass;
  uint64_t v89;
  _QWORD *v90;
  void (**v91)(_QWORD *);
  llvm *v92;
  uint64_t v93;
  llvm *v94;
  uint64_t v95;
  uint64_t NameAnonGlobalPass;
  uint64_t v97;
  llvm *v98;
  uint64_t v99;
  llvm *v100;
  uint64_t v101;
  llvm *v102;
  uint64_t v103;
  uint64_t AnnotationRemarksLegacyPass;
  llvm *v107;
  uint64_t CanonicalizeAliasesPass;
  llvm *v109;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  _QWORD v119[3];
  _QWORD *v120;
  _QWORD v121[3];
  llvm *v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  Annotation2MetadataLegacyPass = llvm::createAnnotation2MetadataLegacyPass(this);
  v5 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, Annotation2MetadataLegacyPass);
  if (*((char *)this + 143) < 0)
    v6 = *((_QWORD *)this + 16);
  else
    v6 = *((unsigned __int8 *)this + 143);
  if (v6)
  {
    PruneEHPass = llvm::createPruneEHPass(v5);
    v5 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, PruneEHPass);
    if (!byte_1ED8329F8 || !*((_BYTE *)this + 55))
    {
      v12 = *((_BYTE *)this + 143);
      if (v12 >= 0)
        v13 = (char *)this + 120;
      else
        v13 = (char *)*((_QWORD *)this + 15);
      if (v12 >= 0)
        v14 = v12 & 0x7F;
      else
        v14 = *((_QWORD *)this + 16);
      SampleProfileLoaderPass = llvm::createSampleProfileLoaderPass(v13, v14);
      v5 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, SampleProfileLoaderPass);
    }
  }
  ForceFunctionAttrsLegacyPass = llvm::createForceFunctionAttrsLegacyPass(v5);
  v8 = (llvm::PassManagerBuilder *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, ForceFunctionAttrsLegacyPass);
  if (*(_DWORD *)this)
  {
    if (*((_QWORD *)this + 1))
    {
      v16 = (llvm::TargetLibraryInfoWrapperPass *)operator new();
      llvm::TargetLibraryInfoWrapperPass::TargetLibraryInfoWrapperPass(v16, *((const llvm::TargetLibraryInfoImpl **)this + 1));
      v8 = (llvm::PassManagerBuilder *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, llvm::TargetLibraryInfoWrapperPass *))(*(_QWORD *)a2 + 16))(a2, v16);
    }
    v17 = (llvm *)llvm::PassManagerBuilder::addInitialAliasAnalysisPasses(v8, a2);
    if (*((_BYTE *)this + 55))
    {
      LowerTypeTestsPass = llvm::createLowerTypeTestsPass(0, 0, (const llvm::ModuleSummaryIndex *)1);
      v17 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LowerTypeTestsPass);
    }
    if (*((_BYTE *)this + 54))
    {
      if (*((char *)this + 143) < 0 ? *((_QWORD *)this + 16) : *((unsigned __int8 *)this + 143))
        *((_BYTE *)this + 40) = 1;
    }
    InferFunctionAttrsLegacyPass = llvm::createInferFunctionAttrsLegacyPass(v17);
    v20 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, InferFunctionAttrsLegacyPass);
    if ((dword_1ED832DB8 & 1) != 0)
    {
      AttributorLegacyPass = llvm::createAttributorLegacyPass(v20);
      (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, AttributorLegacyPass);
    }
    llvm::PassManagerBuilder::addExtensionsToPM((uint64_t)this, 1, (uint64_t)a2);
    if (*(_DWORD *)this >= 3u)
    {
      v23 = llvm::createCallSiteSplittingPass(v22);
      v22 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v23);
      if (*(_DWORD *)this >= 3u)
      {
        if (byte_1ED832CF8)
        {
          v24 = operator new();
          *(_QWORD *)(v24 + 8) = 0;
          *(_QWORD *)(v24 + 16) = &unk_1EF8F7150;
          *(_DWORD *)(v24 + 24) = 4;
          *(_QWORD *)v24 = &off_1E817C870;
          v22 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v24);
        }
      }
    }
    IPSCCPPass = llvm::createIPSCCPPass(v22);
    v26 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, IPSCCPPass);
    CalledValuePropagationPass = llvm::createCalledValuePropagationPass(v26);
    v28 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, CalledValuePropagationPass);
    GlobalOptimizerPass = llvm::createGlobalOptimizerPass(v28);
    v30 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, GlobalOptimizerPass);
    PromoteMemoryToRegisterPass = llvm::createPromoteMemoryToRegisterPass(v30);
    v32 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, PromoteMemoryToRegisterPass);
    DeadArgEliminationPass = llvm::createDeadArgEliminationPass(v32);
    v34 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, DeadArgEliminationPass);
    InstructionCombiningPass = llvm::createInstructionCombiningPass(v34);
    (*(void (**)(llvm::legacy::PassManagerBase *, llvm::InstructionCombiningPass *))(*(_QWORD *)a2 + 16))(a2, InstructionCombiningPass);
    llvm::PassManagerBuilder::addExtensionsToPM((uint64_t)this, 7, (uint64_t)a2);
    v115 = 1;
    v116 = 0x101000001000100;
    v117 = 0;
    v118 = 0;
    v122 = 0;
    CFGSimplificationPass = llvm::createCFGSimplificationPass((uint64_t)&v115, v121);
    (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, CFGSimplificationPass);
    v37 = v122;
    if (v122 == (llvm *)v121)
    {
      v38 = (uint64_t (**)(llvm *))(v121[0] + 32);
      v37 = (llvm *)v121;
    }
    else
    {
      if (!v122)
      {
LABEL_35:
        GlobalsAAWrapperPass = llvm::createGlobalsAAWrapperPass(v37);
        v40 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, llvm::GlobalsAAWrapperPass *))(*(_QWORD *)a2 + 16))(a2, GlobalsAAWrapperPass);
        v41 = llvm::createPruneEHPass(v40);
        v42 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v41);
        v43 = *((_QWORD *)this + 2);
        if (v43)
        {
          v42 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, _QWORD))(*(_QWORD *)a2 + 16))(a2, *((_QWORD *)this + 2));
          *((_QWORD *)this + 2) = 0;
        }
        if ((dword_1ED832DB8 & 2) != 0)
        {
          AttributorCGSCCLegacyPass = llvm::createAttributorCGSCCLegacyPass(v42);
          v42 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, AttributorCGSCCLegacyPass);
        }
        if (*(_DWORD *)this >= 2u)
        {
          OpenMPOptCGSCCLegacyPass = llvm::createOpenMPOptCGSCCLegacyPass(v42);
          v42 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, OpenMPOptCGSCCLegacyPass);
        }
        PostOrderFunctionAttrsLegacyPass = llvm::createPostOrderFunctionAttrsLegacyPass(v42);
        (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, PostOrderFunctionAttrsLegacyPass);
        if (*(_DWORD *)this >= 3u)
        {
          ArgumentPromotionPass = llvm::createArgumentPromotionPass((llvm *)3);
          (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, ArgumentPromotionPass);
        }
        llvm::PassManagerBuilder::addExtensionsToPM((uint64_t)this, 9, (uint64_t)a2);
        llvm::PassManagerBuilder::addFunctionSimplificationPasses(this, a2);
        BarrierNoopPass = llvm::createBarrierNoopPass(v48);
        v50 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, BarrierNoopPass);
        if (byte_1ED831F78)
        {
          PartialInliningPass = llvm::createPartialInliningPass(v50);
          v50 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, PartialInliningPass);
        }
        if (*(_DWORD *)this >= 2u && !*((_BYTE *)this + 53) && !*((_BYTE *)this + 54))
        {
          EliminateAvailableExternallyPass = llvm::createEliminateAvailableExternallyPass(v50);
          v50 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, EliminateAvailableExternallyPass);
        }
        if (byte_1ED832AB8)
        {
          InstrOrderFilePass = llvm::createInstrOrderFilePass(v50);
          v50 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, InstrOrderFilePass);
        }
        ReversePostOrderFunctionAttrsPass = llvm::createReversePostOrderFunctionAttrsPass(v50);
        v55 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, ReversePostOrderFunctionAttrsPass);
        if (v43)
        {
          v56 = llvm::createGlobalOptimizerPass(v55);
          v57 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v56);
          GlobalDCEPass = llvm::createGlobalDCEPass(v57);
          v55 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, GlobalDCEPass);
        }
        if (*((_BYTE *)this + 54))
        {
          llvm::PassManagerBuilder::addExtensionsToPM((uint64_t)this, 4, (uint64_t)a2);
          CanonicalizeAliasesPass = llvm::createCanonicalizeAliasesPass(v107);
          v109 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, CanonicalizeAliasesPass);
          NameAnonGlobalPass = llvm::createNameAnonGlobalPass(v109);
          return (*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, NameAnonGlobalPass);
        }
        if (*((_BYTE *)this + 55))
        {
          v59 = llvm::createGlobalOptimizerPass(v55);
          v55 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v59);
        }
        if (byte_1ED80EC28)
        {
          LoopVersioningLICMPass = llvm::createLoopVersioningLICMPass(v55);
          (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LoopVersioningLICMPass);
          LICMPass = llvm::createLICMPass((llvm *)*((unsigned int *)this + 15), *((_DWORD *)this + 16), 1);
          v55 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LICMPass);
        }
        v62 = llvm::createGlobalsAAWrapperPass(v55);
        v63 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, llvm::GlobalsAAWrapperPass *))(*(_QWORD *)a2 + 16))(a2, v62);
        Float2IntPass = llvm::createFloat2IntPass(v63);
        v65 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, Float2IntPass);
        LowerConstantIntrinsicsPass = llvm::createLowerConstantIntrinsicsPass(v65);
        v67 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LowerConstantIntrinsicsPass);
        if (byte_1ED832B78)
        {
          LowerMatrixIntrinsicsPass = llvm::createLowerMatrixIntrinsicsPass(v67);
          (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LowerMatrixIntrinsicsPass);
          EarlyCSEPass = llvm::createEarlyCSEPass(0);
          (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, EarlyCSEPass);
        }
        llvm::PassManagerBuilder::addExtensionsToPM((uint64_t)this, 5, (uint64_t)a2);
        if (*((_DWORD *)this + 1) == 2)
          v70 = 0;
        else
          v70 = 0xFFFFFFFFLL;
        LoopRotatePass = llvm::createLoopRotatePass((llvm *)v70, *((_BYTE *)this + 53));
        v72 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LoopRotatePass);
        LoopDistributePass = llvm::createLoopDistributePass(v72);
        (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LoopDistributePass);
        v74 = (llvm *)llvm::PassManagerBuilder::addVectorPasses(this, a2, 0);
        StripDeadPrototypesPass = llvm::createStripDeadPrototypesPass(v74);
        v76 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, StripDeadPrototypesPass);
        if (*(_DWORD *)this >= 2u)
        {
          v77 = llvm::createGlobalDCEPass(v76);
          v78 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v77);
          ConstantMergePass = llvm::createConstantMergePass(v78);
          v76 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, ConstantMergePass);
        }
        if ((byte_1ED8324B8 || *((_BYTE *)this + 52)) && !*((_BYTE *)this + 53) && !*((_BYTE *)this + 54))
        {
          HotColdSplittingPass = llvm::createHotColdSplittingPass(v76);
          v76 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, HotColdSplittingPass);
        }
        if (byte_1ED832578)
        {
          IROutlinerPass = llvm::createIROutlinerPass(v76);
          v76 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, IROutlinerPass);
        }
        if (*((_BYTE *)this + 51))
        {
          MergeFunctionsPass = llvm::createMergeFunctionsPass(v76);
          v76 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, MergeFunctionsPass);
        }
        if (*((_BYTE *)this + 41))
        {
          CGProfileLegacyPass = llvm::createCGProfileLegacyPass(v76);
          v76 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, CGProfileLegacyPass);
        }
        LoopSinkPass = llvm::createLoopSinkPass(v76);
        v85 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LoopSinkPass);
        InstSimplifyLegacyPass = llvm::createInstSimplifyLegacyPass(v85);
        v87 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, InstSimplifyLegacyPass);
        DivRemPairsPass = llvm::createDivRemPairsPass(v87);
        (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, DivRemPairsPass);
        v111 = 1;
        v112 = 0x101000001000100;
        v113 = 0;
        v114 = 0;
        v120 = 0;
        v89 = llvm::createCFGSimplificationPass((uint64_t)&v111, v119);
        (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v89);
        v90 = v120;
        if (v120 == v119)
        {
          v91 = (void (**)(_QWORD *))(v119[0] + 32);
          v90 = v119;
        }
        else
        {
          if (!v120)
            goto LABEL_79;
          v91 = (void (**)(_QWORD *))(*v120 + 40);
        }
        (*v91)(v90);
LABEL_79:
        llvm::PassManagerBuilder::addExtensionsToPM((uint64_t)this, 4, (uint64_t)a2);
        if (*((_BYTE *)this + 53))
        {
          v93 = llvm::createCanonicalizeAliasesPass(v92);
          v94 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v93);
          v95 = llvm::createNameAnonGlobalPass(v94);
          v92 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v95);
        }
        NameAnonGlobalPass = llvm::createAnnotationRemarksLegacyPass(v92);
        return (*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, NameAnonGlobalPass);
      }
      v38 = (uint64_t (**)(llvm *))(*(_QWORD *)v122 + 40);
    }
    v37 = (llvm *)(*v38)(v37);
    goto LABEL_35;
  }
  if (*((_QWORD *)this + 2))
  {
    v8 = (llvm::PassManagerBuilder *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *))(*(_QWORD *)a2 + 16))(a2);
    *((_QWORD *)this + 2) = 0;
  }
  if (*((_BYTE *)this + 51))
  {
    v10 = llvm::createMergeFunctionsPass(v8);
  }
  else
  {
    if (!atomic_load(qword_1ED80E890))
      goto LABEL_9;
    if (!atomic_load(qword_1ED80E890))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED80E890, (void *(*)(void))sub_1C62A1120, (void (*)(void *))sub_1C62A115C);
    if (!*(_DWORD *)(qword_1ED80E890[0] + 8))
    {
LABEL_9:
      if (*((_QWORD *)this + 18) == *((_QWORD *)this + 19))
        goto LABEL_84;
    }
    v10 = llvm::createBarrierNoopPass(v8);
  }
  (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v10);
LABEL_84:
  if (*((_BYTE *)this + 55))
  {
    v97 = llvm::createLowerTypeTestsPass(0, 0, (const llvm::ModuleSummaryIndex *)1);
    v98 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v97);
    v99 = llvm::createEliminateAvailableExternallyPass(v98);
    (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v99);
  }
  llvm::PassManagerBuilder::addExtensionsToPM((uint64_t)this, 6, (uint64_t)a2);
  if (*((_BYTE *)this + 53) || *((_BYTE *)this + 54))
  {
    v101 = llvm::createCanonicalizeAliasesPass(v100);
    v102 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v101);
    v103 = llvm::createNameAnonGlobalPass(v102);
    v100 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v103);
  }
  AnnotationRemarksLegacyPass = llvm::createAnnotationRemarksLegacyPass(v100);
  return (*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, AnnotationRemarksLegacyPass);
}

_QWORD *sub_1C62A04A0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817C370;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C62A04E0(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v12 = 0;
  v8 = sub_1C6159B48(a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v12);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C62A0558(v11);
}

uint64_t sub_1C62A0558(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C62A0570(_QWORD *a1)
{
  sub_1C5750300(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C62A0594(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C62A05A0(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C62A05B0(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_3:
    v4 = &off_1E817C3C0;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_3;
  }
  return result;
}

_QWORD *sub_1C62A061C(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C62A0624(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817C370;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62A0674(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C62A067C(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C62A0690(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C62A06A4(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C62A06B8(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void sub_1C62A06E4(char **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&llvm::RunPartialInlining, 0, 0);
  byte_1ED831F78 = 0;
  qword_1ED831F80 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED831F88 = 0;
  llvm::RunPartialInlining = (uint64_t)&unk_1E819E898;
  qword_1ED831F90 = (uint64_t)&off_1E819E9A0;
  qword_1ED831F98 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED831FB0 = (uint64_t)&qword_1ED831F98;
  sub_1C62A0798(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::RunPartialInlining);
}

__n128 sub_1C62A0798(char **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  char *v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&llvm::RunPartialInlining, "enable-partial-inlining", 0x17uLL);
  v8 = *a1;
  byte_1ED831F78 = **a1;
  byte_1ED831F89 = 1;
  byte_1ED831F88 = *v8;
  word_1ED831F02 = word_1ED831F02 & 0xFF9F | (32 * (*a2 & 3));
  word_1ED831F02 = word_1ED831F02 & 0xFFF8 | *a3 & 7;
  result = *a4;
  xmmword_1ED831F18 = (__int128)*a4;
  return result;
}

void sub_1C62A082C(int **a1, _WORD *a2, __int128 *a3, uint64_t *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80EDE8, 0, 0);
  dword_1ED80EE68 = 0;
  qword_1ED80EE70 = (uint64_t)&unk_1E814CAA0;
  *(_QWORD *)&dword_1ED80EE78 = 0;
  qword_1ED80EDE8 = (uint64_t)&unk_1E814C9E8;
  qword_1ED80EE80 = (uint64_t)&unk_1E814CA50;
  unk_1ED80EE88 = &qword_1ED80EDE8;
  qword_1ED80EE90 = (uint64_t)&unk_1ED80EEA0;
  qword_1ED80EE98 = 0x800000000;
  qword_1ED80F020 = (uint64_t)&unk_1E814CCF0;
  qword_1ED80F038 = (uint64_t)&qword_1ED80F020;
  sub_1C62A08F4(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80EDE8);
}

void sub_1C62A08F4(int **a1, _WORD *a2, __int128 *a3, uint64_t *a4)
{
  int *v8;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80EDE8, "use-cfl-aa", 0xAuLL);
  v8 = *a1;
  dword_1ED80EE68 = **a1;
  byte_1ED80EE7C = 1;
  dword_1ED80EE78 = *v8;
  word_1ED80EDF2 = (32 * (*a2 & 3)) | word_1ED80EDF2 & 0xFF9F;
  xmmword_1ED80EE08 = *a3;
  sub_1C52C65C0(a4, (uint64_t)&qword_1ED80EDE8);
}

void sub_1C62A098C(__n128 *a1, char **a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&llvm::EnableDFAJumpThreading, 0, 0);
  byte_1ED8323F8 = 0;
  qword_1ED832400 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED832408 = 0;
  llvm::EnableDFAJumpThreading = (uint64_t)&unk_1E819E898;
  qword_1ED832410 = (uint64_t)&off_1E819E9A0;
  qword_1ED832418 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED832430 = (uint64_t)&qword_1ED832418;
  sub_1C5750394(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::EnableDFAJumpThreading);
}

void sub_1C62A0A30(char **a1, _WORD *a2, __int128 *a3)
{
  uint64_t v6;
  char *v7;

  v6 = sub_1C47AD050((uint64_t)&llvm::EnableHotColdSplit, 0, 0);
  byte_1ED8324B8 = 0;
  qword_1ED8324C0 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED8324C8 = 0;
  llvm::EnableHotColdSplit = (uint64_t)&unk_1E819E898;
  qword_1ED8324D0 = (uint64_t)&off_1E819E9A0;
  qword_1ED8324D8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED8324F0 = (uint64_t)&qword_1ED8324D8;
  llvm::cl::Option::setArgStr(v6, "hot-cold-split", 0xEuLL);
  v7 = *a1;
  byte_1ED8324B8 = **a1;
  byte_1ED8324C9 = 1;
  byte_1ED8324C8 = *v7;
  word_1ED832442 = word_1ED832442 & 0xFFF8 | *a2 & 7;
  xmmword_1ED832458 = *a3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::EnableHotColdSplit);
}

void sub_1C62A0B08(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&llvm::PreInlineThreshold, 0, 0);
  dword_1ED8326F8 = 0;
  qword_1ED832700 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED832708 = 0;
  llvm::PreInlineThreshold = (uint64_t)&unk_1E819E418;
  qword_1ED832710 = (uint64_t)&unk_1E819E230;
  qword_1ED832718 = (uint64_t)&off_1E7FA9D80;
  qword_1ED832730 = (uint64_t)&qword_1ED832718;
  sub_1C62A0BB4(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::PreInlineThreshold);
}

__n128 sub_1C62A0BB4(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  int *v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&llvm::PreInlineThreshold, "preinline-threshold", 0x13uLL);
  word_1ED832682 = word_1ED832682 & 0xFF9F | (32 * (*a1 & 3));
  v8 = *a2;
  dword_1ED8326F8 = **a2;
  byte_1ED83270C = 1;
  dword_1ED832708 = *v8;
  word_1ED832682 = word_1ED832682 & 0xFFF8 | *a3 & 7;
  result = *a4;
  xmmword_1ED832698 = (__int128)*a4;
  return result;
}

void sub_1C62A0C48(char **a1, _WORD *a2, __int128 *a3)
{
  uint64_t v6;
  char *v7;

  v6 = sub_1C47AD050((uint64_t)&llvm::EnableGVNHoist, 0, 0);
  byte_1ED8327B8 = 0;
  qword_1ED8327C0 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED8327C8 = 0;
  llvm::EnableGVNHoist = (uint64_t)&unk_1E819E898;
  qword_1ED8327D0 = (uint64_t)&off_1E819E9A0;
  qword_1ED8327D8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED8327F0 = (uint64_t)&qword_1ED8327D8;
  llvm::cl::Option::setArgStr(v6, "enable-gvn-hoist", 0x10uLL);
  v7 = *a1;
  byte_1ED8327B8 = **a1;
  byte_1ED8327C9 = 1;
  byte_1ED8327C8 = *v7;
  word_1ED832742 = word_1ED832742 & 0xFFF8 | *a2 & 7;
  xmmword_1ED832758 = *a3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::EnableGVNHoist);
}

void sub_1C62A0D20(char **a1, _WORD *a2, __int128 *a3)
{
  uint64_t v6;
  char *v7;

  v6 = sub_1C47AD050((uint64_t)&llvm::EnableGVNSink, 0, 0);
  byte_1ED832878 = 0;
  qword_1ED832880 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED832888 = 0;
  llvm::EnableGVNSink = (uint64_t)&unk_1E819E898;
  qword_1ED832890 = (uint64_t)&off_1E819E9A0;
  qword_1ED832898 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED8328B0 = (uint64_t)&qword_1ED832898;
  llvm::cl::Option::setArgStr(v6, "enable-gvn-sink", 0xFuLL);
  v7 = *a1;
  byte_1ED832878 = **a1;
  byte_1ED832889 = 1;
  byte_1ED832888 = *v7;
  word_1ED832802 = word_1ED832802 & 0xFFF8 | *a2 & 7;
  xmmword_1ED832818 = *a3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::EnableGVNSink);
}

void sub_1C62A0DF8(_WORD *a1, int **a2, __int128 *a3, uint64_t a4)
{
  sub_1C47AD050((uint64_t)&llvm::AttributorRun, 0, 0);
  dword_1ED832DB8 = 0;
  qword_1ED832DC0 = (uint64_t)&off_1E817C3C0;
  *(_QWORD *)&dword_1ED832DC8 = 0;
  llvm::AttributorRun = (uint64_t)off_1E817C308;
  qword_1ED832DD0 = (uint64_t)&off_1E817C370;
  qword_1ED832DD8 = (uint64_t)&llvm::AttributorRun;
  qword_1ED832DE0 = (uint64_t)&unk_1ED832DF0;
  qword_1ED832DE8 = 0x800000000;
  qword_1ED832F70 = (uint64_t)&off_1E817C400;
  qword_1ED832F88 = (uint64_t)&qword_1ED832F70;
  sub_1C62A0EB0(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::AttributorRun);
}

void sub_1C62A0EB0(_WORD *a1, int **a2, __int128 *a3, uint64_t a4)
{
  int *v8;

  llvm::cl::Option::setArgStr((uint64_t)&llvm::AttributorRun, "attributor-enable", 0x11uLL);
  word_1ED832D42 = (32 * (*a1 & 3)) | word_1ED832D42 & 0xFF9F;
  v8 = *a2;
  dword_1ED832DB8 = **a2;
  byte_1ED832DCC = 1;
  dword_1ED832DC8 = *v8;
  xmmword_1ED832D58 = *a3;
  sub_1C5750418(*(_QWORD *)a4, *(_DWORD *)(a4 + 8));
}

void sub_1C62A0F4C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62A0F60()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E817C400;
  return result;
}

void sub_1C62A0F84(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E817C400;
}

void sub_1C62A0FA0(unsigned __int8 *a1, size_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  _QWORD v11[5];
  int v12;
  char v13;

  v11[0] = a1;
  v11[1] = a2;
  v11[2] = a4;
  v11[3] = a5;
  v11[4] = &off_1E817C3C0;
  v13 = 1;
  v12 = a3;
  v7 = sub_1C575045C((unint64_t)v11);
  v8 = qword_1ED832DE0 + 48 * qword_1ED832DE8;
  v9 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 32) = &off_1E817C3E0;
  v10 = *(_BYTE *)(v7 + 44);
  *(_DWORD *)(v8 + 40) = *(_DWORD *)(v7 + 40);
  *(_BYTE *)(v8 + 44) = v10;
  *(_QWORD *)(v8 + 32) = &off_1E817C3C0;
  LODWORD(qword_1ED832DE8) = qword_1ED832DE8 + 1;
  llvm::cl::AddLiteralOption(qword_1ED832DD8, a1, a2);
}

void sub_1C62A1054(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1ED832DE0, a1, 48, &v8);
  v2 = (_OWORD *)qword_1ED832DE0;
  if ((_DWORD)qword_1ED832DE8)
  {
    v3 = qword_1ED832DE0 + 48 * qword_1ED832DE8;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E817C3E0;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E817C3C0;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1ED832DE0;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1ED832DF0)
    free(v2);
  qword_1ED832DE0 = (uint64_t)v1;
  HIDWORD(qword_1ED832DE8) = v7;
}

double sub_1C62A1120()
{
  _QWORD *v0;
  double result;

  v0 = (_QWORD *)operator new();
  *v0 = v0 + 2;
  *(_QWORD *)&result = 0x800000000;
  v0[1] = 0x800000000;
  return result;
}

char **sub_1C62A115C(char **result)
{
  if (result)
  {
    sub_1C62A1188(result);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

char **sub_1C62A1188(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 48 * v3;
    while (1)
    {
      v5 = *(char **)&v2[v4 - 16];
      if (&v2[v4 - 40] == v5)
        break;
      if (v5)
      {
        v6 = 5;
LABEL_7:
        (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
      }
      v4 -= 48;
      if (!v4)
      {
        v2 = *a1;
        goto LABEL_10;
      }
    }
    v5 = &v2[v4 - 40];
    v6 = 4;
    goto LABEL_7;
  }
LABEL_10:
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t *sub_1C62A1218(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = v6 + v7;
      v9 = v4 + v7;
      *(_DWORD *)(v6 + v7 - 40) = *(_DWORD *)(v4 + v7 - 40);
      v10 = *(_QWORD *)(v4 + v7 - 8);
      if (v10)
      {
        if (v9 - 32 == v10)
        {
          *(_QWORD *)(v8 - 8) = v8 - 32;
          result = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 - 8) + 24))(*(_QWORD *)(v9 - 8));
        }
        else
        {
          *(_QWORD *)(v8 - 8) = v10;
          *(_QWORD *)(v9 - 8) = 0;
        }
      }
      else
      {
        *(_QWORD *)(v8 - 8) = 0;
      }
      v7 -= 40;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v11 = *v3;
  *v3 = v6;
  a2[1] = v11;
  v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  v13 = v3[2];
  v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1C62A12FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 40;
    v4 = *(_QWORD **)(v2 - 8);
    if (v4 == (_QWORD *)(v2 - 32))
    {
      v4 = (_QWORD *)(v2 - 32);
      v5 = 4;
LABEL_7:
      (*(void (**)(void))(*v4 + 8 * v5))();
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      if (v4)
      {
        v5 = 5;
        goto LABEL_7;
      }
      v2 -= 40;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t llvm::createPruneEHPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5751130(v1);
}

_QWORD *llvm::ContextTrieNode::getChildContext(_QWORD *a1, unsigned int *a2, void *__src, size_t __len)
{
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;

  if (!__len)
    return llvm::ContextTrieNode::getHottestChildContext(a1, a2);
  v5 = llvm::sampleprof::FunctionSamples::getCallSiteHash(__src, __len, a2);
  v8 = (_QWORD *)a1[1];
  v7 = a1 + 1;
  v6 = v8;
  if (!v8)
    goto LABEL_13;
  v9 = v7;
  do
  {
    v10 = v6[4];
    v11 = v10 >= v5;
    if (v10 >= v5)
      v12 = v6;
    else
      v12 = v6 + 1;
    if (v11)
      v9 = v6;
    v6 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 == v7 || v5 < v9[4])
LABEL_13:
    v9 = v7;
  if (v9 == v7)
    return 0;
  else
    return v9 + 5;
}

uint64_t llvm::ContextTrieNode::getFunctionSamples(llvm::ContextTrieNode *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t llvm::ContextTrieNode::getCallSiteLoc(llvm::ContextTrieNode *this)
{
  return *((_QWORD *)this + 8);
}

uint64_t **llvm::ContextTrieNode::getOrCreateChildContext(uint64_t a1, unsigned int *a2, void *__src, size_t __len, int a5)
{
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  __int128 v23;
  __int128 v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t *v31;

  v10 = (uint64_t *)llvm::sampleprof::FunctionSamples::getCallSiteHash(__src, __len, a2);
  v11 = (unint64_t)v10;
  v31 = v10;
  v12 = *(_QWORD **)(a1 + 8);
  if (v12)
  {
    v13 = (_QWORD *)(a1 + 8);
    do
    {
      v14 = v12[4];
      v15 = v14 >= (unint64_t)v10;
      if (v14 >= (unint64_t)v10)
        v16 = v12;
      else
        v16 = v12 + 1;
      if (v15)
        v13 = v12;
      v12 = (_QWORD *)*v16;
    }
    while (*v16);
    if (v13 != (_QWORD *)(a1 + 8) && (unint64_t)v10 >= v13[4])
      return (uint64_t **)(v13 + 5);
  }
  if (!a5)
    return 0;
  v18 = *(_QWORD *)a2;
  v25 = &v26;
  v26 = 0;
  v27 = 0;
  *(_QWORD *)&v28 = a1;
  *((_QWORD *)&v28 + 1) = __src;
  v29 = __len;
  LOBYTE(v30) = 0;
  BYTE4(v30) = 0;
  *((_QWORD *)&v30 + 1) = v18;
  v19 = sub_1C5753EDC((uint64_t **)a1, (unint64_t)v10, &v31);
  v20 = (uint64_t *)(v19 + 6);
  sub_1C62A18C0((uint64_t)(v19 + 5), v19[6]);
  v21 = v26;
  v19[5] = (uint64_t *)&v26;
  v19[6] = v21;
  v22 = v27;
  v19[7] = v27;
  if (v22)
  {
    v21[2] = (uint64_t)v20;
    v25 = &v26;
    v26 = 0;
    v27 = 0;
    v21 = 0;
  }
  else
  {
    v19[5] = v20;
  }
  v24 = v29;
  v23 = v30;
  *((_OWORD *)v19 + 4) = v28;
  *((_OWORD *)v19 + 5) = v24;
  *((_OWORD *)v19 + 6) = v23;
  sub_1C62A18C0((uint64_t)&v25, v21);
  return sub_1C5753EDC((uint64_t **)a1, v11, &v31) + 5;
}

uint64_t llvm::SampleContextTracker::SampleContextTracker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **ChildContext;
  size_t **v10;
  uint64_t *v12;
  uint64_t v13;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0x2000000000;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  v4 = (uint64_t **)(a1 + 40);
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_BYTE *)(a1 + 96) = 0;
  v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    while (1)
    {
      v12 = v5 + 7;
      v6 = v5[4];
      v7 = v5[5];
      if (v7 == 1)
        break;
      v10 = sub_1C62A1BBC(a1, (unsigned __int8 *)v5[2], v5[3]);
      sub_1C62A1CB4((uint64_t)(*v10 + 1), (uint64_t *)&v12, (uint64_t *)&v12);
      v13 = 0;
      ChildContext = v4;
      if (v7)
        goto LABEL_4;
LABEL_6:
      ChildContext[6] = v5 + 7;
      v5 = (uint64_t *)*v5;
      if (!v5)
        return a1;
    }
    v13 = 0;
LABEL_4:
    v8 = v6 + 24 * v7;
    ChildContext = v4;
    do
    {
      ChildContext = llvm::ContextTrieNode::getOrCreateChildContext((uint64_t)ChildContext, (unsigned int *)&v13, *(void **)v6, *(_QWORD *)(v6 + 8), 1);
      v13 = *(_QWORD *)(v6 + 16);
      v6 += 24;
    }
    while (v6 != v8);
    goto LABEL_6;
  }
  return a1;
}

_QWORD *llvm::SampleContextTracker::getCalleeContextFor(llvm::SampleContextTracker *a1, const llvm::DILocation *a2, void *a3, size_t a4)
{
  _QWORD *result;
  _QWORD *v8;
  unint64_t v9;

  result = llvm::SampleContextTracker::getContextFor(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = llvm::sampleprof::FunctionSamples::getCallSiteIdentifier((uint64_t)a2, 0);
    return llvm::ContextTrieNode::getChildContext(v8, (unsigned int *)&v9, a3, a4);
  }
  return result;
}

_QWORD *llvm::SampleContextTracker::getContextSamplesFor(llvm::SampleContextTracker *this, const llvm::DILocation *a2)
{
  _QWORD *result;
  uint64_t v4;

  result = llvm::SampleContextTracker::getContextFor(this, a2);
  if (result)
  {
    v4 = (uint64_t)result;
    result = (_QWORD *)result[6];
    if (result)
    {
      if (*(llvm::SampleContextTracker **)(v4 + 24) != (llvm::SampleContextTracker *)((char *)this + 40))
        *((_DWORD *)result + 12) |= 4u;
    }
  }
  return result;
}

_QWORD *llvm::SampleContextTracker::getContextFor(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (_QWORD *)(a1 + 40);
  v6 = 0;
  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v5 = v4 + 24 * v3;
    do
    {
      result = llvm::ContextTrieNode::getChildContext(result, (unsigned int *)&v6, *(void **)v4, *(_QWORD *)(v4 + 8));
      v6 = *(_QWORD *)(v4 + 16);
      v4 += 24;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t llvm::SampleContextTracker::getBaseSamplesFor(uint64_t **this, const llvm::Function *a2, int a3)
{
  int *v5;
  size_t v6;

  v5 = (int *)sub_1C6200B8C(a2);
  return llvm::SampleContextTracker::getBaseSamplesFor(this, v5, v6, a3);
}

void llvm::SampleContextTracker::markContextSamplesInlined(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 48) |= 4u;
}

uint64_t llvm::SampleContextTracker::getRootContext(llvm::SampleContextTracker *this)
{
  return (uint64_t)this + 40;
}

uint64_t llvm::SampleContextTracker::mergeContextNode(llvm::SampleContextTracker *this, llvm::ContextTrieNode *a2, llvm::ContextTrieNode *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t result;

  v4 = *((_QWORD *)a2 + 6);
  v5 = *((_QWORD *)a3 + 6);
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (v4)
    {
      *((_QWORD *)a3 + 6) = v4;
      *(_DWORD *)(v4 + 48) |= 2u;
      v7 = *(_QWORD *)(v4 + 40) - a4;
      *(_QWORD *)(v4 + 32) += 24 * a4;
      *(_QWORD *)(v4 + 40) = v7;
      *((_QWORD *)a2 + 6) = 0;
    }
  }
  else
  {
    result = sub_1C5753498(*((_QWORD *)a3 + 6), *((_QWORD *)a2 + 6), 1uLL);
    *(_DWORD *)(v5 + 48) |= 2u;
    *(_DWORD *)(v4 + 48) |= 8u;
    if ((*(_BYTE *)(v4 + 52) & 2) != 0)
      *(_DWORD *)(v5 + 52) |= 2u;
  }
  return result;
}

void sub_1C62A18C0(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1C62A18C0(a1, *a2);
    sub_1C62A18C0(a1, a2[1]);
    sub_1C62A18C0(a2 + 5, a2[6]);
    operator delete(a2);
  }
}

char *sub_1C62A190C(uint64_t a1, unsigned int *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v6 = sub_1C5753DF0(a1, &v13, a2);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v9 = v6;
    v7 = (char *)operator new(0x50uLL);
    *((_QWORD *)v7 + 4) = **a4;
    *(_OWORD *)(v7 + 56) = 0u;
    *((_QWORD *)v7 + 9) = 0;
    *(_OWORD *)(v7 + 40) = 0u;
    *((_DWORD *)v7 + 17) = 16;
    v10 = v13;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v10;
    *v9 = (uint64_t)v7;
    v11 = **(_QWORD **)a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *(_QWORD *)a1 = v11;
      v12 = (uint64_t *)*v9;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v12);
    ++*(_QWORD *)(a1 + 16);
  }
  return v7;
}

uint64_t *sub_1C62A19D0(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v6 = sub_1C5753DF0(a1, &v14, a2);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v9 = v6;
    v7 = (uint64_t *)operator new(0x40uLL);
    v10 = **a4;
    v7[7] = 0;
    v7[6] = 0;
    v7[4] = v10;
    v7[5] = (uint64_t)(v7 + 6);
    v11 = v14;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v11;
    *v9 = (uint64_t)v7;
    v12 = **(_QWORD **)a1;
    v13 = v7;
    if (v12)
    {
      *(_QWORD *)a1 = v12;
      v13 = (uint64_t *)*v9;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v13);
    ++*(_QWORD *)(a1 + 16);
  }
  return v7;
}

char *sub_1C62A1A88(uint64_t a1, const void **a2, uint64_t a3, __int128 **a4)
{
  void **v6;
  char *v7;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 *v14;

  v6 = (void **)sub_1C4768D58(a1, &v13, a2);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v9 = v6;
    v7 = (char *)operator new(0xB0uLL);
    v14 = *a4;
    sub_1C5753E5C(v7 + 32, &v14);
    v10 = v13;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v10;
    *v9 = v7;
    v11 = **(_QWORD **)a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *(_QWORD *)a1 = v11;
      v12 = (uint64_t *)*v9;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v12);
    ++*(_QWORD *)(a1 + 16);
  }
  return v7;
}

void sub_1C62A1B40(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t *v3;
  unint64_t v4;
  BOOL v5;
  _QWORD *v6;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (uint64_t *)(a1 + 8);
    do
    {
      v4 = v2[4];
      v5 = v4 >= a2;
      if (v4 >= a2)
        v6 = v2;
      else
        v6 = v2 + 1;
      if (v5)
        v3 = v2;
      v2 = (_QWORD *)*v6;
    }
    while (*v6);
    if (v3 != (uint64_t *)(a1 + 8) && v3[4] <= a2)
    {
      sub_1C49C7D1C((uint64_t **)a1, v3);
      sub_1C62A18C0((uint64_t)(v3 + 5), (_QWORD *)v3[6]);
      operator delete(v3);
    }
  }
}

size_t **sub_1C62A1BBC(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6;
  size_t **i;
  size_t *v8;
  size_t *v9;
  _QWORD *buffer;
  size_t *v12;
  char *v13;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  i = (size_t **)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == (size_t *)-8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == (size_t *)-8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  buffer = llvm::allocate_buffer(a3 + 33, (std::align_val_t)8uLL);
  v12 = buffer;
  v13 = (char *)(buffer + 4);
  if (a3)
    memcpy(buffer + 4, a2, a3);
  v13[a3] = 0;
  v12[3] = 0;
  v12[2] = 0;
  *v12 = a3;
  v12[1] = (size_t)(v12 + 2);
  *i = v12;
  ++*(_DWORD *)(a1 + 12);
  for (i = (size_t **)(*(_QWORD *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i + 1 == 0;
  return i;
}

uint64_t **sub_1C62A1CB4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t **result;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  result = (uint64_t **)sub_1C5753FC4(a1, &v11, a2);
  if (!*result)
  {
    v6 = result;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a3;
    v8 = v11;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v8;
    *v6 = v7;
    v9 = **(_QWORD **)a1;
    if (v9)
    {
      *(_QWORD *)a1 = v9;
      v10 = *v6;
    }
    else
    {
      v10 = v7;
    }
    result = (uint64_t **)sub_1C4768E74(*(uint64_t **)(a1 + 8), v10);
    ++*(_QWORD *)(a1 + 16);
  }
  return result;
}

uint64_t llvm::createSampleProfileLoaderPass(void *a1, size_t a2)
{
  uint64_t v4;
  unsigned int *v6;

  v4 = operator new();
  v6 = 0;
  return sub_1C5754314(v4, a1, a2, &v6);
}

uint64_t llvm::SampleProfileLoaderPass::run@<X0>(uint64_t a1@<X0>, const llvm::MemoryBuffer **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char v11;
  void *v12;
  size_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  void *v17;
  size_t v18;
  int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  void (**v23)(void);
  void (**v24)(void);
  void (**v25)(void);
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t ResultImpl;
  char v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  _QWORD v40[3];
  _QWORD *v41;
  _QWORD v42[3];
  _QWORD *v43;
  _QWORD v44[3];
  _QWORD *v45;
  _BYTE v46[1408];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, (uint64_t)a2)+ 8);
  if (!*(_QWORD *)(a1 + 56))
  {
    llvm::vfs::getRealFileSystem(&v39);
    v33 = v39;
    v39 = *(unsigned int **)(a1 + 56);
    v34 = v39;
    *(_QWORD *)(a1 + 56) = v33;
    if (v34)
    {
      v35 = v34 + 2;
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
        (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
    }
  }
  if (*(char *)(a1 + 23) < 0)
    v9 = *(_QWORD *)(a1 + 8);
  else
    v9 = *(unsigned __int8 *)(a1 + 23);
  if (v9)
    v10 = (uint64_t *)a1;
  else
    v10 = &qword_1ED80FC08;
  v11 = *((_BYTE *)v10 + 23);
  if (v11 >= 0)
    v12 = v10;
  else
    v12 = (void *)*v10;
  if (v11 >= 0)
    v13 = v11 & 0x7F;
  else
    v13 = v10[1];
  v14 = (uint64_t *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    v15 = *(_QWORD *)(a1 + 32);
  else
    v15 = *(unsigned __int8 *)(a1 + 47);
  if (!v15)
    v14 = &qword_1ED80FCF0;
  v16 = *((_BYTE *)v14 + 23);
  if (v16 >= 0)
    v17 = v14;
  else
    v17 = (void *)*v14;
  if (v16 >= 0)
    v18 = v16 & 0x7F;
  else
    v18 = v14[1];
  v19 = *(_DWORD *)(a1 + 48);
  v20 = *(unsigned int **)(a1 + 56);
  v38 = v20;
  if (v20)
  {
    v21 = v20 + 2;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v44[0] = &off_1E817C6B0;
  v44[1] = v8;
  v45 = v44;
  v42[0] = &off_1E817C6F8;
  v42[1] = v8;
  v43 = v42;
  v40[0] = &off_1E817C740;
  v40[1] = v8;
  v41 = v40;
  sub_1C57545DC((uint64_t)v46, v12, v13, v17, v18, v19, &v38, (uint64_t)v44, (uint64_t)v42, (uint64_t)v40);
  if (v41 == v40)
  {
    v23 = (void (**)(void))(v40[0] + 32);
  }
  else
  {
    if (!v41)
      goto LABEL_30;
    v23 = (void (**)(void))(*v41 + 40);
  }
  (*v23)();
LABEL_30:
  if (v43 == v42)
  {
    v24 = (void (**)(void))(v42[0] + 32);
  }
  else
  {
    if (!v43)
      goto LABEL_34;
    v24 = (void (**)(void))(*v43 + 40);
  }
  (*v24)();
LABEL_34:
  if (v45 == v44)
  {
    v25 = (void (**)(void))(v44[0] + 32);
    goto LABEL_37;
  }
  if (v45)
  {
    v25 = (void (**)(void))(*v45 + 40);
LABEL_37:
    (*v25)();
  }
  if (v20)
  {
    v26 = v20 + 2;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
      (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
  }
  if ((sub_1C57549D0((uint64_t)v46, a2, v8) & 1) != 0
    && (v29 = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::ProfileSummaryAnalysis::Key, (uint64_t)a2)
            + 8,
        ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::CallGraphAnalysis::Key, (uint64_t)a2),
        sub_1C57550F8((uint64_t)v46, (uint64_t)a2, a3, v29, (_QWORD *)(ResultImpl + 8)),
        (v31 & 1) != 0))
  {
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)(a4 + 88) = 0;
    *(_OWORD *)(a4 + 72) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_QWORD *)a4 = a4 + 32;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_QWORD *)(a4 + 16) = 2;
    *(_QWORD *)(a4 + 48) = a4 + 80;
    *(_QWORD *)(a4 + 56) = a4 + 80;
    *(_DWORD *)(a4 + 64) = 2;
  }
  else
  {
    llvm::InstCountPass::run(a4);
  }
  return sub_1C5759BB0((uint64_t)v46);
}

void sub_1C62A20E4(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1C575AB3C(a3, a1, a2);
}

llvm::sampleprof::FunctionSamples *sub_1C62A20F4(uint64_t a1, uint64_t a2)
{
  llvm::sampleprof::FunctionSamples *result;
  uint64_t v4;
  char v5;
  const llvm::DILocation *v6;

  v6 = *(const llvm::DILocation **)(a2 + 48);
  if (!v6)
    return *(llvm::sampleprof::FunctionSamples **)(a1 + 1064);
  sub_1C6201C30(a1 + 8, &v6, (uint64_t)&v4);
  if (!v5)
    return *(llvm::sampleprof::FunctionSamples **)(v4 + 8);
  result = llvm::sampleprof::FunctionSamples::findFunctionSamples(*(llvm::sampleprof::FunctionSamples **)(a1 + 1064), v6, *(llvm::sampleprof::SampleProfileReaderItaniumRemapper **)(*(_QWORD *)(a1 + 1056) + 112));
  *(_QWORD *)(v4 + 8) = result;
  return result;
}

void sub_1C62A2174(llvm::OptimizationRemarkEmitter *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  char *v7;
  _QWORD v8[10];
  void *v9;
  unsigned int v10;
  _QWORD v11[35];

  v11[34] = *MEMORY[0x1E0C80C00];
  v4 = ****(_QWORD ****)a1;
  if (*(_QWORD *)(v4 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v4 + 72) + 48))(*(_QWORD *)(v4 + 72)))
  {
    sub_1C575AC84(v8, a2);
    llvm::OptimizationRemarkEmitter::emit(a1, (llvm::DiagnosticInfoOptimizationBase *)v8);
    v8[0] = &off_1E814E790;
    v5 = v9;
    if (v10)
    {
      v6 = (unint64_t)v10 << 6;
      v7 = (char *)v9 - 64;
      do
      {
        sub_1C4765530((uint64_t)&v7[v6]);
        v6 -= 64;
      }
      while (v6);
      v5 = v9;
    }
    if (v5 != v11)
      free(v5);
  }
}

uint64_t *sub_1C62A2264(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;

  v5 = *(uint64_t **)(a1 + 8);
  v3 = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (!v5)
    return v3;
  v6 = v3;
  do
  {
    v7 = *((_DWORD *)v4 + 8);
    if (v7 >= a2)
    {
      if (v7 == a2)
      {
        if (*((_DWORD *)v4 + 9) < a3)
          ++v4;
        else
          v6 = v4;
      }
      else
      {
        v6 = v4;
      }
    }
    else
    {
      ++v4;
    }
    v4 = (uint64_t *)*v4;
  }
  while (v4);
  if (v6 == v3)
    return v3;
  v8 = *((_DWORD *)v6 + 8);
  if (v8 > a2 || v8 == a2 && *((_DWORD *)v6 + 9) > a3)
    return v3;
  return v6;
}

uint64_t sub_1C62A22EC(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &unk_1E814E610;
  v4 = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_QWORD *)a1 = &off_1E814E760;
  v5 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)a1 = &off_1E814E790;
  v6 = *(_OWORD *)(a2 + 40);
  v7 = *(_OWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = a1 + 96;
  v9 = a1 + 80;
  *(_QWORD *)(v9 - 8) = v8;
  *(_OWORD *)(v9 - 24) = v7;
  *(_OWORD *)(v9 - 40) = v6;
  *(_QWORD *)(v9 + 8) = 0x400000000;
  if (*(_DWORD *)(a2 + 88))
    sub_1C51D79F8(v9, a2 + 80);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)a1 = &unk_1E814E7C8;
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  return a1;
}

uint64_t sub_1C62A23BC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 12))
  {
    v1 = result;
    v2 = *(unsigned int *)(result + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)v1;
        result = *(_QWORD *)(*(_QWORD *)v1 + v3);
        if (result != -8 && result != 0)
          result = MEMORY[0x1CAA32FB4]();
        *(_QWORD *)(v5 + v3) = 0;
        v3 += 8;
      }
      while (v4 != v3);
    }
    *(_DWORD *)(v1 + 12) = 0;
    *(_DWORD *)(v1 + 16) = 0;
  }
  return result;
}

uint64_t sub_1C62A2428(uint64_t a1)
{
  sub_1C4926AE8(a1 + 32);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  return a1;
}

uint64_t sub_1C62A245C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)a1 + v3);
        if (v5 != -8 && v5 != 0)
        {
          sub_1C6143384(*(_QWORD **)(v5 + 16));
          MEMORY[0x1CAA32FB4](v5, 8);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void sub_1C62A24E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  sub_1C61446F0((unsigned int *)(a1 + 32));
  sub_1C6201058((unsigned int *)(a1 + 56));
  sub_1C4E4DBF0(a1 + 80);
  *(_DWORD *)(a1 + 376) = 0;
  sub_1C6143384(*(_QWORD **)(a1 + 904));
  *(_QWORD *)(a1 + 896) = a1 + 904;
  *(_QWORD *)(a1 + 912) = 0;
  *(_QWORD *)(a1 + 904) = 0;
  sub_1C61446F0((unsigned int *)(a1 + 920));
  v2 = *(_QWORD *)(a1 + 944);
  *(_QWORD *)(a1 + 944) = 0;
  if (v2)
    sub_1C4DC4DE4(a1 + 944, v2);
  v3 = *(_QWORD *)(a1 + 952);
  *(_QWORD *)(a1 + 952) = 0;
  if (v3)
    sub_1C4DC4E98(a1 + 952, v3);
  v4 = *(_QWORD **)(a1 + 960);
  *(_QWORD *)(a1 + 960) = 0;
  if (v4)
  {
    v5 = llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(v4);
    MEMORY[0x1CAA32FC0](v5, 0x10B0C40D29300ECLL);
  }
  sub_1C62010AC(a1 + 968);
  sub_1C62010AC(a1 + 992);
  sub_1C62011C0((_DWORD *)(a1 + 1016));
  *(_QWORD *)(a1 + 1040) = 0;
}

uint64_t sub_1C62A25A0(uint64_t a1, uint64_t a2, _QWORD *a3, _OWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C61D0F5C((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C61D1000(a2, (uint64_t)a3, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_OWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

size_t **sub_1C62A263C(uint64_t a1, unsigned __int8 *a2, size_t a3, size_t *a4)
{
  uint64_t v8;
  size_t **i;
  size_t *v10;
  size_t *v11;
  _QWORD *v12;
  size_t *v13;
  char *v14;
  size_t v15;

  v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  i = (size_t **)(*(_QWORD *)a1 + 8 * v8);
  v10 = *i;
  if (*i == (size_t *)-8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v10)
  {
    while (!v10 || v10 == (size_t *)-8)
    {
      v11 = i[1];
      ++i;
      v10 = v11;
    }
    return i;
  }
  v12 = operator new(a3 + 17, (std::align_val_t)8uLL);
  v13 = v12;
  v14 = (char *)(v12 + 2);
  if (a3)
    memcpy(v12 + 2, a2, a3);
  v14[a3] = 0;
  v15 = *a4;
  *v13 = a3;
  v13[1] = v15;
  *i = v13;
  ++*(_DWORD *)(a1 + 12);
  for (i = (size_t **)(*(_QWORD *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
        !*i || *i + 1 == 0;
  return i;
}

void sub_1C62A273C(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6;
  int Key;
  size_t *v8;
  size_t *v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  size_t **v13;
  __int128 v14;
  _QWORD *v15;
  size_t v16;

  v6 = a1 + 40;
  Key = llvm::StringMapImpl::FindKey((uint64_t *)(a1 + 40), a2, a3);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 48))
  {
    *(_QWORD *)&v14 = a2;
    *((_QWORD *)&v14 + 1) = a3;
    v15 = 0;
    v16 = 0;
    v8 = *sub_1C62A2AC4(v6, a2, a3);
    *(_OWORD *)(v8 + 1) = v14;
    v9 = v8 + 4;
    sub_1C6143384((_QWORD *)v8[4]);
    v8[3] = (size_t)&v15;
    v10 = v15;
    v8[4] = (size_t)v15;
    v11 = v16;
    v8[5] = v16;
    if (v11)
    {
      v12 = 0;
      v10[2] = v9;
      v15 = 0;
      v16 = 0;
    }
    else
    {
      v8[3] = (size_t)v9;
      v12 = v15;
    }
    sub_1C6143384(v12);
    v13 = sub_1C62A2AC4(v6, a2, a3);
    sub_1C62A2D60(a1 + 16, a1, (uint64_t)(*v13 + 1), 0);
  }
}

llvm::StringMapImpl *sub_1C62A284C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t *v6;
  llvm::StringMapImpl *result;

  v6 = sub_1C62A2264(a2 + 72, a3, a4);
  if ((uint64_t *)(a2 + 80) == v6)
  {
    result = (llvm::StringMapImpl *)std::system_category();
    *(_BYTE *)(a1 + 32) |= 1u;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = result;
  }
  else
  {
    *(_BYTE *)(a1 + 32) &= ~1u;
    return sub_1C62A29BC((llvm::StringMapImpl *)a1, v6 + 6);
  }
  return result;
}

uint64_t *sub_1C62A28BC(uint64_t a1, unsigned __int8 *a2, size_t a3, unsigned __int8 *__s1, size_t __n, unint64_t a6)
{
  uint64_t v10;
  uint64_t *result;
  uint64_t v12;
  uint64_t v13;
  size_t **v14;
  uint64_t v15;
  size_t *v16;
  uint64_t **v17;
  uint64_t *v18;
  _QWORD v19[3];

  v10 = a1 + 40;
  result = (uint64_t *)llvm::StringMapImpl::FindKey((uint64_t *)(a1 + 40), __s1, __n);
  if ((_DWORD)result != -1)
  {
    v12 = (int)result;
    if ((int)result != (unint64_t)*(unsigned int *)(a1 + 48))
    {
      v13 = *(_QWORD *)(a1 + 40);
      v14 = sub_1C62A2AC4(v10, a2, a3);
      v15 = *(_QWORD *)(v13 + 8 * v12) + 8;
      v19[0] = *v14 + 1;
      v19[1] = v15;
      v19[2] = a6;
      v16 = *sub_1C62A2AC4(v10, a2, a3);
      v17 = (uint64_t **)(v16 + 3);
      result = sub_1C62A2BC0((uint64_t)(v16 + 3), v15);
      if (v16 + 4 != (size_t *)result)
      {
        v18 = result;
        if (result[6] >= a6)
          return result;
        sub_1C49C7D1C(v17, result);
        operator delete(v18);
      }
      return (uint64_t *)sub_1C62A2C38((uint64_t)v17, v15, (uint64_t)v19);
    }
  }
  return result;
}

llvm::StringMapImpl *sub_1C62A29BC(llvm::StringMapImpl *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t *v10;
  BOOL v11;
  size_t v12;
  _QWORD *v13;
  size_t *v14;
  char *v15;
  size_t v16;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0x1000000000;
  if (*((_DWORD *)a2 + 3))
  {
    llvm::StringMapImpl::init(this, *((_DWORD *)a2 + 2));
    v4 = *(_QWORD *)this;
    v5 = *((unsigned int *)this + 2);
    v6 = *a2;
    *(_QWORD *)((char *)this + 12) = *(uint64_t *)((char *)a2 + 12);
    if ((_DWORD)v5)
    {
      v7 = 0;
      v8 = v4 + 8 * v5 + 8;
      v9 = v6 + 8 * v5 + 8;
      do
      {
        v10 = *(size_t **)(*a2 + 8 * v7);
        if (v10)
          v11 = v10 + 1 == 0;
        else
          v11 = 1;
        if (v11)
        {
          *(_QWORD *)(*(_QWORD *)this + 8 * v7) = v10;
        }
        else
        {
          v12 = *v10;
          v13 = operator new(*v10 + 17, (std::align_val_t)8uLL);
          v14 = v13;
          v15 = (char *)(v13 + 2);
          if (v12)
            memcpy(v13 + 2, v10 + 2, v12);
          v15[v12] = 0;
          v16 = v10[1];
          *v14 = v12;
          v14[1] = v16;
          *(_QWORD *)(*(_QWORD *)this + 8 * v7) = v14;
          *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(v9 + 4 * v7);
        }
        ++v7;
      }
      while (v5 != v7);
    }
  }
  return this;
}

size_t **sub_1C62A2AC4(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6;
  size_t **i;
  size_t *v8;
  size_t *v9;
  _QWORD *v11;
  size_t *v12;
  char *v13;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  i = (size_t **)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == (size_t *)-8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == (size_t *)-8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  v11 = operator new(a3 + 49, (std::align_val_t)8uLL);
  v12 = v11;
  v13 = (char *)(v11 + 6);
  if (a3)
    memcpy(v11 + 6, a2, a3);
  v13[a3] = 0;
  *v12 = a3;
  v12[1] = 0;
  v12[5] = 0;
  v12[4] = 0;
  v12[2] = 0;
  v12[3] = (size_t)(v12 + 4);
  *i = v12;
  ++*(_DWORD *)(a1 + 12);
  for (i = (size_t **)(*(_QWORD *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i + 1 == 0;
  return i;
}

_QWORD *sub_1C62A2BC0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = sub_1C575B428(v3[5], a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_1C575B428(a2, v5[5]))
    return v2;
  return v5;
}

uint64_t **sub_1C62A2C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **result;
  uint64_t **v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  result = (uint64_t **)sub_1C575B488(a1, &v11, a2);
  if (!*result)
  {
    v6 = result;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a3;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a3 + 16);
    v8 = v11;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v8;
    *v6 = (uint64_t *)v7;
    v9 = **(_QWORD **)a1;
    if (v9)
    {
      *(_QWORD *)a1 = v9;
      v10 = *v6;
    }
    else
    {
      v10 = (uint64_t *)v7;
    }
    result = (uint64_t **)sub_1C4768E74(*(uint64_t **)(a1 + 8), v10);
    ++*(_QWORD *)(a1 + 16);
  }
  return result;
}

uint64_t sub_1C62A2CDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)a1 + v3);
        if (v5 != -8 && v5 != 0)
        {
          sub_1C6143384(*(_QWORD **)(v5 + 32));
          MEMORY[0x1CAA32FB4](v5, 8);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void sub_1C62A2D60(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = operator new(0x38uLL);
  v8[4] = a2;
  v8[5] = a3;
  v8[6] = a4;
  v9 = sub_1C575B488(a1, &v12, a3);
  if (*v9)
  {
    operator delete(v8);
  }
  else
  {
    v10 = v12;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *v9 = v8;
    v11 = **(_QWORD **)a1;
    if (v11)
    {
      *(_QWORD *)a1 = v11;
      v8 = (_QWORD *)*v9;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v8);
    ++*(_QWORD *)(a1 + 16);
  }
}

char *sub_1C62A2E28(int *a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  char *result;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = a2;
  v4 = *a1 + 1;
  *a1 = v4;
  *((_DWORD *)sub_1C6144C70((uint64_t)(a1 + 2), &v13) + 2) = v4;
  v5 = (uint64_t *)*((_QWORD *)a1 + 5);
  if ((unint64_t)v5 >= *((_QWORD *)a1 + 6))
  {
    v6 = sub_1C4ABDC28((void **)a1 + 4, a2);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  *((_QWORD *)a1 + 5) = v6;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *a1;
  *(_QWORD *)&v11 = a2;
  *((_QWORD *)&v11 + 1) = v7;
  LODWORD(v12) = v8;
  v9 = *((_QWORD *)a1 + 11);
  if (v9 >= *((_QWORD *)a1 + 12))
  {
    result = sub_1C575BBCC((void **)a1 + 10, (uint64_t)&v11);
  }
  else
  {
    *(_OWORD *)v9 = v11;
    *(_QWORD *)(v9 + 16) = v12;
    result = (char *)(v9 + 24);
  }
  *((_QWORD *)a1 + 11) = result;
  return result;
}

_QWORD *sub_1C62A2EDC(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

uint64_t *sub_1C62A2F40(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;

  v1 = a1;
  if ((uint64_t *)*a1 != a1)
  {
    v3 = sub_1C62A2F40();
    *v1 = v3;
    return (uint64_t *)v3;
  }
  return v1;
}

_QWORD *sub_1C62A2F7C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  if (!a2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= a2)
      v7 = v5 % a2;
  }
  else
  {
    v7 = v5 & (a2 - 1);
  }
  v8 = *(_QWORD **)(a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == a3)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= a2)
            v10 %= a2;
        }
        else
        {
          v10 &= a2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1C62A305C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  return sub_1C61B8160(a1);
}

uint64_t sub_1C62A308C(_QWORD *a1, uint64_t ***a2, uint64_t a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;

  v6 = *(_DWORD *)(a3 + 8);
  v7 = sub_1C5761794((_QWORD *(***)(unint64_t *__return_ptr, _QWORD, uint64_t))a1, (uint64_t)a2);
  if (v6)
    v8 = 1;
  else
    v8 = v7;
  if ((_DWORD)v8 == 1)
  {
    sub_1C62A38F8(a1, a2, a3);
    sub_1C5761880((uint64_t)a1, (uint64_t)a2);
    sub_1C62A3968(a1, (uint64_t)a2, a3);
  }
  return v8;
}

const llvm::sampleprof::FunctionSamples **sub_1C62A3104(const llvm::sampleprof::FunctionSamples **result, uint64_t **a2)
{
  const llvm::sampleprof::FunctionSamples **v3;
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t Subprogram;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  const llvm::sampleprof::FunctionSamples *v21;
  uint64_t v22[4];
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  uint64_t v26[4];
  __int16 v27;
  uint64_t v28[4];
  __int16 v29;
  uint64_t v30[4];
  __int16 v31;
  uint64_t v32[4];
  __int16 v33;
  uint64_t v34[5];
  uint64_t v35[5];
  uint64_t v36[5];
  uint64_t v37[5];
  _BYTE v38[40];
  void *v39;
  int v40;
  char v41;
  const char *v42;
  uint64_t v43;
  int v44;
  _BYTE *v45;

  v3 = result;
  if (dword_1ED837958)
  {
    v4 = llvm::sampleprofutil::SampleCoverageTracker::countUsedRecords((llvm::sampleprofutil::SampleCoverageTracker *)(result + 127), result[133], result[141]);
    v5 = llvm::sampleprofutil::SampleCoverageTracker::countBodyRecords((uint64_t)(v3 + 127), (uint64_t)v3[133], (uint64_t)v3[141]);
    result = (const llvm::sampleprof::FunctionSamples **)llvm::sampleprofutil::SampleCoverageTracker::computeCoverage((llvm::sampleprofutil::SampleCoverageTracker *)(v3 + 127), v4, v5);
    if (result < dword_1ED837958)
    {
      v6 = (int)result;
      v7 = **a2;
      Subprogram = llvm::Function::getSubprogram((llvm::Function *)a2);
      v9 = sub_1C53AE5A0(Subprogram);
      v11 = v10;
      v12 = sub_1C62005F0((llvm::Function *)a2);
      v33 = 264;
      LODWORD(v32[0]) = v4;
      v30[0] = (uint64_t)" of ";
      v31 = 259;
      sub_1C4825FE4(v32, v30, (uint64_t)v34);
      v29 = 264;
      LODWORD(v28[0]) = v5;
      sub_1C4825FE4(v34, v28, (uint64_t)v35);
      v26[0] = (uint64_t)" available profile records (";
      v27 = 259;
      sub_1C4825FE4(v35, v26, (uint64_t)v36);
      v25 = 264;
      LODWORD(v24[0]) = v6;
      sub_1C4825FE4(v36, v24, (uint64_t)v37);
      v22[0] = (uint64_t)"%) were applied";
      v23 = 259;
      sub_1C4825FE4(v37, v22, (uint64_t)v38);
      v40 = 8;
      v41 = 1;
      v39 = &unk_1E814E700;
      v42 = v9;
      v43 = v11;
      v44 = v12;
      v45 = v38;
      result = (const llvm::sampleprof::FunctionSamples **)llvm::LLVMContext::diagnose(v7, (const llvm::DiagnosticInfo *)&v39);
    }
  }
  if (dword_1ED837A18)
  {
    v21 = v3[130];
    v20 = llvm::sampleprofutil::SampleCoverageTracker::countBodySamples((uint64_t)(v3 + 127), v3[133], (uint64_t)v3[141]);
    result = (const llvm::sampleprof::FunctionSamples **)llvm::sampleprofutil::SampleCoverageTracker::computeCoverage((llvm::sampleprofutil::SampleCoverageTracker *)(v3 + 127), (int)v21, v20);
    if (result < dword_1ED837A18)
    {
      v13 = (int)result;
      v14 = **a2;
      v15 = llvm::Function::getSubprogram((llvm::Function *)a2);
      v16 = sub_1C53AE5A0(v15);
      v18 = v17;
      v19 = sub_1C62005F0((llvm::Function *)a2);
      v33 = 268;
      v32[0] = (uint64_t)&v21;
      v30[0] = (uint64_t)" of ";
      v31 = 259;
      sub_1C4825FE4(v32, v30, (uint64_t)v34);
      v29 = 268;
      v28[0] = (uint64_t)&v20;
      sub_1C4825FE4(v34, v28, (uint64_t)v35);
      v26[0] = (uint64_t)" available profile samples (";
      v27 = 259;
      sub_1C4825FE4(v35, v26, (uint64_t)v36);
      v25 = 264;
      LODWORD(v24[0]) = v13;
      sub_1C4825FE4(v36, v24, (uint64_t)v37);
      v22[0] = (uint64_t)"%) were applied";
      v23 = 259;
      sub_1C4825FE4(v37, v22, (uint64_t)v38);
      v40 = 8;
      v41 = 1;
      v39 = &unk_1E814E700;
      v42 = v16;
      v43 = v18;
      v44 = v19;
      v45 = v38;
      return (const llvm::sampleprof::FunctionSamples **)llvm::LLVMContext::diagnose(v14, (const llvm::DiagnosticInfo *)&v39);
    }
  }
  return result;
}

_QWORD *sub_1C62A3414(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;

  v4 = sub_1C62A350C(a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v12 = v11[1];
      if (v12 == v6)
      {
        if (sub_1C62A37D8((uint64_t)(v11 + 2), a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(_QWORD *)&v5)
            v12 %= *(_QWORD *)&v5;
        }
        else
        {
          v12 &= *(_QWORD *)&v5 - 1;
        }
        if (v12 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t sub_1C62A350C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 32))
    return sub_1C62A3534(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 16) + 24 * *(_QWORD *)(a1 + 24));
  else
    return llvm::hash_value(*(_QWORD **)a1, *(_QWORD *)(a1 + 8));
}

unint64_t sub_1C62A3534(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t i;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13[7];
  _QWORD v14[8];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = sub_1C4D9B584();
  if (a1 == a2)
  {
    v7 = 0;
    return sub_1C49CE808(v14, v7, v4);
  }
  else
  {
    for (i = 0; ; ++i)
    {
      v6 = sub_1C62A36AC(a1, (int *)(a1 + 16), (int *)(a1 + 20));
      if (i > 7)
        break;
      v7 = i * 8 + 8;
      v14[i] = v6;
      a1 += 24;
      if (a1 == a2)
        return sub_1C49CE808(v14, v7, v4);
    }
    sub_1C4E378E0(v14, v4, v13);
    v9 = 64;
LABEL_9:
    if (a1 != a2)
    {
      v10 = 0;
      do
      {
        v11 = sub_1C62A36AC(a1, (int *)(a1 + 16), (int *)(a1 + 20));
        if (v10 > 7)
        {
          sub_1C4E37A08(v13, v14);
          v9 += 64;
          goto LABEL_9;
        }
        v12 = v10 * 8 + 8;
        v14[v10] = v11;
        a1 += 24;
        ++v10;
      }
      while (a1 != a2);
      if ((v12 & 0x7FFFFFFFFFFFFFB8) != 0)
        sub_1C4E37E60(v14, (_BYTE *)v14 + v12, &v15);
      sub_1C4E37A08(v13, v14);
      v9 += v12;
    }
    return sub_1C4E37DC8(v13, v9);
  }
}

unint64_t sub_1C62A36AC(uint64_t a1, int *a2, int *a3)
{
  _OWORD v7[4];
  _OWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  v10 = sub_1C4D9B584();
  return sub_1C62A3754((char *)v7, 0, v7, (char *)v8, a1, a2, a3);
}

unint64_t sub_1C62A3754(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t a5, int *a6, int *a7)
{
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v15 = a2;
  v12 = llvm::hash_value(*(_QWORD **)a5, *(_QWORD *)(a5 + 8));
  v13 = sub_1C4E37644(a1, &v15, a3, (unint64_t)a4, v12);
  return sub_1C517CF98(a1, v15, v13, a4, a6, a7);
}

BOOL sub_1C62A37D8(uint64_t a1, uint64_t a2)
{
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;

  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != *(_QWORD *)(a2 + 8) || v4 && memcmp(*(const void **)a1, *(const void **)a2, v4))
    return 0;
  v5 = *(_QWORD *)(a1 + 24);
  if (v5 != *(_QWORD *)(a2 + 24))
    return 0;
  if (!v5)
    return 1;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = 24 * v5 - 24;
  do
  {
    result = sub_1C62A3890(v6, v7);
    if (!result)
      break;
    v6 += 24;
    v7 += 24;
    v10 = v8;
    v8 -= 24;
  }
  while (v10);
  return result;
}

BOOL sub_1C62A3890(uint64_t a1, uint64_t a2)
{
  size_t v2;

  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
    return 0;
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
    return 0;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != *(_QWORD *)(a2 + 8))
    return 0;
  if (v2)
    return memcmp(*(const void **)a1, *(const void **)a2, v2) == 0;
  return 1;
}

void sub_1C62A38F8(_QWORD *a1, uint64_t ***a2, uint64_t a3)
{
  llvm::Function::setEntryCount(a2, *(_QWORD *)(a1[133] + 64) + 1, 0, a3);
  if (!byte_1ED837B98)
  {
    sub_1C62A3A4C(a1, (uint64_t)a2);
    sub_1C5762948((uint64_t)a1, (uint64_t)a2);
  }
  sub_1C5762CD0((uint64_t)a1, (uint64_t)a2);
}

_QWORD *sub_1C62A3968(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (byte_1ED837B98)
  {
    v5 = result;
    v6 = *(_QWORD *)(a2 + 80);
    if (v6)
      v7 = v6 - 24;
    else
      v7 = 0;
    v10 = v7;
    sub_1C5762850((uint64_t)v11, (_QWORD *(***)(unint64_t *__return_ptr, _QWORD, uint64_t))result, v7);
    v8 = (uint64_t)(v5 + 4);
    result = sub_1C617C470(v8, &v10);
    if (result[1] && (byte_1ED837C58 || (v11[16] & 1) != 0))
    {
      v9 = sub_1C617C470(v8, &v10);
      return (_QWORD *)llvm::Function::setEntryCount((uint64_t ***)a2, v9[1], 0, a3);
    }
  }
  return result;
}

void sub_1C62A3A4C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a1 + 118;
  v5 = operator new();
  *(_QWORD *)v5 = v5 + 16;
  *(_QWORD *)(v5 + 8) = 0x100000000;
  *(_DWORD *)(v5 + 68) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_DWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_BYTE *)(v5 + 64) = 0;
  v6 = a1[118];
  a1[118] = v5;
  if (v6)
  {
    sub_1C4DC4DE4((uint64_t)v4, v6);
    v5 = *v4;
  }
  *(_QWORD *)(v5 + 56) = a2;
  sub_1C53BA620(v5, 0);
  v7 = operator new();
  *(_QWORD *)v7 = v7 + 16;
  *(_QWORD *)(v7 + 8) = 0x400000000;
  *(_DWORD *)(v7 + 92) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = 0;
  *(_DWORD *)(v7 + 64) = 0;
  *(_BYTE *)(v7 + 88) = 0;
  *(_QWORD *)(v7 + 72) = 0;
  *(_QWORD *)(v7 + 80) = a2;
  llvm::DomTreeBuilder::Calculate<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(v7);
  v8 = a1[119];
  a1[119] = v7;
  if (v8)
    sub_1C4DC4E98((uint64_t)(a1 + 119), v8);
  v9 = operator new();
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_DWORD *)(v9 + 16) = 0;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_QWORD *)(v9 + 56) = 0;
  *(_QWORD *)(v9 + 64) = v9 + 80;
  *(_QWORD *)(v9 + 72) = 0x400000000;
  *(_QWORD *)(v9 + 128) = 0;
  *(_QWORD *)(v9 + 112) = v9 + 128;
  *(_QWORD *)(v9 + 120) = 0;
  *(_QWORD *)(v9 + 136) = 1;
  v10 = (_QWORD *)a1[120];
  a1[120] = v9;
  if (v10)
  {
    v11 = llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(v10);
    MEMORY[0x1CAA32FC0](v11, 0x10B0C40D29300ECLL);
    v9 = a1[120];
  }
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze(v9, *v4);
}

_QWORD *sub_1C62A3BBC(_QWORD *result, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;

  if (a2)
  {
    v2 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v3 = v2 | (v2 >> 2) | ((v2 | (v2 >> 2)) >> 4);
    v4 = ((v3 | (v3 >> 8)) >> 16) | v3 | (v3 >> 8);
    if (*((_DWORD *)result + 4) <= v4)
      return sub_1C4DB5B2C((uint64_t)result, v4 + 1);
  }
  return result;
}

uint64_t sub_1C62A3C08(uint64_t result, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Instruction *v17;
  llvm::Instruction *v18;
  _QWORD *v19;
  uint64_t v20[11];

  if (a3 != a4)
  {
    v20[9] = v4;
    v20[10] = v5;
    v8 = (uint64_t *)result;
    v9 = a3 + 24;
    do
    {
      v10 = v9 - 24;
      v11 = *v8;
      v20[0] = *(_QWORD *)(*v8 + 8 * *((_QWORD *)v9 - 3));
      v12 = *(_QWORD *)(v20[0] + 40);
      if (v12 == v20[0] + 40)
      {
        v13 = 0;
      }
      else
      {
        if (v12)
          v14 = v12 - 24;
        else
          v14 = 0;
        if (*(unsigned __int8 *)(v14 + 16) - 29 >= 0xB)
          v13 = 0;
        else
          v13 = v14;
      }
      v15 = *(_QWORD *)(v11 + 8 * *((_QWORD *)v9 - 2));
      if (*((_DWORD *)sub_1C6201558(a2, v20) + 4) == 2)
      {
        v19 = sub_1C6201558(a2, v20);
        if (*(_QWORD *)(v19[1] + 8 * *((unsigned int *)v19 + 4) - 8) == v15 && *(_BYTE *)(v13 + 16) == 33)
          *v9 = 1;
      }
      v16 = *(_QWORD *)(v15 + 40);
      if (v16 == v15 + 40)
      {
        v18 = 0;
      }
      else
      {
        if (v16)
          v17 = (llvm::Instruction *)(v16 - 24);
        else
          v17 = 0;
        if (*((unsigned __int8 *)v17 + 16) - 29 >= 0xB)
          v18 = 0;
        else
          v18 = v17;
      }
      result = llvm::Instruction::getNumSuccessors(v18);
      if (!(_DWORD)result && *((_BYTE *)v18 + 16) == 35)
        *v9 = 1;
      v9 += 32;
    }
    while (v10 + 32 != a4);
  }
  return result;
}

void sub_1C62A3D5C(_QWORD *a1, uint64_t a2, llvm::SmallPtrSetImplBase *a3)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  void *__p;
  _BYTE *v8;

  if (a2)
    v4 = a2 - 24;
  else
    v4 = 0;
  sub_1C618F220(&v6, v4, a3);
  v5 = __p;
  *a1 = v6;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  sub_1C4E19D7C(a1 + 1, v5, v8, (v8 - v5) >> 5);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
}

_OWORD *sub_1C62A3DC8(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  _OWORD *result;
  int v9;
  llvm::Instruction *v10;
  unsigned int v11;
  uint64_t Successor;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v2 = (void **)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  while (2)
  {
    v4 = *(_QWORD *)(v3 - 32);
    if (!*(_BYTE *)(v3 - 8))
    {
      v15 = *(_QWORD *)(v4 + 40);
      if (v15 == v4 + 40)
      {
        v16 = 0;
      }
      else
      {
        if (v15)
          v16 = v15 - 24;
        else
          v16 = 0;
        if (*(unsigned __int8 *)(v16 + 16) - 29 >= 0xB)
          v16 = 0;
      }
      *(_QWORD *)(v3 - 24) = v16;
      *(_QWORD *)(v3 - 16) = 0;
      *(_BYTE *)(v3 - 8) = 1;
    }
    v5 = (_QWORD *)(v4 + 40);
    while (1)
    {
      v6 = (_QWORD *)*v5;
      if ((_QWORD *)*v5 == v5
        || (v6 ? (v7 = (unsigned __int8 *)(v6 - 3)) : (v7 = 0), v7[16] - 29 > 0xA))
      {
        result = 0;
      }
      else
      {
        result = (_OWORD *)llvm::Instruction::getNumSuccessors((llvm::Instruction *)v7);
      }
      v9 = *(_DWORD *)(v3 - 16);
      if (v9 == (_DWORD)result)
        break;
      v10 = *(llvm::Instruction **)(v3 - 24);
      v11 = *(_DWORD *)(v3 - 16);
      *(_DWORD *)(v3 - 16) = v9 + 1;
      Successor = llvm::Instruction::getSuccessor(v10, v11);
      sub_1C4774094(*(llvm::SmallPtrSetImplBase **)a1, Successor);
      if (v13)
      {
        *(_QWORD *)&v19 = Successor;
        BYTE8(v19) = 0;
        BYTE8(v20) = 0;
        v17 = *(_OWORD **)(a1 + 16);
        if ((unint64_t)v17 >= *(_QWORD *)(a1 + 24))
        {
          result = sub_1C4DD17E8(v2, &v19);
        }
        else
        {
          v18 = v20;
          *v17 = v19;
          v17[1] = v18;
          result = v17 + 2;
        }
        *(_QWORD *)(a1 + 16) = result;
        return result;
      }
    }
    v14 = *(_QWORD *)(a1 + 8);
    v3 = *(_QWORD *)(a1 + 16) - 32;
    *(_QWORD *)(a1 + 16) = v3;
    if (v14 != v3)
      continue;
    break;
  }
  return result;
}

size_t **sub_1C62A3F18(size_t **result, uint64_t *a2, int a3, float a4)
{
  uint64_t v5;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;

  v5 = (uint64_t)result;
  *result = 0;
  result[1] = 0;
  result[2] = (size_t *)0x1000000000;
  i = a2;
  if (a3)
  {
    for (i = a2; !*i || *i == -8; ++i)
      ;
  }
  v8 = &a2[a3];
  if (i != v8)
  {
    v9 = *i;
    do
    {
      v10 = (unint64_t)(float)((float)*(unint64_t *)(v9 + 8) * a4);
      result = sub_1C6241FF4(v5, (unsigned __int8 *)(v9 + 16), *(_QWORD *)v9);
      (*result)[1] = v10;
      do
      {
        v11 = i[1];
        ++i;
        v9 = v11;
        if (v11)
          v12 = v9 == -8;
        else
          v12 = 1;
      }
      while (v12);
    }
    while (i != v8);
  }
  return result;
}

uint64_t *sub_1C62A3FC4@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t **i;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  BOOL v10;
  __int128 v11;

  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  v3 = *((unsigned int *)result + 2);
  if ((_DWORD)v3)
  {
    for (i = (uint64_t **)*result; !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    i = (uint64_t **)*result;
  }
  v6 = *result + 8 * v3;
  if (i != (uint64_t **)v6)
  {
    v7 = *i;
    do
    {
      v8 = *v7;
      *(_QWORD *)&v11 = v7 + 2;
      *((_QWORD *)&v11 + 1) = v8;
      result = sub_1C62A4068((uint64_t)a2, &v11, v7 + 1);
      do
      {
        v9 = i[1];
        ++i;
        v7 = v9;
        if (v9)
          v10 = v7 + 1 == 0;
        else
          v10 = 1;
      }
      while (v10);
    }
    while (i != (uint64_t **)v6);
  }
  return result;
}

uint64_t *sub_1C62A4068(uint64_t a1, _OWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v6 = operator new(0x38uLL);
  *((_OWORD *)v6 + 2) = *a2;
  v6[6] = *a3;
  v7 = (uint64_t **)sub_1C5763628(a1, &v13, (uint64_t)(v6 + 4));
  v8 = *v7;
  if (*v7)
  {
    operator delete(v6);
    return v8;
  }
  else
  {
    v10 = v13;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v10;
    *v7 = v6;
    v11 = **(_QWORD **)a1;
    v12 = v6;
    if (v11)
    {
      *(_QWORD *)a1 = v11;
      v12 = *v7;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v12);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

unsigned int *sub_1C62A4128(unsigned int *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 24 * v1;
        do
        {
          *v2 = -1;
          v2 += 3;
          v3 -= 24;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C5763744(result);
    }
  }
  return result;
}

__n128 sub_1C62A417C(const char **a1, __int128 *a2, __n128 *a3, _WORD *a4)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80FC70, "sample-profile-remapping-file", 0x1DuLL);
  sub_1C49C7D74(a1, (uint64_t)&qword_1ED80FC70);
  xmmword_1ED80FCA0 = *a2;
  result = *a3;
  xmmword_1ED80FC90 = (__int128)*a3;
  word_1ED80FC7A = (32 * (*a4 & 3)) | word_1ED80FC7A & 0xFF9F;
  return result;
}

llvm::cl::Option *sub_1C62A4204(llvm::cl::Option *a1, char *a2, _WORD *a3, _WORD *a4, _BYTE **a5, __n128 *a6)
{
  uint64_t v12;

  v12 = sub_1C47AD050((uint64_t)a1, 0, 0);
  *(_BYTE *)(v12 + 128) = 0;
  *(_QWORD *)(v12 + 136) = &off_1E7F9E8D8;
  *(_QWORD *)(v12 + 144) = 0;
  *(_QWORD *)v12 = &unk_1E819E898;
  *(_QWORD *)(v12 + 152) = &off_1E819E9A0;
  *(_QWORD *)(v12 + 160) = &off_1E7F9E8F8;
  *(_QWORD *)(v12 + 184) = v12 + 160;
  sub_1C62A42C0(v12, a2, a3, a4, a5, a6);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 sub_1C62A42C0(uint64_t a1, char *__s, _WORD *a3, _WORD *a4, _BYTE **a5, __n128 *a6)
{
  size_t v12;
  __int16 v13;
  _BYTE *v14;
  __n128 result;

  v12 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)__s, v12);
  v13 = *(_WORD *)(a1 + 10) & 0xFF9F | (32 * (*a3 & 3));
  *(_WORD *)(a1 + 10) = v13;
  *(_WORD *)(a1 + 10) = v13 & 0xFFF8 | *a4 & 7;
  v14 = *a5;
  *(_BYTE *)(a1 + 128) = **a5;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v14;
  result = *a6;
  *(__n128 *)(a1 + 32) = *a6;
  return result;
}

void sub_1C62A4358(_WORD *a1, int **a2, __n128 *a3)
{
  sub_1C47AD050((uint64_t)&ProfileInlineGrowthLimit, 0, 0);
  dword_1ED8330D8 = 0;
  qword_1ED8330E0 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED8330E8 = 0;
  ProfileInlineGrowthLimit = (uint64_t)&unk_1E819E418;
  qword_1ED8330F0 = (uint64_t)&unk_1E819E230;
  qword_1ED8330F8 = (uint64_t)&off_1E7FA9D80;
  qword_1ED833110 = (uint64_t)&qword_1ED8330F8;
  sub_1C576384C(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&ProfileInlineGrowthLimit);
}

void sub_1C62A43F4(_WORD *a1, int **a2, __n128 *a3)
{
  sub_1C47AD050((uint64_t)&SampleHotCallSiteThreshold, 0, 0);
  dword_1ED833318 = 0;
  qword_1ED833320 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED833328 = 0;
  SampleHotCallSiteThreshold = (uint64_t)&unk_1E819E418;
  qword_1ED833330 = (uint64_t)&unk_1E819E230;
  qword_1ED833338 = (uint64_t)&off_1E7FA9D80;
  qword_1ED833350 = (uint64_t)&qword_1ED833338;
  sub_1C57638D0(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&SampleHotCallSiteThreshold);
}

void sub_1C62A4490(_WORD *a1, int **a2, __n128 *a3)
{
  sub_1C47AD050((uint64_t)&SampleColdCallSiteThreshold, 0, 0);
  dword_1ED8333D8 = 0;
  qword_1ED8333E0 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED8333E8 = 0;
  SampleColdCallSiteThreshold = (uint64_t)&unk_1E819E418;
  qword_1ED8333F0 = (uint64_t)&unk_1E819E230;
  qword_1ED8333F8 = (uint64_t)&off_1E7FA9D80;
  qword_1ED833410 = (uint64_t)&qword_1ED8333F8;
  sub_1C5763954(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&SampleColdCallSiteThreshold);
}

void sub_1C62A452C(_WORD *a1, int **a2, __int128 *a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED80F708, 0, 0);
  dword_1ED80F788 = 0;
  qword_1ED80F790 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED80F798 = 0;
  qword_1ED80F708 = (uint64_t)&unk_1E819E3B0;
  qword_1ED80F7A0 = (uint64_t)&unk_1E819E2C0;
  qword_1ED80F7A8 = (uint64_t)&off_1E7F95260;
  qword_1ED80F7C0 = (uint64_t)&qword_1ED80F7A8;
  llvm::cl::Option::setArgStr(v6, "sample-profile-icp-relative-hotness-skip", 0x28uLL);
  word_1ED80F712 = (32 * (*a1 & 3)) | word_1ED80F712 & 0xFF9F;
  dword_1ED80F788 = **a2;
  byte_1ED80F79C = 1;
  dword_1ED80F798 = dword_1ED80F788;
  xmmword_1ED80F728 = *a3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80F708);
}

void sub_1C62A4608(_WORD *a1, _WORD *a2, char **a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80F7C8, 0, 0);
  byte_1ED80F848 = 0;
  qword_1ED80F850 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED80F858 = 0;
  qword_1ED80F7C8 = (uint64_t)&unk_1E819E898;
  qword_1ED80F860 = (uint64_t)&off_1E819E9A0;
  qword_1ED80F868 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED80F880 = (uint64_t)&qword_1ED80F868;
  sub_1C62A46BC(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80F7C8);
}

__n128 sub_1C62A46BC(_WORD *a1, _WORD *a2, char **a3, __n128 *a4)
{
  char *v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80F7C8, "sample-profile-prioritized-inline", 0x21uLL);
  word_1ED80F7D2 = word_1ED80F7D2 & 0xFF9F | (32 * (*a1 & 3));
  word_1ED80F7D2 = word_1ED80F7D2 & 0xFFF8 | *a2 & 7;
  v8 = *a3;
  byte_1ED80F848 = **a3;
  byte_1ED80F859 = 1;
  byte_1ED80F858 = *v8;
  result = *a4;
  xmmword_1ED80F7E8 = (__int128)*a4;
  return result;
}

void sub_1C62A4750(_WORD *a1, _WORD *a2, char **a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED80F888, 0, 0);
  byte_1ED80F908 = 0;
  qword_1ED80F910 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED80F918 = 0;
  qword_1ED80F888 = (uint64_t)&unk_1E819E898;
  qword_1ED80F920 = (uint64_t)&off_1E819E9A0;
  qword_1ED80F928 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED80F940 = (uint64_t)&qword_1ED80F928;
  sub_1C62A4804(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80F888);
}

__n128 sub_1C62A4804(_WORD *a1, _WORD *a2, char **a3, __n128 *a4)
{
  char *v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80F888, "sample-profile-use-preinliner", 0x1DuLL);
  word_1ED80F892 = word_1ED80F892 & 0xFF9F | (32 * (*a1 & 3));
  word_1ED80F892 = word_1ED80F892 & 0xFFF8 | *a2 & 7;
  v8 = *a3;
  byte_1ED80F908 = **a3;
  byte_1ED80F919 = 1;
  byte_1ED80F918 = *v8;
  result = *a4;
  xmmword_1ED80F8A8 = (__int128)*a4;
  return result;
}

__n128 sub_1C62A4898(const char **a1, __int128 *a2, __n128 *a3, _WORD *a4)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80FD58, "sample-profile-inline-replay", 0x1CuLL);
  sub_1C49C7D74(a1, (uint64_t)&qword_1ED80FD58);
  xmmword_1ED80FD88 = *a2;
  result = *a3;
  xmmword_1ED80FD78 = (__int128)*a3;
  word_1ED80FD62 = (32 * (*a4 & 3)) | word_1ED80FD62 & 0xFF9F;
  return result;
}

void sub_1C62A4920(int **a1, uint64_t *a2, __n128 *a3, _WORD *a4)
{
  sub_1C47AD050((uint64_t)&qword_1EF8F3318, 0, 0);
  dword_1EF8F3398 = 0;
  qword_1EF8F33A0 = (uint64_t)&unk_1E817AA68;
  *(_QWORD *)&dword_1EF8F33A8 = 0;
  qword_1EF8F3318 = (uint64_t)&unk_1E817A9B0;
  qword_1EF8F33B0 = (uint64_t)&unk_1E817AA18;
  unk_1EF8F33B8 = &qword_1EF8F3318;
  qword_1EF8F33C0 = (uint64_t)&unk_1EF8F33D0;
  qword_1EF8F33C8 = 0x800000000;
  qword_1EF8F3550 = (uint64_t)&unk_1E817AC98;
  qword_1EF8F3568 = (uint64_t)&qword_1EF8F3550;
  sub_1C57639D8(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F3318);
}

void sub_1C62A49E8(int **a1, uint64_t *a2, __n128 *a3, _WORD *a4)
{
  sub_1C47AD050((uint64_t)&qword_1EF8F3570, 0, 0);
  dword_1EF8F35F0 = 0;
  qword_1EF8F35F8 = (uint64_t)&unk_1E817AB60;
  *(_QWORD *)&dword_1EF8F3600 = 0;
  qword_1EF8F3570 = (uint64_t)&unk_1E817AAA8;
  qword_1EF8F3608 = (uint64_t)&unk_1E817AB10;
  unk_1EF8F3610 = &qword_1EF8F3570;
  qword_1EF8F3618 = (uint64_t)&unk_1EF8F3628;
  qword_1EF8F3620 = 0x800000000;
  qword_1EF8F37A8 = (uint64_t)&unk_1E817ACE0;
  qword_1EF8F37C0 = (uint64_t)&qword_1EF8F37A8;
  sub_1C5763A74(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F3570);
}

void sub_1C62A4AB0(int **a1, uint64_t *a2, __n128 *a3, _WORD *a4)
{
  sub_1C47AD050((uint64_t)&qword_1EF8F37C8, 0, 0);
  dword_1EF8F3848 = 0;
  qword_1EF8F3850 = (uint64_t)&unk_1E817AC58;
  *(_QWORD *)&dword_1EF8F3858 = 0;
  qword_1EF8F37C8 = (uint64_t)&unk_1E817ABA0;
  qword_1EF8F3860 = (uint64_t)&unk_1E817AC08;
  unk_1EF8F3868 = &qword_1EF8F37C8;
  qword_1EF8F3870 = (uint64_t)algn_1EF8F3880;
  qword_1EF8F3878 = 0x800000000;
  qword_1EF8F3A00 = (uint64_t)&unk_1E817AD28;
  qword_1EF8F3A18 = (uint64_t)&qword_1EF8F3A00;
  sub_1C5763B10(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F37C8);
}

void llvm::PseudoProbeVerifier::runAfterPass(llvm::PseudoProbeVerifier *this, const llvm::Function *a2)
{
  _BOOL8 shouldVerifyFunction;
  _QWORD *i;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10[2];
  void *__p[2];
  int v12;

  shouldVerifyFunction = llvm::PseudoProbeVerifier::shouldVerifyFunction(this, a2);
  if (shouldVerifyFunction)
  {
    *(_OWORD *)v10 = 0u;
    *(_OWORD *)__p = 0u;
    v12 = 1065353216;
    for (i = (_QWORD *)*((_QWORD *)a2 + 10); i != (_QWORD *)((char *)a2 + 72); i = (_QWORD *)i[1])
    {
      if (i)
        v6 = (uint64_t)(i - 3);
      else
        v6 = 0;
      llvm::PseudoProbeVerifier::collectProbeFactors(shouldVerifyFunction, v6, (uint64_t)v10);
    }
    llvm::PseudoProbeVerifier::verifyProbeFactors((uint64_t)this, (uint64_t ***)a2, (uint64_t)v10);
    v7 = __p[0];
    if (__p[0])
    {
      do
      {
        v8 = (_QWORD *)*v7;
        operator delete(v7);
        v7 = v8;
      }
      while (v8);
    }
    v9 = v10[0];
    v10[0] = 0;
    if (v9)
      operator delete(v9);
  }
}

void llvm::PseudoProbeVerifier::collectProbeFactors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  float v8;
  float *v9;
  __int128 v10;
  _DWORD v11[4];
  char v12;

  v3 = a2 + 40;
  v4 = *(_QWORD *)(a2 + 48);
  if (v4 != a2 + 40)
  {
    do
    {
      if (v4)
        v6 = (uint64_t *)(v4 - 24);
      else
        v6 = 0;
      llvm::extractProbe((llvm *)v6, (uint64_t)v11);
      if (v12)
      {
        v7 = sub_1C5765450(v6[6]);
        v8 = *(float *)&v11[3];
        *(_QWORD *)&v10 = v11[0];
        *((_QWORD *)&v10 + 1) = v7;
        v9 = (float *)sub_1C5766BB0(a3, v11[0], v7, &v10);
        v9[8] = v8 + v9[8];
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v3);
  }
}

uint64_t sub_1C62A4CC4(uint64_t a1, uint64_t a2, uint64_t *a3, _OWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C62A5678(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C62A5714(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_OWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t *llvm::PseudoProbeManager::getDesc(llvm::PseudoProbeManager *this, const llvm::Function *a2)
{
  int *v3;
  size_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  int v11;
  unsigned int v12;
  int v13[4];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = (int *)sub_1C6200B8C(a2);
  v14 = xmmword_1C85F4BB0;
  v15 = 0;
  llvm::MD5::update((int *)&v14, v3, v4);
  llvm::MD5::final((int *)&v14, v13);
  v5 = *(_QWORD *)this;
  v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    v7 = (v6 - 1) & (37 * v13[0]);
    v8 = (uint64_t *)(v5 + 24 * v7);
    v9 = *v8;
    if (*(_QWORD *)v13 == *v8)
      goto LABEL_3;
    v11 = 1;
    while (v9 != -1)
    {
      v12 = v7 + v11++;
      v7 = v12 & (v6 - 1);
      v8 = (uint64_t *)(v5 + 24 * v7);
      v9 = *v8;
      if (*(_QWORD *)v13 == *v8)
        goto LABEL_3;
    }
  }
  v8 = (uint64_t *)(v5 + 24 * v6);
LABEL_3:
  if (v8 == (uint64_t *)(v5 + 24 * v6))
    return 0;
  else
    return v8 + 1;
}

BOOL llvm::PseudoProbeManager::moduleIsProbed(llvm::PseudoProbeManager *this, const llvm::Module *a2)
{
  const char *v3;
  __int16 v4;

  v3 = "llvm.pseudo_probe_desc";
  v4 = 259;
  return llvm::Module::getNamedMetadata((uint64_t)a2, (uint64_t)&v3) != 0;
}

uint64_t *llvm::PseudoProbeManager::profileIsValid(llvm::PseudoProbeManager *this, const llvm::Function *a2, const llvm::sampleprof::FunctionSamples *a3)
{
  uint64_t *result;

  result = llvm::PseudoProbeManager::getDesc(this, a2);
  if (result)
    return (uint64_t *)(result[1] == *((_QWORD *)a3 + 1));
  return result;
}

_DWORD *llvm::SampleProfileProber::computeProbeIdForBlocks(_DWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  float *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;

  v1 = *(_QWORD *)this + 72;
  v2 = *(_QWORD *)(*(_QWORD *)this + 80);
  if (v2 != v1)
  {
    v3 = this;
    v4 = (float *)(this + 10);
    do
    {
      if (v2)
        v5 = v2 - 24;
      else
        v5 = 0;
      v6 = v3[30] + 1;
      v3[30] = v6;
      v7 = v5;
      this = sub_1C4F74D90(v4, v5, &v7);
      this[6] = v6;
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != v1);
  }
  return this;
}

void llvm::SampleProfileProber::computeCFGHash(llvm::SampleProfileProber *this)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  llvm::Instruction *v8;
  int NumSuccessors;
  int v10;
  unsigned int i;
  unint64_t Successor;
  _QWORD *v13;
  unsigned int v14;
  int j;
  unsigned int v16;
  char *v17;
  _BYTE *v18;
  unsigned int v19;
  char *v20;
  _BYTE *v21;
  unint64_t v22;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  v19 = -1;
  v2 = *(_QWORD *)this + 72;
  v3 = *(_QWORD *)(*(_QWORD *)this + 80);
  if (v3 == v2)
  {
    v17 = 0;
    LODWORD(v4) = 0;
    v18 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      if (v3)
        v5 = v3 - 24;
      else
        v5 = 0;
      v6 = *(_QWORD *)(v5 + 40);
      if (v6 == v5 + 40)
      {
        v8 = 0;
      }
      else
      {
        if (v6)
          v7 = (unsigned __int8 *)(v6 - 24);
        else
          v7 = 0;
        if (v7[16] - 29 >= 0xB)
          v8 = 0;
        else
          v8 = (llvm::Instruction *)v7;
      }
      NumSuccessors = llvm::Instruction::getNumSuccessors(v8);
      if (NumSuccessors)
      {
        v10 = NumSuccessors;
        for (i = 0; i != v10; ++i)
        {
          Successor = llvm::Instruction::getSuccessor(v8, i);
          v13 = sub_1C61B81A8((_QWORD *)this + 5, Successor);
          if (v13)
            v14 = *((_DWORD *)v13 + 6);
          else
            v14 = 0;
          for (j = 0; j != 32; j += 8)
          {
            v16 = v14 >> j;
            if ((unint64_t)v4 >= v22)
              v4 = (_BYTE *)sub_1C5766E78((void **)&v20, v16);
            else
              *v4++ = v16;
            v21 = v4;
          }
        }
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
    v17 = v20;
    v18 = v4;
  }
  llvm::JamCRC::update(&v19, v17, v18 - v17);
  *((_QWORD *)this + 4) = (((unint64_t)((_DWORD)v4 - (_DWORD)v17) << 32) | (*((_QWORD *)this + 13) << 48)) & 0xFFFFFFF00000000 | v19;
  if (v17)
    operator delete(v17);
}

void llvm::PseudoProbeUpdatePass::runOnFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ResultImpl;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  const llvm::BasicBlock *v8;
  _QWORD *i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *BlockProfileCount;
  char v13;
  unint64_t v14;
  float v15;
  float *v16;
  uint64_t j;
  const llvm::BasicBlock *v18;
  _QWORD *k;
  uint64_t *v20;
  uint64_t v21;
  float v22;
  uint64_t *v23;
  llvm::Instruction *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  __int128 v29;
  _DWORD v30[4];
  char v31;
  void *v32[2];
  void *__p[2];
  int v34;

  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::BlockFrequencyAnalysis::Key, a2);
  *(_OWORD *)v32 = 0u;
  *(_OWORD *)__p = 0u;
  v34 = 1065353216;
  v5 = a2 + 72;
  v6 = *(_QWORD *)(a2 + 80);
  if (v6 != a2 + 72)
  {
    v7 = (uint64_t **)(ResultImpl + 8);
    do
    {
      if (v6)
        v8 = (const llvm::BasicBlock *)(v6 - 24);
      else
        v8 = 0;
      for (i = (_QWORD *)*((_QWORD *)v8 + 6); i != (_QWORD *)((char *)v8 + 40); i = (_QWORD *)i[1])
      {
        if (i)
          v10 = i - 3;
        else
          v10 = 0;
        llvm::extractProbe((llvm *)v10, (uint64_t)v30);
        if (v31)
        {
          v11 = sub_1C5765450(v10[6]);
          BlockProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount(v7, v8, 0);
          if (v13)
            v14 = (unint64_t)BlockProfileCount;
          else
            v14 = 0;
          v15 = (float)v14;
          *(_QWORD *)&v29 = v30[0];
          *((_QWORD *)&v29 + 1) = v11;
          v16 = (float *)sub_1C5766BB0((uint64_t)v32, v30[0], v11, &v29);
          v16[8] = v16[8] + v15;
        }
      }
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6 != v5);
    for (j = *(_QWORD *)(a2 + 80); j != v5; j = *(_QWORD *)(j + 8))
    {
      if (j)
        v18 = (const llvm::BasicBlock *)(j - 24);
      else
        v18 = 0;
      for (k = (_QWORD *)*((_QWORD *)v18 + 6); k != (_QWORD *)((char *)v18 + 40); k = (_QWORD *)k[1])
      {
        if (k)
          v20 = k - 3;
        else
          v20 = 0;
        llvm::extractProbe((llvm *)v20, (uint64_t)v30);
        if (v31)
        {
          v21 = sub_1C5765450(v20[6]);
          *(_QWORD *)&v29 = v30[0];
          *((_QWORD *)&v29 + 1) = v21;
          v22 = *((float *)sub_1C5766BB0((uint64_t)v32, v30[0], v21, &v29) + 8);
          if (v22 != 0.0)
          {
            v23 = llvm::BlockFrequencyInfo::getBlockProfileCount(v7, v18, 0);
            if ((_BYTE)v24)
              v25 = (unint64_t)v23;
            else
              v25 = 0;
            llvm::setProbeDistributionFactor((llvm *)v20, v24, (float)v25 / v22);
          }
        }
      }
    }
  }
  v26 = __p[0];
  if (__p[0])
  {
    do
    {
      v27 = (_QWORD *)*v26;
      operator delete(v26);
      v26 = v27;
    }
    while (v27);
  }
  v28 = v32[0];
  v32[0] = 0;
  if (v28)
    operator delete(v28);
}

double llvm::PseudoProbeUpdatePass::run@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t ResultImpl;
  double result;

  if (byte_1ED80FEF0)
  {
    v5 = a1 + 24;
    v6 = *(_QWORD *)(a1 + 32);
    if (v6 != a1 + 24)
    {
      while (1)
      {
        v8 = v6 ? v6 - 56 : 0;
        if (!v6 || *(_BYTE *)(v8 + 16) != 3)
          break;
        if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) != 0)
          goto LABEL_15;
LABEL_13:
        v6 = *(_QWORD *)(v6 + 8);
        if (v6 == v5)
          goto LABEL_16;
      }
      if (!*(_BYTE *)(v8 + 16) && *(_QWORD *)(v8 + 72) == v8 + 72 && (*(_BYTE *)(v8 + 34) & 0x80) == 0)
        goto LABEL_13;
LABEL_15:
      ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a2, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, a1);
      llvm::PseudoProbeUpdatePass::runOnFunction(ResultImpl, v8, *(_QWORD *)(ResultImpl + 8));
      goto LABEL_13;
    }
  }
LABEL_16:
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)(a3 + 88) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)&result = 2;
  *(_QWORD *)(a3 + 16) = 2;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_DWORD *)(a3 + 64) = 2;
  return result;
}

void sub_1C62A5400(_WORD *a1, __int128 *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED80FF30, 1, 0);
  qword_1ED80FFB0 = 0;
  unk_1ED80FFB8 = 0;
  qword_1ED80FFC0 = 0;
  unk_1ED80FFC8 = 0;
  qword_1ED80FF30 = (uint64_t)&unk_1E81409D8;
  qword_1ED80FFD0 = 0;
  unk_1ED80FFD8 = 0;
  qword_1ED80FFE0 = (uint64_t)&unk_1E819E970;
  qword_1ED80FFE8 = (uint64_t)&unk_1E81415E0;
  qword_1ED810000 = (uint64_t)&qword_1ED80FFE8;
  llvm::cl::Option::setArgStr(v4, "verify-pseudo-probe-funcs", 0x19uLL);
  word_1ED80FF3A = (32 * (*a1 & 3)) | word_1ED80FF3A & 0xFF9F;
  xmmword_1ED80FF50 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80FF30);
}

uint64_t *sub_1C62A54B8(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  char *v12;
  char *v13;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  i = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == -8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  v11 = (char *)operator new(a3 + 49, (std::align_val_t)8uLL);
  v12 = v11;
  v13 = v11 + 48;
  if (a3)
    memcpy(v11 + 48, a2, a3);
  v13[a3] = 0;
  *(_QWORD *)v12 = a3;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *((_DWORD *)v12 + 10) = 1065353216;
  *i = (uint64_t)v12;
  ++*(_DWORD *)(a1 + 12);
  for (i = (uint64_t *)(*(_QWORD *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i == -8;
  return i;
}

_QWORD *sub_1C62A55B8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  unint64_t v9;

  v3 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = a3 - a2 + 32 * a2;
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = a3 - a2 + 32 * a2;
    if (v4 >= *(_QWORD *)&v3)
      v6 = v4 % *(_QWORD *)&v3;
  }
  else
  {
    v6 = (*(_QWORD *)&v3 - 1) & v4;
  }
  v7 = *(_QWORD **)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  result = (_QWORD *)*v7;
  if (*v7)
  {
    do
    {
      v9 = result[1];
      if (v4 == v9)
      {
        if (result[2] == a2 && result[3] == a3)
          return result;
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(_QWORD *)&v3)
            v9 %= *(_QWORD *)&v3;
        }
        else
        {
          v9 &= *(_QWORD *)&v3 - 1;
        }
        if (v9 != v6)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1C62A5678(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 24 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 24 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C62A5714(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5766DB4(a1, v6);
  v8 = 0;
  sub_1C62A5678(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C62A57C4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = -1;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v11 = 0;
      result = sub_1C62A5678(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *(_OWORD *)(v10 + 1) = *(_OWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t llvm::createIPSCCPPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C57672BC(v1);
}

uint64_t llvm::createFunctionSpecializationPass(llvm *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F7150;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E817C870;
  return result;
}

_QWORD *llvm::StripDeadPrototypesPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)sub_1C576834C(a1);
  if (!(_DWORD)result)
    return llvm::InstCountPass::run(a2);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = a2 + 32;
  *(_QWORD *)(a2 + 8) = a2 + 32;
  *(_QWORD *)(a2 + 16) = 2;
  *(_QWORD *)(a2 + 48) = a2 + 80;
  *(_QWORD *)(a2 + 56) = a2 + 80;
  *(_DWORD *)(a2 + 64) = 2;
  return result;
}

uint64_t llvm::createStripDeadPrototypesPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5768558(v1);
}

uint64_t llvm::createStripSymbolsPass(llvm *this, char a2)
{
  char v3;
  uint64_t v4;

  v3 = (char)this;
  v4 = operator new();
  return sub_1C5768798(v4, v3, a2);
}

uint64_t llvm::createStripNonDebugSymbolsPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5768958(v1);
}

uint64_t llvm::createStripDeadDebugInfoPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5768CF0(v1);
}

_QWORD *llvm::StripSymbolsPass::run@<X0>(llvm *this@<X1>, _BYTE *a2@<X0>, uint64_t a3@<X8>)
{
  llvm::StripDebugInfo(this, this);
  sub_1C5768DB8((uint64_t)this, 0, *a2 == 0);
  return llvm::InstCountPass::run(a3);
}

_QWORD *llvm::StripNonDebugSymbolsPass::run@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1C5768DB8(a2, 1, *a1 == 0);
  return llvm::InstCountPass::run(a3);
}

_QWORD *llvm::StripDebugDeclarePass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  sub_1C5769314(*(uint64_t **)(a1 + 112));
  return llvm::InstCountPass::run(a2);
}

_QWORD *llvm::StripDeadDebugInfoPass::run@<X0>(llvm::Module *a1@<X1>, uint64_t a2@<X8>)
{
  sub_1C5769640(a1);
  return llvm::InstCountPass::run(a2);
}

uint64_t llvm::createWriteThinLTOBitcodePass(llvm *this, llvm::raw_ostream *a2, llvm::raw_ostream *a3)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v9;
  _QWORD *v10;
  _QWORD v11[2];

  v5 = operator new();
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = &unk_1ED810188;
  *(_DWORD *)(v5 + 24) = 4;
  *(_QWORD *)v5 = &off_1E817CE28;
  *(_QWORD *)(v5 + 32) = this;
  *(_QWORD *)(v5 + 40) = a2;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v9 = qword_1ED830BC0[0];
  v7 = atomic_load(&qword_1ED810190);
  if (v7 != -1)
  {
    v11[0] = sub_1C576A720;
    v11[1] = &v9;
    v10 = v11;
    std::__call_once(&qword_1ED810190, &v10, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v5;
}

_QWORD *llvm::ThinLTOBitcodeWriterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, const llvm::Module *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ResultImpl;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  uint64_t v11;
  uint64_t v13;

  ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, (uint64_t)a2);
  v10 = *a1;
  v9 = a1[1];
  v13 = *(_QWORD *)(ResultImpl + 8);
  v11 = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::ModuleSummaryIndexAnalysis::Key, (uint64_t)a2);
  sub_1C576A7CC(v10, v9, (uint64_t)sub_1C576E4AC, (uint64_t)&v13, a2, (_QWORD *)(v11 + 8));
  return llvm::InstCountPass::run(a4);
}

uint64_t sub_1C62A5C7C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C61252B8((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C61B60A0(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_QWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_BYTE *llvm::wholeprogramdevirt::setBeforeReturnValues(_BYTE *result, uint64_t a2, unint64_t a3, int a4, _QWORD *a5, unint64_t *a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v6 = ((a4 + 7) >> 3) + ((a3 + 7) >> 3);
  if (a4 == 1)
    v6 = (a3 >> 3) + 1;
  *a5 = -v6;
  *a6 = a3 & 7;
  if (a2)
  {
    v9 = (uint64_t)result;
    v10 = 32 * a2;
    v11 = ((a4 + 7) >> 3);
    do
    {
      if (a4 == 1)
        result = sub_1C62A5DB4(**(_QWORD **)(v9 + 8), *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8), *(_QWORD *)(v9 + 16), a3);
      else
        result = sub_1C62A5E18(v9, a3, v11);
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
  }
  return result;
}

_BYTE *sub_1C62A5DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  _BYTE *result;
  _BYTE *v7;
  int v8;

  v4 = a4;
  result = (_BYTE *)sub_1C62A6450((unint64_t *)(a1 + 16), (unint64_t)(a4 - 8 * a2) >> 3, 1u);
  v8 = 1 << (v4 & 7);
  if (a3)
    *result |= v8;
  *v7 |= v8;
  return result;
}

_BYTE *sub_1C62A5E18(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  unint64_t v5;
  _BYTE *result;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(unsigned __int8 *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 16);
  result = (_BYTE *)sub_1C62A6450((unint64_t *)(**(_QWORD **)(a1 + 8) + 16), (unint64_t)(a2 - 8 * *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8)) >> 3, a3);
  if (v4)
  {
    if (a3)
    {
      v8 = 0;
      do
      {
        *result++ = v5 >> v8;
        *v7++ = -1;
        v8 += 8;
      }
      while (8 * a3 != v8);
    }
  }
  else if (a3)
  {
    v9 = 0;
    v10 = a3 - 1;
    do
    {
      result[v10] = v5 >> v9;
      v7[v10--] = -1;
      v9 += 8;
    }
    while (v10 != -1);
  }
  return result;
}

_BYTE *llvm::wholeprogramdevirt::setAfterReturnValues(_BYTE *result, uint64_t a2, unint64_t a3, int a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v6 = a3 + 7;
  if (a4 == 1)
    v6 = a3;
  *a5 = v6 >> 3;
  *a6 = a3 & 7;
  if (a2)
  {
    v9 = (uint64_t)result;
    v10 = 32 * a2;
    v11 = ((a4 + 7) >> 3);
    do
    {
      if (a4 == 1)
        result = sub_1C62A5F50(**(_QWORD **)(v9 + 8), *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8), *(_QWORD *)(v9 + 16), a3);
      else
        result = sub_1C62A5FC0(v9, a3, v11);
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
  }
  return result;
}

_BYTE *sub_1C62A5F50(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char v4;
  _BYTE *result;
  _BYTE *v7;
  int v8;

  v4 = a4;
  result = (_BYTE *)sub_1C62A6450((unint64_t *)(a1 + 64), (a2 + (a4 >> 3) - *(_QWORD *)(a1 + 8)) & 0x1FFFFFFFFFFFFFFFLL, 1u);
  v8 = 1 << (v4 & 7);
  if (a3)
    *result |= v8;
  *v7 |= v8;
  return result;
}

_BYTE *sub_1C62A5FC0(uint64_t a1, unint64_t a2, unsigned int a3)
{
  int v4;
  unint64_t v5;
  _BYTE *result;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(unsigned __int8 *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 16);
  result = (_BYTE *)sub_1C62A6450((unint64_t *)(**(_QWORD **)(a1 + 8) + 64), (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8) + (a2 >> 3)) & 0x1FFFFFFFFFFFFFFFLL, a3);
  if (v4)
  {
    if (a3)
    {
      v8 = 0;
      v9 = a3 - 1;
      do
      {
        result[v9] = v5 >> v8;
        v7[v9--] = -1;
        v8 += 8;
      }
      while (v9 != -1);
    }
  }
  else if (a3)
  {
    v10 = 0;
    do
    {
      *result++ = v5 >> v10;
      *v7++ = -1;
      v10 += 8;
    }
    while (8 * a3 != v10);
  }
  return result;
}

double llvm::WholeProgramDevirtPass::run@<D0>(uint64_t a1@<X0>, llvm::LLVMContext **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char v8;
  uint64_t v9[40];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, (uint64_t)a2)+ 8);
  v12 = v11;
  v10 = v11;
  if (*(_BYTE *)(a1 + 16))
  {
    if (sub_1C576E9FC(a2, (uint64_t)sub_1C577A7C0, (uint64_t)&v12, (uint64_t)sub_1C577A7E8, (uint64_t)&v11, (uint64_t)sub_1C577A810, (uint64_t)&v10))
    {
LABEL_3:
      llvm::InstCountPass::run(a4);
      return result;
    }
  }
  else
  {
    sub_1C576F228((uint64_t)v9, a2, (uint64_t)sub_1C577A7C0, (uint64_t)&v12, (uint64_t)sub_1C577A7E8, (uint64_t)&v11, (uint64_t)sub_1C577A810, (uint64_t)&v10, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    v8 = sub_1C576F48C(v9);
    sub_1C5772F10((uint64_t)v9);
    if ((v8 & 1) == 0)
      goto LABEL_3;
  }
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_QWORD *)(a4 + 88) = 0;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)&result = 2;
  *(_QWORD *)(a4 + 16) = 2;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_DWORD *)(a4 + 64) = 2;
  return result;
}

_QWORD *sub_1C62A618C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E817CF50;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &off_1E817CFB8;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

_QWORD *sub_1C62A620C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817CFB8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C62A624C(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v12 = 0;
  v8 = sub_1C6159B48(a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v12);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C62A62C4(v11);
}

uint64_t sub_1C62A62C4(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C62A62DC(_QWORD *a1)
{
  sub_1C62A618C(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C62A6300(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C62A630C(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C62A631C(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_3:
    v4 = &off_1E817D008;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_3;
  }
  return result;
}

_QWORD *sub_1C62A6388(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C62A6390(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817CFB8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62A63E0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C62A63E8(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C62A63FC(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C62A6410(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C62A6424(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

uint64_t sub_1C62A6450(unint64_t *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = a1[1] - *a1;
  v6 = a2 + a3;
  if (v6 > v5)
  {
    sub_1C50429D8(a1, v6 - v5);
    v7 = a1[3];
    v8 = a1[4] - v7;
    if (v6 <= v8)
    {
      if (v6 < v8)
        a1[4] = v7 + v6;
    }
    else
    {
      sub_1C50429D8(a1 + 3, v6 - v8);
    }
  }
  return *a1 + a2;
}

uint64_t *sub_1C62A64CC(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 96) = 0;
      *(_QWORD *)(v6 - 88) = 0;
      *(_QWORD *)(v6 - 80) = 0;
      *(_OWORD *)(v6 - 96) = *(_OWORD *)(v2 + v5 - 96);
      *(_QWORD *)(v6 - 80) = *(_QWORD *)(v2 + v5 - 80);
      *(_QWORD *)(v7 - 88) = 0;
      *(_QWORD *)(v7 - 80) = 0;
      *(_QWORD *)(v7 - 96) = 0;
      v8 = *(_OWORD *)(v2 + v5 - 40);
      v9 = *(_OWORD *)(v2 + v5 - 24);
      v10 = *(_QWORD *)(v2 + v5 - 8);
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(_QWORD *)(v6 - 8) = v10;
      *(_OWORD *)(v6 - 24) = v9;
      *(_OWORD *)(v6 - 40) = v8;
      *(_OWORD *)(v6 - 72) = *(_OWORD *)(v2 + v5 - 72);
      v5 -= 96;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v11 = *result;
  *result = v4;
  a2[1] = v11;
  v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

char *sub_1C62A6580(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  char *result;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 104);
  if (!v3)
  {
    v3 = operator new();
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    v5 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v3;
    if (v5)
    {
      v8 = sub_1C61A8534(v5);
      MEMORY[0x1CAA32FC0](v8, 0x30C4045335465);
      v3 = *(_QWORD *)(a1 + 104);
    }
  }
  v6 = *(uint64_t **)(v3 + 8);
  if ((unint64_t)v6 >= *(_QWORD *)(v3 + 16))
  {
    result = sub_1C57753FC((char **)v3, a2);
  }
  else
  {
    *v6 = a2;
    result = (char *)(v6 + 1);
  }
  *(_QWORD *)(v3 + 8) = result;
  return result;
}

uint64_t sub_1C62A6634(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 112;
    sub_1C6180D1C(i - 48);
    sub_1C6180D1C(i - 96);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t **sub_1C62A6694(uint64_t a1, unint64_t a2, unint64_t a3, _OWORD *a4)
{
  uint64_t **result;
  uint64_t **v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  result = (uint64_t **)sub_1C57767F8(a1, &v12, a2, a3);
  if (!*result)
  {
    v7 = result;
    v8 = operator new(0x30uLL);
    v8[2] = *a4;
    v9 = v12;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v9;
    *v7 = (uint64_t *)v8;
    v10 = **(_QWORD **)a1;
    if (v10)
    {
      *(_QWORD *)a1 = v10;
      v11 = *v7;
    }
    else
    {
      v11 = (uint64_t *)v8;
    }
    result = (uint64_t **)sub_1C4768E74(*(uint64_t **)(a1 + 8), v11);
    ++*(_QWORD *)(a1 + 16);
  }
  return result;
}

_QWORD *sub_1C62A6734(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  unint64_t v15;
  unint64_t v16;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = result;
    do
    {
      if (a2 == a3)
      {
LABEL_12:
        v6 = v4;
      }
      else
      {
        v7 = (unint64_t *)v4[4];
        v8 = a2 + 1;
        while (v7 != (unint64_t *)v4[5])
        {
          v9 = *v7;
          v10 = *(v8 - 1);
          if (*v7 < v10)
            break;
          ++v7;
          if (v10 < v9 || v8++ == a3)
            goto LABEL_12;
        }
        ++v4;
      }
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    if (v6 != result)
    {
      v13 = v6[4];
      v12 = v6[5];
      if (v13 == v12)
      {
        return v6;
      }
      else
      {
        for (i = v13 + 8; a2 != a3; i += 8)
        {
          v15 = *a2;
          v16 = *(_QWORD *)(i - 8);
          if (*a2 < v16)
            break;
          ++a2;
          if (v16 < v15 || i == v12)
            return v6;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C62A67E4(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_1C614ECAC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C62A6858(a1, a2, v8);
    v7 = *a2;
    v5[3] = 0;
    v5[2] = 0;
    *v5 = v7;
    v5[1] = v5 + 2;
  }
  return v5;
}

_QWORD *sub_1C62A6858(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C57791B0(a1, v6);
  v8 = 0;
  sub_1C614ECAC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_1C62A6908(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  *(_QWORD *)(a1 + 8) = 0;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD **)a1;
    v7 = 32 * v5;
    do
    {
      *v6 = -4096;
      v6 += 4;
      v7 -= 32;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    v8 = a2 + 2;
    do
    {
      v9 = *(v8 - 2);
      if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v16 = 0;
        sub_1C614ECAC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v16);
        v11 = v16;
        *v16 = *(v8 - 2);
        v11[1] = *(v8 - 1);
        v12 = (_QWORD *)*v8;
        v11[2] = *v8;
        v13 = v11 + 2;
        v14 = v8[1];
        v11[3] = v14;
        if (v14)
        {
          v15 = 0;
          v12[2] = v13;
          *(v8 - 1) = v8;
          *v8 = 0;
          v8[1] = 0;
        }
        else
        {
          v11[1] = v13;
          v15 = (_QWORD *)*v8;
        }
        ++*(_DWORD *)(a1 + 8);
        sub_1C6143384(v15);
      }
      v10 = v8 + 2;
      v8 += 4;
    }
    while (v10 != a3);
  }
}

void sub_1C62A69FC(__int128 *a1, uint64_t *a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED8105C0, 0, 0);
  dword_1ED810640 = 0;
  qword_1ED810648 = (uint64_t)&unk_1E817B270;
  unk_1ED810650 = 0;
  qword_1ED8105C0 = (uint64_t)&unk_1E817B1B8;
  qword_1ED810658 = (uint64_t)&unk_1E817B220;
  unk_1ED810660 = &qword_1ED8105C0;
  qword_1ED810668 = (uint64_t)&unk_1ED810678;
  qword_1ED810670 = 0x800000000;
  qword_1ED8107F8 = (uint64_t)&unk_1E817B3D8;
  qword_1ED810810 = (uint64_t)&qword_1ED8107F8;
  sub_1C577A5C0(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED8105C0);
}

void sub_1C62A6AB4(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED810198, 0, 0);
  dword_1ED810218 = 0;
  qword_1ED810220 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED810228 = 0;
  qword_1ED810198 = (uint64_t)&unk_1E819E3B0;
  qword_1ED810230 = (uint64_t)&unk_1E819E2C0;
  qword_1ED810238 = (uint64_t)&off_1E7F95260;
  qword_1ED810250 = (uint64_t)&qword_1ED810238;
  sub_1C62A6B68(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED810198);
}

__n128 sub_1C62A6B68(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED810198, "wholeprogramdevirt-branch-funnel-threshold", 0x2AuLL);
  word_1ED8101A2 = word_1ED8101A2 & 0xFF9F | (32 * (*a1 & 3));
  dword_1ED810218 = **a2;
  byte_1ED81022C = 1;
  dword_1ED810228 = dword_1ED810218;
  word_1ED8101A2 = word_1ED8101A2 & 0xFFF8 | *a3 & 7;
  result = *a4;
  xmmword_1ED8101B8 = (__int128)*a4;
  return result;
}

void sub_1C62A6BF8(_WORD *a1, char **a2, _WORD *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED810258, 0, 0);
  byte_1ED8102D8 = 0;
  qword_1ED8102E0 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED8102E8 = 0;
  qword_1ED810258 = (uint64_t)&unk_1E819E898;
  qword_1ED8102F0 = (uint64_t)&off_1E819E9A0;
  qword_1ED8102F8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED810310 = (uint64_t)&qword_1ED8102F8;
  sub_1C62A6CAC(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED810258);
}

__n128 sub_1C62A6CAC(_WORD *a1, char **a2, _WORD *a3, __n128 *a4)
{
  char *v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED810258, "wholeprogramdevirt-print-index-based", 0x24uLL);
  word_1ED810262 = word_1ED810262 & 0xFF9F | (32 * (*a1 & 3));
  v8 = *a2;
  byte_1ED8102D8 = **a2;
  byte_1ED8102E9 = 1;
  byte_1ED8102E8 = *v8;
  word_1ED810262 = word_1ED810262 & 0xFFF8 | *a3 & 7;
  result = *a4;
  xmmword_1ED810278 = (__int128)*a4;
  return result;
}

void sub_1C62A6D40(__n128 *a1, _WORD *a2, _WORD *a3, _WORD *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED810318, 1, 0);
  qword_1ED810398 = 0;
  unk_1ED8103A0 = 0;
  qword_1ED8103A8 = 0;
  unk_1ED8103B0 = 0;
  qword_1ED810318 = (uint64_t)&unk_1E81409D8;
  qword_1ED8103B8 = 0;
  unk_1ED8103C0 = 0;
  qword_1ED8103C8 = (uint64_t)&unk_1E819E970;
  qword_1ED8103D0 = (uint64_t)&unk_1E81415E0;
  qword_1ED8103E8 = (uint64_t)&qword_1ED8103D0;
  sub_1C62A6DEC(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED810318);
}

__n128 sub_1C62A6DEC(__n128 *a1, _WORD *a2, _WORD *a3, _WORD *a4)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED810318, "wholeprogramdevirt-skip", 0x17uLL);
  result = *a1;
  xmmword_1ED810338 = (__int128)*a1;
  word_1ED810322 = word_1ED810322 & 0xFF9F | (32 * (*a2 & 3));
  word_1ED810322 = word_1ED810322 & 0xFFF8 | *a3 & 7;
  word_1ED810322 |= (*a4 & 0x1F) << 9;
  return result;
}

void sub_1C62A6E74(_WORD *a1, _WORD *a2, __int128 *a3, uint64_t a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED810818, 0, 0);
  dword_1ED810898 = 0;
  qword_1ED8108A0 = (uint64_t)&off_1E817D008;
  unk_1ED8108A8 = 0;
  qword_1ED810818 = (uint64_t)off_1E817CF50;
  qword_1ED8108B0 = (uint64_t)&off_1E817CFB8;
  qword_1ED8108B8 = (uint64_t)&qword_1ED810818;
  qword_1ED8108C0 = (uint64_t)&unk_1ED8108D0;
  qword_1ED8108C8 = 0x800000000;
  qword_1ED810A50 = (uint64_t)&off_1E817D128;
  qword_1ED810A68 = (uint64_t)&qword_1ED810A50;
  sub_1C62A6F2C(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED810818);
}

void sub_1C62A6F2C(_WORD *a1, _WORD *a2, __int128 *a3, uint64_t a4)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED810818, "wholeprogramdevirt-check", 0x18uLL);
  word_1ED810822 = word_1ED810822 & 0xFF9F | (32 * (*a1 & 3));
  word_1ED810822 = word_1ED810822 & 0xFFF8 | *a2 & 7;
  xmmword_1ED810838 = *a3;
  sub_1C577A708(*(_QWORD *)a4, *(_DWORD *)(a4 + 8));
}

void sub_1C62A6FB0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62A6FC4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E817D128;
  return result;
}

void sub_1C62A6FE8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E817D128;
}

void sub_1C62A7004(unsigned __int8 *a1, size_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  _QWORD v11[5];
  int v12;
  char v13;

  v11[0] = a1;
  v11[1] = a2;
  v11[2] = a4;
  v11[3] = a5;
  v11[4] = &off_1E817D008;
  v13 = 1;
  v12 = a3;
  v7 = sub_1C577A74C((unint64_t)v11);
  v8 = qword_1ED8108C0 + 48 * qword_1ED8108C8;
  v9 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 32) = &off_1E817D028;
  v10 = *(_BYTE *)(v7 + 44);
  *(_DWORD *)(v8 + 40) = *(_DWORD *)(v7 + 40);
  *(_BYTE *)(v8 + 44) = v10;
  *(_QWORD *)(v8 + 32) = &off_1E817D008;
  LODWORD(qword_1ED8108C8) = qword_1ED8108C8 + 1;
  llvm::cl::AddLiteralOption(qword_1ED8108B8, a1, a2);
}

void sub_1C62A70B8(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1ED8108C0, a1, 48, &v8);
  v2 = (_OWORD *)qword_1ED8108C0;
  if ((_DWORD)qword_1ED8108C8)
  {
    v3 = qword_1ED8108C0 + 48 * qword_1ED8108C8;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E817D028;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E817D008;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1ED8108C0;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1ED8108D0)
    free(v2);
  qword_1ED8108C0 = (uint64_t)v1;
  HIDWORD(qword_1ED8108C8) = v7;
}

void llvm::initializeAGXInstCombinePass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED810A78);
  if (v2 != -1)
  {
    v5[0] = sub_1C577C2D0;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED810A78, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t llvm::createAGXInstCombinePass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C577C3A4(v1);
}

llvm::UndefValue *sub_1C62A7210(llvm::ConstantExpr *a1, llvm::Constant *a2, llvm::Type *a3)
{
  int v3;
  int v5;
  uint64_t v6;
  llvm::ConstantFP *v7;
  llvm::Type *v8;
  llvm::Value **BinOpIdentity;
  unint64_t v10;
  llvm::Type *i;
  llvm::UndefValue *AggregateElement;
  void *v13;
  llvm::UndefValue *v14;
  llvm::Value **NullValue;
  void *v17;
  uint64_t v18;
  _QWORD v19[17];

  v3 = (int)a3;
  v5 = (int)a1;
  v19[16] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a2;
  v7 = *(llvm::ConstantFP **)(*(_QWORD *)a2 + 24);
  BinOpIdentity = llvm::ConstantExpr::getBinOpIdentity(a1, v7, a3, 0);
  if (!BinOpIdentity)
  {
    if (v3)
    {
      if ((v5 & 0xFFFFFFFE) == 0x16)
        NullValue = llvm::ConstantInt::get(v7, 1, 0);
      else
        NullValue = (llvm::Value **)llvm::ConstantFP::get((llvm::ConstantFP **)v7, v8, 1.0);
    }
    else
    {
      NullValue = llvm::Constant::getNullValue(v7, v8);
    }
    BinOpIdentity = NullValue;
  }
  v10 = *(unsigned int *)(v6 + 32);
  v17 = v19;
  v18 = 0x1000000000;
  sub_1C4848C0C((unsigned int *)&v17, v10, 0);
  if ((_DWORD)v10)
  {
    for (i = 0; i != (llvm::Type *)v10; i = (llvm::Type *)((char *)i + 1))
    {
      AggregateElement = llvm::Constant::getAggregateElement(a2, i);
      if (*((unsigned __int8 *)AggregateElement + 16) - 11 >= 2)
        v13 = AggregateElement;
      else
        v13 = BinOpIdentity;
      *((_QWORD *)v17 + (_QWORD)i) = v13;
    }
  }
  v14 = llvm::ConstantVector::get((llvm::FixedVectorType ***)v17, (llvm::Type *)v18);
  if (v17 != v19)
    free(v17);
  return v14;
}

llvm::StoreInst *sub_1C62A7364(uint64_t a1, llvm::Instruction *a2)
{
  llvm::ConstantInt *v3;
  _DWORD *v4;
  llvm::StoreInst *v5;
  llvm::LLVMContext *v6;
  const llvm::APInt *v7;
  llvm::Value *True;
  llvm::UndefValue *Int1PtrTy;
  llvm::Type *v10;
  llvm::UndefValue *v11;

  v3 = **(llvm::ConstantInt ***)a2;
  v4 = operator new(0x80uLL);
  v4[21] = v4[21] & 0x38000000 | 2;
  v5 = (llvm::StoreInst *)(v4 + 16);
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = v4 + 16;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 7) = v4 + 16;
  True = llvm::ConstantInt::getTrue(v3, v6, v7);
  Int1PtrTy = (llvm::UndefValue *)llvm::Type::getInt1PtrTy(v3, 0);
  v11 = llvm::UndefValue::get(Int1PtrTy, v10);
  return llvm::StoreInst::StoreInst(v5, True, v11, a2);
}

llvm::AnalysisUsage *llvm::InstructionCombiningPass::getAnalysisUsage(llvm::InstructionCombiningPass *this, llvm::AnalysisUsage *a2)
{
  llvm::AnalysisUsage *v3;

  llvm::AnalysisUsage::setPreservesCFG(a2);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::AAResultsWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::AssumptionCacheTracker::ID);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::TargetLibraryInfoWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::TargetTransformInfoWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::DominatorTreeWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::OptimizationRemarkEmitterWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::BasicAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::ProfileSummaryInfoWrapperPass::ID);
  return llvm::LazyBlockFrequencyInfoPass::getLazyBFIAnalysisUsage(a2, v3);
}

llvm::InstructionCombiningPass *llvm::InstructionCombiningPass::InstructionCombiningPass(llvm::InstructionCombiningPass *this)
{
  uint64_t v2;
  int64x2_t v3;
  unint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  _QWORD v9[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::InstructionCombiningPass::ID;
  *((_DWORD *)this + 6) = 2;
  *(_QWORD *)this = &off_1E817D258;
  *((_QWORD *)this + 4) = (char *)this + 48;
  *((_QWORD *)this + 5) = 0x10000000000;
  *((_OWORD *)this + 131) = 0u;
  *((_DWORD *)this + 528) = 0;
  *((_QWORD *)this + 265) = 1;
  v2 = 2128;
  v3 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)((char *)this + v2) = v3;
    v2 += 16;
  }
  while (v2 != 2256);
  *((_QWORD *)this + 282) = (char *)this + 2272;
  *((_QWORD *)this + 283) = 0x1000000000;
  *((_DWORD *)this + 600) = 1000;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v7 = qword_1ED830BC0[0];
  v5 = atomic_load(&qword_1ED810A80);
  if (v5 != -1)
  {
    v9[0] = sub_1C578EB10;
    v9[1] = &v7;
    v8 = v9;
    std::__call_once(&qword_1ED810A80, &v8, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

void sub_1C62A7634(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E817D258;
  sub_1C57906B0((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);
}

void sub_1C62A7664(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E817D258;
  sub_1C57906B0((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C62A76A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::BasicBlock *a6)
{
  _DWORD *v12;
  uint64_t v13;
  llvm::Instruction *v14;
  _QWORD *v15;
  llvm::Instruction *v16;
  uint64_t v17;

  v12 = operator new(0xB0uLL);
  v13 = 0;
  v14 = (llvm::Instruction *)(v12 + 24);
  v12[29] = v12[29] & 0x38000000 | 3;
  do
  {
    v15 = &v12[v13];
    *v15 = 0;
    v15[1] = 0;
    v15[2] = 0;
    v15[3] = v14;
    v13 += 8;
  }
  while (v13 != 24);
  v16 = llvm::Instruction::Instruction(v14, **(llvm::Type ***)(a1 + 16), 5, (llvm::Use *)v12, 3, a6);
  *((_QWORD *)v12 + 20) = 0;
  llvm::InvokeInst::init((uint64_t)v16, a1, a2, a3, a4, 0, 0, v17, 0, 0, a5);
}

llvm::InstructionCombiningPass *llvm::callDefaultCtor<llvm::InstructionCombiningPass>()
{
  llvm::InstructionCombiningPass *v0;

  v0 = (llvm::InstructionCombiningPass *)operator new();
  return llvm::InstructionCombiningPass::InstructionCombiningPass(v0);
}

void sub_1C62A77A0(int **a1, __int128 *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)qword_1ED810B58, 0, 0);
  dword_1ED810BD8 = 0;
  qword_1ED810BE0 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED810BE8 = 0;
  qword_1ED810B58[0] = (uint64_t)&unk_1E819E3B0;
  qword_1ED810BF0 = (uint64_t)&unk_1E819E2C0;
  qword_1ED810BF8 = (uint64_t)&off_1E7F95260;
  qword_1ED810C10 = (uint64_t)&qword_1ED810BF8;
  llvm::cl::Option::setArgStr(v4, "instcombine-max-sink-users", 0x1AuLL);
  dword_1ED810BD8 = **a1;
  byte_1ED810BEC = 1;
  dword_1ED810BE8 = dword_1ED810BD8;
  xmmword_1ED810B78 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED810B58);
}

void sub_1C62A7860(__int128 *a1, int **a2)
{
  uint64_t v4;
  int *v5;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED833760, 0, 0);
  dword_1ED8337E0 = 0;
  qword_1ED8337E8 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED8337F0 = 0;
  qword_1ED833760 = (uint64_t)&unk_1E819E3B0;
  qword_1ED8337F8 = (uint64_t)&unk_1E819E2C0;
  qword_1ED833800 = (uint64_t)&off_1E7F95260;
  qword_1ED833818 = (uint64_t)&qword_1ED833800;
  llvm::cl::Option::setArgStr(v4, "instcombine-max-iterations", 0x1AuLL);
  xmmword_1ED833780 = *a1;
  v5 = *a2;
  dword_1ED8337E0 = **a2;
  byte_1ED8337F4 = 1;
  dword_1ED8337F0 = *v5;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED833760);
}

void sub_1C62A7924(__n128 *a1, int **a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED810C18, 0, 0);
  dword_1ED810C98 = 0;
  qword_1ED810CA0 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED810CA8 = 0;
  qword_1ED810C18 = (uint64_t)&unk_1E819E3B0;
  qword_1ED810CB0 = (uint64_t)&unk_1E819E2C0;
  qword_1ED810CB8 = (uint64_t)&off_1E7F95260;
  qword_1ED810CD0 = (uint64_t)&qword_1ED810CB8;
  sub_1C5790724(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED810C18);
}

void sub_1C62A79C8(int **a1, __int128 *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)qword_1ED810CD8, 0, 0);
  dword_1ED810D58 = 0;
  qword_1ED810D60 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED810D68 = 0;
  qword_1ED810CD8[0] = (uint64_t)&unk_1E819E3B0;
  qword_1ED810D70 = (uint64_t)&unk_1E819E2C0;
  qword_1ED810D78 = (uint64_t)&off_1E7F95260;
  qword_1ED810D90 = (uint64_t)&qword_1ED810D78;
  llvm::cl::Option::setArgStr(v4, "instcombine-maxarray-size", 0x19uLL);
  dword_1ED810D58 = **a1;
  byte_1ED810D6C = 1;
  dword_1ED810D68 = dword_1ED810D58;
  xmmword_1ED810CF8 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED810CD8);
}

void sub_1C62A7A88(_WORD *a1, unsigned __int8 **a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED810D98, 0, 0);
  dword_1ED810E18 = 0;
  qword_1ED810E20 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED810E28 = 0;
  qword_1ED810D98 = (uint64_t)&unk_1E819E3B0;
  qword_1ED810E30 = (uint64_t)&unk_1E819E2C0;
  qword_1ED810E38 = (uint64_t)&off_1E7F95260;
  qword_1ED810E50 = (uint64_t)&qword_1ED810E38;
  llvm::cl::Option::setArgStr(v4, "instcombine-lower-dbg-declare", 0x1DuLL);
  word_1ED810DA2 = (32 * (*a1 & 3)) | word_1ED810DA2 & 0xFF9F;
  dword_1ED810E18 = **a2;
  byte_1ED810E2C = 1;
  dword_1ED810E28 = dword_1ED810E18;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED810D98);
}

BOOL sub_1C62A7B58(uint64_t a1, uint64_t a2)
{
  int v2;
  _QWORD *v3;

  if (*(_BYTE *)(a2 + 16) == 85
    && ((v2 = *(_DWORD *)(a2 + 20), (v2 & 0x40000000) != 0)
      ? (v3 = *(_QWORD **)(a2 - 8))
      : (v3 = (_QWORD *)(a2 - 32 * (v2 & 0x7FFFFFF))),
        *v3 == a1))
  {
    return *(unsigned __int8 *)(v3[4] + 16) < 0x15u;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1C62A7BA4(uint64_t a1, uint64_t a2)
{
  if ((sub_1C57A2C64(a1, a2) & 1) != 0
    || (sub_1C57A2D84(a1 + 16, a2) & 1) != 0
    || (sub_1C57A2EA4(a1 + 32, a2) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return sub_1C57A2FC4(a1 + 48, a2);
  }
}

uint64_t sub_1C62A7C04(uint64_t a1, llvm::Value *a2, llvm::APInt *this, llvm::Type *a4, int a5, int a6)
{
  llvm::ConstantInt **v10;
  int v11;
  uint64_t v12;
  llvm::Value **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const llvm::APInt *v17;
  llvm::Value **v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  llvm::Value **v22;
  unsigned int v24;
  uint64_t v25;
  size_t v26;
  void *v27;
  unsigned int v28;
  char *Name;
  uint64_t v30;
  const char *v31;
  __int16 v32;

  v10 = *(llvm::ConstantInt ***)a2;
  if (a6)
    v11 = 36;
  else
    v11 = 35;
  if (!a5)
  {
    v24 = *((_DWORD *)this + 2);
    if (v24 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(this) != v24)
        goto LABEL_6;
    }
    else if (*(_QWORD *)this)
    {
      goto LABEL_6;
    }
LABEL_14:
    v25 = *(_QWORD *)(a1 + 24);
    v22 = llvm::ConstantInt::get(v10, a4, this);
    v32 = 257;
    v19 = v25;
    v20 = v11;
    v21 = (uint64_t)a2;
    return sub_1C4774B48(v19, v20, v21, (uint64_t)v22, (uint64_t)&Name);
  }
  if (sub_1C535BACC((uint64_t)this))
  {
    LOWORD(v11) = llvm::ICmpInst::getSignedPredicate(v11);
    goto LABEL_14;
  }
LABEL_6:
  v12 = *(_QWORD *)(a1 + 24);
  v13 = llvm::ConstantInt::get(v10, this, this);
  v32 = 773;
  Name = llvm::Value::getName(a2);
  v30 = v14;
  v31 = ".off";
  v15 = sub_1C47733F8(v12, (uint64_t)a2, (uint64_t)v13, (uint64_t)&Name, 0, 0);
  v16 = *((unsigned int *)a4 + 2);
  v28 = v16;
  if (v16 > 0x40)
  {
    v26 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
    v27 = (void *)operator new[]();
    memcpy(v27, *(const void **)a4, v26);
  }
  else
  {
    v27 = *(void **)a4;
  }
  llvm::APInt::operator-=((uint64_t)&v27, (unint64_t **)this);
  LODWORD(v30) = v28;
  Name = (char *)v27;
  v28 = 0;
  v18 = llvm::ConstantInt::get(v10, (llvm::Type *)&Name, v17);
  if (v30 >= 0x41 && Name)
    MEMORY[0x1CAA32F9C](Name, 0x1000C8000313F17);
  if (v28 >= 0x41 && v27)
    MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
  v19 = *(_QWORD *)(a1 + 24);
  v32 = 257;
  v20 = v11;
  v21 = v15;
  v22 = v18;
  return sub_1C4774B48(v19, v20, v21, (uint64_t)v22, (uint64_t)&Name);
}

uint64_t sub_1C62A7E20(uint64_t a1, uint64_t a2, llvm::APInt *a3)
{
  uint64_t v4;
  llvm::APInt *v6;
  const void **v7;
  llvm::APInt *v8;
  unsigned int v9;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = (llvm::APInt *)(a1 + 16);
  v7 = (const void **)(a2 + 16);
  LODWORD(v4) = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(a1 + 24) = v4;
  if (v4 > 0x40)
    llvm::APInt::initSlowCase(v6, v7);
  else
    *(_QWORD *)v6 = *v7;
  v8 = (llvm::APInt *)(a1 + 32);
  v9 = *((_DWORD *)a3 + 2);
  *(_DWORD *)(a1 + 40) = v9;
  if (v9 > 0x40)
    llvm::APInt::initSlowCase(v8, (const void **)a3);
  else
    *(_QWORD *)v8 = *(_QWORD *)a3;
  return a1;
}

uint64_t sub_1C62A7EA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)(a1 + 40) >= 0x41u)
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (v2)
      MEMORY[0x1CAA32F9C](v2, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 24) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  }
  return a1;
}

uint64_t sub_1C62A7F10(uint64_t a1, uint64_t a2)
{
  void (**v2)(void);
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = &off_1E817D340;
  v5 = v4;
  sub_1C57C0284(a2, a1, (uint64_t)v4);
  if (v5 == v4)
  {
    v2 = (void (**)(void))(v4[0] + 32);
    goto LABEL_4;
  }
  if (v5)
  {
    v2 = (void (**)(void))(*v5 + 40);
LABEL_4:
    (*v2)();
  }
  return 0;
}

char *sub_1C62A7FB8(_QWORD *a1, llvm::Instruction *this)
{
  unsigned int v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 **v8;
  llvm::Type *v9;
  unsigned __int8 *v11;
  llvm::Value **v12;
  llvm::Type **v13;
  llvm::Value **v14;
  llvm::UndefValue **v15;
  _BYTE v16[32];
  __int16 v17;
  int v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  v14 = 0;
  v15 = 0;
  v2 = *(_DWORD *)(*((_QWORD *)this - 4) + 36) - 262;
  v4 = 1 << (*(_BYTE *)(*((_QWORD *)this - 4) + 36) - 6);
  if ((v4 & 0x6000000600000) != 0)
    v5 = 15;
  else
    v5 = 17;
  if ((v4 & 0xC000000003) != 0)
    v6 = 13;
  else
    v6 = v5;
  v7 = (v2 < 0x17) & (0x610003u >> v2);
  v8 = (unsigned __int8 **)((char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  if (!sub_1C5808B64(a1, v6, v7, *v8, v8[4], (unsigned __int8 **)this, (unsigned __int8 **)&v15, &v14))
    return 0;
  v12 = v14;
  v11 = (unsigned __int8 *)v15;
  v19[0] = llvm::UndefValue::get(*v15, v9);
  v19[1] = v12;
  v13 = (llvm::Type **)llvm::ConstantStruct::get(*(llvm::ConstantAggregateZero **)this, (llvm::Type *)v19, 2);
  v18 = 0;
  v17 = 257;
  return sub_1C61BD4C4(v13, (uint64_t)v11, &v18, 1, (uint64_t)v16, 0);
}

void sub_1C62A80EC(int **a1, __int128 *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)qword_1ED810E58, 0, 0);
  dword_1ED810ED8 = 0;
  qword_1ED810EE0 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED810EE8 = 0;
  qword_1ED810E58[0] = (uint64_t)&unk_1E819E3B0;
  qword_1ED810EF0 = (uint64_t)&unk_1E819E2C0;
  qword_1ED810EF8 = (uint64_t)&off_1E7F95260;
  qword_1ED810F10 = (uint64_t)&qword_1ED810EF8;
  llvm::cl::Option::setArgStr(v4, "instcombine-guard-widening-window", 0x21uLL);
  dword_1ED810ED8 = **a1;
  byte_1ED810EEC = 1;
  dword_1ED810EE8 = dword_1ED810ED8;
  xmmword_1ED810E78 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED810E58);
}

unsigned __int8 *sub_1C62A81AC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *result;
  llvm::Value *v11;
  uint64_t v12;
  char v13;
  llvm::MDNode *v14;
  _BYTE v15[32];
  __int16 v16;

  if (*(_BYTE *)(a1 + 100))
    return (unsigned __int8 *)llvm::IRBuilderBase::CreateConstrainedFPBinOp(a1, 95, a2, a3, a4, a5, 0, 0, 0);
  result = sub_1C477422C((uint64_t *)a1, 24, (uint64_t)a2, a3, a5);
  if (!result)
  {
    v16 = 257;
    v11 = llvm::BinaryOperator::Create(24, a2, a3, (uint64_t)v15, 0);
    v12 = (uint64_t)v11;
    v13 = *(_BYTE *)(a4 + 17) & 0xFE;
    v14 = *(llvm::MDNode **)(a1 + 88);
    if (v14)
      llvm::Value::setMetadata(v11, 3, v14);
    *(_BYTE *)(v12 + 17) |= v13;
    return (unsigned __int8 *)sub_1C477438C((uint64_t *)a1, v12, a5);
  }
  return result;
}

unsigned int *sub_1C62A829C(unsigned int *result, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  int *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v5 = a3;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = result[2];
  if (*(_QWORD *)result + 4 * v8 == a2)
    return (unsigned int *)sub_1C52716BC((uint64_t)result, a3, a4);
  v9 = (a2 - v7) >> 2;
  v10 = v8 + a3;
  if (v8 + v5 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v10, 4);
    v7 = *(_QWORD *)v6;
    v8 = v6[2];
  }
  v11 = (int *)(v7 + 4 * v9);
  v12 = (int *)(v7 + 4 * v8);
  v13 = v12 - v11;
  v14 = v13 - v5;
  if (v13 >= v5)
  {
    result = sub_1C617D750(v6, (char *)&v12[-v5], (char *)(v7 + 4 * v8));
    if (&v12[-v5] != v11)
      result = (unsigned int *)memmove(&v11[v5], v11, (char *)&v12[-v5] - (char *)v11);
    for (; v5; --v5)
      *v11++ = a4;
  }
  else
  {
    v6[2] = v8 + v5;
    if (v9 != v8)
    {
      result = (unsigned int *)memcpy((void *)(v7 + 4 * (v8 + v5) - 4 * v13), v11, (char *)v12 - (char *)v11);
      v15 = v12 - v11;
      do
      {
        *v11++ = a4;
        --v15;
      }
      while (v15);
    }
    if (v5 != v13)
    {
      do
        *v12++ = a4;
      while (!__CFADD__(v14++, 1));
    }
  }
  return result;
}

uint64_t sub_1C62A83DC(llvm::ConstantInt ***a1, uint64_t a2, int a3)
{
  unsigned int v5;
  _DWORD *v6;
  uint64_t v7;
  llvm::ConstantInt **v8;
  uint64_t v9;
  const llvm::APInt *v10;
  llvm::Value **v11;
  uint64_t v12;
  _DWORD *v14;
  llvm::ConstantInt **v15;
  uint64_t v16;
  unint64_t *v17;
  const llvm::APInt *v18;
  llvm::Value **v19;
  uint64_t v20;
  void *v21;
  llvm::ConstantInt **v22;
  llvm::APInt *v23;
  const llvm::APInt *v24;
  llvm::Value **v25;
  _DWORD *v26;
  uint64_t v27;
  size_t v28;
  unint64_t *v29;
  size_t v30;
  const llvm::APInt *v31;
  llvm::Value **v32;
  uint64_t v33;
  size_t v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t *v37;
  unsigned int v38;
  unint64_t *v39;
  unsigned int v40;
  void *v41;
  unsigned int v42;
  unint64_t *v43;
  unsigned int v44;
  unint64_t *v45;
  unsigned int v46;
  void *__src;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  __int16 v51;
  uint64_t v52;
  unsigned int v53;

  v5 = a3 & 0xFFFFFFFE;
  if ((a3 & 0xFFFFFFFE) == 0x22)
  {
    v14 = operator new(0x80uLL);
    v14[21] = v14[21] & 0x38000000 | 2;
    v7 = (uint64_t)(v14 + 16);
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *((_QWORD *)v14 + 3) = v14 + 16;
    *((_QWORD *)v14 + 4) = 0;
    *((_QWORD *)v14 + 5) = 0;
    *((_QWORD *)v14 + 6) = 0;
    *((_QWORD *)v14 + 7) = v14 + 16;
    v15 = *a1;
    v16 = *(unsigned int *)(a2 + 8);
    v46 = v16;
    if (v16 > 0x40)
    {
      v34 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
      v35 = (unint64_t *)operator new[]();
      v36 = *(unint64_t **)a2;
      v17 = v35;
      memcpy(v35, v36, v34);
    }
    else
    {
      v17 = *(unint64_t **)a2;
    }
    v45 = v17;
    sub_1C4DE96E0((uint64_t)&v45);
    llvm::APInt::operator++((uint64_t)&v45);
    v48 = v46;
    __src = v45;
    v46 = 0;
    v19 = llvm::ConstantInt::get(v15, (llvm::Type *)&__src, v18);
    v51 = 257;
    sub_1C4774CC4(*a1);
    llvm::CmpInst::CmpInst(v7, v20, 53, 36, (uint64_t)a1, (uint64_t)v19, (uint64_t)&v49, 0, 0);
    if (v48 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    if (v46 >= 0x41)
    {
      v21 = v45;
      if (v45)
        goto LABEL_34;
    }
    return v7;
  }
  if (v5 == 36)
  {
    v22 = *a1;
    v23 = sub_1C4832EA4((llvm::APInt *)&v52, *(_DWORD *)(a2 + 8), -1, 1);
    llvm::APInt::operator-=((uint64_t)v23, (unint64_t **)a2);
    v50 = v53;
    v49 = v52;
    v53 = 0;
    v25 = llvm::ConstantInt::get(v22, (llvm::Type *)&v49, v24);
    if (v50 >= 0x41 && v49)
      MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
    if (v53 >= 0x41 && v52)
      MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
    v26 = operator new(0x80uLL);
    v26[21] = v26[21] & 0x38000000 | 2;
    v7 = (uint64_t)(v26 + 16);
    *(_QWORD *)v26 = 0;
    *((_QWORD *)v26 + 1) = 0;
    *((_QWORD *)v26 + 2) = 0;
    *((_QWORD *)v26 + 3) = v26 + 16;
    *((_QWORD *)v26 + 4) = 0;
    *((_QWORD *)v26 + 5) = 0;
    *((_QWORD *)v26 + 6) = 0;
    *((_QWORD *)v26 + 7) = v26 + 16;
    v51 = 257;
    sub_1C4774CC4(*a1);
    llvm::CmpInst::CmpInst(v7, v27, 53, 34, (uint64_t)a1, (uint64_t)v25, (uint64_t)&v49, 0, 0);
    return v7;
  }
  sub_1C4E3B6CC(*(_DWORD *)(a2 + 8), (llvm::APInt *)&__src);
  v6 = operator new(0x80uLL);
  v6[21] = v6[21] & 0x38000000 | 2;
  v7 = (uint64_t)(v6 + 16);
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = v6 + 16;
  *((_QWORD *)v6 + 4) = 0;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 7) = v6 + 16;
  v8 = *a1;
  if (v5 != 40)
  {
    v9 = *(unsigned int *)(a2 + 8);
    v38 = v9;
    if (v9 > 0x40)
    {
      v28 = ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8;
      v37 = (unint64_t *)operator new[]();
      memcpy(v37, *(const void **)a2, v28);
    }
    else
    {
      v37 = *(unint64_t **)a2;
    }
    llvm::APInt::operator-=((uint64_t)&v37, 1uLL);
    v40 = v38;
    v39 = v37;
    v38 = 0;
    sub_1C4DE96E0((uint64_t)&v39);
    llvm::APInt::operator++((uint64_t)&v39);
    llvm::APInt::operator+=((uint64_t)&v39, (uint64_t **)&__src);
    v44 = v40;
    v43 = v39;
    v40 = 0;
    v11 = llvm::ConstantInt::get(v8, (llvm::Type *)&v43, v10);
    v51 = 257;
    sub_1C4774CC4(*a1);
    llvm::CmpInst::CmpInst(v7, v12, 53, 40, (uint64_t)a1, (uint64_t)v11, (uint64_t)&v49, 0, 0);
    if (v44 >= 0x41 && v43)
      MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
    if (v40 >= 0x41 && v39)
      MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
    if (v38 < 0x41)
      goto LABEL_9;
    v29 = v37;
    if (!v37)
      goto LABEL_9;
LABEL_41:
    MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
    goto LABEL_9;
  }
  v42 = v48;
  if (v48 > 0x40)
  {
    v30 = (((unint64_t)v48 + 63) >> 3) & 0x3FFFFFF8;
    v41 = (void *)operator new[]();
    memcpy(v41, __src, v30);
  }
  else
  {
    v41 = __src;
  }
  llvm::APInt::operator-=((uint64_t)&v41, (unint64_t **)a2);
  v44 = v42;
  v43 = (unint64_t *)v41;
  v42 = 0;
  v32 = llvm::ConstantInt::get(v8, (llvm::Type *)&v43, v31);
  v51 = 257;
  sub_1C4774CC4(*a1);
  llvm::CmpInst::CmpInst(v7, v33, 53, 38, (uint64_t)a1, (uint64_t)v32, (uint64_t)&v49, 0, 0);
  if (v44 >= 0x41 && v43)
    MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
  if (v42 >= 0x41)
  {
    v29 = (unint64_t *)v41;
    if (v41)
      goto LABEL_41;
  }
LABEL_9:
  if (v48 >= 0x41)
  {
    v21 = __src;
    if (__src)
LABEL_34:
      MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
  }
  return v7;
}

uint64_t sub_1C62A892C(uint64_t result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  const void **v4;
  uint64_t v5;
  const void **v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a2;
  v5 = *a2;
  v4 = (const void **)(a2 + 1);
  *(_QWORD *)result = v5;
  LODWORD(v3) = *((_DWORD *)v3 + 4);
  *(_DWORD *)(result + 16) = (_DWORD)v3;
  if (v3 > 0x40)
  {
    v8 = a3;
    v9 = result;
    llvm::APInt::initSlowCase((llvm::APInt *)(result + 8), v4);
    a3 = v8;
    result = v9;
  }
  else
  {
    *(_QWORD *)(result + 8) = *v4;
  }
  *(_OWORD *)(result + 24) = *(_OWORD *)a3;
  v6 = (const void **)(a3 + 16);
  v7 = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(result + 48) = v7;
  if (v7 > 0x40)
  {
    v10 = result;
    llvm::APInt::initSlowCase((llvm::APInt *)(result + 40), v6);
    return v10;
  }
  else
  {
    *(_QWORD *)(result + 40) = *v6;
  }
  return result;
}

uint64_t sub_1C62A89BC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 48) >= 0x41u)
  {
    v1 = *(_QWORD *)(result + 40);
    if (v1)
    {
      v3 = result;
      MEMORY[0x1CAA32F9C](v1, 0x1000C8000313F17);
      result = v3;
    }
  }
  if (*(_DWORD *)(result + 16) >= 0x41u)
  {
    v2 = *(_QWORD *)(result + 8);
    if (v2)
    {
      v4 = result;
      MEMORY[0x1CAA32F9C](v2, 0x1000C8000313F17);
      return v4;
    }
  }
  return result;
}

uint64_t sub_1C62A8A44(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v13 = *a2;
  v14 = 0;
  sub_1C6245320(a1, &v13, &v14, (uint64_t)&v11);
  v4 = v11;
  if (v12)
  {
    v10 = (unint64_t)*a2;
    v5 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 40))
    {
      v6 = sub_1C4E3D7FC((void **)(a1 + 24), &v10);
    }
    else
    {
      *v5 = v10;
      v6 = v5 + 1;
    }
    *(_QWORD *)(a1 + 32) = v6;
    v8 = *(_QWORD *)(a1 + 24);
    v7 = (((unint64_t)v6 - v8) >> 4) - 1;
    *(_DWORD *)(v4 + 8) = v7;
  }
  else
  {
    v7 = *(_DWORD *)(v11 + 8);
    v8 = *(_QWORD *)(a1 + 24);
  }
  return v8 + 16 * v7 + 8;
}

uint64_t sub_1C62A8AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = a2;
  if (sub_1C4E36534((uint64_t *)a1, &v8, &v7))
  {
    v3 = v7;
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 16);
    v3 = *(_QWORD *)a1 + 16 * v5;
  }
  if (v3 == v4 + 16 * v5)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v3 + 8) + 8);
}

void sub_1C62A8B74(char **a1, __int128 *a2)
{
  uint64_t v4;
  char *v5;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED810F20, 0, 0);
  byte_1ED810FA0 = 0;
  qword_1ED810FA8 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED810FB0 = 0;
  qword_1ED810F20 = (uint64_t)&unk_1E819E898;
  qword_1ED810FB8 = (uint64_t)&off_1E819E9A0;
  qword_1ED810FC0 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED810FD8 = (uint64_t)&qword_1ED810FC0;
  llvm::cl::Option::setArgStr(v4, "instcombine-negator-enabled", 0x1BuLL);
  v5 = *a1;
  byte_1ED810FA0 = **a1;
  byte_1ED810FB1 = 1;
  byte_1ED810FB0 = *v5;
  xmmword_1ED810F40 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED810F20);
}

void sub_1C62A8C38(int **a1, __int128 *a2)
{
  uint64_t v4;
  int *v5;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED810FE0, 0, 0);
  dword_1ED811060 = 0;
  qword_1ED811068 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED811070 = 0;
  qword_1ED810FE0 = (uint64_t)&unk_1E819E3B0;
  qword_1ED811078 = (uint64_t)&unk_1E819E2C0;
  qword_1ED811080 = (uint64_t)&off_1E7F95260;
  qword_1ED811098 = (uint64_t)&qword_1ED811080;
  llvm::cl::Option::setArgStr(v4, "instcombine-negator-max-depth", 0x1DuLL);
  v5 = *a1;
  dword_1ED811060 = **a1;
  byte_1ED811074 = 1;
  dword_1ED811070 = *v5;
  xmmword_1ED811000 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED810FE0);
}

void sub_1C62A8CFC(int **a1, __int128 *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED8110A0, 0, 0);
  dword_1ED811120 = 0;
  qword_1ED811128 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED811130 = 0;
  qword_1ED8110A0 = (uint64_t)&unk_1E819E3B0;
  qword_1ED811138 = (uint64_t)&unk_1E819E2C0;
  qword_1ED811140 = (uint64_t)&off_1E7F95260;
  qword_1ED811158 = (uint64_t)&qword_1ED811140;
  llvm::cl::Option::setArgStr(v4, "instcombine-max-num-phis", 0x18uLL);
  dword_1ED811120 = **a1;
  byte_1ED811134 = 1;
  dword_1ED811130 = dword_1ED811120;
  xmmword_1ED8110C0 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED8110A0);
}

void sub_1C62A8DC0()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62A8DD4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C4E85724((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_1C62A8E94(_DWORD *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4E85724((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C585F5B8(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1C62A8EF0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C585F9BC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

llvm::GlobalsMetadata *llvm::GlobalsMetadata::GlobalsMetadata(llvm::GlobalsMetadata *this, llvm::Module *a2)
{
  uint64_t NamedMetadata;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Value *v10;
  llvm::Value *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  llvm::MDNode *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::APInt *v23;
  unsigned int v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  llvm::APInt *v28;
  unsigned int v29;
  BOOL v30;
  char v31;
  uint64_t v33[4];
  __int16 v34;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  v33[0] = (uint64_t)"llvm.asan.globals";
  v34 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata((uint64_t)a2, (uint64_t)v33);
  if (NamedMetadata)
  {
    v4 = NamedMetadata;
    v5 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 8 * v5;
      do
      {
        v8 = *(_QWORD *)(**(_QWORD **)(v4 + 48) + v6);
        v9 = *(_QWORD *)(v8 - 8 * *(unsigned int *)(v8 + 8));
        if (v9)
        {
          v10 = *(llvm::Value **)(v9 + 128);
          if (v10)
          {
            v11 = llvm::Value::stripPointerCasts(v10);
            v12 = *((_BYTE *)v11 + 16) == 3 ? (uint64_t)v11 : 0;
            v33[0] = v12;
            if (v12)
            {
              v13 = sub_1C62AABD8((uint64_t)this, v33);
              v14 = v13;
              v15 = *(unsigned int *)(v8 + 8);
              v16 = *(llvm::MDNode **)(v8 - 8 * v15 + 8);
              if (v16)
              {
                llvm::LocationMetadata::parse(v13 + 1, v16);
                v15 = *(unsigned int *)(v8 + 8);
              }
              v17 = -v15;
              v18 = *(_QWORD *)(v8 - 8 * v15 + 16);
              if (v18)
              {
                v19 = *(uint64_t **)(v18 + 8);
                v20 = *v19;
                v14[4] = v19 + 3;
                v14[5] = v20;
                v17 = -v15;
              }
              v21 = v8 + 8 * v17;
              v22 = *(_QWORD *)(*(_QWORD *)(v21 + 24) + 128);
              v23 = (llvm::APInt *)(v22 + 24);
              v24 = *(_DWORD *)(v22 + 32);
              if (v24 > 0x40)
                v25 = llvm::APInt::countLeadingZerosSlowCase(v23) == v24 - 1;
              else
                v25 = *(_QWORD *)v23 == 1;
              v26 = v25;
              *((_BYTE *)v14 + 48) |= v26;
              v27 = *(_QWORD *)(*(_QWORD *)(v21 + 32) + 128);
              v28 = (llvm::APInt *)(v27 + 24);
              v29 = *(_DWORD *)(v27 + 32);
              if (v29 > 0x40)
                v30 = llvm::APInt::countLeadingZerosSlowCase(v28) == v29 - 1;
              else
                v30 = *(_QWORD *)v28 == 1;
              v31 = v30;
              *((_BYTE *)v14 + 49) |= v31;
            }
          }
        }
        v6 += 8;
      }
      while (v7 != v6);
    }
  }
  return this;
}

llvm::GlobalsMetadata *llvm::ASanGlobalsMetadataAnalysis::run@<X0>(llvm::Module *a1@<X1>, llvm::GlobalsMetadata *a2@<X8>)
{
  return llvm::GlobalsMetadata::GlobalsMetadata(a2, a1);
}

llvm::raw_ostream *llvm::ModuleAddressSanitizerPass::printPipeline(_BYTE *a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  sub_1C62A91B8(a2, a3, a4);
  sub_1C4816AD8(a2, "<");
  if (*a1)
    sub_1C4816AD8(a2, "kernel");
  return sub_1C4816AD8(a2, ">");
}

llvm::raw_ostream *sub_1C62A91B8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  llvm::raw_ostream *result;

  v6 = sub_1C586F4D0();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (llvm::raw_ostream *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(a1, v9, v8);
  if (v8)
  {
    result = (llvm::raw_ostream *)memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

uint64_t llvm::createAddressSanitizerFunctionPass(char a1, char a2, char a3, int a4)
{
  uint64_t v8;

  v8 = operator new();
  return sub_1C5863BF0(v8, a1, a2, a3, a4);
}

uint64_t llvm::createModuleAddressSanitizerLegacyPassPass(char a1, char a2, char a3, char a4, int a5)
{
  uint64_t v10;

  v10 = operator new();
  return sub_1C5863DB8(v10, a1, a2, a3, a4, a5);
}

_QWORD *sub_1C62A9328(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E817D498;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &off_1E817D500;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

_QWORD *sub_1C62A93A8(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817D500;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C62A93E8(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v12 = 0;
  v8 = sub_1C6159B48(a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v12);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C62A9460(v11);
}

uint64_t sub_1C62A9460(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C62A9478(_QWORD *a1)
{
  sub_1C62A9328(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C62A949C(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C62A94A8(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C62A94B8(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_3:
    v4 = &off_1E817D550;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_3;
  }
  return result;
}

_QWORD *sub_1C62A9524(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C62A952C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817D500;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62A957C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C62A9584(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C62A9598(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C62A95AC(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C62A95C0(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

_QWORD *sub_1C62A95EC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E817D590;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &off_1E817D5F8;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

_QWORD *sub_1C62A966C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817D5F8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C62A96AC(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v12 = 0;
  v8 = sub_1C6159B48(a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v12);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C62A9724(v11);
}

uint64_t sub_1C62A9724(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C62A973C(_QWORD *a1)
{
  sub_1C62A95EC(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C62A9760(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C62A976C(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C62A977C(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_3:
    v4 = &off_1E817D648;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_3;
  }
  return result;
}

_QWORD *sub_1C62A97E8(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C62A97F0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817D5F8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62A9840(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C62A9848(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C62A985C(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C62A9870(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C62A9884(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

llvm::PointerType *sub_1C62A98B0(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  llvm::PointerType *v12;
  uint64_t v14[4];

  v14[3] = *MEMORY[0x1E0C80C00];
  v14[0] = a6;
  v14[1] = a7;
  v14[2] = a8;
  v12 = (llvm::PointerType *)llvm::FunctionType::get(a5, v14, 3, 0);
  return llvm::Module::getOrInsertFunction(a1, a2, a3, v12, a4);
}

_QWORD *sub_1C62A9984(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C62A99F0(a1, a2, v7);
    *v5 = *a2;
    *((_BYTE *)v5 + 8) = 0;
  }
  return v5;
}

_QWORD *sub_1C62A99F0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C586C0D4(a1, v6);
  v8 = 0;
  sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C62A9AA0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C6144BDC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_BYTE *)v10 + 8) = *(_BYTE *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1C62A9B54(uint64_t a1, uint64_t *a2, unsigned int *a3, char *a4, uint64_t *a5, unsigned __int8 *a6)
{
  unsigned int v7;
  unsigned int v8;

  v7 = *(_DWORD *)(a1 + 8);
  if (v7 >= *(_DWORD *)(a1 + 12))
    return sub_1C62A9CA8(a1, a2, a3, a4, a5, a6);
  sub_1C62A9D38(*(_QWORD *)a1 + 48 * v7, *a2, *a3, *a4, *a5, *a6 | 0x100, 0);
  v8 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v8;
  return *(_QWORD *)a1 + 48 * v8 - 48;
}

uint64_t sub_1C62A9BD0(uint64_t a1, uint64_t *a2, unsigned int *a3, char *a4, uint64_t *a5)
{
  unsigned int v6;
  unsigned int v7;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
    return sub_1C62A9DE8(a1, a2, a3, a4, a5);
  sub_1C62A9D38(*(_QWORD *)a1 + 48 * v6, *a2, *a3, *a4, *a5, 0, 0);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(_QWORD *)a1 + 48 * v7 - 48;
}

uint64_t sub_1C62A9C48(uint64_t a1, uint64_t a2, unsigned int a3, char a4, uint64_t a5, __int16 a6, uint64_t a7)
{
  unsigned int v8;
  uint64_t result;

  v8 = *(_DWORD *)(a1 + 8);
  if (v8 >= *(_DWORD *)(a1 + 12))
    return sub_1C62A9E74(a1, a2, a3, a4, a5, a6, a7);
  result = sub_1C62A9D38(*(_QWORD *)a1 + 48 * v8, a2, a3, a4 != 0, a5, a6, a7);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C62A9CA8(uint64_t a1, uint64_t *a2, unsigned int *a3, char *a4, uint64_t *a5, unsigned __int8 *a6)
{
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  _BYTE v12[48];

  sub_1C62A9D38((uint64_t)v12, *a2, *a3, *a4, *a5, *a6 | 0x100, 0);
  v7 = (_OWORD *)sub_1C52B9D4C(a1, (unint64_t)v12, 1);
  v8 = (_OWORD *)(*(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 8));
  v10 = v7[1];
  v9 = v7[2];
  *v8 = *v7;
  v8[1] = v10;
  v8[2] = v9;
  LODWORD(v8) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v8;
  return *(_QWORD *)a1 + 48 * v8 - 48;
}

uint64_t sub_1C62A9D38(uint64_t a1, uint64_t a2, unsigned int a3, char a4, uint64_t a5, __int16 a6, uint64_t a7)
{
  uint64_t v10;
  const char *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v16;

  *(_BYTE *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a5;
  *(_WORD *)(a1 + 32) = a6;
  *(_QWORD *)(a1 + 40) = a7;
  sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40) + 272, a5);
  v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((_DWORD)v11 == 1)
  {
    v16 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = v16;
  }
  *(_QWORD *)(a1 + 24) = v12;
  v13 = *(_DWORD *)(a2 + 20);
  if ((v13 & 0x40000000) != 0)
    v14 = *(_QWORD *)(a2 - 8);
  else
    v14 = a2 - 32 * (v13 & 0x7FFFFFF);
  *(_QWORD *)a1 = v14 + 32 * a3;
  return a1;
}

uint64_t sub_1C62A9DE8(uint64_t a1, uint64_t *a2, unsigned int *a3, char *a4, uint64_t *a5)
{
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  _BYTE v11[48];

  sub_1C62A9D38((uint64_t)v11, *a2, *a3, *a4, *a5, 0, 0);
  v6 = (_OWORD *)sub_1C52B9D4C(a1, (unint64_t)v11, 1);
  v7 = (_OWORD *)(*(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 8));
  v9 = v6[1];
  v8 = v6[2];
  *v7 = *v6;
  v7[1] = v9;
  v7[2] = v8;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(_QWORD *)a1 + 48 * v7 - 48;
}

uint64_t sub_1C62A9E74(uint64_t a1, uint64_t a2, unsigned int a3, char a4, uint64_t a5, __int16 a6, uint64_t a7)
{
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  _BYTE v13[48];

  sub_1C62A9D38((uint64_t)v13, a2, a3, a4 != 0, a5, a6, a7);
  v8 = (_OWORD *)sub_1C52B9D4C(a1, (unint64_t)v13, 1);
  v9 = (_OWORD *)(*(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 8));
  v11 = v8[1];
  v10 = v8[2];
  *v9 = *v8;
  v9[1] = v11;
  v9[2] = v10;
  LODWORD(v9) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v9;
  return *(_QWORD *)a1 + 48 * v9 - 48;
}

_QWORD *sub_1C62A9EF4(_QWORD *result, size_t __len, int __c)
{
  _QWORD *v5;
  uint64_t v6;

  v5 = result;
  v6 = result[1];
  if (v6 + __len > result[2])
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v6 + __len, 1);
    v6 = v5[1];
  }
  if (__len)
  {
    result = memset((void *)(*v5 + v6), __c, __len);
    v6 = v5[1];
  }
  v5[1] = v6 + __len;
  return result;
}

void sub_1C62A9F6C(_WORD *a1, char **a2, _WORD *a3, __n128 *a4, _WORD *a5)
{
  sub_1C47AD050((uint64_t)&qword_1ED811540, 0, 0);
  byte_1ED8115C0 = 0;
  qword_1ED8115C8 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED8115D0 = 0;
  qword_1ED811540 = (uint64_t)&unk_1E819E898;
  qword_1ED8115D8 = (uint64_t)&off_1E819E9A0;
  qword_1ED8115E0 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED8115F8 = (uint64_t)&qword_1ED8115E0;
  sub_1C62AA028(a1, a2, a3, a4, a5);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED811540);
}

__n128 sub_1C62AA028(_WORD *a1, char **a2, _WORD *a3, __n128 *a4, _WORD *a5)
{
  __int16 v10;
  char *v11;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED811540, "asan-use-stack-safety", 0x15uLL);
  v10 = word_1ED81154A;
  word_1ED81154A = word_1ED81154A & 0xFF9F | (32 * (*a1 & 3));
  v11 = *a2;
  byte_1ED8115C0 = **a2;
  byte_1ED8115D1 = 1;
  byte_1ED8115D0 = *v11;
  word_1ED81154A = v10 & 0xFF9F | (32 * (*a3 & 3));
  result = *a4;
  xmmword_1ED811560 = (__int128)*a4;
  word_1ED81154A = word_1ED81154A & 0xFFF8 | *a5 & 7;
  return result;
}

void sub_1C62AA0D0(int **a1, __n128 *a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED811A80, 0, 0);
  dword_1ED811B00 = 0;
  qword_1ED811B08 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED811B10 = 0;
  qword_1ED811A80 = (uint64_t)&unk_1E819E418;
  qword_1ED811B18 = (uint64_t)&unk_1E819E230;
  qword_1ED811B20 = (uint64_t)&off_1E7FA9D80;
  qword_1ED811B38 = (uint64_t)&qword_1ED811B20;
  sub_1C586EDA4(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED811A80);
}

void sub_1C62AA16C(__n128 *a1, _WORD *a2, char **a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED811B40, 0, 0);
  byte_1ED811BC0 = 0;
  qword_1ED811BC8 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED811BD0 = 0;
  qword_1ED811B40 = (uint64_t)&unk_1E819E898;
  qword_1ED811BD8 = (uint64_t)&off_1E819E9A0;
  qword_1ED811BE0 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED811BF8 = (uint64_t)&qword_1ED811BE0;
  sub_1C586EE28(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED811B40);
}

void sub_1C62AA210(__int128 *a1, uint64_t *a2, _WORD *a3, int **a4)
{
  sub_1C47AD050((uint64_t)&qword_1EF8F4D48, 0, 0);
  dword_1EF8F4DC8 = 0;
  qword_1EF8F4DD0 = (uint64_t)&off_1E817D550;
  unk_1EF8F4DD8 = 0;
  qword_1EF8F4D48 = (uint64_t)off_1E817D498;
  qword_1EF8F4DE0 = (uint64_t)&off_1E817D500;
  qword_1EF8F4DE8 = (uint64_t)&qword_1EF8F4D48;
  qword_1EF8F4DF0 = (uint64_t)&unk_1EF8F4E00;
  qword_1EF8F4DF8 = 0x800000000;
  qword_1EF8F4F80 = (uint64_t)&off_1E817D868;
  qword_1EF8F4F98 = (uint64_t)&qword_1EF8F4F80;
  sub_1C586EEAC(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F4D48);
}

void sub_1C62AA2CC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62AA2E0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E817D868;
  return result;
}

void sub_1C62AA304(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E817D868;
}

void sub_1C62AA320(unsigned __int8 *a1, size_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  _QWORD v11[5];
  int v12;
  char v13;

  v11[0] = a1;
  v11[1] = a2;
  v11[2] = a4;
  v11[3] = a5;
  v11[4] = &off_1E817D550;
  v13 = 1;
  v12 = a3;
  v7 = sub_1C586EF74((unint64_t)v11);
  v8 = qword_1EF8F4DF0 + 48 * qword_1EF8F4DF8;
  v9 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 32) = &off_1E817D570;
  v10 = *(_BYTE *)(v7 + 44);
  *(_DWORD *)(v8 + 40) = *(_DWORD *)(v7 + 40);
  *(_BYTE *)(v8 + 44) = v10;
  *(_QWORD *)(v8 + 32) = &off_1E817D550;
  LODWORD(qword_1EF8F4DF8) = qword_1EF8F4DF8 + 1;
  llvm::cl::AddLiteralOption(qword_1EF8F4DE8, a1, a2);
}

void sub_1C62AA3D4(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1EF8F4DF0, a1, 48, &v8);
  v2 = (_OWORD *)qword_1EF8F4DF0;
  if ((_DWORD)qword_1EF8F4DF8)
  {
    v3 = qword_1EF8F4DF0 + 48 * qword_1EF8F4DF8;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E817D570;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E817D550;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1EF8F4DF0;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1EF8F4E00)
    free(v2);
  qword_1EF8F4DF0 = (uint64_t)v1;
  HIDWORD(qword_1EF8F4DF8) = v7;
}

void sub_1C62AA4A0(__int128 *a1, _WORD *a2, const char **a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EF8F4B78, "asan-memory-access-callback-prefix", 0x22uLL);
  xmmword_1EF8F4B98 = *a1;
  word_1EF8F4B82 = (32 * (*a2 & 3)) | word_1EF8F4B82 & 0xFF9F;
  sub_1C586EFE8(*a3);
}

void sub_1C62AA50C(__int128 *a1, _WORD *a2, int **a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1EF8F4AB0, 0, 0);
  xmmword_1EF8F4B30 = 0u;
  *(_OWORD *)&qword_1EF8F4B40 = 0u;
  *((_QWORD *)&xmmword_1EF8F4B30 + 1) = &unk_1E8171608;
  qword_1EF8F4AB0 = (uint64_t)&unk_1E81715A0;
  qword_1EF8F4B50 = (uint64_t)&unk_1E819EA38;
  qword_1EF8F4B58 = (uint64_t)&unk_1E81716C8;
  qword_1EF8F4B70 = (uint64_t)&qword_1EF8F4B58;
  llvm::cl::Option::setArgStr(v6, "asan-mapping-offset", 0x13uLL);
  xmmword_1EF8F4AD0 = *a1;
  word_1EF8F4ABA = (32 * (*a2 & 3)) | word_1EF8F4ABA & 0xFF9F;
  *(_QWORD *)&xmmword_1EF8F4B30 = **a3;
  byte_1EF8F4B48 = 1;
  qword_1EF8F4B40 = xmmword_1EF8F4B30;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F4AB0);
}

void sub_1C62AA5EC(__n128 *a1, _WORD *a2, char **a3)
{
  sub_1C47AD050((uint64_t)&qword_1EF8F3F70, 0, 0);
  byte_1EF8F3FF0 = 0;
  qword_1EF8F3FF8 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1EF8F4000 = 0;
  qword_1EF8F3F70 = (uint64_t)&unk_1E819E898;
  qword_1EF8F4008 = (uint64_t)&off_1E819E9A0;
  qword_1EF8F4010 = (uint64_t)&off_1E7F9E8F8;
  qword_1EF8F4028 = (uint64_t)&qword_1EF8F4010;
  sub_1C586F0C0(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F3F70);
}

void sub_1C62AA690(__n128 *a1, _WORD *a2, char **a3)
{
  sub_1C47AD050((uint64_t)&qword_1EF8F40F0, 0, 0);
  byte_1EF8F4170 = 0;
  qword_1EF8F4178 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1EF8F4180 = 0;
  qword_1EF8F40F0 = (uint64_t)&unk_1E819E898;
  qword_1EF8F4188 = (uint64_t)&off_1E819E9A0;
  qword_1EF8F4190 = (uint64_t)&off_1E7F9E8F8;
  qword_1EF8F41A8 = (uint64_t)&qword_1EF8F4190;
  sub_1C586F144(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F40F0);
}

void sub_1C62AA734(__int128 *a1, _WORD *a2, int **a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1EF8F43F0, 0, 0);
  dword_1EF8F4470 = 0;
  qword_1EF8F4478 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1EF8F4480 = 0;
  qword_1EF8F43F0 = (uint64_t)&unk_1E819E3B0;
  qword_1EF8F4488 = (uint64_t)&unk_1E819E2C0;
  qword_1EF8F4490 = (uint64_t)&off_1E7F95260;
  qword_1EF8F44A8 = (uint64_t)&qword_1EF8F4490;
  llvm::cl::Option::setArgStr(v6, "asan-force-experiment", 0x15uLL);
  xmmword_1EF8F4410 = *a1;
  word_1EF8F43FA = (32 * (*a2 & 3)) | word_1EF8F43FA & 0xFF9F;
  dword_1EF8F4470 = **a3;
  byte_1EF8F4484 = 1;
  dword_1EF8F4480 = dword_1EF8F4470;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F43F0);
}

void sub_1C62AA810(__int128 *a1, uint64_t *a2, int **a3, _WORD *a4)
{
  sub_1C47AD050((uint64_t)&qword_1EF8F4FA0, 0, 0);
  dword_1EF8F5020 = 0;
  qword_1EF8F5028 = (uint64_t)&off_1E817D648;
  unk_1EF8F5030 = 0;
  qword_1EF8F4FA0 = (uint64_t)off_1E817D590;
  qword_1EF8F5038 = (uint64_t)&off_1E817D5F8;
  qword_1EF8F5040 = (uint64_t)&qword_1EF8F4FA0;
  qword_1EF8F5048 = (uint64_t)&unk_1EF8F5058;
  qword_1EF8F5050 = 0x800000000;
  qword_1EF8F51D8 = (uint64_t)&off_1E817D8B0;
  qword_1EF8F51F0 = (uint64_t)&qword_1EF8F51D8;
  sub_1C586F1C8(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F4FA0);
}

void sub_1C62AA8CC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62AA8E0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E817D8B0;
  return result;
}

void sub_1C62AA904(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E817D8B0;
}

void sub_1C62AA920(unsigned __int8 *a1, size_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  _QWORD v11[5];
  int v12;
  char v13;

  v11[0] = a1;
  v11[1] = a2;
  v11[2] = a4;
  v11[3] = a5;
  v11[4] = &off_1E817D648;
  v13 = 1;
  v12 = a3;
  v7 = sub_1C586F290((unint64_t)v11);
  v8 = qword_1EF8F5048 + 48 * qword_1EF8F5050;
  v9 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 32) = &off_1E817D668;
  v10 = *(_BYTE *)(v7 + 44);
  *(_DWORD *)(v8 + 40) = *(_DWORD *)(v7 + 40);
  *(_BYTE *)(v8 + 44) = v10;
  *(_QWORD *)(v8 + 32) = &off_1E817D648;
  LODWORD(qword_1EF8F5050) = qword_1EF8F5050 + 1;
  llvm::cl::AddLiteralOption(qword_1EF8F5040, a1, a2);
}

void sub_1C62AA9D4(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1EF8F5048, a1, 48, &v8);
  v2 = (_OWORD *)qword_1EF8F5048;
  if ((_DWORD)qword_1EF8F5050)
  {
    v3 = qword_1EF8F5048 + 48 * qword_1EF8F5050;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E817D668;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E817D648;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1EF8F5048;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1EF8F5058)
    free(v2);
  qword_1EF8F5048 = (uint64_t)v1;
  HIDWORD(qword_1EF8F5050) = v7;
}

void sub_1C62AAAA0(__n128 *a1, _WORD *a2, int **a3)
{
  sub_1C47AD050((uint64_t)&qword_1EF8F47B0, 0, 0);
  dword_1EF8F4830 = 0;
  qword_1EF8F4838 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1EF8F4840 = 0;
  qword_1EF8F47B0 = (uint64_t)&unk_1E819E418;
  qword_1EF8F4848 = (uint64_t)&unk_1E819E230;
  qword_1EF8F4850 = (uint64_t)&off_1E7FA9D80;
  qword_1EF8F4868 = (uint64_t)&qword_1EF8F4850;
  sub_1C586F304(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F47B0);
}

void sub_1C62AAB3C(__n128 *a1, _WORD *a2, int **a3)
{
  sub_1C47AD050((uint64_t)&qword_1EF8F4870, 0, 0);
  dword_1EF8F48F0 = 0;
  qword_1EF8F48F8 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1EF8F4900 = 0;
  qword_1EF8F4870 = (uint64_t)&unk_1E819E418;
  qword_1EF8F4908 = (uint64_t)&unk_1E819E230;
  qword_1EF8F4910 = (uint64_t)&off_1E7FA9D80;
  qword_1EF8F4928 = (uint64_t)&qword_1EF8F4910;
  sub_1C586F388(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F4870);
}

_QWORD *sub_1C62AABD8(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C61A45F4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C62AAC50(a1, a2, v7);
    *v5 = *a2;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
  }
  return v5;
}

_QWORD *sub_1C62AAC50(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C586F40C(a1, v6);
  v8 = 0;
  sub_1C61A45F4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C62AAD00(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 56 * v6;
    do
    {
      *v7 = -4096;
      v7 += 7;
      v8 -= 56;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v13 = 0;
      result = sub_1C61A45F4(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v13);
      v10 = v13;
      *v13 = *(_QWORD *)a2;
      v11 = *(_OWORD *)(a2 + 8);
      v12 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v10 + 5) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(v10 + 3) = v12;
      *(_OWORD *)(v10 + 1) = v11;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 56;
  }
  return result;
}

_QWORD *llvm::BoundsCheckingPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t ResultImpl;
  _QWORD *result;

  v6 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, a1) + 8;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::ScalarEvolutionAnalysis::Key, a1);
  result = (_QWORD *)sub_1C5870608(a1, v6, ResultImpl + 8);
  if ((result & 1) == 0)
    return llvm::InstCountPass::run(a3);
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)(a3 + 88) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_DWORD *)(a3 + 64) = 2;
  return result;
}

uint64_t llvm::createBoundsCheckingLegacyPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5870E78(v1);
}

uint64_t sub_1C62AAEAC(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = **a2;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 120) = &unk_1E8135C10;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = a1 + 120;
  *(_QWORD *)(a1 + 80) = a1 + 136;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 512;
  *(_BYTE *)(a1 + 102) = 7;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a1 + 136) = &unk_1E8167A08;
  sub_1C4D8AE2C(a1, (uint64_t)a2, a3);
  return a1;
}

void sub_1C62AAF3C(__int128 *a1)
{
  uint64_t v2;

  v2 = sub_1C47AD050((uint64_t)&qword_1ED812140, 0, 0);
  byte_1ED8121C0 = 0;
  qword_1ED8121C8 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED8121D0 = 0;
  qword_1ED812140 = (uint64_t)&unk_1E819E898;
  qword_1ED8121D8 = (uint64_t)&off_1E819E9A0;
  qword_1ED8121E0 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED8121F8 = (uint64_t)&qword_1ED8121E0;
  llvm::cl::Option::setArgStr(v2, "bounds-checking-single-trap", 0x1BuLL);
  xmmword_1ED812160 = *a1;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED812140);
}

uint64_t llvm::createCGProfileLegacyPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5871D78(v1);
}

_QWORD *llvm::CGProfilePass::run@<X0>(llvm::Module *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a2, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, (uint64_t)a1)+ 8);
  v7 = v6;
  sub_1C5871E40(a1, (uint64_t (*)(uint64_t, _QWORD *))sub_1C5872714, (uint64_t)&v7, (uint64_t (*)(uint64_t, _QWORD *))sub_1C587273C, (uint64_t)&v6, 0);
  return llvm::InstCountPass::run(a3);
}

uint64_t sub_1C62AB070(uint64_t *a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;

  sub_1C546CB40(a1);
  v4 = (char *)a1[10];
  v5 = (char *)a1[11];
  if (v5 != v4)
  {
    v6 = (v5 - v4) >> 4;
    do
    {
      v7 = v6 >> 1;
      v8 = &v4[16 * (v6 >> 1)];
      v10 = *(_QWORD *)v8;
      v9 = v8 + 16;
      v6 += ~(v6 >> 1);
      if (v10 < a2)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v4 == v5 || *(_QWORD *)v4 != a2)
    return 0;
  else
    return *((_QWORD *)v4 + 1);
}

uint64_t sub_1C62AB0EC(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  _DWORD v15[4];

  v14 = *a2;
  v15[0] = 0;
  sub_1C62AB1C4((uint64_t)&v12, a1, (uint64_t *)&v14, v15);
  v4 = v12;
  if (v13)
  {
    v10 = *a2;
    v11 = 0;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5 >= *(_QWORD *)(a1 + 40))
    {
      v6 = sub_1C4D8DBBC((void **)(a1 + 24), (uint64_t)&v10);
    }
    else
    {
      *(_OWORD *)v5 = v10;
      *(_QWORD *)(v5 + 16) = v11;
      v6 = (char *)(v5 + 24);
    }
    *(_QWORD *)(a1 + 32) = v6;
    v8 = *(_QWORD *)(a1 + 24);
    v7 = -1431655765 * ((unint64_t)&v6[-v8] >> 3) - 1;
    *(_DWORD *)(v4 + 16) = v7;
  }
  else
  {
    v7 = *(_DWORD *)(v12 + 16);
    v8 = *(_QWORD *)(a1 + 24);
  }
  return v8 + 24 * v7 + 16;
}

uint64_t sub_1C62AB1C4(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C6200DDC(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, a3[1], &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C62AB264(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_OWORD *)result = *(_OWORD *)a3;
    *(_DWORD *)(result + 16) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_1C62AB264(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_8;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_8:
    sub_1C587264C(a1, v6);
    v8 = 0;
    sub_1C6200DDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096 || a3[1] != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C62AB320(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = 24 * v6;
    v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *v7 = v9;
      v7 = (int64x2_t *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    v11 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -4096 || v11 != -4096) && (v10 != -8192 || v11 != -8192))
    {
      v13 = 0;
      result = sub_1C6200DDC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v10, v11, &v13);
      v12 = v13;
      *v13 = *(_QWORD *)a2;
      v12[1] = *(_QWORD *)(a2 + 8);
      *((_DWORD *)v12 + 4) = *(_DWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t llvm::createControlHeightReductionLegacyPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5872870(v1);
}

_QWORD *llvm::ControlHeightReductionPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t ***v6;
  uint64_t ***v7;
  uint64_t ResultImpl;
  uint64_t ***v9;
  _QWORD *result;
  uint64_t ***v11[6];
  __int128 v12;
  _BYTE v13[28];
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  v3 = a2;
  v6 = (uint64_t ***)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::BlockFrequencyAnalysis::Key, a1) + 8);
  v7 = (uint64_t ***)(llvm::AnalysisManager<llvm::Function>::getResultImpl(v3, &llvm::DominatorTreeAnalysis::Key, a1) + 8);
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(v3, &llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::Function>::Key, a1);
  v9 = (uint64_t ***)sub_1C4E60FE0((uint64_t *)(ResultImpl + 8), *(_QWORD *)(a1 + 40));
  v11[0] = (uint64_t ***)a1;
  v11[1] = v6;
  v11[2] = v7;
  v11[3] = v9;
  v11[4] = (uint64_t ***)(llvm::AnalysisManager<llvm::Function>::getResultImpl(v3, &llvm::RegionInfoAnalysis::Key, a1) + 8);
  v11[5] = (uint64_t ***)(llvm::AnalysisManager<llvm::Function>::getResultImpl(v3, &llvm::OptimizationRemarkEmitterAnalysis::Key, a1)+ 8);
  v12 = 0u;
  memset(v13, 0, sizeof(v13));
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v25 = 0;
  v23 = 0;
  v24 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v31 = 0;
  v29 = 0;
  v30 = 0;
  LOBYTE(v3) = sub_1C5872C40(v11);
  result = (_QWORD *)sub_1C5875BD0((uint64_t)v11);
  if ((v3 & 1) == 0)
    return llvm::InstCountPass::run(a3);
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)(a3 + 88) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_DWORD *)(a3 + 64) = 2;
  return result;
}

uint64_t *sub_1C62AB5B4(uint64_t a1)
{
  unint64_t v1;
  unint64_t Successor;

  if ((*(_QWORD *)a1 & 6) != 0)
  {
    v1 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
    Successor = *(_QWORD *)(v1 + 32);
  }
  else
  {
    Successor = llvm::Instruction::getSuccessor(*(llvm::Instruction **)(a1 + 8), *(_DWORD *)(a1 + 16));
    v1 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
  }
  return llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getNode(*(_QWORD **)(v1 + 8), Successor);
}

uint64_t sub_1C62AB604@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C4E1CB18((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C62AB688(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

_QWORD *sub_1C62AB688(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C58783F0(a1, v7);
  v9 = 0;
  sub_1C4E1CB18((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C62AB738(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C4E1CB18((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C62AB7E4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C4D959A4((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C4D95A40(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C62AB868(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C61805E8((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C62AB8F0(a2, v12, a3, a4);
    v9 = (_QWORD *)result;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_1C62AB8F0(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  result = sub_1C62AB95C(a1, (uint64_t)a3, a3, a2);
  *result = *a3;
  result[1] = *a4;
  v7 = a4 + 1;
  v8 = a4[1];
  result[2] = v8;
  v9 = result + 2;
  v10 = a4[2];
  result[3] = v10;
  if (v10)
  {
    *(_QWORD *)(v8 + 16) = v9;
    *a4 = v7;
    *v7 = 0;
    a4[2] = 0;
  }
  else
  {
    result[1] = v9;
  }
  return result;
}

_QWORD *sub_1C62AB95C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C587A2FC(a1, v7);
  v9 = 0;
  sub_1C61805E8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void sub_1C62ABA08(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  *(_QWORD *)(a1 + 8) = 0;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD **)a1;
    v7 = 32 * v5;
    do
    {
      *v6 = -4096;
      v6 += 4;
      v7 -= 32;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    v8 = a2 + 2;
    do
    {
      if ((*(v8 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = 0;
        sub_1C61805E8((uint64_t *)a1, v8 - 2, &v15);
        v10 = v15;
        *v15 = *(v8 - 2);
        v10[1] = *(v8 - 1);
        v11 = (_QWORD *)*v8;
        v10[2] = *v8;
        v12 = v10 + 2;
        v13 = v8[1];
        v10[3] = v13;
        if (v13)
        {
          v14 = 0;
          v11[2] = v12;
          *(v8 - 1) = v8;
          *v8 = 0;
          v8[1] = 0;
        }
        else
        {
          v10[1] = v12;
          v14 = (_QWORD *)*v8;
        }
        ++*(_DWORD *)(a1 + 8);
        sub_1C47655E8((uint64_t)(v8 - 1), v14);
      }
      v9 = v8 + 2;
      v8 += 4;
    }
    while (v9 != a3);
  }
}

uint64_t *sub_1C62ABB00(_QWORD **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = (uint64_t **)sub_1C4FCDC00(a1, a2, &v14, &v13, a3);
  v7 = *v6;
  if (!*v6)
  {
    v9 = v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    v10 = v14;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v10;
    *v9 = v7;
    v11 = (_QWORD *)**a1;
    v12 = v7;
    if (v11)
    {
      *a1 = v11;
      v12 = *v9;
    }
    sub_1C4768E74(a1[1], v12);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_1C62ABBAC(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 24, &v5);
  sub_1C6146B5C(a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

_QWORD *sub_1C62ABC18(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_1C614ECAC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C62ABC84(a1, a2, v8);
    v7 = *a2;
    v5[2] = 0;
    v5[3] = 0;
    *v5 = v7;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C62ABC84(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C587AC50(a1, v6);
  v8 = 0;
  sub_1C614ECAC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C62ABD34(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      sub_1C614ECAC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      v10 = v12;
      v11 = *(_QWORD *)a2;
      *(_DWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)v10 = v11;
      *(_QWORD *)(v10 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 0;
      LODWORD(v11) = *(_DWORD *)(v10 + 20);
      *(_DWORD *)(v10 + 20) = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(a2 + 20) = v11;
      LODWORD(v11) = *(_DWORD *)(v10 + 24);
      *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = v11;
      ++*(_DWORD *)(v5 + 8);
      result = MEMORY[0x1CAA32FB4](0, 8);
    }
    a2 += 32;
  }
  return result;
}

uint64_t sub_1C62ABE2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = a2;
  if (sub_1C61A6880(a1, &v7, &v6))
    return v6;
  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 8;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 8 * v5;
}

void sub_1C62ABE8C(uint64_t **a1, _WORD *a2, __n128 *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED8123C0, 0, 0);
  xmmword_1ED812440 = 0u;
  *(_OWORD *)&qword_1ED812450 = 0u;
  *((_QWORD *)&xmmword_1ED812440 + 1) = &unk_1E8134CB8;
  qword_1ED8123C0 = (uint64_t)&unk_1E8134C50;
  qword_1ED812460 = (uint64_t)&unk_1E819E320;
  qword_1ED812468 = (uint64_t)&unk_1E8134CD8;
  qword_1ED812480 = (uint64_t)&qword_1ED812468;
  sub_1C587B988(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED8123C0);
}

__n128 sub_1C62ABF34(const char **a1, _WORD *a2, __n128 *a3)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED812488, "chr-module-list", 0xFuLL);
  sub_1C49C7D74(a1, (uint64_t)&qword_1ED812488);
  word_1ED812492 = (32 * (*a2 & 3)) | word_1ED812492 & 0xFF9F;
  result = *a3;
  xmmword_1ED8124A8 = (__int128)*a3;
  return result;
}

__n128 sub_1C62ABFA8(const char **a1, _WORD *a2, __n128 *a3)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED812570, "chr-function-list", 0x11uLL);
  sub_1C49C7D74(a1, (uint64_t)&qword_1ED812570);
  word_1ED81257A = (32 * (*a2 & 3)) | word_1ED81257A & 0xFF9F;
  result = *a3;
  xmmword_1ED812590 = (__int128)*a3;
  return result;
}

uint64_t llvm::createDataFlowSanitizerLegacyPassPass(uint64_t *a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = &unk_1EF8F5208;
  *(_DWORD *)(v2 + 24) = 4;
  *(_QWORD *)v2 = off_1E817DAD8;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  sub_1C484333C((_QWORD *)(v2 + 32), *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  return v2;
}

_QWORD *llvm::DataFlowSanitizerPass::run@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  _BYTE v6[816];

  sub_1C587BEE8((uint64_t)v6, a1);
  LODWORD(a2) = sub_1C587C424((uint64_t)v6, a2);
  result = (_QWORD *)sub_1C587E27C((uint64_t)v6);
  if (!(_DWORD)a2)
    return llvm::InstCountPass::run(a3);
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)(a3 + 88) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_DWORD *)(a3 + 64) = 2;
  return result;
}

_QWORD *sub_1C62AC13C(_QWORD *a1, llvm::SmallPtrSetImplBase *a2)
{
  void *v5;
  void *v6;
  const void *v7;
  void *__p;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;

  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v11, &v13, a2);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  sub_1C4E19D7C(&v14, *((_BYTE **)a2 + 12), *((_BYTE **)a2 + 13), (uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 5);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v5, &v7, (llvm::SmallPtrSetImplBase *)((char *)a2 + 120));
  __p = 0;
  v9 = 0;
  v10 = 0;
  sub_1C4E19D7C(&__p, *((_BYTE **)a2 + 27), *((_BYTE **)a2 + 28), (uint64_t)(*((_QWORD *)a2 + 28) - *((_QWORD *)a2 + 27)) >> 5);
  sub_1C62AC234((uint64_t)a1, (llvm::SmallPtrSetImplBase *)&v11, (const llvm::SmallPtrSetImplBase *)&v5);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  if (v6 != v5)
    free(v6);
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12 != v11)
    free(v12);
  return a1;
}

void sub_1C62AC234(uint64_t a1, llvm::SmallPtrSetImplBase *a2, const llvm::SmallPtrSetImplBase *a3)
{
  uint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  const void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  const void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  const void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  const void *v34;
  void *__p;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  const void *v40;
  void *v41;
  void *v42;
  uint64_t v43;

  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v38, &v40, a2);
  v41 = 0;
  v42 = 0;
  v43 = 0;
  sub_1C4E19D7C(&v41, *((_BYTE **)a2 + 12), *((_BYTE **)a2 + 13), (uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 5);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v32, &v34, a3);
  v36 = 0;
  __p = 0;
  v37 = 0;
  sub_1C4E19D7C(&__p, *((_BYTE **)a3 + 12), *((_BYTE **)a3 + 13), (uint64_t)(*((_QWORD *)a3 + 13) - *((_QWORD *)a3 + 12)) >> 5);
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
  if (v33 != v32)
    free(v33);
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  if (v39 != v38)
    free(v39);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v26, &v28, a2);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  sub_1C4E19D7C(&v29, *((_BYTE **)a2 + 12), *((_BYTE **)a2 + 13), (uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 5);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v20, &v22, a3);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  sub_1C4E19D7C(&v23, *((_BYTE **)a3 + 12), *((_BYTE **)a3 + 13), (uint64_t)(*((_QWORD *)a3 + 13) - *((_QWORD *)a3 + 12)) >> 5);
  v6 = sub_1C5883E6C((uint64_t)&v26, (uint64_t)&v20);
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21 != v20)
    free(v21);
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v27 != v26)
    free(v27);
  v7 = v6 + *(unsigned int *)(a1 + 8);
  if (v7 > *(unsigned int *)(a1 + 12))
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v7, 8);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v14, &v16, a2);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  sub_1C4E19D7C(&v17, *((_BYTE **)a2 + 12), *((_BYTE **)a2 + 13), (uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 5);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v8, &v10, a3);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  sub_1C4E19D7C(&v11, *((_BYTE **)a3 + 12), *((_BYTE **)a3 + 13), (uint64_t)(*((_QWORD *)a3 + 13) - *((_QWORD *)a3 + 12)) >> 5);
  sub_1C58840E0((uint64_t)&v14, (uint64_t)&v8, (_QWORD *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8)));
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  if (v9 != v8)
    free(v9);
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  if (v15 != v14)
    free(v15);
  *(_DWORD *)(a1 + 8) += v6;
}

_QWORD *sub_1C62AC4A8(uint64_t *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_1C61805E8(a1, a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C62AB95C((uint64_t)a1, (uint64_t)a2, a2, v8);
    v7 = *a2;
    v5[3] = 0;
    v5[2] = 0;
    *v5 = v7;
    v5[1] = v5 + 2;
  }
  return v5;
}

void sub_1C62AC514(__int128 *a1, _WORD *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED812EA8, 1, 0);
  qword_1ED812F28 = 0;
  unk_1ED812F30 = 0;
  qword_1ED812F38 = 0;
  unk_1ED812F40 = 0;
  qword_1ED812EA8 = (uint64_t)&unk_1E81409D8;
  qword_1ED812F48 = 0;
  unk_1ED812F50 = 0;
  qword_1ED812F58 = (uint64_t)&unk_1E819E970;
  qword_1ED812F60 = (uint64_t)&unk_1E81415E0;
  qword_1ED812F78 = (uint64_t)&qword_1ED812F60;
  llvm::cl::Option::setArgStr(v4, "dfsan-abilist", 0xDuLL);
  xmmword_1ED812EC8 = *a1;
  word_1ED812EB2 = (32 * (*a2 & 3)) | word_1ED812EB2 & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED812EA8);
}

void sub_1C62AC5CC(__n128 *a1, _WORD *a2, char **a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED8127E8, 0, 0);
  byte_1ED812868 = 0;
  qword_1ED812870 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED812878 = 0;
  qword_1ED8127E8 = (uint64_t)&unk_1E819E898;
  qword_1ED812880 = (uint64_t)&off_1E819E9A0;
  qword_1ED812888 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED8128A0 = (uint64_t)&qword_1ED812888;
  sub_1C588AAAC(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED8127E8);
}

void sub_1C62AC670(__int128 *a1, _WORD *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED812F80, 1, 0);
  qword_1ED813000 = 0;
  unk_1ED813008 = 0;
  qword_1ED813010 = 0;
  unk_1ED813018 = 0;
  qword_1ED812F80 = (uint64_t)&unk_1E81409D8;
  qword_1ED813020 = 0;
  unk_1ED813028 = 0;
  qword_1ED813030 = (uint64_t)&unk_1E819E970;
  qword_1ED813038 = (uint64_t)&unk_1E81415E0;
  qword_1ED813050 = (uint64_t)&qword_1ED813038;
  llvm::cl::Option::setArgStr(v4, "dfsan-combine-taint-lookup-table", 0x20uLL);
  xmmword_1ED812FA0 = *a1;
  word_1ED812F8A = (32 * (*a2 & 3)) | word_1ED812F8A & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED812F80);
}

void sub_1C62AC728(__n128 *a1, _WORD *a2, int **a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED812C68, 0, 0);
  dword_1ED812CE8 = 0;
  qword_1ED812CF0 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED812CF8 = 0;
  qword_1ED812C68 = (uint64_t)&unk_1E819E418;
  qword_1ED812D00 = (uint64_t)&unk_1E819E230;
  qword_1ED812D08 = (uint64_t)&off_1E7FA9D80;
  qword_1ED812D20 = (uint64_t)&qword_1ED812D08;
  sub_1C588AB30(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED812C68);
}

uint64_t llvm::createGCOVProfilerPass(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  return sub_1C588B168(v2, a1);
}

uint64_t llvm::GCOVProfilerPass::run@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v7;
  void (**v8)(void);
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  _BYTE v14[400];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  sub_1C588B234((uint64_t)v14, a1);
  v10 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, (uint64_t)a2)+ 8);
  v11 = v10;
  v12[0] = &off_1E817DC60;
  v12[1] = v10;
  v13 = v12;
  v7 = sub_1C588B304((size_t)v14, a2, (uint64_t (*)(uint64_t, uint64_t ***))sub_1C58976A4, (uint64_t)&v11, (uint64_t (*)(uint64_t, uint64_t ***))sub_1C58976CC, (uint64_t)&v10, (uint64_t)v12);
  if (v13 == v12)
  {
    v8 = (void (**)(void))(v12[0] + 32);
  }
  else
  {
    if (!v13)
      goto LABEL_5;
    v8 = (void (**)(void))(*v13 + 40);
  }
  (*v8)();
LABEL_5:
  if ((v7 & 1) != 0)
  {
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)(a4 + 88) = 0;
    *(_OWORD *)(a4 + 72) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_QWORD *)a4 = a4 + 32;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_QWORD *)(a4 + 16) = 2;
    *(_QWORD *)(a4 + 48) = a4 + 80;
    *(_QWORD *)(a4 + 56) = a4 + 80;
    *(_DWORD *)(a4 + 64) = 2;
  }
  else
  {
    llvm::InstCountPass::run(a4);
  }
  return sub_1C588BC2C((uint64_t)v14);
}

void sub_1C62AC950(void **a1)
{
  char *v1;
  char *v3;
  void *v4;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        llvm::Regex::~Regex((llvm::Regex *)(v3 - 16));
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1C62AC9AC(const char **a1, _WORD *a2, _WORD *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED833820, "default-gcov-version", 0x14uLL);
  sub_1C49C7D74(a1, (uint64_t)&qword_1ED833820);
  word_1ED83382A = word_1ED83382A & 0xFF9F | (32 * (*a2 & 3));
  word_1ED83382A = (8 * (*a3 & 3)) | word_1ED83382A & 0xFFE7;
}

_QWORD *llvm::MemProfilerPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *result;
  _BYTE v5[160];

  sub_1C58978B4((uint64_t)v5, *(_QWORD *)(a1 + 40));
  result = (_QWORD *)sub_1C5897A18((uint64_t)v5, (uint64_t ***)a1);
  if (!(_DWORD)result)
    return llvm::InstCountPass::run(a2);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = a2 + 32;
  *(_QWORD *)(a2 + 8) = a2 + 32;
  *(_QWORD *)(a2 + 16) = 2;
  *(_QWORD *)(a2 + 48) = a2 + 80;
  *(_QWORD *)(a2 + 56) = a2 + 80;
  *(_DWORD *)(a2 + 64) = 2;
  return result;
}

uint64_t llvm::createMemProfilerFunctionPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5898E3C(v1);
}

uint64_t llvm::createModuleMemProfilerLegacyPassPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5898FF4(v1);
}

void sub_1C62ACB08(__n128 *a1, _WORD *a2, char **a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED813058, 0, 0);
  byte_1ED8130D8 = 0;
  qword_1ED8130E0 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED8130E8 = 0;
  qword_1ED813058 = (uint64_t)&unk_1E819E898;
  qword_1ED8130F0 = (uint64_t)&off_1E819E9A0;
  qword_1ED8130F8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED813110 = (uint64_t)&qword_1ED8130F8;
  sub_1C5899EF0(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED813058);
}

void sub_1C62ACBAC(__int128 *a1, _WORD *a2, const char **a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED813898, "memprof-memory-access-callback-prefix", 0x25uLL);
  xmmword_1ED8138B8 = *a1;
  word_1ED8138A2 = (32 * (*a2 & 3)) | word_1ED8138A2 & 0xFF9F;
  sub_1C5899F74(*a3);
}

void sub_1C62ACC18(__int128 *a1, _WORD *a2, int **a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED813418, 0, 0);
  dword_1ED813498 = 0;
  qword_1ED8134A0 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED8134A8 = 0;
  qword_1ED813418 = (uint64_t)&unk_1E819E418;
  qword_1ED8134B0 = (uint64_t)&unk_1E819E230;
  qword_1ED8134B8 = (uint64_t)&off_1E7FA9D80;
  qword_1ED8134D0 = (uint64_t)&qword_1ED8134B8;
  llvm::cl::Option::setArgStr(v6, "memprof-mapping-scale", 0x15uLL);
  xmmword_1ED813438 = *a1;
  word_1ED813422 = (32 * (*a2 & 3)) | word_1ED813422 & 0xFF9F;
  dword_1ED813498 = **a3;
  byte_1ED8134AC = 1;
  dword_1ED8134A8 = dword_1ED813498;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED813418);
}

void sub_1C62ACCEC(__int128 *a1, _WORD *a2, int **a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED8134D8, 0, 0);
  dword_1ED813558 = 0;
  qword_1ED813560 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED813568 = 0;
  qword_1ED8134D8 = (uint64_t)&unk_1E819E418;
  qword_1ED813570 = (uint64_t)&unk_1E819E230;
  qword_1ED813578 = (uint64_t)&off_1E7FA9D80;
  qword_1ED813590 = (uint64_t)&qword_1ED813578;
  llvm::cl::Option::setArgStr(v6, "memprof-mapping-granularity", 0x1BuLL);
  xmmword_1ED8134F8 = *a1;
  word_1ED8134E2 = (32 * (*a2 & 3)) | word_1ED8134E2 & 0xFF9F;
  dword_1ED813558 = **a3;
  byte_1ED81356C = 1;
  dword_1ED813568 = dword_1ED813558;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED8134D8);
}

void sub_1C62ACDC0(__n128 *a1, _WORD *a2, int **a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED813658, 0, 0);
  dword_1ED8136D8 = 0;
  qword_1ED8136E0 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED8136E8 = 0;
  qword_1ED813658 = (uint64_t)&unk_1E819E418;
  qword_1ED8136F0 = (uint64_t)&unk_1E819E230;
  qword_1ED8136F8 = (uint64_t)&off_1E7FA9D80;
  qword_1ED813710 = (uint64_t)&qword_1ED8136F8;
  sub_1C589A04C(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED813658);
}

_QWORD *llvm::MemorySanitizerPass::run@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ResultImpl;
  _QWORD *result;
  _BYTE v9[648];

  sub_1C589A678((uint64_t)v9, *(llvm::LLVMContext ***)(a2 + 40), *(_QWORD *)a1, *(_DWORD *)(a1 + 8));
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetLibraryAnalysis::Key, a2);
  result = (_QWORD *)sub_1C589AA54(v9, (uint64_t ***)a2, ResultImpl + 8);
  if (!(_DWORD)result)
    return llvm::InstCountPass::run(a4);
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_QWORD *)(a4 + 88) = 0;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_DWORD *)(a4 + 64) = 2;
  return result;
}

double llvm::ModuleMemorySanitizerPass::run@<D0>(_BYTE *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  char *v5;
  uint64_t **v6;

  if (*a1)
  {
    llvm::InstCountPass::run(a3);
  }
  else
  {
    v6 = a2;
    llvm::getOrCreateSanitizerCtorAndInitFunctions(a2, "msan.module_ctor", (llvm::UndefValue *)0x10, "__msan_init", 0xBuLL, 0, 0, &v5, 0, 0, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1C589DD3C, (uint64_t)&v6, 0, 0);
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)(a3 + 88) = 0;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)&result = 2;
    *(_QWORD *)(a3 + 16) = 2;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_DWORD *)(a3 + 64) = 2;
  }
  return result;
}

llvm::raw_ostream *llvm::MemorySanitizerPass::printPipeline(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  llvm::raw_ostream *v6;

  sub_1C62AD08C(a2, a3, a4);
  sub_1C4816AD8(a2, "<");
  if (*(_BYTE *)(a1 + 8))
    sub_1C4816AD8(a2, "recover;");
  if (*(_BYTE *)a1)
    sub_1C4816AD8(a2, "kernel;");
  if (*(_BYTE *)(a1 + 9))
    sub_1C4816AD8(a2, "eager-checks;");
  v6 = sub_1C4816AD8(a2, "track-origins=");
  llvm::raw_ostream::operator<<(v6, *(int *)(a1 + 4));
  return sub_1C4816AD8(a2, ">");
}

llvm::raw_ostream *sub_1C62AD08C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  llvm::raw_ostream *result;

  v6 = sub_1C58B3074();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (llvm::raw_ostream *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(a1, v9, v8);
  if (v8)
  {
    result = (llvm::raw_ostream *)memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

uint64_t llvm::createMemorySanitizerLegacyPassPass(uint64_t a1, int a2)
{
  uint64_t v4;

  v4 = operator new();
  return sub_1C589D9F4(v4, a1, a2);
}

void sub_1C62AD164(uint64_t a1)
{
  _QWORD v3[2];
  uint64_t v4;
  uint64_t v5;

  sub_1C4E42548(v3, (_QWORD *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 32);
  sub_1C62AD2BC(v5, v4);
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList(v3);
}

void sub_1C62AD1D8(uint64_t a1, uint64_t a2)
{
  int32x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  uint64_t v8[3];
  _QWORD v9[2];
  uint64_t v10;
  int32x2_t *v11;

  sub_1C4E42548(v9, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(a1 + 32);
  v8[2] = (uint64_t)&off_1E817DE88;
  v11 = v4;
  v7[0] = 0;
  if (sub_1C6179BF0((uint64_t)*v4, v4[2].i32[0], v10, v7))
    v5 = v7[0];
  else
    v5 = *(_QWORD *)v4 + 48 * v4[2].u32[0];
  if (*(_QWORD *)v11 + 48 * v11[2].u32[0] != v5)
  {
    v6 = *(_QWORD *)(v5 + 40);
    sub_1C62AD370(v11, v5);
    v8[0] = a2;
    v8[1] = v6;
    sub_1C62AD408((uint64_t)v7, (unint64_t)v11, v8);
  }
  if (v10 != -8192 && v10 != -4096)
  {
    if (v10)
      llvm::ValueHandleBase::RemoveFromUseList(v9);
  }
}

int32x2_t sub_1C62AD2BC(uint64_t a1, uint64_t a2)
{
  int32x2_t result;
  uint64_t (**v4)(llvm::CallbackVH *__hidden);
  uint64_t v5;
  uint64_t (**v6)(llvm::CallbackVH *__hidden);
  uint64_t v7[2];
  uint64_t v8;
  uint64_t (*v9)(llvm::CallbackVH *__hidden);

  v6 = 0;
  if (sub_1C6179BF0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v6))
  {
    v4 = v6;
    v7[1] = 0;
    v8 = -8192;
    v6 = &off_1E817DE88;
    v7[0] = 2;
    v9 = 0;
    sub_1C4D98DE0((unint64_t *)v4 + 1, v7);
    v5 = v8;
    v4[4] = v9;
    if (v5 != -8192 && v5 != -4096)
    {
      if (v5)
        llvm::ValueHandleBase::RemoveFromUseList(v7);
    }
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

int32x2_t sub_1C62AD370(int32x2_t *a1, uint64_t a2)
{
  uint64_t v4;
  int32x2_t result;
  uint64_t v7[2];
  uint64_t v8;
  uint64_t v9;

  v7[1] = 0;
  v8 = -8192;
  v7[0] = 2;
  v9 = 0;
  sub_1C4D98DE0((unint64_t *)(a2 + 8), v7);
  v4 = v8;
  *(_QWORD *)(a2 + 32) = v9;
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList(v7);
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

double sub_1C62AD408(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  double result;
  _QWORD v13[2];
  uint64_t v14;
  unint64_t v15;
  uint64_t (**v16)(llvm::CallbackVH *__hidden);
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  char v23;

  v6 = *a3;
  v7 = 2;
  v13[0] = 2;
  v13[1] = 0;
  v14 = v6;
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
  {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v13);
    v7 = v13[0];
    v6 = v14;
  }
  v15 = a2;
  v17 = v7 & 6;
  v18 = 0;
  v19 = v6;
  v9 = a2;
  if (v6 != -8192)
  {
    v10 = v6 == -4096 || v6 == 0;
    v9 = a2;
    if (!v10)
    {
      v18 = *(unint64_t **)(v7 & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8) = &v17;
      v17 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if (v18)
        *v18 = *v18 & 7 | (unint64_t)&v18;
      v9 = v15;
    }
  }
  v16 = &off_1E817DE88;
  v11 = a3[1];
  v20 = v9;
  v21 = v11;
  sub_1C62AD56C((uint64_t)&v22, a2, (uint64_t *)&v16, &v21);
  if (v19 != -8192 && v19 != -4096 && v19)
    llvm::ValueHandleBase::RemoveFromUseList(&v17);
  if (v14 != -8192 && v14 != -4096 && v14)
    llvm::ValueHandleBase::RemoveFromUseList(v13);
  result = *(double *)&v22;
  *(_OWORD *)a1 = v22;
  *(_BYTE *)(a1 + 16) = v23;
  return result;
}

unint64_t sub_1C62AD56C(uint64_t a1, unint64_t a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t result;
  unint64_t *v9;
  char v10;
  uint64_t v11;
  unint64_t *v12;

  v12 = 0;
  result = sub_1C6179BF0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a3[3], &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    v9 = (unint64_t *)sub_1C62AD620(a2, (uint64_t)a3, (uint64_t)v12);
    result = sub_1C4D98DE0(v9 + 1, a3 + 1);
    v9[4] = a3[4];
    v9[5] = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 48 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_1C62AD620(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C589E1F4(a1, v6);
  v8 = 0;
  sub_1C6179BF0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

unint64_t sub_1C62AD6D0(unint64_t result, uint64_t *a2, uint64_t *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = 48 * v6;
    v8 = (_QWORD *)(*(_QWORD *)result + 16);
    do
    {
      *v8 = 0;
      v8[1] = -4096;
      *(v8 - 2) = &off_1E817DE88;
      *(v8 - 1) = 2;
      v8[2] = 0;
      v8 += 6;
      v7 -= 48;
    }
    while (v7);
  }
  while (a2 != a3)
  {
    v9 = a2[3];
    if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      sub_1C6179BF0(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      v11 = v12;
      result = sub_1C4D98DE0((unint64_t *)(v12 + 8), a2 + 1);
      *(_QWORD *)(v11 + 32) = a2[4];
      *(_QWORD *)(v11 + 40) = a2[5];
      ++*(_DWORD *)(v5 + 8);
      v9 = a2[3];
    }
    if (v9 != -8192 && v9 != -4096 && v9 != 0)
      result = (unint64_t)llvm::ValueHandleBase::RemoveFromUseList(a2 + 1);
    a2 += 6;
  }
  return result;
}

unint64_t *sub_1C62AD7D0(unint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  uint64_t (**v6)(llvm::CallbackVH *__hidden);
  _QWORD v7[2];
  uint64_t v8;
  unint64_t v9;

  v7[0] = 2;
  v7[1] = 0;
  v8 = a2;
  if (a2 != -8192 && a2 != -4096 && a2)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v7);
  v6 = &off_1E817DE88;
  v9 = a1;
  v3 = sub_1C62AD868(a1, (uint64_t *)&v6);
  if (v8 != -8192 && v8 != -4096 && v8 != 0)
    llvm::ValueHandleBase::RemoveFromUseList(v7);
  return v3 + 5;
}

unint64_t *sub_1C62AD868(unint64_t a1, uint64_t *a2)
{
  char v4;
  unint64_t *v5;
  unint64_t *v7;

  v7 = 0;
  v4 = sub_1C6179BF0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2[3], &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = (unint64_t *)sub_1C62AD620(a1, (uint64_t)a2, (uint64_t)v7);
    sub_1C4D98DE0(v5 + 1, a2 + 1);
    v5[4] = a2[4];
    v5[5] = 0;
  }
  return v5;
}

llvm::PointerType *sub_1C62AD8E8(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::PointerType *v6;
  uint64_t v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  v8[0] = a3;
  v8[1] = a4;
  v8[2] = a5;
  v6 = (llvm::PointerType *)llvm::FunctionType::get(a2, v8, 3, 0);
  return llvm::Module::getOrInsertFunction(a1, "__msan_set_origin", 0x11uLL, v6, 0);
}

llvm::PointerType *sub_1C62AD9AC(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t **a4, uint64_t a5, uint64_t a6)
{
  llvm::PointerType *v9;
  uint64_t v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  v11[0] = a5;
  v11[1] = a6;
  v9 = (llvm::PointerType *)llvm::FunctionType::get(a4, v11, 2, 0);
  return llvm::Module::getOrInsertFunction(a1, a2, a3, v9, 0);
}

llvm::PointerType *sub_1C62ADA70(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::PointerType *v6;
  uint64_t v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  v8[0] = a3;
  v8[1] = a4;
  v8[2] = a5;
  v6 = (llvm::PointerType *)llvm::FunctionType::get(a2, v8, 3, 0);
  return llvm::Module::getOrInsertFunction(a1, "__msan_poison_alloca", 0x14uLL, v6, 0);
}

llvm::PointerType *sub_1C62ADB34(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  llvm::PointerType *v7;
  uint64_t v9[5];

  v9[4] = *MEMORY[0x1E0C80C00];
  v9[0] = a3;
  v9[1] = a4;
  v9[2] = a5;
  v9[3] = a6;
  v7 = (llvm::PointerType *)llvm::FunctionType::get(a2, v9, 4, 0);
  return llvm::Module::getOrInsertFunction(a1, "__msan_set_alloca_origin4", 0x19uLL, v7, 0);
}

_QWORD *sub_1C62ADBF8(_QWORD *result, unsigned int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  if (a2)
  {
    v2 = 48 * a2;
    v3 = result + 3;
    do
    {
      v4 = *v3;
      if (*v3 != -8192 && v4 != -4096 && v4 != 0)
        result = llvm::ValueHandleBase::RemoveFromUseList(v3 - 2);
      v3 += 6;
      v2 -= 48;
    }
    while (v2);
  }
  return result;
}

void sub_1C62ADC4C(__n128 *a1, _WORD *a2, int **a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED813BF0, 0, 0);
  dword_1ED813C70 = 0;
  qword_1ED813C78 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED813C80 = 0;
  qword_1ED813BF0 = (uint64_t)&unk_1E819E418;
  qword_1ED813C88 = (uint64_t)&unk_1E819E230;
  qword_1ED813C90 = (uint64_t)&off_1E7FA9D80;
  qword_1ED813CA8 = (uint64_t)&qword_1ED813C90;
  sub_1C58B2FF0(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED813BF0);
}

uint64_t sub_1C62ADCE8(uint64_t a1, char *a2, _OWORD *a3, _WORD *a4, int **a5)
{
  uint64_t v10;
  size_t v11;
  uint64_t v12;

  v10 = sub_1C47AD050(a1, 0, 0);
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_QWORD *)(v10 + 136) = &unk_1E8171608;
  *(_QWORD *)v10 = &unk_1E81715A0;
  *(_QWORD *)(v10 + 160) = &unk_1E819EA38;
  *(_QWORD *)(v10 + 168) = &unk_1E81716C8;
  *(_QWORD *)(v10 + 192) = v10 + 168;
  v11 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v11);
  *(_OWORD *)(a1 + 32) = *a3;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  v12 = **a5;
  *(_QWORD *)(a1 + 128) = v12;
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 144) = v12;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void sub_1C62ADDDC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::CallBase *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  void *v14;
  uint64_t v15;

  v3 = a1 + 72;
  __p = 0;
  v14 = 0;
  v15 = 0;
  v4 = *(_QWORD *)(a1 + 80);
  if (v4 == a1 + 72)
  {
    v12 = 0;
    v11 = 0;
  }
  else
  {
    do
    {
      v5 = v4 - 24;
      v6 = v4 == 0;
      v4 = *(_QWORD *)(v4 + 8);
      if (v6)
        v5 = 0;
      v7 = v5 + 40;
      v8 = *(_QWORD *)(v5 + 48);
      if (v8 != v7)
      {
        do
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v8)
            v10 = (llvm::CallBase *)(v8 - 24);
          else
            v10 = 0;
          sub_1C62ADEAC((uint64_t)&__p, v10);
          v8 = v9;
        }
        while (v9 != v7);
      }
    }
    while (v4 != v3);
    v11 = __p;
    v12 = (uint64_t)v14;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_1C4DFE394(a2, v11, v12, (v12 - (uint64_t)v11) >> 3);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

uint64_t sub_1C62ADEAC(uint64_t a1, llvm::CallBase *this)
{
  int v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *((unsigned __int8 *)this + 16);
  if ((v2 - 40) >= 0x2C)
  {
    v3 = v2 - 33;
    v4 = v3 <= 0x3E && ((1 << v3) & 0x7FF000000000003ELL) == 0;
    v5 = (1 << v3) & 0x8000000000041;
    if (v4 && v5 != 0)
      return sub_1C62ADEFC(a1, this);
  }
  return a1;
}

uint64_t sub_1C62ADEFC(uint64_t a1, llvm::CallBase *this)
{
  uint64_t result;
  _QWORD *v5;
  llvm::CallBase *v6;

  result = llvm::CallBase::isIndirectCall(this);
  if ((_DWORD)result)
  {
    v6 = this;
    v5 = *(_QWORD **)(a1 + 8);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 16))
    {
      result = (uint64_t)sub_1C4DFEA3C((void **)a1, &v6);
    }
    else
    {
      *v5 = this;
      result = (uint64_t)(v5 + 1);
    }
    *(_QWORD *)(a1 + 8) = result;
  }
  return result;
}

void sub_1C62ADF58(char **a1, _WORD *a2, __n128 *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED814A50, 0, 0);
  byte_1ED814AD0 = 0;
  qword_1ED814AD8 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED814AE0 = 0;
  qword_1ED814A50 = (uint64_t)&unk_1E819E898;
  qword_1ED814AE8 = (uint64_t)&off_1E819E9A0;
  qword_1ED814AF0 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED814B08 = (uint64_t)&qword_1ED814AF0;
  sub_1C58B4B98(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED814A50);
}

uint64_t llvm::createPrivateGlobalForString(uint64_t *a1, char *a2, llvm::Type *a3, int a4, _BYTE *a5)
{
  char v8;
  llvm::Value **String;
  _QWORD *v10;
  uint64_t v11;
  llvm::PointerType *v12;
  _BYTE *v14;
  char v15;
  char v16;

  v8 = 1;
  String = llvm::ConstantDataArray::getString(*a1, a2, a3, 1);
  v10 = llvm::User::operator new((llvm::User *)0x58, 1u);
  v11 = (uint64_t)v10;
  v12 = *String;
  v16 = 1;
  if (*a5)
  {
    v14 = a5;
    v8 = 3;
  }
  v15 = v8;
  llvm::GlobalVariable::GlobalVariable((uint64_t)v10, (uint64_t)a1, v12, 1, 8, (uint64_t)String, (uint64_t)&v14, 0, 0, 0, 0);
  if (a4)
    *(_DWORD *)(v11 + 32) = *(_DWORD *)(v11 + 32) & 0xFFFFFF3F | 0x80;
  llvm::GlobalObject::setAlignment(v11, 256);
  return v11;
}

size_t *llvm::getOrCreateFunctionComdat(llvm *this, llvm::Function *a2, llvm::Triple *a3)
{
  size_t *v3;
  uint64_t v7;
  unsigned __int8 *Name;
  size_t v9;
  size_t *inserted;
  int v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  BOOL v15;

  v3 = (size_t *)*((_QWORD *)this + 6);
  if (!v3)
  {
    v7 = *((_QWORD *)this + 5);
    Name = (unsigned __int8 *)llvm::Value::getName(this);
    inserted = llvm::Module::getOrInsertComdat(v7, Name, v9);
    v3 = inserted;
    v11 = *((_DWORD *)a2 + 11);
    if (v11 == 3
      || v11 == 1
      && ((v12 = *((_DWORD *)this + 8) & 0xF, v13 = v12 > 0xA, v14 = (1 << v12) & 0x63C, !v13)
        ? (v15 = v14 == 0)
        : (v15 = 1),
          v15))
    {
      *((_DWORD *)inserted + 2) = 3;
    }
    llvm::GlobalObject::setComdat(this, (llvm::Comdat *)inserted);
  }
  return v3;
}

double llvm::InstrOrderFilePass::run@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  double result;
  _OWORD v4[2];
  uint64_t v5;

  v5 = 0;
  memset(v4, 0, sizeof(v4));
  sub_1C58B5060((uint64_t *)v4, a1);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = a2 + 32;
  *(_QWORD *)(a2 + 8) = a2 + 32;
  *(_QWORD *)&result = 2;
  *(_QWORD *)(a2 + 16) = 2;
  *(_QWORD *)(a2 + 48) = a2 + 80;
  *(_QWORD *)(a2 + 56) = a2 + 80;
  *(_DWORD *)(a2 + 64) = 2;
  return result;
}

uint64_t llvm::createInstrOrderFilePass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C58B6B34(v1);
}

__n128 sub_1C62AE20C(const char **a1, __n128 *a2, _WORD *a3)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED814E10, "orderfile-write-mapping", 0x17uLL);
  sub_1C49C7D74(a1, (uint64_t)&qword_1ED814E10);
  result = *a2;
  xmmword_1ED814E30 = (__int128)*a2;
  word_1ED814E1A = (32 * (*a3 & 3)) | word_1ED814E1A & 0xFF9F;
  return result;
}

_QWORD *llvm::InstrProfiling::run@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  _QWORD *result;
  uint64_t (**v10)(void);
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, a2)+ 8);
  v11[0] = &off_1E817E208;
  v11[1] = v7;
  v12 = v11;
  v8 = llvm::InstrProfiling::run(a1, a2, (uint64_t)v11);
  result = v12;
  if (v12 == v11)
  {
    v10 = (uint64_t (**)(void))(v11[0] + 32);
  }
  else
  {
    if (!v12)
      goto LABEL_5;
    v10 = (uint64_t (**)(void))(*v12 + 40);
  }
  result = (_QWORD *)(*v10)();
LABEL_5:
  if ((v8 & 1) == 0)
    return llvm::InstCountPass::run(a4);
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_QWORD *)(a4 + 88) = 0;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_DWORD *)(a4 + 64) = 2;
  return result;
}

uint64_t llvm::createInstrProfilingLegacyPass(uint64_t a1, char a2)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;
  _QWORD *v9;
  _QWORD v10[2];

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = &unk_1EF8F5230;
  *(_DWORD *)(v4 + 24) = 4;
  *(_QWORD *)v4 = &off_1E817E0D0;
  sub_1C58BBD94(v4 + 32, a1, a2);
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v8 = qword_1ED830BC0[0];
  v6 = atomic_load(&qword_1EF8F71C8);
  if (v6 != -1)
  {
    v10[0] = sub_1C58B7134;
    v10[1] = &v8;
    v9 = v10;
    std::__call_once(&qword_1EF8F71C8, &v9, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v4;
}

void llvm::InstrProfiling::lowerIncrement(char **this, llvm::Value **a2)
{
  unsigned __int8 *CounterAddress;
  uint64_t v5;
  const llvm::APInt *v6;
  BOOL v7;
  uint64_t v8;
  llvm::Value *v9;
  uint64_t v10;
  const llvm::APInt *v11;
  llvm::ValueHandleBase *Step;
  unsigned __int8 **v13;
  llvm::Value *v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  llvm::MDNode **v18;
  llvm::MDNode **v19;
  uint64_t *v20;
  _WORD v21[20];
  _QWORD v22[4];
  __int16 v23;
  void *v24;
  unsigned int v25;
  _QWORD v26[7];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  CounterAddress = llvm::InstrProfiling::getCounterAddress((llvm::InstrProfiling *)this, a2);
  sub_1C4773D54((uint64_t)&v24, (uint64_t)a2, 0, 0, 0);
  if (!(*((unsigned __int8 *)this + 2) | byte_1ED8151B8)
    && (llvm::Constant::isZeroValue(a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 12])
      ? (v7 = byte_1ED815338 == 0)
      : (v7 = 1),
        v7))
  {
    v8 = *(_QWORD *)llvm::InstrProfIncrementInst::getStep((llvm::InstrProfIncrementInst *)a2, v5, v6);
    v22[0] = "pgocount";
    v23 = 259;
    v9 = sub_1C506D920((uint64_t *)&v24, v8, (uint64_t)CounterAddress, 0, 0, (uint64_t)v22);
    Step = llvm::InstrProfIncrementInst::getStep((llvm::InstrProfIncrementInst *)a2, v10, v11);
    v21[16] = 257;
    v13 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, llvm::Value *, llvm::ValueHandleBase *, _QWORD, _QWORD))(*(_QWORD *)v27 + 16))(v27, v9, Step, 0, 0);
    if (!v13)
    {
      v23 = 257;
      v13 = (unsigned __int8 **)llvm::BinaryOperator::Create(13, v9, (uint64_t)Step, (uint64_t)v22, 0);
      (*(void (**)(uint64_t, unsigned __int8 **, _WORD *, _QWORD, _QWORD))(*(_QWORD *)v28 + 16))(v28, v13, v21, v26[4], v26[5]);
      if (v25)
      {
        v18 = (llvm::MDNode **)v24;
        v19 = (llvm::MDNode **)((char *)v24 + 16 * v25);
        do
        {
          llvm::Instruction::setMetadata(v13, *(_DWORD *)v18, v18[1]);
          v18 += 2;
        }
        while (v18 != v19);
      }
    }
    v14 = sub_1C509CCE8((uint64_t *)&v24, (uint64_t *)v13, (uint64_t)CounterAddress, 0, 0);
    v15 = &unk_1ED8153F8;
    if (!word_1ED815380)
      v15 = (char *)this + 1;
    if (*v15)
    {
      v16 = this[31];
      if (v16 >= this[32])
      {
        v17 = sub_1C58BCBC8(this + 30, (uint64_t)v9, (uint64_t)v14);
      }
      else
      {
        *(_QWORD *)v16 = v9;
        *((_QWORD *)v16 + 1) = v14;
        v17 = v16 + 16;
      }
      this[31] = v17;
    }
  }
  else
  {
    v20 = (uint64_t *)llvm::InstrProfIncrementInst::getStep((llvm::InstrProfIncrementInst *)a2, v5, v6);
    sub_1C61D775C((uint64_t *)&v24, 1, (uint64_t)CounterAddress, v20, 0, 2, 1);
  }
  llvm::Instruction::eraseFromParent((llvm::Instruction *)a2);
  if (v24 != v26)
    free(v24);
}

void llvm::InstrProfiling::lowerCover(llvm::InstrProfiling *a1, llvm::Value **a2)
{
  unsigned __int8 *CounterAddress;
  uint64_t *v4;
  void *v5[2];
  _QWORD v6[16];

  v6[15] = *MEMORY[0x1E0C80C00];
  CounterAddress = llvm::InstrProfiling::getCounterAddress(a1, a2);
  sub_1C4773D54((uint64_t)v5, (uint64_t)a2, 0, 0, 0);
  v4 = (uint64_t *)llvm::ConstantInt::get((llvm::ConstantInt **)(*(_QWORD *)v6[6] + 1912), 0, 0);
  sub_1C509CCE8((uint64_t *)v5, v4, (uint64_t)CounterAddress, 0, 0);
  llvm::Instruction::eraseFromParent((llvm::Instruction *)a2);
  if (v5[0] != v6)
    free(v5[0]);
}

unsigned int *sub_1C62AE7C0(unsigned int *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 32 * v1;
        do
        {
          *v2 = -4096;
          v2 += 4;
          v3 -= 32;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C58BCA14(result);
    }
  }
  return result;
}

uint64_t llvm::InstrProfiling::emitRuntimeHook(llvm::InstrProfiling *this)
{
  uint64_t result;
  uint64_t GlobalVariable;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  llvm::PointerType *v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  llvm::PointerType *v11;
  uint64_t v12;
  char *v13;
  uint64_t ***v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t v21;
  llvm::Value *v22;
  uint64_t ****v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned __int8 *Name;
  size_t v27;
  size_t *inserted;
  _BYTE v29[32];
  __int16 v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[16];
  __int16 v34;
  uint64_t **v35;
  _QWORD **v36;
  uint64_t v37;
  void **v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  __int16 v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  _QWORD v47[2];

  v47[1] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 19) == 9)
    return 0;
  GlobalVariable = llvm::Module::getGlobalVariable(*((_QWORD *)this + 4), "__llvm_profile_runtime", 0x16uLL, 0);
  result = 0;
  if (!GlobalVariable)
  {
    v4 = ***((_QWORD ***)this + 4);
    v5 = operator new(0x78uLL);
    v5[13] = v5[13] & 0x38000000 | 1;
    v6 = (uint64_t)(v5 + 8);
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    *((_QWORD *)v5 + 2) = 0;
    *((_QWORD *)v5 + 3) = v5 + 8;
    v7 = (llvm::PointerType *)(v4 + 1960);
    v8 = *((_QWORD *)this + 4);
    v34 = 261;
    v31 = "__llvm_profile_runtime";
    v32 = 22;
    llvm::GlobalVariable::GlobalVariable((uint64_t)(v5 + 8), v8, v7, 0, 0, 0, (uint64_t)&v31, 0, 0, 0, 0);
    if (*((_DWORD *)this + 21) == 3)
    {
      v9 = (uint64_t *)*((_QWORD *)this + 19);
      if ((unint64_t)v9 >= *((_QWORD *)this + 20))
      {
        v10 = sub_1C4ABDC28((void **)this + 18, v6);
      }
      else
      {
        *v9 = v6;
        v10 = v9 + 1;
      }
      *((_QWORD *)this + 19) = v10;
      return 1;
    }
    v11 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)v7, 0, 0, 0);
    v34 = 261;
    v31 = "__llvm_profile_runtime_user";
    v32 = 27;
    v12 = *((_QWORD *)this + 4);
    v13 = (char *)operator new(0x80uLL);
    v14 = (uint64_t ***)(v13 + 8);
    *((_DWORD *)v13 + 7) = *((_DWORD *)v13 + 7) & 0x38000000 | 0x40000000;
    *(_QWORD *)v13 = 0;
    llvm::Function::Function((uint64_t *)v13 + 1, v11, 5, (llvm::Type *)0xFFFFFFFFLL, (uint64_t)&v31, v12);
    *((_QWORD *)v13 + 15) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v13 + 15, **((uint64_t ***)v13 + 1), -1, 27);
    *((_QWORD *)v13 + 15) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v13 + 15, **((uint64_t ***)v13 + 1), -1, 43);
    if (*(_BYTE *)this)
      *((_QWORD *)v13 + 15) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v13 + 15, **v14, -1, 31);
    v15 = *((_DWORD *)v13 + 10);
    v16 = v15 & 0xFFFFFFCF | 0x10;
    *((_DWORD *)v13 + 10) = v16;
    if ((v15 & 0xFu) - 7 >= 2)
    {
      if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v14) & 1) != 0)
      {
LABEL_12:
        v17 = *((_DWORD *)this + 21);
        if (v17 > 9 || ((1 << v17) & 0x320) == 0)
        {
          v25 = *((_QWORD *)this + 4);
          Name = (unsigned __int8 *)llvm::Value::getName((llvm::Value *)v14);
          inserted = llvm::Module::getOrInsertComdat(v25, Name, v27);
          llvm::GlobalObject::setComdat((llvm::GlobalObject *)v14, (llvm::Comdat *)inserted);
        }
        v18 = (_QWORD *)**((_QWORD **)this + 4);
        v30 = 257;
        v19 = operator new();
        v20 = (uint64_t **)llvm::BasicBlock::BasicBlock(v19, v18, (uint64_t)v29, (uint64_t)v14, 0);
        v21 = **v20;
        v31 = v33;
        v32 = 0x200000000;
        v37 = v21;
        v38 = &v46;
        v39 = v47;
        v40 = 0;
        v41 = 0;
        v42 = 512;
        v43 = 7;
        v44 = 0;
        v45 = 0;
        v46 = &unk_1E8167888;
        v47[0] = &unk_1E8167A08;
        v35 = v20;
        v36 = v20 + 5;
        v30 = 257;
        v22 = sub_1C506D920((uint64_t *)&v31, (uint64_t)v7, v6, 0, 0, (uint64_t)v29);
        sub_1C538D7E4((uint64_t *)&v31, v22);
        v23 = (uint64_t ****)*((_QWORD *)this + 19);
        if ((unint64_t)v23 >= *((_QWORD *)this + 20))
        {
          v24 = sub_1C4ABDC28((void **)this + 18, (uint64_t)v14);
        }
        else
        {
          *v23 = v14;
          v24 = v23 + 1;
        }
        *((_QWORD *)this + 19) = v24;
        if (v31 != v33)
          free(v31);
        return 1;
      }
      v16 = *((_DWORD *)v13 + 10);
    }
    *((_DWORD *)v13 + 10) = v16 | 0x4000;
    goto LABEL_12;
  }
  return result;
}

void llvm::InstrProfiling::lowerCoverageData(llvm::InstrProfiling *this, llvm::GlobalVariable *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  void **v7;
  uint64_t v8;
  llvm::Value *v9;
  llvm::Value *v10;
  llvm::Value **v11;
  _QWORD *v12;

  v3 = *((_QWORD *)a2 - 4);
  v4 = *(_DWORD *)(v3 + 20);
  v5 = v4 & 0x7FFFFFF;
  if ((v4 & 0x7FFFFFF) != 0)
  {
    v7 = (void **)((char *)this + 192);
    v8 = *((_QWORD *)a2 - 4);
    do
    {
      v9 = *(llvm::Value **)(v8 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF));
      v10 = llvm::Value::stripPointerCasts(v9);
      *((_DWORD *)v10 + 8) = *((_DWORD *)v10 + 8) & 0xFFFFBFC0 | 0x4008;
      v11 = (llvm::Value **)*((_QWORD *)this + 25);
      if ((unint64_t)v11 >= *((_QWORD *)this + 26))
      {
        v12 = sub_1C4ABDC28(v7, (uint64_t)v10);
      }
      else
      {
        *v11 = v10;
        v12 = v11 + 1;
      }
      *((_QWORD *)this + 25) = v12;
      if (*((_BYTE *)v9 + 16) == 5)
        sub_1C541DB24((uint64_t)v9);
      v8 += 32;
      --v5;
    }
    while (v5);
  }
  llvm::GlobalVariable::eraseFromParent(a2);
}

void llvm::InstrProfiling::emitUses(llvm::InstrProfiling *this, const llvm::Module *a2)
{
  int v3;
  BOOL v4;

  v3 = *((_DWORD *)this + 21);
  v4 = v3 == 5 || v3 == 3;
  if (v4 || v3 == 1 && (sub_1C58BB53C(*((uint64_t ***)this + 4), a2) & 1) == 0)
    llvm::appendToCompilerUsed(*((uint64_t ***)this + 4), *((llvm::UndefValue ***)this + 18), (uint64_t)(*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3);
  else
    llvm::appendToUsed(*((uint64_t ***)this + 4), *((llvm::UndefValue ***)this + 18), (uint64_t)(*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3);
  llvm::appendToUsed(*((uint64_t ***)this + 4), *((llvm::UndefValue ***)this + 21), (uint64_t)(*((_QWORD *)this + 22) - *((_QWORD *)this + 21)) >> 3);
}

void llvm::InstrProfiling::emitInitialization(llvm::InstrProfiling *this)
{
  uint64_t *v2;
  char v3;
  char *v4;
  llvm::Type *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::PointerType *v8;
  uint64_t v9;
  char *v10;
  uint64_t ***v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t **v16;
  llvm::Constant *v17;
  _BYTE v18[32];
  __int16 v19;
  void *v20;
  uint64_t v21;
  _WORD v22[16];
  uint64_t **v23;
  _QWORD **v24;
  uint64_t v25;
  void **v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _QWORD v35[2];

  v35[1] = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 232))
  {
    v2 = (uint64_t *)*((_QWORD *)this + 4);
    v3 = *((_BYTE *)this + 31);
    if (v3 >= 0)
      v4 = (char *)this + 8;
    else
      v4 = (char *)*((_QWORD *)this + 1);
    if (v3 >= 0)
      v5 = (llvm::Type *)(v3 & 0x7F);
    else
      v5 = (llvm::Type *)*((_QWORD *)this + 2);
    llvm::createProfileFileNameVar(v2, v4, v5);
  }
  v6 = sub_1C4FB7E80(*(uint64_t **)(*((_QWORD *)this + 4) + 112), "__llvm_profile_register_functions", 0x21uLL);
  if (v6)
  {
    v7 = v6;
    if (!*(_BYTE *)(v6 + 16))
    {
      v8 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(***((_QWORD ***)this + 4) + 1576), 0, 0, 0);
      v22[8] = 261;
      v20 = "__llvm_profile_init";
      v21 = 19;
      v9 = *((_QWORD *)this + 4);
      v10 = (char *)operator new(0x80uLL);
      v11 = (uint64_t ***)(v10 + 8);
      *((_DWORD *)v10 + 7) = *((_DWORD *)v10 + 7) & 0x38000000 | 0x40000000;
      *(_QWORD *)v10 = 0;
      llvm::Function::Function((uint64_t *)v10 + 1, v8, 7, (llvm::Type *)0xFFFFFFFFLL, (uint64_t)&v20, v9);
      *((_DWORD *)v10 + 10) = *((_DWORD *)v10 + 10) & 0xFFFFFF3F | 0x80;
      *((_QWORD *)v10 + 15) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v10 + 15, **((uint64_t ***)v10 + 1), -1, 27);
      if (*(_BYTE *)this)
        *((_QWORD *)v10 + 15) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v10 + 15, **v11, -1, 31);
      v12 = (_QWORD *)**((_QWORD **)this + 4);
      v19 = 257;
      v13 = operator new();
      v14 = (uint64_t **)llvm::BasicBlock::BasicBlock(v13, v12, (uint64_t)v18, (uint64_t)v11, 0);
      v15 = **v14;
      v20 = v22;
      v21 = 0x200000000;
      v25 = v15;
      v26 = &v34;
      v27 = v35;
      v28 = 0;
      v29 = 0;
      v30 = 512;
      v31 = 7;
      v32 = 0;
      v33 = 0;
      v34 = &unk_1E8167888;
      v35[0] = &unk_1E8167A08;
      v23 = v14;
      v24 = v14 + 5;
      v16 = *(uint64_t ***)(v7 + 24);
      v19 = 257;
      sub_1C4774778((uint64_t *)&v20, v16, v7, 0, 0, (uint64_t)v18, 0);
      LLVMBuildRetVoid_0((uint64_t *)&v20);
      llvm::appendToGlobalCtors(*((llvm **)this + 4), (llvm::Module *)v11, 0, 0, v17);
      if (v20 != v22)
        free(v20);
    }
  }
}

_QWORD *sub_1C62AEFA8(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C61DAB08(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C62AF020(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x800000000;
  }
  return v5;
}

_QWORD *sub_1C62AF020(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C58BC138(a1, v6);
  v8 = 0;
  sub_1C61DAB08(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_1C62AF0D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 152 * v6;
    do
    {
      *v7 = -4096;
      v7 += 19;
      v8 -= 152;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v13 = 0;
        sub_1C61DAB08(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        v10 = v13;
        *v13 = *(_QWORD *)v4;
        v10[2] = 0x800000000;
        v10[1] = v10 + 3;
        v11 = (uint64_t)(v10 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_1C486F510(v11, v4 + 8);
        ++*(_DWORD *)(a1 + 8);
        v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12)
          free(v12);
      }
      v4 += 152;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1C62AF1C8()
{
  return 1;
}

uint64_t sub_1C62AF1D0(uint64_t a1, char *a2, _WORD *a3, _OWORD *a4, _BYTE **a5)
{
  uint64_t v10;
  size_t v11;
  _BYTE *v12;

  v10 = sub_1C47AD050(a1, 0, 0);
  *(_BYTE *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_1E7F9E8D8;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = &unk_1E819E898;
  *(_QWORD *)(v10 + 152) = &off_1E819E9A0;
  *(_QWORD *)(v10 + 160) = &off_1E7F9E8F8;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  v11 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v11);
  *(_WORD *)(a1 + 10) = *(_WORD *)(a1 + 10) & 0xFFF8 | *a3 & 7;
  *(_OWORD *)(a1 + 32) = *a4;
  v12 = *a5;
  *(_BYTE *)(a1 + 128) = **a5;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v12;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void sub_1C62AF2BC(__int128 *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t *v5;

  v4 = sub_1C47AD050((uint64_t)qword_1ED8158B8, 0, 0);
  xmmword_1ED815938 = 0u;
  *(_OWORD *)&qword_1ED815948 = 0u;
  *((_QWORD *)&xmmword_1ED815938 + 1) = &unk_1E8134CB8;
  qword_1ED8158B8[0] = (uint64_t)&unk_1E8134C50;
  qword_1ED815958 = (uint64_t)&unk_1E819E320;
  qword_1ED815960 = (uint64_t)&unk_1E8134CD8;
  qword_1ED815978 = (uint64_t)&qword_1ED815960;
  llvm::cl::Option::setArgStr(v4, "vp-counters-per-site", 0x14uLL);
  xmmword_1ED8158D8 = *a1;
  v5 = *a2;
  *(_QWORD *)&xmmword_1ED815938 = **a2;
  byte_1ED815950 = 1;
  qword_1ED815948 = *v5;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED8158B8);
}

void sub_1C62AF384(_WORD *a1, __int128 *a2, char **a3)
{
  uint64_t v6;
  char *v7;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED815138, 0, 0);
  byte_1ED8151B8 = 0;
  qword_1ED8151C0 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED8151C8 = 0;
  qword_1ED815138 = (uint64_t)&unk_1E819E898;
  qword_1ED8151D0 = (uint64_t)&off_1E819E9A0;
  qword_1ED8151D8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED8151F0 = (uint64_t)&qword_1ED8151D8;
  llvm::cl::Option::setArgStr(v6, "instrprof-atomic-counter-update-all", 0x23uLL);
  word_1ED815142 = word_1ED815142 & 0xFFF8 | *a1 & 7;
  xmmword_1ED815158 = *a2;
  v7 = *a3;
  byte_1ED8151B8 = **a3;
  byte_1ED8151C9 = 1;
  byte_1ED8151C8 = *v7;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED815138);
}

void sub_1C62AF45C(_WORD *a1, __int128 *a2, char **a3)
{
  uint64_t v6;
  char *v7;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED8151F8, 0, 0);
  byte_1ED815278 = 0;
  qword_1ED815280 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED815288 = 0;
  qword_1ED8151F8 = (uint64_t)&unk_1E819E898;
  qword_1ED815290 = (uint64_t)&off_1E819E9A0;
  qword_1ED815298 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED8152B0 = (uint64_t)&qword_1ED815298;
  llvm::cl::Option::setArgStr(v6, "atomic-counter-update-promoted", 0x1EuLL);
  word_1ED815202 = word_1ED815202 & 0xFFF8 | *a1 & 7;
  xmmword_1ED815218 = *a2;
  v7 = *a3;
  byte_1ED815278 = **a3;
  byte_1ED815289 = 1;
  byte_1ED815288 = *v7;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED8151F8);
}

void sub_1C62AF534(_WORD *a1, int **a2, __int128 *a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED815438, 0, 0);
  dword_1ED8154B8 = 0;
  qword_1ED8154C0 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED8154C8 = 0;
  qword_1ED815438 = (uint64_t)&unk_1E819E3B0;
  qword_1ED8154D8 = (uint64_t)&off_1E7F95260;
  qword_1ED8154D0 = (uint64_t)&unk_1E819E2C0;
  qword_1ED8154F0 = (uint64_t)&qword_1ED8154D8;
  word_1ED815442 = word_1ED815442 & 0xFFF8 | *a1 & 7;
  llvm::cl::Option::setArgStr(v6, "max-counter-promotions-per-loop", 0x1FuLL);
  dword_1ED8154B8 = **a2;
  byte_1ED8154CC = 1;
  dword_1ED8154C8 = dword_1ED8154B8;
  xmmword_1ED815458 = *a3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED815438);
}

void sub_1C62AF608(_WORD *a1, int **a2, __int128 *a3)
{
  uint64_t v6;
  int *v7;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED8154F8, 0, 0);
  dword_1ED815578 = 0;
  qword_1ED815580 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED815588 = 0;
  qword_1ED8154F8 = (uint64_t)&unk_1E819E418;
  qword_1ED815598 = (uint64_t)&off_1E7FA9D80;
  qword_1ED815590 = (uint64_t)&unk_1E819E230;
  qword_1ED8155B0 = (uint64_t)&qword_1ED815598;
  word_1ED815502 = word_1ED815502 & 0xFFF8 | *a1 & 7;
  llvm::cl::Option::setArgStr(v6, "max-counter-promotions", 0x16uLL);
  v7 = *a2;
  dword_1ED815578 = **a2;
  byte_1ED81558C = 1;
  dword_1ED815588 = *v7;
  xmmword_1ED815518 = *a3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED8154F8);
}

void sub_1C62AF6D8(_WORD *a1, int **a2, __int128 *a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED8155B8, 0, 0);
  dword_1ED815638 = 0;
  qword_1ED815640 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED815648 = 0;
  qword_1ED8155B8 = (uint64_t)&unk_1E819E3B0;
  qword_1ED815658 = (uint64_t)&off_1E7F95260;
  qword_1ED815650 = (uint64_t)&unk_1E819E2C0;
  qword_1ED815670 = (uint64_t)&qword_1ED815658;
  word_1ED8155C2 = word_1ED8155C2 & 0xFFF8 | *a1 & 7;
  llvm::cl::Option::setArgStr(v6, "speculative-counter-promotion-max-exiting", 0x29uLL);
  dword_1ED815638 = **a2;
  byte_1ED81564C = 1;
  dword_1ED815648 = dword_1ED815638;
  xmmword_1ED8155D8 = *a3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED8155B8);
}

void sub_1C62AF7AC(_WORD *a1, char **a2, __int128 *a3)
{
  uint64_t v6;
  char *v7;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED815678, 0, 0);
  byte_1ED8156F8 = 0;
  qword_1ED815700 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED815708 = 0;
  qword_1ED815678 = (uint64_t)&unk_1E819E898;
  qword_1ED815718 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED815710 = (uint64_t)&off_1E819E9A0;
  qword_1ED815730 = (uint64_t)&qword_1ED815718;
  word_1ED815682 = word_1ED815682 & 0xFFF8 | *a1 & 7;
  llvm::cl::Option::setArgStr(v6, "speculative-counter-promotion-to-loop", 0x25uLL);
  v7 = *a2;
  byte_1ED8156F8 = **a2;
  byte_1ED815709 = 1;
  byte_1ED815708 = *v7;
  xmmword_1ED815698 = *a3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED815678);
}

void sub_1C62AF884(_WORD *a1, char **a2, __int128 *a3)
{
  uint64_t v6;
  char *v7;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED815738, 0, 0);
  byte_1ED8157B8 = 0;
  qword_1ED8157C0 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED8157C8 = 0;
  qword_1ED815738 = (uint64_t)&unk_1E819E898;
  qword_1ED8157D8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED8157D0 = (uint64_t)&off_1E819E9A0;
  qword_1ED8157F0 = (uint64_t)&qword_1ED8157D8;
  word_1ED815742 = word_1ED815742 & 0xFFF8 | *a1 & 7;
  llvm::cl::Option::setArgStr(v6, "iterative-counter-promotion", 0x1BuLL);
  v7 = *a2;
  byte_1ED8157B8 = **a2;
  byte_1ED8157C9 = 1;
  byte_1ED8157C8 = *v7;
  xmmword_1ED815758 = *a3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED815738);
}

void sub_1C62AF95C(_WORD *a1, char **a2, __int128 *a3)
{
  uint64_t v6;
  char *v7;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED8157F8, 0, 0);
  byte_1ED815878 = 0;
  qword_1ED815880 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED815888 = 0;
  qword_1ED8157F8 = (uint64_t)&unk_1E819E898;
  qword_1ED815898 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED815890 = (uint64_t)&off_1E819E9A0;
  qword_1ED8158B0 = (uint64_t)&qword_1ED815898;
  word_1ED815802 = word_1ED815802 & 0xFFF8 | *a1 & 7;
  llvm::cl::Option::setArgStr(v6, "skip-ret-exit-block", 0x13uLL);
  v7 = *a2;
  byte_1ED815878 = **a2;
  byte_1ED815889 = 1;
  byte_1ED815888 = *v7;
  xmmword_1ED815818 = *a3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED8157F8);
}

_QWORD *sub_1C62AFA34(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_1C614ECAC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C62AFAA0(a1, a2, v8);
    v7 = *a2;
    v5[2] = 0;
    v5[3] = 0;
    *v5 = v7;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C62AFAA0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C58BCB10(a1, v6);
  v8 = 0;
  sub_1C614ECAC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C62AFB50(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  _QWORD *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C614ECAC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      v10 = v12;
      *v12 = *(_QWORD *)a2;
      v11 = *(_OWORD *)(a2 + 8);
      v10[3] = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(v10 + 1) = v11;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 32;
  }
  return result;
}

_QWORD *llvm::PGOInstrumentationGenCreateVar::run@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  BOOL v6;
  char *v7;
  llvm::Type *v8;
  llvm::Type *v9;
  llvm::UndefValue *v11;

  v5 = *(_BYTE *)(a1 + 23);
  v6 = v5 < 0;
  if (v5 >= 0)
    v7 = (char *)a1;
  else
    v7 = *(char **)a1;
  v8 = (llvm::Type *)(v5 & 0x7F);
  if (v6)
    v9 = *(llvm::Type **)(a1 + 8);
  else
    v9 = v8;
  llvm::createProfileFileNameVar(a2, v7, v9);
  v11 = (llvm::UndefValue *)sub_1C58BD0F0((uint64_t **)a2, 1);
  llvm::appendToCompilerUsed((uint64_t **)a2, &v11, 1);
  return llvm::InstCountPass::run(a3);
}

uint64_t llvm::PGOInstrumentationUse::run@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ResultImpl;
  char v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, (uint64_t)a2)+ 8);
  v22 = v21;
  v20 = v21;
  ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::ProfileSummaryAnalysis::Key, (uint64_t)a2);
  v9 = *(_BYTE *)(a1 + 23);
  v10 = v9 < 0;
  if (v9 >= 0)
    v11 = a1;
  else
    v11 = *(_QWORD *)a1;
  v12 = v9 & 0x7F;
  if (v10)
    v13 = *(_QWORD *)(a1 + 8);
  else
    v13 = v12;
  v14 = *(_BYTE *)(a1 + 47);
  v15 = v14;
  if (v14 >= 0)
    v16 = a1 + 24;
  else
    v16 = *(_QWORD *)(a1 + 24);
  v17 = v14 & 0x7F;
  if (v15 >= 0)
    v18 = v17;
  else
    v18 = *(_QWORD *)(a1 + 32);
  result = sub_1C58BF888(a2, v11, v13, v16, v18, *(_QWORD *)(a1 + 56), (uint64_t (*)(uint64_t, uint64_t))sub_1C58CA69C, (uint64_t)&v22, (uint64_t (*)(uint64_t, uint64_t))sub_1C58CA6C4, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))sub_1C58CA6EC, (uint64_t)&v20, ResultImpl + 8, *(_BYTE *)(a1 + 48));
  if ((result & 1) == 0)
    return (uint64_t)llvm::InstCountPass::run(a4);
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_QWORD *)(a4 + 88) = 0;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_DWORD *)(a4 + 64) = 2;
  return result;
}

void **sub_1C62AFDC4(void **a1)
{
  _QWORD *v2;
  void **v3;

  v3 = a1 + 3;
  v2 = a1[3];
  if (v2)
  {
    sub_1C58C9B90(a1 + 3, v2);
    operator delete(*v3);
  }
  if (*a1)
  {
    sub_1C58C9B90(a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_1C62AFE18(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    v5 = sub_1C62AFDC4(v2);
    MEMORY[0x1CAA32FC0](v5, 0x20C40A759441BLL);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

__n128 sub_1C62AFE70(const char **a1, _WORD *a2, __int128 *a3, __n128 *a4)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED816898, "pgo-test-profile-file", 0x15uLL);
  sub_1C49C7D74(a1, (uint64_t)&qword_1ED816898);
  word_1ED8168A2 = (32 * (*a2 & 3)) | word_1ED8168A2 & 0xFF9F;
  xmmword_1ED8168C8 = *a3;
  result = *a4;
  xmmword_1ED8168B8 = (__int128)*a4;
  return result;
}

__n128 sub_1C62AFEF8(const char **a1, _WORD *a2, __int128 *a3, __n128 *a4)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED816980, "pgo-test-profile-remapping-file", 0x1FuLL);
  sub_1C49C7D74(a1, (uint64_t)&qword_1ED816980);
  word_1ED81698A = (32 * (*a2 & 3)) | word_1ED81698A & 0xFF9F;
  xmmword_1ED8169B0 = *a3;
  result = *a4;
  xmmword_1ED8169A0 = (__int128)*a4;
  return result;
}

void sub_1C62AFF80(int **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED815C98, 0, 0);
  dword_1ED815D18 = 0;
  qword_1ED815D20 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED815D28 = 0;
  qword_1ED815C98 = (uint64_t)&unk_1E819E3B0;
  qword_1ED815D30 = (uint64_t)&unk_1E819E2C0;
  qword_1ED815D38 = (uint64_t)&off_1E7F95260;
  qword_1ED815D50 = (uint64_t)&qword_1ED815D38;
  sub_1C62B0034(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED815C98);
}

__n128 sub_1C62B0034(int **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED815C98, "icp-max-annotations", 0x13uLL);
  dword_1ED815D18 = **a1;
  byte_1ED815D2C = 1;
  dword_1ED815D28 = dword_1ED815D18;
  word_1ED815CA2 = word_1ED815CA2 & 0xFF9F | (32 * (*a2 & 3));
  word_1ED815CA2 = word_1ED815CA2 & 0xFFF8 | *a3 & 7;
  result = *a4;
  xmmword_1ED815CB8 = (__int128)*a4;
  return result;
}

void sub_1C62B00C4(_WORD *a1, __int128 *a2, uint64_t *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED815980, 0, 0);
  dword_1ED815A00 = 0;
  qword_1ED815A08 = (uint64_t)&unk_1E8134AE8;
  unk_1ED815A10 = 0;
  qword_1ED815980 = (uint64_t)&unk_1E8134A30;
  qword_1ED815A18 = (uint64_t)&unk_1E8134A98;
  unk_1ED815A20 = &qword_1ED815980;
  qword_1ED815A28 = (uint64_t)&unk_1ED815A38;
  qword_1ED815A30 = 0x800000000;
  qword_1ED815BB8 = (uint64_t)&unk_1E8134BD8;
  qword_1ED815BD0 = (uint64_t)&qword_1ED815BB8;
  sub_1C58CA62C(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED815980);
}

void sub_1C62B017C(_WORD *a1, _WORD *a2, int **a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED816A68, 0, 0);
  dword_1ED816AE8 = 0;
  qword_1ED816AF0 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED816AF8 = 0;
  qword_1ED816A68 = (uint64_t)&unk_1E819E3B0;
  qword_1ED816B00 = (uint64_t)&unk_1E819E2C0;
  qword_1ED816B08 = (uint64_t)&off_1E7F95260;
  qword_1ED816B20 = (uint64_t)&qword_1ED816B08;
  sub_1C62B0230(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED816A68);
}

__n128 sub_1C62B0230(_WORD *a1, _WORD *a2, int **a3, __n128 *a4)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED816A68, "pgo-memop-count-threshold", 0x19uLL);
  word_1ED816A72 = word_1ED816A72 & 0xFF9F | (32 * (*a1 & 3));
  word_1ED816A72 = word_1ED816A72 & 0xFFF8 | *a2 & 7;
  dword_1ED816AE8 = **a3;
  byte_1ED816AFC = 1;
  dword_1ED816AF8 = dword_1ED816AE8;
  result = *a4;
  xmmword_1ED816A88 = (__int128)*a4;
  return result;
}

_QWORD *llvm::PoisonCheckingPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t ***v5;
  _QWORD *result;

  v3 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 == a1 + 24)
    return llvm::InstCountPass::run(a2);
  do
  {
    if (v4)
      v5 = (uint64_t ***)(v4 - 56);
    else
      v5 = 0;
    result = (_QWORD *)sub_1C58CCE24(v5);
    v4 = *(_QWORD *)(v4 + 8);
  }
  while (v4 != v3);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = a2 + 32;
  *(_QWORD *)(a2 + 8) = a2 + 32;
  *(_QWORD *)(a2 + 16) = 2;
  *(_QWORD *)(a2 + 48) = a2 + 80;
  *(_QWORD *)(a2 + 56) = a2 + 80;
  *(_DWORD *)(a2 + 64) = 2;
  return result;
}

void sub_1C62B0360(char **a1, __int128 *a2)
{
  uint64_t v4;
  char *v5;

  v4 = sub_1C47AD050((uint64_t)qword_1ED816EE8, 0, 0);
  byte_1ED816F68 = 0;
  qword_1ED816F70 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED816F78 = 0;
  qword_1ED816EE8[0] = (uint64_t)&unk_1E819E898;
  qword_1ED816F80 = (uint64_t)&off_1E819E9A0;
  qword_1ED816F88 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED816FA0 = (uint64_t)&qword_1ED816F88;
  llvm::cl::Option::setArgStr(v4, "poison-checking-function-local", 0x1EuLL);
  v5 = *a1;
  byte_1ED816F68 = **a1;
  byte_1ED816F79 = 1;
  byte_1ED816F78 = *v5;
  xmmword_1ED816F08 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED816EE8);
}

uint64_t llvm::ModuleSanitizerCoveragePass::run@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[1040];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  sub_1C58CDD98((uint64_t)v12, (int *)a1, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  v10 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, a2)+ 8);
  v11 = v10;
  if (sub_1C58CDF84((uint64_t)v12, a2, (uint64_t (*)(_QWORD, _QWORD))sub_1C58D572C, (uint64_t)&v11, (unsigned __int8 *)sub_1C58D5754, (uint64_t)&v10, v7, v8))
  {
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)(a4 + 88) = 0;
    *(_OWORD *)(a4 + 72) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_QWORD *)a4 = a4 + 32;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_QWORD *)(a4 + 16) = 2;
    *(_QWORD *)(a4 + 48) = a4 + 80;
    *(_QWORD *)(a4 + 56) = a4 + 80;
    *(_DWORD *)(a4 + 64) = 2;
  }
  else
  {
    llvm::InstCountPass::run(a4);
  }
  return sub_1C58D2580((uint64_t)v12);
}

llvm::vfs *llvm::createModuleSanitizerCoverageLegacyPassPass(__int128 *a1, uint64_t *a2, uint64_t *a3)
{
  llvm::vfs *v6;

  v6 = (llvm::vfs *)operator new();
  return sub_1C58D26E4(v6, a1, a2, a3);
}

void sub_1C62B0578(__n128 *a1, _WORD *a2, int **a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED816FA8, 0, 0);
  dword_1ED817028 = 0;
  qword_1ED817030 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED817038 = 0;
  qword_1ED816FA8 = (uint64_t)&unk_1E819E418;
  qword_1ED817040 = (uint64_t)&unk_1E819E230;
  qword_1ED817048 = (uint64_t)&off_1E7FA9D80;
  qword_1ED817060 = (uint64_t)&qword_1ED817048;
  sub_1C58D55A0(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED816FA8);
}

void sub_1C62B0614(__n128 *a1, _WORD *a2, char **a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED8172A8, 0, 0);
  byte_1ED817328 = 0;
  qword_1ED817330 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED817338 = 0;
  qword_1ED8172A8 = (uint64_t)&unk_1E819E898;
  qword_1ED817340 = (uint64_t)&off_1E819E9A0;
  qword_1ED817348 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED817360 = (uint64_t)&qword_1ED817348;
  sub_1C58D5624(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED8172A8);
}

void sub_1C62B06B8(__n128 *a1, _WORD *a2, char **a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED817968, 0, 0);
  byte_1ED8179E8 = 0;
  qword_1ED8179F0 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED8179F8 = 0;
  qword_1ED817968 = (uint64_t)&unk_1E819E898;
  qword_1ED817A00 = (uint64_t)&off_1E819E9A0;
  qword_1ED817A08 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED817A20 = (uint64_t)&qword_1ED817A08;
  sub_1C58D56A8(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED817968);
}

uint64_t llvm::createSoftPointerAuthPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C58D5CB0(v1);
}

void llvm::SoftPointerAuthPass::run(uint64_t **a1@<X1>, const llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  _BYTE v4[96];
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  memset(v4, 0, 89);
  if ((sub_1C58D5D90((uint64_t ***)v4, a1, a2) & 1) != 0)
  {
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)(a3 + 88) = 0;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_DWORD *)(a3 + 64) = 2;
  }
  else
  {
    llvm::InstCountPass::run(a3);
  }
  if (v6)
  {
    if (*(uint64_t **)&v4[88] != &v5)
      free(*(void **)&v4[88]);
  }
}

double sub_1C62B0864(uint64_t a1, llvm::BasicBlock **a2)
{
  void *v3;
  llvm::BasicBlock *v4;
  uint64_t Context;
  double result;
  llvm::BasicBlock **v7;

  if (*(_BYTE *)(a1 + 136))
  {
    v3 = *(void **)a1;
    if (*(_QWORD *)a1 != a1 + 16)
    {
      v7 = a2;
      free(v3);
      a2 = v7;
    }
    *(_BYTE *)(a1 + 136) = 0;
  }
  v4 = *a2;
  Context = llvm::BasicBlock::getContext(*a2);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 120) = &unk_1E8167888;
  *(_QWORD *)&result = 0x200000000;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  *(_QWORD *)(a1 + 64) = Context;
  *(_QWORD *)(a1 + 72) = a1 + 120;
  *(_QWORD *)(a1 + 128) = &unk_1E8167A08;
  *(_QWORD *)(a1 + 80) = a1 + 128;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 512;
  *(_BYTE *)(a1 + 102) = 7;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = (char *)v4 + 40;
  *(_BYTE *)(a1 + 136) = 1;
  return result;
}

void llvm::ValueProfileCollector::get(uint64_t **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *a1;
  if (a2)
  {
    if (a2 == 1)
    {
      v5 = v3[1];
      v4 = v3 + 1;
      v4[2] = (uint64_t)a3;
      sub_1C62B0A14((char *)v4, v5);
      v4[2] = 0;
    }
  }
  else
  {
    sub_1C62B0C08(*a1, (uint64_t)a3);
  }
}

char *sub_1C62B0A14(char *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a2 + 72;
  v3 = *(_QWORD *)(a2 + 80);
  if (v3 != a2 + 72)
  {
    v4 = result;
    do
    {
      v5 = v3 - 24;
      v6 = v3 == 0;
      v3 = *(_QWORD *)(v3 + 8);
      if (v6)
        v5 = 0;
      v7 = v5 + 40;
      v8 = *(_QWORD *)(v5 + 48);
      if (v8 != v7)
      {
        do
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v8)
            v10 = v8 - 24;
          else
            v10 = 0;
          if (*(_BYTE *)(v10 + 16) == 84)
            result = sub_1C58D8B98(v4, v10);
          v8 = v9;
        }
        while (v9 != v7);
      }
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t sub_1C62B0AA8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  int v9;

  if (byte_1ED833EC8)
  {
    v3 = *(_QWORD *)(a2 - 32);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 16) && *(_QWORD *)(v3 + 24) == *(_QWORD *)(a2 + 72))
      {
        v4 = result;
        v9 = 0;
        result = sub_1C4ECD910(*(uint64_t **)(result + 8), a2, &v9);
        if ((_DWORD)result)
        {
          if ((v9 == 321 || v9 == 168)
            && *(_BYTE *)(*(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64) + 16) != 16)
          {
            v5 = *(_QWORD *)(v4 + 16);
            *(_QWORD *)&v7 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64);
            *((_QWORD *)&v7 + 1) = a2;
            v8 = a2;
            v6 = *(_QWORD *)(v5 + 8);
            if (v6 >= *(_QWORD *)(v5 + 16))
            {
              result = (uint64_t)sub_1C4DCFAFC((void **)v5, (uint64_t)&v7);
            }
            else
            {
              *(_OWORD *)v6 = v7;
              *(_QWORD *)(v6 + 16) = v8;
              result = v6 + 24;
            }
            *(_QWORD *)(v5 + 8) = result;
          }
        }
      }
    }
  }
  return result;
}

char *sub_1C62B0B8C(char *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  __int128 v4;
  uint64_t v5;

  if (*(_BYTE *)(*(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64) + 16) != 16)
  {
    v2 = *((_QWORD *)result + 2);
    *(_QWORD *)&v4 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64);
    *((_QWORD *)&v4 + 1) = a2;
    v5 = a2;
    v3 = *(_QWORD *)(v2 + 8);
    if (v3 >= *(_QWORD *)(v2 + 16))
    {
      result = sub_1C4DCFAFC((void **)v2, (uint64_t)&v4);
    }
    else
    {
      *(_OWORD *)v3 = v4;
      *(_QWORD *)(v3 + 16) = v5;
      result = (char *)(v3 + 24);
    }
    *(_QWORD *)(v2 + 8) = result;
  }
  return result;
}

void sub_1C62B0C08(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  sub_1C62ADDDC(*a1, &v10);
  v3 = v10;
  v4 = v11;
  if (v10 != v11)
  {
    v5 = *(char **)(a2 + 8);
    do
    {
      v6 = *v3;
      *(_QWORD *)&v8 = *(_QWORD *)(*v3 - 32);
      *((_QWORD *)&v8 + 1) = v6;
      v9 = v6;
      if ((unint64_t)v5 >= *(_QWORD *)(a2 + 16))
      {
        v5 = sub_1C4DCFAFC((void **)a2, (uint64_t)&v8);
      }
      else
      {
        v7 = v8;
        *((_QWORD *)v5 + 2) = v9;
        *(_OWORD *)v5 = v7;
        v5 += 24;
      }
      *(_QWORD *)(a2 + 8) = v5;
      ++v3;
    }
    while (v3 != v4);
    v3 = v10;
  }
  if (v3)
  {
    v11 = v3;
    operator delete(v3);
  }
}

_QWORD *llvm::ThreadSanitizerPass::run@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t ResultImpl;
  _QWORD *result;
  uint64_t v8[283];

  sub_1C58D8C2C((uint64_t)v8);
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, (uint64_t)a1);
  result = (_QWORD *)sub_1C58D8CD0(v8, a1, (_QWORD *)(ResultImpl + 8));
  if (!(_DWORD)result)
    return llvm::InstCountPass::run(a3);
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)(a3 + 88) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_DWORD *)(a3 + 64) = 2;
  return result;
}

double llvm::ModuleThreadSanitizerPass::run@<D0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  double result;
  char *v4;
  uint64_t **v5;

  v5 = a1;
  llvm::getOrCreateSanitizerCtorAndInitFunctions(a1, "tsan.module_ctor", (llvm::UndefValue *)0x10, "__tsan_init", 0xBuLL, 0, 0, &v4, 0, 0, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1C58DBFE0, (uint64_t)&v5, 0, 0);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = a2 + 32;
  *(_QWORD *)(a2 + 8) = a2 + 32;
  *(_QWORD *)&result = 2;
  *(_QWORD *)(a2 + 16) = 2;
  *(_QWORD *)(a2 + 48) = a2 + 80;
  *(_QWORD *)(a2 + 56) = a2 + 80;
  *(_DWORD *)(a2 + 64) = 2;
  return result;
}

uint64_t llvm::createThreadSanitizerLegacyPassPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C58DBF10(v1);
}

llvm::PointerType *sub_1C62B0E30(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t **a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  llvm::PointerType *v14;
  uint64_t v16[6];

  v16[5] = *MEMORY[0x1E0C80C00];
  v16[0] = a6;
  v16[1] = a7;
  v16[2] = a8;
  v16[3] = a9;
  v16[4] = a10;
  v14 = (llvm::PointerType *)llvm::FunctionType::get(a5, v16, 5, 0);
  return llvm::Module::getOrInsertFunction(a1, a2, a3, v14, a4);
}

llvm::cl::Option *sub_1C62B0F0C(llvm::cl::Option *a1, char *a2, _BYTE **a3, __n128 *a4, _WORD *a5)
{
  uint64_t v10;

  v10 = sub_1C47AD050((uint64_t)a1, 0, 0);
  *(_BYTE *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_1E7F9E8D8;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = &unk_1E819E898;
  *(_QWORD *)(v10 + 152) = &off_1E819E9A0;
  *(_QWORD *)(v10 + 160) = &off_1E7F9E8F8;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  sub_1C58DCB94(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

void sub_1C62B0FC0(char **a1, __n128 *a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED817BA8, 0, 0);
  byte_1ED817C28 = 0;
  qword_1ED817C30 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED817C38 = 0;
  qword_1ED817BA8 = (uint64_t)&unk_1E819E898;
  qword_1ED817C40 = (uint64_t)&off_1E819E9A0;
  qword_1ED817C48 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED817C60 = (uint64_t)&qword_1ED817C48;
  sub_1C58DCC24(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED817BA8);
}

void sub_1C62B1064(char **a1, __n128 *a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED817C68, 0, 0);
  byte_1ED817CE8 = 0;
  qword_1ED817CF0 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED817CF8 = 0;
  qword_1ED817C68 = (uint64_t)&unk_1E819E898;
  qword_1ED817D00 = (uint64_t)&off_1E819E9A0;
  qword_1ED817D08 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED817D20 = (uint64_t)&qword_1ED817D08;
  sub_1C58DCCA8(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED817C68);
}

void sub_1C62B1108(char **a1, __n128 *a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED817D28, 0, 0);
  byte_1ED817DA8 = 0;
  qword_1ED817DB0 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED817DB8 = 0;
  qword_1ED817D28 = (uint64_t)&unk_1E819E898;
  qword_1ED817DC0 = (uint64_t)&off_1E819E9A0;
  qword_1ED817DC8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED817DE0 = (uint64_t)&qword_1ED817DC8;
  sub_1C58DCD2C(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED817D28);
}

void sub_1C62B11AC(char **a1, __n128 *a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED817DE8, 0, 0);
  byte_1ED817E68 = 0;
  qword_1ED817E70 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED817E78 = 0;
  qword_1ED817DE8 = (uint64_t)&unk_1E819E898;
  qword_1ED817E80 = (uint64_t)&off_1E819E9A0;
  qword_1ED817E88 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED817EA0 = (uint64_t)&qword_1ED817E88;
  sub_1C58DCDB0(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED817DE8);
}

void sub_1C62B1250(char **a1, __n128 *a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED817EA8, 0, 0);
  byte_1ED817F28 = 0;
  qword_1ED817F30 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED817F38 = 0;
  qword_1ED817EA8 = (uint64_t)&unk_1E819E898;
  qword_1ED817F40 = (uint64_t)&off_1E819E9A0;
  qword_1ED817F48 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED817F60 = (uint64_t)&qword_1ED817F48;
  sub_1C58DCE34(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED817EA8);
}

uint64_t llvm::createHWAddressSanitizerLegacyPassPass(llvm *this, char a2, char a3)
{
  char v5;
  uint64_t v6;

  v5 = (char)this;
  v6 = operator new();
  return sub_1C58DD218(v6, v5, a2, a3);
}

llvm::raw_ostream *llvm::HWAddressSanitizerPass::printPipeline(_BYTE *a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  sub_1C62B13C0(a2, a3, a4);
  sub_1C4816AD8(a2, "<");
  if (*a1)
    sub_1C4816AD8(a2, "kernel;");
  if (a1[1])
    sub_1C4816AD8(a2, "recover");
  return sub_1C4816AD8(a2, ">");
}

llvm::raw_ostream *sub_1C62B13C0(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  llvm::raw_ostream *result;

  v6 = sub_1C58E49C4();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (llvm::raw_ostream *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(a1, v9, v8);
  if (v8)
  {
    result = (llvm::raw_ostream *)memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

uint64_t sub_1C62B1458(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v13 = *a2;
  v14 = 0;
  sub_1C61D73E4((uint64_t)&v11, a1, &v13, &v14);
  v4 = v11;
  if (v12)
  {
    v8 = *a2;
    v9 = 0;
    v10 = 0;
    sub_1C52E1390((uint64_t *)(a1 + 24), &v8);
    if (*((_QWORD *)&v8 + 1))
      operator delete(*((void **)&v8 + 1));
    v5 = *(_QWORD *)(a1 + 24);
    v6 = ((unint64_t)(*(_QWORD *)(a1 + 32) - v5) >> 5) - 1;
    *(_DWORD *)(v4 + 8) = v6;
  }
  else
  {
    v6 = *(_DWORD *)(v11 + 8);
    v5 = *(_QWORD *)(a1 + 24);
  }
  return v5 + 32 * v6 + 8;
}

llvm::PointerType *sub_1C62B1508(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  llvm::PointerType *v11;
  uint64_t v13[9];

  v13[8] = *MEMORY[0x1E0C80C00];
  v13[0] = a3;
  v13[1] = a4;
  v13[2] = a5;
  v13[3] = a6;
  v13[4] = a7;
  v13[5] = a8;
  v13[6] = a9;
  v13[7] = a10;
  v11 = (llvm::PointerType *)llvm::FunctionType::get(a2, v13, 8, 0);
  return llvm::Module::getOrInsertFunction(a1, "__hwasan_personality_wrapper", 0x1CuLL, v11, 0);
}

uint64_t sub_1C62B15D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)(a1 + 56) = 0x400000000;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  *(_QWORD *)(a1 + 104) = 0x800000000;
  *(_BYTE *)(a1 + 176) = 0;
  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 208) = a1 + 184;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1 + 184);
    }
    else
    {
      *(_QWORD *)(a1 + 208) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 208) = 0;
  }
  return a1;
}

uint64_t sub_1C62B1678(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 96);
  if (v2 != (void *)(a1 + 112))
    free(v2);
  v3 = *(void **)(a1 + 48);
  if (v3 != (void *)(a1 + 64))
    free(v3);
  return sub_1C62B16C0(a1);
}

uint64_t sub_1C62B16C0(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_1C58E47A4(&v3);
  MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  return a1;
}

_QWORD *sub_1C62B1704(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = (_QWORD *)a1[9];
  if (v2 != a1 + 11)
    free(v2);
  v3 = (_QWORD *)a1[5];
  if (v3 != a1 + 7)
    free(v3);
  v4 = (_QWORD *)a1[1];
  if (v4 != a1 + 3)
    free(v4);
  return a1;
}

void sub_1C62B1760(__int128 *a1, _WORD *a2, const char **a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EF8F5628, "hwasan-memory-access-callback-prefix", 0x24uLL);
  xmmword_1EF8F5648 = *a1;
  word_1EF8F5632 = (32 * (*a2 & 3)) | word_1EF8F5632 & 0xFF9F;
  sub_1C58E4818(*a3);
}

void sub_1C62B17CC(_WORD *a1, char **a2, _WORD *a3, __n128 *a4, _WORD *a5)
{
  sub_1C47AD050((uint64_t)&qword_1ED818628, 0, 0);
  byte_1ED8186A8 = 0;
  qword_1ED8186B0 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED8186B8 = 0;
  qword_1ED818628 = (uint64_t)&unk_1E819E898;
  qword_1ED8186C0 = (uint64_t)&off_1E819E9A0;
  qword_1ED8186C8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED8186E0 = (uint64_t)&qword_1ED8186C8;
  sub_1C62B1888(a1, a2, a3, a4, a5);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED818628);
}

__n128 sub_1C62B1888(_WORD *a1, char **a2, _WORD *a3, __n128 *a4, _WORD *a5)
{
  __int16 v10;
  char *v11;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED818628, "hwasan-use-stack-safety", 0x17uLL);
  v10 = word_1ED818632;
  word_1ED818632 = word_1ED818632 & 0xFF9F | (32 * (*a1 & 3));
  v11 = *a2;
  byte_1ED8186A8 = **a2;
  byte_1ED8186B9 = 1;
  byte_1ED8186B8 = *v11;
  word_1ED818632 = v10 & 0xFF9F | (32 * (*a3 & 3));
  result = *a4;
  xmmword_1ED818648 = (__int128)*a4;
  word_1ED818632 = word_1ED818632 & 0xFFF8 | *a5 & 7;
  return result;
}

void sub_1C62B1930(_WORD *a1, int **a2, _WORD *a3, __n128 *a4, _WORD *a5)
{
  sub_1C47AD050((uint64_t)&qword_1EF8F5498, 0, 0);
  xmmword_1EF8F5518 = 0u;
  *(_OWORD *)&qword_1EF8F5528 = 0u;
  *((_QWORD *)&xmmword_1EF8F5518 + 1) = &unk_1E8149708;
  qword_1EF8F5498 = (uint64_t)&unk_1E81496A0;
  qword_1EF8F5538 = (uint64_t)&unk_1E819E2F0;
  qword_1EF8F5540 = (uint64_t)&unk_1E8149770;
  qword_1EF8F5558 = (uint64_t)&qword_1EF8F5540;
  sub_1C62B19F0(a1, a2, a3, a4, a5);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F5498);
}

__n128 sub_1C62B19F0(_WORD *a1, int **a2, _WORD *a3, __n128 *a4, _WORD *a5)
{
  __int16 v10;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1EF8F5498, "hwasan-max-lifetimes-for-alloca", 0x1FuLL);
  v10 = word_1EF8F54A2;
  word_1EF8F54A2 = word_1EF8F54A2 & 0xFF9F | (32 * (*a1 & 3));
  *(_QWORD *)&xmmword_1EF8F5518 = **a2;
  byte_1EF8F5530 = 1;
  qword_1EF8F5528 = xmmword_1EF8F5518;
  word_1EF8F54A2 = v10 & 0xFF9F | (32 * (*a3 & 3));
  result = *a4;
  xmmword_1EF8F54B8 = (__int128)*a4;
  word_1EF8F54A2 = word_1EF8F54A2 & 0xFFF8 | *a5 & 7;
  return result;
}

void sub_1C62B1A94(__n128 *a1, _WORD *a2, char **a3, _WORD *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED818928, 0, 0);
  byte_1ED8189A8 = 0;
  qword_1ED8189B0 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED8189B8 = 0;
  qword_1ED818928 = (uint64_t)&unk_1E819E898;
  qword_1ED8189C0 = (uint64_t)&off_1E819E9A0;
  qword_1ED8189C8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED8189E0 = (uint64_t)&qword_1ED8189C8;
  sub_1C62B1B48(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED818928);
}

__n128 sub_1C62B1B48(__n128 *a1, _WORD *a2, char **a3, _WORD *a4)
{
  __n128 result;
  char *v9;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED818928, "hwasan-globals", 0xEuLL);
  result = *a1;
  xmmword_1ED818948 = (__int128)*a1;
  word_1ED818932 = word_1ED818932 & 0xFF9F | (32 * (*a2 & 3));
  v9 = *a3;
  byte_1ED8189A8 = **a3;
  byte_1ED8189B9 = 1;
  byte_1ED8189B8 = *v9;
  word_1ED818932 = word_1ED818932 & 0xFFF8 | *a4 & 7;
  return result;
}

void sub_1C62B1BDC(__n128 *a1, _WORD *a2, char **a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED818AA8, 0, 0);
  byte_1ED818B28 = 0;
  qword_1ED818B30 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED818B38 = 0;
  qword_1ED818AA8 = (uint64_t)&unk_1E819E898;
  qword_1ED818B40 = (uint64_t)&off_1E819E9A0;
  qword_1ED818B48 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED818B60 = (uint64_t)&qword_1ED818B48;
  sub_1C58E48F0(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED818AA8);
}

void sub_1C62B1C80(__int128 *a1, _WORD *a2, int **a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1EF8F5560, 0, 0);
  xmmword_1EF8F55E0 = 0u;
  *(_OWORD *)&qword_1EF8F55F0 = 0u;
  *((_QWORD *)&xmmword_1EF8F55E0 + 1) = &unk_1E8171608;
  qword_1EF8F5560 = (uint64_t)&unk_1E81715A0;
  qword_1EF8F5600 = (uint64_t)&unk_1E819EA38;
  qword_1EF8F5608 = (uint64_t)&unk_1E81716C8;
  qword_1EF8F5620 = (uint64_t)&qword_1EF8F5608;
  llvm::cl::Option::setArgStr(v6, "hwasan-mapping-offset", 0x15uLL);
  xmmword_1EF8F5580 = *a1;
  word_1EF8F556A = (32 * (*a2 & 3)) | word_1EF8F556A & 0xFF9F;
  *(_QWORD *)&xmmword_1EF8F55E0 = **a3;
  byte_1EF8F55F8 = 1;
  qword_1EF8F55F0 = xmmword_1EF8F55E0;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F5560);
}

void sub_1C62B1D60(__n128 *a1, _WORD *a2, char **a3, _WORD *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED818E68, 0, 0);
  byte_1ED818EE8 = 0;
  qword_1ED818EF0 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED818EF8 = 0;
  qword_1ED818E68 = (uint64_t)&unk_1E819E898;
  qword_1ED818F00 = (uint64_t)&off_1E819E9A0;
  qword_1ED818F08 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED818F20 = (uint64_t)&qword_1ED818F08;
  sub_1C62B1E14(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED818E68);
}

__n128 sub_1C62B1E14(__n128 *a1, _WORD *a2, char **a3, _WORD *a4)
{
  __n128 result;
  char *v9;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED818E68, "hwasan-instrument-landing-pads", 0x1EuLL);
  result = *a1;
  xmmword_1ED818E88 = (__int128)*a1;
  word_1ED818E72 = word_1ED818E72 & 0xFF9F | (32 * (*a2 & 3));
  v9 = *a3;
  byte_1ED818EE8 = **a3;
  byte_1ED818EF9 = 1;
  byte_1ED818EF8 = *v9;
  word_1ED818E72 = word_1ED818E72 & 0xFFF8 | *a4 & 7;
  return result;
}

void sub_1C62B1EA8(__n128 *a1, _WORD *a2, char **a3, _WORD *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED818F28, 0, 0);
  byte_1ED818FA8 = 0;
  qword_1ED818FB0 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED818FB8 = 0;
  qword_1ED818F28 = (uint64_t)&unk_1E819E898;
  qword_1ED818FC0 = (uint64_t)&off_1E819E9A0;
  qword_1ED818FC8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED818FE0 = (uint64_t)&qword_1ED818FC8;
  sub_1C62B1F5C(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED818F28);
}

__n128 sub_1C62B1F5C(__n128 *a1, _WORD *a2, char **a3, _WORD *a4)
{
  __n128 result;
  char *v9;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED818F28, "hwasan-use-short-granules", 0x19uLL);
  result = *a1;
  xmmword_1ED818F48 = (__int128)*a1;
  word_1ED818F32 = word_1ED818F32 & 0xFF9F | (32 * (*a2 & 3));
  v9 = *a3;
  byte_1ED818FA8 = **a3;
  byte_1ED818FB9 = 1;
  byte_1ED818FB8 = *v9;
  word_1ED818F32 = word_1ED818F32 & 0xFFF8 | *a4 & 7;
  return result;
}

void sub_1C62B1FF0(__n128 *a1, _WORD *a2, char **a3, _WORD *a4)
{
  sub_1C47AD050((uint64_t)&qword_1EF8F5258, 0, 0);
  byte_1EF8F52D8 = 0;
  qword_1EF8F52E0 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1EF8F52E8 = 0;
  qword_1EF8F5258 = (uint64_t)&unk_1E819E898;
  qword_1EF8F52F0 = (uint64_t)&off_1E819E9A0;
  qword_1EF8F52F8 = (uint64_t)&off_1E7F9E8F8;
  qword_1EF8F5310 = (uint64_t)&qword_1EF8F52F8;
  sub_1C62B20A4(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F5258);
}

__n128 sub_1C62B20A4(__n128 *a1, _WORD *a2, char **a3, _WORD *a4)
{
  __n128 result;
  char *v9;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1EF8F5258, "hwasan-instrument-personality-functions", 0x27uLL);
  result = *a1;
  xmmword_1EF8F5278 = (__int128)*a1;
  word_1EF8F5262 = word_1EF8F5262 & 0xFF9F | (32 * (*a2 & 3));
  v9 = *a3;
  byte_1EF8F52D8 = **a3;
  byte_1EF8F52E9 = 1;
  byte_1EF8F52E8 = *v9;
  word_1EF8F5262 = word_1EF8F5262 & 0xFFF8 | *a4 & 7;
  return result;
}

void sub_1C62B2138(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  void *v5;
  __int128 v6;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  v5 = v7;
  v6 = xmmword_1C6612EE0;
  sub_1C5050690(a1, a2, a3, &v5);
  std::string::__init(a4, (const std::string::value_type *)v5, v6);
  if (v5 != v7)
    free(v5);
}

uint64_t *sub_1C62B21C4(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  i = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == -8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  v10 = (char *)operator new(a3 + 33, (std::align_val_t)8uLL);
  v11 = v10;
  v12 = v10 + 32;
  if (a3)
    memcpy(v10 + 32, a2, a3);
  v12[a3] = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = a3;
  *((_DWORD *)v11 + 6) = 0;
  *i = (uint64_t)v11;
  ++*(_DWORD *)(a1 + 12);
  for (i = (uint64_t *)(*(_QWORD *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i == -8;
  return i;
}

_OWORD *sub_1C62B22C4(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  void **v5;
  _OWORD *v6;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = (void **)sub_1C54232F8(a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v8 = v5;
    v6 = operator new(0x30uLL);
    v6[2] = *a3;
    v9 = v12;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v9;
    *v8 = v6;
    v10 = **(_QWORD **)a1;
    v11 = (uint64_t *)v6;
    if (v10)
    {
      *(_QWORD *)a1 = v10;
      v11 = (uint64_t *)*v8;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v11);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

void sub_1C62B236C(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = sub_1C62B23B8((uint64_t)a1, a2);
  if (a1 + 1 != (uint64_t **)v3)
  {
    v4 = v3;
    sub_1C49C7D1C(a1, v3);
    operator delete(v4);
  }
}

_QWORD *sub_1C62B23B8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = sub_1C4E4FA7C(v5, (uint64_t)(v3 + 4), a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_1C4E4FA7C(v5, a2, (uint64_t)(v6 + 4)))
    return v2;
  return v6;
}

uint64_t sub_1C62B2444@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C62B24D8((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C62B25E8(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_OWORD *)result = *(_OWORD *)a2;
    *(_DWORD *)(result + 16) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_1C62B24D8(uint64_t *a1, const void **a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t v12;
  const void *v13;
  size_t v14;
  uint64_t result;
  BOOL v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*a2, (uint64_t)a2[1]);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = v6 + 24 * (HashValue & v9);
      v13 = *(const void **)v12;
      if (*(_QWORD *)v12 == -2)
      {
        if (*a2 == (const void *)-2)
          goto LABEL_18;
      }
      else if (v13 == (const void *)-1)
      {
        if (*a2 == (const void *)-1)
          goto LABEL_18;
      }
      else
      {
        v14 = (size_t)a2[1];
        if (v14 == *(_QWORD *)(v12 + 8) && (!v14 || !memcmp(*a2, *(const void **)v12, v14)))
        {
LABEL_18:
          result = 1;
          goto LABEL_19;
        }
      }
      if (v13 == (const void *)-1)
        break;
      if (v8)
        v16 = 0;
      else
        v16 = v13 == (const void *)-2;
      if (v16)
        v8 = v6 + 24 * v11;
      HashValue = i + v11;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_19:
  *a3 = v12;
  return result;
}

_QWORD *sub_1C62B25E8(uint64_t a1, uint64_t a2, const void **a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C58EF5D0(a1, v7);
  v9 = 0;
  sub_1C62B24D8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C62B2694(uint64_t result)
{
  char v1;
  _BYTE *v2;
  uint64_t v3;

  v1 = *(_BYTE *)(result + 8);
  v2 = *(_BYTE **)result;
  *(_QWORD *)result = 0;
  if ((v1 & 1) == 0)
  {
    if (!v2)
      return result;
    v3 = result;
    sub_1C49C7E54(result, v2);
    return v3;
  }
  if (v2)
  {
    v3 = result;
    (*(void (**)(_BYTE *))(*(_QWORD *)v2 + 8))(v2);
    return v3;
  }
  return result;
}

void sub_1C62B26EC(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t sub_1C62B26F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      do
      {
        v4 = *(_QWORD *)(*(_QWORD *)a1 + v3);
        if (v4 != -8 && v4 != 0)
          sub_1C62B2770(v4);
        v3 += 8;
      }
      while (8 * v2 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void sub_1C62B2770(uint64_t a1)
{
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  JUMPOUT(0x1CAA32FB4);
}

void llvm::lto::findThinLTOModule(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  char v4;
  llvm::BitcodeModule *v5;
  llvm::BitcodeModule *ThinLTOModule;
  __int128 v7;
  __int128 v8;
  uint64_t v10[2];
  _OWORD v11[2];
  llvm::BitcodeModule *v12[3];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a1[1];
  v11[0] = *a1;
  v11[1] = v3;
  llvm::getBitcodeModuleList(v11, (uint64_t)v12);
  v4 = v13;
  v5 = v12[0];
  if ((v13 & 1) != 0)
  {
    *(_BYTE *)(a2 + 64) |= 1u;
    *(_QWORD *)a2 = v5;
  }
  else
  {
    ThinLTOModule = llvm::lto::findThinLTOModule(v12[0], (v12[1] - v12[0]) >> 6);
    if (ThinLTOModule)
    {
      *(_BYTE *)(a2 + 64) &= ~1u;
      v7 = *((_OWORD *)ThinLTOModule + 1);
      *(_OWORD *)a2 = *(_OWORD *)ThinLTOModule;
      *(_OWORD *)(a2 + 16) = v7;
      v8 = *((_OWORD *)ThinLTOModule + 3);
      *(_OWORD *)(a2 + 32) = *((_OWORD *)ThinLTOModule + 2);
      *(_OWORD *)(a2 + 48) = v8;
    }
    else
    {
      if (!atomic_load(qword_1ED836B58))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
      v10[0] = 3;
      v10[1] = qword_1ED836B58[0];
      sub_1C58F80F8((uint64_t *)a2, v10);
      *(_BYTE *)(a2 + 64) |= 1u;
      v4 = v13;
      v5 = v12[0];
    }
    if ((v4 & 1) != 0)
    {
      if (v5)
        (*(void (**)(llvm::BitcodeModule *))(*(_QWORD *)v5 + 8))(v5);
    }
    else if (v5)
    {
      operator delete(v5);
    }
  }
}

_QWORD *sub_1C62B2938(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E817E730;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &off_1E817E798;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

_QWORD *sub_1C62B29B8(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817E798;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C62B29F8(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v12 = 0;
  v8 = sub_1C6159B48(a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v12);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C62B2A70(v11);
}

uint64_t sub_1C62B2A70(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C62B2A88(_QWORD *a1)
{
  sub_1C62B2938(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C62B2AAC(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C62B2AB8(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C62B2AC8(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_3:
    v4 = &off_1E817E7E8;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_3;
  }
  return result;
}

_QWORD *sub_1C62B2B34(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C62B2B3C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817E798;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62B2B8C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C62B2B94(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C62B2BA8(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C62B2BBC(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C62B2BD0(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

llvm::raw_ostream *sub_1C62B2BFC(llvm::raw_ostream *a1, llvm::Twine *this)
{
  llvm::Twine::print(this, a1);
  return a1;
}

_BYTE *sub_1C62B2C28(uint64_t a1, char *a2)
{
  _BYTE *result;
  char v5;
  _QWORD *v6;
  char *v7;
  _BYTE *v8;

  result = (_BYTE *)operator new();
  v5 = *a2;
  *(_QWORD *)result = &unk_1E817E9E8;
  result[8] = v5;
  v8 = result;
  v6 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v6 >= *(_QWORD *)(a1 + 16))
  {
    v7 = sub_1C4D62F9C((char **)a1, (uint64_t *)&v8);
    result = v8;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = 0;
    if (result)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *v6 = result;
    *(_QWORD *)(a1 + 8) = v6 + 1;
  }
  return result;
}

char *sub_1C62B2CC8(char *result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 96))
  {
    if (result[96])
    {
      return (char *)sub_1C62B2D0C((uint64_t)result, a2);
    }
    else
    {
      result = sub_1C58F6C24(result, (__int128 *)a2);
      result[96] = 1;
    }
  }
  else if (result[96])
  {
    result = (char *)sub_1C58F6BA8((uint64_t)result);
    result[96] = 0;
  }
  return result;
}

uint64_t sub_1C62B2D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  v4 = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v4;
  v5 = *(_QWORD *)(a2 + 88);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(unsigned int **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v5;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
  }
  return a1;
}

_QWORD *sub_1C62B2DA8(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E817E990;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C62B2DEC(_QWORD *a1)
{
  _QWORD *v1;

  *a1 = &unk_1E817E990;
  v1 = (_QWORD *)a1[1];
  if (v1 != a1 + 3)
    free(v1);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62B2E4C(_QWORD *a1)
{
  *a1 = &unk_1E817E9C0;
  llvm::AAResults::~AAResults((llvm::AAResults *)(a1 + 1));
  return a1;
}

void sub_1C62B2E84()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62B2E98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return llvm::VerifierPass::run((_BYTE *)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *sub_1C62B2EA0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_1C62B2EB4(a1 + 8, a2, a3, a4);
}

uint64_t sub_1C62B2EAC()
{
  return 1;
}

llvm::raw_ostream *sub_1C62B2EB4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  char *v7;
  uint64_t v8;
  size_t v9;
  const char *v10;
  size_t v11;
  llvm::raw_ostream *result;

  v7 = sub_1C58F6E84();
  v10 = (const char *)a3(a4, v7, v8);
  v11 = v9;
  result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  if (v9 > *((_QWORD *)a2 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(a2, v10, v9);
  if (v9)
  {
    result = (llvm::raw_ostream *)memcpy(result, v10, v9);
    *((_QWORD *)a2 + 4) += v11;
  }
  return result;
}

uint64_t sub_1C62B2F4C(uint64_t a1)
{
  sub_1C62B303C((void **)(a1 + 1904));
  sub_1C62B303C((void **)(a1 + 1824));
  sub_1C62B303C((void **)(a1 + 1744));
  sub_1C62B30DC((char **)(a1 + 1664));
  sub_1C62B303C((void **)(a1 + 1584));
  sub_1C62B303C((void **)(a1 + 1504));
  sub_1C62B303C((void **)(a1 + 1424));
  sub_1C62B303C((void **)(a1 + 1344));
  sub_1C62B30DC((char **)(a1 + 1264));
  sub_1C62B30DC((char **)(a1 + 1184));
  sub_1C62B30DC((char **)(a1 + 1104));
  sub_1C4959DB4((char **)(a1 + 1024));
  sub_1C4959DB4((char **)(a1 + 944));
  sub_1C4959DB4((char **)(a1 + 864));
  sub_1C4959DB4((char **)(a1 + 784));
  sub_1C4959DB4((char **)(a1 + 704));
  sub_1C4959DB4((char **)(a1 + 624));
  sub_1C62B303C((void **)(a1 + 544));
  sub_1C62B303C((void **)(a1 + 464));
  sub_1C62B303C((void **)(a1 + 384));
  sub_1C62B303C((void **)(a1 + 304));
  sub_1C62B303C((void **)(a1 + 224));
  sub_1C62B303C((void **)(a1 + 144));
  if (*(_BYTE *)(a1 + 128))
  {
    sub_1C58F6BA8(a1 + 32);
    *(_BYTE *)(a1 + 128) = 0;
  }
  return a1;
}

void **sub_1C62B303C(void **result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void **v6;
  char *v7;
  void **v8;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if (!(_DWORD)v2)
    goto LABEL_2;
  v7 = (char *)*result;
  v8 = result;
  v3 = 32 * v2;
  do
  {
    v4 = *(char **)&v7[v3 - 8];
    if (&v7[v3 - 32] == v4)
    {
      v4 = &v7[v3 - 32];
      v5 = 4;
    }
    else
    {
      if (!v4)
        goto LABEL_11;
      v5 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_11:
    v3 -= 32;
  }
  while (v3);
  result = v8;
  v1 = (void **)*v8;
LABEL_2:
  if (v1 != result + 2)
  {
    v6 = result;
    free(v1);
    return v6;
  }
  return result;
}

char **sub_1C62B30DC(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 32 * v3;
    while (1)
    {
      v5 = *(char **)&v2[v4 - 8];
      if (&v2[v4 - 32] == v5)
      {
        v5 = &v2[v4 - 32];
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_6:
      v4 -= 32;
      if (!v4)
      {
        v2 = *a1;
        break;
      }
    }
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_1C62B316C(uint64_t a1)
{
  void *v2;

  llvm::DotCfgChangeReporter::~DotCfgChangeReporter((llvm::DotCfgChangeReporter *)(a1 + 640));
  llvm::InLineChangePrinter::~InLineChangePrinter((llvm::InLineChangePrinter *)(a1 + 584));
  sub_1C62B31CC(a1 + 552);
  llvm::IRChangedPrinter::~IRChangedPrinter((llvm::IRChangedPrinter *)(a1 + 504));
  v2 = *(void **)(a1 + 360);
  if (v2 != (void *)(a1 + 376))
    free(v2);
  sub_1C62B3250((llvm::TimePassesHandler *)(a1 + 128));
  llvm::PrintIRInstrumentation::~PrintIRInstrumentation((char **)a1);
}

uint64_t sub_1C62B31CC(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)(*(_QWORD *)a1 + v4);
        if (v6 != -8 && v6 != 0)
        {
          sub_1C61B8160(v6 + 8);
          MEMORY[0x1CAA32FB4](v6, 8);
        }
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*(void **)a1);
  return a1;
}

void sub_1C62B3250(llvm::TimePassesHandler *a1)
{
  _QWORD *v2;

  llvm::TimePassesHandler::print(a1);
  v2 = (_QWORD *)*((_QWORD *)a1 + 16);
  if (v2 != (_QWORD *)((char *)a1 + 144))
    free(v2);
  sub_1C62B3294((uint64_t)a1 + 96);
  llvm::TimerGroup::~TimerGroup(a1);
}

uint64_t sub_1C62B3294(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)(*(_QWORD *)a1 + v4);
        if (v6 != -8 && v6 != 0)
        {
          sub_1C62B3318((char **)(v6 + 8));
          MEMORY[0x1CAA32FB4](v6, 8);
        }
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*(void **)a1);
  return a1;
}

char **sub_1C62B3318(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  llvm::Timer *v6;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      v6 = *(llvm::Timer **)&v5[v4];
      *(_QWORD *)&v5[v4] = 0;
      if (v6)
      {
        llvm::Timer::~Timer(v6);
        MEMORY[0x1CAA32FC0]();
      }
      v4 -= 8;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_1C62B3394(int **a1, uint64_t *a2, __n128 *a3)
{
  sub_1C47AD050((uint64_t)qword_1ED819168, 0, 0);
  dword_1ED8191E8 = 0;
  qword_1ED8191F0 = (uint64_t)&off_1E817E7E8;
  *(_QWORD *)&dword_1ED8191F8 = 0;
  qword_1ED819168[0] = (uint64_t)off_1E817E730;
  qword_1ED819200 = (uint64_t)&off_1E817E798;
  qword_1ED819208 = (uint64_t)qword_1ED819168;
  qword_1ED819210 = (uint64_t)&unk_1ED819220;
  qword_1ED819218 = 0x800000000;
  qword_1ED8193A0 = (uint64_t)&off_1E817E8B8;
  qword_1ED8193B8 = (uint64_t)&qword_1ED8193A0;
  sub_1C58F7838(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED819168);
}

void sub_1C62B3440()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62B3454()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E817E8B8;
  return result;
}

void sub_1C62B3478(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E817E8B8;
}

void sub_1C62B3494(unsigned __int8 *a1, size_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  _QWORD v11[5];
  int v12;
  char v13;

  v11[0] = a1;
  v11[1] = a2;
  v11[2] = a4;
  v11[3] = a5;
  v11[4] = &off_1E817E7E8;
  v13 = 1;
  v12 = a3;
  v7 = sub_1C58F78DC((unint64_t)v11);
  v8 = qword_1ED819210 + 48 * qword_1ED819218;
  v9 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 32) = &off_1E817E808;
  v10 = *(_BYTE *)(v7 + 44);
  *(_DWORD *)(v8 + 40) = *(_DWORD *)(v7 + 40);
  *(_BYTE *)(v8 + 44) = v10;
  *(_QWORD *)(v8 + 32) = &off_1E817E7E8;
  LODWORD(qword_1ED819218) = qword_1ED819218 + 1;
  llvm::cl::AddLiteralOption(qword_1ED819208, a1, a2);
}

void sub_1C62B3548(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1ED819210, a1, 48, &v8);
  v2 = (_OWORD *)qword_1ED819210;
  if ((_DWORD)qword_1ED819218)
  {
    v3 = qword_1ED819210 + 48 * qword_1ED819218;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E817E808;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E817E7E8;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1ED819210;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1ED819220)
    free(v2);
  qword_1ED819210 = (uint64_t)v1;
  HIDWORD(qword_1ED819218) = v7;
}

uint64_t sub_1C62B3614(uint64_t a1, const void **a2)
{
  uint64_t v4;

  v4 = 0;
  if (!sub_1C62B24D8((uint64_t *)a1, a2, &v4) || v4 == *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16))
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 80 * *(unsigned int *)(v4 + 16);
}

uint64_t llvm::LinkDiagnosticInfo::print(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 128))(a2, *(_QWORD *)(a1 + 16));
}

uint64_t llvm::IRMover::StructTypeKeyInfo::getEmptyKey(llvm::IRMover::StructTypeKeyInfo *this)
{
  return -4096;
}

uint64_t llvm::IRMover::StructTypeKeyInfo::getTombstoneKey(llvm::IRMover::StructTypeKeyInfo *this)
{
  return -8192;
}

uint64_t llvm::IRMover::IdentifiedStructTypeSet::addNonOpaque(llvm::IRMover::IdentifiedStructTypeSet *this, llvm::StructType *a2)
{
  llvm::StructType *v3;
  _BYTE v4[24];

  v3 = a2;
  return sub_1C62B3E88((uint64_t)v4, (uint64_t)this + 24, (uint64_t *)&v3);
}

int32x2_t llvm::IRMover::IdentifiedStructTypeSet::switchToNonOpaque(int32x2_t *this, llvm::StructType *a2)
{
  int32x2_t result;
  llvm::StructType *v5;
  _QWORD v6[3];

  v5 = a2;
  sub_1C62B3E88((uint64_t)v6, (uint64_t)&this[3], (uint64_t *)&v5);
  v6[0] = 0;
  if (sub_1C5913F38((uint64_t)*this, this[2].i32[0], (uint64_t)a2, v6))
  {
    *(_QWORD *)v6[0] = -8192;
    result = vadd_s32(this[1], (int32x2_t)0x1FFFFFFFFLL);
    this[1] = result;
  }
  return result;
}

uint64_t llvm::IRMover::IdentifiedStructTypeSet::addOpaque(llvm::IRMover::IdentifiedStructTypeSet *this, llvm::StructType *a2)
{
  llvm::StructType *v3;
  _BYTE v4[24];

  v3 = a2;
  return sub_1C5913FC0((uint64_t)v4, (uint64_t)this, (uint64_t *)&v3);
}

uint64_t llvm::IRMover::IdentifiedStructTypeSet::findNonOpaque(uint64_t a1, const void *a2, const void *a3, char a4)
{
  int v5;
  uint64_t result;
  BOOL v7;
  const void *v8[2];
  char v9;
  unint64_t *v10;

  v8[0] = a2;
  v8[1] = a3;
  v9 = a4;
  v10 = 0;
  v5 = sub_1C591417C(*(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 40), v8, &v10);
  result = 0;
  if (v5)
    v7 = v10 == (unint64_t *)(*(_QWORD *)(a1 + 24) + 8 * *(unsigned int *)(a1 + 40));
  else
    v7 = 1;
  if (!v7)
    return *v10;
  return result;
}

uint64_t llvm::IRMover::IdentifiedStructTypeSet::hasType(llvm::IRMover::IdentifiedStructTypeSet *this, const void **a2)
{
  BOOL v5;
  const void **v6;
  const void ***v7;

  if ((*((_BYTE *)a2 + 9) & 1) == 0)
    return sub_1C61B75F0(*(_QWORD *)this, *((_DWORD *)this + 4), (uint64_t)a2, &v7);
  v6 = a2;
  v7 = 0;
  if (sub_1C62B3F10(*((_QWORD *)this + 3), *((_DWORD *)this + 10), (uint64_t *)&v6, &v7))
    v5 = v7 == (const void ***)(*((_QWORD *)this + 3) + 8 * *((unsigned int *)this + 10));
  else
    v5 = 1;
  return !v5 && *v7 == a2;
}

void sub_1C62B389C()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62B38B0(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;

  if (*(_BYTE *)(result + 24))
    return sub_1C62B3918(result, a2);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(_BYTE *)(result + 24) = 1;
  return result;
}

uint64_t sub_1C62B3918(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  sub_1C4E43068(a1);
  MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v4;
  v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  return a1;
}

void sub_1C62B398C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 != a4)
  {
    v6 = (uint64_t *)a4[1];
    if (v6 != a2)
    {
      llvm::SymbolTableListTraits<llvm::GlobalVariable>::transferNodesFromList(a1, a3, (uint64_t)a4, a4[1]);
      if (v6 != a4)
      {
        v7 = *v6;
        v8 = *a4;
        *(_QWORD *)(v8 + 8) = v6;
        *v6 = v8;
        v9 = *a2;
        *(_QWORD *)(v7 + 8) = a2;
        *a4 = v9;
        *(_QWORD *)(v9 + 8) = a4;
        *a2 = v7;
      }
    }
  }
}

_QWORD *sub_1C62B3A04(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4850EC8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C55BA394((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

BOOL sub_1C62B3A60(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned __int8 v9;

  sub_1C62B3BA0(a1, a2, (uint64_t)&v8);
  v4 = v9;
  if (v9)
  {
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 144);
    if (v6 >= *(_DWORD *)(a1 + 148))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 136, a1 + 152, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 144);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 144);
  }
  return v4 != 0;
}

void *sub_1C62B3AEC(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  uint64_t v13;
  uint64_t v14;

  if (a2 != a3)
  {
    v13 = v3;
    v14 = v4;
    v6 = a2;
    v7 = (uint64_t)result;
    v8 = (uint64_t)result + 136;
    do
    {
      v11 = *v6;
      result = sub_1C61EAB5C((uint64_t)v12, v7, &v11);
      if (v12[16])
      {
        v9 = *v6;
        v10 = *(unsigned int *)(v7 + 144);
        if (v10 >= *(unsigned int *)(v7 + 148))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod(v8, v7 + 152, v10 + 1, 8);
          v10 = *(unsigned int *)(v7 + 144);
        }
        *(_QWORD *)(*(_QWORD *)(v7 + 136) + 8 * v10) = v9;
        ++*(_DWORD *)(v7 + 144);
      }
      ++v6;
    }
    while (v6 != a3);
  }
  return result;
}

_QWORD *sub_1C62B3BA0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_1C62B3C58(a1, a2, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v8 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v9 = 16;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(unsigned int *)(a1 + 16);
    }
    v10 = 0;
    v11 = v8 + 8 * v9;
  }
  else
  {
    result = sub_1C62B3D08((_DWORD *)a1, (uint64_t)a2, a2, v14);
    v7 = result;
    *result = *a2;
    v12 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v13 = 16;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(unsigned int *)(a1 + 16);
    }
    v11 = v12 + 8 * v13;
    v10 = 1;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 16) = v10;
  return result;
}

uint64_t sub_1C62B3C58(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C62B3D08(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 16;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C5913D18((uint64_t)a1, v7);
  v9 = 0;
  sub_1C62B3C58((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C62B3DC4(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C62B3C58((uint64_t)v5, a2, &v10);
      *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C62B3E88(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  const void ***v7;
  char v8;
  uint64_t v9;
  const void ***v10;

  v10 = 0;
  result = sub_1C62B3F10(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a3, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C62B4008(a2, a3, v10);
    v7 = (const void ***)result;
    *(_QWORD *)result = *a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_1C62B3F10(uint64_t a1, int a2, uint64_t *a3, const void ****a4)
{
  int v8;
  int v9;
  const void **v10;
  unsigned int v11;
  const void ***v12;
  const void **v13;
  const llvm::StructType *v14;
  const llvm::StructType *v15;
  uint64_t result;
  const void ***v17;
  int v18;
  BOOL v19;
  int v20;
  _BOOL4 isEqual;
  _BOOL4 v22;
  const void ***v23;

  if (a2)
  {
    v8 = sub_1C54358A4(*a3);
    v9 = a2 - 1;
    v10 = (const void **)*a3;
    v11 = v8 & (a2 - 1);
    v12 = (const void ***)(a1 + 8 * v11);
    v13 = *v12;
    if (llvm::IRMover::StructTypeKeyInfo::isEqual(v10, *v12, v14))
    {
      result = 1;
    }
    else
    {
      v17 = 0;
      v18 = 1;
      while (v13 != (const void **)-4096)
      {
        if (v17)
          v19 = 0;
        else
          v19 = v13 == (const void **)-8192;
        if (v19)
          v17 = v12;
        v23 = v17;
        v20 = v18 + 1;
        v11 = (v11 + v18) & v9;
        v12 = (const void ***)(a1 + 8 * v11);
        v13 = *v12;
        isEqual = llvm::IRMover::StructTypeKeyInfo::isEqual(v10, *v12, v15);
        v17 = v23;
        v22 = isEqual;
        result = 1;
        v18 = v20;
        if (v22)
          goto LABEL_4;
      }
      result = 0;
      if (v17)
        v12 = v17;
    }
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_4:
  *a4 = v12;
  return result;
}

const void ***sub_1C62B4008(uint64_t a1, uint64_t *a2, const void ***a3)
{
  int v5;
  unsigned int v6;
  const void ***v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5913E80(a1, v6);
  v8 = 0;
  sub_1C62B3F10(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != (const void **)-4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C62B40B8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  const void ***v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C62B3F10(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), a2, &v9);
      *v9 = (const void **)*a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C62B4168(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C5913F38(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v10);
      *v10 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

void sub_1C62B4210(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;

  if (a2)
  {
    v2 = 32 * a2;
    v3 = (_QWORD *)(a1 + 16);
    do
    {
      if ((*(v3 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = (void *)*(v3 - 1);
        if (v4)
        {
          *v3 = v4;
          operator delete(v4);
        }
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
}

uint64_t sub_1C62B4268(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C6144EA0((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t llvm::createELFObjectWriter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;

  result = operator new();
  v9 = *a1;
  *a1 = 0;
  *(_WORD *)(result + 64) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)result = &off_1E817F2C0;
  *(_QWORD *)(result + 8) = v9;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = a2;
  *(_BYTE *)(result + 104) = a3;
  *a4 = result;
  return result;
}

uint64_t llvm::createELFDwoObjectWriter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t result;
  uint64_t v11;

  result = operator new();
  v11 = *a1;
  *a1 = 0;
  *(_WORD *)(result + 64) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)result = &off_1E817F3A0;
  *(_QWORD *)(result + 8) = v11;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = a2;
  *(_QWORD *)(result + 104) = a3;
  *(_BYTE *)(result + 112) = a4;
  *a5 = result;
  return result;
}

void sub_1C62B4424(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    v3 = (_QWORD *)(*(_QWORD *)a1 + 16);
    do
    {
      if ((*(v3 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = (void *)*(v3 - 1);
        if (v4)
        {
          *v3 = v4;
          operator delete(v4);
        }
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
}

void sub_1C62B4484(unsigned int *a1)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v2 = a1[2];
  if (v2 || a1[3])
  {
    v3 = a1[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_1C59189B8(a1);
      return;
    }
    if (!(_DWORD)v3)
    {
LABEL_13:
      *((_QWORD *)a1 + 1) = 0;
      return;
    }
    v4 = *(_QWORD **)a1;
    v5 = 32 * v3;
    while (1)
    {
      if (*v4 == -8192)
        goto LABEL_11;
      if (*v4 != -4096)
        break;
LABEL_12:
      v4 += 4;
      v5 -= 32;
      if (!v5)
        goto LABEL_13;
    }
    v6 = (void *)v4[1];
    if (v6)
    {
      v4[2] = v6;
      operator delete(v6);
    }
LABEL_11:
    *v4 = -4096;
    goto LABEL_12;
  }
}

_QWORD *sub_1C62B452C(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C52A0CF8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C62142F8((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

uint64_t llvm::MCAsmBackend::MCAsmBackend(uint64_t result, int a2)
{
  *(_QWORD *)result = off_1E817F410;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t llvm::MCAsmBackend::createObjectWriter@<X0>(llvm::MCAsmBackend *this@<X0>, llvm::raw_pwrite_stream *a2@<X1>, uint64_t *a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 56))(&v11);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  if (v6 != 5)
    __asm { BR              X10 }
  v7 = v11;
  v11 = 0;
  v10 = v7;
  llvm::createMachObjectWriter(&v10, (uint64_t)a2, *((_DWORD *)this + 2) == 1, a3);
  v8 = v10;
  v10 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  result = v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C62B46DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v19 = *(_QWORD *)(v18 - 40);
  *(_QWORD *)(v18 - 40) = 0;
  a15 = v19;
  llvm::createELFObjectWriter(&a15, v15, *(_DWORD *)(v17 + 8) == 1, v16);
  v20 = a15;
  a15 = 0;
  if (!v20)
    JUMPOUT(0x1C62B462CLL);
  JUMPOUT(0x1C62B46CCLL);
}

void sub_1C62B4714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = *(_QWORD *)(v14 - 40);
  *(_QWORD *)(v14 - 40) = 0;
  a12 = v15;
  llvm::createSPIRVObjectWriter(&a12, v12, v13);
  v16 = a12;
  a12 = 0;
  if (!v16)
    JUMPOUT(0x1C62B462CLL);
  JUMPOUT(0x1C62B46CCLL);
}

void sub_1C62B4740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = *(_QWORD *)(v12 - 40);
  *(_QWORD *)(v12 - 40) = 0;
  a10 = v13;
  llvm::createXCOFFObjectWriter(&a10, v10, v11);
  v14 = a10;
  a10 = 0;
  if (!v14)
    JUMPOUT(0x1C62B462CLL);
  JUMPOUT(0x1C62B46CCLL);
}

uint64_t llvm::MCAsmBackend::createDwoObjectWriter@<X0>(llvm::MCAsmBackend *this@<X0>, llvm::raw_pwrite_stream *a2@<X1>, llvm::raw_pwrite_stream *a3@<X2>, uint64_t *a4@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 56))(&v14);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  if (v8 == 7)
  {
    v10 = v14;
    v14 = 0;
    v12 = v10;
    llvm::createWasmDwoObjectWriter(&v12, (uint64_t)a2, (uint64_t)a3, a4);
    v9 = v12;
    v12 = 0;
    if (!v9)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (v8 != 3)
    llvm::report_fatal_error((llvm *)"dwo only supported with ELF and Wasm", (const char *)1);
  v13 = v14;
  v14 = 0;
  llvm::createELFDwoObjectWriter(&v13, (uint64_t)a2, (uint64_t)a3, *((_DWORD *)this + 2) == 1, a4);
  v9 = v13;
  v13 = 0;
  if (v9)
LABEL_6:
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
LABEL_7:
  result = v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t llvm::MCAsmBackend::getFixupKind()
{
  return 0;
}

uint64_t sub_1C62B4878()
{
  return 0;
}

uint64_t sub_1C62B4884()
{
  return 1;
}

uint64_t llvm::MCAsmInfo::MCAsmInfo(uint64_t this)
{
  *(_QWORD *)this = off_1E817F718;
  *(_QWORD *)(this + 8) = 0x400000004;
  *(_BYTE *)(this + 16) = 1;
  *(_DWORD *)(this + 17) = 0;
  *(_DWORD *)(this + 20) = 0;
  *(_QWORD *)(this + 24) = 0x100000004;
  *(_WORD *)(this + 32) = 256;
  *(_BYTE *)(this + 34) = 0;
  *(_WORD *)(this + 64) = 256;
  *(_BYTE *)(this + 66) = 1;
  *(_WORD *)(this + 80) = 0;
  *(_BYTE *)(this + 82) = 0;
  *(_BYTE *)(this + 184) = 0;
  *(_DWORD *)(this + 185) = 16777217;
  *(_BYTE *)(this + 200) = 1;
  *(_QWORD *)(this + 224) = 0;
  *(_QWORD *)(this + 232) = 0;
  *(_DWORD *)(this + 240) = 0;
  *(_BYTE *)(this + 280) = 1;
  *(_OWORD *)(this + 288) = 0u;
  *(_OWORD *)(this + 304) = 0u;
  *(_OWORD *)(this + 320) = 0u;
  *(_DWORD *)(this + 335) = 0;
  *(_BYTE *)(this + 339) = 1;
  *(_DWORD *)(this + 340) = 0;
  *(_WORD *)(this + 352) = 256;
  *(_BYTE *)(this + 354) = 1;
  *(_DWORD *)(this + 356) = 0;
  *(_DWORD *)(this + 360) = 16842753;
  *(_BYTE *)(this + 364) = 1;
  *(_DWORD *)(this + 365) = 0;
  *(_QWORD *)(this + 384) = 0;
  *(_DWORD *)(this + 391) = 0;
  *(_DWORD *)(this + 396) = 12;
  *(_QWORD *)(this + 400) = 0x150000000CLL;
  *(_WORD *)(this + 408) = 0;
  *(_DWORD *)(this + 412) = 0;
  *(_BYTE *)(this + 416) = 0;
  *(_DWORD *)(this + 420) = 0;
  *(_QWORD *)(this + 424) = 0x101000001010001;
  *(_QWORD *)(this + 432) = 0;
  *(_QWORD *)(this + 440) = 0;
  *(_QWORD *)(this + 448) = 0;
  *(_QWORD *)(this + 456) = 0x1A00000002;
  *(_DWORD *)(this + 468) = 0;
  *(_DWORD *)(this + 472) = 257;
  *(_BYTE *)(this + 476) = 0;
  *(_QWORD *)(this + 40) = ";";
  *(_QWORD *)(this + 48) = "#";
  *(_QWORD *)(this + 56) = 1;
  *(_QWORD *)(this + 72) = ":";
  *(_QWORD *)(this + 88) = "L";
  *(_QWORD *)(this + 96) = 1;
  *(_OWORD *)(this + 104) = *(_OWORD *)(this + 88);
  *(_QWORD *)(this + 120) = "";
  *(_QWORD *)(this + 128) = 0;
  *(_QWORD *)(this + 136) = "APP";
  *(_QWORD *)(this + 144) = "NO_APP";
  *(_QWORD *)(this + 152) = ".code16";
  *(_QWORD *)(this + 160) = ".code32";
  *(_QWORD *)(this + 168) = ".code64";
  *(_QWORD *)(this + 176) = 0;
  *(_QWORD *)(this + 192) = "\t.zero\t";
  *(_QWORD *)(this + 208) = "\t.ascii\t";
  *(_QWORD *)(this + 216) = "\t.asciz\t";
  *(_QWORD *)(this + 248) = "\t.byte\t";
  *(_QWORD *)(this + 256) = "\t.short\t";
  *(_QWORD *)(this + 264) = "\t.long\t";
  *(_QWORD *)(this + 272) = "\t.quad\t";
  *(_QWORD *)(this + 344) = "\t.globl\t";
  *(_QWORD *)(this + 376) = "\t.weak\t";
  if (dword_1ED8195C0)
    *(_BYTE *)(this + 431) = dword_1ED8195C0 == 1;
  if (dword_1ED8349C0)
    *(_BYTE *)(this + 188) = dword_1ED8349C0 == 1;
  *(_WORD *)(this + 464) = 1;
  *(_BYTE *)(this + 466) = 1;
  return this;
}

void llvm::MCAsmInfo::~MCAsmInfo(llvm::MCAsmInfo *this)
{
  void **v1;

  *(_QWORD *)this = off_1E817F718;
  v1 = (void **)((char *)this + 432);
  sub_1C515FCE0(&v1);
}

{
  void **v1;

  *(_QWORD *)this = off_1E817F718;
  v1 = (void **)((char *)this + 432);
  sub_1C515FCE0(&v1);
}

{
  void **v2;

  *(_QWORD *)this = off_1E817F718;
  v2 = (void **)((char *)this + 432);
  sub_1C515FCE0(&v2);
  MEMORY[0x1CAA32FC0](this, 0x10F1C40308258B8);
}

uint64_t llvm::MCAsmInfo::isSectionAtomizableBySymbols(llvm::MCAsmInfo *this, const llvm::MCSection *a2)
{
  return 0;
}

uint64_t llvm::MCAsmInfo::getExprForPersonalitySymbol(llvm::MCAsmInfo *this, const llvm::MCSymbol *a2, uint64_t a3, llvm::MCStreamer *a4)
{
  return (*(uint64_t (**)(llvm::MCAsmInfo *, const llvm::MCSymbol *, uint64_t, llvm::MCStreamer *))(*(_QWORD *)this + 40))(this, a2, a3, a4);
}

uint64_t llvm::MCAsmInfo::shouldOmitSectionDirective(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 4)
  {
    if (*(_DWORD *)a2 == 1936941614)
      return *(_BYTE *)(a1 + 337) == 0;
    return 0;
  }
  if (a3 != 5)
    return 0;
  if (*(_DWORD *)a2 == 2019914798 && *(_BYTE *)(a2 + 4) == 116)
    return 1;
  return *(_DWORD *)a2 == 1952539694 && *(_BYTE *)(a2 + 4) == 97;
}

void sub_1C62B4C34(_WORD *a1, __n128 *a2, int **a3)
{
  sub_1C47AD050((uint64_t)&llvm::UseLEB128Directives, 0, 0);
  dword_1ED8349C0 = 0;
  qword_1ED8349C8 = (uint64_t)&unk_1E819E900;
  *(_QWORD *)&dword_1ED8349D0 = 0;
  llvm::UseLEB128Directives = (uint64_t)&unk_1E8140060;
  qword_1ED8349D8 = (uint64_t)&unk_1E819E920;
  qword_1ED8349E0 = (uint64_t)&unk_1E81400C8;
  qword_1ED8349F8 = (uint64_t)&qword_1ED8349E0;
  sub_1C591C694(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::UseLEB128Directives);
}

uint64_t llvm::MCAsmInfoDarwin::MCAsmInfoDarwin(llvm::MCAsmInfoDarwin *this)
{
  uint64_t result;

  result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(_QWORD *)result = &off_1E817FA50;
  *(_QWORD *)(result + 120) = "l";
  *(_QWORD *)(result + 128) = 1;
  *(_BYTE *)(result + 18) = 1;
  *(_BYTE *)(result + 339) = 0;
  *(_DWORD *)(result + 356) = 2;
  *(_QWORD *)(result + 136) = " InlineAsm Start";
  *(_QWORD *)(result + 144) = " InlineAsm End";
  *(_WORD *)(result + 392) = 257;
  *(_QWORD *)(result + 384) = "\t.weak_reference ";
  *(_QWORD *)(result + 192) = "\t.space\t";
  *(_WORD *)(result + 19) = 257;
  *(_WORD *)(result + 353) = 0;
  *(_DWORD *)(result + 396) = 20;
  *(_QWORD *)(result + 400) = 0;
  *(_WORD *)(result + 363) = 0;
  *(_WORD *)(result + 367) = 257;
  *(_BYTE *)(result + 424) = 0;
  *(_BYTE *)(result + 352) = 1;
  return result;
}

void sub_1C62B4D80(llvm::MCAsmInfo *a1)
{
  llvm::MCAsmInfo::~MCAsmInfo(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::createAsmStreamer(uint64_t a1, uint64_t *a2, int a3, int a4, uint64_t a5, uint64_t *a6, llvm::MCAsmBackend **a7, int a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::MCAsmBackend *v19;
  llvm::MCStreamer *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::MCAsmBackend *v30;
  uint64_t v31;
  uint64_t v32;

  v16 = operator new();
  v17 = *a2;
  *a2 = 0;
  v18 = *a6;
  *a6 = 0;
  v19 = *a7;
  *a7 = 0;
  v30 = v19;
  v31 = v18;
  v20 = llvm::MCStreamer::MCStreamer((llvm::MCStreamer *)v16, (llvm::MCContext *)a1);
  *(_QWORD *)v20 = off_1E817FCC8;
  *((_QWORD *)v20 + 34) = v17;
  *((_QWORD *)v20 + 35) = v17;
  *((_QWORD *)v20 + 36) = *(_QWORD *)(a1 + 152);
  *((_QWORD *)v20 + 37) = a5;
  v21 = (_QWORD *)((char *)v20 + 304);
  if (v19)
    llvm::MCAsmBackend::createObjectWriter(v19, (llvm::raw_pwrite_stream *)(v16 + 688), &v32);
  else
    v32 = 0;
  sub_1C591DD10(a1, (uint64_t *)&v30, &v31, &v32, v21);
  v22 = v32;
  v32 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  *(_QWORD *)(v16 + 312) = v16 + 336;
  *(_OWORD *)(v16 + 320) = xmmword_1C85F20B0;
  *(_QWORD *)(v16 + 464) = v16 + 488;
  *(_QWORD *)(v16 + 472) = 0;
  *(_QWORD *)(v16 + 480) = 128;
  v23 = sub_1C613932C(v16 + 616, v16 + 464);
  *(_DWORD *)(v16 + 696) = 0;
  *(_QWORD *)(v16 + 736) = 0;
  *(_DWORD *)(v16 + 744) = 0;
  *(_QWORD *)(v16 + 704) = 0;
  *(_QWORD *)(v16 + 720) = 0;
  *(_QWORD *)(v16 + 712) = 0;
  *(_BYTE *)(v16 + 728) = 0;
  *(_QWORD *)(v16 + 688) = &off_1E81A7068;
  if (a8)
    v24 = 2;
  else
    v24 = 0;
  if (a4)
    v25 = 4;
  else
    v25 = 0;
  *(_BYTE *)(v16 + 752) = v25 | a3 | v24 | *(_BYTE *)(v16 + 752) & 0xF8;
  if (a3)
    *(_QWORD *)(*(_QWORD *)(v16 + 296) + 8) = v23;
  v26 = *(_QWORD *)(*v21 + 8);
  if (v26)
    *(_BYTE *)(v16 + 269) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
  *(_BYTE *)(a1 + 1628) = 1;
  v27 = (uint64_t)v30;
  v30 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = v31;
  v31 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  return v16;
}

double llvm::MCAssembler::MCAssembler(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  *(_QWORD *)a1 = a2;
  v5 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 24) = v7;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_WORD *)(a1 + 200) = -1267;
  *(_BYTE *)(a1 + 202) = 14;
  *(_QWORD *)(a1 + 208) = a1 + 240;
  *(_QWORD *)(a1 + 216) = a1 + 240;
  *(_QWORD *)(a1 + 224) = 32;
  *(_DWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 500) &= 0xF8u;
  *(_DWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = a1 + 536;
  *(_QWORD *)(a1 + 528) = 0x2000000000;
  *(_OWORD *)(a1 + 2092) = 0u;
  *(_DWORD *)(a1 + 2080) = 0;
  *(_DWORD *)(a1 + 2116) = 0;
  *(_QWORD *)(a1 + 2136) = 0;
  *(_QWORD *)(a1 + 2128) = 0;
  *(_BYTE *)(a1 + 2152) = 0;
  *(_QWORD *)(a1 + 2144) = 0;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2160) = 0u;
  return result;
}

void llvm::MCAssembler::~MCAssembler(llvm::MCAssembler *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;

  v2 = (void *)*((_QWORD *)this + 273);
  if (v2)
  {
    *((_QWORD *)this + 274) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 270);
  if (v3)
  {
    *((_QWORD *)this + 271) = v3;
    operator delete(v3);
  }
  sub_1C62B5574((void **)this + 65);
  v4 = (void *)*((_QWORD *)this + 27);
  if (v4 != *((void **)this + 26))
    free(v4);
  v12 = (void **)((char *)this + 176);
  sub_1C5464DAC(&v12);
  v12 = (void **)((char *)this + 152);
  sub_1C4765410(&v12);
  v12 = (void **)((char *)this + 128);
  sub_1C592C22C(&v12);
  v5 = (void *)*((_QWORD *)this + 13);
  if (v5)
  {
    *((_QWORD *)this + 14) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 10);
  if (v6)
  {
    *((_QWORD *)this + 11) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 8) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 4);
  if (v8)
  {
    *((_QWORD *)this + 5) = v8;
    operator delete(v8);
  }
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

uint64_t sub_1C62B5198(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 24 * v4);
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 24 * v5);
LABEL_6:
        v6 = *(unsigned int *)(a2 + 8);
        if (v5 != v6)
          memcpy((void *)(*(_QWORD *)a1 + 24 * v5), (const void *)(*(_QWORD *)a2 + 24 * v5), *(_QWORD *)a2 + 24 * v6 - (*(_QWORD *)a2 + 24 * v5));
LABEL_10:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 24);
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

BOOL llvm::MCAssembler::relaxLEB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD v8[2];
  uint64_t v9;
  int v10;
  llvm::raw_ostream *v11;

  v4 = *(_QWORD *)(a3 + 72);
  v11 = 0;
  llvm::MCExpr::evaluateAsAbsolute(*(_QWORD *)(a3 + 56), &v11);
  if ((v5 & 1) == 0)
    llvm::report_fatal_error((llvm *)"sleb128 and uleb128 expressions must be absolute", (const char *)1);
  *(_QWORD *)(a3 + 72) = 0;
  sub_1C613932C((uint64_t)v8, a3 + 64);
  if (*(_BYTE *)(a3 + 51))
    sub_1C592B860(v11, (llvm::raw_ostream *)v8, v4);
  else
    sub_1C592B9A0((unint64_t)v11, (llvm::raw_ostream *)v8, v4);
  v6 = *(_QWORD *)(a3 + 72);
  v8[0] = off_1E81A6E70;
  if (v10 == 1 && v9)
    MEMORY[0x1CAA32F9C](v9, 0x1000C8077774924);
  return v4 != v6;
}

BOOL llvm::MCAssembler::relaxPseudoProbeAddr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  uint64_t v9;
  int v10;
  llvm::raw_ostream *v11;

  v4 = a3 + 64;
  v5 = *(_QWORD *)(a3 + 72);
  v11 = 0;
  llvm::MCExpr::evaluateAsAbsolute(*(_QWORD *)(a3 + 136), &v11);
  *(_QWORD *)(a3 + 72) = 0;
  sub_1C613932C((uint64_t)v8, v4);
  *(_DWORD *)(a3 + 104) = 0;
  sub_1C592B860(v11, (llvm::raw_ostream *)v8, v5);
  v6 = *(_QWORD *)(a3 + 72);
  v8[0] = off_1E81A6E70;
  if (v10 == 1 && v9)
    MEMORY[0x1CAA32F9C](v9, 0x1000C8077774924);
  return v5 != v6;
}

llvm::raw_ostream *llvm::MCAssembler::dump(llvm::MCAssembler *this)
{
  llvm::raw_ostream *v2;
  llvm::MCFragment ***v3;
  llvm::MCFragment ***v4;
  llvm::MCFragment **v5;
  llvm::MCSymbol **v6;
  llvm::MCSymbol **v7;
  llvm::raw_ostream *v8;
  llvm::MCSymbol *v9;

  v2 = (llvm::raw_ostream *)llvm::errs(this);
  sub_1C4816AD8(v2, "<MCAssembler\n");
  sub_1C4816AD8(v2, "  Sections:[\n    ");
  v3 = (llvm::MCFragment ***)*((_QWORD *)this + 4);
  v4 = (llvm::MCFragment ***)*((_QWORD *)this + 5);
  while (v3 != v4)
  {
    if (v3 != *((llvm::MCFragment ****)this + 4))
      sub_1C4816AD8(v2, ",\n    ");
    v5 = *v3++;
    llvm::MCSection::dump(v5);
  }
  sub_1C4816AD8(v2, "],\n");
  sub_1C4816AD8(v2, "  Symbols:[");
  v6 = (llvm::MCSymbol **)*((_QWORD *)this + 7);
  v7 = (llvm::MCSymbol **)*((_QWORD *)this + 8);
  while (v6 != v7)
  {
    if (v6 != *((llvm::MCSymbol ***)this + 7))
      sub_1C4816AD8(v2, ",\n           ");
    sub_1C4816AD8(v2, "(");
    llvm::MCSymbol::dump(*v6);
    v8 = sub_1C4816AD8(v2, ", Index:");
    v9 = *v6++;
    sub_1C5E21910(v8, *((unsigned int *)v9 + 4), 0, 0, 0);
    sub_1C4816AD8(v8, ", ");
    sub_1C4816AD8(v2, ")");
  }
  return sub_1C4816AD8(v2, "]>\n");
}

void **sub_1C62B5574(void **result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void **v5;
  char *v6;
  void **v7;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v6 = (char *)*result;
    v7 = result;
    v3 = 48 * v2;
    do
    {
      v4 = *(char **)&v6[v3 - 40];
      if (&v6[v3 - 24] != v4)
        free(v4);
      v3 -= 48;
    }
    while (v3);
    result = v7;
    v1 = (void **)*v7;
  }
  if (v1 != result + 2)
  {
    v5 = result;
    free(v1);
    return v5;
  }
  return result;
}

_QWORD *llvm::MCCodeEmitter::MCCodeEmitter(_QWORD *this)
{
  *this = off_1E8180270;
  return this;
}

void llvm::CodeViewContext::~CodeViewContext(llvm::CodeViewContext *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  char *v6;

  if (!*((_BYTE *)this + 40))
  {
    v2 = (_QWORD *)*((_QWORD *)this + 4);
    if (v2)
    {
      v3 = (_QWORD *)v2[15];
      if (v3 != v2 + 17)
        free(v3);
      v4 = (_QWORD *)v2[8];
      if (v4 != v2 + 11)
        free(v4);
      MEMORY[0x1CAA32FC0](v2, 0x10E0C400AE5E4C8);
    }
  }
  if (*((_QWORD *)this + 30))
  {
    sub_1C592DC14((_QWORD *)this + 30);
    operator delete(*((void **)this + 30));
  }
  v5 = (void *)*((_QWORD *)this + 27);
  if (v5)
  {
    *((_QWORD *)this + 28) = v5;
    operator delete(v5);
  }
  sub_1C6143384(*((_QWORD **)this + 25));
  v6 = (char *)*((_QWORD *)this + 6);
  if (v6 != (char *)this + 64)
    free(v6);
  sub_1C51838C8((uint64_t)this);
}

BOOL llvm::CodeViewContext::isValidFileNumber(llvm::CodeViewContext *this, int a2)
{
  uint64_t v2;

  v2 = (a2 - 1);
  return *((_DWORD *)this + 14) > v2 && *(_BYTE *)(*((_QWORD *)this + 6) + 32 * v2 + 4) != 0;
}

BOOL llvm::CodeViewContext::addFile(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4, size_t a5, uint64_t a6, uint64_t a7, char a8)
{
  unsigned __int8 *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  size_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  unint64_t TempSymbol;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  __int16 v28;
  _QWORD v29[3];

  llvm::CodeViewContext::addToStringTable((llvm::CodeViewContext *)a1, a4, a5, (uint64_t)v29);
  v14 = (unsigned __int8 *)v29[0];
  v15 = v29[1];
  v16 = a3 - 1;
  if (*(_DWORD *)(a1 + 56) <= v16)
    sub_1C62B64F4(a1 + 48, a3);
  v17 = *(_QWORD *)(a1 + 48) + 32 * v16;
  v18 = *(unsigned __int8 *)(v17 + 4);
  if (!*(_BYTE *)(v17 + 4))
  {
    if (v15)
      v20 = v15;
    else
      v20 = 7;
    if (v15)
      v21 = v14;
    else
      v21 = "<stdin>";
    llvm::CodeViewContext::addToStringTable((llvm::CodeViewContext *)a1, v21, v20, (uint64_t)v26);
    v22 = v27;
    v23 = *(_QWORD *)(a2 + 8);
    v26[0] = "checksum_offset";
    v28 = 259;
    TempSymbol = llvm::MCContext::createTempSymbol(v23, (uint64_t)v26, 0);
    v25 = *(_QWORD *)(a1 + 48) + 32 * v16;
    *(_DWORD *)v25 = v22;
    *(_QWORD *)(v25 + 16) = a7;
    *(_QWORD *)(v25 + 24) = TempSymbol;
    *(_BYTE *)(v25 + 4) = 1;
    *(_QWORD *)(v25 + 8) = a6;
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + 32 * v16 + 5) = a8;
  }
  return v18 == 0;
}

uint64_t **llvm::CodeViewContext::addToStringTable@<X0>(llvm::CodeViewContext *a1@<X0>, unsigned __int8 *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t **result;
  char v11;
  char v12;
  uint64_t *v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;

  llvm::CodeViewContext::getStringTableFragment(a1);
  v9 = v8;
  v16 = *(_QWORD *)(v8 + 72);
  result = (uint64_t **)sub_1C592DFFC(a1, a2, a3, &v16);
  v12 = v11;
  v13 = *result;
  v14 = *result + 2;
  v15 = **result;
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v15;
  *(_DWORD *)(a4 + 16) = *((_DWORD *)v13 + 2);
  if (v12)
    return (uint64_t **)sub_1C52C2F74((_QWORD *)(v9 + 64), v14, &v14[v15 + 1]);
  return result;
}

_DWORD *llvm::CodeViewContext::getCVFunctionInfo(llvm::CodeViewContext *this, unsigned int a2)
{
  uint64_t v2;
  _DWORD *v3;

  v2 = *((_QWORD *)this + 30);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 31) - v2) >> 4) <= a2)
    return 0;
  v3 = (_DWORD *)(v2 + 48 * a2);
  if (*v3)
    return v3;
  else
    return 0;
}

BOOL llvm::CodeViewContext::recordFunctionId(llvm::CodeViewContext *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t *v4;
  int *v5;
  int v6;

  v3 = *((_QWORD *)this + 30);
  v4 = (uint64_t *)((char *)this + 240);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 31) - v3) >> 4) <= a2)
  {
    sub_1C592C41C((char **)this + 30, a2 + 1);
    v3 = *v4;
  }
  v5 = (int *)(v3 + 48 * a2);
  v6 = *v5;
  if (!*v5)
    *v5 = -1;
  return v6 == 0;
}

BOOL llvm::CodeViewContext::recordInlinedCallSiteId(llvm::CodeViewContext *this, unsigned int a2, unsigned int a3, int a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t *v13;
  _DWORD *v14;
  int v15;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;

  v24 = a2;
  v12 = *((_QWORD *)this + 30);
  v13 = (uint64_t *)((char *)this + 240);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 31) - v12) >> 4) <= a2)
  {
    sub_1C592C41C((char **)this + 30, a2 + 1);
    v12 = *v13;
  }
  v14 = (_DWORD *)(v12 + 48 * a2);
  v15 = *v14;
  if (!*v14)
  {
    *v14 = a3 + 1;
    v17 = (_DWORD *)(v12 + 48 * a2);
    v17[1] = a4;
    v17[2] = a5;
    v17[3] = a6;
    if (a3 <= 0xFFFFFFFD)
    {
      do
      {
        v18 = *((_QWORD *)this + 30);
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 31) - v18) >> 4) <= a3)
        {
          v20 = 0;
        }
        else
        {
          v19 = (_DWORD *)(v18 + 48 * a3);
          if (*v19)
            v20 = v19;
          else
            v20 = 0;
        }
        v21 = *(_QWORD *)(v14 + 1);
        v22 = v14[3];
        v23 = sub_1C592DC64((uint64_t)(v20 + 6), &v24);
        *(_QWORD *)(v23 + 4) = v21;
        *(_DWORD *)(v23 + 12) = v22;
        a3 = *v20 - 1;
        v14 = v20;
      }
      while (a3 < 0xFFFFFFFE);
    }
  }
  return v15 == 0;
}

char *llvm::CodeViewContext::recordCVLoc(llvm::CodeViewContext *this, llvm::MCContext *a2, const llvm::MCSymbol *a3, int a4, int a5, int a6, __int16 a7, char a8, BOOL a9)
{
  char v9;
  const llvm::MCSymbol *v11;
  int v12;
  int v13;
  int v14;
  __int16 v15;
  char v16;

  v11 = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  v15 = a7;
  if (a9)
    v9 = 2;
  else
    v9 = 0;
  v16 = v9 | a8;
  return llvm::CodeViewContext::addLineEntry((uint64_t)this, (uint64_t)&v11);
}

char *llvm::CodeViewContext::addLineEntry(uint64_t a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t **v7;
  char v8;
  unint64_t v9;
  __int128 v10;
  char *result;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;

  v4 = (void **)(a1 + 216);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 3);
  v12 = *(_DWORD *)(a2 + 8);
  v6 = (uint64_t *)(v5 + 1);
  v13 = v5;
  v14 = v5 + 1;
  v7 = sub_1C592E208((uint64_t **)(a1 + 192), v12, (uint64_t)&v12);
  if (!v8)
    v7[6] = v6;
  v9 = *(_QWORD *)(a1 + 224);
  if (v9 >= *(_QWORD *)(a1 + 232))
  {
    result = sub_1C592E2E4(v4, a2);
  }
  else
  {
    v10 = *(_OWORD *)a2;
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)v9 = v10;
    result = (char *)(v9 + 24);
  }
  *(_QWORD *)(a1 + 224) = result;
  return result;
}

double llvm::CodeViewContext::getStringTableFragment(llvm::CodeViewContext *this)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  if (!*((_QWORD *)this + 4))
  {
    v2 = operator new();
    v3 = llvm::MCFragment::MCFragment(v2, 1, 0, 0);
    *(_BYTE *)(v3 + 88) = 0;
    *(_WORD *)(v3 + 51) = 0;
    *(_QWORD *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 64) = v3 + 88;
    *(_QWORD *)(v3 + 120) = v3 + 136;
    *(_QWORD *)(v3 + 128) = 0x400000000;
    *((_QWORD *)this + 4) = v3;
    *(_QWORD *)&result = 1;
    *(_OWORD *)(v3 + 72) = xmmword_1C8662FE0;
  }
  return result;
}

uint64_t llvm::CodeViewContext::emitFileChecksums(uint64_t this, llvm::MCObjectStreamer *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t TempSymbol;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  _QWORD v19[4];
  __int16 v20;

  if (*(_DWORD *)(this + 56))
  {
    v3 = this;
    v4 = *((_QWORD *)a2 + 1);
    v19[0] = "filechecksums_begin";
    v20 = 259;
    TempSymbol = llvm::MCContext::createTempSymbol(v4, (uint64_t)v19, 0);
    v19[0] = "filechecksums_end";
    v20 = 259;
    v6 = llvm::MCContext::createTempSymbol(v4, (uint64_t)v19, 0);
    (*(void (**)(llvm::MCObjectStreamer *, uint64_t, uint64_t))(*(_QWORD *)a2 + 512))(a2, 244, 4);
    (*(void (**)(llvm::MCObjectStreamer *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 832))(a2, v6, TempSymbol, 4);
    (*(void (**)(llvm::MCObjectStreamer *, unint64_t, _QWORD))(*(_QWORD *)a2 + 192))(a2, TempSymbol, 0);
    v17 = v3;
    v7 = *(unsigned int *)(v3 + 56);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = *(unsigned int **)(v17 + 48);
      v18 = &v9[8 * v7];
      v10 = v4 + 192;
      do
      {
        v11 = *v9;
        v12 = *((unsigned __int8 *)v9 + 5);
        v13 = *((_QWORD *)v9 + 1);
        v14 = *((_QWORD *)v9 + 2);
        v15 = *((_QWORD *)v9 + 3);
        v16 = sub_1C484358C(v10, 24, 3);
        *(_BYTE *)v16 = 1;
        *(_DWORD *)(v16 + 1) = *(unsigned __int8 *)(v16 + 4) << 24;
        *(_QWORD *)(v16 + 8) = 0;
        *(_QWORD *)(v16 + 16) = v8;
        (*(void (**)(llvm::MCObjectStreamer *, uint64_t, unint64_t))(*(_QWORD *)a2 + 280))(a2, v15, v16);
        if (v12)
        {
          v8 = (v8 + v14 + 9) & 0xFFFFFFFC;
          (*(void (**)(llvm::MCObjectStreamer *, uint64_t, uint64_t))(*(_QWORD *)a2 + 512))(a2, v11, 4);
          (*(void (**)(llvm::MCObjectStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, v14, 1);
          (*(void (**)(llvm::MCObjectStreamer *, uint64_t, uint64_t))(*(_QWORD *)a2 + 512))(a2, v12, 1);
          (*(void (**)(llvm::MCObjectStreamer *, uint64_t, uint64_t))(*(_QWORD *)a2 + 488))(a2, v13, v14);
          (*(void (**)(llvm::MCObjectStreamer *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a2 + 632))(a2, 4, 0, 1, 0);
        }
        else
        {
          v8 += 8;
          (*(void (**)(llvm::MCObjectStreamer *, uint64_t, uint64_t))(*(_QWORD *)a2 + 512))(a2, v11, 4);
          (*(void (**)(llvm::MCObjectStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0, 4);
        }
        v9 += 8;
      }
      while (v9 != v18);
    }
    this = (*(uint64_t (**)(llvm::MCObjectStreamer *, unint64_t, _QWORD))(*(_QWORD *)a2 + 192))(a2, v6, 0);
    *(_BYTE *)(v17 + 264) = 1;
  }
  return this;
}

uint64_t llvm::CodeViewContext::emitFileChecksumOffset(llvm::CodeViewContext *this, llvm::MCObjectStreamer *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;

  v5 = a3 - 1;
  if (*((_DWORD *)this + 14) <= v5)
    sub_1C62B64F4((uint64_t)this + 48, a3);
  v6 = *((_QWORD *)this + 6) + 32 * v5;
  if (*((_BYTE *)this + 264))
    return llvm::MCStreamer::emitSymbolValue(a2, *(const llvm::MCSymbol **)(v6 + 24), 4, 0);
  v8 = llvm::MCSymbolRefExpr::create(*(_QWORD *)(v6 + 24), 0, *((_QWORD *)a2 + 1), 0);
  return (*(uint64_t (**)(llvm::MCObjectStreamer *, unint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 504))(a2, v8, 4, 0);
}

void llvm::CodeViewContext::emitLineTableForFunction(llvm::CodeViewContext *this, llvm::MCObjectStreamer *a2, unsigned int a3, const llvm::MCSymbol *a4, const llvm::MCSymbol *a5)
{
  uint64_t v10;
  unint64_t TempSymbol;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  _BOOL4 v16;
  BOOL v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  char *i;
  char v25;
  unint64_t v26;
  llvm::CodeViewContext *v27;
  const char *v28;
  __int16 v29;
  uint64_t v30[4];
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34[5];
  char *v35;
  char *v36;
  _QWORD v37[4];
  __int16 v38;

  v10 = *((_QWORD *)a2 + 1);
  v37[0] = "linetable_begin";
  v38 = 259;
  TempSymbol = llvm::MCContext::createTempSymbol(v10, (uint64_t)v37, 0);
  v37[0] = "linetable_end";
  v38 = 259;
  v12 = llvm::MCContext::createTempSymbol(v10, (uint64_t)v37, 0);
  (*(void (**)(llvm::MCObjectStreamer *, uint64_t, uint64_t))(*(_QWORD *)a2 + 512))(a2, 242, 4);
  v26 = v12;
  (*(void (**)(llvm::MCObjectStreamer *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 832))(a2, v12, TempSymbol, 4);
  (*(void (**)(llvm::MCObjectStreamer *, unint64_t, _QWORD))(*(_QWORD *)a2 + 192))(a2, TempSymbol, 0);
  (*(void (**)(llvm::MCObjectStreamer *, const llvm::MCSymbol *, _QWORD))(*(_QWORD *)a2 + 376))(a2, a4, 0);
  (*(void (**)(llvm::MCObjectStreamer *, const llvm::MCSymbol *))(*(_QWORD *)a2 + 368))(a2, a4);
  v27 = this;
  llvm::CodeViewContext::getFunctionLineEntries(this, a3, &v35);
  v13 = v35;
  v14 = v36;
  if (v35 == v36)
  {
    v16 = 0;
  }
  else
  {
    v15 = v35 + 24;
    do
    {
      v16 = *((_WORD *)v15 - 2) != 0;
      if (*((_WORD *)v15 - 2))
        v17 = 1;
      else
        v17 = v15 == v36;
      v15 += 24;
    }
    while (!v17);
  }
  (*(void (**)(llvm::MCObjectStreamer *, _BOOL4, uint64_t))(*(_QWORD *)a2 + 512))(a2, v16, 2);
  (*(void (**)(llvm::MCObjectStreamer *, const llvm::MCSymbol *, const llvm::MCSymbol *, uint64_t))(*(_QWORD *)a2 + 832))(a2, a5, a4, 4);
  if (v13 != v14)
  {
    v18 = v13;
    do
    {
      v19 = v18;
      v20 = *((unsigned int *)v18 + 3);
      while (*((_DWORD *)v18 + 3) == (_DWORD)v20)
      {
        v18 += 24;
        if (v18 == v14)
        {
          v18 = v14;
          break;
        }
      }
      v32 = "Segment for file '";
      v33 = 259;
      llvm::CodeViewContext::getStringTableFragment(v27);
      v22 = *(_BYTE *)(*(_QWORD *)(v21 + 64) + *(unsigned int *)(*((_QWORD *)v27 + 6) + 32 * (v20 - 1)));
      v31 = 263;
      LOBYTE(v30[0]) = v22;
      sub_1C4825FE4((uint64_t *)&v32, v30, (uint64_t)v34);
      v28 = "' begins";
      v29 = 259;
      sub_1C4825FE4(v34, (uint64_t *)&v28, (uint64_t)v37);
      (*(void (**)(llvm::MCObjectStreamer *, _QWORD *, uint64_t))(*(_QWORD *)a2 + 112))(a2, v37, 1);
      (*(void (**)(llvm::MCObjectStreamer *, uint64_t))(*(_QWORD *)a2 + 816))(a2, v20);
      (*(void (**)(llvm::MCObjectStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, -1431655765 * ((v18 - v19) >> 3), 4);
      v23 = -1431655764 * ((v18 - v19) >> 3);
      if (!v16)
        v23 = 0;
      (*(void (**)(llvm::MCObjectStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, v23 + 1431655768 * ((v18 - v19) >> 3) + 12, 4);
      for (i = v19; i != v18; i += 24)
      {
        (*(void (**)(llvm::MCObjectStreamer *, _QWORD, const llvm::MCSymbol *, uint64_t))(*(_QWORD *)a2 + 832))(a2, *(_QWORD *)i, a4, 4);
        (*(void (**)(llvm::MCObjectStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, *((_DWORD *)i + 4) | ((i[22] & 2) << 30), 4);
      }
      v25 = !v16;
      if (v19 == v18)
        v25 = 1;
      if ((v25 & 1) == 0)
      {
        do
        {
          (*(void (**)(llvm::MCObjectStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, *((unsigned __int16 *)v19 + 10), 2);
          (*(void (**)(llvm::MCObjectStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0, 2);
          v19 += 24;
        }
        while (v19 != v18);
      }
    }
    while (v18 != v14);
  }
  (*(void (**)(llvm::MCObjectStreamer *, unint64_t, _QWORD))(*(_QWORD *)a2 + 192))(a2, v26, 0);
  if (v13)
    operator delete(v13);
}

double llvm::CodeViewContext::emitInlineLineTableForFunction(llvm::CodeViewContext *this, llvm::MCObjectStreamer *a2, int a3, int a4, int a5, const llvm::MCSymbol *a6, const llvm::MCSymbol *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;

  v13 = operator new();
  v14 = *((unsigned int *)a2 + 30);
  if ((_DWORD)v14)
    v15 = *(_QWORD *)(*((_QWORD *)a2 + 14) + 32 * v14 - 32);
  else
    v15 = 0;
  v16 = llvm::MCFragment::MCFragment(v13, 12, 0, v15);
  *(_DWORD *)(v16 + 52) = a3;
  *(_DWORD *)(v16 + 56) = a4;
  *(_DWORD *)(v16 + 60) = a5;
  *(_QWORD *)(v16 + 64) = a6;
  *(_QWORD *)(v16 + 72) = a7;
  *(_QWORD *)(v16 + 80) = v16 + 104;
  result = 0.0;
  *(_OWORD *)(v16 + 88) = xmmword_1C6464ED0;
  return result;
}

uint64_t llvm::CodeViewContext::emitDefRange(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, _BYTE *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = operator new();
  v12 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v12)
    v13 = *(_QWORD *)(*(_QWORD *)(a2 + 112) + 32 * v12 - 32);
  else
    v13 = 0;
  return sub_1C62B642C(v11, a3, a4, a5, a6, v13);
}

uint64_t sub_1C62B642C(uint64_t a1, _BYTE *a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;

  v11 = llvm::MCFragment::MCFragment(a1, 13, 0, a6);
  *(_WORD *)(v11 + 51) = 0;
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 64) = v11 + 88;
  *(_OWORD *)(v11 + 72) = xmmword_1C677F680;
  *(_QWORD *)(v11 + 120) = v11 + 136;
  *(_QWORD *)(v11 + 128) = 0x400000000;
  *(_QWORD *)(v11 + 232) = v11 + 248;
  *(_QWORD *)(a1 + 240) = 0x200000000;
  sub_1C612E234((unsigned int *)(v11 + 232), a2, &a2[16 * a3]);
  *(_QWORD *)(a1 + 280) = a1 + 304;
  *(_OWORD *)(a1 + 288) = xmmword_1C677F680;
  sub_1C52C2F74((_QWORD *)(a1 + 280), a4, &a4[a5]);
  return a1;
}

void sub_1C62B64F4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, a2, 32);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
        bzero((void *)(*(_QWORD *)a1 + 32 * v2), 32 * a2 - 32 * v2);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

_QWORD *llvm::MCContext::initInlineSourceManager(_QWORD *this)
{
  _QWORD *v1;
  llvm::SourceMgr *v2;

  if (!this[10])
  {
    v1 = this;
    v2 = (llvm::SourceMgr *)operator new();
    llvm::SourceMgr::SourceMgr(v2);
    this = (_QWORD *)v1[10];
    v1[10] = v2;
    if (this)
    {
      llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)this);
      JUMPOUT(0x1CAA32FC0);
    }
  }
  return this;
}

unint64_t llvm::MCContext::getOrCreateFrameAllocSymbol(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[4];
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14[4];
  __int16 v15;
  uint64_t v16[4];
  __int16 v17;
  uint64_t v18[5];
  uint64_t v19[5];
  _BYTE v20[40];

  v6 = *(_QWORD *)(a1 + 152);
  v8 = *(_QWORD *)(v6 + 88);
  v7 = *(_QWORD *)(v6 + 96);
  v17 = 261;
  v16[0] = v8;
  v16[1] = v7;
  v15 = 261;
  v14[0] = a2;
  v14[1] = a3;
  sub_1C4825FE4(v16, v14, (uint64_t)v18);
  v12 = "$frame_escape_";
  v13 = 259;
  sub_1C4825FE4(v18, (uint64_t *)&v12, (uint64_t)v19);
  v11 = 264;
  LODWORD(v10[0]) = a4;
  sub_1C4825FE4(v19, v10, (uint64_t)v20);
  return llvm::MCContext::getOrCreateSymbol(a1, (uint64_t)v20);
}

unint64_t llvm::MCContext::getOrCreateParentFrameOffsetSymbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v8;
  __int16 v9;
  uint64_t v10[4];
  __int16 v11;
  uint64_t v12[4];
  __int16 v13;
  uint64_t v14[5];
  _BYTE v15[40];

  v4 = *(_QWORD *)(a1 + 152);
  v6 = *(_QWORD *)(v4 + 88);
  v5 = *(_QWORD *)(v4 + 96);
  v13 = 261;
  v12[0] = v6;
  v12[1] = v5;
  v11 = 261;
  v10[0] = a2;
  v10[1] = a3;
  sub_1C4825FE4(v12, v10, (uint64_t)v14);
  v8 = "$parent_frame_offset";
  v9 = 259;
  sub_1C4825FE4(v14, (uint64_t *)&v8, (uint64_t)v15);
  return llvm::MCContext::getOrCreateSymbol(a1, (uint64_t)v15);
}

unint64_t llvm::MCContext::getOrCreateLSDASymbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[4];
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14[4];
  __int16 v15;
  uint64_t v16[5];
  _BYTE v17[40];

  v6 = *(_QWORD *)(a1 + 152);
  v8 = *(_QWORD *)(v6 + 88);
  v7 = *(_QWORD *)(v6 + 96);
  v15 = 261;
  v14[0] = v8;
  v14[1] = v7;
  v12 = "__ehtable$";
  v13 = 259;
  sub_1C4825FE4(v14, (uint64_t *)&v12, (uint64_t)v16);
  v11 = 261;
  v10[0] = a2;
  v10[1] = a3;
  sub_1C4825FE4(v16, v10, (uint64_t)v17);
  return llvm::MCContext::getOrCreateSymbol(a1, (uint64_t)v17);
}

unint64_t llvm::MCContext::createNamedTempSymbol(llvm::MCContext *this, const llvm::Twine *a2)
{
  uint64_t v4;
  const void *v5;
  size_t v6;
  unint64_t Symbol;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  void *v14;
  __int128 v15;
  _QWORD v16[17];

  v16[16] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = xmmword_1C85F20B0;
  sub_1C613932C((uint64_t)v9, (uint64_t)&v14);
  v4 = *((_QWORD *)this + 19);
  v5 = *(const void **)(v4 + 88);
  v6 = *(_QWORD *)(v4 + 96);
  if (v6 <= v11 - (uint64_t)v12)
  {
    if (v6)
    {
      memcpy(v12, v5, v6);
      v12 += v6;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v9, (const char *)v5, v6);
  }
  llvm::Twine::print(a2, (llvm::raw_ostream *)v9);
  v9[0] = off_1E81A6E70;
  if (v13 == 1 && v10)
    MEMORY[0x1CAA32F9C](v10, 0x1000C8077774924);
  Symbol = llvm::MCContext::createSymbol((uint64_t)this, (unsigned __int8 *)v14, v15, 1, 0);
  if (v14 != v16)
    free(v14);
  return Symbol;
}

unint64_t llvm::MCContext::createNamedTempSymbol(llvm::MCContext *this)
{
  const char *v2;
  __int16 v3;

  v2 = "tmp";
  v3 = 259;
  return llvm::MCContext::createNamedTempSymbol(this, (const llvm::Twine *)&v2);
}

uint64_t llvm::MCContext::NextInstance(llvm::MCContext *this, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int v7;

  v7 = a2;
  v3 = sub_1C514D9B4((uint64_t)this + 1208, &v7);
  v4 = *(_DWORD **)(v3 + 8);
  if (v4)
  {
    v5 = (*v4 + 1);
  }
  else
  {
    v4 = (_DWORD *)sub_1C484358C((uint64_t)this + 192, 4, 3);
    *v4 = 0;
    *(_QWORD *)(v3 + 8) = v4;
    v5 = 1;
  }
  *v4 = v5;
  return v5;
}

uint64_t llvm::MCContext::GetInstance(llvm::MCContext *this, int a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t result;
  uint64_t v6;
  _DWORD *v7;
  int v8;

  v8 = a2;
  v3 = sub_1C514D9B4((uint64_t)this + 1208, &v8);
  v4 = *(unsigned int **)(v3 + 8);
  if (v4)
    return *v4;
  v6 = v3;
  v7 = (_DWORD *)sub_1C484358C((uint64_t)this + 192, 4, 3);
  result = 0;
  *v7 = 0;
  *(_QWORD *)(v6 + 8) = v7;
  return result;
}

unint64_t llvm::MCContext::getOrCreateDirectionalLocalSymbol(llvm::MCContext *this, unsigned int a2, uint64_t a3)
{
  _DWORD *v4;
  unint64_t result;
  int v6[8];
  __int16 v7;

  *(_QWORD *)v6 = a2 | (unint64_t)(a3 << 32);
  v4 = sub_1C62B75E4((uint64_t)this + 1088, v6);
  result = *((_QWORD *)v4 + 1);
  if (!result)
  {
    *(_QWORD *)v6 = "tmp";
    v7 = 259;
    result = llvm::MCContext::createNamedTempSymbol(this, (const llvm::Twine *)v6);
    *((_QWORD *)v4 + 1) = result;
  }
  return result;
}

unint64_t llvm::MCContext::createDirectionalLocalSymbol(llvm::MCContext *this, unsigned int a2)
{
  uint64_t Instance;

  Instance = llvm::MCContext::NextInstance(this, a2);
  return llvm::MCContext::getOrCreateDirectionalLocalSymbol(this, a2, Instance);
}

unint64_t llvm::MCContext::getDirectionalLocalSymbol(llvm::MCContext *this, unsigned int a2, int a3)
{
  uint64_t v5;

  v5 = llvm::MCContext::GetInstance(this, a2) + (a3 ^ 1);
  return llvm::MCContext::getOrCreateDirectionalLocalSymbol(this, a2, v5);
}

uint64_t llvm::MCContext::lookupSymbol(llvm::MCContext *this, const char **a2)
{
  unsigned __int8 *v3;
  size_t v4;
  int Key;
  uint64_t v6;
  void *v8;
  __int128 v9;
  _QWORD v10[17];

  v10[16] = *MEMORY[0x1E0C80C00];
  v8 = v10;
  v9 = xmmword_1C85F20B0;
  v3 = (unsigned __int8 *)sub_1C50561CC(a2, (uint64_t)&v8);
  Key = llvm::StringMapImpl::FindKey((uint64_t *)this + 132, v3, v4);
  if (Key == -1 || Key == (unint64_t)*((unsigned int *)this + 266))
    v6 = 0;
  else
    v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 132) + 8 * Key) + 8);
  if (v8 != v10)
    free(v8);
  return v6;
}

uint64_t llvm::MCContext::setSymbolValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::MCConstantExpr *a5)
{
  unint64_t Symbol;
  unint64_t v9;
  _QWORD v11[4];
  __int16 v12;

  v12 = 261;
  v11[0] = a3;
  v11[1] = a4;
  Symbol = llvm::MCContext::getOrCreateSymbol(a1, (uint64_t)v11);
  v9 = llvm::MCConstantExpr::create(a5, a1, 0, 0);
  return (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 280))(a2, Symbol, v9);
}

uint64_t *llvm::MCContext::registerInlineAsmLabel(llvm::MCContext *this, llvm::MCSymbol *a2)
{
  unsigned __int8 *v3;
  size_t v4;
  _QWORD *v5;
  size_t v6;
  uint64_t *result;

  if ((*(_BYTE *)a2 & 4) != 0)
  {
    v5 = (_QWORD *)*((_QWORD *)a2 - 1);
    v6 = *v5;
    v3 = (unsigned __int8 *)(v5 + 2);
    v4 = v6;
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = sub_1C5934CF8((uint64_t)this + 1144, v3, v4);
  *(_QWORD *)(*result + 8) = a2;
  return result;
}

uint64_t llvm::MCContext::reportError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t (**v4)(void);
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 1960) = 1;
  v5 = a2;
  v6[0] = &off_1E8180350;
  v6[1] = &v5;
  v6[2] = a3;
  v7 = v6;
  llvm::MCContext::reportCommon((_QWORD *)a1, a2, (uint64_t)v6);
  result = (uint64_t)v7;
  if (v7 == v6)
  {
    v4 = (uint64_t (**)(void))(v6[0] + 32);
  }
  else
  {
    if (!v7)
      return result;
    v4 = (uint64_t (**)(void))(*v7 + 40);
  }
  return (*v4)();
}

unint64_t llvm::MCContext::createELFGroupSection(llvm::MCContext *this, const llvm::MCSymbolELF *a2, char a3)
{
  return llvm::MCContext::createELFSectionImpl((uint64_t)this, ".group", 6uLL, 17, 0, 4, 4, (uint64_t)a2, a3, -1, 0);
}

BOOL llvm::MCContext::isELFImplicitMergeableSectionNamePrefix(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  if (a3 < 0xB)
    return 0;
  if (*a2 == 0x2E617461646F722ELL && *(_QWORD *)((char *)a2 + 3) == 0x7274732E61746164)
    return 1;
  return *a2 == 0x2E617461646F722ELL && *(_QWORD *)((char *)a2 + 3) == 0x7473632E61746164;
}

unint64_t llvm::MCContext::getCOFFSection(uint64_t a1, const void *a2, size_t a3, int a4, int a5, _BYTE *a6)
{
  return llvm::MCContext::getCOFFSection(a1, a2, a3, a4, a5, &unk_1C873AB3D, 0, 0, 0xFFFFFFFF, a6);
}

unint64_t llvm::MCContext::getSPIRVSection(llvm::MCContext *this)
{
  unint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v1 = sub_1C484358C((uint64_t)this + 672, 224, 3);
  llvm::MCSection::MCSection(v1, 6, (uint64_t)&unk_1C873AB3D, 0, 2, 0);
  *v2 = off_1E81802D8;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_QWORD *)(v3 + 32) = -1;
  *(_QWORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 48) = 1;
  *(_DWORD *)(v3 + 49) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = v3 + 88;
  *(_OWORD *)(v3 + 72) = xmmword_1C677F680;
  *(_QWORD *)(v3 + 120) = v3 + 136;
  *(_QWORD *)(v3 + 128) = 0x400000000;
  v4 = *(uint64_t **)(v1 + 112);
  v5 = *v4;
  *(_QWORD *)v3 = *v4;
  *(_QWORD *)(v3 + 8) = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  *(_QWORD *)(v3 + 16) = v1;
  return v1;
}

BOOL llvm::MCContext::isValidDwarfFileNumber(uint64_t **this, unsigned int a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  unsigned int *v10;

  v9 = a3;
  v10 = &v9;
  v5 = sub_1C592911C(this + 184, &v9, (uint64_t)&std::piecewise_construct, &v10);
  if (!a2)
    return *((unsigned __int16 *)this + 812) > 4u;
  if (*((_DWORD *)v5 + 36) <= a2)
    return 0;
  v6 = *((_QWORD *)v5 + 17) + 72 * a2;
  if (*(char *)(v6 + 23) < 0)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = *(unsigned __int8 *)(v6 + 23);
  return v7 != 0;
}

void llvm::MCContext::getCVContext(llvm::MCContext *this)
{
  llvm::CodeViewContext *v2;
  llvm::CodeViewContext *v3;
  uint64_t v4;

  if (!*((_QWORD *)this + 23))
  {
    v2 = (llvm::CodeViewContext *)operator new();
    llvm::CodeViewContext::CodeViewContext(v2);
    v3 = (llvm::CodeViewContext *)*((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = v4;
    if (v3)
    {
      llvm::CodeViewContext::~CodeViewContext(v3);
      MEMORY[0x1CAA32FC0]();
    }
  }
}

void llvm::MCContext::diagnose(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v2 = a1[9];
  v3 = v2;
  if (!v2)
    v3 = a1[10];
  v8 = v2 == 0;
  v4 = a1[17];
  if (v4)
  {
    (*(void (**)(_QWORD, uint64_t, BOOL *, uint64_t, _QWORD *))(*(_QWORD *)v4 + 48))(a1[17], a2, &v8, v3, a1 + 11);
  }
  else
  {
    sub_1C485C2F0();
    llvm::MCContext::reportCommon(v5, v6, v7);
  }
}

void llvm::MCContext::reportCommon(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[72];
  _BYTE *v10;
  _OWORD v11[3];
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[22];

  v20[21] = *MEMORY[0x1E0C80C00];
  v6 = v9;
  llvm::SourceMgr::SourceMgr((llvm::SourceMgr *)v9);
  if (a2)
  {
    v6 = (_BYTE *)a1[9];
    if (v6)
    {
      LOBYTE(a2) = 0;
    }
    else
    {
      v6 = (_BYTE *)a1[10];
      LOBYTE(a2) = 1;
    }
  }
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0;
  v18 = v20;
  v19 = 0x400000000;
  v10 = v6;
  v7 = *(_QWORD *)(a3 + 24);
  if (!v7
    || ((*(void (**)(uint64_t, _OWORD *, _BYTE **))(*(_QWORD *)v7 + 48))(v7, v11, &v10),
        LOBYTE(v10) = a2,
        (v8 = a1[17]) == 0))
  {
    sub_1C485C2F0();
  }
  (*(void (**)(uint64_t, _OWORD *, _BYTE **, _BYTE *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, v11, &v10, v6, a1 + 11);
  sub_1C4FAD098((uint64_t)v11);
  llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)v9);
}

_QWORD *llvm::MCContext::reportWarning(_QWORD *result, uint64_t a2, uint64_t a3)
{
  __int16 *v3;
  __int16 v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v3 = (__int16 *)result[244];
  if (v3)
  {
    v4 = *v3;
    if ((v4 & 8) != 0)
      return result;
    if ((v4 & 4) != 0)
      return (_QWORD *)llvm::MCContext::reportError((uint64_t)result, a2, a3);
  }
  v6[0] = &off_1E8180398;
  v6[1] = &v5;
  v6[2] = a3;
  v7 = v6;
  llvm::MCContext::reportCommon(result, a2, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
  if (v7)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 40))(v7);
  return result;
}

void sub_1C62B723C(_QWORD *a1)
{
  if (a1)
  {
    sub_1C62B723C(*a1);
    sub_1C62B723C(a1[1]);
    sub_1C5934688((uint64_t)(a1 + 5));
    operator delete(a1);
  }
}

uint64_t sub_1C62B7280(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + 8) = *(_DWORD *)(result + 8) & 0xFFFC0000 | a3 | 0x140;
  *(_WORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = 4 * (a2 != 0);
  if (a2)
    *(_QWORD *)(result - 8) = a2;
  *(_BYTE *)(result + 32) = 0;
  *(_BYTE *)(result + 36) = 0;
  *(_BYTE *)(result + 48) = 0;
  *(_BYTE *)(result + 64) = 0;
  *(_BYTE *)(result + 72) = 0;
  *(_BYTE *)(result + 88) = 0;
  *(_BYTE *)(result + 96) = 0;
  *(_BYTE *)(result + 112) = 0;
  *(_QWORD *)(result + 120) = 0;
  *(_BYTE *)(result + 128) = 0;
  *(_BYTE *)(result + 130) = 0;
  *(_BYTE *)(result + 136) = 0;
  *(_BYTE *)(result + 168) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_WORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_1C62B7300(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + 8) = *(_DWORD *)(result + 8) & 0xFFFC0000 | a3 | 0x180;
  *(_WORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = 4 * (a2 != 0);
  if (a2)
    *(_QWORD *)(result - 8) = a2;
  *(_WORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_WORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  return result;
}

llvm::raw_ostream *sub_1C62B734C(uint64_t a1, int a2, int a3, llvm::raw_ostream *a4)
{
  llvm::raw_ostream *v5;
  const void *v6;
  size_t v7;
  void *v8;

  v5 = sub_1C4816AD8(a4, "\t.section\t\"");
  v6 = *(const void **)(a1 + 200);
  v7 = *(_QWORD *)(a1 + 208);
  v8 = (void *)*((_QWORD *)v5 + 4);
  if (v7 <= *((_QWORD *)v5 + 3) - (_QWORD)v8)
  {
    if (v7)
    {
      memcpy(v8, v6, v7);
      *((_QWORD *)v5 + 4) += v7;
    }
  }
  else
  {
    llvm::raw_ostream::write(v5, (const char *)v6, v7);
  }
  return sub_1C4816AD8(v5, "\"\n");
}

uint64_t sub_1C62B73C4()
{
  return 0;
}

uint64_t sub_1C62B73CC()
{
  return 0;
}

void sub_1C62B73D4(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v14;

  llvm::MCSection::MCSection(a1, 5, a2, a3, a6, a8);
  *(_QWORD *)v14 = &unk_1E8182640;
  *(_WORD *)(v14 + 224) = a4 | ((_WORD)a5 << 8);
  *(_BYTE *)(v14 + 226) = 1;
  *(_QWORD *)(v14 + 232) = a7;
  *(_QWORD *)(v14 + 240) = a9;
  *(_QWORD *)(v14 + 248) = a10;
  *(_BYTE *)(v14 + 256) = 0;
  *(_BYTE *)(v14 + 260) = 0;
  *(_BYTE *)(v14 + 264) = a11;
  *(_QWORD *)(a7 + 40) = v14;
  if (!*(_BYTE *)(a7 + 33))
    *(_BYTE *)(a7 + 33) = 1;
  *(_BYTE *)(a7 + 32) = 107;
  if (a5)
    *(_BYTE *)(v14 + 24) = 2;
}

uint64_t sub_1C62B7484()
{
  return 0;
}

uint64_t sub_1C62B748C()
{
  return 0;
}

void sub_1C62B7498()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62B74AC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8180308;
  result[1] = v3;
  return result;
}

uint64_t sub_1C62B74E4(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(a1 + 8))(a2, *a3, a4, a5);
}

void sub_1C62B7500(_QWORD *a1)
{
  if (a1)
  {
    sub_1C62B7500(*a1);
    sub_1C62B7500(a1[1]);
    sub_1C4765530((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t sub_1C62B7544(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v8;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)(*(_QWORD *)a1 + v4);
        if (v6 != -8 && v6 != 0)
        {
          v8 = (void **)(v6 + 64);
          sub_1C4765410(&v8);
          v8 = (void **)(v6 + 40);
          sub_1C5934A04(&v8);
          MEMORY[0x1CAA32FB4](v6, 8);
        }
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*(void **)a1);
  return a1;
}

_DWORD *sub_1C62B75E4(uint64_t a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_1C61DB8AC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C61DB990(a1, a2, v7);
    *v5 = *a2;
    v5[1] = a2[1];
    *((_QWORD *)v5 + 1) = 0;
  }
  return v5;
}

uint64_t sub_1C62B7658(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = sub_1C5934DF8((unsigned __int8 *)(v3 + 32), a2);
    v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || sub_1C5934DF8((unsigned __int8 *)a2, (unsigned __int8 **)(v5 + 32)))
    return v2;
  return v5;
}

uint64_t *sub_1C62B76D0(uint64_t a1, unsigned __int8 *a2, size_t a3, char *a4)
{
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;

  v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  i = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  v10 = *i;
  if (*i == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v10)
  {
    while (!v10 || v10 == -8)
    {
      v11 = i[1];
      ++i;
      v10 = v11;
    }
    return i;
  }
  v12 = (char *)operator new(a3 + 17, (std::align_val_t)8uLL);
  v13 = v12;
  v14 = v12 + 16;
  if (a3)
    memcpy(v12 + 16, a2, a3);
  v14[a3] = 0;
  *(_QWORD *)v13 = a3;
  v13[8] = *a4;
  *i = (uint64_t)v13;
  ++*(_DWORD *)(a1 + 12);
  for (i = (uint64_t *)(*(_QWORD *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
        !*i || *i == -8;
  return i;
}

BOOL sub_1C62B77D4(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  char v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD v12[2];

  if (sub_1C49C7600((unsigned __int8 *)a1, (unsigned __int8 *)a2))
  {
    v4 = *(_DWORD *)(a1 + 24);
    v5 = *((_DWORD *)a2 + 6);
    v6 = v4 >= v5;
    if (v4 == v5)
      v6 = *(_DWORD *)(a1 + 28) >= *((_DWORD *)a2 + 7);
    return !v6;
  }
  else
  {
    v8 = *((_BYTE *)a2 + 23);
    v9 = v8 < 0;
    v10 = (uint64_t *)*a2;
    if (v8 >= 0)
      v10 = a2;
    v11 = v8 & 0x7F;
    if (v9)
      v11 = a2[1];
    v12[0] = v10;
    v12[1] = v11;
    return sub_1C4FCE12C((const void **)a1, (uint64_t)v12) >> 31;
  }
}

unint64_t llvm::mcdwarf::emitListsTableHeaderStart(llvm::mcdwarf *this, llvm::MCStreamer *a2)
{
  uint64_t v3;
  unint64_t TempSymbol;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD v10[4];
  __int16 v11;

  v3 = *((_QWORD *)this + 1);
  v10[0] = "debug_list_header_start";
  v11 = 259;
  TempSymbol = llvm::MCContext::createTempSymbol(v3, (uint64_t)v10, 1);
  v5 = *((_QWORD *)this + 1);
  v10[0] = "debug_list_header_end";
  v11 = 259;
  v6 = llvm::MCContext::createTempSymbol(v5, (uint64_t)v10, 1);
  v7 = *(unsigned __int8 *)(*((_QWORD *)this + 1) + 1626);
  if (v7 == 1)
  {
    v10[0] = "DWARF64 mark";
    v11 = 259;
    (*(void (**)(llvm::mcdwarf *, _QWORD *, uint64_t))(*(_QWORD *)this + 112))(this, v10, 1);
    (*(void (**)(llvm::mcdwarf *, uint64_t, uint64_t))(*(_QWORD *)this + 512))(this, 0xFFFFFFFFLL, 4);
  }
  v10[0] = "Length";
  v11 = 259;
  (*(void (**)(llvm::mcdwarf *, _QWORD *, uint64_t))(*(_QWORD *)this + 112))(this, v10, 1);
  if (v7)
    v8 = 8;
  else
    v8 = 4;
  (*(void (**)(llvm::mcdwarf *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)this + 832))(this, v6, TempSymbol, v8);
  (*(void (**)(llvm::mcdwarf *, unint64_t, _QWORD))(*(_QWORD *)this + 192))(this, TempSymbol, 0);
  v10[0] = "Version";
  v11 = 259;
  (*(void (**)(llvm::mcdwarf *, _QWORD *, uint64_t))(*(_QWORD *)this + 112))(this, v10, 1);
  (*(void (**)(llvm::mcdwarf *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, *(unsigned __int16 *)(*((_QWORD *)this + 1) + 1624), 2);
  v10[0] = "Address size";
  v11 = 259;
  (*(void (**)(llvm::mcdwarf *, _QWORD *, uint64_t))(*(_QWORD *)this + 112))(this, v10, 1);
  (*(void (**)(llvm::mcdwarf *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 152) + 8), 1);
  v10[0] = "Segment selector size";
  v11 = 259;
  (*(void (**)(llvm::mcdwarf *, _QWORD *, uint64_t))(*(_QWORD *)this + 112))(this, v10, 1);
  (*(void (**)(llvm::mcdwarf *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, 0, 1);
  return v6;
}

void llvm::MCDwarfLineStr::emitSection(llvm::MCDwarfLineStr *this, llvm::MCStreamer *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(llvm::MCStreamer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 168))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 168) + 96), 0);
  llvm::StringTableBuilder::finalizeInOrder((llvm::MCDwarfLineStr *)((char *)this + 8));
  v5 = 0;
  v6 = 0;
  v4 = (unsigned __int8 *)&v7;
  sub_1C593A164(&v4, *((_QWORD *)this + 4));
  llvm::StringTableBuilder::write((unsigned int *)this + 2, v4);
  (*(void (**)(llvm::MCStreamer *, unsigned __int8 *, uint64_t))(*(_QWORD *)a2 + 496))(a2, v4, v5);
  if (v4 != (unsigned __int8 *)&v7)
    free(v4);
}

uint64_t llvm::MCDwarfDwoLineTable::Emit(uint64_t result, llvm::MCStreamer *a2, int a3, uint64_t a4)
{
  llvm::MCDwarfLineTableHeader *v6;
  _BYTE v7[8];
  uint64_t v8;
  char v9;

  if (*(_BYTE *)(result + 464))
  {
    v6 = (llvm::MCDwarfLineTableHeader *)result;
    v7[0] = 0;
    v9 = 0;
    (*(void (**)(llvm::MCStreamer *, uint64_t, _QWORD))(*(_QWORD *)a2 + 168))(a2, a4, 0);
    llvm::MCDwarfLineTableHeader::Emit(v6, a2, a3 & 0xFFFFFF, 0, 0, (uint64_t)v7);
    result = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)a2 + 192))(a2);
    if (v9)
      return MEMORY[0x1CAA32FB4](v8, 8);
  }
  return result;
}

uint64_t llvm::MCDwarfLineStr::emitRef(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  unsigned int HashValue;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v4 = a4;
  if (*(_BYTE *)(a2[1] + 1626))
    v8 = 8;
  else
    v8 = 4;
  v9 = a1 + 8;
  HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(a3, a4);
  v11 = llvm::StringTableBuilder::add(v9, (uint64_t)a3, v4 | ((unint64_t)HashValue << 32));
  if (!*(_BYTE *)(a1 + 56))
    return (*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*a2 + 512))(a2, v11, v8);
  v12 = a2[1];
  v13 = llvm::MCSymbolRefExpr::create(*(_QWORD *)a1, 0, v12, 0);
  v14 = (int)v11;
  v15 = v12 + 192;
  v16 = sub_1C484358C(v12 + 192, 24, 3);
  *(_BYTE *)v16 = 1;
  *(_DWORD *)(v16 + 1) = *(unsigned __int8 *)(v16 + 4) << 24;
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 16) = v14;
  v17 = sub_1C484358C(v15, 32, 3);
  *(_BYTE *)v17 = 0;
  *(_DWORD *)(v17 + 1) = *(unsigned __int8 *)(v17 + 4) << 24;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = v13;
  *(_QWORD *)(v17 + 24) = v16;
  return (*(uint64_t (**)(_QWORD *, unint64_t, uint64_t, _QWORD))(*a2 + 504))(a2, v17, v8, 0);
}

uint64_t llvm::MCGenDwarfInfo::Emit(llvm::MCGenDwarfInfo *this, llvm::MCStreamer *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  int v13;
  unint64_t TempSymbol;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  llvm::MCSection **v26;
  llvm::MCSection **v27;
  llvm::MCSection *v28;
  uint64_t v29;
  unint64_t EndSymbol;
  unint64_t v31;
  unint64_t v32;
  const llvm::MCSymbol *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(llvm::MCGenDwarfInfo *, _QWORD, _QWORD);
  llvm::MCSection **v38;
  llvm::MCSection **v39;
  llvm::MCSection *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  const char *separator;
  uint64_t v62;
  char *v63;
  char *v64;
  char v65;
  char *v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  llvm::MCSection **v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  llvm::MCStreamer *v78;
  llvm::MCSection **v79;
  llvm::MCSection **v80;
  llvm::MCSection *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  const llvm::MCSymbol *v86;
  llvm::MCSymbol *v87;
  _BOOL4 v88;
  unint64_t v89;
  llvm::MCSymbol *v90;
  unsigned int v91;
  _DWORD *v92[4];
  __int16 v93;

  v3 = *((_QWORD *)this + 1);
  v4 = *(_QWORD *)(v3 + 152);
  v5 = *(unsigned __int8 *)(v4 + 424);
  if (*(_BYTE *)(v4 + 424))
  {
    v6 = (*(uint64_t (**)(llvm::MCGenDwarfInfo *, _QWORD))(*(_QWORD *)this + 848))(this, 0);
    v7 = *((_QWORD *)this + 1);
  }
  else
  {
    v6 = 0;
    v7 = *((_QWORD *)this + 1);
  }
  result = llvm::MCContext::finalizeDwarfSections(v7, this);
  v9 = *((_QWORD *)this + 1);
  v10 = *(_QWORD *)(v9 + 1544);
  v11 = *(_QWORD *)(v9 + 1552);
  if (v10 != v11)
  {
    v12 = (unint64_t)(v11 - v10) >= 9 && *(unsigned __int16 *)(v9 + 1624) > 2u;
    v88 = v12;
    if (v5)
      v13 = 1;
    else
      v13 = v12;
    (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, *(_QWORD *)(*(_QWORD *)(v3 + 168) + 80), 0);
    TempSymbol = 0;
    if (v13 == 1)
    {
      v92[0] = "tmp";
      v93 = 259;
      TempSymbol = llvm::MCContext::createTempSymbol(v3, (uint64_t)v92, 1);
      (*(void (**)(llvm::MCGenDwarfInfo *, unint64_t, _QWORD))(*(_QWORD *)this + 192))(this, TempSymbol, 0);
    }
    v86 = (const llvm::MCSymbol *)v6;
    v87 = (llvm::MCSymbol *)TempSymbol;
    (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, *(_QWORD *)(*(_QWORD *)(v3 + 168) + 72), 0);
    v90 = 0;
    if (v13)
    {
      v92[0] = "tmp";
      v93 = 259;
      v90 = (llvm::MCSymbol *)llvm::MCContext::createTempSymbol(v3, (uint64_t)v92, 1);
      (*(void (**)(llvm::MCGenDwarfInfo *))(*(_QWORD *)this + 192))(this);
    }
    (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, *(_QWORD *)(*(_QWORD *)(v3 + 168) + 144), 0);
    v15 = *((_QWORD *)this + 1);
    (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, *(_QWORD *)(*(_QWORD *)(v15 + 168) + 144), 0);
    v16 = *(unsigned __int8 *)(v15 + 1626);
    if (*(_BYTE *)(v15 + 1626))
      v17 = 8;
    else
      v17 = 4;
    if (*(_BYTE *)(v15 + 1626))
      v18 = 24;
    else
      v18 = 12;
    v19 = *(_QWORD *)(v15 + 152);
    v20 = *(int *)(v19 + 8);
    v21 = 2 * v20;
    v22 = 2 * v20 - 1;
    if ((v22 & v18) != 0)
      v23 = 2 * v20 - (v22 & v18);
    else
      v23 = 0;
    v24 = v21 * ((*(_QWORD *)(v15 + 1552) - *(_QWORD *)(v15 + 1544)) >> 3);
    if (v16 == 1)
      (*(void (**)(llvm::MCGenDwarfInfo *, uint64_t, uint64_t))(*(_QWORD *)this + 512))(this, 0xFFFFFFFFLL, 4);
    if (v16)
      v25 = 12;
    else
      v25 = 8;
    (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, (v25 + v21 + v23 + v24), v17);
    (*(void (**)(llvm::MCGenDwarfInfo *, uint64_t, uint64_t))(*(_QWORD *)this + 512))(this, 2, 2);
    if (v87)
      llvm::MCStreamer::emitSymbolValue(this, v87, v17, *(_BYTE *)(v19 + 338));
    else
      (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, 0, v17);
    (*(void (**)(llvm::MCGenDwarfInfo *, uint64_t, uint64_t))(*(_QWORD *)this + 512))(this, v20, 1);
    (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, 0, 1);
    if (v23 >= 1)
    {
      do
      {
        (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, 0, 1);
        --v23;
      }
      while (v23);
    }
    v26 = *(llvm::MCSection ***)(v15 + 1544);
    v27 = *(llvm::MCSection ***)(v15 + 1552);
    while (v26 != v27)
    {
      v28 = *v26++;
      v29 = *((_QWORD *)v28 + 1);
      EndSymbol = llvm::MCSection::getEndSymbol(v28, (llvm::MCContext *)v15);
      v31 = llvm::MCSymbolRefExpr::create(v29, 0, v15, 0);
      v32 = sub_1C5939A24(v15, v29, EndSymbol, 0);
      (*(void (**)(llvm::MCGenDwarfInfo *, unint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 504))(this, v31, v20, 0);
      sub_1C5939B5C(this, v32, v20);
    }
    (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, 0, v20);
    (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, 0, v20);
    v33 = 0;
    if (v88)
    {
      v34 = *((_QWORD *)this + 1);
      v35 = *(int *)(*(_QWORD *)(v34 + 152) + 8);
      v36 = *(_QWORD *)(v34 + 168);
      v37 = *(void (**)(llvm::MCGenDwarfInfo *, _QWORD, _QWORD))(*(_QWORD *)this + 168);
      if (*(unsigned __int16 *)(v34 + 1624) >= 5u)
      {
        v37(this, *(_QWORD *)(v36 + 312), 0);
        v89 = llvm::mcdwarf::emitListsTableHeaderStart(this, v78);
        v92[0] = "Offset entry count";
        v93 = 259;
        (*(void (**)(llvm::MCGenDwarfInfo *, _DWORD **, uint64_t))(*(_QWORD *)this + 112))(this, v92, 1);
        (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, 0, 4);
        v92[0] = "debug_rnglist0_start";
        v93 = 259;
        v33 = (const llvm::MCSymbol *)llvm::MCContext::createTempSymbol(v34, (uint64_t)v92, 1);
        (*(void (**)(llvm::MCGenDwarfInfo *, const llvm::MCSymbol *, _QWORD))(*(_QWORD *)this + 192))(this, v33, 0);
        v79 = *(llvm::MCSection ***)(v34 + 1544);
        v80 = *(llvm::MCSection ***)(v34 + 1552);
        while (v79 != v80)
        {
          v81 = *v79++;
          v82 = *((_QWORD *)v81 + 1);
          v83 = llvm::MCSection::getEndSymbol(v81, (llvm::MCContext *)v34);
          v84 = llvm::MCSymbolRefExpr::create(v82, 0, v34, 0);
          v85 = sub_1C5939A24(v34, v82, v83, 0);
          (*(void (**)(llvm::MCGenDwarfInfo *, uint64_t, uint64_t))(*(_QWORD *)this + 512))(this, 7, 1);
          (*(void (**)(llvm::MCGenDwarfInfo *, unint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 504))(this, v84, v35, 0);
          (*(void (**)(llvm::MCGenDwarfInfo *, unint64_t))(*(_QWORD *)this + 544))(this, v85);
        }
        (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, 0, 1);
        (*(void (**)(llvm::MCGenDwarfInfo *, unint64_t, _QWORD))(*(_QWORD *)this + 192))(this, v89, 0);
      }
      else
      {
        v37(this, *(_QWORD *)(v36 + 152), 0);
        v92[0] = "debug_ranges_start";
        v93 = 259;
        v33 = (const llvm::MCSymbol *)llvm::MCContext::createTempSymbol(v34, (uint64_t)v92, 1);
        (*(void (**)(llvm::MCGenDwarfInfo *, const llvm::MCSymbol *, _QWORD))(*(_QWORD *)this + 192))(this, v33, 0);
        v38 = *(llvm::MCSection ***)(v34 + 1544);
        v39 = *(llvm::MCSection ***)(v34 + 1552);
        while (v38 != v39)
        {
          v40 = *v38++;
          v41 = *((_QWORD *)v40 + 1);
          v42 = llvm::MCSection::getEndSymbol(v40, (llvm::MCContext *)v34);
          v43 = llvm::MCSymbolRefExpr::create(v41, 0, v34, 0);
          llvm::MCStreamer::emitFill(this, v35, 0xFFu);
          (*(void (**)(llvm::MCGenDwarfInfo *, unint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 504))(this, v43, v35, 0);
          v44 = sub_1C5939A24(v34, v41, v42, 0);
          (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, 0, v35);
          sub_1C5939B5C(this, v44, v35);
        }
        (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, 0, v35);
        (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, 0, v35);
      }
    }
    v45 = *((_QWORD *)this + 1);
    (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, *(_QWORD *)(*(_QWORD *)(v45 + 168) + 72), 0);
    llvm::MCStreamer::emitULEB128IntValue(this, 1uLL, 0);
    llvm::MCStreamer::emitULEB128IntValue(this, 0x11uLL, 0);
    (*(void (**)(llvm::MCGenDwarfInfo *, uint64_t, uint64_t))(*(_QWORD *)this + 512))(this, 1, 1);
    if (*(unsigned __int16 *)(v45 + 1624) <= 3u)
    {
      if (*(_BYTE *)(v45 + 1626) == 1)
        v46 = 7;
      else
        v46 = 6;
    }
    else
    {
      v46 = 23;
    }
    llvm::MCStreamer::emitULEB128IntValue(this, 0x10uLL, 0);
    llvm::MCStreamer::emitULEB128IntValue(this, v46, 0);
    if (*(_QWORD *)(v45 + 1552) - *(_QWORD *)(v45 + 1544) < 9uLL || *(unsigned __int16 *)(v45 + 1624) <= 2u)
    {
      llvm::MCStreamer::emitULEB128IntValue(this, 0x11uLL, 0);
      v46 = 1;
      llvm::MCStreamer::emitULEB128IntValue(this, 1uLL, 0);
      v47 = 18;
    }
    else
    {
      v47 = 85;
    }
    llvm::MCStreamer::emitULEB128IntValue(this, v47, 0);
    llvm::MCStreamer::emitULEB128IntValue(this, v46, 0);
    llvm::MCStreamer::emitULEB128IntValue(this, 3uLL, 0);
    llvm::MCStreamer::emitULEB128IntValue(this, 8uLL, 0);
    if (*(_QWORD *)(v45 + 1280))
    {
      llvm::MCStreamer::emitULEB128IntValue(this, 0x1BuLL, 0);
      llvm::MCStreamer::emitULEB128IntValue(this, 8uLL, 0);
    }
    if (*(_QWORD *)(v45 + 1600))
    {
      llvm::MCStreamer::emitULEB128IntValue(this, 0x3FE2uLL, 0);
      llvm::MCStreamer::emitULEB128IntValue(this, 8uLL, 0);
    }
    llvm::MCStreamer::emitULEB128IntValue(this, 0x25uLL, 0);
    llvm::MCStreamer::emitULEB128IntValue(this, 8uLL, 0);
    llvm::MCStreamer::emitULEB128IntValue(this, 0x13uLL, 0);
    llvm::MCStreamer::emitULEB128IntValue(this, 5uLL, 0);
    llvm::MCStreamer::emitULEB128IntValue(this, 0, 0);
    llvm::MCStreamer::emitULEB128IntValue(this, 0, 0);
    llvm::MCStreamer::emitULEB128IntValue(this, 2uLL, 0);
    llvm::MCStreamer::emitULEB128IntValue(this, 0xAuLL, 0);
    (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, 0, 1);
    llvm::MCStreamer::emitULEB128IntValue(this, 3uLL, 0);
    llvm::MCStreamer::emitULEB128IntValue(this, 8uLL, 0);
    llvm::MCStreamer::emitULEB128IntValue(this, 0x3AuLL, 0);
    llvm::MCStreamer::emitULEB128IntValue(this, 6uLL, 0);
    llvm::MCStreamer::emitULEB128IntValue(this, 0x3BuLL, 0);
    llvm::MCStreamer::emitULEB128IntValue(this, 6uLL, 0);
    llvm::MCStreamer::emitULEB128IntValue(this, 0x11uLL, 0);
    llvm::MCStreamer::emitULEB128IntValue(this, 1uLL, 0);
    llvm::MCStreamer::emitULEB128IntValue(this, 0, 0);
    llvm::MCStreamer::emitULEB128IntValue(this, 0, 0);
    (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, 0, 1);
    v48 = *((_QWORD *)this + 1);
    (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, *(_QWORD *)(*(_QWORD *)(v48 + 168) + 80), 0);
    v92[0] = "tmp";
    v93 = 259;
    v49 = llvm::MCContext::createTempSymbol(v48, (uint64_t)v92, 1);
    (*(void (**)(llvm::MCGenDwarfInfo *, unint64_t, _QWORD))(*(_QWORD *)this + 192))(this, v49, 0);
    v92[0] = "tmp";
    v93 = 259;
    v50 = llvm::MCContext::createTempSymbol(v48, (uint64_t)v92, 1);
    if (*(_BYTE *)(v48 + 1626))
      v51 = 12;
    else
      v51 = 4;
    if (*(_BYTE *)(v48 + 1626))
      v52 = 8;
    else
      v52 = 4;
    if (*(_BYTE *)(v48 + 1626) == 1)
      (*(void (**)(llvm::MCGenDwarfInfo *, uint64_t, uint64_t))(*(_QWORD *)this + 512))(this, 0xFFFFFFFFLL, 4);
    v53 = sub_1C5939A24(v48, v49, v50, v51);
    sub_1C5939B5C(this, v53, v52);
    (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, *(unsigned __int16 *)(v48 + 1624), 2);
    v54 = *(_QWORD *)(v48 + 152);
    v55 = *(int *)(v54 + 8);
    if (*(unsigned __int16 *)(v48 + 1624) >= 5u)
    {
      (*(void (**)(llvm::MCGenDwarfInfo *, uint64_t, uint64_t))(*(_QWORD *)this + 512))(this, 1, 1);
      (*(void (**)(llvm::MCGenDwarfInfo *, uint64_t, uint64_t))(*(_QWORD *)this + 512))(this, v55, 1);
    }
    if (v90)
      llvm::MCStreamer::emitSymbolValue(this, v90, v52, *(_BYTE *)(v54 + 338));
    else
      (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, 0, v52);
    if (*(unsigned __int16 *)(v48 + 1624) <= 4u)
      (*(void (**)(llvm::MCGenDwarfInfo *, uint64_t, uint64_t))(*(_QWORD *)this + 512))(this, v55, 1);
    llvm::MCStreamer::emitULEB128IntValue(this, 1uLL, 0);
    if (v86)
      llvm::MCStreamer::emitSymbolValue(this, v86, v52, *(_BYTE *)(v54 + 338));
    else
      (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, 0, v52);
    if (v33)
    {
      llvm::MCStreamer::emitSymbolValue(this, v33, v52, 0);
    }
    else
    {
      v73 = *(llvm::MCSection ***)(v48 + 1544);
      v74 = *((_QWORD *)*v73 + 1);
      v75 = llvm::MCSection::getEndSymbol(*v73, (llvm::MCContext *)v48);
      v76 = llvm::MCSymbolRefExpr::create(v74, 0, v48, 0);
      (*(void (**)(llvm::MCGenDwarfInfo *, unint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 504))(this, v76, v55, 0);
      v77 = llvm::MCSymbolRefExpr::create(v75, 0, v48, 0);
      (*(void (**)(llvm::MCGenDwarfInfo *, unint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 504))(this, v77, v55, 0);
    }
    v91 = 0;
    v92[0] = &v91;
    v56 = sub_1C592911C((uint64_t **)(v48 + 1472), &v91, (uint64_t)&std::piecewise_construct, v92);
    if (*((_DWORD *)v56 + 14))
    {
      v57 = (uint64_t *)*((_QWORD *)v56 + 6);
      v58 = *((_BYTE *)v57 + 23);
      if (v58 >= 0)
        v59 = *((_QWORD *)v56 + 6);
      else
        v59 = *v57;
      if (v58 >= 0)
        v60 = v58 & 0x7F;
      else
        v60 = v57[1];
      (*(void (**)(llvm::MCGenDwarfInfo *, uint64_t, uint64_t))(*(_QWORD *)this + 488))(this, v59, v60);
      separator = llvm::sys::path::get_separator(0);
      (*(void (**)(llvm::MCGenDwarfInfo *, const char *, uint64_t))(*(_QWORD *)this + 488))(this, separator, v62);
    }
    v91 = 0;
    v92[0] = &v91;
    v63 = sub_1C592911C((uint64_t **)(v48 + 1472), &v91, (uint64_t)&std::piecewise_construct, v92);
    if (*((_DWORD *)v63 + 36))
    {
      v64 = (char *)(*((_QWORD *)v63 + 17) + 72);
    }
    else
    {
      v91 = 0;
      v92[0] = &v91;
      v64 = sub_1C592911C((uint64_t **)(v48 + 1472), &v91, (uint64_t)&std::piecewise_construct, v92) + 424;
    }
    v65 = v64[23];
    if (v65 >= 0)
      v66 = v64;
    else
      v66 = *(char **)v64;
    if (v65 >= 0)
      v67 = v65 & 0x7F;
    else
      v67 = *((_QWORD *)v64 + 1);
    (*(void (**)(llvm::MCGenDwarfInfo *, char *, uint64_t))(*(_QWORD *)this + 488))(this, v66, v67);
    (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, 0, 1);
    if (*(_QWORD *)(v48 + 1280))
    {
      (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD))(*(_QWORD *)this + 488))(this, *(_QWORD *)(v48 + 1272));
      (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, 0, 1);
    }
    if (*(_QWORD *)(v48 + 1600))
    {
      (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD))(*(_QWORD *)this + 488))(this, *(_QWORD *)(v48 + 1592));
      (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, 0, 1);
    }
    if (*(_QWORD *)(v48 + 1616))
      v68 = *(const char **)(v48 + 1608);
    else
      v68 = "llvm-mc (based on LLVM 32023.334)";
    (*(void (**)(llvm::MCGenDwarfInfo *, const char *))(*(_QWORD *)this + 488))(this, v68);
    (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, 0, 1);
    (*(void (**)(llvm::MCGenDwarfInfo *, uint64_t, uint64_t))(*(_QWORD *)this + 512))(this, 32769, 2);
    v69 = *((_QWORD *)this + 1);
    v70 = *(_QWORD *)(v69 + 1568);
    v71 = *(_QWORD *)(v69 + 1576);
    while (v70 != v71)
    {
      llvm::MCStreamer::emitULEB128IntValue(this, 2uLL, 0);
      (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, _QWORD))(*(_QWORD *)this + 488))(this, *(_QWORD *)v70, *(_QWORD *)(v70 + 8));
      (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, 0, 1);
      (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, *(unsigned int *)(v70 + 16), 4);
      (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, *(unsigned int *)(v70 + 20), 4);
      v72 = llvm::MCSymbolRefExpr::create(*(_QWORD *)(v70 + 24), 0, v48, 0);
      (*(void (**)(llvm::MCGenDwarfInfo *, unint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 504))(this, v72, v55, 0);
      v70 += 32;
    }
    (*(void (**)(llvm::MCGenDwarfInfo *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, 0, 1);
    return (*(uint64_t (**)(llvm::MCGenDwarfInfo *, unint64_t, _QWORD))(*(_QWORD *)this + 192))(this, v50, 0);
  }
  return result;
}

void llvm::MCDwarfFrameEmitter::EmitAdvanceLoc(llvm::MCDwarfFrameEmitter *this, llvm::MCObjectStreamer *a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  _QWORD v6[2];
  uint64_t v7;
  int v8;
  _QWORD *v9;
  void *v10;
  __int128 v11;
  _QWORD v12[33];

  v12[32] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)*((_QWORD *)this + 1);
  v10 = v12;
  v11 = xmmword_1C64638F0;
  sub_1C613932C((uint64_t)v6, (uint64_t)&v10);
  llvm::MCDwarfFrameEmitter::EncodeAdvanceLoc(v4, (unint64_t)a2, (llvm::raw_ostream *)v6, v5);
  (*(void (**)(llvm::MCDwarfFrameEmitter *, _QWORD, _QWORD))(*(_QWORD *)this + 488))(this, *v9, v9[1]);
  v6[0] = off_1E81A6E70;
  if (v8 == 1 && v7)
    MEMORY[0x1CAA32F9C](v7, 0x1000C8077774924);
  if (v10 != v12)
    free(v10);
}

uint64_t sub_1C62B8C5C(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v7;

  v4 = *(unsigned __int8 *)(a1 + 64);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v4)
  {
    if (a2 != a1)
      sub_1C56845B8(a1 + 8, a2 + 8);
    v5 = *(_OWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    sub_1C56845B8(a1 + 8, a2 + 8);
    v7 = *(_OWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v7;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = 1;
  }
  return a1;
}

void sub_1C62B8D00(void **a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v5;

  v1 = *a1;
  if (*a1)
  {
    v5 = *a1;
    v2 = (uint64_t)a1[1];
    v3 = v1;
    if ((void *)v2 != v1)
    {
      do
        v2 = sub_1C593A338(v2 - 80);
      while ((void *)v2 != v5);
      v3 = *a1;
    }
    a1[1] = v5;
    operator delete(v3);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

unint64_t sub_1C62B8D74(uint64_t *a1, int *a2, int *a3, char *a4, char *a5, int *a6, char *a7)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  _OWORD v19[7];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  memset(v19, 0, sizeof(v19));
  v14 = sub_1C4D9B584();
  v15 = *a1;
  v20 = v14;
  v16 = *a2;
  v18 = v15;
  return sub_1C62B8E50((char *)&v18, v19, (char *)&v19[3] + 8, v16, a3, a4, a5, a6, a7);
}

unint64_t sub_1C62B8E50(char *a1, _DWORD *__dst, char *a3, int a4, int *a5, char *a6, char *a7, int *a8, char *a9)
{
  _DWORD *v15;
  _BYTE *v16;
  uint64_t v18;
  uint64_t v19;

  v18 = 0;
  v15 = sub_1C4ED49B0(a1, &v18, __dst, (unint64_t)a3, a4);
  v19 = v18;
  v16 = sub_1C4ED49B0(a1, &v19, v15, (unint64_t)a3, *a5);
  return sub_1C593C01C(a1, v19, v16, a3, *a6, a7, a8, a9);
}

uint64_t llvm::MCELFStreamer::MCELFStreamer(uint64_t a1, llvm::MCContext *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a3;
  *a3 = 0;
  v7 = *a4;
  *a4 = 0;
  v14 = v7;
  v15 = v6;
  v8 = *a5;
  *a5 = 0;
  v13 = v8;
  llvm::MCObjectStreamer::MCObjectStreamer(a1, a2, &v15, &v14, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = v14;
  v14 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v15;
  v15 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *(_QWORD *)a1 = off_1E8180428;
  *(_QWORD *)(a1 + 544) = a1 + 560;
  *(_QWORD *)(a1 + 552) = 0x4000000000;
  *(_QWORD *)(a1 + 3120) = a1 + 3136;
  *(_QWORD *)(a1 + 3128) = 0x4000000000;
  *(_BYTE *)(a1 + 5696) = 0;
  *(_QWORD *)(a1 + 5704) = a1 + 5720;
  *(_QWORD *)(a1 + 5712) = 0x400000000;
  return a1;
}

_QWORD *llvm::MCELFStreamer::mergeFragment(llvm::MCObjectStreamer *this, llvm::MCFragment *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char *v20;
  _QWORD v21[2];
  uint64_t v22;
  int v23;
  void *v24;
  __int128 v25;
  _QWORD v26[33];

  v26[32] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 34);
  v7 = *(unsigned int *)(v6 + 496);
  if (!(_DWORD)v7 || (*(_BYTE *)(v6 + 500) & 1) == 0)
    goto LABEL_3;
  v17 = *(_QWORD *)(a3 + 72);
  if (v17 > v7)
  {
    v20 = "Fragment can't be larger than a bundle size";
    goto LABEL_18;
  }
  v18 = llvm::computeBundlePadding(*((_QWORD *)this + 34), a3, *((_QWORD *)a2 + 9), *(_QWORD *)(a3 + 72));
  if (v18 >= 0x100)
  {
    v20 = "Padding cannot exceed 255 bytes";
LABEL_18:
    llvm::report_fatal_error((llvm *)v20, (const char *)1);
  }
  v19 = v18;
  if (v18)
  {
    v24 = v26;
    v25 = xmmword_1C64638F0;
    sub_1C613932C((uint64_t)v21, (uint64_t)&v24);
    *(_BYTE *)(a3 + 52) = v19;
    llvm::MCAssembler::writeFragmentPadding(v6, (uint64_t)v21, a3, v17);
    sub_1C50575FC((_QWORD *)a2 + 8, v24, (_BYTE *)v24 + v25);
    v21[0] = off_1E81A6E70;
    if (v23 == 1 && v22)
      MEMORY[0x1CAA32F9C](v22, 0x1000C8077774924);
    if (v24 != v26)
      free(v24);
  }
LABEL_3:
  llvm::MCObjectStreamer::flushPendingLabels(this, (unint64_t)a2, *((_QWORD *)a2 + 9));
  v8 = *(unsigned int *)(a3 + 128);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = 24 * v8;
    do
    {
      v11 = *(_QWORD *)(a3 + 120) + v9;
      *(_DWORD *)(v11 + 8) += *((_DWORD *)a2 + 18);
      v12 = sub_1C4926708((uint64_t)a2 + 120, v11, 1);
      v13 = *((_QWORD *)a2 + 15) + 24 * *((unsigned int *)a2 + 32);
      v14 = *(_OWORD *)v12;
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v12 + 16);
      *(_OWORD *)v13 = v14;
      ++*((_DWORD *)a2 + 32);
      v9 += 24;
    }
    while (v10 != v9);
  }
  if (!*((_QWORD *)a2 + 7))
  {
    v16 = *(_QWORD *)(a3 + 56);
    if (v16)
    {
      *((_BYTE *)a2 + 50) = 1;
      *((_QWORD *)a2 + 7) = v16;
    }
  }
  return sub_1C50575FC((_QWORD *)a2 + 8, *(_BYTE **)(a3 + 64), (_BYTE *)(*(_QWORD *)(a3 + 64) + *(_QWORD *)(a3 + 72)));
}

uint64_t llvm::MCELFStreamer::initSections(llvm::MCELFStreamer *this, int a2, const llvm::MCSubtargetInfo *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v6 = *((_QWORD *)this + 1);
  (*(void (**)(llvm::MCELFStreamer *, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, *(_QWORD *)(*(_QWORD *)(v6 + 168) + 24), 0);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 168) + 16))(*(_QWORD *)(v6 + 168));
  result = (*(uint64_t (**)(llvm::MCELFStreamer *, uint64_t, const llvm::MCSubtargetInfo *, _QWORD))(*(_QWORD *)this + 640))(this, v7, a3, 0);
  if (a2)
  {
    v9 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 152) + 16))(*(_QWORD *)(v6 + 152), v6);
    return (*(uint64_t (**)(llvm::MCELFStreamer *, uint64_t, _QWORD))(*(_QWORD *)this + 168))(this, v9, 0);
  }
  return result;
}

void llvm::MCELFStreamer::emitLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::MCObjectStreamer::emitLabel(a1, a2, a3);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * *(unsigned int *)(a1 + 120) - 32) + 229) & 4) != 0)
    *(_WORD *)(a2 + 12) = *(_WORD *)(a2 + 12) & 0xFFF8 | 5;
}

llvm::MCSection *llvm::MCELFStreamer::emitLabelAtPos(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::MCSection *result;

  result = llvm::MCObjectStreamer::emitLabelAtPos((uint64_t *)a1, a2, a3, a4, a5);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * *(unsigned int *)(a1 + 120) - 32) + 229) & 4) != 0)
    *(_WORD *)(a2 + 12) = *(_WORD *)(a2 + 12) & 0xFFF8 | 5;
  return result;
}

uint64_t llvm::MCELFStreamer::emitAssemblerFlag(uint64_t a1, int a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 272) + 8) + 208))(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 8));
  if (a2 == 1)
    *(_BYTE *)(*(_QWORD *)(a1 + 272) + 500) |= 2u;
  return result;
}

uint64_t llvm::MCELFStreamer::changeSection(llvm::MCELFStreamer *this, llvm::MCSection *a2, const llvm::MCExpr *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v6 = *((unsigned int *)this + 30);
  if ((_DWORD)v6 && (v7 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v6 - 32)) != 0)
  {
    if (*(_DWORD *)(v7 + 36))
      llvm::report_fatal_error((llvm *)"Unterminated .bundle_lock when changing a section", (const char *)1);
    v8 = *((_QWORD *)this + 34);
    v9 = *(unsigned int *)(v8 + 496);
    if ((_DWORD)v9 && (*(_BYTE *)(v7 + 44) & 2) != 0 && v9 > (1 << *(_BYTE *)(v7 + 24)))
      *(_BYTE *)(v7 + 24) = __clz(v9) ^ 0x3F;
  }
  else
  {
    v8 = *((_QWORD *)this + 34);
  }
  v10 = *((_QWORD *)a2 + 30) & 0xFFFFFFFFFFFFFFF8;
  if (v10)
    llvm::MCAssembler::registerSymbol(v8, v10, 0);
  if ((*((_BYTE *)a2 + 230) & 0x20) != 0)
    (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v8 + 24) + 56))(*(_QWORD *)(v8 + 24), v10);
  llvm::MCObjectStreamer::changeSectionImpl(this, a2, a3);
  return llvm::MCAssembler::registerSymbol(v8, *((_QWORD *)a2 + 1), 0);
}

uint64_t llvm::MCELFStreamer::emitWeakReference(llvm::MCELFStreamer *this, llvm::MCSymbol *a2, const llvm::MCSymbol *a3)
{
  const llvm::MCExpr *v6;

  llvm::MCAssembler::registerSymbol(*((_QWORD *)this + 34), (uint64_t)a3, 0);
  v6 = (const llvm::MCExpr *)llvm::MCSymbolRefExpr::create((uint64_t)a3, 29, *((_QWORD *)this + 1), 0);
  return llvm::MCSymbol::setVariableValue((uint64_t)a2, v6);
}

uint64_t sub_1C62B94EC(_BYTE *a1)
{
  if ((*a1 & 4) != 0)
    return *((_QWORD *)a1 - 1) + 16;
  else
    return 0;
}

unint64_t llvm::MCELFStreamer::emitCommonSymbol(llvm::MCELFStreamer *this, llvm::MCSymbol *a2, llvm::MCConstantExpr *a3, uint64_t a4)
{
  __int16 v8;
  uint64_t v9;
  unint64_t ELFSection;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23[4];
  __int16 v24;
  unsigned __int8 v25[32];
  __int16 v26;

  llvm::MCAssembler::registerSymbol(*((_QWORD *)this + 34), (uint64_t)a2, 0);
  v8 = *((_WORD *)a2 + 6);
  if ((v8 & 0x1000) == 0)
    v8 = v8 & 0xEFE0 | 0x1008;
  *((_WORD *)a2 + 6) = v8 & 0xFFF8 | 1;
  if (llvm::MCSymbolELF::getBinding(a2))
  {
    if (sub_1C62B96FC((uint64_t)a2, (uint64_t)a3, a4))
    {
      v21 = "Symbol: ";
      v22 = 259;
      v20 = 261;
      v19[0] = sub_1C62B94EC(a2);
      v19[1] = v16;
      sub_1C6131AAC((uint64_t *)&v21, v19, (uint64_t)v23);
      v17 = " redeclared as different type";
      v18 = 259;
      sub_1C6131AAC(v23, (uint64_t *)&v17, (uint64_t)v25);
      llvm::report_fatal_error((uint64_t)v25, 1);
    }
  }
  else
  {
    v9 = **((_QWORD **)this + 34);
    v23[0] = (uint64_t)".bss";
    v24 = 259;
    v26 = 257;
    ELFSection = llvm::MCContext::getELFSection(v9, (llvm::Twine *)v23, 8, 3, 0, v25, 0, -1, 0);
    v11 = *((unsigned int *)this + 30);
    if ((_DWORD)v11)
    {
      v12 = *((_QWORD *)this + 14) + 32 * v11;
      v14 = *(_QWORD *)(v12 - 32);
      v13 = *(_QWORD *)(v12 - 24);
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
    (*(void (**)(llvm::MCELFStreamer *, unint64_t, _QWORD))(*(_QWORD *)this + 168))(this, ELFSection, 0);
    (*(void (**)(llvm::MCELFStreamer *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)this + 632))(this, a4, 0, 1, 0);
    (*(void (**)(llvm::MCELFStreamer *, llvm::MCSymbol *, _QWORD))(*(_QWORD *)this + 192))(this, a2, 0);
    llvm::MCStreamer::emitZeros(this, (uint64_t)a3);
    (*(void (**)(llvm::MCELFStreamer *, uint64_t, uint64_t))(*(_QWORD *)this + 168))(this, v14, v13);
  }
  result = llvm::MCConstantExpr::create(a3, *((_QWORD *)this + 1), 0, 0);
  *((_QWORD *)a2 + 4) = result;
  return result;
}

uint64_t sub_1C62B96FC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  int v6;

  v3 = *(_DWORD *)(a1 + 8);
  if (((v3 >> 10) & 7) - 3 > 1)
  {
    *(_QWORD *)(a1 + 24) = a2;
    *(_DWORD *)(a1 + 8) = (-8192 * __clz(a3)) & 0x3E000 | v3 & 0xFFFC03FF | 0xC00;
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 24);
  result = 1;
  if (v4 == a2)
  {
    v6 = 1 << (((v3 >> 13) & 0x1F) - 1);
    if (((v3 >> 13) & 0x1F) == 0)
      v6 = 0;
    if ((v3 & 0x1C00) != 0x1000 && v6 == a3)
      return 0;
  }
  return result;
}

void llvm::MCELFStreamer::emitELFSize(llvm::MCELFStreamer *this, llvm::MCSymbol *a2, const llvm::MCExpr *a3)
{
  *((_QWORD *)a2 + 4) = a3;
}

char *llvm::MCELFStreamer::emitELFSymverDirective(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  __int128 v8;
  char *result;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 272);
  v6 = *(_QWORD **)(a1 + 256);
  if (v6)
    v6 = (_QWORD *)*v6;
  *(_QWORD *)&v10 = v6;
  *((_QWORD *)&v10 + 1) = a2;
  *(_QWORD *)&v11 = a3;
  *((_QWORD *)&v11 + 1) = a4;
  LOBYTE(v12) = a5;
  v7 = *(_QWORD *)(v5 + 2168);
  if (v7 >= *(_QWORD *)(v5 + 2176))
  {
    result = sub_1C593D804((void **)(v5 + 2160), (uint64_t)&v10);
  }
  else
  {
    v8 = v11;
    *(_OWORD *)v7 = v10;
    *(_OWORD *)(v7 + 16) = v8;
    *(_QWORD *)(v7 + 32) = v12;
    result = (char *)(v7 + 40);
  }
  *(_QWORD *)(v5 + 2168) = result;
  return result;
}

uint64_t llvm::MCELFStreamer::emitLocalCommonSymbol(llvm::MCELFStreamer *this, llvm::MCSymbol *a2, uint64_t a3, uint64_t a4)
{
  llvm::MCAssembler::registerSymbol(*((_QWORD *)this + 34), (uint64_t)a2, 0);
  *((_WORD *)a2 + 6) = *((_WORD *)a2 + 6) & 0xEFE7 | 0x1000;
  return (*(uint64_t (**)(llvm::MCELFStreamer *, llvm::MCSymbol *, uint64_t, uint64_t))(*(_QWORD *)this + 456))(this, a2, a3, a4);
}

void llvm::MCELFStreamer::emitValueImpl(uint64_t a1, const llvm::MCExpr **a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * *(unsigned int *)(a1 + 120) - 32) + 36))
    llvm::report_fatal_error((llvm *)"Emitting values inside a locked bundle is forbidden", (const char *)1);
  llvm::MCELFStreamer::fixSymbolsInTLSFixups((llvm::MCELFStreamer *)a1, (uint64_t)a2);
  llvm::MCObjectStreamer::emitValueImpl(a1, a2, a3, a4);
}

uint64_t llvm::MCELFStreamer::emitValueToAlignment(llvm::MCELFStreamer *this, unsigned int a2, uint64_t a3, int a4, unsigned int a5)
{
  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 32 * *((unsigned int *)this + 30) - 32) + 36))
    llvm::report_fatal_error((llvm *)"Emitting values inside a locked bundle is forbidden", (const char *)1);
  return llvm::MCObjectStreamer::emitValueToAlignment(this, a2, a3, a4, a5);
}

char *llvm::MCELFStreamer::emitCGProfileEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  char *result;
  __int128 v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)&v7 = a2;
  *((_QWORD *)&v7 + 1) = a3;
  v8 = a4;
  v5 = *(_QWORD *)(v4 + 2192);
  if (v5 >= *(_QWORD *)(v4 + 2200))
  {
    result = sub_1C4DCFAFC((void **)(v4 + 2184), (uint64_t)&v7);
  }
  else
  {
    *(_OWORD *)v5 = v7;
    *(_QWORD *)(v5 + 16) = v8;
    result = (char *)(v5 + 24);
  }
  *(_QWORD *)(v4 + 2192) = result;
  return result;
}

BOOL llvm::MCELFStreamer::emitIdent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t ELFSection;
  __n128 v8;
  const char *v10;
  __int16 v11;
  unsigned __int8 v12[32];
  __int16 v13;

  v6 = **(_QWORD **)(a1 + 272);
  v10 = ".comment";
  v11 = 259;
  v13 = 257;
  ELFSection = llvm::MCContext::getELFSection(v6, (llvm::Twine *)&v10, 1, 48, 1, v12, 0, -1, 0);
  v8 = sub_1C62B9A74(a1);
  (*(void (**)(uint64_t, unint64_t, _QWORD, __n128))(*(_QWORD *)a1 + 168))(a1, ELFSection, 0, v8);
  if (!*(_BYTE *)(a1 + 5696))
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 512))(a1, 0, 1);
    *(_BYTE *)(a1 + 5696) = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 488))(a1, a2, a3);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 512))(a1, 0, 1);
  return sub_1C593C604(a1);
}

__n128 sub_1C62B9A74(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  unint64_t v7;
  _OWORD *v8;
  __n128 result;
  __int128 v10;
  _OWORD v11[2];

  v2 = (_QWORD *)(a1 + 112);
  v3 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v3)
  {
    v4 = *v2 + 32 * v3;
    v5 = *(_OWORD *)(v4 - 32);
    v6 = *(_OWORD *)(v4 - 16);
  }
  else
  {
    v5 = 0uLL;
    v6 = 0uLL;
  }
  v11[0] = v5;
  v11[1] = v6;
  v7 = sub_1C47C0F60((uint64_t)v2, (unint64_t)v11, 1);
  v8 = (_OWORD *)(*(_QWORD *)(a1 + 112) + 32 * *(unsigned int *)(a1 + 120));
  result = *(__n128 *)v7;
  v10 = *(_OWORD *)(v7 + 16);
  *v8 = *(_OWORD *)v7;
  v8[1] = v10;
  ++*(_DWORD *)(a1 + 120);
  return result;
}

unint64_t llvm::MCELFStreamer::finalizeCGProfileEntry(uint64_t *a1, const llvm::MCExpr ***a2, llvm::MCConstantExpr *this)
{
  const llvm::MCExpr *v6;
  unint64_t v7;
  unint64_t result;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[4];
  __int16 v26;
  uint64_t v27[4];
  __int16 v28;
  uint64_t v29[5];
  _BYTE v30[8];
  _BYTE v31[32];

  v6 = (*a2)[2];
  if ((*((_BYTE *)v6 + 8) & 1) == 0)
    goto LABEL_2;
  sub_1C593D6FC((uint64_t)(*a2)[2], 1);
  if (v9)
  {
    sub_1C593D6FC((uint64_t)v6, 1);
    if (v10 != llvm::MCSymbol::AbsolutePseudoFragment)
    {
      sub_1C593D6FC((uint64_t)v6, 1);
      v12 = *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8);
      *(_DWORD *)(v12 + 8) |= 0x200u;
      *a2 = (const llvm::MCExpr **)llvm::MCSymbolRefExpr::create(v12, 0, a1[1], (uint64_t)(*a2)[1]);
LABEL_2:
      v7 = llvm::MCConstantExpr::create(this, a1[1], 0, 0);
      llvm::MCStreamer::visitUsedExpr((llvm::MCStreamer *)a1, *a2);
      result = llvm::MCObjectStreamer::emitRelocDirective((uint64_t)a1, v7, (uint64_t)"BFD_RELOC_NONE", 14, (unint64_t)*a2, (uint64_t)(*a2)[1], *(const llvm::MCSubtargetInfo **)(a1[1] + 176), (uint64_t)v30);
      if (v31[24])
      {
        v27[0] = (uint64_t)"Relocation for CG Profile could not be created: ";
        v28 = 259;
        v26 = 260;
        v25[0] = (uint64_t)v31;
        sub_1C6131AAC(v27, v25, (uint64_t)v29);
        llvm::report_fatal_error((uint64_t)v29, 1);
      }
      return result;
    }
  }
  v13 = a1[1];
  v14 = (uint64_t)(*a2)[1];
  v25[0] = (uint64_t)"Reference to undefined temporary symbol ";
  v26 = 259;
  v24 = 259;
  sub_1C4825FE4(v25, (uint64_t *)&v23, (uint64_t)v27);
  if ((*(_BYTE *)v6 & 4) != 0)
  {
    v17 = (uint64_t *)*((_QWORD *)v6 - 1);
    v18 = *v17;
    v15 = (uint64_t)(v17 + 2);
    v16 = v18;
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  v22 = 261;
  v21[0] = v15;
  v21[1] = v16;
  sub_1C4825FE4(v27, v21, (uint64_t)v29);
  v20 = 259;
  sub_1C4825FE4(v29, (uint64_t *)&v19, (uint64_t)v30);
  return llvm::MCContext::reportError(v13, v14, (uint64_t)v30);
}

BOOL llvm::MCELFStreamer::finalizeCGProfile(_BOOL8 this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t ELFSection;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  llvm::MCConstantExpr *v8;
  const char *v9;
  __int16 v10;
  unsigned __int8 v11[32];
  __int16 v12;

  v1 = *(uint64_t **)(this + 272);
  if (v1[273] != v1[274])
  {
    v2 = (uint64_t *)this;
    v3 = *v1;
    v9 = ".llvm.call-graph-profile";
    v10 = 259;
    v12 = 257;
    ELFSection = llvm::MCContext::getELFSection(v3, (llvm::Twine *)&v9, 1879002121, 0x80000000, 8, v11, 0, -1, 0);
    v5 = sub_1C62B9A74((uint64_t)v2);
    (*(void (**)(uint64_t *, unint64_t, _QWORD, __n128))(*v2 + 168))(v2, ELFSection, 0, v5);
    v6 = v1[273];
    v7 = v1[274];
    if (v6 != v7)
    {
      v8 = 0;
      do
      {
        llvm::MCELFStreamer::finalizeCGProfileEntry(v2, (const llvm::MCExpr ***)v6, v8);
        llvm::MCELFStreamer::finalizeCGProfileEntry(v2, (const llvm::MCExpr ***)(v6 + 8), v8);
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(*v2 + 512))(v2, *(_QWORD *)(v6 + 16), 8);
        v8 = (llvm::MCConstantExpr *)((char *)v8 + 8);
        v6 += 24;
      }
      while (v6 != v7);
    }
    return sub_1C593C604((uint64_t)v2);
  }
  return this;
}

void llvm::MCELFStreamer::emitInstToFragment(llvm::MCELFStreamer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  llvm::MCObjectStreamer::emitInstToFragment((uint64_t)a1, a2, a3);
  v4 = **((_QWORD **)a1 + 35);
  v5 = *(unsigned int *)(v4 + 104);
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)(v4 + 96);
    v7 = 24 * v5;
    do
    {
      v8 = *v6;
      v6 += 3;
      llvm::MCELFStreamer::fixSymbolsInTLSFixups(a1, v8);
      v7 -= 24;
    }
    while (v7);
  }
}

uint64_t llvm::MCELFStreamer::emitBundleAlignMode(uint64_t this, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  BOOL v5;

  if (!a2
    || ((v2 = *(_QWORD *)(this + 272), v3 = *(_DWORD *)(v2 + 496), v4 = 1 << a2, v3) ? (v5 = v3 == v4) : (v5 = 1), !v5))
  {
    llvm::report_fatal_error((llvm *)".bundle_align_mode cannot be changed once set", (const char *)1);
  }
  *(_DWORD *)(v2 + 496) = v4;
  return this;
}

uint64_t llvm::MCELFStreamer::emitBundleLock(llvm::MCELFStreamer *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *((unsigned int *)this + 30);
  if ((_DWORD)v4)
    v5 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v4 - 32);
  else
    v5 = 0;
  v6 = *((_QWORD *)this + 34);
  if (!*(_DWORD *)(v6 + 496))
    llvm::report_fatal_error((llvm *)".bundle_lock forbidden when bundling is disabled", (const char *)1);
  if (!*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 32 * v4 - 32) + 36))
  {
    *(_BYTE *)(v5 + 44) |= 1u;
    v6 = *((_QWORD *)this + 34);
  }
  if ((*(_BYTE *)(v6 + 500) & 1) != 0
    && !*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 32 * *((unsigned int *)this + 30) - 32) + 36))
  {
    v9 = operator new();
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_QWORD *)(v9 + 32) = -1;
    *(_QWORD *)(v9 + 40) = 0;
    *(_BYTE *)(v9 + 48) = 1;
    *(_DWORD *)(v9 + 49) = 0;
    *(_QWORD *)(v9 + 56) = 0;
    *(_QWORD *)(v9 + 64) = v9 + 88;
    *(_OWORD *)(v9 + 72) = xmmword_1C677F680;
    *(_QWORD *)(v9 + 120) = v9 + 136;
    *(_QWORD *)(v9 + 128) = 0x400000000;
    v10 = *((unsigned int *)this + 1428);
    if (v10 >= *((_DWORD *)this + 1429))
    {
      v11 = v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 5704, (uint64_t)this + 5720, v10 + 1, 8);
      v9 = v11;
      LODWORD(v10) = *((_DWORD *)this + 1428);
    }
    *(_QWORD *)(*((_QWORD *)this + 713) + 8 * v10) = v9;
    ++*((_DWORD *)this + 1428);
  }
  if (a2)
    v7 = 2;
  else
    v7 = 1;
  return llvm::MCSection::setBundleLockState(v5, v7);
}

uint64_t llvm::MCELFStreamer::emitBundleUnlock(llvm::MCELFStreamer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  llvm::MCFragment *DataFragment;
  void *v8;
  void *v9;
  char *v10;

  v2 = *((unsigned int *)this + 30);
  if ((_DWORD)v2)
    v3 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v2 - 32);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 34);
  if (!*(_DWORD *)(v4 + 496))
  {
    v10 = ".bundle_unlock forbidden when bundling is disabled";
    goto LABEL_21;
  }
  if (!*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 32 * v2 - 32) + 36))
  {
    v10 = ".bundle_unlock without matching lock";
    goto LABEL_21;
  }
  if ((*(_BYTE *)(v3 + 44) & 1) != 0)
  {
    v10 = "Empty bundle-locked group is forbidden";
LABEL_21:
    llvm::report_fatal_error((llvm *)v10, (const char *)1);
  }
  if ((*(_BYTE *)(v4 + 500) & 1) == 0)
    return llvm::MCSection::setBundleLockState(v3, 0);
  v6 = *(_QWORD *)(*((_QWORD *)this + 713) + 8 * *((unsigned int *)this + 1428) - 8);
  result = llvm::MCSection::setBundleLockState(v3, 0);
  if (!*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 32 * *((unsigned int *)this + 30) - 32) + 36))
  {
    DataFragment = (llvm::MCFragment *)llvm::MCObjectStreamer::getOrCreateDataFragment(this, *(const llvm::MCSubtargetInfo **)(v6 + 56));
    llvm::MCELFStreamer::mergeFragment(this, DataFragment, v6);
    --*((_DWORD *)this + 1428);
    v8 = *(void **)(v6 + 120);
    if (v8 != (void *)(v6 + 136))
      free(v8);
    v9 = *(void **)(v6 + 64);
    if (v9 != (void *)(v6 + 88))
      free(v9);
    result = MEMORY[0x1CAA32FC0](v6, 0x10E0C400AE5E4C8);
  }
  if (*(_DWORD *)(v3 + 36) != 2)
  {
    result = llvm::MCObjectStreamer::getOrCreateDataFragment(this, 0);
    *(_BYTE *)(result + 51) = 0;
  }
  return result;
}

void llvm::MCELFStreamer::finishImpl(llvm::MCELFStreamer *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  const char *v5;
  __int16 v6;
  unint64_t v7;

  if (*((_DWORD *)this + 782))
  {
    v7 = 0;
    v5 = ".gnu.attributes";
    v6 = 259;
    llvm::MCELFStreamer::createAttributesSection(this, (uint64_t)"gnu", 3, (llvm::Twine *)&v5, 1879048181, &v7, (uint64_t)this + 3120);
  }
  v2 = *((unsigned int *)this + 30);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v2 - 32);
    if (v3)
    {
      v4 = *(unsigned int *)(*((_QWORD *)this + 34) + 496);
      if ((_DWORD)v4)
      {
        if ((*(_BYTE *)(v3 + 44) & 2) != 0 && v4 > (1 << *(_BYTE *)(v3 + 24)))
          *(_BYTE *)(v3 + 24) = __clz(v4) ^ 0x3F;
      }
    }
  }
  llvm::MCELFStreamer::finalizeCGProfile((_BOOL8)this);
  llvm::MCObjectStreamer::emitFrames(this, 0);
  llvm::MCObjectStreamer::finishImpl((llvm::MCContext **)this);
}

uint64_t llvm::createELFStreamer(llvm::MCContext *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v10 = operator new();
  v11 = *a2;
  *a2 = 0;
  v12 = *a3;
  *a3 = 0;
  v16 = v12;
  v17 = v11;
  v13 = *a4;
  *a4 = 0;
  v15 = v13;
  llvm::MCELFStreamer::MCELFStreamer(v10, a1, &v17, &v16, &v15);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (a5)
    *(_BYTE *)(*(_QWORD *)(v10 + 272) + 500) |= 1u;
  return v10;
}

void sub_1C62BA340(uint64_t a1)
{
  sub_1C62BA374(a1);
  JUMPOUT(0x1CAA32FC0);
}

double sub_1C62BA364(llvm::MCObjectStreamer *this)
{
  *((_BYTE *)this + 5696) = 0;
  *((_DWORD *)this + 1428) = 0;
  return llvm::MCObjectStreamer::reset(this);
}

void sub_1C62BA374(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E8180428;
  v2 = *(void **)(a1 + 5704);
  if (v2 != (void *)(a1 + 5720))
    free(v2);
  sub_1C4FAD100((char **)(a1 + 3120));
  sub_1C4FAD100((char **)(a1 + 544));
  llvm::MCObjectStreamer::~MCObjectStreamer((llvm::MCObjectStreamer *)a1);
}

void sub_1C62BA3C8(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 40, &v5);
  sub_1C593D770((uint64_t **)a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

char *llvm::MCSymbolRefExpr::getVariantKindName(__int16 a1)
{
  return off_1E81809A8[a1];
}

llvm *llvm::MCExpr::dump(llvm::MCExpr *this)
{
  llvm *v2;
  llvm *result;
  _BYTE *v4;

  llvm::dbgs(this);
  llvm::MCExpr::print((uint64_t)this);
  result = llvm::dbgs(v2);
  v4 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v4 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v4 + 1;
  *v4 = 10;
  return result;
}

unint64_t llvm::MCUnaryExpr::create(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;

  result = sub_1C484358C(a3 + 192, 24, 3);
  *(_BYTE *)result = 3;
  *(_DWORD *)(result + 1) = a1 & 0xFFFFFF | (*(unsigned __int8 *)(result + 4) << 24);
  *(_QWORD *)(result + 8) = a4;
  *(_QWORD *)(result + 16) = a2;
  return result;
}

void llvm::MCExpr::evaluateAsAbsolute(uint64_t this, _QWORD *a2)
{
  llvm::MCExpr::evaluateAsAbsolute(this, a2);
}

void llvm::MCExpr::evaluateAsValue(uint64_t a1)
{
  llvm::MCExpr::evaluateAsRelocatableImpl(a1);
}

uint64_t llvm::MCAsmLayout::getSymbolOffset(llvm::MCAsmLayout *this, const llvm::MCSymbol *a2, unint64_t *a3)
{
  return sub_1C59415F0(this, (uint64_t *)a2, 0, a3);
}

const llvm::MCSymbol *llvm::MCAsmLayout::getBaseSymbol(uint64_t **this, const llvm::MCSymbol *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if ((*((_DWORD *)a2 + 2) & 0x1C00) == 0x800)
  {
    *((_DWORD *)a2 + 2) |= 4u;
    v3 = *((_QWORD *)a2 + 3);
    v10 = 0;
    v11 = 0;
    v13 = 0;
    v12 = 0;
    llvm::MCExpr::evaluateAsRelocatableImpl(v3);
    if ((v4 & 1) == 0)
    {
      v5 = **this;
      v6 = *(_QWORD *)(v3 + 8);
      v8 = "expression could not be evaluated";
      v9 = 259;
      llvm::MCContext::reportError(v5, v6, (uint64_t)&v8);
    }
    return 0;
  }
  return a2;
}

unint64_t llvm::computeBundlePadding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;

  v4 = *(unsigned int *)(a1 + 496);
  v5 = (v4 - 1) & a3;
  v6 = v5 + a4;
  if (*(_BYTE *)(a2 + 51))
  {
    result = v4 - v6;
    if (v4 != v6 && v4 <= v6)
      return 2 * v4 - v6;
  }
  else if (v4 >= v6 || v5 == 0)
  {
    return 0;
  }
  else
  {
    return v4 - v5;
  }
  return result;
}

_QWORD *sub_1C62BA808(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = (_QWORD *)a1[35];
  if (v2 != a1 + 38)
    free(v2);
  v3 = (_QWORD *)a1[29];
  if (v3 != a1 + 31)
    free(v3);
  v4 = (_QWORD *)a1[15];
  if (v4 != a1 + 17)
    free(v4);
  v5 = (_QWORD *)a1[8];
  if (v5 != a1 + 11)
    free(v5);
  return a1;
}

llvm::raw_ostream *llvm::MCOperand::print(llvm::MCOperand *this, llvm::raw_ostream *a2, const llvm::MCRegisterInfo *a3)
{
  char *v6;
  llvm::raw_ostream *v7;
  unint64_t v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  double v12;
  llvm::raw_ostream *v13;

  sub_1C4816AD8(a2, "<MCOperand ");
  switch(*(_BYTE *)this)
  {
    case 0:
      v6 = "INVALID";
      goto LABEL_4;
    case 1:
      sub_1C4816AD8(a2, "Reg:");
      v9 = *((unsigned int *)this + 2);
      if (a3)
      {
        v6 = (char *)(*((_QWORD *)a3 + 8) + *(unsigned int *)(*(_QWORD *)a3 + 24 * v9));
LABEL_4:
        v7 = a2;
LABEL_5:
        sub_1C4816AD8(v7, v6);
      }
      else
      {
        llvm::raw_ostream::operator<<(a2, v9);
      }
      return sub_1C4816AD8(a2, ">");
    case 2:
      v10 = sub_1C4816AD8(a2, "Imm:");
      llvm::raw_ostream::operator<<(v10, *((_QWORD *)this + 1));
      return sub_1C4816AD8(a2, ">");
    case 3:
      v11 = sub_1C4816AD8(a2, "SFPImm:");
      v12 = *((float *)this + 2);
      goto LABEL_12;
    case 4:
      v11 = sub_1C4816AD8(a2, "DFPImm:");
      v12 = *((double *)this + 1);
LABEL_12:
      llvm::raw_ostream::operator<<(v11, v12);
      return sub_1C4816AD8(a2, ">");
    case 5:
      v13 = sub_1C4816AD8(a2, "Expr:(");
      llvm::MCExpr::print(*((_QWORD *)this + 1));
      v6 = ")";
      v7 = v13;
      goto LABEL_5;
    case 6:
      sub_1C4816AD8(a2, "Inst:(");
      llvm::MCInst::print(*((llvm::MCInst **)this + 1), a2, a3);
      v6 = ")";
      goto LABEL_4;
    default:
      v6 = "UNDEFINED";
      goto LABEL_4;
  }
}

llvm::raw_ostream *llvm::MCInst::print(llvm::MCInst *this, llvm::raw_ostream *a2, const llvm::MCRegisterInfo *a3)
{
  llvm::raw_ostream *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1C4816AD8(a2, "<MCInst ");
  llvm::raw_ostream::operator<<(v6, *(unsigned int *)this);
  v7 = *((unsigned int *)this + 6);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = 16 * v7;
    do
    {
      sub_1C4816AD8(a2, " ");
      llvm::MCOperand::print((llvm::MCOperand *)(*((_QWORD *)this + 2) + v8), a2, a3);
      v8 += 16;
    }
    while (v9 != v8);
  }
  return sub_1C4816AD8(a2, ">");
}

llvm::raw_ostream *llvm::MCOperand::dump(llvm::MCOperand *this)
{
  llvm *v2;
  llvm *v3;
  llvm *v4;

  v2 = llvm::dbgs(this);
  v3 = llvm::MCOperand::print(this, v2, 0);
  v4 = llvm::dbgs(v3);
  return sub_1C4816AD8(v4, "\n");
}

llvm::raw_ostream *llvm::MCInst::dump_pretty(unsigned int *a1, llvm::raw_ostream *a2, llvm::MCInstPrinter *a3, const void *a4, size_t a5, const llvm::MCRegisterInfo *a6)
{
  size_t v11;
  const void *OpcodeName;
  size_t v13;

  if (a3)
  {
    OpcodeName = (const void *)llvm::MCInstPrinter::getOpcodeName(a3, *a1);
    v11 = v13;
  }
  else
  {
    v11 = 0;
    OpcodeName = &unk_1C873B97D;
  }
  return llvm::MCInst::dump_pretty(a1, a2, OpcodeName, v11, a4, a5, a6);
}

llvm::raw_ostream *llvm::MCInst::dump_pretty(unsigned int *a1, llvm::raw_ostream *a2, const void *a3, size_t a4, const void *a5, size_t a6, const llvm::MCRegisterInfo *a7)
{
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  v14 = sub_1C4816AD8(a2, "<MCInst #");
  llvm::raw_ostream::operator<<(v14, *a1);
  if (a4)
  {
    v15 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v15 >= *((_QWORD *)a2 + 3))
    {
      v16 = llvm::raw_ostream::write(a2, 32);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v15 + 1;
      *v15 = 32;
      v16 = a2;
    }
    v17 = (void *)*((_QWORD *)v16 + 4);
    if (a4 <= *((_QWORD *)v16 + 3) - (_QWORD)v17)
    {
      memcpy(v17, a3, a4);
      *((_QWORD *)v16 + 4) += a4;
    }
    else
    {
      llvm::raw_ostream::write(v16, (const char *)a3, a4);
    }
  }
  v18 = a1[6];
  if ((_DWORD)v18)
  {
    v19 = 0;
    v20 = 16 * v18;
    do
    {
      v21 = (void *)*((_QWORD *)a2 + 4);
      if (a6 <= *((_QWORD *)a2 + 3) - (_QWORD)v21)
      {
        if (a6)
        {
          memcpy(v21, a5, a6);
          *((_QWORD *)a2 + 4) += a6;
        }
      }
      else
      {
        llvm::raw_ostream::write(a2, (const char *)a5, a6);
      }
      llvm::MCOperand::print((llvm::MCOperand *)(*((_QWORD *)a1 + 2) + v19), a2, a7);
      v19 += 16;
    }
    while (v20 != v19);
  }
  return sub_1C4816AD8(a2, ">");
}

llvm::raw_ostream *llvm::MCInst::dump(llvm::MCInst *this)
{
  llvm *v2;
  llvm *v3;
  llvm *v4;

  v2 = llvm::dbgs(this);
  v3 = llvm::MCInst::print(this, v2, 0);
  v4 = llvm::dbgs(v3);
  return sub_1C4816AD8(v4, "\n");
}

uint64_t llvm::MCInstPrinter::getOpcodeName(llvm::MCInstPrinter *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 16);
  v3 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 4 * a2);
  v4 = v2 + v3;
  if (v2)
    strlen((const char *)(v2 + v3));
  return v4;
}

llvm::raw_ostream *llvm::MCInstPrinter::printAnnotation(llvm::raw_ostream *result, llvm::raw_ostream *a2, char *a3, size_t a4)
{
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  void *v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  void *v13;
  llvm::raw_ostream *v14;
  void *v15;
  _BYTE *v16;

  if (a4)
  {
    v6 = result;
    v7 = (llvm::raw_ostream *)*((_QWORD *)result + 1);
    if (v7)
    {
      v8 = (void *)*((_QWORD *)v7 + 4);
      if (a4 <= *((_QWORD *)v7 + 3) - (_QWORD)v8)
      {
        result = (llvm::raw_ostream *)memcpy(v8, a3, a4);
        *((_QWORD *)v7 + 4) += a4;
      }
      else
      {
        result = llvm::raw_ostream::write(v7, a3, a4);
      }
      if (a3[a4 - 1] != 10)
      {
        result = (llvm::raw_ostream *)*((_QWORD *)v6 + 1);
        v16 = (_BYTE *)*((_QWORD *)result + 4);
        if ((unint64_t)v16 >= *((_QWORD *)result + 3))
        {
          return llvm::raw_ostream::write(result, 10);
        }
        else
        {
          *((_QWORD *)result + 4) = v16 + 1;
          *v16 = 10;
        }
      }
    }
    else
    {
      v9 = sub_1C4816AD8(a2, " ");
      v10 = *((_QWORD *)v6 + 2);
      v11 = *(const void **)(v10 + 48);
      v12 = *(_QWORD *)(v10 + 56);
      v13 = (void *)*((_QWORD *)v9 + 4);
      if (v12 <= *((_QWORD *)v9 + 3) - (_QWORD)v13)
      {
        if (v12)
        {
          memcpy(v13, v11, v12);
          *((_QWORD *)v9 + 4) += v12;
        }
      }
      else
      {
        llvm::raw_ostream::write(v9, (const char *)v11, v12);
      }
      v14 = sub_1C4816AD8(v9, " ");
      v15 = (void *)*((_QWORD *)v14 + 4);
      if (a4 <= *((_QWORD *)v14 + 3) - (_QWORD)v15)
      {
        result = (llvm::raw_ostream *)memcpy(v15, a3, a4);
        *((_QWORD *)v14 + 4) += a4;
      }
      else
      {
        return llvm::raw_ostream::write(v14, a3, a4);
      }
    }
  }
  return result;
}

void llvm::MCInstPrinter::formatDec(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  *a2 = &unk_1E8169D20;
  a2[1] = "%lld";
  a2[2] = a1;
}

uint64_t llvm::MCInstPrinter::formatHex@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  const char *v5;
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  unint64_t v9;

  if (*(_DWORD *)(this + 52))
  {
    if (a2 < 0)
    {
      if (a2 == 0x8000000000000000)
      {
        v5 = "-8000000000000000h";
        a2 = 0x8000000000000000;
      }
      else
      {
        a2 = -a2;
        v8 = a2;
        while (v8)
        {
          v9 = v8;
          v8 *= 16;
          if (v9 >> 60)
          {
            if (v9 >> 61 > 4)
            {
              v5 = "-0%llxh";
              goto LABEL_12;
            }
            break;
          }
        }
        v5 = "-%llxh";
      }
    }
    else
    {
      v3 = a2;
      while (v3)
      {
        v4 = v3;
        v3 *= 16;
        if (v4 >> 60)
        {
          if (v4 >> 61 > 4)
          {
            v5 = "0%llxh";
            goto LABEL_12;
          }
          break;
        }
      }
      v5 = "%llxh";
    }
  }
  else
  {
    v5 = "0x%llx";
    v6 = 0x8000000000000000;
    v7 = "-0x8000000000000000";
    if (a2 != 0x8000000000000000)
    {
      v7 = "-0x%llx";
      v6 = -a2;
    }
    if (a2 < 0)
    {
      v5 = v7;
      a2 = v6;
    }
  }
LABEL_12:
  *a3 = &unk_1E8169D20;
  a3[1] = v5;
  a3[2] = a2;
  return this;
}

uint64_t llvm::MCInstPrinter::formatHex@<X0>(uint64_t this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  const char *v5;

  if (*(_DWORD *)(this + 52))
  {
    v3 = a2;
    while (v3)
    {
      v4 = v3;
      v3 *= 16;
      if (v4 >> 60)
      {
        if (v4 >> 61 > 4)
        {
          v5 = "0%llxh";
          goto LABEL_8;
        }
        break;
      }
    }
    v5 = "%llxh";
  }
  else
  {
    v5 = "0x%llx";
  }
LABEL_8:
  *a3 = &unk_1E8133270;
  a3[1] = v5;
  a3[2] = a2;
  return this;
}

uint64_t sub_1C62BB008()
{
  return 0;
}

uint64_t llvm::MCInstrAnalysis::clearsSuperRegisters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = *(unsigned int *)(a4 + 8);
  if (v4 > 0x40)
    bzero(*(void **)a4, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8);
  else
    *(_QWORD *)a4 = 0;
  return 0;
}

uint64_t llvm::MCInstrAnalysis::evaluateMemoryOperandAddress()
{
  return 0;
}

uint64_t llvm::MCInstrAnalysis::getMemoryOperandRelocationOffset()
{
  return 0;
}

uint64_t llvm::MCLOHDirective::emit_impl(llvm::MCLOHDirective *this, llvm::raw_ostream *a2, const llvm::MachObjectWriter *a3, const llvm::MCAsmLayout *a4)
{
  uint64_t result;
  uint64_t v9;
  const llvm::MCSymbol **v10;
  uint64_t v11;
  const llvm::MCSymbol *v12;
  unint64_t SymbolAddress;

  sub_1C592B9A0(*(unsigned int *)this, a2, 0);
  result = sub_1C592B9A0(*((unsigned int *)this + 4), a2, 0);
  v9 = *((unsigned int *)this + 4);
  if ((_DWORD)v9)
  {
    v10 = (const llvm::MCSymbol **)*((_QWORD *)this + 1);
    v11 = 8 * v9;
    do
    {
      v12 = *v10++;
      SymbolAddress = llvm::MachObjectWriter::getSymbolAddress(a3, v12, a4);
      result = sub_1C592B9A0(SymbolAddress, a2, 0);
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::MCLOHDirective::emit(llvm::MCLOHDirective *this, llvm::raw_ostream **a2, const llvm::MCAsmLayout *a3)
{
  return llvm::MCLOHDirective::emit_impl(this, a2[26], (const llvm::MachObjectWriter *)a2, a3);
}

uint64_t llvm::MCLOHDirective::getEmitSize(llvm::MCLOHDirective *this, const llvm::MachObjectWriter *a2, const llvm::MCAsmLayout *a3)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  void (**v8)(llvm::raw_ostream *__hidden);
  int v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v9 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v8 = (void (**)(llvm::raw_ostream *__hidden))&off_1E8180F90;
  v16 = 0;
  llvm::MCLOHDirective::emit_impl(this, (llvm::raw_ostream *)&v8, a2, a3);
  v3 = ((uint64_t (*)(uint64_t))v8[10])((uint64_t)&v8);
  v4 = v12;
  v5 = v10;
  v8 = (void (**)(llvm::raw_ostream *__hidden))&off_1E8180F90;
  v6 = v12 - v10;
  if (v12 != v10)
  {
    v12 = v10;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v8, v10, v6);
  }
  v8 = off_1E81A6E70;
  if (v15 == 1 && v10)
    MEMORY[0x1CAA32F9C](v10, 0x1000C8077774924, v6);
  return &v4[v3] - v5;
}

uint64_t llvm::createMachOStreamer(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int a5, char a6, char a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  const llvm::Triple *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v14 = operator new();
  v15 = *a2;
  *a2 = 0;
  v16 = *a3;
  *a3 = 0;
  v17 = *a4;
  *a4 = 0;
  v25 = v16;
  v26 = v15;
  v24 = v17;
  llvm::MCObjectStreamer::MCObjectStreamer(v14, (llvm::MCContext *)a1, &v26, &v25, &v24);
  v18 = v24;
  v24 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = v25;
  v25 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = v26;
  v26 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  *(_QWORD *)v14 = off_1E8181008;
  *(_BYTE *)(v14 + 544) = a7;
  *(_BYTE *)(v14 + 545) = a6;
  *(_BYTE *)(v14 + 546) = 0;
  *(_DWORD *)(v14 + 568) = 0;
  *(_OWORD *)(v14 + 552) = 0u;
  v21 = (_BYTE *)a1[21];
  if (v21[912])
    v22 = (const llvm::Triple *)(v21 + 864);
  else
    v22 = 0;
  llvm::MCStreamer::emitVersionForTarget(v14, (const llvm::Triple *)(a1 + 3), (const llvm::VersionTuple *)(v21 + 848), v22, (const llvm::VersionTuple *)(v21 + 920));
  if (a5)
    *(_BYTE *)(*(_QWORD *)(v14 + 272) + 500) |= 1u;
  return v14;
}

void sub_1C62BB340(uint64_t a1, int a2, _BYTE *__src, int a4)
{
  uint64_t v4;
  int v5;
  void *v6[2];
  _QWORD v7[4];

  v7[3] = *MEMORY[0x1E0C80C00];
  v4 = a1 + 8;
  v5 = a2;
  v6[0] = v7;
  v6[1] = (void *)0x300000000;
  sub_1C618A450((unsigned int *)v6, __src, &__src[8 * a4]);
  sub_1C62BB3DC(v4, (unint64_t)&v5);
  if (v6[0] != v7)
    free(v6[0]);
}

_DWORD *sub_1C62BB3DC(uint64_t a1, unint64_t a2)
{
  _DWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = (_DWORD *)sub_1C5945798(a1, a2);
  v4 = *(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 8);
  *(_DWORD *)v4 = *result;
  *(_QWORD *)(v4 + 16) = 0x300000000;
  *(_QWORD *)(v4 + 8) = v4 + 24;
  v5 = v4 + 8;
  if (result[4])
    result = (_DWORD *)sub_1C614D378(v5, (uint64_t)(result + 2));
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_1C62BB44C(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 48, &v5);
  sub_1C62BB4B8((uint64_t *)a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C62BB4B8(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v5 = 0;
    v6 = *a1;
    v7 = *a1 + 48 * v2;
    do
    {
      v8 = a2 + v5;
      v9 = v6 + v5;
      *(_DWORD *)v8 = *(_DWORD *)(v6 + v5);
      *(_QWORD *)(v8 + 16) = 0x300000000;
      *(_QWORD *)(v8 + 8) = a2 + v5 + 24;
      if (*(_DWORD *)(v6 + v5 + 16))
        sub_1C614D378(a2 + v5 + 8, v9 + 8);
      v5 += 48;
    }
    while (v9 + 48 != v7);
    v10 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v10)
    {
      v11 = *a1;
      v12 = 48 * v10;
      do
      {
        v13 = *(void **)(v11 + v12 - 40);
        if ((void *)(v11 + v12 - 24) != v13)
          free(v13);
        v12 -= 48;
      }
      while (v12);
    }
  }
}

uint64_t llvm::MCMachObjectTargetWriter::MCMachObjectTargetWriter(uint64_t this, char a2, int a3, int a4)
{
  *(_QWORD *)this = off_1E8181538;
  *(_BYTE *)(this + 8) = *(_BYTE *)(this + 8) & 0xFE | a2;
  *(_DWORD *)(this + 12) = a3;
  *(_DWORD *)(this + 16) = a4;
  return this;
}

llvm::MCStreamer *llvm::createNullStreamer(llvm *this, llvm::MCContext *a2)
{
  llvm::MCStreamer *v3;
  llvm::MCStreamer *result;

  v3 = (llvm::MCStreamer *)operator new();
  result = llvm::MCStreamer::MCStreamer(v3, this);
  *(_QWORD *)result = off_1E81815B0;
  return result;
}

unint64_t llvm::MCObjectFileInfo::initCOFFMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2)
{
  int v4;
  int v5;
  unint64_t COFFSection;
  unint64_t v7;
  int v8;
  unint64_t result;

  *((_QWORD *)this + 57) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".eh_frame", 9uLL, 1073741888, 19, 0);
  v4 = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 8) = 1;
  *((_QWORD *)this + 5) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".bss", 4uLL, -1073741696, 15, 0);
  if (v4 == 39)
    v5 = 1610743840;
  else
    v5 = 1610612768;
  *((_QWORD *)this + 3) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".text", 5uLL, v5, 2, 0);
  *((_QWORD *)this + 4) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".data", 5uLL, -1073741760, 19, 0);
  COFFSection = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".rdata", 6uLL, 1073741888, 4, 0);
  v7 = 0;
  *((_QWORD *)this + 6) = COFFSection;
  v8 = *((_DWORD *)a2 + 6);
  if (v8 != 3 && v8 != 42)
    v7 = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".gcc_except_table", 0x11uLL, 1073741888, 4, 0);
  *((_QWORD *)this + 7) = v7;
  *((_QWORD *)this + 48) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug$S", 8uLL, 1107296320, 0, 0);
  *((_QWORD *)this + 49) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug$T", 8uLL, 1107296320, 0, 0);
  *((_QWORD *)this + 50) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug$H", 8uLL, 1107296320, 0, 0);
  *((_QWORD *)this + 9) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_abbrev", 0xDuLL, 1107296320, 0, "section_abbrev");
  *((_QWORD *)this + 10) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_info", 0xBuLL, 1107296320, 0, "section_info");
  *((_QWORD *)this + 11) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_line", 0xBuLL, 1107296320, 0, "section_line");
  *((_QWORD *)this + 12) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_line_str", 0xFuLL, 1107296320, 0, "section_line_str");
  *((_QWORD *)this + 13) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_frame", 0xCuLL, 1107296320, 0, 0);
  *((_QWORD *)this + 22) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_pubnames", 0xFuLL, 1107296320, 0, 0);
  *((_QWORD *)this + 14) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_pubtypes", 0xFuLL, 1107296320, 0, 0);
  *((_QWORD *)this + 45) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_gnu_pubnames", 0x13uLL, 1107296320, 0, 0);
  *((_QWORD *)this + 46) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_gnu_pubtypes", 0x13uLL, 1107296320, 0, 0);
  *((_QWORD *)this + 16) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_str", 0xAuLL, 1107296320, 0, "info_string");
  *((_QWORD *)this + 37) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_str_offsets", 0x12uLL, 1107296320, 0, "section_str_off");
  *((_QWORD *)this + 17) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_loc", 0xAuLL, 1107296320, 0, "section_debug_loc");
  *((_QWORD *)this + 40) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_loclists", 0xFuLL, 1107296320, 0, "section_debug_loclists");
  *((_QWORD *)this + 18) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_aranges", 0xEuLL, 1107296320, 0, 0);
  *((_QWORD *)this + 19) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_ranges", 0xDuLL, 1107296320, 0, "debug_range");
  *((_QWORD *)this + 39) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_rnglists", 0xFuLL, 1107296320, 0, "debug_rnglists");
  *((_QWORD *)this + 20) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_macinfo", 0xEuLL, 1107296320, 0, "debug_macinfo");
  *((_QWORD *)this + 21) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_macro", 0xCuLL, 1107296320, 0, "debug_macro");
  *((_QWORD *)this + 35) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_macinfo.dwo", 0x12uLL, 1107296320, 0, "debug_macinfo.dwo");
  *((_QWORD *)this + 36) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_macro.dwo", 0x10uLL, 1107296320, 0, "debug_macro.dwo");
  *((_QWORD *)this + 28) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_info.dwo", 0xFuLL, 1107296320, 0, "section_info_dwo");
  *((_QWORD *)this + 29) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_types.dwo", 0x10uLL, 1107296320, 0, "section_types_dwo");
  *((_QWORD *)this + 30) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_abbrev.dwo", 0x11uLL, 1107296320, 0, "section_abbrev_dwo");
  *((_QWORD *)this + 31) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_str.dwo", 0xEuLL, 1107296320, 0, "skel_string");
  *((_QWORD *)this + 32) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_line.dwo", 0xFuLL, 1107296320, 0, 0);
  *((_QWORD *)this + 33) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_loc.dwo", 0xEuLL, 1107296320, 0, "skel_loc");
  *((_QWORD *)this + 34) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_str_offsets.dwo", 0x16uLL, 1107296320, 0, "section_str_off_dwo");
  *((_QWORD *)this + 38) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_addr", 0xBuLL, 1107296320, 0, "addr_sec");
  *((_QWORD *)this + 43) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_cu_index", 0xFuLL, 1107296320, 0, 0);
  *((_QWORD *)this + 44) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_tu_index", 0xFuLL, 1107296320, 0, 0);
  *((_QWORD *)this + 23) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".debug_names", 0xCuLL, 1107296320, 0, "debug_names_begin");
  *((_QWORD *)this + 24) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".apple_names", 0xCuLL, 1107296320, 0, "names_begin");
  *((_QWORD *)this + 26) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".apple_namespaces", 0x11uLL, 1107296320, 0, "namespac_begin");
  *((_QWORD *)this + 27) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".apple_types", 0xCuLL, 1107296320, 0, "types_begin");
  *((_QWORD *)this + 25) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".apple_objc", 0xBuLL, 1107296320, 0, "objc_begin");
  *((_QWORD *)this + 83) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".drectve", 8uLL, 2560, 0, 0);
  *((_QWORD *)this + 84) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".pdata", 6uLL, 1073741888, 19, 0);
  *((_QWORD *)this + 85) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".xdata", 6uLL, 1073741888, 19, 0);
  *((_QWORD *)this + 86) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".sxdata", 7uLL, 512, 0, 0);
  *((_QWORD *)this + 87) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".gehcont$y", 0xAuLL, 1073741888, 0, 0);
  *((_QWORD *)this + 88) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".gfids$y", 8uLL, 1073741888, 0, 0);
  *((_QWORD *)this + 89) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".giats$y", 8uLL, 1073741888, 0, 0);
  *((_QWORD *)this + 90) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".gljmp$y", 8uLL, 1073741888, 0, 0);
  *((_QWORD *)this + 52) = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".tls$", 5uLL, -1073741760, 19, 0);
  result = llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".llvm_stackmaps", 0xFuLL, 1073741888, 4, 0);
  *((_QWORD *)this + 54) = result;
  return result;
}

unint64_t llvm::MCObjectFileInfo::initWasmMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t result;
  _QWORD v42[4];
  __int16 v43;
  unsigned __int8 v44[32];
  __int16 v45;

  v3 = *((_QWORD *)this + 105);
  v42[0] = ".text";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 3) = llvm::MCContext::getWasmSection(v3, (llvm::Twine *)v42, 2, 0, v44, -1);
  v4 = *((_QWORD *)this + 105);
  v42[0] = ".data";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 4) = llvm::MCContext::getWasmSection(v4, (llvm::Twine *)v42, 19, 0, v44, -1);
  v5 = *((_QWORD *)this + 105);
  v42[0] = ".debug_line";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 11) = llvm::MCContext::getWasmSection(v5, (llvm::Twine *)v42, 0, 0, v44, -1);
  v6 = *((_QWORD *)this + 105);
  v42[0] = ".debug_line_str";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 12) = llvm::MCContext::getWasmSection(v6, (llvm::Twine *)v42, 0, 1, v44, -1);
  v7 = *((_QWORD *)this + 105);
  v42[0] = ".debug_str";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 16) = llvm::MCContext::getWasmSection(v7, (llvm::Twine *)v42, 0, 1, v44, -1);
  v8 = *((_QWORD *)this + 105);
  v42[0] = ".debug_loc";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 17) = llvm::MCContext::getWasmSection(v8, (llvm::Twine *)v42, 0, 0, v44, -1);
  v9 = *((_QWORD *)this + 105);
  v42[0] = ".debug_abbrev";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 9) = llvm::MCContext::getWasmSection(v9, (llvm::Twine *)v42, 0, 0, v44, -1);
  v10 = *((_QWORD *)this + 105);
  v42[0] = ".debug_aranges";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 18) = llvm::MCContext::getWasmSection(v10, (llvm::Twine *)v42, 0, 0, v44, -1);
  v11 = *((_QWORD *)this + 105);
  v42[0] = ".debug_ranges";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 19) = llvm::MCContext::getWasmSection(v11, (llvm::Twine *)v42, 0, 0, v44, -1);
  v12 = *((_QWORD *)this + 105);
  v42[0] = ".debug_macinfo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 20) = llvm::MCContext::getWasmSection(v12, (llvm::Twine *)v42, 0, 0, v44, -1);
  v13 = *((_QWORD *)this + 105);
  v42[0] = ".debug_macro";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 21) = llvm::MCContext::getWasmSection(v13, (llvm::Twine *)v42, 0, 0, v44, -1);
  v14 = *((_QWORD *)this + 105);
  v42[0] = ".debug_cu_index";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 43) = llvm::MCContext::getWasmSection(v14, (llvm::Twine *)v42, 0, 0, v44, -1);
  v15 = *((_QWORD *)this + 105);
  v42[0] = ".debug_tu_index";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 44) = llvm::MCContext::getWasmSection(v15, (llvm::Twine *)v42, 0, 0, v44, -1);
  v16 = *((_QWORD *)this + 105);
  v42[0] = ".debug_info";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 10) = llvm::MCContext::getWasmSection(v16, (llvm::Twine *)v42, 0, 0, v44, -1);
  v17 = *((_QWORD *)this + 105);
  v42[0] = ".debug_frame";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 13) = llvm::MCContext::getWasmSection(v17, (llvm::Twine *)v42, 0, 0, v44, -1);
  v18 = *((_QWORD *)this + 105);
  v42[0] = ".debug_pubnames";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 22) = llvm::MCContext::getWasmSection(v18, (llvm::Twine *)v42, 0, 0, v44, -1);
  v19 = *((_QWORD *)this + 105);
  v42[0] = ".debug_pubtypes";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 14) = llvm::MCContext::getWasmSection(v19, (llvm::Twine *)v42, 0, 0, v44, -1);
  v20 = *((_QWORD *)this + 105);
  v42[0] = ".debug_gnu_pubnames";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 45) = llvm::MCContext::getWasmSection(v20, (llvm::Twine *)v42, 0, 0, v44, -1);
  v21 = *((_QWORD *)this + 105);
  v42[0] = ".debug_gnu_pubtypes";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 46) = llvm::MCContext::getWasmSection(v21, (llvm::Twine *)v42, 0, 0, v44, -1);
  v22 = *((_QWORD *)this + 105);
  v42[0] = ".debug_names";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 23) = llvm::MCContext::getWasmSection(v22, (llvm::Twine *)v42, 0, 0, v44, -1);
  v23 = *((_QWORD *)this + 105);
  v42[0] = ".debug_str_offsets";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 37) = llvm::MCContext::getWasmSection(v23, (llvm::Twine *)v42, 0, 0, v44, -1);
  v24 = *((_QWORD *)this + 105);
  v42[0] = ".debug_addr";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 38) = llvm::MCContext::getWasmSection(v24, (llvm::Twine *)v42, 0, 0, v44, -1);
  v25 = *((_QWORD *)this + 105);
  v42[0] = ".debug_rnglists";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 39) = llvm::MCContext::getWasmSection(v25, (llvm::Twine *)v42, 0, 0, v44, -1);
  v26 = *((_QWORD *)this + 105);
  v42[0] = ".debug_loclists";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 40) = llvm::MCContext::getWasmSection(v26, (llvm::Twine *)v42, 0, 0, v44, -1);
  v27 = *((_QWORD *)this + 105);
  v42[0] = ".debug_info.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 28) = llvm::MCContext::getWasmSection(v27, (llvm::Twine *)v42, 0, 0, v44, -1);
  v28 = *((_QWORD *)this + 105);
  v42[0] = ".debug_types.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 29) = llvm::MCContext::getWasmSection(v28, (llvm::Twine *)v42, 0, 0, v44, -1);
  v29 = *((_QWORD *)this + 105);
  v42[0] = ".debug_abbrev.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 30) = llvm::MCContext::getWasmSection(v29, (llvm::Twine *)v42, 0, 0, v44, -1);
  v30 = *((_QWORD *)this + 105);
  v42[0] = ".debug_str.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 31) = llvm::MCContext::getWasmSection(v30, (llvm::Twine *)v42, 0, 1, v44, -1);
  v31 = *((_QWORD *)this + 105);
  v42[0] = ".debug_line.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 32) = llvm::MCContext::getWasmSection(v31, (llvm::Twine *)v42, 0, 0, v44, -1);
  v32 = *((_QWORD *)this + 105);
  v42[0] = ".debug_loc.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 33) = llvm::MCContext::getWasmSection(v32, (llvm::Twine *)v42, 0, 0, v44, -1);
  v33 = *((_QWORD *)this + 105);
  v42[0] = ".debug_str_offsets.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 34) = llvm::MCContext::getWasmSection(v33, (llvm::Twine *)v42, 0, 0, v44, -1);
  v34 = *((_QWORD *)this + 105);
  v42[0] = ".debug_rnglists.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 41) = llvm::MCContext::getWasmSection(v34, (llvm::Twine *)v42, 0, 0, v44, -1);
  v35 = *((_QWORD *)this + 105);
  v42[0] = ".debug_macinfo.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 35) = llvm::MCContext::getWasmSection(v35, (llvm::Twine *)v42, 0, 0, v44, -1);
  v36 = *((_QWORD *)this + 105);
  v42[0] = ".debug_macro.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 36) = llvm::MCContext::getWasmSection(v36, (llvm::Twine *)v42, 0, 0, v44, -1);
  v37 = *((_QWORD *)this + 105);
  v42[0] = ".debug_loclists.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 42) = llvm::MCContext::getWasmSection(v37, (llvm::Twine *)v42, 0, 0, v44, -1);
  v38 = *((_QWORD *)this + 105);
  v42[0] = ".debug_cu_index";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 43) = llvm::MCContext::getWasmSection(v38, (llvm::Twine *)v42, 0, 0, v44, -1);
  v39 = *((_QWORD *)this + 105);
  v42[0] = ".debug_tu_index";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 44) = llvm::MCContext::getWasmSection(v39, (llvm::Twine *)v42, 0, 0, v44, -1);
  v40 = *((_QWORD *)this + 105);
  v42[0] = ".rodata.gcc_except_table";
  v43 = 259;
  v45 = 257;
  result = llvm::MCContext::getWasmSection(v40, (llvm::Twine *)v42, 20, 0, v44, -1);
  *((_QWORD *)this + 7) = result;
  return result;
}

unint64_t llvm::MCObjectFileInfo::initXCOFFMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2)
{
  unint64_t XCOFFSection;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;

  *((_QWORD *)this + 3) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), ".text", 5uLL, 2, 256, 1, 0, 0);
  *((_QWORD *)this + 4) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), ".data", 5uLL, 19, 261, 1, 0, 0);
  XCOFFSection = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), ".rodata", 7uLL, 4, 257, 1, 0, 0);
  *((_QWORD *)this + 6) = XCOFFSection;
  *(_BYTE *)(XCOFFSection + 24) = 2;
  v4 = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), ".rodata.8", 9uLL, 4, 257, 1, 0, 0);
  *((_QWORD *)this + 92) = v4;
  *(_BYTE *)(v4 + 24) = 3;
  v5 = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), ".rodata.16", 0xAuLL, 4, 257, 1, 0, 0);
  *((_QWORD *)this + 93) = v5;
  *(_BYTE *)(v5 + 24) = 4;
  *((_QWORD *)this + 52) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), ".tdata", 6uLL, 13, 276, 1, 0, 0);
  v6 = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), "TOC", 3uLL, 19, 271, 0, 0, 0);
  *((_QWORD *)this + 91) = v6;
  *(_BYTE *)(v6 + 24) = 2;
  *((_QWORD *)this + 7) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), ".gcc_except_table", 0x11uLL, 4, 257, 0, 0, 0);
  *((_QWORD *)this + 8) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), ".eh_info_table", 0xEuLL, 19, 261, 0, 0, 0);
  *((_QWORD *)this + 9) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), ".dwabrev", 8uLL, 0, 0, 1, ".dwabrev", 0x100060000);
  *((_QWORD *)this + 10) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), ".dwinfo", 7uLL, 0, 0, 1, ".dwinfo", 0x100010000);
  *((_QWORD *)this + 11) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), ".dwline", 7uLL, 0, 0, 1, ".dwline", 0x100020000);
  *((_QWORD *)this + 13) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), ".dwframe", 8uLL, 0, 0, 1, ".dwframe", 0x1000A0000);
  *((_QWORD *)this + 22) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), ".dwpbnms", 8uLL, 0, 0, 1, ".dwpbnms", 0x100030000);
  *((_QWORD *)this + 14) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), ".dwpbtyp", 8uLL, 0, 0, 1, ".dwpbtyp", 0x100040000);
  *((_QWORD *)this + 16) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), ".dwstr", 6uLL, 0, 0, 1, ".dwstr", 0x100070000);
  *((_QWORD *)this + 17) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), ".dwloc", 6uLL, 0, 0, 1, ".dwloc", 0x100090000);
  *((_QWORD *)this + 18) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), ".dwarnge", 8uLL, 0, 0, 1, ".dwarnge", 0x100050000);
  *((_QWORD *)this + 19) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), ".dwrnges", 8uLL, 0, 0, 1, ".dwrnges", 0x100080000);
  result = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), ".dwmac", 6uLL, 0, 0, 1, ".dwmac", 0x1000B0000);
  *((_QWORD *)this + 20) = result;
  return result;
}

unint64_t llvm::MCObjectFileInfo::getStackSizesSection(llvm::MCObjectFileInfo *this, const llvm::MCSection *a2)
{
  _DWORD *v3;
  _BYTE *v4;
  uint64_t v5;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  const char *v12;
  __int16 v13;

  v3 = (_DWORD *)*((_QWORD *)this + 105);
  if (*v3 != 1)
    return *((_QWORD *)this + 58);
  v4 = (_BYTE *)(*((_QWORD *)a2 + 30) & 0xFFFFFFFFFFFFFFF8);
  if (v4)
  {
    if ((*v4 & 4) != 0)
    {
      v8 = (_QWORD *)*((_QWORD *)v4 - 1);
      v9 = *v8;
      v4 = v8 + 2;
      v5 = v9;
    }
    else
    {
      v5 = 0;
      v4 = 0;
    }
    v7 = 640;
  }
  else
  {
    v5 = 0;
    v7 = 128;
  }
  v12 = ".stack_sizes";
  v13 = 259;
  v11 = 261;
  v10[0] = v4;
  v10[1] = v5;
  return llvm::MCContext::getELFSection((uint64_t)v3, (llvm::Twine *)&v12, 1, v7, 0, (unsigned __int8 *)v10, 1, *((_DWORD *)a2 + 58), *((_BYTE **)a2 + 1));
}

unint64_t llvm::MCObjectFileInfo::getBBAddrMapSection(llvm::MCObjectFileInfo *this, const llvm::MCSection *a2)
{
  _DWORD *v2;
  _BYTE *v3;
  uint64_t v4;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  const char *v11;
  __int16 v12;

  v2 = (_DWORD *)*((_QWORD *)this + 105);
  if (*v2 != 1)
    return 0;
  v3 = (_BYTE *)(*((_QWORD *)a2 + 30) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    if ((*v3 & 4) != 0)
    {
      v7 = (_QWORD *)*((_QWORD *)v3 - 1);
      v8 = *v7;
      v3 = v7 + 2;
      v4 = v8;
    }
    else
    {
      v4 = 0;
      v3 = 0;
    }
    v6 = 640;
  }
  else
  {
    v4 = 0;
    v6 = 128;
  }
  v11 = ".llvm_bb_addr_map";
  v12 = 259;
  v10 = 261;
  v9[0] = v3;
  v9[1] = v4;
  return llvm::MCContext::getELFSection((uint64_t)v2, (llvm::Twine *)&v11, 1879002120, v6, 0, (unsigned __int8 *)v9, 1, *((_DWORD *)a2 + 58), *((_BYTE **)a2 + 1));
}

unint64_t llvm::MCObjectFileInfo::getPseudoProbeSection(llvm::MCObjectFileInfo *this, const llvm::MCSection *a2)
{
  _DWORD *v3;
  _BYTE *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;

  v3 = (_DWORD *)*((_QWORD *)this + 105);
  if (*v3 != 1)
    return *((_QWORD *)this + 59);
  v4 = (_BYTE *)(*((_QWORD *)a2 + 30) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    return *((_QWORD *)this + 59);
  v5 = *((_QWORD *)this + 59);
  v6 = *(_DWORD *)(v5 + 224);
  v7 = *(_DWORD *)(v5 + 228) | 0x200;
  v8 = *(_QWORD *)(v5 + 200);
  v9 = *(_QWORD *)(v5 + 208);
  v19 = 261;
  v18[0] = v8;
  v18[1] = v9;
  v10 = *(_DWORD *)(v5 + 236);
  if ((*v4 & 4) != 0)
  {
    v14 = (uint64_t *)*((_QWORD *)v4 - 1);
    v15 = *v14;
    v11 = v14 + 2;
    v12 = v15;
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v17 = 261;
  v16[0] = v11;
  v16[1] = v12;
  return llvm::MCContext::getELFSection((uint64_t)v3, (llvm::Twine *)v18, v6, v7, v10, (unsigned __int8 *)v16, 1, -1, 0);
}

uint64_t llvm::MCObjectStreamer::MCObjectStreamer(uint64_t a1, llvm::MCContext *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  llvm::MCStreamer *v10;
  int64x2_t v11;
  uint64_t v12;

  v10 = llvm::MCStreamer::MCStreamer((llvm::MCStreamer *)a1, a2);
  *(_QWORD *)v10 = off_1E8181AF0;
  sub_1C591DD10((uint64_t)a2, a3, a5, a4, (_QWORD *)v10 + 34);
  *(_QWORD *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 288) = 1;
  *(_QWORD *)(a1 + 296) = a1 + 312;
  *(_QWORD *)(a1 + 304) = 0x200000000;
  *(_QWORD *)(a1 + 328) = 1;
  v11 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 336) = v11;
  *(int64x2_t *)(a1 + 352) = v11;
  *(_QWORD *)(a1 + 368) = a1 + 384;
  *(_QWORD *)(a1 + 376) = 0x400000000;
  *(_QWORD *)(a1 + 424) = a1 + 440;
  *(_QWORD *)(a1 + 432) = 0x200000000;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_DWORD *)(a1 + 536) = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8);
  if (v12)
    *(_BYTE *)(a1 + 269) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  return a1;
}

void llvm::MCObjectStreamer::~MCObjectStreamer(llvm::MCObjectStreamer *this)
{
  char *v2;
  char *v3;
  char *v4;
  llvm::MCAssembler *v5;

  *(_QWORD *)this = off_1E8181AF0;
  sub_1C62BD474((uint64_t)this + 520);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 65), 8);
  v2 = (char *)*((_QWORD *)this + 53);
  if (v2 != (char *)this + 440)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 46);
  if (v3 != (char *)this + 384)
    free(v3);
  if ((*((_BYTE *)this + 328) & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)this + 42), 8);
  v4 = (char *)*((_QWORD *)this + 37);
  if (v4 != (char *)this + 312)
    free(v4);
  v5 = (llvm::MCAssembler *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v5)
  {
    llvm::MCAssembler::~MCAssembler(v5);
    MEMORY[0x1CAA32FC0]();
  }
  llvm::MCStreamer::~MCStreamer(this);
}

unint64_t llvm::MCObjectStreamer::emitCFILabel(llvm::MCObjectStreamer *this)
{
  uint64_t v2;
  unint64_t TempSymbol;
  const char *v5;
  __int16 v6;

  v2 = *((_QWORD *)this + 1);
  v5 = "cfi";
  v6 = 259;
  TempSymbol = llvm::MCContext::createTempSymbol(v2, (uint64_t)&v5, 1);
  (*(void (**)(llvm::MCObjectStreamer *, unint64_t, _QWORD))(*(_QWORD *)this + 192))(this, TempSymbol, 0);
  return TempSymbol;
}

llvm::MCSection *llvm::MCObjectStreamer::emitLabelAtPos(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::MCSection *result;
  int v10;

  llvm::MCStreamer::emitLabel((uint64_t)a1, a2, a3);
  result = (llvm::MCSection *)llvm::MCAssembler::registerSymbol(a1[34], a2, 0);
  if (a4)
  {
    v10 = *(unsigned __int8 *)(a4 + 48);
    *(_QWORD *)(a2 + 24) = a5;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a2 + 8) & 0xFFFFE3FF | 0x400;
    if (v10 == 1)
    {
      *(_QWORD *)a2 = *(_QWORD *)a2 & 7 | a4;
      return result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 24) = a5;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a2 + 8) & 0xFFFFE3FF | 0x400;
  }
  return llvm::MCObjectStreamer::addPendingLabel((llvm::MCSection *)a1, (llvm::MCSymbol *)a2);
}

void llvm::MCObjectStreamer::emitWeakReference(llvm::MCObjectStreamer *this, llvm::MCSymbol *a2, const llvm::MCSymbol *a3)
{
  llvm::report_fatal_error((llvm *)"This file format doesn't support weak aliases.", (const char *)1);
}

uint64_t llvm::MCObjectStreamer::mayHaveInstructions(llvm::MCObjectStreamer *this, llvm::MCSection *a2)
{
  return (*((unsigned __int8 *)a2 + 44) >> 1) & 1;
}

uint64_t llvm::MCObjectStreamer::emitDwarfLineEndEntry(llvm::MCContext **this, llvm::MCSection *a2, llvm::MCSymbol *a3)
{
  unint64_t v5;
  llvm::MCContext *v6;

  v5 = llvm::MCStreamer::endSection(this, a2);
  v6 = this[1];
  (*((void (**)(llvm::MCContext **, _QWORD, _QWORD))*this + 21))(this, *(_QWORD *)(*((_QWORD *)v6 + 21) + 88), 0);
  return (*((uint64_t (**)(llvm::MCContext **, uint64_t, llvm::MCSymbol *, unint64_t, _QWORD))*this + 159))(this, 0x7FFFFFFFFFFFFFFFLL, a3, v5, *(unsigned int *)(*((_QWORD *)v6 + 19) + 8));
}

char *llvm::MCObjectStreamer::emitCVLocDirective(llvm::MCContext **a1, unsigned int a2, uint64_t a3, int a4, __int16 a5, char a6, BOOL a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v15;
  char *result;
  uint64_t v19;
  const llvm::MCSymbol *TempSymbol;
  llvm::CodeViewContext *v21;
  const char *v22;
  __int16 v23;

  v15 = a3;
  result = (char *)llvm::MCStreamer::checkCVLocSection((uint64_t)a1, a2, a3, a11);
  if ((_DWORD)result)
  {
    v19 = (uint64_t)a1[1];
    v22 = "tmp";
    v23 = 259;
    TempSymbol = (const llvm::MCSymbol *)llvm::MCContext::createTempSymbol(v19, (uint64_t)&v22, 1);
    (*((void (**)(llvm::MCContext **, const llvm::MCSymbol *, _QWORD))*a1 + 24))(a1, TempSymbol, 0);
    llvm::MCContext::getCVContext(a1[1]);
    return llvm::CodeViewContext::recordCVLoc(v21, a1[1], TempSymbol, a2, v15, a4, a5, a6, a7);
  }
  return result;
}

uint64_t llvm::MCObjectStreamer::emitCVLinetableDirective(llvm::MCContext **this, unsigned int a2, const llvm::MCSymbol *a3, const llvm::MCSymbol *a4)
{
  llvm::CodeViewContext *v8;

  llvm::MCContext::getCVContext(this[1]);
  llvm::CodeViewContext::emitLineTableForFunction(v8, (llvm::MCObjectStreamer *)this, a2, a3, a4);
  return llvm::MCStreamer::emitCVLinetableDirective((llvm::MCStreamer *)this, a2, a3, a4);
}

uint64_t llvm::MCObjectStreamer::emitCVInlineLinetableDirective(llvm::MCContext **this, unsigned int a2, unsigned int a3, unsigned int a4, const llvm::MCSymbol *a5, const llvm::MCSymbol *a6)
{
  llvm::CodeViewContext *v12;

  llvm::MCContext::getCVContext(this[1]);
  llvm::CodeViewContext::emitInlineLineTableForFunction(v12, (llvm::MCObjectStreamer *)this, a2, a3, a4, a5, a6);
  return llvm::MCStreamer::emitCVInlineLinetableDirective((llvm::MCStreamer *)this, a2, a3, a4, a5, a6);
}

uint64_t llvm::MCObjectStreamer::emitCVDefRangeDirective(uint64_t a1, _BYTE *a2, uint64_t a3, _BYTE *a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;

  llvm::MCContext::getCVContext(*(llvm::MCContext **)(a1 + 8));
  v11 = llvm::CodeViewContext::emitDefRange(v10, a1, a2, a3, a4, a5);
  llvm::MCObjectStreamer::flushPendingLabels((_DWORD *)a1, v11, 0);
  return llvm::MCStreamer::emitCVDefRangeDirective(a1, a2, a3, a4, a5);
}

uint64_t llvm::MCObjectStreamer::emitCVStringTableDirective(llvm::MCContext **this)
{
  llvm::CodeViewContext *v2;

  llvm::MCContext::getCVContext(this[1]);
  return llvm::CodeViewContext::emitStringTable(v2, (llvm::MCObjectStreamer *)this);
}

uint64_t llvm::MCObjectStreamer::emitCVFileChecksumsDirective(llvm::MCContext **this)
{
  uint64_t v2;

  llvm::MCContext::getCVContext(this[1]);
  return llvm::CodeViewContext::emitFileChecksums(v2, (llvm::MCObjectStreamer *)this);
}

uint64_t llvm::MCObjectStreamer::emitCVFileChecksumOffsetDirective(llvm::MCContext **this, unsigned int a2)
{
  llvm::CodeViewContext *v4;

  llvm::MCContext::getCVContext(this[1]);
  return llvm::CodeViewContext::emitFileChecksumOffset(v4, (llvm::MCObjectStreamer *)this, a2);
}

uint64_t sub_1C62BD3BC(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  unsigned int v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
    return sub_1C594CE3C(a1, a2, a3, a4);
  v5 = *(_QWORD *)a1 + 40 * v4;
  v6 = *a4;
  v7 = *((_QWORD *)a4 + 2);
  *(_QWORD *)v5 = a2;
  *(_OWORD *)(v5 + 8) = v6;
  *(_QWORD *)(v5 + 24) = v7;
  *(_QWORD *)(v5 + 32) = a3;
  ++*(_DWORD *)(a1 + 8);
  return a1;
}

void llvm::MCObjectStreamer::emitFileDirective(uint64_t a1, void *a2, size_t a3)
{
  sub_1C594C60C(*(_QWORD **)(a1 + 272), a2, a3);
}

{
  sub_1C594C60C(*(_QWORD **)(a1 + 272), a2, a3);
}

uint64_t llvm::MCObjectStreamer::emitAddrsig(llvm::MCObjectStreamer *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 34) + 24) + 64))(*(_QWORD *)(*((_QWORD *)this + 34) + 24));
}

uint64_t llvm::MCObjectStreamer::emitAddrsigSym(llvm::MCObjectStreamer *this, const llvm::MCSymbol *a2)
{
  llvm::MCAssembler::registerSymbol(*((_QWORD *)this + 34), (uint64_t)a2, 0);
  return (*(uint64_t (**)(_QWORD, const llvm::MCSymbol *))(**(_QWORD **)(*((_QWORD *)this + 34) + 24) + 72))(*(_QWORD *)(*((_QWORD *)this + 34) + 24), a2);
}

void sub_1C62BD474(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 40 * v1;
    v3 = *(_QWORD *)a1 + 24;
    do
    {
      if ((*(_QWORD *)(v3 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = *(void **)(v3 - 16);
        if ((void *)v3 != v4)
          free(v4);
      }
      v3 += 40;
      v2 -= 40;
    }
    while (v2);
  }
}

_QWORD *sub_1C62BD4D8(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 - 28 >= 3)
    v4 = 1 << (33 - v3);
  else
    v4 = 64;
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 5)
  {
    v6 = result + 1;
    *result = 1;
    v7 = result + 5;
    goto LABEL_10;
  }
  if ((v2 & 1) != 0)
    return sub_1C4E41D80(v1, v5);
  if (v5 != *((_DWORD *)result + 4))
  {
    MEMORY[0x1CAA32FB4](result[1], 8);
    return sub_1C4E41D80(v1, v5);
  }
  *result = 0;
  if (!v5)
    return result;
  v6 = (_QWORD *)result[1];
  v7 = &v6[v5];
  do
LABEL_10:
    *v6++ = -4096;
  while (v6 != v7);
  return result;
}

_QWORD *sub_1C62BD59C(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C594CCDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C62BD614(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x100000000;
  }
  return v5;
}

_QWORD *sub_1C62BD614(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C594CD78(a1, v6);
  v8 = 0;
  sub_1C594CCDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_1C62BD6C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 40 * v6;
    do
    {
      *v7 = -4096;
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v13 = 0;
        sub_1C594CCDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        v10 = v13;
        *v13 = *(_QWORD *)v4;
        v10[2] = 0x100000000;
        v10[1] = v10 + 3;
        v11 = (uint64_t)(v10 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_1C6180FA8(v11, v4 + 8);
        ++*(_DWORD *)(a1 + 8);
        v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12)
          free(v12);
      }
      v4 += 40;
    }
    while (v4 != a3);
  }
}

BOOL llvm::MCObjectWriter::isSymbolRefDifferenceFullyResolvedImpl(llvm::MCObjectWriter *this, const llvm::MCAssembler *a2, const llvm::MCSymbol *a3, const llvm::MCFragment *a4)
{
  uint64_t v5;

  sub_1C593D6FC((uint64_t)a3, 1);
  return *(_QWORD *)(v5 + 16) == *((_QWORD *)a4 + 2);
}

_OWORD *llvm::MCPseudoProbeInlineTree::addPseudoProbe(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  _OWORD *v8;
  __int128 v9;
  _OWORD *result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;

  if (a3[2])
    v5 = *(uint64_t **)a3;
  else
    v5 = a2;
  v15 = *v5;
  v16 = 0;
  v6 = sub_1C62BD900(a1, (uint64_t)&v15);
  v7 = a3[2];
  if (v7)
  {
    v11 = *(_DWORD *)(*(_QWORD *)a3 + 8);
    if (v7 != 1)
    {
      v12 = *(_QWORD *)a3 + 16;
      do
      {
        v13 = *(_QWORD *)v12;
        v14 = v11;
        v6 = sub_1C62BD900((uint64_t *)v6, (uint64_t)&v13);
        v11 = *(_DWORD *)(v12 + 8);
        v12 += 16;
      }
      while (v12 != *(_QWORD *)a3 + 16 * a3[2]);
    }
    v13 = *a2;
    v14 = v11;
    v6 = sub_1C62BD900((uint64_t *)v6, (uint64_t)&v13);
  }
  v8 = *(_OWORD **)(v6 + 48);
  if ((unint64_t)v8 >= *(_QWORD *)(v6 + 56))
  {
    result = sub_1C594FFA8((void **)(v6 + 40), a2);
  }
  else
  {
    v9 = *((_OWORD *)a2 + 1);
    *v8 = *(_OWORD *)a2;
    v8[1] = v9;
    result = v8 + 2;
  }
  *(_QWORD *)(v6 + 48) = result;
  return result;
}

uint64_t sub_1C62BD900(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_DWORD *)(v4 + 32) = 1065353216;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  v5 = *(_QWORD *)a2;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = v5;
  v9 = v4;
  v6 = sub_1C594FBB8(a1, v5, *(_DWORD *)(a2 + 8), (_OWORD *)a2, &v9);
  if (v9)
  {
    v7 = sub_1C5934688(v9);
    MEMORY[0x1CAA32FC0](v7, 0x10A0C40C01AB3A7);
  }
  *(_QWORD *)(v6[4] + 72) = a1;
  return v6[4];
}

_OWORD *sub_1C62BD9A4(uint64_t a1, unint64_t a2, unsigned int a3, _OWORD **a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v6 = sub_1C5950088(a1, &v13, a2, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v9 = v6;
    v7 = operator new(0x38uLL);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = 0;
    v10 = v13;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v10;
    *v9 = (uint64_t)v7;
    v11 = **(_QWORD **)a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *(_QWORD *)a1 = v11;
      v12 = (uint64_t *)*v9;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v12);
    ++*(_QWORD *)(a1 + 16);
  }
  return v7;
}

uint64_t llvm::MCRegisterInfo::getLLVMRegNum(llvm::MCRegisterInfo *this, unsigned int a2, int a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  v3 = 144;
  if (a3)
    v3 = 152;
  v4 = *(_DWORD **)((char *)this + v3);
  if (!v4)
    goto LABEL_15;
  v5 = 120;
  if (a3)
    v5 = 124;
  v6 = *(unsigned int *)((char *)this + v5);
  v7 = &v4[2 * v6];
  if ((_DWORD)v6)
  {
    do
    {
      v8 = v6 >> 1;
      v9 = &v4[2 * (v6 >> 1)];
      v11 = *v9;
      v10 = v9 + 2;
      v6 += ~(v6 >> 1);
      if (v11 < a2)
        v4 = v10;
      else
        v6 = v8;
    }
    while (v6);
  }
  if (v4 == v7 || *v4 != a2)
  {
    LODWORD(v4) = 0;
LABEL_15:
    v12 = 0;
    v13 = 0;
    return v13 | v12 | v4;
  }
  LODWORD(v4) = v4[1];
  v12 = v4 & 0xFFFFFF00;
  LODWORD(v4) = v4;
  v13 = 0x100000000;
  return v13 | v12 | v4;
}

uint64_t llvm::MCRegisterInfo::getSEHRegNum(uint64_t a1, int a2)
{
  int *v3;
  unsigned int *v4;
  int v6;

  v6 = a2;
  v3 = sub_1C498D77C((uint64_t *)(a1 + 160), &v6);
  if ((int *)(*(_QWORD *)(a1 + 160) + 8 * *(unsigned int *)(a1 + 176)) == v3)
    v4 = (unsigned int *)&v6;
  else
    v4 = (unsigned int *)(v3 + 1);
  return *v4;
}

uint64_t llvm::MCRegisterInfo::getCodeViewRegNum(uint64_t a1, unsigned int a2)
{
  int *v3;
  _BYTE *v5;
  char v6;
  uint64_t v7[4];
  __int16 v8;
  const char *v9;
  __int16 v10;
  _BYTE v11[44];
  unsigned int v12;

  v12 = a2;
  if (!*(_DWORD *)(a1 + 192))
    llvm::report_fatal_error((llvm *)"target does not implement codeview register mapping", (const char *)1);
  v3 = sub_1C498D77C((uint64_t *)(a1 + 184), &v12);
  if ((int *)(*(_QWORD *)(a1 + 184) + 8 * *(unsigned int *)(a1 + 200)) == v3)
  {
    v9 = "unknown codeview register ";
    v10 = 259;
    if (v12 >= *(_DWORD *)(a1 + 8))
    {
      v8 = 264;
      LODWORD(v7[0]) = v12;
    }
    else
    {
      v5 = (_BYTE *)(*(_QWORD *)(a1 + 64) + *(unsigned int *)(*(_QWORD *)a1 + 24 * v12));
      v6 = 1;
      HIBYTE(v8) = 1;
      if (*v5)
      {
        v7[0] = (uint64_t)v5;
        v6 = 3;
      }
      LOBYTE(v8) = v6;
    }
    sub_1C6131AAC((uint64_t *)&v9, v7, (uint64_t)v11);
    llvm::report_fatal_error((uint64_t)v11, 1);
  }
  return v3[1];
}

unint64_t llvm::MCSection::getEndSymbol(llvm::MCSection *this, llvm::MCContext *a2)
{
  unint64_t result;
  const char *v4;
  __int16 v5;

  result = *((_QWORD *)this + 2);
  if (!result)
  {
    v4 = "sec_end";
    v5 = 259;
    result = llvm::MCContext::createTempSymbol((uint64_t)a2, (uint64_t)&v4, 1);
    *((_QWORD *)this + 2) = result;
  }
  return result;
}

uint64_t llvm::MCSection::setBundleLockState(uint64_t result, int a2)
{
  int v2;
  int v3;

  if (a2)
  {
    if (*(_DWORD *)(result + 36) != 2)
      *(_DWORD *)(result + 36) = a2;
    ++*(_DWORD *)(result + 40);
  }
  else
  {
    v2 = *(_DWORD *)(result + 40);
    if (!v2)
      llvm::report_fatal_error((llvm *)"Mismatched bundle_lock/unlock directives", (const char *)1);
    v3 = v2 - 1;
    *(_DWORD *)(result + 40) = v3;
    if (!v3)
      *(_DWORD *)(result + 36) = 0;
  }
  return result;
}

const char *llvm::MCSection::getVirtualSectionKind(llvm::MCSection *this)
{
  return "virtual";
}

llvm::raw_ostream *llvm::MCSection::dump(llvm::MCFragment **this)
{
  llvm::raw_ostream *v2;
  llvm::MCFragment *i;

  v2 = (llvm::raw_ostream *)llvm::errs((llvm *)this);
  sub_1C4816AD8(v2, "<MCSection");
  sub_1C4816AD8(v2, " Fragments:[\n      ");
  for (i = this[14]; i != (llvm::MCFragment *)(this + 13); i = (llvm::MCFragment *)*((_QWORD *)i + 1))
  {
    if (i != this[14])
      sub_1C4816AD8(v2, ",\n      ");
    llvm::MCFragment::dump(i);
  }
  return sub_1C4816AD8(v2, "]>");
}

BOOL llvm::MCSectionCOFF::shouldOmitSectionDirective(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a1 + 232))
    return 0;
  if (a3 == 4)
  {
    return *(_DWORD *)a2 == 1936941614;
  }
  else
  {
    if (a3 != 5)
      return 0;
    if (*(_DWORD *)a2 == 2019914798 && *(_BYTE *)(a2 + 4) == 116)
      return 1;
    return *(_DWORD *)a2 == 1952539694 && *(_BYTE *)(a2 + 4) == 97;
  }
}

uint64_t llvm::MCSectionCOFF::setSelection(uint64_t this, int a2)
{
  *(_DWORD *)(this + 240) = a2;
  *(_DWORD *)(this + 224) |= 0x1000u;
  return this;
}

llvm::raw_ostream *llvm::MCSectionCOFF::printSwitchToSection(llvm::MCSectionCOFF *this, const llvm::MCAsmInfo *a2, const llvm::Triple *a3, llvm::raw_ostream *a4, const llvm::MCExpr *a5)
{
  _BYTE *v8;
  llvm::raw_ostream *v9;
  const void *v10;
  unint64_t v11;
  void *v12;
  llvm::raw_ostream *result;
  int v14;
  _BYTE *v15;
  const void *v16;
  size_t v17;
  _BYTE *v18;
  _BYTE *v19;
  char *v20;
  unint64_t v21;
  char v22;
  llvm::raw_ostream *v23;
  char v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  int *v28;
  int v29;
  int v30;
  BOOL v31;
  _BYTE *v32;
  _BYTE *v33;
  char *v34;
  unsigned int v35;

  if (llvm::MCSectionCOFF::shouldOmitSectionDirective((uint64_t)this, *((_QWORD *)this + 25), *((_QWORD *)this + 26)))
  {
    v8 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v8 >= *((_QWORD *)a4 + 3))
    {
      a4 = llvm::raw_ostream::write(a4, 9);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v8 + 1;
      *v8 = 9;
    }
    v16 = (const void *)*((_QWORD *)this + 25);
    v17 = *((_QWORD *)this + 26);
    result = (llvm::raw_ostream *)*((_QWORD *)a4 + 4);
    if (v17 <= *((_QWORD *)a4 + 3) - (_QWORD)result)
    {
      if (v17)
      {
        memcpy(result, v16, v17);
        result = (llvm::raw_ostream *)(*((_QWORD *)a4 + 4) + v17);
        *((_QWORD *)a4 + 4) = result;
      }
    }
    else
    {
      llvm::raw_ostream::write(a4, (const char *)v16, v17);
      result = (llvm::raw_ostream *)*((_QWORD *)a4 + 4);
    }
    if ((unint64_t)result < *((_QWORD *)a4 + 3))
    {
      *((_QWORD *)a4 + 4) = (char *)result + 1;
      *(_BYTE *)result = 10;
      return result;
    }
    return llvm::raw_ostream::write(a4, 10);
  }
  v9 = sub_1C4816AD8(a4, "\t.section\t");
  v10 = (const void *)*((_QWORD *)this + 25);
  v11 = *((_QWORD *)this + 26);
  v12 = (void *)*((_QWORD *)v9 + 4);
  if (v11 <= *((_QWORD *)v9 + 3) - (_QWORD)v12)
  {
    if (v11)
    {
      memcpy(v12, v10, *((_QWORD *)this + 26));
      *((_QWORD *)v9 + 4) += v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(v9, (const char *)v10, *((_QWORD *)this + 26));
  }
  result = sub_1C4816AD8(v9, ",\"");
  if ((*((_BYTE *)this + 224) & 0x40) != 0)
  {
    v18 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v18 >= *((_QWORD *)a4 + 3))
    {
      result = llvm::raw_ostream::write(a4, 100);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v18 + 1;
      *v18 = 100;
    }
  }
  if ((*((_BYTE *)this + 224) & 0x80) != 0)
  {
    v19 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v19 >= *((_QWORD *)a4 + 3))
    {
      result = llvm::raw_ostream::write(a4, 98);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v19 + 1;
      *v19 = 98;
    }
  }
  v14 = *((_DWORD *)this + 56);
  if ((v14 & 0x20000000) != 0)
  {
    v15 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v15 >= *((_QWORD *)a4 + 3))
    {
      result = llvm::raw_ostream::write(a4, 120);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v15 + 1;
      *v15 = 120;
    }
    v14 = *((_DWORD *)this + 56);
  }
  if (v14 < 0)
  {
    v20 = (char *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v20 < *((_QWORD *)a4 + 3))
    {
      *((_QWORD *)a4 + 4) = v20 + 1;
      v22 = 119;
      goto LABEL_34;
    }
    v23 = a4;
    v24 = 119;
  }
  else
  {
    v21 = *((_QWORD *)a4 + 3);
    v20 = (char *)*((_QWORD *)a4 + 4);
    if ((v14 & 0x40000000) != 0)
    {
      if ((unint64_t)v20 < v21)
      {
        *((_QWORD *)a4 + 4) = v20 + 1;
        v22 = 114;
        goto LABEL_34;
      }
      v23 = a4;
      v24 = 114;
    }
    else
    {
      if ((unint64_t)v20 < v21)
      {
        *((_QWORD *)a4 + 4) = v20 + 1;
        v22 = 121;
LABEL_34:
        *v20 = v22;
        goto LABEL_41;
      }
      v23 = a4;
      v24 = 121;
    }
  }
  result = llvm::raw_ostream::write(v23, v24);
LABEL_41:
  if ((*((_BYTE *)this + 225) & 8) != 0)
  {
    v26 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v26 >= *((_QWORD *)a4 + 3))
    {
      result = llvm::raw_ostream::write(a4, 110);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v26 + 1;
      *v26 = 110;
    }
  }
  if ((*((_BYTE *)this + 227) & 0x10) != 0)
  {
    v27 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v27 >= *((_QWORD *)a4 + 3))
    {
      result = llvm::raw_ostream::write(a4, 115);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v27 + 1;
      *v27 = 115;
    }
  }
  if ((*((_BYTE *)this + 227) & 2) != 0)
  {
    if (*((_QWORD *)this + 26) < 6uLL
      || ((v28 = (int *)*((_QWORD *)this + 25), v29 = *v28, v30 = *((unsigned __int16 *)v28 + 2), v29 == 1650811950)
        ? (v31 = v30 == 26485)
        : (v31 = 0),
          !v31))
    {
      v32 = (_BYTE *)*((_QWORD *)a4 + 4);
      if ((unint64_t)v32 >= *((_QWORD *)a4 + 3))
      {
        result = llvm::raw_ostream::write(a4, 68);
      }
      else
      {
        *((_QWORD *)a4 + 4) = v32 + 1;
        *v32 = 68;
      }
    }
  }
  v25 = (_BYTE *)*((_QWORD *)a4 + 4);
  if ((unint64_t)v25 >= *((_QWORD *)a4 + 3))
  {
    result = llvm::raw_ostream::write(a4, 34);
  }
  else
  {
    *((_QWORD *)a4 + 4) = v25 + 1;
    *v25 = 34;
  }
  if ((*((_BYTE *)this + 225) & 0x10) != 0)
  {
    if (*((_QWORD *)this + 29))
      v34 = ",";
    else
      v34 = "\n\t.linkonce\t";
    result = sub_1C4816AD8(a4, v34);
    v35 = *((_DWORD *)this + 60) - 1;
    if (v35 <= 6)
      result = sub_1C4816AD8(a4, off_1E81820F0[v35]);
    if (*((_QWORD *)this + 29))
    {
      sub_1C4816AD8(a4, ",");
      result = llvm::MCSymbol::print(*((llvm::MCSymbol **)this + 29), a4, a2);
    }
  }
  v33 = (_BYTE *)*((_QWORD *)a4 + 4);
  if ((unint64_t)v33 < *((_QWORD *)a4 + 3))
  {
    *((_QWORD *)a4 + 4) = v33 + 1;
    *v33 = 10;
    return result;
  }
  return llvm::raw_ostream::write(a4, 10);
}

BOOL llvm::MCSectionCOFF::useCodeAlign(llvm::MCSectionCOFF *this)
{
  return (*((_DWORD *)this + 55) & 0xFE) == 2;
}

uint64_t llvm::MCSectionCOFF::isVirtualSection(llvm::MCSectionCOFF *this)
{
  return *((unsigned __int8 *)this + 224) >> 7;
}

const char *llvm::MCSectionCOFF::getVirtualSectionKind(llvm::MCSectionCOFF *this)
{
  return "IMAGE_SCN_CNT_UNINITIALIZED_DATA";
}

void llvm::MCSectionELF::printSwitchToSection(llvm::MCSectionELF *this, const llvm::MCAsmInfo *a2, const llvm::Triple *a3, llvm::raw_ostream *a4, const llvm::MCExpr *a5)
{
  int v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  char *v25;
  unint64_t v26;
  char v27;
  _BYTE *v28;
  char *v29;
  char v30;
  _BYTE *v31;
  llvm::raw_ostream *v32;
  char v33;
  uint64_t v34;
  char *v35;
  const void *v36;
  size_t v37;
  _BYTE *v38;
  unint64_t v39;
  llvm::raw_ostream *v40;
  char v41;
  _BYTE *v42;
  llvm::raw_ostream *v43;
  llvm::raw_ostream *v44;
  _BYTE *v45;
  _BYTE *v46;
  _BYTE *v47;
  unsigned __int8 *v48;
  int64_t v49;
  _BYTE *v50;
  unsigned __int8 *v51;
  int64_t v52;
  _QWORD *v53;
  int64_t v54;
  _BYTE *v55;
  _QWORD *v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[4];
  __int16 v61;
  const char *v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65[4];
  __int16 v66;
  const char *v67;
  __int16 v68;
  uint64_t v69[5];
  uint64_t v70[5];
  _BYTE v71[40];

  if (*((_DWORD *)this + 58) == -1
    && (*(unsigned int (**)(const llvm::MCAsmInfo *, _QWORD, _QWORD))(*(_QWORD *)a2 + 64))(a2, *((_QWORD *)this + 25), *((_QWORD *)this + 26)))
  {
    v13 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v13 >= *((_QWORD *)a4 + 3))
    {
      llvm::raw_ostream::write(a4, 9);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v13 + 1;
      *v13 = 9;
    }
    v36 = (const void *)*((_QWORD *)this + 25);
    v37 = *((_QWORD *)this + 26);
    v38 = (_BYTE *)*((_QWORD *)a4 + 4);
    if (v37 <= *((_QWORD *)a4 + 3) - (_QWORD)v38)
    {
      if (v37)
      {
        memcpy(v38, v36, v37);
        v38 = (_BYTE *)(*((_QWORD *)a4 + 4) + v37);
        *((_QWORD *)a4 + 4) = v38;
      }
    }
    else
    {
      llvm::raw_ostream::write(a4, (const char *)v36, v37);
      v38 = (_BYTE *)*((_QWORD *)a4 + 4);
    }
    v39 = *((_QWORD *)a4 + 3);
    if (a5)
    {
      if ((unint64_t)v38 >= v39)
      {
        llvm::raw_ostream::write(a4, 9);
      }
      else
      {
        *((_QWORD *)a4 + 4) = v38 + 1;
        *v38 = 9;
      }
      llvm::MCExpr::print((uint64_t)a5);
      v39 = *((_QWORD *)a4 + 3);
      v38 = (_BYTE *)*((_QWORD *)a4 + 4);
    }
    if ((unint64_t)v38 < v39)
    {
      *((_QWORD *)a4 + 4) = v38 + 1;
      *v38 = 10;
      return;
    }
    goto LABEL_141;
  }
  sub_1C4816AD8(a4, "\t.section\t");
  sub_1C59510DC(a4, *((unsigned __int8 **)this + 25), *((_QWORD *)this + 26));
  if (*((_BYTE *)a2 + 336))
  {
    v10 = *((_DWORD *)this + 57);
    if ((v10 & 0x10) == 0)
    {
      if ((v10 & 2) != 0)
      {
        sub_1C4816AD8(a4, ",#alloc");
        v10 = *((_DWORD *)this + 57);
      }
      if ((v10 & 4) != 0)
      {
        sub_1C4816AD8(a4, ",#execinstr");
        v10 = *((_DWORD *)this + 57);
      }
      if ((v10 & 1) != 0)
      {
        sub_1C4816AD8(a4, ",#write");
        v10 = *((_DWORD *)this + 57);
      }
      if (v10 < 0)
      {
        sub_1C4816AD8(a4, ",#exclude");
        v10 = *((_DWORD *)this + 57);
      }
      if ((v10 & 0x400) != 0)
        sub_1C4816AD8(a4, ",#tls");
      goto LABEL_138;
    }
  }
  sub_1C4816AD8(a4, ",\"");
  v11 = *((_DWORD *)this + 57);
  if ((v11 & 2) != 0)
  {
    v12 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v12 >= *((_QWORD *)a4 + 3))
    {
      llvm::raw_ostream::write(a4, 97);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v12 + 1;
      *v12 = 97;
    }
    v11 = *((_DWORD *)this + 57);
  }
  if (v11 < 0)
  {
    v28 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v28 >= *((_QWORD *)a4 + 3))
    {
      llvm::raw_ostream::write(a4, 101);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v28 + 1;
      *v28 = 101;
    }
  }
  if ((*((_BYTE *)this + 228) & 4) != 0)
  {
    v16 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v16 >= *((_QWORD *)a4 + 3))
    {
      llvm::raw_ostream::write(a4, 120);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v16 + 1;
      *v16 = 120;
    }
  }
  if ((*((_BYTE *)this + 229) & 2) != 0)
  {
    v17 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v17 >= *((_QWORD *)a4 + 3))
    {
      llvm::raw_ostream::write(a4, 71);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v17 + 1;
      *v17 = 71;
    }
  }
  if ((*((_BYTE *)this + 228) & 1) != 0)
  {
    v18 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v18 >= *((_QWORD *)a4 + 3))
    {
      llvm::raw_ostream::write(a4, 119);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v18 + 1;
      *v18 = 119;
    }
  }
  if ((*((_BYTE *)this + 228) & 0x10) != 0)
  {
    v19 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v19 >= *((_QWORD *)a4 + 3))
    {
      llvm::raw_ostream::write(a4, 77);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v19 + 1;
      *v19 = 77;
    }
  }
  if ((*((_BYTE *)this + 228) & 0x20) != 0)
  {
    v20 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v20 >= *((_QWORD *)a4 + 3))
    {
      llvm::raw_ostream::write(a4, 83);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v20 + 1;
      *v20 = 83;
    }
  }
  if ((*((_BYTE *)this + 229) & 4) != 0)
  {
    v21 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v21 >= *((_QWORD *)a4 + 3))
    {
      llvm::raw_ostream::write(a4, 84);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v21 + 1;
      *v21 = 84;
    }
  }
  if ((*((_BYTE *)this + 228) & 0x80) != 0)
  {
    v22 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v22 >= *((_QWORD *)a4 + 3))
    {
      llvm::raw_ostream::write(a4, 111);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v22 + 1;
      *v22 = 111;
    }
  }
  if ((*((_BYTE *)this + 230) & 0x20) != 0)
  {
    v23 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v23 >= *((_QWORD *)a4 + 3))
    {
      llvm::raw_ostream::write(a4, 82);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v23 + 1;
      *v23 = 82;
    }
  }
  if (*((_DWORD *)a3 + 9) == 14 && (*((_BYTE *)this + 230) & 0x10) != 0)
  {
    v31 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v31 >= *((_QWORD *)a4 + 3))
    {
      llvm::raw_ostream::write(a4, 82);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v31 + 1;
      *v31 = 82;
    }
  }
  v14 = *((unsigned int *)a3 + 6);
  if (v14 <= 0x2B)
  {
    if (((1 << v14) & 0x18000000006) != 0)
    {
      if ((*((_BYTE *)this + 231) & 0x20) == 0)
        goto LABEL_36;
      v29 = (char *)*((_QWORD *)a4 + 4);
      if ((unint64_t)v29 < *((_QWORD *)a4 + 3))
      {
        *((_QWORD *)a4 + 4) = v29 + 1;
        v30 = 121;
        goto LABEL_74;
      }
      v40 = a4;
      v41 = 121;
LABEL_106:
      llvm::raw_ostream::write(v40, v41);
      goto LABEL_36;
    }
    if (v14 == 12)
    {
      if ((*((_BYTE *)this + 231) & 0x10) == 0)
        goto LABEL_36;
      v29 = (char *)*((_QWORD *)a4 + 4);
      if ((unint64_t)v29 < *((_QWORD *)a4 + 3))
      {
        *((_QWORD *)a4 + 4) = v29 + 1;
        v30 = 115;
        goto LABEL_74;
      }
      v40 = a4;
      v41 = 115;
      goto LABEL_106;
    }
    if (v14 == 43)
    {
      if ((*((_BYTE *)this + 231) & 0x20) != 0)
      {
        v42 = (_BYTE *)*((_QWORD *)a4 + 4);
        if ((unint64_t)v42 >= *((_QWORD *)a4 + 3))
        {
          llvm::raw_ostream::write(a4, 99);
        }
        else
        {
          *((_QWORD *)a4 + 4) = v42 + 1;
          *v42 = 99;
        }
      }
      if ((*((_BYTE *)this + 231) & 0x10) != 0)
      {
        v29 = (char *)*((_QWORD *)a4 + 4);
        if ((unint64_t)v29 < *((_QWORD *)a4 + 3))
        {
          *((_QWORD *)a4 + 4) = v29 + 1;
          v30 = 100;
LABEL_74:
          *v29 = v30;
          goto LABEL_36;
        }
        v40 = a4;
        v41 = 100;
        goto LABEL_106;
      }
    }
  }
LABEL_36:
  v15 = (_BYTE *)*((_QWORD *)a4 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)a4 + 3))
  {
    llvm::raw_ostream::write(a4, 34);
  }
  else
  {
    *((_QWORD *)a4 + 4) = v15 + 1;
    *v15 = 34;
  }
  v24 = (_BYTE *)*((_QWORD *)a4 + 4);
  if ((unint64_t)v24 >= *((_QWORD *)a4 + 3))
  {
    llvm::raw_ostream::write(a4, 44);
  }
  else
  {
    *((_QWORD *)a4 + 4) = v24 + 1;
    *v24 = 44;
  }
  v26 = *((_QWORD *)a4 + 3);
  v25 = (char *)*((_QWORD *)a4 + 4);
  if (**((_BYTE **)a2 + 6) != 64)
  {
    if ((unint64_t)v25 < v26)
    {
      *((_QWORD *)a4 + 4) = v25 + 1;
      v27 = 64;
      goto LABEL_63;
    }
    v32 = a4;
    v33 = 64;
LABEL_87:
    llvm::raw_ostream::write(v32, v33);
    goto LABEL_88;
  }
  if ((unint64_t)v25 >= v26)
  {
    v32 = a4;
    v33 = 37;
    goto LABEL_87;
  }
  *((_QWORD *)a4 + 4) = v25 + 1;
  v27 = 37;
LABEL_63:
  *v25 = v27;
LABEL_88:
  v34 = *((unsigned int *)this + 56);
  if ((int)v34 <= 1879002111)
  {
    v35 = "init_array";
    switch((int)v34)
    {
      case 7:
        v35 = "note";
        break;
      case 8:
        v35 = "nobits";
        break;
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
        goto LABEL_159;
      case 14:
        break;
      case 15:
        v35 = "fini_array";
        break;
      case 16:
        v35 = "preinit_array";
        break;
      default:
        if ((_DWORD)v34 != 1)
          goto LABEL_159;
        v35 = "progbits";
        break;
    }
  }
  else
  {
    switch((int)v34)
    {
      case 1879002112:
        v35 = "llvm_odrtab";
        break;
      case 1879002113:
        v35 = "llvm_linker_options";
        break;
      case 1879002114:
      case 1879002115:
      case 1879002118:
      case 1879002119:
        goto LABEL_159;
      case 1879002116:
        v35 = "llvm_dependent_libraries";
        break;
      case 1879002117:
        v35 = "llvm_sympart";
        break;
      case 1879002120:
        v35 = "llvm_bb_addr_map";
        break;
      case 1879002121:
        v35 = "llvm_call_graph_profile";
        break;
      default:
        if ((_DWORD)v34 == 1879048193)
        {
          v35 = "unwind";
        }
        else
        {
          if ((_DWORD)v34 != 1879048222)
          {
LABEL_159:
            v67 = "unsupported type 0x";
            v68 = 259;
            v64 = v34;
            v65[0] = (uint64_t)&v64;
            v65[2] = 0;
            v66 = 270;
            sub_1C6131AAC((uint64_t *)&v67, v65, (uint64_t)v69);
            v62 = " for section ";
            v63 = 259;
            sub_1C6131AAC(v69, (uint64_t *)&v62, (uint64_t)v70);
            v58 = *((_QWORD *)this + 25);
            v59 = *((_QWORD *)this + 26);
            v61 = 261;
            v60[0] = v58;
            v60[1] = v59;
            sub_1C6131AAC(v70, v60, (uint64_t)v71);
            llvm::report_fatal_error((uint64_t)v71, 1);
          }
          v35 = "0x7000001e";
        }
        break;
    }
  }
  sub_1C4816AD8(a4, v35);
  if (*((_DWORD *)this + 59))
  {
    v43 = sub_1C4816AD8(a4, ",");
    llvm::raw_ostream::operator<<(v43, *((unsigned int *)this + 59));
  }
  if ((*((_BYTE *)this + 229) & 2) != 0)
  {
    sub_1C4816AD8(a4, ",");
    v47 = (_BYTE *)(*((_QWORD *)this + 30) & 0xFFFFFFFFFFFFFFF8);
    if ((*v47 & 4) != 0)
    {
      v53 = (_QWORD *)*((_QWORD *)v47 - 1);
      v54 = *v53;
      v48 = (unsigned __int8 *)(v53 + 2);
      v49 = v54;
    }
    else
    {
      v48 = 0;
      v49 = 0;
    }
    sub_1C59510DC(a4, v48, v49);
    if ((*((_BYTE *)this + 240) & 4) != 0)
      sub_1C4816AD8(a4, ",comdat");
  }
  if ((*((_BYTE *)this + 228) & 0x80) != 0)
  {
    sub_1C4816AD8(a4, ",");
    v50 = (_BYTE *)*((_QWORD *)this + 31);
    if (v50)
    {
      if ((*v50 & 4) != 0)
      {
        v56 = (_QWORD *)*((_QWORD *)v50 - 1);
        v57 = *v56;
        v51 = (unsigned __int8 *)(v56 + 2);
        v52 = v57;
      }
      else
      {
        v51 = 0;
        v52 = 0;
      }
      sub_1C59510DC(a4, v51, v52);
    }
    else
    {
      v55 = (_BYTE *)*((_QWORD *)a4 + 4);
      if ((unint64_t)v55 >= *((_QWORD *)a4 + 3))
      {
        llvm::raw_ostream::write(a4, 48);
      }
      else
      {
        *((_QWORD *)a4 + 4) = v55 + 1;
        *v55 = 48;
      }
    }
  }
  if (*((_DWORD *)this + 58) != -1)
  {
    v44 = sub_1C4816AD8(a4, ",unique,");
    llvm::raw_ostream::operator<<(v44, *((unsigned int *)this + 58));
  }
  v45 = (_BYTE *)*((_QWORD *)a4 + 4);
  if ((unint64_t)v45 >= *((_QWORD *)a4 + 3))
  {
    llvm::raw_ostream::write(a4, 10);
  }
  else
  {
    *((_QWORD *)a4 + 4) = v45 + 1;
    *v45 = 10;
  }
  if (!a5)
    return;
  sub_1C4816AD8(a4, "\t.subsection\t");
  llvm::MCExpr::print((uint64_t)a5);
LABEL_138:
  v46 = (_BYTE *)*((_QWORD *)a4 + 4);
  if ((unint64_t)v46 >= *((_QWORD *)a4 + 3))
  {
LABEL_141:
    llvm::raw_ostream::write(a4, 10);
    return;
  }
  *((_QWORD *)a4 + 4) = v46 + 1;
  *v46 = 10;
}

uint64_t llvm::MCSectionELF::useCodeAlign(llvm::MCSectionELF *this)
{
  return (*((unsigned __int8 *)this + 228) >> 2) & 1;
}

BOOL llvm::MCSectionELF::isVirtualSection(llvm::MCSectionELF *this)
{
  return *((_DWORD *)this + 56) == 8;
}

const char *llvm::MCSectionELF::getVirtualSectionKind(llvm::MCSectionELF *this)
{
  return "SHT_NOBITS";
}

llvm::raw_ostream *llvm::MCSectionMachO::printSwitchToSection(llvm::MCSectionMachO *this, const llvm::MCAsmInfo *a2, const llvm::Triple *a3, llvm::raw_ostream *a4, const llvm::MCExpr *a5)
{
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  _QWORD *v10;
  size_t v11;
  const void *v12;
  unint64_t v13;
  llvm::raw_ostream *result;
  int v15;
  char **v16;
  size_t v17;
  _BYTE *v18;
  unint64_t v19;
  BOOL v20;
  char *v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  char *v28;
  _QWORD *v29;
  size_t v30;
  const void *v31;
  void *v32;
  llvm::raw_ostream *v33;
  const void *v34;
  size_t v35;
  void *v36;
  unint64_t v37;
  llvm::raw_ostream *v38;

  v7 = sub_1C4816AD8(a4, "\t.section\t");
  v8 = v7;
  if (*((_BYTE *)this + 239))
  {
    v10 = (_QWORD *)((char *)v7 + 32);
    v9 = (_BYTE *)*((_QWORD *)v7 + 4);
    v11 = 16;
    if (*((_QWORD *)v8 + 3) - (_QWORD)v9 <= 0xFuLL)
    {
LABEL_3:
      llvm::raw_ostream::write(v8, (const char *)this + 224, v11);
      v9 = (_BYTE *)*((_QWORD *)v8 + 4);
      goto LABEL_4;
    }
LABEL_17:
    memcpy(v9, (char *)this + 224, v11);
    v9 = (_BYTE *)(*v10 + v11);
    *v10 = v9;
    goto LABEL_4;
  }
  v11 = strlen((const char *)this + 224);
  v10 = (_QWORD *)((char *)v8 + 32);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (v11 > *((_QWORD *)v8 + 3) - (_QWORD)v9)
    goto LABEL_3;
  if (v11)
    goto LABEL_17;
LABEL_4:
  if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
  {
    v8 = llvm::raw_ostream::write(v8, 44);
  }
  else
  {
    *((_QWORD *)v8 + 4) = v9 + 1;
    *v9 = 44;
  }
  v12 = (const void *)*((_QWORD *)this + 25);
  v13 = *((_QWORD *)this + 26);
  result = (llvm::raw_ostream *)*((_QWORD *)v8 + 4);
  if (v13 <= *((_QWORD *)v8 + 3) - (_QWORD)result)
  {
    if (v13)
    {
      result = (llvm::raw_ostream *)memcpy(result, v12, *((_QWORD *)this + 26));
      *((_QWORD *)v8 + 4) += v13;
    }
  }
  else
  {
    result = llvm::raw_ostream::write(v8, (const char *)v12, *((_QWORD *)this + 26));
  }
  v15 = *((_DWORD *)this + 60);
  if (!v15)
    goto LABEL_48;
  v16 = &(&off_1E8182188)[4 * *((_DWORD *)this + 60)];
  v17 = (size_t)v16[1];
  v19 = *((_QWORD *)a4 + 3);
  v18 = (_BYTE *)*((_QWORD *)a4 + 4);
  v20 = (unint64_t)v18 >= v19;
  if (!v17)
    goto LABEL_50;
  if ((unint64_t)v18 >= v19)
  {
    llvm::raw_ostream::write(a4, 44);
  }
  else
  {
    *((_QWORD *)a4 + 4) = v18 + 1;
    *v18 = 44;
  }
  v21 = *v16;
  v22 = (void *)*((_QWORD *)a4 + 4);
  if (v17 <= *((_QWORD *)a4 + 3) - (_QWORD)v22)
  {
    result = (llvm::raw_ostream *)memcpy(v22, v21, v17);
    *((_QWORD *)a4 + 4) += v17;
  }
  else
  {
    result = llvm::raw_ostream::write(a4, v21, v17);
  }
  v23 = v15 & 0xFFFFFF00;
  if ((v15 & 0xFFFFFF00) != 0)
  {
    v24 = 0;
    v25 = 44;
    do
    {
      v26 = v24 + 40;
      if (v24 == 400)
        break;
      v27 = *(int *)((char *)dword_1E8182448 + v24);
      if ((v27 & v23) != 0)
      {
        v28 = (char *)*((_QWORD *)a4 + 4);
        if ((unint64_t)v28 >= *((_QWORD *)a4 + 3))
        {
          llvm::raw_ostream::write(a4, v25);
        }
        else
        {
          *((_QWORD *)a4 + 4) = v28 + 1;
          *v28 = v25;
        }
        v23 &= ~v27;
        v29 = (_QWORD *)((char *)dword_1E8182448 + v24);
        v30 = *(_QWORD *)((char *)&dword_1E8182448[4] + v24);
        if (v30)
        {
          v31 = (const void *)v29[1];
          v32 = (void *)*((_QWORD *)a4 + 4);
          if (v30 <= *((_QWORD *)a4 + 3) - (_QWORD)v32)
          {
            result = (llvm::raw_ostream *)memcpy(v32, v31, v30);
            *((_QWORD *)a4 + 4) += v30;
          }
          else
          {
            result = llvm::raw_ostream::write(a4, (const char *)v31, v30);
          }
        }
        else
        {
          v33 = sub_1C4816AD8(a4, "<<");
          v34 = (const void *)v29[3];
          v35 = v29[4];
          v36 = (void *)*((_QWORD *)v33 + 4);
          if (v35 <= *((_QWORD *)v33 + 3) - (_QWORD)v36)
          {
            if (v35)
            {
              memcpy(v36, v34, v35);
              *((_QWORD *)v33 + 4) += v35;
            }
          }
          else
          {
            llvm::raw_ostream::write(v33, (const char *)v34, v35);
          }
          result = sub_1C4816AD8(v33, ">>");
        }
        v25 = 43;
      }
      v24 = v26;
    }
    while (v23);
    v37 = *((_QWORD *)a4 + 3);
    v18 = (_BYTE *)*((_QWORD *)a4 + 4);
    if (!*((_DWORD *)this + 61))
      goto LABEL_49;
    if ((unint64_t)v18 >= v37)
    {
      v38 = llvm::raw_ostream::write(a4, 44);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v18 + 1;
      *v18 = 44;
      v38 = a4;
    }
    goto LABEL_47;
  }
  if (*((_DWORD *)this + 61))
  {
    v38 = sub_1C4816AD8(a4, ",none,");
LABEL_47:
    result = llvm::raw_ostream::operator<<(v38, *((unsigned int *)this + 61));
  }
LABEL_48:
  v37 = *((_QWORD *)a4 + 3);
  v18 = (_BYTE *)*((_QWORD *)a4 + 4);
LABEL_49:
  v20 = (unint64_t)v18 >= v37;
LABEL_50:
  if (v20)
    return llvm::raw_ostream::write(a4, 10);
  *((_QWORD *)a4 + 4) = v18 + 1;
  *v18 = 10;
  return result;
}

void llvm::MCSectionWasm::printSwitchToSection(llvm::MCSectionWasm *this, const llvm::MCAsmInfo *a2, const llvm::Triple *a3, llvm::raw_ostream *a4, const llvm::MCExpr *a5)
{
  _BYTE *v9;
  _BYTE *v10;
  const void *v11;
  size_t v12;
  _BYTE *v13;
  unint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  char *v20;
  unint64_t v21;
  char v22;
  llvm::raw_ostream *v23;
  char v24;
  _BYTE *v25;
  unsigned __int8 *v26;
  int64_t v27;
  _QWORD *v28;
  int64_t v29;
  llvm::raw_ostream *v30;
  _BYTE *v31;
  _BYTE *v32;

  if ((*(unsigned int (**)(const llvm::MCAsmInfo *, _QWORD, _QWORD))(*(_QWORD *)a2 + 64))(a2, *((_QWORD *)this + 25), *((_QWORD *)this + 26)))
  {
    v9 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v9 >= *((_QWORD *)a4 + 3))
    {
      llvm::raw_ostream::write(a4, 9);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v9 + 1;
      *v9 = 9;
    }
    v11 = (const void *)*((_QWORD *)this + 25);
    v12 = *((_QWORD *)this + 26);
    v13 = (_BYTE *)*((_QWORD *)a4 + 4);
    if (v12 <= *((_QWORD *)a4 + 3) - (_QWORD)v13)
    {
      if (v12)
      {
        memcpy(v13, v11, v12);
        v13 = (_BYTE *)(*((_QWORD *)a4 + 4) + v12);
        *((_QWORD *)a4 + 4) = v13;
      }
    }
    else
    {
      llvm::raw_ostream::write(a4, (const char *)v11, v12);
      v13 = (_BYTE *)*((_QWORD *)a4 + 4);
    }
    v14 = *((_QWORD *)a4 + 3);
    if (a5)
    {
      if ((unint64_t)v13 >= v14)
      {
        llvm::raw_ostream::write(a4, 9);
      }
      else
      {
        *((_QWORD *)a4 + 4) = v13 + 1;
        *v13 = 9;
      }
      llvm::MCExpr::print((uint64_t)a5);
      v14 = *((_QWORD *)a4 + 3);
      v13 = (_BYTE *)*((_QWORD *)a4 + 4);
    }
    if ((unint64_t)v13 < v14)
    {
      *((_QWORD *)a4 + 4) = v13 + 1;
      *v13 = 10;
      return;
    }
LABEL_60:
    llvm::raw_ostream::write(a4, 10);
    return;
  }
  sub_1C4816AD8(a4, "\t.section\t");
  sub_1C59510DC(a4, *((unsigned __int8 **)this + 25), *((_QWORD *)this + 26));
  sub_1C4816AD8(a4, ",\"");
  if (*((_BYTE *)this + 252))
  {
    v10 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)a4 + 3))
    {
      llvm::raw_ostream::write(a4, 112);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v10 + 1;
      *v10 = 112;
    }
  }
  if (*((_QWORD *)this + 29))
  {
    v15 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v15 >= *((_QWORD *)a4 + 3))
    {
      llvm::raw_ostream::write(a4, 71);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v15 + 1;
      *v15 = 71;
    }
  }
  if ((*((_BYTE *)this + 256) & 1) != 0)
  {
    v17 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v17 >= *((_QWORD *)a4 + 3))
    {
      llvm::raw_ostream::write(a4, 83);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v17 + 1;
      *v17 = 83;
    }
  }
  if ((*((_BYTE *)this + 256) & 2) != 0)
  {
    v18 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v18 >= *((_QWORD *)a4 + 3))
    {
      llvm::raw_ostream::write(a4, 84);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v18 + 1;
      *v18 = 84;
    }
  }
  v16 = (_BYTE *)*((_QWORD *)a4 + 4);
  if ((unint64_t)v16 >= *((_QWORD *)a4 + 3))
  {
    llvm::raw_ostream::write(a4, 34);
  }
  else
  {
    *((_QWORD *)a4 + 4) = v16 + 1;
    *v16 = 34;
  }
  v19 = (_BYTE *)*((_QWORD *)a4 + 4);
  if ((unint64_t)v19 >= *((_QWORD *)a4 + 3))
  {
    llvm::raw_ostream::write(a4, 44);
  }
  else
  {
    *((_QWORD *)a4 + 4) = v19 + 1;
    *v19 = 44;
  }
  v21 = *((_QWORD *)a4 + 3);
  v20 = (char *)*((_QWORD *)a4 + 4);
  if (**((_BYTE **)a2 + 6) == 64)
  {
    if ((unint64_t)v20 < v21)
    {
      *((_QWORD *)a4 + 4) = v20 + 1;
      v22 = 37;
LABEL_42:
      *v20 = v22;
      goto LABEL_48;
    }
    v23 = a4;
    v24 = 37;
  }
  else
  {
    if ((unint64_t)v20 < v21)
    {
      *((_QWORD *)a4 + 4) = v20 + 1;
      v22 = 64;
      goto LABEL_42;
    }
    v23 = a4;
    v24 = 64;
  }
  llvm::raw_ostream::write(v23, v24);
LABEL_48:
  if (*((_QWORD *)this + 29))
  {
    sub_1C4816AD8(a4, ",");
    v25 = (_BYTE *)*((_QWORD *)this + 29);
    if ((*v25 & 4) != 0)
    {
      v28 = (_QWORD *)*((_QWORD *)v25 - 1);
      v29 = *v28;
      v26 = (unsigned __int8 *)(v28 + 2);
      v27 = v29;
    }
    else
    {
      v26 = 0;
      v27 = 0;
    }
    sub_1C59510DC(a4, v26, v27);
    sub_1C4816AD8(a4, ",comdat");
  }
  if (*((_DWORD *)this + 56) != -1)
  {
    v30 = sub_1C4816AD8(a4, ",unique,");
    llvm::raw_ostream::operator<<(v30, *((unsigned int *)this + 56));
  }
  v31 = (_BYTE *)*((_QWORD *)a4 + 4);
  if ((unint64_t)v31 >= *((_QWORD *)a4 + 3))
  {
    llvm::raw_ostream::write(a4, 10);
  }
  else
  {
    *((_QWORD *)a4 + 4) = v31 + 1;
    *v31 = 10;
  }
  if (a5)
  {
    sub_1C4816AD8(a4, "\t.subsection\t");
    llvm::MCExpr::print((uint64_t)a5);
    v32 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v32 < *((_QWORD *)a4 + 3))
    {
      *((_QWORD *)a4 + 4) = v32 + 1;
      *v32 = 10;
      return;
    }
    goto LABEL_60;
  }
}

uint64_t llvm::MCSectionWasm::useCodeAlign(llvm::MCSectionWasm *this)
{
  return 0;
}

uint64_t llvm::MCSectionWasm::isVirtualSection(llvm::MCSectionWasm *this)
{
  return 0;
}

llvm::raw_ostream *llvm::MCSectionXCOFF::printCsectDirective(llvm::MCSectionXCOFF *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v3;
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *result;
  _BYTE *v8;
  size_t *v9;
  const void *v10;
  size_t v11;
  size_t v12;
  void *v13;

  v3 = sub_1C4816AD8(a2, "\t.csect ");
  v4 = v3;
  v5 = (_BYTE *)*((_QWORD *)this + 29);
  if ((*v5 & 4) != 0)
  {
    v9 = (size_t *)*((_QWORD *)v5 - 1);
    v12 = *v9;
    v10 = v9 + 2;
    v11 = v12;
    v13 = (void *)*((_QWORD *)v3 + 4);
    if (v12 <= *((_QWORD *)v4 + 3) - (_QWORD)v13)
    {
      if (v11)
      {
        memcpy(v13, v10, v11);
        *((_QWORD *)v4 + 4) += v11;
      }
    }
    else
    {
      llvm::raw_ostream::write(v4, (const char *)v10, v11);
    }
  }
  v6 = sub_1C4816AD8(v4, ",");
  result = llvm::raw_ostream::operator<<(v6, 31 - __clz(1 << *((_BYTE *)this + 24)));
  v8 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v8 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v8 + 1;
  *v8 = 10;
  return result;
}

unsigned __int8 *llvm::MCSectionXCOFF::printSwitchToSection(unsigned __int8 *this, const llvm::MCAsmInfo *a2, const llvm::Triple *a3, llvm::raw_ostream *a4, const llvm::MCExpr *a5)
{
  llvm::raw_ostream *v5;
  unsigned __int8 *v6;
  int v7;
  llvm::raw_ostream *v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  unsigned int v14;
  const void *v15;
  size_t v16;
  const void *v17;
  size_t v18;
  _BYTE *v19;
  int v20;
  char *v22;
  _QWORD v23[3];

  v5 = a4;
  v6 = this;
  v7 = this[220];
  if ((v7 & 0xFE) == 2)
  {
    if (this[224])
    {
      v22 = "Unhandled storage-mapping class for .text csect";
      goto LABEL_44;
    }
    return (unsigned __int8 *)llvm::MCSectionXCOFF::printCsectDirective((llvm::MCSectionXCOFF *)this, a4);
  }
  if ((v7 & 0xFC) == 8 || (v7 & 0xFC) == 4)
  {
    v20 = this[224];
    if (v20 != 1 && v20 != 16)
    {
      v22 = "Unhandled storage-mapping class for .rodata csect.";
      goto LABEL_44;
    }
    return (unsigned __int8 *)llvm::MCSectionXCOFF::printCsectDirective((llvm::MCSectionXCOFF *)this, a4);
  }
  if (v7 == 19)
  {
    v14 = this[224];
    if (v14 > 0x16)
      goto LABEL_48;
    if (((1 << v14) & 0x400008) != 0)
      return this;
    if (v14 == 15)
      return (unsigned __int8 *)sub_1C4816AD8(a4, "\t.toc\n");
    if (((1 << v14) & 0x10420) == 0)
    {
LABEL_48:
      v22 = "Unhandled storage-mapping class for .data csect.";
      goto LABEL_44;
    }
    return (unsigned __int8 *)llvm::MCSectionXCOFF::printCsectDirective((llvm::MCSectionXCOFF *)this, a4);
  }
  if (v7 == 13)
  {
    if (this[224] != 20)
    {
      v22 = "Unhandled storage-mapping class for .tdata csect.";
      goto LABEL_44;
    }
    return (unsigned __int8 *)llvm::MCSectionXCOFF::printCsectDirective((llvm::MCSectionXCOFF *)this, a4);
  }
  if (!this[226])
    goto LABEL_11;
  if (this[224] == 16)
    return (unsigned __int8 *)llvm::MCSectionXCOFF::printCsectDirective((llvm::MCSectionXCOFF *)this, a4);
  if (this[225] == 3)
    return this;
LABEL_11:
  if ((v7 & 0xFFFFFFFD) == 0xC)
    return (unsigned __int8 *)llvm::MCSectionXCOFF::printCsectDirective((llvm::MCSectionXCOFF *)this, a4);
  if (this[220] || !this[260])
  {
    v22 = "Printing for this SectionKind is unimplemented.";
LABEL_44:
    llvm::report_fatal_error((llvm *)v22, (const char *)1);
  }
  v10 = sub_1C4816AD8(a4, "\n\t.dwsect ");
  v11 = *((unsigned int *)v6 + 64);
  v23[0] = &off_1E8182670;
  v23[1] = "0x%x";
  v23[2] = v11;
  v12 = llvm::raw_ostream::operator<<(v10, (uint64_t)v23);
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 10);
  }
  else
  {
    *((_QWORD *)v12 + 4) = v13 + 1;
    *v13 = 10;
  }
  v15 = (const void *)*((_QWORD *)a2 + 13);
  v16 = *((_QWORD *)a2 + 14);
  this = (unsigned __int8 *)*((_QWORD *)v5 + 4);
  if (v16 <= *((_QWORD *)v5 + 3) - (_QWORD)this)
  {
    if (v16)
    {
      memcpy(this, v15, v16);
      this = (unsigned __int8 *)(*((_QWORD *)v5 + 4) + v16);
      *((_QWORD *)v5 + 4) = this;
    }
  }
  else
  {
    llvm::raw_ostream::write(v5, (const char *)v15, v16);
    this = (unsigned __int8 *)*((_QWORD *)v5 + 4);
  }
  v17 = (const void *)*((_QWORD *)v6 + 25);
  v18 = *((_QWORD *)v6 + 26);
  if (v18 <= *((_QWORD *)v5 + 3) - (_QWORD)this)
  {
    if (v18)
    {
      memcpy(this, v17, v18);
      this = (unsigned __int8 *)(*((_QWORD *)v5 + 4) + v18);
      *((_QWORD *)v5 + 4) = this;
    }
  }
  else
  {
    llvm::raw_ostream::write(v5, (const char *)v17, v18);
    this = (unsigned __int8 *)*((_QWORD *)v5 + 4);
  }
  if ((unint64_t)this >= *((_QWORD *)v5 + 3))
  {
    this = (unsigned __int8 *)llvm::raw_ostream::write(v5, 58);
    v5 = (llvm::raw_ostream *)this;
  }
  else
  {
    *((_QWORD *)v5 + 4) = this + 1;
    *this = 58;
  }
  v19 = (_BYTE *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v19 >= *((_QWORD *)v5 + 3))
    return (unsigned __int8 *)llvm::raw_ostream::write(v5, 10);
  *((_QWORD *)v5 + 4) = v19 + 1;
  *v19 = 10;
  return this;
}

BOOL llvm::MCSectionXCOFF::useCodeAlign(llvm::MCSectionXCOFF *this)
{
  return (*((_DWORD *)this + 55) & 0xFE) == 2;
}

BOOL llvm::MCSectionXCOFF::isVirtualSection(llvm::MCSectionXCOFF *this)
{
  return !*((_BYTE *)this + 260) && *((_BYTE *)this + 225) == 3;
}

uint64_t sub_1C62BF740(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16));
}

_QWORD *llvm::MCTargetStreamer::MCTargetStreamer(_QWORD *this, llvm::MCStreamer *a2)
{
  uint64_t v2;
  _QWORD *v3;

  *this = &off_1E8182690;
  this[1] = a2;
  v2 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = this;
  if (v2)
  {
    v3 = this;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    return v3;
  }
  return this;
}

void llvm::MCTargetStreamer::~MCTargetStreamer(llvm::MCTargetStreamer *this)
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::MCTargetStreamer::changeSection(llvm::MCTargetStreamer *this, const llvm::MCSection *a2, llvm::MCSection *a3, const llvm::MCExpr *a4, llvm::raw_ostream *a5)
{
  return (**(uint64_t (***)(llvm::MCSection *, _QWORD, uint64_t, llvm::raw_ostream *, const llvm::MCExpr *))a3)(a3, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 152), *(_QWORD *)(*((_QWORD *)this + 1) + 8) + 24, a5, a4);
}

void llvm::MCTargetStreamer::emitDwarfFileDirective(uint64_t a1, const char *a2, const char *a3)
{
  llvm::MCStreamer *v3;
  const char *v4[4];
  __int16 v5;

  v3 = *(llvm::MCStreamer **)(a1 + 8);
  v5 = 261;
  v4[0] = a2;
  v4[1] = a3;
  llvm::MCStreamer::emitRawText(v3, v4);
}

void llvm::MCStreamer::emitRawText(llvm::MCStreamer *this, const char **a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  _QWORD v7[17];

  v7[16] = *MEMORY[0x1E0C80C00];
  v5 = v7;
  v6 = xmmword_1C85F20B0;
  v3 = sub_1C50561CC(a2, (uint64_t)&v5);
  (*(void (**)(llvm::MCStreamer *, const char *, uint64_t))(*(_QWORD *)this + 32))(this, v3, v4);
  if (v5 != v7)
    free(v5);
}

void llvm::MCTargetStreamer::emitValue(llvm::MCTargetStreamer *this, const llvm::MCExpr *a2)
{
  llvm::MCStreamer *v4;
  const char *v5;
  const char *v6;
  const char *v7[4];
  __int16 v8;
  void (**v9)(llvm::raw_ostream *__hidden);
  uint64_t v10;
  int v11;
  const char **v12;
  void *v13;
  __int128 v14;
  _QWORD v15[17];

  v15[16] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = xmmword_1C85F20B0;
  sub_1C613932C((uint64_t)&v9, (uint64_t)&v13);
  llvm::MCExpr::print((uint64_t)a2);
  v4 = (llvm::MCStreamer *)*((_QWORD *)this + 1);
  v6 = *v12;
  v5 = v12[1];
  v8 = 261;
  v7[0] = v6;
  v7[1] = v5;
  llvm::MCStreamer::emitRawText(v4, v7);
  v9 = off_1E81A6E70;
  if (v11 == 1 && v10)
    MEMORY[0x1CAA32F9C](v10, 0x1000C8077774924);
  if (v13 != v15)
    free(v13);
}

void llvm::MCTargetStreamer::emitRawBytes(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  char *v6;
  unint64_t v7;
  llvm::raw_ostream *v8;
  llvm::MCStreamer *v9;
  const char *v10;
  const char *v11;
  const char *v12[4];
  __int16 v13;
  _QWORD v14[2];
  uint64_t v15;
  int v16;
  const char **v17;
  void *v18;
  __int128 v19;
  _QWORD v20[17];

  v20[16] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v3 = a3;
    v6 = *(char **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 152) + 248);
    do
    {
      v7 = *a2;
      v18 = v20;
      v19 = xmmword_1C85F20B0;
      sub_1C613932C((uint64_t)v14, (uint64_t)&v18);
      v8 = sub_1C4816AD8((llvm::raw_ostream *)v14, v6);
      sub_1C5E21910(v8, v7, 0, 0, 0);
      v9 = *(llvm::MCStreamer **)(a1 + 8);
      v11 = *v17;
      v10 = v17[1];
      v13 = 261;
      v12[0] = v11;
      v12[1] = v10;
      llvm::MCStreamer::emitRawText(v9, v12);
      v14[0] = off_1E81A6E70;
      if (v16 == 1 && v15)
        MEMORY[0x1CAA32F9C](v15, 0x1000C8077774924);
      if (v18 != v20)
        free(v18);
      ++a2;
      --v3;
    }
    while (v3);
  }
}

llvm::MCStreamer *llvm::MCStreamer::MCStreamer(llvm::MCStreamer *this, llvm::MCContext *a2)
{
  _QWORD *v3;
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  _OWORD v8[2];

  *(_QWORD *)this = off_1E81826F8;
  *((_QWORD *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 92) = 0u;
  *((_QWORD *)this + 14) = (char *)this + 128;
  v3 = (_QWORD *)((char *)this + 112);
  *((_QWORD *)this + 15) = 0x400000000;
  *((_QWORD *)this + 32) = 0;
  *(_QWORD *)((char *)this + 262) = 0;
  memset(v8, 0, sizeof(v8));
  v4 = (_OWORD *)sub_1C47C0F60((uint64_t)this + 112, (unint64_t)v8, 1);
  v5 = (_OWORD *)(*v3 + 32 * *((unsigned int *)this + 30));
  v6 = v4[1];
  *v5 = *v4;
  v5[1] = v6;
  ++*((_DWORD *)this + 30);
  return this;
}

void llvm::MCStreamer::~MCStreamer(llvm::MCStreamer *this)
{
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;

  *(_QWORD *)this = off_1E81826F8;
  v2 = (char *)*((_QWORD *)this + 14);
  if (v2 != (char *)this + 128)
    free(v2);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 11), 8);
  v3 = (_QWORD *)*((_QWORD *)this + 6);
  if (v3)
  {
    sub_1C59548BC((uint64_t)this + 48, v3);
    operator delete(*((void **)this + 6));
  }
  v5 = (void **)((char *)this + 24);
  sub_1C593A2C0(&v5);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t llvm::MCStreamer::generateCompactUnwindEncodings(uint64_t this, llvm::MCAsmBackend *a2)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(this + 24);
  for (i = *(_QWORD *)(this + 32); v2 != i; v2 += 88)
  {
    if (a2)
      this = (*(uint64_t (**)(llvm::MCAsmBackend *))(*(_QWORD *)a2 + 216))(a2);
    else
      this = 0;
    *(_DWORD *)(v2 + 68) = this;
  }
  return this;
}

void llvm::MCStreamer::emitDTPRel64Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
  llvm::report_fatal_error((llvm *)"unsupported directive in streamer", (const char *)1);
}

void llvm::MCStreamer::emitDTPRel32Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
  llvm::report_fatal_error((llvm *)"unsupported directive in streamer", (const char *)1);
}

void llvm::MCStreamer::emitTPRel64Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
  llvm::report_fatal_error((llvm *)"unsupported directive in streamer", (const char *)1);
}

void llvm::MCStreamer::emitTPRel32Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
  llvm::report_fatal_error((llvm *)"unsupported directive in streamer", (const char *)1);
}

void llvm::MCStreamer::emitGPRel64Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
  llvm::report_fatal_error((llvm *)"unsupported directive in streamer", (const char *)1);
}

void llvm::MCStreamer::emitGPRel32Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
  llvm::report_fatal_error((llvm *)"unsupported directive in streamer", (const char *)1);
}

uint64_t llvm::MCStreamer::emitFill(llvm::MCStreamer *this, uint64_t a2, unsigned int a3)
{
  unint64_t v6;

  v6 = sub_1C484358C(*((_QWORD *)this + 1) + 192, 24, 3);
  *(_BYTE *)v6 = 1;
  *(_DWORD *)(v6 + 1) = *(unsigned __int8 *)(v6 + 4) << 24;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  return (*(uint64_t (**)(llvm::MCStreamer *, unint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 608))(this, v6, a3, 0);
}

uint64_t llvm::MCStreamer::emitCFIBKeyFrame(llvm::MCStreamer *this)
{
  uint64_t result;

  result = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (result)
    *(_BYTE *)(result + 80) = 1;
  return result;
}

BOOL llvm::MCStreamer::EmitCVFileDirective(uint64_t a1, unsigned int a2, unsigned __int8 *a3, size_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v14;

  llvm::MCContext::getCVContext(*(llvm::MCContext **)(a1 + 8));
  return llvm::CodeViewContext::addFile(v14, a1, a2, a3, a4, a5, a6, a7);
}

BOOL llvm::MCStreamer::EmitCVFuncIdDirective(llvm::MCContext **this, unsigned int a2)
{
  llvm::CodeViewContext *v3;

  llvm::MCContext::getCVContext(this[1]);
  return llvm::CodeViewContext::recordFunctionId(v3, a2);
}

BOOL llvm::MCStreamer::EmitCVInlineSiteIdDirective(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, uint64_t a7)
{
  llvm::CodeViewContext *v14;
  _DWORD *CVFunctionInfo;
  llvm::MCContext *v16;
  llvm::CodeViewContext *v17;
  const char *v19;
  __int16 v20;

  llvm::MCContext::getCVContext(*(llvm::MCContext **)(a1 + 8));
  CVFunctionInfo = llvm::CodeViewContext::getCVFunctionInfo(v14, a3);
  v16 = *(llvm::MCContext **)(a1 + 8);
  if (CVFunctionInfo)
  {
    llvm::MCContext::getCVContext(v16);
    return llvm::CodeViewContext::recordInlinedCallSiteId(v17, a2, a3, a4, a5, a6);
  }
  else
  {
    v19 = "parent function id not introduced by .cv_func_id or .cv_inline_site_id";
    v20 = 259;
    llvm::MCContext::reportError((uint64_t)v16, a7, (uint64_t)&v19);
    return 1;
  }
}

uint64_t llvm::MCStreamer::checkCVLocSection(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  llvm::CodeViewContext *v7;
  _DWORD *CVFunctionInfo;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  __int16 v16;

  llvm::MCContext::getCVContext(*(llvm::MCContext **)(a1 + 8));
  CVFunctionInfo = llvm::CodeViewContext::getCVFunctionInfo(v7, a2);
  if (!CVFunctionInfo)
  {
    v13 = *(_QWORD *)(a1 + 8);
    v14 = "function id not introduced by .cv_func_id or .cv_inline_site_id";
    goto LABEL_13;
  }
  v9 = *((_QWORD *)CVFunctionInfo + 2);
  v10 = *(unsigned int *)(a1 + 120);
  if (!v9)
  {
    if ((_DWORD)v10)
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v10 - 32);
    else
      v12 = 0;
    *((_QWORD *)CVFunctionInfo + 2) = v12;
    return 1;
  }
  if (!(_DWORD)v10 || v9 != *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v10 - 32))
  {
    v13 = *(_QWORD *)(a1 + 8);
    v14 = "all .cv_loc directives for a function must be in the same section";
LABEL_13:
    v15 = v14;
    v16 = 259;
    llvm::MCContext::reportError(v13, a4, (uint64_t)&v15);
    return 0;
  }
  return 1;
}

void llvm::MCStreamer::emitCVDefRangeDirective(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  __int128 v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v8 = v10;
  v9 = xmmword_1C69DD250;
  sub_1C593A164(&v8, 0xAuLL);
  *(_WORD *)v8 = 4421;
  *(_QWORD *)((char *)v8 + 2) = a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a1 + 760))(a1, a2, a3, v8, v9);
  if (v8 != v10)
    free(v8);
}

{
  void *v8;
  __int128 v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v8 = v10;
  v9 = xmmword_1C69DD250;
  sub_1C593A164(&v8, 0xAuLL);
  *(_WORD *)v8 = 4419;
  *(_QWORD *)((char *)v8 + 2) = a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a1 + 760))(a1, a2, a3, v8, v9);
  if (v8 != v10)
    free(v8);
}

void llvm::MCStreamer::emitCVDefRangeDirective(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  void *v8;
  __int128 v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v8 = v10;
  v9 = xmmword_1C69DD250;
  sub_1C593A164(&v8, 6uLL);
  *(_WORD *)v8 = 4417;
  *(_DWORD *)((char *)v8 + 2) = a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a1 + 760))(a1, a2, a3, v8, v9);
  if (v8 != v10)
    free(v8);
}

{
  void *v8;
  __int128 v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v8 = v10;
  v9 = xmmword_1C69DD250;
  sub_1C593A164(&v8, 6uLL);
  *(_WORD *)v8 = 4418;
  *(_DWORD *)((char *)v8 + 2) = a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a1 + 760))(a1, a2, a3, v8, v9);
  if (v8 != v10)
    free(v8);
}

_QWORD *llvm::MCStreamer::AssignFragment(llvm::MCStreamer *this, llvm::MCSymbol *a2, unint64_t a3)
{
  int v3;
  _QWORD *result;
  llvm::MCSymbol *v5;

  v5 = a2;
  *(_QWORD *)a2 = *(_QWORD *)a2 & 7 | a3;
  v3 = *((_DWORD *)this + 24) + 1;
  result = sub_1C62B452C((uint64_t *)this + 11, &v5);
  *((_DWORD *)result + 2) = v3;
  return result;
}

void llvm::MCStreamer::emitCFIEndProcImpl(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = 1;
}

uint64_t llvm::MCStreamer::emitCFILabel(llvm::MCStreamer *this)
{
  return 1;
}

uint64_t llvm::MCStreamer::emitCFIPersonality(llvm::MCStreamer *this, const llvm::MCSymbol *a2, int a3)
{
  uint64_t result;

  result = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (result)
  {
    *(_QWORD *)(result + 16) = a2;
    *(_DWORD *)(result + 60) = a3;
  }
  return result;
}

uint64_t llvm::MCStreamer::emitCFILsda(llvm::MCStreamer *this, const llvm::MCSymbol *a2, int a3)
{
  uint64_t result;

  result = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (result)
  {
    *(_QWORD *)(result + 24) = a2;
    *(_DWORD *)(result + 64) = a3;
  }
  return result;
}

uint64_t llvm::MCStreamer::emitCFISignalFrame(llvm::MCStreamer *this)
{
  uint64_t result;

  result = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (result)
    *(_BYTE *)(result + 72) = 1;
  return result;
}

uint64_t llvm::MCStreamer::emitCFIReturnColumn(llvm::MCStreamer *this, int a2)
{
  uint64_t result;

  result = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (result)
    *(_DWORD *)(result + 76) = a2;
  return result;
}

uint64_t llvm::MCStreamer::EnsureValidWinFrameInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  const char *v9;
  const char *v10;
  __int16 v11;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 152);
  if (*(_DWORD *)(v4 + 412) != 4 || ((v5 = *(_DWORD *)(v4 + 420), v5 != 6) ? (v6 = v5 == 0) : (v6 = 1), v6))
  {
    v9 = ".seh_* directives are not supported on this target";
LABEL_10:
    v10 = v9;
    v11 = 259;
    llvm::MCContext::reportError(v3, a2, (uint64_t)&v10);
    return 0;
  }
  v7 = *(_QWORD *)(a1 + 72);
  if (!v7 || *(_QWORD *)(v7 + 8))
  {
    v9 = ".seh_ directive must appear within an active frame";
    goto LABEL_10;
  }
  return v7;
}

uint64_t llvm::MCStreamer::EmitWinCFIStartProc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[4];
  __int16 v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 152);
  if (*(_DWORD *)(v5 + 412) != 4 || ((v6 = *(_DWORD *)(v5 + 420), v6 != 6) ? (v7 = v6 == 0) : (v7 = 1), v7))
  {
    v18[0] = (uint64_t)".seh_* directives are not supported on this target";
    v19 = 259;
    return llvm::MCContext::reportError(v4, a3, (uint64_t)v18);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 72);
    if (v9 && !*(_QWORD *)(v9 + 8))
    {
      v18[0] = (uint64_t)"Starting a function before ending the previous one!";
      v19 = 259;
      llvm::MCContext::reportError(v4, a3, (uint64_t)v18);
    }
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    *(_QWORD *)(a1 + 80) = (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3;
    result = operator new();
    *(_QWORD *)result = v10;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = a2;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 63) = 0;
    *(_DWORD *)(result + 72) = -1;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_DWORD *)(result + 128) = 0;
    *(_QWORD *)(result + 144) = 0;
    *(_QWORD *)(result + 152) = 0;
    *(_QWORD *)(result + 136) = 0;
    v18[0] = result;
    v12 = *(uint64_t **)(a1 + 56);
    if ((unint64_t)v12 >= *(_QWORD *)(a1 + 64))
    {
      v13 = sub_1C5954AA0((char **)(a1 + 48), v18);
      result = v18[0];
      *(_QWORD *)(a1 + 56) = v13;
      v18[0] = 0;
      if (result)
      {
        v17 = sub_1C62C14AC(result);
        result = MEMORY[0x1CAA32FC0](v17, 0x1060C401F314DFCLL);
        v13 = *(char **)(a1 + 56);
      }
    }
    else
    {
      *v12 = result;
      v13 = (char *)(v12 + 1);
      *(_QWORD *)(a1 + 56) = v13;
    }
    v14 = *((_QWORD *)v13 - 1);
    *(_QWORD *)(a1 + 72) = v14;
    v15 = *(unsigned int *)(a1 + 120);
    if ((_DWORD)v15)
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v15 - 32);
    else
      v16 = 0;
    *(_QWORD *)(v14 + 56) = v16;
  }
  return result;
}

uint64_t llvm::MCStreamer::EmitWinCFIEndProc(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  __int16 v12;

  result = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a2);
  if (result)
  {
    v5 = (_QWORD *)result;
    if (*(_QWORD *)(result + 80))
    {
      v10 = a1[1];
      v11 = "Not all chained regions terminated!";
      v12 = 259;
      llvm::MCContext::reportError(v10, a2, (uint64_t)&v11);
    }
    v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
    v5[1] = v6;
    if (!v5[2])
      v5[2] = v6;
    v7 = a1[10];
    v8 = a1[7] - a1[6];
    if (v7 != v8 >> 3)
    {
      v9 = v8 >> 3;
      do
        (*(void (**)(_QWORD *, _QWORD))(*a1 + 16))(a1, *(_QWORD *)(a1[6] + 8 * v7++));
      while (v9 != v7);
    }
    return (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 168))(a1, v5[7], 0);
  }
  return result;
}

uint64_t llvm::MCStreamer::EmitWinCFIFuncletOrFuncEnd(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;

  result = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a2);
  if (result)
  {
    v5 = result;
    if (*(_QWORD *)(result + 80))
    {
      v6 = a1[1];
      v7 = "Not all chained regions terminated!";
      v8 = 259;
      llvm::MCContext::reportError(v6, a2, (uint64_t)&v7);
    }
    result = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
    *(_QWORD *)(v5 + 16) = result;
  }
  return result;
}

uint64_t llvm::MCStreamer::EmitWinCFIStartChained(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = llvm::MCStreamer::EnsureValidWinFrameInfo(a1, a2);
  if (result)
  {
    v4 = result;
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    result = operator new();
    v6 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = v5;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 63) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 32) = v6;
    *(_QWORD *)(result + 40) = 0;
    *(_DWORD *)(result + 72) = -1;
    *(_QWORD *)(result + 80) = v4;
    *(_OWORD *)(result + 116) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_QWORD *)(result + 144) = 0;
    *(_QWORD *)(result + 152) = 0;
    *(_QWORD *)(result + 136) = 0;
    v13 = result;
    v7 = *(uint64_t **)(a1 + 56);
    if ((unint64_t)v7 >= *(_QWORD *)(a1 + 64))
    {
      v8 = sub_1C5954AA0((char **)(a1 + 48), &v13);
      result = v13;
      *(_QWORD *)(a1 + 56) = v8;
      v13 = 0;
      if (result)
      {
        v12 = sub_1C62C14AC(result);
        result = MEMORY[0x1CAA32FC0](v12, 0x1060C401F314DFCLL);
        v8 = *(char **)(a1 + 56);
      }
    }
    else
    {
      *v7 = result;
      v8 = (char *)(v7 + 1);
      *(_QWORD *)(a1 + 56) = v8;
    }
    v9 = *((_QWORD *)v8 - 1);
    *(_QWORD *)(a1 + 72) = v9;
    v10 = *(unsigned int *)(a1 + 120);
    if ((_DWORD)v10)
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v10 - 32);
    else
      v11 = 0;
    *(_QWORD *)(v9 + 56) = v11;
  }
  return result;
}

uint64_t llvm::MCStreamer::EmitWinCFIEndChained(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;

  result = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a2);
  if (result)
  {
    v5 = result;
    if (*(_QWORD *)(result + 80))
    {
      result = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
      *(_QWORD *)(v5 + 8) = result;
      a1[9] = *(_QWORD *)(v5 + 80);
    }
    else
    {
      v6 = a1[1];
      v7 = "End of a chained region outside a chained region!";
      v8 = 259;
      return llvm::MCContext::reportError(v6, a2, (uint64_t)&v7);
    }
  }
  return result;
}

uint64_t llvm::MCStreamer::EmitWinEHHandlerData(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  const char *v6;
  __int16 v7;

  result = llvm::MCStreamer::EnsureValidWinFrameInfo(a1, a2);
  if (result)
  {
    if (*(_QWORD *)(result + 80))
    {
      v5 = *(_QWORD *)(a1 + 8);
      v6 = "Chained unwind areas can't have handlers!";
      v7 = 259;
      return llvm::MCContext::reportError(v5, a2, (uint64_t)&v6);
    }
  }
  return result;
}

llvm::MCSectionCOFF *llvm::MCStreamer::getAssociatedXDataSection(llvm::MCContext **this, const llvm::MCSection *a2)
{
  return sub_1C5953AB8(this[1], (_DWORD *)this + 66, *(llvm::MCSectionCOFF **)(*((_QWORD *)this[1] + 21) + 680), (uint64_t)a2);
}

uint64_t llvm::MCStreamer::EmitWinCFIPushReg(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int SEHRegNum;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  result = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a3);
  if (result)
  {
    v6 = result;
    v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
    SEHRegNum = llvm::MCRegisterInfo::getSEHRegNum(*(_QWORD *)(a1[1] + 160), a2);
    *(_QWORD *)&v11 = v7;
    DWORD2(v11) = -1;
    HIDWORD(v11) = SEHRegNum;
    LODWORD(v12) = 0;
    v9 = *(_QWORD *)(v6 + 96);
    if (v9 >= *(_QWORD *)(v6 + 104))
    {
      result = (uint64_t)sub_1C575BBCC((void **)(v6 + 88), (uint64_t)&v11);
    }
    else
    {
      v10 = v11;
      *(_QWORD *)(v9 + 16) = v12;
      *(_OWORD *)v9 = v10;
      result = v9 + 24;
    }
    *(_QWORD *)(v6 + 96) = result;
  }
  return result;
}

uint64_t llvm::MCStreamer::EmitWinCFISetFrame(_QWORD *a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int SEHRegNum;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  const char *v16;
  __int128 v17;
  uint64_t v18;
  __int16 v19;

  result = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a4);
  if (!result)
    return result;
  v9 = result;
  if ((*(_DWORD *)(result + 72) & 0x80000000) == 0)
  {
    v15 = a1[1];
    v16 = "frame register and offset can be set at most once";
LABEL_13:
    *(_QWORD *)&v17 = v16;
    v19 = 259;
    return llvm::MCContext::reportError(v15, a4, (uint64_t)&v17);
  }
  if ((a3 & 0xF) != 0)
  {
    v15 = a1[1];
    v16 = "offset is not a multiple of 16";
    goto LABEL_13;
  }
  if (a3 >= 0xF1)
  {
    v15 = a1[1];
    v16 = "frame offset must be less than or equal to 240";
    goto LABEL_13;
  }
  v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  SEHRegNum = llvm::MCRegisterInfo::getSEHRegNum(*(_QWORD *)(a1[1] + 160), a2);
  *(_QWORD *)&v17 = v10;
  *((_QWORD *)&v17 + 1) = __PAIR64__(SEHRegNum, a3);
  LODWORD(v18) = 3;
  v12 = *(_QWORD *)(v9 + 96);
  v13 = *(_QWORD *)(v9 + 104);
  *(_DWORD *)(v9 + 72) = -1431655765 * ((v12 - *(_QWORD *)(v9 + 88)) >> 3);
  if (v12 >= v13)
  {
    result = (uint64_t)sub_1C575BBCC((void **)(v9 + 88), (uint64_t)&v17);
  }
  else
  {
    v14 = v17;
    *(_QWORD *)(v12 + 16) = v18;
    *(_OWORD *)v12 = v14;
    result = v12 + 24;
  }
  *(_QWORD *)(v9 + 96) = result;
  return result;
}

uint64_t llvm::MCStreamer::EmitWinCFIAllocStack(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  const char *v13;
  __int128 v14;
  uint64_t v15;
  __int16 v16;

  result = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a3);
  if (!result)
    return result;
  if (!a2)
  {
    v12 = a1[1];
    v13 = "stack allocation size must be non-zero";
LABEL_14:
    *(_QWORD *)&v14 = v13;
    v16 = 259;
    return llvm::MCContext::reportError(v12, a3, (uint64_t)&v14);
  }
  if ((a2 & 7) != 0)
  {
    v12 = a1[1];
    v13 = "stack allocation size is not a multiple of 8";
    goto LABEL_14;
  }
  v7 = result;
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  if (a2 > 0x80)
    v9 = 1;
  else
    v9 = 2;
  *(_QWORD *)&v14 = v8;
  *((_QWORD *)&v14 + 1) = a2 | 0xFFFFFFFF00000000;
  LODWORD(v15) = v9;
  v10 = *(_QWORD *)(v7 + 96);
  if (v10 >= *(_QWORD *)(v7 + 104))
  {
    result = (uint64_t)sub_1C575BBCC((void **)(v7 + 88), (uint64_t)&v14);
  }
  else
  {
    v11 = v14;
    *(_QWORD *)(v10 + 16) = v15;
    *(_OWORD *)v10 = v11;
    result = v10 + 24;
  }
  *(_QWORD *)(v7 + 96) = result;
  return result;
}

uint64_t llvm::MCStreamer::EmitWinCFISaveReg(_QWORD *a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int SEHRegNum;
  int v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int16 v18;

  result = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a4);
  if (result)
  {
    if ((a3 & 7) != 0)
    {
      v15 = a1[1];
      *(_QWORD *)&v16 = "register save offset is not 8 byte aligned";
      v18 = 259;
      return llvm::MCContext::reportError(v15, a4, (uint64_t)&v16);
    }
    else
    {
      v9 = result;
      v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
      SEHRegNum = llvm::MCRegisterInfo::getSEHRegNum(*(_QWORD *)(a1[1] + 160), a2);
      if (a3 <= 0x7FFF8)
        v12 = 4;
      else
        v12 = 5;
      *(_QWORD *)&v16 = v10;
      *((_QWORD *)&v16 + 1) = __PAIR64__(SEHRegNum, a3);
      LODWORD(v17) = v12;
      v13 = *(_QWORD *)(v9 + 96);
      if (v13 >= *(_QWORD *)(v9 + 104))
      {
        result = (uint64_t)sub_1C575BBCC((void **)(v9 + 88), (uint64_t)&v16);
      }
      else
      {
        v14 = v16;
        *(_QWORD *)(v13 + 16) = v17;
        *(_OWORD *)v13 = v14;
        result = v13 + 24;
      }
      *(_QWORD *)(v9 + 96) = result;
    }
  }
  return result;
}

uint64_t llvm::MCStreamer::EmitWinCFISaveXMM(_QWORD *a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int SEHRegNum;
  int v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int16 v18;

  result = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a4);
  if (result)
  {
    if ((a3 & 0xF) != 0)
    {
      v15 = a1[1];
      *(_QWORD *)&v16 = "offset is not a multiple of 16";
      v18 = 259;
      return llvm::MCContext::reportError(v15, a4, (uint64_t)&v16);
    }
    else
    {
      v9 = result;
      v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
      SEHRegNum = llvm::MCRegisterInfo::getSEHRegNum(*(_QWORD *)(a1[1] + 160), a2);
      if (a3 <= 0x7FFF8)
        v12 = 8;
      else
        v12 = 9;
      *(_QWORD *)&v16 = v10;
      *((_QWORD *)&v16 + 1) = __PAIR64__(SEHRegNum, a3);
      LODWORD(v17) = v12;
      v13 = *(_QWORD *)(v9 + 96);
      if (v13 >= *(_QWORD *)(v9 + 104))
      {
        result = (uint64_t)sub_1C575BBCC((void **)(v9 + 88), (uint64_t)&v16);
      }
      else
      {
        v14 = v16;
        *(_QWORD *)(v13 + 16) = v17;
        *(_OWORD *)v13 = v14;
        result = v13 + 24;
      }
      *(_QWORD *)(v9 + 96) = result;
    }
  }
  return result;
}

uint64_t llvm::MCStreamer::EmitWinCFIPushFrame(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  void **v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  _BYTE v12[24];
  __int16 v13;

  result = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a3);
  if (result)
  {
    v7 = result;
    v8 = (void **)(result + 88);
    if (*(_QWORD *)(result + 88) == *(_QWORD *)(result + 96))
    {
      *(_QWORD *)v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
      *(_DWORD *)&v12[8] = a2;
      *(_QWORD *)&v12[12] = 0xAFFFFFFFFLL;
      v9 = *(_QWORD *)(v7 + 96);
      if (v9 >= *(_QWORD *)(v7 + 104))
      {
        result = (uint64_t)sub_1C575BBCC(v8, (uint64_t)v12);
      }
      else
      {
        v10 = *(_OWORD *)v12;
        *(_QWORD *)(v9 + 16) = *(_QWORD *)&v12[16];
        *(_OWORD *)v9 = v10;
        result = v9 + 24;
      }
      *(_QWORD *)(v7 + 96) = result;
    }
    else
    {
      v11 = a1[1];
      *(_QWORD *)v12 = "If present, PushMachFrame must be the first UOP";
      v13 = 259;
      return llvm::MCContext::reportError(v11, a3, (uint64_t)v12);
    }
  }
  return result;
}

uint64_t llvm::MCStreamer::EmitWinCFIEndProlog(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = llvm::MCStreamer::EnsureValidWinFrameInfo(a1, a2);
  if (result)
  {
    v4 = result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

void llvm::MCStreamer::emitRawTextImpl()
{
  llvm::report_fatal_error((llvm *)"EmitRawText called on an MCStreamer that doesn't support it (target backend is likely missing an AsmStreamer implementation)", (const char *)1);
}

uint64_t llvm::MCStreamer::emitDwarfUnitLength(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const char *v8;
  __int16 v9;

  if (*(_BYTE *)(a1[1] + 1626) == 1)
  {
    v8 = "DWARF64 Mark";
    v9 = 259;
    (*(void (**)(_QWORD *, const char **, uint64_t))(*a1 + 112))(a1, &v8, 1);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 512))(a1, 0xFFFFFFFFLL, 4);
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 112))(a1, a3, 1);
  if (*(_BYTE *)(a1[1] + 1626))
    v6 = 8;
  else
    v6 = 4;
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 512))(a1, a2, v6);
}

uint64_t llvm::MCTargetStreamer::prettyPrintAsm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a4, a3, "", 0, a5, a6);
}

_OWORD *llvm::MCStreamer::emitPseudoProbe(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, _DWORD *a6)
{
  uint64_t v12;
  unint64_t TempSymbol;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v18;
  uint64_t v19[2];
  char v20;
  char v21;
  unint64_t v22;
  __int16 v23;

  v12 = *(_QWORD *)(a1 + 8);
  v19[0] = (uint64_t)"tmp";
  v23 = 259;
  TempSymbol = llvm::MCContext::createTempSymbol(v12, (uint64_t)v19, 1);
  (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)a1 + 192))(a1, TempSymbol, 0);
  v19[0] = a2;
  v19[1] = a3;
  v20 = a5;
  v21 = a4;
  v22 = TempSymbol;
  v14 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v14)
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v14 - 32);
  else
    v15 = 0;
  v18 = v15;
  v16 = sub_1C59547D0((uint64_t **)(v12 + 1640), v15, &v18);
  return llvm::MCPseudoProbeInlineTree::addPseudoProbe((uint64_t *)v16 + 5, v19, a6);
}

uint64_t llvm::MCStreamer::emitAbsoluteSymbolDiffAsULEB128(llvm::MCStreamer *this, const llvm::MCSymbol *a2, const llvm::MCSymbol *a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = llvm::MCSymbolRefExpr::create((uint64_t)a2, 0, *((_QWORD *)this + 1), 0);
  v6 = llvm::MCSymbolRefExpr::create((uint64_t)a3, 0, *((_QWORD *)this + 1), 0);
  v7 = sub_1C484358C(*((_QWORD *)this + 1) + 192, 32, 3);
  *(_BYTE *)v7 = 0;
  *(_DWORD *)(v7 + 1) = (*(unsigned __int8 *)(v7 + 4) << 24) | 0x12;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = v5;
  *(_QWORD *)(v7 + 24) = v6;
  return (*(uint64_t (**)(llvm::MCStreamer *, unint64_t))(*(_QWORD *)this + 544))(this, v7);
}

uint64_t llvm::MCStreamer::emitBinaryData(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1);
}

unint64_t llvm::MCStreamer::endSection(llvm::MCContext **this, llvm::MCSection *a2)
{
  unint64_t EndSymbol;
  uint64_t v5;
  void *v6;

  EndSymbol = llvm::MCSection::getEndSymbol(a2, this[1]);
  sub_1C593D6FC(EndSymbol, 1);
  if (!v5 || (sub_1C593D6FC(EndSymbol, 1), v6 == llvm::MCSymbol::AbsolutePseudoFragment))
  {
    (*((void (**)(llvm::MCContext **, llvm::MCSection *, _QWORD))*this + 21))(this, a2, 0);
    (*((void (**)(llvm::MCContext **, unint64_t, _QWORD))*this + 24))(this, EndSymbol, 0);
  }
  return EndSymbol;
}

uint64_t *sub_1C62C1400(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 88;
      v6 = *(_OWORD *)(v3 - 88);
      *(_OWORD *)(v4 - 72) = *(_OWORD *)(v3 - 72);
      *(_OWORD *)(v4 - 88) = v6;
      *(_QWORD *)(v4 - 48) = 0;
      *(_QWORD *)(v4 - 40) = 0;
      *(_QWORD *)(v4 - 56) = 0;
      *(_OWORD *)(v4 - 56) = *(_OWORD *)(v3 - 56);
      *(_QWORD *)(v4 - 40) = *(_QWORD *)(v3 - 40);
      *(_QWORD *)(v3 - 56) = 0;
      *(_QWORD *)(v3 - 48) = 0;
      *(_QWORD *)(v3 - 40) = 0;
      v7 = *(_OWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 23) = *(_OWORD *)(v3 - 23);
      *(_OWORD *)(v4 - 32) = v7;
      v3 -= 88;
      v4 -= 88;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v8 = *result;
  *result = v5;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1C62C14AC(uint64_t a1)
{
  void *v2;

  sub_1C621E630(a1 + 112);
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *llvm::createSPIRVStreamer(llvm::MCContext *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v10 = (_QWORD *)operator new();
  v11 = *a2;
  *a2 = 0;
  v12 = *a3;
  *a3 = 0;
  v16 = v12;
  v17 = v11;
  v13 = *a4;
  *a4 = 0;
  v15 = v13;
  sub_1C62C1604(v10, a1, &v17, &v16, &v15);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (a5)
    *(_BYTE *)(v10[34] + 500) |= 1u;
  return v10;
}

void sub_1C62C15D0(llvm::MCObjectStreamer *a1)
{
  llvm::MCObjectStreamer::~MCObjectStreamer(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62C15F4()
{
  return 0;
}

_QWORD *sub_1C62C1604(_QWORD *a1, llvm::MCContext *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a3;
  *a3 = 0;
  v7 = *a4;
  *a4 = 0;
  v14 = v7;
  v15 = v6;
  v8 = *a5;
  *a5 = 0;
  v13 = v8;
  llvm::MCObjectStreamer::MCObjectStreamer((uint64_t)a1, a2, &v15, &v14, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = v14;
  v14 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v15;
  v15 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *a1 = off_1E8182C10;
  return a1;
}

__int128 *llvm::MCSubtargetInfo::getSchedModelForCPU(uint64_t a1, _DWORD *a2, size_t a3)
{
  const char **v5;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  void *v9;
  llvm::raw_ostream *v10;

  v5 = sub_1C5956214(a2, a3, *(const char ***)(a1 + 120), *(_QWORD *)(a1 + 128));
  if (v5)
    return (__int128 *)v5[11];
  if (a3 != 4 || *a2 != 1886152040)
  {
    v7 = (llvm::raw_ostream *)llvm::errs(0);
    v8 = sub_1C4816AD8(v7, "'");
    v9 = (void *)*((_QWORD *)v8 + 4);
    if (a3 <= *((_QWORD *)v8 + 3) - (_QWORD)v9)
    {
      if (a3)
      {
        memcpy(v9, a2, a3);
        *((_QWORD *)v8 + 4) += a3;
      }
    }
    else
    {
      llvm::raw_ostream::write(v8, (const char *)a2, a3);
    }
    v10 = sub_1C4816AD8(v8, "' is not a recognized processor for this target");
    sub_1C4816AD8(v10, " (ignoring processor)\n");
  }
  return &llvm::MCSchedModel::Default;
}

uint64_t llvm::MCSubtargetInfo::getCacheSize(llvm::MCSubtargetInfo *this)
{
  return 0;
}

uint64_t llvm::MCSubtargetInfo::getCacheAssociativity(llvm::MCSubtargetInfo *this)
{
  return 0;
}

uint64_t llvm::MCSubtargetInfo::getCacheLineSize(llvm::MCSubtargetInfo *this)
{
  return 0;
}

uint64_t llvm::MCSubtargetInfo::getPrefetchDistance(llvm::MCSubtargetInfo *this)
{
  return 0;
}

uint64_t llvm::MCSubtargetInfo::getMaxPrefetchIterationsAhead(llvm::MCSubtargetInfo *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t llvm::MCSubtargetInfo::enableWritePrefetching(llvm::MCSubtargetInfo *this)
{
  return 0;
}

uint64_t llvm::MCSubtargetInfo::getMinPrefetchStride(llvm::MCSubtargetInfo *this)
{
  return 1;
}

void sub_1C62C17C4(void **a1)
{
  llvm::TargetSubtargetInfo::~TargetSubtargetInfo(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62C17E8(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

llvm::raw_ostream *llvm::MCSymbol::print(llvm::MCSymbol *this, llvm::raw_ostream *a2, const llvm::MCAsmInfo *a3)
{
  const char *v5;
  size_t v6;
  llvm::raw_ostream *result;
  _QWORD *v8;
  size_t v9;
  _BYTE *v10;
  int v11;
  llvm::raw_ostream *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;

  if ((*(_BYTE *)this & 4) != 0)
  {
    v8 = (_QWORD *)*((_QWORD *)this - 1);
    v9 = *v8;
    v5 = (const char *)(v8 + 2);
    v6 = v9;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  if (!a3
    || (result = (llvm::raw_ostream *)(*(uint64_t (**)(const llvm::MCAsmInfo *, const char *, size_t))(*(_QWORD *)a3 + 56))(a3, v5, v6), (_DWORD)result))
  {
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
    if (v6 > *((_QWORD *)a2 + 3) - (_QWORD)result)
      return llvm::raw_ostream::write(a2, v5, v6);
    if (v6)
    {
      result = (llvm::raw_ostream *)memcpy(result, v5, v6);
      *((_QWORD *)a2 + 4) += v6;
    }
    return result;
  }
  if (!*((_BYTE *)a3 + 185))
    llvm::report_fatal_error((llvm *)"Symbol name with unsupported characters", (const char *)1);
  v10 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v10 >= *((_QWORD *)a2 + 3))
  {
    result = llvm::raw_ostream::write(a2, 34);
  }
  else
  {
    *((_QWORD *)a2 + 4) = v10 + 1;
    *v10 = 34;
  }
  for (; v6; --v6)
  {
    v11 = *(unsigned __int8 *)v5;
    if (v11 == 34)
    {
      v12 = a2;
      v13 = "\\\"";
    }
    else
    {
      if (v11 != 10)
      {
        v14 = (_BYTE *)*((_QWORD *)a2 + 4);
        if ((unint64_t)v14 >= *((_QWORD *)a2 + 3))
        {
          result = llvm::raw_ostream::write(a2, v11);
        }
        else
        {
          *((_QWORD *)a2 + 4) = v14 + 1;
          *v14 = v11;
        }
        goto LABEL_20;
      }
      v12 = a2;
      v13 = "\\n";
    }
    result = sub_1C4816AD8(v12, v13);
LABEL_20:
    ++v5;
  }
  v15 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)a2 + 3))
    return llvm::raw_ostream::write(a2, 34);
  *((_QWORD *)a2 + 4) = v15 + 1;
  *v15 = 34;
  return result;
}

llvm::raw_ostream *llvm::MCSymbol::dump(llvm::MCSymbol *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return llvm::MCSymbol::print(this, v2, 0);
}

uint64_t llvm::MCSymbolELF::setBinding(uint64_t this, int a2)
{
  __int16 v2;
  __int16 v3;

  if (a2 == 2)
    v2 = 16;
  else
    v2 = 24;
  if (a2)
    v3 = 8;
  else
    v3 = 0;
  if (a2 <= 1)
    v2 = v3;
  *(_WORD *)(this + 12) = *(_WORD *)(this + 12) & 0xFFE7 | v2 | 0x1000;
  return this;
}

uint64_t llvm::MCSymbolELF::getBinding(llvm::MCSymbolELF *this)
{
  unint64_t v1;
  uint64_t v3;

  v1 = *((unsigned __int16 *)this + 6);
  if ((v1 & 0x1000) != 0)
    return dword_1C8663870[(v1 >> 3) & 3];
  sub_1C593D6FC((uint64_t)this, 1);
  if (v3)
    return 0;
  if ((*((_BYTE *)this + 9) & 2) != 0)
    return 1;
  if ((*((_WORD *)this + 6) & 0x800) != 0)
    return 2;
  return (*((_WORD *)this + 6) & 0x400) == 0;
}

uint64_t llvm::MCSymbolELF::isBindingSet(llvm::MCSymbolELF *this)
{
  return (*((unsigned __int16 *)this + 6) >> 12) & 1;
}

uint64_t llvm::MCSymbolELF::isWeakrefUsedInReloc(llvm::MCSymbolELF *this)
{
  return (*((unsigned __int16 *)this + 6) >> 11) & 1;
}

uint64_t llvm::MCSymbolELF::isSignature(llvm::MCSymbolELF *this)
{
  return (*((unsigned __int16 *)this + 6) >> 10) & 1;
}

uint64_t llvm::MCSymbolELF::setType(uint64_t this, int a2)
{
  *(_WORD *)(this + 12) = *(_WORD *)(this + 12) & 0xFFF8 | word_1C8663880[a2];
  return this;
}

uint64_t llvm::MCSymbolELF::getType(llvm::MCSymbolELF *this)
{
  return dword_1C8663898[*((_WORD *)this + 6) & 7];
}

uint64_t llvm::MCSymbolELF::setVisibility(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 12) = *(_WORD *)(this + 12) & 0xFF9F | (32 * a2);
  return this;
}

uint64_t llvm::MCSymbolELF::getVisibility(llvm::MCSymbolELF *this)
{
  return (*((unsigned __int16 *)this + 6) >> 5) & 3;
}

uint64_t llvm::MCSymbolELF::setOther(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 12) = *(_WORD *)(this + 12) & 0xFC7F | (4 * a2) & 0xFF80;
  return this;
}

uint64_t llvm::MCSymbolELF::getOther(llvm::MCSymbolELF *this)
{
  return (*((unsigned __int16 *)this + 6) >> 2) & 0xE0;
}

uint64_t llvm::MCSymbolELF::setIsWeakrefUsedInReloc(uint64_t this)
{
  *(_WORD *)(this + 12) |= 0x800u;
  return this;
}

uint64_t llvm::MCSymbolELF::setIsSignature(uint64_t this)
{
  *(_WORD *)(this + 12) |= 0x400u;
  return this;
}

uint64_t llvm::MCSymbolXCOFF::getRepresentedCsect(llvm::MCSymbolXCOFF *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t llvm::MCSymbolXCOFF::setRepresentedCsect(uint64_t this, llvm::MCSectionXCOFF *a2)
{
  *(_QWORD *)(this + 40) = a2;
  return this;
}

char *llvm::MCTargetOptions::getABIName(llvm::MCTargetOptions *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  v1 = (char *)this + 16;
  v2 = v3;
  if (v1[23] >= 0)
    return v1;
  return (char *)v2;
}

void sub_1C62C1BEC(llvm *a1)
{
  llvm *v1;
  llvm *v2;
  llvm *v3;
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  _QWORD v7[4];
  __int16 v8;

  v1 = a1;
  if (!*((_QWORD *)a1 + 3))
  {
    v7[0] = "cl::alias must have argument name specified!";
    v8 = 259;
    v4 = (llvm::raw_ostream *)llvm::errs(a1);
    a1 = (llvm *)llvm::cl::Option::error(v1, (llvm::Twine *)v7, 0, 0, v4);
  }
  if (!*((_QWORD *)v1 + 16))
  {
    v7[0] = "cl::alias must have an cl::aliasopt(option) specified!";
    v8 = 259;
    v5 = (llvm::raw_ostream *)llvm::errs(a1);
    a1 = (llvm *)llvm::cl::Option::error(v1, (llvm::Twine *)v7, 0, 0, v5);
  }
  if (*((_DWORD *)v1 + 27) != *((_DWORD *)v1 + 28))
  {
    v7[0] = "cl::alias must not have cl::sub(), aliased option's cl::sub() will be used!";
    v8 = 259;
    v6 = (llvm::raw_ostream *)llvm::errs(a1);
    llvm::cl::Option::error(v1, (llvm::Twine *)v7, 0, 0, v6);
  }
  v2 = (llvm *)*((_QWORD *)v1 + 16);
  v3 = v1;
  if (v2 != v1)
  {
    llvm::SmallPtrSetImplBase::CopyFrom((llvm *)((char *)v1 + 88), (llvm *)((char *)v2 + 88));
    v3 = (llvm *)*((_QWORD *)v1 + 16);
  }
  sub_1C62C1D5C((uint64_t)v1 + 64, (uint64_t)v3 + 64);
  llvm::cl::Option::addArgument(v1);
}

_QWORD *sub_1C62C1CFC(_QWORD *result, uint64_t a2)
{
  llvm::raw_ostream *v2;
  uint64_t v3;
  _QWORD *v4;
  const char *v5;
  __int16 v6;

  if (result[16])
  {
    v4 = result;
    v5 = "cl::alias must only have one cl::aliasopt(...) specified!";
    v6 = 259;
    v3 = a2;
    v2 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
    llvm::cl::Option::error(v4, (llvm::Twine *)&v5, 0, 0, v2);
    a2 = v3;
    result = v4;
  }
  result[16] = a2;
  return result;
}

uint64_t sub_1C62C1D5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v8;

  if (a1 != a2)
  {
    v3 = *(unsigned int *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 8);
    if (v4 >= v3)
    {
      if ((_DWORD)v3)
        memmove(*(void **)a1, *(const void **)a2, 8 * v3);
LABEL_5:
      *(_DWORD *)(a1 + 8) = v3;
      return a1;
    }
    v8 = *(unsigned int *)(a1 + 8);
    if (*(_DWORD *)(a1 + 12) >= v3)
    {
      if (v4)
      {
        memmove(*(void **)a1, *(const void **)a2, 8 * v8);
LABEL_10:
        v6 = *(unsigned int *)(a2 + 8);
        if (v8 != v6)
          memcpy((void *)(*(_QWORD *)a1 + 8 * v8), (const void *)(*(_QWORD *)a2 + 8 * v8), *(_QWORD *)a2 + 8 * v6 - (*(_QWORD *)a2 + 8 * v8));
        goto LABEL_5;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v3, 8);
    }
    v8 = 0;
    goto LABEL_10;
  }
  return a1;
}

void llvm::MCValue::print(llvm::MCValue *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v2;
  _BYTE *v4;
  llvm::raw_ostream *v5;
  unint64_t *v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  uint64_t v9;

  v2 = a2;
  if (*(_OWORD *)this == 0)
  {
    v6 = (unint64_t *)((char *)this + 16);
LABEL_14:
    llvm::raw_ostream::operator<<(v2, *v6);
    return;
  }
  if (*((_DWORD *)this + 6))
  {
    v4 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v4 >= *((_QWORD *)a2 + 3))
    {
      v5 = llvm::raw_ostream::write(a2, 58);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v4 + 1;
      *v4 = 58;
      v5 = a2;
    }
    v7 = llvm::raw_ostream::operator<<(v5, *((unsigned int *)this + 6));
    v8 = (_BYTE *)*((_QWORD *)v7 + 4);
    if ((unint64_t)v8 >= *((_QWORD *)v7 + 3))
    {
      llvm::raw_ostream::write(v7, 58);
    }
    else
    {
      *((_QWORD *)v7 + 4) = v8 + 1;
      *v8 = 58;
    }
  }
  llvm::MCExpr::print(*(_QWORD *)this);
  if (*((_QWORD *)this + 1))
  {
    sub_1C4816AD8(v2, " - ");
    llvm::MCExpr::print(*((_QWORD *)this + 1));
  }
  v9 = *((_QWORD *)this + 2);
  v6 = (unint64_t *)((char *)this + 16);
  if (v9)
  {
    v2 = sub_1C4816AD8(v2, " + ");
    goto LABEL_14;
  }
}

void llvm::MCValue::dump(llvm::MCValue *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  llvm::MCValue::print(this, v2);
}

void llvm::MCWasmStreamer::~MCWasmStreamer(llvm::MCWasmStreamer *this)
{
  llvm::MCObjectStreamer::~MCObjectStreamer(this);
  JUMPOUT(0x1CAA32FC0);
}

void llvm::MCWasmStreamer::emitLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::MCObjectStreamer::emitLabel(a1, a2, a3);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * *(unsigned int *)(a1 + 120) - 32) + 256) & 2) != 0)
    *(_WORD *)(a2 + 12) |= 0x100u;
}

llvm::MCSection *llvm::MCWasmStreamer::emitLabelAtPos(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::MCSection *result;

  result = llvm::MCObjectStreamer::emitLabelAtPos((uint64_t *)a1, a2, a3, a4, a5);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * *(unsigned int *)(a1 + 120) - 32) + 256) & 2) != 0)
    *(_WORD *)(a2 + 12) |= 0x100u;
  return result;
}

void llvm::MCWasmStreamer::emitAssemblerFlag(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 272) + 8) + 208))(*(_QWORD *)(*(_QWORD *)(a1 + 272)
                                                                                                  + 8));
  __break(1u);
}

uint64_t llvm::MCWasmStreamer::changeSection(llvm::MCWasmStreamer *this, llvm::MCSection *a2, const llvm::MCExpr *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *((_QWORD *)this + 34);
  v7 = *((_QWORD *)a2 + 29);
  if (v7)
    llvm::MCAssembler::registerSymbol(*((_QWORD *)this + 34), v7, 0);
  llvm::MCObjectStreamer::changeSection(this, a2, a3);
  return llvm::MCAssembler::registerSymbol(v6, *((_QWORD *)a2 + 1), 0);
}

uint64_t llvm::MCWasmStreamer::emitWeakReference(llvm::MCWasmStreamer *this, llvm::MCSymbol *a2, const llvm::MCSymbol *a3)
{
  const llvm::MCExpr *v6;

  llvm::MCAssembler::registerSymbol(*((_QWORD *)this + 34), (uint64_t)a3, 0);
  v6 = (const llvm::MCExpr *)llvm::MCSymbolRefExpr::create((uint64_t)a3, 29, *((_QWORD *)this + 1), 0);
  return llvm::MCSymbol::setVariableValue((uint64_t)a2, v6);
}

void llvm::MCWasmStreamer::emitSymbolAttribute(uint64_t a1, uint64_t a2, int a3)
{
  llvm::MCAssembler::registerSymbol(*(_QWORD *)(a1 + 272), a2, 0);
  __asm { BR              X10 }
}

uint64_t sub_1C62C2140()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 40) = 1;
  *(_DWORD *)(v0 + 8) |= 0x10u;
  return 1;
}

void sub_1C62C2164()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) |= 0x100u;
  JUMPOUT(0x1C62C2154);
}

void sub_1C62C2180()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 36);
  *(_DWORD *)(v0 + 32) = 0;
  if (!v1)
    *(_BYTE *)(v0 + 36) = 1;
  JUMPOUT(0x1C62C2154);
}

void sub_1C62C2198()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 41) = 1;
  JUMPOUT(0x1C62C2154);
}

void llvm::MCWasmStreamer::emitELFSize(llvm::MCWasmStreamer *this, llvm::MCSymbol *a2, const llvm::MCExpr *a3)
{
  *((_QWORD *)a2 + 22) = a3;
}

uint64_t *llvm::MCWasmStreamer::emitInstToFragment(llvm::MCWasmStreamer *this, const llvm::MCInst *a2, const llvm::MCSubtargetInfo *a3)
{
  uint64_t *result;
  uint64_t v5;
  const llvm::MCExpr **v6;
  uint64_t v7;
  const llvm::MCExpr *v8;

  llvm::MCObjectStreamer::emitInstToFragment((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
  result = (uint64_t *)llvm::MCObjectStreamer::getCurrentFragment(this);
  v5 = *((unsigned int *)result + 26);
  if ((_DWORD)v5)
  {
    v6 = (const llvm::MCExpr **)result[12];
    v7 = 24 * v5;
    do
    {
      v8 = *v6;
      v6 += 3;
      result = llvm::MCWasmStreamer::fixSymbolsInTLSFixups((uint64_t *)this, v8);
      v7 -= 24;
    }
    while (v7);
  }
  return result;
}

uint64_t *llvm::MCWasmStreamer::fixSymbolsInTLSFixups(uint64_t *this, const llvm::MCExpr *a2)
{
  uint64_t *v3;
  int v4;
  const llvm::MCExpr **v5;
  int v6;

  v3 = this;
  while (1)
  {
    v4 = *(unsigned __int8 *)a2;
    if (v4 == 3)
    {
      v5 = (const llvm::MCExpr **)((char *)a2 + 16);
      goto LABEL_4;
    }
    if (*(_BYTE *)a2)
      break;
    this = (uint64_t *)llvm::MCWasmStreamer::fixSymbolsInTLSFixups((llvm::MCWasmStreamer *)v3, *((const llvm::MCExpr **)a2 + 2));
    v5 = (const llvm::MCExpr **)((char *)a2 + 24);
LABEL_4:
    a2 = *v5;
  }
  if (v4 == 2)
  {
    v6 = *(unsigned __int16 *)((char *)a2 + 1);
    if (v6 == 129 || v6 == 126)
    {
      this = (uint64_t *)llvm::MCAssembler::registerSymbol(v3[34], *((_QWORD *)a2 + 2), 0);
      *(_WORD *)(*((_QWORD *)a2 + 2) + 12) |= 0x100u;
    }
  }
  return this;
}

void llvm::MCWasmStreamer::finishImpl(llvm::MCWasmStreamer *this)
{
  llvm::MCObjectStreamer::emitFrames(this, 0);
  llvm::MCObjectStreamer::finishImpl((llvm::MCContext **)this);
}

uint64_t llvm::createWasmStreamer(llvm::MCContext *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v10 = operator new();
  v11 = *a2;
  *a2 = 0;
  v12 = *a3;
  *a3 = 0;
  v16 = v12;
  v17 = v11;
  v13 = *a4;
  *a4 = 0;
  v15 = v13;
  sub_1C62C23C8(v10, a1, &v17, &v16, &v15);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (a5)
    *(_BYTE *)(*(_QWORD *)(v10 + 272) + 500) |= 1u;
  return v10;
}

double sub_1C62C23C0(llvm::MCObjectStreamer *this)
{
  *((_BYTE *)this + 544) = 0;
  return llvm::MCObjectStreamer::reset(this);
}

uint64_t sub_1C62C23C8(uint64_t a1, llvm::MCContext *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a3;
  *a3 = 0;
  v7 = *a4;
  *a4 = 0;
  v14 = v7;
  v15 = v6;
  v8 = *a5;
  *a5 = 0;
  v13 = v8;
  llvm::MCObjectStreamer::MCObjectStreamer(a1, a2, &v15, &v14, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = v14;
  v14 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v15;
  v15 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *(_QWORD *)a1 = off_1E8183340;
  *(_BYTE *)(a1 + 544) = 0;
  return a1;
}

_QWORD *llvm::MCXCOFFStreamer::MCXCOFFStreamer(_QWORD *a1, llvm::MCContext *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a3;
  *a3 = 0;
  v7 = *a4;
  *a4 = 0;
  v14 = v7;
  v15 = v6;
  v8 = *a5;
  *a5 = 0;
  v13 = v8;
  llvm::MCObjectStreamer::MCObjectStreamer((uint64_t)a1, a2, &v15, &v14, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = v14;
  v14 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v15;
  v15 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *a1 = off_1E8183E60;
  return a1;
}

uint64_t llvm::MCXCOFFStreamer::emitSymbolAttribute(uint64_t a1, uint64_t a2, int a3)
{
  char v5;
  __int16 v7;

  llvm::MCAssembler::registerSymbol(*(_QWORD *)(a1 + 272), a2, 0);
  switch(a3)
  {
    case 9:
    case 11:
      if (!*(_BYTE *)(a2 + 33))
        *(_BYTE *)(a2 + 33) = 1;
      v5 = 2;
      goto LABEL_5;
    case 10:
      if (!*(_BYTE *)(a2 + 33))
        *(_BYTE *)(a2 + 33) = 1;
      v5 = 107;
      goto LABEL_5;
    case 12:
      v7 = 0x2000;
      goto LABEL_12;
    case 21:
      v7 = 12288;
LABEL_12:
      *(_WORD *)(a2 + 48) = v7;
      break;
    case 23:
      if (!*(_BYTE *)(a2 + 33))
        *(_BYTE *)(a2 + 33) = 1;
      v5 = 111;
LABEL_5:
      *(_BYTE *)(a2 + 32) = v5;
      *(_DWORD *)(a2 + 8) |= 0x10u;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Not implemented yet.", (const char *)1);
  }
  return 1;
}

uint64_t llvm::MCXCOFFStreamer::emitXCOFFSymbolLinkageWithVisibility(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1);
  if ((_DWORD)a4)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 304))(a1, a2, a4);
  return result;
}

uint64_t llvm::MCXCOFFStreamer::emitCommonSymbol(llvm::MCXCOFFStreamer *this, llvm::MCSymbol *a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v8;
  unsigned int v9;

  llvm::MCAssembler::registerSymbol(*((_QWORD *)this + 34), (uint64_t)a2, 0);
  v8 = *((unsigned __int8 *)a2 + 32) != 107;
  v9 = *((_DWORD *)a2 + 2) & 0xFFFC03EF;
  *((_QWORD *)a2 + 3) = a3;
  *((_DWORD *)a2 + 2) = (-8192 * __clz(a4)) & 0x3E000 | (16 * v8) | v9 | 0xC00;
  *(_BYTE *)(llvm::MCSymbolXCOFF::getRepresentedCsect(a2) + 24) = 63 - __clz(a4);
  (*(void (**)(llvm::MCXCOFFStreamer *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)this + 632))(this, a4, 0, 1, 0);
  return llvm::MCStreamer::emitZeros(this, a3);
}

void llvm::MCXCOFFStreamer::emitZerofill()
{
  llvm::report_fatal_error((llvm *)"Zero fill not implemented for XCOFF.", (const char *)1);
}

_QWORD *llvm::createXCOFFStreamer(llvm::MCContext *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v10 = (_QWORD *)operator new();
  v11 = *a2;
  *a2 = 0;
  v12 = *a3;
  *a3 = 0;
  v16 = v12;
  v17 = v11;
  v13 = *a4;
  *a4 = 0;
  v15 = v13;
  llvm::MCXCOFFStreamer::MCXCOFFStreamer(v10, a1, &v17, &v16, &v15);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (a5)
    *(_BYTE *)(v10[34] + 500) |= 1u;
  return v10;
}

uint64_t llvm::MCXCOFFStreamer::emitXCOFFLocalCommonSymbol(llvm::MCXCOFFStreamer *this, llvm::MCSymbol *a2, uint64_t a3, llvm::MCSymbol *a4, uint64_t a5)
{
  return (*(uint64_t (**)(llvm::MCXCOFFStreamer *, llvm::MCSymbol *, uint64_t, uint64_t))(*(_QWORD *)this + 456))(this, a4, a3, a5);
}

void sub_1C62C2824(llvm::MCObjectStreamer *a1)
{
  llvm::MCObjectStreamer::~MCObjectStreamer(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C62C2848()
{
  llvm::report_fatal_error((llvm *)"emitXCOFFRenameDirective is not implemented yet on object generation path", (const char *)1);
}

void sub_1C62C2860()
{
  llvm::report_fatal_error((llvm *)"emitXCOFFRefDirective is not implemented yet on objectgeneration path", (const char *)1);
}

llvm::raw_ostream *llvm::MachObjectWriter::writeLinkeditLoadCommand(llvm::MachObjectWriter *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  llvm::raw_ostream *v8;
  unsigned int v9;
  unsigned int v10;
  llvm::raw_ostream *v11;
  int v12;
  llvm::raw_ostream *v13;
  unsigned int v14;
  unsigned int v15;
  llvm::raw_ostream *v16;
  unsigned int v17;
  unsigned int v18;
  char v20[4];

  (*(void (**)(_QWORD))(**((_QWORD **)this + 26) + 80))(*((_QWORD *)this + 26));
  v8 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v9 = bswap32(a2);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v10 = v9;
  else
    v10 = a2;
  *(_DWORD *)v20 = v10;
  llvm::raw_ostream::write(v8, v20, 4uLL);
  v11 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v12 = 0x10000000;
  else
    v12 = 16;
  *(_DWORD *)v20 = v12;
  llvm::raw_ostream::write(v11, v20, 4uLL);
  v13 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v14 = bswap32(a3);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v15 = v14;
  else
    v15 = a3;
  *(_DWORD *)v20 = v15;
  llvm::raw_ostream::write(v13, v20, 4uLL);
  v16 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v17 = bswap32(a4);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v18 = v17;
  else
    v18 = a4;
  *(_DWORD *)v20 = v18;
  return llvm::raw_ostream::write(v16, v20, 4uLL);
}

uint64_t llvm::createMachObjectWriter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned __int8 v5;

  v5 = a3;
  return sub_1C595FFF4(a4, a1, a2, &v5);
}

void sub_1C62C299C(uint64_t a1)
{
  sub_1C5960104(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62C29C0(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C52A0CF8((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C5960324(a2, (uint64_t)a3, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_1C62C2A58(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C4F575EC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_BYTE *)v10 + 8) = *(_BYTE *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1C62C2B04(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v7 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = &off_1E8184390;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = a1 + 88;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  if ((*(_BYTE *)(v7 + 8) & 1) != 0)
    v9 = 3;
  else
    v9 = 2;
  llvm::StringTableBuilder::StringTableBuilder(v8, v9, 1);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = a3;
  *(_DWORD *)(a1 + 216) = a4;
  return a1;
}

llvm::raw_ostream *SPIRVObjectWriter::writeHeader(SPIRVObjectWriter *this, const llvm::MCAssembler *a2)
{
  llvm::raw_ostream *v3;
  int v4;
  llvm::raw_ostream *v5;
  int v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  int v9;
  llvm::raw_ostream *v10;
  char v12[4];

  v3 = (llvm::raw_ostream *)*((_QWORD *)this + 1);
  if ((*((_DWORD *)this + 4) - 1) >= 2)
    v4 = 50471687;
  else
    v4 = 119734787;
  *(_DWORD *)v12 = v4;
  llvm::raw_ostream::write(v3, v12, 4uLL);
  v5 = (llvm::raw_ostream *)*((_QWORD *)this + 1);
  if ((*((_DWORD *)this + 4) - 1) >= 2)
    v6 = 256;
  else
    v6 = 0x10000;
  *(_DWORD *)v12 = v6;
  llvm::raw_ostream::write(v5, v12, 4uLL);
  v7 = (llvm::raw_ostream *)*((_QWORD *)this + 1);
  *(_DWORD *)v12 = 0;
  llvm::raw_ostream::write(v7, v12, 4uLL);
  v8 = (llvm::raw_ostream *)*((_QWORD *)this + 1);
  if ((*((_DWORD *)this + 4) - 1) >= 2)
    v9 = -2080178176;
  else
    v9 = 900;
  *(_DWORD *)v12 = v9;
  llvm::raw_ostream::write(v8, v12, 4uLL);
  v10 = (llvm::raw_ostream *)*((_QWORD *)this + 1);
  *(_DWORD *)v12 = 0;
  return llvm::raw_ostream::write(v10, v12, 4uLL);
}

uint64_t SPIRVObjectWriter::writeObject(SPIRVObjectWriter *this, llvm::MCAssembler *a2, const llvm::MCAsmLayout *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const llvm::MCAssembler *v10;
  const llvm::MCSection **v11;
  const llvm::MCSection **v12;
  const llvm::MCSection *v13;
  _QWORD *v14;

  v6 = (_QWORD *)*((_QWORD *)this + 1);
  v7 = (*(uint64_t (**)(_QWORD *))(*v6 + 80))(v6);
  v8 = v6[4];
  v9 = v6[2];
  SPIRVObjectWriter::writeHeader(this, v10);
  v11 = (const llvm::MCSection **)*((_QWORD *)a2 + 4);
  v12 = (const llvm::MCSection **)*((_QWORD *)a2 + 5);
  while (v11 != v12)
  {
    v13 = *v11++;
    llvm::MCAssembler::writeSectionData(a2, *((llvm::raw_ostream **)this + 1), v13, a3);
  }
  v14 = (_QWORD *)*((_QWORD *)this + 1);
  return v9 - v8 - v7 + (*(uint64_t (**)(_QWORD *))(*v14 + 80))(v14) + v14[4] - v14[2];
}

uint64_t llvm::createSPIRVObjectWriter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;

  result = operator new();
  v7 = *a1;
  *a1 = 0;
  *(_QWORD *)result = &off_1E81843F8;
  *(_QWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = 1;
  *(_QWORD *)(result + 24) = v7;
  *a3 = result;
  return result;
}

void sub_1C62C2D8C(llvm::MCObjectWriter *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E81843F8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  llvm::MCObjectWriter::~MCObjectWriter(this);
}

void sub_1C62C2DD0(llvm::MCObjectWriter *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E81843F8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  llvm::MCObjectWriter::~MCObjectWriter(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62C2E30(uint64_t *a1, _OWORD *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  v4 = sub_1C5961DD4(a1, (uint64_t)a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C5961F04((uint64_t)a1, (uint64_t)a2, (uint64_t)a2, v7);
    *(_OWORD *)v5 = *a2;
    *(_QWORD *)(v5 + 16) = 0;
  }
  return v5;
}

std::string *llvm::SubtargetFeatures::getString@<X0>(std::string **this@<X0>, std::string *a2@<X8>)
{
  return sub_1C5021A04(*this, this[1], ",", 1uLL, a2);
}

llvm::raw_ostream *llvm::SubtargetFeatures::print(llvm::SubtargetFeatures *this, llvm::raw_ostream *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  BOOL v6;
  const char *v7;
  size_t v8;
  size_t v9;
  llvm::raw_ostream *v10;

  v3 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this != v4)
  {
    do
    {
      v5 = *(_BYTE *)(v3 + 23);
      v6 = v5 < 0;
      if (v5 >= 0)
        v7 = (const char *)v3;
      else
        v7 = *(const char **)v3;
      v8 = v5 & 0x7F;
      if (v6)
        v9 = *(_QWORD *)(v3 + 8);
      else
        v9 = v8;
      v10 = llvm::raw_ostream::write(a2, v7, v9);
      sub_1C4816AD8(v10, " ");
      v3 += 24;
    }
    while (v3 != v4);
  }
  return sub_1C4816AD8(a2, "\n");
}

llvm::raw_ostream *llvm::SubtargetFeatures::dump(llvm::SubtargetFeatures *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return llvm::SubtargetFeatures::print(this, v2);
}

void llvm::SubtargetFeatures::getDefaultSubtargetFeatures(int64x2_t *this, const llvm::Triple *a2)
{
  int v3;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v3 = *((_DWORD *)a2 + 6);
    if (v3 != 21)
    {
      if (v3 != 23)
        return;
      llvm::SubtargetFeatures::AddFeature(this, "64bit", 5uLL, 1);
    }
    llvm::SubtargetFeatures::AddFeature(this, "altivec", 7uLL, 1);
  }
}

uint64_t llvm::TargetRegistry::RegisterTarget(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;

  if (!*(_QWORD *)(result + 16))
  {
    v6 = qword_1ED834A00;
    qword_1ED834A00 = result;
    *(_QWORD *)(result + 16) = a2;
    *(_QWORD *)(result + 24) = a3;
    *(_QWORD *)(result + 32) = a4;
    *(_QWORD *)result = v6;
    *(_QWORD *)(result + 8) = a5;
    *(_BYTE *)(result + 40) = a6;
  }
  return result;
}

double llvm::createWasmObjectWriter@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double result;

  v6 = operator new();
  v7 = *a1;
  *a1 = 0;
  *(_QWORD *)v6 = &off_1E8184460;
  *(_QWORD *)(v6 + 16) = v7;
  result = 0.0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_DWORD *)(v6 + 88) = 0;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_DWORD *)(v6 + 112) = 0;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_DWORD *)(v6 + 136) = 0;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_DWORD *)(v6 + 160) = 0;
  *(_DWORD *)(v6 + 184) = 0;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 236) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_DWORD *)(v6 + 272) = 0;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_DWORD *)(v6 + 296) = 0;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_QWORD *)(v6 + 304) = v6 + 320;
  *(_QWORD *)(v6 + 312) = 0x400000000;
  *(_QWORD *)(v6 + 576) = v6 + 592;
  *(_QWORD *)(v6 + 584) = 0x400000000;
  *(_OWORD *)(v6 + 912) = 0u;
  *(_QWORD *)(v6 + 925) = 0;
  *(_QWORD *)(v6 + 936) = a2;
  *(_QWORD *)(v6 + 944) = 0;
  *a3 = v6;
  return result;
}

double llvm::createWasmDwoObjectWriter@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double result;

  v8 = operator new();
  v9 = *a1;
  *a1 = 0;
  *(_QWORD *)v8 = &off_1E8184460;
  *(_QWORD *)(v8 + 16) = v9;
  result = 0.0;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_DWORD *)(v8 + 88) = 0;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_DWORD *)(v8 + 112) = 0;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_DWORD *)(v8 + 136) = 0;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_DWORD *)(v8 + 160) = 0;
  *(_DWORD *)(v8 + 184) = 0;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 236) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_DWORD *)(v8 + 272) = 0;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_DWORD *)(v8 + 296) = 0;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_QWORD *)(v8 + 304) = v8 + 320;
  *(_QWORD *)(v8 + 312) = 0x400000000;
  *(_QWORD *)(v8 + 576) = v8 + 592;
  *(_QWORD *)(v8 + 584) = 0x400000000;
  *(_OWORD *)(v8 + 912) = 0u;
  *(_DWORD *)(v8 + 928) = 0;
  *(_BYTE *)(v8 + 932) = 1;
  *(_QWORD *)(v8 + 936) = a2;
  *(_QWORD *)(v8 + 944) = a3;
  *a4 = v8;
  return result;
}

void sub_1C62C31F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4[2];
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _DWORD v8[6];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  v4[0] = &v5;
  v4[1] = (void *)0x100000000;
  v6 = v8;
  v7 = 0x400000000;
  v8[4] = 1;
  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = *(_QWORD *)a1;
    v3 = 72 * v1;
    do
    {
      v2 = sub_1C62C32C8(v2, v4) + 72;
      v3 -= 72;
    }
    while (v3);
    if (v6 != v8)
      free(v6);
  }
  if (v4[0] != &v5)
    free(v4[0]);
}

uint64_t sub_1C62C32C8(uint64_t a1, _DWORD *a2)
{
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x100000000;
  if (a2[2])
    sub_1C62249BC(a1, (uint64_t)a2);
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 0x400000000;
  if (a2[8])
    sub_1C62249BC(a1 + 24, (uint64_t)(a2 + 6));
  *(_DWORD *)(a1 + 56) = a2[14];
  return a1;
}

char **sub_1C62C334C(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = v3 << 6;
    do
    {
      v5 = &v2[v4];
      v6 = *(char **)&v2[v4 - 40];
      if (&v2[v4 - 24] != v6)
        free(v6);
      v7 = (char *)*((_QWORD *)v5 - 8);
      if (v5 - 48 != v7)
        free(v7);
      v4 -= 64;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_1C62C33D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _DWORD v12[6];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v7 = &v9;
    v8 = 0x100000000;
    v10 = v12;
    v11 = 0x400000000;
    v12[4] = 1;
    v2 = 72 * v1;
    v3 = *(_QWORD *)a1 + 40;
    v6 = 2;
    do
    {
      v4 = *(void **)(v3 - 16);
      if ((void *)v3 != v4)
        free(v4);
      v5 = *(void **)(v3 - 40);
      if ((void *)(v3 - 24) != v5)
        free(v5);
      v3 += 72;
      v2 -= 72;
    }
    while (v2);
    if (v10 != v12)
      free(v10);
    if (v7 != &v9)
      free(v7);
  }
}

BOOL sub_1C62C350C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  _BOOL8 result;
  BOOL v14;

  if (*(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
    return 0;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 8))
    return 0;
  if ((_DWORD)v2)
  {
    v3 = *(_DWORD **)a1;
    v4 = *(_DWORD **)a2;
    v5 = 4 * v2;
    while (*v3 == *v4)
    {
      ++v3;
      ++v4;
      v5 -= 4;
      if (!v5)
        goto LABEL_7;
    }
    return 0;
  }
LABEL_7:
  v6 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v6 != *(_DWORD *)(a2 + 32))
    return 0;
  if (!(_DWORD)v6)
    return 1;
  v7 = *(int **)(a1 + 24);
  v8 = *(int **)(a2 + 24);
  v9 = 4 * v6 - 4;
  do
  {
    v11 = *v7++;
    v10 = v11;
    v12 = *v8++;
    result = v10 == v12;
    v14 = v10 != v12 || v9 == 0;
    v9 -= 4;
  }
  while (!v14);
  return result;
}

void sub_1C62C35B0(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6[2];
  uint64_t v7;
  void *v8[2];
  _BYTE v9[16];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 || *(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 16);
    if (v3 <= 4 * v2 || v3 < 0x41)
    {
      v6[0] = &v7;
      v6[1] = (void *)0x100000000;
      v8[0] = v9;
      v8[1] = (void *)0x400000000;
      v10 = 1;
      if ((_DWORD)v3)
      {
        v4 = *(_QWORD *)a1;
        v5 = 72 * v3;
        do
        {
          sub_1C62249BC(v4, (uint64_t)v6);
          sub_1C62249BC(v4 + 24, (uint64_t)v8);
          *(_DWORD *)(v4 + 56) = v10;
          v4 += 72;
          v5 -= 72;
        }
        while (v5);
        *(_QWORD *)(a1 + 8) = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 8) = 0;
      }
      if (v8[0] != v9)
        free(v8[0]);
      if (v6[0] != &v7)
        free(v6[0]);
    }
    else
    {
      sub_1C59643FC(a1);
    }
  }
}

void sub_1C62C375C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v3 = *a1;
    v4 = v2 << 6;
    do
    {
      v5 = v3 + v4;
      v6 = *(void **)(v3 + v4 - 40);
      if ((void *)(v3 + v4 - 24) != v6)
        free(v6);
      v7 = *(void **)(v5 - 64);
      if ((void *)(v5 - 48) != v7)
        free(v7);
      v4 -= 64;
    }
    while (v4);
  }
  *((_DWORD *)a1 + 2) = 0;
}

uint64_t sub_1C62C37C8(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C596455C((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

unint64_t sub_1C62C3874(unint64_t result, __int128 *a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[7];
  uint64_t v22;

  v2 = result;
  v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12))
  {
    v11 = a2[5];
    v21[4] = a2[4];
    v21[5] = v11;
    v21[6] = a2[6];
    v22 = *((_QWORD *)a2 + 14);
    v12 = a2[1];
    v21[0] = *a2;
    v21[1] = v12;
    v13 = a2[3];
    v21[2] = a2[2];
    v21[3] = v13;
    result = sub_1C530363C(result, (unint64_t)v21);
    v14 = *(_QWORD *)v2 + 120 * *(unsigned int *)(v2 + 8);
    v16 = *(_OWORD *)(result + 80);
    v15 = *(_OWORD *)(result + 96);
    v17 = *(_OWORD *)(result + 64);
    *(_QWORD *)(v14 + 112) = *(_QWORD *)(result + 112);
    *(_OWORD *)(v14 + 80) = v16;
    *(_OWORD *)(v14 + 96) = v15;
    *(_OWORD *)(v14 + 64) = v17;
    v18 = *(_OWORD *)result;
    v19 = *(_OWORD *)(result + 16);
    v20 = *(_OWORD *)(result + 48);
    *(_OWORD *)(v14 + 32) = *(_OWORD *)(result + 32);
    *(_OWORD *)(v14 + 48) = v20;
    *(_OWORD *)v14 = v18;
    *(_OWORD *)(v14 + 16) = v19;
  }
  else
  {
    v4 = *(_QWORD *)result + 120 * v3;
    v5 = *a2;
    v6 = a2[1];
    v7 = a2[3];
    *(_OWORD *)(v4 + 32) = a2[2];
    *(_OWORD *)(v4 + 48) = v7;
    *(_OWORD *)v4 = v5;
    *(_OWORD *)(v4 + 16) = v6;
    v8 = a2[4];
    v9 = a2[5];
    v10 = a2[6];
    *(_QWORD *)(v4 + 112) = *((_QWORD *)a2 + 14);
    *(_OWORD *)(v4 + 80) = v9;
    *(_OWORD *)(v4 + 96) = v10;
    *(_OWORD *)(v4 + 64) = v8;
  }
  ++*(_DWORD *)(v2 + 8);
  return result;
}

uint64_t sub_1C62C3954(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  result = sub_1C62C3A0C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    v9 = sub_1C62C3DD0(a2, a3, v12);
    sub_1C614C900(v9, a3);
    result = sub_1C614C900(v9 + 24, a3 + 24);
    *(_DWORD *)(v9 + 56) = *(_DWORD *)(a3 + 56);
    *(_DWORD *)(v9 + 64) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 72 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_1C62C3A0C(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  int v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _DWORD v20[6];
  void *v21[2];
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _DWORD v25[6];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v21[0] = &v22;
    v21[1] = (void *)0x100000000;
    v23 = v25;
    v24 = 0x400000000;
    v5 = 1;
    v25[4] = 1;
    v16[0] = &v17;
    v16[1] = (void *)0x100000000;
    v18 = v20;
    v19 = 0x400000000;
    v20[4] = 2;
    v9 = a2 - 1;
    v10 = sub_1C62C3BF4(a3) & (a2 - 1);
    v11 = a1 + 72 * v10;
    if (!sub_1C62C350C(a3, v11))
    {
      v15 = 0;
      v14 = 1;
      while (!sub_1C62C350C(v11, (uint64_t)v21))
      {
        v12 = sub_1C62C350C(v11, (uint64_t)v16);
        v13 = v15;
        if (v12 && v15 == 0)
          v13 = v11;
        v15 = v13;
        v10 = (v10 + v14) & v9;
        v11 = a1 + 72 * v10;
        ++v14;
        if (sub_1C62C350C(a3, v11))
          goto LABEL_5;
      }
      v5 = 0;
      if (v15)
        v11 = v15;
    }
LABEL_5:
    *a4 = v11;
    if (v18 != v20)
      free(v18);
    if (v16[0] != &v17)
      free(v16[0]);
    if (v23 != v25)
      free(v23);
    if (v21[0] != &v22)
      free(v21[0]);
  }
  else
  {
    v5 = 0;
    *a4 = 0;
  }
  return v5;
}

unint64_t sub_1C62C3BF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t result;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;

  v2 = *(unsigned int *)(a1 + 56);
  v3 = sub_1C4D9B584();
  v4 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v3 + 8 * v2)) ^ ((0x9DDFEA08EB382D69 * (v3 + 8 * v2)) >> 47));
  result = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v15 = result;
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6)
  {
    v7 = *(int **)a1;
    v8 = 4 * v6;
    do
    {
      v9 = *v7++;
      v14 = v9;
      result = sub_1C62C3CB4((uint64_t *)&v15, &v14);
      v15 = result;
      v8 -= 4;
    }
    while (v8);
  }
  v10 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v10)
  {
    v11 = *(int **)(a1 + 24);
    v12 = 4 * v10;
    do
    {
      v13 = *v11++;
      v14 = v13;
      result = sub_1C62C3CB4((uint64_t *)&v15, &v14);
      v15 = result;
      v12 -= 4;
    }
    while (v12);
  }
  return result;
}

unint64_t sub_1C62C3CB4(uint64_t *a1, int *a2)
{
  _OWORD v5[4];
  _OWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  v8 = sub_1C4D9B584();
  return sub_1C62C3D50((char *)v5, v5, (char *)v6, *a1, a2);
}

unint64_t sub_1C62C3D50(char *a1, _QWORD *__dst, char *a3, uint64_t a4, int *a5)
{
  _QWORD *v8;
  char *v9;
  uint64_t v11;
  int v12[2];

  v11 = 0;
  v8 = sub_1C4E37644(a1, &v11, __dst, (unint64_t)a3, a4);
  *(_QWORD *)v12 = v11;
  v9 = (char *)sub_1C4ED49B0(a1, (uint64_t *)v12, v8, (unint64_t)a3, *a5);
  return sub_1C4E37BA0(a1, *(uint64_t *)v12, v9, a3);
}

uint64_t sub_1C62C3DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v9[2];
  _QWORD v10[3];
  _DWORD v11[6];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5969628(a1, v6);
  v9[0] = 0;
  sub_1C62C3A0C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, v9);
  a3 = v9[0];
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  v9[0] = (uint64_t)v10;
  v9[1] = 0x100000000;
  v10[1] = v11;
  v10[2] = 0x400000000;
  v11[4] = 1;
  if (!sub_1C62C350C(a3, (uint64_t)v9))
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_1C62C3EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9[2];
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _DWORD v13[6];
  void *v14[2];
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _DWORD v18[6];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  sub_1C62C31F4(a1);
  v14[0] = &v15;
  v14[1] = (void *)0x100000000;
  v16 = v18;
  v17 = 0x400000000;
  v18[4] = 1;
  v9[0] = &v10;
  v9[1] = (void *)0x100000000;
  v11 = v13;
  v12 = 0x400000000;
  v13[4] = 2;
  if (a2 != a3)
  {
    do
    {
      if (!sub_1C62C350C(a2, (uint64_t)v14) && !sub_1C62C350C(a2, (uint64_t)v9))
      {
        v8 = 0;
        sub_1C62C3A0C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
        v7 = v8;
        sub_1C614C900(v8, a2);
        sub_1C614C900(v7 + 24, a2 + 24);
        *(_DWORD *)(v7 + 56) = *(_DWORD *)(a2 + 56);
        *(_DWORD *)(v7 + 64) = *(_DWORD *)(a2 + 64);
        ++*(_DWORD *)(a1 + 8);
      }
      v6 = *(void **)(a2 + 24);
      if ((void *)(a2 + 40) != v6)
        free(v6);
      if (a2 + 16 != *(_QWORD *)a2)
        free(*(void **)a2);
      a2 += 72;
    }
    while (a2 != a3);
    if (v11 != v13)
      free(v11);
  }
  if (v9[0] != &v10)
    free(v9[0]);
  if (v16 != v18)
    free(v16);
  if (v14[0] != &v15)
    free(v14[0]);
}

uint64_t sub_1C62C40B0(uint64_t a1, _DWORD *a2)
{
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x100000000;
  if (a2[2])
    sub_1C614C900(a1, (uint64_t)a2);
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 0x400000000;
  if (a2[8])
    sub_1C614C900(a1 + 24, (uint64_t)(a2 + 6));
  *(_DWORD *)(a1 + 56) = a2[14];
  return a1;
}

void sub_1C62C4134(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 64, &v5);
  sub_1C62C41A0(a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C62C41A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v5 = *(_DWORD **)a1;
    v6 = v2 << 6;
    do
    {
      sub_1C62C40B0(a2, v5);
      v5 += 16;
      a2 += 64;
      v6 -= 64;
    }
    while (v6);
    v7 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_DWORD **)a1;
      v9 = v7 << 6;
      do
      {
        v10 = (char *)v8 + v9;
        v11 = *(char **)((char *)v8 + v9 - 40);
        if ((char *)v8 + v9 - 24 != v11)
          free(v11);
        v12 = (char *)*((_QWORD *)v10 - 8);
        if (v10 - 48 != v12)
          free(v12);
        v9 -= 64;
      }
      while (v9);
    }
  }
}

uint64_t llvm::createWinCOFFObjectWriter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;

  v6 = operator new();
  v7 = *a1;
  *a1 = 0;
  *(_QWORD *)v6 = &off_1E8184508;
  *(_QWORD *)(v6 + 8) = a2;
  *(_DWORD *)(v6 + 16) = 1;
  *(_QWORD *)(v6 + 24) = v7;
  *(_WORD *)(v6 + 32) = 0;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *(_DWORD *)(v6 + 100) = 0;
  result = llvm::StringTableBuilder::StringTableBuilder(v6 + 104, 1u, 1);
  *(_BYTE *)(v6 + 226) = 0;
  *(_QWORD *)(v6 + 152) = 0;
  *(_QWORD *)(v6 + 160) = 0;
  *(_DWORD *)(v6 + 168) = 0;
  *(_QWORD *)(v6 + 176) = 0;
  *(_QWORD *)(v6 + 184) = 0;
  *(_DWORD *)(v6 + 192) = 0;
  *(_QWORD *)(v6 + 200) = 0;
  *(_QWORD *)(v6 + 208) = 0;
  *(_DWORD *)(v6 + 216) = 0;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  v9 = *(_DWORD *)(*(_QWORD *)(v6 + 24) + 8);
  *(_WORD *)(v6 + 32) = v9;
  *(_BYTE *)(v6 + 225) = (unsigned __int16)v9 == 43620;
  *a3 = v6;
  return result;
}

uint64_t llvm::createXCOFFObjectWriter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[6];
  uint64_t v11;
  uint64_t v12[6];
  uint64_t v13[6];
  uint64_t v14[6];
  uint64_t v15[8];

  v15[6] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  v7 = *a1;
  *a1 = 0;
  *(_QWORD *)v6 = &off_1E8184570;
  *(_DWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_WORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = a2;
  *(_DWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = v7;
  llvm::StringTableBuilder::StringTableBuilder(v6 + 64, 8u, 1);
  v8 = 0xFFFFFFFFLL;
  if (*(_BYTE *)(*(_QWORD *)(v6 + 56) + 8))
    v8 = -1;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 112) = v8;
  *(_DWORD *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 144) = 0;
  *(_QWORD *)(v6 + 152) = 0;
  *(_DWORD *)(v6 + 160) = 0;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  *(_OWORD *)(v6 + 408) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_OWORD *)(v6 + 552) = 0u;
  *(_OWORD *)(v6 + 568) = 0u;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  v15[0] = v6 + 216;
  v15[1] = v6 + 264;
  sub_1C596EEB8((uint64_t)v10, v15, 2);
  sub_1C596EFF4(v6 + 600, ".text", 5uLL, 32, 0, v10);
  sub_1C484143C((uint64_t)v10);
  v14[0] = v6 + 312;
  v14[1] = v6 + 360;
  v14[2] = v6 + 408;
  sub_1C596EEB8((uint64_t)v15, v14, 3);
  sub_1C596EFF4(v6 + 712, ".data", 5uLL, 64, 0, v15);
  sub_1C484143C((uint64_t)v15);
  v13[0] = v6 + 456;
  sub_1C596EEB8((uint64_t)v14, v13, 1);
  sub_1C596EFF4(v6 + 824, ".bss", 4uLL, 128, 1, v14);
  sub_1C484143C((uint64_t)v14);
  v12[0] = v6 + 504;
  sub_1C596EEB8((uint64_t)v13, v12, 1);
  sub_1C596EFF4(v6 + 936, ".tdata", 6uLL, 1024, 0, v13);
  sub_1C484143C((uint64_t)v13);
  v11 = v6 + 552;
  sub_1C596EEB8((uint64_t)v12, &v11, 1);
  sub_1C596EFF4(v6 + 1048, ".tbss", 5uLL, 2048, 1, v12);
  result = sub_1C484143C((uint64_t)v12);
  *(_QWORD *)(v6 + 1160) = v6 + 600;
  *(_QWORD *)(v6 + 1168) = v6 + 712;
  *(_QWORD *)(v6 + 1176) = v6 + 824;
  *(_QWORD *)(v6 + 1184) = v6 + 936;
  *(_QWORD *)(v6 + 1192) = v6 + 1048;
  *(_QWORD *)(v6 + 1200) = 0;
  *(_QWORD *)(v6 + 1216) = 0;
  *(_QWORD *)(v6 + 1208) = 0;
  *a3 = v6;
  return result;
}

uint64_t *sub_1C62C45DC(uint64_t *result, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v3 = 1 << a2;
  if (a3)
  {
    if (*((_DWORD *)result + 2) <= 0x40u)
    {
      v4 = *result | v3;
LABEL_6:
      *result = v4;
      return result;
    }
    v6 = *result;
    v7 = a2 >> 6;
    v8 = *(_QWORD *)(*result + 8 * (a2 >> 6)) | v3;
  }
  else
  {
    v5 = ~v3;
    if (*((_DWORD *)result + 2) <= 0x40u)
    {
      v4 = *result & v5;
      goto LABEL_6;
    }
    v6 = *result;
    v7 = a2 >> 6;
    v8 = *(_QWORD *)(*result + 8 * (a2 >> 6)) & v5;
  }
  *(_QWORD *)(v6 + 8 * v7) = v8;
  return result;
}

uint64_t llvm::objcarc::createCallInstWithColors(uint64_t **a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  llvm::BasicBlock *v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t FirstNonPHI;
  void *v32;
  uint64_t v33;
  _QWORD v34[7];

  v34[6] = *MEMORY[0x1E0C80C00];
  v32 = v34;
  v33 = 0x100000000;
  if (*(_DWORD *)(a7 + 8))
  {
    v21 = *(_QWORD *)(a6 + 40);
    v30 = 0;
    FirstNonPHI = v21;
    v22 = sub_1C61252B8((uint64_t *)a7, &FirstNonPHI, &v30);
    v23 = v30;
    if (!v22)
      v23 = *(_QWORD *)a7 + 16 * *(unsigned int *)(a7 + 16);
    v24 = *(_QWORD *)(v23 + 8);
    v25 = (llvm::BasicBlock *)(v24 & 0xFFFFFFFFFFFFFFF8);
    if ((v24 & 4) != 0)
      v25 = **(llvm::BasicBlock ***)v25;
    FirstNonPHI = llvm::BasicBlock::getFirstNonPHI(v25);
    v26 = *(unsigned __int8 *)(FirstNonPHI + 16) - 38;
    v27 = v26 > 0x38;
    v28 = (1 << v26) & 0x100060000000001;
    if (!v27 && v28 != 0)
      sub_1C58C6FD8((uint64_t)&v32, "funclet", &FirstNonPHI);
    v14 = v32;
    v13 = v33;
  }
  else
  {
    v13 = 0;
    v14 = v34;
  }
  v15 = sub_1C53DAB90(a1, a2, a3, a4, (uint64_t)v14, v13, a5, a6);
  v16 = v32;
  if ((_DWORD)v33)
  {
    v17 = 48 * v33;
    v18 = (char *)v32 - 48;
    do
    {
      sub_1C4EEC55C((uint64_t)&v18[v17]);
      v17 -= 48;
    }
    while (v17);
    v16 = v32;
  }
  if (v16 != v34)
    free(v16);
  return v15;
}

uint64_t llvm::createObjCARCOptPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C598528C(v1);
}

uint64_t llvm::ObjCARCOptPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t ResultImpl;
  int v7;
  _BYTE v9[8];
  _QWORD v10[3];
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _OWORD v15[6];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  LOBYTE(v17) = 0;
  BYTE4(v17) = 0;
  LOBYTE(v18) = 0;
  BYTE4(v18) = 0;
  LOBYTE(v19) = 0;
  BYTE4(v19) = 0;
  v20 = 0;
  v21 = 0;
  v10[1] = 0;
  v10[2] = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  memset(v15, 0, sizeof(v15));
  if (llvm::objcarc::EnableARCOpts)
  {
    v5 = *(_QWORD *)(a1 + 40);
    v18 = 0;
    v19 = 0;
    v17 = 0;
    *(_QWORD *)&v15[0] = v5;
    *(_OWORD *)((char *)v15 + 8) = 0uLL;
    *(_OWORD *)((char *)&v15[1] + 8) = 0uLL;
    *(_OWORD *)((char *)&v15[2] + 8) = 0uLL;
    *(_OWORD *)((char *)&v15[3] + 8) = 0uLL;
    *(_OWORD *)((char *)&v15[4] + 8) = 0uLL;
    *((_QWORD *)&v15[5] + 1) = 0;
    v16 = v5;
  }
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AAManager::Key, a1);
  if (sub_1C5985394((uint64_t)v9, a1, ResultImpl + 8))
  {
    v7 = v9[1];
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_DWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_QWORD *)(a3 + 64) = 2;
    *(_DWORD *)(a3 + 72) = 0;
    if (!v7)
      sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
  }
  else
  {
    llvm::InstCountPass::run(a3);
  }
  return sub_1C598D504((uint64_t)v10);
}

llvm::ValueHandleBase *sub_1C62C493C(llvm::ValueHandleBase *result)
{
  llvm::ValueHandleBase *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  v2 = *((_DWORD *)result + 2);
  if (v2 || *((_DWORD *)result + 3))
  {
    v3 = *((unsigned int *)result + 4);
    if (v3 > 4 * v2 && v3 >= 0x41)
      return sub_1C598A580(result);
    if (!(_DWORD)v3)
    {
LABEL_12:
      *((_QWORD *)v1 + 1) = 0;
      return result;
    }
    v4 = 56 * v3;
    result = (llvm::ValueHandleBase *)(*(_QWORD *)result + 8);
    while (1)
    {
      v5 = *((_QWORD *)result - 1);
      if (v5 == -8192)
        goto LABEL_10;
      if (v5 != -4096)
        break;
LABEL_11:
      result = (llvm::ValueHandleBase *)((char *)result + 56);
      v4 -= 56;
      if (!v4)
        goto LABEL_12;
    }
    result = sub_1C61A406C(result);
LABEL_10:
    *((_QWORD *)result - 1) = -4096;
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_1C62C49E0(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_1C598C56C(&v3);
  MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  return a1;
}

_QWORD *sub_1C62C4A24(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[9];
  if (v2 != (void *)a1[8])
    free(v2);
  v3 = (void *)a1[3];
  if (v3 != (void *)a1[2])
    free(v3);
  return a1;
}

uint64_t sub_1C62C4A68(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    sub_1C4DFEB14(a1, a2);
    sub_1C598CB80(a1 + 24, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  }
  return a1;
}

void sub_1C62C4ABC(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 136;
        sub_1C62C4A24((_QWORD *)v3 - 15);
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_1C62C4B24(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (a2 != a1)
  {
    llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)(a1 + 16), (const llvm::SmallPtrSetImplBase *)(a2 + 16));
    llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)(a1 + 64), (const llvm::SmallPtrSetImplBase *)(a2 + 64));
  }
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

uint64_t sub_1C62C4B78(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v7))
  {
    v3 = v7;
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 16);
    v3 = *(_QWORD *)a1 + 16 * v5;
  }
  if (v3 == v4 + 16 * v5)
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 136 * *(_QWORD *)(v3 + 8);
}

uint64_t sub_1C62C4BF8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v13 = 0;
  result = sub_1C61252B8((uint64_t *)a2, a3, &v13);
  v9 = v13;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C61BEBF8(a2, (uint64_t)a3, a3, v13);
    v9 = (_QWORD *)result;
    v12 = *a4;
    *(_QWORD *)result = *a3;
    *(_QWORD *)(result + 8) = v12;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_1C62C4C8C(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C62C4D34(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C62C4DC8(a1, a2, v7);
    *v5 = *a2;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 9) = 0u;
    *(_OWORD *)(v5 + 11) = 0u;
    v5[15] = 0;
    *(_OWORD *)(v5 + 1) = 0u;
    *(_OWORD *)(v5 + 13) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    v5[3] = v5 + 7;
    v5[4] = v5 + 7;
    *((_DWORD *)v5 + 10) = 2;
    v5[9] = v5 + 13;
    v5[10] = v5 + 13;
    *((_DWORD *)v5 + 22) = 2;
  }
  return v5;
}

uint64_t sub_1C62C4D34(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(a1 + (v4 << 7));
    v6 = *v5;
    if (*v5 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = (_QWORD *)(a1 + (v4 << 7));
        v6 = *v5;
        v7 = 1;
        if (*v5 == a3)
          goto LABEL_4;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_4:
  *a4 = v5;
  return v7;
}

_QWORD *sub_1C62C4DC8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C598D3D8(a1, v6);
  v8 = 0;
  sub_1C62C4D34(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C62C4E78(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  result[1] = 0;
  v6 = *((unsigned int *)result + 4);
  if ((_DWORD)v6)
  {
    v7 = (_QWORD *)*result;
    v8 = v6 << 7;
    do
    {
      *v7 = -4096;
      v7 += 16;
      v8 -= 128;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      sub_1C62C4D34(*v5, *((_DWORD *)v5 + 4), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *(_OWORD *)(v10 + 1) = *(_OWORD *)(a2 + 8);
      llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(v10 + 3), v10 + 7, 2, (uint64_t *)(a2 + 24));
      llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(v10 + 9), v10 + 13, 2, (uint64_t *)(a2 + 72));
      *((_BYTE *)v10 + 120) = *(_BYTE *)(a2 + 120);
      ++*((_DWORD *)v5 + 2);
      result = sub_1C62C4A24((_QWORD *)(a2 + 8));
    }
    a2 += 128;
  }
  return result;
}

void sub_1C62C4F70(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  void **v3;

  if (a2)
  {
    v2 = 56 * a2;
    v3 = (void **)(a1 + 16);
    do
    {
      if (((unint64_t)*(v3 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v3 != *(v3 - 1))
        free(*v3);
      v3 += 7;
      v2 -= 56;
    }
    while (v2);
  }
}

uint64_t sub_1C62C4FCC(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  uint64_t v5;

  v5 = 0;
  if (sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v5))
    v3 = v5 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  else
    v3 = 1;
  if (v3)
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + (*(_QWORD *)(v5 + 8) << 7);
}

int32x2_t sub_1C62C5038(uint64_t a1, uint64_t a2)
{
  int v3;
  int32x2_t result;
  _QWORD *v5;
  BOOL v6;
  _QWORD *v7;

  v7 = 0;
  v3 = sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v7);
  v5 = v7;
  if (v3)
    v6 = v7 == (_QWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16));
  else
    v6 = 1;
  if (!v6)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + (v7[1] << 7)) = 0;
    *v5 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

int32x2_t sub_1C62C50BC(uint64_t a1, uint64_t a2)
{
  int32x2_t result;
  _QWORD *v4;
  _QWORD *v5;

  v5 = 0;
  if (sub_1C62C4D34(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v5))
  {
    v4 = v5;
    sub_1C62C4A24(v5 + 1);
    *v4 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_1C62C5128(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_1C598D490(&v3);
  MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  return a1;
}

uint64_t llvm::createObjCARCExpandPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C598D6AC(v1);
}

BOOL sub_1C62C5194(uint64_t a1)
{
  return llvm::Module::getNamedValue(a1, "llvm.objc.retain", 0x10uLL)
      || llvm::Module::getNamedValue(a1, "llvm.objc.release", 0x11uLL)
      || llvm::Module::getNamedValue(a1, "llvm.objc.autorelease", 0x15uLL)
      || llvm::Module::getNamedValue(a1, "llvm.objc.retainAutoreleasedReturnValue", 0x27uLL)
      || llvm::Module::getNamedValue(a1, "llvm.objc.unsafeClaimAutoreleasedReturnValue", 0x2CuLL)
      || llvm::Module::getNamedValue(a1, "llvm.objc.retainBlock", 0x15uLL)
      || llvm::Module::getNamedValue(a1, "llvm.objc.autoreleaseReturnValue", 0x20uLL)
      || llvm::Module::getNamedValue(a1, "llvm.objc.autoreleasePoolPush", 0x1DuLL)
      || llvm::Module::getNamedValue(a1, "llvm.objc.loadWeakRetained", 0x1AuLL)
      || llvm::Module::getNamedValue(a1, "llvm.objc.loadWeak", 0x12uLL)
      || llvm::Module::getNamedValue(a1, "llvm.objc.destroyWeak", 0x15uLL)
      || llvm::Module::getNamedValue(a1, "llvm.objc.storeWeak", 0x13uLL)
      || llvm::Module::getNamedValue(a1, "llvm.objc.initWeak", 0x12uLL)
      || llvm::Module::getNamedValue(a1, "llvm.objc.moveWeak", 0x12uLL)
      || llvm::Module::getNamedValue(a1, "llvm.objc.copyWeak", 0x12uLL)
      || llvm::Module::getNamedValue(a1, "llvm.objc.retainedObject", 0x18uLL)
      || llvm::Module::getNamedValue(a1, "llvm.objc.unretainedObject", 0x1AuLL)
      || llvm::Module::getNamedValue(a1, "llvm.objc.unretainedPointer", 0x1BuLL)
      || llvm::Module::getNamedValue(a1, "llvm.objc.clang.arc.use", 0x17uLL) != 0;
}

uint64_t llvm::createObjCARCAPElimPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C598DA98(v1);
}

uint64_t llvm::createObjCARCContractPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C598E178(v1);
}

uint64_t llvm::ObjCARCContractPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t ResultImpl;
  int v8;
  _BYTE v10[24];
  _QWORD v11[3];
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[25];
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  int v25;
  _BYTE v26[64];

  v11[1] = 0;
  v11[2] = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  memset(v21, 0, sizeof(v21));
  v22 = v26;
  v23 = v26;
  v24 = 8;
  v25 = 0;
  sub_1C598E240((uint64_t)v10, *(_QWORD *)(a1 + 40));
  v6 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AAManager::Key, a1) + 8;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1);
  if (sub_1C598E37C((uint64_t)v10, a1, v6, (llvm::DominatorTree *)(ResultImpl + 8)))
  {
    v8 = v10[1];
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_DWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_QWORD *)(a3 + 64) = 2;
    *(_DWORD *)(a3 + 72) = 0;
    if (!v8)
      sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
  }
  else
  {
    llvm::InstCountPass::run(a3);
  }
  if (v23 != v22)
    free(v23);
  return sub_1C598D504((uint64_t)v11);
}

uint64_t sub_1C62C5510(uint64_t a1, int a2)
{
  uint64_t result;

  if (a2 == 10)
  {
    result = *(_QWORD *)(a1 + 88);
    if (!result)
    {
      result = llvm::Intrinsic::getDeclaration(*(uint64_t **)a1, 225, 0, 0);
      *(_QWORD *)(a1 + 88) = result;
    }
  }
  else
  {
    result = *(_QWORD *)(a1 + 80);
    if (!result)
    {
      result = llvm::Intrinsic::getDeclaration(*(uint64_t **)a1, 224, 0, 0);
      *(_QWORD *)(a1 + 80) = result;
    }
  }
  return result;
}

void sub_1C62C5578(__int128 *a1)
{
  uint64_t v2;

  v2 = sub_1C47AD050((uint64_t)&qword_1ED81A440, 0, 0);
  dword_1ED81A4C0 = 0;
  qword_1ED81A4C8 = (uint64_t)&unk_1E819E900;
  unk_1ED81A4D0 = 0;
  qword_1ED81A440 = (uint64_t)&unk_1E8140060;
  qword_1ED81A4D8 = (uint64_t)&unk_1E819E920;
  qword_1ED81A4E0 = (uint64_t)&unk_1E81400C8;
  qword_1ED81A4F8 = (uint64_t)&qword_1ED81A4E0;
  llvm::cl::Option::setArgStr(v2, "arc-contract-use-objc-claim-rv", 0x1EuLL);
  xmmword_1ED81A460 = *a1;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED81A440);
}

uint64_t llvm::objcarc::CanDecrementRefCount(uint64_t a1, const llvm::Value *a2, llvm::objcarc::ProvenanceAnalysis *a3, int a4)
{
  uint64_t result;

  result = llvm::objcarc::CanDecrementRefCount(a4);
  if ((_DWORD)result)
    return llvm::objcarc::CanAlterRefCount(a1, a2, a3, a4);
  return result;
}

uint64_t llvm::objcarc::Depends(int a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
    __asm { BR              X10 }
  return 1;
}

uint64_t sub_1C62C5764(uint64_t a1, const llvm::Function *a2)
{
  uint64_t v2;
  unsigned int v3;

  v3 = sub_1C4EF1580(v2, a2);
  if (v3 <= 1)
    JUMPOUT(0x1C62C578CLL);
  return llvm::objcarc::CanInterruptRV(v3);
}

BOOL llvm::objcarc::ProvenanceAnalysis::related(llvm::objcarc::ProvenanceAnalysis *this, const llvm::Value *a2, const llvm::Value *a3)
{
  char *v5;
  llvm *v6;
  llvm *v7;
  uint64_t v8;
  const llvm::Value *v10;
  const llvm::Value *v11;
  const llvm::Value *v12;
  const llvm::Value *v13;
  char v14[8];
  uint64_t v15;
  char v16;

  v5 = (char *)this + 32;
  v6 = sub_1C5990BB8(a2, (uint64_t)this + 32);
  v7 = sub_1C5990BB8(a3, (uint64_t)v5);
  v8 = 1;
  if (v6 != v7)
  {
    if (v6 <= v7)
      v10 = v7;
    else
      v10 = v6;
    if (v6 <= v7)
      v11 = v6;
    else
      v11 = v7;
    v12 = v11;
    v13 = v10;
    v14[0] = 1;
    sub_1C62C5B08((uint64_t)this + 8, (uint64_t *)&v12, v14, (uint64_t)&v15);
    if (v16)
    {
      v8 = llvm::objcarc::ProvenanceAnalysis::relatedCheck(this, v11, v10);
      v12 = v11;
      v13 = v10;
      *((_BYTE *)sub_1C62C5D40((uint64_t)this + 8, (uint64_t *)&v12) + 16) = v8;
    }
    else
    {
      return *(_BYTE *)(v15 + 16) != 0;
    }
  }
  return v8;
}

unint64_t *sub_1C62C58A4(unint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t *result;
  uint64_t v6;

  v6 = 0;
  result = (unint64_t *)sub_1C61A45F4(a2, a3, a4, &v6);
  if ((_DWORD)result)
    return sub_1C5990E5C(a1, (_QWORD *)(v6 + 8));
  *a1 = 4;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 6;
  a1[4] = 0;
  a1[5] = 0;
  return result;
}

_QWORD *sub_1C62C5918(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C61A45F4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C62C5994(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 4;
    v5[2] = 0;
    v5[3] = 0;
    v5[4] = 6;
    v5[5] = 0;
    v5[6] = 0;
  }
  return v5;
}

_QWORD *sub_1C62C5994(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5990F28(a1, v6);
  v8 = 0;
  sub_1C61A45F4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

llvm::ValueHandleBase *sub_1C62C5A44(llvm::ValueHandleBase *result, uint64_t *a2, uint64_t *a3)
{
  llvm::ValueHandleBase *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *((_QWORD *)result + 1) = 0;
  v6 = *((unsigned int *)result + 4);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 56 * v6;
    do
    {
      *v7 = -4096;
      v7 += 7;
      v8 -= 56;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      sub_1C61A45F4(*(_QWORD *)v5, *((_DWORD *)v5 + 4), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      sub_1C5990E5C((unint64_t *)v10 + 1, a2 + 1);
      ++*((_DWORD *)v5 + 2);
      result = sub_1C61A406C((llvm::ValueHandleBase *)(a2 + 1));
    }
    a2 += 7;
  }
  return result;
}

uint64_t sub_1C62C5B08@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C6200DDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C62C5BAC(a1, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_QWORD *)(result + 8) = a2[1];
    *(_BYTE *)(result + 16) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *sub_1C62C5BAC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_8;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_8:
    sub_1C5990FEC(a1, v6);
    v8 = 0;
    sub_1C6200DDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096 || a3[1] != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C62C5C68(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = 24 * v6;
    v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *v7 = v9;
      v7 = (int64x2_t *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    v11 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -4096 || v11 != -4096) && (v10 != -8192 || v11 != -8192))
    {
      v13 = 0;
      result = sub_1C6200DDC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v10, v11, &v13);
      v12 = v13;
      *v13 = *(_QWORD *)a2;
      v12[1] = *(_QWORD *)(a2 + 8);
      *((_BYTE *)v12 + 16) = *(_BYTE *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

_QWORD *sub_1C62C5D40(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6200DDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C62C5BAC(a1, a2, v7);
    *v5 = *a2;
    v5[1] = a2[1];
    *((_BYTE *)v5 + 16) = 0;
  }
  return v5;
}

uint64_t llvm::createPAEvalPass(llvm *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F5721;
  *(_DWORD *)(result + 24) = 2;
  *(_QWORD *)result = &off_1E8184F78;
  return result;
}

void *llvm::objcarc::PtrState::ResetSequenceProgress(uint64_t a1, char a2)
{
  void *result;

  *(_BYTE *)(a1 + 2) = a2;
  *(_BYTE *)(a1 + 1) = 0;
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1C4E4DBF0(a1 + 24);
  result = sub_1C4E4DBF0(a1 + 72);
  *(_BYTE *)(a1 + 120) = 0;
  return result;
}

BOOL llvm::objcarc::BottomUpPtrState::InitBottomUp(uint64_t a1, uint64_t a2, llvm::Instruction *this)
{
  int v6;
  int MDKindID;
  uint64_t MetadataImpl;
  char v9;
  _BOOL8 result;
  int v11;

  v6 = *(unsigned __int8 *)(a1 + 2);
  if (*(_BYTE *)(a2 + 12))
  {
    MDKindID = *(_DWORD *)(a2 + 8);
  }
  else
  {
    MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)a2, "clang.imprecise_release", 0x17uLL);
    v11 = *(unsigned __int8 *)(a2 + 12);
    *(_DWORD *)(a2 + 8) = MDKindID;
    if (!v11)
      *(_BYTE *)(a2 + 12) = 1;
  }
  if (*((_QWORD *)this + 6) || (*((_BYTE *)this + 23) & 0x20) != 0)
    MetadataImpl = llvm::Instruction::getMetadataImpl(this, MDKindID);
  else
    MetadataImpl = 0;
  if (MetadataImpl)
    v9 = 5;
  else
    v9 = 4;
  *(_BYTE *)(a1 + 2) = v9;
  *(_BYTE *)(a1 + 1) = 0;
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1C4E4DBF0(a1 + 24);
  sub_1C4E4DBF0(a1 + 72);
  *(_BYTE *)(a1 + 120) = 0;
  if (!MetadataImpl)
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 72), (uint64_t)this);
  *(_QWORD *)(a1 + 16) = MetadataImpl;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)a1;
  *(_BYTE *)(a1 + 9) = (*((_WORD *)this + 9) & 3u) - 1 < 2;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 24), (uint64_t)this);
  result = v6 == 5;
  *(_BYTE *)a1 = 1;
  return result;
}

void llvm::objcarc::BottomUpPtrState::MatchWithRetain(llvm::objcarc::BottomUpPtrState *this)
{
  *(_BYTE *)this = 1;
  __asm { BR              X11 }
}

uint64_t sub_1C62C5F90@<X0>(uint64_t a1@<X8>)
{
  sub_1C4E4DBF0(a1 + 72);
  return 1;
}

uint64_t sub_1C62C5FA4@<X0>(uint64_t a1@<X8>)
{
  if (!*(_QWORD *)(a1 + 16))
    JUMPOUT(0x1C62C5F9CLL);
  return sub_1C62C5F90(a1);
}

void sub_1C62C5FB0()
{
  JUMPOUT(0x1C62C5F9CLL);
}

uint64_t llvm::objcarc::BottomUpPtrState::HandlePotentialAlterRefCount(uint64_t a1, uint64_t a2, const llvm::Value *a3, llvm::objcarc::ProvenanceAnalysis *a4, int a5)
{
  int v10;
  uint64_t result;
  int CanAlterRefCount;

  v10 = *(unsigned __int8 *)(a1 + 2);
  result = llvm::objcarc::CanDecrementRefCount(a5);
  if ((_DWORD)result)
  {
    CanAlterRefCount = llvm::objcarc::CanAlterRefCount(a2, a3, a4, a5);
    result = 0;
    if (CanAlterRefCount)
    {
      if (v10 == 3)
      {
        *(_BYTE *)(a1 + 2) = 2;
        return 1;
      }
    }
  }
  return result;
}

BOOL llvm::objcarc::TopDownPtrState::InitTopDown(uint64_t a1, int a2, uint64_t a3)
{
  _BOOL8 v4;

  if (a2 == 1)
  {
    v4 = 0;
  }
  else
  {
    v4 = *(unsigned __int8 *)(a1 + 2) == 1;
    *(_WORD *)(a1 + 1) = 256;
    *(_WORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    sub_1C4E4DBF0(a1 + 24);
    sub_1C4E4DBF0(a1 + 72);
    *(_BYTE *)(a1 + 120) = 0;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)a1;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 24), a3);
  }
  *(_BYTE *)a1 = 1;
  return v4;
}

uint64_t llvm::objcarc::TopDownPtrState::MatchWithRelease(uint64_t a1, uint64_t a2, llvm::Instruction *this)
{
  int v6;
  int MDKindID;
  uint64_t MetadataImpl;
  int v10;

  *(_BYTE *)a1 = 0;
  v6 = *(unsigned __int8 *)(a1 + 2);
  if (*(_BYTE *)(a2 + 12))
  {
    MDKindID = *(_DWORD *)(a2 + 8);
  }
  else
  {
    MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)a2, "clang.imprecise_release", 0x17uLL);
    v10 = *(unsigned __int8 *)(a2 + 12);
    *(_DWORD *)(a2 + 8) = MDKindID;
    if (!v10)
      *(_BYTE *)(a2 + 12) = 1;
  }
  if (*((_QWORD *)this + 6) || (*((_BYTE *)this + 23) & 0x20) != 0)
    MetadataImpl = llvm::Instruction::getMetadataImpl(this, MDKindID);
  else
    MetadataImpl = 0;
  if ((v6 - 1) >= 2)
  {
    if (!v6)
      return 0;
  }
  else if (v6 == 1 || MetadataImpl)
  {
    sub_1C4E4DBF0(a1 + 72);
  }
  *(_QWORD *)(a1 + 16) = MetadataImpl;
  *(_BYTE *)(a1 + 9) = (*((_WORD *)this + 9) & 3u) - 1 < 2;
  return 1;
}

uint64_t llvm::objcarc::TopDownPtrState::HandlePotentialUse(uint64_t result, uint64_t a2, const llvm::Value *a3, const llvm::Value **a4, int a5)
{
  uint64_t v5;

  if (*(_BYTE *)(result + 2) == 2)
  {
    v5 = result;
    result = llvm::objcarc::CanUse(a2, a3, a4, a5);
    if ((_DWORD)result)
      *(_BYTE *)(v5 + 2) = 3;
  }
  return result;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getOffset(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getSizeOf()
{
  return 60;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getOffset(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getSizeOf()
{
  return 114;
}

void llvm::object::ArchiveMemberHeader::getRawName(llvm::object::ArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  _BYTE *v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  uint64_t v12[4];
  __int16 v13;
  const char *v14;
  __int16 v15;
  _BYTE v16[40];
  _BYTE *v17;

  v3 = *((_QWORD *)this + 1);
  v4 = *(_BYTE *)(v3 + 98) & 7;
  if (v4 == 4 || v4 == 2)
  {
    v6 = (_BYTE *)*((_QWORD *)this + 2);
    if (*v6 == 32)
    {
      v17 = &v6[-*(_QWORD *)(v3 + 16)];
      v14 = "name contains a leading space for archive member header at offset ";
      v15 = 259;
      v13 = 268;
      v12[0] = (uint64_t)&v17;
      sub_1C4825FE4((uint64_t *)&v14, v12, (uint64_t)v16);
      sub_1C5992A84((uint64_t *)a2, (llvm::Twine *)v16);
      *(_BYTE *)(a2 + 16) |= 1u;
      return;
    }
    v7 = 32;
  }
  else
  {
    v6 = (_BYTE *)*((_QWORD *)this + 2);
    v10 = *v6;
    if (v10 == 35 || v10 == 47)
      v7 = 32;
    else
      v7 = 47;
  }
  v8 = memchr(v6, v7, 0x10uLL);
  v9 = v8 - v6;
  if (!v8)
    v9 = -1;
  *(_BYTE *)(a2 + 16) &= ~1u;
  if (v9 == -1)
    v9 = 16;
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v9;
}

void getArchiveMemberDecField(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[5];
  uint64_t v22[5];
  uint64_t v23[5];
  uint64_t v24[5];
  _BYTE v25[40];
  uint64_t v26;
  uint64_t v27;

  v24[0] = 0;
  if (llvm::getAsUnsignedInteger(a2, a3, 0xAu, (unint64_t *)v24))
  {
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 80))(a4);
    v19 = "characters in ";
    v20 = 259;
    sub_1C4825FE4((uint64_t *)&v19, a1, (uint64_t)v21);
    v17 = " field in archive member header are not all decimal numbers: '";
    v18 = 259;
    sub_1C4825FE4(v21, (uint64_t *)&v17, (uint64_t)v22);
    v16 = 261;
    v15[0] = (uint64_t)a2;
    v15[1] = a3;
    sub_1C4825FE4(v22, v15, (uint64_t)v23);
    v13 = "' for the archive member header at offset ";
    v14 = 259;
    sub_1C4825FE4(v23, (uint64_t *)&v13, (uint64_t)v24);
    v12 = 268;
    v11 = &v27;
    sub_1C4825FE4(v24, (uint64_t *)&v11, (uint64_t)v25);
    sub_1C5992A84(&v26, (llvm::Twine *)v25);
    *(_BYTE *)(a5 + 8) |= 1u;
    v10 = v26;
  }
  else
  {
    v10 = v24[0];
    *(_BYTE *)(a5 + 8) &= ~1u;
  }
  *(_QWORD *)a5 = v10;
}

uint64_t llvm::object::BigArchiveMemberHeader::getName(llvm::object::BigArchiveMemberHeader *this)
{
  return (*(uint64_t (**)(llvm::object::BigArchiveMemberHeader *))(*(_QWORD *)this + 24))(this);
}

_QWORD *llvm::object::ArchiveMemberHeader::getNextChildLoc@<X0>(llvm::object::ArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(llvm::object::ArchiveMemberHeader *))(*(_QWORD *)this + 104))(this);
  result = (*(_QWORD *(**)(_QWORD **__return_ptr, llvm::object::ArchiveMemberHeader *))(*(_QWORD *)this + 96))(&v10, this);
  if ((v11 & 1) != 0)
  {
    v6 = (unint64_t)v10;
    v10 = 0;
LABEL_11:
    *(_BYTE *)(a2 + 8) |= 1u;
    goto LABEL_6;
  }
  if ((_BYTE)v10)
    goto LABEL_5;
  result = (*(_QWORD *(**)(unint64_t *__return_ptr, llvm::object::ArchiveMemberHeader *))(*(_QWORD *)this + 72))(&v8, this);
  if ((v9 & 1) != 0)
  {
    v6 = v8;
    goto LABEL_11;
  }
  v4 += v8;
LABEL_5:
  v6 = *((_QWORD *)this + 2) + ((v4 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v7 = *(_QWORD *)(*((_QWORD *)this + 1) + 16) + *(_QWORD *)(*((_QWORD *)this + 1) + 24);
  *(_BYTE *)(a2 + 8) &= ~1u;
  if (v6 != v7)
  {
LABEL_6:
    *(_QWORD *)a2 = v6;
    goto LABEL_7;
  }
  *(_QWORD *)a2 = 0;
LABEL_7:
  if ((v11 & 1) != 0)
  {
    result = v10;
    v10 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void llvm::object::BigArchiveMemberHeader::getNextChildLoc(llvm::object::BigArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if ((*(uint64_t (**)(llvm::object::BigArchiveMemberHeader *))(*(_QWORD *)this + 80))(this) == *(_QWORD *)(*((_QWORD *)this + 1) + 144))
  {
    *(_BYTE *)(a2 + 8) &= ~1u;
    *(_QWORD *)a2 = 0;
  }
  else
  {
    llvm::object::BigArchiveMemberHeader::getNextOffset(this, (uint64_t)&v6);
    if ((v7 & 1) != 0)
    {
      v4 = v6;
      v5 = *(_BYTE *)(a2 + 8) | 1;
    }
    else
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 16) + v6;
      v5 = *(_BYTE *)(a2 + 8) & 0xFE;
    }
    *(_BYTE *)(a2 + 8) = v5;
    *(_QWORD *)a2 = v4;
  }
}

uint64_t llvm::object::Archive::Child::Child(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, __int16 a5)
{
  uint64_t v6;
  uint64_t v8;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = a5;
  llvm::object::Archive::createArchiveMemberHeader(a2, a3, a4, 0, &v8);
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  return a1;
}

_QWORD *llvm::object::Archive::createArchiveMemberHeader@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char **a4@<X3>, _QWORD *a5@<X8>)
{
  int v10;
  _QWORD *v11;
  _QWORD *result;

  v10 = *(_BYTE *)(a1 + 98) & 7;
  v11 = (_QWORD *)operator new();
  if (v10 == 6)
    result = llvm::object::BigArchiveMemberHeader::BigArchiveMemberHeader(v11, a1, a2, a3, a4);
  else
    result = llvm::object::ArchiveMemberHeader::ArchiveMemberHeader(v11, a1, a2, a3, a4);
  *a5 = result;
  if (a4)
  {
    if (!*a4)
      *a4 = 0;
  }
  return result;
}

_QWORD *llvm::object::Archive::Child::getName@<X0>(llvm::object::Archive::Child *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  result = (*(_QWORD *(**)(_QWORD **__return_ptr))(**((_QWORD **)this + 1) + 72))(&v12);
  if ((v13 & 1) != 0)
  {
    v8 = v12;
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v8;
  }
  else
  {
    v5 = v12;
    v6 = *((_QWORD *)this + 1);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6);
    result = (*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(&v10, v6, (uint64_t)v5 + v7);
    if ((v11 & 1) != 0)
    {
      v9 = v10;
      *(_BYTE *)(a2 + 16) |= 1u;
      *(_QWORD *)a2 = v9;
    }
    else
    {
      *(_OWORD *)a2 = v10;
      *(_BYTE *)(a2 + 16) &= ~1u;
    }
    if ((v13 & 1) != 0)
    {
      result = v12;
      v12 = 0;
      if (result)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  return result;
}

void llvm::object::Archive::Child::getMemoryBufferRef(llvm::object::Archive::Child *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  llvm::object::Archive::Child::getName(this, (uint64_t)v12);
  v4 = v12[0];
  if ((v13 & 1) != 0)
  {
    *(_BYTE *)(a2 + 32) |= 1u;
    *(_QWORD *)a2 = v4;
  }
  else
  {
    v5 = v12[1];
    llvm::object::Archive::Child::getBuffer(this, (uint64_t)&v10);
    if ((v11 & 1) != 0)
    {
      v7 = 261;
      v6[0] = v4;
      v6[1] = v5;
      v9 = v10;
      sub_1C61D4644((llvm::Twine *)v6, 0, 0, &v9, &v8);
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      *(_BYTE *)(a2 + 32) |= 1u;
      *(_QWORD *)a2 = v8;
    }
    else
    {
      *(_BYTE *)(a2 + 32) &= ~1u;
      *(_OWORD *)a2 = v10;
      *(_QWORD *)(a2 + 16) = v4;
      *(_QWORD *)(a2 + 24) = v5;
    }
  }
}

char *llvm::object::Archive::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  char *result;
  char *v7;
  uint64_t v8;
  __int128 v9;
  char *v10;
  __int128 v11;
  __int128 v12;

  v10 = 0;
  if (*(_QWORD *)(a1 + 8) >= 8uLL && **(_QWORD **)a1 == 0xA3E66616769623CLL)
  {
    v8 = operator new();
    v9 = *(_OWORD *)(a1 + 16);
    v11 = *(_OWORD *)a1;
    v12 = v9;
    result = (char *)llvm::object::BigArchive::BigArchive(v8, &v11, &v10);
  }
  else
  {
    v4 = operator new();
    v5 = *(_OWORD *)(a1 + 16);
    v11 = *(_OWORD *)a1;
    v12 = v5;
    result = (char *)llvm::object::Archive::Archive(v4, &v11, &v10);
  }
  v7 = v10;
  if (v10)
  {
    v10 = 0;
    *(_BYTE *)(a2 + 8) |= 1u;
    (*(void (**)(char *))(*(_QWORD *)result + 8))(result);
    result = v10;
    *(_QWORD *)a2 = v7;
    if (result)
      return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *(_BYTE *)(a2 + 8) &= ~1u;
    *(_QWORD *)a2 = result;
  }
  return result;
}

char *llvm::object::Archive::Symbol::getMember@<X0>(llvm::object::Archive::Symbol *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned __int16 v13;
  uint64_t v14;
  char *result;
  char *v16;
  __int128 v17;
  unint64_t v19;
  _OWORD v20[2];
  __int16 v21;
  char *v22;

  v3 = *(_QWORD *)this;
  v4 = *(_BYTE *)(*(_QWORD *)this + 98) & 7;
  v5 = v4 == 4 || v4 == 1;
  v6 = 1;
  if (v5)
    v6 = 2;
  v7 = *(unsigned int **)(v3 + 48);
  v8 = &v7[v6];
  switch(*(_BYTE *)(*(_QWORD *)this + 98) & 7)
  {
    case 0:
      v9 = bswap32(*(unsigned int *)((char *)v8 + (4 * *((_DWORD *)this + 2))));
      goto LABEL_14;
    case 1:
      v9 = bswap64(*(_QWORD *)((char *)v8 + (8 * *((_DWORD *)this + 2))));
      goto LABEL_14;
    case 2:
      v9 = *(unsigned int *)((char *)v8 + (8 * *((_DWORD *)this + 2)) + 4);
      goto LABEL_14;
    case 4:
      v9 = *(_QWORD *)((char *)v8 + (16 * *((_DWORD *)this + 2)) + 8);
      goto LABEL_14;
    default:
      v10 = *v7;
      v11 = &v7[*v7 + 1];
      v12 = *((_DWORD *)this + 2);
      if (v12 >= *v11 || (v13 = *((_WORD *)v11 + v12 + 2) - 1, v10 <= v13))
      {
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v19 = qword_1EF8F7238[0];
        result = (char *)operator new();
        *(_QWORD *)result = &off_1E81A0D28;
        *((_QWORD *)result + 1) = 3;
        *((_QWORD *)result + 2) = v19;
        *(_BYTE *)(a2 + 40) |= 1u;
        *(_QWORD *)a2 = result;
      }
      else
      {
        v9 = v8[v13];
LABEL_14:
        v14 = *(_QWORD *)(v3 + 16) + v9;
        v22 = 0;
        result = (char *)llvm::object::Archive::Child::Child((uint64_t)v20, v3, v14, &v22);
        v16 = v22;
        if (v22)
        {
          v22 = 0;
          *(_BYTE *)(a2 + 40) |= 1u;
          result = (char *)*((_QWORD *)&v20[0] + 1);
          *(_QWORD *)a2 = v16;
          *((_QWORD *)&v20[0] + 1) = 0;
          if (result)
          {
            (*(void (**)(char *))(*(_QWORD *)result + 16))(result);
            result = v22;
            if (v22)
              return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v22 + 8))(v22);
          }
        }
        else
        {
          *(_BYTE *)(a2 + 40) &= ~1u;
          *(_WORD *)(a2 + 32) = v21;
          v17 = v20[1];
          *(_OWORD *)a2 = v20[0];
          *(_OWORD *)(a2 + 16) = v17;
        }
      }
      return result;
  }
}

BOOL llvm::object::Archive::hasSymbolTable(llvm::object::Archive *this)
{
  return *((_QWORD *)this + 7) != 0;
}

unint64_t llvm::object::Archive::getNumberOfSymbols(llvm::object::Archive *this)
{
  unsigned int *v1;
  unint64_t result;

  if (!*((_QWORD *)this + 7))
    return 0;
  v1 = (unsigned int *)*((_QWORD *)this + 6);
  switch(*((_BYTE *)this + 98) & 7)
  {
    case 0:
      result = bswap32(*v1);
      break;
    case 1:
      result = bswap64(*(_QWORD *)v1);
      break;
    case 2:
      result = *v1 >> 3;
      break;
    case 4:
      result = *(_QWORD *)v1 >> 4;
      break;
    default:
      result = v1[*v1 + 1];
      break;
  }
  return result;
}

llvm::object::Archive *llvm::object::Archive::findSym@<X0>(llvm::object::Archive *a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::object::Archive *v8;
  llvm::object::Archive *v9;
  unint64_t v10;
  unint64_t v11;
  llvm::object::Archive *result;
  int v13;
  uint64_t v14;
  const void *v15;
  size_t v16;
  unint64_t v17;
  char v18;
  llvm::object::Archive *v19;
  char v20;
  uint64_t v21;
  _QWORD v22[2];
  __int128 v23;
  __int16 v24;
  llvm::object::Archive *v25;
  unint64_t v26;
  llvm::object::Archive *v27;
  llvm::object::Archive *v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  llvm::object::Archive::symbol_begin(a1);
  v9 = v8;
  v11 = v10;
  v25 = v8;
  v26 = v10;
  result = (llvm::object::Archive *)llvm::object::Archive::getNumberOfSymbols(a1);
  v13 = (int)result;
  if (v9 != a1)
    goto LABEL_3;
LABEL_2:
  if (v13 == (_DWORD)v11)
  {
    *(_BYTE *)(a4 + 48) &= ~1u;
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 40) = 0;
  }
  else
  {
LABEL_3:
    while (1)
    {
      v14 = *((_QWORD *)v9 + 6);
      v15 = (const void *)(v14 + HIDWORD(v11));
      v16 = v14 ? strlen((const char *)(v14 + HIDWORD(v11))) : 0;
      if (v16 == a3 && (!a3 || !memcmp(v15, a2, a3)))
        break;
      result = (llvm::object::Archive *)llvm::object::Archive::Symbol::getNext((llvm::object::Archive::Symbol *)&v25);
      v9 = result;
      v11 = v17;
      v25 = result;
      v26 = v17;
      if (result == a1)
        goto LABEL_2;
    }
    llvm::object::Archive::Symbol::getMember((llvm::object::Archive::Symbol *)&v25, (uint64_t)&v27);
    v18 = v29;
    if ((v29 & 1) != 0)
    {
      v19 = v27;
      v27 = 0;
      v20 = *(_BYTE *)(a4 + 48) | 1;
    }
    else
    {
      sub_1C624BC78((uint64_t)v22, (uint64_t)&v27);
      v20 = *(_BYTE *)(a4 + 48) & 0xFE;
      v19 = (llvm::object::Archive *)v22[0];
      *(_QWORD *)(a4 + 8) = v22[1];
      *(_OWORD *)(a4 + 16) = v23;
      *(_WORD *)(a4 + 32) = v24;
      *(_BYTE *)(a4 + 40) = 1;
      v18 = v29;
    }
    *(_BYTE *)(a4 + 48) = v20;
    *(_QWORD *)a4 = v19;
    if ((v18 & 1) != 0)
    {
      result = v27;
      v27 = 0;
      if (result)
      {
        v21 = 1;
        return (llvm::object::Archive *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v21))();
      }
    }
    else
    {
      result = v28;
      v28 = 0;
      if (result)
      {
        v21 = 2;
        return (llvm::object::Archive *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v21))();
      }
    }
  }
  return result;
}

void sub_1C62C6FA4(void **a1)
{
  void **v2;

  *a1 = off_1E8185218;
  v2 = a1 + 13;
  sub_1C4764BBC(&v2);
  llvm::object::Binary::~Binary((llvm::object::Binary *)a1);
}

uint64_t sub_1C62C6FEC(void **a1)
{
  void **v3;

  *a1 = off_1E8185218;
  v3 = a1 + 13;
  sub_1C4764BBC(&v3);
  llvm::object::Binary::~Binary((llvm::object::Binary *)a1);
  return MEMORY[0x1CAA32FC0]();
}

void sub_1C62C7048(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1C62C7050()
{
  return 8;
}

__n128 sub_1C62C7058@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)v4 = off_1E8185118;
  *a2 = v4;
  return result;
}

void sub_1C62C70AC()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C62C70C0@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)v4 = off_1E8185198;
  *a2 = v4;
  return result;
}

void sub_1C62C7114()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C62C7128(_BYTE *a1@<X8>)
{
  a1[8] &= ~1u;
  *a1 = 0;
}

void sub_1C62C713C(void **a1)
{
  void **v2;

  *a1 = off_1E8185218;
  v2 = a1 + 13;
  sub_1C4764BBC(&v2);
  llvm::object::Binary::~Binary((llvm::object::Binary *)a1);
}

uint64_t sub_1C62C7184(void **a1)
{
  void **v3;

  *a1 = off_1E8185218;
  v3 = a1 + 13;
  sub_1C4764BBC(&v3);
  llvm::object::Binary::~Binary((llvm::object::Binary *)a1);
  return MEMORY[0x1CAA32FC0]();
}

uint64_t sub_1C62C71E0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136);
}

_OWORD *sub_1C62C71E8(uint64_t a1, uint64_t a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = (void **)sub_1C54232F8(a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v8 = v5;
    v6 = operator new(0x38uLL);
    v6[2] = **a3;
    *((_DWORD *)v6 + 12) = 0;
    v9 = v12;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v9;
    *v8 = v6;
    v10 = **(_QWORD **)a1;
    v11 = (uint64_t *)v6;
    if (v10)
    {
      *(_QWORD *)a1 = v10;
      v11 = (uint64_t *)*v8;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v11);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

void llvm::object::Binary::~Binary(llvm::object::Binary *this)
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::object::Binary::getFileName(llvm::object::Binary *this)
{
  return *((_QWORD *)this + 4);
}

__n128 llvm::object::Binary::getMemoryBufferRef@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  __n128 v3;

  result = this[1];
  v3 = this[2];
  *a2 = result;
  a2[1] = v3;
  return result;
}

uint64_t sub_1C62C72C0(uint64_t a1, uint64_t a2)
{
  int v2;

  if (!a1)
  {
    v2 = *(unsigned __int8 *)(a2 + 18);
    if (v2 == 2)
    {
      if (!*(_DWORD *)(a2 + 12) && !*(_DWORD *)(a2 + 8))
        return 1;
      goto LABEL_8;
    }
    return v2 == 105;
  }
  v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 != 2)
    return v2 == 105;
  if (*(_WORD *)(a1 + 12) || *(_DWORD *)(a1 + 8))
  {
LABEL_8:
    v2 = 2;
    return v2 == 105;
  }
  return 1;
}

uint64_t sub_1C62C7318(uint64_t a1, uint64_t a2)
{
  int v2;
  _BOOL4 v3;
  unsigned __int8 *v4;
  int v5;
  unsigned int v6;

  if (a1)
  {
    v2 = *(unsigned __int8 *)(a1 + 16);
    v3 = v2 == 2 && *(__int16 *)(a1 + 12) == -1;
    v4 = (unsigned __int8 *)(a1 + 17);
  }
  else
  {
    v2 = *(unsigned __int8 *)(a2 + 18);
    v3 = v2 == 2 && *(_DWORD *)(a2 + 12) == -1;
    v4 = (unsigned __int8 *)(a2 + 19);
  }
  v5 = *v4;
  v6 = v2 == 3 || v3;
  if (v5)
    return v6;
  else
    return 0;
}

void llvm::object::COFFObjectFile::moveSectionNext(uint64_t a1, _QWORD *a2)
{
  *a2 += 40;
}

uint64_t llvm::object::COFFObjectFile::getSectionAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 + 28);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 72);
    if (v3)
      v3 = *(_QWORD *)(v3 + 24);
  }
  return v3 + *(unsigned int *)(a2 + 12);
}

unint64_t llvm::object::COFFObjectFile::getSectionIndex(uint64_t a1, uint64_t a2)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((a2 - *(_QWORD *)(a1 + 88)) >> 3);
}

uint64_t llvm::object::COFFObjectFile::getSectionAlignment(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;
  unsigned int v5;

  v2 = *(_DWORD *)(a2 + 36);
  result = 1;
  if ((v2 & 8) == 0)
  {
    v4 = ((v2 >> 20) & 0xF) == 0;
    v5 = 1 << (((v2 >> 20) & 0xF) - 1);
    if (v4)
      return 16;
    else
      return v5;
  }
  return result;
}

uint64_t llvm::object::COFFObjectFile::isSectionCompressed()
{
  return 0;
}

uint64_t llvm::object::COFFObjectFile::isSectionText(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 36) >> 5) & 1;
}

uint64_t llvm::object::COFFObjectFile::isSectionData(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 36) >> 6) & 1;
}

BOOL llvm::object::COFFObjectFile::isSectionBSS(uint64_t a1, uint64_t a2)
{
  return (~*(_DWORD *)(a2 + 36) & 0xC0000080) == 0;
}

uint64_t llvm::object::COFFObjectFile::isDebugSection(uint64_t a1)
{
  uint64_t result;
  char *v3;
  char *v4;
  char *v5;
  _QWORD v6[2];
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 136))(v6);
  if ((v7 & 1) != 0)
  {
    v3 = (char *)v6[0];
    v6[0] = 0;
    v4 = v3;
    sub_1C4D62BD4(&v4, &v5);
    if (v4)
      (*(void (**)(char *))(*(_QWORD *)v4 + 8))(v4);
    if ((v7 & 1) != 0)
    {
      result = v6[0];
      v6[0] = 0;
      if (!result)
        return result;
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return 0;
  }
  if (v6[1] < 6uLL)
    return 0;
  return *(_DWORD *)v6[0] == 1650811950 && *(_WORD *)(v6[0] + 4) == 26485;
}

BOOL llvm::object::COFFObjectFile::isSectionVirtual(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 20) == 0;
}

unint64_t llvm::object::COFFObjectFile::section_rel_begin(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  unint64_t result;
  _OWORD v5[2];

  v3 = *(_OWORD *)(a1 + 32);
  v5[0] = *(_OWORD *)(a1 + 16);
  v5[1] = v3;
  result = sub_1C599E004(a2, v5, *(_QWORD *)(a1 + 16));
  if (result)
  {
    if (*(_DWORD *)(a2 + 12))
      llvm::report_fatal_error((llvm *)"Sections with relocations should have an address of 0", (const char *)1);
  }
  return result;
}

unint64_t llvm::object::COFFObjectFile::section_rel_end(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  unint64_t result;
  __int128 v6;
  _OWORD v7[2];
  _OWORD v8[2];

  v3 = a1 + 16;
  v4 = *(_OWORD *)(a1 + 32);
  v8[0] = *(_OWORD *)(a1 + 16);
  v8[1] = v4;
  result = sub_1C599E004(a2, v8, *(uint64_t *)&v8[0]);
  if (result)
  {
    v6 = *(_OWORD *)(v3 + 16);
    v7[0] = *(_OWORD *)v3;
    v7[1] = v6;
    result += 10 * sub_1C599E0EC(a2, v7, *(_QWORD *)v3);
  }
  return result;
}

void llvm::object::COFFObjectFile::initDelayImportTablePtr(llvm::object::COFFObjectFile *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  unint64_t v8;

  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    v5 = *((_QWORD *)this + 8);
    v6 = (_DWORD *)(v5 ? v5 + 92 : *((_QWORD *)this + 9) + 108);
    if (*v6 > 0xDu)
    {
      v7 = *(_DWORD *)(v3 + 104);
      if (v7)
      {
        *((_DWORD *)this + 36) = (*(_DWORD *)(v3 + 108) >> 5) - 1;
        v8 = 0;
        llvm::object::COFFObjectFile::getRvaPtr(this, &v8, "delay import table", v7, a2);
        if (*a2)
          return;
        *((_QWORD *)this + 17) = v8;
      }
    }
  }
  *a2 = 0;
}

void llvm::object::COFFObjectFile::initExportTablePtr(llvm::object::COFFObjectFile *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int *v3;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  unint64_t v8;

  v3 = (unsigned int *)*((_QWORD *)this + 10);
  if (v3)
  {
    v5 = *((_QWORD *)this + 8);
    v6 = (_DWORD *)(v5 ? v5 + 92 : *((_QWORD *)this + 9) + 108);
    if (*v6)
    {
      v7 = *v3;
      if (*v3)
      {
        v8 = 0;
        llvm::object::COFFObjectFile::getRvaPtr(this, &v8, "export table", v7, a2);
        if (*a2)
          return;
        *((_QWORD *)this + 19) = v8;
      }
    }
  }
  *a2 = 0;
}

void llvm::object::COFFObjectFile::initBaseRelocPtr(llvm::object::COFFObjectFile *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;

  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    v5 = *((_QWORD *)this + 8);
    v6 = (_DWORD *)(v5 ? v5 + 92 : *((_QWORD *)this + 9) + 108);
    if (*v6 > 5u)
    {
      v7 = *(_DWORD *)(v3 + 40);
      if (v7)
      {
        v9 = 0;
        llvm::object::COFFObjectFile::getRvaPtr(this, &v9, "base reloc table", v7, a2);
        if (*a2)
          return;
        v8 = v9;
        *((_QWORD *)this + 20) = v9;
        *((_QWORD *)this + 21) = v8 + *(unsigned int *)(v3 + 44);
      }
    }
  }
  *a2 = 0;
}

void llvm::object::COFFObjectFile::initDebugDirectoryPtr(llvm::object::COFFObjectFile *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v10;
  const char *v11;
  unint64_t v12[2];

  v3 = *((_QWORD *)this + 10);
  if (!v3
    || ((v5 = *((_QWORD *)this + 8)) == 0
      ? (v6 = (_DWORD *)(*((_QWORD *)this + 9) + 108))
      : (v6 = (_DWORD *)(v5 + 92)),
        *v6 <= 6u || (v7 = *(_DWORD *)(v3 + 48)) == 0))
  {
LABEL_13:
    *a2 = 0;
    return;
  }
  HIDWORD(v8) = -1227133513 * *(_DWORD *)(v3 + 52);
  LODWORD(v8) = HIDWORD(v8);
  if ((v8 >> 2) < 0x924924A)
  {
    v12[0] = 0;
    llvm::object::COFFObjectFile::getRvaPtr(this, v12, "debug directory", v7, a2);
    if (*a2)
      return;
    v10 = v12[0];
    *((_QWORD *)this + 22) = v12[0];
    *((_QWORD *)this + 23) = v10 + *(unsigned int *)(v3 + 52);
    goto LABEL_13;
  }
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v12[0] = 3;
  v12[1] = qword_1EF8F7238[0];
  v11 = "debug directory has uneven size";
  sub_1C5DF1730((_BYTE **)&v11, (uint64_t *)v12, a2);
}

void llvm::object::COFFObjectFile::initTLSDirectoryPtr(llvm::object::COFFObjectFile *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 10);
  if (!v3
    || ((v5 = *((_QWORD *)this + 8)) == 0
      ? (v6 = (_DWORD *)(*((_QWORD *)this + 9) + 108))
      : (v6 = (_DWORD *)(v5 + 92)),
        *v6 <= 9u || (v7 = *(_DWORD *)(v3 + 72)) == 0))
  {
LABEL_13:
    *a2 = 0;
    return;
  }
  v8 = 40;
  if (!*((_QWORD *)this + 9))
    v8 = 24;
  v13 = v8;
  if (v8 == *(_DWORD *)(v3 + 76))
  {
    v12 = 0;
    llvm::object::COFFObjectFile::getRvaPtr(this, &v12, "TLS directory", v7, a2);
    if (*a2)
      return;
    v9 = 200;
    if (!*((_QWORD *)this + 9))
      v9 = 192;
    *(_QWORD *)((char *)this + v9) = v12;
    goto LABEL_13;
  }
  if (!atomic_load(qword_1EF8F7238))
  {
    v11 = v3;
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v3 = v11;
  }
  LODWORD(v12) = *(_DWORD *)(v3 + 76);
  sub_1C54A5674(3, qword_1EF8F7238[0], (uint64_t)"TLS Directory size (%u) is not the expected size (%llu).", (int *)&v12, &v13, a2);
}

void llvm::object::COFFObjectFile::initLoadConfigPtr(llvm::object::COFFObjectFile *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  unint64_t v8;

  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    v5 = *((_QWORD *)this + 8);
    v6 = (_DWORD *)(v5 ? v5 + 92 : *((_QWORD *)this + 9) + 108);
    if (*v6 > 0xAu)
    {
      v7 = *(_DWORD *)(v3 + 80);
      if (v7)
      {
        v8 = 0;
        llvm::object::COFFObjectFile::getRvaPtr(this, &v8, "load config table", v7, a2);
        if (*a2)
          return;
        *((_QWORD *)this + 26) = v8;
      }
    }
  }
  *a2 = 0;
}

uint64_t llvm::object::COFFObjectFile::symbol_end(llvm::object::COFFObjectFile *this)
{
  return *((_QWORD *)this + 14);
}

uint64_t llvm::object::COFFObjectFile::section_begin(llvm::object::COFFObjectFile *this)
{
  return *((_QWORD *)this + 11);
}

uint64_t llvm::object::COFFObjectFile::getBytesInAddress(llvm::object::COFFObjectFile *this)
{
  uint64_t v2;

  v2 = 8;
  if ((*(unsigned int (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)this + 376))(this) != 42)
  {
    if ((*(unsigned int (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)this + 376))(this) == 3)
      return 8;
    else
      return 4;
  }
  return v2;
}

const char *llvm::object::COFFObjectFile::getFileFormatName(llvm::object::COFFObjectFile *this)
{
  unsigned __int16 *v1;
  int v2;

  v1 = (unsigned __int16 *)*((_QWORD *)this + 6);
  if (!v1)
    v1 = (unsigned __int16 *)(*((_QWORD *)this + 7) + 6);
  v2 = *v1;
  if (v2 > 34403)
  {
    if (v2 != 43620)
    {
      if (v2 == 34404)
        return "COFF-x86-64";
      return "COFF-<unknown arch>";
    }
    return "COFF-ARM64";
  }
  else
  {
    if (v2 != 332)
    {
      if (v2 == 452)
        return "COFF-ARM";
      return "COFF-<unknown arch>";
    }
    return "COFF-i386";
  }
}

uint64_t llvm::object::COFFObjectFile::getArch(llvm::object::COFFObjectFile *this)
{
  unsigned __int16 *v1;
  int v2;

  v1 = (unsigned __int16 *)*((_QWORD *)this + 6);
  if (!v1)
    v1 = (unsigned __int16 *)(*((_QWORD *)this + 7) + 6);
  v2 = *v1;
  if (v2 > 34403)
  {
    if (v2 != 43620)
    {
      if (v2 == 34404)
        return 42;
      return 0;
    }
    return 3;
  }
  else
  {
    if (v2 != 332)
    {
      if (v2 == 452)
        return 39;
      return 0;
    }
    return 41;
  }
}

uint64_t llvm::object::COFFObjectFile::getStartAddress@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 64);
  *(_BYTE *)(a2 + 8) &= ~1u;
  if (v2)
    v2 = *(unsigned int *)(v2 + 16);
  *(_QWORD *)a2 = v2;
  return this;
}

void llvm::object::COFFObjectFile::getString(llvm::object::COFFObjectFile *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14[2];

  v4 = *((_DWORD *)this + 30);
  if (v4 > 4)
  {
    if (v4 <= a2)
    {
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v10 = qword_1EF8F7238[0];
      v11 = (_QWORD *)operator new();
      *v11 = &off_1E81A0D28;
      v11[1] = 4;
      v11[2] = v10;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v11;
    }
    else
    {
      v6 = *((_QWORD *)this + 14);
      v7 = v6 + a2;
      if (v6)
        v8 = strlen((const char *)(v6 + a2));
      else
        v8 = 0;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v7;
      *(_QWORD *)(a3 + 8) = v8;
    }
  }
  else
  {
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v14[0] = 3;
    v14[1] = qword_1EF8F7238[0];
    v13 = "string table empty";
    sub_1C5DF1730((_BYTE **)&v13, v14, &v12);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v12;
  }
}

void llvm::object::COFFObjectFile::moveRelocationNext(uint64_t a1, _QWORD *a2)
{
  *a2 += 10;
}

uint64_t llvm::object::COFFObjectFile::getRelocationOffset(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

uint64_t llvm::object::COFFObjectFile::getRelocationSymbol(_QWORD *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = *(_DWORD *)(a2 + 4);
  v3 = a1[12];
  if (!v3 && !a1[13])
    return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  v4 = a1[6];
  if (v4)
  {
    if (*(__int16 *)(v4 + 2) == -1)
      return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
    v5 = (unsigned int *)(v4 + 12);
  }
  else
  {
    v5 = (unsigned int *)(a1[7] + 52);
  }
  if (v2 >= *v5)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  if (v3)
  {
    v6 = 18;
  }
  else
  {
    v3 = a1[13];
    v6 = 20;
  }
  return v3 + v2 * (unint64_t)v6;
}

uint64_t llvm::object::COFFObjectFile::getRelocationType(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a2 + 8);
}

const char *llvm::object::COFFObjectFile::getRelocationTypeName(llvm::object::COFFObjectFile *this, unsigned int a2)
{
  unsigned __int16 *v2;
  unsigned int v3;
  const char *result;
  char **v5;

  v2 = (unsigned __int16 *)*((_QWORD *)this + 6);
  if (!v2)
    v2 = (unsigned __int16 *)(*((_QWORD *)this + 7) + 6);
  v3 = *v2;
  result = "Unknown";
  if (v3 > 0x8663)
  {
    if (v3 == 43620)
    {
      if (a2 >= 0x12)
        return result;
      v5 = off_1E81855C0;
      return v5[(__int16)a2];
    }
    if (v3 == 34404 && a2 < 0x11)
    {
      v5 = off_1E8185480;
      return v5[(__int16)a2];
    }
  }
  else
  {
    if (v3 == 332)
    {
      if (a2 >= 0x15)
        return result;
      v5 = off_1E8185650;
      return v5[(__int16)a2];
    }
    if (v3 == 452 && a2 < 0x17)
    {
      v5 = off_1E8185508;
      return v5[(__int16)a2];
    }
  }
  return result;
}

_QWORD *llvm::object::COFFObjectFile::getRelocationTypeName(llvm::object::COFFObjectFile *a1, uint64_t a2, _QWORD *a3)
{
  char *RelocationTypeName;
  uint64_t v5;

  RelocationTypeName = (char *)llvm::object::COFFObjectFile::getRelocationTypeName(a1, *(unsigned __int16 *)(a2 + 8));
  return sub_1C52C2F74(a3, RelocationTypeName, &RelocationTypeName[v5]);
}

BOOL llvm::object::COFFObjectFile::isRelocatableObject(llvm::object::COFFObjectFile *this)
{
  return *((_QWORD *)this + 10) == 0;
}

const char *llvm::object::COFFObjectFile::mapDebugSectionName(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  const char *result;

  result = (const char *)a2;
  if (a3 == 7 && !(*a2 ^ 0x665F6865 | *(_DWORD *)((char *)a2 + 3) ^ 0x6D617266))
    return "eh_frame";
  return result;
}

void llvm::object::ObjectFile::createCOFFObjectFile(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  _OWORD v3[2];

  v2 = a1[1];
  v3[0] = *a1;
  v3[1] = v2;
  llvm::object::COFFObjectFile::create(v3, a2);
}

uint64_t sub_1C62C8034@<X0>(uint64_t a1@<X0>, _WORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  unsigned __int16 *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  result = llvm::BinaryStreamReader::readBytes(a1, (uint64_t)v10, 2u, a3);
  if (!*a3)
  {
    v7 = (unsigned __int16 *)v10[0];
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
    v8 = *v7;
    v9 = bswap32(v8) >> 16;
    if ((result - 1) >= 2)
      LOWORD(v8) = v9;
    *a2 = v8;
    *a3 = 0;
  }
  return result;
}

_QWORD *sub_1C62C80B4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &unk_1E8185470;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_1C62C8120(llvm::object::SymbolicFile *a1)
{
  llvm::object::SymbolicFile::~SymbolicFile(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62C8144()
{
  return 10;
}

void sub_1C62C814C(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

unint64_t *sub_1C62C8158@<X0>(unint64_t *a1@<X8>)
{
  return llvm::SubtargetFeatures::SubtargetFeatures(a1, (uint64_t)&unk_1C873FF12, 0);
}

void sub_1C62C816C(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void sub_1C62C817C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &unk_1E8185470;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1CAA32FC0);
}

const char *llvm::object::getELFRelocationTypeName(llvm::object *this, unsigned int a2)
{
  char **v2;
  const char *result;
  char **v4;

  if ((int)this <= 82)
  {
    if ((int)this <= 39)
    {
      switch((int)this)
      {
        case 2:
        case 18:
          goto LABEL_8;
        case 3:
        case 6:
          if (a2 >= 0x2C)
            return "Unknown";
          v4 = off_1E81859A8;
          return v4[a2];
        case 4:
          if (a2 >= 0x2B)
            return "Unknown";
          v4 = off_1E81856F8;
          return v4[a2];
        case 8:
          if (a2 >= 0xFA)
            return "Unknown";
          v4 = off_1E8185B08;
          return v4[a2];
        case 20:
          result = "R_PPC_NONE";
          switch(a2)
          {
            case 0u:
              return result;
            case 1u:
              result = "R_PPC_ADDR32";
              break;
            case 2u:
              result = "R_PPC_ADDR24";
              break;
            case 3u:
              result = "R_PPC_ADDR16";
              break;
            case 4u:
              result = "R_PPC_ADDR16_LO";
              break;
            case 5u:
              result = "R_PPC_ADDR16_HI";
              break;
            case 6u:
              result = "R_PPC_ADDR16_HA";
              break;
            case 7u:
              result = "R_PPC_ADDR14";
              break;
            case 8u:
              result = "R_PPC_ADDR14_BRTAKEN";
              break;
            case 9u:
              result = "R_PPC_ADDR14_BRNTAKEN";
              break;
            case 0xAu:
              result = "R_PPC_REL24";
              break;
            case 0xBu:
              result = "R_PPC_REL14";
              break;
            case 0xCu:
              result = "R_PPC_REL14_BRTAKEN";
              break;
            case 0xDu:
              result = "R_PPC_REL14_BRNTAKEN";
              break;
            case 0xEu:
              result = "R_PPC_GOT16";
              break;
            case 0xFu:
              result = "R_PPC_GOT16_LO";
              break;
            case 0x10u:
              result = "R_PPC_GOT16_HI";
              break;
            case 0x11u:
              result = "R_PPC_GOT16_HA";
              break;
            case 0x12u:
              result = "R_PPC_PLTREL24";
              break;
            case 0x13u:
              result = "R_PPC_COPY";
              break;
            case 0x14u:
              result = "R_PPC_GLOB_DAT";
              break;
            case 0x15u:
              result = "R_PPC_JMP_SLOT";
              break;
            case 0x16u:
              result = "R_PPC_RELATIVE";
              break;
            case 0x17u:
              result = "R_PPC_LOCAL24PC";
              break;
            case 0x18u:
              result = "R_PPC_UADDR32";
              break;
            case 0x19u:
              result = "R_PPC_UADDR16";
              break;
            case 0x1Au:
              result = "R_PPC_REL32";
              break;
            case 0x1Bu:
              result = "R_PPC_PLT32";
              break;
            case 0x1Cu:
              result = "R_PPC_PLTREL32";
              break;
            case 0x1Du:
              result = "R_PPC_PLT16_LO";
              break;
            case 0x1Eu:
              result = "R_PPC_PLT16_HI";
              break;
            case 0x1Fu:
              result = "R_PPC_PLT16_HA";
              break;
            case 0x20u:
              result = "R_PPC_SDAREL16";
              break;
            case 0x21u:
              result = "R_PPC_SECTOFF";
              break;
            case 0x22u:
              result = "R_PPC_SECTOFF_LO";
              break;
            case 0x23u:
              result = "R_PPC_SECTOFF_HI";
              break;
            case 0x24u:
              result = "R_PPC_SECTOFF_HA";
              break;
            case 0x25u:
              result = "R_PPC_ADDR30";
              break;
            case 0x26u:
            case 0x27u:
            case 0x28u:
            case 0x29u:
            case 0x2Au:
            case 0x2Bu:
            case 0x2Cu:
            case 0x2Du:
            case 0x2Eu:
            case 0x2Fu:
            case 0x30u:
            case 0x31u:
            case 0x32u:
            case 0x33u:
            case 0x34u:
            case 0x35u:
            case 0x36u:
            case 0x37u:
            case 0x38u:
            case 0x39u:
            case 0x3Au:
            case 0x3Bu:
            case 0x3Cu:
            case 0x3Du:
            case 0x3Eu:
            case 0x3Fu:
            case 0x40u:
            case 0x41u:
            case 0x42u:
              return "Unknown";
            case 0x43u:
              result = "R_PPC_TLS";
              break;
            case 0x44u:
              result = "R_PPC_DTPMOD32";
              break;
            case 0x45u:
              result = "R_PPC_TPREL16";
              break;
            case 0x46u:
              result = "R_PPC_TPREL16_LO";
              break;
            case 0x47u:
              result = "R_PPC_TPREL16_HI";
              break;
            case 0x48u:
              result = "R_PPC_TPREL16_HA";
              break;
            case 0x49u:
              result = "R_PPC_TPREL32";
              break;
            case 0x4Au:
              result = "R_PPC_DTPREL16";
              break;
            case 0x4Bu:
              result = "R_PPC_DTPREL16_LO";
              break;
            case 0x4Cu:
              result = "R_PPC_DTPREL16_HI";
              break;
            case 0x4Du:
              result = "R_PPC_DTPREL16_HA";
              break;
            case 0x4Eu:
              result = "R_PPC_DTPREL32";
              break;
            case 0x4Fu:
              result = "R_PPC_GOT_TLSGD16";
              break;
            case 0x50u:
              result = "R_PPC_GOT_TLSGD16_LO";
              break;
            case 0x51u:
              result = "R_PPC_GOT_TLSGD16_HI";
              break;
            case 0x52u:
              result = "R_PPC_GOT_TLSGD16_HA";
              break;
            case 0x53u:
              result = "R_PPC_GOT_TLSLD16";
              break;
            case 0x54u:
              result = "R_PPC_GOT_TLSLD16_LO";
              break;
            case 0x55u:
              result = "R_PPC_GOT_TLSLD16_HI";
              break;
            case 0x56u:
              result = "R_PPC_GOT_TLSLD16_HA";
              break;
            case 0x57u:
              result = "R_PPC_GOT_TPREL16";
              break;
            case 0x58u:
              result = "R_PPC_GOT_TPREL16_LO";
              break;
            case 0x59u:
              result = "R_PPC_GOT_TPREL16_HI";
              break;
            case 0x5Au:
              result = "R_PPC_GOT_TPREL16_HA";
              break;
            case 0x5Bu:
              result = "R_PPC_GOT_DTPREL16";
              break;
            case 0x5Cu:
              result = "R_PPC_GOT_DTPREL16_LO";
              break;
            case 0x5Du:
              result = "R_PPC_GOT_DTPREL16_HI";
              break;
            case 0x5Eu:
              result = "R_PPC_GOT_DTPREL16_HA";
              break;
            case 0x5Fu:
              result = "R_PPC_TLSGD";
              break;
            case 0x60u:
              result = "R_PPC_TLSLD";
              break;
            default:
              switch(a2)
              {
                case 0xF8u:
                  result = "R_PPC_IRELATIVE";
                  break;
                case 0xF9u:
                  result = "R_PPC_REL16";
                  break;
                case 0xFAu:
                  result = "R_PPC_REL16_LO";
                  break;
                case 0xFBu:
                  result = "R_PPC_REL16_HI";
                  break;
                case 0xFCu:
                  result = "R_PPC_REL16_HA";
                  break;
                default:
                  return "Unknown";
              }
              break;
          }
          return result;
        case 21:
          if (a2 >= 0xFD)
            return "Unknown";
          v2 = off_1E8186FA8;
          return v2[a2];
        case 22:
          if (a2 >= 0x42)
            return "Unknown";
          v2 = off_1E8187968;
          return v2[a2];
        default:
          return "Unknown";
      }
    }
    if ((_DWORD)this == 40)
    {
      if (a2 < 0xA1)
      {
        v2 = off_1E81862D8;
        return v2[a2];
      }
      return "Unknown";
    }
    if ((_DWORD)this == 43)
    {
LABEL_8:
      if (a2 < 0x55)
      {
        v2 = off_1E8187B78;
        return v2[a2];
      }
      return "Unknown";
    }
    if ((_DWORD)this != 62 || a2 >= 0x2B)
      return "Unknown";
    v4 = off_1E8185850;
    return v4[a2];
  }
  else
  {
    if ((int)this > 223)
    {
      switch((int)this)
      {
        case 243:
          if (a2 >= 0x3B)
            return "Unknown";
          v2 = off_1E8187790;
          return v2[a2];
        case 244:
          if (a2 >= 7)
            return "Unknown";
          v2 = off_1E8186F70;
          return v2[a2];
        case 245:
        case 246:
        case 248:
        case 249:
        case 250:
          return "Unknown";
        case 247:
          if (a2 >= 0xB)
            return "Unknown";
          v2 = off_1E8187E98;
          return v2[a2];
        case 251:
          if (a2 >= 0x25)
            return "Unknown";
          v2 = off_1E8187F48;
          return v2[a2];
        case 252:
          if (a2 >= 0x45)
            return "Unknown";
          v2 = off_1E8188070;
          return v2[a2];
        default:
          if ((_DWORD)this != 224)
          {
            if ((_DWORD)this == 258 && a2 < 0x3B)
            {
              v2 = off_1E8188298;
              return v2[a2];
            }
            return "Unknown";
          }
          if (a2 >= 0xF)
            return "Unknown";
          v2 = off_1E8187E20;
          break;
      }
      return v2[a2];
    }
    if ((int)this <= 163)
    {
      if ((_DWORD)this != 83)
      {
        if ((_DWORD)this != 93)
        {
          if ((_DWORD)this == 105 && a2 < 0xB)
          {
            v2 = off_1E8187EF0;
            return v2[a2];
          }
          return "Unknown";
        }
        goto LABEL_25;
      }
      if (a2 < 0x24)
      {
        v2 = off_1E8186B30;
        return v2[a2];
      }
      return "Unknown";
    }
    if ((_DWORD)this == 164)
    {
      if (a2 < 0x64)
      {
        v2 = off_1E8186C50;
        return v2[a2];
      }
      return "Unknown";
    }
    if ((_DWORD)this != 183)
    {
      if ((_DWORD)this == 195)
      {
LABEL_25:
        if (a2 < 0x6A)
        {
          v2 = off_1E81867E0;
          return v2[a2];
        }
        return "Unknown";
      }
      return "Unknown";
    }
    result = "R_AARCH64_NONE";
    switch(a2)
    {
      case 0u:
        return result;
      case 1u:
        result = "R_AARCH64_P32_ABS32";
        break;
      case 2u:
        result = "R_AARCH64_P32_ABS16";
        break;
      case 3u:
        result = "R_AARCH64_P32_PREL32";
        break;
      case 4u:
        result = "R_AARCH64_P32_PREL16";
        break;
      case 5u:
        result = "R_AARCH64_P32_MOVW_UABS_G0";
        break;
      case 6u:
        result = "R_AARCH64_P32_MOVW_UABS_G0_NC";
        break;
      case 7u:
        result = "R_AARCH64_P32_MOVW_UABS_G1";
        break;
      case 8u:
        result = "R_AARCH64_P32_MOVW_SABS_G0";
        break;
      case 9u:
        result = "R_AARCH64_P32_LD_PREL_LO19";
        break;
      case 0xAu:
        result = "R_AARCH64_P32_ADR_PREL_LO21";
        break;
      case 0xBu:
        result = "R_AARCH64_P32_ADR_PREL_PG_HI21";
        break;
      case 0xCu:
        result = "R_AARCH64_P32_ADD_ABS_LO12_NC";
        break;
      case 0xDu:
        result = "R_AARCH64_P32_LDST8_ABS_LO12_NC";
        break;
      case 0xEu:
        result = "R_AARCH64_P32_LDST16_ABS_LO12_NC";
        break;
      case 0xFu:
        result = "R_AARCH64_P32_LDST32_ABS_LO12_NC";
        break;
      case 0x10u:
        result = "R_AARCH64_P32_LDST64_ABS_LO12_NC";
        break;
      case 0x11u:
        result = "R_AARCH64_P32_LDST128_ABS_LO12_NC";
        break;
      case 0x12u:
        result = "R_AARCH64_P32_TSTBR14";
        break;
      case 0x13u:
        result = "R_AARCH64_P32_CONDBR19";
        break;
      case 0x14u:
        result = "R_AARCH64_P32_JUMP26";
        break;
      case 0x15u:
        result = "R_AARCH64_P32_CALL26";
        break;
      case 0x16u:
        result = "R_AARCH64_P32_MOVW_PREL_G0";
        break;
      case 0x17u:
        result = "R_AARCH64_P32_MOVW_PREL_G0_NC";
        break;
      case 0x18u:
        result = "R_AARCH64_P32_MOVW_PREL_G1";
        break;
      case 0x19u:
        result = "R_AARCH64_P32_GOT_LD_PREL19";
        break;
      case 0x1Au:
        result = "R_AARCH64_P32_ADR_GOT_PAGE";
        break;
      case 0x1Bu:
        result = "R_AARCH64_P32_LD32_GOT_LO12_NC";
        break;
      case 0x1Cu:
        result = "R_AARCH64_P32_LD32_GOTPAGE_LO14";
        break;
      case 0x1Du:
        result = "R_AARCH64_P32_PLT32";
        break;
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
      case 0x3Bu:
      case 0x3Cu:
      case 0x3Du:
      case 0x3Eu:
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x4Fu:
      case 0x80u:
      case 0x81u:
      case 0x82u:
      case 0x83u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x87u:
      case 0x88u:
      case 0x89u:
      case 0x8Au:
      case 0x8Bu:
      case 0x8Cu:
      case 0x8Du:
      case 0x8Eu:
      case 0x8Fu:
      case 0x90u:
      case 0x91u:
      case 0x92u:
      case 0x93u:
      case 0x94u:
      case 0x95u:
      case 0x96u:
      case 0x97u:
      case 0x98u:
      case 0x99u:
      case 0x9Au:
      case 0x9Bu:
      case 0x9Cu:
      case 0x9Du:
      case 0x9Eu:
      case 0x9Fu:
      case 0xA0u:
      case 0xA1u:
      case 0xA2u:
      case 0xA3u:
      case 0xA4u:
      case 0xA5u:
      case 0xA6u:
      case 0xA7u:
      case 0xA8u:
      case 0xA9u:
      case 0xAAu:
      case 0xABu:
      case 0xACu:
      case 0xADu:
      case 0xAEu:
      case 0xAFu:
      case 0xB0u:
      case 0xB1u:
      case 0xB2u:
      case 0xB3u:
      case 0xBDu:
      case 0xBEu:
      case 0xBFu:
      case 0xC0u:
      case 0xC1u:
      case 0xC2u:
      case 0xC3u:
      case 0xC4u:
      case 0xC5u:
      case 0xC6u:
      case 0xC7u:
      case 0xC8u:
      case 0xC9u:
      case 0xCAu:
      case 0xCBu:
      case 0xCCu:
      case 0xCDu:
      case 0xCEu:
      case 0xCFu:
      case 0xD0u:
      case 0xD1u:
      case 0xD2u:
      case 0xD3u:
      case 0xD4u:
      case 0xD5u:
      case 0xD6u:
      case 0xD7u:
      case 0xD8u:
      case 0xD9u:
      case 0xDAu:
      case 0xDBu:
      case 0xDCu:
      case 0xDDu:
      case 0xDEu:
      case 0xDFu:
      case 0xE0u:
      case 0xE1u:
      case 0xE2u:
      case 0xE3u:
      case 0xE4u:
      case 0xE5u:
      case 0xE6u:
      case 0xE7u:
      case 0xE8u:
      case 0xE9u:
      case 0xEAu:
      case 0xEBu:
      case 0xECu:
      case 0xEDu:
      case 0xEEu:
      case 0xEFu:
      case 0xF0u:
      case 0xF1u:
      case 0xF2u:
      case 0xF3u:
      case 0xF4u:
      case 0xF5u:
      case 0xF6u:
      case 0xF7u:
      case 0xF8u:
      case 0xF9u:
      case 0xFAu:
      case 0xFBu:
      case 0xFCu:
      case 0xFDu:
      case 0xFEu:
      case 0xFFu:
      case 0x100u:
      case 0x119u:
      case 0x126u:
      case 0x127u:
      case 0x128u:
      case 0x129u:
      case 0x12Au:
        return "Unknown";
      case 0x50u:
        result = "R_AARCH64_P32_TLSGD_ADR_PREL21";
        break;
      case 0x51u:
        result = "R_AARCH64_P32_TLSGD_ADR_PAGE21";
        break;
      case 0x52u:
        result = "R_AARCH64_P32_TLSGD_ADD_LO12_NC";
        break;
      case 0x53u:
        result = "R_AARCH64_P32_TLSLD_ADR_PREL21";
        break;
      case 0x54u:
        result = "R_AARCH64_P32_TLSLD_ADR_PAGE21";
        break;
      case 0x55u:
        result = "R_AARCH64_P32_TLSLD_ADD_LO12_NC";
        break;
      case 0x56u:
        result = "R_AARCH64_P32_TLSLD_LD_PREL19";
        break;
      case 0x57u:
        result = "R_AARCH64_P32_TLSLD_MOVW_DTPREL_G1";
        break;
      case 0x58u:
        result = "R_AARCH64_P32_TLSLD_MOVW_DTPREL_G0";
        break;
      case 0x59u:
        result = "R_AARCH64_P32_TLSLD_MOVW_DTPREL_G0_NC";
        break;
      case 0x5Au:
        result = "R_AARCH64_P32_TLSLD_ADD_DTPREL_HI12";
        break;
      case 0x5Bu:
        result = "R_AARCH64_P32_TLSLD_ADD_DTPREL_LO12";
        break;
      case 0x5Cu:
        result = "R_AARCH64_P32_TLSLD_ADD_DTPREL_LO12_NC";
        break;
      case 0x5Du:
        result = "R_AARCH64_P32_TLSLD_LDST8_DTPREL_LO12";
        break;
      case 0x5Eu:
        result = "R_AARCH64_P32_TLSLD_LDST8_DTPREL_LO12_NC";
        break;
      case 0x5Fu:
        result = "R_AARCH64_P32_TLSLD_LDST16_DTPREL_LO12";
        break;
      case 0x60u:
        result = "R_AARCH64_P32_TLSLD_LDST16_DTPREL_LO12_NC";
        break;
      case 0x61u:
        result = "R_AARCH64_P32_TLSLD_LDST32_DTPREL_LO12";
        break;
      case 0x62u:
        result = "R_AARCH64_P32_TLSLD_LDST32_DTPREL_LO12_NC";
        break;
      case 0x63u:
        result = "R_AARCH64_P32_TLSLD_LDST64_DTPREL_LO12";
        break;
      case 0x64u:
        result = "R_AARCH64_P32_TLSLD_LDST64_DTPREL_LO12_NC";
        break;
      case 0x65u:
        result = "R_AARCH64_P32_TLSLD_LDST128_DTPREL_LO12";
        break;
      case 0x66u:
        result = "R_AARCH64_P32_TLSLD_LDST128_DTPREL_LO12_NC";
        break;
      case 0x67u:
        result = "R_AARCH64_P32_TLSIE_ADR_GOTTPREL_PAGE21";
        break;
      case 0x68u:
        result = "R_AARCH64_P32_TLSIE_LD32_GOTTPREL_LO12_NC";
        break;
      case 0x69u:
        result = "R_AARCH64_P32_TLSIE_LD_GOTTPREL_PREL19";
        break;
      case 0x6Au:
        result = "R_AARCH64_P32_TLSLE_MOVW_TPREL_G1";
        break;
      case 0x6Bu:
        result = "R_AARCH64_P32_TLSLE_MOVW_TPREL_G0";
        break;
      case 0x6Cu:
        result = "R_AARCH64_P32_TLSLE_MOVW_TPREL_G0_NC";
        break;
      case 0x6Du:
        result = "R_AARCH64_P32_TLSLE_ADD_TPREL_HI12";
        break;
      case 0x6Eu:
        result = "R_AARCH64_P32_TLSLE_ADD_TPREL_LO12";
        break;
      case 0x6Fu:
        result = "R_AARCH64_P32_TLSLE_ADD_TPREL_LO12_NC";
        break;
      case 0x70u:
        result = "R_AARCH64_P32_TLSLE_LDST8_TPREL_LO12";
        break;
      case 0x71u:
        result = "R_AARCH64_P32_TLSLE_LDST8_TPREL_LO12_NC";
        break;
      case 0x72u:
        result = "R_AARCH64_P32_TLSLE_LDST16_TPREL_LO12";
        break;
      case 0x73u:
        result = "R_AARCH64_P32_TLSLE_LDST16_TPREL_LO12_NC";
        break;
      case 0x74u:
        result = "R_AARCH64_P32_TLSLE_LDST32_TPREL_LO12";
        break;
      case 0x75u:
        result = "R_AARCH64_P32_TLSLE_LDST32_TPREL_LO12_NC";
        break;
      case 0x76u:
        result = "R_AARCH64_P32_TLSLE_LDST64_TPREL_LO12";
        break;
      case 0x77u:
        result = "R_AARCH64_P32_TLSLE_LDST64_TPREL_LO12_NC";
        break;
      case 0x78u:
        result = "R_AARCH64_P32_TLSLE_LDST128_TPREL_LO12";
        break;
      case 0x79u:
        result = "R_AARCH64_P32_TLSLE_LDST128_TPREL_LO12_NC";
        break;
      case 0x7Au:
        result = "R_AARCH64_P32_TLSDESC_LD_PREL19";
        break;
      case 0x7Bu:
        result = "R_AARCH64_P32_TLSDESC_ADR_PREL21";
        break;
      case 0x7Cu:
        result = "R_AARCH64_P32_TLSDESC_ADR_PAGE21";
        break;
      case 0x7Du:
        result = "R_AARCH64_P32_TLSDESC_LD32_LO12";
        break;
      case 0x7Eu:
        result = "R_AARCH64_P32_TLSDESC_ADD_LO12";
        break;
      case 0x7Fu:
        result = "R_AARCH64_P32_TLSDESC_CALL";
        break;
      case 0xB4u:
        result = "R_AARCH64_P32_COPY";
        break;
      case 0xB5u:
        result = "R_AARCH64_P32_GLOB_DAT";
        break;
      case 0xB6u:
        result = "R_AARCH64_P32_JUMP_SLOT";
        break;
      case 0xB7u:
        result = "R_AARCH64_P32_RELATIVE";
        break;
      case 0xB8u:
        result = "R_AARCH64_P32_TLS_DTPREL";
        break;
      case 0xB9u:
        result = "R_AARCH64_P32_TLS_DTPMOD";
        break;
      case 0xBAu:
        result = "R_AARCH64_P32_TLS_TPREL";
        break;
      case 0xBBu:
        result = "R_AARCH64_P32_TLSDESC";
        break;
      case 0xBCu:
        result = "R_AARCH64_P32_IRELATIVE";
        break;
      case 0x101u:
        result = "R_AARCH64_ABS64";
        break;
      case 0x102u:
        result = "R_AARCH64_ABS32";
        break;
      case 0x103u:
        result = "R_AARCH64_ABS16";
        break;
      case 0x104u:
        result = "R_AARCH64_PREL64";
        break;
      case 0x105u:
        result = "R_AARCH64_PREL32";
        break;
      case 0x106u:
        result = "R_AARCH64_PREL16";
        break;
      case 0x107u:
        result = "R_AARCH64_MOVW_UABS_G0";
        break;
      case 0x108u:
        result = "R_AARCH64_MOVW_UABS_G0_NC";
        break;
      case 0x109u:
        result = "R_AARCH64_MOVW_UABS_G1";
        break;
      case 0x10Au:
        result = "R_AARCH64_MOVW_UABS_G1_NC";
        break;
      case 0x10Bu:
        result = "R_AARCH64_MOVW_UABS_G2";
        break;
      case 0x10Cu:
        result = "R_AARCH64_MOVW_UABS_G2_NC";
        break;
      case 0x10Du:
        result = "R_AARCH64_MOVW_UABS_G3";
        break;
      case 0x10Eu:
        result = "R_AARCH64_MOVW_SABS_G0";
        break;
      case 0x10Fu:
        result = "R_AARCH64_MOVW_SABS_G1";
        break;
      case 0x110u:
        result = "R_AARCH64_MOVW_SABS_G2";
        break;
      case 0x111u:
        result = "R_AARCH64_LD_PREL_LO19";
        break;
      case 0x112u:
        result = "R_AARCH64_ADR_PREL_LO21";
        break;
      case 0x113u:
        result = "R_AARCH64_ADR_PREL_PG_HI21";
        break;
      case 0x114u:
        result = "R_AARCH64_ADR_PREL_PG_HI21_NC";
        break;
      case 0x115u:
        result = "R_AARCH64_ADD_ABS_LO12_NC";
        break;
      case 0x116u:
        result = "R_AARCH64_LDST8_ABS_LO12_NC";
        break;
      case 0x117u:
        result = "R_AARCH64_TSTBR14";
        break;
      case 0x118u:
        result = "R_AARCH64_CONDBR19";
        break;
      case 0x11Au:
        result = "R_AARCH64_JUMP26";
        break;
      case 0x11Bu:
        result = "R_AARCH64_CALL26";
        break;
      case 0x11Cu:
        result = "R_AARCH64_LDST16_ABS_LO12_NC";
        break;
      case 0x11Du:
        result = "R_AARCH64_LDST32_ABS_LO12_NC";
        break;
      case 0x11Eu:
        result = "R_AARCH64_LDST64_ABS_LO12_NC";
        break;
      case 0x11Fu:
        result = "R_AARCH64_MOVW_PREL_G0";
        break;
      case 0x120u:
        result = "R_AARCH64_MOVW_PREL_G0_NC";
        break;
      case 0x121u:
        result = "R_AARCH64_MOVW_PREL_G1";
        break;
      case 0x122u:
        result = "R_AARCH64_MOVW_PREL_G1_NC";
        break;
      case 0x123u:
        result = "R_AARCH64_MOVW_PREL_G2";
        break;
      case 0x124u:
        result = "R_AARCH64_MOVW_PREL_G2_NC";
        break;
      case 0x125u:
        result = "R_AARCH64_MOVW_PREL_G3";
        break;
      case 0x12Bu:
        result = "R_AARCH64_LDST128_ABS_LO12_NC";
        break;
      case 0x12Cu:
        result = "R_AARCH64_MOVW_GOTOFF_G0";
        break;
      case 0x12Du:
        result = "R_AARCH64_MOVW_GOTOFF_G0_NC";
        break;
      case 0x12Eu:
        result = "R_AARCH64_MOVW_GOTOFF_G1";
        break;
      case 0x12Fu:
        result = "R_AARCH64_MOVW_GOTOFF_G1_NC";
        break;
      case 0x130u:
        result = "R_AARCH64_MOVW_GOTOFF_G2";
        break;
      case 0x131u:
        result = "R_AARCH64_MOVW_GOTOFF_G2_NC";
        break;
      case 0x132u:
        result = "R_AARCH64_MOVW_GOTOFF_G3";
        break;
      case 0x133u:
        result = "R_AARCH64_GOTREL64";
        break;
      case 0x134u:
        result = "R_AARCH64_GOTREL32";
        break;
      case 0x135u:
        result = "R_AARCH64_GOT_LD_PREL19";
        break;
      case 0x136u:
        result = "R_AARCH64_LD64_GOTOFF_LO15";
        break;
      case 0x137u:
        result = "R_AARCH64_ADR_GOT_PAGE";
        break;
      case 0x138u:
        result = "R_AARCH64_LD64_GOT_LO12_NC";
        break;
      case 0x139u:
        result = "R_AARCH64_LD64_GOTPAGE_LO15";
        break;
      case 0x13Au:
        result = "R_AARCH64_PLT32";
        break;
      default:
        switch(a2)
        {
          case 0x200u:
            result = "R_AARCH64_TLSGD_ADR_PREL21";
            break;
          case 0x201u:
            result = "R_AARCH64_TLSGD_ADR_PAGE21";
            break;
          case 0x202u:
            result = "R_AARCH64_TLSGD_ADD_LO12_NC";
            break;
          case 0x203u:
            result = "R_AARCH64_TLSGD_MOVW_G1";
            break;
          case 0x204u:
            result = "R_AARCH64_TLSGD_MOVW_G0_NC";
            break;
          case 0x205u:
            result = "R_AARCH64_TLSLD_ADR_PREL21";
            break;
          case 0x206u:
            result = "R_AARCH64_TLSLD_ADR_PAGE21";
            break;
          case 0x207u:
            result = "R_AARCH64_TLSLD_ADD_LO12_NC";
            break;
          case 0x208u:
            result = "R_AARCH64_TLSLD_MOVW_G1";
            break;
          case 0x209u:
            result = "R_AARCH64_TLSLD_MOVW_G0_NC";
            break;
          case 0x20Au:
            result = "R_AARCH64_TLSLD_LD_PREL19";
            break;
          case 0x20Bu:
            result = "R_AARCH64_TLSLD_MOVW_DTPREL_G2";
            break;
          case 0x20Cu:
            result = "R_AARCH64_TLSLD_MOVW_DTPREL_G1";
            break;
          case 0x20Du:
            result = "R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC";
            break;
          case 0x20Eu:
            result = "R_AARCH64_TLSLD_MOVW_DTPREL_G0";
            break;
          case 0x20Fu:
            result = "R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC";
            break;
          case 0x210u:
            result = "R_AARCH64_TLSLD_ADD_DTPREL_HI12";
            break;
          case 0x211u:
            result = "R_AARCH64_TLSLD_ADD_DTPREL_LO12";
            break;
          case 0x212u:
            result = "R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC";
            break;
          case 0x213u:
            result = "R_AARCH64_TLSLD_LDST8_DTPREL_LO12";
            break;
          case 0x214u:
            result = "R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC";
            break;
          case 0x215u:
            result = "R_AARCH64_TLSLD_LDST16_DTPREL_LO12";
            break;
          case 0x216u:
            result = "R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC";
            break;
          case 0x217u:
            result = "R_AARCH64_TLSLD_LDST32_DTPREL_LO12";
            break;
          case 0x218u:
            result = "R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC";
            break;
          case 0x219u:
            result = "R_AARCH64_TLSLD_LDST64_DTPREL_LO12";
            break;
          case 0x21Au:
            result = "R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC";
            break;
          case 0x21Bu:
            result = "R_AARCH64_TLSIE_MOVW_GOTTPREL_G1";
            break;
          case 0x21Cu:
            result = "R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC";
            break;
          case 0x21Du:
            result = "R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21";
            break;
          case 0x21Eu:
            result = "R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC";
            break;
          case 0x21Fu:
            result = "R_AARCH64_TLSIE_LD_GOTTPREL_PREL19";
            break;
          case 0x220u:
            result = "R_AARCH64_TLSLE_MOVW_TPREL_G2";
            break;
          case 0x221u:
            result = "R_AARCH64_TLSLE_MOVW_TPREL_G1";
            break;
          case 0x222u:
            result = "R_AARCH64_TLSLE_MOVW_TPREL_G1_NC";
            break;
          case 0x223u:
            result = "R_AARCH64_TLSLE_MOVW_TPREL_G0";
            break;
          case 0x224u:
            result = "R_AARCH64_TLSLE_MOVW_TPREL_G0_NC";
            break;
          case 0x225u:
            result = "R_AARCH64_TLSLE_ADD_TPREL_HI12";
            break;
          case 0x226u:
            result = "R_AARCH64_TLSLE_ADD_TPREL_LO12";
            break;
          case 0x227u:
            result = "R_AARCH64_TLSLE_ADD_TPREL_LO12_NC";
            break;
          case 0x228u:
            result = "R_AARCH64_TLSLE_LDST8_TPREL_LO12";
            break;
          case 0x229u:
            result = "R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC";
            break;
          case 0x22Au:
            result = "R_AARCH64_TLSLE_LDST16_TPREL_LO12";
            break;
          case 0x22Bu:
            result = "R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC";
            break;
          case 0x22Cu:
            result = "R_AARCH64_TLSLE_LDST32_TPREL_LO12";
            break;
          case 0x22Du:
            result = "R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC";
            break;
          case 0x22Eu:
            result = "R_AARCH64_TLSLE_LDST64_TPREL_LO12";
            break;
          case 0x22Fu:
            result = "R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC";
            break;
          case 0x230u:
            result = "R_AARCH64_TLSDESC_LD_PREL19";
            break;
          case 0x231u:
            result = "R_AARCH64_TLSDESC_ADR_PREL21";
            break;
          case 0x232u:
            result = "R_AARCH64_TLSDESC_ADR_PAGE21";
            break;
          case 0x233u:
            result = "R_AARCH64_TLSDESC_LD64_LO12";
            break;
          case 0x234u:
            result = "R_AARCH64_TLSDESC_ADD_LO12";
            break;
          case 0x235u:
            result = "R_AARCH64_TLSDESC_OFF_G1";
            break;
          case 0x236u:
            result = "R_AARCH64_TLSDESC_OFF_G0_NC";
            break;
          case 0x237u:
            result = "R_AARCH64_TLSDESC_LDR";
            break;
          case 0x238u:
            result = "R_AARCH64_TLSDESC_ADD";
            break;
          case 0x239u:
            result = "R_AARCH64_TLSDESC_CALL";
            break;
          case 0x23Au:
            result = "R_AARCH64_TLSLE_LDST128_TPREL_LO12";
            break;
          case 0x23Bu:
            result = "R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC";
            break;
          case 0x23Cu:
            result = "R_AARCH64_TLSLD_LDST128_DTPREL_LO12";
            break;
          case 0x23Du:
            result = "R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC";
            break;
          default:
            switch(a2)
            {
              case 0x400u:
                result = "R_AARCH64_COPY";
                break;
              case 0x401u:
                result = "R_AARCH64_GLOB_DAT";
                break;
              case 0x402u:
                result = "R_AARCH64_JUMP_SLOT";
                break;
              case 0x403u:
                result = "R_AARCH64_RELATIVE";
                break;
              case 0x404u:
                result = "R_AARCH64_TLS_DTPMOD64";
                break;
              case 0x405u:
                result = "R_AARCH64_TLS_DTPREL64";
                break;
              case 0x406u:
                result = "R_AARCH64_TLS_TPREL64";
                break;
              case 0x407u:
                result = "R_AARCH64_TLSDESC";
                break;
              case 0x408u:
                result = "R_AARCH64_IRELATIVE";
                break;
              default:
                return "Unknown";
            }
            break;
        }
        break;
    }
  }
  return result;
}

const char *llvm::object::getELFSectionTypeName(llvm::object *this, int a2)
{
  const char *result;

  if ((int)this <= 61)
  {
    if ((_DWORD)this == 8 || (_DWORD)this == 10)
    {
      if (a2 > 1879048221)
      {
        if (a2 == 1879048222)
          return "SHT_MIPS_DWARF";
        if (a2 == 1879048234)
          return "SHT_MIPS_ABIFLAGS";
      }
      else
      {
        if (a2 == 1879048198)
          return "SHT_MIPS_REGINFO";
        if (a2 == 1879048205)
          return "SHT_MIPS_OPTIONS";
      }
    }
    else if ((_DWORD)this == 40 && (a2 - 1879048193) < 5)
    {
      return off_1E8188470[a2 - 1879048193];
    }
  }
  else if ((int)this > 163)
  {
    if ((_DWORD)this == 164)
    {
      if (a2 == 1879048192)
        return "SHT_HEX_ORDERED";
    }
    else if ((_DWORD)this == 243 && a2 == 1879048195)
    {
      return "SHT_RISCV_ATTRIBUTES";
    }
  }
  else if ((_DWORD)this == 62)
  {
    if (a2 == 1879048193)
      return "SHT_X86_64_UNWIND";
  }
  else if ((_DWORD)this == 105 && a2 == 1879048195)
  {
    return "SHT_MSP430_ATTRIBUTES";
  }
  if (a2 > 1879002111)
  {
    switch(a2)
    {
      case 1879002112:
        result = "SHT_LLVM_ODRTAB";
        break;
      case 1879002113:
        result = "SHT_LLVM_LINKER_OPTIONS";
        break;
      case 1879002114:
LABEL_60:
        result = "Unknown";
        break;
      case 1879002115:
        result = "SHT_LLVM_ADDRSIG";
        break;
      case 1879002116:
        result = "SHT_LLVM_DEPENDENT_LIBRARIES";
        break;
      case 1879002117:
        result = "SHT_LLVM_SYMPART";
        break;
      case 1879002118:
        result = "SHT_LLVM_PART_EHDR";
        break;
      case 1879002119:
        result = "SHT_LLVM_PART_PHDR";
        break;
      case 1879002120:
        result = "SHT_LLVM_BB_ADDR_MAP";
        break;
      case 1879002121:
        result = "SHT_LLVM_CALL_GRAPH_PROFILE";
        break;
      default:
        switch(a2)
        {
          case 1879048181:
            result = "SHT_GNU_ATTRIBUTES";
            break;
          case 1879048182:
            result = "SHT_GNU_HASH";
            break;
          case 1879048183:
          case 1879048184:
          case 1879048185:
          case 1879048186:
          case 1879048187:
          case 1879048188:
            goto LABEL_60;
          case 1879048189:
            result = "SHT_GNU_verdef";
            break;
          case 1879048190:
            result = "SHT_GNU_verneed";
            break;
          case 1879048191:
            result = "SHT_GNU_versym";
            break;
          default:
            if (a2 != 1879047936)
              goto LABEL_60;
            result = "SHT_ANDROID_RELR";
            break;
        }
        break;
    }
  }
  else
  {
    result = "SHT_NULL";
    switch(a2)
    {
      case 0:
        return result;
      case 1:
        return "SHT_PROGBITS";
      case 2:
        return "SHT_SYMTAB";
      case 3:
        return "SHT_STRTAB";
      case 4:
        return "SHT_RELA";
      case 5:
        return "SHT_HASH";
      case 6:
        return "SHT_DYNAMIC";
      case 7:
        return "SHT_NOTE";
      case 8:
        return "SHT_NOBITS";
      case 9:
        return "SHT_REL";
      case 10:
        return "SHT_SHLIB";
      case 11:
        return "SHT_DYNSYM";
      case 12:
      case 13:
        goto LABEL_60;
      case 14:
        return "SHT_INIT_ARRAY";
      case 15:
        return "SHT_FINI_ARRAY";
      case 16:
        return "SHT_PREINIT_ARRAY";
      case 17:
        return "SHT_GROUP";
      case 18:
        return "SHT_SYMTAB_SHNDX";
      case 19:
        return "SHT_RELR";
      default:
        if (a2 == 1610612737)
        {
          result = "SHT_ANDROID_REL";
        }
        else
        {
          if (a2 != 1610612738)
            goto LABEL_60;
          result = "SHT_ANDROID_RELA";
        }
        break;
    }
  }
  return result;
}

void sub_1C62C97E8(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char v6;
  unint64_t v8;
  uint64_t v9[4];
  __int16 v10;
  const char *v11;
  __int16 v12;
  _BYTE v13[40];

  if (a2 <= a3)
  {
    v11 = "invalid section index: ";
    v12 = 259;
    v10 = 264;
    LODWORD(v9[0]) = a3;
    sub_1C4825FE4((uint64_t *)&v11, v9, (uint64_t)v13);
    v5 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v8 = qword_1EF8F7238[0];
    *(_QWORD *)v5 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v13, (_QWORD *)(v5 + 8));
    *(_QWORD *)(v5 + 32) = 3;
    *(_QWORD *)(v5 + 40) = v8;
    *(_BYTE *)(v5 + 48) = 1;
    v6 = *(_BYTE *)(a4 + 8) | 1;
  }
  else
  {
    v5 = a1 + 40 * a3;
    v6 = *(_BYTE *)(a4 + 8) & 0xFE;
  }
  *(_BYTE *)(a4 + 8) = v6;
  *(_QWORD *)a4 = v5;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(_QWORD *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections(a1, (uint64_t)v7);
  if ((v8 & 1) != 0)
  {
    v5 = v7[0];
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v5;
  }
  else
  {
    sub_1C62C97E8(v7[0], v7[1], a2, a3);
    if ((v8 & 1) != 0)
    {
      v6 = v7[0];
      v7[0] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSHNDXTable(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections(a1, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v6 = v8[0];
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v6;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSHNDXTable(a1, a2, v8[0], v8[1], a3);
    if ((v9 & 1) != 0)
    {
      v7 = v8[0];
      v8[0] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSHNDXTable(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *ELFSectionTypeName;
  uint64_t v20;
  uint64_t *v21;
  unint64_t *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27[4];
  __int16 v28;
  const char *v29;
  __int16 v30;
  unint64_t v31;
  uint64_t v32[4];
  __int16 v33;
  uint64_t v34[4];
  __int16 v35;
  _BYTE v36[40];
  uint64_t v37;
  char v38;
  _QWORD v39[2];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::relrs(a1, a2, (uint64_t)v39);
  v10 = v39[0];
  if ((v40 & 1) != 0)
  {
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v10;
    return;
  }
  v11 = v39[1];
  sub_1C62C97E8(a3, a4, a2[6], (uint64_t)&v37);
  v12 = v37;
  if ((v38 & 1) != 0)
  {
    v37 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v12;
    goto LABEL_18;
  }
  v13 = *(_DWORD *)(v37 + 4);
  if (v13 != 2 && v13 != 11)
  {
    ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), v13);
    v35 = 1283;
    v34[0] = (uint64_t)"SHT_SYMTAB_SHNDX section is linked with ";
    v34[2] = (uint64_t)ELFSectionTypeName;
    v34[3] = v20;
    v32[0] = (uint64_t)" section (expected SHT_SYMTAB/SHT_DYNSYM)";
    v33 = 259;
    v21 = v32;
LABEL_14:
    sub_1C4825FE4(v34, v21, (uint64_t)v36);
    v10 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v16 = qword_1EF8F7238[0];
    *(_QWORD *)v10 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v36, (_QWORD *)(v10 + 8));
    *(_QWORD *)(v10 + 32) = 3;
    *(_QWORD *)(v10 + 40) = v16;
    *(_BYTE *)(v10 + 48) = 1;
    *(_BYTE *)(a5 + 16) |= 1u;
    goto LABEL_17;
  }
  v31 = (unint64_t)*(unsigned int *)(v37 + 20) >> 4;
  if (v11 != v31)
  {
    v29 = "SHT_SYMTAB_SHNDX has ";
    v30 = 259;
    v28 = 266;
    v26 = v11;
    v27[0] = (uint64_t)&v26;
    sub_1C4825FE4((uint64_t *)&v29, v27, (uint64_t)v32);
    v24 = " entries, but the symbol table associated has ";
    v25 = 259;
    sub_1C4825FE4(v32, (uint64_t *)&v24, (uint64_t)v34);
    v23 = 268;
    v22 = &v31;
    v21 = (uint64_t *)&v22;
    goto LABEL_14;
  }
  *(_BYTE *)(a5 + 16) &= ~1u;
  *(_QWORD *)(a5 + 8) = v11;
LABEL_17:
  *(_QWORD *)a5 = v10;
LABEL_18:
  if ((v38 & 1) != 0)
  {
    v17 = v37;
    v37 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  if ((v40 & 1) != 0)
  {
    v18 = v39[0];
    v39[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

_QWORD *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationTypeName(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  llvm::object *v7;
  char *ELFRelocationTypeName;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  const char *v19;
  uint64_t v20;

  v6 = *a1;
  v7 = (llvm::object *)*(unsigned __int16 *)(*a1 + 18);
  if ((_DWORD)v7 == 8 && *(_BYTE *)(v6 + 4) == 2)
  {
    ELFRelocationTypeName = (char *)llvm::object::getELFRelocationTypeName((llvm::object *)8, a2);
    sub_1C52C2F74(a3, ELFRelocationTypeName, &ELFRelocationTypeName[v9]);
    v10 = (char *)llvm::object::getELFRelocationTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), BYTE1(a2));
    v12 = v11;
    sub_1C62A9EF4(a3, 1uLL, 47);
    sub_1C52C2F74(a3, v10, &v10[v12]);
    v13 = llvm::object::getELFRelocationTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), BYTE2(a2));
    v15 = v14;
    sub_1C62A9EF4(a3, 1uLL, 47);
    v16 = (char *)&v13[v15];
    v17 = a3;
    v18 = (char *)v13;
  }
  else
  {
    v19 = llvm::object::getELFRelocationTypeName(v7, a2);
    v16 = (char *)&v19[v20];
    v17 = a3;
    v18 = (char *)v19;
  }
  return sub_1C52C2F74(v17, v18, v16);
}

void sub_1C62C9DF4(_QWORD *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16[4];
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21[4];
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[5];
  uint64_t v26[5];
  uint64_t v27[5];
  _BYTE v28[40];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  sub_1C59A86D4(a1, a2, (uint64_t)v29);
  if ((v30 & 1) != 0)
  {
    v7 = v29[0];
    v8 = *(_BYTE *)(a4 + 8) | 1;
    goto LABEL_5;
  }
  if (v29[1] > (unint64_t)a3)
  {
    v7 = v29[0] + 16 * a3;
    v8 = *(_BYTE *)(a4 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v7;
    return;
  }
  v23 = "can't read an entry at 0x";
  v24 = 259;
  v20 = 16 * a3;
  v21[0] = (uint64_t)&v20;
  v21[2] = 0;
  v22 = 270;
  sub_1C4825FE4((uint64_t *)&v23, v21, (uint64_t)v25);
  v18 = ": it goes past the end of the section (0x";
  v19 = 259;
  sub_1C4825FE4(v25, (uint64_t *)&v18, (uint64_t)v26);
  v15 = a2[5];
  v16[0] = (uint64_t)&v15;
  v16[2] = 0;
  v17 = 270;
  sub_1C4825FE4(v26, v16, (uint64_t)v27);
  v13 = ")";
  v14 = 259;
  sub_1C4825FE4(v27, (uint64_t *)&v13, (uint64_t)v28);
  v9 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v11 = qword_1EF8F7238[0];
  *(_QWORD *)v9 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v28, (_QWORD *)(v9 + 8));
  *(_QWORD *)(v9 + 32) = 3;
  *(_QWORD *)(v9 + 40) = v11;
  *(_BYTE *)(v9 + 48) = 1;
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v9;
  if ((v30 & 1) != 0)
  {
    v12 = v29[0];
    v29[0] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::create(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  unint64_t v14;
  unint64_t *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[5];
  uint64_t v20[5];
  uint64_t v21[5];
  _BYTE v22[40];

  if (a2 > 0x33)
  {
    v4 = a1;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)(a3 + 8) = a2;
  }
  else
  {
    v17 = "invalid buffer: the size (";
    v18 = 259;
    v16 = 266;
    v14 = a2;
    v15 = &v14;
    sub_1C4825FE4((uint64_t *)&v17, (uint64_t *)&v15, (uint64_t)v19);
    v12 = ") is smaller than an ELF header (";
    v13 = 259;
    sub_1C4825FE4(v19, (uint64_t *)&v12, (uint64_t)v20);
    v9 = 52;
    v11 = 266;
    v10 = &v9;
    sub_1C4825FE4(v20, (uint64_t *)&v10, (uint64_t)v21);
    v7 = ")";
    v8 = 259;
    sub_1C4825FE4(v21, (uint64_t *)&v7, (uint64_t)v22);
    v4 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v6 = qword_1EF8F7238[0];
    *(_QWORD *)v4 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v22, (_QWORD *)(v4 + 8));
    *(_QWORD *)(v4 + 32) = 3;
    *(_QWORD *)(v4 + 40) = v6;
    *(_BYTE *)(v4 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
  }
  *(_QWORD *)a3 = v4;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void (*a4)(std::string *__return_ptr, uint64_t, _QWORD *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v10;
  const char *v11;
  __int16 v12;
  uint64_t v13[4];
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[5];
  _QWORD v18[4];
  __int16 v19;

  v7 = *(unsigned __int16 *)(*a1 + 50);
  if (v7 == 0xFFFF)
  {
    if (!a3)
    {
      v18[0] = "e_shstrndx == SHN_XINDEX, but the section header table is empty";
      v19 = 259;
      goto LABEL_9;
    }
    v7 = *(_DWORD *)(a2 + 24);
  }
  if (!v7)
  {
    *(_BYTE *)(a6 + 16) &= ~1u;
    *(_QWORD *)a6 = "";
    *(_QWORD *)(a6 + 8) = 0;
    return;
  }
  if (a3 > v7)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getStringTable(a1, a2 + 40 * v7, a4, a5, a6);
    return;
  }
  v15 = "section header string table index ";
  v16 = 259;
  v14 = 264;
  LODWORD(v13[0]) = v7;
  sub_1C4825FE4((uint64_t *)&v15, v13, (uint64_t)v17);
  v11 = " does not exist";
  v12 = 259;
  sub_1C4825FE4(v17, (uint64_t *)&v11, (uint64_t)v18);
LABEL_9:
  v8 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v10 = qword_1EF8F7238[0];
  *(_QWORD *)v8 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v18, (_QWORD *)(v8 + 8));
  *(_QWORD *)(v8 + 32) = 3;
  *(_QWORD *)(v8 + 40) = v10;
  *(_BYTE *)(v8 + 48) = 1;
  *(_BYTE *)(a6 + 16) |= 1u;
  *(_QWORD *)a6 = v8;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionIndex(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X4>, uint64_t a4@<X8>)
{
  int v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int16 *)(a1 + 14);
  if (v5 == 0xFFFF)
  {
    v6 = a3[1];
    v8[0] = *a3;
    v8[1] = v6;
    sub_1C59AA420((unint64_t)(a1 - a2) >> 4, (uint64_t *)v8, (uint64_t)&v9);
    if ((v10 & 1) != 0)
    {
      v7 = v9;
      *(_BYTE *)(a4 + 8) |= 1u;
      *(_QWORD *)a4 = v7;
      return;
    }
    *(_BYTE *)(a4 + 8) &= ~1u;
    v5 = v9;
  }
  else
  {
    *(_BYTE *)(a4 + 8) &= ~1u;
    if ((unsigned __int16)(v5 + 256) <= 0x100u)
    {
      *(_DWORD *)a4 = 0;
      return;
    }
  }
  *(_DWORD *)a4 = v5;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _OWORD v12[2];
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v13[0] = 0;
    v13[1] = 0;
    v14 = 0;
    goto LABEL_8;
  }
  sub_1C59A86D4(a1, a3, (uint64_t)v13);
  if ((v14 & 1) == 0)
  {
    a3 = (unsigned int *)v13[0];
LABEL_8:
    v11 = a4[1];
    v12[0] = *a4;
    v12[1] = v11;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a1, a2, (uint64_t)a3, v12, a5);
    if ((v14 & 1) == 0)
      return;
    goto LABEL_4;
  }
  v9 = v13[0];
  v13[0] = 0;
  *(_BYTE *)(a5 + 8) |= 1u;
  *(_QWORD *)a5 = v9;
LABEL_4:
  v10 = v13[0];
  v13[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X4>, uint64_t a5@<X8>)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v7 = a4[1];
  v10[0] = *a4;
  v10[1] = v7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionIndex(a2, a3, v10, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v8 = v11;
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v8;
  }
  else if ((_DWORD)v11)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a1, v11, a5);
    if ((v12 & 1) != 0)
    {
      v9 = v11;
      v11 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_QWORD *)a5 = 0;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, _QWORD *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  char v15;
  uint64_t v16[2];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections(a1, (uint64_t)v16);
  if ((v17 & 1) != 0)
  {
    v10 = v16[0];
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v10;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionStringTable(a1, v16[0], v16[1], a3, a4, (uint64_t)v14);
    if ((v15 & 1) != 0)
    {
      v12 = v14[0];
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v12;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName(a1, a2, v14[0], v14[1], a5);
      if ((v15 & 1) != 0)
      {
        v11 = v14[0];
        v14[0] = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
    }
    if ((v17 & 1) != 0)
    {
      v13 = v16[0];
      v16[0] = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(_QWORD *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections(a1, (uint64_t)v7);
  if ((v8 & 1) != 0)
  {
    v5 = v7[0];
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v5;
  }
  else
  {
    sub_1C62C97E8(v7[0], v7[1], a2, a3);
    if ((v8 & 1) != 0)
    {
      v6 = v7[0];
      v7[0] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSHNDXTable(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections(a1, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v6 = v8[0];
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v6;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSHNDXTable(a1, a2, v8[0], v8[1], a3);
    if ((v9 & 1) != 0)
    {
      v7 = v8[0];
      v8[0] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSHNDXTable(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *ELFSectionTypeName;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27[4];
  __int16 v28;
  const char *v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32[4];
  __int16 v33;
  uint64_t v34[4];
  __int16 v35;
  _BYTE v36[40];
  uint64_t v37;
  char v38;
  _QWORD v39[2];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::relrs(a1, a2, (uint64_t)v39);
  v10 = v39[0];
  if ((v40 & 1) != 0)
  {
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v10;
    return;
  }
  v11 = v39[1];
  sub_1C62C97E8(a3, a4, bswap32(a2[6]), (uint64_t)&v37);
  v12 = v37;
  if ((v38 & 1) != 0)
  {
    v37 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v12;
    goto LABEL_18;
  }
  v13 = *(_DWORD *)(v37 + 4);
  if (v13 != 0x2000000 && v13 != 184549376)
  {
    ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*a1 + 18)) >> 16), bswap32(v13));
    v35 = 1283;
    v34[0] = (uint64_t)"SHT_SYMTAB_SHNDX section is linked with ";
    v34[2] = (uint64_t)ELFSectionTypeName;
    v34[3] = v20;
    v32[0] = (uint64_t)" section (expected SHT_SYMTAB/SHT_DYNSYM)";
    v33 = 259;
    v21 = v32;
LABEL_14:
    sub_1C4825FE4(v34, v21, (uint64_t)v36);
    v10 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v16 = qword_1EF8F7238[0];
    *(_QWORD *)v10 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v36, (_QWORD *)(v10 + 8));
    *(_QWORD *)(v10 + 32) = 3;
    *(_QWORD *)(v10 + 40) = v16;
    *(_BYTE *)(v10 + 48) = 1;
    *(_BYTE *)(a5 + 16) |= 1u;
    goto LABEL_17;
  }
  v31 = bswap32(*(_DWORD *)(v37 + 20)) >> 4;
  if (v11 != v31)
  {
    v29 = "SHT_SYMTAB_SHNDX has ";
    v30 = 259;
    v28 = 266;
    v26 = v11;
    v27[0] = (uint64_t)&v26;
    sub_1C4825FE4((uint64_t *)&v29, v27, (uint64_t)v32);
    v24 = " entries, but the symbol table associated has ";
    v25 = 259;
    sub_1C4825FE4(v32, (uint64_t *)&v24, (uint64_t)v34);
    v23 = 268;
    v22 = &v31;
    v21 = (uint64_t *)&v22;
    goto LABEL_14;
  }
  *(_BYTE *)(a5 + 16) &= ~1u;
  *(_QWORD *)(a5 + 8) = v11;
LABEL_17:
  *(_QWORD *)a5 = v10;
LABEL_18:
  if ((v38 & 1) != 0)
  {
    v17 = v37;
    v37 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  if ((v40 & 1) != 0)
  {
    v18 = v39[0];
    v39[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

_QWORD *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelocationTypeName(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unsigned int v5;
  char *ELFRelocationTypeName;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  const char *v18;
  uint64_t v19;

  v5 = *(unsigned __int16 *)(*(_QWORD *)a1 + 18);
  if (v5 == 2048 && *(_BYTE *)(*(_QWORD *)a1 + 4) == 2)
  {
    ELFRelocationTypeName = (char *)llvm::object::getELFRelocationTypeName((llvm::object *)8, a2);
    sub_1C52C2F74(a3, ELFRelocationTypeName, &ELFRelocationTypeName[v8]);
    v9 = (char *)llvm::object::getELFRelocationTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*(_QWORD *)a1 + 18)) >> 16), BYTE1(a2));
    v11 = v10;
    sub_1C62A9EF4(a3, 1uLL, 47);
    sub_1C52C2F74(a3, v9, &v9[v11]);
    v12 = llvm::object::getELFRelocationTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*(_QWORD *)a1 + 18)) >> 16), BYTE2(a2));
    v14 = v13;
    sub_1C62A9EF4(a3, 1uLL, 47);
    v15 = (char *)&v12[v14];
    v16 = a3;
    v17 = (char *)v12;
  }
  else
  {
    v18 = llvm::object::getELFRelocationTypeName((llvm::object *)__rev16(v5), a2);
    v15 = (char *)&v18[v19];
    v16 = a3;
    v17 = (char *)v18;
  }
  return sub_1C52C2F74(v16, v17, v15);
}

void sub_1C62CABF4(_QWORD *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16[4];
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21[4];
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[5];
  uint64_t v26[5];
  uint64_t v27[5];
  _BYTE v28[40];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  sub_1C59B1118(a1, a2, (uint64_t)v29);
  if ((v30 & 1) != 0)
  {
    v7 = v29[0];
    v8 = *(_BYTE *)(a4 + 8) | 1;
    goto LABEL_5;
  }
  if (v29[1] > (unint64_t)a3)
  {
    v7 = v29[0] + 16 * a3;
    v8 = *(_BYTE *)(a4 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v7;
    return;
  }
  v23 = "can't read an entry at 0x";
  v24 = 259;
  v20 = 16 * a3;
  v21[0] = (uint64_t)&v20;
  v21[2] = 0;
  v22 = 270;
  sub_1C4825FE4((uint64_t *)&v23, v21, (uint64_t)v25);
  v18 = ": it goes past the end of the section (0x";
  v19 = 259;
  sub_1C4825FE4(v25, (uint64_t *)&v18, (uint64_t)v26);
  v15 = bswap32(a2[5]);
  v16[0] = (uint64_t)&v15;
  v16[2] = 0;
  v17 = 270;
  sub_1C4825FE4(v26, v16, (uint64_t)v27);
  v13 = ")";
  v14 = 259;
  sub_1C4825FE4(v27, (uint64_t *)&v13, (uint64_t)v28);
  v9 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v11 = qword_1EF8F7238[0];
  *(_QWORD *)v9 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v28, (_QWORD *)(v9 + 8));
  *(_QWORD *)(v9 + 32) = 3;
  *(_QWORD *)(v9 + 40) = v11;
  *(_BYTE *)(v9 + 48) = 1;
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v9;
  if ((v30 & 1) != 0)
  {
    v12 = v29[0];
    v29[0] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void (*a4)(std::string *__return_ptr, uint64_t, _QWORD *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v11;
  const char *v12;
  __int16 v13;
  uint64_t v14[4];
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[5];
  _QWORD v19[4];
  __int16 v20;

  v7 = *(unsigned __int16 *)(*a1 + 50);
  if (v7 == 0xFFFF)
  {
    if (!a3)
    {
      v19[0] = "e_shstrndx == SHN_XINDEX, but the section header table is empty";
      v20 = 259;
      goto LABEL_10;
    }
    v8 = bswap32(*(_DWORD *)(a2 + 24));
  }
  else
  {
    v8 = __rev16(v7);
  }
  if (!v8)
  {
    *(_BYTE *)(a6 + 16) &= ~1u;
    *(_QWORD *)a6 = "";
    *(_QWORD *)(a6 + 8) = 0;
    return;
  }
  if (a3 > v8)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getStringTable(a1, a2 + 40 * v8, a4, a5, a6);
    return;
  }
  v16 = "section header string table index ";
  v17 = 259;
  v15 = 264;
  LODWORD(v14[0]) = v8;
  sub_1C4825FE4((uint64_t *)&v16, v14, (uint64_t)v18);
  v12 = " does not exist";
  v13 = 259;
  sub_1C4825FE4(v18, (uint64_t *)&v12, (uint64_t)v19);
LABEL_10:
  v9 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v11 = qword_1EF8F7238[0];
  *(_QWORD *)v9 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v19, (_QWORD *)(v9 + 8));
  *(_QWORD *)(v9 + 32) = 3;
  *(_QWORD *)(v9 + 40) = v11;
  *(_BYTE *)(v9 + 48) = 1;
  *(_BYTE *)(a6 + 16) |= 1u;
  *(_QWORD *)a6 = v9;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionIndex(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X4>, uint64_t a4@<X8>)
{
  unsigned int v5;
  unsigned int v6;
  __int128 v7;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int16 *)(a1 + 14);
  if (v5 == 0xFFFF)
  {
    v7 = a3[1];
    v9[0] = *a3;
    v9[1] = v7;
    sub_1C59B2EE8((unint64_t)(a1 - a2) >> 4, (uint64_t *)v9, (uint64_t)&v10);
    if ((v11 & 1) != 0)
    {
      v8 = v10;
      *(_BYTE *)(a4 + 8) |= 1u;
      *(_QWORD *)a4 = v8;
      return;
    }
    *(_BYTE *)(a4 + 8) &= ~1u;
    v6 = v10;
  }
  else
  {
    v6 = __rev16(v5);
    *(_BYTE *)(a4 + 8) &= ~1u;
    if ((unsigned __int16)(v6 + 256) <= 0x100u)
    {
      *(_DWORD *)a4 = 0;
      return;
    }
  }
  *(_DWORD *)a4 = v6;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _OWORD v12[2];
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v13[0] = 0;
    v13[1] = 0;
    v14 = 0;
    goto LABEL_8;
  }
  sub_1C59B1118(a1, a3, (uint64_t)v13);
  if ((v14 & 1) == 0)
  {
    a3 = (unsigned int *)v13[0];
LABEL_8:
    v11 = a4[1];
    v12[0] = *a4;
    v12[1] = v11;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a1, a2, (uint64_t)a3, v12, a5);
    if ((v14 & 1) == 0)
      return;
    goto LABEL_4;
  }
  v9 = v13[0];
  v13[0] = 0;
  *(_BYTE *)(a5 + 8) |= 1u;
  *(_QWORD *)a5 = v9;
LABEL_4:
  v10 = v13[0];
  v13[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X4>, uint64_t a5@<X8>)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v7 = a4[1];
  v10[0] = *a4;
  v10[1] = v7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionIndex(a2, a3, v10, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v8 = v11;
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v8;
  }
  else if ((_DWORD)v11)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a1, v11, a5);
    if ((v12 & 1) != 0)
    {
      v9 = v11;
      v11 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_QWORD *)a5 = 0;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, _QWORD *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  char v15;
  uint64_t v16[2];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections(a1, (uint64_t)v16);
  if ((v17 & 1) != 0)
  {
    v10 = v16[0];
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v10;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionStringTable(a1, v16[0], v16[1], a3, a4, (uint64_t)v14);
    if ((v15 & 1) != 0)
    {
      v12 = v14[0];
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v12;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionName(a1, a2, v14[0], v14[1], a5);
      if ((v15 & 1) != 0)
      {
        v11 = v14[0];
        v14[0] = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
    }
    if ((v17 & 1) != 0)
    {
      v13 = v16[0];
      v16[0] = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22[4];
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  uint64_t v26[4];
  __int16 v27;
  unint64_t v28;
  uint64_t v29[4];
  __int16 v30;
  uint64_t v31[4];
  __int16 v32;
  _QWORD v33[4];
  __int16 v34;
  unint64_t v35;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 40);
  v35 = v4;
  if (!v4)
  {
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    return;
  }
  v5 = *(unsigned __int16 *)(v3 + 58);
  if (v5 != 64)
  {
    v31[0] = (uint64_t)"invalid e_shentsize in ELF header: ";
    v32 = 259;
    v30 = 265;
    LODWORD(v29[0]) = v5;
    goto LABEL_11;
  }
  v6 = a1[1];
  if (v4 > 0xFFFFFFFFFFFFFFBFLL || v4 + 64 > v6)
  {
    v31[0] = (uint64_t)"section header table goes past the end of the file: e_shoff = 0x";
    v32 = 259;
    v29[0] = (uint64_t)&v35;
    v29[2] = 0;
    v30 = 270;
LABEL_11:
    v8 = v29;
LABEL_12:
    sub_1C4825FE4(v31, v8, (uint64_t)v33);
    goto LABEL_13;
  }
  v12 = v3 + v4;
  v13 = *(unsigned __int16 *)(v3 + 60);
  v28 = v13;
  if (!v13)
  {
    v13 = *(_QWORD *)(v12 + 32);
    v28 = v13;
    if (v13 >> 58)
    {
      v29[0] = (uint64_t)"invalid number of sections specified in the NULL section's sh_size field (";
      v30 = 259;
      v27 = 268;
      v26[0] = (uint64_t)&v28;
      sub_1C4825FE4(v29, v26, (uint64_t)v31);
      v24[0] = (uint64_t)")";
      v25 = 259;
      v8 = v24;
      goto LABEL_12;
    }
  }
  v14 = __CFADD__(v4, v13 << 6);
  v15 = v4 + (v13 << 6);
  if (v14)
  {
    v24[0] = (uint64_t)"invalid section header table offset (e_shoff = 0x";
    v25 = 259;
    v22[0] = (uint64_t)&v35;
    v22[2] = 0;
    v23 = 270;
    sub_1C4825FE4(v24, v22, (uint64_t)v26);
    v20 = ") or invalid number of sections specified in the first section header's sh_size field (0x";
    v21 = 259;
    sub_1C4825FE4(v26, (uint64_t *)&v20, (uint64_t)v29);
    v18[0] = (uint64_t)&v28;
    v18[2] = 0;
    v19 = 270;
    sub_1C4825FE4(v29, v18, (uint64_t)v31);
    v16 = ")";
    v17 = 259;
    v8 = (uint64_t *)&v16;
    goto LABEL_12;
  }
  if (v15 <= v6)
  {
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v13;
    return;
  }
  v33[0] = "section table goes past the end of file";
  v34 = 259;
LABEL_13:
  v9 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v11 = qword_1EF8F7238[0];
  *(_QWORD *)v9 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v33, (_QWORD *)(v9 + 8));
  *(_QWORD *)(v9 + 32) = 3;
  *(_QWORD *)(v9 + 40) = v11;
  *(_BYTE *)(v9 + 48) = 1;
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v9;
}

void sub_1C62CB604(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char v6;
  unint64_t v8;
  uint64_t v9[4];
  __int16 v10;
  const char *v11;
  __int16 v12;
  _BYTE v13[40];

  if (a2 <= a3)
  {
    v11 = "invalid section index: ";
    v12 = 259;
    v10 = 264;
    LODWORD(v9[0]) = a3;
    sub_1C4825FE4((uint64_t *)&v11, v9, (uint64_t)v13);
    v5 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v8 = qword_1EF8F7238[0];
    *(_QWORD *)v5 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v13, (_QWORD *)(v5 + 8));
    *(_QWORD *)(v5 + 32) = 3;
    *(_QWORD *)(v5 + 40) = v8;
    *(_BYTE *)(v5 + 48) = 1;
    v6 = *(_BYTE *)(a4 + 8) | 1;
  }
  else
  {
    v5 = a1 + ((unint64_t)a3 << 6);
    v6 = *(_BYTE *)(a4 + 8) & 0xFE;
  }
  *(_BYTE *)(a4 + 8) = v6;
  *(_QWORD *)a4 = v5;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(_QWORD *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections(a1, (uint64_t)v7);
  if ((v8 & 1) != 0)
  {
    v5 = v7[0];
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v5;
  }
  else
  {
    sub_1C62CB604(v7[0], v7[1], a2, a3);
    if ((v8 & 1) != 0)
    {
      v6 = v7[0];
      v7[0] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSHNDXTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections(a1, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v6 = v8[0];
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v6;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSHNDXTable(a1, a2, v8[0], v8[1], a3);
    if ((v9 & 1) != 0)
    {
      v7 = v8[0];
      v8[0] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSHNDXTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *ELFSectionTypeName;
  uint64_t v20;
  uint64_t *v21;
  unint64_t *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27[4];
  __int16 v28;
  const char *v29;
  __int16 v30;
  unint64_t v31;
  uint64_t v32[4];
  __int16 v33;
  uint64_t v34[4];
  __int16 v35;
  _BYTE v36[40];
  uint64_t v37;
  char v38;
  _QWORD v39[2];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  sub_1C59B69E0(a1, (_QWORD *)a2, (uint64_t)v39);
  v10 = v39[0];
  if ((v40 & 1) != 0)
  {
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v10;
    return;
  }
  v11 = v39[1];
  sub_1C62CB604(a3, a4, *(_DWORD *)(a2 + 40), (uint64_t)&v37);
  v12 = v37;
  if ((v38 & 1) != 0)
  {
    v37 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v12;
    goto LABEL_18;
  }
  v13 = *(_DWORD *)(v37 + 4);
  if (v13 != 2 && v13 != 11)
  {
    ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), v13);
    v35 = 1283;
    v34[0] = (uint64_t)"SHT_SYMTAB_SHNDX section is linked with ";
    v34[2] = (uint64_t)ELFSectionTypeName;
    v34[3] = v20;
    v32[0] = (uint64_t)" section (expected SHT_SYMTAB/SHT_DYNSYM)";
    v33 = 259;
    v21 = v32;
LABEL_14:
    sub_1C4825FE4(v34, v21, (uint64_t)v36);
    v10 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v16 = qword_1EF8F7238[0];
    *(_QWORD *)v10 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v36, (_QWORD *)(v10 + 8));
    *(_QWORD *)(v10 + 32) = 3;
    *(_QWORD *)(v10 + 40) = v16;
    *(_BYTE *)(v10 + 48) = 1;
    *(_BYTE *)(a5 + 16) |= 1u;
    goto LABEL_17;
  }
  v31 = *(_QWORD *)(v37 + 32) / 0x18uLL;
  if (v11 != v31)
  {
    v29 = "SHT_SYMTAB_SHNDX has ";
    v30 = 259;
    v28 = 266;
    v26 = v11;
    v27[0] = (uint64_t)&v26;
    sub_1C4825FE4((uint64_t *)&v29, v27, (uint64_t)v32);
    v24 = " entries, but the symbol table associated has ";
    v25 = 259;
    sub_1C4825FE4(v32, (uint64_t *)&v24, (uint64_t)v34);
    v23 = 268;
    v22 = &v31;
    v21 = (uint64_t *)&v22;
    goto LABEL_14;
  }
  *(_BYTE *)(a5 + 16) &= ~1u;
  *(_QWORD *)(a5 + 8) = v11;
LABEL_17:
  *(_QWORD *)a5 = v10;
LABEL_18:
  if ((v38 & 1) != 0)
  {
    v17 = v37;
    v37 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  if ((v40 & 1) != 0)
  {
    v18 = v39[0];
    v39[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

void sub_1C62CBB20(_QWORD *a1@<X0>, _QWORD *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16[4];
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21[4];
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[5];
  uint64_t v26[5];
  uint64_t v27[5];
  _BYTE v28[40];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::relas(a1, a2, (uint64_t)v29);
  if ((v30 & 1) != 0)
  {
    v7 = v29[0];
    v8 = *(_BYTE *)(a4 + 8) | 1;
    goto LABEL_5;
  }
  if (v29[1] > (unint64_t)a3)
  {
    v7 = v29[0] + 24 * a3;
    v8 = *(_BYTE *)(a4 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v7;
    return;
  }
  v23 = "can't read an entry at 0x";
  v24 = 259;
  v20 = 24 * a3;
  v21[0] = (uint64_t)&v20;
  v21[2] = 0;
  v22 = 270;
  sub_1C4825FE4((uint64_t *)&v23, v21, (uint64_t)v25);
  v18 = ": it goes past the end of the section (0x";
  v19 = 259;
  sub_1C4825FE4(v25, (uint64_t *)&v18, (uint64_t)v26);
  v15 = a2[4];
  v16[0] = (uint64_t)&v15;
  v16[2] = 0;
  v17 = 270;
  sub_1C4825FE4(v26, v16, (uint64_t)v27);
  v13 = ")";
  v14 = 259;
  sub_1C4825FE4(v27, (uint64_t *)&v13, (uint64_t)v28);
  v9 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v11 = qword_1EF8F7238[0];
  *(_QWORD *)v9 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v28, (_QWORD *)(v9 + 8));
  *(_QWORD *)(v9 + 32) = 3;
  *(_QWORD *)(v9 + 40) = v11;
  *(_BYTE *)(v9 + 48) = 1;
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v9;
  if ((v30 & 1) != 0)
  {
    v12 = v29[0];
    v29[0] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::create(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  unint64_t v14;
  unint64_t *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[5];
  uint64_t v20[5];
  uint64_t v21[5];
  _BYTE v22[40];

  if (a2 > 0x3F)
  {
    v4 = a1;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)(a3 + 8) = a2;
  }
  else
  {
    v17 = "invalid buffer: the size (";
    v18 = 259;
    v16 = 266;
    v14 = a2;
    v15 = &v14;
    sub_1C4825FE4((uint64_t *)&v17, (uint64_t *)&v15, (uint64_t)v19);
    v12 = ") is smaller than an ELF header (";
    v13 = 259;
    sub_1C4825FE4(v19, (uint64_t *)&v12, (uint64_t)v20);
    v9 = 64;
    v11 = 266;
    v10 = &v9;
    sub_1C4825FE4(v20, (uint64_t *)&v10, (uint64_t)v21);
    v7 = ")";
    v8 = 259;
    sub_1C4825FE4(v21, (uint64_t *)&v7, (uint64_t)v22);
    v4 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v6 = qword_1EF8F7238[0];
    *(_QWORD *)v4 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v22, (_QWORD *)(v4 + 8));
    *(_QWORD *)(v4 + 32) = 3;
    *(_QWORD *)(v4 + 40) = v6;
    *(_BYTE *)(v4 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
  }
  *(_QWORD *)a3 = v4;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void (*a4)(std::string *__return_ptr, uint64_t, _QWORD *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v10;
  const char *v11;
  __int16 v12;
  uint64_t v13[4];
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[5];
  _QWORD v18[4];
  __int16 v19;

  v7 = *(unsigned __int16 *)(*a1 + 62);
  if (v7 == 0xFFFF)
  {
    if (!a3)
    {
      v18[0] = "e_shstrndx == SHN_XINDEX, but the section header table is empty";
      v19 = 259;
      goto LABEL_9;
    }
    v7 = *(_DWORD *)(a2 + 40);
  }
  if (!v7)
  {
    *(_BYTE *)(a6 + 16) &= ~1u;
    *(_QWORD *)a6 = "";
    *(_QWORD *)(a6 + 8) = 0;
    return;
  }
  if (a3 > v7)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getStringTable(a1, a2 + ((unint64_t)v7 << 6), a4, a5, a6);
    return;
  }
  v15 = "section header string table index ";
  v16 = 259;
  v14 = 264;
  LODWORD(v13[0]) = v7;
  sub_1C4825FE4((uint64_t *)&v15, v13, (uint64_t)v17);
  v11 = " does not exist";
  v12 = 259;
  sub_1C4825FE4(v17, (uint64_t *)&v11, (uint64_t)v18);
LABEL_9:
  v8 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v10 = qword_1EF8F7238[0];
  *(_QWORD *)v8 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v18, (_QWORD *)(v8 + 8));
  *(_QWORD *)(v8 + 32) = 3;
  *(_QWORD *)(v8 + 40) = v10;
  *(_BYTE *)(v8 + 48) = 1;
  *(_BYTE *)(a6 + 16) |= 1u;
  *(_QWORD *)a6 = v8;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionIndex(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X4>, uint64_t a4@<X8>)
{
  int v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int16 *)(a1 + 6);
  if (v5 == 0xFFFF)
  {
    v6 = a3[1];
    v8[0] = *a3;
    v8[1] = v6;
    sub_1C59AA420(-1431655765 * ((unint64_t)(a1 - a2) >> 3), (uint64_t *)v8, (uint64_t)&v9);
    if ((v10 & 1) != 0)
    {
      v7 = v9;
      *(_BYTE *)(a4 + 8) |= 1u;
      *(_QWORD *)a4 = v7;
      return;
    }
    *(_BYTE *)(a4 + 8) &= ~1u;
    v5 = v9;
  }
  else
  {
    *(_BYTE *)(a4 + 8) &= ~1u;
    if ((unsigned __int16)(v5 + 256) <= 0x100u)
    {
      *(_DWORD *)a4 = 0;
      return;
    }
  }
  *(_DWORD *)a4 = v5;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _OWORD v12[2];
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v13[0] = 0;
    v13[1] = 0;
    v14 = 0;
    goto LABEL_8;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::relas(a1, a3, (uint64_t)v13);
  if ((v14 & 1) == 0)
  {
    a3 = (_QWORD *)v13[0];
LABEL_8:
    v11 = a4[1];
    v12[0] = *a4;
    v12[1] = v11;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a1, a2, (uint64_t)a3, v12, a5);
    if ((v14 & 1) == 0)
      return;
    goto LABEL_4;
  }
  v9 = v13[0];
  v13[0] = 0;
  *(_BYTE *)(a5 + 8) |= 1u;
  *(_QWORD *)a5 = v9;
LABEL_4:
  v10 = v13[0];
  v13[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X4>, uint64_t a5@<X8>)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v7 = a4[1];
  v10[0] = *a4;
  v10[1] = v7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionIndex(a2, a3, v10, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v8 = v11;
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v8;
  }
  else if ((_DWORD)v11)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a1, v11, a5);
    if ((v12 & 1) != 0)
    {
      v9 = v11;
      v11 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_QWORD *)a5 = 0;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, _QWORD *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  char v15;
  uint64_t v16[2];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections(a1, (uint64_t)v16);
  if ((v17 & 1) != 0)
  {
    v10 = v16[0];
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v10;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionStringTable(a1, v16[0], v16[1], a3, a4, (uint64_t)v14);
    if ((v15 & 1) != 0)
    {
      v12 = v14[0];
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v12;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName(a1, a2, v14[0], v14[1], a5);
      if ((v15 & 1) != 0)
      {
        v11 = v14[0];
        v14[0] = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
    }
    if ((v17 & 1) != 0)
    {
      v13 = v16[0];
      v16[0] = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  const char *v18;
  __int16 v19;
  uint64_t v20[4];
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  uint64_t v26[4];
  __int16 v27;
  uint64_t v28[4];
  __int16 v29;
  unint64_t v30;
  uint64_t v31[4];
  __int16 v32;
  uint64_t v33[4];
  __int16 v34;
  _QWORD v35[4];
  __int16 v36;
  unint64_t v37;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 40);
  v5 = bswap64(v4);
  v37 = v5;
  if (!v4)
  {
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    return;
  }
  v6 = *(unsigned __int16 *)(v3 + 58);
  if (v6 != 0x4000)
  {
    v33[0] = (uint64_t)"invalid e_shentsize in ELF header: ";
    v34 = 259;
    v32 = 265;
    LODWORD(v31[0]) = __rev16(v6);
    goto LABEL_11;
  }
  v7 = a1[1];
  if (v5 > 0xFFFFFFFFFFFFFFBFLL || v5 + 64 > v7)
  {
    v33[0] = (uint64_t)"section header table goes past the end of the file: e_shoff = 0x";
    v34 = 259;
    v31[0] = (uint64_t)&v37;
    v31[2] = 0;
    v32 = 270;
LABEL_11:
    v9 = v31;
LABEL_12:
    sub_1C4825FE4(v33, v9, (uint64_t)v35);
    goto LABEL_13;
  }
  v13 = v3 + v5;
  v14 = *(unsigned __int16 *)(v3 + 60);
  v15 = __rev16(v14);
  v30 = v15;
  if (!v14)
  {
    v15 = bswap64(*(_QWORD *)(v13 + 32));
    v30 = v15;
    if (v15 >> 58)
    {
      v31[0] = (uint64_t)"invalid number of sections specified in the NULL section's sh_size field (";
      v32 = 259;
      v29 = 268;
      v28[0] = (uint64_t)&v30;
      sub_1C4825FE4(v31, v28, (uint64_t)v33);
      v26[0] = (uint64_t)")";
      v27 = 259;
      v9 = v26;
      goto LABEL_12;
    }
  }
  v16 = __CFADD__(v5, v15 << 6);
  v17 = v5 + (v15 << 6);
  if (v16)
  {
    v26[0] = (uint64_t)"invalid section header table offset (e_shoff = 0x";
    v27 = 259;
    v24[0] = (uint64_t)&v37;
    v24[2] = 0;
    v25 = 270;
    sub_1C4825FE4(v26, v24, (uint64_t)v28);
    v22 = ") or invalid number of sections specified in the first section header's sh_size field (0x";
    v23 = 259;
    sub_1C4825FE4(v28, (uint64_t *)&v22, (uint64_t)v31);
    v20[0] = (uint64_t)&v30;
    v20[2] = 0;
    v21 = 270;
    sub_1C4825FE4(v31, v20, (uint64_t)v33);
    v18 = ")";
    v19 = 259;
    v9 = (uint64_t *)&v18;
    goto LABEL_12;
  }
  if (v17 <= v7)
  {
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_QWORD *)a2 = v13;
    *(_QWORD *)(a2 + 8) = v15;
    return;
  }
  v35[0] = "section table goes past the end of file";
  v36 = 259;
LABEL_13:
  v10 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v12 = qword_1EF8F7238[0];
  *(_QWORD *)v10 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v35, (_QWORD *)(v10 + 8));
  *(_QWORD *)(v10 + 32) = 3;
  *(_QWORD *)(v10 + 40) = v12;
  *(_BYTE *)(v10 + 48) = 1;
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v10;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(_QWORD *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections(a1, (uint64_t)v7);
  if ((v8 & 1) != 0)
  {
    v5 = v7[0];
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v5;
  }
  else
  {
    sub_1C62CB604(v7[0], v7[1], a2, a3);
    if ((v8 & 1) != 0)
    {
      v6 = v7[0];
      v7[0] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSHNDXTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections(a1, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v6 = v8[0];
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v6;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSHNDXTable(a1, a2, v8[0], v8[1], a3);
    if ((v9 & 1) != 0)
    {
      v7 = v8[0];
      v8[0] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSHNDXTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *ELFSectionTypeName;
  uint64_t v20;
  uint64_t *v21;
  unint64_t *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27[4];
  __int16 v28;
  const char *v29;
  __int16 v30;
  unint64_t v31;
  uint64_t v32[4];
  __int16 v33;
  uint64_t v34[4];
  __int16 v35;
  _BYTE v36[40];
  uint64_t v37;
  char v38;
  _QWORD v39[2];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  sub_1C59BEE28(a1, (unint64_t *)a2, (uint64_t)v39);
  v10 = v39[0];
  if ((v40 & 1) != 0)
  {
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v10;
    return;
  }
  v11 = v39[1];
  sub_1C62CB604(a3, a4, bswap32(*(_DWORD *)(a2 + 40)), (uint64_t)&v37);
  v12 = v37;
  if ((v38 & 1) != 0)
  {
    v37 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v12;
    goto LABEL_18;
  }
  v13 = *(_DWORD *)(v37 + 4);
  if (v13 != 0x2000000 && v13 != 184549376)
  {
    ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*a1 + 18)) >> 16), bswap32(v13));
    v35 = 1283;
    v34[0] = (uint64_t)"SHT_SYMTAB_SHNDX section is linked with ";
    v34[2] = (uint64_t)ELFSectionTypeName;
    v34[3] = v20;
    v32[0] = (uint64_t)" section (expected SHT_SYMTAB/SHT_DYNSYM)";
    v33 = 259;
    v21 = v32;
LABEL_14:
    sub_1C4825FE4(v34, v21, (uint64_t)v36);
    v10 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v16 = qword_1EF8F7238[0];
    *(_QWORD *)v10 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v36, (_QWORD *)(v10 + 8));
    *(_QWORD *)(v10 + 32) = 3;
    *(_QWORD *)(v10 + 40) = v16;
    *(_BYTE *)(v10 + 48) = 1;
    *(_BYTE *)(a5 + 16) |= 1u;
    goto LABEL_17;
  }
  v31 = bswap64(*(_QWORD *)(v37 + 32)) / 0x18;
  if (v11 != v31)
  {
    v29 = "SHT_SYMTAB_SHNDX has ";
    v30 = 259;
    v28 = 266;
    v26 = v11;
    v27[0] = (uint64_t)&v26;
    sub_1C4825FE4((uint64_t *)&v29, v27, (uint64_t)v32);
    v24 = " entries, but the symbol table associated has ";
    v25 = 259;
    sub_1C4825FE4(v32, (uint64_t *)&v24, (uint64_t)v34);
    v23 = 268;
    v22 = &v31;
    v21 = (uint64_t *)&v22;
    goto LABEL_14;
  }
  *(_BYTE *)(a5 + 16) &= ~1u;
  *(_QWORD *)(a5 + 8) = v11;
LABEL_17:
  *(_QWORD *)a5 = v10;
LABEL_18:
  if ((v38 & 1) != 0)
  {
    v17 = v37;
    v37 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  if ((v40 & 1) != 0)
  {
    v18 = v39[0];
    v39[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

void sub_1C62CCAE0(_QWORD *a1@<X0>, unint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  unint64_t v15;
  uint64_t v16[4];
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21[4];
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[5];
  uint64_t v26[5];
  uint64_t v27[5];
  _BYTE v28[40];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::relas(a1, a2, (uint64_t)v29);
  if ((v30 & 1) != 0)
  {
    v7 = v29[0];
    v8 = *(_BYTE *)(a4 + 8) | 1;
    goto LABEL_5;
  }
  if (v29[1] > (unint64_t)a3)
  {
    v7 = v29[0] + 24 * a3;
    v8 = *(_BYTE *)(a4 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v7;
    return;
  }
  v23 = "can't read an entry at 0x";
  v24 = 259;
  v20 = 24 * a3;
  v21[0] = (uint64_t)&v20;
  v21[2] = 0;
  v22 = 270;
  sub_1C4825FE4((uint64_t *)&v23, v21, (uint64_t)v25);
  v18 = ": it goes past the end of the section (0x";
  v19 = 259;
  sub_1C4825FE4(v25, (uint64_t *)&v18, (uint64_t)v26);
  v15 = bswap64(a2[4]);
  v16[0] = (uint64_t)&v15;
  v16[2] = 0;
  v17 = 270;
  sub_1C4825FE4(v26, v16, (uint64_t)v27);
  v13 = ")";
  v14 = 259;
  sub_1C4825FE4(v27, (uint64_t *)&v13, (uint64_t)v28);
  v9 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v11 = qword_1EF8F7238[0];
  *(_QWORD *)v9 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v28, (_QWORD *)(v9 + 8));
  *(_QWORD *)(v9 + 32) = 3;
  *(_QWORD *)(v9 + 40) = v11;
  *(_BYTE *)(v9 + 48) = 1;
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v9;
  if ((v30 & 1) != 0)
  {
    v12 = v29[0];
    v29[0] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void (*a4)(std::string *__return_ptr, uint64_t, _QWORD *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v11;
  const char *v12;
  __int16 v13;
  uint64_t v14[4];
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[5];
  _QWORD v19[4];
  __int16 v20;

  v7 = *(unsigned __int16 *)(*a1 + 62);
  if (v7 == 0xFFFF)
  {
    if (!a3)
    {
      v19[0] = "e_shstrndx == SHN_XINDEX, but the section header table is empty";
      v20 = 259;
      goto LABEL_10;
    }
    v8 = bswap32(*(_DWORD *)(a2 + 40));
  }
  else
  {
    v8 = __rev16(v7);
  }
  if (!v8)
  {
    *(_BYTE *)(a6 + 16) &= ~1u;
    *(_QWORD *)a6 = "";
    *(_QWORD *)(a6 + 8) = 0;
    return;
  }
  if (a3 > v8)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getStringTable(a1, a2 + ((unint64_t)v8 << 6), a4, a5, a6);
    return;
  }
  v16 = "section header string table index ";
  v17 = 259;
  v15 = 264;
  LODWORD(v14[0]) = v8;
  sub_1C4825FE4((uint64_t *)&v16, v14, (uint64_t)v18);
  v12 = " does not exist";
  v13 = 259;
  sub_1C4825FE4(v18, (uint64_t *)&v12, (uint64_t)v19);
LABEL_10:
  v9 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v11 = qword_1EF8F7238[0];
  *(_QWORD *)v9 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v19, (_QWORD *)(v9 + 8));
  *(_QWORD *)(v9 + 32) = 3;
  *(_QWORD *)(v9 + 40) = v11;
  *(_BYTE *)(v9 + 48) = 1;
  *(_BYTE *)(a6 + 16) |= 1u;
  *(_QWORD *)a6 = v9;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionIndex(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X4>, uint64_t a4@<X8>)
{
  unsigned int v5;
  unsigned int v6;
  __int128 v7;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int16 *)(a1 + 6);
  if (v5 == 0xFFFF)
  {
    v7 = a3[1];
    v9[0] = *a3;
    v9[1] = v7;
    sub_1C59B2EE8(-1431655765 * ((unint64_t)(a1 - a2) >> 3), (uint64_t *)v9, (uint64_t)&v10);
    if ((v11 & 1) != 0)
    {
      v8 = v10;
      *(_BYTE *)(a4 + 8) |= 1u;
      *(_QWORD *)a4 = v8;
      return;
    }
    *(_BYTE *)(a4 + 8) &= ~1u;
    v6 = v10;
  }
  else
  {
    v6 = __rev16(v5);
    *(_BYTE *)(a4 + 8) &= ~1u;
    if ((unsigned __int16)(v6 + 256) <= 0x100u)
    {
      *(_DWORD *)a4 = 0;
      return;
    }
  }
  *(_DWORD *)a4 = v6;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _OWORD v12[2];
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v13[0] = 0;
    v13[1] = 0;
    v14 = 0;
    goto LABEL_8;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::relas(a1, a3, (uint64_t)v13);
  if ((v14 & 1) == 0)
  {
    a3 = (unint64_t *)v13[0];
LABEL_8:
    v11 = a4[1];
    v12[0] = *a4;
    v12[1] = v11;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a1, a2, (uint64_t)a3, v12, a5);
    if ((v14 & 1) == 0)
      return;
    goto LABEL_4;
  }
  v9 = v13[0];
  v13[0] = 0;
  *(_BYTE *)(a5 + 8) |= 1u;
  *(_QWORD *)a5 = v9;
LABEL_4:
  v10 = v13[0];
  v13[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X4>, uint64_t a5@<X8>)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v7 = a4[1];
  v10[0] = *a4;
  v10[1] = v7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionIndex(a2, a3, v10, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v8 = v11;
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v8;
  }
  else if ((_DWORD)v11)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a1, v11, a5);
    if ((v12 & 1) != 0)
    {
      v9 = v11;
      v11 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_QWORD *)a5 = 0;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, _QWORD *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  char v15;
  uint64_t v16[2];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections(a1, (uint64_t)v16);
  if ((v17 & 1) != 0)
  {
    v10 = v16[0];
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v10;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionStringTable(a1, v16[0], v16[1], a3, a4, (uint64_t)v14);
    if ((v15 & 1) != 0)
    {
      v12 = v14[0];
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v12;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionName(a1, a2, v14[0], v14[1], a5);
      if ((v15 & 1) != 0)
      {
        v11 = v14[0];
        v14[0] = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
    }
    if ((v17 & 1) != 0)
    {
      v13 = v16[0];
      v16[0] = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
  }
}

uint64_t sub_1C62CD258(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  return (*a1)(a2);
}

void llvm::object::ELFObjectFileBase::getMIPSFeatures(llvm::object::ELFObjectFileBase *this@<X0>, unint64_t *a2@<X8>)
{
  char *v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  llvm::SubtargetFeatures::Split(a2, (uint64_t)"", 0);
  v3 = (char *)sub_1C62CD2D4
     + 4
     * byte_1C86675A8[((*(unsigned int (**)(llvm::object::ELFObjectFileBase *))(*(_QWORD *)this + 512))(this) >> 28) ^ 8];
  __asm { BR              X10 }
}

void sub_1C62CD2D4()
{
  int64x2_t *v0;
  int v1;

  llvm::SubtargetFeatures::AddFeature(v0, "mips64r2", 8uLL, 1);
  if ((v1 & 0xFF0000) != 0)
    llvm::SubtargetFeatures::AddFeature(v0, "cnmips", 6uLL, 1);
  if ((v1 & 0x4000000) != 0)
    llvm::SubtargetFeatures::AddFeature(v0, "mips16", 6uLL, 1);
  if ((v1 & 0x2000000) != 0)
    llvm::SubtargetFeatures::AddFeature(v0, "micromips", 9uLL, 1);
}

void llvm::object::ELFObjectFileBase::getFeatures(llvm::object::ELFObjectFileBase *this@<X0>, int64x2_t *a2@<X8>)
{
  int v4;

  v4 = (*(uint64_t (**)(llvm::object::ELFObjectFileBase *))(*(_QWORD *)this + 528))(this);
  switch(v4)
  {
    case 40:
      llvm::object::ELFObjectFileBase::getARMFeatures(this, (unint64_t *)a2);
      break;
    case 243:
      llvm::object::ELFObjectFileBase::getRISCVFeatures(this, a2);
      break;
    case 8:
      llvm::object::ELFObjectFileBase::getMIPSFeatures(this, (unint64_t *)a2);
      break;
    default:
      a2->i64[0] = 0;
      a2->i64[1] = 0;
      a2[1].i64[0] = 0;
      llvm::SubtargetFeatures::Split((unint64_t *)a2, (uint64_t)"", 0);
      break;
  }
}

void llvm::object::ELFObjectFileBase::tryGetCPUName(llvm::object::ELFObjectFileBase *this@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(unsigned int (**)(llvm::object::ELFObjectFileBase *))(*(_QWORD *)this + 528))(this) == 224)
  {
    llvm::object::ELFObjectFileBase::getAMDGPUCPUName(this);
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v6;
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v4;
}

void llvm::object::ELFObjectFileBase::getAMDGPUCPUName(llvm::object::ELFObjectFileBase *this)
{
  char *v1;

  v1 = (char *)sub_1C62CD4F0
     + 4
     * byte_1C86675BF[(*(unsigned __int8 (**)(llvm::object::ELFObjectFileBase *))(*(_QWORD *)this + 512))(this)
                    - 1];
  __asm { BR              X10 }
}

const char *sub_1C62CD4F0()
{
  return "r630";
}

_QWORD *sub_1C62CD754@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3;
  _QWORD *result;

  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v3 = qword_1EF8F7238[0];
  result = (_QWORD *)operator new();
  *result = &off_1E81A0D28;
  result[1] = 3;
  result[2] = v3;
  *(_BYTE *)(a1 + 8) |= 1u;
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t sub_1C62CD7E8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t *sub_1C62CD7FC(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = ((_DWORD)a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

_QWORD *sub_1C62CD8A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E81891F0;
  v2 = a1[20];
  a1[20] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[20];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  sub_1C61B8160((uint64_t)(a1 + 8));
  sub_1C61B8160((uint64_t)(a1 + 3));
  return a1;
}

void sub_1C62CD914(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v9);
  v4 = v9;
  if ((v11 & 1) == 0)
  {
    if (v10)
    {
      v5 = 40 * v10;
      v6 = (int *)(v9 + 4);
      while (1)
      {
        v7 = *v6;
        if (*v6 == 2)
          break;
        if (v7 != 18)
        {
          if (v7 != 11)
            goto LABEL_11;
          v8 = (_QWORD *)(a1 + 72);
          if (*(_QWORD *)(a1 + 72))
            goto LABEL_11;
LABEL_10:
          *v8 = v6 - 1;
          goto LABEL_11;
        }
        v8 = (_QWORD *)(a1 + 88);
        if (!*(_QWORD *)(a1 + 88))
          goto LABEL_10;
LABEL_11:
        v6 += 10;
        v5 -= 40;
        if (!v5)
          goto LABEL_15;
      }
      v8 = (_QWORD *)(a1 + 80);
      if (*(_QWORD *)(a1 + 80))
        goto LABEL_11;
      goto LABEL_10;
    }
LABEL_15:
    v4 = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  *a2 = v4;
}

void sub_1C62CDA14()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C62CDA28(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

void sub_1C62CDA38(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  char *v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int *v11;
  char *v12;
  uint64_t v13;
  unsigned int *v14;
  char v15;
  char *v16;
  int v19;
  int v20;
  char *v21;
  int v22;
  char *v23;
  char *v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  BOOL v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  sub_1C62CF6C8((uint64_t)&v38, a1 + 7, a2, HIDWORD(a2));
  v7 = (char *)v38;
  if ((v39 & 1) != 0)
  {
    v38 = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v7;
    goto LABEL_12;
  }
  v8 = *(unsigned __int8 *)(v38 + 12);
  if ((v8 & 0xF0) == 0x20)
    v9 = (2 * (v8 > 0xF)) | 4;
  else
    v9 = 2 * (v8 > 0xF);
  if (*(__int16 *)(v38 + 14) == -15)
    v10 = v9 | 8;
  else
    v10 = v9;
  v11 = (unsigned int *)a1[10];
  if (v11)
  {
    sub_1C59A86D4(v6, v11, (uint64_t)&v35);
    v12 = v35;
    if ((v37 & 1) != 0)
    {
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v12;
      goto LABEL_12;
    }
  }
  else
  {
    v12 = 0;
  }
  v14 = (unsigned int *)a1[9];
  if (v14)
  {
    sub_1C59A86D4(v6, v14, (uint64_t)&v35);
    v15 = v37;
    v16 = v35;
  }
  else
  {
    v16 = 0;
    v15 = v37 & 0xFE;
  }
  if ((v15 & 1) != 0)
  {
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v16;
    goto LABEL_12;
  }
  if ((v8 & 0xF) - 3 < 2 || v7 == v12 || v7 == v16)
    v19 = v10 | 0x80;
  else
    v19 = v10;
  v20 = *(unsigned __int16 *)(*v6 + 18);
  if (v20 == 183)
  {
    (*(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*a1 + 72))(&v35, a1, a2);
    v21 = v35;
    if ((v37 & 1) != 0)
    {
      v35 = 0;
      v33 = v21;
      sub_1C4D62BD4(&v33, &v34);
      if (v33)
        (*(void (**)(char *))(*(_QWORD *)v33 + 8))(v33);
      if ((v37 & 1) != 0)
      {
        v24 = v35;
        v35 = 0;
        if (v24)
          (*(void (**)(char *))(*(_QWORD *)v24 + 8))(v24);
      }
      v22 = v19;
    }
    else
    {
      v22 = v19;
      if (v36 >= 2)
      {
        v22 = v10 | 0x80;
        if (*(_WORD *)v35 != 25636)
        {
          if (*(_WORD *)v35 == 30756)
            v22 = v10 | 0x80;
          else
            v22 = v19;
        }
      }
    }
    goto LABEL_53;
  }
  if (v20 != 40)
  {
    if (v20 == 243)
    {
      (*(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*a1 + 72))(&v35, a1, a2);
      if ((v37 & 1) != 0)
      {
        v31 = v35;
        v35 = 0;
        v33 = v31;
        sub_1C4D62BD4(&v33, &v34);
        if (v33)
          (*(void (**)(char *))(*(_QWORD *)v33 + 8))(v33);
        if ((v37 & 1) != 0)
        {
          v32 = v35;
          v35 = 0;
          if (v32)
            (*(void (**)(char *))(*(_QWORD *)v32 + 8))(v32);
        }
      }
      else if (!v36)
      {
        v19 = v10 | 0x80;
      }
    }
    goto LABEL_54;
  }
  (*(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*a1 + 72))(&v35, a1, a2);
  v23 = v35;
  if ((v37 & 1) != 0)
  {
    v35 = 0;
    v33 = v23;
    sub_1C4D62BD4(&v33, &v34);
    if (v33)
      (*(void (**)(char *))(*(_QWORD *)v33 + 8))(v33);
    if ((v37 & 1) != 0)
    {
      v30 = v35;
      v35 = 0;
      if (v30)
        (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
    }
    v22 = v19;
  }
  else
  {
    if (!v36)
      goto LABEL_85;
    v22 = v19;
    if (v36 == 1)
      goto LABEL_78;
    if (*(_WORD *)v35 == 25636)
    {
LABEL_85:
      v22 = v10 | 0x80;
    }
    else
    {
      v22 = v10 | 0x80;
      if (*(_WORD *)v35 != 29732)
      {
        if (*(_WORD *)v35 == 24868)
          v22 = v10 | 0x80;
        else
          v22 = v19;
      }
    }
  }
LABEL_78:
  if ((v7[12] & 0xF) != 2)
  {
LABEL_53:
    v19 = v22;
    goto LABEL_54;
  }
  v19 = ((*((_DWORD *)v7 + 1) & 1) << 8) | v22;
LABEL_54:
  v25 = v19 | (*((_WORD *)v7 + 7) == 0);
  v26 = v7[12];
  if ((v26 & 0xF) == 5 || *((unsigned __int16 *)v7 + 7) == 65522)
    v25 |= 0x10u;
  v27 = v26 >> 4;
  if (v27 <= 0xA && ((1 << v27) & 0x406) != 0)
  {
    v28 = v7[13] & 3;
    v29 = (v7[13] & 3) == 0;
    if (v28 == 3)
      v29 = 1;
    if (v29)
      v25 |= 0x40u;
  }
  else
  {
    v28 = v7[13] & 3;
  }
  if (v28 == 2)
    v25 |= 0x200u;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v25;
LABEL_12:
  if ((v39 & 1) != 0)
  {
    v13 = v38;
    v38 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
}

unint64_t sub_1C62CDEAC(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
    v2 = *(_DWORD *)(v1 + 20) > 0xFu;
  else
    v2 = 0;
  return sub_1C62CF788(a1, v1, v2);
}

unint64_t sub_1C62CDEF0(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[10];
  if (v1)
    return sub_1C62CF788((uint64_t)a1, v1, *(_DWORD *)(v1 + 20) >> 4);
  else
    return (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
}

void sub_1C62CDF40(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  char v22;
  unsigned int *v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  llvm::object::ObjectFile::getSymbolValue(a1, a2, (uint64_t)&v27);
  if ((v28 & 1) != 0)
  {
    v6 = v27;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v6;
    return;
  }
  v7 = v27;
  sub_1C62CF6C8((uint64_t)&v25, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  v8 = v25;
  if ((v26 & 1) != 0)
  {
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v8;
  }
  else
  {
    v9 = *(unsigned __int16 *)(v25 + 14);
    if ((v9 - 65521) >= 2 && v9 != 0)
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v23);
      if ((v24 & 1) != 0)
      {
        v12 = v23;
        v23 = 0;
      }
      else
      {
        if (*(_WORD *)(*(_QWORD *)(a1 + 56) + 16) != 1)
        {
LABEL_17:
          *(_BYTE *)(a3 + 8) &= ~1u;
          *(_QWORD *)a3 = v7;
          goto LABEL_20;
        }
        v15 = *(unsigned int **)(a1 + 88);
        if (v15)
        {
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSHNDXTable((_QWORD *)(a1 + 56), v15, (uint64_t)&v20);
          v12 = v20;
          if ((v22 & 1) != 0)
            goto LABEL_19;
          v16 = v21;
        }
        else
        {
          v12 = 0;
          v16 = 0;
        }
        *(_QWORD *)&v17 = v12;
        *((_QWORD *)&v17 + 1) = v16;
        v18 = 1;
        v19 = 0;
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection((_QWORD *)(a1 + 56), v25, v23, &v17, (uint64_t)&v20);
        v12 = v20;
        if ((v21 & 1) == 0)
        {
          if (v20)
            v7 += v20[3];
          goto LABEL_17;
        }
      }
LABEL_19:
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v12;
LABEL_20:
      if ((v24 & 1) != 0)
      {
        v13 = v23;
        v23 = 0;
        if (v13)
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
      }
      if ((v26 & 1) != 0)
      {
        v14 = v25;
        v25 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
      goto LABEL_12;
    }
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v7;
  }
LABEL_12:
  if ((v28 & 1) != 0)
  {
    v11 = v27;
    v27 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
}

uint64_t sub_1C62CE160(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 56;
  sub_1C62CF6C8((uint64_t)&v7, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    v7 = 0;
    llvm::report_fatal_error(&v6);
  }
  result = *(unsigned int *)(v7 + 4);
  if (*(__int16 *)(v7 + 14) != -15)
  {
    v4 = *(unsigned __int16 *)(*(_QWORD *)v2 + 18);
    if ((v4 == 40 || v4 == 8) && (*(_BYTE *)(v7 + 12) & 0xF) == 2)
      return result & 0xFFFFFFFE;
  }
  return result;
}

uint64_t sub_1C62CE21C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  sub_1C62CF6C8((uint64_t)&v4, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v5 & 1) != 0)
  {
    v3 = v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  if (*(__int16 *)(v4 + 14) == -14)
    return *(unsigned int *)(v4 + 4);
  else
    return 0;
}

uint64_t sub_1C62CE2AC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
}

void sub_1C62CE2B8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  sub_1C62CF6C8((uint64_t)&v6, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  v4 = v6;
  if ((v7 & 1) != 0)
  {
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v4;
  }
  else
  {
    switch(*(_BYTE *)(v6 + 12) & 0xF)
    {
      case 0:
        *(_BYTE *)(a3 + 8) &= ~1u;
        *(_DWORD *)a3 = 0;
        return;
      case 1:
      case 5:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 2;
        goto LABEL_4;
      case 2:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 5;
        goto LABEL_4;
      case 3:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 3;
        goto LABEL_4;
      case 4:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 4;
        goto LABEL_4;
      default:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 1;
LABEL_4:
        *(_DWORD *)a3 = v5;
        break;
    }
  }
}

void sub_1C62CE3DC(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v3 = a2;
  v15 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  sub_1C62CF6C8((uint64_t)&v13, a1 + 7, a2, HIDWORD(a2));
  if ((v14 & 1) != 0)
  {
    v7 = v13;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(v6, v3, (uint64_t)&v11);
    if ((v12 & 1) != 0)
    {
      v8 = v11;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v8;
    }
    else
    {
      sub_1C62CF908(a3, a1, v13, v11);
      if ((v12 & 1) != 0)
      {
        v10 = v11;
        v11 = 0;
        if (v10)
          (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
      }
    }
    if ((v14 & 1) != 0)
    {
      v9 = v13;
      v13 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
}

void sub_1C62CE4F8(uint64_t a1, _QWORD *a2)
{
  *a2 += 40;
}

void sub_1C62CE508(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  void (*v3)(llvm::Twine *@<X0>, uint64_t *@<X8>);

  v3 = sub_1C59CE874;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName((_QWORD *)(a1 + 56), a2, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, (uint64_t)&v3, a3);
}

uint64_t sub_1C62CE540(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 12);
}

unint64_t sub_1C62CE548(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;
  char *v6;
  char *v7;
  char *v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v8);
  if ((v9 & 1) != 0)
  {
    v3 = v8;
    v8 = 0;
  }
  else
  {
    v3 = 0;
  }
  v6 = v3;
  sub_1C62CFA3C(&v7, &v6);
  if (v6)
    (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
  v4 = v8;
  if ((v9 & 1) != 0)
  {
    v8 = 0;
    if (v4)
      (*(void (**)(char *))(*(_QWORD *)v4 + 8))(v4);
  }
  return 0xCCCCCCCCCCCCCCCDLL * ((a2 - (uint64_t)v4) >> 3);
}

uint64_t sub_1C62CE618(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 20);
}

uint64_t sub_1C62CE620(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 32);
}

uint64_t sub_1C62CE628(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 9) >> 3) & 1;
}

uint64_t sub_1C62CE634(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 8) >> 2) & 1;
}

BOOL sub_1C62CE640(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4) != 1)
    return 0;
  if ((*(_DWORD *)(a2 + 8) & 2) != 0)
    return (*(_DWORD *)(a2 + 8) & 4) == 0;
  return 0;
}

BOOL sub_1C62CE66C(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a2 + 8) & 3) != 0 && *(_DWORD *)(a2 + 4) == 8;
}

BOOL sub_1C62CE690(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) == 8;
}

BOOL sub_1C62CE6A0(uint64_t a1, uint64_t a2)
{
  int v2;
  _BOOL4 v3;

  v2 = *(_DWORD *)(a2 + 8);
  v3 = (v2 & 4) != 0 || (*(_DWORD *)(a2 + 8) & 1) == 0;
  return (v2 & 2) != 0 && v3;
}

uint64_t sub_1C62CE6C4(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1) & 1) != 0 || *(_DWORD *)(a2 + 4) == 8)
    return 0;
  else
    return (*(unsigned __int8 *)(a2 + 8) >> 1) & 1;
}

uint64_t sub_1C62CE70C(uint64_t a1)
{
  char *v1;
  uint64_t result;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 136))(&v8);
  v1 = (char *)v8;
  if ((v10 & 1) != 0)
  {
    v8 = 0;
    v6 = v1;
    sub_1C4D62BD4(&v6, &v7);
    if (v6)
      (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
    if ((v10 & 1) != 0)
    {
      result = v8;
      v8 = 0;
      if (!result)
        return result;
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return 0;
  }
  if (v9 < 6)
    return 0;
  if (*(_DWORD *)v8 == 1650811950 && *(_WORD *)(v8 + 4) == 26485)
    return 1;
  if (v9 < 7)
    return 0;
  if (*(_DWORD *)v8 == 1701083694 && *(_DWORD *)(v8 + 3) == 1735746149)
    return 1;
  if (v9 != 10)
    return 0;
  return *(_QWORD *)v8 == 0x646E695F6264672ELL && *(_WORD *)(v8 + 8) == 30821;
}

uint64_t sub_1C62CE854(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v5);
  result = v5;
  if ((v6 & 1) == 0)
    return ((a2 - v5) / (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 46));
  v5 = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

void sub_1C62CE900(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a2 + 4);
  if (v5 == 4 || v5 == 9)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a1 + 7, *(_DWORD *)(a2 + 28), (uint64_t)&v10);
    v9 = v10;
    if ((v11 & 1) != 0)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)(a3 + 8) = a1;
    }
    *(_QWORD *)a3 = v9;
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 352))(a1);
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = v8;
  }
}

void sub_1C62CE9C8(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

uint64_t sub_1C62CE9D8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  if (*((_DWORD *)sub_1C59CEA6C(a1, a2) + 1) == 9)
    v4 = sub_1C59CEB10(a1, a2);
  else
    v4 = sub_1C59CEBB8(a1, a2);
  return *(unsigned int *)v4;
}

unint64_t sub_1C62CEA20(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unsigned int v6;

  v4 = sub_1C59CEA6C(a1, a2);
  if (*((_DWORD *)v4 + 1) == 9)
    v5 = sub_1C59CEB10(a1, a2);
  else
    v5 = sub_1C59CEBB8(a1, a2);
  v6 = *((_DWORD *)v5 + 1);
  if (v6 > 0xFF)
    return *((unsigned int *)v4 + 6) | ((unint64_t)(v6 >> 8) << 32);
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t sub_1C62CEAA4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  if (*((_DWORD *)sub_1C59CEA6C(a1, a2) + 1) == 9)
    v4 = sub_1C59CEB10(a1, a2);
  else
    v4 = sub_1C59CEBB8(a1, a2);
  return *((unsigned __int8 *)v4 + 4);
}

_QWORD *sub_1C62CEAEC(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v4;
  unsigned int v5;

  v4 = a1 + 7;
  v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 312))(a1);
  return llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationTypeName(v4, v5, a3);
}

void sub_1C62CEB24(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  int *v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *__p;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  __p = 0;
  v18 = 0;
  v19 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v20);
  if ((v22 & 1) == 0 && v21)
  {
    v4 = 0;
    v5 = v20;
    v6 = v20 + 40 * v21;
    do
    {
      if (*(_DWORD *)(v5 + 4) == 6)
      {
        v7 = (int *)(*(unsigned int *)(v5 + 16) + *(_QWORD *)(a1 + 16));
        v8 = *v7;
        if (*v7)
        {
          v9 = v7 + 2;
          do
          {
            if (v8 == 17 || v8 == 7 || v8 == 23)
            {
              v10 = *(v9 - 1);
              if ((unint64_t)v4 >= v19)
              {
                v4 = sub_1C57753FC((char **)&__p, v10);
              }
              else
              {
                *(_QWORD *)v4 = v10;
                v4 += 8;
              }
              v18 = v4;
            }
            v11 = *v9;
            v9 += 2;
            v8 = v11;
          }
          while (v11);
        }
      }
      v5 += 40;
    }
    while (v5 != v6);
    if (v21)
    {
      v12 = 0;
      v13 = v20;
      v14 = v20 + 40 * v21;
      do
      {
        v15 = (char *)__p;
        if (__p != v18)
        {
          while (*(_QWORD *)v15 != *(_DWORD *)(v13 + 12))
          {
            v15 += 8;
            if (v15 == v18)
            {
              v15 = v18;
              break;
            }
          }
        }
        if (v15 != v18)
        {
          if ((unint64_t)v12 >= *(_QWORD *)(a2 + 16))
          {
            v12 = sub_1C59CEC60((char **)a2, v13, a1);
          }
          else
          {
            *(_QWORD *)v12 = v13;
            *((_QWORD *)v12 + 1) = a1;
            v12 += 16;
          }
          *(_QWORD *)(a2 + 8) = v12;
        }
        v13 += 40;
      }
      while (v13 != v14);
    }
  }
  if ((v22 & 1) != 0)
  {
    v16 = v20;
    v20 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  if (__p)
    operator delete(__p);
}

uint64_t sub_1C62CECE4()
{
  return 4;
}

const char *sub_1C62CECEC(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  const char *result;
  int v5;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(unsigned __int8 *)(v1 + 4);
  if (v2 == 2)
  {
    v5 = *(unsigned __int16 *)(v1 + 18);
    if (v5 > 182)
    {
      if (v5 > 246)
      {
        switch(v5)
        {
          case 247:
            return "elf64-bpf";
          case 251:
            return "elf64-ve";
          case 258:
            return "elf64-loongarch";
        }
      }
      else
      {
        switch(v5)
        {
          case 183:
            return "elf64-littleaarch64";
          case 224:
            return "elf64-amdgpu";
          case 243:
            return "elf64-littleriscv";
        }
      }
    }
    else if (v5 > 21)
    {
      switch(v5)
      {
        case 22:
          return "elf64-s390";
        case 43:
          return "elf64-sparc";
        case 62:
          return "elf64-x86-64";
      }
    }
    else
    {
      switch(v5)
      {
        case 3:
          return "elf64-i386";
        case 8:
          return "elf64-mips";
        case 21:
          return "elf64-powerpcle";
      }
    }
    return "elf64-unknown";
  }
  else
  {
    if (v2 != 1)
      llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const char *)1);
    v3 = *(unsigned __int16 *)(v1 + 18);
    if (v3 > 61)
    {
      if (v3 <= 223)
      {
        if (v3 > 104)
        {
          if (v3 == 105)
            return "elf32-msp430";
          if (v3 == 164)
            return "elf32-hexagon";
        }
        else
        {
          if (v3 == 62)
            return "elf32-x86-64";
          if (v3 == 83)
            return "elf32-avr";
        }
      }
      else if (v3 <= 243)
      {
        if (v3 == 224)
          return "elf32-amdgpu";
        if (v3 == 243)
          return "elf32-littleriscv";
      }
      else
      {
        switch(v3)
        {
          case 244:
            return "elf32-lanai";
          case 252:
            return "elf32-csky";
          case 258:
            return "elf32-loongarch";
        }
      }
      return "elf32-unknown";
    }
    if (v3 > 17)
    {
      if (v3 != 18)
      {
        if (v3 == 20)
          return "elf32-powerpcle";
        if (v3 == 40)
          return "elf32-littlearm";
        return "elf32-unknown";
      }
      return "elf32-sparc";
    }
    else
    {
      result = "elf32-m68k";
      switch(v3)
      {
        case 2:
          return "elf32-sparc";
        case 3:
          result = "elf32-i386";
          break;
        case 4:
          return result;
        case 6:
          result = "elf32-iamcu";
          break;
        case 8:
          result = "elf32-mips";
          break;
        default:
          return "elf32-unknown";
      }
    }
  }
  return result;
}

uint64_t sub_1C62CEFD8(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t result;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(unsigned __int16 *)(v1 + 18);
  if (v2 <= 0x3D)
  {
    result = 15;
    switch(*(_WORD *)(v1 + 18))
    {
      case 2:
      case 0x12:
        return 35;
      case 3:
      case 6:
        return 41;
      case 4:
        return result;
      case 5:
      case 7:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x13:
        return 0;
      case 8:
        v6 = *(unsigned __int8 *)(v1 + 4);
        if (v6 == 1)
        {
          result = 17;
        }
        else
        {
          if (v6 != 2)
            goto LABEL_51;
          result = 19;
        }
        break;
      case 0x14:
        return 22;
      case 0x15:
        return 24;
      case 0x16:
        return 36;
      default:
        if (v2 == 40)
          return 1;
        if (v2 != 43)
          return 0;
        return 34;
    }
  }
  else
  {
    if (*(unsigned __int16 *)(v1 + 18) <= 0xDFu)
    {
      if (*(unsigned __int16 *)(v1 + 18) <= 0x68u)
      {
        if (v2 == 62)
          return 42;
        if (v2 == 83)
          return 7;
      }
      else
      {
        switch(v2)
        {
          case 0x69u:
            return 20;
          case 0xA4u:
            return 12;
          case 0xB7u:
            return 3;
        }
      }
      return 0;
    }
    switch(*(_WORD *)(v1 + 18))
    {
      case 0xF3:
        v4 = *(unsigned __int8 *)(v1 + 4);
        if (v4 != 1)
        {
          if (v4 == 2)
            return 32;
          goto LABEL_51;
        }
        result = 31;
        break;
      case 0xF4:
        return 62;
      case 0xF5:
      case 0xF6:
      case 0xF8:
      case 0xF9:
      case 0xFA:
        return 0;
      case 0xF7:
        return 8;
      case 0xFB:
        return 67;
      case 0xFC:
        return 10;
      default:
        if (v2 == 224)
        {
          v7 = *(unsigned __int8 *)(v1 + 36);
          v8 = v7 - 1;
          if ((v7 - 32) >= 0x26)
            v9 = 0;
          else
            v9 = 30;
          if (v8 >= 0x10)
            result = v9;
          else
            result = 25;
        }
        else
        {
          if (v2 != 258)
            return 0;
          v5 = *(unsigned __int8 *)(v1 + 4);
          if (v5 != 1)
          {
            if (v5 == 2)
              return 14;
LABEL_51:
            llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const char *)1);
          }
          result = 13;
        }
        break;
    }
  }
  return result;
}

uint64_t sub_1C62CF1C4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 56);
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_QWORD *)a2 = *(unsigned int *)(v2 + 24);
  return result;
}

BOOL sub_1C62CF1E0(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 16) == 1;
}

uint64_t sub_1C62CF1F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  sub_1C62CF6C8((uint64_t)&v4, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v5 & 1) != 0)
  {
    v3 = v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned int *)(v4 + 8);
}

uint64_t sub_1C62CF270(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  sub_1C62CF6C8((uint64_t)&v4, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v5 & 1) != 0)
  {
    v3 = v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 12) >> 4;
}

uint64_t sub_1C62CF2F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  sub_1C62CF6C8((uint64_t)&v4, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v5 & 1) != 0)
  {
    v3 = v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 13);
}

uint64_t sub_1C62CF36C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  sub_1C62CF6C8((uint64_t)&v4, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v5 & 1) != 0)
  {
    v3 = v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(_BYTE *)(v4 + 12) & 0xF;
}

uint64_t sub_1C62CF3EC(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 4);
}

uint64_t sub_1C62CF3F4(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 8);
}

uint64_t sub_1C62CF3FC(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

void sub_1C62CF404(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  unint64_t v9;
  const char *v10;
  __int16 v11;

  if (*((_DWORD *)sub_1C59CEA6C(a1, a2) + 1) == 4)
  {
    v6 = *((int *)sub_1C59CEBB8(a1, a2) + 2);
    v7 = *(_BYTE *)(a3 + 8) & 0xFE;
  }
  else
  {
    v10 = "Section is not SHT_RELA";
    v11 = 259;
    v6 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v9 = qword_1EF8F7238[0];
    *(_QWORD *)v6 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v10, (_QWORD *)(v6 + 8));
    *(_QWORD *)(v6 + 32) = 3;
    *(_QWORD *)(v6 + 40) = v9;
    *(_BYTE *)(v6 + 48) = 1;
    v7 = *(_BYTE *)(a3 + 8) | 1;
  }
  *(_BYTE *)(a3 + 8) = v7;
  *(_QWORD *)a3 = v6;
}

void sub_1C62CF508(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v17);
  if ((v19 & 1) != 0)
  {
    v8 = v17;
    v17 = 0;
    *a3 = v8;
    goto LABEL_8;
  }
  if (!v18)
  {
LABEL_6:
    *a3 = 0;
    goto LABEL_8;
  }
  v6 = (_DWORD *)(v17 + 4);
  v7 = 40 * v18;
  while (*v6 != 1879048195)
  {
    v6 += 10;
    v7 -= 40;
    if (!v7)
      goto LABEL_6;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContents(v5, (uint64_t)(v6 - 1), (uint64_t)&v14);
  v10 = v14;
  if ((v16 & 1) != 0)
    goto LABEL_19;
  if (*v14 != 65 || v15 == 1)
  {
    v10 = 0;
LABEL_19:
    *a3 = (uint64_t)v10;
    goto LABEL_8;
  }
  llvm::ELFAttributeParser::parse(a2, (uint64_t)v14, v15, 1, a3);
  v12 = *a3;
  if ((v16 & 1) != 0)
  {
    v13 = v14;
    v14 = 0;
    if (v13)
      (*(void (**)(_BYTE *))(*(_QWORD *)v13 + 8))(v13);
  }
  if (!v12)
    goto LABEL_6;
LABEL_8:
  if ((v19 & 1) != 0)
  {
    v9 = v17;
    v17 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

unint64_t sub_1C62CF660@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;
  unint64_t v8;

  v4 = sub_1C62D0108(a1);
  v6 = v5;
  result = sub_1C62D0154(a1);
  *a2 = v4;
  a2[1] = v6;
  a2[2] = result;
  a2[3] = v8;
  return result;
}

uint64_t sub_1C62CF6A4(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 56) + 36);
}

uint64_t sub_1C62CF6B0(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 16);
}

uint64_t sub_1C62CF6BC(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 18);
}

void sub_1C62CF6C8(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a2, a3, (uint64_t)&v9);
  v7 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    sub_1C62C9DF4(a2, v9, a4, a1);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
}

unint64_t sub_1C62CF788(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5;
  unint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v7);
    v5 = v7;
    if ((v8 & 1) != 0)
    {
      v7 = 0;
      if (v5)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v5 + 8))(v5);
        LODWORD(v5) = 0;
      }
      a3 = 0;
    }
    else
    {
      v5 = (a2 - v7) / 0x28;
    }
  }
  else
  {
    a3 = 0;
    LODWORD(v5) = 0;
  }
  return v5 | ((unint64_t)a3 << 32);
}

void sub_1C62CF83C(uint64_t a1, int *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5;
  size_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v11 = *a2;
  if (a4 <= v11)
  {
    if (!atomic_load(qword_1EF8F7238))
    {
      v8 = a4;
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      a4 = v8;
    }
    v9 = a4;
    sub_1C59CE920(&v10, 3, qword_1EF8F7238[0], (int *)&v11, (uint64_t *)&v9);
    *(_BYTE *)(a1 + 16) |= 1u;
    *(_QWORD *)a1 = v10;
  }
  else
  {
    v5 = a3 + v11;
    if (a3)
      v6 = strlen((const char *)(a3 + v11));
    else
      v6 = 0;
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
  }
}

void sub_1C62CF908(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int *a4)
{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = (unsigned int *)a2[11];
  if (v8)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSHNDXTable(a2 + 7, v8, (uint64_t)&v17);
    v9 = v17;
    if ((v19 & 1) != 0)
      goto LABEL_7;
    v10 = v18;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  *(_QWORD *)&v14 = v9;
  *((_QWORD *)&v14 + 1) = v10;
  v15 = 1;
  v16 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a2 + 7, a3, a4, &v14, (uint64_t)&v17);
  v9 = v17;
  if ((v18 & 1) != 0)
  {
LABEL_7:
    *(_BYTE *)(a1 + 16) |= 1u;
    *(_QWORD *)a1 = v9;
    return;
  }
  if (v17)
  {
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v11 = (*(uint64_t (**)(_QWORD *))(*a2 + 352))(a2);
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    if ((v18 & 1) != 0)
    {
      v13 = v17;
      v17 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
  }
}

char **sub_1C62CFA3C(char **result, char **a2)
{
  char **v2;
  char *v3;
  char **v4;
  char **v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  v2 = result;
  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
    if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v3 + 48))(v3, &llvm::ErrorList::ID))
    {
      *v2 = 0;
      v4 = (char **)*((_QWORD *)v3 + 1);
      v5 = (char **)*((_QWORD *)v3 + 2);
      if (v4 != v5)
      {
        v6 = 0;
        do
        {
          v9 = v6;
          v7 = *v4;
          *v4 = 0;
          (*(void (**)(char *, void *))(*(_QWORD *)v7 + 48))(v7, &llvm::ErrorInfoBase::ID);
          v8 = v7;
          sub_1C6174794(&v9, &v8, &v10);
          v6 = v10;
          *v2 = v10;
          v10 = 0;
          if (v8)
            (*(void (**)(char *))(*(_QWORD *)v8 + 8))(v8);
          if (v9)
            (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
          ++v4;
        }
        while (v4 != v5);
      }
      return (char **)(*(uint64_t (**)(char *))(*(_QWORD *)v3 + 8))(v3);
    }
    else
    {
      result = (char **)(*(uint64_t (**)(char *, void *))(*(_QWORD *)v3 + 48))(v3, &llvm::ErrorInfoBase::ID);
      *v2 = v3;
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

void sub_1C62CFB60(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a2, a3, (uint64_t)&v9);
  v7 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    sub_1C62CFC20(a1, a2, v9, a4);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
}

void sub_1C62CFC20(uint64_t a1, _QWORD *a2, unsigned int *a3, unsigned int a4)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16[4];
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21[4];
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[5];
  uint64_t v26[5];
  uint64_t v27[5];
  _BYTE v28[40];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  sub_1C59A931C(a2, a3, (uint64_t)v29);
  if ((v30 & 1) != 0)
  {
    v7 = v29[0];
    v8 = *(_BYTE *)(a1 + 8) | 1;
    goto LABEL_5;
  }
  if (v29[1] > (unint64_t)a4)
  {
    v7 = v29[0] + 8 * a4;
    v8 = *(_BYTE *)(a1 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v7;
    return;
  }
  v23 = "can't read an entry at 0x";
  v24 = 259;
  v20 = 8 * a4;
  v21[0] = (uint64_t)&v20;
  v21[2] = 0;
  v22 = 270;
  sub_1C4825FE4((uint64_t *)&v23, v21, (uint64_t)v25);
  v18 = ": it goes past the end of the section (0x";
  v19 = 259;
  sub_1C4825FE4(v25, (uint64_t *)&v18, (uint64_t)v26);
  v15 = a3[5];
  v16[0] = (uint64_t)&v15;
  v16[2] = 0;
  v17 = 270;
  sub_1C4825FE4(v26, v16, (uint64_t)v27);
  v13 = ")";
  v14 = 259;
  sub_1C4825FE4(v27, (uint64_t *)&v13, (uint64_t)v28);
  v9 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v11 = qword_1EF8F7238[0];
  *(_QWORD *)v9 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v28, (_QWORD *)(v9 + 8));
  *(_QWORD *)(v9 + 32) = 3;
  *(_QWORD *)(v9 + 40) = v11;
  *(_BYTE *)(v9 + 48) = 1;
  *(_BYTE *)(a1 + 8) |= 1u;
  *(_QWORD *)a1 = v9;
  if ((v30 & 1) != 0)
  {
    v12 = v29[0];
    v29[0] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

void sub_1C62CFE30(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a2, a3, (uint64_t)&v9);
  v7 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    sub_1C62CFEF0(a1, a2, v9, a4);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
}

void sub_1C62CFEF0(uint64_t a1, _QWORD *a2, unsigned int *a3, unsigned int a4)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16[4];
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21[4];
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[5];
  uint64_t v26[5];
  uint64_t v27[5];
  _BYTE v28[40];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  sub_1C59A8CEC(a2, a3, (uint64_t)v29);
  if ((v30 & 1) != 0)
  {
    v7 = v29[0];
    v8 = *(_BYTE *)(a1 + 8) | 1;
    goto LABEL_5;
  }
  if (v29[1] > (unint64_t)a4)
  {
    v7 = v29[0] + 12 * a4;
    v8 = *(_BYTE *)(a1 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v7;
    return;
  }
  v23 = "can't read an entry at 0x";
  v24 = 259;
  v20 = 12 * a4;
  v21[0] = (uint64_t)&v20;
  v21[2] = 0;
  v22 = 270;
  sub_1C4825FE4((uint64_t *)&v23, v21, (uint64_t)v25);
  v18 = ": it goes past the end of the section (0x";
  v19 = 259;
  sub_1C4825FE4(v25, (uint64_t *)&v18, (uint64_t)v26);
  v15 = a3[5];
  v16[0] = (uint64_t)&v15;
  v16[2] = 0;
  v17 = 270;
  sub_1C4825FE4(v26, v16, (uint64_t)v27);
  v13 = ")";
  v14 = 259;
  sub_1C4825FE4(v27, (uint64_t *)&v13, (uint64_t)v28);
  v9 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v11 = qword_1EF8F7238[0];
  *(_QWORD *)v9 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v28, (_QWORD *)(v9 + 8));
  *(_QWORD *)(v9 + 32) = 3;
  *(_QWORD *)(v9 + 40) = v11;
  *(_BYTE *)(v9 + 48) = 1;
  *(_BYTE *)(a1 + 8) |= 1u;
  *(_QWORD *)a1 = v9;
  if ((v30 & 1) != 0)
  {
    v12 = v29[0];
    v29[0] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

unint64_t sub_1C62D0108(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 72);
  v2 = v1 && *(_DWORD *)(v1 + 20) > 0xFu;
  return sub_1C62CF788(a1, v1, v2);
}

unint64_t sub_1C62D0154(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
    return sub_1C62CF788(a1, v1, *(_DWORD *)(v1 + 20) >> 4);
  else
    return sub_1C62D0108(a1);
}

void sub_1C62D019C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v9);
  v4 = v9;
  if ((v11 & 1) == 0)
  {
    if (v10)
    {
      v5 = 40 * v10;
      v6 = (unsigned int *)(v9 + 4);
      while (1)
      {
        v7 = bswap32(*v6);
        if (v7 == 2)
          break;
        if (v7 != 18)
        {
          if (v7 != 11)
            goto LABEL_11;
          v8 = (_QWORD *)(a1 + 72);
          if (*(_QWORD *)(a1 + 72))
            goto LABEL_11;
LABEL_10:
          *v8 = v6 - 1;
          goto LABEL_11;
        }
        v8 = (_QWORD *)(a1 + 88);
        if (!*(_QWORD *)(a1 + 88))
          goto LABEL_10;
LABEL_11:
        v6 += 10;
        v5 -= 40;
        if (!v5)
          goto LABEL_15;
      }
      v8 = (_QWORD *)(a1 + 80);
      if (*(_QWORD *)(a1 + 80))
        goto LABEL_11;
      goto LABEL_10;
    }
LABEL_15:
    v4 = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  *a2 = v4;
}

void sub_1C62D02A0()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C62D02B4(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

void sub_1C62D02C4(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  char *v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int *v11;
  char *v12;
  uint64_t v13;
  unsigned int *v14;
  char v15;
  char *v16;
  int v19;
  int v20;
  char *v21;
  int v22;
  char *v23;
  char *v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  BOOL v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  sub_1C62D2020((uint64_t)&v38, a1 + 7, a2, HIDWORD(a2));
  v7 = (char *)v38;
  if ((v39 & 1) != 0)
  {
    v38 = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v7;
    goto LABEL_12;
  }
  v8 = *(unsigned __int8 *)(v38 + 12);
  if ((v8 & 0xF0) == 0x20)
    v9 = (2 * (v8 > 0xF)) | 4;
  else
    v9 = 2 * (v8 > 0xF);
  if (*(__int16 *)(v38 + 14) == -3585)
    v10 = v9 | 8;
  else
    v10 = v9;
  v11 = (unsigned int *)a1[10];
  if (v11)
  {
    sub_1C59B1118(v6, v11, (uint64_t)&v35);
    v12 = v35;
    if ((v37 & 1) != 0)
    {
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v12;
      goto LABEL_12;
    }
  }
  else
  {
    v12 = 0;
  }
  v14 = (unsigned int *)a1[9];
  if (v14)
  {
    sub_1C59B1118(v6, v14, (uint64_t)&v35);
    v15 = v37;
    v16 = v35;
  }
  else
  {
    v16 = 0;
    v15 = v37 & 0xFE;
  }
  if ((v15 & 1) != 0)
  {
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v16;
    goto LABEL_12;
  }
  if ((v8 & 0xF) - 3 < 2 || v7 == v12 || v7 == v16)
    v19 = v10 | 0x80;
  else
    v19 = v10;
  v20 = *(unsigned __int16 *)(*v6 + 18);
  if (v20 == 46848)
  {
    (*(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*a1 + 72))(&v35, a1, a2);
    v21 = v35;
    if ((v37 & 1) != 0)
    {
      v35 = 0;
      v33 = v21;
      sub_1C4D62BD4(&v33, &v34);
      if (v33)
        (*(void (**)(char *))(*(_QWORD *)v33 + 8))(v33);
      if ((v37 & 1) != 0)
      {
        v24 = v35;
        v35 = 0;
        if (v24)
          (*(void (**)(char *))(*(_QWORD *)v24 + 8))(v24);
      }
      v22 = v19;
    }
    else
    {
      v22 = v19;
      if (v36 >= 2)
      {
        v22 = v10 | 0x80;
        if (*(_WORD *)v35 != 25636)
        {
          if (*(_WORD *)v35 == 30756)
            v22 = v10 | 0x80;
          else
            v22 = v19;
        }
      }
    }
    goto LABEL_53;
  }
  if (v20 != 10240)
  {
    if (v20 == 62208)
    {
      (*(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*a1 + 72))(&v35, a1, a2);
      if ((v37 & 1) != 0)
      {
        v31 = v35;
        v35 = 0;
        v33 = v31;
        sub_1C4D62BD4(&v33, &v34);
        if (v33)
          (*(void (**)(char *))(*(_QWORD *)v33 + 8))(v33);
        if ((v37 & 1) != 0)
        {
          v32 = v35;
          v35 = 0;
          if (v32)
            (*(void (**)(char *))(*(_QWORD *)v32 + 8))(v32);
        }
      }
      else if (!v36)
      {
        v19 = v10 | 0x80;
      }
    }
    goto LABEL_54;
  }
  (*(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*a1 + 72))(&v35, a1, a2);
  v23 = v35;
  if ((v37 & 1) != 0)
  {
    v35 = 0;
    v33 = v23;
    sub_1C4D62BD4(&v33, &v34);
    if (v33)
      (*(void (**)(char *))(*(_QWORD *)v33 + 8))(v33);
    if ((v37 & 1) != 0)
    {
      v30 = v35;
      v35 = 0;
      if (v30)
        (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
    }
    v22 = v19;
  }
  else
  {
    if (!v36)
      goto LABEL_85;
    v22 = v19;
    if (v36 == 1)
      goto LABEL_78;
    if (*(_WORD *)v35 == 25636)
    {
LABEL_85:
      v22 = v10 | 0x80;
    }
    else
    {
      v22 = v10 | 0x80;
      if (*(_WORD *)v35 != 29732)
      {
        if (*(_WORD *)v35 == 24868)
          v22 = v10 | 0x80;
        else
          v22 = v19;
      }
    }
  }
LABEL_78:
  if ((v7[12] & 0xF) != 2)
  {
LABEL_53:
    v19 = v22;
    goto LABEL_54;
  }
  v19 = *((_WORD *)v7 + 3) & 0x100 | v22;
LABEL_54:
  v25 = v19 | (*((_WORD *)v7 + 7) == 0);
  v26 = v7[12];
  if ((v26 & 0xF) == 5 || *((unsigned __int16 *)v7 + 7) == 62207)
    v25 |= 0x10u;
  v27 = v26 >> 4;
  if (v27 <= 0xA && ((1 << v27) & 0x406) != 0)
  {
    v28 = v7[13] & 3;
    v29 = (v7[13] & 3) == 0;
    if (v28 == 3)
      v29 = 1;
    if (v29)
      v25 |= 0x40u;
  }
  else
  {
    v28 = v7[13] & 3;
  }
  if (v28 == 2)
    v25 |= 0x200u;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v25;
LABEL_12:
  if ((v39 & 1) != 0)
  {
    v13 = v38;
    v38 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
}

unint64_t sub_1C62D0744(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
    v2 = bswap32(*(_DWORD *)(v1 + 20)) > 0xF;
  else
    v2 = 0;
  return sub_1C62D20E0(a1, v1, v2);
}

unint64_t sub_1C62D078C(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[10];
  if (v1)
    return sub_1C62D20E0((uint64_t)a1, v1, bswap32(*(_DWORD *)(v1 + 20)) >> 4);
  else
    return (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
}

void sub_1C62D07E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  char v22;
  unsigned int *v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  llvm::object::ObjectFile::getSymbolValue(a1, a2, (uint64_t)&v27);
  if ((v28 & 1) != 0)
  {
    v6 = v27;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v6;
    return;
  }
  v7 = v27;
  sub_1C62D2020((uint64_t)&v25, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  v8 = v25;
  if ((v26 & 1) != 0)
  {
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v8;
  }
  else
  {
    v9 = bswap32(*(unsigned __int16 *)(v25 + 14)) >> 16;
    if (v9 - 65521 >= 2 && v9 != 0)
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v23);
      if ((v24 & 1) != 0)
      {
        v12 = v23;
        v23 = 0;
      }
      else
      {
        if (*(_WORD *)(*(_QWORD *)(a1 + 56) + 16) != 256)
        {
LABEL_17:
          *(_BYTE *)(a3 + 8) &= ~1u;
          *(_QWORD *)a3 = v7;
          goto LABEL_20;
        }
        v15 = *(unsigned int **)(a1 + 88);
        if (v15)
        {
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSHNDXTable((_QWORD *)(a1 + 56), v15, (uint64_t)&v20);
          v12 = v20;
          if ((v22 & 1) != 0)
            goto LABEL_19;
          v16 = v21;
        }
        else
        {
          v12 = 0;
          v16 = 0;
        }
        *(_QWORD *)&v17 = v12;
        *((_QWORD *)&v17 + 1) = v16;
        v18 = 1;
        v19 = 0;
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection((_QWORD *)(a1 + 56), v25, v23, &v17, (uint64_t)&v20);
        v12 = v20;
        if ((v21 & 1) == 0)
        {
          if (v20)
            v7 += bswap32(v20[3]);
          goto LABEL_17;
        }
      }
LABEL_19:
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v12;
LABEL_20:
      if ((v24 & 1) != 0)
      {
        v13 = v23;
        v23 = 0;
        if (v13)
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
      }
      if ((v26 & 1) != 0)
      {
        v14 = v25;
        v25 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
      goto LABEL_12;
    }
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v7;
  }
LABEL_12:
  if ((v28 & 1) != 0)
  {
    v11 = v27;
    v27 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
}

uint64_t sub_1C62D0A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 56;
  sub_1C62D2020((uint64_t)&v6, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v7 & 1) != 0)
  {
    v5 = v6;
    v6 = 0;
    llvm::report_fatal_error(&v5);
  }
  result = bswap32(*(_DWORD *)(v6 + 4));
  if (*(__int16 *)(v6 + 14) != -3585)
  {
    v4 = *(unsigned __int16 *)(*(_QWORD *)v2 + 18);
    if ((v4 == 10240 || v4 == 2048) && (*(_BYTE *)(v6 + 12) & 0xF) == 2)
      return result & 0xFFFFFFFE;
  }
  return result;
}

uint64_t sub_1C62D0AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  sub_1C62D2020((uint64_t)&v4, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v5 & 1) != 0)
  {
    v3 = v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  if (*(__int16 *)(v4 + 14) == -3329)
    return bswap32(*(_DWORD *)(v4 + 4));
  else
    return 0;
}

uint64_t sub_1C62D0B6C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
}

void sub_1C62D0B78(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  sub_1C62D2020((uint64_t)&v6, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  v4 = v6;
  if ((v7 & 1) != 0)
  {
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v4;
  }
  else
  {
    switch(*(_BYTE *)(v6 + 12) & 0xF)
    {
      case 0:
        *(_BYTE *)(a3 + 8) &= ~1u;
        *(_DWORD *)a3 = 0;
        return;
      case 1:
      case 5:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 2;
        goto LABEL_4;
      case 2:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 5;
        goto LABEL_4;
      case 3:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 3;
        goto LABEL_4;
      case 4:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 4;
        goto LABEL_4;
      default:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 1;
LABEL_4:
        *(_DWORD *)a3 = v5;
        break;
    }
  }
}

void sub_1C62D0C9C(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v3 = a2;
  v15 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  sub_1C62D2020((uint64_t)&v13, a1 + 7, a2, HIDWORD(a2));
  if ((v14 & 1) != 0)
  {
    v7 = v13;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(v6, v3, (uint64_t)&v11);
    if ((v12 & 1) != 0)
    {
      v8 = v11;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v8;
    }
    else
    {
      sub_1C62D2264(a3, a1, v13, v11);
      if ((v12 & 1) != 0)
      {
        v10 = v11;
        v11 = 0;
        if (v10)
          (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
      }
    }
    if ((v14 & 1) != 0)
    {
      v9 = v13;
      v13 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
}

void sub_1C62D0DB8(uint64_t a1, _QWORD *a2)
{
  *a2 += 40;
}

void sub_1C62D0DC8(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  void (*v3)(llvm::Twine *@<X0>, uint64_t *@<X8>);

  v3 = sub_1C59CE874;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionName((_QWORD *)(a1 + 56), a2, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, (uint64_t)&v3, a3);
}

uint64_t sub_1C62D0E00(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 12));
}

unint64_t sub_1C62D0E0C(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;
  char *v6;
  char *v7;
  char *v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v8);
  if ((v9 & 1) != 0)
  {
    v3 = v8;
    v8 = 0;
  }
  else
  {
    v3 = 0;
  }
  v6 = v3;
  sub_1C62CFA3C(&v7, &v6);
  if (v6)
    (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
  v4 = v8;
  if ((v9 & 1) != 0)
  {
    v8 = 0;
    if (v4)
      (*(void (**)(char *))(*(_QWORD *)v4 + 8))(v4);
  }
  return 0xCCCCCCCCCCCCCCCDLL * ((a2 - (uint64_t)v4) >> 3);
}

uint64_t sub_1C62D0EDC(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 20));
}

uint64_t sub_1C62D0EE8(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 32));
}

uint64_t sub_1C62D0EF4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 10) >> 3) & 1;
}

uint64_t sub_1C62D0F00(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 11) >> 2) & 1;
}

BOOL sub_1C62D0F0C(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_DWORD *)(a2 + 4) != 0x1000000)
    return 0;
  v2 = bswap32(*(_DWORD *)(a2 + 8));
  return (v2 & 2) != 0 && (v2 & 4) == 0;
}

BOOL sub_1C62D0F40(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a2 + 11) & 3) != 0 && *(_DWORD *)(a2 + 4) == 0x8000000;
}

BOOL sub_1C62D0F68(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) == 0x8000000;
}

BOOL sub_1C62D0F7C(uint64_t a1, uint64_t a2)
{
  char v2;

  v2 = bswap32(*(_DWORD *)(a2 + 8));
  if ((v2 & 2) == 0)
    return 0;
  if ((v2 & 4) != 0)
    return 1;
  return (v2 & 1) == 0;
}

uint64_t sub_1C62D0FA8(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1) & 1) != 0 || *(_DWORD *)(a2 + 4) == 0x8000000)
    return 0;
  else
    return (*(unsigned __int8 *)(a2 + 11) >> 1) & 1;
}

uint64_t sub_1C62D0FF4(uint64_t a1)
{
  char *v1;
  uint64_t result;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 136))(&v8);
  v1 = (char *)v8;
  if ((v10 & 1) != 0)
  {
    v8 = 0;
    v6 = v1;
    sub_1C4D62BD4(&v6, &v7);
    if (v6)
      (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
    if ((v10 & 1) != 0)
    {
      result = v8;
      v8 = 0;
      if (!result)
        return result;
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return 0;
  }
  if (v9 < 6)
    return 0;
  if (*(_DWORD *)v8 == 1650811950 && *(_WORD *)(v8 + 4) == 26485)
    return 1;
  if (v9 < 7)
    return 0;
  if (*(_DWORD *)v8 == 1701083694 && *(_DWORD *)(v8 + 3) == 1735746149)
    return 1;
  if (v9 != 10)
    return 0;
  return *(_QWORD *)v8 == 0x646E695F6264672ELL && *(_WORD *)(v8 + 8) == 30821;
}

uint64_t sub_1C62D113C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v5);
  result = v5;
  if ((v6 & 1) == 0)
    return ((a2 - v5)
                        / (unint64_t)(bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 46)) >> 16));
  v5 = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

void sub_1C62D11F0(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = bswap32(*(_DWORD *)(a2 + 4));
  if (v5 == 4 || v5 == 9)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a1 + 7, bswap32(*(_DWORD *)(a2 + 28)), (uint64_t)&v10);
    v9 = v10;
    if ((v11 & 1) != 0)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)(a3 + 8) = a1;
    }
    *(_QWORD *)a3 = v9;
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 352))(a1);
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = v8;
  }
}

void sub_1C62D12C0(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

uint64_t sub_1C62D12D0(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;

  if (*((_DWORD *)sub_1C59CF358(a1, a2) + 1) == 150994944)
    v4 = (unsigned int *)sub_1C59CF3FC(a1, a2);
  else
    v4 = (unsigned int *)sub_1C59CF4A4(a1, a2);
  return bswap32(*v4);
}

unint64_t sub_1C62D1320(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unsigned int v6;

  v4 = sub_1C59CF358(a1, a2);
  if (*((_DWORD *)v4 + 1) == 150994944)
    v5 = sub_1C59CF3FC(a1, a2);
  else
    v5 = sub_1C59CF4A4(a1, a2);
  v6 = bswap32(*((_DWORD *)v5 + 1));
  if (v6 > 0xFF)
    return bswap32(*((_DWORD *)v4 + 6)) | ((unint64_t)(v6 >> 8) << 32);
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t sub_1C62D13B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  if (*((_DWORD *)sub_1C59CF358(a1, a2) + 1) == 150994944)
    v4 = sub_1C59CF3FC(a1, a2);
  else
    v4 = sub_1C59CF4A4(a1, a2);
  return *((unsigned __int8 *)v4 + 7);
}

_QWORD *sub_1C62D13FC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;

  v4 = a1 + 56;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1);
  return llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelocationTypeName(v4, v5, a3);
}

void sub_1C62D1434(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  int *v9;
  uint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *__p;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  __p = 0;
  v21 = 0;
  v22 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v23);
  if ((v25 & 1) == 0 && v24)
  {
    v4 = 0;
    v5 = v23;
    v6 = v23 + 40 * v24;
    do
    {
      if (*(_DWORD *)(v5 + 4) == 100663296)
      {
        v7 = (int *)(bswap32(*(_DWORD *)(v5 + 16)) + *(_QWORD *)(a1 + 16));
        v8 = *v7;
        if (*v7)
        {
          v9 = v7 + 2;
          do
          {
            if (v8 == 285212672 || v8 == 117440512 || v8 == 385875968)
            {
              v12 = bswap32(*(v9 - 1));
              if ((unint64_t)v4 >= v22)
              {
                v4 = sub_1C57753FC((char **)&__p, v12);
              }
              else
              {
                *(_QWORD *)v4 = v12;
                v4 += 8;
              }
              v21 = v4;
            }
            v13 = *v9;
            v9 += 2;
            v8 = v13;
          }
          while (v13);
        }
      }
      v5 += 40;
    }
    while (v5 != v6);
    if (v24)
    {
      v14 = 0;
      v15 = v23;
      v16 = v23 + 40 * v24;
      do
      {
        v17 = (char *)__p;
        if (__p != v21)
        {
          v18 = bswap32(*(_DWORD *)(v15 + 12));
          while (*(_QWORD *)v17 != v18)
          {
            v17 += 8;
            if (v17 == v21)
            {
              v17 = v21;
              break;
            }
          }
        }
        if (v17 != v21)
        {
          if ((unint64_t)v14 >= *(_QWORD *)(a2 + 16))
          {
            v14 = sub_1C59CEC60((char **)a2, v15, a1);
          }
          else
          {
            *(_QWORD *)v14 = v15;
            *((_QWORD *)v14 + 1) = a1;
            v14 += 16;
          }
          *(_QWORD *)(a2 + 8) = v14;
        }
        v15 += 40;
      }
      while (v15 != v16);
    }
  }
  if ((v25 & 1) != 0)
  {
    v19 = v23;
    v23 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  if (__p)
    operator delete(__p);
}

uint64_t sub_1C62D1618()
{
  return 4;
}

const char *sub_1C62D1620(uint64_t a1)
{
  uint64_t v1;
  int v2;
  signed int v3;
  const char *result;
  signed int v5;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(unsigned __int8 *)(v1 + 4);
  if (v2 == 2)
  {
    v5 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
    if (v5 > 182)
    {
      if (v5 > 246)
      {
        switch(v5)
        {
          case 247:
            return "elf64-bpf";
          case 251:
            return "elf64-ve";
          case 258:
            return "elf64-loongarch";
        }
      }
      else
      {
        switch(v5)
        {
          case 183:
            return "elf64-bigaarch64";
          case 224:
            return "elf64-amdgpu";
          case 243:
            return "elf64-littleriscv";
        }
      }
    }
    else if (v5 > 21)
    {
      switch(v5)
      {
        case 22:
          return "elf64-s390";
        case 43:
          return "elf64-sparc";
        case 62:
          return "elf64-x86-64";
      }
    }
    else
    {
      switch(v5)
      {
        case 3:
          return "elf64-i386";
        case 8:
          return "elf64-mips";
        case 21:
          return "elf64-powerpc";
      }
    }
    return "elf64-unknown";
  }
  else
  {
    if (v2 != 1)
      llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const char *)1);
    v3 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
    if (v3 > 61)
    {
      if (v3 <= 223)
      {
        if (v3 > 104)
        {
          if (v3 == 105)
            return "elf32-msp430";
          if (v3 == 164)
            return "elf32-hexagon";
        }
        else
        {
          if (v3 == 62)
            return "elf32-x86-64";
          if (v3 == 83)
            return "elf32-avr";
        }
      }
      else if (v3 <= 243)
      {
        if (v3 == 224)
          return "elf32-amdgpu";
        if (v3 == 243)
          return "elf32-littleriscv";
      }
      else
      {
        switch(v3)
        {
          case 244:
            return "elf32-lanai";
          case 252:
            return "elf32-csky";
          case 258:
            return "elf32-loongarch";
        }
      }
      return "elf32-unknown";
    }
    if (v3 > 17)
    {
      if (v3 != 18)
      {
        if (v3 == 20)
          return "elf32-powerpc";
        if (v3 == 40)
          return "elf32-bigarm";
        return "elf32-unknown";
      }
      return "elf32-sparc";
    }
    else
    {
      result = "elf32-m68k";
      switch(v3)
      {
        case 2:
          return "elf32-sparc";
        case 3:
          result = "elf32-i386";
          break;
        case 4:
          return result;
        case 6:
          result = "elf32-iamcu";
          break;
        case 8:
          result = "elf32-mips";
          break;
        default:
          return "elf32-unknown";
      }
    }
  }
  return result;
}

uint64_t sub_1C62D191C(uint64_t a1)
{
  uint64_t v1;
  signed int v2;
  uint64_t result;
  int v4;
  int v5;
  int v6;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
  if (v2 <= 61)
  {
    result = 15;
    switch(v2)
    {
      case 2:
      case 18:
        return 33;
      case 3:
      case 6:
        return 41;
      case 4:
        return result;
      case 5:
      case 7:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
        return 0;
      case 8:
        v6 = *(unsigned __int8 *)(v1 + 4);
        if (v6 == 1)
          return 16;
        if (v6 == 2)
          return 18;
        break;
      case 20:
        return 21;
      case 21:
        return 23;
      case 22:
        return 36;
      default:
        if (v2 == 40)
          return 1;
        if (v2 != 43)
          return 0;
        return 34;
    }
    goto LABEL_44;
  }
  if (v2 > 223)
  {
    switch(v2)
    {
      case 243:
        v4 = *(unsigned __int8 *)(v1 + 4);
        if (v4 == 1)
          return 31;
        if (v4 == 2)
          return 32;
        break;
      case 244:
        return 62;
      case 245:
      case 246:
      case 248:
      case 249:
      case 250:
        return 0;
      case 247:
        return 9;
      case 251:
        return 67;
      case 252:
        return 10;
      default:
        if (v2 != 258)
          return 0;
        v5 = *(unsigned __int8 *)(v1 + 4);
        if (v5 == 1)
          return 13;
        if (v5 == 2)
          return 14;
        break;
    }
LABEL_44:
    llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const char *)1);
  }
  if (v2 <= 104)
  {
    if (v2 != 62)
    {
      if (v2 == 83)
        return 7;
      return 0;
    }
    return 42;
  }
  else
  {
    switch(v2)
    {
      case 105:
        return 20;
      case 164:
        return 12;
      case 183:
        return 4;
      default:
        return 0;
    }
  }
}

uint64_t sub_1C62D1AE8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 56);
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_QWORD *)a2 = bswap32(*(_DWORD *)(v2 + 24));
  return result;
}

BOOL sub_1C62D1B08(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 16) == 256;
}

uint64_t sub_1C62D1B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  sub_1C62D2020((uint64_t)&v4, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v5 & 1) != 0)
  {
    v3 = v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return bswap32(*(_DWORD *)(v4 + 8));
}

uint64_t sub_1C62D1B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  sub_1C62D2020((uint64_t)&v4, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v5 & 1) != 0)
  {
    v3 = v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 12) >> 4;
}

uint64_t sub_1C62D1C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  sub_1C62D2020((uint64_t)&v4, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v5 & 1) != 0)
  {
    v3 = v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 13);
}

uint64_t sub_1C62D1C98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  sub_1C62D2020((uint64_t)&v4, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v5 & 1) != 0)
  {
    v3 = v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(_BYTE *)(v4 + 12) & 0xF;
}

uint64_t sub_1C62D1D18(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 4));
}

uint64_t sub_1C62D1D24(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 8));
}

uint64_t sub_1C62D1D30(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 16));
}

void sub_1C62D1D3C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  unint64_t v9;
  const char *v10;
  __int16 v11;

  if (*((_DWORD *)sub_1C59CF358(a1, a2) + 1) == 0x4000000)
  {
    v6 = (int)bswap32(*((_DWORD *)sub_1C59CF4A4(a1, a2) + 2));
    v7 = *(_BYTE *)(a3 + 8) & 0xFE;
  }
  else
  {
    v10 = "Section is not SHT_RELA";
    v11 = 259;
    v6 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v9 = qword_1EF8F7238[0];
    *(_QWORD *)v6 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v10, (_QWORD *)(v6 + 8));
    *(_QWORD *)(v6 + 32) = 3;
    *(_QWORD *)(v6 + 40) = v9;
    *(_BYTE *)(v6 + 48) = 1;
    v7 = *(_BYTE *)(a3 + 8) | 1;
  }
  *(_BYTE *)(a3 + 8) = v7;
  *(_QWORD *)a3 = v6;
}

void sub_1C62D1E4C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v17);
  if ((v19 & 1) != 0)
  {
    v8 = v17;
    v17 = 0;
    *a3 = v8;
    goto LABEL_8;
  }
  if (!v18)
  {
LABEL_6:
    *a3 = 0;
    goto LABEL_8;
  }
  v6 = (_DWORD *)(v17 + 4);
  v7 = 40 * v18;
  while (*v6 != 50331760)
  {
    v6 += 10;
    v7 -= 40;
    if (!v7)
      goto LABEL_6;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContents(v5, (uint64_t)(v6 - 1), (uint64_t)&v14);
  v10 = v14;
  if ((v16 & 1) != 0)
    goto LABEL_19;
  if (*v14 != 65 || v15 == 1)
  {
    v10 = 0;
LABEL_19:
    *a3 = (uint64_t)v10;
    goto LABEL_8;
  }
  llvm::ELFAttributeParser::parse(a2, (uint64_t)v14, v15, 0, a3);
  v12 = *a3;
  if ((v16 & 1) != 0)
  {
    v13 = v14;
    v14 = 0;
    if (v13)
      (*(void (**)(_BYTE *))(*(_QWORD *)v13 + 8))(v13);
  }
  if (!v12)
    goto LABEL_6;
LABEL_8:
  if ((v19 & 1) != 0)
  {
    v9 = v17;
    v17 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

unint64_t sub_1C62D1FA4@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;
  unint64_t v8;

  v4 = sub_1C62D2948(a1);
  v6 = v5;
  result = sub_1C62D2998(a1);
  *a2 = v4;
  a2[1] = v6;
  a2[2] = result;
  a2[3] = v8;
  return result;
}

uint64_t sub_1C62D1FE8(uint64_t a1)
{
  return bswap32(*(_DWORD *)(*(_QWORD *)(a1 + 56) + 36));
}

uint64_t sub_1C62D1FF8(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 16)) >> 16;
}

uint64_t sub_1C62D200C(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 18)) >> 16;
}

void sub_1C62D2020(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a2, a3, (uint64_t)&v9);
  v7 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    sub_1C62CABF4(a2, v9, a4, a1);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
}

unint64_t sub_1C62D20E0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5;
  unint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v7);
    v5 = v7;
    if ((v8 & 1) != 0)
    {
      v7 = 0;
      if (v5)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v5 + 8))(v5);
        LODWORD(v5) = 0;
      }
      a3 = 0;
    }
    else
    {
      v5 = (a2 - v7) / 0x28;
    }
  }
  else
  {
    a3 = 0;
    LODWORD(v5) = 0;
  }
  return v5 | ((unint64_t)a3 << 32);
}

void sub_1C62D2194(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;

  v5 = bswap32(*a2);
  v12 = v5;
  if (a4 <= v5)
  {
    if (!atomic_load(qword_1EF8F7238))
    {
      v9 = a4;
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      a4 = v9;
    }
    v10 = a4;
    sub_1C59CE920(&v11, 3, qword_1EF8F7238[0], &v12, (uint64_t *)&v10);
    *(_BYTE *)(a1 + 16) |= 1u;
    *(_QWORD *)a1 = v11;
  }
  else
  {
    v6 = a3 + v5;
    if (a3)
      v7 = strlen((const char *)(a3 + v5));
    else
      v7 = 0;
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
  }
}

void sub_1C62D2264(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int *a4)
{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = (unsigned int *)a2[11];
  if (v8)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSHNDXTable(a2 + 7, v8, (uint64_t)&v17);
    v9 = v17;
    if ((v19 & 1) != 0)
      goto LABEL_7;
    v10 = v18;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  *(_QWORD *)&v14 = v9;
  *((_QWORD *)&v14 + 1) = v10;
  v15 = 1;
  v16 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a2 + 7, a3, a4, &v14, (uint64_t)&v17);
  v9 = v17;
  if ((v18 & 1) != 0)
  {
LABEL_7:
    *(_BYTE *)(a1 + 16) |= 1u;
    *(_QWORD *)a1 = v9;
    return;
  }
  if (v17)
  {
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v11 = (*(uint64_t (**)(_QWORD *))(*a2 + 352))(a2);
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    if ((v18 & 1) != 0)
    {
      v13 = v17;
      v17 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
  }
}

void sub_1C62D2398(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a2, a3, (uint64_t)&v9);
  v7 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    sub_1C62D2458(a1, a2, v9, a4);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
}

void sub_1C62D2458(uint64_t a1, _QWORD *a2, unsigned int *a3, unsigned int a4)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16[4];
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21[4];
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[5];
  uint64_t v26[5];
  uint64_t v27[5];
  _BYTE v28[40];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  sub_1C59B1D84(a2, a3, (uint64_t)v29);
  if ((v30 & 1) != 0)
  {
    v7 = v29[0];
    v8 = *(_BYTE *)(a1 + 8) | 1;
    goto LABEL_5;
  }
  if (v29[1] > (unint64_t)a4)
  {
    v7 = v29[0] + 8 * a4;
    v8 = *(_BYTE *)(a1 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v7;
    return;
  }
  v23 = "can't read an entry at 0x";
  v24 = 259;
  v20 = 8 * a4;
  v21[0] = (uint64_t)&v20;
  v21[2] = 0;
  v22 = 270;
  sub_1C4825FE4((uint64_t *)&v23, v21, (uint64_t)v25);
  v18 = ": it goes past the end of the section (0x";
  v19 = 259;
  sub_1C4825FE4(v25, (uint64_t *)&v18, (uint64_t)v26);
  v15 = bswap32(a3[5]);
  v16[0] = (uint64_t)&v15;
  v16[2] = 0;
  v17 = 270;
  sub_1C4825FE4(v26, v16, (uint64_t)v27);
  v13 = ")";
  v14 = 259;
  sub_1C4825FE4(v27, (uint64_t *)&v13, (uint64_t)v28);
  v9 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v11 = qword_1EF8F7238[0];
  *(_QWORD *)v9 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v28, (_QWORD *)(v9 + 8));
  *(_QWORD *)(v9 + 32) = 3;
  *(_QWORD *)(v9 + 40) = v11;
  *(_BYTE *)(v9 + 48) = 1;
  *(_BYTE *)(a1 + 8) |= 1u;
  *(_QWORD *)a1 = v9;
  if ((v30 & 1) != 0)
  {
    v12 = v29[0];
    v29[0] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

void sub_1C62D266C(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a2, a3, (uint64_t)&v9);
  v7 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    sub_1C62D272C(a1, a2, v9, a4);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
}

void sub_1C62D272C(uint64_t a1, _QWORD *a2, unsigned int *a3, unsigned int a4)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16[4];
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21[4];
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[5];
  uint64_t v26[5];
  uint64_t v27[5];
  _BYTE v28[40];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  sub_1C59B1744(a2, a3, (uint64_t)v29);
  if ((v30 & 1) != 0)
  {
    v7 = v29[0];
    v8 = *(_BYTE *)(a1 + 8) | 1;
    goto LABEL_5;
  }
  if (v29[1] > (unint64_t)a4)
  {
    v7 = v29[0] + 12 * a4;
    v8 = *(_BYTE *)(a1 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v7;
    return;
  }
  v23 = "can't read an entry at 0x";
  v24 = 259;
  v20 = 12 * a4;
  v21[0] = (uint64_t)&v20;
  v21[2] = 0;
  v22 = 270;
  sub_1C4825FE4((uint64_t *)&v23, v21, (uint64_t)v25);
  v18 = ": it goes past the end of the section (0x";
  v19 = 259;
  sub_1C4825FE4(v25, (uint64_t *)&v18, (uint64_t)v26);
  v15 = bswap32(a3[5]);
  v16[0] = (uint64_t)&v15;
  v16[2] = 0;
  v17 = 270;
  sub_1C4825FE4(v26, v16, (uint64_t)v27);
  v13 = ")";
  v14 = 259;
  sub_1C4825FE4(v27, (uint64_t *)&v13, (uint64_t)v28);
  v9 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v11 = qword_1EF8F7238[0];
  *(_QWORD *)v9 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v28, (_QWORD *)(v9 + 8));
  *(_QWORD *)(v9 + 32) = 3;
  *(_QWORD *)(v9 + 40) = v11;
  *(_BYTE *)(v9 + 48) = 1;
  *(_BYTE *)(a1 + 8) |= 1u;
  *(_QWORD *)a1 = v9;
  if ((v30 & 1) != 0)
  {
    v12 = v29[0];
    v29[0] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

unint64_t sub_1C62D2948(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 72);
  v2 = v1 && bswap32(*(_DWORD *)(v1 + 20)) > 0xF;
  return sub_1C62D20E0(a1, v1, v2);
}

unint64_t sub_1C62D2998(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
    return sub_1C62D20E0(a1, v1, bswap32(*(_DWORD *)(v1 + 20)) >> 4);
  else
    return sub_1C62D2948(a1);
}

void sub_1C62D29E4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v9);
  v4 = v9;
  if ((v11 & 1) == 0)
  {
    if (v10)
    {
      v5 = v10 << 6;
      v6 = (int *)(v9 + 4);
      while (1)
      {
        v7 = *v6;
        if (*v6 == 2)
          break;
        if (v7 != 18)
        {
          if (v7 != 11)
            goto LABEL_11;
          v8 = (_QWORD *)(a1 + 72);
          if (*(_QWORD *)(a1 + 72))
            goto LABEL_11;
LABEL_10:
          *v8 = v6 - 1;
          goto LABEL_11;
        }
        v8 = (_QWORD *)(a1 + 88);
        if (!*(_QWORD *)(a1 + 88))
          goto LABEL_10;
LABEL_11:
        v6 += 16;
        v5 -= 64;
        if (!v5)
          goto LABEL_15;
      }
      v8 = (_QWORD *)(a1 + 80);
      if (*(_QWORD *)(a1 + 80))
        goto LABEL_11;
      goto LABEL_10;
    }
LABEL_15:
    v4 = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  *a2 = v4;
}

void sub_1C62D2AE0()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C62D2AF4(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

void sub_1C62D2B04(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  char *v7;
  unsigned int v8;
  int v9;
  int v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  char *v16;
  int v19;
  int v20;
  char *v21;
  int v22;
  char *v23;
  char *v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  BOOL v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  sub_1C62D4824((uint64_t)&v38, a1 + 7, a2, HIDWORD(a2));
  v7 = (char *)v38;
  if ((v39 & 1) != 0)
  {
    v38 = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v7;
    goto LABEL_12;
  }
  v8 = *(unsigned __int8 *)(v38 + 4);
  if ((v8 & 0xF0) == 0x20)
    v9 = (2 * (v8 > 0xF)) | 4;
  else
    v9 = 2 * (v8 > 0xF);
  if (*(__int16 *)(v38 + 6) == -15)
    v10 = v9 | 8;
  else
    v10 = v9;
  v11 = (_QWORD *)a1[10];
  if (v11)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::relas(v6, v11, (uint64_t)&v35);
    v12 = v35;
    if ((v37 & 1) != 0)
    {
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v12;
      goto LABEL_12;
    }
  }
  else
  {
    v12 = 0;
  }
  v14 = (_QWORD *)a1[9];
  if (v14)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::relas(v6, v14, (uint64_t)&v35);
    v15 = v37;
    v16 = v35;
  }
  else
  {
    v16 = 0;
    v15 = v37 & 0xFE;
  }
  if ((v15 & 1) != 0)
  {
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v16;
    goto LABEL_12;
  }
  if ((v8 & 0xF) - 3 < 2 || v7 == v12 || v7 == v16)
    v19 = v10 | 0x80;
  else
    v19 = v10;
  v20 = *(unsigned __int16 *)(*v6 + 18);
  if (v20 == 183)
  {
    (*(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*a1 + 72))(&v35, a1, a2);
    v21 = v35;
    if ((v37 & 1) != 0)
    {
      v35 = 0;
      v33 = v21;
      sub_1C4D62BD4(&v33, &v34);
      if (v33)
        (*(void (**)(char *))(*(_QWORD *)v33 + 8))(v33);
      if ((v37 & 1) != 0)
      {
        v24 = v35;
        v35 = 0;
        if (v24)
          (*(void (**)(char *))(*(_QWORD *)v24 + 8))(v24);
      }
      v22 = v19;
    }
    else
    {
      v22 = v19;
      if (v36 >= 2)
      {
        v22 = v10 | 0x80;
        if (*(_WORD *)v35 != 25636)
        {
          if (*(_WORD *)v35 == 30756)
            v22 = v10 | 0x80;
          else
            v22 = v19;
        }
      }
    }
    goto LABEL_53;
  }
  if (v20 != 40)
  {
    if (v20 == 243)
    {
      (*(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*a1 + 72))(&v35, a1, a2);
      if ((v37 & 1) != 0)
      {
        v31 = v35;
        v35 = 0;
        v33 = v31;
        sub_1C4D62BD4(&v33, &v34);
        if (v33)
          (*(void (**)(char *))(*(_QWORD *)v33 + 8))(v33);
        if ((v37 & 1) != 0)
        {
          v32 = v35;
          v35 = 0;
          if (v32)
            (*(void (**)(char *))(*(_QWORD *)v32 + 8))(v32);
        }
      }
      else if (!v36)
      {
        v19 = v10 | 0x80;
      }
    }
    goto LABEL_54;
  }
  (*(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*a1 + 72))(&v35, a1, a2);
  v23 = v35;
  if ((v37 & 1) != 0)
  {
    v35 = 0;
    v33 = v23;
    sub_1C4D62BD4(&v33, &v34);
    if (v33)
      (*(void (**)(char *))(*(_QWORD *)v33 + 8))(v33);
    if ((v37 & 1) != 0)
    {
      v30 = v35;
      v35 = 0;
      if (v30)
        (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
    }
    v22 = v19;
  }
  else
  {
    if (!v36)
      goto LABEL_85;
    v22 = v19;
    if (v36 == 1)
      goto LABEL_78;
    if (*(_WORD *)v35 == 25636)
    {
LABEL_85:
      v22 = v10 | 0x80;
    }
    else
    {
      v22 = v10 | 0x80;
      if (*(_WORD *)v35 != 29732)
      {
        if (*(_WORD *)v35 == 24868)
          v22 = v10 | 0x80;
        else
          v22 = v19;
      }
    }
  }
LABEL_78:
  if ((v7[4] & 0xF) != 2)
  {
LABEL_53:
    v19 = v22;
    goto LABEL_54;
  }
  v19 = ((*((_DWORD *)v7 + 2) & 1) << 8) | v22;
LABEL_54:
  v25 = v19 | (*((_WORD *)v7 + 3) == 0);
  v26 = v7[4];
  if ((v26 & 0xF) == 5 || *((unsigned __int16 *)v7 + 3) == 65522)
    v25 |= 0x10u;
  v27 = v26 >> 4;
  if (v27 <= 0xA && ((1 << v27) & 0x406) != 0)
  {
    v28 = v7[5] & 3;
    v29 = (v7[5] & 3) == 0;
    if (v28 == 3)
      v29 = 1;
    if (v29)
      v25 |= 0x40u;
  }
  else
  {
    v28 = v7[5] & 3;
  }
  if (v28 == 2)
    v25 |= 0x200u;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v25;
LABEL_12:
  if ((v39 & 1) != 0)
  {
    v13 = v38;
    v38 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
}

unint64_t sub_1C62D2F78(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
    v2 = *(_QWORD *)(v1 + 32) > 0x17uLL;
  else
    v2 = 0;
  return sub_1C59CFB24(a1, v1, v2);
}

unint64_t sub_1C62D2FBC(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[10];
  if (v1)
    return sub_1C59CFB24((uint64_t)a1, v1, *(_QWORD *)(v1 + 32) / 0x18uLL);
  else
    return (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
}

void sub_1C62D3018(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  llvm::object::ObjectFile::getSymbolValue(a1, a2, (uint64_t)&v27);
  if ((v28 & 1) != 0)
  {
    v6 = v27;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v6;
    return;
  }
  v7 = v27;
  sub_1C62D4824((uint64_t)&v25, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  v8 = v25;
  if ((v26 & 1) != 0)
  {
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v8;
  }
  else
  {
    v9 = *(unsigned __int16 *)(v25 + 6);
    if ((v9 - 65521) >= 2 && v9 != 0)
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v23);
      if ((v24 & 1) != 0)
      {
        v12 = v23;
        v23 = 0;
      }
      else
      {
        if (*(_WORD *)(*(_QWORD *)(a1 + 56) + 16) != 1)
        {
LABEL_17:
          *(_BYTE *)(a3 + 8) &= ~1u;
          *(_QWORD *)a3 = v7;
          goto LABEL_20;
        }
        v15 = *(_QWORD *)(a1 + 88);
        if (v15)
        {
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSHNDXTable((_QWORD *)(a1 + 56), v15, (uint64_t)&v20);
          v12 = v20;
          if ((v22 & 1) != 0)
            goto LABEL_19;
          v16 = v21;
        }
        else
        {
          v12 = 0;
          v16 = 0;
        }
        *(_QWORD *)&v17 = v12;
        *((_QWORD *)&v17 + 1) = v16;
        v18 = 1;
        v19 = 0;
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection((_QWORD *)(a1 + 56), v25, v23, &v17, (uint64_t)&v20);
        v12 = v20;
        if ((v21 & 1) == 0)
        {
          if (v20)
            v7 += v20[2];
          goto LABEL_17;
        }
      }
LABEL_19:
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v12;
LABEL_20:
      if ((v24 & 1) != 0)
      {
        v13 = v23;
        v23 = 0;
        if (v13)
          (*(void (**)(_QWORD *))(*v13 + 8))(v13);
      }
      if ((v26 & 1) != 0)
      {
        v14 = v25;
        v25 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
      goto LABEL_12;
    }
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v7;
  }
LABEL_12:
  if ((v28 & 1) != 0)
  {
    v11 = v27;
    v27 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
}

unint64_t sub_1C62D3238(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t result;
  int v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 56;
  sub_1C62D4824((uint64_t)&v7, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v8 & 1) != 0)
  {
    v6 = v7;
    v7 = 0;
    llvm::report_fatal_error(&v6);
  }
  result = *(_QWORD *)(v7 + 8);
  if (*(__int16 *)(v7 + 6) != -15)
  {
    v4 = *(unsigned __int16 *)(*(_QWORD *)v2 + 18);
    if ((v4 == 40 || v4 == 8) && (*(_BYTE *)(v7 + 4) & 0xF) == 2)
      result &= ~1uLL;
  }
  return result;
}

uint64_t sub_1C62D32F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  sub_1C62D4824((uint64_t)&v4, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v5 & 1) != 0)
  {
    v3 = v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  if (*(__int16 *)(v4 + 6) == -14)
    return *(unsigned int *)(v4 + 8);
  else
    return 0;
}

uint64_t sub_1C62D3384(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
}

void sub_1C62D3390(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  sub_1C62D4824((uint64_t)&v6, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  v4 = v6;
  if ((v7 & 1) != 0)
  {
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v4;
  }
  else
  {
    switch(*(_BYTE *)(v6 + 4) & 0xF)
    {
      case 0:
        *(_BYTE *)(a3 + 8) &= ~1u;
        *(_DWORD *)a3 = 0;
        return;
      case 1:
      case 5:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 2;
        goto LABEL_4;
      case 2:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 5;
        goto LABEL_4;
      case 3:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 3;
        goto LABEL_4;
      case 4:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 4;
        goto LABEL_4;
      default:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 1;
LABEL_4:
        *(_DWORD *)a3 = v5;
        break;
    }
  }
}

void sub_1C62D34B4(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v3 = a2;
  v15 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  sub_1C62D4824((uint64_t)&v13, a1 + 7, a2, HIDWORD(a2));
  if ((v14 & 1) != 0)
  {
    v7 = v13;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(v6, v3, (uint64_t)&v11);
    if ((v12 & 1) != 0)
    {
      v8 = v11;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v8;
    }
    else
    {
      sub_1C62D48E4(a3, a1, v13, v11);
      if ((v12 & 1) != 0)
      {
        v10 = v11;
        v11 = 0;
        if (v10)
          (*(void (**)(_QWORD *))(*v10 + 8))(v10);
      }
    }
    if ((v14 & 1) != 0)
    {
      v9 = v13;
      v13 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
}

void sub_1C62D35D0(uint64_t a1, _QWORD *a2)
{
  *a2 += 64;
}

void sub_1C62D35E0(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  void (*v3)(llvm::Twine *@<X0>, uint64_t *@<X8>);

  v3 = sub_1C59CE874;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName((_QWORD *)(a1 + 56), a2, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, (uint64_t)&v3, a3);
}

uint64_t sub_1C62D3618(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t sub_1C62D3620(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;
  char *v6;
  char *v7;
  char *v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v8);
  if ((v9 & 1) != 0)
  {
    v3 = v8;
    v8 = 0;
  }
  else
  {
    v3 = 0;
  }
  v6 = v3;
  sub_1C62CFA3C(&v7, &v6);
  if (v6)
    (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
  v4 = v8;
  if ((v9 & 1) != 0)
  {
    v8 = 0;
    if (v4)
      (*(void (**)(char *))(*(_QWORD *)v4 + 8))(v4);
  }
  return (a2 - (uint64_t)v4) >> 6;
}

uint64_t sub_1C62D36E4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

uint64_t sub_1C62D36EC(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 48);
}

uint64_t sub_1C62D36F4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 9) >> 3) & 1;
}

uint64_t sub_1C62D3700(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 8) >> 2) & 1;
}

BOOL sub_1C62D370C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4) != 1)
    return 0;
  if ((*(_QWORD *)(a2 + 8) & 2) != 0)
    return (*(_QWORD *)(a2 + 8) & 4) == 0;
  return 0;
}

BOOL sub_1C62D3738(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a2 + 8) & 3) != 0 && *(_DWORD *)(a2 + 4) == 8;
}

BOOL sub_1C62D375C(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) == 8;
}

BOOL sub_1C62D376C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = (v2 & 4) != 0 || (*(_QWORD *)(a2 + 8) & 1) == 0;
  return (v2 & 2) != 0 && v3;
}

uint64_t sub_1C62D3790(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1) & 1) != 0 || *(_DWORD *)(a2 + 4) == 8)
    return 0;
  else
    return (*(unsigned __int8 *)(a2 + 8) >> 1) & 1;
}

uint64_t sub_1C62D37D8(uint64_t a1)
{
  char *v1;
  uint64_t result;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 136))(&v8);
  v1 = (char *)v8;
  if ((v10 & 1) != 0)
  {
    v8 = 0;
    v6 = v1;
    sub_1C4D62BD4(&v6, &v7);
    if (v6)
      (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
    if ((v10 & 1) != 0)
    {
      result = v8;
      v8 = 0;
      if (!result)
        return result;
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return 0;
  }
  if (v9 < 6)
    return 0;
  if (*(_DWORD *)v8 == 1650811950 && *(_WORD *)(v8 + 4) == 26485)
    return 1;
  if (v9 < 7)
    return 0;
  if (*(_DWORD *)v8 == 1701083694 && *(_DWORD *)(v8 + 3) == 1735746149)
    return 1;
  if (v9 != 10)
    return 0;
  return *(_QWORD *)v8 == 0x646E695F6264672ELL && *(_WORD *)(v8 + 8) == 30821;
}

uint64_t sub_1C62D3920(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v5);
  result = v5;
  if ((v6 & 1) == 0)
    return ((a2 - v5) / (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 58));
  v5 = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

void sub_1C62D39CC(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a2 + 4);
  if (v5 == 4 || v5 == 9)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a1 + 7, *(_DWORD *)(a2 + 44), (uint64_t)&v10);
    v9 = v10;
    if ((v11 & 1) != 0)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)(a3 + 8) = a1;
    }
    *(_QWORD *)a3 = v9;
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 352))(a1);
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = v8;
  }
}

void sub_1C62D3A94(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

uint64_t sub_1C62D3AA4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  if (*((_DWORD *)sub_1C59CFBD0(a1, a2) + 1) == 9)
    v4 = sub_1C59CFC74(a1, a2);
  else
    v4 = sub_1C59CFD1C(a1, a2);
  return *v4;
}

unint64_t sub_1C62D3AEC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;

  v4 = sub_1C59CFBD0((uint64_t)a1, a2);
  if (*((_DWORD *)v4 + 1) == 9)
    v5 = sub_1C59CFC74((uint64_t)a1, a2);
  else
    v5 = sub_1C59CFD1C((uint64_t)a1, a2);
  v6 = a1[7];
  if (*(_WORD *)(v6 + 18) == 8 && *(_BYTE *)(v6 + 4) == 2)
  {
    v7 = v5[1];
    v8 = *(_BYTE *)(v6 + 5) == 1;
    v9 = (v7 << 32) | (v7 >> 8) & 0xFF000000 | (v7 >> 24) & 0xFF0000 | (unsigned __int16)(HIDWORD(v7) >> 8) & 0xFF00 | HIBYTE(v7);
    if (!v8)
      v9 = v5[1];
  }
  else
  {
    v9 = v5[1];
  }
  if (HIDWORD(v9))
    return v9 & 0xFFFFFFFF00000000 | *((unsigned int *)v4 + 10);
  else
    return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
}

uint64_t sub_1C62D3BB4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  if (*((_DWORD *)sub_1C59CFBD0(a1, a2) + 1) == 9)
    v4 = sub_1C59CFC74(a1, a2);
  else
    v4 = sub_1C59CFD1C(a1, a2);
  v5 = *(_QWORD *)(a1 + 56);
  if (*(_WORD *)(v5 + 18) == 8 && *(_BYTE *)(v5 + 4) == 2)
  {
    v6 = *(_BYTE *)(v5 + 5) == 1;
    v7 = (v4[1] >> 24) & 0xFF0000 | HIBYTE(v4[1]) | (v4[1] >> 8) & 0xFF000000 | (v4[1] >> 40) & 0xFF00;
    if (!v6)
      return v4[1];
  }
  else
  {
    LODWORD(v7) = *((_DWORD *)v4 + 2);
  }
  return v7;
}

_QWORD *sub_1C62D3C54(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v4;
  unsigned int v5;

  v4 = a1 + 7;
  v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 312))(a1);
  return llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationTypeName(v4, v5, a3);
}

void sub_1C62D3C8C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *__p;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  __p = 0;
  v18 = 0;
  v19 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v20);
  if ((v22 & 1) == 0 && v21)
  {
    v4 = 0;
    v5 = v20;
    v6 = v20 + (v21 << 6);
    do
    {
      if (*(_DWORD *)(v5 + 4) == 6)
      {
        v7 = (uint64_t *)(*(_QWORD *)(v5 + 24) + *(_QWORD *)(a1 + 16));
        v8 = *v7;
        if (*v7)
        {
          v9 = v7 + 2;
          do
          {
            if (v8 == 17 || v8 == 7 || v8 == 23)
            {
              v10 = *(v9 - 1);
              if ((unint64_t)v4 >= v19)
              {
                v4 = sub_1C57753FC((char **)&__p, v10);
              }
              else
              {
                *(_QWORD *)v4 = v10;
                v4 += 8;
              }
              v18 = v4;
            }
            v11 = *v9;
            v9 += 2;
            v8 = v11;
          }
          while (v11);
        }
      }
      v5 += 64;
    }
    while (v5 != v6);
    if (v21)
    {
      v12 = 0;
      v13 = v20;
      v14 = v20 + (v21 << 6);
      do
      {
        v15 = (char *)__p;
        if (__p != v18)
        {
          while (*(_QWORD *)v15 != *(_QWORD *)(v13 + 16))
          {
            v15 += 8;
            if (v15 == v18)
            {
              v15 = v18;
              break;
            }
          }
        }
        if (v15 != v18)
        {
          if ((unint64_t)v12 >= *(_QWORD *)(a2 + 16))
          {
            v12 = sub_1C59CEC60((char **)a2, v13, a1);
          }
          else
          {
            *(_QWORD *)v12 = v13;
            *((_QWORD *)v12 + 1) = a1;
            v12 += 16;
          }
          *(_QWORD *)(a2 + 8) = v12;
        }
        v13 += 64;
      }
      while (v13 != v14);
    }
  }
  if ((v22 & 1) != 0)
  {
    v16 = v20;
    v20 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  if (__p)
    operator delete(__p);
}

uint64_t sub_1C62D3E44()
{
  return 8;
}

const char *sub_1C62D3E4C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  const char *result;
  int v5;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(unsigned __int8 *)(v1 + 4);
  if (v2 == 2)
  {
    v5 = *(unsigned __int16 *)(v1 + 18);
    if (v5 > 182)
    {
      if (v5 > 246)
      {
        switch(v5)
        {
          case 247:
            return "elf64-bpf";
          case 251:
            return "elf64-ve";
          case 258:
            return "elf64-loongarch";
        }
      }
      else
      {
        switch(v5)
        {
          case 183:
            return "elf64-littleaarch64";
          case 224:
            return "elf64-amdgpu";
          case 243:
            return "elf64-littleriscv";
        }
      }
    }
    else if (v5 > 21)
    {
      switch(v5)
      {
        case 22:
          return "elf64-s390";
        case 43:
          return "elf64-sparc";
        case 62:
          return "elf64-x86-64";
      }
    }
    else
    {
      switch(v5)
      {
        case 3:
          return "elf64-i386";
        case 8:
          return "elf64-mips";
        case 21:
          return "elf64-powerpcle";
      }
    }
    return "elf64-unknown";
  }
  else
  {
    if (v2 != 1)
      llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const char *)1);
    v3 = *(unsigned __int16 *)(v1 + 18);
    if (v3 > 61)
    {
      if (v3 <= 223)
      {
        if (v3 > 104)
        {
          if (v3 == 105)
            return "elf32-msp430";
          if (v3 == 164)
            return "elf32-hexagon";
        }
        else
        {
          if (v3 == 62)
            return "elf32-x86-64";
          if (v3 == 83)
            return "elf32-avr";
        }
      }
      else if (v3 <= 243)
      {
        if (v3 == 224)
          return "elf32-amdgpu";
        if (v3 == 243)
          return "elf32-littleriscv";
      }
      else
      {
        switch(v3)
        {
          case 244:
            return "elf32-lanai";
          case 252:
            return "elf32-csky";
          case 258:
            return "elf32-loongarch";
        }
      }
      return "elf32-unknown";
    }
    if (v3 > 17)
    {
      if (v3 != 18)
      {
        if (v3 == 20)
          return "elf32-powerpcle";
        if (v3 == 40)
          return "elf32-littlearm";
        return "elf32-unknown";
      }
      return "elf32-sparc";
    }
    else
    {
      result = "elf32-m68k";
      switch(v3)
      {
        case 2:
          return "elf32-sparc";
        case 3:
          result = "elf32-i386";
          break;
        case 4:
          return result;
        case 6:
          result = "elf32-iamcu";
          break;
        case 8:
          result = "elf32-mips";
          break;
        default:
          return "elf32-unknown";
      }
    }
  }
  return result;
}

uint64_t sub_1C62D4138(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t result;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(unsigned __int16 *)(v1 + 18);
  if (v2 <= 0x3D)
  {
    result = 15;
    switch(*(_WORD *)(v1 + 18))
    {
      case 2:
      case 0x12:
        return 35;
      case 3:
      case 6:
        return 41;
      case 4:
        return result;
      case 5:
      case 7:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x13:
        return 0;
      case 8:
        v6 = *(unsigned __int8 *)(v1 + 4);
        if (v6 == 1)
        {
          result = 17;
        }
        else
        {
          if (v6 != 2)
            goto LABEL_51;
          result = 19;
        }
        break;
      case 0x14:
        return 22;
      case 0x15:
        return 24;
      case 0x16:
        return 36;
      default:
        if (v2 == 40)
          return 1;
        if (v2 != 43)
          return 0;
        return 34;
    }
  }
  else
  {
    if (*(unsigned __int16 *)(v1 + 18) <= 0xDFu)
    {
      if (*(unsigned __int16 *)(v1 + 18) <= 0x68u)
      {
        if (v2 == 62)
          return 42;
        if (v2 == 83)
          return 7;
      }
      else
      {
        switch(v2)
        {
          case 0x69u:
            return 20;
          case 0xA4u:
            return 12;
          case 0xB7u:
            return 3;
        }
      }
      return 0;
    }
    switch(*(_WORD *)(v1 + 18))
    {
      case 0xF3:
        v4 = *(unsigned __int8 *)(v1 + 4);
        if (v4 != 1)
        {
          if (v4 == 2)
            return 32;
          goto LABEL_51;
        }
        result = 31;
        break;
      case 0xF4:
        return 62;
      case 0xF5:
      case 0xF6:
      case 0xF8:
      case 0xF9:
      case 0xFA:
        return 0;
      case 0xF7:
        return 8;
      case 0xFB:
        return 67;
      case 0xFC:
        return 10;
      default:
        if (v2 == 224)
        {
          v7 = *(unsigned __int8 *)(v1 + 48);
          v8 = v7 - 1;
          if ((v7 - 32) >= 0x26)
            v9 = 0;
          else
            v9 = 30;
          if (v8 >= 0x10)
            result = v9;
          else
            result = 25;
        }
        else
        {
          if (v2 != 258)
            return 0;
          v5 = *(unsigned __int8 *)(v1 + 4);
          if (v5 != 1)
          {
            if (v5 == 2)
              return 14;
LABEL_51:
            llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const char *)1);
          }
          result = 13;
        }
        break;
    }
  }
  return result;
}

uint64_t sub_1C62D4324@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 56);
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_QWORD *)a2 = *(_QWORD *)(v2 + 24);
  return result;
}

BOOL sub_1C62D4340(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 16) == 1;
}

uint64_t sub_1C62D4354(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  sub_1C62D4824((uint64_t)&v4, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v5 & 1) != 0)
  {
    v3 = v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(_QWORD *)(v4 + 16);
}

uint64_t sub_1C62D43D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  sub_1C62D4824((uint64_t)&v4, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v5 & 1) != 0)
  {
    v3 = v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 4) >> 4;
}

uint64_t sub_1C62D4450(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  sub_1C62D4824((uint64_t)&v4, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v5 & 1) != 0)
  {
    v3 = v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 5);
}

uint64_t sub_1C62D44CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  sub_1C62D4824((uint64_t)&v4, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v5 & 1) != 0)
  {
    v3 = v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(_BYTE *)(v4 + 4) & 0xF;
}

uint64_t sub_1C62D454C(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 4);
}

uint64_t sub_1C62D4554(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

uint64_t sub_1C62D455C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

void sub_1C62D4564(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  unint64_t v9;
  const char *v10;
  __int16 v11;

  if (*((_DWORD *)sub_1C59CFBD0(a1, a2) + 1) == 4)
  {
    v6 = sub_1C59CFD1C(a1, a2)[2];
    v7 = *(_BYTE *)(a3 + 8) & 0xFE;
  }
  else
  {
    v10 = "Section is not SHT_RELA";
    v11 = 259;
    v6 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v9 = qword_1EF8F7238[0];
    *(_QWORD *)v6 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v10, (_QWORD *)(v6 + 8));
    *(_QWORD *)(v6 + 32) = 3;
    *(_QWORD *)(v6 + 40) = v9;
    *(_BYTE *)(v6 + 48) = 1;
    v7 = *(_BYTE *)(a3 + 8) | 1;
  }
  *(_BYTE *)(a3 + 8) = v7;
  *(_QWORD *)a3 = v6;
}

void sub_1C62D4668(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v17);
  if ((v19 & 1) != 0)
  {
    v8 = v17;
    v17 = 0;
    *a3 = v8;
    goto LABEL_8;
  }
  if (!v18)
  {
LABEL_6:
    *a3 = 0;
    goto LABEL_8;
  }
  v6 = (_DWORD *)(v17 + 4);
  v7 = v18 << 6;
  while (*v6 != 1879048195)
  {
    v6 += 16;
    v7 -= 64;
    if (!v7)
      goto LABEL_6;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContents(v5, (uint64_t)(v6 - 1), (uint64_t)&v14);
  v10 = v14;
  if ((v16 & 1) != 0)
    goto LABEL_19;
  if (*v14 != 65 || v15 == 1)
  {
    v10 = 0;
LABEL_19:
    *a3 = (uint64_t)v10;
    goto LABEL_8;
  }
  llvm::ELFAttributeParser::parse(a2, (uint64_t)v14, v15, 1, a3);
  v12 = *a3;
  if ((v16 & 1) != 0)
  {
    v13 = v14;
    v14 = 0;
    if (v13)
      (*(void (**)(_BYTE *))(*(_QWORD *)v13 + 8))(v13);
  }
  if (!v12)
    goto LABEL_6;
LABEL_8:
  if ((v19 & 1) != 0)
  {
    v9 = v17;
    v17 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

unint64_t sub_1C62D47BC@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;
  unint64_t v8;

  v4 = sub_1C62D4FB8(a1);
  v6 = v5;
  result = sub_1C62D5004(a1);
  *a2 = v4;
  a2[1] = v6;
  a2[2] = result;
  a2[3] = v8;
  return result;
}

uint64_t sub_1C62D4800(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 56) + 48);
}

uint64_t sub_1C62D480C(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 16);
}

uint64_t sub_1C62D4818(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 18);
}

void sub_1C62D4824(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a2, a3, (uint64_t)&v9);
  v7 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    sub_1C62CBB20(a2, v9, a4, a1);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
}

void sub_1C62D48E4(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = a2[11];
  if (v8)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSHNDXTable(a2 + 7, v8, (uint64_t)&v17);
    v9 = v17;
    if ((v19 & 1) != 0)
      goto LABEL_7;
    v10 = v18;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  *(_QWORD *)&v14 = v9;
  *((_QWORD *)&v14 + 1) = v10;
  v15 = 1;
  v16 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a2 + 7, a3, a4, &v14, (uint64_t)&v17);
  v9 = v17;
  if ((v18 & 1) != 0)
  {
LABEL_7:
    *(_BYTE *)(a1 + 16) |= 1u;
    *(_QWORD *)a1 = v9;
    return;
  }
  if (v17)
  {
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v11 = (*(uint64_t (**)(_QWORD *))(*a2 + 352))(a2);
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    if ((v18 & 1) != 0)
    {
      v13 = v17;
      v17 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
  }
}

void sub_1C62D4A18(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a2, a3, (uint64_t)&v9);
  v7 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    sub_1C62D4AD8(a1, a2, v9, a4);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
}

void sub_1C62D4AD8(uint64_t a1, _QWORD *a2, _QWORD *a3, unsigned int a4)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16[4];
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21[4];
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[5];
  uint64_t v26[5];
  uint64_t v27[5];
  _BYTE v28[40];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  sub_1C59B9DE0(a2, a3, (uint64_t)v29);
  if ((v30 & 1) != 0)
  {
    v7 = v29[0];
    v8 = *(_BYTE *)(a1 + 8) | 1;
    goto LABEL_5;
  }
  if (v29[1] > (unint64_t)a4)
  {
    v7 = v29[0] + 16 * a4;
    v8 = *(_BYTE *)(a1 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v7;
    return;
  }
  v23 = "can't read an entry at 0x";
  v24 = 259;
  v20 = 16 * a4;
  v21[0] = (uint64_t)&v20;
  v21[2] = 0;
  v22 = 270;
  sub_1C4825FE4((uint64_t *)&v23, v21, (uint64_t)v25);
  v18 = ": it goes past the end of the section (0x";
  v19 = 259;
  sub_1C4825FE4(v25, (uint64_t *)&v18, (uint64_t)v26);
  v15 = a3[4];
  v16[0] = (uint64_t)&v15;
  v16[2] = 0;
  v17 = 270;
  sub_1C4825FE4(v26, v16, (uint64_t)v27);
  v13 = ")";
  v14 = 259;
  sub_1C4825FE4(v27, (uint64_t *)&v13, (uint64_t)v28);
  v9 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v11 = qword_1EF8F7238[0];
  *(_QWORD *)v9 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v28, (_QWORD *)(v9 + 8));
  *(_QWORD *)(v9 + 32) = 3;
  *(_QWORD *)(v9 + 40) = v11;
  *(_BYTE *)(v9 + 48) = 1;
  *(_BYTE *)(a1 + 8) |= 1u;
  *(_QWORD *)a1 = v9;
  if ((v30 & 1) != 0)
  {
    v12 = v29[0];
    v29[0] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

void sub_1C62D4CE4(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a2, a3, (uint64_t)&v9);
  v7 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    sub_1C62D4DA4(a1, a2, v9, a4);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
}

void sub_1C62D4DA4(uint64_t a1, _QWORD *a2, _QWORD *a3, unsigned int a4)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16[4];
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21[4];
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[5];
  uint64_t v26[5];
  uint64_t v27[5];
  _BYTE v28[40];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::relas(a2, a3, (uint64_t)v29);
  if ((v30 & 1) != 0)
  {
    v7 = v29[0];
    v8 = *(_BYTE *)(a1 + 8) | 1;
    goto LABEL_5;
  }
  if (v29[1] > (unint64_t)a4)
  {
    v7 = v29[0] + 24 * a4;
    v8 = *(_BYTE *)(a1 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v7;
    return;
  }
  v23 = "can't read an entry at 0x";
  v24 = 259;
  v20 = 24 * a4;
  v21[0] = (uint64_t)&v20;
  v21[2] = 0;
  v22 = 270;
  sub_1C4825FE4((uint64_t *)&v23, v21, (uint64_t)v25);
  v18 = ": it goes past the end of the section (0x";
  v19 = 259;
  sub_1C4825FE4(v25, (uint64_t *)&v18, (uint64_t)v26);
  v15 = a3[4];
  v16[0] = (uint64_t)&v15;
  v16[2] = 0;
  v17 = 270;
  sub_1C4825FE4(v26, v16, (uint64_t)v27);
  v13 = ")";
  v14 = 259;
  sub_1C4825FE4(v27, (uint64_t *)&v13, (uint64_t)v28);
  v9 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v11 = qword_1EF8F7238[0];
  *(_QWORD *)v9 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v28, (_QWORD *)(v9 + 8));
  *(_QWORD *)(v9 + 32) = 3;
  *(_QWORD *)(v9 + 40) = v11;
  *(_BYTE *)(v9 + 48) = 1;
  *(_BYTE *)(a1 + 8) |= 1u;
  *(_QWORD *)a1 = v9;
  if ((v30 & 1) != 0)
  {
    v12 = v29[0];
    v29[0] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

unint64_t sub_1C62D4FB8(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 72);
  v2 = v1 && *(_QWORD *)(v1 + 32) > 0x17uLL;
  return sub_1C59CFB24(a1, v1, v2);
}

unint64_t sub_1C62D5004(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
    return sub_1C59CFB24(a1, v1, *(_QWORD *)(v1 + 32) / 0x18uLL);
  else
    return sub_1C62D4FB8(a1);
}

void sub_1C62D5058(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v9);
  v4 = v9;
  if ((v11 & 1) == 0)
  {
    if (v10)
    {
      v5 = v10 << 6;
      v6 = (unsigned int *)(v9 + 4);
      while (1)
      {
        v7 = bswap32(*v6);
        if (v7 == 2)
          break;
        if (v7 != 18)
        {
          if (v7 != 11)
            goto LABEL_11;
          v8 = (_QWORD *)(a1 + 72);
          if (*(_QWORD *)(a1 + 72))
            goto LABEL_11;
LABEL_10:
          *v8 = v6 - 1;
          goto LABEL_11;
        }
        v8 = (_QWORD *)(a1 + 88);
        if (!*(_QWORD *)(a1 + 88))
          goto LABEL_10;
LABEL_11:
        v6 += 16;
        v5 -= 64;
        if (!v5)
          goto LABEL_15;
      }
      v8 = (_QWORD *)(a1 + 80);
      if (*(_QWORD *)(a1 + 80))
        goto LABEL_11;
      goto LABEL_10;
    }
LABEL_15:
    v4 = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  *a2 = v4;
}

void sub_1C62D5158()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C62D516C(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

void sub_1C62D517C(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  char *v7;
  unsigned int v8;
  int v9;
  int v10;
  unint64_t *v11;
  char *v12;
  uint64_t v13;
  unint64_t *v14;
  char v15;
  char *v16;
  int v19;
  int v20;
  char *v21;
  int v22;
  char *v23;
  char *v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  BOOL v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  sub_1C62D6F70((uint64_t)&v38, a1 + 7, a2, HIDWORD(a2));
  v7 = (char *)v38;
  if ((v39 & 1) != 0)
  {
    v38 = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v7;
    goto LABEL_12;
  }
  v8 = *(unsigned __int8 *)(v38 + 4);
  if ((v8 & 0xF0) == 0x20)
    v9 = (2 * (v8 > 0xF)) | 4;
  else
    v9 = 2 * (v8 > 0xF);
  if (*(__int16 *)(v38 + 6) == -3585)
    v10 = v9 | 8;
  else
    v10 = v9;
  v11 = (unint64_t *)a1[10];
  if (v11)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::relas(v6, v11, (uint64_t)&v35);
    v12 = v35;
    if ((v37 & 1) != 0)
    {
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v12;
      goto LABEL_12;
    }
  }
  else
  {
    v12 = 0;
  }
  v14 = (unint64_t *)a1[9];
  if (v14)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::relas(v6, v14, (uint64_t)&v35);
    v15 = v37;
    v16 = v35;
  }
  else
  {
    v16 = 0;
    v15 = v37 & 0xFE;
  }
  if ((v15 & 1) != 0)
  {
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v16;
    goto LABEL_12;
  }
  if ((v8 & 0xF) - 3 < 2 || v7 == v12 || v7 == v16)
    v19 = v10 | 0x80;
  else
    v19 = v10;
  v20 = *(unsigned __int16 *)(*v6 + 18);
  if (v20 == 46848)
  {
    (*(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*a1 + 72))(&v35, a1, a2);
    v21 = v35;
    if ((v37 & 1) != 0)
    {
      v35 = 0;
      v33 = v21;
      sub_1C4D62BD4(&v33, &v34);
      if (v33)
        (*(void (**)(char *))(*(_QWORD *)v33 + 8))(v33);
      if ((v37 & 1) != 0)
      {
        v24 = v35;
        v35 = 0;
        if (v24)
          (*(void (**)(char *))(*(_QWORD *)v24 + 8))(v24);
      }
      v22 = v19;
    }
    else
    {
      v22 = v19;
      if (v36 >= 2)
      {
        v22 = v10 | 0x80;
        if (*(_WORD *)v35 != 25636)
        {
          if (*(_WORD *)v35 == 30756)
            v22 = v10 | 0x80;
          else
            v22 = v19;
        }
      }
    }
    goto LABEL_53;
  }
  if (v20 != 10240)
  {
    if (v20 == 62208)
    {
      (*(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*a1 + 72))(&v35, a1, a2);
      if ((v37 & 1) != 0)
      {
        v31 = v35;
        v35 = 0;
        v33 = v31;
        sub_1C4D62BD4(&v33, &v34);
        if (v33)
          (*(void (**)(char *))(*(_QWORD *)v33 + 8))(v33);
        if ((v37 & 1) != 0)
        {
          v32 = v35;
          v35 = 0;
          if (v32)
            (*(void (**)(char *))(*(_QWORD *)v32 + 8))(v32);
        }
      }
      else if (!v36)
      {
        v19 = v10 | 0x80;
      }
    }
    goto LABEL_54;
  }
  (*(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*a1 + 72))(&v35, a1, a2);
  v23 = v35;
  if ((v37 & 1) != 0)
  {
    v35 = 0;
    v33 = v23;
    sub_1C4D62BD4(&v33, &v34);
    if (v33)
      (*(void (**)(char *))(*(_QWORD *)v33 + 8))(v33);
    if ((v37 & 1) != 0)
    {
      v30 = v35;
      v35 = 0;
      if (v30)
        (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
    }
    v22 = v19;
  }
  else
  {
    if (!v36)
      goto LABEL_85;
    v22 = v19;
    if (v36 == 1)
      goto LABEL_78;
    if (*(_WORD *)v35 == 25636)
    {
LABEL_85:
      v22 = v10 | 0x80;
    }
    else
    {
      v22 = v10 | 0x80;
      if (*(_WORD *)v35 != 29732)
      {
        if (*(_WORD *)v35 == 24868)
          v22 = v10 | 0x80;
        else
          v22 = v19;
      }
    }
  }
LABEL_78:
  if ((v7[4] & 0xF) != 2)
  {
LABEL_53:
    v19 = v22;
    goto LABEL_54;
  }
  v19 = *((_WORD *)v7 + 7) & 0x100 | v22;
LABEL_54:
  v25 = v19 | (*((_WORD *)v7 + 3) == 0);
  v26 = v7[4];
  if ((v26 & 0xF) == 5 || *((unsigned __int16 *)v7 + 3) == 62207)
    v25 |= 0x10u;
  v27 = v26 >> 4;
  if (v27 <= 0xA && ((1 << v27) & 0x406) != 0)
  {
    v28 = v7[5] & 3;
    v29 = (v7[5] & 3) == 0;
    if (v28 == 3)
      v29 = 1;
    if (v29)
      v25 |= 0x40u;
  }
  else
  {
    v28 = v7[5] & 3;
  }
  if (v28 == 2)
    v25 |= 0x200u;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v25;
LABEL_12:
  if ((v39 & 1) != 0)
  {
    v13 = v38;
    v38 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
}

unint64_t sub_1C62D55FC(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
    v2 = bswap64(*(_QWORD *)(v1 + 32)) > 0x17;
  else
    v2 = 0;
  return sub_1C59D03C8(a1, v1, v2);
}

unint64_t sub_1C62D5644(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[10];
  if (v1)
    return sub_1C59D03C8((uint64_t)a1, v1, bswap64(*(_QWORD *)(v1 + 32)) / 0x18);
  else
    return (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
}

void sub_1C62D56A4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  char v22;
  unint64_t *v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  llvm::object::ObjectFile::getSymbolValue(a1, a2, (uint64_t)&v27);
  if ((v28 & 1) != 0)
  {
    v6 = v27;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v6;
    return;
  }
  v7 = v27;
  sub_1C62D6F70((uint64_t)&v25, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  v8 = v25;
  if ((v26 & 1) != 0)
  {
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v8;
  }
  else
  {
    v9 = bswap32(*(unsigned __int16 *)(v25 + 6)) >> 16;
    if (v9 - 65521 >= 2 && v9 != 0)
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v23);
      if ((v24 & 1) != 0)
      {
        v12 = v23;
        v23 = 0;
      }
      else
      {
        if (*(_WORD *)(*(_QWORD *)(a1 + 56) + 16) != 256)
        {
LABEL_17:
          *(_BYTE *)(a3 + 8) &= ~1u;
          *(_QWORD *)a3 = v7;
          goto LABEL_20;
        }
        v15 = *(_QWORD *)(a1 + 88);
        if (v15)
        {
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSHNDXTable((_QWORD *)(a1 + 56), v15, (uint64_t)&v20);
          v12 = v20;
          if ((v22 & 1) != 0)
            goto LABEL_19;
          v16 = v21;
        }
        else
        {
          v12 = 0;
          v16 = 0;
        }
        *(_QWORD *)&v17 = v12;
        *((_QWORD *)&v17 + 1) = v16;
        v18 = 1;
        v19 = 0;
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection((_QWORD *)(a1 + 56), v25, v23, &v17, (uint64_t)&v20);
        v12 = v20;
        if ((v21 & 1) == 0)
        {
          if (v20)
            v7 += bswap64(v20[2]);
          goto LABEL_17;
        }
      }
LABEL_19:
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v12;
LABEL_20:
      if ((v24 & 1) != 0)
      {
        v13 = v23;
        v23 = 0;
        if (v13)
          (*(void (**)(unint64_t *))(*v13 + 8))(v13);
      }
      if ((v26 & 1) != 0)
      {
        v14 = v25;
        v25 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
      goto LABEL_12;
    }
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v7;
  }
LABEL_12:
  if ((v28 & 1) != 0)
  {
    v11 = v27;
    v27 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
}

unint64_t sub_1C62D58D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 56;
  sub_1C62D6F70((uint64_t)&v6, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v7 & 1) != 0)
  {
    v5 = v6;
    v6 = 0;
    llvm::report_fatal_error(&v5);
  }
  result = bswap64(*(_QWORD *)(v6 + 8));
  if (*(__int16 *)(v6 + 6) != -3585)
  {
    v4 = *(unsigned __int16 *)(*(_QWORD *)v2 + 18);
    if ((v4 == 10240 || v4 == 2048) && (*(_BYTE *)(v6 + 4) & 0xF) == 2)
      result &= ~1uLL;
  }
  return result;
}

unint64_t sub_1C62D599C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  sub_1C62D6F70((uint64_t)&v4, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v5 & 1) != 0)
  {
    v3 = v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  if (*(__int16 *)(v4 + 6) == -3329)
    return bswap64(*(_QWORD *)(v4 + 8));
  else
    return 0;
}

uint64_t sub_1C62D5A30(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
}

void sub_1C62D5A3C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  sub_1C62D6F70((uint64_t)&v6, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  v4 = v6;
  if ((v7 & 1) != 0)
  {
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v4;
  }
  else
  {
    switch(*(_BYTE *)(v6 + 4) & 0xF)
    {
      case 0:
        *(_BYTE *)(a3 + 8) &= ~1u;
        *(_DWORD *)a3 = 0;
        return;
      case 1:
      case 5:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 2;
        goto LABEL_4;
      case 2:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 5;
        goto LABEL_4;
      case 3:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 3;
        goto LABEL_4;
      case 4:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 4;
        goto LABEL_4;
      default:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 1;
LABEL_4:
        *(_DWORD *)a3 = v5;
        break;
    }
  }
}

void sub_1C62D5B60(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v3 = a2;
  v15 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  sub_1C62D6F70((uint64_t)&v13, a1 + 7, a2, HIDWORD(a2));
  if ((v14 & 1) != 0)
  {
    v7 = v13;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(v6, v3, (uint64_t)&v11);
    if ((v12 & 1) != 0)
    {
      v8 = v11;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v8;
    }
    else
    {
      sub_1C62D7030(a3, a1, v13, v11);
      if ((v12 & 1) != 0)
      {
        v10 = v11;
        v11 = 0;
        if (v10)
          (*(void (**)(unint64_t *))(*v10 + 8))(v10);
      }
    }
    if ((v14 & 1) != 0)
    {
      v9 = v13;
      v13 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
}

void sub_1C62D5C7C(uint64_t a1, _QWORD *a2)
{
  *a2 += 64;
}

void sub_1C62D5C8C(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  void (*v3)(llvm::Twine *@<X0>, uint64_t *@<X8>);

  v3 = sub_1C59CE874;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionName((_QWORD *)(a1 + 56), a2, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, (uint64_t)&v3, a3);
}

unint64_t sub_1C62D5CC4(uint64_t a1, uint64_t a2)
{
  return bswap64(*(_QWORD *)(a2 + 16));
}

uint64_t sub_1C62D5CD0(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;
  char *v6;
  char *v7;
  char *v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v8);
  if ((v9 & 1) != 0)
  {
    v3 = v8;
    v8 = 0;
  }
  else
  {
    v3 = 0;
  }
  v6 = v3;
  sub_1C62CFA3C(&v7, &v6);
  if (v6)
    (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
  v4 = v8;
  if ((v9 & 1) != 0)
  {
    v8 = 0;
    if (v4)
      (*(void (**)(char *))(*(_QWORD *)v4 + 8))(v4);
  }
  return (a2 - (uint64_t)v4) >> 6;
}

unint64_t sub_1C62D5D94(uint64_t a1, uint64_t a2)
{
  return bswap64(*(_QWORD *)(a2 + 32));
}

unint64_t sub_1C62D5DA0(uint64_t a1, uint64_t a2)
{
  return bswap64(*(_QWORD *)(a2 + 48));
}

uint64_t sub_1C62D5DAC(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 14) >> 3) & 1;
}

uint64_t sub_1C62D5DB8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 15) >> 2) & 1;
}

BOOL sub_1C62D5DC4(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_DWORD *)(a2 + 4) != 0x1000000)
    return 0;
  v2 = bswap64(*(_QWORD *)(a2 + 8));
  return (v2 & 2) != 0 && (v2 & 4) == 0;
}

BOOL sub_1C62D5DF8(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a2 + 15) & 3) != 0 && *(_DWORD *)(a2 + 4) == 0x8000000;
}

BOOL sub_1C62D5E20(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) == 0x8000000;
}

BOOL sub_1C62D5E34(uint64_t a1, uint64_t a2)
{
  char v2;

  v2 = bswap64(*(_QWORD *)(a2 + 8));
  if ((v2 & 2) == 0)
    return 0;
  if ((v2 & 4) != 0)
    return 1;
  return (v2 & 1) == 0;
}

uint64_t sub_1C62D5E60(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1) & 1) != 0 || *(_DWORD *)(a2 + 4) == 0x8000000)
    return 0;
  else
    return (*(unsigned __int8 *)(a2 + 15) >> 1) & 1;
}

uint64_t sub_1C62D5EAC(uint64_t a1)
{
  char *v1;
  uint64_t result;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 136))(&v8);
  v1 = (char *)v8;
  if ((v10 & 1) != 0)
  {
    v8 = 0;
    v6 = v1;
    sub_1C4D62BD4(&v6, &v7);
    if (v6)
      (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
    if ((v10 & 1) != 0)
    {
      result = v8;
      v8 = 0;
      if (!result)
        return result;
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return 0;
  }
  if (v9 < 6)
    return 0;
  if (*(_DWORD *)v8 == 1650811950 && *(_WORD *)(v8 + 4) == 26485)
    return 1;
  if (v9 < 7)
    return 0;
  if (*(_DWORD *)v8 == 1701083694 && *(_DWORD *)(v8 + 3) == 1735746149)
    return 1;
  if (v9 != 10)
    return 0;
  return *(_QWORD *)v8 == 0x646E695F6264672ELL && *(_WORD *)(v8 + 8) == 30821;
}

uint64_t sub_1C62D5FF4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v5);
  result = v5;
  if ((v6 & 1) == 0)
    return ((a2 - v5)
                        / (unint64_t)(bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 58)) >> 16));
  v5 = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

void sub_1C62D60A8(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = bswap32(*(_DWORD *)(a2 + 4));
  if (v5 == 4 || v5 == 9)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a1 + 7, bswap32(*(_DWORD *)(a2 + 44)), (uint64_t)&v10);
    v9 = v10;
    if ((v11 & 1) != 0)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)(a3 + 8) = a1;
    }
    *(_QWORD *)a3 = v9;
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 352))(a1);
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = v8;
  }
}

void sub_1C62D6178(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

unint64_t sub_1C62D6188(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;

  if (*((_DWORD *)sub_1C59D0474(a1, a2) + 1) == 150994944)
    v4 = sub_1C59D0518(a1, a2);
  else
    v4 = sub_1C59D05C0(a1, a2);
  return bswap64(*v4);
}

unint64_t sub_1C62D61D8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;

  v4 = sub_1C59D0474((uint64_t)a1, a2);
  if (*((_DWORD *)v4 + 1) == 150994944)
    v5 = sub_1C59D0518((uint64_t)a1, a2);
  else
    v5 = sub_1C59D05C0((uint64_t)a1, a2);
  v6 = a1[7];
  if (*(_WORD *)(v6 + 18) == 2048 && *(_BYTE *)(v6 + 4) == 2)
  {
    v7 = bswap64(v5[1]);
    v8 = *(_BYTE *)(v6 + 5) == 1;
    v9 = (v7 << 32) | (v7 >> 8) & 0xFF000000 | (v7 >> 24) & 0xFF0000 | (unsigned __int16)(HIDWORD(v7) >> 8) & 0xFF00 | HIBYTE(v7);
    if (!v8)
      v9 = v7;
  }
  else
  {
    v9 = bswap64(v5[1]);
  }
  if (HIDWORD(v9))
    return v9 & 0xFFFFFFFF00000000 | bswap32(*((_DWORD *)v4 + 10));
  else
    return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
}

uint64_t sub_1C62D62B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;

  if (*((_DWORD *)sub_1C59D0474(a1, a2) + 1) == 150994944)
    v4 = sub_1C59D0518(a1, a2);
  else
    v4 = sub_1C59D05C0(a1, a2);
  v5 = *(_QWORD *)(a1 + 56);
  if (*(_WORD *)(v5 + 18) == 2048 && *(_BYTE *)(v5 + 4) == 2)
  {
    v6 = bswap64(v4[1]);
    v7 = *(_BYTE *)(v5 + 5) == 1;
    v8 = (v6 >> 24) & 0xFF0000 | HIBYTE(v6) | (v6 >> 8) & 0xFF000000 | (v6 >> 40) & 0xFF00;
    if (!v7)
      LODWORD(v8) = v6;
  }
  else
  {
    LODWORD(v8) = bswap64(v4[1]);
  }
  return v8;
}

_QWORD *sub_1C62D635C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;

  v4 = a1 + 56;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1);
  return llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelocationTypeName(v4, v5, a3);
}

void sub_1C62D6394(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  void *__p;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  __p = 0;
  v21 = 0;
  v22 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v23);
  if ((v25 & 1) == 0 && v24)
  {
    v4 = 0;
    v5 = v23;
    v6 = v23 + (v24 << 6);
    do
    {
      if (*(_DWORD *)(v5 + 4) == 100663296)
      {
        v7 = (uint64_t *)(bswap64(*(_QWORD *)(v5 + 24)) + *(_QWORD *)(a1 + 16));
        v8 = *v7;
        if (*v7)
        {
          v9 = v7 + 2;
          do
          {
            if (v8 == 0x1100000000000000 || v8 == 0x700000000000000 || v8 == 0x1700000000000000)
            {
              v12 = bswap64(*(v9 - 1));
              if ((unint64_t)v4 >= v22)
              {
                v4 = sub_1C57753FC((char **)&__p, v12);
              }
              else
              {
                *(_QWORD *)v4 = v12;
                v4 += 8;
              }
              v21 = v4;
            }
            v13 = *v9;
            v9 += 2;
            v8 = v13;
          }
          while (v13);
        }
      }
      v5 += 64;
    }
    while (v5 != v6);
    if (v24)
    {
      v14 = 0;
      v15 = v23;
      v16 = v23 + (v24 << 6);
      do
      {
        v17 = (char *)__p;
        if (__p != v21)
        {
          v18 = bswap64(*(_QWORD *)(v15 + 16));
          while (*(_QWORD *)v17 != v18)
          {
            v17 += 8;
            if (v17 == v21)
            {
              v17 = v21;
              break;
            }
          }
        }
        if (v17 != v21)
        {
          if ((unint64_t)v14 >= *(_QWORD *)(a2 + 16))
          {
            v14 = sub_1C59CEC60((char **)a2, v15, a1);
          }
          else
          {
            *(_QWORD *)v14 = v15;
            *((_QWORD *)v14 + 1) = a1;
            v14 += 16;
          }
          *(_QWORD *)(a2 + 8) = v14;
        }
        v15 += 64;
      }
      while (v15 != v16);
    }
  }
  if ((v25 & 1) != 0)
  {
    v19 = v23;
    v23 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  if (__p)
    operator delete(__p);
}

uint64_t sub_1C62D6570()
{
  return 8;
}

const char *sub_1C62D6578(uint64_t a1)
{
  uint64_t v1;
  int v2;
  signed int v3;
  const char *result;
  signed int v5;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(unsigned __int8 *)(v1 + 4);
  if (v2 == 2)
  {
    v5 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
    if (v5 > 182)
    {
      if (v5 > 246)
      {
        switch(v5)
        {
          case 247:
            return "elf64-bpf";
          case 251:
            return "elf64-ve";
          case 258:
            return "elf64-loongarch";
        }
      }
      else
      {
        switch(v5)
        {
          case 183:
            return "elf64-bigaarch64";
          case 224:
            return "elf64-amdgpu";
          case 243:
            return "elf64-littleriscv";
        }
      }
    }
    else if (v5 > 21)
    {
      switch(v5)
      {
        case 22:
          return "elf64-s390";
        case 43:
          return "elf64-sparc";
        case 62:
          return "elf64-x86-64";
      }
    }
    else
    {
      switch(v5)
      {
        case 3:
          return "elf64-i386";
        case 8:
          return "elf64-mips";
        case 21:
          return "elf64-powerpc";
      }
    }
    return "elf64-unknown";
  }
  else
  {
    if (v2 != 1)
      llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const char *)1);
    v3 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
    if (v3 > 61)
    {
      if (v3 <= 223)
      {
        if (v3 > 104)
        {
          if (v3 == 105)
            return "elf32-msp430";
          if (v3 == 164)
            return "elf32-hexagon";
        }
        else
        {
          if (v3 == 62)
            return "elf32-x86-64";
          if (v3 == 83)
            return "elf32-avr";
        }
      }
      else if (v3 <= 243)
      {
        if (v3 == 224)
          return "elf32-amdgpu";
        if (v3 == 243)
          return "elf32-littleriscv";
      }
      else
      {
        switch(v3)
        {
          case 244:
            return "elf32-lanai";
          case 252:
            return "elf32-csky";
          case 258:
            return "elf32-loongarch";
        }
      }
      return "elf32-unknown";
    }
    if (v3 > 17)
    {
      if (v3 != 18)
      {
        if (v3 == 20)
          return "elf32-powerpc";
        if (v3 == 40)
          return "elf32-bigarm";
        return "elf32-unknown";
      }
      return "elf32-sparc";
    }
    else
    {
      result = "elf32-m68k";
      switch(v3)
      {
        case 2:
          return "elf32-sparc";
        case 3:
          result = "elf32-i386";
          break;
        case 4:
          return result;
        case 6:
          result = "elf32-iamcu";
          break;
        case 8:
          result = "elf32-mips";
          break;
        default:
          return "elf32-unknown";
      }
    }
  }
  return result;
}

uint64_t sub_1C62D6874(uint64_t a1)
{
  uint64_t v1;
  signed int v2;
  uint64_t result;
  int v4;
  int v5;
  int v6;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
  if (v2 <= 61)
  {
    result = 15;
    switch(v2)
    {
      case 2:
      case 18:
        return 33;
      case 3:
      case 6:
        return 41;
      case 4:
        return result;
      case 5:
      case 7:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
        return 0;
      case 8:
        v6 = *(unsigned __int8 *)(v1 + 4);
        if (v6 == 1)
          return 16;
        if (v6 == 2)
          return 18;
        break;
      case 20:
        return 21;
      case 21:
        return 23;
      case 22:
        return 36;
      default:
        if (v2 == 40)
          return 1;
        if (v2 != 43)
          return 0;
        return 34;
    }
    goto LABEL_44;
  }
  if (v2 > 223)
  {
    switch(v2)
    {
      case 243:
        v4 = *(unsigned __int8 *)(v1 + 4);
        if (v4 == 1)
          return 31;
        if (v4 == 2)
          return 32;
        break;
      case 244:
        return 62;
      case 245:
      case 246:
      case 248:
      case 249:
      case 250:
        return 0;
      case 247:
        return 9;
      case 251:
        return 67;
      case 252:
        return 10;
      default:
        if (v2 != 258)
          return 0;
        v5 = *(unsigned __int8 *)(v1 + 4);
        if (v5 == 1)
          return 13;
        if (v5 == 2)
          return 14;
        break;
    }
LABEL_44:
    llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const char *)1);
  }
  if (v2 <= 104)
  {
    if (v2 != 62)
    {
      if (v2 == 83)
        return 7;
      return 0;
    }
    return 42;
  }
  else
  {
    switch(v2)
    {
      case 105:
        return 20;
      case 164:
        return 12;
      case 183:
        return 4;
      default:
        return 0;
    }
  }
}

uint64_t sub_1C62D6A40@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 56);
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_QWORD *)a2 = bswap64(*(_QWORD *)(v2 + 24));
  return result;
}

BOOL sub_1C62D6A60(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 16) == 256;
}

unint64_t sub_1C62D6A74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  sub_1C62D6F70((uint64_t)&v4, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v5 & 1) != 0)
  {
    v3 = v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return bswap64(*(_QWORD *)(v4 + 16));
}

uint64_t sub_1C62D6AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  sub_1C62D6F70((uint64_t)&v4, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v5 & 1) != 0)
  {
    v3 = v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 4) >> 4;
}

uint64_t sub_1C62D6B74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  sub_1C62D6F70((uint64_t)&v4, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v5 & 1) != 0)
  {
    v3 = v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 5);
}

uint64_t sub_1C62D6BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  sub_1C62D6F70((uint64_t)&v4, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v5 & 1) != 0)
  {
    v3 = v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(_BYTE *)(v4 + 4) & 0xF;
}

uint64_t sub_1C62D6C70(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 4));
}

unint64_t sub_1C62D6C7C(uint64_t a1, uint64_t a2)
{
  return bswap64(*(_QWORD *)(a2 + 8));
}

unint64_t sub_1C62D6C88(uint64_t a1, uint64_t a2)
{
  return bswap64(*(_QWORD *)(a2 + 24));
}

void sub_1C62D6C94(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  unint64_t v9;
  const char *v10;
  __int16 v11;

  if (*((_DWORD *)sub_1C59D0474(a1, a2) + 1) == 0x4000000)
  {
    v6 = bswap64(sub_1C59D05C0(a1, a2)[2]);
    v7 = *(_BYTE *)(a3 + 8) & 0xFE;
  }
  else
  {
    v10 = "Section is not SHT_RELA";
    v11 = 259;
    v6 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v9 = qword_1EF8F7238[0];
    *(_QWORD *)v6 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v10, (_QWORD *)(v6 + 8));
    *(_QWORD *)(v6 + 32) = 3;
    *(_QWORD *)(v6 + 40) = v9;
    *(_BYTE *)(v6 + 48) = 1;
    v7 = *(_BYTE *)(a3 + 8) | 1;
  }
  *(_BYTE *)(a3 + 8) = v7;
  *(_QWORD *)a3 = v6;
}

void sub_1C62D6DA0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v17);
  if ((v19 & 1) != 0)
  {
    v8 = v17;
    v17 = 0;
    *a3 = v8;
    goto LABEL_8;
  }
  if (!v18)
  {
LABEL_6:
    *a3 = 0;
    goto LABEL_8;
  }
  v6 = (_DWORD *)(v17 + 4);
  v7 = v18 << 6;
  while (*v6 != 50331760)
  {
    v6 += 16;
    v7 -= 64;
    if (!v7)
      goto LABEL_6;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContents(v5, (uint64_t)(v6 - 1), (uint64_t)&v14);
  v10 = v14;
  if ((v16 & 1) != 0)
    goto LABEL_19;
  if (*v14 != 65 || v15 == 1)
  {
    v10 = 0;
LABEL_19:
    *a3 = (uint64_t)v10;
    goto LABEL_8;
  }
  llvm::ELFAttributeParser::parse(a2, (uint64_t)v14, v15, 0, a3);
  v12 = *a3;
  if ((v16 & 1) != 0)
  {
    v13 = v14;
    v14 = 0;
    if (v13)
      (*(void (**)(_BYTE *))(*(_QWORD *)v13 + 8))(v13);
  }
  if (!v12)
    goto LABEL_6;
LABEL_8:
  if ((v19 & 1) != 0)
  {
    v9 = v17;
    v17 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

unint64_t sub_1C62D6EF4@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;
  unint64_t v8;

  v4 = sub_1C62D770C(a1);
  v6 = v5;
  result = sub_1C62D775C(a1);
  *a2 = v4;
  a2[1] = v6;
  a2[2] = result;
  a2[3] = v8;
  return result;
}

uint64_t sub_1C62D6F38(uint64_t a1)
{
  return bswap32(*(_DWORD *)(*(_QWORD *)(a1 + 56) + 48));
}

uint64_t sub_1C62D6F48(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 16)) >> 16;
}

uint64_t sub_1C62D6F5C(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 18)) >> 16;
}

void sub_1C62D6F70(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a2, a3, (uint64_t)&v9);
  v7 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    sub_1C62CCAE0(a2, v9, a4, a1);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(unint64_t *))(*v8 + 8))(v8);
    }
  }
}

void sub_1C62D7030(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = a2[11];
  if (v8)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSHNDXTable(a2 + 7, v8, (uint64_t)&v17);
    v9 = v17;
    if ((v19 & 1) != 0)
      goto LABEL_7;
    v10 = v18;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  *(_QWORD *)&v14 = v9;
  *((_QWORD *)&v14 + 1) = v10;
  v15 = 1;
  v16 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a2 + 7, a3, a4, &v14, (uint64_t)&v17);
  v9 = v17;
  if ((v18 & 1) != 0)
  {
LABEL_7:
    *(_BYTE *)(a1 + 16) |= 1u;
    *(_QWORD *)a1 = v9;
    return;
  }
  if (v17)
  {
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v11 = (*(uint64_t (**)(_QWORD *))(*a2 + 352))(a2);
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    if ((v18 & 1) != 0)
    {
      v13 = v17;
      v17 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
  }
}

void sub_1C62D7164(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a2, a3, (uint64_t)&v9);
  v7 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    sub_1C62D7224(a1, a2, v9, a4);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(unint64_t *))(*v8 + 8))(v8);
    }
  }
}

void sub_1C62D7224(uint64_t a1, _QWORD *a2, unint64_t *a3, unsigned int a4)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  unint64_t v15;
  uint64_t v16[4];
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21[4];
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[5];
  uint64_t v26[5];
  uint64_t v27[5];
  _BYTE v28[40];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  sub_1C59C2300(a2, a3, (uint64_t)v29);
  if ((v30 & 1) != 0)
  {
    v7 = v29[0];
    v8 = *(_BYTE *)(a1 + 8) | 1;
    goto LABEL_5;
  }
  if (v29[1] > (unint64_t)a4)
  {
    v7 = v29[0] + 16 * a4;
    v8 = *(_BYTE *)(a1 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v7;
    return;
  }
  v23 = "can't read an entry at 0x";
  v24 = 259;
  v20 = 16 * a4;
  v21[0] = (uint64_t)&v20;
  v21[2] = 0;
  v22 = 270;
  sub_1C4825FE4((uint64_t *)&v23, v21, (uint64_t)v25);
  v18 = ": it goes past the end of the section (0x";
  v19 = 259;
  sub_1C4825FE4(v25, (uint64_t *)&v18, (uint64_t)v26);
  v15 = bswap64(a3[4]);
  v16[0] = (uint64_t)&v15;
  v16[2] = 0;
  v17 = 270;
  sub_1C4825FE4(v26, v16, (uint64_t)v27);
  v13 = ")";
  v14 = 259;
  sub_1C4825FE4(v27, (uint64_t *)&v13, (uint64_t)v28);
  v9 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v11 = qword_1EF8F7238[0];
  *(_QWORD *)v9 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v28, (_QWORD *)(v9 + 8));
  *(_QWORD *)(v9 + 32) = 3;
  *(_QWORD *)(v9 + 40) = v11;
  *(_BYTE *)(v9 + 48) = 1;
  *(_BYTE *)(a1 + 8) |= 1u;
  *(_QWORD *)a1 = v9;
  if ((v30 & 1) != 0)
  {
    v12 = v29[0];
    v29[0] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

void sub_1C62D7434(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a2, a3, (uint64_t)&v9);
  v7 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    sub_1C62D74F4(a1, a2, v9, a4);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(unint64_t *))(*v8 + 8))(v8);
    }
  }
}

void sub_1C62D74F4(uint64_t a1, _QWORD *a2, unint64_t *a3, unsigned int a4)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  unint64_t v15;
  uint64_t v16[4];
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21[4];
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[5];
  uint64_t v26[5];
  uint64_t v27[5];
  _BYTE v28[40];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::relas(a2, a3, (uint64_t)v29);
  if ((v30 & 1) != 0)
  {
    v7 = v29[0];
    v8 = *(_BYTE *)(a1 + 8) | 1;
    goto LABEL_5;
  }
  if (v29[1] > (unint64_t)a4)
  {
    v7 = v29[0] + 24 * a4;
    v8 = *(_BYTE *)(a1 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v7;
    return;
  }
  v23 = "can't read an entry at 0x";
  v24 = 259;
  v20 = 24 * a4;
  v21[0] = (uint64_t)&v20;
  v21[2] = 0;
  v22 = 270;
  sub_1C4825FE4((uint64_t *)&v23, v21, (uint64_t)v25);
  v18 = ": it goes past the end of the section (0x";
  v19 = 259;
  sub_1C4825FE4(v25, (uint64_t *)&v18, (uint64_t)v26);
  v15 = bswap64(a3[4]);
  v16[0] = (uint64_t)&v15;
  v16[2] = 0;
  v17 = 270;
  sub_1C4825FE4(v26, v16, (uint64_t)v27);
  v13 = ")";
  v14 = 259;
  sub_1C4825FE4(v27, (uint64_t *)&v13, (uint64_t)v28);
  v9 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v11 = qword_1EF8F7238[0];
  *(_QWORD *)v9 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v28, (_QWORD *)(v9 + 8));
  *(_QWORD *)(v9 + 32) = 3;
  *(_QWORD *)(v9 + 40) = v11;
  *(_BYTE *)(v9 + 48) = 1;
  *(_BYTE *)(a1 + 8) |= 1u;
  *(_QWORD *)a1 = v9;
  if ((v30 & 1) != 0)
  {
    v12 = v29[0];
    v29[0] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

unint64_t sub_1C62D770C(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 72);
  v2 = v1 && bswap64(*(_QWORD *)(v1 + 32)) > 0x17;
  return sub_1C59D03C8(a1, v1, v2);
}

unint64_t sub_1C62D775C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
    return sub_1C59D03C8(a1, v1, bswap64(*(_QWORD *)(v1 + 32)) / 0x18);
  else
    return sub_1C62D770C(a1);
}

llvm::object::GenericBinaryError *llvm::object::GenericBinaryError::GenericBinaryError(llvm::object::GenericBinaryError *this, const llvm::Twine *a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_1C62D7954((uint64_t)this);
  *v4 = off_1E8189218;
  llvm::Twine::str(a2, v4 + 3);
  return this;
}

uint64_t llvm::object::GenericBinaryError::GenericBinaryError(uint64_t a1, llvm::Twine *a2, unsigned int a3)
{
  _QWORD *v6;
  unint64_t v8;

  v6 = (_QWORD *)sub_1C62D7954(a1);
  *v6 = off_1E8189218;
  llvm::Twine::str(a2, v6 + 3);
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v8 = qword_1EF8F7238[0];
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v8;
  return a1;
}

llvm::raw_ostream *llvm::object::GenericBinaryError::log(llvm::object::GenericBinaryError *this, llvm::raw_ostream *a2)
{
  char *v3;
  const char *v4;
  const char *v5;
  char v6;
  int v7;
  const char *v8;
  size_t v9;
  size_t v10;

  v5 = (const char *)*((_QWORD *)this + 3);
  v3 = (char *)this + 24;
  v4 = v5;
  v6 = v3[23];
  v7 = v6;
  if (v6 >= 0)
    v8 = v3;
  else
    v8 = v4;
  v9 = v6 & 0x7F;
  if (v7 >= 0)
    v10 = v9;
  else
    v10 = *((_QWORD *)v3 + 1);
  return llvm::raw_ostream::write(a2, v8, v10);
}

void sub_1C62D78B4()
{
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C62D78C8()
{
  return &llvm::object::BinaryError::ID;
}

uint64_t sub_1C62D78D4(uint64_t a1, void *a2)
{
  _BOOL4 v3;

  v3 = a2 == &llvm::ECError::ID || a2 == &llvm::ErrorInfoBase::ID;
  return a2 == &llvm::object::BinaryError::ID || v3;
}

void *sub_1C62D7908()
{
  return &llvm::object::GenericBinaryError::ID;
}

uint64_t sub_1C62D7914(uint64_t a1, void *a2)
{
  _BOOL4 v3;

  v3 = a2 == &llvm::ECError::ID || a2 == &llvm::ErrorInfoBase::ID;
  return a2 == &llvm::object::GenericBinaryError::ID || a2 == &llvm::object::BinaryError::ID || v3;
}

uint64_t sub_1C62D7954(uint64_t a1)
{
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E81A0D28;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = std::system_category();
  *(_QWORD *)a1 = &off_1E8189268;
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v3 = qword_1EF8F7238[0];
  *(_QWORD *)(a1 + 8) = 3;
  *(_QWORD *)(a1 + 16) = v3;
  return a1;
}

uint64_t llvm::object::IRObjectFile::IRObjectFile(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  llvm::ModuleSymbolTable *v7;
  llvm::Module **v8;
  llvm::Module **v9;
  llvm::Module *v10;
  _OWORD v12[2];

  v5 = a2[1];
  v12[0] = *a2;
  v12[1] = v5;
  llvm::object::SymbolicFile::SymbolicFile(a1, 3, (uint64_t)v12);
  *(_QWORD *)v6 = &off_1E8189300;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)a3;
  *(_QWORD *)(v6 + 64) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  v7 = (llvm::ModuleSymbolTable *)(v6 + 72);
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 96) = v6 + 112;
  *(_QWORD *)(v6 + 104) = 0x400000000;
  *(_QWORD *)(v6 + 144) = v6 + 160;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_DWORD *)(v6 + 216) = 0;
  v8 = *(llvm::Module ***)(v6 + 48);
  v9 = *(llvm::Module ***)(v6 + 56);
  while (v8 != v9)
  {
    v10 = *v8++;
    llvm::ModuleSymbolTable::addModule(v7, v10);
  }
  return a1;
}

void llvm::object::IRObjectFile::~IRObjectFile(llvm::object::IRObjectFile *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E8189300;
  sub_1C59D1A88((_QWORD *)this + 9);
  v2 = (_QWORD *)*((_QWORD *)this + 6);
  if (v2)
  {
    sub_1C59D1AD8((llvm::object::IRObjectFile *)((char *)this + 48), v2);
    operator delete(*((void **)this + 6));
  }
  llvm::object::SymbolicFile::~SymbolicFile(this);
}

{
  llvm::object::IRObjectFile::~IRObjectFile(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::object::IRObjectFile::symbol_begin(llvm::object::IRObjectFile *this)
{
  return *((_QWORD *)this + 22);
}

uint64_t llvm::object::IRObjectFile::symbol_end(llvm::object::IRObjectFile *this)
{
  return *((_QWORD *)this + 23);
}

uint64_t llvm::object::IRObjectFile::getTargetTriple(llvm::object::IRObjectFile *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = **((_QWORD **)this + 6);
  v4 = *(_QWORD *)(v1 + 216);
  v2 = v1 + 216;
  v3 = v4;
  if (*(char *)(v2 + 23) >= 0)
    return v2;
  else
    return v3;
}

uint64_t llvm::object::IRObjectFile::findBitcodeInMemBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  unint64_t v8;
  __int128 v9;
  const llvm::object::ObjectFile *v10;
  __n128 BitcodeInObject;
  _OWORD v12[2];
  llvm::object::IRObjectFile *v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  result = llvm::identify_magic(*(unsigned __int8 **)a1, *(_QWORD *)(a1 + 8));
  if ((_DWORD)result == 1)
  {
    *(_BYTE *)(a2 + 32) &= ~1u;
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = v5;
    return result;
  }
  if (result > 0x21 || ((1 << result) & 0x208000210) == 0)
  {
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v8 = qword_1EF8F7238[0];
    result = operator new();
    *(_QWORD *)result = &off_1E81A0D28;
    *(_QWORD *)(result + 8) = 2;
    *(_QWORD *)(result + 16) = v8;
    goto LABEL_12;
  }
  v9 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v9;
  llvm::object::ObjectFile::createObjectFile((uint64_t)v12, result);
  result = (uint64_t)v13;
  if ((v14 & 1) != 0)
  {
LABEL_12:
    *(_BYTE *)(a2 + 32) |= 1u;
    *(_QWORD *)a2 = result;
    return result;
  }
  BitcodeInObject = llvm::object::IRObjectFile::findBitcodeInObject((__n128 *)v13, v10, (__n128 *)a2);
  result = (uint64_t)v13;
  v13 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, BitcodeInObject);
  return result;
}

uint64_t llvm::object::MachOObjectFile::getSymbol64TableEntry(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 > (unint64_t)a2 || (unint64_t)(a2 + 2) > v2 + *(_QWORD *)(a1 + 24);
  if (v3)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v4 = *a2;
  v5 = HIWORD(*a2);
  v6 = *(_DWORD *)(a1 + 8);
  v3 = v6 > 0x13;
  v7 = (1 << v6) & 0xAAC00;
  v8 = v3 || v7 == 0;
  v9 = bswap32(v4);
  v10 = __rev16(v5);
  if (v8)
    v11 = v4;
  else
    v11 = v9;
  if (v8)
    v5 = v5;
  else
    v5 = v10;
  return v4 & 0xFFFF00000000 | (v5 << 48) | v11;
}

uint64_t llvm::object::MachOObjectFile::getSymbolTableEntry(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 > (unint64_t)a2 || (unint64_t)a2 + 12 > v2 + *(_QWORD *)(a1 + 24);
  if (v3)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v4 = *a2;
  v5 = HIWORD(*a2);
  v6 = *(_DWORD *)(a1 + 8);
  v3 = v6 > 0x13;
  v7 = (1 << v6) & 0xAAC00;
  v8 = v3 || v7 == 0;
  v9 = bswap32(v4);
  v10 = __rev16(v5);
  if (v8)
    v11 = v4;
  else
    v11 = v9;
  if (v8)
    v5 = v5;
  else
    v5 = v10;
  return v4 & 0xFFFF00000000 | (v5 << 48) | v11;
}

uint64_t llvm::object::MachOObjectFile::moveSymbolNext(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = 12;
  if ((*(_DWORD *)(result + 8) & 0xFFFFFFFE) == 0x12)
    v2 = 16;
  *a2 += v2;
  return result;
}

size_t llvm::object::MachOObjectFile::getSymbolName@<X0>(llvm::object::MachOObjectFile *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t StringTableData;
  size_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t SymbolIndex;
  unint64_t *p_SymbolIndex;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16[4];
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20[5];
  uint64_t v21[5];
  uint64_t v22[5];

  StringTableData = llvm::object::MachOObjectFile::getStringTableData(a1);
  result = sub_1C59DA9F0((uint64_t)a1, a2);
  if ((_DWORD)result)
  {
    v8 = StringTableData + result;
    v9 = *((_QWORD *)a1 + 2);
    if (v8 < v9 || v8 >= v9 + *((_QWORD *)a1 + 3))
    {
      v18 = "bad string index: ";
      v19 = 259;
      v17 = 264;
      LODWORD(v16[0]) = result;
      sub_1C4825FE4((uint64_t *)&v18, v16, (uint64_t)v20);
      v14 = " for symbol at index ";
      v15 = 259;
      sub_1C4825FE4(v20, (uint64_t *)&v14, (uint64_t)v21);
      v13 = 268;
      SymbolIndex = llvm::object::MachOObjectFile::getSymbolIndex((uint64_t)a1, (uint64_t)a2);
      p_SymbolIndex = &SymbolIndex;
      sub_1C4825FE4(v21, (uint64_t *)&p_SymbolIndex, (uint64_t)v22);
      result = sub_1C59D7FE0((uint64_t *)a3, v22);
      *(_BYTE *)(a3 + 16) |= 1u;
    }
    else
    {
      if (StringTableData)
        result = strlen((const char *)(StringTableData + result));
      else
        result = 0;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v8;
      *(_QWORD *)(a3 + 8) = result;
    }
  }
  else
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  return result;
}

unint64_t llvm::object::MachOObjectFile::getSymbolIndex(uint64_t a1, uint64_t a2)
{
  __int128 *v2;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(__int128 **)(a1 + 272);
  if (!v2 || (v7 = 0, v8 = 0, v9 = 0, sub_1C59D9380((uint64_t)&v7, a1, v2), !*(_QWORD *)(a1 + 272)))
    llvm::report_fatal_error((llvm *)"getSymbolIndex() called with no symbol table symbol", (const char *)1);
  v5 = 12;
  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
    v5 = 16;
  return (a2 - (*(_QWORD *)(a1 + 16) + (unint64_t)v8)) / v5;
}

uint64_t llvm::object::MachOObjectFile::getSymbolValueImpl(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v4;

  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
  {
    llvm::object::MachOObjectFile::getSymbol64TableEntry(a1, a2);
    return v2;
  }
  else
  {
    llvm::object::MachOObjectFile::getSymbolTableEntry(a1, a2);
    return v4;
  }
}

uint64_t llvm::object::MachOObjectFile::getSymbolAlignment(uint64_t a1, uint64_t *a2)
{
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 40))(v5);
  if ((v5[0] & 0x10) != 0)
    return (1 << (((unint64_t)sub_1C59DA9F0(a1, a2) >> 56) & 0xF));
  else
    return 0;
}

uint64_t llvm::object::MachOObjectFile::getCommonSymbolSizeImpl(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v4;

  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
  {
    llvm::object::MachOObjectFile::getSymbol64TableEntry(a1, a2);
    return v2;
  }
  else
  {
    llvm::object::MachOObjectFile::getSymbolTableEntry(a1, a2);
    return v4;
  }
}

uint64_t llvm::object::MachOObjectFile::getSymbolType@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  _QWORD v14[2];
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  result = sub_1C59DA9F0(a1, a2);
  if ((result & 0xE000000000) != 0)
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    v7 = 3;
LABEL_3:
    *(_DWORD *)a3 = v7;
    return result;
  }
  if ((BYTE4(result) & 0xE) != 0xE)
  {
    if ((result & 0xE00000000) == 0)
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 0;
      return result;
    }
    *(_BYTE *)(a3 + 8) &= ~1u;
    v7 = 1;
    goto LABEL_3;
  }
  result = (uint64_t)(*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(v14, a1, a2);
  if ((v15 & 1) != 0)
  {
    v13 = v14[0];
    v14[0] = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v13;
  }
  else
  {
    v8 = v14[0];
    v9 = v14[1];
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 352))(a1);
    if (v9 == v10 && v8 == result)
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      v12 = 1;
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 200))(v9, v8);
      if ((result & 1) != 0
        || (result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 208))(v9, v8), (_DWORD)result))
      {
        *(_BYTE *)(a3 + 8) &= ~1u;
        v12 = 2;
      }
      else
      {
        *(_BYTE *)(a3 + 8) &= ~1u;
        v12 = 5;
      }
    }
    *(_DWORD *)a3 = v12;
  }
  if ((v15 & 1) != 0)
  {
    result = v14[0];
    v14[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

unint64_t llvm::object::MachOObjectFile::getSymbolFlags@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;

  result = sub_1C59DA9F0(a1, a2);
  v7 = result;
  v8 = HIDWORD(result);
  v9 = BYTE4(result) & 0xE;
  if ((result & 0xE000000000) != 0)
    v10 = (32 * ((BYTE4(result) & 0xE) == 10)) | 0x80;
  else
    v10 = 32 * ((BYTE4(result) & 0xE) == 10);
  if ((result & 0x100000000) != 0)
  {
    if ((result & 0xE00000000) != 0)
    {
      v11 = v10 | 2;
    }
    else
    {
      if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
      {
        result = llvm::object::MachOObjectFile::getSymbol64TableEntry(a1, a2);
      }
      else
      {
        result = llvm::object::MachOObjectFile::getSymbolTableEntry(a1, a2);
        v14 = v14;
      }
      v11 = v10 | 3;
      if (v14)
        v11 = v10 | 0x12;
    }
    v10 = v11 | ~(4 * v8) & 0x40;
  }
  if ((v7 & 0xC0000000000000) != 0)
    v12 = v10 | 4;
  else
    v12 = v10;
  v13 = v12 & 0xFFFFFEFF | (((HIWORD(v7) >> 3) & 1) << 8);
  if (v9 == 2)
    v13 |= 8u;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v13;
  return result;
}

uint64_t llvm::object::MachOObjectFile::getSymbolSection@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t SymbolIndex;
  unint64_t *p_SymbolIndex;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14[4];
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[5];
  uint64_t v19[5];
  uint64_t v20[5];

  result = sub_1C59DA9F0((uint64_t)a1, a2);
  if (BYTE5(result))
  {
    v7 = BYTE5(result) - 1;
    if (a1[22] <= v7)
    {
      v16 = "bad section index: ";
      v17 = 259;
      v15 = 265;
      LODWORD(v14[0]) = BYTE5(result);
      sub_1C4825FE4((uint64_t *)&v16, v14, (uint64_t)v18);
      v12 = " for symbol at index ";
      v13 = 259;
      sub_1C4825FE4(v18, (uint64_t *)&v12, (uint64_t)v19);
      v11 = 268;
      SymbolIndex = llvm::object::MachOObjectFile::getSymbolIndex((uint64_t)a1, (uint64_t)a2);
      p_SymbolIndex = &SymbolIndex;
      sub_1C4825FE4(v19, (uint64_t *)&p_SymbolIndex, (uint64_t)v20);
      result = sub_1C59D7FE0((uint64_t *)a3, v20);
      *(_BYTE *)(a3 + 16) |= 1u;
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v7;
      *(_QWORD *)(a3 + 8) = a1;
    }
  }
  else
  {
    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 352))(a1);
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = v8;
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::getSectionAddress(uint64_t a1, unsigned int a2)
{
  _BYTE v3[32];
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
  {
    sub_1C59EA458(a1, *(_OWORD **)(*(_QWORD *)(a1 + 80) + 8 * a2), (uint64_t)v3);
    return v4;
  }
  else
  {
    sub_1C59EA3C8(a1, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2), (uint64_t)v3);
    return v4;
  }
}

uint64_t llvm::object::MachOObjectFile::getSectionIndex(uint64_t a1, unsigned int a2)
{
  return a2;
}

uint64_t llvm::object::MachOObjectFile::getSectionAlignment(uint64_t a1, unsigned int a2)
{
  char v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
  {
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    v4 = 0u;
    sub_1C59EA458(a1, *(_OWORD **)(*(_QWORD *)(a1 + 80) + 8 * a2), (uint64_t)&v4);
    v2 = BYTE4(v7);
  }
  else
  {
    LODWORD(v8) = 0;
    v6 = 0u;
    v7 = 0u;
    v4 = 0u;
    v5 = 0u;
    sub_1C59EA3C8(a1, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2), (uint64_t)&v4);
    v2 = BYTE12(v6);
  }
  return 1 << v2;
}

uint64_t llvm::object::MachOObjectFile::isSectionCompressed()
{
  return 0;
}

BOOL llvm::object::MachOObjectFile::isSectionBSS(uint64_t a1, unsigned int a2)
{
  int v2;
  _BOOL4 v4;

  v2 = sub_1C59DAA84(a1, a2);
  v4 = v2 == 1 || v2 == 12;
  return v2 >= 0 && v4;
}

BOOL llvm::object::MachOObjectFile::isSectionVirtual(uint64_t a1, unsigned int a2)
{
  int v2;

  v2 = sub_1C59DAA84(a1, a2);
  return v2 == 1 || v2 == 12;
}

BOOL llvm::object::MachOObjectFile::isSectionStripped(uint64_t a1, unsigned int a2)
{
  int v2;
  _BYTE v4[40];
  int v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
  {
    sub_1C59EA458(a1, *(_OWORD **)(*(_QWORD *)(a1 + 80) + 8 * a2), (uint64_t)v4);
    v2 = v6;
  }
  else
  {
    sub_1C59EA3C8(a1, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2), (uint64_t)v4);
    v2 = v5;
  }
  return v2 == 0;
}

uint64_t llvm::object::MachOObjectFile::section_rel_begin(uint64_t a1, unsigned int a2)
{
  return a2;
}

uint64_t llvm::object::MachOObjectFile::section_rel_end(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
  {
    v8 = 0u;
    v9 = 0u;
    v6 = 0u;
    v7 = 0u;
    v5 = 0u;
    sub_1C59EA458(a1, *(_OWORD **)(*(_QWORD *)(a1 + 80) + 8 * a2), (uint64_t)&v5);
    v3 = HIDWORD(v8);
  }
  else
  {
    LODWORD(v9) = 0;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    sub_1C59EA3C8(a1, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2), (uint64_t)&v5);
    v3 = DWORD1(v8);
  }
  return v2 | (v3 << 32);
}

double llvm::object::MachOObjectFile::getDysymtabLoadCommand@<D0>(llvm::object::MachOObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = (_OWORD *)*((_QWORD *)this + 35);
  if (v2)
    return sub_1C59DA684((uint64_t)this, v2, a2);
  *(_QWORD *)a2 = 0x500000000BLL;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 72) = 0;
  return result;
}

void llvm::object::MachOObjectFile::moveRelocationNext(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

uint64_t llvm::object::MachOObjectFile::getRelocationOffset(uint64_t a1, unint64_t a2)
{
  int Relocation;
  BOOL v4;
  unsigned int v5;

  Relocation = llvm::object::MachOObjectFile::getRelocation(a1, a2);
  v4 = Relocation >= 0 || *(_DWORD *)(a1 + 52) == 16777223;
  v5 = Relocation & 0xFFFFFF;
  if (v4)
    return Relocation;
  return v5;
}

uint64_t llvm::object::MachOObjectFile::getRelocation(uint64_t a1, unint64_t a2)
{
  unsigned int v4;
  _OWORD *v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 60) == 1)
  {
    if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
    {
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v19 = 0u;
      sub_1C59EA458(a1, *(_OWORD **)(*(_QWORD *)(a1 + 80) + 8 * a2), (uint64_t)&v19);
      v4 = DWORD2(v22);
    }
    else
    {
      LODWORD(v23) = 0;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      sub_1C59EA3C8(a1, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2), (uint64_t)&v19);
      v4 = v22;
    }
  }
  else
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    v5 = *(_OWORD **)(a1 + 280);
    if (v5)
    {
      sub_1C59DA684(a1, v5, (uint64_t)&v19);
      v4 = v23;
      v6 = DWORD2(v23);
    }
    else
    {
      v6 = 0;
      v4 = 0;
    }
    if ((_DWORD)a2)
      v4 = v6;
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = (unsigned int *)(v7 + v4 + 8 * HIDWORD(a2));
  if ((unint64_t)v8 < v7 || (unint64_t)(v8 + 2) > v7 + *(_QWORD *)(a1 + 24))
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v10 = *v8;
  v11 = v8[1];
  v12 = *(_DWORD *)(a1 + 8);
  v13 = bswap32(v10);
  v14 = bswap32(v11);
  if (((1 << v12) & 0xAAC00) == 0)
  {
    v13 = v10;
    v14 = v11;
  }
  v15 = v12 > 0x13;
  if (v12 <= 0x13)
    v16 = v13;
  else
    v16 = v10;
  if (v15)
    v17 = v11;
  else
    v17 = v14;
  return v16 | (v17 << 32);
}

uint64_t llvm::object::MachOObjectFile::getRelocationSymbol(uint64_t a1, unint64_t a2)
{
  uint64_t Relocation;
  unsigned int v5;
  BOOL v6;
  int v7;
  __int128 *v9;
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  Relocation = llvm::object::MachOObjectFile::getRelocation(a1, a2);
  if (*(_DWORD *)(a1 + 52) != 16777223 && (int)Relocation < 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v5 = *(_DWORD *)(a1 + 8);
  v6 = v5 > 0x13 || ((1 << v5) & 0xAAC00) == 0;
  v7 = v6 ? HIDWORD(Relocation) & 0xFFFFFF : HIDWORD(Relocation) >> 8;
  if (!(v5 <= 0x13 && ((1 << v5) & 0xAAC00) != 0 ? BYTE4(Relocation) & 0x10 : (HIDWORD(Relocation) >> 27) & 1))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v9 = *(__int128 **)(a1 + 272);
  if (v9)
  {
    sub_1C59D9380((uint64_t)&v13, a1, v9);
    v5 = *(_DWORD *)(a1 + 8);
    v10 = v14;
  }
  else
  {
    v10 = 0;
  }
  if ((v5 & 0xFFFFFFFE) == 0x12)
    v11 = 16;
  else
    v11 = 12;
  return *(_QWORD *)(a1 + 16) + (v10 + v11 * v7);
}

uint64_t llvm::object::MachOObjectFile::getRelocationType(uint64_t a1, unint64_t a2)
{
  uint64_t Relocation;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  BOOL v8;

  Relocation = llvm::object::MachOObjectFile::getRelocation(a1, a2);
  if (*(_DWORD *)(a1 + 52) == 16777223 || (Relocation & 0x80000000) == 0)
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = v5 > 0x13;
    v7 = (1 << v5) & 0xAAC00;
    v8 = v6 || v7 == 0;
    v4 = HIDWORD(Relocation) >> 28;
    if (!v8)
      return BYTE4(Relocation) & 0xF;
  }
  else
  {
    return BYTE3(Relocation) & 0xF;
  }
  return v4;
}

_QWORD *llvm::object::MachOObjectFile::getRelocationTypeName(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  int v6;
  int v7;
  char *v8;
  int v9;
  size_t v10;
  char **v11;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1);
  v7 = v6;
  v8 = 0;
  if (v6 <= 27)
  {
    v9 = v6;
    v10 = 0;
    switch(v9)
    {
      case 0:
        goto LABEL_23;
      case 1:
        if (v5 > 9)
          goto LABEL_23;
        v11 = off_1E8189580;
        goto LABEL_5;
      case 2:
      case 4:
        return sub_1C52C2F74(a3, v8, &v8[v10]);
      case 3:
      case 5:
        if (v5 > 0xB)
          goto LABEL_23;
        v11 = off_1E81895D0;
        goto LABEL_5;
      default:
        v10 = 0;
        if (v9 != 21)
          return sub_1C52C2F74(a3, v8, &v8[v10]);
        if (v5 > 0xF)
          goto LABEL_23;
        v11 = off_1E8189630;
        break;
    }
    goto LABEL_5;
  }
  if (v6 > 40)
  {
    if (v6 == 42)
    {
      if (v5 <= 9)
      {
        v11 = off_1E8189530;
        goto LABEL_5;
      }
    }
    else
    {
      v10 = 0;
      if (v7 != 41)
        return sub_1C52C2F74(a3, v8, &v8[v10]);
      if (v5 <= 5)
      {
        v11 = off_1E8189500;
        goto LABEL_5;
      }
    }
LABEL_23:
    v8 = "Unknown";
    v10 = 7;
    return sub_1C52C2F74(a3, v8, &v8[v10]);
  }
  if (v6 == 28)
  {
    if (v5 <= 0xB)
    {
      v11 = off_1E81896B0;
      goto LABEL_5;
    }
    goto LABEL_23;
  }
  v10 = 0;
  if (v7 != 29)
    return sub_1C52C2F74(a3, v8, &v8[v10]);
  if (v5 > 0xF)
    goto LABEL_23;
  v11 = off_1E8189710;
LABEL_5:
  v8 = v11[v5];
  v10 = strlen(v8);
  return sub_1C52C2F74(a3, v8, &v8[v10]);
}

uint64_t llvm::object::MachOObjectFile::getBytesInAddress(llvm::object::MachOObjectFile *this)
{
  if ((*((_DWORD *)this + 2) & 0xFFFFFFFE) == 0x12)
    return 8;
  else
    return 4;
}

const char *llvm::object::MachOObjectFile::getFileFormatName(llvm::object::MachOObjectFile *this)
{
  int v1;
  const char *result;

  v1 = *((_DWORD *)this + 13);
  if ((*((_DWORD *)this + 2) & 0xFFFFFFFE) == 0x12)
  {
    result = "Mach-O 64-bit x86-64";
    switch(v1)
    {
      case 16777223:
        return result;
      case 16777224:
      case 16777225:
      case 16777226:
      case 16777227:
      case 16777229:
      case 16777230:
      case 16777231:
      case 16777232:
      case 16777233:
        goto LABEL_19;
      case 16777228:
        result = "Mach-O arm64";
        break;
      case 16777234:
        result = "Mach-O 64-bit ppc64";
        break;
      case 16777235:
        result = "Mach-O 64-bit Apple GPU";
        break;
      case 16777236:
        result = "Mach-O 64-bit AMD GPU";
        break;
      case 16777237:
        result = "Mach-O 64-bit Intel GPU";
        break;
      case 16777238:
        result = "Mach-O 64-bit NVidia GPU";
        break;
      case 16777239:
        result = "Mach-O 64-bit air";
        break;
      default:
        if (v1 == 33554444)
          return "Mach-O arm64 (ILP32)";
LABEL_19:
        result = "Mach-O 64-bit unknown";
        break;
    }
  }
  else
  {
    if (v1 <= 17)
    {
      if (v1 == 7)
        return "Mach-O 32-bit i386";
      if (v1 == 12)
        return "Mach-O arm";
    }
    else
    {
      switch(v1)
      {
        case 18:
          return "Mach-O 32-bit ppc";
        case 23:
          return "Mach-O 32-bit air";
        case 33554444:
          return "Mach-O arm64 (ILP32)";
      }
    }
    return "Mach-O 32-bit unknown";
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::getArch(llvm::object::MachOObjectFile *this, char a2)
{
  uint64_t result;

  if ((int)this <= 22)
  {
    switch((_DWORD)this)
    {
      case 7:
        return 41;
      case 0xC:
        return 1;
      case 0x12:
        return 21;
      default:
        return 0;
    }
  }
  else
  {
    switch((int)this)
    {
      case 16777223:
        return 42;
      case 16777224:
      case 16777225:
      case 16777226:
      case 16777227:
      case 16777229:
      case 16777230:
      case 16777231:
      case 16777232:
      case 16777233:
        return 0;
      case 16777228:
        return 3;
      case 16777234:
        return 23;
      case 16777235:
        if ((a2 & 0xC) != 0)
          return 0;
        else
          return (a2 & 0xFu) + 26;
      case 16777236:
        return 30;
      case 16777237:
        return 47;
      case 16777238:
        return 45;
      case 16777239:
        return 49;
      default:
        if ((_DWORD)this == 23)
        {
          result = 48;
        }
        else
        {
          if ((_DWORD)this != 33554444)
            return 0;
          result = 5;
        }
        break;
    }
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::getArch(llvm::object::MachOObjectFile *this)
{
  return llvm::object::MachOObjectFile::getArch((llvm::object::MachOObjectFile *)*((unsigned int *)this + 13), *((_DWORD *)this + 14));
}

BOOL llvm::object::MachOObjectFile::isRelocatableObject(llvm::object::MachOObjectFile *this)
{
  return *((_DWORD *)this + 15) == 1;
}

const char *llvm::object::MachOObjectFile::mapDebugSectionName(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  const char *result;

  result = (const char *)a2;
  if (a3 == 14 && !(*a2 ^ 0x74735F6775626564 | *(_QWORD *)((char *)a2 + 6) ^ 0x7366666F5F727473))
    return "debug_str_offsets";
  return result;
}

unint64_t *sub_1C62D8F20@<X0>(unint64_t *a1@<X8>)
{
  return llvm::SubtargetFeatures::SubtargetFeatures(a1, (uint64_t)"", 0);
}

int8x16_t sub_1C62D8F34(int8x16_t *a1)
{
  int8x16_t v1;
  int8x16_t v2;
  int8x16_t result;

  v1 = vrev32q_s8(a1[1]);
  *a1 = vrev32q_s8(*a1);
  a1[1] = v1;
  v2 = vrev32q_s8(a1[3]);
  a1[2] = vrev32q_s8(a1[2]);
  a1[3] = v2;
  result = vrev32q_s8(a1[4]);
  a1[4] = result;
  return result;
}

double llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int8x16_t v6;
  uint64_t v7;
  int8x16_t v8;
  int8x8_t v9;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  if (a2 && *(_DWORD *)(a2 + 52) > a3)
  {
    v3 = *(_QWORD *)(a2 + 16);
    if ((*(_DWORD *)(a2 + 48) | 0x1000000) == 0xCBFEBABE)
    {
      v4 = v3 + 20 * a3;
      v5 = bswap32(*(_DWORD *)(v4 + 24));
      v6 = vrev32q_s8(*(int8x16_t *)(v4 + 8));
      *(int8x16_t *)(a1 + 12) = v6;
      *(_DWORD *)(a1 + 28) = v5;
    }
    else
    {
      v7 = v3 + 32 * a3;
      v8 = vrev64q_s8(*(int8x16_t *)(v7 + 16));
      v9 = *(int8x8_t *)(v7 + 32);
      *(int8x8_t *)(a1 + 32) = vrev32_s8(*(int8x8_t *)(v7 + 8));
      *(int8x8_t *)v6.i8 = vrev32_s8(v9);
      *(int8x16_t *)(a1 + 40) = v8;
      *(_QWORD *)(a1 + 56) = v6.i64[0];
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  return *(double *)v6.i64;
}

uint64_t sub_1C62D8FF8(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = 0;
  v4 = operator new();
  v5 = a2[1];
  v8[0] = *a2;
  v8[1] = v5;
  result = llvm::object::MetalLibObjectFile::MetalLibObjectFile(v4, v8, &v9);
  v7 = v9;
  if (v9)
  {
    v9 = 0;
    *(_BYTE *)(a1 + 8) |= 1u;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    result = v9;
    *(_QWORD *)a1 = v7;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *(_BYTE *)(a1 + 8) &= ~1u;
    *(_QWORD *)a1 = result;
  }
  return result;
}

uint64_t llvm::object::MachOUniversalBinary::create@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  char v9;
  __int128 v10[2];
  uint64_t v11;

  v11 = 0;
  v4 = operator new();
  v5 = a1[1];
  v10[0] = *a1;
  v10[1] = v5;
  result = llvm::object::MachOUniversalBinary::MachOUniversalBinary(v4, v10, &v11);
  v7 = v11;
  v8 = *(_BYTE *)(a2 + 8);
  if (v11)
  {
    v9 = v8 | 1;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    result = v7;
  }
  else
  {
    v9 = v8 & 0xFE;
  }
  *(_BYTE *)(a2 + 8) = v9;
  *(_QWORD *)a2 = result;
  return result;
}

void llvm::object::MachOUniversalBinary::getIRObjectForArch(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, llvm::LLVMContext *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  _QWORD v8[8];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::object::MachOUniversalBinary::getObjectForArch(a1, a2, a3, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v7 = v8[0];
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v7;
  }
  else
  {
    llvm::object::MachOUniversalBinary::ObjectForArch::getAsIRObject((llvm::object::MachOUniversalBinary::ObjectForArch *)v8, a4, a5);
  }
}

void llvm::object::MachOUniversalBinary::getArchiveForArch(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  _QWORD v6[8];
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  llvm::object::MachOUniversalBinary::getObjectForArch(a1, a2, a3, (uint64_t)v6);
  if ((v7 & 1) != 0)
  {
    v5 = v6[0];
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v5;
  }
  else
  {
    llvm::object::MachOUniversalBinary::ObjectForArch::getAsArchive((llvm::object::MachOUniversalBinary::ObjectForArch *)v6, a4);
  }
}

void llvm::object::MachOUniversalBinary::getMetalLibForArch(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  _QWORD v6[8];
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  llvm::object::MachOUniversalBinary::getObjectForArch(a1, a2, a3, (uint64_t)v6);
  if ((v7 & 1) != 0)
  {
    v5 = v6[0];
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v5;
  }
  else
  {
    llvm::object::MachOUniversalBinary::ObjectForArch::getAsMetalLib((llvm::object::MachOUniversalBinary::ObjectForArch *)v6, a4);
  }
}

void sub_1C62D92D0(llvm::object::Binary *a1)
{
  llvm::object::Binary::~Binary(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::object::MetalLibObjectFile::parseFileMagic(uint64_t a1, unint64_t *a2, unint64_t a3, _QWORD *a4)
{
  _DWORD *v5;
  unint64_t v6;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;

  v5 = (_DWORD *)*a2;
  v6 = *a2 + 4;
  if (v6 <= a3)
  {
    *a2 = v6;
    *(_QWORD *)(a1 + 48) = v5;
    *(_QWORD *)(a1 + 56) = 4;
    if (*v5 == 1112298573)
      return 1;
    v8 = 3;
    sub_1C5A026C4(&v9, &v8);
  }
  else
  {
    v8 = 3;
    sub_1C5A02860(&v9, &v8);
  }
  result = 0;
  *a4 = v9;
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::parseFileType(uint64_t a1, unint64_t *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  unint64_t v6;
  int v7;
  const char *v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v12;
  int v13;
  __int16 v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  _QWORD v19[3];
  uint64_t v20;

  v5 = *(unsigned __int16 *)(a1 + 68);
  v19[0] = (*(unsigned __int16 *)(a1 + 64) >> 1) | ((unint64_t)*(unsigned __int16 *)(a1 + 66) << 32) | 0x8000000000000000;
  v19[1] = v5 | 0x80000000;
  v6 = *a2 + 1;
  if (v6 > a3)
  {
    v16 = 0x8000000200000001;
    v17 = 2147483652;
    v7 = sub_1C4F7A4D8(v19, &v16);
    v8 = "missing file type";
    if (v7)
      v8 = "missing reserved bytes";
    v18 = v8;
    v15 = 3;
    sub_1C5A02AB8(&v20, (_BYTE **)&v18, &v15);
    result = 0;
    v10 = v20;
    goto LABEL_5;
  }
  v12 = *(unsigned __int8 *)*a2;
  *a2 = v6;
  *(_BYTE *)(a1 + 70) = (v12 >> 7) | (2 * v12);
  v16 = 0x8000000200000001;
  v17 = 2147483652;
  v13 = sub_1C4F7A4D8(v19, &v16);
  v14 = *(_WORD *)(a1 + 70);
  if (!v13)
  {
    if ((v14 & 0xF8) != 0)
    {
      LODWORD(v20) = 3;
      sub_1C5A02B90(&v16, (unsigned int *)&v20);
      goto LABEL_13;
    }
    v16 = 0x8000000200000001;
    v17 = 2147483654;
    if (!sub_1C4F7A4D8(v19, &v16) || (*(_WORD *)(a1 + 70) & 1) == 0)
      return 1;
LABEL_10:
    LODWORD(v20) = 3;
    sub_1C5A025FC(&v16, (unsigned int *)&v20);
LABEL_13:
    result = 0;
    v10 = v16;
LABEL_5:
    *a4 = v10;
    return result;
  }
  result = 1;
  if ((v14 & 1) != 0 && (v14 & 0xFE) != 0)
    goto LABEL_10;
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::parseTriple(uint64_t a1, unint64_t *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  unint64_t v6;
  int v7;
  const char *v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  const char *v20;
  char *v21;
  __int16 v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  _QWORD v31[3];
  uint64_t v32;

  v5 = *(unsigned __int16 *)(a1 + 68);
  v31[0] = (*(unsigned __int16 *)(a1 + 64) >> 1) | ((unint64_t)*(unsigned __int16 *)(a1 + 66) << 32) | 0x8000000000000000;
  v31[1] = v5 | 0x80000000;
  v6 = *a2 + 1;
  if (v6 > a3)
  {
    v28 = 0x8000000200000001;
    v29 = 2147483654;
    v7 = sub_1C4F7A4D8(v31, &v28);
    v8 = "missing triple arch/platform";
LABEL_3:
    if (v7)
      v8 = "missing reserved bytes";
    v30 = v8;
    v27 = 3;
    sub_1C5A02AB8(&v32, (_BYTE **)&v30, &v27);
LABEL_6:
    result = 0;
    v10 = v32;
LABEL_7:
    *a4 = v10;
    return result;
  }
  v14 = *(unsigned __int8 *)*a2;
  *a2 = v6;
  *(_WORD *)(a1 + 70) = *(unsigned __int8 *)(a1 + 70) | (((v14 >> 7) & 1) << 8) | ((_WORD)v14 << 9);
  v28 = 0x8000000200000001;
  v29 = 2147483654;
  v15 = sub_1C4F7A4D8(v31, &v28);
  v16 = *(unsigned __int16 *)(a1 + 70);
  if (v15)
  {
    if (v16 >= 0x200 && (v16 & 0x100) != 0)
      goto LABEL_11;
  }
  else
  {
    v17 = v16 >> 9;
    if (v17 > 0xC || ((1 << v17) & 0x1BDE) == 0)
    {
      LODWORD(v32) = 3;
      sub_1C5A02C58(&v28, (unsigned int *)&v32);
      goto LABEL_12;
    }
  }
  v18 = *a2 + 2;
  if (v18 > a3)
  {
    v28 = 0x8000000200000001;
    v29 = 2147483654;
    v19 = sub_1C4F7A4D8(v31, &v28);
    v20 = "missing platform major";
LABEL_17:
    if (v19)
      v21 = "missing reserved bytes";
    else
      v21 = (char *)v20;
    LODWORD(v30) = 3;
    sub_1C5A0278C(&v32, v21, (unsigned int *)&v30);
    goto LABEL_6;
  }
  v22 = *(_WORD *)*a2;
  *a2 = v18;
  *(_WORD *)(a1 + 72) = v22;
  v28 = 0x8000000200000001;
  v29 = 2147483654;
  if (sub_1C4F7A4D8(v31, &v28) && *(_WORD *)(a1 + 72))
  {
LABEL_11:
    LODWORD(v32) = 3;
    sub_1C5A025FC(&v28, (unsigned int *)&v32);
LABEL_12:
    result = 0;
    v10 = v28;
    goto LABEL_7;
  }
  v23 = *a2 + 1;
  if (v23 > a3)
  {
    v28 = 0x8000000200000001;
    v29 = 2147483654;
    v19 = sub_1C4F7A4D8(v31, &v28);
    v20 = "missing platform minor";
    goto LABEL_17;
  }
  v24 = *(_BYTE *)*a2;
  *a2 = v23;
  *(_BYTE *)(a1 + 74) = v24;
  v28 = 0x8000000200000001;
  v29 = 2147483654;
  if (sub_1C4F7A4D8(v31, &v28) && *(_BYTE *)(a1 + 74))
    goto LABEL_11;
  v25 = *a2 + 1;
  if (v25 > a3)
  {
    v28 = 0x8000000200000001;
    v29 = 2147483654;
    v7 = sub_1C4F7A4D8(v31, &v28);
    v8 = "missing platform update";
    goto LABEL_3;
  }
  v26 = *(_BYTE *)*a2;
  *a2 = v25;
  *(_BYTE *)(a1 + 75) = v26;
  v28 = 0x8000000200000001;
  v29 = 2147483654;
  if (sub_1C4F7A4D8(v31, &v28))
  {
    if (*(_BYTE *)(a1 + 74))
      goto LABEL_11;
  }
  return 1;
}

uint64_t llvm::object::MetalLibObjectFile::parseFunctionListInfo(uint64_t a1, uint64_t **a2, unint64_t a3, _QWORD *a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v5 = *a2;
  v6 = *a2 + 1;
  if ((unint64_t)v6 <= a3)
  {
    v9 = *v5;
    v8 = v5 + 2;
    *a2 = v6;
    *(_QWORD *)(a1 + 88) = v9;
    if ((unint64_t)v8 <= a3)
    {
      v10 = *v6;
      *a2 = v8;
      *(_QWORD *)(a1 + 96) = v10 + 4;
      return 1;
    }
    v11 = 3;
    sub_1C5A0278C(&v12, "missing function list size", &v11);
  }
  else
  {
    v11 = 3;
    sub_1C5A0278C(&v12, "missing function list offset", &v11);
  }
  result = 0;
  *a4 = v12;
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::parsePublicMetadataInfo(uint64_t a1, uint64_t **a2, unint64_t a3, _QWORD *a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v5 = *a2;
  v6 = *a2 + 1;
  if ((unint64_t)v6 <= a3)
  {
    v9 = *v5;
    v8 = v5 + 2;
    *a2 = v6;
    *(_QWORD *)(a1 + 104) = v9;
    if ((unint64_t)v8 <= a3)
    {
      v10 = *v6;
      *a2 = v8;
      *(_QWORD *)(a1 + 112) = v10;
      return 1;
    }
    v11 = 3;
    sub_1C5A0278C(&v12, "missing public metadata size", &v11);
  }
  else
  {
    v11 = 3;
    sub_1C5A029F0(&v12, &v11);
  }
  result = 0;
  *a4 = v12;
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::parsePrivateMetadataInfo(uint64_t a1, uint64_t **a2, unint64_t a3, _QWORD *a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v5 = *a2;
  v6 = *a2 + 1;
  if ((unint64_t)v6 <= a3)
  {
    v9 = *v5;
    v8 = v5 + 2;
    *a2 = v6;
    *(_QWORD *)(a1 + 120) = v9;
    if ((unint64_t)v8 <= a3)
    {
      v10 = *v6;
      *a2 = v8;
      *(_QWORD *)(a1 + 128) = v10;
      return 1;
    }
    v11 = 3;
    sub_1C5A02DE8(&v12, &v11);
  }
  else
  {
    v11 = 3;
    sub_1C5A02D20(&v12, &v11);
  }
  result = 0;
  *a4 = v12;
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::parseModuleListInfo(uint64_t a1, uint64_t **a2, unint64_t a3, _QWORD *a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v5 = *a2;
  v6 = *a2 + 1;
  if ((unint64_t)v6 <= a3)
  {
    v9 = *v5;
    v8 = v5 + 2;
    *a2 = v6;
    *(_QWORD *)(a1 + 136) = v9;
    if ((unint64_t)v8 <= a3)
    {
      v10 = *v6;
      *a2 = v8;
      *(_QWORD *)(a1 + 144) = v10;
      return 1;
    }
    v11 = 3;
    sub_1C5A02928(&v12, &v11);
  }
  else
  {
    v11 = 3;
    sub_1C5A0278C(&v12, "missing module list offset", &v11);
  }
  result = 0;
  *a4 = v12;
  return result;
}

char *llvm::object::MetalLibObjectFile::moveSymbolNext(char *this, unsigned int *a2)
{
  unsigned int v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v3 = a2[1];
  if (v3)
  {
    if (v3 == 1)
    {
      v4 = this;
      v5 = *a2 + 1;
      *a2 = v5;
      v6 = *((_QWORD *)this + 35);
      v7 = *((_QWORD *)this + 36) - v6;
      v8 = *((_QWORD *)this + 75);
      if (((*((_QWORD *)this + 76) - v8) >> 3) + (v7 >> 3) != v5)
      {
        v9 = v7 >> 3;
        do
        {
          v10 = v5 >= v9;
          v11 = v5 - v9;
          if (v10)
          {
            if (*(_QWORD *)(v8 + 8 * v11))
              return this;
            this = (char *)llvm::object::MetalLibObjectFile::materializeVariableNo((llvm::object::MetalLibObjectFile *)v4, v5 - ((unint64_t)v7 >> 3), (uint64_t *)&v14);
            v13 = v14;
            if (!v14)
              return this;
          }
          else
          {
            v12 = *(_QWORD *)(v6 + 8 * v5);
            if (v12)
              goto LABEL_7;
            this = (char *)llvm::object::MetalLibObjectFile::materializeFunctionNo((llvm::object::MetalLibObjectFile *)v4, v5, (uint64_t *)&v14);
            v13 = v14;
            if (!v14)
            {
              v12 = *(_QWORD *)(*((_QWORD *)v4 + 35) + 8 * *a2);
LABEL_7:
              if (*(_BYTE *)(v12 + 24) == 3)
                return this;
              goto LABEL_13;
            }
          }
          v15 = v13;
          sub_1C4D62BD4(&v15, &v16);
          this = v15;
          if (v15)
            this = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v15 + 8))(v15);
LABEL_13:
          v5 = *a2 + 1;
          *a2 = v5;
          v6 = *((_QWORD *)v4 + 35);
          v7 = *((_QWORD *)v4 + 36) - v6;
          v9 = v7 >> 3;
          v8 = *((_QWORD *)v4 + 75);
        }
        while (((*((_QWORD *)v4 + 76) - v8) >> 3) + (v7 >> 3) != v5);
      }
    }
  }
  else
  {
    ++*a2;
  }
  return this;
}

_QWORD *llvm::object::MetalLibObjectFile::getSymbolFlags@<X0>(_QWORD *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = result[36] - result[35];
  if (a2 >= (unint64_t)(((uint64_t)(result[76] - result[75]) >> 3) + (v3 >> 3)))
    v4 = 1;
  else
    v4 = 66;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v4 | ((a2 < (unint64_t)(v3 >> 3)) << 11);
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::symbol_begin(llvm::object::MetalLibObjectFile *this)
{
  return 0;
}

uint64_t llvm::object::MetalLibObjectFile::symbol_end(llvm::object::MetalLibObjectFile *this)
{
  return ((*((_QWORD *)this + 76) - *((_QWORD *)this + 75)) >> 3)
       + ((*((_QWORD *)this + 36) - *((_QWORD *)this + 35)) >> 3)
       + ((*((_QWORD *)this + 79) - *((_QWORD *)this + 78)) >> 3);
}

_QWORD *llvm::object::MetalLibObjectFile::getSymbolType@<X0>(_QWORD *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  _BOOL4 v5;

  v3 = result[36] - result[35];
  if (a2 >= (unint64_t)(v3 >> 3))
  {
    v5 = a2 < (unint64_t)((v3 >> 3) + ((uint64_t)(result[76] - result[75]) >> 3));
    *(_BYTE *)(a3 + 8) &= ~1u;
    v4 = 2 * v5;
  }
  else
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    v4 = 5;
  }
  *(_DWORD *)a3 = v4;
  return result;
}

_QWORD *llvm::object::MetalLibObjectFile::getSymbolSection@<X0>(_QWORD *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = result[36] - result[35];
  if (a2 >= (unint64_t)(v3 >> 3))
  {
    v5 = (v3 >> 3) + ((uint64_t)(result[76] - result[75]) >> 3);
    if (a2 >= v5)
    {
      v4 = 11;
      if (a2 < v5 + ((uint64_t)(result[79] - result[78]) >> 3))
        v4 = 8;
    }
    else
    {
      v4 = 7;
    }
  }
  else
  {
    v4 = 0;
  }
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = result;
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::dynamic_symbol_end(llvm::object::MetalLibObjectFile *this)
{
  return (((*((_QWORD *)this + 76) - *((_QWORD *)this + 75)) >> 3)
        + ((*((_QWORD *)this + 36) - *((_QWORD *)this + 35)) >> 3)) | 0x100000000;
}

uint64_t llvm::object::MetalLibObjectFile::moveSectionNext(uint64_t a1, unsigned int *a2)
{
  return ((uint64_t (*)(void))((char *)sub_1C62D9D24 + 4 * byte_1C86679CC[*a2]))();
}

_QWORD *sub_1C62D9D24(_QWORD *result, _DWORD *a2)
{
  *a2 = 1;
  if (!result[14])
  {
    *a2 = 2;
    if (!result[16])
    {
      *a2 = 3;
      if (!result[18])
      {
        *a2 = 4;
        if (!result[20])
        {
          *a2 = 5;
          if (!result[22])
          {
            *a2 = 6;
            if (!result[24])
            {
              *a2 = 7;
              if (!result[26])
              {
                *a2 = 8;
                if (!result[28])
                {
                  *a2 = 9;
                  if (!result[30])
                  {
                    *a2 = 10;
                    if (!result[32])
                      *a2 = 11;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *llvm::object::MetalLibObjectFile::getSectionName@<X0>(std::error_code a1@<X2:X1>, uint64_t a2@<X8>)
{
  const char *v3;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  switch(a1.__val_)
  {
    case 0:
      *(_BYTE *)(a2 + 16) &= ~1u;
      v3 = "FUNCTION_LIST";
      goto LABEL_14;
    case 1:
      *(_BYTE *)(a2 + 16) &= ~1u;
      v3 = "PUBLIC_METADATA";
      goto LABEL_17;
    case 2:
      *(_BYTE *)(a2 + 16) &= ~1u;
      v3 = "PRIVATE_METADATA";
      v6 = 16;
      goto LABEL_20;
    case 3:
      *(_BYTE *)(a2 + 16) &= ~1u;
      v3 = "MODULE_LIST";
      goto LABEL_19;
    case 4:
      *(_BYTE *)(a2 + 16) &= ~1u;
      v3 = "SOURCES";
      goto LABEL_11;
    case 5:
      *(_BYTE *)(a2 + 16) &= ~1u;
      v3 = "PACKING";
LABEL_11:
      v6 = 7;
      goto LABEL_20;
    case 6:
      *(_BYTE *)(a2 + 16) &= ~1u;
      v3 = "DYNAMIC_HEADER";
      v6 = 14;
      goto LABEL_20;
    case 7:
      *(_BYTE *)(a2 + 16) &= ~1u;
      v3 = "VARIABLE_LIST";
LABEL_14:
      v6 = 13;
      goto LABEL_20;
    case 8:
      *(_BYTE *)(a2 + 16) &= ~1u;
      v3 = "IMPORTED_SYMBOL_LIST";
      v6 = 20;
      goto LABEL_20;
    case 9:
      *(_BYTE *)(a2 + 16) &= ~1u;
      v3 = "REFLECTION_LIST";
LABEL_17:
      v6 = 15;
      goto LABEL_20;
    case 0xA:
      *(_BYTE *)(a2 + 16) &= ~1u;
      v3 = "SCRIPT_LIST";
LABEL_19:
      v6 = 11;
LABEL_20:
      *(_QWORD *)a2 = v3;
      *(_QWORD *)(a2 + 8) = v6;
      break;
    default:
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      *(_QWORD *)&a1.__val_ = qword_1EF8F7238[0];
      result = llvm::errorCodeToError((llvm *)6, a1, &v7);
      *(_BYTE *)(a2 + 16) |= 1u;
      *(_QWORD *)a2 = v7;
      break;
  }
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::getSectionAddress(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_1C62D9FB8 + 4 * byte_1C86679E2[a2]))();
}

uint64_t sub_1C62D9FB8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

uint64_t llvm::object::MetalLibObjectFile::getSectionIndex(uint64_t a1, unsigned int a2)
{
  return a2;
}

uint64_t llvm::object::MetalLibObjectFile::getSectionSize(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_1C62DA038 + 4 * byte_1C86679ED[a2]))();
}

uint64_t sub_1C62DA038(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

uint64_t llvm::object::MetalLibObjectFile::isSectionCompressed()
{
  return 0;
}

BOOL llvm::object::MetalLibObjectFile::isSectionText(uint64_t a1, int a2)
{
  return a2 == 3;
}

uint64_t llvm::object::MetalLibObjectFile::isSectionData()
{
  return 0;
}

uint64_t llvm::object::MetalLibObjectFile::isSectionBSS()
{
  return 0;
}

uint64_t llvm::object::MetalLibObjectFile::isSectionVirtual()
{
  return 0;
}

uint64_t llvm::object::MetalLibObjectFile::section_begin(llvm::object::MetalLibObjectFile *this)
{
  return 0;
}

uint64_t llvm::object::MetalLibObjectFile::section_end(llvm::object::MetalLibObjectFile *this)
{
  return 11;
}

uint64_t llvm::object::MetalLibObjectFile::getBytesInAddress(llvm::object::MetalLibObjectFile *this)
{
  if ((*(unsigned int (**)(llvm::object::MetalLibObjectFile *))(*(_QWORD *)this + 376))(this) == 48)
    return 4;
  else
    return 8;
}

const char *llvm::object::MetalLibObjectFile::getFileFormatName(llvm::object::MetalLibObjectFile *this)
{
  return "MetalLib";
}

uint64_t llvm::object::MetalLibObjectFile::isRelocatableObject(llvm::object::MetalLibObjectFile *this)
{
  return 0;
}

void sub_1C62DA140(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 8 * a2;
      while (v3 != (_QWORD *)v5)
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
          sub_1C5A032A0(v6);
      }
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    sub_1C5A02EB0((char **)a1, a2 - v4);
  }
}

uint64_t llvm::object::MetalLibObjectFile::parseExtensionInfo(uint64_t a1, unint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unsigned __int16 *v9;
  unint64_t v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t result;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  _BYTE v28[40];

  v9 = (unsigned __int16 *)*a2;
  v10 = *a2 + 2;
  if (v10 > a3)
  {
    v27 = 1283;
    v11 = "missing ";
LABEL_3:
    v24 = v11;
    v25 = a4;
    v26 = a5;
    v12 = " token data size";
    goto LABEL_4;
  }
  v17 = *v9;
  *a2 = v10;
  if (v17 != 16)
  {
    v27 = 1283;
    v11 = "bad ";
    goto LABEL_3;
  }
  v18 = (uint64_t *)(v9 + 5);
  if ((unint64_t)(v9 + 5) <= a3)
  {
    v19 = *(_QWORD *)(v9 + 1);
    *a2 = (unint64_t)v18;
    *a6 = v19;
    v20 = v9 + 9;
    if ((unint64_t)v20 <= a3)
    {
      v21 = *v18;
      *a2 = (unint64_t)v20;
      *a7 = v21;
      return 1;
    }
    v27 = 1283;
    v24 = "missing ";
    v25 = a4;
    v26 = a5;
    v12 = " section size";
  }
  else
  {
    v27 = 1283;
    v24 = "missing ";
    v25 = a4;
    v26 = a5;
    v12 = " section offset";
  }
LABEL_4:
  v22 = v12;
  v23 = 259;
  sub_1C4825FE4((uint64_t *)&v24, (uint64_t *)&v22, (uint64_t)v28);
  v13 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v15 = qword_1EF8F7238[0];
  *(_QWORD *)v13 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v28, (_QWORD *)(v13 + 8));
  result = 0;
  *(_QWORD *)(v13 + 32) = 3;
  *(_QWORD *)(v13 + 40) = v15;
  *(_BYTE *)(v13 + 48) = 1;
  *a8 = v13;
  return result;
}

void sub_1C62DA360(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 8 * a2;
      while (v3 != (_QWORD *)v5)
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
          MEMORY[0x1CAA32FC0](v6, 0x1050C40B09E53CALL);
      }
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    sub_1C5A03000((char **)a1, a2 - v4);
  }
}

void sub_1C62DA3EC(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 8 * a2;
      while (v3 != (_QWORD *)v5)
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
          MEMORY[0x1CAA32FC0](v6, 0x1050C40A5B97131);
      }
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    sub_1C5A03150((char **)a1, a2 - v4);
  }
}

uint64_t llvm::object::ObjectFile::createMetalLibObjectFile@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  __int128 v11[2];

  v10 = 0;
  v4 = operator new();
  v5 = a1[1];
  v11[0] = *a1;
  v11[1] = v5;
  result = llvm::object::MetalLibObjectFile::MetalLibObjectFile(v4, v11, &v10);
  v7 = v10;
  v8 = *(_BYTE *)(a2 + 8);
  if (v10)
  {
    v9 = v8 | 1;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    result = v7;
  }
  else
  {
    v9 = v8 & 0xFE;
  }
  *(_BYTE *)(a2 + 8) = v9;
  *(_QWORD *)a2 = result;
  return result;
}

uint64_t sub_1C62DA508(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v6;
  __int128 v7;

  if (*(_BYTE *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      sub_1C6184574(a1, (__n128 *)a2);
      v7 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v7;
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v4 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v4;
      *(_BYTE *)(a1 + 48) = 1;
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    v6 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v6;
      operator delete(v6);
    }
    *(_BYTE *)(a1 + 48) = 0;
  }
  return a1;
}

uint64_t sub_1C62DA5B0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      sub_1C5A032A0(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1C62DA608(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      MEMORY[0x1CAA32FC0](v4, 0x1050C40B09E53CALL);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1C62DA670(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      MEMORY[0x1CAA32FC0](v4, 0x1050C40A5B97131);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

double sub_1C62DA6D8(uint64_t a1)
{
  void *v2;
  double result;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v2;
      operator delete(v2);
    }
  }
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

_QWORD *sub_1C62DA720(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

_QWORD *sub_1C62DA780(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int64x2_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  int64x2_t v24;
  char *v25;
  uint64_t v26;

  v3 = result;
  v4 = (char *)result[2];
  if (v4 == (char *)result[3])
  {
    v7 = (char *)*result;
    v6 = (char *)result[1];
    if ((unint64_t)v6 <= *result)
    {
      if (v4 == v7)
        v13 = 1;
      else
        v13 = (v4 - v7) >> 2;
      v26 = result[4];
      if (v13 >> 61)
        sub_1C4764EE4();
      v14 = (char *)operator new(8 * v13);
      v15 = &v14[8 * (v13 >> 2)];
      v16 = v4 - v6;
      if (v4 == v6)
      {
        v17 = vdupq_n_s64((unint64_t)v4);
        v18 = &v14[8 * (v13 >> 2)];
      }
      else
      {
        v19 = v16 >> 3;
        v18 = &v15[v16 & 0xFFFFFFFFFFFFFFF8];
        v20 = 8 * v19;
        v21 = &v14[8 * (v13 >> 2)];
        do
        {
          v22 = *(_QWORD *)v6;
          *(_QWORD *)v6 = 0;
          v6 += 8;
          *(_QWORD *)v21 = v22;
          v21 += 8;
          v20 -= 8;
        }
        while (v20);
        v7 = (char *)*v3;
        v17 = *(int64x2_t *)(v3 + 1);
        v4 = (char *)v3[3];
      }
      v23 = v7;
      *v3 = v14;
      v3[1] = v15;
      v24 = v17;
      v3[2] = v18;
      v3[3] = &v14[8 * v13];
      v25 = v4;
      result = (_QWORD *)sub_1C62DA8FC((uint64_t)&v23);
      v4 = (char *)v3[2];
    }
    else
    {
      v8 = (uint64_t)&v6[-*result] >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = -(v9 >> 1);
      if (v6 == v4)
      {
        v12 = &v6[-8 * (v9 >> 1)];
      }
      else
      {
        do
        {
          v11 = *(_QWORD *)v6;
          *(_QWORD *)v6 = 0;
          result = *(_QWORD **)&v6[8 * v10];
          *(_QWORD *)&v6[8 * v10] = v11;
          if (result)
            result = (_QWORD *)MEMORY[0x1CAA32FC0](result, 0x1050C4015692547);
          v6 += 8;
        }
        while (v6 != v4);
        v4 = (char *)v3[1];
        v12 = &v6[8 * v10];
      }
      v3[1] = &v4[8 * v10];
      v3[2] = v12;
      v4 = v12;
    }
  }
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)v4 = v5;
  v3[2] += 8;
  return result;
}

uint64_t sub_1C62DA8FC(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      MEMORY[0x1CAA32FC0](v4, 0x1050C4015692547);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1C62DA964(uint64_t a1, _DWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;

  v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    v6 = *(char **)a1;
    v5 = *(char **)(a1 + 8);
    if ((unint64_t)v5 <= *(_QWORD *)a1)
    {
      if (v4 == v6)
        v14 = 1;
      else
        v14 = (v4 - v6) >> 1;
      if (v14 >> 62)
        sub_1C4764EE4();
      v15 = (char *)operator new(4 * v14);
      v16 = &v15[v14 & 0xFFFFFFFFFFFFFFFCLL];
      v18 = v4 - v5;
      v17 = v4 == v5;
      v4 = v16;
      if (!v17)
      {
        v4 = &v16[v18 & 0xFFFFFFFFFFFFFFFCLL];
        v19 = 4 * (v18 >> 2);
        v20 = &v15[v14 & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
          v21 = *(_DWORD *)v5;
          v5 += 4;
          *(_DWORD *)v20 = v21;
          v20 += 4;
          v19 -= 4;
        }
        while (v19);
      }
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = &v15[4 * v14];
      if (v6)
      {
        operator delete(v6);
        v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      v7 = (uint64_t)&v5[-*(_QWORD *)a1] >> 2;
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = -(v8 >> 1);
      v10 = v8 >> 1;
      v11 = &v5[-4 * v10];
      v12 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-4 * v10], *(const void **)(a1 + 8), v4 - v5);
        v4 = *(char **)(a1 + 8);
      }
      v13 = &v4[4 * v9];
      v4 = &v11[v12];
      *(_QWORD *)(a1 + 8) = v13;
    }
  }
  *(_DWORD *)v4 = *a2;
  *(_QWORD *)(a1 + 16) = v4 + 4;
}

uint64_t sub_1C62DAA80(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      MEMORY[0x1CAA32FC0](v4, 0x1050C40717B85FCLL);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1C62DAAEC(llvm::object::Binary *a1)
{
  sub_1C62DAB10(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C62DAB10(llvm::object::Binary *a1)
{
  *(_QWORD *)a1 = &off_1E818A1A0;
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 9), 8);
  llvm::object::Binary::~Binary(a1);
}

void llvm::ModuleSymbolTable::CollectAsmSymbols(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  v3 = v4;
  sub_1C5A04E30(a1, (void (*)(uint64_t, std::string *))sub_1C5A05920, (uint64_t)&v3);
}

void llvm::ModuleSymbolTable::CollectAsmSymvers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  v3 = v4;
  sub_1C5A04E30(a1, (void (*)(uint64_t, std::string *))sub_1C5A059DC, (uint64_t)&v3);
}

void sub_1C62DABB0(unsigned int *a1)
{
  *(_QWORD *)a1 = off_1E818A3C8;
  sub_1C62B4424(a1 + 78);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 39), 8);
  sub_1C61A8A20((uint64_t)(a1 + 70));
  llvm::MCStreamer::~MCStreamer((llvm::MCStreamer *)a1);
}

uint64_t sub_1C62DABFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 40))(&v8);
  if ((v9 & 1) != 0)
  {
    v7 = v8;
    v8 = 0;
    llvm::report_fatal_error(&v7);
  }
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2);
  if ((v9 & 1) != 0)
  {
    v5 = v8;
    v8 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v4;
}

_QWORD *llvm::object::ObjectFile::getSymbolValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 40))(&v9);
  v7 = v9;
  if ((v10 & 1) != 0 && (v7 = 0, (v8 = v9) != 0))
  {
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v8;
  }
  else if ((v7 & 1) != 0)
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = 0;
  }
  else
  {
    if ((v7 & 0x10) != 0)
      result = (_QWORD *)sub_1C62DABFC(a1, a2);
    else
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = result;
  }
  return result;
}

_QWORD *llvm::object::ObjectFile::printSymbolName@<X0>(uint64_t a1@<X0>, llvm::raw_ostream *a2@<X1>, uint64_t a3@<X2>, const char **a4@<X8>)
{
  _QWORD *result;
  size_t v7;
  const char *v8;
  const char *v9;
  size_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  result = (*(_QWORD *(**)(const char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(&v9, a1, a3);
  if ((v11 & 1) != 0)
  {
    v8 = v9;
    v9 = 0;
  }
  else
  {
    v7 = v10;
    result = (_QWORD *)*((_QWORD *)a2 + 4);
    if (v10 > *((_QWORD *)a2 + 3) - (_QWORD)result)
    {
      result = llvm::raw_ostream::write(a2, v9, v10);
LABEL_4:
      v8 = 0;
      goto LABEL_6;
    }
    if (!v10)
      goto LABEL_4;
    result = memcpy(result, v9, v10);
    v8 = 0;
    *((_QWORD *)a2 + 4) += v7;
  }
LABEL_6:
  *a4 = v8;
  if ((v11 & 1) != 0)
  {
    result = v9;
    v9 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

uint64_t llvm::object::ObjectFile::getSymbolAlignment()
{
  return 0;
}

uint64_t llvm::object::ObjectFile::isSectionBitcode(uint64_t a1)
{
  uint64_t result;
  char *v3;
  char *v4;
  char *v5;
  _QWORD v6[2];
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 136))(v6);
  if ((v7 & 1) != 0)
  {
    v3 = (char *)v6[0];
    v6[0] = 0;
    v4 = v3;
    sub_1C4D62BD4(&v4, &v5);
    if (v4)
      (*(void (**)(char *))(*(_QWORD *)v4 + 8))(v4);
    if ((v7 & 1) != 0)
    {
      result = v6[0];
      v6[0] = 0;
      if (!result)
        return result;
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return 0;
  }
  if (v6[1] != 7)
    return 0;
  return *(_DWORD *)v6[0] == 1986817070 && *(_DWORD *)(v6[0] + 3) == 1667394934;
}

uint64_t llvm::object::ObjectFile::isSectionStripped()
{
  return 0;
}

uint64_t llvm::object::ObjectFile::isBerkeleyText(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
}

uint64_t llvm::object::ObjectFile::isBerkeleyData(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
}

uint64_t llvm::object::ObjectFile::isDebugSection()
{
  return 0;
}

uint64_t llvm::object::ObjectFile::getRelocatedSection@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result;
  return result;
}

size_t **sub_1C62DAFD0(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6;
  size_t **i;
  size_t *v8;
  size_t *v9;
  _QWORD *buffer;
  size_t *v11;
  char *v12;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  i = (size_t **)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == (size_t *)-8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == (size_t *)-8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  buffer = llvm::allocate_buffer(a3 + 25, (std::align_val_t)8uLL);
  v11 = buffer;
  v12 = (char *)(buffer + 3);
  if (a3)
    memcpy(buffer + 3, a2, a3);
  v12[a3] = 0;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = a3;
  *i = v11;
  ++*(_DWORD *)(a1 + 12);
  for (i = (size_t **)(*(_QWORD *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i + 1 == 0;
  return i;
}

uint64_t *llvm::RecordStreamer::markDefined(llvm::RecordStreamer *this, const llvm::MCSymbol *a2)
{
  char *v2;
  unsigned __int8 *v3;
  size_t v4;
  _QWORD *v5;
  size_t v6;
  uint64_t *result;
  uint64_t v8;

  v2 = (char *)this + 280;
  if ((*(_BYTE *)a2 & 4) != 0)
  {
    v5 = (_QWORD *)*((_QWORD *)a2 - 1);
    v6 = *v5;
    v3 = (unsigned __int8 *)(v5 + 2);
    v4 = v6;
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = sub_1C62DB480((uint64_t)v2, v3, v4);
  v8 = *(int *)(*result + 8);
  if (v8 <= 6 && ((0x6Fu >> v8) & 1) != 0)
    *(_DWORD *)(*result + 8) = dword_1C8667B28[v8];
  return result;
}

uint64_t *llvm::RecordStreamer::markGlobal(uint64_t a1, _BYTE *a2, int a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  size_t v6;
  _QWORD *v7;
  size_t v8;
  uint64_t *result;
  unsigned int v10;
  int v11;
  int v12;

  v4 = a1 + 280;
  if ((*a2 & 4) != 0)
  {
    v7 = (_QWORD *)*((_QWORD *)a2 - 1);
    v8 = *v7;
    v5 = (unsigned __int8 *)(v7 + 2);
    v6 = v8;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = sub_1C62DB480(v4, v5, v6);
  v10 = *(_DWORD *)(*result + 8);
  if (v10 <= 5)
  {
    v11 = 1 << v10;
    if ((v11 & 0x23) != 0)
    {
      if (a3 == 23)
        v12 = 6;
      else
        v12 = 1;
LABEL_9:
      *(_DWORD *)(*result + 8) = v12;
      return result;
    }
    if ((v11 & 0xC) != 0)
    {
      if (a3 == 23)
        v12 = 4;
      else
        v12 = 3;
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t *llvm::RecordStreamer::markUsed(llvm::RecordStreamer *this, const llvm::MCSymbol *a2)
{
  char *v2;
  unsigned __int8 *v3;
  size_t v4;
  _QWORD *v5;
  size_t v6;
  uint64_t *result;
  int v8;

  v2 = (char *)this + 280;
  if ((*(_BYTE *)a2 & 4) != 0)
  {
    v5 = (_QWORD *)*((_QWORD *)a2 - 1);
    v6 = *v5;
    v3 = (unsigned __int8 *)(v5 + 2);
    v4 = v6;
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = sub_1C62DB480((uint64_t)v2, v3, v4);
  v8 = *(_DWORD *)(*result + 8);
  if (v8 == 5 || v8 == 0)
    *(_DWORD *)(*result + 8) = 5;
  return result;
}

_QWORD *llvm::RecordStreamer::begin(llvm::RecordStreamer *this)
{
  _QWORD *result;

  result = (_QWORD *)*((_QWORD *)this + 35);
  if (*((_DWORD *)this + 72))
  {
    while (!*result || *result == -8)
      ++result;
  }
  return result;
}

uint64_t llvm::RecordStreamer::end(llvm::RecordStreamer *this)
{
  return *((_QWORD *)this + 35) + 8 * *((unsigned int *)this + 72);
}

uint64_t *llvm::RecordStreamer::emitLabel(llvm::RecordStreamer *a1, const llvm::MCSymbol *a2)
{
  llvm::MCStreamer::emitLabel((uint64_t)a1, (uint64_t)a2, 0);
  return llvm::RecordStreamer::markDefined(a1, a2);
}

uint64_t llvm::RecordStreamer::emitAssignment(llvm::RecordStreamer *this, llvm::MCSymbol *a2, const llvm::MCExpr **a3)
{
  llvm::RecordStreamer::markDefined(this, a2);
  return llvm::MCStreamer::emitAssignment(this, a2, a3);
}

uint64_t llvm::RecordStreamer::emitSymbolAttribute(llvm::RecordStreamer *this, llvm::MCSymbol *a2, int a3)
{
  switch(a3)
  {
    case 23:
      goto LABEL_5;
    case 15:
      goto LABEL_6;
    case 9:
LABEL_5:
      llvm::RecordStreamer::markGlobal((uint64_t)this, a2, a3);
      if (a3 != 15)
        return 1;
LABEL_6:
      llvm::RecordStreamer::markUsed(this, a2);
      break;
  }
  return 1;
}

uint64_t *llvm::RecordStreamer::emitZerofill(llvm::RecordStreamer *a1, int a2, llvm::MCSymbol *a3)
{
  return llvm::RecordStreamer::markDefined(a1, a3);
}

uint64_t llvm::RecordStreamer::getSymbolState(llvm::RecordStreamer *this, const llvm::MCSymbol *a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  size_t v5;
  _QWORD *v6;
  size_t v7;
  int Key;

  v3 = (_QWORD *)((char *)this + 280);
  if ((*(_BYTE *)a2 & 4) != 0)
  {
    v6 = (_QWORD *)*((_QWORD *)a2 - 1);
    v7 = *v6;
    v4 = (unsigned __int8 *)(v6 + 2);
    v5 = v7;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  Key = llvm::StringMapImpl::FindKey((uint64_t *)this + 35, v4, v5);
  if (Key == -1 || Key == (unint64_t)*((unsigned int *)this + 72))
    return 0;
  else
    return *(unsigned int *)(*(_QWORD *)(*v3 + 8 * Key) + 8);
}

_OWORD *llvm::RecordStreamer::emitELFSymverDirective(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v4;
  void **v5;
  _OWORD *v6;
  _OWORD *result;
  uint64_t v8;
  __int128 v9;

  *(_QWORD *)&v9 = a3;
  *((_QWORD *)&v9 + 1) = a4;
  v8 = a2;
  v4 = (void **)sub_1C61D0AA8(a1 + 312, &v8);
  v5 = v4;
  v6 = v4[2];
  if (v6 >= v4[3])
  {
    result = sub_1C51140B0(v4 + 1, &v9);
  }
  else
  {
    *v6 = v9;
    result = v6 + 1;
  }
  v5[2] = result;
  return result;
}

void sub_1C62DB44C(unsigned int *a1)
{
  sub_1C62DABB0(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t *sub_1C62DB480(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  char *v12;
  char *v13;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  i = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == -8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  v11 = (char *)operator new(a3 + 17, (std::align_val_t)8uLL);
  v12 = v11;
  v13 = v11 + 16;
  if (a3)
    memcpy(v11 + 16, a2, a3);
  v13[a3] = 0;
  *(_QWORD *)v12 = a3;
  *((_DWORD *)v12 + 2) = 0;
  *i = (uint64_t)v12;
  ++*(_DWORD *)(a1 + 12);
  for (i = (uint64_t *)(*(_QWORD *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i == -8;
  return i;
}

void sub_1C62DB57C()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C62DB590(uint64_t a1, _QWORD *a2)
{
  ++*a2;
}

void *sub_1C62DB5A0@<X0>(uint64_t a1@<X0>, llvm::raw_ostream *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  const char *v7;
  unint64_t v8;
  void *result;

  if (!a3)
    sub_1C4816AD8(a2, "__imp_");
  v7 = (const char *)(*(_QWORD *)(a1 + 16) + 20);
  v8 = strlen(v7);
  result = (void *)*((_QWORD *)a2 + 4);
  if (v8 <= *((_QWORD *)a2 + 3) - (_QWORD)result)
  {
    if (v8)
    {
      result = memcpy(result, v7, v8);
      *((_QWORD *)a2 + 4) += v8;
    }
  }
  else
  {
    result = llvm::raw_ostream::write(a2, v7, v8);
  }
  *a4 = 0;
  return result;
}

void sub_1C62DB638(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 8) &= ~1u;
  *(_DWORD *)a1 = 2;
}

uint64_t sub_1C62DB650()
{
  return 0;
}

uint64_t sub_1C62DB65C(uint64_t a1)
{
  if ((*(_WORD *)(*(_QWORD *)(a1 + 16) + 18) & 3) == 1)
    return 1;
  else
    return 2;
}

void llvm::object::TapiUniversal::~TapiUniversal(llvm::object::TapiUniversal *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E818A9D0;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    v4 = sub_1C5A0AA74(v3);
    MEMORY[0x1CAA32FC0](v4, 0x10B2C40E0541032);
  }
  llvm::object::Binary::~Binary(this);
}

{
  llvm::object::TapiUniversal::~TapiUniversal(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::object::TapiUniversal::create@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  char v9;
  __int128 v10[2];
  uint64_t v11;

  v11 = 0;
  v4 = operator new();
  v5 = a1[1];
  v10[0] = *a1;
  v10[1] = v5;
  result = llvm::object::TapiUniversal::TapiUniversal(v4, v10, &v11);
  v7 = v11;
  v8 = *(_BYTE *)(a2 + 8);
  if (v11)
  {
    v9 = v8 | 1;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    result = v7;
  }
  else
  {
    v9 = v8 & 0xFE;
  }
  *(_BYTE *)(a2 + 8) = v9;
  *(_QWORD *)a2 = result;
  return result;
}

uint64_t sub_1C62DB794(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if ((v2 & 1) != 0)
  {
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else if (v3)
  {
    v4 = sub_1C5A0AA74(v3);
    MEMORY[0x1CAA32FC0](v4, 0x10B2C40E0541032);
  }
  return a1;
}

void llvm::object::WasmSymbol::dump(llvm::object::WasmSymbol *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  llvm::object::WasmSymbol::print((const void ***)this, v2);
}

uint64_t llvm::object::ObjectFile::createWasmObjectFile@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  __int128 v11[2];

  v10 = 0;
  v4 = operator new();
  v5 = a1[1];
  v11[0] = *a1;
  v11[1] = v5;
  result = llvm::object::WasmObjectFile::WasmObjectFile(v4, v11, &v10);
  v7 = v10;
  v8 = *(_BYTE *)(a2 + 8);
  if (v10)
  {
    v9 = v8 | 1;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    result = v7;
  }
  else
  {
    v9 = v8 & 0xFE;
  }
  *(_BYTE *)(a2 + 8) = v9;
  *(_QWORD *)a2 = result;
  return result;
}

void llvm::object::WasmObjectFile::parseSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8[4];
  __int16 v9;
  const char *v10;
  __int16 v11;
  _BYTE v12[40];
  _QWORD v13[3];

  v4 = *(_QWORD *)(a2 + 32);
  v5 = v4 + *(_QWORD *)(a2 + 40);
  v13[1] = v4;
  v13[2] = v5;
  v13[0] = v4;
  v6 = *(_DWORD *)a2;
  switch(*(_DWORD *)a2)
  {
    case 0:
      llvm::object::WasmObjectFile::parseCustomSection(a1, a2, (uint64_t)v13, a3);
      break;
    case 1:
      llvm::object::WasmObjectFile::parseTypeSection(a1, (uint64_t)v13, a3);
      break;
    case 2:
      llvm::object::WasmObjectFile::parseImportSection(a1, (uint64_t)v13, a3);
      break;
    case 3:
      llvm::object::WasmObjectFile::parseFunctionSection(a1, (uint64_t)v13, a3);
      break;
    case 4:
      llvm::object::WasmObjectFile::parseTableSection((uint64_t)a1, (uint64_t)v13, a3);
      break;
    case 5:
      llvm::object::WasmObjectFile::parseMemorySection((uint64_t)a1, (uint64_t)v13, a3);
      break;
    case 6:
      llvm::object::WasmObjectFile::parseGlobalSection((uint64_t)a1, (uint64_t)v13, a3);
      break;
    case 7:
      llvm::object::WasmObjectFile::parseExportSection((uint64_t)a1, (uint64_t)v13, a3);
      break;
    case 8:
      llvm::object::WasmObjectFile::parseStartSection((uint64_t)a1, (uint64_t)v13, a3);
      break;
    case 9:
      llvm::object::WasmObjectFile::parseElemSection((uint64_t)a1, (uint64_t)v13, a3);
      break;
    case 0xA:
      llvm::object::WasmObjectFile::parseCodeSection((uint64_t)a1, (uint64_t)v13, a3);
      break;
    case 0xB:
      llvm::object::WasmObjectFile::parseDataSection((uint64_t)a1, (uint64_t)v13, a3);
      break;
    case 0xC:
      llvm::object::WasmObjectFile::parseDataCountSection((uint64_t)a1, (uint64_t)v13, a3);
      break;
    case 0xD:
      llvm::object::WasmObjectFile::parseTagSection((uint64_t)a1, (uint64_t)v13, a3);
      break;
    default:
      v10 = "invalid section type: ";
      v11 = 259;
      v9 = 264;
      LODWORD(v8[0]) = v6;
      sub_1C4825FE4((uint64_t *)&v10, v8, (uint64_t)v12);
      v7 = operator new();
      *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v7, (llvm::Twine *)v12, 3u);
      break;
  }
}

void llvm::object::WasmObjectFile::parseCustomSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  int *v5;
  unint64_t v6;
  int v9;
  int v10;

  v5 = *(int **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  switch(v6)
  {
    case 4uLL:
      if (*v5 != 1701667182)
        goto LABEL_23;
      llvm::object::WasmObjectFile::parseNameSection((uint64_t)a1, a3, a4);
      goto LABEL_26;
    case 6uLL:
      if (*v5 != 1768716644 || *((_WORD *)v5 + 2) != 27502)
        goto LABEL_19;
      llvm::object::WasmObjectFile::parseDylinkSection((uint64_t)a1, a3, a4);
      goto LABEL_26;
    case 7uLL:
      if (*v5 != 1802398060 || *(int *)((char *)v5 + 3) != 1735289195)
        goto LABEL_19;
      llvm::object::WasmObjectFile::parseLinkingSection((uint64_t)a1, a3, a4);
      goto LABEL_26;
    case 8uLL:
      if (*(_QWORD *)v5 != 0x302E6B6E696C7964)
        goto LABEL_19;
      llvm::object::WasmObjectFile::parseDylink0Section((unint64_t)a1, a3, a4);
      goto LABEL_26;
    case 9uLL:
      if (*(_QWORD *)v5 != 0x72656375646F7270 || *((_BYTE *)v5 + 8) != 115)
        goto LABEL_19;
      llvm::object::WasmObjectFile::parseProducersSection((uint64_t)a1, a3, a4);
      goto LABEL_26;
    case 0xFuLL:
      if (*(_QWORD *)v5 != 0x665F746567726174 || *(_QWORD *)((char *)v5 + 7) != 0x7365727574616566)
        goto LABEL_19;
      llvm::object::WasmObjectFile::parseTargetFeaturesSection(a1, a3, a4);
      goto LABEL_26;
    default:
      if (v6 < 6)
        goto LABEL_23;
LABEL_19:
      v9 = *v5;
      v10 = *((unsigned __int16 *)v5 + 2);
      if (v9 != 1869374834 || v10 != 11875)
        goto LABEL_23;
      llvm::object::WasmObjectFile::parseRelocSection(a1, a3, a4);
LABEL_26:
      if (!*a4)
LABEL_23:
        *a4 = 0;
      return;
  }
}

uint64_t llvm::object::WasmObjectFile::parseFunctionSection@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12[2];
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  char v17;
  __int128 v18;
  __int128 v19;

  v6 = sub_1C5A12990(a2);
  if (HIDWORD(v6))
LABEL_12:
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  v7 = v6;
  v8 = a1 + 64;
  result = (uint64_t)sub_1C62DD2E8(a1 + 64, v6);
  if (v7)
  {
    v10 = (a1[36] - a1[35]) >> 6;
    while (1)
    {
      v11 = sub_1C5A12990(a2);
      if (HIDWORD(v11))
        goto LABEL_12;
      if (v11 >= v10)
        break;
      --v7;
      v16 = 0;
      v17 = 0;
      v13 = 0u;
      v14 = 0u;
      v15 = 0;
      v18 = 0u;
      v19 = 0u;
      v12[1] = v11;
      result = sub_1C5A11F3C(v8, (uint64_t)v12);
      if (!v7)
        goto LABEL_7;
    }
    v12[0] = 3;
    return sub_1C5A12DAC(a3, "invalid function type", v12);
  }
  else
  {
LABEL_7:
    if (*(_QWORD *)(a2 + 8) == *(_QWORD *)(a2 + 16))
    {
      *a3 = 0;
    }
    else
    {
      v12[0] = 3;
      return sub_1C5A12DAC(a3, "function section ended prematurely", v12);
    }
  }
  return result;
}

void llvm::object::WasmObjectFile::parseMemorySection(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v6;
  int v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned int v11;
  __int128 v12;
  uint64_t v13;

  v6 = sub_1C5A12990(a2);
  if (HIDWORD(v6))
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  v7 = v6;
  sub_1C5A120A4(a1 + 328, v6);
  for (; v7; --v7)
  {
    v12 = 0uLL;
    v13 = 0;
    sub_1C5A11E94((uint64_t)&v12, a2);
    if ((v12 & 4) != 0)
      *(_BYTE *)(a1 + 591) = 1;
    v8 = *(_QWORD *)(a1 + 336);
    if (v8 >= *(_QWORD *)(a1 + 344))
    {
      v9 = sub_1C4DCFAFC((void **)(a1 + 328), (uint64_t)&v12);
    }
    else
    {
      *(_OWORD *)v8 = v12;
      *(_QWORD *)(v8 + 16) = v13;
      v9 = (char *)(v8 + 24);
    }
    *(_QWORD *)(a1 + 336) = v9;
  }
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)(a2 + 16))
  {
    v10 = 0;
  }
  else
  {
    v11 = 3;
    sub_1C5A12DAC((uint64_t *)&v12, "memory section ended prematurely", &v11);
    v10 = v12;
  }
  *a3 = v10;
}

void llvm::object::WasmObjectFile::parseTagSection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;

  *(_DWORD *)(a1 + 696) = 954437177 * ((*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3);
  v6 = sub_1C5A12990(a2);
  if (HIDWORD(v6))
  {
LABEL_18:
    v13 = "LEB is outside Varuint32 range";
    goto LABEL_20;
  }
  v7 = v6;
  sub_1C5A120A4(a1 + 376, v6);
  if (v7)
  {
    v8 = (*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280)) >> 6;
    while (1)
    {
      v9 = *(_BYTE **)(a2 + 8);
      if (v9 == *(_BYTE **)(a2 + 16))
        break;
      *(_QWORD *)(a2 + 8) = v9 + 1;
      if (*v9)
      {
        LODWORD(v14) = 3;
        sub_1C5A13018(a3, (unsigned int *)&v14);
        return;
      }
      v10 = sub_1C5A12990(a2);
      if (HIDWORD(v10))
        goto LABEL_18;
      if (v10 >= v8)
      {
        LODWORD(v14) = 3;
        sub_1C5A1307C(a3, (unsigned int *)&v14);
        return;
      }
      *((_QWORD *)&v14 + 1) = 0;
      v15 = 0;
      v11 = *(_QWORD *)(a1 + 384);
      LODWORD(v14) = *(_DWORD *)(a1 + 684) - 1431655765 * ((v11 - *(_QWORD *)(a1 + 376)) >> 3);
      DWORD1(v14) = v10;
      if (v11 >= *(_QWORD *)(a1 + 392))
      {
        v12 = sub_1C4DCFAFC((void **)(a1 + 376), (uint64_t)&v14);
      }
      else
      {
        *(_OWORD *)v11 = v14;
        *(_QWORD *)(v11 + 16) = v15;
        v12 = (char *)(v11 + 24);
      }
      *(_QWORD *)(a1 + 384) = v12;
      if (!--v7)
        goto LABEL_12;
    }
    v13 = "EOF while reading uint8";
LABEL_20:
    llvm::report_fatal_error((llvm *)v13, (const char *)1);
  }
LABEL_12:
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)(a2 + 16))
  {
    *a3 = 0;
  }
  else
  {
    LODWORD(v14) = 3;
    sub_1C5A12DAC(a3, "tag section ended prematurely", (unsigned int *)&v14);
  }
}

void llvm::object::WasmObjectFile::parseGlobalSection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  int v7;
  _OWORD *v8;
  _BYTE *v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  _OWORD v15[2];
  __int128 v16;
  __int128 v17;

  *(_DWORD *)(a1 + 700) = 954437177 * ((*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3);
  v6 = sub_1C5A12990(a2);
  if (HIDWORD(v6))
  {
    v14 = "LEB is outside Varuint32 range";
    goto LABEL_17;
  }
  v7 = v6;
  sub_1C5A12178(a1 + 352, v6);
  if (v7)
  {
    v8 = *(_OWORD **)(a1 + 360);
    while (1)
    {
      v16 = 0u;
      v17 = 0u;
      LODWORD(v15[0]) = *(_DWORD *)(a1 + 672) + (((unint64_t)v8 - *(_QWORD *)(a1 + 352)) >> 6);
      v9 = *(_BYTE **)(a2 + 8);
      if (v9 == *(_BYTE **)(a2 + 16))
      {
        v14 = "EOF while reading uint8";
        goto LABEL_17;
      }
      *(_QWORD *)(a2 + 8) = v9 + 1;
      BYTE4(v15[0]) = *v9;
      v10 = sub_1C5A12A1C(a2);
      if (v10 >= 2)
        break;
      BYTE5(v15[0]) = v10;
      sub_1C5A12224((uint64_t)a3, (uint64_t)v15 + 8, a2);
      if (*a3)
        return;
      v11 = *(_OWORD **)(a1 + 360);
      if ((unint64_t)v11 >= *(_QWORD *)(a1 + 368))
      {
        v8 = sub_1C5A130E0((void **)(a1 + 352), v15);
      }
      else
      {
        v12 = v15[1];
        *v11 = v15[0];
        v11[1] = v12;
        v13 = v17;
        v11[2] = v16;
        v11[3] = v13;
        v8 = v11 + 4;
      }
      *(_QWORD *)(a1 + 360) = v8;
      if (!--v7)
        goto LABEL_11;
    }
    v14 = "LEB is outside Varuint1 range";
LABEL_17:
    llvm::report_fatal_error((llvm *)v14, (const char *)1);
  }
LABEL_11:
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)(a2 + 16))
  {
    *a3 = 0;
  }
  else
  {
    LODWORD(v15[0]) = 3;
    sub_1C5A12DAC(a3, "global section ended prematurely", (unsigned int *)v15);
  }
}

void llvm::object::WasmObjectFile::parseExportSection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;

  v6 = sub_1C5A12990(a2);
  if (HIDWORD(v6))
  {
LABEL_25:
    v18 = "LEB is outside Varuint32 range";
    goto LABEL_27;
  }
  v7 = v6;
  sub_1C5A120A4(a1 + 424, v6);
  if (v7)
  {
    while (1)
    {
      *(_QWORD *)&v20 = sub_1C5A0EE78(a2);
      *((_QWORD *)&v20 + 1) = v8;
      v9 = *(_BYTE **)(a2 + 8);
      if (v9 == *(_BYTE **)(a2 + 16))
        break;
      *(_QWORD *)(a2 + 8) = v9 + 1;
      v10 = *v9;
      LOBYTE(v21) = *v9;
      v11 = sub_1C5A12990(a2);
      if (HIDWORD(v11))
        goto LABEL_25;
      HIDWORD(v21) = v11;
      switch(v10)
      {
        case 0:
          v14 = *(unsigned int *)(a1 + 680);
          if (v11 < v14
            || (v15 = *(_QWORD *)(a1 + 512), v14 + ((*(_QWORD *)(a1 + 520) - v15) >> 7) <= v11))
          {
            v19 = 3;
            sub_1C5A12DAC(a3, "invalid function export", &v19);
            return;
          }
          v16 = v15 + ((unint64_t)(v11 - v14) << 7);
          v17 = *(unsigned __int8 *)(v16 + 80);
          *(_OWORD *)(v16 + 64) = v20;
          if (!v17)
            *(_BYTE *)(v16 + 80) = 1;
LABEL_6:
          v12 = *(_QWORD *)(a1 + 432);
          if (v12 >= *(_QWORD *)(a1 + 440))
          {
            v13 = sub_1C4DCFAFC((void **)(a1 + 424), (uint64_t)&v20);
          }
          else
          {
            *(_OWORD *)v12 = v20;
            *(_QWORD *)(v12 + 16) = v21;
            v13 = (char *)(v12 + 24);
          }
          *(_QWORD *)(a1 + 432) = v13;
          if (!--v7)
            goto LABEL_19;
          break;
        case 1:
        case 2:
          goto LABEL_6;
        case 3:
          if ((unint64_t)*(unsigned int *)(a1 + 672)
             + ((uint64_t)(*(_QWORD *)(a1 + 360) - *(_QWORD *)(a1 + 352)) >> 6) > v11)
            goto LABEL_6;
          v19 = 3;
          sub_1C5A12DAC(a3, "invalid global export", &v19);
          return;
        case 4:
          if ((unint64_t)*(unsigned int *)(a1 + 684)
             - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a1 + 384) - *(_QWORD *)(a1 + 376)) >> 3) > v11)
            goto LABEL_6;
          v19 = 3;
          sub_1C5A12DAC(a3, "invalid tag export", &v19);
          return;
        default:
          v19 = 3;
          sub_1C5A12DAC(a3, "unexpected export kind", &v19);
          return;
      }
    }
    v18 = "EOF while reading uint8";
LABEL_27:
    llvm::report_fatal_error((llvm *)v18, (const char *)1);
  }
LABEL_19:
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)(a2 + 16))
  {
    *a3 = 0;
  }
  else
  {
    LODWORD(v20) = 3;
    sub_1C5A12DAC(a3, "export section ended prematurely", (unsigned int *)&v20);
  }
}

unint64_t llvm::object::WasmObjectFile::parseStartSection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t result;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  result = sub_1C5A12990(a2);
  if (HIDWORD(result))
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  *(_DWORD *)(a1 + 584) = result;
  if ((unint64_t)*(unsigned int *)(a1 + 680) + ((uint64_t)(*(_QWORD *)(a1 + 520) - *(_QWORD *)(a1 + 512)) >> 7) <= result)
  {
    v7 = 3;
    result = sub_1C5A12DAC(&v8, "invalid start function", &v7);
    v6 = v8;
  }
  else
  {
    v6 = 0;
  }
  *a3 = v6;
  return result;
}

void llvm::object::WasmObjectFile::parseCodeSection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  void **v17;
  uint64_t v18;
  uint64_t **v19;
  _QWORD *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  unsigned int v32;
  unsigned int v33;

  *(_BYTE *)(a1 + 590) = 1;
  *(_DWORD *)(a1 + 688) = 954437177 * ((*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3);
  v6 = sub_1C5A12990(a2);
  if (HIDWORD(v6))
  {
LABEL_22:
    v30 = "LEB is outside Varuint32 range";
    goto LABEL_24;
  }
  v7 = v6;
  if (v6 == (uint64_t)(*(_QWORD *)(a1 + 520) - *(_QWORD *)(a1 + 512)) >> 7)
  {
    v31 = a3;
    if (v6)
    {
      v8 = 0;
      v9 = *(_QWORD *)(a2 + 8);
      while (1)
      {
        v10 = *(_QWORD *)(a1 + 512);
        v11 = sub_1C5A12990(a2);
        if (HIDWORD(v11))
          goto LABEL_22;
        v12 = (_DWORD *)(v10 + (v8 << 7));
        v13 = *(_QWORD *)(a2 + 8);
        v14 = v13 + v11;
        v12[14] = v13 - v9;
        *v12 = *(_DWORD *)(a1 + 680) + v8;
        v12[12] = v9 - *(_DWORD *)a2;
        v12[13] = v13 + v11 - v9;
        v15 = sub_1C5A12990(a2);
        if (HIDWORD(v15))
          goto LABEL_22;
        v16 = v15;
        v17 = (void **)(v12 + 2);
        sub_1C4D98200((uint64_t)v17, v15);
        if (v16)
          break;
LABEL_15:
        v27 = *(_QWORD *)(a2 + 8);
        v28 = (v14 - v27);
        v29 = v10 + (v8 << 7);
        *(_QWORD *)(v29 + 32) = v27;
        *(_QWORD *)(v29 + 40) = v28;
        *(_DWORD *)(v29 + 120) = -1;
        v9 = *(_QWORD *)(a2 + 8) + v28;
        *(_QWORD *)(a2 + 8) = v9;
        if (++v8 == v7)
          goto LABEL_16;
      }
      v18 = v10 + (v8 << 7);
      v19 = (uint64_t **)(v18 + 16);
      v20 = (_QWORD *)(v18 + 24);
      while (1)
      {
        v21 = sub_1C5A12990(a2);
        if (HIDWORD(v21))
          goto LABEL_22;
        v22 = *(unsigned __int8 **)(a2 + 8);
        if (v22 == *(unsigned __int8 **)(a2 + 16))
          break;
        v23 = v21;
        *(_QWORD *)(a2 + 8) = v22 + 1;
        v24 = *v19;
        v25 = *v22 | (v23 << 32);
        if ((unint64_t)*v19 >= *v20)
        {
          v26 = sub_1C4ABDC28(v17, v25);
        }
        else
        {
          *v24 = v25;
          v26 = v24 + 1;
        }
        *v19 = v26;
        if (!--v16)
          goto LABEL_15;
      }
      v30 = "EOF while reading uint8";
LABEL_24:
      llvm::report_fatal_error((llvm *)v30, (const char *)1);
    }
    v9 = *(_QWORD *)(a2 + 8);
LABEL_16:
    if (v9 == *(_QWORD *)(a2 + 16))
    {
      *v31 = 0;
    }
    else
    {
      v32 = 3;
      sub_1C5A12DAC(v31, "code section ended prematurely", &v32);
    }
  }
  else
  {
    v33 = 3;
    sub_1C5A12DAC(a3, "invalid function count", &v33);
  }
}

unint64_t llvm::object::WasmObjectFile::parseDataCountSection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t result;

  result = sub_1C5A12990(a2);
  if (HIDWORD(result))
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  if (!*(_BYTE *)(a1 + 504))
    *(_BYTE *)(a1 + 504) = 1;
  *(_QWORD *)(a1 + 496) = result;
  *a3 = 0;
  return result;
}

unint64_t llvm::object::WasmObjectFile::parseDylinkSection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t result;
  int i;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  unsigned int v15;
  __int128 v16;

  *(_BYTE *)(a1 + 589) = 1;
  v6 = sub_1C5A12990(a2);
  if (HIDWORD(v6))
    goto LABEL_15;
  *(_DWORD *)(a1 + 96) = v6;
  v7 = sub_1C5A12990(a2);
  if (HIDWORD(v7)
    || (*(_DWORD *)(a1 + 100) = v7, v8 = sub_1C5A12990(a2), HIDWORD(v8))
    || (*(_DWORD *)(a1 + 104) = v8, v9 = sub_1C5A12990(a2), HIDWORD(v9))
    || (*(_DWORD *)(a1 + 108) = v9, result = sub_1C5A12990(a2), HIDWORD(result)))
  {
LABEL_15:
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  }
  for (i = result; i; --i)
  {
    *(_QWORD *)&v16 = sub_1C5A0EE78(a2);
    *((_QWORD *)&v16 + 1) = v12;
    v13 = *(_OWORD **)(a1 + 120);
    if ((unint64_t)v13 >= *(_QWORD *)(a1 + 128))
    {
      result = (unint64_t)sub_1C51140B0((void **)(a1 + 112), &v16);
    }
    else
    {
      *v13 = v16;
      result = (unint64_t)(v13 + 1);
    }
    *(_QWORD *)(a1 + 120) = result;
  }
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)(a2 + 16))
  {
    v14 = 0;
  }
  else
  {
    v15 = 3;
    result = sub_1C5A12DAC((uint64_t *)&v16, "dylink section ended prematurely", &v15);
    v14 = v16;
  }
  *a3 = v14;
  return result;
}

unint64_t llvm::object::WasmObjectFile::parseDylink0Section@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unint64_t v7;
  void **v8;
  void **v9;
  void **v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int i;
  uint64_t v17;
  _OWORD *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  *(_BYTE *)(result + 589) = 1;
  v4 = *(unsigned __int8 **)(a2 + 8);
  v5 = *(unsigned __int8 **)(a2 + 16);
  if (v4 >= v5)
  {
    if (v4 == v5)
    {
LABEL_39:
      *a3 = 0;
    }
    else
    {
      LODWORD(v28) = 3;
      return sub_1C5A12DAC(a3, "dylink.0 section ended prematurely", (unsigned int *)&v28);
    }
  }
  else
  {
    v7 = result;
    v8 = (void **)(result + 136);
    v9 = (void **)(result + 160);
    v10 = (void **)(result + 112);
    while (1)
    {
      *(_QWORD *)(a2 + 8) = v4 + 1;
      *(_QWORD *)(a2 + 16) = v5;
      v11 = *v4;
      result = sub_1C5A12990(a2);
      if (HIDWORD(result))
LABEL_41:
        llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
      v12 = *(_QWORD *)(a2 + 8) + result;
      *(_QWORD *)(a2 + 16) = v12;
      switch(v11)
      {
        case 1:
          v13 = sub_1C5A12990(a2);
          if (HIDWORD(v13))
            goto LABEL_41;
          *(_DWORD *)(v7 + 96) = v13;
          v14 = sub_1C5A12990(a2);
          if (HIDWORD(v14))
            goto LABEL_41;
          *(_DWORD *)(v7 + 100) = v14;
          v15 = sub_1C5A12990(a2);
          if (HIDWORD(v15))
            goto LABEL_41;
          *(_DWORD *)(v7 + 104) = v15;
          result = sub_1C5A12990(a2);
          if (HIDWORD(result))
            goto LABEL_41;
          *(_DWORD *)(v7 + 108) = result;
          goto LABEL_11;
        case 2:
          result = sub_1C5A12990(a2);
          if (HIDWORD(result))
            goto LABEL_41;
          for (i = result; i; --i)
          {
            *(_QWORD *)&v28 = sub_1C5A0EE78(a2);
            *((_QWORD *)&v28 + 1) = v17;
            v18 = *(_OWORD **)(v7 + 120);
            if ((unint64_t)v18 >= *(_QWORD *)(v7 + 128))
            {
              result = (unint64_t)sub_1C51140B0(v10, &v28);
            }
            else
            {
              *v18 = v28;
              result = (unint64_t)(v18 + 1);
            }
            *(_QWORD *)(v7 + 120) = result;
          }
          goto LABEL_11;
        case 3:
          result = sub_1C5A12990(a2);
          if (HIDWORD(result))
            goto LABEL_41;
          v19 = result;
          if (!(_DWORD)result)
            goto LABEL_11;
          while (1)
          {
            *(_QWORD *)&v28 = sub_1C5A0EE78(a2);
            *((_QWORD *)&v28 + 1) = v20;
            v21 = sub_1C5A12990(a2);
            if (HIDWORD(v21))
              goto LABEL_41;
            LODWORD(v29) = v21;
            v22 = *(_QWORD *)(v7 + 168);
            if (v22 >= *(_QWORD *)(v7 + 176))
            {
              result = (unint64_t)sub_1C575BBCC(v9, (uint64_t)&v28);
            }
            else
            {
              *(_OWORD *)v22 = v28;
              *(_QWORD *)(v22 + 16) = v29;
              result = v22 + 24;
            }
            *(_QWORD *)(v7 + 168) = result;
            if (!--v19)
              goto LABEL_11;
          }
        case 4:
          result = sub_1C5A12990(a2);
          if (HIDWORD(result))
            goto LABEL_41;
          v23 = result;
          if (!(_DWORD)result)
            goto LABEL_11;
          break;
        default:
          *(_QWORD *)(a2 + 8) = v12;
          goto LABEL_11;
      }
      do
      {
        *(_QWORD *)&v28 = sub_1C5A0EE78(a2);
        *((_QWORD *)&v28 + 1) = v24;
        *(_QWORD *)&v29 = sub_1C5A0EE78(a2);
        *((_QWORD *)&v29 + 1) = v25;
        v26 = sub_1C5A12990(a2);
        if (HIDWORD(v26))
          goto LABEL_41;
        LODWORD(v30) = v26;
        v27 = *(_QWORD *)(v7 + 144);
        if (v27 >= *(_QWORD *)(v7 + 152))
        {
          result = (unint64_t)sub_1C5509DAC(v8, (uint64_t)&v28);
        }
        else
        {
          *(_OWORD *)v27 = v28;
          *(_OWORD *)(v27 + 16) = v29;
          *(_QWORD *)(v27 + 32) = v30;
          result = v27 + 40;
        }
        *(_QWORD *)(v7 + 144) = result;
        --v23;
      }
      while (v23);
LABEL_11:
      v4 = *(unsigned __int8 **)(a2 + 8);
      if (v4 != *(unsigned __int8 **)(a2 + 16))
        break;
      if (v4 >= v5)
        goto LABEL_39;
    }
    LODWORD(v28) = 3;
    return sub_1C5A12E24(a3, (unsigned int *)&v28);
  }
  return result;
}

uint64_t llvm::object::WasmObjectFile::parseNameSection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v11;
  int i;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v30;
  _QWORD v31[2];
  int v32;
  _QWORD v33[2];
  int v34;
  _QWORD v35[2];
  int v36;
  __int128 v37;
  uint64_t v38;

  v5 = a3;
  v35[0] = 0;
  v35[1] = 0;
  v36 = 0;
  v33[0] = 0;
  v33[1] = 0;
  v34 = 0;
  v31[0] = 0;
  v31[1] = 0;
  v32 = 0;
  if (*(_QWORD *)(a1 + 520) == *(_QWORD *)(a1 + 512) || *(_BYTE *)(a1 + 590))
  {
    v6 = *(unsigned __int8 **)(a2 + 8);
    while (1)
    {
      v7 = *(unsigned __int8 **)(a2 + 16);
      if (v6 >= v7)
        break;
      *(_QWORD *)(a2 + 8) = v6 + 1;
      v8 = *v6;
      v9 = sub_1C5A12990(a2);
      if (HIDWORD(v9))
        goto LABEL_51;
      v6 = (unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v9);
      if (v8 > 9 || ((1 << v8) & 0x282) == 0)
      {
        *(_QWORD *)(a2 + 8) = v6;
      }
      else
      {
        v11 = sub_1C5A12990(a2);
        if (HIDWORD(v11))
LABEL_51:
          llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
        for (i = v11; i; --i)
        {
          v13 = sub_1C5A12990(a2);
          if (HIDWORD(v13))
            goto LABEL_51;
          v14 = v13;
          v15 = sub_1C5A0EE78(a2);
          v17 = v16;
          if (v8 == 7)
          {
            v30 = v14;
            sub_1C61A7854((uint64_t)v33, (uint64_t *)&v30, (uint64_t)&v37);
            if (!(_BYTE)v38)
            {
              LODWORD(v37) = 3;
              sub_1C5A12DAC(a3, "global named more than once", (unsigned int *)&v37);
              goto LABEL_42;
            }
            if ((unint64_t)*(unsigned int *)(a1 + 672)
               + ((uint64_t)(*(_QWORD *)(a1 + 360) - *(_QWORD *)(a1 + 352)) >> 6) <= v14
              || v17 == 0)
            {
LABEL_45:
              LODWORD(v37) = 3;
              sub_1C5A12DAC(a3, "invalid name entry", (unsigned int *)&v37);
              goto LABEL_42;
            }
            v22 = 1;
          }
          else if (v8 == 1)
          {
            v30 = v14;
            sub_1C61A7854((uint64_t)v35, (uint64_t *)&v30, (uint64_t)&v37);
            if (!(_BYTE)v38)
            {
              LODWORD(v37) = 3;
              sub_1C5A12DAC(a3, "function named more than once", (unsigned int *)&v37);
              goto LABEL_42;
            }
            v18 = *(unsigned int *)(a1 + 680);
            v19 = *(_QWORD *)(a1 + 512);
            if (v18 + ((*(_QWORD *)(a1 + 520) - v19) >> 7) <= v14 || v17 == 0)
              goto LABEL_45;
            v21 = (v14 - v18);
            if (v14 >= v18)
            {
              v22 = 0;
              v26 = v19 + (v21 << 7);
              *(_QWORD *)(v26 + 104) = v15;
              *(_QWORD *)(v26 + 112) = v17;
            }
            else
            {
              v22 = 0;
            }
          }
          else
          {
            v30 = v14;
            sub_1C61A7854((uint64_t)v31, (uint64_t *)&v30, (uint64_t)&v37);
            if (!(_BYTE)v38)
            {
              LODWORD(v37) = 3;
              sub_1C5A12E88(a3, (unsigned int *)&v37);
              goto LABEL_42;
            }
            if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 480) - *(_QWORD *)(a1 + 472)) >> 3) < v14)
            {
              LODWORD(v37) = 3;
              sub_1C5A12EEC(a3, (unsigned int *)&v37);
              goto LABEL_42;
            }
            v22 = 2;
          }
          *(_QWORD *)&v37 = __PAIR64__(v14, v22);
          *((_QWORD *)&v37 + 1) = v15;
          v38 = v17;
          v24 = *(_QWORD *)(a1 + 568);
          if (v24 >= *(_QWORD *)(a1 + 576))
          {
            v25 = sub_1C4DCFAFC((void **)(a1 + 560), (uint64_t)&v37);
          }
          else
          {
            *(_OWORD *)v24 = v37;
            *(_QWORD *)(v24 + 16) = v38;
            v25 = (char *)(v24 + 24);
          }
          *(_QWORD *)(a1 + 568) = v25;
        }
      }
      if (*(unsigned __int8 **)(a2 + 8) != v6)
      {
        LODWORD(v37) = 3;
        v27 = "name sub-section ended prematurely";
        v5 = a3;
        goto LABEL_41;
      }
    }
    if (v6 == v7)
    {
      *a3 = 0;
    }
    else
    {
      LODWORD(v37) = 3;
      sub_1C5A12DAC(a3, "name section ended prematurely", (unsigned int *)&v37);
    }
  }
  else
  {
    LODWORD(v37) = 3;
    v27 = "names must come after code section";
LABEL_41:
    sub_1C5A12DAC(v5, v27, (unsigned int *)&v37);
  }
LABEL_42:
  MEMORY[0x1CAA32FB4](v31[0], 8);
  MEMORY[0x1CAA32FB4](v33[0], 8);
  return MEMORY[0x1CAA32FB4](v35[0], 8);
}

uint64_t llvm::object::WasmObjectFile::parseLinkingSectionComdat@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v5;
  int v6;
  int v7;
  size_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  char v11;
  _OWORD *v12;
  _OWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int i;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char *v30;
  uint64_t v31;
  uint64_t v33[4];
  __int16 v34;
  const char *v35;
  __int16 v36;
  unsigned int v37[10];
  __int128 v38;
  _QWORD v39[5];

  v5 = sub_1C5A12990(a2);
  if (HIDWORD(v5))
    goto LABEL_40;
  v6 = v5;
  v39[0] = 0;
  v39[1] = 0;
  v39[2] = 0x800000000;
  if ((_DWORD)v5)
  {
    v7 = 0;
    while (1)
    {
      v9 = (unsigned __int8 *)sub_1C5A0EE78(a2);
      v10 = v8;
      *(_QWORD *)&v38 = v9;
      *((_QWORD *)&v38 + 1) = v8;
      if (!v8 || (sub_1C4F024D8((llvm::StringMapImpl *)v39, v9, v8), (v11 & 1) == 0))
      {
        v35 = "bad/duplicate COMDAT name ";
        v36 = 259;
        v34 = 261;
        v33[0] = (uint64_t)v9;
        v33[1] = v10;
        sub_1C4825FE4((uint64_t *)&v35, v33, (uint64_t)v37);
        v31 = operator new();
        *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v31, (llvm::Twine *)v37, 3u);
        return sub_1C4F02264((uint64_t)v39);
      }
      v12 = *(_OWORD **)(a1 + 632);
      if ((unint64_t)v12 >= *(_QWORD *)(a1 + 640))
      {
        v13 = sub_1C51140B0((void **)(a1 + 624), &v38);
      }
      else
      {
        *v12 = v38;
        v13 = v12 + 1;
      }
      *(_QWORD *)(a1 + 632) = v13;
      v14 = sub_1C5A12990(a2);
      if (HIDWORD(v14))
        break;
      if (v14)
      {
        v37[0] = 3;
        sub_1C5A12FB4(a3, v37);
        return sub_1C4F02264((uint64_t)v39);
      }
      v15 = sub_1C5A12990(a2);
      if (HIDWORD(v15))
        break;
      for (i = v15; i; --i)
      {
        v17 = sub_1C5A12990(a2);
        if (HIDWORD(v17))
          goto LABEL_40;
        v18 = v17;
        v19 = sub_1C5A12990(a2);
        if (HIDWORD(v19))
          goto LABEL_40;
        if (v18)
        {
          if (v18 == 1)
          {
            v25 = *(unsigned int *)(a1 + 680);
            if (v19 < v25
              || (v26 = *(_QWORD *)(a1 + 512), v25 + ((*(_QWORD *)(a1 + 520) - v26) >> 7) <= v19))
            {
              v37[0] = 3;
              sub_1C5A12DAC(a3, "COMDAT function index out of range", v37);
              return sub_1C4F02264((uint64_t)v39);
            }
            v27 = v26 + ((unint64_t)(v19 - v25) << 7);
            v28 = *(_DWORD *)(v27 + 120);
            v21 = (_DWORD *)(v27 + 120);
            if (v28 != -1)
            {
              v37[0] = 3;
              sub_1C5A12DAC(a3, "function in two COMDATs", v37);
              return sub_1C4F02264((uint64_t)v39);
            }
          }
          else
          {
            if (v18 != 5)
            {
              v37[0] = 3;
              sub_1C5A12D48(a3, v37);
              return sub_1C4F02264((uint64_t)v39);
            }
            v20 = *(_QWORD *)(a1 + 72);
            if (0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 80) - v20) >> 3) <= v19)
            {
              v37[0] = 3;
              sub_1C5A12F50(a3, v37);
              return sub_1C4F02264((uint64_t)v39);
            }
            if (*(_DWORD *)(v20 + 72 * v19))
            {
              v37[0] = 3;
              v30 = "non-custom section in a COMDAT";
              goto LABEL_36;
            }
            v21 = (_DWORD *)(v20 + 72 * v19 + 24);
          }
        }
        else
        {
          v22 = *(_QWORD *)(a1 + 472);
          if (0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 480) - v22) >> 3) <= v19)
          {
            v37[0] = 3;
            v30 = "COMDAT data index out of range";
LABEL_36:
            sub_1C5A12DAC(a3, v30, v37);
            return sub_1C4F02264((uint64_t)v39);
          }
          v23 = v22 + 104 * v19;
          v24 = *(_DWORD *)(v23 + 96);
          v21 = (_DWORD *)(v23 + 96);
          if (v24 != -1)
          {
            v37[0] = 3;
            sub_1C5A12DAC(a3, "data segment in two COMDATs", v37);
            return sub_1C4F02264((uint64_t)v39);
          }
        }
        *v21 = v7;
      }
      if (++v7 == v6)
        goto LABEL_29;
    }
LABEL_40:
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  }
LABEL_29:
  *a3 = 0;
  return sub_1C4F02264((uint64_t)v39);
}

void sub_1C62DD1F8(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6)
  {
    v5 = *(char **)(a1 + 8);
    v6 = (char *)operator new(a2 << 6);
    v7 = &v6[64 * a2];
    v8 = &v6[v5 - v2];
    if (v5 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = (uint64_t)&v6[v5 - v2];
      do
      {
        v5 -= 64;
        v9 = sub_1C62C40B0(v9 - 64, v5);
      }
      while (v5 != v2);
      v2 = *(char **)a1;
      v10 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v10 != v2)
      {
        v11 = v10 - 24;
        do
        {
          v12 = (char *)*((_QWORD *)v11 - 2);
          if (v11 != v12)
            free(v12);
          v13 = (char *)*((_QWORD *)v11 - 5);
          if (v11 - 24 != v13)
            free(v13);
          v14 = v11 - 40;
          v11 -= 64;
        }
        while (v14 != v2);
      }
    }
    if (v2)
      operator delete(v2);
  }
}

uint64_t *sub_1C62DD2E8(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD v5[5];

  if (a2 > (result[2] - *result) >> 7)
  {
    v3 = result;
    v4 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = operator new(a2 << 7);
    v5[1] = v5[0] + v4;
    v5[2] = v5[0] + v4;
    v5[3] = v5[0] + (a2 << 7);
    sub_1C62DDF20(v3, v5);
    return (uint64_t *)sub_1C62DDFD0((uint64_t)v5);
  }
  return result;
}

uint64_t *sub_1C62DD36C(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0xCCCCCCCCCCCCCCCDLL * ((result[2] - *result) >> 4) < a2)
  {
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v4 = 5 * a2;
    v5[0] = operator new(80 * a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 16 * v4;
    sub_1C62DE030(v2, v5);
    return (uint64_t *)sub_1C62DE0D0((uint64_t)v5);
  }
  return result;
}

void llvm::object::WasmObjectFile::moveSymbolNext(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

uint64_t llvm::object::WasmObjectFile::getSymbolFlags@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  v3 = *(_QWORD *)(*(_QWORD *)(result + 536) + ((a2 >> 27) & 0x1FFFFFFFE0));
  v4 = *(_DWORD *)(v3 + 20);
  if ((v4 & 3) == 1)
    v5 = 6;
  else
    v5 = 2;
  if ((v4 & 3) == 2)
    v6 = 0;
  else
    v6 = v5;
  if ((v4 & 0xC) == 4)
    v6 |= 0x200u;
  v7 = v6 & 0xFFFFFFFE | (v4 >> 4) & 1;
  if (*(_BYTE *)(v3 + 16))
    v8 = v7;
  else
    v8 = v7 | 0x800;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v8;
  return result;
}

uint64_t llvm::object::WasmObjectFile::symbol_begin(llvm::object::WasmObjectFile *this)
{
  return 1;
}

uint64_t llvm::object::WasmObjectFile::symbol_end(llvm::object::WasmObjectFile *this)
{
  return ((*((_QWORD *)this + 68) - *((_QWORD *)this + 67)) << 27) | 1;
}

__n128 llvm::object::WasmObjectFile::getSymbolName@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  __n128 *v3;
  __n128 result;

  v3 = *(__n128 **)(*(_QWORD *)(a1 + 536) + ((a2 >> 27) & 0x1FFFFFFFE0));
  a3[1].n128_u8[0] &= ~1u;
  result = *v3;
  *a3 = *v3;
  return result;
}

uint64_t llvm::object::WasmObjectFile::getSymbolAddress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 536) + (((unint64_t)a2 >> 27) & 0x1FFFFFFFE0));
  if (*(_BYTE *)(v3 + 16))
    return (uint64_t)llvm::object::ObjectFile::getSymbolValue(a1, a2, a3);
  v4 = *(unsigned int *)(v3 + 96);
  v5 = *(unsigned int *)(a1 + 680);
  if (v4 < v5)
    return (uint64_t)llvm::object::ObjectFile::getSymbolValue(a1, a2, a3);
  v6 = *(_QWORD *)(a1 + 512);
  if (v5 + ((*(_QWORD *)(a1 + 520) - v6) >> 7) <= v4)
    return (uint64_t)llvm::object::ObjectFile::getSymbolValue(a1, a2, a3);
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = *(unsigned int *)(v6 + ((unint64_t)(v4 - v5) << 7) + 48);
  return a1;
}

uint64_t llvm::object::WasmObjectFile::getSymbolValueImpl(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 536) + ((a2 >> 27) & 0x1FFFFFFFE0));
  v4 = *(unsigned __int8 *)(v3 + 16);
  if (((1 << v4) & 0x35) != 0)
    return *(unsigned int *)(v3 + 96);
  result = 0;
  if (v4 == 1)
  {
    v6 = *(_DWORD *)(v3 + 96);
    v7 = *(_QWORD *)(a1 + 472);
    if (*(_BYTE *)(v7 + 104 * v6 + 24) == 65)
      v8 = *(int *)(v7 + 104 * v6 + 32);
    else
      v8 = *(_QWORD *)(v7 + 104 * v6 + 32);
    return *(_QWORD *)(v3 + 104) + v8;
  }
  return result;
}

uint64_t llvm::object::WasmObjectFile::getSymbolType@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;

  v3 = dword_1C8667C88[*(char *)(*(_QWORD *)(*(_QWORD *)(result + 536) + ((a2 >> 27) & 0x1FFFFFFFE0)) + 16)];
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v3;
  return result;
}

uint64_t llvm::object::WasmObjectFile::getSymbolSection@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(a1[67] + ((a2 >> 27) & 0x1FFFFFFFE0));
  if ((*(_BYTE *)(v4 + 20) & 0x10) == 0)
    __asm { BR              X11 }
  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 352))(a1);
  result = v6;
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  return result;
}

void llvm::object::WasmObjectFile::moveSectionNext(uint64_t a1, _DWORD *a2)
{
  ++*a2;
}

void llvm::object::WasmObjectFile::getSectionName(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  std::error_code v9;

  v4 = *(_QWORD *)(a1 + 72);
  switch(*(_DWORD *)(v4 + 72 * a2))
  {
    case 0:
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_OWORD *)a3 = *(_OWORD *)(v4 + 72 * a2 + 8);
      return;
    case 1:
      *(_BYTE *)(a3 + 16) &= ~1u;
      v6 = "TYPE";
      goto LABEL_19;
    case 2:
      *(_BYTE *)(a3 + 16) &= ~1u;
      v6 = "IMPORT";
      goto LABEL_13;
    case 3:
      *(_BYTE *)(a3 + 16) &= ~1u;
      v6 = "FUNCTION";
      v7 = 8;
      goto LABEL_20;
    case 4:
      *(_BYTE *)(a3 + 16) &= ~1u;
      v6 = "TABLE";
      goto LABEL_15;
    case 5:
      *(_BYTE *)(a3 + 16) &= ~1u;
      v6 = "MEMORY";
      goto LABEL_13;
    case 6:
      *(_BYTE *)(a3 + 16) &= ~1u;
      v6 = "GLOBAL";
      goto LABEL_13;
    case 7:
      *(_BYTE *)(a3 + 16) &= ~1u;
      v6 = "EXPORT";
LABEL_13:
      v7 = 6;
      goto LABEL_20;
    case 8:
      *(_BYTE *)(a3 + 16) &= ~1u;
      v6 = "START";
LABEL_15:
      v7 = 5;
      goto LABEL_20;
    case 9:
      *(_BYTE *)(a3 + 16) &= ~1u;
      v6 = "ELEM";
      goto LABEL_19;
    case 0xA:
      *(_BYTE *)(a3 + 16) &= ~1u;
      v6 = "CODE";
      goto LABEL_19;
    case 0xB:
      *(_BYTE *)(a3 + 16) &= ~1u;
      v6 = "DATA";
LABEL_19:
      v7 = 4;
      goto LABEL_20;
    case 0xC:
      *(_BYTE *)(a3 + 16) &= ~1u;
      v6 = "DATACOUNT";
      v7 = 9;
      goto LABEL_20;
    case 0xD:
      *(_BYTE *)(a3 + 16) &= ~1u;
      v6 = "TAG";
      v7 = 3;
LABEL_20:
      *(_QWORD *)a3 = v6;
      *(_QWORD *)(a3 + 8) = v7;
      break;
    default:
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      *(_QWORD *)&v9.__val_ = qword_1EF8F7238[0];
      v9.__cat_ = (const std::error_category *)"";
      llvm::createStringError((llvm *)6, v9, &v8);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v8;
      break;
  }
}

uint64_t llvm::object::WasmObjectFile::getSectionAddress()
{
  return 0;
}

uint64_t llvm::object::WasmObjectFile::getSectionIndex(uint64_t a1, unsigned int a2)
{
  return a2;
}

uint64_t llvm::object::WasmObjectFile::getSectionSize(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 72) + 72 * a2 + 40);
}

__n128 llvm::object::WasmObjectFile::getSectionContents@<Q0>(uint64_t a1@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)(*(_QWORD *)(a1 + 72) + 72 * a2);
  a3[1].n128_u8[0] &= ~1u;
  result = v3[2];
  *a3 = result;
  return result;
}

uint64_t llvm::object::WasmObjectFile::getSectionAlignment()
{
  return 1;
}

uint64_t llvm::object::WasmObjectFile::isSectionCompressed()
{
  return 0;
}

BOOL llvm::object::WasmObjectFile::isSectionText(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(*(_QWORD *)(a1 + 72) + 72 * a2) == 10;
}

BOOL llvm::object::WasmObjectFile::isSectionData(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(*(_QWORD *)(a1 + 72) + 72 * a2) == 11;
}

uint64_t llvm::object::WasmObjectFile::isSectionBSS()
{
  return 0;
}

uint64_t llvm::object::WasmObjectFile::isSectionVirtual()
{
  return 0;
}

uint64_t llvm::object::WasmObjectFile::section_rel_begin(uint64_t a1, unsigned int a2)
{
  return a2;
}

unint64_t llvm::object::WasmObjectFile::section_rel_end(uint64_t a1, unsigned int a2)
{
  return a2 | ((unint64_t)(-1431655765
                                * ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 72 * a2 + 56)
                                                - *(_QWORD *)(*(_QWORD *)(a1 + 72) + 72 * a2 + 48)) >> 3)) << 32);
}

void llvm::object::WasmObjectFile::moveRelocationNext(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

uint64_t llvm::object::WasmObjectFile::getRelocationOffset(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 72 * a2 + 48) + 24 * HIDWORD(a2) + 8);
}

unint64_t llvm::object::WasmObjectFile::getRelocationSymbol(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1[9] + 72 * a2 + 48);
  if (*(_BYTE *)(v2 + 24 * HIDWORD(a2)) == 6)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  else
    return ((unint64_t)*(unsigned int *)(v2 + 24 * HIDWORD(a2) + 4) << 32) | 1;
}

uint64_t llvm::object::WasmObjectFile::getRelocationType(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 72 * a2 + 48) + 24 * HIDWORD(a2));
}

_QWORD *llvm::object::WasmObjectFile::getRelocationTypeName(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  char *v4;
  uint64_t v5;

  v3 = *(char *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 72 * a2 + 48) + 24 * HIDWORD(a2));
  if (v3 > 0x19)
  {
    v4 = "Unknown";
    v5 = 7;
  }
  else
  {
    v4 = off_1E818ABA8[v3];
    v5 = qword_1C8667CA0[v3];
  }
  return sub_1C52C2F74(a3, v4, &v4[v5]);
}

uint64_t llvm::object::WasmObjectFile::section_begin(llvm::object::WasmObjectFile *this)
{
  return 0;
}

uint64_t llvm::object::WasmObjectFile::section_end(llvm::object::WasmObjectFile *this)
{
  return 954437177 * ((*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 3);
}

uint64_t llvm::object::WasmObjectFile::getBytesInAddress(llvm::object::WasmObjectFile *this)
{
  if (*((_BYTE *)this + 591))
    return 8;
  else
    return 4;
}

const char *llvm::object::WasmObjectFile::getFileFormatName(llvm::object::WasmObjectFile *this)
{
  return "WASM";
}

uint64_t llvm::object::WasmObjectFile::getArch(llvm::object::WasmObjectFile *this)
{
  if (*((_BYTE *)this + 591))
    return 64;
  else
    return 63;
}

unint64_t *llvm::object::WasmObjectFile::getFeatures@<X0>(unint64_t *a1@<X8>)
{
  return llvm::SubtargetFeatures::SubtargetFeatures(a1, (uint64_t)"", 0);
}

uint64_t llvm::object::WasmObjectFile::isRelocatableObject(llvm::object::WasmObjectFile *this)
{
  return *((unsigned __int8 *)this + 588);
}

uint64_t llvm::object::WasmSectionOrderChecker::isValidSectionOrder(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int SectionOrder;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int *v10;
  int v11;
  _BOOL8 v12;
  _QWORD *v13;
  _QWORD v15[2];
  int v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[11];

  v19[10] = *MEMORY[0x1E0C80C00];
  SectionOrder = llvm::object::WasmSectionOrderChecker::getSectionOrder(a1, a2, a3, a4);
  if (!SectionOrder)
    return 1;
  v6 = SectionOrder;
  v7 = 0;
  v17 = v19;
  v18 = 0x1400000000;
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  LODWORD(v8) = SectionOrder;
  while (1)
  {
    v9 = llvm::object::WasmSectionOrderChecker::DisallowedPredecessors[20 * (int)v8];
    if (v9)
    {
      v10 = &llvm::object::WasmSectionOrderChecker::DisallowedPredecessors[20 * (int)v8 + 1];
      do
      {
        if (!*((_BYTE *)v15 + v9))
        {
          if (v7 >= HIDWORD(v18))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, (uint64_t)v19, v7 + 1, 4);
            v7 = v18;
          }
          *((_DWORD *)v17 + v7) = v9;
          v7 = v18 + 1;
          LODWORD(v18) = v18 + 1;
          *((_BYTE *)v15 + v9) = 1;
        }
        v11 = *v10++;
        v9 = v11;
      }
      while (v11);
    }
    v12 = v7 == 0;
    if (!v7)
      break;
    v13 = v17;
    v8 = *((int *)v17 + --v7);
    LODWORD(v18) = v7;
    if (*(_BYTE *)(a1 + v8))
      goto LABEL_16;
  }
  *(_BYTE *)(a1 + v6) = 1;
  v13 = v17;
LABEL_16:
  if (v13 != v19)
    free(v13);
  return v12;
}

void sub_1C62DDD08(uint64_t a1)
{
  sub_1C5A12AE0(a1);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62DDD2C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_1C62DDD7C(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 72;
      v6 = *(_OWORD *)(v3 - 72);
      v7 = *(_OWORD *)(v3 - 56);
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(_OWORD *)(v4 - 56) = v7;
      *(_OWORD *)(v4 - 72) = v6;
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
      *(_QWORD *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v3 -= 72;
      v4 -= 72;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v8 = *result;
  *result = v5;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1C62DDE20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 72;
    v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 72;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1C62DDE80(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = (uint64_t **)sub_1C4768D58(a1, &v12, a2);
  if (*v5)
    return 0;
  v7 = v5;
  sub_1C571175C(a1, a3, (uint64_t)&v11);
  v8 = v12;
  v9 = v11;
  *v11 = 0;
  v9[1] = 0;
  v9[2] = v8;
  *v7 = v9;
  v10 = **(_QWORD **)a1;
  if (v10)
  {
    *(_QWORD *)a1 = v10;
    v9 = *v7;
  }
  sub_1C4768E74(*(uint64_t **)(a1 + 8), v9);
  ++*(_QWORD *)(a1 + 16);
  return 1;
}

uint64_t *sub_1C62DDF20(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 128) = *(_QWORD *)(v2 + v5 - 128);
      *(_QWORD *)(v6 - 120) = 0;
      *(_QWORD *)(v6 - 112) = 0;
      *(_QWORD *)(v6 - 104) = 0;
      *(_OWORD *)(v6 - 120) = *(_OWORD *)(v2 + v5 - 120);
      *(_QWORD *)(v6 - 104) = *(_QWORD *)(v2 + v5 - 104);
      *(_QWORD *)(v7 - 112) = 0;
      *(_QWORD *)(v7 - 104) = 0;
      *(_QWORD *)(v7 - 120) = 0;
      v9 = *(_OWORD *)(v2 + v5 - 48);
      v8 = *(_OWORD *)(v2 + v5 - 32);
      v10 = *(_OWORD *)(v2 + v5 - 64);
      *(_OWORD *)(v6 - 20) = *(_OWORD *)(v2 + v5 - 20);
      *(_OWORD *)(v6 - 48) = v9;
      *(_OWORD *)(v6 - 32) = v8;
      *(_OWORD *)(v6 - 64) = v10;
      v11 = *(_OWORD *)(v2 + v5 - 80);
      *(_OWORD *)(v6 - 96) = *(_OWORD *)(v2 + v5 - 96);
      *(_OWORD *)(v6 - 80) = v11;
      v5 -= 128;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v12 = *result;
  *result = v4;
  a2[1] = v12;
  v13 = result[1];
  result[1] = a2[2];
  a2[2] = v13;
  v14 = result[2];
  result[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1C62DDFD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 128;
    v4 = *(void **)(v2 - 120);
    if (v4)
    {
      *(_QWORD *)(v2 - 112) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 128;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_1C62DE030(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 80;
      v6 = *(_OWORD *)(v3 - 80);
      v7 = *(_OWORD *)(v3 - 48);
      v8 = *(_QWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 64) = *(_OWORD *)(v3 - 64);
      *(_OWORD *)(v4 - 48) = v7;
      *(_OWORD *)(v4 - 80) = v6;
      *(_QWORD *)(v4 - 32) = v8;
      *(_QWORD *)(v4 - 24) = 0;
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v3 -= 80;
      v4 -= 80;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v9 = *result;
  *result = v5;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1C62DE0D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 80;
    v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 80;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1C62DE134(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

void sub_1C62DE140(llvm::object::Binary *a1)
{
  llvm::object::Binary::~Binary(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C62DE164()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62DE178(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_1C62DE180@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result;

  result = sub_1C62DE234(a1, a2, a3, a5);
  if (!*a5)
  {
    *a4 = *(_QWORD *)(a1 + 16) + a2;
    a4[1] = a3;
    *a5 = 0;
  }
  return result;
}

uint64_t sub_1C62DE1D8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  unint64_t v9;

  result = sub_1C62DE234(a1, a2, 1, a4);
  if (!*a4)
  {
    v9 = *(_QWORD *)(a1 + 24) - a2;
    *a3 = *(_QWORD *)(a1 + 16) + a2;
    a3[1] = v9;
    *a4 = 0;
  }
  return result;
}

uint64_t sub_1C62DE22C()
{
  return 0;
}

uint64_t sub_1C62DE234@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t result;

  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) >= a2)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) >= a3 + a2)
    {
      result = 0;
      goto LABEL_4;
    }
    v8 = operator new();
    v9 = 1;
  }
  else
  {
    v8 = operator new();
    v9 = 3;
  }
  result = llvm::BinaryStreamError::BinaryStreamError(v8, v9, "", 0);
LABEL_4:
  *a4 = result;
  return result;
}

uint64_t sub_1C62DE2F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v11;

  v3 = result;
  if (*(_DWORD *)(a2 + 8) == 11)
  {
    *(_BYTE *)(result + 8) &= ~1u;
    v4 = *(_DWORD *)(a3 + 56);
LABEL_3:
    v5 = bswap32(v4);
LABEL_4:
    *(_DWORD *)result = v5;
    return result;
  }
  v5 = bswap32(*(_DWORD *)(a3 + 56));
  if (v5 <= 0xFFFE)
  {
    *(_BYTE *)(result + 8) &= ~1u;
    goto LABEL_4;
  }
  if (*(_WORD *)(*(_QWORD *)(a2 + 48) + 2))
  {
    v6 = *(_QWORD *)(a2 + 64);
    v7 = -29127 * ((a3 - v6) >> 3) + 1;
    v8 = (_DWORD *)(v6 + 36);
    v9 = 40 * __rev16(*(unsigned __int16 *)(*(_QWORD *)(a2 + 48) + 2));
    while (*v8 != 0x800000 || bswap32(*((unsigned __int16 *)v8 - 2)) >> 16 != (unsigned __int16)v7)
    {
      v8 += 10;
      v9 -= 40;
      if (!v9)
        goto LABEL_12;
    }
    *(_BYTE *)(result + 8) &= ~1u;
    v4 = *(v8 - 7);
    goto LABEL_3;
  }
LABEL_12:
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v11 = qword_1EF8F7238[0];
  result = operator new();
  *(_QWORD *)result = &off_1E81A0D28;
  *(_QWORD *)(result + 8) = 3;
  *(_QWORD *)(result + 16) = v11;
  *(_BYTE *)(v3 + 8) |= 1u;
  *(_QWORD *)v3 = result;
  return result;
}

uint64_t sub_1C62DE448(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v11;

  v3 = result;
  if (*(_DWORD *)(a2 + 8) == 11)
  {
    *(_BYTE *)(result + 8) &= ~1u;
    v4 = bswap32(*(unsigned __int16 *)(a3 + 32)) >> 16;
LABEL_3:
    *(_DWORD *)result = v4;
    return result;
  }
  v5 = *(unsigned __int16 *)(a3 + 32);
  if (v5 != 0xFFFF)
  {
    *(_BYTE *)(result + 8) &= ~1u;
    v4 = __rev16(v5);
    goto LABEL_3;
  }
  if (*(_WORD *)(*(_QWORD *)(a2 + 48) + 2))
  {
    v6 = *(_QWORD *)(a2 + 64);
    v7 = -13107 * ((a3 - v6) >> 3) + 1;
    v8 = (_DWORD *)(v6 + 36);
    v9 = 40 * __rev16(*(unsigned __int16 *)(*(_QWORD *)(a2 + 48) + 2));
    while (*v8 != 0x800000 || bswap32(*((unsigned __int16 *)v8 - 2)) >> 16 != (unsigned __int16)v7)
    {
      v8 += 10;
      v9 -= 40;
      if (!v9)
        goto LABEL_11;
    }
    *(_BYTE *)(result + 8) &= ~1u;
    v4 = bswap32(*(v8 - 7));
    goto LABEL_3;
  }
LABEL_11:
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v11 = qword_1EF8F7238[0];
  result = operator new();
  *(_QWORD *)result = &off_1E81A0D28;
  *(_QWORD *)(result + 8) = 3;
  *(_QWORD *)(result + 16) = v11;
  *(_BYTE *)(v3 + 8) |= 1u;
  *(_QWORD *)v3 = result;
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::moveSymbolNext(uint64_t result, uint64_t *a2)
{
  int v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_DWORD *)(result + 8);
  v3 = v2 == 11;
  if (v2 == 11)
    v4 = 0;
  else
    v4 = *a2;
  if (v3)
    v5 = *a2;
  else
    v5 = 0;
  if (!v4)
    v4 = v5;
  *a2 += 18 * *(unsigned __int8 *)(v4 + 17) + 18;
  return result;
}

void llvm::object::XCOFFObjectFile::getStringTableEntry(llvm::object::XCOFFObjectFile *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  unint64_t v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13[4];
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18[4];
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22[5];
  uint64_t v23[5];
  uint64_t v24[5];
  _BYTE v25[40];

  if (a2 > 3)
  {
    v5 = *((_QWORD *)this + 11);
    if (v5 && *((_DWORD *)this + 20) > a2)
    {
      v6 = (const char *)(v5 + a2);
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v6;
      *(_QWORD *)(a3 + 8) = strlen(v6);
    }
    else
    {
      v20 = "entry with offset 0x";
      v21 = 259;
      v17 = a2;
      v18[0] = (uint64_t)&v17;
      v18[2] = 0;
      v19 = 270;
      sub_1C4825FE4((uint64_t *)&v20, v18, (uint64_t)v22);
      v15 = " in a string table with size 0x";
      v16 = 259;
      sub_1C4825FE4(v22, (uint64_t *)&v15, (uint64_t)v23);
      v12 = *((unsigned int *)this + 20);
      v13[0] = (uint64_t)&v12;
      v13[2] = 0;
      v14 = 270;
      sub_1C4825FE4(v23, v13, (uint64_t)v24);
      v10 = " is invalid";
      v11 = 259;
      sub_1C4825FE4(v24, (uint64_t *)&v10, (uint64_t)v25);
      v7 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v9 = qword_1EF8F7238[0];
      *(_QWORD *)v7 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v25, (_QWORD *)(v7 + 8));
      *(_QWORD *)(v7 + 32) = 3;
      *(_QWORD *)(v7 + 40) = v9;
      *(_BYTE *)(v7 + 48) = 1;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v7;
    }
  }
  else
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
}

void llvm::object::XCOFFObjectFile::getSymbolName(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD v4[3];

  v4[1] = 0;
  v4[2] = 0;
  v4[0] = a1;
  v3 = 1;
  if (*(_DWORD *)(a1 + 8) == 11)
    v3 = 2;
  v4[v3] = a2;
  llvm::object::XCOFFSymbolRef::getName((llvm::object::XCOFFSymbolRef *)v4, a3);
}

void llvm::object::XCOFFSymbolRef::getName(llvm::object::XCOFFSymbolRef *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  llvm::object::XCOFFObjectFile *v7;
  unsigned int v8;

  v3 = *((_QWORD *)this + 1);
  if (!v3)
  {
    v6 = *((_QWORD *)this + 2);
    if ((*(char *)(v6 + 16) & 0x80000000) == 0)
    {
      v7 = *(llvm::object::XCOFFObjectFile **)this;
      v8 = *(_DWORD *)(v6 + 8);
      goto LABEL_11;
    }
LABEL_8:
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_QWORD *)a2 = "Unimplemented Debug Name";
    *(_QWORD *)(a2 + 8) = 24;
    return;
  }
  if (*(char *)(v3 + 16) < 0)
    goto LABEL_8;
  if (!*(_DWORD *)v3)
  {
    v7 = *(llvm::object::XCOFFObjectFile **)this;
    v8 = *(_DWORD *)(v3 + 4);
LABEL_11:
    llvm::object::XCOFFObjectFile::getStringTableEntry(v7, bswap32(v8), a2);
    return;
  }
  v4 = memchr(*((void **)this + 1), 0, 8uLL);
  v5 = (uint64_t)v4 - v3;
  *(_BYTE *)(a2 + 16) &= ~1u;
  if (!v4)
    v5 = 8;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v5;
}

uint64_t llvm::object::XCOFFObjectFile::getSymbolAddress@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = *(_DWORD *)(result + 8);
  if (v3 == 11 || a2 == 0)
  {
    if (v3 == 11)
      v5 = (unint64_t *)a2;
    else
      v5 = 0;
    v6 = bswap64(*v5);
  }
  else
  {
    v6 = bswap32(*(_DWORD *)(a2 + 8));
  }
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = v6;
  return result;
}

unint64_t llvm::object::XCOFFObjectFile::getSymbolValueImpl(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t *v4;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 != 11 && a2 != 0)
    return bswap32(*(_DWORD *)(a2 + 8));
  if (v2 == 11)
    v4 = (unint64_t *)a2;
  else
    v4 = 0;
  return bswap64(*v4);
}

uint64_t llvm::object::XCOFFObjectFile::getSymbolAlignment(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD v9[3];
  char *v10;
  char *v11;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9[1] = 0;
  v9[2] = 0;
  v9[0] = a1;
  v2 = 1;
  if (*(_DWORD *)(a1 + 8) == 11)
  {
    v2 = 2;
    v3 = a2;
  }
  else
  {
    v3 = 0;
  }
  if (*(_DWORD *)(a1 + 8) == 11)
    v4 = 0;
  else
    v4 = a2;
  v9[v2] = a2;
  if (v4)
    v5 = v4;
  else
    v5 = v3;
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 != 2 && v6 != 111 && v6 != 107)
    return 0;
  llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef((llvm::object::XCOFFSymbolRef *)v9, (uint64_t)v12);
  v7 = v12[0];
  if ((v13 & 1) != 0)
  {
    v10 = (char *)v12[0];
    sub_1C4D62BD4(&v10, &v11);
    if (v10)
      (*(void (**)(char *))(*(_QWORD *)v10 + 8))(v10);
    return 0;
  }
  if (!v12[0])
    v7 = v12[1];
  return (1 << (*(_BYTE *)(v7 + 10) >> 3));
}

unint64_t llvm::object::XCOFFObjectFile::getCommonSymbolSizeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t result;
  _QWORD v8[3];
  char *v9;
  char *v10;
  char *v11;
  unsigned int *v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8[1] = 0;
  v8[2] = 0;
  v8[0] = a1;
  v2 = 1;
  if (*(_DWORD *)(a1 + 8) == 11)
  {
    v2 = 2;
    v3 = a2;
  }
  else
  {
    v3 = 0;
  }
  if (*(_DWORD *)(a1 + 8) == 11)
    v4 = 0;
  else
    v4 = a2;
  v8[v2] = a2;
  if (v4)
    v5 = v4;
  else
    v5 = v3;
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 2 || v6 == 111 || (result = 0, v6 == 107))
  {
    llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef((llvm::object::XCOFFSymbolRef *)v8, (uint64_t)&v11);
    if ((v13 & 1) != 0)
    {
      v9 = v11;
      sub_1C4D62BD4(&v9, &v10);
      if (v9)
        (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
      return 0;
    }
    else if (v11)
    {
      return bswap32(*(_DWORD *)v11);
    }
    else
    {
      return bswap64(v12[3] | ((unint64_t)*v12 << 32));
    }
  }
  return result;
}

void llvm::object::XCOFFObjectFile::getSymbolType(llvm::object::XCOFFObjectFile *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  void *v14;
  const void *v15;
  size_t v16;
  BOOL v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  _QWORD v21[3];
  _BYTE *v22;
  size_t v23;
  char v24;
  _BYTE *v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v21[1] = 0;
  v21[2] = 0;
  v5 = *((_DWORD *)a1 + 2) == 11;
  v6 = 1;
  if (*((_DWORD *)a1 + 2) == 11)
    v6 = 2;
  v21[0] = a1;
  if (v5)
    v7 = a2;
  else
    v7 = 0;
  if (v5)
    v8 = 0;
  else
    v8 = a2;
  v21[v6] = a2;
  if (!llvm::object::XCOFFSymbolRef::isFunction((llvm::object::XCOFFSymbolRef *)v21))
  {
    if (v8)
      v10 = v8;
    else
      v10 = v7;
    if (*(_BYTE *)(v10 + 16) == 103)
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      v9 = 4;
      goto LABEL_11;
    }
    if (v8)
      v11 = v8;
    else
      v11 = v7;
    v12 = (int)bswap32(*(unsigned __int16 *)(v11 + 12)) >> 16;
    if (v12 <= 0)
      goto LABEL_22;
    llvm::object::XCOFFObjectFile::getSectionByNum(a1, v12, (uint64_t)&v25);
    if ((v26 & 1) != 0)
    {
      v13 = v25;
    }
    else
    {
      v14 = v25;
      llvm::object::XCOFFSymbolRef::getName((llvm::object::XCOFFSymbolRef *)v21, (uint64_t)&v22);
      if ((v24 & 1) == 0)
      {
        v15 = v22;
        v16 = v23;
        if (v23 != 3 || (*(_WORD *)v22 == 20308 ? (v17 = v22[2] == 67) : (v17 = 0), !v17))
        {
          v18 = memchr(v14, 0, 8uLL);
          v19 = v18 - (_BYTE *)v14;
          if (!v18)
            v19 = 8;
          if (v19 != v16 || v16 && memcmp(v14, v15, v16))
          {
            if (((*(uint64_t (**)(llvm::object::XCOFFObjectFile *, void *))(*(_QWORD *)a1 + 200))(a1, v14) & 1) != 0
              || (*(unsigned int (**)(llvm::object::XCOFFObjectFile *, void *))(*(_QWORD *)a1 + 208))(a1, v14))
            {
              *(_BYTE *)(a3 + 8) &= ~1u;
              v9 = 2;
              goto LABEL_11;
            }
            v20 = (*(uint64_t (**)(llvm::object::XCOFFObjectFile *, void *))(*(_QWORD *)a1 + 256))(a1, v14);
            *(_BYTE *)(a3 + 8) &= ~1u;
            if (v20)
            {
              v9 = 3;
              goto LABEL_11;
            }
            goto LABEL_23;
          }
        }
LABEL_22:
        *(_BYTE *)(a3 + 8) &= ~1u;
LABEL_23:
        v9 = 1;
        goto LABEL_11;
      }
      v13 = v22;
    }
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v13;
    return;
  }
  *(_BYTE *)(a3 + 8) &= ~1u;
  v9 = 5;
LABEL_11:
  *(_DWORD *)a3 = v9;
}

uint64_t llvm::object::XCOFFSymbolRef::isFunction(llvm::object::XCOFFSymbolRef *this)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char v14;
  char *v15;
  char *v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 1);
  if (v2)
    v3 = (unsigned __int8 *)(v2 + 16);
  else
    v3 = (unsigned __int8 *)(*((_QWORD *)this + 2) + 16);
  v4 = *v3;
  if (v4 != 2 && v4 != 111 && v4 != 107)
    return 0;
  if (!v2)
    v2 = *((_QWORD *)this + 2);
  if ((*(_WORD *)(v2 + 14) & 0x2000) != 0)
    return 1;
  llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef(this, (uint64_t)&v15);
  v5 = v15;
  if ((v17 & 1) != 0)
  {
    v12 = v15;
    sub_1C4D62BD4(&v12, &v13);
    v10 = v12;
    if (!v12)
      return 0;
LABEL_26:
    (*(void (**)(char *))(*(_QWORD *)v10 + 8))(v10);
    return 0;
  }
  if (v15)
    v6 = v15;
  else
    v6 = v16;
  if ((v6[10] & 7) != 2)
    return 0;
  if (!v15)
    v5 = v16;
  if (v5[11])
    return 0;
  v7 = *((_QWORD *)this + 1);
  if (!v7)
    v7 = *((_QWORD *)this + 2);
  llvm::object::XCOFFObjectFile::getSectionByNum(*(llvm::object::XCOFFObjectFile **)this, (int)bswap32(*(unsigned __int16 *)(v7 + 12)) >> 16, (uint64_t)&v13);
  if ((v14 & 1) != 0)
  {
    v11 = v13;
    sub_1C4D62BD4(&v11, &v12);
    v10 = v11;
    if (!v11)
      return 0;
    goto LABEL_26;
  }
  v8 = 36;
  if (*(_DWORD *)(*(_QWORD *)this + 8) == 11)
    v8 = 64;
  return (v13[v8 + 3] >> 5) & 1;
}

void llvm::object::XCOFFObjectFile::getSectionByNum(llvm::object::XCOFFObjectFile *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  const char *v9;
  __int16 v10;
  uint64_t v11[4];
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[5];
  _BYTE v16[40];
  unint64_t v17;

  if (a2 >= 1 && a2 <= (int)(bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 6) + 2)) >> 16))
  {
    v7 = 40;
    if (*((_DWORD *)this + 2) == 11)
      v7 = 72;
    v6 = *((_QWORD *)this + 8) + v7 * (unint64_t)(a2 - 1);
    *(_BYTE *)(a3 + 8) &= ~1u;
  }
  else
  {
    if (!atomic_load(qword_1EF8F7238))
    {
      v8 = a2;
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      a2 = v8;
    }
    v5 = qword_1EF8F7238[0];
    v13 = "the section index (";
    v14 = 259;
    v12 = 265;
    LODWORD(v11[0]) = a2;
    sub_1C4825FE4((uint64_t *)&v13, v11, (uint64_t)v15);
    v9 = ") is invalid";
    v10 = 259;
    sub_1C4825FE4(v15, (uint64_t *)&v9, (uint64_t)v16);
    sub_1C50516B4(6, v5, (llvm::Twine *)v16, &v17);
    *(_BYTE *)(a3 + 8) |= 1u;
    v6 = v17;
  }
  *(_QWORD *)a3 = v6;
}

void llvm::object::XCOFFObjectFile::getSymbolSection(llvm::object::XCOFFObjectFile *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = *((_DWORD *)this + 2);
  v6 = v5 == 11;
  if (v5 == 11)
    v7 = 0;
  else
    v7 = a2;
  if (v6)
    v8 = a2;
  else
    v8 = 0;
  if (!v7)
    v7 = v8;
  v9 = bswap32(*(unsigned __int16 *)(v7 + 12)) >> 16;
  if ((unsigned __int16)(v9 + 2) > 2u)
  {
    llvm::object::XCOFFObjectFile::getSectionByNum(this, (__int16)v9, (uint64_t)&v13);
    v12 = v13;
    if ((v14 & 1) != 0)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)(a3 + 8) = this;
    }
    *(_QWORD *)a3 = v12;
  }
  else
  {
    v10 = (*(uint64_t (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)this + 352))(this);
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v10;
    *(_QWORD *)(a3 + 8) = v11;
  }
}

uint64_t llvm::object::XCOFFObjectFile::moveSectionNext(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = 40;
  if (*(_DWORD *)(result + 8) == 11)
    v2 = 72;
  *a2 += v2;
  return result;
}

unint64_t llvm::object::XCOFFObjectFile::getSectionAddress(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == 11)
    return bswap64(*(_QWORD *)(a2 + 16));
  else
    return bswap32(*(_DWORD *)(a2 + 12));
}

uint64_t llvm::object::XCOFFObjectFile::getSectionIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 40;
  if (*(_DWORD *)(a1 + 8) == 11)
    v2 = 72;
  return (a2 - *(_QWORD *)(a1 + 64)) / v2 + 1;
}

unint64_t llvm::object::XCOFFObjectFile::getSectionSize(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == 11)
    return bswap64(*(_QWORD *)(a2 + 24));
  else
    return bswap32(*(_DWORD *)(a2 + 16));
}

uint64_t llvm::object::XCOFFObjectFile::isSectionCompressed()
{
  return 0;
}

uint64_t llvm::object::XCOFFObjectFile::isSectionText(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 36;
  if (*(_DWORD *)(a1 + 8) == 11)
    v2 = 64;
  return (*(unsigned __int8 *)(a2 + v2 + 3) >> 5) & 1;
}

BOOL llvm::object::XCOFFObjectFile::isSectionData(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 36;
  if (*(_DWORD *)(a1 + 8) == 11)
    v2 = 64;
  return (*(_WORD *)(a2 + v2 + 2) & 0x4004) != 0;
}

BOOL llvm::object::XCOFFObjectFile::isSectionBSS(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 36;
  if (*(_DWORD *)(a1 + 8) == 11)
    v2 = 64;
  return (*(_WORD *)(a2 + v2 + 2) & 0x8008) != 0;
}

BOOL llvm::object::XCOFFObjectFile::isDebugSection(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 36;
  if (*(_DWORD *)(a1 + 8) == 11)
    v2 = 64;
  return (*(_WORD *)(a2 + v2 + 2) & 0x1020) != 0;
}

BOOL llvm::object::XCOFFObjectFile::isSectionVirtual(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == 11)
    return *(_QWORD *)(a2 + 32) == 0;
  else
    return *(_DWORD *)(a2 + 20) == 0;
}

char *llvm::object::XCOFFObjectFile::section_rel_begin(uint64_t a1, uint64_t a2)
{
  char *result;
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD v6[2];
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) == 11)
    llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader64,llvm::object::XCOFFRelocation64>(a1, a2, (uint64_t)v6);
  else
    llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader32,llvm::object::XCOFFRelocation32>(a1, a2, (uint64_t)v6);
  result = (char *)v6[0];
  if ((v7 & 1) != 0)
  {
    v6[0] = 0;
    if (result)
    {
      v4 = result;
      sub_1C4D62BD4(&v4, &v5);
      if (v4)
        (*(void (**)(char *))(*(_QWORD *)v4 + 8))(v4);
      if ((v7 & 1) != 0)
      {
        v3 = v6[0];
        v6[0] = 0;
        if (v3)
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      }
      return 0;
    }
  }
  return result;
}

char *llvm::object::XCOFFObjectFile::section_rel_end(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) == 11)
  {
    llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader64,llvm::object::XCOFFRelocation64>(a1, a2, (uint64_t)&v9);
    v2 = v9;
    if ((v11 & 1) == 0 || (v9 = 0, !v2))
    {
      v3 = v10;
      v4 = 14;
      return &v2[v3 * v4];
    }
  }
  else
  {
    llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader32,llvm::object::XCOFFRelocation32>(a1, a2, (uint64_t)&v9);
    v2 = v9;
    if ((v11 & 1) == 0 || (v9 = 0, !v2))
    {
      v3 = v10;
      v4 = 10;
      return &v2[v3 * v4];
    }
  }
  v7 = v2;
  sub_1C4D62BD4(&v7, &v8);
  if (v7)
    (*(void (**)(char *))(*(_QWORD *)v7 + 8))(v7);
  if ((v11 & 1) != 0)
  {
    v6 = v9;
    v9 = 0;
    if (v6)
      (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
  }
  return 0;
}

uint64_t llvm::object::XCOFFObjectFile::getRelocationOffset(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t *i;
  unint64_t v9;
  uint64_t result;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *j;
  unsigned int v16;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 48);
  if (*(_DWORD *)(a1 + 8) == 11)
  {
    v4 = *(unsigned __int16 *)(v3 + 2);
    if (*(_WORD *)(v3 + 2))
    {
      v5 = 0;
      v6 = bswap64(*a2);
      v7 = __rev16(v4);
      for (i = (unint64_t *)(v2 + 24); ; i += 9)
      {
        v9 = bswap64(*(i - 1));
        result = v6 - v9;
        if (v6 >= v9 && v6 < bswap64(*i) + v9)
          break;
        if (v7 <= (unsigned __int16)++v5)
          return -1;
      }
      return result;
    }
    return -1;
  }
  v11 = *(unsigned __int16 *)(v3 + 2);
  if (!*(_WORD *)(v3 + 2))
    return -1;
  v12 = 0;
  v13 = bswap32(*(_DWORD *)a2);
  v14 = __rev16(v11);
  for (j = (unsigned int *)(v2 + 16); ; j += 10)
  {
    v16 = bswap32(*(j - 1));
    result = v13 - v16;
    if (v13 >= v16 && v13 < bswap32(*j) + v16)
      break;
    if (v14 <= (unsigned __int16)++v12)
      return -1;
  }
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::getRelocationType(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 9;
  if (*(_DWORD *)(a1 + 8) == 11)
    v2 = 13;
  return *(unsigned __int8 *)(a2 + v2);
}

_QWORD *llvm::object::XCOFFObjectFile::getRelocationTypeName(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  char *RelocationTypeString;
  uint64_t v6;

  v4 = 9;
  if (*(_DWORD *)(a1 + 8) == 11)
    v4 = 13;
  RelocationTypeString = (char *)llvm::XCOFF::getRelocationTypeString(*(unsigned __int8 *)(a2 + v4));
  return sub_1C52C2F74(a3, RelocationTypeString, &RelocationTypeString[v6]);
}

void llvm::object::XCOFFObjectFile::getSymbolFlags(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD v23[2];
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v22[1] = 0;
  v22[2] = 0;
  v22[0] = a1;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = 1;
  if (v5 == 11)
  {
    v6 = 2;
    v7 = a2;
  }
  else
  {
    v7 = 0;
  }
  v22[v6] = a2;
  if (v5 == 11)
    v8 = 0;
  else
    v8 = a2;
  if (v8)
    v9 = v8;
  else
    v9 = v7;
  v10 = *(unsigned __int16 *)(v9 + 12);
  v11 = *(unsigned __int8 *)(v9 + 16);
  if (v11 == 111)
    v12 = 6;
  else
    v12 = 2;
  v13 = v12 | (8 * (v10 == 0xFFFF));
  if (v11 == 111 || v11 == 2)
    v15 = v13;
  else
    v15 = 8 * (v10 == 0xFFFF);
  if (v11 == 2 || v11 == 111 || v11 == 107)
  {
    llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef((llvm::object::XCOFFSymbolRef *)v22, (uint64_t)v23);
    v16 = v23[0];
    if ((v24 & 1) != 0)
    {
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v16;
      return;
    }
    if (!v23[0])
      v16 = v23[1];
    if ((*(_BYTE *)(v16 + 10) & 7) == 3)
      v15 |= 0x10u;
    v10 = *(unsigned __int16 *)(v9 + 12);
    v5 = *(_DWORD *)(a1 + 8);
  }
  v17 = v15 | (v10 == 0);
  if (v5 == 11 || (v21 = *(_QWORD *)(a1 + 56)) != 0 && *(_WORD *)(v21 + 2) == 512)
  {
    if (v8)
      v18 = v8;
    else
      v18 = v7;
    v19 = (*(unsigned __int16 *)(v18 + 14) << 8) & 0x7000;
    v20 = v17 | 0x40;
    if (v19 == 0x2000)
      v17 |= 0x200u;
    if (v19 == 0x4000)
      v17 = v20;
  }
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v17;
}

uint64_t llvm::object::XCOFFObjectFile::symbol_begin(llvm::object::XCOFFObjectFile *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t llvm::object::XCOFFObjectFile::section_begin(llvm::object::XCOFFObjectFile *this)
{
  return *((_QWORD *)this + 8);
}

unint64_t llvm::object::XCOFFObjectFile::section_end(llvm::object::XCOFFObjectFile *this)
{
  unsigned int v1;

  v1 = 40;
  if (*((_DWORD *)this + 2) == 11)
    v1 = 72;
  return *((_QWORD *)this + 8)
       + v1 * (unint64_t)(bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 6) + 2)) >> 16);
}

uint64_t llvm::object::XCOFFObjectFile::getBytesInAddress(llvm::object::XCOFFObjectFile *this)
{
  if (*((_DWORD *)this + 2) == 11)
    return 8;
  else
    return 4;
}

const char *llvm::object::XCOFFObjectFile::getFileFormatName(llvm::object::XCOFFObjectFile *this)
{
  if (*((_DWORD *)this + 2) == 11)
    return "aix5coff64-rs6000";
  else
    return "aixcoff-rs6000";
}

uint64_t llvm::object::XCOFFObjectFile::getArch(llvm::object::XCOFFObjectFile *this)
{
  if (*((_DWORD *)this + 2) == 11)
    return 23;
  else
    return 21;
}

unint64_t *llvm::object::XCOFFObjectFile::getFeatures@<X0>(unint64_t *a1@<X8>)
{
  return llvm::SubtargetFeatures::SubtargetFeatures(a1, (uint64_t)"", 0);
}

BOOL llvm::object::XCOFFObjectFile::isRelocatableObject(llvm::object::XCOFFObjectFile *this)
{
  return (*(_WORD *)(*((_QWORD *)this + 6) + 18) & 0x100) == 0;
}

void llvm::object::XCOFFObjectFile::getStartAddress(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 8) &= ~1u;
  *(_QWORD *)a1 = 0;
}

void sub_1C62DF7F4(llvm::object::SymbolicFile *a1)
{
  llvm::object::SymbolicFile::~SymbolicFile(a1);
  JUMPOUT(0x1CAA32FC0);
}

double llvm::opt::Arg::Arg(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a9;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 40) = a6;
  *(_BYTE *)(a1 + 44) &= 0xFCu;
  *(_QWORD *)(a1 + 64) = a7;
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)(a1 + 72) = a8;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)&result = 0x200000002;
  *(_QWORD *)(a1 + 56) = 0x200000002;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a9;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 40) = a6;
  *(_BYTE *)(a1 + 44) &= 0xFCu;
  *(_QWORD *)(a1 + 64) = a7;
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)(a1 + 72) = a8;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)&result = 0x200000002;
  *(_QWORD *)(a1 + 56) = 0x200000002;
  return result;
}

llvm::raw_ostream *llvm::opt::Arg::print(llvm::opt::Arg *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;

  sub_1C4816AD8(a2, "<");
  sub_1C4816AD8(a2, " Opt:");
  llvm::opt::Option::print(this, a2);
  v4 = sub_1C4816AD8(a2, " Index:");
  llvm::raw_ostream::operator<<(v4, *((unsigned int *)this + 10));
  sub_1C4816AD8(a2, " Values: [");
  v5 = *((unsigned int *)this + 14);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 8 * v5;
    do
    {
      if (v6)
        sub_1C4816AD8(a2, ", ");
      v8 = sub_1C4816AD8(a2, "'");
      v9 = sub_1C4816AD8(v8, *(char **)(*((_QWORD *)this + 6) + v6));
      sub_1C4816AD8(v9, "'");
      v6 += 8;
    }
    while (v7 != v6);
  }
  return sub_1C4816AD8(a2, "]>\n");
}

llvm::raw_ostream *llvm::opt::Arg::dump(llvm::opt::Arg *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return llvm::opt::Arg::print(this, v2);
}

void llvm::opt::Arg::getAsString(llvm::opt::Arg *this@<X0>, const llvm::opt::ArgList *a2@<X1>, std::string *a3@<X8>)
{
  llvm::opt::Arg *v5;
  char **v6;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  _QWORD v10[2];
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _BYTE v18[128];
  void *v19;
  __int128 v20;
  _QWORD v21[33];

  v21[32] = *MEMORY[0x1E0C80C00];
  do
  {
    v5 = this;
    this = (llvm::opt::Arg *)*((_QWORD *)this + 10);
  }
  while (this);
  v19 = v21;
  v20 = xmmword_1C64638F0;
  sub_1C613932C((uint64_t)v10, (uint64_t)&v19);
  v16 = v18;
  v17 = 0x1000000000;
  llvm::opt::Arg::render((uint64_t)v5, (uint64_t (***)(_QWORD))a2, (unsigned int *)&v16);
  if ((_DWORD)v17)
  {
    v6 = (char **)v16;
    v7 = 8 * v17;
    do
    {
      if (v6 != v16)
      {
        v8 = v13;
        if ((unint64_t)v13 < v12)
        {
          ++v13;
          *v8 = 32;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v10, 32);
        }
      }
      v9 = *v6++;
      sub_1C4816AD8((llvm::raw_ostream *)v10, v9);
      v7 -= 8;
    }
    while (v7);
  }
  std::string::__init(a3, *(const std::string::value_type **)v15, *(_QWORD *)(v15 + 8));
  if (v16 != v18)
    free(v16);
  v10[0] = off_1E81A6E70;
  if (v14 == 1 && v11)
    MEMORY[0x1CAA32F9C](v11, 0x1000C8077774924);
  if (v19 != v21)
    free(v19);
}

unsigned int *llvm::opt::Arg::renderAsInput(uint64_t a1, uint64_t (***a2)(_QWORD), unsigned int *a3)
{
  if ((*(_BYTE *)(*(_QWORD *)a1 + 40) & 2) != 0)
    return sub_1C486AF08(a3, *(_BYTE **)(a1 + 48), (_BYTE *)(*(_QWORD *)(a1 + 48) + 8 * *(unsigned int *)(a1 + 56)));
  else
    return llvm::opt::Arg::render(a1, a2, a3);
}

void llvm::opt::ArgList::eraseArg(int32x2_t *a1, int a2)
{
  uint64_t v4;
  __int32 v5;
  int32x2_t v6;
  __int32 v7;
  unsigned int v8;
  int *v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  sub_1C5A1C784((uint64_t)a1, a2, (uint64_t)&v15);
  v13 = v15;
  v4 = v17;
  v14 = v16;
  while ((_QWORD)v13 != v4)
  {
    *(_QWORD *)v13 = 0;
    *(_QWORD *)&v13 = v13 + 8;
    sub_1C5A1DA30((uint64_t)&v13);
  }
  v5 = a1[21].i32[0];
  if (v5)
  {
    v6 = a1[19];
    v7 = v5 - 1;
    v8 = v7 & (37 * a2);
    v9 = (int *)(*(_QWORD *)&v6 + 12 * v8);
    v10 = *v9;
    if (*v9 == a2)
    {
LABEL_6:
      *v9 = -2;
      a1[20] = vadd_s32(a1[20], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v11 = 1;
      while (v10 != -1)
      {
        v12 = v8 + v11++;
        v8 = v12 & v7;
        v9 = (int *)(*(_QWORD *)&v6 + 12 * v8);
        v10 = *v9;
        if (*v9 == a2)
          goto LABEL_6;
      }
    }
  }
}

uint64_t llvm::opt::ArgList::hasFlag(uint64_t a1, unsigned int a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v10;

  v6 = a2;
  v7 = a3;
  v8 = (_QWORD *)sub_1C62DFCBC(a1, a2, a3, a4);
  if (!v8)
    return a5;
  v10 = v8;
  if ((llvm::opt::Option::matches(v8, v6) & 1) != 0)
    return 1;
  return llvm::opt::Option::matches(v10, v7);
}

uint64_t sub_1C62DFCBC(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t *v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];
  _OWORD v12[2];
  uint64_t v13;

  sub_1C5A1CF38(v12, a1, a2, a3, a4);
  v11[0] = v12[0];
  v11[1] = v12[1];
  v4 = *(uint64_t **)&v12[0];
  if (*(_QWORD *)&v12[0] == v13)
    return 0;
  v10 = v13;
  do
  {
    v8 = *v4;
    v6 = v4 + 1;
    v7 = v8;
    v9 = *(_QWORD *)(v8 + 16);
    if (!v9)
      v9 = v7;
    *(_BYTE *)(v9 + 44) |= 1u;
    *(_QWORD *)&v11[0] = v6;
    sub_1C5A1DB90((uint64_t)v11);
    result = v7;
    v4 = *(uint64_t **)&v11[0];
  }
  while (*(_QWORD *)&v11[0] != v10);
  return result;
}

uint64_t llvm::opt::ArgList::AddAllArgs(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  return llvm::opt::ArgList::AddAllArgsExcept(a1, a2, a3, a4, 0, 0);
}

void llvm::opt::ArgList::AddAllArgsTranslated(uint64_t a1, uint64_t a2, int a3, const char *a4, int a5)
{
  uint64_t v9;
  uint64_t *i;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];
  __int16 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  sub_1C5A1C784(a1, a3, (uint64_t)&v25);
  v23 = v25;
  v9 = v27;
  v24 = v26;
  for (i = (uint64_t *)v25; (_QWORD)v23 != v9; i = (uint64_t *)v23)
  {
    v11 = *i;
    v12 = *(_QWORD *)(*i + 16);
    if (!v12)
      v12 = v11;
    *(_BYTE *)(v12 + 44) |= 1u;
    if (a5)
    {
      if (a4)
        v13 = strlen(a4);
      else
        v13 = 0;
      v14 = **(_QWORD **)(v11 + 48);
      v22 = 773;
      v21[0] = a4;
      v21[1] = v13;
      v21[2] = v14;
      v15 = sub_1C5A1C500(a1, (uint64_t)v21);
      v16 = *(unsigned int *)(a2 + 8);
      if (v16 >= *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v16 + 1, 8);
        v16 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v16) = v15;
    }
    else
    {
      v17 = *(unsigned int *)(a2 + 8);
      if (v17 >= *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v17 + 1, 8);
        v17 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v17) = a4;
      v18 = *(_DWORD *)(a2 + 12);
      v19 = (*(_DWORD *)(a2 + 8) + 1);
      *(_DWORD *)(a2 + 8) = v19;
      v20 = **(_QWORD **)(v11 + 48);
      if (v19 >= v18)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v19 + 1, 8);
        LODWORD(v19) = *(_DWORD *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v19) = v20;
    }
    ++*(_DWORD *)(a2 + 8);
    *(_QWORD *)&v23 = v23 + 8;
    sub_1C5A1DA30((uint64_t)&v23);
  }
}

uint64_t llvm::opt::ArgList::ClaimAllArgs(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v1 = *(unsigned int *)(this + 16);
  if ((_DWORD)v1)
  {
    v2 = 8 * v1;
    for (i = *(uint64_t **)(this + 8); !*i; ++i)
    {
      v2 -= 8;
      if (!v2)
        return this;
    }
  }
  else
  {
    i = *(uint64_t **)(this + 8);
  }
  v4 = *(_QWORD *)(this + 8) + 8 * v1;
  if (i != (uint64_t *)v4)
  {
    v5 = *i;
LABEL_9:
    if (*(_QWORD *)(v5 + 16))
      v5 = *(_QWORD *)(v5 + 16);
    if ((*(_BYTE *)(v5 + 44) & 1) == 0)
      *(_BYTE *)(v5 + 44) |= 1u;
    v6 = i + 1;
    while (v6 != (uint64_t *)v4)
    {
      v7 = *v6++;
      v5 = v7;
      if (v7)
      {
        i = v6 - 1;
        goto LABEL_9;
      }
    }
  }
  return this;
}

llvm::raw_ostream *llvm::opt::ArgList::print(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  uint64_t v3;
  uint64_t v4;
  llvm::opt::Arg **i;
  uint64_t v6;
  llvm::opt::Arg *v7;
  llvm::opt::Arg **v8;
  llvm::opt::Arg *v9;

  v3 = *((unsigned int *)this + 4);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    for (i = (llvm::opt::Arg **)*((_QWORD *)this + 1); !*i; ++i)
    {
      v4 -= 8;
      if (!v4)
        return this;
    }
  }
  else
  {
    i = (llvm::opt::Arg **)*((_QWORD *)this + 1);
  }
  v6 = *((_QWORD *)this + 1) + 8 * v3;
  if (i != (llvm::opt::Arg **)v6)
  {
    v7 = *i;
LABEL_9:
    sub_1C4816AD8(a2, "* ");
    this = llvm::opt::Arg::print(v7, a2);
    v8 = i + 1;
    while (v8 != (llvm::opt::Arg **)v6)
    {
      v9 = *v8++;
      v7 = v9;
      if (v9)
      {
        i = v8 - 1;
        goto LABEL_9;
      }
    }
  }
  return this;
}

llvm::raw_ostream *llvm::opt::ArgList::dump(llvm::opt::ArgList *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return llvm::opt::ArgList::print(this, v2);
}

llvm::opt::Arg *llvm::opt::DerivedArgList::AddSynthesizedArg(llvm::opt::DerivedArgList *this, llvm::opt::Arg *a2)
{
  llvm::opt::Arg *result;
  llvm::opt::Arg *v3;

  v3 = a2;
  sub_1C5A1D490((unsigned int *)this + 46, (char *)&v3);
  result = v3;
  v3 = 0;
  if (result)
  {
    llvm::opt::Arg::~Arg(result);
    return (llvm::opt::Arg *)MEMORY[0x1CAA32FC0]();
  }
  return result;
}

uint64_t llvm::opt::DerivedArgList::MakeFlagArg(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  size_t v9;
  const char *v10;
  size_t v11;
  llvm::opt::Arg *v12;
  int Index;
  uint64_t v15[4];
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _BYTE v19[40];
  const char *v20;
  llvm::opt::Arg *v21;
  uint64_t v22;
  __int128 v23;

  *(_QWORD *)&v23 = a3;
  *((_QWORD *)&v23 + 1) = a4;
  v22 = a2;
  v6 = **a3;
  if (v6)
    v7 = strlen((const char *)**a3);
  else
    v7 = 0;
  v18 = 261;
  v17[0] = v6;
  v17[1] = v7;
  v8 = (uint64_t)a3[1];
  if (v8)
    v9 = strlen((const char *)a3[1]);
  else
    v9 = 0;
  v16 = 261;
  v15[0] = v8;
  v15[1] = v9;
  sub_1C4825FE4(v17, v15, (uint64_t)v19);
  v20 = (const char *)sub_1C5A1C500(a1, (uint64_t)v19);
  v10 = (const char *)a3[1];
  if (v10)
    v11 = strlen(v10);
  else
    v11 = 0;
  Index = llvm::opt::InputArgList::MakeIndex(*(_QWORD *)(a1 + 176), v10, v11);
  sub_1C5A1D514((uint64_t *)&v21, &v23, &v20, &Index, &v22);
  sub_1C5A1D490((unsigned int *)(a1 + 184), (char *)&v21);
  v12 = v21;
  v21 = 0;
  if (v12)
  {
    llvm::opt::Arg::~Arg(v12);
    MEMORY[0x1CAA32FC0]();
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * *(unsigned int *)(a1 + 192) - 8);
}

uint64_t llvm::opt::DerivedArgList::MakeSeparateArg(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, size_t a6)
{
  uint64_t v10;
  const void *v11;
  size_t v12;
  int Index;
  uint64_t v14;
  size_t v15;
  const char *v16;
  size_t v17;
  llvm::opt::Arg *v18;
  uint64_t v20;
  uint64_t v21[4];
  __int16 v22;
  uint64_t v23[4];
  __int16 v24;
  _BYTE v25[40];
  const char *v26;
  llvm::opt::Arg *v27;
  int v28;
  uint64_t v29;
  __int128 v30;

  *(_QWORD *)&v30 = a3;
  *((_QWORD *)&v30 + 1) = a4;
  v29 = a2;
  v10 = *(_QWORD *)(a1 + 176);
  v11 = *(const void **)(a3 + 8);
  if (v11)
    v12 = strlen(*(const char **)(a3 + 8));
  else
    v12 = 0;
  Index = llvm::opt::InputArgList::MakeIndex(v10, v11, v12);
  llvm::opt::InputArgList::MakeIndex(v10, a5, a6);
  v28 = Index;
  v14 = **(_QWORD **)a3;
  if (v14)
    v15 = strlen(**(const char ***)a3);
  else
    v15 = 0;
  v24 = 261;
  v23[0] = v14;
  v23[1] = v15;
  v16 = *(const char **)(a3 + 8);
  if (v16)
    v17 = strlen(v16);
  else
    v17 = 0;
  v22 = 261;
  v21[0] = (uint64_t)v16;
  v21[1] = v17;
  sub_1C4825FE4(v23, v21, (uint64_t)v25);
  v26 = (const char *)sub_1C5A1C500(a1, (uint64_t)v25);
  v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 176) + 8 * (Index + 1));
  sub_1C5A1D750((uint64_t *)&v27, &v30, &v26, &v28, &v20, &v29);
  sub_1C5A1D490((unsigned int *)(a1 + 184), (char *)&v27);
  v18 = v27;
  v27 = 0;
  if (v18)
  {
    llvm::opt::Arg::~Arg(v18);
    MEMORY[0x1CAA32FC0]();
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * *(unsigned int *)(a1 + 192) - 8);
}

uint64_t sub_1C62E03E0(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 176) + 344);
}

void sub_1C62E03EC(unsigned int *a1, unint64_t a2)
{
  _QWORD *v3;
  unsigned int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, a2, 8, &v5);
  sub_1C62E0458(a1, v3);
  v4 = v5;
  if (*(unsigned int **)a1 != a1 + 4)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  a1[3] = v4;
}

unsigned int *sub_1C62E0458(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result[2];
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)result;
    v4 = 8 * v2;
    v5 = 8 * v2;
    do
    {
      v6 = *v3;
      *v3++ = 0;
      *a2++ = v6;
      v5 -= 8;
    }
    while (v5);
    v7 = *(_QWORD *)result - 8;
    do
    {
      result = *(unsigned int **)(v7 + v4);
      *(_QWORD *)(v7 + v4) = 0;
      if (result)
      {
        llvm::opt::Arg::~Arg((llvm::opt::Arg *)result);
        result = (unsigned int *)MEMORY[0x1CAA32FC0]();
      }
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

llvm::raw_ostream *llvm::opt::Option::print(llvm::opt::Option *this, llvm::raw_ostream *a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  char *v11;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  const void *v15;
  size_t v16;
  void *v17;
  _BYTE *v18;
  _QWORD **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  llvm::raw_ostream *v24;
  _QWORD v26[2];
  _QWORD v27[2];

  sub_1C4816AD8(a2, "<");
  v4 = *(_QWORD **)this;
  v5 = *(char *)(*(_QWORD *)this + 36);
  if (v5 <= 0xC)
  {
    sub_1C4816AD8(a2, off_1E818AF48[v5]);
    v4 = *(_QWORD **)this;
  }
  if (*v4)
  {
    sub_1C4816AD8(a2, " Prefixes:[");
    v6 = **(_QWORD ***)this;
    if (*v6)
    {
      v7 = v6 + 1;
      do
      {
        v8 = (_BYTE *)*((_QWORD *)a2 + 4);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 3))
        {
          v9 = llvm::raw_ostream::write(a2, 34);
        }
        else
        {
          *((_QWORD *)a2 + 4) = v8 + 1;
          *v8 = 34;
          v9 = a2;
        }
        v10 = sub_1C4816AD8(v9, (char *)*(v7 - 1));
        if (*v7)
          v11 = "\", ";
        else
          v11 = "\"";
        sub_1C4816AD8(v10, v11);
      }
      while (*v7++);
    }
    v13 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v13 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 93);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v13 + 1;
      *v13 = 93;
    }
  }
  v14 = sub_1C4816AD8(a2, " Name:\"");
  v15 = *(const void **)(*(_QWORD *)this + 8);
  if (v15)
  {
    v16 = strlen(*(const char **)(*(_QWORD *)this + 8));
    v17 = (void *)*((_QWORD *)v14 + 4);
    if (v16 <= *((_QWORD *)v14 + 3) - (_QWORD)v17)
    {
      if (v16)
      {
        memcpy(v17, v15, v16);
        *((_QWORD *)v14 + 4) += v16;
      }
    }
    else
    {
      llvm::raw_ostream::write(v14, (const char *)v15, v16);
    }
  }
  v18 = (_BYTE *)*((_QWORD *)v14 + 4);
  if ((unint64_t)v18 >= *((_QWORD *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 34);
  }
  else
  {
    *((_QWORD *)v14 + 4) = v18 + 1;
    *v18 = 34;
  }
  v19 = *(_QWORD ***)this;
  if (*(_WORD *)(*(_QWORD *)this + 44))
  {
    v20 = (uint64_t *)*((_QWORD *)this + 1);
    v21 = *v20;
    v27[0] = *v20 + ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)this + 44) - 1) << 6);
    v27[1] = v20;
    if (v21)
    {
      sub_1C4816AD8(a2, " Group:");
      llvm::opt::Option::print((llvm::opt::Option *)v27, a2);
      v19 = *(_QWORD ***)this;
    }
  }
  if (*((_WORD *)v19 + 23))
  {
    v22 = (uint64_t *)*((_QWORD *)this + 1);
    v23 = *v22;
    v26[0] = *v22 + ((unint64_t)(*((unsigned __int16 *)v19 + 23) - 1) << 6);
    v26[1] = v22;
    if (v23)
    {
      sub_1C4816AD8(a2, " Alias:");
      llvm::opt::Option::print((llvm::opt::Option *)v26, a2);
      v19 = *(_QWORD ***)this;
    }
  }
  if (*((_BYTE *)v19 + 36) == 10)
  {
    v24 = sub_1C4816AD8(a2, " NumArgs:");
    llvm::raw_ostream::operator<<(v24, *(unsigned __int8 *)(*(_QWORD *)this + 37));
  }
  return sub_1C4816AD8(a2, ">\n");
}

llvm::raw_ostream *llvm::opt::Option::dump(llvm::opt::Option *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return llvm::opt::Option::print(this, v2);
}

void llvm::opt::OptTable::printHelp(llvm::opt::OptTable *this, llvm::raw_ostream *a2, const char *a3, const char *a4, int a5, int a6)
{
  llvm::opt::OptTable::printHelp(this, a2, a3, a4, 0, a5 ^ 1, a6);
}

std::string *sub_1C62E0798(std::string *a1, const char ****a2)
{
  const char **v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  const char *v7;
  std::string::size_type v8;

  v4 = **a2;
  v5 = *v4;
  if (*v4)
    v6 = strlen(*v4);
  else
    v6 = 0;
  std::string::__init(a1, v5, v6);
  v7 = (const char *)(*a2)[1];
  if (v7)
    v8 = strlen(v7);
  else
    v8 = 0;
  return std::string::append(a1, v7, v8);
}

_QWORD *llvm::PassBuilder::registerCGSCCAnalyses(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *result;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *i;
  _QWORD *v20;

  v20 = &unk_1EF8F7250;
  v4 = sub_1C62EB93C(a2, (uint64_t *)&v20);
  if (!v4[1])
  {
    v5 = v4;
    v6 = (_QWORD *)operator new();
    *v6 = &off_1E818B438;
    v7 = v5[1];
    v5[1] = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v20 = &llvm::FunctionAnalysisManagerCGSCCProxy::Key;
  v8 = sub_1C62EB93C(a2, (uint64_t *)&v20);
  if (!v8[1])
  {
    v9 = v8;
    v10 = (_QWORD *)operator new();
    *v10 = &off_1E818B490;
    v11 = v9[1];
    v9[1] = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v20 = &llvm::PassInstrumentationAnalysis::Key;
  result = sub_1C62EB93C(a2, (uint64_t *)&v20);
  if (!result[1])
  {
    v13 = result;
    v14 = (_QWORD *)operator new();
    v15 = *(_QWORD *)(a1 + 136);
    *v14 = &off_1E818B4E8;
    v14[1] = v15;
    result = (_QWORD *)v13[1];
    v13[1] = v14;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  v16 = *(unsigned int *)(a1 + 1432);
  if ((_DWORD)v16)
  {
    v17 = *(_QWORD *)(a1 + 1424);
    v18 = 32 * v16;
    for (i = (_QWORD *)(v17 + 24); *i; i += 4)
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*i + 48))(*i, a2);
      v18 -= 32;
      if (!v18)
        return result;
    }
    sub_1C485C2F0();
    return (_QWORD *)llvm::PassBuilder::registerLoopAnalyses();
  }
  return result;
}

void llvm::PassBuilder::registerLoopAnalyses(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *i;
  _QWORD *v29;

  v29 = &unk_1EF8F5738;
  v4 = sub_1C5A58940(a2, (uint64_t *)&v29);
  if (!v4[1])
  {
    v5 = v4;
    v6 = (_QWORD *)operator new();
    *v6 = &off_1E818BF38;
    v7 = v5[1];
    v5[1] = (uint64_t)v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v29 = &llvm::LoopAccessAnalysis::Key;
  v8 = sub_1C5A58940(a2, (uint64_t *)&v29);
  if (!v8[1])
  {
    v9 = v8;
    v10 = (_QWORD *)operator new();
    *v10 = &off_1E818BF90;
    v11 = v9[1];
    v9[1] = (uint64_t)v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v29 = &llvm::DDGAnalysis::Key;
  v12 = sub_1C5A58940(a2, (uint64_t *)&v29);
  if (!v12[1])
  {
    v13 = v12;
    v14 = (_QWORD *)operator new();
    *v14 = &off_1E818BFE8;
    v15 = v13[1];
    v13[1] = (uint64_t)v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  v29 = &llvm::IVUsersAnalysis::Key;
  v16 = sub_1C5A58940(a2, (uint64_t *)&v29);
  if (!v16[1])
  {
    v17 = v16;
    v18 = (_QWORD *)operator new();
    *v18 = &off_1E818C040;
    v19 = v17[1];
    v17[1] = (uint64_t)v18;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v29 = &llvm::PassInstrumentationAnalysis::Key;
  v20 = sub_1C5A58940(a2, (uint64_t *)&v29);
  if (!v20[1])
  {
    v21 = v20;
    v22 = (_QWORD *)operator new();
    v23 = *(_QWORD *)(a1 + 136);
    *v22 = &off_1E818C098;
    v22[1] = v23;
    v24 = v21[1];
    v21[1] = (uint64_t)v22;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  v25 = *(unsigned int *)(a1 + 1752);
  if ((_DWORD)v25)
  {
    v26 = *(_QWORD *)(a1 + 1744);
    v27 = 32 * v25;
    for (i = (_QWORD *)(v26 + 24); *i; i += 4)
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*i + 48))(*i, a2);
      v27 -= 32;
      if (!v27)
        return;
    }
    sub_1C485C2F0();
    sub_1C62E0C44();
  }
}

void sub_1C62E0C44()
{
  __n128 v0;
  uint64_t v1;
  void **v2;
  __n128 *v3;
  unsigned __int32 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 *v19;
  void **v20;

  sub_1C5A64980();
  v0 = sub_1C5A649C4();
  v2 = (void **)(v1 + 8);
  v3->n128_u64[0] = (unint64_t)off_1E818C0F0;
  v3->n128_u32[2] = v4;
  v3[1] = v0;
  v3[2].n128_u64[0] = v5;
  v19 = v3;
  sub_1C5A64868();
  if (v8)
  {
    v9 = sub_1C5A648AC(v6, (uint64_t *)&v19);
    v17 = sub_1C5A64AC0((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v18, 0, 0, 0, (uint64_t)v19);
    if (v17)
      sub_1C57055F0(v17);
  }
  else
  {
    *v7 = v6;
    sub_1C5A64B08((uint64_t)(v7 + 1));
  }
  v20 = v2;
  sub_1C4764BBC(&v20);
  sub_1C5A64A8C();
}

void sub_1C62E0CD4()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C160);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E0D18()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C1A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E0D5C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C260);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E0DA0()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C2A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E0DE4()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C2E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E0E28()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C320);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E0E6C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E8191320);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E0EB8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C3E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E0EFC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C420);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E0F40()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C460);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E0F84()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C4A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E0FC8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C4E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E100C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C520);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E1050()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C560);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E1094()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C5A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E10D8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C5E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E111C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C620);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E1160()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C660);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E11A4()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C6A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E11E8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C6E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E122C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E8192320);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E1278()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C720);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E12BC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E81917E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E1304()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E8192160);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E1350()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E81917A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E1398()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E81918E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E13E0()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E8191160);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E1428()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E81920A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E1470()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C760);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E14B4()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E81920E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E14FC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E81916A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E1544()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E81922A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

_QWORD **sub_1C62E158C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  char *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;

  sub_1C5A64980();
  sub_1C5A64A7C();
  sub_1C62EF8B8(v1, v2);
  v3 = sub_1C5A649B0((uint64_t)&unk_1E8191990);
  sub_1C62EF8B8((uint64_t)v3, v4);
  v12 = v0;
  sub_1C5A64868();
  if (v7)
  {
    v8 = sub_1C5A648AC(v5, &v12);
    v9 = sub_1C5A64B20((uint64_t)v8);
    if (v9)
      sub_1C57055F0(v9);
  }
  else
  {
    sub_1C5A64B60(v6);
  }
  return sub_1C5A3BEC4(&v11);
}

void sub_1C62E1618()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C7A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E165C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C7E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E16A0()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E8191CA0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E16E8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C820);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E172C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E81921A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E1778()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C860);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E17BC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E8191860);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E1804()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E81922E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E184C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E8191FE0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E1894()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E8191660);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void **sub_1C62E18E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char v9;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void *v16[19];
  uint64_t v17;

  sub_1C5A649A4();
  v2 = sub_1C5A64980();
  sub_1C5A64BF0(v16);
  v3 = *(_QWORD *)(v1 + 96);
  v4 = *(_OWORD *)(v1 + 80);
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  v5 = *(_QWORD *)(v1 + 120);
  v13 = *(_OWORD *)(v1 + 104);
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  v6 = *(_QWORD *)(v1 + 144);
  v14 = *(_OWORD *)(v1 + 128);
  v15 = v4;
  *(_QWORD *)(v1 + 136) = 0;
  *(_QWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 128) = 0;
  *(_QWORD *)v2 = &unk_1E8191260;
  sub_1C5A64BF0((void *)(v2 + 8));
  *(_OWORD *)(v2 + 88) = v15;
  *(_QWORD *)(v2 + 104) = v3;
  v16[10] = 0;
  v16[11] = 0;
  *(_OWORD *)(v2 + 112) = v13;
  *(_QWORD *)(v2 + 128) = v5;
  memset(&v16[12], 0, 32);
  *(_OWORD *)(v2 + 136) = v14;
  *(_QWORD *)(v2 + 152) = v6;
  memset(&v16[16], 0, 24);
  v17 = v2;
  sub_1C5A64868();
  if (v9)
  {
    v11 = sub_1C5A648AC(v7, &v17);
    v12 = v17;
    *(_QWORD *)(v0 + 8) = v11;
    v17 = 0;
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    *v8 = v2;
    *(_QWORD *)(v0 + 8) = v8 + 1;
    v17 = 0;
  }
  return sub_1C5A3BFEC(v16);
}

void sub_1C62E1A00()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (_QWORD *)sub_1C5A6488C();
  v2 = *v0;
  *v1 = &off_1E818C8A0;
  v1[1] = v2;
  sub_1C5A6484C();
  if (v5)
  {
    v6 = sub_1C5A6485C(v3);
    v14 = sub_1C5705608((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
    if (v14)
      sub_1C57055F0(v14);
  }
  else
  {
    sub_1C5A64880(v3, v4);
  }
  sub_1C57055FC();
}

void sub_1C62E1A4C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E8191CE0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

uint64_t sub_1C62E1A94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  char v7;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[272];
  uint64_t v20;

  sub_1C5A649A4();
  v20 = *MEMORY[0x1E0C80C00];
  sub_1C5A64B44();
  sub_1C5A64A7C();
  sub_1C5A5B1C0(v1, v2);
  v3 = sub_1C5A649B0((uint64_t)&unk_1E8191390);
  sub_1C5A5B1C0((uint64_t)v3, v4);
  v18 = v0;
  sub_1C5A64868();
  if (v7)
  {
    v9 = sub_1C5A648AC(v5, &v18);
    v17 = sub_1C5A64AAC((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v18);
    if (v17)
      sub_1C57055F0(v17);
  }
  else
  {
    *v6 = v0;
    sub_1C5A64AFC((uint64_t)(v6 + 1));
  }
  return sub_1C58BBA20((uint64_t)v19);
}

void sub_1C62E1B48()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C960);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E1B8C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E81918A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E1BD8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E8192020);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E1C20()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (_QWORD *)sub_1C5A6488C();
  v2 = *v0;
  *v1 = &off_1E818C9A0;
  v1[1] = v2;
  sub_1C5A6484C();
  if (v5)
  {
    v6 = sub_1C5A6485C(v3);
    v14 = sub_1C5705608((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
    if (v14)
      sub_1C57055F0(v14);
  }
  else
  {
    sub_1C5A64880(v3, v4);
  }
  sub_1C57055FC();
}

void sub_1C62E1C6C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818C9E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E1CB0(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = sub_1C5A64998();
  v4 = (_QWORD *)sub_1C5A64BD0(v3, *a2, a2[1]);
  v5 = sub_1C5A64838(v4, (uint64_t)&unk_1E8191820);
  if (v7)
  {
    v8 = sub_1C5A6485C((uint64_t)v5);
    v16 = sub_1C5705608((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15, v17, v18);
    if (v16)
      sub_1C57055F0(v16);
  }
  else
  {
    sub_1C5A64880((uint64_t)v5, v6);
  }
  sub_1C57055FC();
}

void sub_1C62E1D14()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818CA20);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E1D58()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E8192060);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E1DA0()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E81911A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E1DE8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818CAA0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E1E2C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E8191C60);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E1E74(uint64_t a1, __int16 *a2)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = sub_1C5A64974();
  v4 = *a2;
  *(_QWORD *)v3 = &unk_1E8191620;
  *(_WORD *)(v3 + 8) = v4;
  sub_1C5A6484C();
  if (v7)
  {
    v8 = sub_1C5A6485C(v5);
    v16 = sub_1C5705608((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15, v17, v18);
    if (v16)
      sub_1C57055F0(v16);
  }
  else
  {
    sub_1C5A64880(v5, v6);
  }
  sub_1C57055FC();
}

void sub_1C62E1EDC()
{
  char *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = sub_1C5A64918();
  v2 = *v0;
  *(_QWORD *)v1 = &unk_1E8191360;
  *(_BYTE *)(v1 + 8) = v2;
  sub_1C5A6484C();
  if (v5)
  {
    v6 = sub_1C5A6485C(v3);
    v14 = sub_1C5705608((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
    if (v14)
      sub_1C57055F0(v14);
  }
  else
  {
    sub_1C5A64880(v3, v4);
  }
  sub_1C57055FC();
}

void sub_1C62E1F30(uint64_t a1, uint64_t a2)
{
  __n128 v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;

  sub_1C5A64B44();
  v3 = sub_1C5A64A4C();
  v4 = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a2 + 56) = 0;
  v24 = v4;
  sub_1C5A649F8(v5, v6, v7, v8, v9, v10, v11, v12, v21, v22, v3, v23);
  *(_BYTE *)(v13 + 56) = v14;
  *(_QWORD *)(v13 + 64) = v15;
  v25 = 0;
  v26 = v13;
  sub_1C5A64868();
  if (v18)
  {
    v19 = sub_1C5A648AC(v16, &v26);
    v20 = sub_1C5A64A98((uint64_t)v19);
    if (v20)
      sub_1C57055F0(v20);
  }
  else
  {
    *v17 = v16;
    sub_1C5A64B14((uint64_t)(v17 + 1));
  }
  sub_1C5A55010((uint64_t)&v21);
  sub_1C5A64C10();
}

void sub_1C62E1FC4()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (_QWORD *)sub_1C5A6488C();
  v2 = *v0;
  *v1 = &off_1E818CB20;
  v1[1] = v2;
  sub_1C5A6484C();
  if (v5)
  {
    v6 = sub_1C5A6485C(v3);
    v14 = sub_1C5705608((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
    if (v14)
      sub_1C57055F0(v14);
  }
  else
  {
    sub_1C5A64880(v3, v4);
  }
  sub_1C57055FC();
}

void sub_1C62E2010()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (_QWORD *)sub_1C5A6488C();
  v2 = *v0;
  *v1 = &off_1E818CB60;
  v1[1] = v2;
  sub_1C5A6484C();
  if (v5)
  {
    v6 = sub_1C5A6485C(v3);
    v14 = sub_1C5705608((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
    if (v14)
      sub_1C57055F0(v14);
  }
  else
  {
    sub_1C5A64880(v3, v4);
  }
  sub_1C57055FC();
}

void sub_1C62E205C()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (_QWORD *)sub_1C5A6488C();
  v2 = *v0;
  *v1 = &off_1E818CBE0;
  v1[1] = v2;
  sub_1C5A6484C();
  if (v5)
  {
    v6 = sub_1C5A6485C(v3);
    v14 = sub_1C5705608((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
    if (v14)
      sub_1C57055F0(v14);
  }
  else
  {
    sub_1C5A64880(v3, v4);
  }
  sub_1C57055FC();
}

void sub_1C62E20A8()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (_QWORD *)sub_1C5A6488C();
  v2 = *v0;
  *v1 = &off_1E818CC20;
  v1[1] = v2;
  sub_1C5A6484C();
  if (v5)
  {
    v6 = sub_1C5A6485C(v3);
    v14 = sub_1C5705608((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
    if (v14)
      sub_1C57055F0(v14);
  }
  else
  {
    sub_1C5A64880(v3, v4);
  }
  sub_1C57055FC();
}

void sub_1C62E20F4()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (_QWORD *)sub_1C5A6488C();
  v2 = *v0;
  *v1 = &off_1E818CC60;
  v1[1] = v2;
  sub_1C5A6484C();
  if (v5)
  {
    v6 = sub_1C5A6485C(v3);
    v14 = sub_1C5705608((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
    if (v14)
      sub_1C57055F0(v14);
  }
  else
  {
    sub_1C5A64880(v3, v4);
  }
  sub_1C57055FC();
}

void sub_1C62E2140()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (_QWORD *)sub_1C5A6488C();
  v2 = *v0;
  *v1 = &off_1E818CCA0;
  v1[1] = v2;
  sub_1C5A6484C();
  if (v5)
  {
    v6 = sub_1C5A6485C(v3);
    v14 = sub_1C5705608((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
    if (v14)
      sub_1C57055F0(v14);
  }
  else
  {
    sub_1C5A64880(v3, v4);
  }
  sub_1C57055FC();
}

void sub_1C62E218C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[688];
  uint64_t v20;
  uint64_t v21;

  sub_1C5A649A4();
  v21 = *MEMORY[0x1E0C80C00];
  sub_1C5A64998();
  sub_1C5A64B80();
  sub_1C62F1C0C(v2, v3);
  v20 = *(_QWORD *)(v1 + 688);
  v4 = sub_1C5A64B70((uint64_t)&off_1E818CCE0);
  sub_1C62F1C0C(v4, v5);
  *(_QWORD *)(v0 + 696) = v20;
  sub_1C5A64868();
  if (v8)
  {
    v9 = sub_1C5A6485C(v6);
    v17 = sub_1C5705608((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v18, v0);
    if (v17)
      sub_1C57055F0(v17);
  }
  else
  {
    *v7 = v0;
    sub_1C5A64874((uint64_t)(v7 + 1));
  }
  sub_1C5A5507C((uint64_t)v19);
  sub_1C5A64A40();
}

void sub_1C62E2244()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E8191D60);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E228C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E8192120);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E22D4()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818CD20);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E2318()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;

  sub_1C5A64B34();
  v2 = (_QWORD *)sub_1C5A64980();
  v3 = &v17;
  v17 = (uint64_t)&v17;
  v18 = &v17;
  v19 = 0;
  v4 = v1[2];
  if (v4)
  {
    v6 = *v1;
    v5 = (uint64_t *)v1[1];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    v8 = v17;
    *(_QWORD *)(v17 + 8) = v5;
    *v5 = v8;
    *(_QWORD *)(v6 + 8) = &v17;
    v17 = v6;
    v19 = v4;
    v1[2] = 0;
    v3 = (uint64_t *)v6;
  }
  *v2 = &off_1E818CD60;
  v2[1] = v2 + 1;
  v2[2] = v2 + 1;
  v2[3] = 0;
  if (v4)
  {
    v9 = v18;
    v10 = *v18;
    *(_QWORD *)(v10 + 8) = &v17;
    *(_QWORD *)v3[1] = v10;
    v11 = v2[1];
    *(_QWORD *)(v11 + 8) = v9;
    *v9 = v11;
    v2[1] = v3;
    v3[1] = (uint64_t)(v2 + 1);
    v2[3] = v4;
    v19 = 0;
  }
  v20 = v2;
  sub_1C5A64868();
  if (v14)
  {
    v15 = sub_1C5A648AC(v12, (uint64_t *)&v20);
    v16 = (uint64_t)v20;
    *(_QWORD *)(v0 + 8) = v15;
    v20 = 0;
    if (v16)
      sub_1C57055F0(v16);
  }
  else
  {
    sub_1C5A64880(v12, v13);
    v20 = 0;
  }
  sub_1C62EA368(&v17);
}

void sub_1C62E2420()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E8191D20);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E246C(uint64_t a1, uint64_t a2)
{
  __n128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  sub_1C5A64B44();
  v3 = sub_1C5A64A4C();
  v4 = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 56) = 0;
  v24 = v4;
  sub_1C5A649F8(v5, v6, v7, v8, v9, v10, v11, v12, v21, v22, v3, v23);
  *(_DWORD *)(v13 + 56) = v14;
  *(_QWORD *)(v13 + 64) = v15;
  v25 = 0;
  v26 = v13;
  sub_1C5A64868();
  if (v18)
  {
    v19 = sub_1C5A648AC(v16, &v26);
    v20 = sub_1C5A64A98((uint64_t)v19);
    if (v20)
      sub_1C57055F0(v20);
  }
  else
  {
    *v17 = v16;
    sub_1C5A64B14((uint64_t)(v17 + 1));
  }
  sub_1C5A55010((uint64_t)&v21);
  sub_1C5A64C10();
}

void sub_1C62E2500()
{
  char *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = sub_1C5A64918();
  v2 = *v0;
  *(_QWORD *)v1 = &off_1E818CDA0;
  *(_BYTE *)(v1 + 8) = v2;
  sub_1C5A6484C();
  if (v5)
  {
    v6 = sub_1C5A6485C(v3);
    v14 = sub_1C5705608((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
    if (v14)
      sub_1C57055F0(v14);
  }
  else
  {
    sub_1C5A64880(v3, v4);
  }
  sub_1C57055FC();
}

void sub_1C62E2550()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818CDE0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E2594()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (_QWORD *)sub_1C5A6488C();
  v2 = *v0;
  *v1 = &unk_1E81915E0;
  v1[1] = v2;
  sub_1C5A6484C();
  if (v5)
  {
    v6 = sub_1C5A6485C(v3);
    v14 = sub_1C5705608((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
    if (v14)
      sub_1C57055F0(v14);
  }
  else
  {
    sub_1C5A64880(v3, v4);
  }
  sub_1C57055FC();
}

void sub_1C62E25E4()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818CE20);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E2628()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818CE60);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E266C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818CEA0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E26B0()
{
  char *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = sub_1C5A64918();
  v2 = *v0;
  *(_QWORD *)v1 = &off_1E818CEE0;
  *(_BYTE *)(v1 + 8) = v2;
  sub_1C5A6484C();
  if (v5)
  {
    v6 = sub_1C5A6485C(v3);
    v14 = sub_1C5705608((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
    if (v14)
      sub_1C57055F0(v14);
  }
  else
  {
    sub_1C5A64880(v3, v4);
  }
  sub_1C57055FC();
}

void sub_1C62E2700()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818CF20);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E2744()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E81919E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E278C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818CF60);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E27D0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  char v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1C5A64B34();
  v0 = sub_1C5A64998();
  sub_1C5A64BBC(v0);
  v2 = sub_1C5A64838(v1, (uint64_t)&unk_1E8192260);
  if (v4)
  {
    v5 = sub_1C5A6485C((uint64_t)v2);
    v13 = sub_1C5705608((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);
    if (v13)
      sub_1C57055F0(v13);
  }
  else
  {
    sub_1C5A64880((uint64_t)v2, v3);
  }
  sub_1C57055FC();
}

void sub_1C62E2828()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t *v5;
  char v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;

  sub_1C5A64B34();
  v1 = sub_1C5A6490C();
  v2 = *((_QWORD *)v0 + 2);
  v3 = *v0;
  *(_QWORD *)v0 = 0;
  *((_QWORD *)v0 + 1) = 0;
  *((_QWORD *)v0 + 2) = 0;
  *(_QWORD *)v1 = off_1E818CFA0;
  *(_OWORD *)(v1 + 8) = v3;
  *(_QWORD *)(v1 + 24) = v2;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v20 = v1;
  sub_1C5A64868();
  if (v6)
  {
    v7 = sub_1C5A648AC(v4, &v20);
    v15 = sub_1C5A64AC0((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14, v16, v17, v18, v19, v20);
    if (v15)
      sub_1C57055F0(v15);
  }
  else
  {
    *v5 = v4;
    sub_1C5A64B08((uint64_t)(v5 + 1));
  }
  v21 = (void **)&v17;
  sub_1C4765410(&v21);
  sub_1C5A64A8C();
}

void sub_1C62E28B8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1C5A64974();
  sub_1C5A64C18();
  *(_QWORD *)v0 = &off_1E818CFE0;
  *(_QWORD *)(v0 + 8) = v1;
  *(_DWORD *)(v0 + 16) = v2;
  sub_1C5A6484C();
  if (v5)
  {
    v6 = sub_1C5A6485C(v3);
    v14 = sub_1C5705608((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
    if (v14)
      sub_1C57055F0(v14);
  }
  else
  {
    sub_1C5A64880(v3, v4);
  }
  sub_1C57055FC();
}

void sub_1C62E291C(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = (_QWORD *)sub_1C5A64980();
  v5 = *a2;
  *a2 = 0;
  sub_1C5A64BDC(v4 + 2, a2 + 1);
  *v4 = &unk_1E81915A0;
  v4[1] = v5;
  sub_1C5A64868();
  if (v8)
  {
    v9 = sub_1C5A6485C(v6);
    v17 = sub_1C5705608((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v18, (uint64_t)v4);
    if (v17)
      sub_1C57055F0(v17);
  }
  else
  {
    *v7 = v4;
    *(_QWORD *)(a1 + 8) = v7 + 1;
  }
  sub_1C5A64B90();
}

void sub_1C62E29A0()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818D020);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E29E4(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  uint64_t *v8;
  char v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  __int128 v14;
  uint64_t v15;

  v3 = sub_1C5A64980();
  v12 = *a2;
  v4 = v12;
  v13 = *((_DWORD *)a2 + 4);
  v5 = v13;
  *(_QWORD *)v3 = &off_1E818D060;
  *(_OWORD *)(v3 + 8) = v4;
  *(_DWORD *)(v3 + 24) = v5;
  v14 = 0u;
  v6 = *(__int128 *)((char *)a2 + 24);
  *(__int128 *)((char *)a2 + 24) = 0u;
  *(_OWORD *)(v3 + 32) = v6;
  v15 = v3;
  sub_1C5A64868();
  if (v9)
  {
    v10 = sub_1C5A648AC(v7, &v15);
    v11 = sub_1C5A64A98((uint64_t)v10);
    if (v11)
      sub_1C57055F0(v11);
  }
  else
  {
    *v8 = v7;
    sub_1C5A64B14((uint64_t)(v8 + 1));
  }
  sub_1C62EA578((uint64_t)&v12);
  sub_1C5A64A8C();
}

void sub_1C62E2A80()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E8191A60);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E2AC8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818D0A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E2B0C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E8192220);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E2B54(uint64_t a1, int *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = sub_1C5A64974();
  v4 = *a2;
  *(_QWORD *)v3 = &off_1E818D0E0;
  *(_DWORD *)(v3 + 8) = v4;
  sub_1C5A6484C();
  if (v7)
  {
    v8 = sub_1C5A6485C(v5);
    v16 = sub_1C5705608((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15, v17, v18);
    if (v16)
      sub_1C57055F0(v16);
  }
  else
  {
    sub_1C5A64880(v5, v6);
  }
  sub_1C57055FC();
}

void sub_1C62E2BB8(uint64_t a1, __int16 *a2)
{
  uint64_t v3;
  __int16 v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = sub_1C5A64974();
  v4 = *a2;
  v5 = *((_BYTE *)a2 + 2);
  *(_QWORD *)v3 = &off_1E818D120;
  *(_BYTE *)(v3 + 10) = v5;
  *(_WORD *)(v3 + 8) = v4;
  sub_1C5A6484C();
  if (v8)
  {
    v9 = sub_1C5A6485C(v6);
    v17 = sub_1C5705608((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v18, v19);
    if (v17)
      sub_1C57055F0(v17);
  }
  else
  {
    sub_1C5A64880(v6, v7);
  }
  sub_1C57055FC();
}

void sub_1C62E2C24()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1C5A64A30();
  v1 = sub_1C5A64974();
  *(_QWORD *)v1 = &off_1E818D160;
  *(_OWORD *)(v1 + 8) = *v0;
  sub_1C5A6484C();
  if (v4)
  {
    v5 = sub_1C5A6485C(v2);
    v13 = sub_1C5705608((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);
    if (v13)
      sub_1C57055F0(v13);
  }
  else
  {
    sub_1C5A64880(v2, v3);
  }
  sub_1C57055FC();
}

void sub_1C62E2C80(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = (_QWORD *)operator new();
  v5 = *a2;
  v6 = a2[1];
  v8 = a2[3];
  v19 = a2[2];
  v7 = v19;
  v20 = v8;
  v10 = a2[5];
  v21 = a2[4];
  v9 = v21;
  v22 = v10;
  v12 = a2[7];
  v23 = a2[6];
  v11 = v23;
  v24 = v12;
  v14 = a2[9];
  v25 = a2[8];
  v13 = v25;
  v26 = v14;
  v16 = a2[11];
  v27 = a2[10];
  v15 = v27;
  v28 = v16;
  v29 = a2[12];
  v17 = v29;
  *a2 = 0;
  *v4 = &off_1E818D220;
  v4[1] = v5;
  v4[2] = v6;
  v4[3] = v7;
  v4[4] = v8;
  v4[5] = v9;
  v4[6] = v10;
  v4[7] = v11;
  v4[8] = v12;
  v4[9] = v13;
  v4[10] = v14;
  v4[11] = v15;
  v4[12] = v16;
  v4[13] = v17;
  v18[0] = 0;
  v18[1] = v6;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 0;
  llvm::AAEvaluator::~AAEvaluator((llvm::AAEvaluator *)v18);
}

uint64_t sub_1C62E2D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v10[351];
  uint64_t v11;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v7 = v4;
  v11 = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)operator new();
  sub_1C62F435C((uint64_t)v10, v6);
  *v8 = &off_1E818D320;
  sub_1C62F435C((uint64_t)(v8 + 1), v10);
  *(_QWORD *)v7 = v8;
  *(_BYTE *)(v7 + 8) = 0;
  return sub_1C62EA5E0((uint64_t)v10);
}

uint64_t sub_1C62E2DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[2368];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  sub_1C5A5BC14((uint64_t)v6, a2);
  v7 = *(_DWORD *)(a2 + 2368);
  *(_QWORD *)v4 = &unk_1E81907E0;
  sub_1C5A5BC14(v4 + 8, (uint64_t)v6);
  *(_DWORD *)(v4 + 2376) = v7;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 0;
  return sub_1C57906B0((uint64_t)v6);
}

uint64_t sub_1C62E2EB4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD v6[37];

  v6[36] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)operator new();
  sub_1C62F5D68(v6, a2);
  *v4 = &unk_1E8191DA0;
  sub_1C62F5D68(v4 + 1, (uint64_t)v6);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 0;
  return sub_1C62EA7A0((uint64_t)v6);
}

uint64_t *sub_1C62E2F64(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  __int128 v10;
  uint64_t v11[2];
  int v12;

  v4 = operator new();
  v5 = *a2;
  v10 = a2[1];
  v6 = a2[2];
  v7 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  v8 = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = 0;
  *(_QWORD *)v4 = &off_1E818D9A0;
  *(_OWORD *)(v4 + 8) = v5;
  *(_OWORD *)(v4 + 24) = v10;
  *(_OWORD *)(v4 + 40) = v6;
  *(_QWORD *)(v4 + 56) = v7;
  v11[0] = 0;
  *(_QWORD *)&v5 = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = 0;
  *(_QWORD *)(v4 + 64) = v5;
  v11[1] = 0;
  *(_DWORD *)(v4 + 72) = v8;
  v12 = 0;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 0;
  return sub_1C5A55620(v11);
}

uint64_t sub_1C62E3018(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int16 v14;
  _QWORD v15[21];
  uint64_t v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  v5 = a2[1];
  v10 = *a2;
  v11 = v5;
  v12 = *((_QWORD *)a2 + 4);
  v6 = *(__int128 *)((char *)a2 + 40);
  *(__int128 *)((char *)a2 + 40) = 0u;
  v14 = *((_WORD *)a2 + 28);
  v13 = v6;
  sub_1C62F6F9C(v15, (uint64_t)(a2 + 4));
  v7 = v11;
  *(_OWORD *)(v4 + 8) = v10;
  v16 = *((_QWORD *)a2 + 29);
  v17 = *((_BYTE *)a2 + 240);
  *(_QWORD *)v4 = &unk_1E8190E20;
  *(_OWORD *)(v4 + 24) = v7;
  *(_QWORD *)(v4 + 40) = v12;
  v8 = v13;
  v13 = 0u;
  *(_OWORD *)(v4 + 48) = v8;
  *(_WORD *)(v4 + 64) = v14;
  sub_1C62F6F9C((_QWORD *)(v4 + 72), (uint64_t)v15);
  *(_QWORD *)(v4 + 240) = v16;
  *(_BYTE *)(v4 + 248) = v17;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 0;
  return sub_1C62EA844((uint64_t)&v10);
}

_QWORD *sub_1C62E314C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD v6[70];

  v4 = (_QWORD *)operator new();
  sub_1C5A5C40C((uint64_t)v6, a2);
  *v4 = &unk_1E8190860;
  sub_1C5A5C40C((uint64_t)(v4 + 1), (uint64_t)v6);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 0;
  return sub_1C5A55684(v6);
}

uint64_t sub_1C62E31D0(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v18[2];
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = operator new();
  v5 = a2[1];
  v6 = a2[2];
  v7 = *((_QWORD *)a2 + 9);
  v8 = *a2;
  v9 = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 9) = 0;
  v10 = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = 0;
  v11 = a2[6];
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  v12 = *((_QWORD *)a2 + 14);
  v13 = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  v14 = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = 0;
  *(_QWORD *)v4 = &unk_1E8191BE0;
  v15 = *((_QWORD *)a2 + 20);
  v16 = a2[9];
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 19) = 0;
  *((_QWORD *)a2 + 20) = 0;
  *(_OWORD *)(v4 + 8) = v8;
  *(_OWORD *)(v4 + 56) = a2[3];
  *(_OWORD *)(v4 + 40) = v6;
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 72) = v9;
  *(_QWORD *)(v4 + 80) = v7;
  v18[0] = 0;
  *(_QWORD *)&v5 = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = 0;
  *(_QWORD *)(v4 + 88) = v5;
  v18[1] = 0;
  *(_DWORD *)(v4 + 96) = v10;
  v19 = 0;
  *(_OWORD *)(v4 + 104) = v11;
  v20 = 0;
  v21 = 0;
  *(_QWORD *)(v4 + 120) = v12;
  *(_QWORD *)(v4 + 128) = v13;
  v22 = 0;
  v23[0] = 0;
  *(_QWORD *)&v11 = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = 0;
  *(_QWORD *)(v4 + 136) = v11;
  v23[1] = 0;
  *(_DWORD *)(v4 + 144) = v14;
  v24 = 0;
  *(_OWORD *)(v4 + 152) = v16;
  *(_QWORD *)(v4 + 168) = v15;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 0;
  sub_1C62EA8E4((uint64_t)v23);
  return sub_1C62EA8E4((uint64_t)v18);
}

uint64_t sub_1C62E3310(uint64_t a1, __int128 *a2)
{
  _QWORD *v4;
  __int128 v6[44];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)operator new();
  sub_1C62F9A94((uint64_t)v6, a2);
  *v4 = &unk_1E8190720;
  sub_1C62F9A94((uint64_t)(v4 + 1), v6);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 0;
  return sub_1C5A55934((uint64_t)v6);
}

uint64_t sub_1C62E33C0(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v11[2];
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = operator new();
  v5 = *a2;
  v6 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  v7 = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  v8 = *((_QWORD *)a2 + 7);
  v9 = *(__int128 *)((char *)a2 + 40);
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *(_QWORD *)v4 = &off_1E818E760;
  *(_OWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 24) = v6;
  v11[0] = 0;
  *(_QWORD *)&v5 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)(v4 + 32) = v5;
  v11[1] = 0;
  *(_DWORD *)(v4 + 40) = v7;
  v12 = 0;
  *(_OWORD *)(v4 + 48) = v9;
  *(_QWORD *)(v4 + 64) = v8;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 0;
  return sub_1C62EA928((uint64_t)v11);
}

uint64_t sub_1C62E3484(uint64_t a1, __int128 *a2)
{
  _QWORD *v4;
  __int128 v6[48];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)operator new();
  sub_1C62FAD50((uint64_t)v6, a2);
  *v4 = &unk_1E8191060;
  sub_1C62FAD50((uint64_t)(v4 + 1), v6);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 0;
  return sub_1C5A55A68((uint64_t)v6);
}

void **sub_1C62E3534(uint64_t a1)
{
  _QWORD *v2;
  void *v4[15];
  void *v5[2];
  _DWORD v6[14];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5[0] = v6;
  v5[1] = (void *)0x600000000;
  v6[12] = 0;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  sub_1C62E932C(v5);
  v2 = (_QWORD *)operator new();
  sub_1C62EAA54((uint64_t)v4, (uint64_t)v5);
  *v2 = &unk_1E81905E0;
  sub_1C62EAA54((uint64_t)(v2 + 1), (uint64_t)v4);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 31) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 35) = 1;
  sub_1C62E72F8();
  sub_1C62E77F0();
  sub_1C5A55BE0(v4);
  return sub_1C5A55BE0(v5);
}

void **sub_1C62E3648(uint64_t a1)
{
  _QWORD *v2;
  void *v4[15];
  void *v5[2];
  _DWORD v6[14];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5[0] = v6;
  v5[1] = (void *)0x600000000;
  v6[12] = 0;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  sub_1C62E937C(v5);
  v2 = (_QWORD *)operator new();
  sub_1C62EAA54((uint64_t)v4, (uint64_t)v5);
  *v2 = &unk_1E81905E0;
  sub_1C62EAA54((uint64_t)(v2 + 1), (uint64_t)v4);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 31) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 35) = 1;
  sub_1C62E72F8();
  sub_1C62E77F0();
  sub_1C5A55BE0(v4);
  return sub_1C5A55BE0(v5);
}

void **sub_1C62E375C@<X0>(int *a1@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  void *v11[15];
  void *v12[2];
  _DWORD v13[14];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12[0] = v13;
  v12[1] = (void *)0x600000000;
  v13[12] = 0;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C62E93CC(v12, a1);
  v9 = (_QWORD *)operator new();
  sub_1C62EAA54((uint64_t)v11, (uint64_t)v12);
  *v9 = &unk_1E81905E0;
  sub_1C62EAA54((uint64_t)(v9 + 1), (uint64_t)v11);
  *(_QWORD *)a5 = v9;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_BYTE *)(a5 + 32) = a2;
  *(_BYTE *)(a5 + 33) = a3;
  *(_BYTE *)(a5 + 34) = a4;
  *(_BYTE *)(a5 + 35) = 1;
  sub_1C62E72F8();
  sub_1C62E77F0();
  sub_1C5A55BE0(v11);
  return sub_1C5A55BE0(v12);
}

void sub_1C62E3890(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E818E8A0;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void sub_1C62E3900(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E818E8E0;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void sub_1C62E3970(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E818E920;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void sub_1C62E39E0(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &unk_1E8190A20;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void sub_1C62E3A54(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &unk_1E81908A0;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void sub_1C62E3AC8(__int16 *a1@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  __int16 v11;

  v10 = operator new();
  v11 = *a1;
  *(_QWORD *)v10 = &unk_1E8190960;
  *(_WORD *)(v10 + 8) = v11;
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_BYTE *)(a5 + 32) = a2;
  *(_BYTE *)(a5 + 33) = a3;
  *(_BYTE *)(a5 + 34) = a4;
  *(_BYTE *)(a5 + 35) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void sub_1C62E3B74(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &unk_1E8190AA0;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void sub_1C62E3BE8(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &unk_1E81908E0;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void sub_1C62E3C5C(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E818E9E0;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void sub_1C62E3CCC(uint64_t a1, char *a2)
{
  uint64_t v4;
  char v5;

  v4 = operator new();
  v5 = *a2;
  *(_QWORD *)v4 = &unk_1E8190A60;
  *(_BYTE *)(v4 + 8) = v5;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void sub_1C62E3D4C(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)operator new();
  v5 = *a2;
  *v4 = &unk_1E8190B20;
  v4[1] = v5;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void sub_1C62E3DC8(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)operator new();
  v5 = *a2;
  *v4 = &off_1E818EA20;
  v4[1] = v5;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void sub_1C62E3E40(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)operator new();
  v5 = *a2;
  *v4 = &off_1E818EA60;
  v4[1] = v5;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void sub_1C62E3EB8(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)operator new();
  v5 = *a2;
  *v4 = &off_1E818EAA0;
  v4[1] = v5;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void sub_1C62E3F30(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)operator new();
  v5 = *a2;
  *v4 = &off_1E818EAE0;
  v4[1] = v5;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void sub_1C62E3FA8(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)operator new();
  v5 = *a2;
  *v4 = &off_1E818EB20;
  v4[1] = v5;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void sub_1C62E4020(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E818EB60;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void sub_1C62E4090(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E818EBA0;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void sub_1C62E4100(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E818EBE0;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void sub_1C62E4170(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E818EC20;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void sub_1C62E41E0(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E818EC60;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void sub_1C62E4250(uint64_t a1, __int16 *a2)
{
  uint64_t v4;
  __int16 v5;

  v4 = operator new();
  v5 = *a2;
  *(_QWORD *)v4 = &unk_1E81909A0;
  *(_WORD *)(v4 + 8) = v5;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void sub_1C62E42D0(uint64_t *a1@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  int v12;

  v10 = operator new();
  v11 = *a1;
  v12 = *((_DWORD *)a1 + 2);
  *(_QWORD *)v10 = &unk_1E8190920;
  *(_QWORD *)(v10 + 8) = v11;
  *(_DWORD *)(v10 + 16) = v12;
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_BYTE *)(a5 + 32) = a2;
  *(_BYTE *)(a5 + 33) = a3;
  *(_BYTE *)(a5 + 34) = a4;
  *(_BYTE *)(a5 + 35) = 0;
  sub_1C62E72F8();
  sub_1C62E77F0();
}

void **sub_1C62E4380(uint64_t a1)
{
  _QWORD *v2;
  void *v4[15];
  void *v5[2];
  _DWORD v6[14];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5[0] = v6;
  v5[1] = (void *)0x600000000;
  v6[12] = 0;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  sub_1C62E9FDC(v5);
  v2 = (_QWORD *)operator new();
  sub_1C62EAA54((uint64_t)v4, (uint64_t)v5);
  *v2 = &unk_1E81905E0;
  sub_1C62EAA54((uint64_t)(v2 + 1), (uint64_t)v4);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 31) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 35) = 1;
  sub_1C62E72F8();
  sub_1C62E77F0();
  sub_1C5A55BE0(v4);
  return sub_1C5A55BE0(v5);
}

void sub_1C62E4494()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_1C5A64A30();
  v1 = sub_1C5A64980();
  v2 = *v0;
  *v0 = 0;
  v3 = *((_WORD *)v0 + 4);
  *(_QWORD *)v1 = &unk_1E8191220;
  *(_QWORD *)(v1 + 8) = v2;
  *(_WORD *)(v1 + 16) = v3;
  sub_1C5A6484C();
  if (v6)
  {
    v7 = sub_1C5A6485C(v4);
    v15 = sub_1C5705608((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14, v16, v17);
    if (v15)
      sub_1C57055F0(v15);
  }
  else
  {
    sub_1C5A64880(v4, v5);
  }
  sub_1C57055FC();
}

void sub_1C62E44FC(char **a1)
{
  __n128 v2;
  uint64_t v3;
  void **v4;
  __n128 *v5;
  unsigned __int32 v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 *v21;
  void **v22;

  sub_1C5A64980();
  v2 = sub_1C5A649C4();
  v4 = (void **)(v3 + 8);
  v5->n128_u64[0] = (unint64_t)off_1E818ECA0;
  v5->n128_u32[2] = v6;
  v5[1] = v2;
  v5[2].n128_u64[0] = v7;
  v21 = v5;
  sub_1C5A64868();
  if (v10)
  {
    v11 = sub_1C4D62F9C(a1, (uint64_t *)&v21);
    v19 = sub_1C5A64AC0((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18, v20, 0, 0, 0, (uint64_t)v21);
    if (v19)
      sub_1C57055F0(v19);
  }
  else
  {
    *v9 = v8;
    sub_1C5A64B08((uint64_t)(v9 + 1));
  }
  v22 = v4;
  sub_1C4764BBC(&v22);
  sub_1C5A64A8C();
}

void sub_1C62E4590()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_1C5A64A30();
  v1 = sub_1C5A64980();
  v2 = *v0;
  *v0 = 0;
  v3 = *((_DWORD *)v0 + 2);
  *(_QWORD *)v1 = &unk_1E817AF50;
  *(_QWORD *)(v1 + 8) = v2;
  *(_DWORD *)(v1 + 16) = v3;
  sub_1C5A6484C();
  if (v6)
  {
    v7 = sub_1C5A6485C(v4);
    v15 = sub_1C5705608((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14, v16, v17);
    if (v15)
      sub_1C57055F0(v15);
  }
  else
  {
    sub_1C5A64880(v4, v5);
  }
  sub_1C57055FC();
}

void sub_1C62E45F8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818ED60);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E463C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818EDA0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E4680()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818EDE0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E46C4()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818EE20);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E4708(uint64_t a1, int *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = sub_1C5A64974();
  v4 = *a2;
  *(_QWORD *)v3 = &unk_1E81914A0;
  *(_DWORD *)(v3 + 8) = v4;
  sub_1C5A6484C();
  if (v7)
  {
    v8 = sub_1C5A6485C(v5);
    v16 = sub_1C5705608((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15, v17, v18);
    if (v16)
      sub_1C57055F0(v16);
  }
  else
  {
    sub_1C5A64880(v5, v6);
  }
  sub_1C57055FC();
}

void sub_1C62E4770()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818D1A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E47B4()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E8191460);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E4800()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E8191420);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E4848()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E81914E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E4890()
{
  char *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = sub_1C5A64918();
  v2 = *v0;
  *(_QWORD *)v1 = &unk_1E8191520;
  *(_BYTE *)(v1 + 8) = v2;
  sub_1C5A6484C();
  if (v5)
  {
    v6 = sub_1C5A6485C(v3);
    v14 = sub_1C5705608((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
    if (v14)
      sub_1C57055F0(v14);
  }
  else
  {
    sub_1C5A64880(v3, v4);
  }
  sub_1C57055FC();
}

void sub_1C62E48E4(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = (_QWORD *)operator new();
  v5 = *a2;
  v6 = a2[1];
  v8 = a2[3];
  v19 = a2[2];
  v7 = v19;
  v20 = v8;
  v10 = a2[5];
  v21 = a2[4];
  v9 = v21;
  v22 = v10;
  v12 = a2[7];
  v23 = a2[6];
  v11 = v23;
  v24 = v12;
  v14 = a2[9];
  v25 = a2[8];
  v13 = v25;
  v26 = v14;
  v16 = a2[11];
  v27 = a2[10];
  v15 = v27;
  v28 = v16;
  v29 = a2[12];
  v17 = v29;
  *a2 = 0;
  *v4 = &off_1E818D220;
  v4[1] = v5;
  v4[2] = v6;
  v4[3] = v7;
  v4[4] = v8;
  v4[5] = v9;
  v4[6] = v10;
  v4[7] = v11;
  v4[8] = v12;
  v4[9] = v13;
  v4[10] = v14;
  v4[11] = v15;
  v4[12] = v16;
  v4[13] = v17;
  v18[0] = 0;
  v18[1] = v6;
  *(_QWORD *)a1 = v4;
  *(_WORD *)(a1 + 8) = 0;
  llvm::AAEvaluator::~AAEvaluator((llvm::AAEvaluator *)v18);
}

uint64_t sub_1C62E4994(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[2368];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  sub_1C5A5BC14((uint64_t)v6, a2);
  v7 = *(_DWORD *)(a2 + 2368);
  *(_QWORD *)v4 = &unk_1E81907E0;
  sub_1C5A5BC14(v4 + 8, (uint64_t)v6);
  *(_DWORD *)(v4 + 2376) = v7;
  *(_QWORD *)a1 = v4;
  *(_WORD *)(a1 + 8) = 0;
  return sub_1C57906B0((uint64_t)v6);
}

uint64_t *sub_1C62E4A54(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  __int128 v10;
  uint64_t v11[2];
  int v12;

  v4 = operator new();
  v5 = *a2;
  v10 = a2[1];
  v6 = a2[2];
  v7 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  v8 = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = 0;
  *(_QWORD *)v4 = &off_1E818D9A0;
  *(_OWORD *)(v4 + 8) = v5;
  *(_OWORD *)(v4 + 24) = v10;
  *(_OWORD *)(v4 + 40) = v6;
  *(_QWORD *)(v4 + 56) = v7;
  v11[0] = 0;
  *(_QWORD *)&v5 = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = 0;
  *(_QWORD *)(v4 + 64) = v5;
  v11[1] = 0;
  *(_DWORD *)(v4 + 72) = v8;
  v12 = 0;
  *(_QWORD *)a1 = v4;
  *(_WORD *)(a1 + 8) = 0;
  return sub_1C5A55620(v11);
}

uint64_t sub_1C62E4B08(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int16 v14;
  _QWORD v15[21];
  uint64_t v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  v5 = a2[1];
  v10 = *a2;
  v11 = v5;
  v12 = *((_QWORD *)a2 + 4);
  v6 = *(__int128 *)((char *)a2 + 40);
  *(__int128 *)((char *)a2 + 40) = 0u;
  v14 = *((_WORD *)a2 + 28);
  v13 = v6;
  sub_1C62F6F9C(v15, (uint64_t)(a2 + 4));
  v7 = v11;
  *(_OWORD *)(v4 + 8) = v10;
  v16 = *((_QWORD *)a2 + 29);
  v17 = *((_BYTE *)a2 + 240);
  *(_QWORD *)v4 = &unk_1E8190E20;
  *(_OWORD *)(v4 + 24) = v7;
  *(_QWORD *)(v4 + 40) = v12;
  v8 = v13;
  v13 = 0u;
  *(_OWORD *)(v4 + 48) = v8;
  *(_WORD *)(v4 + 64) = v14;
  sub_1C62F6F9C((_QWORD *)(v4 + 72), (uint64_t)v15);
  *(_QWORD *)(v4 + 240) = v16;
  *(_BYTE *)(v4 + 248) = v17;
  *(_QWORD *)a1 = v4;
  *(_WORD *)(a1 + 8) = 0;
  return sub_1C62EA844((uint64_t)&v10);
}

uint64_t sub_1C62E4C3C(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v18[2];
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = operator new();
  v5 = a2[1];
  v6 = a2[2];
  v7 = *((_QWORD *)a2 + 9);
  v8 = *a2;
  v9 = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 9) = 0;
  v10 = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = 0;
  v11 = a2[6];
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  v12 = *((_QWORD *)a2 + 14);
  v13 = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  v14 = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = 0;
  *(_QWORD *)v4 = &unk_1E8191BE0;
  v15 = *((_QWORD *)a2 + 20);
  v16 = a2[9];
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 19) = 0;
  *((_QWORD *)a2 + 20) = 0;
  *(_OWORD *)(v4 + 8) = v8;
  *(_OWORD *)(v4 + 56) = a2[3];
  *(_OWORD *)(v4 + 40) = v6;
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 72) = v9;
  *(_QWORD *)(v4 + 80) = v7;
  v18[0] = 0;
  *(_QWORD *)&v5 = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = 0;
  *(_QWORD *)(v4 + 88) = v5;
  v18[1] = 0;
  *(_DWORD *)(v4 + 96) = v10;
  v19 = 0;
  *(_OWORD *)(v4 + 104) = v11;
  v20 = 0;
  v21 = 0;
  *(_QWORD *)(v4 + 120) = v12;
  *(_QWORD *)(v4 + 128) = v13;
  v22 = 0;
  v23[0] = 0;
  *(_QWORD *)&v11 = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = 0;
  *(_QWORD *)(v4 + 136) = v11;
  v23[1] = 0;
  *(_DWORD *)(v4 + 144) = v14;
  v24 = 0;
  *(_OWORD *)(v4 + 152) = v16;
  *(_QWORD *)(v4 + 168) = v15;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  *(_QWORD *)a1 = v4;
  *(_WORD *)(a1 + 8) = 0;
  sub_1C62EA8E4((uint64_t)v23);
  return sub_1C62EA8E4((uint64_t)v18);
}

uint64_t sub_1C62E4D7C(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v11[2];
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = operator new();
  v5 = *a2;
  v6 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  v7 = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  v8 = *((_QWORD *)a2 + 7);
  v9 = *(__int128 *)((char *)a2 + 40);
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *(_QWORD *)v4 = &off_1E818E760;
  *(_OWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 24) = v6;
  v11[0] = 0;
  *(_QWORD *)&v5 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)(v4 + 32) = v5;
  v11[1] = 0;
  *(_DWORD *)(v4 + 40) = v7;
  v12 = 0;
  *(_OWORD *)(v4 + 48) = v9;
  *(_QWORD *)(v4 + 64) = v8;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  *(_QWORD *)a1 = v4;
  *(_WORD *)(a1 + 8) = 0;
  return sub_1C62EA928((uint64_t)v11);
}

void sub_1C62E4E40(uint64_t a1, __n128 *a2)
{
  _QWORD *v4;
  __n128 v5;
  __n128 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  char *v12;
  uint64_t v13;
  _QWORD v14[3];
  unsigned __int32 v15;
  uint64_t v16;
  void **v17;

  v4 = (_QWORD *)sub_1C5A64980();
  v5 = *a2;
  v6 = a2[1];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  v15 = a2[2].n128_u32[0];
  *v4 = &unk_1E8190BA0;
  memset(v14, 0, sizeof(v14));
  v7 = sub_1C5A64BD0((uint64_t)v4, v5, v6);
  *(_DWORD *)(v7 + 40) = v8;
  v16 = v7;
  sub_1C5A64868();
  if (v11)
  {
    v12 = sub_1C5A648AC(v9, &v16);
    v13 = v16;
    *(_QWORD *)(a1 + 8) = v12;
    v16 = 0;
    if (v13)
      sub_1C57055F0(v13);
  }
  else
  {
    sub_1C5A64880(v9, v10);
    v16 = 0;
  }
  v17 = (void **)v14;
  sub_1C4764BBC(&v17);
  sub_1C5A64C10();
}

void **sub_1C62E4F10@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  BOOL v10;
  _QWORD *v11;
  void *v13[16];

  v13[15] = *(void **)MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 80) == *(_QWORD *)(a1 + 72);
  v11 = (_QWORD *)operator new();
  sub_1C62EAA54((uint64_t)v13, a1);
  *v11 = &unk_1E81905E0;
  sub_1C62EAA54((uint64_t)(v11 + 1), (uint64_t)v13);
  *(_QWORD *)a5 = v11;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_BYTE *)(a5 + 32) = a2;
  *(_BYTE *)(a5 + 33) = a3;
  *(_BYTE *)(a5 + 34) = a4;
  *(_BYTE *)(a5 + 35) = v10;
  sub_1C62E72F8();
  sub_1C62E77F0();
  return sub_1C5A55BE0(v13);
}

void sub_1C62E5018()
{
  __n128 v0;
  uint64_t v1;
  void **v2;
  __n128 *v3;
  unsigned __int32 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 *v19;
  void **v20;

  sub_1C5A64980();
  v0 = sub_1C5A649C4();
  v2 = (void **)(v1 + 8);
  v3->n128_u64[0] = (unint64_t)off_1E818EE60;
  v3->n128_u32[2] = v4;
  v3[1] = v0;
  v3[2].n128_u64[0] = v5;
  v19 = v3;
  sub_1C5A64868();
  if (v8)
  {
    v9 = sub_1C5A648AC(v6, (uint64_t *)&v19);
    v17 = sub_1C5A64AC0((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v18, 0, 0, 0, (uint64_t)v19);
    if (v17)
      sub_1C57055F0(v17);
  }
  else
  {
    *v7 = v6;
    sub_1C5A64B08((uint64_t)(v7 + 1));
  }
  v20 = v2;
  sub_1C4764BBC(&v20);
  sub_1C5A64A8C();
}

void sub_1C62E50A8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818EEA0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E50EC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E81913E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5134()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818EEE0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5178()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818EF20);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E51BC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818EF60);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5200()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818EFA0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5244()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818EFE0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5288()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F020);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E52CC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F060);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5310()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F0A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5354()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F0E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5398()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F120);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E53DC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F160);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5420()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F1A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5464()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F1E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E54A8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F220);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E54EC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F260);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5530()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F2A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5574()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F2E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E55B8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F320);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E55FC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F360);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5640()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F3A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5684()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F3E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E56C8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F420);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E570C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F460);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5750()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F4A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5794()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F4E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E57D8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F520);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E581C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F560);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5860()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F5A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E58A4()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F5E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E58E8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F620);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E592C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F660);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5970()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F6A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E59B4()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F6E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E59F8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F720);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5A3C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E8190B60);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5A84()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F7E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5AC8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F820);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5B0C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F860);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5B50()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F8A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5B94()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E8191560);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5BDC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F8E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5C20()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F920);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5C64()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F960);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5CA8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F9A0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5CEC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818F9E0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5D30()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818FA20);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5D74()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818FA60);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5DB8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818FAA0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5DFC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818FAE0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5E40()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818FB20);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5E84()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818FB60);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5EC8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818FBA0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5F0C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818FBE0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5F50()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818FC20);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5F94()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818FC60);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E5FD8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818FCA0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E601C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818FCE0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E6060()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818FD20);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E60A4()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818FD60);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E60E8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818FDA0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void sub_1C62E612C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&off_1E818FDE0);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

