uint64_t sub_1C620A530(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C620A548(_QWORD *a1)
{
  sub_1C620A3F8(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C620A56C(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C620A578(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C620A588(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_3:
    v4 = &off_1E81491F0;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_3;
  }
  return result;
}

_QWORD *sub_1C620A5F4(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C620A5FC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E81491A0;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C620A64C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C620A654(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C620A668(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C620A67C(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C620A690(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void sub_1C620A6BC(_WORD *a1, _WORD *a2, int **a3, __int128 *a4, uint64_t a5)
{
  sub_1C47AD050((uint64_t)&qword_1ED7FE130, 0, 0);
  dword_1ED7FE1B0 = 0;
  qword_1ED7FE1B8 = (uint64_t)&off_1E81491F0;
  *(_QWORD *)&dword_1ED7FE1C0 = 0;
  qword_1ED7FE130 = (uint64_t)off_1E8149138;
  qword_1ED7FE1C8 = (uint64_t)&off_1E81491A0;
  qword_1ED7FE1D0 = (uint64_t)&qword_1ED7FE130;
  qword_1ED7FE1D8 = (uint64_t)&unk_1ED7FE1E8;
  qword_1ED7FE1E0 = 0x800000000;
  qword_1ED7FE368 = (uint64_t)&off_1E81492E0;
  qword_1ED7FE380 = (uint64_t)&qword_1ED7FE368;
  sub_1C620A77C(a1, a2, a3, a4, a5);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7FE130);
}

void sub_1C620A77C(_WORD *a1, _WORD *a2, int **a3, __int128 *a4, uint64_t a5)
{
  int *v10;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7FE130, "regalloc-enable-advisor", 0x17uLL);
  word_1ED7FE13A = word_1ED7FE13A & 0xFF9F | (32 * (*a1 & 3));
  word_1ED7FE13A = word_1ED7FE13A & 0xFFF8 | *a2 & 7;
  v10 = *a3;
  dword_1ED7FE1B0 = **a3;
  byte_1ED7FE1C4 = 1;
  dword_1ED7FE1C0 = *v10;
  xmmword_1ED7FE150 = *a4;
  sub_1C522B60C(*(_QWORD *)a5, *(_DWORD *)(a5 + 8));
}

void sub_1C620A820()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C620A834()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E81492E0;
  return result;
}

void sub_1C620A858(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E81492E0;
}

void sub_1C620A874(unsigned __int8 *a1, size_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  _QWORD v11[5];
  int v12;
  char v13;

  v11[0] = a1;
  v11[1] = a2;
  v11[2] = a4;
  v11[3] = a5;
  v11[4] = &off_1E81491F0;
  v13 = 1;
  v12 = a3;
  v7 = sub_1C522B650((unint64_t)v11);
  v8 = qword_1ED7FE1D8 + 48 * qword_1ED7FE1E0;
  v9 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 32) = &off_1E8149210;
  v10 = *(_BYTE *)(v7 + 44);
  *(_DWORD *)(v8 + 40) = *(_DWORD *)(v7 + 40);
  *(_BYTE *)(v8 + 44) = v10;
  *(_QWORD *)(v8 + 32) = &off_1E81491F0;
  LODWORD(qword_1ED7FE1E0) = qword_1ED7FE1E0 + 1;
  llvm::cl::AddLiteralOption(qword_1ED7FE1D0, a1, a2);
}

void sub_1C620A928(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1ED7FE1D8, a1, 48, &v8);
  v2 = (_OWORD *)qword_1ED7FE1D8;
  if ((_DWORD)qword_1ED7FE1E0)
  {
    v3 = qword_1ED7FE1D8 + 48 * qword_1ED7FE1E0;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E8149210;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E81491F0;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1ED7FE1D8;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1ED7FE1E8)
    free(v2);
  qword_1ED7FE1D8 = (uint64_t)v1;
  HIDWORD(qword_1ED7FE1E0) = v7;
}

void sub_1C620A9F4(_WORD *a1, __int128 *a2, int **a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&EvictInterferenceCutoff, 0, 0);
  dword_1ED82FCA8 = 0;
  qword_1ED82FCB0 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED82FCB8 = 0;
  EvictInterferenceCutoff = (uint64_t)&unk_1E819E3B0;
  qword_1ED82FCC0 = (uint64_t)&unk_1E819E2C0;
  qword_1ED82FCC8 = (uint64_t)&off_1E7F95260;
  qword_1ED82FCE0 = (uint64_t)&qword_1ED82FCC8;
  llvm::cl::Option::setArgStr(v6, "regalloc-eviction-max-interference-cutoff", 0x29uLL);
  word_1ED82FC32 = (32 * (*a1 & 3)) | word_1ED82FC32 & 0xFF9F;
  xmmword_1ED82FC48 = *a2;
  dword_1ED82FCA8 = **a3;
  byte_1ED82FCBC = 1;
  dword_1ED82FCB8 = dword_1ED82FCA8;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&EvictInterferenceCutoff);
}

uint64_t llvm::createFastRegisterAllocator(llvm *this)
{
  uint64_t v1;
  void (**v2)(void);
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = operator new();
  v4[0] = &off_1E7FB3428;
  v4[1] = sub_1C522B938;
  v5 = v4;
  sub_1C522B940(v1, (uint64_t)v4, 1);
  if (v5 == v4)
  {
    v2 = (void (**)(void))(v4[0] + 32);
    goto LABEL_4;
  }
  if (v5)
  {
    v2 = (void (**)(void))(*v5 + 40);
LABEL_4:
    (*v2)();
  }
  return v1;
}

void llvm::initializeRegAllocFastPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED7FE388);
  if (v2 != -1)
  {
    v5[0] = sub_1C522B8A8;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED7FE388, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void sub_1C620ABF8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v7;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 || *(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 16);
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_1C52313F4(a1);
      return;
    }
    if (!(_DWORD)v3)
    {
LABEL_13:
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
    v4 = 40 * v3;
    v5 = *(_QWORD *)a1 + 24;
    while (1)
    {
      v6 = *(_DWORD *)(v5 - 24);
      if (v6 == -2)
        goto LABEL_11;
      if (v6 != -1)
        break;
LABEL_12:
      v5 += 40;
      v4 -= 40;
      if (!v4)
        goto LABEL_13;
    }
    v7 = *(void **)(v5 - 16);
    if ((void *)v5 != v7)
      free(v7);
LABEL_11:
    *(_DWORD *)(v5 - 24) = -1;
    goto LABEL_12;
  }
}

void sub_1C620ACA8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v7;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 || *(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 16);
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_1C52312A4(a1);
      return;
    }
    if (!(_DWORD)v3)
    {
LABEL_13:
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
    v4 = 32 * v3;
    v5 = *(_QWORD *)a1 + 24;
    while (1)
    {
      v6 = *(_DWORD *)(v5 - 24);
      if (v6 == -2)
        goto LABEL_11;
      if (v6 != -1)
        break;
LABEL_12:
      v5 += 32;
      v4 -= 32;
      if (!v4)
        goto LABEL_13;
    }
    v7 = *(void **)(v5 - 16);
    if ((void *)v5 != v7)
      free(v7);
LABEL_11:
    *(_DWORD *)(v5 - 24) = -1;
    goto LABEL_12;
  }
}

_QWORD *sub_1C620AD54(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v2 = (uint64_t)result;
  *result = result + 2;
  result[1] = 0x400000000;
  result[5] = 0;
  result[6] = 0;
  result[4] = result + 5;
  v3 = *(_QWORD *)(a2 + 32);
  if (**(_WORD **)(a2 + 16) == 14)
  {
    v4 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v4 == 2)
      return result;
    v5 = v3 + 32 * v4;
    v3 += 64;
  }
  else
  {
    v5 = v3 + 32;
  }
  do
  {
    if (!*(_BYTE *)v3)
    {
      if (*(_DWORD *)(v3 + 4))
      {
        v6 = *(_DWORD *)(v3 + 4);
        result = (_QWORD *)sub_1C4854E58(v2, &v6);
      }
    }
    v3 += 32;
  }
  while (v3 != v5);
  return result;
}

_DWORD *sub_1C620AE08(uint64_t a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_1C620AE84(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C620AF20(a1, a2, v7);
    *v5 = *a2;
    *((_QWORD *)v5 + 1) = v5 + 6;
    *((_QWORD *)v5 + 2) = 0x200000000;
  }
  return v5;
}

uint64_t sub_1C620AE84(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 40 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_DWORD *)(a1 + 40 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_DWORD *sub_1C620AF20(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C522E984(a1, v6);
  v8 = 0;
  sub_1C620AE84(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_1C620AFD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  void *v12;
  _DWORD *v13;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)a1;
    v8 = 40 * v6;
    do
    {
      *v7 = -1;
      v7 += 10;
      v8 -= 40;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_DWORD *)v4;
      if (*(_DWORD *)v4 <= 0xFFFFFFFD)
      {
        v13 = 0;
        sub_1C620AE84(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        v10 = v13;
        *v13 = *(_DWORD *)v4;
        *((_QWORD *)v10 + 2) = 0x200000000;
        *((_QWORD *)v10 + 1) = v10 + 6;
        v11 = (uint64_t)(v10 + 2);
        if (*(_DWORD *)(v4 + 16))
          sub_1C522EA48(v11, v4 + 8);
        ++*(_DWORD *)(a1 + 8);
        v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12)
          free(v12);
      }
      v4 += 40;
    }
    while (v4 != a3);
  }
}

unsigned int *sub_1C620B0C0(unsigned int *result)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_DWORD **)result;
        v3 = 8 * v1;
        do
        {
          *v2 = -1;
          v2 += 2;
          v3 -= 8;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C522F350(result);
    }
  }
  return result;
}

uint64_t sub_1C620B110(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  _BYTE v13[48];
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[7];

  v17[6] = *MEMORY[0x1E0C80C00];
  v9 = *a2;
  v10 = 0;
  sub_1C620B288((uint64_t)&v7, a1, &v9, &v10);
  v4 = v7;
  if (v8)
  {
    v11 = v13;
    v12 = 0x600000000;
    v14 = *a2;
    v15 = v17;
    v16 = 0x600000000;
    sub_1C620B218(a1 + 40, (unint64_t)&v14);
    if (v15 != v17)
      free(v15);
    if (v11 != v13)
      free(v11);
    v5 = *(_DWORD *)(a1 + 48) - 1;
    *(_DWORD *)(v4 + 8) = v5;
  }
  else
  {
    v5 = *(_DWORD *)(v7 + 8);
  }
  return *(_QWORD *)(a1 + 40) + 72 * v5 + 8;
}

unint64_t sub_1C620B218(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  _QWORD *v4;
  uint64_t v5;

  result = sub_1C5231184(a1, a2);
  v4 = (_QWORD *)(*(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 8));
  *v4 = *(_QWORD *)result;
  v4[2] = 0x600000000;
  v4[1] = v4 + 3;
  v5 = (uint64_t)(v4 + 1);
  if (*(_DWORD *)(result + 16))
    result = sub_1C614D378(v5, result + 8);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C620B288(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v16 = 0;
  result = sub_1C620B350(a2, *a3, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v10 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v11 = 2;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(unsigned int *)(a2 + 16);
    }
    v12 = 0;
    v13 = v10 + 16 * v11;
  }
  else
  {
    result = (uint64_t)sub_1C620B3FC((_DWORD *)a2, a3, v16);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v14 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v15 = 2;
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(unsigned int *)(a2 + 16);
    }
    v13 = v14 + 16 * v15;
    v12 = 1;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v12;
  return result;
}

uint64_t sub_1C620B350(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 2;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C620B3FC(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 2;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C5230FFC((uint64_t)a1, v6);
  v8 = 0;
  sub_1C620B350((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_1C620B4B8(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 40);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C620B350((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

void sub_1C620B580(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 72, &v5);
  sub_1C620B5EC((uint64_t *)a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C620B5EC(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v4 = *a1 + 72 * v2;
    v5 = a2 + 24;
    v6 = *a1 + 8;
    do
    {
      v7 = v6 - 8;
      *(_QWORD *)(v5 - 24) = *(_QWORD *)(v6 - 8);
      *(_QWORD *)(v5 - 16) = v5;
      *(_QWORD *)(v5 - 8) = 0x600000000;
      if (*(_DWORD *)(v6 + 8))
        sub_1C614D378(v5 - 16, v6);
      v5 += 72;
      v6 += 72;
    }
    while (v7 + 72 != v4);
    v8 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v8)
    {
      v9 = *a1;
      v10 = 72 * v8;
      do
      {
        v11 = *(void **)(v9 + v10 - 64);
        if ((void *)(v9 + v10 - 48) != v11)
          free(v11);
        v10 -= 72;
      }
      while (v10);
    }
  }
}

_DWORD *sub_1C620B6B8(uint64_t a1, int *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v9 = 0;
LABEL_5:
    v6 = sub_1C620B774(a1, a2, v9);
    *v6 = *a2;
    *((_WORD *)v6 + 2) = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = (37 * *a2) & (v3 - 1);
  v6 = (_DWORD *)(*(_QWORD *)a1 + 8 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v10 = 0;
    v11 = 1;
    while (v7 != -1)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v7 == -2;
      if (v12)
        v10 = v6;
      v13 = v5 + v11++;
      v5 = v13 & v4;
      v6 = (_DWORD *)(*(_QWORD *)a1 + 8 * (v13 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v10)
      v9 = v10;
    else
      v9 = v6;
    goto LABEL_5;
  }
  return v6;
}

_DWORD *sub_1C620B774(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  int v7;
  int v9;
  unsigned int v10;
  int v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1C52311EC(a1, 2 * v6);
    v7 = *a2;
    v9 = *(_DWORD *)(a1 + 16) - 1;
    v10 = (37 * *a2) & v9;
    a3 = (_DWORD *)(*(_QWORD *)a1 + 8 * v10);
    v11 = *a3;
    if (*a2 != *a3)
    {
      v12 = 0;
      v13 = 1;
      while (v11 != -1)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -2;
        if (v14)
          v12 = a3;
        v15 = v10 + v13++;
        v10 = v15 & v9;
        a3 = (_DWORD *)(*(_QWORD *)a1 + 8 * v10);
        v11 = *a3;
        if (v7 == *a3)
          goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a3;
      goto LABEL_4;
    }
    sub_1C52311EC(a1, v6);
    v7 = *a2;
    v16 = *(_DWORD *)(a1 + 16) - 1;
    v17 = (37 * *a2) & v16;
    a3 = (_DWORD *)(*(_QWORD *)a1 + 8 * v17);
    v18 = *a3;
    if (*a2 != *a3)
    {
      v12 = 0;
      v19 = 1;
      while (v18 != -1)
      {
        if (v12)
          v20 = 0;
        else
          v20 = v18 == -2;
        if (v20)
          v12 = a3;
        v21 = v17 + v19++;
        v17 = v21 & v16;
        a3 = (_DWORD *)(*(_QWORD *)a1 + 8 * v17);
        v18 = *a3;
        if (v7 == *a3)
          goto LABEL_4;
      }
LABEL_20:
      if (v12)
        a3 = v12;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C620B8E8(uint64_t result, int *a2, int *a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(_DWORD **)result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = *(_DWORD **)result;
    do
    {
      *v6 = -1;
      v6 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    v7 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      v8 = *(_DWORD *)(result + 16) - 1;
      v9 = v8 & (37 * v7);
      v10 = &v3[2 * v9];
      v11 = *v10;
      if (v7 != *v10)
      {
        v12 = 0;
        v13 = 1;
        while (v11 != -1)
        {
          if (v12)
            v14 = 0;
          else
            v14 = v11 == -2;
          if (v14)
            v12 = v10;
          v15 = v9 + v13++;
          v9 = v15 & v8;
          v10 = &v3[2 * (v15 & v8)];
          v11 = *v10;
          if (v7 == *v10)
            goto LABEL_7;
        }
        if (v12)
          v10 = v12;
      }
LABEL_7:
      *v10 = v7;
      *((_WORD *)v10 + 2) = *((_WORD *)a2 + 2);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

void sub_1C620B9BC(_WORD *a1)
{
  uint64_t v2;

  v2 = sub_1C47AD050((uint64_t)&qword_1ED7FE3C0, 0, 0);
  byte_1ED7FE440 = 0;
  qword_1ED7FE448 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED7FE450 = 0;
  qword_1ED7FE3C0 = (uint64_t)&unk_1E819E898;
  qword_1ED7FE458 = (uint64_t)&off_1E819E9A0;
  qword_1ED7FE460 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7FE478 = (uint64_t)&qword_1ED7FE460;
  llvm::cl::Option::setArgStr(v2, "rafast-ignore-missing-defs", 0x1AuLL);
  word_1ED7FE3CA = (32 * (*a1 & 3)) | word_1ED7FE3CA & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7FE3C0);
}

_QWORD *sub_1C620BA6C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E81496A0;
  v2 = a1 + 21;
  v3 = (_QWORD *)a1[24];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      return sub_1C47A80D0(a1);
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  return sub_1C47A80D0(a1);
}

uint64_t llvm::createGreedyRegisterAllocator(llvm *this)
{
  uint64_t v1;
  _QWORD *v2;
  void (**v3)(_QWORD *);
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = operator new();
  v5[0] = &off_1E7FB3428;
  v5[1] = sub_1C52316C4;
  v6 = v5;
  sub_1C52316CC(v1, v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = (void (**)(_QWORD *))(v5[0] + 32);
    v2 = v5;
  }
  else
  {
    if (!v6)
      return v1;
    v3 = (void (**)(_QWORD *))(*v6 + 40);
  }
  (*v3)(v2);
  return v1;
}

void llvm::initializeRAGreedyPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED7FE480);
  if (v2 != -1)
  {
    v5[0] = sub_1C52315C8;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED7FE480, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t llvm::createGreedyRegisterAllocator(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void (**v5)(_QWORD *);
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = operator new();
  v3 = (_QWORD *)a1[3];
  if (v3)
  {
    if (v3 == a1)
    {
      v8 = v7;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v7);
    }
    else
    {
      v8 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_1C52316CC(v2, v7);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = (void (**)(_QWORD *))(v7[0] + 32);
    v4 = v7;
  }
  else
  {
    if (!v8)
      return v2;
    v5 = (void (**)(_QWORD *))(*v8 + 40);
  }
  (*v5)(v4);
  return v2;
}

void *sub_1C620BCE8(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::MachineBlockFrequencyInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  llvm::AnalysisUsage::addRequiredID(this, llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::AAResultsWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredID(this, llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::LiveIntervals::ID);
  llvm::AnalysisUsage::addRequiredID(this, llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::SlotIndexes::ID);
  llvm::AnalysisUsage::addRequiredID(this, byte_1EF8F6EF8);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)byte_1EF8F6EF8);
  llvm::AnalysisUsage::addRequiredID(this, llvm::LiveStacks::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::LiveStacks::ID);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  llvm::AnalysisUsage::addRequiredID(this, llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::MachineLoopInfo::ID);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::VirtRegMap::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::VirtRegMap::ID);
  llvm::AnalysisUsage::addRequiredID(this, llvm::LiveRegMatrix::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::LiveRegMatrix::ID);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::EdgeBundles::ID);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::SpillPlacement::ID);
  llvm::AnalysisUsage::addRequiredID(this, llvm::MachineOptimizationRemarkEmitterPass::ID);
  llvm::AnalysisUsage::addRequiredID(this, llvm::RegAllocEvictionAdvisorAnalysis::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

_QWORD *sub_1C620BECC(uint64_t a1, int a2, int a3)
{
  return sub_1C5231A94((_QWORD *)(a1 + 1248), a2, a3);
}

uint64_t sub_1C620BEDC(uint64_t a1, uint64_t **a2)
{
  return sub_1C5231C30(a1, (uint64_t *)(a1 + 1208), a2);
}

uint64_t llvm::RegAllocEvictionAdvisor::canReassign(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v10;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _WORD *v15;
  unsigned __int16 *v16;
  __int16 v17;
  unsigned __int16 v18;
  int v19;
  int v20;
  unsigned __int16 *v21;
  void **v22;
  uint64_t v23;
  _QWORD v24[4];
  void *v25;
  uint64_t v26;
  _BYTE v27[64];
  void *v28;
  uint64_t v29;
  _WORD v30[18];
  int v31;
  int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  sub_1C506591C(*(_DWORD *)(a2 + 112), a1[5], a1[8], a1[3], (uint64_t)&v33);
  v6 = -v34;
  v22 = &v33;
  v23 = -(int)v34;
  v7 = v36;
  if (v36 == -(int)v34)
  {
    v8 = 0;
  }
  else
  {
    do
    {
      if ((v6 & 0x80000000) != 0)
        v10 = *((unsigned __int16 *)*v22 + (_QWORD)v22[1] + (int)v6);
      else
        v10 = *((unsigned __int16 *)v22[7] + v6);
      if (v10 != a3)
      {
        v12 = a1[7];
        if (v12)
          v13 = (_QWORD *)(v12 + 8);
        else
          v13 = 0;
        v14 = *(unsigned int *)(*v13 + 24 * v10 + 16);
        v15 = (_WORD *)(v13[6] + ((v14 >> 3) & 0x1FFFFFFE));
        v17 = *v15;
        v16 = v15 + 1;
        v18 = v17 + (v14 & 0xF) * v10;
        while (1)
        {
          v24[0] = *(_QWORD *)(a1[3] + 392) + 216 * v18;
          v24[1] = a2;
          v24[3] = 0;
          v25 = v27;
          v26 = 0x400000000;
          v28 = v30;
          v29 = 0x400000000;
          v30[16] = 0;
          v31 = 0;
          v32 = 0;
          v19 = llvm::LiveIntervalUnion::Query::collectInterferingVRegs((llvm::LiveIntervalUnion::Query *)v24, 1u);
          if (v28 != v30)
            free(v28);
          if (v25 != v27)
            free(v25);
          if (v19)
            break;
          v20 = *v16++;
          v18 += v20;
          if (!v20)
          {
            if ((v23 & 0x80000000) != 0)
              v21 = (unsigned __int16 *)((char *)*v22 + 2 * (_QWORD)v22[1] + 2 * (int)v23);
            else
              v21 = (unsigned __int16 *)((char *)v22[7] + 2 * v23);
            v8 = *v21;
            goto LABEL_10;
          }
        }
      }
      v8 = 0;
LABEL_10:
      sub_1C52322E0(&v22);
      LODWORD(v6) = v23;
    }
    while ((_DWORD)v23 != v7 && (_DWORD)v8 == 0);
  }
  if (v33 != &v35)
    free(v33);
  return v8;
}

uint64_t sub_1C620C0F4(int8x16_t *a1, uint64_t a2, unsigned __int16 **a3, uint64_t a4, _BYTE *a5, uint64_t a6)
{
  int v9;
  uint64_t v11;
  uint64_t v14;
  unsigned int v15;
  unint64_t v17;
  unsigned int v18;

  v9 = *(_DWORD *)(a1[78].i64[0] + 8 * (*(_DWORD *)(a2 + 112) & 0x7FFFFFFF));
  if (v9 == 4)
  {
    if (*(float *)(a2 + 116) != INFINITY)
    {
      v11 = a1[83].i64[1];
      *(_DWORD *)(v11 + 208) = 0;
      *(_DWORD *)(v11 + 288) = 0;
      *(_DWORD *)(v11 + 688) = 0;
      *(_DWORD *)(v11 + 632) = 0;
      *(_QWORD *)(v11 + 40) = a2;
      sub_1C528CED8(v11);
      if ((unint64_t)sub_1C52337F4((uint64_t)a1) < a1[1830].i64[1])
      {
        a4 = 0;
        *a5 = 1;
      }
    }
  }
  else if (v9 <= 1)
  {
    v14 = a1[83].i64[1];
    *(_DWORD *)(v14 + 208) = 0;
    *(_DWORD *)(v14 + 288) = 0;
    *(_DWORD *)(v14 + 688) = 0;
    *(_DWORD *)(v14 + 632) = 0;
    *(_QWORD *)(v14 + 40) = a2;
    sub_1C528CED8(v14);
    v18 = 0;
    v17 = a1[1830].u64[1];
    v15 = sub_1C5233878((uint64_t)a1, a3, &v17, &v18, 1);
    if (v15 != -1)
    {
      sub_1C5234258(a1, a2, v15, 0, a6);
      return 0;
    }
  }
  return a4;
}

void sub_1C620C21C(uint64_t a1, uint64_t a2, llvm::MachineLoop *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  llvm::MachineLoop *v15;
  int32x4_t v16;
  uint64_t ****v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  _OWORD v24[2];
  _BYTE v25[44];
  unsigned __int8 *v26;
  __int128 v27;
  uint64_t (**v28)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v29;
  char v30;
  uint64_t v31;
  __int128 v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  char v36;
  char v37;
  void *v38;
  uint64_t v39;
  _BYTE v40[260];
  int v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v6 = (uint64_t *)*((_QWORD *)a3 + 1);
  v7 = (uint64_t *)*((_QWORD *)a3 + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    sub_1C620C21C(v25, a2, v8);
    sub_1C5239430(a1, (uint64_t)v25);
  }
  v9 = (uint64_t *)*((_QWORD *)a3 + 4);
  v10 = *((_QWORD *)a3 + 5) - (_QWORD)v9;
  if (v10)
  {
    v11 = 8 * (v10 >> 3);
    do
    {
      v12 = *v9;
      v13 = (uint64_t *)(*(_QWORD *)(a2 + 1152) + 248);
      v28 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))*v9;
      *(_QWORD *)&v27 = 0;
      v14 = sub_1C48BF0C0(v13, &v28, &v27);
      v15 = 0;
      if (v14)
        v15 = *(llvm::MachineLoop **)(v27 + 8);
      if (v15 == a3)
      {
        sub_1C5238DF0(v24, a2, v12);
        sub_1C5239430(a1, (uint64_t)v24);
      }
      ++v9;
      v11 -= 8;
    }
    while (v11);
  }
  *(int32x2_t *)v16.i8 = vrev64_s32(*(int32x2_t *)a1);
  v16.i64[1] = *(_QWORD *)(a1 + 12);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v16, v16))) & 1) != 0 || *(_DWORD *)(a1 + 8) || *(_DWORD *)(a1 + 20))
  {
    v17 = *(uint64_t *****)(a2 + 1160);
    v18 = *(_QWORD *)****v17;
    if (*(_QWORD *)(v18 + 128)
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v18 + 72) + 48))(*(_QWORD *)(v18 + 72)))
    {
      llvm::MachineLoop::getStartLoc(a3, &v26);
      llvm::DiagnosticLocation::DiagnosticLocation((llvm::DiagnosticLocation *)&v27, (const llvm::DebugLoc *)&v26);
      v19 = **((_QWORD **)a3 + 4);
      v20 = **(_QWORD **)(v19 + 32);
      v29 = 16;
      v30 = 2;
      v31 = v20;
      v32 = v27;
      v33 = "regalloc";
      v34 = "LoopSpillReloadCopies";
      v35 = 21;
      v36 = 0;
      v37 = 0;
      v38 = v40;
      v39 = 0x400000000;
      v40[256] = 0;
      v41 = -1;
      v42 = v19;
      v28 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&unk_1E8141F00;
      if (v26)
        llvm::MetadataTracking::untrack((uint64_t)&v26, v26);
      sub_1C5238970(a1, (uint64_t)&v28);
      *(_QWORD *)&v27 = "generated in loop";
      *((_QWORD *)&v27 + 1) = 17;
      sub_1C53B17B4((uint64_t)&v38, (const void **)&v27);
      llvm::MachineOptimizationRemarkEmitter::emit(v17, (llvm::DiagnosticInfoOptimizationBase *)&v28);
      v28 = &off_1E814E790;
      v21 = v38;
      if ((_DWORD)v39)
      {
        v22 = (unint64_t)v39 << 6;
        v23 = (char *)v38 - 64;
        do
        {
          sub_1C4765530((uint64_t)&v23[v22]);
          v22 -= 64;
        }
        while (v22);
        v21 = v38;
      }
      if (v21 != v40)
        free(v21);
    }
  }
}

void sub_1C620C4D8(uint64_t a1)
{
  sub_1C523AF04(a1);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C620C4FC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E81495A8;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &off_1E8149610;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

_QWORD *sub_1C620C57C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8149610;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C620C5BC(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v12 = 0;
  v8 = sub_1C6159B48(a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v12);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C620C634(v11);
}

uint64_t sub_1C620C634(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C620C64C(_QWORD *a1)
{
  sub_1C620C4FC(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C620C670(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C620C67C(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C620C68C(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_3:
    v4 = &off_1E8149660;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_3;
  }
  return result;
}

_QWORD *sub_1C620C6F8(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C620C700(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8149610;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C620C750(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C620C758(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C620C76C(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C620C780(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C620C794(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

uint64_t sub_1C620C7C0(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v11 = 0;
  v8 = llvm::cl::parser<unsigned long>::parse(a1 + 160, (_QWORD *)a1, a3, a4, a5, a6, &v11);
  if ((v8 & 1) != 0)
    return v8;
  *(_QWORD *)(a1 + 128) = v11;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 192);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v11);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C620C838();
}

uint64_t sub_1C620C838()
{
  return 2;
}

void sub_1C620C840(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E81496A0;
  v2 = a1 + 21;
  v3 = (_QWORD *)a1[24];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      sub_1C47A80D0(a1);
      JUMPOUT(0x1CAA32FC0);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  goto LABEL_6;
}

uint64_t sub_1C620C8B4(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 160, a1);
}

llvm::raw_ostream *sub_1C620C8C0(uint64_t a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::basic_parser_impl *)(a1 + 160), (const llvm::cl::Option *)a1, a2);
}

void sub_1C620C8D0(uint64_t a1, int a2, int a3)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];
  char v6;

  if (a3)
  {
    v3 = *(_QWORD *)(a1 + 128);
LABEL_3:
    v4 = *(_QWORD *)(a1 + 144);
    v6 = *(_BYTE *)(a1 + 152);
    v5[0] = &unk_1E8149708;
    v5[1] = v4;
    llvm::cl::parser<unsigned long>::printOptionDiff((llvm::cl::basic_parser_impl *)(a1 + 160), (const llvm::cl::Option *)a1, v3, (uint64_t)v5, a2);
    return;
  }
  if (*(_BYTE *)(a1 + 152))
  {
    v3 = *(_QWORD *)(a1 + 128);
    if (*(_QWORD *)(a1 + 144) != v3)
      goto LABEL_3;
  }
}

BOOL sub_1C620C940(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 16) && *(_BYTE *)(a1 + 16) && *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8);
}

uint64_t sub_1C620C96C()
{
  uint64_t v0;
  void (**v1)(void);
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  v3[0] = &off_1E7FB3428;
  v3[1] = sub_1C52316C4;
  v4 = v3;
  sub_1C52316CC(v0, v3);
  if (v4 == v3)
  {
    v1 = (void (**)(void))(v3[0] + 32);
    goto LABEL_4;
  }
  if (v4)
  {
    v1 = (void (**)(void))(*v4 + 40);
LABEL_4:
    (*v1)();
  }
  return v0;
}

uint64_t *sub_1C620CA2C(_QWORD **a1, uint64_t *a2, unsigned int a3, _DWORD *a4)
{
  uint64_t *result;
  uint64_t *v7;
  _DWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;

  result = sub_1C523AD7C(a1, a2, &v13, &v12, a3);
  if (!*result)
  {
    v7 = result;
    v8 = operator new(0x20uLL);
    v8[7] = *a4;
    v9 = v13;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v9;
    *v7 = (uint64_t)v8;
    v10 = (_QWORD *)**a1;
    if (v10)
    {
      *a1 = v10;
      v11 = (uint64_t *)*v7;
    }
    else
    {
      v11 = (uint64_t *)v8;
    }
    result = sub_1C4768E74(a1[1], v11);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return result;
}

void **sub_1C620CACC(void **a1)
{
  void **v1;
  void **v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  void **v7;
  void **v8;

  v1 = a1;
  v2 = (void **)*a1;
  v3 = *((unsigned int *)v1 + 2);
  if ((_DWORD)v3)
  {
    v8 = v1;
    v5 = 144 * v3;
    v6 = (char *)(v2 - 18);
    do
    {
      sub_1C523B0A4(&v6[v5]);
      v5 -= 144;
    }
    while (v5);
    v1 = v8;
    v2 = (void **)*v8;
  }
  if (v2 != v1 + 2)
  {
    v7 = v1;
    free(v2);
    return v7;
  }
  return v1;
}

void sub_1C620CB48(_WORD *a1, __int128 *a2, uint64_t a3, int **a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED7FE940, 0, 0);
  dword_1ED7FE9C0 = 0;
  qword_1ED7FE9C8 = (uint64_t)&off_1E8149660;
  *(_QWORD *)&dword_1ED7FE9D0 = 0;
  qword_1ED7FE940 = (uint64_t)off_1E81495A8;
  qword_1ED7FE9D8 = (uint64_t)&off_1E8149610;
  qword_1ED7FE9E0 = (uint64_t)&qword_1ED7FE940;
  qword_1ED7FE9E8 = (uint64_t)&unk_1ED7FE9F8;
  qword_1ED7FE9F0 = 0x800000000;
  qword_1ED7FEB78 = (uint64_t)&off_1E8149728;
  qword_1ED7FEB90 = (uint64_t)&qword_1ED7FEB78;
  sub_1C620CC00(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7FE940);
}

void sub_1C620CC00(_WORD *a1, __int128 *a2, uint64_t a3, int **a4)
{
  int *v8;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7FE940, "split-spill-mode", 0x10uLL);
  word_1ED7FE94A = (32 * (*a1 & 3)) | word_1ED7FE94A & 0xFF9F;
  xmmword_1ED7FE960 = *a2;
  sub_1C523B1E0(*(_QWORD *)a3, *(_DWORD *)(a3 + 8));
  v8 = *a4;
  dword_1ED7FE9C0 = **a4;
  byte_1ED7FE9D4 = 1;
  dword_1ED7FE9D0 = *v8;
}

void sub_1C620CCA0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C620CCB4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8149728;
  return result;
}

void sub_1C620CCD8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8149728;
}

void sub_1C620CCF4(unsigned __int8 *a1, size_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  _QWORD v11[5];
  int v12;
  char v13;

  v11[0] = a1;
  v11[1] = a2;
  v11[2] = a4;
  v11[3] = a5;
  v11[4] = &off_1E8149660;
  v13 = 1;
  v12 = a3;
  v7 = sub_1C523B224((unint64_t)v11);
  v8 = qword_1ED7FE9E8 + 48 * qword_1ED7FE9F0;
  v9 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 32) = &off_1E8149680;
  v10 = *(_BYTE *)(v7 + 44);
  *(_DWORD *)(v8 + 40) = *(_DWORD *)(v7 + 40);
  *(_BYTE *)(v8 + 44) = v10;
  *(_QWORD *)(v8 + 32) = &off_1E8149660;
  LODWORD(qword_1ED7FE9F0) = qword_1ED7FE9F0 + 1;
  llvm::cl::AddLiteralOption(qword_1ED7FE9E0, a1, a2);
}

void sub_1C620CDA8(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1ED7FE9E8, a1, 48, &v8);
  v2 = (_OWORD *)qword_1ED7FE9E8;
  if ((_DWORD)qword_1ED7FE9F0)
  {
    v3 = qword_1ED7FE9E8 + 48 * qword_1ED7FE9F0;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E8149680;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E8149660;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1ED7FE9E8;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1ED7FE9F8)
    free(v2);
  qword_1ED7FE9E8 = (uint64_t)v1;
  HIDWORD(qword_1ED7FE9F0) = v7;
}

void sub_1C620CE74(_WORD *a1, __int128 *a2, int **a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED7FE578, 0, 0);
  dword_1ED7FE5F8 = 0;
  qword_1ED7FE600 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED7FE608 = 0;
  qword_1ED7FE578 = (uint64_t)&unk_1E819E3B0;
  qword_1ED7FE610 = (uint64_t)&unk_1E819E2C0;
  qword_1ED7FE618 = (uint64_t)&off_1E7F95260;
  qword_1ED7FE630 = (uint64_t)&qword_1ED7FE618;
  llvm::cl::Option::setArgStr(v6, "lcr-max-interf", 0xEuLL);
  word_1ED7FE582 = (32 * (*a1 & 3)) | word_1ED7FE582 & 0xFF9F;
  xmmword_1ED7FE598 = *a2;
  dword_1ED7FE5F8 = **a3;
  byte_1ED7FE60C = 1;
  dword_1ED7FE608 = dword_1ED7FE5F8;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7FE578);
}

void sub_1C620CF50(_WORD *a1, __n128 *a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED7FE638, 0, 0);
  byte_1ED7FE6B8 = 0;
  qword_1ED7FE6C0 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED7FE6C8 = 0;
  qword_1ED7FE638 = (uint64_t)&unk_1E819E898;
  qword_1ED7FE6D0 = (uint64_t)&off_1E819E9A0;
  qword_1ED7FE6D8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7FE6F0 = (uint64_t)&qword_1ED7FE6D8;
  sub_1C620CFF4(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7FE638);
}

__n128 sub_1C620CFF4(_WORD *a1, __n128 *a2, _WORD *a3)
{
  __int16 v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7FE638, "exhaustive-register-search", 0x1AuLL);
  v6 = word_1ED7FE642;
  word_1ED7FE642 = word_1ED7FE642 & 0xFF9F | (32 * (*a1 & 3));
  result = *a2;
  xmmword_1ED7FE658 = (__int128)*a2;
  word_1ED7FE642 = v6 & 0xFF9F | (32 * (*a3 & 3));
  return result;
}

void sub_1C620D064(__int128 *a1, int **a2, _WORD *a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED7FE878, 0, 0);
  xmmword_1ED7FE8F8 = 0u;
  *(_OWORD *)&qword_1ED7FE908 = 0u;
  *((_QWORD *)&xmmword_1ED7FE8F8 + 1) = &unk_1E8149708;
  qword_1ED7FE878 = (uint64_t)&unk_1E81496A0;
  qword_1ED7FE918 = (uint64_t)&unk_1E819E2F0;
  qword_1ED7FE920 = (uint64_t)&unk_1E8149770;
  qword_1ED7FE938 = (uint64_t)&qword_1ED7FE920;
  llvm::cl::Option::setArgStr(v6, "grow-region-complexity-budget", 0x1DuLL);
  xmmword_1ED7FE898 = *a1;
  *(_QWORD *)&xmmword_1ED7FE8F8 = **a2;
  byte_1ED7FE910 = 1;
  qword_1ED7FE908 = xmmword_1ED7FE8F8;
  word_1ED7FE882 = (32 * (*a3 & 3)) | word_1ED7FE882 & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7FE878);
}

void sub_1C620D148()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C620D15C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E8149770;
  return result;
}

void sub_1C620D184(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E8149770;
}

void sub_1C620D1A4(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 144, &v5);
  sub_1C620D210(a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

uint64_t sub_1C620D210(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(uint64_t **)result;
    v6 = 144 * v2;
    do
    {
      result = sub_1C620D290(a2, v5);
      v5 += 18;
      a2 += 144;
      v6 -= 144;
    }
    while (v6);
    v7 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)v4;
      v9 = 144 * v7;
      v10 = v8 - 144;
      do
      {
        result = (uint64_t)sub_1C523B0A4((_QWORD *)(v10 + v9));
        v9 -= 144;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t sub_1C620D290(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v4;
  v5 = a2[1];
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
    ++*(_DWORD *)(v5 + 8);
  *(_QWORD *)(a1 + 24) = a1 + 40;
  v6 = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0x600000000;
  if (*((_DWORD *)a2 + 8))
    sub_1C476B4F4(v6, (uint64_t)(a2 + 3));
  *(_QWORD *)(a1 + 96) = a1 + 112;
  *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 22);
  *(_QWORD *)(a1 + 104) = 0x800000000;
  if (*((_DWORD *)a2 + 26))
    sub_1C4EA2F88(a1 + 96, (uint64_t)(a2 + 12));
  return a1;
}

unsigned int *sub_1C620D330(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result[2];
  if (v2 != a2)
  {
    v4 = result;
    if (v2 <= a2)
    {
      if (result[3] < a2)
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), a2, 16);
        v2 = v4[2];
      }
      if (v2 != a2)
      {
        v5 = *(_QWORD *)v4 + 16 * a2;
        v6 = *(_QWORD *)v4 + 16 * v2;
        do
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
          v6 += 16;
        }
        while (v6 != v5);
      }
    }
    v4[2] = a2;
  }
  return result;
}

uint64_t sub_1C620D3B4(uint64_t a1, int a2, int a3, int a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  int v12;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v5 = ((37 * a4) | ((unint64_t)(37 * a3) << 32))
       + ~((unint64_t)(37 * a4) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (_DWORD *)(a1 + 8 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
      v16 = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      while (v11 != -1 || v12 != -1)
      {
        if (v14)
          v18 = 0;
        else
          v18 = v12 == -2;
        if (v18 && v11 == -2)
          v14 = v10;
        v20 = v9 + v15++;
        v9 = v20 & v8;
        v10 = (_DWORD *)(a1 + 8 * (v20 & v8));
        v11 = *v10;
        v12 = v10[1];
        v16 = 1;
        if (*v10 == a3 && v12 == a4)
          goto LABEL_11;
      }
      v16 = 0;
      if (v14)
        v10 = v14;
    }
  }
  else
  {
    v10 = 0;
    v16 = 0;
  }
LABEL_11:
  *a5 = v10;
  return v16;
}

uint64_t sub_1C620D498(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result;
  _DWORD *v7;
  char v8;
  uint64_t v9;
  _DWORD *v10;

  v10 = 0;
  result = sub_1C620D3B4(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, a3[1], &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C620D528(a2, a3, v10);
    v7 = (_DWORD *)result;
    *(_QWORD *)result = *(_QWORD *)a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

_DWORD *sub_1C620D528(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
LABEL_3:
    sub_1C524381C(a1, v6);
    v9 = 0;
    sub_1C620D3B4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v9);
    a3 = v9;
    goto LABEL_4;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1 || a3[1] != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C620D5E0(uint64_t result, int *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int *v11;
  int *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
    result = (uint64_t)memset(*(void **)result, 255, 8 * v6);
  while (a2 != a3)
  {
    v7 = *a2;
    v8 = a2[1];
    if ((*a2 != -1 || v8 != -1) && (v7 != -2 || v8 != -2))
    {
      v12 = 0;
      result = sub_1C620D3B4(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v7, v8, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

void sub_1C620D6E8(_WORD *a1, int **a2, __int128 *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED7FEC88, 0, 0);
  dword_1ED7FED08 = 0;
  qword_1ED7FED10 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED7FED18 = 0;
  qword_1ED7FEC88 = (uint64_t)&unk_1E819E3B0;
  qword_1ED7FED20 = (uint64_t)&unk_1E819E2C0;
  qword_1ED7FED28 = (uint64_t)&off_1E7F95260;
  qword_1ED7FED40 = (uint64_t)&qword_1ED7FED28;
  sub_1C620D79C(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7FEC88);
}

__n128 sub_1C620D79C(_WORD *a1, int **a2, __int128 *a3, __n128 *a4)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7FEC88, "stress-regalloc", 0xFuLL);
  word_1ED7FEC92 = (32 * (*a1 & 3)) | word_1ED7FEC92 & 0xFF9F;
  dword_1ED7FED08 = **a2;
  byte_1ED7FED1C = 1;
  dword_1ED7FED18 = dword_1ED7FED08;
  xmmword_1ED7FECB8 = *a3;
  result = *a4;
  xmmword_1ED7FECA8 = (__int128)*a4;
  return result;
}

void llvm::initializeRegisterCoalescerPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED8300D8);
  if (v2 != -1)
  {
    v5[0] = sub_1C5246E50;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED8300D8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

_DWORD *sub_1C620D894(uint64_t a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_1C620AE84(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C620D910(a1, a2, v7);
    *v5 = *a2;
    *((_QWORD *)v5 + 1) = v5 + 6;
    *((_QWORD *)v5 + 2) = 0x400000000;
  }
  return v5;
}

_DWORD *sub_1C620D910(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5256DE4(a1, v6);
  v8 = 0;
  sub_1C620AE84(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_1C620D9C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  void *v12;
  _DWORD *v13;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)a1;
    v8 = 40 * v6;
    do
    {
      *v7 = -1;
      v7 += 10;
      v8 -= 40;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_DWORD *)v4;
      if (*(_DWORD *)v4 <= 0xFFFFFFFD)
      {
        v13 = 0;
        sub_1C620AE84(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        v10 = v13;
        *v13 = *(_DWORD *)v4;
        *((_QWORD *)v10 + 2) = 0x400000000;
        *((_QWORD *)v10 + 1) = v10 + 6;
        v11 = (uint64_t)(v10 + 2);
        if (*(_DWORD *)(v4 + 16))
          sub_1C48621E4(v11, v4 + 8);
        ++*(_DWORD *)(a1 + 8);
        v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12)
          free(v12);
      }
      v4 += 40;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1C620DAB0(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  _DWORD *v6;
  uint64_t result;

  v6 = sub_1C5249CE0(a1, a3, a2);
  *v6 = *a3;
  *((_QWORD *)v6 + 2) = 0x200000000;
  *((_QWORD *)v6 + 1) = v6 + 6;
  result = (uint64_t)(v6 + 2);
  if (*(_DWORD *)(a4 + 8))
    return sub_1C4EA2F88(result, a4);
  return result;
}

_QWORD *sub_1C620DB10(_QWORD *result, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;

  if (a2)
  {
    v3 = a2;
    do
    {
      v4 = v3 >> 1;
      v5 = &result[3 * (v3 >> 1)];
      v7 = *v5;
      v6 = v5 + 3;
      v3 += ~(v3 >> 1);
      if ((*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3) < ((v7 >> 1) & 3 | *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24)))
        v3 = v4;
      else
        result = v6;
    }
    while (v3);
  }
  return result;
}

void sub_1C620DB68(__n128 *a1, char **a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED7FEE08, 0, 0);
  byte_1ED7FEE88 = 0;
  qword_1ED7FEE90 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED7FEE98 = 0;
  qword_1ED7FEE08 = (uint64_t)&unk_1E819E898;
  qword_1ED7FEEA0 = (uint64_t)&off_1E819E9A0;
  qword_1ED7FEEA8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7FEEC0 = (uint64_t)&qword_1ED7FEEA8;
  sub_1C5257744(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7FEE08);
}

void sub_1C620DC0C(__int128 *a1, _WORD *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED7FEEC8, 0, 0);
  byte_1ED7FEF48 = 0;
  qword_1ED7FEF50 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED7FEF58 = 0;
  qword_1ED7FEEC8 = (uint64_t)&unk_1E819E898;
  qword_1ED7FEF60 = (uint64_t)&off_1E819E9A0;
  qword_1ED7FEF68 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7FEF80 = (uint64_t)&qword_1ED7FEF68;
  llvm::cl::Option::setArgStr(v4, "join-splitedges", 0xFuLL);
  xmmword_1ED7FEEE8 = *a1;
  word_1ED7FEED2 = (32 * (*a2 & 3)) | word_1ED7FEED2 & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7FEEC8);
}

void sub_1C620DCCC(__n128 *a1, int **a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED7FEF88, 0, 0);
  dword_1ED7FF008 = 0;
  qword_1ED7FF010 = (uint64_t)&unk_1E819E900;
  *(_QWORD *)&dword_1ED7FF018 = 0;
  qword_1ED7FEF88 = (uint64_t)&unk_1E8140060;
  qword_1ED7FF020 = (uint64_t)&unk_1E819E920;
  qword_1ED7FF028 = (uint64_t)&unk_1E81400C8;
  qword_1ED7FF040 = (uint64_t)&qword_1ED7FF028;
  sub_1C52577C8(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7FEF88);
}

void sub_1C620DD70(__int128 *a1, _WORD *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED7FF048, 0, 0);
  byte_1ED7FF0C8 = 0;
  qword_1ED7FF0D0 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED7FF0D8 = 0;
  qword_1ED7FF048 = (uint64_t)&unk_1E819E898;
  qword_1ED7FF0E0 = (uint64_t)&off_1E819E9A0;
  qword_1ED7FF0E8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7FF100 = (uint64_t)&qword_1ED7FF0E8;
  llvm::cl::Option::setArgStr(v4, "verify-coalescing", 0x11uLL);
  xmmword_1ED7FF068 = *a1;
  word_1ED7FF052 = (32 * (*a2 & 3)) | word_1ED7FF052 & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7FF048);
}

llvm *llvm::RegisterPressure::dump(llvm::RegisterPressure *this, const llvm::TargetRegisterInfo *a2)
{
  llvm *v4;
  llvm *v5;
  llvm *v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  llvm *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t *v12;
  llvm *v13;
  llvm *v14;
  uint64_t (**v15)(llvm *);
  _BYTE *v16;
  llvm *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t (**v20)(llvm *);
  llvm *v21;
  llvm::raw_ostream *v22;
  uint64_t v23;
  llvm *result;
  _BYTE *v25;
  uint64_t v26;
  uint64_t *v27;
  llvm *v28;
  llvm *v29;
  uint64_t (**v30)(llvm *);
  _BYTE *v31;
  llvm *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t (**v35)(llvm *);
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t (**v39)();
  uint64_t v40;
  uint64_t (***v41)();
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = llvm::dbgs(this);
  sub_1C4816AD8(v4, "Max Pressure: ");
  v5 = llvm::dumpRegSetPressure(*(llvm::raw_ostream **)this, (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2, (uint64_t)a2);
  v6 = llvm::dbgs(v5);
  v7 = sub_1C4816AD8(v6, "Live In: ");
  v8 = *((unsigned int *)this + 8);
  if ((_DWORD)v8)
  {
    v11 = 16 * v8;
    v12 = (uint64_t *)(*((_QWORD *)this + 3) + 8);
    while (1)
    {
      v13 = llvm::dbgs(v7);
      llvm::printVRegOrUnit(*((unsigned int *)v12 - 2), (uint64_t)a2, &v39);
      if (!v41)
LABEL_51:
        sub_1C485C2F0();
      ((void (*)(uint64_t (***)(), llvm *))(*v41)[6])(v41, v13);
      v14 = (llvm *)v41;
      if (v41 == &v39)
        break;
      if (v41)
      {
        v15 = (uint64_t (**)(llvm *))(*v41 + 5);
        goto LABEL_8;
      }
LABEL_9:
      if (*v12 != -1)
      {
        v17 = llvm::dbgs(v14);
        v18 = (_BYTE *)*((_QWORD *)v17 + 4);
        if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
        {
          v17 = llvm::raw_ostream::write(v17, 58);
        }
        else
        {
          *((_QWORD *)v17 + 4) = v18 + 1;
          *v18 = 58;
        }
        v19 = *v12;
        v41 = &v39;
        v39 = &off_1E81433A0;
        v40 = v19;
        v36 = &unk_1E8133270;
        v37 = "%016llX";
        v38 = v19;
        llvm::raw_ostream::operator<<(v17, (uint64_t)&v36);
        v14 = (llvm *)v41;
        if (v41 == &v39)
        {
          v20 = (uint64_t (**)(llvm *))(v39 + 4);
          v14 = (llvm *)&v39;
        }
        else
        {
          if (!v41)
            goto LABEL_10;
          v20 = (uint64_t (**)(llvm *))(*v41 + 5);
        }
        v14 = (llvm *)(*v20)(v14);
      }
LABEL_10:
      v7 = llvm::dbgs(v14);
      v16 = (_BYTE *)*((_QWORD *)v7 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v7 + 3))
      {
        v7 = llvm::raw_ostream::write(v7, 32);
      }
      else
      {
        *((_QWORD *)v7 + 4) = v16 + 1;
        *v16 = 32;
      }
      v12 += 2;
      v11 -= 16;
      if (!v11)
        goto LABEL_2;
    }
    v15 = (uint64_t (**)(llvm *))(v39 + 4);
    v14 = (llvm *)&v39;
LABEL_8:
    v14 = (llvm *)(*v15)(v14);
    goto LABEL_9;
  }
LABEL_2:
  v9 = llvm::dbgs(v7);
  v10 = (_BYTE *)*((_QWORD *)v9 + 4);
  if ((unint64_t)v10 >= *((_QWORD *)v9 + 3))
  {
    v9 = llvm::raw_ostream::write(v9, 10);
  }
  else
  {
    *((_QWORD *)v9 + 4) = v10 + 1;
    *v10 = 10;
  }
  v21 = llvm::dbgs(v9);
  v22 = sub_1C4816AD8(v21, "Live Out: ");
  v23 = *((unsigned int *)this + 44);
  if ((_DWORD)v23)
  {
    v26 = 16 * v23;
    v27 = (uint64_t *)(*((_QWORD *)this + 21) + 8);
    while (1)
    {
      v28 = llvm::dbgs(v22);
      llvm::printVRegOrUnit(*((unsigned int *)v27 - 2), (uint64_t)a2, &v39);
      if (!v41)
        goto LABEL_51;
      ((void (*)(uint64_t (***)(), llvm *))(*v41)[6])(v41, v28);
      v29 = (llvm *)v41;
      if (v41 == &v39)
        break;
      if (v41)
      {
        v30 = (uint64_t (**)(llvm *))(*v41 + 5);
        goto LABEL_33;
      }
LABEL_34:
      if (*v27 != -1)
      {
        v32 = llvm::dbgs(v29);
        v33 = (_BYTE *)*((_QWORD *)v32 + 4);
        if ((unint64_t)v33 >= *((_QWORD *)v32 + 3))
        {
          v32 = llvm::raw_ostream::write(v32, 58);
        }
        else
        {
          *((_QWORD *)v32 + 4) = v33 + 1;
          *v33 = 58;
        }
        v34 = *v27;
        v41 = &v39;
        v39 = &off_1E81433A0;
        v40 = v34;
        v36 = &unk_1E8133270;
        v37 = "%016llX";
        v38 = v34;
        llvm::raw_ostream::operator<<(v32, (uint64_t)&v36);
        v29 = (llvm *)v41;
        if (v41 == &v39)
        {
          v35 = (uint64_t (**)(llvm *))(v39 + 4);
          v29 = (llvm *)&v39;
        }
        else
        {
          if (!v41)
            goto LABEL_35;
          v35 = (uint64_t (**)(llvm *))(*v41 + 5);
        }
        v29 = (llvm *)(*v35)(v29);
      }
LABEL_35:
      v22 = llvm::dbgs(v29);
      v31 = (_BYTE *)*((_QWORD *)v22 + 4);
      if ((unint64_t)v31 >= *((_QWORD *)v22 + 3))
      {
        v22 = llvm::raw_ostream::write(v22, 32);
      }
      else
      {
        *((_QWORD *)v22 + 4) = v31 + 1;
        *v31 = 32;
      }
      v27 += 2;
      v26 -= 16;
      if (!v26)
        goto LABEL_27;
    }
    v30 = (uint64_t (**)(llvm *))(v39 + 4);
    v29 = (llvm *)&v39;
LABEL_33:
    v29 = (llvm *)(*v30)(v29);
    goto LABEL_34;
  }
LABEL_27:
  result = llvm::dbgs(v22);
  v25 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v25 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v25 + 1;
  *v25 = 10;
  return result;
}

llvm *llvm::RegPressureTracker::dump(llvm::RegPressureTracker *this)
{
  int v2;
  llvm::RegisterPressure *v3;
  llvm *v4;

  v2 = *((unsigned __int8 *)this + 56);
  v3 = (llvm::RegisterPressure *)*((_QWORD *)this + 6);
  if (!v2)
  {
    if (!*((_QWORD *)v3 + 39) && !*((_QWORD *)v3 + 40))
      return llvm::RegisterPressure::dump(v3, *((const llvm::TargetRegisterInfo **)this + 1));
LABEL_7:
    v4 = llvm::dbgs(v3);
    sub_1C4816AD8(v4, "Curr Pressure: ");
    llvm::dumpRegSetPressure(*((llvm::raw_ostream **)this + 9), (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 2, *((_QWORD *)this + 1));
    v3 = (llvm::RegisterPressure *)*((_QWORD *)this + 6);
    return llvm::RegisterPressure::dump(v3, *((const llvm::TargetRegisterInfo **)this + 1));
  }
  if (*((_QWORD *)v3 + 39) <= 7uLL || *((_QWORD *)v3 + 40) <= 7uLL)
    goto LABEL_7;
  return llvm::RegisterPressure::dump(v3, *((const llvm::TargetRegisterInfo **)this + 1));
}

llvm *llvm::PressureDiff::dump(llvm::PressureDiff *this, const llvm::TargetRegisterInfo *a2)
{
  llvm::PressureDiff *v3;
  llvm::PressureDiff *v4;
  char *v5;
  llvm *v6;
  llvm::raw_ostream *v7;
  char *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  llvm *result;
  _BYTE *v12;

  v3 = this;
  v4 = (llvm::PressureDiff *)((char *)this + 64);
  v5 = "";
  do
  {
    if (!*(_WORD *)v3)
      break;
    v6 = llvm::dbgs(this);
    v7 = sub_1C4816AD8(v6, v5);
    v8 = (char *)(*(uint64_t (**)(const llvm::TargetRegisterInfo *, _QWORD))(*(_QWORD *)a2 + 304))(a2, *(unsigned __int16 *)v3 - 1);
    v9 = sub_1C4816AD8(v7, v8);
    v10 = sub_1C4816AD8(v9, " ");
    this = llvm::raw_ostream::operator<<(v10, *((__int16 *)v3 + 1));
    v3 = (llvm::PressureDiff *)((char *)v3 + 4);
    v5 = "    ";
  }
  while (v3 != v4);
  result = llvm::dbgs(this);
  v12 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v12 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v12 + 1;
  *v12 = 10;
  return result;
}

llvm::raw_ostream *llvm::PressureChange::dump(llvm::PressureChange *this)
{
  llvm *v2;
  llvm::raw_ostream *v3;
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;

  v2 = llvm::dbgs(this);
  v3 = sub_1C4816AD8(v2, "[");
  sub_1C5E21910(v3, (unsigned __int16)(*(_WORD *)this - 1), 0, 0, 0);
  v4 = sub_1C4816AD8(v3, ", ");
  v5 = llvm::raw_ostream::operator<<(v4, *((__int16 *)this + 1));
  return sub_1C4816AD8(v5, "]\n");
}

uint64_t sub_1C620E3C0(uint64_t a1, uint64_t a2)
{
  if (!a1 || (*(_BYTE *)a1 & 4) == 0)
  {
    while ((*(_WORD *)(a1 + 44) & 8) != 0)
      a1 = *(_QWORD *)(a1 + 8);
  }
  return sub_1C525858C(*(_QWORD *)(a1 + 8), a2);
}

void llvm::RegPressureTracker::getMaxUpwardPressureDelta(uint64_t a1, const llvm::MachineInstr *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  void *__p[2];
  uint64_t v27;

  __p[0] = 0;
  __p[1] = 0;
  v27 = 0;
  sub_1C4979194(__p, *(const void **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 2);
  v15 = *(_QWORD *)(a1 + 48);
  v24 = 0;
  v25 = 0;
  v23 = 0;
  sub_1C4979194(&v23, *(const void **)v15, *(_QWORD *)(v15 + 8), (uint64_t)(*(_QWORD *)(v15 + 8) - *(_QWORD *)v15) >> 2);
  llvm::RegPressureTracker::bumpUpwardPressure((llvm::RegPressureTracker *)a1, a2);
  sub_1C525C0D8((uint64_t)__p[0], ((char *)__p[1] - (char *)__p[0]) >> 2, *(_QWORD *)(a1 + 72), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 2, a4, *(llvm::RegisterClassInfo **)(a1 + 16), *(_QWORD *)(a1 + 328), (uint64_t)(*(_QWORD *)(a1 + 336) - *(_QWORD *)(a1 + 328)) >> 2);
  v16 = (uint64_t)v23;
  sub_1C525C1BC((uint64_t)v23, (v24 - v23) >> 2, **(_QWORD **)(a1 + 48), (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) - **(_QWORD **)(a1 + 48)) >> 2, a5, a6, a7, a8, a4);
  v17 = *(_QWORD *)(a1 + 48);
  v18 = *(_BYTE **)v17;
  *(_QWORD *)v17 = v16;
  *(_QWORD *)(v17 + 8) = v24;
  v19 = *(_QWORD *)(v17 + 16);
  *(_QWORD *)(v17 + 16) = v25;
  v23 = v18;
  v25 = v19;
  v20 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)__p;
  *(_OWORD *)__p = v20;
  v21 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v27;
  v27 = v21;
  if (v18)
  {
    v24 = v18;
    operator delete(v18);
    v22 = __p[0];
  }
  else
  {
    v22 = (void *)v20;
  }
  if (v22)
  {
    __p[1] = v22;
    operator delete(v22);
  }
}

void llvm::RegPressureTracker::getMaxDownwardPressureDelta(uint64_t a1, const llvm::MachineInstr *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  void *__p[2];
  uint64_t v26;

  __p[0] = 0;
  __p[1] = 0;
  v26 = 0;
  sub_1C4979194(__p, *(const void **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 2);
  v14 = *(_QWORD *)(a1 + 48);
  v23 = 0;
  v24 = 0;
  v22 = 0;
  sub_1C4979194(&v22, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 2);
  llvm::RegPressureTracker::bumpDownwardPressure((llvm::RegPressureTracker *)a1, a2);
  sub_1C525C0D8((uint64_t)__p[0], ((char *)__p[1] - (char *)__p[0]) >> 2, *(_QWORD *)(a1 + 72), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 2, a3, *(llvm::RegisterClassInfo **)(a1 + 16), *(_QWORD *)(a1 + 328), (uint64_t)(*(_QWORD *)(a1 + 336) - *(_QWORD *)(a1 + 328)) >> 2);
  v15 = (uint64_t)v22;
  sub_1C525C1BC((uint64_t)v22, (v23 - v22) >> 2, **(_QWORD **)(a1 + 48), (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) - **(_QWORD **)(a1 + 48)) >> 2, a4, a5, a6, a7, a3);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_BYTE **)v16;
  *(_QWORD *)v16 = v15;
  *(_QWORD *)(v16 + 8) = v23;
  v18 = *(_QWORD *)(v16 + 16);
  *(_QWORD *)(v16 + 16) = v24;
  v22 = v17;
  v24 = v18;
  v19 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)__p;
  *(_OWORD *)__p = v19;
  v20 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v26;
  v26 = v20;
  if (v17)
  {
    v23 = v17;
    operator delete(v17);
    v21 = __p[0];
  }
  else
  {
    v21 = (void *)v19;
  }
  if (v21)
  {
    __p[1] = v21;
    operator delete(v21);
  }
}

_QWORD *llvm::RegScavenger::setRegUsed(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  return sub_1C525D2AC((_QWORD *)(a1 + 96), a2, a3);
}

void llvm::RegScavenger::enterBasicBlock(llvm::RegScavenger *this, llvm::MachineBasicBlock *a2)
{
  llvm::RegScavenger::init(this, a2);
  llvm::LiveRegUnits::addLiveIns((llvm::RegScavenger *)((char *)this + 96), (const llvm::MachineFunction **)a2);
}

_QWORD *llvm::RegScavenger::addRegUnits(_QWORD *result, uint64_t *a2, unsigned int a3)
{
  _QWORD *v3;
  unint64_t v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;

  if (*result)
    v3 = (_QWORD *)(*result + 8);
  else
    v3 = 0;
  v4 = *(unsigned int *)(*v3 + 24 * a3 + 16);
  v5 = (unsigned __int16 *)(v3[6] + ((v4 >> 3) & 0x1FFFFFFE));
  v7 = *v5;
  v6 = v5 + 1;
  v8 = v7 + (v4 & 0xF) * a3;
  v9 = *a2;
  do
  {
    *(_QWORD *)(v9 + 8 * ((unsigned __int16)v8 >> 6)) |= 1 << v8;
    v10 = *v6++;
    v8 += v10;
  }
  while (v10);
  return result;
}

void llvm::RegScavenger::determineKillsAndDefs(llvm::RegScavenger *this)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t *v20;

  v2 = *((_QWORD *)this + 4);
  v3 = (void **)((char *)this + 176);
  v4 = *((unsigned int *)this + 46);
  if ((_DWORD)v4)
    bzero(*v3, 8 * v4);
  v5 = *((unsigned int *)this + 64);
  if ((_DWORD)v5)
    bzero(*((void **)this + 31), 8 * v5);
  v6 = *(unsigned int *)(v2 + 40);
  if ((_DWORD)v6)
  {
    v7 = *(unsigned int **)(v2 + 32);
    v8 = (int *)&v7[8 * v6];
    do
    {
      v9 = *v7;
      if (*v7 == 12)
      {
        v10 = *((_QWORD *)this + 40);
        v11 = *((unsigned int *)this + 82);
        if ((_DWORD)v11)
          bzero(*((void **)this + 40), 8 * v11);
        v12 = *(unsigned int *)(*(_QWORD *)this + 44);
        if ((_DWORD)v12)
        {
          v13 = 0;
          v14 = *(_QWORD *)(*(_QWORD *)this + 48);
          do
          {
            v15 = (unsigned __int16 *)(v14 + 4 * v13);
            v16 = *v15;
            v17 = v15[1];
            while (v16)
            {
              v18 = *(_DWORD *)(*((_QWORD *)v7 + 2) + 4 * (v16 >> 5)) >> v16;
              v16 = v17;
              v17 = 0;
              if ((v18 & 1) == 0)
              {
                *(_QWORD *)(v10 + 8 * (v13 >> 6)) |= 1 << v13;
                break;
              }
            }
            ++v13;
          }
          while (v13 != v12);
        }
        sub_1C525D5D8((uint64_t)v3, (uint64_t)this + 320);
        v9 = *v7;
      }
      if ((_BYTE)v9)
        goto LABEL_19;
      v19 = v7[1];
      if ((v19 - 1) > 0x3FFFFFFE
        || ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 352) + ((v19 >> 3) & 0x1FFFFFF8)) >> v19) & 1) != 0)
      {
        goto LABEL_19;
      }
      if ((v9 & 0x1000000) != 0)
      {
        if ((~v9 & 0x5000000) != 0)
          v20 = (uint64_t *)((char *)this + 248);
        else
          v20 = (uint64_t *)v3;
      }
      else
      {
        if ((v9 & 0x10000000) != 0)
          goto LABEL_19;
        v20 = (uint64_t *)v3;
        if (((v9 >> 26) & ~HIBYTE(v9) & 1) == 0)
          goto LABEL_19;
      }
      llvm::RegScavenger::addRegUnits(this, v20, v19);
LABEL_19:
      v7 += 8;
    }
    while (v7 != (unsigned int *)v8);
  }
}

unint64_t llvm::RegScavenger::FindUnusedReg(uint64_t a1, unsigned __int16 ***a2)
{
  unsigned __int16 *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  if (!*((_WORD *)*a2 + 10))
    return 0;
  v3 = **a2;
  v4 = (_QWORD *)(a1 + 96);
  v5 = 2 * *((unsigned __int16 *)*a2 + 10);
  while (1)
  {
    v6 = *v3;
    if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 352) + ((v6 >> 3) & 0x1FF8)) >> v6) & 1) == 0
      && sub_1C525DA68(v4, *v3))
    {
      break;
    }
    ++v3;
    v5 -= 2;
    if (!v5)
      return 0;
  }
  return v6;
}

void llvm::initializeRemoveRedundantDebugValuesPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED7FF348);
  if (v2 != -1)
  {
    v5[0] = sub_1C525F6E0;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED7FF348, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

int *sub_1C620E9F0(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)a1;
  *(_DWORD *)a1 |= 1u;
  if (a2 >= 5)
  {
    *(_DWORD *)a1 = v3 & 0xFFFFFFFE;
    v4 = a2;
    *(_QWORD *)(a1 + 8) = operator new(40 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v4;
  }
  return sub_1C52603E0((int *)a1);
}

uint64_t sub_1C620EA48(_DWORD *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v6 = 0;
  result = sub_1C52604F8((uint64_t)a1, a2, &v6);
  if ((_DWORD)result)
  {
    v4 = v6;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)v4 = 0;
    *(_BYTE *)(v4 + 24) = 1;
    *(_QWORD *)(v4 + 32) = 0;
    v5 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v5;
  }
  return result;
}

int *sub_1C620EAA4(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;

  v2 = *(_DWORD *)a1;
  v3 = __clz((*(_DWORD *)a1 >> 1) - 1);
  if (v3 - 28 >= 3)
    v4 = 1 << (33 - v3);
  else
    v4 = 64;
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) == 0 || v5 >= 5)
  {
    if ((v2 & 1) != 0)
      return sub_1C620E9F0(a1, v5);
    if (v5 != *(_DWORD *)(a1 + 16))
    {
      MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
      return sub_1C620E9F0(a1, v5);
    }
  }
  return sub_1C52603E0((int *)a1);
}

void llvm::initializeRenameIndependentSubregsPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED7FF350);
  if (v2 != -1)
  {
    v5[0] = sub_1C5260C24;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED7FF350, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C620EB9C(unsigned __int8 a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  v4 = a1;
  result = 0xCBF29CE484222325;
  v6 = 8;
  do
  {
    v7 = result ^ v4;
    v4 = 0;
    result = 0x100000001B3 * v7;
    --v6;
  }
  while (v6);
  v8 = 8;
  do
  {
    result = 0x100000001B3 * (a2 ^ (unint64_t)result);
    a2 >>= 8;
    --v8;
  }
  while (v8);
  v9 = 8;
  do
  {
    result = 0x100000001B3 * (a3 ^ (unint64_t)result);
    a3 >>= 8;
    --v9;
  }
  while (v9);
  v10 = 8;
  do
  {
    result = 0x100000001B3 * (a4 ^ (unint64_t)result);
    a4 >>= 8;
    --v10;
  }
  while (v10);
  return result;
}

void llvm::initializeMIRNamerPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED7FF418);
  if (v2 != -1)
  {
    v5[0] = sub_1C5264FDC;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED7FF418, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void llvm::initializeMIRCanonicalizerPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED7FF420);
  if (v2 != -1)
  {
    v5[0] = sub_1C52652CC;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED7FF420, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void sub_1C620ECF0(_WORD *a1, int **a2, __int128 *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED7FF430, 0, 0);
  dword_1ED7FF4B0 = 0;
  qword_1ED7FF4B8 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED7FF4C0 = 0;
  qword_1ED7FF430 = (uint64_t)&unk_1E819E3B0;
  qword_1ED7FF4C8 = (uint64_t)&unk_1E819E2C0;
  qword_1ED7FF4D0 = (uint64_t)&off_1E7F95260;
  qword_1ED7FF4E8 = (uint64_t)&qword_1ED7FF4D0;
  sub_1C620EDA4(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7FF430);
}

__n128 sub_1C620EDA4(_WORD *a1, int **a2, __int128 *a3, __n128 *a4)
{
  int *v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7FF430, "canon-nth-function", 0x12uLL);
  word_1ED7FF43A = (32 * (*a1 & 3)) | word_1ED7FF43A & 0xFF9F;
  v8 = *a2;
  dword_1ED7FF4B0 = **a2;
  byte_1ED7FF4C4 = 1;
  dword_1ED7FF4C0 = *v8;
  xmmword_1ED7FF460 = *a3;
  result = *a4;
  xmmword_1ED7FF450 = (__int128)*a4;
  return result;
}

void llvm::initializePhysicalRegisterUsageInfoPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED8300E0);
  if (v2 != -1)
  {
    v5[0] = sub_1C526872C;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED8300E0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void sub_1C620EE9C(unsigned int *a1)
{
  *(_QWORD *)a1 = &off_1E814A128;
  sub_1C5268FE0(a1 + 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 4), 8);
  llvm::ImmutablePass::~ImmutablePass((llvm::ImmutablePass *)a1);
}

void sub_1C620EED8(unsigned int *a1)
{
  *(_QWORD *)a1 = &off_1E814A128;
  sub_1C5268FE0(a1 + 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 4), 8);
  llvm::ImmutablePass::~ImmutablePass((llvm::ImmutablePass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::callDefaultCtor<llvm::PhysicalRegisterUsageInfo>()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C620EF50(v0);
}

uint64_t sub_1C620EF50(uint64_t a1)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &llvm::PhysicalRegisterUsageInfo::ID;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E814A128;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  v2 = atomic_load(&qword_1ED8300E0);
  if (v2 != -1)
  {
    v6[0] = sub_1C526872C;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1ED8300E0, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void llvm::initializeRegUsageInfoCollectorPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED7FF5B8);
  if (v2 != -1)
  {
    v5[0] = sub_1C526D288;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED7FF5B8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t llvm::createRegUsageInfoCollector(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C526D31C(v1);
}

void llvm::initializeRegUsageInfoPropagationPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED7FF5C8);
  if (v2 != -1)
  {
    v5[0] = sub_1C526DA94;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED7FF5C8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t llvm::createRegUsageInfoPropPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C526DB28(v1);
}

uint64_t llvm::ReplaceWithVeclibLegacy::runOnFunction(llvm::ReplaceWithVeclibLegacy *this, llvm::Function *a2)
{
  char **v3;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;

  v3 = (char **)**((_QWORD **)this + 1);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != llvm::TargetLibraryInfoWrapperPass::ID);
  v5 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v6 = (uint64_t *)sub_1C4D914E8(v5, (uint64_t)a2);
  return sub_1C526E2F8(v6, (uint64_t)a2, v7, v8, v9, v10, v11, v12);
}

void *llvm::ReplaceWithVeclibLegacy::getAnalysisUsage(llvm::ReplaceWithVeclibLegacy *this, llvm::AnalysisUsage *a2)
{
  llvm::AnalysisUsage::setPreservesCFG(a2);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::LoopAccessLegacyAnalysis::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::DemandedBitsWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::OptimizationRemarkEmitterWrapperPass::ID);
  return sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
}

uint64_t llvm::createReplaceWithVeclibLegacyPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C620F2A4(v1);
}

void sub_1C620F258(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::callDefaultCtor<llvm::ReplaceWithVeclibLegacy>()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C620F2A4(v0);
}

uint64_t sub_1C620F2A4(uint64_t a1)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &llvm::ReplaceWithVeclibLegacy::ID;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E814A350;
  PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  v2 = atomic_load(&qword_1EF8F2F78);
  if (v2 != -1)
  {
    v6[0] = sub_1C526ED48;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1EF8F2F78, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t llvm::createResetMachineFunctionPass(llvm *this, char a2)
{
  char v3;
  uint64_t v4;
  uint64_t result;

  v3 = (char)this;
  v4 = operator new();
  result = sub_1C4776848(v4, (uint64_t)&unk_1EF8F6FF2);
  *(_QWORD *)result = &off_1E814A3F0;
  *(_BYTE *)(result + 248) = v3;
  *(_BYTE *)(result + 249) = a2;
  return result;
}

llvm::raw_ostream *llvm::RegisterBank::dump(llvm::RegisterBank *this, const llvm::TargetRegisterInfo *a2)
{
  llvm *v4;

  v4 = llvm::dbgs(this);
  return llvm::RegisterBank::print((char **)this, v4, 1, a2);
}

llvm::raw_ostream *llvm::RegisterBank::print(char **this, llvm::raw_ostream *a2, int a3, const llvm::TargetRegisterInfo *a4)
{
  llvm::raw_ostream *result;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  unint64_t v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  uint64_t v19;
  unint64_t v20;
  int8x8_t *v21;
  uint64_t v22;
  int8x8_t v23;
  uint8x8_t v24;
  _BYTE *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  size_t v31;
  _WORD *v32;
  const char *v33;

  result = sub_1C4816AD8(a2, this[1]);
  if (a3)
  {
    v9 = sub_1C4816AD8(a2, "(ID:");
    v10 = llvm::raw_ostream::operator<<(v9, *(unsigned int *)this);
    v11 = sub_1C4816AD8(v10, ", Size:");
    v12 = llvm::raw_ostream::operator<<(v11, *((unsigned int *)this + 4));
    v13 = sub_1C4816AD8(v12, ")\n");
    v14 = sub_1C4816AD8(v13, "isValid:");
    v15 = *(_DWORD *)this != -1 && this[1] && *((_DWORD *)this + 4) && *((_DWORD *)this + 22) != 0;
    v16 = llvm::raw_ostream::operator<<(v14, v15);
    v17 = (_BYTE *)*((_QWORD *)v16 + 4);
    if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
    {
      v16 = llvm::raw_ostream::write(v16, 10);
    }
    else
    {
      *((_QWORD *)v16 + 4) = v17 + 1;
      *v17 = 10;
    }
    v18 = sub_1C4816AD8(v16, "Number of Covered register classes: ");
    v19 = *((unsigned int *)this + 8);
    if ((_DWORD)v19)
    {
      LODWORD(v20) = 0;
      v21 = (int8x8_t *)this[3];
      v22 = 8 * v19;
      do
      {
        v23 = *v21++;
        v24 = (uint8x8_t)vcnt_s8(v23);
        v24.i16[0] = vaddlv_u8(v24);
        v20 = (v20 + v24.i32[0]);
        v22 -= 8;
      }
      while (v22);
    }
    else
    {
      v20 = 0;
    }
    result = llvm::raw_ostream::operator<<(v18, v20);
    v25 = (_BYTE *)*((_QWORD *)result + 4);
    if ((unint64_t)v25 >= *((_QWORD *)result + 3))
    {
      result = llvm::raw_ostream::write(result, 10);
    }
    else
    {
      *((_QWORD *)result + 4) = v25 + 1;
      *v25 = 10;
    }
    if (a4)
    {
      if (*((_DWORD *)this + 22))
      {
        result = sub_1C4816AD8(a2, "Covered register classes:\n");
        v26 = *((_QWORD *)a4 + 31) - *((_QWORD *)a4 + 30);
        if ((v26 & 0x7FFFFFFF8) != 0)
        {
          v27 = 0;
          v28 = (v26 >> 3);
          v29 = 1;
          do
          {
            v30 = *(_QWORD *)(*((_QWORD *)a4 + 30) + 8 * v27);
            if (((*(_QWORD *)&this[3][((unint64_t)*(unsigned __int16 *)(*(_QWORD *)v30 + 24) >> 3) & 0x1FF8] >> *(_WORD *)(*(_QWORD *)v30 + 24)) & 1) != 0)
            {
              v31 = 2 * (v29 == 0);
              v32 = (_WORD *)*((_QWORD *)a2 + 4);
              if (v31 <= *((_QWORD *)a2 + 3) - (_QWORD)v32)
              {
                if (!v29)
                {
                  *v32 = 8236;
                  *((_QWORD *)a2 + 4) += 2;
                }
              }
              else
              {
                if (v29)
                  v33 = 0;
                else
                  v33 = ", ";
                llvm::raw_ostream::write(a2, v33, v31);
              }
              result = sub_1C4816AD8(a2, (char *)(*((_QWORD *)a4 + 10) + *(unsigned int *)(*(_QWORD *)v30 + 16)));
              v29 = 0;
            }
            ++v27;
          }
          while (v28 != v27);
        }
      }
    }
  }
  return result;
}

uint64_t llvm::RegisterBankInfo::getInstrMappingImpl(llvm::RegisterBankInfo *this, const llvm::MachineInstr *a2)
{
  int v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const llvm::MachineRegisterInfo *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  const llvm::RegisterBank *RegBank;
  char v18;
  int SizeInBits;
  const llvm::RegisterBankInfo::PartialMapping *PartialMapping;
  uint64_t ValueMapping;
  llvm::RegisterBankInfo *v22;
  int v23;
  int v24;
  const llvm::RegisterBankInfo::ValueMapping *v25;
  int v26;
  uint64_t InstructionMappingImpl;
  int v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  const llvm::RegisterBankInfo::PartialMapping *v40;
  unsigned int v41;
  char v42;
  llvm::TargetInstrInfo *v43;
  void *v44;
  uint64_t v45;
  _QWORD v46[9];

  v46[8] = *MEMORY[0x1E0C80C00];
  v4 = **((unsigned __int16 **)a2 + 2);
  if ((v4 - 18) <= 0x33 && ((1 << (v4 - 18)) & 0x8000000000003) != 0 || v4 == 0)
  {
    v29 = 1;
    v30 = 1;
  }
  else
  {
    v29 = 0;
    v30 = *((_DWORD *)a2 + 10);
  }
  v7 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 176))(v8);
  v10 = *(const llvm::MachineRegisterInfo **)(v7 + 40);
  v41 = v30;
  v43 = (llvm::TargetInstrInfo *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 104))(v8);
  v44 = v46;
  v45 = 0x800000000;
  sub_1C4848C0C((unsigned int *)&v44, v30, 0);
  v11 = *((unsigned int *)a2 + 10);
  if (!(_DWORD)v11)
    goto LABEL_39;
  v12 = 0;
  v13 = 0;
  v42 = 1;
  while (1)
  {
    v14 = *((_QWORD *)a2 + 4);
    if (*(_BYTE *)(v14 + v12))
      goto LABEL_13;
    v15 = v14 + v12;
    v16 = *(_DWORD *)(v15 + 4);
    if (!v16)
      goto LABEL_13;
    RegBank = (const llvm::RegisterBank *)llvm::RegisterBankInfo::getRegBank((uint64_t)this, *(_DWORD *)(v15 + 4), (uint64_t)v10, v9);
    if (RegBank)
      v18 = v29;
    else
      v18 = 0;
    if ((v18 & 1) == 0)
    {
      RegBank = (const llvm::RegisterBank *)llvm::RegisterBankInfo::getRegBankFromConstraints(this, a2, v13, v43, v10);
      if (!RegBank)
      {
        if ((v29 & 1) == 0)
          goto LABEL_26;
        v42 = 0;
        goto LABEL_13;
      }
    }
    SizeInBits = llvm::RegisterBankInfo::getSizeInBits((uint64_t)this, v16, (uint64_t)v10, v9);
    PartialMapping = (const llvm::RegisterBankInfo::PartialMapping *)llvm::RegisterBankInfo::getPartialMapping(this, 0, SizeInBits, RegBank);
    ValueMapping = llvm::RegisterBankInfo::getValueMapping(this, PartialMapping, 1u);
    if (v29)
      break;
    *((_QWORD *)v44 + v13) = ValueMapping;
LABEL_13:
    ++v13;
    v12 += 32;
    if (v11 == v13)
    {
      if (v42 & 1 | ((v29 & 1) == 0))
        goto LABEL_39;
      goto LABEL_26;
    }
  }
  v31 = v44;
  if (!*(_QWORD *)v44)
  {
    if (**((_WORD **)a2 + 2) == 18)
    {
      v39 = llvm::RegisterBankInfo::getSizeInBits((uint64_t)this, *(_DWORD *)(*((_QWORD *)a2 + 4) + 4), (uint64_t)v10, v9);
      v40 = (const llvm::RegisterBankInfo::PartialMapping *)llvm::RegisterBankInfo::getPartialMapping(this, 0, v39, RegBank);
      ValueMapping = llvm::RegisterBankInfo::getValueMapping(this, v40, 1u);
      v31 = v44;
    }
    *v31 = ValueMapping;
  }
  if ((_DWORD)v11 != (_DWORD)v13)
  {
    while (1)
    {
      v32 = *((_QWORD *)a2 + 4);
      v33 = v13;
      if (!*(_BYTE *)(v32 + 32 * v13))
      {
        v34 = v32 + 32 * v13;
        v35 = *(_DWORD *)(v34 + 4);
        if (v35)
        {
          v36 = llvm::RegisterBankInfo::getRegBank((uint64_t)this, *(_DWORD *)(v34 + 4), (uint64_t)v10, v9);
          if (v36)
          {
            v37 = v36;
            v38 = llvm::RegisterBankInfo::getSizeInBits((uint64_t)this, v35, (uint64_t)v10, v9);
            if ((*(unsigned int (**)(llvm::RegisterBankInfo *, const llvm::RegisterBank *, unint64_t, uint64_t))(*(_QWORD *)this + 32))(this, RegBank, v37, v38) == -1)break;
          }
        }
      }
      LODWORD(v13) = v33 + 1;
      if ((_DWORD)v11 == v33 + 1)
        goto LABEL_39;
    }
LABEL_26:
    v22 = this;
    v23 = -2;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    goto LABEL_27;
  }
LABEL_39:
  v25 = (const llvm::RegisterBankInfo::ValueMapping *)sub_1C620FA4C((uint64_t)this, (uint64_t **)v44, (uint64_t)v44 + 8 * v45);
  v22 = this;
  v23 = -1;
  v24 = 1;
  v26 = v41;
LABEL_27:
  InstructionMappingImpl = llvm::RegisterBankInfo::getInstructionMappingImpl(v22, 0, v23, v24, v25, v26);
  if (v44 != v46)
    free(v44);
  return InstructionMappingImpl;
}

uint64_t llvm::RegisterBankInfo::getValueMapping(llvm::RegisterBankInfo *this, int a2, int a3, const llvm::RegisterBank *a4)
{
  const llvm::RegisterBankInfo::PartialMapping *PartialMapping;

  PartialMapping = (const llvm::RegisterBankInfo::PartialMapping *)llvm::RegisterBankInfo::getPartialMapping(this, a2, a3, a4);
  return llvm::RegisterBankInfo::getValueMapping(this, PartialMapping, 1u);
}

uint64_t llvm::RegisterBankInfo::getOperandsMapping(uint64_t a1, uint64_t a2)
{
  return sub_1C620FA4C(a1, *(uint64_t ***)a2, *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 8));
}

uint64_t sub_1C620FA4C(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v4 = a2;
  v15 = sub_1C6193EA0(a2, a3);
  v6 = sub_1C5270F1C(a1 + 72, &v15);
  result = *(_QWORD *)(v6 + 8);
  if (!result)
  {
    v8 = operator new[]();
    if ((uint64_t **)a3 != v4)
    {
      v9 = v8;
      do
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
        v9 += 16;
      }
      while (v9 != v8 + 2 * (a3 - (_QWORD)v4));
    }
    v10 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)(v6 + 8) = v8;
    if (v10)
      MEMORY[0x1CAA32F9C](v10, 0x1060C80ADAFC7CALL);
    if ((uint64_t **)a3 != v4)
    {
      v11 = 0;
      do
      {
        v12 = *v4;
        if (*v4)
        {
          v13 = *(_QWORD *)(v6 + 8) + 16 * v11;
          v14 = *v12;
          *(_DWORD *)(v13 + 8) = *((_DWORD *)v12 + 2);
          *(_QWORD *)v13 = v14;
        }
        ++v4;
        ++v11;
      }
      while (v4 != (uint64_t **)a3);
    }
    return *(_QWORD *)(v6 + 8);
  }
  return result;
}

void llvm::RegisterBankInfo::getInstrPossibleMappings(llvm::RegisterBankInfo *this@<X0>, const llvm::MachineInstr *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void *__src;
  unsigned int v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  v6 = a3 + 16;
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x400000000;
  v7 = (*(uint64_t (**)(llvm::RegisterBankInfo *))(*(_QWORD *)this + 48))(this);
  if (*(_DWORD *)v7 != -2 && *(_QWORD *)(v7 + 8) != 0)
  {
    v9 = v7;
    v10 = *(unsigned int *)(a3 + 8);
    if (v10 >= *(_DWORD *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v6, v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v10) = v9;
    ++*(_DWORD *)(a3 + 8);
  }
  (*(void (**)(void **__return_ptr, llvm::RegisterBankInfo *, const llvm::MachineInstr *))(*(_QWORD *)this + 56))(&__src, this, a2);
  sub_1C61BB99C((unsigned int *)a3, *(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8), (uint64_t *)__src, (uint64_t *)__src + v12);
  if (__src != v13)
    free(__src);
}

double llvm::RegisterBankInfo::getInstrAlternativeMappings@<D0>(_QWORD *a1@<X8>)
{
  double result;

  *a1 = a1 + 2;
  *(_QWORD *)&result = 0x400000000;
  a1[1] = 0x400000000;
  return result;
}

uint64_t llvm::RegisterBankInfo::OperandsMapper::getVRegs(llvm::RegisterBankInfo::OperandsMapper *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *(int *)(*(_QWORD *)this + 4 * a2);
  if ((_DWORD)v2 == -1)
    return *((_QWORD *)this + 6) + 4 * *((unsigned int *)this + 14);
  else
    return *((_QWORD *)this + 6) + 4 * v2;
}

llvm *llvm::RegisterBankInfo::PartialMapping::dump(llvm::RegisterBankInfo::PartialMapping *this)
{
  llvm *v2;
  llvm *v3;
  llvm *result;
  _BYTE *v5;

  v2 = llvm::dbgs(this);
  v3 = llvm::RegisterBankInfo::PartialMapping::print(this, v2);
  result = llvm::dbgs(v3);
  v5 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v5 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v5 + 1;
  *v5 = 10;
  return result;
}

llvm::raw_ostream *llvm::RegisterBankInfo::PartialMapping::print(llvm::RegisterBankInfo::PartialMapping *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  char **v6;

  v4 = sub_1C4816AD8(a2, "[");
  sub_1C5E21910(v4, *(unsigned int *)this, 0, 0, 0);
  v5 = sub_1C4816AD8(v4, ", ");
  sub_1C5E21910(v5, (*(_DWORD *)this + *((_DWORD *)this + 1) - 1), 0, 0, 0);
  sub_1C4816AD8(v5, "], RegBank = ");
  v6 = (char **)*((_QWORD *)this + 1);
  if (v6)
    return llvm::RegisterBank::print(v6, a2, 0, 0);
  else
    return sub_1C4816AD8(a2, "nullptr");
}

llvm *llvm::RegisterBankInfo::ValueMapping::dump(llvm::RegisterBankInfo::ValueMapping *this)
{
  llvm *v2;
  llvm *v3;
  llvm *result;
  _BYTE *v5;

  v2 = llvm::dbgs(this);
  v3 = llvm::RegisterBankInfo::ValueMapping::print((llvm::RegisterBankInfo::PartialMapping **)this, v2);
  result = llvm::dbgs(v3);
  v5 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v5 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v5 + 1;
  *v5 = 10;
  return result;
}

llvm::raw_ostream *llvm::RegisterBankInfo::ValueMapping::print(llvm::RegisterBankInfo::PartialMapping **this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *result;
  uint64_t v6;
  llvm::RegisterBankInfo::PartialMapping *v7;
  uint64_t v8;
  char v9;
  _BYTE *v10;
  _BYTE *v11;

  v4 = sub_1C4816AD8(a2, "#BreakDown: ");
  sub_1C5E21910(v4, *((unsigned int *)this + 2), 0, 0, 0);
  result = sub_1C4816AD8(v4, " ");
  v6 = *((unsigned int *)this + 2);
  if ((_DWORD)v6)
  {
    v7 = *this;
    v8 = 16 * v6;
    v9 = 1;
    do
    {
      if ((v9 & 1) == 0)
        sub_1C4816AD8(a2, ", ");
      v10 = (_BYTE *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v10 >= *((_QWORD *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 91);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v10 + 1;
        *v10 = 91;
      }
      result = llvm::RegisterBankInfo::PartialMapping::print(v7, a2);
      v11 = (_BYTE *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v11 >= *((_QWORD *)a2 + 3))
      {
        result = llvm::raw_ostream::write(a2, 93);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v11 + 1;
        *v11 = 93;
      }
      v9 = 0;
      v7 = (llvm::RegisterBankInfo::PartialMapping *)((char *)v7 + 16);
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

llvm *llvm::RegisterBankInfo::InstructionMapping::dump(llvm::RegisterBankInfo::InstructionMapping *this)
{
  llvm *v2;
  llvm *v3;
  llvm *result;
  _BYTE *v5;

  v2 = llvm::dbgs(this);
  v3 = llvm::RegisterBankInfo::InstructionMapping::print(this, v2);
  result = llvm::dbgs(v3);
  v5 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v5 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v5 + 1;
  *v5 = 10;
  return result;
}

llvm::raw_ostream *llvm::RegisterBankInfo::InstructionMapping::print(llvm::RegisterBankInfo::InstructionMapping *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *result;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  llvm::RegisterBankInfo::PartialMapping **v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;

  v4 = sub_1C4816AD8(a2, "ID: ");
  sub_1C5E21910(v4, *(unsigned int *)this, 0, 0, 0);
  v5 = sub_1C4816AD8(v4, " Cost: ");
  sub_1C5E21910(v5, *((unsigned int *)this + 1), 0, 0, 0);
  result = sub_1C4816AD8(v5, " Mapping: ");
  if (*((_DWORD *)this + 4))
  {
    v7 = 0;
    do
    {
      v8 = *((_QWORD *)this + 1);
      if (v7)
        sub_1C4816AD8(a2, ", ");
      v9 = v7;
      v10 = (llvm::RegisterBankInfo::PartialMapping **)(v8 + 16 * v7);
      v11 = sub_1C4816AD8(a2, "{ Idx: ");
      sub_1C5E21910(v11, v9, 0, 0, 0);
      v12 = sub_1C4816AD8(v11, " Map: ");
      result = llvm::RegisterBankInfo::ValueMapping::print(v10, v12);
      v13 = (_BYTE *)*((_QWORD *)v12 + 4);
      if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
      {
        result = llvm::raw_ostream::write(v12, 125);
      }
      else
      {
        *((_QWORD *)v12 + 4) = v13 + 1;
        *v13 = 125;
      }
      v7 = v9 + 1;
    }
    while ((_DWORD)v9 + 1 != *((_DWORD *)this + 4));
  }
  return result;
}

llvm::RegisterBankInfo::OperandsMapper *llvm::RegisterBankInfo::OperandsMapper::OperandsMapper(llvm::RegisterBankInfo::OperandsMapper *this, llvm::MachineInstr *a2, const llvm::RegisterBankInfo::InstructionMapping *a3, llvm::MachineRegisterInfo *a4)
{
  uint64_t v5;

  *(_QWORD *)this = (char *)this + 16;
  *((_QWORD *)this + 1) = 0x800000000;
  *((_QWORD *)this + 6) = (char *)this + 64;
  *((_QWORD *)this + 7) = 0x800000000;
  *((_QWORD *)this + 12) = a4;
  *((_QWORD *)this + 13) = a2;
  *((_QWORD *)this + 14) = a3;
  v5 = *((unsigned int *)a3 + 4);
  if ((_DWORD)v5)
    sub_1C52716BC((uint64_t)this, v5, -1);
  return this;
}

uint64_t llvm::RegisterBankInfo::OperandsMapper::getVRegsMem(llvm::RegisterBankInfo::OperandsMapper *this, unsigned int a2)
{
  int v3;
  int v4;
  unsigned int v6;
  int v7;

  v3 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 8) + 16 * a2 + 8);
  v4 = *(_DWORD *)(*(_QWORD *)this + 4 * a2);
  if (v4 == -1)
  {
    v4 = *((_DWORD *)this + 14);
    *(_DWORD *)(*(_QWORD *)this + 4 * a2) = v4;
    if (v3)
    {
      v6 = *((_DWORD *)this + 14);
      v7 = v3;
      do
      {
        if (v6 >= *((_DWORD *)this + 15))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 48, (uint64_t)this + 64, v6 + 1, 4);
          v6 = *((_DWORD *)this + 14);
        }
        *(_DWORD *)(*((_QWORD *)this + 6) + 4 * v6) = 0;
        v6 = *((_DWORD *)this + 14) + 1;
        *((_DWORD *)this + 14) = v6;
        --v7;
      }
      while (v7);
    }
  }
  return *((_QWORD *)this + 6) + 4 * v4;
}

int *llvm::RegisterBankInfo::OperandsMapper::createVRegs(llvm::RegisterBankInfo::OperandsMapper *this, unsigned int a2)
{
  int *result;
  int *v5;
  int *v6;
  int *v7;
  uint64_t *v8;
  int GenericVirtualRegister;
  uint64_t v10;

  result = (int *)llvm::RegisterBankInfo::OperandsMapper::getVRegsMem(this, a2);
  if (result != v5)
  {
    v6 = result;
    v7 = v5;
    v8 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 8) + 16 * a2) + 8);
    do
    {
      GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(*((_QWORD *)this + 12), (8 * *((unsigned int *)v8 - 1)) | 1, "", 0);
      *v6++ = GenericVirtualRegister;
      v10 = *v8;
      v8 += 2;
      result = (int *)llvm::MachineRegisterInfo::setRegBank(*((_QWORD *)this + 12), GenericVirtualRegister, v10);
    }
    while (v6 != v7);
  }
  return result;
}

llvm *llvm::RegisterBankInfo::OperandsMapper::dump(llvm::RegisterBankInfo::OperandsMapper *this)
{
  llvm *v2;
  llvm *v3;
  llvm *result;
  _BYTE *v5;

  v2 = llvm::dbgs(this);
  v3 = llvm::RegisterBankInfo::OperandsMapper::print(this, v2, 1);
  result = llvm::dbgs(v3);
  v5 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v5 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v5 + 1;
  *v5 = 10;
  return result;
}

void sub_1C6210368(uint64_t *a1)
{
  sub_1C495EF58(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C621038C(_DWORD *a1, int *a2, int *a3)
{
  _OWORD v7[4];
  _OWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  v10 = sub_1C4D9B584();
  LODWORD(v7[0]) = *a1;
  return sub_1C517CF98((char *)v7, 0, (_DWORD *)v7 + 1, (char *)v8, a2, a3);
}

unint64_t sub_1C6210440(int *a1, int *a2, uint64_t *a3, int *a4)
{
  _OWORD v9[4];
  _OWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, sizeof(v9));
  v12 = sub_1C4D9B584();
  return sub_1C62104F8((char *)v9, 0, v9, (char *)v10, a1, a2, a3, a4);
}

unint64_t sub_1C62104F8(char *a1, uint64_t a2, _DWORD *a3, char *a4, int *a5, int *a6, uint64_t *a7, int *a8)
{
  _DWORD *v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;

  v16 = a2;
  v13 = sub_1C4ED49B0(a1, &v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = sub_1C4ED49B0(a1, &v17, v13, (unint64_t)a4, *a6);
  return sub_1C6210588(a1, v17, v14, a4, *a7, a8);
}

unint64_t sub_1C6210588(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t a5, int *a6)
{
  _QWORD *v9;
  char *v10;
  uint64_t v12;
  int v13[2];

  v12 = a2;
  v9 = sub_1C50FDB34(a1, &v12, a3, (unint64_t)a4, a5);
  *(_QWORD *)v13 = v12;
  v10 = (char *)sub_1C4ED49B0(a1, (uint64_t *)v13, v9, (unint64_t)a4, *a6);
  return sub_1C4E37BA0(a1, *(uint64_t *)v13, v10, a4);
}

void llvm::initializeSafeStackLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED7FF5D8);
  if (v2 != -1)
  {
    v5[0] = sub_1C5271768;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED7FF5D8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t llvm::createSafeStackPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5271804(v1);
}

llvm::PointerType *sub_1C6210688(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t **a5)
{
  llvm::PointerType *v9;
  uint64_t v11;

  v9 = (llvm::PointerType *)llvm::FunctionType::get(a5, &v11, 0, 0);
  return llvm::Module::getOrInsertFunction(a1, a2, a3, v9, a4);
}

void **sub_1C6210720(void **a1)
{
  void **v2;
  void **v3;

  v3 = a1 + 2;
  v2 = (void **)*a1;
  if (v2 != v3)
    free(v2);
  return a1;
}

uint64_t sub_1C6210754(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  void (**v13)(void);
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t (**v17)(void);
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[2];
  _BYTE v21[24];
  _BYTE *v22;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[2];
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 8);
  v8 = (_QWORD *)a3[3];
  if (v8)
  {
    if (v8 == a3)
    {
      v24 = v23;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v23);
    }
    else
    {
      v24 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
    }
  }
  else
  {
    v24 = 0;
  }
  sub_1C62109D0(v25, v6, v7, v23);
  v9 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 8);
  v10 = (_QWORD *)a3[3];
  if (v10)
  {
    if (v10 == a3)
    {
      v19 = v18;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v18);
    }
    else
    {
      v19 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
    }
  }
  else
  {
    v19 = 0;
  }
  sub_1C62109D0(v20, v9, v9, v18);
  sub_1C61F133C(a1, v25, v20);
  v11 = v22;
  if (v22 == v21)
  {
    v12 = 4;
    v11 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_9;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_9:
  if (v19 == v18)
  {
    v13 = (void (**)(void))(v18[0] + 32);
  }
  else
  {
    if (!v19)
      goto LABEL_13;
    v13 = (void (**)(void))(*v19 + 40);
  }
  (*v13)();
LABEL_13:
  v14 = v27;
  if (v27 == v26)
  {
    v15 = 4;
    v14 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_17;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_17:
  result = (uint64_t)v24;
  if (v24 == v23)
  {
    v17 = (uint64_t (**)(void))(v23[0] + 32);
  }
  else
  {
    if (!v24)
      return result;
    v17 = (uint64_t (**)(void))(*v24 + 40);
  }
  return (*v17)();
}

void sub_1C6210970()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6210984()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E814A5A0;
  return result;
}

void sub_1C62109A8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E814A5A0;
}

BOOL sub_1C62109C0(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

_QWORD *sub_1C62109D0(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v7;
  void (**v8)(void);
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = (_QWORD *)a4[3];
  if (v7)
  {
    if (v7 == a4)
    {
      v11 = v10;
      (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v10);
    }
    else
    {
      v11 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1C6210AC4(a1, a2, a3, (uint64_t)v10);
  if (v11 == v10)
  {
    v8 = (void (**)(void))(v10[0] + 32);
    goto LABEL_6;
  }
  if (v11)
  {
    v8 = (void (**)(void))(*v11 + 40);
LABEL_6:
    (*v8)();
  }
  return a1;
}

_QWORD *sub_1C6210AC4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  *a1 = a2;
  a1[1] = a3;
  v5 = *(_QWORD *)(a4 + 24);
  if (v5)
  {
    if (v5 == a4)
    {
      a1[5] = a1 + 2;
      (*(void (**)(_QWORD))(**(_QWORD **)(a4 + 24) + 24))(*(_QWORD *)(a4 + 24));
    }
    else
    {
      a1[5] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  else
  {
    a1[5] = 0;
  }
  sub_1C6210B34((uint64_t)a1);
  return a1;
}

uint64_t sub_1C6210B34(uint64_t result)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v1 = *(uint64_t **)result;
  if (*(_QWORD *)result != *(_QWORD *)(result + 8))
  {
    v2 = (_QWORD *)result;
    while (1)
    {
      v5 = *v1;
      v3 = v2[5];
      if (!v3)
        break;
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v5);
      if ((result & 1) == 0)
      {
        v4 = (uint64_t *)v2[1];
        v1 = (uint64_t *)(*v2 + 8);
        *v2 = v1;
        if (v1 != v4)
          continue;
      }
      return result;
    }
    sub_1C485C2F0();
    return sub_1C6210BA0();
  }
  return result;
}

uint64_t sub_1C6210BA0(uint64_t a1)
{
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 2048), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 2024), 8);
  sub_1C6210BE8((char **)(a1 + 1304));
  sub_1C6210C5C((char **)(a1 + 8));
  return a1;
}

char **sub_1C6210BE8(char **a1)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = 88 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 72];
      if (&v2[v4 - 56] != v5)
        free(v5);
      v4 -= 88;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

char **sub_1C6210C5C(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 80 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 72];
      if (&v2[v4 - 56] != v5)
        free(v5);
      v4 -= 80;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_1C6210CD0(char **a1, _WORD *a2)
{
  uint64_t v4;
  char *v5;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED7FF630, 0, 0);
  byte_1ED7FF6B0 = 0;
  qword_1ED7FF6B8 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED7FF6C0 = 0;
  qword_1ED7FF630 = (uint64_t)&unk_1E819E898;
  qword_1ED7FF6C8 = (uint64_t)&off_1E819E9A0;
  qword_1ED7FF6D0 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7FF6E8 = (uint64_t)&qword_1ED7FF6D0;
  llvm::cl::Option::setArgStr(v4, "safestack-use-pointer-address", 0x1DuLL);
  v5 = *a1;
  byte_1ED7FF6B0 = **a1;
  byte_1ED7FF6C1 = 1;
  byte_1ED7FF6C0 = *v5;
  word_1ED7FF63A = (32 * (*a2 & 3)) | word_1ED7FF63A & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7FF630);
}

llvm::raw_ostream *sub_1C6210DA4(llvm::raw_ostream *a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  size_t v7;
  _WORD *v8;
  const char *v9;

  sub_1C4816AD8(a1, "{");
  v4 = sub_1C476B7EC(a2);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = v4;
    v6 = 0;
    do
    {
      if ((v6 & 1) != 0)
        v7 = 2;
      else
        v7 = 0;
      v8 = (_WORD *)*((_QWORD *)a1 + 4);
      if (v7 <= *((_QWORD *)a1 + 3) - (_QWORD)v8)
      {
        if ((v6 & 1) != 0)
        {
          *v8 = 8236;
          *((_QWORD *)a1 + 4) += 2;
        }
      }
      else
      {
        if ((v6 & 1) != 0)
          v9 = ", ";
        else
          v9 = 0;
        llvm::raw_ostream::write(a1, v9, v7);
      }
      llvm::raw_ostream::operator<<(a1, v5);
      v6 = 1;
      v5 = sub_1C476BA0C((_QWORD *)a2, v5 + 1, *(_DWORD *)(a2 + 64), 1u);
    }
    while ((v5 & 0x80000000) == 0);
  }
  sub_1C4816AD8(a1, "}");
  return a1;
}

uint64_t sub_1C6210E90(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v3 = sub_1C52777FC(a1, a2, 1);
  v4 = *(_QWORD *)a1;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 88 * v5);
  v7 = *(_QWORD *)v3;
  *(_QWORD *)((char *)v6 + 5) = *(_QWORD *)(v3 + 5);
  *v6 = v7;
  v6[3] = 0x600000000;
  v6[2] = v6 + 4;
  result = (uint64_t)(v6 + 2);
  if (*(_DWORD *)(v3 + 24))
    result = sub_1C476B4F4(result, v3 + 16);
  *(_DWORD *)(v4 + 88 * v5 + 80) = *(_DWORD *)(v3 + 80);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C6210F20(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
    return sub_1C621110C(a1, a2, a3, a4);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)a1 + 80 * v6;
  v9 = *a3;
  *(_DWORD *)v8 = *a2;
  *(_DWORD *)(v8 + 4) = v9;
  *(_QWORD *)(v8 + 16) = 0x600000000;
  *(_QWORD *)(v8 + 8) = v8 + 24;
  result = v8 + 8;
  if (*(_DWORD *)(a4 + 8))
    result = sub_1C49DA960(result, a4);
  *(_DWORD *)(v7 + 80 * v6 + 72) = *(_DWORD *)(a4 + 64);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_1C6210FC4(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 88, &v5);
  sub_1C6211030((uint64_t *)a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C6211030(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v5 = *a1 + 88 * v2;
    v6 = *a1 + 16;
    do
    {
      v8 = v6 - 16;
      v7 = *(_QWORD *)(v6 - 16);
      *(_QWORD *)(a2 + 5) = *(_QWORD *)(v6 - 11);
      *(_QWORD *)a2 = v7;
      *(_QWORD *)(a2 + 16) = a2 + 32;
      *(_QWORD *)(a2 + 24) = 0x600000000;
      if (*(_DWORD *)(v6 + 8))
        sub_1C476B4F4(a2 + 16, v6);
      *(_DWORD *)(a2 + 80) = *(_DWORD *)(v6 + 64);
      a2 += 88;
      v6 += 88;
    }
    while (v8 + 88 != v5);
    v9 = *((_DWORD *)a1 + 2);
    if (v9)
    {
      v10 = *a1;
      v11 = 88 * v9;
      do
      {
        v12 = *(void **)(v10 + v11 - 72);
        if ((void *)(v10 + v11 - 56) != v12)
          free(v12);
        v11 -= 88;
      }
      while (v11);
    }
  }
}

uint64_t sub_1C621110C(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  _DWORD *v8;
  int v9;
  char *v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unint64_t v16;

  v16 = 0;
  v8 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 80, &v16);
  v9 = *(_DWORD *)(a1 + 8);
  v10 = (char *)&v8[20 * v9];
  v11 = *a3;
  *(_DWORD *)v10 = *a2;
  *((_DWORD *)v10 + 1) = v11;
  *((_QWORD *)v10 + 2) = 0x600000000;
  *((_QWORD *)v10 + 1) = v10 + 24;
  v12 = (uint64_t)(v10 + 8);
  if (*(_DWORD *)(a4 + 8))
    sub_1C49DA960(v12, a4);
  v8[20 * v9 + 18] = *(_DWORD *)(a4 + 64);
  sub_1C62111F4((uint64_t *)a1, (uint64_t)v8);
  v13 = v16;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v8;
  v14 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 12) = v13;
  return (uint64_t)&v8[20 * v14 - 20];
}

void sub_1C62111F4(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v5 = 0;
    v6 = *a1;
    v7 = *a1 + 80 * v2;
    do
    {
      v8 = a2 + v5;
      v9 = v6 + v5;
      *(_QWORD *)v8 = *(_QWORD *)(v6 + v5);
      *(_QWORD *)(a2 + v5 + 8) = a2 + v5 + 24;
      *(_QWORD *)(v8 + 16) = 0x600000000;
      if (*(_DWORD *)(v6 + v5 + 16))
        sub_1C476B4F4(a2 + v5 + 8, v9 + 8);
      *(_DWORD *)(v8 + 72) = *(_DWORD *)(v9 + 72);
      v5 += 80;
    }
    while (v9 + 80 != v7);
    v10 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v10)
    {
      v11 = *a1;
      v12 = 80 * v10;
      do
      {
        v13 = *(void **)(v11 + v12 - 72);
        if ((void *)(v11 + v12 - 56) != v13)
          free(v13);
        v12 -= 80;
      }
      while (v12);
    }
  }
}

uint64_t sub_1C62112D0(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;

  v3 = sub_1C5277BF4(a1, a2);
  v4 = *(_QWORD *)a1;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 80 * v5);
  *v6 = *(_QWORD *)v3;
  v6[2] = 0x600000000;
  v6[1] = v6 + 3;
  result = (uint64_t)(v6 + 1);
  if (*(_DWORD *)(v3 + 16))
    result = sub_1C49DA960(result, v3 + 8);
  *(_DWORD *)(v4 + 80 * v5 + 72) = *(_DWORD *)(v3 + 72);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_1C6211354(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 80, &v5);
  sub_1C62111F4((uint64_t *)a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

uint64_t llvm::ScheduleDAG::getNodeDesc(uint64_t a1, uint64_t a2)
{
  int v2;

  if (a2 && (v2 = *(__int16 *)(a2 + 24), v2 < 0))
    return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 48 * (unsigned __int16)~(_WORD)v2;
  else
    return 0;
}

void llvm::SDep::dump(llvm::SDep *this, const llvm::TargetRegisterInfo *a2)
{
  char *v4;
  llvm *v5;
  llvm *v6;
  int v7;
  llvm *v8;
  llvm::raw_ostream *v9;
  llvm *v10;
  llvm::raw_ostream *v11;
  llvm *v12;
  llvm *v13;
  char *v14;
  llvm *v15;
  llvm::raw_ostream *v16;
  llvm *v17;
  llvm *v18;
  llvm::raw_ostream *v19;
  void (**v20)(void);
  llvm::SUnit *v21;
  unsigned int v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = off_1E814A748[(*(_QWORD *)this >> 1) & 3];
  v5 = llvm::dbgs(this);
  v6 = sub_1C4816AD8(v5, v4);
  v7 = (*(_DWORD *)this >> 1) & 3;
  if ((v7 - 1) < 2)
  {
    v8 = llvm::dbgs(v6);
    v9 = sub_1C4816AD8(v8, " Latency=");
    llvm::raw_ostream::operator<<(v9, *((unsigned int *)this + 3));
    return;
  }
  if (v7 == 3)
  {
    v10 = llvm::dbgs(v6);
    v11 = sub_1C4816AD8(v10, " Latency=");
    v12 = llvm::raw_ostream::operator<<(v11, *((unsigned int *)this + 3));
    switch(*((_DWORD *)this + 2))
    {
      case 0:
        v13 = llvm::dbgs(v12);
        v14 = " Barrier";
        goto LABEL_6;
      case 1:
      case 2:
        v13 = llvm::dbgs(v12);
        v14 = " Memory";
        goto LABEL_6;
      case 3:
        v13 = llvm::dbgs(v12);
        v14 = " Artificial";
        goto LABEL_6;
      case 4:
        v13 = llvm::dbgs(v12);
        v14 = " Weak";
        goto LABEL_6;
      case 5:
        v13 = llvm::dbgs(v12);
        v14 = " Cluster";
LABEL_6:
        sub_1C4816AD8(v13, v14);
        break;
      default:
        return;
    }
  }
  else
  {
    v15 = llvm::dbgs(v6);
    v16 = sub_1C4816AD8(v15, " Latency=");
    v17 = llvm::raw_ostream::operator<<(v16, *((unsigned int *)this + 3));
    if (a2 && (*(_BYTE *)this & 6) == 0 && *((_DWORD *)this + 2))
    {
      v18 = llvm::dbgs(v17);
      v19 = sub_1C4816AD8(v18, " Reg=");
      llvm::printReg(*((_DWORD *)this + 2), (uint64_t)a2, 0, 0, (uint64_t)v23);
      if (!v24)
      {
        sub_1C485C2F0();
        llvm::SUnit::setDepthToAtLeast(v21, v22);
        return;
      }
      (*(void (**)(_QWORD *, llvm::raw_ostream *))(*v24 + 48))(v24, v19);
      if (v24 == v23)
      {
        v20 = (void (**)(void))(v23[0] + 32);
      }
      else
      {
        if (!v24)
          return;
        v20 = (void (**)(void))(*v24 + 40);
      }
      (*v20)();
    }
  }
}

void llvm::SUnit::setDepthToAtLeast(llvm::SUnit *this, unsigned int a2)
{
  if ((*((_BYTE *)this + 236) & 1) == 0)
    llvm::SUnit::ComputeDepth(this);
  if (*((_DWORD *)this + 60) < a2)
  {
    llvm::SUnit::setDepthDirty(this);
    *((_DWORD *)this + 60) = a2;
    *((_BYTE *)this + 236) |= 1u;
  }
}

void llvm::SUnit::setHeightToAtLeast(llvm::SUnit *this, unsigned int a2)
{
  if ((*((_BYTE *)this + 236) & 2) == 0)
    llvm::SUnit::ComputeHeight(this);
  if (*((_DWORD *)this + 61) < a2)
  {
    llvm::SUnit::setHeightDirty(this);
    *((_DWORD *)this + 61) = a2;
    *((_BYTE *)this + 236) |= 2u;
  }
}

llvm::raw_ostream *llvm::SUnit::dumpAttributes(llvm::SUnit *this)
{
  llvm *v2;
  llvm::raw_ostream *v3;
  llvm::raw_ostream *v4;
  llvm *v5;
  llvm *v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  llvm *v9;
  llvm *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  llvm *v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  llvm *v16;
  llvm::raw_ostream *v17;
  llvm::raw_ostream *v18;
  llvm *v19;
  llvm *v20;
  llvm::raw_ostream *v21;
  llvm::raw_ostream *v22;
  llvm *v23;
  llvm *v24;
  llvm::raw_ostream *v25;
  llvm::raw_ostream *v26;
  llvm *v27;
  llvm *v28;
  llvm::raw_ostream *v29;
  llvm::raw_ostream *v30;

  v2 = llvm::dbgs(this);
  v3 = sub_1C4816AD8(v2, "  # preds left       : ");
  v4 = llvm::raw_ostream::operator<<(v3, *((unsigned int *)this + 52));
  v5 = sub_1C4816AD8(v4, "\n");
  v6 = llvm::dbgs(v5);
  v7 = sub_1C4816AD8(v6, "  # succs left       : ");
  v8 = llvm::raw_ostream::operator<<(v7, *((unsigned int *)this + 53));
  v9 = sub_1C4816AD8(v8, "\n");
  if (*((_DWORD *)this + 54))
  {
    v10 = llvm::dbgs(v9);
    v11 = sub_1C4816AD8(v10, "  # weak preds left  : ");
    v12 = llvm::raw_ostream::operator<<(v11, *((unsigned int *)this + 54));
    v9 = sub_1C4816AD8(v12, "\n");
  }
  if (*((_DWORD *)this + 55))
  {
    v13 = llvm::dbgs(v9);
    v14 = sub_1C4816AD8(v13, "  # weak succs left  : ");
    v15 = llvm::raw_ostream::operator<<(v14, *((unsigned int *)this + 55));
    v9 = sub_1C4816AD8(v15, "\n");
  }
  v16 = llvm::dbgs(v9);
  v17 = sub_1C4816AD8(v16, "  # rdefs left       : ");
  v18 = llvm::raw_ostream::operator<<(v17, *((unsigned __int16 *)this + 112));
  v19 = sub_1C4816AD8(v18, "\n");
  v20 = llvm::dbgs(v19);
  v21 = sub_1C4816AD8(v20, "  Latency            : ");
  v22 = llvm::raw_ostream::operator<<(v21, *((unsigned __int16 *)this + 113));
  v23 = sub_1C4816AD8(v22, "\n");
  v24 = llvm::dbgs(v23);
  v25 = sub_1C4816AD8(v24, "  Depth              : ");
  if ((*((_BYTE *)this + 236) & 1) == 0)
    llvm::SUnit::ComputeDepth(this);
  v26 = llvm::raw_ostream::operator<<(v25, *((unsigned int *)this + 60));
  v27 = sub_1C4816AD8(v26, "\n");
  v28 = llvm::dbgs(v27);
  v29 = sub_1C4816AD8(v28, "  Height             : ");
  if ((*((_BYTE *)this + 236) & 2) == 0)
    llvm::SUnit::ComputeHeight(this);
  v30 = llvm::raw_ostream::operator<<(v29, *((unsigned int *)this + 61));
  return sub_1C4816AD8(v30, "\n");
}

llvm::raw_ostream *llvm::ScheduleDAG::dumpNodeName(llvm *a1, unsigned int *a2)
{
  unsigned int *v3;
  llvm *v4;
  llvm::raw_ostream *v5;
  llvm *v6;
  char *v7;

  if ((unsigned int *)((char *)a1 + 72) == a2)
  {
    v4 = llvm::dbgs(a1);
    v7 = "EntrySU";
  }
  else
  {
    v3 = (unsigned int *)((char *)a1 + 344);
    v4 = llvm::dbgs(a1);
    if (v3 == a2)
    {
      v7 = "ExitSU";
    }
    else
    {
      v5 = sub_1C4816AD8(v4, "SU(");
      v6 = llvm::raw_ostream::operator<<(v5, a2[48]);
      v4 = llvm::dbgs(v6);
      v7 = ")";
    }
  }
  return sub_1C4816AD8(v4, v7);
}

llvm::raw_ostream *llvm::ScheduleDAG::dumpNodeAll(const llvm::TargetRegisterInfo **this, llvm::SDep **a2)
{
  llvm::raw_ostream *result;
  llvm *v5;
  uint64_t v6;
  llvm::SDep *v7;
  uint64_t v8;
  llvm *v9;
  llvm *v10;
  llvm *v11;
  llvm *v12;
  _BYTE *v13;
  llvm *v14;
  uint64_t v15;
  llvm::SDep *v16;
  uint64_t v17;
  llvm *v18;
  llvm *v19;
  llvm *v20;
  llvm *v21;
  _BYTE *v22;

  (*((void (**)(const llvm::TargetRegisterInfo **))*this + 4))(this);
  result = llvm::SUnit::dumpAttributes((llvm::SUnit *)a2);
  if (*((_DWORD *)a2 + 10))
  {
    v5 = llvm::dbgs(result);
    result = sub_1C4816AD8(v5, "  Predecessors:\n");
    v6 = *((unsigned int *)a2 + 10);
    if ((_DWORD)v6)
    {
      v7 = a2[4];
      v8 = 16 * v6;
      do
      {
        v9 = llvm::dbgs(result);
        sub_1C4816AD8(v9, "    ");
        v10 = llvm::ScheduleDAG::dumpNodeName((llvm *)this, (unsigned int *)(*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8));
        v11 = llvm::dbgs(v10);
        sub_1C4816AD8(v11, ": ");
        llvm::SDep::dump(v7, this[3]);
        result = llvm::dbgs(v12);
        v13 = (_BYTE *)*((_QWORD *)result + 4);
        if ((unint64_t)v13 >= *((_QWORD *)result + 3))
        {
          result = llvm::raw_ostream::write(result, 10);
        }
        else
        {
          *((_QWORD *)result + 4) = v13 + 1;
          *v13 = 10;
        }
        v7 = (llvm::SDep *)((char *)v7 + 16);
        v8 -= 16;
      }
      while (v8);
    }
  }
  if (*((_DWORD *)a2 + 30))
  {
    v14 = llvm::dbgs(result);
    result = sub_1C4816AD8(v14, "  Successors:\n");
    v15 = *((unsigned int *)a2 + 30);
    if ((_DWORD)v15)
    {
      v16 = a2[14];
      v17 = 16 * v15;
      do
      {
        v18 = llvm::dbgs(result);
        sub_1C4816AD8(v18, "    ");
        v19 = llvm::ScheduleDAG::dumpNodeName((llvm *)this, (unsigned int *)(*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8));
        v20 = llvm::dbgs(v19);
        sub_1C4816AD8(v20, ": ");
        llvm::SDep::dump(v16, this[3]);
        result = llvm::dbgs(v21);
        v22 = (_BYTE *)*((_QWORD *)result + 4);
        if ((unint64_t)v22 >= *((_QWORD *)result + 3))
        {
          result = llvm::raw_ostream::write(result, 10);
        }
        else
        {
          *((_QWORD *)result + 4) = v22 + 1;
          *v22 = 10;
        }
        v16 = (llvm::SDep *)((char *)v16 + 16);
        v17 -= 16;
      }
      while (v17);
    }
  }
  return result;
}

void llvm::ScheduleDAGTopologicalSort::AddPred(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  void **v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)(a1 + 320);
  v4 = *(_DWORD *)(v3 + 4 * *(unsigned int *)(a2 + 192));
  v5 = *(_DWORD *)(v3 + 4 * *(unsigned int *)(a3 + 192));
  if (v4 < v5)
  {
    v8 = (void **)(a1 + 344);
    v9 = *(unsigned int *)(a1 + 352);
    if ((_DWORD)v9)
      bzero(*v8, 8 * v9);
    llvm::ScheduleDAGTopologicalSort::DFS((_QWORD *)a1, a2, v5, &v10);
    llvm::ScheduleDAGTopologicalSort::Shift(a1, v8, v4, v5);
  }
}

uint64_t sub_1C6211B60(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_1C49DA4AC(a1, a2, a3);
  v4 = *(_QWORD *)a1;
  v5 = (uint64_t *)(*(_QWORD *)a1 + 16 * v3);
  *v5 = *a2;
  v5[1] = *a3;
  v6 = v3 + 1;
  *(_DWORD *)(a1 + 8) = v6;
  return v4 + 16 * v6 - 16;
}

void llvm::ScheduleDAGTopologicalSort::Shift(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  int v5;
  char *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  char *v19;
  uint64_t v20;
  void *__p;
  char *v22;
  unint64_t v23;

  __p = 0;
  v22 = 0;
  v23 = 0;
  if (a3 <= a4)
  {
    v5 = a3;
    v8 = 0;
    v9 = 0;
    v10 = a4 + 1;
    v11 = 4 * a3;
    do
    {
      v12 = *(_QWORD *)(a1 + 296);
      v13 = *(unsigned int *)(v12 + v11);
      v14 = *(_QWORD *)(*a2 + 8 * (v13 >> 6));
      if (((1 << v13) & v14) != 0)
      {
        *(_QWORD *)(*a2 + 8 * (v13 >> 6)) = v14 & ~(1 << v13);
        if ((unint64_t)v8 >= v23)
        {
          v8 = sub_1C527C67C((char **)&__p, v13);
        }
        else
        {
          *(_DWORD *)v8 = v13;
          v8 += 4;
        }
        v22 = v8;
        ++v9;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 320) + 4 * (int)v13) = v5 - v9;
        *(_DWORD *)(v12 + 4 * (v5 - v9)) = v13;
      }
      ++v5;
      v11 += 4;
    }
    while (v10 != v5);
    v15 = __p;
    if (__p != v8)
    {
      v16 = *(_QWORD *)(a1 + 320);
      v17 = (_DWORD *)(*(_QWORD *)(a1 + 296) + 4 * v10 - 4 * v9);
      v18 = a4 - v9 + 1;
      v19 = (char *)__p;
      do
      {
        v20 = *(int *)v19;
        v19 += 4;
        *(_DWORD *)(v16 + 4 * v20) = v18;
        *v17++ = v20;
        ++v18;
      }
      while (v19 != v8);
    }
    if (v15)
      operator delete(v15);
  }
}

_DWORD *llvm::ScheduleDAGTopologicalSort::AddSUnitWithoutPredecessors(llvm::ScheduleDAGTopologicalSort *this, const llvm::SUnit *a2)
{
  _DWORD *v4;
  unint64_t v5;
  _DWORD *v6;
  char *v7;
  int v8;
  char *v9;
  int v11;
  int v12;

  v4 = (_DWORD *)*((_QWORD *)this + 38);
  v5 = ((unint64_t)v4 - *((_QWORD *)this + 37)) >> 2;
  v12 = v5;
  v6 = (_DWORD *)*((_QWORD *)this + 41);
  if ((unint64_t)v6 >= *((_QWORD *)this + 42))
  {
    v7 = sub_1C4E36640((char **)this + 40, &v12);
    v4 = (_DWORD *)*((_QWORD *)this + 38);
  }
  else
  {
    *v6 = v5;
    v7 = (char *)(v6 + 1);
  }
  *((_QWORD *)this + 41) = v7;
  v8 = *((_DWORD *)a2 + 48);
  v11 = v8;
  if ((unint64_t)v4 >= *((_QWORD *)this + 39))
  {
    v9 = sub_1C4E36640((char **)this + 37, &v11);
    v7 = (char *)*((_QWORD *)this + 41);
  }
  else
  {
    *v4 = v8;
    v9 = (char *)(v4 + 1);
  }
  *((_QWORD *)this + 38) = v9;
  return sub_1C4833580((_DWORD *)this + 86, (unint64_t)&v7[-*((_QWORD *)this + 40)] >> 2, 0);
}

void llvm::ScheduleHazardRecognizer::~ScheduleHazardRecognizer(llvm::ScheduleHazardRecognizer *this)
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6211DB0()
{
  return 0;
}

uint64_t sub_1C6211DB8()
{
  return 0;
}

uint64_t sub_1C6211DCC()
{
  return 0;
}

uint64_t sub_1C6211DD4()
{
  return 0;
}

uint64_t sub_1C6211DDC()
{
  return 0;
}

uint64_t sub_1C6211DEC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
}

void llvm::ScheduleDAGInstrs::reduceHugeMemNodeMaps(llvm::ScheduleDAGInstrs *this, int32x2_t *a2, int32x2_t *a3, int a4)
{
  int32x2_t v8;
  int32x2_t v9;
  uint64_t v10;
  char *v11;
  _DWORD *v12;
  int32x2_t v13;
  int32x2_t v14;
  uint64_t v15;
  char *v16;
  _DWORD *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  void *__p;
  char *v23;
  unint64_t v24;

  __p = 0;
  v23 = 0;
  v24 = 0;
  sub_1C515E708((uint64_t)&__p, (a3[6].i32[0] + a2[6].i32[0]));
  v8 = a2[3];
  v9 = a2[4];
  while (*(_QWORD *)&v8 != *(_QWORD *)&v9)
  {
    v10 = *(_QWORD *)(*(_QWORD *)&v8 + 16);
    if (v10 != *(_QWORD *)&v8 + 8)
    {
      v11 = v23;
      do
      {
        v12 = (_DWORD *)(*(_QWORD *)(v10 + 16) + 192);
        if ((unint64_t)v11 >= v24)
        {
          v11 = sub_1C4E36640((char **)&__p, v12);
        }
        else
        {
          *(_DWORD *)v11 = *v12;
          v11 += 4;
        }
        v23 = v11;
        v10 = *(_QWORD *)(v10 + 8);
      }
      while (v10 != *(_QWORD *)&v8 + 8);
    }
    *(_QWORD *)&v8 += 32;
  }
  v13 = a3[3];
  v14 = a3[4];
  while (*(_QWORD *)&v13 != *(_QWORD *)&v14)
  {
    v15 = *(_QWORD *)(*(_QWORD *)&v13 + 16);
    if (v15 != *(_QWORD *)&v13 + 8)
    {
      v16 = v23;
      do
      {
        v17 = (_DWORD *)(*(_QWORD *)(v15 + 16) + 192);
        if ((unint64_t)v16 >= v24)
        {
          v16 = sub_1C4E36640((char **)&__p, v17);
        }
        else
        {
          *(_DWORD *)v16 = *v17;
          v16 += 4;
        }
        v23 = v16;
        v15 = *(_QWORD *)(v15 + 8);
      }
      while (v15 != *(_QWORD *)&v13 + 8);
    }
    *(_QWORD *)&v13 += 32;
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v18 = *(_DWORD *)&v23[-4 * a4];
  v19 = *((_QWORD *)this + 6);
  v20 = v19 + 272 * v18;
  v21 = *((_QWORD *)this + 263);
  if (v21)
  {
    if (*(_DWORD *)(v19 + 272 * v18 + 192) >= *(_DWORD *)(v21 + 192))
      goto LABEL_23;
    sub_1C527E8C8(v21, v20);
  }
  *((_QWORD *)this + 263) = v20;
LABEL_23:
  llvm::ScheduleDAGInstrs::insertBarrierChain((uint64_t)this, a2);
  llvm::ScheduleDAGInstrs::insertBarrierChain((uint64_t)this, a3);
  if (__p)
  {
    v23 = (char *)__p;
    operator delete(__p);
  }
}

void llvm::ScheduleDAGInstrs::dumpNode(llvm::ScheduleDAGInstrs *this, const llvm::SUnit *a2)
{
  llvm *v3;
  llvm *v4;

  v3 = llvm::ScheduleDAG::dumpNodeName(this, (unsigned int *)a2);
  v4 = llvm::dbgs(v3);
  sub_1C4816AD8(v4, ": ");
  llvm::MachineInstr::dump(*((llvm::MachineInstr **)a2 + 1));
}

llvm::raw_ostream *llvm::ScheduleDAGInstrs::dump(llvm::raw_ostream *this)
{
  uint64_t v1;
  llvm::SDep **v2;
  llvm::SDep **v3;

  v1 = (uint64_t)this;
  if (*((_QWORD *)this + 10))
    this = llvm::ScheduleDAG::dumpNodeAll((const llvm::TargetRegisterInfo **)this, (llvm::SDep **)this + 9);
  v2 = *(llvm::SDep ***)(v1 + 48);
  v3 = *(llvm::SDep ***)(v1 + 56);
  while (v2 != v3)
  {
    this = llvm::ScheduleDAG::dumpNodeAll((const llvm::TargetRegisterInfo **)v1, v2);
    v2 += 34;
  }
  if (*(_QWORD *)(v1 + 352))
    return llvm::ScheduleDAG::dumpNodeAll((const llvm::TargetRegisterInfo **)v1, (llvm::SDep **)(v1 + 344));
  return this;
}

BOOL llvm::ScheduleDAGInstrs::canAddEdge(llvm::ScheduleDAGInstrs *this, llvm::SUnit *a2, llvm::SUnit *a3)
{
  return (llvm::ScheduleDAGInstrs *)((char *)this + 344) == a2
      || !llvm::ScheduleDAGTopologicalSort::IsReachable((llvm::ScheduleDAGInstrs *)((char *)this + 2120), a3, a2);
}

uint64_t llvm::ScheduleDAGInstrs::addEdge(llvm::ScheduleDAGInstrs *this, llvm::SUnit *a2, const llvm::SDep *a3)
{
  char *v5;
  char v8;

  if ((llvm::ScheduleDAGInstrs *)((char *)this + 344) != a2)
  {
    v5 = (char *)this + 2120;
    if (llvm::ScheduleDAGTopologicalSort::IsReachable((llvm::ScheduleDAGInstrs *)((char *)this + 2120), (const llvm::SUnit *)(*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8), a2))
    {
      return 0;
    }
    llvm::ScheduleDAGTopologicalSort::AddPredQueued((uint64_t)v5, a2, (llvm::SUnit *)(*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8));
  }
  v8 = (~*(_DWORD *)a3 & 6) != 0 || *((_DWORD *)a3 + 2) != 3;
  llvm::SUnit::addPred((int64_t)a2, a3, v8);
  return 1;
}

llvm::raw_ostream *llvm::ILPValue::print(llvm::ILPValue *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v4;
  unint64_t v5;
  unsigned int v6;
  _QWORD v8[3];

  sub_1C5E21910(a2, *(unsigned int *)this, 0, 0, 0);
  v4 = sub_1C4816AD8(a2, " / ");
  sub_1C5E21910(v4, *((unsigned int *)this + 1), 0, 0, 0);
  sub_1C4816AD8(v4, " = ");
  v6 = *((_DWORD *)this + 1);
  if (!v6)
    return sub_1C4816AD8(a2, "BADILP");
  LODWORD(v5) = *(_DWORD *)this;
  v8[0] = &off_1E7FA8D00;
  v8[1] = "%g";
  *(double *)&v8[2] = (double)v5 / (double)v6;
  return llvm::raw_ostream::operator<<(a2, (uint64_t)v8);
}

llvm::raw_ostream *llvm::ILPValue::dump(llvm::ILPValue *this)
{
  llvm *v2;
  llvm::raw_ostream *result;
  _BYTE *v4;

  v2 = llvm::dbgs(this);
  result = llvm::operator<<(v2, this);
  v4 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v4 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v4 + 1;
  *v4 = 10;
  return result;
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *a1, llvm::ILPValue *this)
{
  llvm::ILPValue::print(this, a1);
  return a1;
}

uint64_t sub_1C6212274(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = a1 + 48;
  v5 = a1 + 32;
  *(_QWORD *)(a1 + 40) = 0x400000000;
  if (*(_DWORD *)(a2 + 40))
    sub_1C5282284(v5, a2 + 32);
  *(_QWORD *)(a1 + 112) = a1 + 128;
  *(_QWORD *)(a1 + 120) = 0x400000000;
  if (*(_DWORD *)(a2 + 120))
    sub_1C5282284(a1 + 112, a2 + 112);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  v6 = *(_OWORD *)(a2 + 208);
  v7 = *(_OWORD *)(a2 + 224);
  v8 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v8;
  *(_OWORD *)(a1 + 208) = v6;
  *(_OWORD *)(a1 + 224) = v7;
  return a1;
}

void sub_1C6212304(_WORD *a1, _WORD *a2, char **a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED7FF870, 0, 0);
  byte_1ED7FF8F0 = 0;
  qword_1ED7FF8F8 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED7FF900 = 0;
  qword_1ED7FF870 = (uint64_t)&unk_1E819E898;
  qword_1ED7FF908 = (uint64_t)&off_1E819E9A0;
  qword_1ED7FF910 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7FF928 = (uint64_t)&qword_1ED7FF910;
  sub_1C62123B8(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7FF870);
}

__n128 sub_1C62123B8(_WORD *a1, _WORD *a2, char **a3, __n128 *a4)
{
  char *v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7FF870, "enable-aa-sched-mi", 0x12uLL);
  word_1ED7FF87A = word_1ED7FF87A & 0xFF9F | (32 * (*a1 & 3));
  word_1ED7FF87A = word_1ED7FF87A & 0xFFF8 | *a2 & 7;
  v8 = *a3;
  byte_1ED7FF8F0 = **a3;
  byte_1ED7FF901 = 1;
  byte_1ED7FF900 = *v8;
  result = *a4;
  xmmword_1ED7FF890 = (__int128)*a4;
  return result;
}

void sub_1C621244C(_WORD *a1, __int128 *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED7FFAB0, 0, 0);
  dword_1ED7FFB30 = 0;
  qword_1ED7FFB38 = (uint64_t)&off_1E7F952A8;
  unk_1ED7FFB40 = 0;
  qword_1ED7FFAB0 = (uint64_t)&unk_1E819E3B0;
  qword_1ED7FFB48 = (uint64_t)&unk_1E819E2C0;
  qword_1ED7FFB50 = (uint64_t)&off_1E7F95260;
  qword_1ED7FFB68 = (uint64_t)&qword_1ED7FFB50;
  llvm::cl::Option::setArgStr(v4, "dag-maps-reduction-size", 0x17uLL);
  word_1ED7FFABA = (32 * (*a1 & 3)) | word_1ED7FFABA & 0xFF9F;
  xmmword_1ED7FFAD0 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7FFAB0);
}

_QWORD *sub_1C621250C(_QWORD *result, char *a2, char *a3)
{
  char *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;

  if (a2 != a3)
  {
    v3 = a2;
    v4 = result;
    v5 = (char *)result[1];
    if (a3 != v5)
    {
      v6 = 32 * ((a3 - a2) >> 5);
      do
      {
        *(_QWORD *)v3 = *(_QWORD *)&v3[v6];
        sub_1C6212588((_QWORD *)v3 + 1, &v3[v6 + 8]);
        v3 += 32;
      }
      while (&v3[v6] != v5);
    }
    return sub_1C52823F0(v4, (uint64_t)v3);
  }
  return result;
}

_QWORD *sub_1C6212588(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  if (result[2])
  {
    v4 = *result;
    result = (_QWORD *)result[1];
    v5 = *result;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(*v3 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    v3[2] = 0;
    if (result != v3)
    {
      do
      {
        v6 = (_QWORD *)result[1];
        operator delete(result);
        result = v6;
      }
      while (v6 != v3);
    }
  }
  v7 = a2[2];
  if (v7)
  {
    v9 = *a2;
    v8 = (uint64_t *)a2[1];
    v10 = *v8;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(*a2 + 8);
    **(_QWORD **)(v9 + 8) = v10;
    v11 = *v3;
    *(_QWORD *)(v11 + 8) = v8;
    *v8 = v11;
    *v3 = v9;
    *(_QWORD *)(v9 + 8) = v3;
    v3[2] += v7;
    a2[2] = 0;
  }
  return result;
}

llvm::raw_ostream *llvm::ScheduleDAG::viewGraph(llvm *a1)
{
  llvm::raw_ostream *v1;
  llvm::raw_ostream *v2;

  v1 = (llvm::raw_ostream *)llvm::errs(a1);
  v2 = sub_1C4816AD8(v1, "ScheduleDAG::viewGraph is only available in debug builds on ");
  return sub_1C4816AD8(v2, "systems with Graphviz or gv!\n");
}

void llvm::ScoreboardHazardRecognizer::Reset(llvm::ScoreboardHazardRecognizer *this)
{
  void *v2;
  void *v3;

  *((_DWORD *)this + 11) = 0;
  v2 = (void *)*((_QWORD *)this + 9);
  if (!v2)
  {
    *((_QWORD *)this + 10) = 1;
    v2 = (void *)operator new[]();
    *((_QWORD *)this + 9) = v2;
  }
  bzero(v2, 8 * *((_QWORD *)this + 10));
  *((_QWORD *)this + 11) = 0;
  v3 = (void *)*((_QWORD *)this + 6);
  if (!v3)
  {
    *((_QWORD *)this + 7) = 1;
    v3 = (void *)operator new[]();
    *((_QWORD *)this + 6) = v3;
  }
  bzero(v3, 8 * *((_QWORD *)this + 7));
  *((_QWORD *)this + 8) = 0;
}

llvm::raw_ostream *llvm::ScoreboardHazardRecognizer::Scoreboard::dump(llvm::ScoreboardHazardRecognizer::Scoreboard *this)
{
  llvm *v2;
  llvm::raw_ostream *result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v9;
  unint64_t v10;
  llvm *v11;
  llvm::raw_ostream *v12;
  uint64_t i;
  char v14;
  char *v15;
  _BYTE *v16;

  v2 = llvm::dbgs(this);
  result = sub_1C4816AD8(v2, "Scoreboard:\n");
  v4 = *((_QWORD *)this + 1);
  v5 = v4 - 1;
  v6 = v4 - 1;
  do
  {
    v7 = v6;
    if (!v6)
      break;
  }
  while (!*(_QWORD *)(*(_QWORD *)this + 8 * ((*((_QWORD *)this + 2) + v6--) & v5)));
  v9 = 0;
  do
  {
    v10 = *(_QWORD *)(*(_QWORD *)this + 8 * ((*((_QWORD *)this + 1) - 1) & (*((_QWORD *)this + 2) + v9)));
    v11 = llvm::dbgs(result);
    v12 = sub_1C4816AD8(v11, "\t");
    for (i = 63; i != -1; --i)
    {
      v12 = llvm::dbgs(v12);
      if (((v10 >> i) & 1) != 0)
        v14 = 49;
      else
        v14 = 48;
      v15 = (char *)*((_QWORD *)v12 + 4);
      if ((unint64_t)v15 >= *((_QWORD *)v12 + 3))
      {
        v12 = llvm::raw_ostream::write(v12, v14);
      }
      else
      {
        *((_QWORD *)v12 + 4) = v15 + 1;
        *v15 = v14;
      }
    }
    result = llvm::dbgs(v12);
    v16 = (_BYTE *)*((_QWORD *)result + 4);
    if ((unint64_t)v16 >= *((_QWORD *)result + 3))
    {
      result = llvm::raw_ostream::write(result, 10);
    }
    else
    {
      *((_QWORD *)result + 4) = v16 + 1;
      *v16 = 10;
    }
    ++v9;
  }
  while (v9 <= v7);
  return result;
}

BOOL llvm::ScoreboardHazardRecognizer::atIssueLimit(llvm::ScoreboardHazardRecognizer *this)
{
  int v1;

  v1 = *((_DWORD *)this + 10);
  return v1 && *((_DWORD *)this + 11) == v1;
}

uint64_t llvm::ScoreboardHazardRecognizer::EmitInstruction(uint64_t result, unsigned __int16 **a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  v2 = *(_QWORD *)(result + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 96);
    if (v3)
    {
      v4 = a2[1];
      if (v4)
      {
        v5 = (unsigned __int16 *)*((_QWORD *)v4 + 2);
      }
      else
      {
        v5 = *a2;
        if (*a2)
        {
          v31 = (__int16)v5[12];
          if (v31 < 0)
            v5 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 16) + 8)
                                    + 48 * (unsigned __int16)~(_WORD)v31);
          else
            v5 = 0;
        }
      }
      if (*v5 >= 0x14u)
      {
        ++*(_DWORD *)(result + 44);
        v6 = v3 + 10 * v5[3];
        v7 = *(unsigned __int16 *)(v6 + 2);
        v8 = *(unsigned __int16 *)(v6 + 4);
        if (v7 != v8)
        {
          v9 = 0;
          v10 = *(_QWORD *)(v2 + 72);
          v11 = (unsigned int *)(v10 + 24 * v8);
          v12 = (unsigned int *)(v10 + 24 * v7);
          v13 = (uint64_t *)(result + 48);
          v14 = (uint64_t *)(result + 64);
          v15 = (_QWORD *)(result + 56);
          v16 = (uint64_t *)(result + 72);
          v17 = (uint64_t *)(result + 88);
          v18 = (_QWORD *)(result + 80);
          while (1)
          {
            v19 = *v12;
            if ((_DWORD)v19)
              break;
LABEL_26:
            result = v12[4];
            if ((int)result >= 0)
              LODWORD(v19) = v12[4];
            v9 += v19;
            v12 += 6;
            if (v12 == v11)
              return result;
          }
          v20 = 0;
          v21 = v12[5];
          if (v21)
            v22 = v13;
          else
            v22 = v16;
          if (v21)
            v23 = v14;
          else
            v23 = v17;
          if (v21)
            v24 = v15;
          else
            v24 = v18;
          v25 = *v22;
          v26 = *v23;
          v27 = *v24 - 1;
          while (1)
          {
            v28 = *((_QWORD *)v12 + 1);
            if (!v21)
              break;
            if (v21 == 1)
            {
              v29 = (v9 + v20);
LABEL_23:
              v28 &= ~*(_QWORD *)(*v16 + 8 * ((*v18 - 1) & (*v17 + v29)));
              goto LABEL_24;
            }
            do
            {
LABEL_24:
              v30 = v28;
              v28 &= v28 - 1;
            }
            while (v28);
            *(_QWORD *)(v25 + 8 * (v27 & (v26 + (v9 + v20++)))) |= v30;
            if (v20 == v19)
              goto LABEL_26;
          }
          v29 = (v9 + v20);
          v28 &= ~*(_QWORD *)(*v13 + 8 * ((*v15 - 1) & (*v14 + v29)));
          goto LABEL_23;
        }
      }
    }
  }
  return result;
}

uint64_t llvm::ScoreboardHazardRecognizer::AdvanceCycle(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(this + 56) - 1;
  v2 = *(_QWORD *)(this + 64);
  v3 = *(_QWORD *)(this + 72);
  *(_QWORD *)(*(_QWORD *)(this + 48) + 8 * (v1 & v2)) = 0;
  *(_DWORD *)(this + 44) = 0;
  *(_QWORD *)(this + 64) = v1 & (v2 + 1);
  v4 = *(_QWORD *)(this + 88);
  v5 = *(_QWORD *)(this + 80) - 1;
  *(_QWORD *)(v3 + 8 * (v5 & v4)) = 0;
  *(_QWORD *)(this + 88) = v5 & (v4 + 1);
  return this;
}

uint64_t llvm::ScoreboardHazardRecognizer::RecedeCycle(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(this + 56) - 1;
  v2 = *(_QWORD *)(this + 64);
  v3 = *(_QWORD *)(this + 72);
  *(_QWORD *)(*(_QWORD *)(this + 48) + 8 * ((v2 + v1) & v1)) = 0;
  *(_DWORD *)(this + 44) = 0;
  *(_QWORD *)(this + 64) = (v2 - 1) & v1;
  v4 = *(_QWORD *)(this + 88);
  v5 = *(_QWORD *)(this + 80) - 1;
  *(_QWORD *)(v3 + 8 * ((v4 + v5) & v5)) = 0;
  *(_QWORD *)(this + 88) = (v4 - 1) & v5;
  return this;
}

void llvm::initializeShadowStackGCLoweringPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED7FFB70);
  if (v2 != -1)
  {
    v5[0] = sub_1C52836A8;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED7FFB70, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void llvm::initializeShrinkWrapPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED7FFC38);
  if (v2 != -1)
  {
    v5[0] = sub_1C5285ABC;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED7FFC38, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void sub_1C6212B34(_WORD *a1, __int128 *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED7FFB78, 0, 0);
  dword_1ED7FFBF8 = 0;
  qword_1ED7FFC00 = (uint64_t)&unk_1E819E900;
  unk_1ED7FFC08 = 0;
  qword_1ED7FFB78 = (uint64_t)&unk_1E8140060;
  qword_1ED7FFC10 = (uint64_t)&unk_1E819E920;
  qword_1ED7FFC18 = (uint64_t)&unk_1E81400C8;
  qword_1ED7FFC30 = (uint64_t)&qword_1ED7FFC18;
  llvm::cl::Option::setArgStr(v4, "enable-shrink-wrap", 0x12uLL);
  word_1ED7FFB82 = (32 * (*a1 & 3)) | word_1ED7FFB82 & 0xFF9F;
  xmmword_1ED7FFB98 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7FFB78);
}

void llvm::initializeSjLjEHPreparePass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED7FFC40);
  if (v2 != -1)
  {
    v5[0] = sub_1C528776C;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED7FFC40, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

double llvm::createSjLjEHPreparePass(llvm *this, const llvm::TargetMachine *a2)
{
  uint64_t v3;
  double result;

  v3 = operator new();
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = &unk_1EF8F2F88;
  *(_DWORD *)(v3 + 24) = 2;
  *(_QWORD *)v3 = &off_1E814A9F8;
  result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_QWORD *)(v3 + 160) = this;
  return result;
}

llvm::PointerType *sub_1C6212CB8(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t **a5, uint64_t a6)
{
  llvm::PointerType *v10;
  uint64_t v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v12[0] = a6;
  v10 = (llvm::PointerType *)llvm::FunctionType::get(a5, v12, 1, 0);
  return llvm::Module::getOrInsertFunction(a1, a2, a3, v10, a4);
}

uint64_t sub_1C6212D88(uint64_t a1, llvm::GetElementPtrInst *a2, uint64_t *a3, llvm::IntegerType *a4, unsigned int a5, uint64_t a6)
{
  uint64_t result;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _WORD v16[20];
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v17[0] = llvm::ConstantInt::get((llvm::ConstantInt **)(**(_QWORD **)(a1 + 64) + 1960), a4, 0);
  v17[1] = llvm::ConstantInt::get((llvm::ConstantInt **)(**(_QWORD **)(a1 + 64) + 1960), a5, 0);
  result = (*(uint64_t (**)(_QWORD, llvm::GetElementPtrInst *, uint64_t *, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 72) + 48))(*(_QWORD *)(a1 + 72), a2, a3, v17, 2, 0);
  if (!result)
  {
    v16[16] = 257;
    v12 = operator new(0xB0uLL);
    v13 = 0;
    v14 = (uint64_t)(v12 + 24);
    v12[29] = v12[29] & 0x38000000 | 3;
    do
    {
      v15 = &v12[v13];
      *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      v15[3] = v14;
      v13 += 8;
    }
    while (v13 != 24);
    sub_1C477449C((uint64_t)(v12 + 24), a2, a3, (llvm::Value *)v17, 2, 3, (uint64_t)v16, 0);
    return sub_1C477438C((uint64_t *)a1, v14, a6);
  }
  return result;
}

llvm::SlotIndexes *llvm::SlotIndexes::SlotIndexes(llvm::SlotIndexes *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t PassRegistry;
  _QWORD *v6;
  _QWORD v7[2];

  v2 = sub_1C4776848((uint64_t)this, (uint64_t)llvm::SlotIndexes::ID);
  *(_QWORD *)v2 = &off_1E814AA98;
  *(_QWORD *)(v2 + 248) = 0;
  *(_QWORD *)(v2 + 256) = 0;
  *(_QWORD *)(v2 + 264) = v2 + 280;
  *(_QWORD *)(v2 + 272) = 0x400000000;
  *(_QWORD *)(v2 + 312) = v2 + 328;
  *(_QWORD *)(v2 + 320) = 0;
  *(_QWORD *)(v2 + 328) = 0;
  *(_QWORD *)(v2 + 336) = 1;
  *(_QWORD *)(v2 + 344) = v2 + 344;
  *(_QWORD *)(v2 + 352) = v2 + 344;
  *(_QWORD *)(v2 + 368) = 0;
  *(_QWORD *)(v2 + 376) = 0;
  *(_QWORD *)(v2 + 360) = 0;
  *(_DWORD *)(v2 + 384) = 0;
  *(_QWORD *)(v2 + 392) = v2 + 408;
  *(_QWORD *)(v2 + 400) = 0x800000000;
  *(_QWORD *)(v2 + 536) = v2 + 552;
  *(_QWORD *)(v2 + 544) = 0x800000000;
  PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)v2);
  v3 = atomic_load(&qword_1ED8300E8);
  if (v3 != -1)
  {
    v7[0] = sub_1C528A82C;
    v7[1] = &PassRegistry;
    v6 = v7;
    std::__call_once(&qword_1ED8300E8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

void *llvm::SlotIndexes::getAnalysisUsage(llvm::MachineFunctionPass *this, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  return llvm::MachineFunctionPass::getAnalysisUsage(this, a2);
}

uint64_t llvm::SlotIndexes::renumberIndexes(uint64_t result, uint64_t a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(*(_QWORD *)a2 + 24);
  do
  {
    v2 += 8;
    *(_DWORD *)(a2 + 24) = v2;
    a2 = *(_QWORD *)(a2 + 8);
  }
  while (a2 != result + 344 && *(_DWORD *)(a2 + 24) <= v2);
  return result;
}

void llvm::SlotIndexes::dump(llvm::SlotIndexes *this)
{
  llvm::SlotIndexes *v1;
  char *v2;
  uint64_t v3;
  llvm *v4;
  llvm::raw_ostream *v5;
  llvm *v6;
  uint64_t v7;
  llvm *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  llvm *v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  uint64_t v17;

  v1 = this;
  v2 = (char *)this + 344;
  v3 = *((_QWORD *)this + 44);
  if ((llvm::SlotIndexes *)v3 != (llvm::SlotIndexes *)((char *)this + 344))
  {
    do
    {
      v4 = llvm::dbgs(this);
      v5 = llvm::raw_ostream::operator<<(v4, *(unsigned int *)(v3 + 24));
      v6 = sub_1C4816AD8(v5, " ");
      v7 = *(_QWORD *)(v3 + 16);
      v8 = llvm::dbgs(v6);
      if (v7)
        llvm::MachineInstr::print(*(llvm::MachineInstr **)(v3 + 16), v8, 1, 0, 0, 1, 0);
      else
        this = sub_1C4816AD8(v8, "\n");
      v3 = *(_QWORD *)(v3 + 8);
    }
    while ((char *)v3 != v2);
  }
  v9 = *((unsigned int *)v1 + 100);
  if ((_DWORD)v9)
  {
    v10 = 0;
    for (i = 0; i != v9; ++i)
    {
      v12 = llvm::dbgs(this);
      v13 = sub_1C4816AD8(v12, "%bb.");
      v14 = llvm::raw_ostream::operator<<(v13, i);
      v15 = sub_1C4816AD8(v14, "\t[");
      v17 = *(_QWORD *)(*((_QWORD *)v1 + 49) + v10);
      llvm::SlotIndex::print((llvm::SlotIndex *)&v17, v15);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        v15 = llvm::raw_ostream::write(v15, 59);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 59;
      }
      v17 = *(_QWORD *)(*((_QWORD *)v1 + 49) + v10 + 8);
      llvm::SlotIndex::print((llvm::SlotIndex *)&v17, v15);
      this = sub_1C4816AD8(v15, ")\n");
      v10 += 16;
    }
  }
}

llvm::raw_ostream *llvm::SlotIndex::print(llvm::SlotIndex *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *result;
  char v4;
  char *v5;

  if (*(_QWORD *)this < 8uLL)
    return sub_1C4816AD8(a2, "invalid");
  result = llvm::raw_ostream::operator<<(a2, *(unsigned int *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 24));
  v4 = aBerd[(*(_QWORD *)this >> 1) & 3];
  v5 = (char *)*((_QWORD *)result + 4);
  if ((unint64_t)v5 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, v4);
  *((_QWORD *)result + 4) = v5 + 1;
  *v5 = v4;
  return result;
}

llvm::raw_ostream *llvm::SlotIndex::dump(llvm::SlotIndex *this)
{
  llvm *v2;
  llvm *v3;
  llvm *v4;

  v2 = llvm::dbgs(this);
  v3 = llvm::SlotIndex::print(this, v2);
  v4 = llvm::dbgs(v3);
  return sub_1C4816AD8(v4, "\n");
}

llvm::SlotIndexes *llvm::callDefaultCtor<llvm::SlotIndexes>()
{
  llvm::SlotIndexes *v0;

  v0 = (llvm::SlotIndexes *)operator new();
  return llvm::SlotIndexes::SlotIndexes(v0);
}

void llvm::initializeSpillPlacementPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED8300F0);
  if (v2 != -1)
  {
    v5[0] = sub_1C528B5F8;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED8300F0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void *llvm::SpillPlacement::getAnalysisUsage(llvm::SpillPlacement *this, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  llvm::AnalysisUsage::addRequiredID(a2, (char *)&llvm::MachineBlockFrequencyInfo::ID);
  llvm::AnalysisUsage::addRequiredTransitiveID(a2, (char *)&llvm::EdgeBundles::ID);
  llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::MachineLoopInfo::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(this, a2);
}

void sub_1C6213360(uint64_t a1)
{
  sub_1C6213408(a1);
  JUMPOUT(0x1CAA32FC0);
}

double llvm::callDefaultCtor<llvm::SpillPlacement>()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&llvm::SpillPlacement::ID);
  *(_QWORD *)v1 = &off_1E814AB60;
  *(_QWORD *)(v1 + 280) = 0;
  *(_QWORD *)(v1 + 296) = v1 + 312;
  *(_QWORD *)&result = 0x800000000;
  *(_QWORD *)(v1 + 304) = 0x800000000;
  *(_QWORD *)(v1 + 344) = v1 + 360;
  *(_QWORD *)(v1 + 352) = 0x800000000;
  *(_QWORD *)(v1 + 392) = v1 + 408;
  *(_QWORD *)(v1 + 400) = 0x800000000;
  *(_QWORD *)(v1 + 472) = 0;
  *(_QWORD *)(v1 + 480) = v1 + 496;
  *(_QWORD *)(v1 + 488) = 0x800000000;
  *(_QWORD *)(v1 + 528) = 0;
  *(_DWORD *)(v1 + 536) = 0;
  return result;
}

void sub_1C6213408(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)a1 = &off_1E814AB60;
  llvm::SpillPlacement::releaseMemory(a1);
  free(*(void **)(a1 + 528));
  v2 = *(void **)(a1 + 480);
  if (v2 != (void *)(a1 + 496))
    free(v2);
  v3 = *(void **)(a1 + 392);
  if (v3 != (void *)(a1 + 408))
    free(v3);
  v4 = *(void **)(a1 + 344);
  if (v4 != (void *)(a1 + 360))
    free(v4);
  v5 = *(void **)(a1 + 296);
  if (v5 != (void *)(a1 + 312))
    free(v5);
  sub_1C4926674((llvm::Pass *)a1);
}

BOOL sub_1C6213494(_QWORD *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  llvm::LiveInterval *v7;
  _QWORD *v8;

  v3 = *(_DWORD *)(a1[5] + 112);
  v5 = a1[1];
  v4 = a1[2];
  if (*(_DWORD *)(*(_QWORD *)(v5 + 328) + 4 * (v3 & 0x7FFFFFFF)))
    v6 = *(_DWORD *)(*(_QWORD *)(v5 + 328) + 4 * (v3 & 0x7FFFFFFF));
  else
    v6 = v3;
  v7 = sub_1C5104FB8(v4, v6);
  v8 = (_QWORD *)llvm::LiveRange::find((uint64_t *)v7, a2);
  if (v8 == (_QWORD *)(*(_QWORD *)v7 + 24 * *((unsigned int *)v7 + 2))
    || ((*v8 >> 1) & 3 | *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3))
  {
    if (v8 == *(_QWORD **)v7)
      return 0;
    return *(v8 - 2) == a2;
  }
  else
  {
    return *v8 == a2;
  }
}

llvm *sub_1C6213548(llvm *a1)
{
  llvm *i;
  llvm *v2;
  llvm::raw_ostream *v3;
  _BYTE *v4;
  llvm::raw_ostream *v5;
  llvm *v6;
  llvm *result;
  _BYTE *v8;
  llvm *v9;
  uint64_t v10;
  _DWORD *v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a1 + 97))
  {
    v11 = (_DWORD *)((char *)a1 + 200);
    v12 = v14;
    v13 = 0x400000000;
    for (i = (llvm *)sub_1C5294A10(&v11); (_DWORD)v13; i = (llvm *)sub_1C528D9A4((uint64_t)&v11))
    {
      if (*((_DWORD *)v12 + 3) >= *((_DWORD *)v12 + 2))
        break;
      v2 = llvm::dbgs(i);
      v3 = sub_1C4816AD8(v2, " [");
      v10 = *(_QWORD *)(*((_QWORD *)v12 + 2 * v13 - 2)
                      + 16 * *((unsigned int *)v12 + 4 * v13 - 1));
      llvm::SlotIndex::print((llvm::SlotIndex *)&v10, v3);
      v4 = (_BYTE *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
      {
        v3 = llvm::raw_ostream::write(v3, 59);
      }
      else
      {
        *((_QWORD *)v3 + 4) = v4 + 1;
        *v4 = 59;
      }
      v10 = *(_QWORD *)(*((_QWORD *)v12 + 2 * v13 - 2)
                      + 16 * *((unsigned int *)v12 + 4 * v13 - 1)
                      + 8);
      llvm::SlotIndex::print((llvm::SlotIndex *)&v10, v3);
      v5 = sub_1C4816AD8(v3, "):");
      llvm::raw_ostream::operator<<(v5, *(unsigned int *)(*((_QWORD *)v12 + 2 * v13 - 2)+ 4 * *((unsigned int *)v12 + 4 * v13 - 1)+ 144));
    }
    v6 = (llvm *)v12;
    if (v12 != v14)
      free(v12);
    result = llvm::dbgs(v6);
    v8 = (_BYTE *)*((_QWORD *)result + 4);
    if ((unint64_t)v8 >= *((_QWORD *)result + 3))
    {
      return llvm::raw_ostream::write(result, 10);
    }
    else
    {
      *((_QWORD *)result + 4) = v8 + 1;
      *v8 = 10;
    }
  }
  else
  {
    v9 = llvm::dbgs(a1);
    return sub_1C4816AD8(v9, " empty\n");
  }
  return result;
}

uint64_t sub_1C6213744(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16);
  v3 = *(_QWORD *)(v2 - 16);
  v4 = *(unsigned int *)(v2 - 4);
  if ((*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3) < ((*(_QWORD *)(v3 + 16 * v4 + 8) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v3 + 16 * v4 + 8) & 0xFFFFFFFFFFFFFFF8) + 24)))
    return sub_1C5296874(a1, a2);
  v11 = a2;
  v12 = a1;
  v10 = v4;
  v6 = sub_1C6213950((uint64_t *)a1, a2, *(_DWORD *)(v3 + 4 * v4 + 144));
  a2 = v11;
  v7 = v6;
  a1 = v12;
  if ((v7 & 1) == 0)
    return sub_1C5296874(a1, a2);
  v8 = *(_QWORD *)(v3 + 16 * v10);
  result = sub_1C62139F8(v12);
  v9 = *(_QWORD *)(v12 + 8) + 16 * *(unsigned int *)(v12 + 16);
  *(_QWORD *)(*(_QWORD *)(v9 - 16) + 16 * *(unsigned int *)(v9 - 4)) = v8;
  return result;
}

uint64_t sub_1C6213808(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a2 - 1;
  if (a2 != 1)
  {
    v8 = result;
    v9 = a3 - 4;
    v10 = result - 8;
    v11 = a2 - 1;
    do
    {
      v12 = *(_DWORD *)(a3 + 4 * v11);
      v13 = *(_DWORD *)(a4 + 4 * v11);
      if (v12 != v13)
      {
        v14 = v11;
        do
        {
          if (!v14)
            break;
          result = sub_1C5100B94(*(_QWORD **)(v8 + 8 * v11), v12, *(_QWORD *)(v10 + 8 * v14), *(_DWORD *)(v9 + 4 * v14), v13 - v12);
          *(_DWORD *)(v9 + 4 * v14) -= result;
          v12 = *(_DWORD *)(a3 + 4 * v11) + result;
          *(_DWORD *)(a3 + 4 * v11) = v12;
          v13 = *(_DWORD *)(a4 + 4 * v11);
          --v14;
        }
        while (v12 < v13);
      }
      --v11;
    }
    while ((_DWORD)v11);
    if (a2 >= 2)
    {
      v15 = 0;
      v16 = 1;
      do
      {
        v17 = *(_DWORD *)(a3 + 4 * v15);
        v18 = *(_DWORD *)(a4 + 4 * v15);
        if (v17 != v18)
        {
          v19 = v16;
          do
          {
            if (a2 == v19)
              break;
            v20 = v15;
            v21 = v16;
            result = sub_1C5100B94(*(_QWORD **)(v8 + 8 * v19), *(_DWORD *)(a3 + 4 * v19), *(_QWORD *)(v8 + 8 * v15), v17, v17 - v18);
            v16 = v21;
            v15 = v20;
            *(_DWORD *)(a3 + 4 * v19) += result;
            v17 = *(_DWORD *)(a3 + 4 * v20) - result;
            *(_DWORD *)(a3 + 4 * v20) = v17;
            v18 = *(_DWORD *)(a4 + 4 * v20);
            ++v19;
          }
          while (v17 < v18);
        }
        ++v15;
        v16 = (v16 + 1);
      }
      while (v15 != v4);
    }
  }
  return result;
}

uint64_t sub_1C6213950(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  llvm::IntervalMapImpl::Path *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v6 = *((unsigned int *)a1 + 4);
  v8 = a1[1];
  v7 = (llvm::IntervalMapImpl::Path *)(a1 + 1);
  v9 = *a1;
  v10 = v8 + 16 * v6;
  v11 = *(_DWORD *)(v10 - 8);
  v12 = (*(_DWORD *)(v10 - 4) + 1);
  if (*(_DWORD *)(v9 + 184))
  {
    if (v12 < v11)
      goto LABEL_3;
    result = llvm::IntervalMapImpl::Path::getRightSibling(v7, (int)v6 - 1);
    if (!result)
      return result;
    if (*(_DWORD *)((result & 0xFFFFFFFFFFFFFFC0) + 0x90) == a3)
    {
      v14 = *(_QWORD *)(result & 0xFFFFFFFFFFFFFFC0);
      return v14 == a2;
    }
  }
  else if (v12 < v11)
  {
LABEL_3:
    v13 = *(_QWORD *)(v10 - 16);
    if (*(_DWORD *)(v13 + 4 * v12 + 144) == a3)
    {
      v14 = *(_QWORD *)(v13 + 16 * v12);
      return v14 == a2;
    }
  }
  return 0;
}

uint64_t sub_1C62139F8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)result;
  if (*(_DWORD *)(*(_QWORD *)result + 184))
    return sub_1C5295A34(result, 1);
  v2 = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(v2 + 16 * *(unsigned int *)(result + 16) - 4);
  v4 = *(_DWORD *)(v1 + 188);
  if (v3 + 1 != v4)
  {
    v5 = v4 - 1;
    do
    {
      *(_OWORD *)(v1 + 16 * v3) = *(_OWORD *)(v1 + 16 * (v3 + 1));
      *(_DWORD *)(v1 + 144 + 4 * v3) = *(_DWORD *)(v1 + 144 + 4 * (v3 + 1));
      ++v3;
    }
    while (v5 != v3);
    v4 = *(_DWORD *)(v1 + 188);
  }
  *(_DWORD *)(v1 + 188) = v4 - 1;
  *(_DWORD *)(v2 + 8) = v4 - 1;
  return result;
}

void llvm::initializeStackColoringPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED7FFC48);
  if (v2 != -1)
  {
    v5[0] = sub_1C52969B4;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED7FFC48, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

char **sub_1C6213ACC(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      sub_1C50E10CC((uint64_t *)&v5[v4], 0);
      v4 -= 8;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_1C6213B30(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;

  v12 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 8, &v12);
  v4 = *(uint64_t **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = 8 * v5;
    v8 = v3;
    do
    {
      v9 = *v4;
      *v4++ = 0;
      *v8++ = v9;
      v7 -= 8;
    }
    while (v7);
    v10 = *(_QWORD *)a1 - 8;
    do
    {
      sub_1C50E10CC((uint64_t *)(v10 + v6), 0);
      v6 -= 8;
    }
    while (v6);
    v4 = *(uint64_t **)a1;
  }
  v11 = v12;
  if (v4 != (uint64_t *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v11;
}

void sub_1C6213BD8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_1C6213CB4(a1, a2);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
      {
        v8 = 3 * v2;
        v9 = 48 * a2 - 48 * v2;
        v10 = *(_QWORD *)a1 + 16 * v8 + 16;
        do
        {
          *(_QWORD *)(v10 - 16) = v10;
          *(_QWORD *)(v10 - 8) = 0x400000000;
          v10 += 48;
          v9 -= 48;
        }
        while (v9);
      }
    }
    else
    {
      v5 = 3 * v2;
      v6 = (void **)(*(_QWORD *)a1 + 16 * v5 - 48);
      v7 = 48 * a2 - 16 * v5;
      do
      {
        if (v6 + 2 != *v6)
          free(*v6);
        v6 -= 6;
        v7 += 48;
      }
      while (v7);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

void sub_1C6213CB4(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 48, &v5);
  sub_1C6213D20((uint64_t *)a1, v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C6213D20(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v5 = *a1;
    v6 = 48 * v2;
    do
    {
      *a2 = a2 + 2;
      a2[1] = 0x400000000;
      if (*(_DWORD *)(v5 + 8))
        sub_1C4964480((uint64_t)a2, (const void **)v5);
      v5 += 48;
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
    v7 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v7)
    {
      v8 = *a1;
      v9 = 48 * v7;
      do
      {
        v10 = *(void **)(v8 + v9 - 48);
        if ((void *)(v8 + v9 - 32) != v10)
          free(v10);
        v9 -= 48;
      }
      while (v9);
    }
  }
}

_DWORD *sub_1C6213DD0(uint64_t a1, unsigned int *a2)
{
  int v3;
  _DWORD *v4;
  _DWORD *v5;
  int v7;
  unsigned int v8;
  int v9;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v7 = v3 - 1;
    v8 = (37 * *a2) & (v3 - 1);
    v5 = (_DWORD *)(*(_QWORD *)a1 + 8 * v8);
    v9 = *v5;
    if (*a2 == *v5)
      return v5;
    v10 = 0;
    v11 = 1;
    while (v9 != 0x7FFFFFFF)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == 0x80000000;
      if (v12)
        v10 = v5;
      v13 = v8 + v11++;
      v8 = v13 & v7;
      v5 = (_DWORD *)(*(_QWORD *)a1 + 8 * (v13 & v7));
      v9 = *v5;
      if (*a2 == *v5)
        return v5;
    }
    if (v10)
      v4 = v10;
    else
      v4 = v5;
  }
  else
  {
    v4 = 0;
  }
  v5 = sub_1C61F8B28(a1, (uint64_t)a2, a2, v4);
  *(_QWORD *)v5 = *a2;
  return v5;
}

void sub_1C6213E8C(char **a1, _WORD *a2, __n128 *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED7FFDD0, 0, 0);
  byte_1ED7FFE50 = 0;
  qword_1ED7FFE58 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED7FFE60 = 0;
  qword_1ED7FFDD0 = (uint64_t)&unk_1E819E898;
  qword_1ED7FFE68 = (uint64_t)&off_1E819E9A0;
  qword_1ED7FFE70 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7FFE88 = (uint64_t)&qword_1ED7FFE70;
  sub_1C529C78C(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7FFDD0);
}

void llvm::initializeStackMapLivenessPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED7FFF50);
  if (v2 != -1)
  {
    v5[0] = sub_1C529C930;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED7FFF50, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t llvm::StatepointOpers::getNumGcMapEntriesIdx(llvm::StatepointOpers *this)
{
  unsigned int NumAllocaIdx;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  NumAllocaIdx = llvm::StatepointOpers::getNumAllocaIdx(this);
  v3 = *(_QWORD *)(*(_QWORD *)this + 32);
  v4 = *(_DWORD *)(v3 + 32 * NumAllocaIdx + 16);
  if (v4)
  {
    do
    {
      v5 = NumAllocaIdx + 1;
      if (*(_BYTE *)(v3 + 32 * v5) == 1)
      {
        v6 = *(_QWORD *)(v3 + 32 * v5 + 16);
        if (v6)
        {
          if (v6 == 1)
            LODWORD(v5) = NumAllocaIdx + 4;
          else
            LODWORD(v5) = NumAllocaIdx + 2;
        }
        else
        {
          LODWORD(v5) = NumAllocaIdx + 3;
        }
      }
      NumAllocaIdx = v5;
      --v4;
    }
    while (v4);
  }
  else
  {
    LODWORD(v5) = NumAllocaIdx;
  }
  return (v5 + 2);
}

uint64_t llvm::StatepointOpers::getNumAllocaIdx(llvm::StatepointOpers *this)
{
  unsigned int NumGCPtrIdx;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  NumGCPtrIdx = llvm::StatepointOpers::getNumGCPtrIdx(this);
  v3 = *(_QWORD *)(*(_QWORD *)this + 32);
  v4 = *(_DWORD *)(v3 + 32 * NumGCPtrIdx + 16);
  if (v4)
  {
    do
    {
      v5 = NumGCPtrIdx + 1;
      if (*(_BYTE *)(v3 + 32 * v5) == 1)
      {
        v6 = *(_QWORD *)(v3 + 32 * v5 + 16);
        if (v6)
        {
          if (v6 == 1)
            LODWORD(v5) = NumGCPtrIdx + 4;
          else
            LODWORD(v5) = NumGCPtrIdx + 2;
        }
        else
        {
          LODWORD(v5) = NumGCPtrIdx + 3;
        }
      }
      NumGCPtrIdx = v5;
      --v4;
    }
    while (v4);
  }
  else
  {
    LODWORD(v5) = NumGCPtrIdx;
  }
  return (v5 + 2);
}

uint64_t llvm::StackMaps::getNextMetaArgIdx(llvm::StackMaps *this, const llvm::MachineInstr *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 4);
  if (*(_BYTE *)(v2 + 32 * a2) == 1)
  {
    v3 = *(_QWORD *)(v2 + 32 * a2 + 16);
    if (v3)
    {
      if (v3 == 1)
        LODWORD(a2) = (_DWORD)a2 + 3;
      else
        LODWORD(a2) = (_DWORD)a2 + 1;
    }
    else
    {
      LODWORD(a2) = (_DWORD)a2 + 2;
    }
  }
  return ((_DWORD)a2 + 1);
}

uint64_t llvm::StatepointOpers::getNumGCPtrIdx(llvm::StatepointOpers *this)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned int i;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)this + 32);
  v2 = *((_DWORD *)this + 2) + *(_DWORD *)(v1 + 32 * (*((_DWORD *)this + 2) + 2) + 16);
  v3 = *(_DWORD *)(v1 + 32 * (v2 + 9) + 16);
  for (i = v2 + 10; v3; --v3)
  {
    if (*(_BYTE *)(v1 + 32 * i) == 1)
    {
      v5 = *(_QWORD *)(v1 + 32 * i + 16);
      if (v5)
      {
        if (v5 == 1)
          i += 3;
        else
          ++i;
      }
      else
      {
        i += 2;
      }
    }
    ++i;
  }
  return i + 1;
}

uint64_t llvm::StatepointOpers::getFirstGCPtrIdx(llvm::StatepointOpers *this)
{
  unsigned int NumGCPtrIdx;

  NumGCPtrIdx = llvm::StatepointOpers::getNumGCPtrIdx(this);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 32) + 32 * NumGCPtrIdx + 16))
    return NumGCPtrIdx + 1;
  else
    return 0xFFFFFFFFLL;
}

llvm::cl::Option *sub_1C62141BC(llvm::cl::Option *a1, char *a2, _DWORD **a3, _WORD *a4, __n128 *a5)
{
  uint64_t v10;

  v10 = sub_1C47AD050((uint64_t)a1, 0, 0);
  *(_DWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_1E7FA9DC8;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = &unk_1E819E418;
  *(_QWORD *)(v10 + 152) = &unk_1E819E230;
  *(_QWORD *)(v10 + 160) = &off_1E7FA9D80;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  sub_1C529FCF0(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

uint64_t sub_1C6214268@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C52A0CF8((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C62142F8(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *sub_1C62142F8(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C52A0D94(a1, v7);
  v9 = 0;
  sub_1C52A0CF8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C62143A4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C52A0CF8((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

void llvm::initializeStackProtectorPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED8300F8);
  if (v2 != -1)
  {
    v5[0] = sub_1C52A0FD0;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED8300F8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

llvm::StackProtector *llvm::createStackProtectorPass(llvm *this)
{
  llvm::StackProtector *v1;

  v1 = (llvm::StackProtector *)operator new();
  return llvm::StackProtector::StackProtector(v1);
}

void *llvm::StackProtector::getAnalysisUsage(llvm::StackProtector *this, llvm::AnalysisUsage *a2)
{
  llvm::AnalysisUsage::addRequiredID(a2, (char *)&llvm::TargetPassConfig::ID);
  return sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
}

uint64_t llvm::StackProtector::CreateFailBB(llvm::StackProtector *this)
{
  uint64_t ***v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  llvm::LLVMContext *v7;
  uint64_t Subprogram;
  const llvm::DILocation *Impl;
  int v10;
  uint64_t v11;
  uint64_t **VoidTy;
  uint64_t v13;
  llvm::PointerType *v14;
  uint64_t v15;
  uint64_t v16;
  char *Name;
  llvm::Type *v18;
  uint64_t *v19;
  _WORD *v20;
  uint64_t **v21;
  uint64_t v22;
  uint64_t v23;
  llvm::PointerType *v24;
  uint64_t v25;
  uint64_t v26;
  _WORD v28[20];
  _QWORD v29[4];
  __int16 v30;
  uint64_t v31;
  llvm::LLVMContext *v32;
  void *v33[2];
  _WORD v34[16];
  uint64_t **v35;
  _QWORD **v36;
  uint64_t v37;
  void **v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  __int16 v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  _QWORD v47[2];

  v47[1] = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t ***)*((_QWORD *)this + 12);
  v3 = **v2;
  v33[0] = "CallStackCheckFailBlk";
  v34[8] = 259;
  v4 = operator new();
  v5 = (uint64_t **)llvm::BasicBlock::BasicBlock(v4, v3, (uint64_t)v33, (uint64_t)v2, 0);
  v6 = **v5;
  v33[0] = v34;
  v33[1] = (void *)0x200000000;
  v37 = v6;
  v38 = &v46;
  v39 = v47;
  v40 = 0;
  v41 = 0;
  v42 = 512;
  v43 = 7;
  v44 = 0;
  v45 = 0;
  v46 = &unk_1E8167888;
  v47[0] = &unk_1E8167A08;
  v35 = v5;
  v36 = v5 + 5;
  if (llvm::Function::getSubprogram(*((llvm::Function **)this + 12)))
  {
    Subprogram = llvm::Function::getSubprogram(*((llvm::Function **)this + 12));
    Impl = (const llvm::DILocation *)llvm::DILocation::getImpl(v3, 0, 0, Subprogram, 0, 0, 0, 1);
    llvm::DebugLoc::DebugLoc((llvm::DebugLoc *)&v32, Impl);
    sub_1C4774EF4((uint64_t)v33, 0, (uint64_t)v32);
    v7 = v32;
    if (v32)
      llvm::MetadataTracking::untrack((uint64_t)&v32, (unsigned __int8 *)v32);
  }
  v10 = *((_DWORD *)this + 21);
  v11 = *((_QWORD *)this + 13);
  VoidTy = (uint64_t **)llvm::Type::getVoidTy((llvm::Type *)v3, v7);
  if (v10 == 13)
  {
    v13 = llvm::PointerType::get((llvm::PointerType *)(*v3 + 1912), 0);
    v14 = sub_1C6212CB8(v11, "__stack_smash_handler", 0x15uLL, 0, VoidTy, v13);
    v16 = v15;
    Name = llvm::Value::getName(*((llvm::Value **)this + 12));
    v29[0] = "SSH";
    v30 = 259;
    v31 = sub_1C62147C4((uint64_t)v33, Name, v18, (uint64_t)v29, 0, 0);
    v28[16] = 257;
    v19 = &v31;
    v20 = v28;
    v21 = (uint64_t **)v14;
    v22 = v16;
    v23 = 1;
  }
  else
  {
    v24 = sub_1C6210688(v11, "__stack_chk_fail", 0x10uLL, 0, VoidTy);
    v26 = v25;
    v30 = 257;
    v20 = v29;
    v21 = (uint64_t **)v24;
    v22 = v26;
    v19 = 0;
    v23 = 0;
  }
  sub_1C4774778((uint64_t *)v33, v21, v22, v19, v23, (uint64_t)v20, 0);
  LLVMBuildUnreachable_0((uint64_t)v33);
  if (v33[0] != v34)
    free(v33[0]);
  return v4;
}

uint64_t sub_1C62147C4(uint64_t a1, char *a2, llvm::Type *a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  char *GlobalString;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  GlobalString = llvm::IRBuilderBase::CreateGlobalString(a1, a2, a3, a4, a5, a6);
  v9[0] = llvm::ConstantInt::get((llvm::ConstantInt **)(**(_QWORD **)(a1 + 64) + 1960), 0, 0);
  v9[1] = v9[0];
  return llvm::ConstantExpr::getGetElementPtr(*((llvm::GetElementPtrInst **)GlobalString + 3), (uint64_t *)GlobalString, (llvm::Value *)v9, 2, 1, 0, 0);
}

void sub_1C621485C(uint64_t a1)
{
  sub_1C52A32F0(a1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::StackProtector *llvm::callDefaultCtor<llvm::StackProtector>()
{
  llvm::StackProtector *v0;

  v0 = (llvm::StackProtector *)operator new();
  return llvm::StackProtector::StackProtector(v0);
}

uint64_t sub_1C62148A8(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C61252B8((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C61AC590(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

void llvm::initializeStackSlotColoringPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED8000D8);
  if (v2 != -1)
  {
    v5[0] = sub_1C52A34E8;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED8000D8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

char **sub_1C62149A0(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  char *v7;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v7 = v2;
    v5 = 48 * v3;
    do
    {
      v6 = *(char **)&v7[v5 - 48];
      if (&v7[v5 - 32] != v6)
        free(v6);
      v5 -= 48;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void **sub_1C6214A1C(void **result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void **v5;
  char *v6;
  void **v7;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v6 = (char *)*result;
    v7 = result;
    v3 = 72 * v2;
    do
    {
      v4 = *(char **)&v6[v3 - 72];
      if (&v6[v3 - 56] != v4)
        free(v4);
      v3 -= 72;
    }
    while (v3);
    result = v7;
    v1 = (void **)*v7;
  }
  if (v1 != result + 2)
  {
    v5 = result;
    free(v1);
    return v5;
  }
  return result;
}

char **sub_1C6214AA4(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  char *v7;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v7 = v2;
    v5 = 80 * v3;
    do
    {
      v6 = *(char **)&v7[v5 - 80];
      if (&v7[v5 - 64] != v6)
        free(v6);
      v5 -= 80;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_1C6214B20(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 80, &v5);
  sub_1C6214B8C(a1, v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C6214B8C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)a1;
    v4 = 80 * v2;
    do
    {
      *a2 = a2 + 2;
      a2[1] = 0x800000000;
      if (*(_DWORD *)(v3 + 8))
        sub_1C4B03F84((uint64_t)a2, v3);
      v3 += 80;
      a2 += 10;
      v4 -= 80;
    }
    while (v4);
    v5 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)a1;
      v7 = 80 * v5;
      do
      {
        v8 = *(void **)(v6 + v7 - 80);
        if ((void *)(v6 + v7 - 64) != v8)
          free(v8);
        v7 -= 80;
      }
      while (v7);
    }
  }
}

void sub_1C6214C4C(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 48, &v5);
  sub_1C6214CB8((uint64_t *)a1, v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C6214CB8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v11 = a1;
    v5 = *a1;
    v6 = 48 * v2;
    do
    {
      *a2 = a2 + 2;
      a2[1] = 0x400000000;
      if (*(_DWORD *)(v5 + 8))
        a2 = (_QWORD *)sub_1C614D378((uint64_t)a2, v5);
      v5 += 48;
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
    v7 = *((unsigned int *)v11 + 2);
    if ((_DWORD)v7)
    {
      v8 = *v11;
      v9 = 48 * v7;
      do
      {
        v10 = *(void **)(v8 + v9 - 48);
        if ((void *)(v8 + v9 - 32) != v10)
          free(v10);
        v9 -= 48;
      }
      while (v9);
    }
  }
}

uint64_t llvm::SwiftErrorValueTracking::getOrCreateVReg(llvm::SwiftErrorValueTracking *this, const llvm::MachineBasicBlock *a2, const llvm::Value *a3)
{
  uint64_t *v4;
  uint64_t VirtualRegister;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  _QWORD v10[2];
  uint64_t v11;

  v10[0] = a2;
  v10[1] = a3;
  v4 = (uint64_t *)((char *)this + 32);
  v11 = 0;
  if (sub_1C6214EF4((uint64_t *)this + 4, v10, &v11)
    && v11 != *((_QWORD *)this + 4) + 24 * *((unsigned int *)this + 12))
  {
    return *(unsigned int *)(v11 + 16);
  }
  v7 = *((_QWORD *)this + 2);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 32))(v7, *(_QWORD *)(**(_QWORD **)this + 40) + 272, 0);
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 424))(v7, v8, 0);
  VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(_QWORD *)(*(_QWORD *)this + 40), v9, "", 0);
  *((_DWORD *)sub_1C6214FEC(v4, v10) + 4) = VirtualRegister;
  *((_DWORD *)sub_1C6214FEC((uint64_t *)this + 7, v10) + 4) = VirtualRegister;
  return VirtualRegister;
}

_QWORD *llvm::SwiftErrorValueTracking::setCurrentVReg(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *result;
  _QWORD v6[2];

  v6[0] = a2;
  v6[1] = a3;
  result = sub_1C62151E0((uint64_t *)(a1 + 32), v6);
  *((_DWORD *)result + 4) = a4;
  return result;
}

unsigned int *sub_1C6214EA4(unsigned int *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = -4;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C52A7B1C(result);
    }
  }
  return result;
}

uint64_t sub_1C6214EF4(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v21;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = a2[1];
    v6 = ((v5 >> 4) ^ (v5 >> 9) | ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32))
       + ~((unint64_t)((v5 >> 4) ^ (v5 >> 9)) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
    v10 = v3 - 1;
    v11 = (v3 - 1) & v9;
    v12 = (_QWORD *)(*a1 + 24 * v11);
    v13 = *v12;
    v14 = v12[1];
    if (*a2 == *v12 && v5 == v14)
    {
      result = 1;
    }
    else
    {
      v17 = 0;
      v18 = 1;
      while (v13 != -4096 || v14 != -4096)
      {
        if (v17)
          v19 = 0;
        else
          v19 = v14 == -8192;
        if (v19 && v13 == -8192)
          v17 = v12;
        v21 = v11 + v18++;
        v11 = v21 & v10;
        v12 = (_QWORD *)(v4 + 24 * (v21 & v10));
        v13 = *v12;
        v14 = v12[1];
        result = 1;
        if (*a2 == *v12 && v5 == v14)
          goto LABEL_8;
      }
      result = 0;
      if (v17)
        v12 = v17;
    }
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_8:
  *a3 = v12;
  return result;
}

_QWORD *sub_1C6214FEC(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6214EF4(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6215050((uint64_t)a1, (uint64_t)a2, a2, v7);
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *((_DWORD *)v5 + 4) = 0;
  }
  return v5;
}

_QWORD *sub_1C6215050(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    sub_1C52A799C(a1, v7);
    v9 = 0;
    sub_1C6214EF4((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096 || a4[1] != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C6215108(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = 24 * v6;
    v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *v7 = v9;
      v7 = (int64x2_t *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v10 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -4096 || v10 != -4096) && (*(_QWORD *)a2 != -8192 || v10 != -8192))
    {
      v12 = 0;
      result = sub_1C6214EF4((uint64_t *)v5, (_QWORD *)a2, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      v11[1] = *(_QWORD *)(a2 + 8);
      *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

_QWORD *sub_1C62151E0(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6214EF4(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6215050((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = a2[1];
    *((_DWORD *)v5 + 4) = 0;
  }
  return v5;
}

uint64_t sub_1C621524C(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = (v3 - 1) & ((*a2 >> 9) ^ *a2);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -16;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C62152E8(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C621524C(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C621534C((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

_QWORD *sub_1C621534C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C52A7A64(a1, v7);
  v9 = 0;
  sub_1C621524C((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C62153F8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*(_QWORD *)a2 != -16 && *(_QWORD *)a2 != -4)
    {
      v11 = 0;
      result = sub_1C621524C((uint64_t *)v5, (_QWORD *)a2, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

char *llvm::SwitchCG::getJumpTableRange(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  unint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  size_t v7;
  uint64_t *v8;
  uint64_t **v10;
  unsigned int v11;
  uint64_t **v12;
  unsigned int v13;

  v3 = (unint64_t **)(*(_QWORD *)(*a1 + 40 * a2 + 8) + 24);
  v4 = *(_QWORD *)(*a1 + 40 * a3 + 16);
  v5 = *(unsigned int *)(v4 + 32);
  v11 = v5;
  if (v5 > 0x40)
  {
    v7 = ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8;
    v6 = (void *)operator new[]();
    memcpy(v6, *(const void **)(v4 + 24), v7);
  }
  else
  {
    v6 = *(void **)(v4 + 24);
  }
  v10 = (uint64_t **)v6;
  llvm::APInt::operator-=((uint64_t)&v10, v3);
  v13 = v11;
  v12 = v10;
  v11 = 0;
  v8 = sub_1C47EE5B8(&v12, 0x28F5C28F5C28F5CuLL);
  if (v13 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  if (v11 >= 0x41 && v10)
    MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
  return (char *)v8 + 1;
}

char *sub_1C62155D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  char *result;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 >= *(_QWORD *)(a1 + 16))
  {
    result = sub_1C52AA344((void **)a1, a2, a3);
  }
  else
  {
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)v4 = *(_QWORD *)a2;
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(a2 + 24);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 24) = 0;
    v5 = *(_OWORD *)(a2 + 32);
    *(_WORD *)(v4 + 48) = *(_WORD *)(a2 + 48);
    *(_OWORD *)(v4 + 32) = v5;
    v6 = *(_OWORD *)a3;
    *(_QWORD *)(v4 + 72) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)(v4 + 56) = v6;
    result = (char *)(v4 + 80);
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C6215654(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, int *a5, char a6, char a7, char a8, uint64_t a9, int *a10)
{
  unint64_t v11;
  uint64_t result;

  v11 = a1[1];
  if (v11 >= a1[2])
  {
    result = sub_1C52AB7D4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  else
  {
    sub_1C52AB950(v11, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    result = v11 + 192;
  }
  a1[1] = result;
  return result;
}

_QWORD *sub_1C62156AC(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6144CDC(a1, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = -1;
  }
  return v5;
}

uint64_t sub_1C621571C(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_6;
    }
    v7 = (_DWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*(void **)a1, v4, 32 * v9 - 4);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)a1, v4, 32 * v10 - 4);
LABEL_12:
        v11 = *v7;
        if (v10 != v11)
          memcpy((void *)(*(_QWORD *)a1 + 32 * v10), (const void *)(*(_QWORD *)a2 + 32 * v10), *(_QWORD *)a2 + 32 * v11 - (*(_QWORD *)a2 + 32 * v10));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v9;
LABEL_6:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v9, 32);
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

uint64_t sub_1C6215838(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v6 = a1 + 64;
  *(_OWORD *)(v6 - 32) = v4;
  *(_OWORD *)(v6 - 16) = v5;
  *(_QWORD *)(v6 + 8) = 0x300000000;
  if (*(_DWORD *)(a2 + 72))
    sub_1C621571C(v6, a2 + 64);
  v7 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v7;
  return a1;
}

uint64_t sub_1C62158C4(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)(a1 + 64);
  if (v2 != (void *)(a1 + 80))
    free(v2);
  if (*(_DWORD *)(a1 + 24) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 8) >= 0x41u && *(_QWORD *)a1)
    MEMORY[0x1CAA32F9C](*(_QWORD *)a1, 0x1000C8000313F17);
  return a1;
}

void llvm::initializeTailDuplicatePass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED800260);
  if (v2 != -1)
  {
    v5[0] = sub_1C52AE640;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED800260, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void llvm::initializeEarlyTailDuplicatePass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED800268);
  if (v2 != -1)
  {
    v5[0] = sub_1C52AE6D0;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED800268, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

__n128 llvm::TailDuplicator::initMF(llvm::TailDuplicator *this, llvm::MachineFunction *a2, char a3, const llvm::MachineBranchProbabilityInfo *a4, llvm::MBFIWrapper *a5, llvm::ProfileSummaryInfo *a6, char a7, int a8)
{
  __n128 result;

  *((_QWORD *)this + 5) = a2;
  *(_QWORD *)this = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 104))(*((_QWORD *)a2 + 2));
  *((_QWORD *)this + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 5) + 16) + 176))(*(_QWORD *)(*((_QWORD *)this + 5) + 16));
  result = *(__n128 *)(*((_QWORD *)this + 5) + 32);
  *(__n128 *)((char *)this + 24) = result;
  *((_QWORD *)this + 2) = a4;
  *((_QWORD *)this + 6) = a5;
  *((_QWORD *)this + 7) = a6;
  *((_DWORD *)this + 17) = a8;
  *((_BYTE *)this + 65) = a7;
  *((_BYTE *)this + 64) = a3;
  return result;
}

void llvm::TailDuplicator::removeDeadBlock(int a1, llvm::MachineBasicBlock *this, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  int32x2_t *v7;
  uint64_t v8;

  v5 = (char *)this + 48;
  v6 = *((_QWORD *)this + 7);
  if ((llvm::MachineBasicBlock *)v6 != (llvm::MachineBasicBlock *)((char *)this + 48))
  {
    v7 = (int32x2_t *)*((_QWORD *)this + 4);
    do
    {
      if (llvm::MachineInstr::shouldUpdateCallSiteInfo((llvm::MachineInstr *)v6))
        llvm::MachineFunction::eraseCallSiteInfo(v7, (const llvm::MachineInstr *)v6);
      if (!v6 || (*(_BYTE *)v6 & 4) == 0)
      {
        while ((*(_WORD *)(v6 + 44) & 8) != 0)
          v6 = *(_QWORD *)(v6 + 8);
      }
      v6 = *(_QWORD *)(v6 + 8);
    }
    while ((char *)v6 != v5);
  }
  if (a3)
    (*(void (**)(_QWORD, llvm::MachineBasicBlock *))a3)(*(_QWORD *)(a3 + 8), this);
  while (1)
  {
    v8 = *((_QWORD *)this + 12);
    if (*((_QWORD *)this + 11) == v8)
      break;
    llvm::MachineBasicBlock::removeSuccessor((uint64_t)this, (char *)(v8 - 8), 0);
  }
  llvm::MachineBasicBlock::eraseFromParent(this);
}

uint64_t llvm::TailDuplicator::isSimpleBB(llvm::TailDuplicator *this, llvm::MachineBasicBlock *a2)
{
  uint64_t v3;
  char *FirstNonDebugInstr;

  if (((*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) & 0x7FFFFFFF8) != 8
    || *((_QWORD *)this + 8) == *((_QWORD *)this + 9))
  {
    return 0;
  }
  v3 = 1;
  FirstNonDebugInstr = llvm::MachineBasicBlock::getFirstNonDebugInstr(this, 1);
  if ((char *)this + 48 != FirstNonDebugInstr)
    return sub_1C61D913C((uint64_t)FirstNonDebugInstr, 1);
  return v3;
}

void llvm::TailDuplicator::processPHI(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, int a8)
{
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int VirtualRegister;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v31[3];
  uint64_t v32;
  int v33;

  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(_DWORD *)(v13 + 4);
  v15 = *(_DWORD *)(a2 + 40);
  if (v15 == 1)
  {
    v16 = 0;
    v17 = *(_DWORD *)(v13 + 4);
  }
  else
  {
    v16 = 1;
    while (*(_QWORD *)(v13 + 32 * (v16 + 1) + 16) != a4)
    {
      v16 += 2;
      if (v15 == v16)
      {
        v16 = 0;
        break;
      }
    }
    v17 = *(_DWORD *)(v13 + 32 * v16 + 4);
  }
  v18 = (unint64_t)*(unsigned int *)(v13 + 32 * v16) >> 8;
  v19 = (*(_DWORD *)(v13 + 32 * v16) >> 8) & 0xFFF;
  v20 = *(_QWORD *)(*(_QWORD *)(a1[4] + 24) + 16 * (v14 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
  LODWORD(v31[0]) = *(_DWORD *)(v13 + 4);
  v21 = v17 | ((v18 & 0xFFF) << 32);
  *(uint64_t *)((char *)v31 + 4) = v21;
  v32 = v31[0];
  v33 = v18 & 0xFFF;
  sub_1C6182DAC((uint64_t)v31, a5, (int *)&v32, (uint64_t *)((char *)&v32 + 4));
  VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(a1[4], v20, "", 0);
  LODWORD(v31[0]) = VirtualRegister;
  *(uint64_t *)((char *)v31 + 4) = v21;
  sub_1C476CB98(a6, v31[0], v19);
  if ((sub_1C52B1084(v14, a3, a1[4]) & 1) != 0)
    goto LABEL_9;
  v23 = *(_DWORD *)(a7 + 16);
  if (!v23)
    goto LABEL_10;
  v24 = v23 - 1;
  v25 = v24 & (37 * v14);
  v26 = *(_DWORD *)(*(_QWORD *)a7 + 4 * v25);
  if (v14 == v26)
  {
LABEL_9:
    llvm::TailDuplicator::addSSAUpdateEntry((uint64_t)a1, v14, VirtualRegister, a4);
  }
  else
  {
    v27 = 1;
    while (v26 != -1)
    {
      v28 = v25 + v27++;
      v25 = v28 & v24;
      v26 = *(_DWORD *)(*(_QWORD *)a7 + 4 * v25);
      if (v14 == v26)
        goto LABEL_9;
    }
  }
LABEL_10:
  if (a8)
  {
    llvm::MachineInstr::removeOperand(a2, v16 + 1);
    llvm::MachineInstr::removeOperand(a2, v16);
    if (*(_DWORD *)(a2 + 40) == 1)
    {
      if (*(_BYTE *)(a3 + 185))
        *(_QWORD *)(a2 + 16) = *(_QWORD *)(*a1 + 8) + 480;
      else
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
    }
  }
}

void llvm::TailDuplicator::duplicateInstruction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int32x2_t *a5, uint64_t a6)
{
  llvm::MachineFunction *v9;
  llvm::MachineInstr *v10;
  llvm::MachineInstr *v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  int32x2_t v20;
  unsigned __int32 v21;
  unsigned int v22;
  int *v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int VirtualRegister;
  uint64_t v35;
  uint64_t RegClassConstraint;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  llvm::MachineFunction *v40;
  int v41;
  int v42;
  llvm::MachineInstr *v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int32x2_t *v55;
  unsigned __int8 *v56;
  int v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;

  if (**(_WORD **)(a2 + 16) == 3)
  {
    llvm::MachineBasicBlock::findDebugLoc(a4, *(_QWORD *)(a4 + 56), &v56);
    v9 = sub_1C477A100(a4, (unint64_t *)(a4 + 48), &v56, *(_QWORD *)(*(_QWORD *)a1 + 8) + 144);
    v11 = v10;
    v12 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 16);
    LODWORD(v58) = 16;
    *((_QWORD *)&v58 + 1) = 0;
    LODWORD(v59) = v12;
    llvm::MachineInstr::addOperand(v10, v9, (const llvm::MachineOperand *)&v58);
    *((_WORD *)v11 + 22) = *((_WORD *)v11 + 22) & 0xC | *(_WORD *)(a2 + 44) & 0xFFF3;
    if (v56)
      llvm::MetadataTracking::untrack((uint64_t)&v56, v56);
    return;
  }
  v14 = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 184))();
  if (*(_BYTE *)(a1 + 64))
  {
    v15 = v14;
    v16 = *(unsigned int *)(v14 + 40);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v55 = a5;
      do
      {
        v18 = (unsigned int *)(*(_QWORD *)(v15 + 32) + 32 * v17);
        if (*v18)
          goto LABEL_9;
        v19 = v18[1];
        if ((v19 & 0x80000000) == 0)
          goto LABEL_9;
        if ((*v18 & 0x1000000) != 0)
        {
          VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 16 * (v19 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, "", 0);
          v35 = VirtualRegister;
          llvm::MachineOperand::setReg((uint64_t)v18, VirtualRegister);
          LODWORD(v58) = v19;
          *(_QWORD *)((char *)&v58 + 4) = v35;
          v56 = (unsigned __int8 *)v58;
          v57 = 0;
          a5 = v55;
          sub_1C6182DAC((uint64_t)&v58, (uint64_t)v55, (int *)&v56, (unsigned __int8 **)((char *)&v56 + 4));
          if ((sub_1C52B1084(v19, a3, *(_QWORD *)(a1 + 32)) & 1) == 0)
          {
            v45 = *(_DWORD *)(a6 + 16);
            if (!v45)
              goto LABEL_9;
            v46 = v45 - 1;
            v47 = v46 & (37 * v19);
            v48 = *(_DWORD *)(*(_QWORD *)a6 + 4 * v47);
            if (v19 != v48)
            {
              v49 = 1;
              while (v48 != -1)
              {
                v50 = v47 + v49++;
                v47 = v50 & v46;
                v48 = *(_DWORD *)(*(_QWORD *)a6 + 4 * v47);
                if (v19 == v48)
                  goto LABEL_30;
              }
              goto LABEL_9;
            }
          }
LABEL_30:
          llvm::TailDuplicator::addSSAUpdateEntry(a1, v19, v35, a4);
          goto LABEL_9;
        }
        v20 = *a5;
        v21 = a5[2].u32[0];
        if (v21)
        {
          v22 = (v21 - 1) & (37 * v19);
          v23 = (int *)(*(_QWORD *)&v20 + 12 * v22);
          v24 = *v23;
          if (v19 == *v23)
            goto LABEL_15;
          v51 = 1;
          while (v24 != -1)
          {
            v52 = v22 + v51++;
            v22 = v52 & (v21 - 1);
            v23 = (int *)(*(_QWORD *)&v20 + 12 * v22);
            v24 = *v23;
            if (v19 == *v23)
              goto LABEL_15;
          }
        }
        v23 = (int *)(*(_QWORD *)&v20 + 12 * v21);
LABEL_15:
        if (v23 != (int *)(*(_QWORD *)&v20 + 12 * v21))
        {
          v25 = *(_QWORD **)(a1 + 32);
          v26 = v25[3];
          v27 = *(_QWORD *)(v26 + 16 * (v19 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
          v28 = v23[1];
          v29 = *(_QWORD *)(v26 + 16 * (v28 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
          if (v23[2])
          {
            v30 = (*(uint64_t (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8), v29, *(_QWORD *)(v26 + 16 * (v19 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
            if (v30)
            {
              llvm::MachineRegisterInfo::setRegClass(*(_QWORD *)(a1 + 32), v23[1], v30);
              goto LABEL_19;
            }
LABEL_31:
            RegClassConstraint = llvm::MachineInstr::getRegClassConstraint((llvm::MachineInstr *)a2, v17, *(const llvm::TargetInstrInfo **)a1, *(const llvm::TargetRegisterInfo **)(a1 + 8));
            if (RegClassConstraint)
              v37 = RegClassConstraint;
            else
              v37 = v27;
            v38 = llvm::MachineRegisterInfo::createVirtualRegister(*(_QWORD *)(a1 + 32), v37, "", 0);
            v39 = v38;
            v40 = sub_1C4779044(a4, v15, (unsigned __int8 **)(v15 + 56), *(_QWORD *)(*(_QWORD *)a1 + 8) + 912, v38);
            v41 = v23[1];
            v42 = v23[2];
            *((_QWORD *)&v58 + 1) = 0;
            v59 = 0;
            v60 = 0;
            LODWORD(v58) = (v42 & 0xFFF) << 8;
            DWORD1(v58) = v41;
            llvm::MachineInstr::addOperand(v43, v40, (const llvm::MachineOperand *)&v58);
            *v23 = -2;
            v55[1] = vadd_s32(v55[1], (int32x2_t)0x1FFFFFFFFLL);
            LODWORD(v58) = v19;
            *(_QWORD *)((char *)&v58 + 4) = v39;
            v56 = (unsigned __int8 *)v58;
            v57 = 0;
            sub_1C6182DAC((uint64_t)&v58, (uint64_t)v55, (int *)&v56, (unsigned __int8 **)((char *)&v56 + 4));
            v44 = v39;
            a5 = v55;
            llvm::MachineOperand::setReg((uint64_t)v18, v44);
            v33 = *v18;
          }
          else
          {
            if (!sub_1C51A3F30(v25, v28, v29, *(_QWORD *)(v26 + 16 * (v19 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, 0))
              goto LABEL_31;
LABEL_19:
            llvm::MachineOperand::setReg((uint64_t)v18, v23[1]);
            v31 = *v18;
            v32 = v23[2];
            if (((*v18 >> 8) & 0xFFF) != 0)
            {
              a5 = v55;
              if (v32)
              {
                LOWORD(v32) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 208))(*(_QWORD *)(a1 + 8));
                v31 = *v18;
              }
              else
              {
                v32 = (v31 >> 8) & 0xFFF;
              }
            }
            else
            {
              a5 = v55;
            }
            v33 = v31 & 0xFFF000FF | ((v32 & 0xFFF) << 8);
          }
          *v18 = v33 & 0xFBFFFFFF;
        }
LABEL_9:
        ++v17;
      }
      while (v17 != v16);
    }
  }
}

uint64_t llvm::TailDuplicator::duplicateSimpleBB(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;
  llvm::MachineBasicBlock **v7;
  llvm::MachineBasicBlock **v8;
  llvm::MachineBasicBlock *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  unsigned int *v14;
  llvm::MachineBasicBlock *v15;
  llvm::MachineBasicBlock *v16;
  llvm::MachineBasicBlock *v17;
  llvm::MachineBasicBlock *v18;
  BOOL v19;
  llvm::MachineBasicBlock **v20;
  llvm::MachineBasicBlock **v21;
  unint64_t v22;
  char v23;
  char v25;
  unsigned __int8 *v27;
  llvm::MachineBasicBlock *v28;
  llvm::MachineBasicBlock *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[128];
  llvm::MachineBasicBlock **v36;
  uint64_t v37;
  _QWORD v38[10];

  v38[8] = *MEMORY[0x1E0C80C00];
  sub_1C52B12D8((llvm::SmallPtrSetImplBase *)&v30, *(uint64_t **)(a2 + 88), *(uint64_t **)(a2 + 96));
  v5 = *(char **)(a2 + 64);
  v6 = *(char **)(a2 + 72);
  v36 = (llvm::MachineBasicBlock **)v38;
  v37 = 0x800000000;
  sub_1C485BB4C((unsigned int *)&v36, v5, v6);
  v7 = v36;
  if ((_DWORD)v37)
  {
    v25 = 0;
    v8 = &v36[v37];
    do
    {
      v9 = *v7;
      if (!llvm::MachineBasicBlock::hasEHPadSuccessor(*v7) && !llvm::MachineBasicBlock::mayHaveInlineAsmBr(v9))
      {
        v11 = (uint64_t *)*((_QWORD *)v9 + 11);
        v10 = (uint64_t *)*((_QWORD *)v9 + 12);
        while (v11 != v10)
        {
          v12 = *v11;
          v13 = (char *)sub_1C477672C((uint64_t)&v30, *v11);
          if (v31 == v30)
            v14 = (unsigned int *)&v32 + 1;
          else
            v14 = (unsigned int *)&v32;
          if (v13 != &v31[8 * *v14]
            && v12 + 48 != (*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF8)
            && (!**(_WORD **)(*(_QWORD *)(v12 + 56) + 16) || **(_WORD **)(*(_QWORD *)(v12 + 56) + 16) == 69))
          {
            goto LABEL_5;
          }
          ++v11;
        }
        v28 = 0;
        v29 = 0;
        v33 = v35;
        v34 = 0x400000000;
        if (((*(uint64_t (**)(_QWORD, llvm::MachineBasicBlock *, llvm::MachineBasicBlock **, llvm::MachineBasicBlock **, void **, _QWORD))(*(_QWORD *)*a1 + 248))(*a1, v9, &v29, &v28, &v33, 0) & 1) == 0)
        {
          v15 = **(llvm::MachineBasicBlock ***)(a2 + 88);
          if (*((_QWORD *)v9 + 1) == *((_QWORD *)v9 + 4) + 320)
            v16 = 0;
          else
            v16 = (llvm::MachineBasicBlock *)*((_QWORD *)v9 + 1);
          v17 = v29;
          if (!(_DWORD)v34)
            v28 = v29;
          if (!v29)
          {
            v29 = v16;
            v17 = v16;
          }
          if (v28)
            v18 = v28;
          else
            v18 = v16;
          v19 = v18 == (llvm::MachineBasicBlock *)a2;
          if (v18 == (llvm::MachineBasicBlock *)a2)
            v18 = v15;
          if (!v28 || v19)
            v28 = v18;
          if (v17 == (llvm::MachineBasicBlock *)a2)
          {
            v29 = v15;
            v17 = v15;
          }
          if (v17 == v18)
          {
            v18 = 0;
            LODWORD(v34) = 0;
            v28 = 0;
          }
          if (v18 == v16)
          {
            v18 = 0;
            v28 = 0;
          }
          if (v17 == v16 && !v18)
            v29 = 0;
          llvm::MachineBasicBlock::findBranchDebugLoc(v9, &v27);
          (*(void (**)(_QWORD, llvm::MachineBasicBlock *, _QWORD))(*(_QWORD *)*a1 + 264))(*a1, v9, 0);
          v20 = (llvm::MachineBasicBlock **)*((_QWORD *)v9 + 11);
          v21 = (llvm::MachineBasicBlock **)*((_QWORD *)v9 + 12);
          if (v20 != v21)
          {
            while (*v20 != v15)
            {
              if (++v20 == v21)
              {
                v20 = (llvm::MachineBasicBlock **)*((_QWORD *)v9 + 12);
                break;
              }
            }
          }
          if (v20 == v21)
            llvm::MachineBasicBlock::replaceSuccessor(v9, (llvm::MachineBasicBlock *)a2, v15);
          else
            llvm::MachineBasicBlock::removeSuccessor(v9, (llvm::MachineBasicBlock *)a2, 1);
          if (v29)
            (*(void (**)(_QWORD, llvm::MachineBasicBlock *, llvm::MachineBasicBlock *, llvm::MachineBasicBlock *, void *, _QWORD, unsigned __int8 **, _QWORD))(*(_QWORD *)*a1 + 272))(*a1, v9, v29, v28, v33, v34, &v27, 0);
          v22 = *(unsigned int *)(a3 + 8);
          if (v22 >= *(unsigned int *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v22 + 1, 8);
            v22 = *(unsigned int *)(a3 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v22) = v9;
          ++*(_DWORD *)(a3 + 8);
          if (v27)
            llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
          v25 = 1;
        }
        if (v33 != v35)
          free(v33);
      }
LABEL_5:
      ++v7;
    }
    while (v7 != v8);
    v7 = v36;
    v23 = v25;
  }
  else
  {
    v23 = 0;
  }
  if (v7 != v38)
    free(v7);
  if (v31 != v30)
    free(v31);
  return v23 & 1;
}

void llvm::TailDuplicator::appendCopies(uint64_t a1, llvm::MachineBasicBlock *this, uint64_t a3, uint64_t a4)
{
  unint64_t FirstTerminator;
  unsigned int v9;
  unint64_t *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  llvm::MachineFunction *v14;
  llvm::MachineInstr *v15;
  llvm::MachineInstr *v16;
  int v17;
  int v18;
  unint64_t v19;
  unsigned __int8 *v20;
  _DWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(this);
  v9 = *(_DWORD *)(a3 + 8);
  if (v9)
  {
    v10 = (unint64_t *)FirstTerminator;
    v11 = *(_QWORD *)(*(_QWORD *)a1 + 8) + 912;
    v12 = *(int **)a3;
    v13 = *(_QWORD *)a3 + 12 * v9;
    do
    {
      v20 = 0;
      v14 = sub_1C4787570((uint64_t)this, v10, &v20, v11, *v12);
      v16 = v15;
      v17 = v12[1];
      v18 = v12[2];
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v21[0] = (v18 & 0xFFF) << 8;
      v21[1] = v17;
      llvm::MachineInstr::addOperand(v15, v14, (const llvm::MachineOperand *)v21);
      if (v20)
        llvm::MetadataTracking::untrack((uint64_t)&v20, v20);
      v19 = *(unsigned int *)(a4 + 8);
      if (v19 >= *(unsigned int *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v19 + 1, 8);
        v19 = *(unsigned int *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v19) = v16;
      ++*(_DWORD *)(a4 + 8);
      v12 += 3;
    }
    while (v12 != (int *)v13);
  }
}

llvm::raw_ostream *sub_1C6216740(llvm::raw_ostream *a1, llvm::MachineInstr *this)
{
  llvm::MachineInstr::print(this, a1, 1, 0, 0, 1, 0);
  return a1;
}

_QWORD *sub_1C6216780(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  if (a2)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, a1);
    return (_QWORD *)a1;
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C62167BC(v4);
  }
}

_QWORD *sub_1C62167BC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)a1[3];
  if (v2 == a1)
  {
    v3 = 4;
    v2 = a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void sub_1C6216808(__int128 *a1, int **a2, _WORD *a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED800330, 0, 0);
  dword_1ED8003B0 = 0;
  qword_1ED8003B8 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED8003C0 = 0;
  qword_1ED800330 = (uint64_t)&unk_1E819E3B0;
  qword_1ED8003C8 = (uint64_t)&unk_1E819E2C0;
  qword_1ED8003D0 = (uint64_t)&off_1E7F95260;
  qword_1ED8003E8 = (uint64_t)&qword_1ED8003D0;
  llvm::cl::Option::setArgStr(v6, "tail-dup-indirect-size", 0x16uLL);
  xmmword_1ED800350 = *a1;
  dword_1ED8003B0 = **a2;
  byte_1ED8003C4 = 1;
  dword_1ED8003C0 = dword_1ED8003B0;
  word_1ED80033A = (32 * (*a3 & 3)) | word_1ED80033A & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED800330);
}

uint64_t sub_1C62168E4(uint64_t a1, char *a2, _DWORD **a3, _WORD *a4)
{
  uint64_t v8;
  size_t v9;
  _DWORD *v10;

  v8 = sub_1C47AD050(a1, 0, 0);
  *(_DWORD *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 136) = &off_1E7F952A8;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)v8 = &unk_1E819E3B0;
  *(_QWORD *)(v8 + 152) = &unk_1E819E2C0;
  *(_QWORD *)(v8 + 160) = &off_1E7F95260;
  *(_QWORD *)(v8 + 184) = v8 + 160;
  v9 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v9);
  v10 = *a3;
  *(_DWORD *)(a1 + 128) = **a3;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = *v10;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t llvm::TargetFrameLowering::enableCalleeSaveSkip(llvm::TargetFrameLowering *this, const llvm::MachineFunction *a2)
{
  return 0;
}

uint64_t llvm::TargetFrameLowering::enableCFIFixup(llvm::TargetFrameLowering *this, llvm::MachineFunction *a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;

  result = llvm::MachineFunction::needsFrameMoves(a2);
  if ((_DWORD)result)
  {
    v4 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 560);
    if (*(_DWORD *)(v4 + 412) == 4)
    {
      v5 = *(_DWORD *)(v4 + 420);
      return !v5 || v5 == 6;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t llvm::TargetFrameLowering::getFrameIndexReference(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(a2 + 56);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  *a4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 552))(v9, a2);
  return *(_QWORD *)(v8 + 48)
       + *(_QWORD *)(*(_QWORD *)(v8 + 8) + 40 * (*(_DWORD *)(v8 + 32) + a3))
       - *(int *)(a1 + 16)
       + *(int *)(v8 + 56);
}

void llvm::TargetInstrInfo::~TargetInstrInfo(llvm::TargetInstrInfo *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_1E814B360;
  v1 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E814B360;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E814B360;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::TargetInstrInfo::insertNoops(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v7;

  if (a4)
  {
    v4 = a4;
    v7 = result;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 736))(v7, a2, a3);
      --v4;
    }
    while (v4);
  }
  return result;
}

void llvm::TargetInstrInfo::ReplaceTailWithBranchTo(uint64_t a1, llvm::MachineInstr *this, _QWORD *a3)
{
  llvm::MachineInstr *v4;
  uint64_t i;
  char *v7;
  unsigned __int8 *v8;
  llvm::MachineInstr *v9;
  llvm::MachineInstr *v10;
  unsigned __int8 *v11;

  v4 = this;
  for (i = *((_QWORD *)this + 3); ; llvm::MachineBasicBlock::removeSuccessor(i, v7, 0))
  {
    v7 = *(char **)(i + 88);
    if (v7 == *(char **)(i + 96))
      break;
  }
  v8 = (unsigned __int8 *)*((_QWORD *)v4 + 7);
  v11 = v8;
  if (v8)
    llvm::MetadataTracking::track((uint64_t)&v11, v8, 2);
  if ((llvm::MachineInstr *)(i + 48) != v4)
  {
    do
    {
      if (!v4 || (v9 = v4, (*(_BYTE *)v4 & 4) == 0))
      {
        v9 = v4;
        if ((*((_WORD *)v4 + 22) & 8) != 0)
        {
          v9 = v4;
          do
            v9 = (llvm::MachineInstr *)*((_QWORD *)v9 + 1);
          while ((*((_WORD *)v9 + 22) & 8) != 0);
        }
      }
      v10 = (llvm::MachineInstr *)*((_QWORD *)v9 + 1);
      if (llvm::MachineInstr::shouldUpdateCallSiteInfo(v4))
        llvm::MachineFunction::eraseCallSiteInfo(*(int32x2_t **)(i + 32), v4);
      sub_1C52B1C10(i, v4);
      v4 = v10;
    }
    while (v10 != (llvm::MachineInstr *)(i + 48));
  }
  if (*(_QWORD **)(i + 8) != a3)
    (*(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD, unsigned __int8 **, _QWORD, unsigned __int8 **, _QWORD))(*(_QWORD *)a1 + 272))(a1, i, a3, 0, &v11, 0, &v11, 0);
  llvm::MachineBasicBlock::addSuccessor((_QWORD *)i, a3, -1);
  if (v11)
    llvm::MetadataTracking::untrack((uint64_t)&v11, v11);
}

BOOL llvm::TargetInstrInfo::findCommutedOpIndices(llvm::TargetInstrInfo *this, const llvm::MachineInstr *a2, llvm::TargetInstrInfo *a3, unsigned int *a4)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v9;

  v4 = *((_QWORD *)a2 + 2);
  if ((*(_BYTE *)(v4 + 11) & 2) == 0)
    return 0;
  result = llvm::TargetInstrInfo::fixCommutedOpIndices(a3, a4, (unsigned int *)*(unsigned __int8 *)(v4 + 4), *(unsigned __int8 *)(v4 + 4) + 1);
  if ((_DWORD)result)
  {
    v9 = *((_QWORD *)a2 + 4);
    if (!*(_BYTE *)(v9 + 32 * *(unsigned int *)a3))
      return *(unsigned __int8 *)(v9 + 32 * *a4) == 0;
    return 0;
  }
  return result;
}

BOOL llvm::TargetInstrInfo::hasLoadFromStackSlot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;
  int *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;

  v4 = *(_DWORD *)(a3 + 8);
  v7 = *(_QWORD *)(a2 + 48);
  v5 = (_QWORD *)(a2 + 48);
  v6 = v7;
  if (v7 < 8)
  {
    v9 = 0;
LABEL_16:
    v5 = 0;
    v6 = 0;
    goto LABEL_17;
  }
  if ((v6 & 7) != 0)
  {
    if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0 && (v6 & 7) == 3)
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    else
      v9 = 0;
  }
  else
  {
    v9 = (unint64_t)v5;
    v6 &= 0xFFFFFFFFFFFFFFF8;
    *v5 = v6;
    if (!v6)
    {
      v9 = (unint64_t)v5;
      v5 = 0;
      goto LABEL_17;
    }
  }
  if ((v6 & 7) == 0)
  {
    *v5 = v6 & 0xFFFFFFFFFFFFFFF8;
    v6 = 1;
    goto LABEL_17;
  }
  v10 = (int *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 7) != 3 || v10 == 0)
    goto LABEL_16;
  v12 = *v10;
  v5 = v10 + 2;
  v6 = v12;
LABEL_17:
  v13 = &v5[v6];
  while ((_QWORD *)v9 != v13)
  {
    v14 = *(_QWORD **)v9;
    if ((*(_WORD *)(*(_QWORD *)v9 + 32) & 1) != 0 && (*v14 & 4) != 0)
    {
      v15 = *v14 & 0xFFFFFFFFFFFFFFF8;
      if (v15)
      {
        if (*(_DWORD *)(v15 + 8) == 4)
        {
          v16 = *(unsigned int *)(a3 + 8);
          if (v16 >= *(unsigned int *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v16 + 1, 8);
            v16 = *(unsigned int *)(a3 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v16) = v14;
          ++*(_DWORD *)(a3 + 8);
        }
      }
    }
    v9 += 8;
  }
  return *(_DWORD *)(a3 + 8) != v4;
}

uint64_t llvm::TargetInstrInfo::getStackSlotRange(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4, int *a5, llvm::MachineFunction *a6)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v15;
  unsigned int SubRegIdxOffset;

  v11 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a6 + 2) + 176))(*((_QWORD **)a6 + 2));
  v12 = v11;
  if (!a3)
  {
    v15 = 0;
    *a4 = *(_DWORD *)(*(_QWORD *)(v11 + 264)
                    + 24
                    * (*(unsigned __int16 *)(*(_QWORD *)a2 + 24)
                     + *(_DWORD *)(v11 + 272) * ((*(_QWORD *)(v11 + 248) - *(_QWORD *)(v11 + 240)) >> 3))
                    + 4) >> 3;
LABEL_5:
    *a5 = v15;
    return 1;
  }
  v13 = *(unsigned __int16 *)(*(_QWORD *)(v11 + 96) + 4 * a3 + 2);
  if ((v13 & 7) != 0)
    return 0;
  SubRegIdxOffset = llvm::MCRegisterInfo::getSubRegIdxOffset((llvm::MCRegisterInfo *)(v11 + 8), a3);
  if ((SubRegIdxOffset & 0x80000007) != 0)
    return 0;
  *a4 = v13 >> 3;
  *a5 = SubRegIdxOffset >> 3;
  if (*(_BYTE *)llvm::MachineFunction::getDataLayout(a6))
  {
    v15 = (*(_DWORD *)(*(_QWORD *)(v12 + 264)
                     + 24
                     * (*(unsigned __int16 *)(*(_QWORD *)a2 + 24)
                      + *(_DWORD *)(v12 + 272) * ((*(_QWORD *)(v12 + 248) - *(_QWORD *)(v12 + 240)) >> 3))
                     + 4) >> 3)
        - (*a5
         + *a4);
    goto LABEL_5;
  }
  return 1;
}

uint64_t llvm::TargetInstrInfo::produceSameValue(llvm::TargetInstrInfo *this, const llvm::MachineInstr *a2, const llvm::MachineInstr *a3, const llvm::MachineRegisterInfo *a4)
{
  return llvm::MachineInstr::isIdenticalTo((uint64_t)a2, (uint64_t)a3, 3);
}

uint64_t llvm::TargetInstrInfo::getPatchpointUnfoldableRange(llvm::TargetInstrInfo *this, const llvm::MachineInstr *a2)
{
  unsigned __int16 *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int NumExplicitDefs;
  uint64_t v8;
  unsigned int v9;
  unsigned int v11;
  uint64_t v13;
  unsigned __int8 v14;

  v3 = (unsigned __int16 *)*((_QWORD *)a2 + 2);
  v4 = *v3;
  if (v4 == 31)
  {
    NumExplicitDefs = llvm::MachineInstr::getNumExplicitDefs(a2);
    v8 = *((_QWORD *)v3 + 4);
    if (v8)
    {
      v9 = 0;
      while (*(unsigned __int16 *)(v8 + 2 * v9++))
        ;
      v11 = -1;
      do
        ++v11;
      while (*(_WORD *)(v8 + 2 * v11));
      LODWORD(v5) = NumExplicitDefs + v9 - 1;
    }
    else
    {
      v11 = 0;
      LODWORD(v5) = NumExplicitDefs;
    }
    v6 = v11 + NumExplicitDefs + *(_DWORD *)(*((_QWORD *)a2 + 4) + 32 * (v11 + NumExplicitDefs + 2) + 16) + 4;
    v5 = v5;
  }
  else if (v4 == 27)
  {
    llvm::PatchPointOpers::PatchPointOpers((uint64_t)&v13, a2);
    v5 = 0;
    v6 = v14 + *(_DWORD *)(*(_QWORD *)(v13 + 32) + 32 * v14 + 112) + 5;
  }
  else
  {
    llvm::StackMapOpers::StackMapOpers(&v13, a2);
    v5 = 0;
    v6 = 2;
  }
  return v5 | (v6 << 32);
}

uint64_t llvm::TargetInstrInfo::foldMemoryOperand(_QWORD *a1, uint64_t *a2, __int32 *a3, size_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int16 *v12;
  uint64_t v13;
  llvm::MachineFunction *v14;
  BOOL v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  llvm::MachineMemOperand **v32;
  unint64_t v33;
  llvm::MachineMemOperand **v35;
  int *v36;
  llvm::MachineMemOperand **v37;
  llvm::MachineMemOperand *v38;
  int v39;

  v12 = (unsigned __int16 *)a2[2];
  v13 = a2[3];
  v14 = *(llvm::MachineFunction **)(v13 + 32);
  v39 = 0;
  LODWORD(v12) = *v12;
  v15 = v12 > 0x1F;
  v16 = (1 << (char)v12) & 0x8A000000;
  v17 = v15 || v16 == 0;
  if (v17 || !(*(unsigned int (**)(_QWORD *, uint64_t, int *))(*a1 + 64))(a1, a5, &v39))
  {
    v18 = (*(uint64_t (**)(_QWORD *, llvm::MachineFunction *, uint64_t *, __int32 *, size_t, uint64_t *, uint64_t, uint64_t))(*a1 + 600))(a1, v14, a2, a3, a4, a2, a5, a6);
    if (!v18)
      return v18;
  }
  else
  {
    v18 = sub_1C52B2D84((uint64_t)v14, (uint64_t)a2, a3, a4, v39, a1);
    if (!v18)
      return v18;
    llvm::ilist_traits<llvm::MachineInstr>::addNodeToList((uint64_t *)(v13 + 40), v18);
    v19 = *a2 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v18 = v19 | *(_QWORD *)v18 & 7;
    *(_QWORD *)(v18 + 8) = a2;
    *(_QWORD *)(v19 + 8) = v18;
    *a2 = *a2 & 7 | v18;
  }
  v22 = a2[6];
  v21 = (unint64_t *)(a2 + 6);
  v20 = v22;
  if (v22 < 8)
    goto LABEL_14;
  if ((v20 & 7) == 0)
  {
    v20 &= 0xFFFFFFFFFFFFFFF8;
    *v21 = v20;
    if (!v20)
    {
      v21 = 0;
      v29 = 0;
      goto LABEL_29;
    }
LABEL_23:
    if ((v20 & 7) != 0)
    {
      v21 = 0;
      v29 = 0;
      if ((v20 & 7) == 3)
      {
        v30 = (int *)(v20 & 0xFFFFFFFFFFFFFFF8);
        if (v30)
        {
          v29 = *v30;
          v21 = (unint64_t *)(v30 + 2);
        }
      }
    }
    else
    {
      *v21 = v20 & 0xFFFFFFFFFFFFFFF8;
      v29 = 1;
    }
LABEL_29:
    llvm::MachineInstr::setMemRefs(v18, v14, v21, v29);
    v33 = *(_QWORD *)(a5 + 48);
    v32 = (llvm::MachineMemOperand **)(a5 + 48);
    v31 = v33;
    if (v33 < 8)
    {
      v35 = 0;
      v32 = 0;
      v31 = 0;
    }
    else
    {
      if ((v31 & 7) != 0)
      {
        if ((v31 & 0xFFFFFFFFFFFFFFF8) != 0 && (v31 & 7) == 3)
          v35 = (llvm::MachineMemOperand **)((v31 & 0xFFFFFFFFFFFFFFF8) + 8);
        else
          v35 = 0;
        goto LABEL_37;
      }
      v35 = v32;
      v31 &= 0xFFFFFFFFFFFFFFF8;
      *v32 = (llvm::MachineMemOperand *)v31;
      if (v31)
      {
LABEL_37:
        if ((v31 & 7) != 0)
        {
          v32 = 0;
          if ((v31 & 7) == 3 && (v36 = (int *)(v31 & 0xFFFFFFFFFFFFFFF8), (v31 & 0xFFFFFFFFFFFFFFF8) != 0))
          {
            v31 = *v36;
            v32 = (llvm::MachineMemOperand **)(v36 + 2);
          }
          else
          {
            v31 = 0;
          }
        }
        else
        {
          *v32 = (llvm::MachineMemOperand *)(v31 & 0xFFFFFFFFFFFFFFF8);
          v31 = 1;
        }
        goto LABEL_42;
      }
      v35 = v32;
      v32 = 0;
    }
LABEL_42:
    v37 = &v32[v31];
    while (v35 != v37)
    {
      v38 = *v35++;
      llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v18, v14, v38);
    }
    return v18;
  }
  if ((v20 & 7) == 3 && (v20 & 0xFFFFFFFFFFFFFFF8) != 0 && *(_DWORD *)(v20 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_23;
LABEL_14:
  v25 = *(_QWORD *)(a5 + 48);
  v24 = (unint64_t *)(a5 + 48);
  v23 = v25;
  if (v25 < 8)
  {
    v24 = 0;
    v26 = 0;
  }
  else if ((v23 & 7) != 0)
  {
    v24 = 0;
    v26 = 0;
    if ((v23 & 7) == 3)
    {
      v27 = (int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      if (v27)
      {
        v26 = *v27;
        v24 = (unint64_t *)(v27 + 2);
      }
    }
  }
  else
  {
    *v24 = v23 & 0xFFFFFFFFFFFFFFF8;
    v26 = 1;
  }
  llvm::MachineInstr::setMemRefs(v18, v14, v24, v26);
  return v18;
}

BOOL llvm::TargetInstrInfo::hasReassociableOperands(llvm::TargetInstrInfo *this, const llvm::MachineInstr *a2, const llvm::MachineBasicBlock *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t UniqueVRegDef;
  _BOOL8 result;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  v4 = *((_QWORD *)a2 + 4);
  v5 = *(_QWORD *)(*((_QWORD *)a3 + 4) + 40);
  if (*(_BYTE *)(v4 + 32) || (v8 = *(_DWORD *)(v4 + 36), (v8 & 0x80000000) == 0))
    UniqueVRegDef = 0;
  else
    UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(*((_QWORD *)a3 + 4) + 40), v8);
  if (*(_BYTE *)(v4 + 64))
    return 0;
  v9 = *(_DWORD *)(v4 + 68);
  if ((v9 & 0x80000000) == 0)
    return 0;
  v10 = llvm::MachineRegisterInfo::getUniqueVRegDef(v5, v9);
  result = 0;
  if (UniqueVRegDef && v10)
  {
    if (*(const llvm::MachineBasicBlock **)(UniqueVRegDef + 24) == a3)
      return *(_QWORD *)(v10 + 24) == (_QWORD)a3;
    return 0;
  }
  return result;
}

uint64_t llvm::TargetInstrInfo::getMachineCombinerPatterns(llvm::TargetInstrInfo *a1, const llvm::MachineInstr *a2, uint64_t a3)
{
  uint64_t result;
  _BOOL4 hasReassociableSibling;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  BOOL v13;

  result = (*(uint64_t (**)(llvm::TargetInstrInfo *))(*(_QWORD *)a1 + 536))(a1);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(llvm::TargetInstrInfo *, const llvm::MachineInstr *, _QWORD))(*(_QWORD *)a1 + 544))(a1, a2, *((_QWORD *)a2 + 3));
    if ((_DWORD)result)
    {
      v13 = 0;
      hasReassociableSibling = llvm::TargetInstrInfo::hasReassociableSibling(a1, a2, &v13);
      result = 0;
      if (hasReassociableSibling)
      {
        v8 = *(unsigned int *)(a3 + 8);
        v9 = *(_DWORD *)(a3 + 12);
        if (v13)
        {
          if (v8 >= v9)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v8 + 1, 4);
            LODWORD(v8) = *(_DWORD *)(a3 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a3 + 4 * v8) = 1;
          v10 = *(_DWORD *)(a3 + 12);
          v11 = *(_DWORD *)(a3 + 8) + 1;
          *(_DWORD *)(a3 + 8) = v11;
          v12 = 3;
        }
        else
        {
          if (v8 >= v9)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v8 + 1, 4);
            LODWORD(v8) = *(_DWORD *)(a3 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a3 + 4 * v8) = 0;
          v10 = *(_DWORD *)(a3 + 12);
          v11 = *(_DWORD *)(a3 + 8) + 1;
          *(_DWORD *)(a3 + 8) = v11;
          v12 = 2;
        }
        if (v11 >= v10)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v11 + 1, 4);
          v11 = *(_DWORD *)(a3 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a3 + 4 * v11) = v12;
        ++*(_DWORD *)(a3 + 8);
        return 1;
      }
    }
  }
  return result;
}

uint64_t llvm::TargetInstrInfo::isThroughputPattern()
{
  return 0;
}

llvm::MachineFunction *sub_1C62175DC(llvm::MachineFunction *a1, unsigned __int8 **a2, uint64_t a3, int a4)
{
  unsigned __int8 *v7;
  llvm::MachineInstr *v8;
  unsigned __int8 *v10;
  _DWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = *a2;
  v10 = v7;
  if (v7)
    llvm::MetadataTracking::track((uint64_t)&v10, v7, 2);
  v8 = llvm::MachineFunction::CreateMachineInstr(a1, a3, &v10, 0);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v11[0] = 0x1000000;
  v11[1] = a4;
  llvm::MachineInstr::addOperand(v8, a1, (const llvm::MachineOperand *)v11);
  if (v10)
    llvm::MetadataTracking::untrack((uint64_t)&v10, v10);
  return a1;
}

_QWORD *llvm::TargetInstrInfo::CreateTargetHazardRecognizer(llvm::TargetInstrInfo *this, const llvm::TargetSubtargetInfo *a2, const llvm::ScheduleDAG *a3)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &unk_1E814A6D8;
  result[1] = 0;
  return result;
}

uint64_t llvm::TargetInstrInfo::CreateTargetPostRAHazardRecognizer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = operator new();
  return llvm::ScoreboardHazardRecognizer::ScoreboardHazardRecognizer(v5, a2, a3, (uint64_t)"post-RA-sched");
}

uint64_t llvm::TargetInstrInfo::getOperandLatency(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v6;
  int v7;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;

  if (!a2)
    return 0xFFFFFFFFLL;
  v6 = a2[12];
  if (!v6)
    return 0xFFFFFFFFLL;
  v7 = *(__int16 *)(a3 + 24);
  if ((v7 & 0x80000000) == 0)
    return 0xFFFFFFFFLL;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(unsigned __int16 *)(v9 + 48 * (unsigned __int16)~(_WORD)v7 + 6);
  v11 = *(__int16 *)(a5 + 24);
  if (v11 < 0)
    return sub_1C6217784(a2, v10, a4, *(unsigned __int16 *)(v9 + 48 * (unsigned __int16)~(_WORD)v11 + 6), a6);
  v12 = v6 + 10 * v10;
  v13 = *(unsigned __int16 *)(v12 + 8);
  v14 = *(unsigned __int16 *)(v12 + 6) + a4;
  if (v14 >= v13)
    return 0xFFFFFFFFLL;
  return *(unsigned int *)(a2[10] + 4 * v14);
}

{
  return sub_1C6217784(a2, *(unsigned __int16 *)(*(_QWORD *)(a3 + 16) + 6), a4, *(unsigned __int16 *)(*(_QWORD *)(a5 + 16) + 6), a6);
}

uint64_t sub_1C6217784(_QWORD *a1, unsigned int a2, int a3, unsigned int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  int v19;

  v5 = a1[12];
  if (!v5)
    return 0xFFFFFFFFLL;
  v6 = v5 + 10 * a2;
  v7 = *(unsigned __int16 *)(v6 + 8);
  v8 = *(unsigned __int16 *)(v6 + 6) + a3;
  if (v8 >= v7)
    return 0xFFFFFFFFLL;
  v10 = a1[10];
  v11 = *(_DWORD *)(v10 + 4 * v8);
  if (v11 == -1)
    return 0xFFFFFFFFLL;
  v12 = v5 + 10 * a4;
  v13 = *(unsigned __int16 *)(v12 + 8);
  v14 = *(unsigned __int16 *)(v12 + 6) + a5;
  if (v14 >= v13)
    return 0xFFFFFFFFLL;
  v15 = *(_DWORD *)(v10 + 4 * v14);
  if (v15 == -1)
    return 0xFFFFFFFFLL;
  v16 = v11 - v15;
  result = (v16 + 1);
  if (v16 >= 0)
  {
    v18 = a1[11];
    v19 = *(_DWORD *)(v18 + 4 * v8);
    if (v19)
    {
      if (v19 == *(_DWORD *)(v18 + 4 * v14))
        return v16;
      else
        return result;
    }
  }
  return result;
}

uint64_t llvm::TargetInstrInfo::getNumMicroOps(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 1;
  v3 = *(_QWORD *)(a2 + 96);
  if (!v3)
    return 1;
  v4 = *(__int16 *)(v3 + 10 * *(unsigned __int16 *)(*(_QWORD *)(a3 + 16) + 6));
  if (v4 < 0)
    return 1;
  else
    return v4;
}

uint64_t llvm::TargetInstrInfo::getPredicationCost(llvm::TargetInstrInfo *this, const llvm::MachineInstr *a2)
{
  return 0;
}

BOOL llvm::TargetInstrInfo::hasLowDefLatency(llvm::TargetInstrInfo *this, const llvm::TargetSchedModel *a2, const llvm::MachineInstr *a3, int a4)
{
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  result = llvm::TargetSchedModel::hasInstrItineraries(a2);
  if ((_DWORD)result)
  {
    v8 = *((_QWORD *)a2 + 21);
    if (v8)
    {
      v9 = v8 + 10 * *(unsigned __int16 *)(*((_QWORD *)a3 + 2) + 6);
      v10 = *(unsigned __int16 *)(v9 + 8);
      v11 = *(unsigned __int16 *)(v9 + 6) + a4;
      if (v11 >= v10)
        v12 = -1;
      else
        v12 = *(_DWORD *)(*((_QWORD *)a2 + 19) + 4 * v11);
      return v12 != -1 && v12 < 2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::TargetInstrInfo::getExtractSubregInputs(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;

  if (**(_WORD **)(a2 + 16) != 8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 616))(a1);
  v4 = *(_QWORD *)(a2 + 32);
  if ((*(_BYTE *)(v4 + 35) & 0x10) != 0)
    return 0;
  *a4 = *(_DWORD *)(v4 + 36);
  a4[1] = (*(_DWORD *)(v4 + 32) >> 8) & 0xFFF;
  a4[2] = *(_QWORD *)(v4 + 80);
  return 1;
}

uint64_t llvm::TargetInstrInfo::getInsertSubregInputs(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;

  if (**(_WORD **)(a2 + 16) != 9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1);
  v5 = *(_QWORD *)(a2 + 32);
  if ((*(_BYTE *)(v5 + 67) & 0x10) != 0)
    return 0;
  *a4 = *(_DWORD *)(v5 + 36);
  a4[1] = (*(_DWORD *)(v5 + 32) >> 8) & 0xFFF;
  *a5 = *(_DWORD *)(v5 + 68);
  a5[1] = (*(_DWORD *)(v5 + 64) >> 8) & 0xFFF;
  a5[2] = *(_QWORD *)(v5 + 112);
  return 1;
}

_OWORD *sub_1C62179B8(uint64_t a1, char a2)
{
  _OWORD *result;
  __int128 v5;

  result = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)&v5 = "sideeffect";
    *((_QWORD *)&v5 + 1) = 10;
    result = sub_1C51140B0((void **)a1, &v5);
    *(_QWORD *)(a1 + 8) = result;
  }
  if ((a2 & 8) != 0)
  {
    *(_QWORD *)&v5 = "mayload";
    *((_QWORD *)&v5 + 1) = 7;
    if ((unint64_t)result >= *(_QWORD *)(a1 + 16))
      result = sub_1C51140B0((void **)a1, &v5);
    else
      *result++ = v5;
    *(_QWORD *)(a1 + 8) = result;
  }
  if ((a2 & 0x10) != 0)
  {
    *(_QWORD *)&v5 = "maystore";
    *((_QWORD *)&v5 + 1) = 8;
    if ((unint64_t)result >= *(_QWORD *)(a1 + 16))
      result = sub_1C51140B0((void **)a1, &v5);
    else
      *result++ = v5;
    *(_QWORD *)(a1 + 8) = result;
  }
  if ((a2 & 0x20) != 0)
  {
    *(_QWORD *)&v5 = "isconvergent";
    *((_QWORD *)&v5 + 1) = 12;
    if ((unint64_t)result >= *(_QWORD *)(a1 + 16))
      result = sub_1C51140B0((void **)a1, &v5);
    else
      *result++ = v5;
    *(_QWORD *)(a1 + 8) = result;
  }
  if ((a2 & 2) != 0)
  {
    *(_QWORD *)&v5 = "alignstack";
    *((_QWORD *)&v5 + 1) = 10;
    if ((unint64_t)result >= *(_QWORD *)(a1 + 16))
      result = sub_1C51140B0((void **)a1, &v5);
    else
      *result++ = v5;
    *(_QWORD *)(a1 + 8) = result;
  }
  if ((a2 & 4) == 0)
  {
    *(_QWORD *)&v5 = "attdialect";
    *((_QWORD *)&v5 + 1) = 10;
    if ((unint64_t)result >= *(_QWORD *)(a1 + 16))
      result = sub_1C51140B0((void **)a1, &v5);
    else
      *result++ = v5;
    *(_QWORD *)(a1 + 8) = result;
  }
  return result;
}

uint64_t llvm::TargetInstrInfo::mergeOutliningCandidateAttributes(uint64_t a1, llvm::LLVMContext ***a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t FnAttribute;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = **(_QWORD **)(*(_QWORD *)(*a3 + 24) + 32);
  if (llvm::Function::hasFnAttribute(v5, "target-features", 0xFuLL))
  {
    FnAttribute = llvm::Function::getFnAttribute(v5, "target-features", 0xFuLL);
    llvm::Function::addFnAttr(a2, FnAttribute);
  }
  if (llvm::Function::hasFnAttribute(v5, "target-cpu", 0xAuLL))
  {
    v7 = llvm::Function::getFnAttribute(v5, "target-cpu", 0xAuLL);
    llvm::Function::addFnAttr(a2, v7);
  }
  v9 = *a3;
  v8 = a3[1];
  while (v9 != v8)
  {
    result = llvm::Function::hasFnAttribute(**(_QWORD **)(*(_QWORD *)(v9 + 24) + 32), 37);
    if ((result & 1) == 0)
      return result;
    v9 += 224;
  }
  return llvm::Function::addFnAttr((uint64_t)a2, 37);
}

BOOL llvm::TargetInstrInfo::isMBBSafeToOutlineFrom(llvm::TargetInstrInfo *this, llvm::MachineBasicBlock *a2, unsigned int *a3)
{
  uint64_t v4;
  unsigned __int16 **FirstNonDebugInstr;
  int v6;

  v4 = 1;
  FirstNonDebugInstr = (unsigned __int16 **)llvm::MachineBasicBlock::getFirstNonDebugInstr(a2, 1);
  if ((unsigned __int16 **)((char *)a2 + 48) != FirstNonDebugInstr)
  {
    v6 = *FirstNonDebugInstr[2];
    return v6 != 26 && v6 != 35;
  }
  return v4;
}

uint64_t llvm::RTLIB::getFPLibCall(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  switch(a1)
  {
    case 10:
      return a3;
    case 11:
      a3 = a4;
      break;
    case 12:
      a3 = a5;
      break;
    case 13:
      a3 = a6;
      break;
    default:
      if (a1 == 14)
        a3 = a7;
      else
        a3 = 637;
      break;
  }
  return a3;
}

uint64_t llvm::RTLIB::getFPTOSINT(char a1, uint64_t a2, char a3)
{
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  switch(a1)
  {
    case 9:
      v3 = (a3 - 5);
      v4 = v3 >= 3;
      v5 = v3 + 277;
      goto LABEL_9;
    case 10:
      v7 = (a3 - 5);
      v4 = v7 >= 3;
      v5 = v7 + 280;
      goto LABEL_9;
    case 11:
      v8 = (a3 - 5);
      v4 = v8 >= 3;
      v5 = v8 + 283;
      goto LABEL_9;
    case 12:
      v9 = (a3 - 5);
      v4 = v9 >= 3;
      v5 = v9 + 286;
      goto LABEL_9;
    case 13:
      v10 = (a3 - 5);
      v4 = v10 >= 3;
      v5 = v10 + 289;
      goto LABEL_9;
    case 14:
      v11 = (a3 - 5);
      v4 = v11 >= 3;
      v5 = v11 + 292;
LABEL_9:
      if (v4)
        result = 637;
      else
        result = v5;
      break;
    default:
      result = 637;
      break;
  }
  return result;
}

uint64_t llvm::RTLIB::getFPTOUINT(char a1, uint64_t a2, char a3)
{
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  switch(a1)
  {
    case 9:
      v3 = (a3 - 5);
      v4 = v3 >= 3;
      v5 = v3 + 295;
      goto LABEL_9;
    case 10:
      v7 = (a3 - 5);
      v4 = v7 >= 3;
      v5 = v7 + 298;
      goto LABEL_9;
    case 11:
      v8 = (a3 - 5);
      v4 = v8 >= 3;
      v5 = v8 + 301;
      goto LABEL_9;
    case 12:
      v9 = (a3 - 5);
      v4 = v9 >= 3;
      v5 = v9 + 304;
      goto LABEL_9;
    case 13:
      v10 = (a3 - 5);
      v4 = v10 >= 3;
      v5 = v10 + 307;
      goto LABEL_9;
    case 14:
      v11 = (a3 - 5);
      v4 = v11 >= 3;
      v5 = v11 + 310;
LABEL_9:
      if (v4)
        result = 637;
      else
        result = v5;
      break;
    default:
      result = 637;
      break;
  }
  return result;
}

uint64_t llvm::RTLIB::getSINTTOFP(char a1, uint64_t a2, char a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  BOOL v6;
  int v7;
  unsigned int v8;

  v3 = (a3 - 9);
  if (v3 >= 6)
    v4 = 637;
  else
    v4 = v3 + 325;
  if (v3 >= 6)
    v5 = 637;
  else
    v5 = v3 + 319;
  v6 = v3 >= 6;
  v7 = v3 + 313;
  if (v6)
    v7 = 637;
  if (a1 == 5)
    v8 = v7;
  else
    v8 = 637;
  if (a1 == 6)
    v8 = v5;
  if (a1 == 7)
    return v4;
  else
    return v8;
}

uint64_t llvm::RTLIB::getUINTTOFP(char a1, uint64_t a2, char a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  BOOL v6;
  int v7;
  unsigned int v8;

  v3 = (a3 - 9);
  if (v3 >= 6)
    v4 = 637;
  else
    v4 = v3 + 343;
  if (v3 >= 6)
    v5 = 637;
  else
    v5 = v3 + 337;
  v6 = v3 >= 6;
  v7 = v3 + 331;
  if (v6)
    v7 = 637;
  if (a1 == 5)
    v8 = v7;
  else
    v8 = 637;
  if (a1 == 6)
    v8 = v5;
  if (a1 == 7)
    return v4;
  else
    return v8;
}

uint64_t llvm::RTLIB::getPOWI(char a1)
{
  unsigned int v1;

  if (a1 == 14)
    v1 = 96;
  else
    v1 = 637;
  if (((a1 - 10) & 0xFC) != 0)
    return v1;
  else
    return (a1 - 10) + 92;
}

uint64_t llvm::RTLIB::getOUTLINE_ATOMIC(int a1, int a2, char a3)
{
  int v3;
  int v4;

  if ((a3 - 3) <= 4u
    && (v3 = a2 - 2, (a2 - 2) <= 5)
    && ((0x3Du >> v3) & 1) != 0
    && (v4 = a1 - 292, (a1 - 292) <= 8)
    && ((0x1CDu >> v4) & 1) != 0)
  {
    return *((unsigned int *)*(&off_1E814BEA0 + v4) + 4 * (a3 - 3) + qword_1C85FBD30[v3]);
  }
  else
  {
    return 637;
  }
}

uint64_t llvm::RTLIB::getSYNC(int a1, char a2)
{
  uint64_t result;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  result = 637;
  switch(a1)
  {
    case 292:
      v4 = (a2 - 3);
      v5 = v4 >= 5;
      v6 = v4 + 400;
      goto LABEL_14;
    case 294:
      v7 = (a2 - 3);
      v5 = v7 >= 5;
      v6 = v7 + 405;
      goto LABEL_14;
    case 295:
      v8 = (a2 - 3);
      v5 = v8 >= 5;
      v6 = v8 + 410;
      goto LABEL_14;
    case 296:
      v9 = (a2 - 3);
      v5 = v9 >= 5;
      v6 = v9 + 415;
      goto LABEL_14;
    case 297:
      v10 = (a2 - 3);
      v5 = v10 >= 5;
      v6 = v10 + 420;
      goto LABEL_14;
    case 299:
      v11 = (a2 - 3);
      v5 = v11 >= 5;
      v6 = v11 + 425;
      goto LABEL_14;
    case 300:
      v12 = (a2 - 3);
      v5 = v12 >= 5;
      v6 = v12 + 430;
      goto LABEL_14;
    case 301:
      v13 = (a2 - 3);
      v5 = v13 >= 5;
      v6 = v13 + 435;
      goto LABEL_14;
    case 302:
      v14 = (a2 - 3);
      v5 = v14 >= 5;
      v6 = v14 + 450;
      goto LABEL_14;
    case 303:
      v15 = (a2 - 3);
      v5 = v15 >= 5;
      v6 = v15 + 440;
      goto LABEL_14;
    case 304:
      v16 = (a2 - 3);
      v5 = v16 >= 5;
      v6 = v16 + 455;
      goto LABEL_14;
    case 305:
      v17 = (a2 - 3);
      v5 = v17 >= 5;
      v6 = v17 + 445;
LABEL_14:
      if (v5)
        result = 637;
      else
        result = v6;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::RTLIB::getMEMCPY_ELEMENT_UNORDERED_ATOMIC(llvm::RTLIB *this)
{
  char *v1;
  uint64_t result;

  v1 = (char *)this - 1;
  result = 383;
  switch((unint64_t)v1)
  {
    case 0uLL:
      return result;
    case 1uLL:
      result = 384;
      break;
    case 3uLL:
      result = 385;
      break;
    case 7uLL:
      result = 386;
      break;
    default:
      result = 637;
      break;
  }
  return result;
}

uint64_t llvm::RTLIB::getMEMMOVE_ELEMENT_UNORDERED_ATOMIC(llvm::RTLIB *this)
{
  char *v1;
  uint64_t result;

  v1 = (char *)this - 1;
  result = 388;
  switch((unint64_t)v1)
  {
    case 0uLL:
      return result;
    case 1uLL:
      result = 389;
      break;
    case 3uLL:
      result = 390;
      break;
    case 7uLL:
      result = 391;
      break;
    default:
      result = 637;
      break;
  }
  return result;
}

uint64_t llvm::RTLIB::getMEMSET_ELEMENT_UNORDERED_ATOMIC(llvm::RTLIB *this)
{
  char *v1;
  uint64_t result;

  v1 = (char *)this - 1;
  result = 393;
  switch((unint64_t)v1)
  {
    case 0uLL:
      return result;
    case 1uLL:
      result = 394;
      break;
    case 3uLL:
      result = 395;
      break;
    case 7uLL:
      result = 396;
      break;
    default:
      result = 637;
      break;
  }
  return result;
}

uint64_t llvm::TargetLoweringBase::getScalarShiftAmountTy(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v3;

  result = 0;
  v3 = *(_DWORD *)(*(_QWORD *)(a2 + 232) + 4);
  if (v3 > 31)
  {
    switch(v3)
    {
      case 32:
        return 5;
      case 64:
        return 6;
      case 128:
        return 7;
    }
  }
  else
  {
    switch(v3)
    {
      case 1:
        return 2;
      case 8:
        return 3;
      case 16:
        return 4;
    }
  }
  return result;
}

unint64_t llvm::TargetLoweringBase::getShiftAmountTy(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned __int8 v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  const char *v9;
  unint64_t v10;
  unsigned int ExtendedSizeInBits;
  const char *v12;
  unsigned int v13;
  unsigned __int8 v15;
  _QWORD v16[2];

  v5 = a2;
  v16[0] = a2;
  v16[1] = a3;
  if ((_BYTE)a2)
  {
    if ((a2 - 15) < 0x9Cu)
    {
LABEL_3:
      v6 = a2 & 0xFFFFFFFFFFFFFF00;
      return v6 | v5;
    }
  }
  else if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
  {
    goto LABEL_3;
  }
  v7 = *a1;
  if (a5)
    v8 = (*(uint64_t (**)(void))(v7 + 56))();
  else
    v8 = (*(uint64_t (**)(void))(v7 + 32))();
  v15 = v8;
  v10 = sub_1C47A8C74(&v15);
  if ((_DWORD)v9 == 1)
  if (v5)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)v16);
  else
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v16);
  v13 = ExtendedSizeInBits;
  if ((_DWORD)v12 == 1)
  v6 = 0;
  if (v10 >= 32 - __clz(v13 - 1))
    v5 = v15;
  else
    v5 = 5;
  return v6 | v5;
}

BOOL llvm::TargetLoweringBase::canOpTrap(uint64_t a1, int a2)
{
  return (a2 - 59) < 4;
}

uint64_t llvm::TargetLoweringBase::setJumpIsExpensive(uint64_t this, char a2)
{
  if (!word_1ED8004B8)
    *(_BYTE *)(this + 48) = a2;
  return this;
}

unint64_t sub_1C62183CC(uint64_t a1, llvm::LLVMContext *a2)
{
  int v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t EVT;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = sub_1C52B71D4((unsigned __int8 *)a1);
  if ((v4 & (v4 - 1)) == 0)
    return *(_QWORD *)a1;
  v6 = sub_1C52B71D4((unsigned __int8 *)a1);
  v8 = (1 << -(char)__clz(v6 - 1));
  v9 = v6 & 0xFFFFFFFF00000000;
  if (*(_BYTE *)a1)
  {
    LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)a1);
    v11 = 0;
    v12 = 0;
  }
  else
  {
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(*(_QWORD *)(a1 + 8) + 24), 0, v7);
    v12 = v13;
    v11 = EVT & 0xFFFFFFFFFFFFFF00;
  }
  return sub_1C47AC578(a2, v11 | EVT, v12, (llvm::Type *)(v8 | ((unint64_t)(v9 == 0x100000000) << 32)));
}

uint64_t llvm::TargetLoweringBase::getSetCCResultType(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, a2, 0);
}

uint64_t llvm::TargetLoweringBase::getCmpLibcallReturnType(llvm::TargetLoweringBase *this)
{
  return 5;
}

uint64_t llvm::TargetLoweringBase::getByValTypeAlignment(llvm::TargetLoweringBase *this, llvm::Type *a2, const llvm::DataLayout *a3)
{
  char v3;

  llvm::DataLayout::getABITypeAlign((uint64_t)a3, (uint64_t)a2);
  return 1 << v3;
}

uint64_t llvm::TargetLoweringBase::allowsMemoryAccessForAlignment(uint64_t a1, llvm::LLVMContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, uint64_t a8, _BYTE *a9)
{
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v18 = a4;
  v19 = a5;
  llvm::EVT::getTypeForEVT((llvm::EVT *)&v18, a2);
  v15 = v14;
  if (!sub_1C6218588((llvm::EVT *)&v18))
  {
    llvm::DataLayout::getABITypeAlign(a3, v15);
    if (a7 < v16)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _BYTE *))(*(_QWORD *)a1 + 648))(a1, v18, v19, a6, a7, a8, a9);
  }
  result = 1;
  if (a9)
    *a9 = 1;
  return result;
}

BOOL sub_1C6218588(llvm::EVT *this)
{
  uint64_t ExtendedSizeInBits;
  const char *v4;
  uint64_t v5;

  if (*(_BYTE *)this)
  {
    if (*(unsigned __int8 *)this - 120 < 0x33)
      return 0;
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)this);
  }
  else
  {
    if (llvm::EVT::isExtendedScalableVector(this))
      return 0;
    ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits(this);
  }
  if ((_DWORD)v4 == 1)
  {
    v5 = ExtendedSizeInBits;
    ExtendedSizeInBits = v5;
  }
  return ExtendedSizeInBits == 0;
}

uint64_t llvm::TargetLoweringBase::allowsMemoryAccessForAlignment(uint64_t a1, llvm::LLVMContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v7;

  v7 = (1 << *(_BYTE *)(a6 + 34)) | *(_QWORD *)(a6 + 8);
  return llvm::TargetLoweringBase::allowsMemoryAccessForAlignment(a1, a2, a3, a4, a5, *(unsigned int *)(a6 + 16), 63 - __clz(v7 & -v7), *(unsigned __int16 *)(a6 + 32), a7);
}

uint64_t llvm::TargetLoweringBase::allowsMemoryAccess(uint64_t a1, llvm::LLVMContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, uint64_t a8, _BYTE *a9)
{
  return llvm::TargetLoweringBase::allowsMemoryAccessForAlignment(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t llvm::TargetLoweringBase::allowsMemoryAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  v7 = (1 << *(_BYTE *)(a6 + 34)) | *(_QWORD *)(a6 + 8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 664))(a1, a2, a3, a4, a5, *(unsigned int *)(a6 + 16), (63 - __clz(v7 & -v7)), *(unsigned __int16 *)(a6 + 32), a7);
}

uint64_t llvm::TargetLoweringBase::allowsMemoryAccess(uint64_t a1, llvm::LLVMContext *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t ApproximateEVTForLLT;
  uint64_t v12;
  uint64_t v13;

  ApproximateEVTForLLT = llvm::getApproximateEVTForLLT(a4, a3, a2);
  v12 = (1 << *(_BYTE *)(a5 + 34)) | *(_QWORD *)(a5 + 8);
  return (*(uint64_t (**)(uint64_t, llvm::LLVMContext *, uint64_t, unint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 664))(a1, a2, a3, ApproximateEVTForLLT, v13, *(unsigned int *)(a5 + 16), (63 - __clz(v12 & -v12)), *(unsigned __int16 *)(a5 + 32), a6);
}

_QWORD *llvm::TargetLoweringBase::getDefaultSafeStackPointerLocation(llvm::TargetLoweringBase *this, llvm::IRBuilderBase *a2, int a3)
{
  uint64_t v4;
  uint64_t NamedValue;
  _QWORD *v6;
  const char *v7;
  char v8;
  uint64_t *v9;
  llvm::PointerType *v10;
  char v11;
  const char *v13;
  __int16 v14;
  const char *v15;
  char v16;
  char v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22[4];
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  _QWORD v26[4];
  __int16 v27;

  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 6) + 56) + 40);
  NamedValue = llvm::Module::getNamedValue(v4, "__safestack_unsafe_stack_ptr", 0x1CuLL);
  if (NamedValue && (v6 = (_QWORD *)NamedValue, *(_BYTE *)(NamedValue + 16) == 3))
  {
    if (*(_QWORD *)(NamedValue + 24) != llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)v4 + 1912), 0))
    {
      v24[0] = (uint64_t)"__safestack_unsafe_stack_ptr";
      v25 = 259;
      v22[0] = (uint64_t)" must have void* type";
      v23 = 259;
      v9 = v22;
      goto LABEL_16;
    }
    if (((*((_BYTE *)v6 + 33) & 0x1C) != 0) != a3)
    {
      v20 = "__safestack_unsafe_stack_ptr";
      v21 = 259;
      v18 = " must ";
      v19 = 259;
      sub_1C4825FE4((uint64_t *)&v20, (uint64_t *)&v18, (uint64_t)v22);
      v7 = "";
      if (!a3)
        v7 = "not ";
      v8 = 1;
      v17 = 1;
      if (*v7)
      {
        v15 = v7;
        v8 = 3;
      }
      v16 = v8;
      sub_1C6131AAC(v22, (uint64_t *)&v15, (uint64_t)v24);
      v13 = "be thread-local";
      v14 = 259;
      v9 = (uint64_t *)&v13;
LABEL_16:
      sub_1C6131AAC(v24, v9, (uint64_t)v26);
      llvm::report_fatal_error((uint64_t)v26, 1);
    }
  }
  else
  {
    v10 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)v4 + 1912), 0);
    if (a3)
      v11 = 3;
    else
      v11 = 0;
    v6 = llvm::User::operator new((llvm::User *)0x58, 1u);
    v26[0] = "__safestack_unsafe_stack_ptr";
    v27 = 259;
    llvm::GlobalVariable::GlobalVariable((uint64_t)v6, v4, v10, 0, 0, 0, (uint64_t)v26, 0, v11, 0, 0);
  }
  return v6;
}

_QWORD *llvm::TargetLoweringBase::getSafeStackPointerLocation(llvm::TargetLoweringBase *this, llvm::IRBuilderBase *a2)
{
  uint64_t v3;
  llvm::Type *v4;
  uint64_t **PointerTo;
  uint64_t **v6;
  uint64_t v7;
  _BYTE v9[32];
  __int16 v10;

  if (*(_DWORD *)(*((_QWORD *)this + 1) + 488) != 11)
    return llvm::TargetLoweringBase::getDefaultSafeStackPointerLocation(this, a2, 1);
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 6) + 56) + 40);
  v4 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)v3 + 1912), 0);
  PointerTo = (uint64_t **)llvm::Type::getPointerTo(v4, 0);
  v6 = (uint64_t **)sub_1C6210688(v3, "__safestack_pointer_address", 0x1BuLL, 0, PointerTo);
  v10 = 257;
  return (_QWORD *)sub_1C4774778((uint64_t *)a2, v6, v7, 0, 0, (uint64_t)v9, 0);
}

uint64_t llvm::TargetLoweringBase::insertSSPDeclarations(llvm::TargetMachine **this, llvm::Module *a2)
{
  uint64_t result;
  _QWORD *v5;
  llvm::PointerType *v6;
  llvm::TargetMachine *v7;
  int v8;
  const char *v9;
  __int16 v10;

  result = llvm::Module::getNamedValue((uint64_t)a2, "__stack_chk_guard", 0x11uLL);
  if (!result)
  {
    v5 = llvm::User::operator new((llvm::User *)0x58, 1u);
    v6 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)a2 + 1912), 0);
    v9 = "__stack_chk_guard";
    v10 = 259;
    llvm::GlobalVariable::GlobalVariable((uint64_t)v5, (uint64_t)a2, v6, 0, 0, 0, (uint64_t)&v9, 0, 0, 0, 0);
    result = llvm::TargetMachine::getRelocationModel(this[1]);
    if (!(_DWORD)result)
    {
      v7 = this[1];
      v8 = *((_DWORD *)v7 + 121);
      if (v8 != 5 && (v8 != 15 || *((_DWORD *)v7 + 122) != 1))
        *((_DWORD *)v5 + 8) |= 0x4000u;
    }
  }
  return result;
}

uint64_t llvm::TargetLoweringBase::getSDagStackGuard(llvm::TargetLoweringBase *this, const llvm::Module *a2)
{
  return llvm::Module::getNamedValue((uint64_t)a2, "__stack_chk_guard", 0x11uLL);
}

uint64_t llvm::TargetLoweringBase::getSSPStackGuardCheck(llvm::TargetLoweringBase *this, const llvm::Module *a2)
{
  return 0;
}

uint64_t llvm::TargetLoweringBase::getMinimumJumpTableEntries(llvm::TargetLoweringBase *this)
{
  return dword_1ED8005F0;
}

BOOL llvm::TargetLoweringBase::isJumpTableRelative(llvm::TargetMachine **this)
{
  return llvm::TargetMachine::isPositionIndependent(this[1]);
}

uint64_t llvm::TargetLoweringBase::getPrefLoopAlignment(llvm::TargetLoweringBase *this, llvm::MachineLoop *a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(*((_QWORD *)this + 1) + 1096);
  if ((_DWORD)v2)
    return __clz(v2) ^ 0x3F;
  else
    return *((unsigned __int8 *)this + 71);
}

uint64_t llvm::TargetLoweringBase::getMaxPermittedBytesForAlignment(llvm::TargetLoweringBase *this, llvm::MachineBasicBlock *a2)
{
  return *((unsigned int *)this + 18);
}

uint64_t llvm::TargetLoweringBase::getRecipEstimateSqrtEnabled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t ValueAsString;
  size_t v7;
  uint64_t FnAttribute;

  FnAttribute = llvm::Function::getFnAttribute(*a4, "reciprocal-estimates", 0x14uLL);
  ValueAsString = llvm::Attribute::getValueAsString((llvm::Attribute *)&FnAttribute);
  return sub_1C52B8C34(1, a2, a3, ValueAsString, v7);
}

uint64_t llvm::TargetLoweringBase::getRecipEstimateDivEnabled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t ValueAsString;
  size_t v7;
  uint64_t FnAttribute;

  FnAttribute = llvm::Function::getFnAttribute(*a4, "reciprocal-estimates", 0x14uLL);
  ValueAsString = llvm::Attribute::getValueAsString((llvm::Attribute *)&FnAttribute);
  return sub_1C52B8C34(0, a2, a3, ValueAsString, v7);
}

uint64_t llvm::TargetLoweringBase::getSqrtRefinementSteps(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned __int16 *ValueAsString;
  size_t v7;
  uint64_t FnAttribute;

  FnAttribute = llvm::Function::getFnAttribute(*a4, "reciprocal-estimates", 0x14uLL);
  ValueAsString = (unsigned __int16 *)llvm::Attribute::getValueAsString((llvm::Attribute *)&FnAttribute);
  return sub_1C52B8F60(1, a2, a3, ValueAsString, v7);
}

uint64_t llvm::TargetLoweringBase::getDivRefinementSteps(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned __int16 *ValueAsString;
  size_t v7;
  uint64_t FnAttribute;

  FnAttribute = llvm::Function::getFnAttribute(*a4, "reciprocal-estimates", 0x14uLL);
  ValueAsString = (unsigned __int16 *)llvm::Attribute::getValueAsString((llvm::Attribute *)&FnAttribute);
  return sub_1C52B8F60(0, a2, a3, ValueAsString, v7);
}

unsigned __int8 **llvm::TargetLoweringBase::emitLeadingFence(int a1, uint64_t *a2, llvm::Instruction *this, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  llvm::Instruction *v9;
  _BYTE v10[32];
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  if ((unint64_t)a4 - 5 > 2)
    return 0;
  v12 = v4;
  v13 = v5;
  v6 = a4;
  if (!llvm::Instruction::hasAtomicStore(this))
    return 0;
  v11 = 257;
  v9 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x40, 0);
  llvm::FenceInst::FenceInst(v9, a2[8], v6, 1, 0);
  return sub_1C61D76F0(a2, (unsigned __int8 **)v9, (uint64_t)v10);
}

unsigned __int8 **llvm::TargetLoweringBase::emitTrailingFence(uint64_t a1, uint64_t *a2, uint64_t a3, __int16 a4)
{
  llvm::Instruction *v7;
  _BYTE v8[32];
  __int16 v9;

  if (((0xD0uLL >> a4) & 1) == 0)
    return 0;
  v9 = 257;
  v7 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x40, 0);
  llvm::FenceInst::FenceInst(v7, a2[8], a4, 1, 0);
  return sub_1C61D76F0(a2, (unsigned __int8 **)v7, (uint64_t)v8);
}

uint64_t llvm::TargetLoweringBase::shouldLocalize(llvm::TargetLoweringBase *this, const llvm::MachineInstr *a2, const llvm::TargetTransformInfo *a3)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v6;
  int v7;

  result = 0;
  v4 = **((unsigned __int16 **)a2 + 2) - 70;
  if (v4 <= 0x33)
  {
    if (((1 << (**((_WORD **)a2 + 2) - 70)) & 0xC000000000801) != 0)
    {
      return 1;
    }
    else if (v4 == 1)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 32) + 40);
      result = llvm::TargetTransformInfo::getGISelRematGlobalCost(a3);
      if ((_DWORD)result != 1)
      {
        if ((_DWORD)result == 2)
          v7 = 2;
        else
          v7 = 1;
        return llvm::MachineRegisterInfo::hasAtMostUserInstrs(v6, *(_DWORD *)(*((_QWORD *)a2 + 4) + 4), v7);
      }
    }
  }
  return result;
}

void sub_1C6218E98(uint64_t a1)
{
  sub_1C6132EC4(a1);
}

void sub_1C6218EA4()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6218EBC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, a2, 0);
}

uint64_t sub_1C6218ECC()
{
  return 0;
}

uint64_t sub_1C6218ED4()
{
  return 0;
}

uint64_t sub_1C6218EDC()
{
  return 0;
}

uint64_t sub_1C6218EE4()
{
  return 1;
}

uint64_t sub_1C6218EEC()
{
  return 0;
}

uint64_t sub_1C6218EF4()
{
  return 0;
}

char *sub_1C6218EFC(uint64_t a1, unsigned int a2, unsigned __int8 a3, _QWORD **a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v13;

  v6 = sub_1C52B9A50(a1, &v13, a2, a3);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v7 + 28) = **a4;
    v7[36] = 0;
    v9 = v13;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v8 = (uint64_t)v7;
    v10 = **(_QWORD **)a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *(_QWORD *)a1 = v10;
      v11 = (uint64_t *)*v8;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v11);
    ++*(_QWORD *)(a1 + 16);
  }
  return v7;
}

void sub_1C6218FA8(char **a1, __n128 *a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)qword_1ED8004B0, 0, 0);
  byte_1ED800530 = 0;
  qword_1ED800538 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED800540 = 0;
  qword_1ED8004B0[0] = (uint64_t)&unk_1E819E898;
  qword_1ED800548 = (uint64_t)&off_1E819E9A0;
  qword_1ED800550 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED800568 = (uint64_t)&qword_1ED800550;
  sub_1C52B9C44(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED8004B0);
}

void sub_1C621904C(int **a1, _WORD *a2, __int128 *a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED800570, 0, 0);
  dword_1ED8005F0 = 0;
  qword_1ED8005F8 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED800600 = 0;
  qword_1ED800570 = (uint64_t)&unk_1E819E3B0;
  qword_1ED800608 = (uint64_t)&unk_1E819E2C0;
  qword_1ED800610 = (uint64_t)&off_1E7F95260;
  qword_1ED800628 = (uint64_t)&qword_1ED800610;
  llvm::cl::Option::setArgStr(v6, "min-jump-table-entries", 0x16uLL);
  dword_1ED8005F0 = **a1;
  byte_1ED800604 = 1;
  dword_1ED800600 = dword_1ED8005F0;
  word_1ED80057A = (32 * (*a2 & 3)) | word_1ED80057A & 0xFF9F;
  xmmword_1ED800590 = *a3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED800570);
}

void sub_1C6219128(int **a1, _WORD *a2, __n128 *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED800630, 0, 0);
  dword_1ED8006B0 = 0;
  qword_1ED8006B8 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED8006C0 = 0;
  qword_1ED800630 = (uint64_t)&unk_1E819E3B0;
  qword_1ED8006C8 = (uint64_t)&unk_1E819E2C0;
  qword_1ED8006D0 = (uint64_t)&off_1E7F95260;
  qword_1ED8006E8 = (uint64_t)&qword_1ED8006D0;
  sub_1C52B9CC8(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED800630);
}

uint64_t llvm::TargetLoweringObjectFileMachO::getStaticDtorSection(llvm::TargetLoweringObjectFileMachO *this, unsigned int a2, const llvm::MCSymbol *a3)
{
  if ((*(_BYTE *)(*((_QWORD *)this + 123) + 1032) & 2) != 0)
    llvm::report_fatal_error((llvm *)"@llvm.global_dtors should have been lowered already", (const char *)1);
  return *((_QWORD *)this + 122);
}

uint64_t llvm::TargetLoweringObjectFileMachO::getSectionForConstant(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;

  if (a3 > 0x12u)
  {
    if (a3 - 19 <= 1)
    {
      v3 = a1 + 576;
      return *(_QWORD *)v3;
    }
LABEL_11:
    v3 = a1 + 48;
    return *(_QWORD *)v3;
  }
  if (a3 == 8)
  {
    v3 = a1 + 616;
    return *(_QWORD *)v3;
  }
  if (a3 == 9)
  {
    v3 = a1 + 624;
    return *(_QWORD *)v3;
  }
  if (a3 != 10)
    goto LABEL_11;
  v3 = a1 + 632;
  return *(_QWORD *)v3;
}

unint64_t llvm::TargetLoweringObjectFileMachO::getTTypeGlobalReference(llvm::TargetLoweringObjectFileMachO *this, const llvm::GlobalValue *a2, char a3, const llvm::TargetMachine *a4, llvm::MachineModuleInfo *a5, llvm::MCStreamer *a6)
{
  uint64_t v12;
  unint64_t SymbolWithGlobalValueBase;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;

  if ((a3 & 0x80) == 0)
    return llvm::TargetLoweringObjectFile::getTTypeGlobalReference(this, a2, a3, a4, a5, a6);
  v12 = sub_1C62193F4((uint64_t)a5);
  SymbolWithGlobalValueBase = llvm::TargetLoweringObjectFile::getSymbolWithGlobalValueBase((uint64_t)this, a2, "$non_lazy_ptr", 13, (uint64_t)a4);
  v16 = SymbolWithGlobalValueBase;
  v14 = sub_1C617C470(v12 + 8, (uint64_t *)&v16);
  if (v14[1] <= 7uLL)
    v14[1] = llvm::TargetMachine::getSymbol(a4, a2) & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                            * ((*((_DWORD *)a2 + 8) & 0xFu) - 9 < 0xFFFFFFFE));
  v15 = llvm::MCSymbolRefExpr::create(SymbolWithGlobalValueBase, 0, *((_QWORD *)this + 105), 0);
  return llvm::TargetLoweringObjectFile::getTTypeReference((uint64_t)this, v15, a3 & 0x7F, (uint64_t)a6);
}

uint64_t sub_1C62193F4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 2072);
  if (!result)
  {
    result = operator new();
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = &off_1E81457E8;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_DWORD *)(result + 72) = 0;
    *(_QWORD *)(a1 + 2072) = result;
  }
  return result;
}

unint64_t llvm::TargetLoweringObjectFileMachO::getCFIPersonalitySymbol(llvm::TargetLoweringObjectFileMachO *this, const llvm::GlobalValue *a2, const llvm::TargetMachine *a3, llvm::MachineModuleInfo *a4)
{
  uint64_t v7;
  unint64_t SymbolWithGlobalValueBase;
  _QWORD *v9;
  unint64_t v11;

  v7 = sub_1C62193F4((uint64_t)a4);
  SymbolWithGlobalValueBase = llvm::TargetLoweringObjectFile::getSymbolWithGlobalValueBase((uint64_t)this, a2, "$non_lazy_ptr", 13, (uint64_t)a3);
  v11 = SymbolWithGlobalValueBase;
  v9 = sub_1C617C470(v7 + 8, (uint64_t *)&v11);
  if (v9[1] <= 7uLL)
    v9[1] = llvm::TargetMachine::getSymbol(a3, a2) & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                           * ((*((_DWORD *)a2 + 8) & 0xFu) - 9 < 0xFFFFFFFE));
  return SymbolWithGlobalValueBase;
}

unint64_t llvm::TargetLoweringObjectFileMachO::getIndirectSymViaGOTPCRel(llvm::TargetLoweringObjectFileMachO *this, const llvm::GlobalValue *a2, unint64_t a3, const llvm::MCValue *a4, uint64_t a5, llvm::MachineModuleInfo *a6, llvm::MCStreamer *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t Symbol;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30[4];
  __int16 v31;
  void *v32;
  __int128 v33;
  _QWORD v34[17];

  v34[16] = *MEMORY[0x1E0C80C00];
  v12 = sub_1C62193F4((uint64_t)a6);
  v13 = *((_QWORD *)this + 105);
  v14 = *((_QWORD *)a4 + 2);
  v15 = *(_QWORD *)(*((_QWORD *)a4 + 1) + 16);
  v32 = v34;
  v16 = *(int *)(*((_QWORD *)a6 + 258) + 300);
  v17 = qword_1C85FC028[v16];
  v33 = xmmword_1C85F20B0;
  sub_1C52C2F74(&v32, *((_BYTE **)&off_1E814C578 + v16), (_BYTE *)(*((_QWORD *)&off_1E814C578 + v16) + v17));
  if ((*(_BYTE *)a3 & 4) != 0)
  {
    v20 = *(_QWORD **)(a3 - 8);
    v21 = *v20;
    v18 = v20 + 2;
    v19 = v21;
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  sub_1C52C2F74(&v32, v18, &v18[v19]);
  sub_1C52C2F74(&v32, "$non_lazy_ptr", "");
  v31 = 261;
  v30[0] = (uint64_t)v32;
  v30[1] = v33;
  Symbol = llvm::MCContext::getOrCreateSymbol(v13, (uint64_t)v30);
  v30[0] = Symbol;
  v23 = sub_1C617C470(v12 + 8, v30);
  if (v23[1] <= 7uLL)
    v23[1] = a3 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((*((_DWORD *)a2 + 8) & 0xFu) - 9 < 0xFFFFFFFE));
  v24 = llvm::MCSymbolRefExpr::create(v15, 0, v13, 0);
  v25 = llvm::MCSymbolRefExpr::create(Symbol, 0, v13, 0);
  if (v14)
  {
    v26 = sub_1C484358C(v13 + 192, 24, 3);
    *(_BYTE *)v26 = 1;
    *(_DWORD *)(v26 + 1) = *(unsigned __int8 *)(v26 + 4) << 24;
    *(_QWORD *)(v26 + 8) = 0;
    *(_QWORD *)(v26 + 16) = -v14;
    v27 = sub_1C484358C(v13 + 192, 32, 3);
    *(_BYTE *)v27 = 0;
    *(_DWORD *)(v27 + 1) = *(unsigned __int8 *)(v27 + 4) << 24;
    *(_QWORD *)(v27 + 8) = 0;
    *(_QWORD *)(v27 + 16) = v24;
    *(_QWORD *)(v27 + 24) = v26;
    v24 = v27;
  }
  v28 = sub_1C484358C(v13 + 192, 32, 3);
  *(_BYTE *)v28 = 0;
  *(_DWORD *)(v28 + 1) = (*(unsigned __int8 *)(v28 + 4) << 24) | 0x12;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = v25;
  *(_QWORD *)(v28 + 24) = v24;
  if (v32 != v34)
    free(v32);
  return v28;
}

BOOL llvm::TargetLoweringObjectFileXCOFF::ShouldEmitEHBlock(llvm::TargetLoweringObjectFileXCOFF *this, const llvm::MachineFunction *a2)
{
  _WORD *v3;
  llvm::Value *PersonalityFn;
  unsigned __int8 *v5;
  const llvm::Value *v6;

  if (*((_QWORD *)this + 64) != *((_QWORD *)this + 65))
    return 1;
  v3 = *(_WORD **)this;
  if ((*(_WORD *)(*(_QWORD *)this + 18) & 8) == 0
    || !llvm::AttributeList::getUWTableKind((llvm::AttributeList *)(v3 + 56))
    && llvm::Function::hasFnAttribute((uint64_t)v3, 37)
    && (v3[9] & 8) == 0)
  {
    return 0;
  }
  PersonalityFn = (llvm::Value *)llvm::Function::getPersonalityFn((llvm::Function *)v3);
  v5 = (unsigned __int8 *)llvm::Value::stripPointerCasts(PersonalityFn);
  if (v5[16] >= 4u)
    v5 = 0;
  return llvm::classifyEHPersonality((llvm::Value *)v5, v6) == 0;
}

unint64_t llvm::TargetLoweringObjectFileXCOFF::getEHInfoTableSymbol(llvm::TargetLoweringObjectFileXCOFF *this, const llvm::MachineFunction *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8[4];
  __int16 v9;
  const char *v10;
  __int16 v11;
  _BYTE v12[40];

  v2 = *((_QWORD *)this + 4);
  v3 = *(_QWORD *)(v2 + 2056);
  v4 = v2 + 8;
  if (v3)
    v5 = v3;
  else
    v5 = v4;
  v10 = "__ehinfo.";
  v11 = 259;
  v6 = *((_DWORD *)this + 84);
  v9 = 264;
  LODWORD(v8[0]) = v6;
  sub_1C4825FE4((uint64_t *)&v10, v8, (uint64_t)v12);
  return llvm::MCContext::getOrCreateSymbol(v5, (uint64_t)v12);
}

uint64_t sub_1C6219854()
{
  return 4;
}

uint64_t sub_1C621985C()
{
  return 0;
}

uint64_t sub_1C6219864()
{
  return 0;
}

uint64_t sub_1C621986C()
{
  return 0;
}

uint64_t sub_1C6219874()
{
  return 0;
}

uint64_t sub_1C621987C()
{
  return 0;
}

uint64_t sub_1C6219884()
{
  return 0;
}

uint64_t sub_1C621988C()
{
  return 0;
}

void sub_1C6219898(llvm::TargetLoweringObjectFile *a1)
{
  llvm::TargetLoweringObjectFile::~TargetLoweringObjectFile(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62198BC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t sub_1C62198C4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 968);
}

uint64_t sub_1C62198CC()
{
  return 0;
}

uint64_t sub_1C62198D4()
{
  return 0;
}

uint64_t sub_1C62198E0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 976);
}

const char *llvm::TargetPassConfig::setStartStopPasses(llvm::TargetPassConfig *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  size_t v17;
  const char *result;
  const char *v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  uint64_t v26[4];
  __int16 v27;
  uint64_t v28[5];
  uint64_t v29[5];
  uint64_t v30;
  size_t v31;
  int v32;

  if (byte_1ED8029F7 >= 0)
    v2 = byte_1ED8029F7 & 0x7F;
  else
    v2 = qword_1ED8029E8;
  if (byte_1ED8029F7 >= 0)
    v3 = &qword_1ED8029E0;
  else
    v3 = (uint64_t *)qword_1ED8029E0;
  sub_1C52C38B0((uint64_t)&v30, (uint64_t)v3, v2);
  v4 = v30;
  v5 = v31;
  *((_DWORD *)this + 18) = v32;
  if (byte_1ED80290F >= 0)
    v6 = byte_1ED80290F & 0x7F;
  else
    v6 = qword_1ED802900;
  if (byte_1ED80290F >= 0)
    v7 = &qword_1ED8028F8;
  else
    v7 = (uint64_t *)qword_1ED8028F8;
  sub_1C52C38B0((uint64_t)&v30, (uint64_t)v7, v6);
  v8 = v30;
  v9 = v31;
  *((_DWORD *)this + 20) = v32;
  if (byte_1ED802BC7 >= 0)
    v10 = byte_1ED802BC7 & 0x7F;
  else
    v10 = qword_1ED802BB8;
  if (byte_1ED802BC7 >= 0)
    v11 = &qword_1ED802BB0;
  else
    v11 = (uint64_t *)qword_1ED802BB0;
  sub_1C52C38B0((uint64_t)&v30, (uint64_t)v11, v10);
  v12 = v30;
  v13 = v31;
  *((_DWORD *)this + 22) = v32;
  if (byte_1ED802ADF >= 0)
    v14 = byte_1ED802ADF & 0x7F;
  else
    v14 = qword_1ED802AD0;
  if (byte_1ED802ADF >= 0)
    v15 = &qword_1ED802AC8;
  else
    v15 = (uint64_t *)qword_1ED802AC8;
  sub_1C52C38B0((uint64_t)&v30, (uint64_t)v15, v14);
  v16 = v30;
  v17 = v31;
  *((_DWORD *)this + 24) = v32;
  *((_QWORD *)this + 5) = sub_1C52C3A04(v4, v5);
  *((_QWORD *)this + 6) = sub_1C52C3A04(v8, v9);
  *((_QWORD *)this + 7) = sub_1C52C3A04(v12, v13);
  result = sub_1C52C3A04(v16, v17);
  *((_QWORD *)this + 8) = result;
  if (*((_QWORD *)this + 5) && *((_QWORD *)this + 6))
  {
    v26[0] = (uint64_t)"start-before";
    v27 = 259;
    v24[0] = (uint64_t)" and ";
    v25 = 259;
    sub_1C6131AAC(v26, v24, (uint64_t)v28);
    v19 = "start-after";
    goto LABEL_32;
  }
  if (*((_QWORD *)this + 7) && result)
  {
    v26[0] = (uint64_t)"stop-before";
    v27 = 259;
    v24[0] = (uint64_t)" and ";
    v25 = 259;
    sub_1C6131AAC(v26, v24, (uint64_t)v28);
    v19 = "stop-after";
LABEL_32:
    v22 = v19;
    v23 = 259;
    sub_1C6131AAC(v28, (uint64_t *)&v22, (uint64_t)v29);
    v20 = " specified!";
    v21 = 259;
    sub_1C6131AAC(v29, (uint64_t *)&v20, (uint64_t)&v30);
    llvm::report_fatal_error((uint64_t)&v30, 1);
  }
  *((_BYTE *)this + 104) = *(_OWORD *)((char *)this + 40) == 0;
  return result;
}

llvm::TargetPassConfig *llvm::TargetPassConfig::TargetPassConfig(llvm::TargetPassConfig *this, llvm::LLVMTargetMachine *a2, llvm::legacy::PassManagerBase *a3)
{
  uint64_t v5;
  llvm::PassRegistry *v6;
  llvm::PassRegistry *v8;
  llvm::PassRegistry *v10;
  int v12;
  int v13;
  int v14;
  int v16;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::TargetPassConfig::ID;
  *((_DWORD *)this + 6) = 4;
  *(_QWORD *)this = &off_1E814C5C8;
  *((_QWORD *)this + 4) = a3;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 16777217;
  *((_QWORD *)this + 14) = a2;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0x10000;
  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_QWORD *)(v5 + 128) = 0;
  *(_QWORD *)(v5 + 24) = v5 + 40;
  *(_DWORD *)(v5 + 36) = 4;
  *((_QWORD *)this + 15) = v5;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  llvm::initializeCodeGen((llvm *)qword_1ED830BC0[0], v6);
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  llvm::initializeBasicAAWrapperPassPass((llvm *)qword_1ED830BC0[0], v8);
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  llvm::initializeAAResultsWrapperPassPass((llvm *)qword_1ED830BC0[0], v10);
  if (!word_1ED800970)
  {
    v12 = (*(uint64_t (**)(llvm::LLVMTargetMachine *))(*(_QWORD *)a2 + 192))(a2);
    v13 = *((_DWORD *)a2 + 260);
    if (v12 | ((v13 & 0x80000u) >> 19))
      v14 = 0x80000;
    else
      v14 = 0;
    *((_DWORD *)a2 + 260) = v14 | v13 & 0xFFF7FFFF;
    if (!(v12 & 1 | ((v13 & 0x80000) != 0)))
      goto LABEL_13;
    goto LABEL_12;
  }
  v16 = byte_1ED8009E8;
  *((_DWORD *)a2 + 260) = *((_DWORD *)a2 + 260) & 0xFFF7FFFF | (byte_1ED8009E8 << 19);
  if (v16)
LABEL_12:
    *((_BYTE *)this + 131) = 1;
LABEL_13:
  if (word_1ED802E78)
    *((_DWORD *)a2 + 256) = dword_1ED802EF0;
  llvm::TargetPassConfig::setStartStopPasses(this);
  return this;
}

llvm::TargetPassConfig *llvm::LLVMTargetMachine::createPassConfig(llvm::LLVMTargetMachine *this, llvm::legacy::PassManagerBase *a2)
{
  llvm::TargetPassConfig *v4;

  v4 = (llvm::TargetPassConfig *)operator new();
  return llvm::TargetPassConfig::TargetPassConfig(v4, this, a2);
}

BOOL llvm::TargetPassConfig::willCompleteCodeGenPipeline(llvm::TargetPassConfig *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = qword_1ED802BB8;
  if (byte_1ED802BC7 >= 0)
    v1 = byte_1ED802BC7 & 0x7F;
  if (v1)
    return 0;
  v2 = qword_1ED802AD0;
  if (byte_1ED802ADF >= 0)
    v2 = byte_1ED802ADF & 0x7F;
  return v2 == 0;
}

void llvm::TargetPassConfig::setOpt(llvm::TargetPassConfig *this, BOOL *a2, BOOL a3)
{
  *a2 = a3;
}

_QWORD *llvm::TargetPassConfig::substitutePass(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *result;
  uint64_t v7;

  v7 = a2;
  result = sub_1C621C398(*(uint64_t **)(a1 + 120), &v7);
  result[1] = a3;
  *((_BYTE *)result + 16) = a4;
  return result;
}

llvm *llvm::TargetPassConfig::printAndVerify(llvm *a1, uint64_t a2)
{
  llvm *result;
  uint64_t v5;
  uint64_t MachineVerifierPass;

  result = llvm::TargetPassConfig::addPrintPass(a1, a2);
  if (dword_1ED830300 == 1)
  {
    v5 = *((_QWORD *)a1 + 4);
    MachineVerifierPass = llvm::createMachineVerifierPass(a2);
    return (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, MachineVerifierPass);
  }
  return result;
}

llvm *llvm::TargetPassConfig::addPrintPass(llvm *result, uint64_t a2)
{
  uint64_t v2;
  llvm *v4;
  uint64_t MachineFunctionPrinterPass;

  if (byte_1ED802128)
  {
    v2 = *((_QWORD *)result + 4);
    v4 = llvm::dbgs(result);
    MachineFunctionPrinterPass = llvm::createMachineFunctionPrinterPass((uint64_t)v4, a2);
    return (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, MachineFunctionPrinterPass);
  }
  return result;
}

void llvm::TargetPassConfig::addPassesToHandleExceptions(llvm::TargetPassConfig *this, const llvm::TargetMachine *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  llvm::Pass *DwarfEHPass;
  llvm::Pass *v7;
  llvm *v8;
  llvm::Pass *v9;
  llvm::Pass *WinEHPass;
  llvm::Pass *v11;
  llvm *v12;

  v3 = *((_QWORD *)this + 14);
  v4 = *(_DWORD *)(*(_QWORD *)(v3 + 560) + 412);
  if (v4 == 1)
  {
LABEL_2:
    v5 = *(_DWORD *)(v3 + 552);
LABEL_3:
    DwarfEHPass = (llvm::Pass *)llvm::createDwarfEHPass(v5);
LABEL_4:
    llvm::TargetPassConfig::addPass(this, DwarfEHPass);
  }
  else
  {
    switch(v4)
    {
      case 0:
        v7 = (llvm::Pass *)llvm::createLowerInvokePass((llvm *)v3);
        llvm::TargetPassConfig::addPass(this, v7);
        DwarfEHPass = (llvm::Pass *)llvm::createUnreachableBlockEliminationPass(v8);
        goto LABEL_4;
      case 2:
        llvm::createSjLjEHPreparePass((llvm *)v3, a2);
        llvm::TargetPassConfig::addPass(this, v9);
        v3 = *((_QWORD *)this + 14);
        goto LABEL_2;
      case 3:
      case 6:
        goto LABEL_2;
      case 4:
        WinEHPass = (llvm::Pass *)llvm::createWinEHPass(0);
        llvm::TargetPassConfig::addPass(this, WinEHPass);
        v5 = *(_DWORD *)(*((_QWORD *)this + 14) + 552);
        goto LABEL_3;
      case 5:
        v11 = (llvm::Pass *)llvm::createWinEHPass(0);
        llvm::TargetPassConfig::addPass(this, v11);
        llvm::createWasmEHPass(v12);
        goto LABEL_4;
      default:
        return;
    }
  }
}

void llvm::TargetPassConfig::addCodeGenPrepare(llvm::TargetPassConfig *this)
{
  BOOL v1;
  llvm::Pass *CodeGenPreparePass;

  if (*(_DWORD *)(*((_QWORD *)this + 14) + 552))
    v1 = byte_1ED801768 == 0;
  else
    v1 = 0;
  if (v1)
  {
    CodeGenPreparePass = (llvm::Pass *)llvm::createCodeGenPreparePass(0);
    llvm::TargetPassConfig::addPass(this, CodeGenPreparePass);
  }
}

BOOL llvm::TargetPassConfig::isGlobalISelAbortEnabled(llvm::TargetPassConfig *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 14) + 1024) == 1;
}

uint64_t llvm::TargetPassConfig::addISelPasses(llvm::TargetMachine **this)
{
  _BOOL8 v2;
  llvm::Pass *PreISelIntrinsicLoweringPass;
  llvm::TargetMachine *v4;
  uint64_t TargetTransformInfoWrapperPass;
  _QWORD *v6;
  void (**v7)(_QWORD *);
  const llvm::TargetMachine *v8;
  llvm::Pass *LowerEmuTLSPass;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = llvm::TargetMachine::useEmulatedTLS(this[14]);
  if (v2)
  {
    LowerEmuTLSPass = (llvm::Pass *)llvm::createLowerEmuTLSPass((llvm *)v2);
    llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)this, LowerEmuTLSPass);
  }
  PreISelIntrinsicLoweringPass = (llvm::Pass *)llvm::createPreISelIntrinsicLoweringPass((llvm *)v2);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)this, PreISelIntrinsicLoweringPass);
  v4 = this[4];
  llvm::TargetMachine::getTargetIRAnalysis(this[14], (uint64_t)v11);
  TargetTransformInfoWrapperPass = llvm::createTargetTransformInfoWrapperPass(v11);
  (*(void (**)(llvm::TargetMachine *, uint64_t))(*(_QWORD *)v4 + 16))(v4, TargetTransformInfoWrapperPass);
  v6 = v12;
  if (v12 == v11)
  {
    v7 = (void (**)(_QWORD *))(v11[0] + 32);
    v6 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v7 = (void (**)(_QWORD *))(*v12 + 40);
  }
  (*v7)(v6);
LABEL_6:
  (*((void (**)(llvm::TargetMachine **))*this + 20))(this);
  (*((void (**)(llvm::TargetMachine **))*this + 21))(this);
  llvm::TargetPassConfig::addPassesToHandleExceptions((llvm::TargetPassConfig *)this, v8);
  (*((void (**)(llvm::TargetMachine **))*this + 22))(this);
  return llvm::TargetPassConfig::addCoreISelPasses((llvm::TargetPassConfig *)this);
}

uint64_t llvm::TargetPassConfig::addMachineSSAOptimization(llvm::TargetPassConfig *this)
{
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F7012);
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6FB5);
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F7001);
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6F19);
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6ED0);
  (*(void (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 312))(this);
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6F52);
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6F2A);
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6FA0);
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6FB6);
  return llvm::TargetPassConfig::addPass(this, &unk_1EF8F6ED0);
}

uint64_t llvm::TargetPassConfig::createTargetRegisterAllocator(llvm::TargetPassConfig *this, int a2)
{
  if (a2)
    return llvm::createGreedyRegisterAllocator(this);
  else
    return llvm::createFastRegisterAllocator(this);
}

uint64_t llvm::TargetPassConfig::createRegAllocPass(llvm::TargetPassConfig *this, uint64_t a2)
{
  unint64_t v4;
  void (**v6)();
  void (*v7)();

  v4 = atomic_load(&qword_1ED800930);
  if (v4 != -1)
  {
    v6 = &v7;
    v7 = sub_1C52C5BD8;
    std::__call_once(&qword_1ED800930, &v6, (void (__cdecl *)(void *))sub_1C4D7B69C);
  }
  if (off_1ED7EAEA8 == sub_1C52C5580)
    return (*(uint64_t (**)(llvm::TargetPassConfig *, uint64_t))(*(_QWORD *)this + 352))(this, a2);
  else
    return off_1ED7EAEA8();
}

uint64_t llvm::TargetPassConfig::addRegAssignAndRewriteFast(llvm::TargetPassConfig *this)
{
  llvm::Pass *v3;

  if ((uint64_t (*)())xmmword_1ED8033A0 != sub_1C52C5580
    && (_QWORD)xmmword_1ED8033A0 != (_QWORD)llvm::createFastRegisterAllocator)
  {
    llvm::report_fatal_error((llvm *)"Must use fast (default) register allocator for unoptimized regalloc.", (const char *)1);
  }
  v3 = (llvm::Pass *)(*(uint64_t (**)(llvm::TargetPassConfig *, _QWORD))(*(_QWORD *)this + 456))(this, 0);
  llvm::TargetPassConfig::addPass(this, v3);
  (*(void (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 384))(this);
  return 1;
}

uint64_t llvm::TargetPassConfig::addRegAssignAndRewriteOptimized(llvm::TargetPassConfig *this)
{
  llvm::Pass *v2;
  llvm *v3;
  llvm::Pass *RegAllocScoringPass;

  v2 = (llvm::Pass *)(*(uint64_t (**)(llvm::TargetPassConfig *, uint64_t))(*(_QWORD *)this + 456))(this, 1);
  llvm::TargetPassConfig::addPass(this, v2);
  (*(void (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 376))(this);
  v3 = (llvm *)llvm::TargetPassConfig::addPass(this, &unk_1EF8F7028);
  RegAllocScoringPass = (llvm::Pass *)llvm::createRegAllocScoringPass(v3);
  llvm::TargetPassConfig::addPass(this, RegAllocScoringPass);
  return 1;
}

uint64_t llvm::TargetPassConfig::addFastRegAlloc(llvm::TargetPassConfig *this)
{
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6FB7);
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F7019);
  return (*(uint64_t (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 464))(this);
}

uint64_t llvm::TargetPassConfig::addMachineLateOptimization(llvm::TargetPassConfig *this)
{
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6CCA);
  if ((*(_BYTE *)(*((_QWORD *)this + 14) + 592) & 1) == 0)
    llvm::TargetPassConfig::addPass(this, &unk_1EF8F7011);
  return llvm::TargetPassConfig::addPass(this, &unk_1EF8F6F29);
}

uint64_t llvm::TargetPassConfig::addGCPasses(llvm::TargetPassConfig *this)
{
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6EE9);
  return 1;
}

BOOL llvm::TargetPassConfig::reportDiagnosticWhenGlobalISelFallback(llvm::TargetPassConfig *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 14) + 1024) == 2;
}

uint64_t llvm::TargetPassConfig::isGISelCSEEnabled(llvm::TargetPassConfig *this)
{
  return 1;
}

_QWORD *llvm::TargetPassConfig::getCSEConfig@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E814CD80;
  *a1 = result;
  return result;
}

uint64_t sub_1C621A520()
{
  return 0;
}

uint64_t sub_1C621A528()
{
  return 0;
}

uint64_t sub_1C621A530()
{
  return 0;
}

uint64_t sub_1C621A538()
{
  return 0;
}

_QWORD *sub_1C621A544(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E814C7F8;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &off_1E814C860;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

_QWORD *sub_1C621A5C4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E814C860;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C621A604(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v12 = 0;
  v8 = sub_1C6159B48(a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v12);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C621A67C(v11);
}

uint64_t sub_1C621A67C(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C621A694(_QWORD *a1)
{
  sub_1C621A544(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C621A6B8(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C621A6C4(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C621A6D4(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_3:
    v4 = &off_1E814C8B0;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_3;
  }
  return result;
}

_QWORD *sub_1C621A740(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C621A748(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E814C860;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C621A798(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C621A7A0(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C621A7B4(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C621A7C8(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C621A7DC(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

_QWORD *sub_1C621A808(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E814C8F0;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &off_1E814C958;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

_QWORD *sub_1C621A888(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E814C958;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C621A8C8(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v12 = 0;
  v8 = sub_1C6159B48(a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v12);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C621A940(v11);
}

uint64_t sub_1C621A940(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C621A958(_QWORD *a1)
{
  sub_1C621A808(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C621A97C(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C621A988(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C621A998(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_3:
    v4 = &off_1E814C9A8;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_3;
  }
  return result;
}

_QWORD *sub_1C621AA04(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C621AA0C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E814C958;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C621AA5C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C621AA64(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C621AA78(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C621AA8C(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C621AAA0(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

_QWORD *sub_1C621AACC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E814CA50;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C621AB10(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v12 = 0;
  v8 = sub_1C6159B48(a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v12);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C621AB88(v11);
}

uint64_t sub_1C621AB88(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C621ABA0(_QWORD *a1)
{
  sub_1C52C5FE0(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C621ABC4(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C621ABD0(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C621ABE0(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  void *v4;
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_3:
    v4 = &unk_1E814CAA0;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_3;
  }
  return result;
}

_QWORD *sub_1C621AC50(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C621AC58(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E814CA50;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C621ACAC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C621ACB4(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C621ACC8(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C621ACDC(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C621ACF0(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void llvm::callDefaultCtor<llvm::TargetPassConfig>()
{
  llvm::TargetPassConfig *v0;

  v0 = (llvm::TargetPassConfig *)operator new();
  llvm::TargetPassConfig::TargetPassConfig(v0);
}

_QWORD *sub_1C621AD40(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E814CAE0;
  v2 = a1 + 81;
  v3 = (_QWORD *)a1[84];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  off_1ED7EAEB0 = 0;
  a1[20] = off_1E814CB48;
  a1[21] = &off_1E814CBD0;
  v5 = (_QWORD *)a1[23];
  if (v5 != a1 + 25)
    free(v5);
  return sub_1C47A80D0(a1);
}

_QWORD *sub_1C621ADD4(_QWORD *a1)
{
  _QWORD *v2;

  off_1ED7EAEB0 = 0;
  *a1 = off_1E814CB48;
  a1[1] = &off_1E814CBD0;
  v2 = (_QWORD *)a1[3];
  if (v2 != a1 + 5)
    free(v2);
  return a1;
}

uint64_t sub_1C621AE28(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  v8 = sub_1C61FC508(a1 + 168, (_QWORD *)a1, a3, a4, a5, a6, &v12);
  if ((v8 & 1) != 0)
    return v8;
  *(_QWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 672);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C621AEA0(v11);
}

uint64_t sub_1C621AEA0(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 176) + 24))
    return 2;
  else
    return 3;
}

void sub_1C621AEB8(_QWORD *a1)
{
  sub_1C621AD40(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C621AEDC(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 168, a1);
}

uint64_t sub_1C621AEE8(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 168), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C621AEF8(llvm::raw_ostream *result, int a2, int a3)
{
  uint64_t v3;
  _QWORD v4[2];
  char v5;

  if (a3)
  {
    v3 = *((_QWORD *)result + 16);
LABEL_3:
    v5 = 1;
    v4[0] = &off_1E814CC20;
    v4[1] = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 168), result, (const llvm::cl::GenericOptionValue *)v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 152))
  {
    v3 = *((_QWORD *)result + 16);
    if (*((_QWORD *)result + 18) != v3)
      goto LABEL_3;
  }
  return result;
}

_QWORD *sub_1C621AF60(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 168), a2);
}

void sub_1C621AF68(_QWORD *a1)
{
  _QWORD *v2;

  *(a1 - 1) = off_1E814CB48;
  off_1ED7EAEB0 = 0;
  *a1 = &off_1E814CBD0;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
}

void sub_1C621AFB8(_QWORD *a1)
{
  _QWORD *v2;

  off_1ED7EAEB0 = 0;
  *a1 = off_1E814CB48;
  a1[1] = &off_1E814CBD0;
  v2 = (_QWORD *)a1[3];
  if (v2 != a1 + 5)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C621B01C(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1C621B190(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t sub_1C621B024(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  result = llvm::cl::generic_parser_base::findOption(a1 + 8, a2, a3);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 32);
  v7 = v5 + 56 * v6;
  v8 = v5 + 56 * result + 56;
  if (v8 != v7)
  {
    v9 = 56 * v6 - 56 * result - 56;
    do
    {
      v10 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)(v8 - 56) = *(_OWORD *)v8;
      *(_OWORD *)(v8 - 40) = v10;
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(v8 + 40);
      *(_BYTE *)(v8 - 8) = *(_BYTE *)(v8 + 48);
      v8 += 56;
      v9 -= 56;
    }
    while (v9);
    v6 = *(_DWORD *)(a1 + 32);
  }
  *(_DWORD *)(a1 + 32) = v6 - 1;
  return result;
}

void sub_1C621B0B4(uint64_t a1)
{
  sub_1C621AFB8((_QWORD *)(a1 - 8));
}

uint64_t sub_1C621B0BC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C621B0C4(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * a2);
}

uint64_t sub_1C621B0D8(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * a2 + 16);
}

uint64_t sub_1C621B0EC(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 56 * a2 + 32;
}

_QWORD *sub_1C621B100(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E814CBD0;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

void sub_1C621B140(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E814CBD0;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C621B190(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[6];
  char v14;

  v13[0] = a2;
  v13[1] = a3;
  v13[2] = a5;
  v13[3] = a6;
  v14 = 1;
  v13[4] = &off_1E814CC20;
  v13[5] = a4;
  v9 = sub_1C52C6250(a1 + 16, (unint64_t)v13);
  v10 = *(_QWORD *)(a1 + 16) + 56 * *(unsigned int *)(a1 + 24);
  v11 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v9;
  *(_OWORD *)(v10 + 16) = v11;
  *(_QWORD *)(v10 + 32) = &off_1E814CC40;
  v12 = *(_QWORD *)(v9 + 40);
  *(_BYTE *)(v10 + 48) = *(_BYTE *)(v9 + 48);
  *(_QWORD *)(v10 + 32) = &off_1E814CC20;
  *(_QWORD *)(v10 + 40) = v12;
  ++*(_DWORD *)(a1 + 24);
  llvm::cl::AddLiteralOption(*(_QWORD *)(a1 + 8), a2, a3);
}

BOOL sub_1C621B23C(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 16) && *(_BYTE *)(a1 + 16) && *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8);
}

void sub_1C621B268(uint64_t a1, unint64_t a2)
{
  _OWORD *v3;
  char *v4;
  unsigned int v5;
  char *v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  unint64_t v11;

  v11 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 56, &v11);
  v4 = *(char **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = &v4[56 * v5];
    v7 = v3;
    do
    {
      v8 = *((_OWORD *)v4 + 1);
      *v7 = *(_OWORD *)v4;
      v7[1] = v8;
      *((_QWORD *)v7 + 4) = &off_1E814CC40;
      v9 = *((_QWORD *)v4 + 5);
      *((_BYTE *)v7 + 48) = v4[48];
      *((_QWORD *)v7 + 4) = &off_1E814CC20;
      *((_QWORD *)v7 + 5) = v9;
      v4 += 56;
      v7 = (_OWORD *)((char *)v7 + 56);
    }
    while (v4 != v6);
    v4 = *(char **)a1;
  }
  v10 = v11;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v10;
}

void sub_1C621B31C(_WORD *a1, __int128 *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED800C68, 0, 0);
  byte_1ED800CE8 = 0;
  qword_1ED800CF0 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED800CF8 = 0;
  qword_1ED800C68 = (uint64_t)&unk_1E819E898;
  qword_1ED800D00 = (uint64_t)&off_1E819E9A0;
  qword_1ED800D08 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED800D20 = (uint64_t)&qword_1ED800D08;
  llvm::cl::Option::setArgStr(v4, "disable-early-taildup", 0x15uLL);
  word_1ED800C72 = (32 * (*a1 & 3)) | word_1ED800C72 & 0xFF9F;
  xmmword_1ED800C88 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED800C68);
}

void sub_1C621B3DC(_WORD *a1, __int128 *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED800D28, 0, 0);
  byte_1ED800DA8 = 0;
  qword_1ED800DB0 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED800DB8 = 0;
  qword_1ED800D28 = (uint64_t)&unk_1E819E898;
  qword_1ED800DC0 = (uint64_t)&off_1E819E9A0;
  qword_1ED800DC8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED800DE0 = (uint64_t)&qword_1ED800DC8;
  llvm::cl::Option::setArgStr(v4, "disable-block-placement", 0x17uLL);
  word_1ED800D32 = (32 * (*a1 & 3)) | word_1ED800D32 & 0xFF9F;
  xmmword_1ED800D48 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED800D28);
}

void sub_1C621B49C(_WORD *a1, __int128 *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED801268, 0, 0);
  dword_1ED8012E8 = 0;
  qword_1ED8012F0 = (uint64_t)&unk_1E819E900;
  unk_1ED8012F8 = 0;
  qword_1ED801268 = (uint64_t)&unk_1E8140060;
  qword_1ED801300 = (uint64_t)&unk_1E819E920;
  qword_1ED801308 = (uint64_t)&unk_1E81400C8;
  qword_1ED801320 = (uint64_t)&qword_1ED801308;
  llvm::cl::Option::setArgStr(v4, "optimize-regalloc", 0x11uLL);
  word_1ED801272 = (32 * (*a1 & 3)) | word_1ED801272 & 0xFF9F;
  xmmword_1ED801288 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED801268);
}

void sub_1C621B55C(_WORD *a1, __int128 *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED801628, 0, 0);
  byte_1ED8016A8 = 0;
  qword_1ED8016B0 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED8016B8 = 0;
  qword_1ED801628 = (uint64_t)&unk_1E819E898;
  qword_1ED8016C0 = (uint64_t)&off_1E819E9A0;
  qword_1ED8016C8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED8016E0 = (uint64_t)&qword_1ED8016C8;
  llvm::cl::Option::setArgStr(v4, "disable-constant-hoisting", 0x19uLL);
  word_1ED801632 = (32 * (*a1 & 3)) | word_1ED801632 & 0xFF9F;
  xmmword_1ED801648 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED801628);
}

void sub_1C621B61C(_WORD *a1, __int128 *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED801C28, 0, 0);
  byte_1ED801CA8 = 0;
  qword_1ED801CB0 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED801CB8 = 0;
  qword_1ED801C28 = (uint64_t)&unk_1E819E898;
  qword_1ED801CC0 = (uint64_t)&off_1E819E9A0;
  qword_1ED801CC8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED801CE0 = (uint64_t)&qword_1ED801CC8;
  llvm::cl::Option::setArgStr(v4, "print-gc", 8uLL);
  word_1ED801C32 = (32 * (*a1 & 3)) | word_1ED801C32 & 0xFF9F;
  xmmword_1ED801C48 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED801C28);
}

void sub_1C621B6DC(_WORD *a1, __n128 *a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED830280, 0, 0);
  dword_1ED830300 = 0;
  qword_1ED830308 = (uint64_t)&unk_1E819E900;
  unk_1ED830310 = 0;
  qword_1ED830280 = (uint64_t)&unk_1E8140060;
  qword_1ED830318 = (uint64_t)&unk_1E819E920;
  qword_1ED830320 = (uint64_t)&unk_1E81400C8;
  qword_1ED830338 = (uint64_t)&qword_1ED830320;
  sub_1C52C62B8(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED830280);
}

void sub_1C621B780(_WORD *a1, __n128 *a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED801CE8, 0, 0);
  dword_1ED801D68 = 0;
  qword_1ED801D70 = (uint64_t)&unk_1E819E900;
  unk_1ED801D78 = 0;
  qword_1ED801CE8 = (uint64_t)&unk_1E8140060;
  qword_1ED801D80 = (uint64_t)&unk_1E819E920;
  qword_1ED801D88 = (uint64_t)&unk_1E81400C8;
  qword_1ED801DA0 = (uint64_t)&qword_1ED801D88;
  sub_1C52C6324(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED801CE8);
}

void sub_1C621B824(_WORD *a1, __n128 *a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED801DA8, 0, 0);
  dword_1ED801E28 = 0;
  qword_1ED801E30 = (uint64_t)&unk_1E819E900;
  unk_1ED801E38 = 0;
  qword_1ED801DA8 = (uint64_t)&unk_1E8140060;
  qword_1ED801E40 = (uint64_t)&unk_1E819E920;
  qword_1ED801E48 = (uint64_t)&unk_1E81400C8;
  qword_1ED801E60 = (uint64_t)&qword_1ED801E48;
  sub_1C52C6390(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED801DA8);
}

void sub_1C621B8C8(__int128 *a1, _WORD *a2, _WORD *a3, int **a4, uint64_t a5)
{
  sub_1C47AD050((uint64_t)&qword_1ED802C18, 0, 0);
  dword_1ED802C98 = 0;
  qword_1ED802CA0 = (uint64_t)&off_1E814C8B0;
  *(_QWORD *)&dword_1ED802CA8 = 0;
  qword_1ED802C18 = (uint64_t)off_1E814C7F8;
  qword_1ED802CB0 = (uint64_t)&off_1E814C860;
  qword_1ED802CB8 = (uint64_t)&qword_1ED802C18;
  qword_1ED802CC0 = (uint64_t)&unk_1ED802CD0;
  qword_1ED802CC8 = 0x800000000;
  qword_1ED802E50 = (uint64_t)&off_1E814CC60;
  qword_1ED802E68 = (uint64_t)&qword_1ED802E50;
  sub_1C621B988(a1, a2, a3, a4, a5);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED802C18);
}

void sub_1C621B988(__int128 *a1, _WORD *a2, _WORD *a3, int **a4, uint64_t a5)
{
  int *v10;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED802C18, "enable-machine-outliner", 0x17uLL);
  xmmword_1ED802C38 = *a1;
  word_1ED802C22 = word_1ED802C22 & 0xFF9F | (32 * (*a2 & 3));
  word_1ED802C22 = (8 * (*a3 & 3)) | word_1ED802C22 & 0xFFE7;
  v10 = *a4;
  dword_1ED802C98 = **a4;
  byte_1ED802CAC = 1;
  dword_1ED802CA8 = *v10;
  sub_1C52C63FC(*(_QWORD *)a5, *(_DWORD *)(a5 + 8));
}

void sub_1C621BA34()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C621BA48()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E814CC60;
  return result;
}

void sub_1C621BA6C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E814CC60;
}

void sub_1C621BA88(unsigned __int8 *a1, size_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  _QWORD v11[5];
  int v12;
  char v13;

  v11[0] = a1;
  v11[1] = a2;
  v11[2] = a4;
  v11[3] = a5;
  v11[4] = &off_1E814C8B0;
  v13 = 1;
  v12 = a3;
  v7 = sub_1C52C6440((unint64_t)v11);
  v8 = qword_1ED802CC0 + 48 * qword_1ED802CC8;
  v9 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 32) = &off_1E814C8D0;
  v10 = *(_BYTE *)(v7 + 44);
  *(_DWORD *)(v8 + 40) = *(_DWORD *)(v7 + 40);
  *(_BYTE *)(v8 + 44) = v10;
  *(_QWORD *)(v8 + 32) = &off_1E814C8B0;
  LODWORD(qword_1ED802CC8) = qword_1ED802CC8 + 1;
  llvm::cl::AddLiteralOption(qword_1ED802CB8, a1, a2);
}

void sub_1C621BB3C(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1ED802CC0, a1, 48, &v8);
  v2 = (_OWORD *)qword_1ED802CC0;
  if ((_DWORD)qword_1ED802CC8)
  {
    v3 = qword_1ED802CC0 + 48 * qword_1ED802CC8;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E814C8D0;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E814C8B0;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1ED802CC0;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1ED802CD0)
    free(v2);
  qword_1ED802CC0 = (uint64_t)v1;
  HIDWORD(qword_1ED802CC8) = v7;
}

void sub_1C621BC08(_WORD *a1, __int128 *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED801F28, 0, 0);
  dword_1ED801FA8 = 0;
  qword_1ED801FB0 = (uint64_t)&unk_1E819E900;
  unk_1ED801FB8 = 0;
  qword_1ED801F28 = (uint64_t)&unk_1E8140060;
  qword_1ED801FC0 = (uint64_t)&unk_1E819E920;
  qword_1ED801FC8 = (uint64_t)&unk_1E81400C8;
  qword_1ED801FE0 = (uint64_t)&qword_1ED801FC8;
  llvm::cl::Option::setArgStr(v4, "fast-isel", 9uLL);
  word_1ED801F32 = (32 * (*a1 & 3)) | word_1ED801F32 & 0xFF9F;
  xmmword_1ED801F48 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED801F28);
}

void sub_1C621BCC8(_WORD *a1, __int128 *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED801FE8, 0, 0);
  dword_1ED802068 = 0;
  qword_1ED802070 = (uint64_t)&unk_1E819E900;
  unk_1ED802078 = 0;
  qword_1ED801FE8 = (uint64_t)&unk_1E8140060;
  qword_1ED802080 = (uint64_t)&unk_1E819E920;
  qword_1ED802088 = (uint64_t)&unk_1E81400C8;
  qword_1ED8020A0 = (uint64_t)&qword_1ED802088;
  llvm::cl::Option::setArgStr(v4, "global-isel", 0xBuLL);
  word_1ED801FF2 = (32 * (*a1 & 3)) | word_1ED801FF2 & 0xFF9F;
  xmmword_1ED802008 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED801FE8);
}

void sub_1C621BD88(_WORD *a1, __int128 *a2, uint64_t *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED802E70, 0, 0);
  dword_1ED802EF0 = 0;
  qword_1ED802EF8 = (uint64_t)&off_1E814C9A8;
  unk_1ED802F00 = 0;
  qword_1ED802E70 = (uint64_t)off_1E814C8F0;
  qword_1ED802F08 = (uint64_t)&off_1E814C958;
  qword_1ED802F10 = (uint64_t)&qword_1ED802E70;
  qword_1ED802F18 = (uint64_t)&unk_1ED802F28;
  qword_1ED802F20 = 0x800000000;
  qword_1ED8030A8 = (uint64_t)&off_1E814CCA8;
  qword_1ED8030C0 = (uint64_t)&qword_1ED8030A8;
  sub_1C52C64B4(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED802E70);
}

void sub_1C621BE34()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C621BE48()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E814CCA8;
  return result;
}

void sub_1C621BE6C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E814CCA8;
}

void sub_1C621BE88(unsigned __int8 *a1, size_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  _QWORD v11[5];
  int v12;
  char v13;

  v11[0] = a1;
  v11[1] = a2;
  v11[2] = a4;
  v11[3] = a5;
  v11[4] = &off_1E814C9A8;
  v13 = 1;
  v12 = a3;
  v7 = sub_1C52C654C((unint64_t)v11);
  v8 = qword_1ED802F18 + 48 * qword_1ED802F20;
  v9 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 32) = &off_1E814C9C8;
  v10 = *(_BYTE *)(v7 + 44);
  *(_DWORD *)(v8 + 40) = *(_DWORD *)(v7 + 40);
  *(_BYTE *)(v8 + 44) = v10;
  *(_QWORD *)(v8 + 32) = &off_1E814C9A8;
  LODWORD(qword_1ED802F20) = qword_1ED802F20 + 1;
  llvm::cl::AddLiteralOption(qword_1ED802F10, a1, a2);
}

void sub_1C621BF3C(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1ED802F18, a1, 48, &v8);
  v2 = (_OWORD *)qword_1ED802F18;
  if ((_DWORD)qword_1ED802F20)
  {
    v3 = qword_1ED802F18 + 48 * qword_1ED802F20;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E814C9C8;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E814C9A8;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1ED802F18;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1ED802F28)
    free(v2);
  qword_1ED802F18 = (uint64_t)v1;
  HIDWORD(qword_1ED802F20) = v7;
}

__n128 sub_1C621C008(const char **a1, __int128 *a2, __n128 *a3, _WORD *a4)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED8026A8, "fs-profile-file", 0xFuLL);
  sub_1C49C7D74(a1, (uint64_t)&qword_1ED8026A8);
  xmmword_1ED8026D8 = *a2;
  result = *a3;
  xmmword_1ED8026C8 = (__int128)*a3;
  word_1ED8026B2 = (32 * (*a4 & 3)) | word_1ED8026B2 & 0xFF9F;
  return result;
}

__n128 sub_1C621C090(const char **a1, __int128 *a2, __n128 *a3, _WORD *a4)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED802790, "fs-remapping-file", 0x11uLL);
  sub_1C49C7D74(a1, (uint64_t)&qword_1ED802790);
  xmmword_1ED8027C0 = *a2;
  result = *a3;
  xmmword_1ED8027B0 = (__int128)*a3;
  word_1ED80279A = (32 * (*a4 & 3)) | word_1ED80279A & 0xFF9F;
  return result;
}

void sub_1C621C118(int **a1, _WORD *a2, __int128 *a3, uint64_t *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED8030C8, 0, 0);
  dword_1ED803148 = 0;
  qword_1ED803150 = (uint64_t)&unk_1E814CAA0;
  *(_QWORD *)&dword_1ED803158 = 0;
  qword_1ED8030C8 = (uint64_t)&unk_1E814C9E8;
  qword_1ED803160 = (uint64_t)&unk_1E814CA50;
  unk_1ED803168 = &qword_1ED8030C8;
  qword_1ED803170 = (uint64_t)&unk_1ED803180;
  qword_1ED803178 = 0x800000000;
  qword_1ED803300 = (uint64_t)&unk_1E814CCF0;
  qword_1ED803318 = (uint64_t)&qword_1ED803300;
  sub_1C621C1E0(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED8030C8);
}

void sub_1C621C1E0(int **a1, _WORD *a2, __int128 *a3, uint64_t *a4)
{
  int *v8;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED8030C8, "use-cfl-aa-in-codegen", 0x15uLL);
  v8 = *a1;
  dword_1ED803148 = **a1;
  byte_1ED80315C = 1;
  dword_1ED803158 = *v8;
  word_1ED8030D2 = (32 * (*a2 & 3)) | word_1ED8030D2 & 0xFF9F;
  xmmword_1ED8030E8 = *a3;
  sub_1C52C65C0(a4, (uint64_t)&qword_1ED8030C8);
}

void sub_1C621C27C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C621C290()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E814CCF0;
  return result;
}

void sub_1C621C2B8(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E814CCF0;
}

void sub_1C621C2D8(uint64_t a1, unint64_t a2)
{
  _OWORD *v3;
  char *v4;
  unsigned int v5;
  char *v6;
  _OWORD *v7;
  __int128 v8;
  int v9;
  int v10;
  unint64_t v11;

  v11 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 48, &v11);
  v4 = *(char **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = &v4[48 * v5];
    v7 = v3;
    do
    {
      v8 = *((_OWORD *)v4 + 1);
      *v7 = *(_OWORD *)v4;
      v7[1] = v8;
      *((_QWORD *)v7 + 4) = &unk_1E814CAC0;
      v9 = *((_DWORD *)v4 + 10);
      *((_BYTE *)v7 + 44) = v4[44];
      *((_DWORD *)v7 + 10) = v9;
      *((_QWORD *)v7 + 4) = &unk_1E814CAA0;
      v4 += 48;
      v7 += 3;
    }
    while (v4 != v6);
    v4 = *(char **)a1;
  }
  v10 = v11;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v10;
}

_QWORD *sub_1C621C398(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C52C6AE8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C621C3F4((uint64_t)a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
    *((_BYTE *)v5 + 16) = 0;
  }
  return v5;
}

_QWORD *sub_1C621C3F4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C52C6B88(a1, v6);
  v8 = 0;
  sub_1C52C6AE8((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C621C4A4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = -4096;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C52C6AE8((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *(_OWORD *)(v9 + 1) = *(_OWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

void sub_1C621C554(_WORD *a1, uint64_t **a2, __n128 *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED803320, 0, 0);
  xmmword_1ED8033A0 = 0u;
  *(_OWORD *)&qword_1ED8033B0 = 0u;
  *((_QWORD *)&xmmword_1ED8033A0 + 1) = &off_1E814CC20;
  qword_1ED803320 = (uint64_t)off_1E814CAE0;
  qword_1ED8033D0 = (uint64_t)&qword_1ED803320;
  unk_1ED8033D8 = &unk_1ED8033E8;
  qword_1ED8033E0 = 0x800000000;
  qword_1ED8033C0 = (uint64_t)off_1E814CB48;
  unk_1ED8033C8 = &unk_1E814CB80;
  qword_1ED8035A8 = (uint64_t)&off_1E814CD38;
  qword_1ED8035C0 = (uint64_t)&qword_1ED8035A8;
  sub_1C52C6C4C(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED803320);
  sub_1C621C660();
}

void sub_1C621C60C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C621C620()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E814CD38;
  return result;
}

void sub_1C621C644(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E814CD38;
}

void sub_1C621C660()
{
  unsigned __int8 *v0;

  v0 = (unsigned __int8 *)llvm::RegisterRegAllocBase<llvm::RegisterRegAlloc>::Registry;
  if (llvm::RegisterRegAllocBase<llvm::RegisterRegAlloc>::Registry)
  {
    do
    {
      sub_1C621B190((uint64_t)&unk_1ED8033C8, *((unsigned __int8 **)v0 + 1), *((_QWORD *)v0 + 2), *((_QWORD *)v0 + 5), *((_QWORD *)v0 + 3), *((_QWORD *)v0 + 4));
      v0 = *(unsigned __int8 **)v0;
    }
    while (v0);
  }
  off_1ED7EAEB0 = &qword_1ED8033C0;
}

void sub_1C621C6C4()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C621C6D8()
{
  return 0;
}

uint64_t llvm::TargetRegisterInfo::TargetRegisterInfo(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_DWORD *)(result + 184) = 0;
  *(_QWORD *)(result + 192) = 0;
  *(_QWORD *)(result + 200) = 0;
  *(_DWORD *)(result + 208) = 0;
  *(_QWORD *)result = off_1E814CDA8;
  *(_QWORD *)(result + 216) = a2;
  *(_QWORD *)(result + 224) = a5;
  *(_QWORD *)(result + 232) = a6;
  *(_QWORD *)(result + 240) = a3;
  *(_QWORD *)(result + 248) = a4;
  *(_QWORD *)(result + 256) = a7;
  *(_QWORD *)(result + 264) = a8;
  *(_DWORD *)(result + 272) = a9;
  return result;
}

void llvm::TargetRegisterInfo::~TargetRegisterInfo(llvm::TargetRegisterInfo *this)
{
  sub_1C61E6B14((uint64_t)this + 8);
}

BOOL llvm::TargetRegisterInfo::shouldRegionSplitForVirtReg(llvm::TargetRegisterInfo *this, const llvm::MachineFunction *a2, const llvm::LiveInterval *a3)
{
  llvm::TargetInstrInfo *v5;
  const llvm::MachineInstr *UniqueVRegDef;

  v5 = (llvm::TargetInstrInfo *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 104))(*((_QWORD *)a2 + 2));
  UniqueVRegDef = (const llvm::MachineInstr *)llvm::MachineRegisterInfo::getUniqueVRegDef(*((_QWORD *)a2 + 5), *((_DWORD *)a3 + 28));
  return !UniqueVRegDef
      || !sub_1C52C7D8C(v5, UniqueVRegDef)
      || *((_DWORD *)a3 + 2) <= dword_1ED803648;
}

_DWORD *llvm::printReg@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _DWORD *result;

  result = operator new(0x28uLL);
  *(_QWORD *)result = &off_1E814D010;
  result[2] = a1;
  *((_QWORD *)result + 2) = a2;
  result[6] = a3;
  *((_QWORD *)result + 4) = a4;
  *(_QWORD *)(a5 + 24) = result;
  return result;
}

uint64_t llvm::TargetRegisterInfo::getMinimalPhysRegClassLLT(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v15;
  uint64_t v16;

  v3 = *(uint64_t **)(a1 + 240);
  v4 = *(uint64_t **)(a1 + 248);
  if (v3 != v4)
  {
    v7 = 0;
    v8 = a3 & 0xFFFFFFFFFFFFFFF9;
    v9 = a2 - 1;
    v16 = a2 >> 3;
    v15 = 1 << (a2 & 7);
    v10 = (unint64_t)a2 >> 3;
    while (1)
    {
      v11 = *v3;
      if (v8)
        break;
      if (v9 <= 0x3FFFFFFE)
        goto LABEL_11;
LABEL_17:
      if (++v3 == v4)
        return v7;
    }
    if (sub_1C52C83D8(a1, *v3, a3))
      v12 = v9 >= 0x3FFFFFFF;
    else
      v12 = 1;
    if (v12)
      goto LABEL_17;
LABEL_11:
    v13 = *(_QWORD *)v11;
    if (v10 < *(unsigned __int16 *)(*(_QWORD *)v11 + 22)
      && (v15 & *(_BYTE *)(*(_QWORD *)(v13 + 8) + v16)) != 0
      && (!v7
       || v11 != v7
       && ((*(_DWORD *)(*(_QWORD *)(v7 + 8) + ((*(unsigned __int16 *)(v13 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v13 + 24)) & 1) != 0))
    {
      v7 = v11;
    }
    goto LABEL_17;
  }
  return 0;
}

uint64_t llvm::TargetRegisterInfo::isCalleeSavedPhysReg(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;

  if (!a2)
    return 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a3, (*(unsigned __int16 *)(*(_QWORD *)a3 + 18) >> 4) & 0x3FF);
  if (result)
    return (*(_DWORD *)(result + 4 * (a2 >> 5)) >> a2) & 1;
  return result;
}

uint64_t llvm::TargetRegisterInfo::lookThruSingleUseCopyChain(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t VRegDef;
  int v6;
  uint64_t v7;
  uint64_t v8;

  while (1)
  {
    VRegDef = llvm::MachineRegisterInfo::getVRegDef(a3, a2);
    v6 = **(unsigned __int16 **)(VRegDef + 16);
    if (v6 != 11)
      break;
    v7 = 2;
LABEL_5:
    v8 = *(_QWORD *)(VRegDef + 32) + 32 * v7;
    a2 = *(_DWORD *)(v8 + 4);
    if ((a2 & 0x80000000) == 0 || !llvm::MachineRegisterInfo::hasOneNonDBGUse(a3, *(_DWORD *)(v8 + 4)))
      return 0;
  }
  if (v6 == 19)
  {
    v7 = 1;
    goto LABEL_5;
  }
  if (llvm::MachineRegisterInfo::hasOneNonDBGUse(a3, a2))
    return a2;
  else
    return 0;
}

uint64_t llvm::TargetRegisterInfo::getOffsetOpcodes(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return llvm::DIExpression::appendOffset(a3, *a2);
}

llvm::MDNode *llvm::TargetRegisterInfo::prependOffsetExpression(uint64_t a1, _QWORD *a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  llvm::MDNode *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[17];

  v11[16] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x1000000000;
  if ((a3 & 1) != 0)
  {
    v11[0] = 6;
    LODWORD(v10) = 1;
  }
  (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 488))(a1, a4, &v9);
  if ((a3 & 2) != 0)
  {
    v6 = v10;
    if (v10 >= HIDWORD(v10))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v9, (uint64_t)v11, v10 + 1, 8);
      v6 = v10;
    }
    *((_QWORD *)v9 + v6) = 6;
    LODWORD(v10) = v10 + 1;
  }
  v7 = llvm::DIExpression::prependOpcodes(a2, (unsigned int *)&v9, (a3 & 4) != 0, (a3 >> 3) & 1);
  if (v9 != v11)
    free(v9);
  return v7;
}

void llvm::TargetRegisterInfo::dumpReg(llvm *a1, int a2, uint64_t a3)
{
  int v5;
  llvm *v6;
  _DWORD *v7;

  v5 = (int)a1;
  v6 = llvm::dbgs(a1);
  v7 = operator new(0x28uLL);
  *(_QWORD *)v7 = &off_1E814D010;
  v7[2] = v5;
  *((_QWORD *)v7 + 2) = a3;
  v7[6] = a2;
  *((_QWORD *)v7 + 4) = 0;
  sub_1C52C9630((llvm::raw_ostream *)v7, v6);
  sub_1C4816AD8(v6, "\n");
  operator delete(v7);
}

uint64_t sub_1C621CBD4()
{
  return 0;
}

uint64_t sub_1C621CBDC()
{
  return 0;
}

uint64_t sub_1C621CBE4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t llvm::TargetSchedModel::mustEndGroup(llvm::TargetSchedModel *a1, const llvm::MachineInstr *a2, uint64_t a3)
{
  unsigned int v3;
  BOOL v4;
  unsigned int v5;

  if (!byte_1ED8303C8 || !*((_QWORD *)a1 + 5))
    return 0;
  if (!a3)
    a3 = llvm::TargetSchedModel::resolveSchedClass(a1, a2);
  v3 = *(unsigned __int16 *)(a3 + 8);
  v4 = (~v3 & 0x1FFF) == 0;
  v5 = (v3 >> 14) & 1;
  if (v4)
    return 0;
  else
    return v5;
}

uint64_t llvm::TargetSchedModel::findUseIdx(uint64_t this, const llvm::MachineInstr *a2)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;

  if (!(_DWORD)a2)
    return 0;
  v2 = this;
  LODWORD(this) = 0;
  v3 = *(int **)(v2 + 32);
  v4 = a2;
  do
  {
    v6 = *v3;
    v3 += 8;
    v5 = v6;
    v7 = v6 & 0x10FFF00;
    if ((v6 & 0x310000FF) == 0 && v7 != 0x1000000 || v5 == 7)
      this = (this + 1);
    else
      this = this;
    --v4;
  }
  while (v4);
  return this;
}

uint64_t llvm::TargetSubtargetInfo::enableAtomicExpand(llvm::TargetSubtargetInfo *this)
{
  return 1;
}

uint64_t llvm::TargetSubtargetInfo::enableIndirectBrExpand(llvm::TargetSubtargetInfo *this)
{
  return 0;
}

uint64_t llvm::TargetSubtargetInfo::enableMachineScheduler(llvm::TargetSubtargetInfo *this)
{
  return 0;
}

uint64_t llvm::TargetSubtargetInfo::enableRALocalReassignment()
{
  return 1;
}

uint64_t llvm::TargetSubtargetInfo::enablePostRAMachineScheduler(llvm::TargetSubtargetInfo *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(llvm::TargetSubtargetInfo *))(*(_QWORD *)this + 232))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(llvm::TargetSubtargetInfo *))(*(_QWORD *)this + 264))(this);
  return result;
}

uint64_t sub_1C621CD78()
{
  return 0;
}

uint64_t sub_1C621CD80()
{
  return 0;
}

void llvm::initializeTypePromotionPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED803748);
  if (v2 != -1)
  {
    v5[0] = sub_1C52CAF28;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED803748, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

_QWORD *sub_1C621CDEC(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C61A45F4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C621CE64(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x400000000;
  }
  return v5;
}

_QWORD *sub_1C621CE64(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C52CDB9C(a1, v6);
  v8 = 0;
  sub_1C61A45F4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_1C621CF14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 56 * v6;
    do
    {
      *v7 = -4096;
      v7 += 7;
      v8 -= 56;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v13 = 0;
        sub_1C61A45F4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        v10 = v13;
        *v13 = *(_QWORD *)v4;
        v10[2] = 0x400000000;
        v10[1] = v10 + 3;
        v11 = (uint64_t)(v10 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_1C4E41EEC(v11, v4 + 8);
        ++*(_DWORD *)(a1 + 8);
        v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12)
          free(v12);
      }
      v4 += 56;
    }
    while (v4 != a3);
  }
}

void llvm::initializeTwoAddressInstructionPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED803750);
  if (v2 != -1)
  {
    v5[0] = sub_1C52CE128;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED803750, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

_DWORD *sub_1C621D06C(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  _DWORD *result;
  int v5;
  _DWORD *v6;

  if (a2 <= 4)
  {
    *a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    v3 = a2;
    result = operator new(56 * a2, (std::align_val_t)8uLL);
    a1[1] = result;
    a1[2] = v3;
    v5 = *(_DWORD *)a1;
    *a1 = *(_DWORD *)a1 & 1;
    if ((v5 & 1) == 0)
    {
      v6 = &result[14 * v3];
      goto LABEL_6;
    }
  }
  result = a1 + 1;
  v6 = a1 + 29;
  do
  {
LABEL_6:
    *result = -1;
    result += 14;
  }
  while (result != v6);
  return result;
}

void sub_1C621D0F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v6;
  int v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  void *v13;
  _DWORD *v14;

  v4 = a2;
  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_DWORD *)(a1 + 8);
    v9 = (_DWORD *)(a1 + 232);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (!v7)
      goto LABEL_6;
    v8 = *(_DWORD **)(a1 + 8);
    v9 = &v8[14 * v7];
  }
  do
  {
    *v8 = -1;
    v8 += 14;
  }
  while (v8 != v9);
LABEL_6:
  if (a2 != a3)
  {
    do
    {
      v10 = *(_DWORD *)v4;
      if (*(_DWORD *)v4 <= 0xFFFFFFFD)
      {
        v14 = 0;
        sub_1C52D43E0(a1, v10, &v14);
        v11 = v14;
        *v14 = *(_DWORD *)v4;
        *((_QWORD *)v11 + 2) = 0x400000000;
        *((_QWORD *)v11 + 1) = v11 + 6;
        v12 = (uint64_t)(v11 + 2);
        if (*(_DWORD *)(v4 + 16))
          sub_1C52D4668(v12, v4 + 8);
        *(_DWORD *)a1 += 2;
        v13 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v13)
          free(v13);
      }
      v4 += 56;
    }
    while (v4 != a3);
  }
}

void sub_1C621D1F8(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  _DWORD *v7;

  v2 = *(_DWORD *)a1;
  sub_1C52D4B9C(a1);
  v3 = __clz((v2 >> 1) - 1);
  if (v3 - 28 >= 3)
    v4 = 1 << (33 - v3);
  else
    v4 = 64;
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((*(_DWORD *)a1 & 1) != 0 && v5 < 5)
  {
    v6 = (_DWORD *)(a1 + 8);
    *(_QWORD *)a1 = 1;
    v7 = (_DWORD *)(a1 + 232);
    goto LABEL_10;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
LABEL_17:
    sub_1C621D06C((_QWORD *)a1, v5);
    return;
  }
  if (v5 != *(_DWORD *)(a1 + 16))
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
    goto LABEL_17;
  }
  *(_QWORD *)a1 = 0;
  if (!v5)
    return;
  v6 = *(_DWORD **)(a1 + 8);
  v7 = &v6[14 * v5];
  do
  {
LABEL_10:
    *v6 = -1;
    v6 += 14;
  }
  while (v6 != v7);
}

void sub_1C621D2C8(_WORD *a1, int **a2, __int128 *a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED803818, 0, 0);
  dword_1ED803898 = 0;
  qword_1ED8038A0 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED8038A8 = 0;
  qword_1ED803818 = (uint64_t)&unk_1E819E3B0;
  qword_1ED8038B0 = (uint64_t)&unk_1E819E2C0;
  qword_1ED8038B8 = (uint64_t)&off_1E7F95260;
  qword_1ED8038D0 = (uint64_t)&qword_1ED8038B8;
  llvm::cl::Option::setArgStr(v6, "dataflow-edge-limit", 0x13uLL);
  word_1ED803822 = (32 * (*a1 & 3)) | word_1ED803822 & 0xFF9F;
  dword_1ED803898 = **a2;
  byte_1ED8038AC = 1;
  dword_1ED8038A8 = dword_1ED803898;
  xmmword_1ED803838 = *a3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED803818);
}

void llvm::initializeUnreachableBlockElimLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED8304C8);
  if (v2 != -1)
  {
    v5[0] = sub_1C52D4CE4;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED8304C8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t llvm::createUnreachableBlockEliminationPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C52D4D74(v1);
}

void llvm::initializeUnreachableMachineBlockElimPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED8304D0);
  if (v2 != -1)
  {
    v5[0] = sub_1C52D4EB8;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED8304D0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

unint64_t llvm::EVT::changeExtendedTypeToInteger(llvm::EVT *this)
{
  llvm::EVT *v1;
  uint64_t ExtendedSizeInBits;
  const char *v3;
  llvm::LLVMContext *v4;
  llvm::LLVMContext *v6;

  v1 = (llvm::EVT *)**((_QWORD **)this + 1);
  if (*(_BYTE *)this)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)this);
  else
    ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits(this);
  v4 = (llvm::LLVMContext *)ExtendedSizeInBits;
  if ((_DWORD)v3 == 1)
  {
    v6 = (llvm::LLVMContext *)ExtendedSizeInBits;
    v4 = v6;
  }
  return sub_1C4815B1C(v1, v4);
}

unint64_t llvm::EVT::changeExtendedVectorElementTypeToInteger(llvm::EVT *this, uint64_t a2, BOOL a3)
{
  llvm::EVT *v4;
  llvm::LLVMContext *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Type *v9;

  v4 = (llvm::EVT *)**((_QWORD **)this + 1);
  v5 = sub_1C6131328((unsigned __int8 *)this, a2, a3);
  v6 = sub_1C4815B1C(v4, v5);
  v8 = v7;
  v9 = (llvm::Type *)sub_1C52B71D4((unsigned __int8 *)this);
  return sub_1C47AC578(v4, v6, v8, v9);
}

unint64_t llvm::EVT::changeExtendedVectorElementType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::LLVMContext *v5;
  llvm::Type *v6;

  v5 = **(llvm::LLVMContext ***)(a1 + 8);
  v6 = (llvm::Type *)sub_1C52B71D4((unsigned __int8 *)a1);
  return sub_1C47AC578(v5, a2, a3, v6);
}

uint64_t llvm::EVT::getExtendedVectorVT(llvm::LLVMContext *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  llvm::FixedVectorType *v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  llvm::EVT::getTypeForEVT((llvm::EVT *)v10, a1);
  v8 = 0x100000000;
  if (!a5)
    v8 = 0;
  llvm::VectorType::get(v7, (llvm::Type *)(v8 | a4));
  return 0;
}

uint64_t llvm::EVT::getExtendedVectorVT(llvm::LLVMContext *a1, uint64_t a2, uint64_t a3, llvm::Type *a4)
{
  llvm::FixedVectorType *v5;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  llvm::EVT::getTypeForEVT((llvm::EVT *)v7, a1);
  llvm::VectorType::get(v5, a4);
  return 0;
}

BOOL llvm::EVT::isExtendedFloatingPoint(llvm::EVT *this)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *((_QWORD *)this + 1);
  if ((*(_DWORD *)(v1 + 8) & 0xFE) == 0x12)
    v2 = *(unsigned __int8 *)(**(_QWORD **)(v1 + 16) + 8);
  else
    v2 = *(_DWORD *)(v1 + 8);
  return v2 < 7;
}

BOOL llvm::EVT::isExtendedScalarInteger(llvm::EVT *this)
{
  return *(_BYTE *)(*((_QWORD *)this + 1) + 8) == 13;
}

BOOL llvm::EVT::isExtendedFixedLengthVector(llvm::EVT *this)
{
  return *(_BYTE *)(*((_QWORD *)this + 1) + 8) == 18;
}

unint64_t llvm::EVT::getExtendedVectorElementType(llvm::EVT *this, uint64_t a2, BOOL a3)
{
  return llvm::EVT::getEVT(*(llvm::EVT **)(*((_QWORD *)this + 1) + 24), 0, a3);
}

uint64_t llvm::EVT::getExtendedVectorNumElements(llvm::EVT *this)
{
  uint64_t v1;
  uint64_t v2;
  llvm::raw_ostream *v3;

  v1 = *((_QWORD *)this + 1);
  v2 = *(unsigned int *)(v1 + 32);
  if (*(_BYTE *)(v1 + 8) == 19)
  {
    v3 = llvm::WithColor::warning(this);
    sub_1C4816AD8(v3, "The code that requested the fixed number of elements has made the assumption that this vector is not scalable. This assumption was not correct, and this may lead to broken code\n");
  }
  return v2;
}

unint64_t llvm::EVT::getExtendedVectorElementCount(llvm::EVT *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 32) | ((unint64_t)(*(_BYTE *)(*((_QWORD *)this + 1) + 8) == 19) << 32);
}

unint64_t sub_1C621D708(uint64_t a1, uint64_t a2, BOOL a3)
{
  unint64_t EVT;
  unint64_t v4;

  if (*(_BYTE *)a1)
  {
    LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)a1);
    v4 = 0;
  }
  else
  {
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(*(_QWORD *)(a1 + 8) + 24), 0, a3);
    v4 = EVT & 0xFFFFFFFFFFFFFF00;
  }
  return v4 | EVT;
}

void llvm::initializeVirtRegMapPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED8304D8);
  if (v2 != -1)
  {
    v5[0] = sub_1C52D9238;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED8304D8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

llvm::raw_ostream *llvm::VirtRegMap::print(llvm::VirtRegMap *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  llvm::raw_ostream *result;
  int v6;
  int i;
  uint64_t v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  void (**v14)(void);
  uint64_t (**v15)(void);
  int v16;
  int j;
  uint64_t v18;
  _BYTE *v19;
  llvm::raw_ostream *v20;
  llvm::raw_ostream *v21;
  llvm::raw_ostream *v22;
  llvm::raw_ostream *v23;
  llvm::raw_ostream *v24;
  uint64_t (**v25)(void);
  _BYTE *v26;
  _QWORD v27[3];
  _QWORD *v28;
  _QWORD v29[3];
  llvm::raw_ostream *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  result = sub_1C4816AD8(a2, "********** REGISTER MAP **********\n");
  v6 = *(_DWORD *)(*((_QWORD *)this + 31) + 32);
  if (!v6)
    goto LABEL_35;
  for (i = 0; i != v6; ++i)
  {
    v8 = i & 0x7FFFFFFF;
    if (!*(_DWORD *)(*((_QWORD *)this + 35) + 4 * v8))
      continue;
    v9 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v9 >= *((_QWORD *)a2 + 3))
    {
      v10 = llvm::raw_ostream::write(a2, 91);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v9 + 1;
      *v9 = 91;
      v10 = a2;
    }
    llvm::printReg(i | 0x80000000, *((_QWORD *)this + 33), 0, 0, (uint64_t)v29);
    if (!v30
      || ((*(void (**)(llvm::raw_ostream *, llvm::raw_ostream *))(*(_QWORD *)v30 + 48))(v30, v10),
          v11 = sub_1C4816AD8(v10, " -> "),
          llvm::printReg(*(_DWORD *)(*((_QWORD *)this + 35) + 4 * v8), *((_QWORD *)this + 33), 0, 0, (uint64_t)v27),
          !v28))
    {
LABEL_39:
      sub_1C485C2F0();
    }
    (*(void (**)(_QWORD *, llvm::raw_ostream *))(*v28 + 48))(v28, v11);
    v12 = sub_1C4816AD8(v11, "] ");
    v13 = sub_1C4816AD8(v12, (char *)(*(_QWORD *)(*((_QWORD *)this + 33) + 80)+ *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 24) + 16 * v8) & 0xFFFFFFFFFFFFFFF8)+ 16)));
    sub_1C4816AD8(v13, "\n");
    if (v28 == v27)
    {
      v14 = (void (**)(void))(v27[0] + 32);
    }
    else
    {
      if (!v28)
        goto LABEL_13;
      v14 = (void (**)(void))(*v28 + 40);
    }
    (*v14)();
LABEL_13:
    result = v30;
    if (v30 == (llvm::raw_ostream *)v29)
    {
      v15 = (uint64_t (**)(void))(v29[0] + 32);
    }
    else
    {
      if (!v30)
        continue;
      v15 = (uint64_t (**)(void))(*(_QWORD *)v30 + 40);
    }
    result = (llvm::raw_ostream *)(*v15)();
  }
  v16 = *(_DWORD *)(*((_QWORD *)this + 31) + 32);
  if (v16)
  {
    for (j = 0; v16 != j; ++j)
    {
      v18 = j & 0x7FFFFFFF;
      if (*(_DWORD *)(*((_QWORD *)this + 38) + 4 * v18) != 0x3FFFFFFF)
      {
        v19 = (_BYTE *)*((_QWORD *)a2 + 4);
        if ((unint64_t)v19 >= *((_QWORD *)a2 + 3))
        {
          v20 = llvm::raw_ostream::write(a2, 91);
        }
        else
        {
          *((_QWORD *)a2 + 4) = v19 + 1;
          *v19 = 91;
          v20 = a2;
        }
        llvm::printReg(j | 0x80000000, *((_QWORD *)this + 33), 0, 0, (uint64_t)v29);
        if (!v30)
          goto LABEL_39;
        (*(void (**)(llvm::raw_ostream *, llvm::raw_ostream *))(*(_QWORD *)v30 + 48))(v30, v20);
        v21 = sub_1C4816AD8(v20, " -> fi#");
        v22 = llvm::raw_ostream::operator<<(v21, *(int *)(*((_QWORD *)this + 38) + 4 * v18));
        v23 = sub_1C4816AD8(v22, "] ");
        v24 = sub_1C4816AD8(v23, (char *)(*(_QWORD *)(*((_QWORD *)this + 33) + 80)+ *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 24) + 16 * v18) & 0xFFFFFFFFFFFFFFF8)+ 16)));
        sub_1C4816AD8(v24, "\n");
        result = v30;
        if (v30 == (llvm::raw_ostream *)v29)
        {
          v25 = (uint64_t (**)(void))(v29[0] + 32);
          goto LABEL_33;
        }
        if (v30)
        {
          v25 = (uint64_t (**)(void))(*(_QWORD *)v30 + 40);
LABEL_33:
          result = (llvm::raw_ostream *)(*v25)();
        }
      }
    }
  }
LABEL_35:
  v26 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v26 >= *((_QWORD *)a2 + 3))
    return llvm::raw_ostream::write(a2, 10);
  *((_QWORD *)a2 + 4) = v26 + 1;
  *v26 = 10;
  return result;
}

uint64_t llvm::VirtRegMap::dump(llvm::VirtRegMap *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return (*(uint64_t (**)(llvm::VirtRegMap *, llvm *, _QWORD))(*(_QWORD *)this + 40))(this, v2, 0);
}

void llvm::initializeVirtRegRewriterPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED803C98);
  if (v2 != -1)
  {
    v5[0] = sub_1C52D97B8;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED803C98, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t llvm::createVirtRegRewriter(llvm *this)
{
  char v1;
  uint64_t v2;
  uint64_t result;

  v1 = (char)this;
  v2 = operator new();
  result = sub_1C4776848(v2, (uint64_t)&unk_1EF8F7028);
  *(_QWORD *)result = &off_1E814D810;
  *(_QWORD *)(result + 312) = 0;
  *(_QWORD *)(result + 320) = 0;
  *(_DWORD *)(result + 328) = 0;
  *(_BYTE *)(result + 336) = v1;
  return result;
}

void sub_1C621DC34(llvm::Pass *a1)
{
  sub_1C621DCF0(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C621DC58(llvm::MachineFunctionPass *this, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  return llvm::MachineFunctionPass::getAnalysisUsage(this, a2);
}

double llvm::callDefaultCtor<llvm::VirtRegMap>()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&llvm::VirtRegMap::ID);
  *(_QWORD *)v1 = &off_1E814D750;
  result = 0.0;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_QWORD *)(v1 + 280) = v1 + 296;
  *(_QWORD *)(v1 + 288) = 0;
  *(_DWORD *)(v1 + 296) = 0;
  *(_QWORD *)(v1 + 304) = v1 + 320;
  *(_QWORD *)(v1 + 312) = 0;
  *(_DWORD *)(v1 + 320) = 0x3FFFFFFF;
  *(_QWORD *)(v1 + 328) = v1 + 344;
  *(_QWORD *)(v1 + 336) = 0;
  *(_DWORD *)(v1 + 344) = 0;
  *(_QWORD *)(v1 + 352) = 0;
  *(_QWORD *)(v1 + 360) = 0;
  *(_DWORD *)(v1 + 368) = 0;
  return result;
}

void sub_1C621DCF0(llvm::Pass *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *(_QWORD *)a1 = &off_1E814D750;
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 44), 8);
  v2 = (_QWORD *)*((_QWORD *)a1 + 41);
  if (v2 != (_QWORD *)((char *)a1 + 344))
    free(v2);
  v3 = (_QWORD *)*((_QWORD *)a1 + 38);
  if (v3 != (_QWORD *)((char *)a1 + 320))
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)a1 + 35);
  if (v4 != (_QWORD *)((char *)a1 + 296))
    free(v4);
  sub_1C4926674(a1);
}

void llvm::initializeWasmEHPreparePass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED803CA0);
  if (v2 != -1)
  {
    v5[0] = sub_1C52DB674;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED803CA0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

double llvm::createWasmEHPass(llvm *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = &unk_1EF8F2F98;
  *(_DWORD *)(v1 + 24) = 2;
  *(_QWORD *)v1 = &off_1E814D8D0;
  result = 0.0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_QWORD *)(v1 + 128) = 0;
  return result;
}

_QWORD *sub_1C621DE24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  int v16;
  unsigned int v17;
  unint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];

  v4 = a2 & 0xFFFFFFFFFFFFFFFBLL;
  v19 = (_BYTE *)(a2 & 0xFFFFFFFFFFFFFFFBLL);
  v5 = a3 & 0xFFFFFFFFFFFFFFFBLL;
  sub_1C52DD004(a1, &v19)[1] = a3 & 0xFFFFFFFFFFFFFFFBLL;
  v8 = *(_QWORD *)(a1 + 24);
  v7 = a1 + 24;
  v6 = v8;
  v9 = *(_DWORD *)(v7 + 16);
  if (v9)
  {
    v11 = v9 - 1;
    v12 = v11 & (37 * v5);
    v13 = *(_QWORD *)(v6 + 72 * v12);
    if (v5 == v13)
      goto LABEL_7;
    v16 = 1;
    while (v13 != -4096)
    {
      v17 = v12 + v16++;
      v12 = v17 & v11;
      v13 = *(_QWORD *)(v6 + 72 * v12);
      if (v5 == v13)
        goto LABEL_7;
    }
  }
  v19 = v23;
  v20 = v23;
  v21 = 4;
  v22 = 0;
  v18 = v5;
  v10 = sub_1C621DFE4((uint64_t *)v7, &v18) + 1;
  if (&v19 != v10)
    llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)v10, 4, (double *)&v19);
  if (v20 != v19)
    free(v20);
LABEL_7:
  v19 = (_BYTE *)v5;
  v14 = sub_1C621DFE4((uint64_t *)v7, &v19);
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)(v14 + 1), v4);
}

uint64_t sub_1C621DF40(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = (37 * *a2) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 72 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 72 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C621DFE4(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C621DF40(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C621E05C((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 5;
    v5[2] = v5 + 5;
    v5[3] = 4;
    *((_DWORD *)v5 + 8) = 0;
  }
  return v5;
}

_QWORD *sub_1C621E05C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C52DD3D4(a1, v7);
  v9 = 0;
  sub_1C621DF40((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void sub_1C621E108(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  _QWORD *v12;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 72 * v6;
    do
    {
      *v7 = -4096;
      v7 += 9;
      v8 -= 72;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      sub_1C621DF40((uint64_t *)a1, a2, &v12);
      v9 = v12;
      v10 = v12 + 5;
      *v12 = *a2;
      llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(v9 + 1), v10, 4, a2 + 1);
      ++*(_DWORD *)(a1 + 8);
      v11 = (void *)a2[2];
      if (v11 != (void *)a2[1])
        free(v11);
    }
    a2 += 9;
  }
}

void llvm::initializeWinEHPreparePass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED803CA8);
  if (v2 != -1)
  {
    v5[0] = sub_1C52DD498;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED803CA8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t llvm::createWinEHPass(llvm *this)
{
  char v1;
  uint64_t result;

  v1 = (char)this;
  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F2FA0;
  *(_DWORD *)(result + 24) = 2;
  *(_QWORD *)result = &off_1E814D970;
  *(_BYTE *)(result + 28) = v1;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_DWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 96) = 0;
  return result;
}

uint64_t *llvm::calculateSEHStateNumbers(uint64_t *this, const llvm::Function *a2, llvm::WinEHFuncInfo *a3)
{
  llvm *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  if (!*((_DWORD *)a2 + 114))
  {
    v4 = (llvm *)this;
    v5 = this + 9;
    v6 = (uint64_t *)this[10];
    if (v6 != this + 9)
    {
      do
      {
        if (v6)
          v7 = v6 - 3;
        else
          v7 = 0;
        v8 = v7[6];
        v9 = v8 - 24;
        if (!v8)
          v9 = 0;
        v10 = *(unsigned __int8 *)(v9 + 16);
        v11 = v7[6];
        if (v10 == 83)
        {
          v11 = v7[6];
          do
          {
            v11 = *(_QWORD *)(v11 + 8);
            v12 = v11 - 24;
            if (!v11)
              v12 = 0;
          }
          while (*(_BYTE *)(v12 + 16) == 83);
        }
        v13 = v7 + 5;
        v14 = *(unsigned __int8 *)(v11 - 8) - 38;
        v15 = v14 > 0x38;
        v16 = (1 << v14) & 0x100060000000001;
        if (!v15 && v16 != 0)
        {
          while (1)
          {
            v18 = v8 - 24;
            v19 = v8 ? v8 - 24 : 0;
            if (*(_BYTE *)(v19 + 16) != 83)
              break;
            v8 = *(_QWORD *)(v8 + 8);
            if ((uint64_t *)v8 == v13)
            {
              v18 = 0;
              break;
            }
          }
          if (sub_1C52DD528(v18))
            sub_1C52DD5E0((uint64_t)a2, v18, 0xFFFFFFFFLL);
        }
        v6 = (uint64_t *)v6[1];
      }
      while (v6 != v5);
    }
    return sub_1C52DDA40(v4, (uint64_t)a2);
  }
  return this;
}

uint64_t *llvm::calculateWinCXXEHStateNumbers(uint64_t *this, const llvm::Function *a2, llvm::WinEHFuncInfo *a3)
{
  llvm *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  if (!*((_DWORD *)a2 + 2))
  {
    v4 = (llvm *)this;
    v5 = this + 9;
    v6 = (uint64_t *)this[10];
    if (v6 != this + 9)
    {
      do
      {
        if (v6)
          v7 = v6 - 3;
        else
          v7 = 0;
        v8 = v7[6];
        v9 = v8 - 24;
        if (!v8)
          v9 = 0;
        v10 = *(unsigned __int8 *)(v9 + 16);
        v11 = v7[6];
        if (v10 == 83)
        {
          v11 = v7[6];
          do
          {
            v11 = *(_QWORD *)(v11 + 8);
            v12 = v11 - 24;
            if (!v11)
              v12 = 0;
          }
          while (*(_BYTE *)(v12 + 16) == 83);
        }
        v13 = v7 + 5;
        v14 = *(unsigned __int8 *)(v11 - 8) - 38;
        v15 = v14 > 0x38;
        v16 = (1 << v14) & 0x100060000000001;
        if (!v15 && v16 != 0)
        {
          while (1)
          {
            v18 = v8 - 24;
            v19 = v8 ? v8 - 24 : 0;
            if (*(_BYTE *)(v19 + 16) != 83)
              break;
            v8 = *(_QWORD *)(v8 + 8);
            if ((uint64_t *)v8 == v13)
            {
              v18 = 0;
              break;
            }
          }
          if (sub_1C52DD528(v18))
            sub_1C52DDC94((uint64_t)a2, v18, 0xFFFFFFFF);
        }
        v6 = (uint64_t *)v6[1];
      }
      while (v6 != v5);
    }
    return sub_1C52DDA40(v4, (uint64_t)a2);
  }
  return this;
}

uint64_t sub_1C621E53C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_1C51E3E94(a1, a2, a3);
  v4 = *(_QWORD *)a1 + 16 * v3;
  *(_QWORD *)v4 = a2;
  *(_DWORD *)(v4 + 8) = a3;
  *(_DWORD *)(a1 + 8) = v3 + 1;
  return a1;
}

_QWORD *llvm::WinEHFuncInfo::addIPToStateRange(llvm::WinEHFuncInfo *this, const llvm::InvokeInst *a2, llvm::MCSymbol *a3, llvm::MCSymbol *a4)
{
  int v6;
  _QWORD *result;
  llvm::MCSymbol *v8;
  const llvm::InvokeInst *v9;

  v8 = a3;
  v9 = a2;
  v6 = *((_DWORD *)sub_1C6144C70((uint64_t)this + 48, (uint64_t *)&v9) + 2);
  result = sub_1C61F8928((uint64_t)this + 72, (uint64_t *)&v8);
  *((_DWORD *)result + 2) = v6;
  result[2] = a4;
  return result;
}

__n128 llvm::WinEHFuncInfo::WinEHFuncInfo(__n128 *this)
{
  __n128 result;

  this->n128_u64[0] = 0;
  this->n128_u64[1] = 0;
  this[1].n128_u32[0] = 0;
  this[1].n128_u64[1] = 0;
  this[2].n128_u64[0] = 0;
  this[2].n128_u32[2] = 0;
  this[3].n128_u64[0] = 0;
  this[3].n128_u64[1] = 0;
  this[4].n128_u32[0] = 0;
  this[4].n128_u64[1] = 0;
  this[5].n128_u64[0] = 0;
  this[5].n128_u32[2] = 0;
  this[6].n128_u64[0] = (unint64_t)this[7].n128_u64;
  this[6].n128_u64[1] = 0x400000000;
  this[11].n128_u64[0] = (unint64_t)this[12].n128_u64;
  this[11].n128_u64[1] = 0x400000000;
  this[28].n128_u64[0] = (unint64_t)this[29].n128_u64;
  this[28].n128_u64[1] = 0x400000000;
  this[35].n128_u64[0] = (unint64_t)this[36].n128_u64;
  this[35].n128_u64[1] = 0x400000000;
  result.n128_u64[0] = 0x8000000080000000;
  result.n128_u64[1] = 0x8000000080000000;
  this[42] = result;
  this[43].n128_u64[0] = 0x8000000080000000;
  return result;
}

uint64_t sub_1C621E630(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_1C52E1318(&v3);
  MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  return a1;
}

uint64_t *sub_1C621E674(uint64_t *result)
{
  uint64_t *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  v2 = *((_DWORD *)result + 2);
  if (v2 || *((_DWORD *)result + 3))
  {
    v3 = *((unsigned int *)result + 4);
    if (v3 > 4 * v2 && v3 >= 0x41)
      return sub_1C52E3274(result);
    if (!(_DWORD)v3)
    {
LABEL_12:
      v1[1] = 0;
      return result;
    }
    v4 = 16 * v3;
    result = (uint64_t *)(*result + 8);
    while (1)
    {
      v5 = *(result - 1);
      if (v5 == -8192)
        goto LABEL_10;
      if (v5 != -4096)
        break;
LABEL_11:
      result += 2;
      v4 -= 16;
      if (!v4)
        goto LABEL_12;
    }
    result = sub_1C619127C(result);
LABEL_10:
    *(result - 1) = -4096;
    goto LABEL_11;
  }
  return result;
}

void sub_1C621E714(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  sub_1C4ECAD30((_DWORD *)a1);
  v2 = *(_QWORD *)(a1 + 24);
  for (i = *(_QWORD *)(a1 + 32); i != v2; i -= 32)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  *(_QWORD *)(a1 + 32) = v2;
}

uint64_t sub_1C621E764(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v13 = *a2;
  v14 = 0;
  sub_1C52E1494(a1, &v13, &v14, (uint64_t)&v11);
  v4 = v11;
  if (v12)
  {
    v8 = (unint64_t)*a2;
    v9 = 0;
    v10 = 0;
    sub_1C52E1390((uint64_t *)(a1 + 24), &v8);
    if (*((_QWORD *)&v8 + 1))
      operator delete(*((void **)&v8 + 1));
    v5 = *(_QWORD *)(a1 + 24);
    v6 = ((unint64_t)(*(_QWORD *)(a1 + 32) - v5) >> 5) - 1;
    *(_DWORD *)(v4 + 8) = v6;
  }
  else
  {
    v6 = *(_DWORD *)(v11 + 8);
    v5 = *(_QWORD *)(a1 + 24);
  }
  return v5 + 32 * v6 + 8;
}

uint64_t *sub_1C621E810(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = (_QWORD *)a2[1];
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 32);
    v2 -= 32;
    *(v4 - 4) = v5;
    v4 -= 4;
    v4[2] = 0;
    v4[3] = 0;
    v4[1] = 0;
    *(_OWORD *)(v4 + 1) = *(_OWORD *)(v2 + 8);
    v4[3] = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
  }
  a2[1] = v4;
  v6 = *result;
  *result = (uint64_t)v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1C621E888(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 32;
    v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1C621E8EC(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 64, &v5);
  sub_1C621E958((uint64_t *)a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C621E958(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v4 = *a1;
    v5 = *a1 + (v2 << 6);
    v6 = (_QWORD *)(a2 + 16);
    v7 = v4 + 16;
    do
    {
      v9 = v7 - 16;
      v8 = *(_QWORD *)(v7 - 16);
      *((_DWORD *)v6 - 2) = *(_DWORD *)(v7 - 8);
      *(v6 - 2) = v8;
      *v6 = v6 + 2;
      v6[1] = 0x100000000;
      if (*(_DWORD *)(v7 + 8))
        v6 = (_QWORD *)sub_1C621EA20((uint64_t)v6, v7);
      v6 += 8;
      v7 += 64;
    }
    while (v9 + 64 != v5);
    v10 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v10)
    {
      v11 = *a1;
      v12 = v10 << 6;
      do
      {
        v13 = *(void **)(v11 + v12 - 48);
        if ((void *)(v11 + v12 - 32) != v13)
          free(v13);
        v12 -= 64;
      }
      while (v12);
    }
  }
}

uint64_t sub_1C621EA20(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_6;
    }
    v7 = (_DWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*(void **)a1, v4, 32 * v9);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)a1, v4, 32 * v10);
LABEL_12:
        v11 = *v7;
        if (v10 != v11)
          memcpy((void *)(*(_QWORD *)a1 + 32 * v10), (const void *)(*(_QWORD *)a2 + 32 * v10), *(_QWORD *)a2 + 32 * v11 - (*(_QWORD *)a2 + 32 * v10));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v9;
LABEL_6:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v9, 32);
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

uint64_t sub_1C621EB34(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 32 * v4);
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 32 * v5);
LABEL_6:
        v6 = *(unsigned int *)(a2 + 8);
        if (v5 != v6)
          memcpy((void *)(*(_QWORD *)a1 + 32 * v5), (const void *)(*(_QWORD *)a2 + 32 * v5), *(_QWORD *)a2 + 32 * v6 - (*(_QWORD *)a2 + 32 * v5));
LABEL_10:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 32);
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

unsigned int *sub_1C621EBFC(unsigned int *result, char *a2, uint64_t (*a3)(uint64_t), char *a4)
{
  char *v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v6 = a2;
  v7 = result;
  v8 = a4 - a2;
  v9 = result[2];
  v10 = v9 + ((a4 - a2) >> 5);
  if (v10 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v10, 8);
    v9 = v7[2];
  }
  if (v6 != a4)
  {
    v11 = (_QWORD *)(*(_QWORD *)v7 + 8 * v9);
    do
    {
      v12 = *(_QWORD *)v6;
      v6 += 32;
      result = (unsigned int *)a3(v12);
      *v11++ = result;
    }
    while (v6 != a4);
    LODWORD(v9) = v7[2];
  }
  v7[2] = v9 + (v8 >> 5);
  return result;
}

void llvm::initializeXRayInstrumentationPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED803EF0);
  if (v2 != -1)
  {
    v5[0] = sub_1C52E3820;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED803EF0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void llvm::initializeLiveDebugValuesPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED803EF8);
  if (v2 != -1)
  {
    v5[0] = sub_1C52E5480;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED803EF8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void sub_1C621ED58(__int128 *a1)
{
  uint64_t v2;

  v2 = sub_1C47AD050((uint64_t)&qword_1ED8304E0, 0, 0);
  dword_1ED830560 = 0;
  qword_1ED830568 = (uint64_t)&unk_1E819E900;
  unk_1ED830570 = 0;
  qword_1ED8304E0 = (uint64_t)&unk_1E8140060;
  qword_1ED830578 = (uint64_t)&unk_1E819E920;
  qword_1ED830580 = (uint64_t)&unk_1E81400C8;
  qword_1ED830598 = (uint64_t)&qword_1ED830580;
  llvm::cl::Option::setArgStr(v2, "experimental-debug-variable-locations", 0x25uLL);
  xmmword_1ED830500 = *a1;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED8304E0);
}

void sub_1C621EDF4(__int128 *a1, int **a2, _WORD *a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED803FC0, 0, 0);
  dword_1ED804040 = 0;
  qword_1ED804048 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED804050 = 0;
  qword_1ED803FC0 = (uint64_t)&unk_1E819E3B0;
  qword_1ED804058 = (uint64_t)&unk_1E819E2C0;
  qword_1ED804060 = (uint64_t)&off_1E7F95260;
  qword_1ED804078 = (uint64_t)&qword_1ED804060;
  llvm::cl::Option::setArgStr(v6, "livedebugvalues-input-bb-limit", 0x1EuLL);
  xmmword_1ED803FE0 = *a1;
  dword_1ED804040 = **a2;
  byte_1ED804054 = 1;
  dword_1ED804050 = dword_1ED804040;
  word_1ED803FCA = (32 * (*a3 & 3)) | word_1ED803FCA & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED803FC0);
}

void sub_1C621EED0(__int128 *a1, int **a2, _WORD *a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED804080, 0, 0);
  dword_1ED804100 = 0;
  qword_1ED804108 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED804110 = 0;
  qword_1ED804080 = (uint64_t)&unk_1E819E3B0;
  qword_1ED804118 = (uint64_t)&unk_1E819E2C0;
  qword_1ED804120 = (uint64_t)&off_1E7F95260;
  qword_1ED804138 = (uint64_t)&qword_1ED804120;
  llvm::cl::Option::setArgStr(v6, "livedebugvalues-input-dbg-value-limit", 0x25uLL);
  xmmword_1ED8040A0 = *a1;
  dword_1ED804100 = **a2;
  byte_1ED804114 = 1;
  dword_1ED804110 = dword_1ED804100;
  word_1ED80408A = (32 * (*a3 & 3)) | word_1ED80408A & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED804080);
}

double llvm::makeVarLocBasedLiveDebugValues(llvm *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = off_1E814DBC8;
  *(_QWORD *)(v1 + 40) = v1 + 56;
  *(_QWORD *)(v1 + 48) = 0x600000000;
  *(_DWORD *)(v1 + 104) = 0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_QWORD *)(v1 + 144) = 0;
  *(_DWORD *)(v1 + 152) = 1065353216;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_DWORD *)(v1 + 192) = 1065353216;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_DWORD *)(v1 + 232) = 1065353216;
  *(_QWORD *)(v1 + 240) = v1 + 256;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(v1 + 248) = 0x400000000;
  *(_QWORD *)(v1 + 288) = 0;
  *(_QWORD *)(v1 + 296) = 0;
  *(_DWORD *)(v1 + 312) = 0;
  *(_QWORD *)(v1 + 304) = 0;
  *(_QWORD *)(v1 + 320) = 0;
  *(_QWORD *)(v1 + 328) = 0;
  *(_QWORD *)(v1 + 336) = 0;
  *(_QWORD *)(v1 + 344) = v1 + 360;
  *(_QWORD *)(v1 + 352) = 0x400000000;
  *(_QWORD *)(v1 + 392) = v1 + 408;
  *(_QWORD *)(v1 + 400) = 0;
  *(_QWORD *)(v1 + 408) = 0;
  *(_QWORD *)(v1 + 416) = 1;
  return result;
}

uint64_t sub_1C621F060(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a2 - 1;
  if (a2 != 1)
  {
    v8 = result;
    v9 = (int)v4;
    v10 = a3 - 4;
    v11 = result - 8;
    do
    {
      v12 = *(_DWORD *)(a3 + 4 * v9);
      v13 = *(_DWORD *)(a4 + 4 * v9);
      if (v12 != v13)
      {
        v14 = v9;
        do
        {
          if (!v14)
            break;
          result = sub_1C52EDAAC(*(_QWORD *)(v8 + 8 * v9), v12, *(_QWORD *)(v11 + 8 * v14), *(_DWORD *)(v10 + 4 * v14), v13 - v12);
          *(_DWORD *)(v10 + 4 * v14) -= result;
          v12 = *(_DWORD *)(a3 + 4 * v9) + result;
          *(_DWORD *)(a3 + 4 * v9) = v12;
          v13 = *(_DWORD *)(a4 + 4 * v9);
          --v14;
        }
        while (v12 < v13);
      }
      --v9;
    }
    while ((_DWORD)v9);
    if (a2 >= 2)
    {
      v15 = 0;
      v16 = 1;
      do
      {
        v17 = *(_DWORD *)(a3 + 4 * v15);
        v18 = *(_DWORD *)(a4 + 4 * v15);
        if (v17 != v18)
        {
          v19 = v16;
          do
          {
            if (a2 == v19)
              break;
            v20 = v15;
            v21 = v16;
            result = sub_1C52EDAAC(*(_QWORD *)(v8 + 8 * v19), *(_DWORD *)(a3 + 4 * v19), *(_QWORD *)(v8 + 8 * v15), v17, v17 - v18);
            v16 = v21;
            v15 = v20;
            *(_DWORD *)(a3 + 4 * v19) += result;
            v17 = *(_DWORD *)(a3 + 4 * v20) - result;
            *(_DWORD *)(a3 + 4 * v20) = v17;
            v18 = *(_DWORD *)(a4 + 4 * v20);
            ++v19;
          }
          while (v17 < v18);
        }
        ++v15;
        v16 = (v16 + 1);
      }
      while (v15 != v4);
    }
  }
  return result;
}

__n128 sub_1C621F1A8(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  __n128 result;
  uint64_t v10;
  uint64_t v11;

  if (a4)
  {
    v5 = (a4 - 1);
    v6 = -a4;
    do
    {
      v7 = (a5 + v5);
      result = *(__n128 *)(a3 + 16 * v5);
      *(__n128 *)(a3 + 16 * v7) = result;
      *(_BYTE *)(a3 + v7 + 176) = *(_BYTE *)(a3 + v5-- + 176);
    }
    while (!__CFADD__(v6++, 1));
  }
  if (a5)
  {
    v10 = 0;
    do
    {
      v11 = (a2 - a5 + v10);
      result = *(__n128 *)(a1 + 16 * v11);
      *(__n128 *)(a3 + 16 * v10) = result;
      *(_BYTE *)(a3 + v10++ + 176) = *(_BYTE *)(a1 + v11 + 176);
    }
    while (a5 != (_DWORD)v10);
  }
  return result;
}

__n128 sub_1C621F21C(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t i;
  uint64_t v6;
  __n128 result;
  uint64_t v8;
  uint64_t v9;

  if (a5)
  {
    for (i = 0; i != a5; *(_BYTE *)(a3 + v6 + 176) = *(_BYTE *)(a1 + i++ + 176))
    {
      v6 = (a4 + i);
      result = *(__n128 *)(a1 + 16 * i);
      *(__n128 *)(a3 + 16 * v6) = result;
    }
  }
  if (a2 != a5)
  {
    v8 = 0;
    do
    {
      v9 = (a5 + v8);
      result = *(__n128 *)(a1 + 16 * v9);
      *(__n128 *)(a1 + 16 * v8) = result;
      *(_BYTE *)(a1 + v8++ + 176) = *(_BYTE *)(a1 + v9 + 176);
    }
    while (a2 - a5 != (_DWORD)v8);
  }
  return result;
}

uint64_t sub_1C621F290(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(unsigned int *)(a1 + 196);
  v5 = *(unint64_t **)(a1 + 200);
  v6 = *v5;
  if (*v5)
    *v5 = *(_QWORD *)v6;
  else
    v6 = sub_1C484358C((uint64_t)(v5 + 1), 192, 6);
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  if ((_DWORD)v4)
  {
    v7 = (uint64_t *)(a1 + 96);
    v8 = (_QWORD *)v6;
    v9 = v4;
    do
    {
      *v8 = *(v7 - 11);
      v10 = *v7++;
      v8[12] = v10;
      ++v8;
      --v9;
    }
    while (v9);
  }
  v11 = (v4 - 1);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFC0 | v11 & 0xFFFFFFFFFFFFFFC0)
                                   + 8 * v11
                                   + 0x60);
  *(_QWORD *)(a1 + 8) = v6 & 0xFFFFFFFFFFFFFFC0 | v11;
  ++*(_DWORD *)(a1 + 192);
  *(_DWORD *)(a1 + 196) = 1;
  return a2 << 32;
}

uint64_t sub_1C621F360(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  v4 = a2 - 1;
  if (a2 != 1)
  {
    v8 = result;
    v9 = a3 - 4;
    v10 = result - 8;
    v11 = a2 - 1;
    do
    {
      v12 = *(_DWORD *)(a3 + 4 * v11);
      v13 = *(_DWORD *)(a4 + 4 * v11);
      if (v12 != v13)
      {
        v14 = v11;
        do
        {
          if (!v14)
            break;
          result = sub_1C5100B94(*(_QWORD **)(v8 + 8 * v11), v12, *(_QWORD *)(v10 + 8 * v14), *(_DWORD *)(v9 + 4 * v14), v13 - v12);
          *(_DWORD *)(v9 + 4 * v14) -= result;
          v12 = *(_DWORD *)(a3 + 4 * v11) + result;
          *(_DWORD *)(a3 + 4 * v11) = v12;
          v13 = *(_DWORD *)(a4 + 4 * v11);
          --v14;
        }
        while (v12 < v13);
      }
      --v11;
    }
    while ((_DWORD)v11);
    if (a2 >= 2)
    {
      v15 = 0;
      v16 = 1;
      do
      {
        v17 = *(_DWORD *)(a3 + 4 * v15);
        v18 = *(_DWORD *)(a4 + 4 * v15);
        if (v17 != v18)
        {
          v19 = v16;
          do
          {
            if (a2 == v19)
              break;
            result = sub_1C5100B94(*(_QWORD **)(v8 + 8 * v19), *(_DWORD *)(a3 + 4 * v19), *(_QWORD *)(v8 + 8 * v15), v17, v17 - v18);
            *(_DWORD *)(a3 + 4 * v19) += result;
            v17 = *(_DWORD *)(a3 + 4 * v15) - result;
            *(_DWORD *)(a3 + 4 * v15) = v17;
            v18 = *(_DWORD *)(a4 + 4 * v15);
            ++v19;
          }
          while (v17 < v18);
        }
        ++v15;
        ++v16;
      }
      while (v15 != v4);
    }
  }
  return result;
}

_OWORD *sub_1C621F4A4(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  void **v5;
  _OWORD *v6;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = (void **)sub_1C4E296BC(a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v8 = v5;
    v6 = operator new(0x30uLL);
    v6[2] = *a3;
    v9 = v12;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v9;
    *v8 = v6;
    v10 = **(_QWORD **)a1;
    v11 = (uint64_t *)v6;
    if (v10)
    {
      *(_QWORD *)a1 = v10;
      v11 = (uint64_t *)*v8;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v11);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

_OWORD *sub_1C621F54C(_QWORD **a1, _QWORD *a2, unint64_t *a3, _OWORD *a4)
{
  void **v6;
  _OWORD *v7;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = (void **)sub_1C52EE4CC(a1, a2, &v14, &v13, a3);
  v7 = *v6;
  if (!*v6)
  {
    v9 = v6;
    v7 = operator new(0x30uLL);
    v7[2] = *a4;
    v10 = v14;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v10;
    *v9 = v7;
    v11 = (_QWORD *)**a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      v12 = (uint64_t *)*v9;
    }
    sub_1C4768E74(a1[1], v12);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_1C621F5F8(uint64_t a1)
{
  int v1;
  _QWORD *v2;
  _BYTE *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[32];
  void *v34;
  uint64_t v35;
  _QWORD v36[5];

  v36[4] = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 192);
  if (v1)
  {
    v2 = v36;
    v34 = v36;
    v35 = 0x400000000;
    v3 = v33;
    v31 = v33;
    v32 = 0x400000000;
    LODWORD(v4) = *(_DWORD *)(a1 + 196);
    if ((_DWORD)v4)
    {
      LODWORD(v4) = 0;
      v5 = 0;
      v6 = a1 + 8;
      do
      {
        v7 = *(_QWORD *)(v6 + 8 * v5);
        if (v4 >= HIDWORD(v35))
        {
          v14 = a1;
          v28 = v2;
          v15 = v3;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, (uint64_t)v2, v4 + 1, 8);
          a1 = v14;
          v3 = v15;
          v2 = v28;
          LODWORD(v4) = v35;
        }
        *((_QWORD *)v34 + v4) = v7;
        LODWORD(v4) = v35 + 1;
        LODWORD(v35) = v35 + 1;
        ++v5;
      }
      while (v5 != *(_DWORD *)(a1 + 196));
      v1 = *(_DWORD *)(a1 + 192);
    }
    v8 = v1 - 1;
    if (v8)
    {
      v27 = v8;
      v29 = v2;
      v30 = a1;
      v26 = (uint64_t)v3;
      do
      {
        v16 = v35;
        if ((_DWORD)v35)
        {
          v17 = 0;
          v18 = v34;
          v19 = v32;
          do
          {
            v20 = 0;
            v21 = 8 * (v18[v17] & 0x3FLL) + 8;
            do
            {
              v22 = *(_QWORD *)((*((_QWORD *)v34 + v17) & 0xFFFFFFFFFFFFFFC0) + v20);
              if (v19 >= HIDWORD(v32))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v26, v19 + 1, 8);
                v19 = v32;
              }
              *((_QWORD *)v31 + v19) = v22;
              v19 = v32 + 1;
              LODWORD(v32) = v32 + 1;
              v20 += 8;
            }
            while (v21 != v20);
            v18 = v34;
            v23 = (_QWORD *)(*((_QWORD *)v34 + v17) & 0xFFFFFFFFFFFFFFC0);
            v24 = *(_QWORD **)(v30 + 200);
            *v23 = *v24;
            *v24 = v23;
            ++v17;
          }
          while (v17 != v16);
        }
        LODWORD(v35) = 0;
        sub_1C50FDE40(&v34, (uint64_t)&v31);
        --v27;
      }
      while (v27);
      LODWORD(v4) = v35;
      v2 = v29;
      a1 = v30;
      v3 = (_BYTE *)v26;
    }
    if ((_DWORD)v4)
    {
      v4 = v4;
      v9 = (uint64_t *)v34;
      v10 = *(unint64_t **)(a1 + 200);
      v11 = *v10;
      do
      {
        v12 = *v9++;
        v13 = v12 & 0xFFFFFFFFFFFFFFC0;
        *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFC0) = v11;
        v11 = v12 & 0xFFFFFFFFFFFFFFC0;
        --v4;
      }
      while (v4);
      *v10 = v13;
    }
    if (v31 != v3)
    {
      v25 = v2;
      free(v31);
      v2 = v25;
    }
    if (v34 != v2)
      free(v34);
  }
}

uint64_t llvm::IntervalMap<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>::deleteNode(uint64_t result, uint64_t a2)
{
  unint64_t *v2;

  v2 = *(unint64_t **)(result + 200);
  *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFC0) = *v2;
  *v2 = a2 & 0xFFFFFFFFFFFFFFC0;
  return result;
}

uint64_t LiveDebugValues::MLocTracker::getOrTrackSpillLoc(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;

  v4 = a1 + 184;
  v5 = sub_1C6224424(a1 + 184, a2);
  if ((uint64_t *)(a1 + 192) != v5)
  {
    v6 = *((_DWORD *)v5 + 14);
    if (v6)
      goto LABEL_3;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3) >= dword_1ED804280)
  {
    v7 = 0;
    v6 = 0;
    return v7 | v6;
  }
  v9 = sub_1C621F9FC(v4, (uint64_t)a2);
  v6 = v9;
  v10 = *(_DWORD *)(a1 + 240);
  if (v10)
  {
    v11 = 0;
    v12 = v9 - 1;
    do
    {
      v13 = *(_DWORD *)(a1 + 236);
      v14 = *(unsigned int *)(a1 + 40);
      if ((_DWORD)v14 == -1)
      {
        v15 = 0;
      }
      else
      {
        v15 = v14 + 1;
        sub_1C62243A8((unsigned int *)(a1 + 32), 1, *(_QWORD *)(a1 + 48));
      }
      v16 = *(unsigned int *)(a1 + 96);
      if (v15 > v16)
        sub_1C53048D8(a1 + 88, v15 - v16, *(_DWORD *)(a1 + 104));
      v17 = *(_DWORD **)(a1 + 72);
      if ((unint64_t)v17 >= *(_QWORD *)(a1 + 80))
      {
        v18 = sub_1C527C67C((char **)(a1 + 64), v14);
      }
      else
      {
        *v17 = v14;
        v18 = (char *)(v17 + 1);
      }
      *(_QWORD *)(a1 + 72) = v18;
      *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * v14) = v11 + v13 + v10 * v12;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v14) = *(_DWORD *)(a1 + 232) & 0xFFFFF | (unint64_t)(v14 << 40);
      ++v11;
      v10 = *(_DWORD *)(a1 + 240);
      v7 = 0x100000000;
    }
    while (v11 < v10);
  }
  else
  {
LABEL_3:
    v7 = 0x100000000;
  }
  return v7 | v6;
}

uint64_t sub_1C621F9FC(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  char *v9;
  _OWORD *v10;

  v10 = (_OWORD *)a2;
  v4 = sub_1C62244E0(a1, (int *)a2, &v10);
  result = *((unsigned int *)v4 + 14);
  if (!(_DWORD)result)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    *((_DWORD *)v4 + 14) = -1431655765 * ((v6 - *(_QWORD *)(a1 + 24)) >> 3) + 1;
    if (v6 >= v7)
    {
      v9 = sub_1C4DCFAFC((void **)(a1 + 24), a2);
    }
    else
    {
      v8 = *(_OWORD *)a2;
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v6 = v8;
      v9 = (char *)(v6 + 24);
    }
    *(_QWORD *)(a1 + 32) = v9;
    return *((unsigned int *)v4 + 14);
  }
  return result;
}

void sub_1C621FAA0(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  char v4;
  uint64_t *v5;
  const char *v6;
  __int16 v7;
  uint64_t v8[4];
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12[5];
  uint64_t v13;
  uint64_t *v14;
  char v15;
  char v16;
  uint64_t v17[5];
  uint64_t v18[5];
  const char *v19;
  __int16 v20;
  uint64_t v21[5];
  uint64_t v22;
  uint64_t *v23;
  __int16 v24;
  uint64_t v25[5];
  const char *v26;
  __int16 v27;
  _BYTE v28[40];

  v26 = "Value{bb: ";
  v27 = 259;
  v24 = 268;
  v22 = a2 & 0xFFFFF;
  v23 = &v22;
  v19 = ", inst: ";
  v20 = 259;
  if ((a2 & 0xFFFFF00000) != 0)
  {
    v13 = (a2 >> 20) & 0xFFFFF;
    v4 = 12;
    v5 = &v13;
  }
  else
  {
    v4 = 3;
    v5 = (uint64_t *)"live-in";
  }
  v16 = 1;
  v14 = v5;
  v15 = v4;
  v10 = ", loc: ";
  v11 = 259;
  v9 = 260;
  v8[0] = a3;
  sub_1C4825FE4((uint64_t *)&v10, v8, (uint64_t)v12);
  sub_1C4825FE4((uint64_t *)&v14, v12, (uint64_t)v17);
  v6 = "}";
  v7 = 259;
  sub_1C4825FE4(v17, (uint64_t *)&v6, (uint64_t)v18);
  sub_1C4825FE4((uint64_t *)&v19, v18, (uint64_t)v21);
  sub_1C4825FE4((uint64_t *)&v23, v21, (uint64_t)v25);
  sub_1C4825FE4((uint64_t *)&v26, v25, (uint64_t)v28);
  llvm::Twine::str((llvm::Twine *)v28, a1);
}

llvm::MachineFunction *LiveDebugValues::MLocTracker::emitLoc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  const llvm::DILocation *Impl;
  llvm::MachineInstr *v11;
  llvm::MachineFunction *v12;
  llvm::MachineInstr *v13;
  llvm::MDNode *v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  llvm::DIVariable *v21;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  llvm::MDNode *v27;
  unint64_t SizeInBits;
  char v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  llvm::MDNode *v33;
  unsigned int v34;
  _BOOL4 isComplex;
  unsigned __int8 *v36;
  __int128 v37;
  __int128 v38;
  void *v39[2];
  _QWORD v40[3];

  v40[2] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  v9 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 4) != 0)
    v9 = (uint64_t *)*v9;
  Impl = (const llvm::DILocation *)llvm::DILocation::getImpl(v9, 0, 0, *(_QWORD *)(*(_QWORD *)a3 - 8 * *(unsigned int *)(*(_QWORD *)a3 + 8)), *(_QWORD *)(a3 + 32), 0, 0, 1);
  llvm::DebugLoc::DebugLoc((llvm::DebugLoc *)&v36, Impl);
  v12 = sub_1C5169B3C(*(llvm::MachineFunction **)a1, &v36, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 624);
  v13 = v11;
  v14 = *(llvm::MDNode **)a4;
  if ((a2 & 0xFF00000000) == 0)
    goto LABEL_8;
  v15 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * a2);
  v16 = *(_DWORD *)(a1 + 236);
  v17 = v15 >= v16;
  v18 = v15 - v16;
  if (!v17)
  {
    *((_QWORD *)&v37 + 1) = 0;
    v38 = 0uLL;
    LODWORD(v37) = 0;
    DWORD1(v37) = v15;
    llvm::MachineInstr::addOperand(v11, v12, (const llvm::MachineOperand *)&v37);
    if (*(_BYTE *)(a4 + 8))
    {
LABEL_6:
      LODWORD(v37) = 1;
      *((_QWORD *)&v37 + 1) = 0;
      *(_QWORD *)&v38 = 0;
LABEL_10:
      llvm::MachineInstr::addOperand(v13, v12, (const llvm::MachineOperand *)&v37);
      goto LABEL_11;
    }
LABEL_9:
    v37 = 0u;
    v38 = 0u;
    goto LABEL_10;
  }
  v19 = *(_DWORD *)(a1 + 240);
  v20 = v18 / v19;
  if (*((_WORD *)sub_1C49796E4(*(_QWORD *)(a1 + 800), *(_DWORD *)(a1 + 816), v18 % v19) + 3))
  {
LABEL_8:
    v37 = 0u;
    v38 = 0u;
    llvm::MachineInstr::addOperand(v13, v12, (const llvm::MachineOperand *)&v37);
    goto LABEL_9;
  }
  v23 = *(_QWORD *)(a1 + 208);
  v24 = *(_DWORD *)(v23 + 24 * v20);
  *((_QWORD *)&v37 + 1) = 0;
  v38 = 0uLL;
  LODWORD(v37) = 0;
  DWORD1(v37) = v24;
  llvm::MachineInstr::addOperand(v13, v12, (const llvm::MachineOperand *)&v37);
  v25 = sub_1C621FF1C(a1, a2);
  v26 = v25;
  if (*(_BYTE *)(a3 + 24))
  {
    if (v25 != *(_DWORD *)(a3 + 8) || llvm::DIExpression::isComplex(v14))
    {
      if (!*(_BYTE *)(a4 + 8))
        goto LABEL_18;
      goto LABEL_24;
    }
  }
  else
  {
    SizeInBits = llvm::DIVariable::getSizeInBits(*(llvm::DIVariable **)a3);
    if (v29)
    {
      v30 = SizeInBits != v26;
      goto LABEL_23;
    }
  }
  v30 = 0;
LABEL_23:
  if (*(_BYTE *)(a4 + 8))
  {
LABEL_24:
    v31 = *(_QWORD *)(a1 + 16);
    v32 = v23 + 24 * v20 + 8;
    v33 = v14;
    v34 = 2;
    goto LABEL_25;
  }
  if (!v30)
  {
    isComplex = llvm::DIExpression::isComplex(v14);
    v31 = *(_QWORD *)(a1 + 16);
    v32 = v23 + 24 * v20 + 8;
    v33 = v14;
    if (isComplex)
    {
      v14 = llvm::TargetRegisterInfo::prependOffsetExpression(v31, v14, 2u, v32);
      goto LABEL_9;
    }
    v34 = 0;
LABEL_25:
    v14 = llvm::TargetRegisterInfo::prependOffsetExpression(v31, v33, v34, v32);
    goto LABEL_6;
  }
LABEL_18:
  v39[0] = v40;
  v40[0] = 148;
  v40[1] = v26 >> 3;
  v39[1] = (void *)0x200000002;
  v27 = llvm::DIExpression::prependOpcodes(v14, (unsigned int *)v39, 1, 0);
  v14 = llvm::TargetRegisterInfo::prependOffsetExpression(*(_QWORD *)(a1 + 16), v27, 4u, v23 + 24 * v20 + 8);
  v37 = 0u;
  v38 = 0u;
  llvm::MachineInstr::addOperand(v13, v12, (const llvm::MachineOperand *)&v37);
  if (v39[0] != v40)
    free(v39[0]);
LABEL_11:
  v21 = *(llvm::DIVariable **)a3;
  LODWORD(v37) = 14;
  *((_QWORD *)&v37 + 1) = 0;
  *(_QWORD *)&v38 = v21;
  llvm::MachineInstr::addOperand(v13, v12, (const llvm::MachineOperand *)&v37);
  LODWORD(v37) = 14;
  *((_QWORD *)&v37 + 1) = 0;
  *(_QWORD *)&v38 = v14;
  llvm::MachineInstr::addOperand(v13, v12, (const llvm::MachineOperand *)&v37);
  if (v36)
    llvm::MetadataTracking::untrack((uint64_t)&v36, v36);
  return v12;
}

uint64_t sub_1C621FF1C(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * a2);
  v3 = *(_DWORD *)(a1 + 236);
  if (v2 >= v3)
    return *((unsigned __int16 *)sub_1C49796E4(*(_QWORD *)(a1 + 800), *(_DWORD *)(a1 + 816), (v2 - v3) % *(_DWORD *)(a1 + 240))+ 2);
  else
    return llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(a1 + 16), v2, *(_QWORD *)(*(_QWORD *)a1 + 40));
}

double LiveDebugValues::InstrRefBasedLDV::InstrRefBasedLDV(LiveDebugValues::InstrRefBasedLDV *this)
{
  double result;

  *(_QWORD *)this = &off_1E814DBF0;
  *((_QWORD *)this + 7) = (char *)this + 72;
  *((_QWORD *)this + 8) = 0x600000000;
  *((_DWORD *)this + 30) = 0;
  result = 0.0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_DWORD *)this + 62) = 1065353216;
  *((_QWORD *)this + 32) = (char *)this + 272;
  *((_QWORD *)this + 33) = 0x400000000;
  *((_QWORD *)this + 44) = 0;
  *((_OWORD *)this + 19) = 0u;
  *((_DWORD *)this + 82) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_BYTE *)this + 384) = 0;
  *((_OWORD *)this + 23) = 0u;
  *((_QWORD *)this + 49) = (char *)this + 424;
  *((_QWORD *)this + 50) = (char *)this + 424;
  *((_QWORD *)this + 51) = 16;
  *((_DWORD *)this + 104) = 0;
  *((_DWORD *)this + 142) = 0;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((_DWORD *)this + 148) = 0;
  *((_OWORD *)this + 36) = 0u;
  *((_DWORD *)this + 154) = 0;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_QWORD *)this + 78) = (char *)this + 632;
  *((_QWORD *)this + 81) = (char *)this + 664;
  *((_QWORD *)this + 82) = 0x2000000000;
  *((_BYTE *)this + 2016) = 0;
  *(_OWORD *)((char *)this + 1944) = 0u;
  *((_DWORD *)this + 490) = 0;
  *((_DWORD *)this + 496) = 0;
  *((_OWORD *)this + 123) = 0u;
  *((_DWORD *)this + 502) = 0;
  *(_OWORD *)((char *)this + 1992) = 0u;
  *(_OWORD *)((char *)this + 2024) = 0u;
  return result;
}

uint64_t LiveDebugValues::InstrRefBasedLDV::isCalleeSaved(_QWORD *a1, unsigned int a2)
{
  unsigned int v3;
  uint64_t v4;
  _QWORD *v5;
  _DWORD v8[4];
  char v9;
  uint64_t v10;
  unsigned __int16 v11;

  v3 = *(_DWORD *)(*(_QWORD *)(a1[44] + 88) + 4 * a2);
  v4 = a1[2];
  if (v4)
    v5 = (_QWORD *)(v4 + 8);
  else
    v5 = 0;
  sub_1C48385F4((uint64_t)v8, v3, v5, 1);
  if (!v10)
    return 0;
LABEL_5:
  while (((*(_QWORD *)(a1[7] + (((unint64_t)v11 >> 3) & 0x1FF8)) >> v11) & 1) == 0)
  {
    while (1)
    {
      sub_1C48386F0((uint64_t)v8);
      if (v9 || v10 == 0)
        break;
      if (v8[0] != v11)
        goto LABEL_5;
    }
    if (!v10)
      return 0;
  }
  return 1;
}

uint64_t LiveDebugValues::InstrRefBasedLDV::extractSpillBaseRegAndOffset(LiveDebugValues::InstrRefBasedLDV *this, const llvm::MachineInstr *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v3 = *((_QWORD *)a2 + 6);
  if ((v3 & 7) != 0)
  {
    v4 = *(_QWORD **)((v3 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)a2 + 6) = v4;
  }
  v5 = *(unsigned int *)((*v4 & ((uint64_t)(*v4 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) + 0x10);
  v6 = *((_QWORD *)a2 + 3);
  v14 = 0;
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, int *))(**((_QWORD **)this + 5) + 232))(*((_QWORD *)this + 5), *(_QWORD *)(v6 + 32), v5, &v14);
  v8 = *((_QWORD *)this + 44);
  v11 = v14;
  v12 = v7;
  v13 = v9;
  return LiveDebugValues::MLocTracker::getOrTrackSpillLoc(v8, &v11);
}

uint64_t LiveDebugValues::InstrRefBasedLDV::findLocationForMemOperand(LiveDebugValues::InstrRefBasedLDV *this, const llvm::MachineInstr *a2)
{
  unint64_t SpillBaseRegAndOffset;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unsigned __int16 v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD v20[2];

  SpillBaseRegAndOffset = LiveDebugValues::InstrRefBasedLDV::extractSpillBaseRegAndOffset(this, a2);
  v5 = HIDWORD(SpillBaseRegAndOffset);
  if (HIDWORD(SpillBaseRegAndOffset))
  {
    v9 = SpillBaseRegAndOffset;
    v10 = *((_QWORD *)a2 + 6);
    if ((v10 & 7) != 0)
    {
      v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v11 = v10 & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a2 + 6) = v10 & 0xFFFFFFFFFFFFFFF8;
    }
    v13 = *(_QWORD *)(v11 + 24);
    v12 = (unint64_t *)(v11 + 24);
    if ((v13 & 0xFFFFFFFFFFFFFFF9) != 0)
    {
      v20[0] = sub_1C4825F50(v12);
      v20[1] = v15;
      v14 = llvm::TypeSize::operator unsigned long long(v20, v15);
    }
    else
    {
      v14 = -1;
    }
    v16 = *((_QWORD *)this + 44);
    v20[0] = 0;
    if ((sub_1C6222AD8(*(_QWORD *)(v16 + 776), *(_DWORD *)(v16 + 792), v14, 0, v20) & 1) != 0)
      v17 = v20[0];
    else
      v17 = *(_QWORD *)(v16 + 776) + 8 * *(unsigned int *)(v16 + 792);
    v18 = *((_QWORD *)this + 44);
    if (v17 != *(_QWORD *)(v18 + 776) + 8 * *(unsigned int *)(v18 + 792))
    {
      v19 = *(_DWORD *)(*(_QWORD *)(v18 + 64)
                      + 4
                      * (*(_DWORD *)(v17 + 4) + *(_DWORD *)(v18 + 240) * (v9 - 1) + *(_DWORD *)(v18 + 236)));
      v7 = v19 & 0xFFFFFF00;
      v6 = v19;
      v5 = 0x100000000;
      return v5 | v7 | v6;
    }
    v5 = 0;
  }
  v6 = 0;
  v7 = 0;
  return v5 | v7 | v6;
}

uint64_t sub_1C62202D8(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, char a5)
{
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  _OWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  int v30;
  __int128 v31;
  int v32;
  _BOOL4 v33;
  _BYTE v34[20];
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v10 = **(unsigned __int16 **)(a2 + 16);
  v11 = v10 == 14;
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(v12 + ((unint64_t)(v10 != 14) << 6) + 16);
  v14 = 96;
  if (v11)
    v14 = 32;
  v15 = *(_QWORD *)(v12 + v14 + 16);
  v16 = *(_QWORD *)(a2 + 56);
  if (*(_DWORD *)(v16 + 8) == 2)
    v17 = *(_QWORD *)(v16 - 8);
  else
    v17 = 0;
  *(_QWORD *)&v35 = v13;
  if (v15)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v15 + 24), *(uint64_t **)(v15 + 32), (int8x16_t *)((char *)&v35 + 8));
  }
  else
  {
    BYTE8(v35) = 0;
    BYTE8(v36) = 0;
  }
  v37 = v17;
  v11 = a5 == 0;
  v18 = a5 != 0;
  if (v11)
    a4 = LiveDebugValues::ValueIDNum::EmptyValue;
  *(_OWORD *)&v34[4] = *a3;
  v25[0] = v35;
  v25[1] = v36;
  v26 = v17;
  v27 = a4;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = *(_OWORD *)v34;
  v32 = *(_DWORD *)&v34[16];
  v33 = v18;
  v19 = sub_1C6221864((_QWORD *)a1, (uint64_t)v25);
  if (!v20)
  {
    *(_QWORD *)(v19 + 40) = a4;
    *(_BYTE *)(v19 + 48) = 0;
    *(_BYTE *)(v19 + 80) = 0;
    *(_DWORD *)(v19 + 88) = 0;
    *(_OWORD *)(v19 + 92) = *(_OWORD *)v34;
    *(_DWORD *)(v19 + 108) = *(_DWORD *)&v34[16];
    *(_DWORD *)(v19 + 112) = v18;
  }
  v21 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(sub_1C6223E14((_DWORD *)(a1 + 48), (uint64_t)&v35) + 40) = v21;
  return sub_1C6221958(a1, (uint64_t)&v35, *(_QWORD *)(a2 + 56), v22, v23);
}

uint64_t sub_1C622043C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  _OWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  char v30;
  int v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v6 = **(unsigned __int16 **)(a2 + 16);
  v7 = v6 == 14;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(v8 + ((unint64_t)(v6 != 14) << 6) + 16);
  v10 = 96;
  if (v7)
    v10 = 32;
  v11 = *(_QWORD *)(v8 + v10 + 16);
  v12 = *(_QWORD *)(a2 + 56);
  if (*(_DWORD *)(v12 + 8) == 2)
    v13 = *(_QWORD *)(v12 - 8);
  else
    v13 = 0;
  *(_QWORD *)&v37 = v9;
  if (v11)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v11 + 24), *(uint64_t **)(v11 + 32), (int8x16_t *)((char *)&v37 + 8));
  }
  else
  {
    BYTE8(v37) = 0;
    BYTE8(v38) = 0;
  }
  v39 = v13;
  v14 = *(_BYTE *)(v8 + 32) == 1;
  v15 = LiveDebugValues::ValueIDNum::EmptyValue;
  v16 = a3[1];
  v35 = *a3;
  v36 = v16;
  v25[0] = v37;
  v25[1] = v38;
  v26 = v13;
  v27 = LiveDebugValues::ValueIDNum::EmptyValue;
  v17 = a3[1];
  v28 = *a3;
  v29 = v17;
  v30 = 1;
  v31 = 0;
  v32 = v11;
  v33 = v14;
  v34 = 2;
  v18 = sub_1C6221864((_QWORD *)a1, (uint64_t)v25);
  if (!v19)
  {
    *(_QWORD *)(v18 + 40) = v15;
    v20 = v36;
    *(_OWORD *)(v18 + 48) = v35;
    *(_OWORD *)(v18 + 64) = v20;
    *(_BYTE *)(v18 + 80) = 1;
    *(_DWORD *)(v18 + 88) = 0;
    *(_QWORD *)(v18 + 96) = v11;
    *(_BYTE *)(v18 + 104) = v14;
    *(_DWORD *)(v18 + 112) = 2;
  }
  v21 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(sub_1C6223E14((_DWORD *)(a1 + 48), (uint64_t)&v37) + 40) = v21;
  return sub_1C6221958(a1, (uint64_t)&v37, *(_QWORD *)(a2 + 56), v22, v23);
}

int32x2_t sub_1C62205A0(uint64_t a1, uint64_t a2)
{
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int32x2_t result;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  int8x16_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v4 = **(unsigned __int16 **)(a2 + 16);
  v5 = v4 == 14;
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(v6 + ((unint64_t)(v4 != 14) << 6) + 16);
  v8 = 96;
  if (v5)
    v8 = 32;
  v9 = *(_QWORD *)(v6 + v8 + 16);
  v10 = *(_QWORD *)(a2 + 56);
  if (*(_DWORD *)(v10 + 8) == 2)
    v11 = *(_QWORD *)(v10 - 8);
  else
    v11 = 0;
  v18 = v7;
  if (v9)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v9 + 24), *(uint64_t **)(v9 + 32), &v19);
  }
  else
  {
    v19.i8[0] = 0;
    v20 = 0;
  }
  v21 = v11;
  v16 = v9;
  v17 = *(_BYTE *)(v6 + 32) == 1;
  if (*(_BYTE *)v6 || (v12 = *(unsigned int *)(v6 + 4), !(_DWORD)v12))
  {
    v22 = 0;
    if (sub_1C52FE43C(*(_QWORD *)(a1 + 2400), *(_DWORD *)(a1 + 2416), &v18, &v22))
    {
      v14 = v22;
      if (v22 != *(_QWORD *)(a1 + 2400) + ((unint64_t)*(unsigned int *)(a1 + 2416) << 6))
      {
        v15 = sub_1C6221D58(a1 + 2376, (int *)(v22 + 40));
        sub_1C52FE378((uint64_t)(v15 + 2), (unint64_t *)&v18);
        *(_QWORD *)(v14 + 8) = 0;
        *(_QWORD *)(v14 + 16) = 0;
        *(_QWORD *)v14 = 0;
        *(_BYTE *)(v14 + 24) = 1;
        *(_QWORD *)(v14 + 32) = 0;
        *(int32x2_t *)(a1 + 2408) = vadd_s32(*(int32x2_t *)(a1 + 2408), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    return sub_1C6221CF8(a1 + 2496, &v18);
  }
  else
  {
    sub_1C52F2A10(a1, a2, &v16, *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 64) + 4 * v12) | 0x100000000);
  }
  return result;
}

uint64_t sub_1C6220714(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  __int128 v6;
  uint64_t v7;
  _DWORD *v8;
  __int128 *v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21[7];

  v6 = *(_OWORD *)(a2 + 16);
  v16 = *(_OWORD *)a2;
  v15 = a4;
  v17 = v6;
  v7 = *a3;
  v18 = *(_QWORD *)(a2 + 32);
  v19 = v7;
  v20 = *((_BYTE *)a3 + 8);
  v21[0] = (a4 >> 20) & 0xFFFFF;
  v8 = sub_1C6222574(a1 + 2472, v21);
  v9 = (__int128 *)sub_1C52FE940((uint64_t)(v8 + 2), (unint64_t)&v15);
  v10 = (_OWORD *)(*((_QWORD *)v8 + 1) + ((unint64_t)v8[4] << 6));
  v11 = *v9;
  v12 = v9[1];
  v13 = v9[3];
  v10[2] = v9[2];
  v10[3] = v13;
  *v10 = v11;
  v10[1] = v12;
  ++v8[4];
  return sub_1C51B72F4(a1 + 2496, a2, (uint64_t)v21);
}

void sub_1C62207C8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD v5[2];
  void *v6[2];
  _QWORD v7[5];

  v7[4] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 2432))
  {
    v3 = a2;
    if (a3 && *(_QWORD *)(a3 + 56) == a2)
    {
      v3 = *(_QWORD *)(a3 + 56);
    }
    else
    {
      while ((*(_WORD *)(v3 + 44) & 4) != 0)
        v3 = *(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8;
    }
    v5[0] = v3;
    v5[1] = a3;
    v6[0] = v7;
    v6[1] = (void *)0x400000000;
    sub_1C49EEBE4((uint64_t)v6, a1 + 2424);
    sub_1C52FEA04(a1 + 40, (unint64_t)v5);
    if (v6[0] != v7)
      free(v6[0]);
    *(_DWORD *)(a1 + 2432) = 0;
  }
}

uint64_t sub_1C62208A0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _DWORD *v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _DWORD *v9;

  v2 = *(_QWORD *)(a2 + 48);
  if (v2 < 8)
    return 0;
  if ((v2 & 7) != 0)
  {
    v3 = (_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    v4 = (*(_QWORD *)(a2 + 48) & 7) != 3 || v3 == 0;
    if (v4 || *v3 != 1)
      return 0;
  }
  else
  {
    v2 &= 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a2 + 48) = v2;
  }
  if ((v2 & 7) != 0)
  {
    v5 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v5 = v2 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a2 + 48) = v2 & 0xFFFFFFFFFFFFFFF8;
  }
  if ((*(_WORD *)(v5 + 32) & 2) == 0)
    return 0;
  v6 = 0;
  v8 = *(_QWORD *)v5;
  if ((v8 & 4) != 0)
  {
    v9 = (_DWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if (v9)
    {
      if (v9[2] == 4)
        return (*(unsigned int (**)(_DWORD *, _QWORD))(*(_QWORD *)v9 + 32))(v9, *(_QWORD *)(a1 + 48)) ^ 1;
      return 0;
    }
  }
  return v6;
}

unint64_t LiveDebugValues::InstrRefBasedLDV::performCopy(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  LiveDebugValues::MLocTracker *v19;
  uint64_t v20;
  unint64_t result;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unsigned __int16 v27;
  unsigned __int16 *v28;
  uint64_t v29;
  unsigned int v30;
  LiveDebugValues::MLocTracker *v31;
  uint64_t v32;
  unsigned int v33;
  LiveDebugValues::MLocTracker *v34;
  uint64_t v35;
  int v36;
  _DWORD v37[4];
  char v38;
  uint64_t v39;
  unsigned int v40;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    v7 = (_QWORD *)(v6 + 8);
  else
    v7 = 0;
  v8 = a3;
  sub_1C48385F4((uint64_t)v37, a3, v7, 1);
  while (v39)
  {
LABEL_5:
    v9 = *(_QWORD *)(a1 + 352);
    v10 = (unsigned __int16)v40;
    v11 = *(_DWORD *)(a1 + 360);
    v12 = *(_DWORD *)(a1 + 364);
    v13 = *(_QWORD *)(v9 + 64);
    v14 = *(_DWORD *)(v13 + 4 * (unsigned __int16)v40);
    if (v14 == -1)
    {
      v14 = LiveDebugValues::MLocTracker::trackRegister(*(LiveDebugValues::MLocTracker **)(a1 + 352), (unsigned __int16)v40);
      *(_DWORD *)(v13 + 4 * v10) = v14;
    }
    *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v14) = *(_QWORD *)&v11 & 0xFFFFFLL | ((*(_QWORD *)&v12 & 0xFFFFFLL) << 20) | ((unint64_t)v14 << 40);
    while (1)
    {
      sub_1C48386F0((uint64_t)v37);
      if (v38 || v39 == 0)
        break;
      if (v37[0] != (unsigned __int16)v40)
        goto LABEL_5;
    }
  }
  v16 = *(_QWORD *)(a1 + 352);
  v17 = *(_QWORD *)(v16 + 64);
  v18 = *(_DWORD *)(v17 + 4 * a2);
  if (v18 == -1)
  {
    v18 = LiveDebugValues::MLocTracker::trackRegister(*(LiveDebugValues::MLocTracker **)(a1 + 352), a2);
    *(_DWORD *)(v17 + 4 * a2) = v18;
    v19 = *(LiveDebugValues::MLocTracker **)(a1 + 352);
    v17 = *((_QWORD *)v19 + 8);
  }
  else
  {
    v19 = *(LiveDebugValues::MLocTracker **)(a1 + 352);
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 8 * v18);
  result = *(unsigned int *)(v17 + 4 * a3);
  if ((_DWORD)result == -1)
  {
    result = LiveDebugValues::MLocTracker::trackRegister(v19, a3);
    *(_DWORD *)(v17 + 4 * a3) = result;
  }
  *(_QWORD *)(*((_QWORD *)v19 + 4) + 8 * result) = v20;
  v22 = *(_QWORD *)(a1 + 16);
  if (v22)
    v23 = (_QWORD *)(v22 + 8);
  else
    v23 = 0;
  v24 = v23[6];
  v25 = *(unsigned int *)(*v23 + 24 * a2 + 4);
  if (*(_WORD *)(v24 + 2 * v25))
  {
    v26 = (unsigned __int16 *)(v23[10] + 2 * *(unsigned int *)(*v23 + 24 * a2 + 12));
    v27 = *(_WORD *)(v24 + 2 * v25) + a2;
    v28 = (unsigned __int16 *)(v24 + 2 * v25 + 2);
    do
    {
      v29 = v27;
      result = llvm::MCRegisterInfo::getSubReg((_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v8, *v26);
      if ((_DWORD)result)
      {
        v30 = result;
        v31 = *(LiveDebugValues::MLocTracker **)(a1 + 352);
        v32 = *((_QWORD *)v31 + 8);
        if (*(_DWORD *)(v32 + 4 * v29) == -1)
        {
          *(_DWORD *)(v32 + 4 * v29) = LiveDebugValues::MLocTracker::trackRegister(*(LiveDebugValues::MLocTracker **)(a1 + 352), v29);
          v31 = *(LiveDebugValues::MLocTracker **)(a1 + 352);
          v32 = *((_QWORD *)v31 + 8);
        }
        if (*(_DWORD *)(v32 + 4 * v30) == -1)
        {
          *(_DWORD *)(v32 + 4 * v30) = LiveDebugValues::MLocTracker::trackRegister(v31, v30);
          v31 = *(LiveDebugValues::MLocTracker **)(a1 + 352);
          v32 = *((_QWORD *)v31 + 8);
        }
        v33 = *(_DWORD *)(v32 + 4 * v29);
        if (v33 == -1)
        {
          v33 = LiveDebugValues::MLocTracker::trackRegister(v31, v29);
          *(_DWORD *)(v32 + 4 * v29) = v33;
          v34 = *(LiveDebugValues::MLocTracker **)(a1 + 352);
          v32 = *((_QWORD *)v34 + 8);
        }
        else
        {
          v34 = v31;
        }
        v35 = *(_QWORD *)(*((_QWORD *)v31 + 4) + 8 * v33);
        result = *(unsigned int *)(v32 + 4 * v30);
        if ((_DWORD)result == -1)
        {
          result = LiveDebugValues::MLocTracker::trackRegister(v34, v30);
          *(_DWORD *)(v32 + 4 * v30) = result;
        }
        *(_QWORD *)(*((_QWORD *)v34 + 4) + 8 * result) = v35;
      }
      v36 = *v28++;
      v27 = v36 + v29;
      ++v26;
    }
    while (v36);
  }
  return result;
}

uint64_t LiveDebugValues::InstrRefBasedLDV::isSpillInstruction(const llvm::TargetInstrInfo **this, const llvm::MachineInstr *a2, llvm::MachineFunction *a3)
{
  unint64_t v3;
  _DWORD *v6;
  BOOL v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t SpillBaseRegAndOffset;

  v3 = *((_QWORD *)a2 + 6);
  if (v3 >= 8)
  {
    if ((v3 & 7) != 0)
    {
      v6 = (_DWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
      v7 = (*((_QWORD *)a2 + 6) & 7) != 3 || v6 == 0;
      if (v7 || *v6 != 1)
        goto LABEL_13;
    }
    else
    {
      v3 &= 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a2 + 6) = v3;
    }
    if ((v3 & 7) != 0)
    {
      v8 = *(_QWORD **)((v3 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v8 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
      *((_QWORD *)a2 + 6) = v8;
    }
    v9 = *v8 & ((uint64_t)(*v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
    if (((*(uint64_t (**)(unint64_t, const llvm::TargetInstrInfo *, llvm::MachineFunction *))(*(_QWORD *)v9 + 32))(v9, this[6], a3) & 1) == 0&& ((llvm::MachineInstr::getSpillSize(a2, this[4]) & 0xFF00000000) != 0|| (llvm::MachineInstr::getFoldedSpillSize(a2, this[4]) & 0xFF00000000) != 0))
    {
      SpillBaseRegAndOffset = LiveDebugValues::InstrRefBasedLDV::extractSpillBaseRegAndOffset((LiveDebugValues::InstrRefBasedLDV *)this, a2);
      v11 = SpillBaseRegAndOffset & 0x100000000;
      v12 = SpillBaseRegAndOffset & 0xFFFFFF00;
      v10 = SpillBaseRegAndOffset;
      return v11 | v10 | v12;
    }
  }
LABEL_13:
  v10 = 0;
  v11 = 0;
  v12 = 0;
  return v11 | v10 | v12;
}

uint64_t LiveDebugValues::InstrRefBasedLDV::isRestoreInstruction(const llvm::TargetInstrInfo **this, const llvm::MachineInstr *a2, llvm::MachineFunction *a3, unsigned int *a4)
{
  unint64_t v4;
  _DWORD *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t SpillBaseRegAndOffset;

  v4 = *((_QWORD *)a2 + 6);
  if (v4 >= 8)
  {
    if ((v4 & 7) != 0)
    {
      v8 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
      v9 = (*((_QWORD *)a2 + 6) & 7) != 3 || v8 == 0;
      if (v9 || *v8 != 1)
        goto LABEL_11;
    }
    else
    {
      *((_QWORD *)a2 + 6) = v4 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((llvm::MachineInstr::getRestoreSize(a2, this[4]) & 0xFF00000000) != 0)
    {
      *a4 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 4);
      SpillBaseRegAndOffset = LiveDebugValues::InstrRefBasedLDV::extractSpillBaseRegAndOffset((LiveDebugValues::InstrRefBasedLDV *)this, a2);
      v11 = SpillBaseRegAndOffset & 0x100000000;
      v12 = SpillBaseRegAndOffset & 0xFFFFFF00;
      v10 = SpillBaseRegAndOffset;
      return v11 | v10 | v12;
    }
  }
LABEL_11:
  v10 = 0;
  v11 = 0;
  v12 = 0;
  return v11 | v10 | v12;
}

uint64_t LiveDebugValues::InstrRefBasedLDV::transferSpillOrRestoreInst(LiveDebugValues::InstrRefBasedLDV *this, llvm::MachineInstr *a2)
{
  uint64_t result;
  llvm::MachineFunction *v5;
  unint64_t isSpillInstruction;
  llvm::MachineFunction *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  llvm::MachineFunction *v14;
  unsigned int v15;
  unint64_t isRestoreInstruction;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 v32;
  unsigned __int16 *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned __int16 v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  LiveDebugValues::MLocTracker *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  int SpillBaseRegAndOffset;
  uint64_t v55;
  _QWORD *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int16 v60;
  unsigned __int16 *v61;
  LiveDebugValues::MLocTracker *v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int SubRegIndex;
  unsigned int v66;
  int v67;
  unsigned __int16 RegSizeInBits;
  uint64_t v69;
  int v70;
  __int16 *v71;
  unint64_t v72[2];
  char v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76[2];
  int v77;
  int v78;

  if (byte_1ED8041C0)
    return 0;
  v77 = -1;
  if ((*(unsigned int (**)(_QWORD, llvm::MachineInstr *, int *))(**((_QWORD **)this + 4) + 112))(*((_QWORD *)this + 4), a2, &v77)|| (result = (*(uint64_t (**)(_QWORD, llvm::MachineInstr *, int *))(**((_QWORD **)this + 4) + 80))(*((_QWORD *)this + 4), a2, &v77), (_DWORD)result))
  {
    *(_QWORD *)v76 = 0;
    if ((*(unsigned int (**)(_QWORD, llvm::MachineInstr *, unsigned int *))(**((_QWORD **)this + 4) + 112))(*((_QWORD *)this + 4), a2, v76)|| (result = (*(uint64_t (**)(_QWORD, llvm::MachineInstr *, unsigned int *))(**((_QWORD **)this + 4)+ 80))(*((_QWORD *)this + 4), a2, v76), (_DWORD)result))
    {
      isSpillInstruction = LiveDebugValues::InstrRefBasedLDV::isSpillInstruction((const llvm::TargetInstrInfo **)this, a2, v5);
      if (HIDWORD(isSpillInstruction))
      {
        v8 = *((_QWORD *)this + 44);
        v9 = *(_DWORD *)(v8 + 240);
        if (v9)
        {
          v10 = 0;
          v11 = isSpillInstruction - 1;
          do
          {
            v12 = *(unsigned int *)(*(_QWORD *)(v8 + 64) + 4 * (v10 + *(_DWORD *)(v8 + 236) + v9 * v11));
            *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8 * v12) = *((_DWORD *)this + 90) & 0xFFFFFLL | ((*((_DWORD *)this + 91) & 0xFFFFFLL) << 20) | (v12 << 40);
            v13 = *((_QWORD *)this + 47);
            if (v13)
              sub_1C52F43AC(v13, v12, (unint64_t)a2, 1);
            ++v10;
            v8 = *((_QWORD *)this + 44);
            v9 = *(_DWORD *)(v8 + 240);
          }
          while (v10 < v9);
        }
      }
      if ((unint64_t)LiveDebugValues::InstrRefBasedLDV::isSpillInstruction((const llvm::TargetInstrInfo **)this, a2, v7) >> 32&& (LODWORD(v72[0]) = 0, v15 = (*(uint64_t (**)(_QWORD, llvm::MachineInstr *, unint64_t *))(**((_QWORD **)this + 4)+ 112))(*((_QWORD *)this + 4), a2, v72), (v76[1] = v15) != 0))
      {
        v53 = v15;
        SpillBaseRegAndOffset = LiveDebugValues::InstrRefBasedLDV::extractSpillBaseRegAndOffset(this, a2);
        v72[0] = (unint64_t)this;
        v72[1] = (unint64_t)a2;
        v55 = *((_QWORD *)this + 2);
        v56 = (_QWORD *)(v55 + 8);
        if (!v55)
          v56 = 0;
        v57 = v53;
        v58 = v56[6];
        v59 = *(unsigned int *)(*v56 + 24 * v53 + 4);
        if (*(_WORD *)(v58 + 2 * v59))
        {
          v60 = *(_WORD *)(v58 + 2 * v59) + v53;
          v61 = (unsigned __int16 *)(v58 + 2 * v59 + 2);
          do
          {
            v62 = (LiveDebugValues::MLocTracker *)*((_QWORD *)this + 44);
            v63 = v60;
            v64 = *((_QWORD *)v62 + 8);
            if (*(_DWORD *)(v64 + 4 * v60) == -1)
              *(_DWORD *)(v64 + 4 * v60) = LiveDebugValues::MLocTracker::trackRegister(v62, v60);
            SubRegIndex = llvm::MCRegisterInfo::getSubRegIndex((_QWORD *)(*((_QWORD *)this + 2) + 8), v53, v63);
            v66 = sub_1C6221208(*((_QWORD *)this + 44), SpillBaseRegAndOffset, SubRegIndex);
            sub_1C52F48D4(v72, v63, v66);
            v67 = *v61++;
            v60 = v67 + v63;
          }
          while (v67);
          v55 = *((_QWORD *)this + 2);
        }
        RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(v55, v53, *((_QWORD *)this + 3));
        v69 = *((_QWORD *)this + 44);
        v78 = RegSizeInBits;
        v70 = *(_DWORD *)(v69 + 240);
        v71 = sub_1C6222A6C(v69 + 776, (unsigned __int16 *)&v78);
        sub_1C52F48D4(v72, v57, *((_DWORD *)v71 + 1) + v70 * (SpillBaseRegAndOffset - 1) + *(_DWORD *)(v69 + 236));
      }
      else
      {
        isRestoreInstruction = LiveDebugValues::InstrRefBasedLDV::isRestoreInstruction((const llvm::TargetInstrInfo **)this, a2, v14, &v76[1]);
        if (!HIDWORD(isRestoreInstruction))
          return 0;
        v17 = isRestoreInstruction;
        v18 = v76[1];
        v19 = *((_QWORD *)this + 2);
        if (v19)
          v20 = (_QWORD *)(v19 + 8);
        else
          v20 = 0;
        sub_1C48385F4((uint64_t)v72, v76[1], v20, 1);
        while (v74)
        {
LABEL_20:
          v21 = *((_QWORD *)this + 44);
          v22 = (unsigned __int16)v75;
          v23 = *((_DWORD *)this + 90);
          v24 = *((_DWORD *)this + 91);
          v25 = *(_QWORD *)(v21 + 64);
          v26 = *(_DWORD *)(v25 + 4 * (unsigned __int16)v75);
          if (v26 == -1)
          {
            v26 = LiveDebugValues::MLocTracker::trackRegister(*((LiveDebugValues::MLocTracker **)this + 44), (unsigned __int16)v75);
            *(_DWORD *)(v25 + 4 * v22) = v26;
          }
          *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8 * v26) = *(_QWORD *)&v23 & 0xFFFFFLL | ((*(_QWORD *)&v24 & 0xFFFFFLL) << 20) | ((unint64_t)v26 << 40);
          while (1)
          {
            sub_1C48386F0((uint64_t)v72);
            if (v73 || v74 == 0)
              break;
            if (LODWORD(v72[0]) != (unsigned __int16)v75)
              goto LABEL_20;
          }
        }
        v28 = *((_QWORD *)this + 2);
        v29 = (_QWORD *)(v28 + 8);
        if (!v28)
          v29 = 0;
        v30 = v29[6];
        v31 = *(unsigned int *)(*v29 + 24 * v18 + 4);
        if (*(_WORD *)(v30 + 2 * v31))
        {
          v32 = *(_WORD *)(v30 + 2 * v31) + v18;
          v33 = (unsigned __int16 *)(v30 + 2 * v31 + 2);
          do
          {
            v34 = v32;
            v35 = llvm::MCRegisterInfo::getSubRegIndex((_QWORD *)(*((_QWORD *)this + 2) + 8), v18, v32);
            v36 = sub_1C6221208(*((_QWORD *)this + 44), v17, v35);
            v37 = *((_QWORD *)this + 44);
            v38 = *(_QWORD *)(v37 + 64);
            v39 = *(_QWORD *)(v37 + 32);
            v40 = *(_QWORD *)(v39 + 8 * *(unsigned int *)(v38 + 4 * v36));
            v41 = *(_DWORD *)(v38 + 4 * v34);
            if (v41 == -1)
            {
              v41 = LiveDebugValues::MLocTracker::trackRegister(*((LiveDebugValues::MLocTracker **)this + 44), v34);
              *(_DWORD *)(v38 + 4 * v34) = v41;
              v39 = *(_QWORD *)(v37 + 32);
            }
            *(_QWORD *)(v39 + 8 * v41) = v40;
            v42 = *v33++;
            v32 = v42 + v34;
          }
          while (v42);
          v28 = *((_QWORD *)this + 2);
        }
        v43 = llvm::TargetRegisterInfo::getRegSizeInBits(v28, v18, *((_QWORD *)this + 3));
        v44 = *((_QWORD *)this + 44);
        LODWORD(v72[0]) = v43;
        v45 = *(_DWORD *)(v44 + 240);
        v46 = *((_DWORD *)sub_1C6222A6C(v44 + 776, (unsigned __int16 *)v72) + 1)
            + v45 * (v17 - 1)
            + *(_DWORD *)(v44 + 236);
        v47 = (LiveDebugValues::MLocTracker *)*((_QWORD *)this + 44);
        v48 = *((_QWORD *)v47 + 8);
        v49 = *(unsigned int *)(v48 + 4 * v46);
        v50 = *((_QWORD *)v47 + 4);
        v51 = *(_QWORD *)(v50 + 8 * v49);
        v52 = *(_DWORD *)(v48 + 4 * v18);
        if (v52 == -1)
        {
          v52 = LiveDebugValues::MLocTracker::trackRegister(v47, v18);
          *(_DWORD *)(v48 + 4 * v18) = v52;
          v50 = *((_QWORD *)v47 + 4);
        }
        *(_QWORD *)(v50 + 8 * v52) = v51;
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_1C6221208(uint64_t a1, int a2, unsigned int a3)
{
  unsigned __int16 *v3;
  int v4;
  int v6;

  v3 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 96) + 4 * a3);
  v6 = v3[1] | (*v3 << 16);
  v4 = *(_DWORD *)(a1 + 240);
  return (*((_DWORD *)sub_1C6222A6C(a1 + 776, (unsigned __int16 *)&v6) + 1)
                      + v4 * (a2 - 1)
                      + *(_DWORD *)(a1 + 236));
}

void LiveDebugValues::InstrRefBasedLDV::process(LiveDebugValues::InstrRefBasedLDV *a1, llvm::MachineInstr *a2, uint64_t a3, uint64_t a4)
{
  if (!LiveDebugValues::InstrRefBasedLDV::transferDebugValue(a1, a2)
    && (LiveDebugValues::InstrRefBasedLDV::transferDebugInstrRef((uint64_t)a1, (unint64_t)a2, a3, a4) & 1) == 0
    && !LiveDebugValues::InstrRefBasedLDV::transferDebugPHI(a1, a2)
    && (LiveDebugValues::InstrRefBasedLDV::transferRegisterCopy(a1, a2) & 1) == 0
    && (LiveDebugValues::InstrRefBasedLDV::transferSpillOrRestoreInst(a1, a2) & 1) == 0)
  {
    LiveDebugValues::InstrRefBasedLDV::transferRegisterDef(a1, a2);
  }
}

_DWORD *sub_1C622130C(_DWORD *a1)
{
  int v2;
  _DWORD *v3;
  uint64_t v4;
  _DWORD *result;
  uint64_t v6;
  _DWORD *v7;

  v2 = *a1;
  if (*a1 > 1u)
  {
    if ((v2 & 1) != 0)
    {
      result = a1 + 2;
      v7 = a1 + 18;
LABEL_10:
      while (*result >= 0xFFFFFFFE)
      {
        result += 4;
        if (result == v7)
          return v7;
      }
    }
    else
    {
      result = (_DWORD *)*((_QWORD *)a1 + 1);
      v6 = a1[4];
      if ((_DWORD)v6)
      {
        v7 = &result[4 * v6];
        goto LABEL_10;
      }
    }
  }
  else
  {
    if (v2)
    {
      v3 = a1 + 2;
      v4 = 4;
    }
    else
    {
      v3 = (_DWORD *)*((_QWORD *)a1 + 1);
      v4 = a1[4];
    }
    return &v3[4 * v4];
  }
  return result;
}

uint64_t sub_1C6221380(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;

  v2 = *(_DWORD *)(a1 + 72);
  if (v2 != *(_DWORD *)(a2 + 72)
    || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56)
    || *(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64))
  {
    return 0;
  }
  switch(v2)
  {
    case 1:
      goto LABEL_6;
    case 2:
      return llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(a1 + 8), (const llvm::MachineOperand *)(a2 + 8));
    case 3:
      if (*(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
        return 0;
LABEL_6:
      if (*(_QWORD *)a1 == *(_QWORD *)a2)
        goto LABEL_12;
      return 0;
    case 4:
      if (*(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
        return 0;
      goto LABEL_12;
    default:
LABEL_12:
      result = 1;
      break;
  }
  return result;
}

llvm::SmallPtrSetImplBase *sub_1C6221428(llvm::SmallPtrSetImplBase *this, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v6;
  llvm::SmallPtrSetImplBase *v7;
  uint64_t v8;

  if (a2 != a4)
  {
    v6 = a2;
    v7 = this;
    do
    {
      v8 = *v6++;
      this = (llvm::SmallPtrSetImplBase *)sub_1C4774094(v7, v8);
      while (v6 != a3)
      {
        if ((*v6 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_8;
        ++v6;
      }
      v6 = a3;
LABEL_8:
      ;
    }
    while (v6 != a4);
  }
  return this;
}

_QWORD *sub_1C6221498(_QWORD *result, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;

  if (a2)
  {
    v2 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v3 = v2 | (v2 >> 2) | ((v2 | (v2 >> 2)) >> 4);
    v4 = ((v3 | (v3 >> 8)) >> 16) | v3 | (v3 >> 8);
    if (*((_DWORD *)result + 4) <= v4)
      return sub_1C4DCDEA8((uint64_t)result, v4 + 1);
  }
  return result;
}

uint64_t sub_1C62214E4(uint64_t a1, uint64_t *a2)
{
  BOOL v3;
  uint64_t v5;

  v5 = 0;
  if (sub_1C50FD840(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v5))
    v3 = v5 == *(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 16);
  else
    v3 = 1;
  if (v3)
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 120 * *(unsigned int *)(v5 + 40);
}

uint64_t sub_1C6221558(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_1C513B9A4(a1, a2, a3);
  v4 = *(_QWORD *)a1 + 16 * v3;
  *(_DWORD *)v4 = a2;
  *(_QWORD *)(v4 + 8) = a3;
  *(_DWORD *)(a1 + 8) = v3 + 1;
  return a1;
}

_QWORD *sub_1C6221584(_QWORD *result, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *((unsigned int *)result + 2);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6)
  {
    v7 = result;
    if (v5)
    {
      return (_QWORD *)sub_1C6224F8C((uint64_t)result, v6, a3);
    }
    else
    {
      v8 = *result + 472 * v4 - 472;
      v9 = 472 * a2 - 472 * v4;
      do
      {
        if ((*(_BYTE *)(v8 + 48) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v8 + 56), 8);
        result = sub_1C6176BF8((_QWORD *)v8);
        v8 -= 472;
        v9 += 472;
      }
      while (v9);
      *((_DWORD *)v7 + 2) = a2;
    }
  }
  return result;
}

void sub_1C6221618(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v9;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 || *(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 16);
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_1C5305B9C(a1);
      return;
    }
    if (!(_DWORD)v3)
    {
LABEL_23:
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
    v4 = 56 * v3;
    v5 = *(_QWORD *)a1 + 40;
    while (1)
    {
      v6 = *(_QWORD *)(v5 - 40);
      if (v6 == -8192)
      {
        if (*(_QWORD *)(v5 - 32) == -2 && *(_QWORD *)(v5 - 24) == -2)
          goto LABEL_21;
      }
      else if (v6 == -4096 && *(_QWORD *)(v5 - 32) == -1 && *(_QWORD *)(v5 - 24) == -1)
      {
        goto LABEL_22;
      }
      v9 = *(void **)(v5 - 16);
      if ((void *)v5 != v9)
        free(v9);
LABEL_21:
      *(_QWORD *)(v5 - 40) = -4096;
      *(_QWORD *)(v5 - 32) = -1;
      *(_QWORD *)(v5 - 24) = -1;
LABEL_22:
      v5 += 56;
      v4 -= 56;
      if (!v4)
        goto LABEL_23;
    }
  }
}

void sub_1C6221700(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 || *(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 16);
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_1C5305CBC(a1);
      return;
    }
    if (!(_DWORD)v3)
    {
LABEL_13:
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
    v4 = 112 * v3;
    v5 = *(_QWORD *)a1 + 88;
    while (1)
    {
      v6 = *(_QWORD *)(v5 - 88);
      if (v6 == -8192)
        goto LABEL_11;
      if (v6 != -4096)
        break;
LABEL_12:
      v5 += 112;
      v4 -= 112;
      if (!v4)
        goto LABEL_13;
    }
    sub_1C61247C0(v5, *(_QWORD **)(v5 + 8));
    v7 = *(void **)(v5 - 80);
    if ((void *)(v5 - 64) != v7)
      free(v7);
LABEL_11:
    *(_QWORD *)(v5 - 88) = -4096;
    goto LABEL_12;
  }
}

unsigned int *sub_1C62217C0(unsigned int *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 24 * v1;
        do
        {
          *v2 = -4096;
          v2 += 3;
          v3 -= 24;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C5305DC8(result);
    }
  }
  return result;
}

double llvm::makeInstrRefBasedLiveDebugValues(llvm *this)
{
  LiveDebugValues::InstrRefBasedLDV *v1;

  v1 = (LiveDebugValues::InstrRefBasedLDV *)operator new();
  return LiveDebugValues::InstrRefBasedLDV::InstrRefBasedLDV(v1);
}

void sub_1C6221840(uint64_t a1)
{
  sub_1C6223D3C(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6221864(_QWORD *a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void **v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  uint64_t v16;
  char v17;
  _OWORD v18[2];
  uint64_t v19;
  int v20;

  v4 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v4;
  v19 = *(_QWORD *)(a2 + 32);
  v20 = 0;
  sub_1C6221B2C((uint64_t)&v16, (uint64_t)a1, (uint64_t *)v18, &v20);
  v5 = v16;
  v6 = (void **)(a1 + 3);
  if (!v17)
    return (uint64_t)*v6 + 120 * *(unsigned int *)(v16 + 40);
  v7 = a1[4];
  if (v7 >= a1[5])
  {
    v14 = sub_1C52FE218(v6, a2);
  }
  else
  {
    v8 = *(_OWORD *)a2;
    v9 = *(_OWORD *)(a2 + 16);
    v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v7 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v7 + 48) = v10;
    *(_OWORD *)v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    v11 = *(_OWORD *)(a2 + 64);
    v12 = *(_OWORD *)(a2 + 80);
    v13 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(v7 + 112) = *(_QWORD *)(a2 + 112);
    *(_OWORD *)(v7 + 80) = v12;
    *(_OWORD *)(v7 + 96) = v13;
    *(_OWORD *)(v7 + 64) = v11;
    v14 = (char *)(v7 + 120);
  }
  a1[4] = v14;
  *(_DWORD *)(v5 + 40) = -286331153 * ((unint64_t)&v14[-a1[3]] >> 3) - 1;
  return (uint64_t)(v14 - 120);
}

uint64_t sub_1C6221958(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t a4, int8x16_t a5)
{
  uint64_t v7;
  int8x16_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _BYTE v25[32];
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  int v30;
  __int128 v31;
  int v32;
  int v33;
  _BYTE v34[20];
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  a4.i32[0] = 0;
  v7 = *(_QWORD *)(a1 + 448);
  a5.i8[0] = *(_BYTE *)(a2 + 24);
  v8 = vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(a5, a4), 0), (int8x16_t)llvm::DebugVariable::DefaultFragment, *(int8x16_t *)(a2 + 8));
  *(_QWORD *)v25 = *(_QWORD *)a2;
  *(int8x16_t *)&v25[8] = v8;
  *(_QWORD *)&v35 = 0;
  result = sub_1C52EE728((uint64_t *)v7, v25, (uint64_t **)&v35);
  if ((_DWORD)result)
    v10 = v35;
  else
    v10 = *(_QWORD *)v7 + 56 * *(unsigned int *)(v7 + 16);
  if (v10 != **(_QWORD **)(a1 + 448) + 56 * *(unsigned int *)(*(_QWORD *)(a1 + 448) + 16))
  {
    v11 = *(unsigned int *)(v10 + 32);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)(v10 + 24);
      v13 = &v12[2 * v11];
      do
      {
        v14 = *v12;
        v15 = v12[1];
        v16 = (unint64_t)*v12 >> 8;
        v17 = *v12 == -1 && v15 == 0;
        v18 = !v17;
        if (v17)
          v19 = 0;
        else
          v19 = *v12;
        v20 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)&v35 = *(_QWORD *)a2;
        BYTE8(v35) = v19;
        HIBYTE(v35) = HIBYTE(v14);
        *(_WORD *)((char *)&v35 + 13) = HIDWORD(v14) >> 8;
        *(_DWORD *)((char *)&v35 + 9) = v16;
        *(_QWORD *)&v36 = v15;
        BYTE8(v36) = v18;
        v37 = v20;
        v21 = LiveDebugValues::ValueIDNum::EmptyValue;
        *(_OWORD *)&v34[4] = *(_OWORD *)(a1 + 456);
        *(_OWORD *)v25 = v35;
        *(_OWORD *)&v25[16] = v36;
        v26 = v20;
        v27 = LiveDebugValues::ValueIDNum::EmptyValue;
        v28 = 0;
        v29 = 0;
        v31 = *(_OWORD *)v34;
        v32 = *(_DWORD *)&v34[16];
        v30 = 0;
        v33 = 0;
        v22 = sub_1C6221864((_QWORD *)a1, (uint64_t)v25);
        if (!v23)
        {
          *(_QWORD *)(v22 + 40) = v21;
          *(_BYTE *)(v22 + 48) = 0;
          *(_BYTE *)(v22 + 80) = 0;
          *(_DWORD *)(v22 + 88) = 0;
          *(_OWORD *)(v22 + 92) = *(_OWORD *)v34;
          *(_QWORD *)(v22 + 108) = *(unsigned int *)&v34[16];
        }
        result = sub_1C6223E14((_DWORD *)(a1 + 48), (uint64_t)&v35);
        *(_QWORD *)(result + 40) = a3;
        v12 += 2;
      }
      while (v12 != v13);
    }
  }
  return result;
}

uint64_t sub_1C6221B2C(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = 0;
  result = sub_1C50FD840(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a3, &v14);
  v9 = v14;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = sub_1C6221BCC(a2, a3, v14);
    v9 = result;
    v13 = *(_OWORD *)a3;
    v12 = *((_OWORD *)a3 + 1);
    *(_QWORD *)(result + 32) = a3[4];
    *(_OWORD *)result = v13;
    *(_OWORD *)(result + 16) = v12;
    *(_DWORD *)(result + 40) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 48 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_1C6221BCC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_10;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_10:
    sub_1C52FE0A0(a1, v6);
    v8 = 0;
    sub_1C50FD840(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a3 || *(_BYTE *)(a3 + 24) || *(_QWORD *)(a3 + 32))
    --*(_DWORD *)(a1 + 12);
  return a3;
}

int32x2_t sub_1C6221C8C(uint64_t a1, uint64_t *a2)
{
  int32x2_t result;
  _QWORD *v4;
  _QWORD *v5;

  v5 = 0;
  if (sub_1C52FE43C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, (uint64_t *)&v5))
  {
    v4 = v5;
    *v5 = 0;
    v4[1] = 0;
    v4[2] = 0;
    *((_BYTE *)v4 + 24) = 1;
    v4[4] = 0;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

int32x2_t sub_1C6221CF8(uint64_t a1, uint64_t *a2)
{
  int32x2_t result;
  _QWORD *v4;
  _QWORD *v5;

  v5 = 0;
  if (sub_1C51B6D1C((uint64_t *)a1, a2, (uint64_t *)&v5))
  {
    v4 = v5;
    *v5 = 0;
    v4[1] = 0;
    v4[2] = 0;
    *((_BYTE *)v4 + 24) = 1;
    v4[4] = 0;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

_DWORD *sub_1C6221D58(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *result;
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v4 = *(_DWORD *)(a1 + 16);
  if (!v4)
  {
    v9 = 0;
LABEL_5:
    result = sub_1C6221E60(a1, a2, v9);
    *result = *a2;
    *(_OWORD *)(result + 42) = 0u;
    *(_OWORD *)(result + 38) = 0u;
    *(_OWORD *)(result + 34) = 0u;
    *(_OWORD *)(result + 30) = 0u;
    *(_OWORD *)(result + 26) = 0u;
    *(_OWORD *)(result + 22) = 0u;
    *(_OWORD *)(result + 18) = 0u;
    *(_OWORD *)(result + 14) = 0u;
    *(_OWORD *)(result + 10) = 0u;
    *(_OWORD *)(result + 6) = 0u;
    *((_QWORD *)result + 1) = result + 6;
    *((_QWORD *)result + 2) = 0x400000000;
    *((_QWORD *)result + 25) = 0;
    *((_QWORD *)result + 24) = 0;
    *((_QWORD *)result + 23) = result + 48;
    return result;
  }
  v5 = v4 - 1;
  v6 = *a2 & v5;
  result = (_DWORD *)(*(_QWORD *)a1 + 208 * v6);
  v8 = *result;
  if (*a2 != *result)
  {
    v10 = 0;
    v11 = 1;
    while (v8 != -1)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v10 = result;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      result = (_DWORD *)(*(_QWORD *)a1 + 208 * v6);
      v8 = *result;
      if (*a2 == *result)
        return result;
    }
    if (v10)
      v9 = v10;
    else
      v9 = result;
    goto LABEL_5;
  }
  return result;
}

_DWORD *sub_1C6221E60(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  int v7;
  int v9;
  unsigned int v10;
  int v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1C52FE548((uint64_t *)a1, 2 * v6);
    v7 = *a2;
    v9 = *(_DWORD *)(a1 + 16) - 1;
    v10 = *a2 & v9;
    a3 = (_DWORD *)(*(_QWORD *)a1 + 208 * v10);
    v11 = *a3;
    if (*a2 != *a3)
    {
      v12 = 0;
      v13 = 1;
      while (v11 != -1)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -2;
        if (v14)
          v12 = a3;
        v15 = v10 + v13++;
        v10 = v15 & v9;
        a3 = (_DWORD *)(*(_QWORD *)a1 + 208 * v10);
        v11 = *a3;
        if (v7 == *a3)
          goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a3;
      goto LABEL_4;
    }
    sub_1C52FE548((uint64_t *)a1, v6);
    v7 = *a2;
    v16 = *(_DWORD *)(a1 + 16) - 1;
    v17 = *a2 & v16;
    a3 = (_DWORD *)(*(_QWORD *)a1 + 208 * v17);
    v18 = *a3;
    if (*a2 != *a3)
    {
      v12 = 0;
      v19 = 1;
      while (v18 != -1)
      {
        if (v12)
          v20 = 0;
        else
          v20 = v18 == -2;
        if (v20)
          v12 = a3;
        v21 = v17 + v19++;
        v17 = v21 & v16;
        a3 = (_DWORD *)(*(_QWORD *)a1 + 208 * v17);
        v18 = *a3;
        if (v7 == *a3)
          goto LABEL_4;
      }
LABEL_20:
      if (v12)
        a3 = v12;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C6221FD4(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *result = result + 2;
  result[1] = 0x400000000;
  if (*(_DWORD *)(a2 + 8))
    result = (_QWORD *)sub_1C6222050((uint64_t)result, a2);
  result[22] = *(_QWORD *)(a2 + 176);
  v3 = (_QWORD *)(a2 + 184);
  v4 = *(_QWORD *)(a2 + 184);
  result[23] = v4;
  v5 = result + 23;
  v6 = *(_QWORD *)(a2 + 192);
  result[24] = v6;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    *(_QWORD *)(a2 + 176) = v3;
    *v3 = 0;
    *(_QWORD *)(a2 + 192) = 0;
  }
  else
  {
    result[22] = v5;
  }
  return result;
}

uint64_t sub_1C6222050(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_6;
    }
    v7 = (_DWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*(void **)a1, v4, 40 * v9);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)a1, v4, 40 * v10);
LABEL_12:
        v11 = *v7;
        if (v10 != v11)
          memcpy((void *)(*(_QWORD *)a1 + 40 * v10), (const void *)(*(_QWORD *)a2 + 40 * v10), *(_QWORD *)a2 + 40 * v11 - (*(_QWORD *)a2 + 40 * v10));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v9;
LABEL_6:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v9, 40);
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

uint64_t sub_1C6222174(uint64_t **a1, unint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = sub_1C62221C4((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_1C49C7D1C(a1, v3);
  operator delete(v4);
  return 1;
}

_QWORD *sub_1C62221C4(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = sub_1C52EBD0C(v3 + 4, a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_1C52EBD0C(a2, v5 + 4))
    return v2;
  return v5;
}

uint64_t sub_1C622223C(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = 0;
  result = sub_1C52FE43C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), (uint64_t *)a3, &v15);
  v9 = v15;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = sub_1C62222E0(a2, (uint64_t *)a3, v15);
    v9 = result;
    v12 = *(_QWORD *)(a3 + 32);
    v13 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)result = *(_OWORD *)a3;
    *(_OWORD *)(result + 16) = v13;
    *(_QWORD *)(result + 32) = v12;
    v14 = *a4;
    *(_QWORD *)(result + 56) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(result + 40) = v14;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + ((unint64_t)*(unsigned int *)(a2 + 16) << 6);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_1C62222E0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_10;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_10:
    sub_1C52FE70C(a1, v6);
    v8 = 0;
    sub_1C52FE43C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a3 || *(_BYTE *)(a3 + 24) || *(_QWORD *)(a3 + 32))
    --*(_DWORD *)(a1 + 12);
  return a3;
}

BOOL sub_1C62223A0(uint64_t a1, _QWORD *a2)
{
  int v5;
  int v6;
  int v7;

  if ((*a2 & 0xFFFFFFFFFFLL) != 0
    || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 88) + ((*a2 >> 38) & 0x3FFFFFCLL)) >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 236))
  {
    return 0;
  }
  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 88);
  v6 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 2520) + 552))(*(_QWORD *)(a1 + 2520), *(_QWORD *)(a1 + 24));
  v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 88) + ((*a2 >> 38) & 0x3FFFFFCLL));
  return v7 != v5 && v7 != v6;
}

llvm::MachineInstr *sub_1C622243C(llvm::MachineFunction **a1, const llvm::MachineOperand *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t *v9;
  const llvm::DILocation *Impl;
  llvm::MachineFunction *v11;
  llvm::MachineInstr *v12;
  llvm::MachineInstr *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v17;
  __int128 v18;
  __int128 v19;

  v8 = *(_QWORD *)(*a3 + 16);
  v9 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 4) != 0)
    v9 = (uint64_t *)*v9;
  Impl = (const llvm::DILocation *)llvm::DILocation::getImpl(v9, 0, 0, *(_QWORD *)(*a3 - 8 * *(unsigned int *)(*a3 + 8)), a3[4], 0, 0, 1);
  llvm::DebugLoc::DebugLoc((llvm::DebugLoc *)&v17, Impl);
  v11 = sub_1C5169B3C(a1[3], &v17, *((_QWORD *)*a1 + 1) + 624);
  v13 = v12;
  llvm::MachineInstr::addOperand(v12, v11, a2);
  if (*((_BYTE *)a4 + 8))
  {
    LODWORD(v18) = 1;
    *((_QWORD *)&v18 + 1) = 0;
    *(_QWORD *)&v19 = 0;
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
  }
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  v14 = *a3;
  LODWORD(v18) = 14;
  *((_QWORD *)&v18 + 1) = 0;
  *(_QWORD *)&v19 = v14;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  v15 = *a4;
  LODWORD(v18) = 14;
  *((_QWORD *)&v18 + 1) = 0;
  *(_QWORD *)&v19 = v15;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  if (v17)
    llvm::MetadataTracking::untrack((uint64_t)&v17, v17);
  return v13;
}

_DWORD *sub_1C6222574(uint64_t a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_1C62225F0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C622268C(a1, a2, v7);
    *v5 = *a2;
    *((_QWORD *)v5 + 1) = v5 + 6;
    *((_QWORD *)v5 + 2) = 0x100000000;
  }
  return v5;
}

uint64_t sub_1C62225F0(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 88 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_DWORD *)(a1 + 88 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_DWORD *sub_1C622268C(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C52FE87C(a1, v6);
  v8 = 0;
  sub_1C62225F0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_1C622273C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  void *v12;
  _DWORD *v13;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_DWORD **)a1;
    v8 = 88 * v6;
    do
    {
      *v7 = -1;
      v7 += 22;
      v8 -= 88;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_DWORD *)v4;
      if (*(_DWORD *)v4 <= 0xFFFFFFFD)
      {
        v13 = 0;
        sub_1C62225F0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        v10 = v13;
        *v13 = *(_DWORD *)v4;
        *((_QWORD *)v10 + 2) = 0x100000000;
        *((_QWORD *)v10 + 1) = v10 + 6;
        v11 = (uint64_t)(v10 + 2);
        if (*(_DWORD *)(v4 + 16))
          sub_1C6222830(v11, v4 + 8);
        ++*(_DWORD *)(a1 + 8);
        v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12)
          free(v12);
      }
      v4 += 88;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1C6222830(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_6;
    }
    v7 = (_DWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*(void **)a1, v4, v9 << 6);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)a1, v4, v10 << 6);
LABEL_12:
        v11 = *v7;
        if (v10 != v11)
          memcpy((void *)(*(_QWORD *)a1 + (v10 << 6)), (const void *)(*(_QWORD *)a2 + (v10 << 6)), *(_QWORD *)a2 + (v11 << 6) - (*(_QWORD *)a2 + (v10 << 6)));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v9;
LABEL_6:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v9, 64);
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

void sub_1C6222944(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 64, &v5);
  sub_1C62229B0((uint64_t *)a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C62229B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v4 = *a1 + (v2 << 6);
    v5 = (_QWORD *)(a2 + 16);
    v6 = *a1 + 16;
    do
    {
      *((_OWORD *)v5 - 1) = *(_OWORD *)(v6 - 16);
      *v5 = v5 + 2;
      v5[1] = 0x400000000;
      if (*(_DWORD *)(v6 + 8))
        sub_1C49EECC0((uint64_t)v5, (const void **)v6);
      v7 = v6 - 16;
      v5 += 8;
      v6 += 64;
    }
    while (v7 + 64 != v4);
    v8 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v8)
    {
      v9 = *a1;
      v10 = v8 << 6;
      do
      {
        v11 = *(void **)(v9 + v10 - 48);
        if ((void *)(v9 + v10 - 32) != v11)
          free(v11);
        v10 -= 64;
      }
      while (v10);
    }
  }
}

__int16 *sub_1C6222A6C(uint64_t a1, unsigned __int16 *a2)
{
  char v4;
  __int16 *v5;
  __int16 *v7;

  v7 = 0;
  v4 = sub_1C6222AD8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6222BD4(a1, a2, v7);
    *(_QWORD *)v5 = *(unsigned int *)a2;
  }
  return v5;
}

uint64_t sub_1C6222AD8(uint64_t a1, int a2, unsigned __int16 a3, unsigned __int16 a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  unsigned __int16 *v10;
  int v11;
  int v12;
  uint64_t v14;
  unsigned __int16 *v16;
  int v17;
  BOOL v19;
  unsigned int v21;

  if (a2)
  {
    v5 = ((37 * a4) | (0x2500000000 * a3)) + ~(0x2500000000 * a4);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (unsigned __int16 *)(a1 + 8 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (v11 == a3 && v12 == a4)
    {
      v14 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v11 != 0xFFFF || v12 != 0xFFFF)
      {
        if (v16)
          v19 = 0;
        else
          v19 = v12 == 65534;
        if (v19 && v11 == 65534)
          v16 = v10;
        v21 = v9 + v17++;
        v9 = v21 & v8;
        v10 = (unsigned __int16 *)(a1 + 8 * (v21 & v8));
        v11 = *v10;
        v12 = v10[1];
        v14 = 1;
        if (v11 == a3 && v12 == a4)
          goto LABEL_8;
      }
      v14 = 0;
      if (v16)
        v10 = v16;
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

__int16 *sub_1C6222BD4(uint64_t a1, unsigned __int16 *a2, __int16 *a3)
{
  int v5;
  unsigned int v6;
  __int16 *v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C52FEB60(a1, v6);
  v9 = 0;
  sub_1C6222AD8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1 || (unsigned __int16)a3[1] != 0xFFFF)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C6222C94(uint64_t result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned __int16 *v13;
  unsigned __int16 *v14;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7 = -1;
      v7 += 2;
      v8 -= 8;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *v4;
      v10 = v4[1];
      if ((v9 != 0xFFFF || v10 != 0xFFFF) && (v9 != 65534 || v10 != 65534))
      {
        v14 = 0;
        result = sub_1C6222AD8(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v14);
        v13 = v14;
        *v14 = *v4;
        v13[1] = v4[1];
        *((_DWORD *)v13 + 1) = *((_DWORD *)v4 + 1);
        ++*(_DWORD *)(v5 + 8);
      }
      v4 += 4;
    }
    while (v4 != a3);
  }
  return result;
}

int *sub_1C6222D74(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  int *v5;
  int v6;
  int v8;
  unsigned int v9;

  if (!a2)
    return (int *)(a1 + 208 * a2);
  v3 = a2 - 1;
  v4 = (a2 - 1) & a3;
  v5 = (int *)(a1 + 208 * v4);
  v6 = *v5;
  if (*v5 != a3)
  {
    v8 = 1;
    while (v6 != -1)
    {
      v9 = v4 + v8++;
      v4 = v9 & v3;
      v5 = (int *)(a1 + 208 * (v9 & v3));
      v6 = *v5;
      if (*v5 == a3)
        return v5;
    }
    return (int *)(a1 + 208 * a2);
  }
  return v5;
}

uint64_t sub_1C6222DD8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 40 * v4);
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 40 * v5);
LABEL_6:
        v6 = *(unsigned int *)(a2 + 8);
        if (v5 != v6)
          memcpy((void *)(*(_QWORD *)a1 + 40 * v5), (const void *)(*(_QWORD *)a2 + 40 * v5), *(_QWORD *)a2 + 40 * v6 - (*(_QWORD *)a2 + 40 * v5));
LABEL_10:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 40);
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

uint64_t *sub_1C6222EB0(_QWORD **a1, _QWORD *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t *result;
  uint64_t *v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_1C52FEC18(a1, a2, &v14, &v13, a3);
  if (!*result)
  {
    v7 = result;
    v8 = operator new(0x48uLL);
    v9 = *(_OWORD *)(a4 + 16);
    v8[2] = *(_OWORD *)a4;
    v8[3] = v9;
    *((_QWORD *)v8 + 8) = *(_QWORD *)(a4 + 32);
    v10 = v14;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v10;
    *v7 = (uint64_t)v8;
    v11 = (_QWORD *)**a1;
    if (v11)
    {
      *a1 = v11;
      v12 = (uint64_t *)*v7;
    }
    else
    {
      v12 = (uint64_t *)v8;
    }
    result = sub_1C4768E74(a1[1], v12);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return result;
}

uint64_t sub_1C6222F58(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if (sub_1C6222FB4(a1, a2, &v6))
    return v6;
  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 4;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

uint64_t sub_1C6222FB4(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & a2;
  v7 = (_DWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -1)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_1C6223058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_BYTE *)(a1 + 33) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 56;
  *(_QWORD *)(a1 + 48) = 0x2000000000;
  *(_QWORD *)(a1 + 2104) = a1 + 2120;
  *(_QWORD *)(a1 + 2112) = 0x2000000000;
  *(_DWORD *)(a1 + 2392) = 0;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_OWORD *)(a1 + 2400) = 0u;
  *(_DWORD *)(a1 + 2416) = 0;
  *(_QWORD *)(a1 + 2424) = a1 + 2440;
  *(_QWORD *)(a1 + 2432) = 0x400000000;
  *(_DWORD *)(a1 + 2488) = 0;
  *(_OWORD *)(a1 + 2472) = 0u;
  *(_OWORD *)(a1 + 2496) = 0u;
  *(_DWORD *)(a1 + 2512) = 0;
  *(_QWORD *)(a1 + 2520) = a5;
  *(_QWORD *)(a1 + 2528) = a6;
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 16) + 120))(*(_QWORD *)(a4 + 16));
  *(_BYTE *)(a1 + 32) = llvm::TargetOptions::ShouldEmitDebugEntryValues((llvm::TargetOptions *)(*(_QWORD *)(a7 + 112)
                                                                                              + 1008));
  return a1;
}

void sub_1C6223114(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;

  v5 = *(_QWORD *)(a1 + 2472);
  v6 = *(_DWORD *)(a1 + 2488);
  if (v6)
  {
    v7 = (v6 - 1) & (37 * a2);
    v8 = (int *)(v5 + 88 * v7);
    v9 = *v8;
    if (*v8 == a2)
      goto LABEL_3;
    v18 = 1;
    while (v9 != -1)
    {
      v19 = v7 + v18++;
      v7 = v19 & (v6 - 1);
      v8 = (int *)(v5 + 88 * v7);
      v9 = *v8;
      if (*v8 == a2)
        goto LABEL_3;
    }
  }
  v8 = (int *)(v5 + 88 * v6);
LABEL_3:
  if (v8 != (int *)(v5 + 88 * v6))
  {
    v10 = v8[4];
    if ((_DWORD)v10)
    {
      v11 = v10 << 6;
      v12 = *((_QWORD *)v8 + 1) + 48;
      do
      {
        v13 = *(_QWORD *)(v12 - 48);
        v14 = v13 >> 40;
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 8 * (v13 >> 40)) == v13)
        {
          v20 = 0;
          if (sub_1C51B6D1C((uint64_t *)(a1 + 2496), (uint64_t *)(v12 - 40), &v20))
          {
            LiveDebugValues::MLocTracker::emitLoc(*(_QWORD *)(a1 + 16), v14 | 0x100000000, v12 - 40, v12);
            v16 = v15;
            v17 = *(unsigned int *)(a1 + 2432);
            if (v17 >= *(unsigned int *)(a1 + 2436))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 2424, a1 + 2440, v17 + 1, 8);
              v17 = *(unsigned int *)(a1 + 2432);
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 2424) + 8 * v17) = v16;
            ++*(_DWORD *)(a1 + 2432);
          }
        }
        v12 += 64;
        v11 -= 64;
      }
      while (v11);
    }
    sub_1C62207C8(a1, a3, 0);
  }
}

uint64_t sub_1C62232A4(uint64_t a1)
{
  int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BYTE v6[7];
  _BYTE v7[15];

  v1 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 > 1u || *(_DWORD *)(a1 + 4))
  {
    if ((v1 & 1) != 0)
    {
      v3 = a1 + 8;
      v4 = a1 + 392;
    }
    else
    {
      v2 = *(_DWORD *)(a1 + 16);
      if (((2 * v1) & 0xFFFFFFFC) >= v2)
      {
        if (!v2)
        {
          v5 = 0;
LABEL_10:
          *(_DWORD *)a1 = v5;
          *(_DWORD *)(a1 + 4) = 0;
          return a1;
        }
      }
      else if (v2 > 0x40)
      {
        return (uint64_t)sub_1C622340C(a1);
      }
      v3 = *(_QWORD *)(a1 + 8);
      v4 = v3 + 48 * v2;
    }
    do
    {
      *(_QWORD *)v3 = 0;
      *(_BYTE *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 9) = *(_QWORD *)v7;
      *(_QWORD *)(v3 + 16) = *(_QWORD *)&v7[7];
      *(_BYTE *)(v3 + 24) = 0;
      *(_DWORD *)(v3 + 25) = *(_DWORD *)v6;
      *(_DWORD *)(v3 + 28) = *(_DWORD *)&v6[3];
      *(_QWORD *)(v3 + 32) = 0;
      v3 += 48;
    }
    while (v3 != v4);
    v5 = *(_DWORD *)a1 & 1;
    goto LABEL_10;
  }
  return a1;
}

char *sub_1C62233AC(char *result)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = *((_DWORD *)result + 4);
    if (v1 <= 4 * *((_DWORD *)result + 2) || v1 < 0x41)
    {
      if (v1)
      {
        v2 = *(_QWORD *)result;
        v3 = *(_QWORD *)result + 48 * v1;
        do
        {
          *(_QWORD *)v2 = 0;
          *(_BYTE *)(v2 + 8) = 0;
          *(_BYTE *)(v2 + 24) = 0;
          *(_QWORD *)(v2 + 32) = 0;
          v2 += 48;
        }
        while (v2 != v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C52FEE2C(result);
    }
  }
  return result;
}

int *sub_1C622340C(uint64_t a1)
{
  unsigned int v2;
  char v3;
  int v4;
  unsigned int v5;

  v2 = *(_DWORD *)a1;
  v3 = __clz((*(_DWORD *)a1 >> 1) - 1);
  if ((v3 & 0x3E) == 0x1C)
    v4 = 64;
  else
    v4 = 1 << (33 - v3);
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 9)
    return sub_1C62234A4((int *)a1);
  if ((v2 & 1) == 0)
  {
    if (v5 == *(_DWORD *)(a1 + 16))
      return sub_1C62234A4((int *)a1);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  }
  return sub_1C62234F4(a1, v5);
}

int *sub_1C62234A4(int *result)
{
  int v1;
  unsigned int v2;
  int *v3;
  int *v4;

  v1 = *result;
  *(_QWORD *)result = *result & 1;
  if ((v1 & 1) != 0)
  {
    v3 = result + 2;
    v4 = result + 98;
  }
  else
  {
    v2 = result[4];
    if (!v2)
      return result;
    v3 = (int *)*((_QWORD *)result + 1);
    v4 = &v3[12 * v2];
  }
  do
  {
    *(_QWORD *)v3 = 0;
    *((_BYTE *)v3 + 8) = 0;
    *((_BYTE *)v3 + 24) = 0;
    *((_QWORD *)v3 + 4) = 0;
    v3 += 12;
  }
  while (v3 != v4);
  return result;
}

int *sub_1C62234F4(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)a1;
  *(_DWORD *)a1 |= 1u;
  if (a2 >= 9)
  {
    *(_DWORD *)a1 = v3 & 0xFFFFFFFE;
    v4 = a2;
    *(_QWORD *)(a1 + 8) = operator new(48 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v4;
  }
  return sub_1C62234A4((int *)a1);
}

void sub_1C622354C(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v7;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 || *(_DWORD *)(a1 + 12))
  {
    v3 = *(_DWORD *)(a1 + 16);
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_1C52FEF48(a1);
      return;
    }
    if (!v3)
    {
LABEL_13:
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
    v4 = 208 * v3;
    v5 = *(_QWORD *)a1 + 184;
    while (1)
    {
      v6 = *(_DWORD *)(v5 - 184);
      if (v6 == -2)
        goto LABEL_11;
      if (v6 != -1)
        break;
LABEL_12:
      v5 += 208;
      v4 -= 208;
      if (!v4)
        goto LABEL_13;
    }
    sub_1C61247C0(v5, *(_QWORD **)(v5 + 8));
    v7 = *(void **)(v5 - 176);
    if ((void *)(v5 - 160) != v7)
      free(v7);
LABEL_11:
    *(_DWORD *)(v5 - 184) = -1;
    goto LABEL_12;
  }
}

unsigned int *sub_1C622360C(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD *)result;
        v3 = *(_QWORD *)result + (v1 << 6);
        do
        {
          *(_QWORD *)v2 = 0;
          *(_BYTE *)(v2 + 8) = 0;
          *(_BYTE *)(v2 + 24) = 0;
          *(_QWORD *)(v2 + 32) = 0;
          v2 += 64;
        }
        while (v2 != v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C52FF054(result);
    }
  }
  return result;
}

void sub_1C6223668(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v7;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 || *(_DWORD *)(a1 + 12))
  {
    v3 = *(_DWORD *)(a1 + 16);
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_1C52FF168(a1);
      return;
    }
    if (!v3)
    {
LABEL_13:
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
    v4 = 88 * v3;
    v5 = *(_QWORD *)a1 + 24;
    while (1)
    {
      v6 = *(_DWORD *)(v5 - 24);
      if (v6 == -2)
        goto LABEL_11;
      if (v6 != -1)
        break;
LABEL_12:
      v5 += 88;
      v4 -= 88;
      if (!v4)
        goto LABEL_13;
    }
    v7 = *(void **)(v5 - 16);
    if ((void *)v5 != v7)
      free(v7);
LABEL_11:
    *(_DWORD *)(v5 - 24) = -1;
    goto LABEL_12;
  }
}

uint64_t *sub_1C6223718(uint64_t *result, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;

  if (a2)
  {
    v2 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v3 = v2 | (v2 >> 2) | ((v2 | (v2 >> 2)) >> 4);
    v4 = ((v3 | (v3 >> 8)) >> 16) | v3 | (v3 >> 8);
    if (*((_DWORD *)result + 4) <= v4)
      return (uint64_t *)sub_1C52FE548(result, v4 + 1);
  }
  return result;
}

char *sub_1C6223764(char *result, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;

  if (a2)
  {
    v2 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v3 = v2 | (v2 >> 2) | ((v2 | (v2 >> 2)) >> 4);
    v4 = ((v3 | (v3 >> 8)) >> 16) | v3 | (v3 >> 8);
    if (*((_DWORD *)result + 4) <= v4)
      return sub_1C52FE70C((uint64_t)result, v4 + 1);
  }
  return result;
}

BOOL sub_1C62237B0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v10;
  _DWORD v12[4];
  char v13;
  uint64_t v14;
  unsigned __int16 v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_DWORD *)(*(_QWORD *)(v2 + 88) + 4 * a2);
  if (v3 >= *(_DWORD *)(v2 + 236))
    return 0;
  v6 = (v5 = *(_QWORD *)(a1 + 2520)) != 0 ? (_QWORD *)(v5 + 8) : 0;
  sub_1C48385F4((uint64_t)v12, v3, v6, 1);
  if (!v14)
    return 0;
  v7 = 1;
  if (!((1 << v15) & *(_QWORD *)(**(_QWORD **)(a1 + 2528) + (((unint64_t)v15 >> 3) & 0x1FF8))))
  {
    v7 = 0;
    while (1)
    {
      sub_1C48386F0((uint64_t)v12);
      if (v13 || v14 == 0)
        break;
      if (v12[0] != v15)
      {
LABEL_15:
        v10 = (1 << v15) & *(_QWORD *)(**(_QWORD **)(a1 + 2528) + (((unint64_t)v15 >> 3) & 0x1FF8));
        v7 = v10 != 0;
        if (v10)
          return 1;
      }
    }
    if (!v14)
      return v7;
    goto LABEL_15;
  }
  return v7;
}

void sub_1C62238B0(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
  {
    v2 = 208 * v1;
    v3 = *(_QWORD *)a1 + 184;
    do
    {
      if (*(_DWORD *)(v3 - 184) <= 0xFFFFFFFD)
      {
        sub_1C61247C0(v3, *(_QWORD **)(v3 + 8));
        v4 = *(void **)(v3 - 176);
        if ((void *)(v3 - 160) != v4)
          free(v4);
      }
      v3 += 208;
      v2 -= 208;
    }
    while (v2);
  }
}

uint64_t sub_1C6223918(uint64_t a1, uint64_t a2, unint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C62239AC(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6223ACC(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_1C62239AC(uint64_t a1, int a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  if (a2)
  {
    v8 = LiveDebugValues::ValueIDNum::EmptyValue;
    v9 = LiveDebugValues::ValueIDNum::TombstoneValue;
    v10 = *a3;
    v11 = HIDWORD(*a3);
    v12 = 0x9DDFEA08EB382D69 * ((8 * v10 + sub_1C4D9B584()) ^ HIDWORD(v10));
    v13 = a2 - 1;
    v14 = (-348639895
         * ((((0x9DDFEA08EB382D69 * (v11 ^ (v12 >> 47) ^ v12)) >> 32) >> 15) ^ (-348639895
                                                                                              * (v11 ^ (v12 >> 47) ^ v12)))) & (a2 - 1);
    v15 = (_QWORD *)(a1 + 16 * v14);
    v16 = *v15;
    if (*a3 == *v15)
    {
      result = 1;
    }
    else
    {
      v18 = 0;
      v19 = 1;
      result = 1;
      while (v16 != v8)
      {
        if (v18)
          v20 = 0;
        else
          v20 = v16 == v9;
        if (v20)
          v18 = v15;
        v21 = v14 + v19++;
        v14 = v21 & v13;
        v15 = (_QWORD *)(a1 + 16 * (v21 & v13));
        v16 = *v15;
        if (*a3 == *v15)
          goto LABEL_4;
      }
      result = 0;
      if (v18)
        v15 = v18;
    }
  }
  else
  {
    v15 = 0;
    result = 0;
  }
LABEL_4:
  *a4 = v15;
  return result;
}

_QWORD *sub_1C6223ACC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C52FF2B8(a1, v6);
  v8 = 0;
  sub_1C62239AC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != LiveDebugValues::ValueIDNum::EmptyValue)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C6223B84(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  _QWORD *v13;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = LiveDebugValues::ValueIDNum::EmptyValue;
  v7 = *(unsigned int *)(result + 16);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)result;
    v9 = 16 * v7;
    do
    {
      *v8 = v6;
      v8 += 2;
      v9 -= 16;
    }
    while (v9);
    v6 = LiveDebugValues::ValueIDNum::EmptyValue;
  }
  if (a2 != a3)
  {
    v10 = LiveDebugValues::ValueIDNum::TombstoneValue;
    do
    {
      if (*(_QWORD *)v4 != v6 && *(_QWORD *)v4 != v10)
      {
        v13 = 0;
        result = sub_1C62239AC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), (unint64_t *)v4, &v13);
        v12 = v13;
        *v13 = *(_QWORD *)v4;
        *((_DWORD *)v12 + 2) = *(_DWORD *)(v4 + 8);
        ++*(_DWORD *)(v5 + 8);
      }
      v4 += 16;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_1C6223C58(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 800), 4);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 776), 4);
  v2 = *(void **)(a1 + 248);
  if (v2 != (void *)(a1 + 264))
    free(v2);
  sub_1C6223D04(a1 + 184);
  sub_1C47655E8(a1 + 160, *(_QWORD **)(a1 + 168));
  v3 = *(void **)(a1 + 112);
  if (v3 != (void *)(a1 + 128))
    free(v3);
  v4 = *(void **)(a1 + 88);
  if (v4 != (void *)(a1 + 104))
    free(v4);
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 32);
  if (v6 != (void *)(a1 + 48))
    free(v6);
  return a1;
}

uint64_t sub_1C6223D04(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  sub_1C6143384(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_1C6223D3C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E814DBF0;
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1992), 8);
  sub_1C52F1AFC(a1 + 1968);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1968), 8);
  sub_1C52F1C3C(a1 + 1944);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1944), 8);
  v2 = *(void **)(a1 + 648);
  if (v2 != (void *)(a1 + 664))
    free(v2);
  sub_1C4ABB360(*(_QWORD **)(a1 + 632));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 600), 4);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 576), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 552), 8);
  v3 = *(void **)(a1 + 400);
  if (v3 != *(void **)(a1 + 392))
    free(v3);
  sub_1C5101D30(a1 + 128);
  v4 = *(void **)(a1 + 56);
  if (v4 != (void *)(a1 + 72))
    free(v4);
  return a1;
}

uint64_t sub_1C6223E14(_DWORD *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v9 = 0;
  v4 = sub_1C52FF374((uint64_t)a1, (uint64_t *)a2, &v9);
  v5 = v9;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6223E78(a1, (uint64_t *)a2, v9);
    v7 = *(_QWORD *)(a2 + 32);
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *(_OWORD *)(v5 + 16) = v8;
    *(_QWORD *)(v5 + 32) = v7;
    *(_QWORD *)(v5 + 40) = 0;
  }
  return v5;
}

uint64_t sub_1C6223E78(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 8;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_13;
  }
  if (v6 + ~v5 - a1[1] <= v6 >> 3)
  {
LABEL_13:
    sub_1C52FF4A0((uint64_t)a1, v6);
    v8 = 0;
    sub_1C52FF374((uint64_t)a1, a2, &v8);
    a3 = v8;
  }
  *a1 += 2;
  if (*(_QWORD *)a3 || *(_BYTE *)(a3 + 24) || *(_QWORD *)(a3 + 32))
    --a1[1];
  return a3;
}

_OWORD *sub_1C6223F44(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  void **v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v5 = (void **)sub_1C52FED9C(a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v8 = v5;
    v6 = operator new(0x48uLL);
    v9 = *(_OWORD *)(a3 + 16);
    v6[2] = *(_OWORD *)a3;
    v6[3] = v9;
    *((_QWORD *)v6 + 8) = *(_QWORD *)(a3 + 32);
    v10 = v13;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v10;
    *v8 = v6;
    v11 = **(_QWORD **)a1;
    v12 = (uint64_t *)v6;
    if (v11)
    {
      *(_QWORD *)a1 = v11;
      v12 = (uint64_t *)*v8;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v12);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

uint64_t sub_1C6223FF4(uint64_t a1, uint64_t a2, unsigned __int16 *a3, _DWORD *a4)
{
  uint64_t result;
  __int16 *v9;
  char v10;
  uint64_t v11;
  __int16 *v12;

  v12 = 0;
  result = sub_1C6222AD8(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, a3[1], &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6222BD4(a2, a3, v12);
    v9 = (__int16 *)result;
    *(_WORD *)result = *a3;
    *(_WORD *)(result + 2) = a3[1];
    *(_DWORD *)(result + 4) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_DWORD *sub_1C6224098(uint64_t a1, _DWORD *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v9 = 0;
LABEL_5:
    v6 = sub_1C6224150(a1, a2, v9);
    *(_QWORD *)v6 = *a2;
    return v6;
  }
  v4 = v3 - 1;
  v5 = (37 * *a2) & (v3 - 1);
  v6 = (_DWORD *)(*(_QWORD *)a1 + 8 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v10 = 0;
    v11 = 1;
    while (v7 != -1)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v7 == -2;
      if (v12)
        v10 = v6;
      v13 = v5 + v11++;
      v5 = v13 & v4;
      v6 = (_DWORD *)(*(_QWORD *)a1 + 8 * (v13 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v10)
      v9 = v10;
    else
      v9 = v6;
    goto LABEL_5;
  }
  return v6;
}

_DWORD *sub_1C6224150(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
    sub_1C52FF710(a1, v6);
    v16 = *(_DWORD *)(a1 + 16);
    if (v16)
    {
      v17 = v16 - 1;
      v18 = (37 * *a2) & v17;
      a3 = (_DWORD *)(*(_QWORD *)a1 + 8 * v18);
      v19 = *a3;
      if (*a2 == *a3)
        goto LABEL_3;
      v12 = 0;
      v20 = 1;
      while (v19 != -1)
      {
        if (v12)
          v21 = 0;
        else
          v21 = v19 == -2;
        if (v21)
          v12 = a3;
        v22 = v18 + v20++;
        v18 = v22 & v17;
        a3 = (_DWORD *)(*(_QWORD *)a1 + 8 * v18);
        v19 = *a3;
        if (*a2 == *a3)
          goto LABEL_3;
      }
      goto LABEL_21;
    }
LABEL_24:
    a3 = 0;
    goto LABEL_3;
  }
  sub_1C52FF710(a1, 2 * v6);
  v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_24;
  v9 = v8 - 1;
  v10 = (37 * *a2) & v9;
  a3 = (_DWORD *)(*(_QWORD *)a1 + 8 * v10);
  v11 = *a3;
  if (*a2 == *a3)
    goto LABEL_3;
  v12 = 0;
  v13 = 1;
  while (v11 != -1)
  {
    if (v12)
      v14 = 0;
    else
      v14 = v11 == -2;
    if (v14)
      v12 = a3;
    v15 = v10 + v13++;
    v10 = v15 & v9;
    a3 = (_DWORD *)(*(_QWORD *)a1 + 8 * v10);
    v11 = *a3;
    if (*a2 == *a3)
      goto LABEL_3;
  }
LABEL_21:
  if (v12)
    a3 = v12;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C62242D4(uint64_t result, int *a2, int *a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  int v12;
  BOOL v13;
  unsigned int v14;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD **)result;
    v5 = 8 * v3;
    do
    {
      *v4 = -1;
      v4 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    v6 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      v7 = *(_DWORD *)(result + 16) - 1;
      v8 = v7 & (37 * v6);
      v9 = (_DWORD *)(*(_QWORD *)result + 8 * v8);
      v10 = *v9;
      if (v6 != *v9)
      {
        v11 = 0;
        v12 = 1;
        while (v10 != -1)
        {
          if (v11)
            v13 = 0;
          else
            v13 = v10 == -2;
          if (v13)
            v11 = v9;
          v14 = v8 + v12++;
          v8 = v14 & v7;
          v9 = (_DWORD *)(*(_QWORD *)result + 8 * (v14 & v7));
          v10 = *v9;
          if (v6 == *v9)
            goto LABEL_7;
        }
        if (v11)
          v9 = v11;
      }
LABEL_7:
      *v9 = v6;
      v9[1] = a2[1];
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

unsigned int *sub_1C62243A8(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = result;
  v6 = result[2];
  if (v6 + a2 > (unint64_t)result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + a2, 8);
    v6 = v5[2];
  }
  if (a2)
  {
    v7 = (_QWORD *)(*(_QWORD *)v5 + 8 * v6);
    v8 = a2;
    do
    {
      *v7++ = a3;
      --v8;
    }
    while (v8);
    LODWORD(v6) = v5[2];
  }
  v5[2] = v6 + a2;
  return result;
}

uint64_t *sub_1C6224424(uint64_t a1, int *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v13;
  uint64_t v15;

  v4 = *(uint64_t **)(a1 + 8);
  v2 = (uint64_t *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v6 = *((_QWORD *)a2 + 1);
  v5 = *((_QWORD *)a2 + 2);
  v7 = v2;
  v8 = *a2;
  do
  {
    v9 = *((_DWORD *)v3 + 8);
    if (v9 < v8)
    {
LABEL_4:
      ++v3;
      goto LABEL_5;
    }
    if (v8 >= v9)
    {
      v10 = v3[5];
      if (v10 < v6)
        goto LABEL_4;
      if (v6 >= v10 && v3[6] < v5)
        ++v3;
      else
        v7 = v3;
    }
    else
    {
      v7 = v3;
    }
LABEL_5:
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v7 == v2)
    return v2;
  v13 = *((_DWORD *)v7 + 8);
  if (v8 < v13)
    return v2;
  if (v13 >= v8)
  {
    v15 = v7[5];
    if (v6 < v15 || v15 >= v6 && v5 < v7[6])
      return v2;
  }
  return v7;
}

_OWORD *sub_1C62244E0(uint64_t a1, int *a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v5 = (void **)sub_1C52FF7C8(a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v8 = v5;
    v6 = operator new(0x40uLL);
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *((_DWORD *)v6 + 14) = 0;
    v10 = v13;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v10;
    *v8 = v6;
    v11 = **(_QWORD **)a1;
    v12 = (uint64_t *)v6;
    if (v11)
    {
      *(_QWORD *)a1 = v11;
      v12 = (uint64_t *)*v8;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v12);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

uint64_t sub_1C6224590(uint64_t a1, uint64_t a2, int *a3, _QWORD *a4)
{
  uint64_t result;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;

  v16 = 0;
  result = sub_1C6222FB4(a2, *a3, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v10 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v11 = 4;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(unsigned int *)(a2 + 16);
    }
    v12 = 0;
    v13 = v10 + 16 * v11;
  }
  else
  {
    result = (uint64_t)sub_1C6224658((_DWORD *)a2, a3, v16);
    v9 = (_DWORD *)result;
    *(_DWORD *)result = *a3;
    *(_QWORD *)(result + 8) = *a4;
    v14 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v15 = 4;
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(unsigned int *)(a2 + 16);
    }
    v13 = v14 + 16 * v15;
    v12 = 1;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v12;
  return result;
}

_DWORD *sub_1C6224658(_DWORD *a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 4;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C52FF84C((uint64_t)a1, v6);
  v8 = 0;
  sub_1C6222FB4((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -1)
    --a1[1];
  return a3;
}

uint64_t sub_1C6224714(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_DWORD *)(result + 8);
    v9 = (_DWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_DWORD **)(result + 8);
    v9 = &v8[4 * v7];
  }
  do
  {
    *v8 = -1;
    v8 += 4;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      v12 = 0;
      result = sub_1C6222FB4((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_DWORD *)a2;
      *((_QWORD *)v11 + 1) = *(_QWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

void sub_1C62247D8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_1C62248A0(a1, a2);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
      {
        v8 = 32 * a2 - 32 * v2;
        v9 = *(_QWORD *)a1 + 32 * v2 + 16;
        do
        {
          *(_QWORD *)(v9 - 16) = v9;
          *(_QWORD *)(v9 - 8) = 0x400000000;
          v9 += 32;
          v8 -= 32;
        }
        while (v8);
      }
    }
    else
    {
      v5 = *(_QWORD *)a1 + 32 * v2 - 16;
      v6 = 32 * a2 - 32 * v2;
      do
      {
        v7 = *(void **)(v5 - 16);
        if ((void *)v5 != v7)
          free(v7);
        v5 -= 32;
        v6 += 32;
      }
      while (v6);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

void sub_1C62248A0(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 32, &v5);
  sub_1C622490C(a1, v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C622490C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v5 = *(_QWORD *)a1;
    v6 = 32 * v2;
    do
    {
      *a2 = a2 + 2;
      a2[1] = 0x400000000;
      if (*(_DWORD *)(v5 + 8))
        sub_1C614C900((uint64_t)a2, v5);
      v5 += 32;
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
    v7 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)a1;
      v9 = 32 * v7;
      do
      {
        v10 = *(void **)(v8 + v9 - 32);
        if ((void *)(v8 + v9 - 16) != v10)
          free(v10);
        v9 -= 32;
      }
      while (v9);
    }
  }
}

uint64_t sub_1C62249BC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 4 * v4);
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 4 * v5);
LABEL_6:
        v6 = *(unsigned int *)(a2 + 8);
        if (v5 != v6)
          memcpy((void *)(*(_QWORD *)a1 + 4 * v5), (const void *)(*(_QWORD *)a2 + 4 * v5), *(_QWORD *)a2 + 4 * v6 - (*(_QWORD *)a2 + 4 * v5));
LABEL_10:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 4);
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_1C6224A84(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 208 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 208 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

char **sub_1C6224B20(char **a1)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = 472 * v3;
    do
    {
      v5 = &v2[v4];
      if ((v2[v4 - 424] & 1) == 0)
        MEMORY[0x1CAA32FB4](*((_QWORD *)v5 - 52), 8);
      sub_1C6176BF8((_QWORD *)v5 - 59);
      v4 -= 472;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

char **sub_1C6224BA4(char **a1)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = 976 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 976];
      if (&v2[v4 - 960] != v5)
        free(v5);
      v4 -= 976;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_1C6224C1C(unsigned int *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t i;

  v2 = a1[2];
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (a1[3] < a2)
      {
        sub_1C6224D08(a1, a2);
        v2 = a1[2];
      }
      if (v2 != a2)
      {
        v8 = *(_QWORD *)a1 + 72 * a2;
        v9 = *(_QWORD *)a1 + 72 * v2;
        v10 = (_QWORD *)v9;
        do
        {
          *v10 = 1;
          v10 += 9;
          for (i = 8; i != 72; i += 16)
            *(_DWORD *)(v9 + i) = -1;
          v9 = (uint64_t)v10;
        }
        while (v10 != (_QWORD *)v8);
      }
    }
    else
    {
      v5 = 9 * v2;
      v6 = *(_QWORD *)a1 + 8 * v5 - 72;
      v7 = 72 * a2 - 8 * v5;
      do
      {
        if ((*(_BYTE *)v6 & 1) == 0)
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v6 + 8), 8);
        v6 -= 72;
        v7 += 72;
      }
      while (v7);
    }
    a1[2] = a2;
  }
}

void sub_1C6224D08(unsigned int *a1, unint64_t a2)
{
  unsigned int *v3;
  unsigned int v4;
  unint64_t v5;

  v5 = 0;
  v3 = (unsigned int *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, a2, 72, &v5);
  sub_1C6224D74(a1, v3);
  v4 = v5;
  if (*(unsigned int **)a1 != a1 + 4)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  a1[3] = v4;
}

unsigned int *sub_1C6224D74(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[2];
  if (v2)
  {
    v3 = result;
    v4 = *(unsigned int **)result;
    v5 = *(_QWORD *)result + 72 * v2;
    v6 = a2;
    do
    {
      *(_QWORD *)v6 = 1;
      v6 += 18;
      for (i = 2; i != 18; i += 4)
        a2[i] = -1;
      result = sub_1C6224E34(a2, v4);
      v4 += 18;
      a2 = v6;
    }
    while (v4 != (unsigned int *)v5);
    v8 = v3[2];
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)v3;
      v10 = 72 * v8;
      do
      {
        if ((*(_BYTE *)(v9 + v10 - 72) & 1) == 0)
          result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)(v9 + v10 - 64), 8);
        v10 -= 72;
      }
      while (v10);
    }
  }
  return result;
}

unsigned int *sub_1C6224E34(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int *v10;
  int *v11;
  unsigned int v12;
  unsigned int v13;
  int *v15;
  int *v16;
  uint64_t v17;
  __int128 v18;

  v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  v3 = result[1];
  *result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  v4 = *a2;
  if ((*result & 1) != 0)
  {
    if ((v4 & 1) == 0)
    {
      v6 = a2;
      goto LABEL_7;
    }
    v9 = 0;
    while (1)
    {
      v10 = (int *)&result[v9];
      v11 = (int *)&a2[v9];
      v12 = result[v9 + 2];
      v13 = a2[v9 + 2];
      if (v12 > 0xFFFFFFFD || v13 > 0xFFFFFFFD)
      {
        v10[2] = v13;
        v11[2] = v12;
        if (v12 <= 0xFFFFFFFD)
        {
          v15 = (int *)&a2[v9];
          v16 = (int *)&result[v9];
          goto LABEL_24;
        }
        if (v13 <= 0xFFFFFFFD)
        {
          v15 = (int *)&result[v9];
          v16 = (int *)&a2[v9];
LABEL_24:
          *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
        }
      }
      else
      {
        v17 = *((_QWORD *)v10 + 2);
        v10[2] = v13;
        *((_QWORD *)v10 + 2) = *((_QWORD *)v11 + 2);
        v11[2] = v12;
        *((_QWORD *)v11 + 2) = v17;
      }
      v9 += 4;
      if (v9 == 16)
        return result;
    }
  }
  if ((v4 & 1) == 0)
  {
    v5 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v5;
    LODWORD(v5) = result[4];
    result[4] = a2[4];
    a2[4] = v5;
    return result;
  }
  v4 = *result;
  v6 = result;
  result = a2;
LABEL_7:
  v7 = 0;
  v18 = *(_OWORD *)(v6 + 2);
  *v6 = v4 | 1;
  do
  {
    v8 = result[v7 + 2];
    v6[v7 + 2] = v8;
    if (v8 <= 0xFFFFFFFD)
      *(_QWORD *)&v6[v7 + 4] = *(_QWORD *)&result[v7 + 4];
    v7 += 4;
  }
  while (v7 != 16);
  *result &= ~1u;
  *(_OWORD *)(result + 2) = v18;
  return result;
}

unint64_t sub_1C6224F8C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t result;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1C5305440(a1, a3, a2);
  v6 = *(_DWORD *)(a1 + 8);
  if (a2)
  {
    v7 = result;
    result = *(_QWORD *)a1 + 472 * v6;
    v8 = a2;
    do
    {
      result = sub_1C62250E8(result, v7) + 472;
      --v8;
    }
    while (v8);
    v6 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v6 + a2;
  return result;
}

void sub_1C6224FFC(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 472, &v5);
  sub_1C6225068(a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C6225068(uint64_t a1, uint64_t a2)
{
  __n128 v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_1C53054A8(*(_QWORD *)a1, *(_QWORD *)a1 + 472 * (unint64_t)*(unsigned int *)(a1 + 8), a2);
  v4 = *(_DWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)a1;
    v6 = 472 * v4;
    do
    {
      v7 = v5 + v6;
      if ((*(_BYTE *)(v5 + v6 - 424) & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v7 - 416), 8, v3);
      sub_1C6176BF8((_QWORD *)(v7 - 472));
      v6 -= 472;
    }
    while (v6);
  }
}

uint64_t sub_1C62250E8(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  sub_1C5305794(a1, a2);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_1C5305808((_QWORD *)(a1 + 24), *(_BYTE **)(a2 + 24), *(_BYTE **)(a2 + 32), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  *(_DWORD *)(a1 + 48) |= 1u;
  sub_1C62234A4((int *)(a1 + 48));
  sub_1C6225188(a1 + 48, (_DWORD *)(a2 + 48));
  v4 = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 449) = *(_OWORD *)(a2 + 449);
  *(_OWORD *)(a1 + 440) = v4;
  return a1;
}

void *sub_1C6225188(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t v5;

  v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
    v4 = *(_DWORD *)a1;
  }
  *(_DWORD *)a1 = v4 | 1;
  if ((*(_BYTE *)a2 & 1) == 0 && a2[4] >= 9u)
  {
    *(_DWORD *)a1 = v4 & 0xFFFFFFFE;
    if ((*a2 & 1) != 0)
      v5 = 8;
    else
      v5 = a2[4];
    *(_QWORD *)(a1 + 8) = operator new(16 * (v5 + 2 * v5), (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v5;
  }
  return sub_1C622521C((unsigned int *)a1, a2);
}

void *sub_1C622521C(unsigned int *a1, _DWORD *a2)
{
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  size_t v7;

  v3 = *a1 & 1;
  *a1 = *a2 & 0xFFFFFFFE | v3;
  a1[1] = a2[1];
  v4 = a1 + 2;
  if (!v3)
    v4 = (_QWORD *)*v4;
  v6 = *(_BYTE *)a2;
  v5 = a2 + 2;
  if ((v6 & 1) == 0)
    v5 = (_QWORD *)*v5;
  if (v3)
    v7 = 384;
  else
    v7 = 48 * a1[4];
  return memcpy(v4, v5, v7);
}

void sub_1C6225270(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_1C6225344(a1, a2);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
      {
        v7 = 976 * a2 - 976 * v2;
        v8 = *(_QWORD *)a1 + 976 * v2 + 16;
        do
        {
          *(_QWORD *)(v8 - 16) = v8;
          *(_QWORD *)(v8 - 8) = 0x800000000;
          v8 += 976;
          v7 -= 976;
        }
        while (v7);
      }
    }
    else
    {
      v5 = (void **)(*(_QWORD *)a1 + 976 * v2 - 976);
      v6 = 976 * a2 - 976 * v2;
      do
      {
        if (v5 + 2 != *v5)
          free(*v5);
        v5 -= 122;
        v6 += 976;
      }
      while (v6);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

void sub_1C6225344(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 976, &v5);
  sub_1C62253B0((uint64_t *)a1, v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C62253B0(uint64_t *a1, _QWORD *a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v5 = *a1;
    v6 = 976 * v2;
    do
    {
      *a2 = a2 + 2;
      a2[1] = 0x800000000;
      if (*(_DWORD *)(v5 + 8))
        sub_1C53058BC((uint64_t)a2, (uint64_t *)v5);
      v5 += 976;
      a2 += 122;
      v6 -= 976;
    }
    while (v6);
    v7 = *((_DWORD *)a1 + 2);
    if (v7)
    {
      v8 = *a1;
      v9 = 976 * v7;
      do
      {
        v10 = *(void **)(v8 + v9 - 976);
        if ((void *)(v8 + v9 - 960) != v10)
          free(v10);
        v9 -= 976;
      }
      while (v9);
    }
  }
}

uint64_t sub_1C6225464(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

void sub_1C6225480(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (a2)
  {
    v2 = 208 * a2;
    v3 = a1 + 184;
    do
    {
      if ((*(_QWORD *)(v3 - 184) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        sub_1C61247C0(v3, *(_QWORD **)(v3 + 8));
        v4 = *(void **)(v3 - 176);
        if ((void *)(v3 - 160) != v4)
          free(v4);
      }
      v3 += 208;
      v2 -= 208;
    }
    while (v2);
  }
}

void sub_1C62254EC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  void **v3;

  if (a2)
  {
    v2 = 72 * a2;
    v3 = (void **)(a1 + 16);
    do
    {
      if (((unint64_t)*(v3 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v3 != *(v3 - 1))
        free(*v3);
      v3 += 9;
      v2 -= 72;
    }
    while (v2);
  }
}

_QWORD *sub_1C6225548(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_1C6224A84(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C62255FC(a1, a2, v8);
    v7 = *a2;
    *(_OWORD *)(v5 + 21) = 0u;
    *(_OWORD *)(v5 + 19) = 0u;
    *(_OWORD *)(v5 + 17) = 0u;
    *(_OWORD *)(v5 + 15) = 0u;
    *(_OWORD *)(v5 + 13) = 0u;
    *(_OWORD *)(v5 + 11) = 0u;
    *(_OWORD *)(v5 + 9) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *v5 = v7;
    v5[1] = v5 + 3;
    v5[2] = 0x400000000;
    v5[25] = 0;
    v5[24] = 0;
    v5[23] = v5 + 24;
  }
  return v5;
}

_QWORD *sub_1C62255FC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5305AD8(a1, v6);
  v8 = 0;
  sub_1C6224A84(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_1C62256AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 208 * v6;
    do
    {
      *v7 = -4096;
      v7 += 26;
      v8 -= 208;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      sub_1C6224A84(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v12);
      v10 = v12;
      *v12 = *(_QWORD *)a2;
      sub_1C6221FD4(v10 + 1, a2 + 8);
      ++*(_DWORD *)(a1 + 8);
      sub_1C61247C0(a2 + 184, *(_QWORD **)(a2 + 192));
      v11 = *(void **)(a2 + 8);
      if ((void *)(a2 + 24) != v11)
        free(v11);
    }
    a2 += 208;
  }
}

uint64_t sub_1C6225784(uint64_t a1, uint64_t a2, uint64_t *a3, _OWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C617A1AC(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C617A248(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_OWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t llvm::ModuleSlotTracker::ModuleSlotTracker(uint64_t this, const llvm::Module *a2, char a3)
{
  *(_QWORD *)this = &off_1E814DC18;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = a2 != 0;
  *(_BYTE *)(this + 17) = a3;
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 104) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 24) = a2;
  return this;
}

uint64_t llvm::ModuleSlotTracker::getMachine(llvm::ModuleSlotTracker *this)
{
  char *v2;
  llvm::SlotTracker *v4;
  __n128 v5;
  uint64_t v6;
  llvm::ModuleSlotTracker *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(void);
  void (**v12)(void);
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 16))
  {
    v2 = (char *)this + 40;
    return *(_QWORD *)v2;
  }
  *((_BYTE *)this + 16) = 0;
  v4 = (llvm::SlotTracker *)operator new();
  v5.n128_f64[0] = llvm::SlotTracker::SlotTracker(v4, *((const llvm::Module **)this + 3), *((_BYTE *)this + 17));
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v4;
  if (v6)
  {
    (*(void (**)(uint64_t, double))(*(_QWORD *)v6 + 8))(v6, v5.n128_f64[0]);
    v4 = (llvm::SlotTracker *)*((_QWORD *)this + 1);
  }
  *((_QWORD *)this + 5) = v4;
  v2 = (char *)this + 40;
  v7 = (llvm::ModuleSlotTracker *)*((_QWORD *)this + 9);
  if (v7)
  {
    if (v7 == (llvm::ModuleSlotTracker *)((char *)this + 48))
    {
      v16 = v15;
      (*(void (**)(llvm::ModuleSlotTracker *, _QWORD *, __n128))(*(_QWORD *)v7 + 24))(v7, v15, v5);
    }
    else
    {
      v16 = (_QWORD *)(*(uint64_t (**)(llvm::ModuleSlotTracker *, __n128))(*(_QWORD *)v7 + 16))(v7, v5);
    }
    sub_1C6225AA8((_QWORD *)v4 + 4, v15);
    if (v16 == v15)
    {
      v12 = (void (**)(void))(v15[0] + 32);
    }
    else
    {
      if (!v16)
        goto LABEL_7;
      v12 = (void (**)(void))(*v16 + 40);
    }
    (*v12)();
  }
LABEL_7:
  v8 = (char *)*((_QWORD *)this + 13);
  if (v8)
  {
    v9 = (char *)this + 80;
    v10 = *((_QWORD *)this + 5);
    if (v8 == v9)
    {
      v14 = v13;
      (*(void (**)(char *, _QWORD *, __n128))(*(_QWORD *)v8 + 24))(v8, v13, v5);
    }
    else
    {
      v14 = (_QWORD *)(*(uint64_t (**)(char *, __n128))(*(_QWORD *)v8 + 16))(v8, v5);
    }
    sub_1C6225AA8((_QWORD *)(v10 + 64), v13);
    if (v14 == v13)
    {
      v11 = *(void (**)(void))(v13[0] + 32);
    }
    else
    {
      if (!v14)
        return *(_QWORD *)v2;
      v11 = *(void (**)(void))(*v14 + 40);
    }
    v11();
  }
  return *(_QWORD *)v2;
}

_DWORD *llvm::ModuleSlotTracker::incorporateFunction(const llvm::Function **this, const llvm::Function *a2)
{
  _DWORD *result;
  const llvm::Function *v5;
  const llvm::Function *v6;
  const llvm::Function *v7;

  result = (_DWORD *)llvm::ModuleSlotTracker::getMachine((llvm::ModuleSlotTracker *)this);
  if (result)
  {
    v5 = this[4];
    if (v5 != a2)
    {
      if (v5)
      {
        v6 = this[5];
        result = sub_1C4ECAD30((_DWORD *)v6 + 34);
        *((_QWORD *)v6 + 2) = 0;
        *((_BYTE *)v6 + 24) = 0;
      }
      v7 = this[5];
      *((_QWORD *)v7 + 2) = a2;
      *((_BYTE *)v7 + 24) = 0;
      this[4] = a2;
    }
  }
  return result;
}

uint64_t llvm::ModuleSlotTracker::getLocalSlot(llvm::SlotTracker **this, const llvm::Value *a2)
{
  return llvm::SlotTracker::getLocalSlot(this[5], a2);
}

_QWORD *llvm::ModuleSlotTracker::setProcessHook(uint64_t a1, _QWORD *a2)
{
  return sub_1C6225AA8((_QWORD *)(a1 + 48), a2);
}

{
  return sub_1C6225AA8((_QWORD *)(a1 + 80), a2);
}

_QWORD *sub_1C6225AA8(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  void (**v4)(void);
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v7 = v6;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v6);
    }
    else
    {
      v7 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_1C48C35D8(v6, a1);
  if (v7 == v6)
  {
    v4 = (void (**)(void))(v6[0] + 32);
    goto LABEL_7;
  }
  if (v7)
  {
    v4 = (void (**)(void))(*v7 + 40);
LABEL_7:
    (*v4)();
  }
  return a1;
}

double llvm::SlotTracker::SlotTracker(llvm::SlotTracker *this, const llvm::Module *a2, char a3)
{
  double result;

  *(_QWORD *)this = &off_1E814DC38;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_BYTE *)this + 25) = a3;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 32) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_DWORD *)this + 48) = 0;
  *((_DWORD *)this + 56) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_DWORD *)this + 54) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0x1000000000;
  *((_DWORD *)this + 66) = 0;
  *((_DWORD *)this + 74) = 0;
  *((_DWORD *)this + 72) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0x1000000000;
  *((_DWORD *)this + 84) = 0;
  return result;
}

double llvm::SlotTracker::SlotTracker(llvm::SlotTracker *this, const llvm::Function *a2, char a3)
{
  uint64_t v3;
  double result;

  *(_QWORD *)this = &off_1E814DC38;
  if (a2)
    v3 = *((_QWORD *)a2 + 5);
  else
    v3 = 0;
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = a2;
  *((_BYTE *)this + 24) = 0;
  *((_BYTE *)this + 25) = a3;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 32) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_DWORD *)this + 48) = 0;
  *((_DWORD *)this + 56) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_DWORD *)this + 54) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0x1000000000;
  *((_DWORD *)this + 66) = 0;
  *((_DWORD *)this + 74) = 0;
  *((_DWORD *)this + 72) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0x1000000000;
  *((_DWORD *)this + 84) = 0;
  return result;
}

uint64_t llvm::SlotTracker::getGlobalSlot(llvm::SlotTracker *this, const llvm::GlobalValue *a2)
{
  int v4;
  uint64_t result;
  const llvm::GlobalValue *v6;
  uint64_t v7;

  sub_1C5309BB8(this);
  v6 = a2;
  v7 = 0;
  v4 = sub_1C47AD1C0((uint64_t)this + 104, &v6, &v7);
  result = 0xFFFFFFFFLL;
  if (v4)
  {
    if (v7 != *((_QWORD *)this + 13) + 16 * *((unsigned int *)this + 30))
      return *(unsigned int *)(v7 + 8);
  }
  return result;
}

uint64_t llvm::SlotTracker::getModulePathSlot(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 96))
  {
    llvm::SlotTracker::processIndex((llvm::SlotTracker *)a1);
    *(_QWORD *)(a1 + 96) = 0;
  }
  result = llvm::StringMapImpl::FindKey((uint64_t *)(a1 + 232), a2, a3);
  if ((_DWORD)result != -1)
  {
    if ((int)result == (unint64_t)*(unsigned int *)(a1 + 240))
      return 0xFFFFFFFFLL;
    else
      return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * (int)result) + 8);
  }
  return result;
}

uint64_t llvm::SlotTracker::getTypeIdSlot(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 96))
  {
    llvm::SlotTracker::processIndex((llvm::SlotTracker *)a1);
    *(_QWORD *)(a1 + 96) = 0;
  }
  result = llvm::StringMapImpl::FindKey((uint64_t *)(a1 + 304), a2, a3);
  if ((_DWORD)result != -1)
  {
    if ((int)result == (unint64_t)*(unsigned int *)(a1 + 312))
      return 0xFFFFFFFFLL;
    else
      return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 304) + 8 * (int)result) + 8);
  }
  return result;
}

_QWORD *llvm::Function::print(llvm::Function *this, llvm::raw_ostream *a2, llvm::AssemblyAnnotationWriter *a3, char a4, char a5)
{
  uint64_t v9;
  uint64_t (**v11)(llvm::raw_ostream *);
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  __int128 v22;
  uint64_t v23;
  llvm::raw_ostream *v24[78];
  _QWORD v25[3];
  __int16 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v9 = *((_QWORD *)this + 5);
  v25[0] = &off_1E814DC38;
  v25[1] = v9;
  v25[2] = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0u;
  v29 = 0u;
  v31 = 0;
  v30 = 0;
  v33 = 0;
  v32 = 0;
  v35 = 0;
  v34 = 0;
  v37 = 0;
  v36 = 0;
  v39 = 0;
  v38 = 0;
  v41 = 0;
  v40 = 0;
  v43 = 0;
  v42 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0x1000000000;
  v47 = 0;
  v51 = 0;
  v50 = 0;
  v48 = 0;
  v49 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0x1000000000;
  v55 = 0;
  v12 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 1;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  v11 = &off_1E81A1100;
  v19 = 0;
  v20 = 0;
  v21 = &v23;
  v22 = xmmword_1C6612EF0;
  sub_1C4D685DC((uint64_t)&v11, (uint64_t)a2);
  sub_1C5309E54((uint64_t)v24, (uint64_t)&v11, (uint64_t)v25, *((_QWORD *)this + 5), (uint64_t)a3, a5, a4);
  sub_1C530A0C4(v24, (llvm::LLVMContext ***)this);
  sub_1C530B4B8(v24);
  sub_1C4D687F0((llvm::raw_ostream *)&v11);
  return sub_1C531C430(v25);
}

_QWORD *llvm::BasicBlock::print(llvm::BasicBlock *this, llvm::raw_ostream *a2, llvm::AssemblyAnnotationWriter *a3, char a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t Module;
  uint64_t (**v13)(llvm::raw_ostream *);
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  __int128 v24;
  uint64_t v25;
  llvm::raw_ostream *v26[78];
  _QWORD v27[3];
  __int16 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v9 = *((_QWORD *)this + 7);
  v27[0] = &off_1E814DC38;
  if (v9)
    v10 = *(_QWORD *)(v9 + 40);
  else
    v10 = 0;
  v27[1] = v10;
  v27[2] = v9;
  v28 = 0;
  v29 = 0;
  v30 = 0u;
  v31 = 0u;
  v33 = 0;
  v32 = 0;
  v35 = 0;
  v34 = 0;
  v37 = 0;
  v36 = 0;
  v39 = 0;
  v38 = 0;
  v41 = 0;
  v40 = 0;
  v43 = 0;
  v42 = 0;
  v45 = 0;
  v44 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0x1000000000;
  v49 = 0;
  v53 = 0;
  v52 = 0;
  v50 = 0;
  v51 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0x1000000000;
  v57 = 0;
  v14 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 1;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v13 = &off_1E81A1100;
  v21 = 0;
  v22 = 0;
  v23 = &v25;
  v24 = xmmword_1C6612EF0;
  sub_1C4D685DC((uint64_t)&v13, (uint64_t)a2);
  Module = llvm::BasicBlock::getModule(this);
  sub_1C5309E54((uint64_t)v26, (uint64_t)&v13, (uint64_t)v27, Module, (uint64_t)a3, a5, a4);
  sub_1C530B5A8(v26, (uint64_t ***)this);
  sub_1C530B4B8(v26);
  sub_1C4D687F0((llvm::raw_ostream *)&v13);
  return sub_1C531C430(v27);
}

_QWORD *llvm::NamedMDNode::print(llvm::NamedMDNode *this, llvm::raw_ostream *a2, char a3)
{
  uint64_t v5;
  uint64_t (**v7)(llvm::raw_ostream *);
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[78];
  _QWORD v21[3];
  __int16 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 5);
  v21[0] = &off_1E814DC38;
  v21[1] = v5;
  v21[2] = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0u;
  v25 = 0u;
  v27 = 0;
  v26 = 0;
  v29 = 0;
  v28 = 0;
  v31 = 0;
  v30 = 0;
  v33 = 0;
  v32 = 0;
  v35 = 0;
  v34 = 0;
  v37 = 0;
  v36 = 0;
  v39 = 0;
  v38 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0x1000000000;
  v43 = 0;
  v47 = 0;
  v46 = 0;
  v44 = 0;
  v45 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0x1000000000;
  v51 = 0;
  v8 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 1;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v7 = &off_1E81A1100;
  v15 = 0;
  v16 = 0;
  v17 = &v19;
  v18 = xmmword_1C6612EF0;
  sub_1C4D685DC((uint64_t)&v7, (uint64_t)a2);
  sub_1C5309E54((uint64_t)v20, (uint64_t)&v7, (uint64_t)v21, *((_QWORD *)this + 5), 0, a3, 0);
  sub_1C530D320((uint64_t)v20, (uint64_t)this);
  sub_1C530B4B8(v20);
  sub_1C4D687F0((llvm::raw_ostream *)&v7);
  return sub_1C531C430(v21);
}

llvm::raw_ostream *llvm::NamedMDNode::print(llvm::NamedMDNode *this, llvm::raw_ostream *a2, llvm::ModuleSlotTracker *a3, char a4)
{
  _QWORD *Machine;
  uint64_t v8;
  llvm::raw_ostream *result;
  uint64_t (**v10)(llvm::raw_ostream *);
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[78];
  _QWORD v24[3];
  __int16 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  LOBYTE(v24[0]) = 0;
  v55 = 0;
  Machine = (_QWORD *)llvm::ModuleSlotTracker::getMachine(a3);
  if (!Machine)
  {
    v8 = *((_QWORD *)this + 5);
    v24[0] = &off_1E814DC38;
    v24[1] = v8;
    v24[2] = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0u;
    v28 = 0u;
    v30 = 0;
    v29 = 0;
    v32 = 0;
    v31 = 0;
    v34 = 0;
    v33 = 0;
    v38 = 0;
    v37 = 0;
    v35 = 0;
    v36 = 0;
    v40 = 0;
    v39 = 0;
    v42 = 0;
    v41 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0x1000000000;
    v46 = 0;
    v50 = 0;
    v49 = 0;
    v47 = 0;
    v48 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0x1000000000;
    v54 = 0;
    Machine = v24;
    v55 = 1;
  }
  v11 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 1;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  v10 = &off_1E81A1100;
  v18 = 0;
  v19 = 0;
  v20 = &v22;
  v21 = xmmword_1C6612EF0;
  sub_1C4D685DC((uint64_t)&v10, (uint64_t)a2);
  sub_1C5309E54((uint64_t)v23, (uint64_t)&v10, (uint64_t)Machine, *((_QWORD *)this + 5), 0, a4, 0);
  sub_1C530D320((uint64_t)v23, (uint64_t)this);
  sub_1C530B4B8(v23);
  result = sub_1C4D687F0((llvm::raw_ostream *)&v10);
  if (v55)
    return (llvm::raw_ostream *)sub_1C531C430(v24);
  return result;
}

llvm::raw_ostream *llvm::Comdat::print(size_t **this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v4;
  size_t v5;
  _BYTE *v6;
  llvm::raw_ostream *result;
  uint64_t v8;
  _BYTE *v9;

  v4 = (llvm::raw_ostream *)(*this + 9);
  v5 = **this;
  v6 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v6 >= *((_QWORD *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 36);
  }
  else
  {
    *((_QWORD *)a2 + 4) = v6 + 1;
    *v6 = 36;
  }
  llvm::printLLVMNameWithoutPrefix(a2, v4, v5);
  result = sub_1C4816AD8(a2, " = comdat ");
  v8 = *((int *)this + 2);
  if (v8 <= 4)
    result = sub_1C4816AD8(a2, off_1E814DD70[v8]);
  v9 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)a2 + 3))
    return llvm::raw_ostream::write(a2, 10);
  *((_QWORD *)a2 + 4) = v9 + 1;
  *v9 = 10;
  return result;
}

llvm::raw_ostream *llvm::Metadata::print(uint64_t **this, llvm::raw_ostream *a2, llvm::ModuleSlotTracker *a3, const llvm::Module *a4)
{
  return sub_1C5314B04((uint64_t)a2, this, a3, (uint64_t)a4, 0, 0);
}

uint64_t llvm::Value::printAsOperand(llvm::Value *this, llvm::raw_ostream *a2, int a3, llvm::ModuleSlotTracker *a4)
{
  uint64_t result;
  uint64_t Machine;

  if ((a3 & 1) != 0)
    return sub_1C5314910((uint64_t *)this, a2, a3, a4);
  Machine = llvm::ModuleSlotTracker::getMachine(a4);
  result = sub_1C53148A8((unsigned __int8 *)this, (char **)a2, Machine, *((_QWORD *)a4 + 3));
  if ((result & 1) == 0)
    return sub_1C5314910((uint64_t *)this, a2, a3, a4);
  return result;
}

uint64_t llvm::Value::printAsOperand(llvm::Value *this, llvm::raw_ostream *a2, int a3, const llvm::Module *a4)
{
  const llvm::Module *v4;
  uint64_t result;
  BOOL v9;
  _QWORD v10[2];
  __int16 v11;
  const llvm::Module *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  char v18;
  BOOL v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;

  v4 = a4;
  v49 = *MEMORY[0x1E0C80C00];
  if (!a4)
    v4 = (const llvm::Module *)sub_1C530E898((uint64_t)this);
  if ((a3 & 1) != 0
    || (result = sub_1C53148A8((unsigned __int8 *)this, (char **)a2, 0, (uint64_t)v4), (result & 1) == 0))
  {
    v9 = *((_BYTE *)this + 16) == 23;
    v17[0] = &off_1E814DC38;
    v17[1] = v4;
    v17[2] = 0;
    v18 = 0;
    v19 = v9;
    v20 = 0;
    v21 = 0u;
    v22 = 0u;
    v24 = 0;
    v23 = 0;
    v25 = 0;
    v26 = 0;
    v28 = 0;
    v27 = 0;
    v29 = 0;
    v30 = 0;
    v32 = 0;
    v31 = 0;
    v33 = 0;
    v34 = 0;
    v36 = 0;
    v35 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0x1000000000;
    v40 = 0;
    v44 = 0;
    v43 = 0;
    v41 = 0;
    v42 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0x1000000000;
    v48 = 0;
    v10[0] = &off_1E814DC18;
    v10[1] = 0;
    v11 = 0;
    v12 = v4;
    v13 = 0;
    v14 = v17;
    v15 = 0;
    v16 = 0;
    sub_1C5314910((uint64_t *)this, a2, a3, (llvm::ModuleSlotTracker *)v10);
    llvm::ModuleSlotTracker::~ModuleSlotTracker((llvm::ModuleSlotTracker *)v10);
    return (uint64_t)sub_1C531C430(v17);
  }
  return result;
}

llvm::raw_ostream *llvm::Metadata::printAsOperand(uint64_t **this, llvm::raw_ostream *a2, llvm::ModuleSlotTracker *a3, const llvm::Module *a4)
{
  return sub_1C5314B04((uint64_t)a2, this, a3, (uint64_t)a4, 1, 0);
}

void llvm::Metadata::print(uint64_t **this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  _QWORD v6[2];
  BOOL v7;
  char v8;
  const llvm::Module *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E814DC18;
  v6[1] = 0;
  v7 = a3 != 0;
  v8 = sub_1C5321CA0(this);
  v13 = 0;
  v12 = 0;
  v10 = 0;
  v11 = 0;
  v9 = a3;
  sub_1C5314B04((uint64_t)a2, this, (llvm::ModuleSlotTracker *)v6, (uint64_t)a3, 0, 0);
  llvm::ModuleSlotTracker::~ModuleSlotTracker((llvm::ModuleSlotTracker *)v6);
}

llvm *llvm::Value::dump(llvm::Value *this)
{
  llvm *v2;
  llvm *v3;
  llvm *result;
  _BYTE *v5;

  v2 = llvm::dbgs(this);
  llvm::Value::print(this, v2, 1);
  result = llvm::dbgs(v3);
  v5 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v5 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v5 + 1;
  *v5 = 10;
  return result;
}

llvm *llvm::Type::dump(llvm::Type *this)
{
  llvm *v2;
  llvm *v3;
  llvm *result;
  _BYTE *v5;

  v2 = llvm::dbgs(this);
  v3 = (llvm *)llvm::Type::print(this, v2, 0, 0);
  result = llvm::dbgs(v3);
  v5 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v5 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v5 + 1;
  *v5 = 10;
  return result;
}

_QWORD *llvm::Module::dump(llvm::Module *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return llvm::Module::print((const std::string *)this, v2, 0, 0, 1);
}

llvm::raw_ostream *llvm::Comdat::dump(llvm::Comdat *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return llvm::Comdat::print((size_t **)this, v2);
}

_QWORD *llvm::NamedMDNode::dump(llvm::NamedMDNode *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return llvm::NamedMDNode::print(this, v2, 1);
}

llvm *llvm::Metadata::dump(llvm::Metadata *this)
{
  return llvm::Metadata::dump(this, 0);
}

llvm *llvm::Metadata::dump(llvm::Metadata *this, const llvm::Module *a2)
{
  llvm *v4;
  llvm *v5;
  llvm *result;
  _BYTE *v7;

  v4 = llvm::dbgs(this);
  llvm::Metadata::print((uint64_t **)this, v4, a2);
  result = llvm::dbgs(v5);
  v7 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v7 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v7 + 1;
  *v7 = 10;
  return result;
}

llvm *llvm::MDNode::dumpTree(llvm::MDNode *this)
{
  return llvm::MDNode::dumpTree(this, 0);
}

llvm *llvm::MDNode::dumpTree(llvm::MDNode *this, const llvm::Module *a2)
{
  llvm *v4;
  llvm *v5;
  llvm *result;
  _BYTE *v7;
  _QWORD v8[2];
  BOOL v9;
  char v10;
  const llvm::Module *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = llvm::dbgs(this);
  v8[0] = &off_1E814DC18;
  v8[1] = 0;
  v9 = a2 != 0;
  v10 = 1;
  v15 = 0;
  v14 = 0;
  v12 = 0;
  v13 = 0;
  v11 = a2;
  sub_1C5314B04((uint64_t)v4, (uint64_t **)this, (llvm::ModuleSlotTracker *)v8, (uint64_t)a2, 0, 1);
  llvm::ModuleSlotTracker::~ModuleSlotTracker((llvm::ModuleSlotTracker *)v8);
  result = llvm::dbgs(v5);
  v7 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v7 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v7 + 1;
  *v7 = 10;
  return result;
}

_QWORD *llvm::ModuleSummaryIndex::dump(llvm::ModuleSummaryIndex *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return llvm::ModuleSummaryIndex::print(this, v2, 1);
}

void sub_1C6226B0C(_QWORD *a1)
{
  sub_1C531C430(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6226B30(uint64_t a1)
{
  return *(unsigned int *)(a1 + 192);
}

uint64_t *sub_1C6226B38(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  v4 = *((unsigned int *)a1 + 4);
  v5 = *a1;
  if ((_DWORD)v4)
  {
    v6 = 56 * v4;
    v7 = v5 + 8;
    do
    {
      if ((*(_QWORD *)(v7 - 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v7 = sub_1C621E630(v7);
      v7 += 56;
      v6 -= 56;
    }
    while (v6);
    v5 = *a1;
  }
  MEMORY[0x1CAA32FB4](v5, 8);
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = 0;
  *a1 = *a2;
  *a2 = 0;
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  v8 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v8;
  v9 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v9;
  return a1;
}

uint64_t sub_1C6226BF0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v13 = *a2;
  v14 = 0;
  sub_1C51934B8(a1, &v13, &v14, (uint64_t)&v11);
  v4 = v11;
  if (v12)
  {
    v8 = (unint64_t)*a2;
    v9 = 0;
    v10 = 0;
    sub_1C52E1390((uint64_t *)(a1 + 24), &v8);
    if (*((_QWORD *)&v8 + 1))
      operator delete(*((void **)&v8 + 1));
    v5 = *(_QWORD *)(a1 + 24);
    v6 = ((unint64_t)(*(_QWORD *)(a1 + 32) - v5) >> 5) - 1;
    *(_DWORD *)(v4 + 8) = v6;
  }
  else
  {
    v6 = *(_DWORD *)(v11 + 8);
    v5 = *(_QWORD *)(a1 + 24);
  }
  return v5 + 32 * v6 + 8;
}

uint64_t sub_1C6226C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = a2;
  if (sub_1C47AD1C0(a1, &v8, &v7))
  {
    v3 = v7;
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 16);
    v3 = *(_QWORD *)a1 + 16 * v5;
  }
  if (v3 == v4 + 16 * v5)
    return 0;
  else
    return *(unsigned int *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v3 + 8) + 8);
}

uint64_t sub_1C6226D14(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v13 = *a2;
  v14 = 0;
  sub_1C51934B8(a1, &v13, &v14, (uint64_t)&v11);
  v4 = v11;
  if (v12)
  {
    v10 = (unint64_t)*a2;
    v5 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 40))
    {
      v6 = sub_1C4E3D7FC((void **)(a1 + 24), &v10);
    }
    else
    {
      *v5 = v10;
      v6 = v5 + 1;
    }
    *(_QWORD *)(a1 + 32) = v6;
    v8 = *(_QWORD *)(a1 + 24);
    v7 = (((unint64_t)v6 - v8) >> 4) - 1;
    *(_DWORD *)(v4 + 8) = v7;
  }
  else
  {
    v7 = *(_DWORD *)(v11 + 8);
    v8 = *(_QWORD *)(a1 + 24);
  }
  return v8 + 16 * v7 + 8;
}

_QWORD *sub_1C6226DCC(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C531C328(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6226E44(a1, a2, v7);
    *v5 = *a2;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
  }
  return v5;
}

_QWORD *sub_1C6226E44(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C531D458(a1, v6);
  v8 = 0;
  sub_1C531C328(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C6226EF4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 56 * v6;
    do
    {
      *v7 = -4096;
      v7 += 7;
      v8 -= 56;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      sub_1C531C328(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      sub_1C6182CAC((uint64_t)(v10 + 1), (uint64_t)(a2 + 1));
      ++*(_DWORD *)(v5 + 8);
      result = sub_1C621E630((uint64_t)(a2 + 1));
    }
    a2 += 7;
  }
  return result;
}

llvm::SmallPtrSetImplBase *sub_1C6226FB8(llvm::SmallPtrSetImplBase *this, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = (char *)this + 32;
  *((_QWORD *)this + 1) = (char *)this + 32;
  *((_QWORD *)this + 2) = 4;
  *((_DWORD *)this + 6) = 0;
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      v6 = *a2++;
      sub_1C4774094(this, v6);
      v5 -= 8;
    }
    while (v5);
  }
  return this;
}

void sub_1C6227018(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  std::string::size_type v6;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    sub_1C6227094(a1, a2);
  }
  else
  {
    v4 = *(_QWORD *)a1 + 32 * v3;
    *(_DWORD *)v4 = *(_DWORD *)a2;
    v5 = *(const char **)(a2 + 8);
    v6 = strlen(v5);
    std::string::__init((std::string *)(v4 + 8), v5, v6);
    ++*(_DWORD *)(a1 + 8);
  }
}

uint64_t sub_1C6227094(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  const char *v6;
  std::string::size_type v7;
  int v8;
  uint64_t v9;
  unint64_t v11;

  v11 = 0;
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 32, &v11);
  v5 = &v4[32 * *(unsigned int *)(a1 + 8)];
  *(_DWORD *)v5 = *(_DWORD *)a2;
  v6 = *(const char **)(a2 + 8);
  v7 = strlen(v6);
  std::string::__init((std::string *)(v5 + 8), v6, v7);
  sub_1C5323064((uint64_t *)a1, (uint64_t)v4);
  v8 = v11;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  v9 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v8;
  return (uint64_t)&v4[32 * v9 - 32];
}

uint64_t sub_1C6227144(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 4) != 0xFFFFFFFFFFFFFFFCLL)
    {
      v11 = 0;
      result = sub_1C5323BCC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

BOOL sub_1C6227268(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = *(const void **)a2;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = 16 * v3;
    v7 = *a1;
    while (*(_QWORD *)(v7 + 8) != v5 || v5 && memcmp(*(const void **)v7, v4, v5))
    {
      v7 += 16;
      v6 -= 16;
      if (!v6)
      {
        v7 = v2 + 16 * v3;
        return v3 != (v7 - v2) >> 4;
      }
    }
  }
  else
  {
    v7 = *a1;
  }
  return v3 != (v7 - v2) >> 4;
}

unint64_t llvm::Attribute::getWithDereferenceableOrNullBytes(llvm::Attribute *this, llvm::LLVMContext *a2)
{
  return llvm::Attribute::get((uint64_t *)this, 77, (uint64_t)a2);
}

unint64_t llvm::Attribute::getWithByValType(llvm::Attribute *this, llvm::LLVMContext *a2, llvm::Type *a3)
{
  return llvm::Attribute::get((uint64_t *)this, 69, (uint64_t)a2);
}

unint64_t llvm::Attribute::getWithStructRetType(llvm::Attribute *this, llvm::LLVMContext *a2, llvm::Type *a3)
{
  return llvm::Attribute::get((uint64_t *)this, 73, (uint64_t)a2);
}

unint64_t llvm::Attribute::getWithInAllocaType(llvm::Attribute *this, llvm::LLVMContext *a2, llvm::Type *a3)
{
  return llvm::Attribute::get((uint64_t *)this, 71, (uint64_t)a2);
}

unint64_t llvm::Attribute::getWithUWTableKind(uint64_t *a1, int a2)
{
  return llvm::Attribute::get(a1, 79, a2);
}

unint64_t llvm::Attribute::getWithAllocSizeArgs(uint64_t *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;

  v3 = 0xFFFFFFFFLL;
  if (*((_BYTE *)a3 + 4))
    v3 = *a3;
  return llvm::Attribute::get(a1, 75, v3 | (a2 << 32));
}

unint64_t llvm::Attribute::getWithVScaleRangeArgs(llvm::Attribute *this, llvm::LLVMContext *a2, unsigned int a3)
{
  return llvm::Attribute::get((uint64_t *)this, 80, a3 | ((_QWORD)a2 << 32));
}

uint64_t llvm::Attribute::getDereferenceableBytes(llvm::Attribute *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 16);
}

uint64_t llvm::Attribute::operator<(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;

  v2 = *a1;
  if (v2)
    v3 = 1;
  else
    v3 = a2 == 0;
  v4 = !v3;
  if (v2)
    v5 = a2 == 0;
  else
    v5 = 1;
  if (v5)
    return v4;
  else
    return llvm::AttributeImpl::operator<(v2, a2);
}

uint64_t llvm::AttributeSet::addAttribute(uint64_t *a1, uint64_t *a2, unsigned __int8 *a3, size_t a4, unsigned __int8 *a5, size_t a6)
{
  unsigned int *v10;
  uint64_t Sorted;
  uint64_t v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[9];

  v16[8] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x800000000;
  v10 = llvm::Attribute::get(a2, a3, a4, a5, a6);
  sub_1C532EADC((uint64_t)&v14, a3, a4, (uint64_t)v10);
  Sorted = llvm::AttributeSetNode::getSorted(a2, (uint64_t *)v14, v15);
  v12 = llvm::AttributeSet::addAttributes(a1, a2, Sorted);
  if (v14 != v16)
    free(v14);
  return v12;
}

uint64_t llvm::AttrBuilder::merge(uint64_t this, const llvm::AttrBuilder *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v2)
  {
    v3 = (uint64_t *)*((_QWORD *)a2 + 1);
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      this = llvm::AttrBuilder::addAttribute(this, v5);
      v4 -= 8;
    }
    while (v4);
  }
  return this;
}

uint64_t llvm::AttributeSet::getAttribute(uint64_t *a1, int a2)
{
  uint64_t result;
  char v3;

  result = *a1;
  if (result)
  {
    result = llvm::AttributeSetNode::findEnumAttribute(result, a2);
    if (!v3)
      return 0;
  }
  return result;
}

uint64_t llvm::AttributeSet::getAttribute(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[2];
  uint64_t v6;

  v3 = *a1;
  if (*a1 && (v5[0] = a2, v5[1] = a3, v6 = 0, sub_1C5331A1C((uint64_t *)(v3 + 24), (uint64_t)v5, &v6)))
    return *(_QWORD *)(v6 + 16);
  else
    return 0;
}

uint64_t llvm::AttributeSet::getElementType(llvm::AttributeSet *this)
{
  uint64_t result;
  uint64_t EnumAttribute;
  char v3;
  BOOL v4;

  result = *(_QWORD *)this;
  if (result)
  {
    EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 70);
    if (v3)
      v4 = EnumAttribute == 0;
    else
      v4 = 1;
    if (v4)
      return 0;
    else
      return *(_QWORD *)(EnumAttribute + 16);
  }
  return result;
}

llvm::AttributeSetNode *llvm::AttributeSet::getAllocSizeArgs(llvm::AttributeSetNode **this)
{
  llvm::AttributeSetNode *result;

  result = *this;
  if (result)
    return (llvm::AttributeSetNode *)llvm::AttributeSetNode::getAllocSizeArgs(result);
  return result;
}

llvm::AttributeSetNode *llvm::AttributeSet::getVScaleRangeMax(llvm::AttributeSetNode **this)
{
  llvm::AttributeSetNode *result;

  result = *this;
  if (result)
    return (llvm::AttributeSetNode *)llvm::AttributeSetNode::getVScaleRangeMax(result);
  return result;
}

void llvm::AttributeListImpl::dump(llvm::AttributeListImpl *this)
{
  llvm::AttributeListImpl *v1;

  v1 = this;
  llvm::AttributeList::dump((llvm::AttributeList *)&v1);
}

void llvm::AttributeList::dump(llvm::AttributeList *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  llvm::AttributeList::print(this, v2);
}

uint64_t llvm::AttributeList::get(uint64_t *a1, unsigned int a2, int *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  unsigned int v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[17];

  v20[16] = *MEMORY[0x1E0C80C00];
  v17 = a2;
  v18 = v20;
  v19 = 0x800000000;
  if (a4)
  {
    v8 = 4 * a4;
    do
    {
      v10 = *a3++;
      v9 = v10;
      v11 = *a5++;
      v16 = llvm::Attribute::get(a1, v9, v11);
      sub_1C532C21C((uint64_t)&v18, &v17, (uint64_t *)&v16);
      v8 -= 4;
    }
    while (v8);
    v12 = v18;
    v13 = v19;
  }
  else
  {
    v13 = 0;
    v12 = v20;
  }
  v14 = llvm::AttributeList::get(a1, (uint64_t)v12, v13);
  if (v18 != v20)
    free(v18);
  return v14;
}

uint64_t llvm::AttributeList::removeAttributesAtIndex(llvm::AttributeList *this, llvm::LLVMContext *a2, int a3)
{
  uint64_t Impl;
  unsigned int v4;
  uint64_t v5;
  void *v8;
  uint64_t v9;
  _QWORD v10[5];

  v10[4] = *MEMORY[0x1E0C80C00];
  Impl = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v4 = a3 + 1;
    v5 = *(unsigned int *)(Impl + 8);
    if (a3 + 1 < v5)
    {
      v8 = v10;
      v9 = 0x400000000;
      sub_1C486AF08((unsigned int *)&v8, (_BYTE *)(Impl + 40), (_BYTE *)(Impl + 40 + 8 * v5));
      *((_QWORD *)v8 + v4) = 0;
      Impl = llvm::AttributeList::getImpl((uint64_t *)a2, v8, v9);
      if (v8 != v10)
        free(v8);
    }
  }
  return Impl;
}

uint64_t llvm::AttributeList::addDereferenceableOrNullParamAttr(llvm::AttributeList *this, llvm::LLVMContext *a2, int a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  llvm::LLVMContext *v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v11 = v13;
  v12 = 0x800000000;
  if (a4)
  {
    v7 = llvm::Attribute::get((uint64_t *)a2, 77, a4);
    llvm::AttrBuilder::addAttribute((uint64_t)&v10, v7);
  }
  v8 = llvm::AttributeList::addAttributesAtIndex(this, a2, a3 + 1, (const llvm::AttrBuilder *)&v10);
  if (v11 != v13)
    free(v11);
  return v8;
}

uint64_t **llvm::AttrBuilder::addDereferenceableOrNullAttr(uint64_t **this, uint64_t a2)
{
  unint64_t v3;

  if (a2)
  {
    v3 = llvm::Attribute::get(*this, 77, a2);
    llvm::AttrBuilder::addAttribute((uint64_t)this, v3);
  }
  return this;
}

uint64_t llvm::AttrBuilder::addAllocSizeAttr(uint64_t **a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  unint64_t v5;

  v4 = 0xFFFFFFFFLL;
  if (*((_BYTE *)a3 + 4))
    v4 = *a3;
  v5 = llvm::Attribute::get(*a1, 75, v4 | (a2 << 32));
  return llvm::AttrBuilder::addAttribute((uint64_t)a1, v5);
}

uint64_t llvm::AttributeList::getParamByRefType(llvm::AttributeList *this, int a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t EnumAttribute;
  char v5;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (a2 + 2) >= *(_DWORD *)(v2 + 8))
    return 0;
  result = *(_QWORD *)(v2 + 8 * (a2 + 2) + 40);
  if (!result)
    return result;
  EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 68);
  if (!v5 || EnumAttribute == 0)
    return 0;
  else
    return *(_QWORD *)(EnumAttribute + 16);
}

uint64_t llvm::AttributeList::getParamPreallocatedType(llvm::AttributeList *this, int a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t EnumAttribute;
  char v5;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (a2 + 2) >= *(_DWORD *)(v2 + 8))
    return 0;
  result = *(_QWORD *)(v2 + 8 * (a2 + 2) + 40);
  if (!result)
    return result;
  EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 72);
  if (!v5 || EnumAttribute == 0)
    return 0;
  else
    return *(_QWORD *)(EnumAttribute + 16);
}

uint64_t llvm::AttributeList::getParamInAllocaType(llvm::AttributeList *this, int a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t EnumAttribute;
  char v5;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (a2 + 2) >= *(_DWORD *)(v2 + 8))
    return 0;
  result = *(_QWORD *)(v2 + 8 * (a2 + 2) + 40);
  if (!result)
    return result;
  EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 71);
  if (!v5 || EnumAttribute == 0)
    return 0;
  else
    return *(_QWORD *)(EnumAttribute + 16);
}

uint64_t llvm::AttributeList::getParamElementType(llvm::AttributeList *this, int a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t EnumAttribute;
  char v5;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (a2 + 2) >= *(_DWORD *)(v2 + 8))
    return 0;
  result = *(_QWORD *)(v2 + 8 * (a2 + 2) + 40);
  if (!result)
    return result;
  EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 70);
  if (!v5 || EnumAttribute == 0)
    return 0;
  else
    return *(_QWORD *)(EnumAttribute + 16);
}

uint64_t llvm::AttributeList::getUWTableKind(llvm::AttributeList *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t EnumAttribute;
  char v4;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this || !*(_DWORD *)(v1 + 8))
    return 0;
  result = *(_QWORD *)(v1 + 40);
  if (!result)
    return result;
  EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 79);
  if (v4)
    return *(unsigned int *)(EnumAttribute + 16);
  else
    return 0;
}

uint64_t llvm::AttrBuilder::clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t llvm::AttrBuilder::addAllocSizeAttrFromRawRepr(uint64_t **this, uint64_t a2)
{
  unint64_t v3;

  v3 = llvm::Attribute::get(*this, 75, a2);
  return llvm::AttrBuilder::addAttribute((uint64_t)this, v3);
}

uint64_t **llvm::AttrBuilder::addVScaleRangeAttr(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = a3;
  if ((a3 & 0xFF00000000) == 0)
    v4 = 0;
  v5 = v4 | (a2 << 32);
  if (v5)
  {
    v6 = llvm::Attribute::get(*a1, 80, v5);
    llvm::AttrBuilder::addAttribute((uint64_t)a1, v6);
  }
  return a1;
}

uint64_t **llvm::AttrBuilder::addVScaleRangeAttrFromRawRepr(uint64_t **this, uint64_t a2)
{
  unint64_t v3;

  if (a2)
  {
    v3 = llvm::Attribute::get(*this, 80, a2);
    llvm::AttrBuilder::addAttribute((uint64_t)this, v3);
  }
  return this;
}

uint64_t **llvm::AttrBuilder::addUWTableAttr(uint64_t **a1, int a2)
{
  unint64_t v3;

  if (a2)
  {
    v3 = llvm::Attribute::get(*a1, 79, a2);
    llvm::AttrBuilder::addAttribute((uint64_t)a1, v3);
  }
  return a1;
}

uint64_t llvm::AttrBuilder::getTypeAttr(uint64_t a1, int a2)
{
  uint64_t result;

  result = llvm::AttrBuilder::getAttribute(a1, a2);
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

uint64_t llvm::AttrBuilder::addTypeAttr(uint64_t **a1, int a2, uint64_t a3)
{
  unint64_t v4;

  v4 = llvm::Attribute::get(*a1, a2, a3);
  return llvm::AttrBuilder::addAttribute((uint64_t)a1, v4);
}

uint64_t llvm::AttrBuilder::addByValAttr(uint64_t **this, llvm::Type *a2)
{
  unint64_t v3;

  v3 = llvm::Attribute::get(*this, 69, (uint64_t)a2);
  return llvm::AttrBuilder::addAttribute((uint64_t)this, v3);
}

uint64_t llvm::AttrBuilder::addByRefAttr(uint64_t **this, llvm::Type *a2)
{
  unint64_t v3;

  v3 = llvm::Attribute::get(*this, 68, (uint64_t)a2);
  return llvm::AttrBuilder::addAttribute((uint64_t)this, v3);
}

uint64_t llvm::AttrBuilder::addInAllocaAttr(uint64_t **this, llvm::Type *a2)
{
  unint64_t v3;

  v3 = llvm::Attribute::get(*this, 71, (uint64_t)a2);
  return llvm::AttrBuilder::addAttribute((uint64_t)this, v3);
}

uint64_t llvm::AttrBuilder::hasAlignmentAttr(llvm::AttrBuilder *this)
{
  uint64_t result;

  result = llvm::AttrBuilder::getAttribute((uint64_t)this, 74);
  if (result)
    return *(_QWORD *)(result + 16) != 0;
  return result;
}

BOOL llvm::AttrBuilder::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  BOOL v10;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 16))
    return 0;
  if (!(_DWORD)v2)
    return 1;
  v3 = *(uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a2 + 8);
  v5 = 8 * v2 - 8;
  do
  {
    v7 = *v4++;
    v6 = v7;
    v8 = *v3++;
    result = v8 == v6;
    v10 = v8 != v6 || v5 == 0;
    v5 -= 8;
  }
  while (!v10);
  return result;
}

unsigned int *sub_1C6227D08(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return sub_1C53284C4(a2, a3);
}

unint64_t sub_1C6227D14(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  sub_1C53284C4(a2, a3);
  return sub_1C4F5AB38(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * a3[2]);
}

uint64_t sub_1C6227D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3)
  {
    v5 = (uint64_t *)(a2 + 48);
    v6 = 8 * v3;
    do
    {
      v7 = *v5++;
      result = sub_1C4F52194(a3, v7);
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_1C6227D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3)
  {
    v5 = (uint64_t *)(a2 + 40);
    v6 = 8 * v3;
    do
    {
      v7 = *v5++;
      result = sub_1C4F52194(a3, v7);
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

std::string *llvm::UpgradeInlineAsmString(std::string *a1)
{
  std::string *result;

  result = (std::string *)sub_1C5336B88((uint64_t *)a1, "mov\tfp", 0);
  if (!result)
  {
    result = (std::string *)sub_1C5336B88((uint64_t *)a1, "objc_retainAutoreleaseReturnValue", 0);
    if (result != (std::string *)-1)
    {
      result = (std::string *)sub_1C5336B88((uint64_t *)a1, "# marker", 0);
      if (result != (std::string *)-1)
        return std::string::replace(a1, (std::string::size_type)result, 1uLL, ";");
    }
  }
  return result;
}

double sub_1C6227E64(uint64_t a1)
{
  const char *v2;
  llvm::LLVMContext *PrimitiveSizeInBits;
  llvm::FixedVectorType *v4;
  llvm::LLVMContext *v6;

  PrimitiveSizeInBits = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(a1 + 24));
  if ((_DWORD)v2 == 1)
  {
    v6 = PrimitiveSizeInBits;
    PrimitiveSizeInBits = v6;
  }
  v4 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)a1, PrimitiveSizeInBits);
  return llvm::VectorType::get(v4, (llvm::Type *)(*(unsigned int *)(a1 + 32) | ((unint64_t)(*(_BYTE *)(a1 + 8) == 19) << 32)));
}

uint64_t sub_1C6227ED4(uint64_t a1, const void *a2, uint64_t a3, char a4)
{
  size_t v7;

  if (!*(_BYTE *)(a1 + 17))
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 == a3 && (!v7 || !memcmp(*(const void **)a1, a2, v7)))
    {
      *(_BYTE *)(a1 + 16) = a4;
      *(_BYTE *)(a1 + 17) = 1;
    }
  }
  return a1;
}

uint64_t sub_1C6227F30@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void (**v11)(void);
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t (**v15)(void);
  _QWORD v16[3];
  _QWORD *v17;
  __int128 v18;
  _BYTE v19[24];
  _BYTE *v20;
  _QWORD v21[3];
  _QWORD *v22;
  __int128 v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = a1 + 40;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = (_QWORD *)a2[3];
  if (v7)
  {
    if (v7 == a2)
    {
      v22 = v21;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v21);
    }
    else
    {
      v22 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
    }
  }
  else
  {
    v22 = 0;
  }
  sub_1C62284A4(&v23, v6, v5, v21);
  v8 = (_QWORD *)a2[3];
  if (v8)
  {
    if (v8 == a2)
    {
      v17 = v16;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v16);
    }
    else
    {
      v17 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
    }
  }
  else
  {
    v17 = 0;
  }
  sub_1C62284A4(&v18, v5, v5, v16);
  sub_1C6228340(a3, &v23, &v18);
  v9 = v20;
  if (v20 == v19)
  {
    v10 = 4;
    v9 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_9;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_9:
  if (v17 == v16)
  {
    v11 = (void (**)(void))(v16[0] + 32);
  }
  else
  {
    if (!v17)
      goto LABEL_13;
    v11 = (void (**)(void))(*v17 + 40);
  }
  (*v11)();
LABEL_13:
  v12 = v25;
  if (v25 == v24)
  {
    v13 = 4;
    v12 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_17;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_17:
  result = (uint64_t)v22;
  if (v22 == v21)
  {
    v15 = (uint64_t (**)(void))(v21[0] + 32);
  }
  else
  {
    if (!v22)
      return result;
    v15 = (uint64_t (**)(void))(*v22 + 40);
  }
  return (*v15)();
}

uint64_t llvm::BasicBlock::sizeWithoutDebug(llvm::BasicBlock *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  _BYTE v13[24];
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  __int128 v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  llvm::BasicBlock::instructionsWithoutDebug(this, 1, &v15);
  v18 = v15;
  v2 = v19;
  if (v17)
  {
    if (v17 == &v16)
    {
      v20 = v19;
      (*(void (**)(void))(*v17 + 24))();
    }
    else
    {
      v20 = (_BYTE *)(*(uint64_t (**)(void))(*v17 + 16))();
    }
  }
  else
  {
    v20 = 0;
  }
  llvm::BasicBlock::instructionsWithoutDebug(this, 1, v8);
  v12 = v9;
  v3 = v13;
  if (v11)
  {
    if (v11 == &v10)
    {
      v14 = v13;
      (*(void (**)(void))(*v11 + 24))();
    }
    else
    {
      v14 = (_BYTE *)(*(uint64_t (**)(void))(*v11 + 16))();
    }
  }
  else
  {
    v14 = 0;
  }
  v4 = sub_1C534FAE4(&v18, &v12);
  if (v14 == v13)
  {
    v5 = 4;
LABEL_7:
    (*(void (**)(_QWORD *))(*v3 + 8 * v5))(v3);
    goto LABEL_8;
  }
  if (v14)
  {
    v5 = 5;
    v3 = v14;
    goto LABEL_7;
  }
LABEL_8:
  sub_1C619047C(v8);
  if (v20 == v19)
  {
    v6 = 4;
  }
  else
  {
    if (!v20)
      goto LABEL_11;
    v6 = 5;
    v2 = v20;
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v6))(v2);
LABEL_11:
  sub_1C619047C(&v15);
  return v4;
}

uint64_t sub_1C62282DC(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 *v7;
  __int128 *v8;

  v1 = *(_QWORD *)result;
  if (*(_QWORD *)result != *(_QWORD *)(result + 8))
  {
    v2 = (_QWORD *)result;
    while (1)
    {
      v3 = v2[5];
      if (!v3)
        break;
      if (v1)
        v4 = v1 - 24;
      else
        v4 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(v3, v4);
      if ((result & 1) == 0)
      {
        v5 = v2[1];
        v1 = *(_QWORD *)(*v2 + 8);
        *v2 = v1;
        if (v1 != v5)
          continue;
      }
      return result;
    }
    sub_1C485C2F0();
    return (uint64_t)sub_1C6228340(v6, v7, v8);
  }
  return result;
}

_QWORD *sub_1C6228340(_QWORD *a1, __int128 *a2, __int128 *a3)
{
  _QWORD *v5;
  __int128 *v6;
  _QWORD *v7;
  __int128 *v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _BYTE v13[24];
  _BYTE *v14;
  __int128 v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v15 = *a2;
  v5 = v16;
  v6 = (__int128 *)*((_QWORD *)a2 + 5);
  if (v6)
  {
    if (v6 == a2 + 1)
    {
      v17 = v16;
      (*(void (**)(__int128 *, _BYTE *))(*(_QWORD *)v6 + 24))(v6, v16);
    }
    else
    {
      v17 = (_BYTE *)*((_QWORD *)a2 + 5);
      *((_QWORD *)a2 + 5) = 0;
    }
  }
  else
  {
    v17 = 0;
  }
  v12 = *a3;
  v7 = v13;
  v8 = (__int128 *)*((_QWORD *)a3 + 5);
  if (v8)
  {
    if (v8 == a3 + 1)
    {
      v14 = v13;
      (*(void (**)(__int128 *, _BYTE *))(*(_QWORD *)v8 + 24))(v8, v13);
    }
    else
    {
      v14 = (_BYTE *)*((_QWORD *)a3 + 5);
      *((_QWORD *)a3 + 5) = 0;
    }
  }
  else
  {
    v14 = 0;
  }
  result = sub_1C61F14A0(a1, &v15, &v12);
  if (v14 == v13)
  {
    v10 = 4;
  }
  else
  {
    if (!v14)
      goto LABEL_9;
    v10 = 5;
    v7 = v14;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 8 * v10))(v7);
LABEL_9:
  if (v17 == v16)
  {
    v11 = 4;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
    v5 = v17;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v11))(v5);
}

_QWORD *sub_1C62284A4(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v7;
  void (**v8)(void);
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = (_QWORD *)a4[3];
  if (v7)
  {
    if (v7 == a4)
    {
      v11 = v10;
      (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v10);
    }
    else
    {
      v11 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1C6228598(a1, a2, a3, (uint64_t)v10);
  if (v11 == v10)
  {
    v8 = (void (**)(void))(v10[0] + 32);
    goto LABEL_6;
  }
  if (v11)
  {
    v8 = (void (**)(void))(*v11 + 40);
LABEL_6:
    (*v8)();
  }
  return a1;
}

_QWORD *sub_1C6228598(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  *a1 = a2;
  a1[1] = a3;
  v5 = *(_QWORD *)(a4 + 24);
  if (v5)
  {
    if (v5 == a4)
    {
      a1[5] = a1 + 2;
      (*(void (**)(_QWORD))(**(_QWORD **)(a4 + 24) + 24))(*(_QWORD *)(a4 + 24));
    }
    else
    {
      a1[5] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  else
  {
    a1[5] = 0;
  }
  sub_1C62282DC((uint64_t)a1);
  return a1;
}

uint64_t llvm::Comdat::getName(llvm::Comdat *this)
{
  return *(_QWORD *)this + 72;
}

_QWORD *llvm::Comdat::addUser(uint64_t a1, uint64_t a2)
{
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 16), a2);
}

_QWORD *llvm::Comdat::removeUser(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = sub_1C477672C(a1 + 16, a2);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = 32;
  if (v4 == *(_QWORD *)(a1 + 16))
    v5 = 36;
  if (result != (_QWORD *)(v4 + 8 * *(unsigned int *)(a1 + v5)))
  {
    *result = -2;
    ++*(_DWORD *)(a1 + 40);
  }
  return result;
}

uint64_t llvm::ConstantRange::makeExactNoWrapRegion@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  void *v9;
  size_t v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  _BYTE v14[32];

  v8 = *(unsigned int *)(a2 + 8);
  v13 = v8;
  if (v8 > 0x40)
  {
    v10 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
    v9 = (void *)operator new[]();
    memcpy(v9, *(const void **)a2, v10);
  }
  else
  {
    v9 = *(void **)a2;
  }
  v12 = (uint64_t)v9;
  llvm::ConstantRange::ConstantRange((uint64_t)v14, (uint64_t)&v12);
  llvm::ConstantRange::makeGuaranteedNoWrapRegion((llvm::ConstantRange *)v14, a1, a3, a4);
  result = sub_1C4E8C6FC((uint64_t)v14);
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      return MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  }
  return result;
}

BOOL llvm::ConstantRange::isUpperWrapped(llvm::ConstantRange *this)
{
  return (int)llvm::APInt::compare(this, (llvm::ConstantRange *)((char *)this + 16)) > 0;
}

BOOL llvm::ConstantRange::isSignWrappedSet(llvm::ConstantRange *this)
{
  char *v1;

  v1 = (char *)this + 16;
  return (int)llvm::APInt::compareSigned(this, (llvm::ConstantRange *)((char *)this + 16)) >= 1
      && !sub_1C535BACC((uint64_t)v1);
}

BOOL llvm::ConstantRange::isUpperSignWrapped(llvm::ConstantRange *this)
{
  return (int)llvm::APInt::compareSigned(this, (llvm::ConstantRange *)((char *)this + 16)) > 0;
}

llvm::raw_ostream *llvm::ConstantRange::print(llvm::ConstantRange *this, llvm::raw_ostream *a2)
{
  char *v4;
  llvm::raw_ostream *v6;

  if (llvm::ConstantRange::isFullSet((const void **)this))
  {
    v4 = "full-set";
  }
  else if (llvm::ConstantRange::isEmptySet((const void **)this))
  {
    v4 = "empty-set";
  }
  else
  {
    v6 = sub_1C4816AD8(a2, "[");
    llvm::APInt::print(this, v6, 1);
    a2 = sub_1C4816AD8(v6, ",");
    llvm::APInt::print((llvm::ConstantRange *)((char *)this + 16), a2, 1);
    v4 = ")";
  }
  return sub_1C4816AD8(a2, v4);
}

llvm::raw_ostream *llvm::ConstantRange::dump(llvm::ConstantRange *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return llvm::ConstantRange::print(this, v2);
}

_QWORD *llvm::ConstantTokenNone::get(llvm::ConstantTokenNone *this, llvm::LLVMContext *a2)
{
  uint64_t v2;
  _QWORD *v3;
  llvm::LLVMContext *v6;
  llvm::Value *v7;
  llvm::Value *v8;
  _DWORD *v9;

  v2 = *(_QWORD *)this;
  v3 = *(_QWORD **)(*(_QWORD *)this + 2032);
  if (!v3)
  {
    v3 = operator new(0x18uLL);
    *v3 = llvm::Type::getTokenTy(this, v6);
    v3[1] = 0;
    v3[2] = 20;
    v8 = *(llvm::Value **)(v2 + 2032);
    *(_QWORD *)(v2 + 2032) = v3;
    if (v8)
    {
      llvm::Value::~Value(v8, v7);
      llvm::User::operator delete(v9);
      return *(_QWORD **)(v2 + 2032);
    }
  }
  return v3;
}

_QWORD *llvm::ConstantTargetNone::get(llvm::ConstantTargetNone *this, llvm::TargetExtType *a2)
{
  _QWORD *v2;
  _QWORD *result;
  llvm::Value *v4;
  llvm::Value *v5;
  _DWORD *v6;
  llvm::ConstantTargetNone *v7;

  v7 = this;
  v2 = sub_1C622A3D4(**(_QWORD **)this + 1336, (uint64_t *)&v7);
  result = (_QWORD *)v2[1];
  if (!result)
  {
    result = operator new(0x18uLL);
    *result = v7;
    result[1] = 0;
    result[2] = 18;
    v5 = (llvm::Value *)v2[1];
    v2[1] = result;
    if (v5)
    {
      llvm::Value::~Value(v5, v4);
      llvm::User::operator delete(v6);
      return (_QWORD *)v2[1];
    }
  }
  return result;
}

uint64_t llvm::BlockAddress::destroyConstantImpl(llvm::BlockAddress *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD v6[2];
  _QWORD *v7;

  v2 = ****((_QWORD ****)this - 8);
  v3 = *((_QWORD *)this - 4);
  v6[0] = *((_QWORD *)this - 8);
  v6[1] = v3;
  v7 = 0;
  result = sub_1C6214EF4((uint64_t *)(v2 + 1440), v6, &v7);
  if ((_DWORD)result)
  {
    v5 = v7;
    *v7 = -8192;
    v5[1] = -8192;
    *(int32x2_t *)(v2 + 1448) = vadd_s32(*(int32x2_t *)(v2 + 1448), (int32x2_t)0x1FFFFFFFFLL);
  }
  *(_WORD *)(*((_QWORD *)this - 4) + 18) = *(_WORD *)(*((_QWORD *)this - 4) + 18) & 0x8000 | (*(_WORD *)(*((_QWORD *)this - 4) + 18)
                                                                                                - 1) & 0x7FFF;
  return result;
}

int32x2_t llvm::DSOLocalEquivalent::destroyConstantImpl(llvm::DSOLocalEquivalent *this)
{
  uint64_t ***v1;
  uint64_t v2;
  int32x2_t result;
  _QWORD *v4;

  v1 = (uint64_t ***)*((_QWORD *)this - 4);
  v2 = ***v1;
  v4 = 0;
  if (sub_1C6144BDC(*(_QWORD *)(v2 + 1464), *(_DWORD *)(v2 + 1480), (uint64_t)v1, &v4))
  {
    *v4 = -8192;
    result = vadd_s32(*(int32x2_t *)(v2 + 1472), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(v2 + 1472) = result;
  }
  return result;
}

int32x2_t llvm::NoCFIValue::destroyConstantImpl(llvm::NoCFIValue *this)
{
  uint64_t ***v1;
  uint64_t v2;
  int32x2_t result;
  _QWORD *v4;

  v1 = (uint64_t ***)*((_QWORD *)this - 4);
  v2 = ***v1;
  v4 = 0;
  if (sub_1C6144BDC(*(_QWORD *)(v2 + 1488), *(_DWORD *)(v2 + 1504), (uint64_t)v1, &v4))
  {
    *v4 = -8192;
    result = vadd_s32(*(int32x2_t *)(v2 + 1496), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(v2 + 1496) = result;
  }
  return result;
}

void llvm::UndefValue::destroyConstantImpl(llvm::UndefValue *this)
{
  _QWORD **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;

  if (*((_BYTE *)this + 16) == 11)
  {
    v1 = *(_QWORD ***)this;
    v2 = ***(_QWORD ***)this + 1360;
    v5 = v1;
    sub_1C6229408(v2, &v5);
    __break(1u);
  }
  v3 = *(_QWORD *)this;
  v4 = ***(_QWORD ***)this + 1384;
  v5 = (_QWORD **)v3;
  sub_1C6229470(v4, (uint64_t *)&v5);
  __break(1u);
}

void llvm::ConstantDataSequential::destroyConstantImpl(llvm::Value **this)
{
  uint64_t v2;
  unsigned __int8 *RawDataValues;
  size_t v4;
  int Key;
  uint64_t v6;
  size_t *v7;
  llvm::ConstantDataSequential **v8;
  llvm::Value **v9;
  llvm::ConstantDataSequential *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  _DWORD *v13;

  v2 = **(_QWORD **)*this;
  RawDataValues = (unsigned __int8 *)llvm::ConstantDataSequential::getRawDataValues((llvm::ConstantDataSequential *)this);
  Key = llvm::StringMapImpl::FindKey((uint64_t *)(v2 + 1408), RawDataValues, v4);
  if (Key == -1)
    v6 = *(unsigned int *)(v2 + 1416);
  else
    v6 = Key;
  v7 = *(size_t **)(*(_QWORD *)(v2 + 1408) + 8 * v6);
  v8 = (llvm::ConstantDataSequential **)(v7 + 1);
  if (*(_QWORD *)(v7[1] + 32))
  {
    do
    {
      v9 = v8;
      v10 = *v8;
      v8 = (llvm::ConstantDataSequential **)((char *)*v8 + 32);
    }
    while (v10 != (llvm::ConstantDataSequential *)this);
    v11 = this[4];
    this[4] = 0;
    v12 = *v9;
    *v9 = v11;
    if (v12)
    {
      sub_1C5385EA8(v12);
      llvm::User::operator delete(v13);
    }
  }
  else
  {
    llvm::StringMapImpl::RemoveKey((uint64_t *)(**(_QWORD **)*this + 1408), v7);
    sub_1C5385F80((uint64_t)v7);
  }
}

BOOL llvm::Constant::needsDynamicRelocation(llvm::Constant *this)
{
  return llvm::Constant::getRelocationInfo(this) == 2;
}

llvm::Constant *llvm::Constant::replaceUndefsWith(llvm::Constant *this, llvm::Constant *a2, llvm::Constant *a3)
{
  uint64_t v5;
  unint64_t v8;
  llvm::Type *i;
  llvm::UndefValue *AggregateElement;
  llvm::UndefValue *v11;
  char v12;
  llvm::Constant *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[33];

  v16[32] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)this;
  if ((sub_1C4E7B480((uint64_t)this) & 1) == 0)
  {
    if (*(_BYTE *)(v5 + 8) != 18 || v5 == 0)
    {
      return this;
    }
    else
    {
      v8 = *(unsigned int *)(v5 + 32);
      v14 = v16;
      v15 = 0x2000000000;
      sub_1C4848C0C((unsigned int *)&v14, v8, 0);
      if ((_DWORD)v8)
      {
        for (i = 0; i != (llvm::Type *)v8; i = (llvm::Type *)((char *)i + 1))
        {
          AggregateElement = llvm::Constant::getAggregateElement(this, i);
          v11 = AggregateElement;
          if (!AggregateElement || (v12 = sub_1C4E7B480((uint64_t)AggregateElement), v13 = a2, (v12 & 1) == 0))
            v13 = v11;
          *((_QWORD *)v14 + (_QWORD)i) = v13;
        }
      }
      a2 = llvm::ConstantVector::get((llvm::FixedVectorType ***)v14, (llvm::Type *)v15);
      if (v14 != v16)
        free(v14);
    }
  }
  return a2;
}

uint64_t llvm::Constant::isManifestConstant(llvm::Constant *this)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;
  int v5;
  int v7;
  uint64_t v8;
  llvm::Constant **v9;
  uint64_t v10;
  llvm::Constant *v11;
  BOOL v12;

  v2 = *((unsigned __int8 *)this + 16);
  result = 1;
  if (v2 - 11 >= 0xA)
  {
    v4 = v2 > 0xA;
    v5 = (1 << v2) & 0x720;
    if (v4 || v5 == 0)
    {
      return 0;
    }
    else
    {
      v7 = *((_DWORD *)this + 5);
      if ((v7 & 0x40000000) != 0)
      {
        v9 = (llvm::Constant **)*((_QWORD *)this - 1);
        v8 = v7 & 0x7FFFFFF;
      }
      else
      {
        v8 = v7 & 0x7FFFFFF;
        v9 = (llvm::Constant **)((char *)this - 32 * v8);
      }
      if (v8)
      {
        v10 = 32 * v8 - 32;
        do
        {
          v11 = *v9;
          v9 += 4;
          result = llvm::Constant::isManifestConstant(v11);
          if ((_DWORD)result)
            v12 = v10 == 0;
          else
            v12 = 1;
          v10 -= 32;
        }
        while (!v12);
      }
    }
  }
  return result;
}

llvm::Value **llvm::ConstantInt::getBool(uint64_t **this, llvm::Type *a2, const llvm::APInt *a3)
{
  if ((_DWORD)a2)
    return llvm::ConstantInt::getTrue(this, a2, a3);
  else
    return llvm::ConstantInt::getFalse(this, a2, a3);
}

unint64_t llvm::ConstantStruct::getTypeForElements(uint64_t *a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v11;
  uint64_t v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v11 = v13;
  v12 = 0x1000000000;
  sub_1C4848C0C((unsigned int *)&v11, a3, 0);
  if (v7)
  {
    v8 = 0;
    do
    {
      *(_QWORD *)((char *)v11 + v8) = **(_QWORD **)(a2 + v8);
      v8 += 8;
    }
    while (8 * v7 != v8);
  }
  v9 = llvm::StructType::get(a1, (uint64_t)v11, v12, a4);
  if (v11 != v13)
    free(v11);
  return v9;
}

unint64_t llvm::ConstantStruct::getTypeForElements(uint64_t ****a1, unsigned int a2, int a3)
{
  return llvm::ConstantStruct::getTypeForElements(***a1, (uint64_t)a1, a2, a3);
}

uint64_t llvm::ConstantExpr::getShuffleMask(llvm::ConstantExpr *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t llvm::ConstantExpr::getShuffleMaskForBitcode(llvm::ConstantExpr *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t llvm::ConstantInt::isValueValidForType(llvm::ConstantInt *this, llvm::Type *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v6;
  BOOL v7;

  v2 = *((unsigned int *)this + 2);
  v3 = v2 >> 8;
  v7 = (v2 & 0xFFFFC000) == 0;
  v4 = 0xFFFFFFFFFFFFFFFFLL >> -(uint64_t)(v2 >> 8);
  v6 = !v7 || v4 >= (unint64_t)a2;
  v7 = *((_DWORD *)this + 2) == 13 && (_DWORD)v3 == 1;
  if (v7)
    return (unint64_t)a2 < 2;
  else
    return v6;
}

BOOL llvm::ConstantInt::isValueValidForType(llvm::ConstantInt *this, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;

  v2 = *((_DWORD *)this + 2);
  if (v2 == 13 && *((_DWORD *)this + 2) >> 8 == 1)
    return (unint64_t)(a2 + 1) < 3;
  if (v2 >> 14)
    return 1;
  v5 = -1 << (BYTE1(v2) - 1);
  return v5 <= a2 && ~v5 >= a2;
}

uint64_t llvm::ConstantFP::isValueValidForType(llvm::ConstantFP *this, llvm::Type *a2, const llvm::APFloat *a3)
{
  llvm::APFloatBase *v4;
  void *v5;
  uint64_t v6;
  uint64_t v10;
  void *v14;
  BOOL v15;
  char v23;
  _BYTE v24[8];
  uint64_t v25[4];

  v25[3] = *MEMORY[0x1E0C80C00];
  v4 = sub_1C47A813C((llvm::detail::DoubleAPFloat *)v25, (uint64_t *)a2 + 1);
  v23 = 0;
  switch(*((_BYTE *)this + 8))
  {
    case 0:
      if ((_UNKNOWN *)v25[0] == &unk_1C866F15C)
        goto LABEL_48;
      v5 = &unk_1C866F15C;
      goto LABEL_31;
    case 1:
      if ((_UNKNOWN *)v25[0] == &unk_1C866F170)
        goto LABEL_48;
      v5 = &unk_1C866F170;
      goto LABEL_31;
    case 2:
      if ((_UNKNOWN *)v25[0] == &unk_1C866F184)
        goto LABEL_48;
      v5 = &unk_1C866F184;
      goto LABEL_31;
    case 3:
      if ((_UNKNOWN *)v25[0] == &unk_1C866F198
        || v25[0] == (_QWORD)&unk_1C866F184
        || v25[0] == (_QWORD)&unk_1C866F15C
        || v25[0] == (_QWORD)&unk_1C866F170)
      {
        goto LABEL_48;
      }
      v5 = &unk_1C866F198;
LABEL_31:
      llvm::APFloat::convert((uint64_t)v24, v5, 1, &v23);
      v15 = v23 == 0;
      goto LABEL_32;
    case 4:
      v10 = v25[0];
      if ((_UNKNOWN *)v25[0] == &unk_1C866F198
        || v25[0] == (_QWORD)&unk_1C866F184
        || v25[0] == (_QWORD)&unk_1C866F15C
        || v25[0] == (_QWORD)&unk_1C866F170)
      {
        goto LABEL_48;
      }
      v14 = llvm::APFloatBase::x87DoubleExtended(v4);
      goto LABEL_47;
    case 5:
      v10 = v25[0];
      if ((_UNKNOWN *)v25[0] == &unk_1C866F198
        || v25[0] == (_QWORD)&unk_1C866F184
        || v25[0] == (_QWORD)&unk_1C866F15C
        || v25[0] == (_QWORD)&unk_1C866F170)
      {
LABEL_48:
        v6 = 1;
      }
      else
      {
        v14 = llvm::APFloatBase::IEEEquad(v4);
LABEL_47:
        v15 = v10 == (_QWORD)v14;
LABEL_32:
        v6 = v15;
      }
LABEL_35:
      sub_1C47A8258(v25);
      return v6;
    case 6:
      v15 = (_UNKNOWN *)v25[0] == &unk_1C866F15C
         || v25[0] == (_QWORD)&unk_1C866F170
         || v25[0] == (_QWORD)&unk_1C866F184
         || v25[0] == (_QWORD)&unk_1C866F198
         || v25[0] == (_QWORD)&unk_1C866F1C0;
      goto LABEL_32;
    default:
      v6 = 0;
      goto LABEL_35;
  }
}

int32x2_t sub_1C6229240(uint64_t a1, uint64_t *a2)
{
  llvm::Value *v3;
  int32x2_t result;
  _QWORD *v5;
  llvm::Value *v6;
  _DWORD *v7;
  uint64_t v8;

  v8 = 0;
  if (sub_1C500AA94(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8))
  {
    v5 = (_QWORD *)v8;
    v6 = *(llvm::Value **)(v8 + 8);
    *(_QWORD *)(v8 + 8) = 0;
    if (v6)
    {
      llvm::Value::~Value(v6, v3);
      llvm::User::operator delete(v7);
    }
    *v5 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

int32x2_t sub_1C62292B8(uint64_t a1, uint64_t *a2)
{
  uint64_t **v3;
  int32x2_t result;
  uint64_t *v5;
  uint64_t **v6;

  v5 = a2;
  v6 = 0;
  if ((sub_1C622A248(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), &v5, &v6) & 1) != 0)
    v3 = v6;
  else
    v3 = (uint64_t **)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16));
  *v3 = (uint64_t *)-8192;
  result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  *(int32x2_t *)(a1 + 8) = result;
  return result;
}

int32x2_t sub_1C6229328(uint64_t a1, _QWORD *a2)
{
  llvm::Value *v3;
  int32x2_t result;
  _QWORD *v5;
  llvm::Value *v6;
  _DWORD *v7;
  uint64_t v8;

  v8 = 0;
  if (sub_1C5384B64((uint64_t *)a1, a2, &v8))
  {
    v5 = (_QWORD *)v8;
    v6 = *(llvm::Value **)(v8 + 8);
    *(_QWORD *)(v8 + 8) = 0;
    if (v6)
    {
      llvm::Value::~Value(v6, v3);
      llvm::User::operator delete(v7);
    }
    *v5 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

int32x2_t sub_1C6229390(uint64_t a1, uint64_t *a2)
{
  llvm::Value *v3;
  int32x2_t result;
  _QWORD *v5;
  llvm::Value *v6;
  _DWORD *v7;
  uint64_t v8;

  v8 = 0;
  if (sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8))
  {
    v5 = (_QWORD *)v8;
    v6 = *(llvm::Value **)(v8 + 8);
    *(_QWORD *)(v8 + 8) = 0;
    if (v6)
    {
      llvm::Value::~Value(v6, v3);
      llvm::User::operator delete(v7);
    }
    *v5 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

int32x2_t sub_1C6229408(uint64_t a1, _QWORD *a2)
{
  llvm::Value *v3;
  int32x2_t result;
  _QWORD *v5;
  llvm::Value *v6;
  _DWORD *v7;
  uint64_t v8;

  v8 = 0;
  if (sub_1C4850EC8((uint64_t *)a1, a2, &v8))
  {
    v5 = (_QWORD *)v8;
    v6 = *(llvm::Value **)(v8 + 8);
    *(_QWORD *)(v8 + 8) = 0;
    if (v6)
    {
      llvm::Value::~Value(v6, v3);
      llvm::User::operator delete(v7);
    }
    *v5 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

int32x2_t sub_1C6229470(uint64_t a1, uint64_t *a2)
{
  llvm::Value *v3;
  int32x2_t result;
  _QWORD *v5;
  llvm::Value *v6;
  _DWORD *v7;
  uint64_t v8;

  v8 = 0;
  if (sub_1C4F763D4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8))
  {
    v5 = (_QWORD *)v8;
    v6 = *(llvm::Value **)(v8 + 8);
    *(_QWORD *)(v8 + 8) = 0;
    if (v6)
    {
      llvm::Value::~Value(v6, v3);
      llvm::User::operator delete(v7);
    }
    *v5 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

llvm::BlockAddress *llvm::BlockAddress::get(llvm::BlockAddress **this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  return llvm::BlockAddress::get(this[7], (llvm::Function *)this, a3);
}

llvm::BlockAddress *llvm::BlockAddress::get(llvm::BlockAddress *this, llvm::Function *a2, llvm::BasicBlock *a3)
{
  uint64_t *v5;
  _QWORD *v6;
  llvm::BlockAddress *result;
  _DWORD *v8;
  _QWORD v9[2];

  v5 = (uint64_t *)(*(_QWORD *)llvm::Function::getContext(this) + 1440);
  v9[0] = this;
  v9[1] = a2;
  v6 = sub_1C622A684(v5, v9);
  result = (llvm::BlockAddress *)v6[2];
  if (!result)
  {
    v8 = operator new(0x58uLL);
    v8[21] = v8[21] & 0x38000000 | 2;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *((_QWORD *)v8 + 3) = v8 + 16;
    *((_QWORD *)v8 + 4) = 0;
    *((_QWORD *)v8 + 5) = 0;
    *((_QWORD *)v8 + 6) = 0;
    *((_QWORD *)v8 + 7) = v8 + 16;
    result = llvm::BlockAddress::BlockAddress((llvm::BlockAddress *)(v8 + 16), this, a2);
    v6[2] = result;
  }
  return result;
}

llvm::BlockAddress *llvm::BlockAddress::BlockAddress(llvm::BlockAddress *this, llvm::Function *a2, llvm::BasicBlock *a3)
{
  llvm::Type *Context;
  llvm::LLVMContext *AddressSpace;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  Context = (llvm::Type *)llvm::Function::getContext(a2);
  AddressSpace = (llvm::LLVMContext *)llvm::GlobalValue::getAddressSpace(a2);
  *(_QWORD *)this = llvm::Type::getInt8PtrTy(Context, AddressSpace);
  *((_QWORD *)this + 1) = 0;
  v8 = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  *((_DWORD *)this + 4) = 4;
  *((_DWORD *)this + 5) = v8;
  v9 = (_QWORD *)((char *)this - 64);
  if (*((_QWORD *)this - 8))
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v10 = *((_QWORD *)this - 7);
    if (v10)
      *(_QWORD *)(v10 + 16) = *((_QWORD *)this - 6);
  }
  *v9 = a2;
  if (a2)
  {
    v13 = *((_QWORD *)a2 + 1);
    v12 = (_QWORD *)((char *)a2 + 8);
    v11 = v13;
    *((_QWORD *)this - 7) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = (char *)this - 56;
    *((_QWORD *)this - 6) = v12;
    *v12 = v9;
  }
  v14 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v15 = *((_QWORD *)this - 3);
    if (v15)
      *(_QWORD *)(v15 + 16) = *((_QWORD *)this - 2);
  }
  *v14 = a3;
  if (a3)
  {
    v16 = (_QWORD *)((char *)a3 + 8);
    v17 = *((_QWORD *)a3 + 1);
    *((_QWORD *)this - 3) = v17;
    if (v17)
      *(_QWORD *)(v17 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v16;
    *v16 = v14;
  }
  *((_WORD *)a3 + 9) = *((_WORD *)a3 + 9) & 0x8000 | (*((_WORD *)a3 + 9) + 1) & 0x7FFF;
  return this;
}

uint64_t llvm::DSOLocalEquivalent::get(llvm::DSOLocalEquivalent *this, llvm::GlobalValue *a2)
{
  _QWORD *v2;
  uint64_t result;
  _DWORD *v4;
  _QWORD *v5;

  v5 = this;
  v2 = sub_1C6180A54(***(_QWORD ***)this + 1464, (uint64_t *)&v5);
  result = v2[1];
  if (!result)
  {
    v4 = operator new(0x38uLL);
    v4[13] = v4[13] & 0x38000000 | 1;
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *((_QWORD *)v4 + 3) = v4 + 8;
    result = llvm::DSOLocalEquivalent::DSOLocalEquivalent((uint64_t)(v4 + 8), v5);
    v2[1] = result;
  }
  return result;
}

uint64_t llvm::NoCFIValue::get(llvm::NoCFIValue *this, llvm::GlobalValue *a2)
{
  _QWORD *v2;
  uint64_t result;
  _DWORD *v4;
  _QWORD *v5;

  v5 = this;
  v2 = sub_1C6180A54(***(_QWORD ***)this + 1488, (uint64_t *)&v5);
  result = v2[1];
  if (!result)
  {
    v4 = operator new(0x38uLL);
    v4[13] = v4[13] & 0x38000000 | 1;
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *((_QWORD *)v4 + 3) = v4 + 8;
    result = llvm::NoCFIValue::NoCFIValue((uint64_t)(v4 + 8), v5);
    v2[1] = result;
  }
  return result;
}

llvm::ConstantExpr *llvm::ConstantExpr::getTruncOrBitCast(llvm::Type **this, llvm::Type ***a2, llvm::Type *a3)
{
  llvm::Type *v5;
  llvm::Type *v6;
  int PrimitiveSizeInBits;
  llvm::Type *v8;
  uint64_t v9;

  v5 = *this;
  if ((*((_DWORD *)*this + 2) & 0xFE) == 0x12)
    v6 = (llvm::Type *)**((_QWORD **)v5 + 2);
  else
    v6 = *this;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v6);
  v8 = (llvm::Type *)a2;
  if (((_DWORD)a2[1] & 0xFE) == 0x12)
    v8 = *a2[2];
  if (PrimitiveSizeInBits != llvm::Type::getPrimitiveSizeInBits(v8))
  {
    v9 = 38;
    return sub_1C537D3B8((llvm *)v9, (uint64_t)this, (llvm::Constant *)a2, 0);
  }
  if (v5 != (llvm::Type *)a2)
  {
    v9 = 49;
    return sub_1C537D3B8((llvm *)v9, (uint64_t)this, (llvm::Constant *)a2, 0);
  }
  return (llvm::ConstantExpr *)this;
}

llvm::ConstantExpr *llvm::ConstantExpr::getFPCast(llvm::ConstantExpr *this, llvm::Type ***a2, llvm::Type *a3)
{
  uint64_t v5;
  unsigned int PrimitiveSizeInBits;
  llvm::Type *v7;
  unsigned int v8;
  int v10;

  v5 = *(_QWORD *)this;
  if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12)
    v5 = **(_QWORD **)(v5 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v5);
  v7 = (llvm::Type *)a2;
  if (((_DWORD)a2[1] & 0xFE) == 0x12)
    v7 = *a2[2];
  v8 = llvm::Type::getPrimitiveSizeInBits(v7);
  if (PrimitiveSizeInBits == v8)
    return this;
  if (PrimitiveSizeInBits > v8)
    v10 = 45;
  else
    v10 = 46;
  return (llvm::ConstantExpr *)llvm::ConstantExpr::getCast(v10);
}

llvm::UndefValue *llvm::ConstantExpr::getSizeOf(llvm::ConstantExpr *this, llvm::Type *a2)
{
  llvm::ValueHandleBase *v3;
  llvm::Constant *v4;
  llvm::Type *v5;
  uint64_t *NullValue;
  uint64_t ElementPtr;
  llvm::ValueHandleBase *v9;

  v3 = llvm::ConstantInt::get((llvm::ConstantInt **)(**(_QWORD **)this + 1960), 1, 0);
  v4 = (llvm::Constant *)llvm::PointerType::get(this, 0);
  NullValue = (uint64_t *)llvm::Constant::getNullValue(v4, v5);
  v9 = v3;
  ElementPtr = llvm::ConstantExpr::getGetElementPtr(this, NullValue, (llvm::Value *)&v9, 1, 0, 0, 0);
  return sub_1C537D3B8((llvm *)0x2F, ElementPtr, (llvm::Constant *)(**(_QWORD **)this + 1984), 0);
}

llvm::ValueHandleBase *llvm::ConstantExpr::getFRem(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, uint64_t a4, uint64_t a5, llvm::Type *a6)
{
  return llvm::ConstantExpr::get((llvm::ConstantExpr *)0x18, this, a2, 0, 0, a6);
}

llvm::Constant *llvm::ConstantExpr::getUMin(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3)
{
  llvm::UndefValue *ICmp;
  llvm::Type *v6;

  ICmp = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)0x24, (unsigned __int8 *)this, a2, 0);
  return llvm::ConstantExpr::getSelect(ICmp, (llvm::PoisonValue **)this, (llvm::PoisonValue **)a2, 0, v6);
}

llvm::ValueHandleBase *llvm::ConstantExpr::getAShr(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, BOOL a4, uint64_t a5, llvm::Type *a6)
{
  return llvm::ConstantExpr::get((llvm::ConstantExpr *)0x1B, this, a2, a3, 0, a6);
}

float llvm::ConstantDataSequential::getElementAsFloat(llvm::ConstantDataSequential *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  return *(float *)(v2 + llvm::ConstantDataSequential::getElementByteSize(this) * a2);
}

double llvm::ConstantDataSequential::getElementAsDouble(llvm::ConstantDataSequential *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  return *(double *)(v2 + llvm::ConstantDataSequential::getElementByteSize(this) * a2);
}

void llvm::Constant::handleOperandChange(llvm::Constant *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v4;
  llvm::Value **v5;

  v4 = *((unsigned __int8 *)this + 16);
  if ((_DWORD)v4 != 8)
    __asm { BR              X10 }
  v5 = llvm::ConstantArray::handleOperandChangeImpl(this, a2, a3);
  if (v5)
  {
    llvm::Value::doRAUW(this, (llvm::Value *)v5);
    llvm::Constant::destroyConstant((int32x2_t ****)this);
  }
}

void sub_1C6229B20(uint64_t a1, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t ***v3;

  llvm::BlockAddress::handleOperandChangeImpl(v3, a2, a3);
  JUMPOUT(0x1C6229ACCLL);
}

void sub_1C6229B2C(uint64_t a1, llvm::Value *a2, llvm::Value *a3)
{
  llvm::ConstantVector *v3;

  llvm::ConstantVector::handleOperandChangeImpl(v3, a2, a3);
  JUMPOUT(0x1C6229ACCLL);
}

void sub_1C6229B38(uint64_t a1, llvm::Value *a2, llvm::Value *a3)
{
  llvm::ConstantExpr *v3;

  llvm::ConstantExpr::handleOperandChangeImpl(v3, a2, a3);
  JUMPOUT(0x1C6229ACCLL);
}

void sub_1C6229B44(uint64_t a1, llvm::Value *a2, llvm::Value *a3)
{
  llvm::Constant **v3;

  llvm::DSOLocalEquivalent::handleOperandChangeImpl(v3, a2, a3);
  JUMPOUT(0x1C6229ACCLL);
}

void sub_1C6229B50(uint64_t a1, llvm::Value *a2, llvm::Value *a3)
{
  llvm::Constant **v3;

  llvm::NoCFIValue::handleOperandChangeImpl(v3, a2, a3);
  JUMPOUT(0x1C6229ACCLL);
}

void sub_1C6229B5C(uint64_t a1, llvm::Value *a2, llvm::Value *a3)
{
  llvm::ConstantStruct *v3;

  llvm::ConstantStruct::handleOperandChangeImpl(v3, a2, a3);
  JUMPOUT(0x1C6229ACCLL);
}

uint64_t llvm::ConstantStruct::handleOperandChangeImpl(llvm::ConstantStruct *this, llvm::Value *a2, llvm::Value *a3)
{
  int v6;
  uint64_t v7;
  llvm::Value **v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  llvm::Value *v16;
  llvm::Type *v17;
  uint64_t v18;
  uint64_t v19;
  void *v21;
  uint64_t v22;
  _QWORD v23[9];

  v23[8] = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x40000000) != 0)
  {
    v8 = (llvm::Value **)*((_QWORD *)this - 1);
    LODWORD(v7) = v6 & 0x7FFFFFF;
  }
  else
  {
    v7 = v6 & 0x7FFFFFF;
    v8 = (llvm::Value **)((char *)this - 32 * v7);
  }
  v21 = v23;
  v22 = 0x800000000;
  if (v7 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, (uint64_t)v23, v7, 8);
    LODWORD(v7) = *((_DWORD *)this + 5) & 0x7FFFFFF;
  }
  if ((_DWORD)v7)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = v7;
    v13 = v22;
    v14 = 32 * v12;
    v15 = 1;
    do
    {
      if (*v8 == a2)
      {
        ++v11;
        v10 = v9;
        v16 = a3;
      }
      else
      {
        v16 = *v8;
      }
      if (v13 >= HIDWORD(v22))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, (uint64_t)v23, v13 + 1, 8);
        v13 = v22;
      }
      *((_QWORD *)v21 + v13) = v16;
      v13 = v22 + 1;
      LODWORD(v22) = v22 + 1;
      v15 &= v16 == a3;
      v8 += 4;
      ++v9;
      v14 -= 32;
    }
    while (v14);
    if ((v15 & 1) == 0)
      goto LABEL_24;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  if (llvm::Constant::isNullValue(a3))
  {
    v18 = (uint64_t)llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)this, v17);
    goto LABEL_17;
  }
  if (*((unsigned __int8 *)a3 + 16) - 11 < 2)
  {
    v18 = (uint64_t)llvm::UndefValue::get(*(llvm::UndefValue **)this, v17);
    goto LABEL_17;
  }
  v13 = v22;
LABEL_24:
  v18 = sub_1C6229EC0(***(_QWORD ***)this + 1264, v21, v13, (uint64_t)this, (uint64_t)a2, (uint64_t)a3, v11, v10);
LABEL_17:
  v19 = v18;
  if (v21 != v23)
    free(v21);
  return v19;
}

uint64_t sub_1C6229D64(unint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned int a8)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25[3];

  *(_QWORD *)&v22 = *(_QWORD *)a4;
  *((_QWORD *)&v22 + 1) = a2;
  v23 = a3;
  v19 = sub_1C53831BC(a2, (uint64_t)&a2[a3]);
  v19 = sub_1C5383050((uint64_t *)&v22, &v19);
  v20 = v22;
  v21 = v23;
  v25[0] = 0;
  if (sub_1C5383578((uint64_t *)a1, (uint64_t)&v19, v25)
    && v25[0] != (uint64_t *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16)))
  {
    return *v25[0];
  }
  sub_1C537C658((int32x2_t *)a1, a4);
  if (a7 == 1)
  {
    sub_1C622AAE0(a4, a8, a6);
  }
  else
  {
    v15 = *(_DWORD *)(a4 + 20);
    v16 = v15 & 0x7FFFFFF;
    if ((v15 & 0x7FFFFFF) != 0)
    {
      v17 = 0;
      v18 = a4;
      do
      {
        if (*(_QWORD *)(v18 - 32 * (*(_DWORD *)(a4 + 20) & 0x7FFFFFF)) == a5)
          sub_1C622AAE0(a4, v17, a6);
        ++v17;
        v18 += 32;
      }
      while (v16 != v17);
    }
  }
  v24 = a4;
  sub_1C53836C8(a1, &v24, (uint64_t)&v19, (uint64_t)v25);
  return 0;
}

uint64_t sub_1C6229EC0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned int a8)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25[3];

  *(_QWORD *)&v22 = *(_QWORD *)a4;
  *((_QWORD *)&v22 + 1) = a2;
  v23 = a3;
  v19 = sub_1C53831BC(a2, (uint64_t)&a2[a3]);
  v19 = sub_1C5383050((uint64_t *)&v22, &v19);
  v20 = v22;
  v21 = v23;
  v25[0] = 0;
  if (sub_1C5383AFC((uint64_t *)a1, (uint64_t)&v19, v25)
    && v25[0] != (uint64_t *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16)))
  {
    return *v25[0];
  }
  sub_1C537C708((int32x2_t *)a1, a4);
  if (a7 == 1)
  {
    sub_1C622AAE0(a4, a8, a6);
  }
  else
  {
    v15 = *(_DWORD *)(a4 + 20);
    v16 = v15 & 0x7FFFFFF;
    if ((v15 & 0x7FFFFFF) != 0)
    {
      v17 = 0;
      v18 = a4;
      do
      {
        if (*(_QWORD *)(v18 - 32 * (*(_DWORD *)(a4 + 20) & 0x7FFFFFF)) == a5)
          sub_1C622AAE0(a4, v17, a6);
        ++v17;
        v18 += 32;
      }
      while (v16 != v17);
    }
  }
  v24 = a4;
  sub_1C5383C4C(a1, &v24, (uint64_t)&v19, (uint64_t)v25);
  return 0;
}

uint64_t sub_1C622A01C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned int a8)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25[3];

  *(_QWORD *)&v22 = *(_QWORD *)a4;
  *((_QWORD *)&v22 + 1) = a2;
  v23 = a3;
  v19 = sub_1C53831BC(a2, (uint64_t)&a2[a3]);
  v19 = sub_1C5384050(&v22, &v19);
  v20 = v22;
  v21 = v23;
  v25[0] = 0;
  if (sub_1C5384154(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t)&v19, v25)
    && v25[0] != (uint64_t *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16)))
  {
    return *v25[0];
  }
  sub_1C62292B8(a1, (uint64_t *)a4);
  if (a7 == 1)
  {
    sub_1C622AAE0(a4, a8, a6);
  }
  else
  {
    v15 = *(_DWORD *)(a4 + 20);
    v16 = v15 & 0x7FFFFFF;
    if ((v15 & 0x7FFFFFF) != 0)
    {
      v17 = 0;
      v18 = a4;
      do
      {
        if (*(_QWORD *)(v18 - 32 * (*(_DWORD *)(a4 + 20) & 0x7FFFFFF)) == a5)
          sub_1C622AAE0(a4, v17, a6);
        ++v17;
        v18 += 32;
      }
      while (v16 != v17);
    }
  }
  v24 = a4;
  sub_1C5384228(a1, &v24, (uint64_t)&v19, (uint64_t)v25);
  return 0;
}

void sub_1C622A17C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  llvm::Value *v12;
  _DWORD *v13;
  uint64_t *v14;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v14 = 0;
      sub_1C500AA94(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v14);
      v10 = v14;
      *v14 = *a2;
      v11 = a2[1];
      a2[1] = 0;
      v10[1] = v11;
      ++*(_DWORD *)(a1 + 8);
      v12 = (llvm::Value *)a2[1];
      a2[1] = 0;
      if (v12)
      {
        llvm::Value::~Value(v12);
        llvm::User::operator delete(v13);
      }
    }
    a2 += 2;
  }
}

uint64_t sub_1C622A248(uint64_t a1, int a2, uint64_t **a3, uint64_t ***a4)
{
  int v8;
  int v9;
  unsigned int v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t result;
  uint64_t **v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  if (a2)
  {
    v8 = sub_1C5384658(*a3);
    v9 = a2 - 1;
    v10 = v8 & (a2 - 1);
    v11 = (uint64_t **)(a1 + 8 * v10);
    v12 = *v11;
    if (*a3 == *v11)
    {
      result = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      result = 1;
      while (v12 != (uint64_t *)-4096)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v12 == (uint64_t *)-8192;
        if (v16)
          v14 = v11;
        v17 = v10 + v15++;
        v10 = v17 & v9;
        v11 = (uint64_t **)(a1 + 8 * (v17 & v9));
        v12 = *v11;
        if (*a3 == *v11)
          goto LABEL_4;
      }
      result = 0;
      if (v14)
        v11 = v14;
    }
  }
  else
  {
    v11 = 0;
    result = 0;
  }
LABEL_4:
  *a4 = v11;
  return result;
}

void sub_1C622A308(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  llvm::Value *v9;
  _QWORD *v10;
  uint64_t v11;
  llvm::Value *v12;
  _DWORD *v13;
  _QWORD *v14;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v14 = 0;
      sub_1C5384B64((uint64_t *)a1, a2, &v14);
      v10 = v14;
      *v14 = *a2;
      v11 = a2[1];
      a2[1] = 0;
      v10[1] = v11;
      ++*(_DWORD *)(a1 + 8);
      v12 = (llvm::Value *)a2[1];
      a2[1] = 0;
      if (v12)
      {
        llvm::Value::~Value(v12, v9);
        llvm::User::operator delete(v13);
      }
    }
    a2 += 2;
  }
}

_QWORD *sub_1C622A3D4(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C622A43C(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C622A43C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5384D68(a1, v6);
  v8 = 0;
  sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_1C622A4EC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t *v11;
  uint64_t v12;
  llvm::Value *v13;
  _DWORD *v14;
  uint64_t *v15;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v15 = 0;
      sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v15);
      v11 = v15;
      *v15 = *a2;
      v12 = a2[1];
      a2[1] = 0;
      v11[1] = v12;
      ++*(_DWORD *)(a1 + 8);
      v13 = (llvm::Value *)a2[1];
      a2[1] = 0;
      if (v13)
      {
        llvm::Value::~Value(v13, v10);
        llvm::User::operator delete(v14);
      }
    }
    a2 += 2;
  }
}

void sub_1C622A5B8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  llvm::Value *v12;
  _DWORD *v13;
  uint64_t *v14;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v14 = 0;
      sub_1C4F763D4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v14);
      v10 = v14;
      *v14 = *a2;
      v11 = a2[1];
      a2[1] = 0;
      v10[1] = v11;
      ++*(_DWORD *)(a1 + 8);
      v12 = (llvm::Value *)a2[1];
      a2[1] = 0;
      if (v12)
      {
        llvm::Value::~Value(v12);
        llvm::User::operator delete(v13);
      }
    }
    a2 += 2;
  }
}

_QWORD *sub_1C622A684(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6214EF4(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C622A6E8((uint64_t)a1, a2, v7);
    *v5 = *a2;
    v5[1] = a2[1];
    v5[2] = 0;
  }
  return v5;
}

_QWORD *sub_1C622A6E8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_8;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_8:
    sub_1C5385320(a1, v6);
    v8 = 0;
    sub_1C6214EF4((uint64_t *)a1, a2, &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096 || a3[1] != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C622A7A0(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = 24 * v6;
    v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *v7 = v9;
      v7 = (int64x2_t *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v10 = a2[1];
    if ((*a2 != -4096 || v10 != -4096) && (*a2 != -8192 || v10 != -8192))
    {
      v12 = 0;
      result = sub_1C6214EF4((uint64_t *)v5, a2, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      v11[2] = a2[2];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 3;
  }
  return result;
}

uint64_t sub_1C622A878(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *__src, uint64_t a5, uint64_t a6)
{
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  *(_QWORD *)a1 = a6;
  *(_QWORD *)(a1 + 8) = 0;
  v9 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 2;
  *(_DWORD *)(a1 + 16) = 4259845;
  *(_DWORD *)(a1 + 20) = v9;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 0x400000000;
  sub_1C4860A74((unsigned int *)(a1 + 24), __src, &__src[4 * a5]);
  v10 = (_QWORD *)(a1 - 64);
  if (*(_QWORD *)(a1 - 64))
  {
    **(_QWORD **)(a1 - 48) = *(_QWORD *)(a1 - 56);
    v11 = *(_QWORD *)(a1 - 56);
    if (v11)
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(a1 - 48);
  }
  *v10 = a2;
  if (a2)
  {
    v14 = *(_QWORD *)(a2 + 8);
    v13 = (_QWORD *)(a2 + 8);
    v12 = v14;
    *(_QWORD *)(a1 - 56) = v14;
    if (v14)
      *(_QWORD *)(v12 + 16) = a1 - 56;
    *(_QWORD *)(a1 - 48) = v13;
    *v13 = v10;
  }
  v15 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v16 = *(_QWORD *)(a1 - 24);
    if (v16)
      *(_QWORD *)(v16 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v15 = a3;
  if (a3)
  {
    v19 = *(_QWORD *)(a3 + 8);
    v18 = (_QWORD *)(a3 + 8);
    v17 = v19;
    *(_QWORD *)(a1 - 24) = v19;
    if (v19)
      *(_QWORD *)(v17 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v18;
    *v18 = v15;
  }
  return a1;
}

uint64_t sub_1C622A974(uint64_t a1, uint64_t a2, _BYTE *__src, uint64_t a4, uint64_t a5)
{
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  *(_QWORD *)a1 = a5;
  *(_QWORD *)(a1 + 8) = 0;
  v7 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 4194309;
  *(_DWORD *)(a1 + 20) = v7;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 0x400000000;
  sub_1C4860A74((unsigned int *)(a1 + 24), __src, &__src[4 * a4]);
  v8 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v9 = *(_QWORD *)(a1 - 24);
    if (v9)
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v8 = a2;
  if (a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    v11 = (_QWORD *)(a2 + 8);
    v10 = v12;
    *(_QWORD *)(a1 - 24) = v12;
    if (v12)
      *(_QWORD *)(v10 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v11;
    *v11 = v8;
  }
  return a1;
}

uint64_t sub_1C622AA20(uint64_t result, uint64_t a2, __int16 a3, __int16 a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = 0;
  *(_WORD *)(result + 16) = 5;
  *(_DWORD *)(result + 20) = *(_DWORD *)(result + 20) & 0xC0000000 | 2;
  *(_WORD *)(result + 18) = a3;
  *(_WORD *)(result + 24) = a4;
  v6 = (_QWORD *)(result - 64);
  if (*(_QWORD *)(result - 64))
  {
    **(_QWORD **)(result - 48) = *(_QWORD *)(result - 56);
    v14 = *(_QWORD *)(result - 56);
    if (v14)
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(result - 48);
  }
  *v6 = a5;
  if (a5)
  {
    v9 = *(_QWORD *)(a5 + 8);
    v7 = (_QWORD *)(a5 + 8);
    v8 = v9;
    *(_QWORD *)(result - 56) = v9;
    if (v9)
      *(_QWORD *)(v8 + 16) = result - 56;
    *(_QWORD *)(result - 48) = v7;
    *v7 = v6;
  }
  v10 = (_QWORD *)(result - 32);
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v15 = *(_QWORD *)(result - 24);
    if (v15)
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(result - 16);
  }
  *v10 = a6;
  if (a6)
  {
    v13 = *(_QWORD *)(a6 + 8);
    v11 = (_QWORD *)(a6 + 8);
    v12 = v13;
    *(_QWORD *)(result - 24) = v13;
    if (v13)
      *(_QWORD *)(v12 + 16) = result - 24;
    *(_QWORD *)(result - 16) = v11;
    *v11 = v10;
  }
  return result;
}

uint64_t sub_1C622AAE0(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result - 32 * (*(_DWORD *)(result + 20) & 0x7FFFFFF);
  v4 = (_QWORD *)(v3 + 32 * a2);
  v5 = v4;
  if (*v4)
  {
    v7 = (_QWORD *)v4[2];
    v6 = v4 + 2;
    *v7 = *(v6 - 1);
    v8 = *(v6 - 1);
    if (v8)
      *(_QWORD *)(v8 + 16) = *v6;
  }
  *v5 = a3;
  if (a3)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v9 = (_QWORD *)(a3 + 8);
    v10 = v11;
    v12 = v3 + 32 * a2;
    *(_QWORD *)(v12 + 8) = v11;
    if (v11)
      *(_QWORD *)(v10 + 16) = v12 + 8;
    *(_QWORD *)(v12 + 16) = v9;
    *v9 = v5;
  }
  return result;
}

void llvm::initializeCore(llvm *this, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  llvm::PassRegistry *v5;
  llvm::PassRegistry *v6;

  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)this);
  llvm::initializePrintModulePassWrapperPass(this, v3);
  llvm::initializePrintFunctionPassWrapperPass(this, v4);
  llvm::initializeSafepointIRVerifierPass(this, v5);
  llvm::initializeVerifierLegacyPassPass(this, v6);
}

uint64_t sub_1C622AB8C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result - 32 * (*(_DWORD *)(result + 20) & 0x7FFFFFF);
  v3 = (_QWORD *)(v2 + 32);
  if (*(_QWORD *)(v2 + 32))
  {
    **(_QWORD **)(v2 + 48) = *(_QWORD *)(v2 + 40);
    v4 = *(_QWORD *)(v2 + 40);
    if (v4)
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 48);
  }
  *v3 = a2;
  if (a2)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v5 = (_QWORD *)(a2 + 8);
    v6 = v7;
    *(_QWORD *)(v2 + 40) = v7;
    if (v7)
      *(_QWORD *)(v6 + 16) = v2 + 40;
    *(_QWORD *)(v2 + 48) = v5;
    *v5 = v3;
  }
  return result;
}

unsigned __int8 **sub_1C622ABE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  unsigned __int8 **v11;
  _BYTE v13[32];
  __int16 v14;

  v14 = 257;
  v10 = sub_1C61CC1B8(a2, a3, a4, a5, a6, a7, 0, 0, (uint64_t)v13, 0);
  v11 = (unsigned __int8 **)v10;
  if (*(_BYTE *)(a1 + 100))
    *((_QWORD *)v10 + 8) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v10 + 8, **(uint64_t ***)v10, -1, 61);
  return sub_1C61D76F0((uint64_t *)a1, v11, a8);
}

llvm::Instruction *sub_1C622AC80(uint64_t *a1, llvm::Type **a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10;
  llvm::Instruction *v11;
  _BYTE v13[32];
  __int16 v14;

  v10 = a4 + 1;
  v14 = 257;
  v11 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x40, (int)a4 + 1);
  llvm::FuncletPadInst::FuncletPadInst(v11, 52, a2, a3, a4, v10, (uint64_t)v13, 0);
  sub_1C61D76F0(a1, (unsigned __int8 **)v11, a5);
  return v11;
}

llvm::Instruction *sub_1C622AD1C(uint64_t *a1, llvm::Type **a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10;
  llvm::Instruction *v11;
  _BYTE v13[32];
  __int16 v14;

  v10 = a4 + 1;
  v14 = 257;
  v11 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x40, (int)a4 + 1);
  llvm::FuncletPadInst::FuncletPadInst(v11, 51, a2, a3, a4, v10, (uint64_t)v13, 0);
  sub_1C61D76F0(a1, (unsigned __int8 **)v11, a5);
  return v11;
}

unsigned __int8 **LLVMBuildCleanupRet_0(uint64_t *a1, llvm::Value *a2, llvm::BasicBlock *a3)
{
  unsigned int v6;
  llvm::CleanupReturnInst *v7;
  _BYTE v9[32];
  __int16 v10;

  if (a3)
    v6 = 2;
  else
    v6 = 1;
  v7 = (llvm::CleanupReturnInst *)llvm::User::operator new((llvm::User *)0x40, v6);
  llvm::CleanupReturnInst::CleanupReturnInst(v7, a2, a3, v6, 0);
  v10 = 257;
  return sub_1C61D76F0(a1, (unsigned __int8 **)v7, (uint64_t)v9);
}

uint64_t sub_1C622AE3C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  llvm::Value *v9;
  _BYTE v10[32];
  __int16 v11;

  result = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a2, a3, 1, 0);
  if (!result)
  {
    v11 = 257;
    v9 = llvm::BinaryOperator::Create(13, a2, a3, (uint64_t)v10, 0);
    result = sub_1C4773754((uint64_t *)a1, (uint64_t)v9, a4);
    *(_BYTE *)(result + 17) |= 2u;
  }
  return result;
}

unsigned __int8 *sub_1C622AECC(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *result;
  llvm::Value *v9;
  _BYTE v10[32];
  __int16 v11;

  result = sub_1C477422C(a1, 23, (uint64_t)a2, a3, a4);
  if (!result)
  {
    v11 = 257;
    v9 = llvm::BinaryOperator::Create(23, a2, a3, (uint64_t)v10, 0);
    return (unsigned __int8 *)sub_1C4773754(a1, (uint64_t)v9, a4);
  }
  return result;
}

unsigned __int8 *sub_1C622AF4C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *result;
  llvm::Value *v9;
  uint64_t v10;
  int v11;
  llvm::MDNode *v12;
  _BYTE v13[32];
  __int16 v14;

  if (*(_BYTE *)(a1 + 100))
    return (unsigned __int8 *)llvm::IRBuilderBase::CreateConstrainedFPBinOp(a1, 95, a2, a3, 0, a4, 0, 0, 0);
  result = sub_1C477422C((uint64_t *)a1, 24, (uint64_t)a2, a3, a4);
  if (!result)
  {
    v14 = 257;
    v9 = llvm::BinaryOperator::Create(24, a2, a3, (uint64_t)v13, 0);
    v10 = (uint64_t)v9;
    v11 = *(_DWORD *)(a1 + 96);
    v12 = *(llvm::MDNode **)(a1 + 88);
    if (v12)
      llvm::Value::setMetadata(v9, 3, v12);
    *(_BYTE *)(v10 + 17) |= 2 * (_BYTE)v11;
    return (unsigned __int8 *)sub_1C477438C((uint64_t *)a1, v10, a4);
  }
  return result;
}

unsigned __int8 **sub_1C622B02C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  unsigned __int8 **v9;
  uint64_t ***v10;
  _BYTE v12[32];
  __int16 v13;

  v8 = (char *)operator new(0x60uLL);
  *((_DWORD *)v8 + 13) = *((_DWORD *)v8 + 13) & 0x38000000 | 1;
  v9 = (unsigned __int8 **)(v8 + 32);
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = v8 + 32;
  v13 = 257;
  v10 = (uint64_t ***)sub_1C4FCD80C((uint64_t)(v8 + 32), a3, 60, a2, 0);
  llvm::Value::setName(v10, (uint64_t)v12);
  sub_1C61D76F0(a1, v9, a4);
  return v9;
}

uint64_t sub_1C622B0CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;

  v10 = *a2;
  v11 = 0;
  sub_1C622D970(a1, &v10, &v11, (uint64_t)&v8);
  v4 = v8;
  v5 = (void **)(a1 + 24);
  if (!v9)
    return (uint64_t)*v5 + 56 * *(unsigned int *)(v8 + 8);
  sub_1C5394C20(v5, a2);
  v6 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v4 + 8) = -1227133513 * ((unint64_t)(v6 - *(_QWORD *)(a1 + 24)) >> 3) - 1;
  return v6 - 56;
}

uint64_t sub_1C622B174(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  unsigned int v7;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_1C622D718(a1, a2);
  v4 = *(_QWORD *)a1;
  v5 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v3);
  v6 = *a2;
  *v5 = v6;
  if (v6)
  {
    llvm::MetadataTracking::track((uint64_t)v5, v6, 2);
    LODWORD(v3) = *(_DWORD *)(a1 + 8);
    v4 = *(_QWORD *)a1;
  }
  v7 = v3 + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return v4 + 8 * v7 - 8;
}

void llvm::DIBuilder::finalizeSubprogram(llvm::DIBuilder *this, llvm::DISubprogram *a2)
{
  uint64_t v2;
  llvm::Metadata *Impl;
  llvm::MDNode *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[17];

  v11[16] = *MEMORY[0x1E0C80C00];
  v2 = ((_QWORD *)a2 - *((unsigned int *)a2 + 2))[7];
  if (v2 && (*(_BYTE *)(v2 + 1) & 0x7F) == 2)
  {
    v8 = 0;
    v9 = v11;
    v10 = 0x1000000000;
    if (sub_1C614ECAC(*((_QWORD *)this + 50), *((_DWORD *)this + 104), (uint64_t)a2, &v8)
      && v8 != *((_QWORD *)this + 50) + 32 * *((unsigned int *)this + 104))
    {
      sub_1C6177054((unsigned int *)&v9, *(char **)(v8 + 8), (char *)(*(_QWORD *)(v8 + 8) + 8 * *(unsigned int *)(v8 + 16)));
    }
    v8 = 0;
    if (sub_1C614ECAC(*((_QWORD *)this + 53), *((_DWORD *)this + 110), (uint64_t)a2, &v8)
      && v8 != *((_QWORD *)this + 53) + 32 * *((unsigned int *)this + 110))
    {
      sub_1C6177054((unsigned int *)&v9, *(char **)(v8 + 8), (char *)(*(_QWORD *)(v8 + 8) + 8 * *(unsigned int *)(v8 + 16)));
    }
    Impl = (llvm::Metadata *)llvm::MDTuple::getImpl(*((uint64_t **)this + 1), v9, v10, 0, 1);
    v7 = *(_QWORD *)(v2 + 16);
    if ((v7 & 4) != 0)
      llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v7 & 0xFFFFFFFFFFFFFFF8), Impl);
    llvm::MDNode::deleteTemporary((llvm::MDNode *)v2, v6);
    if (v9 != v11)
      free(v9);
  }
}

uint64_t llvm::DIBuilder::getOrCreateArray(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return llvm::MDTuple::getImpl(*(uint64_t **)(a1 + 8), a2, a3, 0, 1);
}

uint64_t llvm::DIBuilder::createCompileUnit(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, size_t a5, char a6, unsigned __int8 *a7, _QWORD *a8, int a9, unsigned __int8 *a10, size_t a11, int a12, uint64_t a13, char a14, char a15, int a16, char a17, unsigned __int8 *a18, size_t a19, unsigned __int8 *a20,size_t a21)
{
  llvm::NamedMDNode *inserted;
  uint64_t result;
  unsigned __int8 *v24;

  *(_QWORD *)(a1 + 16) = sub_1C5394078(*(uint64_t **)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 0, 0, 0, 0, a13, a14, a15,
                           a16,
                           a17,
                           a18,
                           a19,
                           a20,
                           a21,
                           1);
  inserted = (llvm::NamedMDNode *)llvm::Module::getOrInsertNamedMetadata(*(_QWORD *)a1, "llvm.dbg.cu", 0xBuLL);
  llvm::NamedMDNode::addOperand(inserted, *(llvm::MDNode **)(a1 + 16));
  result = *(_QWORD *)(a1 + 16);
  v24 = (unsigned __int8 *)result;
  if (result && ((*(_BYTE *)(result + 1) & 0x7F) == 2 || *(_DWORD *)(result + 12)))
  {
    sub_1C622B174(a1 + 344, &v24);
    return *(_QWORD *)(a1 + 16);
  }
  return result;
}

unsigned __int8 *llvm::DIBuilder::createImportedDeclaration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned __int8 *a6, size_t a7, uint64_t a8)
{
  return sub_1C5392E84(*(uint64_t **)(a1 + 8), 8, a2, a3, a4, a5, a6, a7, a8, a1 + 248);
}

llvm::MDNode *llvm::DIBuilder::createFile(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, unsigned __int8 *a4, _QWORD *a5, _OWORD *a6, __int128 *a7)
{
  uint64_t *v7;
  __int128 v8;
  __int128 v10;
  uint64_t v11;
  _OWORD v12[2];

  v7 = *(uint64_t **)(a1 + 8);
  v8 = a6[1];
  v12[0] = *a6;
  v12[1] = v8;
  v10 = *a7;
  v11 = *((_QWORD *)a7 + 2);
  return sub_1C5394260(v7, a2, a3, a4, a5, (uint64_t)v12, (uint64_t)&v10, 0, 1u);
}

llvm::MDNode *llvm::DIBuilder::createMacro(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned __int8 *a5, size_t a6, unsigned __int8 *a7, size_t a8)
{
  llvm::MDNode *v10;
  _QWORD *v11;
  llvm::MDNode *v13;
  uint64_t v14;

  v10 = sub_1C53943A4(*(uint64_t **)(a1 + 8), a4, a3, a5, a6, a7, a8, 0, 1u);
  v14 = a2;
  v11 = (_QWORD *)sub_1C622B5AC(a1 + 296, &v14);
  v13 = v10;
  sub_1C5392FEC(v11, (uint64_t *)&v13);
  return v10;
}

uint64_t sub_1C622B5AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD v8[6];
  uint64_t v9;
  _QWORD v10[2];
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;

  v17 = *a2;
  v18 = 0;
  sub_1C622D970(a1, &v17, &v18, (uint64_t)&v15);
  v4 = v15;
  if (v16)
  {
    v9 = *a2;
    v10[0] = 0;
    memset(v8, 0, sizeof(v8));
    v10[1] = 0;
    v11 = 0;
    v13 = 0;
    v14 = 0;
    v12 = 0;
    sub_1C5394C20((void **)(a1 + 24), &v9);
    sub_1C6176BF8(v10);
    sub_1C6176BF8(v8);
    v6 = *(_QWORD *)(a1 + 24);
    v5 = -1227133513 * ((unint64_t)(*(_QWORD *)(a1 + 32) - v6) >> 3) - 1;
    *(_DWORD *)(v4 + 8) = v5;
  }
  else
  {
    v5 = *(_DWORD *)(v15 + 8);
    v6 = *(_QWORD *)(a1 + 24);
  }
  return v6 + 56 * v5 + 8;
}

llvm::MDNode *llvm::DIBuilder::createEnumerator(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  size_t v10;
  int v11;
  _QWORD *v12;
  llvm::MDNode *Impl;
  void *v15;
  unsigned int v16;

  v7 = *(uint64_t **)(a1 + 8);
  v8 = *(unsigned int *)(a4 + 8);
  v16 = v8;
  if (v8 > 0x40)
  {
    v10 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
    v9 = (void *)operator new[]();
    memcpy(v9, *(const void **)a4, v10);
  }
  else
  {
    v9 = *(void **)a4;
  }
  v15 = v9;
  v11 = *(unsigned __int8 *)(a4 + 12);
  if (a3)
    v12 = llvm::MDString::get(v7, a2, a3);
  else
    v12 = 0;
  Impl = llvm::DIEnumerator::getImpl(v7, (uint64_t)&v15, v11 != 0, v12, 0, 1);
  if (v16 >= 0x41 && v15)
    MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
  return Impl;
}

llvm::MDNode *llvm::DIBuilder::createUnspecifiedType(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  return sub_1C622B7A4(*(uint64_t **)(a1 + 8), 59, a2, a3);
}

llvm::MDNode *sub_1C622B7A4(uint64_t *a1, int a2, unsigned __int8 *a3, size_t a4)
{
  _QWORD *v6;

  if (a4)
    v6 = llvm::MDString::get(a1, a3, a4);
  else
    v6 = 0;
  return llvm::DIBasicType::getImpl(a1, a2, (uint64_t)v6, 0, 0, 0, 0, 0, 1);
}

llvm::MDNode *llvm::DIBuilder::createNullPtrType(uint64_t **this)
{
  return sub_1C622B7A4(this[1], 59, "decltype(nullptr)", 0x11uLL);
}

llvm::MDNode *llvm::DIBuilder::createBasicType(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4, int a5, int a6)
{
  _QWORD *v9;

  v9 = *(_QWORD **)(a1 + 8);
  if (a3)
    a3 = llvm::MDString::get(*(uint64_t **)(a1 + 8), a2, (size_t)a3);
  return llvm::DIBasicType::getImpl(v9, 36, (uint64_t)a3, a4, 0, a5, a6, 0, 1);
}

uint64_t llvm::DIBuilder::createQualifiedType(uint64_t a1, int a2, uint64_t a3)
{
  return llvm::DIDerivedType::getImpl(*(uint64_t **)(a1 + 8), a2, 0, 0, 0, 0, a3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
}

uint64_t llvm::DIBuilder::createPtrAuthQualifiedType(uint64_t a1, uint64_t a2, char a3, int a4, unsigned __int16 a5, int a6, int a7)
{
  uint64_t *v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;

  v7 = *(uint64_t **)(a1 + 8);
  if (a4)
    v8 = 16;
  else
    v8 = 0;
  v9 = v8 & 0xFFE00010 | a3 & 0xF | (32 * a5);
  if (a6)
    v10 = 0x200000;
  else
    v10 = 0;
  if (a7)
    v11 = 0x400000;
  else
    v11 = 0;
  return llvm::DIDerivedType::getImpl(v7, 17152, 0, 0, 0, 0, a2, 0, 0, 0, 0, v9 | v10 | v11 | 0x100000000, 0, 0, 0, 0, 1);
}

uint64_t llvm::DIBuilder::createPointerType(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned __int8 *a6, size_t a7, uint64_t a8)
{
  uint64_t *v13;
  _QWORD *v14;

  v13 = *(uint64_t **)(a1 + 8);
  if (a7)
    v14 = llvm::MDString::get(*(uint64_t **)(a1 + 8), a6, a7);
  else
    v14 = 0;
  return llvm::DIDerivedType::getImpl(v13, 15, (uint64_t)v14, 0, 0, 0, a2, a3, a4, 0, a5, 0, 0, 0, a8, 0, 1);
}

uint64_t llvm::DIBuilder::createMemberPointerType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  return llvm::DIDerivedType::getImpl(*(uint64_t **)(a1 + 8), 31, 0, 0, 0, 0, a2, a4, a5, 0, 0, 0, a6, a3, 0, 0, 1);
}

uint64_t llvm::DIBuilder::createReferenceType(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  return llvm::DIDerivedType::getImpl(*(uint64_t **)(a1 + 8), a2, 0, 0, 0, 0, a3, a4, a5, 0, a6, 0, 0, 0, 0, 0, 1);
}

uint64_t llvm::DIBuilder::createTypedef(uint64_t a1, uint64_t a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, _BYTE *a7, int a8, uint64_t a9)
{
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;

  v13 = *(uint64_t **)(a1 + 8);
  if (a7)
  {
    if (*a7 == 16)
      v14 = 0;
    else
      v14 = (uint64_t)a7;
  }
  else
  {
    v14 = 0;
  }
  if (a4)
    v15 = llvm::MDString::get(*(uint64_t **)(a1 + 8), a3, a4);
  else
    v15 = 0;
  return llvm::DIDerivedType::getImpl(v13, 22, (uint64_t)v15, a5, a6, v14, a2, 0, a8, 0, 0, 0, 0, 0, a9, 0, 1);
}

uint64_t llvm::DIBuilder::createInheritance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::IntegerType *a5, int a6)
{
  llvm::ValueHandleBase *v11;
  llvm::Value *v12;
  _QWORD *v13;

  v11 = llvm::ConstantInt::get((llvm::ConstantInt **)(**(_QWORD **)(a1 + 8) + 1960), a5, 0);
  v13 = llvm::ValueAsMetadata::get(v11, v12);
  return llvm::DIDerivedType::getImpl(*(uint64_t **)(a1 + 8), 28, 0, 0, 0, a2, a3, 0, 0, a4, 0, 0, a6, (uint64_t)v13, 0, 0, 1);
}

uint64_t llvm::DIBuilder::createMemberType(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;

  v16 = *(uint64_t **)(a1 + 8);
  if (a2)
  {
    if (*a2 == 16)
      v17 = 0;
    else
      v17 = (uint64_t)a2;
  }
  else
  {
    v17 = 0;
  }
  if (a4)
    v18 = llvm::MDString::get(*(uint64_t **)(a1 + 8), a3, a4);
  else
    v18 = 0;
  return llvm::DIDerivedType::getImpl(v16, 13, (uint64_t)v18, a5, a6, v17, a11, a7, a8, a9, 0, 0, a10, 0, a12, 0, 1);
}

uint64_t llvm::DIBuilder::createBitFieldMemberType(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, llvm::IntegerType *a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t *v16;
  uint64_t v17;
  llvm::ValueHandleBase *v18;
  llvm::Value *v19;
  _QWORD *v20;
  _QWORD *v21;

  v16 = *(uint64_t **)(a1 + 8);
  if (a2)
  {
    if (*a2 == 16)
      v17 = 0;
    else
      v17 = (uint64_t)a2;
  }
  else
  {
    v17 = 0;
  }
  v18 = llvm::ConstantInt::get((llvm::ConstantInt **)(*v16 + 1984), (uint64_t)a9, 0);
  v20 = llvm::ValueAsMetadata::get(v18, v19);
  if (a4)
    v21 = llvm::MDString::get(v16, a3, a4);
  else
    v21 = 0;
  return llvm::DIDerivedType::getImpl(v16, 13, (uint64_t)v21, a5, a6, v17, a11, a7, 0, a8, 0, 0, a10 | 0x80000u, (uint64_t)v20, a12, 0, 1);
}

uint64_t llvm::DIBuilder::createStaticMemberType(uint64_t a1, llvm::Value *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, int a8, llvm::ValueAsMetadata *a9, int a10)
{
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;

  if (a2)
  {
    if (*(_BYTE *)a2 == 16)
      v16 = 0;
    else
      v16 = (uint64_t)a2;
  }
  else
  {
    v16 = 0;
  }
  v17 = *(uint64_t **)(a1 + 8);
  if (a9)
    v18 = llvm::ValueAsMetadata::get(a9, a2);
  else
    v18 = 0;
  if (a4)
    v19 = llvm::MDString::get(v17, a3, a4);
  else
    v19 = 0;
  return llvm::DIDerivedType::getImpl(v17, 13, (uint64_t)v19, a5, a6, v16, a7, 0, a10, 0, 0, 0, a8 | 0x1000u, (uint64_t)v18, 0, 0, 1);
}

uint64_t llvm::DIBuilder::createObjCIVar(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, _BYTE *a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v16;
  uint64_t v17;

  v16 = *(uint64_t **)(a1 + 8);
  if (a4)
  {
    if (*a4 == 16)
      v17 = 0;
    else
      v17 = (uint64_t)a4;
  }
  else
  {
    v17 = 0;
  }
  if (a3)
    a3 = llvm::MDString::get(*(uint64_t **)(a1 + 8), a2, (size_t)a3);
  return llvm::DIDerivedType::getImpl(v16, 13, (uint64_t)a3, (uint64_t)a4, a5, v17, a10, a6, a7, a8, 0, 0, a9, a11, 0, 0, 1);
}

unsigned int *llvm::DIBuilder::createObjCProperty(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4, int a5, unsigned __int8 *a6, _QWORD *a7, uint64_t a8, unsigned __int8 *a9, size_t a10, int a11, uint64_t a12)
{
  return sub_1C5394448(*(uint64_t **)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 0, 1);
}

llvm::MDNode *llvm::DIBuilder::createTemplateTypeParameter(uint64_t a1, uint64_t a2, unsigned __int8 *a3, size_t a4, uint64_t a5, char a6)
{
  _QWORD *v8;
  _QWORD *v9;

  v8 = *(_QWORD **)(a1 + 8);
  if (a4)
    v9 = llvm::MDString::get(*(uint64_t **)(a1 + 8), a3, a4);
  else
    v9 = 0;
  return llvm::DITemplateTypeParameter::getImpl(v8, (uint64_t)v9, a5, a6, 0, 1);
}

llvm::MDNode *llvm::DIBuilder::createTemplateValueParameter(uint64_t a1, llvm::Value *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, char a6, llvm::ValueAsMetadata *this)
{
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;

  v11 = *(uint64_t **)(a1 + 8);
  if (this)
    v12 = llvm::ValueAsMetadata::get(this, a2);
  else
    v12 = 0;
  if (a4)
    v13 = llvm::MDString::get(v11, a3, a4);
  else
    v13 = 0;
  return llvm::DITemplateValueParameter::getImpl(v11, 48, (uint64_t)v13, a5, a6, (uint64_t)v12, 0, 1);
}

llvm::MDNode *llvm::DIBuilder::createTemplateTemplateParameter(uint64_t a1, uint64_t a2, unsigned __int8 *a3, size_t a4, uint64_t a5, unsigned __int8 *a6, size_t a7)
{
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;

  v10 = *(uint64_t **)(a1 + 8);
  v11 = llvm::MDString::get(v10, a6, a7);
  if (a4)
    v12 = llvm::MDString::get(v10, a3, a4);
  else
    v12 = 0;
  return llvm::DITemplateValueParameter::getImpl(v10, 16646, (uint64_t)v12, a5, 0, (uint64_t)v11, 0, 1);
}

llvm::MDNode *llvm::DIBuilder::createTemplateParameterPack(uint64_t a1, uint64_t a2, unsigned __int8 *a3, size_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v8;
  _QWORD *v9;

  v8 = *(_QWORD **)(a1 + 8);
  if (a4)
    v9 = llvm::MDString::get(*(uint64_t **)(a1 + 8), a3, a4);
  else
    v9 = 0;
  return llvm::DITemplateValueParameter::getImpl(v8, 16647, (uint64_t)v9, a5, 0, a6, 0, 1);
}

uint64_t llvm::DIBuilder::createStructType(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, unsigned __int8 *a14, size_t a15)
{
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v21;

  v16 = *(uint64_t **)(a1 + 8);
  if (a2)
  {
    if (*a2 == 16)
      v17 = 0;
    else
      v17 = (uint64_t)a2;
  }
  else
  {
    v17 = 0;
  }
  v18 = sub_1C5394528(v16, 19, a3, a4, a5, a6, v17, a10, a7, a8, 0, a9, a11, a12, a13, 0, a14, a15, 0,
          0,
          0,
          0,
          0,
          0,
          0,
          1);
  v19 = v18;
  v21 = (unsigned __int8 *)v18;
  if (v18 && ((*(_BYTE *)(v18 + 1) & 0x7F) == 2 || *(_DWORD *)(v18 + 12)))
    sub_1C622B174(a1 + 344, &v21);
  return v19;
}

char *llvm::DIBuilder::createSubroutineType(uint64_t a1, uint64_t a2, int a3, char a4)
{
  return llvm::DISubroutineType::getImpl(*(_QWORD **)(a1 + 8), a3, a4, a2, 0, 1);
}

uint64_t llvm::DIBuilder::createEnumerationType(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, unsigned __int8 *a11, size_t a12, char a13)
{
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v20;

  v14 = *(uint64_t **)(a1 + 8);
  if (a2)
  {
    if (*a2 == 16)
      v15 = 0;
    else
      v15 = (uint64_t)a2;
  }
  else
  {
    v15 = 0;
  }
  if (a13)
    v16 = 0x1000000;
  else
    v16 = 0;
  v17 = sub_1C5394528(v14, 4, a3, a4, a5, a6, v15, a10, a7, a8, 0, v16, a9, 0, 0, 0, a11, a12, 0,
          0,
          0,
          0,
          0,
          0,
          0,
          1);
  v18 = *(unsigned int *)(a1 + 64);
  if (v18 >= *(_DWORD *)(a1 + 68))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 56, a1 + 72, v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a1 + 64);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v18) = v17;
  ++*(_DWORD *)(a1 + 64);
  v20 = (unsigned __int8 *)v17;
  if (v17 && ((*(_BYTE *)(v17 + 1) & 0x7F) == 2 || *(_DWORD *)(v17 + 12)))
    sub_1C622B174(a1 + 344, &v20);
  return v17;
}

uint64_t llvm::DIBuilder::createVectorType(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t Impl;
  uint64_t v7;
  unsigned __int8 *v9;

  Impl = llvm::DICompositeType::getImpl(*(uint64_t **)(a1 + 8), 1, 0, 0, 0, 0, a4, a2, a3, 0, 0x800u, a5, 0, 0, 0, 0, 0, 0, 0,
           0,
           0,
           0,
           0,
           1);
  v7 = Impl;
  v9 = (unsigned __int8 *)Impl;
  if (Impl && ((*(_BYTE *)(Impl + 1) & 0x7F) == 2 || *(_DWORD *)(Impl + 12)))
    sub_1C622B174(a1 + 344, &v9);
  return v7;
}

llvm::MDNode *llvm::DIBuilder::createObjectPointerType(llvm::MDNode *result)
{
  int v1;
  int v2;
  llvm::MDNode *v3;

  v1 = *((_DWORD *)result + 7);
  if ((v1 & 0x400) == 0)
  {
    v2 = v1 | 0x440;
    llvm::MDNode::clone(result);
    *((_DWORD *)v3 + 7) = v2;
    return llvm::MDNode::replaceWithUniquedImpl(v3);
  }
  return result;
}

_QWORD *llvm::DIBuilder::retainType(llvm::DIBuilder *this, llvm::DIScope *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a2;
  return sub_1C622C55C((uint64_t)this + 104, &v3);
}

_QWORD *sub_1C622C55C(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3;
  _QWORD *result;
  unsigned __int8 *v5;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return (_QWORD *)sub_1C622D718(a1, a2);
  result = (_QWORD *)(*(_QWORD *)a1 + 8 * v3);
  v5 = *a2;
  *result = v5;
  if (v5)
  {
    result = (_QWORD *)llvm::MetadataTracking::track((uint64_t)result, v5, 2);
    LODWORD(v3) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v3 + 1;
  return result;
}

uint64_t llvm::DIBuilder::createUnspecifiedParameter(llvm::DIBuilder *this)
{
  return 0;
}

uint64_t llvm::DIBuilder::createForwardDecl(uint64_t a1, int a2, unsigned __int8 *a3, size_t a4, _BYTE *a5, uint64_t a6, int a7, int a8, uint64_t a9, unsigned int a10, unsigned __int8 *a11, size_t a12)
{
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v19;

  v14 = *(uint64_t **)(a1 + 8);
  if (a5)
  {
    if (*a5 == 16)
      v15 = 0;
    else
      v15 = (uint64_t)a5;
  }
  else
  {
    v15 = 0;
  }
  v16 = sub_1C5394528(v14, a2, a3, a4, a6, a7, v15, 0, a9, a10, 0, 4u, 0, a8, 0, 0, a11, a12, 0,
          0,
          0,
          0,
          0,
          0,
          0,
          1);
  v17 = v16;
  v19 = (unsigned __int8 *)v16;
  if (v16 && ((*(_BYTE *)(v16 + 1) & 0x7F) == 2 || *(_DWORD *)(v16 + 12)))
    sub_1C622B174(a1 + 344, &v19);
  return v17;
}

uint64_t llvm::DIBuilder::createReplaceableCompositeType(uint64_t a1, int a2, unsigned __int8 *a3, size_t a4, _BYTE *a5, uint64_t a6, int a7, int a8, uint64_t a9, unsigned int a10, unsigned int a11, unsigned __int8 *a12, size_t a13, uint64_t a14)
{
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v21;

  v16 = *(uint64_t **)(a1 + 8);
  if (a5)
  {
    if (*a5 == 16)
      v17 = 0;
    else
      v17 = (uint64_t)a5;
  }
  else
  {
    v17 = 0;
  }
  v18 = sub_1C5394528(v16, a2, a3, a4, a6, a7, v17, 0, a9, a10, 0, a11, 0, a8, 0, 0, a12, a13, 0,
          0,
          0,
          0,
          0,
          a14,
          2,
          1);
  v19 = v18;
  v21 = (unsigned __int8 *)v18;
  if (v18 && ((*(_BYTE *)(v18 + 1) & 0x7F) == 2 || *(_DWORD *)(v18 + 12)))
    sub_1C622B174(a1 + 344, &v21);
  return v19;
}

uint64_t llvm::DIBuilder::getOrCreateTypeArray(uint64_t a1, _BYTE **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t Impl;
  void *v11;
  uint64_t v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x1000000000;
  if (a3)
  {
    v4 = a3;
    LODWORD(a3) = 0;
    v6 = 8 * v4;
    do
    {
      v7 = (uint64_t)*a2;
      if (*a2)
      {
        sub_1C5321CA0(*a2);
        LODWORD(a3) = v12;
      }
      if (a3 >= HIDWORD(v12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v11, (uint64_t)v13, a3 + 1, 8);
        LODWORD(a3) = v12;
      }
      *((_QWORD *)v11 + a3) = v7;
      a3 = (v12 + 1);
      LODWORD(v12) = v12 + 1;
      ++a2;
      v6 -= 8;
    }
    while (v6);
    v8 = v11;
  }
  else
  {
    v8 = v13;
  }
  Impl = llvm::MDTuple::getImpl(*(uint64_t **)(a1 + 8), v8, a3, 0, 1);
  if (v11 != v13)
    free(v11);
  return Impl;
}

llvm::MDNode *llvm::DIBuilder::getOrCreateSubrange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return llvm::DISubrange::getImpl(*(_QWORD **)(a1 + 8), a2, a3, a4, a5, 0, 1);
}

llvm::MDNode *llvm::DIBuilder::createGlobalVariableExpression(uint64_t a1, uint64_t a2, unsigned __int8 *a3, size_t a4, unsigned __int8 *a5, size_t a6, uint64_t a7, int a8, uint64_t a9, char a10, char a11, llvm::MDNode *a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16)
{
  llvm::MDNode *Impl;
  llvm::MDNode *v18;
  llvm::MDNode *v19;
  uint64_t v20;

  Impl = a12;
  v18 = sub_1C539481C(*(uint64_t **)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a13, a14, a15, a16, 1, 1);
  if (!a12)
    Impl = llvm::DIExpression::getImpl(*(_QWORD **)(a1 + 8), 0, 0, 0, 1);
  v19 = llvm::DIGlobalVariableExpression::getImpl(*(_QWORD **)(a1 + 8), (uint64_t)v18, (uint64_t)Impl, 0, 1);
  v20 = *(unsigned int *)(a1 + 208);
  if (v20 >= *(_DWORD *)(a1 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 200, a1 + 216, v20 + 1, 8);
    LODWORD(v20) = *(_DWORD *)(a1 + 208);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v20) = v19;
  ++*(_DWORD *)(a1 + 208);
  return v19;
}

llvm::MDNode *llvm::DIBuilder::createExpression(uint64_t a1, const void *a2, uint64_t a3)
{
  return llvm::DIExpression::getImpl(*(_QWORD **)(a1 + 8), a2, a3, 0, 1);
}

llvm::MDNode *llvm::DIBuilder::createTempGlobalVariableFwdDecl(uint64_t a1, uint64_t a2, unsigned __int8 *a3, size_t a4, unsigned __int8 *a5, size_t a6, uint64_t a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  return sub_1C539481C(*(uint64_t **)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9, a10, 0, a11, a12, a13, 0, 2, 1);
}

unsigned __int8 *llvm::DIBuilder::createAutoVariable(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, unsigned __int8 a8, int a9, int a10)
{
  return sub_1C5393B20(*(uint64_t **)(a1 + 8), a1 + 400, a2, a3, a4, 0, a5, a6, a7, a8, a9, a10, 0);
}

unsigned __int8 *llvm::DIBuilder::createParameterVariable(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, size_t a4, int a5, uint64_t a6, int a7, uint64_t a8, unsigned __int8 a9, int a10, uint64_t a11)
{
  return sub_1C5393B20(*(uint64_t **)(a1 + 8), a1 + 400, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0, a11);
}

unsigned __int8 *llvm::DIBuilder::createLabel(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const llvm::MDNode *v15;
  unsigned __int8 *Impl;
  _QWORD *v18;
  unsigned __int8 *DISubprogram;
  unsigned __int8 *v20;

  if (a2)
  {
    if (*a2 == 16)
      v12 = 0;
    else
      v12 = (uint64_t)a2;
  }
  else
  {
    v12 = 0;
  }
  v13 = *(_QWORD **)(a1 + 8);
  if (a4)
    v14 = llvm::MDString::get(*(uint64_t **)(a1 + 8), a3, a4);
  else
    v14 = 0;
  Impl = (unsigned __int8 *)llvm::DILabel::getImpl(v13, v12, (uint64_t)v14, a5, a6, 0, 1);
  v20 = Impl;
  if (a7)
  {
    DISubprogram = llvm::getDISubprogram(a2, v15);
    v18 = sub_1C622DB2C(a1 + 424, (uint64_t *)&DISubprogram);
    sub_1C622C55C((uint64_t)(v18 + 1), &v20);
  }
  return Impl;
}

uint64_t llvm::DIBuilder::createFunction(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, size_t a4, unsigned __int8 *a5, size_t a6, void *a7, int a8, void *a9, int a10, unsigned int a11, unsigned int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 *a17, size_t a18)
{
  uint64_t *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t Impl;
  uint64_t v24;
  uint64_t v26;
  void *v27;
  unsigned __int8 *v34;

  v19 = *(uint64_t **)(a1 + 8);
  if (a2)
  {
    if (*a2 == 16)
      v20 = 0;
    else
      v20 = a2;
    v27 = v20;
  }
  else
  {
    v27 = 0;
  }
  if ((a12 & 8) != 0)
  {
    v26 = *(_QWORD *)(a1 + 16);
    Impl = llvm::MDTuple::getImpl(v19, 0, 0, 2, 1);
    v22 = sub_1C539490C(v19, v27, a3, a4, a5, a6, a7, a8, a9, a10, 0, 0, __SPAIR64__(a12, a11), v26, a13, a14, Impl, a15, a16,
            a17,
            a18,
            1,
            1);
    v24 = *(unsigned int *)(a1 + 160);
    if (v24 >= *(_DWORD *)(a1 + 164))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 152, a1 + 168, v24 + 1, 8);
      LODWORD(v24) = *(_DWORD *)(a1 + 160);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v24) = v22;
    ++*(_DWORD *)(a1 + 160);
  }
  else
  {
    v21 = llvm::MDTuple::getImpl(v19, 0, 0, 2, 1);
    v22 = sub_1C539490C(v19, v27, a3, a4, a5, a6, a7, a8, a9, a10, 0, 0, __SPAIR64__(a12, a11), 0, a13, a14, v21, a15, a16,
            a17,
            a18,
            0,
            1);
  }
  v34 = (unsigned __int8 *)v22;
  if (v22 && ((*(_BYTE *)(v22 + 1) & 0x7F) == 2 || *(_DWORD *)(v22 + 12)))
    sub_1C622B174(a1 + 344, &v34);
  return v22;
}

uint64_t llvm::DIBuilder::createTempFunctionFwdDecl(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, size_t a4, unsigned __int8 *a5, size_t a6, void *a7, int a8, void *a9, int a10, unsigned int a11, unsigned int a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t *v16;
  uint64_t v17;

  v16 = *(uint64_t **)(a1 + 8);
  if (a2 && *a2 == 16)
    a2 = 0;
  if ((a12 & 8) != 0)
    v17 = *(_QWORD *)(a1 + 16);
  else
    v17 = 0;
  return sub_1C539490C(v16, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0, 0, __SPAIR64__(a12, a11), v17, a13, a14, 0, a15, 0,
           "",
           0,
           2,
           1);
}

uint64_t llvm::DIBuilder::createMethod(uint64_t a1, void *a2, unsigned __int8 *a3, size_t a4, unsigned __int8 *a5, size_t a6, void *a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v19;

  v15 = *(uint64_t **)(a1 + 8);
  if ((a12 & 0x800000000) != 0)
  {
    v16 = sub_1C539490C(v15, a2, a3, a4, a5, a6, a7, a8, a9, a8, a11, a10, a12, *(_QWORD *)(a1 + 16), a13, 0, 0, a14, 0,
            "",
            0,
            1,
            1);
    v17 = *(unsigned int *)(a1 + 160);
    if (v17 >= *(_DWORD *)(a1 + 164))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 152, a1 + 168, v17 + 1, 8);
      LODWORD(v17) = *(_DWORD *)(a1 + 160);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v17) = v16;
    ++*(_DWORD *)(a1 + 160);
  }
  else
  {
    v16 = sub_1C539490C(v15, a2, a3, a4, a5, a6, a7, a8, a9, a8, a11, a10, a12, 0, a13, 0, 0, a14, 0,
            "",
            0,
            0,
            1);
  }
  v19 = (unsigned __int8 *)v16;
  if (v16 && ((*(_BYTE *)(v16 + 1) & 0x7F) == 2 || *(_DWORD *)(v16 + 12)))
    sub_1C622B174(a1 + 344, &v19);
  return v16;
}

llvm::MDNode *llvm::DIBuilder::createNameSpace(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, size_t a4, char a5)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = *(_QWORD **)(a1 + 8);
  if (a2)
  {
    if (*a2 == 16)
      v7 = 0;
    else
      v7 = (uint64_t)a2;
  }
  else
  {
    v7 = 0;
  }
  if (a4)
    v8 = llvm::MDString::get(*(uint64_t **)(a1 + 8), a3, a4);
  else
    v8 = 0;
  return llvm::DINamespace::getImpl(v6, v7, (uint64_t)v8, a5, 0, 1);
}

llvm::MDNode *llvm::DIBuilder::createModule(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, size_t a4, unsigned __int8 *a5, _QWORD *a6, unsigned __int8 *a7, size_t a8, unsigned __int8 *a9, size_t a10, uint64_t a11, int a12, char a13)
{
  uint64_t *v17;
  uint64_t v18;

  v17 = *(uint64_t **)(a1 + 8);
  if (a2)
  {
    if (*a2 == 16)
      v18 = 0;
    else
      v18 = (uint64_t)a2;
  }
  else
  {
    v18 = 0;
  }
  return sub_1C5394A8C(v17, a11, v18, a3, a4, a5, a6, a8, a7, a8, a9, a10, a12, a13, 0, 1);
}

llvm::MDNode *llvm::DIBuilder::createLexicalBlockFile(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return llvm::DILexicalBlockFile::getImpl(*(_QWORD **)(a1 + 8), a2, a3, a4, 0, 1);
}

llvm::MDNode *llvm::DIBuilder::createLexicalBlock(uint64_t a1, _BYTE *a2, uint64_t a3, int a4, unsigned int a5)
{
  _QWORD *v5;

  v5 = *(_QWORD **)(a1 + 8);
  if (a2 && *a2 == 16)
    a2 = 0;
  return llvm::DILexicalBlock::getImpl(v5, (uint64_t)a2, a3, a4, a5, 1, 1);
}

uint64_t llvm::DIBuilder::insertDeclare(uint64_t a1, llvm::ValueAsMetadata *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return llvm::DIBuilder::insertDeclare(a1, a2, a3, a4, a5, *(_QWORD *)(a6 + 40), a6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(a6 + 40);
  if (v6 == a6 + 40)
  {
    v7 = 0;
  }
  else
  {
    if (v6)
      v8 = v6 - 24;
    else
      v8 = 0;
    if (*(unsigned __int8 *)(v8 + 16) - 29 >= 0xB)
      v7 = 0;
    else
      v7 = v8;
  }
  return llvm::DIBuilder::insertDeclare(a1, a2, a3, a4, a5, a6, v7);
}

uint64_t llvm::DIBuilder::insertDeclare(uint64_t a1, llvm::ValueAsMetadata *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t v22;
  _WORD v24[20];
  void *v25[2];
  _QWORD v26[10];
  int v27;
  __int16 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34[4];

  v34[3] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 24))
  {
    v14 = *(uint64_t **)a1;
    if (byte_1ED8044C8)
      v15 = 55;
    else
      v15 = 56;
    *(_QWORD *)(a1 + 24) = llvm::Intrinsic::getDeclaration(v14, v15, 0, 0);
  }
  v25[0] = (void *)a3;
  if (a3 && ((*(_BYTE *)(a3 + 1) & 0x7F) == 2 || *(_DWORD *)(a3 + 12)))
    sub_1C622B174(a1 + 344, (unsigned __int8 **)v25);
  v25[0] = (void *)a4;
  if (a4 && ((*(_BYTE *)(a4 + 1) & 0x7F) == 2 || *(_DWORD *)(a4 + 12)))
    sub_1C622B174(a1 + 344, (unsigned __int8 **)v25);
  v16 = *(uint64_t **)(a1 + 8);
  v17 = (unsigned __int8 *)llvm::ValueAsMetadata::get(this, this);
  v34[0] = llvm::MetadataAsValue::get(v16, v17);
  v34[1] = llvm::MetadataAsValue::get(*(uint64_t **)(a1 + 8), (unsigned __int8 *)a3);
  v34[2] = llvm::MetadataAsValue::get(*(uint64_t **)(a1 + 8), (unsigned __int8 *)a4);
  v18 = *(_QWORD *)(a5 + 16);
  v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
  if ((v18 & 4) != 0)
    v19 = (_QWORD *)*v19;
  v25[0] = v26;
  v25[1] = (void *)0x200000000;
  v26[6] = v19;
  v26[7] = &v32;
  v26[8] = &v33;
  v26[9] = 0;
  v27 = 0;
  v28 = 512;
  v29 = 7;
  v26[4] = 0;
  v26[5] = 0;
  v30 = 0;
  v31 = 0;
  v32 = &unk_1E8167888;
  v33 = &unk_1E8167A08;
  sub_1C5393D9C((uint64_t)v25, (unsigned __int8 *)a5, a6, a7);
  v20 = *(_QWORD *)(a1 + 24);
  if (v20)
    v21 = *(uint64_t ***)(v20 + 24);
  else
    v21 = 0;
  v24[16] = 257;
  v22 = sub_1C4774778((uint64_t *)v25, v21, v20, v34, 3, (uint64_t)v24, 0);
  if (v25[0] != v26)
    free(v25[0]);
  return v22;
}

uint64_t llvm::DIBuilder::insertLabel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  _WORD v16[20];
  void *v17[2];
  _QWORD v18[10];
  int v19;
  __int16 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 40))
    *(_QWORD *)(a1 + 40) = llvm::Intrinsic::getDeclaration(*(uint64_t **)a1, 57, 0, 0);
  v17[0] = (void *)a2;
  if (a2 && ((*(_BYTE *)(a2 + 1) & 0x7F) == 2 || *(_DWORD *)(a2 + 12)))
    sub_1C622B174(a1 + 344, (unsigned __int8 **)v17);
  v26[0] = llvm::MetadataAsValue::get(*(uint64_t **)(a1 + 8), (unsigned __int8 *)a2);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (_QWORD *)*v11;
  v17[0] = v18;
  v17[1] = (void *)0x200000000;
  v18[6] = v11;
  v18[7] = &v24;
  v18[8] = &v25;
  v18[9] = 0;
  v19 = 0;
  v20 = 512;
  v21 = 7;
  v18[4] = 0;
  v18[5] = 0;
  v22 = 0;
  v23 = 0;
  v24 = &unk_1E8167888;
  v25 = &unk_1E8167A08;
  sub_1C5393D9C((uint64_t)v17, (unsigned __int8 *)a3, a4, a5);
  v12 = *(_QWORD *)(a1 + 40);
  if (v12)
    v13 = *(uint64_t ***)(v12 + 24);
  else
    v13 = 0;
  v16[16] = 257;
  v14 = sub_1C4774778((uint64_t *)v17, v13, v12, v26, 1, (uint64_t)v16, 0);
  if (v17[0] != v18)
    free(v17[0]);
  return v14;
}

uint64_t llvm::DIBuilder::insertDbgValueIntrinsic(uint64_t a1, llvm::ValueAsMetadata *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  llvm::Value *Declaration;

  Declaration = *(llvm::Value **)(a1 + 32);
  if (!Declaration)
  {
    Declaration = (llvm::Value *)llvm::Intrinsic::getDeclaration(*(uint64_t **)a1, 58, 0, 0);
    *(_QWORD *)(a1 + 32) = Declaration;
  }
  return llvm::DIBuilder::insertDbgIntrinsic(a1, Declaration, a2, a3, a4, a5, a6, a7);
}

uint64_t llvm::DIBuilder::insertDbgIntrinsic(uint64_t a1, llvm::Value *a2, llvm::ValueAsMetadata *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t **v20;
  uint64_t v21;
  _WORD v23[20];
  void *v24[2];
  _QWORD v25[10];
  int v26;
  __int16 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33[4];

  v33[3] = *MEMORY[0x1E0C80C00];
  v24[0] = (void *)a4;
  if (a4 && ((*(_BYTE *)(a4 + 1) & 0x7F) == 2 || *(_DWORD *)(a4 + 12)))
    sub_1C622B174(a1 + 344, (unsigned __int8 **)v24);
  v24[0] = (void *)a5;
  if (a5 && ((*(_BYTE *)(a5 + 1) & 0x7F) == 2 || *(_DWORD *)(a5 + 12)))
    sub_1C622B174(a1 + 344, (unsigned __int8 **)v24);
  v16 = *(uint64_t **)(a1 + 8);
  v17 = (unsigned __int8 *)llvm::ValueAsMetadata::get(this, a2);
  v33[0] = llvm::MetadataAsValue::get(v16, v17);
  v33[1] = llvm::MetadataAsValue::get(*(uint64_t **)(a1 + 8), (unsigned __int8 *)a4);
  v33[2] = llvm::MetadataAsValue::get(*(uint64_t **)(a1 + 8), (unsigned __int8 *)a5);
  v18 = *(_QWORD *)(a6 + 16);
  v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
  if ((v18 & 4) != 0)
    v19 = (_QWORD *)*v19;
  v24[0] = v25;
  v24[1] = (void *)0x200000000;
  v25[6] = v19;
  v25[7] = &v31;
  v25[8] = &v32;
  v25[9] = 0;
  v26 = 0;
  v27 = 512;
  v28 = 7;
  v25[4] = 0;
  v25[5] = 0;
  v29 = 0;
  v30 = 0;
  v31 = &unk_1E8167888;
  v32 = &unk_1E8167A08;
  sub_1C5393D9C((uint64_t)v24, (unsigned __int8 *)a6, a7, a8);
  if (a2)
    v20 = (uint64_t **)*((_QWORD *)a2 + 3);
  else
    v20 = 0;
  v23[16] = 257;
  v21 = sub_1C4774778((uint64_t *)v24, v20, (uint64_t)a2, v33, 3, (uint64_t)v23, 0);
  if (v24[0] != v25)
    free(v24[0]);
  return v21;
}

uint64_t sub_1C622D718(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 **v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int v8;
  unint64_t v10;

  v10 = 0;
  v4 = (unsigned __int8 **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 8, &v10);
  v5 = &v4[*(unsigned int *)(a1 + 8)];
  v6 = *a2;
  *v5 = *a2;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)v5, v6, 2);
  sub_1C622D7B8(a1, v4);
  v7 = v10;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  v8 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v7;
  return (uint64_t)&v4[v8 - 1];
}

uint64_t sub_1C622D7B8(uint64_t result, unsigned __int8 **a2)
{
  uint64_t v2;
  unsigned __int8 **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v9 = result;
    v3 = *(unsigned __int8 ***)result;
    v4 = 8 * v2;
    do
    {
      *a2 = *v3;
      if (*v3)
      {
        result = llvm::MetadataTracking::retrack((uint64_t)v3, *v3, (uint64_t)a2);
        *v3 = 0;
      }
      ++v3;
      ++a2;
      v4 -= 8;
    }
    while (v4);
    v5 = *(unsigned int *)(v9 + 8);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      v7 = *(_QWORD *)v9 - 8;
      do
      {
        result = v7 + v6;
        v8 = *(unsigned __int8 **)(v7 + v6);
        if (v8)
          result = llvm::MetadataTracking::untrack(result, v8);
        v6 -= 8;
      }
      while (v6);
    }
  }
  return result;
}

void sub_1C622D85C(__n128 *a1, char **a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED804448, 0, 0);
  byte_1ED8044C8 = 0;
  qword_1ED8044D0 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED8044D8 = 0;
  qword_1ED804448 = (uint64_t)&unk_1E819E898;
  qword_1ED8044E0 = (uint64_t)&off_1E819E9A0;
  qword_1ED8044E8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED804500 = (uint64_t)&qword_1ED8044E8;
  sub_1C5394B9C(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED804448);
}

void sub_1C622D900(uint64_t a1, unint64_t a2)
{
  unsigned __int8 **v3;
  int v4;
  int v5;
  unint64_t v6;

  v6 = 0;
  v3 = (unsigned __int8 **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 8, &v6);
  sub_1C622D7B8(a1, v3);
  v4 = v6;
  if (*(_QWORD *)a1 != a1 + 16)
  {
    v5 = v6;
    free(*(void **)a1);
    v4 = v5;
  }
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

uint64_t sub_1C622D970@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6144CDC(a1, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_1C622DA08(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD v12[2];
  char v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 != a3)
  {
    v14 = v3;
    v15 = v4;
    v6 = a2;
    v7 = result;
    v8 = (void **)(result + 24);
    do
    {
      v11 = *v6;
      result = sub_1C5394DA4((uint64_t)v12, v7, &v11);
      if (v13)
      {
        v9 = *v6;
        v12[0] = *v6;
        v10 = *(uint64_t **)(v7 + 32);
        if ((unint64_t)v10 >= *(_QWORD *)(v7 + 40))
        {
          result = (uint64_t)sub_1C4DFEA3C(v8, v12);
        }
        else
        {
          *v10 = v9;
          result = (uint64_t)(v10 + 1);
        }
        *(_QWORD *)(v7 + 32) = result;
      }
      ++v6;
    }
    while (v6 != a3);
  }
  return result;
}

uint64_t sub_1C622DAA0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C5394E30(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C5394EC4(a2, a3, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

_QWORD *sub_1C622DB2C(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C614ECAC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C622DBA4(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x100000000;
  }
  return v5;
}

_QWORD *sub_1C622DBA4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53950D4(a1, v6);
  v8 = 0;
  sub_1C614ECAC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

char **sub_1C622DC54(char **result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char **v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = a2;
  v5 = result;
  result[1] = 0;
  v6 = *((unsigned int *)result + 4);
  if ((_DWORD)v6)
  {
    v7 = *result;
    v8 = 32 * v6;
    do
    {
      *(_QWORD *)v7 = -4096;
      v7 += 32;
      v8 -= 32;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v12 = 0;
        sub_1C614ECAC((uint64_t)*v5, *((_DWORD *)v5 + 4), v9, &v12);
        v10 = v12;
        *v12 = *(_QWORD *)v4;
        v10[2] = 0x100000000;
        v10[1] = v10 + 3;
        v11 = (uint64_t)(v10 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_1C539518C(v11, v4 + 8);
        ++*((_DWORD *)v5 + 2);
        result = sub_1C61E02C8((char **)(v4 + 8));
      }
      v4 += 32;
    }
    while (v4 != a3);
  }
  return result;
}

double sub_1C622DD3C(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned __int8 *v8;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = v4 - 8;
    do
    {
      v8 = *(unsigned __int8 **)&v7[v6];
      if (v8)
        llvm::MetadataTracking::untrack((uint64_t)&v7[v6], v8);
      v6 -= 8;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

_QWORD *llvm::DataLayout::getSmallestLegalIntType(llvm::DataLayout *this, llvm::LLVMContext *a2, unsigned int a3)
{
  uint64_t v3;
  unsigned __int8 *i;

  v3 = *((_QWORD *)this + 5);
  if (!v3)
    return 0;
  for (i = (unsigned __int8 *)*((_QWORD *)this + 4); *i < a3; ++i)
  {
    if (!--v3)
      return 0;
  }
  return llvm::Type::getIntNTy(a2, (llvm::LLVMContext *)*i);
}

uint64_t llvm::DebugInfoFinder::addCompileUnit(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;

  if (!a2)
    return 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 400), a2);
  if (!v4)
    return 0;
  v5 = *(unsigned int *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = a2;
  ++*(_DWORD *)(a1 + 8);
  return 1;
}

_QWORD *llvm::DebugInfoFinder::processVariable(_QWORD *this, const llvm::Module *a2, const llvm::DbgVariableIntrinsic *a3)
{
  uint64_t v3;
  llvm::DebugInfoFinder *v4;
  char v5;

  v3 = *(_QWORD *)(((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4] + 24);
  if (v3 && *(_BYTE *)v3 == 25)
  {
    v4 = (llvm::DebugInfoFinder *)this;
    this = sub_1C4774094((llvm::SmallPtrSetImplBase *)(this + 50), *(_QWORD *)(((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4] + 24));
    if (v5)
    {
      llvm::DebugInfoFinder::processScope(v4, *(llvm::DIScope **)(v3 - 8 * *(unsigned int *)(v3 + 8)));
      return (_QWORD *)llvm::DebugInfoFinder::processType(v4, *(_QWORD *)(v3 - 8 * *(unsigned int *)(v3 + 8) + 24));
    }
  }
  return this;
}

llvm::DebugInfoFinder *llvm::DebugInfoFinder::processLocation(llvm::DebugInfoFinder *this, const llvm::Module *a2, const llvm::DILocation *a3)
{
  const llvm::DILocation *v3;
  llvm::DebugInfoFinder *v4;

  if (a3)
  {
    v3 = a3;
    v4 = this;
    do
    {
      this = llvm::DebugInfoFinder::processScope(v4, *((llvm::DIScope **)v3 - *((unsigned int *)v3 + 2)));
      if (*((_DWORD *)v3 + 2) != 2)
        break;
      v3 = (const llvm::DILocation *)*((_QWORD *)v3 - 1);
    }
    while (v3);
  }
  return this;
}

uint64_t llvm::DebugInfoFinder::addType(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;

  if (!a2)
    return 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 400), a2);
  if (!v4)
    return 0;
  v5 = *(unsigned int *)(a1 + 248);
  if (v5 >= *(_DWORD *)(a1 + 252))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 240, a1 + 256, v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(a1 + 248);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * v5) = a2;
  ++*(_DWORD *)(a1 + 248);
  return 1;
}

uint64_t llvm::DebugInfoFinder::addScope(llvm::DebugInfoFinder *this, llvm::DIScope *a2)
{
  char v4;
  uint64_t v5;

  if (!a2)
    return 0;
  if (!*((_DWORD *)a2 + 2))
    return 0;
  sub_1C4774094((llvm::DebugInfoFinder *)((char *)this + 400), (uint64_t)a2);
  if (!v4)
    return 0;
  v5 = *((unsigned int *)this + 82);
  if (v5 >= *((_DWORD *)this + 83))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 320, (uint64_t)this + 336, v5 + 1, 8);
    LODWORD(v5) = *((_DWORD *)this + 82);
  }
  *(_QWORD *)(*((_QWORD *)this + 40) + 8 * v5) = a2;
  ++*((_DWORD *)this + 82);
  return 1;
}

uint64_t llvm::DebugInfoFinder::addSubprogram(llvm::DebugInfoFinder *this, llvm::DISubprogram *a2)
{
  char v4;
  uint64_t v5;

  if (!a2)
    return 0;
  sub_1C4774094((llvm::DebugInfoFinder *)((char *)this + 400), (uint64_t)a2);
  if (!v4)
    return 0;
  v5 = *((unsigned int *)this + 22);
  if (v5 >= *((_DWORD *)this + 23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 80, (uint64_t)this + 96, v5 + 1, 8);
    LODWORD(v5) = *((_DWORD *)this + 22);
  }
  *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v5) = a2;
  ++*((_DWORD *)this + 22);
  return 1;
}

uint64_t sub_1C622E0E8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C539D0CC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v10);
      *v10 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DILocation::encodeDiscriminator(llvm::DILocation *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int *a5)
{
  int v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  char v17;
  unsigned int v21[2];
  unsigned int v22;
  _DWORD v23[3];

  v7 = (int)this;
  v23[0] = (_DWORD)this;
  v23[1] = a2;
  v23[2] = a3;
  v8 = a2 + (unint64_t)this + a3;
  if (v8)
  {
    v10 = 0;
    LODWORD(v9) = 0;
    v11 = v23;
    do
    {
      v13 = *v11++;
      v12 = v13;
      v14 = v13 & 0xFFF;
      v15 = (2 * v13) & 0x1FC0 | v13 & 0x1F | 0x20;
      if (v14 >= 0x20)
        v14 = v15;
      v16 = 2 * v14;
      if (!(_DWORD)v12)
        v16 = 1;
      v9 = (v16 << v10) | v9;
      if (v12 <= 0x1F)
        v17 = 7;
      else
        v17 = 14;
      if (!(_DWORD)v12)
        v17 = 1;
      v10 += v17;
      v8 -= v12;
    }
    while (v8);
  }
  else
  {
    v9 = 0;
  }
  v22 = 0;
  *(_QWORD *)v21 = 0;
  llvm::DILocation::decodeDiscriminator(v9, &v22, &v21[1], v21, a5);
  if (v21[0] == a3 && v21[1] == a2 && v22 == v7)
    return v9 | 0x100000000;
  else
    return 0;
}

uint64_t llvm::DILocation::decodeDiscriminator(uint64_t this, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int v5;
  char v6;
  char v7;
  unsigned int v8;
  int v9;
  char v10;
  char v11;
  unsigned int v12;
  int v13;
  unsigned int v14;

  v5 = (this >> 1) & 0x1F;
  if ((this & 0x40) != 0)
    v6 = 14;
  else
    v6 = 7;
  if ((this & 0x40) != 0)
    v5 = (this >> 2) & 0xFE0 | (this >> 1) & 0x1F;
  if ((this & 1) != 0)
    v7 = 1;
  else
    v7 = v6;
  if ((this & 1) != 0)
    v5 = 0;
  *a2 = v5;
  v8 = this >> v7;
  v9 = (v8 >> 1) & 0x1F;
  if ((v8 & 0x40) != 0)
    v10 = 14;
  else
    v10 = 7;
  if ((v8 & 0x40) != 0)
    v9 = (v8 >> 2) & 0xFE0 | (v8 >> 1) & 0x1F;
  if ((v8 & 1) != 0)
    v11 = 1;
  else
    v11 = v10;
  if ((v8 & 1) != 0)
    v9 = 0;
  *a3 = v9;
  v12 = v8 >> v11;
  v13 = (v12 >> 1) & 0x1F;
  if ((v12 & 0x40) != 0)
    v13 = (v12 >> 2) & 0xFE0 | (v12 >> 1) & 0x1F;
  if ((v12 & 1) != 0)
    v14 = 0;
  else
    v14 = v13;
  *a4 = v14;
  return this;
}

uint64_t llvm::GenericDINode::getTag(llvm::GenericDINode *this)
{
  return *((unsigned __int16 *)this + 1);
}

llvm::MDNode *sub_1C622E32C(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    sub_1C6230264(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

unint64_t llvm::GenericDINode::recalculateHash(llvm::GenericDINode *this)
{
  unint64_t result;

  result = llvm::MDNodeOpsKey::calculateHash(this, (llvm::MDNode *)1);
  *((_DWORD *)this + 1) = result;
  return result;
}

llvm::MDNode *llvm::DISubrange::getImpl(llvm::Type *a1, llvm::LLVMContext *a2, uint64_t a3, int a4, int a5)
{
  llvm::ConstantInt **Int64Ty;
  const llvm::APInt *v11;
  llvm::ValueHandleBase *Signed;
  llvm::Value *v13;
  _QWORD *v14;
  llvm::LLVMContext *v15;
  llvm::ConstantInt **v16;
  const llvm::APInt *v17;
  llvm::ValueHandleBase *v18;
  llvm::Value *v19;
  _QWORD *v20;

  Int64Ty = (llvm::ConstantInt **)llvm::Type::getInt64Ty(a1, a2);
  Signed = llvm::ConstantInt::getSigned(Int64Ty, (uint64_t)a2, v11);
  v14 = llvm::ValueAsMetadata::get(Signed, v13);
  v16 = (llvm::ConstantInt **)llvm::Type::getInt64Ty(a1, v15);
  v18 = llvm::ConstantInt::getSigned(v16, a3, v17);
  v20 = llvm::ValueAsMetadata::get(v18, v19);
  return llvm::DISubrange::getImpl(a1, (uint64_t)v14, (uint64_t)v20, 0, 0, a4, a5);
}

{
  llvm::ConstantInt **Int64Ty;
  const llvm::APInt *v11;
  llvm::ValueHandleBase *Signed;
  llvm::Value *v13;
  _QWORD *v14;

  Int64Ty = (llvm::ConstantInt **)llvm::Type::getInt64Ty(a1, a2);
  Signed = llvm::ConstantInt::getSigned(Int64Ty, a3, v11);
  v14 = llvm::ValueAsMetadata::get(Signed, v13);
  return llvm::DISubrange::getImpl(a1, (uint64_t)a2, (uint64_t)v14, 0, 0, a4, a5);
}

llvm::MDNode *sub_1C622E49C(llvm::MDNode *result, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v4;
  _BYTE v5[31];

  v4 = result;
  if (a2)
  {
    if (a2 == 1)
    {
      v3 = result;
      llvm::MDNode::storeDistinctInContext(result);
      return v3;
    }
  }
  else
  {
    sub_1C6230828(a3, &v4, (uint64_t)v5);
    return v4;
  }
  return result;
}

unint64_t llvm::DISubrange::getLowerBound(llvm::DISubrange *this)
{
  unint64_t v1;
  int v2;

  v1 = ((_QWORD *)this - *((unsigned int *)this + 2))[1];
  if (!v1)
    return 0;
  v2 = *(unsigned __int8 *)v1;
  if (v2 == 1)
    return *(_QWORD *)(v1 + 128) & 0xFFFFFFFFFFFFFFF9;
  if ((v2 & 0xFE) == 0x18)
    return v1 & 0xFFFFFFFFFFFFFFF9 | 2;
  if (v2 == 6)
    return v1 & 0xFFFFFFFFFFFFFFF9 | 4;
  else
    return 0;
}

unint64_t llvm::DISubrange::getUpperBound(llvm::DISubrange *this)
{
  unint64_t v1;
  int v3;

  v1 = ((_QWORD *)this - *((unsigned int *)this + 2))[2];
  if (!v1)
    return 0;
  v3 = *(unsigned __int8 *)v1;
  if (v3 == 1)
    return *(_QWORD *)(v1 + 128) & 0xFFFFFFFFFFFFFFF9;
  if ((v3 & 0xFE) == 0x18)
    return v1 & 0xFFFFFFFFFFFFFFF9 | 2;
  if (v3 != 6)
    return 0;
  return v1 & 0xFFFFFFFFFFFFFFF9 | 4;
}

unint64_t llvm::DISubrange::getStride(llvm::DISubrange *this)
{
  unint64_t v1;
  int v3;

  v1 = ((_QWORD *)this - *((unsigned int *)this + 2))[3];
  if (!v1)
    return 0;
  v3 = *(unsigned __int8 *)v1;
  if (v3 == 1)
    return *(_QWORD *)(v1 + 128) & 0xFFFFFFFFFFFFFFF9;
  if ((v3 & 0xFE) == 0x18)
    return v1 & 0xFFFFFFFFFFFFFFF9 | 2;
  if (v3 != 6)
    return 0;
  return v1 & 0xFFFFFFFFFFFFFFF9 | 4;
}

llvm::MDNode *sub_1C622E60C(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    sub_1C6230B70(a3, &v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

unint64_t llvm::DIGenericSubrange::getCount(llvm::DIGenericSubrange *this)
{
  unint64_t v1;
  int v2;

  v1 = *((_QWORD *)this - *((unsigned int *)this + 2));
  if (!v1)
    return 0;
  v2 = *(unsigned __int8 *)v1;
  if ((v2 & 0xFE) == 0x18)
    return v1 & 0xFFFFFFFFFFFFFFFBLL;
  if (v2 == 6)
    return v1 | 4;
  else
    return 0;
}

unint64_t llvm::DIGenericSubrange::getLowerBound(llvm::DIGenericSubrange *this)
{
  unint64_t v1;
  int v2;

  v1 = ((_QWORD *)this - *((unsigned int *)this + 2))[1];
  if (!v1)
    return 0;
  v2 = *(unsigned __int8 *)v1;
  if ((v2 & 0xFE) == 0x18)
    return v1 & 0xFFFFFFFFFFFFFFFBLL;
  if (v2 == 6)
    return v1 | 4;
  else
    return 0;
}

unint64_t llvm::DIGenericSubrange::getUpperBound(llvm::DIGenericSubrange *this)
{
  unint64_t v1;
  int v2;

  v1 = ((_QWORD *)this - *((unsigned int *)this + 2))[2];
  if (!v1)
    return 0;
  v2 = *(unsigned __int8 *)v1;
  if ((v2 & 0xFE) == 0x18)
    return v1 & 0xFFFFFFFFFFFFFFFBLL;
  if (v2 == 6)
    return v1 | 4;
  else
    return 0;
}

unint64_t llvm::DIGenericSubrange::getStride(llvm::DIGenericSubrange *this)
{
  unint64_t v1;
  int v2;

  v1 = ((_QWORD *)this - *((unsigned int *)this + 2))[3];
  if (!v1)
    return 0;
  v2 = *(unsigned __int8 *)v1;
  if ((v2 & 0xFE) == 0x18)
    return v1 & 0xFFFFFFFFFFFFFFFBLL;
  if (v2 == 6)
    return v1 | 4;
  else
    return 0;
}

uint64_t llvm::DIEnumerator::DIEnumerator(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  llvm::APInt *v11;
  unsigned int v12;

  v10 = llvm::MDNode::MDNode(a1, a2, 10, a3, a6, a7, 0, 0);
  *(_WORD *)(v10 + 2) = 40;
  v11 = (llvm::APInt *)(v10 + 24);
  v12 = *(_DWORD *)(a4 + 8);
  *(_DWORD *)(a1 + 32) = v12;
  if (v12 > 0x40)
    llvm::APInt::initSlowCase(v11, (const void **)a4);
  else
    *(_QWORD *)v11 = *(_QWORD *)a4;
  *(_DWORD *)(a1 + 4) = a5;
  return a1;
}

llvm::MDNode *sub_1C622E7EC(llvm::MDNode *result, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v4;
  _BYTE v5[31];

  v4 = result;
  if (a2)
  {
    if (a2 == 1)
    {
      v3 = result;
      llvm::MDNode::storeDistinctInContext(result);
      return v3;
    }
  }
  else
  {
    sub_1C6230FBC(a3, (uint64_t *)&v4, (uint64_t)v5);
    return v4;
  }
  return result;
}

llvm::MDNode *sub_1C622E848(llvm::MDNode *result, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v4;
  _BYTE v5[31];

  v4 = result;
  if (a2)
  {
    if (a2 == 1)
    {
      v3 = result;
      llvm::MDNode::storeDistinctInContext(result);
      return v3;
    }
  }
  else
  {
    sub_1C6231464(a3, (uint64_t *)&v4, (uint64_t)v5);
    return v4;
  }
  return result;
}

uint64_t llvm::DIBasicType::getSignedness(llvm::DIBasicType *this)
{
  int v1;

  v1 = *((_DWORD *)this + 13) - 5;
  if (v1 > 3)
    return 0;
  else
    return qword_1C85FD870[v1] | 0x100000000;
}

llvm::MDNode *sub_1C622E8D0(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    sub_1C623195C(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

uint64_t llvm::DIDerivedType::getClassType(llvm::DIDerivedType *this)
{
  return ((_QWORD *)this - *((unsigned int *)this + 2))[4];
}

uint64_t llvm::DIDerivedType::getStorageOffsetInBits(llvm::DIDerivedType *this)
{
  uint64_t v1;

  v1 = ((_QWORD *)this - *((unsigned int *)this + 2))[4];
  if (v1)
    return *(_QWORD *)(v1 + 128);
  else
    return 0;
}

uint64_t llvm::DIDerivedType::getDiscriminantValue(llvm::DIDerivedType *this)
{
  uint64_t v1;

  v1 = ((_QWORD *)this - *((unsigned int *)this + 2))[4];
  if (v1)
    return *(_QWORD *)(v1 + 128);
  else
    return 0;
}

const char *llvm::DIFile::getChecksumKindAsString(int a1)
{
  const char *v1;

  v1 = off_1E814E368[a1 - 1];
  strlen(v1);
  return v1;
}

const char *llvm::DICompileUnit::nameTableKindString(int a1)
{
  const char *v1;

  v1 = "GNU";
  if (a1 != 1)
    v1 = 0;
  if (a1 == 2)
    return "None";
  else
    return v1;
}

uint64_t llvm::DISubprogram::toSPFlags(llvm::DISubprogram *this, int a2, int a3, char a4, int a5)
{
  int v5;
  int v6;
  int v7;
  int v8;

  if ((_DWORD)this)
    v5 = 4;
  else
    v5 = 0;
  if (a2)
    v6 = 8;
  else
    v6 = 0;
  if (a3)
    v7 = 16;
  else
    v7 = 0;
  if (a5)
    v8 = 256;
  else
    v8 = 0;
  return (v6 | v5 | v7) & 0xFFFFFFFC | a4 & 3 | v8;
}

llvm::MDNode *sub_1C622EA20(llvm::MDNode *result, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v4;
  _BYTE v5[31];

  v4 = result;
  if (a2)
  {
    if (a2 == 1)
    {
      v3 = result;
      llvm::MDNode::storeDistinctInContext(result);
      return v3;
    }
  }
  else
  {
    sub_1C6232670(a3, (uint64_t *)&v4, (uint64_t)v5);
    return v4;
  }
  return result;
}

llvm::MDNode *sub_1C622EA7C(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    sub_1C6232A0C(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *sub_1C622EADC(llvm::MDNode *result, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v4;
  _BYTE v5[31];

  v4 = result;
  if (a2)
  {
    if (a2 == 1)
    {
      v3 = result;
      llvm::MDNode::storeDistinctInContext(result);
      return v3;
    }
  }
  else
  {
    sub_1C6232E98(a3, (uint64_t *)&v4, (uint64_t)v5);
    return v4;
  }
  return result;
}

llvm::MDNode *sub_1C622EB38(llvm::MDNode *result, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v4;
  _BYTE v5[31];

  v4 = result;
  if (a2)
  {
    if (a2 == 1)
    {
      v3 = result;
      llvm::MDNode::storeDistinctInContext(result);
      return v3;
    }
  }
  else
  {
    sub_1C62331F8(a3, (uint64_t *)&v4, (uint64_t)v5);
    return v4;
  }
  return result;
}

llvm::MDNode *sub_1C622EB94(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    sub_1C6233A48(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *sub_1C622EBF4(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    sub_1C6233E28(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *sub_1C622EC54(llvm::MDNode *result, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v4;
  _BYTE v5[31];

  v4 = result;
  if (a2)
  {
    if (a2 == 1)
    {
      v3 = result;
      llvm::MDNode::storeDistinctInContext(result);
      return v3;
    }
  }
  else
  {
    sub_1C62340FC(a3, &v4, (uint64_t)v5);
    return v4;
  }
  return result;
}

BOOL llvm::DIExpression::startsWithDeref(llvm::DIExpression *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)*((_QWORD *)this + 3);
  return ((*((_QWORD *)this + 4) - (_QWORD)v1) & 0x7FFFFFFF8) != 0 && *v1 == 6;
}

BOOL llvm::DIExpression::isImplicit(llvm::DIExpression *this)
{
  _BOOL8 result;
  uint64_t *v3;
  uint64_t *v4;
  char *v5;
  uint64_t *v6;
  uint64_t *v8;

  result = llvm::DIExpression::isValid(this);
  if (result)
  {
    v5 = (char *)this + 24;
    v4 = (uint64_t *)*((_QWORD *)this + 3);
    v3 = (uint64_t *)*((_QWORD *)v5 + 1);
    if ((((char *)v3 - (char *)v4) & 0x7FFFFFFF8) == 0)
      return 0;
    v8 = v4;
    if (v3 == v4)
    {
      return 0;
    }
    else
    {
      v6 = v3;
      while (*v4 != 159 && *v4 != 4098)
      {
        v4 += llvm::DIExpression::ExprOperand::getSize(&v8);
        v8 = v4;
        if (v4 == v6)
          return 0;
      }
      return 1;
    }
  }
  return result;
}

uint64_t llvm::DIExpression::appendOffset(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a2 < 1)
  {
    if ((a2 & 0x8000000000000000) == 0)
      return result;
    v5 = result;
    v6 = a2;
    v7 = *(unsigned int *)(result + 8);
    if (v7 >= *(_DWORD *)(result + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v7 + 1, 8);
      LODWORD(v7) = *(_DWORD *)(v5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v5 + 8 * v7) = 16;
    v8 = *(_DWORD *)(v5 + 12);
    v9 = (*(_DWORD *)(v5 + 8) + 1);
    *(_DWORD *)(v5 + 8) = v9;
    if (v9 >= v8)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v5 + 16, v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(v5 + 8);
    }
    result = v5;
    *(_QWORD *)(*(_QWORD *)v5 + 8 * v9) = -v6;
    v3 = *(_DWORD *)(v5 + 12);
    v4 = *(_DWORD *)(v5 + 8) + 1;
    *(_DWORD *)(v5 + 8) = v4;
    a2 = 28;
  }
  else
  {
    v2 = *(unsigned int *)(result + 8);
    if (v2 >= *(_DWORD *)(result + 12))
    {
      v12 = result;
      v10 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v2 + 1, 8);
      a2 = v10;
      result = v12;
      LODWORD(v2) = *(_DWORD *)(v12 + 8);
    }
    *(_QWORD *)(*(_QWORD *)result + 8 * v2) = 35;
    v3 = *(_DWORD *)(result + 12);
    v4 = *(_DWORD *)(result + 8) + 1;
    *(_DWORD *)(result + 8) = v4;
  }
  if (v4 >= v3)
  {
    v13 = result;
    v11 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v4 + 1, 8);
    a2 = v11;
    result = v13;
    v4 = *(_DWORD *)(v13 + 8);
  }
  *(_QWORD *)(*(_QWORD *)result + 8 * v4) = a2;
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t llvm::DIExpression::extractIfOffset(llvm::DIExpression *this, uint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*((_QWORD *)this + 3);
  v3 = *((_QWORD *)this + 4) - (_QWORD)v2;
  if ((v3 >> 3))
  {
    if ((v3 >> 3) != 2 || *v2 != 35)
    {
      if ((v3 & 0x7FFFFFFF8) != 0x18 || *v2 != 16)
        return 0;
      v5 = v2[2];
      if (v5 == 28)
      {
        v4 = -v2[1];
        goto LABEL_11;
      }
      if (v5 != 34)
        return 0;
    }
    v4 = v2[1];
  }
  else
  {
    v4 = (v3 >> 3);
  }
LABEL_11:
  *a2 = v4;
  return 1;
}

llvm::MDNode *llvm::DIExpression::extractAddressClass(llvm::MDNode *this, const llvm::DIExpression *a2, unsigned int *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = (_QWORD *)*((_QWORD *)this + 3);
  v5 = *((_QWORD *)this + 4) - (_QWORD)v4;
  if ((unint64_t)v5 >= 0x19 && *v4 == 16 && v4[2] == 22 && v4[3] == 24)
  {
    *(_DWORD *)a2 = v4[1];
    if (v5 == 32)
    {
      return 0;
    }
    else
    {
      v6 = *((_QWORD *)this + 2);
      v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 4) != 0)
        v7 = (_QWORD *)*v7;
      return llvm::DIExpression::getImpl(v7, v4, (v5 >> 3) - 4, 0, 1);
    }
  }
  return this;
}

llvm::MDNode *llvm::DIExpression::prepend(llvm::DIExpression *this, const llvm::DIExpression *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v5;
  llvm::MDNode *v6;
  void *v8;
  uint64_t v9;
  _QWORD v10[9];

  v3 = a2;
  v10[8] = *MEMORY[0x1E0C80C00];
  v8 = v10;
  v9 = 0x800000000;
  if ((a2 & 1) != 0)
  {
    v10[0] = 6;
    LODWORD(v9) = 1;
  }
  llvm::DIExpression::appendOffset((uint64_t)&v8, a3);
  if ((v3 & 2) != 0)
  {
    v5 = v9;
    if (v9 >= HIDWORD(v9))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v8, (uint64_t)v10, v9 + 1, 8);
      v5 = v9;
    }
    *((_QWORD *)v8 + v5) = 6;
    LODWORD(v9) = v9 + 1;
  }
  v6 = llvm::DIExpression::prependOpcodes(this, (unsigned int *)&v8, (v3 & 4) != 0, (v3 >> 3) & 1);
  if (v8 != v10)
    free(v8);
  return v6;
}

llvm::MDNode *llvm::DIExpression::appendOpsToArg(_QWORD *a1, uint64_t *a2, uint64_t a3, int a4, char a5)
{
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v12;
  llvm::MDNode *Impl;
  void *v14;
  int Size;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[9];

  v23[8] = *MEMORY[0x1E0C80C00];
  v9 = (_QWORD *)a1[3];
  v10 = (_QWORD *)a1[4];
  v21 = v9;
  if (v10 == v9)
  {
LABEL_5:
    v21 = v23;
    v22 = 0x800000000;
    sub_1C4DFE610((unsigned int *)&v21, a2, &a2[a3]);
    Impl = llvm::DIExpression::prependOpcodes(a1, (unsigned int *)&v21, a5, 0);
    v14 = v21;
    if (v21 != v23)
LABEL_15:
      free(v14);
  }
  else
  {
    v12 = v9;
    while (*v12 != 4101)
    {
      v12 += llvm::DIExpression::ExprOperand::getSize((uint64_t **)&v21);
      v21 = v12;
      if (v12 == v10)
        goto LABEL_5;
    }
    v20 = v9;
    v21 = v23;
    v22 = 0x800000000;
    do
    {
      v19 = v9;
      Size = llvm::DIExpression::ExprOperand::getSize(&v19);
      sub_1C4DFE610((unsigned int *)&v21, v9, &v9[Size]);
      if (*v9 == 4101 && v9[1] == a4)
        sub_1C622F29C((unsigned int *)&v21, (uint64_t)v21 + 8 * v22, a2, &a2[a3]);
      v9 += llvm::DIExpression::ExprOperand::getSize(&v20);
      v20 = v9;
    }
    while (v9 != v10);
    v17 = a1[2];
    v18 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
    if ((v17 & 4) != 0)
      v18 = (_QWORD *)*v18;
    Impl = llvm::DIExpression::getImpl(v18, v21, v22, 0, 1);
    v14 = v21;
    if (v21 != v23)
      goto LABEL_15;
  }
  return Impl;
}

_BYTE *sub_1C622F29C(unsigned int *a1, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;

  v5 = __src;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = a1[2];
  if (*(_QWORD *)a1 + 8 * v9 == a2)
  {
    sub_1C4DFE610(a1, __src, a4);
    return (_BYTE *)(*(_QWORD *)a1 + 8 * v8);
  }
  else
  {
    v10 = (char *)a4 - (char *)__src;
    v11 = a4 - __src;
    if (v9 + v11 > a1[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v9 + v11, 8);
      v7 = *(_QWORD *)a1;
      v9 = a1[2];
    }
    v12 = (_BYTE *)(v7 + 8 * v8);
    v13 = (_BYTE *)(v7 + 8 * v9);
    v14 = (v13 - v12) >> 3;
    if (v14 >= v11)
    {
      sub_1C6177054(a1, &v13[-8 * v11], (char *)(v7 + 8 * v9));
      if (&v13[-8 * v11] != v12)
        memmove(&v12[8 * v11], v12, &v13[-8 * v11] - v12);
      if (v5 != a4)
        memmove(v12, v5, (char *)a4 - (char *)v5);
    }
    else
    {
      v15 = v9 + (v10 >> 3);
      a1[2] = v15;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * v15 - 8 * v14), v12, v13 - v12);
        v16 = v12;
        do
        {
          v17 = *v5++;
          *v16++ = v17;
          --v14;
        }
        while (v14);
      }
      if (v5 != a4)
        memcpy(v13, v5, (char *)a4 - (char *)v5);
    }
  }
  return v12;
}

llvm::MDNode *llvm::DIExpression::replaceArg(llvm::DIExpression *this, const llvm::DIExpression *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int Size;
  uint64_t v12;
  _QWORD *v13;
  llvm::MDNode *Impl;
  uint64_t *v16;
  uint64_t *v17;
  void *i;
  uint64_t v19;
  _QWORD v20[9];

  v20[8] = *MEMORY[0x1E0C80C00];
  v19 = 0x800000000;
  v4 = (uint64_t *)*((_QWORD *)this + 3);
  v5 = (uint64_t *)*((_QWORD *)this + 4);
  v17 = v4;
  for (i = v20; v4 != v5; v17 = v4)
  {
    v16 = v4;
    if (*v4 == 4101 && v4[1] >= (unint64_t)a2)
    {
      v8 = v19;
      if (v19 >= (unint64_t)HIDWORD(v19))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&i, (uint64_t)v20, v19 + 1, 8);
        v8 = v19;
      }
      *((_QWORD *)i + v8) = 4101;
      v9 = (v19 + 1);
      LODWORD(v19) = v19 + 1;
      if ((const llvm::DIExpression *)v4[1] == a2)
        v10 = a3;
      else
        v10 = v4[1];
      if (v9 >= HIDWORD(v19))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&i, (uint64_t)v20, v9 + 1, 8);
        LODWORD(v9) = v19;
      }
      *((_QWORD *)i + v9) = (__PAIR128__(v10, (unint64_t)a2) - (unint64_t)v10) >> 64;
      LODWORD(v19) = v19 + 1;
    }
    else
    {
      Size = llvm::DIExpression::ExprOperand::getSize(&v16);
      sub_1C4DFE610((unsigned int *)&i, v4, &v4[Size]);
    }
    v4 += llvm::DIExpression::ExprOperand::getSize(&v17);
  }
  v12 = *((_QWORD *)this + 2);
  v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 4) != 0)
    v13 = (_QWORD *)*v13;
  Impl = llvm::DIExpression::getImpl(v13, i, v19, 0, 1);
  if (i != v20)
    free(i);
  return Impl;
}

llvm::MDNode *llvm::DIExpression::append(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  int Size;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  llvm::MDNode *Impl;
  uint64_t *v14;
  uint64_t *v15;
  void *i;
  uint64_t v17;
  _QWORD v18[17];

  v18[16] = *MEMORY[0x1E0C80C00];
  v17 = 0x1000000000;
  v6 = (uint64_t *)a1[3];
  v7 = (uint64_t *)a1[4];
  v15 = v6;
  for (i = v18; v6 != v7; v15 = v6)
  {
    v14 = v6;
    if (*v6 == 4096 || *v6 == 159)
    {
      sub_1C4DFE610((unsigned int *)&i, a2, &a2[8 * a3]);
      a2 = 0;
      a3 = 0;
      v6 = v14;
    }
    Size = llvm::DIExpression::ExprOperand::getSize(&v14);
    sub_1C4DFE610((unsigned int *)&i, v6, &v6[Size]);
    v9 = v15;
    v6 = &v9[llvm::DIExpression::ExprOperand::getSize(&v15)];
  }
  sub_1C4DFE610((unsigned int *)&i, a2, &a2[8 * a3]);
  v10 = a1[2];
  v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (_QWORD *)*v11;
  Impl = llvm::DIExpression::getImpl(v11, i, v17, 0, 1);
  if (i != v18)
    free(i);
  return Impl;
}

llvm::MDNode *llvm::DIExpression::appendToStack(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned int v14;
  llvm::MDNode *v15;
  void *v17;
  uint64_t v18;
  _QWORD v19[17];

  v19[16] = *MEMORY[0x1E0C80C00];
  v6 = (char *)a1[3];
  v7 = (char *)a1[4];
  v17 = v6;
  v8 = v7 - v6;
  if (v7 == v6)
  {
LABEL_2:
    v9 = 0;
  }
  else
  {
    v13 = v6;
    while (*(_QWORD *)v13 != 4096)
    {
      v13 += 8 * llvm::DIExpression::ExprOperand::getSize((uint64_t **)&v17);
      v17 = v13;
      if (v13 == v7)
        goto LABEL_2;
    }
    v9 = 3;
  }
  v10 = v8 >> 3;
  v11 = v9;
  if (v9 >= ((unint64_t)v8 >> 3))
  {
    v17 = v19;
    v18 = 0x1000000000;
LABEL_11:
    sub_1C4DFE610((unsigned int *)&v17, a2, &a2[8 * a3]);
    if (v10 != v11)
      goto LABEL_15;
    goto LABEL_12;
  }
  v12 = *(_QWORD *)&v6[8 * v10 + 8 * ~(unint64_t)v9];
  v17 = v19;
  v18 = 0x1000000000;
  if (v12 == 159)
    goto LABEL_11;
  v19[0] = 6;
  LODWORD(v18) = 1;
  sub_1C4DFE610((unsigned int *)&v17, a2, &a2[8 * a3]);
LABEL_12:
  v14 = v18;
  if (v18 >= HIDWORD(v18))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, (uint64_t)v19, v18 + 1, 8);
    v14 = v18;
  }
  *((_QWORD *)v17 + v14) = 159;
  LODWORD(v18) = v18 + 1;
LABEL_15:
  v15 = llvm::DIExpression::append(a1, v17, v18);
  if (v17 != v19)
    free(v17);
  return v15;
}

llvm::MDNode *llvm::DIExpression::createFragmentExpression(llvm::DIExpression *this, const llvm::DIExpression *a2, unsigned int a3)
{
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  unsigned int Size;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  llvm::MDNode *Impl;
  uint64_t *v21;
  uint64_t *v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[9];

  v4 = a2;
  v25[8] = *MEMORY[0x1E0C80C00];
  v23 = v25;
  v24 = 0x800000000;
  if (!this || (v6 = *((_QWORD *)this + 3), v7 = *((_QWORD *)this + 4), v22 = (uint64_t *)v6, v7 == v6))
  {
    v13 = 0;
  }
  else
  {
    do
    {
      v21 = (uint64_t *)v6;
      v8 = *(_QWORD *)v6;
      if (*(_QWORD *)v6 == 4096)
      {
        v4 += *(_DWORD *)(v6 + 8);
      }
      else
      {
        v9 = v8 > 0x26;
        v10 = (1 << v8) & 0x7C10000000;
        if (!v9 && v10 != 0)
        {
          Impl = 0;
          goto LABEL_21;
        }
        Size = llvm::DIExpression::ExprOperand::getSize(&v21);
        sub_1C4DFE610((unsigned int *)&v23, (_BYTE *)v6, (_BYTE *)(v6 + 8 * Size));
      }
      v6 += 8 * llvm::DIExpression::ExprOperand::getSize(&v22);
      v22 = (uint64_t *)v6;
    }
    while (v6 != v7);
    v13 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, (uint64_t)v25, v24 + 1, 8);
      v13 = v24;
    }
  }
  *((_QWORD *)v23 + v13) = 4096;
  v14 = (v24 + 1);
  LODWORD(v24) = v14;
  if (v14 >= HIDWORD(v24))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, (uint64_t)v25, v14 + 1, 8);
    LODWORD(v14) = v24;
  }
  *((_QWORD *)v23 + v14) = v4;
  v15 = (v24 + 1);
  LODWORD(v24) = v15;
  if (v15 >= HIDWORD(v24))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, (uint64_t)v25, v15 + 1, 8);
    LODWORD(v15) = v24;
  }
  *((_QWORD *)v23 + v15) = a3;
  v16 = (v24 + 1);
  LODWORD(v24) = v24 + 1;
  v17 = *((_QWORD *)this + 2);
  v18 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
  if ((v17 & 4) != 0)
    v18 = (_QWORD *)*v18;
  Impl = llvm::DIExpression::getImpl(v18, v23, v16, 0, 1);
LABEL_21:
  if (v23 != v25)
    free(v23);
  return Impl;
}

uint64_t llvm::DIExpression::isConstant(llvm::DIExpression *this)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v7;
  uint64_t v8;

  v1 = (uint64_t *)*((_QWORD *)this + 3);
  v2 = *((_QWORD *)this + 4) - (_QWORD)v1;
  if ((v2 >> 3) <= 6 && ((1 << (v2 >> 3)) & 0x4C) != 0)
  {
    v7 = *v1;
    if ((*v1 & 0xFFFFFFFFFFFFFFFELL) == 0x10)
    {
      v8 = v2 & 0x7FFFFFFF8;
      if (v8 == 48)
      {
        if (v1[2] == 159 && v1[3] == 4096)
          goto LABEL_15;
      }
      else
      {
        if (v8 != 24)
        {
          if (v8 == 16 && v7 == 17)
          {
            v5 = 0;
            goto LABEL_16;
          }
LABEL_15:
          v5 = v7 == 16;
LABEL_16:
          v4 = 0x100000000;
          return v5 | v4;
        }
        if (v1[2] == 159)
          goto LABEL_15;
      }
    }
  }
  v4 = 0;
  v5 = 0;
  return v5 | v4;
}

uint64_t llvm::DIExpression::getExtOps@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v4;

  *a4 = 4097;
  a4[1] = this;
  v4 = 7;
  if (a3)
    v4 = 5;
  a4[2] = v4;
  a4[3] = 4097;
  a4[4] = a2;
  a4[5] = v4;
  return this;
}

llvm::MDNode *llvm::DIExpression::appendExt(llvm::DIExpression *this, const llvm::DIExpression *a2, unsigned int a3, int a4)
{
  uint64_t v4;
  _QWORD v6[6];

  v6[0] = 4097;
  v6[1] = a2;
  v4 = 7;
  if (a4)
    v4 = 5;
  v6[2] = v4;
  v6[3] = 4097;
  v6[4] = a3;
  v6[5] = v4;
  return llvm::DIExpression::appendToStack(this, v6, 6);
}

llvm::MDNode *sub_1C622FBE0(llvm::MDNode *result, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v4;
  _BYTE v5[31];

  v4 = result;
  if (a2)
  {
    if (a2 == 1)
    {
      v3 = result;
      llvm::MDNode::storeDistinctInContext(result);
      return v3;
    }
  }
  else
  {
    sub_1C6234488(a3, &v4, (uint64_t)v5);
    return v4;
  }
  return result;
}

unsigned int *sub_1C622FC3C(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  unsigned int *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = (unsigned int *)this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    sub_1C6234ACC(a3, &v5, (uint64_t)v6);
    return v5;
  }
  return (unsigned int *)v3;
}

llvm::MDNode *sub_1C622FC9C(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    sub_1C623515C(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *sub_1C622FCFC(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    sub_1C6235430(a3, &v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

void llvm::DIArgList::handleChangedOperand(unint64_t this, unsigned __int8 *a2, llvm::Metadata *a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  llvm::Metadata *v13;
  llvm::ValueAsMetadata *v14;
  llvm::Value *v15;
  uint64_t v16;
  unsigned __int8 **v17;
  unint64_t v18;
  uint64_t v19;
  llvm::DIArgList *v20;

  v4 = a2;
  v6 = *(unsigned int *)(this + 32);
  if ((_DWORD)v6)
  {
    v7 = *(void ***)(this + 24);
    v8 = 8 * v6;
    do
    {
      a2 = (unsigned __int8 *)*v7;
      if (*v7)
        llvm::MetadataTracking::untrack((uint64_t)v7, a2);
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v9 = *(_BYTE *)(this + 1) & 0x7F;
  if ((*(_BYTE *)(this + 1) & 0x7F) == 0)
    llvm::MDNode::eraseFromStore((unsigned __int8 *)this);
  v10 = *(unsigned int *)(this + 32);
  if ((_DWORD)v10)
  {
    v11 = *(unsigned __int8 **)(this + 24);
    v12 = 8 * v10;
    do
    {
      if (v11 == v4)
      {
        v13 = a3;
        if (!a3)
        {
          v14 = (llvm::ValueAsMetadata *)llvm::UndefValue::get(**(llvm::UndefValue ***)(*(_QWORD *)v4 + 128), (llvm::Type *)a2);
          v13 = (llvm::Metadata *)llvm::ValueAsMetadata::get(v14, v15);
        }
        *(_QWORD *)v4 = v13;
      }
      v11 += 8;
      v12 -= 8;
    }
    while (v12);
  }
  if (!v9)
  {
    llvm::MDNode::uniquify((llvm::MDNode *)this);
    if (v20 != (llvm::DIArgList *)this)
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)this);
  }
  v16 = *(unsigned int *)(this + 32);
  if ((_DWORD)v16)
  {
    v17 = *(unsigned __int8 ***)(this + 24);
    v18 = this | 2;
    v19 = 8 * v16;
    do
    {
      if (*v17)
        llvm::MetadataTracking::track((uint64_t)v17, *v17, v18);
      ++v17;
      v19 -= 8;
    }
    while (v19);
  }
}

uint64_t llvm::DIArgList::untrack(uint64_t this)
{
  uint64_t v1;
  unsigned __int8 **v2;
  uint64_t v3;

  v1 = *(unsigned int *)(this + 32);
  if ((_DWORD)v1)
  {
    v2 = *(unsigned __int8 ***)(this + 24);
    v3 = 8 * v1;
    do
    {
      if (*v2)
        this = llvm::MetadataTracking::untrack((uint64_t)v2, *v2);
      ++v2;
      v3 -= 8;
    }
    while (v3);
  }
  return this;
}

uint64_t llvm::DIArgList::dropAllReferences(llvm::DIArgList *this)
{
  uint64_t v2;
  unsigned __int8 **v3;
  uint64_t v4;

  v2 = *((unsigned int *)this + 8);
  if ((_DWORD)v2)
  {
    v3 = (unsigned __int8 **)*((_QWORD *)this + 3);
    v4 = 8 * v2;
    do
    {
      if (*v3)
        llvm::MetadataTracking::untrack((uint64_t)v3, *v3);
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  *((_DWORD *)this + 8) = 0;
  return llvm::MDNode::dropAllReferences((uint64_t)this);
}

uint64_t sub_1C622FF0C(uint64_t this, uint64_t a2, char a3, _BYTE *__src, uint64_t a5)
{
  uint64_t v8;
  unsigned __int8 **v9;
  uint64_t v10;

  *(_BYTE *)this = 32;
  *(_QWORD *)(this + 2) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = a2;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  if ((a3 & 0x7F) == 0)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_QWORD *)(this + 24) = this + 40;
  *(_QWORD *)(this + 32) = 0x400000000;
  sub_1C618A450((unsigned int *)(this + 24), __src, &__src[8 * a5]);
  v8 = *(unsigned int *)(this + 32);
  if ((_DWORD)v8)
  {
    v9 = *(unsigned __int8 ***)(this + 24);
    v10 = 8 * v8;
    do
    {
      if (*v9)
        llvm::MetadataTracking::track((uint64_t)v9, *v9, this | 2);
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  return this;
}

uint64_t sub_1C622FFBC(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t *v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;
  int v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v8 = *a1;
    v16 = *(_DWORD *)(a2 + 32);
    v9 = v4 - 1;
    v10 = (v4 - 1) & sub_1C62300F8(&v16, (int *)(a2 + 36), (uint64_t *)(a2 + 40));
    v5 = (uint64_t *)(v8 + 8 * v10);
    if (sub_1C62300B4(a2, *v5))
    {
      result = 1;
    }
    else
    {
      v11 = 0;
      v12 = 1;
      while (*v5 != -4096)
      {
        if (v11)
          v13 = 0;
        else
          v13 = *v5 == -8192;
        if (v13)
          v11 = v5;
        v14 = v12 + 1;
        v10 = (v10 + v12) & v9;
        v5 = (uint64_t *)(v8 + 8 * v10);
        v15 = sub_1C62300B4(a2, *v5);
        result = 1;
        v12 = v14;
        if (v15)
          goto LABEL_3;
      }
      result = 0;
      if (v11)
        v5 = v11;
    }
  }
  else
  {
    v5 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v5;
  return result;
}

BOOL sub_1C62300B4(uint64_t a1, uint64_t a2)
{
  return (a2 | 0x1000) != 0xFFFFFFFFFFFFF000
      && *(_DWORD *)(a1 + 36) == *(unsigned __int16 *)(a2 + 2)
      && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8))
      && sub_1C62301AC(a1, a2, 1u);
}

unint64_t sub_1C62300F8(_DWORD *a1, int *a2, uint64_t *a3)
{
  _OWORD v7[4];
  _OWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  v10 = sub_1C4D9B584();
  LODWORD(v7[0]) = *a1;
  return sub_1C50FDABC((char *)v7, 0, (_DWORD *)v7 + 1, (char *)v8, a2, a3);
}

BOOL sub_1C62301AC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 result;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;

  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 4))
    return 0;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(unsigned int *)(a2 + 8);
    if (v3 == (_DWORD)v4 - a3)
    {
      v5 = *(uint64_t **)a1;
      v6 = (uint64_t *)(a2 - 8 * v4 + 8 * a3);
      v7 = 8 * v3 - 8;
      do
      {
        v9 = *v5++;
        v8 = v9;
        v10 = *v6++;
        result = v8 == v10;
        v12 = v8 != v10 || v7 == 0;
        v7 -= 8;
      }
      while (!v12);
      return result;
    }
    return 0;
  }
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(unsigned int *)(a2 + 8);
  if (v13 != (_DWORD)v14 - a3)
    return 0;
  if (!v13)
    return 1;
  v15 = *(uint64_t **)(a1 + 16);
  v16 = (uint64_t *)(a2 - 8 * v14 + 8 * a3);
  v17 = 8 * v13 - 8;
  do
  {
    v19 = *v15++;
    v18 = v19;
    v20 = *v16++;
    result = v18 == v20;
    v21 = v18 != v20 || v17 == 0;
    v17 -= 8;
  }
  while (!v21);
  return result;
}

uint64_t sub_1C6230264@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C62302E8((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C62303A8(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C62302E8(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = sub_1C53A7ECC(*a2);
    v8 = v4 - 1;
    v9 = v7 & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_4;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v10;
  return result;
}

_QWORD *sub_1C62303A8(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53A7F24(a1, v7);
  v9 = 0;
  sub_1C62302E8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C6230454(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C62302E8((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C6230500(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t result;
  BOOL v15;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = sub_1C62305D8(a2);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = v7 & v9;
      v12 = (uint64_t *)(v6 + 8 * (v7 & v9));
      v13 = *v12;
      if (*v12 != -4096 && v13 != -8192)
      {
        if (sub_1C62306EC((_BYTE **)a2, v13))
        {
          result = 1;
          goto LABEL_7;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v15 = 0;
      else
        v15 = v13 == -8192;
      if (v15)
        v8 = (uint64_t *)(v6 + 8 * v11);
      v7 = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v12;
  return result;
}

unint64_t sub_1C62305D8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;

  v1 = *a1;
  if (!*a1 || *(_BYTE *)v1 != 1)
    return sub_1C53A7FDC(a1, a1 + 1, a1 + 2, a1 + 3);
  v2 = *(_QWORD *)(v1 + 128);
  v3 = *(_DWORD *)(v2 + 32);
  if (v3 > 0x40)
    v4 = **(_QWORD **)(v2 + 24);
  else
    v4 = (uint64_t)(*(_QWORD *)(v2 + 24) << -(char)v3) >> -(char)v3;
  v6 = v4;
  return sub_1C53A7FDC(&v6, a1 + 1, a1 + 2, a1 + 3);
}

unint64_t sub_1C623065C(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;

  v16 = a2;
  v13 = sub_1C50FDB34(a1, &v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = sub_1C50FDB34(a1, &v17, v13, (unint64_t)a4, *a6);
  return sub_1C517D0A0(a1, v17, v14, a4, a7, a8);
}

BOOL sub_1C62306EC(_BYTE **a1, uint64_t a2)
{
  _BOOL8 result;
  char v5;

  result = sub_1C6230784((uint64_t)&v5, *a1, *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8)));
  if (result)
  {
    result = sub_1C6230784((uint64_t)&v5, a1[1], *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8));
    if (result)
    {
      result = sub_1C6230784((uint64_t)&v5, a1[2], *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16));
      if (result)
        return sub_1C6230784((uint64_t)&v5, a1[3], *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24));
    }
  }
  return result;
}

BOOL sub_1C6230784(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _BOOL8 result;

  result = 1;
  if (a2 != (_BYTE *)a3)
  {
    if (a2)
      v3 = *a2 == 1 ? a2 : 0;
    else
      v3 = 0;
    if (!a3 || !v3 || *(_BYTE *)a3 != 1)
      return 0;
    v4 = *((_QWORD *)v3 + 16);
    v5 = *(_QWORD *)(a3 + 128);
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 > 0x40 ? **(_QWORD **)(v4 + 24) : (uint64_t)(*(_QWORD *)(v4 + 24) << -(char)v6) >> -(char)v6;
    v8 = *(_DWORD *)(v5 + 32);
    v9 = v8 > 0x40 ? **(_QWORD **)(v5 + 24) : (uint64_t)(*(_QWORD *)(v5 + 24) << -(char)v8) >> -(char)v8;
    if (v7 != v9)
      return 0;
  }
  return result;
}

uint64_t sub_1C6230828@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C62308AC((uint64_t *)a1, (uint64_t)a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6230990(a1, (uint64_t)a2, (uint64_t)a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C62308AC(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  _OWORD *v7;
  int v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t result;
  BOOL v16;
  unsigned int v17;
  _OWORD v18[2];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = (_OWORD *)(*(_QWORD *)a2 - 8 * *(unsigned int *)(*(_QWORD *)a2 + 8));
    v18[0] = *v7;
    v18[1] = v7[1];
    v8 = sub_1C62305D8((uint64_t *)v18);
    v9 = v4 - 1;
    v10 = v8 & (v4 - 1);
    v11 = (_QWORD *)(v6 + 8 * v10);
    v12 = *v11;
    if (*(_QWORD *)a2 == *v11)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v12 != -4096)
      {
        if (v13)
          v16 = 0;
        else
          v16 = v12 == -8192;
        if (v16)
          v13 = v11;
        v17 = v10 + v14++;
        v10 = v17 & v9;
        v11 = (_QWORD *)(v6 + 8 * (v17 & v9));
        v12 = *v11;
        if (*(_QWORD *)a2 == *v11)
          goto LABEL_7;
      }
      result = 0;
      if (v13)
        v11 = v13;
    }
  }
  else
  {
    v11 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v11;
  return result;
}

_QWORD *sub_1C6230990(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C53A8094(a1, v7);
  v9 = 0;
  sub_1C62308AC((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C6230A40(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C62308AC((uint64_t *)v5, (uint64_t)a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

unint64_t sub_1C6230AEC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;

  v1 = *a1;
  if (!*a1 || *(_BYTE *)v1 != 1)
    return sub_1C53A7FDC(a1, a1 + 1, a1 + 2, a1 + 3);
  v2 = *(_QWORD *)(v1 + 128);
  v3 = *(_DWORD *)(v2 + 32);
  if (v3 > 0x40)
    v4 = **(_QWORD **)(v2 + 24);
  else
    v4 = (uint64_t)(*(_QWORD *)(v2 + 24) << -(char)v3) >> -(char)v3;
  v6 = v4;
  return sub_1C53A7FDC(&v6, a1 + 1, a1 + 2, a1 + 3);
}

uint64_t sub_1C6230B70@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C6230BF4((uint64_t *)a1, (uint64_t)a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6230CD8(a1, (uint64_t)a2, (uint64_t)a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C6230BF4(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v8;
  _OWORD *v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  _OWORD v18[2];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v8 = *a1;
    v9 = (_OWORD *)(*(_QWORD *)a2 - 8 * *(unsigned int *)(*(_QWORD *)a2 + 8));
    v18[0] = *v9;
    v18[1] = v9[1];
    v10 = sub_1C6230AEC((uint64_t *)v18);
    v11 = v4 - 1;
    v12 = v10 & (v4 - 1);
    v5 = (_QWORD *)(v8 + 8 * v12);
    v13 = *v5;
    if (*(_QWORD *)a2 == *v5)
    {
      result = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      result = 1;
      while (v13 != -4096)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v13 == -8192;
        if (v16)
          v14 = v5;
        v17 = v12 + v15++;
        v12 = v17 & v11;
        v5 = (_QWORD *)(v8 + 8 * (v17 & v11));
        v13 = *v5;
        if (*(_QWORD *)a2 == *v5)
          goto LABEL_3;
      }
      result = 0;
      if (v14)
        v5 = v14;
    }
  }
  else
  {
    v5 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v5;
  return result;
}

_QWORD *sub_1C6230CD8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53A8238(a1, v7);
  v9 = 0;
  sub_1C6230BF4((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C6230D84(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C6230BF4((uint64_t *)v5, (uint64_t)a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C6230E30(uint64_t *a1, llvm *this, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unsigned int v9;
  int i;
  uint64_t *v11;
  uint64_t v12;
  uint64_t result;
  BOOL v14;
  unsigned int v15;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = 0;
    v8 = v4 - 1;
    v9 = v8 & sub_1C53A82F0(this, (uint64_t *)this + 2);
    for (i = 1; ; ++i)
    {
      v11 = (uint64_t *)(v6 + 8 * v9);
      v12 = *v11;
      if (*v11 != -4096 && v12 != -8192)
      {
        if (sub_1C6230F10((uint64_t)this, v12))
        {
          result = 1;
          goto LABEL_7;
        }
        v12 = *v11;
      }
      if (v12 == -4096)
        break;
      if (v7)
        v14 = 0;
      else
        v14 = v12 == -8192;
      if (v14)
        v7 = (uint64_t *)(v6 + 8 * v9);
      v15 = v9 + i;
      v9 = v15 & v8;
    }
    result = 0;
    if (v7)
      v11 = v7;
  }
  else
  {
    v11 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v11;
  return result;
}

BOOL sub_1C6230F10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 32))
    return 0;
  if (v2 > 0x40)
  {
    v5 = a2;
    v6 = a1;
    v4 = memcmp(*(const void **)a1, *(const void **)(a2 + 24), ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8);
    a2 = v5;
    a1 = v6;
    if (v4)
      return 0;
  }
  else if (*(_QWORD *)a1 != *(_QWORD *)(a2 + 24))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 24) != (*(_DWORD *)(a2 + 4) != 0))
    return 0;
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
}

uint64_t sub_1C6230FBC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C53A8474((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6231120(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

unint64_t sub_1C6231040(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  int v3;
  uint64_t v4;
  unint64_t result;
  size_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;

  v1 = *(unsigned int *)(a1 + 32);
  v10 = v1;
  if (v1 > 0x40)
  {
    v6 = ((unint64_t)(v1 + 63) >> 3) & 0x3FFFFFF8;
    v8 = a1;
    v2 = (void *)operator new[]();
    memcpy(v2, *(const void **)(v8 + 24), v6);
    a1 = v8;
  }
  else
  {
    v2 = *(void **)(a1 + 24);
  }
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_QWORD *)(a1 - 8 * *(unsigned int *)(a1 + 8));
  v9 = v2;
  v11 = v4;
  v12 = v3 != 0;
  result = sub_1C53A82F0((llvm *)&v9, &v11);
  if (v10 >= 0x41)
  {
    if (v9)
    {
      v7 = result;
      MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
      return v7;
    }
  }
  return result;
}

_QWORD *sub_1C6231120(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53A852C(a1, v7);
  v9 = 0;
  sub_1C53A8474((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C62311D0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C53A8474((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C6231274(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unsigned int v9;
  int i;
  uint64_t *v11;
  uint64_t v12;
  uint64_t result;
  BOOL v14;
  unsigned int v15;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = 0;
    v8 = v4 - 1;
    v9 = v8 & sub_1C53A85E4((_DWORD *)a2, (uint64_t *)(a2 + 8), (uint64_t *)(a2 + 16), (int *)(a2 + 24), (int *)(a2 + 28));
    for (i = 1; ; ++i)
    {
      v11 = (uint64_t *)(v6 + 8 * v9);
      v12 = *v11;
      if (*v11 != -4096 && v12 != -8192)
      {
        if (sub_1C62313F0(a2, v12))
        {
          result = 1;
          goto LABEL_7;
        }
        v12 = *v11;
      }
      if (v12 == -4096)
        break;
      if (v7)
        v14 = 0;
      else
        v14 = v12 == -8192;
      if (v14)
        v7 = (uint64_t *)(v6 + 8 * v9);
      v15 = v9 + i;
      v9 = v15 & v8;
    }
    result = 0;
    if (v7)
      v11 = v7;
  }
  else
  {
    v11 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v11;
  return result;
}

unint64_t sub_1C6231360(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, int *a7, int *a8)
{
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;

  v16 = a2;
  v13 = sub_1C50FDB34(a1, &v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = sub_1C50FDB34(a1, &v17, v13, (unint64_t)a4, *a6);
  return sub_1C517CF98(a1, v17, v14, a4, a7, a8);
}

BOOL sub_1C62313F0(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(unsigned __int16 *)(a2 + 2)
      && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16)
      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 32)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 48)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 52)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 28);
}

uint64_t sub_1C6231464@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C62314E8((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C62315F4(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C62314E8(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t result;
  BOOL v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = *a2;
    v19 = *(unsigned __int16 *)(*a2 + 2);
    v8 = *(_QWORD *)(v7 + 32);
    v20 = *(_QWORD *)(v7 - 8 * *(unsigned int *)(v7 + 8) + 16);
    v21 = v8;
    v22 = *(_QWORD *)(v7 + 48);
    v23 = *(_DWORD *)(v7 + 28);
    v9 = sub_1C53A85E4(&v19, &v20, &v21, (int *)&v22, (int *)&v22 + 1);
    v10 = v4 - 1;
    v11 = (v4 - 1) & v9;
    v12 = (_QWORD *)(v6 + 8 * v11);
    v13 = *v12;
    if (*a2 == *v12)
    {
      result = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      result = 1;
      while (v13 != -4096)
      {
        if (v14)
          v17 = 0;
        else
          v17 = v13 == -8192;
        if (v17)
          v14 = v12;
        v18 = v11 + v15++;
        v11 = v18 & v10;
        v12 = (_QWORD *)(v6 + 8 * (v18 & v10));
        v13 = *v12;
        if (*a2 == *v12)
          goto LABEL_7;
      }
      result = 0;
      if (v14)
        v12 = v14;
    }
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v12;
  return result;
}

_QWORD *sub_1C62315F4(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53A86B0(a1, v7);
  v9 = 0;
  sub_1C62314E8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C62316A4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C62314E8((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C6231750(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t *v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v8 = *a1;
    v9 = v4 - 1;
    v10 = (v4 - 1) & sub_1C62318A8((_DWORD *)a2, (uint64_t *)(a2 + 8), (int *)(a2 + 52));
    v5 = (uint64_t *)(v8 + 8 * v10);
    if (sub_1C6231838(a2, *v5))
    {
      result = 1;
    }
    else
    {
      v11 = 0;
      v12 = 1;
      while (*v5 != -4096)
      {
        if (v11)
          v13 = 0;
        else
          v13 = *v5 == -8192;
        if (v13)
          v11 = v5;
        v14 = v12 + 1;
        v10 = (v10 + v12) & v9;
        v5 = (uint64_t *)(v8 + 8 * v10);
        v15 = sub_1C6231838(a2, *v5);
        result = 1;
        v12 = v14;
        if (v15)
          goto LABEL_3;
      }
      result = 0;
      if (v11)
        v5 = v11;
    }
  }
  else
  {
    v5 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v5;
  return result;
}

BOOL sub_1C6231838(uint64_t a1, uint64_t a2)
{
  return (a2 | 0x1000) != 0xFFFFFFFFFFFFF000
      && *(_DWORD *)a1 == *(unsigned __int16 *)(a2 + 2)
      && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16)
      && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 32)
      && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
      && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52);
}

unint64_t sub_1C62318A8(_DWORD *a1, uint64_t *a2, int *a3)
{
  _OWORD v7[4];
  _OWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  v10 = sub_1C4D9B584();
  LODWORD(v7[0]) = *a1;
  return sub_1C5383144((char *)v7, 0, (_OWORD *)((char *)v7 + 4), (char *)v8, a2, a3);
}

uint64_t sub_1C623195C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C62319E0((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6231AF4(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C62319E0(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v8 = *a1;
    v9 = sub_1C6231AA0(*a2);
    v10 = v4 - 1;
    v11 = v9 & (v4 - 1);
    v5 = (_QWORD *)(v8 + 8 * v11);
    v12 = *v5;
    if (*a2 == *v5)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v12 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -8192;
        if (v15)
          v13 = v5;
        v16 = v11 + v14++;
        v11 = v16 & v10;
        v5 = (_QWORD *)(v8 + 8 * (v16 & v10));
        v12 = *v5;
        if (*a2 == *v5)
          goto LABEL_3;
      }
      result = 0;
      if (v13)
        v5 = v13;
    }
  }
  else
  {
    v5 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v5;
  return result;
}

unint64_t sub_1C6231AA0(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  int v4;
  _OWORD v5[2];
  uint64_t v6;
  uint64_t v7;

  v1 = a1 - 8 * *(unsigned int *)(a1 + 8);
  v2 = *(_OWORD *)(v1 + 32);
  v5[0] = *(_OWORD *)(v1 + 16);
  v5[1] = v2;
  v4 = *(unsigned __int16 *)(a1 + 2);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 48);
  return sub_1C62318A8(&v4, (uint64_t *)v5, (int *)&v7 + 1);
}

_QWORD *sub_1C6231AF4(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53A8768(a1, v7);
  v9 = 0;
  sub_1C62319E0((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C6231BA0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C62319E0((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C6231C4C(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t result;
  BOOL v17;
  unsigned int v18;
  _BYTE v19[104];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    sub_1C53A8F7C((uint64_t)v19, *a2);
    v7 = v4 - 1;
    v8 = sub_1C53A8960((uint64_t)v19) & (v4 - 1);
    v9 = (uint64_t *)(v6 + 8 * v8);
    v10 = *a2;
    v11 = *v9;
    if (*a2 == *v9)
    {
LABEL_8:
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      while (1)
      {
        if ((v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v14 = *(unsigned __int16 *)(v10 + 2);
          v15 = v10 - 8 * *(unsigned int *)(v10 + 8);
          if (sub_1C53A8E8C(v14, *(_QWORD *)(v15 + 8), *(_QWORD *)(v15 + 16), v11))
            goto LABEL_8;
          v11 = *v9;
        }
        if (v11 == -4096)
          break;
        if (v12)
          v17 = 0;
        else
          v17 = v11 == -8192;
        if (v17)
          v12 = v9;
        v18 = v8 + v13++;
        v8 = v18 & v7;
        v9 = (uint64_t *)(v6 + 8 * (v18 & v7));
        v10 = *a2;
        v11 = *v9;
        result = 1;
        if (*a2 == *v9)
          goto LABEL_10;
      }
      result = 0;
      if (v12)
        v9 = v12;
    }
  }
  else
  {
    v9 = 0;
    result = 0;
  }
LABEL_10:
  *a3 = v9;
  return result;
}

uint64_t sub_1C6231D64(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unsigned int v9;
  int i;
  uint64_t *v11;
  uint64_t v12;
  uint64_t result;
  BOOL v14;
  unsigned int v15;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = 0;
    v8 = v4 - 1;
    v9 = v8 & sub_1C53A9224((uint64_t *)(a2 + 8), (uint64_t *)(a2 + 16), (int *)(a2 + 24), (uint64_t *)(a2 + 40), (uint64_t *)(a2 + 32), (uint64_t *)(a2 + 72), (uint64_t *)(a2 + 96), (uint64_t *)(a2 + 152));
    for (i = 1; ; ++i)
    {
      v11 = (uint64_t *)(v6 + 8 * v9);
      v12 = *v11;
      if (*v11 != -4096 && v12 != -8192)
      {
        if (sub_1C53A94C8(a2, v12))
        {
          result = 1;
          goto LABEL_7;
        }
        v12 = *v11;
      }
      if (v12 == -4096)
        break;
      if (v7)
        v14 = 0;
      else
        v14 = v12 == -8192;
      if (v14)
        v7 = (uint64_t *)(v6 + 8 * v9);
      v15 = v9 + i;
      v9 = v15 & v8;
    }
    result = 0;
    if (v7)
      v11 = v7;
  }
  else
  {
    v11 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v11;
  return result;
}

uint64_t sub_1C6231E5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C6231EE0((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6231FD4(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C6231EE0(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t result;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22[4];
  uint64_t v23[3];
  uint64_t v24[7];
  uint64_t v25;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    sub_1C53A963C((uint64_t)&v17, *a2);
    v7 = sub_1C53A9224(&v18, &v19, &v20, v22, &v21, v23, v24, &v25);
    v8 = v4 - 1;
    v9 = (v4 - 1) & v7;
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
LABEL_14:
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      while (v11 != -4096)
      {
        if (v12)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v12 = v10;
        v16 = v9 + v13++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_14;
      }
      result = 0;
      if (v12)
        v10 = v12;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
  *a3 = v10;
  return result;
}

_QWORD *sub_1C6231FD4(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53A96C4(a1, v7);
  v9 = 0;
  sub_1C6231EE0((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C6232084(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C6231EE0((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C6232130(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t *v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v8 = *a1;
    v9 = v4 - 1;
    v10 = (v4 - 1) & sub_1C623221C((uint64_t *)a2, (uint64_t *)(a2 + 8), (int *)(a2 + 16), (int *)(a2 + 20));
    v5 = (uint64_t *)(v8 + 8 * v10);
    if (sub_1C53AB104(a2, *v5))
    {
      result = 1;
    }
    else
    {
      v11 = 0;
      v12 = 1;
      while (*v5 != -4096)
      {
        if (v11)
          v13 = 0;
        else
          v13 = *v5 == -8192;
        if (v13)
          v11 = v5;
        v14 = v12 + 1;
        v10 = (v10 + v12) & v9;
        v5 = (uint64_t *)(v8 + 8 * v10);
        v15 = sub_1C53AB104(a2, *v5);
        result = 1;
        v12 = v14;
        if (v15)
          goto LABEL_3;
      }
      result = 0;
      if (v11)
        v5 = v11;
    }
  }
  else
  {
    v5 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v5;
  return result;
}

unint64_t sub_1C623221C(uint64_t *a1, uint64_t *a2, int *a3, int *a4)
{
  _OWORD v9[4];
  _OWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, sizeof(v9));
  v12 = sub_1C4D9B584();
  return sub_1C6231360((char *)v9, 0, v9, (char *)v10, a1, a2, a3, a4);
}

uint64_t sub_1C62322D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C6232358((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6232418(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C6232358(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = sub_1C53AB174(*a2);
    v8 = v4 - 1;
    v9 = v7 & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_4;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v10;
  return result;
}

_QWORD *sub_1C6232418(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53AB1D8(a1, v7);
  v9 = 0;
  sub_1C6232358((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C62324C4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C6232358((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C6232570(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t *v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v8 = *a1;
    v9 = (_QWORD *)(a2 + 8);
    v10 = sub_1C53AB840((uint64_t *)a2, (uint64_t *)(a2 + 8));
    v11 = 0;
    v12 = (v4 - 1) & v10;
    for (i = 1; ; ++i)
    {
      v5 = (uint64_t *)(v8 + 8 * v12);
      v14 = *v5;
      if (*v5 == -4096)
        break;
      if (v14 != -8192)
      {
        v17 = v14 - 8 * *(unsigned int *)(v14 + 8);
        if (*(_QWORD *)a2 == *(_QWORD *)(v17 + 8)
          && *v9 == *(_QWORD *)(v17 + 16)
          && *(_BYTE *)(a2 + 16) == (*(_BYTE *)(v14 + 24) & 1))
        {
          result = 1;
          goto LABEL_3;
        }
        if (v14 == -4096)
          break;
      }
      if (v11)
        v15 = 0;
      else
        v15 = v14 == -8192;
      if (v15)
        v11 = (uint64_t *)(v8 + 8 * v12);
      v16 = v12 + i;
      v12 = v16 & (v4 - 1);
    }
    result = 0;
    if (v11)
      v5 = v11;
  }
  else
  {
    v5 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v5;
  return result;
}

uint64_t sub_1C6232670@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C62326F4((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C62327E4(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C62326F4(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t result;
  BOOL v16;
  unsigned int v17;
  __int128 v18;
  char v19;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = *a2;
    v18 = *(_OWORD *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 8);
    v19 = *(_BYTE *)(v7 + 24) & 1;
    v8 = sub_1C53AB840((uint64_t *)&v18, (uint64_t *)&v18 + 1);
    v9 = v4 - 1;
    v10 = (v4 - 1) & v8;
    v11 = (_QWORD *)(v6 + 8 * v10);
    v12 = *v11;
    if (*a2 == *v11)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v12 != -4096)
      {
        if (v13)
          v16 = 0;
        else
          v16 = v12 == -8192;
        if (v16)
          v13 = v11;
        v17 = v10 + v14++;
        v10 = v17 & v9;
        v11 = (_QWORD *)(v6 + 8 * (v17 & v9));
        v12 = *v11;
        if (*a2 == *v11)
          goto LABEL_7;
      }
      result = 0;
      if (v13)
        v11 = v13;
    }
  }
  else
  {
    v11 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v11;
  return result;
}

_QWORD *sub_1C62327E4(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_1C53AB8E0(a1, v7);
    v9 = 0;
    sub_1C62326F4((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C6232894(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C62326F4((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

unint64_t sub_1C6232940(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _OWORD v14[7];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  memset(v14, 0, sizeof(v14));
  v10 = sub_1C4D9B584();
  v11 = *a1;
  v15 = v10;
  v13 = v11;
  return sub_1C53AA9D4((char *)&v13, 0, v14, (char *)&v14[3] + 8, a2, a3, a4, a5);
}

uint64_t sub_1C6232A0C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C6232A90((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6232B9C(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C6232A90(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v8 = *a1;
    v9 = sub_1C6232B50(*a2);
    v10 = v4 - 1;
    v11 = v9 & (v4 - 1);
    v5 = (_QWORD *)(v8 + 8 * v11);
    v12 = *v5;
    if (*a2 == *v5)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v12 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -8192;
        if (v15)
          v13 = v5;
        v16 = v11 + v14++;
        v11 = v16 & v10;
        v5 = (_QWORD *)(v8 + 8 * (v16 & v10));
        v12 = *v5;
        if (*a2 == *v5)
          goto LABEL_3;
      }
      result = 0;
      if (v13)
        v5 = v13;
    }
  }
  else
  {
    v5 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v5;
  return result;
}

unint64_t sub_1C6232B50(uint64_t a1)
{
  __int128 *v1;
  __int128 v2;
  __int128 v4;
  __int128 v5;
  int v6[4];

  v1 = (__int128 *)(a1 - 8 * *(unsigned int *)(a1 + 8));
  v2 = v1[1];
  v4 = *v1;
  v5 = v2;
  v6[0] = *(_DWORD *)(a1 + 24);
  return sub_1C6232940((uint64_t *)&v4, (uint64_t *)&v4 + 1, (uint64_t *)&v5, (uint64_t *)&v5 + 1, v6);
}

_QWORD *sub_1C6232B9C(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53ABB00(a1, v7);
  v9 = 0;
  sub_1C6232A90((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C6232C48(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C6232A90((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C6232CF4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C53ABED0((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C6232D98(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t *v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  unsigned int v18;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v8 = *a1;
    v9 = (_QWORD *)(a2 + 8);
    v10 = (unsigned __int8 *)(a2 + 16);
    v11 = sub_1C53AC174((uint64_t *)a2, (uint64_t *)(a2 + 8), (char *)(a2 + 16));
    v12 = 0;
    v13 = (v4 - 1) & v11;
    for (i = 1; ; ++i)
    {
      v5 = (uint64_t *)(v8 + 8 * v13);
      v15 = *v5;
      if (*v5 == -4096)
        break;
      if (v15 != -8192)
      {
        v16 = (_QWORD *)(v15 - 8 * *(unsigned int *)(v15 + 8));
        if (*(_QWORD *)a2 == *v16 && *v9 == v16[1] && *v10 == *(unsigned __int8 *)(v15 + 24))
        {
          result = 1;
          goto LABEL_7;
        }
        if (v15 == -4096)
          break;
      }
      if (v12)
        v17 = 0;
      else
        v17 = v15 == -8192;
      if (v17)
        v12 = (uint64_t *)(v8 + 8 * v13);
      v18 = v13 + i;
      v13 = v18 & (v4 - 1);
    }
    result = 0;
    if (v12)
      v5 = v12;
  }
  else
  {
    v5 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v5;
  return result;
}

uint64_t sub_1C6232E98@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C6232F1C((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C623300C(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C6232F1C(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t result;
  BOOL v16;
  unsigned int v17;
  __int128 v18;
  char v19[16];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = *a2;
    v18 = *(_OWORD *)(*a2 - 8 * *(unsigned int *)(*a2 + 8));
    v19[0] = *(_BYTE *)(v7 + 24);
    v8 = sub_1C53AC174((uint64_t *)&v18, (uint64_t *)&v18 + 1, v19);
    v9 = v4 - 1;
    v10 = (v4 - 1) & v8;
    v11 = (_QWORD *)(v6 + 8 * v10);
    v12 = *v11;
    if (*a2 == *v11)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v12 != -4096)
      {
        if (v13)
          v16 = 0;
        else
          v16 = v12 == -8192;
        if (v16)
          v13 = v11;
        v17 = v10 + v14++;
        v10 = v17 & v9;
        v11 = (_QWORD *)(v6 + 8 * (v17 & v9));
        v12 = *v11;
        if (*a2 == *v11)
          goto LABEL_7;
      }
      result = 0;
      if (v13)
        v11 = v13;
    }
  }
  else
  {
    v11 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v11;
  return result;
}

_QWORD *sub_1C623300C(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C53AC228(a1, v7);
  v9 = 0;
  sub_1C6232F1C((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C62330BC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C6232F1C((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

unint64_t sub_1C6233168(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, char *a7, uint64_t *a8)
{
  _QWORD *v13;
  _BYTE *v14;
  uint64_t v16;
  uint64_t v17;

  v16 = a2;
  v13 = sub_1C50FDB34(a1, &v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = sub_1C50FDB34(a1, &v17, v13, (unint64_t)a4, *a6);
  return sub_1C53A998C(a1, v17, v14, a4, a7, a8);
}

uint64_t sub_1C62331F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C623327C((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6233384(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C623327C(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  __int128 v20;
  char v21[8];
  uint64_t v22;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v8 = *a1;
    v9 = *a2;
    v19 = *(unsigned __int16 *)(*a2 + 2);
    v10 = (__int128 *)(v9 - 8 * *(unsigned int *)(v9 + 8));
    v20 = *v10;
    v21[0] = *(_BYTE *)(v9 + 24);
    v22 = *((_QWORD *)v10 + 2);
    v11 = sub_1C53AC454(&v19, (uint64_t *)&v20, (uint64_t *)&v20 + 1, v21, &v22);
    v12 = v4 - 1;
    v13 = (v4 - 1) & v11;
    v5 = (_QWORD *)(v8 + 8 * v13);
    v14 = *v5;
    if (*a2 == *v5)
    {
      result = 1;
    }
    else
    {
      v15 = 0;
      v16 = 1;
      result = 1;
      while (v14 != -4096)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v14 == -8192;
        if (v17)
          v15 = v5;
        v18 = v13 + v16++;
        v13 = v18 & v12;
        v5 = (_QWORD *)(v8 + 8 * (v18 & v12));
        v14 = *v5;
        if (*a2 == *v5)
          goto LABEL_8;
      }
      result = 0;
      if (v15)
        v5 = v15;
    }
  }
  else
  {
    v5 = 0;
    result = 0;
  }
LABEL_8:
  *a3 = v5;
  return result;
}

_QWORD *sub_1C6233384(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_1C53AC520(a1, v7);
    v9 = 0;
    sub_1C623327C((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C6233434(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C623327C((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C62334E0(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v8 = *a1;
    v9 = 0;
    v10 = v4 - 1;
    v11 = v10 & sub_1C62335E0((uint64_t *)a2, (uint64_t *)(a2 + 8), (uint64_t *)(a2 + 16), (uint64_t *)(a2 + 24), (int *)(a2 + 32), (uint64_t *)(a2 + 40), (char *)(a2 + 48), (char *)(a2 + 49), (uint64_t *)(a2 + 56), (uint64_t *)(a2 + 80));
    for (i = 1; ; ++i)
    {
      v5 = (uint64_t *)(v8 + 8 * v11);
      v13 = *v5;
      if ((*v5 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (sub_1C6233974(a2, v13))
        {
          result = 1;
          goto LABEL_3;
        }
        v13 = *v5;
      }
      if (v13 == -4096)
        break;
      if (v9)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v9 = (uint64_t *)(v8 + 8 * v11);
      v15 = v11 + i;
      v11 = v15 & v10;
    }
    result = 0;
    if (v9)
      v5 = v9;
  }
  else
  {
    v5 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v5;
  return result;
}

unint64_t sub_1C62335E0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int *a5, uint64_t *a6, char *a7, char *a8, uint64_t *a9, uint64_t *a10)
{
  _OWORD v19[4];
  _OWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  memset(v19, 0, sizeof(v19));
  v22 = sub_1C4D9B584();
  return sub_1C62336C8((char *)v19, 0, v19, (char *)v20, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

unint64_t sub_1C62336C8(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, int *a9, uint64_t *a10, char *a11, char *a12, uint64_t *a13, uint64_t *a14)
{
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;

  v22 = a2;
  v19 = sub_1C50FDB34(a1, &v22, a3, (unint64_t)a4, *a5);
  v23 = v22;
  v20 = sub_1C50FDB34(a1, &v23, v19, (unint64_t)a4, *a6);
  return sub_1C623378C(a1, v23, v20, a4, a7, a8, a9, a10, a11, a12, a13, a14);
}

unint64_t sub_1C623378C(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, int *a7, uint64_t *a8, char *a9, char *a10, uint64_t *a11, uint64_t *a12)
{
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;

  v20 = a2;
  v17 = sub_1C50FDB34(a1, &v20, a3, (unint64_t)a4, *a5);
  v21 = v20;
  v18 = sub_1C50FDB34(a1, &v21, v17, (unint64_t)a4, *a6);
  return sub_1C6233840(a1, v21, v18, a4, a7, a8, a9, a10, a11, a12);
}

unint64_t sub_1C6233840(char *a1, uint64_t a2, _DWORD *a3, char *a4, int *a5, uint64_t *a6, char *a7, char *a8, uint64_t *a9, uint64_t *a10)
{
  _QWORD *v15;
  _BYTE *v16;
  uint64_t v18;
  uint64_t v19;

  v18 = a2;
  v15 = sub_1C4ED49B0(a1, &v18, a3, (unint64_t)a4, *a5);
  v19 = v18;
  v16 = sub_1C50FDB34(a1, &v19, v15, (unint64_t)a4, *a6);
  return sub_1C62338E4(a1, v19, v16, a4, a7, a8, a9, a10);
}

unint64_t sub_1C62338E4(char *a1, uint64_t a2, _BYTE *a3, char *a4, char *a5, char *a6, uint64_t *a7, uint64_t *a8)
{
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v16;
  uint64_t v17;

  v16 = a2;
  v13 = sub_1C4ED4714(a1, &v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = sub_1C4ED4714(a1, &v17, v13, (unint64_t)a4, *a6);
  return sub_1C517D0A0(a1, v17, v14, a4, a7, a8);
}

BOOL sub_1C6233974(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  return *(_QWORD *)a1 == *v2
      && *(_QWORD *)(a1 + 8) == v2[1]
      && *(_QWORD *)(a1 + 16) == v2[5]
      && *(_QWORD *)(a1 + 24) == v2[2]
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 24)
      && *(_QWORD *)(a1 + 40) == v2[3]
      && *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 32)
      && *(unsigned __int8 *)(a1 + 49) == *(unsigned __int8 *)(a2 + 33)
      && *(_QWORD *)(a1 + 56) == v2[6]
      && *(_QWORD *)(a1 + 64) == v2[7]
      && *(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 28)
      && *(_QWORD *)(a1 + 80) == v2[8];
}

uint64_t sub_1C6233A48@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C6233ACC((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6233C1C(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C6233ACC(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v8 = *a1;
    v9 = sub_1C6233B8C(*a2);
    v10 = v4 - 1;
    v11 = v9 & (v4 - 1);
    v5 = (_QWORD *)(v8 + 8 * v11);
    v12 = *v5;
    if (*a2 == *v5)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v12 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -8192;
        if (v15)
          v13 = v5;
        v16 = v11 + v14++;
        v11 = v16 & v10;
        v5 = (_QWORD *)(v8 + 8 * (v16 & v10));
        v12 = *v5;
        if (*a2 == *v5)
          goto LABEL_3;
      }
      result = 0;
      if (v13)
        v5 = v13;
    }
  }
  else
  {
    v5 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v5;
  return result;
}

unint64_t sub_1C6233B8C(uint64_t a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10[8];
  __int128 v11;
  int v12;
  uint64_t v13;

  v1 = (__int128 *)(a1 - 8 * *(unsigned int *)(a1 + 8));
  v5 = *v1;
  v2 = *((_QWORD *)v1 + 2);
  v3 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 5);
  v7 = v2;
  LODWORD(v2) = *(_DWORD *)(a1 + 28);
  v8 = *(_DWORD *)(a1 + 24);
  v9 = v3;
  *(_WORD *)v10 = *(_WORD *)(a1 + 32);
  v11 = v1[3];
  v12 = v2;
  v13 = *((_QWORD *)v1 + 8);
  return sub_1C62335E0((uint64_t *)&v5, (uint64_t *)&v5 + 1, &v6, &v7, &v8, &v9, v10, &v10[1], (uint64_t *)&v11, &v13);
}

_QWORD *sub_1C6233C1C(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53AC5D8(a1, v7);
  v9 = 0;
  sub_1C6233ACC((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C6233CC8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C6233ACC((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

unint64_t sub_1C6233D74(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _OWORD v10[7];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  memset(v10, 0, sizeof(v10));
  v6 = sub_1C4D9B584();
  v7 = *a1;
  v11 = v6;
  v9 = v7;
  return sub_1C5383144((char *)&v9, 0, v10, (char *)&v10[3] + 8, a2, a3);
}

uint64_t sub_1C6233E28@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C6233EAC((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6233FA4(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C6233EAC(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  int v21;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v8 = *a1;
    v9 = *a2;
    v10 = *a2 - 8 * *(unsigned int *)(*a2 + 8);
    v19 = *(_OWORD *)v10;
    v20 = *(_QWORD *)(v10 + 16);
    v21 = *(_DWORD *)(v9 + 24);
    v11 = sub_1C6233D74((uint64_t *)&v19, (uint64_t *)&v19 + 1, &v21);
    v12 = v4 - 1;
    v13 = (v4 - 1) & v11;
    v5 = (_QWORD *)(v8 + 8 * v13);
    v14 = *v5;
    if (*a2 == *v5)
    {
      result = 1;
    }
    else
    {
      v15 = 0;
      v16 = 1;
      result = 1;
      while (v14 != -4096)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v14 == -8192;
        if (v17)
          v15 = v5;
        v18 = v13 + v16++;
        v13 = v18 & v12;
        v5 = (_QWORD *)(v8 + 8 * (v18 & v12));
        v14 = *v5;
        if (*a2 == *v5)
          goto LABEL_3;
      }
      result = 0;
      if (v15)
        v5 = v15;
    }
  }
  else
  {
    v5 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v5;
  return result;
}

_QWORD *sub_1C6233FA4(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53AD018(a1, v7);
  v9 = 0;
  sub_1C6233EAC((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C6234050(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C6233EAC((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C62340FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C6234180((uint64_t *)a1, (uint64_t)a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6234244(a1, (uint64_t)a2, (uint64_t)a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C6234180(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t result;
  BOOL v15;
  unsigned int v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = sub_1C517D118(*(_QWORD **)(*(_QWORD *)a2 + 24), *(_QWORD *)(*(_QWORD *)a2 + 32));
    v8 = v4 - 1;
    v9 = (v4 - 1) & v7;
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*(_QWORD *)a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v12)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v12 = v10;
        v16 = v9 + v13++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*(_QWORD *)a2 == *v10)
          goto LABEL_7;
      }
      result = 0;
      if (v12)
        v10 = v12;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v10;
  return result;
}

_QWORD *sub_1C6234244(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C53AD224(a1, v7);
  v9 = 0;
  sub_1C6234180((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C62342F4(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C6234180((uint64_t *)v5, (uint64_t)a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C62343A0(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t *v9;
  unsigned int v10;
  int i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;
  BOOL v16;
  unsigned int v17;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = a2 + 1;
    v8 = sub_1C53AB840(a2, a2 + 1);
    v9 = 0;
    v10 = (v4 - 1) & v8;
    for (i = 1; ; ++i)
    {
      v12 = (uint64_t *)(v6 + 8 * v10);
      v13 = *v12;
      if (*v12 == -4096)
        break;
      if (v13 != -8192)
      {
        v15 = (_QWORD *)(v13 - 8 * *(unsigned int *)(v13 + 8));
        if (*a2 == *v15 && *v7 == v15[1])
        {
          result = 1;
          goto LABEL_6;
        }
        if (v13 == -4096)
          break;
      }
      if (v9)
        v16 = 0;
      else
        v16 = v13 == -8192;
      if (v16)
        v9 = (uint64_t *)(v6 + 8 * v10);
      v17 = v10 + i;
      v10 = v17 & (v4 - 1);
    }
    result = 0;
    if (v9)
      v12 = v9;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_6:
  *a3 = v12;
  return result;
}

uint64_t sub_1C6234488@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C623450C((uint64_t *)a1, (uint64_t)a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C62345F0(a1, (uint64_t)a2, (uint64_t)a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C623450C(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t result;
  BOOL v15;
  unsigned int v16;
  __int128 v17;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v17 = *(_OWORD *)(*(_QWORD *)a2 - 8 * *(unsigned int *)(*(_QWORD *)a2 + 8));
    v7 = sub_1C53AB840((uint64_t *)&v17, (uint64_t *)&v17 + 1);
    v8 = v4 - 1;
    v9 = (v4 - 1) & v7;
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*(_QWORD *)a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v12)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v12 = v10;
        v16 = v9 + v13++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*(_QWORD *)a2 == *v10)
          goto LABEL_7;
      }
      result = 0;
      if (v12)
        v10 = v12;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v10;
  return result;
}

_QWORD *sub_1C62345F0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53AD598(a1, v7);
  v9 = 0;
  sub_1C623450C((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C62346A0(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C623450C((uint64_t *)v5, (uint64_t)a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C623474C(uint64_t *a1, uint64_t a2, unsigned int ***a3)
{
  int v4;
  unsigned int **v5;
  uint64_t result;
  uint64_t v8;
  unsigned int **v9;
  int v10;
  unsigned int v11;
  int i;
  unsigned int *v13;
  BOOL v14;
  unsigned int v15;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v8 = *a1;
    v9 = 0;
    v10 = v4 - 1;
    v11 = v10 & sub_1C6234834((uint64_t *)a2, (uint64_t *)(a2 + 8), (int *)(a2 + 16), (uint64_t *)(a2 + 24), (uint64_t *)(a2 + 32), (int *)(a2 + 40), (uint64_t *)(a2 + 48));
    for (i = 1; ; ++i)
    {
      v5 = (unsigned int **)(v8 + 8 * v11);
      v13 = *v5;
      if (((unint64_t)*v5 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (sub_1C6234A48(a2, v13))
        {
          result = 1;
          goto LABEL_3;
        }
        v13 = *v5;
      }
      if (v13 == (unsigned int *)-4096)
        break;
      if (v9)
        v14 = 0;
      else
        v14 = v13 == (unsigned int *)-8192;
      if (v14)
        v9 = (unsigned int **)(v8 + 8 * v11);
      v15 = v11 + i;
      v11 = v15 & v10;
    }
    result = 0;
    if (v9)
      v5 = v9;
  }
  else
  {
    v5 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v5;
  return result;
}

unint64_t sub_1C6234834(uint64_t *a1, uint64_t *a2, int *a3, uint64_t *a4, uint64_t *a5, int *a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _OWORD v18[7];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  memset(v18, 0, sizeof(v18));
  v14 = sub_1C4D9B584();
  v15 = *a1;
  v19 = v14;
  v17 = v15;
  return sub_1C6234914((char *)&v17, 0, v18, (char *)&v18[3] + 8, a2, a3, a4, a5, a6, a7);
}

unint64_t sub_1C6234914(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, int *a6, uint64_t *a7, uint64_t *a8, int *a9, uint64_t *a10)
{
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;

  v18 = a2;
  v15 = sub_1C50FDB34(a1, &v18, a3, (unint64_t)a4, *a5);
  v19 = v18;
  v16 = sub_1C4ED49B0(a1, &v19, v15, (unint64_t)a4, *a6);
  return sub_1C62349B8(a1, v19, v16, a4, a7, a8, a9, a10);
}

unint64_t sub_1C62349B8(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, int *a7, uint64_t *a8)
{
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;

  v16 = a2;
  v13 = sub_1C50FDB34(a1, &v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = sub_1C50FDB34(a1, &v17, v13, (unint64_t)a4, *a6);
  return sub_1C50FDABC(a1, v17, v14, a4, a7, a8);
}

BOOL sub_1C6234A48(uint64_t a1, unsigned int *a2)
{
  unsigned int *v2;

  v2 = &a2[-2 * a2[2]];
  return *(_QWORD *)a1 == *(_QWORD *)v2
      && *(_QWORD *)(a1 + 8) == *((_QWORD *)v2 + 1)
      && *(_DWORD *)(a1 + 16) == a2[6]
      && *(_QWORD *)(a1 + 24) == *((_QWORD *)v2 + 2)
      && *(_QWORD *)(a1 + 32) == *((_QWORD *)v2 + 3)
      && *(_DWORD *)(a1 + 40) == a2[7]
      && *(_QWORD *)(a1 + 48) == *((_QWORD *)v2 + 4);
}

uint64_t sub_1C6234ACC@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  unsigned int **v7;
  char v8;
  uint64_t v9;
  unsigned int **v10;

  v10 = 0;
  result = sub_1C6234B50((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6234C74(a1, (uint64_t)a2, a2, v10);
    v7 = (unsigned int **)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C6234B50(uint64_t *a1, unsigned int **a2, unsigned int ***a3)
{
  int v4;
  unsigned int **v5;
  uint64_t result;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int **v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v8 = *a1;
    v9 = sub_1C6234C10(*a2);
    v10 = v4 - 1;
    v11 = v9 & (v4 - 1);
    v5 = (unsigned int **)(v8 + 8 * v11);
    v12 = *v5;
    if (*a2 == *v5)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v12 != (unsigned int *)-4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == (unsigned int *)-8192;
        if (v15)
          v13 = v5;
        v16 = v11 + v14++;
        v11 = v16 & v10;
        v5 = (unsigned int **)(v8 + 8 * (v16 & v10));
        v12 = *v5;
        if (*a2 == *v5)
          goto LABEL_3;
      }
      result = 0;
      if (v13)
        v5 = v13;
    }
  }
  else
  {
    v5 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v5;
  return result;
}

unint64_t sub_1C6234C10(unsigned int *a1)
{
  unsigned int *v1;
  __int128 v2;
  int v3;
  __int128 v5;
  unsigned int v6;
  __int128 v7;
  int v8;
  uint64_t v9;

  v1 = &a1[-2 * a1[2]];
  v2 = *((_OWORD *)v1 + 1);
  v5 = *(_OWORD *)v1;
  v3 = a1[7];
  v6 = a1[6];
  v7 = v2;
  v8 = v3;
  v9 = *((_QWORD *)v1 + 4);
  return sub_1C6234834((uint64_t *)&v5, (uint64_t *)&v5 + 1, (int *)&v6, (uint64_t *)&v7, (uint64_t *)&v7 + 1, &v8, &v9);
}

unsigned int **sub_1C6234C74(uint64_t a1, uint64_t a2, unsigned int **a3, unsigned int **a4)
{
  int v6;
  unsigned int v7;
  unsigned int **v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53AD650(a1, v7);
  v9 = 0;
  sub_1C6234B50((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != (unsigned int *)-4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C6234D20(uint64_t result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int **v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (((unint64_t)*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C6234B50((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

BOOL sub_1C6234DCC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  if (*(_DWORD *)a1 == *(unsigned __int16 *)(a2 + 2)
    && (v2 = (_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8)), *(_QWORD *)(a1 + 8) == *v2)
    && *(_QWORD *)(a1 + 16) == v2[1]
    && *(_QWORD *)(a1 + 24) == v2[3]
    && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 24)
    && *(_QWORD *)(a1 + 40) == v2[2])
  {
    return *(_QWORD *)(a1 + 48) == v2[4];
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1C6234E50(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C53ADA64((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C6234EF4(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v8;
  _DWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t *v13;
  unsigned int v14;
  int i;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  _QWORD *v19;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    v5 = 0;
    result = 0;
    goto LABEL_3;
  }
  v8 = *a1;
  v9 = (_DWORD *)(a2 + 4);
  v10 = (_QWORD *)(a2 + 8);
  v11 = (_QWORD *)(a2 + 16);
  v12 = sub_1C6235014((int *)a2, (int *)(a2 + 4), (uint64_t *)(a2 + 8), (uint64_t *)(a2 + 16));
  v13 = 0;
  v14 = (v4 - 1) & v12;
  for (i = 1; ; ++i)
  {
    v5 = (uint64_t *)(v8 + 8 * v14);
    v16 = *v5;
    if (*v5 == -8192)
      goto LABEL_9;
    if (v16 == -4096)
      break;
    if (*(_DWORD *)a2 == *(unsigned __int16 *)(v16 + 2) && *v9 == *(_DWORD *)(v16 + 24))
    {
      v19 = (_QWORD *)(v16 - 8 * *(unsigned int *)(v16 + 8));
      if (*v10 == *v19 && *v11 == v19[1])
      {
        result = 1;
        goto LABEL_3;
      }
    }
LABEL_9:
    if (v13)
      v17 = 0;
    else
      v17 = v16 == -8192;
    if (v17)
      v13 = (uint64_t *)(v8 + 8 * v14);
    v18 = v14 + i;
    v14 = v18 & (v4 - 1);
  }
  result = 0;
  if (v13)
    v5 = v13;
LABEL_3:
  *a3 = v5;
  return result;
}

unint64_t sub_1C6235014(int *a1, int *a2, uint64_t *a3, uint64_t *a4)
{
  _OWORD v9[4];
  _OWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, sizeof(v9));
  v12 = sub_1C4D9B584();
  return sub_1C62350CC((char *)v9, 0, v9, (char *)v10, a1, a2, a3, a4);
}

unint64_t sub_1C62350CC(char *a1, uint64_t a2, _DWORD *a3, char *a4, int *a5, int *a6, uint64_t *a7, uint64_t *a8)
{
  _DWORD *v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;

  v16 = a2;
  v13 = sub_1C4ED49B0(a1, &v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = sub_1C4ED49B0(a1, &v17, v13, (unint64_t)a4, *a6);
  return sub_1C517D0A0(a1, v17, v14, a4, a7, a8);
}

uint64_t sub_1C623515C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C62351E0((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C62352D8(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C62351E0(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  int v20;
  __int128 v21;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v8 = *a1;
    v9 = *a2;
    v10 = *(_DWORD *)(*a2 + 24);
    v19 = *(unsigned __int16 *)(*a2 + 2);
    v20 = v10;
    v21 = *(_OWORD *)(v9 - 8 * *(unsigned int *)(v9 + 8));
    v11 = sub_1C6235014(&v19, &v20, (uint64_t *)&v21, (uint64_t *)&v21 + 1);
    v12 = v4 - 1;
    v13 = (v4 - 1) & v11;
    v5 = (_QWORD *)(v8 + 8 * v13);
    v14 = *v5;
    if (*a2 == *v5)
    {
      result = 1;
    }
    else
    {
      v15 = 0;
      v16 = 1;
      result = 1;
      while (v14 != -4096)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v14 == -8192;
        if (v17)
          v15 = v5;
        v18 = v13 + v16++;
        v13 = v18 & v12;
        v5 = (_QWORD *)(v8 + 8 * (v18 & v12));
        v14 = *v5;
        if (*a2 == *v5)
          goto LABEL_3;
      }
      result = 0;
      if (v15)
        v5 = v15;
    }
  }
  else
  {
    v5 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v5;
  return result;
}

_QWORD *sub_1C62352D8(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53ADCF8(a1, v7);
  v9 = 0;
  sub_1C62351E0((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C6235384(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C62351E0((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C6235430@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C62354B4((uint64_t *)a1, (uint64_t)a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6235580(a1, (uint64_t)a2, (uint64_t)a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C62354B4(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v8 = *a1;
    v9 = sub_1C6193EA0(*(_QWORD **)(*(_QWORD *)a2 + 24), *(_QWORD *)(*(_QWORD *)a2 + 24) + 8 * *(unsigned int *)(*(_QWORD *)a2 + 32));
    v10 = v4 - 1;
    v11 = (v4 - 1) & v9;
    v5 = (_QWORD *)(v8 + 8 * v11);
    v12 = *v5;
    if (*(_QWORD *)a2 == *v5)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v12 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -8192;
        if (v15)
          v13 = v5;
        v16 = v11 + v14++;
        v11 = v16 & v10;
        v5 = (_QWORD *)(v8 + 8 * (v16 & v10));
        v12 = *v5;
        if (*(_QWORD *)a2 == *v5)
          goto LABEL_3;
      }
      result = 0;
      if (v13)
        v5 = v13;
    }
  }
  else
  {
    v5 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v5;
  return result;
}

_QWORD *sub_1C6235580(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53ADEB8(a1, v7);
  v9 = 0;
  sub_1C62354B4((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C623562C(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C62354B4((uint64_t *)v5, (uint64_t)a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DebugLoc::getFnDebugLoc@<X0>(llvm::DebugLoc *this@<X0>, const llvm::MDNode *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v4 = *(_QWORD *)this;
  do
  {
    v5 = v4;
    v6 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v6 != 2)
      break;
    v4 = *(_QWORD *)(v4 - 8);
  }
  while (v4);
  result = (uint64_t)llvm::getDISubprogram(*(unsigned __int8 **)(v5 - 8 * v6), a2);
  if (result)
  {
    v8 = result;
    v9 = *(_QWORD *)(result + 16);
    v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF8);
    if ((v9 & 4) != 0)
      v10 = (uint64_t *)*v10;
    result = llvm::DILocation::getImpl(v10, *(_DWORD *)(v8 + 28), 0, v8, 0, 0, 0, 1);
    *a3 = result;
    if (result)
      return llvm::MetadataTracking::track((uint64_t)a3, (unsigned __int8 *)result, 2);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

BOOL llvm::DebugLoc::isImplicitCode(llvm::DebugLoc *this)
{
  return !*(_QWORD *)this || *(char *)(*(_QWORD *)this + 1) < 0;
}

uint64_t llvm::DebugLoc::dump(llvm::DebugLoc *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return llvm::DebugLoc::print((uint64_t)this, v2);
}

uint64_t llvm::DebugLoc::print(uint64_t this, llvm::raw_ostream *a2)
{
  uint64_t v3;
  size_t v4;
  const char *v5;
  size_t v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  _BYTE *v10;
  llvm::raw_ostream *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;

  if (*(_QWORD *)this)
  {
    v3 = this;
    v5 = sub_1C53AE5A0(*(_QWORD *)(*(_QWORD *)this - 8 * *(unsigned int *)(*(_QWORD *)this + 8)));
    v6 = v4;
    v7 = (_BYTE *)*((_QWORD *)a2 + 4);
    if (v4 <= *((_QWORD *)a2 + 3) - (_QWORD)v7)
    {
      if (v4)
      {
        memcpy(v7, v5, v4);
        v7 = (_BYTE *)(*((_QWORD *)a2 + 4) + v6);
        *((_QWORD *)a2 + 4) = v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(a2, v5, v4);
      v7 = (_BYTE *)*((_QWORD *)a2 + 4);
    }
    if ((unint64_t)v7 >= *((_QWORD *)a2 + 3))
    {
      v8 = llvm::raw_ostream::write(a2, 58);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v7 + 1;
      *v7 = 58;
      v8 = a2;
    }
    this = (uint64_t)llvm::raw_ostream::operator<<(v8, *(unsigned int *)(*(_QWORD *)v3 + 4));
    v9 = *(_QWORD *)v3;
    if (*(_WORD *)(*(_QWORD *)v3 + 2))
    {
      v10 = (_BYTE *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v10 >= *((_QWORD *)a2 + 3))
      {
        v11 = llvm::raw_ostream::write(a2, 58);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v10 + 1;
        *v10 = 58;
        v11 = a2;
      }
      this = (uint64_t)llvm::raw_ostream::operator<<(v11, *(unsigned __int16 *)(*(_QWORD *)v3 + 2));
      v9 = *(_QWORD *)v3;
    }
    if (*(_DWORD *)(v9 + 8) == 2)
    {
      v12 = *(unsigned __int8 **)(v9 - 8);
      v13 = v12;
      if (v12)
      {
        this = llvm::MetadataTracking::track((uint64_t)&v13, v12, 2);
        if (v13)
        {
          sub_1C4816AD8(a2, " @[ ");
          llvm::DebugLoc::print((llvm::DebugLoc *)&v13, a2);
          this = (uint64_t)sub_1C4816AD8(a2, " ]");
          if (v13)
            return llvm::MetadataTracking::untrack((uint64_t)&v13, v13);
        }
      }
    }
  }
  return this;
}

void sub_1C6235948(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E814E460;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C6235958(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E814E460;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6235988(uint64_t a1)
{
  llvm::Regex::~Regex((llvm::Regex *)(a1 + 24));
}

uint64_t llvm::DiagnosticInfoInlineAsm::print(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 128))(a2, *(_QWORD *)(a1 + 24));
  if (*(_QWORD *)(a1 + 16))
  {
    v5 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 48))(a2, " at line ");
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 80))(v5, *(_QWORD *)(a1 + 16));
  }
  return result;
}

uint64_t llvm::DiagnosticInfoResourceLimit::print(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 48))(a2, a1[3]);
  v4 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v3 + 48))(v3, " (");
  v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 80))(v4, a1[4]);
  v6 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v5 + 48))(v5, ") exceeds limit (");
  v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 80))(v6, a1[5]);
  v8 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v7 + 48))(v7, ") in function '");
  v9 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 136))(v8, a1[2]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, 39);
}

uint64_t llvm::DiagnosticInfoDebugMetadataVersion::print(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 48))(a2, "ignoring debug info with an invalid version (");
  v4 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 104))(v3, *(unsigned int *)(a1 + 24));
  v5 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v4 + 48))(v4, ") in ");
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 144))(v5, *(_QWORD *)(a1 + 16));
}

uint64_t llvm::DiagnosticInfoIgnoringInvalidDebugMetadata::print(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 48))(a2, "ignoring invalid debug info in ");
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(v3, *(_QWORD *)(a1 + 16) + 168);
}

uint64_t llvm::DiagnosticInfoSampleProfile::print(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (*(_QWORD *)(a1 + 24))
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 40))(a2, *(_QWORD *)(a1 + 16));
    if (*(_DWORD *)(a1 + 32))
    {
      v4 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 48))(a2, ":");
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 104))(v4, *(unsigned int *)(a1 + 32));
    }
    (*(void (**)(uint64_t, const char *))(*(_QWORD *)a2 + 48))(a2, ": ");
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 128))(a2, *(_QWORD *)(a1 + 40));
}

uint64_t llvm::DiagnosticInfoPGOProfile::print(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (*(_QWORD *)(a1 + 16))
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
    (*(void (**)(uint64_t, const char *))(*(_QWORD *)v4 + 48))(v4, ": ");
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 128))(a2, *(_QWORD *)(a1 + 24));
}

uint64_t llvm::DiagnosticLocation::getRelativePath(llvm::DiagnosticLocation *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)this - 8 * *(unsigned int *)(*(_QWORD *)this + 8));
  if (v1)
    return *(_QWORD *)(v1 + 8) + 24;
  else
    return 0;
}

void llvm::DiagnosticInfoWithLocationBase::getAbsolutePath(llvm::DiagnosticInfoWithLocationBase *this@<X0>, _QWORD *a2@<X8>)
{
  llvm::DiagnosticLocation::getAbsolutePath((llvm::DiagnosticInfoWithLocationBase *)((char *)this + 24), a2);
}

uint64_t llvm::DiagnosticInfoWithLocationBase::getLocation(uint64_t this, llvm::StringRef *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)(this + 24) - 8 * *(unsigned int *)(*(_QWORD *)(this + 24) + 8));
  if (v4)
  {
    v5 = *(uint64_t **)(v4 + 8);
    v7 = *v5;
    v6 = v5 + 3;
    v4 = v7;
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)a2 = v6;
  *((_QWORD *)a2 + 1) = v4;
  *a3 = *(_DWORD *)(this + 32);
  *a4 = *(_DWORD *)(this + 36);
  return this;
}

void llvm::DiagnosticInfoWithLocationBase::getLocationStr(llvm::DiagnosticInfoWithLocationBase *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  const char *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10[4];
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14[4];
  __int16 v15;
  uint64_t v16[4];
  __int16 v17;
  uint64_t v18[5];
  uint64_t v19[5];
  _BYTE v20[40];

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 - 8 * *(unsigned int *)(v3 + 8));
    if (v4)
    {
      v5 = *(_QWORD **)(v4 + 8);
      v7 = *v5;
      v6 = (const char *)(v5 + 3);
      v4 = v7;
    }
    else
    {
      v6 = 0;
    }
    v8 = *((_DWORD *)this + 8);
    v9 = *((_DWORD *)this + 9);
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v4 = 9;
    v6 = "<unknown>";
  }
  v17 = 773;
  v16[0] = (uint64_t)v6;
  v16[1] = v4;
  v16[2] = (uint64_t)":";
  v15 = 264;
  LODWORD(v14[0]) = v8;
  sub_1C4825FE4(v16, v14, (uint64_t)v18);
  v12 = ":";
  v13 = 259;
  sub_1C4825FE4(v18, (uint64_t *)&v12, (uint64_t)v19);
  v11 = 264;
  LODWORD(v10[0]) = v9;
  sub_1C4825FE4(v19, v10, (uint64_t)v20);
  llvm::Twine::str((llvm::Twine *)v20, a2);
}

std::string *llvm::DiagnosticInfoOptimizationBase::Argument::Argument(std::string *a1, const std::string::value_type *a2, std::string::size_type a3, float a4)
{
  float v6;

  v6 = a4;
  std::string::__init(a1, a2, a3);
  sub_1C53AFDD0(&v6, (uint64_t)&a1[1]);
  a1[2].__r_.__value_.__r.__words[0] = 0;
  a1[2].__r_.__value_.__l.__size_ = 0;
  return a1;
}

std::string *llvm::DiagnosticInfoOptimizationBase::Argument::Argument(std::string *a1, const std::string::value_type *a2, std::string::size_type a3, unint64_t a4)
{
  std::string::__init(a1, a2, a3);
  sub_1C53AFA6C(a4, a1[1].__r_.__value_.__r.__words);
  a1[2].__r_.__value_.__r.__words[0] = 0;
  a1[2].__r_.__value_.__l.__size_ = 0;
  return a1;
}

{
  char *v6;
  BOOL v7;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  std::string::__init(a1, a2, a3);
  if (a4)
  {
    v6 = (char *)&v10;
    do
    {
      *--v6 = (a4 % 0xA) | 0x30;
      v7 = a4 > 9;
      a4 /= 0xAuLL;
    }
    while (v7);
  }
  else
  {
    v6 = &v9;
    v9 = 48;
  }
  sub_1C4E61270(a1[1].__r_.__value_.__r.__words, v6, (char *)&v10, (char *)&v10 - v6);
  a1[2].__r_.__value_.__r.__words[0] = 0;
  a1[2].__r_.__value_.__l.__size_ = 0;
  return a1;
}

{
  char *v6;
  BOOL v7;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  std::string::__init(a1, a2, a3);
  if (a4)
  {
    v6 = (char *)&v10;
    do
    {
      *--v6 = (a4 % 0xA) | 0x30;
      v7 = a4 > 9;
      a4 /= 0xAuLL;
    }
    while (v7);
  }
  else
  {
    v6 = &v9;
    v9 = 48;
  }
  sub_1C4E61270(a1[1].__r_.__value_.__r.__words, v6, (char *)&v10, (char *)&v10 - v6);
  a1[2].__r_.__value_.__r.__words[0] = 0;
  a1[2].__r_.__value_.__l.__size_ = 0;
  return a1;
}

std::string *llvm::DiagnosticInfoOptimizationBase::Argument::Argument(std::string *a1, const std::string::value_type *a2, std::string::size_type a3, unsigned int a4)
{
  char *v6;
  unint64_t v7;
  BOOL v8;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  std::string::__init(a1, a2, a3);
  if (a4)
  {
    v6 = (char *)&v11;
    v7 = a4;
    do
    {
      *--v6 = (v7 % 0xA) | 0x30;
      v8 = v7 > 9;
      v7 /= 0xAuLL;
    }
    while (v8);
  }
  else
  {
    v6 = &v10;
    v10 = 48;
  }
  sub_1C4E61270(a1[1].__r_.__value_.__r.__words, v6, (char *)&v11, (char *)&v11 - v6);
  a1[2].__r_.__value_.__r.__words[0] = 0;
  a1[2].__r_.__value_.__l.__size_ = 0;
  return a1;
}

uint64_t llvm::OptimizationRemark::isEnabled(llvm::LLVMContext ****this)
{
  uint64_t DiagHandlerPtr;
  const char *v3;
  size_t v4;

  DiagHandlerPtr = llvm::LLVMContext::getDiagHandlerPtr(**this[2]);
  v3 = (const char *)this[5];
  if (v3)
    v4 = strlen(v3);
  else
    v4 = 0;
  return (*(uint64_t (**)(uint64_t, const char *, size_t))(*(_QWORD *)DiagHandlerPtr + 40))(DiagHandlerPtr, v3, v4);
}

uint64_t llvm::OptimizationRemarkMissed::isEnabled(llvm::LLVMContext ****this)
{
  uint64_t DiagHandlerPtr;
  const char *v3;
  size_t v4;

  DiagHandlerPtr = llvm::LLVMContext::getDiagHandlerPtr(**this[2]);
  v3 = (const char *)this[5];
  if (v3)
    v4 = strlen(v3);
  else
    v4 = 0;
  return (*(uint64_t (**)(uint64_t, const char *, size_t))(*(_QWORD *)DiagHandlerPtr + 32))(DiagHandlerPtr, v3, v4);
}

BOOL llvm::OptimizationRemarkAnalysis::isEnabled(llvm::OptimizationRemarkAnalysis *this)
{
  uint64_t DiagHandlerPtr;
  uint64_t v3;
  size_t v4;

  DiagHandlerPtr = llvm::LLVMContext::getDiagHandlerPtr(***((llvm::LLVMContext ****)this + 2));
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = strlen(*((const char **)this + 5));
  else
    v4 = 0;
  return ((*(uint64_t (**)(uint64_t, uint64_t, size_t))(*(_QWORD *)DiagHandlerPtr + 24))(DiagHandlerPtr, v3, v4) & 1) != 0|| sub_1C62364F4(*((const char **)this + 5));
}

BOOL sub_1C62364F4(const char *a1)
{
  size_t v2;
  size_t v3;

  if (a1)
  {
    v2 = strlen(a1);
    v3 = v2;
    if (llvm::OptimizationRemarkAnalysis::AlwaysPrint)
    {
      if (v2 == strlen(llvm::OptimizationRemarkAnalysis::AlwaysPrint))
      {
        if (v3)
          return memcmp(a1, llvm::OptimizationRemarkAnalysis::AlwaysPrint, v3) == 0;
        return 1;
      }
    }
    else if (!v2)
    {
      return 1;
    }
    return 0;
  }
  if (!llvm::OptimizationRemarkAnalysis::AlwaysPrint)
    return 1;
  return *llvm::OptimizationRemarkAnalysis::AlwaysPrint == 0;
}

uint64_t llvm::DiagnosticInfoSrcMgr::print(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(_QWORD *)(a1 + 16));
}

BOOL llvm::DiagnosticInfoOptimizationFailure::isEnabled(llvm::DiagnosticInfoOptimizationFailure *this)
{
  return *((_BYTE *)this + 12) == 1;
}

uint64_t llvm::DiagnosticInfoISelFallback::print(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 48))(a2, "Instruction selection used fallback path for ");
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 136))(v3, *(_QWORD *)(a1 + 16));
}

uint64_t llvm::DiagnosticInfoOptimizationBase::insert(uint64_t result)
{
  *(_BYTE *)(result + 352) = 1;
  return result;
}

{
  *(_DWORD *)(result + 356) = *(_DWORD *)(result + 88);
  return result;
}

uint64_t llvm::DiagnosticInfoDontCall::print(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;

  v4 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 48))(a2, "call to ");
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  (*(void (**)(uint64_t, const char *))(*(_QWORD *)v5 + 48))(v5, " marked \"dontcall-");
  if (*(_BYTE *)(a1 + 12))
    v6 = "warn\"";
  else
    v6 = "error\"";
  result = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 48))(a2, v6);
  if (*(_QWORD *)(a1 + 40))
  {
    v8 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 48))(a2, ": ");
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1C62367C4()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C62367DC()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C62367F4()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C623680C()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6236824()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C623683C()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C623686C(uint64_t a1)
{
  sub_1C50B4134(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6236894(uint64_t a1)
{
  sub_1C50B4134(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C62368C0(uint64_t a1)
{
  sub_1C50B4134(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C62368E8(uint64_t a1)
{
  sub_1C50B4134(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6236910()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6236928(uint64_t a1)
{
  sub_1C50B4134(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6236950()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6236964()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C623697C()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6236990(uint64_t a1, uint64_t a2)
{
  char *v4;
  std::string *v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  int v8;
  uint64_t v9;
  unint64_t v11;

  v11 = 0;
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 64, &v11);
  v5 = (std::string *)&v4[64 * (unint64_t)*(unsigned int *)(a1 + 8)];
  v6 = *(const std::string::value_type **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *((_BYTE *)&v5->__r_.__value_.__s + 23) = 6;
  strcpy((char *)v5, "String");
  std::string::__init(v5 + 1, v6, v7);
  v5[2].__r_.__value_.__r.__words[0] = 0;
  v5[2].__r_.__value_.__l.__size_ = 0;
  sub_1C4E5D038((__int128 **)a1, (uint64_t)v4);
  v8 = v11;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  v9 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v8;
  return (uint64_t)&v4[64 * v9 - 64];
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, char a2)
{
  llvm::raw_ostream *v3;
  char *v4;

  v3 = *(llvm::raw_ostream **)(a1 + 8);
  v4 = (char *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
  {
    llvm::raw_ostream::write(v3, a2);
  }
  else
  {
    *((_QWORD *)v3 + 4) = v4 + 1;
    *v4 = a2;
  }
  return a1;
}

{
  llvm::raw_ostream *v3;
  char *v4;

  v3 = *(llvm::raw_ostream **)(a1 + 8);
  v4 = (char *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
  {
    llvm::raw_ostream::write(v3, a2);
  }
  else
  {
    *((_QWORD *)v3 + 4) = v4 + 1;
    *v4 = a2;
  }
  return a1;
}

{
  llvm::raw_ostream *v3;
  char *v4;

  v3 = *(llvm::raw_ostream **)(a1 + 8);
  v4 = (char *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
  {
    llvm::raw_ostream::write(v3, a2);
  }
  else
  {
    *((_QWORD *)v3 + 4) = v4 + 1;
    *v4 = a2;
  }
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, const void *a2, size_t a3)
{
  llvm::raw_ostream *v5;
  void *v6;

  v5 = *(llvm::raw_ostream **)(a1 + 8);
  v6 = (void *)*((_QWORD *)v5 + 4);
  if (a3 <= *((_QWORD *)v5 + 3) - (_QWORD)v6)
  {
    if (a3)
    {
      memcpy(v6, a2, a3);
      *((_QWORD *)v5 + 4) += a3;
    }
  }
  else
  {
    llvm::raw_ostream::write(v5, (const char *)a2, a3);
  }
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, char *a2)
{
  sub_1C4816AD8(*(llvm::raw_ostream **)(a1 + 8), a2);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, uint64_t *a2)
{
  llvm::raw_ostream *v3;
  char v4;
  BOOL v5;
  size_t v6;
  size_t v7;
  size_t v8;

  v3 = *(llvm::raw_ostream **)(a1 + 8);
  v4 = *((_BYTE *)a2 + 23);
  v5 = v4 < 0;
  v6 = a2[1];
  if (v4 < 0)
    a2 = (uint64_t *)*a2;
  v7 = v4 & 0x7F;
  if (v5)
    v8 = v6;
  else
    v8 = v7;
  llvm::raw_ostream::write(v3, (const char *)a2, v8);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, unint64_t a2)
{
  llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)(a1 + 8), a2);
  return a1;
}

{
  llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)(a1 + 8), a2);
  return a1;
}

{
  llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)(a1 + 8), a2);
  return a1;
}

{
  llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)(a1 + 8), a2);
  return a1;
}

{
  llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)(a1 + 8), a2);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, unsigned int a2)
{
  llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)(a1 + 8), a2);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, int a2)
{
  llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)(a1 + 8), a2);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, double a2)
{
  llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)(a1 + 8), a2);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, llvm::Twine *this)
{
  llvm::Twine::print(this, *(llvm::raw_ostream **)(a1 + 8));
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, llvm::Value *this)
{
  llvm::raw_ostream *v3;
  size_t v4;
  char *Name;
  size_t v6;
  void *v7;

  v3 = *(llvm::raw_ostream **)(a1 + 8);
  Name = llvm::Value::getName(this);
  v6 = v4;
  v7 = (void *)*((_QWORD *)v3 + 4);
  if (v4 <= *((_QWORD *)v3 + 3) - (_QWORD)v7)
  {
    if (v4)
    {
      memcpy(v7, Name, v4);
      *((_QWORD *)v3 + 4) += v6;
    }
  }
  else
  {
    llvm::raw_ostream::write(v3, Name, v4);
  }
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  char v7;
  int v8;
  size_t v9;
  size_t v10;

  v3 = *(llvm::raw_ostream **)(a1 + 8);
  v6 = *(const char **)(a2 + 168);
  v4 = a2 + 168;
  v5 = v6;
  v7 = *(_BYTE *)(v4 + 23);
  v8 = v7;
  if (v7 >= 0)
    v5 = (const char *)v4;
  v9 = v7 & 0x7F;
  if (v8 >= 0)
    v10 = v9;
  else
    v10 = *(_QWORD *)(v4 + 8);
  llvm::raw_ostream::write(v3, v5, v10);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, llvm::SMDiagnostic *this)
{
  llvm::SMDiagnostic::print(this, "", *(llvm::raw_ostream **)(a1 + 8), 1, 0);
  return a1;
}

void sub_1C6236E78()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6236E8C(uint64_t result, char *a2, char *a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int64_t v10;
  uint64_t v11;

  v3 = a3 - a2;
  v4 = *(unsigned int *)(result + 8);
  v5 = v4 + ((a3 - a2) >> 3);
  if (v5 > *(unsigned int *)(result + 12))
  {
    v10 = a3 - a2;
    v11 = result;
    v8 = a3;
    v9 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v5, 8);
    a2 = v9;
    v3 = v10;
    a3 = v8;
    result = v11;
    v4 = *(unsigned int *)(v11 + 8);
  }
  if (a2 != a3)
  {
    v6 = (_QWORD *)(*(_QWORD *)result + 8 * v4);
    do
    {
      v7 = *(_QWORD *)a2;
      a2 += 8;
      *v6++ = v7;
    }
    while (a2 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + (v3 >> 3);
  return result;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::setNewRoot(uint64_t a1, uint64_t a2)
{
  uint64_t Node;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)(a1 + 64) = 0;
  Node = llvm::DominatorTreeBase<llvm::BasicBlock,false>::createNode(a1, a2);
  if (*(_DWORD *)(a1 + 8))
  {
    v13 = **(_QWORD **)a1;
    v5 = sub_1C53BE4A4(a1 + 24, &v13);
    v6 = sub_1C53BE4A4(a1 + 24, &v13);
    v7 = v6[1];
    v6[1] = 0;
    v8 = *(unsigned int *)(Node + 32);
    if (v8 >= *(_DWORD *)(Node + 36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(Node + 24, Node + 40, v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(Node + 32);
    }
    *(_QWORD *)(*(_QWORD *)(Node + 24) + 8 * v8) = v7;
    ++*(_DWORD *)(Node + 32);
    v9 = v5[1];
    v5[1] = v7;
    if (v9)
    {
      v10 = *(void **)(v9 + 24);
      if (v10 != (void *)(v9 + 40))
        free(v10);
      MEMORY[0x1CAA32FC0](v9, 0x10A0C40528A66C4);
      v7 = v5[1];
    }
    *(_QWORD *)(v7 + 8) = Node;
    llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel(v5[1]);
    **(_QWORD **)a1 = a2;
  }
  else
  {
    if (*(_DWORD *)(a1 + 12))
    {
      v12 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, 1uLL, 8);
      v12 = *(unsigned int *)(a1 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = a2;
    ++*(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 48) = Node;
  return Node;
}

{
  return __ZN4llvm17DominatorTreeBaseINS_10BasicBlockELb0EE10setNewRootEPS1_(a1, a2);
}

llvm::raw_ostream *llvm::DominatorTreeBase<llvm::BasicBlock,false>::print(uint64_t a1, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Value **v7;
  uint64_t v8;
  llvm::Value *v9;

  sub_1C4816AD8(a2, "=============================--------------------------------\n");
  sub_1C4816AD8(a2, "Inorder Dominator Tree: ");
  if (!*(_BYTE *)(a1 + 64))
  {
    v4 = sub_1C4816AD8(a2, "DFSNumbers invalid: ");
    sub_1C5E21910(v4, *(unsigned int *)(a1 + 68), 0, 0, 0);
    sub_1C4816AD8(v4, " slow queries.");
  }
  sub_1C4816AD8(a2, "\n");
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    sub_1C61AD14C(v5, a2, 1u);
  sub_1C4816AD8(a2, "Roots: ");
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6)
  {
    v7 = *(llvm::Value ***)a1;
    v8 = 8 * v6;
    do
    {
      v9 = *v7++;
      llvm::Value::printAsOperand(v9, a2, 0, 0);
      sub_1C4816AD8(a2, " ");
      v8 -= 8;
    }
    while (v8);
  }
  return sub_1C4816AD8(a2, "\n");
}

{
  return __ZNK4llvm17DominatorTreeBaseINS_10BasicBlockELb0EE5printERNS_11raw_ostreamE(a1, a2);
}

llvm::raw_ostream *llvm::DominatorTreeBase<llvm::BasicBlock,true>::print(uint64_t a1, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Value **v7;
  uint64_t v8;
  llvm::Value *v9;

  sub_1C4816AD8(a2, "=============================--------------------------------\n");
  sub_1C4816AD8(a2, "Inorder PostDominator Tree: ");
  if (!*(_BYTE *)(a1 + 88))
  {
    v4 = sub_1C4816AD8(a2, "DFSNumbers invalid: ");
    sub_1C5E21910(v4, *(unsigned int *)(a1 + 92), 0, 0, 0);
    sub_1C4816AD8(v4, " slow queries.");
  }
  sub_1C4816AD8(a2, "\n");
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
    sub_1C61AD14C(v5, a2, 1u);
  sub_1C4816AD8(a2, "Roots: ");
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6)
  {
    v7 = *(llvm::Value ***)a1;
    v8 = 8 * v6;
    do
    {
      v9 = *v7++;
      llvm::Value::printAsOperand(v9, a2, 0, 0);
      sub_1C4816AD8(a2, " ");
      v8 -= 8;
    }
    while (v8);
  }
  return sub_1C4816AD8(a2, "\n");
}

{
  return __ZNK4llvm17DominatorTreeBaseINS_10BasicBlockELb1EE5printERNS_11raw_ostreamE(a1, a2);
}

uint64_t llvm::cfg::Update<llvm::BasicBlock *>::print(uint64_t a1, llvm::raw_ostream *a2)
{
  char *v4;

  if ((*(_QWORD *)(a1 + 8) & 4) != 0)
    v4 = "Delete ";
  else
    v4 = "Insert ";
  sub_1C4816AD8(a2, v4);
  llvm::Value::printAsOperand(*(llvm::Value **)a1, a2, 0, 0);
  sub_1C4816AD8(a2, " -> ");
  return llvm::Value::printAsOperand((llvm::Value *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8), a2, 0, 0);
}

{
  return __ZNK4llvm3cfg6UpdateIPNS_10BasicBlockEE5printERNS_11raw_ostreamE(a1, a2);
}

uint64_t llvm::cfg::Update<llvm::BasicBlock *>::dump(llvm *a1)
{
  llvm *v2;

  v2 = llvm::dbgs(a1);
  return llvm::cfg::Update<llvm::BasicBlock *>::print((uint64_t)a1, v2);
}

_QWORD *llvm::DominatorTreePrinterPass::DominatorTreePrinterPass(_QWORD *this, llvm::raw_ostream *a2)
{
  *this = a2;
  return this;
}

_QWORD *llvm::DominatorTreePrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::raw_ostream *v8;
  size_t v9;
  char *Name;
  size_t v11;
  void *v12;
  uint64_t ResultImpl;

  v8 = sub_1C4816AD8(*a1, "DominatorTree for function: ");
  Name = llvm::Value::getName(a2);
  v11 = v9;
  v12 = (void *)*((_QWORD *)v8 + 4);
  if (v9 <= *((_QWORD *)v8 + 3) - (_QWORD)v12)
  {
    if (v9)
    {
      memcpy(v12, Name, v9);
      *((_QWORD *)v8 + 4) += v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(v8, Name, v9);
  }
  sub_1C4816AD8(v8, "\n");
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a2);
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::print(ResultImpl + 8, *a1);
  return llvm::InstCountPass::run(a4);
}

_QWORD *llvm::DominatorTreeVerifierPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1);
  return llvm::InstCountPass::run(a3);
}

llvm::DominatorTreeWrapperPass *llvm::DominatorTreeWrapperPass::DominatorTreeWrapperPass(llvm::DominatorTreeWrapperPass *this)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = llvm::DominatorTreeWrapperPass::ID;
  *((_DWORD *)this + 6) = 2;
  *(_QWORD *)this = &off_1E814EA40;
  *((_QWORD *)this + 4) = (char *)this + 48;
  *((_QWORD *)this + 5) = 0x100000000;
  *((_DWORD *)this + 25) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 96) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  v2 = atomic_load(&qword_1ED830690);
  if (v2 != -1)
  {
    v6[0] = sub_1C53BE370;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1ED830690, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

llvm::raw_ostream *llvm::DominatorTreeWrapperPass::print(llvm::DominatorTreeWrapperPass *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  return llvm::DominatorTreeBase<llvm::BasicBlock,false>::print((uint64_t)this + 32, a2);
}

void sub_1C6237508(uint64_t *a1)
{
  sub_1C53BE460(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C623752C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

llvm::DominatorTreeWrapperPass *llvm::callDefaultCtor<llvm::DominatorTreeWrapperPass>()
{
  llvm::DominatorTreeWrapperPass *v0;

  v0 = (llvm::DominatorTreeWrapperPass *)operator new();
  return llvm::DominatorTreeWrapperPass::DominatorTreeWrapperPass(v0);
}

uint64_t sub_1C6237560(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    sub_1C62375B8(a1, (_DWORD *)a2);
    sub_1C62375B8(a1 + 296, (_DWORD *)(a2 + 296));
  }
  *(_BYTE *)(a1 + 592) = *(_BYTE *)(a2 + 592);
  sub_1C614EBE4(a1 + 600, a2 + 600);
  return a1;
}

uint64_t sub_1C62375B8(uint64_t a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;

  sub_1C4E28CDC(a1);
  v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
    v4 = *(_DWORD *)a1;
  }
  *(_DWORD *)a1 = v4 | 1;
  if ((*(_BYTE *)a2 & 1) == 0 && a2[4] >= 5u)
  {
    *(_DWORD *)a1 = v4 & 0xFFFFFFFE;
    if ((*a2 & 1) != 0)
      v5 = 4;
    else
      v5 = a2[4];
    *(_QWORD *)(a1 + 8) = operator new(8 * (v5 + 8 * v5), (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v5;
  }
  return sub_1C6237650(a1, a2);
}

uint64_t sub_1C6237650(uint64_t result, _DWORD *a2)
{
  unsigned int *v3;
  unint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v3 = (unsigned int *)result;
  v4 = 0;
  v5 = *a2 & 0xFFFFFFFE | *(_DWORD *)result & 1;
  *(_DWORD *)result = v5;
  *(_DWORD *)(result + 4) = a2[1];
  v6 = (_QWORD *)(result + 8);
  v7 = a2 + 2;
  while ((v5 & 1) == 0)
  {
    if (v4 >= v3[4])
      return result;
    v8 = (_QWORD *)*v6;
LABEL_6:
    v9 = v7;
    if ((*(_BYTE *)a2 & 1) == 0)
      v9 = (_QWORD *)*v7;
    v8[9 * v4] = v9[9 * v4];
    v5 = *v3;
    if ((*v3 & 1) != 0)
    {
      v11 = v6[9 * v4] | 0x1000;
      v10 = v6;
    }
    else
    {
      v10 = (_QWORD *)*v6;
      v11 = *(_QWORD *)(*v6 + 72 * v4) | 0x1000;
    }
    if (v11 != -4096)
    {
      v12 = v7;
      if ((*(_BYTE *)a2 & 1) == 0)
        v12 = (_QWORD *)*v7;
      v13 = 0;
      v14 = 0;
      v15 = (uint64_t)&v10[9 * v4 + 1];
      v16 = (uint64_t)&v12[9 * v4 + 1];
      do
      {
        v17 = v13;
        result = v15 + 32 * v14;
        v18 = v16 + 32 * v14;
        *(_QWORD *)result = result + 16;
        *(_QWORD *)(result + 8) = 0x200000000;
        if (*(_DWORD *)(v18 + 8))
          result = sub_1C49EEBE4(result, v18);
        v13 = 1;
        v14 = 1;
      }
      while ((v17 & 1) == 0);
      v5 = *v3;
    }
    ++v4;
  }
  v8 = v6;
  if (v4 < 4)
    goto LABEL_6;
  return result;
}

BOOL sub_1C62377A8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v5 = *a1;
  v11 = 0;
  v12 = a2;
  if (sub_1C4DD8A9C((uint64_t *)v5, &v12, &v11))
    v6 = v11;
  else
    v6 = *(_QWORD *)v5 + 16 * *(unsigned int *)(v5 + 16);
  v7 = *(_DWORD *)(v6 + 8);
  v8 = *a1;
  v11 = 0;
  v12 = a3;
  if (sub_1C4DD8A9C((uint64_t *)v8, &v12, &v11))
    v9 = v11;
  else
    v9 = *(_QWORD *)v8 + 16 * *(unsigned int *)(v8 + 16);
  return v7 < *(_DWORD *)(v9 + 8);
}

uint64_t sub_1C6237848(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    sub_1C62378A0(a1, (_DWORD *)a2);
    sub_1C62378A0(a1 + 296, (_DWORD *)(a2 + 296));
  }
  *(_BYTE *)(a1 + 592) = *(_BYTE *)(a2 + 592);
  sub_1C614EBE4(a1 + 600, a2 + 600);
  return a1;
}

uint64_t sub_1C62378A0(uint64_t a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;

  sub_1C4E29620(a1);
  v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
    v4 = *(_DWORD *)a1;
  }
  *(_DWORD *)a1 = v4 | 1;
  if ((*(_BYTE *)a2 & 1) == 0 && a2[4] >= 5u)
  {
    *(_DWORD *)a1 = v4 & 0xFFFFFFFE;
    if ((*a2 & 1) != 0)
      v5 = 4;
    else
      v5 = a2[4];
    *(_QWORD *)(a1 + 8) = operator new(8 * (v5 + 8 * v5), (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v5;
  }
  return sub_1C6237650(a1, a2);
}

BOOL sub_1C6237938(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v5 = *a1;
  v11 = 0;
  v12 = a2;
  if (sub_1C4DD8A9C((uint64_t *)v5, &v12, &v11))
    v6 = v11;
  else
    v6 = *(_QWORD *)v5 + 16 * *(unsigned int *)(v5 + 16);
  v7 = *(_DWORD *)(v6 + 8);
  v8 = *a1;
  v11 = 0;
  v12 = a3;
  if (sub_1C4DD8A9C((uint64_t *)v8, &v12, &v11))
    v9 = v11;
  else
    v9 = *(_QWORD *)v8 + 16 * *(unsigned int *)(v8 + 16);
  return v7 < *(_DWORD *)(v9 + 8);
}

uint64_t sub_1C62379D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v12[5];
  int v13;
  uint64_t v14;

  v10 = operator new(8uLL);
  v12[0] = (uint64_t)v10;
  *v10 = 0;
  v12[1] = (uint64_t)(v10 + 1);
  v12[2] = (uint64_t)(v10 + 1);
  v12[3] = 0;
  v12[4] = 0;
  v13 = 0;
  v14 = a2;
  sub_1C53C612C((uint64_t)v12, a3, a1, a5);
  sub_1C53C12D8(v12, a1, 0);
  sub_1C53C1DFC((uint64_t)v12, a1, a4);
  return sub_1C515725C((uint64_t)v12);
}

uint64_t sub_1C6237A78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a2;
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1C53C6738(*(_QWORD *)a1, *(_QWORD *)a1 + 8 * v5);
}

uint64_t sub_1C6237ADC(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 240);
  if (v2 != (void *)(a1 + 256))
    free(v2);
  v3 = *(void **)(a1 + 160);
  if (v3 != (void *)(a1 + 176))
    free(v3);
  if ((*(_BYTE *)(a1 + 88) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 96), 8);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

uint64_t llvm::convertRoundingModeToStr@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (result <= 7 && ((0x9Fu >> result) & 1) != 0)
  {
    v2 = qword_1C85FD958[(int)result];
    *(_QWORD *)a2 = off_1E814EAD0[(int)result];
    *(_QWORD *)(a2 + 8) = v2;
    *(_BYTE *)(a2 + 16) = 1;
  }
  return result;
}

uint64_t llvm::convertExceptionBehaviorToStr@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (result <= 2)
  {
    v2 = qword_1C85FD998[(char)result];
    *(_QWORD *)a2 = off_1E814EB10[(char)result];
    *(_QWORD *)(a2 + 8) = v2;
    *(_BYTE *)(a2 + 16) = 1;
  }
  return result;
}

uint64_t llvm::Argument::hasPointeeInMemoryValueAttr(llvm::Argument *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(*(_QWORD *)this + 8) != 15)
    return 0;
  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
  if (!v1)
    return 0;
  v2 = (*((_DWORD *)this + 8) + 2);
  if (v2 >= *(_DWORD *)(v1 + 8))
    return 0;
  v4 = v1 + 40;
  v5 = *(_QWORD *)(v4 + 8 * v2);
  if (v5 && (*(_BYTE *)(v5 + 20) & 0x20) != 0)
    return 1;
  v6 = *(_QWORD *)(v4 + 8 * v2);
  if (v6)
  {
    if ((*(_BYTE *)(v6 + 21) & 2) != 0)
      return 1;
  }
  v7 = *(_QWORD *)(v4 + 8 * v2);
  if (v7)
  {
    if (*(char *)(v7 + 20) < 0)
      return 1;
  }
  v8 = *(_QWORD *)(v4 + 8 * v2);
  if (v8)
  {
    if ((*(_BYTE *)(v8 + 21) & 1) != 0)
      return 1;
  }
  v9 = *(_QWORD *)(v4 + 8 * v2);
  if (!v9)
    return 0;
  return (*(unsigned __int8 *)(v9 + 20) >> 4) & 1;
}

uint64_t llvm::Argument::getPassPointeeByValueCopySize(llvm::Argument *this, const llvm::DataLayout *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  BOOL v11;
  char v12;
  const char *v13;
  _QWORD v14[2];

  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
  if (v3 && (v4 = *((_DWORD *)this + 8) + 2, v4 < *(_DWORD *)(v3 + 8)))
    v5 = *(_QWORD *)(v3 + 8 * v4 + 40);
  else
    v5 = 0;
  result = sub_1C53C92C8(v5);
  if (result)
  {
    v7 = result;
    sub_1C4768AD0((uint64_t)a2, result);
    v9 = (unint64_t)(v8 + 7) >> 3;
    v11 = v10 == 1;
    llvm::DataLayout::getAlignment((uint64_t)a2, v7);
    v14[0] = ((1 << v12) + v9 - 1) & -(1 << v12);
    v14[1] = v11;
    return llvm::TypeSize::operator unsigned long long(v14, v13);
  }
  return result;
}

uint64_t llvm::Argument::getParamAlignment(llvm::Argument *this)
{
  __int16 ParamAlignment;

  ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(*((_QWORD *)this + 3) + 112), *((_DWORD *)this + 8));
  if ((ParamAlignment & 0xFF00) != 0)
    return 1 << ParamAlignment;
  else
    return 0;
}

uint64_t llvm::Argument::getParamStackAlign(llvm::Argument *this)
{
  return llvm::AttributeList::getParamStackAlignment((llvm::AttributeList *)(*((_QWORD *)this + 3) + 112), *((_DWORD *)this + 8));
}

uint64_t llvm::Argument::getParamByRefType(llvm::Argument *this)
{
  return llvm::AttributeList::getParamByRefType((llvm::AttributeList *)(*((_QWORD *)this + 3) + 112), *((_DWORD *)this + 8));
}

uint64_t llvm::Argument::hasNestAttr(llvm::Argument *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v4;

  if (*(_BYTE *)(*(_QWORD *)this + 8) == 15
    && (v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 112)) != 0
    && (v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8))
    && (v4 = *(_QWORD *)(v1 + 8 * v2 + 40)) != 0)
  {
    return (*(unsigned __int8 *)(v4 + 14) >> 2) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Argument::hasZExtAttr(llvm::Argument *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v4;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
  if (v1 && (v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8)) && (v4 = *(_QWORD *)(v1 + 8 * v2 + 40)) != 0)
    return (*(unsigned __int8 *)(v4 + 20) >> 3) & 1;
  else
    return 0;
}

uint64_t llvm::Argument::hasSExtAttr(llvm::Argument *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v4;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
  if (v1 && (v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8)) && (v4 = *(_QWORD *)(v1 + 8 * v2 + 40)) != 0)
    return *(_BYTE *)(v4 + 18) & 1;
  else
    return 0;
}

uint64_t llvm::Argument::addAttrs(llvm::Argument *this, llvm::AttrBuilder *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *((_QWORD *)this + 3);
  v5 = *(_QWORD *)(v3 + 112);
  result = llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)&v5, **(llvm::LLVMContext ***)v3, *((_DWORD *)this + 8) + 1, a2);
  *(_QWORD *)(*((_QWORD *)this + 3) + 112) = result;
  return result;
}

uint64_t llvm::Function::addParamAttr(uint64_t a1, int a2, int a3)
{
  uint64_t result;

  result = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, a2 + 1, a3);
  *(_QWORD *)(a1 + 112) = result;
  return result;
}

uint64_t llvm::Function::addParamAttr(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;
  int v5;

  v5 = a2;
  result = llvm::AttributeList::addParamAttribute((_QWORD *)(a1 + 112), **(uint64_t ***)a1, &v5, 1, a3);
  *(_QWORD *)(a1 + 112) = result;
  return result;
}

uint64_t llvm::Argument::getAttribute(uint64_t a1, int a2)
{
  return llvm::AttributeList::getAttributeAtIndex((uint64_t *)(*(_QWORD *)(a1 + 24) + 112), *(_DWORD *)(a1 + 32) + 1, a2);
}

uint64_t llvm::Function::getInstructionCount(llvm::Function *this)
{
  char *v1;
  char *v2;
  uint64_t v3;
  llvm::BasicBlock *v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[6];
  __int128 v12;
  _QWORD v13[3];
  _QWORD *v14;
  __int128 v15;
  _BYTE v16[24];
  _BYTE *v17;
  __int128 v18;
  _QWORD v19[3];
  _QWORD *v20;
  __int128 v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = (char *)this + 72;
  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 72)
  {
    LODWORD(v3) = 0;
    while (1)
    {
      v4 = v2 ? (llvm::BasicBlock *)(v2 - 24) : 0;
      llvm::BasicBlock::instructionsWithoutDebug(v4, 1, &v18);
      v21 = v18;
      if (v20)
      {
        if (v20 == v19)
        {
          v23 = v22;
          (*(void (**)(_QWORD *, _BYTE *))(v19[0] + 24))(v19, v22);
        }
        else
        {
          v23 = (_BYTE *)(*(uint64_t (**)(void))(*v20 + 16))();
        }
      }
      else
      {
        v23 = 0;
      }
      llvm::BasicBlock::instructionsWithoutDebug(v4, 1, v11);
      v15 = v12;
      if (v14)
      {
        if (v14 == v13)
        {
          v17 = v16;
          (*(void (**)(_QWORD *, _BYTE *))(v13[0] + 24))(v13, v16);
        }
        else
        {
          v17 = (_BYTE *)(*(uint64_t (**)(void))(*v14 + 16))();
        }
      }
      else
      {
        v17 = 0;
      }
      v5 = sub_1C534FAE4(&v21, &v15);
      v6 = v17;
      if (v17 == v16)
        break;
      if (v17)
      {
        v7 = 5;
        goto LABEL_12;
      }
LABEL_13:
      sub_1C619047C(v11);
      v8 = v23;
      if (v23 == v22)
      {
        v8 = v22;
        v9 = 4;
      }
      else
      {
        if (!v23)
          goto LABEL_16;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
      v3 = (v3 + v5);
      sub_1C619047C(&v18);
      v2 = (char *)*((_QWORD *)v2 + 1);
      if (v2 == v1)
        return v3;
    }
    v6 = v16;
    v7 = 4;
LABEL_12:
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_13;
  }
  return 0;
}

uint64_t *llvm::Function::Create(llvm::PointerType *a1, char a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  void *v9;

  v8 = (llvm::Type *)*(unsigned int *)(a4 + 284);
  v9 = operator new(0x80uLL);
  *((_DWORD *)v9 + 7) = *((_DWORD *)v9 + 7) & 0x38000000 | 0x40000000;
  *(_QWORD *)v9 = 0;
  return llvm::Function::Function((uint64_t *)v9 + 1, a1, a2, v8, a3, a4);
}

char *llvm::Function::createWithDefaultAttr(llvm::PointerType *a1, char a2, llvm::Type *a3, uint64_t a4, llvm::Module *a5)
{
  char *v10;
  int Uwtable;
  int FramePointer;
  char *v13;
  size_t v14;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[9];

  v19[8] = *MEMORY[0x1E0C80C00];
  v10 = (char *)operator new(0x80uLL);
  *((_DWORD *)v10 + 7) = *((_DWORD *)v10 + 7) & 0x38000000 | 0x40000000;
  *(_QWORD *)v10 = 0;
  llvm::Function::Function((uint64_t *)v10 + 1, a1, a2, a3, a4, (uint64_t)a5);
  v16 = (uint64_t *)**((_QWORD **)v10 + 1);
  v17 = v19;
  v18 = 0x800000000;
  Uwtable = llvm::Module::getUwtable(a5);
  if (Uwtable)
    llvm::AttrBuilder::addUWTableAttr(&v16, Uwtable);
  FramePointer = llvm::Module::getFramePointer(a5);
  if (FramePointer == 1)
  {
    v13 = "non-leaf";
    v14 = 8;
  }
  else
  {
    if (FramePointer != 2)
      goto LABEL_8;
    v13 = "all";
    v14 = 3;
  }
  llvm::AttrBuilder::addAttribute(&v16, "frame-pointer", 0xDuLL, (unsigned __int8 *)v13, v14);
LABEL_8:
  *((_QWORD *)v10 + 15) = llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)(v10 + 120), **((llvm::LLVMContext ***)v10 + 1), -1, (const llvm::AttrBuilder *)&v16);
  if (v17 != v19)
    free(v17);
  return v10 + 8;
}

void llvm::Function::removeFromParent(llvm::Function *this)
{
  uint64_t v2;
  _QWORD *v3;

  llvm::SymbolTableListTraits<llvm::Function>::removeNodeFromList(*((_QWORD *)this + 5) + 24, (uint64_t ***)this);
  v2 = *((_QWORD *)this + 7);
  v3 = (_QWORD *)*((_QWORD *)this + 8);
  *v3 = v2;
  *(_QWORD *)(v2 + 8) = v3;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
}

BOOL llvm::Function::isConstrainedFPIntrinsic(llvm::Function *this)
{
  return (*((_DWORD *)this + 9) - 79) < 0x28;
}

void llvm::Function::stealArgumentListFrom(llvm::Function *this, llvm::Function *a2)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *Name;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  __int16 v12;
  void *v13;
  __int128 v14;
  _QWORD v15[17];

  v15[16] = *MEMORY[0x1E0C80C00];
  v4 = *((_WORD *)this + 9);
  if ((v4 & 1) == 0)
  {
    llvm::Function::clearArguments(this);
    v4 = *((_WORD *)this + 9) | 1;
    *((_WORD *)this + 9) = v4;
  }
  if ((*((_WORD *)a2 + 9) & 1) == 0)
  {
    *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
    *((_QWORD *)a2 + 11) = 0;
    v5 = *((_QWORD *)this + 12);
    if (v5)
    {
      v6 = *((_QWORD *)this + 11);
      v7 = 40 * v5;
      do
      {
        v13 = v15;
        v14 = xmmword_1C85F20B0;
        if ((*(_BYTE *)(v6 + 23) & 0x10) != 0
          && (Name = llvm::Value::getName((llvm::Value *)v6), sub_1C52C2F74(&v13, Name, &Name[v9]), (_QWORD)v14))
        {
          v12 = 257;
          llvm::Value::setName((uint64_t ***)v6, (uint64_t)v11);
          v10 = v14;
          *(_QWORD *)(v6 + 24) = this;
          if (v10)
          {
            v12 = 261;
            v11[0] = v13;
            v11[1] = v10;
            llvm::Value::setName((uint64_t ***)v6, (uint64_t)v11);
          }
        }
        else
        {
          *(_QWORD *)(v6 + 24) = this;
        }
        if (v13 != v15)
          free(v13);
        v6 += 40;
        v7 -= 40;
      }
      while (v7);
      v4 = *((_WORD *)this + 9);
    }
    *((_WORD *)this + 9) = v4 & 0xFFFE;
    *((_WORD *)a2 + 9) |= 1u;
  }
}

uint64_t llvm::Function::addFnAttr(llvm::LLVMContext ***a1, uint64_t a2)
{
  uint64_t result;

  result = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a1 + 14), **a1, -1, a2);
  a1[14] = (llvm::LLVMContext **)result;
  return result;
}

uint64_t llvm::Function::addRetAttr(uint64_t a1, int a2)
{
  uint64_t result;

  result = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, 0, a2);
  *(_QWORD *)(a1 + 112) = result;
  return result;
}

llvm::LLVMContext **llvm::Function::addParamAttrs(llvm::LLVMContext ***this, int a2, const llvm::AttrBuilder *a3)
{
  llvm::LLVMContext **result;

  result = (llvm::LLVMContext **)llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)(this + 14), **this, a2 + 1, a3);
  this[14] = result;
  return result;
}

uint64_t llvm::Function::removeParamAttr(uint64_t a1, int a2, _QWORD *a3, size_t a4)
{
  uint64_t result;

  result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, a2 + 1, a3, a4);
  *(_QWORD *)(a1 + 112) = result;
  return result;
}

uint64_t llvm::Function::getDenormalMode(uint64_t *a1, void *a2)
{
  uint64_t ValueAsString;
  unint64_t v4;
  uint64_t AttributeAtIndex;

  if (llvm::APFloatBase::IEEEsingle((llvm::APFloatBase *)a1) != a2
    || (AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex(a1 + 14, -1, "denormal-fp-math-f32", 0x14uLL),
        ValueAsString = llvm::Attribute::getValueAsString((llvm::Attribute *)&AttributeAtIndex),
        !v4))
  {
    AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex(a1 + 14, -1, "denormal-fp-math", 0x10uLL);
    ValueAsString = llvm::Attribute::getValueAsString((llvm::Attribute *)&AttributeAtIndex);
  }
  return sub_1C53CEAA4(ValueAsString, v4);
}

_QWORD *llvm::Function::getGC(llvm::Function *this)
{
  uint64_t *v1;
  llvm::Function *v3;

  v1 = (uint64_t *)(***(_QWORD ***)this + 2640);
  v3 = this;
  return sub_1C53F9150(v1, (uint64_t *)&v3) + 1;
}

_QWORD *llvm::Function::setPersonalityFn(llvm::Function *this, llvm::Constant *a2)
{
  __int16 v3;
  _QWORD *result;

  v3 = a2 != 0;
  result = sub_1C53D1F60(this, (uint64_t)a2);
  *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xFFF7 | (8 * v3);
  return result;
}

uint64_t llvm::Function::getPersonalityFn(llvm::Function *this)
{
  int v1;
  char *v2;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x40000000) != 0)
    v2 = (char *)*((_QWORD *)this - 1);
  else
    v2 = (char *)this - 32 * (v1 & 0x7FFFFFF);
  return *(_QWORD *)v2;
}

_QWORD *llvm::Function::setPrologueData(llvm::Function *this, llvm::Constant *a2)
{
  __int16 v3;
  _QWORD *result;

  v3 = a2 != 0;
  result = sub_1C53D2170(this, (uint64_t)a2);
  *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xFFFB | (4 * v3);
  return result;
}

uint64_t llvm::Function::getPrologueData(llvm::Function *this)
{
  int v1;
  char *v2;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x40000000) != 0)
    v2 = (char *)*((_QWORD *)this - 1);
  else
    v2 = (char *)this - 32 * (v1 & 0x7FFFFFF);
  return *((_QWORD *)v2 + 8);
}

uint64_t llvm::Intrinsic::isOverloaded(llvm::Intrinsic *this)
{
  return (byte_1C860FB7B[(unint64_t)this >> 3] >> (this & 7)) & 1;
}

char *llvm::Intrinsic::getBaseName(llvm::Intrinsic *this)
{
  char *v1;

  v1 = off_1E814EB28[this];
  if (v1)
    strlen(off_1E814EB28[this]);
  return v1;
}

uint64_t llvm::Intrinsic::getIntrinsicForGCCBuiltin(uint64_t a1, const char *a2, size_t a3)
{
  size_t v6;
  const char *v7;
  unint64_t v8;
  unsigned int *v9;
  int v10;
  _BOOL4 v12;
  int v14;
  int v16;
  unint64_t v19;
  unsigned int *v20;
  int v21;
  unint64_t v22;
  unsigned int *v23;
  int v24;
  unint64_t v27;
  unsigned int *v28;
  int v29;
  unint64_t v30;
  unsigned int *v31;
  int v32;
  unint64_t v33;
  unsigned int *v34;
  int v35;
  unint64_t v38;
  unsigned int *v39;
  int v40;
  unint64_t v41;
  unsigned int *v42;
  int v43;
  unint64_t v44;
  unsigned int *v45;
  int v46;
  unint64_t v47;
  unsigned int *v48;
  int v49;
  unint64_t v50;
  unsigned int *v51;
  int v52;
  unint64_t v53;
  unsigned int *v54;
  int v55;
  unint64_t v56;
  unsigned int *v57;
  int v58;
  unint64_t v59;
  unsigned int *v60;
  int v61;
  size_t v62;

  if (a1)
    v6 = strlen((const char *)a1);
  else
    v6 = 0;
  v7 = (const char *)&unk_1C8643440;
  v8 = 9;
  do
  {
    v9 = (unsigned int *)&v7[8 * (v8 >> 1)];
    v10 = strncmp(&aBuiltinAdjustT[v9[1]], a2, a3);
    if (v10 >= 0)
      v8 >>= 1;
    else
      v8 += ~(v8 >> 1);
    if (v10 < 0)
      v7 = (const char *)(v9 + 2);
  }
  while (v8);
  if (v7 != (const char *)&unk_1C8643488
    && strlen(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)]) == a3
    && (!a3 || !memcmp(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)], a2, a3)))
  {
    return *(unsigned int *)v7;
  }
  if (v6 != 7)
    goto LABEL_71;
  if (*(_DWORD *)a1 == 1668440417 && *(_DWORD *)(a1 + 3) == 875980899)
  {
    v7 = (const char *)&unk_1C8643488;
    v22 = 18;
    do
    {
      v23 = (unsigned int *)&v7[8 * (v22 >> 1)];
      v24 = strncmp(&aBuiltinAdjustT[v23[1]], a2, a3);
      if (v24 >= 0)
        v22 >>= 1;
      else
        v22 += ~(v22 >> 1);
      if (v24 < 0)
        v7 = (const char *)(v23 + 2);
    }
    while (v22);
    if (v7 != (const char *)&unk_1C8643518
      && strlen(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)]) == a3
      && (!a3 || !memcmp(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)], a2, a3)))
    {
      return *(unsigned int *)v7;
    }
LABEL_71:
    if (v6 == 6)
    {
      if (*(_DWORD *)a1 != 1734634849 || *(_WORD *)(a1 + 4) != 28259)
        return 0;
      v7 = (const char *)&unk_1C8643518;
      v33 = 125;
      do
      {
        v34 = (unsigned int *)&v7[8 * (v33 >> 1)];
        v35 = strncmp(&aBuiltinAdjustT[v34[1]], a2, a3);
        if (v35 >= 0)
          v33 >>= 1;
        else
          v33 += ~(v33 >> 1);
        if (v35 < 0)
          v7 = (const char *)(v34 + 2);
      }
      while (v33);
      if (v7 != (const char *)&unk_1C8643900
        && strlen(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)]) == a3
        && (!a3 || !memcmp(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)], a2, a3)))
      {
        return *(unsigned int *)v7;
      }
    }
    v12 = v6 == 3;
    if (v6 == 3)
    {
      if (*(_WORD *)a1 == 29281 && *(_BYTE *)(a1 + 2) == 109)
      {
        v7 = (const char *)&unk_1C8643900;
        v50 = 96;
        do
        {
          v51 = (unsigned int *)&v7[8 * (v50 >> 1)];
          v52 = strncmp(&aBuiltinAdjustT[v51[1]], a2, a3);
          if (v52 >= 0)
            v50 >>= 1;
          else
            v50 += ~(v50 >> 1);
          if (v52 < 0)
            v7 = (const char *)(v51 + 2);
        }
        while (v50);
        v12 = v6 == 3;
        if (v7 != (const char *)&unk_1C8643C00
          && strlen(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)]) == a3
          && (!a3 || !memcmp(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)], a2, a3)))
        {
          return *(unsigned int *)v7;
        }
      }
      if (*(_WORD *)a1 != 28770 || *(_BYTE *)(a1 + 2) != 102)
      {
        v14 = 0;
        goto LABEL_26;
      }
      v7 = (const char *)&unk_1C8643C00;
      v53 = 10;
      do
      {
        v54 = (unsigned int *)&v7[8 * (v53 >> 1)];
        v55 = strncmp(&aBuiltinAdjustT[v54[1]], a2, a3);
        if (v55 >= 0)
          v53 >>= 1;
        else
          v53 += ~(v53 >> 1);
        if (v55 < 0)
          v7 = (const char *)(v54 + 2);
      }
      while (v53);
      if (v7 != (const char *)&unk_1C8643C50
        && strlen(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)]) == a3
        && (!a3 || !memcmp(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)], a2, a3)))
      {
        return *(unsigned int *)v7;
      }
    }
    if (v6 != 7)
      goto LABEL_197;
    goto LABEL_20;
  }
  v12 = 0;
LABEL_20:
  if (*(_DWORD *)a1 != 1635280232 || *(_DWORD *)(a1 + 3) != 1852794721)
  {
    v14 = 0;
    goto LABEL_25;
  }
  v7 = (const char *)&unk_1C8643C50;
  v27 = 1866;
  do
  {
    v28 = (unsigned int *)&v7[8 * (v27 >> 1)];
    v29 = strncmp(&aBuiltinAdjustT[v28[1]], a2, a3);
    if (v29 >= 0)
      v27 >>= 1;
    else
      v27 += ~(v27 >> 1);
    if (v29 < 0)
      v7 = (const char *)(v28 + 2);
  }
  while (v27);
  if (v7 != (const char *)&unk_1C86476A0
    && strlen(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)]) == a3
    && (!a3 || !memcmp(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)], a2, a3)))
  {
    return *(unsigned int *)v7;
  }
LABEL_197:
  if (v6 != 4)
  {
    v14 = 0;
    v16 = 0;
    if (!v12)
      goto LABEL_34;
    goto LABEL_26;
  }
  if (*(_DWORD *)a1 == 1936746861)
  {
    v7 = (const char *)&unk_1C86476A0;
    v56 = 671;
    do
    {
      v57 = (unsigned int *)&v7[8 * (v56 >> 1)];
      v58 = strncmp(&aBuiltinAdjustT[v57[1]], a2, a3);
      if (v58 >= 0)
        v56 >>= 1;
      else
        v56 += ~(v56 >> 1);
      if (v58 < 0)
        v7 = (const char *)(v57 + 2);
    }
    while (v56);
    if (v7 != (const char *)&unk_1C8648B98
      && strlen(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)]) == a3
      && (!a3 || !memcmp(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)], a2, a3)))
    {
      return *(unsigned int *)v7;
    }
  }
  if (*(_DWORD *)a1 != 1836480110)
  {
    v14 = 1;
LABEL_25:
    if (!v12)
    {
      v16 = 0;
LABEL_31:
      if (!v14)
        goto LABEL_34;
      goto LABEL_32;
    }
LABEL_26:
    if (*(_WORD *)a1 == 28784 && *(_BYTE *)(a1 + 2) == 99)
    {
      v62 = v6;
      v7 = (const char *)&unk_1C864A130;
      v30 = 482;
      do
      {
        v31 = (unsigned int *)&v7[8 * (v30 >> 1)];
        v32 = strncmp(&aBuiltinAdjustT[v31[1]], a2, a3);
        if (v32 >= 0)
          v30 >>= 1;
        else
          v30 += ~(v30 >> 1);
        if (v32 < 0)
          v7 = (const char *)(v31 + 2);
      }
      while (v30);
      v6 = v62;
      if (v7 != (const char *)&unk_1C864B040
        && strlen(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)]) == a3
        && (!a3 || !memcmp(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)], a2, a3)))
      {
        return *(unsigned int *)v7;
      }
      v16 = 1;
      if ((v14 & 1) == 0)
        goto LABEL_34;
      goto LABEL_32;
    }
    v16 = 1;
    goto LABEL_31;
  }
  v7 = (const char *)&unk_1C8648B98;
  v59 = 691;
  do
  {
    v60 = (unsigned int *)&v7[8 * (v59 >> 1)];
    v61 = strncmp(&aBuiltinAdjustT[v60[1]], a2, a3);
    if (v61 >= 0)
      v59 >>= 1;
    else
      v59 += ~(v59 >> 1);
    if (v61 < 0)
      v7 = (const char *)(v60 + 2);
  }
  while (v59);
  if (v7 != (const char *)&unk_1C864A130
    && strlen(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)]) == a3
    && (!a3 || !memcmp(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)], a2, a3)))
  {
    return *(unsigned int *)v7;
  }
  if (v12)
  {
    v14 = 1;
    goto LABEL_26;
  }
  v16 = 0;
LABEL_32:
  if (*(_DWORD *)a1 == 808466034)
  {
    v7 = (const char *)&unk_1C864B040;
    v41 = 12;
    do
    {
      v42 = (unsigned int *)&v7[8 * (v41 >> 1)];
      v43 = strncmp(&aBuiltinAdjustT[v42[1]], a2, a3);
      if (v43 >= 0)
        v41 >>= 1;
      else
        v41 += ~(v41 >> 1);
      if (v43 < 0)
        v7 = (const char *)(v42 + 2);
    }
    while (v41);
    if (v7 != (const char *)&unk_1C864B0A0
      && strlen(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)]) == a3
      && (!a3 || !memcmp(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)], a2, a3)))
    {
      return *(unsigned int *)v7;
    }
  }
  if (*(_DWORD *)a1 == 809055091)
  {
    v7 = (const char *)&unk_1C864B0A0;
    v47 = 162;
    do
    {
      v48 = (unsigned int *)&v7[8 * (v47 >> 1)];
      v49 = strncmp(&aBuiltinAdjustT[v48[1]], a2, a3);
      if (v49 >= 0)
        v47 >>= 1;
      else
        v47 += ~(v47 >> 1);
      if (v49 < 0)
        v7 = (const char *)(v48 + 2);
    }
    while (v47);
    if (v7 != (const char *)&unk_1C864B5B0
      && strlen(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)]) == a3
      && (!a3 || !memcmp(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)], a2, a3)))
    {
      return *(unsigned int *)v7;
    }
  }
LABEL_34:
  if (v6 != 2 || *(_WORD *)a1 != 25974)
    goto LABEL_233;
  v7 = (const char *)&unk_1C864B5B0;
  v38 = 1263;
  do
  {
    v39 = (unsigned int *)&v7[8 * (v38 >> 1)];
    v40 = strncmp(&aBuiltinAdjustT[v39[1]], a2, a3);
    if (v40 >= 0)
      v38 >>= 1;
    else
      v38 += ~(v38 >> 1);
    if (v40 < 0)
      v7 = (const char *)(v39 + 2);
  }
  while (v38);
  if (v7 == (const char *)&unk_1C864DD28
    || strlen(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)]) != a3
    || a3 && memcmp(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)], a2, a3))
  {
LABEL_233:
    if (!v16)
      goto LABEL_234;
    if (*(_WORD *)a1 != 14456 || *(_BYTE *)(a1 + 2) != 54)
      goto LABEL_234;
    v7 = (const char *)&unk_1C864DD28;
    v44 = 1161;
    do
    {
      v45 = (unsigned int *)&v7[8 * (v44 >> 1)];
      v46 = strncmp(&aBuiltinAdjustT[v45[1]], a2, a3);
      if (v46 >= 0)
        v44 >>= 1;
      else
        v44 += ~(v44 >> 1);
      if (v46 < 0)
        v7 = (const char *)(v45 + 2);
    }
    while (v44);
    if (v7 == (const char *)&unk_1C8650170
      || strlen(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)]) != a3
      || a3 && memcmp(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)], a2, a3))
    {
LABEL_234:
      if (v6 != 5)
        return 0;
      if (*(_DWORD *)a1 != 1919902584 || *(_BYTE *)(a1 + 4) != 101)
        return 0;
      v7 = (const char *)&unk_1C8650170;
      v19 = 4;
      do
      {
        v20 = (unsigned int *)&v7[8 * (v19 >> 1)];
        v21 = strncmp(&aBuiltinAdjustT[v20[1]], a2, a3);
        if (v21 >= 0)
          v19 >>= 1;
        else
          v19 += ~(v19 >> 1);
        if (v21 < 0)
          v7 = (const char *)(v20 + 2);
      }
      while (v19);
      if (v7 == "__dmb"
        || strlen(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)]) != a3
        || a3 && memcmp(&aBuiltinAdjustT[*((unsigned int *)v7 + 1)], a2, a3))
      {
        return 0;
      }
    }
  }
  return *(unsigned int *)v7;
}

const char *llvm::Intrinsic::getIntrinsicForMSBuiltin(const char *result, const char *a2, size_t a3)
{
  const char *v5;
  size_t v6;
  unsigned int *v8;
  unint64_t v9;
  unsigned int *v10;
  int v11;
  __int128 *v12;
  unint64_t v14;
  unsigned int *v15;
  int v16;

  if (result)
  {
    v5 = result;
    v6 = strlen(result);
    if (v6 == 3)
    {
      if (*(_WORD *)v5 != 29281 || v5[2] != 109)
        return 0;
      v8 = (unsigned int *)&unk_1C86501E8;
      v14 = 5;
      do
      {
        v15 = &v8[2 * (v14 >> 1)];
        v16 = strncmp(&aDmb[v15[1]], a2, a3);
        if (v16 >= 0)
          v14 >>= 1;
        else
          v14 += ~(v14 >> 1);
        if (v16 < 0)
          v8 = v15 + 2;
      }
      while (v14);
      v12 = &xmmword_1C8650210;
    }
    else
    {
      if (v6 != 7)
        return 0;
      if (*(_DWORD *)v5 != 1668440417 || *(_DWORD *)(v5 + 3) != 875980899)
        return 0;
      v8 = (unsigned int *)&unk_1C86501D0;
      v9 = 3;
      do
      {
        v10 = &v8[2 * (v9 >> 1)];
        v11 = strncmp(&aDmb[v10[1]], a2, a3);
        if (v11 >= 0)
          v9 >>= 1;
        else
          v9 += ~(v9 >> 1);
        if (v11 < 0)
          v8 = v10 + 2;
      }
      while (v9);
      v12 = (__int128 *)&unk_1C86501E8;
    }
    if (v8 != (unsigned int *)v12 && strlen(&aDmb[v8[1]]) == a3 && (!a3 || !memcmp(&aDmb[v8[1]], a2, a3)))
      return (const char *)*v8;
    return 0;
  }
  return result;
}

uint64_t llvm::Function::setEntryCount(uint64_t ***a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  llvm::MDNode *v10;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  llvm::Function::getImportGUIDs(a1, (uint64_t)&v13);
  if (v14)
    v8 = &v13;
  else
    v8 = 0;
  if (a4)
    v9 = a4;
  else
    v9 = (uint64_t)v8;
  v12 = **a1;
  v10 = (llvm::MDNode *)llvm::MDBuilder::createFunctionEntryCount(&v12, a2, a3 == 1, v9);
  llvm::Value::setMetadata((llvm::Value *)a1, 2, v10);
  return MEMORY[0x1CAA32FB4](v13, 8);
}

{
  return llvm::Function::setEntryCount(a1, a2, a3, a4);
}

void llvm::Function::setSectionPrefix(llvm::Value *a1, unsigned __int8 *a2, size_t a3)
{
  llvm::MDNode *v4;
  uint64_t *v5;

  v5 = **(uint64_t ***)a1;
  v4 = (llvm::MDNode *)llvm::MDBuilder::createFunctionSectionPrefix(&v5, a2, a3);
  llvm::Value::setMetadata(a1, 20, v4);
}

double sub_1C623946C(uint64_t **a1)
{
  unsigned __int8 *v2;
  unsigned int v3;
  uint64_t v4;
  BOOL v5;
  llvm::FixedVectorType *v6;
  llvm::FixedVectorType *v7;
  llvm::FixedVectorType *v8;
  const char *v9;
  unsigned int v10;
  _QWORD v12[2];

  v2 = (unsigned __int8 *)a1[3];
  v3 = v2[8];
  if (v3 > 6)
  {
    v12[0] = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v2);
    v12[1] = v9;
    v10 = llvm::TypeSize::operator unsigned long long(v12, v9);
    v8 = (llvm::FixedVectorType *)llvm::IntegerType::get((llvm::IntegerType *)*a1, (llvm::LLVMContext *)(v10 >> 1));
  }
  else
  {
    v4 = **a1;
    v5 = v3 == 3;
    v6 = (llvm::FixedVectorType *)(v4 + 1624);
    v7 = (llvm::FixedVectorType *)(v4 + 1672);
    if (v5)
      v8 = v7;
    else
      v8 = v6;
  }
  return llvm::VectorType::get(v8, (llvm::Type *)(*((unsigned int *)a1 + 8) | ((unint64_t)(*((_BYTE *)a1 + 8) == 19) << 32)));
}

void sub_1C62394F4(uint64_t a1, int a2)
{
  int v2;
  uint64_t **v3;

  if (a2 >= 1)
  {
    v2 = a2;
    do
    {
      llvm::VectorType::get(*(llvm::FixedVectorType **)(a1 + 24), (llvm::Type *)((2 * *(_DWORD *)(a1 + 32)) | ((unint64_t)(*(_BYTE *)(a1 + 8) == 19) << 32)));
      sub_1C623946C(v3);
      --v2;
    }
    while (v2);
  }
}

unint64_t sub_1C6239544(unint64_t result, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 >= *(_DWORD *)(result + 12))
  {
    v8 = a2;
    v9 = *a3;
    result = sub_1C4DC1E54(result, (unint64_t)&v8);
    v6 = *(_QWORD *)v3 + 24 * *(unsigned int *)(v3 + 8);
    v7 = *(_OWORD *)result;
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)v6 = v7;
  }
  else
  {
    v5 = *(_QWORD *)result + 24 * v4;
    *(_QWORD *)v5 = a2;
    *(_OWORD *)(v5 + 8) = *a3;
  }
  ++*(_DWORD *)(v3 + 8);
  return result;
}

unint64_t sub_1C62395D4(llvm::User *a1, unsigned int a2)
{
  unint64_t result;
  char *Descriptor;
  uint64_t v6;

  result = sub_1C53D3760(a1);
  if ((_DWORD)result)
  {
    if (*((_DWORD *)llvm::User::getDescriptor(a1) + 2) <= a2)
    {
      Descriptor = llvm::User::getDescriptor(a1);
      return *(_DWORD *)&Descriptor[v6 - 4] > a2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *sub_1C6239630(_QWORD *result, uint64_t *a2)
{
  uint64_t *v2;
  char v3;
  int v4;
  uint64_t v5;

  if (*((char *)a2 + 23) >= 0)
    v2 = a2;
  else
    v2 = (uint64_t *)*a2;
  *result = v2;
  v3 = *((_BYTE *)a2 + 23);
  v4 = v3;
  v5 = v3 & 0x7F;
  if (v4 < 0)
    v5 = a2[1];
  result[1] = v5;
  return result;
}

llvm::UndefValue *llvm::GlobalPtrAuthInfo::createWithSameSchema(llvm::GlobalPtrAuthInfo *this, llvm::Module *a2, llvm::Constant *a3, uint64_t a4, uint64_t a5, llvm::ConstantInt *a6)
{
  uint64_t ****v6;

  v6 = (uint64_t ****)(*(_QWORD *)(*(_QWORD *)this - 32)
                    - 32 * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)this - 32) + 20) & 0x7FFFFFF));
  return llvm::GlobalPtrAuthInfo::create(a2, a3, v6[4], v6[8], v6[12], a6);
}

llvm::UndefValue *llvm::GlobalPtrAuthInfo::create(llvm::GlobalPtrAuthInfo *this, llvm::Module *a2, uint64_t ***a3, uint64_t ***a4, uint64_t ***a5, llvm::ConstantInt *a6)
{
  llvm::Constant *v11;
  llvm::ConstantAggregateZero *TypeForElements;
  llvm::UndefValue *v13;
  llvm::UndefValue *v14;
  llvm::PointerType *v15;
  uint64_t ***v17[4];
  __int16 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v11 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)this + 1912), 0);
  v17[0] = (uint64_t ***)llvm::ConstantExpr::getBitCast(a2, v11, 0);
  v17[1] = a3;
  v17[2] = a4;
  v17[3] = a5;
  TypeForElements = (llvm::ConstantAggregateZero *)llvm::ConstantStruct::getTypeForElements(v17, 4u, 0);
  v13 = llvm::ConstantStruct::get(TypeForElements, (llvm::Type *)v17, 4);
  v14 = (llvm::UndefValue *)llvm::User::operator new((llvm::User *)0x58, 1u);
  v15 = *(llvm::PointerType **)v13;
  v18 = 257;
  llvm::GlobalVariable::GlobalVariable((uint64_t)v14, (uint64_t)this, v15, 1, 8, (uint64_t)v13, (uint64_t)v17, 0, 0, 0, 0);
  llvm::GlobalObject::setSection(v14, "llvm.ptrauth", 0xCuLL);
  return llvm::ConstantExpr::getBitCast(v14, *(llvm::Constant **)a2, 0);
}

uint64_t llvm::GlobalValue::materialize@<X0>(llvm::Module **this@<X0>, _QWORD *a2@<X8>)
{
  return llvm::Module::materialize(this[5], (llvm::GlobalValue *)this, a2);
}

void llvm::GlobalAlias::eraseFromParent(llvm::GlobalAlias *this)
{
  uint64_t v2;
  _QWORD *v3;

  llvm::SymbolTableListTraits<llvm::GlobalAlias>::removeNodeFromList(*((_QWORD *)this + 5) + 40, this);
  v2 = *((_QWORD *)this + 6);
  v3 = (_QWORD *)*((_QWORD *)this + 7);
  *v3 = v2;
  *(_QWORD *)(v2 + 8) = v3;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  sub_1C6239D9C(this);
}

void llvm::GlobalValue::getGlobalIdentifier(llvm::GlobalValue *this@<X0>, std::string *a2@<X8>)
{
  char *Name;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  size_t v12;
  size_t v13;

  Name = llvm::Value::getName(this);
  v6 = *((_QWORD *)this + 5);
  v9 = *(void **)(v6 + 192);
  v7 = v6 + 192;
  v8 = v9;
  v10 = *(_BYTE *)(v7 + 23);
  if (v10 >= 0)
    v11 = (void *)v7;
  else
    v11 = v8;
  v12 = *(_QWORD *)(v7 + 8);
  if (v10 >= 0)
    v13 = v10 & 0x7F;
  else
    v13 = v12;
  llvm::GlobalValue::getGlobalIdentifier(v11, v13, Name, v5, *((_DWORD *)this + 8) & 0xF, a2);
}

uint64_t llvm::GlobalAlias::getAliaseeObject(llvm::GlobalAlias *this)
{
  uint64_t v1;
  _QWORD v3[2];
  int v4;

  v3[0] = 0;
  v3[1] = 0;
  v4 = 0;
  v1 = sub_1C53D5A28(*((_QWORD *)this - 4), (uint64_t)v3);
  MEMORY[0x1CAA32FB4](v3[0], 8);
  return v1;
}

uint64_t llvm::GlobalAlias::GlobalAlias(uint64_t a1, llvm::PointerType *a2, llvm::Type *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v10 = sub_1C53D6438(a1, a2, 1, a4, a5, a3);
  v11 = (_QWORD *)(v10 - 32);
  v12 = *(_QWORD *)(v10 - 32);
  *(_QWORD *)(v10 + 48) = 0;
  v13 = v10 + 48;
  *(_QWORD *)(v10 + 56) = 0;
  if (v12)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v14 = *(_QWORD *)(a1 - 24);
    if (v14)
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v11 = a6;
  if (a6)
  {
    v17 = *(_QWORD *)(a6 + 8);
    v16 = (_QWORD *)(a6 + 8);
    v15 = v17;
    *(_QWORD *)(a1 - 24) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v16;
    *v16 = v11;
  }
  if (a7)
  {
    llvm::SymbolTableListTraits<llvm::GlobalAlias>::addNodeToList(a7 + 40, a1);
    v18 = *(_QWORD *)(a7 + 40);
    *(_QWORD *)(a1 + 48) = v18;
    *(_QWORD *)(a1 + 56) = a7 + 40;
    *(_QWORD *)(v18 + 8) = v13;
    *(_QWORD *)(a7 + 40) = v13;
  }
  return a1;
}

uint64_t llvm::GlobalAlias::setAliasee(uint64_t this, llvm::Constant *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)(this - 32);
  if (*(_QWORD *)(this - 32))
  {
    **(_QWORD **)(this - 16) = *(_QWORD *)(this - 24);
    v3 = *(_QWORD *)(this - 24);
    if (v3)
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(this - 16);
  }
  *v2 = a2;
  if (a2)
  {
    v6 = *((_QWORD *)a2 + 1);
    v4 = (_QWORD *)((char *)a2 + 8);
    v5 = v6;
    *(_QWORD *)(this - 24) = v6;
    if (v6)
      *(_QWORD *)(v5 + 16) = this - 24;
    *(_QWORD *)(this - 16) = v4;
    *v4 = v2;
  }
  return this;
}

uint64_t llvm::GlobalAlias::create(llvm::PointerType *a1, llvm::Type *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _DWORD *v12;

  v12 = operator new(0x60uLL);
  v12[13] = v12[13] & 0x38000000 | 1;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = v12 + 8;
  return llvm::GlobalAlias::GlobalAlias((uint64_t)(v12 + 8), a1, a2, a3, a4, a5, a6);
}

uint64_t llvm::GlobalAlias::create(char a1, uint64_t a2, _QWORD *a3)
{
  llvm::PointerType *v6;
  unsigned int v7;
  uint64_t v8;
  _DWORD *v9;

  v6 = (llvm::PointerType *)a3[3];
  v7 = *(_DWORD *)(*a3 + 8);
  v8 = a3[5];
  v9 = operator new(0x60uLL);
  v9[13] = v9[13] & 0x38000000 | 1;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *((_QWORD *)v9 + 3) = v9 + 8;
  return llvm::GlobalAlias::GlobalAlias((uint64_t)(v9 + 8), v6, (llvm::Type *)(v7 >> 8), a1, a2, (uint64_t)a3, v8);
}

uint64_t llvm::GlobalAlias::create(llvm::GlobalAlias *this, const llvm::Twine *a2, llvm::GlobalValue *a3)
{
  int v5;
  llvm::PointerType *v6;
  unsigned int v7;
  uint64_t v8;
  _DWORD *v9;

  v5 = *((_DWORD *)a2 + 8);
  v6 = (llvm::PointerType *)*((_QWORD *)a2 + 3);
  v7 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  v8 = *((_QWORD *)a2 + 5);
  v9 = operator new(0x60uLL);
  v9[13] = v9[13] & 0x38000000 | 1;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *((_QWORD *)v9 + 3) = v9 + 8;
  return llvm::GlobalAlias::GlobalAlias((uint64_t)(v9 + 8), v6, (llvm::Type *)(v7 >> 8), v5 & 0xF, (uint64_t)this, (uint64_t)a2, v8);
}

uint64_t llvm::GlobalIFunc::GlobalIFunc(uint64_t a1, llvm::PointerType *a2, llvm::Type *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v10 = sub_1C53D6438(a1, a2, 2, a4, a5, a3);
  v11 = (_QWORD *)(v10 - 32);
  v12 = *(_QWORD *)(v10 - 32);
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = 0;
  v13 = v10 + 56;
  *(_DWORD *)(v10 + 32) = *(unsigned __int16 *)(v10 + 32);
  *(_QWORD *)(v10 + 64) = 0;
  if (v12)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v14 = *(_QWORD *)(a1 - 24);
    if (v14)
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v11 = a6;
  if (a6)
  {
    v17 = *(_QWORD *)(a6 + 8);
    v16 = (_QWORD *)(a6 + 8);
    v15 = v17;
    *(_QWORD *)(a1 - 24) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v16;
    *v16 = v11;
  }
  if (a7)
  {
    llvm::SymbolTableListTraits<llvm::GlobalIFunc>::addNodeToList(a7 + 56, a1);
    v18 = *(_QWORD *)(a7 + 56);
    *(_QWORD *)(a1 + 56) = v18;
    *(_QWORD *)(a1 + 64) = a7 + 56;
    *(_QWORD *)(v18 + 8) = v13;
    *(_QWORD *)(a7 + 56) = v13;
  }
  return a1;
}

uint64_t llvm::GlobalIFunc::create(llvm::PointerType *a1, llvm::Type *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _DWORD *v12;

  v12 = operator new(0x68uLL);
  v12[13] = v12[13] & 0x38000000 | 1;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = v12 + 8;
  return llvm::GlobalIFunc::GlobalIFunc((uint64_t)(v12 + 8), a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1C6239CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  llvm::GlobalObject *v4;
  llvm::Value *v5;
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = (llvm::GlobalObject *)(a2 - 56);
  if (a2)
    v5 = (llvm::Value *)(a2 - 56);
  else
    v5 = 0;
  llvm::SymbolTableListTraits<llvm::GlobalIFunc>::removeNodeFromList(a1, v5);
  v6 = *((_QWORD *)v5 + 7);
  v7 = (_QWORD *)*((_QWORD *)v5 + 8);
  *v7 = v6;
  *(_QWORD *)(v6 + 8) = v7;
  *((_QWORD *)v5 + 7) = 0;
  *((_QWORD *)v5 + 8) = 0;
  if (a2)
  {
    llvm::GlobalObject::~GlobalObject(v4);
    llvm::User::operator delete(v8);
  }
  return v3;
}

uint64_t llvm::GlobalIFunc::getResolverFunction(llvm::GlobalIFunc *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];
  int v5;

  v4[0] = 0;
  v4[1] = 0;
  v5 = 0;
  v1 = sub_1C53D5A28(*((_QWORD *)this - 4), (uint64_t)v4);
  if (*(_BYTE *)(v1 + 16))
    v2 = 0;
  else
    v2 = v1;
  MEMORY[0x1CAA32FB4](v4[0], 8);
  return v2;
}

void sub_1C6239D9C(llvm::Value *a1)
{
  llvm::Value *v2;
  _DWORD *v3;

  if (a1)
  {
    llvm::Constant::removeDeadConstantUsers((uint64_t)a1);
    llvm::Value::~Value(a1, v2);
    llvm::User::operator delete(v3);
  }
}

char *llvm::IRBuilderBase::CreateGlobalString(uint64_t a1, char *a2, llvm::Type *a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  llvm::PointerType **String;
  _DWORD *v11;
  uint64_t v12;

  String = llvm::ConstantDataArray::getString(*(_QWORD *)(a1 + 64), a2, a3, 1);
  if (!a6)
    a6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40);
  v11 = operator new(0x78uLL);
  v11[13] = v11[13] & 0x38000000 | 1;
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = v11 + 8;
  v12 = llvm::GlobalVariable::GlobalVariable((uint64_t)(v11 + 8), a6, *String, 1, 8, (uint64_t)String, a4, 0, 0, a5 | 0x100000000, 0);
  v11[16] = v11[16] & 0xFFFFFF3F | 0x80;
  llvm::GlobalObject::setAlignment(v12, 256);
  return (char *)(v11 + 8);
}

llvm::Value *llvm::IRBuilderBase::CreateMemCpyInline(uint64_t a1, llvm::Value *a2, __int16 a3, llvm::Value *a4, __int16 a5, uint64_t *a6, unsigned int a7, llvm::MDNode *a8, llvm::MDNode *a9, llvm::MDNode *a10, llvm::MDNode *a11)
{
  uint64_t v18;
  uint64_t Declaration;
  uint64_t **v20;
  uint64_t v21;
  llvm::Value *v22;
  _BYTE v24[32];
  __int16 v25;
  uint64_t v26[3];
  unsigned __int8 *CastedInt8PtrValue;
  unsigned __int8 *v28;
  uint64_t *v29;
  llvm::ValueHandleBase *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  CastedInt8PtrValue = llvm::IRBuilderBase::getCastedInt8PtrValue((llvm::IRBuilderBase *)a1, a2);
  v28 = llvm::IRBuilderBase::getCastedInt8PtrValue((llvm::IRBuilderBase *)a1, a4);
  v29 = a6;
  v30 = llvm::ConstantInt::get((llvm::ConstantInt **)(**(_QWORD **)(a1 + 64) + 1888), a7, 0);
  v26[0] = *(_QWORD *)CastedInt8PtrValue;
  v18 = *a6;
  v26[1] = *(_QWORD *)v28;
  v26[2] = v18;
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40), 196, v26, 3);
  v25 = 257;
  if (Declaration)
    v20 = *(uint64_t ***)(Declaration + 24);
  else
    v20 = 0;
  v21 = sub_1C5062DD8((uint64_t *)a1, v20, Declaration, (uint64_t *)&CastedInt8PtrValue, 4, 0, 0, (uint64_t)v24, 0);
  v22 = (llvm::Value *)v21;
  if ((a3 & 0xFF00) != 0)
    sub_1C509D0D0(v21, a3);
  if ((a5 & 0xFF00) != 0)
    sub_1C509D15C((uint64_t)v22, a5);
  if (a8)
    llvm::Value::setMetadata(v22, 1, a8);
  if (a9)
    llvm::Value::setMetadata(v22, 5, a9);
  if (a10)
    llvm::Value::setMetadata(v22, 7, a10);
  if (a11)
    llvm::Value::setMetadata(v22, 8, a11);
  return v22;
}

llvm::Value *llvm::IRBuilderBase::CreateElementUnorderedAtomicMemCpy(uint64_t a1, llvm::Value *a2, char a3, llvm::Value *a4, char a5, uint64_t *a6, unsigned int a7, llvm::MDNode *a8, llvm::MDNode *a9, llvm::MDNode *a10, llvm::MDNode *a11)
{
  uint64_t v18;
  uint64_t Declaration;
  uint64_t **v20;
  llvm::Value *v21;
  _BYTE v23[32];
  __int16 v24;
  uint64_t v25[3];
  unsigned __int8 *CastedInt8PtrValue;
  unsigned __int8 *v27;
  uint64_t *v28;
  llvm::ValueHandleBase *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  CastedInt8PtrValue = llvm::IRBuilderBase::getCastedInt8PtrValue((llvm::IRBuilderBase *)a1, a2);
  v27 = llvm::IRBuilderBase::getCastedInt8PtrValue((llvm::IRBuilderBase *)a1, a4);
  v28 = a6;
  v29 = llvm::ConstantInt::get((llvm::ConstantInt **)(**(_QWORD **)(a1 + 64) + 1960), a7, 0);
  v25[0] = *(_QWORD *)CastedInt8PtrValue;
  v18 = *a6;
  v25[1] = *(_QWORD *)v27;
  v25[2] = v18;
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40), 195, v25, 3);
  v24 = 257;
  if (Declaration)
    v20 = *(uint64_t ***)(Declaration + 24);
  else
    v20 = 0;
  v21 = (llvm::Value *)sub_1C5062DD8((uint64_t *)a1, v20, Declaration, (uint64_t *)&CastedInt8PtrValue, 4, 0, 0, (uint64_t)v23, 0);
  sub_1C509D0D0((uint64_t)v21, a3);
  sub_1C509D15C((uint64_t)v21, a5);
  if (a8)
    llvm::Value::setMetadata(v21, 1, a8);
  if (a9)
    llvm::Value::setMetadata(v21, 5, a9);
  if (a10)
    llvm::Value::setMetadata(v21, 7, a10);
  if (a11)
    llvm::Value::setMetadata(v21, 8, a11);
  return v21;
}

llvm::Value *llvm::IRBuilderBase::CreateMemMove(uint64_t a1, llvm::Value *a2, __int16 a3, llvm::Value *a4, __int16 a5, uint64_t *a6, unsigned int a7, llvm::MDNode *a8, llvm::MDNode *a9, llvm::MDNode *a10)
{
  uint64_t v17;
  uint64_t Declaration;
  uint64_t **v19;
  uint64_t v20;
  llvm::Value *v21;
  _BYTE v23[32];
  __int16 v24;
  uint64_t v25[3];
  unsigned __int8 *CastedInt8PtrValue;
  unsigned __int8 *v27;
  uint64_t *v28;
  llvm::ValueHandleBase *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  CastedInt8PtrValue = llvm::IRBuilderBase::getCastedInt8PtrValue((llvm::IRBuilderBase *)a1, a2);
  v27 = llvm::IRBuilderBase::getCastedInt8PtrValue((llvm::IRBuilderBase *)a1, a4);
  v28 = a6;
  v29 = llvm::ConstantInt::get((llvm::ConstantInt **)(**(_QWORD **)(a1 + 64) + 1888), a7, 0);
  v25[0] = *(_QWORD *)CastedInt8PtrValue;
  v17 = *a6;
  v25[1] = *(_QWORD *)v27;
  v25[2] = v17;
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40), 197, v25, 3);
  v24 = 257;
  if (Declaration)
    v19 = *(uint64_t ***)(Declaration + 24);
  else
    v19 = 0;
  v20 = sub_1C5062DD8((uint64_t *)a1, v19, Declaration, (uint64_t *)&CastedInt8PtrValue, 4, 0, 0, (uint64_t)v23, 0);
  v21 = (llvm::Value *)v20;
  if ((a3 & 0xFF00) != 0)
    sub_1C509D0D0(v20, a3);
  if ((a5 & 0xFF00) != 0)
    sub_1C509D15C((uint64_t)v21, a5);
  if (a8)
    llvm::Value::setMetadata(v21, 1, a8);
  if (a9)
    llvm::Value::setMetadata(v21, 7, a9);
  if (a10)
    llvm::Value::setMetadata(v21, 8, a10);
  return v21;
}

uint64_t llvm::IRBuilderBase::CreateFAddReduce(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t *v4;
  uint64_t Declaration;
  uint64_t **v6;
  uint64_t v8[4];
  __int16 v9;
  uint64_t v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 40);
  v10[0] = (uint64_t)a2;
  v10[1] = (uint64_t)a3;
  v8[0] = *(_QWORD *)a3;
  Declaration = llvm::Intrinsic::getDeclaration(v4, 319, v8, 1);
  v9 = 257;
  if (Declaration)
    v6 = *(uint64_t ***)(Declaration + 24);
  else
    v6 = 0;
  return sub_1C5062DD8((uint64_t *)this, v6, Declaration, v10, 2, 0, 0, (uint64_t)v8, 0);
}

uint64_t llvm::IRBuilderBase::CreateFMulReduce(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t *v4;
  uint64_t Declaration;
  uint64_t **v6;
  uint64_t v8[4];
  __int16 v9;
  uint64_t v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 40);
  v10[0] = (uint64_t)a2;
  v10[1] = (uint64_t)a3;
  v8[0] = *(_QWORD *)a3;
  Declaration = llvm::Intrinsic::getDeclaration(v4, 322, v8, 1);
  v9 = 257;
  if (Declaration)
    v6 = *(uint64_t ***)(Declaration + 24);
  else
    v6 = 0;
  return sub_1C5062DD8((uint64_t *)this, v6, Declaration, v10, 2, 0, 0, (uint64_t)v8, 0);
}

uint64_t llvm::IRBuilderBase::CreateAddReduce(llvm::IRBuilderBase *this, llvm::Value *a2)
{
  return sub_1C53D7700((uint64_t *)this, 317, (uint64_t *)a2);
}

uint64_t llvm::IRBuilderBase::CreateMulReduce(llvm::IRBuilderBase *this, llvm::Value *a2)
{
  return sub_1C53D7700((uint64_t *)this, 323, (uint64_t *)a2);
}

uint64_t llvm::IRBuilderBase::CreateAndReduce(llvm::IRBuilderBase *this, llvm::Value *a2)
{
  return sub_1C53D7700((uint64_t *)this, 318, (uint64_t *)a2);
}

uint64_t llvm::IRBuilderBase::CreateOrReduce(llvm::IRBuilderBase *this, llvm::Value *a2)
{
  return sub_1C53D7700((uint64_t *)this, 324, (uint64_t *)a2);
}

uint64_t llvm::IRBuilderBase::CreateXorReduce(llvm::IRBuilderBase *this, llvm::Value *a2)
{
  return sub_1C53D7700((uint64_t *)this, 329, (uint64_t *)a2);
}

uint64_t llvm::IRBuilderBase::CreateIntMaxReduce(llvm::IRBuilderBase *this, llvm::Value *a2, int a3)
{
  int v4;

  if (a3)
    v4 = 325;
  else
    v4 = 327;
  return sub_1C53D7700((uint64_t *)this, v4, (uint64_t *)a2);
}

uint64_t llvm::IRBuilderBase::CreateIntMinReduce(llvm::IRBuilderBase *this, llvm::Value *a2, int a3)
{
  int v4;

  if (a3)
    v4 = 326;
  else
    v4 = 328;
  return sub_1C53D7700((uint64_t *)this, v4, (uint64_t *)a2);
}

uint64_t llvm::IRBuilderBase::CreateFPMaxReduce(llvm::IRBuilderBase *this, llvm::Value *a2)
{
  return sub_1C53D7700((uint64_t *)this, 320, (uint64_t *)a2);
}

uint64_t llvm::IRBuilderBase::CreateFPMinReduce(llvm::IRBuilderBase *this, llvm::Value *a2)
{
  return sub_1C53D7700((uint64_t *)this, 321, (uint64_t *)a2);
}

uint64_t llvm::IRBuilderBase::CreateAssumption(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Declaration;
  uint64_t **v8;
  _BYTE v10[32];
  __int16 v11;
  uint64_t v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v12[0] = a2;
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(a1[6] + 56) + 40), 7, 0, 0);
  v11 = 257;
  if (Declaration)
    v8 = *(uint64_t ***)(Declaration + 24);
  else
    v8 = 0;
  return sub_1C5062DD8(a1, v8, Declaration, v12, 1, a3, a4, (uint64_t)v10, 0);
}

uint64_t llvm::IRBuilderBase::CreateMaskedLoad(uint64_t a1, llvm::UndefValue *this, uint64_t *a3, char a4, uint64_t a5, llvm::UndefValue *a6, uint64_t a7)
{
  llvm::UndefValue *v8;
  uint64_t v14;
  uint64_t v16[4];
  uint64_t v17[3];

  v8 = a6;
  v17[2] = *MEMORY[0x1E0C80C00];
  v14 = *a3;
  if (!a6)
    v8 = llvm::UndefValue::get(this, this);
  v17[0] = (uint64_t)this;
  v17[1] = v14;
  v16[0] = (uint64_t)a3;
  v16[1] = (uint64_t)llvm::ConstantInt::get((llvm::ConstantInt **)(**(_QWORD **)(a1 + 64) + 1960), (1 << a4), 0);
  v16[2] = a5;
  v16[3] = (uint64_t)v8;
  return llvm::IRBuilderBase::CreateMaskedIntrinsic((uint64_t *)a1, 185, v16, 4, v17, 2, a7);
}

uint64_t llvm::IRBuilderBase::CreateMaskedIntrinsic(uint64_t *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t Declaration;
  uint64_t **v12;

  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(a1[6] + 56) + 40), a2, a5, a6);
  if (Declaration)
    v12 = *(uint64_t ***)(Declaration + 24);
  else
    v12 = 0;
  return sub_1C5062DD8(a1, v12, Declaration, a3, a4, 0, 0, a7, 0);
}

uint64_t llvm::IRBuilderBase::CreateMaskedStore(uint64_t a1, uint64_t *a2, uint64_t *a3, char a4, uint64_t a5)
{
  uint64_t v7;
  _WORD v9[20];
  uint64_t v10[4];
  uint64_t v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  v7 = *a3;
  v11[0] = *a2;
  v11[1] = v7;
  v10[0] = (uint64_t)a2;
  v10[1] = (uint64_t)a3;
  v10[2] = (uint64_t)llvm::ConstantInt::get((llvm::ConstantInt **)(**(_QWORD **)(a1 + 64) + 1960), (1 << a4), 0);
  v10[3] = a5;
  v9[16] = 257;
  return llvm::IRBuilderBase::CreateMaskedIntrinsic((uint64_t *)a1, 187, v10, 4, v11, 2, (uint64_t)v9);
}

uint64_t llvm::IRBuilderBase::CreateMaskedGather(uint64_t a1, llvm::UndefValue *this, uint64_t *a3, char a4, llvm::ValueHandleBase *a5, llvm::UndefValue *a6, uint64_t a7)
{
  llvm::ValueHandleBase *AllOnesValue;
  uint64_t v14;
  llvm::Constant *v15;
  llvm::Type *v16;
  uint64_t v18[4];
  uint64_t v19[3];

  AllOnesValue = a5;
  v19[2] = *MEMORY[0x1E0C80C00];
  v14 = *a3;
  if (!a5)
  {
    llvm::VectorType::get((llvm::FixedVectorType *)(**(_QWORD **)(a1 + 64) + 1888), (llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_BYTE *)this + 8) == 19) << 32)));
    AllOnesValue = llvm::Constant::getAllOnesValue(v15, v16);
  }
  if (!a6)
    a6 = llvm::UndefValue::get(this, this);
  v19[0] = (uint64_t)this;
  v19[1] = v14;
  v18[0] = (uint64_t)a3;
  v18[1] = (uint64_t)llvm::ConstantInt::get((llvm::ConstantInt **)(**(_QWORD **)(a1 + 64) + 1960), (1 << a4), 0);
  v18[2] = (uint64_t)AllOnesValue;
  v18[3] = (uint64_t)a6;
  return llvm::IRBuilderBase::CreateMaskedIntrinsic((uint64_t *)a1, 184, v18, 4, v19, 2, a7);
}

uint64_t llvm::IRBuilderBase::CreateMaskedScatter(uint64_t a1, uint64_t *a2, uint64_t *a3, char a4, llvm::ValueHandleBase *a5)
{
  llvm::ValueHandleBase *AllOnesValue;
  uint64_t v10;
  uint64_t v11;
  llvm::Constant *v12;
  llvm::Type *v13;
  _WORD v15[20];
  uint64_t v16[4];
  uint64_t v17[3];

  AllOnesValue = a5;
  v17[2] = *MEMORY[0x1E0C80C00];
  v10 = *a3;
  v11 = *a2;
  if (!a5)
  {
    llvm::VectorType::get((llvm::FixedVectorType *)(**(_QWORD **)(a1 + 64) + 1888), (llvm::Type *)(*(unsigned int *)(v10 + 32) | ((unint64_t)(*(_BYTE *)(v10 + 8) == 19) << 32)));
    AllOnesValue = llvm::Constant::getAllOnesValue(v12, v13);
  }
  v17[0] = v11;
  v17[1] = v10;
  v16[0] = (uint64_t)a2;
  v16[1] = (uint64_t)a3;
  v16[2] = (uint64_t)llvm::ConstantInt::get((llvm::ConstantInt **)(**(_QWORD **)(a1 + 64) + 1960), (1 << a4), 0);
  v16[3] = (uint64_t)AllOnesValue;
  v15[16] = 257;
  return llvm::IRBuilderBase::CreateMaskedIntrinsic((uint64_t *)a1, 186, v16, 4, v17, 2, (uint64_t)v15);
}

uint64_t llvm::IRBuilderBase::CreateGCResult(llvm::IRBuilderBase *this, llvm::Instruction *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  uint64_t *v7;
  uint64_t Declaration;
  uint64_t **v9;
  llvm::Instruction *v11;
  uint64_t v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v7 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 40);
  v12[0] = (uint64_t)a3;
  Declaration = llvm::Intrinsic::getDeclaration(v7, 123, v12, 1);
  v11 = a2;
  if (Declaration)
    v9 = *(uint64_t ***)(Declaration + 24);
  else
    v9 = 0;
  return sub_1C5062DD8((uint64_t *)this, v9, Declaration, (uint64_t *)&v11, 1, 0, 0, (uint64_t)a4, 0);
}

uint64_t sub_1C623AB30(uint64_t a1, __int16 a2)
{
  char v3;
  unsigned __int8 *v4;
  unsigned __int8 *v6[3];

  v3 = *(_BYTE *)(a1 + 102);
  if ((a2 & 0xFF00) != 0)
    v3 = a2;
  llvm::convertRoundingModeToStr(v3, (uint64_t)v6);
  v4 = (unsigned __int8 *)llvm::MDString::get(*(uint64_t **)(a1 + 64), v6[0], (size_t)v6[1]);
  return llvm::MetadataAsValue::get(*(uint64_t **)(a1 + 64), v4);
}

uint64_t sub_1C623AB84(uint64_t a1, __int16 a2)
{
  unsigned __int8 v3;
  unsigned __int8 *v4;
  unsigned __int8 *v6[3];

  v3 = *(_BYTE *)(a1 + 101);
  if ((a2 & 0xFF00) != 0)
    v3 = a2;
  llvm::convertExceptionBehaviorToStr(v3, (uint64_t)v6);
  v4 = (unsigned __int8 *)llvm::MDString::get(*(uint64_t **)(a1 + 64), v6[0], (size_t)v6[1]);
  return llvm::MetadataAsValue::get(*(uint64_t **)(a1 + 64), v4);
}

unsigned __int8 *llvm::IRBuilderBase::CreateNAryOp(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, llvm::MDNode *a6)
{
  if ((a2 - 13) > 0x11)
    return sub_1C53D8D24(a1, 12, *a3, a5, a6);
  else
    return sub_1C4773860((uint64_t)a1, a2, (_QWORD *)*a3, a3[1], a5, a6);
}

uint64_t llvm::IRBuilderBase::CreateConstrainedFPCall(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, __int16 a6, __int16 a7)
{
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  void *v22;
  uint64_t v23;
  _QWORD v24[7];

  v24[6] = *MEMORY[0x1E0C80C00];
  v22 = v24;
  v23 = 0x600000000;
  sub_1C623C324((unsigned int *)&v22, (uint64_t)v24, a3, &a3[a4]);
  v12 = *(_DWORD *)(a2 + 36) - 80;
  v13 = v12 > 0x26;
  v14 = (1 << v12) & 0x5CF07BC74FLL;
  if (!v13 && v14 != 0)
  {
    v16 = sub_1C623AB30((uint64_t)a1, a6);
    v17 = v23;
    if (v23 >= HIDWORD(v23))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, (uint64_t)v24, v23 + 1, 8);
      v17 = v23;
    }
    *((_QWORD *)v22 + v17) = v16;
    LODWORD(v23) = v23 + 1;
  }
  v18 = sub_1C623AB84((uint64_t)a1, a7);
  v19 = v23;
  if (v23 >= HIDWORD(v23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, (uint64_t)v24, v23 + 1, 8);
    v19 = v23;
  }
  *((_QWORD *)v22 + v19) = v18;
  LODWORD(v23) = v23 + 1;
  v20 = sub_1C4774778(a1, *(uint64_t ***)(a2 + 24), a2, (uint64_t *)v22, v23, a5, 0);
  *(_QWORD *)(v20 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v20 + 64), **(uint64_t ***)v20, -1, 61);
  if (v22 != v24)
    free(v22);
  return v20;
}

uint64_t llvm::IRBuilderBase::CreatePtrDiff(llvm::IRBuilderBase *this, llvm::Type *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  llvm::Type *v14;
  llvm::UndefValue *SizeOf;
  _BYTE v17[32];
  __int16 v18;

  v9 = **((_QWORD **)this + 8) + 1984;
  v18 = 257;
  v10 = sub_1C4773E38((uint64_t *)this, 47, (unsigned __int8 *)a3, v9, (uint64_t)v17);
  v11 = **((_QWORD **)this + 8) + 1984;
  v18 = 257;
  v12 = sub_1C4773E38((uint64_t *)this, 47, (unsigned __int8 *)a4, v11, (uint64_t)v17);
  v18 = 257;
  v13 = sub_1C47733F8((uint64_t)this, (uint64_t)v10, (uint64_t)v12, (uint64_t)v17, 0, 0);
  SizeOf = llvm::ConstantExpr::getSizeOf(a2, v14);
  return sub_1C538EA44((uint64_t)this, v13, (uint64_t)SizeOf, (uint64_t)a5, 1);
}

uint64_t llvm::IRBuilderBase::CreateVectorReverse(llvm::IRBuilderBase *this, void **a2, const llvm::Twine *a3)
{
  llvm::PoisonValue *v5;
  uint64_t *v6;
  uint64_t Declaration;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v13;
  int v14;
  uint64_t v15;
  _WORD *v16;
  _QWORD *v17;
  void **v18;
  void *v19;
  uint64_t v20;
  _WORD v21[16];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v18 = a2;
  v5 = (llvm::PoisonValue *)*a2;
  if (*((_BYTE *)*a2 + 8) == 19)
  {
    v6 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 40);
    v19 = *a2;
    Declaration = llvm::Intrinsic::getDeclaration(v6, 133, (uint64_t *)&v19, 1);
    v8 = Declaration;
    if (Declaration)
      Declaration = *(_QWORD *)(Declaration + 24);
    v21[8] = 257;
    v9 = sub_1C53DAB90((uint64_t **)Declaration, v8, (uint64_t *)&v18, 1, 0, 0, (uint64_t)&v19, 0);
    return sub_1C477438C((uint64_t *)this, v9, (uint64_t)a3);
  }
  else
  {
    v19 = v21;
    v20 = 0x800000000;
    v13 = *((_DWORD *)v5 + 8);
    v14 = v13 - 1;
    if (v13 < 1)
    {
      v15 = 0;
      v16 = v21;
    }
    else
    {
      LODWORD(v15) = 0;
      do
      {
        if (v15 >= HIDWORD(v20))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, (uint64_t)v21, v15 + 1, 4);
          LODWORD(v15) = v20;
        }
        *((_DWORD *)v19 + v15) = v14;
        v15 = (v20 + 1);
        LODWORD(v20) = v20 + 1;
        --v14;
      }
      while (v14 != -1);
      v16 = v19;
      v5 = (llvm::PoisonValue *)*a2;
    }
    v17 = llvm::PoisonValue::get(v5, (llvm::Type *)a2);
    v10 = sub_1C486AD20((uint64_t)this, (uint64_t)a2, (uint64_t)v17, v16, v15, (uint64_t)a3);
    if (v19 != v21)
      free(v19);
  }
  return v10;
}

uint64_t llvm::IRBuilderBase::CreatePreserveArrayAccessIndex(llvm::IRBuilderBase *this, llvm::Type *a2, llvm::Value *a3, unsigned int a4, llvm::IntegerType *a5, llvm::MDNode *a6)
{
  uint64_t v11;
  llvm::ValueHandleBase *v12;
  llvm::ValueHandleBase *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t Declaration;
  llvm::ValueHandleBase *v18;
  uint64_t **v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23[4];
  __int16 v24;
  uint64_t v25[3];
  void *v26;
  uint64_t v27;
  _QWORD v28[5];

  v28[4] = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)a3;
  v12 = llvm::ConstantInt::get((llvm::ConstantInt **)(**((_QWORD **)this + 8) + 1960), a5, 0);
  v13 = llvm::ConstantInt::get((llvm::ConstantInt **)(**((_QWORD **)this + 8) + 1960), 0, 0);
  v26 = v28;
  v27 = 0x400000000;
  sub_1C4848C0C((unsigned int *)&v26, a4, (uint64_t)v13);
  v14 = v27;
  if (v27 >= HIDWORD(v27))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, (uint64_t)v28, v27 + 1, 8);
    v14 = v27;
  }
  *((_QWORD *)v26 + v14) = v12;
  LODWORD(v27) = v27 + 1;
  sub_1C4774650(a2, (uint64_t *)a3, (llvm::Value *)v26, v27);
  v15 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 40);
  v23[0] = v16;
  v23[1] = v11;
  Declaration = llvm::Intrinsic::getDeclaration(v15, 241, v23, 2);
  v18 = llvm::ConstantInt::get((llvm::ConstantInt **)(**((_QWORD **)this + 8) + 1960), a4, 0);
  if (Declaration)
    v19 = *(uint64_t ***)(Declaration + 24);
  else
    v19 = 0;
  v25[0] = (uint64_t)a3;
  v25[1] = (uint64_t)v18;
  v25[2] = (uint64_t)v12;
  v24 = 257;
  v20 = sub_1C4774778((uint64_t *)this, v19, Declaration, v25, 3, (uint64_t)v23, 0);
  v21 = llvm::Attribute::get(**(uint64_t ***)v20, 70, (uint64_t)a2);
  LODWORD(v23[0]) = 0;
  *(_QWORD *)(v20 + 64) = llvm::AttributeList::addParamAttribute((_QWORD *)(v20 + 64), **(uint64_t ***)v20, v23, 1, v21);
  if (a6)
    llvm::Value::setMetadata((llvm::Value *)v20, 27, a6);
  if (v26 != v28)
    free(v26);
  return v20;
}

llvm::Value *llvm::IRBuilderBase::CreatePreserveUnionAccessIndex(llvm::IRBuilderBase *this, llvm::Value *a2, unsigned int a3, llvm::MDNode *a4)
{
  uint64_t *v8;
  uint64_t Declaration;
  llvm::ValueHandleBase *v10;
  uint64_t **v11;
  llvm::Value *v12;
  llvm::Value *v13;
  uint64_t v15[4];
  __int16 v16;
  uint64_t v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 40);
  v15[0] = *(_QWORD *)a2;
  v15[1] = v15[0];
  Declaration = llvm::Intrinsic::getDeclaration(v8, 243, v15, 2);
  v10 = llvm::ConstantInt::get((llvm::ConstantInt **)(**((_QWORD **)this + 8) + 1960), a3, 0);
  if (Declaration)
    v11 = *(uint64_t ***)(Declaration + 24);
  else
    v11 = 0;
  v17[0] = (uint64_t)a2;
  v17[1] = (uint64_t)v10;
  v16 = 257;
  v12 = (llvm::Value *)sub_1C4774778((uint64_t *)this, v11, Declaration, v17, 2, (uint64_t)v15, 0);
  v13 = v12;
  if (a4)
    llvm::Value::setMetadata(v12, 27, a4);
  return v13;
}

uint64_t llvm::IRBuilderBase::CreatePreserveStructAccessIndex(llvm::IRBuilderBase *this, llvm::Type *a2, llvm::Value *a3, llvm::IntegerType *a4, unsigned int a5, llvm::MDNode *a6)
{
  uint64_t v11;
  llvm::ValueHandleBase *v12;
  uint64_t *v13;
  llvm::ValueHandleBase *v14;
  uint64_t Declaration;
  llvm::ValueHandleBase *v16;
  uint64_t **v17;
  uint64_t v18;
  unint64_t v19;
  llvm::ValueHandleBase *v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24[4];

  v24[3] = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)a3;
  v12 = llvm::ConstantInt::get((llvm::ConstantInt **)(**((_QWORD **)this + 8) + 1960), a4, 0);
  v21 = llvm::ConstantInt::get((llvm::ConstantInt **)(**((_QWORD **)this + 8) + 1960), 0, 0);
  v22 = (uint64_t)v12;
  sub_1C4774650(a2, (uint64_t *)a3, (llvm::Value *)&v21, 2);
  v13 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 40);
  v21 = v14;
  v22 = v11;
  Declaration = llvm::Intrinsic::getDeclaration(v13, 242, (uint64_t *)&v21, 2);
  v16 = llvm::ConstantInt::get((llvm::ConstantInt **)(**((_QWORD **)this + 8) + 1960), a5, 0);
  if (Declaration)
    v17 = *(uint64_t ***)(Declaration + 24);
  else
    v17 = 0;
  v24[0] = (uint64_t)a3;
  v24[1] = (uint64_t)v12;
  v24[2] = (uint64_t)v16;
  v23 = 257;
  v18 = sub_1C4774778((uint64_t *)this, v17, Declaration, v24, 3, (uint64_t)&v21, 0);
  v19 = llvm::Attribute::get(**(uint64_t ***)v18, 70, (uint64_t)a2);
  LODWORD(v21) = 0;
  *(_QWORD *)(v18 + 64) = llvm::AttributeList::addParamAttribute((_QWORD *)(v18 + 64), **(uint64_t ***)v18, &v21, 1, v19);
  if (a6)
    llvm::Value::setMetadata((llvm::Value *)v18, 27, a6);
  return v18;
}

uint64_t llvm::IRBuilderBase::CreateAlignmentAssumption(llvm::LLVMContext **this, const llvm::DataLayout *a2, llvm::Value *a3, unsigned int a4, llvm::Value *a5)
{
  llvm::ConstantInt *IntPtrType;
  llvm::Value **v10;
  const llvm::DataLayout *v11;

  IntPtrType = (llvm::ConstantInt *)llvm::DataLayout::getIntPtrType(a2, this[8], *(_DWORD *)(*(_QWORD *)a3 + 8) >> 8);
  v10 = llvm::ConstantInt::get(IntPtrType, a4, 0);
  return llvm::IRBuilderBase::CreateAlignmentAssumptionHelper((llvm::IRBuilderBase *)this, v11, a3, (llvm::Value *)v10, a5);
}

void llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter(llvm::IRBuilderDefaultInserter *this)
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C623B5BC()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::ValueHandleBase *sub_1C623B5D0(int a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getFAdd(this, a3, a3, a4);
}

llvm::ValueHandleBase *sub_1C623B5DC(int a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getFSub(this, a3, a3, a4);
}

llvm::ValueHandleBase *sub_1C623B5E8(int a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getFMul(this, a3, a3, a4);
}

llvm::ValueHandleBase *sub_1C623B5F4(int a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getSDiv(this, a3, a4, a4);
}

llvm::ValueHandleBase *sub_1C623B604(int a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getFDiv(this, a3, a3, a4);
}

llvm::ValueHandleBase *sub_1C623B610(int a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getURem(this, a3, a3, a4);
}

llvm::ValueHandleBase *sub_1C623B61C(int a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getSRem(this, a3, a3, a4);
}

llvm::ValueHandleBase *sub_1C623B628(int a1, llvm::ConstantExpr *this, llvm::Constant *a3, uint64_t a4, uint64_t a5, llvm::Type *a6)
{
  return llvm::ConstantExpr::getFRem(this, a3, a3, a4, a5, a6);
}

llvm::ValueHandleBase *sub_1C623B634(int a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4, llvm::Constant *a5)
{
  return llvm::ConstantExpr::getShl(this, a3, a4, a5);
}

llvm::ValueHandleBase *sub_1C623B648(int a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4, uint64_t a5, llvm::Type *a6)
{
  return llvm::ConstantExpr::getAShr(this, a3, a4, (BOOL)a4, a5, a6);
}

uint64_t sub_1C623B658(int a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getXor(this, a3, a3, a4);
}

llvm::ValueHandleBase *sub_1C623B664(int a1, llvm::ConstantExpr *this, llvm::Constant *a3, int a4)
{
  return llvm::ConstantExpr::getNeg(this, a3, a4);
}

uint64_t sub_1C623B674(int a1, llvm::ConstantExpr *this, uint64_t a3, uint64_t a4, llvm::Type *a5)
{
  return llvm::ConstantExpr::getFNeg(this, this, a3, a4, a5);
}

uint64_t sub_1C623B67C(int a1, llvm::Constant **this)
{
  return llvm::ConstantExpr::getNot(this, (llvm::Constant *)this);
}

uint64_t sub_1C623B684(int a1, llvm::ConstantExpr *this, unsigned __int8 *a3, uint64_t a4, llvm::Type *a5)
{
  return llvm::ConstantExpr::get(this, a3, 0, 0, a5);
}

llvm::UndefValue *sub_1C623B698(int a1, llvm::ConstantExpr *this, llvm::Constant *a3)
{
  return llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(this, a3, a3);
}

llvm::ConstantExpr *sub_1C623B6A4(int a1, llvm::ConstantExpr *this, llvm::Type ***a3)
{
  return llvm::ConstantExpr::getFPCast(this, a3, (llvm::Type *)a3);
}

llvm::UndefValue *sub_1C623B6B0(uint64_t a1, llvm::Constant **a2, llvm::Constant *a3)
{
  if (*a2 == a3)
    return (llvm::UndefValue *)a2;
  else
    return sub_1C537D3B8((llvm *)0x31, (uint64_t)a2, a3, 0);
}

llvm::UndefValue *sub_1C623B6D0(uint64_t a1, uint64_t a2, llvm::Constant *a3)
{
  return sub_1C537D3B8((llvm *)0x30, a2, a3, 0);
}

llvm::UndefValue *sub_1C623B6DC(uint64_t a1, uint64_t a2, llvm::Constant *a3)
{
  return sub_1C537D3B8((llvm *)0x2F, a2, a3, 0);
}

llvm::UndefValue *sub_1C623B6E8(int a1, llvm::Type **this, llvm::Type ***a3)
{
  return llvm::ConstantExpr::getZExtOrBitCast(this, a3, (llvm::Type *)a3);
}

llvm::ConstantExpr *sub_1C623B6F4(int a1, llvm::Type **this, llvm::Type ***a3)
{
  return llvm::ConstantExpr::getSExtOrBitCast(this, a3, (llvm::Type *)a3);
}

llvm::ConstantExpr *sub_1C623B700(int a1, llvm::Type **this, llvm::Type ***a3)
{
  return llvm::ConstantExpr::getTruncOrBitCast(this, a3, (llvm::Type *)a3);
}

llvm::UndefValue *sub_1C623B70C(int a1, unsigned __int16 a2, unsigned __int8 *a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)a2, a3, a4, 0);
}

llvm::UndefValue *sub_1C623B720(int a1, llvm::Constant *this, unsigned int *a3, uint64_t a4)
{
  return llvm::ConstantExpr::getExtractValue(this, a3, a4, 0);
}

void *sub_1C623B734(uint64_t a1, llvm::Constant *a2, uint64_t *a3, _DWORD *a4, uint64_t a5)
{
  return llvm::ConstantExpr::getInsertValue(a2, a3, a4, a5, 0);
}

void sub_1C623B750()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C623B764()
{
  return 0;
}

uint64_t sub_1C623B76C()
{
  return 0;
}

uint64_t sub_1C623B774()
{
  return 0;
}

uint64_t sub_1C623B77C()
{
  return 0;
}

llvm::Value *sub_1C623B784(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _BYTE v4[32];
  __int16 v5;

  v5 = 257;
  return llvm::BinaryOperator::Create(14, a2, a3, (uint64_t)v4, 0);
}

llvm::Value *sub_1C623B7B4(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, int a5)
{
  llvm::Value *result;
  _BYTE v8[32];
  __int16 v9;

  v9 = 257;
  result = llvm::BinaryOperator::Create(15, a2, a3, (uint64_t)v8, 0);
  if (a4)
    *((_BYTE *)result + 17) |= 2u;
  if (a5)
    *((_BYTE *)result + 17) |= 4u;
  return result;
}

llvm::Value *sub_1C623B814(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _BYTE v4[32];
  __int16 v5;

  v5 = 257;
  return llvm::BinaryOperator::Create(16, a2, a3, (uint64_t)v4, 0);
}

llvm::Value *sub_1C623B844(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, int a5)
{
  llvm::Value *result;
  _BYTE v8[32];
  __int16 v9;

  v9 = 257;
  result = llvm::BinaryOperator::Create(17, a2, a3, (uint64_t)v8, 0);
  if (a4)
    *((_BYTE *)result + 17) |= 2u;
  if (a5)
    *((_BYTE *)result + 17) |= 4u;
  return result;
}

llvm::Value *sub_1C623B8A4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _BYTE v4[32];
  __int16 v5;

  v5 = 257;
  return llvm::BinaryOperator::Create(18, a2, a3, (uint64_t)v4, 0);
}

llvm::Value *sub_1C623B8D4(uint64_t a1, _QWORD *a2, uint64_t a3, char a4)
{
  llvm::Value *result;
  _BYTE v5[32];
  __int16 v6;

  v6 = 257;
  if ((a4 & 1) == 0)
    return llvm::BinaryOperator::Create(19, a2, a3, (uint64_t)v5, 0);
  result = llvm::BinaryOperator::Create(19, a2, a3, (uint64_t)v5, 0);
  *((_BYTE *)result + 17) |= 2u;
  return result;
}

llvm::Value *sub_1C623B92C(uint64_t a1, _QWORD *a2, uint64_t a3, char a4)
{
  llvm::Value *result;
  _BYTE v5[32];
  __int16 v6;

  v6 = 257;
  if ((a4 & 1) == 0)
    return llvm::BinaryOperator::Create(20, a2, a3, (uint64_t)v5, 0);
  result = llvm::BinaryOperator::Create(20, a2, a3, (uint64_t)v5, 0);
  *((_BYTE *)result + 17) |= 2u;
  return result;
}

llvm::Value *sub_1C623B984(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _BYTE v4[32];
  __int16 v5;

  v5 = 257;
  return llvm::BinaryOperator::Create(21, a2, a3, (uint64_t)v4, 0);
}

llvm::Value *sub_1C623B9B4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _BYTE v4[32];
  __int16 v5;

  v5 = 257;
  return llvm::BinaryOperator::Create(22, a2, a3, (uint64_t)v4, 0);
}

llvm::Value *sub_1C623B9E4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _BYTE v4[32];
  __int16 v5;

  v5 = 257;
  return llvm::BinaryOperator::Create(23, a2, a3, (uint64_t)v4, 0);
}

llvm::Value *sub_1C623BA14(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _BYTE v4[32];
  __int16 v5;

  v5 = 257;
  return llvm::BinaryOperator::Create(24, a2, a3, (uint64_t)v4, 0);
}

llvm::Value *sub_1C623BA44(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, int a5)
{
  llvm::Value *result;
  _BYTE v8[32];
  __int16 v9;

  v9 = 257;
  result = llvm::BinaryOperator::Create(25, a2, a3, (uint64_t)v8, 0);
  if (a4)
    *((_BYTE *)result + 17) |= 2u;
  if (a5)
    *((_BYTE *)result + 17) |= 4u;
  return result;
}

llvm::Value *sub_1C623BAA4(uint64_t a1, _QWORD *a2, uint64_t a3, char a4)
{
  llvm::Value *result;
  _BYTE v5[32];
  __int16 v6;

  v6 = 257;
  if ((a4 & 1) == 0)
    return llvm::BinaryOperator::Create(26, a2, a3, (uint64_t)v5, 0);
  result = llvm::BinaryOperator::Create(26, a2, a3, (uint64_t)v5, 0);
  *((_BYTE *)result + 17) |= 2u;
  return result;
}

llvm::Value *sub_1C623BAFC(uint64_t a1, _QWORD *a2, uint64_t a3, char a4)
{
  llvm::Value *result;
  _BYTE v5[32];
  __int16 v6;

  v6 = 257;
  if ((a4 & 1) == 0)
    return llvm::BinaryOperator::Create(27, a2, a3, (uint64_t)v5, 0);
  result = llvm::BinaryOperator::Create(27, a2, a3, (uint64_t)v5, 0);
  *((_BYTE *)result + 17) |= 2u;
  return result;
}

llvm::Value *sub_1C623BB54(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _BYTE v4[32];
  __int16 v5;

  v5 = 257;
  return llvm::BinaryOperator::Create(30, a2, a3, (uint64_t)v4, 0);
}

llvm::Value *sub_1C623BB84(uint64_t a1, char a2, _QWORD *a3, uint64_t a4)
{
  _BYTE v5[32];
  __int16 v6;

  v6 = 257;
  return llvm::BinaryOperator::Create(a2, a3, a4, (uint64_t)v5, 0);
}

llvm::Value *sub_1C623BBC0(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  llvm::Value *result;
  _BYTE v7[32];
  __int16 v8;

  v8 = 257;
  result = llvm::BinaryOperator::CreateNeg(a2, (llvm::Type *)v7, 0);
  if (a3)
    *((_BYTE *)result + 17) |= 2u;
  if (a4)
    *((_BYTE *)result + 17) |= 4u;
  return result;
}

uint64_t sub_1C623BC20(uint64_t a1, uint64_t *a2)
{
  _BYTE v3[32];
  __int16 v4;

  v4 = 257;
  return llvm::UnaryOperator::Create(12, a2, (uint64_t)v3, 0);
}

llvm::Value *sub_1C623BC50(uint64_t a1, uint64_t a2)
{
  _BYTE v3[32];
  __int16 v4;

  v4 = 257;
  return llvm::BinaryOperator::CreateNot(a2, (llvm::Type *)v3, 0);
}

uint64_t sub_1C623BC80(uint64_t a1, char a2, uint64_t *a3)
{
  _BYTE v4[32];
  __int16 v5;

  v5 = 257;
  return llvm::UnaryOperator::Create(a2, a3, (uint64_t)v4, 0);
}

void sub_1C623BCB8(uint64_t a1, int a2)
{
  llvm::CastInst::Create(a2);
}

llvm::Value *sub_1C623BCF4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _BYTE v4[32];
  __int16 v5;

  v5 = 257;
  return llvm::CastInst::CreatePointerCast(a2, a3, (uint64_t)v4, 0);
}

llvm::Value *sub_1C623BD2C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _BYTE v4[32];
  __int16 v5;

  v5 = 257;
  return llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast(a2, a3, (uint64_t)v4, 0);
}

void sub_1C623BD64(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  llvm::CastInst::CreateIntegerCast(a2, a3, a4);
}

void sub_1C623BDA0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  llvm::CastInst::CreateFPCast(a2, a3);
}

void sub_1C623BDD8()
{
  llvm::CastInst::Create(49);
}

void sub_1C623BE08()
{
  llvm::CastInst::Create(48);
}

void sub_1C623BE38()
{
  llvm::CastInst::Create(47);
}

llvm::Value *sub_1C623BE68(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _BYTE v4[32];
  __int16 v5;

  v5 = 257;
  return llvm::CastInst::CreateZExtOrBitCast(a2, a3, (uint64_t)v4, 0);
}

char *sub_1C623BEA0(uint64_t a1, llvm::CastInst *a2, llvm::Type ***a3, uint64_t a4, llvm::Instruction *a5)
{
  _BYTE v6[32];
  __int16 v7;

  v7 = 257;
  return llvm::CastInst::CreateSExtOrBitCast(a2, a3, (llvm::Type *)v6, 0, a5);
}

llvm::Value *sub_1C623BED8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _BYTE v4[32];
  __int16 v5;

  v5 = 257;
  return llvm::CastInst::CreateTruncOrBitCast(a2, a3, (uint64_t)v4, 0);
}

uint64_t sub_1C623BF10(uint64_t a1, __int16 a2, _DWORD **a3, uint64_t a4)
{
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[32];
  __int16 v12;

  v7 = operator new(0x80uLL);
  v7[21] = v7[21] & 0x38000000 | 2;
  v8 = (uint64_t)(v7 + 16);
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *((_QWORD *)v7 + 3) = v7 + 16;
  *((_QWORD *)v7 + 4) = 0;
  *((_QWORD *)v7 + 5) = 0;
  *((_QWORD *)v7 + 6) = 0;
  *((_QWORD *)v7 + 7) = v7 + 16;
  v12 = 257;
  sub_1C4774CC4(*a3);
  return llvm::CmpInst::CmpInst(v8, v9, 54, a2, (uint64_t)a3, a4, (uint64_t)v11, 0, 0);
}

uint64_t sub_1C623BFA8(uint64_t a1, llvm::Value *a2, llvm::Value *a3)
{
  _DWORD *v5;
  _BYTE v7[32];
  __int16 v8;

  v8 = 257;
  v5 = operator new(0x80uLL);
  v5[21] = v5[21] & 0x38000000 | 2;
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 3) = v5 + 16;
  *((_QWORD *)v5 + 4) = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 7) = v5 + 16;
  return llvm::ExtractElementInst::ExtractElementInst((llvm::ExtractElementInst *)(v5 + 16), a2, a3, (const llvm::Twine *)v7, 0);
}

uint64_t sub_1C623C024(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _BYTE v12[32];
  __int16 v13;

  v13 = 257;
  v7 = operator new(0xA0uLL);
  v8 = 0;
  v9 = (uint64_t)(v7 + 24);
  v7[29] = v7[29] & 0x38000000 | 3;
  do
  {
    v10 = &v7[v8];
    *v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
    v10[3] = v9;
    v8 += 8;
  }
  while (v8 != 24);
  return llvm::InsertElementInst::InsertElementInst(v9, a2, a3, a4, (uint64_t)v12, 0);
}

_BYTE **sub_1C623C0B4(uint64_t a1, _QWORD *a2, uint64_t a3, void *a4, uint64_t a5)
{
  _DWORD *v9;
  _BYTE v11[32];
  __int16 v12;

  v9 = operator new(0xA8uLL);
  v9[21] = v9[21] & 0x38000000 | 2;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *((_QWORD *)v9 + 3) = v9 + 16;
  *((_QWORD *)v9 + 4) = 0;
  *((_QWORD *)v9 + 5) = 0;
  *((_QWORD *)v9 + 6) = 0;
  *((_QWORD *)v9 + 7) = v9 + 16;
  v12 = 257;
  return llvm::ShuffleVectorInst::ShuffleVectorInst((_BYTE **)v9 + 8, a2, a3, a4, a5, (uint64_t)v11, 0);
}

llvm::Value *sub_1C623C148(uint64_t a1, uint64_t *a2, unsigned int *a3, uint64_t a4)
{
  _BYTE v5[32];
  __int16 v6;

  v6 = 257;
  return sub_1C4FC8964(a2, a3, a4, (uint64_t)v5, 0);
}

char *sub_1C623C184(uint64_t a1, llvm::Type **a2, uint64_t a3, void *a4, uint64_t a5)
{
  _BYTE v6[32];
  __int16 v7;

  v7 = 257;
  return sub_1C61BD4C4(a2, a3, a4, a5, (uint64_t)v6, 0);
}

uint64_t sub_1C623C1C4(uint64_t *a1, const void *a2, unsigned int a3)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= a1[2])
  {
    result = sub_1C53DB6E8(a1, a2, a3);
  }
  else
  {
    *(_QWORD *)v4 = 0x74706F6564;
    *(_BYTE *)(v4 + 23) = 5;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    sub_1C4DFE394((_QWORD *)(v4 + 24), a2, (uint64_t)a2 + 8 * a3, a3);
    result = v4 + 48;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_1C623C230(uint64_t *a1, const void *a2, unsigned int a3)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= a1[2])
  {
    result = sub_1C53DB858(a1, a2, a3);
  }
  else
  {
    strcpy((char *)v4, "gc-transition");
    *(_BYTE *)(v4 + 23) = 13;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    sub_1C4DFE394((_QWORD *)(v4 + 24), a2, (uint64_t)a2 + 8 * a3, a3);
    result = v4 + 48;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_1C623C2B4(uint64_t *a1, const void *a2, unsigned int a3)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= a1[2])
  {
    result = sub_1C53DB9E0(a1, a2, a3);
  }
  else
  {
    *(_QWORD *)v4 = 0x6576696C2D6367;
    *(_BYTE *)(v4 + 23) = 7;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    sub_1C4DFE394((_QWORD *)(v4 + 24), a2, (uint64_t)a2 + 8 * a3, a3);
    result = v4 + 48;
  }
  a1[1] = result;
  return result;
}

_BYTE *sub_1C623C324(unsigned int *a1, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;

  v5 = __src;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = a1[2];
  if (*(_QWORD *)a1 + 8 * v9 == a2)
  {
    sub_1C4FA6FB8(a1, __src, a4);
    return (_BYTE *)(*(_QWORD *)a1 + 8 * v8);
  }
  else
  {
    v10 = (char *)a4 - (char *)__src;
    v11 = a4 - __src;
    if (v9 + v11 > a1[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v9 + v11, 8);
      v7 = *(_QWORD *)a1;
      v9 = a1[2];
    }
    v12 = (_BYTE *)(v7 + 8 * v8);
    v13 = (_BYTE *)(v7 + 8 * v9);
    v14 = (v13 - v12) >> 3;
    if (v14 >= v11)
    {
      sub_1C6177054(a1, &v13[-8 * v11], (char *)(v7 + 8 * v9));
      if (&v13[-8 * v11] != v12)
        memmove(&v12[8 * v11], v12, &v13[-8 * v11] - v12);
      if (v5 != a4)
        memmove(v12, v5, (char *)a4 - (char *)v5);
    }
    else
    {
      v15 = v9 + (v10 >> 3);
      a1[2] = v15;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * v15 - 8 * v14), v12, v13 - v12);
        v16 = v12;
        do
        {
          v17 = *v5++;
          *v16++ = v17;
          --v14;
        }
        while (v14);
      }
      if (v5 != a4)
        memcpy(v13, v5, (char *)a4 - (char *)v5);
    }
  }
  return v12;
}

unsigned __int8 **sub_1C623C480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char *v12;
  unsigned __int8 **v13;
  _BYTE v15[32];
  __int16 v16;

  v16 = 257;
  v12 = sub_1C61CC1B8(a2, a3, a4, a5, a6, a7, a9, a10, (uint64_t)v15, 0);
  v13 = (unsigned __int8 **)v12;
  if (*(_BYTE *)(a1 + 100))
    *((_QWORD *)v12 + 8) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v12 + 8, **(uint64_t ***)v12, -1, 61);
  return sub_1C61D76F0((uint64_t *)a1, v13, a11);
}

_QWORD *llvm::PrintFunctionPass::run@<X0>(const std::string **this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  char *Name;
  size_t v7;
  llvm *isFunctionInPrintList;
  int v9;
  llvm::raw_ostream *v10;
  char v11;
  int v12;
  const char *v13;
  size_t v14;
  size_t v15;
  llvm::raw_ostream *v16;
  size_t v17;
  char *v18;
  size_t v19;
  void *v20;
  llvm::raw_ostream *v21;
  _BYTE *v22;

  Name = llvm::Value::getName((llvm::Value *)this);
  isFunctionInPrintList = (llvm *)llvm::isFunctionInPrintList(Name, v7);
  if ((_DWORD)isFunctionInPrintList)
  {
    v9 = llvm::forcePrintModuleIR(isFunctionInPrintList);
    v10 = *(llvm::raw_ostream **)a2;
    v11 = *(_BYTE *)(a2 + 31);
    v12 = v11;
    if (v11 >= 0)
      v13 = (const char *)(a2 + 8);
    else
      v13 = *(const char **)(a2 + 8);
    v14 = v11 & 0x7F;
    if (v12 >= 0)
      v15 = v14;
    else
      v15 = *(_QWORD *)(a2 + 16);
    llvm::raw_ostream::write(*(llvm::raw_ostream **)a2, v13, v15);
    if (v9)
    {
      v16 = sub_1C4816AD8(v10, " (function: ");
      v18 = llvm::Value::getName((llvm::Value *)this);
      v19 = v17;
      v20 = (void *)*((_QWORD *)v16 + 4);
      if (v17 <= *((_QWORD *)v16 + 3) - (_QWORD)v20)
      {
        if (v17)
        {
          memcpy(v20, v18, v17);
          *((_QWORD *)v16 + 4) += v19;
        }
      }
      else
      {
        llvm::raw_ostream::write(v16, v18, v17);
      }
      v21 = sub_1C4816AD8(v16, ")\n");
      llvm::Module::print(this[5], v21, 0, 0, 0);
    }
    else
    {
      v22 = (_BYTE *)*((_QWORD *)v10 + 4);
      if ((unint64_t)v22 >= *((_QWORD *)v10 + 3))
      {
        v10 = llvm::raw_ostream::write(v10, 10);
      }
      else
      {
        *((_QWORD *)v10 + 4) = v22 + 1;
        *v22 = 10;
      }
      llvm::Value::print((llvm::Value *)this, v10, 0);
    }
  }
  return llvm::InstCountPass::run(a3);
}

void llvm::initializePrintModulePassWrapperPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED8047F0);
  if (v2 != -1)
  {
    v5[0] = sub_1C53DCA3C;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED8047F0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void llvm::initializePrintFunctionPassWrapperPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED8047F8);
  if (v2 != -1)
  {
    v5[0] = sub_1C53DCAD0;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED8047F8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

BOOL llvm::isIRPrintingPass(llvm *this, llvm::Pass *a2)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 2);
  return v2 == &unk_1EF8F7098 || v2 == &unk_1EF8F7099;
}

uint64_t llvm::GenericSSAContext<llvm::Function>::getEntryBlock(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
    return v1 - 24;
  else
    return 0;
}

_QWORD *llvm::GenericSSAContext<llvm::Function>::setFunction(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

uint64_t llvm::InlineAsm::get(llvm::PointerType *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, int a8, char a9)
{
  unint64_t v17;
  uint64_t v18;
  _QWORD v20[5];
  char v21;
  char v22;
  int v23;
  char v24;

  v17 = **(_QWORD **)a1 + 1536;
  v18 = llvm::PointerType::get(a1, 0);
  v20[0] = a2;
  v20[1] = a3;
  v20[2] = a4;
  v20[3] = a5;
  v20[4] = a1;
  v21 = a6;
  v22 = a7;
  v23 = a8;
  v24 = a9;
  return sub_1C623C814(v17, v18, (uint64_t)v20);
}

uint64_t sub_1C623C814(unint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  _OWORD v10[3];
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[64];
  uint64_t v18;
  uint64_t *v19[3];

  v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&v17[8] = *(_OWORD *)a3;
  *(_OWORD *)&v17[24] = v5;
  *(_OWORD *)&v17[40] = *(_OWORD *)(a3 + 32);
  v6 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)v17 = a2;
  *(_QWORD *)&v17[56] = v6;
  v12 = sub_1C623CB44((uint64_t)&v17[8], (uint64_t)&v17[24], &v17[48], &v17[49], (int *)&v17[52], (uint64_t *)&v17[40], &v17[56]);
  v12 = sub_1C623CA28((uint64_t *)v17, &v12);
  v13 = *(_OWORD *)v17;
  v14 = *(_OWORD *)&v17[16];
  v15 = *(_OWORD *)&v17[32];
  v16 = *(_OWORD *)&v17[48];
  v19[0] = 0;
  if (sub_1C623CD8C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t)&v12, v19)
    && v19[0] != (uint64_t *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16)))
  {
    return *v19[0];
  }
  v9 = *(_OWORD *)(a3 + 16);
  v10[0] = *(_OWORD *)a3;
  v10[1] = v9;
  v10[2] = *(_OWORD *)(a3 + 32);
  v11 = *(_QWORD *)(a3 + 48);
  v7 = sub_1C53DED60((uint64_t)v10);
  v18 = v7;
  sub_1C623CF60((uint64_t)v19, a1, &v18, (uint64_t)&v12);
  return v7;
}

uint64_t llvm::InlineAsm::getFunctionType(llvm::InlineAsm *this)
{
  return *((_QWORD *)this + 9);
}

void sub_1C623C93C(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 32 * a2;
      if (v3 != v5)
      {
        do
        {
          v6 = v3 - 32;
          v7 = (void **)(v3 - 24);
          sub_1C4765410(&v7);
          v3 = v6;
        }
        while (v6 != v5);
      }
      a1[1] = v5;
    }
  }
  else
  {
    sub_1C53DEFA0(a1, a2 - v4);
  }
}

void llvm::InlineAsm::ConstraintInfo::selectAlternative(llvm::InlineAsm::ConstraintInfo *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;

  v2 = *((_QWORD *)this + 6);
  if (a2 < (unint64_t)((*((_QWORD *)this + 7) - v2) >> 5))
  {
    *((_DWORD *)this + 18) = a2;
    v3 = v2 + 32 * a2;
    *((_DWORD *)this + 2) = *(_DWORD *)v3;
    v4 = (char *)this + 16;
    if (v4 != (char *)(v3 + 8))
      sub_1C4D82E38((uint64_t)v4, *(std::string **)(v3 + 8), *(std::string **)(v3 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8)) >> 3));
  }
}

unint64_t sub_1C623CA28(uint64_t *a1, int *a2)
{
  _OWORD v5[4];
  _OWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  v8 = sub_1C4D9B584();
  return sub_1C623CAC4((char *)v5, v5, (char *)v6, *a1, a2);
}

unint64_t sub_1C623CAC4(char *a1, _QWORD *__dst, char *a3, uint64_t a4, int *a5)
{
  _QWORD *v8;
  char *v9;
  uint64_t v11;
  int v12[2];

  v11 = 0;
  v8 = sub_1C50FDB34(a1, &v11, __dst, (unint64_t)a3, a4);
  *(_QWORD *)v12 = v11;
  v9 = (char *)sub_1C4ED49B0(a1, (uint64_t *)v12, v8, (unint64_t)a3, *a5);
  return sub_1C4E37BA0(a1, *(uint64_t *)v12, v9, a3);
}

unint64_t sub_1C623CB44(uint64_t a1, uint64_t a2, char *a3, char *a4, int *a5, uint64_t *a6, char *a7)
{
  _OWORD v15[4];
  _OWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  v18 = sub_1C4D9B584();
  return sub_1C623CC1C((char *)v15, v15, (char *)v16, *(_QWORD **)a1, *(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6, a7);
}

unint64_t sub_1C623CC1C(char *a1, _QWORD *a2, char *a3, _QWORD *a4, uint64_t a5, uint64_t a6, char *a7, char *a8, int *a9, uint64_t *a10, char *a11)
{
  unint64_t v17;
  _QWORD *v18;
  uint64_t v20;

  v20 = 0;
  v17 = llvm::hash_value(a4, a5);
  v18 = sub_1C4E37644(a1, &v20, a2, (unint64_t)a3, v17);
  return sub_1C623CCCC(a1, v20, v18, a3, *(_QWORD **)a6, *(_QWORD *)(a6 + 8), a7, a8, a9, a10, a11);
}

unint64_t sub_1C623CCCC(char *a1, uint64_t a2, _QWORD *a3, char *a4, _QWORD *a5, uint64_t a6, char *a7, char *a8, int *a9, uint64_t *a10, char *a11)
{
  unint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v20;
  uint64_t v21;

  v20 = a2;
  v16 = llvm::hash_value(a5, a6);
  v17 = sub_1C4E37644(a1, &v20, a3, (unint64_t)a4, v16);
  v21 = v20;
  v18 = sub_1C4ED4714(a1, &v21, v17, (unint64_t)a4, *a7);
  return sub_1C53DE830(a1, v21, v18, a4, *a8, a9, a10, a11);
}

uint64_t sub_1C623CD8C(uint64_t a1, int a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v7;
  unsigned int v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t result;

  if (!a2)
  {
    v12 = 0;
    result = 0;
    goto LABEL_14;
  }
  v7 = 0;
  v8 = *(_DWORD *)a3;
  v9 = a2 - 1;
  for (i = 1; ; ++i)
  {
    v11 = v8 & v9;
    v12 = (uint64_t *)(a1 + 8 * (v8 & v9));
    v13 = (_QWORD *)*v12;
    if (*v12 == -8192)
      goto LABEL_6;
    if (v13 == (_QWORD *)-4096)
      break;
    if (*(_QWORD *)(a3 + 8) == *v13 && sub_1C623CE68(a3 + 16, *v12))
    {
      result = 1;
      goto LABEL_14;
    }
LABEL_6:
    if (v7)
      v14 = 0;
    else
      v14 = v13 == (_QWORD *)-8192;
    if (v14)
      v7 = (uint64_t *)(a1 + 8 * v11);
    v8 = v11 + i;
  }
  result = 0;
  if (v7)
    v12 = v7;
LABEL_14:
  *a4 = v12;
  return result;
}

BOOL sub_1C623CE68(uint64_t a1, uint64_t a2)
{
  size_t v4;
  char v5;
  const void *v6;
  uint64_t v7;
  size_t v8;
  char v9;
  const void *v10;
  uint64_t v11;

  if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 80)
    || *(unsigned __int8 *)(a1 + 41) != *(unsigned __int8 *)(a2 + 81)
    || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 84))
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a2 + 47);
  if (v5 >= 0)
    v6 = (const void *)(a2 + 24);
  else
    v6 = *(const void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  if (v5 >= 0)
    v7 = v5 & 0x7F;
  if (v4 != v7 || v4 && memcmp(*(const void **)a1, v6, v4))
    return 0;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a2 + 71);
  if (v9 >= 0)
    v10 = (const void *)(a2 + 48);
  else
    v10 = *(const void **)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  if (v9 >= 0)
    v11 = v9 & 0x7F;
  return v8 == v11
      && (!v8 || !memcmp(*(const void **)(a1 + 16), v10, v8))
      && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 72)
      && *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 88);
}

uint64_t sub_1C623CF60(uint64_t a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t *v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;

  v12 = 0;
  result = sub_1C623CD8C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a4, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C623CFF0(a2, a4, v12);
    v9 = (uint64_t *)result;
    *(_QWORD *)result = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t *sub_1C623CFF0(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53DEEE8(a1, v6);
  v8 = 0;
  sub_1C623CD8C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

unint64_t sub_1C623D0A0(unint64_t result, uint64_t *a2, uint64_t *a3)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C623D150(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

unint64_t sub_1C623D150(unint64_t result, int a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v5;
  unint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;

  if (a2)
  {
    v8 = result;
    result = sub_1C623D1FC(*a3);
    v9 = a2 - 1;
    v10 = result & (a2 - 1);
    v5 = (_QWORD *)(v8 + 8 * v10);
    v11 = *v5;
    if (*a3 != *v5)
    {
      v12 = 0;
      v13 = 1;
      while (v11 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -8192;
        if (v14)
          v12 = v5;
        v15 = v10 + v13++;
        v10 = v15 & v9;
        v5 = (_QWORD *)(v8 + 8 * (v15 & v9));
        v11 = *v5;
        if (*a3 == *v5)
          goto LABEL_3;
      }
      if (v12)
        v5 = v12;
    }
  }
  else
  {
    v5 = 0;
  }
LABEL_3:
  *a4 = v5;
  return result;
}

unint64_t sub_1C623D1FC(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  char v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  _QWORD v24[2];
  _QWORD v25[2];
  uint64_t v26;
  char v27[4];
  int v28;
  char v29[12];
  int v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[33];

  v33[32] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)a1;
  v2 = *(_BYTE *)(a1 + 47);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 71);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_WORD *)(a1 + 80);
  v9 = *(_DWORD *)(a1 + 84);
  v10 = *(_BYTE *)(a1 + 88);
  v11 = v2 < 0;
  v14 = *(_QWORD *)(a1 + 24);
  v12 = a1 + 24;
  v13 = v14;
  if (v2 >= 0)
    v13 = v12;
  v31 = v33;
  v32 = 0x2000000000;
  v15 = v2 & 0x7F;
  if (v11)
    v15 = v3;
  v16 = v4 < 0;
  v19 = *(_QWORD *)(a1 + 48);
  v18 = a1 + 48;
  v17 = v19;
  if (v4 >= 0)
    v17 = v18;
  v20 = v4 & 0x7F;
  if (v16)
    v20 = v6;
  v23 = v1;
  v24[0] = v13;
  v24[1] = v15;
  v25[0] = v17;
  v25[1] = v20;
  v26 = v7;
  *(_WORD *)v27 = v8;
  v28 = v9;
  v29[0] = v10;
  v30 = sub_1C623CB44((uint64_t)v24, (uint64_t)v25, v27, &v27[1], &v28, &v26, v29);
  v21 = sub_1C623CA28(&v23, &v30);
  if (v31 != v33)
    free(v31);
  return v21;
}

uint64_t llvm::Instruction::copyFastMathFlags(uint64_t result, char a2)
{
  *(_BYTE *)(result + 17) = *(_BYTE *)(result + 17) & 1 | (2 * a2);
  return result;
}

uint64_t llvm::Instruction::hasAtomicStore(llvm::Instruction *this)
{
  return (*((unsigned __int8 *)this + 16) - 61 < 5) & (0x19u >> (*((_BYTE *)this + 16) - 61));
}

uint64_t sub_1C623D354(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result - 32 * *(unsigned int *)(result + 80);
  v4 = *(_QWORD *)(v2 - 64);
  v3 = v2 - 64;
  if (v4)
  {
    **(_QWORD **)(v3 + 16) = *(_QWORD *)(v3 + 8);
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  }
  *(_QWORD *)v3 = a2;
  if (a2)
  {
    v8 = *(_QWORD *)(a2 + 8);
    v6 = (_QWORD *)(a2 + 8);
    v7 = v8;
    *(_QWORD *)(v3 + 8) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = v3 + 8;
    *(_QWORD *)(v3 + 16) = v6;
    *v6 = v3;
  }
  return result;
}

llvm::BlockAddress **sub_1C623D3A8(unsigned int *a1, llvm::BasicBlock *a2, _QWORD *a3)
{
  unsigned int v4;
  llvm::BlockAddress **result;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a2;
  result = llvm::CallBrInst::updateArgBlockAddresses((llvm::CallBrInst *)a1, a2, (llvm::BasicBlock *)a3);
  v7 = (uint64_t)&a1[-8 * a1[20] - 8];
  v8 = (_QWORD *)(v7 + 32 * v4);
  v9 = v8;
  if (*v8)
  {
    v11 = (_QWORD *)v8[2];
    v10 = v8 + 2;
    *v11 = *(v10 - 1);
    v12 = *(v10 - 1);
    if (v12)
      *(_QWORD *)(v12 + 16) = *v10;
  }
  *v9 = a3;
  if (a3)
  {
    v15 = a3[1];
    v14 = a3 + 1;
    v13 = v15;
    v16 = v7 + 32 * v4;
    *(_QWORD *)(v16 + 8) = v15;
    if (v15)
      *(_QWORD *)(v13 + 16) = v16 + 8;
    *(_QWORD *)(v16 + 16) = v14;
    *v14 = v9;
  }
  return result;
}

llvm::LandingPadInst *llvm::LandingPadInst::LandingPadInst(llvm::LandingPadInst *this, llvm::Type *a2, unsigned int a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  llvm::Instruction *v8;
  _QWORD *v9;
  _QWORD *v10;

  v8 = llvm::Instruction::Instruction(this, a2, 66, 0, 0, a5);
  *((_DWORD *)v8 + 15) = a3;
  *((_DWORD *)v8 + 5) &= 0xF8000000;
  v9 = operator new(32 * a3);
  *((_QWORD *)this - 1) = v9;
  if (a3)
  {
    v10 = &v9[4 * a3];
    do
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v9[3] = this;
      v9 += 4;
    }
    while (v9 != v10);
  }
  llvm::Value::setName((uint64_t ***)this, (uint64_t)a4);
  *((_WORD *)this + 9) &= ~1u;
  return this;
}

llvm::LandingPadInst *llvm::LandingPadInst::LandingPadInst(llvm::LandingPadInst *this, llvm::Type *a2, unsigned int a3, const llvm::Twine *a4, llvm::BasicBlock *a5)
{
  llvm::Instruction *v8;
  _QWORD *v9;
  _QWORD *v10;

  v8 = llvm::Instruction::Instruction(this, a2, 66, 0, 0, a5);
  *((_DWORD *)v8 + 15) = a3;
  *((_DWORD *)v8 + 5) &= 0xF8000000;
  v9 = operator new(32 * a3);
  *((_QWORD *)this - 1) = v9;
  if (a3)
  {
    v10 = &v9[4 * a3];
    do
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v9[3] = this;
      v9 += 4;
    }
    while (v9 != v10);
  }
  llvm::Value::setName((uint64_t ***)this, (uint64_t)a4);
  *((_WORD *)this + 9) &= ~1u;
  return this;
}

uint64_t llvm::LandingPadInst::LandingPadInst(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  v4 = *(_DWORD *)(a2 + 20);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 94;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | v4 & 0x7FFFFFF;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  v5 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  v6 = operator new(32 * v5);
  *(_QWORD *)(a1 - 8) = v6;
  if ((_DWORD)v5)
  {
    v7 = v6;
    do
    {
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      v7[3] = a1;
      v7 += 4;
    }
    while (v7 != &v6[4 * v5]);
  }
  v8 = *(_DWORD *)(a1 + 20);
  if ((v8 & 0x40000000) != 0)
    v9 = v6;
  else
    v9 = (_QWORD *)(a1 - 32 * (v8 & 0x7FFFFFF));
  v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) != 0)
    v11 = *(uint64_t **)(a2 - 8);
  else
    v11 = (uint64_t *)(a2 - 32 * (v10 & 0x7FFFFFF));
  v12 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v12)
  {
    v13 = (_QWORD **)(v9 + 1);
    do
    {
      v14 = v13 - 1;
      v15 = *v11;
      if (*(v13 - 1))
      {
        *v13[1] = *v13;
        if (*v13)
          (*v13)[2] = v13[1];
      }
      *v14 = v15;
      if (v15)
      {
        v18 = *(_QWORD **)(v15 + 8);
        v16 = (_QWORD *)(v15 + 8);
        v17 = v18;
        *v13 = v18;
        if (v18)
          v17[2] = v13;
        v13[1] = v16;
        *v16 = v14;
      }
      v13 += 4;
      v11 += 4;
      --v12;
    }
    while (v12);
  }
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFFE | *(_WORD *)(a2 + 18) & 1;
  return a1;
}

llvm::LandingPadInst *llvm::LandingPadInst::Create(llvm::LandingPadInst *this, llvm::Type *a2, const llvm::Twine *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  unsigned int v7;
  _DWORD *v9;

  v7 = a2;
  v9 = operator new(0x48uLL);
  v9[7] = v9[7] & 0x38000000 | 0x40000000;
  *(_QWORD *)v9 = 0;
  return llvm::LandingPadInst::LandingPadInst((llvm::LandingPadInst *)(v9 + 2), this, v7, a3, a4);
}

llvm::LandingPadInst *llvm::LandingPadInst::Create(llvm::LandingPadInst *this, llvm::Type *a2, const llvm::Twine *a3, const llvm::Twine *a4, llvm::BasicBlock *a5)
{
  unsigned int v7;
  _DWORD *v9;

  v7 = a2;
  v9 = operator new(0x48uLL);
  v9[7] = v9[7] & 0x38000000 | 0x40000000;
  *(_QWORD *)v9 = 0;
  return llvm::LandingPadInst::LandingPadInst((llvm::LandingPadInst *)(v9 + 2), this, v7, a3, a4);
}

char *llvm::CallBase::Create(uint64_t ***a1, uint64_t a2, uint64_t a3, llvm::Instruction *a4)
{
  int v4;

  v4 = *((unsigned __int8 *)a1 + 16);
  if (v4 == 33)
    return llvm::InvokeInst::Create(a1, a2, a3, a4);
  if (v4 == 39)
    return llvm::CallBrInst::Create(a1, a2, a3, a4);
  return (char *)llvm::CallInst::Create(a1, a2, a3, (uint64_t)a4);
}

char *llvm::CallBase::Create(uint64_t a1, _BYTE *a2, llvm::Instruction *a3)
{
  int v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  size_t *v19;
  const void *v20;
  size_t v21;
  size_t v22;
  char v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _QWORD v28[3];
  void *v29;
  uint64_t v30;
  _QWORD v31[13];

  v31[12] = *MEMORY[0x1E0C80C00];
  v29 = v31;
  v30 = 0x200000000;
  v5 = *(_DWORD *)(a1 + 20);
  if (v5 < 0)
  {
    v11 = *(_QWORD *)(a1 - 32 * (v5 & 0x7FFFFFF) - 8);
    if ((v11 & 0xFFFFFFFF0) != 0)
    {
      v12 = (v11 >> 4);
      v13 = a1;
      v27 = a2;
      do
      {
        v14 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
        v15 = a1 - 32 * v14;
        v16 = (unsigned int *)(v13 - (*(_QWORD *)(v15 - 8) + 32 * v14));
        v17 = *v16;
        v18 = v16[1];
        v19 = (size_t *)*((_QWORD *)v16 - 1);
        v28[0] = v15 + 32 * v17;
        v28[1] = v18 - v17;
        v28[2] = v19;
        v22 = *v19;
        v20 = v19 + 2;
        v21 = v22;
        v23 = a2[23];
        v24 = v23 < 0;
        v25 = *((_QWORD *)a2 + 1);
        if (v23 < 0)
          a2 = *(_BYTE **)a2;
        v26 = v23 & 0x7F;
        if (v24)
          v26 = v25;
        if (v21 != v26 || v21 && memcmp(v20, a2, v21))
          sub_1C623D924((uint64_t)&v29, (uint64_t)v28);
        v13 += 16;
        --v12;
        a2 = v27;
      }
      while (v12);
    }
  }
  sub_1C623D984((uint64_t)&v29, (__int128 *)a2);
  v6 = llvm::CallBase::Create((uint64_t ***)a1, (uint64_t)v29, v30, a3);
  v7 = v29;
  if ((_DWORD)v30)
  {
    v8 = 48 * v30;
    v9 = (char *)v29 - 48;
    do
    {
      sub_1C4EEC55C((uint64_t)&v9[v8]);
      v8 -= 48;
    }
    while (v8);
    v7 = v29;
  }
  if (v7 != v31)
    free(v7);
  return v6;
}

uint64_t sub_1C623D924(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_1C6240188(a1, a2);
  sub_1C5063174(*(_QWORD *)a1 + 48 * v3, a2);
  v4 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v4;
  return *(_QWORD *)a1 + 48 * v4 - 48;
}

uint64_t sub_1C623D984(uint64_t a1, __int128 *a2)
{
  unsigned int v3;
  unsigned int v4;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_1C6240220(a1, a2);
  sub_1C53F5F28((_QWORD *)(*(_QWORD *)a1 + 48 * v3), a2);
  v4 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v4;
  return *(_QWORD *)a1 + 48 * v4 - 48;
}

uint64_t llvm::CallBase::getNumSubclassExtraOperandsDynamic(llvm::CallBase *this)
{
  return (*((_DWORD *)this + 20) + 1);
}

char *llvm::CallBase::addOperandBundle(uint64_t a1, int a2, unint64_t a3, llvm::Instruction *a4)
{
  char *v6;
  __int128 *v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  _BYTE v14[48];
  uint64_t v15;

  v6 = (char *)a1;
  v15 = *MEMORY[0x1E0C80C00];
  sub_1C5062CEC(a1, a2, (uint64_t)&v12);
  if (!v14[8])
  {
    v12 = v14;
    v13 = 0x100000000;
    llvm::CallBase::getOperandBundlesAsDefs((uint64_t)v6, (uint64_t)&v12);
    v8 = (__int128 *)sub_1C506310C((uint64_t)&v12, a3, 1);
    sub_1C53F5F28((_QWORD *)v12 + 6 * v13, v8);
    LODWORD(v13) = v13 + 1;
    v6 = llvm::CallBase::Create((uint64_t ***)v6, (uint64_t)v12, v13, a4);
    v9 = v12;
    if ((_DWORD)v13)
    {
      v10 = 48 * v13;
      v11 = (char *)v12 - 48;
      do
      {
        sub_1C4EEC55C((uint64_t)&v11[v10]);
        v10 -= 48;
      }
      while (v10);
      v9 = v12;
    }
    if (v9 != v14)
      free(v9);
  }
  return v6;
}

void llvm::CallInst::init(llvm::CallInst *this, llvm::FunctionType *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (_QWORD *)((char *)this - 32);
  v5 = *((_QWORD *)this - 4);
  *((_QWORD *)this + 9) = a2;
  if (v5)
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v6 = *((_QWORD *)this - 3);
    if (v6)
      *(_QWORD *)(v6 + 16) = *((_QWORD *)this - 2);
  }
  *v4 = a3;
  if (a3)
  {
    v9 = *((_QWORD *)a3 + 1);
    v7 = (_QWORD *)((char *)a3 + 8);
    v8 = v9;
    *((_QWORD *)this - 3) = v9;
    if (v9)
      *(_QWORD *)(v8 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v7;
    *v7 = v4;
  }
  llvm::Value::setName((uint64_t ***)this, (uint64_t)a4);
}

llvm::CallInst *llvm::CallInst::CallInst(llvm::CallInst *this, llvm::Type ***a2, llvm::Value *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  llvm::Instruction *v9;

  v9 = llvm::Instruction::Instruction(this, *a2[2], 56, (llvm::CallInst *)((char *)this - 32), 1, a5);
  *((_QWORD *)v9 + 8) = 0;
  llvm::CallInst::init(v9, (llvm::FunctionType *)a2, a3, a4);
  return this;
}

llvm::CallInst *llvm::CallInst::CallInst(llvm::CallInst *this, llvm::Type ***a2, llvm::Value *a3, const llvm::Twine *a4, llvm::BasicBlock *a5)
{
  llvm::Instruction *v9;

  v9 = llvm::Instruction::Instruction(this, *a2[2], 56, (llvm::CallInst *)((char *)this - 32), 1, a5);
  *((_QWORD *)v9 + 8) = 0;
  llvm::CallInst::init(v9, (llvm::FunctionType *)a2, a3, a4);
  return this;
}

void llvm::InvokeInst::init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int v11;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;

  v11 = a7;
  *(_QWORD *)(a1 + 72) = a2;
  sub_1C5382FD4((uint64_t)&v31, a6, &a6[a7], a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
  v16 = (_QWORD *)(a1 - 96);
  if (*(_QWORD *)(a1 - 96))
  {
    **(_QWORD **)(a1 - 80) = *(_QWORD *)(a1 - 88);
    v17 = *(_QWORD *)(a1 - 88);
    if (v17)
      *(_QWORD *)(v17 + 16) = *(_QWORD *)(a1 - 80);
  }
  *v16 = a4;
  if (a4)
  {
    v20 = *(_QWORD *)(a4 + 8);
    v19 = (_QWORD *)(a4 + 8);
    v18 = v20;
    *(_QWORD *)(a1 - 88) = v20;
    if (v20)
      *(_QWORD *)(v18 + 16) = a1 - 88;
    *(_QWORD *)(a1 - 80) = v19;
    *v19 = v16;
  }
  v21 = (_QWORD *)(a1 - 64);
  if (*(_QWORD *)(a1 - 64))
  {
    **(_QWORD **)(a1 - 48) = *(_QWORD *)(a1 - 56);
    v22 = *(_QWORD *)(a1 - 56);
    if (v22)
      *(_QWORD *)(v22 + 16) = *(_QWORD *)(a1 - 48);
  }
  *v21 = a5;
  if (a5)
  {
    v25 = *(_QWORD *)(a5 + 8);
    v24 = (_QWORD *)(a5 + 8);
    v23 = v25;
    *(_QWORD *)(a1 - 56) = v25;
    if (v25)
      *(_QWORD *)(v23 + 16) = a1 - 56;
    *(_QWORD *)(a1 - 48) = v24;
    *v24 = v21;
  }
  v26 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v27 = *(_QWORD *)(a1 - 24);
    if (v27)
      *(_QWORD *)(v27 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v26 = a3;
  if (a3)
  {
    v30 = *(_QWORD *)(a3 + 8);
    v29 = (_QWORD *)(a3 + 8);
    v28 = v30;
    *(_QWORD *)(a1 - 24) = v30;
    if (v30)
      *(_QWORD *)(v28 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v29;
    *v29 = v26;
  }
  llvm::CallBase::populateBundleOperandInfos(a1, a9, a10, v11);
  llvm::Value::setName((uint64_t ***)a1, a11);
}

uint64_t llvm::InvokeInst::InvokeInst(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  char v14;

  v4 = *(_QWORD *)(a2 + 72);
  v5 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 33;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | v5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v4;
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18) & 0xFFC;
  sub_1C53F5EAC((uint64_t)&v14, (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (uint64_t *)a2, a1 - 32 * v5);
  v6 = 0;
  v7 = 0;
  v8 = *(_DWORD *)(a2 + 20);
  if (v8 < 0)
  {
    v9 = a2 - 32 * (v8 & 0x7FFFFFF);
    v10 = *(_QWORD *)(v9 - 8);
    v7 = (_BYTE *)(v9 - 8);
    v6 = &v7[-v10];
  }
  v11 = *(_DWORD *)(a1 + 20);
  if (v11 < 0)
    v12 = (void *)(a1 - 32 * (v11 & 0x7FFFFFF) - 8 - *(_QWORD *)(a1 - 32 * (v11 & 0x7FFFFFF) - 8));
  else
    v12 = 0;
  if (v7 != v6)
    memmove(v12, v6, v7 - v6);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17) & 0xFE | *(_BYTE *)(a1 + 17) & 1;
  return a1;
}

uint64_t llvm::InvokeInst::getLandingPadInst(llvm::BasicBlock **this)
{
  return llvm::BasicBlock::getFirstNonPHI(*(this - 8));
}

void llvm::CallBrInst::init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int v11;
  llvm::BasicBlock *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char v23;

  v11 = a8;
  *(_QWORD *)(a1 + 72) = a2;
  sub_1C5382FD4((uint64_t)&v23, a7, &a7[a8], a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
  *(_DWORD *)(a1 + 80) = a6;
  sub_1C623D354(a1, a4);
  if (*(_DWORD *)(a1 + 80))
  {
    v17 = 0;
    do
    {
      sub_1C623D3A8((unsigned int *)a1, v17, *(_QWORD **)(a5 + 8 * v17));
      v17 = (llvm::BasicBlock *)((_DWORD)v17 + 1);
    }
    while ((_DWORD)v17 != *(_DWORD *)(a1 + 80));
  }
  v18 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v19 = *(_QWORD *)(a1 - 24);
    if (v19)
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v18 = a3;
  if (a3)
  {
    v22 = *(_QWORD *)(a3 + 8);
    v21 = (_QWORD *)(a3 + 8);
    v20 = v22;
    *(_QWORD *)(a1 - 24) = v22;
    if (v22)
      *(_QWORD *)(v20 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v21;
    *v21 = v18;
  }
  llvm::CallBase::populateBundleOperandInfos(a1, a9, a10, v11);
  llvm::Value::setName((uint64_t ***)a1, a11);
}

llvm::BlockAddress **llvm::CallBrInst::updateArgBlockAddresses(llvm::CallBrInst *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  llvm::BlockAddress **result;
  llvm::BlockAddress *v6;
  llvm::BasicBlock *v7;
  llvm::BasicBlock *v8;
  llvm::BlockAddress *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::CallBrInst *v12;
  llvm::BlockAddress *v13;

  result = (llvm::BlockAddress **)*((_QWORD *)this + 4 * a2 + -4 * *((unsigned int *)this + 20) - 4);
  if (result)
  {
    v6 = llvm::BlockAddress::get(result, a2, a3);
    v9 = llvm::BlockAddress::get((llvm::BlockAddress **)a3, v7, v8);
    result = (llvm::BlockAddress **)sub_1C623E050((uint64_t)this);
    if ((_DWORD)result)
    {
      v10 = 0;
      v11 = result;
      v12 = this;
      do
      {
        v13 = (llvm::BlockAddress *)*((_QWORD *)v12 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
        if (*((_BYTE *)v13 + 16) != 4)
          v13 = 0;
        if (v13 == v6)
          result = (llvm::BlockAddress **)LLVMSetArgOperand_0((uint64_t)this, v10, (uint64_t)v9);
        ++v10;
        v12 = (llvm::CallBrInst *)((char *)v12 + 32);
      }
      while (v11 != v10);
    }
  }
  return result;
}

unint64_t sub_1C623E050(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 == 84)
  {
    v2 = 0;
  }
  else if (v1 == 39)
  {
    v2 = (*(_DWORD *)(a1 + 80) + 1);
  }
  else
  {
    v2 = 2;
  }
  v3 = 0;
  v4 = *(_DWORD *)(a1 + 20);
  v5 = -(uint64_t)(v4 & 0x7FFFFFF);
  if (v4 < 0)
  {
    v7 = a1 - 32 * (v4 & 0x7FFFFFF);
    v8 = *(_QWORD *)(v7 - 8);
    if ((v8 & 0xFFFFFFFF0) != 0)
      v3 = *(_DWORD *)(v7 - 12) - *(_DWORD *)(v7 - v8);
    else
      v3 = 0;
  }
  return (-32 * v2 + 32 * (unint64_t)-v3 - 32 * v5 - 32) >> 5;
}

uint64_t llvm::CallBrInst::CallBrInst(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  char v14;

  v4 = *(_QWORD *)(a2 + 72);
  v5 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 39;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | v5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v4;
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18) & 0xFFC;
  sub_1C53F5EAC((uint64_t)&v14, (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (uint64_t *)a2, a1 - 32 * v5);
  v6 = 0;
  v7 = 0;
  v8 = *(_DWORD *)(a2 + 20);
  if (v8 < 0)
  {
    v9 = a2 - 32 * (v8 & 0x7FFFFFF);
    v10 = *(_QWORD *)(v9 - 8);
    v7 = (_BYTE *)(v9 - 8);
    v6 = &v7[-v10];
  }
  v11 = *(_DWORD *)(a1 + 20);
  if (v11 < 0)
    v12 = (void *)(a1 - 32 * (v11 & 0x7FFFFFF) - 8 - *(_QWORD *)(a1 - 32 * (v11 & 0x7FFFFFF) - 8));
  else
    v12 = 0;
  if (v7 != v6)
    memmove(v12, v6, v7 - v6);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17) & 0xFE | *(_BYTE *)(a1 + 17) & 1;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

unsigned int *sub_1C623E1E0@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  uint64_t v8;

  v3 = a2 + 16;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x1000000000;
  v4 = result[20];
  if ((_DWORD)v4)
  {
    v5 = result;
    v6 = 0;
    v7 = result - 8;
    do
    {
      v8 = *(_QWORD *)&v7[-8 * v5[20]];
      if (v6 >= *(_DWORD *)(a2 + 12))
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v3, v6 + 1, 8);
        v6 = *(_DWORD *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v6) = v8;
      v6 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v6;
      v7 += 8;
      --v4;
    }
    while (v4);
  }
  return result;
}

llvm::Instruction *llvm::ReturnInst::ReturnInst(llvm::ReturnInst *this, llvm::LLVMContext *a2, llvm::Value *a3, llvm::BasicBlock *a4)
{
  llvm::Type *v5;
  uint64_t v6;
  llvm::Instruction *result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;

  v5 = (llvm::Type *)(*(_QWORD *)a2 + 1576);
  if (a3)
    v6 = -1;
  else
    v6 = 0;
  result = llvm::Instruction::Instruction(this, v5, 1, (llvm::ReturnInst *)((char *)this + 32 * v6), a3 != 0, a4);
  if (a3)
  {
    v8 = *((_DWORD *)result + 5) & 0x7FFFFFF;
    v9 = -v8;
    v10 = (_QWORD *)((char *)result - 32 * v8);
    if (*v10)
    {
      v11 = (char *)result + 32 * v9;
      v13 = (_QWORD *)*((_QWORD *)v11 + 2);
      v12 = v11 + 16;
      *v13 = *(v12 - 1);
      v14 = *(v12 - 1);
      if (v14)
        *(_QWORD *)(v14 + 16) = *v12;
    }
    *v10 = a3;
    v17 = *((_QWORD *)a3 + 1);
    v16 = (_QWORD *)((char *)a3 + 8);
    v15 = v17;
    v18 = (char *)result + 32 * v9;
    *((_QWORD *)v18 + 1) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = v18 + 8;
    *((_QWORD *)v18 + 2) = v16;
    *v16 = v10;
  }
  return result;
}

llvm::Instruction *llvm::ReturnInst::ReturnInst(llvm::ReturnInst *this, llvm::LLVMContext *a2, llvm::BasicBlock *a3)
{
  return llvm::Instruction::Instruction(this, (llvm::Type *)(*(_QWORD *)a2 + 1576), 1, this, 0, a3);
}

uint64_t llvm::ResumeInst::ResumeInst(uint64_t result, _QWORD ***a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (_QWORD *)(result - 32);
  v3 = *(_QWORD *)(result - 32);
  *(_QWORD *)result = ***a2 + 1576;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 34;
  *(_BYTE *)(result + 17) = 0;
  *(_WORD *)(result + 18) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(result + 20) & 0xC0000000 | 1;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_DWORD *)(result + 56) = 0;
  v4 = (uint64_t)*(a2 - 4);
  if (v3)
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v5 = *(_QWORD *)(result - 24);
    if (v5)
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(result - 16);
  }
  *v2 = v4;
  if (v4)
  {
    v8 = *(_QWORD *)(v4 + 8);
    v6 = (_QWORD *)(v4 + 8);
    v7 = v8;
    *(_QWORD *)(result - 24) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = result - 24;
    *(_QWORD *)(result - 16) = v6;
    *v6 = v2;
  }
  return result;
}

llvm::Instruction *llvm::ResumeInst::ResumeInst(llvm::ResumeInst *this, llvm::Value *a2, llvm::Instruction *a3)
{
  char *v4;
  llvm::Instruction *result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = (char *)this - 32;
  result = llvm::Instruction::Instruction(this, (llvm::Type *)(***(_QWORD ***)a2 + 1576), 6, (llvm::ResumeInst *)((char *)this - 32), 1, a3);
  if (*((_QWORD *)result - 4))
  {
    **((_QWORD **)result - 2) = *((_QWORD *)result - 3);
    v6 = *((_QWORD *)result - 3);
    if (v6)
      *(_QWORD *)(v6 + 16) = *((_QWORD *)result - 2);
  }
  *((_QWORD *)result - 4) = a2;
  v9 = *((_QWORD *)a2 + 1);
  v8 = (_QWORD *)((char *)a2 + 8);
  v7 = v9;
  *((_QWORD *)result - 3) = v9;
  if (v9)
    *(_QWORD *)(v7 + 16) = (char *)result - 24;
  *((_QWORD *)result - 2) = v8;
  *v8 = v4;
  return result;
}

llvm::Instruction *llvm::ResumeInst::ResumeInst(llvm::ResumeInst *this, llvm::Value *a2, llvm::BasicBlock *a3)
{
  char *v4;
  llvm::Instruction *result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = (char *)this - 32;
  result = llvm::Instruction::Instruction(this, (llvm::Type *)(***(_QWORD ***)a2 + 1576), 6, (llvm::ResumeInst *)((char *)this - 32), 1, a3);
  if (*((_QWORD *)result - 4))
  {
    **((_QWORD **)result - 2) = *((_QWORD *)result - 3);
    v6 = *((_QWORD *)result - 3);
    if (v6)
      *(_QWORD *)(v6 + 16) = *((_QWORD *)result - 2);
  }
  *((_QWORD *)result - 4) = a2;
  v9 = *((_QWORD *)a2 + 1);
  v8 = (_QWORD *)((char *)a2 + 8);
  v7 = v9;
  *((_QWORD *)result - 3) = v9;
  if (v9)
    *(_QWORD *)(v7 + 16) = (char *)result - 24;
  *((_QWORD *)result - 2) = v8;
  *v8 = v4;
  return result;
}

uint64_t llvm::CleanupReturnInst::CleanupReturnInst(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  v3 = -v2;
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 36;
  *(_BYTE *)(result + 17) = 0;
  *(_WORD *)(result + 18) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(result + 20) & 0xC0000000 | v2;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_DWORD *)(result + 56) = 0;
  *(_WORD *)(result + 18) = *(_WORD *)(a2 + 18) & 0x7FFF;
  v4 = (_QWORD *)(result - 32 * v2);
  v5 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  if (*v4)
  {
    v6 = result + 32 * v3;
    v8 = *(_QWORD **)(v6 + 16);
    v7 = (_QWORD *)(v6 + 16);
    *v8 = *(v7 - 1);
    v9 = *(v7 - 1);
    if (v9)
      *(_QWORD *)(v9 + 16) = *v7;
  }
  *v4 = v5;
  if (v5)
  {
    v12 = *(_QWORD *)(v5 + 8);
    v10 = (_QWORD *)(v5 + 8);
    v11 = v12;
    v13 = result + 32 * v3;
    *(_QWORD *)(v13 + 8) = v12;
    if (v12)
      *(_QWORD *)(v11 + 16) = v13 + 8;
    *(_QWORD *)(v13 + 16) = v10;
    *v10 = v4;
  }
  if ((*(_WORD *)(a2 + 18) & 1) != 0)
  {
    v14 = result - 32 * (*(_DWORD *)(result + 20) & 0x7FFFFFF);
    v15 = (_QWORD *)(v14 + 32);
    v16 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    if (*(_QWORD *)(v14 + 32))
    {
      **(_QWORD **)(v14 + 48) = *(_QWORD *)(v14 + 40);
      v17 = *(_QWORD *)(v14 + 40);
      if (v17)
        *(_QWORD *)(v17 + 16) = *(_QWORD *)(v14 + 48);
    }
    *v15 = v16;
    if (v16)
    {
      v20 = *(_QWORD *)(v16 + 8);
      v18 = (_QWORD *)(v16 + 8);
      v19 = v20;
      *(_QWORD *)(v14 + 40) = v20;
      if (v20)
        *(_QWORD *)(v19 + 16) = v14 + 40;
      *(_QWORD *)(v14 + 48) = v18;
      *v18 = v15;
    }
  }
  return result;
}

llvm::CleanupReturnInst *llvm::CleanupReturnInst::CleanupReturnInst(llvm::CleanupReturnInst *this, llvm::Value *a2, llvm::BasicBlock *a3, unsigned int a4, llvm::Instruction *a5)
{
  llvm::Instruction *v8;

  v8 = llvm::Instruction::Instruction(this, (llvm::Type *)(***(_QWORD ***)a2 + 1576), 8, (llvm::CleanupReturnInst *)((char *)this - 32 * a4), a4, a5);
  llvm::CleanupReturnInst::init((uint64_t)v8, (uint64_t)a2, (uint64_t)a3);
  return this;
}

llvm::CleanupReturnInst *llvm::CleanupReturnInst::CleanupReturnInst(llvm::CleanupReturnInst *this, llvm::Value *a2, llvm::BasicBlock *a3, unsigned int a4, llvm::BasicBlock *a5)
{
  llvm::Instruction *v8;

  v8 = llvm::Instruction::Instruction(this, (llvm::Type *)(***(_QWORD ***)a2 + 1576), 8, (llvm::CleanupReturnInst *)((char *)this - 32 * a4), a4, a5);
  llvm::CleanupReturnInst::init((uint64_t)v8, (uint64_t)a2, (uint64_t)a3);
  return this;
}

uint64_t llvm::CatchReturnInst::init(uint64_t this, llvm::Value *a2, llvm::BasicBlock *a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = (_QWORD *)(this - 64);
  if (*(_QWORD *)(this - 64))
  {
    **(_QWORD **)(this - 48) = *(_QWORD *)(this - 56);
    v4 = *(_QWORD *)(this - 56);
    if (v4)
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(this - 48);
  }
  *v3 = a2;
  if (a2)
  {
    v7 = *((_QWORD *)a2 + 1);
    v5 = (_QWORD *)((char *)a2 + 8);
    v6 = v7;
    *(_QWORD *)(this - 56) = v7;
    if (v7)
      *(_QWORD *)(v6 + 16) = this - 56;
    *(_QWORD *)(this - 48) = v5;
    *v5 = v3;
  }
  v8 = (_QWORD *)(this - 32);
  if (*(_QWORD *)(this - 32))
  {
    **(_QWORD **)(this - 16) = *(_QWORD *)(this - 24);
    v9 = *(_QWORD *)(this - 24);
    if (v9)
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(this - 16);
  }
  *v8 = a3;
  if (a3)
  {
    v12 = *((_QWORD *)a3 + 1);
    v10 = (_QWORD *)((char *)a3 + 8);
    v11 = v12;
    *(_QWORD *)(this - 24) = v12;
    if (v12)
      *(_QWORD *)(v11 + 16) = this - 24;
    *(_QWORD *)(this - 16) = v10;
    *v10 = v8;
  }
  return this;
}

uint64_t llvm::CatchReturnInst::CatchReturnInst(uint64_t this, const llvm::CatchReturnInst *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = (_QWORD *)(this - 64);
  v3 = *(_QWORD *)(this - 64);
  *(_QWORD *)this = ***(_QWORD ***)a2 + 1576;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 37;
  *(_BYTE *)(this + 17) = 0;
  *(_WORD *)(this + 18) = 0;
  *(_DWORD *)(this + 20) = *(_DWORD *)(this + 20) & 0xC0000000 | 2;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  *(_DWORD *)(this + 56) = 0;
  v4 = *((_QWORD *)a2 - 8);
  if (v3)
  {
    **(_QWORD **)(this - 48) = *(_QWORD *)(this - 56);
    v5 = *(_QWORD *)(this - 56);
    if (v5)
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(this - 48);
  }
  *v2 = v4;
  if (v4)
  {
    v8 = *(_QWORD *)(v4 + 8);
    v6 = (_QWORD *)(v4 + 8);
    v7 = v8;
    *(_QWORD *)(this - 56) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = this - 56;
    *(_QWORD *)(this - 48) = v6;
    *v6 = v2;
  }
  v9 = (_QWORD *)(this - 32);
  v10 = *((_QWORD *)a2 - 4);
  if (*(_QWORD *)(this - 32))
  {
    **(_QWORD **)(this - 16) = *(_QWORD *)(this - 24);
    v11 = *(_QWORD *)(this - 24);
    if (v11)
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(this - 16);
  }
  *v9 = v10;
  if (v10)
  {
    v14 = *(_QWORD *)(v10 + 8);
    v12 = (_QWORD *)(v10 + 8);
    v13 = v14;
    *(_QWORD *)(this - 24) = v14;
    if (v14)
      *(_QWORD *)(v13 + 16) = this - 24;
    *(_QWORD *)(this - 16) = v12;
    *v12 = v9;
  }
  return this;
}

llvm::CatchReturnInst *llvm::CatchReturnInst::CatchReturnInst(llvm::CatchReturnInst *this, llvm::Value *a2, llvm::BasicBlock *a3, llvm::Instruction *a4)
{
  llvm::Instruction *v7;

  v7 = llvm::Instruction::Instruction(this, (llvm::Type *)(***(_QWORD ***)a3 + 1576), 9, (llvm::CatchReturnInst *)((char *)this - 64), 2, a4);
  llvm::CatchReturnInst::init((uint64_t)v7, a2, a3);
  return this;
}

llvm::CatchSwitchInst *llvm::CatchSwitchInst::CatchSwitchInst(llvm::CatchSwitchInst *this, llvm::Type **a2, llvm::BasicBlock *a3, int a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  llvm::Instruction *v11;
  int v12;

  v11 = llvm::Instruction::Instruction(this, *a2, 10, 0, 0, a6);
  if (a3)
    v12 = a4 + 1;
  else
    v12 = a4;
  llvm::CatchSwitchInst::init((uint64_t)v11, (uint64_t)a2, (uint64_t)a3, v12 + 1);
  llvm::Value::setName((uint64_t ***)this, (uint64_t)a5);
  return this;
}

uint64_t llvm::CatchSwitchInst::CatchSwitchInst(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_DWORD *)(a2 + 20);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 38;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | v4 & 0x7FFFFFF;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  v5 = *(_DWORD *)(a2 + 20);
  if ((v5 & 0x40000000) != 0)
    v6 = *(uint64_t **)(a2 - 8);
  else
    v6 = (uint64_t *)(a2 - 32 * (v5 & 0x7FFFFFF));
  if ((*(_WORD *)(a2 + 18) & 1) != 0)
    v7 = v6[4];
  else
    v7 = 0;
  llvm::CatchSwitchInst::init(a1, *v6, v7, v5 & 0x7FFFFFF);
  v8 = *(_DWORD *)(a1 + 60);
  v9 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a1 + 20) = v9 & 0xF8000000 | v8 & 0x7FFFFFF;
  if ((v9 & 0x40000000) != 0)
    v10 = *(_QWORD *)(a1 - 8);
  else
    v10 = a1 - 32 * (v8 & 0x7FFFFFF);
  v11 = *(_DWORD *)(a2 + 20);
  if ((v11 & 0x40000000) != 0)
    v12 = *(_QWORD *)(a2 - 8);
  else
    v12 = a2 - 32 * (v11 & 0x7FFFFFF);
  v13 = v8 - 1;
  if (v13)
  {
    v14 = v10 + 32;
    v15 = (uint64_t *)(v12 + 32);
    do
    {
      v16 = *v15;
      if (*(_QWORD *)v14)
      {
        **(_QWORD **)(v14 + 16) = *(_QWORD *)(v14 + 8);
        v17 = *(_QWORD *)(v14 + 8);
        if (v17)
          *(_QWORD *)(v17 + 16) = *(_QWORD *)(v14 + 16);
      }
      *(_QWORD *)v14 = v16;
      if (v16)
      {
        v20 = *(_QWORD *)(v16 + 8);
        v18 = (uint64_t *)(v16 + 8);
        v19 = v20;
        *(_QWORD *)(v14 + 8) = v20;
        if (v20)
          *(_QWORD *)(v19 + 16) = v14 + 8;
        *(_QWORD *)(v14 + 16) = v18;
        *v18 = v14;
      }
      v14 += 32;
      v15 += 4;
      --v13;
    }
    while (v13);
  }
  return a1;
}

void llvm::CatchSwitchInst::addHandler(llvm::CatchSwitchInst *this, llvm::BasicBlock *a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  char *v12;

  v4 = *((_DWORD *)this + 5);
  v5 = v4 & 0x7FFFFFF;
  if (*((_DWORD *)this + 15) <= (v4 & 0x7FFFFFFu))
  {
    *((_DWORD *)this + 15) = 2 * v5;
    llvm::User::growHungoffUses(this, 2 * v5, 0);
    v4 = *((_DWORD *)this + 5);
  }
  *((_DWORD *)this + 5) = v4 & 0xF8000000 | (v4 + 1) & 0x7FFFFFF;
  if ((v4 & 0x40000000) != 0)
    v6 = (char *)*((_QWORD *)this - 1);
  else
    v6 = (char *)this - 32 * ((v4 + 1) & 0x7FFFFFF);
  v7 = &v6[32 * v5];
  if (*(_QWORD *)v7)
  {
    **((_QWORD **)v7 + 2) = *((_QWORD *)v7 + 1);
    v8 = *((_QWORD *)v7 + 1);
    if (v8)
      *(_QWORD *)(v8 + 16) = *((_QWORD *)v7 + 2);
  }
  *(_QWORD *)v7 = a2;
  if (a2)
  {
    v11 = *((_QWORD *)a2 + 1);
    v10 = (char **)((char *)a2 + 8);
    v9 = v11;
    v12 = &v6[32 * v5];
    *((_QWORD *)v12 + 1) = v11;
    if (v11)
      *(_QWORD *)(v9 + 16) = v12 + 8;
    *((_QWORD *)v12 + 2) = v10;
    *v10 = v7;
  }
}

uint64_t llvm::CatchSwitchInst::removeHandler(uint64_t result, _QWORD *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_DWORD *)(result + 20);
  if ((v2 & 0x40000000) != 0)
  {
    v4 = *(_QWORD *)(result - 8);
    v3 = v2 & 0x7FFFFFF;
  }
  else
  {
    v3 = v2 & 0x7FFFFFF;
    v4 = result - 32 * v3;
  }
  v5 = v4 + 32 * v3;
  v6 = (_QWORD *)(v5 - 32);
  if ((_QWORD *)(v5 - 32) != a2)
  {
    v7 = a2;
    do
    {
      v9 = v7[4];
      v7 += 4;
      v8 = v9;
      if (*a2)
      {
        *(_QWORD *)a2[2] = a2[1];
        v10 = a2[1];
        if (v10)
          *(_QWORD *)(v10 + 16) = a2[2];
      }
      *a2 = v8;
      if (v8)
      {
        v13 = *(_QWORD *)(v8 + 8);
        v11 = (_QWORD *)(v8 + 8);
        v12 = v13;
        a2[1] = v13;
        if (v13)
          *(_QWORD *)(v12 + 16) = a2 + 1;
        a2[2] = v11;
        *v11 = a2;
      }
      a2 = v7;
    }
    while (v7 != v6);
  }
  if (*v6)
  {
    **(_QWORD **)(v5 - 16) = *(_QWORD *)(v5 - 24);
    v14 = *(_QWORD *)(v5 - 24);
    if (v14)
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v5 - 16);
  }
  *v6 = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(result + 20) & 0xF8000000 | (*(_DWORD *)(result + 20) - 1) & 0x7FFFFFF;
  return result;
}

void llvm::FuncletPadInst::init(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;

  sub_1C5382FD4((uint64_t)&v13, a3, &a3[a4], a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
  v8 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v9 = *(_QWORD *)(a1 - 24);
    if (v9)
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v8 = a2;
  if (a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    v11 = (_QWORD *)(a2 + 8);
    v10 = v12;
    *(_QWORD *)(a1 - 24) = v12;
    if (v12)
      *(_QWORD *)(v10 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v11;
    *v11 = v8;
  }
  llvm::Value::setName((uint64_t ***)a1, a5);
}

uint64_t llvm::FuncletPadInst::FuncletPadInst(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | v5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  sub_1C53F5EAC((uint64_t)&v13, (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (uint64_t *)a2, a1 - 32 * v5);
  v6 = *(_QWORD *)(a2 - 32);
  v7 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v8 = *(_QWORD *)(a1 - 24);
    if (v8)
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v7 = v6;
  if (v6)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v9 = (_QWORD *)(v6 + 8);
    v10 = v11;
    *(_QWORD *)(a1 - 24) = v11;
    if (v11)
      *(_QWORD *)(v10 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v9;
    *v9 = v7;
  }
  return a1;
}

llvm::Instruction *llvm::FuncletPadInst::FuncletPadInst(llvm::Instruction *a1, char a2, llvm::Type **a3, uint64_t *a4, uint64_t a5, unsigned int a6, uint64_t a7, llvm::Instruction *a8)
{
  llvm::Instruction *v13;

  v13 = llvm::Instruction::Instruction(a1, *a3, a2, (llvm::Instruction *)((char *)a1 - 32 * a6), a6, a8);
  llvm::FuncletPadInst::init((uint64_t)v13, (uint64_t)a3, a4, a5, a7);
  return a1;
}

llvm::Instruction *llvm::FuncletPadInst::FuncletPadInst(llvm::Instruction *a1, char a2, llvm::Type **a3, uint64_t *a4, uint64_t a5, unsigned int a6, uint64_t a7, llvm::BasicBlock *a8)
{
  llvm::Instruction *v13;

  v13 = llvm::Instruction::Instruction(a1, *a3, a2, (llvm::Instruction *)((char *)a1 - 32 * a6), a6, a8);
  llvm::FuncletPadInst::init((uint64_t)v13, (uint64_t)a3, a4, a5, a7);
  return a1;
}

uint64_t llvm::AllocaInst::AllocaInst(llvm::AllocaInst *this, llvm::Type *a2, llvm::Type *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  return llvm::AllocaInst::AllocaInst((uint64_t)this, a2, a3, 0, (uint64_t)a4, (uint64_t)a5);
}

llvm::LoadInst *llvm::LoadInst::LoadInst(llvm::LoadInst *this, llvm::Type *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::BasicBlock *a5)
{
  return llvm::LoadInst::LoadInst(this, a2, a3, a4, 0, a5);
}

llvm::LoadInst *llvm::LoadInst::LoadInst(llvm::LoadInst *this, llvm::Type *a2, llvm::Value *a3, const llvm::Twine *a4, __int16 a5, llvm::BasicBlock *a6)
{
  char v12;
  char v13;
  uint64_t ***v14;

  llvm::DataLayout::getAlignment(*(_QWORD *)(*((_QWORD *)a6 + 7) + 40) + 272, (uint64_t)a2);
  v13 = v12;
  v14 = (uint64_t ***)sub_1C53E82F0((uint64_t)this, (uint64_t)a2, 32, (uint64_t)a3, (uint64_t)a6);
  *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xFC00 | a5 & 0xFF81 | (2 * (v13 & 0x3F));
  *((_BYTE *)this + 60) = 1;
  llvm::Value::setName(v14, (uint64_t)a4);
  return this;
}

llvm::Instruction *llvm::FenceInst::FenceInst(llvm::Instruction *a1, uint64_t a2, __int16 a3, char a4, llvm::Instruction *a5)
{
  llvm::Instruction *result;

  result = llvm::Instruction::Instruction(a1, (llvm::Type *)(*(_QWORD *)a2 + 1576), 35, 0, 0, a5);
  *((_WORD *)result + 9) = *((_WORD *)result + 9) & 0xFFF8 | a3;
  *((_BYTE *)result + 60) = a4;
  return result;
}

llvm::Instruction *llvm::BinaryOperator::CreateNSWNeg(llvm::ConstantFP **this, llvm::Value *a2, const llvm::Twine *a3, llvm::Instruction *a4)
{
  llvm::Type **ZeroValueForNegation;
  _DWORD *v8;
  llvm::Instruction *result;

  ZeroValueForNegation = llvm::ConstantFP::getZeroValueForNegation(*this, a2);
  v8 = operator new(0x80uLL);
  v8[21] = v8[21] & 0x38000000 | 2;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = v8 + 16;
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 5) = 0;
  *((_QWORD *)v8 + 6) = 0;
  *((_QWORD *)v8 + 7) = v8 + 16;
  result = llvm::BinaryOperator::BinaryOperator((llvm::Instruction *)(v8 + 16), 15, (uint64_t)ZeroValueForNegation, (uint64_t)this, *ZeroValueForNegation, (uint64_t)a2, a3);
  *((_BYTE *)v8 + 81) |= 4u;
  return result;
}

BOOL llvm::CastInst::isIntegerCast(llvm::CastInst *this)
{
  int v1;

  v1 = *((unsigned __int8 *)this + 16);
  if ((v1 - 66) < 3)
    return 1;
  if (v1 == 77 && *(_BYTE *)(**((_QWORD **)this - 4) + 8) == 13)
    return *(_BYTE *)(*(_QWORD *)this + 8) == 13;
  return 0;
}

BOOL llvm::CastInst::isLosslessCast(llvm::CastInst *this)
{
  uint64_t v1;

  if (*((_BYTE *)this + 16) != 77)
    return 0;
  v1 = **((_QWORD **)this - 4);
  if (v1 != *(_QWORD *)this)
  {
    if (*(_BYTE *)(v1 + 8) == 15)
      return *(_BYTE *)(*(_QWORD *)this + 8) == 15;
    return 0;
  }
  return 1;
}

llvm::FPTruncInst *llvm::FPTruncInst::FPTruncInst(llvm::FPTruncInst *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C4FCD80C((uint64_t)this, (uint64_t)a3, 45, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setName(v7, (uint64_t)a4);
  return this;
}

llvm::SIToFPInst *llvm::SIToFPInst::SIToFPInst(llvm::SIToFPInst *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C4FCD80C((uint64_t)this, (uint64_t)a3, 44, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setName(v7, (uint64_t)a4);
  return this;
}

llvm::ZExtInst *llvm::ZExtInst::ZExtInst(llvm::ZExtInst *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4, llvm::BasicBlock *a5)
{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0((uint64_t)this, (uint64_t)a3, 39, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setName(v7, (uint64_t)a4);
  return this;
}

llvm::AddrSpaceCastInst *llvm::AddrSpaceCastInst::AddrSpaceCastInst(llvm::AddrSpaceCastInst *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4, llvm::BasicBlock *a5)
{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0((uint64_t)this, (uint64_t)a3, 50, (uint64_t)a2, (uint64_t)a5);
  llvm::Value::setName(v7, (uint64_t)a4);
  return this;
}

char *llvm::CastInst::CreateSExtOrBitCast(llvm::CastInst *this, llvm::Type ***a2, llvm::Type *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  uint64_t v9;
  int PrimitiveSizeInBits;
  llvm::Type *v11;
  int v12;
  _DWORD *v13;
  char *v14;
  char v15;
  uint64_t ***v16;

  v9 = *(_QWORD *)this;
  if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12)
    v9 = **(_QWORD **)(v9 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v9);
  v11 = (llvm::Type *)a2;
  if (((_DWORD)a2[1] & 0xFE) == 0x12)
    v11 = *a2[2];
  v12 = llvm::Type::getPrimitiveSizeInBits(v11);
  v13 = operator new(0x60uLL);
  v13[13] = v13[13] & 0x38000000 | 1;
  v14 = (char *)(v13 + 8);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 3) = v13 + 8;
  if (PrimitiveSizeInBits == v12)
    v15 = 49;
  else
    v15 = 40;
  v16 = (uint64_t ***)sub_1C4FCD80C((uint64_t)(v13 + 8), (uint64_t)a2, v15, (uint64_t)this, (uint64_t)a4);
  llvm::Value::setName(v16, (uint64_t)a3);
  return v14;
}

char *llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast(llvm::CastInst *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4, llvm::BasicBlock *a5)
{
  unsigned int v9;
  int v10;
  _DWORD *v11;
  char *v12;
  char v13;
  uint64_t ***v14;

  v9 = *(_DWORD *)(*(_QWORD *)this + 8);
  if ((v9 & 0xFE) == 0x12)
    v9 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)this + 16) + 8);
  v10 = *((_DWORD *)a2 + 2);
  if ((v10 & 0xFE) == 0x12)
    v10 = *(_DWORD *)(**((_QWORD **)a2 + 2) + 8);
  v11 = operator new(0x60uLL);
  v12 = (char *)(v11 + 8);
  v11[13] = v11[13] & 0x38000000 | 1;
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = v11 + 8;
  if ((v10 ^ v9) < 0x100)
    v13 = 49;
  else
    v13 = 50;
  v14 = (uint64_t ***)sub_1C53E82F0((uint64_t)(v11 + 8), (uint64_t)a2, v13, (uint64_t)this, (uint64_t)a4);
  llvm::Value::setName(v14, (uint64_t)a3);
  return v12;
}

uint64_t ***llvm::CastInst::CreateBitOrPointerCast(llvm::CastInst *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  int v9;
  char *v10;
  uint64_t ***v11;
  uint64_t v12;
  llvm::Value *v13;
  char v14;
  char *v16;
  char *v17;

  v9 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
  if (v9 == 15)
  {
    if (*((_BYTE *)a2 + 8) == 13)
    {
      v17 = (char *)operator new(0x60uLL);
      *((_DWORD *)v17 + 13) = *((_DWORD *)v17 + 13) & 0x38000000 | 1;
      v11 = (uint64_t ***)(v17 + 32);
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = 0;
      *((_QWORD *)v17 + 2) = 0;
      *((_QWORD *)v17 + 3) = v17 + 32;
      v12 = (uint64_t)(v17 + 32);
      v13 = a2;
      v14 = 47;
      goto LABEL_4;
    }
  }
  else if (v9 == 13 && *((_BYTE *)a2 + 8) == 15)
  {
    v16 = (char *)operator new(0x60uLL);
    *((_DWORD *)v16 + 13) = *((_DWORD *)v16 + 13) & 0x38000000 | 1;
    v11 = (uint64_t ***)(v16 + 32);
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = 0;
    *((_QWORD *)v16 + 3) = v16 + 32;
    v12 = (uint64_t)(v16 + 32);
    v13 = a2;
    v14 = 48;
    goto LABEL_4;
  }
  v10 = (char *)operator new(0x60uLL);
  *((_DWORD *)v10 + 13) = *((_DWORD *)v10 + 13) & 0x38000000 | 1;
  v11 = (uint64_t ***)(v10 + 32);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = v10 + 32;
  v12 = (uint64_t)(v10 + 32);
  v13 = a2;
  v14 = 49;
LABEL_4:
  sub_1C4FCD80C(v12, (uint64_t)v13, v14, (uint64_t)this, (uint64_t)a4);
  llvm::Value::setName(v11, (uint64_t)a3);
  return v11;
}

uint64_t llvm::CmpInst::Create(int a1, __int16 a2, _DWORD **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v12 = operator new(0x80uLL);
  v12[21] = v12[21] & 0x38000000 | 2;
  v13 = (uint64_t)(v12 + 16);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = v12 + 16;
  *((_QWORD *)v12 + 4) = 0;
  *((_QWORD *)v12 + 5) = 0;
  *((_QWORD *)v12 + 6) = 0;
  *((_QWORD *)v12 + 7) = v12 + 16;
  sub_1C4774CC4(*a3);
  if (a1 == 53)
    v15 = 53;
  else
    v15 = 54;
  return llvm::CmpInst::CmpInst(v13, v14, v15, a2, (uint64_t)a3, a4, a5, a6);
}

uint64_t llvm::CmpInst::getUnsignedPredicate(int a1)
{
  return (a1 - 4);
}

llvm::SwitchInst *llvm::SwitchInst::SwitchInst(llvm::SwitchInst *this, llvm::Value *a2, llvm::BasicBlock *a3, int a4, llvm::BasicBlock *a5)
{
  llvm::Instruction *v9;

  v9 = llvm::Instruction::Instruction(this, (llvm::Type *)(***(_QWORD ***)a2 + 1576), 3, 0, 0, a5);
  llvm::SwitchInst::init((uint64_t)v9, (uint64_t)a2, (uint64_t)a3, 2 * a4 + 2);
  return this;
}

uint64_t llvm::SwitchInstProfUpdateWrapper::buildProfBranchWeightsMD(llvm::SwitchInstProfUpdateWrapper *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *i;
  uint64_t *v6;

  if (!*((_BYTE *)this + 56))
    return 0;
  v1 = *((unsigned int *)this + 4);
  if (!(_DWORD)v1)
    return 0;
  v2 = *((_QWORD *)this + 1);
  v3 = 4 * v1;
  for (i = (_DWORD *)v2; !*i; ++i)
  {
    v3 -= 4;
    if (!v3)
      return 0;
  }
  if (v1 < 2)
    return 0;
  v6 = ***(uint64_t ****)(*(_QWORD *)this + 40);
  return llvm::MDBuilder::createBranchWeights(&v6, v2, v1);
}

void llvm::SwitchInstProfUpdateWrapper::addCase(_QWORD *a1, llvm::ConstantInt *a2, llvm::BasicBlock *a3, uint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v9;
  uint64_t v10;
  void *v11[2];
  _QWORD v12[5];

  v12[4] = *MEMORY[0x1E0C80C00];
  llvm::SwitchInst::addCase((_DWORD *)*a1, a2, a3);
  v6 = a4 & 0xFF00000000;
  if (*((_BYTE *)a1 + 56))
    v7 = 1;
  else
    v7 = v6 == 0;
  if (v7 || (_DWORD)a4 == 0)
  {
    if (*((_BYTE *)a1 + 56))
    {
      *((_BYTE *)a1 + 64) = 1;
      if (!v6)
        LODWORD(a4) = 0;
      v10 = *((unsigned int *)a1 + 4);
      if (v10 >= *((_DWORD *)a1 + 5))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 1), (uint64_t)(a1 + 3), v10 + 1, 4);
        LODWORD(v10) = *((_DWORD *)a1 + 4);
      }
      *(_DWORD *)(a1[1] + 4 * v10) = a4;
      ++*((_DWORD *)a1 + 4);
    }
  }
  else
  {
    *((_BYTE *)a1 + 64) = 1;
    v9 = ((unint64_t)*(unsigned int *)(*a1 + 20) >> 1) & 0x3FFFFFF;
    v11[0] = v12;
    v11[1] = (void *)0x800000000;
    sub_1C4893E04((char *)v11, v9, 0);
    sub_1C62402B8((uint64_t)(a1 + 1), (uint64_t)v11);
    if (v11[0] != v12)
      free(v11[0]);
    *(_DWORD *)(a1[1] + 4 * (((*(_DWORD *)(*a1 + 20) >> 1) & 0x3FFFFFFu) - 1)) = a4;
  }
}

uint64_t llvm::SwitchInstProfUpdateWrapper::eraseFromParent(llvm::SwitchInstProfUpdateWrapper *this)
{
  *((_BYTE *)this + 64) = 0;
  if (*((_BYTE *)this + 56))
    sub_1C49F6D78((uint64_t)this + 8, 0);
  return llvm::Instruction::eraseFromParent(*(llvm::Instruction **)this);
}

uint64_t llvm::SwitchInstProfUpdateWrapper::getSuccessorWeight(llvm::SwitchInstProfUpdateWrapper *this, unsigned int a2)
{
  if (*((_BYTE *)this + 56))
    return *(unsigned int *)(*((_QWORD *)this + 1) + 4 * a2) | 0x100000000;
  else
    return 0;
}

_QWORD *llvm::IndirectBrInst::init(llvm::IndirectBrInst *this, llvm::Value *a2, int a3)
{
  uint64_t v5;
  BOOL v6;
  _QWORD *result;
  _QWORD *v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v5 = (a3 + 1);
  v6 = a3 == -1;
  *((_DWORD *)this + 15) = v5;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xF8000000 | 1;
  result = operator new(32 * v5);
  *((_QWORD *)this - 1) = result;
  if (!v6)
  {
    v8 = result;
    do
    {
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      v8[3] = this;
      v8 += 4;
    }
    while (v8 != &result[4 * v5]);
  }
  v9 = *((_DWORD *)this + 5);
  if ((v9 & 0x40000000) != 0)
    v10 = (char *)result;
  else
    v10 = (char *)this - 32 * (v9 & 0x7FFFFFF);
  if (*(_QWORD *)v10)
  {
    **((_QWORD **)v10 + 2) = *((_QWORD *)v10 + 1);
    v11 = *((_QWORD *)v10 + 1);
    if (v11)
      *(_QWORD *)(v11 + 16) = *((_QWORD *)v10 + 2);
  }
  *(_QWORD *)v10 = a2;
  if (a2)
  {
    v14 = *((_QWORD *)a2 + 1);
    v13 = (_QWORD *)((char *)a2 + 8);
    v12 = v14;
    *((_QWORD *)v10 + 1) = v14;
    if (v14)
      *(_QWORD *)(v12 + 16) = v10 + 8;
    *((_QWORD *)v10 + 2) = v13;
    *v13 = v10;
  }
  return result;
}

llvm::IndirectBrInst *llvm::IndirectBrInst::IndirectBrInst(llvm::IndirectBrInst *this, llvm::Value *a2, int a3, llvm::Instruction *a4)
{
  llvm::Instruction *v7;

  v7 = llvm::Instruction::Instruction(this, (llvm::Type *)(***(_QWORD ***)a2 + 1576), 4, 0, 0, a4);
  llvm::IndirectBrInst::init(v7, a2, a3);
  return this;
}

llvm::IndirectBrInst *llvm::IndirectBrInst::IndirectBrInst(llvm::IndirectBrInst *this, const llvm::IndirectBrInst *a2)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  v4 = *((_DWORD *)a2 + 5);
  *(_QWORD *)this = ***(_QWORD ***)a2 + 1576;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 32;
  *((_BYTE *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | v4 & 0x7FFFFFF;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  v5 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
  v6 = operator new(32 * v5);
  *((_QWORD *)this - 1) = v6;
  if ((_DWORD)v5)
  {
    v7 = v6;
    do
    {
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      v7[3] = this;
      v7 += 4;
    }
    while (v7 != &v6[4 * v5]);
  }
  v8 = *((_DWORD *)this + 5);
  if ((v8 & 0x40000000) != 0)
    v9 = (char *)v6;
  else
    v9 = (char *)this - 32 * (v8 & 0x7FFFFFF);
  v10 = *((_DWORD *)a2 + 5);
  if ((v10 & 0x40000000) != 0)
  {
    v12 = (uint64_t *)*((_QWORD *)a2 - 1);
    LODWORD(v11) = v10 & 0x7FFFFFF;
  }
  else
  {
    v11 = v10 & 0x7FFFFFF;
    v12 = (uint64_t *)((char *)a2 - 32 * v11);
  }
  if ((_DWORD)v11)
  {
    v11 = v11;
    v13 = (_QWORD **)(v9 + 8);
    do
    {
      v14 = v13 - 1;
      v15 = *v12;
      if (*(v13 - 1))
      {
        *v13[1] = *v13;
        if (*v13)
          (*v13)[2] = v13[1];
      }
      *v14 = v15;
      if (v15)
      {
        v18 = *(_QWORD **)(v15 + 8);
        v16 = (_QWORD *)(v15 + 8);
        v17 = v18;
        *v13 = v18;
        if (v18)
          v17[2] = v13;
        v13[1] = v16;
        *v16 = v14;
      }
      v13 += 4;
      v12 += 4;
      --v11;
    }
    while (v11);
  }
  *((_BYTE *)this + 17) = *((_BYTE *)a2 + 17) & 0xFE | *((_BYTE *)this + 17) & 1;
  return this;
}

void llvm::IndirectBrInst::addDestination(llvm::IndirectBrInst *this, llvm::BasicBlock *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char **v12;
  uint64_t v13;
  char *v14;

  v4 = *((_DWORD *)this + 5);
  v5 = v4 & 0x7FFFFFF;
  v6 = v4 + 1;
  if ((v4 & 0x7FFFFFFu) >= *((_DWORD *)this + 15))
  {
    v7 = 2 * (v4 & 0x7FFFFFF);
    *((_DWORD *)this + 15) = v7;
    llvm::User::growHungoffUses(this, v7, 0);
    v4 = *((_DWORD *)this + 5);
  }
  *((_DWORD *)this + 5) = v4 & 0xF8000000 | v6 & 0x7FFFFFF;
  if ((v4 & 0x40000000) != 0)
    v8 = (char *)*((_QWORD *)this - 1);
  else
    v8 = (char *)this - 32 * (v6 & 0x7FFFFFF);
  v9 = &v8[32 * v5];
  if (*(_QWORD *)v9)
  {
    **((_QWORD **)v9 + 2) = *((_QWORD *)v9 + 1);
    v10 = *((_QWORD *)v9 + 1);
    if (v10)
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v9 + 2);
  }
  *(_QWORD *)v9 = a2;
  if (a2)
  {
    v13 = *((_QWORD *)a2 + 1);
    v12 = (char **)((char *)a2 + 8);
    v11 = v13;
    v14 = &v8[32 * v5];
    *((_QWORD *)v14 + 1) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = v14 + 8;
    *((_QWORD *)v14 + 2) = v12;
    *v12 = v9;
  }
}

uint64_t llvm::IndirectBrInst::removeDestination(uint64_t this, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v2 = *(_DWORD *)(this + 20);
  v3 = v2 & 0x7FFFFFF;
  if ((v2 & 0x40000000) != 0)
    v4 = *(_QWORD *)(this - 8);
  else
    v4 = this - 32 * v3;
  v5 = (v3 - 1);
  v6 = (uint64_t *)(v4 + 32 * v5);
  v7 = (a2 + 1);
  v8 = v4 + 32 * v7;
  v9 = *v6;
  if (*(_QWORD *)v8)
  {
    **(_QWORD **)(v8 + 16) = *(_QWORD *)(v8 + 8);
    v10 = *(_QWORD *)(v8 + 8);
    if (v10)
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  }
  *(_QWORD *)v8 = v9;
  if (v9)
  {
    v13 = *(_QWORD *)(v9 + 8);
    v11 = (_QWORD *)(v9 + 8);
    v12 = v13;
    v14 = v4 + 32 * v7;
    *(_QWORD *)(v14 + 8) = v13;
    if (v13)
      *(_QWORD *)(v12 + 16) = v14 + 8;
    *(_QWORD *)(v14 + 16) = v11;
    *v11 = v8;
  }
  if (*v6)
  {
    v15 = v4 + 32 * v5;
    v17 = *(_QWORD **)(v15 + 16);
    v16 = (_QWORD *)(v15 + 16);
    *v17 = *(v16 - 1);
    v18 = *(v16 - 1);
    if (v18)
      *(_QWORD *)(v18 + 16) = *v16;
  }
  *v6 = 0;
  *(_DWORD *)(this + 20) = *(_DWORD *)(this + 20) & 0xF8000000 | v5 & 0x7FFFFFF;
  return this;
}

double llvm::FenceInst::cloneImpl(llvm::FenceInst *this)
{
  char *v2;
  __int16 v3;
  char v4;
  double result;

  v2 = (char *)operator new(0x40uLL);
  v3 = *((_WORD *)this + 9) & 7;
  v4 = *((_BYTE *)this + 60);
  *(_QWORD *)v2 = ***(_QWORD ***)this + 1576;
  *((_QWORD *)v2 + 1) = 0;
  v2[16] = 63;
  result = 0.0;
  *(_OWORD *)(v2 + 17) = 0u;
  *(_OWORD *)(v2 + 33) = 0u;
  *(_OWORD *)(v2 + 44) = 0u;
  *((_WORD *)v2 + 9) = v3;
  v2[60] = v4;
  return result;
}

char *llvm::VAArgInst::cloneImpl(llvm::VAArgInst *this)
{
  _DWORD *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ***v6;
  char v8[32];
  __int16 v9;

  v2 = operator new(0x60uLL);
  v3 = (char *)(v2 + 8);
  v2[13] = v2[13] & 0x38000000 | 1;
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 8;
  v4 = *((_QWORD *)this - 4);
  v5 = *(_QWORD *)this;
  v9 = 257;
  v6 = (uint64_t ***)sub_1C4FCD80C((uint64_t)(v2 + 8), v5, 60, v4, 0);
  llvm::Value::setName(v6, (uint64_t)v8);
  return v3;
}

uint64_t llvm::LandingPadInst::cloneImpl(llvm::LandingPadInst *this)
{
  _DWORD *v2;

  v2 = operator new(0x48uLL);
  v2[7] = v2[7] & 0x38000000 | 0x40000000;
  *(_QWORD *)v2 = 0;
  return llvm::LandingPadInst::LandingPadInst((uint64_t)(v2 + 2), (uint64_t)this);
}

llvm::IndirectBrInst *llvm::IndirectBrInst::cloneImpl(llvm::IndirectBrInst *this)
{
  _DWORD *v2;

  v2 = operator new(0x48uLL);
  v2[7] = v2[7] & 0x38000000 | 0x40000000;
  *(_QWORD *)v2 = 0;
  return llvm::IndirectBrInst::IndirectBrInst((llvm::IndirectBrInst *)(v2 + 2), this);
}

uint64_t llvm::InvokeInst::cloneImpl(llvm::InvokeInst *this)
{
  int v2;
  uint64_t v3;
  void *v4;

  v2 = *((_DWORD *)this + 5);
  v3 = v2 & 0x7FFFFFF;
  if (v2 < 0 && (*((_QWORD *)this - 4 * v3 - 1) & 0xFFFFFFFF0) != 0)
    v4 = llvm::User::operator new((llvm::User *)0x50, v3, *((_DWORD *)this - 8 * v3 - 2) & 0xFFFFFFF0);
  else
    v4 = llvm::User::operator new((llvm::User *)0x50, v3);
  return llvm::InvokeInst::InvokeInst((uint64_t)v4, (uint64_t)this);
}

uint64_t llvm::CallBrInst::cloneImpl(llvm::CallBrInst *this)
{
  int v2;
  uint64_t v3;
  void *v4;

  v2 = *((_DWORD *)this + 5);
  v3 = v2 & 0x7FFFFFF;
  if (v2 < 0 && (*((_QWORD *)this - 4 * v3 - 1) & 0xFFFFFFFF0) != 0)
    v4 = llvm::User::operator new((llvm::User *)0x58, v3, *((_DWORD *)this - 8 * v3 - 2) & 0xFFFFFFF0);
  else
    v4 = llvm::User::operator new((llvm::User *)0x58, v3);
  return llvm::CallBrInst::CallBrInst((uint64_t)v4, (uint64_t)this);
}

uint64_t llvm::ResumeInst::cloneImpl(llvm::ResumeInst *this)
{
  _DWORD *v2;

  v2 = operator new(0x60uLL);
  v2[13] = v2[13] & 0x38000000 | 1;
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 8;
  return llvm::ResumeInst::ResumeInst((uint64_t)(v2 + 8), (_QWORD ***)this);
}

uint64_t llvm::CleanupReturnInst::cloneImpl(llvm::CleanupReturnInst *this)
{
  _QWORD *v2;

  v2 = llvm::User::operator new((llvm::User *)0x40, *((_DWORD *)this + 5) & 0x7FFFFFF);
  return llvm::CleanupReturnInst::CleanupReturnInst((uint64_t)v2, (uint64_t)this);
}

uint64_t llvm::CatchReturnInst::cloneImpl(llvm::CatchReturnInst *this)
{
  _DWORD *v2;

  v2 = operator new(0x80uLL);
  v2[21] = v2[21] & 0x38000000 | 2;
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 16;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  *((_QWORD *)v2 + 7) = v2 + 16;
  return llvm::CatchReturnInst::CatchReturnInst((uint64_t)(v2 + 16), this);
}

uint64_t llvm::CatchSwitchInst::cloneImpl(llvm::CatchSwitchInst *this)
{
  _DWORD *v2;

  v2 = operator new(0x48uLL);
  v2[7] = v2[7] & 0x38000000 | 0x40000000;
  *(_QWORD *)v2 = 0;
  return llvm::CatchSwitchInst::CatchSwitchInst((uint64_t)(v2 + 2), (uint64_t)this);
}

uint64_t llvm::FuncletPadInst::cloneImpl(llvm::FuncletPadInst *this)
{
  _QWORD *v2;

  v2 = llvm::User::operator new((llvm::User *)0x40, *((_DWORD *)this + 5) & 0x7FFFFFF);
  return llvm::FuncletPadInst::FuncletPadInst((uint64_t)v2, (uint64_t)this);
}

char *llvm::FreezeInst::cloneImpl(llvm::FreezeInst *this)
{
  _DWORD *v2;
  char *v3;
  uint64_t *v4;
  uint64_t ***v5;
  char v7[32];
  __int16 v8;

  v2 = operator new(0x60uLL);
  v3 = (char *)(v2 + 8);
  v2[13] = v2[13] & 0x38000000 | 1;
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 8;
  v4 = (uint64_t *)*((_QWORD *)this - 4);
  v8 = 257;
  v5 = (uint64_t ***)sub_1C4FCD80C((uint64_t)(v2 + 8), *v4, 67, (uint64_t)v4, 0);
  llvm::Value::setName(v5, (uint64_t)v7);
  return v3;
}

uint64_t sub_1C6240188(uint64_t a1, uint64_t a2)
{
  void *v4;
  int v5;
  unsigned int v6;
  unint64_t v8;

  v8 = 0;
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 48, &v8);
  sub_1C5063174((uint64_t)v4 + 48 * *(unsigned int *)(a1 + 8), a2);
  sub_1C4FCE92C((uint64_t *)a1, (uint64_t)v4);
  v5 = v8;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  v6 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v5;
  return (uint64_t)v4 + 48 * v6 - 48;
}

uint64_t sub_1C6240220(uint64_t a1, __int128 *a2)
{
  _QWORD *v4;
  int v5;
  unsigned int v6;
  unint64_t v8;

  v8 = 0;
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 48, &v8);
  sub_1C53F5F28(&v4[6 * *(unsigned int *)(a1 + 8)], a2);
  sub_1C4FCE92C((uint64_t *)a1, (uint64_t)v4);
  v5 = v8;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  v6 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v5;
  return (uint64_t)&v4[6 * v6 - 6];
}

uint64_t sub_1C62402B8(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 48))
  {
    sub_1C4EA2F88(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 0x800000000;
    if (*(_DWORD *)(a2 + 8))
      sub_1C4EA2F88(a1, a2);
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

BOOL llvm::ConstrainedFPIntrinsic::isDefaultFPEnvironment(llvm::ConstrainedFPIntrinsic *this)
{
  unsigned __int16 ExceptionBehavior;
  unsigned __int16 RoundingMode;

  ExceptionBehavior = llvm::ConstrainedFPIntrinsic::getExceptionBehavior(this);
  if (ExceptionBehavior >= 0x100u && ExceptionBehavior != 0)
    return 0;
  RoundingMode = llvm::ConstrainedFPIntrinsic::getRoundingMode(this);
  return RoundingMode < 0x100u || RoundingMode == 1;
}

uint64_t llvm::ConstrainedFPCmpIntrinsic::getPredicate(llvm::ConstrainedFPCmpIntrinsic *this)
{
  return sub_1C53F7018(((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8]);
}

uint64_t llvm::VPIntrinsic::getMaskParamPos(llvm::VPIntrinsic *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = 0;
  if ((int)this <= 329)
  {
    v4 = 0x100000000;
    v5 = 2;
    v6 = 0x100000000;
    if ((_DWORD)this == 137)
      v1 = 3;
    else
      v6 = 0;
    if ((_DWORD)this != 136)
    {
      v4 = v6;
      v5 = v1;
    }
    if ((_DWORD)this == 135)
      v1 = 0x100000000;
    else
      v1 = v4;
    if ((_DWORD)this == 135)
      v2 = 3;
    else
      v2 = v5;
  }
  else
  {
    v2 = 0;
    switch((int)this)
    {
      case 330:
      case 331:
      case 332:
      case 333:
      case 335:
      case 337:
      case 343:
      case 344:
      case 349:
      case 351:
      case 352:
      case 354:
      case 355:
      case 356:
      case 357:
      case 358:
      case 359:
      case 360:
      case 361:
      case 362:
      case 363:
      case 364:
      case 365:
      case 366:
      case 367:
      case 368:
      case 371:
      case 373:
      case 374:
      case 375:
      case 377:
      case 379:
      case 380:
        v1 = 0x100000000;
        v2 = 2;
        break;
      case 334:
      case 336:
      case 346:
        v1 = 0x100000000;
        v2 = 3;
        break;
      case 338:
      case 339:
      case 340:
      case 341:
      case 342:
      case 345:
      case 347:
      case 348:
      case 353:
      case 370:
      case 372:
      case 376:
      case 378:
      case 381:
        v1 = 0x100000000;
        v2 = 1;
        break;
      case 350:
      case 369:
        return v2 | v1;
      default:
        v2 = 0;
        break;
    }
  }
  return v2 | v1;
}

uint64_t llvm::VPIntrinsic::getVectorLengthParamPos(llvm::VPIntrinsic *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((int)this <= 329)
  {
    v1 = 0x100000000;
    v2 = 5;
    v4 = 0x100000000;
    v5 = 3;
    v6 = 0x100000000;
    v7 = 4;
    if ((_DWORD)this != 137)
    {
      v6 = 0;
      v7 = 0;
    }
    if ((_DWORD)this != 136)
    {
      v4 = v6;
      v5 = v7;
    }
    if ((_DWORD)this != 135)
    {
      v1 = v4;
      v2 = v5;
    }
  }
  else
  {
    switch((int)this)
    {
      case 330:
      case 331:
      case 332:
      case 333:
      case 335:
      case 337:
      case 343:
      case 344:
      case 349:
      case 350:
      case 351:
      case 352:
      case 354:
      case 355:
      case 356:
      case 357:
      case 358:
      case 359:
      case 360:
      case 361:
      case 362:
      case 363:
      case 364:
      case 365:
      case 366:
      case 367:
      case 368:
      case 369:
      case 371:
      case 373:
      case 374:
      case 375:
      case 377:
      case 379:
      case 380:
        v1 = 0x100000000;
        v2 = 3;
        break;
      case 334:
      case 336:
      case 346:
        v1 = 0x100000000;
        v2 = 4;
        break;
      case 338:
      case 339:
      case 340:
      case 341:
      case 342:
      case 345:
      case 347:
      case 348:
      case 353:
      case 370:
      case 372:
      case 376:
      case 378:
      case 381:
        v1 = 0x100000000;
        v2 = 2;
        break;
      default:
        v1 = 0;
        v2 = 0;
        break;
    }
  }
  return v2 | v1;
}

BOOL llvm::VPIntrinsic::isVPIntrinsic(llvm::VPIntrinsic *this)
{
  return ((_DWORD)this - 330) < 0x34 || ((_DWORD)this - 135) < 3;
}

uint64_t llvm::VPIntrinsic::getFunctionalOpcodeForVP(llvm::VPIntrinsic *this)
{
  if (((_DWORD)this - 330) > 0x33)
    return 0;
  else
    return qword_1C8650B60[(int)this - 330] | qword_1C86509C0[(int)this - 330];
}

BOOL llvm::VPReductionIntrinsic::isVPReduction(llvm::VPReductionIntrinsic *this)
{
  return ((_DWORD)this - 354) < 0xD;
}

uint64_t llvm::VPCastIntrinsic::isVPCast(llvm::VPCastIntrinsic *this)
{
  return (((_DWORD)this - 339) < 0x2B) & (0x4A28000410FuLL >> (this - 83));
}

BOOL llvm::VPCmpIntrinsic::isVPCmp(llvm::VPCmpIntrinsic *this)
{
  return (_DWORD)this == 346 || (_DWORD)this == 334;
}

uint64_t llvm::LLVMContext::setDiagnosticsHotnessRequested(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)this + 81) = a2;
  return this;
}

uint64_t *llvm::LLVMContext::setDiagnosticsHotnessThreshold(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *result;
  *(_QWORD *)(v3 + 88) = a2;
  *(_QWORD *)(v3 + 96) = a3;
  return result;
}

uint64_t llvm::LLVMContext::setMisExpectWarningRequested(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)this + 120) = a2;
  return this;
}

uint64_t llvm::LLVMContext::getMisExpectWarningRequested(llvm::LLVMContext *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 120);
}

uint64_t *llvm::LLVMContext::setDiagnosticsMisExpectTolerance(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *result;
  *(_QWORD *)(v3 + 104) = a2;
  *(_QWORD *)(v3 + 112) = a3;
  return result;
}

uint64_t llvm::LLVMContext::getDiagnosticsMisExpectTolerance(llvm::LLVMContext *this)
{
  if (*(_BYTE *)(*(_QWORD *)this + 112))
    return *(_QWORD *)(*(_QWORD *)this + 104);
  else
    return 0;
}

BOOL llvm::LLVMContext::isDiagnosticsHotnessThresholdSetFromPSI(llvm::LLVMContext *this)
{
  return *(_BYTE *)(*(_QWORD *)this + 96) == 0;
}

void **llvm::LLVMContext::setMainRemarkStreamer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  void **result;

  v2 = *a1;
  v3 = *a2;
  *a2 = 0;
  result = *(void ***)(v2 + 64);
  *(_QWORD *)(v2 + 64) = v3;
  if (result)
  {
    sub_1C53F8E74(result);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t llvm::LLVMContext::setLLVMRemarkStreamer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(v2 + 128);
  *(_QWORD *)(v2 + 128) = v3;
  if (result)
    JUMPOUT(0x1CAA32FC0);
  return result;
}

uint64_t llvm::LLVMContext::emitError(llvm::LLVMContext *this, const llvm::Twine *a2)
{
  uint64_t (**v3)(llvm::DiagnosticInfo *__hidden);
  int v4;
  char v5;
  uint64_t v6;
  const llvm::Twine *v7;
  uint64_t v8;

  v4 = 0;
  v5 = 0;
  v3 = &off_1E814E960;
  v6 = 0;
  v7 = a2;
  v8 = 0;
  return llvm::LLVMContext::diagnose((uint64_t)this, (const llvm::DiagnosticInfo *)&v3);
}

uint64_t llvm::LLVMContext::emitError(llvm::LLVMContext *this, const llvm::Instruction *a2, const llvm::Twine *a3)
{
  _BYTE v5[40];

  llvm::DiagnosticInfoInlineAsm::DiagnosticInfoInlineAsm(v5, a2, a3, 0);
  return llvm::LLVMContext::diagnose((uint64_t)this, (const llvm::DiagnosticInfo *)v5);
}

uint64_t llvm::LLVMContext::emitError(llvm::LLVMContext *this, uint64_t a2, const llvm::Twine *a3)
{
  uint64_t (**v4)(llvm::DiagnosticInfo *__hidden);
  int v5;
  char v6;
  uint64_t v7;
  const llvm::Twine *v8;
  uint64_t v9;

  v5 = 0;
  v6 = 0;
  v4 = &off_1E814E960;
  v7 = a2;
  v8 = a3;
  v9 = 0;
  return llvm::LLVMContext::diagnose((uint64_t)this, (const llvm::DiagnosticInfo *)&v4);
}

_QWORD *llvm::LLVMContext::getOrInsertBundleTag(_DWORD **a1, unsigned __int8 *a2, size_t a3)
{
  return llvm::LLVMContextImpl::getOrInsertBundleTag(*a1, a2, a3);
}

uint64_t llvm::LLVMContext::getOperandBundleTagID(uint64_t *a1, unsigned __int8 *a2, size_t a3)
{
  return llvm::LLVMContextImpl::getOperandBundleTagID(*a1, a2, a3);
}

_QWORD *llvm::LLVMContext::getGC(llvm::LLVMContext *this, const llvm::Function *a2)
{
  uint64_t *v2;
  const llvm::Function *v4;

  v2 = (uint64_t *)(*(_QWORD *)this + 2640);
  v4 = a2;
  return sub_1C53F9150(v2, (uint64_t *)&v4) + 1;
}

uint64_t llvm::LLVMContext::deleteGC(llvm::LLVMContext *this, const llvm::Function *a2)
{
  uint64_t v2;
  const llvm::Function *v4;

  v2 = *(_QWORD *)this + 2640;
  v4 = a2;
  return sub_1C53F8CFC(v2, &v4);
}

double llvm::LLVMContext::enableDebugTypeODRUniquing(llvm::LLVMContext *this)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)this;
  if (!*(_BYTE *)(*(_QWORD *)this + 1184))
  {
    *(_DWORD *)(v1 + 1176) = 0;
    result = 0.0;
    *(_OWORD *)(v1 + 1160) = 0u;
    *(_BYTE *)(v1 + 1184) = 1;
  }
  return result;
}

uint64_t llvm::LLVMContext::setDiscardValueNames(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)this + 2664) = a2;
  return this;
}

uint64_t llvm::LLVMContext::hasSetOpaquePointersValue(llvm::LLVMContextImpl **this)
{
  return llvm::LLVMContextImpl::hasOpaquePointersValue(*this);
}

uint64_t llvm::LLVMContext::setOpaquePointers(llvm::LLVMContext *this, char a2)
{
  return llvm::LLVMContextImpl::setOpaquePointers(*(_QWORD *)this, a2);
}

_QWORD *sub_1C62407B4(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53F8FF4(a1, v7);
  v9 = 0;
  sub_1C61805E8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C6240860(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 24))
  {
    v1 = result;
    result = MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    *(_BYTE *)(v1 + 24) = 0;
  }
  return result;
}

void llvm::Module::dropTriviallyDeadConstantArrays(llvm::LLVMContextImpl ***this)
{
  llvm::LLVMContextImpl::dropTriviallyDeadConstantArrays(**this);
}

uint64_t llvm::LLVMContextImpl::getOperandBundleTagID(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  int Key;
  uint64_t v5;

  Key = llvm::StringMapImpl::FindKey((uint64_t *)(a1 + 2576), a2, a3);
  if (Key == -1)
    v5 = *(unsigned int *)(a1 + 2584);
  else
    v5 = Key;
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 2576) + 8 * v5) + 8);
}

uint64_t llvm::LLVMContextImpl::hasOpaquePointersValue(llvm::LLVMContextImpl *this)
{
  return *((unsigned __int8 *)this + 2681);
}

uint64_t llvm::LLVMContextImpl::setOpaquePointers(uint64_t this, char a2)
{
  if (!*(_BYTE *)(this + 2681))
    *(_BYTE *)(this + 2681) = 1;
  *(_BYTE *)(this + 2680) = a2;
  return this;
}

double sub_1C6240904()
{
  _QWORD *v0;
  double result;

  v0 = (_QWORD *)operator new();
  *v0 = &unk_1E81688F8;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  v0[1] = 0x7FFFFFFFLL;
  return result;
}

uint64_t sub_1C6240948(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1C624095C(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(a1 + 8);
  if (v1 >= *(_DWORD *)(a1 + 12))
    return sub_1C5400274(a1);
  v2 = (_OWORD *)(*(_QWORD *)a1 + (v1 << 6));
  v2[2] = 0u;
  v2[3] = 0u;
  *v2 = 0u;
  v2[1] = 0u;
  v3 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v3;
  return *(_QWORD *)a1 + (v3 << 6) - 64;
}

void llvm::LLVMRemarkStreamer::emit(llvm::LLVMRemarkStreamer *this, const llvm::DiagnosticInfoOptimizationBase *a2)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  _BYTE v7[104];
  void *v8;
  _QWORD v9[41];

  v9[40] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)this;
  v5 = (char *)*((_QWORD *)a2 + 5);
  if (v5)
    v6 = strlen(*((const char **)a2 + 5));
  else
    v6 = 0;
  if (llvm::remarks::RemarkStreamer::matchesFilter(v4, v5, v6))
  {
    llvm::LLVMRemarkStreamer::toRemark((const char **)a2, (uint64_t)v7);
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(*(_QWORD *)this + 24) + 16))(*(_QWORD *)(*(_QWORD *)this + 24), v7);
    if (v8 != v9)
      free(v8);
  }
}

llvm::raw_ostream *sub_1C6240A6C(uint64_t a1, llvm::raw_ostream *this)
{
  uint64_t v3;
  const char *v4;
  const char *v5;
  char v6;
  int v7;
  const char *v8;
  size_t v9;
  size_t v10;

  v5 = *(const char **)(a1 + 8);
  v3 = a1 + 8;
  v4 = v5;
  v6 = *(_BYTE *)(v3 + 23);
  v7 = v6;
  if (v6 >= 0)
    v8 = (const char *)v3;
  else
    v8 = v4;
  v9 = v6 & 0x7F;
  if (v7 >= 0)
    v10 = v9;
  else
    v10 = *(_QWORD *)(v3 + 8);
  return llvm::raw_ostream::write(this, v8, v10);
}

uint64_t sub_1C6240A98(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void *sub_1C6240AA4()
{
  return &llvm::LLVMRemarkSetupFormatError::ID;
}

BOOL sub_1C6240AB0(uint64_t a1, void *a2)
{
  return a2 == &llvm::LLVMRemarkSetupFormatError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

char **sub_1C6240AD0(char **result, char **a2, uint64_t *a3)
{
  char **v3;
  char *v4;
  char **v6;
  char **v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v3 = result;
  v4 = *a2;
  if (*a2)
  {
    *a2 = 0;
    if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v4 + 48))(v4, &llvm::ErrorList::ID))
    {
      *v3 = 0;
      v6 = (char **)*((_QWORD *)v4 + 1);
      v7 = (char **)*((_QWORD *)v4 + 2);
      if (v6 != v7)
      {
        v8 = 0;
        do
        {
          v11 = v8;
          v9 = *v6;
          *v6 = 0;
          if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v9 + 48))(v9, &llvm::ErrorInfoBase::ID))
          {
            sub_1C54004E0(*a3, (uint64_t)v9);
            (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
            v9 = 0;
          }
          v10 = v9;
          sub_1C6174794(&v11, &v10, &v12);
          v8 = v12;
          *v3 = v12;
          v12 = 0;
          if (v10)
            (*(void (**)(char *))(*(_QWORD *)v10 + 8))(v10);
          if (v11)
            (*(void (**)(char *))(*(_QWORD *)v11 + 8))(v11);
          ++v6;
        }
        while (v6 != v7);
      }
      return (char **)(*(uint64_t (**)(char *))(*(_QWORD *)v4 + 8))(v4);
    }
    else
    {
      result = (char **)(*(uint64_t (**)(char *, void *))(*(_QWORD *)v4 + 48))(v4, &llvm::ErrorInfoBase::ID);
      if ((_DWORD)result)
      {
        sub_1C54004E0(*a3, (uint64_t)v4);
        *v3 = 0;
        return (char **)(*(uint64_t (**)(char *))(*(_QWORD *)v4 + 8))(v4);
      }
      else
      {
        *v3 = v4;
      }
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

llvm::raw_ostream *sub_1C6240C60(uint64_t a1, llvm::raw_ostream *this)
{
  uint64_t v3;
  const char *v4;
  const char *v5;
  char v6;
  int v7;
  const char *v8;
  size_t v9;
  size_t v10;

  v5 = *(const char **)(a1 + 8);
  v3 = a1 + 8;
  v4 = v5;
  v6 = *(_BYTE *)(v3 + 23);
  v7 = v6;
  if (v6 >= 0)
    v8 = (const char *)v3;
  else
    v8 = v4;
  v9 = v6 & 0x7F;
  if (v7 >= 0)
    v10 = v9;
  else
    v10 = *(_QWORD *)(v3 + 8);
  return llvm::raw_ostream::write(this, v8, v10);
}

uint64_t sub_1C6240C8C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void *sub_1C6240C98()
{
  return &llvm::LLVMRemarkSetupFileError::ID;
}

BOOL sub_1C6240CA4(uint64_t a1, void *a2)
{
  return a2 == &llvm::LLVMRemarkSetupFileError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

llvm::raw_ostream *sub_1C6240CC4(uint64_t a1, llvm::raw_ostream *this)
{
  uint64_t v3;
  const char *v4;
  const char *v5;
  char v6;
  int v7;
  const char *v8;
  size_t v9;
  size_t v10;

  v5 = *(const char **)(a1 + 8);
  v3 = a1 + 8;
  v4 = v5;
  v6 = *(_BYTE *)(v3 + 23);
  v7 = v6;
  if (v6 >= 0)
    v8 = (const char *)v3;
  else
    v8 = v4;
  v9 = v6 & 0x7F;
  if (v7 >= 0)
    v10 = v9;
  else
    v10 = *(_QWORD *)(v3 + 8);
  return llvm::raw_ostream::write(this, v8, v10);
}

uint64_t sub_1C6240CF0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void *sub_1C6240CFC()
{
  return &llvm::LLVMRemarkSetupPatternError::ID;
}

BOOL sub_1C6240D08(uint64_t a1, void *a2)
{
  return a2 == &llvm::LLVMRemarkSetupPatternError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

llvm::raw_ostream *llvm::PassManagerPrettyStackEntry::print(llvm::PassManagerPrettyStackEntry *this, llvm::raw_ostream *a2)
{
  char *v4;
  size_t v5;
  const void *v6;
  size_t v7;
  void *v8;
  llvm::raw_ostream *result;
  llvm::raw_ostream *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  char v15;
  const char *v16;
  size_t v17;
  size_t v18;
  llvm::raw_ostream *v19;
  char *v20;
  const char *v21;
  char *v22;
  _BYTE *v23;

  if (*((_OWORD *)this + 2) == 0)
    v4 = "Releasing pass '";
  else
    v4 = "Running pass '";
  sub_1C4816AD8(a2, v4);
  v6 = (const void *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  v7 = v5;
  v8 = (void *)*((_QWORD *)a2 + 4);
  if (v5 <= *((_QWORD *)a2 + 3) - (_QWORD)v8)
  {
    if (v5)
    {
      memcpy(v8, v6, v5);
      *((_QWORD *)a2 + 4) += v7;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, (const char *)v6, v5);
  }
  result = sub_1C4816AD8(a2, "'");
  if (*((_QWORD *)this + 5))
  {
    v10 = sub_1C4816AD8(a2, " on module '");
    v11 = *((_QWORD *)this + 5);
    v14 = *(const char **)(v11 + 168);
    v12 = v11 + 168;
    v13 = v14;
    v15 = *(_BYTE *)(v12 + 23);
    if (v15 >= 0)
      v16 = (const char *)v12;
    else
      v16 = v13;
    v17 = *(_QWORD *)(v12 + 8);
    if (v15 >= 0)
      v18 = v15 & 0x7F;
    else
      v18 = v17;
    v19 = llvm::raw_ostream::write(v10, v16, v18);
    v20 = "'.\n";
    return sub_1C4816AD8(v19, v20);
  }
  if (*((_QWORD *)this + 4))
  {
    sub_1C4816AD8(a2, " on ");
    v21 = "value";
    if (*(_BYTE *)(*((_QWORD *)this + 4) + 16) == 22)
      v21 = "basic block";
    if (*(_BYTE *)(*((_QWORD *)this + 4) + 16))
      v22 = (char *)v21;
    else
      v22 = "function";
    sub_1C4816AD8(a2, v22);
    sub_1C4816AD8(a2, " '");
    llvm::Value::printAsOperand(*((llvm::Value **)this + 4), a2, 0, *((const llvm::Module **)this + 5));
    v20 = "'\n";
    v19 = a2;
    return sub_1C4816AD8(v19, v20);
  }
  v23 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v23 >= *((_QWORD *)a2 + 3))
    return llvm::raw_ostream::write(a2, 10);
  *((_QWORD *)a2 + 4) = v23 + 1;
  *v23 = 10;
  return result;
}

llvm::PMTopLevelManager *llvm::PMTopLevelManager::PMTopLevelManager(llvm::PMTopLevelManager *this, llvm::PMDataManager *a2)
{
  llvm::PMStack *v4;
  char *v5;
  char *v6;
  llvm::FoldingSetBase *v7;
  uint64_t v8;
  uint64_t v9;

  *((_QWORD *)this + 1) = 0;
  v4 = (llvm::PMTopLevelManager *)((char *)this + 8);
  *(_QWORD *)this = &unk_1E8168220;
  v5 = (char *)this + 48;
  *((_QWORD *)this + 4) = (char *)this + 48;
  v6 = (char *)this + 32;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0x800000000;
  *((_QWORD *)this + 14) = (char *)this + 128;
  *((_QWORD *)this + 15) = 0x800000000;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 52) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 58) = 0;
  *((_QWORD *)this + 30) = (char *)this + 256;
  *((_QWORD *)this + 31) = 0x1000000000;
  v7 = (llvm::PMTopLevelManager *)((char *)this + 520);
  v8 = 392;
  *((_QWORD *)this + 48) = 1;
  do
  {
    *(_QWORD *)((char *)this + v8) = -4096;
    v8 += 16;
  }
  while (v8 != 520);
  llvm::FoldingSetBase::FoldingSetBase(v7, 6);
  *(_OWORD *)((char *)this + 536) = 0u;
  *((_QWORD *)this + 69) = (char *)this + 568;
  *((_QWORD *)this + 70) = 0x400000000;
  *((_QWORD *)this + 75) = (char *)this + 616;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *(_OWORD *)((char *)this + 636) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_DWORD *)this + 168) = 0;
  *((_QWORD *)a2 + 1) = this;
  v9 = *((unsigned int *)this + 10);
  if (v9 >= *((_DWORD *)this + 11))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v6, (uint64_t)v5, v9 + 1, 8);
    LODWORD(v9) = *((_DWORD *)this + 10);
  }
  *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v9) = a2;
  ++*((_DWORD *)this + 10);
  llvm::PMStack::push(v4, a2);
  return this;
}

_QWORD *llvm::PMStack::push(llvm::PMStack *this, llvm::PMDataManager *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *result;

  v4 = *(_QWORD **)this;
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  if (v4 == v5)
  {
    v8 = 1;
  }
  else
  {
    v6 = *(_QWORD *)(*(v5 - 1) + 8);
    v7 = *(unsigned int *)(v6 + 120);
    if (v7 >= *(_DWORD *)(v6 + 124))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 112, v6 + 128, v7 + 1, 8);
      LODWORD(v7) = *(_DWORD *)(v6 + 120);
    }
    *(_QWORD *)(*(_QWORD *)(v6 + 112) + 8 * v7) = a2;
    ++*(_DWORD *)(v6 + 120);
    *((_QWORD *)a2 + 1) = v6;
    v4 = (_QWORD *)*((_QWORD *)this + 1);
    v8 = *(_DWORD *)(*(v4 - 1) + 376) + 1;
  }
  *((_DWORD *)a2 + 94) = v8;
  if ((unint64_t)v4 >= *((_QWORD *)this + 2))
  {
    result = sub_1C4ABDC28((void **)this, (uint64_t)a2);
  }
  else
  {
    *v4 = a2;
    result = v4 + 1;
  }
  *((_QWORD *)this + 1) = result;
  return result;
}

_QWORD *llvm::PMTopLevelManager::addImmutablePass(llvm::PMTopLevelManager *this, llvm::ImmutablePass *a2)
{
  uint64_t v4;
  const void *v5;
  _DWORD *v6;
  _QWORD *result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;

  (*(void (**)(llvm::ImmutablePass *))(*(_QWORD *)a2 + 144))(a2);
  v4 = *((unsigned int *)this + 62);
  if (v4 >= *((_DWORD *)this + 63))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 240, (uint64_t)this + 256, v4 + 1, 8);
    LODWORD(v4) = *((_DWORD *)this + 62);
  }
  *(_QWORD *)(*((_QWORD *)this + 30) + 8 * v4) = a2;
  ++*((_DWORD *)this + 62);
  v12 = (const void *)*((_QWORD *)a2 + 2);
  v5 = v12;
  v6 = (_DWORD *)((char *)this + 384);
  sub_1C6242130((_DWORD *)this + 96, (uint64_t *)&v12)[1] = a2;
  result = (_QWORD *)llvm::PMTopLevelManager::findAnalysisPassInfo(this, v5);
  v8 = (uint64_t *)result[6];
  v9 = (uint64_t *)result[7];
  while (v8 != v9)
  {
    v10 = *v8++;
    v11 = *(_QWORD *)(v10 + 32);
    result = sub_1C624224C(v6, &v11);
    result[1] = a2;
  }
  return result;
}

llvm::PMTopLevelManager **llvm::PMDataManager::dumpPassArguments(llvm::PMTopLevelManager **this)
{
  uint64_t v1;
  llvm::PMTopLevelManager **v2;
  llvm::PMTopLevelManager *v3;
  uint64_t v4;
  uint64_t v5;
  llvm::PMDataManager *v6;
  llvm::PMTopLevelManager **v7;
  llvm *v8;
  llvm::raw_ostream *v9;
  llvm::PMTopLevelManager *v10;
  size_t v11;

  v1 = *((unsigned int *)this + 6);
  if ((_DWORD)v1)
  {
    v2 = this;
    v3 = this[2];
    v4 = 8 * v1;
    do
    {
      v5 = *(_QWORD *)v3;
      v6 = (llvm::PMDataManager *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v3 + 112))(*(_QWORD *)v3);
      if (v6)
      {
        this = (llvm::PMTopLevelManager **)llvm::PMDataManager::dumpPassArguments(v6);
      }
      else
      {
        this = (llvm::PMTopLevelManager **)llvm::PMTopLevelManager::findAnalysisPassInfo(v2[1], *(const void **)(v5 + 16));
        if (this)
        {
          v7 = this;
          if (!*((_BYTE *)this + 42))
          {
            v8 = llvm::dbgs((llvm *)this);
            v9 = sub_1C4816AD8(v8, " -");
            v10 = v7[2];
            v11 = (size_t)v7[3];
            this = (llvm::PMTopLevelManager **)*((_QWORD *)v9 + 4);
            if (v11 <= *((_QWORD *)v9 + 3) - (_QWORD)this)
            {
              if (v11)
              {
                this = (llvm::PMTopLevelManager **)memcpy(this, v10, v11);
                *((_QWORD *)v9 + 4) += v11;
              }
            }
            else
            {
              this = (llvm::PMTopLevelManager **)llvm::raw_ostream::write(v9, (const char *)v10, v11);
            }
          }
        }
      }
      v3 = (llvm::PMTopLevelManager *)((char *)v3 + 8);
      v4 -= 8;
    }
    while (v4);
  }
  return this;
}

void llvm::PMDataManager::addLowerLevelRequiredPass(llvm **this, llvm::Pass *a2, llvm::Pass *a3)
{
  llvm::PMTopLevelManager::dumpArguments(this[1]);
  llvm::PMTopLevelManager::dumpPasses((uint64_t)this[1]);
  __break(1u);
}

llvm::legacy::FunctionPassManager *llvm::legacy::FunctionPassManager::FunctionPassManager(llvm::legacy::FunctionPassManager *this, llvm::Module *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E8168290;
  *((_QWORD *)this + 2) = a2;
  v3 = operator new();
  v4 = sub_1C6241C64(v3);
  *((_QWORD *)this + 1) = v4;
  *(_QWORD *)(v4 + 40) = v4 + 416;
  v5 = (_QWORD *)operator new();
  v6 = *((_QWORD *)this + 1);
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v6 + 32;
  *(_QWORD *)(v6 + 8) = v5;
  return this;
}

void llvm::legacy::FunctionPassManager::add(llvm::legacy::FunctionPassManager *this, const void **a2)
{
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(*((_QWORD *)this + 1) + 416), a2);
}

uint64_t llvm::legacy::FunctionPassManager::doInitialization(llvm::legacy::FunctionPassManager *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), *((_QWORD *)this + 2));
}

uint64_t llvm::legacy::FunctionPassManager::doFinalization(llvm::legacy::FunctionPassManager *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), *((_QWORD *)this + 2));
}

void llvm::FPPassManager::dumpPassStructure(llvm::FPPassManager *this, int a2)
{
  llvm *v4;
  llvm::raw_ostream *v5;
  unint64_t v6;
  uint64_t v7;
  llvm::Pass *v8;

  v4 = llvm::dbgs(this);
  v5 = llvm::raw_ostream::indent(v4, 2 * a2);
  sub_1C4816AD8(v5, "FunctionPass Manager\n");
  if (*((_DWORD *)this + 14))
  {
    v6 = 0;
    v7 = (a2 + 1);
    do
    {
      v8 = *(llvm::Pass **)(*((_QWORD *)this + 6) + 8 * v6);
      (*(void (**)(llvm::Pass *, uint64_t))(*(_QWORD *)v8 + 128))(v8, v7);
      llvm::PMDataManager::dumpLastUses((llvm::FPPassManager *)((char *)this + 32), v8, v7);
      ++v6;
    }
    while (v6 < *((unsigned int *)this + 14));
  }
}

llvm::legacy::PassManager *llvm::legacy::PassManager::PassManager(llvm::legacy::PassManager *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E81682B8;
  v2 = operator new();
  v3 = sub_1C6241D94(v2);
  *((_QWORD *)this + 1) = v3;
  *(_QWORD *)(v3 + 40) = v3 + 416;
  return this;
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E81682B8;
  v2 = operator new();
  v3 = sub_1C6241D94(v2);
  *((_QWORD *)this + 1) = v3;
  *(_QWORD *)(v3 + 40) = v3 + 416;
  return this;
}

void llvm::legacy::PassManager::~PassManager(llvm::legacy::PassManager *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_1E81682B8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E81682B8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E81682B8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1CAA32FC0);
}

double llvm::PMStack::pop(llvm::PMStack *this)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) - 8);
  sub_1C4A5A548((unsigned int *)(v2 + 208));
  result = 0.0;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *((_QWORD *)this + 1) -= 8;
  return result;
}

llvm::raw_ostream *llvm::PMStack::dump(llvm::raw_ostream *this)
{
  uint64_t *v1;
  uint64_t *v2;
  llvm::raw_ostream *v3;
  uint64_t v4;
  llvm *v5;
  uint64_t v6;
  size_t v7;
  const void *v8;
  size_t v9;
  _BYTE *v10;

  v1 = *(uint64_t **)this;
  v2 = (uint64_t *)*((_QWORD *)this + 1);
  if (*(uint64_t **)this != v2)
  {
    v3 = this;
    do
    {
      v4 = *v1;
      v5 = llvm::dbgs(this);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      v8 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      v9 = v7;
      this = (llvm::raw_ostream *)*((_QWORD *)v5 + 4);
      if (v7 <= *((_QWORD *)v5 + 3) - (_QWORD)this)
      {
        if (v7)
        {
          memcpy(this, v8, v7);
          this = (llvm::raw_ostream *)(*((_QWORD *)v5 + 4) + v9);
          *((_QWORD *)v5 + 4) = this;
        }
      }
      else
      {
        llvm::raw_ostream::write(v5, (const char *)v8, v7);
        this = (llvm::raw_ostream *)*((_QWORD *)v5 + 4);
      }
      if ((unint64_t)this >= *((_QWORD *)v5 + 3))
      {
        this = llvm::raw_ostream::write(v5, 32);
      }
      else
      {
        *((_QWORD *)v5 + 4) = (char *)this + 1;
        *(_BYTE *)this = 32;
      }
      ++v1;
    }
    while (v1 != v2);
    if (*(_QWORD *)v3 != *((_QWORD *)v3 + 1))
    {
      this = llvm::dbgs(this);
      v10 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v10 >= *((_QWORD *)this + 3))
      {
        return llvm::raw_ostream::write(this, 10);
      }
      else
      {
        *((_QWORD *)this + 4) = v10 + 1;
        *v10 = 10;
      }
    }
  }
  return this;
}

void sub_1C62417B8()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62417CC()
{
  return 0;
}

void sub_1C62417D4(uint64_t a1)
{
  llvm::PMDataManager::~PMDataManager((llvm::PMDataManager *)(a1 + 32));
  llvm::ModulePass::~ModulePass((llvm::ModulePass *)a1);
}

void sub_1C62417FC(uint64_t a1)
{
  llvm::PMDataManager::~PMDataManager((llvm::PMDataManager *)(a1 + 32));
  llvm::ModulePass::~ModulePass((llvm::ModulePass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C6241838()
{
  return "Function Pass Manager";
}

void sub_1C6241848(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C6241858()
{
  return 3;
}

void sub_1C6241860(llvm::PMDataManager *a1)
{
  llvm::ModulePass *v1;

  v1 = (llvm::PMDataManager *)((char *)a1 - 32);
  llvm::PMDataManager::~PMDataManager(a1);
  llvm::ModulePass::~ModulePass(v1);
}

void sub_1C6241884(llvm::PMDataManager *a1)
{
  llvm::ModulePass *v1;

  v1 = (llvm::PMDataManager *)((char *)a1 - 32);
  llvm::PMDataManager::~PMDataManager(a1);
  llvm::ModulePass::~ModulePass(v1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C62418BC(uint64_t a1)
{
  llvm::PMTopLevelManager::~PMTopLevelManager((llvm::PMTopLevelManager *)(a1 + 416));
  llvm::PMDataManager::~PMDataManager((llvm::PMDataManager *)(a1 + 32));
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C62418EC(uint64_t a1)
{
  llvm::PMTopLevelManager::~PMTopLevelManager((llvm::PMTopLevelManager *)(a1 + 416));
  llvm::PMDataManager::~PMDataManager((llvm::PMDataManager *)(a1 + 32));
  llvm::Pass::~Pass((llvm::Pass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6241930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::createPrintFunctionPass(a2, a3);
}

void sub_1C6241940(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C624194C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1C6241954(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_DWORD *)(result + 456))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 448) + 8 * v4);
      if (v5)
        v6 = v5 - 32;
      else
        v6 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 128))(v6, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 456));
  }
  return result;
}

uint64_t sub_1C62419C0()
{
  return 3;
}

void sub_1C62419C8(uint64_t a1)
{
  llvm::Pass *v2;

  v2 = (llvm::Pass *)(a1 - 32);
  llvm::PMTopLevelManager::~PMTopLevelManager((llvm::PMTopLevelManager *)(a1 + 384));
  llvm::PMDataManager::~PMDataManager((llvm::PMDataManager *)a1);
  llvm::Pass::~Pass(v2);
}

void sub_1C62419FC(uint64_t a1)
{
  llvm::Pass *v2;

  v2 = (llvm::Pass *)(a1 - 32);
  llvm::PMTopLevelManager::~PMTopLevelManager((llvm::PMTopLevelManager *)(a1 + 384));
  llvm::PMDataManager::~PMDataManager((llvm::PMDataManager *)a1);
  llvm::Pass::~Pass(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6241A44(uint64_t a1)
{
  return a1 - 32;
}

uint64_t sub_1C6241A4C(uint64_t a1)
{
  return a1 - 384;
}

uint64_t sub_1C6241A54()
{
  return 3;
}

void sub_1C6241A5C(llvm::PMTopLevelManager *a1)
{
  llvm::Pass *v1;
  uint64_t v2;

  v1 = (llvm::PMTopLevelManager *)((char *)a1 - 416);
  llvm::PMTopLevelManager::~PMTopLevelManager(a1);
  llvm::PMDataManager::~PMDataManager((llvm::PMDataManager *)(v2 - 384));
  llvm::Pass::~Pass(v1);
}

void sub_1C6241A88(llvm::PMTopLevelManager *a1)
{
  llvm::Pass *v1;
  uint64_t v2;

  v1 = (llvm::PMTopLevelManager *)((char *)a1 - 416);
  llvm::PMTopLevelManager::~PMTopLevelManager(a1);
  llvm::PMDataManager::~PMDataManager((llvm::PMDataManager *)(v2 - 384));
  llvm::Pass::~Pass(v1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6241AC8(uint64_t a1)
{
  llvm::PMTopLevelManager::~PMTopLevelManager((llvm::PMTopLevelManager *)(a1 + 416));
  llvm::PMDataManager::~PMDataManager((llvm::PMDataManager *)(a1 + 32));
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C6241AF8(uint64_t a1)
{
  llvm::PMTopLevelManager::~PMTopLevelManager((llvm::PMTopLevelManager *)(a1 + 416));
  llvm::PMDataManager::~PMDataManager((llvm::PMDataManager *)(a1 + 32));
  llvm::Pass::~Pass((llvm::Pass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6241B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::createPrintModulePass(a2, a3, 0);
}

void sub_1C6241B4C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C6241B58(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1C6241B64()
{
  return 1;
}

void sub_1C6241B6C(uint64_t a1)
{
  llvm::Pass *v2;

  v2 = (llvm::Pass *)(a1 - 32);
  llvm::PMTopLevelManager::~PMTopLevelManager((llvm::PMTopLevelManager *)(a1 + 384));
  llvm::PMDataManager::~PMDataManager((llvm::PMDataManager *)a1);
  llvm::Pass::~Pass(v2);
}

void sub_1C6241BA0(uint64_t a1)
{
  llvm::Pass *v2;

  v2 = (llvm::Pass *)(a1 - 32);
  llvm::PMTopLevelManager::~PMTopLevelManager((llvm::PMTopLevelManager *)(a1 + 384));
  llvm::PMDataManager::~PMDataManager((llvm::PMDataManager *)a1);
  llvm::Pass::~Pass(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6241BE8(uint64_t a1)
{
  return a1 - 32;
}

uint64_t sub_1C6241BF0(uint64_t a1)
{
  return a1 - 384;
}

void sub_1C6241BF8(llvm::PMTopLevelManager *a1)
{
  llvm::Pass *v1;
  uint64_t v2;

  v1 = (llvm::PMTopLevelManager *)((char *)a1 - 416);
  llvm::PMTopLevelManager::~PMTopLevelManager(a1);
  llvm::PMDataManager::~PMDataManager((llvm::PMDataManager *)(v2 - 384));
  llvm::Pass::~Pass(v1);
}

void sub_1C6241C24(llvm::PMTopLevelManager *a1)
{
  llvm::Pass *v1;
  uint64_t v2;

  v1 = (llvm::PMTopLevelManager *)((char *)a1 - 416);
  llvm::PMTopLevelManager::~PMTopLevelManager(a1);
  llvm::PMDataManager::~PMDataManager((llvm::PMDataManager *)(v2 - 384));
  llvm::Pass::~Pass(v1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6241C64(uint64_t a1)
{
  llvm::PMTopLevelManager *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E8168CF0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &llvm::legacy::FunctionPassManagerImpl::ID;
  *(_DWORD *)(a1 + 24) = 5;
  *(_QWORD *)(a1 + 32) = off_1E8168250;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)(a1 + 56) = 0x1000000000;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = a1 + 280;
  *(_QWORD *)(a1 + 272) = 0x1000000000;
  *(_DWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  v2 = (llvm::PMTopLevelManager *)(a1 + 416);
  *(_OWORD *)(a1 + 224) = 0u;
  v3 = operator new();
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = &llvm::FPPassManager::ID;
  *(_DWORD *)(v3 + 24) = 4;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = v3 + 64;
  *(_QWORD *)(v3 + 56) = 0x1000000000;
  *(_QWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 248) = 0;
  *(_DWORD *)(v3 + 256) = 0;
  *(_QWORD *)(v3 + 264) = v3 + 280;
  *(_QWORD *)(v3 + 272) = 0x1000000000;
  *(_DWORD *)(v3 + 408) = 0;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_QWORD *)v3 = &off_1E8168308;
  *(_QWORD *)(v3 + 32) = &unk_1E81683B8;
  llvm::PMTopLevelManager::PMTopLevelManager(v2, (llvm::PMDataManager *)(v3 + 32));
  *(_QWORD *)a1 = &off_1E81683F8;
  *(_QWORD *)(a1 + 32) = &unk_1E81684A8;
  *(_QWORD *)(a1 + 416) = &unk_1E81684E8;
  *(_BYTE *)(a1 + 1096) = 0;
  return a1;
}

uint64_t sub_1C6241D94(uint64_t a1)
{
  llvm::PMTopLevelManager *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E8168CF0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &llvm::legacy::PassManagerImpl::ID;
  *(_DWORD *)(a1 + 24) = 5;
  *(_QWORD *)(a1 + 32) = off_1E8168250;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)(a1 + 56) = 0x1000000000;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = a1 + 280;
  *(_QWORD *)(a1 + 272) = 0x1000000000;
  *(_DWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  v2 = (llvm::PMTopLevelManager *)(a1 + 416);
  *(_OWORD *)(a1 + 224) = 0u;
  v3 = operator new();
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = &unk_1EF8F2FA8;
  *(_DWORD *)(v3 + 24) = 5;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = v3 + 64;
  *(_QWORD *)(v3 + 56) = 0x1000000000;
  *(_QWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 248) = 0;
  *(_DWORD *)(v3 + 256) = 0;
  *(_QWORD *)(v3 + 264) = v3 + 280;
  *(_QWORD *)(v3 + 272) = 0x1000000000;
  *(_DWORD *)(v3 + 408) = 0;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_QWORD *)v3 = &off_1E8168758;
  *(_QWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 424) = 0;
  *(_DWORD *)(v3 + 432) = 0;
  *(_QWORD *)(v3 + 440) = 0;
  *(_QWORD *)(v3 + 448) = 0;
  *(_QWORD *)(v3 + 456) = 0;
  *(_QWORD *)(v3 + 32) = &unk_1E8168810;
  llvm::PMTopLevelManager::PMTopLevelManager(v2, (llvm::PMDataManager *)(v3 + 32));
  *(_QWORD *)a1 = &off_1E8168518;
  *(_QWORD *)(a1 + 32) = &unk_1E81685C8;
  *(_QWORD *)(a1 + 416) = &unk_1E8168608;
  return a1;
}

uint64_t sub_1C6241ED4(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  uint64_t v5;

  v5 = 0;
  if (sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v5))
    v3 = v5 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  else
    v3 = 1;
  if (v3)
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v5 + 8);
}

_QWORD *sub_1C6241F40(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
LABEL_3:
    sub_1C5408B34(a1, v6);
    v8 = 0;
    sub_1C4F763D4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    a3 = v8;
    goto LABEL_4;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

size_t **sub_1C6241FF4(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6;
  size_t **i;
  size_t *v8;
  size_t *v9;
  _QWORD *v10;
  size_t *v11;
  char *v12;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  i = (size_t **)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == (size_t *)-8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == (size_t *)-8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  v10 = operator new(a3 + 17, (std::align_val_t)8uLL);
  v11 = v10;
  v12 = (char *)(v10 + 2);
  if (a3)
    memcpy(v10 + 2, a2, a3);
  v12[a3] = 0;
  *v11 = a3;
  v11[1] = 0;
  *i = v11;
  ++*(_DWORD *)(a1 + 12);
  for (i = (size_t **)(*(_QWORD *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i + 1 == 0;
  return i;
}

_DWORD *sub_1C62420EC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  return sub_1C5403D7C(a3, a2 + 8);
}

unint64_t sub_1C62420F8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  sub_1C5403D7C(a3, a2 + 8);
  return sub_1C4F5AB38(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * a3[2]);
}

_QWORD *sub_1C6242130(_DWORD *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C54094EC((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C624218C(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C624218C(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 8;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C5409598((uint64_t)a1, v6);
  v8 = 0;
  sub_1C54094EC((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

_QWORD *sub_1C624224C(_DWORD *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C54094EC((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C624218C(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C62422AC(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4A5C500(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C54097D0((_DWORD *)a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *llvm::MDBuilder::createString(uint64_t **a1, unsigned __int8 *a2, size_t a3)
{
  return llvm::MDString::get(*a1, a2, a3);
}

_QWORD *llvm::MDBuilder::createConstant(llvm::MDBuilder *this, llvm::Constant *a2)
{
  return llvm::ValueAsMetadata::get(a2, a2);
}

uint64_t llvm::MDBuilder::createFPMath(llvm::Type **this, float a2, llvm::LLVMContext *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v9;
  llvm::ConstantFP **FloatTy;
  llvm::Type *v11;
  llvm::APFloatBase *v12;
  llvm::Value *v13;
  _QWORD *v14;
  llvm::Type *v15;
  _QWORD v16[7];

  if (a2 == 0.0)
    return 0;
  v16[1] = v6;
  v16[2] = v5;
  v16[5] = v3;
  v16[6] = v4;
  v9 = a2;
  FloatTy = (llvm::ConstantFP **)llvm::Type::getFloatTy(*this, a3);
  v12 = llvm::ConstantFP::get(FloatTy, v11, v9);
  v14 = llvm::ValueAsMetadata::get(v12, v13);
  v15 = *this;
  v16[0] = v14;
  return llvm::MDTuple::getImpl((uint64_t *)v15, v16, 1, 0, 1);
}

uint64_t llvm::MDBuilder::createBranchWeights(uint64_t **this, int a2, int a3)
{
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v4[0] = a2;
  v4[1] = a3;
  return llvm::MDBuilder::createBranchWeights(this, (uint64_t)v4, 2);
}

uint64_t llvm::MDBuilder::createBranchWeights(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  int v3;
  _QWORD *v6;
  llvm::LLVMContext *v7;
  uint64_t Int32Ty;
  llvm::ConstantInt *v9;
  uint64_t i;
  llvm::Value **v11;
  llvm::Value *v12;
  _QWORD *v13;
  uint64_t Impl;
  void *v16;
  uint64_t v17;
  _QWORD v18[5];

  v3 = a3;
  v18[4] = *MEMORY[0x1E0C80C00];
  v16 = v18;
  v17 = 0x400000000;
  sub_1C4848C0C((unsigned int *)&v16, a3 + 1, 0);
  v6 = llvm::MDString::get(*a1, "branch_weights", 0xEuLL);
  *(_QWORD *)v16 = v6;
  Int32Ty = llvm::Type::getInt32Ty((llvm::Type *)*a1, v7);
  if (v3)
  {
    v9 = (llvm::ConstantInt *)Int32Ty;
    for (i = 0; i != v3; *((_QWORD *)v16 + ++i) = v13)
    {
      v11 = llvm::ConstantInt::get(v9, *(unsigned int *)(a2 + 4 * i), 0);
      v13 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v11, v12);
    }
  }
  Impl = llvm::MDTuple::getImpl(*a1, v16, v17, 0, 1);
  if (v16 != v18)
    free(v16);
  return Impl;
}

uint64_t llvm::MDBuilder::createUnpredictable(uint64_t **this)
{
  return llvm::MDTuple::getImpl(*this, 0, 0, 0, 1);
}

uint64_t llvm::MDBuilder::createFunctionSectionPrefix(uint64_t **a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t *v6;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v8[0] = llvm::MDString::get(*a1, "function_section_prefix", 0x17uLL);
  v8[1] = llvm::MDString::get(*a1, a2, a3);
  return llvm::MDTuple::getImpl(v6, v8, 2, 0, 1);
}

uint64_t llvm::MDBuilder::createCallees(uint64_t **a1, llvm::Value *a2, uint64_t a3)
{
  llvm::ValueAsMetadata **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t Impl;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x400000000;
  if (a3)
  {
    v4 = (llvm::ValueAsMetadata **)a2;
    v5 = 8 * a3;
    do
    {
      v6 = llvm::ValueAsMetadata::get(*v4, a2);
      v7 = v12;
      if (v12 >= (unint64_t)HIDWORD(v12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v11, (uint64_t)v13, v12 + 1, 8);
        v7 = v12;
      }
      *((_QWORD *)v11 + v7) = v6;
      a3 = (v12 + 1);
      LODWORD(v12) = v12 + 1;
      ++v4;
      v5 -= 8;
    }
    while (v5);
    v8 = v11;
  }
  else
  {
    v8 = v13;
  }
  Impl = llvm::MDTuple::getImpl(*a1, v8, a3, 0, 1);
  if (v11 != v13)
    free(v11);
  return Impl;
}

uint64_t llvm::MDBuilder::createCallbackEncoding(llvm::Type **a1, llvm::Type *a2, int *a3, uint64_t a4, unsigned int a5)
{
  llvm::ConstantInt *v9;
  llvm::Value **v10;
  llvm::Value *v11;
  llvm::LLVMContext *v12;
  uint64_t v13;
  llvm::Value **v14;
  llvm::Value *v15;
  _QWORD *v16;
  uint64_t v17;
  llvm::ConstantInt *Int1Ty;
  llvm::Value **v19;
  llvm::Value *v20;
  _QWORD *v21;
  unsigned int v22;
  uint64_t Impl;
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x1E0C80C00];
  v25 = v27;
  v26 = 0x400000000;
  v9 = (llvm::ConstantInt *)(*(_QWORD *)*a1 + 1984);
  v10 = llvm::ConstantInt::get(v9, a2, 0);
  v27[0] = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v10, v11);
  LODWORD(v26) = 1;
  if (a4)
  {
    v13 = 4 * a4;
    do
    {
      v14 = llvm::ConstantInt::get(v9, *a3, (const llvm::APInt *)1);
      v16 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v14, v15);
      v17 = v26;
      if (v26 >= (unint64_t)HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, (uint64_t)v27, v26 + 1, 8);
        v17 = v26;
      }
      *((_QWORD *)v25 + v17) = v16;
      LODWORD(v26) = v26 + 1;
      ++a3;
      v13 -= 4;
    }
    while (v13);
  }
  Int1Ty = (llvm::ConstantInt *)llvm::Type::getInt1Ty(*a1, v12);
  v19 = llvm::ConstantInt::get(Int1Ty, a5, 0);
  v21 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v19, v20);
  v22 = v26;
  if (v26 >= HIDWORD(v26))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, (uint64_t)v27, v26 + 1, 8);
    v22 = v26;
  }
  *((_QWORD *)v25 + v22) = v21;
  LODWORD(v26) = v26 + 1;
  Impl = llvm::MDTuple::getImpl((uint64_t *)*a1, v25, v26, 0, 1);
  if (v25 != v27)
    free(v25);
  return Impl;
}

uint64_t llvm::MDBuilder::createTBAARoot(uint64_t **a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t *v3;
  _QWORD *v5;

  v3 = *a1;
  v5 = llvm::MDString::get(*a1, a2, a3);
  return llvm::MDTuple::getImpl(v3, &v5, 1, 0, 1);
}

uint64_t llvm::MDBuilder::createTBAATypeNode(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6;
  llvm::ConstantInt *v12;
  llvm::Value **v13;
  llvm::Value *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  llvm::Value **v20;
  llvm::Value *v21;
  _QWORD *v22;
  uint64_t v23;
  llvm::Value **v24;
  llvm::Value *v25;
  _QWORD *v26;
  uint64_t Impl;
  void *v29;
  uint64_t v30;
  _QWORD v31[5];

  v6 = a6;
  v31[4] = *MEMORY[0x1E0C80C00];
  v29 = v31;
  v30 = 0x400000000;
  sub_1C4848C0C((unsigned int *)&v29, 3 * a6 + 3, 0);
  v12 = (llvm::ConstantInt *)(**a1 + 1984);
  *(_QWORD *)v29 = a2;
  v13 = llvm::ConstantInt::get(v12, a3, 0);
  v15 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v13, v14);
  v16 = v29;
  *((_QWORD *)v29 + 1) = v15;
  v16[2] = a4;
  if (v6)
  {
    v17 = 0;
    v18 = 3 * v6;
    v19 = (uint64_t *)(a5 + 8);
    do
    {
      *((_QWORD *)v29 + (v17 + 3)) = v19[1];
      v20 = llvm::ConstantInt::get(v12, *(v19 - 1), 0);
      v22 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v20, v21);
      *((_QWORD *)v29 + (v17 + 4)) = v22;
      v23 = *v19;
      v19 += 3;
      v24 = llvm::ConstantInt::get(v12, v23, 0);
      v26 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v24, v25);
      *((_QWORD *)v29 + (v17 + 5)) = v26;
      v17 += 3;
    }
    while (v18 != v17);
    v16 = v29;
  }
  Impl = llvm::MDTuple::getImpl(*a1, v16, v30, 0, 1);
  if (v29 != v31)
    free(v29);
  return Impl;
}

uint64_t llvm::MDBuilder::createTBAAAccessTag(uint64_t **this, llvm::MDNode *a2, llvm::MDNode *a3, llvm::IntegerType *a4, uint64_t a5, int a6)
{
  llvm::ConstantInt **v11;
  llvm::ValueHandleBase *v12;
  llvm::Value *v13;
  _QWORD *v14;
  llvm::ValueHandleBase *v15;
  llvm::Value *v16;
  _QWORD *v17;
  llvm::ValueHandleBase *v18;
  llvm::Value *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  llvm::MDNode *v25;
  llvm::MDNode *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v11 = (llvm::ConstantInt **)(**this + 1984);
  v12 = llvm::ConstantInt::get(v11, (uint64_t)a4, 0);
  v14 = llvm::ValueAsMetadata::get(v12, v13);
  v15 = llvm::ConstantInt::get(v11, a5, 0);
  v17 = llvm::ValueAsMetadata::get(v15, v16);
  if (a6)
  {
    v18 = llvm::ConstantInt::get(v11, 1, 0);
    v20 = llvm::ValueAsMetadata::get(v18, v19);
    v21 = *this;
    v25 = a2;
    v26 = a3;
    v27 = v14;
    v28 = v17;
    v29 = v20;
    v22 = v21;
    v23 = 5;
  }
  else
  {
    v22 = *this;
    v25 = a2;
    v26 = a3;
    v27 = v14;
    v28 = v17;
    v23 = 4;
  }
  return llvm::MDTuple::getImpl(v22, &v25, v23, 0, 1);
}

uint64_t llvm::MDBuilder::createIrrLoopHeaderWeight(uint64_t **this, uint64_t a2)
{
  llvm::ValueHandleBase *v4;
  llvm::Value *v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  v7[0] = llvm::MDString::get(*this, "loop_header_weight", 0x12uLL);
  v4 = llvm::ConstantInt::get((llvm::ConstantInt **)(**this + 1984), a2, 0);
  v7[1] = llvm::ValueAsMetadata::get(v4, v5);
  return llvm::MDTuple::getImpl(*this, v7, 2, 0, 1);
}

uint64_t llvm::MDBuilder::createPseudoProbeDesc(uint64_t **this, uint64_t a2, uint64_t a3, llvm::Function *a4)
{
  llvm::ConstantInt **v8;
  llvm::ValueHandleBase *v9;
  llvm::Value *v10;
  _QWORD *v11;
  llvm::ValueHandleBase *v12;
  llvm::Value *v13;
  _QWORD *v14;
  unsigned __int8 *Name;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t Impl;
  void *v21;
  uint64_t v22;
  _QWORD v23[4];

  v23[3] = *MEMORY[0x1E0C80C00];
  v8 = (llvm::ConstantInt **)(**this + 1984);
  v21 = v23;
  v22 = 0x300000000;
  sub_1C4848C0C((unsigned int *)&v21, 3uLL, 0);
  v9 = llvm::ConstantInt::get(v8, a2, 0);
  v11 = llvm::ValueAsMetadata::get(v9, v10);
  *(_QWORD *)v21 = v11;
  v12 = llvm::ConstantInt::get(v8, a3, 0);
  v14 = llvm::ValueAsMetadata::get(v12, v13);
  *((_QWORD *)v21 + 1) = v14;
  Name = (unsigned __int8 *)llvm::Value::getName(a4);
  v17 = llvm::MDString::get(*this, Name, v16);
  v18 = v21;
  *((_QWORD *)v21 + 2) = v17;
  Impl = llvm::MDTuple::getImpl(*this, v18, v22, 0, 1);
  if (v21 != v23)
    free(v21);
  return Impl;
}

void llvm::Mangler::getNameWithPrefix(llvm::Mangler *this, llvm::raw_ostream *a2, const llvm::Twine *a3, const llvm::DataLayout *a4)
{
  sub_1C540AE88(this, (uint64_t)a2, 0, (uint64_t)a3, 0x5F005F0000uLL >> (8 * *((_DWORD *)a3 + 7)));
}

_QWORD *sub_1C6242D74(uint64_t *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4E2FBDC(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4E2FC78((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

uint64_t sub_1C6242DD4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = (uint64_t *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)*v4;
  v5 = *(unsigned int *)(a2 + 8);
  v6 = (uint64_t *)(a2 - 8 * v5);
  if ((_DWORD)v5 == 2)
    v7 = v6[1];
  else
    v7 = 0;
  result = llvm::DILocation::getImpl(v4, *(_DWORD *)(a2 + 4), *(unsigned __int16 *)(a2 + 2), *v6, v7, *(unsigned __int8 *)(a2 + 1) >> 7, 2, 1);
  *a1 = result;
  return result;
}

void sub_1C6242E40(llvm::MDNode **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  char *v6;
  size_t v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 16);
  v4 = (uint64_t *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)*v4;
  v5 = *(unsigned __int16 *)(a2 + 2);
  v6 = (char *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  if (*(_QWORD *)v6)
  {
    v9 = *(_QWORD **)(*(_QWORD *)v6 + 8);
    v10 = *v9;
    v8 = (unsigned __int8 *)(v9 + 3);
    v7 = v10;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v11 = v13;
  v12 = 0x400000000;
  sub_1C485BB4C((unsigned int *)&v11, v6 + 8, (char *)a2);
  *a1 = sub_1C6243A44(v4, v5, v8, v7, v11, v12);
  if (v11 != v13)
    free(v11);
}

llvm::MDNode *sub_1C6242F30(llvm::MDNode **a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  llvm::MDNode *result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  v5 = (uint64_t *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  result = llvm::DISubrange::getImpl(v4, *v5, v5[1], v5[2], v5[3], 2, 1);
  *a1 = result;
  return result;
}

llvm::MDNode *sub_1C6242F7C(llvm::MDNode **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  size_t v8;
  uint64_t v9;
  size_t v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  size_t v13;
  llvm::MDNode *result;
  llvm::MDNode *v15;
  unsigned int v16;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (_QWORD *)*v5;
  v6 = *(unsigned int *)(a2 + 32);
  v16 = v6;
  if (v6 > 0x40)
  {
    v8 = ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8;
    v7 = (void *)operator new[]();
    memcpy(v7, *(const void **)(a2 + 24), v8);
  }
  else
  {
    v7 = *(void **)(a2 + 24);
  }
  v15 = (llvm::MDNode *)v7;
  v9 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  if (v9)
  {
    v12 = *(_QWORD **)(v9 + 8);
    v13 = *v12;
    v11 = (unsigned __int8 *)(v12 + 3);
    v10 = v13;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  result = sub_1C6243AC0(v5, (uint64_t)&v15, *(_DWORD *)(a2 + 4) != 0, v11, v10);
  *a1 = result;
  if (v16 >= 0x41)
  {
    result = v15;
    if (v15)
      return (llvm::MDNode *)MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
  }
  return result;
}

llvm::MDNode *sub_1C6243078(llvm::MDNode **a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  unsigned __int8 *v7;
  _QWORD *v8;
  size_t v9;
  llvm::MDNode *result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  v5 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  if (v5)
  {
    v8 = *(_QWORD **)(v5 + 8);
    v9 = *v8;
    v7 = (unsigned __int8 *)(v8 + 3);
    v6 = v9;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  result = sub_1C6243B34(v4, *(unsigned __int16 *)(a2 + 2), v7, v6, *(_QWORD *)(a2 + 32), *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 52), *(_DWORD *)(a2 + 28));
  *a1 = result;
  return result;
}

llvm::MDNode *sub_1C62430E4(llvm::MDNode **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  char v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  llvm::MDNode *result;
  _QWORD v29[2];
  char v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  char v34;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 4) != 0)
    v6 = (uint64_t *)*v6;
  v7 = (_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v8 = (_QWORD *)*v7;
  if (*v7)
  {
    v11 = (_QWORD *)v8[1];
    v12 = (_QWORD *)*v11;
    v10 = (unsigned __int8 *)(v11 + 3);
    v9 = v12;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v13 = v7[1];
  if (v13)
  {
    v16 = *(_QWORD **)(v13 + 8);
    v17 = (_QWORD *)*v16;
    v15 = (unsigned __int8 *)(v16 + 3);
    v14 = v17;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v18 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a2 + 40))
  {
    v22 = *(uint64_t **)(*(_QWORD *)(a2 + 32) + 8);
    v23 = *v22;
    v8 = v22 + 3;
    v18 = v23;
    v21 = *(_DWORD *)(a2 + 24) & 0xFFFFFF00;
    v19 = *(_DWORD *)(a2 + 24);
    v20 = 1;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
  }
  v24 = *(_BYTE *)(a2 + 56);
  if (v24)
  {
    v26 = *(uint64_t **)(*(_QWORD *)(a2 + 48) + 8);
    v27 = *v26;
    v25 = v26 + 3;
    v2 = v27;
    v24 = 1;
  }
  else
  {
    v25 = 0;
  }
  v31 = v21 | v19;
  v32 = v8;
  v33 = v18;
  v34 = v20;
  v29[0] = v25;
  v29[1] = v2;
  v30 = v24;
  result = sub_1C5394260(v6, v10, v9, v15, v14, (uint64_t)&v31, (uint64_t)v29, 2, 1u);
  *a1 = result;
  return result;
}

llvm::MDNode *sub_1C62431E4(llvm::MDNode **a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  size_t v11;
  llvm::MDNode *result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  v5 = a2 - 8 * *(unsigned int *)(a2 + 8);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(_QWORD *)(v5 + 16);
  if (v7)
  {
    v10 = *(_QWORD **)(v7 + 8);
    v11 = *v10;
    v9 = (unsigned __int8 *)(v10 + 3);
    v8 = v11;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  result = sub_1C6243CC8(v4, v6, v9, v8, *(_BYTE *)(a2 + 24) & 1);
  *a1 = result;
  return result;
}

llvm::MDNode *sub_1C6243248(llvm::MDNode **a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  size_t v7;
  size_t *v8;
  size_t v9;
  llvm::MDNode *result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  v5 = (unsigned __int8 **)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v6 = *v5;
  if (*v5)
  {
    v8 = (size_t *)*((_QWORD *)v6 + 1);
    v9 = *v8;
    v6 = (unsigned __int8 *)(v8 + 3);
    v7 = v9;
  }
  else
  {
    v7 = 0;
  }
  result = sub_1C6243D3C(v4, v6, v7, (uint64_t)v5[1], *(_BYTE *)(a2 + 24));
  *a1 = result;
  return result;
}

llvm::MDNode *sub_1C62432A8(llvm::MDNode **a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  size_t v6;
  unsigned __int8 *v7;
  _QWORD *v8;
  size_t v9;
  llvm::MDNode *result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  v5 = (uint64_t *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  if (*v5)
  {
    v8 = *(_QWORD **)(*v5 + 8);
    v9 = *v8;
    v7 = (unsigned __int8 *)(v8 + 3);
    v6 = v9;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  result = sub_1C6243DA8(v4, *(unsigned __int16 *)(a2 + 2), v7, v6, v5[1], *(_BYTE *)(a2 + 24), v5[2]);
  *a1 = result;
  return result;
}

llvm::MDNode *sub_1C6243310(llvm::MDNode **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  size_t v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  size_t v15;
  llvm::MDNode *result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = (uint64_t *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (uint64_t *)*v4;
  v5 = (uint64_t *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v6 = v5[1];
  if (v6)
  {
    v9 = *(_QWORD **)(v6 + 8);
    v10 = *v9;
    v8 = (unsigned __int8 *)(v9 + 3);
    v7 = v10;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v11 = v5[5];
  if (v11)
  {
    v14 = *(_QWORD **)(v11 + 8);
    v15 = *v14;
    v13 = (unsigned __int8 *)(v14 + 3);
    v12 = v15;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  result = sub_1C539481C(v4, *v5, v8, v7, v13, v12, v5[2], *(_DWORD *)(a2 + 24), v5[3], *(_WORD *)(a2 + 32), HIBYTE(*(_WORD *)(a2 + 32)), v5[6], v5[7], *(_DWORD *)(a2 + 28), v5[8], 2, 1);
  *a1 = result;
  return result;
}

llvm::MDNode *sub_1C62433C8(llvm::MDNode **a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  size_t v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  size_t v10;
  llvm::MDNode *result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  v5 = (uint64_t *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v6 = v5[1];
  if (v6)
  {
    v9 = *(_QWORD **)(v6 + 8);
    v10 = *v9;
    v8 = (unsigned __int8 *)(v9 + 3);
    v7 = v10;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  result = sub_1C6243E34(v4, *v5, v8, v7, v5[2], *(_DWORD *)(a2 + 24), v5[3], *(unsigned __int16 *)(a2 + 32), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 28), v5[4]);
  *a1 = result;
  return result;
}

llvm::MDNode *sub_1C6243448(llvm::MDNode **a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  size_t v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  size_t v10;
  llvm::MDNode *result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  v5 = (uint64_t *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v6 = v5[1];
  if (v6)
  {
    v9 = *(_QWORD **)(v6 + 8);
    v10 = *v9;
    v8 = (unsigned __int8 *)(v9 + 3);
    v7 = v10;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  result = sub_1C6243F00(v4, *v5, v8, v7, v5[2], *(_DWORD *)(a2 + 24));
  *a1 = result;
  return result;
}

unsigned int *sub_1C62434AC(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  size_t v13;
  size_t *v14;
  size_t v15;
  unsigned __int8 *v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  size_t v22;
  size_t *v23;
  size_t v24;
  unsigned int *result;

  v9 = *(_QWORD *)(a2 + 16);
  v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 4) != 0)
    v10 = (uint64_t *)*v10;
  v11 = (unsigned __int8 **)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v12 = *v11;
  if (*v11)
  {
    v14 = (size_t *)*((_QWORD *)v12 + 1);
    v15 = *v14;
    v12 = (unsigned __int8 *)(v14 + 3);
    v13 = v15;
  }
  else
  {
    v13 = 0;
  }
  v16 = v11[2];
  if (v16)
  {
    v19 = (_QWORD *)*((_QWORD *)v16 + 1);
    v20 = (_QWORD *)*v19;
    v18 = (unsigned __int8 *)(v19 + 3);
    v17 = v20;
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  v21 = v11[3];
  if (v21)
  {
    v23 = (size_t *)*((_QWORD *)v21 + 1);
    v24 = *v23;
    v21 = (unsigned __int8 *)(v23 + 3);
    v22 = v24;
  }
  else
  {
    v22 = 0;
  }
  result = sub_1C5394448(v10, v12, v13, (uint64_t)v11[1], *(_DWORD *)(a2 + 24), v18, v17, a8, v21, v22, *(_DWORD *)(a2 + 28), (uint64_t)v11[4], 2, 1);
  *a1 = result;
  return result;
}

llvm::MDNode *sub_1C6243568(llvm::MDNode **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  size_t v12;
  size_t v13;
  llvm::MDNode *result;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (_QWORD *)*v5;
  v6 = *(unsigned __int16 *)(a2 + 2);
  v7 = (uint64_t *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v8 = *(_DWORD *)(a2 + 24);
  v9 = v7[2];
  if (v9)
  {
    v10 = *(_QWORD **)(v9 + 8);
    v13 = *v10;
    v11 = (unsigned __int8 *)(v10 + 3);
    v12 = v13;
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  result = sub_1C5416EFC(v5, v6, *v7, v7[1], v7[3], v8, v11, v12, v7[4]);
  *a1 = result;
  return result;
}

llvm::MDNode *sub_1C62435E0(llvm::MDNode **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  size_t v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  unsigned __int8 *v15;
  _QWORD *v16;
  size_t v17;
  llvm::MDNode *result;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (uint64_t *)*v5;
  v6 = *(unsigned __int16 *)(a2 + 2);
  v7 = *(_DWORD *)(a2 + 24);
  v8 = (_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  if (*v8)
  {
    v11 = *(_QWORD **)(*v8 + 8);
    v12 = *v11;
    v10 = (unsigned __int8 *)(v11 + 3);
    v9 = v12;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v13 = v8[1];
  if (v13)
  {
    v16 = *(_QWORD **)(v13 + 8);
    v17 = *v16;
    v15 = (unsigned __int8 *)(v16 + 3);
    v14 = v17;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  result = sub_1C53943A4(v5, v6, v7, v10, v9, v15, v14, 2, 1u);
  *a1 = result;
  return result;
}

llvm::MDNode *sub_1C6243674(llvm::MDNode **a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t *v5;
  llvm::MDNode *result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  v5 = (unint64_t *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  result = llvm::DIMacroFile::getImpl(v4, *(unsigned __int16 *)(a2 + 2), *(_DWORD *)(a2 + 24), *v5, v5[1], 2, 1);
  *a1 = result;
  return result;
}

llvm::MDNode *sub_1C62436C8(llvm::MDNode **a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  size_t v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  size_t v10;
  llvm::MDNode *result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  v5 = (uint64_t *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v6 = v5[2];
  if (v6)
  {
    v9 = *(_QWORD **)(v6 + 8);
    v10 = *v9;
    v8 = (unsigned __int8 *)(v9 + 3);
    v7 = v10;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  result = sub_1C6243F7C(v4, *v5, v5[1], v8, v7, v5[3], *(_DWORD *)(a2 + 24));
  *a1 = result;
  return result;
}

llvm::MDNode *sub_1C6243730(llvm::MDNode **a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  llvm::MDNode *result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  v5 = (uint64_t *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  result = llvm::DIStringType::getImpl(v4, *(unsigned __int16 *)(a2 + 2), v5[2], v5[3], v5[4], v5[5], *(_QWORD *)(a2 + 32), *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 52), 2, 1);
  *a1 = result;
  return result;
}

llvm::MDNode *sub_1C624379C(llvm::MDNode **a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  llvm::MDNode *result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  v5 = (uint64_t *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  result = llvm::DIGenericSubrange::getImpl(v4, *v5, v5[1], v5[2], v5[3], 2, 1);
  *a1 = result;
  return result;
}

uint64_t llvm::MDNode::resolve(uint64_t this)
{
  *(_DWORD *)(this + 12) = 0;
  return llvm::MDNode::dropReplaceableUses(this);
}

llvm::MDNode *llvm::MDNode::replaceWithPermanentImpl(llvm::MDNode *this)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  llvm::MDNode *v8;

  v2 = *(unsigned __int8 *)this;
  v3 = v2 > 0x22;
  v4 = (1 << v2) & 0x7FFFEFFF0;
  if (!v3 && v4 != 0)
  {
    v6 = *((unsigned int *)this + 2);
    if ((_DWORD)v6)
    {
      v7 = -8 * v6;
      while (*(llvm::MDNode **)((char *)this + v7) != this)
      {
        v7 += 8;
        if (!v7)
        {
          v8 = this;
          goto LABEL_12;
        }
      }
      v8 = (llvm::MDNode *)((char *)this + v7);
    }
    else
    {
      v8 = (llvm::MDNode *)((char *)this - 8 * v6);
    }
LABEL_12:
    if (v8 == this)
      return llvm::MDNode::replaceWithUniquedImpl(this);
  }
  llvm::MDNode::dropReplaceableUses((uint64_t)this);
  llvm::MDNode::storeDistinctInContext(this);
  return this;
}

void llvm::Value::setMetadata(uint64_t a1, unsigned __int8 *a2, size_t a3, llvm::MDNode *a4)
{
  int MDKindID;

  if (a4 || (*(_BYTE *)(a1 + 23) & 0x20) != 0)
  {
    MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)a1, a2, a3);
    llvm::Value::setMetadata((llvm::Value *)a1, MDKindID, a4);
  }
}

void llvm::GlobalObject::addTypeMetadata(llvm::Type ***this, llvm::LLVMContext *a2, llvm::Metadata *a3)
{
  unsigned int v4;
  llvm::Type *v6;
  llvm::ConstantInt **Int64Ty;
  llvm::ValueHandleBase *v8;
  llvm::Value *v9;
  llvm::MDNode *Impl;
  _QWORD v11[3];

  v4 = a2;
  v11[2] = *MEMORY[0x1E0C80C00];
  v6 = **this;
  Int64Ty = (llvm::ConstantInt **)llvm::Type::getInt64Ty(v6, a2);
  v8 = llvm::ConstantInt::get(Int64Ty, v4, 0);
  v11[0] = llvm::ValueAsMetadata::get(v8, v9);
  v11[1] = a3;
  Impl = (llvm::MDNode *)llvm::MDTuple::getImpl((uint64_t *)v6, v11, 2, 0, 1);
  llvm::Value::addMetadata((llvm::Value *)this, 19, Impl);
}

void llvm::GlobalObject::setVCallVisibilityMetadata(llvm::Value *a1, unsigned int a2)
{
  llvm::Type *v4;
  llvm::LLVMContext *v5;
  llvm::ConstantInt **Int64Ty;
  llvm::ValueHandleBase *v7;
  llvm::Value *v8;
  llvm::MDNode *Impl;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  llvm::Value::eraseMetadata(a1, 28);
  v4 = **(llvm::Type ***)a1;
  Int64Ty = (llvm::ConstantInt **)llvm::Type::getInt64Ty(v4, v5);
  v7 = llvm::ConstantInt::get(Int64Ty, a2, 0);
  v10[0] = llvm::ValueAsMetadata::get(v7, v8);
  Impl = (llvm::MDNode *)llvm::MDTuple::getImpl((uint64_t *)v4, v10, 1, 0, 1);
  llvm::Value::addMetadata(a1, 28, Impl);
}

void llvm::GlobalVariable::addDebugInfo(llvm::Value *a1, llvm::MDNode *a2)
{
  llvm::Value::addMetadata(a1, 0, a2);
}

llvm::MDNode *sub_1C6243A44(uint64_t *a1, int a2, unsigned __int8 *a3, size_t __n, _QWORD *a5, uint64_t a6)
{
  uint64_t v10;
  char v11;
  unsigned __int8 *v12;

  if (__n)
  {
    v10 = *sub_1C540DF88((llvm::StringMapImpl *)(*a1 + 272), a3, __n);
    if (v11)
      *(_QWORD *)(v10 + 16) = v10;
    v12 = (unsigned __int8 *)(v10 + 8);
  }
  else
  {
    v12 = 0;
  }
  return llvm::GenericDINode::getImpl(a1, a2, v12, a5, a6, 2, 1);
}

llvm::MDNode *sub_1C6243AC0(_QWORD *a1, uint64_t a2, int a3, unsigned __int8 *a4, size_t __n)
{
  uint64_t v8;
  char v9;
  void *v10;

  if (__n)
  {
    v8 = *sub_1C540DF88((llvm::StringMapImpl *)(*a1 + 272), a4, __n);
    if (v9)
      *(_QWORD *)(v8 + 16) = v8;
    v10 = (void *)(v8 + 8);
  }
  else
  {
    v10 = 0;
  }
  return llvm::DIEnumerator::getImpl(a1, a2, a3, v10, 2, 1);
}

llvm::MDNode *sub_1C6243B34(_QWORD *a1, int a2, unsigned __int8 *a3, size_t __n, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v14;
  char v15;
  uint64_t v16;

  if (__n)
  {
    v14 = *sub_1C540DF88((llvm::StringMapImpl *)(*a1 + 272), a3, __n);
    if (v15)
      *(_QWORD *)(v14 + 16) = v14;
    v16 = v14 + 8;
  }
  else
  {
    v16 = 0;
  }
  return llvm::DIBasicType::getImpl(a1, a2, v16, a5, a6, a7, a8, 2, 1);
}

uint64_t sub_1C6243BD8(uint64_t *a1, int a2, unsigned __int8 *a3, size_t __n, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  if (__n)
  {
    v22 = a2;
    v23 = a5;
    v24 = a6;
    v25 = a7;
    v18 = *sub_1C540DF88((llvm::StringMapImpl *)(*a1 + 272), a3, __n);
    if (v19)
      *(_QWORD *)(v18 + 16) = v18;
    v20 = v18 + 8;
    a7 = v25;
    a6 = v24;
    a5 = v23;
    a2 = v22;
  }
  else
  {
    v20 = 0;
  }
  return llvm::DIDerivedType::getImpl(a1, a2, v20, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, 2, 1);
}

llvm::MDNode *sub_1C6243CC8(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, size_t __n, char a5)
{
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (__n)
  {
    v8 = *sub_1C540DF88((llvm::StringMapImpl *)(*a1 + 272), a3, __n);
    if (v9)
      *(_QWORD *)(v8 + 16) = v8;
    v10 = v8 + 8;
  }
  else
  {
    v10 = 0;
  }
  return llvm::DINamespace::getImpl(a1, a2, v10, a5, 2, 1);
}

llvm::MDNode *sub_1C6243D3C(_QWORD *a1, unsigned __int8 *a2, size_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (a3)
  {
    v8 = *sub_1C540DF88((llvm::StringMapImpl *)(*a1 + 272), a2, a3);
    if (v9)
      *(_QWORD *)(v8 + 16) = v8;
    v10 = v8 + 8;
  }
  else
  {
    v10 = 0;
  }
  return llvm::DITemplateTypeParameter::getImpl(a1, v10, a4, a5, 2, 1);
}

llvm::MDNode *sub_1C6243DA8(_QWORD *a1, int a2, unsigned __int8 *a3, size_t __n, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v12;
  char v13;
  uint64_t v14;

  if (__n)
  {
    v12 = *sub_1C540DF88((llvm::StringMapImpl *)(*a1 + 272), a3, __n);
    if (v13)
      *(_QWORD *)(v12 + 16) = v12;
    v14 = v12 + 8;
  }
  else
  {
    v14 = 0;
  }
  return llvm::DITemplateValueParameter::getImpl(a1, a2, v14, a5, a6, a7, 2, 1);
}

llvm::MDNode *sub_1C6243E34(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, size_t __n, uint64_t a5, int a6, uint64_t a7, int a8, int a9, int a10, uint64_t a11)
{
  uint64_t v17;
  char v18;
  uint64_t v19;

  if (__n)
  {
    v17 = *sub_1C540DF88((llvm::StringMapImpl *)(*a1 + 272), a3, __n);
    if (v18)
      *(_QWORD *)(v17 + 16) = v17;
    v19 = v17 + 8;
  }
  else
  {
    v19 = 0;
  }
  return llvm::DILocalVariable::getImpl(a1, a2, v19, a5, a6, a7, a8, a9, a10, a11, 2, 1);
}

llvm::MDNode *sub_1C6243F00(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, size_t __n, uint64_t a5, int a6)
{
  uint64_t v10;
  char v11;
  uint64_t v12;

  if (__n)
  {
    v10 = *sub_1C540DF88((llvm::StringMapImpl *)(*a1 + 272), a3, __n);
    if (v11)
      *(_QWORD *)(v10 + 16) = v10;
    v12 = v10 + 8;
  }
  else
  {
    v12 = 0;
  }
  return llvm::DILabel::getImpl(a1, a2, v12, a5, a6, 2, 1);
}

llvm::MDNode *sub_1C6243F7C(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, size_t __n, uint64_t a6, int a7)
{
  uint64_t v12;
  char v13;
  uint64_t v14;

  if (__n)
  {
    v12 = *sub_1C540DF88((llvm::StringMapImpl *)(*a1 + 272), a4, __n);
    if (v13)
      *(_QWORD *)(v12 + 16) = v12;
    v14 = v12 + 8;
  }
  else
  {
    v14 = 0;
  }
  return llvm::DICommonBlock::getImpl(a1, a2, a3, v14, a6, a7, 2, 1);
}

_QWORD *sub_1C6244008(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C5417490(a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C5417540(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
    v5[2] = 0;
  }
  return v5;
}

_QWORD *sub_1C624406C(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 - 28 >= 3)
    v4 = 1 << (33 - v3);
  else
    v4 = 64;
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 5)
  {
    v6 = result + 1;
    *result = 1;
    v7 = result + 13;
    do
    {
LABEL_16:
      *v6 = -4096;
      v6 += 3;
    }
    while (v6 != v7);
    return result;
  }
  if ((v2 & 1) != 0)
    return sub_1C5416E70(v1, v5);
  if (v5 != *((_DWORD *)result + 4))
  {
    MEMORY[0x1CAA32FB4](result[1], 8);
    return sub_1C5416E70(v1, v5);
  }
  *result = 0;
  if (v5)
  {
    v6 = (_QWORD *)result[1];
    v7 = &v6[3 * v5];
    goto LABEL_16;
  }
  return result;
}

void llvm::SymbolTableListTraits<llvm::GlobalVariable>::transferNodesFromList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  llvm::ValueSymbolTable *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  size_t *ValueName;
  uint64_t v12;

  if (a1 != a2)
  {
    v6 = a1 - 8;
    v7 = *(llvm::ValueSymbolTable **)(a1 + 104);
    v8 = *(uint64_t **)(a2 + 104);
    if (v7 == (llvm::ValueSymbolTable *)v8)
    {
      while (a3 != a4)
      {
        v12 = a3 - 56;
        if (!a3)
          v12 = 0;
        *(_QWORD *)(v12 + 40) = v6;
        a3 = *(_QWORD *)(a3 + 8);
      }
    }
    else
    {
      while (a3 != a4)
      {
        if (a3)
          v9 = a3 - 56;
        else
          v9 = 0;
        v10 = *(_DWORD *)(v9 + 20) & 0x10000000;
        if (v8 && v10)
        {
          ValueName = (size_t *)llvm::Value::getValueName((llvm::Value *)v9);
          llvm::ValueSymbolTable::removeValueName(v8, ValueName);
        }
        *(_QWORD *)(v9 + 40) = v6;
        if (v7)
        {
          if (v10)
            llvm::ValueSymbolTable::reinsertValue(v7, (llvm::Value *)v9);
        }
        a3 = *(_QWORD *)(a3 + 8);
      }
    }
  }
}

{
  __ZN4llvm21SymbolTableListTraitsINS_14GlobalVariableEE21transferNodesFromListERS2_NS_14ilist_iteratorINS_12ilist_detail12node_optionsIS1_Lb0ELb0EvEELb0ELb0EEES8_(a1, a2, a3, a4);
}

void llvm::SymbolTableListTraits<llvm::GlobalAlias>::addNodeToList(uint64_t a1, uint64_t a2)
{
  llvm::ValueSymbolTable *v2;

  *(_QWORD *)(a2 + 40) = a1 - 40;
  if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
  {
    v2 = *(llvm::ValueSymbolTable **)(a1 + 72);
    if (v2)
      llvm::ValueSymbolTable::reinsertValue(v2, (llvm::Value *)a2);
  }
}

{
  __ZN4llvm21SymbolTableListTraitsINS_11GlobalAliasEE13addNodeToListEPS1_(a1, a2);
}

int32x2_t llvm::SymbolTableListTraits<llvm::GlobalAlias>::removeNodeFromList(uint64_t a1, llvm::Value *this)
{
  uint64_t *v2;
  size_t *ValueName;
  int32x2_t result;

  *((_QWORD *)this + 5) = 0;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v2 = *(uint64_t **)(a1 + 72);
    if (v2)
    {
      ValueName = (size_t *)llvm::Value::getValueName(this);
      return llvm::ValueSymbolTable::removeValueName(v2, ValueName);
    }
  }
  return result;
}

{
  return __ZN4llvm21SymbolTableListTraitsINS_11GlobalAliasEE18removeNodeFromListEPS1_(a1, this);
}

void llvm::SymbolTableListTraits<llvm::GlobalIFunc>::addNodeToList(uint64_t a1, uint64_t a2)
{
  llvm::ValueSymbolTable *v2;

  *(_QWORD *)(a2 + 40) = a1 - 56;
  if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
  {
    v2 = *(llvm::ValueSymbolTable **)(a1 + 56);
    if (v2)
      llvm::ValueSymbolTable::reinsertValue(v2, (llvm::Value *)a2);
  }
}

{
  __ZN4llvm21SymbolTableListTraitsINS_11GlobalIFuncEE13addNodeToListEPS1_(a1, a2);
}

int32x2_t llvm::SymbolTableListTraits<llvm::GlobalIFunc>::removeNodeFromList(uint64_t a1, llvm::Value *this)
{
  uint64_t *v2;
  size_t *ValueName;
  int32x2_t result;

  *((_QWORD *)this + 5) = 0;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v2 = *(uint64_t **)(a1 + 56);
    if (v2)
    {
      ValueName = (size_t *)llvm::Value::getValueName(this);
      return llvm::ValueSymbolTable::removeValueName(v2, ValueName);
    }
  }
  return result;
}

{
  return __ZN4llvm21SymbolTableListTraitsINS_11GlobalIFuncEE18removeNodeFromListEPS1_(a1, this);
}

llvm::UndefValue *llvm::Module::getOrInsertGlobal(uint64_t a1, unsigned __int8 *a2, unint64_t a3, llvm::PointerType *a4)
{
  _QWORD v5[3];
  llvm::PointerType *v6;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v5[0] = a1;
  v5[1] = &v6;
  v5[2] = v7;
  v6 = a4;
  return llvm::Module::getOrInsertGlobal(a1, a2, a3, a4, sub_1C541FDF4, (uint64_t)v5);
}

uint64_t llvm::Module::getNamedAlias(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t result;

  result = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), a2, a3);
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 1)
      return 0;
  }
  return result;
}

uint64_t llvm::Module::getOrInsertModuleFlagsMetadata(llvm::Module *this)
{
  return llvm::Module::getOrInsertNamedMetadata((uint64_t)this, "llvm.module.flags", 0x11uLL);
}

_QWORD *llvm::Module::addModuleFlag(uint64_t **a1, llvm::Value *a2, unsigned __int8 *a3, size_t a4, llvm::ValueAsMetadata *this)
{
  _QWORD *v9;

  v9 = llvm::ValueAsMetadata::get(this, a2);
  return llvm::Module::addModuleFlag(a1, a2, a3, a4, (uint64_t)v9);
}

void llvm::Module::setModuleFlag(uint64_t **a1, llvm::Type *a2, void *a3, size_t a4, llvm::Metadata *a5)
{
  uint64_t inserted;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::MDNode *v15;
  uint64_t *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  inserted = llvm::Module::getOrInsertNamedMetadata((uint64_t)a1, "llvm.module.flags", 0x11uLL);
  v11 = *(unsigned int *)(*(_QWORD *)(inserted + 48) + 8);
  if ((_DWORD)v11)
  {
    v12 = inserted;
    v13 = 0;
    v14 = 8 * v11;
    while (1)
    {
      v15 = *(llvm::MDNode **)(**(_QWORD **)(v12 + 48) + v13);
      v20 = 0;
      if (llvm::Module::isValidModuleFlag((uint64_t)v15, &v21, &v20, &v19))
      {
        v16 = *(uint64_t **)(v20 + 8);
        v18 = *v16;
        v17 = v16 + 3;
        if (v18 == a4 && (!a4 || !memcmp(v17, a3, a4)))
          break;
      }
      v13 += 8;
      if (v14 == v13)
        goto LABEL_8;
    }
    llvm::MDNode::replaceOperandWith(v15, 2, a5);
  }
  else
  {
LABEL_8:
    llvm::Module::addModuleFlag(a1, a2, (unsigned __int8 *)a3, a4, (uint64_t)a5);
  }
}

uint64_t llvm::Module::materialize@<X0>(llvm::Module *this@<X0>, llvm::GlobalValue *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;

  result = *((_QWORD *)this + 20);
  if (result)
    return (*(uint64_t (**)(uint64_t, llvm::GlobalValue *))(*(_QWORD *)result + 16))(result, a2);
  *a3 = 0;
  return result;
}

uint64_t llvm::Module::getInstructionCount(llvm::Module *this)
{
  char *v1;
  char *v2;
  uint64_t v3;
  llvm::Function *v4;

  v1 = (char *)this + 24;
  v2 = (char *)*((_QWORD *)this + 4);
  if (v2 == (char *)this + 24)
    return 0;
  LODWORD(v3) = 0;
  do
  {
    if (v2)
      v4 = (llvm::Function *)(v2 - 56);
    else
      v4 = 0;
    v3 = llvm::Function::getInstructionCount(v4) + v3;
    v2 = (char *)*((_QWORD *)v2 + 1);
  }
  while (v2 != v1);
  return v3;
}

size_t *llvm::Module::getOrInsertComdat(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v5;
  size_t *v6;
  size_t *result;
  _QWORD v8[3];
  void *v9;
  unsigned __int8 *v10;
  size_t v11;
  _QWORD v12[3];
  void *v13;

  v5 = a1 + 120;
  llvm::Comdat::Comdat((llvm::Comdat *)v8);
  v10 = a2;
  v11 = a3;
  llvm::Comdat::Comdat((uint64_t)v12, (uint64_t)v8);
  v6 = *sub_1C6244CFC(v5, v10, v11, (uint64_t)v12);
  if (v13 != (void *)v12[2])
    free(v13);
  if (v9 != (void *)v8[2])
    free(v9);
  result = v6 + 1;
  v6[1] = (size_t)v6;
  return result;
}

_QWORD *llvm::Module::setPICLevel(uint64_t **a1, llvm::Type *a2)
{
  return llvm::Module::addModuleFlag(a1, (llvm::Type *)7, "PIC Level", 9uLL, a2);
}

_QWORD *llvm::Module::setPIELevel(uint64_t **a1, llvm::Type *a2)
{
  return llvm::Module::addModuleFlag(a1, (llvm::Type *)7, "PIE Level", 9uLL, a2);
}

_QWORD *llvm::Module::setCodeModel(uint64_t **a1, llvm::Type *a2)
{
  return llvm::Module::addModuleFlag(a1, (llvm::Type *)1, "Code Model", 0xAuLL, a2);
}

void llvm::Module::setProfileSummary(uint64_t **a1, llvm::Metadata *a2, int a3)
{
  BOOL v3;
  char *v4;
  size_t v5;

  v3 = a3 == 1;
  if (a3 == 1)
    v4 = "CSProfileSummary";
  else
    v4 = "ProfileSummary";
  if (v3)
    v5 = 16;
  else
    v5 = 14;
  llvm::Module::setModuleFlag(a1, (llvm::Type *)1, v4, v5, a2);
}

_QWORD *llvm::Module::setSemanticInterposition(uint64_t **this, llvm::Type *a2)
{
  return llvm::Module::addModuleFlag(this, (llvm::Type *)1, "SemanticInterposition", 0x15uLL, a2);
}

uint64_t llvm::Module::setOwnedMemoryBuffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *llvm::Module::setRtLibUseGOT(uint64_t **this)
{
  return llvm::Module::addModuleFlag(this, (llvm::Type *)7, "RtLibUseGOT", 0xBuLL, (llvm::Type *)1);
}

_QWORD *llvm::Module::setUwtable(uint64_t **a1, llvm::Type *a2)
{
  return llvm::Module::addModuleFlag(a1, (llvm::Type *)7, "uwtable", 7uLL, a2);
}

_QWORD *llvm::Module::setFramePointer(uint64_t **a1, llvm::Type *a2)
{
  return llvm::Module::addModuleFlag(a1, (llvm::Type *)7, "frame-pointer", 0xDuLL, a2);
}

uint64_t llvm::Module::getStackProtectorGuard(llvm::Module *this)
{
  uint64_t result;

  result = llvm::Module::getModuleFlag((uint64_t)this, "stack-protector-guard", 0x15uLL);
  if (result)
  {
    if (*(_BYTE *)result)
      return 0;
    else
      return *(_QWORD *)(result + 8) + 24;
  }
  return result;
}

_QWORD *llvm::Module::setStackProtectorGuard(uint64_t **a1, unsigned __int8 *a2, size_t a3)
{
  _QWORD *v4;

  v4 = llvm::MDString::get(*a1, a2, a3);
  return llvm::Module::addModuleFlag(a1, (llvm::Type *)1, "stack-protector-guard", 0x15uLL, (uint64_t)v4);
}

_QWORD *llvm::Module::setStackProtectorGuardReg(uint64_t **a1, unsigned __int8 *a2, size_t a3)
{
  _QWORD *v4;

  v4 = llvm::MDString::get(*a1, a2, a3);
  return llvm::Module::addModuleFlag(a1, (llvm::Type *)1, "stack-protector-guard-reg", 0x19uLL, (uint64_t)v4);
}

_QWORD *llvm::Module::setStackProtectorGuardOffset(uint64_t **this, llvm::Type *a2)
{
  return llvm::Module::addModuleFlag(this, (llvm::Type *)1, "stack-protector-guard-offset", 0x1CuLL, a2);
}

_QWORD *llvm::Module::setOverrideStackAlignment(uint64_t **this, llvm::Type *a2)
{
  return llvm::Module::addModuleFlag(this, (llvm::Type *)1, "override-stack-alignment", 0x18uLL, a2);
}

void llvm::Module::setSDKVersion(uint64_t **this, const llvm::VersionTuple *a2)
{
  sub_1C541EDC8(*(_QWORD *)a2, *((_QWORD *)a2 + 1), this, "SDK Version", 0xBuLL);
}

_QWORD *llvm::Module::setPtrAuthABIVersion(uint64_t **a1, unint64_t a2)
{
  llvm::Type *v4;
  llvm::ValueHandleBase *v5;
  llvm::Value *v6;
  _QWORD *v7;
  llvm::LLVMContext *v8;
  llvm::ConstantInt **Int1Ty;
  llvm::ValueHandleBase *v10;
  llvm::Value *v11;
  uint64_t Impl;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::Type *)*a1;
  v5 = llvm::ConstantInt::get((llvm::ConstantInt **)(**a1 + 1960), (int)a2, 0);
  v7 = llvm::ValueAsMetadata::get(v5, v6);
  Int1Ty = (llvm::ConstantInt **)llvm::Type::getInt1Ty(v4, v8);
  v10 = llvm::ConstantInt::get(Int1Ty, HIDWORD(a2) & 1, 0);
  v14[0] = v7;
  v14[1] = llvm::ValueAsMetadata::get(v10, v11);
  v14[0] = llvm::MDTuple::getImpl((uint64_t *)v4, v14, 2, 0, 1);
  Impl = llvm::MDTuple::getImpl((uint64_t *)v4, v14, 1, 0, 1);
  return llvm::Module::addModuleFlag(a1, (llvm::Type *)6, "ptrauth.abi-version", 0x13uLL, Impl);
}

_QWORD *llvm::Module::setDarwinTargetVariantTriple(uint64_t **a1, unsigned __int8 *a2, size_t a3)
{
  _QWORD *v4;

  v4 = llvm::MDString::get(*a1, a2, a3);
  return llvm::Module::addModuleFlag(a1, (llvm::Type *)4, "darwin.target_variant.triple", 0x1CuLL, (uint64_t)v4);
}

void llvm::Module::setDarwinTargetVariantSDKVersion(uint64_t **a1, uint64_t a2, int a3)
{
  sub_1C541EDC8(a2, a3, a1, "darwin.target_variant.SDK Version", 0x21uLL);
}

uint64_t sub_1C6244944(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  result = sub_1C62449EC(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *(_DWORD *)a3, *(_QWORD *)(a3 + 8), &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = sub_1C6244AE8(a2, a3, v12);
    v9 = result;
    *(_DWORD *)result = *(_DWORD *)a3;
    *(_QWORD *)(result + 8) = *(_QWORD *)(a3 + 8);
    *(_DWORD *)(result + 16) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_1C62449EC(uint64_t a1, int a2, int a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  int *v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  int *v16;
  int v17;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)(37 * a3) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (int *)(a1 + 24 * v9);
    v11 = *v10;
    v12 = *((_QWORD *)v10 + 1);
    if (*v10 == a3 && v12 == a4)
    {
      v14 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v11 != -1 || v12 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v12 == -8192;
        if (v18 && v11 == -2)
          v16 = v10;
        v20 = v9 + v17++;
        v9 = v20 & v8;
        v10 = (int *)(a1 + 24 * (v20 & v8));
        v11 = *v10;
        v12 = *((_QWORD *)v10 + 1);
        v14 = 1;
        if (*v10 == a3 && v12 == a4)
          goto LABEL_8;
      }
      v14 = 0;
      if (v16)
        v10 = v16;
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

uint64_t sub_1C6244AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_8;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_8:
    sub_1C541FFCC(a1, v6);
    v8 = 0;
    sub_1C62449EC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_DWORD *)a2, *(_QWORD *)(a2 + 8), &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)a3 != -1 || *(_QWORD *)(a3 + 8) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C6244BA8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = xmmword_1C8650FB0;
      v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_DWORD *)a2;
    v10 = *(_QWORD *)(a2 + 8);
    if ((*(_DWORD *)a2 != -1 || v10 != -4096) && (v9 != -2 || v10 != -8192))
    {
      v12 = 0;
      result = sub_1C62449EC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v12);
      v11 = v12;
      *v12 = *(_DWORD *)a2;
      *((_QWORD *)v11 + 1) = *(_QWORD *)(a2 + 8);
      v11[4] = *(_DWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_1C6244C84(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  v4 = sub_1C62449EC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_DWORD *)a2, *(_QWORD *)(a2 + 8), &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6244AE8(a1, a2, v7);
    *(_DWORD *)v5 = *(_DWORD *)a2;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(v5 + 16) = 0;
  }
  return v5;
}

size_t **sub_1C6244CFC(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4)
{
  uint64_t v8;
  size_t **i;
  size_t *v10;
  size_t *v11;
  _QWORD *v12;
  size_t *v13;
  char *v14;

  v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  i = (size_t **)(*(_QWORD *)a1 + 8 * v8);
  v10 = *i;
  if (*i == (size_t *)-8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v10)
  {
    while (!v10 || v10 == (size_t *)-8)
    {
      v11 = i[1];
      ++i;
      v10 = v11;
    }
    return i;
  }
  v12 = operator new(a3 + 73, (std::align_val_t)8uLL);
  v13 = v12;
  v14 = (char *)(v12 + 9);
  if (a3)
    memcpy(v12 + 9, a2, a3);
  v14[a3] = 0;
  *v13 = a3;
  llvm::Comdat::Comdat((uint64_t)(v13 + 1), a4);
  *i = v13;
  ++*(_DWORD *)(a1 + 12);
  for (i = (size_t **)(*(_QWORD *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
        !*i || *i + 1 == 0;
  return i;
}

uint64_t llvm::ValueInfo::isDSOLocal(llvm::ValueInfo *this, int a2)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;

  v2 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFF8;
  v3 = *(uint64_t **)(v2 + 24);
  v4 = *(uint64_t **)(v2 + 32);
  if (a2)
  {
    if (v4 != v3)
      return HIBYTE(*(unsigned __int16 *)(*v3 + 12)) & 1;
    return 0;
  }
  v6 = (char *)v4 - (char *)v3;
  if (!v6)
    return 0;
  v7 = (v6 & 0xFFFFFFFFFFFFFFF8) - 8;
  do
  {
    v8 = *v3++;
    v9 = *(unsigned __int16 *)(v8 + 12);
    result = (v9 >> 8) & 1;
    if ((v9 & 0x100) == 0)
      break;
    v10 = v7;
    v7 -= 8;
  }
  while (v10);
  return result;
}

unint64_t llvm::FunctionSummary::specialRefCounts(llvm::FunctionSummary *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;

  v1 = *((_QWORD *)this + 5);
  v2 = (unint64_t)(*((_QWORD *)this + 6) - v1) >> 3;
  if ((int)v2 - 1 < 0)
  {
    v2 = 0;
LABEL_7:
    v6 = 0;
  }
  else
  {
    v3 = 0;
    v4 = (unint64_t)(*((_QWORD *)this + 6) - v1) >> 3;
    while (1)
    {
      v5 = v4 - 1;
      if ((*(_QWORD *)(v1 + 8 * (v4 - 1)) & 4) == 0)
        break;
      v3 = (v3 + 1);
      LODWORD(v4) = v4 - 1;
      if (!(_DWORD)v4)
        goto LABEL_7;
    }
    v6 = 0;
    if ((int)v4 - 1 >= 0)
    {
      while ((*(_QWORD *)(v1 + 8 * v5) & 2) != 0)
      {
        ++v6;
        if (--v5 == -1)
        {
          v2 = v3;
          v6 = v4;
          return v6 | (v2 << 32);
        }
      }
    }
    v2 = v3;
  }
  return v6 | (v2 << 32);
}

uint64_t llvm::ModuleSummaryIndex::getFlags(llvm::ModuleSummaryIndex *this)
{
  uint64_t v1;

  v1 = *((unsigned __int8 *)this + 128);
  if (*((_BYTE *)this + 132))
    v1 |= 2uLL;
  if (*((_BYTE *)this + 131))
    v1 |= 4uLL;
  if (*((_BYTE *)this + 134))
    v1 |= 8uLL;
  if (*((_BYTE *)this + 135))
    v1 |= 0x10uLL;
  if (*((_BYTE *)this + 129))
    v1 |= 0x20uLL;
  if (*((_BYTE *)this + 130))
    return v1 | 0x40;
  else
    return v1;
}

_BYTE *llvm::ModuleSummaryIndex::setFlags(_BYTE *this, char a2)
{
  if ((a2 & 1) != 0)
    this[128] = 1;
  if ((a2 & 2) != 0)
    this[132] = 1;
  if ((a2 & 4) != 0)
    this[131] = 1;
  if ((a2 & 8) != 0)
    this[134] = 1;
  if ((a2 & 0x10) != 0)
    this[135] = 1;
  if ((a2 & 0x20) != 0)
    this[129] = 1;
  if ((a2 & 0x40) != 0)
    this[130] = 1;
  return this;
}

uint64_t llvm::ModuleSummaryIndex::getGlobalValueSummary(llvm::ModuleSummaryIndex *this, unint64_t a2)
{
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  char *v9;

  v4 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (char *)this + 8;
  v3 = v4;
  if (!v4)
    goto LABEL_12;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = (char *)v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v2 || *((_QWORD *)v5 + 4) > a2)
LABEL_12:
    v5 = v2;
  if (v5 == v2)
    v9 = 0;
  else
    v9 = v5 + 32;
  return **(_QWORD **)(((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8) + 24);
}

void sub_1C624501C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;

  if (a2)
  {
    v2 = 32 * a2;
    v3 = (_QWORD *)(a1 + 16);
    do
    {
      if (*(v3 - 2) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v4 = (void *)*(v3 - 1);
        if (v4)
        {
          *v3 = v4;
          operator delete(v4);
        }
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
}

void sub_1C6245068(_QWORD *a1)
{
  if (a1)
  {
    sub_1C6245068(*a1);
    sub_1C6245068(a1[1]);
    sub_1C6143384((_QWORD *)a1[7]);
    operator delete(a1);
  }
}

_OWORD *sub_1C62450A8(uint64_t a1, uint64_t a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = (void **)sub_1C54232F8(a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v8 = v5;
    v6 = operator new(0x48uLL);
    v6[2] = **a3;
    *((_QWORD *)v6 + 8) = 0;
    *((_QWORD *)v6 + 7) = 0;
    *((_QWORD *)v6 + 6) = (char *)v6 + 56;
    v9 = v12;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v9;
    *v8 = v6;
    v10 = **(_QWORD **)a1;
    v11 = (uint64_t *)v6;
    if (v10)
    {
      *(_QWORD *)a1 = v10;
      v11 = (uint64_t *)*v8;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v11);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

uint64_t sub_1C624515C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;

  v9 = *(_QWORD *)a2;
  v10 = 0;
  result = sub_1C6245320(a1, &v9, &v10, (uint64_t)&v7);
  if (v8)
  {
    v5 = v7;
    v6 = *(_QWORD *)(a1 + 32);
    if (v6 >= *(_QWORD *)(a1 + 40))
    {
      result = (uint64_t)sub_1C5424F20((char **)(a1 + 24), a2);
    }
    else
    {
      *(_QWORD *)v6 = *(_QWORD *)a2;
      *(_DWORD *)(v6 + 16) = *(_DWORD *)(a2 + 16);
      *(_QWORD *)(v6 + 8) = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 16) = 0;
      result = v6 + 24;
    }
    *(_QWORD *)(a1 + 32) = result;
    *(_DWORD *)(v5 + 8) = -1431655765 * ((unint64_t)(result - *(_QWORD *)(a1 + 24)) >> 3) - 1;
  }
  return result;
}

uint64_t sub_1C6245218(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;

  v18 = *a2;
  v19 = 0;
  sub_1C6245320(a1, &v18, &v19, (uint64_t)&v16);
  v4 = v16;
  if (v17)
  {
    v5 = (uint64_t *)(a1 + 24);
    v6 = *a2;
    v15 = 1;
    v13 = v6;
    v14 = 0;
    v7 = *(_QWORD *)(a1 + 32);
    if (v7 >= *(_QWORD *)(a1 + 40))
    {
      v8 = sub_1C5424F20((char **)(a1 + 24), (uint64_t)&v13);
      v12 = v15;
      *(_QWORD *)(a1 + 32) = v8;
      if (v12 >= 0x41 && v14)
      {
        MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
        v8 = *(char **)(a1 + 32);
      }
    }
    else
    {
      *(_DWORD *)(v7 + 16) = 1;
      *(_QWORD *)v7 = v6;
      *(_QWORD *)(v7 + 8) = 0;
      v8 = (char *)(v7 + 24);
      *(_QWORD *)(a1 + 32) = v7 + 24;
    }
    v9 = *v5;
    v10 = -1431655765 * ((unint64_t)&v8[-*v5] >> 3) - 1;
    *(_DWORD *)(v4 + 8) = v10;
  }
  else
  {
    v10 = *(_DWORD *)(v16 + 8);
    v9 = *(_QWORD *)(a1 + 24);
  }
  return v9 + 24 * v10 + 8;
}

uint64_t sub_1C6245320@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C4DA97DC((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C4E38190(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_1C62453B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 24;
      *(_QWORD *)(a1 + 16) = v2 - 24;
      if (*(_DWORD *)(v2 - 8) >= 0x41u)
      {
        v5 = *(_QWORD *)(v2 - 16);
        if (v5)
        {
          MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
          v4 = *(_QWORD *)(a1 + 16);
        }
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL llvm::OptBisect::shouldRunPass(llvm *a1, uint64_t a2, const void *a3, size_t a4)
{
  const void *v7;
  size_t v8;

  v7 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  return llvm::OptBisect::checkPass(a1, v7, v8, a3, a4);
}

BOOL llvm::OptBisect::checkPass(llvm *a1, const void *a2, size_t a3, const void *a4, size_t a5)
{
  int v9;
  uint64_t v10;
  unint64_t v11;
  _BOOL8 v13;
  size_t v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  _DWORD *v17;
  const char *v18;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  llvm::raw_ostream *v21;
  llvm::raw_ostream *v22;
  void *v23;
  llvm::raw_ostream *v24;
  void *v25;

  v9 = *((_DWORD *)a1 + 2);
  v10 = *((int *)a1 + 3);
  v11 = v10 + 1;
  *((_DWORD *)a1 + 3) = v10 + 1;
  v13 = v9 == -1 || (int)v10 < v9;
  if (v13)
    v14 = 0;
  else
    v14 = 4;
  v15 = (llvm::raw_ostream *)llvm::errs(a1);
  v16 = sub_1C4816AD8(v15, "BISECT: ");
  v17 = (_DWORD *)*((_QWORD *)v16 + 4);
  if (v14 <= *((_QWORD *)v16 + 3) - (_QWORD)v17)
  {
    if (!v13)
    {
      *v17 = 542396238;
      *((_QWORD *)v16 + 4) += 4;
    }
  }
  else
  {
    if (v13)
      v18 = (const char *)&unk_1C8712E8A;
    else
      v18 = "NOT ";
    v16 = llvm::raw_ostream::write(v16, v18, v14);
  }
  v19 = sub_1C4816AD8(v16, "running pass ");
  v20 = sub_1C4816AD8(v19, "(");
  v21 = llvm::raw_ostream::operator<<(v20, v11);
  v22 = sub_1C4816AD8(v21, ") ");
  v23 = (void *)*((_QWORD *)v22 + 4);
  if (a3 <= *((_QWORD *)v22 + 3) - (_QWORD)v23)
  {
    if (a3)
    {
      memcpy(v23, a2, a3);
      *((_QWORD *)v22 + 4) += a3;
    }
  }
  else
  {
    llvm::raw_ostream::write(v22, (const char *)a2, a3);
  }
  v24 = sub_1C4816AD8(v22, " on ");
  v25 = (void *)*((_QWORD *)v24 + 4);
  if (a5 <= *((_QWORD *)v24 + 3) - (_QWORD)v25)
  {
    if (a5)
    {
      memcpy(v25, a4, a5);
      *((_QWORD *)v24 + 4) += a5;
    }
  }
  else
  {
    llvm::raw_ostream::write(v24, (const char *)a4, a5);
  }
  sub_1C4816AD8(v24, "\n");
  return v13;
}

void sub_1C6245624()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6245638(_WORD *a1, int **a2, _WORD *a3, _QWORD *a4, __n128 *a5)
{
  sub_1C47AD050((uint64_t)&qword_1ED804980, 0, 0);
  dword_1ED804A00 = 0;
  qword_1ED804A08 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED804A10 = 0;
  qword_1ED804980 = (uint64_t)&unk_1E819E418;
  qword_1ED804A18 = (uint64_t)&unk_1E819E230;
  qword_1ED804A20[0] = (uint64_t)&off_1E7FA9D80;
  qword_1ED804A38 = (uint64_t)qword_1ED804A20;
  sub_1C62456EC(a1, a2, a3, a4, a5);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED804980);
}

__n128 sub_1C62456EC(_WORD *a1, int **a2, _WORD *a3, _QWORD *a4, __n128 *a5)
{
  int *v10;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED804980, "opt-bisect-limit", 0x10uLL);
  word_1ED80498A = word_1ED80498A & 0xFF9F | (32 * (*a1 & 3));
  v10 = *a2;
  dword_1ED804A00 = **a2;
  byte_1ED804A14 = 1;
  dword_1ED804A10 = *v10;
  word_1ED80498A = word_1ED80498A & 0xFFF8 | *a3 & 7;
  sub_1C5425124(a4);
  result = *a5;
  xmmword_1ED8049A0 = (__int128)*a5;
  return result;
}

_QWORD *sub_1C624578C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void (**v5)(_QWORD *);
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v8 = v7;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v7);
    }
    else
    {
      v8 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_1C48C35D8(v7, a1);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = (void (**)(_QWORD *))(v7[0] + 32);
    v4 = v7;
  }
  else
  {
    if (!v8)
      return a1;
    v5 = (void (**)(_QWORD *))(*v8 + 40);
  }
  (*v5)(v4);
  return a1;
}

_QWORD *sub_1C624586C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E8168970;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_1C62458C8(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E8168970;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6245934(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_1E8168970;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    }
    else
    {
      v2[4] = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
    }
  }
  else
  {
    v2[4] = 0;
  }
  return v2;
}

uint64_t sub_1C62459B0(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_1E8168970;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

_QWORD *sub_1C6245A24(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1C6245A58(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_4;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_4:
  operator delete(a1);
}

uint64_t sub_1C6245AA8(uint64_t a1, int *a2)
{
  uint64_t v2;
  llvm::Pass *v4;
  int v5;

  v5 = *a2;
  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
  {
    sub_1C485C2F0();
    llvm::Pass::~Pass(v4);
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v2 + 48))(v2, &v5);
}

uint64_t llvm::ModulePass::createPrinterPass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::createPrintModulePass(a2, a3, 0);
}

llvm::raw_ostream *llvm::Pass::dumpPassStructure(llvm::Pass *this, int a2)
{
  llvm *v4;
  llvm::raw_ostream *v5;
  size_t v6;
  const void *v7;
  size_t v8;
  void *v9;

  v4 = llvm::dbgs(this);
  v5 = llvm::raw_ostream::indent(v4, 2 * a2);
  v7 = (const void *)(*(uint64_t (**)(llvm::Pass *))(*(_QWORD *)this + 16))(this);
  v8 = v6;
  v9 = (void *)*((_QWORD *)v5 + 4);
  if (v6 <= *((_QWORD *)v5 + 3) - (_QWORD)v9)
  {
    if (v6)
    {
      memcpy(v9, v7, v6);
      *((_QWORD *)v5 + 4) += v8;
    }
  }
  else
  {
    llvm::raw_ostream::write(v5, (const char *)v7, v6);
  }
  return sub_1C4816AD8(v5, "\n");
}

llvm::raw_ostream *sub_1C6245B98(llvm::raw_ostream *this, const void *a2, size_t a3)
{
  void *v5;
  uint64_t v6;

  v6 = *((_QWORD *)this + 3);
  v5 = (void *)*((_QWORD *)this + 4);
  if (a3 <= v6 - (uint64_t)v5)
  {
    if (a3)
    {
      memcpy(v5, a2, a3);
      *((_QWORD *)this + 4) += a3;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, (const char *)a2, a3);
  }
  return this;
}

uint64_t llvm::Pass::getPotentialPassManagerType(llvm::Pass *this)
{
  return 0;
}

llvm::raw_ostream *llvm::Pass::print(llvm::Pass *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  llvm::raw_ostream *v4;
  size_t v5;
  const void *v6;
  size_t v7;
  void *v8;

  v4 = sub_1C4816AD8(a2, "Pass::print not implemented for pass: '");
  v6 = (const void *)(*(uint64_t (**)(llvm::Pass *))(*(_QWORD *)this + 16))(this);
  v7 = v5;
  v8 = (void *)*((_QWORD *)v4 + 4);
  if (v5 <= *((_QWORD *)v4 + 3) - (_QWORD)v8)
  {
    if (v5)
    {
      memcpy(v8, v6, v5);
      *((_QWORD *)v4 + 4) += v7;
    }
  }
  else
  {
    llvm::raw_ostream::write(v4, (const char *)v6, v5);
  }
  return sub_1C4816AD8(v4, "'!\n");
}

uint64_t llvm::Pass::dump(llvm::Pass *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return (*(uint64_t (**)(llvm::Pass *, llvm *, _QWORD))(*(_QWORD *)this + 40))(this, v2, 0);
}

uint64_t llvm::FunctionPass::createPrinterPass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::createPrintFunctionPass(a2, a3);
}

uint64_t llvm::Pass::lookupPassInfo(llvm::Pass *this, const void *a2)
{
  llvm::Pass *v2;

  v2 = this;
  if (!atomic_load(qword_1ED830BC0))
  {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
    v2 = this;
  }
  return llvm::PassRegistry::getPassInfo((std::__shared_mutex_base *)qword_1ED830BC0[0], v2);
}

uint64_t llvm::PassInstrumentationCallbacks::getPassNameForClassName(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  _QWORD *v3;

  v3 = sub_1C5426790((llvm::StringMapImpl *)(a1 + 1296), a2, a3);
  if (*(char *)(*v3 + 31) >= 0)
    return *v3 + 8;
  else
    return *(_QWORD *)(*v3 + 8);
}

llvm::raw_ostream *llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::printPipeline(llvm::raw_ostream *result, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  llvm::raw_ostream *v8;
  uint64_t v9;
  unint64_t v10;

  v4 = *((_QWORD *)result + 1) - *(_QWORD *)result;
  if ((v4 & 0x7FFFFFFF8) != 0)
  {
    v8 = result;
    v9 = 0;
    v10 = (v4 >> 3);
    do
    {
      result = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD, llvm::raw_ostream *, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)v8 + 8 * v9) + 24))(*(_QWORD *)(*(_QWORD *)v8 + 8 * v9), a2, a3, a4);
      if (++v9 < v10)
        result = sub_1C4816AD8(a2, ",");
    }
    while (v10 != v9);
  }
  return result;
}

{
  return __ZN4llvm11PassManagerINS_6ModuleENS_15AnalysisManagerIS1_JEEEJEE13printPipelineERNS_11raw_ostreamENS_12function_refIFNS_9StringRefES8_EEE(result, a2, a3, a4);
}

llvm::raw_ostream *llvm::PassManager<llvm::Function,llvm::AnalysisManager<llvm::Function>>::printPipeline(llvm::raw_ostream *result, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  llvm::raw_ostream *v8;
  uint64_t v9;
  unint64_t v10;

  v4 = *((_QWORD *)result + 1) - *(_QWORD *)result;
  if ((v4 & 0x7FFFFFFF8) != 0)
  {
    v8 = result;
    v9 = 0;
    v10 = (v4 >> 3);
    do
    {
      result = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD, llvm::raw_ostream *, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)v8 + 8 * v9) + 24))(*(_QWORD *)(*(_QWORD *)v8 + 8 * v9), a2, a3, a4);
      if (++v9 < v10)
        result = sub_1C4816AD8(a2, ",");
    }
    while (v10 != v9);
  }
  return result;
}

{
  return __ZN4llvm11PassManagerINS_8FunctionENS_15AnalysisManagerIS1_JEEEJEE13printPipelineERNS_11raw_ostreamENS_12function_refIFNS_9StringRefES8_EEE(result, a2, a3, a4);
}

int32x2_t sub_1C6245EC8(uint64_t a1, _QWORD *a2)
{
  int32x2_t result;
  _QWORD *v4;
  _QWORD *v5;

  v5 = 0;
  if (sub_1C4DD9B30((uint64_t *)a1, a2, &v5))
  {
    v4 = v5;
    sub_1C4D8B4AC(v5 + 1);
    *v4 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

llvm::raw_ostream *llvm::ModuleToFunctionPassAdaptor::printPipeline(_BYTE *a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  sub_1C4816AD8(a2, "function");
  if (a1[8])
    sub_1C4816AD8(a2, "<eager-inv>");
  sub_1C4816AD8(a2, "(");
  (*(void (**)(_QWORD, llvm::raw_ostream *, uint64_t, uint64_t))(**(_QWORD **)a1 + 24))(*(_QWORD *)a1, a2, a3, a4);
  return sub_1C4816AD8(a2, ")");
}

uint64_t llvm::PassRegistry::getPassInfo(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  int Key;
  uint64_t v7;

  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)a1);
  Key = llvm::StringMapImpl::FindKey((uint64_t *)(a1 + 200), a2, a3);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 208))
    v7 = 0;
  else
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * Key) + 8);
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
  return v7;
}

double sub_1C624602C()
{
  uint64_t v0;
  std::__shared_mutex_base *v1;
  double result;

  v0 = operator new();
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_QWORD *)(v0 + 272) = 0;
  v1 = std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)v0);
  v1[1].__mut_.__m_.__sig = 0;
  *(_QWORD *)v1[1].__mut_.__m_.__opaque = 0;
  *(_DWORD *)&v1[1].__mut_.__m_.__opaque[16] = 0;
  *(_QWORD *)&v1[1].__mut_.__m_.__opaque[8] = 0;
  *(_QWORD *)&v1[1].__mut_.__m_.__opaque[24] = 0;
  *(_QWORD *)&v1[1].__mut_.__m_.__opaque[32] = 0;
  *(_QWORD *)&v1[1].__mut_.__m_.__opaque[40] = 0x1000000000;
  result = 0.0;
  *(_OWORD *)&v1[1].__gate1_.__cv_.__opaque[8] = 0u;
  *(_OWORD *)&v1[1].__gate1_.__cv_.__sig = 0u;
  *(_OWORD *)&v1[1].__gate1_.__cv_.__opaque[24] = 0u;
  return result;
}

llvm::PassRegistry *sub_1C62460B0(llvm::PassRegistry *result)
{
  if (result)
  {
    llvm::PassRegistry::~PassRegistry(result);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

void llvm::TimePassesHandler::print(llvm::TimePassesHandler *this)
{
  llvm::raw_ostream *v1;
  llvm::raw_ostream *v2;
  llvm::raw_ostream *v4;

  if (*((_BYTE *)this + 216))
  {
    v1 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
    if (v1)
    {
      llvm::TimerGroup::print(this, v1, 1);
    }
    else
    {
      llvm::CreateInfoOutputFile((uint64_t *)&v4);
      v2 = v4;
      llvm::TimerGroup::print(this, v4, 1);
      (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
}

llvm *llvm::TimePassesHandler::dump(uint64_t **this)
{
  llvm *v2;
  llvm::raw_ostream *v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  const char *v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  llvm *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  unint64_t v21;
  llvm *v22;
  llvm::raw_ostream *v23;
  llvm::raw_ostream *v24;
  llvm::raw_ostream *v25;
  void *v26;
  llvm::raw_ostream *v27;
  llvm::raw_ostream *v28;
  uint64_t v29;
  BOOL v30;
  llvm *v31;
  llvm *result;
  uint64_t v33;
  uint64_t *i;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  unint64_t v40;
  llvm *v41;
  llvm::raw_ostream *v42;
  llvm::raw_ostream *v43;
  llvm::raw_ostream *v44;
  void *v45;
  llvm::raw_ostream *v46;
  llvm::raw_ostream *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  unint64_t v53;

  v2 = llvm::dbgs((llvm *)this);
  v3 = sub_1C4816AD8(v2, "Dumping timers for ");
  v52 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::TimePassesHandler]";
  v53 = 73;
  v4 = llvm::StringRef::find((uint64_t *)&v52, "DesiredTypeName = ", 0x12uLL, 0);
  if (v53 >= v4)
    v5 = v4;
  else
    v5 = v53;
  v6 = &v52[v5];
  v7 = v53 - v5;
  if (v53 - v5 >= 0x12)
    v8 = 18;
  else
    v8 = v53 - v5;
  v9 = &v6[v8];
  v10 = v7 - v8;
  if (v10 >= v10 - 1)
    v11 = v10 - 1;
  else
    v11 = v10;
  v12 = (void *)*((_QWORD *)v3 + 4);
  if (v11 <= *((_QWORD *)v3 + 3) - (_QWORD)v12)
  {
    if (v11)
    {
      memcpy(v12, v9, v11);
      *((_QWORD *)v3 + 4) += v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(v3, v9, v11);
  }
  v13 = sub_1C4816AD8(v3, ":\n\tRunning:\n");
  v14 = *((unsigned int *)this + 26);
  v15 = this[12];
  if ((_DWORD)v14)
  {
    while (!*v15 || *v15 == -8)
      ++v15;
  }
  v50 = (uint64_t)&this[12][v14];
  if (v15 != (uint64_t *)v50)
  {
    v17 = *v15;
    do
    {
      v18 = *(unsigned int *)(v17 + 16);
      if ((_DWORD)v18)
      {
        v19 = 0;
        v20 = *(_QWORD *)v17;
        do
        {
          v21 = *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v19);
          if (v21 && *(_BYTE *)(v21 + 128))
          {
            v22 = llvm::dbgs(v13);
            v23 = sub_1C4816AD8(v22, "\tTimer ");
            v24 = llvm::raw_ostream::operator<<(v23, v21);
            v25 = sub_1C4816AD8(v24, " for pass ");
            v26 = (void *)*((_QWORD *)v25 + 4);
            if (v20 <= *((_QWORD *)v25 + 3) - (_QWORD)v26)
            {
              if (v20)
              {
                memcpy(v26, (const void *)(v17 + 56), v20);
                *((_QWORD *)v25 + 4) += v20;
              }
            }
            else
            {
              llvm::raw_ostream::write(v25, (const char *)(v17 + 56), v20);
            }
            v27 = sub_1C4816AD8(v25, "(");
            v28 = llvm::raw_ostream::operator<<(v27, v19);
            v13 = sub_1C4816AD8(v28, ")\n");
            v18 = *(unsigned int *)(v17 + 16);
          }
          ++v19;
        }
        while (v19 < v18);
      }
      do
      {
        v29 = v15[1];
        ++v15;
        v17 = v29;
        if (v29)
          v30 = v17 == -8;
        else
          v30 = 1;
      }
      while (v30);
    }
    while (v15 != (uint64_t *)v50);
  }
  v31 = llvm::dbgs(v13);
  result = sub_1C4816AD8(v31, "\tTriggered:\n");
  v33 = *((unsigned int *)this + 26);
  if ((_DWORD)v33)
  {
    for (i = this[12]; !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = this[12];
  }
  v51 = (uint64_t)&this[12][v33];
  if (i != (uint64_t *)v51)
  {
    v36 = *i;
    do
    {
      v37 = *(unsigned int *)(v36 + 16);
      if ((_DWORD)v37)
      {
        v38 = 0;
        v39 = *(_QWORD *)v36;
        do
        {
          v40 = *(_QWORD *)(*(_QWORD *)(v36 + 8) + 8 * v38);
          if (v40 && *(_BYTE *)(v40 + 129) && !*(_BYTE *)(v40 + 128))
          {
            v41 = llvm::dbgs(result);
            v42 = sub_1C4816AD8(v41, "\tTimer ");
            v43 = llvm::raw_ostream::operator<<(v42, v40);
            v44 = sub_1C4816AD8(v43, " for pass ");
            v45 = (void *)*((_QWORD *)v44 + 4);
            if (v39 <= *((_QWORD *)v44 + 3) - (_QWORD)v45)
            {
              if (v39)
              {
                memcpy(v45, (const void *)(v36 + 56), v39);
                *((_QWORD *)v44 + 4) += v39;
              }
            }
            else
            {
              llvm::raw_ostream::write(v44, (const char *)(v36 + 56), v39);
            }
            v46 = sub_1C4816AD8(v44, "(");
            v47 = llvm::raw_ostream::operator<<(v46, v38);
            result = sub_1C4816AD8(v47, ")\n");
            v37 = *(unsigned int *)(v36 + 16);
          }
          ++v38;
        }
        while (v38 < v37);
      }
      do
      {
        v48 = i[1];
        ++i;
        v36 = v48;
        if (v48)
          v49 = v36 == -8;
        else
          v49 = 1;
      }
      while (v49);
    }
    while (i != (uint64_t *)v51);
  }
  return result;
}

double llvm::TimePassesHandler::startTimer(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  llvm::Timer *PassTimer;
  double result;
  uint64_t v6;

  PassTimer = (llvm::Timer *)llvm::TimePassesHandler::getPassTimer((unsigned __int8 *)a1, a2, a3);
  v6 = *(unsigned int *)(a1 + 136);
  if (v6 >= *(_DWORD *)(a1 + 140))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 128, a1 + 144, v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 136);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v6) = PassTimer;
  ++*(_DWORD *)(a1 + 136);
  if (!*((_BYTE *)PassTimer + 128))
    return llvm::Timer::startTimer(PassTimer);
  return result;
}

double llvm::TimePassesHandler::runBeforePass(uint64_t a1, char *a2, size_t a3)
{
  char isSpecialPass;
  double result;
  void *__p[3];
  _OWORD v9[3];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9[0] = xmmword_1E8168D78;
  v9[1] = *(_OWORD *)&off_1E8168D88;
  v9[2] = xmmword_1E8168D98;
  sub_1C542BA30(__p, v9, 3uLL);
  isSpecialPass = llvm::isSpecialPass(a2, a3, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((isSpecialPass & 1) == 0)
    return llvm::TimePassesHandler::startTimer(a1, (unsigned __int8 *)a2, a3);
  return result;
}

void llvm::TimePassesHandler::runAfterPass(uint64_t a1, char *a2, size_t a3)
{
  char isSpecialPass;
  uint64_t v7;
  llvm::Timer *v8;
  void *__p[3];
  _OWORD v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10[0] = xmmword_1E8168D78;
  v10[1] = *(_OWORD *)&off_1E8168D88;
  v10[2] = xmmword_1E8168D98;
  sub_1C542BA30(__p, v10, 3uLL);
  isSpecialPass = llvm::isSpecialPass(a2, a3, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((isSpecialPass & 1) == 0)
  {
    v7 = *(unsigned int *)(a1 + 136);
    v8 = *(llvm::Timer **)(*(_QWORD *)(a1 + 128) + 8 * v7 - 8);
    *(_DWORD *)(a1 + 136) = v7 - 1;
    if (*((_BYTE *)v8 + 128))
      llvm::Timer::stopTimer(v8);
  }
}

unsigned int *sub_1C624675C(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int **v5;
  uint64_t v6;

  v1 = result;
  v2 = result[2];
  if (v2 || result[3])
  {
    v3 = result[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
      return (unsigned int *)sub_1C542B718(result);
    if (!(_DWORD)v3)
    {
LABEL_13:
      *((_QWORD *)v1 + 1) = 0;
      return result;
    }
    v4 = 16 * v3;
    v5 = (unsigned int **)(*(_QWORD *)result + 8);
    while (1)
    {
      v6 = (uint64_t)*(v5 - 1);
      if (v6 == -8192)
        goto LABEL_11;
      if (v6 != -4096)
        break;
LABEL_12:
      v5 += 2;
      v4 -= 16;
      if (!v4)
        goto LABEL_13;
    }
    result = *v5;
    *v5 = 0;
    if (result)
    {
      llvm::Timer::~Timer((llvm::Timer *)result);
      result = (unsigned int *)MEMORY[0x1CAA32FC0]();
    }
LABEL_11:
    *(v5 - 1) = (unsigned int *)-4096;
    goto LABEL_12;
  }
  return result;
}

unsigned int *sub_1C624681C(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int **v3;

  v1 = result[4];
  if ((_DWORD)v1)
  {
    v2 = 16 * v1;
    v3 = (unsigned int **)(*(_QWORD *)result + 8);
    do
    {
      if (((unint64_t)*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        result = *v3;
        *v3 = 0;
        if (result)
        {
          llvm::Timer::~Timer((llvm::Timer *)result);
          result = (unsigned int *)MEMORY[0x1CAA32FC0]();
        }
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1C6246890()
{
  uint64_t v0;
  uint64_t result;

  v0 = operator new();
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)(v0 + 64) = 0;
  result = MEMORY[0x1CAA32CE4]();
  *(_DWORD *)(result + 64) = 0;
  return result;
}

std::recursive_mutex *sub_1C62468D0(std::recursive_mutex *result)
{
  if (result)
  {
    std::recursive_mutex::~recursive_mutex(result);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

_QWORD *sub_1C62468FC(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C61252B8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C624695C((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C624695C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C542B828(a1, v7);
  v9 = 0;
  sub_1C61252B8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C6246A08(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      sub_1C61252B8((uint64_t *)v5, a2, &v11);
      v9 = v11;
      *v11 = *a2;
      v10 = a2[1];
      a2[1] = 0;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
      result = a2[1];
      a2[1] = 0;
      if (result)
      {
        llvm::Timer::~Timer((llvm::Timer *)result);
        result = MEMORY[0x1CAA32FC0]();
      }
    }
    a2 += 2;
  }
  return result;
}

void sub_1C6246AEC(_BYTE **a1, _WORD *a2, __n128 *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED804A40, 0, 0);
  byte_1ED804AD1 = 0;
  qword_1ED804AC0 = 0;
  unk_1ED804AC8 = &off_1E7F9E8D8;
  qword_1ED804A40 = (uint64_t)&unk_1E8138EB8;
  qword_1ED804AD8 = (uint64_t)&off_1E819E9A0;
  qword_1ED804AE0 = (uint64_t)&unk_1E8138F20;
  qword_1ED804AF8 = (uint64_t)&qword_1ED804AE0;
  sub_1C6246B90(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED804A40);
}

__n128 sub_1C6246B90(_BYTE **a1, _WORD *a2, __n128 *a3)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED804A40, "time-passes", 0xBuLL);
  sub_1C4EB7838((llvm *)&qword_1ED804AC0, &qword_1ED804A40, *a1);
  word_1ED804A4A = (32 * (*a2 & 3)) | word_1ED804A4A & 0xFF9F;
  result = *a3;
  xmmword_1ED804A60 = (__int128)*a3;
  return result;
}

void sub_1C6246C08(_BYTE **a1, _WORD *a2, __int128 *a3, _QWORD *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED804B00, 0, 0);
  byte_1ED804B91 = 0;
  qword_1ED804B80 = 0;
  unk_1ED804B88 = &off_1E7F9E8D8;
  qword_1ED804B00 = (uint64_t)&unk_1E8138EB8;
  qword_1ED804B98 = (uint64_t)&off_1E819E9A0;
  qword_1ED804BA0[0] = (uint64_t)&unk_1E8138F20;
  qword_1ED804BB8 = (uint64_t)qword_1ED804BA0;
  sub_1C6246CBC(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED804B00);
}

_QWORD *sub_1C6246CBC(_BYTE **a1, _WORD *a2, __int128 *a3, _QWORD *a4)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED804B00, "time-passes-per-run", 0x13uLL);
  sub_1C4EB7838((llvm *)&qword_1ED804B80, &qword_1ED804B00, *a1);
  word_1ED804B0A = (32 * (*a2 & 3)) | word_1ED804B0A & 0xFF9F;
  xmmword_1ED804B20 = *a3;
  return sub_1C6246D44(a4);
}

_QWORD *sub_1C6246D44(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t (**v3)(_QWORD *);
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = (_QWORD *)a1[3];
  if (v1)
  {
    if (v1 == a1)
    {
      v5 = v4;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v4);
    }
    else
    {
      v5 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v1 + 16))(a1[3]);
    }
  }
  else
  {
    v5 = 0;
  }
  sub_1C4D7BD48(qword_1ED804BA0, v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = (uint64_t (**)(_QWORD *))(v4[0] + 32);
    result = v4;
    return (_QWORD *)(*v3)(result);
  }
  if (v5)
  {
    v3 = (uint64_t (**)(_QWORD *))(*v5 + 40);
    return (_QWORD *)(*v3)(result);
  }
  return result;
}

void sub_1C6246E1C()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C6246E30(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1C542B944(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

void sub_1C6246E38()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C6246E4C(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1C61B7B28(*(unsigned int **)(a1 + 8), a2, a3, a4);
}

size_t **sub_1C6246E54(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6;
  size_t **i;
  size_t *v8;
  size_t *v9;
  _QWORD *v11;
  size_t *v12;
  char *v13;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  i = (size_t **)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == (size_t *)-8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == (size_t *)-8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  v11 = operator new(a3 + 57, (std::align_val_t)8uLL);
  v12 = v11;
  v13 = (char *)(v11 + 7);
  if (a3)
    memcpy(v11 + 7, a2, a3);
  v13[a3] = 0;
  *v12 = a3;
  v12[1] = (size_t)(v12 + 3);
  v12[2] = 0x400000000;
  *i = v12;
  ++*(_DWORD *)(a1 + 12);
  for (i = (size_t **)(*(_QWORD *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i + 1 == 0;
  return i;
}

void sub_1C6246F50(unsigned int *a1, _QWORD *a2)
{
  _QWORD *v4;
  unsigned int v5;
  unint64_t v6;

  v6 = 0;
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, 0, 8, &v6);
  v4[a1[2]] = *a2;
  sub_1C6246FD8(a1, v4);
  v5 = v6;
  if (*(unsigned int **)a1 != a1 + 4)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  ++a1[2];
  a1[3] = v5;
}

unsigned int *sub_1C6246FD8(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result[2];
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)result;
    v4 = 8 * v2;
    v5 = 8 * v2;
    do
    {
      v6 = *v3;
      *v3++ = 0;
      *a2++ = v6;
      v5 -= 8;
    }
    while (v5);
    v7 = *(_QWORD *)result - 8;
    do
    {
      result = *(unsigned int **)(v7 + v4);
      *(_QWORD *)(v7 + v4) = 0;
      if (result)
      {
        llvm::Timer::~Timer((llvm::Timer *)result);
        result = (unsigned int *)MEMORY[0x1CAA32FC0]();
      }
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

BOOL llvm::shouldPrintBeforeSomePass(llvm *this)
{
  BOOL v1;

  if (byte_1ED830E48)
    v1 = 0;
  else
    v1 = qword_1ED830C98 == unk_1ED830CA0;
  return !v1;
}

BOOL llvm::shouldPrintAfterSomePass(llvm *this)
{
  BOOL v1;

  if (byte_1ED830F08)
    v1 = 0;
  else
    v1 = qword_1ED830D70 == unk_1ED830D78;
  return !v1;
}

uint64_t llvm::shouldPrintBeforeAll(llvm *this)
{
  return byte_1ED830E48;
}

uint64_t llvm::shouldPrintAfterAll(llvm *this)
{
  return byte_1ED830F08;
}

_QWORD *llvm::printBeforePasses@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return sub_1C484333C(a1, qword_1ED830C98, qword_1ED830CA0, 0xAAAAAAAAAAAAAAABLL * ((qword_1ED830CA0 - qword_1ED830C98) >> 3));
}

_QWORD *llvm::printAfterPasses@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return sub_1C484333C(a1, qword_1ED830D70, qword_1ED830D78, 0xAAAAAAAAAAAAAAABLL * ((qword_1ED830D78 - qword_1ED830D70) >> 3));
}

uint64_t llvm::forcePrintModuleIR(llvm *this)
{
  return byte_1ED830FC8;
}

void sub_1C6247118(__int128 *a1, _WORD *a2, _WORD *a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED830C18, 1, 0);
  qword_1ED830C98 = 0;
  unk_1ED830CA0 = 0;
  qword_1ED830CA8 = 0;
  unk_1ED830CB0 = 0;
  qword_1ED830C18 = (uint64_t)&unk_1E81409D8;
  qword_1ED830CB8 = 0;
  unk_1ED830CC0 = 0;
  qword_1ED830CC8 = (uint64_t)&unk_1E819E970;
  qword_1ED830CD0 = (uint64_t)&unk_1E81415E0;
  qword_1ED830CE8 = (uint64_t)&qword_1ED830CD0;
  llvm::cl::Option::setArgStr(v6, "print-before", 0xCuLL);
  xmmword_1ED830C38 = *a1;
  word_1ED830C22 |= (*a2 & 0x1F) << 9;
  word_1ED830C22 = (32 * (*a3 & 3)) | word_1ED830C22 & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED830C18);
}

void sub_1C62471E4(__int128 *a1, _WORD *a2, _WORD *a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED830CF0, 1, 0);
  qword_1ED830D70 = 0;
  unk_1ED830D78 = 0;
  qword_1ED830D80 = 0;
  unk_1ED830D88 = 0;
  qword_1ED830CF0 = (uint64_t)&unk_1E81409D8;
  qword_1ED830D90 = 0;
  unk_1ED830D98 = 0;
  qword_1ED830DA0 = (uint64_t)&unk_1E819E970;
  qword_1ED830DA8 = (uint64_t)&unk_1E81415E0;
  qword_1ED830DC0 = (uint64_t)&qword_1ED830DA8;
  llvm::cl::Option::setArgStr(v6, "print-after", 0xBuLL);
  xmmword_1ED830D10 = *a1;
  word_1ED830CFA |= (*a2 & 0x1F) << 9;
  word_1ED830CFA = (32 * (*a3 & 3)) | word_1ED830CFA & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED830CF0);
}

void sub_1C62472B0(__int128 *a1, __n128 *a2, _WORD *a3, _WORD *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED831008, 1, 0);
  qword_1ED831088 = 0;
  unk_1ED831090 = 0;
  qword_1ED831098 = 0;
  unk_1ED8310A0 = 0;
  qword_1ED831008 = (uint64_t)&unk_1E81409D8;
  qword_1ED8310A8 = 0;
  unk_1ED8310B0 = 0;
  qword_1ED8310B8 = (uint64_t)&unk_1E819E970;
  qword_1ED8310C0 = (uint64_t)&unk_1E81415E0;
  qword_1ED8310D8 = (uint64_t)&qword_1ED8310C0;
  sub_1C624735C(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED831008);
}

__n128 sub_1C624735C(__int128 *a1, __n128 *a2, _WORD *a3, _WORD *a4)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED831008, "filter-print-funcs", 0x12uLL);
  xmmword_1ED831038 = *a1;
  result = *a2;
  xmmword_1ED831028 = (__int128)*a2;
  word_1ED831012 |= (*a3 & 0x1F) << 9;
  word_1ED831012 = (32 * (*a4 & 3)) | word_1ED831012 & 0xFF9F;
  return result;
}

_QWORD *llvm::SafepointIRVerifierPass::run@<X0>(llvm *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[2];
  int v9;
  __int128 v10;
  _QWORD v11[7];

  v5 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a1) + 8;
  v7 = 0;
  v8[0] = 0;
  v9 = 0;
  v8[1] = 0;
  v10 = 0u;
  memset(v11, 0, 28);
  memset(&v11[4], 0, 24);
  sub_1C542C884(&v7, (uint64_t)a1, v5);
  sub_1C542CEE0(a1, v5, (uint64_t)&v7);
  llvm::InstCountPass::run(a3);
  sub_1C6176BF8(&v11[1]);
  return sub_1C6176BF8(v8);
}

void llvm::initializeSafepointIRVerifierPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED804C88);
  if (v2 != -1)
  {
    v5[0] = sub_1C542E9AC;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED804C88, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

_QWORD *sub_1C6247500(_QWORD *result, llvm::Instruction *this, unsigned int a3, uint64_t a4, int a5)
{
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t Successor;
  _QWORD v12[2];
  char v13;

  v6 = a3;
  if (a3 != a5)
  {
    v8 = (uint64_t)result;
    do
    {
      Successor = llvm::Instruction::getSuccessor(this, v6);
      result = (_QWORD *)sub_1C614F72C(v8, &Successor, (uint64_t)v12);
      if (v13)
      {
        v9 = llvm::Instruction::getSuccessor(this, v6);
        v12[0] = v9;
        v10 = *(uint64_t **)(v8 + 32);
        if ((unint64_t)v10 >= *(_QWORD *)(v8 + 40))
        {
          result = sub_1C4DFEA3C((void **)(v8 + 24), v12);
        }
        else
        {
          *v10 = v9;
          result = v10 + 1;
        }
        *(_QWORD *)(v8 + 32) = result;
      }
      ++v6;
    }
    while (a5 != v6);
  }
  return result;
}

_QWORD *sub_1C62475B0(_QWORD *a1)
{
  MEMORY[0x1CAA32FB4](a1[6], 8);
  MEMORY[0x1CAA32FB4](a1[3], 8);
  MEMORY[0x1CAA32FB4](*a1, 8);
  return a1;
}

void sub_1C62475F4(char **a1)
{
  uint64_t v2;
  char *v3;

  v2 = sub_1C47AD050((uint64_t)qword_1ED804BC0, 0, 0);
  byte_1ED804C40 = 0;
  qword_1ED804C48 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED804C50 = 0;
  qword_1ED804BC0[0] = (uint64_t)&unk_1E819E898;
  qword_1ED804C58 = (uint64_t)&off_1E819E9A0;
  qword_1ED804C60 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED804C78 = (uint64_t)&qword_1ED804C60;
  llvm::cl::Option::setArgStr(v2, "safepoint-ir-verifier-print-only", 0x20uLL);
  v3 = *a1;
  byte_1ED804C40 = **a1;
  byte_1ED804C51 = 1;
  byte_1ED804C50 = *v3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED804BC0);
}

uint64_t llvm::ProfileSummary::getDetailedSummaryMD(llvm::ProfileSummary *this, llvm::LLVMContext *a2)
{
  uint64_t Int32Ty;
  unsigned int *v5;
  unsigned int *v6;
  llvm::ConstantInt *v7;
  llvm::ConstantInt *v8;
  llvm::Value **v9;
  llvm::Value *v10;
  llvm::Value **v11;
  llvm::Value *v12;
  llvm::Value **v13;
  llvm::Value *v14;
  uint64_t Impl;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  void *__p;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  __p = 0;
  v22 = 0;
  v23 = 0;
  Int32Ty = llvm::Type::getInt32Ty(a2, a2);
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  if (v5 != v6)
  {
    v7 = (llvm::ConstantInt *)Int32Ty;
    v8 = (llvm::ConstantInt *)(*(_QWORD *)a2 + 1984);
    do
    {
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v9 = llvm::ConstantInt::get(v7, *v5, 0);
      v24 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v9, v10);
      v11 = llvm::ConstantInt::get(v8, *((_QWORD *)v5 + 1), 0);
      v25 = (uint64_t)llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v11, v12);
      v13 = llvm::ConstantInt::get(v7, *((_QWORD *)v5 + 2), 0);
      v26 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v13, v14);
      Impl = llvm::MDTuple::getImpl((uint64_t *)a2, &v24, 3, 0, 1);
      v20 = Impl;
      v16 = v22;
      if ((unint64_t)v22 >= v23)
      {
        v17 = (char *)sub_1C4DFEA3C(&__p, &v20);
      }
      else
      {
        *(_QWORD *)v22 = Impl;
        v17 = v16 + 8;
      }
      v22 = v17;
      v5 += 6;
    }
    while (v5 != v6);
  }
  v24 = llvm::MDString::get((uint64_t *)a2, "DetailedSummary", 0xFuLL);
  v25 = llvm::MDTuple::getImpl((uint64_t *)a2, __p, (v22 - (_BYTE *)__p) >> 3, 0, 1);
  v18 = llvm::MDTuple::getImpl((uint64_t *)a2, &v24, 2, 0, 1);
  if (__p)
  {
    v22 = (char *)__p;
    operator delete(__p);
  }
  return v18;
}

uint64_t llvm::ProfileSummary::getMD(llvm::ProfileSummary *this, llvm::LLVMContext *a2, int a3, int a4)
{
  char *v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  llvm::LLVMContext *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  double v25;
  llvm::ConstantFP **DoubleTy;
  llvm::Type *v27;
  llvm::APFloatBase *v28;
  llvm::Value *v29;
  uint64_t Impl;
  unsigned int v31;
  uint64_t DetailedSummaryMD;
  unsigned int v33;
  uint64_t v34;
  void *v36;
  uint64_t v37;
  _QWORD v38[16];
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v36 = v38;
  v37 = 0x1000000000;
  v8 = off_1E8168EF0[*(unsigned int *)this];
  v39 = llvm::MDString::get((uint64_t *)a2, "ProfileFormat", 0xDuLL);
  v9 = strlen(v8);
  v40 = llvm::MDString::get((uint64_t *)a2, (unsigned __int8 *)v8, v9);
  v38[0] = llvm::MDTuple::getImpl((uint64_t *)a2, &v39, 2, 0, 1);
  LODWORD(v37) = 1;
  v10 = sub_1C542F700((uint64_t *)a2, "TotalCount", *((_QWORD *)this + 4));
  v11 = v37;
  if (v37 >= HIDWORD(v37))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)v38, v37 + 1, 8);
    v11 = v37;
  }
  *((_QWORD *)v36 + v11) = v10;
  LODWORD(v37) = v37 + 1;
  v12 = sub_1C542F700((uint64_t *)a2, "MaxCount", *((_QWORD *)this + 5));
  v13 = v37;
  if (v37 >= HIDWORD(v37))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)v38, v37 + 1, 8);
    v13 = v37;
  }
  *((_QWORD *)v36 + v13) = v12;
  LODWORD(v37) = v37 + 1;
  v14 = sub_1C542F700((uint64_t *)a2, "MaxInternalCount", *((_QWORD *)this + 6));
  v15 = v37;
  if (v37 >= HIDWORD(v37))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)v38, v37 + 1, 8);
    v15 = v37;
  }
  *((_QWORD *)v36 + v15) = v14;
  LODWORD(v37) = v37 + 1;
  v16 = sub_1C542F700((uint64_t *)a2, "MaxFunctionCount", *((_QWORD *)this + 7));
  v17 = v37;
  if (v37 >= HIDWORD(v37))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)v38, v37 + 1, 8);
    v17 = v37;
  }
  *((_QWORD *)v36 + v17) = v16;
  LODWORD(v37) = v37 + 1;
  v18 = sub_1C542F700((uint64_t *)a2, "NumCounts", *((unsigned int *)this + 16));
  v19 = v37;
  if (v37 >= HIDWORD(v37))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)v38, v37 + 1, 8);
    v19 = v37;
  }
  *((_QWORD *)v36 + v19) = v18;
  LODWORD(v37) = v37 + 1;
  v21 = sub_1C542F700((uint64_t *)a2, "NumFunctions", *((unsigned int *)this + 17));
  v22 = v37;
  if (v37 >= HIDWORD(v37))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)v38, v37 + 1, 8);
    v22 = v37;
  }
  *((_QWORD *)v36 + v22) = v21;
  LODWORD(v37) = v37 + 1;
  if (a3)
  {
    v23 = sub_1C542F700((uint64_t *)a2, "IsPartialProfile", *((unsigned __int8 *)this + 72));
    v24 = v37;
    if (v37 >= HIDWORD(v37))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)v38, v37 + 1, 8);
      v24 = v37;
    }
    *((_QWORD *)v36 + v24) = v23;
    LODWORD(v37) = v37 + 1;
  }
  if (a4)
  {
    v25 = *((double *)this + 10);
    DoubleTy = (llvm::ConstantFP **)llvm::Type::getDoubleTy(a2, v20);
    v39 = llvm::MDString::get((uint64_t *)a2, "PartialProfileRatio", 0x13uLL);
    v28 = llvm::ConstantFP::get(DoubleTy, v27, v25);
    v40 = llvm::ValueAsMetadata::get(v28, v29);
    Impl = llvm::MDTuple::getImpl((uint64_t *)a2, &v39, 2, 0, 1);
    v31 = v37;
    if (v37 >= HIDWORD(v37))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)v38, v37 + 1, 8);
      v31 = v37;
    }
    *((_QWORD *)v36 + v31) = Impl;
    LODWORD(v37) = v37 + 1;
  }
  DetailedSummaryMD = llvm::ProfileSummary::getDetailedSummaryMD(this, a2);
  v33 = v37;
  if (v37 >= HIDWORD(v37))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)v38, v37 + 1, 8);
    v33 = v37;
  }
  *((_QWORD *)v36 + v33) = DetailedSummaryMD;
  LODWORD(v37) = v37 + 1;
  v34 = llvm::MDTuple::getImpl((uint64_t *)a2, v36, v37, 0, 1);
  if (v36 != v38)
    free(v36);
  return v34;
}

uint64_t sub_1C6247CC8(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(float *)(a1 + 16));
}

BOOL llvm::isStatepointDirectiveAttr(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return llvm::Attribute::hasAttribute(&v2, "statepoint-id", 13)
      || llvm::Attribute::hasAttribute(&v2, "statepoint-num-patch-bytes", 26);
}

uint64_t llvm::Type::getBFloatTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1648;
}

uint64_t llvm::Type::getDoubleTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1696;
}

uint64_t llvm::Type::getX86_FP80Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1768;
}

uint64_t llvm::Type::getFP128Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1792;
}

uint64_t llvm::Type::getX86_MMXTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1840;
}

uint64_t llvm::Type::getX86_AMXTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1864;
}

uint64_t llvm::Type::getTokenTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1744;
}

BOOL llvm::Type::isIEEE(llvm::Type *this)
{
  void *FltSemantics;
  _BOOL8 v2;
  _BYTE v4[8];
  uint64_t v5[4];

  v5[3] = *MEMORY[0x1E0C80C00];
  FltSemantics = llvm::Type::getFltSemantics(this);
  sub_1C47A8E34(v5, (uint64_t)FltSemantics);
  sub_1C5381EF4((llvm::detail::DoubleAPFloat *)v4, 0);
  v2 = v5[0] != (_QWORD)&unk_1C866F1C0;
  sub_1C47A8258(v5);
  return v2;
}

uint64_t llvm::Type::getInt128Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 2008;
}

uint64_t llvm::Type::getIntNPtrTy(llvm::Type *this, llvm::LLVMContext *a2, llvm::Type *a3)
{
  llvm::PointerType *v4;

  v4 = (llvm::PointerType *)llvm::IntegerType::get(this, a2);
  return llvm::PointerType::get(v4, a3);
}

uint64_t llvm::Type::getInt16PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)this + 1936), a2);
}

uint64_t llvm::Type::getInt64PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)this + 1984), a2);
}

BOOL llvm::FunctionType::isValidReturnType(llvm::FunctionType *this, llvm::Type *a2)
{
  int v2;

  v2 = *((unsigned __int8 *)this + 8);
  return v2 != 8 && v2 != 14 && v2 != 9;
}

unint64_t llvm::StructType::get(llvm::StructType *this, llvm::LLVMContext *a2)
{
  return llvm::StructType::get((uint64_t *)this, 0, 0, (int)a2);
}

unint64_t llvm::StructType::create(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, size_t a5, int a6)
{
  unint64_t v9;

  v9 = llvm::StructType::create(a1, a4, a5);
  llvm::StructType::setBody(v9, a2, a3, a6);
  return v9;
}

unint64_t llvm::StructType::create(_QWORD ***a1, uint64_t a2, unsigned __int8 *a3, size_t a4, int a5)
{
  unint64_t v8;

  v8 = llvm::StructType::create(**a1, a3, a4);
  llvm::StructType::setBody(v8, (uint64_t)a1, a2, a5);
  return v8;
}

BOOL llvm::StructType::isValidElementType(llvm::StructType *this, llvm::Type *a2)
{
  int v2;

  v2 = *((_DWORD *)this + 2);
  return ((v2 - 7) >= 8u || ((0x87u >> (v2 - 7)) & 1) == 0)
      && *((_DWORD *)this + 2) != 12;
}

double llvm::ScalableVectorType::get(uint64_t **this, llvm::Type *a2)
{
  int v2;
  uint64_t v4;
  _QWORD *v5;
  double result;
  unint64_t v7;
  _QWORD v8[2];

  v2 = (int)a2;
  v4 = **this;
  v8[0] = this;
  v8[1] = a2 | 0x100000000;
  v5 = sub_1C5435D6C((uint64_t *)(v4 + 2328), v8);
  if (!v5[2])
  {
    v7 = sub_1C484358C(v4 + 2040, 40, 3);
    *(_QWORD *)v7 = *this;
    *(_QWORD *)(v7 + 24) = this;
    *(_DWORD *)(v7 + 32) = v2;
    *(_QWORD *)(v7 + 16) = v7 + 24;
    *(_QWORD *)&result = 0x100000013;
    *(_QWORD *)(v7 + 8) = 0x100000013;
    v5[2] = v7;
  }
  return result;
}

unint64_t llvm::PointerType::get(llvm::PointerType *this, llvm::LLVMContext *a2)
{
  int v2;
  uint64_t v4;
  unint64_t *v5;
  unint64_t result;
  uint64_t v7;
  int v8;

  v2 = (int)a2;
  v4 = *(_QWORD *)this;
  v7 = 0;
  if ((_DWORD)a2)
  {
    v8 = (int)a2;
    v5 = (unint64_t *)(sub_1C543645C((uint64_t *)(v4 + 2376), (uint64_t)&v7) + 16);
  }
  else
  {
    v5 = sub_1C62483E0((uint64_t *)(v4 + 2352), &v7) + 1;
  }
  result = *v5;
  if (!*v5)
  {
    result = sub_1C484358C(v4 + 2040, 32, 3);
    *(_QWORD *)result = this;
    *(_QWORD *)(result + 20) = 0;
    *(_QWORD *)(result + 12) = 0;
    *(_DWORD *)(result + 28) = 0;
    *(_DWORD *)(result + 8) = (v2 << 8) | 0xF;
    *v5 = result;
  }
  return result;
}

uint64_t llvm::TargetExtType::TargetExtType(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t a4, uint64_t *a5, uint64_t a6, int *a7, uint64_t a8)
{
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 21;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = llvm::UniqueStringSaver::save(*a2 + 2136, a3, a4);
  *(_QWORD *)(a1 + 32) = v13;
  *(_DWORD *)(a1 + 12) = a6;
  v14 = (_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 16) = a1 + 48;
  if (a6)
  {
    v15 = 8 * a6;
    do
    {
      v16 = *a5++;
      *v14++ = v16;
      v15 -= 8;
    }
    while (v15);
  }
  *(_DWORD *)(a1 + 8) = *(unsigned __int8 *)(a1 + 8) | ((_DWORD)a8 << 8);
  *(_QWORD *)(a1 + 40) = v14;
  if (a8)
  {
    v17 = 4 * a8;
    do
    {
      v18 = *a7++;
      *(_DWORD *)v14 = v18;
      v14 = (_QWORD *)((char *)v14 + 4);
      v17 -= 4;
    }
    while (v17);
  }
  return a1;
}

uint64_t llvm::TargetExtType::get(_QWORD *a1, _QWORD *a2, size_t a3, uint64_t *a4, uint64_t a5, int *a6, uint64_t a7)
{
  unint64_t v14;
  uint64_t *v15;
  uint64_t result;
  unint64_t v17;
  _QWORD v18[6];
  uint64_t v19;
  uint64_t *v20;
  char v21;

  v18[0] = a2;
  v18[1] = a3;
  v18[2] = a4;
  v18[3] = a5;
  v18[4] = a6;
  v18[5] = a7;
  v14 = *a1 + 2280;
  v19 = 0;
  sub_1C624843C(v14, &v19, (uint64_t)v18, (uint64_t)&v20);
  v15 = v20;
  if (!v21)
    return *v20;
  v17 = sub_1C484358C(*a1 + 2040, 8 * a5 + 4 * a7 + 48, 3);
  result = llvm::TargetExtType::TargetExtType(v17, a1, a2, a3, a4, a5, a6, a7);
  *v15 = result;
  return result;
}

BOOL llvm::TargetExtType::hasProperty(llvm::TargetExtType *a1, int a2)
{
  int v3;

  llvm::TargetExtType::getLayoutType(a1);
  return (~v3 & a2) == 0;
}

unint64_t sub_1C6248280(unint64_t result, uint64_t *a2, uint64_t *a3)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C6248330(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

unint64_t sub_1C6248330(unint64_t result, int a2, uint64_t *a3, _QWORD *a4)
{
  unint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;

  if (a2)
  {
    v7 = result;
    result = sub_1C54358A4(*a3);
    v8 = a2 - 1;
    v9 = result & (a2 - 1);
    v10 = (_QWORD *)(v7 + 8 * v9);
    v11 = *v10;
    if (*a3 != *v10)
    {
      v12 = 0;
      v13 = 1;
      while (v11 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -8192;
        if (v14)
          v12 = v10;
        v15 = v9 + v13++;
        v9 = v15 & v8;
        v10 = (_QWORD *)(v7 + 8 * (v15 & v8));
        v11 = *v10;
        if (*a3 == *v10)
          goto LABEL_3;
      }
      if (v12)
        v10 = v12;
    }
  }
  else
  {
    v10 = 0;
  }
LABEL_3:
  *a4 = v10;
  return result;
}

_QWORD *sub_1C62483E0(uint64_t *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4850EC8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C543632C((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1C624843C@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t *v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;

  v12 = 0;
  result = sub_1C62484C8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C624878C(a1, a3, v12);
    v9 = (uint64_t *)result;
    *(_QWORD *)result = *a2;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_1C62484C8(uint64_t a1, int a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v5;
  uint64_t result;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  int v15;
  _BOOL4 v16;

  if (a2)
  {
    v9 = a2 - 1;
    v10 = sub_1C6248608(a3) & (a2 - 1);
    v5 = (uint64_t *)(a1 + 8 * v10);
    v11 = *v5;
    if (sub_1C62485B4(a3, *v5))
    {
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      while (v11 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -8192;
        if (v14)
          v12 = v5;
        v15 = v13 + 1;
        v10 = (v10 + v13) & v9;
        v5 = (uint64_t *)(a1 + 8 * v10);
        v11 = *v5;
        v16 = sub_1C62485B4(a3, *v5);
        result = 1;
        v13 = v15;
        if (v16)
          goto LABEL_3;
      }
      result = 0;
      if (v12)
        v5 = v12;
    }
  }
  else
  {
    v5 = 0;
    result = 0;
  }
LABEL_3:
  *a4 = v5;
  return result;
}

BOOL sub_1C62485B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    return 0;
  v12 = v2;
  v13 = v3;
  v7 = *(_OWORD *)(a2 + 24);
  v6 = *(unsigned int *)(a2 + 8);
  v5 = *(unsigned int *)(a2 + 12);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = v5;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v6 >> 8;
  return sub_1C543699C(a1, (uint64_t)&v7);
}

unint64_t sub_1C6248608(uint64_t a1)
{
  unint64_t v3;
  unint64_t v4;

  v4 = sub_1C4F5AB38(*(_QWORD **)(a1 + 16), *(_QWORD *)(a1 + 16) + 8 * *(_QWORD *)(a1 + 24));
  v3 = sub_1C4F5AB38(*(_QWORD **)(a1 + 32), *(_QWORD *)(a1 + 32) + 4 * *(_QWORD *)(a1 + 40));
  return sub_1C6248660(a1, (uint64_t *)&v4, (uint64_t *)&v3);
}

unint64_t sub_1C6248660(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _OWORD v7[4];
  _OWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  v10 = sub_1C4D9B584();
  return sub_1C6248704((char *)v7, v7, (char *)v8, *(_QWORD **)a1, *(_QWORD *)(a1 + 8), a2, a3);
}

unint64_t sub_1C6248704(char *a1, _QWORD *a2, char *a3, _QWORD *a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v15 = 0;
  v12 = llvm::hash_value(a4, a5);
  v13 = sub_1C4E37644(a1, &v15, a2, (unint64_t)a3, v12);
  return sub_1C4E37B28(a1, v15, v13, a3, a6, a7);
}

uint64_t *sub_1C624878C(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5436A34(a1, v6);
  v8 = 0;
  sub_1C62484C8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

unint64_t sub_1C624883C(unint64_t result, uint64_t *a2, uint64_t *a3)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C62488EC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

unint64_t sub_1C62488EC(unint64_t result, int a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  if (a2)
  {
    v8 = result;
    v9 = *a3;
    v19 = *(_OWORD *)(*a3 + 24);
    v11 = *(unsigned int *)(v9 + 8);
    v10 = *(unsigned int *)(v9 + 12);
    v20 = *(_QWORD *)(v9 + 16);
    v21 = v10;
    v22 = *(_QWORD *)(v9 + 40);
    v23 = v11 >> 8;
    result = sub_1C6248608((uint64_t)&v19);
    v12 = a2 - 1;
    v13 = result & (a2 - 1);
    v5 = (_QWORD *)(v8 + 8 * v13);
    v14 = *v5;
    if (*a3 != *v5)
    {
      v15 = 0;
      v16 = 1;
      while (v14 != -4096)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v14 == -8192;
        if (v17)
          v15 = v5;
        v18 = v13 + v16++;
        v13 = v18 & v12;
        v5 = (_QWORD *)(v8 + 8 * (v18 & v12));
        v14 = *v5;
        if (*a3 == *v5)
          goto LABEL_3;
      }
      if (v15)
        v5 = v15;
    }
  }
  else
  {
    v5 = 0;
  }
LABEL_3:
  *a4 = v5;
  return result;
}

unint64_t llvm::TypedPointerType::get(uint64_t **this, llvm::Type *a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  _QWORD v7[2];

  v2 = (int)a2;
  v4 = **this;
  v7[0] = this;
  v7[1] = a2;
  v5 = sub_1C6248A54(v4 + 2400, (uint64_t)v7);
  result = *(_QWORD *)(v5 + 16);
  if (!result)
  {
    result = sub_1C484358C(v4 + 2040, 32, 3);
    *(_QWORD *)result = *this;
    *(_QWORD *)(result + 24) = this;
    *(_QWORD *)(result + 16) = result + 24;
    *(_DWORD *)(result + 8) = (v2 << 8) | 0x14;
    *(_DWORD *)(result + 12) = 1;
    *(_QWORD *)(v5 + 16) = result;
  }
  return result;
}

uint64_t sub_1C6248A54(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  v4 = sub_1C61802CC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)a2, *(_DWORD *)(a2 + 8), &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6248ACC(a1, a2, v7);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *(_DWORD *)(v5 + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)(v5 + 16) = 0;
  }
  return v5;
}

uint64_t sub_1C6248ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5436B74(a1, v6);
  v9 = 0;
  sub_1C61802CC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)a2, *(_DWORD *)(a2 + 8), &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a3 != -4096 || *(_DWORD *)(a3 + 8) != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C6248B88(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v13;
  _QWORD *v14;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = xmmword_1C85F22C0;
      v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    v10 = *(_DWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -4096 || v10 != -1) && (v9 != -8192 || v10 != -2))
    {
      v14 = 0;
      result = sub_1C61802CC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v14);
      v13 = v14;
      *v14 = *(_QWORD *)a2;
      *((_DWORD *)v13 + 2) = *(_DWORD *)(a2 + 8);
      v13[2] = *(_QWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t llvm::Value::getSingleUndroppableUse(llvm::Value *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v2 = 0;
    while (1)
    {
      v3 = *(_QWORD *)(v1 + 24);
      if (sub_1C4D9F8B4(v3) || sub_1C509DDB0(v3))
      {
        result = v2;
      }
      else
      {
        result = v1;
        if (v2)
          return 0;
      }
      v1 = *(_QWORD *)(v1 + 8);
      v2 = result;
      if (!v1)
        return result;
    }
  }
  return 0;
}

uint64_t llvm::Value::dropDroppableUsesIn(uint64_t this, llvm::User *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  llvm::Value *v5;
  uint64_t v6;

  v2 = this;
  v3 = *((_DWORD *)a2 + 5);
  if ((v3 & 0x40000000) != 0)
  {
    v5 = (llvm::Value *)*((_QWORD *)a2 - 1);
    v4 = v3 & 0x7FFFFFF;
  }
  else
  {
    v4 = v3 & 0x7FFFFFF;
    v5 = (llvm::User *)((char *)a2 - 32 * v4);
  }
  if (v4)
  {
    v6 = 32 * v4;
    do
    {
      if (*(_QWORD *)v5 == v2)
        this = llvm::Value::dropDroppableUse(v5, a2);
      v5 = (llvm::Value *)((char *)v5 + 32);
      v6 -= 32;
    }
    while (v6);
  }
  return this;
}

void llvm::Value::replaceNonMetadataUsesWith(llvm::Value *this, llvm::Value *a2)
{
  llvm::Value::doRAUW(this, a2, 0);
}

_QWORD *sub_1C6248D4C(unint64_t *a1, uint64_t a2)
{
  unsigned int v3;
  _QWORD *result;
  uint64_t v5;

  sub_1C5440668(a1, (_QWORD *)(*(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8) - 24));
  v3 = *(_DWORD *)(a2 + 8) - 1;
  *(_DWORD *)(a2 + 8) = v3;
  result = (_QWORD *)(*(_QWORD *)a2 + 24 * v3);
  v5 = result[2];
  if (v5 != -8192 && v5 != -4096 && v5 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList(result);
  return result;
}

void llvm::Value::replaceUsesOutsideBlock(llvm::Value *this, llvm::Value *a2, llvm::BasicBlock *a3)
{
  _QWORD *v6;
  uint64_t v7;
  llvm::DbgVariableIntrinsic **v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x600000000;
  llvm::findDbgUsers((uint64_t)&v9, (uint64_t)this);
  v6 = v9;
  if ((_DWORD)v10)
  {
    v8 = (llvm::DbgVariableIntrinsic **)v9;
    v7 = 8 * v10;
    do
    {
      if (*((llvm::BasicBlock **)*v8 + 5) != a3)
        llvm::DbgVariableIntrinsic::replaceVariableLocationOp(*v8, this, a2);
      ++v8;
      v7 -= 8;
    }
    while (v7);
    v6 = v9;
  }
  if (v6 != v11)
    free(v6);
  v9 = a3;
  llvm::Value::replaceUsesWithIf(this, a2, (unsigned int (*)(uint64_t, uint64_t))sub_1C5440844, (uint64_t)&v9);
}

BOOL llvm::Value::isTransitiveUsedByMetadataOnly(llvm::Value *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[33];

  v16[32] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 1);
  v14 = v16;
  v15 = 0x2000000000;
  sub_1C528A680((unsigned int *)&v14, v2, 0);
  sub_1C624920C((llvm::SmallPtrSetImplBase *)&v12, *((_QWORD *)this + 1), 0);
  v3 = v15;
  if ((_DWORD)v15)
  {
    do
    {
      v4 = *((_QWORD *)v14 + --v3);
      LODWORD(v15) = v3;
      v5 = *(unsigned __int8 *)(v4 + 16) - 4;
      v6 = v5 < 0x11;
      if (v5 > 0x10)
        break;
      v7 = *(_QWORD *)(v4 + 8);
      if (v7)
      {
        do
        {
          v8 = *(_QWORD *)(v7 + 24);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v12, v8);
          if (v9)
          {
            v10 = v15;
            if (v15 >= (unint64_t)HIDWORD(v15))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, (uint64_t)v16, v15 + 1, 8);
              v10 = v15;
            }
            *((_QWORD *)v14 + v10) = v8;
            LODWORD(v15) = v15 + 1;
          }
          v7 = *(_QWORD *)(v7 + 8);
        }
        while (v7);
        v3 = v15;
      }
    }
    while (v3);
  }
  else
  {
    v6 = 1;
  }
  if (v13 != v12)
    free(v13);
  if (v14 != v16)
    free(v14);
  return v6;
}

void sub_1C624902C(_WORD *a1, unsigned __int8 **a2, __int128 *a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED804C90, 0, 0);
  dword_1ED804D10 = 0;
  qword_1ED804D18 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED804D20 = 0;
  qword_1ED804C90 = (uint64_t)&unk_1E819E3B0;
  qword_1ED804D28 = (uint64_t)&unk_1E819E2C0;
  qword_1ED804D30 = (uint64_t)&off_1E7F95260;
  qword_1ED804D48 = (uint64_t)&qword_1ED804D30;
  llvm::cl::Option::setArgStr(v6, "use-dereferenceable-at-point-semantics", 0x26uLL);
  word_1ED804C9A = (32 * (*a1 & 3)) | word_1ED804C9A & 0xFF9F;
  dword_1ED804D10 = **a2;
  byte_1ED804D24 = 1;
  dword_1ED804D20 = dword_1ED804D10;
  xmmword_1ED804CB0 = *a3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED804C90);
}

void sub_1C6249108(uint64_t a1, unint64_t a2)
{
  unint64_t *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = (unint64_t *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 24, &v5);
  sub_1C6249174((unint64_t *)a1, v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

unint64_t *sub_1C6249174(unint64_t *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = (_QWORD *)*result;
    v6 = 24 * v2;
    do
    {
      result = sub_1C5440668(a2, v5);
      v5 += 3;
      a2 += 3;
      v6 -= 24;
    }
    while (v6);
    v7 = *((unsigned int *)v4 + 2);
    if ((_DWORD)v7)
    {
      v8 = *v4;
      v9 = 24 * v7;
      do
      {
        v10 = *(_QWORD *)(v8 + v9 - 8);
        if (v10 != -8192 && v10 != -4096 && v10 != 0)
          result = llvm::ValueHandleBase::RemoveFromUseList((_QWORD *)(v8 + v9 - 24));
        v9 -= 24;
      }
      while (v9);
    }
  }
  return result;
}

llvm::SmallPtrSetImplBase *sub_1C624920C(llvm::SmallPtrSetImplBase *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_QWORD *)this = (char *)this + 32;
  *((_QWORD *)this + 1) = (char *)this + 32;
  *((_QWORD *)this + 2) = 32;
  *((_DWORD *)this + 6) = 0;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      sub_1C4774094(this, *(_QWORD *)(v5 + 24));
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != a3);
  }
  return this;
}

llvm *llvm::ValueSymbolTable::dump(llvm *this)
{
  uint64_t v1;
  uint64_t *i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  v1 = *((unsigned int *)this + 2);
  if ((_DWORD)v1)
  {
    for (i = *(uint64_t **)this; !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(uint64_t **)this;
  }
  v4 = *(_QWORD *)this + 8 * v1;
  if (i != (uint64_t *)v4)
  {
    v5 = *i;
    do
    {
      this = llvm::Value::dump(*(llvm::Value **)(v5 + 8));
      do
      {
        v6 = i[1];
        ++i;
        v5 = v6;
        if (v6)
          v7 = v5 == -8;
        else
          v7 = 1;
      }
      while (v7);
    }
    while (i != (uint64_t *)v4);
  }
  return this;
}

uint64_t llvm::verifyFunction(uint64_t ***this, const llvm::Function *a2, llvm::raw_ostream *a3)
{
  uint64_t ***v3;
  _BYTE v5[2064];
  uint64_t v6;

  v3 = this;
  v6 = *MEMORY[0x1E0C80C00];
  sub_1C5441BDC((uint64_t)v5, (uint64_t)a2, 1, this[5]);
  LODWORD(v3) = sub_1C5441DC4((uint64_t)v5, v3);
  sub_1C5443D80((uint64_t)v5);
  return v3 ^ 1;
}

void sub_1C6249364(llvm::raw_ostream *a1, uint64_t ***a2)
{
  uint64_t v2;
  uint64_t v3;
  const char *v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  if (a1)
  {
    v8 = v2;
    v9 = v3;
    v6 = "Access tag nodes must have the number of operands that is a multiple of 3!";
    v7 = 259;
    sub_1C6249A24((uint64_t)a1, (llvm::Twine *)&v6);
    if (*(_QWORD *)a1)
      sub_1C6249C6C(a1, *a2);
  }
}

void sub_1C62493C8(llvm::raw_ostream *a1, _BYTE *a2, uint64_t ***a3)
{
  uint64_t v3;
  uint64_t v4;
  char v7;
  _BYTE *v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    v11 = v3;
    v12 = v4;
    v7 = 1;
    v10 = 1;
    if (*a2)
    {
      v8 = a2;
      v7 = 3;
    }
    v9 = v7;
    sub_1C6249A24((uint64_t)a1, (llvm::Twine *)&v8);
    if (*(_QWORD *)a1)
      sub_1C6249C6C(a1, *a3);
  }
}

void sub_1C6249438(llvm::raw_ostream **a1, uint64_t *a2, uint64_t ***a3, llvm::APInt **a4)
{
  uint64_t v4;
  uint64_t v5;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  if (a1)
  {
    v12 = v4;
    v13 = v5;
    v10 = "Could not find TBAA parent in struct type node";
    v11 = 259;
    sub_1C6249A24((uint64_t)a1, (llvm::Twine *)&v10);
    if (*a1)
      sub_1C624A484(a1, *a2, a3, a4);
  }
}

void sub_1C62494B4(llvm::raw_ostream **a1, uint64_t *a2, uint64_t ***a3, uint64_t ***a4)
{
  uint64_t v4;
  uint64_t v5;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  if (a1)
  {
    v12 = v4;
    v13 = v5;
    v10 = "Access type node must be a valid scalar type";
    v11 = 259;
    sub_1C6249A24((uint64_t)a1, (llvm::Twine *)&v10);
    if (*a1)
      sub_1C6249F68(a1, *a2, a3, a4);
  }
}

void sub_1C6249530(llvm::raw_ostream **a1, uint64_t *a2, uint64_t ***a3, llvm::APInt **a4)
{
  uint64_t v4;
  uint64_t v5;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  if (a1)
  {
    v12 = v4;
    v13 = v5;
    v10 = "Offset not zero at the point of scalar access";
    v11 = 259;
    sub_1C6249A24((uint64_t)a1, (llvm::Twine *)&v10);
    if (*a1)
      sub_1C624A484(a1, *a2, a3, a4);
  }
}

void llvm::initializeVerifierLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED8310E0);
  if (v2 != -1)
  {
    v5[0] = sub_1C5447A40;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED8310E0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t llvm::createVerifierPass(llvm *this)
{
  char v1;
  uint64_t v2;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  v1 = (char)this;
  v2 = operator new();
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = &unk_1EF8F7100;
  *(_DWORD *)(v2 + 24) = 2;
  *(_QWORD *)v2 = &off_1E8168F88;
  *(_QWORD *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 40) = v1;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED8310E0);
  if (v4 != -1)
  {
    v8[0] = sub_1C5447A40;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED8310E0, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v2;
}

uint64_t llvm::VerifierAnalysis::run(llvm *a1, llvm *a2)
{
  llvm *v3;
  BOOL *v4;
  unsigned __int16 v6;

  v3 = llvm::dbgs(a1);
  LOBYTE(v6) = llvm::verifyModule(a2, v3, (llvm::raw_ostream *)((char *)&v6 + 1), v4);
  return v6;
}

uint64_t llvm::VerifierAnalysis::run(llvm *a1, uint64_t a2)
{
  llvm *v3;
  _BYTE v5[2064];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = llvm::dbgs(a1);
  sub_1C5441BDC((uint64_t)v5, (uint64_t)v3, 1, *(_QWORD **)(a2 + 40));
  LODWORD(a2) = sub_1C5441DC4((uint64_t)v5, (uint64_t ***)a2);
  sub_1C5443D80((uint64_t)v5);
  return a2 ^ 1;
}

_QWORD *llvm::VerifierPass::run@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ResultImpl;

  ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::VerifierAnalysis::Key, a2);
  if (*a1 && ((*(_BYTE *)(ResultImpl + 8) | *(_BYTE *)(ResultImpl + 9)) & 1) != 0)
    llvm::report_fatal_error((llvm *)"Broken module found, compilation aborted!", (const char *)1);
  return llvm::InstCountPass::run(a4);
}

{
  if ((*(_BYTE *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::VerifierAnalysis::Key, a2) + 8) & 1) != 0
    && *a1)
  {
    llvm::report_fatal_error((llvm *)"Broken function found, compilation aborted!", (const char *)1);
  }
  return llvm::InstCountPass::run(a4);
}

void sub_1C6249880(llvm::raw_ostream **a1, llvm::Twine *a2, uint64_t *a3, uint64_t *a4)
{
  sub_1C6249A24((uint64_t)a1, a2);
  if (*a1)
  {
    if (*a3)
      sub_1C6249A88(a1, *a3);
    if (*a4)
      sub_1C6249A88(a1, *a4);
  }
}

void sub_1C62498E8(llvm::raw_ostream **a1, llvm::Twine *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  sub_1C6249A24((uint64_t)a1, a2);
  if (*a1)
  {
    if (*a3)
      sub_1C6249A88(a1, *a3);
    sub_1C6249B5C(a1, *a4, a5, a6);
  }
}

void sub_1C6249964(llvm::raw_ostream **a1, llvm::Twine *a2, uint64_t *a3, uint64_t ***a4)
{
  sub_1C6249A24((uint64_t)a1, a2);
  if (*a1)
  {
    if (*a3)
      sub_1C6249A88(a1, *a3);
    sub_1C6249C6C((llvm::raw_ostream *)a1, *a4);
  }
}

void sub_1C62499C4(llvm::raw_ostream **a1, llvm::Twine *a2, uint64_t *a3, uint64_t ***a4)
{
  sub_1C6249CD4((uint64_t)a1, a2);
  if (*a1)
  {
    if (*a3)
      sub_1C6249A88(a1, *a3);
    sub_1C6249C6C((llvm::raw_ostream *)a1, *a4);
  }
}

void sub_1C6249A24(uint64_t a1, llvm::Twine *this)
{
  llvm::raw_ostream *v3;
  _BYTE *v4;

  v3 = *(llvm::raw_ostream **)a1;
  if (*(_QWORD *)a1)
  {
    llvm::Twine::print(this, v3);
    v4 = (_BYTE *)*((_QWORD *)v3 + 4);
    if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
    {
      llvm::raw_ostream::write(v3, 10);
    }
    else
    {
      *((_QWORD *)v3 + 4) = v4 + 1;
      *v4 = 10;
    }
  }
  *(_BYTE *)(a1 + 192) = 1;
}

llvm::raw_ostream *sub_1C6249A88(llvm::raw_ostream **a1, uint64_t a2)
{
  unsigned int v4;
  llvm::raw_ostream *v5;
  llvm::ModuleSlotTracker *v6;
  llvm::raw_ostream *result;
  _BYTE *v8;

  v4 = *(unsigned __int8 *)(a2 + 16);
  v6 = (llvm::ModuleSlotTracker *)(a1 + 2);
  v5 = *a1;
  if (v4 < 0x1C)
    sub_1C5314910((uint64_t *)a2, v5, 1, v6);
  else
    llvm::Value::print((llvm::Value *)a2, v5, v6, 0);
  result = *a1;
  v8 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v8 >= *((_QWORD *)*a1 + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v8 + 1;
  *v8 = 10;
  return result;
}

llvm::raw_ostream *sub_1C6249B08(llvm::raw_ostream *a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  char v7;
  int v8;
  const char *v9;
  size_t v10;
  size_t v11;
  llvm::raw_ostream *v12;

  v3 = sub_1C4816AD8(a1, "; ModuleID = '");
  v6 = *(const char **)(a2 + 168);
  v5 = a2 + 168;
  v4 = v6;
  v7 = *(_BYTE *)(v5 + 23);
  v8 = v7;
  if (v7 >= 0)
    v9 = (const char *)v5;
  else
    v9 = v4;
  v10 = v7 & 0x7F;
  if (v8 >= 0)
    v11 = v10;
  else
    v11 = *(_QWORD *)(v5 + 8);
  v12 = llvm::raw_ostream::write(v3, v9, v11);
  return sub_1C4816AD8(v12, "'\n");
}

llvm::raw_ostream *sub_1C6249B5C(llvm::raw_ostream **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  sub_1C6249B08(*a1, a2);
  if (*a3)
    sub_1C6249A88(a1, *a3);
  return sub_1C6249B08(*a1, *a4);
}

llvm::raw_ostream **sub_1C6249BA8(llvm::raw_ostream **result, llvm::Type *this)
{
  llvm::raw_ostream *v3;
  _BYTE *v4;

  if (this)
  {
    v3 = *result;
    v4 = (_BYTE *)*((_QWORD *)*result + 4);
    if ((unint64_t)v4 >= *((_QWORD *)*result + 3))
    {
      llvm::raw_ostream::write(*result, 32);
    }
    else
    {
      *((_QWORD *)v3 + 4) = v4 + 1;
      *v4 = 32;
    }
    return (llvm::raw_ostream **)llvm::Type::print(this, v3, 0, 0);
  }
  return result;
}

void sub_1C6249C0C(llvm::raw_ostream **a1, llvm::Twine *a2, uint64_t *a3, uint64_t a4)
{
  sub_1C6249A24((uint64_t)a1, a2);
  if (*a1)
  {
    if (*a3)
      sub_1C6249A88(a1, *a3);
    sub_1C6249A88(a1, a4);
  }
}

llvm::raw_ostream *sub_1C6249C6C(llvm::raw_ostream *result, uint64_t **this)
{
  llvm::raw_ostream *v2;
  _BYTE *v3;

  if (this)
  {
    v2 = result;
    llvm::Metadata::print(this, *(llvm::raw_ostream **)result, (llvm::raw_ostream *)((char *)result + 16), *((const llvm::Module **)result + 1));
    result = *(llvm::raw_ostream **)v2;
    v3 = *(_BYTE **)(*(_QWORD *)v2 + 32);
    if ((unint64_t)v3 >= *(_QWORD *)(*(_QWORD *)v2 + 24))
    {
      return llvm::raw_ostream::write(result, 10);
    }
    else
    {
      *((_QWORD *)result + 4) = v3 + 1;
      *v3 = 10;
    }
  }
  return result;
}

void sub_1C6249CD4(uint64_t a1, llvm::Twine *this)
{
  llvm::raw_ostream *v3;
  _BYTE *v4;

  v3 = *(llvm::raw_ostream **)a1;
  if (*(_QWORD *)a1)
  {
    llvm::Twine::print(this, v3);
    v4 = (_BYTE *)*((_QWORD *)v3 + 4);
    if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
    {
      llvm::raw_ostream::write(v3, 10);
    }
    else
    {
      *((_QWORD *)v3 + 4) = v4 + 1;
      *v4 = 10;
    }
  }
  *(_BYTE *)(a1 + 192) |= *(_BYTE *)(a1 + 194);
  *(_BYTE *)(a1 + 193) = 1;
}

void sub_1C6249D48(llvm::raw_ostream *a1, llvm::Twine *a2, uint64_t ***a3, uint64_t ***a4)
{
  sub_1C6249A24((uint64_t)a1, a2);
  if (*(_QWORD *)a1)
  {
    sub_1C6249C6C(a1, *a3);
    sub_1C6249C6C(a1, *a4);
  }
}

void sub_1C6249DA4(llvm::raw_ostream *a1, llvm::Twine *a2, uint64_t ***a3, uint64_t ***a4)
{
  sub_1C6249CD4((uint64_t)a1, a2);
  if (*(_QWORD *)a1)
  {
    sub_1C6249C6C(a1, *a3);
    sub_1C6249C6C(a1, *a4);
  }
}

void sub_1C6249E00(llvm::raw_ostream *a1, llvm::Twine *a2, uint64_t ***a3, unsigned int *a4)
{
  sub_1C6249CD4((uint64_t)a1, a2);
  if (*(_QWORD *)a1)
  {
    sub_1C6249C6C(a1, *a3);
    sub_1C6249EC8(*(llvm::raw_ostream **)a1, *a4);
  }
}

void sub_1C6249E5C(llvm::raw_ostream *a1, llvm::Twine *a2, uint64_t ***a3, uint64_t ***a4, uint64_t ***a5)
{
  sub_1C6249CD4((uint64_t)a1, a2);
  if (*(_QWORD *)a1)
  {
    sub_1C6249C6C(a1, *a3);
    sub_1C6249C6C(a1, *a4);
    sub_1C6249C6C(a1, *a5);
  }
}

llvm::raw_ostream *sub_1C6249EC8(llvm::raw_ostream *a1, unsigned int a2)
{
  llvm::raw_ostream *result;
  _BYTE *v3;

  result = llvm::raw_ostream::operator<<(a1, a2);
  v3 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v3 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v3 + 1;
  *v3 = 10;
  return result;
}

llvm::raw_ostream *sub_1C6249F08(llvm::raw_ostream *a1, uint64_t **a2, uint64_t *a3, uint64_t *a4, uint64_t ***a5, uint64_t ***a6)
{
  sub_1C6249C6C(a1, a2);
  if (*a3)
    sub_1C6249A88((llvm::raw_ostream **)a1, *a3);
  return sub_1C6249F68((llvm::raw_ostream **)a1, *a4, a5, a6);
}

llvm::raw_ostream *sub_1C6249F68(llvm::raw_ostream **a1, uint64_t a2, uint64_t ***a3, uint64_t ***a4)
{
  if (a2)
    sub_1C6249A88(a1, a2);
  sub_1C6249C6C((llvm::raw_ostream *)a1, *a3);
  return sub_1C6249C6C((llvm::raw_ostream *)a1, *a4);
}

void sub_1C6249FB4(llvm::raw_ostream **a1, llvm::Twine *a2, uint64_t *a3, llvm::Type **a4)
{
  sub_1C6249A24((uint64_t)a1, a2);
  if (*a1)
  {
    if (*a3)
      sub_1C6249A88(a1, *a3);
    sub_1C6249BA8(a1, *a4);
  }
}

llvm::raw_ostream *sub_1C624A014(llvm::raw_ostream **a1, uint64_t a2, llvm::Type **a3, uint64_t a4)
{
  if (a2)
    sub_1C6249A88(a1, a2);
  sub_1C6249BA8(a1, *a3);
  return sub_1C6249A88(a1, a4);
}

void sub_1C624A060(llvm::raw_ostream **a1, llvm::Twine *a2, uint64_t a3, uint64_t a4)
{
  sub_1C6249A24((uint64_t)a1, a2);
  if (*a1)
  {
    sub_1C6249A88(a1, a3);
    sub_1C6249A88(a1, a4);
  }
}

void sub_1C624A0BC(llvm::raw_ostream **a1, llvm::Twine *a2, uint64_t a3, uint64_t *a4)
{
  sub_1C6249A24((uint64_t)a1, a2);
  if (*a1)
  {
    sub_1C6249A88(a1, a3);
    if (*a4)
      sub_1C6249A88(a1, *a4);
  }
}

void sub_1C624A11C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a2 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4 + a2, 8);
    v4 = *(unsigned int *)(a1 + 8);
  }
  if (a2)
    bzero((void *)(*(_QWORD *)a1 + 8 * v4), 8 * a2);
  *(_DWORD *)(a1 + 8) = v4 + a2;
}

void sub_1C624A188(llvm::raw_ostream **a1, llvm::Twine *a2, llvm::Type **a3, uint64_t *a4)
{
  sub_1C6249A24((uint64_t)a1, a2);
  if (*a1)
  {
    sub_1C6249BA8(a1, *a3);
    if (*a4)
      sub_1C6249A88(a1, *a4);
  }
}

void sub_1C624A1E8(llvm::raw_ostream **a1, llvm::Twine *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  sub_1C6249A24((uint64_t)a1, a2);
  if (*a1)
  {
    v5 = *(_QWORD *)(a3 + 8);
    if (v5)
    {
      v6 = *(uint64_t **)a3;
      v7 = 8 * v5;
      do
      {
        if (*v6)
          sub_1C6249A88(a1, *v6);
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
  }
}

void sub_1C624A250(llvm::raw_ostream *a1, llvm::Twine *a2, llvm::NamedMDNode **a3, uint64_t ***a4)
{
  sub_1C6249CD4((uint64_t)a1, a2);
  if (*(_QWORD *)a1)
  {
    sub_1C624A2AC(a1, *a3);
    sub_1C6249C6C(a1, *a4);
  }
}

llvm::raw_ostream *sub_1C624A2AC(llvm::raw_ostream *result, llvm::NamedMDNode *this)
{
  llvm::raw_ostream *v2;
  _BYTE *v3;

  if (this)
  {
    v2 = result;
    llvm::NamedMDNode::print(this, *(llvm::raw_ostream **)result, (llvm::raw_ostream *)((char *)result + 16), 0);
    result = *(llvm::raw_ostream **)v2;
    v3 = *(_BYTE **)(*(_QWORD *)v2 + 32);
    if ((unint64_t)v3 >= *(_QWORD *)(*(_QWORD *)v2 + 24))
    {
      return llvm::raw_ostream::write(result, 10);
    }
    else
    {
      *((_QWORD *)result + 4) = v3 + 1;
      *v3 = 10;
    }
  }
  return result;
}

uint64_t sub_1C624A314(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C545B460(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

void sub_1C624A3C0(char **a1, __int128 *a2)
{
  uint64_t v4;
  char *v5;

  v4 = sub_1C47AD050((uint64_t)qword_1ED804E10, 0, 0);
  byte_1ED804E90 = 0;
  qword_1ED804E98 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED804EA0 = 0;
  qword_1ED804E10[0] = (uint64_t)&unk_1E819E898;
  qword_1ED804EA8 = (uint64_t)&off_1E819E9A0;
  qword_1ED804EB0 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED804EC8 = (uint64_t)&qword_1ED804EB0;
  llvm::cl::Option::setArgStr(v4, "enable-swifttailcc-musttail-check", 0x21uLL);
  v5 = *a1;
  byte_1ED804E90 = **a1;
  byte_1ED804EA1 = 1;
  byte_1ED804EA0 = *v5;
  xmmword_1ED804E30 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED804E10);
}

void sub_1C624A484(llvm::raw_ostream **a1, uint64_t a2, uint64_t ***a3, llvm::APInt **a4)
{
  if (a2)
    sub_1C6249A88(a1, a2);
  sub_1C6249C6C((llvm::raw_ostream *)a1, *a3);
  sub_1C624A4D0(a1, *a4);
}

void sub_1C624A4D0(llvm::raw_ostream **a1, llvm::APInt *this)
{
  llvm::raw_ostream *v2;
  _BYTE *v3;

  if (this)
  {
    v2 = *a1;
    llvm::APInt::print(this, *a1, 1);
    v3 = (_BYTE *)*((_QWORD *)v2 + 4);
    if ((unint64_t)v3 >= *((_QWORD *)v2 + 3))
    {
      llvm::raw_ostream::write(v2, 10);
    }
    else
    {
      *((_QWORD *)v2 + 4) = v3 + 1;
      *v3 = 10;
    }
  }
}

uint64_t llvm::coverage::CounterExpressionBuilder::get(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v9;
  __int128 v10;
  char *v11;
  int *v12;

  v5 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 24);
  v12 = 0;
  if (sub_1C624ACD4(v4, *(_DWORD *)(v5 + 16), a2, &v12))
    v6 = v12 == (int *)(*(_QWORD *)v5 + 24 * *(unsigned int *)(v5 + 16));
  else
    v6 = 1;
  if (v6)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - *(_QWORD *)a1) >> 2);
    if (v9 >= *(_QWORD *)(a1 + 16))
    {
      v11 = sub_1C51EA60C((void **)a1, (uint64_t)a2);
    }
    else
    {
      v10 = *(_OWORD *)a2;
      *(_DWORD *)(v9 + 16) = a2[4];
      *(_OWORD *)v9 = v10;
      v11 = (char *)(v9 + 20);
    }
    *(_QWORD *)(a1 + 8) = v11;
    sub_1C624AFFC(v5, a2)[5] = v7;
  }
  else
  {
    v7 = v12[5];
  }
  return (v7 << 32) | 2;
}

uint64_t llvm::coverage::CounterExpressionBuilder::extractTerms(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)result;
  while ((_DWORD)a2 == 2)
  {
    v7 = *v6 + 20 * HIDWORD(a2);
    result = llvm::coverage::CounterExpressionBuilder::extractTerms(v6, *(_QWORD *)(v7 + 4), a3, a4);
    a2 = *(_QWORD *)(v7 + 12);
    if (*(_DWORD *)v7)
      a3 = a3;
    else
      a3 = -(int)a3;
  }
  if ((_DWORD)a2 == 1)
    return sub_1C624A6A4(a4, HIDWORD(a2), a3);
  return result;
}

uint64_t sub_1C624A6A4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v4;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_1C61DFFB0(a1, a2, a3);
  v4 = (unsigned int *)(*(_QWORD *)a1 + 8 * v3);
  *v4 = a2;
  v4[1] = a3;
  *(_DWORD *)(a1 + 8) = v3 + 1;
  return a1;
}

unint64_t llvm::coverage::CounterExpressionBuilder::add(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v7 = 1;
  v8 = a2;
  v9 = a3;
  result = llvm::coverage::CounterExpressionBuilder::get(a1, &v7);
  if (a4)
    return llvm::coverage::CounterExpressionBuilder::simplify(a1, result);
  return result;
}

unint64_t llvm::coverage::CounterExpressionBuilder::subtract(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v7 = 0;
  v8 = a2;
  v9 = a3;
  result = llvm::coverage::CounterExpressionBuilder::get(a1, &v7);
  if (a4)
    return llvm::coverage::CounterExpressionBuilder::simplify(a1, result);
  return result;
}

llvm::raw_ostream *llvm::coverage::CounterMappingContext::dump(llvm::raw_ostream *result, int *a2, llvm::raw_ostream *a3)
{
  llvm::raw_ostream *v3;
  llvm::raw_ostream *v5;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  llvm::raw_ostream *v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _BYTE *v13;
  char v14;
  _BYTE *v15;
  char *v16;
  uint64_t (*v17)(void);
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  char *v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;

  v3 = a3;
  v5 = result;
  v27 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  if (*a2 == 2)
  {
    v10 = a2[1];
    if (*((_QWORD *)result + 1) <= v10)
      return result;
    v11 = *(_QWORD *)result;
    v12 = (_DWORD *)(*(_QWORD *)result + 20 * v10);
    v13 = (_BYTE *)*((_QWORD *)a3 + 4);
    if ((unint64_t)v13 >= *((_QWORD *)a3 + 3))
    {
      llvm::raw_ostream::write(a3, 40);
    }
    else
    {
      *((_QWORD *)a3 + 4) = v13 + 1;
      *v13 = 40;
    }
    v20 = v11 + 20 * v10;
    llvm::coverage::CounterMappingContext::dump(v5, v20 + 4, v3);
    if (*v12)
      v21 = " + ";
    else
      v21 = " - ";
    sub_1C4816AD8(v3, v21);
    result = (llvm::raw_ostream *)llvm::coverage::CounterMappingContext::dump(v5, v20 + 12, v3);
    v22 = (_BYTE *)*((_QWORD *)v3 + 4);
    if ((unint64_t)v22 >= *((_QWORD *)v3 + 3))
    {
      result = llvm::raw_ostream::write(v3, 41);
    }
    else
    {
      *((_QWORD *)v3 + 4) = v22 + 1;
      *v22 = 41;
    }
  }
  else if (v6 == 1)
  {
    v8 = (_BYTE *)*((_QWORD *)a3 + 4);
    if ((unint64_t)v8 >= *((_QWORD *)a3 + 3))
    {
      v9 = llvm::raw_ostream::write(a3, 35);
    }
    else
    {
      *((_QWORD *)a3 + 4) = v8 + 1;
      *v8 = 35;
      v9 = a3;
    }
    result = llvm::raw_ostream::operator<<(v9, a2[1]);
  }
  else if (!v6)
  {
    v7 = (_BYTE *)*((_QWORD *)a3 + 4);
    if ((unint64_t)v7 >= *((_QWORD *)a3 + 3))
      return llvm::raw_ostream::write(a3, 48);
    *((_QWORD *)a3 + 4) = v7 + 1;
    *v7 = 48;
    return result;
  }
  if (!*((_QWORD *)v5 + 3))
    return result;
  llvm::coverage::CounterMappingContext::evaluate(v5, a2, (uint64_t)&v25);
  v14 = v26;
  if ((v26 & 1) != 0)
  {
    v16 = v25;
    v25 = 0;
    if (v16)
    {
      v23 = v16;
      sub_1C4D62BD4(&v23, &v24);
      result = (llvm::raw_ostream *)v23;
      if (!v23)
        return result;
      v17 = *(uint64_t (**)(void))(*(_QWORD *)v23 + 8);
      return (llvm::raw_ostream *)v17();
    }
  }
  v15 = (_BYTE *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)v3 + 3))
  {
    v3 = llvm::raw_ostream::write(v3, 91);
  }
  else
  {
    *((_QWORD *)v3 + 4) = v15 + 1;
    *v15 = 91;
  }
  v18 = (unint64_t)v25;
  result = llvm::raw_ostream::operator<<(v3, (unint64_t)v25);
  v19 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v19 >= *((_QWORD *)result + 3))
  {
    result = llvm::raw_ostream::write(result, 93);
  }
  else
  {
    *((_QWORD *)result + 4) = v19 + 1;
    *v19 = 93;
  }
  if ((v14 & 1) != 0 && v18)
  {
    v17 = *(uint64_t (**)(void))(*(_QWORD *)v18 + 8);
    return (llvm::raw_ostream *)v17();
  }
  return result;
}

_QWORD *llvm::coverage::CounterMappingContext::evaluate@<X0>(_QWORD *result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const std::error_category *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v3 = result;
  v17 = *MEMORY[0x1E0C80C00];
  if (*a2 == 2)
  {
    v8 = a2[1];
    if (result[1] > v8)
    {
      v10 = *result;
      v11 = (_DWORD *)(*result + 20 * v8);
      result = llvm::coverage::CounterMappingContext::evaluate(&v15, result, v11 + 1);
      if ((v16 & 1) != 0)
      {
        *(_BYTE *)(a3 + 8) = *(_BYTE *)(a3 + 8) & 0xFE | v16 & 1;
        v7 = v15;
      }
      else
      {
        result = llvm::coverage::CounterMappingContext::evaluate(&v13, v3, v10 + 20 * v8 + 12);
        if ((v14 & 1) != 0)
        {
          *(_BYTE *)(a3 + 8) |= 1u;
          v7 = v13;
        }
        else
        {
          if (*v11)
            v12 = v13;
          else
            v12 = -v13;
          v7 = v12 + v15;
          *(_BYTE *)(a3 + 8) &= ~1u;
        }
      }
      goto LABEL_5;
    }
  }
  else
  {
    if (*a2 != 1)
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_QWORD *)a3 = 0;
      return result;
    }
    v5 = a2[1];
    if (result[3] > v5)
    {
      v6 = result[2];
      *(_BYTE *)(a3 + 8) &= ~1u;
      v7 = *(_QWORD *)(v6 + 8 * v5);
LABEL_5:
      *(_QWORD *)a3 = v7;
      return result;
    }
  }
  v9 = std::generic_category();
  result = (_QWORD *)operator new();
  *result = &off_1E81A0D28;
  result[1] = 33;
  result[2] = v9;
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = result;
  return result;
}

uint64_t sub_1C624ABD8(_QWORD **a1)
{
  _QWORD *v1;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  char *v6;

  v4 = 0;
  v1 = *a1;
  *a1 = 0;
  v3 = &v4;
  v5 = v1;
  sub_1C5461638(&v5, &v3, &v6);
  if (v5)
    (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  return v4;
}

void llvm::coverage::CoverageMapError::message(llvm::coverage::CoverageMapError *this@<X0>, uint64_t a2@<X8>)
{
  sub_1C54613D0(a2, *((_DWORD *)this + 2));
}

void sub_1C624AC40()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C624AC54(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned int *)(a1 + 8);
  if (!atomic_load(qword_1EF8F2FB0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F2FB0, (void *(*)(void))sub_1C54660B0, (void (*)(void *))sub_1C54660E4);
  return v1;
}

void *sub_1C624ACA8()
{
  return &llvm::coverage::CoverageMapError::ID;
}

BOOL sub_1C624ACB4(uint64_t a1, void *a2)
{
  return a2 == &llvm::coverage::CoverageMapError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

uint64_t sub_1C624ACD4(uint64_t a1, int a2, _DWORD *a3, int **a4)
{
  int *v5;
  uint64_t result;
  int v10;
  int v11;
  int v12;
  int *v13;
  unsigned int v14;
  int i;
  int v16;
  BOOL v22;
  unsigned int v23;
  int v25;
  int v26;
  int v27;
  int v28;

  if (!a2)
  {
    v5 = 0;
    result = 0;
    goto LABEL_3;
  }
  v10 = a3[1];
  v27 = a3[2];
  v28 = v10;
  v11 = a3[3];
  v25 = a3[4];
  v26 = v11;
  v12 = sub_1C624AE28(a3, &v28, &v27, &v26, &v25);
  v13 = 0;
  v14 = (a2 - 1) & v12;
  for (i = 1; ; ++i)
  {
    v5 = (int *)(a1 + 24 * v14);
    v16 = *v5;
    if (*a3 == *v5 && a3[1] == v5[1] && a3[2] == v5[2] && a3[3] == v5[3] && a3[4] == v5[4])
    {
      result = 1;
      goto LABEL_3;
    }
    if (v16 != 1)
      break;
    if (v5[1] == 1 && v5[2] == -1)
    {
      v22 = v5[3] == 1 && v5[4] == -1;
      goto LABEL_32;
    }
LABEL_31:
    v22 = 0;
LABEL_32:
    if (v22 && v13 == 0)
      v13 = (int *)(a1 + 24 * v14);
    v23 = v14 + i;
    v14 = v23 & (a2 - 1);
  }
  if (v16)
    goto LABEL_31;
  if (v5[1] != 1 || v5[2] != -1)
    goto LABEL_31;
  if (v5[3] != 1 || v5[4] != -1)
    goto LABEL_31;
  result = 0;
  if (v13)
    v5 = v13;
LABEL_3:
  *a4 = v5;
  return result;
}

unint64_t sub_1C624AE28(_DWORD *a1, int *a2, int *a3, int *a4, int *a5)
{
  _OWORD v11[4];
  _OWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  v14 = sub_1C4D9B584();
  LODWORD(v11[0]) = *a1;
  return sub_1C624AEF0((char *)v11, (_DWORD *)v11 + 1, (char *)v12, *a2, a3, a4, a5);
}

unint64_t sub_1C624AEF0(char *a1, _DWORD *__dst, char *a3, int a4, int *a5, int *a6, int *a7)
{
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v12 = sub_1C4ED49B0(a1, &v15, __dst, (unint64_t)a3, a4);
  v16 = v15;
  v13 = sub_1C4ED49B0(a1, &v16, v12, (unint64_t)a3, *a5);
  return sub_1C624AF88(a1, v16, v13, a3, *a6, a7);
}

unint64_t sub_1C624AF88(char *a1, uint64_t a2, _DWORD *a3, char *a4, int a5, int *a6)
{
  _DWORD *v9;
  char *v10;
  uint64_t v12;
  int v13[2];

  v12 = a2;
  v9 = sub_1C4ED49B0(a1, &v12, a3, (unint64_t)a4, a5);
  *(_QWORD *)v13 = v12;
  v10 = (char *)sub_1C4ED49B0(a1, (uint64_t *)v13, v9, (unint64_t)a4, *a6);
  return sub_1C4E37BA0(a1, *(uint64_t *)v13, v10, a4);
}

int *sub_1C624AFFC(uint64_t a1, _DWORD *a2)
{
  char v4;
  int *v5;
  unsigned int v7;
  int *v8;

  v8 = 0;
  v4 = sub_1C624ACD4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C624B06C(a1, a2, v8);
    v7 = a2[4];
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *((_QWORD *)v5 + 2) = v7;
  }
  return v5;
}

int *sub_1C624B06C(uint64_t a1, _DWORD *a2, int *a3)
{
  int v5;
  unsigned int v6;
  BOOL v8;
  BOOL v9;
  int *v10;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_18;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_18:
    sub_1C5464F8C(a1, v6);
    v10 = 0;
    sub_1C624ACD4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v10);
    a3 = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a3 || (a3[1] == 1 ? (v8 = a3[2] == -1) : (v8 = 0), !v8 || (a3[3] == 1 ? (v9 = a3[4] == -1) : (v9 = 0), !v9)))
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C624B13C(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  BOOL v10;
  BOOL v11;
  int *v12;
  __int128 v13;
  int *v14;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    v7 = *(_QWORD *)result;
    v8 = *(_QWORD *)result + 24 * v6;
    v9 = vdupq_n_s64(0xFFFFFFFF00000001);
    do
    {
      *(_DWORD *)v7 = 0;
      *(int64x2_t *)(v7 + 4) = v9;
      v7 += 24;
    }
    while (v7 != v8);
  }
  while (a2 != a3)
  {
    if (*a2 > 1u
      || (a2[1] == 1 ? (v10 = a2[2] == -1) : (v10 = 0), !v10 || (a2[3] == 1 ? (v11 = a2[4] == -1) : (v11 = 0), !v11)))
    {
      v14 = 0;
      result = sub_1C624ACD4(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), a2, &v14);
      v12 = v14;
      v13 = *(_OWORD *)a2;
      v14[4] = a2[4];
      *(_OWORD *)v12 = v13;
      v12[5] = a2[5];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 6;
  }
  return result;
}

char **llvm::coverage::RawCoverageReader::readULEB128@<X0>(char **this@<X0>, unint64_t *a2@<X1>, char ***a3@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  char *v7;
  char *v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char **v13;
  int v14;

  v4 = (unint64_t)this[1];
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = *this;
    v8 = *this;
    while (v8)
    {
      v9 = *v8;
      v10 = *v8 & 0x7F;
      if (v6 >= 0x40 && (*v8 & 0x7F) != 0)
        break;
      if ((unint64_t)(v10 << v6) >> v6 != v10)
        break;
      v5 += v10 << v6;
      v6 += 7;
      ++v8;
      if ((v9 & 0x80) == 0)
        goto LABEL_10;
    }
    v5 = 0;
LABEL_10:
    v11 = ((_DWORD)v8 - (_DWORD)v7);
    *a2 = v5;
    v12 = v4 - v11;
    if (v4 >= v11)
    {
      v13 = 0;
      *this = &v7[v11];
      this[1] = (char *)v12;
      goto LABEL_14;
    }
    this = (char **)operator new();
    v13 = this;
    *this = (char *)&off_1E8169028;
    v14 = 5;
  }
  else
  {
    this = (char **)operator new();
    v13 = this;
    *this = (char *)&off_1E8169028;
    v14 = 4;
  }
  *((_DWORD *)this + 2) = v14;
LABEL_14:
  *a3 = v13;
  return this;
}

uint64_t llvm::coverage::RawCoverageReader::readIntMax@<X0>(char **this@<X0>, unint64_t *a2@<X1>, unint64_t a3@<X2>, char ***a4@<X8>)
{
  uint64_t result;

  result = (uint64_t)llvm::coverage::RawCoverageReader::readULEB128(this, a2, a4);
  if (!*a4)
  {
    if (*a2 >= a3)
    {
      result = operator new();
      *(_QWORD *)result = &off_1E8169028;
      *(_DWORD *)(result + 8) = 5;
    }
    else
    {
      result = 0;
    }
    *a4 = (char **)result;
  }
  return result;
}

uint64_t llvm::coverage::RawCoverageReader::readSize@<X0>(char **this@<X0>, unint64_t *a2@<X1>, char ***a3@<X8>)
{
  uint64_t result;

  result = (uint64_t)llvm::coverage::RawCoverageReader::readULEB128(this, a2, a3);
  if (!*a3)
  {
    if (*a2 <= (unint64_t)this[1])
    {
      result = 0;
    }
    else
    {
      result = operator new();
      *(_QWORD *)result = &off_1E8169028;
      *(_DWORD *)(result + 8) = 5;
    }
    *a3 = (char **)result;
  }
  return result;
}

uint64_t llvm::coverage::RawCoverageMappingReader::decodeCounter@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a2 & 3) == 1)
  {
    result = 0;
    v6 = a2 >> 2;
    v7 = 1;
LABEL_5:
    *a3 = v7 | (v6 << 32);
    goto LABEL_6;
  }
  if ((a2 & 3) != 0)
  {
    v6 = a2 >> 2;
    v8 = **(_QWORD **)(a1 + 32);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) - v8) >> 2) <= v6)
    {
      result = operator new();
      *(_QWORD *)result = &off_1E8169028;
      *(_DWORD *)(result + 8) = 5;
      goto LABEL_6;
    }
    result = 0;
    *(_DWORD *)(v8 + 20 * v6) = (a2 & 3) - 2;
    v7 = 2;
    goto LABEL_5;
  }
  result = 0;
  *a3 = 0;
LABEL_6:
  *a4 = result;
  return result;
}

uint64_t llvm::coverage::RawCoverageMappingReader::readCounter@<X0>(char **a1@<X0>, unint64_t *a2@<X1>, char ***a3@<X8>)
{
  uint64_t result;
  unint64_t v7;

  v7 = 0;
  result = llvm::coverage::RawCoverageReader::readIntMax(a1, &v7, 0xFFFFFFFFuLL, a3);
  if (!*a3)
  {
    result = llvm::coverage::RawCoverageMappingReader::decodeCounter((uint64_t)a1, v7, a2, (uint64_t *)a3);
    if (!*a3)
      *a3 = 0;
  }
  return result;
}

void llvm::coverage::RawCoverageMappingReader::read(llvm::coverage::RawCoverageMappingReader *this@<X0>, char ***a2@<X8>)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char v13;
  int v14;
  void *v15;
  void *v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  void *v36[2];
  _DWORD v37[16];
  void *v38;
  uint64_t v39;
  _QWORD v40[5];

  v40[4] = *MEMORY[0x1E0C80C00];
  v38 = v40;
  v39 = 0x800000000;
  v35 = 0;
  llvm::coverage::RawCoverageReader::readSize((char **)this, &v35, a2);
  if (*a2)
    goto LABEL_2;
  v4 = v35;
  if (v35)
  {
    while (1)
    {
      v36[0] = 0;
      llvm::coverage::RawCoverageReader::readIntMax((char **)this, (unint64_t *)v36, *(_QWORD *)(*((_QWORD *)this + 2) + 8), a2);
      if (*a2)
        break;
      v5 = (int)v36[0];
      v6 = v39;
      if (v39 >= (unint64_t)HIDWORD(v39))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, v39 + 1, 4);
        v6 = v39;
      }
      *((_DWORD *)v38 + v6) = v5;
      v7 = v39 + 1;
      LODWORD(v39) = v39 + 1;
      if (!--v4)
        goto LABEL_12;
    }
  }
  else
  {
    v7 = v39;
LABEL_12:
    if (v7)
    {
      v8 = (unsigned int *)v38;
      v9 = 4 * v7;
      do
      {
        v10 = *((_QWORD *)this + 3);
        v11 = **((_QWORD **)this + 2) + 24 * *v8;
        if (*(char *)(v11 + 23) >= 0)
          v12 = (void *)(**((_QWORD **)this + 2) + 24 * *v8);
        else
          v12 = *(void **)v11;
        v36[0] = v12;
        v13 = *(_BYTE *)(v11 + 23);
        v14 = v13;
        v15 = *(void **)(v11 + 8);
        v16 = (void *)(v13 & 0x7F);
        if (v14 >= 0)
          v15 = v16;
        v36[1] = v15;
        v17 = *(_OWORD **)(v10 + 8);
        if ((unint64_t)v17 >= *(_QWORD *)(v10 + 16))
        {
          v18 = sub_1C51140B0((void **)v10, v36);
        }
        else
        {
          *v17 = *(_OWORD *)v36;
          v18 = v17 + 1;
        }
        *(_QWORD *)(v10 + 8) = v18;
        ++v8;
        v9 -= 4;
      }
      while (v9);
    }
    v34 = 0;
    llvm::coverage::RawCoverageReader::readSize((char **)this, &v34, a2);
    if (!*a2)
    {
      v19 = *((_QWORD *)this + 4);
      v20 = v34;
      v36[0] = 0;
      v36[1] = 0;
      v37[0] = 0;
      v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v19 + 8) - *(_QWORD *)v19) >> 2);
      if (v34 <= v21)
      {
        if (v34 < v21)
          *(_QWORD *)(v19 + 8) = *(_QWORD *)v19 + 20 * v34;
        if (!v20)
        {
LABEL_30:
          v23 = v39;
          if ((_DWORD)v39)
          {
            v24 = 0;
            while (1)
            {
              llvm::coverage::RawCoverageMappingReader::readMappingRegionsSubArray((char **)this, *((char ***)this + 5), v24, v39, a2);
              if (*a2)
                break;
              if (v23 == ++v24)
              {
                v36[0] = v37;
                v36[1] = (void *)0x800000000;
                if ((_DWORD)v39)
                {
                  sub_1C624BC10((uint64_t)v36, v39);
                  v25 = v39;
                  if (v39 >= 2)
                  {
                    v26 = 1;
                    do
                    {
                      v27 = (uint64_t *)*((_QWORD *)this + 5);
                      v28 = *v27;
                      v29 = v27[1];
                      if (v28 != v29)
                      {
                        do
                        {
                          if (*(_DWORD *)(v28 + 40) == 1)
                            *((_QWORD *)v36[0] + *(unsigned int *)(v28 + 20)) = v28;
                          v28 += 44;
                        }
                        while (v28 != v29);
                        v30 = (uint64_t *)*((_QWORD *)this + 5);
                        v31 = *v30;
                        v32 = v30[1];
                        while (v31 != v32)
                        {
                          v33 = (_QWORD *)*((_QWORD *)v36[0] + *(unsigned int *)(v31 + 16));
                          if (v33)
                          {
                            *v33 = *(_QWORD *)v31;
                            *((_QWORD *)v36[0] + *(unsigned int *)(v31 + 16)) = 0;
                          }
                          v31 += 44;
                        }
                      }
                      ++v26;
                    }
                    while (v26 != v25);
                  }
                }
                goto LABEL_53;
              }
            }
          }
          else
          {
            v36[0] = v37;
            v36[1] = (void *)0x800000000;
LABEL_53:
            *a2 = 0;
            if (v36[0] != v37)
              free(v36[0]);
          }
          goto LABEL_2;
        }
      }
      else
      {
        sub_1C546B668((void **)v19, v34 - v21, (__int128 *)v36);
      }
      v22 = 12;
      while (1)
      {
        llvm::coverage::RawCoverageMappingReader::readCounter((char **)this, (unint64_t *)(**((_QWORD **)this + 4) + v22 - 8), a2);
        if (*a2)
          break;
        llvm::coverage::RawCoverageMappingReader::readCounter((char **)this, (unint64_t *)(**((_QWORD **)this + 4) + v22), a2);
        if (*a2)
          break;
        v22 += 20;
        if (!--v20)
          goto LABEL_30;
      }
    }
  }
LABEL_2:
  if (v38 != v40)
    free(v38);
}

uint64_t sub_1C624B904@<X0>(uint64_t a1@<X0>, char **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t result;
  __int128 v7[3];
  __int128 v8[3];

  llvm::object::Archive::child_begin(a1, a2, a3, (uint64_t)v8);
  llvm::object::Archive::child_end((uint64_t)v7);
  sub_1C624BABC(v8, v7, a4);
  v5 = *((_QWORD *)&v7[0] + 1);
  *((_QWORD *)&v7[0] + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  result = *((_QWORD *)&v8[0] + 1);
  *((_QWORD *)&v8[0] + 1) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_1C624B980(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  sub_1C624BD0C(a1, &v5);
  v2 = v5;
  if (v5)
  {
    v5 = 0;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8) = v2;
    *(_QWORD *)(a1 + 40) = v4 & 3 | 4;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFFF8) = 0;
  }
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t *sub_1C624B9FC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;
  int v12;

  v3 = *a2;
  v4 = *((_DWORD *)a2 + 4);
  v5 = *((_DWORD *)a2 + 5);
  v6 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  *((_DWORD *)a2 + 4) = 0;
  v7 = *a1;
  *a1 = v3;
  v10[0] = v7;
  v8 = a1[1];
  a1[1] = v6;
  v10[1] = v8;
  LODWORD(v3) = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = v4;
  v11 = v3;
  v12 = v5;
  sub_1C4F02264((uint64_t)v10);
  return a1;
}

_QWORD *sub_1C624BA64(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  sub_1C4F02264((uint64_t)(a1 + 3));
  return a1;
}

uint64_t sub_1C624BABC@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t result;
  _OWORD v9[2];
  __int16 v10;
  uint64_t v11;
  _OWORD v12[2];
  __int16 v13;
  uint64_t v14;

  v3 = *a1;
  v4 = a1[1];
  *((_QWORD *)a1 + 1) = 0;
  v12[0] = v3;
  v12[1] = v4;
  v13 = *((_WORD *)a1 + 16);
  v14 = *((_QWORD *)a1 + 5);
  v5 = *a2;
  v6 = a2[1];
  *((_QWORD *)a2 + 1) = 0;
  v9[0] = v5;
  v9[1] = v6;
  v10 = *((_WORD *)a2 + 16);
  v11 = *((_QWORD *)a2 + 5);
  sub_1C624BB4C(a3, (uint64_t)v12, (uint64_t *)v9);
  v7 = *((_QWORD *)&v9[0] + 1);
  *((_QWORD *)&v9[0] + 1) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  result = *((_QWORD *)&v12[0] + 1);
  *((_QWORD *)&v12[0] + 1) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_1C624BB4C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(a1 + 16) = 0;
  v6 = (_OWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  *v6 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v10 = *a3;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  v11 = a3[1];
  a3[1] = 0;
  v12 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v11;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a3 + 1);
  *(_WORD *)(a1 + 80) = *((_WORD *)a3 + 16);
  *(_QWORD *)(a1 + 88) = a3[5];
  return a1;
}

void sub_1C624BC10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a2 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4 + a2, 8);
    v4 = *(unsigned int *)(a1 + 8);
  }
  bzero((void *)(*(_QWORD *)a1 + 8 * v4), 8 * a2);
  *(_DWORD *)(a1 + 8) = v4 + a2;
}

uint64_t sub_1C624BC78(uint64_t a1, uint64_t a2)
{
  void (***v3)(uint64_t *__return_ptr);
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v3 = *(void (****)(uint64_t *__return_ptr))(a2 + 8);
  if (v3)
  {
    (**v3)(&v8);
    v4 = v8;
    v8 = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      v7 = v8;
      v8 = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
  }
  return a1;
}

_QWORD *sub_1C624BD0C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _OWORD v10[2];
  __int16 v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  llvm::object::Archive::Child::getNext((llvm::object::Archive::Child *)a1, (uint64_t)v10);
  v4 = v12;
  if ((v12 & 1) != 0)
  {
    v7 = *(_QWORD *)&v10[0];
    *(_QWORD *)&v10[0] = 0;
  }
  else if (v10 == (_OWORD *)a1)
  {
    v7 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = v10[0];
    *((_QWORD *)&v10[0] + 1) = 0;
    *(_OWORD *)a1 = v6;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      v4 = v12;
    }
    v7 = 0;
    *(_OWORD *)(a1 + 16) = v10[1];
    *(_WORD *)(a1 + 32) = v11;
  }
  *a2 = v7;
  if ((v4 & 1) == 0)
  {
    result = (_QWORD *)*((_QWORD *)&v10[0] + 1);
    *((_QWORD *)&v10[0] + 1) = 0;
    if (!result)
      return result;
    v9 = 2;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
  }
  result = *(_QWORD **)&v10[0];
  *(_QWORD *)&v10[0] = 0;
  if (result)
  {
    v9 = 1;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
  }
  return result;
}

uint64_t llvm::DWARFAbbreviationDeclaration::AttributeSpec::getByteSize(llvm::DWARFAbbreviationDeclaration::AttributeSpec *this, const llvm::DWARFUnit *a2)
{
  int v3;
  __int16 FixedFormByteSize;

  v3 = *((unsigned __int16 *)this + 1);
  if (v3 == 33)
  {
    return 0;
  }
  else if (*((_BYTE *)this + 8))
  {
    return *((_BYTE *)this + 9);
  }
  else
  {
    FixedFormByteSize = llvm::dwarf::getFixedFormByteSize(v3, *((unsigned int *)a2 + 8) | ((unint64_t)*((unsigned __int16 *)a2 + 18) << 32));
    if ((FixedFormByteSize & 0xFF00) != 0)
      return FixedFormByteSize;
    else
      return 0;
  }
}

uint64_t llvm::DWARFAbbreviationDeclaration::getAttributeValueFromOffset@<X0>(llvm::DWARFAbbreviationDeclaration *this@<X0>, const llvm::DWARFUnit *a2@<X3>, unsigned int a3@<W1>, uint64_t a4@<X2>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t result;
  char v8;
  _OWORD *v10;
  uint64_t v11;
  char v12;
  char v13;
  int v14;
  __int128 v15;
  __int128 v16;
  char v17;
  char v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = a4;
  v6 = *((_QWORD *)this + 1);
  if (*(_WORD *)(v6 + 16 * a3 + 2) == 33)
  {
    result = llvm::DWARFFormValue::createFromSValue(33, *(_QWORD *)(v6 + 16 * a3 + 8), a5);
  }
  else
  {
    LOWORD(v21) = *(_WORD *)(v6 + 16 * a3 + 2);
    BYTE2(v21) = 0;
    *((_QWORD *)&v21 + 1) = 0;
    *(_QWORD *)&v22 = 0;
    v23 = 0uLL;
    v10 = (_OWORD *)*((_QWORD *)a2 + 2);
    v11 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 520);
    v12 = *((_BYTE *)a2 + 208);
    v13 = *((_BYTE *)a2 + 34);
    v16 = *v10;
    v17 = v12;
    v18 = v13;
    v14 = *((_DWORD *)a2 + 8);
    v19 = v11;
    v20 = v10;
    result = llvm::DWARFFormValue::extractValue((unsigned __int16 *)&v21, (uint64_t *)&v16, &v24, v14, 0, (uint64_t)a2);
    if (!(_DWORD)result)
    {
      v8 = 0;
      *(_BYTE *)a5 = 0;
      goto LABEL_4;
    }
    v15 = v22;
    *(_OWORD *)a5 = v21;
    *(_OWORD *)(a5 + 16) = v15;
    *(_OWORD *)(a5 + 32) = v23;
  }
  v8 = 1;
LABEL_4:
  *(_BYTE *)(a5 + 48) = v8;
  return result;
}

unint64_t llvm::DWARFAbbreviationDeclaration::FixedSizeInfo::getByteSize(llvm::DWARFAbbreviationDeclaration::FixedSizeInfo *this, const llvm::DWARFUnit *a2)
{
  unsigned int v3;
  unint64_t v4;
  unint64_t result;
  int v6;
  uint64_t v7;
  char v8;

  v3 = *((unsigned __int8 *)a2 + 34);
  if (*((_BYTE *)this + 2))
    v4 = *((unsigned __int8 *)a2 + 34) * (unint64_t)*((unsigned __int8 *)this + 2);
  else
    v4 = 0;
  result = v4 + *(unsigned __int16 *)this;
  if (*((_BYTE *)this + 3))
  {
    if (*((_BYTE *)a2 + 35))
      v6 = 8;
    else
      v6 = 4;
    if (*((_WORD *)a2 + 16) != 2)
      v3 = v6;
    result += *((unsigned __int8 *)this + 3) * (unint64_t)v3;
  }
  v7 = *((unsigned __int8 *)this + 4);
  if (v7)
  {
    v8 = 2;
    if (*((_BYTE *)a2 + 35))
      v8 = 3;
    result += v7 << v8;
  }
  return result;
}

unint64_t llvm::DWARFAbbreviationDeclaration::getFixedAttributesByteSize(llvm::DWARFAbbreviationDeclaration *this, const llvm::DWARFUnit *a2)
{
  if (*((_BYTE *)this + 158))
    return llvm::DWARFAbbreviationDeclaration::FixedSizeInfo::getByteSize((llvm::DWARFAbbreviationDeclaration *)((char *)this + 152), a2);
  else
    return 0;
}

void sub_1C624C014()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C624C028(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1C624C030((unsigned __int16 *)(a1 + 8), a2);
}

llvm::raw_ostream *sub_1C624C030(unsigned __int16 *a1, llvm::raw_ostream *a2)
{
  const char *v4;
  size_t v5;
  const char *v6;
  size_t v7;
  void *v8;
  llvm::raw_ostream *result;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  _QWORD v14[3];

  v4 = llvm::dwarf::TagString((llvm::dwarf *)*a1);
  if (v5)
  {
    v6 = v4;
    v7 = v5;
    v8 = (void *)*((_QWORD *)a2 + 4);
    if (v5 <= *((_QWORD *)a2 + 3) - (_QWORD)v8)
    {
      result = (llvm::raw_ostream *)memcpy(v8, v6, v5);
      *((_QWORD *)a2 + 4) += v7;
    }
    else
    {
      return llvm::raw_ostream::write(a2, v6, v5);
    }
  }
  else
  {
    v10 = sub_1C4816AD8(a2, "DW_");
    v11 = sub_1C4816AD8(v10, "TAG");
    v12 = sub_1C4816AD8(v11, "_unknown_");
    v13 = *a1;
    v14[0] = &unk_1E8169598;
    v14[1] = "%x";
    v14[2] = v13;
    return llvm::raw_ostream::operator<<(v12, (uint64_t)v14);
  }
  return result;
}

uint64_t sub_1C624C110(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned __int16 *)(a1 + 16));
}

llvm::raw_ostream *sub_1C624C144(unsigned __int16 *a1, llvm::raw_ostream *a2)
{
  const char *v4;
  size_t v5;
  const char *v6;
  size_t v7;
  void *v8;
  llvm::raw_ostream *result;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  _QWORD v14[3];

  v4 = llvm::dwarf::AttributeString((llvm::dwarf *)*a1);
  if (v5)
  {
    v6 = v4;
    v7 = v5;
    v8 = (void *)*((_QWORD *)a2 + 4);
    if (v5 <= *((_QWORD *)a2 + 3) - (_QWORD)v8)
    {
      result = (llvm::raw_ostream *)memcpy(v8, v6, v5);
      *((_QWORD *)a2 + 4) += v7;
    }
    else
    {
      return llvm::raw_ostream::write(a2, v6, v5);
    }
  }
  else
  {
    v10 = sub_1C4816AD8(a2, "DW_");
    v11 = sub_1C4816AD8(v10, "AT");
    v12 = sub_1C4816AD8(v11, "_unknown_");
    v13 = *a1;
    v14[0] = &unk_1E81695E8;
    v14[1] = "%x";
    v14[2] = v13;
    return llvm::raw_ostream::operator<<(v12, (uint64_t)v14);
  }
  return result;
}

uint64_t sub_1C624C224(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned __int16 *)(a1 + 16));
}

void sub_1C624C258()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C624C26C(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1C624C274(*(unsigned __int16 **)(a1 + 8), a2);
}

llvm::raw_ostream *sub_1C624C274(unsigned __int16 *a1, llvm::raw_ostream *a2)
{
  const char *v4;
  size_t v5;
  const char *v6;
  size_t v7;
  void *v8;
  llvm::raw_ostream *result;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  _QWORD v14[3];

  v4 = llvm::dwarf::FormEncodingString((llvm::dwarf *)*a1);
  if (v5)
  {
    v6 = v4;
    v7 = v5;
    v8 = (void *)*((_QWORD *)a2 + 4);
    if (v5 <= *((_QWORD *)a2 + 3) - (_QWORD)v8)
    {
      result = (llvm::raw_ostream *)memcpy(v8, v6, v5);
      *((_QWORD *)a2 + 4) += v7;
    }
    else
    {
      return llvm::raw_ostream::write(a2, v6, v5);
    }
  }
  else
  {
    v10 = sub_1C4816AD8(a2, "DW_");
    v11 = sub_1C4816AD8(v10, "FORM");
    v12 = sub_1C4816AD8(v11, "_unknown_");
    v13 = *a1;
    v14[0] = &unk_1E8169638;
    v14[1] = "%x";
    v14[2] = v13;
    return llvm::raw_ostream::operator<<(v12, (uint64_t)v14);
  }
  return result;
}

uint64_t sub_1C624C354(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned __int16 *)(a1 + 16));
}

llvm::raw_ostream *llvm::DWARFAddressRange::dump(uint64_t *a1, llvm::raw_ostream *a2, unsigned __int8 a3, uint64_t a4, llvm::raw_ostream *a5)
{
  char *v10;
  char *v11;
  llvm::raw_ostream *result;
  _QWORD v13[12];

  v13[11] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a4 + 21))
    v10 = " ";
  else
    v10 = "[";
  sub_1C4816AD8(a2, v10);
  llvm::DWARFFormValue::dumpAddress(a2, (llvm::raw_ostream *)a3, *a1);
  sub_1C4816AD8(a2, ", ");
  llvm::DWARFFormValue::dumpAddress(a2, (llvm::raw_ostream *)a3, a1[1]);
  if (*(_BYTE *)(a4 + 21))
    v11 = (char *)&unk_1C871CCCF;
  else
    v11 = ")";
  result = sub_1C4816AD8(a2, v11);
  if (a5)
  {
    sub_1C624C4A4((uint64_t)v13, (__int128 *)a4);
    llvm::DWARFFormValue::dumpAddressSection(a5, a2, (uint64_t)v13, a1[2]);
    return (llvm::raw_ostream *)sub_1C624C568(v13);
  }
  return result;
}

uint64_t sub_1C624C4A4(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 *v5;
  __int128 *v6;

  v4 = *a2;
  *(_QWORD *)(a1 + 14) = *(_QWORD *)((char *)a2 + 14);
  *(_OWORD *)a1 = v4;
  v5 = (__int128 *)*((_QWORD *)a2 + 6);
  if (v5)
  {
    if (v5 == (__int128 *)((char *)a2 + 24))
    {
      *(_QWORD *)(a1 + 48) = a1 + 24;
      (*(void (**)(_QWORD))(**((_QWORD **)a2 + 6) + 24))(*((_QWORD *)a2 + 6));
    }
    else
    {
      *(_QWORD *)(a1 + 48) = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 48) = 0;
  }
  v6 = (__int128 *)*((_QWORD *)a2 + 10);
  if (v6)
  {
    if (v6 == (__int128 *)((char *)a2 + 56))
    {
      *(_QWORD *)(a1 + 80) = a1 + 56;
      (*(void (**)(_QWORD))(**((_QWORD **)a2 + 10) + 24))(*((_QWORD *)a2 + 10));
    }
    else
    {
      *(_QWORD *)(a1 + 80) = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 80) = 0;
  }
  return a1;
}

_QWORD *sub_1C624C568(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 7;
  v3 = (_QWORD *)a1[10];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[6];
  if (v5 == a1 + 3)
  {
    v6 = 4;
    v5 = a1 + 3;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_1C624C5EC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C624C600(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E8169658;
  result[1] = v3;
  return result;
}

uint64_t sub_1C624C638(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E8169658;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C624C658(uint64_t a1, uint64_t *a2)
{
  void (*v2)(uint64_t *);
  uint64_t result;
  uint64_t v4;

  v2 = *(void (**)(uint64_t *))(a1 + 8);
  v4 = *a2;
  *a2 = 0;
  v2(&v4);
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

uint64_t llvm::AppleAcceleratorTable::Header::dump(unsigned int *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 208))(a2, "Header", 6);
  (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a2 + 296))(a2, "Magic", 5, *a1);
  (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a2 + 296))(a2, "Version", 7, *((unsigned __int16 *)a1 + 2));
  (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a2 + 296))(a2, "Hash function", 13, *((unsigned __int16 *)a1 + 3));
  (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, "Bucket count", 12, a1[2]);
  (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, "Hashes count", 12, a1[3]);
  (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, "HeaderData length", 17, a1[4]);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 216))(a2);
}

llvm::raw_ostream *sub_1C624C7A4(uint64_t a1, const void *a2, size_t a3, unint64_t a4)
{
  llvm::raw_ostream *v7;
  void *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;

  v7 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
  v8 = (void *)*((_QWORD *)v7 + 4);
  if (a3 <= *((_QWORD *)v7 + 3) - (_QWORD)v8)
  {
    if (a3)
    {
      memcpy(v8, a2, a3);
      *((_QWORD *)v7 + 4) += a3;
    }
  }
  else
  {
    llvm::raw_ostream::write(v7, (const char *)a2, a3);
  }
  v9 = sub_1C4816AD8(v7, ": ");
  v10 = llvm::raw_ostream::operator<<(v9, a4);
  return sub_1C4816AD8(v10, "\n");
}

llvm::raw_ostream *sub_1C624C840(uint64_t a1, const void *a2, size_t a3)
{
  llvm::raw_ostream *v5;
  void *v6;

  v5 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
  v6 = (void *)*((_QWORD *)v5 + 4);
  if (a3 <= *((_QWORD *)v5 + 3) - (_QWORD)v6)
  {
    if (a3)
    {
      memcpy(v6, a2, a3);
      *((_QWORD *)v5 + 4) += a3;
    }
  }
  else
  {
    llvm::raw_ostream::write(v5, (const char *)a2, a3);
  }
  return sub_1C4816AD8(v5, "\n");
}

uint64_t llvm::DWARFDebugNames::Header::dump(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;

  (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 208))(a2, "Header", 6);
  (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a2 + 296))(a2, "Length", 6, *(_QWORD *)a1);
  v4 = llvm::dwarf::FormatString(*(unsigned __int8 *)(a1 + 8));
  (*(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 192))(a2, "Format", 6, v4, v5);
  (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, "Version", 7, *(unsigned __int16 *)(a1 + 10));
  (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, "CU count", 8, *(unsigned int *)(a1 + 12));
  (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, "Local TU count", 14, *(unsigned int *)(a1 + 16));
  (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, "Foreign TU count", 16, *(unsigned int *)(a1 + 20));
  (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, "Bucket count", 12, *(unsigned int *)(a1 + 24));
  (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, "Name count", 10, *(unsigned int *)(a1 + 28));
  (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a2 + 296))(a2, "Abbreviations table size", 24, *(unsigned int *)(a1 + 32));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 248))(a2);
  v7 = sub_1C4816AD8(v6, "Augmentation: '");
  v8 = llvm::raw_ostream::write(v7, *(const char **)(a1 + 40), *(_QWORD *)(a1 + 48));
  sub_1C4816AD8(v8, "'\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 216))(a2);
}

_QWORD *llvm::DWARFDebugNames::Entry::Entry(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a1[1] = a1 + 3;
  v4 = (uint64_t)(a1 + 1);
  a1[2] = 0x300000000;
  *a1 = &off_1E81696C0;
  a1[21] = a2;
  a1[22] = a3;
  v5 = *(_QWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a3 + 16);
  if ((unint64_t)(v6 - v5) >= 0x19)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 1), (uint64_t)(a1 + 3), (v6 - v5) >> 3, 48);
    v5 = *(_QWORD *)(a3 + 8);
    v6 = *(_QWORD *)(a3 + 16);
  }
  while (v5 != v6)
  {
    sub_1C624CB08(v4, *(_WORD *)(v5 + 4));
    v5 += 8;
  }
  return a1;
}

uint64_t sub_1C624CB08(uint64_t a1, __int16 a2)
{
  unsigned int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
    return sub_1C547F9AC(a1, a2);
  v3 = *(_QWORD *)a1 + 48 * v2;
  *(_WORD *)v3 = a2;
  *(_BYTE *)(v3 + 2) = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  ++*(_DWORD *)(a1 + 8);
  return a1;
}

void llvm::DWARFDebugNames::Entry::dump(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  const char *v14;
  uint64_t v15;
  void ***v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void **v20;
  _QWORD v21[3];
  void *v22;
  __int128 v23;
  void **v24;
  void *v25;
  __int128 v26;
  void **v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a2 + 296))(a2, "Abbrev", 6, **(unsigned int **)(a1 + 176));
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 248))(a2);
  v5 = *(_QWORD *)(a1 + 176) + 4;
  v14 = "Tag: {0}\n";
  v15 = 9;
  v16 = &v20;
  v17 = 1;
  v18 = &unk_1E81697E0;
  v19 = v5;
  v20 = &v18;
  sub_1C639D338((uint64_t)&v14, v4);
  v6 = *(_QWORD *)(a1 + 176);
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(_QWORD *)(v6 + 16);
  if (v7 != v8)
  {
    v9 = *(unsigned __int16 **)(a1 + 8);
    do
    {
      v10 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 248))(a2);
      v14 = "{0}: ";
      v15 = 5;
      v16 = &v20;
      v17 = 1;
      v18 = &unk_1E8169810;
      v19 = v7;
      v20 = &v18;
      sub_1C639D338((uint64_t)&v14, v10);
      v11 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 256))(a2);
      v26 = 0u;
      v21[2] = 0;
      v23 = 0u;
      v21[0] = -1;
      v21[1] = 0x1040000FFFFFFFFLL;
      v22 = &unk_1E8169658;
      *(_QWORD *)&v23 = llvm::WithColor::defaultErrorHandler;
      v24 = &v22;
      v25 = &unk_1E8169658;
      *(_QWORD *)&v26 = llvm::WithColor::defaultWarningHandler;
      v27 = &v25;
      llvm::DWARFFormValue::dump(v9, v11, (uint64_t)v21);
      sub_1C624C568(v21);
      v12 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 256))(a2);
      v13 = (_BYTE *)*((_QWORD *)v12 + 4);
      if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
      {
        llvm::raw_ostream::write(v12, 10);
      }
      else
      {
        *((_QWORD *)v12 + 4) = v13 + 1;
        *v13 = 10;
      }
      v7 += 8;
      v9 += 24;
    }
    while (v7 != v8);
  }
}

uint64_t llvm::DWARFDebugNames::NameIndex::dumpForeignTUs(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  llvm::raw_ostream *v6;
  char v7;
  unint64_t v8;
  unint64_t v9[2];
  int v10;
  unint64_t v11;

  if (*(_DWORD *)(result + 44))
  {
    v3 = result;
    (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 232))(a2, "Foreign Type Unit signatures", 28);
    if (*(_DWORD *)(v3 + 44))
    {
      v4 = 0;
      v5 = 0;
      do
      {
        v6 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 248))(a2);
        if (*(_BYTE *)(v3 + 32))
          v7 = 3;
        else
          v7 = 2;
        v9[0] = *(_QWORD *)(v3 + 112)
              + (v4 & 0xFFFFFFF8)
              + ((*(_DWORD *)(v3 + 40) + *(_DWORD *)(v3 + 36)) << v7);
        v8 = sub_1C63873F8(*(_QWORD *)(v3 + 96) + 8, v9, 0);
        v9[0] = (unint64_t)&unk_1E8169860;
        v9[1] = (unint64_t)"ForeignTU[%u]: 0x%016llx\n";
        v10 = v5;
        v11 = v8;
        llvm::raw_ostream::operator<<(v6, (uint64_t)v9);
        ++v5;
        v4 += 8;
      }
      while (v5 < *(unsigned int *)(v3 + 44));
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 240))(a2);
  }
  return result;
}

uint64_t llvm::DWARFDebugNames::dump(uint64_t this, llvm::raw_ostream *a2)
{
  uint64_t v2;
  llvm::DWARFDebugNames::NameIndex *v3;
  uint64_t v4;
  _QWORD v5[2];
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v5[0] = &unk_1E81A26B0;
  v5[1] = a2;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v2 = *(unsigned int *)(this + 80);
  if ((_DWORD)v2)
  {
    v3 = *(llvm::DWARFDebugNames::NameIndex **)(this + 72);
    v4 = 160 * v2;
    do
    {
      this = llvm::DWARFDebugNames::NameIndex::dump(v3, (uint64_t)v5);
      v3 = (llvm::DWARFDebugNames::NameIndex *)((char *)v3 + 160);
      v4 -= 160;
    }
    while (v4);
  }
  return this;
}

uint64_t sub_1C624CEFC(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 176) + 4) | 0x10000u;
}

void sub_1C624CF10()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C624CF24(int a1, llvm::raw_ostream *a2)
{
  return sub_1C4816AD8(a2, "Sentinel");
}

void *sub_1C624CF34()
{
  return &llvm::DWARFDebugNames::SentinelError::ID;
}

BOOL sub_1C624CF40(uint64_t a1, void *a2)
{
  return a2 == &llvm::DWARFDebugNames::SentinelError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void *sub_1C624CF60(uint64_t a1)
{
  llvm::raw_ostream *v2;
  const void *v3;
  size_t v4;
  void *result;
  int v6;

  v2 = *(llvm::raw_ostream **)(a1 + 8);
  v3 = *(const void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  result = (void *)*((_QWORD *)v2 + 4);
  if (v4 <= *((_QWORD *)v2 + 3) - (_QWORD)result)
  {
    if (v4)
    {
      result = memcpy(result, v3, v4);
      *((_QWORD *)v2 + 4) += v4;
    }
  }
  else
  {
    result = llvm::raw_ostream::write(v2, (const char *)v3, v4);
  }
  if (*(int *)(a1 + 16) >= 1)
  {
    v6 = 0;
    do
    {
      result = sub_1C4816AD8(*(llvm::raw_ostream **)(a1 + 8), "  ");
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 16));
  }
  return result;
}

uint64_t sub_1C624CFF8(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_1C624D034(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_6;
    }
    v7 = (_DWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*(void **)a1, v4, 48 * v9);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)a1, v4, 48 * v10);
LABEL_12:
        v11 = *v7;
        if (v10 != v11)
          memcpy((void *)(*(_QWORD *)a1 + 48 * v10), (const void *)(*(_QWORD *)a2 + 48 * v10), *(_QWORD *)a2 + 48 * v11 - (*(_QWORD *)a2 + 48 * v10));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v9;
LABEL_6:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v9, 48);
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

void sub_1C624D158()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C624D16C(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1C624C030(*(unsigned __int16 **)(a1 + 8), a2);
}

void sub_1C624D174()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C624D188(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1C624D190(*(unsigned int **)(a1 + 8), a2);
}

llvm::raw_ostream *sub_1C624D190(unsigned int *a1, llvm::raw_ostream *a2)
{
  char *v4;
  size_t v5;
  char *v6;
  size_t v7;
  void *v8;
  llvm::raw_ostream *result;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  _QWORD v14[3];

  v4 = llvm::dwarf::IndexString((llvm::dwarf *)*a1);
  if (v5)
  {
    v6 = v4;
    v7 = v5;
    v8 = (void *)*((_QWORD *)a2 + 4);
    if (v5 <= *((_QWORD *)a2 + 3) - (_QWORD)v8)
    {
      result = (llvm::raw_ostream *)memcpy(v8, v6, v5);
      *((_QWORD *)a2 + 4) += v7;
    }
    else
    {
      return llvm::raw_ostream::write(a2, v6, v5);
    }
  }
  else
  {
    v10 = sub_1C4816AD8(a2, "DW_");
    v11 = sub_1C4816AD8(v10, "IDX");
    v12 = sub_1C4816AD8(v11, "_unknown_");
    v13 = *a1;
    v14[0] = &unk_1E8169840;
    v14[1] = "%x";
    v14[2] = v13;
    return llvm::raw_ostream::operator<<(v12, (uint64_t)v14);
  }
  return result;
}

uint64_t sub_1C624D270(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16));
}

uint64_t sub_1C624D2A4(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

llvm::raw_ostream *llvm::DWARFCompileUnit::dump(llvm::raw_ostream *result, llvm::raw_ostream *a2, uint64_t a3)
{
  llvm::raw_ostream *v5;
  int v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  size_t v14;
  const char *v15;
  size_t v16;
  void *v17;
  llvm::raw_ostream *v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  size_t v21;
  char *v22;
  size_t v23;
  void *v24;
  llvm::raw_ostream *v25;
  uint64_t v26;
  llvm::raw_ostream *v27;
  uint64_t v28;
  llvm::raw_ostream *v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  uint64_t v32;
  uint64_t v33;
  llvm::raw_ostream *v34;
  const char *v35;
  const char *v36;
  BOOL v37;
  llvm::raw_ostream *v38;
  _QWORD v39[3];
  llvm::raw_ostream *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  _QWORD v45[12];

  v45[11] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a3 + 19))
  {
    v5 = result;
    if (*((_BYTE *)result + 35))
      v6 = 16;
    else
      v6 = 8;
    v7 = *((_QWORD *)result + 3);
    v44[0] = &unk_1E8133270;
    v44[1] = "0x%08llx";
    v44[2] = v7;
    v8 = llvm::raw_ostream::operator<<(a2, (uint64_t)v44);
    v9 = sub_1C4816AD8(v8, ": Compile Unit:");
    v10 = sub_1C4816AD8(v9, " length = ");
    v11 = *((_QWORD *)v5 + 5);
    v40 = (llvm::raw_ostream *)&unk_1E81698E0;
    v41 = "0x%0*llx";
    LODWORD(v42) = v6;
    v43 = v11;
    v12 = llvm::raw_ostream::operator<<(v10, (uint64_t)&v40);
    v13 = sub_1C4816AD8(v12, ", format = ");
    v15 = llvm::dwarf::FormatString(*((unsigned __int8 *)v5 + 35));
    v16 = v14;
    v17 = (void *)*((_QWORD *)v13 + 4);
    if (v14 <= *((_QWORD *)v13 + 3) - (_QWORD)v17)
    {
      if (v14)
      {
        memcpy(v17, v15, v14);
        *((_QWORD *)v13 + 4) += v16;
      }
    }
    else
    {
      llvm::raw_ostream::write(v13, v15, v14);
    }
    v18 = sub_1C4816AD8(v13, ", version = ");
    v19 = *((unsigned __int16 *)v5 + 16);
    v39[0] = &unk_1E8169900;
    v39[1] = "0x%04x";
    v39[2] = v19;
    llvm::raw_ostream::operator<<(v18, (uint64_t)v39);
    if (*((unsigned __int16 *)v5 + 16) >= 5u)
    {
      v20 = sub_1C4816AD8(a2, ", unit_type = ");
      v22 = llvm::dwarf::UnitTypeString((llvm::dwarf *)*((unsigned __int8 *)v5 + 96));
      v23 = v21;
      v24 = (void *)*((_QWORD *)v20 + 4);
      if (v21 <= *((_QWORD *)v20 + 3) - (_QWORD)v24)
      {
        if (v21)
        {
          memcpy(v24, v22, v21);
          *((_QWORD *)v20 + 4) += v23;
        }
      }
      else
      {
        llvm::raw_ostream::write(v20, v22, v21);
      }
    }
    v25 = sub_1C4816AD8(a2, ", abbr_offset = ");
    v26 = *((_QWORD *)v5 + 6);
    v40 = (llvm::raw_ostream *)&unk_1E8133270;
    v41 = "0x%04llx";
    v42 = v26;
    llvm::raw_ostream::operator<<(v25, (uint64_t)&v40);
    if (!llvm::DWARFUnit::getAbbreviations(v5))
      sub_1C4816AD8(a2, " (invalid)");
    v27 = sub_1C4816AD8(a2, ", addr_size = ");
    v28 = *((unsigned __int8 *)v5 + 34);
    v40 = (llvm::raw_ostream *)&unk_1E8145938;
    v41 = "0x%02x";
    v42 = v28;
    llvm::raw_ostream::operator<<(v27, (uint64_t)&v40);
    if (*((unsigned __int16 *)v5 + 16) >= 5u && (*((_BYTE *)v5 + 96) & 0xFE) == 4)
    {
      v29 = sub_1C4816AD8(a2, ", DWO_id = ");
      llvm::DWARFUnit::extractDIEsIfNeeded(v5, 1);
      v30 = *((_QWORD *)v5 + 10);
      v40 = (llvm::raw_ostream *)&unk_1E8133270;
      v41 = "0x%016llx";
      v42 = v30;
      llvm::raw_ostream::operator<<(v29, (uint64_t)&v40);
    }
    v31 = sub_1C4816AD8(a2, " (next unit at ");
    v32 = 12;
    if (!*((_BYTE *)v5 + 35))
      v32 = 4;
    v33 = *((_QWORD *)v5 + 5) + *((_QWORD *)v5 + 3) + v32;
    v40 = (llvm::raw_ostream *)&unk_1E8133270;
    v41 = "0x%08llx";
    v42 = v33;
    v34 = llvm::raw_ostream::operator<<(v31, (uint64_t)&v40);
    sub_1C4816AD8(v34, ")\n");
    llvm::DWARFUnit::extractDIEsIfNeeded(v5, 0);
    v35 = (const char *)*((_QWORD *)v5 + 36);
    v36 = (const char *)*((_QWORD *)v5 + 37);
    v37 = v35 == v36;
    if (v35 == v36)
      v38 = 0;
    else
      v38 = v5;
    if (v37)
      v35 = 0;
    v40 = v38;
    v41 = v35;
    if (v38 && v35)
    {
      sub_1C624C4A4((uint64_t)v45, (__int128 *)a3);
      llvm::DWARFDie::dump((uint64_t *)&v40, a2, 0, (uint64_t)v45);
      return (llvm::raw_ostream *)sub_1C624C568(v45);
    }
    else
    {
      return sub_1C4816AD8(a2, "<compile unit can't be parsed!>\n\n");
    }
  }
  return result;
}

void llvm::DWARFCompileUnit::~DWARFCompileUnit(llvm::DWARFCompileUnit *this)
{
  llvm::DWARFUnit::~DWARFUnit(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C624D6A8(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_1C624D6E0(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned __int16 *)(a1 + 16));
}

uint64_t llvm::DWARFContext::getDebugAbbrev(llvm::DWARFContext *this)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  char v11;
  char v12;

  result = *((_QWORD *)this + 17);
  if (!result)
  {
    v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 65) + 72))(*((_QWORD *)this + 65));
    v5 = v4;
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 65) + 40))(*((_QWORD *)this + 65));
    v7 = operator new();
    v8 = llvm::DWARFDebugAbbrev::DWARFDebugAbbrev(v7);
    v9 = *((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = v8;
    if (v9)
    {
      sub_1C624E174(v9, *(char **)(v9 + 8));
      MEMORY[0x1CAA32FC0](v9, 0x1072C402B7D7BD7);
      v8 = *((_QWORD *)this + 17);
    }
    v10.n128_u64[0] = v3;
    v10.n128_u64[1] = v5;
    v11 = v6;
    v12 = 0;
    llvm::DWARFDebugAbbrev::extract(v8, &v10);
    return *((_QWORD *)this + 17);
  }
  return result;
}

uint64_t llvm::DWARFContext::getDebugAbbrevDWO(llvm::DWARFContext *this)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  char v11;
  char v12;

  result = *((_QWORD *)this + 42);
  if (!result)
  {
    v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 65) + 248))(*((_QWORD *)this + 65));
    v5 = v4;
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 65) + 40))(*((_QWORD *)this + 65));
    v7 = operator new();
    v8 = llvm::DWARFDebugAbbrev::DWARFDebugAbbrev(v7);
    v9 = *((_QWORD *)this + 42);
    *((_QWORD *)this + 42) = v8;
    if (v9)
    {
      sub_1C624E174(v9, *(char **)(v9 + 8));
      MEMORY[0x1CAA32FC0](v9, 0x1072C402B7D7BD7);
      v8 = *((_QWORD *)this + 42);
    }
    v10.n128_u64[0] = v3;
    v10.n128_u64[1] = v5;
    v11 = v6;
    v12 = 0;
    llvm::DWARFDebugAbbrev::extract(v8, &v10);
    return *((_QWORD *)this + 42);
  }
  return result;
}

uint64_t llvm::DWARFContext::getCUIndex(llvm::DWARFContext *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 v10;
  char v11;
  char v12;

  result = *((_QWORD *)this + 14);
  if (!result)
  {
    v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 65) + 360))(*((_QWORD *)this + 65));
    v5 = v4;
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 65) + 40))(*((_QWORD *)this + 65));
    v7 = operator new();
    *(_QWORD *)(v7 + 12) = 0x100000000;
    *(_DWORD *)(v7 + 20) = -1;
    *(_OWORD *)(v7 + 24) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    v8 = (_QWORD *)*((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v7;
    if (v8)
    {
      v9 = sub_1C624E0F0(v8);
      MEMORY[0x1CAA32FC0](v9, 0x10B0C40B5600ACDLL);
      v7 = *((_QWORD *)this + 14);
    }
    *(_QWORD *)&v10 = v3;
    *((_QWORD *)&v10 + 1) = v5;
    v11 = v6;
    v12 = 0;
    llvm::DWARFUnitIndex::parse(v7, &v10);
    return *((_QWORD *)this + 14);
  }
  return result;
}

uint64_t llvm::DWARFContext::getTUIndex(llvm::DWARFContext *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 v10;
  char v11;
  char v12;

  result = *((_QWORD *)this + 16);
  if (!result)
  {
    v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 65) + 376))(*((_QWORD *)this + 65));
    v5 = v4;
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 65) + 40))(*((_QWORD *)this + 65));
    v7 = operator new();
    *(_QWORD *)(v7 + 12) = 0x200000000;
    *(_DWORD *)(v7 + 20) = -1;
    *(_OWORD *)(v7 + 24) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    v8 = (_QWORD *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v7;
    if (v8)
    {
      v9 = sub_1C624E0F0(v8);
      MEMORY[0x1CAA32FC0](v9, 0x10B0C40B5600ACDLL);
      v7 = *((_QWORD *)this + 16);
    }
    *(_QWORD *)&v10 = v3;
    *((_QWORD *)&v10 + 1) = v5;
    v11 = v6;
    v12 = 0;
    llvm::DWARFUnitIndex::parse(v7, &v10);
    return *((_QWORD *)this + 16);
  }
  return result;
}

uint64_t llvm::DWARFContext::parseDWOUnits(uint64_t this, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;

  v7 = a2;
  if (!*(_DWORD *)(this + 248))
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 520);
    v5 = v2;
    v6 = &v7;
    (*(void (**)(uint64_t, _QWORD *(*)(uint64_t, uint64_t), uint64_t *))(*(_QWORD *)v3 + 232))(v3, sub_1C548D950, &v5);
    *(_DWORD *)(v2 + 296) = *(_DWORD *)(v2 + 248);
    v4 = *(_QWORD *)(v2 + 520);
    v5 = v2;
    v6 = &v7;
    return (*(uint64_t (**)(uint64_t, _QWORD *(*)(uint64_t, uint64_t), uint64_t *))(*(_QWORD *)v4 + 240))(v4, sub_1C548D968, &v5);
  }
  return this;
}

uint64_t llvm::DWARFContext::parseNormalUnits(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!*(_DWORD *)(this + 24))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 520);
    v4 = v1;
    (*(void (**)(uint64_t, _QWORD *(*)(llvm::DWARFContext **, uint64_t), uint64_t *))(*(_QWORD *)v2 + 56))(v2, sub_1C548D928, &v4);
    *(_DWORD *)(v1 + 72) = *(_DWORD *)(v1 + 24);
    v3 = *(_QWORD *)(v1 + 520);
    v4 = v1;
    return (*(uint64_t (**)(uint64_t, _QWORD *(*)(llvm::DWARFContext **, uint64_t), uint64_t *))(*(_QWORD *)v3 + 64))(v3, sub_1C548D93C, &v4);
  }
  return this;
}

llvm::DWARFUnit *sub_1C624DB94(llvm::DWARFUnit *a1, unint64_t a2)
{
  llvm::DWARFUnit *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;

  v3 = a1;
  llvm::DWARFUnit::extractDIEsIfNeeded(a1, 0);
  v4 = (_QWORD *)*((_QWORD *)v3 + 36);
  v5 = (_QWORD *)*((_QWORD *)v3 + 37);
  if (v5 != v4)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 - v4);
    do
    {
      v7 = v6 >> 1;
      v8 = &v4[3 * (v6 >> 1)];
      v10 = *v8;
      v9 = v8 + 3;
      v6 += ~(v6 >> 1);
      if (v10 < a2)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v4 == v5 || *v4 != a2)
    return 0;
  return v3;
}

void llvm::DWARFContext::getLineTableForUnit(llvm::DWARFContext *this, llvm::DWARFUnit *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, __int128 *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  llvm::DWARFContext::getLineTableForUnit((uint64_t)this, (uint64_t)a2, (void (*)(uint64_t, __int128 *))sub_1C624E09C, (uint64_t)this + 488, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v10 = v11;
    v11 = 0;
    v3 = *((_QWORD *)this + 64);
    if (!v3)
    {
      sub_1C485C2F0();
      llvm::DWARFContext::getLineTableForUnit(v5, v6, v7, v8, v9);
      return;
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v10);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  if ((v12 & 1) != 0)
  {
    v4 = v11;
    v11 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
}

void llvm::DWARFContext::getLineTableForUnit(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, __int128 *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  llvm::DWARFUnit *v12;
  llvm::DWARFUnit *v13;
  BOOL v14;
  llvm::DWARFUnit *v15;
  BOOL v16;
  uint64_t AsSectionOffset;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int *Contribution;
  uint64_t v22;
  void (**v23)(llvm::raw_ostream *__hidden);
  char *LineTable;
  __int128 *v25;
  uint64_t v26;
  char v27;
  char v28;
  __int128 v29;
  char v30;
  char v31;
  uint64_t v32;
  __int128 *v33;
  char v34;
  llvm::DWARFUnit *v35[2];

  if (!*(_QWORD *)(a1 + 160))
  {
    v10 = (_QWORD *)operator new();
    v10[2] = 0;
    v10[1] = 0;
    *v10 = v10 + 1;
    v11 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v10;
    if (v11)
    {
      sub_1C548D8E8(*(_QWORD **)(v11 + 8));
      MEMORY[0x1CAA32FC0](v11, 0x1020C4062D53EE8);
    }
  }
  llvm::DWARFUnit::extractDIEsIfNeeded((llvm::DWARFUnit *)a2, 1);
  v12 = *(llvm::DWARFUnit **)(a2 + 288);
  v13 = *(llvm::DWARFUnit **)(a2 + 296);
  v14 = v12 == v13;
  if (v12 == v13)
    v15 = 0;
  else
    v15 = (llvm::DWARFUnit *)a2;
  if (v14)
    v12 = 0;
  v35[0] = v15;
  v35[1] = v12;
  if (v15)
    v16 = v12 == 0;
  else
    v16 = 1;
  if (v16)
    goto LABEL_14;
  llvm::DWARFDie::find(v35, 16, &v29);
  if (!v34)
    goto LABEL_14;
  AsSectionOffset = llvm::DWARFFormValue::getAsSectionOffset((llvm::DWARFFormValue *)&v29);
  if (!v18)
    goto LABEL_14;
  v19 = AsSectionOffset;
  v20 = *(_QWORD **)(a2 + 56);
  if (v20 && (Contribution = (unsigned int *)llvm::DWARFUnitIndex::Entry::getContribution(v20, 4)) != 0)
    v22 = *Contribution;
  else
    v22 = 0;
  v23 = (void (**)(llvm::raw_ostream *__hidden))(v22 + v19);
  LineTable = llvm::DWARFDebugLine::getLineTable(*(llvm::DWARFDebugLine **)(a1 + 160), (unint64_t)v23);
  if (LineTable)
  {
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_QWORD *)a5 = LineTable;
    return;
  }
  v25 = *(__int128 **)(a2 + 144);
  if ((unint64_t)v23 < *((_QWORD *)v25 + 1))
  {
    v26 = *(_QWORD *)(a1 + 520);
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
    v28 = *(_BYTE *)(a2 + 34);
    v29 = *v25;
    v30 = v27;
    v31 = v28;
    v32 = v26;
    v33 = v25;
    llvm::DWARFDebugLine::getOrParseLineTable(*(uint64_t ***)(a1 + 160), (uint64_t)&v29, v23, a1, a2, a3, a4, a5);
  }
  else
  {
LABEL_14:
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_QWORD *)a5 = 0;
  }
}

char *sub_1C624DEB4(llvm::DWARFFormValue *a1)
{
  char *result;
  char *v2;
  char *v3;
  char *v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)a1 + 48))
    return 0;
  llvm::DWARFFormValue::getAsCString(a1, (uint64_t)&v4);
  result = v4;
  if ((v5 & 1) == 0)
    return result;
  v4 = 0;
  v2 = result;
  sub_1C4D62BD4(&v2, &v3);
  if (v2)
    (*(void (**)(char *))(*(_QWORD *)v2 + 8))(v2);
  if ((v5 & 1) == 0)
    return 0;
  result = v4;
  v4 = 0;
  if (result)
  {
    (*(void (**)(char *))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

_QWORD *sub_1C624DF80(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  sub_1C624DFC8(a1 + 1);
  return a1;
}

_QWORD *sub_1C624DFC8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_1C624E018(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_1C624E018(a1, *a2);
    sub_1C624E018(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t sub_1C624E068(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

_QWORD *sub_1C624E09C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*a2;
  *a2 = 0;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 48))(v2, &v5);
    result = v5;
    if (v5)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C624E0F0(v4);
  }
  return result;
}

_QWORD *sub_1C624E0F0(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    sub_1C548D5AC((uint64_t)(a1 + 5), v3);
  v4 = a1[4];
  a1[4] = 0;
  if (v4)
    MEMORY[0x1CAA32F9C](v4, 0x1000C8052888210);
  v5 = a1[3];
  a1[3] = 0;
  if (v5)
    MEMORY[0x1CAA32F9C](v5, 0x1000C8052888210);
  return a1;
}

void sub_1C624E174(uint64_t a1, char *a2)
{
  void **v2;
  void **v3;
  void **v6[5];

  if (a2)
  {
    v6[3] = v2;
    v6[4] = v3;
    sub_1C624E174(a1, *(_QWORD *)a2);
    sub_1C624E174(a1, *((_QWORD *)a2 + 1));
    v6[0] = (void **)(a2 + 56);
    sub_1C548D86C(v6);
    operator delete(a2);
  }
}

char **sub_1C624E1D0(char **a1)
{
  char *v2;
  unsigned int v3;
  char *v4;
  uint64_t v5;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = v2 - 144;
    v5 = 152 * v3;
    do
    {
      sub_1C624E234((char **)&v4[v5]);
      v5 -= 152;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

char **sub_1C624E234(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = v3 << 6;
    do
    {
      v5 = *(char **)&v2[v4 - 32];
      if (&v2[v4 - 8] != v5)
        free(v5);
      v4 -= 64;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

unint64_t llvm::DWARFDataExtractor::getInitialLength(uint64_t a1, unint64_t *a2, char **a3)
{
  unint64_t result;
  const std::error_category *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  if (a3 && *a3)
    return 0;
  v10 = *a2;
  v11 = 0;
  result = llvm::DWARFDataExtractor::getRelocatedValue(a1, 4, &v10, 0, (uint64_t *)&v11);
  v9 = result;
  if (result == 0xFFFFFFFF)
  {
    result = llvm::DWARFDataExtractor::getRelocatedValue(a1, 8, &v10, 0, (uint64_t *)&v11);
  }
  else if (result >= 0xFFFFFFF0)
  {
    v11 = 0;
    if (!a3)
    {
LABEL_11:
      result = 0;
      goto LABEL_12;
    }
    v7 = std::generic_category();
    sub_1C548F3B0(22, (uint64_t)v7, (uint64_t)"unsupported reserved unit length of value 0x%8.8llx", (uint64_t *)&v9, (uint64_t *)&v13);
    *a3 = v13;
    goto LABEL_9;
  }
  v8 = v11;
  if (!v11)
  {
    *a2 = v10;
    goto LABEL_12;
  }
  if (a3)
  {
    *a3 = v11;
    goto LABEL_11;
  }
  v11 = 0;
  v12 = v8;
  sub_1C4D62BD4(&v12, &v13);
  if (v12)
    (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
LABEL_9:
  result = (unint64_t)v11;
  if (v11)
  {
    (*(void (**)(char *))(*(_QWORD *)v11 + 8))(v11);
    goto LABEL_11;
  }
LABEL_12:
  if (a3)
  {
    if (!*a3)
      *a3 = 0;
  }
  return result;
}

unint64_t llvm::DWARFDataExtractor::getRelocatedValue(uint64_t a1, int a2, unint64_t *a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t Unsigned;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  char v21;

  if (a4)
    *a4 = -1;
  v10 = *(_QWORD *)(a1 + 32);
  if (!v10)
    return llvm::DataExtractor::getUnsigned((_QWORD *)a1, a3, a2, a5);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, unint64_t))(**(_QWORD **)(a1 + 24) + 384))(&v15, *(_QWORD *)(a1 + 24), v10, *a3);
  Unsigned = llvm::DataExtractor::getUnsigned((_QWORD *)a1, a3, a2, a5);
  if (!v21)
    goto LABEL_12;
  if (!a5 || !*a5)
  {
    if (a4)
      *a4 = v15;
    Unsigned = llvm::object::resolveRelocation(v20, v16, v16[2], Unsigned, v13);
    if (v18)
      Unsigned = llvm::object::resolveRelocation(v20, &v17, v19, Unsigned, v14);
LABEL_12:
    if (a5)
    {
      if (!*a5)
        *a5 = 0;
    }
  }
  return Unsigned;
}

BOOL llvm::DWARFAbbreviationDeclarationSet::extract(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  int v17;
  void *v18;
  _QWORD v19[18];

  v19[17] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = (uint64_t *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  for (i = *(_QWORD *)(a1 + 24); i != v7; i -= 160)
  {
    v9 = *(void **)(i - 152);
    if ((void *)(i - 136) != v9)
      free(v9);
  }
  *(_QWORD *)(a1 + 24) = v7;
  v10 = *a3;
  *(_QWORD *)a1 = *a3;
  llvm::DWARFAbbreviationDeclaration::DWARFAbbreviationDeclaration((llvm::DWARFAbbreviationDeclaration *)&v17);
  v15 = *a2;
  v16 = *((_QWORD *)a2 + 2);
  if (llvm::DWARFAbbreviationDeclaration::extract((uint64_t)&v17, (uint64_t *)&v15, a3))
  {
    v11 = 0;
    while (*(_DWORD *)(a1 + 8))
    {
      if (++v11 != v17)
      {
        v12 = -1;
        v11 = v17;
LABEL_12:
        *(_DWORD *)(a1 + 8) = v12;
      }
      sub_1C548F728(v6, (uint64_t)&v17);
      v15 = *a2;
      v16 = *((_QWORD *)a2 + 2);
      if ((llvm::DWARFAbbreviationDeclaration::extract((uint64_t)&v17, (uint64_t *)&v15, a3) & 1) == 0)
        goto LABEL_14;
    }
    v12 = v17;
    v11 = v17;
    goto LABEL_12;
  }
LABEL_14:
  v13 = *a3;
  if (v18 != v19)
    free(v18);
  return v10 != v13;
}

_DWORD *llvm::DWARFAbbreviationDeclarationSet::getAbbreviationDeclaration(llvm::DWARFAbbreviationDeclarationSet *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *result;
  _DWORD *v6;

  v3 = *((unsigned int *)this + 2);
  if ((_DWORD)v3 == -1)
  {
    result = (_DWORD *)*((_QWORD *)this + 2);
    v6 = (_DWORD *)*((_QWORD *)this + 3);
    while (result != v6)
    {
      if (*result == a2)
        return result;
      result += 40;
    }
    return 0;
  }
  if (a2 < v3)
    return 0;
  v4 = *((_QWORD *)this + 2);
  if (v3 - 0x3333333333333333 * ((*((_QWORD *)this + 3) - v4) >> 5) <= (unint64_t)a2)
    return 0;
  return (_DWORD *)(v4 + 160 * (a2 - v3));
}

__n128 llvm::DWARFDebugAbbrev::extract(uint64_t a1, __n128 *a2)
{
  _QWORD *v4;
  __n128 *v5;
  __n128 result;

  v4 = (_QWORD *)(a1 + 8);
  sub_1C624E174(a1, *(char **)(a1 + 8));
  *(_QWORD *)a1 = v4;
  *v4 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v4;
  v5 = (__n128 *)(a1 + 32);
  result = *a2;
  if (*(_BYTE *)(a1 + 56))
  {
    *(_WORD *)(a1 + 48) = a2[1].n128_u16[0];
    *v5 = result;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = a2[1].n128_u64[0];
    *v5 = result;
    *(_BYTE *)(a1 + 56) = 1;
  }
  return result;
}

uint64_t *sub_1C624E78C(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = v4 + v7;
      v9 = *(_QWORD *)(v4 + v7 - 160);
      *(_QWORD *)(v6 + v7 - 152) = v6 + v7 - 136;
      result = (uint64_t *)(v6 + v7 - 152);
      *(result - 1) = v9;
      result[1] = 0x800000000;
      if (*(_DWORD *)(v4 + v7 - 144))
        result = (uint64_t *)sub_1C6180FA8((uint64_t)result, v8 - 152);
      *(_QWORD *)(v6 + v7 - 8) = *(_QWORD *)(v8 - 8);
      v7 -= 160;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v10 = *v3;
  *v3 = v6;
  a2[1] = v10;
  v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  v12 = v3[2];
  v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1C624E874(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_1C624E8A8(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int16 *)(a1 + 24));
}

char *sub_1C624E8DC@<X0>(char **a1@<X0>, char **a2@<X1>, _QWORD *a3@<X8>)
{
  char *v3;
  char *result;
  char *v5;
  char *v6;

  v3 = *a1;
  *a1 = 0;
  v5 = *a2;
  v6 = v3;
  *a2 = 0;
  sub_1C6174794(&v6, &v5, a3);
  if (v5)
    (*(void (**)(char *))(*(_QWORD *)v5 + 8))(v5);
  result = v6;
  if (v6)
    return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t sub_1C624E93C(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_1C624E974(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t sub_1C624E9A4(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16));
}

uint64_t sub_1C624E9D8(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t sub_1C624EA14(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_1C624EA50(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int16 *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t llvm::DWARFDebugLine::Prologue::clear(uint64_t this)
{
  *(_QWORD *)(this + 5) = 0;
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 31) = 0;
  *(_QWORD *)(this + 48) = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 72) = *(_QWORD *)(this + 64);
  *(_QWORD *)(this + 96) = *(_QWORD *)(this + 88);
  return this;
}

void llvm::DWARFDebugLine::Prologue::dump(uint64_t a1, llvm::raw_ostream *a2, __int128 *a3)
{
  int v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  size_t v11;
  const char *v12;
  size_t v13;
  void *v14;
  llvm::raw_ostream *v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::raw_ostream *v22;
  uint64_t v23;
  llvm::raw_ostream *v24;
  uint64_t v25;
  const char *v26;
  llvm::raw_ostream *v27;
  uint64_t v28;
  llvm::raw_ostream *v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  uint64_t v32;
  llvm::raw_ostream *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  _BOOL4 v40;
  unsigned int v41;
  unsigned __int16 *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  llvm::raw_ostream *v47;
  _BYTE *v48;
  _QWORD *v49;
  llvm::raw_ostream *v50;
  _BYTE *v51;
  _QWORD *v52;
  _QWORD *v53;
  _BYTE *v54;
  _BOOL4 v55;
  _QWORD v56[3];
  _QWORD v57[3];
  _QWORD v58[3];
  _QWORD v59[3];
  _QWORD v60[3];
  void *v61;
  const char *v62;
  uint64_t v63;
  _QWORD v64[11];
  _QWORD v65[11];
  _QWORD v66[11];
  char *v67;
  size_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t (**v71)(llvm::detail::format_adapter *__hidden);
  char v72;
  _QWORD v73[2];
  _QWORD v74[4];

  v74[2] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a1)
  {
    if (*(_BYTE *)(a1 + 11))
      v6 = 16;
    else
      v6 = 8;
    v7 = sub_1C4816AD8(a2, "Line table prologue:\n");
    v8 = *(_QWORD *)a1;
    v67 = (char *)&unk_1E81698E0;
    v68 = (size_t)"    total_length: 0x%0*llx\n";
    LODWORD(v69) = v6;
    v70 = v8;
    v9 = llvm::raw_ostream::operator<<(v7, (uint64_t)&v67);
    v10 = sub_1C4816AD8(v9, "          format: ");
    v12 = llvm::dwarf::FormatString(*(unsigned __int8 *)(a1 + 11));
    v13 = v11;
    v14 = (void *)*((_QWORD *)v10 + 4);
    if (v11 <= *((_QWORD *)v10 + 3) - (_QWORD)v14)
    {
      if (v11)
      {
        memcpy(v14, v12, v11);
        *((_QWORD *)v10 + 4) += v13;
      }
    }
    else
    {
      llvm::raw_ostream::write(v10, v12, v11);
    }
    v15 = sub_1C4816AD8(v10, "\n");
    v16 = *(unsigned __int16 *)(a1 + 8);
    v61 = &unk_1E8169900;
    v62 = "         version: %u\n";
    v63 = v16;
    llvm::raw_ostream::operator<<(v15, (uint64_t)&v61);
    v17 = *(unsigned __int16 *)(a1 + 8);
    if (v17 - 2 <= 3)
    {
      if (v17 >= 5)
      {
        v18 = (_QWORD *)*(unsigned __int8 *)(a1 + 10);
        v67 = (char *)&unk_1E8145938;
        v68 = (size_t)"    address_size: %u\n";
        v69 = v18;
        v19 = llvm::raw_ostream::operator<<(a2, (uint64_t)&v67);
        v20 = *(unsigned __int8 *)(a1 + 24);
        v61 = &unk_1E8145938;
        v62 = " seg_select_size: %u\n";
        v63 = v20;
        llvm::raw_ostream::operator<<(v19, (uint64_t)&v61);
      }
      v21 = *(_QWORD *)(a1 + 16);
      v67 = (char *)&unk_1E81698E0;
      v68 = (size_t)" prologue_length: 0x%0*llx\n";
      LODWORD(v69) = v6;
      v70 = v21;
      v22 = llvm::raw_ostream::operator<<(a2, (uint64_t)&v67);
      v23 = *(unsigned __int8 *)(a1 + 25);
      v61 = &unk_1E8145938;
      v62 = " min_inst_length: %u\n";
      v63 = v23;
      v24 = llvm::raw_ostream::operator<<(v22, (uint64_t)&v61);
      v25 = *(unsigned __int8 *)(a1 + 26);
      if (*(unsigned __int16 *)(a1 + 8) <= 3u)
        v26 = (const char *)&unk_1C871E93E;
      else
        v26 = "max_ops_per_inst: %u\n";
      v60[0] = &unk_1E8145938;
      v60[1] = v26;
      v60[2] = v25;
      v27 = llvm::raw_ostream::operator<<(v24, (uint64_t)v60);
      v28 = *(unsigned __int8 *)(a1 + 27);
      v59[0] = &unk_1E8145938;
      v59[1] = " default_is_stmt: %u\n";
      v59[2] = v28;
      v29 = llvm::raw_ostream::operator<<(v27, (uint64_t)v59);
      v30 = *(unsigned __int8 *)(a1 + 28);
      v58[0] = &off_1E8169E28;
      v58[1] = "       line_base: %i\n";
      v58[2] = v30;
      v31 = llvm::raw_ostream::operator<<(v29, (uint64_t)v58);
      v32 = *(unsigned __int8 *)(a1 + 29);
      v57[0] = &unk_1E8145938;
      v57[1] = "      line_range: %u\n";
      v57[2] = v32;
      v33 = llvm::raw_ostream::operator<<(v31, (uint64_t)v57);
      v34 = *(unsigned __int8 *)(a1 + 30);
      v56[0] = &unk_1E8145938;
      v56[1] = "     opcode_base: %u\n";
      v56[2] = v34;
      llvm::raw_ostream::operator<<(v33, (uint64_t)v56);
      v35 = *(_QWORD *)(a1 + 40);
      if (*(_QWORD *)(a1 + 48) != v35)
      {
        v36 = 0;
        v37 = 1;
        do
        {
          v67 = "standard_opcode_lengths[{0}] = {1}\n";
          v68 = 35;
          v69 = v74;
          v70 = 2;
          v71 = &off_1E8169E48;
          v72 = v37;
          v73[0] = &off_1E8169E98;
          v73[1] = v35 + v36;
          v74[0] = &v71;
          v74[1] = v73;
          llvm::raw_ostream::operator<<(a2, (uint64_t)&v67);
          v36 = v37;
          v35 = *(_QWORD *)(a1 + 40);
          v38 = *(_QWORD *)(a1 + 48) - v35 == v37++;
        }
        while (!v38);
      }
      if (*(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 72))
      {
        v39 = 0;
        v40 = *(unsigned __int16 *)(a1 + 8) < 5u;
        v41 = 1;
        do
        {
          v67 = (char *)&off_1E8132728;
          v68 = (size_t)"include_directories[%3u] = ";
          v69 = (_QWORD *)(v40 + v41 - 1);
          llvm::raw_ostream::operator<<(a2, (uint64_t)&v67);
          v42 = (unsigned __int16 *)(*(_QWORD *)(a1 + 64) + 48 * v39);
          sub_1C624C4A4((uint64_t)v66, a3);
          llvm::DWARFFormValue::dump(v42, a2, (uint64_t)v66);
          sub_1C624C568(v66);
          v43 = (_BYTE *)*((_QWORD *)a2 + 4);
          if ((unint64_t)v43 >= *((_QWORD *)a2 + 3))
          {
            llvm::raw_ostream::write(a2, 10);
          }
          else
          {
            *((_QWORD *)a2 + 4) = v43 + 1;
            *v43 = 10;
          }
          v39 = v41;
          v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 4) == v41++;
        }
        while (!v38);
      }
      v44 = *(_QWORD *)(a1 + 88);
      if (v44 != *(_QWORD *)(a1 + 96))
      {
        v45 = 0;
        v55 = *(unsigned __int16 *)(a1 + 8) < 5u;
        v46 = 1;
        do
        {
          v67 = (char *)&off_1E8132728;
          v68 = (size_t)"file_names[%3u]:\n";
          v69 = (_QWORD *)(v55 + v46 - 1);
          v47 = llvm::raw_ostream::operator<<(a2, (uint64_t)&v67);
          sub_1C4816AD8(v47, "           name: ");
          sub_1C624C4A4((uint64_t)v65, a3);
          llvm::DWARFFormValue::dump((unsigned __int16 *)(v44 + 136 * v45), a2, (uint64_t)v65);
          sub_1C624C568(v65);
          v48 = (_BYTE *)*((_QWORD *)a2 + 4);
          if ((unint64_t)v48 >= *((_QWORD *)a2 + 3))
          {
            llvm::raw_ostream::write(a2, 10);
          }
          else
          {
            *((_QWORD *)a2 + 4) = v48 + 1;
            *v48 = 10;
          }
          v67 = (char *)&unk_1E8133270;
          v49 = *(_QWORD **)(v44 + 136 * v45 + 48);
          v68 = (size_t)"      dir_index: %llu\n";
          v69 = v49;
          llvm::raw_ostream::operator<<(a2, (uint64_t)&v67);
          if (*(_BYTE *)(a1 + 33))
          {
            v50 = sub_1C4816AD8(a2, "   md5_checksum: ");
            llvm::MD5::MD5Result::digest((llvm::MD5::MD5Result *)(v44 + 136 * v45 + 72), (uint64_t)&v67);
            llvm::raw_ostream::write(v50, v67, v68);
            v51 = (_BYTE *)*((_QWORD *)v50 + 4);
            if ((unint64_t)v51 >= *((_QWORD *)v50 + 3))
            {
              llvm::raw_ostream::write(v50, 10);
            }
            else
            {
              *((_QWORD *)v50 + 4) = v51 + 1;
              *v51 = 10;
            }
            if (v67 != (char *)&v70)
              free(v67);
          }
          if (*(_BYTE *)(a1 + 31))
          {
            v67 = (char *)&unk_1E8133270;
            v52 = *(_QWORD **)(v44 + 136 * v45 + 56);
            v68 = (size_t)"       mod_time: 0x%8.8llx\n";
            v69 = v52;
            llvm::raw_ostream::operator<<(a2, (uint64_t)&v67);
          }
          if (*(_BYTE *)(a1 + 32))
          {
            v67 = (char *)&unk_1E8133270;
            v53 = *(_QWORD **)(v44 + 136 * v45 + 64);
            v68 = (size_t)"         length: 0x%8.8llx\n";
            v69 = v53;
            llvm::raw_ostream::operator<<(a2, (uint64_t)&v67);
          }
          if (*(_BYTE *)(a1 + 34))
          {
            sub_1C4816AD8(a2, "         source: ");
            sub_1C624C4A4((uint64_t)v64, a3);
            llvm::DWARFFormValue::dump((unsigned __int16 *)(v44 + 136 * v45 + 88), a2, (uint64_t)v64);
            sub_1C624C568(v64);
            v54 = (_BYTE *)*((_QWORD *)a2 + 4);
            if ((unint64_t)v54 >= *((_QWORD *)a2 + 3))
            {
              llvm::raw_ostream::write(a2, 10);
            }
            else
            {
              *((_QWORD *)a2 + 4) = v54 + 1;
              *v54 = 10;
            }
          }
          v45 = v46;
          v44 = *(_QWORD *)(a1 + 88);
          v38 = 0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(a1 + 96) - v44) >> 3) == v46++;
        }
        while (!v38);
      }
    }
  }
}

llvm::raw_ostream *llvm::DWARFDebugLine::Row::dumpTableHeader(llvm::DWARFDebugLine::Row *this, llvm::raw_ostream *a2)
{
  unsigned int v2;
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;

  v2 = a2;
  v4 = llvm::raw_ostream::indent(this, a2);
  sub_1C4816AD8(v4, "Address            Line   Column File   ISA Discriminator Flags\n");
  v5 = llvm::raw_ostream::indent(this, v2);
  return sub_1C4816AD8(v5, "------------------ ------ ------ ------ --- ------------- -------------\n");
}

llvm::raw_ostream *llvm::DWARFDebugLine::Row::dump(llvm::DWARFDebugLine::Row *this, llvm::raw_ostream *a2)
{
  uint64_t v3;
  int v4;
  __int16 v5;
  llvm::raw_ostream *v6;
  unint64_t v7;
  llvm::raw_ostream *v8;
  char *v9;
  llvm::raw_ostream *v10;
  char *v11;
  llvm::raw_ostream *v12;
  char *v13;
  llvm::raw_ostream *v14;
  char *v15;
  llvm::raw_ostream *v16;
  char *v17;
  llvm::raw_ostream *result;
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD v21[3];
  int v22;
  __int16 v23;

  v3 = *(_QWORD *)this;
  v4 = *((_DWORD *)this + 4);
  v5 = *((_WORD *)this + 10);
  v21[0] = &off_1E8169EC8;
  v21[1] = "0x%16.16llx %6u %6u";
  v21[2] = v3;
  v22 = v4;
  v23 = v5;
  v6 = llvm::raw_ostream::operator<<(a2, (uint64_t)v21);
  v7 = *((unsigned __int16 *)this + 11) | ((unint64_t)*((unsigned __int8 *)this + 28) << 16) | ((unint64_t)*((unsigned int *)this + 6) << 32);
  v20[0] = &off_1E8169EE8;
  v20[1] = " %6u %3u %13u ";
  v20[2] = v7;
  v8 = llvm::raw_ostream::operator<<(v6, (uint64_t)v20);
  if ((*((_BYTE *)this + 29) & 1) != 0)
    v9 = " is_stmt";
  else
    v9 = (char *)&unk_1C871E93E;
  v10 = sub_1C4816AD8(v8, v9);
  if ((*((_BYTE *)this + 29) & 2) != 0)
    v11 = " basic_block";
  else
    v11 = (char *)&unk_1C871E93E;
  v12 = sub_1C4816AD8(v10, v11);
  if ((*((_BYTE *)this + 29) & 8) != 0)
    v13 = " prologue_end";
  else
    v13 = (char *)&unk_1C871E93E;
  v14 = sub_1C4816AD8(v12, v13);
  if ((*((_BYTE *)this + 29) & 0x10) != 0)
    v15 = " epilogue_begin";
  else
    v15 = (char *)&unk_1C871E93E;
  v16 = sub_1C4816AD8(v14, v15);
  if ((*((_BYTE *)this + 29) & 4) != 0)
    v17 = " end_sequence";
  else
    v17 = (char *)&unk_1C871E93E;
  result = sub_1C4816AD8(v16, v17);
  v19 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v19 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v19 + 1;
  *v19 = 10;
  return result;
}

char *llvm::DWARFDebugLine::getLineTable(llvm::DWARFDebugLine *this, unint64_t a2)
{
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v4 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (char *)this + 8;
  v3 = v4;
  if (!v4)
    goto LABEL_12;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = (char *)v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v2 || *((_QWORD *)v5 + 4) > a2)
LABEL_12:
    v5 = v2;
  if (v5 == v2)
    return 0;
  else
    return v5 + 40;
}

uint64_t llvm::DWARFDebugLine::ParsingState::advanceAddr(llvm::DWARFDebugLine::ParsingState *this, uint64_t a2, llvm::dwarf *a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  uint64_t result;
  const std::error_category *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t *);
  const std::error_category *v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t *);
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a4;
  v6 = *(_QWORD *)this;
  if (*(unsigned __int8 *)(*(_QWORD *)this + 38) > a3)
    v7 = llvm::dwarf::LNStandardString(a3);
  else
    v7 = "special";
  if (*((_BYTE *)this + 88))
  {
    if (*(unsigned __int16 *)(v6 + 16) < 4u || *(_BYTE *)(v6 + 34) == 1)
      goto LABEL_6;
    v12 = std::generic_category();
    v16 = v7;
    sub_1C549EFA4(&v17, 45, (uint64_t)v12, (uint64_t *)this + 10, (uint64_t *)&v16, &v18, (char *)(*(_QWORD *)this + 34));
    v14 = (void (*)(uint64_t, uint64_t *))*((_QWORD *)this + 12);
    v13 = *((_QWORD *)this + 13);
    v19 = v17;
    v14(v13, &v19);
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v6 = *(_QWORD *)this;
    if (*((_BYTE *)this + 88))
    {
LABEL_6:
      if (!*(_BYTE *)(v6 + 33))
      {
        v9 = std::generic_category();
        v16 = v7;
        sub_1C549F0F8(&v15, 22, (uint64_t)v9, (uint64_t)"line table program at offset 0x%8.8llx contains a %s opcode at offset 0x%8.8llx, but the prologue minimum_instruction_length value is 0, which prevents any address advancing", (uint64_t *)this + 10, (uint64_t *)&v16, &v18);
        v11 = (void (*)(uint64_t, uint64_t *))*((_QWORD *)this + 12);
        v10 = *((_QWORD *)this + 13);
        v19 = v15;
        v11(v10, &v19);
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        v6 = *(_QWORD *)this;
      }
    }
  }
  *((_BYTE *)this + 88) = 0;
  result = *(unsigned __int8 *)(v6 + 33) * a2;
  *((_QWORD *)this + 1) += result;
  return result;
}

uint64_t llvm::DWARFDebugLine::ParsingState::advanceAddrForOpcode(llvm::DWARFDebugLine::ParsingState *this, llvm::dwarf *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  const std::error_category *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t *);
  char v11;
  unsigned __int8 v12;
  unsigned int v13;
  uint64_t v14;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a3;
  v6 = *(_QWORD *)this;
  if (*((_BYTE *)this + 89) && !*(_BYTE *)(v6 + 37))
  {
    if (*(unsigned __int8 *)(v6 + 38) <= a2)
      v7 = "special";
    else
      v7 = llvm::dwarf::LNStandardString(a2);
    v8 = std::generic_category();
    v16 = v7;
    sub_1C549F0F8(&v17, 45, (uint64_t)v8, (uint64_t)"line table program at offset 0x%8.8llx contains a %s opcode at offset 0x%8.8llx, but the prologue line_range value is 0. The address and line will not be adjusted", (uint64_t *)this + 10, (uint64_t *)&v16, &v18);
    v10 = (void (*)(uint64_t, uint64_t *))*((_QWORD *)this + 12);
    v9 = *((_QWORD *)this + 13);
    v19 = v17;
    v10(v9, &v19);
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    *((_BYTE *)this + 89) = 0;
    v6 = *(_QWORD *)this;
  }
  if ((_DWORD)a2 == 8)
    v11 = -1;
  else
    v11 = (char)a2;
  v12 = v11 - *(_BYTE *)(v6 + 38);
  v13 = *(unsigned __int8 *)(v6 + 37);
  if (v13)
    v14 = v12 / v13;
  else
    v14 = 0;
  return llvm::DWARFDebugLine::ParsingState::advanceAddr(this, v14, a2, a3);
}

BOOL sub_1C624F5C0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  if (v2 < v3)
    return 1;
  if (v3 >= v2)
    return *(_QWORD *)(a1 + 8) < *(_QWORD *)(a2 + 8);
  return 0;
}

uint64_t sub_1C624F604(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  sub_1C624F674(a1 + 8, (__int128 *)(a2 + 8));
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  return a1;
}

__n128 sub_1C624F674(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;

  v2 = *a2;
  v3 = a2[1];
  *(_DWORD *)(a1 + 31) = *(_DWORD *)((char *)a2 + 31);
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  result = *(__n128 *)((char *)a2 + 88);
  *(__n128 *)(a1 + 88) = result;
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  return result;
}

uint64_t sub_1C624F6E8(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(char *)(a1 + 16));
}

void sub_1C624F71C()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C624F730(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1C624F738((unsigned __int8 *)(a1 + 8), a2);
}

llvm::raw_ostream *sub_1C624F738(unsigned __int8 *a1, llvm::raw_ostream *a2)
{
  char *v4;
  size_t v5;
  char *v6;
  size_t v7;
  void *v8;
  llvm::raw_ostream *result;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  _QWORD v14[3];

  v4 = llvm::dwarf::LNStandardString((llvm::dwarf *)*a1);
  if (v5)
  {
    v6 = v4;
    v7 = v5;
    v8 = (void *)*((_QWORD *)a2 + 4);
    if (v5 <= *((_QWORD *)a2 + 3) - (_QWORD)v8)
    {
      result = (llvm::raw_ostream *)memcpy(v8, v6, v5);
      *((_QWORD *)a2 + 4) += v7;
    }
    else
    {
      return llvm::raw_ostream::write(a2, v6, v5);
    }
  }
  else
  {
    v10 = sub_1C4816AD8(a2, "DW_");
    v11 = sub_1C4816AD8(v10, "LNS");
    v12 = sub_1C4816AD8(v11, "_unknown_");
    v13 = *a1;
    v14[0] = &off_1E8169E78;
    v14[1] = "%x";
    v14[2] = v13;
    return llvm::raw_ostream::operator<<(v12, (uint64_t)v14);
  }
  return result;
}

uint64_t sub_1C624F814(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

void sub_1C624F848()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C624F85C(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1C624F864(*(unsigned __int8 **)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *sub_1C624F864(unsigned __int8 *a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v11;
  unsigned int v12;
  size_t v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v17;

  v15 = a3;
  v16 = a4;
  v14 = 0;
  if (sub_1C617F438(&v15, &v14))
  {
    v7 = v14;
    v17 = 0;
    if (llvm::consumeUnsignedInteger((llvm *)&v15, (llvm::StringRef *)0xA, &v17, v6))
      v8 = 0;
    else
      v8 = v17;
    if (llvm::isPrefixedHexStyle(v7))
      v9 = v8 + 2;
    else
      v9 = v8;
    return llvm::write_hex(a2, *a1, v14, v9, 1);
  }
  if (v16)
  {
    v11 = 0;
    v12 = *v15;
    if (v12 <= 0x63)
    {
      if (v12 != 68)
      {
        if (v12 != 78)
          goto LABEL_20;
        goto LABEL_17;
      }
LABEL_18:
      v11 = 0;
      ++v15;
      goto LABEL_19;
    }
    if (v12 == 100)
      goto LABEL_18;
    if (v12 == 110)
    {
LABEL_17:
      ++v15;
      v11 = 1;
LABEL_19:
      --v16;
    }
  }
  else
  {
    v11 = 0;
  }
LABEL_20:
  v17 = 0;
  if (llvm::consumeUnsignedInteger((llvm *)&v15, (llvm::StringRef *)0xA, &v17, v6))
    v13 = 0;
  else
    v13 = v17;
  return llvm::write_integer(a2, *a1, v13, v11);
}

uint64_t sub_1C624F998(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 24), *(unsigned __int16 *)(a1 + 28));
}

uint64_t sub_1C624F9D4(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned __int16 *)(a1 + 16), *(unsigned __int8 *)(a1 + 18), *(unsigned int *)(a1 + 20));
}

uint64_t sub_1C624FA14(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1C624FA54(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t sub_1C624FA90(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t llvm::DWARFLocationTable::dumpLocationList(uint64_t a1, uint64_t *a2, llvm::raw_ostream *a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  __int128 *v22;
  const char *v23;
  uint64_t v24;
  llvm::raw_ostream *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];
  __int128 v34;
  uint64_t v35;
  _QWORD v36[3];
  _QWORD *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v31 = a7;
  v32 = a5;
  v34 = *a4;
  v14 = *((_QWORD *)a4 + 2);
  v33[0] = &off_1E8169FD8;
  v33[1] = a7;
  v33[3] = v33;
  v35 = v14;
  v36[0] = &off_1E8169FD8;
  v37 = v36;
  v36[1] = a7;
  v15 = *a2;
  v22 = (__int128 *)&unk_1E8133270;
  v23 = "0x%8.8llx: ";
  v24 = v15;
  llvm::raw_ostream::operator<<(a3, (uint64_t)&v22);
  v22 = &v34;
  v23 = (const char *)a8;
  v24 = a1;
  v25 = a3;
  v26 = &a9;
  v27 = a6;
  v28 = &v32;
  v29 = &v31;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t (*)(uint64_t, unsigned __int8 *), __int128 **))(*(_QWORD *)a1 + 16))(&v30, a1, a2, sub_1C54A2224, &v22);
  v16 = v30;
  if (!v30)
    goto LABEL_7;
  v21 = v30;
  v30 = 0;
  v17 = *(_QWORD *)(a8 + 48);
  if (v17)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v21);
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
LABEL_7:
    v18 = v37;
    if (v37 == v36)
    {
      v19 = 4;
      v18 = v36;
    }
    else
    {
      if (!v37)
        return v16 == 0;
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
    return v16 == 0;
  }
  sub_1C485C2F0();
  return sub_1C624FC70();
}

_BYTE *sub_1C624FC70(_QWORD *a1, _QWORD *a2, _QWORD *a3, unsigned int a4)
{
  if (!__CFADD__(*a2, a4) && a1[1] > *a2 + (unint64_t)a4 - 1)
    sub_1C54A2120(a3, a4);
  return llvm::DataExtractor::getU8(a1, (uint64_t)a2, (_BYTE *)*a3, a4);
}

_QWORD *llvm::DWARFDebugLoc::dumpRawEntry(_QWORD *result, uint64_t a2, llvm::raw_ostream *this, unsigned int a4, __int128 *a5, llvm::raw_ostream *a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  int v17;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;
  int v20;
  llvm::raw_ostream *v21;
  _BYTE *v22;
  _QWORD v23[2];
  int v24;
  __int16 v25;
  char v26;
  _QWORD v27[2];
  int v28;
  __int16 v29;
  char v30;
  _QWORD v31[12];

  v31[11] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a2)
  {
    v11 = result;
    if (*(_BYTE *)a2 == 4)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = (uint64_t *)(a2 + 16);
    }
    else
    {
      if (*((_BYTE *)result + 25) == 4)
        v12 = 0xFFFFFFFFLL;
      else
        v12 = -1;
      v13 = (uint64_t *)(a2 + 8);
    }
    v14 = *v13;
    v15 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v15 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 10);
    }
    else
    {
      *((_QWORD *)this + 4) = v15 + 1;
      *v15 = 10;
    }
    llvm::raw_ostream::indent(this, a4);
    v16 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v16 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 40);
    }
    else
    {
      *((_QWORD *)this + 4) = v16 + 1;
      *v16 = 40;
    }
    v17 = 2 * *((unsigned __int8 *)v11 + 25) + 2;
    v27[0] = v12;
    v27[1] = 0;
    v28 = v17;
    v29 = 1;
    v30 = 1;
    v18 = llvm::raw_ostream::operator<<(this, (uint64_t)v27);
    v19 = sub_1C4816AD8(v18, ", ");
    v20 = 2 * *((unsigned __int8 *)v11 + 25) + 2;
    v23[0] = v14;
    v23[1] = 0;
    v24 = v20;
    v25 = 1;
    v26 = 1;
    v21 = llvm::raw_ostream::operator<<(v19, (uint64_t)v23);
    v22 = (_BYTE *)*((_QWORD *)v21 + 4);
    if ((unint64_t)v22 >= *((_QWORD *)v21 + 3))
    {
      llvm::raw_ostream::write(v21, 41);
    }
    else
    {
      *((_QWORD *)v21 + 4) = v22 + 1;
      *v22 = 41;
    }
    sub_1C624C4A4((uint64_t)v31, a5);
    llvm::DWARFFormValue::dumpAddressSection(a6, this, (uint64_t)v31, *(_QWORD *)(a2 + 24));
    return sub_1C624C568(v31);
  }
  return result;
}

uint64_t llvm::DWARFDebugLoclists::visitLocationList@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, _BYTE *)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v7;
  unsigned int U8;
  unint64_t ULEB128;
  const std::error_category *v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t result;
  unsigned int v21;
  _BYTE v22[8];
  unint64_t RelocatedValue;
  uint64_t U32;
  uint64_t v25;
  void *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[2];

  v29 = *a2;
  v30[0] = 0;
  v7 = (uint64_t *)(a1 + 8);
  while (2)
  {
    v26 = &v28;
    v27 = xmmword_1C6612EF0;
    U8 = llvm::DataExtractor::getU8(v7, &v29, v30);
    v22[0] = U8;
    switch(U8)
    {
      case 0u:
      case 5u:
        goto LABEL_11;
      case 1u:
        ULEB128 = llvm::DataExtractor::getULEB128(v7, &v29, v30);
        goto LABEL_4;
      case 2u:
        v12 = llvm::DataExtractor::getULEB128(v7, &v29, v30);
        goto LABEL_7;
      case 3u:
        RelocatedValue = llvm::DataExtractor::getULEB128(v7, &v29, v30);
        if (*(unsigned __int16 *)(a1 + 48) > 4u)
          goto LABEL_8;
        U32 = llvm::DataExtractor::getU32(v7, &v29, v30);
        goto LABEL_10;
      case 4u:
        RelocatedValue = llvm::DataExtractor::getULEB128(v7, &v29, v30);
        U32 = llvm::DataExtractor::getULEB128(v7, &v29, v30);
        v25 = -1;
        goto LABEL_10;
      case 6u:
        ULEB128 = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)v7, *(unsigned __int8 *)(a1 + 25), (unint64_t *)&v29, &v25, v30);
LABEL_4:
        RelocatedValue = ULEB128;
        goto LABEL_10;
      case 7u:
        RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)v7, *(unsigned __int8 *)(a1 + 25), (unint64_t *)&v29, &v25, v30);
        v13 = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)v7, *(unsigned __int8 *)(a1 + 25), (unint64_t *)&v29, 0, v30);
        goto LABEL_9;
      case 8u:
        v12 = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)v7, *(unsigned __int8 *)(a1 + 25), (unint64_t *)&v29, &v25, v30);
LABEL_7:
        RelocatedValue = v12;
LABEL_8:
        v13 = llvm::DataExtractor::getULEB128(v7, &v29, v30);
LABEL_9:
        U32 = v13;
LABEL_10:
        U8 = v22[0];
LABEL_11:
        if (U8 > 6 || ((1 << U8) & 0x43) == 0)
        {
          if (*(unsigned __int16 *)(a1 + 48) < 5u)
            v16 = sub_1C63871E8((uint64_t)v7, (unint64_t *)&v29, v30);
          else
            v16 = llvm::DataExtractor::getULEB128(v7, &v29, v30);
          sub_1C624FC70(v7, &v29, &v26, v16);
        }
        if (v30[0])
        {
          v11 = 0;
          *a5 = v30[0];
          v30[0] = 0;
LABEL_15:
          v14 = 1;
        }
        else
        {
          v15 = a3(a4, v22);
          if (v22[0])
            v14 = v15;
          else
            v14 = 0;
          v11 = 1;
        }
        if (v26 != &v28)
          free(v26);
        if ((v11 & 1) == 0)
          goto LABEL_31;
        if (v14)
          continue;
        *a2 = v29;
        *a5 = 0;
LABEL_31:
        result = v30[0];
        if (v30[0])
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30[0] + 8))(v30[0]);
        return result;
      default:
        v30[0] = 0;
        v10 = std::generic_category();
        v21 = v22[0];
        sub_1C54A1BB0(a5, 92, (uint64_t)v10, &v21);
        v11 = 0;
        goto LABEL_15;
    }
  }
}

llvm::raw_ostream *llvm::ResolverError::log(llvm::ResolverError *this, llvm::raw_ostream *a2)
{
  char *v4;
  int v5;
  _QWORD v7[2];
  int v8;
  char *v9;

  v4 = llvm::dwarf::LocListEncodingString((llvm::dwarf *)*((unsigned int *)this + 3));
  v5 = *((_DWORD *)this + 2);
  v7[0] = &unk_1E8169CA0;
  v7[1] = "unable to resolve indirect address %u for: %s";
  v8 = v5;
  v9 = v4;
  return llvm::raw_ostream::operator<<(a2, (uint64_t)v7);
}

uint64_t sub_1C62501FC(uint64_t a1)
{
  sub_1C624E1D0((char **)(a1 + 48));
  return a1;
}

void sub_1C6250224(uint64_t a1)
{
  sub_1C624E1D0((char **)(a1 + 48));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6250260()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6250278()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C625028C()
{
  std::generic_category();
  return 22;
}

void *sub_1C62502A8()
{
  return &llvm::ResolverError::ID;
}

BOOL sub_1C62502B4(uint64_t a1, void *a2)
{
  return a2 == &llvm::ResolverError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

uint64_t sub_1C62502D4(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t llvm::DWARFDebugRangeList::clear(uint64_t this)
{
  *(_QWORD *)this = -1;
  *(_BYTE *)(this + 8) = 0;
  *(_QWORD *)(this + 24) = *(_QWORD *)(this + 16);
  return this;
}

uint64_t llvm::RangeListEntry::extract@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *v8;
  llvm::dwarf *U8;
  uint64_t v10;
  unint64_t v11;
  unint64_t RelocatedValue;
  char *v13;
  const std::error_category *v14;
  uint64_t result;
  const std::error_category *v16;
  unint64_t ULEB128;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;

  *(_QWORD *)a1 = *a3;
  *(_QWORD *)(a1 + 16) = -1;
  v8 = (_QWORD *)(a1 + 16);
  U8 = (llvm::dwarf *)llvm::DataExtractor::getU8(a2, a3, 0);
  v10 = *a3;
  v18 = *a3;
  v19 = 0;
  switch((int)U8)
  {
    case 0:
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      goto LABEL_13;
    case 1:
      ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)a2, &v18, &v19);
      goto LABEL_20;
    case 2:
    case 3:
    case 4:
      v11 = llvm::DataExtractor::getULEB128((uint64_t *)a2, &v18, &v19);
      goto LABEL_3;
    case 5:
      ULEB128 = llvm::DWARFDataExtractor::getRelocatedValue(a2, *(unsigned __int8 *)(a2 + 17), (unint64_t *)&v18, v8, (uint64_t *)&v19);
LABEL_20:
      *(_QWORD *)(a1 + 24) = ULEB128;
      goto LABEL_5;
    case 6:
      *(_QWORD *)(a1 + 24) = llvm::DWARFDataExtractor::getRelocatedValue(a2, *(unsigned __int8 *)(a2 + 17), (unint64_t *)&v18, v8, (uint64_t *)&v19);
      RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue(a2, *(unsigned __int8 *)(a2 + 17), (unint64_t *)&v18, 0, (uint64_t *)&v19);
      goto LABEL_4;
    case 7:
      v11 = llvm::DWARFDataExtractor::getRelocatedValue(a2, *(unsigned __int8 *)(a2 + 17), (unint64_t *)&v18, v8, (uint64_t *)&v19);
LABEL_3:
      *(_QWORD *)(a1 + 24) = v11;
      RelocatedValue = llvm::DataExtractor::getULEB128((uint64_t *)a2, &v18, &v19);
LABEL_4:
      *(_QWORD *)(a1 + 32) = RelocatedValue;
LABEL_5:
      v13 = v19;
      if (v19)
      {
        v19 = 0;
        v20 = v13;
        sub_1C4D62BD4(&v20, &v21);
        if (v20)
          (*(void (**)(char *))(*(_QWORD *)v20 + 8))(v20);
        v14 = std::generic_category();
        v21 = llvm::dwarf::RLEString(U8);
        sub_1C54A57B8(a4, 22, (uint64_t)v14, (uint64_t *)&v21, (uint64_t *)a1);
      }
      else
      {
        v10 = v18;
LABEL_13:
        *a3 = v10;
        *(_BYTE *)(a1 + 8) = (_BYTE)U8;
        *a4 = 0;
      }
      break;
    default:
      v20 = 0;
      sub_1C4D62BD4(&v20, &v21);
      if (v20)
        (*(void (**)(char *))(*(_QWORD *)v20 + 8))(v20);
      v16 = std::generic_category();
      LODWORD(v21) = (_DWORD)U8;
      sub_1C54A5674(45, (uint64_t)v16, (uint64_t)"unknown rnglists encoding 0x%x at offset 0x%llx", (int *)&v21, (uint64_t *)a1, a4);
      break;
  }
  result = (uint64_t)v19;
  if (v19)
    return (*(uint64_t (**)(char *))(*(_QWORD *)v19 + 8))(v19);
  return result;
}

int8x16_t **llvm::DWARFDebugRnglist::getAbsoluteRanges@<X0>(int8x16_t **a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  v5 = a3;
  return llvm::DWARFDebugRnglist::getAbsoluteRanges(a1, (uint64_t)&v6, (_QWORD *(*)(__int128 *__return_ptr, uint64_t, _QWORD))sub_1C54A63BC, (uint64_t)&v5, a4);
}

char *llvm::DWARFDie::getShortName(llvm::DWARFDie *this)
{
  char *result;
  char v2;
  unsigned __int16 v3;
  _BYTE v4[56];

  if (!*(_QWORD *)this || !*((_QWORD *)this + 1))
    return 0;
  v3 = 3;
  llvm::DWARFDie::findRecursively(this, &v3, 1, v4);
  result = sub_1C624DEB4((llvm::DWARFFormValue *)v4);
  if (!v2)
    return 0;
  return result;
}

llvm::DWARFUnit **llvm::DWARFDie::find@<X0>(llvm::DWARFUnit **result@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  llvm::DWARFUnit *v3;
  uint64_t *v4;

  v3 = *result;
  if (*result)
  {
    v4 = (uint64_t *)result[1];
    if (v4)
    {
      result = (llvm::DWARFUnit **)v4[2];
      if (result)
        return (llvm::DWARFUnit **)llvm::DWARFAbbreviationDeclaration::getAttributeValue((uint64_t)result, v3, *v4, a2, a3);
    }
  }
  *a3 = 0;
  a3[48] = 0;
  return result;
}

llvm::DWARFUnit **llvm::DWARFDie::find@<X0>(llvm::DWARFUnit **result@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  llvm::DWARFUnit **v5;
  llvm::DWARFUnit *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;

  if (*result
    && (v5 = result, (v6 = result[1]) != 0)
    && ((v7 = *((_QWORD *)v6 + 2)) != 0 ? (v8 = a3 == 0) : (v8 = 1), !v8))
  {
    v10 = 2 * a3;
    while (1)
    {
      result = (llvm::DWARFUnit **)llvm::DWARFAbbreviationDeclaration::getAttributeValue(v7, *v5, *(_QWORD *)v5[1], *a2, a4);
      if (a4[48])
        break;
      ++a2;
      v10 -= 2;
      if (!v10)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    *a4 = 0;
    a4[48] = 0;
  }
  return result;
}

llvm::DWARFUnit *llvm::DWARFDie::getAttributeValueAsReferencedDie(llvm::DWARFDie *this, const llvm::DWARFFormValue *a2)
{
  llvm::DWARFUnit *result;
  unint64_t v4;
  llvm::DWARFUnit *v5;
  unint64_t v6;
  char v7;

  llvm::DWARFFormValue::getAsRelativeReference((unsigned __int16 *)a2, (uint64_t)&v5);
  if (!v7)
    return 0;
  result = v5;
  if (v5)
  {
    v4 = v6 + *((_QWORD *)v5 + 3);
    return sub_1C624DB94(result, v4);
  }
  result = (llvm::DWARFUnit *)llvm::DWARFUnitVector::getUnitForOffset(*(uint64_t ***)(*(_QWORD *)this + 216), v6);
  if (result)
  {
    v4 = v6;
    return sub_1C624DB94(result, v4);
  }
  return result;
}

llvm::DWARFUnit *llvm::DWARFDie::resolveTypeUnitReference(llvm::DWARFUnit **this)
{
  uint64_t AsReferenceUVal;
  char v3;
  const llvm::DWARFUnitIndex::Entry *TypeUnitForHash;
  _BYTE v6[56];

  llvm::DWARFDie::find(this, 105, v6);
  if (v6[48]
    && (AsReferenceUVal = llvm::DWARFFormValue::getAsReferenceUVal((llvm::DWARFFormValue *)v6), v3)
    && (TypeUnitForHash = llvm::DWARFContext::getTypeUnitForHash(*((llvm::DWARFContext **)*this + 1), *((_WORD *)*this + 16), AsReferenceUVal, *((unsigned __int8 *)*this + 209))) != 0)
  {
    return sub_1C624DB94(TypeUnitForHash, *((_QWORD *)TypeUnitForHash + 3) + *((_QWORD *)TypeUnitForHash + 9));
  }
  else
  {
    return *this;
  }
}

uint64_t llvm::DWARFDie::getLowAndHighPC(llvm::DWARFUnit **this, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v9;
  unint64_t HighPC;
  char v11;
  unint64_t v12[2];
  char v13;
  _QWORD v14[6];
  char v15;

  llvm::DWARFDie::find(this, 17, v14);
  if (!v15)
    return 0;
  llvm::DWARFFormValue::getAsSectionedAddress(v14, (uint64_t)v12);
  if (!v13)
    return 0;
  v9 = v12[0];
  HighPC = llvm::DWARFDie::getHighPC(this, v12[0]);
  if (!v11)
    return 0;
  *a2 = v9;
  *a3 = HighPC;
  *a4 = v12[1];
  return 1;
}

void llvm::DWARFDie::getAddressRanges(llvm::DWARFDie *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  llvm::DWARFUnit *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(*((_QWORD *)this + 1) + 16))
    goto LABEL_2;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  if (llvm::DWARFDie::getLowAndHighPC((llvm::DWARFUnit **)this, &v12, &v11, &v10))
  {
    v13[0] = v12;
    v13[1] = v11;
    v13[2] = v10;
    sub_1C54AC3E4(&v7, v13, 1uLL);
    *(_BYTE *)(a2 + 24) &= ~1u;
    *(_OWORD *)a2 = v7;
    *(_QWORD *)(a2 + 16) = v8;
    return;
  }
  llvm::DWARFDie::find((llvm::DWARFUnit **)this, 85, &v7);
  if (v9)
  {
    v4 = (unsigned __int16)v7;
    v5 = *(llvm::DWARFUnit **)this;
    if (llvm::DWARFFormValue::isFormClass((unsigned __int16 *)&v7, 8))
      v6 = *((_QWORD *)&v7 + 1);
    else
      v6 = 0;
    if (v4 == 35)
      llvm::DWARFUnit::findRnglistFromIndex(v5, v6, a2);
    else
      llvm::DWARFUnit::findRnglistFromOffset(v5, v6, a2);
  }
  else
  {
LABEL_2:
    *(_BYTE *)(a2 + 24) &= ~1u;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
  }
}

char *llvm::DWARFDie::getLinkageName(llvm::DWARFDie *this)
{
  char *result;
  char v2;
  int v3;
  _BYTE v4[56];

  if (!*(_QWORD *)this || !*((_QWORD *)this + 1))
    return 0;
  v3 = 7217159;
  llvm::DWARFDie::findRecursively(this, (unsigned __int16 *)&v3, 2, v4);
  result = sub_1C624DEB4((llvm::DWARFFormValue *)v4);
  if (!v2)
    return 0;
  return result;
}

double llvm::DWARFDie::attributes@<D0>(llvm::DWARFDie *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v4 = (_QWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)&v13 = *(_QWORD *)this;
  *((_QWORD *)&v13 + 1) = v4;
  DWORD2(v14) = 0;
  WORD6(v14) = 0;
  LOWORD(v15) = 0;
  BYTE2(v15) = 0;
  *((_QWORD *)&v15 + 1) = 0;
  *(_QWORD *)&v16 = 0;
  v17 = 0uLL;
  LODWORD(v18) = 0;
  v5 = (unsigned __int8 *)v4[2];
  *(_QWORD *)&v14 = *v4 + v5[6];
  llvm::DWARFDie::attribute_iterator::updateForIndex((uint64_t)&v13, (const llvm::DWARFAbbreviationDeclaration *)v5, 0);
  v6 = *(_QWORD *)this;
  v7 = *((_QWORD *)this + 1);
  v8 = *(_DWORD *)(*(_QWORD *)(v7 + 16) + 16);
  v9 = v16;
  *(_OWORD *)(a2 + 32) = v15;
  *(_OWORD *)(a2 + 48) = v9;
  *(_OWORD *)(a2 + 64) = v17;
  v10 = v18;
  result = *(double *)&v13;
  v12 = v14;
  *(_OWORD *)a2 = v13;
  *(_OWORD *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 80) = v10;
  *(_QWORD *)(a2 + 88) = v6;
  *(_QWORD *)(a2 + 96) = v7;
  *(_QWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 112) = 0;
  *(_WORD *)(a2 + 116) = 0;
  *(_WORD *)(a2 + 120) = 0;
  *(_BYTE *)(a2 + 122) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_DWORD *)(a2 + 168) = v8;
  return result;
}

_QWORD *llvm::DWARFDie::dump(llvm::DWARFDie *this)
{
  llvm::raw_ostream *v2;
  _QWORD v4[3];
  _QWORD v5[4];
  _QWORD v6[5];

  v6[4] = *MEMORY[0x1E0C80C00];
  v2 = (llvm::raw_ostream *)llvm::errs(this);
  v5[2] = 0;
  v6[2] = 0;
  v4[0] = -1;
  v4[1] = 0x1040000FFFFFFFFLL;
  v4[2] = 0;
  v5[0] = &unk_1E8169658;
  v5[1] = llvm::WithColor::defaultErrorHandler;
  v5[3] = v5;
  v6[0] = &unk_1E8169658;
  v6[1] = llvm::WithColor::defaultWarningHandler;
  v6[3] = v6;
  llvm::DWARFDie::dump((uint64_t *)this, v2, 0, (uint64_t)v4);
  return sub_1C624C568(v4);
}

uint64_t llvm::DWARFDie::attribute_iterator::updateForIndex(uint64_t this, const llvm::DWARFAbbreviationDeclaration *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v3 = this;
  *(_DWORD *)(this + 80) = a3;
  if (*((_DWORD *)a2 + 4) <= a3)
  {
    *(_QWORD *)(this + 16) = 0;
    *(_DWORD *)(this + 24) = 0;
    *(_WORD *)(this + 28) = 0;
    *(_WORD *)(this + 32) = 0;
    *(_BYTE *)(this + 34) = 0;
    *(_QWORD *)(this + 40) = 0;
    *(_QWORD *)(this + 48) = 0;
    *(_QWORD *)(this + 64) = 0;
    *(_QWORD *)(this + 72) = 0;
  }
  else
  {
    v4 = *((_QWORD *)a2 + 1);
    v5 = (_WORD *)(v4 + 16 * a3);
    *(_WORD *)(this + 28) = *v5;
    v6 = *(_QWORD *)(this + 16) + *(unsigned int *)(this + 24);
    *(_QWORD *)(this + 16) = v6;
    v13 = v6;
    v7 = (unsigned __int16)v5[1];
    if ((_DWORD)v7 == 33)
    {
      this = llvm::DWARFFormValue::createFromSValue(v7, *(_QWORD *)(v4 + 16 * a3 + 8), (uint64_t)&v10);
      v8 = v11;
      *(_OWORD *)(v3 + 32) = v10;
      *(_OWORD *)(v3 + 48) = v8;
      *(_OWORD *)(v3 + 64) = v12;
    }
    else
    {
      this = llvm::DWARFFormValue::createFromUnit(*(llvm::DWARFUnit **)v3, v7, &v13, (uint64_t)&v10);
      v9 = v11;
      *(_OWORD *)(v3 + 32) = v10;
      *(_OWORD *)(v3 + 48) = v9;
      *(_OWORD *)(v3 + 64) = v12;
      LODWORD(v6) = v13;
    }
    *(_DWORD *)(v3 + 24) = v6 - *(_DWORD *)(v3 + 16);
  }
  return this;
}

BOOL llvm::DWARFAttribute::mayHaveLocationList(int a1)
{
  _BOOL8 result;

  result = 1;
  if ((a1 - 25) > 0x34 || ((1 << (a1 - 25)) & 0x12A08080020001) == 0)
    return a1 == 2;
  return result;
}

uint64_t llvm::DWARFAttribute::mayHaveLocationExpr(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 > 76)
  {
    if (((a1 - 77) > 0x39 || ((1 << (a1 - 77)) & 0x3C600100000001FLL) == 0)
      && a1 != 8465
      && a1 != 8467)
    {
      return 0;
    }
  }
  else if (((a1 - 11) > 0x3F || ((1 << (a1 - 11)) & 0xA820301880804007) == 0)
         && a1 != 2)
  {
    return 0;
  }
  return result;
}

void sub_1C6250D2C()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C6250D40(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1C624C144(*(unsigned __int16 **)(a1 + 8), a2);
}

void sub_1C6250D4C()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C6250D60(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1C624C274(*(unsigned __int16 **)(a1 + 8), a2);
}

uint64_t sub_1C6250D68(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t FirstChild;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v4 = 0;
  if (a2)
  {
    FirstChild = 0;
    result = 0;
    v9 = 0;
    if (a3)
    {
      FirstChild = llvm::DWARFUnit::getFirstChild(a2, a3);
      v4 = v10;
      result = llvm::DWARFUnit::getLastChild(a2, a3);
    }
  }
  else
  {
    FirstChild = 0;
    result = 0;
    v9 = 0;
  }
  *a1 = FirstChild;
  a1[1] = v4;
  a1[2] = result;
  a1[3] = v9;
  return result;
}

uint64_t sub_1C6250DEC(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(char *)(a1 + 20));
}

uint64_t llvm::DWARFExpression::print(uint64_t a1, llvm::raw_ostream *a2, __int128 *a3, llvm::MCRegisterInfo *a4, llvm::DWARFUnit *a5, int a6)
{
  uint64_t result;
  int v14;
  int v15;
  BOOL v16;
  unint64_t v17;
  unint64_t i;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 v25[8];
  unint64_t v26;
  int v27;
  __int128 v28[5];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 8))
    sub_1C4816AD8(a2, "<empty>");
  sub_1C54ADD60((uint64_t)&v23, (__int128 *)a1, 0);
  result = sub_1C54ADD60((uint64_t)&v21, (__int128 *)a1, *(_QWORD *)(a1 + 8));
  if (v23 != v21 || v24 != v22)
  {
    v14 = 0;
    v15 = 0;
    while (1)
    {
      sub_1C624C4A4((uint64_t)v28, a3);
      v16 = llvm::DWARFExpression::Operation::print(v25, a2, v28, (_QWORD *)a1, a4, a5, a6);
      result = (uint64_t)sub_1C624C568(v28);
      if (!v16)
        break;
      if (v25[0] == 163 || v25[0] == 243)
      {
        sub_1C4816AD8(a2, "(");
        v14 = v27;
        v15 = v26;
      }
      else
      {
        v17 = v26;
        if (v14)
        {
          v14 += v15 - v26;
          if (!v14)
          {
            sub_1C4816AD8(a2, ")");
            v17 = v26;
          }
        }
        if (v17 < *(_QWORD *)(a1 + 8))
          sub_1C4816AD8(a2, ", ");
      }
      result = (uint64_t)sub_1C54AD0C8(&v23);
      if (v23 == v21 && v24 == v22)
        return result;
    }
    for (i = v26; i < *(_QWORD *)(a1 + 8); result = (uint64_t)llvm::raw_ostream::operator<<(a2, (uint64_t)v20))
    {
      if (llvm::DataExtractor::prepareRead(a1, i, 1, 0))
        v19 = *(unsigned __int8 *)(*(_QWORD *)a1 + i++);
      else
        v19 = 0;
      v20[0] = &unk_1E8145938;
      v20[1] = " %02x";
      v20[2] = v19;
    }
  }
  return result;
}

uint64_t llvm::DWARFFormValue::createFromSValue@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_WORD *)a3 = result;
  *(_BYTE *)(a3 + 2) = 0;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  return result;
}

uint64_t llvm::DWARFFormValue::createFromUValue@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_WORD *)a3 = result;
  *(_BYTE *)(a3 + 2) = 0;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  return result;
}

uint64_t llvm::DWARFFormValue::createFromPValue@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_WORD *)a3 = result;
  *(_BYTE *)(a3 + 2) = 0;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  return result;
}

uint64_t llvm::DWARFFormValue::createFromUnit@<X0>(llvm::DWARFUnit *this@<X1>, __int16 a2@<W0>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  __n128 v8[2];

  *(_WORD *)a4 = a2;
  *(_BYTE *)(a4 + 2) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  llvm::DWARFUnit::getDebugInfoExtractor(this, v8);
  return llvm::DWARFFormValue::extractValue((unsigned __int16 *)a4, (uint64_t *)v8, a3, *((_DWORD *)this + 8), 0, (uint64_t)this);
}

uint64_t llvm::DWARFFormValue::skipValue(unsigned __int16 ULEB128, uint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unsigned __int16 FixedFormByteSize;
  uint64_t v8;
  unint64_t v10;
  _BOOL4 v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;

  while (2)
  {
    if (ULEB128 <= 0x1F00u)
    {
      switch(ULEB128)
      {
        case 1u:
        case 5u:
        case 6u:
        case 7u:
        case 0xBu:
        case 0xCu:
        case 0xEu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x17u:
        case 0x19u:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x20u:
        case 0x21u:
        case 0x24u:
        case 0x25u:
        case 0x26u:
        case 0x28u:
        case 0x29u:
        case 0x2Au:
        case 0x2Cu:
          goto LABEL_6;
        case 3u:
          v14 = sub_1C63871E8((uint64_t)a2, a3, 0);
          break;
        case 4u:
          v14 = sub_1C6387364((uint64_t)a2, a3, 0);
          break;
        case 8u:
          llvm::DataExtractor::getCStrRef(a2, a3, 0);
          return 1;
        case 9u:
        case 0x18u:
          v8 = *a3 + llvm::DataExtractor::getULEB128(a2, (uint64_t *)a3, 0);
          goto LABEL_8;
        case 0xAu:
          v10 = *a3;
          v11 = llvm::DataExtractor::prepareRead((uint64_t)a2, *a3, 1, 0);
          v12 = *a3;
          if (v11)
          {
            v13 = *(unsigned __int8 *)(*a2 + v10);
            ++v12;
          }
          else
          {
            v13 = 0;
          }
          v8 = v12 + v13;
          goto LABEL_8;
        case 0xDu:
          llvm::DataExtractor::getSLEB128(a2, (uint64_t *)a3, 0);
          return 1;
        case 0xFu:
        case 0x15u:
        case 0x1Au:
        case 0x1Bu:
        case 0x22u:
        case 0x23u:
          goto LABEL_10;
        case 0x16u:
          ULEB128 = llvm::DataExtractor::getULEB128(a2, (uint64_t *)a3, 0);
          continue;
        default:
          return 0;
      }
      v8 = *a3 + v14;
      goto LABEL_8;
    }
    break;
  }
  if (ULEB128 - 7937 < 2)
  {
LABEL_10:
    llvm::DataExtractor::getULEB128(a2, (uint64_t *)a3, 0);
    return 1;
  }
  if (ULEB128 - 7968 >= 2)
  {
    if (ULEB128 == 8193)
    {
      llvm::DataExtractor::getULEB128(a2, (uint64_t *)a3, 0);
      v8 = *a3 + 4;
      goto LABEL_8;
    }
  }
  else
  {
LABEL_6:
    FixedFormByteSize = llvm::dwarf::getFixedFormByteSize(ULEB128, a4 & 0xFFFFFFFFFFFFLL);
    if (FixedFormByteSize >= 0x100u)
    {
      v8 = *a3 + FixedFormByteSize;
LABEL_8:
      *a3 = v8;
      return 1;
    }
  }
  return 0;
}

uint64_t llvm::DWARFFormValue::isFormClass(unsigned __int16 *a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  v2 = *a1;
  if (v2 <= 0x2D && dword_1C8651CEC[v2] == a2)
    return 1;
  if (*a1 <= 0x1F1Fu)
  {
    if ((_DWORD)v2 != 7937)
    {
      if ((_DWORD)v2 != 7938)
        goto LABEL_16;
      return a2 == 4;
    }
    return a2 == 1;
  }
  switch((_DWORD)v2)
  {
    case 0x2001:
      return a2 == 1;
    case 0x1F21:
      return a2 == 4;
    case 0x1F20:
      return a2 == 6;
  }
LABEL_16:
  if (a2 != 8)
    return 0;
  if ((v2 - 6) < 2)
  {
    v5 = *((_QWORD *)a1 + 4);
    if (!v5)
      return 1;
    return *(unsigned __int16 *)(v5 + 32) < 4u;
  }
  else
  {
    result = 1;
    if ((_DWORD)v2 != 14 && (_DWORD)v2 != 31)
      return 0;
  }
  return result;
}

llvm::raw_ostream *llvm::DWARFFormValue::dumpAddress(llvm::DWARFFormValue *this, llvm::raw_ostream *a2, uint64_t a3)
{
  _QWORD v4[2];
  char v5;
  char v6;
  uint64_t v7;

  v4[0] = &off_1E816A1C0;
  v4[1] = "0x%*.*llx";
  v5 = 2 * (_BYTE)a2;
  v6 = 2 * (_BYTE)a2;
  v7 = a3;
  return llvm::raw_ostream::operator<<(this, (uint64_t)v4);
}

_QWORD *llvm::DWARFFormValue::dumpSectionedAddress(uint64_t a1, llvm::raw_ostream *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  char v9;
  llvm::raw_ostream *v10;
  _QWORD v12[2];
  char v13;
  char v14;
  uint64_t v15;
  _QWORD v16[12];

  v16[11] = *MEMORY[0x1E0C80C00];
  v9 = *(_BYTE *)(*(_QWORD *)(a1 + 32) + 34);
  v12[0] = &off_1E816A1C0;
  v12[1] = "0x%*.*llx";
  v13 = 2 * v9;
  v14 = 2 * v9;
  v15 = a4;
  llvm::raw_ostream::operator<<(a2, (uint64_t)v12);
  v10 = *(llvm::raw_ostream **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 520);
  sub_1C624C4A4((uint64_t)v16, a3);
  llvm::DWARFFormValue::dumpAddressSection(v10, a2, (uint64_t)v16, a5);
  return sub_1C624C568(v16);
}

void llvm::DWARFFormValue::dump(unsigned __int16 *a1, llvm::raw_ostream *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  __int128 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  const char *v17;
  llvm::raw_ostream *v18;
  const char *v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned int v30;
  char *v31;
  size_t v32;
  _BYTE *v33;
  const char *v34;
  uint64_t (**v35)(llvm::format_object_base *__hidden);
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  char v41;
  llvm::raw_ostream *v42;
  const char *v43;
  unint64_t v44;
  __int128 v45[5];
  __int128 v46[5];
  __int128 v47[5];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a1 + 1);
  if (*(_BYTE *)(a3 + 15))
  {
    llvm::WithColor::WithColor(&v35, a2, 0, 0);
    v7 = (uint64_t *)v35;
    llvm::WithColor::~WithColor((llvm::WithColor *)&v35);
  }
  else
  {
    v7 = llvm::nulls((llvm *)a1);
  }
  if (*((_BYTE *)a1 + 2))
    v8 = 16;
  else
    v8 = 8;
  v9 = *a1;
  if (*a1 <= 0x1F00u)
  {
    switch(*a1)
    {
      case 1u:
        sub_1C624C4A4((uint64_t)v47, (__int128 *)a3);
        llvm::DWARFFormValue::dumpSectionedAddress((uint64_t)a1, (llvm::raw_ostream *)v7, v47, *((_QWORD *)a1 + 1), *((_QWORD *)a1 + 3));
        v14 = v47;
        goto LABEL_92;
      case 3u:
      case 4u:
      case 9u:
      case 0xAu:
      case 0x18u:
        if (v6)
        {
          switch(*a1)
          {
            case 3u:
              v10 = (unsigned __int8 *)&unk_1E8169900;
              v11 = (unsigned __int16)v6;
              v12 = "<0x%4.4x> ";
              goto LABEL_76;
            case 4u:
              v10 = (unsigned __int8 *)&off_1E8132728;
              v11 = v6;
              v12 = "<0x%8.8x> ";
              goto LABEL_76;
            case 5u:
            case 6u:
            case 7u:
            case 8u:
              goto LABEL_78;
            case 9u:
              goto LABEL_73;
            case 0xAu:
              v10 = (unsigned __int8 *)&unk_1E8145938;
              v11 = v6;
              v12 = "<0x%2.2x> ";
LABEL_76:
              v35 = (uint64_t (**)(llvm::format_object_base *__hidden))v10;
              v36 = v12;
              v37 = v11;
              goto LABEL_77;
            default:
              if ((_DWORD)v9 != 24)
                goto LABEL_78;
LABEL_73:
              v35 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E8133270;
              v36 = "<0x%llx> ";
              v37 = v6;
LABEL_77:
              llvm::raw_ostream::operator<<((llvm::raw_ostream *)v7, (uint64_t)&v35);
LABEL_78:
              v28 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
              if (!v28)
              {
                v21 = "NULL";
                goto LABEL_34;
              }
              if (v6 >= 1)
              {
                v29 = &v28[v6];
                do
                {
                  v35 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E8145938;
                  v30 = *v28++;
                  v36 = "%2.2x ";
                  v37 = v30;
                  llvm::raw_ostream::operator<<((llvm::raw_ostream *)v7, (uint64_t)&v35);
                }
                while (v28 < v29);
              }
              break;
          }
        }
        return;
      case 5u:
        v15 = (unsigned __int8 *)&unk_1E8169900;
        v16 = (unsigned __int16)v6;
        v17 = "0x%04x";
        goto LABEL_21;
      case 6u:
        v15 = (unsigned __int8 *)&off_1E8132728;
        v16 = v6;
        v17 = "0x%08x";
        goto LABEL_21;
      case 7u:
        v35 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E8133270;
        v36 = "0x%016llx";
        v37 = v6;
        goto LABEL_22;
      case 8u:
        v22 = (_BYTE *)*((_QWORD *)a2 + 4);
        if ((unint64_t)v22 >= *((_QWORD *)a2 + 3))
        {
          llvm::raw_ostream::write(a2, 34);
        }
        else
        {
          *((_QWORD *)a2 + 4) = v22 + 1;
          *v22 = 34;
        }
        v31 = (char *)*((_QWORD *)a1 + 1);
        if (v31)
          v32 = strlen(v31);
        else
          v32 = 0;
        llvm::raw_ostream::write_escaped(a2, v31, v32, 0);
        v33 = (_BYTE *)*((_QWORD *)a2 + 4);
        if ((unint64_t)v33 >= *((_QWORD *)a2 + 3))
        {
          llvm::raw_ostream::write(a2, 34);
        }
        else
        {
          *((_QWORD *)a2 + 4) = v33 + 1;
          *v33 = 34;
        }
        return;
      case 0xBu:
      case 0xCu:
        v15 = (unsigned __int8 *)&unk_1E8145938;
        v16 = v6;
        v17 = "0x%02x";
        goto LABEL_21;
      case 0xDu:
      case 0x21u:
        llvm::raw_ostream::operator<<(a2, *((_QWORD *)a1 + 1));
        return;
      case 0xEu:
        if (!*(_BYTE *)(a3 + 20))
          goto LABEL_101;
        v34 = " .debug_str[0x%0*llx] = ";
        goto LABEL_107;
      case 0xFu:
        llvm::raw_ostream::operator<<(a2, *((_QWORD *)a1 + 1));
        return;
      case 0x10u:
      case 0x20u:
        v19 = "0x%016llx";
        goto LABEL_26;
      case 0x11u:
        if (!*(_BYTE *)(a3 + 20))
          goto LABEL_52;
        v23 = (unsigned __int8 *)&unk_1E8145938;
        v24 = v6;
        v25 = "cu + 0x%2.2x";
        goto LABEL_50;
      case 0x12u:
        if (!*(_BYTE *)(a3 + 20))
          goto LABEL_52;
        v23 = (unsigned __int8 *)&unk_1E8169900;
        v24 = (unsigned __int16)v6;
        goto LABEL_49;
      case 0x13u:
        if (!*(_BYTE *)(a3 + 20))
          goto LABEL_52;
        v23 = (unsigned __int8 *)&off_1E8132728;
        v24 = v6;
LABEL_49:
        v25 = "cu + 0x%4.4x";
LABEL_50:
        v35 = (uint64_t (**)(llvm::format_object_base *__hidden))v23;
        v36 = v25;
        v37 = v24;
        goto LABEL_51;
      case 0x14u:
        if (!*(_BYTE *)(a3 + 20))
          goto LABEL_52;
        v27 = "cu + 0x%8.8llx";
        goto LABEL_64;
      case 0x15u:
        if (!*(_BYTE *)(a3 + 20))
          goto LABEL_52;
        v27 = "cu + 0x%llx";
LABEL_64:
        v35 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E8133270;
        v36 = v27;
        v37 = v6;
LABEL_51:
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)v7, (uint64_t)&v35);
LABEL_52:
        if (*(_BYTE *)(a3 + 20))
          sub_1C4816AD8(a2, " => {");
        if (*(_BYTE *)(a3 + 15))
        {
          llvm::WithColor::WithColor(&v42, a2, 0, 0);
          v26 = *((_QWORD *)a1 + 4);
          if (v26)
            v26 = *(_QWORD *)(v26 + 24);
          v35 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E8133270;
          v36 = "0x%8.8llx";
          v37 = v26 + v6;
          llvm::raw_ostream::operator<<(v42, (uint64_t)&v35);
          llvm::WithColor::~WithColor((llvm::WithColor *)&v42);
        }
        if (!*(_BYTE *)(a3 + 20))
          return;
        v21 = "}";
        goto LABEL_34;
      case 0x16u:
        v21 = "DW_FORM_indirect";
        goto LABEL_34;
      case 0x17u:
        v35 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E81698E0;
        v36 = "0x%0*llx";
        LODWORD(v37) = v8;
        v38 = v6;
        goto LABEL_27;
      case 0x19u:
        v21 = "true";
        goto LABEL_34;
      case 0x1Au:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
        goto LABEL_98;
      case 0x1Bu:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
        goto LABEL_29;
      case 0x1Eu:
        v35 = (uint64_t (**)(llvm::format_object_base *__hidden))*((_QWORD *)a1 + 2);
        v36 = (const char *)16;
        v37 = 0;
        v38 = 0;
        v39 = 0x1000000000;
        v40 = 16;
        v41 = 0;
        llvm::raw_ostream::operator<<(a2, (unsigned __int8 **)&v35);
        return;
      case 0x1Fu:
        if (!*(_BYTE *)(a3 + 20))
          goto LABEL_101;
        v34 = " .debug_line_str[0x%0*llx] = ";
LABEL_107:
        v35 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E81698E0;
        v36 = v34;
        LODWORD(v37) = v8;
        v38 = v6;
        goto LABEL_100;
      case 0x22u:
        v15 = (unsigned __int8 *)&off_1E8132728;
        v16 = v6;
        v17 = "indexed (0x%x) loclist = ";
        goto LABEL_21;
      case 0x23u:
        v15 = (unsigned __int8 *)&off_1E8132728;
        v16 = v6;
        v17 = "indexed (0x%x) rangelist = ";
LABEL_21:
        v35 = (uint64_t (**)(llvm::format_object_base *__hidden))v15;
        v36 = v17;
        v37 = v16;
        goto LABEL_22;
      default:
        goto LABEL_97;
    }
  }
  if (*a1 <= 0x1F1Fu)
  {
    if ((_DWORD)v9 == 7937)
    {
LABEL_29:
      v20 = *((_QWORD *)a1 + 4);
      if (v20)
      {
        llvm::DWARFUnit::getAddrOffsetSectionItem(v20, v6, (uint64_t)&v35);
        if ((_BYTE)v37 && !*(_BYTE *)(a3 + 20)
          || (v42 = (llvm::raw_ostream *)&off_1E8132728,
              v43 = "indexed (%8.8x) address = ",
              v44 = v6,
              llvm::raw_ostream::operator<<((llvm::raw_ostream *)v7, (uint64_t)&v42),
              (_BYTE)v37))
        {
          sub_1C624C4A4((uint64_t)v46, (__int128 *)a3);
          llvm::DWARFFormValue::dumpSectionedAddress((uint64_t)a1, (llvm::raw_ostream *)v7, v46, (uint64_t)v35, (uint64_t)v36);
          v14 = v46;
          goto LABEL_92;
        }
        goto LABEL_33;
      }
LABEL_36:
      v21 = "<invalid dwarf unit>";
      goto LABEL_34;
    }
    if ((_DWORD)v9 == 7938)
    {
LABEL_98:
      if (*(_BYTE *)(a3 + 20))
      {
        v35 = &off_1E8132728;
        v36 = "indexed (%8.8x) string = ";
        v37 = v6;
        goto LABEL_100;
      }
LABEL_101:
      llvm::DWARFFormValue::dumpString((llvm::DWARFFormValue *)a1, a2);
      return;
    }
    goto LABEL_97;
  }
  if ((_DWORD)v9 == 7968)
  {
    v19 = "<alt 0x%llx>";
LABEL_26:
    v35 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E8133270;
    v36 = v19;
    v37 = v6;
LABEL_27:
    v18 = (llvm::raw_ostream *)v7;
LABEL_23:
    llvm::raw_ostream::operator<<(v18, (uint64_t)&v35);
    return;
  }
  if ((_DWORD)v9 != 8193)
  {
    if ((_DWORD)v9 == 7969)
    {
      if (*(_BYTE *)(a3 + 20))
      {
        v35 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E8133270;
        v36 = "alt indirect string, offset: 0x%llx";
        v37 = v6;
LABEL_100:
        llvm::raw_ostream::operator<<(a2, (uint64_t)&v35);
        goto LABEL_101;
      }
      goto LABEL_101;
    }
LABEL_97:
    v35 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E8169638;
    v36 = "DW_FORM(0x%4.4x)";
    v37 = v9;
LABEL_22:
    v18 = a2;
    goto LABEL_23;
  }
  v13 = *((_QWORD *)a1 + 4);
  if (!v13)
    goto LABEL_36;
  llvm::DWARFUnit::getAddrOffsetSectionItem(v13, SHIDWORD(v6), (uint64_t)&v35);
  if ((_BYTE)v37 && !*(_BYTE *)(a3 + 20)
    || (v42 = (llvm::raw_ostream *)&unk_1E813F0F8,
        v43 = "indexed (%8.8x) + 0x%x address = ",
        v44 = HIDWORD(v6) | (v6 << 32),
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)v7, (uint64_t)&v42),
        (_BYTE)v37))
  {
    v35 = (uint64_t (**)(llvm::format_object_base *__hidden))((char *)v35 + v6);
    sub_1C624C4A4((uint64_t)v45, (__int128 *)a3);
    llvm::DWARFFormValue::dumpSectionedAddress((uint64_t)a1, (llvm::raw_ostream *)v7, v45, (uint64_t)v35, (uint64_t)v36);
    v14 = v45;
LABEL_92:
    sub_1C624C568(v14);
    return;
  }
LABEL_33:
  v21 = "<unresolved>";
LABEL_34:
  sub_1C4816AD8(a2, v21);
}

void llvm::DWARFFormValue::dumpString(llvm::DWARFFormValue *this, llvm::raw_ostream *a2)
{
  __int128 v3;
  char *v4;
  char v5;
  char *v6;
  _BYTE *v7;
  size_t v8;
  _BYTE *v9;
  llvm::raw_ostream *v10[2];
  __int128 v11;
  __int128 v12;
  char v13;

  v3 = *((_OWORD *)this + 1);
  *(_OWORD *)v10 = *(_OWORD *)this;
  v11 = v3;
  v12 = *((_OWORD *)this + 2);
  v13 = 1;
  v4 = sub_1C624DEB4((llvm::DWARFFormValue *)v10);
  if (v5)
  {
    v6 = v4;
    llvm::WithColor::WithColor(v10, a2, 1, 0);
    v7 = (_BYTE *)*((_QWORD *)v10[0] + 4);
    if ((unint64_t)v7 >= *((_QWORD *)v10[0] + 3))
    {
      llvm::raw_ostream::write(v10[0], 34);
    }
    else
    {
      *((_QWORD *)v10[0] + 4) = v7 + 1;
      *v7 = 34;
    }
    if (v6)
      v8 = strlen(v6);
    else
      v8 = 0;
    llvm::raw_ostream::write_escaped(v10[0], v6, v8, 0);
    v9 = (_BYTE *)*((_QWORD *)v10[0] + 4);
    if ((unint64_t)v9 >= *((_QWORD *)v10[0] + 3))
    {
      llvm::raw_ostream::write(v10[0], 34);
    }
    else
    {
      *((_QWORD *)v10[0] + 4) = v9 + 1;
      *v9 = 34;
    }
    llvm::WithColor::~WithColor((llvm::WithColor *)v10);
  }
}

_QWORD *llvm::DWARFFormValue::getAsSectionedAddress@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  unsigned int v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v2 = this;
  v4 = *(unsigned __int16 *)this;
  if ((v4 > 0x2D || ((0x3E0008000002uLL >> v4) & 1) == 0) && v4 != 7937 && v4 != 8193)
    goto LABEL_19;
  if (v4 == 27 || v4 == 7937)
  {
    v7 = this[1];
  }
  else
  {
    v8 = this[1];
    if (v4 != 8193)
    {
      v9 = this[3];
      *(_QWORD *)a2 = v8;
      *(_QWORD *)(a2 + 8) = v9;
      *(_BYTE *)(a2 + 16) = 1;
      return this;
    }
    v7 = HIDWORD(v8);
  }
  this = (_QWORD *)this[4];
  if (this
    && (this = (_QWORD *)llvm::DWARFUnit::getAddrOffsetSectionItem((uint64_t)this, v7, (uint64_t)&v10), (_BYTE)v11))
  {
    if (v4 == 8193)
      *(_QWORD *)&v10 = v10 + *((unsigned int *)v2 + 2);
    *(_OWORD *)a2 = v10;
    *(_QWORD *)(a2 + 16) = v11;
  }
  else
  {
LABEL_19:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return this;
}

unsigned __int16 *llvm::DWARFFormValue::getAsRelativeReference@<X0>(unsigned __int16 *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *this;
  if (v2 > 0x2D)
  {
    if (v2 == 7968)
      goto LABEL_7;
LABEL_11:
    LOBYTE(v3) = 0;
    goto LABEL_12;
  }
  if (((0x11103F0000uLL >> v2) & 1) == 0)
    goto LABEL_11;
  if (v2 - 17 >= 5)
  {
    if (v2 != 16 && v2 != 32)
      goto LABEL_11;
LABEL_7:
    v5 = *((_QWORD *)this + 1);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v5;
    goto LABEL_8;
  }
  v3 = *((_QWORD *)this + 4);
  if (!v3)
  {
LABEL_12:
    *(_BYTE *)a2 = 0;
    goto LABEL_13;
  }
  v4 = *((_QWORD *)this + 1);
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
LABEL_8:
  LOBYTE(v3) = 1;
LABEL_13:
  *(_BYTE *)(a2 + 16) = v3;
  return this;
}

uint64_t llvm::DWARFFormValue::getAsSectionOffset(llvm::DWARFFormValue *this)
{
  if (llvm::DWARFFormValue::isFormClass((unsigned __int16 *)this, 8))
    return *((_QWORD *)this + 1);
  else
    return 0;
}

unint64_t llvm::DWARFFormValue::getAsUnsignedConstant(llvm::DWARFFormValue *this)
{
  unsigned int v1;
  unint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int16 *)this;
  if (v1 > 0x2D)
    goto LABEL_10;
  if (((0x24000A8E0uLL >> v1) & 1) != 0)
  {
    if (v1 != 13)
      goto LABEL_8;
LABEL_10:
    v3 = 0;
    v4 = 0;
    return v4 | v3;
  }
  if (v1 != 12 && v1 != 25)
    goto LABEL_10;
LABEL_8:
  v3 = *((_QWORD *)this + 1) & 0xFFFFFFFFFFFFFF00;
  v4 = *((_QWORD *)this + 1);
  return v4 | v3;
}

unint64_t llvm::DWARFFormValue::getAsSignedConstant(llvm::DWARFFormValue *this)
{
  unsigned int v1;
  uint64_t v3;
  unint64_t v4;

  v1 = *(unsigned __int16 *)this;
  if (v1 > 0x2D)
    goto LABEL_17;
  if (((0x24000A8E0uLL >> v1) & 1) == 0)
  {
    if (v1 != 12 && v1 != 25)
      goto LABEL_17;
    goto LABEL_8;
  }
  if (*(unsigned __int16 *)this > 0xAu)
  {
    if (v1 == 11)
    {
      v3 = *((char *)this + 8);
      goto LABEL_9;
    }
    if (v1 != 15 || (*((_QWORD *)this + 1) & 0x8000000000000000) == 0)
      goto LABEL_8;
LABEL_17:
    LOBYTE(v3) = 0;
    v4 = 0;
    return v4 | v3;
  }
  if (v1 == 5)
  {
    v3 = *((__int16 *)this + 4);
    goto LABEL_9;
  }
  if (v1 == 6)
  {
    v3 = *((int *)this + 2);
    goto LABEL_9;
  }
LABEL_8:
  v3 = *((_QWORD *)this + 1);
LABEL_9:
  v4 = v3 & 0xFFFFFFFFFFFFFF00;
  return v4 | v3;
}

unsigned __int16 *llvm::DWARFFormValue::getAsBlock@<X0>(unsigned __int16 *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  char v5;

  v2 = *this;
  if (v2 <= 0x2D && (((0x618uLL >> v2) & 1) != 0 || (v2 != 24 ? (v3 = v2 == 30) : (v3 = 1), v3)))
  {
    v4 = *((_QWORD *)this + 1);
    *(_QWORD *)a2 = *((_QWORD *)this + 2);
    *(_QWORD *)(a2 + 8) = v4;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v5;
  return this;
}

uint64_t llvm::DWARFFormValue::getAsReferenceUVal(llvm::DWARFFormValue *this)
{
  unsigned int v1;

  v1 = *(unsigned __int16 *)this;
  if (v1 > 0x2D)
  {
    if (v1 != 7968)
      return 0;
  }
  else if (((0x11103F0000uLL >> v1) & 1) == 0)
  {
    return 0;
  }
  return *((_QWORD *)this + 1);
}

uint64_t sub_1C6252084(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(unsigned __int8 *)(a1 + 17), *(_QWORD *)(a1 + 24));
}

void sub_1C62520C8()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C62520DC(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1C61B7B28((unsigned int *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1C62520E4(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 24));
}

uint64_t llvm::DWARFListTableHeader::length(llvm::DWARFListTableHeader *this)
{
  uint64_t v1;

  if (!*(_QWORD *)this)
    return 0;
  v1 = 12;
  if (!*((_BYTE *)this + 16))
    v1 = 4;
  return v1 + *(_QWORD *)this;
}

llvm::raw_ostream *llvm::DWARFTypeUnit::dump(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3)
{
  uint64_t v6;
  char *Name;
  int v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  uint64_t v16;
  llvm::raw_ostream *result;
  _BYTE *v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  llvm::raw_ostream *v21;
  llvm::raw_ostream *v22;
  uint64_t v23;
  llvm::raw_ostream *v24;
  llvm::raw_ostream *v25;
  size_t v26;
  const char *v27;
  size_t v28;
  void *v29;
  llvm::raw_ostream *v30;
  uint64_t v31;
  llvm::raw_ostream *v32;
  size_t v33;
  char *v34;
  size_t v35;
  void *v36;
  llvm::raw_ostream *v37;
  uint64_t v38;
  llvm::raw_ostream *v39;
  uint64_t v40;
  llvm::raw_ostream *v41;
  llvm::raw_ostream *v42;
  llvm::raw_ostream *v43;
  llvm::raw_ostream *v44;
  llvm::raw_ostream *v45;
  uint64_t v46;
  llvm::raw_ostream *v47;
  llvm::raw_ostream *v48;
  uint64_t v49;
  llvm::raw_ostream *v50;
  llvm::raw_ostream *v51;
  uint64_t v52;
  uint64_t v53;
  llvm::raw_ostream *v54;
  const char *v55;
  const char *v56;
  BOOL v57;
  void *v58;
  _QWORD v59[3];
  void *v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  _QWORD v70[2];
  _QWORD v71[12];

  v71[11] = *MEMORY[0x1E0C80C00];
  v70[0] = sub_1C624DB94((llvm::DWARFUnit *)a1, *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 72));
  v70[1] = v6;
  Name = llvm::DWARFDie::getName((llvm::DWARFDie *)v70, 1);
  if (*(_BYTE *)(a1 + 35))
    v8 = 16;
  else
    v8 = 8;
  if (*(_BYTE *)(a3 + 19))
  {
    v9 = sub_1C4816AD8(a2, "name = '");
    v10 = sub_1C4816AD8(v9, Name);
    v11 = sub_1C4816AD8(v10, "'");
    v12 = sub_1C4816AD8(v11, ", type_signature = ");
    v13 = *(_QWORD *)(a1 + 64);
    v67 = &unk_1E8133270;
    v68 = "0x%016llx";
    v69 = v13;
    v14 = llvm::raw_ostream::operator<<(v12, (uint64_t)&v67);
    v15 = sub_1C4816AD8(v14, ", length = ");
    v16 = *(_QWORD *)(a1 + 40);
    v63 = &unk_1E81698E0;
    v64 = "0x%0*llx";
    LODWORD(v65) = v8;
    v66 = v16;
    result = llvm::raw_ostream::operator<<(v15, (uint64_t)&v63);
    v18 = (_BYTE *)*((_QWORD *)result + 4);
    if ((unint64_t)v18 >= *((_QWORD *)result + 3))
    {
      return llvm::raw_ostream::write(result, 10);
    }
    else
    {
      *((_QWORD *)result + 4) = v18 + 1;
      *v18 = 10;
    }
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 24);
    v67 = &unk_1E8133270;
    v68 = "0x%08llx";
    v69 = v19;
    v20 = llvm::raw_ostream::operator<<(a2, (uint64_t)&v67);
    v21 = sub_1C4816AD8(v20, ": Type Unit:");
    v22 = sub_1C4816AD8(v21, " length = ");
    v23 = *(_QWORD *)(a1 + 40);
    v63 = &unk_1E81698E0;
    v64 = "0x%0*llx";
    LODWORD(v65) = v8;
    v66 = v23;
    v24 = llvm::raw_ostream::operator<<(v22, (uint64_t)&v63);
    v25 = sub_1C4816AD8(v24, ", format = ");
    v27 = llvm::dwarf::FormatString(*(unsigned __int8 *)(a1 + 35));
    v28 = v26;
    v29 = (void *)*((_QWORD *)v25 + 4);
    if (v26 <= *((_QWORD *)v25 + 3) - (_QWORD)v29)
    {
      if (v26)
      {
        memcpy(v29, v27, v26);
        *((_QWORD *)v25 + 4) += v28;
      }
    }
    else
    {
      llvm::raw_ostream::write(v25, v27, v26);
    }
    v30 = sub_1C4816AD8(v25, ", version = ");
    v31 = *(unsigned __int16 *)(a1 + 32);
    v60 = &unk_1E8169900;
    v61 = "0x%04x";
    v62 = v31;
    llvm::raw_ostream::operator<<(v30, (uint64_t)&v60);
    if (*(unsigned __int16 *)(a1 + 32) >= 5u)
    {
      v32 = sub_1C4816AD8(a2, ", unit_type = ");
      v34 = llvm::dwarf::UnitTypeString((llvm::dwarf *)*(unsigned __int8 *)(a1 + 96));
      v35 = v33;
      v36 = (void *)*((_QWORD *)v32 + 4);
      if (v33 <= *((_QWORD *)v32 + 3) - (_QWORD)v36)
      {
        if (v33)
        {
          memcpy(v36, v34, v33);
          *((_QWORD *)v32 + 4) += v35;
        }
      }
      else
      {
        llvm::raw_ostream::write(v32, v34, v33);
      }
    }
    v37 = sub_1C4816AD8(a2, ", abbr_offset = ");
    v38 = *(_QWORD *)(a1 + 48);
    v63 = &unk_1E8133270;
    v64 = "0x%04llx";
    v65 = v38;
    llvm::raw_ostream::operator<<(v37, (uint64_t)&v63);
    if (!llvm::DWARFUnit::getAbbreviations((llvm::DWARFUnit *)a1))
      sub_1C4816AD8(a2, " (invalid)");
    v39 = sub_1C4816AD8(a2, ", addr_size = ");
    v40 = *(unsigned __int8 *)(a1 + 34);
    v63 = &unk_1E8145938;
    v64 = "0x%02x";
    v65 = v40;
    v41 = llvm::raw_ostream::operator<<(v39, (uint64_t)&v63);
    v42 = sub_1C4816AD8(v41, ", name = '");
    v43 = sub_1C4816AD8(v42, Name);
    v44 = sub_1C4816AD8(v43, "'");
    v45 = sub_1C4816AD8(v44, ", type_signature = ");
    v46 = *(_QWORD *)(a1 + 64);
    v67 = &unk_1E8133270;
    v68 = "0x%016llx";
    v69 = v46;
    v47 = llvm::raw_ostream::operator<<(v45, (uint64_t)&v67);
    v48 = sub_1C4816AD8(v47, ", type_offset = ");
    v49 = *(_QWORD *)(a1 + 72);
    v60 = &unk_1E8133270;
    v61 = "0x%04llx";
    v62 = v49;
    v50 = llvm::raw_ostream::operator<<(v48, (uint64_t)&v60);
    v51 = sub_1C4816AD8(v50, " (next unit at ");
    v52 = 12;
    if (!*(_BYTE *)(a1 + 35))
      v52 = 4;
    v53 = *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 24) + v52;
    v59[0] = &unk_1E8133270;
    v59[1] = "0x%08llx";
    v59[2] = v53;
    v54 = llvm::raw_ostream::operator<<(v51, (uint64_t)v59);
    sub_1C4816AD8(v54, ")\n");
    llvm::DWARFUnit::extractDIEsIfNeeded((llvm::DWARFUnit *)a1, 0);
    v55 = *(const char **)(a1 + 288);
    v56 = *(const char **)(a1 + 296);
    v57 = v55 == v56;
    if (v55 == v56)
      v58 = 0;
    else
      v58 = (void *)a1;
    if (v57)
      v55 = 0;
    v63 = v58;
    v64 = v55;
    if (v58 && v55)
    {
      sub_1C624C4A4((uint64_t)v71, (__int128 *)a3);
      llvm::DWARFDie::dump((uint64_t *)&v63, a2, 0, (uint64_t)v71);
      return (llvm::raw_ostream *)sub_1C624C568(v71);
    }
    else
    {
      return sub_1C4816AD8(a2, "<type unit can't be parsed!>\n\n");
    }
  }
  return result;
}

void sub_1C62525D8(llvm::DWARFUnit *a1)
{
  llvm::DWARFUnit::~DWARFUnit(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::DWARFUnitIndex::parse(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v9 = *a2;
  v10 = *((_QWORD *)a2 + 2);
  v3 = llvm::DWARFUnitIndex::parseImpl(a1, (uint64_t)&v9);
  if ((v3 & 1) == 0)
  {
    *(_DWORD *)(a1 + 12) = 0;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8052888210);
    v8 = *(_QWORD *)(a1 + 40);
    v7 = (_QWORD *)(a1 + 40);
    v6 = v8;
    *v7 = 0;
    if (v8)
      sub_1C548D5AC((uint64_t)v7, v6);
  }
  return v3;
}

uint64_t llvm::DWARFUnitIndex::Entry::getContribution(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  int v6;

  v2 = *(unsigned int *)(*a1 + 4);
  if (!(_DWORD)v2)
    return 0;
  v3 = 0;
  v4 = *(int **)(*a1 + 24);
  v5 = 8 * v2;
  while (1)
  {
    v6 = *v4++;
    if (v6 == a2)
      break;
    v3 += 8;
    if (v5 == v3)
      return 0;
  }
  return a1[2] + v3;
}

uint64_t llvm::DWARFUnitIndex::Entry::getContribution(llvm::DWARFUnitIndex::Entry *this)
{
  return *((_QWORD *)this + 2) + 8 * *(int *)(*(_QWORD *)this + 20);
}

_QWORD *llvm::DWARFUnitIndex::getFromHash(llvm::DWARFUnitIndex *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = (*((_DWORD *)this + 3) - 1);
  v3 = v2 & a2;
  v4 = *((_QWORD *)this + 5);
  if (*(_QWORD *)(v4 + 24 * (v2 & a2) + 8) != a2)
  {
    do
    {
      if (!*(_QWORD *)(v4 + 24 * v3))
        break;
      v3 = ((_DWORD)v3 + (v2 & HIDWORD(a2) | 1)) & v2;
    }
    while (*(_QWORD *)(v4 + 24 * v3 + 8) != a2);
  }
  v5 = (_QWORD *)(v4 + 24 * v3);
  if (*v5)
    return v5;
  else
    return 0;
}

_QWORD *llvm::DWARFUnitVector::addUnitsForSection(_QWORD *a1, llvm::DWARFContext *this, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t DebugAbbrev;

  v6 = *((_QWORD *)this + 65);
  DebugAbbrev = llvm::DWARFContext::getDebugAbbrev(this);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 144))(v6);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 80))(v6);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 136))(v6);
  v11 = v10;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 224))(v6);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 312))(v6);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 120))(v6);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  return llvm::DWARFUnitVector::addUnitsImpl(a1, (uint64_t)this, v6, a3, DebugAbbrev, v7, v8, v16, v9, v11, v12, v13, v14, v15, 0, 0, a4);
}

_QWORD *llvm::DWARFUnitVector::addUnitsImpl(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char a15, char a16, int a17)
{
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v33;
  uint64_t (**v34)(void);
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _QWORD v40[3];
  _QWORD *v41;
  uint64_t v42;

  v18 = (uint64_t)result;
  v42 = *MEMORY[0x1E0C80C00];
  v19 = *(_QWORD *)(a4 + 8);
  if (!result[6])
  {
    v35 = result + 3;
    v33 = operator new(0x70uLL);
    *v33 = &off_1E816A4A0;
    v33[1] = a2;
    v33[2] = a3;
    v33[3] = a4;
    v33[4] = a11;
    v33[5] = a13;
    *((_BYTE *)v33 + 48) = a14;
    *((_BYTE *)v33 + 49) = a15;
    v33[7] = a5;
    v33[8] = a6;
    v33[9] = a7;
    v33[10] = a9;
    v33[11] = a10;
    v33[12] = a12;
    v33[13] = v18;
    v41 = v33;
    sub_1C48C35D8(v40, v35);
    result = v41;
    if (v41 == v40)
    {
      v34 = (uint64_t (**)(void))(v40[0] + 32);
    }
    else
    {
      if (!v41)
        goto LABEL_2;
      v34 = (uint64_t (**)(void))(*v41 + 40);
    }
    result = (_QWORD *)(*v34)();
  }
LABEL_2:
  if ((a16 & 1) == 0 && v19)
  {
    v20 = 0;
    v21 = *(_QWORD *)v18;
    do
    {
      v22 = *(_QWORD *)v18 + 8 * *(unsigned int *)(v18 + 8);
      if (v21 != v22)
      {
        while (*(_QWORD *)(*(_QWORD *)v21 + 16) != a4 || *(_QWORD *)(*(_QWORD *)v21 + 24) == v20)
        {
          v21 += 8;
          if (v21 == v22)
          {
            v21 = *(_QWORD *)v18 + 8 * *(unsigned int *)(v18 + 8);
            break;
          }
        }
      }
      v40[0] = v20;
      v39 = a17;
      v37 = 0;
      v38 = a4;
      v23 = *(_QWORD *)(v18 + 48);
      if (!v23)
        sub_1C485C2F0();
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, _QWORD *, int *, uint64_t *, uint64_t *))(*(_QWORD *)v23 + 48))(&v36, v23, v40, &v39, &v38, &v37);
      if (!v36)
        break;
      v24 = *(_QWORD *)(v36 + 24);
      v25 = *(_QWORD *)(v36 + 40);
      v26 = *(_BYTE *)(v36 + 35) ? 12 : 4;
      v27 = sub_1C54B59B8(v18, v21, (char *)&v36);
      result = (_QWORD *)v36;
      v36 = 0;
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      v20 = v25 + v24 + v26;
      v21 = v27 + 8;
    }
    while (v19 > v20);
  }
  return result;
}

_QWORD *llvm::DWARFUnitVector::addUnitsForDWOSection(_QWORD *a1, llvm::DWARFContext *this, uint64_t a3, int a4, char a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t DebugAbbrevDWO;

  v7 = *((_QWORD *)this + 65);
  DebugAbbrevDWO = llvm::DWARFContext::getDebugAbbrevDWO(this);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 296))(v7);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 264))(v7);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 280))(v7);
  v12 = v11;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 288))(v7);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 312))(v7);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 256))(v7);
  v16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 65) + 40))(*((_QWORD *)this + 65));
  return llvm::DWARFUnitVector::addUnitsImpl(a1, (uint64_t)this, v7, a3, DebugAbbrevDWO, v8, v9, v17, v10, v12, v13, v14, v15, v16, 1, a5, a4);
}

uint64_t llvm::DWARFUnitVector::getUnitForOffset(uint64_t **this, unint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *this;
  LODWORD(v3) = *((_DWORD *)this + 14);
  if ((_DWORD)v3 == -1)
    LODWORD(v3) = *((_DWORD *)this + 2);
  v4 = &v2[v3];
  if ((_DWORD)v3)
  {
    v3 = v3;
    do
    {
      v5 = v3 >> 1;
      v6 = &v2[v3 >> 1];
      v8 = *v6;
      v7 = v6 + 1;
      v9 = *(_QWORD *)(v8 + 40) + *(_QWORD *)(v8 + 24);
      if (*(_BYTE *)(v8 + 35))
        v10 = 12;
      else
        v10 = 4;
      v3 += ~(v3 >> 1);
      if (v9 + v10 > a2)
        v3 = v5;
      else
        v2 = v7;
    }
    while (v3);
  }
  if (v2 == v4)
    return 0;
  v11 = *v2;
  if (*(_QWORD *)(v11 + 24) <= a2)
    return v11;
  else
    return 0;
}

uint64_t llvm::DWARFUnitVector::getUnitForIndexEntry(llvm::DWARFUnitVector *this, const llvm::DWARFUnitIndex::Entry *a2)
{
  uint64_t v2;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const llvm::DWARFUnitIndex::Entry *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 4);
  if (!(_DWORD)v2)
    return 0;
  v4 = 0;
  v5 = *(int **)(*(_QWORD *)a2 + 24);
  v6 = 8 * v2;
  while (1)
  {
    v7 = *v5++;
    if (v7 == 1)
      break;
    v4 += 8;
    if (v6 == v4)
      return 0;
  }
  v10 = *((_QWORD *)a2 + 2);
  if (!v10)
    return 0;
  v11 = *(unsigned int *)(v10 + v4);
  v12 = *(_QWORD *)this;
  LODWORD(v13) = *((_DWORD *)this + 14);
  if ((_DWORD)v13 == -1)
    LODWORD(v13) = *((_DWORD *)this + 2);
  v14 = v12 + 8 * v13;
  if ((_DWORD)v13)
  {
    v13 = v13;
    do
    {
      v15 = v13 >> 1;
      v16 = (uint64_t *)(v12 + 8 * (v13 >> 1));
      v18 = *v16;
      v17 = v16 + 1;
      v19 = *(_QWORD *)(v18 + 40) + *(_QWORD *)(v18 + 24);
      if (*(_BYTE *)(v18 + 35))
        v20 = 12;
      else
        v20 = 4;
      v13 += ~(v13 >> 1);
      if (v19 + v20 > v11)
        v13 = v15;
      else
        v12 = (unint64_t)v17;
    }
    while (v13);
  }
  if (v12 == v14 || (v8 = *(_QWORD *)v12, *(_QWORD *)(*(_QWORD *)v12 + 24) > v11))
  {
    v21 = *((_QWORD *)this + 6);
    if (v21)
    {
      v27 = v11;
      v26 = 1;
      v24 = a2;
      v25 = 0;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t *, int *, uint64_t *, const llvm::DWARFUnitIndex::Entry **))(*(_QWORD *)v21 + 48))(&v23, v21, &v27, &v26, &v25, &v24);
      v8 = v23;
      if (!v23)
        v23 = 0;
      sub_1C54B59B8((uint64_t)this, v12, (char *)&v23);
      ++*((_DWORD *)this + 14);
      v22 = v23;
      v23 = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      return v8;
    }
    return 0;
  }
  return v8;
}

void llvm::DWARFUnit::~DWARFUnit(llvm::DWARFUnit *this)
{
  std::__shared_weak_count *v2;
  void *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = off_1E816A478;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_1C47655E8((uint64_t)this + 312, *((_QWORD **)this + 40));
  v3 = (void *)*((_QWORD *)this + 36);
  if (v3)
  {
    *((_QWORD *)this + 37) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

__n128 llvm::DWARFUnit::getDebugInfoExtractor@<Q0>(llvm::DWARFUnit *this@<X0>, __n128 *a2@<X8>)
{
  __n128 *v2;
  unint64_t v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  __n128 result;

  v2 = (__n128 *)*((_QWORD *)this + 2);
  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 520);
  v4 = *((_BYTE *)this + 208);
  v5 = *((_BYTE *)this + 34);
  result = *v2;
  *a2 = *v2;
  a2[1].n128_u8[0] = v4;
  a2[1].n128_u8[1] = v5;
  a2[1].n128_u64[1] = v3;
  a2[2].n128_u64[0] = (unint64_t)v2;
  return result;
}

uint64_t llvm::DWARFUnit::getAddrOffsetSectionItem@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  char v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v4 = this;
  if (*(_BYTE *)(this + 200))
  {
LABEL_2:
    v6 = *(unsigned __int8 *)(v4 + 34);
    v22 = *(_QWORD *)(v4 + 192) + (v6 * a2);
    v7 = *(_QWORD **)(v4 + 176);
    v8 = v7[1];
    if (v8 >= v22 + v6)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 520);
      v14 = *(_BYTE *)(v4 + 208);
      v17[0] = *v7;
      v17[1] = v8;
      v18 = v14;
      v19 = v6;
      v20 = v13;
      v21 = v7;
      v16 = 0;
      this = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)v17, v6, &v22, &v16, 0);
      v15 = v16;
      *(_QWORD *)a3 = this;
      *(_QWORD *)(a3 + 8) = v15;
      v9 = 1;
    }
    else
    {
      v9 = 0;
      *(_BYTE *)a3 = 0;
    }
    *(_BYTE *)(a3 + 16) = v9;
  }
  else
  {
    while (1)
    {
      v10 = *(_QWORD *)(v4 + 8);
      this = llvm::DWARFContext::parseNormalUnits(v10);
      v11 = *(_DWORD *)(v10 + 72);
      if (v11 == -1)
        v11 = *(_DWORD *)(v10 + 24);
      if (!*(_BYTE *)(v4 + 209) || v11 != 1)
        break;
      v4 = **(_QWORD **)(v10 + 16);
      if (*(_BYTE *)(v4 + 200))
        goto LABEL_2;
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return this;
}

uint64_t llvm::DWARFUnitHeader::extract(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4, int a5)
{
  char v10;
  unsigned int v11;
  _BYTE *v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  const std::error_category *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  const std::error_category *v29;
  char *v30;
  uint64_t v31;
  const std::error_category *v32;
  uint64_t v33;
  const std::error_category *v34;
  int v35;
  const std::error_category *v36;
  const std::error_category *v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;

  *(_QWORD *)a1 = *a4;
  v48 = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = llvm::DWARFDataExtractor::getInitialLength((uint64_t)a3, a4, &v48);
  *(_BYTE *)(a1 + 11) = v10;
  v11 = sub_1C63871E8((uint64_t)a3, a4, (uint64_t *)&v48);
  *(_WORD *)(a1 + 8) = v11;
  if (v11 <= 4)
  {
    if (*(_BYTE *)(a1 + 11))
      v17 = 8;
    else
      v17 = 4;
    *(_QWORD *)(a1 + 24) = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)a3, v17, a4, 0, (uint64_t *)&v48);
    *(_BYTE *)(a1 + 10) = llvm::DataExtractor::getU8(a3, a4, &v48);
    v12 = (_BYTE *)(a1 + 72);
    if (a5 != 2)
    {
      *v12 = 1;
      goto LABEL_14;
    }
    *v12 = 2;
    goto LABEL_47;
  }
  *(_BYTE *)(a1 + 72) = llvm::DataExtractor::getU8(a3, a4, &v48);
  v12 = (_BYTE *)(a1 + 72);
  *(_BYTE *)(a1 + 10) = llvm::DataExtractor::getU8(a3, a4, &v48);
  if (*(_BYTE *)(a1 + 11))
    v13 = 8;
  else
    v13 = 4;
  *(_QWORD *)(a1 + 24) = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)a3, v13, a4, 0, (uint64_t *)&v48);
  v14 = *v12;
  if ((v14 & 0xFFFFFFFB) == 2)
  {
LABEL_47:
    *(_QWORD *)(a1 + 40) = sub_1C63873F8((uint64_t)a3, a4, (uint64_t *)&v48);
    if (*(_BYTE *)(a1 + 11))
      v35 = 8;
    else
      v35 = 4;
    *(_QWORD *)(a1 + 48) = llvm::DataExtractor::getUnsigned(a3, a4, v35, (uint64_t *)&v48);
    goto LABEL_14;
  }
  if ((v14 & 0xFE) == 4)
  {
    v15 = sub_1C63873F8((uint64_t)a3, a4, (uint64_t *)&v48);
    v16 = *(unsigned __int8 *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v15;
    if (!v16)
      *(_BYTE *)(a1 + 64) = 1;
  }
LABEL_14:
  if (v48)
  {
    v29 = std::generic_category();
    sub_1C548F3B0(22, (uint64_t)v29, (uint64_t)"DWARF unit at 0x%8.8llx cannot be parsed:", (uint64_t *)a1, (uint64_t *)&v46);
    v45 = v48;
    v48 = 0;
    sub_1C624E8DC(&v46, &v45, &v47);
    v49 = v47;
    v47 = 0;
    sub_1C624E09C(a2 + 488, &v49);
    if (v49)
      (*(void (**)(char *))(*(_QWORD *)v49 + 8))(v49);
    if (v47)
      (*(void (**)(char *))(*(_QWORD *)v47 + 8))(v47);
    if (v45)
      (*(void (**)(char *))(*(_QWORD *)v45 + 8))(v45);
    v30 = v46;
    if (!v46)
      goto LABEL_41;
    goto LABEL_40;
  }
  v18 = *(_QWORD *)a1;
  v19 = *a4 - *(_QWORD *)a1;
  *(_BYTE *)(a1 + 73) = v19;
  v20 = 12;
  if (!*(_BYTE *)(a1 + 11))
    v20 = 4;
  v21 = v20 + *(_QWORD *)(a1 + 16);
  v44 = v21 + v18;
  if (a3[1] <= v21 + v18 - 1)
  {
    v31 = a2 + 488;
    v32 = std::generic_category();
    v42 = (char *)a3[1];
    sub_1C54B2C40(&v43, 22, (uint64_t)v32, (uint64_t *)a1, (uint64_t *)&v44, (uint64_t *)&v42);
    v33 = v43;
    goto LABEL_39;
  }
  if (*(unsigned __int16 *)(a1 + 8) - 2 >= 4)
  {
    v31 = a2 + 488;
    v34 = std::generic_category();
    v40 = *(_WORD *)(a1 + 8);
    LODWORD(v42) = 5;
    sub_1C54B2D8C(&v41, 22, (uint64_t)v34, (uint64_t *)a1, &v40, (int *)&v42);
    v33 = v41;
    goto LABEL_39;
  }
  if ((*v12 & 0xFB) != 2)
    goto LABEL_22;
  v22 = *(_QWORD *)(a1 + 48);
  if (v22 < v19)
  {
    v31 = a2 + 488;
    v36 = std::generic_category();
    v42 = (char *)(*(_QWORD *)(a1 + 48) + *(_QWORD *)a1);
    sub_1C54B2EDC(&v39, 22, (uint64_t)v36, (uint64_t *)a1, (uint64_t *)&v42);
    v33 = v39;
    goto LABEL_39;
  }
  if (v22 >= v21)
  {
    v31 = a2 + 488;
    v37 = std::generic_category();
    v42 = (char *)(*(_QWORD *)(a1 + 48) + *(_QWORD *)a1);
    sub_1C54B3024(&v38, 22, (uint64_t)v37, (uint64_t *)a1, (uint64_t *)&v44, (uint64_t *)&v42);
    v33 = v38;
LABEL_39:
    v49 = (char *)v33;
    sub_1C624E09C(v31, &v49);
    v30 = v49;
    if (!v49)
    {
LABEL_41:
      v27 = 0;
      goto LABEL_26;
    }
LABEL_40:
    (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
    goto LABEL_41;
  }
LABEL_22:
  v23 = *(unsigned __int8 *)(a1 + 10);
  v24 = std::generic_category();
  sub_1C5490600(v23, 22, (uint64_t)v24, (uint64_t)"DWARF unit at offset 0x%8.8llx", (uint64_t *)a1, (uint64_t *)&v42);
  v25 = (uint64_t)v42;
  if (v42)
  {
    v42 = 0;
    v49 = (char *)v25;
    sub_1C624E09C(a2 + 488, &v49);
    if (v49)
      (*(void (**)(char *))(*(_QWORD *)v49 + 8))(v49);
    v30 = v42;
    if (!v42)
      goto LABEL_41;
    goto LABEL_40;
  }
  v26 = *(unsigned __int16 *)(a1 + 8);
  if (*(_DWORD *)(a2 + 360) < v26)
    *(_DWORD *)(a2 + 360) = v26;
  v27 = 1;
LABEL_26:
  if (v48)
    (*(void (**)(char *))(*(_QWORD *)v48 + 8))(v48);
  return v27;
}

char *llvm::DWARFUnit::getCompilationDir(llvm::DWARFUnit **this)
{
  llvm::DWARFUnit *v2;
  llvm::DWARFUnit *v3;
  BOOL v4;
  llvm::DWARFUnit *v5;
  char *result;
  char v7;
  llvm::DWARFUnit *v8[2];
  _BYTE v9[56];

  llvm::DWARFUnit::extractDIEsIfNeeded((llvm::DWARFUnit *)this, 1);
  v2 = this[36];
  v3 = this[37];
  v4 = v2 == v3;
  if (v2 == v3)
    v5 = 0;
  else
    v5 = (llvm::DWARFUnit *)this;
  if (v4)
    v2 = 0;
  v8[0] = v5;
  v8[1] = v2;
  llvm::DWARFDie::find(v8, 27, v9);
  result = sub_1C624DEB4((llvm::DWARFFormValue *)v9);
  if (!v7)
    return 0;
  return result;
}

void llvm::DWARFUnit::extractDIEsIfNeeded(llvm::DWARFUnit *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  llvm::DWARFUnit::tryExtractDIEsIfNeeded(this, a2, &v5);
  v3 = v5;
  if (v5)
  {
    v4 = *((_QWORD *)this + 1) + 456;
    v5 = 0;
    v6 = v3;
    sub_1C624E09C(v4, &v6);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

void llvm::DWARFUnit::determineStringOffsetsTableContributionDWO(llvm::DWARFUnit *this@<X0>, llvm::DWARFDataExtractor *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  __int16 v17;
  char v18;
  char v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)*((_QWORD *)this + 7);
  if (v4)
  {
    v5 = *(unsigned int *)(*v4 + 4);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = *(int **)(*v4 + 24);
      v8 = 8 * v5;
      while (1)
      {
        v9 = *v7++;
        if (v9 == 6)
          break;
        v6 += 8;
        if (v8 == v6)
          goto LABEL_6;
      }
      v15 = v4[2];
      if (v15)
      {
        v10 = *(unsigned int *)(v15 + v6);
        if (*((unsigned __int16 *)this + 16) < 5u)
        {
          v12 = *(unsigned int *)(v15 + v6 + 4);
          goto LABEL_17;
        }
        goto LABEL_8;
      }
    }
LABEL_6:
    if (*((unsigned __int16 *)this + 16) <= 4u)
      goto LABEL_18;
LABEL_7:
    v10 = 0;
LABEL_8:
    if (*(_QWORD *)a2)
    {
      v11 = 16;
      if (!*((_BYTE *)this + 35))
        v11 = 8;
      sub_1C54B5418((uint64_t)&v21, a2, *((unsigned __int8 *)this + 35), v11 + v10);
      goto LABEL_12;
    }
LABEL_18:
    *(_BYTE *)(a3 + 32) &= ~1u;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return;
  }
  if (*((unsigned __int16 *)this + 16) > 4u)
    goto LABEL_7;
  v12 = *(_QWORD *)(*((_QWORD *)this + 21) + 8);
  if (!v12)
    goto LABEL_18;
  v10 = 0;
LABEL_17:
  v13 = *((_BYTE *)this + 35);
  v16[0] = v10;
  v16[1] = v12;
  v17 = 4;
  v18 = 0;
  v19 = v13;
  v20 = 0;
  llvm::StrOffsetsContributionDescriptor::validateContributionSize((llvm::StrOffsetsContributionDescriptor *)v16, a2, (uint64_t)&v21);
LABEL_12:
  if ((v23 & 1) != 0)
  {
    v14 = v21;
    *(_BYTE *)(a3 + 32) |= 1u;
    *(_QWORD *)a3 = v14;
  }
  else
  {
    *(_BYTE *)(a3 + 32) &= ~1u;
    *(_OWORD *)a3 = v21;
    *(_QWORD *)(a3 + 16) = v22;
    *(_BYTE *)(a3 + 24) = 1;
  }
}

__n128 llvm::DWARFUnit::getBaseAddress@<Q0>(llvm::DWARFUnit *this@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  __n128 result;
  llvm::DWARFUnit *v6;
  llvm::DWARFUnit *v7;
  BOOL v8;
  llvm::DWARFUnit *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[6];
  char v13;
  llvm::DWARFUnit *v14[2];

  v3 = (char *)this + 264;
  if (!*((_BYTE *)this + 280))
  {
    llvm::DWARFUnit::extractDIEsIfNeeded(this, 1);
    v6 = (llvm::DWARFUnit *)*((_QWORD *)this + 36);
    v7 = (llvm::DWARFUnit *)*((_QWORD *)this + 37);
    v8 = v6 == v7;
    if (v6 == v7)
      v9 = 0;
    else
      v9 = this;
    if (v8)
      v6 = 0;
    v14[0] = v9;
    v14[1] = v6;
    LODWORD(v10) = 5373969;
    llvm::DWARFDie::find(v14, (unsigned __int16 *)&v10, 2, v12);
    if (v13)
    {
      llvm::DWARFFormValue::getAsSectionedAddress(v12, (uint64_t)&v10);
    }
    else
    {
      LOBYTE(v10) = 0;
      LOBYTE(v11) = 0;
    }
    *(_OWORD *)v3 = v10;
    *((_QWORD *)v3 + 2) = v11;
  }
  result = *(__n128 *)v3;
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
  return result;
}

uint64_t llvm::DWARFUnit::getFirstChild(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2 || !*(_BYTE *)(v2 + 7))
    return 0;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(result + 296) - *(_QWORD *)(result + 288)) >> 3) <= -1431655765 * ((unint64_t)(a2 - *(_QWORD *)(result + 288)) >> 3) + 1)
    return 0;
  return result;
}

_QWORD *llvm::DWARFUnit::getAbbreviations(llvm::DWARFUnit *this)
{
  _QWORD *result;

  result = (_QWORD *)*((_QWORD *)this + 32);
  if (!result)
  {
    result = llvm::DWARFDebugAbbrev::getAbbreviationDeclarationSet(*((llvm::DWARFDebugAbbrev **)this + 13), *((void ***)this + 6));
    *((_QWORD *)this + 32) = result;
  }
  return result;
}

uint64_t sub_1C62537E0(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t sub_1C625381C(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int16 *)(a1 + 24), *(unsigned int *)(a1 + 28));
}

BOOL sub_1C6253858(int a1)
{
  _BOOL8 result;

  result = 0;
  if (a1 <= 30)
  {
    switch(a1)
    {
      case 1:
      case 2:
      case 4:
      case 15:
      case 16:
      case 18:
      case 19:
      case 21:
      case 22:
      case 23:
LABEL_4:
        result = 1;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(a1)
    {
      case 31:
      case 32:
      case 33:
      case 36:
      case 38:
      case 41:
      case 45:
      case 49:
      case 53:
      case 55:
      case 56:
      case 59:
      case 64:
      case 66:
      case 68:
      case 70:
      case 71:
      case 75:
        goto LABEL_4;
      case 34:
      case 35:
      case 37:
      case 39:
      case 40:
      case 42:
      case 43:
      case 44:
      case 46:
      case 47:
      case 48:
      case 50:
      case 51:
      case 52:
      case 54:
      case 57:
      case 58:
      case 60:
      case 61:
      case 62:
      case 63:
      case 65:
      case 67:
      case 69:
      case 72:
      case 73:
      case 74:
        return result;
      default:
        switch(a1)
        {
          case 45057:
          case 45058:
          case 45059:
          case 45060:
            goto LABEL_4;
          default:
            result = a1 == 17152;
            break;
        }
        break;
    }
  }
  return result;
}

void sub_1C62538FC()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C6253910(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1C54BF45C(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

void sub_1C6253918()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C625392C(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1C617F300(*(unint64_t **)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *sub_1C6253934(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1C54BF45C(a1 + 8, a2, a3, a4);
}

const char *llvm::itanium_demangle::parse_discriminator(const char *this, const char *a2, const char *a3)
{
  uint64_t v3;
  const char *v4;
  uint64_t v6;
  const char *v7;
  int v8;

  if (this != a2)
  {
    v3 = *(unsigned __int8 *)this;
    if (v3 == 95)
    {
      if (this + 1 != a2 && (this[1] & 0x80000000) == 0)
      {
        if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *((unsigned __int8 *)this + 1) + 60) & 0x400) != 0)
        {
          this += 2;
        }
        else
        {
          v4 = this + 2;
          if (this[1] == 95 && v4 != a2)
          {
            while (1)
            {
              v6 = *(unsigned __int8 *)v4;
              if (*v4 < 0 || (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v6 + 60) & 0x400) == 0)
                break;
              if (++v4 == a2)
                return this;
            }
            if ((_DWORD)v6 == 95)
              return v4 + 1;
          }
        }
      }
    }
    else if ((v3 & 0x80) == 0 && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v3 + 60) & 0x400) != 0)
    {
      v7 = this + 1;
      while (v7 != a2)
      {
        v8 = *v7;
        if ((v8 & 0x80000000) == 0)
        {
          ++v7;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v8 + 60) & 0x400) != 0)
            continue;
        }
        return this;
      }
      return a2;
    }
  }
  return this;
}

llvm::ItaniumPartialDemangler *llvm::ItaniumPartialDemangler::ItaniumPartialDemangler(llvm::ItaniumPartialDemangler *this)
{
  uint64_t v2;

  *(_QWORD *)this = 0;
  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_QWORD *)(v2 + 24) = v2 + 40;
  *(_QWORD *)(v2 + 32) = v2 + 296;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_QWORD *)(v2 + 296) = v2 + 320;
  *(_QWORD *)(v2 + 304) = v2 + 320;
  *(_QWORD *)(v2 + 312) = v2 + 576;
  *(_OWORD *)(v2 + 512) = 0u;
  *(_OWORD *)(v2 + 528) = 0u;
  *(_OWORD *)(v2 + 480) = 0u;
  *(_OWORD *)(v2 + 496) = 0u;
  *(_OWORD *)(v2 + 448) = 0u;
  *(_OWORD *)(v2 + 464) = 0u;
  *(_OWORD *)(v2 + 416) = 0u;
  *(_OWORD *)(v2 + 432) = 0u;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_OWORD *)(v2 + 400) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 616) = 0u;
  *(_OWORD *)(v2 + 632) = 0u;
  *(_OWORD *)(v2 + 648) = 0u;
  *(_OWORD *)(v2 + 600) = 0u;
  *(_OWORD *)(v2 + 544) = 0u;
  *(_OWORD *)(v2 + 560) = 0u;
  *(_QWORD *)(v2 + 576) = v2 + 600;
  *(_QWORD *)(v2 + 584) = v2 + 600;
  *(_QWORD *)(v2 + 592) = v2 + 664;
  *(_QWORD *)(v2 + 664) = v2 + 688;
  *(_QWORD *)(v2 + 672) = v2 + 688;
  *(_QWORD *)(v2 + 680) = v2 + 720;
  *(_OWORD *)(v2 + 688) = 0u;
  *(_OWORD *)(v2 + 704) = 0u;
  *(_OWORD *)(v2 + 760) = 0u;
  *(_OWORD *)(v2 + 744) = 0u;
  *(_QWORD *)(v2 + 720) = v2 + 744;
  *(_QWORD *)(v2 + 728) = v2 + 744;
  *(_QWORD *)(v2 + 736) = v2 + 776;
  *(_WORD *)(v2 + 776) = 1;
  *(_QWORD *)(v2 + 784) = -1;
  *(_DWORD *)(v2 + 800) = 0;
  *(_QWORD *)(v2 + 792) = 0;
  *(_QWORD *)(v2 + 4904) = v2 + 808;
  *((_QWORD *)this + 1) = v2;
  *(_QWORD *)(v2 + 16) = v2 + 40;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 808) = 0u;
  return this;
}

BOOL llvm::ItaniumPartialDemangler::partialDemangle(llvm::ItaniumPartialDemangler *this, const char *__s)
{
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = *((_QWORD *)this + 1);
  v5 = strlen(__s);
  *(_QWORD *)v4 = __s;
  *(_QWORD *)(v4 + 8) = &__s[v5];
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v4 + 304) = *(_QWORD *)(v4 + 296);
  *(_QWORD *)(v4 + 672) = *(_QWORD *)(v4 + 664);
  *(_QWORD *)(v4 + 784) = -1;
  *(_WORD *)(v4 + 776) = 1;
  *(_QWORD *)(v4 + 792) = 0;
  *(_DWORD *)(v4 + 800) = 0;
  v6 = (_QWORD *)(v4 + 808);
  v7 = *(_QWORD **)(v4 + 4904);
  while (v7)
  {
    v8 = (_QWORD *)*v7;
    *(_QWORD *)(v4 + 4904) = *v7;
    if (v7 == v6)
    {
      v7 = v8;
    }
    else
    {
      free(v7);
      v7 = *(_QWORD **)(v4 + 4904);
    }
  }
  *v6 = 0;
  *(_QWORD *)(v4 + 816) = 0;
  *(_QWORD *)(v4 + 4904) = v6;
  v9 = sub_1C54C0B94(v4);
  *(_QWORD *)this = v9;
  return v9 == 0;
}

_BYTE *llvm::ItaniumPartialDemangler::getFunctionName(llvm::ItaniumPartialDemangler *this, char *a2, unint64_t *a3)
{
  if (*(_BYTE *)(*(_QWORD *)this + 8) == 18)
    return sub_1C54C1030(*(_QWORD *)(*(_QWORD *)this + 24), a2, (uint64_t *)a3);
  else
    return 0;
}

_QWORD *sub_1C6253C74(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a4 + a3 <= (*(unsigned __int16 *)(a1 + 9) << 26 >> 26))
  {
    ++*((_DWORD *)a2 + 8);
    sub_1C54C1634(a2, 1);
    v7 = *a2;
    v8 = a2[1];
    a2[1] = v8 + 1;
    *(_BYTE *)(v7 + v8) = 40;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 32))(a1, a2);
    if ((*(_WORD *)(a1 + 9) & 0xC0) != 0x40)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, a2);
    --*((_DWORD *)a2 + 8);
    result = sub_1C54C1634(a2, 1);
    v9 = *a2;
    v10 = a2[1];
    a2[1] = v10 + 1;
    *(_BYTE *)(v9 + v10) = 41;
  }
  else
  {
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 32))(a1, a2);
    if ((*(_WORD *)(a1 + 9) & 0xC0) != 0x40)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, a2);
  }
  return result;
}

char *sub_1C6253D78(char *__dst, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;

  v5 = (_BYTE *)(a2 + 24);
  v4 = *(_BYTE **)a2;
  v7 = __dst + 24;
  v6 = *(char **)__dst;
  if (v4 == v5)
  {
    if (v6 != v7)
    {
      free(v6);
      *(_QWORD *)__dst = v7;
      *((_QWORD *)__dst + 1) = v7;
      *((_QWORD *)__dst + 2) = __dst + 56;
      v4 = *(_BYTE **)a2;
    }
    v10 = *(_BYTE **)(a2 + 8);
    if (v10 == v4)
    {
      v11 = v4;
    }
    else
    {
      memmove(v7, v4, v10 - v4);
      v4 = *(_BYTE **)a2;
      v11 = *(_BYTE **)(a2 + 8);
    }
    *((_QWORD *)__dst + 1) = &v7[v11 - v4];
    *(_QWORD *)(a2 + 8) = v4;
  }
  else
  {
    *(_QWORD *)__dst = v4;
    if (v6 == v7)
    {
      *(_OWORD *)(__dst + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_QWORD *)(a2 + 8) = v5;
      *(_QWORD *)(a2 + 16) = a2 + 56;
    }
    else
    {
      *(_QWORD *)a2 = v6;
      v8 = *((_QWORD *)__dst + 1);
      *((_QWORD *)__dst + 1) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v8;
      v9 = *((_QWORD *)__dst + 2);
      *((_QWORD *)__dst + 2) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
      *(_QWORD *)(a2 + 16) = v9;
    }
  }
  return __dst;
}

char *sub_1C6253E58(char *__dst, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;

  v5 = (_BYTE *)(a2 + 24);
  v4 = *(_BYTE **)a2;
  v7 = __dst + 24;
  v6 = *(char **)__dst;
  if (v4 == v5)
  {
    if (v6 != v7)
    {
      free(v6);
      *(_QWORD *)__dst = v7;
      *((_QWORD *)__dst + 1) = v7;
      *((_QWORD *)__dst + 2) = __dst + 88;
      v4 = *(_BYTE **)a2;
    }
    v10 = *(_BYTE **)(a2 + 8);
    if (v10 == v4)
    {
      v11 = v4;
    }
    else
    {
      memmove(v7, v4, v10 - v4);
      v4 = *(_BYTE **)a2;
      v11 = *(_BYTE **)(a2 + 8);
    }
    *((_QWORD *)__dst + 1) = &v7[v11 - v4];
    *(_QWORD *)(a2 + 8) = v4;
  }
  else
  {
    *(_QWORD *)__dst = v4;
    if (v6 == v7)
    {
      *(_OWORD *)(__dst + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_QWORD *)(a2 + 8) = v5;
      *(_QWORD *)(a2 + 16) = a2 + 88;
    }
    else
    {
      *(_QWORD *)a2 = v6;
      v8 = *((_QWORD *)__dst + 1);
      *((_QWORD *)__dst + 1) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v8;
      v9 = *((_QWORD *)__dst + 2);
      *((_QWORD *)__dst + 2) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
      *(_QWORD *)(a2 + 16) = v9;
    }
  }
  return __dst;
}

uint64_t sub_1C6253F38()
{
  return 0;
}

uint64_t sub_1C6253F40()
{
  return 0;
}

uint64_t sub_1C6253F48()
{
  return 0;
}

uint64_t sub_1C6253F54(_QWORD *a1, _QWORD *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = (_BYTE *)a1[2];
  v4 = (_BYTE *)a1[3];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    sub_1C54C1634(a2, v4 - v5);
    memcpy((void *)(*a2 + a2[1]), v5, v6);
    a2[1] += v6;
  }
  v7 = a1[4];
  result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 32))(v7, a2);
  if ((*(_WORD *)(v7 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 40))(v7, a2);
  return result;
}

uint64_t sub_1C6254000()
{
  return 0;
}

void sub_1C6254010()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6254024(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  sub_1C54C1634(a2, 24);
  qmemcpy((void *)(*a2 + a2[1]), "construction vtable for ", 24);
  a2[1] += 24;
  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 32))(v4, a2);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, a2);
  sub_1C54C1634(a2, 4);
  *(_DWORD *)(*a2 + a2[1]) = 762210605;
  a2[1] += 4;
  v5 = *(_QWORD *)(a1 + 24);
  result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, a2);
  if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 40))(v5, a2);
  return result;
}

void sub_1C6254134()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6254148(_QWORD *result, _QWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  size_t v4;

  v3 = (_BYTE *)result[2];
  v2 = (_BYTE *)result[3];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    sub_1C54C1634(a2, v2 - v3);
    result = memcpy((void *)(*a2 + a2[1]), v3, v4);
    a2[1] += v4;
  }
  return result;
}

uint64_t sub_1C62541A4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void sub_1C62541B4()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62541C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    goto LABEL_8;
  (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)v4 + 32))(*(_QWORD *)(a1 + 16), a2);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 40))(v4, a2);
  if (*(_QWORD *)(a1 + 16))
  {
    if (*(_BYTE *)(a1 + 32))
      v5 = 58;
    else
      v5 = 46;
  }
  else
  {
LABEL_8:
    if (!*(_BYTE *)(a1 + 32))
      goto LABEL_11;
    v5 = 58;
  }
  sub_1C54C1634(a2, 1);
  v6 = *a2;
  v7 = a2[1];
  a2[1] = v7 + 1;
  *(_BYTE *)(v6 + v7) = v5;
LABEL_11:
  v8 = *(_QWORD *)(a1 + 24);
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 32))(v8, a2);
  if ((*(_WORD *)(v8 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 40))(v8, a2);
  return result;
}

void sub_1C62542C4()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62542D8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;

  if (*(_BYTE *)(a1 + 32))
    return 0;
  *(_BYTE *)(a1 + 32) = 1;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(v3 + 9);
  if ((v4 & 0xC0) == 0x80)
    result = (**(uint64_t (***)(uint64_t))v3)(v3);
  else
    result = v4 < 0x40;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_1C625433C(uint64_t a1)
{
  uint64_t result;
  _BYTE *v3;
  int v4;

  if (*(_BYTE *)(a1 + 32))
    return 0;
  *(_BYTE *)(a1 + 32) = 1;
  v3 = *(_BYTE **)(a1 + 24);
  v4 = v3[10] & 3;
  if (v4 == 2)
    result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 8))(v3);
  else
    result = v4 == 0;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_1C62543A0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  if (*(_BYTE *)(a1 + 32))
    return 0;
  *(_BYTE *)(a1 + 32) = 1;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = (*(unsigned __int16 *)(v3 + 9) >> 10) & 3;
  if (v4 == 2)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  else
    result = v4 == 0;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_1C6254404(uint64_t result)
{
  uint64_t v1;

  if (!*(_BYTE *)(result + 32))
  {
    v1 = result;
    *(_BYTE *)(result + 32) = 1;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 24) + 32))(*(_QWORD *)(result + 24));
    *(_BYTE *)(v1 + 32) = 0;
  }
  return result;
}

uint64_t sub_1C6254444(uint64_t result)
{
  uint64_t v1;

  if (!*(_BYTE *)(result + 32))
  {
    v1 = result;
    *(_BYTE *)(result + 32) = 1;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24));
    *(_BYTE *)(v1 + 32) = 0;
  }
  return result;
}

void sub_1C6254488()
{
  JUMPOUT(0x1CAA32FC0);
}

char *sub_1C625449C(uint64_t a1, size_t size)
{
  void *v4;
  uint64_t v5;
  size_t v6;
  char *result;
  char *v8;
  uint64_t v9;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = 8 * size;
  if (*(_QWORD *)a1 != a1 + 24)
  {
    result = (char *)malloc_type_realloc(*(void **)a1, v6, 0x2004093837F09uLL);
    v8 = result;
    *(_QWORD *)a1 = result;
    if (result)
      goto LABEL_3;
LABEL_8:
    std::terminate();
  }
  result = (char *)malloc_type_malloc(v6, 0x2004093837F09uLL);
  if (!result)
    goto LABEL_8;
  v8 = result;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9 != *(_QWORD *)a1)
    result = (char *)memmove(result, *(const void **)a1, v9 - *(_QWORD *)a1);
  *(_QWORD *)a1 = v8;
LABEL_3:
  *(_QWORD *)(a1 + 8) = &v8[v5 - (_QWORD)v4];
  *(_QWORD *)(a1 + 16) = &v8[8 * size];
  return result;
}

_QWORD *sub_1C6254554(uint64_t a1, uint64_t *a2)
{
  const char *v4;
  uint64_t v5;
  int v6;
  int v7;
  __int16 v8;
  int v9;
  int v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*((_DWORD *)a2 + 8))
    goto LABEL_5;
  v4 = *(const char **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32) - (_QWORD)v4;
  if (v5 == 2)
  {
    if (strncmp(v4, ">>", 2uLL))
    {
LABEL_5:
      v6 = 0;
      goto LABEL_6;
    }
  }
  else if (v5 != 1 || *v4 != 62)
  {
    goto LABEL_5;
  }
  v6 = 1;
  *((_DWORD *)a2 + 8) = 1;
  sub_1C54C1634(a2, 1);
  v18 = *a2;
  v19 = a2[1];
  a2[1] = v19 + 1;
  *(_BYTE *)(v18 + v19) = 40;
LABEL_6:
  v7 = *(unsigned __int16 *)(a1 + 9);
  v8 = (_WORD)v7 << 10;
  v9 = (unsigned __int16)((_WORD)v7 << 10);
  v10 = v7 << 26 >> 26;
  if (v9 == 17408)
    v11 = 15;
  else
    v11 = v10;
  sub_1C6253C74(*(_QWORD *)(a1 + 16), a2, v11, v9 != 17408);
  v13 = *(_BYTE **)(a1 + 24);
  v12 = *(_BYTE **)(a1 + 32);
  if (v12 - v13 != 1 || *v13 != 44)
  {
    sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = 32;
    v13 = *(_BYTE **)(a1 + 24);
    v12 = *(_BYTE **)(a1 + 32);
  }
  v14 = v12 - v13;
  if (v12 != v13)
  {
    sub_1C54C1634(a2, v12 - v13);
    memcpy((void *)(*a2 + a2[1]), v13, v14);
    a2[1] += v14;
  }
  sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 32;
  result = sub_1C6253C74(*(_QWORD *)(a1 + 40), a2, *(unsigned __int16 *)(a1 + 9) << 26 >> 26, v8 == 17408);
  if (v6)
  {
    --*((_DWORD *)a2 + 8);
    result = sub_1C54C1634(a2, 1);
    v16 = *a2;
    v17 = a2[1];
    a2[1] = v17 + 1;
    *(_BYTE *)(v16 + v17) = 41;
  }
  return result;
}

void sub_1C6254718()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C625472C(uint64_t a1, uint64_t *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;

  v5 = *(_BYTE **)(a1 + 16);
  v4 = *(_BYTE **)(a1 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    sub_1C54C1634(a2, v4 - v5);
    memcpy((void *)(*a2 + a2[1]), v5, v6);
    a2[1] += v6;
  }
  return sub_1C6253C74(*(_QWORD *)(a1 + 32), a2, *(unsigned __int16 *)(a1 + 9) << 26 >> 26, 0);
}

void sub_1C62547A4()
{
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C62547B8(uint64_t a1, uint64_t *a2)
{
  void *result;
  _BYTE *v5;
  _BYTE *v6;
  size_t v7;

  result = sub_1C6253C74(*(_QWORD *)(a1 + 16), a2, *(unsigned __int16 *)(a1 + 9) << 26 >> 26, 1);
  v6 = *(_BYTE **)(a1 + 24);
  v5 = *(_BYTE **)(a1 + 32);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    sub_1C54C1634(a2, v5 - v6);
    result = memcpy((void *)(*a2 + a2[1]), v6, v7);
    a2[1] += v7;
  }
  return result;
}

void sub_1C6254830()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6254844(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;

  sub_1C6253C74(*(_QWORD *)(a1 + 16), (uint64_t *)a2, *(unsigned __int16 *)(a1 + 9) << 26 >> 26, 0);
  ++*(_DWORD *)(a2 + 32);
  sub_1C54C1634((_QWORD *)a2, 1);
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5 + 1;
  *(_BYTE *)(v4 + v5) = 91;
  sub_1C6253C74(*(_QWORD *)(a1 + 24), (uint64_t *)a2, 19, 0);
  --*(_DWORD *)(a2 + 32);
  result = sub_1C54C1634((_QWORD *)a2, 1);
  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v8 + 1;
  *(_BYTE *)(v7 + v8) = 93;
  return result;
}

void sub_1C62548E8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62548FC(uint64_t a1, uint64_t *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;

  sub_1C6253C74(*(_QWORD *)(a1 + 16), a2, *(unsigned __int16 *)(a1 + 9) << 26 >> 26, 1);
  v5 = *(_BYTE **)(a1 + 24);
  v4 = *(_BYTE **)(a1 + 32);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    sub_1C54C1634(a2, v4 - v5);
    memcpy((void *)(*a2 + a2[1]), v5, v6);
    a2[1] += v6;
  }
  return sub_1C6253C74(*(_QWORD *)(a1 + 40), a2, *(unsigned __int16 *)(a1 + 9) << 26 >> 26, 0);
}

void sub_1C6254988()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C625499C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_BYTE *)(a1 + 56))
  {
    sub_1C54C1634(a2, 2);
    *(_WORD *)(*a2 + a2[1]) = 14906;
    a2[1] += 2;
  }
  sub_1C54C1634(a2, 3);
  v4 = *a2 + a2[1];
  *(_BYTE *)(v4 + 2) = 119;
  *(_WORD *)v4 = 25966;
  a2[1] += 3;
  if (*(_BYTE *)(a1 + 57))
  {
    sub_1C54C1634(a2, 2);
    *(_WORD *)(*a2 + a2[1]) = 23899;
    a2[1] += 2;
  }
  if (*(_QWORD *)(a1 + 24))
  {
    ++*((_DWORD *)a2 + 8);
    sub_1C54C1634(a2, 1);
    v5 = *a2;
    v6 = a2[1];
    a2[1] = v6 + 1;
    *(_BYTE *)(v5 + v6) = 40;
    sub_1C54C1398((_QWORD *)(a1 + 16), a2);
    --*((_DWORD *)a2 + 8);
    sub_1C54C1634(a2, 1);
    v7 = *a2;
    v8 = a2[1];
    a2[1] = v8 + 1;
    *(_BYTE *)(v7 + v8) = 41;
  }
  sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 32;
  v9 = *(_QWORD *)(a1 + 32);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 32))(v9, a2);
  if ((*(_WORD *)(v9 + 9) & 0xC0) != 0x40)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 40))(v9, a2);
  if (*(_QWORD *)(a1 + 48))
  {
    ++*((_DWORD *)a2 + 8);
    sub_1C54C1634(a2, 1);
    v11 = *a2;
    v12 = a2[1];
    a2[1] = v12 + 1;
    *(_BYTE *)(v11 + v12) = 40;
    sub_1C54C1398((_QWORD *)(a1 + 40), a2);
    --*((_DWORD *)a2 + 8);
    result = sub_1C54C1634(a2, 1);
    v13 = *a2;
    v14 = a2[1];
    a2[1] = v14 + 1;
    *(_BYTE *)(v13 + v14) = 41;
  }
  return result;
}

void sub_1C6254B90()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6254BA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  if (*(_BYTE *)(a1 + 24))
  {
    sub_1C54C1634(a2, 2);
    *(_WORD *)(*a2 + a2[1]) = 14906;
    a2[1] += 2;
  }
  sub_1C54C1634(a2, 6);
  v4 = *a2 + a2[1];
  *(_WORD *)(v4 + 4) = 25972;
  *(_DWORD *)v4 = 1701602660;
  a2[1] += 6;
  if (*(_BYTE *)(a1 + 25))
  {
    sub_1C54C1634(a2, 2);
    *(_WORD *)(*a2 + a2[1]) = 23899;
    a2[1] += 2;
  }
  sub_1C54C1634(a2, 1);
  v5 = *a2;
  v6 = a2[1];
  a2[1] = v6 + 1;
  *(_BYTE *)(v5 + v6) = 32;
  v7 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 32))(v7, a2);
  if ((*(_WORD *)(v7 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 40))(v7, a2);
  return result;
}

void sub_1C6254CB8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6254CCC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 40))(v4, a2);
  ++*((_DWORD *)a2 + 8);
  sub_1C54C1634(a2, 1);
  v5 = *a2;
  v6 = a2[1];
  a2[1] = v6 + 1;
  *(_BYTE *)(v5 + v6) = 40;
  sub_1C54C1398((_QWORD *)(a1 + 24), a2);
  --*((_DWORD *)a2 + 8);
  result = sub_1C54C1634(a2, 1);
  v8 = *a2;
  v9 = a2[1];
  a2[1] = v9 + 1;
  *(_BYTE *)(v8 + v9) = 41;
  return result;
}

void sub_1C6254D94()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6254DA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;

  ++*((_DWORD *)a2 + 8);
  sub_1C54C1634(a2, 1);
  v4 = *a2;
  v5 = a2[1];
  a2[1] = v5 + 1;
  *(_BYTE *)(v4 + v5) = 40;
  v6 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 32))(v6, a2);
  if ((*(_WORD *)(v6 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 40))(v6, a2);
  --*((_DWORD *)a2 + 8);
  sub_1C54C1634(a2, 1);
  v7 = *a2;
  v8 = a2[1];
  a2[1] = v8 + 1;
  *(_BYTE *)(v7 + v8) = 41;
  ++*((_DWORD *)a2 + 8);
  sub_1C54C1634(a2, 1);
  v9 = *a2;
  v10 = a2[1];
  a2[1] = v10 + 1;
  *(_BYTE *)(v9 + v10) = 40;
  sub_1C54C1398((_QWORD *)(a1 + 24), a2);
  --*((_DWORD *)a2 + 8);
  result = sub_1C54C1634(a2, 1);
  v12 = *a2;
  v13 = a2[1];
  a2[1] = v13 + 1;
  *(_BYTE *)(v12 + v13) = 41;
  return result;
}

void sub_1C6254EC4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6254ED8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_1C6253C74(*(_QWORD *)(a1 + 16), a2, *(unsigned __int16 *)(a1 + 9) << 26 >> 26, 0);
  sub_1C54C1634(a2, 3);
  v4 = *a2 + a2[1];
  *(_BYTE *)(v4 + 2) = 32;
  *(_WORD *)v4 = 16160;
  a2[1] += 3;
  sub_1C6253C74(*(_QWORD *)(a1 + 24), a2, 19, 0);
  sub_1C54C1634(a2, 3);
  v5 = *a2 + a2[1];
  *(_BYTE *)(v5 + 2) = 32;
  *(_WORD *)v5 = 14880;
  a2[1] += 3;
  return sub_1C6253C74(*(_QWORD *)(a1 + 32), a2, 17, 1);
}

void sub_1C6254F98()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6254FAC(uint64_t a1, uint64_t *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_BYTE **)(a1 + 16);
  v4 = *(_BYTE **)(a1 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    sub_1C54C1634(a2, v4 - v5);
    memcpy((void *)(*a2 + a2[1]), v5, v6);
    a2[1] += v6;
  }
  v7 = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 60;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32), a2);
  v8 = a2[1];
  if (v8 && *(_BYTE *)(v8 + *a2 - 1) == 62)
  {
    sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = 32;
  }
  sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 62;
  *((_DWORD *)a2 + 8) = v7 + 1;
  sub_1C54C1634(a2, 1);
  v9 = *a2;
  v10 = a2[1];
  a2[1] = v10 + 1;
  *(_BYTE *)(v9 + v10) = 40;
  sub_1C6253C74(*(_QWORD *)(a1 + 40), a2, 19, 0);
  --*((_DWORD *)a2 + 8);
  result = sub_1C54C1634(a2, 1);
  v12 = *a2;
  v13 = a2[1];
  a2[1] = v13 + 1;
  *(_BYTE *)(v12 + v13) = 41;
  return result;
}

void sub_1C625511C()
{
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C6255130(_QWORD *a1, uint64_t *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  size_t v15;

  v5 = (_BYTE *)a1[2];
  v4 = (_BYTE *)a1[3];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    sub_1C54C1634(a2, v4 - v5);
    memcpy((void *)(*a2 + a2[1]), v5, v6);
    a2[1] += v6;
  }
  ++*((_DWORD *)a2 + 8);
  sub_1C54C1634(a2, 1);
  v7 = *a2;
  v8 = a2[1];
  a2[1] = v8 + 1;
  *(_BYTE *)(v7 + v8) = 40;
  v9 = a1[4];
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 32))(v9, a2);
  if ((*(_WORD *)(v9 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 40))(v9, a2);
  --*((_DWORD *)a2 + 8);
  result = sub_1C54C1634(a2, 1);
  v11 = *a2;
  v12 = a2[1];
  a2[1] = v12 + 1;
  *(_BYTE *)(v11 + v12) = 41;
  v14 = (_BYTE *)a1[5];
  v13 = (_BYTE *)a1[6];
  v15 = v13 - v14;
  if (v13 != v14)
  {
    sub_1C54C1634(a2, v13 - v14);
    result = memcpy((void *)(*a2 + a2[1]), v14, v15);
    a2[1] += v15;
  }
  return result;
}

void sub_1C6255260()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6255274(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  size_t v23;

  v3 = result;
  if (result[3] - result[2] >= 4uLL)
  {
    ++*((_DWORD *)a2 + 8);
    sub_1C54C1634(a2, 1);
    v4 = *a2;
    v5 = a2[1];
    a2[1] = v5 + 1;
    *(_BYTE *)(v4 + v5) = 40;
    v7 = (_BYTE *)v3[2];
    v6 = (_BYTE *)v3[3];
    v8 = v6 - v7;
    if (v6 != v7)
    {
      sub_1C54C1634(a2, v6 - v7);
      memcpy((void *)(*a2 + a2[1]), v7, v8);
      a2[1] += v8;
    }
    --*((_DWORD *)a2 + 8);
    result = sub_1C54C1634(a2, 1);
    v9 = *a2;
    v10 = a2[1];
    a2[1] = v10 + 1;
    *(_BYTE *)(v9 + v10) = 41;
  }
  v11 = (_BYTE *)v3[4];
  if (*v11 != 110)
  {
    v20 = (_BYTE *)v3[5];
    v17 = v20 - v11;
    if (v20 == v11)
      goto LABEL_14;
    sub_1C54C1634(a2, v20 - v11);
    v18 = *a2;
    v13 = a2 + 1;
    v19 = a2[1];
    goto LABEL_13;
  }
  result = sub_1C54C1634(a2, 1);
  v13 = a2 + 1;
  v12 = a2[1];
  v14 = *a2;
  a2[1] = v12 + 1;
  *(_BYTE *)(v14 + v12) = 45;
  v16 = (_BYTE *)v3[4];
  v15 = (_BYTE *)v3[5];
  if (v15 == v16)
    v11 = (_BYTE *)v3[4];
  else
    v11 = v16 + 1;
  v17 = v15 - v11;
  if (v15 != v11)
  {
    sub_1C54C1634(a2, v15 - v11);
    v18 = *a2;
    v19 = a2[1];
LABEL_13:
    result = memcpy((void *)(v18 + v19), v11, v17);
    *v13 += v17;
  }
LABEL_14:
  v22 = (_BYTE *)v3[2];
  v21 = (_BYTE *)v3[3];
  v23 = v21 - v22;
  if (v21 != v22 && v23 <= 3)
  {
    sub_1C54C1634(a2, v21 - v22);
    result = memcpy((void *)(*a2 + a2[1]), v22, v23);
    a2[1] += v23;
  }
  return result;
}

void sub_1C6255424()
{
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C6255438(uint64_t a1, _QWORD *a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  void *result;

  if (*(_BYTE *)(a1 + 11))
    v3 = "true";
  else
    v3 = "false";
  v4 = "";
  if (!*(_BYTE *)(a1 + 11))
    v4 = "";
  v5 = v4 - v3;
  sub_1C54C1634(a2, v4 - v3);
  result = memcpy((void *)(*a2 + a2[1]), v3, v5);
  a2[1] += v5;
  return result;
}

void sub_1C62554B8()
{
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C62554CC(void *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  _BYTE *v11;
  char v12;
  int v14;
  size_t v15;
  _BYTE v16[5];
  char __str[8];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)result + 2);
  if ((unint64_t)(*((_QWORD *)result + 3) - v2 + 1) >= 9)
  {
    v4 = 0;
    v5 = v16;
    v6 = MEMORY[0x1E0C80978];
    do
    {
      v7 = *(unsigned __int8 *)(v2 + v4);
      if ((*(char *)(v2 + v4) & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v7 + 60) & 0x400) != 0)
        v8 = -48;
      else
        v8 = -87;
      v9 = *(unsigned __int8 *)(v2 + v4 + 1);
      if ((*(char *)(v2 + v4 + 1) & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v9 + 60) & 0x400) != 0)
        v10 = -48;
      else
        v10 = -87;
      *++v5 = v9 + 16 * (v8 + v7) + v10;
      v4 += 2;
    }
    while (v4 != 8);
    if (&v16[1] < v5)
    {
      v11 = &v16[2];
      do
      {
        v12 = *(v11 - 1);
        *(v11 - 1) = *v5;
        *v5-- = v12;
      }
      while (v11++ < v5);
    }
    *(_QWORD *)__str = 0;
    v18 = 0;
    v19 = 0;
    result = (void *)snprintf(__str, 0x18uLL, "%af", *(float *)&v16[1]);
    if ((_DWORD)result)
    {
      v14 = (int)result;
      v15 = (int)result;
      sub_1C54C1634(a2, (int)result);
      result = memcpy((void *)(*a2 + a2[1]), __str, v15);
      a2[1] += v14;
    }
  }
  return result;
}

void sub_1C625564C()
{
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C6255660(void *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  double *v11;
  char v12;
  BOOL v13;
  int v14;
  size_t v15;
  uint64_t v16;
  double v17;
  char __str[16];
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)result + 2);
  if ((unint64_t)(*((_QWORD *)result + 3) - v2 + 1) >= 0x11)
  {
    v4 = 0;
    v5 = (double *)((char *)&v16 + 7);
    v6 = MEMORY[0x1E0C80978];
    do
    {
      v7 = *(unsigned __int8 *)(v2 + v4);
      if ((*(char *)(v2 + v4) & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v7 + 60) & 0x400) != 0)
        v8 = -48;
      else
        v8 = -87;
      v9 = *(unsigned __int8 *)(v2 + v4 + 1);
      if ((*(char *)(v2 + v4 + 1) & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v9 + 60) & 0x400) != 0)
        v10 = -48;
      else
        v10 = -87;
      *((_BYTE *)v5 + 1) = v9 + 16 * (v8 + v7) + v10;
      v5 = (double *)((char *)v5 + 1);
      v4 += 2;
    }
    while (v4 != 16);
    if (&v17 < v5)
    {
      v11 = (double *)((char *)&v17 + 1);
      do
      {
        v12 = *((_BYTE *)v11 - 1);
        *((_BYTE *)v11 - 1) = *(_BYTE *)v5;
        *(_BYTE *)v5 = v12;
        v5 = (double *)((char *)v5 - 1);
        v13 = v11 >= v5;
        v11 = (double *)((char *)v11 + 1);
      }
      while (!v13);
    }
    *(_OWORD *)__str = 0u;
    v19 = 0u;
    result = (void *)snprintf(__str, 0x20uLL, "%a", v17);
    if ((_DWORD)result)
    {
      v14 = (int)result;
      v15 = (int)result;
      sub_1C54C1634(a2, (int)result);
      result = memcpy((void *)(*a2 + a2[1]), __str, v15);
      a2[1] += v14;
    }
  }
  return result;
}

void sub_1C62557DC()
{
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C62557F0(void *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  long double *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  long double *v11;
  char v12;
  BOOL v13;
  int v14;
  size_t v15;
  uint64_t v16;
  long double v17;
  char __str[16];
  _WORD v19[13];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)result + 2);
  if ((unint64_t)(*((_QWORD *)result + 3) - v2 + 1) >= 0x21)
  {
    v4 = 0;
    v5 = (long double *)((char *)&v16 + 7);
    v6 = MEMORY[0x1E0C80978];
    do
    {
      v7 = *(unsigned __int8 *)(v2 + v4);
      if ((*(char *)(v2 + v4) & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v7 + 60) & 0x400) != 0)
        v8 = -48;
      else
        v8 = -87;
      v9 = *(unsigned __int8 *)(v2 + v4 + 1);
      if ((*(char *)(v2 + v4 + 1) & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v9 + 60) & 0x400) != 0)
        v10 = -48;
      else
        v10 = -87;
      *((_BYTE *)v5 + 1) = v9 + 16 * (v8 + v7) + v10;
      v5 = (long double *)((char *)v5 + 1);
      v4 += 2;
    }
    while (v4 != 32);
    if (&v17 < v5)
    {
      v11 = (long double *)((char *)&v17 + 1);
      do
      {
        v12 = *((_BYTE *)v11 - 1);
        *((_BYTE *)v11 - 1) = *(_BYTE *)v5;
        *(_BYTE *)v5 = v12;
        v5 = (long double *)((char *)v5 - 1);
        v13 = v11 >= v5;
        v11 = (long double *)((char *)v11 + 1);
      }
      while (!v13);
    }
    *(_OWORD *)__str = 0u;
    memset(v19, 0, sizeof(v19));
    result = (void *)snprintf(__str, 0x2AuLL, "%LaL", v17);
    if ((_DWORD)result)
    {
      v14 = (int)result;
      v15 = (int)result;
      sub_1C54C1634(a2, (int)result);
      result = memcpy((void *)(*a2 + a2[1]), __str, v15);
      a2[1] += v14;
    }
  }
  return result;
}

void sub_1C6255970()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6255984(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *result;

  sub_1C54C1634(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 15394;
  a2[1] += 2;
  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 32))(v4, a2);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, a2);
  result = sub_1C54C1634(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 8766;
  a2[1] += 2;
  return result;
}

void sub_1C6255A2C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6255A40(uint64_t a1, _QWORD *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  _QWORD *result;

  sub_1C54C1634(a2, 8);
  *(_QWORD *)(*a2 + a2[1]) = 0x64656D616E6E7527;
  a2[1] += 8;
  v5 = *(_BYTE **)(a1 + 16);
  v4 = *(_BYTE **)(a1 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    sub_1C54C1634(a2, v4 - v5);
    memcpy((void *)(*a2 + a2[1]), v5, v6);
    a2[1] += v6;
  }
  result = sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 39;
  return result;
}

void sub_1C6255AF8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6255B0C(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  int v11;

  v3 = result;
  v4 = *((_DWORD *)result + 3);
  if (v4 == 2)
  {
    v5 = 3;
    result = sub_1C54C1634(a2, 3);
    v7 = a2 + 1;
    v10 = *a2 + a2[1];
    *(_BYTE *)(v10 + 2) = 84;
    *(_WORD *)v10 = 21540;
  }
  else
  {
    if (v4 == 1)
    {
      v5 = 2;
      result = sub_1C54C1634(a2, 2);
      v6 = *a2;
      v7 = a2 + 1;
      v8 = a2[1];
      v9 = 20004;
    }
    else
    {
      if (v4)
        goto LABEL_9;
      v5 = 2;
      result = sub_1C54C1634(a2, 2);
      v6 = *a2;
      v7 = a2 + 1;
      v8 = a2[1];
      v9 = 21540;
    }
    *(_WORD *)(v6 + v8) = v9;
  }
  *v7 += v5;
LABEL_9:
  v11 = *((_DWORD *)v3 + 4);
  if (v11)
    return sub_1C6255C10(a2, (v11 - 1), 0);
  return result;
}

void sub_1C6255BFC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6255C10(_QWORD *a1, unint64_t a2, int a3)
{
  uint64_t v4;
  BOOL v5;
  _BYTE *v6;
  size_t v7;
  _BYTE v9[21];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = 20;
  do
  {
    v9[v4--] = (a2 % 0xA) | 0x30;
    v5 = a2 > 9;
    a2 /= 0xAuLL;
  }
  while (v5);
  if (a3)
    v9[v4] = 45;
  else
    ++v4;
  if (v4 != 21)
  {
    v6 = &v9[v4];
    v7 = 21 - v4;
    sub_1C54C1634(a1, 21 - v4);
    memcpy((void *)(*a1 + a1[1]), v6, v7);
    a1[1] += v7;
  }
  return a1;
}

_QWORD *sub_1C6255D00(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  result = sub_1C54C1634(a2, 9);
  v4 = *a2 + a2[1];
  *(_QWORD *)v4 = *(_QWORD *)"typename ";
  *(_BYTE *)(v4 + 8) = 32;
  a2[1] += 9;
  return result;
}

uint64_t sub_1C6255D54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  if ((*(_WORD *)(v3 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a2);
  return result;
}

void sub_1C6255DB4()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6255DC8(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  unsigned int v5;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
  result = *(_QWORD *)(a1 + 24);
  v5 = *(unsigned __int8 *)(result + 9);
  if ((v5 & 0xC0) != 0x80)
  {
    if (v5 < 0x40)
      return result;
    goto LABEL_5;
  }
  result = (**(uint64_t (***)(uint64_t, _QWORD *))result)(result, a2);
  if ((result & 1) == 0)
  {
LABEL_5:
    result = (uint64_t)sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = 32;
  }
  return result;
}

uint64_t sub_1C6255E50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
}

void sub_1C6255EC4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6255ED8(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v4 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  sub_1C54C1634((_QWORD *)a2, 9);
  v5 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
  *(_QWORD *)v5 = *(_QWORD *)"template<";
  *(_BYTE *)(v5 + 8) = 60;
  *(_QWORD *)(a2 + 8) += 9;
  sub_1C54C1398((_QWORD *)(a1 + 24), (uint64_t *)a2);
  result = sub_1C54C1634((_QWORD *)a2, 11);
  v7 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
  *(_QWORD *)v7 = *(_QWORD *)"> typename ";
  *(_DWORD *)(v7 + 7) = 543518049;
  *(_QWORD *)(a2 + 8) += 11;
  *(_DWORD *)(a2 + 32) = v4;
  return result;
}

uint64_t sub_1C6255F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  if ((*(_WORD *)(v3 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a2);
  return result;
}

void sub_1C6255FEC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6256000(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
  result = sub_1C54C1634(a2, 3);
  v4 = *a2 + a2[1];
  *(_BYTE *)(v4 + 2) = 46;
  *(_WORD *)v4 = 11822;
  a2[1] += 3;
  return result;
}

uint64_t sub_1C625605C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
}

void sub_1C6256070()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6256084(_QWORD *a1, uint64_t *a2)
{
  _DWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  size_t v7;

  sub_1C54C1634(a2, 7);
  v4 = (_DWORD *)(*a2 + a2[1]);
  *(_DWORD *)((char *)v4 + 3) = 1633968749;
  *v4 = 1835101223;
  a2[1] += 7;
  v6 = (_BYTE *)a1[6];
  v5 = (_BYTE *)a1[7];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    sub_1C54C1634(a2, v5 - v6);
    memcpy((void *)(*a2 + a2[1]), v6, v7);
    a2[1] += v7;
  }
  sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 39;
  return sub_1C6256160(a1, a2);
}

void sub_1C625614C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6256160(_QWORD *a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;

  v4 = *((_DWORD *)a2 + 8);
  if (a1[3])
  {
    *((_DWORD *)a2 + 8) = 0;
    sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = 60;
    sub_1C54C1398(a1 + 2, a2);
    sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = 62;
  }
  *((_DWORD *)a2 + 8) = v4 + 1;
  sub_1C54C1634(a2, 1);
  v5 = *a2;
  v6 = a2[1];
  a2[1] = v6 + 1;
  *(_BYTE *)(v5 + v6) = 40;
  sub_1C54C1398(a1 + 4, a2);
  --*((_DWORD *)a2 + 8);
  result = sub_1C54C1634(a2, 1);
  v8 = *a2;
  v9 = a2[1];
  a2[1] = v9 + 1;
  *(_BYTE *)(v8 + v9) = 41;
  return result;
}

_QWORD *sub_1C6256258(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  sub_1C54C1634(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 23899;
  a2[1] += 2;
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v4 + 8) == 48)
    sub_1C6256160((_QWORD *)v4, a2);
  result = sub_1C54C1634(a2, 5);
  v6 = *a2 + a2[1];
  *(_BYTE *)(v6 + 4) = 125;
  *(_DWORD *)v6 = 774778491;
  a2[1] += 5;
  return result;
}

void sub_1C62562F0()
{
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C6256304(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  size_t v13;

  ++*((_DWORD *)a2 + 8);
  sub_1C54C1634(a2, 1);
  v4 = *a2;
  v5 = a2[1];
  a2[1] = v5 + 1;
  *(_BYTE *)(v4 + v5) = 40;
  v6 = a1[2];
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 32))(v6, a2);
  if ((*(_WORD *)(v6 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 40))(v6, a2);
  --*((_DWORD *)a2 + 8);
  result = sub_1C54C1634(a2, 1);
  v8 = *a2;
  v9 = a2[1];
  a2[1] = v9 + 1;
  *(_BYTE *)(v8 + v9) = 41;
  v10 = (_BYTE *)a1[3];
  if (*v10 == 110)
  {
    result = sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = 45;
    v12 = (_BYTE *)a1[3];
    v11 = (_BYTE *)a1[4];
    if (v11 == v12)
      v10 = (_BYTE *)a1[3];
    else
      v10 = v12 + 1;
  }
  else
  {
    v11 = (_BYTE *)a1[4];
  }
  v13 = v11 - v10;
  if (v11 != v10)
  {
    sub_1C54C1634(a2, v11 - v10);
    result = memcpy((void *)(*a2 + a2[1]), v10, v13);
    a2[1] += v13;
  }
  return result;
}

void sub_1C6256440()
{
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C6256454(uint64_t a1, _QWORD *a2)
{
  void *result;
  _BYTE *v5;
  _BYTE *v6;
  size_t v7;

  result = sub_1C54C1634(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 28774;
  a2[1] += 2;
  v6 = *(_BYTE **)(a1 + 16);
  v5 = *(_BYTE **)(a1 + 24);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    sub_1C54C1634(a2, v5 - v6);
    result = memcpy((void *)(*a2 + a2[1]), v6, v7);
    a2[1] += v7;
  }
  return result;
}

void sub_1C62564DC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62564F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  size_t v13;
  _BYTE *v14;
  _BYTE *v15;
  size_t v16;
  uint64_t v17[2];

  v17[0] = a2;
  v17[1] = a1;
  ++*(_DWORD *)(a2 + 32);
  sub_1C54C1634((_QWORD *)a2, 1);
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5 + 1;
  *(_BYTE *)(v4 + v5) = 40;
  if (*(_BYTE *)(a1 + 48))
  {
    v6 = *(_QWORD *)(a1 + 24);
    if (!v6)
      goto LABEL_3;
    sub_1C6253C74(v6, (uint64_t *)a2, 3, 1);
  }
  else
  {
    sub_1C6256730(v17);
  }
  sub_1C54C1634((_QWORD *)a2, 1);
  *(_BYTE *)(*(_QWORD *)a2 + (*(_QWORD *)(a2 + 8))++) = 32;
  v15 = *(_BYTE **)(a1 + 32);
  v14 = *(_BYTE **)(a1 + 40);
  v16 = v14 - v15;
  if (v14 != v15)
  {
    sub_1C54C1634((_QWORD *)a2, v14 - v15);
    memcpy((void *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8)), v15, v16);
    *(_QWORD *)(a2 + 8) += v16;
  }
  sub_1C54C1634((_QWORD *)a2, 1);
  *(_BYTE *)(*(_QWORD *)a2 + (*(_QWORD *)(a2 + 8))++) = 32;
LABEL_3:
  sub_1C54C1634((_QWORD *)a2, 3);
  v7 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
  *(_BYTE *)(v7 + 2) = 46;
  *(_WORD *)v7 = 11822;
  *(_QWORD *)(a2 + 8) += 3;
  if (*(_BYTE *)(a1 + 48) || *(_QWORD *)(a1 + 24))
  {
    sub_1C54C1634((_QWORD *)a2, 1);
    *(_BYTE *)(*(_QWORD *)a2 + (*(_QWORD *)(a2 + 8))++) = 32;
    v12 = *(_BYTE **)(a1 + 32);
    v11 = *(_BYTE **)(a1 + 40);
    v13 = v11 - v12;
    if (v11 != v12)
    {
      sub_1C54C1634((_QWORD *)a2, v11 - v12);
      memcpy((void *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8)), v12, v13);
      *(_QWORD *)(a2 + 8) += v13;
    }
    sub_1C54C1634((_QWORD *)a2, 1);
    *(_BYTE *)(*(_QWORD *)a2 + (*(_QWORD *)(a2 + 8))++) = 32;
    if (*(_BYTE *)(a1 + 48))
      sub_1C6256730(v17);
    else
      sub_1C6253C74(*(_QWORD *)(a1 + 24), (uint64_t *)a2, 3, 1);
  }
  --*(_DWORD *)(a2 + 32);
  result = sub_1C54C1634((_QWORD *)a2, 1);
  v9 = *(_QWORD *)a2;
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v10 + 1;
  *(_BYTE *)(v9 + v10) = 41;
  return result;
}

void sub_1C625671C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6256730(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  void (**v12)(void **, _QWORD);
  char v13;
  __int16 v14;
  uint64_t v15;

  v2 = *a1;
  v3 = a1[1];
  *(_DWORD *)(v2 + 32) = *(_DWORD *)(*a1 + 32) + 1;
  sub_1C54C1634((_QWORD *)v2, 1);
  v4 = *(_QWORD *)v2;
  v5 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)(v2 + 8) = v5 + 1;
  *(_BYTE *)(v4 + v5) = 40;
  v6 = *(_QWORD *)(v3 + 16);
  v13 = 38;
  v14 = 1344;
  v12 = (void (**)(void **, _QWORD))&unk_1E816B790;
  v15 = v6;
  v7 = *a1;
  sub_1C625681C((uint64_t)&v12, *a1);
  if ((v14 & 0xC0) != 0x40)
    v12[5]((void **)&v12, v7);
  v8 = *a1;
  --*(_DWORD *)(v8 + 32);
  result = sub_1C54C1634((_QWORD *)v8, 1);
  v10 = *(_QWORD *)v8;
  v11 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 8) = v11 + 1;
  *(_BYTE *)(v10 + v11) = 41;
  return result;
}

_QWORD *sub_1C625681C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = -1;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  if ((*(_WORD *)(v6 + 9) & 0xC0) != 0x40)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(v6, a2);
  v8 = *(_DWORD *)(a2 + 28);
  if (v8 == -1)
  {
    result = sub_1C54C1634((_QWORD *)a2, 3);
    v11 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
    *(_BYTE *)(v11 + 2) = 46;
    *(_WORD *)v11 = 11822;
    v5 = *(_QWORD *)(a2 + 8) + 3;
    goto LABEL_12;
  }
  if (!v8)
  {
LABEL_12:
    *(_QWORD *)(a2 + 8) = v5;
    goto LABEL_13;
  }
  if (v8 >= 2)
  {
    for (i = 1; i != v8; ++i)
    {
      sub_1C54C1634((_QWORD *)a2, 2);
      *(_WORD *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8)) = 8236;
      *(_QWORD *)(a2 + 8) += 2;
      *(_DWORD *)(a2 + 24) = i;
      v10 = *(_QWORD *)(a1 + 16);
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, a2);
      if ((*(_WORD *)(v10 + 9) & 0xC0) != 0x40)
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, a2);
    }
  }
LABEL_13:
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

void sub_1C6256960()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6256974(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v4 = *(unsigned __int8 *)(a1 + 32);
  sub_1C54C1634(a2, 1);
  v5 = *a2;
  v6 = a2[1];
  a2[1] = v6 + 1;
  if (v4)
  {
    *(_BYTE *)(v5 + v6) = 91;
    v7 = *(_QWORD *)(a1 + 16);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 32))(v7, a2);
    if ((*(_WORD *)(v7 + 9) & 0xC0) != 0x40)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 40))(v7, a2);
    sub_1C54C1634(a2, 1);
    v8 = *a2;
    v9 = a2[1];
    a2[1] = v9 + 1;
    *(_BYTE *)(v8 + v9) = 93;
  }
  else
  {
    *(_BYTE *)(v5 + v6) = 46;
    v13 = *(_QWORD *)(a1 + 16);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 32))(v13, a2);
    if ((*(_WORD *)(v13 + 9) & 0xC0) != 0x40)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 40))(v13, a2);
  }
  v10 = *(_QWORD *)(a1 + 24);
  if (*(unsigned __int8 *)(v10 + 8) - 77 >= 2)
  {
    sub_1C54C1634(a2, 3);
    v11 = *a2 + a2[1];
    *(_BYTE *)(v11 + 2) = 32;
    *(_WORD *)v11 = 15648;
    a2[1] += 3;
    v10 = *(_QWORD *)(a1 + 24);
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 32))(v10, a2);
  if ((*(_WORD *)(v10 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 40))(v10, a2);
  return result;
}

void sub_1C6256AF8()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6256B0C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  sub_1C54C1634(a2, 1);
  v4 = *a2;
  v5 = a2[1];
  a2[1] = v5 + 1;
  *(_BYTE *)(v4 + v5) = 91;
  v6 = a1[2];
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 32))(v6, a2);
  if ((*(_WORD *)(v6 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 40))(v6, a2);
  sub_1C54C1634(a2, 5);
  v7 = *a2 + a2[1];
  *(_BYTE *)(v7 + 4) = 32;
  *(_DWORD *)v7 = 774778400;
  a2[1] += 5;
  v8 = a1[3];
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 32))(v8, a2);
  if ((*(_WORD *)(v8 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 40))(v8, a2);
  sub_1C54C1634(a2, 1);
  v9 = *a2;
  v10 = a2[1];
  a2[1] = v10 + 1;
  *(_BYTE *)(v9 + v10) = 93;
  v11 = a1[4];
  if (*(unsigned __int8 *)(v11 + 8) - 77 >= 2)
  {
    sub_1C54C1634(a2, 3);
    v12 = *a2 + a2[1];
    *(_BYTE *)(v12 + 2) = 32;
    *(_WORD *)v12 = 15648;
    a2[1] += 3;
    v11 = a1[4];
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 32))(v11, a2);
  if ((*(_WORD *)(v11 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 40))(v11, a2);
  return result;
}

void sub_1C6256CB0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6256CC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)v4 + 32))(*(_QWORD *)(a1 + 16), a2);
    if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 40))(v4, a2);
  }
  sub_1C54C1634(a2, 1);
  v5 = *a2;
  v6 = a2[1];
  a2[1] = v6 + 1;
  *(_BYTE *)(v5 + v6) = 123;
  sub_1C54C1398((_QWORD *)(a1 + 24), a2);
  result = sub_1C54C1634(a2, 1);
  v8 = *a2;
  v9 = a2[1];
  a2[1] = v9 + 1;
  *(_BYTE *)(v8 + v9) = 125;
  return result;
}

void sub_1C6256D7C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6256D90(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  ++*((_DWORD *)a2 + 8);
  sub_1C54C1634(a2, 1);
  v4 = *a2;
  v5 = a2[1];
  a2[1] = v5 + 1;
  *(_BYTE *)(v4 + v5) = 40;
  v6 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 32))(v6, a2);
  if ((*(_WORD *)(v6 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 40))(v6, a2);
  --*((_DWORD *)a2 + 8);
  sub_1C54C1634(a2, 1);
  v7 = *a2;
  v8 = a2[1];
  a2[1] = v8 + 1;
  *(_BYTE *)(v7 + v8) = 41;
  ++*((_DWORD *)a2 + 8);
  sub_1C54C1634(a2, 1);
  v9 = *a2;
  v10 = a2[1];
  a2[1] = v10 + 1;
  *(_BYTE *)(v9 + v10) = 40;
  v11 = *(_QWORD *)(a1 + 24);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 32))(v11, a2);
  if ((*(_WORD *)(v11 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 40))(v11, a2);
  --*((_DWORD *)a2 + 8);
  result = sub_1C54C1634(a2, 1);
  v13 = *a2;
  v14 = a2[1];
  a2[1] = v14 + 1;
  *(_BYTE *)(v13 + v14) = 41;
  return result;
}

void sub_1C6256EDC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6256EF0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  size_t v11;
  _QWORD *result;

  v4 = a1[3];
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, a2);
  sub_1C54C1634(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 15406;
  a2[1] += 2;
  v5 = a1[2];
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, a2);
  if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 40))(v5, a2);
  sub_1C54C1634(a2, 11);
  v6 = *a2 + a2[1];
  *(_QWORD *)v6 = *(_QWORD *)" at offset ";
  *(_DWORD *)(v6 + 7) = 544499059;
  a2[1] += 11;
  v8 = (_BYTE *)a1[4];
  v7 = (_BYTE *)a1[5];
  if (v8 == v7)
  {
    v11 = 1;
    sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]) = 48;
LABEL_15:
    a2[1] += v11;
    goto LABEL_16;
  }
  if (*v8 != 110)
  {
    v11 = v7 - v8;
LABEL_14:
    sub_1C54C1634(a2, v11);
    memcpy((void *)(*a2 + a2[1]), v8, v11);
    goto LABEL_15;
  }
  sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 45;
  v10 = (_BYTE *)a1[4];
  v9 = (_BYTE *)a1[5];
  if (v9 == v10)
    v8 = (_BYTE *)a1[4];
  else
    v8 = v10 + 1;
  v11 = v9 - v8;
  if (v9 != v8)
    goto LABEL_14;
LABEL_16:
  result = sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 62;
  return result;
}

void sub_1C62570B8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62570CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char v12;
  __int16 v13;
  uint64_t v14;

  sub_1C54C1634((_QWORD *)a2, 9);
  v4 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
  *(_QWORD *)v4 = *(_QWORD *)"sizeof...";
  *(_BYTE *)(v4 + 8) = 46;
  *(_QWORD *)(a2 + 8) += 9;
  ++*(_DWORD *)(a2 + 32);
  sub_1C54C1634((_QWORD *)a2, 1);
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v6 + 1;
  *(_BYTE *)(v5 + v6) = 40;
  v7 = *(_QWORD *)(a1 + 16);
  v12 = 38;
  v13 = 1344;
  v11 = &unk_1E816B790;
  v14 = v7;
  sub_1C625681C((uint64_t)&v11, a2);
  --*(_DWORD *)(a2 + 32);
  result = sub_1C54C1634((_QWORD *)a2, 1);
  v9 = *(_QWORD *)a2;
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v10 + 1;
  *(_BYTE *)(v9 + v10) = 41;
  return result;
}

void sub_1C62571BC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62571D0(uint64_t a1, uint64_t *a2)
{
  return sub_1C54C1398((_QWORD *)(a1 + 16), a2);
}

void sub_1C62571DC()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62571F0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  sub_1C54C1634(a2, 6);
  v4 = *a2 + a2[1];
  *(_WORD *)(v4 + 4) = 8311;
  *(_DWORD *)v4 = 1869768820;
  a2[1] += 6;
  v5 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, a2);
  if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 40))(v5, a2);
  return result;
}

void sub_1C625728C()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62572A0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, a2);
  sub_1C54C1634(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 14906;
  a2[1] += 2;
  v5 = *(_QWORD *)(a1 + 24);
  result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, a2);
  if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 40))(v5, a2);
  return result;
}

uint64_t sub_1C625736C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
}

void sub_1C6257380()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6257394(uint64_t a1, _QWORD *a2)
{
  sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 126;
  return (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2);
}

void sub_1C62573EC()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6257400(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  sub_1C54C1634(a2, 9);
  v4 = *a2 + a2[1];
  *(_QWORD *)v4 = *(_QWORD *)"operator ";
  *(_BYTE *)(v4 + 8) = 32;
  a2[1] += 9;
  v5 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, a2);
  if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 40))(v5, a2);
  return result;
}

void sub_1C62574A0()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62574B4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  sub_1C54C1634(a2, 11);
  v4 = *a2 + a2[1];
  *(_QWORD *)v4 = *(_QWORD *)"operator\"\" ";
  *(_DWORD *)(v4 + 7) = 539107954;
  a2[1] += 11;
  v5 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, a2);
  if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 40))(v5, a2);
  return result;
}

void sub_1C6257558()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C625756C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;

  sub_1C54C1634(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 14906;
  a2[1] += 2;
  v4 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 32))(v4, a2);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, a2);
  return result;
}

uint64_t sub_1C62575F4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

void sub_1C6257608()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C625761C(_QWORD *result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  switch(*((_DWORD *)result + 3))
  {
    case 0:
      v3 = 14;
      result = sub_1C54C1634(a2, 14);
      v4 = *a2;
      v6 = a2[1];
      v5 = a2 + 1;
      qmemcpy((void *)(v4 + v6), "std::allocator", 14);
      goto LABEL_8;
    case 1:
      v3 = 17;
      result = sub_1C54C1634(a2, 17);
      v7 = *a2;
      v8 = a2[1];
      v5 = a2 + 1;
      v9 = v7 + v8;
      *(_OWORD *)v9 = *(_OWORD *)"std::basic_string";
      *(_BYTE *)(v9 + 16) = 103;
      goto LABEL_8;
    case 2:
      v3 = 11;
      result = sub_1C54C1634(a2, 11);
      v10 = *a2;
      v11 = a2[1];
      v5 = a2 + 1;
      v12 = v10 + v11;
      *(_QWORD *)v12 = *(_QWORD *)"std::string";
      *(_DWORD *)(v12 + 7) = 1735289202;
      goto LABEL_8;
    case 3:
      v3 = 12;
      result = sub_1C54C1634(a2, 12);
      v13 = *a2;
      v14 = a2[1];
      v5 = a2 + 1;
      v15 = v13 + v14;
      v16 = "std::istream";
      goto LABEL_7;
    case 4:
      v3 = 12;
      result = sub_1C54C1634(a2, 12);
      v17 = *a2;
      v18 = a2[1];
      v5 = a2 + 1;
      v15 = v17 + v18;
      v16 = "std::ostream";
LABEL_7:
      *(_QWORD *)v15 = *(_QWORD *)v16;
      *(_DWORD *)(v15 + 8) = 1835099506;
      goto LABEL_8;
    case 5:
      v3 = 13;
      result = sub_1C54C1634(a2, 13);
      v19 = *a2;
      v20 = a2[1];
      v5 = a2 + 1;
      qmemcpy((void *)(v19 + v20), "std::iostream", 13);
LABEL_8:
      *v5 += v3;
      break;
    default:
      return result;
  }
  return result;
}

char *sub_1C62577AC(uint64_t a1)
{
  return off_1E816C728[*(int *)(a1 + 12)];
}

void sub_1C62577D0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62577E4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  size_t v7;
  _QWORD *result;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
  sub_1C54C1634(a2, 5);
  v4 = *a2 + a2[1];
  *(_BYTE *)(v4 + 4) = 58;
  *(_DWORD *)v4 = 1768055131;
  a2[1] += 5;
  v6 = *(_BYTE **)(a1 + 24);
  v5 = *(_BYTE **)(a1 + 32);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    sub_1C54C1634(a2, v5 - v6);
    memcpy((void *)(*a2 + a2[1]), v6, v7);
    a2[1] += v7;
  }
  result = sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 93;
  return result;
}

void sub_1C62578B0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62578C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;

  ++*((_DWORD *)a2 + 8);
  sub_1C54C1634(a2, 1);
  v4 = *a2;
  v5 = a2[1];
  a2[1] = v5 + 1;
  *(_BYTE *)(v4 + v5) = 91;
  sub_1C54C1398((_QWORD *)(a1 + 16), a2);
  --*((_DWORD *)a2 + 8);
  result = sub_1C54C1634(a2, 1);
  v7 = *a2;
  v8 = a2[1];
  a2[1] = v8 + 1;
  *(_BYTE *)(v7 + v8) = 93;
  return result;
}

void sub_1C625794C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6257960(_QWORD *result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  switch(*((_DWORD *)result + 3))
  {
    case 0:
      v3 = 14;
      result = sub_1C54C1634(a2, 14);
      v4 = *a2;
      v6 = a2[1];
      v5 = a2 + 1;
      qmemcpy((void *)(v4 + v6), "std::allocator", 14);
      goto LABEL_8;
    case 1:
      v3 = 17;
      result = sub_1C54C1634(a2, 17);
      v7 = *a2;
      v8 = a2[1];
      v5 = a2 + 1;
      v9 = v7 + v8;
      *(_OWORD *)v9 = *(_OWORD *)"std::basic_string";
      *(_BYTE *)(v9 + 16) = 103;
      goto LABEL_8;
    case 2:
      v3 = 70;
      result = sub_1C54C1634(a2, 70);
      v10 = *a2;
      v11 = a2[1];
      v5 = a2 + 1;
      qmemcpy((void *)(v10 + v11), "std::basic_string<char, std::char_traits<char>, std::allocator<char> >", 70);
      goto LABEL_8;
    case 3:
      v3 = 49;
      result = sub_1C54C1634(a2, 49);
      v12 = *a2;
      v13 = a2[1];
      v5 = a2 + 1;
      v14 = v12 + v13;
      v15 = "std::basic_istream<char, std::char_traits<char> >";
      goto LABEL_7;
    case 4:
      v3 = 49;
      result = sub_1C54C1634(a2, 49);
      v16 = *a2;
      v17 = a2[1];
      v5 = a2 + 1;
      v14 = v16 + v17;
      v15 = "std::basic_ostream<char, std::char_traits<char> >";
LABEL_7:
      v18 = *((_OWORD *)v15 + 1);
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *(_OWORD *)(v14 + 16) = v18;
      *(_OWORD *)(v14 + 32) = *((_OWORD *)v15 + 2);
      *(_BYTE *)(v14 + 48) = 62;
      goto LABEL_8;
    case 5:
      v3 = 50;
      result = sub_1C54C1634(a2, 50);
      v19 = *a2;
      v20 = a2[1];
      v5 = a2 + 1;
      qmemcpy((void *)(v19 + v20), "std::basic_iostream<char, std::char_traits<char> >", 50);
LABEL_8:
      *v5 += v3;
      break;
    default:
      return result;
  }
  return result;
}

char *sub_1C6257B00(uint64_t a1)
{
  return off_1E816C788[*(int *)(a1 + 12)];
}

void sub_1C6257B24()
{
  JUMPOUT(0x1CAA32FC0);
}

_BYTE *sub_1C6257B38(uint64_t a1, _QWORD *a2)
{
  _BYTE *result;
  _BYTE *v5;
  size_t v6;
  const void *v7;

  if (*(_BYTE *)(a1 + 24))
  {
    sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = 126;
  }
  result = (_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
  v6 = v5 - result;
  if (v5 != result)
  {
    v7 = result;
    sub_1C54C1634(a2, v6);
    result = memcpy((void *)(*a2 + a2[1]), v7, v6);
    a2[1] += v6;
  }
  return result;
}

void sub_1C6257BD8()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6257BEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 40))(v4, a2);
  sub_1C54C1634(a2, 1);
  v5 = *a2;
  v6 = a2[1];
  a2[1] = v6 + 1;
  *(_BYTE *)(v5 + v6) = 64;
  v7 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 32))(v7, a2);
  if ((*(_WORD *)(v7 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 40))(v7, a2);
  return result;
}

uint64_t sub_1C6257CB4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
}

void sub_1C6257CC8()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6257CDC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, a2);
  sub_1C54C1634(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 14906;
  a2[1] += 2;
  v5 = *(_QWORD *)(a1 + 24);
  result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, a2);
  if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 40))(v5, a2);
  return result;
}

uint64_t sub_1C6257DA8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
}

void sub_1C6257DBC()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6257DD0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, a2);
  sub_1C54C1634(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 14906;
  a2[1] += 2;
  v5 = *(_QWORD *)(a1 + 24);
  result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, a2);
  if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 40))(v5, a2);
  return result;
}

void sub_1C6257EA0()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6257EB4(uint64_t result, uint64_t a2, uint64_t a3)
{
  __int16 v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(result + 8) = 36;
  v3 = *(_WORD *)(result + 9) & 0xF000;
  *(_QWORD *)result = &unk_1E816BF20;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  v4 = v3 | 0xA80;
  *(_WORD *)(result + 9) = v3 | 0xA80;
  v5 = 8 * a3;
  if (a3)
  {
    v6 = 8 * a3;
    v7 = a2;
    while ((*(_WORD *)(*(_QWORD *)v7 + 9) & 0x300) == 0x100)
    {
      v7 += 8;
      v6 -= 8;
      if (!v6)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v4 = v3 | 0x980;
    *(_WORD *)(result + 9) = v3 | 0x980;
  }
  if (a3)
  {
    v8 = 8 * a3;
    v9 = a2;
    while ((*(_WORD *)(*(_QWORD *)v9 + 9) & 0xC00) == 0x400)
    {
      v9 += 8;
      v8 -= 8;
      if (!v8)
        goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    v4 = v4 & 0xF3FF | 0x400;
    *(_WORD *)(result + 9) = v4;
  }
  if (a3)
  {
    while ((*(_WORD *)(*(_QWORD *)a2 + 9) & 0xC0) == 0x40)
    {
      a2 += 8;
      v5 -= 8;
      if (!v5)
        goto LABEL_14;
    }
  }
  else
  {
LABEL_14:
    *(_WORD *)(result + 9) = v4 & 0xFF3F | 0x40;
  }
  return result;
}

uint64_t sub_1C6257F8C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;

  if (*(_DWORD *)(a2 + 28) == -1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 28) = v3;
  }
  else
  {
    v2 = *(unsigned int *)(a2 + 24);
    v3 = *(_QWORD *)(a1 + 24);
  }
  if (v3 <= v2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v2);
  v5 = *(unsigned __int8 *)(v4 + 9);
  if ((v5 & 0xC0) == 0x80)
    return (**(uint64_t (***)(uint64_t))v4)(v4);
  else
    return v5 < 0x40;
}

uint64_t sub_1C6257FF0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _BYTE *v4;
  int v5;

  if (*(_DWORD *)(a2 + 28) == -1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 28) = v3;
  }
  else
  {
    v2 = *(unsigned int *)(a2 + 24);
    v3 = *(_QWORD *)(a1 + 24);
  }
  if (v3 <= v2)
    return 0;
  v4 = *(_BYTE **)(*(_QWORD *)(a1 + 16) + 8 * v2);
  v5 = v4[10] & 3;
  if (v5 == 2)
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 8))(v4);
  else
    return v5 == 0;
}

uint64_t sub_1C6258054(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;

  if (*(_DWORD *)(a2 + 28) == -1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 28) = v3;
  }
  else
  {
    v2 = *(unsigned int *)(a2 + 24);
    v3 = *(_QWORD *)(a1 + 24);
  }
  if (v3 <= v2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v2);
  v5 = (*(unsigned __int16 *)(v4 + 9) >> 10) & 3;
  if (v5 == 2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  else
    return v5 == 0;
}

uint64_t sub_1C62580B8(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)(a2 + 28) == -1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(result + 24);
    *(_DWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 28) = v3;
  }
  else
  {
    v2 = *(unsigned int *)(a2 + 24);
    v3 = *(_QWORD *)(result + 24);
  }
  if (v3 > v2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * v2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  }
  return result;
}

uint64_t sub_1C62580FC(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)(a2 + 28) == -1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(result + 24);
    *(_DWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 28) = v3;
  }
  else
  {
    v2 = *(unsigned int *)(a2 + 24);
    v3 = *(_QWORD *)(result + 24);
  }
  if (v3 > v2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * v2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  }
  return result;
}

void sub_1C6258144()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6258158(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  _QWORD *result;

  v4 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  sub_1C54C1634((_QWORD *)a2, 1);
  *(_BYTE *)(*(_QWORD *)a2 + (*(_QWORD *)(a2 + 8))++) = 60;
  sub_1C54C1398((_QWORD *)(a1 + 16), (uint64_t *)a2);
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 && *(_BYTE *)(v5 + *(_QWORD *)a2 - 1) == 62)
  {
    sub_1C54C1634((_QWORD *)a2, 1);
    *(_BYTE *)(*(_QWORD *)a2 + (*(_QWORD *)(a2 + 8))++) = 32;
  }
  result = sub_1C54C1634((_QWORD *)a2, 1);
  *(_BYTE *)(*(_QWORD *)a2 + (*(_QWORD *)(a2 + 8))++) = 62;
  *(_DWORD *)(a2 + 32) = v4;
  return result;
}

void sub_1C6258224()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6258238(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a2);
  v5 = *(_QWORD *)(a1 + 24);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2);
  if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, a2);
  return result;
}

uint64_t sub_1C62582E0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

void sub_1C62582F4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6258308(uint64_t a1, uint64_t *a2)
{
  return sub_1C54C1398((_QWORD *)(a1 + 16), a2);
}

void sub_1C6258314()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6258328(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  sub_1C54C1634(a2, 12);
  v4 = *a2 + a2[1];
  *(_QWORD *)v4 = *(_QWORD *)" [enable_if:";
  *(_DWORD *)(v4 + 8) = 979790175;
  a2[1] += 12;
  sub_1C54C1398((_QWORD *)(a1 + 16), a2);
  result = sub_1C54C1634(a2, 1);
  v6 = *a2;
  v7 = a2[1];
  a2[1] = v7 + 1;
  *(_BYTE *)(v6 + v7) = 93;
  return result;
}

void sub_1C62583B4()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62583C8()
{
  return 1;
}

uint64_t sub_1C62583D0()
{
  return 1;
}

uint64_t sub_1C62583D8(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    goto LABEL_7;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 32))(v4, a2);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(unsigned __int8 *)(v5 + 9);
  if ((v6 & 0xC0) != 0x80)
  {
    if (v6 < 0x40)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (((**(uint64_t (***)(uint64_t, _QWORD *))v5)(v5, a2) & 1) == 0)
  {
LABEL_6:
    sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = 32;
  }
LABEL_7:
  v7 = *(_QWORD *)(a1 + 24);
  result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 32))(v7, a2);
  if ((*(_WORD *)(v7 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 40))(v7, a2);
  return result;
}

_QWORD *sub_1C62584AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  ++*((_DWORD *)a2 + 8);
  sub_1C54C1634(a2, 1);
  v4 = *a2;
  v5 = a2[1];
  a2[1] = v5 + 1;
  *(_BYTE *)(v4 + v5) = 40;
  sub_1C54C1398((_QWORD *)(a1 + 32), a2);
  --*((_DWORD *)a2 + 8);
  sub_1C54C1634(a2, 1);
  v6 = *a2;
  v7 = a2[1];
  a2[1] = v7 + 1;
  *(_BYTE *)(v6 + v7) = 41;
  result = *(_QWORD **)(a1 + 16);
  if (result)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*result + 40))(result, a2);
  v9 = *(_DWORD *)(a1 + 56);
  if ((v9 & 1) != 0)
  {
    result = sub_1C54C1634(a2, 6);
    v13 = *a2 + a2[1];
    *(_WORD *)(v13 + 4) = 29811;
    *(_DWORD *)v13 = 1852793632;
    a2[1] += 6;
    v9 = *(_DWORD *)(a1 + 56);
  }
  if ((v9 & 2) != 0)
  {
    result = sub_1C54C1634(a2, 9);
    v14 = *a2 + a2[1];
    *(_QWORD *)v14 = *(_QWORD *)" volatile";
    *(_BYTE *)(v14 + 8) = 101;
    a2[1] += 9;
    v9 = *(_DWORD *)(a1 + 56);
  }
  if ((v9 & 4) != 0)
  {
    result = sub_1C54C1634(a2, 9);
    v10 = *a2 + a2[1];
    *(_QWORD *)v10 = *(_QWORD *)" restrict";
    *(_BYTE *)(v10 + 8) = 116;
    a2[1] += 9;
  }
  v11 = *(unsigned __int8 *)(a1 + 60);
  if (v11 == 2)
  {
    v12 = 3;
    result = sub_1C54C1634(a2, 3);
    v15 = *a2 + a2[1];
    *(_BYTE *)(v15 + 2) = 38;
    *(_WORD *)v15 = 9760;
  }
  else
  {
    if (v11 != 1)
      goto LABEL_14;
    v12 = 2;
    result = sub_1C54C1634(a2, 2);
    *(_WORD *)(*a2 + a2[1]) = 9760;
  }
  a2[1] += v12;
LABEL_14:
  v16 = *(_QWORD *)(a1 + 48);
  if (v16)
  {
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 32))(v16, a2);
    if ((*(_WORD *)(v16 + 9) & 0xC0) != 0x40)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 40))(v16, a2);
  }
  return result;
}

void sub_1C62586CC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62586E0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  size_t v7;
  _QWORD *result;

  v4 = a1[2];
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, a2);
  sub_1C54C1634(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 10272;
  a2[1] += 2;
  v6 = (_BYTE *)a1[3];
  v5 = (_BYTE *)a1[4];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    sub_1C54C1634(a2, v5 - v6);
    memcpy((void *)(*a2 + a2[1]), v6, v7);
    a2[1] += v7;
  }
  result = sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 41;
  return result;
}

void sub_1C62587C4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62587D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;

  sub_1C54C1634(a2, 8);
  *(_QWORD *)(*a2 + a2[1]) = 0x7470656378656F6ELL;
  a2[1] += 8;
  ++*((_DWORD *)a2 + 8);
  sub_1C54C1634(a2, 1);
  v4 = *a2;
  v5 = a2[1];
  a2[1] = v5 + 1;
  *(_BYTE *)(v4 + v5) = 40;
  sub_1C6253C74(*(_QWORD *)(a1 + 16), a2, 19, 0);
  --*((_DWORD *)a2 + 8);
  result = sub_1C54C1634(a2, 1);
  v7 = *a2;
  v8 = a2[1];
  a2[1] = v8 + 1;
  *(_BYTE *)(v7 + v8) = 41;
  return result;
}

void sub_1C6258898()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62588AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;

  sub_1C54C1634(a2, 5);
  v4 = *a2 + a2[1];
  *(_BYTE *)(v4 + 4) = 119;
  *(_DWORD *)v4 = 1869768820;
  a2[1] += 5;
  ++*((_DWORD *)a2 + 8);
  sub_1C54C1634(a2, 1);
  v5 = *a2;
  v6 = a2[1];
  a2[1] = v6 + 1;
  *(_BYTE *)(v5 + v6) = 40;
  sub_1C54C1398((_QWORD *)(a1 + 16), a2);
  --*((_DWORD *)a2 + 8);
  result = sub_1C54C1634(a2, 1);
  v8 = *a2;
  v9 = a2[1];
  a2[1] = v9 + 1;
  *(_BYTE *)(v8 + v9) = 41;
  return result;
}

void sub_1C6258968()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C625897C()
{
  return 1;
}

uint64_t sub_1C6258984()
{
  return 1;
}

_QWORD *sub_1C625898C(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
  result = sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 32;
  return result;
}

_QWORD *sub_1C62589DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  ++*((_DWORD *)a2 + 8);
  sub_1C54C1634(a2, 1);
  v4 = *a2;
  v5 = a2[1];
  a2[1] = v5 + 1;
  *(_BYTE *)(v4 + v5) = 40;
  sub_1C54C1398((_QWORD *)(a1 + 24), a2);
  --*((_DWORD *)a2 + 8);
  sub_1C54C1634(a2, 1);
  v6 = *a2;
  v7 = a2[1];
  a2[1] = v7 + 1;
  *(_BYTE *)(v6 + v7) = 41;
  result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2);
  v9 = *(_DWORD *)(a1 + 40);
  if ((v9 & 1) != 0)
  {
    result = sub_1C54C1634(a2, 6);
    v13 = *a2 + a2[1];
    *(_WORD *)(v13 + 4) = 29811;
    *(_DWORD *)v13 = 1852793632;
    a2[1] += 6;
    v9 = *(_DWORD *)(a1 + 40);
  }
  if ((v9 & 2) != 0)
  {
    result = sub_1C54C1634(a2, 9);
    v14 = *a2 + a2[1];
    *(_QWORD *)v14 = *(_QWORD *)" volatile";
    *(_BYTE *)(v14 + 8) = 101;
    a2[1] += 9;
    v9 = *(_DWORD *)(a1 + 40);
  }
  if ((v9 & 4) != 0)
  {
    result = sub_1C54C1634(a2, 9);
    v10 = *a2 + a2[1];
    *(_QWORD *)v10 = *(_QWORD *)" restrict";
    *(_BYTE *)(v10 + 8) = 116;
    a2[1] += 9;
  }
  v11 = *(unsigned __int8 *)(a1 + 44);
  if (v11 == 2)
  {
    v12 = 3;
    result = sub_1C54C1634(a2, 3);
    v15 = *a2 + a2[1];
    *(_BYTE *)(v15 + 2) = 38;
    *(_WORD *)v15 = 9760;
  }
  else
  {
    if (v11 != 1)
      goto LABEL_12;
    v12 = 2;
    result = sub_1C54C1634(a2, 2);
    *(_WORD *)(*a2 + a2[1]) = 9760;
  }
  a2[1] += v12;
LABEL_12:
  if (*(_QWORD *)(a1 + 48))
  {
    sub_1C54C1634(a2, 1);
    v16 = *a2;
    v17 = a2[1];
    a2[1] = v17 + 1;
    *(_BYTE *)(v16 + v17) = 32;
    v18 = *(_QWORD *)(a1 + 48);
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 32))(v18, a2);
    if ((*(_WORD *)(v18 + 9) & 0xC0) != 0x40)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 40))(v18, a2);
  }
  return result;
}

void sub_1C6258C1C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6258C30(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  size_t v7;
  _QWORD *result;

  v4 = a1[2];
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, a2);
  sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 60;
  v6 = (_BYTE *)a1[3];
  v5 = (_BYTE *)a1[4];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    sub_1C54C1634(a2, v5 - v6);
    memcpy((void *)(*a2 + a2[1]), v6, v7);
    a2[1] += v7;
  }
  result = sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 62;
  return result;
}

void sub_1C6258D14()
{
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C6258D28(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  void *result;
  _BYTE *v6;
  _BYTE *v7;
  size_t v8;
  uint64_t v9;

  v4 = a1[2];
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, a2);
  result = sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 32;
  v7 = (_BYTE *)a1[3];
  v6 = (_BYTE *)a1[4];
  v8 = v6 - v7;
  if (v6 != v7)
  {
    sub_1C54C1634(a2, v6 - v7);
    result = memcpy((void *)(*a2 + a2[1]), v7, v8);
    a2[1] += v8;
  }
  v9 = a1[5];
  if (v9)
  {
    result = (void *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 32))(v9, a2);
    if ((*(_WORD *)(v9 + 9) & 0xC0) != 0x40)
      return (void *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 40))(v9, a2);
  }
  return result;
}

void sub_1C6258E34()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6258E48(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(unsigned __int8 *)(v1 + 9);
  if ((v2 & 0xC0) == 0x80)
    return (**(uint64_t (***)(uint64_t))v1)(v1);
  else
    return v2 < 0x40;
}

uint64_t sub_1C6258E74(uint64_t a1)
{
  _BYTE *v1;
  int v2;

  v1 = *(_BYTE **)(a1 + 16);
  v2 = v1[10] & 3;
  if (v2 == 2)
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 8))(v1);
  else
    return v2 == 0;
}

uint64_t sub_1C6258EA0(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = (*(unsigned __int16 *)(v1 + 9) >> 10) & 3;
  if (v2 == 2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  else
    return v2 == 0;
}

_QWORD *sub_1C6258ECC(uint64_t a1, _QWORD *a2)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
  return sub_1C6258F2C((_QWORD *)a1, a2);
}

uint64_t sub_1C6258F04(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
}

void sub_1C6258F18()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6258F2C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  v4 = *((_DWORD *)result + 3);
  if ((v4 & 1) != 0)
  {
    result = sub_1C54C1634(a2, 6);
    v6 = *a2 + a2[1];
    *(_WORD *)(v6 + 4) = 29811;
    *(_DWORD *)v6 = 1852793632;
    a2[1] += 6;
    v4 = *((_DWORD *)v3 + 3);
  }
  if ((v4 & 2) != 0)
  {
    result = sub_1C54C1634(a2, 9);
    v7 = *a2 + a2[1];
    *(_QWORD *)v7 = *(_QWORD *)" volatile";
    *(_BYTE *)(v7 + 8) = 101;
    a2[1] += 9;
    v4 = *((_DWORD *)v3 + 3);
  }
  if ((v4 & 4) != 0)
  {
    result = sub_1C54C1634(a2, 9);
    v5 = *a2 + a2[1];
    *(_QWORD *)v5 = *(_QWORD *)" restrict";
    *(_BYTE *)(v5 + 8) = 116;
    a2[1] += 9;
  }
  return result;
}

uint64_t sub_1C6259010(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  sub_1C54C1634(a2, 6);
  v4 = *a2 + a2[1];
  *(_WORD *)(v4 + 4) = 29793;
  *(_DWORD *)v4 = 1869366879;
  a2[1] += 6;
  v5 = *(_QWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, a2);
  if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 40))(v5, a2);
  return result;
}

void sub_1C62590AC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62590C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;

  if (!*(_BYTE *)(a1 + 24))
  {
    sub_1C54C1634(a2, 9);
    v4 = *a2 + a2[1];
    *(_QWORD *)v4 = *(_QWORD *)"unsigned ";
    *(_BYTE *)(v4 + 8) = 32;
    a2[1] += 9;
  }
  sub_1C54C1634(a2, 7);
  v5 = (_DWORD *)(*a2 + a2[1]);
  *(_DWORD *)((char *)v5 + 3) = 1953384820;
  *v5 = 1953055327;
  a2[1] += 7;
  ++*((_DWORD *)a2 + 8);
  sub_1C54C1634(a2, 1);
  v6 = *a2;
  v7 = a2[1];
  a2[1] = v7 + 1;
  *(_BYTE *)(v6 + v7) = 40;
  sub_1C6253C74(*(_QWORD *)(a1 + 16), a2, 19, 0);
  --*((_DWORD *)a2 + 8);
  result = sub_1C54C1634(a2, 1);
  v9 = *a2;
  v10 = a2[1];
  a2[1] = v10 + 1;
  *(_BYTE *)(v9 + v10) = 41;
  return result;
}

void sub_1C62591C8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62591DC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *result;

  sub_1C54C1634(a2, 13);
  qmemcpy((void *)(*a2 + a2[1]), "pixel vector[", 13);
  a2[1] += 13;
  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 32))(v4, a2);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, a2);
  result = sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 93;
  return result;
}

void sub_1C6259298()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C62592AC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, a2);
  sub_1C54C1634(a2, 8);
  *(_QWORD *)(*a2 + a2[1]) = 0x5B726F7463657620;
  a2[1] += 8;
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, a2);
    if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 40))(v5, a2);
  }
  result = sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 93;
  return result;
}

void sub_1C62593A4()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62593B8()
{
  return 1;
}

uint64_t sub_1C62593C0()
{
  return 1;
}

uint64_t sub_1C62593C8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_1C62593D8(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  if (!v4 || *(_BYTE *)(v4 + *a2 - 1) != 93)
  {
    sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = 32;
  }
  sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 91;
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v5 + 32))(*(_QWORD *)(a1 + 24), a2);
    if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 40))(v5, a2);
  }
  sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 93;
  return (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2);
}

void sub_1C62594DC()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62594F0(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(unsigned __int8 *)(v1 + 9);
  if ((v2 & 0xC0) == 0x80)
    return (**(uint64_t (***)(uint64_t))v1)(v1);
  else
    return v2 < 0x40;
}

_QWORD *sub_1C625951C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  char v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(unsigned __int16 *)(v4 + 9);
  v6 = (v5 >> 8) & 3;
  if (!v6)
    goto LABEL_8;
  if (v6 == 2)
  {
    if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 8))(v4, a2) & 1) != 0)
    {
LABEL_8:
      v8 = 40;
      goto LABEL_9;
    }
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(unsigned __int16 *)(v4 + 9);
  }
  v7 = (v5 >> 10) & 3;
  if (!v7 || v7 == 2 && ((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, a2) & 1) != 0)
    goto LABEL_8;
  v8 = 32;
LABEL_9:
  sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = v8;
  v9 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 32))(v9, a2);
  if ((*(_WORD *)(v9 + 9) & 0xC0) != 0x40)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 40))(v9, a2);
  result = sub_1C54C1634(a2, 3);
  v11 = *a2 + a2[1];
  *(_BYTE *)(v11 + 2) = 42;
  *(_WORD *)v11 = 14906;
  a2[1] += 3;
  return result;
}

uint64_t sub_1C6259648(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(unsigned __int16 *)(v4 + 9);
  v6 = (v5 >> 8) & 3;
  if (!v6)
    goto LABEL_8;
  if (v6 == 2)
  {
    if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 8))(v4, a2) & 1) != 0)
    {
LABEL_8:
      sub_1C54C1634(a2, 1);
      *(_BYTE *)(*a2 + a2[1]++) = 41;
      return (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    }
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(unsigned __int16 *)(v4 + 9);
  }
  v7 = (v5 >> 10) & 3;
  if (!v7 || v7 == 2 && (*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, a2))
    goto LABEL_8;
  return (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
}

void sub_1C62596FC()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6259710(_QWORD *a1, uint64_t *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = (_BYTE *)a1[2];
  v4 = (_BYTE *)a1[3];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    sub_1C54C1634(a2, v4 - v5);
    memcpy((void *)(*a2 + a2[1]), v5, v6);
    a2[1] += v6;
  }
  sub_1C54C1634(a2, 1);
  v7 = *a2;
  v8 = a2[1];
  a2[1] = v8 + 1;
  *(_BYTE *)(v7 + v8) = 32;
  v9 = a1[4];
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 32))(v9, a2);
  if ((*(_WORD *)(v9 + 9) & 0xC0) != 0x40)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 40))(v9, a2);
  return result;
}

void sub_1C62597DC()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62597F0(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(unsigned __int8 *)(v1 + 9);
  if ((v2 & 0xC0) == 0x80)
    return (**(uint64_t (***)(uint64_t))v1)(v1);
  else
    return v2 < 0x40;
}

_QWORD *sub_1C625981C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  _BYTE *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  _QWORD *result;
  char v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  size_t v17;

  v4 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v4 + 8) != 10
    || (v5 = *(_QWORD *)(v4 + 16), *(_BYTE *)(v5 + 8) != 7)
    || (v6 = *(const char **)(v5 + 16), *(_QWORD *)(v5 + 24) - (_QWORD)v6 != 11)
    || strncmp(v6, "objc_object", 0xBuLL))
  {
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 32))(v4, a2);
    v7 = *(_BYTE **)(a1 + 16);
    if ((v7[10] & 3) == 0
      || (v7[10] & 3) == 2 && (*(unsigned int (**)(_BYTE *, _QWORD *))(*(_QWORD *)v7 + 8))(v7, a2))
    {
      sub_1C54C1634(a2, 1);
      *(_BYTE *)(*a2 + a2[1]++) = 32;
    }
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(unsigned __int16 *)(v8 + 9);
    v10 = (v9 >> 8) & 3;
    if (v10)
    {
      if (v10 != 2)
      {
LABEL_13:
        v11 = (v9 >> 10) & 3;
        if (v11 && (v11 != 2 || !(*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 16))(v8, a2)))
          goto LABEL_17;
        goto LABEL_16;
      }
      if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 8))(v8, a2) & 1) == 0)
      {
        v8 = *(_QWORD *)(a1 + 16);
        v9 = *(unsigned __int16 *)(v8 + 9);
        goto LABEL_13;
      }
    }
LABEL_16:
    sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = 40;
LABEL_17:
    result = sub_1C54C1634(a2, 1);
    v13 = 42;
    goto LABEL_18;
  }
  sub_1C54C1634(a2, 3);
  v14 = *a2 + a2[1];
  *(_BYTE *)(v14 + 2) = 60;
  *(_WORD *)v14 = 25705;
  a2[1] += 3;
  v16 = *(_BYTE **)(v4 + 24);
  v15 = *(_BYTE **)(v4 + 32);
  v17 = v15 - v16;
  if (v15 != v16)
  {
    sub_1C54C1634(a2, v15 - v16);
    memcpy((void *)(*a2 + a2[1]), v16, v17);
    a2[1] += v17;
  }
  result = sub_1C54C1634(a2, 1);
  v13 = 62;
LABEL_18:
  *(_BYTE *)(*a2 + a2[1]++) = v13;
  return result;
}

uint64_t sub_1C6259A0C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  unsigned int v8;
  int v9;
  int v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v4 + 8) != 10
    || (v5 = *(_QWORD *)(v4 + 16), *(_BYTE *)(v5 + 8) != 7)
    || (v6 = *(const char **)(v5 + 16), *(_QWORD *)(v5 + 24) - (_QWORD)v6 != 11)
    || (result = strncmp(v6, "objc_object", 0xBuLL), (_DWORD)result))
  {
    v8 = *(unsigned __int16 *)(v4 + 9);
    v9 = (v8 >> 8) & 3;
    if (v9)
    {
      if (v9 != 2)
      {
LABEL_9:
        v10 = (v8 >> 10) & 3;
        if (v10 && (v10 != 2 || !(*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, a2)))
          return (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2);
        goto LABEL_12;
      }
      if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 8))(v4, a2) & 1) == 0)
      {
        v4 = *(_QWORD *)(a1 + 16);
        v8 = *(unsigned __int16 *)(v4 + 9);
        goto LABEL_9;
      }
    }
LABEL_12:
    sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = 41;
    return (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2);
  }
  return result;
}

void sub_1C6259B20()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6259B34(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(unsigned __int8 *)(v1 + 9);
  if ((v2 & 0xC0) == 0x80)
    return (**(uint64_t (***)(uint64_t))v1)(v1);
  else
    return v2 < 0x40;
}

uint64_t sub_1C6259B60(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  int v9;
  BOOL v10;
  size_t v11;
  const char *v12;

  if (!*(_BYTE *)(result + 28))
  {
    v3 = result;
    *(_BYTE *)(result + 28) = 1;
    result = sub_1C54C9194(result);
    if (!v4)
    {
LABEL_22:
      *(_BYTE *)(v3 + 28) = 0;
      return result;
    }
    v5 = result;
    v6 = v4;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 32))(v4, a2);
    if ((*(_BYTE *)(v6 + 10) & 3) == 0
      || (*(_BYTE *)(v6 + 10) & 3) == 2
      && (*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 8))(v6, a2))
    {
      sub_1C54C1634(a2, 1);
      *(_BYTE *)(*a2 + a2[1]++) = 32;
    }
    v7 = *(unsigned __int16 *)(v6 + 9);
    v8 = (v7 >> 8) & 3;
    if (!v8)
      goto LABEL_14;
    if (v8 == 2)
    {
      if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 8))(v6, a2) & 1) != 0)
        goto LABEL_14;
      v7 = *(unsigned __int16 *)(v6 + 9);
    }
    v9 = (v7 >> 10) & 3;
    if (v9 && (v9 != 2 || !(*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 16))(v6, a2)))
    {
LABEL_15:
      v10 = v5 == 0;
      if (v5)
        v11 = 2;
      else
        v11 = 1;
      if (v10)
        v12 = "&";
      else
        v12 = "&&";
      sub_1C54C1634(a2, v11);
      result = (uint64_t)memcpy((void *)(*a2 + a2[1]), v12, v11);
      a2[1] += v11;
      goto LABEL_22;
    }
LABEL_14:
    sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = 40;
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_1C6259CE0(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;

  if (!*(_BYTE *)(result + 28))
  {
    v3 = result;
    *(_BYTE *)(result + 28) = 1;
    result = sub_1C54C9194(result);
    if (!v4)
    {
LABEL_12:
      *(_BYTE *)(v3 + 28) = 0;
      return result;
    }
    v5 = v4;
    v6 = *(unsigned __int16 *)(v4 + 9);
    v7 = (v6 >> 8) & 3;
    if (v7)
    {
      if (v7 != 2)
      {
LABEL_7:
        v8 = (v6 >> 10) & 3;
        if (v8 && (v8 != 2 || !(*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 16))(v5, a2)))
          goto LABEL_11;
        goto LABEL_10;
      }
      if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 8))(v4, a2) & 1) == 0)
      {
        v6 = *(unsigned __int16 *)(v5 + 9);
        goto LABEL_7;
      }
    }
LABEL_10:
    sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = 41;
LABEL_11:
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 40))(v5, a2);
    goto LABEL_12;
  }
  return result;
}

void sub_1C6259DC4()
{
  JUMPOUT(0x1CAA32FC0);
}

char *sub_1C6259DD8(uint64_t a1, size_t size)
{
  void *v4;
  uint64_t v5;
  size_t v6;
  char *result;
  char *v8;
  uint64_t v9;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = 8 * size;
  if (*(_QWORD *)a1 != a1 + 24)
  {
    result = (char *)malloc_type_realloc(*(void **)a1, v6, 0x6004044C4A2DFuLL);
    v8 = result;
    *(_QWORD *)a1 = result;
    if (result)
      goto LABEL_3;
LABEL_8:
    std::terminate();
  }
  result = (char *)malloc_type_malloc(v6, 0x6004044C4A2DFuLL);
  if (!result)
    goto LABEL_8;
  v8 = result;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9 != *(_QWORD *)a1)
    result = (char *)memmove(result, *(const void **)a1, v9 - *(_QWORD *)a1);
  *(_QWORD *)a1 = v8;
LABEL_3:
  *(_QWORD *)(a1 + 8) = &v8[v5 - (_QWORD)v4];
  *(_QWORD *)(a1 + 16) = &v8[8 * size];
  return result;
}

void *sub_1C6259E90(uint64_t a1, _QWORD *a2)
{
  void *result;
  _BYTE *v5;
  _BYTE *v6;
  size_t v7;

  result = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
  v6 = *(_BYTE **)(a1 + 24);
  v5 = *(_BYTE **)(a1 + 32);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    sub_1C54C1634(a2, v5 - v6);
    result = memcpy((void *)(*a2 + a2[1]), v6, v7);
    a2[1] += v7;
  }
  return result;
}

void sub_1C6259F04()
{
  JUMPOUT(0x1CAA32FC0);
}

unint64_t llvm::ms_demangle::Demangler::demangleSpecialTableSymbolNode(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t *v6;
  unint64_t v7;
  const char *v8;
  char *v9;
  const char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v17;
  _BYTE *v18;

  v6 = (uint64_t *)(a1 + 16);
  v7 = sub_1C625A050((uint64_t *)(a1 + 16));
  v9 = "";
  if (a3 != 15)
  {
    v9 = "";
  }
  v11 = "";
  if (a3 == 1)
  {
    v11 = "";
  }
  if (a3 <= 14)
  {
    v8 = v10;
    v9 = v11;
  }
  *(_QWORD *)(v7 + 24) = v8;
  *(_QWORD *)(v7 + 32) = v9;
  v12 = llvm::ms_demangle::Demangler::demangleNameScopeChain(a1, a2, v7);
  v13 = sub_1C625A20C(v6);
  *(_QWORD *)(v13 + 16) = v12;
  v14 = (unsigned __int8 *)*a2;
  if (*a2 == a2[1] || (*a2 = (uint64_t)(v14 + 1), *v14 - 56 <= 0xFFFFFFFD))
  {
    v15 = 0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    v15 = v13;
    *(_BYTE *)(v13 + 32) = llvm::ms_demangle::Demangler::demangleQualifiers(a1, (char **)a2);
    v18 = (_BYTE *)*a2;
    v17 = a2[1];
    if (*a2 == v17 || *v18 != 64)
    {
      *(_QWORD *)(v15 + 24) = llvm::ms_demangle::Demangler::demangleFullyQualifiedTypeName(a1, (const char **)a2);
    }
    else
    {
      *a2 = (uint64_t)(v18 + 1);
      a2[1] = v17;
    }
  }
  return v15;
}

unint64_t sub_1C625A050(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = v3 + *(_QWORD *)*a1;
  result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v3 - v4 + result + 40;
  *(_QWORD *)(v2 + 8) = v6;
  if (v6 > *(_QWORD *)(v2 + 16))
  {
    v7 = operator new();
    result = operator new[]();
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 24) = *a1;
    *a1 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1C86520B0;
  }
  *(_DWORD *)(result + 8) = 5;
  *(_QWORD *)result = &unk_1E816C8C0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleNameScopeChain(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;

  v6 = (uint64_t *)(a1 + 16);
  v7 = sub_1C625C7B8((uint64_t *)(a1 + 16));
  *v7 = a3;
  v8 = 1;
  if ((sub_1C54C9388((uint64_t)a2, "@", (uint64_t)"") & 1) != 0)
  {
LABEL_6:
    v12 = sub_1C625C858(v6);
    *(_QWORD *)(v12 + 16) = sub_1C54CAD70(v6, v7, v8);
  }
  else
  {
    v9 = v7;
    while (1)
    {
      v10 = sub_1C625C7B8(v6);
      v10[1] = v9;
      if (*a2 == a2[1])
        break;
      v7 = v10;
      v11 = llvm::ms_demangle::Demangler::demangleNameScopePiece(a1, a2);
      if (*(_BYTE *)(a1 + 8))
        return 0;
      *v7 = v11;
      ++v8;
      v9 = v7;
      if (sub_1C54C9388((uint64_t)a2, "@", (uint64_t)""))
        goto LABEL_6;
    }
    v12 = 0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  return v12;
}

unint64_t sub_1C625A20C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = v3 + *(_QWORD *)*a1;
  result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v3 - v4 + result + 40;
  *(_QWORD *)(v2 + 8) = v6;
  if (v6 > *(_QWORD *)(v2 + 16))
  {
    v7 = operator new();
    result = operator new[]();
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 24) = *a1;
    *a1 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1C86520B0;
  }
  *(_DWORD *)(result + 8) = 28;
  *(_QWORD *)result = &unk_1E816CBB8;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  return result;
}

uint64_t llvm::ms_demangle::Demangler::demangleQualifiers(uint64_t a1, char **a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  if (*a2 != a2[1])
  {
    *a2 = v2 + 1;
    v3 = *v2 - 65;
    if (v3 < 0x14 && ((0xF000Fu >> v3) & 1) != 0)
      return word_1C865225A[v3];
  }
  v4 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  return v4;
}

uint64_t llvm::ms_demangle::Demangler::demangleFullyQualifiedTypeName(uint64_t a1, const char **a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = llvm::ms_demangle::Demangler::demangleUnqualifiedTypeName(a1, a2, 1);
  if (*(_BYTE *)(a1 + 8))
    return 0;
  result = llvm::ms_demangle::Demangler::demangleNameScopeChain(a1, a2, v4);
  if (*(_BYTE *)(a1 + 8))
    return 0;
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleLocalStaticGuard(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  int v11;
  char v12;
  char v14;

  v6 = (uint64_t *)(a1 + 16);
  v7 = sub_1C625A454((uint64_t *)(a1 + 16));
  *(_BYTE *)(v7 + 24) = a3;
  v8 = llvm::ms_demangle::Demangler::demangleNameScopeChain(a1, a2, v7);
  v9 = sub_1C625A514(v6);
  *(_QWORD *)(v9 + 16) = v8;
  if ((sub_1C54C9388((uint64_t)a2, "4IA", (uint64_t)"") & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    v14 = sub_1C54C9388((uint64_t)a2, "5", (uint64_t)"");
    v10 = 1;
    if ((v14 & 1) == 0)
    {
      v9 = 0;
      *(_BYTE *)(a1 + 8) = 1;
      return v9;
    }
  }
  *(_BYTE *)(v9 + 24) = v10;
  if (*a2 != a2[1])
  {
    v11 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a2);
    if (v12)
      *(_BYTE *)(a1 + 8) = 1;
    *(_DWORD *)(v7 + 28) = v11;
  }
  return v9;
}

unint64_t sub_1C625A454(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = v3 + *(_QWORD *)*a1;
  result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v3 - v4 + result + 32;
  *(_QWORD *)(v2 + 8) = v6;
  if (v6 > *(_QWORD *)(v2 + 16))
  {
    v7 = operator new();
    result = operator new[]();
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 24) = *a1;
    *a1 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1C86520C0;
  }
  *(_DWORD *)(result + 8) = 7;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &unk_1E816C938;
  *(_BYTE *)(result + 24) = 0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

unint64_t sub_1C625A514(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = v3 + *(_QWORD *)*a1;
  result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v3 - v4 + result + 32;
  *(_QWORD *)(v2 + 8) = v6;
  if (v6 > *(_QWORD *)(v2 + 16))
  {
    v7 = operator new();
    result = operator new[]();
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 24) = *a1;
    *a1 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1C86520C0;
  }
  *(_DWORD *)(result + 8) = 25;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &unk_1E816CBE0;
  *(_BYTE *)(result + 24) = 0;
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleUntypedVariable(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v10 = sub_1C625A050(a2);
  *(_QWORD *)(v10 + 24) = a4;
  *(_QWORD *)(v10 + 32) = a5;
  v11 = llvm::ms_demangle::Demangler::demangleNameScopeChain(a1, a3, v10);
  v12 = sub_1C625A664(a2);
  *(_QWORD *)(v12 + 16) = v11;
  if ((sub_1C54C9388((uint64_t)a3, "8", (uint64_t)"") & 1) == 0)
  {
    v12 = 0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  return v12;
}

unint64_t sub_1C625A664(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = v3 + *(_QWORD *)*a1;
  result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v3 - v4 + result + 40;
  *(_QWORD *)(v2 + 8) = v6;
  if (v6 > *(_QWORD *)(v2 + 16))
  {
    v7 = operator new();
    result = operator new[]();
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 24) = *a1;
    *a1 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1C86520B0;
  }
  *(_DWORD *)(result + 8) = 27;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &unk_1E816CC30;
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleRttiBaseClassDescriptorNode(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v6;
  int v7;
  char v8;
  uint64_t v9;
  char v10;
  int v11;
  int v12;
  char v13;
  int v14;
  char v15;
  unint64_t v16;
  int v18;
  uint64_t v19;
  _BYTE *v20;

  v6 = (_DWORD *)sub_1C625A844(a2);
  v7 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a3);
  if (v8)
    *(_BYTE *)(a1 + 8) = 1;
  v6[6] = v7;
  v9 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a3);
  if (v9 < 0)
    *(_BYTE *)(a1 + 8) = 1;
  v11 = -(int)v9;
  if (!v10)
    v11 = v9;
  v6[7] = v11;
  v12 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a3);
  if (v13)
    *(_BYTE *)(a1 + 8) = 1;
  v6[8] = v12;
  v14 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a3);
  if (v15)
  {
    v16 = 0;
    *(_BYTE *)(a1 + 8) = 1;
    v6[9] = v14;
  }
  else
  {
    v18 = *(unsigned __int8 *)(a1 + 8);
    v6[9] = v14;
    if (v18)
    {
      return 0;
    }
    else
    {
      v16 = sub_1C625A664(a2);
      *(_QWORD *)(v16 + 16) = llvm::ms_demangle::Demangler::demangleNameScopeChain(a1, a3, (uint64_t)v6);
      v20 = (_BYTE *)*a3;
      v19 = a3[1];
      if (*a3 != v19 && *v20 == 56)
      {
        *a3 = (uint64_t)(v20 + 1);
        a3[1] = v19;
      }
    }
  }
  return v16;
}

unint64_t sub_1C625A844(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = v3 + *(_QWORD *)*a1;
  result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v3 - v4 + result + 40;
  *(_QWORD *)(v2 + 8) = v6;
  if (v6 > *(_QWORD *)(v2 + 16))
  {
    v7 = operator new();
    result = operator new[]();
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 24) = *a1;
    *a1 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1C86520B0;
  }
  *(_DWORD *)(result + 8) = 24;
  *(_QWORD *)result = &unk_1E816CB68;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleInitFiniStub(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  char v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;

  v6 = (uint64_t *)(a1 + 16);
  v7 = sub_1C625AA50((uint64_t *)(a1 + 16));
  *(_BYTE *)(v7 + 40) = a3;
  v9 = (_BYTE *)*a2;
  v8 = a2[1];
  if (*a2 == v8 || *v9 != 63)
  {
    v10 = 0;
  }
  else
  {
    *a2 = (uint64_t)(v9 + 1);
    a2[1] = v8;
    v10 = 1;
  }
  v11 = llvm::ms_demangle::Demangler::demangleDeclarator(a1, a2);
  if (*(_BYTE *)(a1 + 8))
    return 0;
  v12 = v11;
  if (*(_DWORD *)(v11 + 8) == 27)
  {
    *(_QWORD *)(v7 + 24) = v11;
    v14 = (_BYTE *)*a2;
    v15 = (_BYTE *)a2[1];
    v16 = *a2 + 1;
    v17 = 1;
    while (v14 != v15 && *v14 == 64)
    {
      ++v14;
      *a2 = v16;
      a2[1] = (uint64_t)v15;
      v18 = v10 & v17;
      ++v16;
      v17 = 0;
      if ((v18 & 1) == 0)
      {
        v12 = llvm::ms_demangle::Demangler::demangleFunctionEncoding(a1, a2);
        if (!v12)
          return v12;
        goto LABEL_18;
      }
    }
    goto LABEL_16;
  }
  if (v10)
  {
LABEL_16:
    v12 = 0;
    *(_BYTE *)(a1 + 8) = 1;
    return v12;
  }
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v11 + 16);
LABEL_18:
  v19 = sub_1C625C858(v6);
  v20 = sub_1C625D9F0(v6);
  *(_QWORD *)(v19 + 16) = v20;
  *(_QWORD *)(v20 + 24) = 1;
  v21 = (_QWORD *)sub_1C54CB1D8(v6, 1uLL);
  *(_QWORD *)(*(_QWORD *)(v19 + 16) + 16) = v21;
  *v21 = v7;
  *(_QWORD *)(v12 + 16) = v19;
  return v12;
}

unint64_t sub_1C625AA50(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = v3 + *(_QWORD *)*a1;
  result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v3 - v4 + result + 48;
  *(_QWORD *)(v2 + 8) = v6;
  if (v6 > *(_QWORD *)(v2 + 16))
  {
    v7 = operator new();
    result = operator new[]();
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 24) = *a1;
    *a1 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1C86520D0;
  }
  *(_DWORD *)(result + 8) = 10;
  *(_QWORD *)result = &unk_1E816C898;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 40) = 0;
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleDeclarator(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v4 = llvm::ms_demangle::Demangler::demangleFullyQualifiedSymbolName(a1, a2);
  if (*(_BYTE *)(a1 + 8))
    return 0;
  v6 = v4;
  result = llvm::ms_demangle::Demangler::demangleEncodedSymbol(a1, (char **)a2, v4);
  if (*(_BYTE *)(a1 + 8))
    return 0;
  *(_QWORD *)(result + 16) = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 16) + 8 * *(_QWORD *)(*(_QWORD *)(v6 + 16) + 24) - 8);
  if (*(_DWORD *)(v7 + 8) == 9 && !*(_QWORD *)(v7 + 24))
  {
    result = 0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleFunctionEncoding(uint64_t a1, _QWORD *a2)
{
  int v4;
  unint64_t result;
  int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;
  __int128 v22;
  __int128 v23;

  v4 = sub_1C54C9388((uint64_t)a2, "$$J0", (uint64_t)"");
  if (*a2 == a2[1])
  {
    result = 0;
    *(_BYTE *)(a1 + 8) = 1;
    return result;
  }
  if (v4)
    v6 = 128;
  else
    v6 = 0;
  v7 = llvm::ms_demangle::Demangler::demangleFunctionClass(a1, a2) | v6;
  if (v7 >= 0x800)
  {
    v8 = sub_1C625C3E8((uint64_t *)(a1 + 16));
LABEL_14:
    v10 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a2);
    if (v10 < 0)
      *(_BYTE *)(a1 + 8) = 1;
    v12 = -(int)v10;
    if (!v11)
      v12 = v10;
    *(_DWORD *)(v8 + 60) = v12;
    goto LABEL_9;
  }
  if ((v7 & 0x200) != 0)
  {
    v8 = sub_1C625C3E8((uint64_t *)(a1 + 16));
    if ((v7 & 0x400) != 0)
    {
      v13 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a2);
      if (v13 < 0)
        *(_BYTE *)(a1 + 8) = 1;
      v15 = -(int)v13;
      if (!v14)
        v15 = v13;
      *(_DWORD *)(v8 + 64) = v15;
      v16 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a2);
      if (v16 < 0)
        *(_BYTE *)(a1 + 8) = 1;
      v18 = -(int)v16;
      if (!v17)
        v18 = v16;
      *(_DWORD *)(v8 + 68) = v18;
    }
    v19 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a2);
    if (v19 < 0)
      *(_BYTE *)(a1 + 8) = 1;
    v21 = -(int)v19;
    if (!v20)
      v21 = v19;
    *(_DWORD *)(v8 + 72) = v21;
    goto LABEL_14;
  }
  v8 = 0;
LABEL_9:
  if ((v7 & 0x100) != 0)
    v9 = sub_1C625D04C((uint64_t *)(a1 + 16));
  else
    v9 = llvm::ms_demangle::Demangler::demangleFunctionType(a1, (uint64_t)a2, (v7 & 0x18) == 0);
  if (*(_BYTE *)(a1 + 8))
    return 0;
  if (v8)
  {
    *(_DWORD *)(v8 + 8) = *(_DWORD *)(v9 + 8);
    *(_BYTE *)(v8 + 12) = *(_BYTE *)(v9 + 12);
    v22 = *(_OWORD *)(v9 + 16);
    v23 = *(_OWORD *)(v9 + 32);
    *(_OWORD *)(v8 + 41) = *(_OWORD *)(v9 + 41);
    *(_OWORD *)(v8 + 16) = v22;
    *(_OWORD *)(v8 + 32) = v23;
  }
  else
  {
    v8 = v9;
  }
  *(_WORD *)(v8 + 22) = v7;
  result = sub_1C625C278((uint64_t *)(a1 + 16));
  *(_QWORD *)(result + 24) = v8;
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleVcallThunkNode(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;

  v4 = (uint64_t *)(a1 + 16);
  v5 = sub_1C625C278((uint64_t *)(a1 + 16));
  v6 = sub_1C625C330(v4);
  v7 = sub_1C625C3E8(v4);
  *(_QWORD *)(v5 + 24) = v7;
  *(_WORD *)(v7 + 22) = 256;
  *(_QWORD *)(v5 + 16) = llvm::ms_demangle::Demangler::demangleNameScopeChain(a1, a2, v6);
  if (*(_BYTE *)(a1 + 8))
    return 0;
  v9 = sub_1C54C9388((uint64_t)a2, "$B", (uint64_t)"");
  *(_BYTE *)(a1 + 8) = v9 ^ 1;
  if (((v9 ^ 1) & 1) != 0)
    return 0;
  v10 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a2);
  v11 = v10;
  if (v12)
  {
    result = 0;
    *(_BYTE *)(a1 + 8) = 1;
    *(_QWORD *)(v6 + 24) = v11;
    return result;
  }
  v13 = *(unsigned __int8 *)(a1 + 8);
  *(_QWORD *)(v6 + 24) = v10;
  if (v13)
    return 0;
  v15 = (_BYTE *)*a2;
  v14 = a2[1];
  if (*a2 != v14 && *v15 == 65)
  {
    *a2 = (uint64_t)(v15 + 1);
    a2[1] = v14;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(*(_QWORD *)(v5 + 24) + 20) = llvm::ms_demangle::Demangler::demangleCallingConvention(a1, (char **)a2);
    if (*(_BYTE *)(a1 + 8))
      return 0;
    else
      return v5;
  }
  else
  {
    result = 0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  return result;
}

uint64_t llvm::ms_demangle::Demangler::demangleType(uint64_t a1, uint64_t a2, int a3)
{
  char v5;
  _BYTE *v6;
  char *v7;
  int v8;
  unint64_t v9;
  _BYTE *v10;
  int v11;
  _BYTE *v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  if (a3 == 2)
  {
    v16 = *(char **)a2;
    v15 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v15 || *v16 != 63)
      goto LABEL_3;
    *(_QWORD *)a2 = v16 + 1;
    *(_QWORD *)(a2 + 8) = v15;
  }
  else if (a3 != 1)
  {
LABEL_3:
    v5 = 0;
    goto LABEL_4;
  }
  v5 = llvm::ms_demangle::Demangler::demangleQualifiers(a1, (char **)a2);
LABEL_4:
  v7 = *(char **)a2;
  v6 = *(_BYTE **)(a2 + 8);
  if (*(_BYTE **)a2 == v6)
    goto LABEL_36;
  v8 = *v7;
  if ((v8 & 0xFFFFFFFC) == 0x54)
  {
    result = llvm::ms_demangle::Demangler::demangleClassType(a1, a2);
    goto LABEL_46;
  }
  v9 = v6 - v7;
  if ((unint64_t)(v6 - v7) >= 3 && !strncmp("$$Q", v7, 3uLL) || (v8 - 80) < 4 || v8 == 65)
  {
    *(_BYTE *)(a1 + 8) = 0;
    v10 = v7 + 1;
    if ((*v7 & 0xFC) != 0x50)
      goto LABEL_38;
    if (v10 == v6)
      goto LABEL_36;
    if (((char)*v10 & 0x80000000) == 0)
    {
      v11 = *v10;
      if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v10 + 60) & 0x400) != 0)
      {
        if (v11 != 54)
        {
          if (v11 == 56)
            goto LABEL_24;
          goto LABEL_36;
        }
LABEL_38:
        result = llvm::ms_demangle::Demangler::demanglePointerType(a1, (_QWORD *)a2);
        goto LABEL_46;
      }
      if (v11 == 69)
        v10 = v7 + 2;
    }
    if (v10 == v6)
      goto LABEL_36;
    v12 = v10 + 1;
    if (*v10 != 73)
      v12 = v10;
    if (v12 == v6)
      goto LABEL_36;
    if (*v12 == 70)
      ++v12;
    if (v12 == v6)
      goto LABEL_36;
    v13 = (char)*v12;
    if ((v13 - 65) >= 4)
    {
      if ((v13 - 81) < 4)
      {
LABEL_24:
        result = llvm::ms_demangle::Demangler::demangleMemberPointerType(a1, (const char **)a2);
        goto LABEL_46;
      }
LABEL_36:
      result = 0;
      *(_BYTE *)(a1 + 8) = 1;
      return result;
    }
    goto LABEL_38;
  }
  if (v8 == 89)
  {
    result = llvm::ms_demangle::Demangler::demangleArrayType(a1, (char **)a2);
    goto LABEL_46;
  }
  if (v9 >= 6)
  {
    if (!strncmp("$$A8@@", v7, 6uLL))
      goto LABEL_41;
    goto LABEL_40;
  }
  if (v9 >= 4)
  {
LABEL_40:
    if (strncmp("$$A6", v7, 4uLL))
      goto LABEL_49;
LABEL_41:
    if (sub_1C54C9388(a2, "$$A8@@", (uint64_t)""))
    {
      v17 = a1;
      v18 = a2;
      v19 = 1;
    }
    else
    {
      sub_1C54C9388(a2, "$$A6", (uint64_t)"");
      v17 = a1;
      v18 = a2;
      v19 = 0;
    }
    result = llvm::ms_demangle::Demangler::demangleFunctionType(v17, v18, v19);
    goto LABEL_46;
  }
LABEL_49:
  if (v8 == 63)
    result = llvm::ms_demangle::Demangler::demangleCustomType(a1, a2);
  else
    result = llvm::ms_demangle::Demangler::demanglePrimitiveType(a1, (uint64_t *)a2);
LABEL_46:
  if (result)
  {
    if (!*(_BYTE *)(a1 + 8))
      *(_BYTE *)(result + 12) |= v5;
  }
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleFunctionIdentifierCode(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  int v8;

  v4 = *a2;
  v3 = a2[1];
  if (v3 != *a2)
    ++v4;
  *a2 = v4;
  if (v4 == v3)
  {
    *(_BYTE *)(a1 + 8) = 1;
    return 0;
  }
  else
  {
    if (sub_1C54C9388((uint64_t)a2, "__", (uint64_t)""))
    {
      v6 = a1;
      v7 = a2;
      v8 = 2;
    }
    else if (sub_1C54C9388((uint64_t)a2, "_", (uint64_t)""))
    {
      v6 = a1;
      v7 = a2;
      v8 = 1;
    }
    else
    {
      v6 = a1;
      v7 = a2;
      v8 = 0;
    }
    return llvm::ms_demangle::Demangler::demangleFunctionIdentifierCode(v6, v7, v8);
  }
}

unint64_t sub_1C625B1D8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = v3 + *(_QWORD *)*a1;
  result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v3 - v4 + result + 40;
  *(_QWORD *)(v2 + 8) = v6;
  if (v6 > *(_QWORD *)(v2 + 16))
  {
    v7 = operator new();
    result = operator new[]();
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 24) = *a1;
    *a1 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1C86520B0;
  }
  *(_DWORD *)(result + 8) = 11;
  *(_QWORD *)result = &unk_1E816C988;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  return result;
}

unint64_t sub_1C625B294(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = v3 + *(_QWORD *)*a1;
  result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v3 - v4 + result + 32;
  *(_QWORD *)(v2 + 8) = v6;
  if (v6 > *(_QWORD *)(v2 + 16))
  {
    v7 = operator new();
    result = operator new[]();
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 24) = *a1;
    *a1 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1C86520C0;
  }
  *(_DWORD *)(result + 8) = 9;
  *(_QWORD *)result = &unk_1E816C960;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

unint64_t sub_1C625B34C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = v3 + *(_QWORD *)*a1;
  result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v3 - v4 + result + 40;
  *(_QWORD *)(v2 + 8) = v6;
  if (v6 > *(_QWORD *)(v2 + 16))
  {
    v7 = operator new();
    result = operator new[]();
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 24) = *a1;
    *a1 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1C86520B0;
  }
  *(_DWORD *)(result + 8) = 12;
  *(_QWORD *)result = &unk_1E816C910;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

unint64_t sub_1C625B408(uint64_t *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  unint64_t v8;
  uint64_t v9;
  char v10;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = v5 + *(_QWORD *)*a1;
  result = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v5 - v6 + result + 32;
  *(_QWORD *)(v4 + 8) = v8;
  if (v8 > *(_QWORD *)(v4 + 16))
  {
    v9 = operator new();
    result = operator new[]();
    *(_QWORD *)v9 = result;
    *(_QWORD *)(v9 + 24) = *a1;
    *a1 = v9;
    *(_OWORD *)(v9 + 8) = xmmword_1C86520C0;
  }
  v10 = *a2;
  *(_DWORD *)(result + 8) = 8;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &unk_1E816C8E8;
  *(_BYTE *)(result + 24) = v10;
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleVariableEncoding(uint64_t a1, char **a2, char a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  char v11;

  v6 = sub_1C625A664((uint64_t *)(a1 + 16));
  v7 = llvm::ms_demangle::Demangler::demangleType(a1, (uint64_t)a2, 0);
  *(_QWORD *)(v6 + 32) = v7;
  *(_BYTE *)(v6 + 24) = a3;
  if (*(_BYTE *)(a1 + 8))
    return 0;
  v9 = v7;
  if (*(_DWORD *)(v7 + 8) == 14)
  {
    v10 = *(_BYTE *)(v7 + 12);
    *(_BYTE *)(v7 + 12) = llvm::ms_demangle::Demangler::demanglePointerExtQualifiers(v7, (uint64_t)a2) | v10;
    v11 = llvm::ms_demangle::Demangler::demangleQualifiers(a1, a2);
    if (*(_QWORD *)(v9 + 24))
      llvm::ms_demangle::Demangler::demangleFullyQualifiedTypeName(a1, (const char **)a2);
    *(_BYTE *)(*(_QWORD *)(v9 + 32) + 12) |= v11;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(v6 + 32) + 12) = llvm::ms_demangle::Demangler::demangleQualifiers(a1, a2);
  }
  return v6;
}

unint64_t llvm::ms_demangle::Demangler::demangleFullyQualifiedSymbolName(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = llvm::ms_demangle::Demangler::demangleUnqualifiedSymbolName(a1, a2, 2u);
  if (*(_BYTE *)(a1 + 8))
    return 0;
  v6 = v4;
  result = llvm::ms_demangle::Demangler::demangleNameScopeChain(a1, a2, v4);
  if (*(_BYTE *)(a1 + 8))
    return 0;
  if (*(_DWORD *)(v6 + 8) == 11)
  {
    v7 = *(_QWORD *)(result + 16);
    v8 = *(_QWORD *)(v7 + 24);
    if (v8 > 1)
    {
      *(_QWORD *)(v6 + 24) = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * v8 - 16);
    }
    else
    {
      result = 0;
      *(_BYTE *)(a1 + 8) = 1;
    }
  }
  return result;
}

unint64_t sub_1C625B64C(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  unint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = v5 + *(_QWORD *)*a1;
  result = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v5 - v6 + result + 24;
  *(_QWORD *)(v4 + 8) = v8;
  if (v8 > *(_QWORD *)(v4 + 16))
  {
    v9 = operator new();
    result = operator new[]();
    *(_QWORD *)v9 = result;
    *(_QWORD *)(v9 + 24) = *a1;
    *a1 = v9;
    *(_OWORD *)(v9 + 8) = xmmword_1C86520F0;
  }
  *(_DWORD *)(result + 8) = *a2;
  *(_QWORD *)result = &unk_1E816CB90;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleTypeinfoName(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t *v10;

  v5 = (_BYTE *)*a2;
  v4 = a2[1];
  if (*a2 != v4 && *v5 == 46)
  {
    *a2 = v5 + 1;
    a2[1] = v4;
  }
  v6 = llvm::ms_demangle::Demangler::demangleType(a1, (uint64_t)a2, 2);
  if (!*(_BYTE *)(a1 + 8) && *a2 == a2[1])
  {
    v9 = v6;
    v10 = (uint64_t *)(a1 + 16);
    v7 = sub_1C625A664(v10);
    *(_QWORD *)(v7 + 32) = v9;
  }
  else
  {
    v7 = 0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  return v7;
}

uint64_t llvm::ms_demangle::Demangler::parse(uint64_t a1, uint64_t *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t result;

  v4 = (_BYTE *)*a2;
  v5 = (_BYTE *)a2[1];
  if ((_BYTE *)*a2 != v5 && *v4 == 46)
    return llvm::ms_demangle::Demangler::demangleTypeinfoName(a1, a2);
  if ((unint64_t)(v5 - v4) >= 3 && !strncmp("??@", (const char *)*a2, 3uLL))
    return llvm::ms_demangle::Demangler::demangleMD5Name(a1, a2);
  if (v4 == v5 || *v4 != 63)
  {
    result = 0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    *a2 = (uint64_t)(v4 + 1);
    a2[1] = (uint64_t)v5;
    result = llvm::ms_demangle::Demangler::demangleSpecialIntrinsic(a1, a2);
    if (!result)
      return llvm::ms_demangle::Demangler::demangleDeclarator(a1, a2);
  }
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleClassType(uint64_t a1, uint64_t a2)
{
  const char *v4;
  _BYTE *v5;
  int v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t *v10;
  int v11;
  int v12;

  v4 = *(const char **)a2;
  v5 = (_BYTE *)(*(_QWORD *)a2 + 1);
  *(_QWORD *)a2 = v5;
  v6 = *v4;
  if (v6 != 87)
  {
    switch(v6)
    {
      case 'V':
        v10 = (uint64_t *)(a1 + 16);
        v12 = 0;
LABEL_13:
        v8 = sub_1C625D490(v10, &v12);
LABEL_14:
        *(_QWORD *)(v8 + 16) = llvm::ms_demangle::Demangler::demangleFullyQualifiedTypeName(a1, (const char **)a2);
        return v8;
      case 'U':
        v10 = (uint64_t *)(a1 + 16);
        v11 = 1;
        break;
      case 'T':
        v10 = (uint64_t *)(a1 + 16);
        v11 = 2;
        break;
      default:
        v8 = 0;
        goto LABEL_14;
    }
LABEL_12:
    v12 = v11;
    goto LABEL_13;
  }
  v7 = *(_BYTE **)(a2 + 8);
  if (v5 != v7 && *v5 == 52)
  {
    *(_QWORD *)a2 = v4 + 2;
    *(_QWORD *)(a2 + 8) = v7;
    v10 = (uint64_t *)(a1 + 16);
    v11 = 3;
    goto LABEL_12;
  }
  v8 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  return v8;
}

uint64_t llvm::ms_demangle::Demangler::demanglePointerExtQualifiers(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t result;
  int v5;
  int v6;

  v3 = *(_BYTE **)a2;
  v2 = *(_BYTE **)(a2 + 8);
  if (*(_BYTE **)a2 == v2)
    return 0;
  if (*v3 == 69)
  {
    *(_QWORD *)a2 = ++v3;
    *(_QWORD *)(a2 + 8) = v2;
    result = 64;
  }
  else
  {
    result = 0;
  }
  if (v3 != v2)
  {
    v5 = *v3;
    if (v5 == 73)
    {
      *(_QWORD *)a2 = ++v3;
      *(_QWORD *)(a2 + 8) = v2;
    }
    if (v3 == v2 || *v3 != 70)
    {
      if (v5 == 73)
        return result | 0x20;
      else
        return result;
    }
    else
    {
      *(_QWORD *)a2 = v3 + 1;
      *(_QWORD *)(a2 + 8) = v2;
      v6 = result | 0x20;
      if (v5 != 73)
        v6 = result;
      return v6 | 0x10u;
    }
  }
  return result;
}

void llvm::ms_demangle::Demangler::memorizeIdentifier(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  size_t v6;
  void *v7;
  void *v8;
  __int128 v9;
  uint64_t v10;
  int v11;

  v10 = -1;
  v11 = 1;
  v4 = malloc_type_malloc(0x400uLL, 0x1E4FE0F9uLL);
  if (!v4)
    std::terminate();
  v8 = v4;
  v9 = xmmword_1C86520E0;
  (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)a2 + 16))(a2, &v8, 0);
  v5 = v8;
  v6 = v9;
  v7 = (void *)sub_1C54C92EC((uint64_t **)(a1 + 16), v9);
  memcpy(v7, v5, v6);
  llvm::ms_demangle::Demangler::memorizeString(a1, (char *)v7, (uint64_t)v7 + v6);
  free(v8);
}

uint64_t llvm::ms_demangle::Demangler::demangleTemplateInstantiationName(uint64_t a1, uint64_t *a2, char a3)
{
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  sub_1C54C9388((uint64_t)a2, "?$", (uint64_t)"");
  v6 = (_OWORD *)(a1 + 24);
  v21 = *(_OWORD *)(a1 + 56);
  v22 = *(_OWORD *)(a1 + 72);
  v23 = *(_OWORD *)(a1 + 88);
  v19 = *(_OWORD *)(a1 + 24);
  v20 = *(_OWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = (_OWORD *)(a1 + 112);
  v16 = *(_OWORD *)(a1 + 144);
  v17 = *(_OWORD *)(a1 + 160);
  v18 = *(_OWORD *)(a1 + 176);
  v14 = *(_OWORD *)(a1 + 112);
  v15 = *(_OWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  v10 = llvm::ms_demangle::Demangler::demangleUnqualifiedSymbolName(a1, a2, 2u);
  if (*(_BYTE *)(a1 + 8))
  {
    v11 = 0;
    *(_OWORD *)(a1 + 56) = v21;
    *(_OWORD *)(a1 + 72) = v22;
    *(_OWORD *)(a1 + 88) = v23;
    *v6 = v19;
    *(_OWORD *)(a1 + 40) = v20;
    *(_QWORD *)(a1 + 104) = v7;
    *(_OWORD *)(a1 + 144) = v16;
    *(_OWORD *)(a1 + 160) = v17;
    *(_OWORD *)(a1 + 176) = v18;
    *v8 = v14;
    *(_OWORD *)(a1 + 128) = v15;
    *(_QWORD *)(a1 + 192) = v9;
  }
  else
  {
    v11 = v10;
    *(_QWORD *)(v10 + 16) = llvm::ms_demangle::Demangler::demangleTemplateParameterList(a1, (uint64_t)a2);
    v13 = *(unsigned __int8 *)(a1 + 8);
    *(_OWORD *)(a1 + 72) = v22;
    *(_OWORD *)(a1 + 88) = v23;
    *v6 = v19;
    *(_OWORD *)(a1 + 40) = v20;
    *(_OWORD *)(a1 + 56) = v21;
    *(_QWORD *)(a1 + 104) = v7;
    *(_OWORD *)(a1 + 160) = v17;
    *(_OWORD *)(a1 + 176) = v18;
    *v8 = v14;
    *(_OWORD *)(a1 + 128) = v15;
    *(_OWORD *)(a1 + 144) = v16;
    *(_QWORD *)(a1 + 192) = v9;
    if (v13)
    {
      return 0;
    }
    else if ((a3 & 1) != 0)
    {
      if ((*(_DWORD *)(v11 + 8) | 2) == 0xB)
      {
        v11 = 0;
        *(_BYTE *)(a1 + 8) = 1;
      }
      else
      {
        llvm::ms_demangle::Demangler::memorizeIdentifier(a1, v11);
      }
    }
  }
  return v11;
}

unint64_t llvm::ms_demangle::Demangler::demangleTemplateParameterList(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *v5;
  unint64_t **v6;
  uint64_t v7;
  const char *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *__s2;
  char *__s2a;
  char *__s2c;
  char *__s2b;
  unint64_t *v54;
  uint64_t v55;
  char v56;
  _QWORD *v57;

  v4 = 0;
  v57 = 0;
  v5 = (uint64_t *)(a1 + 16);
  v6 = &v57;
  while (1)
  {
    v8 = *(const char **)a2;
    v7 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 != v7 && *v8 == 64)
      break;
    if ((sub_1C54C9388(a2, "$S", (uint64_t)"") & 1) == 0
      && (sub_1C54C9388(a2, "$$V", (uint64_t)"") & 1) == 0
      && (sub_1C54C9388(a2, "$$$V", (uint64_t)"") & 1) == 0
      && (sub_1C54C9388(a2, "$$Z", (uint64_t)"") & 1) == 0)
    {
      v9 = sub_1C625C7B8(v5);
      *v6 = v9;
      v10 = v9;
      if (!sub_1C54C9388(a2, "$$Y", (uint64_t)""))
      {
        if (sub_1C54C9388(a2, "$$B", (uint64_t)""))
          goto LABEL_15;
        if (sub_1C54C9388(a2, "$$C", (uint64_t)""))
        {
          v13 = a1;
          v14 = a2;
          v15 = 1;
        }
        else
        {
          v54 = v10;
          v16 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
          if (v16 >= 2)
          {
            __s2 = *(char **)a2;
            if (!strncmp("$1", *(const char **)a2, 2uLL)
              || !strncmp("$H", __s2, 2uLL)
              || !strncmp("$I", __s2, 2uLL)
              || !strncmp("$J", __s2, 2uLL))
            {
              v18 = sub_1C625D7B0(v5);
              *v54 = v18;
              *(_BYTE *)(v18 + 60) = 1;
              v19 = *(char **)(a2 + 8);
              if (v19 == *(char **)a2)
                v20 = *(char **)a2;
              else
                v20 = (char *)(*(_QWORD *)a2 + 1);
              *(_QWORD *)a2 = v20 + 1;
              v21 = *v20;
              __s2a = (char *)v18;
              if (v20 + 1 != v19 && v20[1] == 63)
              {
                v49 = llvm::ms_demangle::Demangler::parse(a1, a2);
                if (*(_BYTE *)(a1 + 8) || (v48 = *(_QWORD *)(v49 + 16)) == 0)
                {
                  *(_BYTE *)(a1 + 8) = 1;
                  return 0;
                }
                llvm::ms_demangle::Demangler::memorizeIdentifier(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 16) + 16)+ 8 * *(_QWORD *)(*(_QWORD *)(v48 + 16) + 24)- 8));
                v18 = (unint64_t)__s2a;
              }
              else
              {
                v49 = 0;
              }
              if (v21 > 72)
              {
                v22 = v21 == 73;
                v10 = v54;
                if (!v22)
                {
                  v23 = llvm::ms_demangle::Demangler::demangleNumber(a1, a2);
                  if (v23 < 0)
                    *(_BYTE *)(a1 + 8) = 1;
                  if (v24)
                    v25 = -v23;
                  else
                    v25 = v23;
                  v26 = *((int *)__s2a + 6);
                  *((_DWORD *)__s2a + 6) = v26 + 1;
                  *(_QWORD *)&__s2a[8 * v26 + 32] = v25;
                }
                v27 = llvm::ms_demangle::Demangler::demangleNumber(a1, a2);
                if (v27 < 0)
                  *(_BYTE *)(a1 + 8) = 1;
                if (v28)
                  v29 = -v27;
                else
                  v29 = v27;
                v30 = *((int *)__s2a + 6);
                *((_DWORD *)__s2a + 6) = v30 + 1;
                *(_QWORD *)&__s2a[8 * v30 + 32] = v29;
LABEL_49:
                v31 = llvm::ms_demangle::Demangler::demangleNumber(a1, a2);
                if (v31 < 0)
                  *(_BYTE *)(a1 + 8) = 1;
                if (v32)
                  v33 = -v31;
                else
                  v33 = v31;
                v18 = (unint64_t)__s2a;
                v34 = *((int *)__s2a + 6);
                *((_DWORD *)__s2a + 6) = v34 + 1;
                *(_QWORD *)&__s2a[8 * v34 + 32] = v33;
              }
              else
              {
                v22 = v21 == 49;
                v10 = v54;
                if (!v22)
                  goto LABEL_49;
              }
              *(_DWORD *)(v18 + 56) = 1;
              *(_QWORD *)(v18 + 16) = v49;
              goto LABEL_11;
            }
            if (v16 >= 3 && !strncmp("$E?", __s2, 3uLL))
            {
              sub_1C54C9388(a2, "$E", (uint64_t)"");
              __s2c = (char *)sub_1C625D7B0(v5);
              v10 = v54;
              *v54 = (unint64_t)__s2c;
              *((_QWORD *)__s2c + 2) = llvm::ms_demangle::Demangler::parse(a1, a2);
              *((_DWORD *)__s2c + 14) = 2;
              goto LABEL_11;
            }
            if (!strncmp("$F", __s2, 2uLL) || !strncmp("$G", __s2, 2uLL))
            {
              __s2b = (char *)sub_1C625D7B0(v5);
              *v54 = (unint64_t)__s2b;
              if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
                v35 = *(const char **)a2;
              else
                v35 = (const char *)(*(_QWORD *)a2 + 1);
              *(_QWORD *)a2 = v35 + 1;
              if (*v35 == 71)
              {
                v36 = llvm::ms_demangle::Demangler::demangleNumber(a1, a2);
                if (v36 < 0)
                  *(_BYTE *)(a1 + 8) = 1;
                if (v37)
                  v38 = -v36;
                else
                  v38 = v36;
                v39 = *((int *)__s2b + 6);
                *((_DWORD *)__s2b + 6) = v39 + 1;
                *(_QWORD *)&__s2b[8 * v39 + 32] = v38;
              }
              v40 = llvm::ms_demangle::Demangler::demangleNumber(a1, a2);
              if (v40 < 0)
                *(_BYTE *)(a1 + 8) = 1;
              if (v41)
                v42 = -v40;
              else
                v42 = v40;
              v43 = *((int *)__s2b + 6);
              *((_DWORD *)__s2b + 6) = v43 + 1;
              *(_QWORD *)&__s2b[8 * v43 + 32] = v42;
              v44 = llvm::ms_demangle::Demangler::demangleNumber(a1, a2);
              if (v44 < 0)
                *(_BYTE *)(a1 + 8) = 1;
              if (v45)
                v46 = -v44;
              else
                v46 = v44;
              v47 = *((int *)__s2b + 6);
              *((_DWORD *)__s2b + 6) = v47 + 1;
              *(_QWORD *)&__s2b[8 * v47 + 32] = v46;
              __s2b[60] = 1;
              v10 = v54;
              goto LABEL_11;
            }
          }
          v10 = v54;
          if (sub_1C54C9388(a2, "$0", (uint64_t)""))
          {
            v55 = llvm::ms_demangle::Demangler::demangleNumber(a1, a2);
            v56 = v17;
            v11 = sub_1C625D6DC(v5, &v55, &v56);
            goto LABEL_10;
          }
LABEL_15:
          v13 = a1;
          v14 = a2;
          v15 = 0;
        }
        v11 = llvm::ms_demangle::Demangler::demangleType(v13, v14, v15);
        goto LABEL_10;
      }
      v11 = llvm::ms_demangle::Demangler::demangleFullyQualifiedTypeName(a1, (const char **)a2);
LABEL_10:
      *v10 = v11;
LABEL_11:
      ++v4;
      v6 = (unint64_t **)(v10 + 1);
      if (*(_BYTE *)(a1 + 8))
        return 0;
    }
  }
  *(_QWORD *)a2 = v8 + 1;
  *(_QWORD *)(a2 + 8) = v7;
  return sub_1C54CAD70(v5, v57, v4);
}

uint64_t llvm::ms_demangle::Demangler::demangleWcharLiteral(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  int v6;
  int v7;

  v4 = llvm::ms_demangle::Demangler::demangleCharLiteral(a1, (unsigned __int8 **)a2);
  if (!*(_BYTE *)(a1 + 8) && *(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    v6 = v4;
    v7 = llvm::ms_demangle::Demangler::demangleCharLiteral(a1, (unsigned __int8 **)a2);
    if (!*(_BYTE *)(a1 + 8))
      return v7 | (v6 << 8);
  }
  result = 0;
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

unint64_t sub_1C625C278(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = v3 + *(_QWORD *)*a1;
  result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v3 - v4 + result + 32;
  *(_QWORD *)(v2 + 8) = v6;
  if (v6 > *(_QWORD *)(v2 + 16))
  {
    v7 = operator new();
    result = operator new[]();
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 24) = *a1;
    *a1 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1C86520C0;
  }
  *(_DWORD *)(result + 8) = 26;
  *(_QWORD *)result = &unk_1E816CC58;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

unint64_t sub_1C625C330(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = v3 + *(_QWORD *)*a1;
  result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v3 - v4 + result + 32;
  *(_QWORD *)(v2 + 8) = v6;
  if (v6 > *(_QWORD *)(v2 + 16))
  {
    v7 = operator new();
    result = operator new[]();
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 24) = *a1;
    *a1 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1C86520C0;
  }
  *(_DWORD *)(result + 8) = 6;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = &unk_1E816C870;
  return result;
}

unint64_t sub_1C625C3E8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = v3 + *(_QWORD *)*a1;
  result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v3 - v4 + result + 80;
  *(_QWORD *)(v2 + 8) = v6;
  if (v6 > *(_QWORD *)(v2 + 16))
  {
    v7 = operator new();
    result = operator new[]();
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 24) = *a1;
    *a1 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1C8652100;
  }
  *(_DWORD *)(result + 8) = 13;
  *(_BYTE *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 0;
  *(_WORD *)(result + 22) = 8;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_BYTE *)(result + 56) = 0;
  *(_QWORD *)result = &unk_1E816C9B0;
  *(_QWORD *)(result + 68) = 0;
  *(_QWORD *)(result + 60) = 0;
  return result;
}

uint64_t llvm::ms_demangle::Demangler::demangleCallingConvention(uint64_t a1, char **a2)
{
  char *v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a2;
  if (*a2 == a2[1])
  {
    result = 0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    *a2 = v2 + 1;
    v3 = *v2 - 65;
    if (v3 > 0x16)
      return 0;
    else
      return byte_1C8652282[v3];
  }
  return result;
}

unint64_t sub_1C625C51C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = v3 + *(_QWORD *)*a1;
  result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v3 - v4 + result + 48;
  *(_QWORD *)(v2 + 8) = v6;
  if (v6 > *(_QWORD *)(v2 + 16))
  {
    v7 = operator new();
    result = operator new[]();
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 24) = *a1;
    *a1 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1C86520D0;
  }
  *(_DWORD *)(result + 8) = 22;
  *(_QWORD *)result = &unk_1E816CC08;
  *(_DWORD *)(result + 44) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 40) = 0;
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleLocallyScopedNamePiece(uint64_t a1, _QWORD *a2)
{
  uint64_t **v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  void *v19;
  size_t v20;
  char *v21;
  void *v22;
  __int128 v23;
  uint64_t v24;
  int v25;

  v4 = (uint64_t **)(a1 + 16);
  v5 = sub_1C625A050((uint64_t *)(a1 + 16));
  v7 = (_BYTE *)*a2;
  v6 = a2[1];
  if (*a2 != v6 && *v7 == 63)
  {
    *a2 = v7 + 1;
    a2[1] = v6;
  }
  v8 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a2);
  v10 = (_BYTE *)*a2;
  v9 = a2[1];
  if (*a2 != v9 && *v10 == 63)
  {
    *a2 = v10 + 1;
    a2[1] = v9;
  }
  v11 = llvm::ms_demangle::Demangler::parse(a1, (int)a2);
  if (*(_BYTE *)(a1 + 8))
    return 0;
  v13 = v11;
  v24 = -1;
  v25 = 1;
  v14 = malloc_type_malloc(0x400uLL, 0x1E4FE0F9uLL);
  if (!v14)
    std::terminate();
  v22 = v14;
  v23 = xmmword_1C86520E0;
  sub_1C54C1634(&v22, 1);
  v15 = v23;
  *(_QWORD *)&v23 = v23 + 1;
  *((_BYTE *)v22 + v15) = 96;
  (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v13 + 16))(v13, &v22, 0);
  sub_1C54C1634(&v22, 1);
  v16 = v23;
  *(_QWORD *)&v23 = v23 + 1;
  *((_BYTE *)v22 + v16) = 39;
  sub_1C54C1634(&v22, 3);
  v17 = (char *)v22 + v23;
  v17[2] = 96;
  *(_WORD *)v17 = 14906;
  *(_QWORD *)&v23 = v23 + 3;
  v18 = sub_1C6255C10(&v22, v8, 0);
  sub_1C54C1634(v18, 1);
  *(_BYTE *)(*v18 + v18[1]++) = 39;
  v19 = v22;
  v20 = v23;
  v21 = (char *)sub_1C54C92EC(v4, v23);
  memcpy(v21, v19, v20);
  *(_QWORD *)(v5 + 24) = v21;
  *(_QWORD *)(v5 + 32) = &v21[v20];
  free(v22);
  return v5;
}

_QWORD *sub_1C625C7B8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = v3 + *(_QWORD *)*a1;
  result = (_QWORD *)((v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  v6 = (unint64_t)result + v3 - v4 + 16;
  *(_QWORD *)(v2 + 8) = v6;
  if (v6 > *(_QWORD *)(v2 + 16))
  {
    v7 = operator new();
    result = (_QWORD *)operator new[]();
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 24) = *a1;
    *a1 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1C8652110;
  }
  *result = 0;
  result[1] = 0;
  return result;
}

unint64_t sub_1C625C858(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = v3 + *(_QWORD *)*a1;
  result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v3 - v4 + result + 24;
  *(_QWORD *)(v2 + 8) = v6;
  if (v6 > *(_QWORD *)(v2 + 16))
  {
    v7 = operator new();
    result = operator new[]();
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 24) = *a1;
    *a1 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1C86520F0;
  }
  *(_DWORD *)(result + 8) = 20;
  *(_QWORD *)result = &unk_1E816CAF0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t llvm::ms_demangle::Demangler::demangleFunctionClass(uint64_t a1, _QWORD *a2)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t result;
  _BYTE *v6;
  int v7;
  int v8;

  v3 = (_BYTE *)*a2;
  v4 = (_BYTE *)(*a2 + 1);
  *a2 = v4;
  result = 384;
  switch(*v3)
  {
    case '$':
      v6 = (_BYTE *)a2[1];
      if (v4 == v6)
        goto LABEL_35;
      if (*v4 == 82)
      {
        v4 = v3 + 2;
        *a2 = v3 + 2;
        a2[1] = v6;
        v7 = 1536;
      }
      else
      {
        v7 = 512;
      }
      if (v4 == v6)
        goto LABEL_35;
      *a2 = v4 + 1;
      switch(*v4)
      {
        case '0':
          v8 = 36;
          break;
        case '1':
          v8 = 100;
          break;
        case '2':
          v8 = 34;
          break;
        case '3':
          v8 = 98;
          break;
        case '4':
          v8 = 33;
          break;
        case '5':
          v8 = 97;
          break;
        default:
          goto LABEL_35;
      }
      result = v7 | v8;
      break;
    case '9':
      return result;
    case 'A':
      result = 4;
      break;
    case 'B':
      result = 68;
      break;
    case 'C':
      result = 20;
      break;
    case 'D':
      result = 84;
      break;
    case 'E':
      result = 36;
      break;
    case 'F':
      result = 100;
      break;
    case 'G':
      result = 2052;
      break;
    case 'H':
      result = 2116;
      break;
    case 'I':
      result = 2;
      break;
    case 'J':
      result = 66;
      break;
    case 'K':
      result = 18;
      break;
    case 'L':
      result = 82;
      break;
    case 'M':
      result = 34;
      break;
    case 'N':
      result = 98;
      break;
    case 'O':
      result = 2082;
      break;
    case 'P':
      result = 2146;
      break;
    case 'Q':
      result = 1;
      break;
    case 'R':
      result = 65;
      break;
    case 'S':
      result = 17;
      break;
    case 'T':
      result = 81;
      break;
    case 'U':
      result = 33;
      break;
    case 'V':
      result = 97;
      break;
    case 'W':
      result = 2081;
      break;
    case 'X':
      result = 2145;
      break;
    case 'Y':
      result = 8;
      break;
    case 'Z':
      result = 72;
      break;
    default:
LABEL_35:
      result = 1;
      *(_BYTE *)(a1 + 8) = 1;
      break;
  }
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleMemberPointerType(uint64_t a1, const char **a2)
{
  unint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;

  v4 = sub_1C625D560((uint64_t *)(a1 + 16));
  v5 = sub_1C54CAF54(a2);
  *(_BYTE *)(v4 + 12) = v5;
  *(_DWORD *)(v4 + 16) = HIDWORD(v5);
  *(_BYTE *)(v4 + 12) |= llvm::ms_demangle::Demangler::demanglePointerExtQualifiers(v5, (uint64_t)a2);
  if (sub_1C54C9388((uint64_t)a2, "8", (uint64_t)""))
  {
    *(_QWORD *)(v4 + 24) = llvm::ms_demangle::Demangler::demangleFullyQualifiedTypeName(a1, a2);
    *(_QWORD *)(v4 + 32) = llvm::ms_demangle::Demangler::demangleFunctionType(a1, (uint64_t)a2, 1);
  }
  else
  {
    v7 = llvm::ms_demangle::Demangler::demangleQualifiers(a1, (char **)a2);
    *(_QWORD *)(v4 + 24) = llvm::ms_demangle::Demangler::demangleFullyQualifiedTypeName(a1, a2);
    v8 = llvm::ms_demangle::Demangler::demangleType(a1, (int)a2);
    *(_QWORD *)(v4 + 32) = v8;
    if (v8)
      *(_BYTE *)(v8 + 12) = v7;
  }
  return v4;
}

unint64_t llvm::ms_demangle::Demangler::demanglePointerType(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = sub_1C625D560((uint64_t *)(a1 + 16));
  v5 = sub_1C54CAF54(a2);
  *(_BYTE *)(v4 + 12) = v5;
  *(_DWORD *)(v4 + 16) = HIDWORD(v5);
  v6 = sub_1C54C9388((uint64_t)a2, "6", (uint64_t)"");
  if ((_DWORD)v6)
  {
    v7 = llvm::ms_demangle::Demangler::demangleFunctionType(a1, (uint64_t)a2, 0);
  }
  else
  {
    *(_BYTE *)(v4 + 12) |= llvm::ms_demangle::Demangler::demanglePointerExtQualifiers(v6, (uint64_t)a2);
    v7 = llvm::ms_demangle::Demangler::demangleType(a1, (int)a2);
  }
  *(_QWORD *)(v4 + 32) = v7;
  return v4;
}

unint64_t llvm::ms_demangle::Demangler::demangleArrayType(uint64_t a1, char **a2)
{
  uint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  char v12;
  unsigned __int16 v13;
  unint64_t *v14;
  uint64_t v15;
  char v16;

  ++*a2;
  v4 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a2);
  if (!v5)
  {
    v6 = v4;
    if (v4)
    {
      v7 = sub_1C625D620((uint64_t *)(a1 + 16));
      v9 = sub_1C625C7B8((uint64_t *)(a1 + 16));
      v10 = 0;
      v11 = v9;
      while (1)
      {
        v15 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a2);
        v16 = v12;
        if (*(_BYTE *)(a1 + 8) | v12)
          break;
        *v11 = sub_1C625D6DC((uint64_t *)(a1 + 16), &v15, &v16);
        if (++v10 < v6)
        {
          v14 = sub_1C625C7B8((uint64_t *)(a1 + 16));
          v11[1] = (unint64_t)v14;
          v11 = v14;
        }
        if (v6 == v10)
        {
          *(_QWORD *)(v7 + 16) = sub_1C54CAD70((uint64_t *)(a1 + 16), v9, v6);
          if (!sub_1C54C9388((uint64_t)a2, "$$C", (uint64_t)"")
            || (v13 = llvm::ms_demangle::Demangler::demangleQualifiers(a1, a2), *(_BYTE *)(v7 + 12) = v13, v13 < 0x100u))
          {
            *(_QWORD *)(v7 + 24) = llvm::ms_demangle::Demangler::demangleType(a1, (int)a2);
            return v7;
          }
          break;
        }
      }
    }
  }
  v7 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  return v7;
}

unint64_t llvm::ms_demangle::Demangler::demangleCustomType(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  const char *v6;
  unint64_t result;

  ++*(_QWORD *)a2;
  v4 = sub_1C625D308((uint64_t *)(a1 + 16));
  *(_QWORD *)(v4 + 16) = llvm::ms_demangle::Demangler::demangleUnqualifiedTypeName(a1, (const char **)a2, 1);
  v6 = *(const char **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 == v5 || *v6 != 64)
  {
    result = 0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    *(_QWORD *)a2 = v6 + 1;
    *(_QWORD *)(a2 + 8) = v5;
    if (*(_BYTE *)(a1 + 8))
      return 0;
    else
      return v4;
  }
  return result;
}

uint64_t llvm::ms_demangle::Demangler::demanglePrimitiveType(uint64_t a1, uint64_t *a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  int v8;
  int v9;

  if (sub_1C54C9388((uint64_t)a2, "$$T", (uint64_t)""))
  {
    v7 = (uint64_t *)(a1 + 16);
    v8 = 20;
LABEL_8:
    v9 = v8;
    return sub_1C625D3C4(v7, &v9);
  }
  else
  {
    v4 = (_BYTE *)*a2;
    v5 = *a2 + 1;
    *a2 = v5;
    switch(*v4)
    {
      case 'C':
        v7 = (uint64_t *)(a1 + 16);
        v8 = 3;
        goto LABEL_8;
      case 'D':
        v7 = (uint64_t *)(a1 + 16);
        v8 = 2;
        goto LABEL_8;
      case 'E':
        v7 = (uint64_t *)(a1 + 16);
        v8 = 4;
        goto LABEL_8;
      case 'F':
        v7 = (uint64_t *)(a1 + 16);
        v8 = 8;
        goto LABEL_8;
      case 'G':
        v7 = (uint64_t *)(a1 + 16);
        v8 = 9;
        goto LABEL_8;
      case 'H':
        v7 = (uint64_t *)(a1 + 16);
        v8 = 10;
        goto LABEL_8;
      case 'I':
        v7 = (uint64_t *)(a1 + 16);
        v8 = 11;
        goto LABEL_8;
      case 'J':
        v7 = (uint64_t *)(a1 + 16);
        v8 = 12;
        goto LABEL_8;
      case 'K':
        v7 = (uint64_t *)(a1 + 16);
        v8 = 13;
        goto LABEL_8;
      case 'M':
        v7 = (uint64_t *)(a1 + 16);
        v8 = 17;
        goto LABEL_8;
      case 'N':
        v7 = (uint64_t *)(a1 + 16);
        v8 = 18;
        goto LABEL_8;
      case 'O':
        v7 = (uint64_t *)(a1 + 16);
        v8 = 19;
        goto LABEL_8;
      case 'X':
        v7 = (uint64_t *)(a1 + 16);
        v9 = 0;
        return sub_1C625D3C4(v7, &v9);
      case '_':
        if (v5 != a2[1])
        {
          *a2 = (uint64_t)(v4 + 2);
          switch(v4[1])
          {
            case 'J':
              v7 = (uint64_t *)(a1 + 16);
              v8 = 14;
              goto LABEL_8;
            case 'K':
              v7 = (uint64_t *)(a1 + 16);
              v8 = 15;
              goto LABEL_8;
            case 'N':
              v7 = (uint64_t *)(a1 + 16);
              v8 = 1;
              goto LABEL_8;
            case 'Q':
              v7 = (uint64_t *)(a1 + 16);
              v8 = 5;
              goto LABEL_8;
            case 'S':
              v7 = (uint64_t *)(a1 + 16);
              v8 = 6;
              goto LABEL_8;
            case 'U':
              v7 = (uint64_t *)(a1 + 16);
              v8 = 7;
              goto LABEL_8;
            case 'W':
              v7 = (uint64_t *)(a1 + 16);
              v8 = 16;
              goto LABEL_8;
            default:
              goto LABEL_5;
          }
        }
        break;
      default:
        break;
    }
LABEL_5:
    result = 0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  return result;
}

uint64_t llvm::ms_demangle::Demangler::demangleThrowSpecification(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  _BYTE *v6;

  result = sub_1C54C9388((uint64_t)a2, "_E", (uint64_t)"");
  if ((result & 1) == 0)
  {
    v6 = (_BYTE *)*a2;
    v5 = a2[1];
    if (*a2 == v5 || *v6 != 90)
    {
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      *a2 = v6 + 1;
      a2[1] = v5;
    }
  }
  return result;
}

unint64_t sub_1C625D04C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = v3 + *(_QWORD *)*a1;
  result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v3 - v4 + result + 64;
  *(_QWORD *)(v2 + 8) = v6;
  if (v6 > *(_QWORD *)(v2 + 16))
  {
    v7 = operator new();
    result = operator new[]();
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 24) = *a1;
    *a1 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1C8652120;
  }
  *(_DWORD *)(result + 8) = 3;
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)result = &unk_1E816C838;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 0;
  *(_WORD *)(result + 22) = 8;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_BYTE *)(result + 56) = 0;
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleFunctionParameterList(uint64_t a1, unsigned __int8 **a2, _BYTE *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t result;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  unint64_t v18;
  int v19;
  _QWORD *v20;

  v7 = *a2;
  v6 = a2[1];
  if (*a2 != v6 && *v7 == 88)
  {
    result = 0;
    goto LABEL_4;
  }
  v20 = sub_1C625C7B8((uint64_t *)(a1 + 16));
  if (*(_BYTE *)(a1 + 8))
    return 0;
  v9 = 0;
  v10 = a1 + 24;
  v11 = &v20;
  while (1)
  {
    v13 = *a2;
    v12 = a2[1];
    if (*a2 == v12)
    {
      ++v9;
LABEL_18:
      *v11 = sub_1C625C7B8((uint64_t *)(a1 + 16));
      result = llvm::ms_demangle::Demangler::demangleType(a1, (int)a2);
      if (!result)
        return result;
      v17 = *(unsigned __int8 *)(a1 + 8);
      if (*(_BYTE *)(a1 + 8))
        return 0;
      *(_QWORD *)*v11 = result;
      v18 = *(_QWORD *)(a1 + 104);
      if (v18 <= 9 && &(*a2)[v12 - &a2[1][(_QWORD)v13]] >= (unsigned __int8 *)2)
      {
        v17 = 0;
        *(_QWORD *)(a1 + 104) = v18 + 1;
        *(_QWORD *)(v10 + 8 * v18) = result;
      }
      goto LABEL_16;
    }
    v14 = *v13;
    if ((_DWORD)v14 == 64 || (_DWORD)v14 == 90)
      break;
    ++v9;
    if ((v14 & 0x80) != 0 || (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v14 + 60) & 0x400) == 0)
      goto LABEL_18;
    v15 = v14 - 48;
    if ((unint64_t)(v14 - 48) >= *(_QWORD *)(a1 + 104))
    {
      result = 0;
      *(_BYTE *)(a1 + 8) = 1;
      return result;
    }
    *a2 = v13 + 1;
    a2[1] = v12;
    v16 = sub_1C625C7B8((uint64_t *)(a1 + 16));
    *v11 = v16;
    *v16 = *(_QWORD *)(v10 + 8 * v15);
    v17 = *(unsigned __int8 *)(a1 + 8);
LABEL_16:
    v11 = (_QWORD *)(*v11 + 8);
    if (v17)
      return 0;
  }
  result = sub_1C54CAD70((uint64_t *)(a1 + 16), v20, v9);
  v7 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
    goto LABEL_30;
  v19 = *v7;
  if (v19 == 90)
  {
    *a2 = v7 + 1;
    a2[1] = v6;
    goto LABEL_30;
  }
  if (v19 != 64)
  {
LABEL_30:
    *a3 = 1;
    return result;
  }
LABEL_4:
  *a2 = v7 + 1;
  a2[1] = v6;
  return result;
}

unint64_t sub_1C625D308(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = v3 + *(_QWORD *)*a1;
  result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v3 - v4 + result + 24;
  *(_QWORD *)(v2 + 8) = v6;
  if (v6 > *(_QWORD *)(v2 + 16))
  {
    v7 = operator new();
    result = operator new[]();
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 24) = *a1;
    *a1 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1C86520F0;
  }
  *(_DWORD *)(result + 8) = 17;
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)result = &unk_1E816CA90;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

unint64_t sub_1C625D3C4(uint64_t *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  unint64_t v8;
  uint64_t v9;
  int v10;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = v5 + *(_QWORD *)*a1;
  result = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v5 - v6 + result + 24;
  *(_QWORD *)(v4 + 8) = v8;
  if (v8 > *(_QWORD *)(v4 + 16))
  {
    v9 = operator new();
    result = operator new[]();
    *(_QWORD *)v9 = result;
    *(_QWORD *)(v9 + 24) = *a1;
    *a1 = v9;
    *(_OWORD *)(v9 + 8) = xmmword_1C86520F0;
  }
  v10 = *a2;
  *(_DWORD *)(result + 8) = 2;
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)result = &unk_1E816C800;
  *(_DWORD *)(result + 16) = v10;
  return result;
}

unint64_t sub_1C625D490(uint64_t *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  unint64_t v8;
  uint64_t v9;
  int v10;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = v5 + *(_QWORD *)*a1;
  result = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v5 - v6 + result + 32;
  *(_QWORD *)(v4 + 8) = v8;
  if (v8 > *(_QWORD *)(v4 + 16))
  {
    v9 = operator new();
    result = operator new[]();
    *(_QWORD *)v9 = result;
    *(_QWORD *)(v9 + 24) = *a1;
    *a1 = v9;
    *(_OWORD *)(v9 + 8) = xmmword_1C86520C0;
  }
  v10 = *a2;
  *(_DWORD *)(result + 8) = 15;
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)result = &unk_1E816CA20;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = v10;
  return result;
}

unint64_t sub_1C625D560(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = v3 + *(_QWORD *)*a1;
  result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v3 - v4 + result + 40;
  *(_QWORD *)(v2 + 8) = v6;
  if (v6 > *(_QWORD *)(v2 + 16))
  {
    v7 = operator new();
    result = operator new[]();
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 24) = *a1;
    *a1 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1C86520B0;
  }
  *(_DWORD *)(result + 8) = 14;
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)result = &unk_1E816C9E8;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

unint64_t sub_1C625D620(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = v3 + *(_QWORD *)*a1;
  result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v3 - v4 + result + 32;
  *(_QWORD *)(v2 + 8) = v6;
  if (v6 > *(_QWORD *)(v2 + 16))
  {
    v7 = operator new();
    result = operator new[]();
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 24) = *a1;
    *a1 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1C86520C0;
  }
  *(_DWORD *)(result + 8) = 16;
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)result = &unk_1E816CA58;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

unint64_t sub_1C625D6DC(uint64_t *a1, uint64_t *a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = v7 + *(_QWORD *)*a1;
  result = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v7 - v8 + result + 32;
  *(_QWORD *)(v6 + 8) = v10;
  if (v10 > *(_QWORD *)(v6 + 16))
  {
    v11 = operator new();
    result = operator new[]();
    *(_QWORD *)v11 = result;
    *(_QWORD *)(v11 + 24) = *a1;
    *a1 = v11;
    *(_OWORD *)(v11 + 8) = xmmword_1C86520C0;
  }
  v12 = *a2;
  v13 = *a3;
  *(_DWORD *)(result + 8) = 23;
  *(_QWORD *)result = &unk_1E816CB40;
  *(_QWORD *)(result + 16) = v12;
  *(_BYTE *)(result + 24) = v13;
  return result;
}

unint64_t sub_1C625D7B0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = v3 + *(_QWORD *)*a1;
  result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v3 - v4 + result + 64;
  *(_QWORD *)(v2 + 8) = v6;
  if (v6 > *(_QWORD *)(v2 + 16))
  {
    v7 = operator new();
    result = operator new[]();
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 24) = *a1;
    *a1 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1C8652120;
  }
  *(_DWORD *)(result + 8) = 21;
  *(_QWORD *)result = &unk_1E816CB18;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 56) = 0;
  *(_BYTE *)(result + 60) = 0;
  return result;
}

uint64_t llvm::ms_demangle::Demangler::dumpBackReferences(llvm::ms_demangle::Demangler *this)
{
  void *v2;
  unint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  int v10;

  printf("%d function parameter backreferences\n", *((_QWORD *)this + 13));
  v9 = -1;
  v10 = 1;
  v2 = malloc_type_malloc(0x400uLL, 0x1E4FE0F9uLL);
  if (!v2)
    std::terminate();
  v7 = v2;
  v8 = xmmword_1C86520E0;
  if (*((_QWORD *)this + 13))
  {
    v3 = 0;
    do
    {
      *(_QWORD *)&v8 = 0;
      (*(void (**)(_QWORD, void **, _QWORD))(**((_QWORD **)this + v3 + 3) + 16))(*((_QWORD *)this + v3 + 3), &v7, 0);
      printf("  [%d] - %.*s\n", v3++, (int)v8, (const char *)v7);
    }
    while (v3 < *((_QWORD *)this + 13));
    v2 = v7;
  }
  free(v2);
  if (*((_QWORD *)this + 13))
    putchar(10);
  result = printf("%d name backreferences\n", *((_QWORD *)this + 24));
  if (*((_QWORD *)this + 24))
  {
    v5 = 0;
    do
    {
      result = printf("  [%d] - %.*s\n", v5, *(_DWORD *)(*((_QWORD *)this + v5 + 14) + 32) - *(_DWORD *)(*((_QWORD *)this + v5 + 14) + 24), *(const char **)(*((_QWORD *)this + v5 + 14) + 24));
      ++v5;
      v6 = *((_QWORD *)this + 24);
    }
    while (v5 < v6);
    if (v6)
      return putchar(10);
  }
  return result;
}

_QWORD *sub_1C625D9C0(_QWORD *a1)
{
  *a1 = &off_1E816C7C8;
  sub_1C625DAE8(a1 + 2);
  return a1;
}

unint64_t sub_1C625D9F0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = v3 + *(_QWORD *)*a1;
  result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v3 - v4 + result + 32;
  *(_QWORD *)(v2 + 8) = v6;
  if (v6 > *(_QWORD *)(v2 + 16))
  {
    v7 = operator new();
    result = operator new[]();
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 24) = *a1;
    *a1 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1C86520C0;
  }
  *(_DWORD *)(result + 8) = 19;
  *(_QWORD *)result = &unk_1E816CAC8;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

void sub_1C625DAA8(_QWORD *a1)
{
  *a1 = &off_1E816C7C8;
  sub_1C625DAE8(a1 + 2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C625DAE8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)*a1;
  if (v2)
  {
    do
    {
      if (*v2)
      {
        MEMORY[0x1CAA32F9C](*v2, 0x1000C8077774924);
        v2 = (_QWORD *)*a1;
      }
      v3 = (_QWORD *)v2[3];
      MEMORY[0x1CAA32FC0]();
      *a1 = v3;
      v2 = v3;
    }
    while (v3);
  }
  return a1;
}

uint64_t *llvm::ms_demangle::PrimitiveTypeNode::outputPre(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;

  switch(*(_DWORD *)(a1 + 16))
  {
    case 0:
      v4 = 4;
      sub_1C54C1634(a2, 4);
      v5 = *a2;
      v6 = a2 + 1;
      v7 = a2[1];
      v8 = 1684631414;
      goto LABEL_16;
    case 1:
      v4 = 4;
      sub_1C54C1634(a2, 4);
      v5 = *a2;
      v6 = a2 + 1;
      v7 = a2[1];
      v8 = 1819242338;
      goto LABEL_16;
    case 2:
      v4 = 4;
      sub_1C54C1634(a2, 4);
      v5 = *a2;
      v6 = a2 + 1;
      v7 = a2[1];
      v8 = 1918986339;
      goto LABEL_16;
    case 3:
      v4 = 11;
      sub_1C54C1634(a2, 11);
      v6 = a2 + 1;
      v9 = *a2 + a2[1];
      *(_QWORD *)v9 = *(_QWORD *)"signed char";
      v10 = 1918986339;
      goto LABEL_28;
    case 4:
      v4 = 13;
      sub_1C54C1634(a2, 13);
      v6 = a2 + 1;
      v11 = (_QWORD *)(*a2 + a2[1]);
      v12 = "unsigned char";
      goto LABEL_18;
    case 5:
      v4 = 7;
      sub_1C54C1634(a2, 7);
      v6 = a2 + 1;
      v13 = *a2 + a2[1];
      *(_DWORD *)(v13 + 3) = 1952397426;
      v14 = 1918986339;
      goto LABEL_24;
    case 6:
      v4 = 8;
      sub_1C54C1634(a2, 8);
      v15 = *a2;
      v6 = a2 + 1;
      v16 = a2[1];
      v17 = 0x363172616863;
      goto LABEL_10;
    case 7:
      v4 = 8;
      sub_1C54C1634(a2, 8);
      v15 = *a2;
      v6 = a2 + 1;
      v16 = a2[1];
      v17 = 0x323372616863;
LABEL_10:
      *(_QWORD *)(v15 + v16) = v17 & 0xFFFFFFFFFFFFLL | 0x745F000000000000;
      goto LABEL_25;
    case 8:
      v4 = 5;
      sub_1C54C1634(a2, 5);
      v6 = a2 + 1;
      v13 = *a2 + a2[1];
      *(_BYTE *)(v13 + 4) = 116;
      v14 = 1919903859;
      goto LABEL_24;
    case 9:
      v4 = 14;
      sub_1C54C1634(a2, 14);
      v6 = a2 + 1;
      v18 = (_QWORD *)(*a2 + a2[1]);
      v19 = "unsigned short";
      goto LABEL_30;
    case 0xA:
      v4 = 3;
      sub_1C54C1634(a2, 3);
      v6 = a2 + 1;
      v20 = *a2 + a2[1];
      *(_BYTE *)(v20 + 2) = 116;
      *(_WORD *)v20 = 28265;
      goto LABEL_25;
    case 0xB:
      v4 = 12;
      sub_1C54C1634(a2, 12);
      v6 = a2 + 1;
      v21 = *a2 + a2[1];
      *(_QWORD *)v21 = *(_QWORD *)"unsigned int";
      *(_DWORD *)(v21 + 8) = 1953392928;
      goto LABEL_25;
    case 0xC:
      v4 = 4;
      sub_1C54C1634(a2, 4);
      v5 = *a2;
      v6 = a2 + 1;
      v7 = a2[1];
      v8 = 1735290732;
LABEL_16:
      *(_DWORD *)(v5 + v7) = v8;
      goto LABEL_25;
    case 0xD:
      v4 = 13;
      sub_1C54C1634(a2, 13);
      v6 = a2 + 1;
      v11 = (_QWORD *)(*a2 + a2[1]);
      v12 = "unsigned long";
LABEL_18:
      *v11 = *(_QWORD *)v12;
      *(_QWORD *)((char *)v11 + 5) = *(_QWORD *)(v12 + 5);
      goto LABEL_25;
    case 0xE:
      v4 = 7;
      sub_1C54C1634(a2, 7);
      v6 = a2 + 1;
      v13 = *a2 + a2[1];
      *(_DWORD *)(v13 + 3) = 875983982;
      v14 = 1852399455;
      goto LABEL_24;
    case 0xF:
      v4 = 16;
      sub_1C54C1634(a2, 16);
      v6 = a2 + 1;
      *(_OWORD *)(*a2 + a2[1]) = *(_OWORD *)"unint64_t";
      goto LABEL_25;
    case 0x10:
      v4 = 7;
      sub_1C54C1634(a2, 7);
      v6 = a2 + 1;
      v13 = *a2 + a2[1];
      *(_DWORD *)(v13 + 3) = 1952412257;
      v14 = 1634231159;
      goto LABEL_24;
    case 0x11:
      v4 = 5;
      sub_1C54C1634(a2, 5);
      v6 = a2 + 1;
      v13 = *a2 + a2[1];
      *(_BYTE *)(v13 + 4) = 116;
      v14 = 1634692198;
      goto LABEL_24;
    case 0x12:
      v4 = 6;
      sub_1C54C1634(a2, 6);
      v6 = a2 + 1;
      v13 = *a2 + a2[1];
      *(_WORD *)(v13 + 4) = 25964;
      v14 = 1651863396;
LABEL_24:
      *(_DWORD *)v13 = v14;
      goto LABEL_25;
    case 0x13:
      v4 = 11;
      sub_1C54C1634(a2, 11);
      v6 = a2 + 1;
      v9 = *a2 + a2[1];
      *(_QWORD *)v9 = *(_QWORD *)"long double";
      v10 = 1701601909;
LABEL_28:
      *(_DWORD *)(v9 + 7) = v10;
      goto LABEL_25;
    case 0x14:
      v4 = 14;
      sub_1C54C1634(a2, 14);
      v6 = a2 + 1;
      v18 = (_QWORD *)(*a2 + a2[1]);
      v19 = "std::nullptr_t";
LABEL_30:
      *v18 = *(_QWORD *)v19;
      *(_QWORD *)((char *)v18 + 6) = *(_QWORD *)(v19 + 6);
LABEL_25:
      *v6 += v4;
      break;
    default:
      return sub_1C54CB358(a2, *(unsigned __int8 *)(a1 + 12), 1, 0);
  }
  return sub_1C54CB358(a2, *(unsigned __int8 *)(a1 + 12), 1, 0);
}

uint64_t llvm::ms_demangle::NodeArrayNode::output(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return llvm::ms_demangle::NodeArrayNode::output(a1, a2, a3, ", ", "");
}

uint64_t llvm::ms_demangle::NodeArrayNode::output(uint64_t result, _QWORD *a2, uint64_t a3, _BYTE *a4, _BYTE *a5)
{
  unint64_t v5;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(result + 24);
  if (v5)
  {
    v10 = result;
    result = **(_QWORD **)(result + 16);
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)result + 16))(result, a2, a3);
      v5 = *(_QWORD *)(v10 + 24);
    }
    if (v5 >= 2)
    {
      v11 = 1;
      do
      {
        if (a5 != a4)
        {
          sub_1C54C1634(a2, a5 - a4);
          memcpy((void *)(*a2 + a2[1]), a4, a5 - a4);
          a2[1] += a5 - a4;
        }
        v12 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * v11);
        result = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v12 + 16))(v12, a2, a3);
        ++v11;
      }
      while (v11 < *(_QWORD *)(v10 + 24));
    }
  }
  return result;
}

_QWORD *llvm::ms_demangle::EncodedStringLiteralNode::output(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  _BYTE *v9;
  _BYTE *v10;
  size_t v11;
  _QWORD *result;
  uint64_t v13;

  switch(*(_DWORD *)(a1 + 44))
  {
    case 0:
      v4 = 1;
      sub_1C54C1634(a2, 1);
      v5 = a2 + 1;
      *(_BYTE *)(*a2 + a2[1]) = 34;
      goto LABEL_7;
    case 1:
      v4 = 2;
      sub_1C54C1634(a2, 2);
      v6 = *a2;
      v5 = a2 + 1;
      v7 = a2[1];
      v8 = 8821;
      goto LABEL_6;
    case 2:
      v4 = 2;
      sub_1C54C1634(a2, 2);
      v6 = *a2;
      v5 = a2 + 1;
      v7 = a2[1];
      v8 = 8789;
      goto LABEL_6;
    case 3:
      v4 = 2;
      sub_1C54C1634(a2, 2);
      v6 = *a2;
      v5 = a2 + 1;
      v7 = a2[1];
      v8 = 8780;
LABEL_6:
      *(_WORD *)(v6 + v7) = v8;
LABEL_7:
      *v5 += v4;
      break;
    default:
      break;
  }
  v10 = *(_BYTE **)(a1 + 24);
  v9 = *(_BYTE **)(a1 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    sub_1C54C1634(a2, v9 - v10);
    memcpy((void *)(*a2 + a2[1]), v10, v11);
    a2[1] += v11;
  }
  result = sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 34;
  if (*(_BYTE *)(a1 + 40))
  {
    result = sub_1C54C1634(a2, 3);
    v13 = *a2 + a2[1];
    *(_BYTE *)(v13 + 2) = 46;
    *(_WORD *)v13 = 11822;
    a2[1] += 3;
  }
  return result;
}

_QWORD *llvm::ms_demangle::IntegerLiteralNode::output(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 24))
  {
    sub_1C54C1634(a2, 1);
    v4 = *a2;
    v5 = a2[1];
    a2[1] = v5 + 1;
    *(_BYTE *)(v4 + v5) = 45;
  }
  return sub_1C6255C10(a2, *(_QWORD *)(a1 + 16), 0);
}

_QWORD *llvm::ms_demangle::TemplateParameterReferenceNode::output(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char v6;
  _QWORD *result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if (*(int *)(a1 + 24) > 0)
  {
    v6 = 123;
LABEL_3:
    sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = v6;
    goto LABEL_4;
  }
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    v6 = 38;
    goto LABEL_3;
  }
LABEL_4:
  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*result + 16))(result, a2, a3);
    if (*(int *)(a1 + 24) < 1)
      return result;
    result = sub_1C54C1634(a2, 2);
    *(_WORD *)(*a2 + a2[1]) = 8236;
    a2[1] += 2;
  }
  if (*(int *)(a1 + 24) >= 1)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8 >= 0)
      v9 = *(_QWORD *)(a1 + 32);
    else
      v9 = -v8;
    result = sub_1C6255C10(a2, v9, (unint64_t)v8 >> 63);
    LODWORD(v10) = *(_DWORD *)(a1 + 24);
    if ((int)v10 > 1)
    {
      v11 = 5;
      do
      {
        sub_1C54C1634(a2, 2);
        *(_WORD *)(*a2 + a2[1]) = 8236;
        a2[1] += 2;
        v12 = *(_QWORD *)(a1 + 8 * v11);
        if (v12 >= 0)
          v13 = *(_QWORD *)(a1 + 8 * v11);
        else
          v13 = -v12;
        result = sub_1C6255C10(a2, v13, (unint64_t)v12 >> 63);
        v10 = *(int *)(a1 + 24);
        v14 = v11 - 3;
        ++v11;
      }
      while (v14 < v10);
    }
    if ((int)v10 >= 1)
    {
      result = sub_1C54C1634(a2, 1);
      *(_BYTE *)(*a2 + a2[1]++) = 125;
    }
  }
  return result;
}

_QWORD *llvm::ms_demangle::IdentifierNode::outputTemplateParameters(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;

  if (result[2])
  {
    v5 = result;
    sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = 60;
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)v5[2] + 16))(v5[2], a2, a3);
    result = sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = 62;
  }
  return result;
}

_QWORD *llvm::ms_demangle::DynamicStructorIdentifierNode::output(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;

  if (*(_BYTE *)(a1 + 40))
  {
    v6 = 31;
    sub_1C54C1634(a2, 31);
  }
  else
  {
    v6 = 25;
    sub_1C54C1634(a2, 25);
  }
  a2[1] += v6;
  v7 = (_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 24);
  sub_1C54C1634(a2, 1);
  v9 = *a2;
  v10 = a2[1];
  if (v8)
  {
    *(_BYTE *)(v9 + v10) = 96;
  }
  else
  {
    *(_BYTE *)(v9 + v10) = 39;
    v7 = (_QWORD *)(a1 + 32);
  }
  ++a2[1];
  (*(void (**)(_QWORD, uint64_t *, uint64_t))(*(_QWORD *)*v7 + 16))(*v7, a2, a3);
  result = sub_1C54C1634(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 10023;
  a2[1] += 2;
  return result;
}

_QWORD *llvm::ms_demangle::NamedIdentifierNode::output(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _BYTE *v6;
  _BYTE *v7;
  size_t v8;

  v7 = (_BYTE *)a1[3];
  v6 = (_BYTE *)a1[4];
  v8 = v6 - v7;
  if (v6 != v7)
  {
    sub_1C54C1634(a2, v6 - v7);
    memcpy((void *)(*a2 + a2[1]), v7, v8);
    a2[1] += v8;
  }
  return llvm::ms_demangle::IdentifierNode::outputTemplateParameters(a1, a2, a3);
}

_QWORD *llvm::ms_demangle::IntrinsicFunctionIdentifierNode::output(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  const char *v18;
  _OWORD *v19;
  const char *v20;
  _OWORD *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _OWORD *v26;
  const char *v27;

  switch(*(_BYTE *)(a1 + 24))
  {
    case 1:
      v6 = 12;
      sub_1C54C1634(a2, 12);
      v7 = a2 + 1;
      v8 = *a2 + a2[1];
      *(_QWORD *)v8 = *(_QWORD *)"operator new";
      v9 = 2003136032;
      goto LABEL_47;
    case 2:
      v6 = 15;
      sub_1C54C1634(a2, 15);
      v7 = a2 + 1;
      qmemcpy((void *)(*a2 + a2[1]), "operator delete", 15);
      goto LABEL_44;
    case 3:
      v6 = 9;
      sub_1C54C1634(a2, 9);
      v7 = a2 + 1;
      v10 = *a2 + a2[1];
      *(_QWORD *)v10 = *(_QWORD *)"operator=";
      v11 = 61;
      goto LABEL_30;
    case 4:
      v6 = 10;
      sub_1C54C1634(a2, 10);
      v7 = a2 + 1;
      v12 = *a2 + a2[1];
      *(_QWORD *)v12 = *(_QWORD *)"operator>>";
      v13 = 15934;
      goto LABEL_43;
    case 5:
      v6 = 10;
      sub_1C54C1634(a2, 10);
      v7 = a2 + 1;
      v12 = *a2 + a2[1];
      *(_QWORD *)v12 = *(_QWORD *)"operator<<";
      v13 = 15420;
      goto LABEL_43;
    case 6:
      v6 = 9;
      sub_1C54C1634(a2, 9);
      v7 = a2 + 1;
      v10 = *a2 + a2[1];
      *(_QWORD *)v10 = *(_QWORD *)"operator!";
      v11 = 33;
      goto LABEL_30;
    case 7:
      v6 = 10;
      sub_1C54C1634(a2, 10);
      v7 = a2 + 1;
      v12 = *a2 + a2[1];
      *(_QWORD *)v12 = *(_QWORD *)"operator==";
      v13 = 15677;
      goto LABEL_43;
    case 8:
      v6 = 10;
      sub_1C54C1634(a2, 10);
      v7 = a2 + 1;
      v12 = *a2 + a2[1];
      *(_QWORD *)v12 = *(_QWORD *)"operator!=";
      v13 = 15649;
      goto LABEL_43;
    case 9:
      v6 = 10;
      sub_1C54C1634(a2, 10);
      v7 = a2 + 1;
      v12 = *a2 + a2[1];
      *(_QWORD *)v12 = *(_QWORD *)"operator[]";
      v13 = 23899;
      goto LABEL_43;
    case 0xA:
      v6 = 10;
      sub_1C54C1634(a2, 10);
      v7 = a2 + 1;
      v12 = *a2 + a2[1];
      *(_QWORD *)v12 = *(_QWORD *)"operator->";
      v13 = 15917;
      goto LABEL_43;
    case 0xB:
      v6 = 9;
      sub_1C54C1634(a2, 9);
      v7 = a2 + 1;
      v10 = *a2 + a2[1];
      *(_QWORD *)v10 = *(_QWORD *)"operator*";
      v11 = 42;
      goto LABEL_30;
    case 0xC:
      v6 = 10;
      sub_1C54C1634(a2, 10);
      v7 = a2 + 1;
      v12 = *a2 + a2[1];
      *(_QWORD *)v12 = *(_QWORD *)"operator++";
      v13 = 11051;
      goto LABEL_43;
    case 0xD:
      v6 = 10;
      sub_1C54C1634(a2, 10);
      v7 = a2 + 1;
      v12 = *a2 + a2[1];
      *(_QWORD *)v12 = *(_QWORD *)"operator--";
      v13 = 11565;
      goto LABEL_43;
    case 0xE:
      v6 = 9;
      sub_1C54C1634(a2, 9);
      v7 = a2 + 1;
      v10 = *a2 + a2[1];
      *(_QWORD *)v10 = *(_QWORD *)"operator-";
      v11 = 45;
      goto LABEL_30;
    case 0xF:
      v6 = 9;
      sub_1C54C1634(a2, 9);
      v7 = a2 + 1;
      v10 = *a2 + a2[1];
      *(_QWORD *)v10 = *(_QWORD *)"operator+";
      v11 = 43;
      goto LABEL_30;
    case 0x10:
      v6 = 9;
      sub_1C54C1634(a2, 9);
      v7 = a2 + 1;
      v10 = *a2 + a2[1];
      *(_QWORD *)v10 = *(_QWORD *)"operator&";
      v11 = 38;
      goto LABEL_30;
    case 0x11:
      v6 = 11;
      sub_1C54C1634(a2, 11);
      v7 = a2 + 1;
      v14 = *a2 + a2[1];
      *(_QWORD *)v14 = *(_QWORD *)"operator->*";
      v15 = 708717938;
      goto LABEL_76;
    case 0x12:
      v6 = 9;
      sub_1C54C1634(a2, 9);
      v7 = a2 + 1;
      v10 = *a2 + a2[1];
      *(_QWORD *)v10 = *(_QWORD *)"operator/";
      v11 = 47;
      goto LABEL_30;
    case 0x13:
      v6 = 9;
      sub_1C54C1634(a2, 9);
      v7 = a2 + 1;
      v10 = *a2 + a2[1];
      *(_QWORD *)v10 = *(_QWORD *)"operator%";
      v11 = 37;
      goto LABEL_30;
    case 0x14:
      v6 = 9;
      sub_1C54C1634(a2, 9);
      v7 = a2 + 1;
      v10 = *a2 + a2[1];
      *(_QWORD *)v10 = *(_QWORD *)"operator<";
      v11 = 60;
      goto LABEL_30;
    case 0x15:
      v6 = 10;
      sub_1C54C1634(a2, 10);
      v7 = a2 + 1;
      v12 = *a2 + a2[1];
      *(_QWORD *)v12 = *(_QWORD *)"operator<=";
      v13 = 15676;
      goto LABEL_43;
    case 0x16:
      v6 = 9;
      sub_1C54C1634(a2, 9);
      v7 = a2 + 1;
      v10 = *a2 + a2[1];
      *(_QWORD *)v10 = *(_QWORD *)"operator>";
      v11 = 62;
      goto LABEL_30;
    case 0x17:
      v6 = 10;
      sub_1C54C1634(a2, 10);
      v7 = a2 + 1;
      v12 = *a2 + a2[1];
      *(_QWORD *)v12 = *(_QWORD *)"operator>=";
      v13 = 15678;
      goto LABEL_43;
    case 0x18:
      v6 = 9;
      sub_1C54C1634(a2, 9);
      v7 = a2 + 1;
      v10 = *a2 + a2[1];
      *(_QWORD *)v10 = *(_QWORD *)"operator,";
      v11 = 44;
      goto LABEL_30;
    case 0x19:
      v6 = 10;
      sub_1C54C1634(a2, 10);
      v7 = a2 + 1;
      v12 = *a2 + a2[1];
      *(_QWORD *)v12 = *(_QWORD *)"operator()";
      v13 = 10536;
      goto LABEL_43;
    case 0x1A:
      v6 = 9;
      sub_1C54C1634(a2, 9);
      v7 = a2 + 1;
      v10 = *a2 + a2[1];
      *(_QWORD *)v10 = *(_QWORD *)"operator~";
      v11 = 126;
      goto LABEL_30;
    case 0x1B:
      v6 = 9;
      sub_1C54C1634(a2, 9);
      v7 = a2 + 1;
      v10 = *a2 + a2[1];
      *(_QWORD *)v10 = *(_QWORD *)"operator^";
      v11 = 94;
      goto LABEL_30;
    case 0x1C:
      v6 = 9;
      sub_1C54C1634(a2, 9);
      v7 = a2 + 1;
      v10 = *a2 + a2[1];
      *(_QWORD *)v10 = *(_QWORD *)"operator|";
      v11 = 124;
LABEL_30:
      *(_BYTE *)(v10 + 8) = v11;
      goto LABEL_44;
    case 0x1D:
      v6 = 10;
      sub_1C54C1634(a2, 10);
      v7 = a2 + 1;
      v12 = *a2 + a2[1];
      *(_QWORD *)v12 = *(_QWORD *)"operator&&";
      v13 = 9766;
      goto LABEL_43;
    case 0x1E:
      v6 = 10;
      sub_1C54C1634(a2, 10);
      v7 = a2 + 1;
      v12 = *a2 + a2[1];
      *(_QWORD *)v12 = *(_QWORD *)"operator||";
      v13 = 31868;
      goto LABEL_43;
    case 0x1F:
      v6 = 10;
      sub_1C54C1634(a2, 10);
      v7 = a2 + 1;
      v12 = *a2 + a2[1];
      *(_QWORD *)v12 = *(_QWORD *)"operator*=";
      v13 = 15658;
      goto LABEL_43;
    case 0x20:
      v6 = 10;
      sub_1C54C1634(a2, 10);
      v7 = a2 + 1;
      v12 = *a2 + a2[1];
      *(_QWORD *)v12 = *(_QWORD *)"operator+=";
      v13 = 15659;
      goto LABEL_43;
    case 0x21:
      v6 = 10;
      sub_1C54C1634(a2, 10);
      v7 = a2 + 1;
      v12 = *a2 + a2[1];
      *(_QWORD *)v12 = *(_QWORD *)"operator-=";
      v13 = 15661;
      goto LABEL_43;
    case 0x22:
      v6 = 10;
      sub_1C54C1634(a2, 10);
      v7 = a2 + 1;
      v12 = *a2 + a2[1];
      *(_QWORD *)v12 = *(_QWORD *)"operator/=";
      v13 = 15663;
      goto LABEL_43;
    case 0x23:
      v6 = 10;
      sub_1C54C1634(a2, 10);
      v7 = a2 + 1;
      v12 = *a2 + a2[1];
      *(_QWORD *)v12 = *(_QWORD *)"operator%=";
      v13 = 15653;
      goto LABEL_43;
    case 0x24:
      v6 = 11;
      sub_1C54C1634(a2, 11);
      v7 = a2 + 1;
      v14 = *a2 + a2[1];
      *(_QWORD *)v14 = *(_QWORD *)"operator>>=";
      v15 = 1027489394;
      goto LABEL_76;
    case 0x25:
      v6 = 11;
      sub_1C54C1634(a2, 11);
      v7 = a2 + 1;
      v14 = *a2 + a2[1];
      *(_QWORD *)v14 = *(_QWORD *)"operator<<=";
      v15 = 1027357810;
      goto LABEL_76;
    case 0x26:
      v6 = 10;
      sub_1C54C1634(a2, 10);
      v7 = a2 + 1;
      v12 = *a2 + a2[1];
      *(_QWORD *)v12 = *(_QWORD *)"operator&=";
      v13 = 15654;
      goto LABEL_43;
    case 0x27:
      v6 = 10;
      sub_1C54C1634(a2, 10);
      v7 = a2 + 1;
      v12 = *a2 + a2[1];
      *(_QWORD *)v12 = *(_QWORD *)"operator|=";
      v13 = 15740;
      goto LABEL_43;
    case 0x28:
      v6 = 10;
      sub_1C54C1634(a2, 10);
      v7 = a2 + 1;
      v12 = *a2 + a2[1];
      *(_QWORD *)v12 = *(_QWORD *)"operator^=";
      v13 = 15710;
LABEL_43:
      *(_WORD *)(v12 + 8) = v13;
      goto LABEL_44;
    case 0x29:
      v6 = 12;
      sub_1C54C1634(a2, 12);
      v7 = a2 + 1;
      v8 = *a2 + a2[1];
      v9 = 661811060;
LABEL_47:
      *(_DWORD *)(v8 + 8) = v9;
      goto LABEL_44;
    case 0x2A:
      v6 = 22;
      sub_1C54C1634(a2, 22);
      v7 = a2 + 1;
      v17 = *a2 + a2[1];
      goto LABEL_53;
    case 0x2B:
      v6 = 22;
      sub_1C54C1634(a2, 22);
      v7 = a2 + 1;
      v17 = *a2 + a2[1];
      goto LABEL_53;
    case 0x2C:
      v6 = 22;
      sub_1C54C1634(a2, 22);
      v7 = a2 + 1;
      v17 = *a2 + a2[1];
      goto LABEL_53;
    case 0x2D:
      v6 = 22;
      sub_1C54C1634(a2, 22);
      v7 = a2 + 1;
      v17 = *a2 + a2[1];
      goto LABEL_53;
    case 0x2E:
      v6 = 22;
      sub_1C54C1634(a2, 22);
      v7 = a2 + 1;
      v17 = *a2 + a2[1];
LABEL_53:
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *(_QWORD *)(v17 + 14) = *(_QWORD *)(v18 + 14);
      goto LABEL_44;
    case 0x2F:
      v6 = 28;
      sub_1C54C1634(a2, 28);
      v7 = a2 + 1;
      v19 = (_OWORD *)(*a2 + a2[1]);
      goto LABEL_62;
    case 0x30:
      v6 = 26;
      sub_1C54C1634(a2, 26);
      v7 = a2 + 1;
      goto LABEL_44;
    case 0x31:
      v6 = 25;
      sub_1C54C1634(a2, 25);
      v7 = a2 + 1;
      v21 = (_OWORD *)(*a2 + a2[1]);
      goto LABEL_58;
    case 0x32:
      v6 = 25;
      sub_1C54C1634(a2, 25);
      v7 = a2 + 1;
      v21 = (_OWORD *)(*a2 + a2[1]);
LABEL_58:
      *v21 = *(_OWORD *)v22;
      *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)(v22 + 9);
      goto LABEL_44;
    case 0x33:
      v6 = 31;
      sub_1C54C1634(a2, 31);
      v7 = a2 + 1;
      goto LABEL_44;
    case 0x34:
      v6 = 19;
      sub_1C54C1634(a2, 19);
      v7 = a2 + 1;
      v23 = *a2 + a2[1];
      *(_DWORD *)(v23 + 15) = 660959861;
      goto LABEL_44;
    case 0x35:
      v6 = 28;
      sub_1C54C1634(a2, 28);
      v7 = a2 + 1;
      v19 = (_OWORD *)(*a2 + a2[1]);
LABEL_62:
      *v19 = *(_OWORD *)v20;
      *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)(v20 + 12);
      goto LABEL_44;
    case 0x36:
      v6 = 14;
      sub_1C54C1634(a2, 14);
      v7 = a2 + 1;
      qmemcpy((void *)(*a2 + a2[1]), "operator new[]", 14);
      goto LABEL_44;
    case 0x37:
      v6 = 17;
      sub_1C54C1634(a2, 17);
      v7 = a2 + 1;
      v24 = *a2 + a2[1];
      *(_OWORD *)v24 = *(_OWORD *)"operator delete[]";
      v25 = 93;
      goto LABEL_74;
    case 0x38:
      v6 = 30;
      sub_1C54C1634(a2, 30);
      v7 = a2 + 1;
      v26 = (_OWORD *)(*a2 + a2[1]);
      goto LABEL_68;
    case 0x39:
      v6 = 30;
      sub_1C54C1634(a2, 30);
      v7 = a2 + 1;
      v26 = (_OWORD *)(*a2 + a2[1]);
      goto LABEL_68;
    case 0x3A:
      v6 = 30;
      sub_1C54C1634(a2, 30);
      v7 = a2 + 1;
      v26 = (_OWORD *)(*a2 + a2[1]);
LABEL_68:
      *v26 = *(_OWORD *)v27;
      *(_OWORD *)((char *)v26 + 14) = *(_OWORD *)(v27 + 14);
      goto LABEL_44;
    case 0x3B:
      v6 = 36;
      sub_1C54C1634(a2, 36);
      v7 = a2 + 1;
      goto LABEL_44;
    case 0x3C:
      v6 = 27;
      sub_1C54C1634(a2, 27);
      v7 = a2 + 1;
      goto LABEL_44;
    case 0x3D:
      v6 = 40;
      sub_1C54C1634(a2, 40);
      v7 = a2 + 1;
      goto LABEL_44;
    case 0x3E:
      v6 = 48;
      sub_1C54C1634(a2, 48);
      v7 = a2 + 1;
      goto LABEL_44;
    case 0x3F:
      v6 = 17;
      sub_1C54C1634(a2, 17);
      v7 = a2 + 1;
      v24 = *a2 + a2[1];
      *(_OWORD *)v24 = *(_OWORD *)"operator co_await";
      v25 = 116;
LABEL_74:
      *(_BYTE *)(v24 + 16) = v25;
      goto LABEL_44;
    case 0x40:
      v6 = 11;
      sub_1C54C1634(a2, 11);
      v7 = a2 + 1;
      v14 = *a2 + a2[1];
      *(_QWORD *)v14 = *(_QWORD *)"operator<=>";
      v15 = 1044200562;
LABEL_76:
      *(_DWORD *)(v14 + 7) = v15;
LABEL_44:
      *v7 += v6;
      break;
    default:
      return llvm::ms_demangle::IdentifierNode::outputTemplateParameters((_QWORD *)a1, a2, a3);
  }
  return llvm::ms_demangle::IdentifierNode::outputTemplateParameters((_QWORD *)a1, a2, a3);
}

_QWORD *llvm::ms_demangle::LocalStaticGuardIdentifierNode::output(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD *v7;

  if (*(_BYTE *)(a1 + 24))
  {
    v4 = 27;
    result = sub_1C54C1634(a2, 27);
  }
  else
  {
    v4 = 20;
    result = sub_1C54C1634(a2, 20);
    v6 = *a2 + a2[1];
    *(_DWORD *)(v6 + 16) = 660894305;
  }
  a2[1] += v4;
  if (*(_DWORD *)(a1 + 28))
  {
    sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = 123;
    v7 = sub_1C6255C10(a2, *(unsigned int *)(a1 + 28), 0);
    result = sub_1C54C1634(v7, 1);
    *(_BYTE *)(*v7 + v7[1]++) = 125;
  }
  return result;
}

uint64_t llvm::ms_demangle::ConversionOperatorIdentifierNode::output(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  sub_1C54C1634(a2, 8);
  *(_QWORD *)(*a2 + a2[1]) = 0x726F74617265706FLL;
  a2[1] += 8;
  llvm::ms_demangle::IdentifierNode::outputTemplateParameters((_QWORD *)a1, a2, a3);
  sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 32;
  return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a2, a3);
}

_QWORD *llvm::ms_demangle::StructorIdentifierNode::output(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 32))
  {
    sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = 126;
  }
  (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a2, a3);
  return llvm::ms_demangle::IdentifierNode::outputTemplateParameters((_QWORD *)a1, a2, a3);
}

_QWORD *llvm::ms_demangle::LiteralOperatorIdentifierNode::output(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  size_t v9;

  sub_1C54C1634(a2, 11);
  v6 = *a2 + a2[1];
  *(_QWORD *)v6 = *(_QWORD *)"operator \"\"";
  *(_DWORD *)(v6 + 7) = 572661874;
  a2[1] += 11;
  v8 = (_BYTE *)a1[3];
  v7 = (_BYTE *)a1[4];
  v9 = v7 - v8;
  if (v7 != v8)
  {
    sub_1C54C1634(a2, v7 - v8);
    memcpy((void *)(*a2 + a2[1]), v8, v9);
    a2[1] += v9;
  }
  return llvm::ms_demangle::IdentifierNode::outputTemplateParameters(a1, a2, a3);
}

_WORD *llvm::ms_demangle::FunctionSignatureNode::outputPre(_WORD *result, uint64_t *a2, uint64_t a3)
{
  _WORD *v5;
  __int16 v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;

  v5 = result;
  if ((a3 & 4) == 0)
  {
    v6 = result[11];
    if ((v6 & 1) != 0)
    {
      result = sub_1C54C1634(a2, 8);
      *(_QWORD *)(*a2 + a2[1]) = 0x203A63696C627570;
      a2[1] += 8;
      v6 = v5[11];
    }
    if ((v6 & 2) != 0)
    {
      result = sub_1C54C1634(a2, 11);
      v10 = *a2 + a2[1];
      *(_QWORD *)v10 = *(_QWORD *)"protected: ";
      *(_DWORD *)(v10 + 7) = 540697701;
      a2[1] += 11;
      v6 = v5[11];
    }
    if ((v6 & 4) != 0)
    {
      result = sub_1C54C1634(a2, 9);
      v7 = *a2 + a2[1];
      *(_QWORD *)v7 = *(_QWORD *)"private: ";
      *(_BYTE *)(v7 + 8) = 32;
      a2[1] += 9;
    }
  }
  if ((a3 & 8) == 0)
  {
    v8 = v5[11];
    if ((v8 & 0x18) == 0x10)
    {
      result = sub_1C54C1634(a2, 7);
      v11 = (_DWORD *)(*a2 + a2[1]);
      *(_DWORD *)((char *)v11 + 3) = 543385972;
      *v11 = 1952543859;
      a2[1] += 7;
      v8 = v5[11];
    }
    if ((v8 & 0x20) != 0)
    {
      result = sub_1C54C1634(a2, 8);
      *(_QWORD *)(*a2 + a2[1]) = 0x206C617574726976;
      a2[1] += 8;
      v8 = v5[11];
    }
    if ((v8 & 0x80) != 0)
    {
      result = sub_1C54C1634(a2, 11);
      v9 = *a2 + a2[1];
      *(_QWORD *)v9 = *(_QWORD *)"extern \"C\" ";
      *(_DWORD *)(v9 + 7) = 539116322;
      a2[1] += 11;
    }
  }
  if ((a3 & 0x10) == 0)
  {
    result = (_WORD *)*((_QWORD *)v5 + 4);
    if (result)
    {
      (*(void (**)(_WORD *, uint64_t *, uint64_t))(*(_QWORD *)result + 24))(result, a2, a3);
      result = sub_1C54C1634(a2, 1);
      *(_BYTE *)(*a2 + a2[1]++) = 32;
    }
  }
  if ((a3 & 1) == 0)
    return (_WORD *)sub_1C54CB3F4(a2, *((unsigned __int8 *)v5 + 20));
  return result;
}

_WORD *llvm::ms_demangle::FunctionSignatureNode::outputPost(_WORD *result, _QWORD *a2, uint64_t a3)
{
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = result;
  if ((result[11] & 0x100) == 0)
  {
    sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = 40;
    v6 = *((_QWORD *)v5 + 6);
    if (v6)
    {
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2, a3);
    }
    else
    {
      sub_1C54C1634(a2, 4);
      *(_DWORD *)(*a2 + a2[1]) = 1684631414;
      a2[1] += 4;
    }
    if (*((_BYTE *)v5 + 40))
    {
      v7 = a2[1];
      if (!v7 || *(_BYTE *)(v7 + *a2 - 1) != 40)
      {
        sub_1C54C1634(a2, 2);
        *(_WORD *)(*a2 + a2[1]) = 8236;
        a2[1] += 2;
      }
      sub_1C54C1634(a2, 3);
      v8 = *a2 + a2[1];
      *(_BYTE *)(v8 + 2) = 46;
      *(_WORD *)v8 = 11822;
      a2[1] += 3;
    }
    result = sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = 41;
  }
  v9 = *((_BYTE *)v5 + 12);
  if ((v9 & 1) != 0)
  {
    result = sub_1C54C1634(a2, 6);
    v15 = *a2 + a2[1];
    *(_WORD *)(v15 + 4) = 29811;
    *(_DWORD *)v15 = 1852793632;
    a2[1] += 6;
    v9 = *((_BYTE *)v5 + 12);
  }
  if ((v9 & 2) != 0)
  {
    result = sub_1C54C1634(a2, 9);
    v16 = *a2 + a2[1];
    *(_QWORD *)v16 = *(_QWORD *)" volatile";
    *(_BYTE *)(v16 + 8) = 101;
    a2[1] += 9;
    v9 = *((_BYTE *)v5 + 12);
  }
  if ((v9 & 0x20) != 0)
  {
    result = sub_1C54C1634(a2, 11);
    v17 = *a2 + a2[1];
    *(_QWORD *)v17 = *(_QWORD *)" __restrict";
    *(_DWORD *)(v17 + 7) = 1952672114;
    a2[1] += 11;
    v9 = *((_BYTE *)v5 + 12);
  }
  if ((v9 & 0x10) != 0)
  {
    result = sub_1C54C1634(a2, 12);
    v10 = *a2 + a2[1];
    *(_QWORD *)v10 = *(_QWORD *)" __unaligned";
    *(_DWORD *)(v10 + 8) = 1684368999;
    a2[1] += 12;
  }
  if (*((_BYTE *)v5 + 56))
  {
    result = sub_1C54C1634(a2, 9);
    v11 = *a2 + a2[1];
    *(_QWORD *)v11 = *(_QWORD *)" noexcept";
    *(_BYTE *)(v11 + 8) = 116;
    a2[1] += 9;
  }
  v12 = *((_DWORD *)v5 + 6);
  if (v12 == 2)
  {
    v13 = 3;
    result = sub_1C54C1634(a2, 3);
    v14 = a2 + 1;
    v18 = *a2 + a2[1];
    *(_BYTE *)(v18 + 2) = 38;
    *(_WORD *)v18 = 9760;
  }
  else
  {
    if (v12 != 1)
      goto LABEL_25;
    v13 = 2;
    result = sub_1C54C1634(a2, 2);
    v14 = a2 + 1;
    *(_WORD *)(*a2 + a2[1]) = 9760;
  }
  *v14 += v13;
LABEL_25:
  if ((a3 & 0x10) == 0)
  {
    result = (_WORD *)*((_QWORD *)v5 + 4);
    if (result)
      return (_WORD *)(*(uint64_t (**)(_WORD *, _QWORD *, uint64_t))(*(_QWORD *)result + 32))(result, a2, a3);
  }
  return result;
}

_WORD *llvm::ms_demangle::ThunkSignatureNode::outputPre(_WORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;

  sub_1C54C1634(a2, 9);
  v6 = *a2 + a2[1];
  *(_QWORD *)v6 = *(_QWORD *)"[thunk]: ";
  *(_BYTE *)(v6 + 8) = 32;
  a2[1] += 9;
  return llvm::ms_demangle::FunctionSignatureNode::outputPre(a1, a2, a3);
}

_WORD *llvm::ms_demangle::ThunkSignatureNode::outputPost(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  int v15;
  unint64_t v16;
  _QWORD *v17;
  int v18;
  unint64_t v19;
  _QWORD *v20;
  int v21;
  unint64_t v22;

  if ((*(_WORD *)(a1 + 22) & 0x800) != 0)
  {
    v10 = 10;
    sub_1C54C1634(a2, 10);
    v11 = *a2 + a2[1];
    *(_WORD *)(v11 + 8) = 31602;
    v9 = a2;
LABEL_9:
    v9[1] += v10;
    v12 = sub_1C6255C10(v9, *(unsigned int *)(a1 + 60), 0);
    sub_1C54C1634(v12, 2);
    *(_WORD *)(*v12 + v12[1]) = 10109;
    v12[1] += 2;
    return llvm::ms_demangle::FunctionSignatureNode::outputPost((_WORD *)a1, a2, a3);
  }
  if ((*(_WORD *)(a1 + 22) & 0x200) != 0)
  {
    if ((*(_WORD *)(a1 + 22) & 0x400) != 0)
    {
      sub_1C54C1634(a2, 12);
      v14 = *a2 + a2[1];
      *(_DWORD *)(v14 + 8) = 2071487856;
      a2[1] += 12;
      v15 = *(_DWORD *)(a1 + 64);
      if (v15 >= 0)
        v16 = v15;
      else
        v16 = -v15;
      v17 = sub_1C6255C10(a2, v16, v15 >> 31);
      v10 = 2;
      sub_1C54C1634(v17, 2);
      *(_WORD *)(*v17 + v17[1]) = 8236;
      v17[1] += 2;
      v18 = *(_DWORD *)(a1 + 68);
      if (v18 >= 0)
        v19 = v18;
      else
        v19 = -v18;
      v20 = sub_1C6255C10(v17, v19, v18 >> 31);
      sub_1C54C1634(v20, 2);
      *(_WORD *)(*v20 + v20[1]) = 8236;
      v20[1] += 2;
      v21 = *(_DWORD *)(a1 + 72);
      if (v21 >= 0)
        v22 = v21;
      else
        v22 = -v21;
      v9 = sub_1C6255C10(v20, v22, v21 >> 31);
      sub_1C54C1634(v9, 2);
      *(_WORD *)(*v9 + v9[1]) = 8236;
    }
    else
    {
      sub_1C54C1634(a2, 10);
      v6 = *a2 + a2[1];
      *(_WORD *)(v6 + 8) = 31600;
      a2[1] += 10;
      v7 = *(_DWORD *)(a1 + 72);
      if (v7 >= 0)
        v8 = v7;
      else
        v8 = -v7;
      v9 = sub_1C6255C10(a2, v8, v7 >> 31);
      v10 = 2;
      sub_1C54C1634(v9, 2);
      *(_WORD *)(*v9 + v9[1]) = 8236;
    }
    goto LABEL_9;
  }
  return llvm::ms_demangle::FunctionSignatureNode::outputPost((_WORD *)a1, a2, a3);
}

uint64_t *llvm::ms_demangle::PointerTypeNode::outputPre(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;

  v3 = a3;
  v6 = *(_DWORD **)(a1 + 32);
  if (v6[2] == 3)
    a3 = 1;
  else
    a3 = a3;
  (*(void (**)(_DWORD *, uint64_t *, uint64_t))(*(_QWORD *)v6 + 24))(v6, a2, a3);
  sub_1C54CB674((unint64_t)a2);
  if ((*(_BYTE *)(a1 + 12) & 0x10) != 0)
  {
    sub_1C54C1634(a2, 12);
    v7 = *a2 + a2[1];
    *(_QWORD *)v7 = *(_QWORD *)"__unaligned ";
    *(_DWORD *)(v7 + 8) = 543450478;
    a2[1] += 12;
  }
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v8 == 3)
  {
    sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = 40;
    sub_1C54CB3F4(a2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 20));
    sub_1C54C1634(a2, 1);
    v9 = 32;
  }
  else
  {
    if (v8 != 16)
      goto LABEL_11;
    sub_1C54C1634(a2, 1);
    v9 = 40;
  }
  *(_BYTE *)(*a2 + a2[1]++) = v9;
LABEL_11:
  v10 = *(_QWORD *)(a1 + 24);
  if (v10)
  {
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v10 + 16))(v10, a2, v3);
    sub_1C54C1634(a2, 2);
    *(_WORD *)(*a2 + a2[1]) = 14906;
    a2[1] += 2;
  }
  v11 = *(_DWORD *)(a1 + 16);
  switch(v11)
  {
    case 3:
      v12 = 2;
      sub_1C54C1634(a2, 2);
      v14 = a2 + 1;
      *(_WORD *)(*a2 + a2[1]) = 9766;
LABEL_20:
      *v14 += v12;
      return sub_1C54CB358(a2, *(unsigned __int8 *)(a1 + 12), 0, 0);
    case 2:
      v12 = 1;
      sub_1C54C1634(a2, 1);
      v13 = *a2;
      v14 = a2 + 1;
      v15 = a2[1];
      v16 = 38;
      goto LABEL_19;
    case 1:
      v12 = 1;
      sub_1C54C1634(a2, 1);
      v13 = *a2;
      v14 = a2 + 1;
      v15 = a2[1];
      v16 = 42;
LABEL_19:
      *(_BYTE *)(v13 + v15) = v16;
      goto LABEL_20;
  }
  return sub_1C54CB358(a2, *(unsigned __int8 *)(a1 + 12), 0, 0);
}

uint64_t llvm::ms_demangle::PointerTypeNode::outputPost(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _DWORD *v6;
  int v7;

  v6 = *(_DWORD **)(a1 + 32);
  v7 = v6[2];
  if (v7 == 16 || v7 == 3)
  {
    sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = 41;
    v6 = *(_DWORD **)(a1 + 32);
  }
  return (*(uint64_t (**)(_DWORD *, _QWORD *, uint64_t))(*(_QWORD *)v6 + 32))(v6, a2, a3);
}

uint64_t *llvm::ms_demangle::TagTypeNode::outputPre(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;

  if ((a3 & 2) == 0)
  {
    switch(*(_DWORD *)(a1 + 24))
    {
      case 0:
        v6 = 5;
        sub_1C54C1634(a2, 5);
        v7 = a2 + 1;
        v8 = *a2 + a2[1];
        *(_BYTE *)(v8 + 4) = 115;
        v9 = 1935764579;
        goto LABEL_6;
      case 1:
        v6 = 6;
        sub_1C54C1634(a2, 6);
        v7 = a2 + 1;
        v8 = *a2 + a2[1];
        *(_WORD *)(v8 + 4) = 29795;
        v9 = 1970435187;
        goto LABEL_6;
      case 2:
        v6 = 5;
        sub_1C54C1634(a2, 5);
        v7 = a2 + 1;
        v8 = *a2 + a2[1];
        *(_BYTE *)(v8 + 4) = 110;
        v9 = 1869180533;
LABEL_6:
        *(_DWORD *)v8 = v9;
        goto LABEL_7;
      case 3:
        v6 = 4;
        sub_1C54C1634(a2, 4);
        v7 = a2 + 1;
        *(_DWORD *)(*a2 + a2[1]) = 1836412517;
LABEL_7:
        *v7 += v6;
        break;
      default:
        break;
    }
    sub_1C54C1634(a2, 1);
    *(_BYTE *)(*a2 + a2[1]++) = 32;
  }
  (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a2, a3);
  return sub_1C54CB358(a2, *(unsigned __int8 *)(a1 + 12), 1, 0);
}

uint64_t *llvm::ms_demangle::ArrayTypeNode::outputPre(uint64_t a1, uint64_t *a2)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
  return sub_1C54CB358(a2, *(unsigned __int8 *)(a1 + 12), 1, 0);
}

_QWORD *llvm::ms_demangle::ArrayTypeNode::outputDimensionsImpl(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;

  v3 = result[2];
  v4 = *(_QWORD *)(v3 + 24);
  if (v4)
  {
    v7 = result;
    result = **(_QWORD ***)(v3 + 16);
    if (result[2])
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*result + 16))(result, a2, a3);
      v4 = *(_QWORD *)(v7[2] + 24);
    }
    if (v4 >= 2)
    {
      v8 = 1;
      do
      {
        sub_1C54C1634(a2, 2);
        *(_WORD *)(*a2 + a2[1]) = 23389;
        a2[1] += 2;
        v9 = v7[2];
        result = *(_QWORD **)(*(_QWORD *)(v9 + 16) + 8 * v8);
        if (result[2])
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*result + 16))(result, a2, a3);
          v9 = v7[2];
        }
        ++v8;
      }
      while (v8 < *(_QWORD *)(v9 + 24));
    }
  }
  return result;
}

uint64_t llvm::ms_demangle::ArrayTypeNode::outputPost(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 91;
  llvm::ms_demangle::ArrayTypeNode::outputDimensionsImpl((_QWORD *)a1, a2, a3);
  sub_1C54C1634(a2, 1);
  *(_BYTE *)(*a2 + a2[1]++) = 93;
  return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a2, a3);
}

uint64_t llvm::ms_demangle::SymbolNode::output(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t llvm::ms_demangle::FunctionSymbolNode::output(uint64_t a1, unint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
  sub_1C54CB674(a2);
  (*(void (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a2, a3);
  return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a2, a3);
}

_QWORD *llvm::ms_demangle::VariableSymbolNode::output(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned int v6;
  const char *v7;
  size_t v8;
  size_t v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;

  v6 = *(unsigned __int8 *)(a1 + 24) - 1;
  if (v6 <= 2)
  {
    if ((a3 & 4) == 0)
    {
      v7 = off_1E816CC70[(char)v6];
      v8 = strlen(v7);
      if (v8)
      {
        v9 = v8;
        sub_1C54C1634(a2, v8);
        memcpy((void *)(*a2 + a2[1]), v7, v9);
        a2[1] += v9;
      }
      sub_1C54C1634(a2, 2);
      *(_WORD *)(*a2 + a2[1]) = 8250;
      a2[1] += 2;
    }
    if ((a3 & 8) == 0)
    {
      sub_1C54C1634(a2, 7);
      v10 = (_DWORD *)(*a2 + a2[1]);
      *(_DWORD *)((char *)v10 + 3) = 543385972;
      *v10 = 1952543859;
      a2[1] += 7;
    }
  }
  if ((a3 & 0x20) != 0)
  {
    result = *(_QWORD **)(a1 + 16);
    v13 = 2;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
  }
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
  {
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v11 + 24))(v11, a2, a3);
    sub_1C54CB674((unint64_t)a2);
  }
  (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a2, a3);
  result = *(_QWORD **)(a1 + 32);
  if (result)
  {
    v13 = 4;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
  }
  return result;
}

uint64_t llvm::ms_demangle::CustomTypeNode::outputPre(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t llvm::ms_demangle::QualifiedNameNode::output(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return llvm::ms_demangle::NodeArrayNode::output(*(_QWORD *)(a1 + 16), a2, a3, "::", "");
}

_QWORD *llvm::ms_demangle::RttiBaseClassDescriptorNode::output(unsigned int *a1, _QWORD *a2)
{
  _QWORD *v4;
  int v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *result;

  sub_1C54C1634(a2, 32);
  a2[1] += 32;
  v4 = sub_1C6255C10(a2, a1[6], 0);
  sub_1C54C1634(v4, 2);
  *(_WORD *)(*v4 + v4[1]) = 8236;
  v4[1] += 2;
  v5 = a1[7];
  if (v5 >= 0)
    v6 = v5;
  else
    v6 = -v5;
  v7 = sub_1C6255C10(v4, v6, v5 >> 31);
  sub_1C54C1634(v7, 2);
  *(_WORD *)(*v7 + v7[1]) = 8236;
  v7[1] += 2;
  v8 = sub_1C6255C10(v7, a1[8], 0);
  sub_1C54C1634(v8, 2);
  *(_WORD *)(*v8 + v8[1]) = 8236;
  v8[1] += 2;
  sub_1C6255C10(v8, a1[9], 0);
  result = sub_1C54C1634(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 10025;
  a2[1] += 2;
  return result;
}

uint64_t llvm::ms_demangle::LocalStaticGuardVariableNode::output(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

_QWORD *llvm::ms_demangle::VcallThunkIdentifierNode::output(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *result;
  uint64_t v6;

  sub_1C54C1634(a2, 8);
  *(_QWORD *)(*a2 + a2[1]) = 0x7B276C6C61637660;
  a2[1] += 8;
  v4 = sub_1C6255C10(a2, *(_QWORD *)(a1 + 24), 0);
  result = sub_1C54C1634(v4, 9);
  v6 = *v4 + v4[1];
  *(_QWORD *)v6 = *(_QWORD *)", {flat}}";
  *(_BYTE *)(v6 + 8) = 125;
  v4[1] += 9;
  return result;
}

_QWORD *llvm::ms_demangle::SpecialTableSymbolNode::output(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;

  sub_1C54CB358(a2, *(unsigned __int8 *)(a1 + 32), 0, 1);
  result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a2, a3);
  if (*(_QWORD *)(a1 + 24))
  {
    sub_1C54C1634(a2, 6);
    v7 = *a2 + a2[1];
    *(_WORD *)(v7 + 4) = 24608;
    *(_DWORD *)v7 = 1919903355;
    a2[1] += 6;
    (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a2, a3);
    result = sub_1C54C1634(a2, 2);
    *(_WORD *)(*a2 + a2[1]) = 32039;
    a2[1] += 2;
  }
  return result;
}

void sub_1C62609E0()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62609F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, a3);
}

void sub_1C6260A48()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260A60()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260A78()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260A90()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260AA8()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260AC0()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260AD8()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260AF0()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260B08()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260B20()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260B38()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260B50()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260B68()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260B80()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260B98()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260BB0()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260BC8()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260BE0()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260BF8()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260C10()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260C28()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260C40()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260C58()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260C70()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6260C88()
{
  JUMPOUT(0x1CAA32FC0);
}

char *llvm::omp::getOpenMPDirectiveName(int a1)
{
  return off_1E816CC88[a1];
}

char *llvm::omp::getOpenMPClauseName(int a1)
{
  return off_1E816CFA8[a1];
}

uint64_t llvm::omp::OMPContext::OMPContext(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int ArchTypeForLLVMName;
  uint64_t *v26;
  uint64_t v27;

  *(_QWORD *)a1 = &off_1E816D338;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  v6 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0x600000000;
  sub_1C4765AA4((char *)(a1 + 8), 1uLL, 0);
  *(_DWORD *)(a1 + 72) = 55;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)(a1 + 88) = 0x800000000;
  v7 = 128;
  if (!a2)
    v7 = 64;
  v8 = *v6;
  v9 = **v6 | v7;
  **v6 = v9;
  v10 = *(_DWORD *)(a3 + 24);
  v11 = v10 - 1;
  if ((v10 - 1) <= 0x2C && ((0x1B0020F7801FuLL >> v11) & 1) != 0)
    *v8 = qword_1C86536F0[v11] | v9;
  if (v10 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"arm", 3uLL))
    **v6 |= 0x1000uLL;
  v12 = *(_DWORD *)(a3 + 24);
  if (v12 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"armeb", 5uLL))
    **v6 |= 0x2000uLL;
  v13 = *(_DWORD *)(a3 + 24);
  if (v13 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"aarch64", 7uLL))
    **v6 |= 0x4000uLL;
  v14 = *(_DWORD *)(a3 + 24);
  if (v14 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"aarch64_be", 0xAuLL))
    **v6 |= 0x8000uLL;
  v15 = *(_DWORD *)(a3 + 24);
  if (v15 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"aarch64_32", 0xAuLL))
    **v6 |= 0x10000uLL;
  v16 = *(_DWORD *)(a3 + 24);
  if (v16 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"ppc", 3uLL))
    **v6 |= 0x20000uLL;
  v17 = *(_DWORD *)(a3 + 24);
  if (v17 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"ppcle", 5uLL))
    **v6 |= 0x40000uLL;
  v18 = *(_DWORD *)(a3 + 24);
  if (v18 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"ppc64", 5uLL))
    **v6 |= 0x80000uLL;
  v19 = *(_DWORD *)(a3 + 24);
  if (v19 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"ppc64le", 7uLL))
    **v6 |= 0x100000uLL;
  v20 = *(_DWORD *)(a3 + 24);
  if (v20 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"x86", 3uLL))
    **v6 |= 0x200000uLL;
  v21 = *(_DWORD *)(a3 + 24);
  if (v21 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"x86_64", 6uLL))
    **v6 |= 0x400000uLL;
  v22 = *(_DWORD *)(a3 + 24);
  if (v22 == 42)
    **v6 |= 0x400000uLL;
  if (v22 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"amdgcn", 6uLL))
    **v6 |= 0x800000uLL;
  v23 = *(_DWORD *)(a3 + 24);
  if (v23 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"nvptx", 5uLL))
    **v6 |= 0x1000000uLL;
  v24 = *(_DWORD *)(a3 + 24);
  ArchTypeForLLVMName = llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"nvptx64", 7uLL);
  v26 = *(uint64_t **)(a1 + 8);
  v27 = *v26;
  if (v24 == ArchTypeForLLVMName)
    v27 = *v26 | 0x2000000;
  *v26 = v27 | 0x200400000800;
  return a1;
}

BOOL llvm::omp::isVariantApplicableInContext(_QWORD **a1, uint64_t a2, int a3)
{
  return sub_1C54D3C24(a1, a2, 0, a3) != 0;
}

uint64_t llvm::omp::getOpenMPContextTraitSetForSelector(int a1)
{
  return dword_1C8653C9C[a1];
}

uint64_t llvm::omp::getOpenMPContextTraitSetForProperty(int a1)
{
  return dword_1C8653858[a1];
}

char *llvm::omp::getOpenMPContextTraitSetName(int a1)
{
  return off_1E816D350[a1];
}

uint64_t llvm::omp::getOpenMPContextTraitSelectorForProperty(int a1)
{
  return dword_1C8653960[a1];
}

char *llvm::omp::getOpenMPContextTraitSelectorName(int a1)
{
  return off_1E816D378[a1];
}

BOOL llvm::omp::isValidTraitSelectorForTraitSet(int a1, int a2, BOOL *a3, _BYTE *a4)
{
  unsigned int v4;

  *a3 = (a2 - 3) < 0xFFFFFFFE;
  v4 = dword_1C8653C9C[a1];
  *a4 = byte_1C8653C88[a1];
  return v4 == a2;
}

_QWORD *sub_1C62610F8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E816D338;
  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[1];
  if (v3 != a1 + 3)
    free(v3);
  return a1;
}

void sub_1C626114C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E816D338;
  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[1];
  if (v3 != a1 + 3)
    free(v3);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62611B0()
{
  return 0;
}

void *sub_1C62611B8(llvm::APInt *a1, uint64_t a2, int a3)
{
  void *result;
  const void **v5;
  unsigned int v6;
  uint64_t v7;

  v7 = 0;
  result = (void *)sub_1C626123C(a2, a3, &v7);
  if ((_DWORD)result)
  {
    v5 = (const void **)(v7 + 8);
    v6 = *(_DWORD *)(v7 + 16);
    *((_DWORD *)a1 + 2) = v6;
    if (v6 > 0x40)
      return llvm::APInt::initSlowCase(a1, v5);
    else
      *(_QWORD *)a1 = *v5;
  }
  else
  {
    *((_DWORD *)a1 + 2) = 1;
    *(_QWORD *)a1 = 0;
  }
  return result;
}

uint64_t sub_1C626123C(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & a2;
  v7 = (_DWORD *)(v3 + 24 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -1)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 24 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void llvm::OpenMPIRBuilder::addAttributes(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t ParamAttrs;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t i;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t j;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t k;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t m;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t n;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t ii;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t jj;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t kk;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t mm;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t nn;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t i1;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t i2;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t i3;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t i4;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t i5;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t i6;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t i7;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t i8;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t i9;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t i10;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t i11;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t i12;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t i13;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t i14;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t i15;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t i16;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t i17;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t i18;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t i19;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t i20;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t i21;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t i22;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t i23;
  uint64_t *v190;
  uint64_t v191;
  uint64_t i24;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t i25;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t i26;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t i27;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t i28;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t i29;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t i30;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t i31;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t i32;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243[2];
  int v244[2];
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD v257[2];
  unint64_t v258;
  unint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  _QWORD v262[6];

  v262[4] = *MEMORY[0x1E0C80C00];
  v5 = **(uint64_t ***)a3;
  v245 = *(_QWORD *)(a3 + 112);
  *(_QWORD *)v244 = llvm::AttributeList::getFnAttrs((llvm::AttributeList *)&v245);
  *(_QWORD *)v243 = llvm::AttributeList::getRetAttrs((llvm::AttributeList *)&v245);
  v260 = v262;
  v261 = 0x400000000;
  if (*(_QWORD *)(a3 + 96))
  {
    v6 = 0;
    do
    {
      ParamAttrs = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v245, v6);
      v8 = ParamAttrs;
      v9 = v261;
      if (v261 >= HIDWORD(v261))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v260, (uint64_t)v262, v261 + 1, 8);
        v260[v261] = v8;
        v9 = v261;
      }
      else
      {
        v260[v261] = ParamAttrs;
      }
      LODWORD(v261) = v9 + 1;
      ++v6;
    }
    while (v6 < *(_QWORD *)(a3 + 96));
  }
  v10 = byte_1ED805888;
  v246 = llvm::Attribute::get(v5, 37, 0);
  if (v10)
  {
    v247 = llvm::Attribute::get(v5, 45, 0);
    v248 = llvm::Attribute::get(v5, 35, 0);
    v249 = llvm::Attribute::get(v5, 25, 0);
    v250 = llvm::Attribute::get(v5, 11, 0);
    v251 = llvm::Attribute::get(v5, 65, 0);
    v11 = 6;
  }
  else
  {
    v11 = 1;
  }
  v238 = llvm::AttributeSet::get(v5, &v246, v11);
  v12 = byte_1ED805888;
  v246 = llvm::Attribute::get(v5, 37, 0);
  if (v12)
  {
    v247 = llvm::Attribute::get(v5, 35, 0);
    v248 = llvm::Attribute::get(v5, 25, 0);
    v249 = llvm::Attribute::get(v5, 12, 0);
    v250 = llvm::Attribute::get(v5, 65, 0);
    v13 = 5;
  }
  else
  {
    v13 = 1;
  }
  v240 = llvm::AttributeSet::get(v5, &v246, v13);
  v14 = byte_1ED805888;
  v246 = llvm::Attribute::get(v5, 37, 0);
  if (v14)
  {
    v247 = llvm::Attribute::get(v5, 66, 0);
    v248 = llvm::Attribute::get(v5, 35, 0);
    v249 = llvm::Attribute::get(v5, 25, 0);
    v250 = llvm::Attribute::get(v5, 11, 0);
    v251 = llvm::Attribute::get(v5, 65, 0);
    v15 = 6;
  }
  else
  {
    v15 = 1;
  }
  v235 = llvm::AttributeSet::get(v5, &v246, v15);
  v16 = byte_1ED805888;
  v246 = llvm::Attribute::get(v5, 37, 0);
  if (v16)
  {
    v247 = llvm::Attribute::get(v5, 35, 0);
    v248 = llvm::Attribute::get(v5, 65, 0);
    v249 = llvm::Attribute::get(v5, 25, 0);
    v17 = 4;
  }
  else
  {
    v17 = 1;
  }
  v237 = llvm::AttributeSet::get(v5, &v246, v17);
  v246 = llvm::Attribute::get(v5, 37, 0);
  v247 = llvm::Attribute::get(v5, 6, 0);
  v239 = llvm::AttributeSet::get(v5, &v246, 2);
  v18 = byte_1ED805888;
  v246 = llvm::Attribute::get(v5, 37, 0);
  if (v18)
  {
    v247 = llvm::Attribute::get(v5, 35, 0);
    v248 = llvm::Attribute::get(v5, 12, 0);
    v249 = llvm::Attribute::get(v5, 65, 0);
    v250 = llvm::Attribute::get(v5, 25, 0);
    v19 = 5;
  }
  else
  {
    v19 = 1;
  }
  v236 = llvm::AttributeSet::get(v5, &v246, v19);
  v246 = llvm::Attribute::get(v5, 22, 0);
  v20 = llvm::AttributeSet::get(v5, &v246, 1);
  v246 = llvm::Attribute::get(v5, 2, 0);
  v21 = llvm::AttributeSet::get(v5, &v246, 1);
  v22 = byte_1ED805888;
  v246 = llvm::Attribute::get(v5, 37, 0);
  if (v22)
  {
    v247 = llvm::Attribute::get(v5, 35, 0);
    v248 = llvm::Attribute::get(v5, 65, 0);
    v23 = 3;
  }
  else
  {
    v23 = 1;
  }
  v24 = llvm::AttributeSet::get(v5, &v246, v23);
  v246 = llvm::Attribute::get(v5, 37, 0);
  v25 = llvm::AttributeSet::get(v5, &v246, 1);
  if (byte_1ED805888)
  {
    v246 = llvm::Attribute::get(v5, 45, 0);
    v247 = llvm::Attribute::get(v5, 25, 0);
    v248 = llvm::Attribute::get(v5, 22, 0);
    v26 = &v246;
    v27 = 3;
  }
  else
  {
    v26 = 0;
    v27 = 0;
  }
  v241 = llvm::AttributeSet::get(v5, v26, v27);
  v246 = llvm::Attribute::get(v5, 37, 0);
  v247 = llvm::Attribute::get(v5, 35, 0);
  v28 = llvm::AttributeSet::get(v5, &v246, 2);
  v242 = a3;
  if (byte_1ED805888)
  {
    v246 = llvm::Attribute::get(v5, 22, 0);
    v247 = llvm::Attribute::get(v5, 25, 0);
    v29 = &v246;
    v30 = 2;
  }
  else
  {
    v29 = 0;
    v30 = 0;
  }
  v31 = llvm::AttributeSet::get(v5, v29, v30);
  if (byte_1ED805888)
  {
    v246 = llvm::Attribute::get(v5, 19, 0);
    v32 = &v246;
    v33 = 1;
  }
  else
  {
    v32 = 0;
    v33 = 0;
  }
  v34 = llvm::AttributeSet::get(v5, v32, v33);
  switch(a2)
  {
    case 0:
    case 2:
    case 3:
    case 7:
    case 56:
    case 57:
    case 92:
    case 93:
    case 96:
    case 97:
    case 105:
    case 117:
    case 120:
    case 166:
    case 167:
      v40 = v5;
      v41 = v239;
      goto LABEL_38;
    case 1:
    case 8:
    case 9:
    case 10:
    case 43:
    case 44:
    case 45:
    case 46:
    case 62:
    case 67:
    case 80:
    case 81:
    case 82:
    case 83:
    case 113:
    case 152:
    case 153:
      v40 = v5;
      v41 = v236;
      goto LABEL_38;
    case 4:
      v40 = v5;
      v41 = v238;
      goto LABEL_38;
    case 6:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v25);
      v52 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v52);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i = 0; i != 3; ++i)
      {
        v54 = &v260[i];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = v241;
        v55 = llvm::AttributeSet::addAttributes(v54, v5, *(unint64_t *)((char *)&v246 + i * 8));
        v260[i] = v55;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 11:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v237);
      v56 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v56);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (j = 0; j != 5; ++j)
      {
        v58 = &v260[j];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = v241;
        v249 = llvm::AttributeSet::get(v5, 0, 0);
        v250 = v241;
        v59 = llvm::AttributeSet::addAttributes(v58, v5, *(unint64_t *)((char *)&v246 + j * 8));
        v260[j] = v59;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 35:
    case 36:
    case 37:
      v35 = v5;
      v36 = v238;
      goto LABEL_26;
    case 22:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v60 = llvm::AttributeSet::get(v5, 0, 0);
      v61 = 0;
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v60);
      v49 = v242;
      while (1)
      {
        v246 = llvm::Attribute::get(v5, 22, 0);
        v247 = llvm::Attribute::get(v5, 66, 0);
        llvm::AttributeSet::get(v5, &v246, 2);
        v258 = llvm::Attribute::get(v5, 22, 0);
        v259 = llvm::Attribute::get(v5, 66, 0);
        llvm::AttributeSet::get(v5, &v258, 2);
        if (v61 == 2)
          break;
        v62 = &v260[v61];
        v258 = llvm::Attribute::get(v5, 22, 0);
        v259 = llvm::Attribute::get(v5, 66, 0);
        v246 = llvm::AttributeSet::get(v5, &v258, 2);
        v257[0] = llvm::Attribute::get(v5, 22, 0);
        v257[1] = llvm::Attribute::get(v5, 66, 0);
        v247 = llvm::AttributeSet::get(v5, v257, 2);
        v63 = llvm::AttributeSet::addAttributes(v62, v5, *(unint64_t *)((char *)&v246 + v61 * 8));
        v260[v61++] = v63;
      }
      goto LABEL_180;
    case 34:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v64 = llvm::AttributeSet::get(v5, 0, 0);
      v65 = 0;
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v64);
      v49 = v242;
      while (1)
      {
        llvm::AttributeSet::get(v5, 0, 0);
        v246 = llvm::Attribute::get(v5, 22, 0);
        v247 = llvm::Attribute::get(v5, 66, 0);
        llvm::AttributeSet::get(v5, &v246, 2);
        if (v65 == 2)
          break;
        v66 = &v260[v65];
        v246 = llvm::AttributeSet::get(v5, 0, 0);
        v258 = llvm::Attribute::get(v5, 22, 0);
        v259 = llvm::Attribute::get(v5, 66, 0);
        v247 = llvm::AttributeSet::get(v5, &v258, 2);
        v67 = llvm::AttributeSet::addAttributes(v66, v5, *(unint64_t *)((char *)&v246 + v65 * 8));
        v260[v65++] = v67;
      }
      goto LABEL_180;
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 129:
      v35 = v5;
      v36 = v235;
      goto LABEL_26;
    case 47:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v239);
      v68 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v68);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (k = 0; k != 3; ++k)
      {
        v70 = &v260[k];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v71 = llvm::AttributeSet::addAttributes(v70, v5, *(unint64_t *)((char *)&v246 + k * 8));
        v260[k] = v71;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 48:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v239);
      v72 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v72);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (m = 0; m != 4; ++m)
      {
        v74 = &v260[m];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = llvm::AttributeSet::get(v5, 0, 0);
        v75 = llvm::AttributeSet::addAttributes(v74, v5, *(unint64_t *)((char *)&v246 + m * 8));
        v260[m] = v75;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 49:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v239);
      v76 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v76);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (n = 0; n != 3; ++n)
      {
        v78 = &v260[n];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v79 = llvm::AttributeSet::addAttributes(v78, v5, *(unint64_t *)((char *)&v246 + n * 8));
        v260[n] = v79;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 50:
    case 51:
    case 98:
    case 99:
    case 111:
      v40 = v5;
      v41 = v237;
      goto LABEL_38;
    case 52:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v239);
      v80 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v80);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (ii = 0; ii != 6; ++ii)
      {
        v82 = &v260[ii];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = llvm::AttributeSet::get(v5, 0, 0);
        v250 = v241;
        v251 = llvm::AttributeSet::get(v5, 0, 0);
        v83 = llvm::AttributeSet::addAttributes(v82, v5, *(unint64_t *)((char *)&v246 + ii * 8));
        v260[ii] = v83;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 53:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v239);
      v84 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v84);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (jj = 0; jj != 6; ++jj)
      {
        v86 = &v260[jj];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = llvm::AttributeSet::get(v5, 0, 0);
        v250 = v241;
        v251 = llvm::AttributeSet::get(v5, 0, 0);
        v87 = llvm::AttributeSet::addAttributes(v86, v5, *(unint64_t *)((char *)&v246 + jj * 8));
        v260[jj] = v87;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 54:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v239);
      v88 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v88);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (kk = 0; kk != 3; ++kk)
      {
        v90 = &v260[kk];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v91 = llvm::AttributeSet::addAttributes(v90, v5, *(unint64_t *)((char *)&v246 + kk * 8));
        v260[kk] = v91;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 55:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v239);
      v92 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v92);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (mm = 0; mm != 3; ++mm)
      {
        v94 = &v260[mm];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v95 = llvm::AttributeSet::addAttributes(v94, v5, *(unint64_t *)((char *)&v246 + mm * 8));
        v260[mm] = v95;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 58:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v96 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v96);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (nn = 0; nn != 9; ++nn)
      {
        v98 = &v260[nn];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = v31;
        v250 = v31;
        v251 = v31;
        v252 = v31;
        v253 = llvm::AttributeSet::get(v5, 0, 0);
        v254 = llvm::AttributeSet::get(v5, 0, 0);
        v99 = llvm::AttributeSet::addAttributes(v98, v5, *(unint64_t *)((char *)&v246 + nn * 8));
        v260[nn] = v99;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 59:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v100 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v100);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i1 = 0; i1 != 9; ++i1)
      {
        v102 = &v260[i1];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = v31;
        v250 = v31;
        v251 = v31;
        v252 = v31;
        v253 = llvm::AttributeSet::get(v5, 0, 0);
        v254 = llvm::AttributeSet::get(v5, 0, 0);
        v103 = llvm::AttributeSet::addAttributes(v102, v5, *(unint64_t *)((char *)&v246 + i1 * 8));
        v260[i1] = v103;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 60:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v104 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v104);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i2 = 0; i2 != 9; ++i2)
      {
        v106 = &v260[i2];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = v31;
        v250 = v31;
        v251 = v31;
        v252 = v31;
        v253 = llvm::AttributeSet::get(v5, 0, 0);
        v254 = llvm::AttributeSet::get(v5, 0, 0);
        v107 = llvm::AttributeSet::addAttributes(v106, v5, *(unint64_t *)((char *)&v246 + i2 * 8));
        v260[i2] = v107;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 61:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v108 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v108);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i3 = 0; i3 != 9; ++i3)
      {
        v110 = &v260[i3];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = v31;
        v250 = v31;
        v251 = v31;
        v252 = v31;
        v253 = llvm::AttributeSet::get(v5, 0, 0);
        v254 = llvm::AttributeSet::get(v5, 0, 0);
        v111 = llvm::AttributeSet::addAttributes(v110, v5, *(unint64_t *)((char *)&v246 + i3 * 8));
        v260[i3] = v111;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 63:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v112 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v112);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i4 = 0; i4 != 9; ++i4)
      {
        v114 = &v260[i4];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = v31;
        v250 = v31;
        v251 = v31;
        v252 = v31;
        v253 = llvm::AttributeSet::get(v5, 0, 0);
        v254 = llvm::AttributeSet::get(v5, 0, 0);
        v115 = llvm::AttributeSet::addAttributes(v114, v5, *(unint64_t *)((char *)&v246 + i4 * 8));
        v260[i4] = v115;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 64:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v116 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v116);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i5 = 0; i5 != 9; ++i5)
      {
        v118 = &v260[i5];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = v31;
        v250 = v31;
        v251 = v31;
        v252 = v31;
        v253 = llvm::AttributeSet::get(v5, 0, 0);
        v254 = llvm::AttributeSet::get(v5, 0, 0);
        v119 = llvm::AttributeSet::addAttributes(v118, v5, *(unint64_t *)((char *)&v246 + i5 * 8));
        v260[i5] = v119;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 65:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v120 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v120);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i6 = 0; i6 != 9; ++i6)
      {
        v122 = &v260[i6];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = v31;
        v250 = v31;
        v251 = v31;
        v252 = v31;
        v253 = llvm::AttributeSet::get(v5, 0, 0);
        v254 = llvm::AttributeSet::get(v5, 0, 0);
        v123 = llvm::AttributeSet::addAttributes(v122, v5, *(unint64_t *)((char *)&v246 + i6 * 8));
        v260[i6] = v123;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 66:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v124 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v124);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i7 = 0; i7 != 9; ++i7)
      {
        v126 = &v260[i7];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = v31;
        v250 = v31;
        v251 = v31;
        v252 = v31;
        v253 = llvm::AttributeSet::get(v5, 0, 0);
        v254 = llvm::AttributeSet::get(v5, 0, 0);
        v127 = llvm::AttributeSet::addAttributes(v126, v5, *(unint64_t *)((char *)&v246 + i7 * 8));
        v260[i7] = v127;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 68:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v128 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v128);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i8 = 0; i8 != 4; ++i8)
      {
        v130 = &v260[i8];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = v31;
        v131 = llvm::AttributeSet::addAttributes(v130, v5, *(unint64_t *)((char *)&v246 + i8 * 8));
        v260[i8] = v131;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 69:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v132 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v132);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i9 = 0; i9 != 4; ++i9)
      {
        v134 = &v260[i9];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = v31;
        v135 = llvm::AttributeSet::addAttributes(v134, v5, *(unint64_t *)((char *)&v246 + i9 * 8));
        v260[i9] = v135;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 70:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v136 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v136);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i10 = 0; i10 != 4; ++i10)
      {
        v138 = &v260[i10];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = v31;
        v139 = llvm::AttributeSet::addAttributes(v138, v5, *(unint64_t *)((char *)&v246 + i10 * 8));
        v260[i10] = v139;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 71:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v140 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v140);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i11 = 0; i11 != 4; ++i11)
      {
        v142 = &v260[i11];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = v31;
        v143 = llvm::AttributeSet::addAttributes(v142, v5, *(unint64_t *)((char *)&v246 + i11 * 8));
        v260[i11] = v143;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 72:
    case 73:
    case 74:
    case 75:
      v40 = v5;
      v41 = v240;
LABEL_38:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v40, v41);
      v42 = llvm::AttributeSet::get(v5, 0, 0);
      v43 = v5;
      goto LABEL_39;
    case 76:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v144 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v144);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i12 = 0; i12 != 6; ++i12)
      {
        v146 = &v260[i12];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = v31;
        v249 = v31;
        v250 = v31;
        v251 = v31;
        v147 = llvm::AttributeSet::addAttributes(v146, v5, *(unint64_t *)((char *)&v246 + i12 * 8));
        v260[i12] = v147;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 77:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v148 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v148);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i13 = 0; i13 != 6; ++i13)
      {
        v150 = &v260[i13];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = v31;
        v249 = v31;
        v250 = v31;
        v251 = v31;
        v151 = llvm::AttributeSet::addAttributes(v150, v5, *(unint64_t *)((char *)&v246 + i13 * 8));
        v260[i13] = v151;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 78:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v152 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v152);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i14 = 0; i14 != 6; ++i14)
      {
        v154 = &v260[i14];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = v31;
        v249 = v31;
        v250 = v31;
        v251 = v31;
        v155 = llvm::AttributeSet::addAttributes(v154, v5, *(unint64_t *)((char *)&v246 + i14 * 8));
        v260[i14] = v155;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 79:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v156 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v156);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i15 = 0; i15 != 6; ++i15)
      {
        v158 = &v260[i15];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = v31;
        v249 = v31;
        v250 = v31;
        v251 = v31;
        v159 = llvm::AttributeSet::addAttributes(v158, v5, *(unint64_t *)((char *)&v246 + i15 * 8));
        v260[i15] = v159;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 84:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v160 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v160);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i16 = 0; i16 != 6; ++i16)
      {
        v162 = &v260[i16];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = v31;
        v249 = v31;
        v250 = v31;
        v251 = v31;
        v163 = llvm::AttributeSet::addAttributes(v162, v5, *(unint64_t *)((char *)&v246 + i16 * 8));
        v260[i16] = v163;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 85:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v164 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v164);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i17 = 0; i17 != 6; ++i17)
      {
        v166 = &v260[i17];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = v31;
        v249 = v31;
        v250 = v31;
        v251 = v31;
        v167 = llvm::AttributeSet::addAttributes(v166, v5, *(unint64_t *)((char *)&v246 + i17 * 8));
        v260[i17] = v167;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 86:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v168 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v168);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i18 = 0; i18 != 6; ++i18)
      {
        v170 = &v260[i18];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = v31;
        v249 = v31;
        v250 = v31;
        v251 = v31;
        v171 = llvm::AttributeSet::addAttributes(v170, v5, *(unint64_t *)((char *)&v246 + i18 * 8));
        v260[i18] = v171;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 87:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v172 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v172);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i19 = 0; i19 != 6; ++i19)
      {
        v174 = &v260[i19];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = v31;
        v249 = v31;
        v250 = v31;
        v251 = v31;
        v175 = llvm::AttributeSet::addAttributes(v174, v5, *(unint64_t *)((char *)&v246 + i19 * 8));
        v260[i19] = v175;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 88:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v176 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v176);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i20 = 0; i20 != 8; ++i20)
      {
        v178 = &v260[i20];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = v31;
        v250 = v31;
        v251 = v31;
        v252 = v31;
        v253 = v31;
        v179 = llvm::AttributeSet::addAttributes(v178, v5, *(unint64_t *)((char *)&v246 + i20 * 8));
        v260[i20] = v179;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 89:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v180 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v180);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i21 = 0; i21 != 8; ++i21)
      {
        v182 = &v260[i21];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = v31;
        v250 = v31;
        v251 = v31;
        v252 = v31;
        v253 = v31;
        v183 = llvm::AttributeSet::addAttributes(v182, v5, *(unint64_t *)((char *)&v246 + i21 * 8));
        v260[i21] = v183;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 90:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v184 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v184);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i22 = 0; i22 != 8; ++i22)
      {
        v186 = &v260[i22];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = v31;
        v250 = v31;
        v251 = v31;
        v252 = v31;
        v253 = v31;
        v187 = llvm::AttributeSet::addAttributes(v186, v5, *(unint64_t *)((char *)&v246 + i22 * 8));
        v260[i22] = v187;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 91:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      v188 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v188);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i23 = 0; i23 != 8; ++i23)
      {
        v190 = &v260[i23];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = v31;
        v250 = v31;
        v251 = v31;
        v252 = v31;
        v253 = v31;
        v191 = llvm::AttributeSet::addAttributes(v190, v5, *(unint64_t *)((char *)&v246 + i23 * 8));
        v260[i23] = v191;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 94:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v237);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v34);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i24 = 0; i24 != 6; ++i24)
      {
        v193 = &v260[i24];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = llvm::AttributeSet::get(v5, 0, 0);
        v250 = llvm::AttributeSet::get(v5, 0, 0);
        v251 = v241;
        v194 = llvm::AttributeSet::addAttributes(v193, v5, *(unint64_t *)((char *)&v246 + i24 * 8));
        v260[i24] = v194;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 95:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v237);
      v195 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v195);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i25 = 0; i25 != 3; ++i25)
      {
        v197 = &v260[i25];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v198 = llvm::AttributeSet::addAttributes(v197, v5, *(unint64_t *)((char *)&v246 + i25 * 8));
        v260[i25] = v198;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 100:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v237);
      v199 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v199);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i26 = 0; i26 != 7; ++i26)
      {
        v201 = &v260[i26];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = llvm::AttributeSet::get(v5, 0, 0);
        v250 = v241;
        v251 = llvm::AttributeSet::get(v5, 0, 0);
        v252 = v241;
        v202 = llvm::AttributeSet::addAttributes(v201, v5, *(unint64_t *)((char *)&v246 + i26 * 8));
        v260[i26] = v202;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 101:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v237);
      v203 = llvm::AttributeSet::get(v5, 0, 0);
      v204 = 0;
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v203);
      while (1)
      {
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        if (v204 == 11)
          break;
        v205 = &v260[v204];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = llvm::AttributeSet::get(v5, 0, 0);
        v250 = v31;
        v251 = v31;
        v252 = llvm::AttributeSet::get(v5, 0, 0);
        v253 = llvm::AttributeSet::get(v5, 0, 0);
        v254 = llvm::AttributeSet::get(v5, 0, 0);
        v255 = llvm::AttributeSet::get(v5, 0, 0);
        v256 = llvm::AttributeSet::get(v5, 0, 0);
        v206 = llvm::AttributeSet::addAttributes(v205, v5, *(unint64_t *)((char *)&v246 + v204 * 8));
        v260[v204++] = v206;
      }
      goto LABEL_41;
    case 102:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v237);
      v207 = 0;
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v34);
      v49 = v242;
      while (1)
      {
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        if (v207 == 7)
          break;
        v208 = &v260[v207];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = llvm::AttributeSet::get(v5, 0, 0);
        v250 = llvm::AttributeSet::get(v5, 0, 0);
        v251 = v241;
        v252 = llvm::AttributeSet::get(v5, 0, 0);
        v209 = llvm::AttributeSet::addAttributes(v208, v5, *(unint64_t *)((char *)&v246 + v207 * 8));
        v260[v207++] = v209;
      }
LABEL_180:
      v39 = *(_QWORD *)v243;
      v48 = v261;
      goto LABEL_43;
    case 103:
    case 115:
    case 145:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v237);
      v43 = v5;
      v42 = v34;
LABEL_39:
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v43, v42);
      v44 = v260;
      v45 = v5;
      v46 = v241;
      goto LABEL_40;
    case 104:
    case 109:
      v35 = v5;
      v36 = v237;
      goto LABEL_26;
    case 106:
    case 107:
    case 108:
    case 121:
    case 122:
    case 127:
      v50 = v5;
      v51 = v237;
      goto LABEL_51;
    case 110:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v239);
      v210 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v210);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i27 = 0; i27 != 4; ++i27)
      {
        v212 = &v260[i27];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = v241;
        v213 = llvm::AttributeSet::addAttributes(v212, v5, *(unint64_t *)((char *)&v246 + i27 * 8));
        v260[i27] = v213;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 112:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v25);
      v214 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v214);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i28 = 0; i28 != 3; ++i28)
      {
        v216 = &v260[i28];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = v241;
        v217 = llvm::AttributeSet::addAttributes(v216, v5, *(unint64_t *)((char *)&v246 + i28 * 8));
        v260[i28] = v217;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 114:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v237);
      v218 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v218);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i29 = 0; i29 != 4; ++i29)
      {
        v220 = &v260[i29];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = llvm::AttributeSet::get(v5, 0, 0);
        v249 = v241;
        v221 = llvm::AttributeSet::addAttributes(v220, v5, *(unint64_t *)((char *)&v246 + i29 * 8));
        v260[i29] = v221;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 116:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v237);
      v222 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v222);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i30 = 0; i30 != 5; ++i30)
      {
        v224 = &v260[i30];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = v241;
        v249 = v241;
        v250 = v241;
        v225 = llvm::AttributeSet::addAttributes(v224, v5, *(unint64_t *)((char *)&v246 + i30 * 8));
        v260[i30] = v225;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 118:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v239);
      v226 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v226);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i31 = 0; i31 != 3; ++i31)
      {
        v228 = &v260[i31];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = v241;
        v229 = llvm::AttributeSet::addAttributes(v228, v5, *(unint64_t *)((char *)&v246 + i31 * 8));
        v260[i31] = v229;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 119:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v239);
      v230 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v230);
      llvm::AttributeSet::get(v5, 0, 0);
      for (i32 = 0; i32 != 3; ++i32)
      {
        v232 = &v260[i32];
        v246 = v241;
        v247 = llvm::AttributeSet::get(v5, 0, 0);
        v248 = v241;
        v233 = llvm::AttributeSet::addAttributes(v232, v5, *(unint64_t *)((char *)&v246 + i32 * 8));
        v260[i32] = v233;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_41;
    case 123:
    case 128:
      v35 = v5;
      v36 = v24;
      goto LABEL_26;
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
      v35 = v5;
      v36 = v25;
      goto LABEL_26;
    case 149:
      v35 = v5;
      v36 = v21;
      goto LABEL_26;
    case 159:
      v246 = llvm::Attribute::get(v5, 37, 0);
      v247 = llvm::Attribute::get(v5, 35, 0);
      LOBYTE(v258) = 0;
      BYTE4(v258) = 0;
      v248 = llvm::Attribute::getWithAllocSizeArgs(v5, 0, (unsigned int *)&v258);
      v51 = llvm::AttributeSet::get(v5, &v246, 3);
      v50 = v5;
LABEL_51:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v50, v51);
      v38 = v5;
      v37 = v34;
      goto LABEL_27;
    case 160:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v28);
      v234 = llvm::AttributeSet::get(v5, 0, 0);
      *(_QWORD *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v234);
      v44 = v260;
      v45 = v5;
      v46 = v20;
LABEL_40:
      v47 = llvm::AttributeSet::addAttributes(v44, v45, v46);
      *v260 = v47;
LABEL_41:
      v39 = *(_QWORD *)v243;
      goto LABEL_42;
    case 168:
    case 169:
      v35 = v5;
      v36 = v239;
LABEL_26:
      *(_QWORD *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v35, v36);
      v37 = llvm::AttributeSet::get(v5, 0, 0);
      v38 = v5;
LABEL_27:
      v39 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v38, v37);
      *(_QWORD *)v243 = v39;
LABEL_42:
      v48 = v261;
      v49 = v242;
LABEL_43:
      *(_QWORD *)(v49 + 112) = llvm::AttributeList::get(v5, *(uint64_t *)v244, v39, v260, v48);
      break;
    default:
      break;
  }
  if (v260 != v262)
    free(v260);
}

llvm::PointerType *llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(uint64_t Function, uint64_t a2, int a3)
{
  uint64_t **v5;
  uint64_t v6;
  llvm::PointerType *v7;
  char *v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t **v33;
  uint64_t **v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t **v37;
  uint64_t v38;
  uint64_t **v39;
  uint64_t v40;
  uint64_t **v41;
  uint64_t v42;
  uint64_t **v43;
  uint64_t v44;
  uint64_t **v45;
  uint64_t v46;
  uint64_t **v47;
  uint64_t **v48;
  uint64_t v49;
  uint64_t **v50;
  uint64_t v51;
  uint64_t **v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t v55;
  uint64_t **v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t v59;
  uint64_t **v60;
  uint64_t **v61;
  uint64_t v62;
  uint64_t **v63;
  uint64_t **v64;
  uint64_t v65;
  uint64_t **v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t **v69;
  uint64_t **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t **v73;
  uint64_t **v74;
  uint64_t v75;
  uint64_t **v76;
  uint64_t **v77;
  uint64_t v78;
  uint64_t **v79;
  uint64_t **v80;
  uint64_t v81;
  uint64_t **v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t **v85;
  uint64_t **v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t **v89;
  uint64_t **v90;
  uint64_t v91;
  uint64_t **v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t **v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t **v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t **v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t **v104;
  uint64_t v105;
  uint64_t **v106;
  uint64_t v107;
  uint64_t **v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t **v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t **v114;
  uint64_t **v115;
  uint64_t **v116;
  uint64_t v117;
  uint64_t **v118;
  uint64_t v119;
  uint64_t **v120;
  uint64_t v121;
  uint64_t **v122;
  uint64_t v123;
  uint64_t **v124;
  uint64_t v125;
  uint64_t **v126;
  uint64_t v127;
  uint64_t **v128;
  uint64_t v129;
  uint64_t **v130;
  uint64_t v131;
  uint64_t **v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t **v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t **v138;
  uint64_t **v139;
  uint64_t v140;
  uint64_t **v141;
  uint64_t **v142;
  uint64_t v143;
  uint64_t **v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t **v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t **v150;
  uint64_t **v151;
  uint64_t v152;
  uint64_t **v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t **v157;
  uint64_t **v158;
  uint64_t v159;
  uint64_t **v160;
  uint64_t v161;
  uint64_t **v162;
  uint64_t v163;
  uint64_t **v164;
  uint64_t v165;
  uint64_t **v166;
  uint64_t **v167;
  uint64_t **v168;
  uint64_t **v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t **v173;
  uint64_t v174;
  uint64_t **v175;
  uint64_t **v176;
  uint64_t v177;
  uint64_t **v178;
  uint64_t **v179;
  uint64_t v180;
  uint64_t **v181;
  uint64_t **v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t **v185;
  uint64_t **v186;
  uint64_t v187;
  uint64_t **v188;
  uint64_t v189;
  uint64_t **v190;
  uint64_t v191;
  uint64_t **v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t **v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t **v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t **v201;
  uint64_t v202;
  uint64_t **v203;
  uint64_t v204;
  uint64_t **v205;
  uint64_t v206;
  uint64_t **v207;
  uint64_t v208;
  uint64_t **v209;
  uint64_t v210;
  uint64_t **v211;
  uint64_t v212;
  uint64_t **v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t **v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t **v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t **v222;
  uint64_t **v223;
  uint64_t v224;
  uint64_t **v225;
  uint64_t v226;
  uint64_t **v227;
  uint64_t v228;
  uint64_t **v229;
  uint64_t v230;
  uint64_t **v231;
  uint64_t v232;
  uint64_t **v233;
  uint64_t v234;
  uint64_t **v235;
  uint64_t **v236;
  uint64_t v237;
  uint64_t **v238;
  uint64_t v239;
  uint64_t **v240;
  uint64_t v241;
  uint64_t **v242;
  uint64_t v243;
  uint64_t **v244;
  uint64_t v245;
  uint64_t **v246;
  uint64_t v247;
  uint64_t **v248;
  uint64_t **v249;
  uint64_t v250;
  uint64_t **v251;
  uint64_t v252;
  uint64_t **v253;
  uint64_t v254;
  uint64_t **v255;
  uint64_t v256;
  uint64_t **v257;
  uint64_t v258;
  uint64_t **v259;
  uint64_t v260;
  uint64_t **v261;
  uint64_t v262;
  uint64_t **v263;
  uint64_t v264;
  uint64_t **v265;
  uint64_t v266;
  uint64_t **v267;
  uint64_t **v268;
  uint64_t v269;
  uint64_t **v270;
  uint64_t v271;
  uint64_t **v272;
  int8x16_t v273;
  uint64_t **v274;
  uint64_t **v275;
  uint64_t **v276;
  uint64_t v277;
  __int128 v278;
  uint64_t **v279;
  uint64_t **v280;
  uint64_t v281;
  uint64_t **v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t **v285;
  uint64_t v286;
  uint64_t **v287;
  uint64_t **v288;
  uint64_t **v289;
  uint64_t v290;
  uint64_t *v291;
  llvm::Constant *v292;
  uint64_t **v294;
  uint64_t **v295;
  uint64_t v296;
  uint64_t **v297;
  uint64_t v298;
  uint64_t **v299;
  uint64_t **v300;
  uint64_t v301;
  uint64_t **v302;
  uint64_t v303;
  uint64_t **v304;
  uint64_t **v305;
  const char *v306;
  const char *v307;
  uint64_t *v308;
  llvm::MDNode *Impl;
  uint64_t v310;
  uint64_t CallbackEncoding;
  uint64_t **v312;
  _BYTE v313[32];
  _BYTE v314[24];
  uint64_t **v315;
  uint64_t **v316;
  uint64_t **v317;
  uint64_t **v318;
  uint64_t **v319;
  uint64_t v320;
  uint64_t **v321;
  uint64_t v322;
  uint64_t v323;

  v323 = *MEMORY[0x1E0C80C00];
  switch(a3)
  {
    case 0:
      v5 = *(uint64_t ***)(Function + 2088);
      v6 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v6;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v5, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_barrier";
      goto LABEL_59;
    case 1:
      v9 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v9;
      *(_QWORD *)&v313[8] = v9;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v9, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_cancel";
      goto LABEL_96;
    case 2:
      v10 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v10;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v10, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_cancel_barrier";
      goto LABEL_186;
    case 3:
      v11 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2240);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v11, (uint64_t *)&v312, 1, 0);
      v8 = "__kmpc_flush";
      goto LABEL_128;
    case 4:
      v12 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v12, (uint64_t *)&v312, 1, 0);
      v8 = "__kmpc_global_thread_num";
      goto LABEL_188;
    case 5:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      v8 = "__kmpc_get_hardware_thread_id_in_block";
      goto LABEL_168;
    case 6:
      v13 = *(uint64_t ***)(Function + 2088);
      v14 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v14;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2272);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v13, (uint64_t *)&v312, 3, 1);
      v8 = "__kmpc_fork_call";
      goto LABEL_102;
    case 7:
      v15 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v15;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v15, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_omp_taskwait";
      goto LABEL_177;
    case 8:
      v16 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v16;
      *(_QWORD *)&v313[8] = v16;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v16, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_omp_taskyield";
      goto LABEL_173;
    case 9:
      v17 = *(uint64_t ***)(Function + 2088);
      v18 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v18;
      *(_QWORD *)&v313[8] = v18;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v17, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_push_num_threads";
      goto LABEL_144;
    case 10:
      v19 = *(uint64_t ***)(Function + 2088);
      v20 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v20;
      *(_QWORD *)&v313[8] = v20;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v19, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_push_proc_bind";
      goto LABEL_186;
    case 11:
      v21 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v21;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2176);
      *(_OWORD *)&v313[16] = __PAIR128__(*(unint64_t *)&v313[8], (unint64_t)v21);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v21, (uint64_t *)&v312, 5, 0);
      v8 = "__kmpc_omp_reg_task_with_affinity";
      goto LABEL_112;
    case 12:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      v8 = "__kmpc_get_hardware_num_blocks";
      goto LABEL_194;
    case 13:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      v8 = "__kmpc_get_hardware_num_threads_in_block";
      v22 = a2;
      v23 = 40;
      goto LABEL_174;
    case 14:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      v8 = "__kmpc_get_warp_size";
      goto LABEL_173;
    case 15:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      v8 = "omp_get_thread_num";
      goto LABEL_179;
    case 16:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      v8 = "omp_get_num_threads";
      goto LABEL_177;
    case 17:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      v8 = "omp_get_max_threads";
      goto LABEL_177;
    case 18:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      v8 = "omp_in_parallel";
      goto LABEL_196;
    case 19:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      v8 = "omp_get_dynamic";
      goto LABEL_196;
    case 20:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      v8 = "omp_get_cancellation";
      goto LABEL_173;
    case 21:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      v8 = "omp_get_nested";
      goto LABEL_59;
    case 22:
      v24 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2152);
      *(_QWORD *)v313 = v312;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v24, (uint64_t *)&v312, 2, 0);
      v8 = "omp_get_schedule";
      goto LABEL_102;
    case 23:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      v8 = "omp_get_thread_limit";
      goto LABEL_173;
    case 24:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      v8 = "omp_get_supported_active_levels";
      goto LABEL_152;
    case 25:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      v8 = "omp_get_max_active_levels";
      goto LABEL_141;
    case 26:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      v8 = "omp_get_level";
      goto LABEL_96;
    case 27:
      v312 = *(uint64_t ***)(Function + 2120);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v312, (uint64_t *)&v312, 1, 0);
      v8 = "omp_get_ancestor_thread_num";
      goto LABEL_184;
    case 28:
      v312 = *(uint64_t ***)(Function + 2120);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v312, (uint64_t *)&v312, 1, 0);
      v8 = "omp_get_team_size";
      goto LABEL_134;
    case 29:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      v8 = "omp_get_active_level";
      goto LABEL_173;
    case 30:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      v8 = "omp_in_final";
      goto LABEL_128;
    case 31:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      v8 = "omp_get_proc_bind";
      goto LABEL_134;
    case 32:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      v8 = "omp_get_num_places";
      goto LABEL_179;
    case 33:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      v8 = "omp_get_num_procs";
      goto LABEL_134;
    case 34:
      v25 = *(uint64_t ***)(Function + 2088);
      v26 = *(_QWORD *)(Function + 2152);
      v312 = *(uint64_t ***)(Function + 2120);
      *(_QWORD *)v313 = v26;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v25, (uint64_t *)&v312, 2, 0);
      v8 = "omp_get_place_proc_ids";
      goto LABEL_162;
    case 35:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      v8 = "omp_get_place_num";
      goto LABEL_134;
    case 36:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      v8 = "omp_get_partition_num_places";
      goto LABEL_182;
    case 37:
      v27 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2152);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v27, (uint64_t *)&v312, 1, 0);
      v8 = "omp_get_partition_place_nums";
      goto LABEL_182;
    case 38:
      v28 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2120);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v28, (uint64_t *)&v312, 1, 0);
      v8 = "omp_set_num_threads";
      goto LABEL_177;
    case 39:
      v29 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2120);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v29, (uint64_t *)&v312, 1, 0);
      v8 = "omp_set_dynamic";
      goto LABEL_196;
    case 40:
      v30 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2120);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v30, (uint64_t *)&v312, 1, 0);
      v8 = "omp_set_nested";
      goto LABEL_59;
    case 41:
      v31 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2120);
      *(_QWORD *)v313 = v312;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v31, (uint64_t *)&v312, 2, 0);
      v8 = "omp_set_schedule";
      goto LABEL_102;
    case 42:
      v32 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2120);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v32, (uint64_t *)&v312, 1, 0);
      v8 = "omp_set_max_active_levels";
      goto LABEL_141;
    case 43:
      v33 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v33;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v33, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_master";
      goto LABEL_96;
    case 44:
      v34 = *(uint64_t ***)(Function + 2088);
      v35 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v35;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v34, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_end_master";
      goto LABEL_134;
    case 45:
      v36 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v36;
      *(_QWORD *)&v313[8] = v36;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v36, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_masked";
      goto LABEL_96;
    case 46:
      v37 = *(uint64_t ***)(Function + 2088);
      v38 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v38;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v37, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_end_masked";
      goto LABEL_134;
    case 47:
      v39 = *(uint64_t ***)(Function + 2088);
      v40 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v40;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2224);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v39, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_critical";
      goto LABEL_196;
    case 48:
      v41 = *(uint64_t ***)(Function + 2088);
      v42 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v42;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2224);
      *(_QWORD *)&v313[16] = v42;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v41, (uint64_t *)&v312, 4, 0);
      v8 = "__kmpc_critical_with_hint";
      goto LABEL_141;
    case 49:
      v43 = *(uint64_t ***)(Function + 2088);
      v44 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v44;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2224);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v43, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_end_critical";
      goto LABEL_177;
    case 50:
      v45 = *(uint64_t ***)(Function + 2088);
      v46 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v46;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v45, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_begin";
      goto LABEL_128;
    case 51:
      v47 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2240);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v47, (uint64_t *)&v312, 1, 0);
      v8 = "__kmpc_end";
      v22 = a2;
      v23 = 10;
      goto LABEL_174;
    case 52:
      v48 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v48;
      *(_QWORD *)&v313[8] = v48;
      *(_OWORD *)&v313[16] = *(_OWORD *)(Function + 2168);
      v49 = *(_QWORD *)(Function + 2224);
      *(_QWORD *)v314 = *(_QWORD *)(Function + 2288);
      *(_QWORD *)&v314[8] = v49;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v48, (uint64_t *)&v312, 7, 0);
      v8 = "__kmpc_reduce";
      goto LABEL_96;
    case 53:
      v50 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v50;
      *(_QWORD *)&v313[8] = v50;
      *(_OWORD *)&v313[16] = *(_OWORD *)(Function + 2168);
      v51 = *(_QWORD *)(Function + 2224);
      *(_QWORD *)v314 = *(_QWORD *)(Function + 2288);
      *(_QWORD *)&v314[8] = v51;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v50, (uint64_t *)&v312, 7, 0);
      v8 = "__kmpc_reduce_nowait";
      goto LABEL_173;
    case 54:
      v52 = *(uint64_t ***)(Function + 2088);
      v53 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v53;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2224);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v52, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_end_reduce";
      goto LABEL_134;
    case 55:
      v54 = *(uint64_t ***)(Function + 2088);
      v55 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v55;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2224);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v54, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_end_reduce_nowait";
      goto LABEL_188;
    case 56:
      v56 = *(uint64_t ***)(Function + 2088);
      v57 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v57;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v56, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_ordered";
LABEL_59:
      v22 = a2;
      v23 = 14;
      goto LABEL_174;
    case 57:
      v58 = *(uint64_t ***)(Function + 2088);
      v59 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v59;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v58, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_end_ordered";
      goto LABEL_179;
    case 58:
      v60 = *(uint64_t ***)(Function + 2088);
      v61 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v61;
      v62 = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[8] = v61;
      *(_QWORD *)&v313[16] = v62;
      *(_QWORD *)&v313[24] = v62;
      *(_QWORD *)v314 = v62;
      *(_QWORD *)&v314[8] = v62;
      *(_QWORD *)&v314[16] = v61;
      v315 = v61;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v60, (uint64_t *)&v312, 9, 0);
      v8 = "__kmpc_for_static_init_4";
      goto LABEL_188;
    case 59:
      v63 = *(uint64_t ***)(Function + 2088);
      v64 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v64;
      v65 = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[8] = v64;
      *(_QWORD *)&v313[16] = v65;
      *(_QWORD *)&v313[24] = v65;
      *(_QWORD *)v314 = v65;
      *(_QWORD *)&v314[8] = v65;
      *(_QWORD *)&v314[16] = v64;
      v315 = v64;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v63, (uint64_t *)&v312, 9, 0);
      v8 = "__kmpc_for_static_init_4u";
      goto LABEL_141;
    case 60:
      v66 = *(uint64_t ***)(Function + 2088);
      v67 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v67;
      v68 = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[8] = v67;
      *(_QWORD *)&v313[16] = v68;
      *(_QWORD *)&v313[24] = *(_QWORD *)(Function + 2160);
      *(_QWORD *)v314 = *(_QWORD *)&v313[24];
      v69 = *(uint64_t ***)(Function + 2128);
      *(_QWORD *)&v314[8] = *(_QWORD *)&v313[24];
      *(_QWORD *)&v314[16] = v69;
      v315 = v69;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v66, (uint64_t *)&v312, 9, 0);
      v8 = "__kmpc_for_static_init_8";
      goto LABEL_188;
    case 61:
      v70 = *(uint64_t ***)(Function + 2088);
      v71 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v71;
      v72 = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[8] = v71;
      *(_QWORD *)&v313[16] = v72;
      *(_QWORD *)&v313[24] = *(_QWORD *)(Function + 2160);
      *(_QWORD *)v314 = *(_QWORD *)&v313[24];
      v73 = *(uint64_t ***)(Function + 2128);
      *(_QWORD *)&v314[8] = *(_QWORD *)&v313[24];
      *(_QWORD *)&v314[16] = v73;
      v315 = v73;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v70, (uint64_t *)&v312, 9, 0);
      v8 = "__kmpc_for_static_init_8u";
      goto LABEL_141;
    case 62:
      v74 = *(uint64_t ***)(Function + 2088);
      v75 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v75;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v74, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_for_static_fini";
      goto LABEL_162;
    case 63:
      v76 = *(uint64_t ***)(Function + 2088);
      v77 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v77;
      v78 = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[8] = v77;
      *(_QWORD *)&v313[16] = v78;
      *(_QWORD *)&v313[24] = v78;
      *(_QWORD *)v314 = v78;
      *(_QWORD *)&v314[8] = v78;
      *(_QWORD *)&v314[16] = v77;
      v315 = v77;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v76, (uint64_t *)&v312, 9, 0);
      v8 = "__kmpc_distribute_static_init_4";
      goto LABEL_152;
    case 64:
      v79 = *(uint64_t ***)(Function + 2088);
      v80 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v80;
      v81 = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[8] = v80;
      *(_QWORD *)&v313[16] = v81;
      *(_QWORD *)&v313[24] = v81;
      *(_QWORD *)v314 = v81;
      *(_QWORD *)&v314[8] = v81;
      *(_QWORD *)&v314[16] = v80;
      v315 = v80;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v79, (uint64_t *)&v312, 9, 0);
      v8 = "__kmpc_distribute_static_init_4u";
      goto LABEL_198;
    case 65:
      v82 = *(uint64_t ***)(Function + 2088);
      v83 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v83;
      v84 = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[8] = v83;
      *(_QWORD *)&v313[16] = v84;
      *(_QWORD *)&v313[24] = *(_QWORD *)(Function + 2160);
      *(_QWORD *)v314 = *(_QWORD *)&v313[24];
      v85 = *(uint64_t ***)(Function + 2128);
      *(_QWORD *)&v314[8] = *(_QWORD *)&v313[24];
      *(_QWORD *)&v314[16] = v85;
      v315 = v85;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v82, (uint64_t *)&v312, 9, 0);
      v8 = "__kmpc_distribute_static_init_8";
      goto LABEL_152;
    case 66:
      v86 = *(uint64_t ***)(Function + 2088);
      v87 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v87;
      v88 = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[8] = v87;
      *(_QWORD *)&v313[16] = v88;
      *(_QWORD *)&v313[24] = *(_QWORD *)(Function + 2160);
      *(_QWORD *)v314 = *(_QWORD *)&v313[24];
      v89 = *(uint64_t ***)(Function + 2128);
      *(_QWORD *)&v314[8] = *(_QWORD *)&v313[24];
      *(_QWORD *)&v314[16] = v89;
      v315 = v89;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v86, (uint64_t *)&v312, 9, 0);
      v8 = "__kmpc_distribute_static_init_8u";
      goto LABEL_198;
    case 67:
      v90 = *(uint64_t ***)(Function + 2088);
      v91 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v91;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v90, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_distribute_static_fini";
      goto LABEL_192;
    case 68:
      v92 = *(uint64_t ***)(Function + 2088);
      v93 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v93;
      v94 = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[8] = v93;
      *(_QWORD *)&v313[16] = v94;
      *(_QWORD *)&v313[24] = v93;
      *(_QWORD *)v314 = v93;
      *(_QWORD *)&v314[8] = v93;
      *(_QWORD *)&v314[16] = v93;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v92, (uint64_t *)&v312, 8, 0);
      v8 = "__kmpc_dist_dispatch_init_4";
      goto LABEL_184;
    case 69:
      v95 = *(uint64_t ***)(Function + 2088);
      v96 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v96;
      v97 = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[8] = v96;
      *(_QWORD *)&v313[16] = v97;
      *(_QWORD *)&v313[24] = v96;
      *(_QWORD *)v314 = v96;
      *(_QWORD *)&v314[8] = v96;
      *(_QWORD *)&v314[16] = v96;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v95, (uint64_t *)&v312, 8, 0);
      v8 = "__kmpc_dist_dispatch_init_4u";
      goto LABEL_182;
    case 70:
      v98 = *(uint64_t ***)(Function + 2088);
      v99 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v99;
      v100 = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[8] = v99;
      *(_QWORD *)&v313[16] = v100;
      *(_QWORD *)&v313[24] = *(_QWORD *)(Function + 2128);
      *(_QWORD *)v314 = *(_QWORD *)&v313[24];
      *(_QWORD *)&v314[8] = *(_QWORD *)&v313[24];
      *(_QWORD *)&v314[16] = *(_QWORD *)&v313[24];
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v98, (uint64_t *)&v312, 8, 0);
      v8 = "__kmpc_dist_dispatch_init_8";
      goto LABEL_184;
    case 71:
      v101 = *(uint64_t ***)(Function + 2088);
      v102 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v102;
      v103 = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[8] = v102;
      *(_QWORD *)&v313[16] = v103;
      *(_QWORD *)&v313[24] = *(_QWORD *)(Function + 2128);
      *(_QWORD *)v314 = *(_QWORD *)&v313[24];
      *(_QWORD *)&v314[8] = *(_QWORD *)&v313[24];
      *(_QWORD *)&v314[16] = *(_QWORD *)&v313[24];
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v101, (uint64_t *)&v312, 8, 0);
      v8 = "__kmpc_dist_dispatch_init_8u";
      goto LABEL_182;
    case 72:
      v104 = *(uint64_t ***)(Function + 2088);
      v105 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v105;
      *(_QWORD *)&v313[8] = v105;
      *(_QWORD *)&v313[16] = v105;
      *(_QWORD *)&v313[24] = v105;
      *(_QWORD *)v314 = v105;
      *(_QWORD *)&v314[8] = v105;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v104, (uint64_t *)&v312, 7, 0);
      v8 = "__kmpc_dispatch_init_4";
      goto LABEL_162;
    case 73:
      v106 = *(uint64_t ***)(Function + 2088);
      v107 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v107;
      *(_QWORD *)&v313[8] = v107;
      *(_QWORD *)&v313[16] = v107;
      *(_QWORD *)&v313[24] = v107;
      *(_QWORD *)v314 = v107;
      *(_QWORD *)&v314[8] = v107;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v106, (uint64_t *)&v312, 7, 0);
      v8 = "__kmpc_dispatch_init_4u";
      goto LABEL_144;
    case 74:
      v108 = *(uint64_t ***)(Function + 2088);
      v109 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v109;
      v110 = *(_QWORD *)(Function + 2128);
      *(_QWORD *)&v313[8] = v109;
      *(_QWORD *)&v313[16] = v110;
      *(_QWORD *)&v313[24] = v110;
      *(_QWORD *)v314 = v110;
      *(_QWORD *)&v314[8] = v110;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v108, (uint64_t *)&v312, 7, 0);
      v8 = "__kmpc_dispatch_init_8";
      goto LABEL_162;
    case 75:
      v111 = *(uint64_t ***)(Function + 2088);
      v112 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v112;
      v113 = *(_QWORD *)(Function + 2128);
      *(_QWORD *)&v313[8] = v112;
      *(_QWORD *)&v313[16] = v113;
      *(_QWORD *)&v313[24] = v113;
      *(_QWORD *)v314 = v113;
      *(_QWORD *)&v314[8] = v113;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v111, (uint64_t *)&v312, 7, 0);
      v8 = "__kmpc_dispatch_init_8u";
      goto LABEL_144;
    case 76:
      v114 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v114;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[16] = *(_QWORD *)&v313[8];
      *(_QWORD *)&v313[24] = *(_QWORD *)&v313[8];
      *(_QWORD *)v314 = *(_QWORD *)&v313[8];
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v114, (uint64_t *)&v312, 6, 0);
      v8 = "__kmpc_dispatch_next_4";
      goto LABEL_162;
    case 77:
      v115 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v115;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[16] = *(_QWORD *)&v313[8];
      *(_QWORD *)&v313[24] = *(_QWORD *)&v313[8];
      *(_QWORD *)v314 = *(_QWORD *)&v313[8];
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v115, (uint64_t *)&v312, 6, 0);
      v8 = "__kmpc_dispatch_next_4u";
      goto LABEL_144;
    case 78:
      v116 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v116;
      v117 = *(_QWORD *)(Function + 2160);
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[16] = v117;
      *(_QWORD *)&v313[24] = v117;
      *(_QWORD *)v314 = v117;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v116, (uint64_t *)&v312, 6, 0);
      v8 = "__kmpc_dispatch_next_8";
      goto LABEL_162;
    case 79:
      v118 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v118;
      v119 = *(_QWORD *)(Function + 2160);
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[16] = v119;
      *(_QWORD *)&v313[24] = v119;
      *(_QWORD *)v314 = v119;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v118, (uint64_t *)&v312, 6, 0);
      v8 = "__kmpc_dispatch_next_8u";
      goto LABEL_144;
    case 80:
      v120 = *(uint64_t ***)(Function + 2088);
      v121 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v121;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v120, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_dispatch_fini_4";
      goto LABEL_162;
    case 81:
      v122 = *(uint64_t ***)(Function + 2088);
      v123 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v123;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v122, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_dispatch_fini_4u";
      goto LABEL_144;
    case 82:
      v124 = *(uint64_t ***)(Function + 2088);
      v125 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v125;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v124, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_dispatch_fini_8";
      goto LABEL_162;
    case 83:
      v126 = *(uint64_t ***)(Function + 2088);
      v127 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v127;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v126, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_dispatch_fini_8u";
      goto LABEL_144;
    case 84:
      v128 = *(uint64_t ***)(Function + 2088);
      v129 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v129;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[16] = *(_QWORD *)&v313[8];
      *(_QWORD *)&v313[24] = *(_QWORD *)&v313[8];
      *(_QWORD *)v314 = *(_QWORD *)&v313[8];
      *(_QWORD *)&v314[8] = v129;
      *(_QWORD *)&v314[16] = v129;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v128, (uint64_t *)&v312, 8, 0);
      v8 = "__kmpc_team_static_init_4";
      goto LABEL_141;
    case 85:
      v130 = *(uint64_t ***)(Function + 2088);
      v131 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v131;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[16] = *(_QWORD *)&v313[8];
      *(_QWORD *)&v313[24] = *(_QWORD *)&v313[8];
      *(_QWORD *)v314 = *(_QWORD *)&v313[8];
      *(_QWORD *)&v314[8] = v131;
      *(_QWORD *)&v314[16] = v131;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v130, (uint64_t *)&v312, 8, 0);
      v8 = "__kmpc_team_static_init_4u";
      goto LABEL_190;
    case 86:
      v132 = *(uint64_t ***)(Function + 2088);
      v133 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v133;
      v134 = *(_QWORD *)(Function + 2160);
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[16] = v134;
      *(_QWORD *)&v313[24] = v134;
      *(_QWORD *)v314 = v134;
      *(_QWORD *)&v314[8] = *(_QWORD *)(Function + 2128);
      *(_QWORD *)&v314[16] = *(_QWORD *)&v314[8];
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v132, (uint64_t *)&v312, 8, 0);
      v8 = "__kmpc_team_static_init_8";
      goto LABEL_141;
    case 87:
      v135 = *(uint64_t ***)(Function + 2088);
      v136 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v136;
      v137 = *(_QWORD *)(Function + 2160);
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[16] = v137;
      *(_QWORD *)&v313[24] = v137;
      *(_QWORD *)v314 = v137;
      *(_QWORD *)&v314[8] = *(_QWORD *)(Function + 2128);
      *(_QWORD *)&v314[16] = *(_QWORD *)&v314[8];
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v135, (uint64_t *)&v312, 8, 0);
      v8 = "__kmpc_team_static_init_8u";
      goto LABEL_190;
    case 88:
      v138 = *(uint64_t ***)(Function + 2088);
      v139 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v139;
      v140 = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[8] = v139;
      *(_QWORD *)&v313[16] = v140;
      *(_QWORD *)&v313[24] = v140;
      *(_QWORD *)v314 = v140;
      *(_QWORD *)&v314[8] = v140;
      *(_QWORD *)&v314[16] = v140;
      v315 = v139;
      v316 = v139;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v138, (uint64_t *)&v312, 10, 0);
      v8 = "__kmpc_dist_for_static_init_4";
      goto LABEL_192;
    case 89:
      v141 = *(uint64_t ***)(Function + 2088);
      v142 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v142;
      v143 = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[8] = v142;
      *(_QWORD *)&v313[16] = v143;
      *(_QWORD *)&v313[24] = v143;
      *(_QWORD *)v314 = v143;
      *(_QWORD *)&v314[8] = v143;
      *(_QWORD *)&v314[16] = v143;
      v315 = v142;
      v316 = v142;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v141, (uint64_t *)&v312, 10, 0);
      v8 = "__kmpc_dist_for_static_init_4u";
      goto LABEL_194;
    case 90:
      v144 = *(uint64_t ***)(Function + 2088);
      v145 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v145;
      v146 = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[8] = v145;
      *(_QWORD *)&v313[16] = v146;
      *(_QWORD *)&v313[24] = *(_QWORD *)(Function + 2160);
      *(_QWORD *)v314 = *(_QWORD *)&v313[24];
      *(_QWORD *)&v314[8] = *(_QWORD *)&v313[24];
      *(_QWORD *)&v314[16] = *(_QWORD *)&v313[24];
      v315 = *(uint64_t ***)(Function + 2128);
      v316 = v315;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v144, (uint64_t *)&v312, 10, 0);
      v8 = "__kmpc_dist_for_static_init_8";
      goto LABEL_192;
    case 91:
      v147 = *(uint64_t ***)(Function + 2088);
      v148 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v148;
      v149 = *(_QWORD *)(Function + 2152);
      *(_QWORD *)&v313[8] = v148;
      *(_QWORD *)&v313[16] = v149;
      *(_QWORD *)&v313[24] = *(_QWORD *)(Function + 2160);
      *(_QWORD *)v314 = *(_QWORD *)&v313[24];
      *(_QWORD *)&v314[8] = *(_QWORD *)&v313[24];
      *(_QWORD *)&v314[16] = *(_QWORD *)&v313[24];
      v315 = *(uint64_t ***)(Function + 2128);
      v316 = v315;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v147, (uint64_t *)&v312, 10, 0);
      v8 = "__kmpc_dist_for_static_init_8u";
      goto LABEL_194;
    case 92:
      v150 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v150;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v150, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_single";
LABEL_96:
      v22 = a2;
      v23 = 13;
      goto LABEL_174;
    case 93:
      v151 = *(uint64_t ***)(Function + 2088);
      v152 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v152;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v151, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_end_single";
      goto LABEL_134;
    case 94:
      v153 = *(uint64_t ***)(Function + 2176);
      v154 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v154;
      v155 = *(_QWORD *)(Function + 2168);
      *(_QWORD *)&v313[8] = v154;
      *(_QWORD *)&v313[16] = v155;
      v156 = *(_QWORD *)(Function + 2368);
      *(_QWORD *)&v313[24] = v155;
      *(_QWORD *)v314 = v156;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v153, (uint64_t *)&v312, 6, 0);
      v8 = "__kmpc_omp_task_alloc";
      goto LABEL_186;
    case 95:
      v157 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v157;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2176);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v157, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_omp_task";
      goto LABEL_196;
    case 96:
      v158 = *(uint64_t ***)(Function + 2088);
      v159 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v159;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v158, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_end_taskgroup";
      goto LABEL_173;
    case 97:
      v160 = *(uint64_t ***)(Function + 2088);
      v161 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v161;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v160, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_taskgroup";
LABEL_102:
      v22 = a2;
      v23 = 16;
      goto LABEL_174;
    case 98:
      v162 = *(uint64_t ***)(Function + 2088);
      v163 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v163;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2176);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v162, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_omp_task_begin_if0";
      goto LABEL_141;
    case 99:
      v164 = *(uint64_t ***)(Function + 2088);
      v165 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v165;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2176);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v164, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_omp_task_complete_if0";
      goto LABEL_182;
    case 100:
      v166 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v166;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2176);
      *(_OWORD *)&v313[16] = __PAIR128__(*(unint64_t *)&v313[8], (unint64_t)v166);
      *(_OWORD *)v314 = __PAIR128__(*(unint64_t *)&v313[8], (unint64_t)v166);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v166, (uint64_t *)&v312, 7, 0);
      v8 = "__kmpc_omp_task_with_deps";
      goto LABEL_141;
    case 101:
      v167 = *(uint64_t ***)(Function + 2088);
      v168 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v168;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2176);
      *(_QWORD *)&v313[16] = v168;
      *(_QWORD *)&v313[24] = *(_QWORD *)(Function + 2160);
      *(_QWORD *)v314 = *(_QWORD *)&v313[24];
      *(_QWORD *)&v314[8] = *(_QWORD *)(Function + 2128);
      *(_QWORD *)&v314[16] = v168;
      v315 = v168;
      v316 = *(uint64_t ***)&v314[8];
      v317 = *(uint64_t ***)&v313[8];
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v167, (uint64_t *)&v312, 11, 0);
      v8 = "__kmpc_taskloop";
      goto LABEL_196;
    case 102:
      v169 = *(uint64_t ***)(Function + 2176);
      v170 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v170;
      v171 = *(_QWORD *)(Function + 2168);
      *(_QWORD *)&v313[8] = v170;
      *(_QWORD *)&v313[16] = v171;
      v172 = *(_QWORD *)(Function + 2368);
      *(_QWORD *)&v313[24] = v171;
      *(_QWORD *)v314 = v172;
      *(_QWORD *)&v314[8] = *(_QWORD *)(Function + 2128);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v169, (uint64_t *)&v312, 7, 0);
      v8 = "__kmpc_omp_target_task_alloc";
      goto LABEL_182;
    case 103:
      v173 = *(uint64_t ***)(Function + 2176);
      v174 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v174;
      *(_QWORD *)&v313[8] = v174;
      *(_QWORD *)&v313[16] = v174;
      *(_QWORD *)&v313[24] = v173;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v173, (uint64_t *)&v312, 5, 0);
      v8 = "__kmpc_taskred_modifier_init";
      goto LABEL_182;
    case 104:
      v175 = *(uint64_t ***)(Function + 2176);
      v312 = *(uint64_t ***)(Function + 2120);
      *(_QWORD *)v313 = v312;
      *(_QWORD *)&v313[8] = v175;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v175, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_taskred_init";
      goto LABEL_177;
    case 105:
      v176 = *(uint64_t ***)(Function + 2088);
      v177 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v177;
      *(_QWORD *)&v313[8] = v177;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v176, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_task_reduction_modifier_fini";
      goto LABEL_171;
    case 106:
      v178 = *(uint64_t ***)(Function + 2176);
      v312 = *(uint64_t ***)(Function + 2120);
      *(_QWORD *)v313 = v178;
      *(_QWORD *)&v313[8] = v178;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v178, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_task_reduction_get_th_data";
LABEL_112:
      v22 = a2;
      v23 = 33;
      goto LABEL_174;
    case 107:
      v179 = *(uint64_t ***)(Function + 2176);
      v312 = *(uint64_t ***)(Function + 2120);
      *(_QWORD *)v313 = v312;
      *(_QWORD *)&v313[8] = v179;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v179, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_task_reduction_init";
      goto LABEL_190;
    case 108:
      v180 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2176);
      *(_QWORD *)v313 = v180;
      *(_QWORD *)&v313[8] = v180;
      *(_QWORD *)&v313[16] = v180;
      *(_QWORD *)&v313[24] = v312;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v312, (uint64_t *)&v312, 5, 0);
      v8 = "__kmpc_task_reduction_modifier_init";
      goto LABEL_171;
    case 109:
      v181 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2176);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v181, (uint64_t *)&v312, 1, 0);
      v8 = "__kmpc_proxy_task_completed_ooo";
      goto LABEL_152;
    case 110:
      v182 = *(uint64_t ***)(Function + 2088);
      v183 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v183;
      v184 = *(_QWORD *)(Function + 2176);
      *(_QWORD *)&v313[8] = v183;
      *(_QWORD *)&v313[16] = v184;
      *(_QWORD *)&v313[24] = v183;
      *(_QWORD *)v314 = v184;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v182, (uint64_t *)&v312, 6, 0);
      v8 = "__kmpc_omp_wait_deps";
      goto LABEL_173;
    case 111:
      v185 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v185;
      *(_QWORD *)&v313[8] = v185;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v185, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_cancellationpoint";
      goto LABEL_188;
    case 112:
      v186 = *(uint64_t ***)(Function + 2088);
      v187 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v187;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2272);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v186, (uint64_t *)&v312, 3, 1);
      v8 = "__kmpc_fork_teams";
      goto LABEL_134;
    case 113:
      v188 = *(uint64_t ***)(Function + 2088);
      v189 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v189;
      *(_QWORD *)&v313[8] = v189;
      *(_QWORD *)&v313[16] = v189;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v188, (uint64_t *)&v312, 4, 0);
      v8 = "__kmpc_push_num_teams";
      goto LABEL_186;
    case 114:
      v190 = *(uint64_t ***)(Function + 2088);
      v191 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v191;
      *(_OWORD *)&v313[8] = *(_OWORD *)(Function + 2168);
      *(_QWORD *)&v313[24] = *(_QWORD *)(Function + 2304);
      *(_QWORD *)v314 = v191;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v190, (uint64_t *)&v312, 6, 0);
      v8 = "__kmpc_copyprivate";
      goto LABEL_179;
    case 115:
      v192 = *(uint64_t ***)(Function + 2176);
      v193 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v193;
      v194 = *(_QWORD *)(Function + 2168);
      *(_QWORD *)&v313[8] = v192;
      *(_QWORD *)&v313[16] = v194;
      *(_QWORD *)&v313[24] = *(_QWORD *)(Function + 2192);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v192, (uint64_t *)&v312, 5, 0);
      v8 = "__kmpc_threadprivate_cached";
      goto LABEL_184;
    case 116:
      v195 = *(uint64_t ***)(Function + 2088);
      v196 = *(_QWORD *)(Function + 2176);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v196;
      v197 = *(_QWORD *)(Function + 2352);
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2320);
      *(_QWORD *)&v313[16] = v197;
      *(_QWORD *)&v313[24] = *(_QWORD *)(Function + 2336);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v195, (uint64_t *)&v312, 5, 0);
      v8 = "__kmpc_threadprivate_register";
      goto LABEL_192;
    case 117:
      v198 = *(uint64_t ***)(Function + 2088);
      v199 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v199;
      v200 = *(_QWORD *)(Function + 2176);
      *(_QWORD *)&v313[8] = v199;
      *(_QWORD *)&v313[16] = v200;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v198, (uint64_t *)&v312, 4, 0);
      v8 = "__kmpc_doacross_init";
      goto LABEL_173;
    case 118:
      v201 = *(uint64_t ***)(Function + 2088);
      v202 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v202;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2160);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v201, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_doacross_post";
      goto LABEL_173;
    case 119:
      v203 = *(uint64_t ***)(Function + 2088);
      v204 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v204;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2160);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v203, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_doacross_wait";
      goto LABEL_173;
    case 120:
      v205 = *(uint64_t ***)(Function + 2088);
      v206 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v206;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v205, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_doacross_fini";
      goto LABEL_173;
    case 121:
      v207 = *(uint64_t ***)(Function + 2176);
      v208 = *(_QWORD *)(Function + 2168);
      v312 = *(uint64_t ***)(Function + 2120);
      *(_QWORD *)v313 = v208;
      *(_QWORD *)&v313[8] = v207;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v207, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_alloc";
LABEL_128:
      v22 = a2;
      v23 = 12;
      goto LABEL_174;
    case 122:
      v209 = *(uint64_t ***)(Function + 2176);
      v210 = *(_QWORD *)(Function + 2168);
      v312 = *(uint64_t ***)(Function + 2120);
      *(_QWORD *)v313 = v210;
      *(_QWORD *)&v313[8] = v210;
      *(_QWORD *)&v313[16] = v209;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v209, (uint64_t *)&v312, 4, 0);
      v8 = "__kmpc_aligned_alloc";
      goto LABEL_173;
    case 123:
      v211 = *(uint64_t ***)(Function + 2088);
      v212 = *(_QWORD *)(Function + 2176);
      v312 = *(uint64_t ***)(Function + 2120);
      *(_QWORD *)v313 = v212;
      *(_QWORD *)&v313[8] = v212;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v211, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_free";
      v22 = a2;
      v23 = 11;
      goto LABEL_174;
    case 124:
      v213 = *(uint64_t ***)(Function + 2088);
      v214 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v214;
      v215 = *(_QWORD *)(Function + 2128);
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2184);
      *(_QWORD *)&v313[16] = v215;
      *(_QWORD *)&v313[24] = v214;
      *(_QWORD *)v314 = v214;
      *(_QWORD *)&v314[8] = *(_QWORD *)(Function + 2176);
      *(_QWORD *)&v314[16] = v214;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v213, (uint64_t *)&v312, 8, 0);
      v8 = "__tgt_interop_init";
      goto LABEL_179;
    case 125:
      v216 = *(uint64_t ***)(Function + 2088);
      v217 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v217;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2184);
      *(_QWORD *)&v313[16] = v217;
      v218 = *(_QWORD *)(Function + 2176);
      *(_QWORD *)&v313[24] = v217;
      *(_QWORD *)v314 = v218;
      *(_QWORD *)&v314[8] = v217;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v216, (uint64_t *)&v312, 7, 0);
      v8 = "__tgt_interop_destroy";
      goto LABEL_186;
    case 126:
      v219 = *(uint64_t ***)(Function + 2088);
      v220 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v220;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2184);
      *(_QWORD *)&v313[16] = v220;
      v221 = *(_QWORD *)(Function + 2176);
      *(_QWORD *)&v313[24] = v220;
      *(_QWORD *)v314 = v221;
      *(_QWORD *)&v314[8] = v220;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v219, (uint64_t *)&v312, 7, 0);
      v8 = "__tgt_interop_use";
LABEL_134:
      v22 = a2;
      v23 = 17;
      goto LABEL_174;
    case 127:
      v222 = *(uint64_t ***)(Function + 2176);
      v312 = *(uint64_t ***)(Function + 2120);
      *(_QWORD *)v313 = v222;
      *(_QWORD *)&v313[8] = v312;
      *(_QWORD *)&v313[16] = v222;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v222, (uint64_t *)&v312, 4, 0);
      v8 = "__kmpc_init_allocator";
      goto LABEL_186;
    case 128:
      v223 = *(uint64_t ***)(Function + 2088);
      v224 = *(_QWORD *)(Function + 2176);
      v312 = *(uint64_t ***)(Function + 2120);
      *(_QWORD *)v313 = v224;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v223, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_destroy_allocator";
      goto LABEL_188;
    case 129:
      v225 = *(uint64_t ***)(Function + 2088);
      v226 = *(_QWORD *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v226;
      *(_QWORD *)&v313[8] = v226;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v225, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_push_target_tripcount_mapper";
      goto LABEL_171;
    case 130:
      v227 = *(uint64_t ***)(Function + 2120);
      v228 = *(_QWORD *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v228;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2176);
      *(_QWORD *)&v313[16] = v227;
      *(_QWORD *)&v313[24] = *(_QWORD *)(Function + 2184);
      *(_QWORD *)v314 = *(_QWORD *)&v313[24];
      *(_QWORD *)&v314[8] = *(_QWORD *)(Function + 2160);
      *(_QWORD *)&v314[16] = *(_QWORD *)&v314[8];
      v315 = *(uint64_t ***)&v313[24];
      v316 = *(uint64_t ***)&v313[24];
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v227, (uint64_t *)&v312, 10, 0);
      v8 = "__tgt_target_mapper";
      goto LABEL_177;
    case 131:
      v229 = *(uint64_t ***)(Function + 2120);
      v230 = *(_QWORD *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v230;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2176);
      *(_QWORD *)&v313[16] = v229;
      *(_QWORD *)&v313[24] = *(_QWORD *)(Function + 2184);
      *(_QWORD *)v314 = *(_QWORD *)&v313[24];
      *(_QWORD *)&v314[8] = *(_QWORD *)(Function + 2160);
      *(_QWORD *)&v314[16] = *(_QWORD *)&v314[8];
      v315 = *(uint64_t ***)&v313[24];
      v316 = *(uint64_t ***)&v313[24];
      v317 = v229;
      v318 = *(uint64_t ***)&v313[8];
      v319 = v229;
      v320 = *(_QWORD *)&v313[8];
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v229, (uint64_t *)&v312, 14, 0);
      v8 = "__tgt_target_nowait_mapper";
      goto LABEL_190;
    case 132:
      v231 = *(uint64_t ***)(Function + 2120);
      v232 = *(_QWORD *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v232;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2176);
      *(_QWORD *)&v313[16] = v231;
      *(_QWORD *)&v313[24] = *(_QWORD *)(Function + 2184);
      *(_QWORD *)v314 = *(_QWORD *)&v313[24];
      *(_QWORD *)&v314[8] = *(_QWORD *)(Function + 2160);
      *(_QWORD *)&v314[16] = *(_QWORD *)&v314[8];
      v315 = *(uint64_t ***)&v313[24];
      v316 = *(uint64_t ***)&v313[24];
      v317 = v231;
      v318 = v231;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v231, (uint64_t *)&v312, 12, 0);
      v8 = "__tgt_target_teams_mapper";
LABEL_141:
      v22 = a2;
      v23 = 25;
      goto LABEL_174;
    case 133:
      v233 = *(uint64_t ***)(Function + 2120);
      v234 = *(_QWORD *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v234;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2176);
      *(_QWORD *)&v313[16] = v233;
      *(_QWORD *)&v313[24] = *(_QWORD *)(Function + 2184);
      *(_QWORD *)v314 = *(_QWORD *)&v313[24];
      *(_QWORD *)&v314[8] = *(_QWORD *)(Function + 2160);
      *(_QWORD *)&v314[16] = *(_QWORD *)&v314[8];
      v315 = *(uint64_t ***)&v313[24];
      v316 = *(uint64_t ***)&v313[24];
      v317 = v233;
      v318 = v233;
      v319 = v233;
      v320 = *(_QWORD *)&v313[8];
      v321 = v233;
      v322 = *(_QWORD *)&v313[8];
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v233, (uint64_t *)&v312, 16, 0);
      v8 = "__tgt_target_teams_nowait_mapper";
      goto LABEL_198;
    case 134:
      v235 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2128);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v235, (uint64_t *)&v312, 1, 0);
      v8 = "__tgt_register_requires";
LABEL_144:
      v22 = a2;
      v23 = 23;
      goto LABEL_174;
    case 135:
      v236 = *(uint64_t ***)(Function + 2088);
      v237 = *(_QWORD *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v237;
      v238 = *(uint64_t ***)(Function + 2184);
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2120);
      *(_QWORD *)&v313[16] = v238;
      v239 = *(_QWORD *)(Function + 2160);
      *(_QWORD *)&v313[24] = v238;
      *(_QWORD *)v314 = v239;
      *(_QWORD *)&v314[8] = v239;
      *(_QWORD *)&v314[16] = v238;
      v315 = v238;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v236, (uint64_t *)&v312, 9, 0);
      v8 = "__tgt_target_data_begin_mapper";
      goto LABEL_194;
    case 136:
      v240 = *(uint64_t ***)(Function + 2088);
      v241 = *(_QWORD *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v241;
      v242 = *(uint64_t ***)(Function + 2184);
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2120);
      *(_QWORD *)&v313[16] = v242;
      v243 = *(_QWORD *)(Function + 2160);
      *(_QWORD *)&v313[24] = v242;
      *(_QWORD *)v314 = v243;
      *(_QWORD *)&v314[8] = v243;
      *(_QWORD *)&v314[16] = v242;
      v315 = v242;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v240, (uint64_t *)&v312, 9, 0);
      v8 = "__tgt_target_data_begin_nowait_mapper";
      v22 = a2;
      v23 = 37;
      goto LABEL_174;
    case 137:
      v244 = *(uint64_t ***)(Function + 2088);
      v245 = *(_QWORD *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v245;
      v246 = *(uint64_t ***)(Function + 2184);
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2120);
      *(_QWORD *)&v313[16] = v246;
      v247 = *(_QWORD *)(Function + 2160);
      *(_QWORD *)&v313[24] = v246;
      *(_QWORD *)v314 = v247;
      *(_QWORD *)&v314[8] = v247;
      *(_QWORD *)&v314[16] = v246;
      v248 = *(uint64_t ***)(Function + 2256);
      v315 = v246;
      v316 = v248;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v244, (uint64_t *)&v312, 10, 0);
      v8 = "__tgt_target_data_begin_mapper_issue";
      v22 = a2;
      v23 = 36;
      goto LABEL_174;
    case 138:
      v249 = *(uint64_t ***)(Function + 2088);
      v250 = *(_QWORD *)(Function + 2256);
      v312 = *(uint64_t ***)(Function + 2128);
      *(_QWORD *)v313 = v250;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v249, (uint64_t *)&v312, 2, 0);
      v8 = "__tgt_target_data_begin_mapper_wait";
      goto LABEL_171;
    case 139:
      v251 = *(uint64_t ***)(Function + 2088);
      v252 = *(_QWORD *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v252;
      v253 = *(uint64_t ***)(Function + 2184);
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2120);
      *(_QWORD *)&v313[16] = v253;
      v254 = *(_QWORD *)(Function + 2160);
      *(_QWORD *)&v313[24] = v253;
      *(_QWORD *)v314 = v254;
      *(_QWORD *)&v314[8] = v254;
      *(_QWORD *)&v314[16] = v253;
      v315 = v253;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v251, (uint64_t *)&v312, 9, 0);
      v8 = "__tgt_target_data_end_mapper";
      goto LABEL_182;
    case 140:
      v255 = *(uint64_t ***)(Function + 2088);
      v256 = *(_QWORD *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v256;
      v257 = *(uint64_t ***)(Function + 2184);
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2120);
      *(_QWORD *)&v313[16] = v257;
      v258 = *(_QWORD *)(Function + 2160);
      *(_QWORD *)&v313[24] = v257;
      *(_QWORD *)v314 = v258;
      *(_QWORD *)&v314[8] = v258;
      *(_QWORD *)&v314[16] = v257;
      v315 = v257;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v255, (uint64_t *)&v312, 9, 0);
      v8 = "__tgt_target_data_end_nowait_mapper";
      goto LABEL_171;
    case 141:
      v259 = *(uint64_t ***)(Function + 2088);
      v260 = *(_QWORD *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v260;
      v261 = *(uint64_t ***)(Function + 2184);
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2120);
      *(_QWORD *)&v313[16] = v261;
      v262 = *(_QWORD *)(Function + 2160);
      *(_QWORD *)&v313[24] = v261;
      *(_QWORD *)v314 = v262;
      *(_QWORD *)&v314[8] = v262;
      *(_QWORD *)&v314[16] = v261;
      v315 = v261;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v259, (uint64_t *)&v312, 9, 0);
      v8 = "__tgt_target_data_update_mapper";
LABEL_152:
      v22 = a2;
      v23 = 31;
      goto LABEL_174;
    case 142:
      v263 = *(uint64_t ***)(Function + 2088);
      v264 = *(_QWORD *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v264;
      v265 = *(uint64_t ***)(Function + 2184);
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2120);
      *(_QWORD *)&v313[16] = v265;
      v266 = *(_QWORD *)(Function + 2160);
      *(_QWORD *)&v313[24] = v265;
      *(_QWORD *)v314 = v266;
      *(_QWORD *)&v314[8] = v266;
      *(_QWORD *)&v314[16] = v265;
      v315 = v265;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v263, (uint64_t *)&v312, 9, 0);
      v8 = "__tgt_target_data_update_nowait_mapper";
      goto LABEL_168;
    case 143:
      v267 = *(uint64_t ***)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2176);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v267, (uint64_t *)&v312, 1, 0);
      v8 = "__tgt_mapper_num_components";
      goto LABEL_184;
    case 144:
      v268 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2176);
      *(_QWORD *)v313 = v312;
      v269 = *(_QWORD *)(Function + 2128);
      *(_QWORD *)&v313[8] = v312;
      *(_QWORD *)&v313[16] = v269;
      *(_QWORD *)&v313[24] = v269;
      *(_QWORD *)v314 = v312;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v268, (uint64_t *)&v312, 6, 0);
      v8 = "__tgt_push_mapper_component";
      goto LABEL_184;
    case 145:
      v270 = *(uint64_t ***)(Function + 2176);
      v271 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v271;
      *(_QWORD *)&v313[8] = v270;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v270, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_task_allow_completion_event";
      v22 = a2;
      v23 = 34;
      goto LABEL_174;
    case 146:
      v272 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      v273 = *(int8x16_t *)(Function + 2096);
      *(int8x16_t *)v313 = vextq_s8(v273, v273, 8uLL);
      *(_QWORD *)&v313[16] = v273.i64[0];
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v272, (uint64_t *)&v312, 4, 0);
      v8 = "__kmpc_target_init";
      goto LABEL_179;
    case 147:
      v274 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2240);
      *(int8x16_t *)v313 = vextq_s8(*(int8x16_t *)(Function + 2096), *(int8x16_t *)(Function + 2096), 8uLL);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v274, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_target_deinit";
      goto LABEL_173;
    case 148:
      v275 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2176);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v275, (uint64_t *)&v312, 1, 0);
      v8 = "__kmpc_kernel_prepare_parallel";
      goto LABEL_194;
    case 149:
      v276 = *(uint64_t ***)(Function + 2088);
      v277 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v277;
      *(_QWORD *)&v313[8] = v277;
      *(_QWORD *)&v313[16] = v277;
      *(_QWORD *)&v313[24] = v277;
      v278 = *(_OWORD *)(Function + 2176);
      *(_QWORD *)v314 = *(_QWORD *)(Function + 2176);
      *(_OWORD *)&v314[8] = v278;
      v315 = *(uint64_t ***)(Function + 2168);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v276, (uint64_t *)&v312, 9, 0);
      v8 = "__kmpc_parallel_51";
      goto LABEL_179;
    case 150:
      v279 = *(uint64_t ***)(Function + 2096);
      v312 = *(uint64_t ***)(Function + 2184);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v279, (uint64_t *)&v312, 1, 0);
      v8 = "__kmpc_kernel_parallel";
LABEL_162:
      v22 = a2;
      v23 = 22;
      goto LABEL_174;
    case 151:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2088), 0, 0, 0);
      v8 = "__kmpc_kernel_end_parallel";
      goto LABEL_190;
    case 152:
      v280 = *(uint64_t ***)(Function + 2088);
      v281 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v281;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v280, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_serialized_parallel";
      goto LABEL_190;
    case 153:
      v282 = *(uint64_t ***)(Function + 2088);
      v283 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v283;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v282, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_end_serialized_parallel";
      goto LABEL_194;
    case 154:
      v284 = *(_QWORD *)(Function + 2112);
      v312 = *(uint64_t ***)(Function + 2120);
      *(_QWORD *)v313 = v284;
      *(_QWORD *)&v313[8] = v284;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v312, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_shuffle_int32";
      goto LABEL_173;
    case 155:
      v285 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v285;
      *(_QWORD *)&v313[8] = v285;
      *(_OWORD *)&v313[16] = *(_OWORD *)(Function + 2168);
      v286 = *(_QWORD *)(Function + 2400);
      *(_QWORD *)v314 = *(_QWORD *)(Function + 2384);
      *(_QWORD *)&v314[8] = v286;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v285, (uint64_t *)&v312, 7, 0);
      v8 = "__kmpc_nvptx_parallel_reduce_nowait_v2";
LABEL_168:
      v22 = a2;
      v23 = 38;
      goto LABEL_174;
    case 156:
      v287 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2120);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v287, (uint64_t *)&v312, 1, 0);
      v8 = "__kmpc_nvptx_end_reduce_nowait";
      goto LABEL_194;
    case 157:
      v288 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v288;
      *(_QWORD *)&v313[8] = *(_QWORD *)(Function + 2176);
      *(_OWORD *)&v313[16] = __PAIR128__(*(unint64_t *)&v313[8], (unint64_t)v288);
      *(_QWORD *)v314 = *(_QWORD *)(Function + 2384);
      v289 = *(uint64_t ***)(Function + 2416);
      *(_QWORD *)&v314[8] = *(_QWORD *)(Function + 2400);
      *(_QWORD *)&v314[16] = v289;
      v315 = v289;
      v316 = v289;
      v317 = v289;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v288, (uint64_t *)&v312, 11, 0);
      v8 = "__kmpc_nvptx_teams_reduce_nowait_v2";
LABEL_171:
      v22 = a2;
      v23 = 35;
      goto LABEL_174;
    case 158:
      v290 = *(_QWORD *)(Function + 2112);
      v312 = *(uint64_t ***)(Function + 2128);
      *(_QWORD *)v313 = v290;
      *(_QWORD *)&v313[8] = v290;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v312, (uint64_t *)&v312, 3, 0);
      v8 = "__kmpc_shuffle_int64";
LABEL_173:
      v22 = a2;
      v23 = 20;
      goto LABEL_174;
    case 159:
      v294 = *(uint64_t ***)(Function + 2176);
      v312 = *(uint64_t ***)(Function + 2168);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v294, (uint64_t *)&v312, 1, 0);
      v8 = "__kmpc_alloc_shared";
LABEL_177:
      v22 = a2;
      v23 = 19;
      goto LABEL_174;
    case 160:
      v295 = *(uint64_t ***)(Function + 2088);
      v296 = *(_QWORD *)(Function + 2168);
      v312 = *(uint64_t ***)(Function + 2176);
      *(_QWORD *)v313 = v296;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v295, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_free_shared";
LABEL_179:
      v22 = a2;
      v23 = 18;
      goto LABEL_174;
    case 161:
      v297 = *(uint64_t ***)(Function + 2088);
      v298 = *(_QWORD *)(Function + 2168);
      v312 = *(uint64_t ***)(Function + 2192);
      *(_QWORD *)v313 = v298;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v297, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_begin_sharing_variables";
      goto LABEL_194;
    case 162:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2088), 0, 0, 0);
      v8 = "__kmpc_end_sharing_variables";
LABEL_182:
      v22 = a2;
      v23 = 28;
      goto LABEL_174;
    case 163:
      v299 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2192);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v299, (uint64_t *)&v312, 1, 0);
      v8 = "__kmpc_get_shared_variables";
LABEL_184:
      v22 = a2;
      v23 = 27;
      goto LABEL_174;
    case 164:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2104), 0, 0, 0);
      v8 = "__kmpc_parallel_level";
LABEL_186:
      v22 = a2;
      v23 = 21;
      goto LABEL_174;
    case 165:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2104), 0, 0, 0);
      v8 = "__kmpc_is_spmd_exec_mode";
LABEL_188:
      v22 = a2;
      v23 = 24;
      goto LABEL_174;
    case 166:
      v300 = *(uint64_t ***)(Function + 2088);
      v301 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v301;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v300, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_barrier_simple_spmd";
LABEL_190:
      v22 = a2;
      v23 = 26;
      goto LABEL_174;
    case 167:
      v302 = *(uint64_t ***)(Function + 2088);
      v303 = *(_QWORD *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(_QWORD *)v313 = v303;
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v302, (uint64_t *)&v312, 2, 0);
      v8 = "__kmpc_barrier_simple_generic";
LABEL_192:
      v22 = a2;
      v23 = 29;
      goto LABEL_174;
    case 168:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2128), 0, 0, 0);
      v8 = "__kmpc_warp_active_thread_mask";
LABEL_194:
      v22 = a2;
      v23 = 30;
      goto LABEL_174;
    case 169:
      v304 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2128);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v304, (uint64_t *)&v312, 1, 0);
      v8 = "__kmpc_syncwarp";
LABEL_196:
      v22 = a2;
      v23 = 15;
      goto LABEL_174;
    case 170:
      v305 = *(uint64_t ***)(Function + 2104);
      v312 = *(uint64_t ***)(Function + 2120);
      v7 = (llvm::PointerType *)llvm::FunctionType::get(v305, (uint64_t *)&v312, 1, 0);
      v8 = "__kmpc_is_generic_main_thread_id";
LABEL_198:
      v22 = a2;
      v23 = 32;
      goto LABEL_174;
    case 171:
      v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2088), 0, 0, 0);
      v8 = "__last";
      v22 = a2;
      v23 = 6;
LABEL_174:
      Function = llvm::Module::getFunction(v22, (unsigned __int8 *)v8, v23);
      v291 = (uint64_t *)Function;
      if (Function)
        goto LABEL_175;
      goto LABEL_201;
    default:
      v7 = 0;
LABEL_201:
      switch(a3)
      {
        case 0:
          v306 = "__kmpc_barrier";
          goto LABEL_377;
        case 1:
          v306 = "__kmpc_cancel";
          goto LABEL_377;
        case 2:
          v306 = "__kmpc_cancel_barrier";
          goto LABEL_377;
        case 3:
          v306 = "__kmpc_flush";
          goto LABEL_377;
        case 4:
          v306 = "__kmpc_global_thread_num";
          goto LABEL_377;
        case 5:
          v306 = "__kmpc_get_hardware_thread_id_in_block";
          goto LABEL_377;
        case 6:
          v307 = "__kmpc_fork_call";
          goto LABEL_316;
        case 7:
          v306 = "__kmpc_omp_taskwait";
          goto LABEL_377;
        case 8:
          v306 = "__kmpc_omp_taskyield";
          goto LABEL_377;
        case 9:
          v306 = "__kmpc_push_num_threads";
          goto LABEL_377;
        case 10:
          v306 = "__kmpc_push_proc_bind";
          goto LABEL_377;
        case 11:
          v306 = "__kmpc_omp_reg_task_with_affinity";
          goto LABEL_377;
        case 12:
          v306 = "__kmpc_get_hardware_num_blocks";
          goto LABEL_377;
        case 13:
          v306 = "__kmpc_get_hardware_num_threads_in_block";
          goto LABEL_377;
        case 14:
          v306 = "__kmpc_get_warp_size";
          goto LABEL_377;
        case 15:
          v306 = "omp_get_thread_num";
          goto LABEL_377;
        case 16:
          v306 = "omp_get_num_threads";
          goto LABEL_377;
        case 17:
          v306 = "omp_get_max_threads";
          goto LABEL_377;
        case 18:
          v306 = "omp_in_parallel";
          goto LABEL_377;
        case 19:
          v306 = "omp_get_dynamic";
          goto LABEL_377;
        case 20:
          v306 = "omp_get_cancellation";
          goto LABEL_377;
        case 21:
          v306 = "omp_get_nested";
          goto LABEL_377;
        case 22:
          v306 = "omp_get_schedule";
          goto LABEL_377;
        case 23:
          v306 = "omp_get_thread_limit";
          goto LABEL_377;
        case 24:
          v306 = "omp_get_supported_active_levels";
          goto LABEL_377;
        case 25:
          v306 = "omp_get_max_active_levels";
          goto LABEL_377;
        case 26:
          v306 = "omp_get_level";
          goto LABEL_377;
        case 27:
          v306 = "omp_get_ancestor_thread_num";
          goto LABEL_377;
        case 28:
          v306 = "omp_get_team_size";
          goto LABEL_377;
        case 29:
          v306 = "omp_get_active_level";
          goto LABEL_377;
        case 30:
          v306 = "omp_in_final";
          goto LABEL_377;
        case 31:
          v306 = "omp_get_proc_bind";
          goto LABEL_377;
        case 32:
          v306 = "omp_get_num_places";
          goto LABEL_377;
        case 33:
          v306 = "omp_get_num_procs";
          goto LABEL_377;
        case 34:
          v306 = "omp_get_place_proc_ids";
          goto LABEL_377;
        case 35:
          v306 = "omp_get_place_num";
          goto LABEL_377;
        case 36:
          v306 = "omp_get_partition_num_places";
          goto LABEL_377;
        case 37:
          v306 = "omp_get_partition_place_nums";
          goto LABEL_377;
        case 38:
          v306 = "omp_set_num_threads";
          goto LABEL_377;
        case 39:
          v306 = "omp_set_dynamic";
          goto LABEL_377;
        case 40:
          v306 = "omp_set_nested";
          goto LABEL_377;
        case 41:
          v306 = "omp_set_schedule";
          goto LABEL_377;
        case 42:
          v306 = "omp_set_max_active_levels";
          goto LABEL_377;
        case 43:
          v306 = "__kmpc_master";
          goto LABEL_377;
        case 44:
          v306 = "__kmpc_end_master";
          goto LABEL_377;
        case 45:
          v306 = "__kmpc_masked";
          goto LABEL_377;
        case 46:
          v306 = "__kmpc_end_masked";
          goto LABEL_377;
        case 47:
          v306 = "__kmpc_critical";
          goto LABEL_377;
        case 48:
          v306 = "__kmpc_critical_with_hint";
          goto LABEL_377;
        case 49:
          v306 = "__kmpc_end_critical";
          goto LABEL_377;
        case 50:
          v306 = "__kmpc_begin";
          goto LABEL_377;
        case 51:
          v306 = "__kmpc_end";
          goto LABEL_377;
        case 52:
          v306 = "__kmpc_reduce";
          goto LABEL_377;
        case 53:
          v306 = "__kmpc_reduce_nowait";
          goto LABEL_377;
        case 54:
          v306 = "__kmpc_end_reduce";
          goto LABEL_377;
        case 55:
          v306 = "__kmpc_end_reduce_nowait";
          goto LABEL_377;
        case 56:
          v306 = "__kmpc_ordered";
          goto LABEL_377;
        case 57:
          v306 = "__kmpc_end_ordered";
          goto LABEL_377;
        case 58:
          v306 = "__kmpc_for_static_init_4";
          goto LABEL_377;
        case 59:
          v306 = "__kmpc_for_static_init_4u";
          goto LABEL_377;
        case 60:
          v306 = "__kmpc_for_static_init_8";
          goto LABEL_377;
        case 61:
          v306 = "__kmpc_for_static_init_8u";
          goto LABEL_377;
        case 62:
          v306 = "__kmpc_for_static_fini";
          goto LABEL_377;
        case 63:
          v306 = "__kmpc_distribute_static_init_4";
          goto LABEL_377;
        case 64:
          v306 = "__kmpc_distribute_static_init_4u";
          goto LABEL_377;
        case 65:
          v306 = "__kmpc_distribute_static_init_8";
          goto LABEL_377;
        case 66:
          v306 = "__kmpc_distribute_static_init_8u";
          goto LABEL_377;
        case 67:
          v306 = "__kmpc_distribute_static_fini";
          goto LABEL_377;
        case 68:
          v306 = "__kmpc_dist_dispatch_init_4";
          goto LABEL_377;
        case 69:
          v306 = "__kmpc_dist_dispatch_init_4u";
          goto LABEL_377;
        case 70:
          v306 = "__kmpc_dist_dispatch_init_8";
          goto LABEL_377;
        case 71:
          v306 = "__kmpc_dist_dispatch_init_8u";
          goto LABEL_377;
        case 72:
          v306 = "__kmpc_dispatch_init_4";
          goto LABEL_377;
        case 73:
          v306 = "__kmpc_dispatch_init_4u";
          goto LABEL_377;
        case 74:
          v306 = "__kmpc_dispatch_init_8";
          goto LABEL_377;
        case 75:
          v306 = "__kmpc_dispatch_init_8u";
          goto LABEL_377;
        case 76:
          v306 = "__kmpc_dispatch_next_4";
          goto LABEL_377;
        case 77:
          v306 = "__kmpc_dispatch_next_4u";
          goto LABEL_377;
        case 78:
          v306 = "__kmpc_dispatch_next_8";
          goto LABEL_377;
        case 79:
          v306 = "__kmpc_dispatch_next_8u";
          goto LABEL_377;
        case 80:
          v306 = "__kmpc_dispatch_fini_4";
          goto LABEL_377;
        case 81:
          v306 = "__kmpc_dispatch_fini_4u";
          goto LABEL_377;
        case 82:
          v306 = "__kmpc_dispatch_fini_8";
          goto LABEL_377;
        case 83:
          v306 = "__kmpc_dispatch_fini_8u";
          goto LABEL_377;
        case 84:
          v306 = "__kmpc_team_static_init_4";
          goto LABEL_377;
        case 85:
          v306 = "__kmpc_team_static_init_4u";
          goto LABEL_377;
        case 86:
          v306 = "__kmpc_team_static_init_8";
          goto LABEL_377;
        case 87:
          v306 = "__kmpc_team_static_init_8u";
          goto LABEL_377;
        case 88:
          v306 = "__kmpc_dist_for_static_init_4";
          goto LABEL_377;
        case 89:
          v306 = "__kmpc_dist_for_static_init_4u";
          goto LABEL_377;
        case 90:
          v306 = "__kmpc_dist_for_static_init_8";
          goto LABEL_377;
        case 91:
          v306 = "__kmpc_dist_for_static_init_8u";
          goto LABEL_377;
        case 92:
          v306 = "__kmpc_single";
          goto LABEL_377;
        case 93:
          v306 = "__kmpc_end_single";
          goto LABEL_377;
        case 94:
          v306 = "__kmpc_omp_task_alloc";
          goto LABEL_377;
        case 95:
          v306 = "__kmpc_omp_task";
          goto LABEL_377;
        case 96:
          v306 = "__kmpc_end_taskgroup";
          goto LABEL_377;
        case 97:
          v306 = "__kmpc_taskgroup";
          goto LABEL_377;
        case 98:
          v306 = "__kmpc_omp_task_begin_if0";
          goto LABEL_377;
        case 99:
          v306 = "__kmpc_omp_task_complete_if0";
          goto LABEL_377;
        case 100:
          v306 = "__kmpc_omp_task_with_deps";
          goto LABEL_377;
        case 101:
          v306 = "__kmpc_taskloop";
          goto LABEL_377;
        case 102:
          v306 = "__kmpc_omp_target_task_alloc";
          goto LABEL_377;
        case 103:
          v306 = "__kmpc_taskred_modifier_init";
          goto LABEL_377;
        case 104:
          v306 = "__kmpc_taskred_init";
          goto LABEL_377;
        case 105:
          v306 = "__kmpc_task_reduction_modifier_fini";
          goto LABEL_377;
        case 106:
          v306 = "__kmpc_task_reduction_get_th_data";
          goto LABEL_377;
        case 107:
          v306 = "__kmpc_task_reduction_init";
          goto LABEL_377;
        case 108:
          v306 = "__kmpc_task_reduction_modifier_init";
          goto LABEL_377;
        case 109:
          v306 = "__kmpc_proxy_task_completed_ooo";
          goto LABEL_377;
        case 110:
          v306 = "__kmpc_omp_wait_deps";
          goto LABEL_377;
        case 111:
          v306 = "__kmpc_cancellationpoint";
          goto LABEL_377;
        case 112:
          v307 = "__kmpc_fork_teams";
LABEL_316:
          v312 = (uint64_t **)v307;
          *(_WORD *)&v313[24] = 259;
          v291 = llvm::Function::Create(v7, 0, (uint64_t)&v312, a2);
          Function = llvm::Value::getMetadata((llvm::Value *)v291, 26);
          if (!Function)
          {
            v312 = *(uint64_t ***)*v291;
            v308 = (uint64_t *)v312;
            v310 = -1;
            CallbackEncoding = llvm::MDBuilder::createCallbackEncoding((llvm::Type **)&v312, (llvm::Type *)2, (int *)&v310, 2, 1u);
            Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(v308, &CallbackEncoding, 1, 0, 1);
            llvm::Value::addMetadata((llvm::Value *)v291, 26, Impl);
          }
          break;
        case 113:
          v306 = "__kmpc_push_num_teams";
          goto LABEL_377;
        case 114:
          v306 = "__kmpc_copyprivate";
          goto LABEL_377;
        case 115:
          v306 = "__kmpc_threadprivate_cached";
          goto LABEL_377;
        case 116:
          v306 = "__kmpc_threadprivate_register";
          goto LABEL_377;
        case 117:
          v306 = "__kmpc_doacross_init";
          goto LABEL_377;
        case 118:
          v306 = "__kmpc_doacross_post";
          goto LABEL_377;
        case 119:
          v306 = "__kmpc_doacross_wait";
          goto LABEL_377;
        case 120:
          v306 = "__kmpc_doacross_fini";
          goto LABEL_377;
        case 121:
          v306 = "__kmpc_alloc";
          goto LABEL_377;
        case 122:
          v306 = "__kmpc_aligned_alloc";
          goto LABEL_377;
        case 123:
          v306 = "__kmpc_free";
          goto LABEL_377;
        case 124:
          v306 = "__tgt_interop_init";
          goto LABEL_377;
        case 125:
          v306 = "__tgt_interop_destroy";
          goto LABEL_377;
        case 126:
          v306 = "__tgt_interop_use";
          goto LABEL_377;
        case 127:
          v306 = "__kmpc_init_allocator";
          goto LABEL_377;
        case 128:
          v306 = "__kmpc_destroy_allocator";
          goto LABEL_377;
        case 129:
          v306 = "__kmpc_push_target_tripcount_mapper";
          goto LABEL_377;
        case 130:
          v306 = "__tgt_target_mapper";
          goto LABEL_377;
        case 131:
          v306 = "__tgt_target_nowait_mapper";
          goto LABEL_377;
        case 132:
          v306 = "__tgt_target_teams_mapper";
          goto LABEL_377;
        case 133:
          v306 = "__tgt_target_teams_nowait_mapper";
          goto LABEL_377;
        case 134:
          v306 = "__tgt_register_requires";
          goto LABEL_377;
        case 135:
          v306 = "__tgt_target_data_begin_mapper";
          goto LABEL_377;
        case 136:
          v306 = "__tgt_target_data_begin_nowait_mapper";
          goto LABEL_377;
        case 137:
          v306 = "__tgt_target_data_begin_mapper_issue";
          goto LABEL_377;
        case 138:
          v306 = "__tgt_target_data_begin_mapper_wait";
          goto LABEL_377;
        case 139:
          v306 = "__tgt_target_data_end_mapper";
          goto LABEL_377;
        case 140:
          v306 = "__tgt_target_data_end_nowait_mapper";
          goto LABEL_377;
        case 141:
          v306 = "__tgt_target_data_update_mapper";
          goto LABEL_377;
        case 142:
          v306 = "__tgt_target_data_update_nowait_mapper";
          goto LABEL_377;
        case 143:
          v306 = "__tgt_mapper_num_components";
          goto LABEL_377;
        case 144:
          v306 = "__tgt_push_mapper_component";
          goto LABEL_377;
        case 145:
          v306 = "__kmpc_task_allow_completion_event";
          goto LABEL_377;
        case 146:
          v306 = "__kmpc_target_init";
          goto LABEL_377;
        case 147:
          v306 = "__kmpc_target_deinit";
          goto LABEL_377;
        case 148:
          v306 = "__kmpc_kernel_prepare_parallel";
          goto LABEL_377;
        case 149:
          v306 = "__kmpc_parallel_51";
          goto LABEL_377;
        case 150:
          v306 = "__kmpc_kernel_parallel";
          goto LABEL_377;
        case 151:
          v306 = "__kmpc_kernel_end_parallel";
          goto LABEL_377;
        case 152:
          v306 = "__kmpc_serialized_parallel";
          goto LABEL_377;
        case 153:
          v306 = "__kmpc_end_serialized_parallel";
          goto LABEL_377;
        case 154:
          v306 = "__kmpc_shuffle_int32";
          goto LABEL_377;
        case 155:
          v306 = "__kmpc_nvptx_parallel_reduce_nowait_v2";
          goto LABEL_377;
        case 156:
          v306 = "__kmpc_nvptx_end_reduce_nowait";
          goto LABEL_377;
        case 157:
          v306 = "__kmpc_nvptx_teams_reduce_nowait_v2";
          goto LABEL_377;
        case 158:
          v306 = "__kmpc_shuffle_int64";
          goto LABEL_377;
        case 159:
          v306 = "__kmpc_alloc_shared";
          goto LABEL_377;
        case 160:
          v306 = "__kmpc_free_shared";
          goto LABEL_377;
        case 161:
          v306 = "__kmpc_begin_sharing_variables";
          goto LABEL_377;
        case 162:
          v306 = "__kmpc_end_sharing_variables";
          goto LABEL_377;
        case 163:
          v306 = "__kmpc_get_shared_variables";
          goto LABEL_377;
        case 164:
          v306 = "__kmpc_parallel_level";
          goto LABEL_377;
        case 165:
          v306 = "__kmpc_is_spmd_exec_mode";
          goto LABEL_377;
        case 166:
          v306 = "__kmpc_barrier_simple_spmd";
          goto LABEL_377;
        case 167:
          v306 = "__kmpc_barrier_simple_generic";
          goto LABEL_377;
        case 168:
          v306 = "__kmpc_warp_active_thread_mask";
          goto LABEL_377;
        case 169:
          v306 = "__kmpc_syncwarp";
          goto LABEL_377;
        case 170:
          v306 = "__kmpc_is_generic_main_thread_id";
          goto LABEL_377;
        case 171:
          v306 = "__last";
LABEL_377:
          v312 = (uint64_t **)v306;
          *(_WORD *)&v313[24] = 259;
          Function = (uint64_t)llvm::Function::Create(v7, 0, (uint64_t)&v312, a2);
          v291 = (uint64_t *)Function;
          break;
        default:
          v291 = 0;
          break;
      }
      llvm::OpenMPIRBuilder::addAttributes(Function, a3, (uint64_t)v291);
LABEL_175:
      v292 = (llvm::Constant *)llvm::PointerType::get(v7, 0);
      llvm::ConstantExpr::getBitCast((llvm::UndefValue *)v291, v292, 0);
      return v7;
  }
}

uint64_t llvm::OpenMPIRBuilder::initialize(llvm::Type ***this)
{
  return llvm::OpenMPIRBuilder::initializeTypes((llvm::OpenMPIRBuilder *)this, this[42]);
}

uint64_t llvm::OpenMPIRBuilder::initializeTypes(llvm::OpenMPIRBuilder *this, llvm::Type **a2)
{
  llvm::Type *v4;
  uint64_t v5;
  llvm::LLVMContext *v6;
  uint64_t v7;
  llvm::PointerType *v8;
  llvm::PointerType *v9;
  llvm::PointerType *v10;
  llvm::PointerType *v11;
  llvm::PointerType *TypeByName;
  llvm::PointerType *v13;
  uint64_t **v14;
  llvm::PointerType *v15;
  uint64_t **v16;
  llvm::PointerType *v17;
  uint64_t **v18;
  llvm::PointerType *v19;
  llvm::PointerType *v20;
  uint64_t **v21;
  llvm::PointerType *v22;
  llvm::PointerType *v23;
  uint64_t **v24;
  llvm::PointerType *v25;
  uint64_t **v26;
  uint64_t **v27;
  llvm::PointerType *v28;
  uint64_t **v29;
  uint64_t **v30;
  llvm::PointerType *v31;
  uint64_t **v32;
  uint64_t **v33;
  llvm::PointerType *v34;
  uint64_t result;
  uint64_t **v36;
  uint64_t **v37;
  uint64_t **v38;
  uint64_t **v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *(_QWORD *)*a2;
  *((_QWORD *)this + 261) = v5 + 1576;
  *((_QWORD *)this + 262) = v5 + 1888;
  *((_QWORD *)this + 263) = llvm::Type::getInt8Ty(v4, (llvm::LLVMContext *)a2);
  *((_QWORD *)this + 264) = llvm::Type::getInt16Ty(v4, v6);
  v7 = *(_QWORD *)v4;
  *((_QWORD *)this + 265) = *(_QWORD *)v4 + 1960;
  *((_QWORD *)this + 266) = v7 + 1984;
  *((_QWORD *)this + 267) = llvm::PointerType::get((llvm::PointerType *)(v7 + 1912), 0);
  *((_QWORD *)this + 268) = llvm::Type::getInt16PtrTy(v4, 0);
  *((_QWORD *)this + 269) = llvm::Type::getInt32PtrTy(v4, 0);
  *((_QWORD *)this + 270) = llvm::Type::getInt64PtrTy(v4, 0);
  *((_QWORD *)this + 271) = llvm::DataLayout::getIntPtrType((llvm::DataLayout *)(a2 + 34), v4, 0);
  v8 = (llvm::PointerType *)llvm::PointerType::get(*((llvm::PointerType **)this + 263), 0);
  *((_QWORD *)this + 272) = v8;
  v9 = (llvm::PointerType *)llvm::PointerType::get(v8, 0);
  *((_QWORD *)this + 273) = v9;
  *((_QWORD *)this + 274) = llvm::PointerType::get(v9, 0);
  v10 = (llvm::PointerType *)llvm::PointerType::get(*((llvm::PointerType **)this + 267), 0);
  *((_QWORD *)this + 275) = v10;
  *((_QWORD *)this + 276) = llvm::PointerType::get(v10, 0);
  llvm::ArrayType::get(*((llvm::ArrayType **)this + 265), (llvm::Type *)8);
  *((_QWORD *)this + 277) = v11;
  *((_QWORD *)this + 278) = llvm::PointerType::get(v11, 0);
  TypeByName = (llvm::PointerType *)llvm::StructType::getTypeByName((uint64_t *)v4, "struct.ident_t", 0xEuLL);
  if (!TypeByName)
  {
    v36 = (uint64_t **)*((_QWORD *)this + 265);
    v37 = v36;
    v38 = v36;
    v39 = v36;
    v40 = *((_QWORD *)this + 267);
    TypeByName = (llvm::PointerType *)llvm::StructType::create(v4, (uint64_t)&v36, 5, "struct.ident_t", 0xEuLL, 0);
  }
  *((_QWORD *)this + 279) = TypeByName;
  *((_QWORD *)this + 280) = llvm::PointerType::get(TypeByName, 0);
  v13 = (llvm::PointerType *)llvm::StructType::getTypeByName((uint64_t *)v4, "struct.__tgt_async_info", 0x17uLL);
  if (!v13)
  {
    v36 = (uint64_t **)*((_QWORD *)this + 267);
    v13 = (llvm::PointerType *)llvm::StructType::create(v4, (uint64_t)&v36, 1, "struct.__tgt_async_info", 0x17uLL, 0);
  }
  *((_QWORD *)this + 281) = v13;
  *((_QWORD *)this + 282) = llvm::PointerType::get(v13, 0);
  v14 = (uint64_t **)*((_QWORD *)this + 261);
  v36 = (uint64_t **)*((_QWORD *)this + 269);
  v37 = v36;
  v15 = (llvm::PointerType *)llvm::FunctionType::get(v14, (uint64_t *)&v36, 2, 1);
  *((_QWORD *)this + 283) = v15;
  *((_QWORD *)this + 284) = llvm::PointerType::get(v15, 0);
  v16 = (uint64_t **)*((_QWORD *)this + 261);
  v36 = (uint64_t **)*((_QWORD *)this + 272);
  v37 = v36;
  v17 = (llvm::PointerType *)llvm::FunctionType::get(v16, (uint64_t *)&v36, 2, 0);
  *((_QWORD *)this + 285) = v17;
  *((_QWORD *)this + 286) = llvm::PointerType::get(v17, 0);
  v18 = (uint64_t **)*((_QWORD *)this + 261);
  v36 = (uint64_t **)*((_QWORD *)this + 272);
  v37 = v36;
  v19 = (llvm::PointerType *)llvm::FunctionType::get(v18, (uint64_t *)&v36, 2, 0);
  *((_QWORD *)this + 287) = v19;
  *((_QWORD *)this + 288) = llvm::PointerType::get(v19, 0);
  v36 = (uint64_t **)*((_QWORD *)this + 272);
  v20 = (llvm::PointerType *)llvm::FunctionType::get(v36, (uint64_t *)&v36, 1, 0);
  *((_QWORD *)this + 289) = v20;
  *((_QWORD *)this + 290) = llvm::PointerType::get(v20, 0);
  v21 = (uint64_t **)*((_QWORD *)this + 261);
  v36 = (uint64_t **)*((_QWORD *)this + 272);
  v22 = (llvm::PointerType *)llvm::FunctionType::get(v21, (uint64_t *)&v36, 1, 0);
  *((_QWORD *)this + 291) = v22;
  *((_QWORD *)this + 292) = llvm::PointerType::get(v22, 0);
  v36 = (uint64_t **)*((_QWORD *)this + 272);
  v37 = v36;
  v23 = (llvm::PointerType *)llvm::FunctionType::get(v36, (uint64_t *)&v36, 2, 0);
  *((_QWORD *)this + 293) = v23;
  *((_QWORD *)this + 294) = llvm::PointerType::get(v23, 0);
  v24 = (uint64_t **)*((_QWORD *)this + 272);
  v36 = (uint64_t **)*((_QWORD *)this + 265);
  v37 = v24;
  v25 = (llvm::PointerType *)llvm::FunctionType::get(v36, (uint64_t *)&v36, 2, 0);
  *((_QWORD *)this + 295) = v25;
  *((_QWORD *)this + 296) = llvm::PointerType::get(v25, 0);
  v26 = (uint64_t **)*((_QWORD *)this + 261);
  v27 = (uint64_t **)*((_QWORD *)this + 264);
  v36 = (uint64_t **)*((_QWORD *)this + 272);
  v37 = v27;
  v38 = v27;
  v39 = v27;
  v28 = (llvm::PointerType *)llvm::FunctionType::get(v26, (uint64_t *)&v36, 4, 0);
  *((_QWORD *)this + 297) = v28;
  *((_QWORD *)this + 298) = llvm::PointerType::get(v28, 0);
  v29 = (uint64_t **)*((_QWORD *)this + 261);
  v30 = (uint64_t **)*((_QWORD *)this + 265);
  v36 = (uint64_t **)*((_QWORD *)this + 272);
  v37 = v30;
  v31 = (llvm::PointerType *)llvm::FunctionType::get(v29, (uint64_t *)&v36, 2, 0);
  *((_QWORD *)this + 299) = v31;
  *((_QWORD *)this + 300) = llvm::PointerType::get(v31, 0);
  v32 = (uint64_t **)*((_QWORD *)this + 261);
  v33 = (uint64_t **)*((_QWORD *)this + 265);
  v36 = (uint64_t **)*((_QWORD *)this + 272);
  v37 = v33;
  v38 = v36;
  v34 = (llvm::PointerType *)llvm::FunctionType::get(v32, (uint64_t *)&v36, 3, 0);
  *((_QWORD *)this + 301) = v34;
  result = llvm::PointerType::get(v34, 0);
  *((_QWORD *)this + 302) = result;
  return result;
}

void sub_1C6267D70(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if ((_QWORD *)*a1 == a1)
    v4 = (uint64_t *)a1[1];
  else
    v4 = *(uint64_t **)(a2 + 8);
  llvm::SymbolTableListTraits<llvm::Function>::addNodeToList((uint64_t)a1, a3);
  v5 = *v4;
  *(_QWORD *)(a3 + 56) = *v4;
  *(_QWORD *)(a3 + 64) = v4;
  v6 = a3 + 56;
  *(_QWORD *)(v5 + 8) = v6;
  *v4 = v6;
}

void llvm::OpenMPIRBuilder::~OpenMPIRBuilder(llvm::OpenMPIRBuilder *this)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v4;

  free(*((void **)this + 246));
  sub_1C4926AE8((uint64_t)this + 1992);
  v2 = (_QWORD *)*((_QWORD *)this + 245);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  *((_QWORD *)this + 245) = 0;
  sub_1C626DBC8((char **)this + 67);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 64), 8);
  sub_1C61DF2A0((uint64_t)this + 480);
  v4 = (char *)*((_QWORD *)this + 43);
  if (v4 != (char *)this + 360)
    free(v4);
  sub_1C626DB38((char **)this);
}

char *llvm::OpenMPIRBuilder::createGlobalFlag(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  llvm::ConstantInt **v8;
  _DWORD *v9;
  uint64_t v10;
  llvm::ValueHandleBase *v11;
  int v12;
  unsigned int v13;
  _QWORD v15[4];
  __int16 v16;

  v8 = ***(llvm::ConstantInt *****)(a1 + 336);
  v9 = operator new(0x78uLL);
  v9[13] = v9[13] & 0x38000000 | 1;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *((_QWORD *)v9 + 3) = v9 + 8;
  v8 += 245;
  v10 = *(_QWORD *)(a1 + 336);
  v11 = llvm::ConstantInt::get(v8, a2, 0);
  v16 = 261;
  v15[0] = a3;
  v15[1] = a4;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v9 + 8), v10, (llvm::PointerType *)v8, 1, 5, (uint64_t)v11, (uint64_t)v15, 0, 0, 0, 0);
  v12 = v9[16];
  v13 = v12 & 0xFFFFFFCF | 0x10;
  v9[16] = v13;
  if ((v12 & 0xFu) - 7 >= 2)
  {
    if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)(v9 + 8)) & 1) != 0)
      return (char *)(v9 + 8);
    v13 = v9[16];
  }
  v9[16] = v13 | 0x4000;
  return (char *)(v9 + 8);
}

llvm::UndefValue *llvm::OpenMPIRBuilder::getOrCreateIdent(uint64_t a1, llvm::Value **a2, unsigned int a3, int a4, unsigned int a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  llvm::Type *v11;
  llvm::Type *v12;
  llvm::UndefValue *v13;
  _QWORD *v15;
  llvm::UndefValue *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  llvm::GlobalValue *v20;
  _DWORD *v21;
  uint64_t v22;
  llvm::PointerType *v23;
  uint64_t v24;
  _BYTE v25[32];
  __int16 v26;
  llvm::Value **NullValue;
  unint64_t v28;
  llvm::Value **v29;
  llvm::Value **v30;
  llvm::Value **v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v8 = a4 | 2u;
  v9 = a5;
  NullValue = a2;
  v28 = a5 | (unint64_t)((uint64_t)(int)v8 << 31);
  v10 = sub_1C626DDBC(a1 + 512, (uint64_t *)&NullValue);
  v13 = (llvm::UndefValue *)v10[2];
  if (!v13)
  {
    v15 = v10;
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 2120), v11);
    v28 = (unint64_t)llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), v8, 0);
    v29 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), v9, 0);
    v30 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), a3, 0);
    v31 = a2;
    v16 = llvm::ConstantStruct::get(*(llvm::ConstantAggregateZero **)(a1 + 2232), (llvm::Type *)&NullValue, 5);
    v17 = *(_QWORD *)(a1 + 336);
    v18 = v17 + 8;
    for (i = *(_QWORD *)(v17 + 16); i != v18; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v20 = (llvm::GlobalValue *)(i - 56);
      else
        v20 = 0;
      if (*((_QWORD *)v20 + 3) == *(_QWORD *)(a1 + 2232)
        && !llvm::GlobalValue::isDeclaration(v20)
        && *((llvm::UndefValue **)v20 - 4) == v16)
      {
        v15[2] = v20;
      }
    }
    v13 = (llvm::UndefValue *)v15[2];
    if (!v13)
    {
      v21 = operator new(0x78uLL);
      v13 = (llvm::UndefValue *)(v21 + 8);
      v21[13] = v21[13] & 0x38000000 | 1;
      *(_QWORD *)v21 = 0;
      *((_QWORD *)v21 + 1) = 0;
      *((_QWORD *)v21 + 2) = 0;
      *((_QWORD *)v21 + 3) = v21 + 8;
      v22 = *(_QWORD *)(a1 + 336);
      v23 = *(llvm::PointerType **)(a1 + 2232);
      v26 = 257;
      v24 = llvm::GlobalVariable::GlobalVariable((uint64_t)(v21 + 8), v22, v23, 1, 8, (uint64_t)v16, (uint64_t)v25, 0, 0, *(unsigned int *)(v22 + 288) | 0x100000000, 0);
      v21[16] = v21[16] & 0xFFFFFF3F | 0x80;
      llvm::GlobalObject::setAlignment(v24, 259);
      v15[2] = v21 + 8;
    }
  }
  return llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(v13, *(llvm::Constant **)(a1 + 2240), v12);
}

uint64_t llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(uint64_t a1, unsigned __int8 *a2, llvm::Type *a3, _DWORD *a4)
{
  size_t **v7;
  size_t *v8;
  uint64_t result;
  llvm::Value **String;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Value **v14;
  llvm::GlobalValue *v15;
  llvm::Type *v16;
  _BYTE v17[32];
  __int16 v18;

  *a4 = (_DWORD)a3;
  v7 = sub_1C6136E50(a1 + 480, a2, (size_t)a3);
  v8 = *v7;
  result = (*v7)[1];
  if (!result)
  {
    String = llvm::ConstantDataArray::getString(**(_QWORD **)(a1 + 336), (char *)a2, a3, 1);
    v11 = *(_QWORD *)(a1 + 336);
    v12 = v11 + 8;
    v13 = *(_QWORD *)(v11 + 16);
    if (v13 == v11 + 8)
    {
LABEL_12:
      v18 = 257;
      result = sub_1C62147C4(a1 + 344, (char *)a2, a3, (uint64_t)v17, 0, v11);
    }
    else
    {
      v14 = String;
      while (1)
      {
        v15 = v13 ? (llvm::GlobalValue *)(v13 - 56) : 0;
        if ((*((_BYTE *)v15 + 80) & 1) != 0
          && !llvm::GlobalValue::isDeclaration(v15)
          && *((llvm::Value ***)v15 - 4) == v14)
        {
          break;
        }
        v13 = *(_QWORD *)(v13 + 8);
        if (v13 == v12)
        {
          v11 = *(_QWORD *)(a1 + 336);
          goto LABEL_12;
        }
      }
      result = (uint64_t)llvm::ConstantExpr::getPointerCast(v15, *(llvm::Constant **)(a1 + 2136), v16);
    }
    v8[1] = result;
  }
  return result;
}

uint64_t llvm::OpenMPIRBuilder::getOrCreateDefaultSrcLocStr(llvm::OpenMPIRBuilder *this, unsigned int *a2)
{
  return llvm::OpenMPIRBuilder::getOrCreateSrcLocStr((uint64_t)this, ";unknown;unknown;0;0;;", (llvm::Type *)0x16, a2);
}

uint64_t llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  unsigned __int8 *v6;
  uint64_t SrcLocStr;
  unsigned __int8 *v9;

  v6 = (unsigned __int8 *)a2[2];
  v9 = v6;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)&v9, v6, 2);
  SrcLocStr = llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, (uint64_t *)&v9, a3, *(uint64_t ****)(*a2 + 56));
  if (v9)
    llvm::MetadataTracking::untrack((uint64_t)&v9, v9);
  return SrcLocStr;
}

uint64_t llvm::OpenMPIRBuilder::getOrCreateThreadID(llvm::OpenMPIRBuilder *this, llvm::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  const char *v7;
  __int16 v8;
  llvm::Value *v9;

  v9 = a2;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction((uint64_t)this, *((_QWORD *)this + 42), 4);
  if (*(_BYTE *)(v3 + 16))
    v4 = 0;
  else
    v4 = v3;
  if (v4)
    v5 = *(uint64_t ***)(v4 + 24);
  else
    v5 = 0;
  v7 = "omp_global_thread_num";
  v8 = 259;
  return sub_1C4774778((uint64_t *)this + 43, v5, v4, (uint64_t *)&v9, 1, (uint64_t)&v7, 0);
}

uint64_t llvm::OpenMPIRBuilder::createBarrier(uint64_t a1, uint64_t *a2, int a3, char a4, int a5)
{
  if (sub_1C62683AC(a1, a2))
    return llvm::OpenMPIRBuilder::emitBarrierImpl(a1, a2, a3, a4, a5);
  else
    return *a2;
}

BOOL sub_1C62683AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;

  v3 = a1 + 344;
  v4 = *a2;
  if (v4)
  {
    sub_1C4D8AE2C(a1 + 344, v4, a2[1]);
  }
  else
  {
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
  }
  v5 = (unsigned __int8 *)a2[2];
  v8 = v5;
  if (v5)
  {
    llvm::MetadataTracking::track((uint64_t)&v8, v5, 2);
    v6 = v8;
  }
  else
  {
    v6 = 0;
  }
  sub_1C4774EF4(v3, 0, (uint64_t)v6);
  if (v8)
    llvm::MetadataTracking::untrack((uint64_t)&v8, v8);
  return *a2 != 0;
}

uint64_t llvm::OpenMPIRBuilder::emitCancelationCheckImpl(uint64_t a1, llvm::Constant **a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  _QWORD ***v8;
  llvm *v9;
  _QWORD ***v10;
  llvm::BasicBlock *v11;
  uint64_t *v12;
  _QWORD **v13;
  unsigned __int8 *v14;
  llvm::Instruction *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  llvm::BasicBlock *v20;
  llvm::Type *v21;
  llvm::Value **NullValue;
  llvm::Value *v23;
  char *v24;
  uint64_t v25;
  unsigned __int8 **v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v33;
  char *Name;
  char *v35;
  uint64_t v36;
  void *v37;
  char *v38;
  const char *v39;
  __int16 v40;

  v7 = (uint64_t *)(a1 + 344);
  v9 = *(llvm **)(a1 + 392);
  v8 = *(_QWORD ****)(a1 + 400);
  v10 = (_QWORD ***)((char *)v9 + 40);
  if (v8 == (_QWORD ***)((char *)v9 + 40))
  {
    v33 = **(_QWORD ***)v9;
    Name = llvm::Value::getName(*(llvm::Value **)(a1 + 392));
    v40 = 773;
    v37 = Name;
    v38 = v35;
    v39 = ".cont";
    v36 = *((_QWORD *)v9 + 7);
    v12 = (uint64_t *)operator new();
    llvm::BasicBlock::BasicBlock((uint64_t)v12, v33, (uint64_t)&v37, v36, 0);
  }
  else
  {
    if (v8)
      v11 = (llvm::BasicBlock *)(v8 - 3);
    else
      v11 = 0;
    v40 = 257;
    v12 = (uint64_t *)sub_1C5EBD70C(v9, v11, 0, 0, 0, 0, (llvm::Twine *)&v37, 0);
    v13 = (_QWORD **)*((_QWORD *)v9 + 5);
    if (v13 == v10)
    {
      v15 = 0;
    }
    else
    {
      if (v13)
        v14 = (unsigned __int8 *)(v13 - 3);
      else
        v14 = 0;
      if (v14[16] - 29 >= 0xB)
        v15 = 0;
      else
        v15 = (llvm::Instruction *)v14;
    }
    llvm::Instruction::eraseFromParent(v15);
    *(_QWORD *)(a1 + 392) = v9;
    *(_QWORD *)(a1 + 400) = v10;
  }
  v16 = **(_QWORD ***)v9;
  v17 = llvm::Value::getName(v9);
  v40 = 773;
  v37 = v17;
  v38 = v18;
  v39 = ".cncl";
  v19 = *((_QWORD *)v9 + 7);
  v20 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock((uint64_t)v20, v16, (uint64_t)&v37, v19, 0);
  v40 = 257;
  NullValue = llvm::Constant::getNullValue(*a2, v21);
  v23 = (llvm::Value *)sub_1C4774B48((uint64_t)v7, 32, (uint64_t)a2, (uint64_t)NullValue, (uint64_t)&v37);
  v24 = (char *)operator new(0xA0uLL);
  v25 = 0;
  v26 = (unsigned __int8 **)(v24 + 96);
  *((_DWORD *)v24 + 29) = *((_DWORD *)v24 + 29) & 0x38000000 | 3;
  do
  {
    v27 = &v24[v25];
    *(_QWORD *)v27 = 0;
    *((_QWORD *)v27 + 1) = 0;
    *((_QWORD *)v27 + 2) = 0;
    *((_QWORD *)v27 + 3) = v26;
    v25 += 32;
  }
  while (v25 != 96);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v24 + 96), (llvm::BasicBlock *)v12, v20, v23, 0);
  v40 = 257;
  sub_1C4867F8C(v7, v26, (uint64_t)&v37);
  v28 = (char *)v20 + 40;
  *(_QWORD *)(a1 + 392) = v20;
  *(_QWORD *)(a1 + 400) = (char *)v20 + 40;
  v29 = *(_QWORD *)(a4 + 24);
  if (v29)
  {
    v37 = v20;
    v38 = (char *)v20 + 40;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v29 + 48))(v29, &v37);
    v20 = *(llvm::BasicBlock **)(a1 + 392);
    v28 = *(char **)(a1 + 400);
  }
  v30 = *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 8);
  v37 = v20;
  v38 = v28;
  v31 = *(_QWORD *)(v30 - 16);
  if (v31)
  {
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v31 + 48))(v31, &v37);
    return sub_1C4D8AE2C((uint64_t)v7, (uint64_t)v12, v12[6]);
  }
  else
  {
    sub_1C485C2F0();
    return llvm::OpenMPIRBuilder::createCancel();
  }
}

uint64_t llvm::OpenMPIRBuilder::createCancel(uint64_t a1, uint64_t *a2, llvm *a3, int a4)
{
  uint64_t v8;
  llvm::MDNode *v10;
  unsigned __int8 **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Value *v16;
  llvm::Value **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t v21;
  llvm::Constant **v22;
  unsigned __int8 *v23;
  uint64_t v24;
  char *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  unsigned __int8 *v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  unsigned __int8 *v35;
  unsigned int v36;
  llvm::Instruction *v37;
  unsigned __int8 **v38;
  char v39[24];
  char *v40;
  llvm::Value *v41[4];

  v41[3] = *(llvm::Value **)MEMORY[0x1E0C80C00];
  if (!sub_1C62683AC(a1, a2))
    return *a2;
  v11 = LLVMBuildUnreachable_0(a1 + 344);
  v37 = 0;
  v38 = v11;
  v12 = (uint64_t)v11;
  if (a3)
  {
    llvm::SplitBlockAndInsertIfThenElse(a3, (llvm::Value *)v11, (llvm::Instruction *)&v38, &v37, 0, v10);
    v12 = (uint64_t)v38;
  }
  sub_1C4EC1900(a1 + 344, v12);
  v13 = 1;
  v14 = 3;
  if (a4 != 53)
    v14 = 4;
  if (a4 == 33)
    v13 = 2;
  if (a4 <= 52)
    v15 = v13;
  else
    v15 = v14;
  v16 = llvm::ConstantInt::get((llvm::ConstantInt **)(**(_QWORD **)(a1 + 408) + 1960), v15, 0);
  v36 = 0;
  v17 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v36);
  v41[0] = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v17, v36, 0, 0);
  v41[1] = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, v41[0]);
  v41[2] = v16;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), 1);
  v19 = v18;
  v20 = 0;
  if (*(_BYTE *)(v19 + 16))
    v21 = 0;
  else
    v21 = v19;
  if (v21)
    v20 = *(uint64_t ***)(v21 + 24);
  LOWORD(v35) = 257;
  v22 = (llvm::Constant **)sub_1C4774778((uint64_t *)(a1 + 344), v20, v21, (uint64_t *)v41, 3, (uint64_t)&v32, 0);
  v32 = a1;
  v33 = a4;
  v34 = *(_OWORD *)a2;
  v23 = (unsigned __int8 *)a2[2];
  v35 = v23;
  if (v23)
  {
    llvm::MetadataTracking::track((uint64_t)&v35, v23, 2);
    v28 = v32;
    v29 = v33;
    v30 = v34;
    v31 = v35;
    if (v35)
      llvm::MetadataTracking::track((uint64_t)&v31, v35, 2);
  }
  else
  {
    v28 = v32;
    v29 = v33;
    v30 = *(_OWORD *)a2;
    v31 = 0;
  }
  v25 = (char *)operator new(0x30uLL);
  *(_QWORD *)v25 = &off_1E816D880;
  *((_QWORD *)v25 + 1) = v28;
  *((_DWORD *)v25 + 4) = v29;
  *(_OWORD *)(v25 + 24) = v30;
  v26 = v31;
  *((_QWORD *)v25 + 5) = v31;
  if (v26)
    llvm::MetadataTracking::track((uint64_t)(v25 + 40), v26, 2);
  v40 = v25;
  llvm::OpenMPIRBuilder::emitCancelationCheckImpl(a1, v22, v24, (uint64_t)v39);
  (*(void (**)(char *))(*(_QWORD *)v25 + 40))(v25);
  if (v31)
    llvm::MetadataTracking::untrack((uint64_t)&v31, v31);
  v27 = v11[5];
  *(_QWORD *)(a1 + 392) = v27;
  *(_QWORD *)(a1 + 400) = v27 + 40;
  llvm::Instruction::eraseFromParent((llvm::Instruction *)v11);
  v8 = *(_QWORD *)(a1 + 392);
  if (v35)
    llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
  return v8;
}

unint64_t sub_1C6268990(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  result = sub_1C54E7D28(a1, a2);
  v4 = result;
  v5 = *(_QWORD *)a1;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_QWORD *)a1 + 40 * v6;
  v8 = *(_QWORD *)(result + 24);
  if (v8)
  {
    if (v8 == result)
    {
      *(_QWORD *)(v7 + 24) = v7;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 24) + 24))(*(_QWORD *)(result + 24));
    }
    else
    {
      *(_QWORD *)(v7 + 24) = v8;
      *(_QWORD *)(result + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 24) = 0;
  }
  v9 = v5 + 40 * v6;
  v10 = *(_DWORD *)(v4 + 32);
  *(_BYTE *)(v9 + 36) = *(_BYTE *)(v4 + 36);
  *(_DWORD *)(v9 + 32) = v10;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

_QWORD *sub_1C6268A28(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;

  v4 = *a2;
  v5 = *((_DWORD *)a2 + 2);
  v6 = *a2 + 40 * v5;
  v7 = *(_QWORD *)(v6 - 16);
  if (v7)
  {
    if (v7 == v6 - 40)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 24))(v7, a1);
      v5 = *((_DWORD *)a2 + 2);
      v4 = *a2;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(v6 - 16) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  v8 = *(_DWORD *)(v6 - 8);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(v6 - 4);
  *(_DWORD *)(a1 + 32) = v8;
  v9 = v5 - 1;
  *((_DWORD *)a2 + 2) = v9;
  v10 = (_QWORD *)(v4 + 40 * v9);
  result = (_QWORD *)v10[3];
  if (result == v10)
  {
    v12 = 4;
    result = v10;
  }
  else
  {
    if (!result)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

uint64_t llvm::OpenMPIRBuilder::emitFlush(uint64_t a1, _QWORD *a2)
{
  llvm::Value **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  _WORD v8[22];
  unsigned int v9;
  uint64_t v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v3 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v9);
  v10[0] = (uint64_t)llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v3, v9, 0, 0);
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), 3);
  if (*(_BYTE *)(v4 + 16))
    v5 = 0;
  else
    v5 = v4;
  if (v5)
    v6 = *(uint64_t ***)(v5 + 24);
  else
    v6 = 0;
  v8[16] = 257;
  return sub_1C4774778((uint64_t *)(a1 + 344), v6, v5, v10, 1, (uint64_t)v8, 0);
}

uint64_t llvm::OpenMPIRBuilder::createFlush(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = sub_1C62683AC(a1, a2);
  if ((_DWORD)result)
    return llvm::OpenMPIRBuilder::emitFlush(a1, a2);
  return result;
}

uint64_t llvm::OpenMPIRBuilder::emitTaskwaitImpl(uint64_t *a1, _QWORD *a2)
{
  llvm::Value **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  _BYTE v8[32];
  __int16 v9;
  unsigned int v10;
  llvm::Value *v11[3];

  v11[2] = *(llvm::Value **)MEMORY[0x1E0C80C00];
  v10 = 0;
  v3 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr((uint64_t)a1, a2, &v10);
  v11[0] = llvm::OpenMPIRBuilder::getOrCreateIdent((uint64_t)a1, v3, v10, 0, 0);
  v11[1] = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, v11[0]);
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction((uint64_t)a1, a1[42], 7);
  if (*(_BYTE *)(v4 + 16))
    v5 = 0;
  else
    v5 = v4;
  if (v5)
    v6 = *(uint64_t ***)(v5 + 24);
  else
    v6 = 0;
  v9 = 257;
  return sub_1C4774778(a1 + 43, v6, v5, (uint64_t *)v11, 2, (uint64_t)v8, 0);
}

uint64_t llvm::OpenMPIRBuilder::createTaskwait(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;

  result = sub_1C62683AC((uint64_t)a1, a2);
  if ((_DWORD)result)
    return llvm::OpenMPIRBuilder::emitTaskwaitImpl(a1, a2);
  return result;
}

uint64_t llvm::OpenMPIRBuilder::emitTaskyieldImpl(uint64_t a1, _QWORD *a2)
{
  llvm::Value **v3;
  llvm::UndefValue *Ident;
  llvm::Type *v5;
  llvm::Value **NullValue;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  _WORD v11[22];
  unsigned int v12;
  uint64_t v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v12 = 0;
  v3 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v12);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v3, v12, 0, 0);
  NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 2120), v5);
  v13[0] = (uint64_t)Ident;
  v13[1] = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  v13[2] = (uint64_t)NullValue;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), 8);
  if (*(_BYTE *)(v7 + 16))
    v8 = 0;
  else
    v8 = v7;
  if (v8)
    v9 = *(uint64_t ***)(v8 + 24);
  else
    v9 = 0;
  v11[16] = 257;
  return sub_1C4774778((uint64_t *)(a1 + 344), v9, v8, v13, 3, (uint64_t)v11, 0);
}

uint64_t llvm::OpenMPIRBuilder::createTaskyield(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = sub_1C62683AC(a1, a2);
  if ((_DWORD)result)
    return llvm::OpenMPIRBuilder::emitTaskyieldImpl(a1, a2);
  return result;
}

llvm::BasicBlock **llvm::OpenMPIRBuilder::createSections(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::Type *a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10, uint64_t *a11)
{
  uint64_t v15;
  uint64_t *v17;
  void (**v18)(uint64_t *);
  llvm::ConstantInt *v19;
  uint64_t *v20;
  uint64_t *v21;
  llvm::Value **v22;
  llvm::BasicBlock **CanonicalLoop;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  llvm::BasicBlock *v30;
  llvm::BasicBlock *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void (**v38)(void);
  uint64_t v39;
  __int128 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  unsigned __int8 *v48;
  _QWORD v49[2];
  uint64_t v50;
  llvm::Type *v51;
  __int128 v52;
  uint64_t v53[3];
  uint64_t *v54;
  int v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v50 = a5;
  v51 = a6;
  if (!sub_1C62683AC(a1, a2))
    return (llvm::BasicBlock **)*a2;
  v53[0] = (uint64_t)&off_1E816D958;
  v53[1] = a9;
  v53[2] = a1;
  v54 = v53;
  v55 = 53;
  v56 = a10;
  sub_1C6268990(a1, (unint64_t)v53);
  v17 = v54;
  if (v54 == v53)
  {
    v18 = (void (**)(uint64_t *))(v53[0] + 32);
    v17 = v53;
LABEL_6:
    (*v18)(v17);
    goto LABEL_7;
  }
  if (v54)
  {
    v18 = (void (**)(uint64_t *))(*v54 + 40);
    goto LABEL_6;
  }
LABEL_7:
  v49[0] = a1;
  v49[1] = &v50;
  v19 = (llvm::ConstantInt *)(***(_QWORD ***)(a1 + 336) + 1960);
  v20 = (uint64_t *)llvm::ConstantInt::get(v19, 0, 0);
  v21 = (uint64_t *)llvm::ConstantInt::get(v19, (uint64_t)v51, 0);
  v22 = llvm::ConstantInt::get(v19, 1, 0);
  v53[0] = (uint64_t)"section_loop";
  LOWORD(v55) = 259;
  *((_QWORD *)&v47 + 1) = a4;
  *(_QWORD *)&v47 = a3;
  CanonicalLoop = llvm::OpenMPIRBuilder::createCanonicalLoop(a1, (__int128 *)a2, (uint64_t)sub_1C54E8F3C, (uint64_t)v49, v20, v21, (uint64_t)v22, 1, 0, v47, v53);
  v24 = 0;
  v25 = *(_QWORD *)(a3 + 40);
  if (v25 != a3 + 40)
  {
    if (v25)
      v26 = v25 - 24;
    else
      v26 = 0;
    if (*(unsigned __int8 *)(v26 + 16) - 29 >= 0xB)
      v24 = 0;
    else
      v24 = v26;
  }
  sub_1C4EC1900(a1 + 344, v24);
  v27 = *(_QWORD *)(a1 + 392);
  v28 = *(_QWORD *)(a1 + 400);
  v29 = (unsigned __int8 *)a2[2];
  v48 = v29;
  if (v29)
    llvm::MetadataTracking::track((uint64_t)&v48, v29, 2);
  llvm::OpenMPIRBuilder::applyStaticWorkshareLoop(a1, &v48, (llvm::CanonicalLoopInfo *)CanonicalLoop, v27, v28, BYTE1(a10) ^ 1);
  v31 = v30;
  if (v48)
    llvm::MetadataTracking::untrack((uint64_t)&v48, v48);
  v32 = (_QWORD *)*((_QWORD *)v31 + 5);
  if (v32 == (_QWORD *)((char *)v31 + 40)
    || ((v33 = v32 - 3, v32) ? (v34 = v32 - 3) : (v34 = 0), *((_BYTE *)v34 + 16) != 30))
  {
    v33 = operator new(0x40uLL);
    *((_DWORD *)v33 + 5) &= 0x38000000u;
    llvm::UnreachableInst::UnreachableInst((llvm::UnreachableInst *)v33, *(llvm::LLVMContext **)(a1 + 408), v31);
  }
  v53[0] = (uint64_t)"omp_sections.end";
  LOWORD(v55) = 259;
  v15 = llvm::BasicBlock::splitBasicBlock((uint64_t *)v31, v33 + 3, (uint64_t)v53, 0);
  llvm::Instruction::eraseFromParent((llvm::Instruction *)v33);
  sub_1C6268A28((uint64_t)v53, (uint64_t *)a1);
  v35 = (_QWORD *)*((_QWORD *)v31 + 5);
  if (v35 == (_QWORD *)((char *)v31 + 40))
  {
    v37 = 0;
  }
  else
  {
    if (v35)
      v36 = (uint64_t)(v35 - 3);
    else
      v36 = 0;
    if (*(unsigned __int8 *)(v36 + 16) - 29 >= 0xB)
      v37 = 0;
    else
      v37 = v36;
  }
  sub_1C4EC1900(a1 + 344, v37);
  v52 = *(_OWORD *)(a1 + 392);
  if (v54)
  {
    (*(void (**)(uint64_t *, __int128 *))(*v54 + 48))(v54, &v52);
    *(_QWORD *)(a1 + 392) = v15;
    *(_QWORD *)(a1 + 400) = v15 + 40;
    if (v54 == v53)
    {
      v38 = (void (**)(void))(v53[0] + 32);
    }
    else
    {
      if (!v54)
        return (llvm::BasicBlock **)v15;
      v38 = (void (**)(void))(*v54 + 40);
    }
    (*v38)();
    return (llvm::BasicBlock **)v15;
  }
  sub_1C485C2F0();
  return llvm::OpenMPIRBuilder::createCanonicalLoop(v39, v40, v41, v42, v43, v44, v45, v46, a9, a10, a11);
}

llvm::BasicBlock **llvm::OpenMPIRBuilder::createCanonicalLoop(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7, int a8, char a9, __int128 a10, uint64_t *a11)
{
  llvm::ConstantInt **v17;
  unsigned __int8 *v18;
  llvm::ValueHandleBase *v19;
  uint64_t v20;
  uint64_t *v21;
  llvm::Value *Select;
  llvm::Value *v23;
  llvm::Value *v24;
  uint64_t v25;
  __int16 v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Value *v30;
  __int16 v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  llvm::Value *v35;
  uint64_t v36;
  llvm::ConstantInt **v37;
  __int128 v38;
  llvm::BasicBlock **CanonicalLoop;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v45;
  uint64_t v47[4];
  __int16 v48;
  uint64_t v49[4];
  __int16 v50;
  __int128 v51;
  unsigned __int8 *v52;
  __int16 v53;
  __int128 v54;
  unsigned __int8 *v55[2];
  _QWORD v56[4];
  uint64_t v57;

  v17 = (llvm::ConstantInt **)*a5;
  if ((_QWORD)a10)
    v54 = a10;
  else
    v54 = *a2;
  v18 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
  v55[0] = v18;
  if (v18)
    llvm::MetadataTracking::track((uint64_t)v55, v18, 2);
  sub_1C62683AC(a1, (uint64_t *)&v54);
  v19 = llvm::ConstantInt::get(v17, 0, 0);
  v42 = (uint64_t *)llvm::ConstantInt::get(v17, 1, 0);
  v43 = (uint64_t *)v19;
  v45 = a7;
  if (a8)
  {
    LOWORD(v57) = 257;
    v20 = sub_1C4774B48(a1 + 344, 40, a7, (uint64_t)v19, (uint64_t)v56);
    LOWORD(v57) = 257;
    v21 = (uint64_t *)sub_1C5346748(a1 + 344, a7, (uint64_t)v56, 0, 0);
    v53 = 257;
    Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)(a1 + 344), v20, v21, a7, (uint64_t)&v51, 0);
    LOWORD(v57) = 257;
    v23 = llvm::IRBuilderBase::CreateSelect((uint64_t *)(a1 + 344), v20, a6, (uint64_t)a5, (uint64_t)v56, 0);
    LOWORD(v57) = 257;
    v24 = llvm::IRBuilderBase::CreateSelect((uint64_t *)(a1 + 344), v20, a5, (uint64_t)a6, (uint64_t)v56, 0);
    LOWORD(v57) = 257;
    v25 = sub_1C47733F8(a1 + 344, (uint64_t)v24, (uint64_t)v23, (uint64_t)v56, 0, 1);
    if (a9)
      v26 = 40;
    else
      v26 = 41;
    LOWORD(v57) = 257;
    v41 = sub_1C4774B48(a1 + 344, v26, (uint64_t)v24, (uint64_t)v23, (uint64_t)v56);
  }
  else
  {
    LOWORD(v57) = 257;
    v25 = sub_1C47733F8(a1 + 344, (uint64_t)a6, (uint64_t)a5, (uint64_t)v56, 1, 0);
    if (a9)
      v31 = 36;
    else
      v31 = 37;
    LOWORD(v57) = 257;
    v41 = sub_1C4774B48(a1 + 344, v31, (uint64_t)a6, (uint64_t)a5, (uint64_t)v56);
    Select = (llvm::Value *)a7;
  }
  if (a9)
  {
    v53 = 257;
    v27 = (_QWORD *)sub_1C538E6F8(a1 + 344, v25, (uint64_t)Select, (uint64_t)&v51, 0);
    v50 = 257;
    v28 = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 416) + 16))(*(_QWORD *)(a1 + 416), v27, v42, 0, 0);
    v29 = v45;
    if (!v28)
    {
      LOWORD(v57) = 257;
      v30 = llvm::BinaryOperator::Create(13, v27, (uint64_t)v42, (uint64_t)v56, 0);
      v28 = sub_1C4773754((uint64_t *)(a1 + 344), (uint64_t)v30, (uint64_t)v49);
    }
  }
  else
  {
    v53 = 257;
    v32 = sub_1C47733F8(a1 + 344, v25, (uint64_t)v42, (uint64_t)&v51, 0, 0);
    v50 = 257;
    v33 = (_QWORD *)sub_1C538E6F8(a1 + 344, v32, (uint64_t)Select, (uint64_t)v49, 0);
    v48 = 257;
    v34 = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 416) + 16))(*(_QWORD *)(a1 + 416), v33, v42, 0, 0);
    if (!v34)
    {
      LOWORD(v57) = 257;
      v35 = llvm::BinaryOperator::Create(13, v33, (uint64_t)v42, (uint64_t)v56, 0);
      v34 = sub_1C4773754((uint64_t *)(a1 + 344), (uint64_t)v35, (uint64_t)v47);
    }
    LOWORD(v57) = 257;
    v36 = sub_1C4774B48(a1 + 344, 37, v25, (uint64_t)Select, (uint64_t)v56);
    LOWORD(v57) = 257;
    v28 = (uint64_t)llvm::IRBuilderBase::CreateSelect((uint64_t *)(a1 + 344), v36, v42, v34, (uint64_t)v56, 0);
    v29 = v45;
  }
  v49[0] = (uint64_t)"omp_";
  v50 = 259;
  sub_1C4825FE4(v49, a11, (uint64_t)&v51);
  v47[0] = (uint64_t)".tripcount";
  v48 = 259;
  sub_1C4825FE4((uint64_t *)&v51, v47, (uint64_t)v56);
  v37 = (llvm::ConstantInt **)llvm::IRBuilderBase::CreateSelect((uint64_t *)(a1 + 344), v41, v43, v28, (uint64_t)v56, 0);
  v56[0] = a1;
  v56[1] = v29;
  v56[2] = a5;
  v56[3] = a3;
  v57 = a4;
  if ((_QWORD)a10)
    v38 = *a2;
  else
    v38 = *(_OWORD *)(a1 + 392);
  v51 = v38;
  v52 = 0;
  CanonicalLoop = llvm::OpenMPIRBuilder::createCanonicalLoop(a1, (uint64_t *)&v51, (void (*)(uint64_t))sub_1C54E9724, (uint64_t)v56, v37, a11);
  if (v52)
    llvm::MetadataTracking::untrack((uint64_t)&v52, v52);
  if (v55[0])
    llvm::MetadataTracking::untrack((uint64_t)v55, v55[0]);
  return CanonicalLoop;
}

double llvm::OpenMPIRBuilder::applyStaticWorkshareLoop(uint64_t a1, unsigned __int8 **a2, llvm::CanonicalLoopInfo *this, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t Preheader;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  llvm::Value **v15;
  llvm::PointerType *v16;
  int v17;
  llvm::PointerType *RuntimeFunction;
  uint64_t v19;
  llvm::PointerType *v20;
  uint64_t v21;
  llvm::PointerType *v22;
  unsigned __int8 **v23;
  unsigned __int8 **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  unsigned __int8 **v37;
  uint64_t ThreadID;
  unsigned __int8 *v39;
  llvm::Value *v40;
  _QWORD *v41;
  uint64_t v42;
  llvm::Value *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  llvm::CanonicalLoopInfo *v49;
  double result;
  unsigned __int8 *v51;
  uint64_t v52;
  unsigned __int8 **v53;
  unsigned __int8 **v54;
  llvm::ConstantInt *v55;
  uint64_t v56;
  uint64_t **v57;
  uint64_t v58;
  uint64_t **v59;
  unsigned __int8 *v61;
  llvm::UndefValue *Ident;
  llvm::Value *v63;
  unsigned __int8 *v64;
  unsigned int v65;
  unsigned __int8 *v66;
  llvm::CanonicalLoopInfo *v67;
  uint64_t v68[4];
  __int16 v69;
  __int128 v70;
  unsigned __int8 *v71;
  llvm::Value **v72;
  uint64_t v73;
  unsigned __int8 **v74;
  unsigned __int8 **v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v67 = this;
  Preheader = llvm::CanonicalLoopInfo::getPreheader(this);
  if (Preheader)
  {
    sub_1C4D8AE2C(a1 + 344, Preheader, *(_QWORD *)(Preheader + 40));
  }
  else
  {
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
  }
  v12 = *a2;
  v66 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track((uint64_t)&v66, v12, 2);
    v13 = v66;
  }
  else
  {
    v13 = 0;
  }
  sub_1C4774EF4(a1 + 344, 0, (uint64_t)v13);
  if (v66)
    llvm::MetadataTracking::untrack((uint64_t)&v66, v66);
  v65 = 0;
  v61 = (unsigned __int8 *)a2;
  v14 = *a2;
  v64 = v14;
  if (v14)
    llvm::MetadataTracking::track((uint64_t)&v64, v14, 2);
  v15 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, (uint64_t *)&v64, &v65, 0);
  if (v64)
    llvm::MetadataTracking::untrack((uint64_t)&v64, v64);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v15, v65, 0, 0);
  v16 = *(llvm::PointerType **)(*(_QWORD *)(*(_QWORD *)this + 48) - 24);
  if ((*((_DWORD *)v16 + 2) & 0xFFFFFF00) == 0x2000)
    v17 = 59;
  else
    v17 = 61;
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), v17);
  v56 = v19;
  v57 = (uint64_t **)RuntimeFunction;
  v20 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), 62);
  v58 = v21;
  v59 = (uint64_t **)v20;
  if (a4)
  {
    sub_1C4D8AE2C(a1 + 344, a4, a5);
  }
  else
  {
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
  }
  v22 = (llvm::PointerType *)(***(_QWORD ***)(a1 + 336) + 1960);
  *(_QWORD *)&v70 = "p.lastiter";
  LOWORD(v73) = 259;
  v55 = v22;
  v54 = sub_1C486A5CC((uint64_t *)(a1 + 344), v22, 0, (uint64_t)&v70);
  *(_QWORD *)&v70 = "p.lowerbound";
  LOWORD(v73) = 259;
  v23 = sub_1C486A5CC((uint64_t *)(a1 + 344), v16, 0, (uint64_t)&v70);
  *(_QWORD *)&v70 = "p.upperbound";
  LOWORD(v73) = 259;
  v53 = sub_1C486A5CC((uint64_t *)(a1 + 344), v16, 0, (uint64_t)&v70);
  *(_QWORD *)&v70 = "p.stride";
  LOWORD(v73) = 259;
  v24 = sub_1C486A5CC((uint64_t *)(a1 + 344), v16, 0, (uint64_t)&v70);
  v25 = llvm::CanonicalLoopInfo::getPreheader(this);
  v26 = 0;
  v27 = *(_QWORD *)(v25 + 40);
  if (v27 != v25 + 40)
  {
    if (v27)
      v28 = v27 - 24;
    else
      v28 = 0;
    if (*(unsigned __int8 *)(v28 + 16) - 29 >= 0xB)
      v26 = 0;
    else
      v26 = v28;
  }
  sub_1C4EC1900(a1 + 344, v26);
  v29 = (uint64_t *)llvm::ConstantInt::get(v16, 0, 0);
  v30 = (uint64_t *)llvm::ConstantInt::get(v16, 1, 0);
  sub_1C509CCE8((uint64_t *)(a1 + 344), v29, (uint64_t)v23, 0, 0);
  v31 = *(_QWORD *)(*((_QWORD *)this + 1) + 48);
  if (v31)
    v32 = v31 - 24;
  else
    v32 = 0;
  v33 = *(_DWORD *)(v32 + 20);
  v52 = (uint64_t)v23;
  if ((v33 & 0x40000000) != 0)
    v34 = *(_QWORD *)(v32 - 8);
  else
    v34 = v32 - 32 * (v33 & 0x7FFFFFF);
  v35 = *(_QWORD *)(v34 + 32);
  LOWORD(v73) = 257;
  v36 = (uint64_t *)sub_1C47733F8(a1 + 344, v35, (uint64_t)v30, (uint64_t)&v70, 0, 0);
  sub_1C509CCE8((uint64_t *)(a1 + 344), v36, (uint64_t)v53, 0, 0);
  sub_1C509CCE8((uint64_t *)(a1 + 344), v30, (uint64_t)v24, 0, 0);
  v37 = v24;
  ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  v39 = (unsigned __int8 *)llvm::ConstantInt::get(v55, 34, 0);
  *(_QWORD *)&v70 = Ident;
  *((_QWORD *)&v70 + 1) = ThreadID;
  v71 = v39;
  v72 = (llvm::Value **)v54;
  v73 = v52;
  v74 = v53;
  v75 = v37;
  v76 = v30;
  v77 = v29;
  v69 = 257;
  sub_1C4774778((uint64_t *)(a1 + 344), v57, v56, (uint64_t *)&v70, 9, (uint64_t)v68, 0);
  LOWORD(v73) = 257;
  v63 = sub_1C506D920((uint64_t *)(a1 + 344), (uint64_t)v16, v52, 0, 0, (uint64_t)&v70);
  LOWORD(v73) = 257;
  v40 = sub_1C506D920((uint64_t *)(a1 + 344), (uint64_t)v16, (uint64_t)v53, 0, 0, (uint64_t)&v70);
  LOWORD(v73) = 257;
  v41 = (_QWORD *)sub_1C47733F8(a1 + 344, (uint64_t)v40, (uint64_t)v63, (uint64_t)&v70, 0, 0);
  v69 = 257;
  v42 = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 416) + 16))(*(_QWORD *)(a1 + 416), v41, v30, 0, 0);
  if (!v42)
  {
    LOWORD(v73) = 257;
    v43 = llvm::BinaryOperator::Create(13, v41, (uint64_t)v30, (uint64_t)&v70, 0);
    v42 = sub_1C4773754((uint64_t *)(a1 + 344), (uint64_t)v43, (uint64_t)v68);
  }
  v44 = *(_QWORD *)(*((_QWORD *)this + 1) + 48);
  if (v44)
    v45 = v44 - 24;
  else
    v45 = 0;
  sub_1C54E614C(v45, 1u, v42);
  *(_QWORD *)&v70 = a1;
  *((_QWORD *)&v70 + 1) = &v67;
  v71 = v61;
  v72 = &v63;
  llvm::CanonicalLoopInfo::mapIndVar(this, (uint64_t (*)(uint64_t, uint64_t))sub_1C54E9898, (uint64_t)&v70);
  v46 = *((_QWORD *)v67 + 3);
  v47 = *(_QWORD *)(v46 + 40);
  if (v47 == v46 + 40)
  {
    v48 = 0;
  }
  else
  {
    if (v47)
      v48 = v47 - 24;
    else
      v48 = 0;
    if (*(unsigned __int8 *)(v48 + 16) - 29 >= 0xB)
      v48 = 0;
  }
  sub_1C4D8AE2C(a1 + 344, *((_QWORD *)v67 + 3), v48 + 24);
  v68[0] = (uint64_t)Ident;
  v68[1] = ThreadID;
  LOWORD(v73) = 257;
  sub_1C4774778((uint64_t *)(a1 + 344), v59, v58, v68, 2, (uint64_t)&v70, 0);
  if (a6)
  {
    v70 = *(_OWORD *)(a1 + 392);
    v51 = *(unsigned __int8 **)v61;
    v71 = v51;
    if (v51)
      llvm::MetadataTracking::track((uint64_t)&v71, v51, 2);
    if (sub_1C62683AC(a1, (uint64_t *)&v70))
      llvm::OpenMPIRBuilder::emitBarrierImpl(a1, &v70, 33, 0, 0);
    if (v71)
      llvm::MetadataTracking::untrack((uint64_t)&v71, v71);
  }
  llvm::BasicBlock::getSingleSuccessor(*((llvm::BasicBlock **)v67 + 3));
  v49 = v67;
  result = 0.0;
  *(_OWORD *)v67 = 0u;
  *((_OWORD *)v49 + 1) = 0u;
  return result;
}

llvm::BasicBlock *llvm::OpenMPIRBuilder::createSection(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, llvm::BasicBlock *), uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  llvm::BasicBlock *v11;
  void (*v12)(void);
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!sub_1C62683AC(a1, a2))
    return (llvm::BasicBlock *)*a2;
  v10 = operator new(0x20uLL);
  *v10 = &off_1E816D9A0;
  v10[1] = a5;
  v10[2] = a1;
  v10[3] = a2;
  v15 = v10;
  v11 = llvm::OpenMPIRBuilder::EmitOMPInlinedRegion(a1, 53, 0, 0, a3, a4, v14, 0, 1u, 1);
  if (v15 == v14)
  {
    v12 = *(void (**)(void))(v14[0] + 32);
    goto LABEL_5;
  }
  if (v15)
  {
    v12 = *(void (**)(void))(*v15 + 40);
LABEL_5:
    v12();
  }
  return v11;
}

uint64_t sub_1C6269D18(uint64_t a1, llvm::GetElementPtrInst *a2, uint64_t *a3, llvm::IntegerType *a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _WORD v17[20];
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  v18[0] = llvm::ConstantInt::get((llvm::ConstantInt **)(**(_QWORD **)(a1 + 64) + 1984), (uint64_t)a4, 0);
  v18[1] = llvm::ConstantInt::get((llvm::ConstantInt **)(**(_QWORD **)(a1 + 64) + 1984), a5, 0);
  result = (*(uint64_t (**)(_QWORD, llvm::GetElementPtrInst *, uint64_t *, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 48))(*(_QWORD *)(a1 + 72), a2, a3, v18, 2, 1);
  if (!result)
  {
    v17[16] = 257;
    v12 = operator new(0xB0uLL);
    v13 = v12;
    v14 = 0;
    v15 = (uint64_t)(v12 + 24);
    v12[29] = v12[29] & 0x38000000 | 3;
    do
    {
      v16 = &v12[v14];
      *v16 = 0;
      v16[1] = 0;
      v16[2] = 0;
      v16[3] = v15;
      v14 += 8;
    }
    while (v14 != 24);
    sub_1C477449C((uint64_t)(v12 + 24), a2, a3, (llvm::Value *)v18, 2, 3, (uint64_t)v17, 0);
    *((_BYTE *)v13 + 113) |= 2u;
    return sub_1C477438C((uint64_t *)a1, v15, a6);
  }
  return result;
}

llvm::BasicBlock *llvm::OpenMPIRBuilder::createMaster(uint64_t *a1, uint64_t *a2, void (*a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, llvm::BasicBlock *), uint64_t a4, _QWORD *a5)
{
  llvm::BasicBlock *v10;
  llvm::Value **v12;
  llvm::UndefValue *Ident;
  uint64_t ThreadID;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  llvm::Constant **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t v23;
  _QWORD *v24;
  void (**v25)(void);
  _BYTE v26[32];
  __int16 v27;
  unsigned int v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31[3];

  v31[2] = *MEMORY[0x1E0C80C00];
  if (sub_1C62683AC((uint64_t)a1, a2))
  {
    v28 = 0;
    v12 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr((uint64_t)a1, a2, &v28);
    Ident = llvm::OpenMPIRBuilder::getOrCreateIdent((uint64_t)a1, v12, v28, 0, 0);
    ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
    v31[0] = (uint64_t)Ident;
    v31[1] = ThreadID;
    llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction((uint64_t)a1, a1[42], 43);
    v16 = v15;
    v17 = 0;
    if (*(_BYTE *)(v16 + 16))
      v18 = 0;
    else
      v18 = v16;
    if (v18)
      v17 = *(uint64_t ***)(v18 + 24);
    v27 = 257;
    v19 = (llvm::Constant **)sub_1C4774778(a1 + 43, v17, v18, v31, 2, (uint64_t)v26, 0);
    llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction((uint64_t)a1, a1[42], 44);
    if (*(_BYTE *)(v20 + 16))
      v21 = 0;
    else
      v21 = v20;
    if (v21)
      v22 = *(uint64_t ***)(v21 + 24);
    else
      v22 = 0;
    v27 = 257;
    v23 = sub_1C4774778(a1 + 43, v22, v21, v31, 2, (uint64_t)v26, 0);
    v24 = (_QWORD *)a5[3];
    if (v24)
    {
      if (v24 == a5)
      {
        v30 = v29;
        (*(void (**)(_QWORD *, _QWORD *))(*a5 + 24))(a5, v29);
      }
      else
      {
        v30 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v24 + 16))(v24);
      }
    }
    else
    {
      v30 = 0;
    }
    v10 = llvm::OpenMPIRBuilder::EmitOMPInlinedRegion((uint64_t)a1, 35, v19, v23, a3, a4, v29, 1, 1u, 0);
    if (v30 == v29)
    {
      v25 = (void (**)(void))(v29[0] + 32);
    }
    else
    {
      if (!v30)
        return v10;
      v25 = (void (**)(void))(*v30 + 40);
    }
    (*v25)();
    return v10;
  }
  return (llvm::BasicBlock *)*a2;
}

llvm::BasicBlock *llvm::OpenMPIRBuilder::createMasked(uint64_t *a1, uint64_t *a2, void (*a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, llvm::BasicBlock *), uint64_t a4, _QWORD *a5, uint64_t a6)
{
  llvm::BasicBlock *v12;
  llvm::Value **v14;
  llvm::UndefValue *Ident;
  uint64_t ThreadID;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t v20;
  llvm::Constant **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  _QWORD *v26;
  void (**v27)(void);
  _BYTE v28[32];
  __int16 v29;
  unsigned int v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33[2];
  uint64_t v34[4];

  v34[3] = *MEMORY[0x1E0C80C00];
  if (sub_1C62683AC((uint64_t)a1, a2))
  {
    v30 = 0;
    v14 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr((uint64_t)a1, a2, &v30);
    Ident = llvm::OpenMPIRBuilder::getOrCreateIdent((uint64_t)a1, v14, v30, 0, 0);
    ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
    v34[0] = (uint64_t)Ident;
    v34[1] = ThreadID;
    v34[2] = a6;
    v33[0] = (uint64_t)Ident;
    v33[1] = ThreadID;
    llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction((uint64_t)a1, a1[42], 45);
    v18 = v17;
    v19 = 0;
    if (*(_BYTE *)(v18 + 16))
      v20 = 0;
    else
      v20 = v18;
    if (v20)
      v19 = *(uint64_t ***)(v20 + 24);
    v29 = 257;
    v21 = (llvm::Constant **)sub_1C4774778(a1 + 43, v19, v20, v34, 3, (uint64_t)v28, 0);
    llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction((uint64_t)a1, a1[42], 46);
    if (*(_BYTE *)(v22 + 16))
      v23 = 0;
    else
      v23 = v22;
    if (v23)
      v24 = *(uint64_t ***)(v23 + 24);
    else
      v24 = 0;
    v29 = 257;
    v25 = sub_1C4774778(a1 + 43, v24, v23, v33, 2, (uint64_t)v28, 0);
    v26 = (_QWORD *)a5[3];
    if (v26)
    {
      if (v26 == a5)
      {
        v32 = v31;
        (*(void (**)(_QWORD *, _QWORD *))(*a5 + 24))(a5, v31);
      }
      else
      {
        v32 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v26 + 16))(v26);
      }
    }
    else
    {
      v32 = 0;
    }
    v12 = llvm::OpenMPIRBuilder::EmitOMPInlinedRegion((uint64_t)a1, 95, v21, v25, a3, a4, v31, 1, 1u, 0);
    if (v32 == v31)
    {
      v27 = (void (**)(void))(v31[0] + 32);
    }
    else
    {
      if (!v32)
        return v12;
      v27 = (void (**)(void))(*v32 + 40);
    }
    (*v27)();
    return v12;
  }
  return (llvm::BasicBlock *)*a2;
}

_QWORD *llvm::OpenMPIRBuilder::createLoopSkeleton(uint64_t a1, unsigned __int8 **a2, llvm::ConstantInt **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  _QWORD *v12;
  uint64_t v13;
  llvm::BasicBlock *v14;
  llvm::BasicBlock *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  char *v18;
  unsigned __int8 **v19;
  llvm::PHINode *v20;
  llvm::Value **v21;
  char *v22;
  unsigned __int8 **v23;
  llvm::Value *v24;
  char *v25;
  uint64_t v26;
  unsigned __int8 **v27;
  char *v28;
  char *v29;
  unsigned __int8 **v30;
  llvm::Value **v31;
  uint64_t v32;
  llvm::Value *v33;
  char *v34;
  unsigned __int8 **v35;
  char *v36;
  unsigned __int8 **v37;
  uint64_t v38;
  _QWORD *v39;
  llvm::BasicBlock *v41;
  llvm::BasicBlock *v42;
  llvm::ConstantInt *v45;
  llvm::BasicBlock *v46;
  llvm::BasicBlock *v47;
  const char *v48;
  __int16 v49;
  unsigned __int8 *v50;
  uint64_t v51[4];
  __int16 v52;
  uint64_t v53[4];
  __int16 v54;
  uint64_t v55[5];
  _BYTE v56[32];
  __int16 v57;

  v12 = **(_QWORD ***)(a4 + 40);
  v45 = *a3;
  v53[0] = (uint64_t)"omp_";
  v54 = 259;
  sub_1C4825FE4(v53, a7, (uint64_t)v55);
  v51[0] = (uint64_t)".preheader";
  v52 = 259;
  sub_1C4825FE4(v55, v51, (uint64_t)v56);
  v13 = operator new();
  llvm::BasicBlock::BasicBlock(v13, v12, (uint64_t)v56, a4, a5);
  v53[0] = (uint64_t)"omp_";
  v54 = 259;
  sub_1C4825FE4(v53, a7, (uint64_t)v55);
  v51[0] = (uint64_t)".header";
  v52 = 259;
  sub_1C4825FE4(v55, v51, (uint64_t)v56);
  v47 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock((uint64_t)v47, v12, (uint64_t)v56, a4, a5);
  v53[0] = (uint64_t)"omp_";
  v54 = 259;
  sub_1C4825FE4(v53, a7, (uint64_t)v55);
  v51[0] = (uint64_t)".cond";
  v52 = 259;
  sub_1C4825FE4(v55, v51, (uint64_t)v56);
  v46 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock((uint64_t)v46, v12, (uint64_t)v56, a4, a5);
  v53[0] = (uint64_t)"omp_";
  v54 = 259;
  sub_1C4825FE4(v53, a7, (uint64_t)v55);
  v51[0] = (uint64_t)".body";
  v52 = 259;
  sub_1C4825FE4(v55, v51, (uint64_t)v56);
  v41 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock((uint64_t)v41, v12, (uint64_t)v56, a4, a5);
  v53[0] = (uint64_t)"omp_";
  v54 = 259;
  sub_1C4825FE4(v53, a7, (uint64_t)v55);
  v51[0] = (uint64_t)".inc";
  v52 = 259;
  sub_1C4825FE4(v55, v51, (uint64_t)v56);
  v14 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock((uint64_t)v14, v12, (uint64_t)v56, a4, a6);
  v53[0] = (uint64_t)"omp_";
  v54 = 259;
  sub_1C4825FE4(v53, a7, (uint64_t)v55);
  v51[0] = (uint64_t)".exit";
  v52 = 259;
  sub_1C4825FE4(v55, v51, (uint64_t)v56);
  v15 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock((uint64_t)v15, v12, (uint64_t)v56, a4, a6);
  v53[0] = (uint64_t)"omp_";
  v54 = 259;
  sub_1C4825FE4(v53, a7, (uint64_t)v55);
  v51[0] = (uint64_t)".after";
  v52 = 259;
  sub_1C4825FE4(v55, v51, (uint64_t)v56);
  v42 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock((uint64_t)v42, v12, (uint64_t)v56, a4, a6);
  v16 = *a2;
  v50 = v16;
  if (v16)
  {
    llvm::MetadataTracking::track((uint64_t)&v50, v16, 2);
    v17 = v50;
  }
  else
  {
    v17 = 0;
  }
  sub_1C4774EF4(a1 + 344, 0, (uint64_t)v17);
  if (v50)
    llvm::MetadataTracking::untrack((uint64_t)&v50, v50);
  *(_QWORD *)(a1 + 392) = v13;
  *(_QWORD *)(a1 + 400) = v13 + 40;
  v18 = (char *)operator new(0x60uLL);
  *((_DWORD *)v18 + 13) = *((_DWORD *)v18 + 13) & 0x38000000 | 1;
  v19 = (unsigned __int8 **)(v18 + 32);
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *((_QWORD *)v18 + 3) = v18 + 32;
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v18 + 32), v47, 0);
  v57 = 257;
  sub_1C4867F8C((uint64_t *)(a1 + 344), v19, (uint64_t)v56);
  *(_QWORD *)(a1 + 392) = v47;
  *(_QWORD *)(a1 + 400) = (char *)v47 + 40;
  v53[0] = (uint64_t)"omp_";
  v54 = 259;
  sub_1C4825FE4(v53, a7, (uint64_t)v55);
  v51[0] = (uint64_t)".iv";
  v52 = 259;
  sub_1C4825FE4(v55, v51, (uint64_t)v56);
  v20 = (llvm::PHINode *)sub_1C4867E94(a1 + 344, (uint64_t)v45, 2, (uint64_t)v56);
  v21 = llvm::ConstantInt::get(v45, 0, 0);
  sub_1C477667C(v20, (uint64_t)v21, v13);
  v22 = (char *)operator new(0x60uLL);
  *((_DWORD *)v22 + 13) = *((_DWORD *)v22 + 13) & 0x38000000 | 1;
  v23 = (unsigned __int8 **)(v22 + 32);
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *((_QWORD *)v22 + 3) = v22 + 32;
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v22 + 32), v46, 0);
  v57 = 257;
  sub_1C4867F8C((uint64_t *)(a1 + 344), v23, (uint64_t)v56);
  *(_QWORD *)(a1 + 392) = v46;
  *(_QWORD *)(a1 + 400) = (char *)v46 + 40;
  v53[0] = (uint64_t)"omp_";
  v54 = 259;
  sub_1C4825FE4(v53, a7, (uint64_t)v55);
  v51[0] = (uint64_t)".cmp";
  v52 = 259;
  sub_1C4825FE4(v55, v51, (uint64_t)v56);
  v24 = (llvm::Value *)sub_1C4774B48(a1 + 344, 36, (uint64_t)v20, (uint64_t)a3, (uint64_t)v56);
  v25 = (char *)operator new(0xA0uLL);
  v26 = 0;
  v27 = (unsigned __int8 **)(v25 + 96);
  *((_DWORD *)v25 + 29) = *((_DWORD *)v25 + 29) & 0x38000000 | 3;
  do
  {
    v28 = &v25[v26];
    *(_QWORD *)v28 = 0;
    *((_QWORD *)v28 + 1) = 0;
    *((_QWORD *)v28 + 2) = 0;
    *((_QWORD *)v28 + 3) = v27;
    v26 += 32;
  }
  while (v26 != 96);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v25 + 96), v41, v15, v24, 0);
  v57 = 257;
  sub_1C4867F8C((uint64_t *)(a1 + 344), v27, (uint64_t)v56);
  *(_QWORD *)(a1 + 392) = v41;
  *(_QWORD *)(a1 + 400) = (char *)v41 + 40;
  v29 = (char *)operator new(0x60uLL);
  *((_DWORD *)v29 + 13) = *((_DWORD *)v29 + 13) & 0x38000000 | 1;
  v30 = (unsigned __int8 **)(v29 + 32);
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0;
  *((_QWORD *)v29 + 2) = 0;
  *((_QWORD *)v29 + 3) = v29 + 32;
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v29 + 32), v14, 0);
  v57 = 257;
  sub_1C4867F8C((uint64_t *)(a1 + 344), v30, (uint64_t)v56);
  *(_QWORD *)(a1 + 392) = v14;
  *(_QWORD *)(a1 + 400) = (char *)v14 + 40;
  v31 = llvm::ConstantInt::get(v45, 1, 0);
  v51[0] = (uint64_t)"omp_";
  v52 = 259;
  sub_1C4825FE4(v51, a7, (uint64_t)v53);
  v48 = ".next";
  v49 = 259;
  sub_1C4825FE4(v53, (uint64_t *)&v48, (uint64_t)v55);
  v32 = (*(uint64_t (**)(_QWORD, llvm::PHINode *, llvm::Value **, uint64_t, _QWORD))(**(_QWORD **)(a1 + 416)
                                                                                            + 16))(*(_QWORD *)(a1 + 416), v20, v31, 1, 0);
  if (!v32)
  {
    v57 = 257;
    v33 = llvm::BinaryOperator::Create(13, v20, (uint64_t)v31, (uint64_t)v56, 0);
    v32 = sub_1C4773754((uint64_t *)(a1 + 344), (uint64_t)v33, (uint64_t)v55);
    *(_BYTE *)(v32 + 17) |= 2u;
  }
  v34 = (char *)operator new(0x60uLL);
  *((_DWORD *)v34 + 13) = *((_DWORD *)v34 + 13) & 0x38000000 | 1;
  v35 = (unsigned __int8 **)(v34 + 32);
  *(_QWORD *)v34 = 0;
  *((_QWORD *)v34 + 1) = 0;
  *((_QWORD *)v34 + 2) = 0;
  *((_QWORD *)v34 + 3) = v34 + 32;
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v34 + 32), v47, 0);
  v57 = 257;
  sub_1C4867F8C((uint64_t *)(a1 + 344), v35, (uint64_t)v56);
  sub_1C477667C(v20, v32, (uint64_t)v14);
  *(_QWORD *)(a1 + 392) = v15;
  *(_QWORD *)(a1 + 400) = (char *)v15 + 40;
  v36 = (char *)operator new(0x60uLL);
  *((_DWORD *)v36 + 13) = *((_DWORD *)v36 + 13) & 0x38000000 | 1;
  v37 = (unsigned __int8 **)(v36 + 32);
  *(_QWORD *)v36 = 0;
  *((_QWORD *)v36 + 1) = 0;
  *((_QWORD *)v36 + 2) = 0;
  *((_QWORD *)v36 + 3) = v36 + 32;
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v36 + 32), v42, 0);
  v57 = 257;
  sub_1C4867F8C((uint64_t *)(a1 + 344), v37, (uint64_t)v56);
  v38 = *(_QWORD *)(a1 + 1960);
  v39 = operator new(0x28uLL);
  *v39 = v38;
  *(_QWORD *)(a1 + 1960) = v39;
  v39[2] = v46;
  v39[3] = v14;
  v39[4] = v15;
  v39[1] = v47;
  return v39 + 1;
}

__n128 llvm::CanonicalLoopInfo::collectControlBlocks(llvm::BasicBlock **this, uint64_t a2)
{
  unint64_t v4;
  uint64_t Preheader;
  llvm::BasicBlock *v6;
  llvm::BasicBlock *v7;
  uint64_t SingleSuccessor;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  __n128 v12;

  v4 = *(unsigned int *)(a2 + 8) + 6;
  if (v4 > *(unsigned int *)(a2 + 12))
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v4, 8);
  Preheader = llvm::CanonicalLoopInfo::getPreheader((llvm::CanonicalLoopInfo *)this);
  v12 = *(__n128 *)this;
  v7 = this[2];
  v6 = this[3];
  SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(v6);
  v9 = *(unsigned int *)(a2 + 8);
  if (v9 + 6 > (unint64_t)*(unsigned int *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v9 + 6, 8);
    v9 = *(unsigned int *)(a2 + 8);
  }
  v10 = *(_QWORD *)a2 + 8 * v9;
  *(_QWORD *)v10 = Preheader;
  result = v12;
  *(__n128 *)(v10 + 8) = v12;
  *(_QWORD *)(v10 + 24) = v7;
  *(_QWORD *)(v10 + 32) = v6;
  *(_QWORD *)(v10 + 40) = SingleSuccessor;
  *(_DWORD *)(a2 + 8) += 6;
  return result;
}

void llvm::OpenMPIRBuilder::tileLoops(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, _OWORD **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _OWORD **v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::BasicBlock ***v15;
  llvm::BasicBlock **v16;
  uint64_t v17;
  _OWORD **v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void ***v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t Preheader;
  uint64_t v39;
  uint64_t v40;
  llvm::ConstantInt **v41;
  llvm::ConstantInt *v42;
  _QWORD *v43;
  unsigned __int8 *v44;
  llvm::Value **v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  llvm::Value *v49;
  uint64_t v50;
  uint64_t v51;
  llvm::BasicBlock *v52;
  uint64_t SingleSuccessor;
  unsigned __int8 *v54;
  llvm::BasicBlock *v55;
  char *v56;
  uint64_t v57;
  llvm::ConstantInt ***v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  llvm::Value *Select;
  uint64_t v67;
  unsigned int v68;
  llvm::BasicBlock *v69;
  char **v70;
  char ***v71;
  char ***v72;
  char **v73;
  char **v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  unsigned __int8 **v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 **v80;
  unsigned __int8 *v81;
  char **v82;
  unsigned __int8 *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  llvm::ValueAsMetadata *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  llvm::Value *v97;
  llvm::Value *v98;
  _OWORD *v99;
  _OWORD *v100;
  unsigned __int8 *v101;
  uint64_t v102;
  llvm::BasicBlock **v103;
  unsigned __int8 *v104;
  uint64_t v105;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  uint64_t v115;
  unsigned __int8 *v116[3];
  llvm::BasicBlock **v117;
  char ***v118;
  uint64_t *v119;
  uint64_t v120;
  char **v121;
  llvm::BasicBlock *v122[4];
  __int16 v123;
  llvm::CanonicalLoopInfo ***v124[4];
  __int16 v125;
  uint64_t v126[4];
  __int16 v127;
  unsigned __int8 *v128;
  uint64_t v129[4];
  __int16 v130;
  void *v131;
  uint64_t v132;
  _WORD v133[16];
  void *v134;
  uint64_t v135;
  _BYTE v136[32];
  void *v137;
  uint64_t v138;
  _BYTE v139[32];
  void *v140;
  uint64_t v141;
  _BYTE v142[64];
  void *v143;
  uint64_t v144;
  _BYTE v145[32];
  void *v146;
  uint64_t v147;
  _BYTE v148[32];
  uint64_t *v149;
  uint64_t v150;
  _QWORD v151[14];

  v7 = a3;
  v151[12] = *MEMORY[0x1E0C80C00];
  v8 = a3[a4 - 1];
  v103 = (llvm::BasicBlock **)*a3;
  v9 = *(_QWORD *)(*((_QWORD *)*a3 + 1) + 40);
  if (v9)
    v10 = v9 - 24;
  else
    v10 = 0;
  if (*(unsigned __int8 *)(v10 + 16) - 29 >= 0xB)
    v10 = 0;
  v100 = a3[a4 - 1];
  v101 = *(unsigned __int8 **)(*(_QWORD *)(v10 - 32) + 56);
  v102 = *((_QWORD *)v8 + 2);
  v11 = *(_QWORD *)(*((_QWORD *)v8 + 1) + 40);
  if (v11)
    v12 = v11 - 24;
  else
    v12 = 0;
  if (*(unsigned __int8 *)(v12 + 16) - 29 >= 0xB)
    v12 = 0;
  v104 = *(unsigned __int8 **)(v12 - 32);
  v149 = v151;
  v150 = 0xC00000000;
  if ((unint64_t)(6 * a4) >= 0xD)
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v149, (uint64_t)v151, 6 * a4, 8);
  v13 = 8 * a4;
  if (a4)
  {
    v14 = 8 * a4;
    v15 = (llvm::BasicBlock ***)v7;
    do
    {
      v16 = *v15++;
      llvm::CanonicalLoopInfo::collectControlBlocks(v16, (uint64_t)&v149);
      v14 -= 8;
    }
    while (v14);
    v146 = v148;
    v147 = 0x400000000;
    v143 = v145;
    v144 = 0x400000000;
    v17 = 8 * a4;
    v18 = v7;
    do
    {
      v19 = *v18;
      v20 = *(_QWORD *)(*((_QWORD *)*v18 + 1) + 48);
      if (v20)
        v21 = v20 - 24;
      else
        v21 = 0;
      v22 = *(_DWORD *)(v21 + 20);
      if ((v22 & 0x40000000) != 0)
        v23 = *(_QWORD *)(v21 - 8);
      else
        v23 = v21 - 32 * (v22 & 0x7FFFFFF);
      v24 = *(_QWORD *)(v23 + 32);
      v25 = v147;
      if (v147 >= (unint64_t)HIDWORD(v147))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v146, (uint64_t)v148, v147 + 1, 8);
        v25 = v147;
      }
      *((_QWORD *)v146 + v25) = v24;
      LODWORD(v147) = v147 + 1;
      v26 = *(_QWORD *)(*v19 + 48);
      if (v26)
        v27 = v26 - 24;
      else
        v27 = 0;
      v28 = v144;
      if (v144 >= (unint64_t)HIDWORD(v144))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v143, (uint64_t)v145, v144 + 1, 8);
        v28 = v144;
      }
      *((_QWORD *)v143 + v28) = v27;
      LODWORD(v144) = v144 + 1;
      ++v18;
      v17 -= 8;
    }
    while (v17);
    v140 = v142;
    v141 = 0x400000000;
    if ((int)a4 >= 2)
    {
      v29 = (a4 - 1);
      v30 = (void ***)(v7 + 1);
      do
      {
        v31 = (uint64_t)*(v30 - 1);
        v32 = *v30;
        v115 = 0;
        v33 = *(_QWORD *)(*(_QWORD *)(v31 + 8) + 40);
        if (v33)
          v34 = v33 - 24;
        else
          v34 = 0;
        if (*(unsigned __int8 *)(v34 + 16) - 29 >= 0xB)
          v34 = 0;
        v115 = *(_QWORD *)(v34 - 32);
        v137 = 0;
        v137 = *v32;
        sub_1C6211B60((uint64_t)&v140, &v115, (uint64_t *)&v137);
        ++v30;
        --v29;
      }
      while (v29);
    }
  }
  else
  {
    v146 = v148;
    v147 = 0x400000000;
    v143 = v145;
    v144 = 0x400000000;
    v140 = v142;
    v141 = 0x400000000;
  }
  v35 = (uint64_t *)(a1 + 344);
  v36 = *a2;
  v128 = v36;
  if (v36)
  {
    llvm::MetadataTracking::track((uint64_t)&v128, v36, 2);
    v37 = v128;
  }
  else
  {
    v37 = 0;
  }
  sub_1C4774EF4((uint64_t)v35, 0, (uint64_t)v37);
  if (v128)
    llvm::MetadataTracking::untrack((uint64_t)&v128, v128);
  Preheader = llvm::CanonicalLoopInfo::getPreheader((llvm::CanonicalLoopInfo *)v103);
  if (Preheader)
  {
    sub_1C4D8AE2C((uint64_t)v35, Preheader, *(_QWORD *)(Preheader + 40));
  }
  else
  {
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
  }
  v137 = v139;
  v138 = 0x400000000;
  v134 = v136;
  v135 = 0x400000000;
  v105 = a4;
  if ((int)a4 >= 1)
  {
    v39 = 0;
    do
    {
      v40 = *(_QWORD *)(a5 + 8 * v39);
      v41 = (llvm::ConstantInt **)*((_QWORD *)v146 + v39);
      v42 = *v41;
      LOWORD(v117) = 257;
      v43 = (_QWORD *)sub_1C538E6F8((uint64_t)v35, (uint64_t)v41, v40, (uint64_t)&v115, 0);
      LOWORD(v117) = 257;
      v44 = sub_1C538EDCC(v35, v41, v40, (uint64_t)&v115);
      v45 = llvm::ConstantInt::get(v42, 0, 0);
      LOWORD(v117) = 257;
      v46 = (unsigned __int8 *)sub_1C4774B48((uint64_t)v35, 33, (uint64_t)v44, (uint64_t)v45, (uint64_t)&v115);
      LOWORD(v117) = 257;
      v47 = sub_1C4773E38(v35, 39, v46, (uint64_t)v42, (uint64_t)&v115);
      v126[0] = (uint64_t)"omp_floor";
      v127 = 259;
      v125 = 265;
      LODWORD(v124[0]) = v39;
      sub_1C4825FE4(v126, (uint64_t *)v124, (uint64_t)v129);
      v122[0] = (llvm::BasicBlock *)".tripcount";
      v123 = 259;
      sub_1C4825FE4(v129, (uint64_t *)v122, (uint64_t)&v131);
      v48 = (*(uint64_t (**)(_QWORD, _QWORD *, unsigned __int8 *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 416)
                                                                                            + 16))(*(_QWORD *)(a1 + 416), v43, v47, 1, 0);
      if (!v48)
      {
        LOWORD(v117) = 257;
        v49 = llvm::BinaryOperator::Create(13, v43, (uint64_t)v47, (uint64_t)&v115, 0);
        v48 = sub_1C4773754(v35, (uint64_t)v49, (uint64_t)&v131);
        *(_BYTE *)(v48 + 17) |= 2u;
      }
      v50 = v138;
      if (v138 >= (unint64_t)HIDWORD(v138))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v137, (uint64_t)v139, v138 + 1, 8);
        v50 = v138;
      }
      *((_QWORD *)v137 + v50) = v48;
      LODWORD(v138) = v138 + 1;
      v51 = v135;
      if (v135 >= (unint64_t)HIDWORD(v135))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, (uint64_t)v136, v135 + 1, 8);
        v51 = v135;
      }
      *((_QWORD *)v134 + v51) = v44;
      LODWORD(v135) = v135 + 1;
      ++v39;
    }
    while (v105 != v39);
  }
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  sub_1C4DB1D18(a6, 2 * (int)v105);
  v122[0] = 0;
  v52 = (llvm::BasicBlock *)llvm::CanonicalLoopInfo::getPreheader((llvm::CanonicalLoopInfo *)v103);
  v121 = 0;
  v122[0] = v52;
  SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(v103[3]);
  v120 = *((_QWORD *)v100 + 3);
  v121 = (char **)SingleSuccessor;
  v54 = *a2;
  v115 = a1;
  v116[0] = v54;
  if (v54)
    llvm::MetadataTracking::track((uint64_t)v116, v54, 2);
  v116[1] = v101;
  v116[2] = v104;
  v117 = v122;
  v118 = &v121;
  v119 = &v120;
  v124[0] = (llvm::CanonicalLoopInfo ***)a6;
  v124[1] = (llvm::CanonicalLoopInfo ***)&v115;
  v131 = "floor";
  v133[8] = 259;
  sub_1C54E0438(v124, (llvm::ConstantInt ***)v137, v138, (uint64_t)&v131);
  v55 = (llvm::BasicBlock *)*((_QWORD *)v122[0] + 5);
  if (v55 == (llvm::BasicBlock *)((char *)v122[0] + 40))
  {
    v57 = 0;
  }
  else
  {
    if (v55)
      v56 = (char *)v55 - 24;
    else
      v56 = 0;
    if (v56[16] - 29 >= 0xB)
      v57 = 0;
    else
      v57 = (uint64_t)v56;
  }
  sub_1C4EC1900((uint64_t)v35, v57);
  v58 = (llvm::ConstantInt ***)v133;
  v131 = v133;
  v132 = 0x400000000;
  if ((int)v105 < 1)
  {
    v68 = 0;
  }
  else
  {
    v59 = 0;
    do
    {
      v60 = *(_QWORD *)(a5 + v59);
      v61 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)a6 + v59) + 48);
      if (v61)
        v62 = v61 - 24;
      else
        v62 = 0;
      v63 = *(_QWORD *)((char *)v137 + v59);
      v130 = 257;
      v64 = sub_1C4774B48((uint64_t)v35, 32, v62, v63, (uint64_t)v129);
      v65 = *(uint64_t **)((char *)v134 + v59);
      v130 = 257;
      Select = llvm::IRBuilderBase::CreateSelect(v35, v64, v65, v60, (uint64_t)v129, 0);
      v67 = v132;
      if (v132 >= (unint64_t)HIDWORD(v132))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v131, (uint64_t)v133, v132 + 1, 8);
        v67 = v132;
      }
      *((_QWORD *)v131 + v67) = Select;
      v68 = v132 + 1;
      LODWORD(v132) = v132 + 1;
      v59 += 8;
    }
    while (8 * v105 != v59);
    v58 = (llvm::ConstantInt ***)v131;
  }
  v129[0] = (uint64_t)"tile";
  v130 = 259;
  sub_1C54E0438(v124, v58, v68, (uint64_t)v129);
  v69 = v122[0];
  if ((_DWORD)v141)
  {
    v70 = 0;
    v71 = (char ***)v140;
    v72 = (char ***)((char *)v140 + 16 * v141);
    while (1)
    {
      v74 = *v71;
      v73 = v71[1];
      v75 = *a2;
      if (v69)
      {
        v114 = *a2;
        if (v75)
          llvm::MetadataTracking::track((uint64_t)&v114, v75, 2);
        sub_1C54DE244(v69, v74, &v114);
        v76 = v114;
        if (!v114)
          goto LABEL_82;
        v77 = &v114;
      }
      else
      {
        v113 = *a2;
        if (v75)
          llvm::MetadataTracking::track((uint64_t)&v113, v75, 2);
        sub_1C54E06F8((uint64_t)v70[1], v74, &v113);
        v76 = v113;
        if (!v113)
          goto LABEL_82;
        v77 = &v113;
      }
      llvm::MetadataTracking::untrack((uint64_t)v77, v76);
LABEL_82:
      v69 = 0;
      v71 += 2;
      v70 = v73;
      if (v71 == v72)
        goto LABEL_98;
    }
  }
  if (v122[0])
  {
    v78 = *a2;
    v112 = v78;
    if (v78)
      llvm::MetadataTracking::track((uint64_t)&v112, v78, 2);
    sub_1C54DE244(v69, (char **)v104, &v112);
    v79 = v112;
    if (v112)
    {
      v80 = &v112;
LABEL_102:
      llvm::MetadataTracking::untrack((uint64_t)v80, v79);
    }
  }
  else
  {
    v73 = 0;
LABEL_98:
    v81 = *a2;
    v111 = v81;
    if (v81)
      llvm::MetadataTracking::track((uint64_t)&v111, v81, 2);
    sub_1C54E06F8((uint64_t)v73[1], (char **)v104, &v111);
    v79 = v111;
    if (v111)
    {
      v80 = &v111;
      goto LABEL_102;
    }
  }
  v82 = v121;
  v83 = *a2;
  v110 = v83;
  if (v83)
    llvm::MetadataTracking::track((uint64_t)&v110, v83, 2);
  sub_1C54E06F8(*(_QWORD *)(v102 + 8), v82, &v110);
  if (v110)
    llvm::MetadataTracking::untrack((uint64_t)&v110, v110);
  v84 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 8) - 8) + 8) + 40);
  if (v84)
    v85 = v84 - 24;
  else
    v85 = 0;
  if (*(unsigned __int8 *)(v85 + 16) - 29 >= 0xB)
    v85 = 0;
  v86 = *(_QWORD *)(v85 - 32);
  if (v86)
  {
    sub_1C4D8AE2C((uint64_t)v35, v86, *(_QWORD *)(v86 + 48));
  }
  else
  {
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
  }
  if ((int)v105 >= 1)
  {
    v87 = 0;
    do
    {
      v88 = *(_QWORD *)a6 + v87;
      v89 = *(_QWORD *)(v88 + 8 * (int)v105);
      v90 = *(llvm::ValueAsMetadata **)((char *)v143 + v87);
      v91 = *(_QWORD *)(a5 + v87);
      v92 = *(_QWORD *)(**(_QWORD **)v88 + 48);
      if (v92)
        v93 = v92 - 24;
      else
        v93 = 0;
      v130 = 257;
      v94 = (_QWORD *)sub_1C4EC4040((uint64_t)v35, v91, v93, (uint64_t)v129, 1, 0);
      v95 = *(_QWORD *)(*(_QWORD *)v89 + 48);
      if (v95)
        v96 = v95 - 24;
      else
        v96 = 0;
      v127 = 257;
      v97 = (llvm::Value *)(*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 416)
                                                                                                 + 16))(*(_QWORD *)(a1 + 416), v94, v96, 1, 0);
      if (!v97)
      {
        v130 = 257;
        v98 = llvm::BinaryOperator::Create(13, v94, v96, (uint64_t)v129, 0);
        v97 = (llvm::Value *)sub_1C4773754(v35, (uint64_t)v98, (uint64_t)v126);
        *((_BYTE *)v97 + 17) |= 2u;
      }
      llvm::Value::doRAUW(v90, v97, (llvm::Value *)1);
      v87 += 8;
    }
    while (8 * v105 != v87);
  }
  sub_1C54E01B4(v149, v150);
  if (v105)
  {
    do
    {
      v99 = *v7++;
      *v99 = 0uLL;
      v99[1] = 0uLL;
      v13 -= 8;
    }
    while (v13);
  }
  if (v131 != v133)
    free(v131);
  if (v116[0])
    llvm::MetadataTracking::untrack((uint64_t)v116, v116[0]);
  if (v134 != v136)
    free(v134);
  if (v137 != v139)
    free(v137);
  if (v140 != v142)
    free(v140);
  if (v143 != v145)
    free(v143);
  if (v146 != v148)
    free(v146);
  if (v149 != v151)
    free(v149);
}

void llvm::OpenMPIRBuilder::unrollLoopFull(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD __src[3];

  __src[2] = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a1 + 408);
  v6 = llvm::MDString::get(v4, "llvm.loop.unroll.enable", 0x17uLL);
  __src[0] = llvm::MDTuple::getImpl(v4, &v6, 1, 0, 1);
  v5 = llvm::MDString::get(v4, "llvm.loop.unroll.full", 0x15uLL);
  __src[1] = llvm::MDTuple::getImpl(v4, &v5, 1, 0, 1);
  sub_1C54E07C4(a3, __src, 2);
}

void llvm::OpenMPIRBuilder::unrollLoopHeuristic(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v4;
  _QWORD *v5;
  _QWORD __src[2];

  __src[1] = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a1 + 408);
  v5 = llvm::MDString::get(v4, "llvm.loop.unroll.enable", 0x17uLL);
  __src[0] = llvm::MDTuple::getImpl(v4, &v5, 1, 0, 1);
  sub_1C54E07C4(a3, __src, 1);
}

llvm::BasicBlock *llvm::OpenMPIRBuilder::createCritical(uint64_t *a1, uint64_t *a2, void (*a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, llvm::BasicBlock *), uint64_t a4, _QWORD *a5, const char *a6, uint64_t a7, uint64_t a8)
{
  llvm::BasicBlock *v16;
  llvm::Value **v18;
  llvm::UndefValue *Ident;
  uint64_t ThreadID;
  uint64_t OMPCriticalRegionLock;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  llvm::Constant **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t v32;
  _QWORD *v33;
  void (**v34)(void);
  _BYTE v35[32];
  __int16 v36;
  unsigned int v37;
  _QWORD v38[3];
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (!sub_1C62683AC((uint64_t)a1, a2))
    return (llvm::BasicBlock *)*a2;
  v37 = 0;
  v18 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr((uint64_t)a1, a2, &v37);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent((uint64_t)a1, v18, v37, 0, 0);
  ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  OMPCriticalRegionLock = llvm::OpenMPIRBuilder::getOMPCriticalRegionLock((llvm::OpenMPIRBuilder *)a1, a6, a7);
  *(_QWORD *)&v45 = Ident;
  *((_QWORD *)&v45 + 1) = ThreadID;
  v46 = OMPCriticalRegionLock;
  v40 = &v42;
  v42 = v45;
  v43 = OMPCriticalRegionLock;
  v41 = 0x400000003;
  if (a8)
  {
    v44 = a8;
    LODWORD(v41) = 4;
    v22 = a1[42];
    v23 = (uint64_t)a1;
    v24 = 48;
  }
  else
  {
    v22 = a1[42];
    v23 = (uint64_t)a1;
    v24 = 47;
  }
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(v23, v22, v24);
  v26 = v25;
  if (*(_BYTE *)(v25 + 16))
  {
    v26 = 0;
    v27 = 0;
  }
  else
  {
    v27 = *(uint64_t ***)(v25 + 24);
  }
  v36 = 257;
  v28 = (llvm::Constant **)sub_1C4774778(a1 + 43, v27, v26, (uint64_t *)v40, v41, (uint64_t)v35, 0);
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction((uint64_t)a1, a1[42], 49);
  if (*(_BYTE *)(v29 + 16))
    v30 = 0;
  else
    v30 = v29;
  if (v30)
    v31 = *(uint64_t ***)(v30 + 24);
  else
    v31 = 0;
  v36 = 257;
  v32 = sub_1C4774778(a1 + 43, v31, v30, (uint64_t *)&v45, 3, (uint64_t)v35, 0);
  v33 = (_QWORD *)a5[3];
  if (v33)
  {
    if (v33 == a5)
    {
      v39 = v38;
      (*(void (**)(_QWORD *, _QWORD *))(*a5 + 24))(a5, v38);
    }
    else
    {
      v39 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v33 + 16))(v33);
    }
  }
  else
  {
    v39 = 0;
  }
  v16 = llvm::OpenMPIRBuilder::EmitOMPInlinedRegion((uint64_t)a1, 9, v28, v32, a3, a4, v38, 0, 1u, 0);
  if (v39 == v38)
  {
    v34 = (void (**)(void))(v38[0] + 32);
  }
  else
  {
    if (!v39)
      goto LABEL_22;
    v34 = (void (**)(void))(*v39 + 40);
  }
  (*v34)();
LABEL_22:
  if (v40 != &v42)
    free(v40);
  return v16;
}

uint64_t llvm::OpenMPIRBuilder::createOrderedDepend(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v17;
  llvm::PointerType *v18;
  llvm::PointerType *v19;
  unsigned __int8 **v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Value *v23;
  uint64_t v24;
  llvm::Value **v25;
  llvm::UndefValue *Ident;
  uint64_t ThreadID;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t **v31;
  unsigned int v32;
  _BYTE v33[32];
  __int16 v34;
  llvm::ValueHandleBase *v35;
  llvm::ValueHandleBase *v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!sub_1C62683AC(a1, a2))
    return *a2;
  v17 = a5;
  llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 2128), (llvm::Type *)a5);
  v19 = v18;
  if (a3)
  {
    sub_1C4D8AE2C(a1 + 344, a3, a4);
  }
  else
  {
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
  }
  v20 = sub_1C486A5CC((uint64_t *)(a1 + 344), v19, 0, a8);
  *((_WORD *)v20 + 9) = *((_WORD *)v20 + 9) & 0xFFC0 | 3;
  if (*a2)
  {
    sub_1C4D8AE2C(a1 + 344, *a2, a2[1]);
  }
  else
  {
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
  }
  if (a5)
  {
    v21 = 0;
    do
    {
      v35 = llvm::ConstantInt::get((llvm::ConstantInt **)(**(_QWORD **)(a1 + 408) + 1984), 0, 0);
      v36 = llvm::ConstantInt::get((llvm::ConstantInt **)(**(_QWORD **)(a1 + 408) + 1984), v21, 0);
      v34 = 257;
      v22 = sub_1C53901A0((uint64_t *)(a1 + 344), v19, (uint64_t *)v20, (llvm::Value *)&v35, 2, (uint64_t)v33);
      v23 = sub_1C509CCE8((uint64_t *)(a1 + 344), *(uint64_t **)(a6 + 8 * v21), v22, 0, 0);
      *((_WORD *)v23 + 9) = *((_WORD *)v23 + 9) & 0xFF81 | 6;
      ++v21;
    }
    while (v17 != v21);
  }
  v35 = llvm::ConstantInt::get((llvm::ConstantInt **)(**(_QWORD **)(a1 + 408) + 1984), 0, 0);
  v36 = llvm::ConstantInt::get((llvm::ConstantInt **)(**(_QWORD **)(a1 + 408) + 1984), 0, 0);
  v34 = 257;
  v24 = sub_1C53901A0((uint64_t *)(a1 + 344), v19, (uint64_t *)v20, (llvm::Value *)&v35, 2, (uint64_t)v33);
  v32 = 0;
  v25 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v32);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v25, v32, 0, 0);
  ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  v35 = Ident;
  v36 = (llvm::ValueHandleBase *)ThreadID;
  v37 = v24;
  if ((a9 & 1) != 0)
    v28 = 118;
  else
    v28 = 119;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), v28);
  if (*(_BYTE *)(v29 + 16))
  {
    v30 = 0;
    v31 = 0;
  }
  else
  {
    v30 = v29;
    v31 = *(uint64_t ***)(v29 + 24);
  }
  v34 = 257;
  sub_1C4774778((uint64_t *)(a1 + 344), v31, v30, (uint64_t *)&v35, 3, (uint64_t)v33, 0);
  return *(_QWORD *)(a1 + 392);
}

llvm::BasicBlock *llvm::OpenMPIRBuilder::createOrderedThreadsSimd(uint64_t *a1, uint64_t *a2, void (*a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, llvm::BasicBlock *), uint64_t a4, _QWORD *a5, int a6)
{
  uint64_t v12;
  llvm::Constant **v13;
  _QWORD *v14;
  llvm::BasicBlock *v15;
  void (*v16)(void);
  llvm::Value **v18;
  llvm::UndefValue *Ident;
  uint64_t ThreadID;
  uint64_t v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  _BYTE v28[32];
  __int16 v29;
  unsigned int v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33[3];

  v33[2] = *MEMORY[0x1E0C80C00];
  if (!sub_1C62683AC((uint64_t)a1, a2))
    return (llvm::BasicBlock *)*a2;
  if (a6)
  {
    v30 = 0;
    v18 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr((uint64_t)a1, a2, &v30);
    Ident = llvm::OpenMPIRBuilder::getOrCreateIdent((uint64_t)a1, v18, v30, 0, 0);
    ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
    v33[0] = (uint64_t)Ident;
    v33[1] = ThreadID;
    llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction((uint64_t)a1, a1[42], 56);
    v22 = v21;
    v23 = 0;
    if (*(_BYTE *)(v22 + 16))
      v24 = 0;
    else
      v24 = v22;
    if (v24)
      v23 = *(uint64_t ***)(v24 + 24);
    v29 = 257;
    v13 = (llvm::Constant **)sub_1C4774778(a1 + 43, v23, v24, v33, 2, (uint64_t)v28, 0);
    llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction((uint64_t)a1, a1[42], 57);
    if (*(_BYTE *)(v25 + 16))
      v26 = 0;
    else
      v26 = v25;
    if (v26)
      v27 = *(uint64_t ***)(v26 + 24);
    else
      v27 = 0;
    v29 = 257;
    v12 = sub_1C4774778(a1 + 43, v27, v26, v33, 2, (uint64_t)v28, 0);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = (_QWORD *)a5[3];
  if (v14)
  {
    if (v14 == a5)
    {
      v32 = v31;
      (*(void (**)(_QWORD *, _QWORD *))(*a5 + 24))(a5, v31);
    }
    else
    {
      v32 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
    }
  }
  else
  {
    v32 = 0;
  }
  v15 = llvm::OpenMPIRBuilder::EmitOMPInlinedRegion((uint64_t)a1, 39, v13, v12, a3, a4, v31, 0, 1u, 0);
  if (v32 == v31)
  {
    v16 = *(void (**)(void))(v31[0] + 32);
    goto LABEL_10;
  }
  if (v32)
  {
    v16 = *(void (**)(void))(*v32 + 40);
LABEL_10:
    v16();
  }
  return v15;
}

uint64_t llvm::OpenMPIRBuilder::emitCommonDirectiveExit(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void (**v21)(_QWORD *, uint64_t);
  _QWORD v22[2];
  _QWORD v23[3];
  _QWORD *v24;
  __int16 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v11 = a1 + 43;
  if (a3)
  {
    sub_1C4D8AE2C((uint64_t)(a1 + 43), a3, a4);
  }
  else
  {
    a1[49] = 0;
    a1[50] = 0;
  }
  if (a6)
  {
    sub_1C6268A28((uint64_t)v23, a1);
    v22[0] = a3;
    v22[1] = a4;
    if (!v24)
    {
      sub_1C485C2F0();
      return llvm::OpenMPIRBuilder::createOMPAlloc();
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v24 + 48))(v24, v22);
    v16 = *(_QWORD *)(a3 + 40);
    if (v16 == a3 + 40)
    {
      v18 = 0;
    }
    else
    {
      if (v16)
        v17 = v16 - 24;
      else
        v17 = 0;
      if (*(unsigned __int8 *)(v17 + 16) - 29 >= 0xB)
        v18 = 0;
      else
        v18 = v17;
    }
    sub_1C4EC1900((uint64_t)v11, v18);
    v20 = v24;
    if (v24 == v23)
    {
      v21 = (void (**)(_QWORD *, uint64_t))(v23[0] + 32);
      v20 = v23;
    }
    else
    {
      if (!v24)
        goto LABEL_4;
      v21 = (void (**)(_QWORD *, uint64_t))(*v24 + 40);
    }
    (*v21)(v20, v19);
  }
LABEL_4:
  if (a5)
  {
    v12 = (uint64_t *)(a5 + 40);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a5 + 40) + 40, (uint64_t ***)a5);
    v13 = *(_QWORD *)(a5 + 24);
    v14 = *(_QWORD **)(a5 + 32);
    *v14 = v13;
    *(_QWORD *)(v13 + 8) = v14;
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 24) = 0;
    v25 = 257;
    sub_1C477438C(v11, a5, (uint64_t)v23);
  }
  else
  {
    v12 = a1 + 49;
  }
  return *v12;
}

uint64_t llvm::OpenMPIRBuilder::createOMPAlloc(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v10;
  _QWORD *v11;
  llvm::Value **v12;
  llvm::UndefValue *Ident;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  _QWORD v19[4];
  __int16 v20;
  unsigned int v21;
  uint64_t v22;
  __int128 v23;
  unsigned __int8 *v24;
  uint64_t v25[4];

  v25[3] = *MEMORY[0x1E0C80C00];
  v10 = (uint64_t *)(a1 + 344);
  v22 = a1 + 344;
  v11 = (_QWORD *)(a1 + 392);
  v23 = *(_OWORD *)(a1 + 392);
  llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)(a1 + 344), &v24);
  if (*a2)
  {
    sub_1C4D8AE2C((uint64_t)v10, *a2, a2[1]);
  }
  else
  {
    *v11 = 0;
    v11[1] = 0;
  }
  v21 = 0;
  v12 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v21);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v12, v21, 0, 0);
  v25[0] = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  v25[1] = a3;
  v25[2] = a4;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), 121);
  if (*(_BYTE *)(v14 + 16))
    v15 = 0;
  else
    v15 = v14;
  if (v15)
    v16 = *(uint64_t ***)(v15 + 24);
  else
    v16 = 0;
  v20 = 260;
  v19[0] = a5;
  v17 = sub_1C4774778(v10, v16, v15, v25, 3, (uint64_t)v19, 0);
  sub_1C54E76B8(&v22);
  return v17;
}

uint64_t llvm::OpenMPIRBuilder::createOMPFree(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v10;
  _QWORD *v11;
  llvm::Value **v12;
  llvm::UndefValue *Ident;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  _QWORD v19[4];
  __int16 v20;
  unsigned int v21;
  uint64_t v22;
  __int128 v23;
  unsigned __int8 *v24;
  uint64_t v25[4];

  v25[3] = *MEMORY[0x1E0C80C00];
  v10 = (uint64_t *)(a1 + 344);
  v22 = a1 + 344;
  v11 = (_QWORD *)(a1 + 392);
  v23 = *(_OWORD *)(a1 + 392);
  llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)(a1 + 344), &v24);
  if (*a2)
  {
    sub_1C4D8AE2C((uint64_t)v10, *a2, a2[1]);
  }
  else
  {
    *v11 = 0;
    v11[1] = 0;
  }
  v21 = 0;
  v12 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v21);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v12, v21, 0, 0);
  v25[0] = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  v25[1] = a3;
  v25[2] = a4;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), 123);
  if (*(_BYTE *)(v14 + 16))
    v15 = 0;
  else
    v15 = v14;
  if (v15)
    v16 = *(uint64_t ***)(v15 + 24);
  else
    v16 = 0;
  v20 = 260;
  v19[0] = a5;
  v17 = sub_1C4774778(v10, v16, v15, v25, 3, (uint64_t)v19, 0);
  sub_1C54E76B8(&v22);
  return v17;
}

uint64_t llvm::OpenMPIRBuilder::createOMPInteropInit(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, llvm::Value **a5, llvm::Value **a6, _QWORD *a7, unsigned int a8)
{
  uint64_t *v16;
  _QWORD *v17;
  llvm::Value **v18;
  llvm::UndefValue *Ident;
  uint64_t ThreadID;
  llvm::Value **v21;
  llvm::ConstantPointerNull *v22;
  llvm::PointerType *v23;
  llvm::Value **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  _WORD v30[22];
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  unsigned __int8 *v34;
  uint64_t v35[10];

  v35[8] = *MEMORY[0x1E0C80C00];
  v16 = (uint64_t *)(a1 + 344);
  v32 = a1 + 344;
  v17 = (_QWORD *)(a1 + 392);
  v33 = *(_OWORD *)(a1 + 392);
  llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)(a1 + 344), &v34);
  if (*a2)
  {
    sub_1C4D8AE2C((uint64_t)v16, *a2, a2[1]);
  }
  else
  {
    *v17 = 0;
    v17[1] = 0;
  }
  v31 = 0;
  v18 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v31);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v18, v31, 0, 0);
  ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  if (!a5)
    a5 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), -1, 0);
  v21 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2128), a4, 0);
  if (!a6)
  {
    a6 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), 0, 0);
    v22 = (llvm::ConstantPointerNull *)llvm::PointerType::get((llvm::PointerType *)(***(_QWORD ***)(a1 + 336) + 1912), 0);
    a7 = llvm::ConstantPointerNull::get(v22, v23);
  }
  v24 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), a8, 0);
  v35[0] = (uint64_t)Ident;
  v35[1] = ThreadID;
  v35[2] = a3;
  v35[3] = (uint64_t)v21;
  v35[4] = (uint64_t)a5;
  v35[5] = (uint64_t)a6;
  v35[6] = (uint64_t)a7;
  v35[7] = (uint64_t)v24;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), 124);
  if (*(_BYTE *)(v25 + 16))
    v26 = 0;
  else
    v26 = v25;
  if (v26)
    v27 = *(uint64_t ***)(v26 + 24);
  else
    v27 = 0;
  v30[16] = 257;
  v28 = sub_1C4774778(v16, v27, v26, v35, 8, (uint64_t)v30, 0);
  sub_1C54E76B8(&v32);
  return v28;
}

uint64_t llvm::OpenMPIRBuilder::createOMPInteropDestroy(uint64_t a1, uint64_t *a2, uint64_t a3, llvm::Value **a4, llvm::Value **a5, _QWORD *a6, unsigned int a7)
{
  uint64_t *v14;
  _QWORD *v15;
  llvm::Value **v16;
  llvm::UndefValue *Ident;
  uint64_t ThreadID;
  llvm::ConstantPointerNull *v19;
  llvm::PointerType *v20;
  llvm::Value **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  _WORD v27[22];
  unsigned int v28;
  uint64_t v29;
  __int128 v30;
  unsigned __int8 *v31;
  uint64_t v32[8];

  v32[7] = *MEMORY[0x1E0C80C00];
  v14 = (uint64_t *)(a1 + 344);
  v29 = a1 + 344;
  v15 = (_QWORD *)(a1 + 392);
  v30 = *(_OWORD *)(a1 + 392);
  llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)(a1 + 344), &v31);
  if (*a2)
  {
    sub_1C4D8AE2C((uint64_t)v14, *a2, a2[1]);
  }
  else
  {
    *v15 = 0;
    v15[1] = 0;
  }
  v28 = 0;
  v16 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v28);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v16, v28, 0, 0);
  ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  if (!a4)
    a4 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), -1, 0);
  if (!a5)
  {
    a5 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), 0, 0);
    v19 = (llvm::ConstantPointerNull *)llvm::PointerType::get((llvm::PointerType *)(***(_QWORD ***)(a1 + 336) + 1912), 0);
    a6 = llvm::ConstantPointerNull::get(v19, v20);
  }
  v21 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), a7, 0);
  v32[0] = (uint64_t)Ident;
  v32[1] = ThreadID;
  v32[2] = a3;
  v32[3] = (uint64_t)a4;
  v32[4] = (uint64_t)a5;
  v32[5] = (uint64_t)a6;
  v32[6] = (uint64_t)v21;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), 125);
  if (*(_BYTE *)(v22 + 16))
    v23 = 0;
  else
    v23 = v22;
  if (v23)
    v24 = *(uint64_t ***)(v23 + 24);
  else
    v24 = 0;
  v27[16] = 257;
  v25 = sub_1C4774778(v14, v24, v23, v32, 7, (uint64_t)v27, 0);
  sub_1C54E76B8(&v29);
  return v25;
}

uint64_t llvm::OpenMPIRBuilder::createOMPInteropUse(uint64_t a1, uint64_t *a2, uint64_t a3, llvm::Value **a4, llvm::Value **a5, _QWORD *a6, unsigned int a7)
{
  uint64_t *v14;
  _QWORD *v15;
  llvm::Value **v16;
  llvm::UndefValue *Ident;
  uint64_t ThreadID;
  llvm::ConstantPointerNull *v19;
  llvm::PointerType *v20;
  llvm::Value **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  _WORD v27[22];
  unsigned int v28;
  uint64_t v29;
  __int128 v30;
  unsigned __int8 *v31;
  uint64_t v32[8];

  v32[7] = *MEMORY[0x1E0C80C00];
  v14 = (uint64_t *)(a1 + 344);
  v29 = a1 + 344;
  v15 = (_QWORD *)(a1 + 392);
  v30 = *(_OWORD *)(a1 + 392);
  llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)(a1 + 344), &v31);
  if (*a2)
  {
    sub_1C4D8AE2C((uint64_t)v14, *a2, a2[1]);
  }
  else
  {
    *v15 = 0;
    v15[1] = 0;
  }
  v28 = 0;
  v16 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v28);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v16, v28, 0, 0);
  ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  if (!a4)
    a4 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), -1, 0);
  if (!a5)
  {
    a5 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), 0, 0);
    v19 = (llvm::ConstantPointerNull *)llvm::PointerType::get((llvm::PointerType *)(***(_QWORD ***)(a1 + 336) + 1912), 0);
    a6 = llvm::ConstantPointerNull::get(v19, v20);
  }
  v21 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), a7, 0);
  v32[0] = (uint64_t)Ident;
  v32[1] = ThreadID;
  v32[2] = a3;
  v32[3] = (uint64_t)a4;
  v32[4] = (uint64_t)a5;
  v32[5] = (uint64_t)a6;
  v32[6] = (uint64_t)v21;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), 126);
  if (*(_BYTE *)(v22 + 16))
    v23 = 0;
  else
    v23 = v22;
  if (v23)
    v24 = *(uint64_t ***)(v23 + 24);
  else
    v24 = 0;
  v27[16] = 257;
  v25 = sub_1C4774778(v14, v24, v23, v32, 7, (uint64_t)v27, 0);
  sub_1C54E76B8(&v29);
  return v25;
}

uint64_t llvm::OpenMPIRBuilder::createCachedThreadPrivate(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const llvm::Twine *a5)
{
  uint64_t *v10;
  _QWORD *v11;
  llvm::Value **v12;
  llvm::UndefValue *Ident;
  uint64_t ThreadID;
  uint64_t OMPInternalVariable;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  _WORD v21[22];
  unsigned int v22;
  uint64_t v23;
  __int128 v24;
  unsigned __int8 *v25;
  uint64_t v26[6];

  v26[5] = *MEMORY[0x1E0C80C00];
  v10 = (uint64_t *)(a1 + 344);
  v23 = a1 + 344;
  v11 = (_QWORD *)(a1 + 392);
  v24 = *(_OWORD *)(a1 + 392);
  llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)(a1 + 344), &v25);
  if (*a2)
  {
    sub_1C4D8AE2C((uint64_t)v10, *a2, a2[1]);
  }
  else
  {
    *v11 = 0;
    v11[1] = 0;
  }
  v22 = 0;
  v12 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v22);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v12, v22, 0, 0);
  ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  OMPInternalVariable = llvm::OpenMPIRBuilder::getOrCreateOMPInternalVariable((llvm::OpenMPIRBuilder *)a1, *(llvm::Type **)(a1 + 2200), a5, 0);
  v26[0] = (uint64_t)Ident;
  v26[1] = ThreadID;
  v26[2] = a3;
  v26[3] = a4;
  v26[4] = OMPInternalVariable;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), 115);
  if (*(_BYTE *)(v16 + 16))
    v17 = 0;
  else
    v17 = v16;
  if (v17)
    v18 = *(uint64_t ***)(v17 + 24);
  else
    v18 = 0;
  v21[16] = 257;
  v19 = sub_1C4774778(v10, v18, v17, v26, 5, (uint64_t)v21, 0);
  sub_1C54E76B8(&v23);
  return v19;
}

uint64_t llvm::OpenMPIRBuilder::getOrCreateOMPInternalVariable(llvm::OpenMPIRBuilder *this, llvm::Type *a2, const llvm::Twine *a3, unsigned int a4)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  llvm::Type *v13;
  llvm::Value **NullValue;
  uint64_t v15;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[2];
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  _QWORD v25[33];

  v25[32] = *MEMORY[0x1E0C80C00];
  v23 = v25;
  v24 = xmmword_1C64638F0;
  sub_1C613932C((uint64_t)v19, (uint64_t)&v23);
  llvm::Twine::print(a3, (llvm::raw_ostream *)v19);
  v8 = sub_1C626D030((uint64_t)this + 1968, *(unsigned __int8 **)v22, *(_QWORD *)(v22 + 8));
  v9 = (uint64_t *)*v8;
  v10 = *(_QWORD *)(*v8 + 8);
  if (!v10)
  {
    v11 = operator new(0x78uLL);
    v10 = (uint64_t)(v11 + 8);
    v11[13] = v11[13] & 0x38000000 | 1;
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = 0;
    *((_QWORD *)v11 + 3) = v11 + 8;
    v12 = *((_QWORD *)this + 42);
    NullValue = llvm::Constant::getNullValue(a2, v13);
    v15 = *v9;
    v18 = 261;
    v17[0] = v9 + 2;
    v17[1] = v15;
    llvm::GlobalVariable::GlobalVariable(v10, v12, a2, 0, 10, (uint64_t)NullValue, (uint64_t)v17, 0, 0, a4 | 0x100000000, 0);
    v9[1] = v10;
  }
  v19[0] = off_1E81A6E70;
  if (v21 == 1 && v20)
    MEMORY[0x1CAA32F9C](v20, 0x1000C8077774924);
  if (v23 != v25)
    free(v23);
  return v10;
}

llvm::BasicBlock *llvm::OpenMPIRBuilder::createTargetInit(uint64_t a1, uint64_t *a2, int a3, llvm::LLVMContext *a4)
{
  llvm::BasicBlock *v8;
  llvm::Value **v10;
  llvm::UndefValue *Ident;
  llvm::LLVMContext *v12;
  llvm::ConstantInt **Int8Ty;
  const llvm::APInt *v14;
  uint64_t v15;
  llvm::ValueHandleBase *Signed;
  const llvm::APInt *v17;
  llvm::ValueHandleBase *Bool;
  const llvm::APInt *v19;
  llvm::ValueHandleBase *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t *v25;
  llvm::ConstantInt **v26;
  llvm::Value **v27;
  llvm::Value *v28;
  uint64_t *v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  llvm::BasicBlock *v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned __int8 *v36;
  llvm::Instruction *v37;
  llvm::BasicBlock *v38;
  char *v39;
  uint64_t v40;
  unsigned __int8 **v41;
  char *v42;
  unsigned int v43;
  _QWORD v44[4];
  __int16 v45;
  uint64_t v46[5];

  v46[4] = *MEMORY[0x1E0C80C00];
  if (!sub_1C62683AC(a1, a2))
    return (llvm::BasicBlock *)*a2;
  v43 = 0;
  v10 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v43);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v10, v43, 0, 0);
  Int8Ty = (llvm::ConstantInt **)llvm::Type::getInt8Ty(**(llvm::Type ***)(a1 + 2104), v12);
  if (a3)
    v15 = 2;
  else
    v15 = 1;
  Signed = llvm::ConstantInt::getSigned(Int8Ty, v15, v14);
  Bool = llvm::ConstantInt::getBool(**(llvm::ConstantInt ***)(a1 + 2120), (llvm::LLVMContext *)(a3 ^ 1u), v17);
  v20 = llvm::ConstantInt::getBool(**(llvm::ConstantInt ***)(a1 + 2120), a4, v19);
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), 146);
  v22 = v21;
  v23 = 0;
  if (*(_BYTE *)(v22 + 16))
    v24 = 0;
  else
    v24 = v22;
  v25 = (uint64_t *)(a1 + 344);
  if (v24)
    v23 = *(uint64_t ***)(v24 + 24);
  v46[0] = (uint64_t)Ident;
  v46[1] = (uint64_t)Signed;
  v46[2] = (uint64_t)Bool;
  v46[3] = (uint64_t)v20;
  v45 = 257;
  v26 = (llvm::ConstantInt **)sub_1C4774778((uint64_t *)(a1 + 344), v23, v24, v46, 4, (uint64_t)v44, 0);
  v27 = llvm::ConstantInt::get(*v26, -1, 0);
  v44[0] = "exec_user_code";
  v45 = 259;
  v28 = (llvm::Value *)sub_1C4774B48(a1 + 344, 32, (uint64_t)v26, (uint64_t)v27, (uint64_t)v44);
  v29 = (uint64_t *)LLVMBuildUnreachable_0(a1 + 344);
  v30 = (uint64_t *)v29[5];
  v44[0] = "user_code.entry";
  v45 = 259;
  v8 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock(v30, v29 + 3, (uint64_t)v44, 0);
  v31 = *(_QWORD **)*v30;
  v44[0] = "worker.exit";
  v45 = 259;
  v32 = v30[7];
  v33 = (llvm::BasicBlock *)operator new();
  v34 = llvm::BasicBlock::BasicBlock((uint64_t)v33, v31, (uint64_t)v44, v32, 0);
  *(_QWORD *)(a1 + 392) = v34;
  *(_QWORD *)(a1 + 400) = v34 + 40;
  LLVMBuildRetVoid_0((uint64_t *)(a1 + 344));
  v35 = (uint64_t *)v30[5];
  if (v35 == v30 + 5)
  {
    v37 = 0;
  }
  else
  {
    if (v35)
      v36 = (unsigned __int8 *)(v35 - 3);
    else
      v36 = 0;
    if (v36[16] - 29 >= 0xB)
      v37 = 0;
    else
      v37 = (llvm::Instruction *)v36;
  }
  sub_1C4EC1900((uint64_t)v25, (uint64_t)v37);
  v38 = (llvm::BasicBlock *)v29[5];
  v39 = (char *)operator new(0xA0uLL);
  v40 = 0;
  v41 = (unsigned __int8 **)(v39 + 96);
  *((_DWORD *)v39 + 29) = *((_DWORD *)v39 + 29) & 0x38000000 | 3;
  do
  {
    v42 = &v39[v40];
    *(_QWORD *)v42 = 0;
    *((_QWORD *)v42 + 1) = 0;
    *((_QWORD *)v42 + 2) = 0;
    *((_QWORD *)v42 + 3) = v41;
    v40 += 32;
  }
  while (v40 != 96);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v39 + 96), v38, v33, v28, 0);
  v45 = 257;
  sub_1C4867F8C(v25, v41, (uint64_t)v44);
  llvm::Instruction::eraseFromParent(v37);
  llvm::Instruction::eraseFromParent((llvm::Instruction *)v29);
  llvm::BasicBlock::getFirstInsertionPt(v8);
  return v8;
}

uint64_t llvm::OpenMPIRBuilder::createTargetDeinit(uint64_t a1, uint64_t *a2, int a3, llvm::LLVMContext *a4)
{
  uint64_t result;
  llvm::Value **v9;
  llvm::UndefValue *Ident;
  llvm::LLVMContext *v11;
  llvm::ConstantInt **Int8Ty;
  const llvm::APInt *v13;
  uint64_t v14;
  llvm::ValueHandleBase *Signed;
  const llvm::APInt *v16;
  llvm::ValueHandleBase *Bool;
  uint64_t v18;
  uint64_t v19;
  uint64_t **v20;
  _WORD v21[22];
  unsigned int v22;
  uint64_t v23[4];

  v23[3] = *MEMORY[0x1E0C80C00];
  result = sub_1C62683AC(a1, a2);
  if ((_DWORD)result)
  {
    v22 = 0;
    v9 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v22);
    Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v9, v22, 0, 0);
    Int8Ty = (llvm::ConstantInt **)llvm::Type::getInt8Ty(**(llvm::Type ***)(a1 + 2104), v11);
    if (a3)
      v14 = 2;
    else
      v14 = 1;
    Signed = llvm::ConstantInt::getSigned(Int8Ty, v14, v13);
    Bool = llvm::ConstantInt::getBool(**(llvm::ConstantInt ***)(a1 + 2120), a4, v16);
    llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(_QWORD *)(a1 + 336), 147);
    if (*(_BYTE *)(v18 + 16))
      v19 = 0;
    else
      v19 = v18;
    if (v19)
      v20 = *(uint64_t ***)(v19 + 24);
    else
      v20 = 0;
    v23[0] = (uint64_t)Ident;
    v23[1] = (uint64_t)Signed;
    v23[2] = (uint64_t)Bool;
    v21[16] = 257;
    return sub_1C4774778((uint64_t *)(a1 + 344), v20, v19, v23, 3, (uint64_t)v21, 0);
  }
  return result;
}

uint64_t *sub_1C626D030(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  i = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == -8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  v11 = sub_1C484358C(a1 + 24, a3 + 17, 3);
  v12 = (_QWORD *)v11;
  v13 = v11 + 16;
  if (a3)
    memcpy((void *)(v11 + 16), a2, a3);
  *(_BYTE *)(v13 + a3) = 0;
  *v12 = a3;
  v12[1] = 0;
  *i = (uint64_t)v12;
  ++*(_DWORD *)(a1 + 12);
  for (i = (uint64_t *)(*(_QWORD *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i == -8;
  return i;
}

uint64_t llvm::OpenMPIRBuilder::createOffloadMaptypes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v5;
  llvm::Type *v6;
  llvm::ArrayType *IntNTy;
  llvm::ConstantAggregateZero *v8;
  llvm::Value **Impl;
  _DWORD *v10;
  uint64_t v11;
  llvm::PointerType *v12;
  uint64_t result;
  _QWORD v14[4];
  __int16 v15;

  v5 = *(_BYTE **)a2;
  v6 = (llvm::Type *)*(unsigned int *)(a2 + 8);
  IntNTy = (llvm::ArrayType *)llvm::Type::getIntNTy(**(llvm::Type ***)(a1 + 336), (llvm::LLVMContext *)0x40);
  llvm::ArrayType::get(IntNTy, v6);
  Impl = llvm::ConstantDataSequential::getImpl(v5, (llvm::Type *)(8 * (_QWORD)v6), v8);
  v10 = operator new(0x78uLL);
  v10[13] = v10[13] & 0x38000000 | 1;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = v10 + 8;
  v11 = *(_QWORD *)(a1 + 336);
  v12 = *Impl;
  v15 = 260;
  v14[0] = a3;
  result = llvm::GlobalVariable::GlobalVariable((uint64_t)(v10 + 8), v11, v12, 1, 8, (uint64_t)Impl, (uint64_t)v14, 0, 0, 0, 0);
  v10[16] = v10[16] & 0xFFFFFF3F | 0x80;
  return result;
}

uint64_t llvm::OpenMPIRBuilder::createAtomicCompare(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, int a6, int a7, int a8)
{
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;

  if (!sub_1C62683AC(a1, a2))
    return *a2;
  if (a7)
  {
    if (a7 == 2)
      v17 = 9;
    else
      v17 = 10;
    if (a7 == 2)
      v18 = 7;
    else
      v18 = 8;
    if (*(_BYTE *)(a3 + 16))
      v17 = v18;
    if (a7 == 2)
      v19 = 10;
    else
      v19 = 9;
    if (a7 == 2)
      v20 = 8;
    else
      v20 = 7;
    if (*(_BYTE *)(a3 + 16))
      v21 = v20;
    else
      v21 = v19;
    if (a8)
      v22 = v21;
    else
      v22 = v17;
    sub_1C61D775C((uint64_t *)(a1 + 344), v22, *(_QWORD *)a3, a4, 0, a6, 1);
  }
  else
  {
    sub_1C61D75CC((uint64_t *)(a1 + 344), *(_QWORD *)a3, (uint64_t ***)a4, a5, 0, a6, dword_1C8654134[a6 - 2], 1);
  }
  if ((a6 - 5) <= 2)
    llvm::OpenMPIRBuilder::emitFlush(a1, a2);
  return *(_QWORD *)(a1 + 392);
}

uint64_t llvm::OpenMPIRBuilder::createOffloadMapnames(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  llvm::PointerType *Int8Ty;
  llvm::ArrayType *v7;
  llvm::PoisonValue *v8;
  llvm::Value **v9;
  _DWORD *v10;
  uint64_t v11;
  llvm::PointerType *v12;
  _QWORD v14[4];
  __int16 v15;

  Int8Ty = (llvm::PointerType *)llvm::Type::getInt8Ty(**(llvm::Type ***)(a1 + 336), (llvm::LLVMContext *)a2);
  v7 = (llvm::ArrayType *)llvm::PointerType::get(Int8Ty, 0);
  llvm::ArrayType::get(v7, (llvm::Type *)a2[2]);
  v9 = llvm::ConstantArray::get(v8, *(llvm::Type **)a2, a2[2]);
  v10 = operator new(0x78uLL);
  v10[13] = v10[13] & 0x38000000 | 1;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = v10 + 8;
  v11 = *(_QWORD *)(a1 + 336);
  v12 = *v9;
  v15 = 260;
  v14[0] = a3;
  return llvm::GlobalVariable::GlobalVariable((uint64_t)(v10 + 8), v11, v12, 1, 8, (uint64_t)v9, (uint64_t)v14, 0, 0, 0, 0);
}

uint64_t sub_1C626D3D0(uint64_t a1)
{
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 168), 8);
  sub_1C54E61C4(a1 + 144);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 144), 8);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

uint64_t sub_1C626D428(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_1C626D47C(a1, a2);
  result = sub_1C626D62C(*(_QWORD *)a1 + 88 * v3, a2);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C626D47C(uint64_t a1, uint64_t a2)
{
  void *v4;
  int v5;
  unsigned int v6;
  unint64_t v8;

  v8 = 0;
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 88, &v8);
  sub_1C626D62C((uint64_t)v4 + 88 * *(unsigned int *)(a1 + 8), a2);
  sub_1C626D514(a1, (uint64_t)v4);
  v5 = v8;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  v6 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v5;
  return (uint64_t)v4 + 88 * v6 - 88;
}

uint64_t sub_1C626D514(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    v4 = result;
    v5 = *(_QWORD *)result;
    v6 = 88 * v2;
    do
    {
      result = sub_1C626D594(a2, v5);
      v5 += 88;
      a2 += 88;
      v6 -= 88;
    }
    while (v6);
    v7 = *(_DWORD *)(v4 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)v4;
      v9 = 88 * v7;
      v10 = v8 - 88;
      do
      {
        result = (uint64_t)sub_1C626D6CC((_QWORD *)(v10 + v9));
        v9 -= 88;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t sub_1C626D594(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = a1 + 72;
  *(_QWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 64) = 0x200000000;
  if (*(_DWORD *)(a2 + 64))
    sub_1C4964480(a1 + 56, (const void **)(a2 + 56));
  return a1;
}

uint64_t sub_1C626D62C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = a1 + 72;
  *(_QWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 64) = 0x200000000;
  if (*(_DWORD *)(a2 + 64))
    sub_1C49EEBE4(a1 + 56, a2 + 56);
  return a1;
}

_QWORD *sub_1C626D6CC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)a1[7];
  if (v2 != a1 + 9)
    free(v2);
  v3 = (_QWORD *)a1[3];
  if (v3 == a1)
  {
    v4 = 4;
    v3 = a1;
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t sub_1C626D72C(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      sub_1C4926528(v5, a2, &v11);
      v9 = v11;
      *v11 = *a2;
      v10 = a2[1];
      a2[1] = 0;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
      result = a2[1];
      a2[1] = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C626D7FC(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E816D5D0;
  if (*(_BYTE *)(a1 + 208))
  {
    sub_1C61BB478((uint64_t *)(a1 + 8));
    *(_BYTE *)(a1 + 208) = 0;
  }
  return a1;
}

void sub_1C626D844(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E816D5D0;
  if (*(_BYTE *)(a1 + 208))
  {
    sub_1C61BB478((uint64_t *)(a1 + 8));
    *(_BYTE *)(a1 + 208) = 0;
  }
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C626D89C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E816D600;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

void sub_1C626D8E4()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C626D8FC(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E816D658;
  sub_1C4D9F9F4((char **)(a1 + 168));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 168), 8);
  sub_1C4D9FB40((char **)(a1 + 24));
  return a1;
}

void sub_1C626D948()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C626D964()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C626D97C(_QWORD *a1)
{
  *a1 = &unk_1E816D708;
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(a1 + 1);
  return a1;
}

void sub_1C626D9B4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C626D9CC(_QWORD *a1)
{
  *a1 = &unk_1E816D760;
  llvm::ScalarEvolution::~ScalarEvolution((llvm::ScalarEvolution *)(a1 + 1));
  return a1;
}

void sub_1C626DA04()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C626DA20(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E816D828;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_1C626DA80(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_1E816D828;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
LABEL_7:
      JUMPOUT(0x1CAA32FC0);
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
  goto LABEL_7;
}

_QWORD *sub_1C626DAF4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &unk_1E816D858;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

char **sub_1C626DB38(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 40 * v3;
    while (1)
    {
      v5 = *(char **)&v2[v4 - 16];
      if (&v2[v4 - 40] == v5)
        break;
      if (v5)
      {
        v6 = 5;
LABEL_7:
        (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
      }
      v4 -= 40;
      if (!v4)
      {
        v2 = *a1;
        goto LABEL_10;
      }
    }
    v5 = &v2[v4 - 40];
    v6 = 4;
    goto LABEL_7;
  }
LABEL_10:
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

char **sub_1C626DBC8(char **a1)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = 88 * v3;
    v5 = v2 - 88;
    do
    {
      sub_1C626D6CC(&v5[v4]);
      v4 -= 88;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_1C626DC2C(_WORD *a1, __int128 *a2, double **a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED8058C8, 0, 0);
  xmmword_1ED805948 = 0u;
  *(_OWORD *)&qword_1ED805958 = 0u;
  *((_QWORD *)&xmmword_1ED805948 + 1) = &unk_1E8134CB8;
  qword_1ED8058C8 = (uint64_t)&unk_1E8134C50;
  qword_1ED805968 = (uint64_t)&unk_1E819E320;
  qword_1ED805970 = (uint64_t)&unk_1E8134CD8;
  qword_1ED805988 = (uint64_t)&qword_1ED805970;
  sub_1C54E7764(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED8058C8);
}

void sub_1C626DCD4(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 88, &v5);
  sub_1C626D514(a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

double sub_1C626DD40(char **a1, char **a2)
{
  char *v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  double result;

  v4 = *a1;
  v5 = *((_DWORD *)a1 + 2);
  if (v5)
  {
    v6 = 88 * v5;
    v7 = v4 - 88;
    do
    {
      sub_1C626D6CC(&v7[v6]);
      v6 -= 88;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

_QWORD *sub_1C626DDBC(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_1C626DE28(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C626DF1C(a1, a2, v8);
    v7 = a2[1];
    *v5 = *a2;
    v5[1] = v7;
    v5[2] = 0;
  }
  return v5;
}

uint64_t sub_1C626DE28(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v5 = (37 * a4)
       + ~((unint64_t)(37 * a4) << 32)
       + ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (_QWORD *)(a1 + 24 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
      v14 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v11 != -4096 || v12 != -1)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v12 == -2;
        if (v18 && v11 == -8192)
          v16 = v10;
        v20 = v9 + v17++;
        v9 = v20 & v8;
        v10 = (_QWORD *)(a1 + 24 * (v20 & v8));
        v11 = *v10;
        v12 = v10[1];
        v14 = 1;
        if (*v10 == a3 && v12 == a4)
          goto LABEL_8;
      }
      v14 = 0;
      if (v16)
        v10 = v16;
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

_QWORD *sub_1C626DF1C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C54E7990(a1, v6);
  v9 = 0;
  sub_1C626DE28(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096 || a3[1] != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C626DFD0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = xmmword_1C8651090;
      v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    v10 = a2[1];
    if ((*a2 != -4096 || v10 != -1) && (v9 != -8192 || v10 != -2))
    {
      v15 = 0;
      result = sub_1C626DE28(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v15);
      v13 = v15;
      v14 = a2[1];
      *v15 = *a2;
      v13[1] = v14;
      v13[2] = a2[2];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 3;
  }
  return result;
}

void sub_1C626E098(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 40, &v5);
  sub_1C626E104(a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

uint64_t sub_1C626E104(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(_QWORD *)result;
    v6 = 40 * v2;
    do
    {
      v7 = *(_QWORD *)(v5 + 24);
      if (v7)
      {
        if (v5 == v7)
        {
          *(_QWORD *)(a2 + 24) = a2;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 24) + 24))(*(_QWORD *)(v5 + 24), a2);
        }
        else
        {
          *(_QWORD *)(a2 + 24) = v7;
          *(_QWORD *)(v5 + 24) = 0;
        }
      }
      else
      {
        *(_QWORD *)(a2 + 24) = 0;
      }
      v8 = *(_DWORD *)(v5 + 32);
      *(_BYTE *)(a2 + 36) = *(_BYTE *)(v5 + 36);
      *(_DWORD *)(a2 + 32) = v8;
      v5 += 40;
      a2 += 40;
      v6 -= 40;
    }
    while (v6);
    v9 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)v4;
      v11 = 40 * v9;
      while (1)
      {
        result = *(_QWORD *)(v10 + v11 - 16);
        if (v10 + v11 - 40 == result)
          break;
        if (result)
        {
          v12 = 5;
LABEL_16:
          result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v12))();
        }
        v11 -= 40;
        if (!v11)
          return result;
      }
      result = v10 + v11 - 40;
      v12 = 4;
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t sub_1C626E1F0(uint64_t a1)
{
  _QWORD *v2;
  llvm::PassRegistry *v3;
  unint64_t v4;
  unint64_t PassRegistry;
  _QWORD *v7;
  _QWORD v8[2];

  v2 = (_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1EF8F7108);
  *v2 = &off_1E816D9E8;
  v3 = (llvm::PassRegistry *)sub_1C54EB18C((uint64_t)(v2 + 31));
  *(_QWORD *)(a1 + 616) = 0;
  *(_BYTE *)(a1 + 624) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  v4 = atomic_load(&qword_1ED8310E8);
  if (v4 != -1)
  {
    v8[0] = sub_1C54E9D40;
    v8[1] = &PassRegistry;
    v7 = v8;
    std::__call_once(&qword_1ED8310E8, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void sub_1C626E290(uint64_t a1)
{
  sub_1C54E9F54(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C626E2B4(llvm::MachineFunctionPass *this, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  return llvm::MachineFunctionPass::getAnalysisUsage(this, a2);
}

void sub_1C626E2C0(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E816D9E8;
  sub_1C54E9F54((uint64_t)a1 + 248);
  sub_1C4926674(a1);
}

void sub_1C626E2F0(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E816D9E8;
  sub_1C54E9F54((uint64_t)a1 + 248);
  sub_1C4926674(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C626E334()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C626E1F0(v0);
}

void sub_1C626E35C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;

  llvm::APInt::byteSwap((llvm::APInt *)a1, (llvm::APInt *)&v6);
  llvm::APInt::byteSwap((llvm::APInt *)(a1 + 16), (llvm::APInt *)&v4);
  *(_DWORD *)(a2 + 8) = v7;
  *(_QWORD *)a2 = v6;
  *(_DWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 16) = v4;
}

llvm::APInt *sub_1C626E3B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  llvm::APInt *result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  llvm::APInt::reverseBits((llvm::APInt *)a1, (llvm::APInt *)&v7);
  result = llvm::APInt::reverseBits((llvm::APInt *)(a1 + 16), (llvm::APInt *)&v5);
  *(_DWORD *)(a2 + 8) = v8;
  *(_QWORD *)a2 = v7;
  *(_DWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void *sub_1C626E414(llvm::MachineFunctionPass *this, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  return llvm::MachineFunctionPass::getAnalysisUsage(this, a2);
}

void sub_1C626E420(llvm::Pass *a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E816DB48;
  v2 = *((_QWORD *)a1 + 31);
  *((_QWORD *)a1 + 31) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1C4926674(a1);
}

void sub_1C626E464(llvm::Pass *a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E816DB48;
  v2 = *((_QWORD *)a1 + 31);
  *((_QWORD *)a1 + 31) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1C4926674(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C626E4C0(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E816DB00;
  sub_1C54EF034((int *)(a1 + 112));
  *(_QWORD *)a1 = off_1E7FA1810;
  v2 = *(void **)(a1 + 16);
  if (v2 != *(void **)(a1 + 8))
    free(v2);
  return a1;
}

uint64_t sub_1C626E520()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C626E548(v0);
}

uint64_t sub_1C626E548(uint64_t a1)
{
  llvm::PassRegistry *v2;
  unint64_t v3;
  unint64_t PassRegistry;
  _QWORD *v6;
  _QWORD v7[2];

  v2 = (llvm::PassRegistry *)sub_1C4776848(a1, (uint64_t)&unk_1EF8F7110);
  *(_QWORD *)v2 = &off_1E816DB48;
  *((_QWORD *)v2 + 31) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  v3 = atomic_load(&qword_1ED8310F0);
  if (v3 != -1)
  {
    v7[0] = sub_1C54EB40C;
    v7[1] = &PassRegistry;
    v6 = v7;
    std::__call_once(&qword_1ED8310F0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *sub_1C626E5DC(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;

  *a1 = &off_1E816EC08;
  v4 = (unsigned __int8 *)a1[4];
  v2 = (uint64_t)(a1 + 4);
  v3 = v4;
  if (v4)
    llvm::MetadataTracking::untrack(v2, v3);
  return a1;
}

_QWORD *sub_1C626E61C(uint64_t a1, _QWORD *a2, llvm::PointerType **a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::PointerType *v10;
  unint64_t v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  BOOL v17;
  char v18;
  const char *v19;
  uint64_t v20;
  unsigned __int8 v21;
  int StackObject;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  int v30;
  unint64_t v31;
  _DWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v7 = (_QWORD *)a2[1];
  v8 = *(_QWORD *)(*v7 + 40);
  v9 = v8 + 272;
  v10 = *a3;
  v11 = *(unsigned int *)(v8 + 276);
  v12 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem((llvm::DataLayout *)(v8 + 272), *(_DWORD *)(v8 + 276)) + 4);
  v13 = (unsigned __int8 *)v7[7];
  sub_1C4768AD0(v9, (uint64_t)v10);
  v15 = (unint64_t)(v14 + 7) >> 3;
  v17 = v16 == 1;
  llvm::DataLayout::getAlignment(v9, (uint64_t)v10);
  if (v17)
  {
    v28 = v18;
    v18 = v28;
  }
  v20 = ((1 << v18) + v15 - 1) & -(1 << v18);
  llvm::DataLayout::getPrefTypeAlign(v9, (uint64_t)v10);
  StackObject = llvm::MachineFrameInfo::CreateStackObject(v13, v20, v21, 0, 0, 0);
  v31 = ((v11 & 0xFFFFFF) << 19) | (8 * (unsigned __int16)v12) | 2;
  LODWORD(v32) = 0;
  sub_1C5543FA8(a2, (int *)&v31, StackObject);
  v30 = *(_DWORD *)(*(_QWORD *)(v23 + 32) + 4);
  v24 = llvm::PointerType::get(v10, (llvm::Type *)v11);
  sub_1C4860878((uint64_t)&v31, &v30, 1, v24, -1, 0, 0, 1, 0);
  sub_1C54F2304(a1, (uint64_t *)&v31, 0, v9, (uint64_t)a3);
  *v32 |= 8u;
  v26 = *(_QWORD *)(a4 + 192);
  v25 = a4 + 192;
  sub_1C54F5758(v25, v26, (unint64_t)&v31);
  *(_DWORD *)(v25 + 4940) = StackObject;
  *(_DWORD *)(v25 + 4936) = v30;
  return sub_1C54F52E4(&v31);
}

uint64_t sub_1C626E808(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = llvm::AttributeList::getParamInAllocaType((llvm::AttributeList *)(a1 + 64), a2);
  if (!result)
  {
    v5 = *(_QWORD *)(a1 - 32);
    if (v5 && !*(_BYTE *)(v5 + 16) && *(_QWORD *)(v5 + 24) == *(_QWORD *)(a1 + 72))
    {
      v6 = *(_QWORD *)(v5 + 112);
      return llvm::AttributeList::getParamInAllocaType((llvm::AttributeList *)&v6, a2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C626E87C(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = llvm::AttributeList::getParamPreallocatedType((llvm::AttributeList *)(a1 + 64), a2);
  if (!result)
  {
    v5 = *(_QWORD *)(a1 - 32);
    if (v5 && !*(_BYTE *)(v5 + 16) && *(_QWORD *)(v5 + 24) == *(_QWORD *)(a1 + 72))
    {
      v6 = *(_QWORD *)(v5 + 112);
      return llvm::AttributeList::getParamPreallocatedType((llvm::AttributeList *)&v6, a2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C626E8F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_1C626EA30(a1, a2);
  v4 = *(_QWORD *)a1 + 32 * v3;
  result = *(_QWORD *)(a2 + 24);
  if (result)
  {
    if (result == a2)
    {
      *(_QWORD *)(v4 + 24) = v4;
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v4);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(v4 + 24) = result;
    }
  }
  else
  {
    *(_QWORD *)(v4 + 24) = 0;
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

unint64_t sub_1C626E984(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;

  v2 = *a1;
  if ((*a1 & 0xFFFFFFFFFFFFFFF9) == 0 || (*a1 & 4) == 0)
    return a2;
  v5 = 0x800000000000000;
  if ((v2 & 2) == 0)
    v5 = 0x8000000000000;
  return sub_1C4953AD0((unsigned __int16)(v2 >> 3) | ((unint64_t)((v5 & v2) != 0) << 32), a2);
}

unint64_t sub_1C626E9C8(unint64_t *a1, unint64_t a2)
{
  uint64_t v3;

  v3 = *a1;
  if ((*a1 & 0xFFFFFFFFFFFFFFF9) != 0 && (*a1 & 4) != 0)
    v3 = sub_1C492E6FC(a1);
  if (HIDWORD(a2) == 1 || a2 != 1)
    return sub_1C4953AD0(a2, v3);
  else
    return v3;
}

uint64_t sub_1C626EA30(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v10;

  v10 = 0;
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 32, &v10);
  v5 = &v4[32 * *(unsigned int *)(a1 + 8)];
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      *((_QWORD *)v5 + 3) = v5;
      (*(void (**)(_QWORD, char *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v5);
    }
    else
    {
      *((_QWORD *)v5 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  else
  {
    *((_QWORD *)v5 + 3) = 0;
  }
  sub_1C54F55E8(a1, (uint64_t)v4);
  v7 = v10;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  v8 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v7;
  return (uint64_t)&v4[32 * v8 - 32];
}

void sub_1C626EB00(uint64_t a1)
{
  sub_1C626EF28(a1);
  sub_1C627140C(a1);
  sub_1C6273F0C(a1);
  sub_1C6274BEC(a1);
  sub_1C6275B14(a1);
  sub_1C6270D88(a1);
}

unint64_t *sub_1C626EB44(uint64_t *a1, llvm::MachineInstr *a2, int a3, int *a4, uint64_t a5)
{
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD v15[4];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v10 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 4);
  v11 = *a1;
  *(_QWORD *)(v11 + 40) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(v11 + 48) = a2;
  v12 = llvm::MachineRegisterInfo::cloneVirtualRegister(a1[1], v10, (unsigned __int8 *)&unk_1C8725813, 0);
  v13 = *a1;
  v15[0] = v12;
  v15[2] = 1;
  if (a3)
    (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v13 + 32))(v13, 68, v15, 1, 0, 0, 0);
  else
    sub_1C554760C(v13, (uint64_t)v15, a4, a5);
  llvm::MachineInstr::eraseFromParent(a2);
  return sub_1C54F6874(a1, (_QWORD *)a1[1], v10, v12);
}

BOOL sub_1C626EC5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 48);
  if ((v1 & 7) != 0)
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v1 &= 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a1 + 48) = v1;
    v2 = v1;
  }
  if ((*(_WORD *)(v2 + 36) & 0xF00) != 0)
    return 0;
  if ((v1 & 3) != 0)
  {
    v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v4 = v1 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a1 + 48) = v4;
  }
  return (*(_WORD *)(v4 + 32) & 4) == 0;
}

uint64_t sub_1C626ECC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
    return sub_1C4B071BC(a1, a2, a3);
  if (*(_QWORD *)(a2 + 24) == *(_QWORD *)(a3 + 24))
    return sub_1C54F7F14(a2, a3);
  return 0;
}

uint64_t sub_1C626ECEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::MachineInstr *UniqueVRegDef;
  int v6;
  llvm::MachineFunction *v7;
  uint64_t v8;
  llvm::MachineInstr *v9;
  llvm::MachineFunction *v10;
  llvm::MachineInstr *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t result;
  _QWORD v20[4];
  unsigned __int8 *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  UniqueVRegDef = (llvm::MachineInstr *)llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(a1 + 8), *(_DWORD *)a3);
  sub_1C54F83CC((uint64_t)v20, a2);
  v6 = **(unsigned __int16 **)(a2 + 16);
  v7 = sub_1C55437B8(v20, dword_1C8654260[(__int16)(v6 - 90)]);
  v10 = (llvm::MachineFunction *)sub_1C55438A0(v20, (uint64_t)v7, v8);
  v11 = v9;
  if (v6 == 96)
  {
    v12 = *(_DWORD *)a3;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v22 = 0x1000000;
    v23 = v12;
    llvm::MachineInstr::addOperand(v9, v10, (const llvm::MachineOperand *)&v22);
    v13 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
    v24 = 0;
    v25 = 0;
    v22 = 0;
    v23 = v13;
    v26 = 0;
  }
  else
  {
    v14 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v22 = 0x1000000;
    v23 = v14;
    llvm::MachineInstr::addOperand(v9, v10, (const llvm::MachineOperand *)&v22);
    v15 = *(_DWORD *)a3;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v22 = 0x1000000;
    v23 = v15;
  }
  llvm::MachineInstr::addOperand(v11, v10, (const llvm::MachineOperand *)&v22);
  v16 = *(_DWORD *)(a3 + 4);
  v24 = 0;
  v25 = 0;
  v22 = 0;
  v23 = v16;
  v26 = 0;
  llvm::MachineInstr::addOperand(v11, v10, (const llvm::MachineOperand *)&v22);
  v17 = *(_DWORD *)(a3 + 8);
  v24 = 0;
  v25 = 0;
  v22 = 0;
  v23 = v17;
  v26 = 0;
  llvm::MachineInstr::addOperand(v11, v10, (const llvm::MachineOperand *)&v22);
  v18 = *(unsigned __int8 *)(a3 + 12);
  v22 = 1;
  v24 = 0;
  v25 = v18;
  llvm::MachineInstr::addOperand(v11, v10, (const llvm::MachineOperand *)&v22);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
  result = llvm::MachineInstr::eraseFromParent(UniqueVRegDef);
  v20[0] = &off_1E816EC08;
  if (v21)
    return llvm::MetadataTracking::untrack((uint64_t)&v21, v21);
  return result;
}

uint64_t sub_1C626EEA4(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;

  result = llvm::MachineRegisterInfo::getVRegDef(a2, *a3);
  if (result)
  {
    if (**(_WORD **)(result + 16) == 193
      && *(_DWORD *)(result + 40) == 3
      && (v6 = *(_QWORD *)(result + 32),
          **(_DWORD **)a1 = *(_DWORD *)(v6 + 36),
          v7 = sub_1C554C050(*(_DWORD *)(v6 + 68), a2),
          v8))
    {
      **(_QWORD **)(a1 + 8) = v7;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1C626EF28(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED805A70);
  if (v1 != -1)
  {
    v4[0] = sub_1C54F8F08;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED805A70, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C626EF88(uint64_t a1, int a2)
{
  uint64_t v4;

  v4 = sub_1C4776848(a1, (uint64_t)&unk_1EF8F2FC8);
  *(_QWORD *)v4 = &off_1E816DDA0;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = v4 + 288;
  *(_QWORD *)(v4 + 280) = 0x400000000;
  *(_QWORD *)(v4 + 320) = v4 + 336;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_QWORD *)(v4 + 360) = 0;
  *(_QWORD *)(v4 + 368) = v4 + 384;
  *(_QWORD *)(v4 + 376) = 0x400000000;
  *(_QWORD *)(v4 + 416) = v4 + 432;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(_OWORD *)(v4 + 452) = 0u;
  *(_OWORD *)(v4 + 472) = 0u;
  *(_DWORD *)(v4 + 488) = 0;
  *(_DWORD *)(v4 + 512) = 0;
  *(_OWORD *)(v4 + 496) = 0u;
  *(_DWORD *)(v4 + 536) = 0;
  *(_OWORD *)(v4 + 520) = 0u;
  *(_QWORD *)(v4 + 544) = v4 + 560;
  *(_QWORD *)(v4 + 552) = 0x400000000;
  *(_DWORD *)(v4 + 704) = 0;
  *(_OWORD *)(v4 + 688) = 0u;
  *(_DWORD *)(v4 + 760) = 0;
  *(_OWORD *)(v4 + 744) = 0u;
  *(_DWORD *)(v4 + 784) = 0;
  *(_OWORD *)(v4 + 768) = 0u;
  *(_DWORD *)(v4 + 808) = 0;
  *(_OWORD *)(v4 + 792) = 0u;
  *(_QWORD *)(v4 + 824) = v4 + 840;
  *(_QWORD *)(v4 + 832) = 0x100000000;
  *(_QWORD *)(v4 + 872) = 0;
  *(_OWORD *)(v4 + 848) = 0u;
  *(_DWORD *)(v4 + 896) = a2;
  *(_QWORD *)(a1 + 904) = 0;
  sub_1C5509018(v4 + 912);
  *(_WORD *)(a1 + 1760) = 0;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1784) = 0u;
  return a1;
}

void *sub_1C626F0A0(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, llvm::StackProtector::ID);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::TargetPassConfig::ID);
  llvm::AnalysisUsage::addRequiredID(this, byte_1EF8F7108);
  if (*((_DWORD *)a1 + 224))
    llvm::AnalysisUsage::addRequiredID(this, llvm::BranchProbabilityInfoWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredID(this, llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C6277A80((uint64_t)this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

BOOL sub_1C626F144(int **a1)
{
  int *v1;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int *v10;
  int v11;
  uint64_t v12;

  v1 = *a1;
  if ((char *)a1[1] - (char *)*a1 != 176)
    return 1;
  v3 = (unsigned __int8 *)*((_QWORD *)v1 + 1);
  v4 = (unsigned __int8 *)*((_QWORD *)v1 + 12);
  v5 = (unsigned __int8 *)*((_QWORD *)v1 + 3);
  v6 = (unsigned __int8 *)*((_QWORD *)v1 + 14);
  if (v3 == v4 && v5 == v6)
    return 0;
  if (v5 == v4 && v3 == v6)
    return 0;
  if (v5 != v6 || *v1 != v1[22] || v5[16] > 0x14u || !llvm::Constant::isNullValue((llvm::Constant *)v5))
    return 1;
  v10 = *a1;
  v11 = **a1;
  if (v11 != 33)
  {
    if (v11 == 32)
    {
      v12 = *((_QWORD *)v10 + 4);
      return v12 != *((_QWORD *)v10 + 17);
    }
    return 1;
  }
  v12 = *((_QWORD *)v10 + 5);
  return v12 != *((_QWORD *)v10 + 17);
}

llvm::MachineFunction *sub_1C626F200(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  llvm *v7;
  const llvm::DataLayout *v8;
  unint64_t LLTForType;
  uint64_t v10;
  llvm::MachineFunction *result;
  uint64_t (**v12)();
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v6 = *(_QWORD *)(a3 + 32);
  v12 = &off_1E816EC08;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C5543728(&v12, v6);
  *(_QWORD *)&v15 = a3;
  *((_QWORD *)&v15 + 1) = a3 + 48;
  sub_1C47C0F04((unsigned __int8 **)&v14 + 1, (unsigned __int8 **)(*(_QWORD *)(a1 + 848) + 32));
  v7 = (llvm *)llvm::PointerType::get((llvm::PointerType *)(*****(_QWORD *****)(a1 + 864) + 1912), 0);
  LLTForType = llvm::getLLTForType(v7, *(llvm::Type **)(a1 + 880), v8);
  sub_1C6275464((uint64_t)&v12, LLTForType, a2[1]);
  result = sub_1C62755A0((uint64_t)&v12, *(_DWORD *)(*(_QWORD *)(v10 + 32) + 4), a2[1], *a2);
  v12 = &off_1E816EC08;
  if (*((_QWORD *)&v14 + 1))
    return (llvm::MachineFunction *)llvm::MetadataTracking::untrack((uint64_t)&v14 + 8, *((unsigned __int8 **)&v14 + 1));
  return result;
}

uint64_t sub_1C626F2E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  llvm **v9;
  const llvm::DataLayout *v10;
  unint64_t LLTForType;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t PointerTo;
  unsigned int v21;
  const char *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  llvm *v30;
  uint64_t v31;
  size_t v32;
  const llvm::APInt *v33;
  llvm::Value **v34;
  int *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  void *v42;
  unsigned int v43;
  llvm::ConstantInt ****v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a4 + 32);
  v44 = (llvm::ConstantInt ****)&off_1E816EC08;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  sub_1C5543728(&v44, v8);
  *(_QWORD *)&v47 = a4;
  *((_QWORD *)&v47 + 1) = a4 + 48;
  sub_1C47C0F04((unsigned __int8 **)&v46 + 1, (unsigned __int8 **)(*(_QWORD *)(a1 + 848) + 32));
  v9 = *(llvm ***)(a3 + 32);
  LLTForType = llvm::getLLTForType(*v9, *(llvm::Type **)(a1 + 880), v10);
  v12 = (int *)sub_1C54F95B0(a1, v9);
  if (v13)
    v14 = *v12;
  else
    v14 = 0;
  v51 = LLTForType;
  LODWORD(v52) = 0;
  v15 = sub_1C5545FB0(&v44, (uint64_t)&v51, (llvm::LLVMContext *)a3);
  v49 = LLTForType;
  v50 = 0;
  LODWORD(v51) = v14;
  v53 = 0;
  v54 = v15;
  v55 = v16;
  v56 = 1;
  v17 = ((uint64_t (*)(uint64_t *, int, uint64_t *, uint64_t, int *, uint64_t, uint64_t))v44[4])((uint64_t *)&v44, 46, &v49, 1, (int *)&v51, 2, 0);
  v19 = v18;
  PointerTo = llvm::Type::getPointerTo(*v9, 0);
  sub_1C4768AD0(*(_QWORD *)(a1 + 880), PointerTo);
  if ((_DWORD)v22 == 1)
  {
    v41 = v21;
    v21 = v41;
  }
  v23 = (8 * v21) | 1;
  v49 = v23;
  v50 = 0;
  v51 = v17;
  v52 = v19;
  v53 = 1;
  result = sub_1C5546B4C((uint64_t *)&v44, 126, (unint64_t *)&v49, (int *)&v51);
  *(_DWORD *)a2 = *(_DWORD *)(*(_QWORD *)(v25 + 32) + 4);
  if (!*(_BYTE *)(a3 + 49))
  {
    v28 = result;
    v29 = v25;
    v30 = *v9;
    v31 = *(unsigned int *)(a3 + 24);
    v43 = v31;
    if (v31 > 0x40)
    {
      v32 = ((unint64_t)(v31 + 63) >> 3) & 0x3FFFFFF8;
      v42 = (void *)operator new[]();
      memcpy(v42, *(const void **)(a3 + 16), v32);
    }
    else
    {
      v42 = *(void **)(a3 + 16);
    }
    llvm::APInt::operator-=((uint64_t)&v42, (unint64_t **)a3);
    LODWORD(v52) = v43;
    v51 = (unint64_t)v42;
    v43 = 0;
    v34 = llvm::ConstantInt::get((llvm::ConstantInt **)v30, (llvm::Type *)&v51, v33);
    v35 = (int *)sub_1C54F95B0(a1, v34);
    if (v36)
      v37 = *v35;
    else
      v37 = 0;
    if (v52 >= 0x41 && v51)
      MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
    if (v43 >= 0x41 && v42)
      MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
    v49 = v23;
    v50 = 0;
    LODWORD(v51) = v37;
    v53 = 0;
    sub_1C5546B4C((uint64_t *)&v44, 126, (unint64_t *)&v49, (int *)&v51);
    v39 = *(_DWORD *)(*(_QWORD *)(v38 + 32) + 4);
    v49 = 9;
    v50 = 0;
    LODWORD(v51) = 34;
    v53 = 2;
    v54 = v28;
    v55 = v29;
    v56 = 1;
    v57 = v39;
    v58 = 0;
    ((void (*)(uint64_t *, int, uint64_t *, uint64_t, int *, uint64_t, uint64_t))v44[4])((uint64_t *)&v44, 134, &v49, 1, (int *)&v51, 3, 0);
    LODWORD(v51) = *(_DWORD *)(*(_QWORD *)(v40 + 32) + 4);
    v53 = 0;
    result = (uint64_t)sub_1C5546168(&v44, (int *)&v51, *(_QWORD *)(a2 + 16));
  }
  v26 = *(unsigned __int8 **)(a2 + 8);
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)(a4 + 32) + 320)
    v27 = 0;
  else
    v27 = *(unsigned __int8 **)(a4 + 8);
  if (v26 != v27)
    result = (uint64_t)sub_1C55450BC(&v44, v26);
  v44 = (llvm::ConstantInt ****)&off_1E816EC08;
  if (*((_QWORD *)&v46 + 1))
    return llvm::MetadataTracking::untrack((uint64_t)&v46 + 8, *((unsigned __int8 **)&v46 + 1));
  return result;
}

uint64_t sub_1C626F6A4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, unsigned int a7, uint64_t a8, llvm::MachineBasicBlock *a9, char a10)
{
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int **v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  llvm::MachineBasicBlock *v31;

  v28 = *(_QWORD *)(*(_QWORD *)(a1 + 1792) + 32);
  v29 = *(_DWORD *)(a8 + 24);
  v30 = v28 + 80 * v29;
  v18 = *(_QWORD *)(v30 + 64);
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(*(_QWORD *)(a3 + 32) + 320, v18);
  v19 = *a6;
  *(_QWORD *)v18 = *a6;
  *(_QWORD *)(v18 + 8) = a6;
  *(_QWORD *)(v19 + 8) = v18;
  *a6 = v18;
  v31 = (llvm::MachineBasicBlock *)a4;
  sub_1C54FB7D0(a1, *(_QWORD *)(a3 + 16), *(_QWORD *)(a5 + 16), a4);
  sub_1C54FB7D0(a1, *(_QWORD *)(a3 + 16), *(_QWORD *)(a5 + 16), v18);
  v20 = *(_DWORD *)(a8 + 32);
  v21 = *(_QWORD *)(v18 + 88);
  v22 = *(_QWORD *)(v18 + 96);
  if (v21 != v22)
  {
    v23 = a2 >> 1;
    v24 = *(_QWORD *)(v18 + 88);
    do
    {
      if (*(_QWORD *)v24 == a5)
      {
        if (v23 + (unint64_t)v20 <= 0x80000000)
          v20 += v23;
        else
          v20 = 0x80000000;
        if (a7 >= v23)
          a7 -= v23;
        else
          a7 = 0;
        llvm::MachineBasicBlock::setSuccProbability((_QWORD *)v18, v21, v23);
        sub_1C50D6C6C(*(unsigned int **)(v18 + 112), *(unsigned int **)(v18 + 120));
      }
      else
      {
        sub_1C54FB7D0(a1, *(_QWORD *)(a3 + 16), *(_QWORD *)(*(_QWORD *)v24 + 16), v18);
      }
      v24 += 8;
      v21 += 8;
    }
    while (v24 != v22);
  }
  if ((a10 & 1) != 0)
  {
    v26 = v28 + 80 * v29;
    v25 = (unsigned int **)v31;
    *(_BYTE *)(v30 + 49) = 1;
  }
  else
  {
    v26 = v28 + 80 * v29;
    v25 = (unsigned int **)v31;
    if (!*(_BYTE *)(v30 + 49))
      sub_1C54FD740(*(_QWORD *)(a1 + 944), v31, a9, a7);
  }
  sub_1C54FD740(*(_QWORD *)(a1 + 944), (llvm::MachineBasicBlock *)v25, (llvm::MachineBasicBlock *)v18, v20);
  result = (uint64_t)sub_1C50D6C6C(v25[14], v25[15]);
  *(_QWORD *)(v26 + 40) = v25;
  *(_QWORD *)(v28 + 80 * v29 + 72) = a9;
  if (v25 == (unsigned int **)a3)
  {
    result = sub_1C626F2E4(a1, v26 + 56, v26, a3);
    *(_BYTE *)(v26 + 48) = 1;
  }
  return result;
}

void sub_1C626F890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, char a9)
{
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;

  v11 = *(_DWORD *)(a7 + 24);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 1792) + 56);
  v13 = v12 + 192 * v11;
  v14 = *(unsigned int *)(v13 + 72);
  if ((_DWORD)v14)
  {
    v16 = *(_QWORD *)(a2 + 32) + 320;
    v17 = 32 * v14;
    v18 = (uint64_t **)(*(_QWORD *)(v13 + 64) + 8);
    do
    {
      v19 = *v18;
      v18 += 4;
      llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v16, (uint64_t)v19);
      v20 = *a4;
      *v19 = *a4;
      v19[1] = (uint64_t)a4;
      *(_QWORD *)(v20 + 8) = v19;
      *a4 = (uint64_t)v19;
      v17 -= 32;
    }
    while (v17);
  }
  v21 = v12 + 192 * v11;
  *(_DWORD *)(v21 + 180) = a6;
  v22 = (_DWORD *)(v21 + 180);
  *(_QWORD *)(v22 - 33) = a3;
  *(_QWORD *)(v22 - 31) = a8;
  if (!*((_BYTE *)v22 - 134))
  {
    v23 = v12 + 192 * v11;
    v24 = *(unsigned int *)(v23 + 176);
    v25 = v24 + (a5 >> 1);
    v26 = v24 + (a5 >> 1);
    if (v25 <= 0x80000000)
      v27 = v26;
    else
      v27 = 0x80000000;
    *(_DWORD *)(v23 + 176) = v27;
    v28 = a6 - (a5 >> 1);
    if (a6 < a5 >> 1)
      v28 = 0;
    *v22 = v28;
  }
  if (a9)
    *(_BYTE *)(v12 + 192 * v11 + 184) = 1;
  if (a3 == a2)
  {
    sub_1C54FE118(a1, v12 + 192 * v11, a2);
    *(_BYTE *)(v12 + 192 * v11 + 45) = 1;
  }
}

void sub_1C626F9D8(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v6;
  _QWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  int NumSuccessors;
  int v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t Successor;
  char v16;
  _QWORD *v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  _BYTE v22[256];
  uint64_t v23;

  v6 = a2[5];
  if ((v6 & 0x40000000) != 0)
    v7 = (_QWORD *)*((_QWORD *)a2 - 1);
  else
    v7 = &a2[-8 * (v6 & 0x7FFFFFF)];
  v8 = (_DWORD *)sub_1C54F95B0(a1, *v7);
  if (v9)
    LODWORD(v9) = *v8;
  sub_1C6275518(a3, v9);
  v18 = v22;
  v19 = v22;
  v20 = 32;
  v21 = 0;
  v10 = *(_QWORD **)(a3 + 40);
  NumSuccessors = llvm::Instruction::getNumSuccessors((llvm::Instruction *)a2);
  if (NumSuccessors)
  {
    v12 = NumSuccessors;
    v13 = 0;
    v14 = (_DWORD *)(a1 + 496);
    do
    {
      Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)a2, v13);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v18, Successor);
      if (v16)
      {
        v23 = Successor;
        v17 = sub_1C5509768(v14, &v23);
        llvm::MachineBasicBlock::addSuccessor(v10, (_QWORD *)v17[1], -1);
      }
      ++v13;
    }
    while (v12 != v13);
    if (v19 != v18)
      free(v19);
  }
}

uint64_t sub_1C626FAE8(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::MachineFunction *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  llvm::DataLayout *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char PointerABIAlignment;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[108] + 16) + 176))(*(_QWORD *)(a1[108] + 16));
  v7 = a1[109];
  v8 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 240))(v6, a1[108], 0);
  llvm::MachineRegisterInfo::setRegClass(v7, a2, v8);
  LODWORD(v25) = a2;
  v26 = 1;
  v9 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 28, &v25, 1, 0, 0, 0);
  v11 = v10;
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[108] + 16) + 120))(*(_QWORD *)(a1[108] + 16));
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 776))(v12, *(_QWORD *)(*(_QWORD *)a1[108] + 40));
  if (result)
  {
    v14 = result;
    v15 = *(_QWORD *)result;
    v16 = *(_DWORD *)(*(_QWORD *)result + 8);
    v17 = v16;
    if ((v16 & 0xFE) == 0x12)
      v17 = *(_DWORD *)(**(_QWORD **)(v15 + 16) + 8);
    v18 = v17 >> 8;
    v19 = (llvm::DataLayout *)a1[110];
    v20 = ((unint64_t)(v17 >> 8) << 19) | (8
                                                * (unsigned __int16)*(_DWORD *)(llvm::DataLayout::getPointerAlignElem(v19, v17 >> 8)+ 4)) | 2;
    v21 = v14 & 0xFFFFFFFFFFFFFFFBLL;
    if ((v16 & 0xFE) == 0x12)
      v16 = *(_DWORD *)(**(_QWORD **)(v15 + 16) + 8);
    v22 = a1[108];
    PointerABIAlignment = llvm::DataLayout::getPointerABIAlignment(v19, v18);
    v24 = sub_1C484358C(v22 + 128, 80, 3);
    *(_QWORD *)v24 = v21;
    *(_QWORD *)(v24 + 8) = 0;
    *(_DWORD *)(v24 + 16) = v16 >> 8;
    *(_BYTE *)(v24 + 20) = 0;
    *(_QWORD *)(v24 + 24) = v20;
    *(_WORD *)(v24 + 32) = 49;
    *(_BYTE *)(v24 + 34) = PointerABIAlignment;
    *(_OWORD *)(v24 + 40) = 0u;
    *(_OWORD *)(v24 + 56) = 0u;
    *(_QWORD *)(v24 + 72) = 0;
    *(_WORD *)(v24 + 36) = 1;
    v25 = v24;
    return llvm::MachineInstr::setMemRefs(v11, v9, &v25, 1);
  }
  return result;
}

uint64_t sub_1C626FCE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (**v8)(void);
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 864) + 16) + 144))(*(_QWORD *)(*(_QWORD *)(a1 + 864) + 16));
  if (!v6)
    return 0;
  v10[0] = &off_1E816DE60;
  v10[1] = a1;
  v11 = v10;
  v7 = sub_1C550D110(v6, a3, a2, (uint64_t)v10);
  if (v11 == v10)
  {
    v8 = (void (**)(void))(v10[0] + 32);
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = (void (**)(void))(*v11 + 40);
LABEL_5:
    (*v8)();
  }
  return v7;
}

llvm::MachineFunction *sub_1C626FDBC(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  llvm::MCContext *v6;
  const llvm::Value *v7;
  const llvm::Value *v8;
  uint64_t v9;
  llvm::MachineFunction *v10;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  int v15;
  llvm::MCSymbol *TempSymbol;
  llvm::MachineFunction *v17;
  uint64_t v18;
  llvm::MachineInstr *v19;
  llvm::MCSymbol *v20;
  uint64_t v21;
  llvm::MachineInstr *v22;
  uint64_t v23;
  uint64_t v24;
  int EdgeProbability;
  _BOOL8 v26;
  char *v27;
  char *v28;
  llvm::MachineBasicBlock *v29;
  llvm::MachineBasicBlock *v30;
  llvm::MachineBasicBlock *v31;
  const llvm::Value *v32;
  void *v33;
  uint64_t v34;
  llvm::MCSymbol *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = *(llvm::MCContext **)(*(_QWORD *)(a1 + 864) + 24);
  v7 = *(const llvm::Value **)(a2 - 96);
  v8 = *(const llvm::Value **)(a2 - 64);
  v9 = *(_QWORD *)(a2 - 32);
  if (v9 && !*(_BYTE *)(v9 + 16) && *(_QWORD *)(v9 + 24) == *(_QWORD *)(a2 + 72) && (*(_BYTE *)(v9 + 33) & 0x20) != 0)
    return 0;
  v10 = 0;
  if (!sub_1C5500A9C(a2, 0))
  {
    if (sub_1C5500A9C(a2, 3))
      return 0;
    for (i = *((_QWORD *)v8 + 6); ; i = *(_QWORD *)(i + 8))
    {
      v13 = i - 24;
      if (!i)
        v13 = 0;
      if (*(_BYTE *)(v13 + 16) != 83)
        break;
    }
    if (*(_BYTE *)(i - 8) != 94)
      return 0;
    v14 = *(_QWORD *)(a2 - 32);
    v15 = *(unsigned __int8 *)(v14 + 16);
    if (v15 == 24 && !*(_BYTE *)(v14 + 88))
    {
      v10 = 0;
      if ((sub_1C626FCE0(a1, a2, (uint64_t)a3) & 1) == 0)
        return v10;
      TempSymbol = 0;
      v20 = 0;
      goto LABEL_21;
    }
    TempSymbol = (llvm::MCSymbol *)llvm::MCContext::createTempSymbol(v6);
    v17 = sub_1C55437B8(a3, 4u);
    v19 = (llvm::MachineInstr *)v18;
    sub_1C55438A0(a3, (uint64_t)v17, v18);
    v34 = 0;
    v35 = TempSymbol;
    v36 = 0;
    v33 = (void *)15;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v33);
    if (v15 == 24)
    {
      if ((sub_1C626FCE0(a1, a2, (uint64_t)a3) & 1) != 0)
        goto LABEL_20;
    }
    else if (sub_1C5500500(a1, a2, (uint64_t)a3))
    {
LABEL_20:
      v20 = (llvm::MCSymbol *)llvm::MCContext::createTempSymbol(v6);
      v10 = sub_1C55437B8(a3, 4u);
      v22 = (llvm::MachineInstr *)v21;
      sub_1C55438A0(a3, (uint64_t)v10, v21);
      v34 = 0;
      v35 = v20;
      v36 = 0;
      v33 = (void *)15;
      llvm::MachineInstr::addOperand(v22, v10, (const llvm::MachineOperand *)&v33);
      LOBYTE(v10) = 1;
LABEL_21:
      v33 = &v35;
      v34 = 0x100000000;
      v23 = *(_QWORD *)(a1 + 944);
      v24 = a3[5];
      if (v23)
        EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability(v23, *(_QWORD *)(v24 + 16), (uint64_t)v8);
      else
        EdgeProbability = 0;
      v26 = sub_1C5503A54(a1, v8, EdgeProbability, (uint64_t)&v33);
      if (v26)
      {
        v32 = v8;
        v30 = (llvm::MachineBasicBlock *)sub_1C5509768((_DWORD *)(a1 + 496), &v32)[1];
        v32 = v7;
        v31 = (llvm::MachineBasicBlock *)sub_1C5509768((_DWORD *)(a1 + 496), &v32)[1];
        sub_1C54FD740(*(_QWORD *)(a1 + 944), (llvm::MachineBasicBlock *)v24, v31, -1);
        if ((_DWORD)v34)
        {
          v27 = (char *)v33;
          v28 = (char *)v33 + 16 * v34;
          do
          {
            v29 = *(llvm::MachineBasicBlock **)v27;
            *((_BYTE *)v29 + 184) = 1;
            sub_1C54FD740(*(_QWORD *)(a1 + 944), (llvm::MachineBasicBlock *)v24, v29, *((_DWORD *)v27 + 2));
            v27 += 16;
          }
          while (v27 != v28);
        }
        sub_1C50D6C6C(*(unsigned int **)(v24 + 112), *(unsigned int **)(v24 + 120));
        if ((v10 & 1) != 0)
          llvm::MachineFunction::addInvoke(*(llvm::MachineFunction **)(a1 + 864), v30, TempSymbol, v20);
        sub_1C55450BC(a3, (unsigned __int8 *)v31);
      }
      if (v33 != &v35)
        free(v33);
      return (llvm::MachineFunction *)v26;
    }
    return 0;
  }
  return v10;
}

uint64_t sub_1C62700F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  int v8;
  int v9;
  _QWORD *v10;
  int *v11;
  uint64_t v12;
  int v13;
  char v14;
  _DWORD v16[6];
  uint64_t v17;
  int v18;
  _DWORD v19[4];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = (int *)sub_1C54F95B0(a1, a2);
  if (v7)
    v8 = *v6;
  else
    v8 = 0;
  v19[0] = v8;
  v19[2] = 1;
  v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0)
    v10 = *(_QWORD **)(a2 - 8);
  else
    v10 = (_QWORD *)(a2 - 32 * (v9 & 0x7FFFFFF));
  v11 = (int *)sub_1C54F95B0(a1, *v10);
  if (v12)
    v13 = *v11;
  else
    v13 = 0;
  v16[0] = v13;
  v16[4] = 0;
  llvm::DataLayout::getAlignment(*(_QWORD *)(a1 + 880), *(_QWORD *)a2);
  v17 = 1 << v14;
  v18 = 3;
  return (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 123, v19, 1, v16, 2, 0);
}

llvm::MachineBasicBlock *sub_1C62701FC(llvm::MachineBasicBlock *result, const llvm::BasicBlock *a2, llvm::MachineBasicBlock *a3, char a4)
{
  llvm::MachineBasicBlock **v6;

  *(_QWORD *)result = a3;
  if ((a4 & 1) == 0)
  {
    v6 = (llvm::MachineBasicBlock **)result;
    *((_QWORD *)result + 1) = llvm::StackProtectorDescriptor::addSuccessorMBB(result, a2, a3, 1, 0);
    result = llvm::StackProtectorDescriptor::addSuccessorMBB((llvm::StackProtectorDescriptor *)v6, a2, a3, 0, v6[2]);
    v6[2] = result;
  }
  return result;
}

uint64_t sub_1C627025C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  llvm *v8;
  const llvm::DataLayout *v9;
  unsigned __int8 v10;
  unint64_t LLTForMVT;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  _QWORD *v21;
  uint64_t *FixedStack;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t *v28;
  int *v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  int GenericVirtualRegister;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  unsigned int v43;
  __int128 v44;
  int v45;
  char v46;
  __int128 v47;
  int v48;
  char v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  unint64_t LLTForType;
  __int128 v56;
  __int128 v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 848);
  *(_QWORD *)(v6 + 40) = a3;
  *(_QWORD *)(v6 + 48) = a3 + 48;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 864) + 16) + 120))(*(_QWORD *)(*(_QWORD *)(a1 + 864) + 16));
  v8 = (llvm *)llvm::PointerType::get((llvm::PointerType *)(*****(_QWORD *****)(a1 + 864) + 1912), 0);
  LLTForType = llvm::getLLTForType(v8, *(llvm::Type **)(a1 + 880), v9);
  v10 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a1 + 880), 0);
  LLTForMVT = llvm::getLLTForMVT(v10);
  v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 56) + 64);
  v13 = *(_QWORD **)(a1 + 848);
  *(_QWORD *)&v56 = LLTForType;
  DWORD2(v56) = 0;
  sub_1C5543FA8(v13, (int *)&v56, v12);
  v15 = *(_DWORD *)(*(_QWORD *)(v14 + 32) + 4);
  v16 = *(_QWORD *)(**(_QWORD **)(a3 + 32) + 40);
  v17 = *(_QWORD *)(a1 + 880);
  v18 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)v16 + 1912), 0);
  llvm::DataLayout::getAlignment(v17, v18);
  v20 = v19;
  v21 = *(_QWORD **)(a1 + 848);
  v53 = LLTForMVT;
  v54 = 0;
  LODWORD(v50) = v15;
  v52 = 0;
  FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(*(_QWORD *)(a1 + 864) + 432), v12);
  *(_QWORD *)&v47 = (unint64_t)FixedStack | 4;
  *((_QWORD *)&v47 + 1) = 0;
  v49 = 0;
  if (FixedStack)
    v23 = *((_DWORD *)FixedStack + 3);
  else
    v23 = 0;
  v48 = v23;
  v56 = 0u;
  v57 = 0u;
  sub_1C55463F0(v21, (int *)&v53, (int *)&v50, &v47, v20, 5, &v56);
  v25 = *(_DWORD *)(*(_QWORD *)(v24 + 32) + 4);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 784))(v7) & 1) != 0
    || (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 792))(v7, v16))
  {
    return 0;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 2160))(v7))
  {
    v41 = *(_QWORD *)(a1 + 872);
    v43 = sub_1C4825F50(&LLTForType);
    if ((_DWORD)v42 == 1)
    GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v41, (8 * v43) | 1, "", 0);
    sub_1C626FAE8((_QWORD *)a1, GenericVirtualRegister, *(_QWORD *)(a1 + 848));
  }
  else
  {
    v28 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 776))(v7, v16);
    v29 = sub_1C54F95B0(a1, v28);
    if (v30)
      v31 = *v29;
    else
      v31 = 0;
    v32 = *(_QWORD **)(a1 + 848);
    v53 = LLTForMVT;
    v54 = 0;
    LODWORD(v50) = v31;
    v52 = 0;
    v33 = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(*(_QWORD *)(a1 + 864) + 432), v12);
    *(_QWORD *)&v44 = (unint64_t)v33 | 4;
    *((_QWORD *)&v44 + 1) = 0;
    v46 = 0;
    if (v33)
      v34 = *((_DWORD *)v33 + 3);
    else
      v34 = 0;
    v45 = v34;
    v56 = 0u;
    v57 = 0u;
    sub_1C55463F0(v32, (int *)&v53, (int *)&v50, &v44, v20, 5, &v56);
    GenericVirtualRegister = *(_DWORD *)(*(_QWORD *)(v35 + 32) + 4);
  }
  v37 = *(_QWORD *)(a1 + 848);
  v50 = 9;
  v51 = 0;
  LODWORD(v56) = 33;
  LODWORD(v57) = 2;
  DWORD2(v57) = GenericVirtualRegister;
  v58 = 0;
  v59 = v25;
  v60 = 0;
  v26 = 1;
  v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v37 + 32))(v37, 134, &v50, 1, &v56, 3, 0);
  v39 = *(_QWORD **)(a1 + 848);
  *(_QWORD *)&v56 = v38;
  *((_QWORD *)&v56 + 1) = v40;
  LODWORD(v57) = 1;
  sub_1C5546168(v39, (int *)&v56, *(_QWORD *)(a2 + 16));
  sub_1C55450BC(*(_QWORD **)(a1 + 848), *(unsigned __int8 **)(a2 + 8));
  return v26;
}

BOOL sub_1C62705F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BOOL8 v10;
  _DWORD *v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int v17;
  uint64_t v18;
  _BYTE v19[72];
  uint64_t v20;
  _QWORD v21[4];
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  char v31;
  _QWORD v32[2];
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  int v37;
  _DWORD *v38;
  uint64_t v39;
  _DWORD v40[1218];
  __int128 v41;
  char v42;
  char v43;
  int v44;
  char v45;
  int v46;
  uint64_t v47;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v47 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(v4 + 848);
  *(_QWORD *)(v5 + 40) = v6;
  *(_QWORD *)(v5 + 48) = v6 + 48;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 864) + 16) + 120))(*(_QWORD *)(*(_QWORD *)(v4 + 864) + 16));
  v8 = *(_QWORD *)(v7 + 179120);
  v28 = 0;
  v29[0] = &v30;
  v29[1] = 0x400000000;
  v31 = 0;
  v32[0] = &v33;
  v32[1] = 0x400000000;
  v34[0] = &v35;
  v34[1] = 0x200000000;
  v36 = 0;
  v38 = v40;
  v39 = 0x2000000000;
  v40[1216] = 0;
  v43 = 0;
  v41 = 0u;
  v42 = 0;
  v44 = 0;
  v45 = 1;
  v46 = 0;
  v9 = *(_DWORD *)(v7 + 184236);
  v24 = 9;
  v25 = 0;
  v26 = v8;
  v23 = v9;
  v27 = 0;
  v17 = 0;
  sub_1C4860878((uint64_t)&v18, &v17, 1, *****(_QWORD *****)(v4 + 864) + 1576, 0, 0, 0, 1, 0);
  v28 = v18;
  sub_1C48620A0((uint64_t)v29, (uint64_t)v19);
  v31 = v19[64];
  sub_1C48621E4((uint64_t)v32, (uint64_t)&v20);
  sub_1C48621E4((uint64_t)v34, (uint64_t)v21);
  v36 = v21[3];
  v37 = v22;
  sub_1C54F52E4(&v18);
  v10 = 0;
  if ((*(unsigned int (**)(_QWORD, _QWORD, int *))(**(_QWORD **)(v4 + 248) + 72))(*(_QWORD *)(v4 + 248), *(_QWORD *)(v4 + 848), &v23))
  {
    v11 = *(_DWORD **)(*(_QWORD *)(v4 + 864) + 8);
    v12 = v11[118];
    v10 = (v12 != 42 || v11[120] != 3 || v11[121] != 25) && (v12 - 65) < 0xFFFFFFFE;
  }
  v13 = v38;
  if ((_DWORD)v39)
  {
    v14 = 38 * v39;
    v15 = v38 - 38;
    do
    {
      sub_1C54F52E4(&v15[v14]);
      v14 -= 38;
    }
    while (v14 * 4);
    v13 = v38;
  }
  if (v13 != v40)
    free(v13);
  sub_1C54F52E4(&v28);
  return v10;
}

void sub_1C6270894(uint64_t a1)
{
  sub_1C550939C(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62708B8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C626EF88(v0, 0);
}

uint64_t sub_1C62708E4(uint64_t a1, _QWORD *a2, uint64_t *a3, int *a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  _QWORD v19[2];
  int v20;
  uint64_t v21;

  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    v14 = *a3;
    v15 = *a4;
    v16 = *a5;
    v19[0] = *a2;
    v19[1] = v14;
    v20 = v15;
    v21 = v16;
    v17 = (_OWORD *)sub_1C47C0F60(a1, (unint64_t)v19, 1);
    v6 = *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 8);
    v18 = v17[1];
    *(_OWORD *)v6 = *v17;
    *(_OWORD *)(v6 + 16) = v18;
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
    v7 = *(_QWORD *)a1;
  }
  else
  {
    v7 = *(_QWORD *)a1;
    v8 = *(_QWORD *)a1 + 32 * v6;
    v9 = *a3;
    v10 = *a4;
    v11 = *a5;
    *(_QWORD *)v8 = *a2;
    *(_QWORD *)(v8 + 8) = v9;
    *(_DWORD *)(v8 + 16) = v10;
    *(_QWORD *)(v8 + 24) = v11;
  }
  v12 = (v6 + 1);
  *(_DWORD *)(a1 + 8) = v12;
  return v7 + 32 * v12 - 32;
}

_QWORD *sub_1C6270994(_QWORD *a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)a1[14];
  if (v2 != a1 + 16)
    free(v2);
  MEMORY[0x1CAA32FB4](a1[10], 8);
  MEMORY[0x1CAA32FB4](a1[7], 8);
  MEMORY[0x1CAA32FB4](a1[4], 8);
  return a1;
}

char **sub_1C62709F0(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  char *v7;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v7 = v2;
    v5 = 32 * v3;
    do
    {
      v6 = *(char **)&v7[v5 - 24];
      if (&v7[v5 - 8] != v6)
        free(v6);
      v5 -= 32;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_1C6270A68(__int128 *a1, _WORD *a2, char **a3)
{
  uint64_t v6;
  char *v7;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED8059B0, 0, 0);
  byte_1ED805A30 = 0;
  qword_1ED805A38 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED805A40 = 0;
  qword_1ED8059B0 = (uint64_t)&unk_1E819E898;
  qword_1ED805A48 = (uint64_t)&off_1E819E9A0;
  qword_1ED805A50 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED805A68 = (uint64_t)&qword_1ED805A50;
  llvm::cl::Option::setArgStr(v6, "enable-cse-in-irtranslator", 0x1AuLL);
  xmmword_1ED8059D0 = *a1;
  word_1ED8059BA = word_1ED8059BA & 0xFFF8 | *a2 & 7;
  v7 = *a3;
  byte_1ED805A30 = **a3;
  byte_1ED805A41 = 1;
  byte_1ED805A40 = *v7;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED8059B0);
}

uint64_t sub_1C6270B40(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  v7 = (unsigned __int8 *)*((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = a1 + 56;
  if (v7)
    llvm::MetadataTracking::track(v8, v7, 2);
  v9 = *((_DWORD *)a2 + 16);
  v10 = (unsigned __int8 *)*((_QWORD *)a2 + 9);
  *(_QWORD *)(a1 + 72) = v10;
  *(_DWORD *)(a1 + 64) = v9;
  if (v10)
    llvm::MetadataTracking::track(a1 + 72, v10, 2);
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  return a1;
}

uint64_t sub_1C6270BB8(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  v7 = (_QWORD *)a2 + 7;
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  v8 = (unsigned __int8 *)*((_QWORD *)a2 + 7);
  if (v8)
  {
    llvm::MetadataTracking::retrack((uint64_t)v7, v8, a1 + 56);
    *v7 = 0;
  }
  v9 = *((_DWORD *)a2 + 16);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_DWORD *)(a1 + 64) = v9;
  v10 = (unsigned __int8 *)*((_QWORD *)a2 + 9);
  if (v10)
  {
    llvm::MetadataTracking::retrack((uint64_t)a2 + 72, v10, a1 + 72);
    *((_QWORD *)a2 + 9) = 0;
  }
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  return a1;
}

void sub_1C6270C54(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;

  v10 = 0;
  v6 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 32, &v10);
  v7 = &v6[32 * *(unsigned int *)(a1 + 8)];
  *(_QWORD *)v7 = *a2;
  *((_QWORD *)v7 + 2) = 0x100000000;
  *((_QWORD *)v7 + 1) = v7 + 24;
  v8 = (uint64_t)(v7 + 8);
  if (*(_DWORD *)(a3 + 8))
    sub_1C49EECC0(v8, (const void **)a3);
  sub_1C550CD6C((uint64_t *)a1, (uint64_t)v6);
  v9 = v10;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v6;
  ++*(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 12) = v9;
}

void sub_1C6270D08(uint64_t a1, llvm::MachineBasicBlock *a2, llvm::MachineBasicBlock *a3, int a4)
{
  sub_1C54FD740(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 944), a2, a3, a4);
}

uint64_t sub_1C6270D18(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = &unk_1E816DF18;
  v2 = (void **)(a1 + 8);
  v4 = (void **)(a1 + 56);
  sub_1C550CF30(&v4);
  v4 = (void **)(a1 + 32);
  sub_1C550CFA0(&v4);
  v4 = v2;
  sub_1C550D010(&v4);
  return a1;
}

void sub_1C6270D88(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED805A78);
  if (v1 != -1)
  {
    v4[0] = sub_1C550E9B0;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED805A78, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C6270DE8(uint64_t a1)
{
  uint64_t result;

  result = sub_1C4776848(a1, (uint64_t)&unk_1EF8F2FD0);
  *(_QWORD *)result = &off_1E816DF40;
  *(_QWORD *)(result + 248) = 0;
  *(_QWORD *)(result + 256) = 0;
  *(_DWORD *)(result + 264) = 2;
  return result;
}

void *sub_1C6270E1C(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage *v4;

  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::TargetPassConfig::ID);
  llvm::AnalysisUsage::addRequiredID(this, byte_1EF8F7110);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)byte_1EF8F7110);
  if (*((_DWORD *)a1 + 66))
  {
    llvm::AnalysisUsage::addRequiredID(this, llvm::ProfileSummaryInfoWrapperPass::ID);
    llvm::LazyBlockFrequencyInfoPass::getLazyBFIAnalysisUsage(this, v4);
  }
  sub_1C6277A80((uint64_t)this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

void sub_1C6270EAC(llvm::Pass *a1)
{
  sub_1C4926674(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6270ED0()
{
  uint64_t v0;
  uint64_t result;

  v0 = operator new();
  result = sub_1C4776848(v0, (uint64_t)&unk_1EF8F2FD0);
  *(_QWORD *)result = &off_1E816DF40;
  *(_QWORD *)(result + 248) = 0;
  *(_QWORD *)(result + 256) = 0;
  *(_DWORD *)(result + 264) = 2;
  return result;
}

double sub_1C6270F1C(_QWORD *a1, unsigned int a2)
{
  _QWORD *v2;
  double result;

  v2 = sub_1C6270F90(a1, a2);
  v2[3] = v2 + 5;
  *(_QWORD *)&result = 0x400000000;
  v2[4] = 0x400000000;
  v2[9] = 0;
  v2[10] = 0;
  *((_DWORD *)v2 + 22) = 0;
  return result;
}

double sub_1C6270F50(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1E816E000;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

_QWORD *sub_1C6270F90(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v3 = 9 * a2;
    v4 = 144 * a2;
    v5 = (char *)operator new(144 * a2);
    *a1 = v5;
    v6 = &v5[16 * v3];
    a1[2] = v6;
    v7 = v5 + 16;
    do
    {
      *((_QWORD *)v7 - 2) = v7;
      *((_QWORD *)v7 - 1) = 0x400000000;
      v7 += 144;
      v4 -= 144;
    }
    while (v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_1C6271004(unsigned int a1@<W0>, unsigned int a2@<W1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  BOOL v8;
  _QWORD *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  _BYTE v13[64];
  void *v14;
  uint64_t v15;
  _QWORD v16[9];

  v16[8] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x400000000;
  sub_1C627131C((unsigned int *)&v14, a3, &a3[16 * a4]);
  v10 = __PAIR64__(a2, a1);
  v11 = v13;
  v12 = 0x400000000;
  if ((_DWORD)v15)
  {
    sub_1C55109BC((uint64_t)&v11, (uint64_t)&v14);
    v8 = (_DWORD)v12 == 0;
  }
  else
  {
    v8 = 1;
  }
  v9 = operator new(0x60uLL);
  *v9 = &off_1E816E0A8;
  v9[1] = v10;
  v9[2] = v9 + 4;
  v9[3] = 0x400000000;
  if (!v8)
    sub_1C5510CA4((uint64_t)(v9 + 2), (uint64_t)&v11);
  *(_QWORD *)(a5 + 24) = v9;
  if (v11 != v13)
    free(v11);
  if (v14 != v16)
    free(v14);
}

void sub_1C6271148(int a1@<W0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v6;
  _DWORD *v7;
  void *v8;
  uint64_t v9;
  _BYTE v10[32];
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x400000000;
  sub_1C618A450((unsigned int *)&v11, a2, &a2[8 * a3]);
  v8 = v10;
  v9 = 0x400000000;
  if ((_DWORD)v12)
  {
    sub_1C5510508((uint64_t)&v8, (uint64_t)&v11);
    v6 = (_DWORD)v9 == 0;
  }
  else
  {
    v6 = 1;
  }
  v7 = operator new(0x40uLL);
  *(_QWORD *)v7 = &off_1E816E0F0;
  v7[2] = a1;
  *((_QWORD *)v7 + 2) = v7 + 8;
  *((_QWORD *)v7 + 3) = 0x400000000;
  if (!v6)
    sub_1C5510874((uint64_t)(v7 + 4), (const void **)&v8);
  *(_QWORD *)(a4 + 24) = v7;
  if (v8 != v10)
    free(v8);
  if (v11 != v13)
    free(v11);
}

uint64_t sub_1C6271284@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E816E138;
  *(_DWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 24) = a2;
  return result;
}

uint64_t sub_1C627129C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E816E180;
  *(_DWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 24) = a2;
  return result;
}

uint64_t sub_1C62712B4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = &off_1E816E2E8;
  a3[1] = result | (unint64_t)(a2 << 32);
  a3[3] = a3;
  return result;
}

uint64_t sub_1C62712D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = &off_1E816E330;
  a3[1] = result | (unint64_t)(a2 << 32);
  a3[3] = a3;
  return result;
}

uint64_t sub_1C62712EC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E816E378;
  *(_DWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 24) = a2;
  return result;
}

uint64_t sub_1C6271304@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E816E498;
  *(_DWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 24) = a2;
  return result;
}

unsigned int *sub_1C627131C(unsigned int *result, _BYTE *a2, _BYTE *a3)
{
  unsigned int *v3;
  size_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = result;
  v4 = a3 - a2;
  v5 = result[2];
  v6 = v5 + ((a3 - a2) >> 4);
  if (v6 > result[3])
  {
    v7 = a3;
    v8 = a2;
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6, 16);
    a3 = v7;
    a2 = v8;
    LODWORD(v5) = v3[2];
  }
  if (a2 != a3)
  {
    result = (unsigned int *)memcpy((void *)(*(_QWORD *)v3 + 16 * v5), a2, v4);
    LODWORD(v5) = v3[2];
  }
  v3[2] = v5 + (v4 >> 4);
  return result;
}

uint64_t sub_1C62713A4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = &off_1E816E570;
  a3[1] = result;
  a3[2] = a2;
  a3[3] = a3;
  return result;
}

uint64_t sub_1C62713BC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = &off_1E816E5B8;
  a3[1] = result | (unint64_t)(a2 << 32);
  a3[3] = a3;
  return result;
}

uint64_t sub_1C62713D8@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  *a3 = &off_1E816E600;
  a3[1] = a2 | (unint64_t)(result << 32);
  a3[3] = a3;
  return result;
}

uint64_t sub_1C62713F4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E816E768;
  *(_DWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 24) = a2;
  return result;
}

void sub_1C627140C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED805B58);
  if (v1 != -1)
  {
    v4[0] = sub_1C55123CC;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED805B58, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

_QWORD *sub_1C627146C(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1EF8F2FD8);
  *result = &off_1E816E7B0;
  return result;
}

void *sub_1C6271494(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::TargetPassConfig::ID);
  llvm::AnalysisUsage::addRequiredID(this, byte_1EF8F7108);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)byte_1EF8F7108);
  sub_1C6277A80((uint64_t)this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

void sub_1C6271504(llvm::Pass *a1)
{
  sub_1C4926674(a1);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6271528()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F2FD8);
  *result = &off_1E816E7B0;
  return result;
}

void sub_1C6271568(__int128 *a1, _WORD *a2, char **a3)
{
  uint64_t v6;
  char *v7;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED805B60, 0, 0);
  byte_1ED805BE0 = 0;
  qword_1ED805BE8 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED805BF0 = 0;
  qword_1ED805B60 = (uint64_t)&unk_1E819E898;
  qword_1ED805BF8 = (uint64_t)&off_1E819E9A0;
  qword_1ED805C00 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED805C18 = (uint64_t)&qword_1ED805C00;
  llvm::cl::Option::setArgStr(v6, "enable-cse-in-legalizer", 0x17uLL);
  xmmword_1ED805B80 = *a1;
  word_1ED805B6A = word_1ED805B6A & 0xFFF8 | *a2 & 7;
  v7 = *a3;
  byte_1ED805BE0 = **a3;
  byte_1ED805BF1 = 1;
  byte_1ED805BF0 = *v7;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED805B60);
}

void sub_1C6271640(__int128 *a1, _WORD *a2, char **a3)
{
  uint64_t v6;
  char *v7;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED805C20, 0, 0);
  byte_1ED805CA0 = 0;
  qword_1ED805CA8 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED805CB0 = 0;
  qword_1ED805C20 = (uint64_t)&unk_1E819E898;
  qword_1ED805CB8 = (uint64_t)&off_1E819E9A0;
  qword_1ED805CC0 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED805CD8 = (uint64_t)&qword_1ED805CC0;
  llvm::cl::Option::setArgStr(v6, "allow-ginsert-as-artifact", 0x19uLL);
  xmmword_1ED805C40 = *a1;
  word_1ED805C2A = word_1ED805C2A & 0xFFF8 | *a2 & 7;
  v7 = *a3;
  byte_1ED805CA0 = **a3;
  byte_1ED805CB1 = 1;
  byte_1ED805CB0 = *v7;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED805C20);
}

uint64_t sub_1C6271718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  char v31;
  _QWORD v32[2];
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  int v37;
  void *v38;
  uint64_t v39;
  _DWORD v40[1218];
  __int128 v41;
  char v42;
  char v43;
  int v44;
  char v45;
  int v46;
  uint64_t v47;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v21 = v7;
  v22 = v8;
  v10 = v9;
  v12 = v11;
  v13 = v4;
  v47 = *MEMORY[0x1E0C80C00];
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 16) + 136))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 16));
  v29[1] = 0x400000000;
  v31 = 0;
  v32[0] = &v33;
  v32[1] = 0x400000000;
  v34[0] = &v35;
  v34[1] = 0x200000000;
  v36 = 0;
  v38 = v40;
  v39 = 0x2000000000;
  v40[1216] = 0;
  v43 = 0;
  v41 = 0u;
  v42 = 0;
  v44 = 0;
  v45 = 1;
  v46 = 0;
  v23 = v6;
  v24 = 9;
  v25 = 0;
  v26 = v21;
  v27 = 0;
  v28 = *v12;
  v29[0] = &v30;
  sub_1C4862300((uint64_t)v29, (uint64_t)(v12 + 1));
  v31 = *((_BYTE *)v12 + 72);
  sub_1C48623F0((uint64_t)v32, (uint64_t)(v12 + 10));
  sub_1C48623F0((uint64_t)v34, (uint64_t)(v12 + 14));
  v36 = v12[17];
  v37 = *((_DWORD *)v12 + 36);
  sub_1C553C2D8(v10, v10 + 152 * v22, (uint64_t)&v38);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v14 + 72))(v14, v13, &v23);
  v16 = v38;
  if ((_DWORD)v39)
  {
    v17 = 152 * v39;
    v18 = (char *)v38 - 152;
    do
    {
      sub_1C54F52E4(&v18[v17]);
      v17 -= 152;
    }
    while (v17);
    v16 = v38;
  }
  if (v16 != v40)
    free(v16);
  if (v15)
    v19 = 1;
  else
    v19 = 2;
  sub_1C54F52E4(&v28);
  return v19;
}

uint64_t sub_1C6271944(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int GenericVirtualRegister;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD v12[6];
  _DWORD v13[4];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], a3, "", 0);
  v8 = *(_QWORD *)(*a1 + 48);
  if (!v8 || (*(_BYTE *)v8 & 4) == 0)
  {
    while ((*(_WORD *)(v8 + 44) & 8) != 0)
      v8 = *(_QWORD *)(v8 + 8);
  }
  *(_QWORD *)(*a1 + 48) = *(_QWORD *)(v8 + 8);
  v9 = *a1;
  v13[0] = *(_DWORD *)(a2 + 4);
  v13[2] = 1;
  v10 = GenericVirtualRegister;
  v12[0] = GenericVirtualRegister;
  v12[4] = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, a4, v13, 1, v12, 1, 0);
  return llvm::MachineOperand::setReg(a2, v10);
}

unsigned int *sub_1C6271A40(unsigned int *result, uint64_t a2, int *__src, int *a4)
{
  int *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned int v15;
  int v16;

  v5 = __src;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = result[2];
  if (*(_QWORD *)result + 4 * v8 == a2)
    return sub_1C4860A74(result, __src, a4);
  v9 = (a2 - v7) >> 2;
  v10 = (char *)a4 - (char *)__src;
  v11 = a4 - __src;
  if (v8 + v11 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8 + v11, 4);
    v7 = *(_QWORD *)v6;
    v8 = v6[2];
  }
  v12 = (_DWORD *)(v7 + 4 * v9);
  v13 = (_BYTE *)(v7 + 4 * v8);
  v14 = (v13 - (_BYTE *)v12) >> 2;
  if (v14 >= v11)
  {
    result = sub_1C617D750(v6, &v13[-4 * v11], (char *)(v7 + 4 * v8));
    if (&v13[-4 * v11] != (_BYTE *)v12)
      result = (unsigned int *)memmove(&v12[v11], v12, &v13[-4 * v11] - (_BYTE *)v12);
    if (v5 != a4)
      return (unsigned int *)memmove(v12, v5, (char *)a4 - (char *)v5);
  }
  else
  {
    v15 = v8 + (v10 >> 2);
    v6[2] = v15;
    if (v9 != v8)
    {
      result = (unsigned int *)memcpy((void *)(v7 + 4 * v15 - 4 * v14), v12, v13 - (_BYTE *)v12);
      do
      {
        v16 = *v5++;
        *v12++ = v16;
        --v14;
      }
      while (v14);
    }
    if (v5 != a4)
      return (unsigned int *)memcpy(v13, v5, (char *)a4 - (char *)v5);
  }
  return result;
}

uint64_t sub_1C6271BCC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  unsigned int GenericVirtualRegister;
  uint64_t *v8;
  int v10[6];
  unint64_t v11;
  int v12;

  v5 = *(_QWORD *)(*a1 + 48);
  if (!v5 || (*(_BYTE *)v5 & 4) == 0)
  {
    while ((*(_WORD *)(v5 + 44) & 8) != 0)
      v5 = *(_QWORD *)(v5 + 8);
  }
  *(_QWORD *)(*a1 + 48) = *(_QWORD *)(v5 + 8);
  v6 = *(_DWORD *)(a2 + 4);
  GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], a3, "", 0);
  llvm::MachineOperand::setReg(a2, GenericVirtualRegister);
  v8 = (uint64_t *)*a1;
  LODWORD(v11) = v6;
  v12 = 1;
  v10[0] = GenericVirtualRegister;
  v10[4] = 0;
  return sub_1C5544EB0(v8, &v11, v10);
}

void sub_1C6271C7C(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6[6];
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  v4 = a2 + 32 * a4;
  v9 = v11;
  v10 = 0x800000000;
  v7 = a3;
  v8 = 0;
  v6[0] = *(_DWORD *)(v4 + 4);
  v6[4] = 0;
  sub_1C55448CC(a1, &v7, v6);
  llvm::MachineOperand::setReg(v4, *(_DWORD *)(*(_QWORD *)(v5 + 32) + 4));
  if (v9 != v11)
    free(v9);
}

uint64_t sub_1C6271D28(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned int GenericVirtualRegister;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD v10[6];
  _DWORD v11[4];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], a3, "", 0);
  v6 = *(_QWORD *)(*a1 + 48);
  if (!v6 || (*(_BYTE *)v6 & 4) == 0)
  {
    while ((*(_WORD *)(v6 + 44) & 8) != 0)
      v6 = *(_QWORD *)(v6 + 8);
  }
  *(_QWORD *)(*a1 + 48) = *(_QWORD *)(v6 + 8);
  v7 = *a1;
  v8 = GenericVirtualRegister;
  v11[0] = *(_DWORD *)(a2 + 4);
  v11[2] = 1;
  v10[0] = GenericVirtualRegister;
  v10[4] = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)v7 + 32))(v7, 82, v11, 1, v10, 1, 0);
  return llvm::MachineOperand::setReg(a2, v8);
}

uint64_t sub_1C6271E18(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD v13[6];
  uint64_t v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a3 || (a4 & 0xFFFFFFFFFFFFFFF9) != 0 && (a4 & 4) != 0)
    return 2;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 + 32;
  v11 = *(_QWORD *)a1;
  v14 = a4;
  v15 = 0;
  v13[0] = *(_DWORD *)(v9 + 36);
  v13[4] = 0;
  v4 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 118, &v14, 1, v13, 1, 0);
  llvm::MachineOperand::setReg(v10, *(_DWORD *)(*(_QWORD *)(v12 + 32) + 4));
  sub_1C55367EC((uint64_t *)a1, *(_QWORD *)(a2 + 32), a4, 0, 119);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2);
  return v4;
}

uint64_t sub_1C6271F34(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD v12[4];
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = **(unsigned __int16 **)(a2 + 16) == 63;
  if (**(_WORD **)(a2 + 16) == 63)
    v6 = 59;
  else
    v6 = 60;
  v7 = *(_DWORD **)(a2 + 32);
  v16 = v7[1];
  v17 = 1;
  v12[0] = v7[17];
  v13 = 0;
  v14 = v7[25];
  v15 = 0;
  if (v5)
    v8 = 61;
  else
    v8 = 62;
  (*(void (**)(uint64_t, uint64_t, int *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, v6, &v16, 1, v12, 2, 0);
  v9 = *a1;
  v10 = *(_DWORD **)(a2 + 32);
  v16 = v10[9];
  v17 = 1;
  v12[0] = v10[17];
  v13 = 0;
  v14 = v10[25];
  v15 = 0;
  (*(void (**)(uint64_t, uint64_t, int *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, v8, &v16, 1, v12, 2, 0);
  return llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
}

uint64_t sub_1C6272054(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t *v5;
  _DWORD *v6;
  unsigned int v7;
  int v8;
  int v9;
  unint64_t v10;
  __int16 v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v20;
  unsigned int v21;
  char v22;

  v5 = a2 + 6;
  v4 = a2[6];
  v6 = (_DWORD *)a2[4];
  v7 = v6[1];
  v8 = v6[9];
  v9 = v6[17];
  if ((v4 & 7) != 0)
  {
    v10 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v10 = v4 & 0xFFFFFFFFFFFFFFF8;
    *v5 = v10;
  }
  v11 = *(_WORD *)(v10 + 32);
  sub_1C554BF50(v9, *(_QWORD *)(a1 + 16), 1, &v20);
  v12 = v21;
  v13 = v20;
  if (v21 >= 0x41)
    v14 = v20;
  else
    v14 = (unint64_t *)&v20;
  v15 = *v14;
  if (*v14)
  {
    v16 = *v5;
    if ((*v5 & 7) != 0)
    {
      v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v16 &= 0xFFFFFFFFFFFFFFF8;
      *v5 = v16;
      v17 = v16;
    }
    if ((v16 & 3) != 0)
      v5 = (unint64_t *)((v16 & 0xFFFFFFFFFFFFFFF8) + 8);
    else
      *v5 = v16 & 0xFFFFFFFFFFFFFFF8;
    v18 = sub_1C553BA20(a1, (uint64_t)a2, v7, v8, v15, -1, *(_BYTE *)(v17 + 34), *(_BYTE *)(v5[1] + 34), (v11 & 4) != 0);
  }
  else
  {
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
    v18 = 1;
  }
  if (v12 >= 0x41 && v22 && v13)
    MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
  return v18;
}

llvm::MachineFunction *sub_1C62721B0(uint64_t a1, const char *a2, int a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t ***v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  llvm::DataLayout *v10;
  llvm::MachineFunction *StackObject;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  const char *v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  int v19[6];

  v7 = *(uint64_t ****)(*(_QWORD *)a1 + 8);
  v8 = (*v7)[5];
  v9 = (unsigned __int8 *)v7[7];
  if (a3 == 1)
  {
    v18 = (unsigned __int8 *)v7[7];
    v16 = a2;
    v17 = a4;
    v9 = v18;
    a4 = v17;
    a2 = v16;
  }
  v10 = (llvm::DataLayout *)(v8 + 34);
  StackObject = (llvm::MachineFunction *)llvm::MachineFrameInfo::CreateStackObject(v9, (uint64_t)a2, a4, 0, 0, 0);
  v12 = *((_DWORD *)v8 + 69);
  v13 = ((*(_QWORD *)&v12 & 0xFFFFFFLL) << 19) | (8
                                                * (unsigned __int16)*(_DWORD *)(llvm::DataLayout::getPointerAlignElem(v10, v12)+ 4)) | 2;
  llvm::MachinePointerInfo::getFixedStack(v7, StackObject, 0, (uint64_t)v19);
  *(_OWORD *)a5 = *(_OWORD *)v19;
  *(_QWORD *)(a5 + 13) = *(_QWORD *)((char *)&v19[3] + 1);
  v14 = *(_QWORD **)a1;
  *(_QWORD *)v19 = v13;
  v19[2] = 0;
  return sub_1C5543FA8(v14, v19, (int)StackObject);
}

void sub_1C62722AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  _DWORD v23[12];
  uint64_t v24;
  int v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[48];
  void *v29;
  uint64_t v30;
  _QWORD v31[7];

  v8 = a4;
  v31[6] = *MEMORY[0x1E0C80C00];
  v29 = v31;
  v30 = 0xC00000000;
  if ((a4 & 2) != 0)
    v12 = 0x800000000000000;
  else
    v12 = 0x8000000000000;
  if ((v12 & a4) != 0)
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  if ((a5 & 2) != 0)
    v13 = 0x800000000000000;
  else
    v13 = 0x8000000000000;
  if ((v13 & a5) != 0)
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  sub_1C5534298((uint64_t *)a1, a3, a5, (unsigned __int16)(v8 >> 3) / (unsigned __int16)(a5 >> 3), (uint64_t)&v29);
  if (v30 >= 2)
  {
    do
    {
      v14 = 0;
      v26 = v28;
      v27 = 0xC00000000;
      v15 = 2;
      do
      {
        v16 = *((_DWORD *)v29 + v14);
        v17 = *((_DWORD *)v29 + v15 - 1);
        v18 = *(_QWORD *)a1;
        v24 = a5;
        v25 = 0;
        v23[0] = v16;
        v23[4] = 0;
        v23[6] = v17;
        v23[10] = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, a6, &v24, 1, v23, 2, 0);
        v20 = *(_DWORD *)(*(_QWORD *)(v19 + 32) + 4);
        v21 = v27;
        if (v27 >= (unint64_t)HIDWORD(v27))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, (uint64_t)v28, v27 + 1, 4);
          v21 = v27;
        }
        *((_DWORD *)v26 + v21) = v20;
        LODWORD(v27) = v27 + 1;
        v14 = v15;
        v22 = (unint64_t)v30 - 1 > v15;
        v15 += 2;
      }
      while (v22);
      sub_1C48621E4((uint64_t)&v29, (uint64_t)&v26);
      if (v26 != v28)
        free(v26);
    }
    while (v30 > 1);
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  llvm::MachineOperand::setReg(*(_QWORD *)(a2 + 32) + 32, *(_DWORD *)v29);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2);
  if (v29 != v31)
    free(v29);
}

uint64_t sub_1C6272500(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unsigned int i;
  llvm::MachineBasicBlock *v8;
  uint64_t *v9;
  unint64_t FirstTerminator;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t j;
  unint64_t v15;

  (*(void (**)(uint64_t *))(*a1[1] + 32))(a1[1]);
  v6 = *(_DWORD *)(a2 + 40);
  if (v6 != 1)
  {
    for (i = 1; i != v6; i += 2)
    {
      v8 = *(llvm::MachineBasicBlock **)(*(_QWORD *)(a2 + 32) + 32 * (i + 1) + 16);
      v9 = *a1;
      FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v8);
      v9[5] = (uint64_t)v8;
      v9[6] = FirstTerminator;
      sub_1C6271C7C(*a1, *(_QWORD *)(a2 + 32), a3, i);
    }
  }
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *a1;
  v13 = (_QWORD *)(v11 + 48);
  for (j = *(_QWORD *)(v11 + 56); (_QWORD *)j != v13; j = *(_QWORD *)(j + 8))
  {
    if (**(_WORD **)(j + 16) && **(_WORD **)(j + 16) != 69)
    {
      v13 = (_QWORD *)j;
      break;
    }
  }
  v15 = *v13 & 0xFFFFFFFFFFFFFFF8;
  if (!v15 || (*(_BYTE *)v15 & 4) == 0)
  {
    while ((*(_WORD *)(v15 + 44) & 4) != 0)
      v15 = *(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8;
  }
  v12[5] = v11;
  v12[6] = v15;
  sub_1C6271BCC((uint64_t *)a1, *(_QWORD *)(a2 + 32), a3);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1[1] + 40))(a1[1], a2);
}

uint64_t sub_1C6272620(uint64_t *a1, llvm::MachineInstr *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a2 + 4);
  v97 = *(_DWORD *)(v3 + 4);
  v4 = *(_DWORD *)(v3 + 36);
  v5 = *a1;
  v106 = 257;
  LODWORD(v107) = 0;
  v6 = sub_1C5544694(v5, (unint64_t *)&v106, 0);
  v95 = v7;
  v96 = v6;
  v8 = v7;
  v9 = *a1;
  v106 = 513;
  LODWORD(v107) = 0;
  v10 = sub_1C5544694(v9, (unint64_t *)&v106, 0);
  v90 = v11;
  v92 = v10;
  v12 = *a1;
  v101 = 257;
  LODWORD(v102) = 0;
  LODWORD(v106) = v4;
  v108 = 0;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 210, &v101, 1, &v106, 1, 0);
  v15 = v14;
  v16 = *a1;
  v106 = 257;
  LODWORD(v107) = 0;
  v17 = sub_1C5544694(v16, (unint64_t *)&v106, 190);
  v18 = *a1;
  v101 = 257;
  LODWORD(v102) = 0;
  v106 = v17;
  v107 = v19;
  v108 = 1;
  v109 = v13;
  v110 = v15;
  v111 = 1;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 46, &v101, 1, &v106, 2, 0);
  v22 = v21;
  v23 = *a1;
  v101 = 9;
  LODWORD(v102) = 0;
  LODWORD(v106) = 33;
  v108 = 2;
  LODWORD(v109) = v4;
  v111 = 0;
  v112 = v92;
  v113 = v90;
  v114 = 1;
  v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 134, &v101, 1, &v106, 3, 0);
  v25 = *a1;
  v101 = 257;
  LODWORD(v102) = 0;
  v106 = v24;
  v107 = v26;
  v108 = 1;
  v109 = v20;
  v110 = v22;
  v111 = 1;
  v112 = v6;
  v113 = v8;
  v114 = 1;
  v93 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 136, &v101, 1, &v106, 3, 0);
  v28 = v27;
  v29 = *a1;
  v106 = 513;
  LODWORD(v107) = 0;
  v30 = sub_1C5544694(v29, (unint64_t *)&v106, 0x7FFFFFFFFFFFFFFFLL);
  v32 = v31;
  v33 = *a1;
  v101 = 513;
  LODWORD(v102) = 0;
  LODWORD(v106) = v4;
  v108 = 0;
  v109 = v13;
  v110 = v15;
  v111 = 1;
  v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 127, &v101, 1, &v106, 2, 0);
  v35 = *a1;
  v101 = 513;
  LODWORD(v102) = 0;
  v106 = v34;
  v107 = v36;
  v108 = 1;
  v109 = v30;
  v110 = v32;
  v111 = 1;
  v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 65, &v101, 1, &v106, 2, 0);
  v39 = v38;
  v40 = *a1;
  v106 = 513;
  LODWORD(v107) = 0;
  v41 = sub_1C5544694(v40, (unint64_t *)&v106, 0xFFFFFFFFFFLL);
  v42 = *a1;
  v101 = 513;
  LODWORD(v102) = 0;
  v106 = v37;
  v107 = v39;
  v108 = 1;
  v109 = v41;
  v110 = v43;
  v111 = 1;
  v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 65, &v101, 1, &v106, 2, 0);
  v91 = v45;
  v46 = *a1;
  v104 = 513;
  v105 = 0;
  v47 = sub_1C5544694(v46, &v104, 40);
  v101 = 513;
  LODWORD(v102) = 0;
  v106 = v37;
  v107 = v39;
  v108 = 1;
  v109 = v47;
  v110 = v48;
  v111 = 1;
  v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 128, &v101, 1, &v106, 2, 0);
  v51 = v50;
  v52 = *a1;
  v104 = 257;
  v105 = 0;
  v53 = sub_1C5544694(v52, &v104, 23);
  v101 = 257;
  LODWORD(v102) = 0;
  v106 = v93;
  v107 = v28;
  v108 = 1;
  v109 = v53;
  v110 = v54;
  v111 = 1;
  v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v52 + 32))(v52, 127, &v101, 1, &v106, 2, 0);
  v57 = v56;
  v58 = *a1;
  v99 = 257;
  v100 = 0;
  v101 = v49;
  v102 = v51;
  v103 = 1;
  v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, 119, &v99, 1, &v101, 1, 0);
  v104 = 257;
  v105 = 0;
  v106 = v55;
  v107 = v57;
  v108 = 1;
  v109 = v59;
  v110 = v60;
  v111 = 1;
  v61 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, 66, &v104, 1, &v106, 2, 0);
  v63 = v62;
  v64 = *a1;
  v106 = 513;
  LODWORD(v107) = 0;
  v65 = sub_1C5544694(v64, (unint64_t *)&v106, 0x8000000000);
  v67 = v66;
  v68 = *a1;
  v101 = 9;
  LODWORD(v102) = 0;
  LODWORD(v106) = 34;
  v108 = 2;
  v109 = v44;
  v110 = v91;
  v111 = 1;
  v112 = v65;
  v113 = v66;
  v114 = 1;
  v94 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 134, &v101, 1, &v106, 3, 0);
  v89 = v69;
  v70 = *a1;
  v101 = 9;
  LODWORD(v102) = 0;
  LODWORD(v106) = 32;
  v108 = 2;
  v109 = v44;
  v110 = v91;
  v111 = 1;
  v112 = v65;
  v113 = v67;
  v114 = 1;
  v71 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 134, &v101, 1, &v106, 3, 0);
  v73 = v72;
  v74 = *a1;
  v106 = 257;
  LODWORD(v107) = 0;
  v75 = sub_1C5544694(v74, (unint64_t *)&v106, 1);
  v77 = v76;
  v78 = *a1;
  v101 = 257;
  LODWORD(v102) = 0;
  v106 = v61;
  v107 = v63;
  v108 = 1;
  v109 = v75;
  v110 = v76;
  v111 = 1;
  v79 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v78 + 32))(v78, 65, &v101, 1, &v106, 2, 0);
  v80 = *a1;
  v101 = 257;
  LODWORD(v102) = 0;
  v106 = v71;
  v107 = v73;
  v108 = 1;
  v109 = v79;
  v110 = v81;
  v111 = 1;
  v112 = v96;
  v113 = v95;
  v114 = 1;
  v82 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 136, &v101, 1, &v106, 3, 0);
  v83 = *a1;
  v101 = 257;
  LODWORD(v102) = 0;
  v106 = v94;
  v107 = v89;
  v108 = 1;
  v109 = v75;
  v110 = v77;
  v111 = 1;
  v112 = v82;
  v113 = v84;
  v114 = 1;
  v85 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, 136, &v101, 1, &v106, 3, 0);
  v86 = *a1;
  LODWORD(v101) = v97;
  LODWORD(v102) = 1;
  v106 = v61;
  v107 = v63;
  v108 = 1;
  v109 = v85;
  v110 = v87;
  v111 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v86 + 32))(v86, 45, &v101, 1, &v106, 2, 0);
  return llvm::MachineInstr::eraseFromParent(a2);
}

_QWORD *sub_1C6272CF0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= a3)
  {
    sub_1C4912E54((_QWORD *)a1, 0, a3);
    a3 = *(_DWORD *)(a1 + 8);
  }
  return sub_1C4912E54((_QWORD *)a1, a2, a3);
}

uint64_t sub_1C6272D30(_QWORD *a1)
{
  if (*a1 == a1[2])
    return 0;
  else
    return *a1;
}

uint64_t sub_1C6272D44(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 24))
    return 0;
  else
    return *(_QWORD *)(a1 + 8);
}

void sub_1C6272D58(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  unint64_t v14;

  v14 = 0;
  v6 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 24, &v14);
  v7 = v6;
  v8 = a2;
  do
  {
    *v7 = v7 + 2;
    v7[1] = 0x200000000;
    if (*(_DWORD *)(a3 + 8))
      sub_1C48623F0((uint64_t)v7, a3);
    v7 += 3;
    --v8;
  }
  while (v8);
  v9 = *(char **)a1;
  v10 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      v12 = *(char **)&v9[v11 - 24];
      if (&v9[v11 - 8] != v12)
        free(v12);
      v11 -= 24;
    }
    while (v11);
    v9 = *(char **)a1;
  }
  v13 = v14;
  if (v9 != (char *)(a1 + 16))
    free(v9);
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = v13;
}

char **sub_1C6272E44(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 24];
      if (&v2[v4 - 8] != v5)
        free(v5);
      v4 -= 24;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

_DWORD *sub_1C6272EB8(_DWORD *result, int a2)
{
  _DWORD *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[2];
  if (v4 >= result[3])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v4 + 1, 4);
    LODWORD(v4) = v3[2];
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v4) = a2;
  ++v3[2];
  return result;
}

void sub_1C6272F14(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  unint64_t v14;

  v14 = 0;
  v6 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 144, &v14);
  v7 = v6;
  v8 = a2;
  do
  {
    *v6 = v6 + 2;
    v6[1] = 0x800000000;
    if (*(_DWORD *)(a3 + 8))
      v6 = (_QWORD *)sub_1C6273000((uint64_t)v6, a3);
    v6 += 18;
    --v8;
  }
  while (v8);
  v9 = *(char **)a1;
  v10 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v10)
  {
    v11 = 144 * v10;
    do
    {
      v12 = *(char **)&v9[v11 - 144];
      if (&v9[v11 - 128] != v12)
        free(v12);
      v11 -= 144;
    }
    while (v11);
    v9 = *(char **)a1;
  }
  v13 = v14;
  if (v9 != (char *)(a1 + 16))
    free(v9);
  *(_QWORD *)a1 = v7;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = v13;
}

uint64_t sub_1C6273000(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 16 * v4 - 4);
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 16 * v5 - 4);
LABEL_6:
        v6 = *(unsigned int *)(a2 + 8);
        if (v5 != v6)
          memcpy((void *)(*(_QWORD *)a1 + 16 * v5), (const void *)(*(_QWORD *)a2 + 16 * v5), *(_QWORD *)a2 + 16 * v6 - (*(_QWORD *)a2 + 16 * v5));
LABEL_10:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 16);
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

char **sub_1C62730D0(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 144 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 144];
      if (&v2[v4 - 128] != v5)
        free(v5);
      v4 -= 144;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_1C6273148(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  unint64_t v14;

  v14 = 0;
  v6 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 48, &v14);
  v7 = v6;
  v8 = a2;
  do
  {
    *v7 = v7 + 2;
    v7[1] = 0x800000000;
    if (*(_DWORD *)(a3 + 8))
      sub_1C48623F0((uint64_t)v7, a3);
    v7 += 6;
    --v8;
  }
  while (v8);
  v9 = *(char **)a1;
  v10 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v10)
  {
    v11 = 48 * v10;
    do
    {
      v12 = *(char **)&v9[v11 - 48];
      if (&v9[v11 - 32] != v12)
        free(v12);
      v11 -= 48;
    }
    while (v11);
    v9 = *(char **)a1;
  }
  v13 = v14;
  if (v9 != (char *)(a1 + 16))
    free(v9);
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = v13;
}

char **sub_1C6273234(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 48 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 48];
      if (&v2[v4 - 32] != v5)
        free(v5);
      v4 -= 48;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_1C62732AC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  int v13;
  unint64_t v14;

  v14 = 0;
  v6 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 208, &v14);
  v7 = v6;
  v8 = a2;
  do
  {
    *v6 = v6 + 2;
    v6[1] = 0x800000000;
    if (*(_DWORD *)(a3 + 8))
      v6 = (_QWORD *)sub_1C6273398((uint64_t)v6, a3);
    v6 += 26;
    --v8;
  }
  while (v8);
  v9 = *(char **)a1;
  v10 = *(_DWORD *)(a1 + 8);
  if (v10)
  {
    v11 = 208 * v10;
    do
    {
      v12 = *(char **)&v9[v11 - 208];
      if (&v9[v11 - 192] != v12)
        free(v12);
      v11 -= 208;
    }
    while (v11);
    v9 = *(char **)a1;
  }
  v13 = v14;
  if (v9 != (char *)(a1 + 16))
    free(v9);
  *(_QWORD *)a1 = v7;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = v13;
}

uint64_t sub_1C6273398(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 24 * v4 - 4);
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 24 * v5 - 4);
LABEL_6:
        v6 = *(unsigned int *)(a2 + 8);
        if (v5 != v6)
          memcpy((void *)(*(_QWORD *)a1 + 24 * v5), (const void *)(*(_QWORD *)a2 + 24 * v5), *(_QWORD *)a2 + 24 * v6 - (*(_QWORD *)a2 + 24 * v5));
LABEL_10:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 24);
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

char **sub_1C6273478(char **a1)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = 208 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 208];
      if (&v2[v4 - 192] != v5)
        free(v5);
      v4 -= 208;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C62734F0(uint64_t a1)
{
  uint64_t i;

  *(_QWORD *)a1 = &off_1E816E938;
  sub_1C4959BE8((char **)(a1 + 35456));
  for (i = 0; i != -35448; i -= 168)
    sub_1C4959EB8((char **)(a1 + 35296 + i));
  return a1;
}

void sub_1C6273554(uint64_t a1)
{
  uint64_t i;

  *(_QWORD *)a1 = &off_1E816E938;
  sub_1C4959BE8((char **)(a1 + 35456));
  for (i = 0; i != -35448; i -= 168)
    sub_1C4959EB8((char **)(a1 + 35296 + i));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62735CC()
{
  return 1;
}

void sub_1C62735D4(__int128 *a1, _WORD *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED805CE0, 0, 0);
  byte_1ED805D60 = 0;
  qword_1ED805D68 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED805D70 = 0;
  qword_1ED805CE0 = (uint64_t)&unk_1E819E898;
  qword_1ED805D78 = (uint64_t)&off_1E819E9A0;
  qword_1ED805D80 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED805D98 = (uint64_t)&qword_1ED805D80;
  llvm::cl::Option::setArgStr(v4, "disable-gisel-legality-check", 0x1CuLL);
  xmmword_1ED805D00 = *a1;
  word_1ED805CEA = (32 * (*a2 & 3)) | word_1ED805CEA & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED805CE0);
}

int *sub_1C6273694@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C6273AD4(a2, a1);
}

void sub_1C62736A0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1C553DFFC(a2, a1, 2, 1);
}

void sub_1C62736B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1C553DFFC(a2, a1, 2, 9);
}

void sub_1C62736C8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1C553DFFC(a2, a1, 9, 9);
}

_QWORD *sub_1C62736DC(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void (**v6)(_QWORD *);
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v8 = v7;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v7);
    }
    else
    {
      v8 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_1C48C35D8(v7, a1);
  v4 = v8;
  if (v8 == v7)
  {
    v6 = (void (**)(_QWORD *))(v7[0] + 32);
    v4 = v7;
LABEL_8:
    (*v6)(v4);
    return a1;
  }
  if (v8)
  {
    v6 = (void (**)(_QWORD *))(*v8 + 40);
    goto LABEL_8;
  }
  return a1;
}

void sub_1C62737C0(uint64_t a1, int a2, unsigned int a3, unsigned __int16 a4, char **a5)
{
  float *v8;
  _QWORD *v9;
  uint64_t **v10;
  unsigned __int16 v11;
  void *__p;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = (float *)(a1 + 40 * (a2 - 45) + 45584);
  if (!sub_1C553E794(v8, a4))
  {
    __p = 0;
    v13 = 0;
    v14 = 0;
    v11 = a4;
    v9 = sub_1C553E858(v8, a4, &v11);
    sub_1C6273E30((uint64_t)(v9 + 3), (uint64_t)&__p, 1);
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
  }
  v10 = sub_1C553E794(v8, a4);
  sub_1C553E454(a3, (uint64_t)(v10 + 3), a5);
}

void sub_1C62738A0(uint64_t a1, int a2, unsigned int a3, unsigned __int16 a4, char **a5)
{
  float *v8;
  _QWORD *v9;
  uint64_t **v10;
  unsigned __int16 v11;
  void *__p;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = (float *)(a1 + 40 * (a2 - 45) + 54024);
  if (!sub_1C553E794(v8, a4))
  {
    __p = 0;
    v13 = 0;
    v14 = 0;
    v11 = a4;
    v9 = sub_1C553E858(v8, a4, &v11);
    sub_1C6273E30((uint64_t)(v9 + 3), (uint64_t)&__p, 1);
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
  }
  v10 = sub_1C553E794(v8, a4);
  sub_1C553E454(a3, (uint64_t)(v10 + 3), a5);
}

uint64_t sub_1C6273980(uint64_t a1, int *a2)
{
  int v3;
  unsigned int v5;
  unsigned int v6;
  unsigned __int16 **v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  const char *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t **v20;
  unsigned int v21;

  v3 = *a2;
  if ((*a2 - 256) <= 0xFFFFFF2C
    || (v5 = v3 - 45, v6 = a2[1], *(_DWORD *)(a1 + 40 * (v3 - 45) + 37152) <= v6))
  {
LABEL_16:
    LOBYTE(v18) = 10;
    return v18;
  }
  v7 = (unsigned __int16 **)(*(_QWORD *)(a1 + 40 * v5 + 37144) + 24 * v6);
  v8 = *((_QWORD *)a2 + 1);
  v9 = (unsigned __int16)(v8 >> 3);
  v10 = (unsigned __int16)(v8 >> 19);
  if ((v8 & 2) == 0)
    v10 = v8 >> 19;
  if ((v8 & 4) != 0)
    v9 = v10;
  if ((v8 & 1) != 0)
    v11 = v8 >> 3;
  else
    v11 = v9;
  sub_1C553E214(v7, v11);
  v14 = v13;
  v15 = *((_QWORD *)a2 + 1);
  v16 = 0x800000000000000;
  if ((v15 & 2) == 0)
    v16 = 0x8000000000000;
  if ((v16 & v15) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v12);
    v15 = *((_QWORD *)a2 + 1);
  }
  v17 = v15 & 0x7FFF8;
  if (!BYTE2(v14))
  {
    v20 = sub_1C553FEEC((_QWORD *)(a1 + 40 * v5 + 54024), v14);
    if (v20)
    {
      sub_1C553E214((unsigned __int16 **)&v20[3][3 * v6], v17 >> 3);
      return BYTE2(v21);
    }
    goto LABEL_16;
  }
  return BYTE2(v14);
}

int *sub_1C6273AD4(uint64_t a1, uint64_t a2)
{
  _WORD *v4;
  _WORD *v5;
  int *result;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  int v12;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *(_WORD **)a2;
  v5 = *(_WORD **)(a2 + 8);
  if (v5 != *(_WORD **)a2 && *v4 == 1)
  {
    result = 0;
  }
  else
  {
    result = sub_1C553EDDC((void **)a1, 589825);
    *(_QWORD *)(a1 + 8) = result;
    v4 = *(_WORD **)a2;
    v5 = *(_WORD **)(a2 + 8);
  }
  if (v5 != v4)
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = (int *)&v4[v7];
      if ((unint64_t)result >= *(_QWORD *)(a1 + 16))
        result = sub_1C553FE14((void **)a1, v9);
      else
        *result++ = *v9;
      *(_QWORD *)(a1 + 8) = result;
      ++v8;
      v4 = *(_WORD **)a2;
      v10 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
      if (v8 == v10 >> 2)
        break;
      v11 = (unsigned __int16)v4[v7];
      if (v11 + 1 != (unsigned __int16)v4[v7 + 2])
        goto LABEL_12;
LABEL_15:
      v7 += 2;
      if (v8 >= v10 >> 2)
        return result;
    }
    v11 = (unsigned __int16)v4[v7];
LABEL_12:
    v12 = (v11 + 1) | 0x10000;
    if ((unint64_t)result < *(_QWORD *)(a1 + 16))
      *result++ = v12;
    else
      result = sub_1C553EDDC((void **)a1, v12);
    *(_QWORD *)(a1 + 8) = result;
    v4 = *(_WORD **)a2;
    v10 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    goto LABEL_15;
  }
  return result;
}

void sub_1C6273BE8(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  int v4;
  int v5;
  unint64_t v6;

  v6 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 24, &v6);
  sub_1C6273C58((uint64_t *)a1, v3);
  v4 = v6;
  if (*(_QWORD *)a1 != a1 + 16)
  {
    v5 = v6;
    free(*(void **)a1);
    v4 = v5;
  }
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C6273C58(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v3 = *a1;
    v4 = *a1 + 24 * v2;
    do
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      *(_OWORD *)a2 = *(_OWORD *)v3;
      a2[2] = *(_QWORD *)(v3 + 16);
      *(_QWORD *)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      v3 += 24;
      a2 += 3;
    }
    while (v3 != v4);
    v5 = *a1;
    v6 = 24 * v2;
    do
    {
      v7 = *(void **)(v5 + v6 - 24);
      if (v7)
      {
        *(_QWORD *)(v5 + v6 - 16) = v7;
        v8 = v6;
        v9 = v5;
        operator delete(v7);
        v6 = v8;
        v5 = v9;
      }
      v6 -= 24;
    }
    while (v6);
  }
}

void sub_1C6273CEC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 == a2)
    return;
  if (v2 > a2)
  {
    v7 = *(_QWORD *)a1 + 32 * v2 - 32;
    v8 = 32 * a2 - 32 * v2;
    while (1)
    {
      v9 = *(_QWORD **)(v7 + 24);
      if ((_QWORD *)v7 == v9)
        break;
      if (v9)
      {
        v10 = 5;
LABEL_15:
        (*(void (**)(void))(*v9 + 8 * v10))();
      }
      v7 -= 32;
      v8 += 32;
      if (!v8)
        goto LABEL_8;
    }
    v9 = (_QWORD *)v7;
    v10 = 4;
    goto LABEL_15;
  }
  if (*(unsigned int *)(a1 + 12) < a2)
  {
    sub_1C6273DC0(a1, a2);
    v2 = *(unsigned int *)(a1 + 8);
  }
  if (v2 != a2)
  {
    v5 = 32 * a2 - 32 * v2;
    v6 = (_QWORD *)(*(_QWORD *)a1 + 32 * v2 + 24);
    do
    {
      *v6 = 0;
      v6 += 4;
      v5 -= 32;
    }
    while (v5);
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = a2;
}

void sub_1C6273DC0(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  int v5;
  unint64_t v6;

  v6 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 32, &v6);
  sub_1C54F55E8(a1, (uint64_t)v3);
  v4 = v6;
  if (*(_QWORD *)a1 != a1 + 16)
  {
    v5 = v6;
    free(*(void **)a1);
    v4 = v5;
  }
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C6273E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD *)a1;
    v5 = 24 * v3;
    do
    {
      v6 = a1;
      v7 = a3;
      v8 = a2;
      v9 = *(void **)(v4 + v5 - 24);
      if (v9)
      {
        *(_QWORD *)(v4 + v5 - 16) = v9;
        operator delete(v9);
      }
      v5 -= 24;
      a2 = v8;
      a3 = v7;
      a1 = v6;
    }
    while (v5);
  }
  *(_DWORD *)(a1 + 8) = 0;
  sub_1C553EC40(a1, a2, a2 + 24 * a3);
}

void sub_1C6273EB4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6273EC8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E816E970;
  result[1] = v3;
  return result;
}

uint64_t sub_1C6273F00(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

void sub_1C6273F0C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED805DA0);
  if (v1 != -1)
  {
    v4[0] = sub_1C553FFA0;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED805DA0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C6273F6C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = (_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1EF8F2FE0);
  *v4 = &off_1E816E9B8;
  v5 = v4 + 31;
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      *(_QWORD *)(a1 + 272) = v5;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 272) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 16))(v6, v5);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 272) = 0;
  }
  *(_QWORD *)(a1 + 320) = &off_1E816EC08;
  *(_DWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 424) = a1 + 456;
  *(_QWORD *)(a1 + 432) = a1 + 456;
  *(_QWORD *)(a1 + 440) = 16;
  *(_DWORD *)(a1 + 448) = 0;
  return a1;
}

uint64_t sub_1C6274034(uint64_t a1)
{
  void (**v2)(void);
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = &off_1E816EA78;
  v5 = v4;
  sub_1C6273F6C(a1, (uint64_t)v4);
  if (v5 == v4)
  {
    v2 = (void (**)(void))(v4[0] + 32);
    goto LABEL_4;
  }
  if (v5)
  {
    v2 = (void (**)(void))(*v5 + 40);
LABEL_4:
    (*v2)();
  }
  return a1;
}

void *sub_1C62740D4(uint64_t a1, uint64_t a2)
{
  char **v4;
  char *v5;

  *(_QWORD *)(a1 + 296) = a2;
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 40);
  v4 = **(char ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::AAResultsWrapperPass::ID);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
  *(_QWORD *)(a1 + 288) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 120))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 312) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 168))(*(_QWORD *)(a2 + 16));
  sub_1C5543728((_QWORD *)(a1 + 320), a2);
  *(_BYTE *)(a1 + 416) = (**(_QWORD **)(a2 + 360) & 0x20) == 0;
  return sub_1C4E4DBF0(a1 + 424);
}

void *sub_1C6274188(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, llvm::AAResultsWrapperPass::ID);
  sub_1C6277A80((uint64_t)this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

void sub_1C62741C8(uint64_t a1, unsigned int a2)
{
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  llvm::DataLayout *v12;
  llvm::Type *IntPtrType;
  llvm *PointerTo;
  const llvm::DataLayout *v15;
  unint64_t LLTForType;
  unint64_t v17;
  const char *v18;
  uint64_t v19;
  BOOL v20;
  _DWORD *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[6];
  void *v34;
  uint64_t v35;
  _QWORD v36[2];
  int v37;
  void *v38[2];
  _BYTE v39[48];
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v30 = a2;
  v4 = *(_DWORD *)(a1 + 408);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 392);
    v6 = v4 - 1;
    v7 = v6 & (37 * a2);
    v8 = *(_DWORD *)(v5 + 80 * v7);
    if (v8 == a2)
      return;
    v9 = 1;
    while (v8 != -1)
    {
      v22 = v7 + v9++;
      v7 = v22 & v6;
      v8 = *(_DWORD *)(v5 + 80 * v7);
      if (v8 == a2)
        return;
    }
  }
  v23 = a1 + 392;
  v38[0] = v39;
  v38[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v38, 4uLL, 0);
  v40 = 256;
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 296) + 16) + 168))(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 16));
  v11 = **(_QWORD **)(a1 + 296);
  v12 = (llvm::DataLayout *)(*(_QWORD *)(v11 + 40) + 272);
  IntPtrType = (llvm::Type *)llvm::DataLayout::getIntPtrType(v12, **(llvm::LLVMContext ***)v11, a2);
  PointerTo = (llvm *)llvm::Type::getPointerTo(IntPtrType, a2);
  LLTForType = llvm::getLLTForType(PointerTo, v12, v15);
  v17 = 2;
  do
  {
    v29 = (8 * v17) | 1;
    v19 = sub_1C4825F50(&v29);
    if ((_DWORD)v18 == 1)
    v34 = v36;
    v36[0] = (8 * v17) | 1;
    v36[1] = v19;
    v37 = 0;
    v35 = 0x200000001;
    v31 = v33;
    v33[0] = v29;
    v33[1] = LLTForType;
    v32 = 0x600000002;
    v24 = 96;
    v25 = v33;
    v26 = 2;
    v27 = v36;
    v28 = 1;
    if (!sub_1C553C644(v10, (uint64_t)&v24))
      *(_QWORD *)((char *)v38[0] + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (v17 & 0x3E);
    if (v31 != v33)
      free(v31);
    if (v34 != v36)
      free(v34);
    v20 = v17 >= 0x41;
    v17 *= 2;
  }
  while (!v20);
  v21 = sub_1C627490C(v23, (int *)&v30);
  sub_1C49DA960((uint64_t)(v21 + 2), (uint64_t)v38);
  v21[18] = v40;
  if (v38[0] != v39)
    free(v38[0]);
}

llvm::APInt *sub_1C6274458(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  llvm::APInt *result;
  unsigned int v5;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return (llvm::APInt *)sub_1C6274B3C(a1, a2);
  result = (llvm::APInt *)(*(_QWORD *)a1 + 16 * v3);
  v5 = *(_DWORD *)(a2 + 8);
  *((_DWORD *)result + 2) = v5;
  if (v5 > 0x40)
    result = (llvm::APInt *)llvm::APInt::initSlowCase(result, (const void **)a2);
  else
    *(_QWORD *)result = *(_QWORD *)a2;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C62744C4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[7];

  v18[6] = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 24);
  if (v3 > 1)
  {
    v16 = v18;
    v17 = 0x600000000;
    v6 = v3 - 1;
    if ((int)(v3 - 1) < 0)
    {
      v4 = 0;
      *(_DWORD *)(a2 + 24) = 0;
      *(_DWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v6);
        v9 = *(unsigned int *)(a2 + 88);
        v10 = *(_QWORD *)(a2 + 80) + 16 * v9;
        v11 = -16 * v9;
        while (v11 && v6 > *(unsigned int *)(v10 - 8))
        {
          v12 = *(_QWORD *)(v10 - 16);
          v10 -= 16;
          v11 += 16;
          if ((sub_1C55404A0(v8, v12, *(_QWORD *)(a1 + 280), *(_QWORD *)(a1 + 304)) & 1) != 0)
            goto LABEL_13;
        }
        v13 = v17;
        if (v17 >= HIDWORD(v17))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, (uint64_t)v18, v17 + 1, 8);
          *((_QWORD *)v16 + v17) = v8;
          v13 = v17;
        }
        else
        {
          *((_QWORD *)v16 + v17) = v8;
        }
        LODWORD(v17) = v13 + 1;
LABEL_13:
        ;
      }
      while ((uint64_t)v6-- > 0);
      v4 = 0;
      v15 = v17;
      *(_DWORD *)(a2 + 24) = 0;
      *(_DWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)a2 = 0;
      if (v15 >= 2)
        v4 = sub_1C55407F4(a1, (unsigned int *)&v16);
    }
    if (v16 != v18)
      free(v16);
  }
  else
  {
    v4 = 0;
    *(_DWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)a2 = 0;
  }
  return v4;
}

uint64_t sub_1C627466C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_1C5541ED0(a1, a2, a3);
  v4 = *(_QWORD *)a1 + 16 * v3;
  *(_QWORD *)v4 = a2;
  *(_DWORD *)(v4 + 8) = a3;
  *(_DWORD *)(a1 + 8) = v3 + 1;
  return a1;
}

uint64_t sub_1C6274698(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v6;
  uint64_t v7;

  if ((**(_BYTE **)(a2 + 360) & 0x10) != 0)
  {
    LOBYTE(v2) = 0;
  }
  else
  {
    sub_1C62740D4(a1, a2);
    v6 = a2 + 320;
    v7 = *(_QWORD *)(a2 + 328);
    if (v7 == v6)
    {
      LOBYTE(v2) = 0;
    }
    else
    {
      v2 = 0;
      do
      {
        v2 |= sub_1C554142C(a1, v7);
        v7 = *(_QWORD *)(v7 + 8);
      }
      while (v7 != v6);
    }
    sub_1C627471C(a1 + 392);
  }
  return v2 & 1;
}

void sub_1C627471C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v7;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 || *(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 16);
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_1C5541F4C(a1);
      return;
    }
    if (!(_DWORD)v3)
    {
LABEL_13:
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
    v4 = 80 * v3;
    v5 = *(_QWORD *)a1 + 24;
    while (1)
    {
      v6 = *(_DWORD *)(v5 - 24);
      if (v6 == -2)
        goto LABEL_11;
      if (v6 != -1)
        break;
LABEL_12:
      v5 += 80;
      v4 -= 80;
      if (!v4)
        goto LABEL_13;
    }
    v7 = *(void **)(v5 - 16);
    if ((void *)v5 != v7)
      free(v7);
LABEL_11:
    *(_DWORD *)(v5 - 24) = -1;
    goto LABEL_12;
  }
}

void sub_1C62747D0(uint64_t a1)
{
  sub_1C5541BD8(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C62747F4()
{
  return "LoadStoreOpt";
}

void sub_1C6274804(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  uint64_t v5;
  _OWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  v4 = v6;
  v5 = 0x600000000;
  sub_1C4765AA4((char *)&v4, 1uLL, 0);
  v2 = 11;
  LODWORD(v7) = 11;
  v3 = v4;
  *(_QWORD *)v4 |= 1uLL;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  if ((_DWORD)v5)
  {
    sub_1C49DA960(a1, (uint64_t)&v4);
    v2 = v7;
    v3 = v4;
  }
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v6)
    free(v3);
}

uint64_t sub_1C62748E4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C6274034(v0);
}

_DWORD *sub_1C627490C(uint64_t a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_1C5541D70(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C627498C(a1, a2, v7);
    *v5 = *a2;
    *((_QWORD *)v5 + 1) = v5 + 6;
    *((_QWORD *)v5 + 2) = 0x600000000;
    v5[18] = 0;
  }
  return v5;
}

_DWORD *sub_1C627498C(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
LABEL_3:
    sub_1C5541E0C(a1, v6);
    v8 = 0;
    sub_1C5541D70(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    a3 = v8;
    goto LABEL_4;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_1C6274A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  void *v11;
  _DWORD *v12;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)a1;
    v8 = 80 * v6;
    do
    {
      *v7 = -1;
      v7 += 20;
      v8 -= 80;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_DWORD *)v4;
      if (*(_DWORD *)v4 <= 0xFFFFFFFD)
      {
        v12 = 0;
        sub_1C5541D70(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v12);
        v10 = v12;
        *v12 = *(_DWORD *)v4;
        *((_QWORD *)v10 + 1) = v10 + 6;
        *((_QWORD *)v10 + 2) = 0x600000000;
        if (*(_DWORD *)(v4 + 16))
          sub_1C476B4F4((uint64_t)(v10 + 2), v4 + 8);
        v10[18] = *(_DWORD *)(v4 + 72);
        ++*(_DWORD *)(a1 + 8);
        v11 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v11)
          free(v11);
      }
      v4 += 80;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1C6274B3C(uint64_t a1, uint64_t a2)
{
  char *v4;
  llvm::APInt *v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unint64_t v10;

  v10 = 0;
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 16, &v10);
  v5 = (llvm::APInt *)&v4[16 * *(unsigned int *)(a1 + 8)];
  v6 = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v5 + 2) = v6;
  if (v6 > 0x40)
    llvm::APInt::initSlowCase(v5, (const void **)a2);
  else
    *(_QWORD *)v5 = *(_QWORD *)a2;
  sub_1C4DF605C(a1, (uint64_t)v4);
  v7 = v10;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  v8 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v7;
  return (uint64_t)&v4[16 * v8 - 16];
}

void sub_1C6274BEC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED805E68);
  if (v1 != -1)
  {
    v4[0] = sub_1C554209C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED805E68, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C6274C4C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = (_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1EF8F2FE8);
  *v4 = &off_1E816EAC0;
  v5 = v4 + 31;
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      *(_QWORD *)(a1 + 272) = v5;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 272) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 16))(v6, v5);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 272) = 0;
  }
  return a1;
}

uint64_t sub_1C6274CCC(uint64_t a1)
{
  _QWORD *v2;
  void (**v3)(_QWORD *);
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E816EB80;
  v6 = v5;
  sub_1C6274C4C(a1, (uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = (void (**)(_QWORD *))(v5[0] + 32);
    v2 = v5;
  }
  else
  {
    if (!v6)
      return a1;
    v3 = (void (**)(_QWORD *))(*v6 + 40);
  }
  (*v3)(v2);
  return a1;
}

void *sub_1C6274D6C(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C6277A80((uint64_t)this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

void sub_1C6274DAC(llvm::Pass *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E816EAC0;
  v2 = (_QWORD *)((char *)a1 + 248);
  v3 = (_QWORD *)*((_QWORD *)a1 + 34);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_1C4926674(a1);
}

void sub_1C6274E08(llvm::Pass *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E816EAC0;
  v2 = (_QWORD *)((char *)a1 + 248);
  v3 = (_QWORD *)*((_QWORD *)a1 + 34);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_4;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_4:
  sub_1C4926674(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6274E78()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C6274CCC(v0);
}

_QWORD *sub_1C6274EA0(uint64_t a1, uint64_t a2)
{
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 160), a2);
}

_QWORD *sub_1C6274EA8(_QWORD *result, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  uint64_t v11;

  v2 = **(unsigned __int16 **)(a2 + 16) - 68;
  v3 = v2 > 0x35;
  v4 = (1 << v2) & 0x30000000000009;
  if (v3 || v4 == 0)
  {
    v7 = result;
    result = sub_1C477672C((uint64_t)(result + 20), a2);
    v8 = v7[21];
    v9 = 176;
    if (v8 == v7[20])
      v9 = 180;
    if (result != (_QWORD *)(v8 + 8 * *(unsigned int *)((char *)v7 + v9)))
    {
      *result = -2;
      ++*((_DWORD *)v7 + 46);
    }
    v11 = *(_QWORD *)(a2 + 56);
    v10 = (unsigned __int8 **)(a2 + 56);
    if (v11)
      return (_QWORD *)sub_1C554355C((uint64_t)(v7 + 11), v10);
  }
  return result;
}

_QWORD *sub_1C6274F50(_QWORD *result, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  uint64_t v11;

  v2 = **(unsigned __int16 **)(a2 + 16) - 68;
  v3 = v2 > 0x35;
  v4 = (1 << v2) & 0x30000000000009;
  if (v3 || v4 == 0)
  {
    v7 = result;
    result = sub_1C477672C((uint64_t)(result + 20), a2);
    v8 = v7[21];
    v9 = 176;
    if (v8 == v7[20])
      v9 = 180;
    if (result != (_QWORD *)(v8 + 8 * *(unsigned int *)((char *)v7 + v9)))
    {
      *result = -2;
      ++*((_DWORD *)v7 + 46);
    }
    v11 = *(_QWORD *)(a2 + 56);
    v10 = (unsigned __int8 **)(a2 + 56);
    if (v11)
      return (_QWORD *)sub_1C554355C((uint64_t)(v7 + 11), v10);
  }
  return result;
}

_QWORD *sub_1C6274FF8(uint64_t a1, uint64_t a2)
{
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 160), a2);
}

void sub_1C6275004(uint64_t a1)
{
  sub_1C55436A8(a1);
  JUMPOUT(0x1CAA32FC0);
}

unsigned __int8 **sub_1C6275028(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 **v7;
  unsigned __int8 **v8;
  unsigned int v9;
  unsigned __int8 **v10;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  v6 = *a1 + 8 * v5;
  if (a2 + 1 != (unsigned __int8 **)v6)
  {
    v7 = a2;
    do
    {
      sub_1C49264C4(v7, v7 + 1);
      v8 = v7 + 2;
      ++v7;
    }
    while (v8 != (unsigned __int8 **)v6);
    LODWORD(v5) = *((_DWORD *)a1 + 2);
    v4 = *a1;
  }
  v9 = v5 - 1;
  *((_DWORD *)a1 + 2) = v9;
  v10 = (unsigned __int8 **)(v4 + 8 * v9);
  if (*v10)
    llvm::MetadataTracking::untrack((uint64_t)v10, *v10);
  return a2;
}

uint64_t *sub_1C62750B8(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  unsigned __int8 *v4;

  v3 = sub_1C485B670(a1, a2);
  v4 = (unsigned __int8 *)a2[4];
  if (v4)
    llvm::MetadataTracking::untrack((uint64_t)(a2 + 4), v4);
  operator delete(a2);
  return v3;
}

uint64_t sub_1C62750F8(uint64_t **a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        return 0;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = (uint64_t)a3;
    if (a3)
      llvm::MetadataTracking::track((uint64_t)(v9 + 4), a3, 2);
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v6 = v9;
    v10 = (uint64_t *)**a1;
    if (v10)
    {
      *a1 = v10;
      v9 = *v6;
    }
    sub_1C4768E74(a1[1], v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return 1;
  }
}

void sub_1C62751D0(uint64_t a1, unint64_t a2)
{
  unsigned __int8 **v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = (unsigned __int8 **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 8, &v5);
  sub_1C627523C(a1, v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

uint64_t sub_1C627523C(uint64_t result, unsigned __int8 **a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(unsigned __int8 ***)result;
    v6 = 8 * v2;
    do
    {
      *a2 = *v5;
      if (*v5)
      {
        result = llvm::MetadataTracking::retrack((uint64_t)v5, *v5, (uint64_t)a2);
        *v5 = 0;
      }
      ++v5;
      ++a2;
      v6 -= 8;
    }
    while (v6);
    v7 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)v4;
      v9 = 8 * v7;
      v10 = v8 - 8;
      do
      {
        result = v10 + v9;
        v11 = *(unsigned __int8 **)(v10 + v9);
        if (v11)
          result = llvm::MetadataTracking::untrack(result, v11);
        v9 -= 8;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t sub_1C62752D0(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  llvm::MachineFunction *v5;
  uint64_t v6;

  v5 = llvm::BuildMI(*(llvm::MachineFunction **)(a1 + 8), (unsigned __int8 **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 624, 1, a2, a3, a4);
  return sub_1C55438A0((_QWORD *)a1, (uint64_t)v5, v6);
}

llvm::MachineFunction *sub_1C627532C(uint64_t a1, uint64_t a2)
{
  llvm::MachineFunction *v4;
  uint64_t v5;
  llvm::MachineInstr *v6;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_1C5169B3C(*(llvm::MachineFunction **)(a1 + 8), (unsigned __int8 **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 816);
  v6 = (llvm::MachineInstr *)v5;
  sub_1C55438A0((_QWORD *)a1, (uint64_t)v4, v5);
  v8 = 14;
  v9 = 0;
  v10 = a2;
  llvm::MachineInstr::addOperand(v6, v4, (const llvm::MachineOperand *)&v8);
  return v4;
}

llvm::MachineFunction *sub_1C62753B0(uint64_t a1, int *a2, int *a3, char a4)
{
  llvm::MachineFunction *v8;
  uint64_t v9;
  llvm::MachineInstr *v10;
  llvm::MachineFunction *v12;
  llvm::MachineInstr *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_1C5169B3C(*(llvm::MachineFunction **)(a1 + 8), (unsigned __int8 **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 10752);
  v10 = (llvm::MachineInstr *)v9;
  sub_1C55438A0((_QWORD *)a1, (uint64_t)v8, v9);
  v12 = v8;
  v13 = v10;
  sub_1C5543E0C(a2, *(_QWORD *)(a1 + 24), &v12);
  sub_1C5543F10(a3, &v12);
  v14 = 1;
  v15 = 0;
  v16 = 1 << a4;
  llvm::MachineInstr::addOperand(v13, v12, (const llvm::MachineOperand *)&v14);
  return v12;
}

llvm::MachineFunction *sub_1C6275464(uint64_t a1, uint64_t a2, int a3)
{
  llvm::MachineFunction *v4;
  llvm::MachineInstr *v5;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v11 = 0;
  v4 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 223, &v10, 1, 0, 0, 0);
  v8 = 0;
  v9 = a3;
  v7 = 8;
  llvm::MachineInstr::addOperand(v5, v4, (const llvm::MachineOperand *)&v7);
  return v4;
}

llvm::MachineFunction *sub_1C6275518(uint64_t a1, int a2)
{
  llvm::MachineFunction *v4;
  uint64_t v5;
  llvm::MachineInstr *v6;
  _DWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = sub_1C5169B3C(*(llvm::MachineFunction **)(a1 + 8), (unsigned __int8 **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 5520);
  v6 = (llvm::MachineInstr *)v5;
  sub_1C55438A0((_QWORD *)a1, (uint64_t)v4, v5);
  v9 = 0;
  v10 = 0;
  v8[0] = 0;
  v8[1] = a2;
  v11 = 0;
  llvm::MachineInstr::addOperand(v6, v4, (const llvm::MachineOperand *)v8);
  return v4;
}

llvm::MachineFunction *sub_1C62755A0(uint64_t a1, int a2, int a3, int a4)
{
  llvm::MachineFunction *v8;
  uint64_t v9;
  llvm::MachineInstr *v10;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_1C5169B3C(*(llvm::MachineFunction **)(a1 + 8), (unsigned __int8 **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 9744);
  v10 = (llvm::MachineInstr *)v9;
  sub_1C55438A0((_QWORD *)a1, (uint64_t)v8, v9);
  v14 = 0;
  v15 = 0;
  v12 = 0;
  v13 = a2;
  v16 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v12);
  v14 = 0;
  LODWORD(v15) = a3;
  v12 = 8;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v12);
  v14 = 0;
  v15 = 0;
  v12 = 0;
  v13 = a4;
  v16 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v12);
  return v8;
}

llvm::MachineFunction *sub_1C6275674(_QWORD *a1, int *a2, int *a3, __int128 *a4, char a5, __int16 a6, _OWORD *a7)
{
  __int16 v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v18;
  uint64_t v19;

  v13 = a6 | 2;
  v14 = sub_1C54F0874(a2, a1[3]);
  v18 = *a4;
  v19 = *((_QWORD *)a4 + 2);
  v15 = sub_1C484358C(a1[1] + 128, 80, 3);
  *(_OWORD *)v15 = v18;
  *(_QWORD *)(v15 + 16) = v19;
  *(_QWORD *)(v15 + 24) = v14;
  *(_WORD *)(v15 + 32) = v13;
  *(_BYTE *)(v15 + 34) = a5;
  v16 = a7[1];
  *(_OWORD *)(v15 + 40) = *a7;
  *(_OWORD *)(v15 + 56) = v16;
  *(_QWORD *)(v15 + 72) = 0;
  *(_WORD *)(v15 + 36) = 1;
  return sub_1C5546848(a1, a2, a3, (llvm::MachineMemOperand *)v15);
}

llvm::MachineFunction *sub_1C627573C(_QWORD *a1, int a2, __int128 *a3, uint64_t a4, int a5)
{
  unsigned __int8 **v9;
  llvm::MachineFunction *v10;
  uint64_t v11;
  llvm::MachineFunction *v12;
  uint64_t v13;
  llvm::MachineInstr *v14;
  uint64_t v15;
  __int128 v16;
  llvm::MachineFunction *v18;
  llvm::MachineInstr *v19;
  __int128 v20;
  int v21;

  v9 = (unsigned __int8 **)(a1 + 4);
  v10 = (llvm::MachineFunction *)a1[1];
  v11 = 5568;
  if (a5)
    v11 = 5616;
  v12 = sub_1C5169B3C(v10, v9, *(_QWORD *)(a1[2] + 8) + v11);
  v14 = (llvm::MachineInstr *)v13;
  sub_1C55438A0(a1, (uint64_t)v12, v13);
  v18 = v12;
  v19 = v14;
  if (a4)
  {
    v15 = 16 * a4;
    do
    {
      v16 = *a3++;
      v20 = v16;
      sub_1C5543E0C((int *)&v20, a1[3], &v18);
      v15 -= 16;
    }
    while (v15);
    v12 = v18;
    v14 = v19;
  }
  LODWORD(v20) = 17;
  *((_QWORD *)&v20 + 1) = 0;
  v21 = a2;
  llvm::MachineInstr::addOperand(v14, v12, (const llvm::MachineOperand *)&v20);
  return v18;
}

llvm::MachineFunction *sub_1C6275810(uint64_t a1, int a2, int a3, int a4, int a5, llvm::MachineMemOperand *a6)
{
  llvm::MachineFunction *v12;
  uint64_t v13;
  llvm::MachineInstr *v14;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v12 = sub_1C5169B3C(*(llvm::MachineFunction **)(a1 + 8), (unsigned __int8 **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 4752);
  v14 = (llvm::MachineInstr *)v13;
  sub_1C55438A0((_QWORD *)a1, (uint64_t)v12, v13);
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v16 = 0x1000000;
  v17 = a2;
  llvm::MachineInstr::addOperand(v14, v12, (const llvm::MachineOperand *)&v16);
  v18 = 0;
  v19 = 0;
  v16 = 0;
  v17 = a3;
  v20 = 0;
  llvm::MachineInstr::addOperand(v14, v12, (const llvm::MachineOperand *)&v16);
  v18 = 0;
  v19 = 0;
  v16 = 0;
  v17 = a4;
  v20 = 0;
  llvm::MachineInstr::addOperand(v14, v12, (const llvm::MachineOperand *)&v16);
  v18 = 0;
  v19 = 0;
  v16 = 0;
  v17 = a5;
  v20 = 0;
  llvm::MachineInstr::addOperand(v14, v12, (const llvm::MachineOperand *)&v16);
  llvm::MachineInstr::addMemOperand(v14, v12, a6);
  return v12;
}

llvm::MachineFunction *sub_1C6275920(uint64_t a1, unsigned int a2, unsigned int a3)
{
  llvm::MachineFunction *v6;
  uint64_t v7;
  llvm::MachineInstr *v8;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_1C5169B3C(*(llvm::MachineFunction **)(a1 + 8), (unsigned __int8 **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 5424);
  v8 = (llvm::MachineInstr *)v7;
  sub_1C55438A0((_QWORD *)a1, (uint64_t)v6, v7);
  v10 = 1;
  v11 = 0;
  v12 = a2;
  llvm::MachineInstr::addOperand(v8, v6, (const llvm::MachineOperand *)&v10);
  v10 = 1;
  v11 = 0;
  v12 = a3;
  llvm::MachineInstr::addOperand(v8, v6, (const llvm::MachineOperand *)&v10);
  return v6;
}

llvm::MachineFunction *sub_1C62759D4(uint64_t a1, int a2, uint64_t a3)
{
  llvm::MachineFunction *v6;
  uint64_t v7;
  llvm::MachineInstr *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_1C5169B3C(*(llvm::MachineFunction **)(a1 + 8), (unsigned __int8 **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 10656);
  v8 = (llvm::MachineInstr *)v7;
  sub_1C55438A0((_QWORD *)a1, (uint64_t)v6, v7);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  LODWORD(v10) = 0x1000000;
  HIDWORD(v10) = a2;
  llvm::MachineInstr::addOperand(v8, v6, (const llvm::MachineOperand *)&v10);
  v11 = 0;
  v12 = a3;
  LODWORD(v13) = 0;
  v10 = 11;
  llvm::MachineInstr::addOperand(v8, v6, (const llvm::MachineOperand *)&v10);
  return v6;
}

_QWORD *sub_1C6275A90(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;

  *a1 = &off_1E816EC08;
  v4 = (unsigned __int8 *)a1[4];
  v2 = (uint64_t)(a1 + 4);
  v3 = v4;
  if (v4)
    llvm::MetadataTracking::untrack(v2, v3);
  return a1;
}

void sub_1C6275AC8(_QWORD *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  *a1 = &off_1E816EC08;
  v3 = (unsigned __int8 *)a1[4];
  v1 = (uint64_t)(a1 + 4);
  v2 = v3;
  if (v3)
    llvm::MetadataTracking::untrack(v1, v2);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6275B14(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED805E70);
  if (v1 != -1)
  {
    v4[0] = sub_1C5548E50;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED805E70, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C6275B74(uint64_t a1)
{
  uint64_t result;

  result = sub_1C4776848(a1, (uint64_t)&unk_1ED805E78);
  *(_QWORD *)result = &off_1E816EC40;
  *(_OWORD *)(result + 248) = 0u;
  *(_OWORD *)(result + 264) = 0u;
  *(_OWORD *)(result + 280) = 0u;
  *(_QWORD *)(result + 296) = &off_1E816EC08;
  *(_OWORD *)(result + 304) = 0u;
  *(_OWORD *)(result + 320) = 0u;
  *(_OWORD *)(result + 336) = 0u;
  *(_OWORD *)(result + 352) = 0u;
  *(_DWORD *)(result + 368) = 0;
  if (word_1ED805E88)
    *(_DWORD *)(result + 368) = dword_1ED805F00;
  return result;
}

uint64_t sub_1C6275BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void **v8;
  void *v9;
  void **v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 184))(*(_QWORD *)(a2 + 16));
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 248) = v4;
  *(_QWORD *)(a1 + 256) = v5;
  *(_QWORD *)(a1 + 264) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  v6 = **(void ****)(a1 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != &llvm::TargetPassConfig::ID);
  *(_QWORD *)(a1 + 376) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), &llvm::TargetPassConfig::ID);
  if (*(_DWORD *)(a1 + 368))
  {
    v8 = **(void ****)(a1 + 8);
    do
    {
      v9 = *v8;
      v8 += 2;
    }
    while (v9 != &llvm::MachineBlockFrequencyInfo::ID);
    *(_QWORD *)(a1 + 272) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::MachineBlockFrequencyInfo::ID);
    v10 = **(void ****)(a1 + 8);
    do
    {
      v11 = *v10;
      v10 += 2;
    }
    while (v11 != &llvm::MachineBranchProbabilityInfo::ID);
    *(_QWORD *)(a1 + 280) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), &llvm::MachineBranchProbabilityInfo::ID);
  }
  else
  {
    *(_QWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 280) = 0;
  }
  sub_1C5543728((_QWORD *)(a1 + 296), a2);
  v12 = (_QWORD *)operator new();
  v13 = *(_QWORD *)(a1 + 272);
  *v12 = a2;
  v12[1] = v13;
  result = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = v12;
  if (result)
    JUMPOUT(0x1CAA32FC0);
  return result;
}

void *sub_1C6275D44(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  if (*((_DWORD *)a1 + 92))
  {
    llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::MachineBlockFrequencyInfo::ID);
    llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::MachineBranchProbabilityInfo::ID);
  }
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::TargetPassConfig::ID);
  sub_1C6277A80((uint64_t)this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C6275DAC(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t result;
  unint64_t v7;

  if (!a1[8])
  {
    a1[8] = 1;
    (**(void (***)(_BYTE *))a1)(a1);
  }
  v4 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1);
  if (!a1[8])
  {
    a1[8] = 1;
    (**(void (***)(_BYTE *))a1)(a1);
  }
  v5 = (uint64_t *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 16))(a1);
  result = llvm::ilist_traits<llvm::MachineInstr>::addNodeToList((uint64_t *)(v4 + 40), a2);
  v7 = *v5 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)a2 = v7 | *(_QWORD *)a2 & 7;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(v7 + 8) = a2;
  *v5 = *v5 & 7 | a2;
  return result;
}

uint64_t sub_1C6275E70(uint64_t a1, unint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[3];
  void *v32;
  uint64_t v33;
  _QWORD v34[30];

  v34[28] = *MEMORY[0x1E0C80C00];
  *((_QWORD *)&v26 + 1) = -1;
  v27 = -1;
  *(_QWORD *)&v26 = -1;
  v32 = v34;
  v33 = 0x400000000;
  v7 = *((unsigned int *)a3 + 2);
  if (!(_DWORD)v7)
    goto LABEL_13;
  v9 = 0;
  v10 = *a3;
  v11 = (uint64_t)&(*a3)[v7];
  do
  {
    v12 = *v10;
    sub_1C55491EC(&v28, (uint64_t *)a1, a2, *v10, (uint64_t)&v32, (unint64_t *)&v26);
    if (sub_1C5549934((unint64_t *)&v28, (unint64_t *)&v26))
    {
      v26 = v28;
      v27 = (uint64_t)v29;
      v13 = *(unsigned int *)(a4 + 8);
      if ((_DWORD)v13)
      {
        v14 = *(_QWORD *)a4 - 40;
        v15 = 56 * v13;
        do
        {
          sub_1C627717C((char **)(v14 + v15));
          v15 -= 56;
        }
        while (v15);
      }
      *(_DWORD *)(a4 + 8) = 0;
      if ((_DWORD)v33)
      {
        v16 = (char *)v32;
        v17 = 56 * v33;
        do
        {
          sub_1C62760A4(a4, (uint64_t)v16);
          v16 += 56;
          v17 -= 56;
        }
        while (v17);
      }
      v9 = v12;
    }
    ++v10;
  }
  while (v10 != (uint64_t *)v11);
  if (!v9)
  {
LABEL_13:
    if (llvm::TargetPassConfig::isGlobalISelAbortEnabled(*(llvm::TargetPassConfig **)(a1 + 376)))
    {
      v9 = 0;
    }
    else
    {
      v9 = **a3;
      *(_QWORD *)&v28 = 3;
      WORD4(v28) = 0;
      v29 = v31;
      v30 = 0x200000000;
      v31[2] = a1;
      sub_1C62760A4(a4, (uint64_t)&v28);
      v22 = v29;
      if ((_DWORD)v30)
      {
        v23 = 8 * v30;
        v24 = (char *)v29 - 8;
        do
        {
          v25 = *(_QWORD *)&v24[v23];
          *(_QWORD *)&v24[v23] = 0;
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
          v23 -= 8;
        }
        while (v23);
        v22 = v29;
      }
      if (v22 != v31)
        free(v22);
    }
  }
  v18 = v32;
  if ((_DWORD)v33)
  {
    v19 = (char *)v32 - 40;
    v20 = 56 * v33;
    do
    {
      sub_1C627717C((char **)&v19[v20]);
      v20 -= 56;
    }
    while (v20);
    v18 = v32;
  }
  if (v18 != v34)
    free(v18);
  return v9;
}

uint64_t sub_1C62760A4(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
    return sub_1C6277504(a1, (uint64_t *)a2);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a1 + 56 * v4;
  v7 = *(_QWORD *)a2;
  *(_WORD *)(v6 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)v6 = v7;
  *(_QWORD *)(v6 + 24) = 0x200000000;
  *(_QWORD *)(v6 + 16) = v6 + 32;
  result = v6 + 16;
  if (*(_DWORD *)(a2 + 24))
    result = sub_1C554A138(result, a2 + 16);
  *(_QWORD *)(v5 + 56 * v4 + 48) = *(_QWORD *)(a2 + 48);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C627614C(uint64_t a1, llvm::MachineInstr *a2, const llvm::RegisterBankInfo::InstructionMapping *a3, uint64_t a4)
{
  const llvm::RegisterBankInfo::OperandsMapper *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  int *v19[2];
  void *v20[2];
  uint64_t v21;
  void *v22;
  _QWORD v23[8];

  v23[7] = *MEMORY[0x1E0C80C00];
  llvm::RegisterBankInfo::OperandsMapper::OperandsMapper((llvm::RegisterBankInfo::OperandsMapper *)v20, a2, a3, *(llvm::MachineRegisterInfo **)(a1 + 256));
  v9 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)a4;
    v11 = 56 * v9;
    while (*(_BYTE *)(v10 + 8) && *(_DWORD *)v10 != 3)
    {
      v12 = *(unsigned int *)(v10 + 4);
      v13 = *((_QWORD *)a2 + 4);
      v14 = (int *)(*((_QWORD *)a3 + 1) + 16 * v12);
      if (*(_DWORD *)v10 == 2)
      {
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 24) + 16 * (*(_DWORD *)(v13 + 32 * v12 + 4) & 0x7FFFFFFF)) = *(_QWORD *)(*(_QWORD *)v14 + 8) | 4;
      }
      else
      {
        v15 = v13 + 32 * v12;
        llvm::RegisterBankInfo::OperandsMapper::createVRegs((llvm::RegisterBankInfo::OperandsMapper *)v20, *(_DWORD *)(v10 + 4));
        v19[0] = (int *)llvm::RegisterBankInfo::OperandsMapper::getVRegs((llvm::RegisterBankInfo::OperandsMapper *)v20, v12);
        v19[1] = v16;
        sub_1C5548EF4((_QWORD *)a1, v15, v14[2], v10, v19);
      }
      v10 += 56;
      v11 -= 56;
      if (!v11)
        goto LABEL_9;
    }
    v17 = 0;
  }
  else
  {
LABEL_9:
    if (*(_DWORD *)v23[6] == -1)
      llvm::RegisterBankInfo::applyDefaultMapping((uint64_t)v20, v8);
    else
      (***(void (****)(_QWORD, void **))(a1 + 248))(*(_QWORD *)(a1 + 248), v20);
    v17 = 1;
  }
  if (v22 != v23)
    free(v22);
  if (v20[0] != &v21)
    free(v20[0]);
  return v17;
}

uint64_t sub_1C62762EC(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  llvm::MachineBasicBlock *v23;
  unsigned int v24;
  uint64_t LastNonDebugInstr;
  uint64_t v26;
  uint64_t v27;
  _QWORD *FirstNonPHI;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = a2;
  *(_DWORD *)a1 = 1;
  *(_DWORD *)(a1 + 4) = a3;
  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)(a1 + 24) = 0x200000000;
  *(_QWORD *)(a1 + 48) = a5;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_DWORD *)(v8 + 32 * a3);
  v10 = *(unsigned __int16 **)(a2 + 16);
  v11 = *v10;
  if (!*v10 || v11 == 69)
    goto LABEL_19;
  v12 = *(_WORD *)(a2 + 44);
  v13 = *((_QWORD *)v10 + 1);
  if ((v12 & 0xC) == 0 || (v12 & 4) != 0)
  {
    if ((v13 & 0x200) == 0)
      goto LABEL_16;
  }
  else if ((v13 & 0x200) == 0)
  {
    v14 = a2;
    while ((*(_WORD *)(v14 + 44) & 8) != 0)
    {
      v14 = *(_QWORD *)(v14 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v14 + 16) + 9) & 2) != 0)
        goto LABEL_11;
    }
LABEL_16:
    v20 = (v9 & 0x1000000) == 0;
    v21 = operator new();
    *(_BYTE *)(v21 + 8) = 0;
    *(_QWORD *)v21 = off_1E816ED00;
    *(_QWORD *)(v21 + 16) = v6;
    *(_BYTE *)(v21 + 24) = v20;
    goto LABEL_17;
  }
LABEL_11:
  if (!v11)
  {
LABEL_19:
    if ((v9 & 0x1000000) == 0)
    {
      v23 = *(llvm::MachineBasicBlock **)(v8 + 32 * (a3 + 1) + 16);
      v24 = *(_DWORD *)(v8 + 32 * a3 + 4);
      LastNonDebugInstr = llvm::MachineBasicBlock::getLastNonDebugInstr(v23, 1);
      v26 = *((_QWORD *)v23 + 7);
      if (v26 == LastNonDebugInstr)
        goto LABEL_21;
      while (1)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(LastNonDebugInstr + 16) + 8);
        if ((*(_WORD *)(LastNonDebugInstr + 44) & 0xC) != 0 && (*(_WORD *)(LastNonDebugInstr + 44) & 4) == 0)
        {
          v32 = LastNonDebugInstr;
          if ((v30 & 0x200) == 0)
          {
            while ((*(_WORD *)(v32 + 44) & 8) != 0)
            {
              v32 = *(_QWORD *)(v32 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v32 + 16) + 9) & 2) != 0)
                goto LABEL_35;
            }
LABEL_21:
            v27 = operator new();
            v21 = v27;
            *(_BYTE *)(v27 + 8) = 0;
            if ((llvm::MachineBasicBlock *)LastNonDebugInstr == (llvm::MachineBasicBlock *)((char *)v23 + 48))
            {
              *(_QWORD *)v27 = off_1E816ED50;
              *(_QWORD *)(v27 + 16) = v23;
            }
            else
            {
              *(_QWORD *)v27 = off_1E816ED00;
              *(_QWORD *)(v27 + 16) = LastNonDebugInstr;
            }
            *(_BYTE *)(v27 + 24) = 0;
            goto LABEL_17;
          }
        }
        else if ((v30 & 0x200) == 0)
        {
          goto LABEL_21;
        }
LABEL_35:
        if (llvm::MachineInstr::findRegisterDefOperandIdx(LastNonDebugInstr, v24, 0, 1, a4) != -1)
        {
          v38 = *(_QWORD *)(v6 + 24);
          v21 = operator new();
          v39 = *(_QWORD *)(a1 + 48);
          *(_BYTE *)(v21 + 8) = 0;
          *(_QWORD *)v21 = off_1E816EDA0;
          *(_QWORD *)(v21 + 16) = v23;
          *(_QWORD *)(v21 + 24) = v38;
          *(_QWORD *)(v21 + 32) = v39;
          goto LABEL_17;
        }
        LastNonDebugInstr = *(_QWORD *)LastNonDebugInstr & 0xFFFFFFFFFFFFFFF8;
        if (!LastNonDebugInstr || (*(_BYTE *)LastNonDebugInstr & 4) == 0)
        {
          while ((*(_WORD *)(LastNonDebugInstr + 44) & 4) != 0)
            LastNonDebugInstr = *(_QWORD *)LastNonDebugInstr & 0xFFFFFFFFFFFFFFF8;
        }
        if (LastNonDebugInstr == v26)
        {
          LastNonDebugInstr = v26;
          goto LABEL_21;
        }
      }
    }
    FirstNonPHI = (_QWORD *)llvm::MachineBasicBlock::getFirstNonPHI(*(llvm::MachineBasicBlock **)(a2 + 24));
    v29 = FirstNonPHI;
    if ((_QWORD *)(*(_QWORD *)(v6 + 24) + 48) == FirstNonPHI)
    {
      v6 = *FirstNonPHI & 0xFFFFFFFFFFFFFFF8;
      if (!v6 || (*(_BYTE *)v6 & 4) == 0)
      {
        while ((*(_WORD *)(v6 + 44) & 4) != 0)
          v6 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8;
      }
      goto LABEL_29;
    }
    v33 = operator new();
    v21 = v33;
    *(_BYTE *)(v33 + 8) = 0;
    *(_QWORD *)v33 = off_1E816ED00;
    *(_QWORD *)(v33 + 16) = v29;
LABEL_48:
    *(_BYTE *)(v33 + 24) = 1;
    goto LABEL_17;
  }
  v15 = *(_QWORD **)(a2 + 24);
  if ((v9 & 0x1000000) != 0)
  {
    v16 = (uint64_t *)v15[11];
    v17 = (uint64_t *)v15[12];
    while (v16 != v17)
    {
      v18 = *v16++;
      v19 = operator new();
      *(_BYTE *)(v19 + 8) = 0;
      *(_QWORD *)v19 = off_1E816ED50;
      *(_QWORD *)(v19 + 16) = v15;
      *(_BYTE *)(v19 + 24) = v18 != 0;
      sub_1C6276750(a1, v19);
    }
    return a1;
  }
  if (v15 + 6 == (_QWORD *)a2)
  {
LABEL_52:
    v34 = v15[7];
    v33 = operator new();
    v21 = v33;
    *(_BYTE *)(v33 + 8) = 0;
    *(_QWORD *)v33 = off_1E816ED00;
    *(_QWORD *)(v33 + 16) = v34;
    goto LABEL_48;
  }
  while (1)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8);
    if ((*(_WORD *)(v6 + 44) & 0xC) == 0 || (*(_WORD *)(v6 + 44) & 4) != 0)
    {
      if ((v35 & 0x200) == 0)
        goto LABEL_29;
      goto LABEL_58;
    }
    v37 = v6;
    if ((v35 & 0x200) == 0)
      break;
LABEL_58:
    v6 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8;
    if (!v6 || (*(_BYTE *)v6 & 4) == 0)
    {
      while ((*(_WORD *)(v6 + 44) & 4) != 0)
        v6 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((_QWORD *)v6 == v15 + 6)
      goto LABEL_52;
  }
  while ((*(_WORD *)(v37 + 44) & 8) != 0)
  {
    v37 = *(_QWORD *)(v37 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v37 + 16) + 9) & 2) != 0)
      goto LABEL_58;
  }
LABEL_29:
  v21 = operator new();
  *(_BYTE *)(v21 + 8) = 0;
  *(_QWORD *)v21 = off_1E816ED00;
  *(_QWORD *)(v21 + 16) = v6;
  *(_BYTE *)(v21 + 24) = 0;
LABEL_17:
  sub_1C6276750(a1, v21);
  return a1;
}

void sub_1C6276750(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  if (*(_BYTE *)(a1 + 8))
    v5 = v4;
  else
    v5 = 0;
  *(_BYTE *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 9) |= (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v7 = a2;
  v6 = *(unsigned int *)(a1 + 24);
  if (v6 >= *(_DWORD *)(a1 + 28))
  {
    sub_1C62777E0(a1 + 16, &v7);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v6) = a2;
    *(_DWORD *)(a1 + 24) = v6 + 1;
  }
}

uint64_t sub_1C62767E4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t sub_1C62767F0(uint64_t a1, uint64_t a2)
{
  uint64_t AnalysisIfAvailable;
  llvm::MachineBlockFrequencyInfo *v4;

  AnalysisIfAvailable = llvm::AnalysisResolver::getAnalysisIfAvailable(*(llvm::PMDataManager ***)(a2 + 8), &llvm::MachineBlockFrequencyInfo::ID);
  if (AnalysisIfAvailable
    && (v4 = (llvm::MachineBlockFrequencyInfo *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisIfAvailable
                                                                                           + 96))(AnalysisIfAvailable, &llvm::MachineBlockFrequencyInfo::ID)) != 0)
  {
    return llvm::MachineBlockFrequencyInfo::getBlockFreq(v4, *(const llvm::MachineBasicBlock **)(*(_QWORD *)(a1 + 16) + 24));
  }
  else
  {
    return 1;
  }
}

uint64_t sub_1C6276850(uint64_t a1, uint64_t a2)
{
  uint64_t AnalysisIfAvailable;
  llvm::MachineBlockFrequencyInfo *v4;

  AnalysisIfAvailable = llvm::AnalysisResolver::getAnalysisIfAvailable(*(llvm::PMDataManager ***)(a2 + 8), &llvm::MachineBlockFrequencyInfo::ID);
  if (AnalysisIfAvailable
    && (v4 = (llvm::MachineBlockFrequencyInfo *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisIfAvailable
                                                                                           + 96))(AnalysisIfAvailable, &llvm::MachineBlockFrequencyInfo::ID)) != 0)
  {
    return llvm::MachineBlockFrequencyInfo::getBlockFreq(v4, *(const llvm::MachineBasicBlock **)(a1 + 16));
  }
  else
  {
    return 1;
  }
}

uint64_t sub_1C62768AC(uint64_t a1)
{
  uint64_t result;

  result = llvm::MachineBasicBlock::SplitCriticalEdge(*(llvm::MachineBasicBlock **)(a1 + 16), *(const llvm::MachineBasicBlock **)(a1 + 24), *(_QWORD *)(a1 + 32), 0);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

unint64_t sub_1C62768DC(uint64_t a1, uint64_t a2)
{
  uint64_t AnalysisIfAvailable;
  llvm::MachineBlockFrequencyInfo *v5;
  llvm::MachineBlockFrequencyInfo *v6;
  uint64_t v8;
  uint64_t v9;
  llvm::MachineBranchProbabilityInfo *v10;
  int EdgeProbability;
  uint64_t BlockFreq;

  AnalysisIfAvailable = llvm::AnalysisResolver::getAnalysisIfAvailable(*(llvm::PMDataManager ***)(a2 + 8), &llvm::MachineBlockFrequencyInfo::ID);
  if (!AnalysisIfAvailable)
    return 1;
  v5 = (llvm::MachineBlockFrequencyInfo *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisIfAvailable
                                                                                     + 96))(AnalysisIfAvailable, &llvm::MachineBlockFrequencyInfo::ID);
  if (!v5)
    return 1;
  v6 = v5;
  if (*(_BYTE *)(a1 + 8))
    return llvm::MachineBlockFrequencyInfo::getBlockFreq(v5, *(const llvm::MachineBasicBlock **)(a1 + 24));
  v8 = llvm::AnalysisResolver::getAnalysisIfAvailable(*(llvm::PMDataManager ***)(a2 + 8), &llvm::MachineBranchProbabilityInfo::ID);
  if (!v8)
    return 1;
  v9 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v8 + 96))(v8, &llvm::MachineBranchProbabilityInfo::ID);
  if (!v9)
    return 1;
  v10 = (llvm::MachineBranchProbabilityInfo *)v9;
  BlockFreq = llvm::MachineBlockFrequencyInfo::getBlockFreq(v6, *(const llvm::MachineBasicBlock **)(a1 + 16));
  EdgeProbability = llvm::MachineBranchProbabilityInfo::getEdgeProbability(v10, *(const llvm::MachineBasicBlock **)(a1 + 16), *(const llvm::MachineBasicBlock **)(a1 + 24));
  return llvm::BlockFrequency::operator*(&BlockFreq, EdgeProbability);
}

uint64_t sub_1C62769C0(uint64_t a1)
{
  return llvm::MachineBasicBlock::canSplitCriticalEdge(*(llvm::MachineBasicBlock **)(a1 + 16), *(const llvm::MachineBasicBlock **)(a1 + 24));
}

llvm *sub_1C62769CC(llvm *a1)
{
  llvm *v2;
  llvm *v3;
  llvm *result;
  _BYTE *v5;

  v2 = llvm::dbgs(a1);
  v3 = sub_1C6276A28((unint64_t *)a1, v2);
  result = llvm::dbgs(v3);
  v5 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v5 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v5 + 1;
  *v5 = 10;
  return result;
}

llvm::raw_ostream *sub_1C6276A28(unint64_t *a1, llvm::raw_ostream *a2)
{
  char *v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;

  if (*a1 == -2)
  {
    if (a1[1] == -1 && a1[2] == -1)
    {
      v4 = "saturated";
      return sub_1C4816AD8(a2, v4);
    }
LABEL_7:
    v5 = llvm::raw_ostream::operator<<(a2, a1[2]);
    v6 = sub_1C4816AD8(v5, " * ");
    v7 = llvm::raw_ostream::operator<<(v6, *a1);
    v8 = sub_1C4816AD8(v7, " + ");
    return llvm::raw_ostream::operator<<(v8, a1[1]);
  }
  if (*a1 != -1 || a1[1] != -1 || a1[2] != -1)
    goto LABEL_7;
  v4 = "impossible";
  return sub_1C4816AD8(a2, v4);
}

uint64_t sub_1C6276AE4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1C6276AEC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 24))
    return *(_QWORD *)(v1 + 56);
  else
    return v1 + 48;
}

void sub_1C6276B0C()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6276B20()
{
  return 0;
}

uint64_t sub_1C6276B28()
{
  return 1;
}

uint64_t sub_1C6276B30(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_1C6276B38(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 56);
}

void sub_1C6276B48()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6276B60(llvm::Pass *a1)
{
  sub_1C62771EC(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C6276B84()
{
  return "RegBankSelect";
}

void sub_1C6276B94(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  uint64_t v5;
  _OWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  v4 = v6;
  v5 = 0x600000000;
  sub_1C4765AA4((char *)&v4, 1uLL, 0);
  v2 = 11;
  LODWORD(v7) = 11;
  v3 = v4;
  *(_QWORD *)v4 |= 0x21uLL;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  if ((_DWORD)v5)
  {
    sub_1C49DA960(a1, (uint64_t)&v4);
    v2 = v7;
    v3 = v4;
  }
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v6)
    free(v3);
}

void sub_1C6276C78(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  uint64_t v5;
  _OWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  v4 = v6;
  v5 = 0x600000000;
  sub_1C4765AA4((char *)&v4, 1uLL, 0);
  v2 = 11;
  LODWORD(v7) = 11;
  v3 = v4;
  *(_QWORD *)v4 |= 0x40uLL;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  if ((_DWORD)v5)
  {
    sub_1C49DA960(a1, (uint64_t)&v4);
    v2 = v7;
    v3 = v4;
  }
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v6)
    free(v3);
}

void sub_1C6276D58(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  uint64_t v5;
  _OWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  v4 = v6;
  v5 = 0x600000000;
  sub_1C4765AA4((char *)&v4, 1uLL, 0);
  v2 = 11;
  LODWORD(v7) = 11;
  v3 = v4;
  *(_QWORD *)v4 |= 2uLL;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  if ((_DWORD)v5)
  {
    sub_1C49DA960(a1, (uint64_t)&v4);
    v2 = v7;
    v3 = v4;
  }
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v6)
    free(v3);
}

uint64_t sub_1C6276E38(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
}

uint64_t sub_1C6276E44(uint64_t a1)
{
  int v1;
  uint64_t result;
  uint64_t v3;
  BOOL v4;

  v1 = *(unsigned __int8 *)(a1 + 24);
  result = *(_QWORD *)(a1 + 16);
  if (!v1)
  {
    v3 = *(_QWORD *)(result + 8);
    if (v3)
      v4 = v3 == *(_QWORD *)(result + 24) + 48;
    else
      v4 = 1;
    if (v4)
      return *(_QWORD *)(result + 24) + 48;
    else
      return *(_QWORD *)(result + 8);
  }
  return result;
}

void sub_1C6276E74()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6276E88()
{
  return 1;
}

_QWORD *sub_1C6276E90(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E816EDF0;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &off_1E816EE58;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

_QWORD *sub_1C6276F10(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E816EE58;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C6276F50(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v12 = 0;
  v8 = sub_1C6159B48(a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v12);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C6276FC8(v11);
}

uint64_t sub_1C6276FC8(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C6276FE0(_QWORD *a1)
{
  sub_1C6276E90(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C6277004(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C6277010(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C6277020(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_3:
    v4 = &off_1E816EEA8;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_3;
  }
  return result;
}

_QWORD *sub_1C627708C(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C6277094(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E816EE58;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62770E4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C62770EC(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C6277100(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C6277114(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C6277128(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

uint64_t sub_1C6277154()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C6275B74(v0);
}

char **sub_1C627717C(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      v6 = *(_QWORD *)&v5[v4];
      *(_QWORD *)&v5[v4] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      v4 -= 8;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_1C62771EC(llvm::Pass *a1)
{
  unsigned __int8 *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E816EC40;
  *((_QWORD *)a1 + 37) = &off_1E816EC08;
  v2 = (unsigned __int8 *)*((_QWORD *)a1 + 41);
  if (v2)
    llvm::MetadataTracking::untrack((uint64_t)a1 + 328, v2);
  v3 = *((_QWORD *)a1 + 36);
  *((_QWORD *)a1 + 36) = 0;
  if (v3)
    MEMORY[0x1CAA32FC0](v3, 0x20C40A4A59CD2);
  sub_1C4926674(a1);
}

void sub_1C6277258(__int128 *a1, _WORD *a2, _WORD *a3, uint64_t a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED805E80, 0, 0);
  qword_1ED805F08 = (uint64_t)&off_1E816EEA8;
  unk_1ED805F10 = 0;
  qword_1ED805E80 = (uint64_t)off_1E816EDF0;
  dword_1ED805F00 = 0;
  qword_1ED805F18 = (uint64_t)&off_1E816EE58;
  qword_1ED805F20 = (uint64_t)&qword_1ED805E80;
  qword_1ED805F28 = (uint64_t)&unk_1ED805F38;
  qword_1ED805F30 = 0x800000000;
  qword_1ED8060B8 = (uint64_t)&off_1E816EEE8;
  qword_1ED8060D0 = (uint64_t)&qword_1ED8060B8;
  xmmword_1ED805EA0 = *a1;
  word_1ED805E8A = word_1ED805E8A & 0xFF9F | (32 * (*a2 & 3));
  word_1ED805E8A = word_1ED805E8A & 0xFFF8 | *a3 & 7;
  sub_1C554A080(*(_QWORD *)a4, *(_DWORD *)(a4 + 8));
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED805E80);
}

void sub_1C6277330()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6277344()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E816EEE8;
  return result;
}

void sub_1C6277368(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E816EEE8;
}

void sub_1C6277384(unsigned __int8 *a1, size_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  _QWORD v11[5];
  int v12;
  char v13;

  v11[0] = a1;
  v11[1] = a2;
  v11[2] = a4;
  v11[3] = a5;
  v11[4] = &off_1E816EEA8;
  v13 = 1;
  v12 = a3;
  v7 = sub_1C554A0C4((unint64_t)v11);
  v8 = qword_1ED805F28 + 48 * qword_1ED805F30;
  v9 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 32) = &off_1E816EEC8;
  v10 = *(_BYTE *)(v7 + 44);
  *(_DWORD *)(v8 + 40) = *(_DWORD *)(v7 + 40);
  *(_BYTE *)(v8 + 44) = v10;
  *(_QWORD *)(v8 + 32) = &off_1E816EEA8;
  LODWORD(qword_1ED805F30) = qword_1ED805F30 + 1;
  llvm::cl::AddLiteralOption(qword_1ED805F20, a1, a2);
}

void sub_1C6277438(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1ED805F28, a1, 48, &v8);
  v2 = (_OWORD *)qword_1ED805F28;
  if ((_DWORD)qword_1ED805F30)
  {
    v3 = qword_1ED805F28 + 48 * qword_1ED805F30;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E816EEC8;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E816EEA8;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1ED805F28;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1ED805F38)
    free(v2);
  qword_1ED805F28 = (uint64_t)v1;
  HIDWORD(qword_1ED805F30) = v7;
}

uint64_t sub_1C6277504(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unint64_t v12;

  v12 = 0;
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 56, &v12);
  v5 = *(_DWORD *)(a1 + 8);
  v6 = (char *)&v4[7 * v5];
  v7 = *a2;
  *((_WORD *)v6 + 4) = *((_WORD *)a2 + 4);
  *(_QWORD *)v6 = v7;
  *((_QWORD *)v6 + 3) = 0x200000000;
  *((_QWORD *)v6 + 2) = v6 + 32;
  v8 = (uint64_t)(v6 + 16);
  if (*((_DWORD *)a2 + 6))
    sub_1C554A138(v8, (uint64_t)(a2 + 2));
  v4[7 * v5 + 6] = a2[6];
  sub_1C62775E0(a1, (uint64_t)v4);
  v9 = v12;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  v10 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v10;
  *(_DWORD *)(a1 + 12) = v9;
  return (uint64_t)&v4[7 * v10 - 7];
}

uint64_t sub_1C62775E0(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v5 = *(_QWORD *)result + 56 * v2;
    result = a2 + 16;
    v6 = v4 + 16;
    do
    {
      v8 = v6 - 16;
      v7 = *(_QWORD *)(v6 - 16);
      *(_WORD *)(result - 8) = *(_WORD *)(v6 - 8);
      *(_QWORD *)(result - 16) = v7;
      *(_QWORD *)result = result + 16;
      *(_QWORD *)(result + 8) = 0x200000000;
      if (*(_DWORD *)(v6 + 8))
        result = sub_1C554A138(result, v6);
      *(_QWORD *)(result + 32) = *(_QWORD *)(v6 + 32);
      result += 56;
      v6 += 56;
    }
    while (v8 + 56 != v5);
    v9 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)v3 - 40;
      v11 = 56 * v9;
      do
      {
        result = (uint64_t)sub_1C627717C((char **)(v10 + v11));
        v11 -= 56;
      }
      while (v11);
    }
  }
  return result;
}

double sub_1C62776A4(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = v4 - 8;
    do
    {
      v8 = *(_QWORD *)&v7[v6];
      *(_QWORD *)&v7[v6] = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      v6 -= 8;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

void sub_1C627772C(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;

  v13 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 8, &v13);
  v4 = *(uint64_t **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = 8 * v5;
    v8 = v3;
    do
    {
      v9 = *v4;
      *v4++ = 0;
      *v8++ = v9;
      v7 -= 8;
    }
    while (v7);
    v10 = *(_QWORD *)a1 - 8;
    do
    {
      v11 = *(_QWORD *)(v10 + v6);
      *(_QWORD *)(v10 + v6) = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
      v6 -= 8;
    }
    while (v6);
    v4 = *(uint64_t **)a1;
  }
  v12 = v13;
  if (v4 != (uint64_t *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v12;
}

void sub_1C62777E0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;

  v14 = 0;
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 8, &v14);
  v5 = *(unsigned int *)(a1 + 8);
  v4[v5] = *a2;
  v6 = *(uint64_t **)a1;
  if ((_DWORD)v5)
  {
    v7 = 8 * v5;
    v8 = 8 * v5;
    v9 = v4;
    do
    {
      v10 = *v6;
      *v6++ = 0;
      *v9++ = v10;
      v8 -= 8;
    }
    while (v8);
    v11 = *(_QWORD *)a1 - 8;
    do
    {
      v12 = *(_QWORD *)(v11 + v7);
      *(_QWORD *)(v11 + v7) = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
      v7 -= 8;
    }
    while (v7);
    v6 = *(uint64_t **)a1;
  }
  v13 = v14;
  if (v6 != (uint64_t *)(a1 + 16))
    free(v6);
  *(_QWORD *)a1 = v4;
  ++*(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 12) = v13;
}

void sub_1C62778AC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED8060E0);
  if (v1 != -1)
  {
    v4[0] = sub_1C554A468;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED8060E0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C627790C(uint64_t a1)
{
  llvm::PassRegistry *v2;
  unint64_t v3;
  unint64_t PassRegistry;
  _QWORD *v6;
  _QWORD v7[2];

  v2 = (llvm::PassRegistry *)sub_1C4776848(a1, (uint64_t)&unk_1ED8060D8);
  *(_QWORD *)v2 = &off_1E816EF30;
  PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  v3 = atomic_load(&qword_1ED8060E0);
  if (v3 != -1)
  {
    v7[0] = sub_1C554A468;
    v7[1] = &PassRegistry;
    v6 = v7;
    std::__call_once(&qword_1ED8060E0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void sub_1C62779A4(llvm::Pass *a1)
{
  sub_1C4926674(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C62779C8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C627790C(v0);
}

void sub_1C62779F0(uint64_t a1, _QWORD *a2)
{
  llvm::Value *v3;

  v3 = (llvm::Value *)(*a2 & 0xFFFFFFFFFFFFFFF8);
  if (((*a2 & 4) == 0 || !v3) && (*a2 & 4) == 0)
  {
    if (v3)
      llvm::Value::getPointerAlignment(v3, (const llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 272));
  }
}

void *sub_1C6277A80(uint64_t a1)
{
  return sub_1C4771E64(a1, a1 + 112, (uint64_t)&llvm::StackProtector::ID);
}

uint64_t sub_1C6277A90(unsigned int a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  char v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  char v14;

  sub_1C554F70C((uint64_t)&v11, a1, a2, a4);
  if (!v14)
    return 0;
  v6 = sub_1C554C050(v13, a2);
  if (v7)
    v8 = v6 == a3;
  else
    v8 = 0;
  v9 = v8;
  if (v12 >= 0x41 && v11)
    MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
  return v9;
}

llvm::SmallPtrSetImplBase *sub_1C6277B1C(llvm::SmallPtrSetImplBase *this, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = (char *)this + 32;
  *((_QWORD *)this + 1) = (char *)this + 32;
  *((_QWORD *)this + 2) = 32;
  *((_DWORD *)this + 6) = 0;
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      v6 = *a2++;
      sub_1C4774094(this, v6);
      v5 -= 8;
    }
    while (v5);
  }
  return this;
}

llvm::APInt *sub_1C6277B7C(llvm::APInt *this, llvm::APInt *a2)
{
  unsigned int v5;

  if (*((_BYTE *)a2 + 24))
  {
    if (*((_BYTE *)this + 24))
    {
      if (*((_DWORD *)this + 2) > 0x40u || *((_DWORD *)a2 + 2) > 0x40u)
      {
        llvm::APInt::assignSlowCase(this, a2);
      }
      else
      {
        *(_QWORD *)this = *(_QWORD *)a2;
        *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
      }
      *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    }
    else
    {
      v5 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 2) = v5;
      if (v5 > 0x40)
        llvm::APInt::initSlowCase(this, (const void **)a2);
      else
        *(_QWORD *)this = *(_QWORD *)a2;
      *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
      *((_BYTE *)this + 24) = 1;
    }
  }
  else if (*((_BYTE *)this + 24))
  {
    if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
      MEMORY[0x1CAA32F9C]();
    *((_BYTE *)this + 24) = 0;
  }
  return this;
}

void sub_1C6277C64()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6277C78(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E816EFF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C6277CAC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E816EFF0;
  a2[1] = v2;
  return result;
}

void sub_1C6277CC8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6277CDC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E816F038;
  result[1] = v3;
  return result;
}

uint64_t sub_1C6277D10(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E816F038;
  a2[1] = v2;
  return result;
}

void *llvm::AGXPseudoWaitPlacement::getAnalysisUsage(llvm::AGXPseudoWaitPlacement *this, llvm::AnalysisUsage *a2)
{
  llvm::AnalysisUsage::setPreservesCFG(a2);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::LiveIntervals::ID);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::SlotIndexes::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(this, a2);
}

_QWORD *llvm::createAGXPreRAAnalysisPass(llvm *this)
{
  uint64_t v1;
  _QWORD *result;

  v1 = operator new();
  result = (_QWORD *)sub_1C4776848(v1, (uint64_t)&unk_1EF8F2FF0);
  *result = &off_1E816F150;
  return result;
}

void llvm::initializeAGXPreRAAnalysisPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED8060E8);
  if (v2 != -1)
  {
    v5[0] = sub_1C5553E2C;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED8060E8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void llvm::initializeGPUCFGLoweringPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED8060F8);
  if (v2 != -1)
  {
    v5[0] = sub_1C5555E7C;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED8060F8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t llvm::createGPUCFGLoweringPass(uint64_t a1)
{
  uint64_t v2;
  llvm::PassRegistry *v3;
  unint64_t v4;
  unint64_t PassRegistry;
  _QWORD *v7;
  _QWORD v8[2];

  v2 = operator new();
  v3 = (llvm::PassRegistry *)sub_1C4776848(v2, (uint64_t)&unk_1ED8060F0);
  *(_QWORD *)v3 = &off_1E816F210;
  *((_QWORD *)v3 + 31) = a1;
  PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  v4 = atomic_load(&qword_1ED8060F8);
  if (v4 != -1)
  {
    v8[0] = sub_1C5555E7C;
    v8[1] = &PassRegistry;
    v7 = v8;
    std::__call_once(&qword_1ED8060F8, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v2;
}

llvm::raw_ostream *sub_1C6277F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1C5559D98((llvm::raw_ostream **)a1, a2);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned int *)(v3 + 872);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(v3 + 864);
    v6 = 48 * v4;
    do
    {
      sub_1C555A050((uint64_t *)a1, v5);
      v5 += 48;
      v6 -= 48;
    }
    while (v6);
  }
  return sub_1C4816AD8(*(llvm::raw_ostream **)a1, "}\n");
}

char *sub_1C6277FD0(char *result, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  char v5;
  char v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v3 = result;
  v4 = *(unsigned int *)(a3 + 8);
  if (!(_DWORD)v4)
    goto LABEL_8;
  v5 = 0;
  v6 = 0;
  v7 = *(unsigned int **)a3;
  v8 = 4 * v4;
  do
  {
    v9 = *v7++;
    v10 = *(_QWORD *)(a3 + 864) + 48 * v9;
    v5 |= v10 == a2;
    v6 |= *(_QWORD *)(a2 + 16) == *(_QWORD *)(v10 + 16);
    v8 -= 4;
  }
  while (v8);
  if ((v5 & 1) != 0)
  {
    result[23] = 10;
    strcpy(result, "style=bold");
    return result;
  }
  if ((v6 & 1) != 0)
  {
    result = (char *)operator new(0x20uLL);
    *(_QWORD *)v3 = result;
    *(_OWORD *)(v3 + 8) = xmmword_1C8655410;
    strcpy(result, "style=filled,color=\"#00ff0080\"");
  }
  else
  {
LABEL_8:
    result[23] = 0;
    *result = 0;
  }
  return result;
}

uint64_t sub_1C62780AC(unsigned int **a1)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v1 = a1[1];
  if (!*((_BYTE *)a1 + 24))
    return *((_QWORD *)v1 + 108) + 48 * **a1;
  v2 = v1[2];
  if (!(_DWORD)v2)
    return 0;
  v3 = *(unsigned int **)v1;
  v4 = a1[2];
  v5 = 4 * v2;
  v6 = *((_QWORD *)v1 + 108);
  while (1)
  {
    result = v6 + 48 * *v3;
    if (v4 != (unsigned int *)result && *((_QWORD *)v4 + 2) == *(_QWORD *)(v6 + 48 * *v3 + 16))
      break;
    ++v3;
    v5 -= 4;
    if (!v5)
      return 0;
  }
  return result;
}

llvm::raw_ostream *sub_1C6278124(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  sub_1C5559D98((llvm::raw_ostream **)a1, a2);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)v3;
    v6 = v4 << 6;
    do
    {
      sub_1C555AC24((llvm::raw_ostream **)a1, v5);
      v5 += 64;
      v6 -= 64;
    }
    while (v6);
  }
  return sub_1C4816AD8(*(llvm::raw_ostream **)a1, "}\n");
}

uint64_t sub_1C6278184(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;

  v2 = *(_QWORD **)a2;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 2136);
  v4 = *(_DWORD *)(a2 + 32);
  v5 = *(_QWORD *)(v3 + 864);
  v6 = v5 + 48 * v4;
  v9 = *(_QWORD *)(v6 + 24);
  v8 = v6 + 24;
  v7 = v9;
  v10 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v10)
  {
    v11 = *(unsigned int **)v3;
    v12 = (_QWORD *)(v5 + 48 * v4 + 16);
    v13 = 4 * v10;
    v14 = v13;
    v15 = v11;
    while (1)
    {
      v16 = *v15;
      if (v4 != (_DWORD)v16 && *v12 == *(_QWORD *)(v5 + 48 * v16 + 16))
        break;
      ++v15;
      v14 -= 4;
      if (!v14)
      {
        v17 = 0;
        goto LABEL_7;
      }
    }
    v17 = *v2 + (v16 << 6);
LABEL_7:
    v18 = *(_DWORD *)(v8 + 8);
    while (v4 == *v11 || *v12 != *(_QWORD *)(v5 + 48 * *v11 + 16))
    {
      ++v11;
      v13 -= 4;
      if (!v13)
      {
        v19 = 0;
        goto LABEL_13;
      }
    }
    v19 = *v2 != 0;
  }
  else
  {
    v17 = 0;
    v19 = 0;
    v18 = *(_DWORD *)(v8 + 8);
  }
LABEL_13:
  v20 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)(result + 16) = a2;
  *(_BYTE *)(result + 24) = v17 != 0;
  *(_QWORD *)(result + 32) = v7 + 4 * v18;
  *(_QWORD *)(result + 40) = v2;
  *(_QWORD *)(result + 48) = a2;
  *(_BYTE *)(result + 56) = v19;
  *(_QWORD *)(result + 64) = v20;
  *(_QWORD *)(result + 72) = v2;
  *(_QWORD *)(result + 80) = a2;
  *(_DWORD *)(result + 88) = v18 == 0;
  return result;
}

uint64_t sub_1C6278298(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD **)a2;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 2136);
  v4 = *(_DWORD *)(a2 + 32);
  v5 = *(_QWORD *)(v3 + 864);
  v6 = v5 + 48 * v4;
  v7 = *(_QWORD *)(v6 + 24);
  v8 = *(unsigned int *)(v6 + 32);
  v9 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v9)
  {
    v10 = *(unsigned int **)v3;
    v11 = (_QWORD *)(v5 + 48 * v4 + 16);
    v12 = 4 * v9;
    v13 = v12;
    v14 = v10;
    do
    {
      v15 = *v14;
      if (v4 != (_DWORD)v15 && *v11 == *(_QWORD *)(v5 + 48 * v15 + 16))
      {
        v16 = *v2 + (v15 << 6);
        goto LABEL_7;
      }
      ++v14;
      v13 -= 4;
    }
    while (v13);
    v16 = 0;
LABEL_7:
    while (v4 == *v10 || *v11 != *(_QWORD *)(v5 + 48 * *v10 + 16))
    {
      ++v10;
      v12 -= 4;
      if (!v12)
        goto LABEL_12;
    }
    v17 = *v2 != 0;
  }
  else
  {
    v16 = 0;
LABEL_12:
    v17 = 0;
  }
  v18 = v7 + 4 * v8;
  v19 = *(_QWORD *)(a2 + 40);
  v20 = *(unsigned int *)(a2 + 48);
  *(_QWORD *)result = v18;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)(result + 16) = a2;
  *(_BYTE *)(result + 24) = v16 != 0;
  *(_QWORD *)(result + 32) = v18;
  *(_QWORD *)(result + 40) = v2;
  *(_QWORD *)(result + 48) = a2;
  *(_BYTE *)(result + 56) = v17;
  *(_QWORD *)(result + 64) = v19 + 4 * v20;
  *(_QWORD *)(result + 72) = v2;
  *(_QWORD *)(result + 80) = a2;
  *(_DWORD *)(result + 88) = 1;
  return result;
}

llvm::raw_ostream *sub_1C62783A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  sub_1C5559D98((llvm::raw_ostream **)a1, a2);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned int *)(v3 + 72);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(v3 + 64);
    v6 = 48 * v4;
    do
    {
      sub_1C555B6D8(a1, v5);
      v5 += 48;
      v6 -= 48;
    }
    while (v6);
  }
  return sub_1C4816AD8(*(llvm::raw_ostream **)a1, "}\n");
}

uint64_t sub_1C627840C(uint64_t a1)
{
  return ((uint64_t (*)(void))((char *)sub_1C627842C + 4 * byte_1C8655434[*(unsigned int *)(a1 + 16)]))();
}

uint64_t sub_1C627842C(_QWORD *a1)
{
  return *(_QWORD *)(*a1 + 64) + 48 * *(unsigned int *)(a1[1] + 12);
}

uint64_t sub_1C6278470(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 520);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C555D7DC((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

void llvm::initializeGPUCodeGen(llvm *this, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  llvm::PassRegistry *v5;
  llvm::PassRegistry *v6;
  llvm::PassRegistry *v7;

  llvm::initializeGPUCFGLoweringPass(this, a2);
  llvm::initializeGPUConditionalFlattenerPass(this, v3);
  llvm::initializeGPUIterateCombinePass(this, v4);
  llvm::initializeGPUSampleSinkPass(this, v5);
  llvm::initializeGPUWaitPlacementPassPass(this, v6);
  llvm::initializeAGXPreRAAnalysisPass(this, v7);
}

void llvm::initializeGPUConditionalFlattenerPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED806340);
  if (v2 != -1)
  {
    v5[0] = sub_1C55637B0;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED806340, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

double llvm::createGPUConditionalFlattenerPass(llvm *this, const llvm::GPUConditionalizer *a2)
{
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = operator new();
  v4 = sub_1C4776848(v3, (uint64_t)&unk_1EF8F2FF8);
  *(_QWORD *)v4 = &off_1E816F318;
  *(_QWORD *)(v4 + 248) = -1;
  *(_BYTE *)(v4 + 256) = 0;
  *(_QWORD *)(v4 + 264) = this;
  *(_QWORD *)(v4 + 296) = v4 + 312;
  *(_QWORD *)&result = 0x800000000;
  *(_QWORD *)(v4 + 304) = 0x800000000;
  return result;
}

uint64_t sub_1C6278648(uint64_t result, uint64_t *a2, _QWORD *a3, llvm::TargetInstrInfo *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 **v6;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 **v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v4 = result;
  v5 = a3[1];
  v6 = (unsigned __int16 **)(a3 + 6);
  if (a3 + 6 != (_QWORD *)a3[7])
  {
    while (1)
    {
      v6 = (unsigned __int16 **)((unint64_t)*v6 & 0xFFFFFFFFFFFFFFF8);
      result = sub_1C47BEF78((uint64_t)v6);
      if (!(_DWORD)result)
        break;
      if ((unsigned __int16 **)a3[7] == v6)
        goto LABEL_4;
    }
    result = llvm::TargetInstrInfo::isUnpredicatedTerminator(a4, (const llvm::MachineInstr *)v6);
    if ((result & 1) != 0)
    {
      v11 = *v6[2];
      v12 = *(_QWORD *)(a3[4] + 16);
      if ((unsigned __int16 **)a3[7] == v6
        || (v13 = (unsigned __int16 **)((unint64_t)*v6 & 0xFFFFFFFFFFFFFFF8),
            (llvm::TargetInstrInfo::isUnpredicatedTerminator(a4, (const llvm::MachineInstr *)v13) & 1) == 0))
      {
        v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a2 + 72))(a2, v11, v12);
        v19 = *a2;
        if (v18)
        {
          result = (*(uint64_t (**)(uint64_t *, unsigned __int16 **))(v19 + 80))(a2, v6);
          *(_QWORD *)v4 = *(_QWORD *)(result + 16);
          *(_QWORD *)(v4 + 8) = v5;
LABEL_19:
          *(_BYTE *)(v4 + 16) = 0;
LABEL_20:
          v10 = 1;
          goto LABEL_5;
        }
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v19 + 64))(a2, v11, v12);
        if ((_DWORD)result)
        {
          v20 = *(_QWORD *)((*(uint64_t (**)(uint64_t *, unsigned __int16 **))(*a2 + 80))(a2, v6) + 16);
          result = (*(uint64_t (**)(uint64_t *, unsigned __int16 **))(*a2 + 88))(a2, v6);
          *(_QWORD *)v4 = v20;
          *(_QWORD *)(v4 + 8) = v5;
          *(_BYTE *)(v4 + 16) = result;
          goto LABEL_20;
        }
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*a2 + 64))(a2, *v13[2], v12);
        if ((_DWORD)result)
        {
          result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a2 + 72))(a2, v11, v12);
          if ((_DWORD)result)
          {
            v14 = *(_QWORD *)((*(uint64_t (**)(uint64_t *, unsigned __int16 **))(*a2 + 80))(a2, v13) + 16);
            v15 = (*(uint64_t (**)(uint64_t *, unsigned __int16 **))(*a2 + 88))(a2, v13);
            result = (*(uint64_t (**)(uint64_t *, unsigned __int16 **))(*a2 + 80))(a2, v6);
            v16 = *(_QWORD *)(result + 16);
            if (v15)
              v17 = v14;
            else
              v17 = *(_QWORD *)(result + 16);
            if (!v15)
              v16 = v14;
            *(_QWORD *)v4 = v16;
            *(_QWORD *)(v4 + 8) = v17;
            goto LABEL_19;
          }
        }
      }
      v10 = 0;
      *(_BYTE *)v4 = 0;
      goto LABEL_5;
    }
  }
LABEL_4:
  *(_QWORD *)v4 = v5;
  *(_QWORD *)(v4 + 8) = v5;
  v10 = 1;
  *(_BYTE *)(v4 + 16) = 0;
LABEL_5:
  *(_BYTE *)(v4 + 24) = v10;
  return result;
}

uint64_t llvm::GPUFastISel::getOperand(llvm::GPUFastISel *this, const llvm::Instruction *a2, int a3)
{
  int v3;
  char *v4;

  v3 = *((_DWORD *)a2 + 5);
  if ((v3 & 0x40000000) != 0)
    v4 = (char *)*((_QWORD *)a2 - 1);
  else
    v4 = (char *)a2 - 32 * (v3 & 0x7FFFFFF);
  return *(_QWORD *)&v4[32 * a3];
}

uint64_t llvm::GPUFastISel::getOpcode(llvm::GPUFastISel *this, const llvm::Instruction *a2)
{
  return *((unsigned __int8 *)a2 + 16) - 28;
}

__n128 llvm::GPUFastISel::FixupTexStateSource@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 llvm::GPUFastISel::FixupSmpStateSource@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t llvm::GPUFastISel::GetTexSmpStateSource@<X0>(llvm::GPUFastISel *this@<X0>, const llvm::FunctionGroup *a2@<X1>, const llvm::Instruction *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  const llvm::Value *v12;
  const llvm::Value *v13;
  uint64_t v14;
  BOOL *v15;
  int StateSource;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;

  v12 = (const llvm::Value *)(*(uint64_t (**)(llvm::GPUFastISel *, const llvm::Instruction *, uint64_t))(*(_QWORD *)this + 16))(this, a3, a4);
  v13 = (const llvm::Value *)(*(uint64_t (**)(llvm::GPUFastISel *, const llvm::Instruction *, uint64_t))(*(_QWORD *)this + 16))(this, a3, a5);
  v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  StateSource = llvm::GPUFastISel::GetStateSource((llvm::DataLayout **)this, a2, v12, v14, v15);
  v18 = v17;
  v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
  result = llvm::GPUFastISel::GetStateSource((llvm::DataLayout **)this, a2, v13, v19, v20);
  v22 = result;
  v24 = v23;
  if (StateSource == -1)
  {
    StateSource = (*(uint64_t (**)(llvm::GPUFastISel *, const llvm::Value *))(*(_QWORD *)this + 168))(this, v12);
    result = (*(uint64_t (**)(llvm::GPUFastISel *, uint64_t, _QWORD))(*(_QWORD *)this + 312))(this, 1, 0);
    v18 = 0;
    v25 = (result & 0xFFF) << 8;
    v26 = 2;
  }
  else
  {
    v26 = 0;
    v25 = (v18 >> 24) & 0xFFF00 | 7;
    v18 = v18;
  }
  if (v22 == -1)
  {
    v26 |= 1u;
    v22 = (*(uint64_t (**)(llvm::GPUFastISel *, const llvm::Value *))(*(_QWORD *)this + 168))(this, v13);
    result = (*(uint64_t (**)(llvm::GPUFastISel *, uint64_t, _QWORD))(*(_QWORD *)this + 312))(this, 1, 0);
    v27 = 0;
    v28 = (result & 0xFFF) << 8;
  }
  else
  {
    v28 = (v24 >> 24) & 0xFFF00 | 7;
    v27 = v24;
  }
  *(_DWORD *)a6 = v25;
  *(_DWORD *)(a6 + 4) = StateSource;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = v18;
  *(_QWORD *)(a6 + 24) = 0;
  *(_BYTE *)(a6 + 32) = 1;
  *(_DWORD *)(a6 + 40) = 1;
  *(_QWORD *)(a6 + 48) = 0;
  *(_QWORD *)(a6 + 56) = 0;
  *(_BYTE *)(a6 + 72) = 1;
  *(_DWORD *)(a6 + 80) = v28;
  *(_DWORD *)(a6 + 84) = v22;
  *(_QWORD *)(a6 + 88) = 0;
  *(_QWORD *)(a6 + 96) = v27;
  *(_QWORD *)(a6 + 104) = 0;
  *(_BYTE *)(a6 + 112) = 1;
  *(_DWORD *)(a6 + 120) = v26;
  *(_BYTE *)(a6 + 128) = 0;
  *(_BYTE *)(a6 + 160) = 0;
  *(_BYTE *)(a6 + 168) = 1;
  return result;
}

uint64_t llvm::GPUFastISel::IsUniform()
{
  return 0;
}

BOOL llvm::GPUFastISel::is16BitInteger(llvm::GPUFastISel *this, llvm::Type **a2)
{
  return llvm::Type::isIntegerTy(*a2, 16);
}

BOOL llvm::GPUFastISel::is32BitInteger(llvm::GPUFastISel *this, llvm::Type **a2)
{
  return llvm::Type::isIntegerTy(*a2, 32);
}

BOOL llvm::GPUFastISel::isHalf(llvm::GPUFastISel *this, const llvm::Value *a2)
{
  return *(_BYTE *)(*(_QWORD *)a2 + 8) == 0;
}

BOOL llvm::GPUFastISel::isFloat(llvm::GPUFastISel *this, const llvm::Value *a2)
{
  return *(_BYTE *)(*(_QWORD *)a2 + 8) == 2;
}

uint64_t llvm::GPUFastISel::GetConstantValue(llvm::GPUFastISel *this, uint64_t a2)
{
  uint64_t VirtualRegister;
  unint64_t *FirstNonPHI;
  uint64_t v5;
  llvm::MachineFunction *v6;
  llvm::MachineInstr *v7;
  llvm::MachineInstr *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  unsigned int v16;
  _DWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21[2];
  _BYTE v22[64];
  void *v23;
  uint64_t v24;
  _QWORD v25[17];

  v25[16] = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v23 = v25;
  v24 = 0x800000000;
  v15 = 0;
  (*(void (**)(_QWORD, uint64_t, unsigned int *, uint64_t *, void **))(**((_QWORD **)this + 1) + 296))(*((_QWORD *)this + 1), a2, &v16, &v15, &v23);
  VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(_QWORD *)(*((_QWORD *)this + 4) + 40), v15, "", 0);
  FirstNonPHI = (unint64_t *)llvm::MachineBasicBlock::getFirstNonPHI(*((llvm::MachineBasicBlock **)this + 2));
  v5 = *((_QWORD *)this + 2);
  v21[0] = 0;
  v6 = sub_1C4787570(v5, FirstNonPHI, (unsigned __int8 **)v21, *(_QWORD *)(*((_QWORD *)this + 6) + 8) + 48 * v16, VirtualRegister);
  v8 = v7;
  if (v21[0])
    llvm::MetadataTracking::untrack((uint64_t)v21, (unsigned __int8 *)v21[0]);
  v21[0] = v22;
  v21[1] = (void *)0x800000000;
  if ((_DWORD)v24)
  {
    v9 = (unsigned int *)v23;
    v10 = 16 * v24;
    while (1)
    {
      v11 = v9[1];
      if (!v11)
        break;
      if (v11 == 1)
      {
        v12 = *v9;
        v17[0] = 1;
        v18 = 0;
        v19 = v12;
LABEL_9:
        llvm::MachineInstr::addOperand(v8, v6, (const llvm::MachineOperand *)v17);
      }
      v9 += 4;
      v10 -= 16;
      if (!v10)
      {
        if (v21[0] != v22)
          free(v21[0]);
        goto LABEL_13;
      }
    }
    v13 = *v9;
    v18 = 0;
    v17[0] = 0;
    v17[1] = v13;
    v19 = 0;
    v20 = 0;
    goto LABEL_9;
  }
LABEL_13:
  if (v23 != v25)
    free(v23);
  return VirtualRegister;
}

{
  uint64_t VirtualRegister;
  unint64_t *FirstNonPHI;
  uint64_t v5;
  llvm::MachineFunction *v6;
  llvm::MachineInstr *v7;
  llvm::MachineInstr *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  unsigned int v16;
  _DWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21[2];
  _BYTE v22[64];
  void *v23;
  uint64_t v24;
  _QWORD v25[17];

  v25[16] = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v23 = v25;
  v24 = 0x800000000;
  v15 = 0;
  (*(void (**)(_QWORD, uint64_t, unsigned int *, uint64_t *, void **))(**((_QWORD **)this + 1) + 304))(*((_QWORD *)this + 1), a2, &v16, &v15, &v23);
  VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(_QWORD *)(*((_QWORD *)this + 4) + 40), v15, "", 0);
  FirstNonPHI = (unint64_t *)llvm::MachineBasicBlock::getFirstNonPHI(*((llvm::MachineBasicBlock **)this + 2));
  v5 = *((_QWORD *)this + 2);
  v21[0] = 0;
  v6 = sub_1C4787570(v5, FirstNonPHI, (unsigned __int8 **)v21, *(_QWORD *)(*((_QWORD *)this + 6) + 8) + 48 * v16, VirtualRegister);
  v8 = v7;
  if (v21[0])
    llvm::MetadataTracking::untrack((uint64_t)v21, (unsigned __int8 *)v21[0]);
  v21[0] = v22;
  v21[1] = (void *)0x800000000;
  if ((_DWORD)v24)
  {
    v9 = (unsigned int *)v23;
    v10 = 16 * v24;
    while (1)
    {
      v11 = v9[1];
      if (!v11)
        break;
      if (v11 == 1)
      {
        v12 = *v9;
        v17[0] = 1;
        v18 = 0;
        v19 = v12;
LABEL_9:
        llvm::MachineInstr::addOperand(v8, v6, (const llvm::MachineOperand *)v17);
      }
      v9 += 4;
      v10 -= 16;
      if (!v10)
      {
        if (v21[0] != v22)
          free(v21[0]);
        goto LABEL_13;
      }
    }
    v13 = *v9;
    v18 = 0;
    v17[0] = 0;
    v17[1] = v13;
    v19 = 0;
    v20 = 0;
    goto LABEL_9;
  }
LABEL_13:
  if (v23 != v25)
    free(v23);
  return VirtualRegister;
}

uint64_t llvm::GPUFastISel::GetTargetConstantValue(llvm::GPUFastISel *this, uint64_t a2)
{
  return a2;
}

uint64_t llvm::GPUFastISel::GetIsSparse()
{
  return 0;
}

uint64_t llvm::GPUFastISel::GetIsQueryLOD()
{
  return 0;
}

void llvm::GPUFastISel::AddMemOperand(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  llvm::MachineFunction *v5;
  int v6;
  uint64_t v7;
  int v8;
  llvm::MachineMemOperand *v9;
  int v10;
  _QWORD v11[2];
  int v12;
  char v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[2];
  int v17;
  char v18;

  v5 = *(llvm::MachineFunction **)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 24) + 32);
  v6 = a2[3];
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, llvm::MachineFunction *, BOOL))(**(_QWORD **)(a1 + 8) + 272))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32 * a2[8]), v5, a2[23] != -1);
  if (v6 == -1)
  {
    v11[0] = v7 | 4;
    v11[1] = 0;
    v13 = 0;
    if (v7)
      v10 = *(_DWORD *)(v7 + 12);
    else
      v10 = 0;
    v12 = v10;
    v14 = 0u;
    v15 = 0u;
    llvm::MachineFunction::getMachineMemOperand((uint64_t)v5, (uint64_t)v11, 2, 16, 3, (uint64_t)&v14, 0, 1, 0, 0, 0);
  }
  else
  {
    v16[0] = v7 | 4;
    v16[1] = 0;
    v18 = 0;
    if (v7)
      v8 = *(_DWORD *)(v7 + 12);
    else
      v8 = 0;
    v17 = v8;
    v14 = 0u;
    v15 = 0u;
    llvm::MachineFunction::getMachineMemOperand((uint64_t)v5, (uint64_t)v16, 1, 16, 3, (uint64_t)&v14, 0, 1, 0, 0, 0);
  }
  llvm::MachineInstr::addMemOperand(*(llvm::MachineInstr **)(a4 + 8), v5, v9);
}

void llvm::GPUSDISel::~GPUSDISel(llvm::GPUSDISel *this)
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::GPUSDISel::getOperand(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40 * a3);
}

void llvm::GPUSDISel::getScalarCoordElements(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  if (*(__int16 *)(a2 + 24) == -19)
  {
    v4 = *(unsigned __int16 *)(a2 + 56);
    v5 = *(_QWORD *)(a2 + 32);
    v9 = *(_OWORD *)(v5 + 120);
    v6 = *(_DWORD *)(v5 + 48);
    *(_QWORD *)a4 = *(_QWORD *)(v5 + 40);
    *(_DWORD *)(a4 + 8) = v6;
    *(_QWORD *)(a4 + 16) = v9;
    *(_DWORD *)(a4 + 24) = DWORD2(v9);
    if (v4 == 7)
    {
      v7 = *(_QWORD *)(a2 + 32);
      v8 = *(_QWORD *)(v7 + 200);
      *(_DWORD *)(a4 + 40) = *(_DWORD *)(v7 + 208);
      *(_QWORD *)(a4 + 32) = v8;
    }
  }
  else
  {
    *(_QWORD *)a4 = a2;
    *(_DWORD *)(a4 + 8) = a3;
  }
}

BOOL llvm::GPUSDISel::getFDiv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(unsigned __int16 *)(a2 + 24);
  if (v5 == 99)
  {
    v6 = *(uint64_t **)(a2 + 32);
    v7 = *v6;
    *(_DWORD *)(a4 + 8) = *((_DWORD *)v6 + 2);
    *(_QWORD *)a4 = v7;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(v8 + 40);
    *(_DWORD *)(a5 + 8) = *(_DWORD *)(v8 + 48);
    *(_QWORD *)a5 = v9;
  }
  return v5 == 99;
}

uint64_t llvm::GPUSDISel::getMulByRecip(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  if (*(_WORD *)(a2 + 24) != 98)
    return 0;
  v8 = *(uint64_t **)(a2 + 32);
  v9 = *v8;
  v10 = *((_DWORD *)v8 + 2);
  v11 = v8[5];
  v12 = *((_DWORD *)v8 + 12);
  v13 = *(unsigned __int16 *)(*v8 + 24);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 160))(*(_QWORD *)(a1 + 8)) != v13)
  {
    v14 = *(unsigned __int16 *)(v11 + 24);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 160))(*(_QWORD *)(a1 + 8)) != v14)
      return 0;
  }
  v15 = *(unsigned __int16 *)(v11 + 24);
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 160))(*(_QWORD *)(a1 + 8));
  if (v16 == v15)
    v17 = v10;
  else
    v17 = v12;
  if (v16 == v15)
    v18 = v11;
  else
    v18 = v9;
  if (v16 == v15)
    v19 = v9;
  else
    v19 = v11;
  *(_QWORD *)a4 = v19;
  *(_DWORD *)(a4 + 8) = v17;
  v20 = *(uint64_t **)(v18 + 32);
  v21 = *v20;
  *(_DWORD *)(a5 + 8) = *((_DWORD *)v20 + 2);
  *(_QWORD *)a5 = v21;
  return 1;
}

BOOL llvm::GPUSDISel::IsUniform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  int v5;
  _BOOL8 result;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _DWORD *v35;
  int v36;

  v5 = *(_DWORD *)(a2 + 28);
  v36 = v5;
  if (a5 > 0xA)
    return 0;
  v10 = *(unsigned __int16 *)(a2 + 24);
  if (*(__int16 *)(a2 + 24) < 0)
  {
    if (v10 != 65517)
      return 0;
    if (!*(_WORD *)(a2 + 56))
    {
LABEL_9:
      v12 = sub_1C6279770((_DWORD *)a4, &v36);
      result = 1;
      *((_BYTE *)v12 + 4) = 1;
      return result;
    }
    v13 = 0;
    v14 = a5 + 1;
    v15 = 40 * *(unsigned __int16 *)(a2 + 56);
    while (1)
    {
      v16 = sub_1C6279440(a4, v5);
      if ((*(_DWORD *)a4 & 1) != 0)
        v17 = a4 + 8;
      else
        v17 = *(_QWORD *)(a4 + 8);
      v18 = *(_DWORD *)(a4 + 16);
      if ((*(_DWORD *)a4 & 1) != 0)
        v18 = 64;
      if (v17 + 8 * v18 != v16)
        return *((_BYTE *)sub_1C6279770((_DWORD *)a4, &v36) + 4) != 0;
      if (((*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + v13), *(_QWORD *)(*(_QWORD *)(a2 + 32) + v13 + 8), a4, v14) & 1) == 0)
      {
LABEL_56:
        v35 = sub_1C6279770((_DWORD *)a4, &v36);
        result = 0;
        *((_BYTE *)v35 + 4) = 0;
        return result;
      }
      v13 += 40;
      if (v15 == v13)
        goto LABEL_9;
    }
  }
  result = 0;
  if (*(unsigned __int16 *)(a2 + 24) <= 0xAEu)
  {
    if (v10 <= 0x3A)
    {
      if (((1 << v10) & 0x800001802) != 0)
      {
        *((_BYTE *)sub_1C6279770((_DWORD *)a4, &v36) + 4) = 1;
        return 1;
      }
      if (((1 << v10) & 0x504000000000000) != 0)
        goto LABEL_8;
    }
    if (v10 == 146)
      goto LABEL_8;
  }
  else
  {
    v11 = v10 - 175;
    if (v11 <= 0x29)
    {
      if (((1 << (v10 + 81)) & 0x20001800007) != 0)
      {
LABEL_8:
        if (!*(_WORD *)(a2 + 56))
          goto LABEL_9;
        v19 = 0;
        v20 = a5 + 1;
        v21 = 40 * *(unsigned __int16 *)(a2 + 56);
        while (1)
        {
          v22 = sub_1C6279440(a4, v5);
          v23 = (*(_DWORD *)a4 & 1) != 0 ? a4 + 8 : *(_QWORD *)(a4 + 8);
          v24 = *(_DWORD *)(a4 + 16);
          if ((*(_DWORD *)a4 & 1) != 0)
            v24 = 64;
          if (v23 + 8 * v24 != v22)
            return *((_BYTE *)sub_1C6279770((_DWORD *)a4, &v36) + 4) != 0;
          if (((*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + v19), *(_QWORD *)(*(_QWORD *)(a2 + 32) + v19 + 8), a4, v20) & 1) == 0)goto LABEL_56;
          v19 += 40;
          if (v21 == v19)
            goto LABEL_9;
        }
      }
      if (v11 == 17)
      {
        if (*(_WORD *)(a2 + 56) == 1)
          goto LABEL_9;
        v29 = 0;
        v30 = a5 + 1;
        v31 = 40 * (*(unsigned __int16 *)(a2 + 56) - 1);
        while (1)
        {
          v32 = sub_1C6279440(a4, v5);
          if ((*(_DWORD *)a4 & 1) != 0)
            v33 = a4 + 8;
          else
            v33 = *(_QWORD *)(a4 + 8);
          v34 = *(_DWORD *)(a4 + 16);
          if ((*(_DWORD *)a4 & 1) != 0)
            v34 = 64;
          if (v33 + 8 * v34 != v32)
            return *((_BYTE *)sub_1C6279770((_DWORD *)a4, &v36) + 4) != 0;
          if (((*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + v29), *(_QWORD *)(*(_QWORD *)(a2 + 32) + v29 + 8), a4, v30) & 1) == 0)goto LABEL_56;
          v29 += 40;
          if (v31 == v29)
            goto LABEL_9;
        }
      }
    }
    v25 = v10 - 395;
    v26 = v25 > 0x2A;
    v27 = (1 << v25) & 0x42000000009;
    if (!v26 && v27 != 0)
      goto LABEL_8;
  }
  return result;
}

