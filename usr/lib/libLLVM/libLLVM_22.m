uint64_t sub_1C514C254(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 64);
  sub_1C514C2A4(&v3);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 40), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 16), 8);
  return a1;
}

void sub_1C514C2A4(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = (_QWORD *)*--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
        {
          v8 = (void *)v6[7];
          if (v8)
          {
            v6[8] = v8;
            operator delete(v8);
          }
          v10 = v6 + 4;
          sub_1C514C2A4(&v10);
          v9 = (_QWORD *)v6[1];
          if (v9 != v6 + 3)
            free(v9);
          MEMORY[0x1CAA32FC0](v6, 0x10A0C40B2354FA7);
        }
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C514C378(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void **v9;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v6 = *--v4;
    v5 = v6;
    *v4 = 0;
    if (v6)
    {
      v7 = *(void **)(v5 + 56);
      if (v7)
      {
        *(_QWORD *)(v5 + 64) = v7;
        operator delete(v7);
      }
      v9 = (void **)(v5 + 32);
      sub_1C514C2A4(&v9);
      v8 = *(void **)(v5 + 8);
      if (v8 != (void *)(v5 + 24))
        free(v8);
      result = MEMORY[0x1CAA32FC0](v5, 0x10A0C40B2354FA7);
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

char *sub_1C514C418(char **a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void **v22;

  v2 = (a1[1] - *a1) >> 3;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v6 = a1[2] - *a1;
  if (v6 >> 2 > v3)
    v3 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 61)
      sub_1C4764EE4();
    v8 = (char *)operator new(8 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[8 * v2];
  v10 = &v8[8 * v7];
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)v9 = v11;
  v12 = v9 + 8;
  v13 = *a1;
  v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v15 = *((_QWORD *)v14 - 1);
      v14 -= 8;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v9 - 1) = v15;
      v9 -= 8;
    }
    while (v14 != v13);
    v14 = *a1;
    v16 = a1[1];
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    while (v16 != v14)
    {
      v18 = *((_QWORD *)v16 - 1);
      v16 -= 8;
      v17 = v18;
      *(_QWORD *)v16 = 0;
      if (v18)
      {
        v19 = *(void **)(v17 + 56);
        if (v19)
        {
          *(_QWORD *)(v17 + 64) = v19;
          operator delete(v19);
        }
        v22 = (void **)(v17 + 32);
        sub_1C514C2A4(&v22);
        v20 = *(void **)(v17 + 8);
        if (v20 != (void *)(v17 + 24))
          free(v20);
        MEMORY[0x1CAA32FC0](v17, 0x10A0C40B2354FA7);
      }
    }
  }
  if (v14)
    operator delete(v14);
  return v12;
}

_QWORD *sub_1C514C568(_QWORD *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(uint64_t **)(a2 + 64);
  v3 = *(uint64_t **)(a2 + 72);
  if (v2 == v3)
    return result;
  v5 = result;
  v6 = 0;
  v7 = *result;
  do
  {
    v8 = *v2;
    v9 = *(_DWORD *)(v7 + 24);
    if (!v9)
      goto LABEL_17;
    v10 = *(_QWORD *)(v7 + 8);
    v11 = v9 - 1;
    v12 = ((v8 >> 4) ^ (v8 >> 9)) & (v9 - 1);
    v13 = *(_QWORD *)(v10 + 16 * v12);
    if (v8 != v13)
    {
      v14 = 1;
      while (v13 != -4096)
      {
        v15 = v12 + v14++;
        v12 = v15 & v11;
        v13 = *(_QWORD *)(v10 + 16 * v12);
        if (v8 == v13)
          goto LABEL_8;
      }
LABEL_17:
      v16 = 0;
      goto LABEL_9;
    }
LABEL_8:
    v16 = *(_QWORD *)(v10 + 16 * v12 + 8);
LABEL_9:
    v17 = (_DWORD *)v5[1];
    if (*v17 <= v16 && v17[1] >= HIDWORD(v16))
    {
      v18 = v5[2];
      v19 = *(unsigned int *)(v18 + 8);
      if (v19 >= *(unsigned int *)(v18 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v5[2], v18 + 16, v19 + 1, 8);
        v19 = *(unsigned int *)(v18 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v18 + 8 * v19) = v8;
      ++*(_DWORD *)(v18 + 8);
    }
    else
    {
      v6 = 1;
    }
    ++v2;
  }
  while (v2 != v3);
  if ((v6 & 1) != 0)
  {
    v20 = *(_QWORD *)v5[3];
    v21 = *(unsigned int *)(v20 + 16);
    if (v21 >= *(_DWORD *)(v20 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(v20 + 8, v20 + 24, v21 + 1, 8);
      LODWORD(v21) = *(_DWORD *)(v20 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v21) = a2;
    ++*(_DWORD *)(v20 + 16);
  }
  return result;
}

_BYTE *sub_1C514C6DC(unsigned int *a1, uint64_t a2, char *a3, char *a4)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  unint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v5 = a3;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = a1[2];
  v10 = a1[3];
  v11 = a4 - a3;
  v12 = v9 + ((a4 - a3) >> 3);
  if (*(_QWORD *)a1 + 8 * v9 == a2)
  {
    if (v12 > v10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v12, 8);
      v9 = a1[2];
      v7 = *(_QWORD *)a1;
    }
    if (v5 != a4)
    {
      v21 = (_QWORD *)(v7 + 8 * v9);
      do
      {
        v22 = *(_QWORD *)v5;
        v5 += 8;
        *v21++ = v22;
      }
      while (v5 != a4);
      v7 = *(_QWORD *)a1;
    }
    a1[2] = v9 + (v11 >> 3);
    return (_BYTE *)(v7 + 8 * v8);
  }
  else
  {
    v13 = (uint64_t)v11 >> 3;
    if (v12 > v10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v12, 8);
      v7 = *(_QWORD *)a1;
      v9 = a1[2];
    }
    v14 = (_BYTE *)(v7 + 8 * v8);
    v15 = (char *)(v7 + 8 * v9);
    v16 = (v15 - v14) >> 3;
    if (v16 >= v13)
    {
      sub_1C6177054(a1, &v15[-8 * v13], (char *)(v7 + 8 * v9));
      if (&v15[-8 * v13] != v14)
        memmove(&v14[8 * v13], v14, &v15[-8 * v13] - v14);
      if (a4 != v5)
        memmove(v14, v5, v11);
    }
    else
    {
      v17 = v9 + (v11 >> 3);
      a1[2] = v17;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * v17 - 8 * v16), (const void *)(v7 + 8 * v8), v15 - v14);
        v18 = v14;
        do
        {
          v19 = *(_QWORD *)v5;
          v5 += 8;
          *v18++ = v19;
          --v16;
        }
        while (v16);
      }
      while (v5 != a4)
      {
        v20 = *(_QWORD *)v5;
        v5 += 8;
        *(_QWORD *)v15 = v20;
        v15 += 8;
      }
    }
  }
  return v14;
}

_QWORD *sub_1C514C86C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      do
      {
        v13 = *v12;
        if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v14 = *(_DWORD *)(a1 + 16) - 1;
          v15 = v14 & ((v13 >> 4) ^ (v13 >> 9));
          v16 = (_QWORD *)(*(_QWORD *)a1 + 16 * v15);
          v17 = *v16;
          if (v13 != *v16)
          {
            v18 = 0;
            v19 = 1;
            while (v17 != -4096)
            {
              if (v18)
                v20 = 0;
              else
                v20 = v17 == -8192;
              if (v20)
                v18 = v16;
              v21 = v15 + v19++;
              v15 = v21 & v14;
              v16 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v21 & v14));
              v17 = *v16;
              if (v13 == *v16)
                goto LABEL_23;
            }
            if (v18)
              v16 = v18;
          }
LABEL_23:
          *v16 = v13;
          v16[1] = v12[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v12 += 2;
      }
      while (v12 != &v4[2 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v22 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v22)
  {
    v23 = 16 * v22;
    do
    {
      *result = -4096;
      result += 2;
      v23 -= 16;
    }
    while (v23);
  }
  return result;
}

uint64_t *sub_1C514C9E4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t *v16;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1C4964094(a1, v6);
      v16 = 0;
      sub_1C4DC18C8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
LABEL_4:
    v7 = *a3;
    goto LABEL_5;
  }
  sub_1C4964094(a1, 2 * v6);
  v7 = *a2;
  v9 = *(_DWORD *)(a1 + 16) - 1;
  v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (uint64_t *)(*(_QWORD *)a1 + 16 * v10);
  v11 = *a3;
  if (*a2 != *a3)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = a3;
      v15 = v10 + v13++;
      v10 = v15 & v9;
      a3 = (uint64_t *)(*(_QWORD *)a1 + 16 * v10);
      v11 = *a3;
      if (v7 == *a3)
        goto LABEL_5;
    }
    if (v12)
      a3 = v12;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_DWORD *sub_1C514CB18(_DWORD *result)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = result;
  v2 = result[2];
  if (v2)
  {
    v3 = result[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      v4 = 1 << (33 - __clz(v2 - 1));
      if (v4 <= 64)
        v5 = 64;
      else
        v5 = v4;
LABEL_10:
      if (v5 == v3)
      {
        *((_QWORD *)result + 1) = 0;
        v6 = 8 * v3;
        v7 = *(_QWORD **)result;
        do
        {
          *v7++ = -4096;
          v6 -= 8;
        }
        while (v6);
      }
      else
      {
        result = (_DWORD *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
        if (v5)
        {
          v10 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
          v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
          LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
          v1[4] = v11;
          result = operator new(8 * v11, (std::align_val_t)8uLL);
          *(_QWORD *)v1 = result;
          *((_QWORD *)v1 + 1) = 0;
          v12 = v1[4];
          if ((_DWORD)v12)
          {
            v13 = 8 * v12;
            do
            {
              *(_QWORD *)result = -4096;
              result += 2;
              v13 -= 8;
            }
            while (v13);
          }
        }
        else
        {
          *(_QWORD *)v1 = 0;
          *((_QWORD *)v1 + 1) = 0;
          v1[4] = 0;
        }
      }
      return result;
    }
  }
  else
  {
    if (!result[3])
      return result;
    v3 = result[4];
    if (v3 > 0x40)
    {
      v5 = 0;
      goto LABEL_10;
    }
  }
  if (v3)
  {
    v8 = *(_QWORD **)result;
    v9 = 8 * v3;
    do
    {
      *v8++ = -4096;
      v9 -= 8;
    }
    while (v9);
  }
  *((_QWORD *)result + 1) = 0;
  return result;
}

uint64_t sub_1C514CC60(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Machine Debugify Module";
  *(_QWORD *)(v2 + 8) = 23;
  *(_QWORD *)(v2 + 16) = "mir-debugify";
  *(_QWORD *)(v2 + 24) = 12;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6F39;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C514CCF0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C514CCF0()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F6F39;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E81447B8;
  return result;
}

void sub_1C514CD3C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C514CD60(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineModuleInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MachineModuleInfoWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

BOOL sub_1C514CDA4(uint64_t a1, uint64_t a2)
{
  void **v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  void (**v8)(void);
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = **(void ****)(a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::MachineModuleInfoWrapperPass::ID);
  v5 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::MachineModuleInfoWrapperPass::ID);
  v6 = *(_QWORD *)(a2 + 32);
  v10[0] = &off_1E8144858;
  v10[1] = v5 + 32;
  v11 = v10;
  v7 = llvm::applyDebugifyMetadata(a2, v6, a2 + 24, "ModuleDebugify: ", 0x10uLL, (uint64_t)v10);
  if (v11 == v10)
  {
    v8 = (void (**)(void))(v10[0] + 32);
    goto LABEL_7;
  }
  if (v11)
  {
    v8 = (void (**)(void))(*v11 + 40);
LABEL_7:
    (*v8)();
  }
  return v7;
}

void sub_1C514CE9C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C514CEB0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8144858;
  result[1] = v3;
  return result;
}

uint64_t sub_1C514CEE4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8144858;
  a2[1] = v2;
  return result;
}

BOOL sub_1C514CF00(uint64_t a1, int a2, Function *a3)
{
  uint64_t MachineFunction;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  Function **v12;
  Function *v13;
  Function **v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  Function *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t i;
  unsigned __int8 *Impl;
  unsigned __int8 **v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t *v44;
  unsigned __int16 *v45;
  int v46;
  uint64_t v47;
  unint64_t *v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  unint64_t *v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  int **v62;
  uint64_t v63;
  int *v64;
  Function **v65;
  uint64_t v66;
  uint64_t NamedMetadata;
  const llvm::APInt *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  llvm::ConstantInt *v72;
  unsigned int v73;
  unint64_t v74;
  llvm::Value *v75;
  llvm::ValueHandleBase *v76;
  unsigned __int8 *v77;
  const llvm::APInt *v78;
  uint64_t v79;
  llvm::ConstantInt *v80;
  unsigned int v81;
  unint64_t v82;
  llvm::Value *v83;
  llvm::ValueHandleBase *v84;
  unsigned __int8 *v85;
  const llvm::APInt *v86;
  uint64_t inserted;
  uint64_t v88;
  llvm::ConstantInt *v89;
  unsigned int v90;
  unint64_t v91;
  llvm::Value *v92;
  llvm::ValueHandleBase *v93;
  unsigned __int8 *v94;
  const llvm::APInt *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  unsigned __int8 **v99;
  uint64_t v100;
  llvm::ConstantInt *v101;
  unsigned int v102;
  unint64_t v103;
  llvm::Value *v104;
  llvm::ValueHandleBase *v105;
  unsigned __int8 *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 *v109;
  unsigned __int8 **v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t *v120;
  uint64_t v121;
  unsigned __int8 **v122;
  unint64_t *v123;
  uint64_t v124;
  _QWORD v125[4];
  int v126;
  Function *v127;
  Function *v128;
  uint64_t v129;
  int v130;
  _BYTE v131[128];
  uint64_t v132;
  uint64_t v133;
  int v134;
  unsigned __int8 *v135;
  char *v136;
  uint64_t v137;
  _WORD v138[16];
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  MachineFunction = llvm::MachineModuleInfo::getMachineFunction(*(llvm::MachineModuleInfo **)(a1 + 8), a3);
  v5 = MachineFunction;
  if (!MachineFunction)
    return v5 != 0;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(MachineFunction + 16) + 104))(*(_QWORD *)(MachineFunction + 16));
  v7 = ***(_QWORD ***)a3;
  v127 = a3;
  v8 = *(_DWORD *)(v7 + 2496);
  if (!v8)
  {
    v65 = 0;
LABEL_113:
    v12 = (Function **)sub_1C541AB24(v7 + 2480, (uint64_t)&v127, (uint64_t *)&v127, v65);
    v66 = (uint64_t)v127;
    v12[3] = 0;
    v12[4] = 0;
    *v12 = (Function *)v66;
    v12[1] = (Function *)(v12 + 3);
    v12[2] = (Function *)0x100000000;
    goto LABEL_12;
  }
  v9 = *(_QWORD *)(v7 + 2480);
  v10 = v8 - 1;
  v11 = v10 & ((a3 >> 4) ^ (a3 >> 9));
  v12 = (Function **)(v9 + 40 * v11);
  v13 = *v12;
  if (*v12 != a3)
  {
    v14 = 0;
    v15 = 1;
    while (v13 != (Function *)-4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == (Function *)-8192;
      if (v16)
        v14 = v12;
      v17 = v11 + v15++;
      v11 = v17 & v10;
      v12 = (Function **)(v9 + 40 * v11);
      v13 = *v12;
      if (*v12 == a3)
        goto LABEL_12;
    }
    if (v14)
      v65 = v14;
    else
      v65 = v12;
    goto LABEL_113;
  }
LABEL_12:
  v18 = v12[1];
  if (*(_DWORD *)v18)
  {
    v19 = 16 * *((unsigned int *)v12 + 4) - 16;
    do
    {
      v20 = *((_DWORD *)v18 + 4);
      v18 = (Function *)((char *)v18 + 16);
      v19 -= 16;
    }
    while (v20);
  }
  v21 = *((_QWORD *)v18 + 1);
  v112 = *((_QWORD *)a3 + 5);
  v113 = v5;
  v22 = *(uint64_t **)v112;
  v23 = *(_DWORD *)(v21 + 24);
  v24 = *(_QWORD *)(v5 + 328);
  v124 = v5 + 320;
  while (v24 != v124)
  {
    for (i = *(_QWORD *)(v24 + 56); i != v24 + 48; i = *(_QWORD *)(i + 8))
    {
      Impl = (unsigned __int8 *)llvm::DILocation::getImpl(v22, v23, 1u, v21, 0, 0, 0, 1);
      v135 = Impl;
      if (Impl)
        llvm::MetadataTracking::track((uint64_t)&v135, Impl, 2);
      v27 = (unsigned __int8 **)(i + 56);
      if (&v135 != (unsigned __int8 **)(i + 56))
      {
        if (*v27)
          llvm::MetadataTracking::untrack(i + 56, *v27);
        v28 = v135;
        *v27 = v135;
        if (v28)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v135, v28, i + 56);
          v135 = 0;
        }
LABEL_25:
        if ((*(_BYTE *)i & 4) != 0)
          goto LABEL_33;
        goto LABEL_32;
      }
      if (v135)
        llvm::MetadataTracking::untrack((uint64_t)&v135, v135);
      if (i)
        goto LABEL_25;
LABEL_32:
      while ((*(_WORD *)(i + 44) & 8) != 0)
        i = *(_QWORD *)(i + 8);
LABEL_33:
      ++v23;
    }
    v24 = *(_QWORD *)(v24 + 8);
  }
  v29 = sub_1C4FB7E80(*(uint64_t **)(v112 + 112), "llvm.dbg.value", 0xEuLL);
  if (!v29 || *(_BYTE *)(v29 + 16))
  {
    v132 = 0;
    v133 = 0;
    v134 = 0;
  }
  else
  {
    v132 = 0;
    v133 = 0;
    v134 = 0;
    v31 = *(_QWORD *)(v29 + 8);
    if (v31)
    {
      v114 = 0;
      v32 = 0;
      do
      {
        v33 = *(_QWORD *)(v31 + 24);
        v34 = sub_1C50A0300(v33);
        if (v33)
          v35 = !v34;
        else
          v35 = 1;
        if (!v35 && *(Function **)(*(_QWORD *)(v33 + 40) + 56) == a3)
        {
          v36 = *(_DWORD *)(*(_QWORD *)(v33 + 48) + 4);
          LODWORD(v127) = v36;
          v37 = *(_QWORD *)(*(_QWORD *)(v33 - 32 * (*(_DWORD *)(v33 + 20) & 0x7FFFFFF) + 32) + 24);
          *(_QWORD *)(sub_1C514D9B4((uint64_t)&v132, &v127) + 8) = v37;
          v38 = v114;
          if (!v114 || v36 < *(_DWORD *)(*(_QWORD *)(v114 + 48) + 4))
            v38 = v33;
          v114 = v38;
          v32 = *(_QWORD *)(*(_QWORD *)(v33 - 32 * (*(_DWORD *)(v33 + 20) & 0x7FFFFFF) + 64) + 24);
          v5 = v113;
        }
        v31 = *(_QWORD *)(v31 + 8);
      }
      while (v31);
      if ((_DWORD)v133)
      {
        v127 = (Function *)v131;
        v128 = (Function *)v131;
        v129 = 16;
        v130 = 0;
        v39 = *(_QWORD *)(v5 + 328);
        if (v39 != v124)
        {
          v111 = 0;
          v118 = *(_QWORD *)(v6 + 8) + 624;
          v115 = v32;
          while (1)
          {
            v119 = v39;
            v40 = v39 + 48;
            v41 = *(unint64_t **)(v39 + 56);
            if (v41 != (unint64_t *)(v39 + 48))
            {
              v42 = *(_QWORD *)(v39 + 56);
              while (!**(_WORD **)(v42 + 16) || **(_WORD **)(v42 + 16) == 69)
              {
                v42 = *(_QWORD *)(v42 + 8);
                if (v42 == v40)
                {
                  v42 = v39 + 48;
                  break;
                }
              }
              v116 = v42;
              v117 = v39 + 48;
              if (v41 != (unint64_t *)v40)
                break;
            }
LABEL_108:
            v39 = *(_QWORD *)(v119 + 8);
            if (v39 == v124)
              goto LABEL_114;
          }
          while (1)
          {
            if (!v41 || (v43 = v41, (*(_BYTE *)v41 & 4) == 0))
            {
              v43 = v41;
              if ((*((_WORD *)v41 + 22) & 8) != 0)
              {
                v43 = v41;
                do
                  v43 = (unint64_t *)v43[1];
                while ((*((_WORD *)v43 + 22) & 8) != 0);
              }
            }
            v44 = (unint64_t *)v43[1];
            v45 = (unsigned __int16 *)v41[2];
            v46 = *v45;
            if ((v46 - 13) < 5)
              goto LABEL_107;
            v47 = *((_QWORD *)v45 + 1);
            if ((*((_WORD *)v41 + 22) & 0xC) != 0 && (*((_WORD *)v41 + 22) & 4) == 0)
            {
              v56 = v41;
              if ((v47 & 0x200) == 0)
              {
                while ((*((_WORD *)v56 + 22) & 8) != 0)
                {
                  v56 = (unint64_t *)v56[1];
                  if ((*(_BYTE *)(v56[2] + 9) & 2) != 0)
                    goto LABEL_107;
                }
LABEL_75:
                if (v46 == 69 || v46 == 0)
                  v50 = (unint64_t *)v42;
                else
                  v50 = v44;
                v51 = *(_DWORD *)(v41[7] + 4);
                v126 = v51;
                if (v134)
                {
                  v52 = (v134 - 1) & (37 * v51);
                  v53 = *(_DWORD *)(v132 + 16 * v52);
                  if (v51 != v53)
                  {
                    v54 = 1;
                    while (v53 != -1)
                    {
                      v55 = v52 + v54++;
                      v52 = v55 & (v134 - 1);
                      v53 = *(_DWORD *)(v132 + 16 * v52);
                      if (v51 == v53)
                        goto LABEL_92;
                    }
                    goto LABEL_91;
                  }
                }
                else
                {
LABEL_91:
                  v126 = *(_DWORD *)(*(_QWORD *)(v114 + 48) + 4);
                }
LABEL_92:
                v122 = (unsigned __int8 **)(v41 + 7);
                v123 = v50;
                v120 = v44;
                v121 = *(_QWORD *)(sub_1C514D9B4((uint64_t)&v132, &v126) + 8);
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v127, v121);
                v136 = (char *)v138;
                v137 = 0x400000000;
                v57 = *((unsigned int *)v41 + 10);
                if (!(_DWORD)v57)
                  goto LABEL_63;
                v58 = 0;
                v59 = v41[4];
                v60 = 32 * v57;
                v61 = (_DWORD *)(v59 + 4);
                do
                {
                  if ((*(v61 - 1) & 0x10000FF) == 0x1000000 && *v61)
                  {
                    if (v58 >= HIDWORD(v137))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v136, (uint64_t)v138, v58 + 1, 8);
                      v58 = v137;
                    }
                    *(_QWORD *)&v136[8 * v58] = v59;
                    v58 = v137 + 1;
                    LODWORD(v137) = v137 + 1;
                  }
                  v59 += 32;
                  v61 += 8;
                  v60 -= 32;
                }
                while (v60);
                v32 = v115;
                if (!v58)
                  goto LABEL_63;
                v62 = (int **)v136;
                v63 = 8 * v58;
                do
                {
                  v64 = *v62++;
                  llvm::BuildMI(v119, v123, v122, v118, 0, v64, v121, v115);
                  v63 -= 8;
                }
                while (v63);
                v42 = v116;
                v40 = v117;
                if (!(_DWORD)v137)
                {
LABEL_63:
                  LODWORD(v125[0]) = 1;
                  v125[1] = 0;
                  v125[2] = v111;
                  llvm::BuildMI(v119, v123, v122, v118, 0, (int *)v125, v121, v32);
                  ++v111;
                }
                if (v136 != (char *)v138)
                  free(v136);
                v44 = v120;
              }
            }
            else if ((v47 & 0x200) == 0)
            {
              goto LABEL_75;
            }
LABEL_107:
            v41 = v44;
            if (v44 == (unint64_t *)v40)
              goto LABEL_108;
          }
        }
LABEL_114:
        v136 = "llvm.mir.debugify";
        v138[8] = 259;
        NamedMetadata = llvm::Module::getNamedMetadata(v112, (uint64_t)&v136);
        v69 = *v22;
        if (NamedMetadata)
        {
          v70 = NamedMetadata;
          v71 = v23 - 1;
          v72 = *(llvm::ConstantInt **)(v69 + 1960);
          v73 = *(_DWORD *)(v69 + 1968);
          LODWORD(v137) = v73 >> 8;
          if (v73 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v136, v71, 0);
          }
          else
          {
            if (v73 <= 0xFF)
              v74 = 0;
            else
              v74 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v73);
            v136 = (char *)(v74 & v71);
          }
          v76 = llvm::ConstantInt::get(v72, (llvm::LLVMContext *)&v136, v68);
          v5 = v113;
          if (v137 >= 0x41 && v136)
            MEMORY[0x1CAA32F9C](v136, 0x1000C8000313F17);
          v136 = (char *)llvm::ValueAsMetadata::get(v76, v75);
          v77 = (unsigned __int8 *)llvm::MDTuple::getImpl(v22, &v136, 1, 0, 1);
          sub_1C4FCE378(**(unsigned __int8 ****)(v70 + 48), v77);
          v79 = (HIDWORD(v129) - v130);
          v80 = *(llvm::ConstantInt **)(v69 + 1960);
          v81 = *(_DWORD *)(v69 + 1968);
          LODWORD(v137) = v81 >> 8;
          if (v81 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v136, v79, 0);
          }
          else
          {
            if (v81 <= 0xFF)
              v82 = 0;
            else
              v82 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v81);
            v136 = (char *)(v82 & v79);
          }
          v84 = llvm::ConstantInt::get(v80, (llvm::LLVMContext *)&v136, v78);
          if (v137 >= 0x41 && v136)
            MEMORY[0x1CAA32F9C](v136, 0x1000C8000313F17);
          v136 = (char *)llvm::ValueAsMetadata::get(v84, v83);
          v85 = (unsigned __int8 *)llvm::MDTuple::getImpl(v22, &v136, 1, 0, 1);
          sub_1C4FCE378((unsigned __int8 **)(**(_QWORD **)(v70 + 48) + 8), v85);
        }
        else
        {
          inserted = llvm::Module::getOrInsertNamedMetadata(v112, "llvm.mir.debugify", 0x11uLL);
          v88 = v23 - 1;
          v89 = *(llvm::ConstantInt **)(v69 + 1960);
          v90 = *(_DWORD *)(v69 + 1968);
          LODWORD(v137) = v90 >> 8;
          if (v90 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v136, v88, 0);
          }
          else
          {
            if (v90 <= 0xFF)
              v91 = 0;
            else
              v91 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v90);
            v136 = (char *)(v91 & v88);
          }
          v93 = llvm::ConstantInt::get(v89, (llvm::LLVMContext *)&v136, v86);
          v5 = v113;
          if (v137 >= 0x41 && v136)
            MEMORY[0x1CAA32F9C](v136, 0x1000C8000313F17);
          v125[0] = llvm::ValueAsMetadata::get(v93, v92);
          v94 = (unsigned __int8 *)llvm::MDTuple::getImpl(v22, v125, 1, 0, 1);
          v136 = (char *)v94;
          v96 = *(_QWORD *)(inserted + 48);
          v97 = *(unsigned int *)(v96 + 8);
          if (v97 >= *(_DWORD *)(v96 + 12))
          {
            sub_1C5419FD8(*(_QWORD *)(inserted + 48), (unsigned __int8 **)&v136);
          }
          else
          {
            v98 = v94;
            v99 = (unsigned __int8 **)(*(_QWORD *)v96 + 8 * v97);
            *v99 = v98;
            if (v98)
            {
              llvm::MetadataTracking::track((uint64_t)v99, v98, 2);
              LODWORD(v97) = *(_DWORD *)(v96 + 8);
            }
            *(_DWORD *)(v96 + 8) = v97 + 1;
          }
          v100 = (HIDWORD(v129) - v130);
          v101 = *(llvm::ConstantInt **)(v69 + 1960);
          v102 = *(_DWORD *)(v69 + 1968);
          LODWORD(v137) = v102 >> 8;
          if (v102 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v136, v100, 0);
          }
          else
          {
            if (v102 <= 0xFF)
              v103 = 0;
            else
              v103 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v102);
            v136 = (char *)(v103 & v100);
          }
          v105 = llvm::ConstantInt::get(v101, (llvm::LLVMContext *)&v136, v95);
          if (v137 >= 0x41 && v136)
            MEMORY[0x1CAA32F9C](v136, 0x1000C8000313F17);
          v125[0] = llvm::ValueAsMetadata::get(v105, v104);
          v106 = (unsigned __int8 *)llvm::MDTuple::getImpl(v22, v125, 1, 0, 1);
          v136 = (char *)v106;
          v107 = *(_QWORD *)(inserted + 48);
          v108 = *(unsigned int *)(v107 + 8);
          if (v108 >= *(_DWORD *)(v107 + 12))
          {
            sub_1C5419FD8(*(_QWORD *)(inserted + 48), (unsigned __int8 **)&v136);
          }
          else
          {
            v109 = v106;
            v110 = (unsigned __int8 **)(*(_QWORD *)v107 + 8 * v108);
            *v110 = v109;
            if (v109)
            {
              llvm::MetadataTracking::track((uint64_t)v110, v109, 2);
              LODWORD(v108) = *(_DWORD *)(v107 + 8);
            }
            *(_DWORD *)(v107 + 8) = v108 + 1;
          }
        }
        if (v128 != v127)
          free(v128);
      }
    }
  }
  MEMORY[0x1CAA32FB4](v132, 8);
  return v5 != 0;
}

uint64_t sub_1C514D9B4(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = (37 * *a2) & (v4 - 1);
    result = *(_QWORD *)a1 + 16 * v5;
    v7 = *(_DWORD *)result;
    if (*a2 == *(_DWORD *)result)
      return result;
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = result;
      v11 = v5 + v9++;
      v5 = v11 & (v4 - 1);
      result = *(_QWORD *)a1 + 16 * v5;
      v7 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result)
        return result;
    }
    if (v8)
      result = v8;
  }
  else
  {
    result = 0;
  }
  v12 = *(_DWORD *)(a1 + 8);
  if (4 * v12 + 4 >= 3 * v4)
  {
    sub_1C49F41C0((uint64_t *)a1, 2 * v4);
    v13 = *(_DWORD *)(a1 + 16);
    if (v13)
    {
      v14 = v13 - 1;
      v15 = (37 * *a2) & v14;
      result = *(_QWORD *)a1 + 16 * v15;
      v16 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result)
        goto LABEL_15;
      v17 = 0;
      v18 = 1;
      while (v16 != -1)
      {
        if (v17)
          v19 = 0;
        else
          v19 = v16 == -2;
        if (v19)
          v17 = result;
        v20 = v15 + v18++;
        v15 = v20 & v14;
        result = *(_QWORD *)a1 + 16 * v15;
        v16 = *(_DWORD *)result;
        if (*a2 == *(_DWORD *)result)
          goto LABEL_15;
      }
LABEL_45:
      if (v17)
        result = v17;
      goto LABEL_15;
    }
LABEL_44:
    result = 0;
    goto LABEL_15;
  }
  if (v4 + ~v12 - *(_DWORD *)(a1 + 12) <= v4 >> 3)
  {
    sub_1C49F41C0((uint64_t *)a1, v4);
    v21 = *(_DWORD *)(a1 + 16);
    if (v21)
    {
      v22 = v21 - 1;
      v23 = (37 * *a2) & v22;
      result = *(_QWORD *)a1 + 16 * v23;
      v24 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result)
        goto LABEL_15;
      v17 = 0;
      v25 = 1;
      while (v24 != -1)
      {
        if (v17)
          v26 = 0;
        else
          v26 = v24 == -2;
        if (v26)
          v17 = result;
        v27 = v23 + v25++;
        v23 = v27 & v22;
        result = *(_QWORD *)a1 + 16 * v23;
        v24 = *(_DWORD *)result;
        if (*a2 == *(_DWORD *)result)
          goto LABEL_15;
      }
      goto LABEL_45;
    }
    goto LABEL_44;
  }
LABEL_15:
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)result != -1)
    --*(_DWORD *)(a1 + 12);
  *(_DWORD *)result = *a2;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

uint64_t llvm::DominanceFrontierBase<llvm::MachineBasicBlock,false>::getRoots(uint64_t a1)
{
  return a1 + 24;
}

uint64_t llvm::DominanceFrontierBase<llvm::MachineBasicBlock,false>::getRoot(uint64_t a1)
{
  return **(_QWORD **)(a1 + 24);
}

uint64_t llvm::DominanceFrontierBase<llvm::MachineBasicBlock,false>::isPostDominator()
{
  return 0;
}

void llvm::DominanceFrontierBase<llvm::MachineBasicBlock,false>::releaseMemory(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)(a1 + 8);
  sub_1C61910D0(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *v2 = 0;
}

uint64_t llvm::DominanceFrontierBase<llvm::MachineBasicBlock,false>::begin(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t llvm::DominanceFrontierBase<llvm::MachineBasicBlock,false>::end(uint64_t a1)
{
  return a1 + 8;
}

{
  return a1 + 8;
}

_QWORD *llvm::DominanceFrontierBase<llvm::MachineBasicBlock,false>::find(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v4 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v2 || v5[4] > a2)
    return v2;
  return v5;
}

{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v4 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v2 || v5[4] > a2)
    return v2;
  return v5;
}

uint64_t **llvm::DominanceFrontierBase<llvm::MachineBasicBlock,false>::addBasicBlock(uint64_t **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t **v4;
  unint64_t v6;
  _QWORD *v7[3];

  v6 = a2;
  sub_1C514F0A8((uint64_t)v7, a3);
  v4 = sub_1C4E2AE54(a1, v6, (uint64_t)&v6);
  sub_1C47655E8((uint64_t)v7, v7[1]);
  return v4;
}

void llvm::DominanceFrontierBase<llvm::MachineBasicBlock,false>::removeBlock(uint64_t **a1, unint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;

  v4 = a1 + 1;
  v5 = *a1;
  if (*a1 != (uint64_t *)(a1 + 1))
  {
    do
    {
      sub_1C4E2AF50((uint64_t **)v5 + 5, a2);
      v6 = (uint64_t *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != (uint64_t *)v4);
  }
  sub_1C4E2B018(a1, a2);
}

uint64_t *llvm::DominanceFrontierBase<llvm::MachineBasicBlock,false>::addToFrontier(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1C4E2AF50((uint64_t **)(a2 + 40), a3);
}

uint64_t *llvm::DominanceFrontierBase<llvm::MachineBasicBlock,false>::removeFromFrontier(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1C4E2AF50((uint64_t **)(a2 + 40), a3);
}

BOOL llvm::DominanceFrontierBase<llvm::MachineBasicBlock,false>::compareDomSet(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  _BOOL8 v16;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;

  v20 = 0;
  v21 = 0;
  v19 = (uint64_t *)&v20;
  v4 = a3 + 1;
  v5 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 != a3 + 1)
  {
    do
    {
      v18 = (uint64_t *)v5[4];
      sub_1C47BC21C(&v19, (unint64_t *)&v18, &v18);
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  v11 = (_QWORD *)*a2;
  v10 = a2 + 1;
  v9 = v11;
  while (v9 != v10)
  {
    v12 = (_QWORD *)v9[1];
    v13 = v9;
    if (v12)
    {
      do
      {
        v14 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        v14 = (_QWORD *)v13[2];
        v8 = *v14 == (_QWORD)v13;
        v13 = v14;
      }
      while (!v8);
    }
    v15 = sub_1C4E2AF50(&v19, v9[4]);
    v9 = v14;
    if (!v15)
    {
      v16 = 1;
      goto LABEL_18;
    }
  }
  v16 = v21 != 0;
LABEL_18:
  sub_1C47655E8((uint64_t)&v19, v20);
  return v16;
}

{
  return __ZNK4llvm21DominanceFrontierBaseINS_17MachineBasicBlockELb0EE13compareDomSetERNSt3__13setIPS1_NS3_4lessIS5_EENS3_9allocatorIS5_EEEERKSA_(a1, a2, a3);
}

BOOL llvm::DominanceFrontierBase<llvm::MachineBasicBlock,false>::compare(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t *v8;
  _BOOL8 v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v20;
  _QWORD *v21[3];
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;

  v23 = 0;
  v24 = 0;
  v22 = (uint64_t *)&v23;
  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
    goto LABEL_9;
  do
  {
    v20 = v3[4];
    sub_1C514F0A8((uint64_t)v21, v3 + 5);
    sub_1C4E2AE54(&v22, v20, (uint64_t)&v20);
    sub_1C47655E8((uint64_t)v21, v21[1]);
    v5 = (_QWORD *)v3[1];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (_QWORD *)v3[2];
        v7 = *v6 == (_QWORD)v3;
        v3 = v6;
      }
      while (!v7);
    }
    v3 = v6;
  }
  while (v6 != v2);
  v8 = v22;
  if (v22 == (uint64_t *)&v23)
  {
LABEL_9:
    v9 = v24 != 0;
  }
  else
  {
    v10 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v11 = (_QWORD *)*v10;
      if (!*v10)
        break;
      v12 = v8[4];
      v13 = (_QWORD *)(a1 + 8);
      do
      {
        v14 = v11[4];
        v15 = v14 >= v12;
        if (v14 >= v12)
          v16 = v11;
        else
          v16 = v11 + 1;
        if (v15)
          v13 = v11;
        v11 = (_QWORD *)*v16;
      }
      while (*v16);
      if (v13 == v10
        || v13[4] > v12
        || llvm::DominanceFrontierBase<llvm::MachineBasicBlock,false>::compareDomSet(a1, v8 + 5, v13 + 5))
      {
        break;
      }
      v17 = (uint64_t *)v8[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (uint64_t *)v8[2];
          v7 = *v18 == (_QWORD)v8;
          v8 = v18;
        }
        while (!v7);
      }
      sub_1C4E2B018(&v22, v12);
      v8 = v18;
      if (v18 == (uint64_t *)&v23)
        goto LABEL_9;
    }
    v9 = 1;
  }
  sub_1C61910D0((uint64_t)&v22, v23);
  return v9;
}

llvm::raw_ostream *llvm::DominanceFrontierBase<llvm::MachineBasicBlock,false>::print(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  llvm::MachineBasicBlock *v9;
  _BYTE *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _BYTE *v15;
  _QWORD *v16;
  _QWORD *v17;

  v2 = (_QWORD *)((char *)result + 8);
  v3 = *(_QWORD **)result;
  if (*(llvm::raw_ostream **)result != (llvm::raw_ostream *)((char *)result + 8))
  {
    while (1)
    {
      v5 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v5 > 0x14uLL)
      {
        qmemcpy(v5, "  DomFrontier for BB ", 21);
        *((_QWORD *)this + 4) += 21;
      }
      else
      {
        llvm::raw_ostream::write(this, "  DomFrontier for BB ", 0x15uLL);
      }
      result = (llvm::raw_ostream *)v3[4];
      if (result)
      {
        result = llvm::MachineBasicBlock::printAsOperand(result, this);
      }
      else
      {
        v6 = (void *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v6 > 0xDuLL)
        {
          qmemcpy(v6, " <<exit node>>", 14);
          *((_QWORD *)this + 4) += 14;
        }
        else
        {
          result = llvm::raw_ostream::write(this, " <<exit node>>", 0xEuLL);
        }
      }
      v7 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v7) > 4)
      {
        *(_BYTE *)(v7 + 4) = 9;
        *(_DWORD *)v7 = 980642080;
        *((_QWORD *)this + 4) += 5;
      }
      else
      {
        result = llvm::raw_ostream::write(this, " is:\t", 5uLL);
      }
      v8 = (_QWORD *)v3[5];
      if (v8 != v3 + 6)
        break;
LABEL_24:
      v15 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v15 >= *((_QWORD *)this + 3))
      {
        result = llvm::raw_ostream::write(this, 10);
      }
      else
      {
        *((_QWORD *)this + 4) = v15 + 1;
        *v15 = 10;
      }
      v16 = (_QWORD *)v3[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v3[2];
          v14 = *v17 == (_QWORD)v3;
          v3 = v17;
        }
        while (!v14);
      }
      v3 = v17;
      if (v17 == v2)
        return result;
    }
    while (1)
    {
      v9 = (llvm::MachineBasicBlock *)v8[4];
      v10 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v10 >= *((_QWORD *)this + 3))
      {
        result = llvm::raw_ostream::write(this, 32);
        if (v9)
        {
LABEL_12:
          result = llvm::MachineBasicBlock::printAsOperand(v9, this);
          goto LABEL_16;
        }
      }
      else
      {
        *((_QWORD *)this + 4) = v10 + 1;
        *v10 = 32;
        if (v9)
          goto LABEL_12;
      }
      v11 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v11 > 0xCuLL)
      {
        qmemcpy(v11, "<<exit node>>", 13);
        *((_QWORD *)this + 4) += 13;
      }
      else
      {
        result = llvm::raw_ostream::write(this, "<<exit node>>", 0xDuLL);
      }
LABEL_16:
      v12 = (_QWORD *)v8[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v8[2];
          v14 = *v13 == (_QWORD)v8;
          v8 = v13;
        }
        while (!v14);
      }
      v8 = v13;
      if (v13 == v3 + 6)
        goto LABEL_24;
    }
  }
  return result;
}

{
  return __ZNK4llvm21DominanceFrontierBaseINS_17MachineBasicBlockELb0EE5printERNS_11raw_ostreamE(result, this);
}

llvm::raw_ostream *llvm::DominanceFrontierBase<llvm::MachineBasicBlock,false>::dump(llvm *a1)
{
  llvm *v2;

  v2 = llvm::dbgs(a1);
  return llvm::DominanceFrontierBase<llvm::MachineBasicBlock,false>::print(a1, v2);
}

uint64_t llvm::DominanceFrontierBase<llvm::MachineBasicBlock,true>::getRoots(uint64_t a1)
{
  return a1 + 24;
}

uint64_t llvm::DominanceFrontierBase<llvm::MachineBasicBlock,true>::getRoot(uint64_t a1)
{
  return **(_QWORD **)(a1 + 24);
}

uint64_t llvm::DominanceFrontierBase<llvm::MachineBasicBlock,true>::isPostDominator()
{
  return 1;
}

void llvm::DominanceFrontierBase<llvm::MachineBasicBlock,true>::releaseMemory(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)(a1 + 8);
  sub_1C61910D0(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *v2 = 0;
}

uint64_t llvm::DominanceFrontierBase<llvm::MachineBasicBlock,true>::begin(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t llvm::DominanceFrontierBase<llvm::MachineBasicBlock,true>::end(uint64_t a1)
{
  return a1 + 8;
}

{
  return a1 + 8;
}

_QWORD *llvm::DominanceFrontierBase<llvm::MachineBasicBlock,true>::find(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v4 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v2 || v5[4] > a2)
    return v2;
  return v5;
}

{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v4 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v2 || v5[4] > a2)
    return v2;
  return v5;
}

uint64_t **llvm::DominanceFrontierBase<llvm::MachineBasicBlock,true>::addBasicBlock(uint64_t **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t **v4;
  unint64_t v6;
  _QWORD *v7[3];

  v6 = a2;
  sub_1C514F0A8((uint64_t)v7, a3);
  v4 = sub_1C4E2AE54(a1, v6, (uint64_t)&v6);
  sub_1C47655E8((uint64_t)v7, v7[1]);
  return v4;
}

void llvm::DominanceFrontierBase<llvm::MachineBasicBlock,true>::removeBlock(uint64_t **a1, unint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;

  v4 = a1 + 1;
  v5 = *a1;
  if (*a1 != (uint64_t *)(a1 + 1))
  {
    do
    {
      sub_1C4E2AF50((uint64_t **)v5 + 5, a2);
      v6 = (uint64_t *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != (uint64_t *)v4);
  }
  sub_1C4E2B018(a1, a2);
}

uint64_t *llvm::DominanceFrontierBase<llvm::MachineBasicBlock,true>::addToFrontier(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1C4E2AF50((uint64_t **)(a2 + 40), a3);
}

uint64_t *llvm::DominanceFrontierBase<llvm::MachineBasicBlock,true>::removeFromFrontier(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1C4E2AF50((uint64_t **)(a2 + 40), a3);
}

BOOL llvm::DominanceFrontierBase<llvm::MachineBasicBlock,true>::compareDomSet(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  _BOOL8 v16;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;

  v20 = 0;
  v21 = 0;
  v19 = (uint64_t *)&v20;
  v4 = a3 + 1;
  v5 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 != a3 + 1)
  {
    do
    {
      v18 = (uint64_t *)v5[4];
      sub_1C47BC21C(&v19, (unint64_t *)&v18, &v18);
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  v11 = (_QWORD *)*a2;
  v10 = a2 + 1;
  v9 = v11;
  while (v9 != v10)
  {
    v12 = (_QWORD *)v9[1];
    v13 = v9;
    if (v12)
    {
      do
      {
        v14 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        v14 = (_QWORD *)v13[2];
        v8 = *v14 == (_QWORD)v13;
        v13 = v14;
      }
      while (!v8);
    }
    v15 = sub_1C4E2AF50(&v19, v9[4]);
    v9 = v14;
    if (!v15)
    {
      v16 = 1;
      goto LABEL_18;
    }
  }
  v16 = v21 != 0;
LABEL_18:
  sub_1C47655E8((uint64_t)&v19, v20);
  return v16;
}

{
  return __ZNK4llvm21DominanceFrontierBaseINS_17MachineBasicBlockELb1EE13compareDomSetERNSt3__13setIPS1_NS3_4lessIS5_EENS3_9allocatorIS5_EEEERKSA_(a1, a2, a3);
}

BOOL llvm::DominanceFrontierBase<llvm::MachineBasicBlock,true>::compare(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t *v8;
  _BOOL8 v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v20;
  _QWORD *v21[3];
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;

  v23 = 0;
  v24 = 0;
  v22 = (uint64_t *)&v23;
  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
    goto LABEL_9;
  do
  {
    v20 = v3[4];
    sub_1C514F0A8((uint64_t)v21, v3 + 5);
    sub_1C4E2AE54(&v22, v20, (uint64_t)&v20);
    sub_1C47655E8((uint64_t)v21, v21[1]);
    v5 = (_QWORD *)v3[1];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (_QWORD *)v3[2];
        v7 = *v6 == (_QWORD)v3;
        v3 = v6;
      }
      while (!v7);
    }
    v3 = v6;
  }
  while (v6 != v2);
  v8 = v22;
  if (v22 == (uint64_t *)&v23)
  {
LABEL_9:
    v9 = v24 != 0;
  }
  else
  {
    v10 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v11 = (_QWORD *)*v10;
      if (!*v10)
        break;
      v12 = v8[4];
      v13 = (_QWORD *)(a1 + 8);
      do
      {
        v14 = v11[4];
        v15 = v14 >= v12;
        if (v14 >= v12)
          v16 = v11;
        else
          v16 = v11 + 1;
        if (v15)
          v13 = v11;
        v11 = (_QWORD *)*v16;
      }
      while (*v16);
      if (v13 == v10
        || v13[4] > v12
        || llvm::DominanceFrontierBase<llvm::MachineBasicBlock,true>::compareDomSet(a1, v8 + 5, v13 + 5))
      {
        break;
      }
      v17 = (uint64_t *)v8[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (uint64_t *)v8[2];
          v7 = *v18 == (_QWORD)v8;
          v8 = v18;
        }
        while (!v7);
      }
      sub_1C4E2B018(&v22, v12);
      v8 = v18;
      if (v18 == (uint64_t *)&v23)
        goto LABEL_9;
    }
    v9 = 1;
  }
  sub_1C61910D0((uint64_t)&v22, v23);
  return v9;
}

llvm::raw_ostream *llvm::DominanceFrontierBase<llvm::MachineBasicBlock,true>::print(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  llvm::MachineBasicBlock *v9;
  _BYTE *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _BYTE *v15;
  _QWORD *v16;
  _QWORD *v17;

  v2 = (_QWORD *)((char *)result + 8);
  v3 = *(_QWORD **)result;
  if (*(llvm::raw_ostream **)result != (llvm::raw_ostream *)((char *)result + 8))
  {
    while (1)
    {
      v5 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v5 > 0x14uLL)
      {
        qmemcpy(v5, "  DomFrontier for BB ", 21);
        *((_QWORD *)this + 4) += 21;
      }
      else
      {
        llvm::raw_ostream::write(this, "  DomFrontier for BB ", 0x15uLL);
      }
      result = (llvm::raw_ostream *)v3[4];
      if (result)
      {
        result = llvm::MachineBasicBlock::printAsOperand(result, this);
      }
      else
      {
        v6 = (void *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v6 > 0xDuLL)
        {
          qmemcpy(v6, " <<exit node>>", 14);
          *((_QWORD *)this + 4) += 14;
        }
        else
        {
          result = llvm::raw_ostream::write(this, " <<exit node>>", 0xEuLL);
        }
      }
      v7 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v7) > 4)
      {
        *(_BYTE *)(v7 + 4) = 9;
        *(_DWORD *)v7 = 980642080;
        *((_QWORD *)this + 4) += 5;
      }
      else
      {
        result = llvm::raw_ostream::write(this, " is:\t", 5uLL);
      }
      v8 = (_QWORD *)v3[5];
      if (v8 != v3 + 6)
        break;
LABEL_24:
      v15 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v15 >= *((_QWORD *)this + 3))
      {
        result = llvm::raw_ostream::write(this, 10);
      }
      else
      {
        *((_QWORD *)this + 4) = v15 + 1;
        *v15 = 10;
      }
      v16 = (_QWORD *)v3[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v3[2];
          v14 = *v17 == (_QWORD)v3;
          v3 = v17;
        }
        while (!v14);
      }
      v3 = v17;
      if (v17 == v2)
        return result;
    }
    while (1)
    {
      v9 = (llvm::MachineBasicBlock *)v8[4];
      v10 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v10 >= *((_QWORD *)this + 3))
      {
        result = llvm::raw_ostream::write(this, 32);
        if (v9)
        {
LABEL_12:
          result = llvm::MachineBasicBlock::printAsOperand(v9, this);
          goto LABEL_16;
        }
      }
      else
      {
        *((_QWORD *)this + 4) = v10 + 1;
        *v10 = 32;
        if (v9)
          goto LABEL_12;
      }
      v11 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v11 > 0xCuLL)
      {
        qmemcpy(v11, "<<exit node>>", 13);
        *((_QWORD *)this + 4) += 13;
      }
      else
      {
        result = llvm::raw_ostream::write(this, "<<exit node>>", 0xDuLL);
      }
LABEL_16:
      v12 = (_QWORD *)v8[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v8[2];
          v14 = *v13 == (_QWORD)v8;
          v8 = v13;
        }
        while (!v14);
      }
      v8 = v13;
      if (v13 == v3 + 6)
        goto LABEL_24;
    }
  }
  return result;
}

{
  return __ZNK4llvm21DominanceFrontierBaseINS_17MachineBasicBlockELb1EE5printERNS_11raw_ostreamE(result, this);
}

llvm::raw_ostream *llvm::DominanceFrontierBase<llvm::MachineBasicBlock,true>::dump(llvm *a1)
{
  llvm *v2;

  v2 = llvm::dbgs(a1);
  return llvm::DominanceFrontierBase<llvm::MachineBasicBlock,true>::print(a1, v2);
}

uint64_t **llvm::ForwardDominanceFrontierBase<llvm::MachineBasicBlock>::analyze(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t *v14;

  v4 = **(_QWORD **)a2;
  *(_DWORD *)(a1 + 32) = 0;
  if (*(_DWORD *)(a1 + 36))
  {
    v5 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, a1 + 40, 1uLL, 8);
    v5 = *(unsigned int *)(a1 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 32);
  v6 = *(unsigned int *)(a2 + 40);
  if (!(_DWORD)v6)
    goto LABEL_12;
  v7 = **(_QWORD **)(a1 + 24);
  v8 = *(_QWORD *)(a2 + 24);
  LODWORD(v9) = ((v7 >> 4) ^ (v7 >> 9)) & (v6 - 1);
  v10 = (uint64_t *)(v8 + 16 * v9);
  v11 = *v10;
  if (v7 != *v10)
  {
    v12 = 1;
    while (v11 != -4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v6 - 1);
      v11 = *(_QWORD *)(v8 + 16 * v9);
      if (v7 == v11)
      {
        v10 = (uint64_t *)(v8 + 16 * v9);
        goto LABEL_10;
      }
    }
    goto LABEL_12;
  }
LABEL_10:
  if (v10 == (uint64_t *)(v8 + 16 * v6))
  {
LABEL_12:
    v14 = 0;
    return llvm::ForwardDominanceFrontierBase<llvm::MachineBasicBlock>::calculate((uint64_t **)a1, a2, v14);
  }
  v14 = (uint64_t *)v10[1];
  return llvm::ForwardDominanceFrontierBase<llvm::MachineBasicBlock>::calculate((uint64_t **)a1, a2, v14);
}

{
  return __ZN4llvm28ForwardDominanceFrontierBaseINS_17MachineBasicBlockEE7analyzeERNS_17DominatorTreeBaseIS1_Lb0EEE(a1, a2);
}

uint64_t **llvm::ForwardDominanceFrontierBase<llvm::MachineBasicBlock>::calculate(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  char *v36;
  __int128 v37;
  uint64_t *v38;
  uint64_t **v39;
  uint64_t **v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t **v46;
  uint64_t *v47;
  int v48;
  int v49;
  uint64_t *v50;
  BOOL v51;
  uint64_t *v53;
  uint64_t **v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t *v57;
  uint64_t **v58;
  uint64_t **v60;
  uint64_t v61;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  int v70;
  _BYTE v71[263];
  uint64_t *v72[2];

  v5 = *a3;
  v67 = v71;
  v68 = v71;
  v69 = 32;
  v70 = 0;
  v6 = (uint64_t *)operator new(0x20uLL);
  v7 = v6 + 4;
  *v6 = v5;
  v6[1] = 0;
  v6[2] = (uint64_t)a3;
  v6[3] = 0;
  v64 = (char *)(v6 + 4);
  while (1)
  {
    v66 = 0;
    v8 = *(v7 - 4);
    v65 = 0;
    v66 = v8;
    v65 = *(v7 - 3);
    v10 = *(v7 - 2);
    v9 = *(v7 - 1);
    v72[0] = &v66;
    v60 = sub_1C514F1E8(a1, (unint64_t *)&v66, (uint64_t)&std::piecewise_construct, (uint64_t ***)v72);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v67, v66);
    if (v11)
    {
      v12 = *(uint64_t ***)(v66 + 88);
      v13 = *(uint64_t ***)(v66 + 96);
      while (v12 != v13)
      {
        v72[0] = 0;
        v14 = *v12;
        v72[0] = *v12;
        v15 = *(_QWORD *)(a2 + 24);
        v16 = *(unsigned int *)(a2 + 40);
        if ((_DWORD)v16)
        {
          LODWORD(v17) = ((v14 >> 4) ^ (v14 >> 9)) & (v16 - 1);
          v18 = (uint64_t **)(v15 + 16 * v17);
          v19 = *v18;
          if (v14 == *v18)
            goto LABEL_12;
          v20 = 1;
          while (v19 != (uint64_t *)-4096)
          {
            v21 = v17 + v20++;
            v17 = v21 & (v16 - 1);
            v19 = *(uint64_t **)(v15 + 16 * v17);
            if (v14 == v19)
            {
              v18 = (uint64_t **)(v15 + 16 * v17);
              goto LABEL_12;
            }
          }
        }
        v18 = (uint64_t **)(v15 + 16 * v16);
LABEL_12:
        if (v18[1][1] != v10)
          sub_1C47BC21C(v60 + 5, (unint64_t *)v72, v72);
        ++v12;
      }
    }
    v61 = v9;
    v22 = *(unsigned int *)(v10 + 32);
    if ((_DWORD)v22)
    {
      v23 = 0;
      v63 = v10;
      v24 = *(uint64_t ***)(v10 + 24);
      v25 = &v24[v22];
      do
      {
        v26 = *v24;
        v27 = **v24;
        v28 = (char *)sub_1C477672C((uint64_t)&v67, v27);
        if (v68 == v67)
          v29 = (uint64_t *)((char *)&v69 + 4);
        else
          v29 = &v69;
        if (v28 == &v68[8 * *(unsigned int *)v29])
        {
          v30 = v66;
          if (v7 >= (uint64_t *)v64)
          {
            v31 = ((char *)v7 - (char *)v6) >> 5;
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 59)
              abort();
            if ((v64 - (char *)v6) >> 4 > v32)
              v32 = (v64 - (char *)v6) >> 4;
            if ((unint64_t)(v64 - (char *)v6) >= 0x7FFFFFFFFFFFFFE0)
              v33 = 0x7FFFFFFFFFFFFFFLL;
            else
              v33 = v32;
            if (v33)
            {
              if (v33 >> 59)
                sub_1C4764EE4();
              v34 = (char *)operator new(32 * v33);
            }
            else
            {
              v34 = 0;
            }
            v35 = (uint64_t *)&v34[32 * v31];
            *v35 = v27;
            v35[1] = v30;
            v35[2] = (uint64_t)v26;
            v35[3] = v63;
            if (v7 == v6)
            {
              v38 = v7;
              v6 = (uint64_t *)&v34[32 * v31];
            }
            else
            {
              v36 = &v34[32 * v31];
              do
              {
                v37 = *((_OWORD *)v7 - 1);
                *((_OWORD *)v36 - 2) = *((_OWORD *)v7 - 2);
                *((_OWORD *)v36 - 1) = v37;
                v36 -= 32;
                v7 -= 4;
              }
              while (v7 != v6);
              v38 = v6;
              v6 = (uint64_t *)v36;
            }
            v64 = &v34[32 * v33];
            v7 = v35 + 4;
            if (v38)
              operator delete(v38);
          }
          else
          {
            *v7 = v27;
            v7[1] = v30;
            v7[2] = (uint64_t)v26;
            v7[3] = v63;
            v7 += 4;
          }
          v23 = 1;
        }
        ++v24;
      }
      while (v24 != v25);
      if ((v23 & 1) != 0)
        goto LABEL_83;
    }
    if (!v65)
      break;
    v39 = (uint64_t **)v60[5];
    v72[0] = (uint64_t *)&v65;
    v40 = sub_1C514F1E8(a1, &v65, (uint64_t)&std::piecewise_construct, (uint64_t ***)v72);
    if (v39 != v60 + 6)
    {
      v41 = v40 + 5;
      while (1)
      {
        v42 = v39[4];
        v43 = *(unsigned int *)(a2 + 40);
        if (!(_DWORD)v43)
          goto LABEL_61;
        v44 = *(_QWORD *)(a2 + 24);
        LODWORD(v45) = ((v42 >> 4) ^ (v42 >> 9)) & (v43 - 1);
        v46 = (uint64_t **)(v44 + 16 * v45);
        v47 = *v46;
        if (v42 != *v46)
          break;
LABEL_52:
        if (v46 == (uint64_t **)(v44 + 16 * v43))
          goto LABEL_61;
        v50 = v46[1];
        v51 = (uint64_t *)v61 == v50 || v61 == 0;
        if (v51 || v50 == 0)
          goto LABEL_61;
        if (v50[1] == v61)
          goto LABEL_62;
        if (*(uint64_t **)(v61 + 8) == v50)
          goto LABEL_61;
        v55 = *(_DWORD *)(v61 + 16);
        if (v55 >= *((_DWORD *)v50 + 4))
          goto LABEL_61;
        if (!*(_BYTE *)(a2 + 64))
        {
          v56 = *(_DWORD *)(a2 + 68) + 1;
          *(_DWORD *)(a2 + 68) = v56;
          if (v56 <= 0x20)
          {
            do
            {
              v57 = v50;
              v50 = (uint64_t *)v50[1];
            }
            while (v50 && *((_DWORD *)v50 + 4) >= v55);
            if (v57 == (uint64_t *)v61)
              goto LABEL_62;
            goto LABEL_61;
          }
          llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::updateDFSNumbers(a2);
        }
        if (*((_DWORD *)v50 + 18) < *(_DWORD *)(v61 + 72) || *((_DWORD *)v50 + 19) > *(_DWORD *)(v61 + 76))
          goto LABEL_61;
LABEL_62:
        v53 = v39[1];
        if (v53)
        {
          do
          {
            v54 = (uint64_t **)v53;
            v53 = (uint64_t *)*v53;
          }
          while (v53);
        }
        else
        {
          do
          {
            v54 = (uint64_t **)v39[2];
            v51 = *v54 == (uint64_t *)v39;
            v39 = v54;
          }
          while (!v51);
        }
        v39 = v54;
        if (v54 == v60 + 6)
          goto LABEL_82;
      }
      v48 = 1;
      while (v47 != (uint64_t *)-4096)
      {
        v49 = v45 + v48++;
        v45 = v49 & (v43 - 1);
        v47 = *(uint64_t **)(v44 + 16 * v45);
        if (v42 == v47)
        {
          v46 = (uint64_t **)(v44 + 16 * v45);
          goto LABEL_52;
        }
      }
LABEL_61:
      sub_1C47BC21C(v41, (unint64_t *)v39 + 4, v39 + 4);
      goto LABEL_62;
    }
LABEL_82:
    v7 -= 4;
LABEL_83:
    if (v6 == v7)
    {
      v58 = 0;
      goto LABEL_86;
    }
  }
  v58 = v60 + 5;
LABEL_86:
  if (v68 != v67)
    free(v68);
  if (v6)
    operator delete(v6);
  return v58;
}

{
  return __ZN4llvm28ForwardDominanceFrontierBaseINS_17MachineBasicBlockEE9calculateERKNS_17DominatorTreeBaseIS1_Lb0EEEPKNS_15DomTreeNodeBaseIS1_EE(a1, a2, a3);
}

uint64_t sub_1C514F00C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeMachineDominatorTreePass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Machine Dominance Frontier Construction";
  *(_QWORD *)(v2 + 8) = 39;
  *(_QWORD *)(v2 + 16) = "machine-domfrontier";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &llvm::MachineDominanceFrontier::ID;
  *(_WORD *)(v2 + 40) = 257;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::MachineDominanceFrontier>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C514F0A8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      sub_1C514F13C((_QWORD **)a1, v3, v5 + 4, v5 + 4);
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

uint64_t *sub_1C514F13C(_QWORD **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v13;
  uint64_t v14;

  v6 = (uint64_t **)sub_1C4FCDC00(a1, a2, &v14, &v13, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    v9 = v14;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v8 = v7;
    v10 = (_QWORD *)**a1;
    v11 = v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v8;
    }
    sub_1C4768E74(a1[1], v11);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t **sub_1C514F1E8(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t ***a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)v9;
    v9 = (uint64_t **)operator new(0x40uLL);
    v12 = **a4;
    v9[7] = 0;
    v9[6] = 0;
    v9[4] = v12;
    v9[5] = (uint64_t *)(v9 + 6);
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    *v7 = (uint64_t *)v9;
    v13 = (uint64_t *)**a1;
    v14 = (uint64_t *)v9;
    if (v13)
    {
      *a1 = v13;
      v14 = *v7;
    }
    sub_1C4768E74(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v9;
}

double llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::DomTreeNodeBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if (a3)
    v3 = *(_DWORD *)(a3 + 16) + 1;
  else
    v3 = 0;
  *(_DWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 0x400000000;
  result = NAN;
  *(_QWORD *)(a1 + 72) = -1;
  return result;
}

{
  int v3;
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if (a3)
    v3 = *(_DWORD *)(a3 + 16) + 1;
  else
    v3 = 0;
  *(_DWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 0x400000000;
  result = NAN;
  *(_QWORD *)(a1 + 72) = -1;
  return result;
}

uint64_t llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::begin(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

{
  return *(_QWORD *)(a1 + 24);
}

uint64_t llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::end(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) + 8 * *(unsigned int *)(a1 + 32);
}

{
  return *(_QWORD *)(a1 + 24) + 8 * *(unsigned int *)(a1 + 32);
}

uint64_t llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::back(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) + 8 * *(unsigned int *)(a1 + 32) - 8;
}

{
  return *(_QWORD *)(a1 + 24) + 8 * *(unsigned int *)(a1 + 32) - 8;
}

uint64_t llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::children(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

{
  return *(_QWORD *)(a1 + 24);
}

uint64_t llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::getBlock(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::getIDom(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::getLevel(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

_DWORD *llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::addChild@<X0>(_DWORD *result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = result;
  v6 = *a2;
  v7 = result[8];
  if (v7 >= result[9])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(result + 6), (uint64_t)(result + 10), v7 + 1, 8);
    LODWORD(v7) = v4[8];
  }
  *(_QWORD *)(*((_QWORD *)v4 + 3) + 8 * v7) = v6;
  ++v4[8];
  v8 = *a2;
  *a2 = 0;
  *a3 = v8;
  return result;
}

BOOL llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::isLeaf(uint64_t a1)
{
  return *(_DWORD *)(a1 + 32) == 0;
}

uint64_t llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::getNumChildren(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::clearAllChildren(uint64_t result)
{
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::compare(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t *v14;
  _QWORD *v15;
  _BOOL8 v16;
  BOOL v17;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];

  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 32) || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
    return 1;
  v19 = v23;
  v20 = v23;
  v21 = 4;
  v22 = 0;
  if (!(_DWORD)v2)
    return 0;
  v4 = *(uint64_t ***)(a2 + 24);
  v5 = 8 * v2;
  do
  {
    v6 = *v4++;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v19, *v6);
    v5 -= 8;
  }
  while (v5);
  v7 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t ***)(a1 + 24);
    v9 = 8 * v7 - 8;
    do
    {
      v10 = *v8++;
      v11 = sub_1C477672C((uint64_t)&v19, *v10);
      v13 = v19;
      v12 = v20;
      v14 = (uint64_t *)((char *)&v21 + 4);
      if (v20 != v19)
        v14 = &v21;
      v15 = &v20[8 * *(unsigned int *)v14];
      v16 = v11 == v15;
      v17 = v11 == v15 || v9 == 0;
      v9 -= 8;
    }
    while (!v17);
  }
  else
  {
    v16 = 0;
    v13 = v19;
    v12 = v20;
  }
  if (v12 != v13)
    free(v12);
  return v16;
}

{
  return __ZNK4llvm15DomTreeNodeBaseINS_17MachineBasicBlockEE7compareEPKS2_(a1, a2);
}

uint64_t llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::getDFSNumIn(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::getDFSNumOut(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

BOOL llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::DominatedBy(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 72) >= *(_DWORD *)(a2 + 72) && *(_DWORD *)(a1 + 76) <= *(_DWORD *)(a2 + 76);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::DominatorTreeBase(uint64_t a1, uint64_t a2)
{
  void *v4;
  unsigned int v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v13;
  uint64_t v14;

  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x100000000;
  if (a1 != a2)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (v5)
    {
      v6 = *(const void **)a2;
      if (*(_QWORD *)a2 != a2 + 16)
      {
        *(_QWORD *)a1 = v6;
        v13 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 8) = v5;
        *(_DWORD *)(a1 + 12) = v13;
        *(_QWORD *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
        goto LABEL_8;
      }
      if (v5 >= 2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, *(unsigned int *)(a2 + 8), 8);
        v14 = *(unsigned int *)(a2 + 8);
        if (!(_DWORD)v14)
          goto LABEL_7;
        v6 = *(const void **)a2;
        v4 = *(void **)a1;
        v7 = 8 * v14;
      }
      else
      {
        v7 = 8;
      }
      memcpy(v4, v6, v7);
LABEL_7:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_8:
      *(_DWORD *)(a2 + 8) = 0;
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  v9 = *(_QWORD *)(a2 + 24);
  v8 = a2 + 24;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)v8 = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v8 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 12);
  *(_DWORD *)(v8 + 12) = v10;
  v11 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 16);
  *(_DWORD *)(v8 + 16) = v11;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v8 + 24);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(v8 + 40);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(v8 + 44);
  sub_1C4EF5C94((uint64_t *)v8);
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  return a1;
}

{
  return __ZN4llvm17DominatorTreeBaseINS_17MachineBasicBlockELb0EEC2EOS2_(a1, a2);
}

uint64_t *llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::wipe(uint64_t *a1)
{
  uint64_t *result;

  result = sub_1C4EF5C94(a1 + 3);
  a1[6] = 0;
  a1[7] = 0;
  return result;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = *(const void **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v11 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v11);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v6 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = a2 + 16;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_10;
    }
    v6 = (_DWORD *)(a2 + 8);
    v5 = *(unsigned int *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v5)
    {
      if ((_DWORD)v5)
        memmove(*(void **)a1, v4, 8 * v5);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 8);
    }
    else if ((_DWORD)v7)
    {
      v12 = *(unsigned int *)(a1 + 8);
      memmove(*(void **)a1, v4, 8 * v7);
      v8 = v12;
LABEL_7:
      v9 = *v6;
      if (v8 != v9)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v8), (const void *)(*(_QWORD *)a2 + 8 * v8), *(_QWORD *)a2 + 8 * v9 - (*(_QWORD *)a2 + 8 * v8));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_10:
      *v6 = 0;
      goto LABEL_11;
    }
    v8 = 0;
    goto LABEL_7;
  }
LABEL_11:
  sub_1C514F874((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  sub_1C4EF5C94((uint64_t *)(a2 + 24));
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return a1;
}

uint64_t *sub_1C514F874(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  int v9;

  v4 = *((unsigned int *)a1 + 4);
  v5 = *a1;
  if ((_DWORD)v4)
  {
    v6 = 16 * v4;
    v7 = (uint64_t *)(v5 + 8);
    do
    {
      if ((*(v7 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v7 = sub_1C48680A4(v7);
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
    v5 = *a1;
  }
  MEMORY[0x1CAA32FB4](v5, 8);
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = 0;
  *a1 = *a2;
  *a2 = 0;
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  v8 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v8;
  v9 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v9;
  return a1;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::root_begin(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::root_end(uint64_t a1)
{
  return *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8);
}

{
  return *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::root_size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::roots(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::isPostDominator()
{
  return 0;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::compare(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  _QWORD *v19;
  uint64_t result;

  if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
    return 1;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 != *(_DWORD *)(a2 + 8))
    return 1;
  if (!sub_1C5151CDC(*(char **)a1, (char *)(*(_QWORD *)a1 + 8 * v4), *(_QWORD **)a2))
    return 1;
  v5 = *(_DWORD *)(a1 + 32);
  if (v5 != *(_DWORD *)(a2 + 32))
    return 1;
  v6 = *(_QWORD **)(a1 + 24);
  v7 = *(unsigned int *)(a1 + 40);
  v8 = &v6[2 * v7];
  if (v5)
  {
    if ((_DWORD)v7)
    {
      v9 = 16 * v7;
      v10 = v6;
      while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v10 += 2;
        v9 -= 16;
        if (!v9)
          goto LABEL_10;
      }
    }
    else
    {
      v10 = v6;
    }
  }
  else
  {
LABEL_10:
    v10 = &v6[2 * v7];
  }
  v11 = &v6[2 * v7];
  if (v10 != v11)
  {
    while (1)
    {
      v12 = *(_QWORD *)(a2 + 24);
      v13 = *(unsigned int *)(a2 + 40);
      if ((_DWORD)v13)
      {
        LODWORD(v14) = ((*v10 >> 4) ^ (*v10 >> 9)) & (v13 - 1);
        v15 = (uint64_t *)(v12 + 16 * v14);
        v16 = *v15;
        if (*v10 == *v15)
          goto LABEL_20;
        v17 = 1;
        while (v16 != -4096)
        {
          v18 = v14 + v17++;
          v14 = v18 & (v13 - 1);
          v16 = *(_QWORD *)(v12 + 16 * v14);
          if (*v10 == v16)
          {
            v15 = (uint64_t *)(v12 + 16 * v14);
            goto LABEL_20;
          }
        }
      }
      v15 = (uint64_t *)(v12 + 16 * v13);
LABEL_20:
      if (v15 == (uint64_t *)(v12 + 16 * v13)
        || (llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::compare(v10[1], v15[1]) & 1) != 0)
      {
        return 1;
      }
      v19 = v10 + 2;
      v10 = v8;
      if (v19 != v8)
      {
        v10 = v19;
        while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v10 += 2;
          if (v10 == v8)
          {
            v10 = v8;
            break;
          }
        }
      }
      result = 0;
      if (v10 == v11)
        return result;
    }
  }
  return 0;
}

{
  return __ZNK4llvm17DominatorTreeBaseINS_17MachineBasicBlockELb0EE7compareERKS2_(a1, a2);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::getNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_3;
    v8 = 1;
    while (v6 != -4096)
    {
      v9 = v4 + v8++;
      v4 = v9 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_3;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_3:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    return 0;
  else
    return v5[1];
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    return 0;
  else
    return v5[1];
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::getRootNode(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

{
  return *(_QWORD *)(a1 + 48);
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::getDescendants(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  unsigned int v17;
  int v18;
  _QWORD v19[9];

  v19[8] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a3 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v5)
  {
LABEL_7:
    v7 = (uint64_t *)(v4 + 16 * v5);
    goto LABEL_8;
  }
  LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (uint64_t *)(v4 + 16 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(_QWORD *)(v4 + 16 * v6);
      if (v8 == a2)
      {
        v7 = (uint64_t *)(v4 + 16 * v6);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v7 != (uint64_t *)(v4 + 16 * v5))
  {
    v11 = v7[1];
    if (v11)
    {
      v16 = v19;
      v18 = 8;
      v19[0] = v11;
      v12 = 1;
      do
      {
        v13 = (uint64_t *)*((_QWORD *)v16 + v12 - 1);
        v17 = v12 - 1;
        v14 = *v13;
        v15 = *(unsigned int *)(a3 + 8);
        if (v15 >= *(unsigned int *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
          v15 = *(unsigned int *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
        ++*(_DWORD *)(a3 + 8);
        sub_1C6177054((unsigned int *)&v16, (char *)v13[3], (char *)(v13[3] + 8 * *((unsigned int *)v13 + 8)));
        v12 = v17;
      }
      while (v17);
      if (v16 != v19)
        free(v16);
    }
  }
}

{
  __ZNK4llvm17DominatorTreeBaseINS_17MachineBasicBlockELb0EE14getDescendantsEPS1_RNS_15SmallVectorImplIS3_EE(a1, a2, a3);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  result = 0;
  if (a2 != a3)
  {
    if (a2)
    {
      v6 = a3;
      if (a3)
      {
        if (*(_QWORD *)(a3 + 8) == a2)
        {
          return 1;
        }
        else
        {
          if (*(_QWORD *)(a2 + 8) == a3)
            return 0;
          v7 = *(_DWORD *)(a2 + 16);
          if (v7 >= *(_DWORD *)(a3 + 16))
            return 0;
          if (*(_BYTE *)(a1 + 64))
          {
LABEL_8:
            if (*(_DWORD *)(v6 + 72) >= *(_DWORD *)(a2 + 72))
              return *(_DWORD *)(v6 + 76) <= *(_DWORD *)(a2 + 76);
            return 0;
          }
          v8 = *(_DWORD *)(a1 + 68) + 1;
          *(_DWORD *)(a1 + 68) = v8;
          if (v8 > 0x20)
          {
            llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::updateDFSNumbers(a1);
            goto LABEL_8;
          }
          do
          {
            v9 = v6;
            v6 = *(_QWORD *)(v6 + 8);
          }
          while (v6 && *(_DWORD *)(v6 + 16) >= v7);
          return v9 == a2;
        }
      }
    }
  }
  return result;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BOOL4 v6;
  unsigned int v8;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v3 = a3;
  v6 = a3 != a2 && a3 != 0;
  if (!v6 || a2 == 0)
  {
    if (v6)
    {
      if (!a2)
        return 0;
      if (*(_QWORD *)(a3 + 8) != a2)
      {
        if (*(_QWORD *)(a2 + 8) != a3)
        {
          v12 = *(_DWORD *)(a2 + 16);
          if (v12 < *(_DWORD *)(a3 + 16))
          {
            if (*(_BYTE *)(a1 + 64))
              goto LABEL_15;
            v13 = *(_DWORD *)(a1 + 68) + 1;
            *(_DWORD *)(a1 + 68) = v13;
            if (v13 <= 0x20)
            {
              do
              {
                v11 = v3;
                v3 = *(_QWORD *)(v3 + 8);
              }
              while (v3 && *(_DWORD *)(v3 + 16) >= v12);
              return v11 == a2;
            }
LABEL_33:
            llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::updateDFSNumbers(a1);
LABEL_15:
            if (*(_DWORD *)(v3 + 72) >= *(_DWORD *)(a2 + 72))
              return *(_DWORD *)(v3 + 76) <= *(_DWORD *)(a2 + 76);
          }
        }
        return 0;
      }
    }
  }
  else if (*(_QWORD *)(a3 + 8) != a2)
  {
    if (*(_QWORD *)(a2 + 8) != a3)
    {
      v8 = *(_DWORD *)(a2 + 16);
      if (v8 < *(_DWORD *)(a3 + 16))
      {
        if (*(_BYTE *)(a1 + 64))
          goto LABEL_15;
        v10 = *(_DWORD *)(a1 + 68) + 1;
        *(_DWORD *)(a1 + 68) = v10;
        if (v10 <= 0x20)
        {
          do
          {
            v11 = v3;
            v3 = *(_QWORD *)(v3 + 8);
          }
          while (v3 && *(_DWORD *)(v3 + 16) >= v8);
          return v11 == a2;
        }
        goto LABEL_33;
      }
    }
    return 0;
  }
  return 1;
}

BOOL llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;

  if (a2 == a3)
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t *)(v3 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_10;
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(_QWORD *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_10;
      }
    }
  }
  v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_10:
  v11 = (uint64_t *)(v3 + 16 * v4);
  if (v6 == v11)
  {
    v12 = 0;
    if (!(_DWORD)v4)
      return 1;
  }
  else
  {
    v12 = v6[1];
    if (!(_DWORD)v4)
      return 1;
  }
  v13 = v4 - 1;
  LODWORD(v4) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v14 = (uint64_t *)(v3 + 16 * v4);
  v15 = *v14;
  if (*v14 != a3)
  {
    v16 = 1;
    while (v15 != -4096)
    {
      v17 = v4 + v16++;
      v4 = v17 & v13;
      v15 = *(_QWORD *)(v3 + 16 * v4);
      if (v15 == a3)
      {
        v14 = (uint64_t *)(v3 + 16 * v4);
        goto LABEL_19;
      }
    }
    return 1;
  }
LABEL_19:
  if (v14 == v11)
    return 1;
  v18 = v14[1];
  if (v18 == v12 || v18 == 0)
    return 1;
  if (!v12)
    return 0;
  if (*(_QWORD *)(v18 + 8) == v12)
    return 1;
  if (*(_QWORD *)(v12 + 8) == v18)
    return 0;
  v20 = *(_DWORD *)(v12 + 16);
  if (v20 >= *(_DWORD *)(v18 + 16))
    return 0;
  if (*(_BYTE *)(a1 + 64))
    goto LABEL_29;
  v21 = *(_DWORD *)(a1 + 68) + 1;
  *(_DWORD *)(a1 + 68) = v21;
  if (v21 > 0x20)
  {
    llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::updateDFSNumbers(a1);
LABEL_29:
    if (*(_DWORD *)(v18 + 72) >= *(_DWORD *)(v12 + 72))
      return *(_DWORD *)(v18 + 76) <= *(_DWORD *)(v12 + 76);
    return 0;
  }
  do
  {
    v22 = v18;
    v18 = *(_QWORD *)(v18 + 8);
  }
  while (v18 && *(_DWORD *)(v18 + 16) >= v20);
  return v22 == v12;
}

{
  return __ZNK4llvm17DominatorTreeBaseINS_17MachineBasicBlockELb0EE17properlyDominatesEPKS1_S4_(a1, a2, a3);
}

BOOL llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::isReachableFromEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      return v5 != (uint64_t *)(v2 + 16 * v3) && v5[1] != 0;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        return v5 != (uint64_t *)(v2 + 16 * v3) && v5[1] != 0;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
  return v5 != (uint64_t *)(v2 + 16 * v3) && v5[1] != 0;
}

{
  return a2 != 0;
}

{
  return __ZNK4llvm17DominatorTreeBaseINS_17MachineBasicBlockELb0EE20isReachableFromEntryEPKS1_(a1, a2);
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::updateDFSNumbers(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD v18[65];

  v18[64] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 64))
  {
    *(_DWORD *)(a1 + 68) = 0;
  }
  else
  {
    v15 = v18;
    v17 = 32;
    v2 = *(_QWORD *)(a1 + 48);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      v18[0] = *(_QWORD *)(a1 + 48);
      v18[1] = v3;
      v4 = 1;
      v16 = 1;
      *(_DWORD *)(v2 + 72) = 0;
      v5 = 1;
      do
      {
        v6 = (char *)v15;
        v7 = v5;
        v8 = (char *)v15 + 16 * v5;
        v10 = *((_QWORD *)v8 - 2);
        v9 = (uint64_t *)*((_QWORD *)v8 - 1);
        if (v9 == (uint64_t *)(*(_QWORD *)(v10 + 24) + 8 * *(unsigned int *)(v10 + 32)))
        {
          *(_DWORD *)(v10 + 76) = v4;
          v5 = v7 - 1;
          v16 = v7 - 1;
        }
        else
        {
          v11 = *v9;
          *((_QWORD *)v8 - 1) = v9 + 1;
          v12 = *(_QWORD *)(v11 + 24);
          if (v7 >= v17)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, (uint64_t)v18, v7 + 1, 16);
            v6 = (char *)v15;
            v7 = v16;
          }
          v13 = &v6[16 * v7];
          *(_QWORD *)v13 = v11;
          *((_QWORD *)v13 + 1) = v12;
          v5 = ++v16;
          *(_DWORD *)(v11 + 72) = v4;
        }
        ++v4;
      }
      while (v5);
      v14 = v15;
      *(_DWORD *)(a1 + 68) = 0;
      *(_BYTE *)(a1 + 64) = 1;
      if (v14 != v18)
        free(v14);
    }
  }
}

{
  __ZNK4llvm17DominatorTreeBaseINS_17MachineBasicBlockELb0EE16updateDFSNumbersEv(a1);
}

BOOL llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominatedBySlowTreeWalk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  do
  {
    v3 = a3;
    a3 = *(_QWORD *)(a3 + 8);
  }
  while (a3 && *(_DWORD *)(a3 + 16) >= *(_DWORD *)(a2 + 16));
  return v3 == a2;
}

BOOL llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;

  if (a2 == a3)
    return 1;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t *)(v3 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_10;
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(_QWORD *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_10;
      }
    }
  }
  v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_10:
  v11 = (uint64_t *)(v3 + 16 * v4);
  if (v6 == v11)
  {
    v12 = 0;
    if (!(_DWORD)v4)
      return 1;
  }
  else
  {
    v12 = v6[1];
    if (!(_DWORD)v4)
      return 1;
  }
  v13 = v4 - 1;
  LODWORD(v4) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v14 = (uint64_t *)(v3 + 16 * v4);
  v15 = *v14;
  if (*v14 != a3)
  {
    v16 = 1;
    while (v15 != -4096)
    {
      v17 = v4 + v16++;
      v4 = v17 & v13;
      v15 = *(_QWORD *)(v3 + 16 * v4);
      if (v15 == a3)
      {
        v14 = (uint64_t *)(v3 + 16 * v4);
        goto LABEL_19;
      }
    }
    return 1;
  }
LABEL_19:
  if (v14 == v11)
    return 1;
  v18 = v14[1];
  if (v18 == v12 || v18 == 0)
    return 1;
  if (!v12)
    return 0;
  if (*(_QWORD *)(v18 + 8) == v12)
    return 1;
  if (*(_QWORD *)(v12 + 8) == v18)
    return 0;
  v20 = *(_DWORD *)(v12 + 16);
  if (v20 >= *(_DWORD *)(v18 + 16))
    return 0;
  if (*(_BYTE *)(a1 + 64))
    goto LABEL_29;
  v21 = *(_DWORD *)(a1 + 68) + 1;
  *(_DWORD *)(a1 + 68) = v21;
  if (v21 > 0x20)
  {
    llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::updateDFSNumbers(a1);
LABEL_29:
    if (*(_DWORD *)(v18 + 72) >= *(_DWORD *)(v12 + 72))
      return *(_DWORD *)(v18 + 76) <= *(_DWORD *)(v12 + 76);
    return 0;
  }
  do
  {
    v22 = v18;
    v18 = *(_QWORD *)(v18 + 8);
  }
  while (v18 && *(_DWORD *)(v18 + 16) >= v20);
  return v22 == v12;
}

{
  return __ZNK4llvm17DominatorTreeBaseINS_17MachineBasicBlockELb0EE9dominatesEPKS1_S4_(a1, a2, a3);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::getRoot(uint64_t a1)
{
  return **(_QWORD **)a1;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t *v12;
  _DWORD *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  _DWORD *v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  _DWORD *v23;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 328);
  if (v3 == a2 || v3 == a3)
    return v3;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v8 = (uint64_t *)(v5 + 16 * v7);
    v9 = *v8;
    if (*v8 == a2)
      goto LABEL_12;
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(_QWORD *)(v5 + 16 * v7);
      if (v9 == a2)
      {
        v8 = (uint64_t *)(v5 + 16 * v7);
        goto LABEL_12;
      }
    }
  }
  v8 = (uint64_t *)(v5 + 16 * v6);
LABEL_12:
  v12 = (uint64_t *)(v5 + 16 * v6);
  if (v8 == v12)
  {
    v13 = 0;
    if (!(_DWORD)v6)
      goto LABEL_23;
  }
  else
  {
    v13 = (_DWORD *)v8[1];
    if (!(_DWORD)v6)
      goto LABEL_23;
  }
  v14 = v6 - 1;
  LODWORD(v6) = (v6 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v15 = (uint64_t *)(v5 + 16 * v6);
  v16 = *v15;
  if (*v15 != a3)
  {
    v17 = 1;
    while (v16 != -4096)
    {
      v18 = v6 + v17++;
      v6 = v18 & v14;
      v16 = *(_QWORD *)(v5 + 16 * v6);
      if (v16 == a3)
      {
        v15 = (uint64_t *)(v5 + 16 * v6);
        goto LABEL_21;
      }
    }
    goto LABEL_23;
  }
LABEL_21:
  if (v15 == v12)
  {
LABEL_23:
    v19 = 0;
    goto LABEL_24;
  }
  v19 = (_DWORD *)v15[1];
LABEL_24:
  if (v13 == v19)
  {
    v19 = v13;
  }
  else
  {
    do
    {
      v20 = v13[4];
      v21 = v19[4];
      v22 = v20 >= v21;
      if (v20 >= v21)
        v23 = v13;
      else
        v23 = v19;
      if (!v22)
        v19 = v13;
      v13 = (_DWORD *)*((_QWORD *)v23 + 1);
    }
    while (v13 != v19);
  }
  return *(_QWORD *)v19;
}

{
  return __ZNK4llvm17DominatorTreeBaseINS_17MachineBasicBlockELb0EE26findNearestCommonDominatorEPS1_S3_(a1, a2, a3);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::isVirtualRoot()
{
  return 0;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::applyUpdates(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _BYTE v5[296];
  uint64_t v6;
  void *v7;
  _QWORD v8[9];

  v8[8] = *MEMORY[0x1E0C80C00];
  sub_1C5151DC4((uint64_t)v5, a2, a3, 1u);
  sub_1C5154848(a1, (uint64_t)v5, 0);
  if (v7 != v8)
    free(v7);
  sub_1C5151CA4((uint64_t)&v6);
  return sub_1C5151CA4((uint64_t)v5);
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::applyUpdates(uint64_t a1, _BYTE *a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  _BYTE v8[296];
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _BYTE v14[48];
  _BYTE v15[296];
  _BYTE v16[304];
  void *v17;
  _QWORD v18[9];

  v18[8] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v12 = v14;
    v13 = 0x300000000;
    sub_1C612E234((unsigned int *)&v12, a2, &a2[16 * a3]);
    sub_1C5157BAC((unsigned int *)&v12, (uint64_t)v12 + 16 * v13, a4, &a4[a5]);
    sub_1C5151DC4((uint64_t)v15, (unint64_t *)v12, v13, 1u);
    sub_1C5151DC4((uint64_t)v8, (unint64_t *)a4, a5, 0);
    sub_1C5154848(a1, (uint64_t)v15, (uint64_t)v8);
    if (v10 != &v11)
      free(v10);
    sub_1C5151CA4((uint64_t)&v9);
    sub_1C5151CA4((uint64_t)v8);
    if (v17 != v18)
      free(v17);
    sub_1C5151CA4((uint64_t)v16);
    sub_1C5151CA4((uint64_t)v15);
    if (v12 != v14)
      free(v12);
  }
  else
  {
    sub_1C5151DC4((uint64_t)v15, (unint64_t *)a4, a5, 0);
    sub_1C5154848(a1, (uint64_t)v15, (uint64_t)v15);
    if (v17 != v18)
      free(v17);
    sub_1C5151CA4((uint64_t)v16);
    sub_1C5151CA4((uint64_t)v15);
  }
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::insertEdge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C5154AA4(a1, 0, a2, a3);
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::deleteEdge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C515524C(a1, 0, a2, a3);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::addNewBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    v6 = (uint64_t *)(v3 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
      goto LABEL_8;
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(_QWORD *)(v3 + 16 * v5);
      if (v7 == a3)
      {
        v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_8;
      }
    }
  }
  v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_8:
  if (v6 == (uint64_t *)(v3 + 16 * v4))
    v10 = 0;
  else
    v10 = v6[1];
  *(_BYTE *)(a1 + 64) = 0;
  return llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::createChild(a1, a2, v10);
}

{
  return __ZN4llvm17DominatorTreeBaseINS_17MachineBasicBlockELb0EE11addNewBlockEPS1_S3_(a1, a2, a3);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::createChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v25;
  void *v26;
  uint64_t v27;

  v27 = a2;
  v6 = operator new();
  v7 = v6;
  *(_QWORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = a3;
  if (a3)
    v8 = *(_DWORD *)(a3 + 16) + 1;
  else
    v8 = 0;
  *(_DWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 24) = v6 + 40;
  *(_QWORD *)(v6 + 32) = 0x400000000;
  *(_QWORD *)(v6 + 72) = -1;
  v9 = *(unsigned int *)(a3 + 32);
  if (v9 >= *(_DWORD *)(a3 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 24, a3 + 40, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * v9) = v7;
  ++*(_DWORD *)(a3 + 32);
  v12 = *(_QWORD *)(a1 + 24);
  v11 = a1 + 24;
  v10 = v12;
  v13 = *(_DWORD *)(v11 + 16);
  if (v13)
  {
    v14 = v13 - 1;
    v15 = v14 & ((a2 >> 4) ^ (a2 >> 9));
    v16 = (_QWORD *)(v10 + 16 * v15);
    v17 = *v16;
    if (*v16 == a2)
      goto LABEL_20;
    v18 = 0;
    v19 = 1;
    while (v17 != -4096)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v17 == -8192;
      if (v20)
        v18 = v16;
      v21 = v15 + v19++;
      v15 = v21 & v14;
      v16 = (_QWORD *)(v10 + 16 * v15);
      v17 = *v16;
      if (*v16 == a2)
        goto LABEL_20;
    }
    if (v18)
      v22 = v18;
    else
      v22 = v16;
  }
  else
  {
    v22 = 0;
  }
  v16 = sub_1C50F392C(v11, (uint64_t)&v27, &v27, v22);
  *v16 = v27;
  v16[1] = 0;
LABEL_20:
  v23 = v16[1];
  v16[1] = v7;
  if (v23)
  {
    v25 = v16;
    v26 = *(void **)(v23 + 24);
    if (v26 != (void *)(v23 + 40))
      free(v26);
    MEMORY[0x1CAA32FC0](v23, 0x10A0C40528A66C4);
    return v25[1];
  }
  return v7;
}

{
  return __ZN4llvm17DominatorTreeBaseINS_17MachineBasicBlockELb0EE11createChildEPS1_PNS_15DomTreeNodeBaseIS1_EE(a1, a2, a3);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::setNewRoot(uint64_t a1, uint64_t a2)
{
  uint64_t Node;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  int v17;
  _QWORD *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  BOOL v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;

  *(_BYTE *)(a1 + 64) = 0;
  Node = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::createNode(a1, a2);
  if (!*(_DWORD *)(a1 + 8))
  {
    if (*(_DWORD *)(a1 + 12))
    {
      v5 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, 1uLL, 8);
      v5 = *(unsigned int *)(a1 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = a2;
    ++*(_DWORD *)(a1 + 8);
    goto LABEL_5;
  }
  v7 = **(_QWORD **)a1;
  v32 = v7;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(a1 + 40);
  if (v9)
  {
    v10 = v9 - 1;
    v11 = ((v7 >> 4) ^ (v7 >> 9)) & (v9 - 1);
    v12 = (_QWORD *)(v8 + 16 * v11);
    v13 = *v12;
    if (v7 == *v12)
    {
      v19 = v12 + 1;
      goto LABEL_24;
    }
    v14 = 0;
    v15 = 1;
    while (v13 != -4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == -8192;
      if (v16)
        v14 = v12;
      v17 = v11 + v15++;
      LODWORD(v11) = v17 & v10;
      v12 = (_QWORD *)(v8 + 16 * v11);
      v13 = *v12;
      if (v7 == *v12)
        goto LABEL_21;
    }
    if (v14)
      v18 = v14;
    else
      v18 = v12;
  }
  else
  {
    v18 = 0;
  }
  v12 = sub_1C50F392C(a1 + 24, (uint64_t)&v32, &v32, v18);
  *v12 = v32;
  v12[1] = 0;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(a1 + 40);
LABEL_21:
  v19 = v12 + 1;
  if (!v9)
  {
    v26 = 0;
LABEL_37:
    v20 = sub_1C50F392C(a1 + 24, (uint64_t)&v32, &v32, v26);
    *v20 = v32;
    v20[1] = 0;
    goto LABEL_38;
  }
  v7 = v32;
  v10 = v9 - 1;
  v11 = ((v32 >> 4) ^ (v32 >> 9)) & (v9 - 1);
LABEL_24:
  v20 = (_QWORD *)(v8 + 16 * v11);
  v21 = *v20;
  if (v7 != *v20)
  {
    v22 = 0;
    v23 = 1;
    while (v21 != -4096)
    {
      if (v22)
        v24 = 0;
      else
        v24 = v21 == -8192;
      if (v24)
        v22 = v20;
      v25 = v11 + v23++;
      LODWORD(v11) = v25 & v10;
      v20 = (_QWORD *)(v8 + 16 * v11);
      v21 = *v20;
      if (v7 == *v20)
        goto LABEL_38;
    }
    if (v22)
      v26 = v22;
    else
      v26 = v20;
    goto LABEL_37;
  }
LABEL_38:
  v27 = v20[1];
  v20[1] = 0;
  v28 = *(unsigned int *)(Node + 32);
  if (v28 >= *(_DWORD *)(Node + 36))
  {
    v31 = v27;
    llvm::SmallVectorBase<unsigned int>::grow_pod(Node + 24, Node + 40, v28 + 1, 8);
    v27 = v31;
    LODWORD(v28) = *(_DWORD *)(Node + 32);
  }
  *(_QWORD *)(*(_QWORD *)(Node + 24) + 8 * v28) = v27;
  ++*(_DWORD *)(Node + 32);
  v29 = *v19;
  *v19 = v27;
  if (v29)
  {
    v30 = *(void **)(v29 + 24);
    if (v30 != (void *)(v29 + 40))
      free(v30);
    MEMORY[0x1CAA32FC0](v29, 0x10A0C40528A66C4);
    v27 = *v19;
  }
  *(_QWORD *)(v27 + 8) = Node;
  llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::UpdateLevel(*v19);
  **(_QWORD **)a1 = a2;
LABEL_5:
  *(_QWORD *)(a1 + 48) = Node;
  return Node;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::createNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v20;
  void *v21;
  uint64_t v22;

  v22 = a2;
  v4 = operator new();
  *(_QWORD *)v4 = a2;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = v4 + 40;
  *(_QWORD *)(v4 + 32) = 0x400000000;
  *(_QWORD *)(v4 + 72) = -1;
  v7 = *(_QWORD *)(a1 + 24);
  v6 = a1 + 24;
  v5 = v7;
  v8 = *(_DWORD *)(v6 + 16);
  if (v8)
  {
    v9 = v8 - 1;
    v10 = v9 & ((a2 >> 4) ^ (a2 >> 9));
    v11 = (_QWORD *)(v5 + 16 * v10);
    v12 = *v11;
    if (*v11 == a2)
      goto LABEL_16;
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = v11;
      v16 = v10 + v14++;
      v10 = v16 & v9;
      v11 = (_QWORD *)(v5 + 16 * v10);
      v12 = *v11;
      if (*v11 == a2)
        goto LABEL_16;
    }
    if (v13)
      v17 = v13;
    else
      v17 = v11;
  }
  else
  {
    v17 = 0;
  }
  v11 = sub_1C50F392C(v6, (uint64_t)&v22, &v22, v17);
  *v11 = v22;
  v11[1] = 0;
LABEL_16:
  v18 = v11[1];
  v11[1] = v4;
  if (v18)
  {
    v20 = v11;
    v21 = *(void **)(v18 + 24);
    if (v21 != (void *)(v18 + 40))
      free(v21);
    MEMORY[0x1CAA32FC0](v18, 0x10A0C40528A66C4);
    return v20[1];
  }
  return v4;
}

{
  return __ZN4llvm17DominatorTreeBaseINS_17MachineBasicBlockELb0EE10createNodeEPS1_(a1, a2);
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::changeImmediateDominator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(a1 + 64) = 0;
  llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::setIDom(a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t *)(v3 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_8;
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(_QWORD *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_8;
      }
    }
  }
  v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_8:
  v10 = (uint64_t *)(v3 + 16 * v4);
  if (v6 == v10)
  {
    v11 = 0;
    if (!(_DWORD)v4)
      goto LABEL_18;
  }
  else
  {
    v11 = v6[1];
    if (!(_DWORD)v4)
      goto LABEL_18;
  }
  v12 = v4 - 1;
  LODWORD(v4) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v13 = (uint64_t *)(v3 + 16 * v4);
  v14 = *v13;
  if (*v13 == a3)
  {
LABEL_17:
    if (v13 != v10)
    {
      v17 = v13[1];
      goto LABEL_20;
    }
  }
  else
  {
    v15 = 1;
    while (v14 != -4096)
    {
      v16 = v4 + v15++;
      v4 = v16 & v12;
      v14 = *(_QWORD *)(v3 + 16 * v4);
      if (v14 == a3)
      {
        v13 = (uint64_t *)(v3 + 16 * v4);
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  v17 = 0;
LABEL_20:
  *(_BYTE *)(a1 + 64) = 0;
  llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::setIDom(v11, v17);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::eraseNode(int32x2_t *a1, uint64_t a2)
{
  int32x2_t v2;
  int32x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;

  v17 = a2;
  v3 = a1 + 3;
  v2 = a1[3];
  v4 = a1[5].u32[0];
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t *)(*(_QWORD *)&v2 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_8;
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(_QWORD *)(*(_QWORD *)&v2 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (uint64_t *)(*(_QWORD *)&v2 + 16 * v5);
        goto LABEL_8;
      }
    }
  }
  v6 = (uint64_t *)(*(_QWORD *)&v2 + 16 * v4);
LABEL_8:
  if (v6 == (uint64_t *)(*(_QWORD *)&v2 + 16 * v4))
    v10 = 0;
  else
    v10 = v6[1];
  a1[8].i8[0] = 0;
  v11 = *(_QWORD *)(v10 + 8);
  if (v11)
  {
    v12 = *(_QWORD **)(v11 + 24);
    v13 = *(unsigned int *)(v11 + 32);
    v14 = &v12[v13];
    if ((_DWORD)v13)
    {
      v15 = 8 * v13;
      while (*v12 != v10)
      {
        ++v12;
        v15 -= 8;
        if (!v15)
        {
          v12 = v14;
          break;
        }
      }
    }
    if (v14 != v12 + 1)
    {
      memmove(v12, v12 + 1, (char *)v14 - (char *)(v12 + 1));
      LODWORD(v13) = *(_DWORD *)(v11 + 32);
    }
    *(_DWORD *)(v11 + 32) = v13 - 1;
  }
  return sub_1C4867FFC(v3, &v17);
}

{
  return __ZN4llvm17DominatorTreeBaseINS_17MachineBasicBlockELb0EE9eraseNodeEPS1_(a1, a2);
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::splitBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t NearestCommonDominator;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[5];

  v32[4] = *MEMORY[0x1E0C80C00];
  v4 = **(_QWORD **)(a2 + 88);
  v5 = *(char **)(a2 + 64);
  v6 = *(char **)(a2 + 72);
  v30 = v32;
  v31 = 0x400000000;
  v7 = v6 - v5;
  if ((unint64_t)(v6 - v5) >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, (uint64_t)v32, v7 >> 3, 8);
    v8 = v31;
    v9 = v31;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  if (v5 != v6)
  {
    v10 = (char *)v30 + 8 * v8;
    do
    {
      v11 = *(_QWORD *)v5;
      v5 += 8;
      *v10++ = v11;
    }
    while (v5 != v6);
  }
  v12 = v9 + ((unint64_t)v7 >> 3);
  LODWORD(v31) = v12;
  v13 = *(uint64_t **)(v4 + 64);
  v14 = *(uint64_t **)(v4 + 72);
  if (v13 == v14)
  {
    v16 = 1;
    if (!v12)
      goto LABEL_27;
LABEL_16:
    v17 = 0;
    while (!llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::isReachableFromEntry(a1, *((_QWORD *)v30 + v17)))
    {
      if (++v17 >= (unint64_t)v31)
        goto LABEL_27;
    }
    NearestCommonDominator = *((_QWORD *)v30 + v17);
    if (!NearestCommonDominator)
      goto LABEL_27;
    if (v31 > (int)v17 + 1)
    {
      v19 = v17 + 1;
      do
      {
        if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::isReachableFromEntry(a1, *((_QWORD *)v30 + v19)))
          NearestCommonDominator = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator(a1, NearestCommonDominator, *((_QWORD *)v30 + v19));
        ++v19;
      }
      while (v19 < v31);
    }
    v20 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::addNewBlock(a1, a2, NearestCommonDominator);
    if (!v16)
      goto LABEL_27;
    v21 = v20;
    v22 = *(_QWORD *)(a1 + 24);
    v23 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v23)
    {
      LODWORD(v24) = (v23 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      v25 = (uint64_t *)(v22 + 16 * v24);
      v26 = *v25;
      if (v4 == *v25)
      {
LABEL_38:
        if (v25 == (uint64_t *)(v22 + 16 * v23))
          v29 = 0;
        else
          v29 = v25[1];
        *(_BYTE *)(a1 + 64) = 0;
        llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::setIDom(v29, v21);
        goto LABEL_27;
      }
      v27 = 1;
      while (v26 != -4096)
      {
        v28 = v24 + v27++;
        v24 = v28 & (v23 - 1);
        v26 = *(_QWORD *)(v22 + 16 * v24);
        if (v4 == v26)
        {
          v25 = (uint64_t *)(v22 + 16 * v24);
          goto LABEL_38;
        }
      }
    }
    v25 = (uint64_t *)(v22 + 16 * v23);
    goto LABEL_38;
  }
  while (1)
  {
    v15 = *v13;
    if (*v13 != a2
      && !llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(a1, v4, *v13)
      && llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::isReachableFromEntry(a1, v15))
    {
      break;
    }
    if (++v13 == v14)
    {
      v16 = 1;
      goto LABEL_15;
    }
  }
  v16 = 0;
LABEL_15:
  if ((_DWORD)v31)
    goto LABEL_16;
LABEL_27:
  if (v30 != v32)
    free(v30);
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::recalculate(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 56) = a2;
  sub_1C50F0A2C(a1, 0);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::recalculate(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _BYTE v6[8];
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[296];
  uint64_t v11;
  void *v12;
  unsigned int v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 56) = a2;
  sub_1C5151DC4((uint64_t)v10, a3, a4, 1u);
  v6[0] = 0;
  v7 = v10;
  v8 = 0;
  v9 = v13;
  sub_1C50F0A2C(a1, (uint64_t)v6);
  if (v12 != v14)
    free(v12);
  sub_1C5151CA4((uint64_t)&v11);
  return sub_1C5151CA4((uint64_t)v10);
}

uint64_t *llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::reset(uint64_t a1)
{
  uint64_t *result;

  result = sub_1C4EF5C94((uint64_t *)(a1 + 24));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return result;
}

void llvm::initializeMachineDominatorTreePass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82F690);
  if (v1 != -1)
  {
    v4[0] = sub_1C51514A4;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82F690, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C51514A4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "MachineDominator Tree Construction";
  *(_QWORD *)(v2 + 8) = 34;
  *(_QWORD *)(v2 + 16) = "machinedomtree";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &llvm::MachineDominatorTree::ID;
  *(_WORD *)(v2 + 40) = 257;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::MachineDominatorTree>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::MachineDominatorTree::runOnMachineFunction(llvm::MachineDominatorTree *this, llvm::MachineFunction *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v10;
  int v11;
  unsigned int v12;
  void *v13;
  uint64_t *v14;

  *((_DWORD *)this + 64) = 0;
  v4 = (void *)*((_QWORD *)this + 130);
  if (v4 == *((void **)this + 129))
    goto LABEL_2;
  v8 = *((unsigned int *)this + 262);
  if (v8 < 0x21 || 4 * (*((_DWORD *)this + 263) - *((_DWORD *)this + 264)) >= v8)
  {
    memset(v4, 255, 8 * v8);
LABEL_2:
    *(_QWORD *)((char *)this + 1052) = 0;
    goto LABEL_3;
  }
  free(v4);
  v10 = *((_DWORD *)this + 263) - *((_DWORD *)this + 264);
  v11 = 1 << (33 - __clz(v10 - 1));
  if (v10 <= 0x10)
    v12 = 32;
  else
    v12 = v11;
  *((_DWORD *)this + 262) = v12;
  *(_QWORD *)((char *)this + 1052) = 0;
  v13 = malloc_type_malloc(8 * v12, 0x4065EBACuLL);
  if (!v13)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *((_QWORD *)this + 130) = v13;
  memset(v13, 255, 8 * *((unsigned int *)this + 262));
LABEL_3:
  v5 = operator new();
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_QWORD *)v5 = v5 + 16;
  *(_QWORD *)(v5 + 8) = 0x100000000;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_DWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_BYTE *)(v5 + 64) = 0;
  v6 = *((_QWORD *)this + 165);
  *((_QWORD *)this + 165) = v5;
  if (v6)
  {
    v14 = (uint64_t *)((char *)this + 1320);
    sub_1C4DC4DE4((uint64_t)v14, v6);
    v5 = *v14;
  }
  *(_QWORD *)(v5 + 56) = a2;
  sub_1C50F0A2C(v5, 0);
  return 0;
}

void llvm::MachineDominatorTree::calculate(llvm::MachineDominatorTree *this, llvm::MachineFunction *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;

  *((_DWORD *)this + 64) = 0;
  v4 = (void *)*((_QWORD *)this + 130);
  if (v4 == *((void **)this + 129))
    goto LABEL_2;
  v7 = *((unsigned int *)this + 262);
  if (v7 < 0x21 || 4 * (*((_DWORD *)this + 263) - *((_DWORD *)this + 264)) >= v7)
  {
    memset(v4, 255, 8 * v7);
LABEL_2:
    *(_QWORD *)((char *)this + 1052) = 0;
    goto LABEL_3;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)this + 129);
LABEL_3:
  v5 = operator new();
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_QWORD *)v5 = v5 + 16;
  *(_QWORD *)(v5 + 8) = 0x100000000;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_DWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_BYTE *)(v5 + 64) = 0;
  v6 = *((_QWORD *)this + 165);
  *((_QWORD *)this + 165) = v5;
  if (v6)
  {
    v9 = (uint64_t *)((char *)this + 1320);
    sub_1C4DC4DE4((uint64_t)v9, v6);
    v5 = *v9;
  }
  *(_QWORD *)(v5 + 56) = a2;
  sub_1C50F0A2C(v5, 0);
}

void llvm::MachineDominatorTree::releaseMemory(llvm::MachineDominatorTree *this)
{
  uint64_t v1;

  *((_DWORD *)this + 64) = 0;
  v1 = *((_QWORD *)this + 165);
  *((_QWORD *)this + 165) = 0;
  if (v1)
    sub_1C4DC4DE4((uint64_t)this + 1320, v1);
}

void ***llvm::MachineDominatorTree::applySplitCriticalEdges(void ***this)
{
  uint64_t v1;
  void ***v2;
  unint64_t v3;
  void **v4;
  void **v5;
  unsigned int v6;
  void *v7;
  void **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void *v13;
  int v14;
  int v15;
  void **v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  void **v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  int v30;
  void **v31;
  unsigned int v33;
  unsigned int v34;
  void **v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  void **v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  void **v53;
  unsigned int v54;
  void **v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  void **v60;
  void **v61;

  v1 = *((unsigned int *)this + 64);
  if (!(_DWORD)v1)
    return this;
  v2 = this;
  if (v1 > 0x39)
  {
    v3 = operator new();
    v53 = (void **)sub_1C496F858(v3, v1, 1);
    v54 = *((_DWORD *)v2 + 64);
    v61 = v53;
    if (!v54)
      goto LABEL_72;
    v4 = v2[31];
    v5 = &v4[3 * v54];
  }
  else
  {
    v3 = (v1 << 58) | (2 * ~(-1 << v1)) | 1;
    v61 = (void **)v3;
    v4 = this[31];
    v5 = &v4[3 * v1];
  }
  v6 = 0;
  do
  {
    v7 = v4[1];
    v8 = v2[165];
    v9 = v8[3];
    v10 = *((unsigned int *)v8 + 10);
    if (!(_DWORD)v10)
      goto LABEL_11;
    LODWORD(v11) = ((v7 >> 4) ^ (v7 >> 9)) & (v10 - 1);
    v12 = (void **)&v9[2 * v11];
    v13 = *v12;
    if (v7 != *v12)
    {
      v14 = 1;
      while (v13 != (void *)-4096)
      {
        v15 = v11 + v14++;
        v11 = v15 & (v10 - 1);
        v13 = (void *)v9[2 * v11];
        if (v7 == v13)
        {
          v12 = (void **)&v9[2 * v11];
          goto LABEL_12;
        }
      }
LABEL_11:
      v12 = (void **)&v9[2 * v10];
    }
LABEL_12:
    if (v12 == &v9[2 * v10])
      v16 = 0;
    else
      v16 = (void **)v12[1];
    v17 = (uint64_t *)*((_QWORD *)v7 + 8);
    v18 = (uint64_t *)*((_QWORD *)v7 + 9);
    while (v17 != v18)
    {
      v19 = *v17;
      if ((void *)*v17 == v4[2])
        goto LABEL_41;
      v20 = (void **)sub_1C477672C((uint64_t)(v2 + 129), *v17);
      v21 = v2[130];
      v22 = 1048;
      if (v21 == v2[129])
        v22 = 1052;
      if (v20 != &v21[*(unsigned int *)((char *)v2 + v22)])
        v19 = **(_QWORD **)(v19 + 64);
      v23 = (uint64_t)v2[165];
      v24 = *(_QWORD *)(v23 + 24);
      v25 = *(unsigned int *)(v23 + 40);
      if ((_DWORD)v25)
      {
        LODWORD(v26) = ((v19 >> 4) ^ (v19 >> 9)) & (v25 - 1);
        v27 = (uint64_t *)(v24 + 16 * v26);
        v28 = *v27;
        if (v19 == *v27)
          goto LABEL_29;
        v29 = 1;
        while (v28 != -4096)
        {
          v30 = v26 + v29++;
          v26 = v30 & (v25 - 1);
          v28 = *(_QWORD *)(v24 + 16 * v26);
          if (v19 == v28)
          {
            v27 = (uint64_t *)(v24 + 16 * v26);
            goto LABEL_29;
          }
        }
      }
      v27 = (uint64_t *)(v24 + 16 * v25);
LABEL_29:
      if (v27 == (uint64_t *)(v24 + 16 * v25))
        goto LABEL_41;
      v31 = (void **)v27[1];
      if (v31 == v16 || v31 == 0)
        goto LABEL_41;
      if (!v16)
        goto LABEL_48;
      if (v31[1] == v16)
        goto LABEL_41;
      if (v16[1] == v31)
        goto LABEL_48;
      v33 = *((_DWORD *)v16 + 4);
      if (v33 >= *((_DWORD *)v31 + 4))
        goto LABEL_48;
      if (*(_BYTE *)(v23 + 64))
        goto LABEL_39;
      v34 = *(_DWORD *)(v23 + 68) + 1;
      *(_DWORD *)(v23 + 68) = v34;
      if (v34 > 0x20)
      {
        llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::updateDFSNumbers(v23);
LABEL_39:
        if (*((_DWORD *)v31 + 18) < *((_DWORD *)v16 + 18) || *((_DWORD *)v31 + 19) > *((_DWORD *)v16 + 19))
          goto LABEL_48;
        goto LABEL_41;
      }
      do
      {
        v35 = v31;
        v31 = (void **)v31[1];
      }
      while (v31 && *((_DWORD *)v31 + 4) >= v33);
      if (v35 != v16)
      {
LABEL_48:
        if ((v3 & 1) != 0)
        {
          v3 = ((2 * ~((-1 << (v3 >> 58)) | (1 << v6))) | 0xFC00000000000000) & v3 | 1;
          v61 = (void **)v3;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v3 + 8 * (v6 >> 6)) &= ~(1 << v6);
        }
        break;
      }
LABEL_41:
      ++v17;
    }
    ++v6;
    v4 += 3;
  }
  while (v4 != v5);
  v36 = *((_DWORD *)v2 + 64);
  if (v36)
  {
    v37 = 0;
    v38 = (uint64_t *)v2[31];
    v39 = &v38[3 * v36];
    while (2)
    {
      v40 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::addNewBlock((uint64_t)v2[165], v38[2], *v38);
      v41 = v37;
      v42 = (v3 >> 1) & ~(-1 << (v3 >> 58));
      if ((v3 & 1) == 0)
      {
        v41 = v37 & 0x3F;
        v42 = *(_QWORD *)(*(_QWORD *)v3 + 8 * (v37 >> 6));
      }
      if (((v42 >> v41) & 1) == 0)
        goto LABEL_57;
      v43 = v2[165];
      v44 = v43[3];
      v45 = *((unsigned int *)v43 + 10);
      if ((_DWORD)v45)
      {
        v46 = v38[1];
        LODWORD(v47) = ((v46 >> 4) ^ (v46 >> 9)) & (v45 - 1);
        v48 = &v44[2 * v47];
        v49 = *v48;
        if (v46 != *v48)
        {
          v50 = 1;
          while (v49 != -4096)
          {
            v51 = v47 + v50++;
            v47 = v51 & (v45 - 1);
            v49 = v44[2 * v47];
            if (v46 == v49)
            {
              v48 = &v44[2 * v47];
              goto LABEL_66;
            }
          }
          goto LABEL_65;
        }
      }
      else
      {
LABEL_65:
        v48 = &v44[2 * v45];
      }
LABEL_66:
      if (v48 == &v44[2 * v45])
        v52 = 0;
      else
        v52 = v48[1];
      *((_BYTE *)v43 + 64) = 0;
      llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::setIDom(v52, v40);
LABEL_57:
      ++v37;
      v38 += 3;
      if (v38 == v39)
        break;
      continue;
    }
  }
LABEL_72:
  v55 = v2[130];
  if (v55 == v2[129])
  {
LABEL_73:
    *(void ***)((char *)v2 + 1052) = 0;
  }
  else
  {
    v56 = *((unsigned int *)v2 + 262);
    if (v56 < 0x21 || 4 * (*((_DWORD *)v2 + 263) - *((_DWORD *)v2 + 264)) >= v56)
    {
      memset(v55, 255, 8 * v56);
      goto LABEL_73;
    }
    free(v55);
    v57 = *((_DWORD *)v2 + 263) - *((_DWORD *)v2 + 264);
    v58 = 1 << (33 - __clz(v57 - 1));
    if (v57 <= 0x10)
      v59 = 32;
    else
      v59 = v58;
    *((_DWORD *)v2 + 262) = v59;
    *(void ***)((char *)v2 + 1052) = 0;
    v60 = (void **)malloc_type_malloc(8 * v59, 0x4065EBACuLL);
    if (!v60)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v2[130] = v60;
    memset(v60, 255, 8 * *((unsigned int *)v2 + 262));
  }
  *((_DWORD *)v2 + 64) = 0;
  return sub_1C4914448(&v61);
}

uint64_t sub_1C5151CA4(uint64_t a1)
{
  sub_1C61E0CF0(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  return a1;
}

uint64_t sub_1C5151CDC(char *a1, char *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 == a2)
    return 1;
  v3 = a2 - a1;
  while (*(_QWORD *)a1 == *a3)
  {
    a1 += 8;
    ++a3;
    v3 -= 8;
    if (a1 == a2)
      return 1;
  }
  if (v3 != 8)
  {
    if (a1 != a2)
    {
      v5 = 0;
      v6 = 8 * (v3 >> 3);
      v7 = a1;
      while (1)
      {
        v8 = *(_QWORD *)v7;
        if (a1 == v7)
        {
LABEL_14:
          v10 = 0;
          v11 = 0;
          do
          {
            if (v8 == a3[v10 / 8])
              ++v11;
            v10 += 8;
          }
          while (v6 != v10);
          if (!v11)
            return 0;
          v12 = v7 + 8;
          v13 = 1;
          while (v12 != a2)
          {
            v14 = *(_QWORD *)v12;
            v12 += 8;
            if (v8 == v14)
              ++v13;
          }
          if (v13 != v11)
            return 0;
        }
        else
        {
          v9 = 0;
          while (*(_QWORD *)&a1[v9] != v8)
          {
            v9 += 8;
            if (v5 == v9)
              goto LABEL_14;
          }
        }
        v7 += 8;
        v5 += 8;
        if (v7 == a2)
          return 1;
      }
    }
    return 1;
  }
  return 0;
}

uint64_t sub_1C5151DC4(uint64_t a1, unint64_t *a2, uint64_t a3, unsigned int a4)
{
  _DWORD *v6;
  uint64_t i;
  uint64_t j;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v24;

  *(_QWORD *)a1 = 1;
  v6 = (_DWORD *)(a1 + 296);
  for (i = 8; i != 296; i += 72)
    *(_QWORD *)(a1 + i) = -4096;
  *(_QWORD *)(a1 + 296) = 1;
  for (j = 304; j != 592; j += 72)
    *(_QWORD *)(a1 + j) = -4096;
  *(_QWORD *)(a1 + 600) = a1 + 616;
  *(_QWORD *)(a1 + 608) = 0x400000000;
  sub_1C5151F64(a2, a3, a1 + 600, 0, 0);
  v9 = *(unsigned int *)(a1 + 608);
  if ((_DWORD)v9)
  {
    v10 = *(unint64_t **)(a1 + 600);
    v11 = &v10[2 * v9];
    do
    {
      v12 = *v10;
      v13 = v10[1];
      v14 = ((v13 & 4) == 0) ^ a4;
      v24 = *v10;
      sub_1C5154200((_DWORD *)a1, (uint64_t *)&v24);
      v16 = v15 + 32 * v14;
      v17 = v16 + 8;
      v18 = *(unsigned int *)(v16 + 16);
      if (v18 >= *(unsigned int *)(v16 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v16 + 8, v16 + 24, v18 + 1, 8);
        v18 = *(unsigned int *)(v17 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v17 + 8 * v18) = v13 & 0xFFFFFFFFFFFFFFF8;
      ++*(_DWORD *)(v17 + 8);
      v24 = v13 & 0xFFFFFFFFFFFFFFF8;
      sub_1C5154200(v6, (uint64_t *)&v24);
      v20 = v19 + 32 * v14;
      v21 = v20 + 8;
      v22 = *(unsigned int *)(v20 + 16);
      if (v22 >= *(unsigned int *)(v20 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v20 + 8, v20 + 24, v22 + 1, 8);
        v22 = *(unsigned int *)(v21 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v21 + 8 * v22) = v12;
      ++*(_DWORD *)(v21 + 8);
      v10 += 2;
    }
    while (v10 != v11);
  }
  *(_BYTE *)(a1 + 592) = a4;
  return a1;
}

void sub_1C5151F64(unint64_t *a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int64x2_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  int v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  unsigned int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v49 = a5;
  v52 = 1;
  v9 = (uint64_t *)&v53;
  v10 = &v55;
  v11 = 8;
  v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)((char *)&v52 + v11) = v12;
    v11 += 24;
  }
  while (v11 != 104);
  sub_1C51522A8((uint64_t)&v52, a2);
  if (a2)
  {
    v13 = a1;
    do
    {
      v14 = *v13;
      v15 = v13[1];
      v13 += 2;
      if (a4)
        v16 = v14;
      else
        v16 = v15 & 0xFFFFFFFFFFFFFFF8;
      if (a4)
        v14 = v15 & 0xFFFFFFFFFFFFFFF8;
      v50 = (uint64_t *)v14;
      v51 = (char *)v16;
      v17 = sub_1C51526A0(&v52, (uint64_t *)&v50);
      v18 = *((_DWORD *)v17 + 4);
      if ((v15 & 4) != 0)
        v19 = v18 - 1;
      else
        v19 = v18 + 1;
      *((_DWORD *)v17 + 4) = v19;
    }
    while (v13 != &a1[2 * a2]);
  }
  *(_DWORD *)(a3 + 8) = 0;
  v20 = v52;
  v21 = (unint64_t)v52 >> 1;
  if (*(_DWORD *)(a3 + 12) < v21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v21, 16);
    v20 = v52;
  }
  if (v20 > 1)
  {
    if ((v20 & 1) == 0)
    {
      v9 = v53;
      v22 = v54;
      if (!v54)
      {
        v20 = 0;
        v25 = v53;
        v10 = v53;
        goto LABEL_35;
      }
      v10 = &v53[3 * v54];
    }
    v20 &= 1u;
    v25 = v9;
    while (1)
    {
      v26 = v25[1];
      if ((*v25 != -4096 || v26 != -4096) && (*v25 != -8192 || v26 != -8192))
        break;
      v25 += 3;
      if (v25 == v10)
      {
        v25 = v10;
        break;
      }
    }
    v9 = v53;
    v22 = v54;
  }
  else
  {
    v9 = v53;
    v22 = v54;
    if (v20)
      v23 = &v53;
    else
      v23 = v53;
    if (v20)
      v24 = 4;
    else
      v24 = v54;
    v25 = &v23[3 * v24];
    v10 = v25;
  }
LABEL_35:
  v27 = v20 == 0;
  if (v20)
    v28 = (uint64_t *)&v53;
  else
    v28 = v9;
  if (!v27)
    v22 = 4;
  v29 = &v28[3 * v22];
  if (v25 != v29)
  {
    v30 = a3 + 16;
    do
    {
      v31 = *((_DWORD *)v25 + 4);
      if (v31)
      {
        v32 = v31 < 1;
        v33 = *v25;
        v34 = v25[1];
        v35 = *(unsigned int *)(a3 + 8);
        if (v35 >= *(unsigned int *)(a3 + 12))
        {
          v48 = v30;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v30, v35 + 1, 16);
          v30 = v48;
          v35 = *(unsigned int *)(a3 + 8);
        }
        v36 = (_QWORD *)(*(_QWORD *)a3 + 16 * v35);
        *v36 = v33;
        v36[1] = v34 & 0xFFFFFFFFFFFFFFFBLL | (4 * v32);
        ++*(_DWORD *)(a3 + 8);
      }
      v37 = v25 + 3;
      v25 = v10;
      if (v37 != v10)
      {
        v25 = v37;
        while (1)
        {
          v38 = v25[1];
          if ((*v25 != -4096 || v38 != -4096) && (*v25 != -8192 || v38 != -8192))
            break;
          v25 += 3;
          if (v25 == v10)
          {
            v25 = v10;
            break;
          }
        }
      }
    }
    while (v25 != v29);
  }
  if (a2)
  {
    v39 = 0;
    v40 = a1 + 1;
    do
    {
      if ((a4 & 1) != 0)
      {
        v41 = *(v40 - 1);
        v42 = *v40 & 0xFFFFFFFFFFFFFFF8;
      }
      else
      {
        v42 = *(v40 - 1);
        v41 = *v40 & 0xFFFFFFFFFFFFFFF8;
      }
      v50 = (uint64_t *)v42;
      v51 = (char *)v41;
      *((_DWORD *)sub_1C51526A0(&v52, (uint64_t *)&v50) + 4) = v39++;
      v40 += 2;
    }
    while (a2 != v39);
  }
  v43 = *(uint64_t **)a3;
  v44 = *(unsigned int *)(a3 + 8);
  v45 = (uint64_t *)(*(_QWORD *)a3 + 16 * v44);
  v50 = &v52;
  v51 = &v49;
  v46 = 126 - 2 * __clz(v44);
  if ((_DWORD)v44)
    v47 = v46;
  else
    v47 = 0;
  sub_1C51527D0(v43, v45, (uint64_t)&v50, v47, 1);
  if ((v52 & 1) == 0)
    MEMORY[0x1CAA32FB4](v53, 8);
}

uint64_t sub_1C51522A8(uint64_t result, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;

  if (a2)
  {
    v2 = (4 * a2 / 3 + 1) | ((unint64_t)(4 * a2 / 3 + 1) >> 1);
    v3 = v2 | (v2 >> 2) | ((v2 | (v2 >> 2)) >> 4);
    a2 = (((v3 | (v3 >> 8)) >> 16) | v3 | (v3 >> 8)) + 1;
  }
  if ((*(_BYTE *)result & 1) != 0)
    v4 = 4;
  else
    v4 = *(_DWORD *)(result + 16);
  if (a2 > v4)
    return sub_1C5152304(result, a2);
  return result;
}

uint64_t sub_1C5152304(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _BYTE v15[96];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 4)
    {
      v14 = a2;
      *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C51524B0(a1, v6, v6 + 24 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v15;
  do
  {
    v11 = *(_QWORD *)(a1 + v8 + 8);
    v10 = *(_QWORD *)(a1 + v8 + 16);
    if ((v11 != -4096 || v10 != -4096) && (v11 != -8192 || v10 != -8192))
    {
      *(_OWORD *)v9 = *(_OWORD *)(a1 + v8 + 8);
      *((_DWORD *)v9 + 4) = *(_DWORD *)(a1 + v8 + 24);
      v9 += 24;
    }
    v8 += 24;
  }
  while (v8 != 96);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v12 = a2;
    *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v12;
  }
  return sub_1C51524B0(a1, (uint64_t)v15, (uint64_t)v9);
}

uint64_t sub_1C51524B0(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t *v9;
  int64x2_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (int64x2_t *)(result + 8);
    v9 = (int64x2_t *)(result + 104);
  }
  else
  {
    v7 = *(_DWORD *)(result + 16);
    if (!v7)
      goto LABEL_14;
    v8 = *(int64x2_t **)(result + 8);
    v9 = (int64x2_t *)((char *)v8 + 24 * v7);
  }
  v10 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *v8 = v10;
    v8 = (int64x2_t *)((char *)v8 + 24);
  }
  while (v8 != v9);
LABEL_14:
  while (a2 != a3)
  {
    v11 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -4096 || v11 != -4096) && (*(_QWORD *)a2 != -8192 || v11 != -8192))
    {
      v13 = 0;
      result = sub_1C5152598((uint64_t)v5, (uint64_t *)a2, &v13);
      v12 = v13;
      *v13 = *(_QWORD *)a2;
      v12[1] = *(_QWORD *)(a2 + 8);
      *((_DWORD *)v12 + 4) = *(_DWORD *)(a2 + 16);
      *v5 += 2;
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_1C5152598(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  int v18;
  uint64_t result;
  BOOL v20;
  unsigned int v22;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v13 = 0;
      result = 0;
      goto LABEL_11;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = *a2;
  v6 = a2[1];
  v7 = ((v6 >> 4) ^ (v6 >> 9) | ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32))
     + ~((unint64_t)((v6 >> 4) ^ (v6 >> 9)) << 32);
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = ((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27));
  v11 = v4 - 1;
  v12 = (v4 - 1) & v10;
  v13 = (_QWORD *)(v3 + 24 * v12);
  v15 = *v13;
  v14 = v13[1];
  if (v5 == *v13 && v6 == v14)
  {
    result = 1;
  }
  else
  {
    v17 = 0;
    v18 = 1;
    result = 1;
    while (v15 != -4096 || v14 != -4096)
    {
      if (v17)
        v20 = 0;
      else
        v20 = v14 == -8192;
      if (v20 && v15 == -8192)
        v17 = v13;
      v22 = v12 + v18++;
      v12 = v22 & v11;
      v13 = (_QWORD *)(v3 + 24 * (v22 & v11));
      v15 = *v13;
      v14 = v13[1];
      if (v5 == *v13 && v6 == v14)
        goto LABEL_11;
    }
    result = 0;
    if (v17)
      v13 = v17;
  }
LABEL_11:
  *a3 = v13;
  return result;
}

_QWORD *sub_1C51526A0(_DWORD *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C5152598((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C5152708(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = a2[1];
    *((_DWORD *)v5 + 4) = 0;
  }
  return v5;
}

_QWORD *sub_1C5152708(_DWORD *a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_11;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_11:
    sub_1C5152304((uint64_t)a1, v7);
    v9 = 0;
    sub_1C5152598((uint64_t)a1, a3, &v9);
    a4 = v9;
  }
  *a1 += 2;
  if (*a4 != -4096 || a4[1] != -4096)
    --a1[1];
  return a4;
}

void sub_1C51527D0(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _DWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _DWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  int v22;
  int v23;
  BOOL v24;
  BOOL v25;
  char v26;
  char v27;
  uint64_t *v28;
  char v29;
  BOOL v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  _DWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  int v39;
  int v40;
  _BOOL4 v41;
  int v42;
  int v43;
  __int128 v44;

uint64_t *sub_1C5152B24(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  _DWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  unint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  _BOOL4 v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _DWORD *v27;
  _QWORD *v28;
  _DWORD *v29;
  unint64_t v30;
  int v31;
  int v32;
  BOOL v33;
  char v34;
  char v35;
  uint64_t *v36;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (result != a2)
  {
    v40 = v3;
    v41 = v4;
    v5 = a2;
    v6 = result;
    v7 = result + 2;
    if (result + 2 != a2)
    {
      v9 = 0;
      v10 = result;
      do
      {
        v11 = v7;
        v12 = *(_DWORD **)a3;
        v13 = v10[3] & 0xFFFFFFFFFFFFFFF8;
        v38 = v10[2];
        v39 = v13;
        v14 = sub_1C51526A0(v12, &v38);
        v15 = *(_DWORD **)a3;
        v16 = v10[1] & 0xFFFFFFFFFFFFFFF8;
        v38 = *v10;
        v39 = v16;
        result = sub_1C51526A0(v15, &v38);
        v17 = *((_DWORD *)v14 + 4);
        v18 = *((_DWORD *)result + 4);
        v19 = v17 <= v18;
        v20 = v17 < v18;
        v21 = !v19;
        if (**(_BYTE **)(a3 + 8))
          v22 = v20;
        else
          v22 = v21;
        if (v22 == 1)
        {
          v23 = *v11;
          v24 = v10[3];
          v25 = v9;
          while (1)
          {
            v26 = (char *)v6 + v25;
            *(_OWORD *)((char *)v6 + v25 + 16) = *(_OWORD *)((char *)v6 + v25);
            if (!v25)
              break;
            v27 = *(_DWORD **)a3;
            v38 = v23;
            v39 = v24 & 0xFFFFFFFFFFFFFFF8;
            v28 = sub_1C51526A0(v27, &v38);
            v29 = *(_DWORD **)a3;
            v30 = *((_QWORD *)v26 - 1) & 0xFFFFFFFFFFFFFFF8;
            v38 = *((_QWORD *)v26 - 2);
            v39 = v30;
            result = sub_1C51526A0(v29, &v38);
            v31 = *((_DWORD *)v28 + 4);
            v32 = *((_DWORD *)result + 4);
            v19 = v31 <= v32;
            v33 = v31 < v32;
            v34 = !v19;
            if (**(_BYTE **)(a3 + 8))
              v35 = v33;
            else
              v35 = v34;
            v25 -= 16;
            if ((v35 & 1) == 0)
            {
              v36 = (uint64_t *)((char *)v6 + v25 + 16);
              goto LABEL_22;
            }
          }
          v36 = v6;
LABEL_22:
          *v36 = v23;
          v36[1] = v24;
          v5 = a2;
        }
        v7 = v11 + 2;
        v9 += 16;
        v10 = v11;
      }
      while (v11 + 2 != v5);
    }
  }
  return result;
}

uint64_t *sub_1C5152C98(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v9;
  _DWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _DWORD *v13;
  unint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  _BOOL4 v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  _DWORD *v25;
  _QWORD *v26;
  _DWORD *v27;
  unint64_t v28;
  int v29;
  int v30;
  BOOL v31;
  char v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (result != a2)
  {
    v36 = v3;
    v37 = v4;
    v6 = result;
    v7 = result + 2;
    if (result + 2 != a2)
    {
      do
      {
        v9 = v7;
        v10 = *(_DWORD **)a3;
        v11 = v6[3] & 0xFFFFFFFFFFFFFFF8;
        v34 = v6[2];
        v35 = v11;
        v12 = sub_1C51526A0(v10, &v34);
        v13 = *(_DWORD **)a3;
        v14 = v6[1] & 0xFFFFFFFFFFFFFFF8;
        v34 = *v6;
        v35 = v14;
        result = sub_1C51526A0(v13, &v34);
        v15 = *((_DWORD *)v12 + 4);
        v16 = *((_DWORD *)result + 4);
        v17 = v15 <= v16;
        v18 = v15 < v16;
        v19 = !v17;
        if (**(_BYTE **)(a3 + 8))
          v20 = v18;
        else
          v20 = v19;
        if (v20 == 1)
        {
          v21 = *v9;
          v22 = v6[3];
          v23 = v9;
          do
          {
            *(_OWORD *)v23 = *((_OWORD *)v23 - 1);
            v25 = *(_DWORD **)a3;
            v34 = v21;
            v35 = v22 & 0xFFFFFFFFFFFFFFF8;
            v26 = sub_1C51526A0(v25, &v34);
            v27 = *(_DWORD **)a3;
            v28 = *(v23 - 3) & 0xFFFFFFFFFFFFFFF8;
            v34 = *(v23 - 4);
            v35 = v28;
            result = sub_1C51526A0(v27, &v34);
            v29 = *((_DWORD *)v26 + 4);
            v30 = *((_DWORD *)result + 4);
            v17 = v29 <= v30;
            v31 = v29 < v30;
            v32 = !v17;
            if (**(_BYTE **)(a3 + 8))
              v33 = v31;
            else
              v33 = v32;
            v24 = v23 - 2;
            v23 -= 2;
          }
          while ((v33 & 1) != 0);
          *v24 = v21;
          v24[1] = v22;
        }
        v7 = v9 + 2;
        v6 = v9;
      }
      while (v9 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_1C5152DE4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  _DWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  _DWORD *v14;
  int v15;
  BOOL v16;
  BOOL v17;
  char v18;
  unint64_t v19;
  _QWORD *v20;
  _DWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  int v24;
  int v25;
  _BOOL4 v26;
  int v27;
  int v28;
  __int128 v29;
  unint64_t v30;
  _QWORD *v31;
  _DWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  int v35;
  int v36;
  _BOOL4 v37;
  int v38;
  int v39;
  __int128 v40;
  _DWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  _DWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  int v47;
  int v48;
  _BOOL4 v49;
  int v50;
  int v51;
  __int128 v52;
  __int128 v53;
  _DWORD *v54;
  unint64_t v55;
  _QWORD *v56;
  _DWORD *v57;
  unint64_t v58;
  _QWORD *v59;
  int v60;
  int v61;
  _BOOL4 v62;
  int v63;
  int v64;
  __int128 v65;
  uint64_t v67;
  unint64_t v68;

  v8 = *(_DWORD **)a4;
  v9 = a2[1] & 0xFFFFFFFFFFFFFFF8;
  v67 = *a2;
  v68 = v9;
  v10 = sub_1C51526A0(v8, &v67);
  v11 = *(_DWORD **)a4;
  v12 = a1[1] & 0xFFFFFFFFFFFFFFF8;
  v67 = *a1;
  v68 = v12;
  v13 = sub_1C51526A0(v11, &v67);
  v14 = *(_DWORD **)a4;
  v15 = *((_DWORD *)v10 + 4);
  LODWORD(v13) = *((_DWORD *)v13 + 4);
  v16 = v15 <= (int)v13;
  v17 = v15 < (int)v13;
  v18 = !v16;
  if (!**(_BYTE **)(a4 + 8))
    v17 = v18;
  if (v17)
  {
    v19 = a3[1] & 0xFFFFFFFFFFFFFFF8;
    v67 = *a3;
    v68 = v19;
    v20 = sub_1C51526A0(v14, &v67);
    v21 = *(_DWORD **)a4;
    v22 = a2[1] & 0xFFFFFFFFFFFFFFF8;
    v67 = *a2;
    v68 = v22;
    v23 = sub_1C51526A0(v21, &v67);
    v24 = *((_DWORD *)v20 + 4);
    v25 = *((_DWORD *)v23 + 4);
    v16 = v24 <= v25;
    v26 = v24 < v25;
    v27 = !v16;
    if (**(_BYTE **)(a4 + 8))
      v28 = v26;
    else
      v28 = v27;
    if (v28 == 1)
    {
      v29 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v29;
      return 1;
    }
    v53 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v53;
    v54 = *(_DWORD **)a4;
    v55 = a3[1] & 0xFFFFFFFFFFFFFFF8;
    v67 = *a3;
    v68 = v55;
    v56 = sub_1C51526A0(v54, &v67);
    v57 = *(_DWORD **)a4;
    v58 = a2[1] & 0xFFFFFFFFFFFFFFF8;
    v67 = *a2;
    v68 = v58;
    v59 = sub_1C51526A0(v57, &v67);
    v60 = *((_DWORD *)v56 + 4);
    v61 = *((_DWORD *)v59 + 4);
    v16 = v60 <= v61;
    v62 = v60 < v61;
    v63 = !v16;
    if (**(_BYTE **)(a4 + 8))
      v64 = v62;
    else
      v64 = v63;
    if (v64 != 1)
      return 1;
    v65 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v65;
    return 2;
  }
  v30 = a3[1] & 0xFFFFFFFFFFFFFFF8;
  v67 = *a3;
  v68 = v30;
  v31 = sub_1C51526A0(v14, &v67);
  v32 = *(_DWORD **)a4;
  v33 = a2[1] & 0xFFFFFFFFFFFFFFF8;
  v67 = *a2;
  v68 = v33;
  v34 = sub_1C51526A0(v32, &v67);
  v35 = *((_DWORD *)v31 + 4);
  v36 = *((_DWORD *)v34 + 4);
  v16 = v35 <= v36;
  v37 = v35 < v36;
  v38 = !v16;
  if (**(_BYTE **)(a4 + 8))
    v39 = v37;
  else
    v39 = v38;
  if (v39 == 1)
  {
    v40 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v40;
    v41 = *(_DWORD **)a4;
    v42 = a2[1] & 0xFFFFFFFFFFFFFFF8;
    v67 = *a2;
    v68 = v42;
    v43 = sub_1C51526A0(v41, &v67);
    v44 = *(_DWORD **)a4;
    v45 = a1[1] & 0xFFFFFFFFFFFFFFF8;
    v67 = *a1;
    v68 = v45;
    v46 = sub_1C51526A0(v44, &v67);
    v47 = *((_DWORD *)v43 + 4);
    v48 = *((_DWORD *)v46 + 4);
    v16 = v47 <= v48;
    v49 = v47 < v48;
    v50 = !v16;
    if (**(_BYTE **)(a4 + 8))
      v51 = v49;
    else
      v51 = v50;
    if (v51 != 1)
      return 1;
    v52 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v52;
    return 2;
  }
  return 0;
}

_QWORD *sub_1C5153068(_QWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _QWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  int v13;
  int v14;
  BOOL v15;
  BOOL v16;
  char v17;
  char v18;
  _QWORD *v19;
  _DWORD *v20;
  _QWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  int v27;
  BOOL v28;
  char v29;
  char v30;
  _QWORD *v31;
  _DWORD *v32;
  _QWORD *v33;
  _DWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  int v37;
  int v38;
  _BOOL4 v39;
  int v40;
  _DWORD *v41;
  _QWORD *v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  int v48;
  BOOL v49;
  char v50;
  char v51;
  _DWORD *v52;
  _QWORD *v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  int v58;
  int v59;
  _BOOL4 v60;
  int v61;
  int v62;
  _DWORD *v63;
  _QWORD *v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  int v69;
  int v70;
  BOOL v71;
  char v72;
  char v73;
  __int128 v75;

  v6 = *a1;
  v7 = a1[1];
  v8 = *(_DWORD **)a3;
  *(_QWORD *)&v75 = v6;
  *((_QWORD *)&v75 + 1) = v7 & 0xFFFFFFFFFFFFFFF8;
  v9 = sub_1C51526A0(v8, (uint64_t *)&v75);
  v10 = *(_DWORD **)a3;
  v11 = *((_QWORD *)a2 - 1) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)&v75 = *((_QWORD *)a2 - 2);
  *((_QWORD *)&v75 + 1) = v11;
  v12 = sub_1C51526A0(v10, (uint64_t *)&v75);
  v13 = *((_DWORD *)v9 + 4);
  v14 = *((_DWORD *)v12 + 4);
  v15 = v13 <= v14;
  v16 = v13 < v14;
  v17 = !v15;
  if (**(_BYTE **)(a3 + 8))
    v18 = v16;
  else
    v18 = v17;
  if ((v18 & 1) != 0)
  {
    v19 = a1;
    do
    {
      v20 = *(_DWORD **)a3;
      *(_QWORD *)&v75 = v6;
      *((_QWORD *)&v75 + 1) = v7 & 0xFFFFFFFFFFFFFFF8;
      v21 = sub_1C51526A0(v20, (uint64_t *)&v75);
      v22 = *(_DWORD **)a3;
      v23 = v19[2];
      v24 = v19[3];
      v19 += 2;
      *(_QWORD *)&v75 = v23;
      *((_QWORD *)&v75 + 1) = v24 & 0xFFFFFFFFFFFFFFF8;
      v25 = sub_1C51526A0(v22, (uint64_t *)&v75);
      v26 = *((_DWORD *)v21 + 4);
      v27 = *((_DWORD *)v25 + 4);
      v15 = v26 <= v27;
      v28 = v26 < v27;
      v29 = !v15;
      if (**(_BYTE **)(a3 + 8))
        v30 = v28;
      else
        v30 = v29;
    }
    while ((v30 & 1) == 0);
  }
  else
  {
    v31 = a1 + 2;
    do
    {
      v19 = v31;
      if (v31 >= (_QWORD *)a2)
        break;
      v32 = *(_DWORD **)a3;
      *(_QWORD *)&v75 = v6;
      *((_QWORD *)&v75 + 1) = v7 & 0xFFFFFFFFFFFFFFF8;
      v33 = sub_1C51526A0(v32, (uint64_t *)&v75);
      v34 = *(_DWORD **)a3;
      v35 = v19[1] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)&v75 = *v19;
      *((_QWORD *)&v75 + 1) = v35;
      v36 = sub_1C51526A0(v34, (uint64_t *)&v75);
      v37 = *((_DWORD *)v33 + 4);
      v38 = *((_DWORD *)v36 + 4);
      v15 = v37 <= v38;
      v39 = v37 < v38;
      v40 = !v15;
      if (!**(_BYTE **)(a3 + 8))
        v39 = v40;
      v31 = v19 + 2;
    }
    while (!v39);
  }
  if (v19 < (_QWORD *)a2)
  {
    do
    {
      v41 = *(_DWORD **)a3;
      *(_QWORD *)&v75 = v6;
      *((_QWORD *)&v75 + 1) = v7 & 0xFFFFFFFFFFFFFFF8;
      v42 = sub_1C51526A0(v41, (uint64_t *)&v75);
      v43 = *(_DWORD **)a3;
      v44 = *((_QWORD *)a2 - 2);
      v45 = *((_QWORD *)a2-- - 1);
      *(_QWORD *)&v75 = v44;
      *((_QWORD *)&v75 + 1) = v45 & 0xFFFFFFFFFFFFFFF8;
      v46 = sub_1C51526A0(v43, (uint64_t *)&v75);
      v47 = *((_DWORD *)v42 + 4);
      v48 = *((_DWORD *)v46 + 4);
      v15 = v47 <= v48;
      v49 = v47 < v48;
      v50 = !v15;
      if (**(_BYTE **)(a3 + 8))
        v51 = v49;
      else
        v51 = v50;
    }
    while ((v51 & 1) != 0);
  }
  while (v19 < (_QWORD *)a2)
  {
    v75 = *(_OWORD *)v19;
    *(_OWORD *)v19 = *a2;
    *a2 = v75;
    do
    {
      v52 = *(_DWORD **)a3;
      *(_QWORD *)&v75 = v6;
      *((_QWORD *)&v75 + 1) = v7 & 0xFFFFFFFFFFFFFFF8;
      v53 = sub_1C51526A0(v52, (uint64_t *)&v75);
      v54 = *(_DWORD **)a3;
      v55 = v19[2];
      v56 = v19[3];
      v19 += 2;
      *(_QWORD *)&v75 = v55;
      *((_QWORD *)&v75 + 1) = v56 & 0xFFFFFFFFFFFFFFF8;
      v57 = sub_1C51526A0(v54, (uint64_t *)&v75);
      v58 = *((_DWORD *)v53 + 4);
      v59 = *((_DWORD *)v57 + 4);
      v15 = v58 <= v59;
      v60 = v58 < v59;
      v61 = !v15;
      if (**(_BYTE **)(a3 + 8))
        v62 = v60;
      else
        v62 = v61;
    }
    while (v62 != 1);
    do
    {
      v63 = *(_DWORD **)a3;
      *(_QWORD *)&v75 = v6;
      *((_QWORD *)&v75 + 1) = v7 & 0xFFFFFFFFFFFFFFF8;
      v64 = sub_1C51526A0(v63, (uint64_t *)&v75);
      v65 = *(_DWORD **)a3;
      v66 = *((_QWORD *)a2 - 2);
      v67 = *((_QWORD *)a2-- - 1);
      *(_QWORD *)&v75 = v66;
      *((_QWORD *)&v75 + 1) = v67 & 0xFFFFFFFFFFFFFFF8;
      v68 = sub_1C51526A0(v65, (uint64_t *)&v75);
      v69 = *((_DWORD *)v64 + 4);
      v70 = *((_DWORD *)v68 + 4);
      v15 = v69 <= v70;
      v71 = v69 < v70;
      v72 = !v15;
      if (**(_BYTE **)(a3 + 8))
        v73 = v71;
      else
        v73 = v72;
    }
    while ((v73 & 1) != 0);
  }
  if (v19 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v19 - 1);
  *(v19 - 2) = v6;
  *(v19 - 1) = v7;
  return v19;
}

uint64_t *sub_1C5153318(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  _QWORD *v13;
  int v14;
  int v15;
  BOOL v16;
  BOOL v17;
  char v18;
  char v19;
  uint64_t *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _DWORD *v25;
  _QWORD *v26;
  int v27;
  int v28;
  _BOOL4 v29;
  int v30;
  int v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _DWORD *v36;
  _QWORD *v37;
  int v38;
  int v39;
  BOOL v40;
  BOOL v41;
  uint64_t *v43;
  uint64_t *v44;
  __int128 v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _DWORD *v50;
  _QWORD *v51;
  int v52;
  int v53;
  BOOL v54;
  char v55;
  char v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _DWORD *v61;
  _QWORD *v62;
  int v63;
  int v64;
  _BOOL4 v65;
  int v66;
  int v67;
  uint64_t *result;
  __int128 v69;

  v6 = 0;
  v7 = *a1;
  v8 = a1[1];
  do
  {
    v9 = *(_DWORD **)a3;
    v10 = a1[v6 + 3] & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)&v69 = a1[v6 + 2];
    *((_QWORD *)&v69 + 1) = v10;
    v11 = sub_1C51526A0(v9, (uint64_t *)&v69);
    v12 = *(_DWORD **)a3;
    *(_QWORD *)&v69 = v7;
    *((_QWORD *)&v69 + 1) = v8 & 0xFFFFFFFFFFFFFFF8;
    v13 = sub_1C51526A0(v12, (uint64_t *)&v69);
    v14 = *((_DWORD *)v11 + 4);
    v15 = *((_DWORD *)v13 + 4);
    v16 = v14 <= v15;
    v17 = v14 < v15;
    v18 = !v16;
    if (**(_BYTE **)(a3 + 8))
      v19 = v17;
    else
      v19 = v18;
    v6 += 2;
  }
  while ((v19 & 1) != 0);
  v20 = &a1[v6];
  if (v6 == 2)
  {
    do
    {
      if (v20 >= a2)
        break;
      v32 = *(_DWORD **)a3;
      v33 = *(a2 - 2);
      v34 = *(a2 - 1);
      a2 -= 2;
      *(_QWORD *)&v69 = v33;
      *((_QWORD *)&v69 + 1) = v34 & 0xFFFFFFFFFFFFFFF8;
      v35 = sub_1C51526A0(v32, (uint64_t *)&v69);
      v36 = *(_DWORD **)a3;
      *(_QWORD *)&v69 = v7;
      *((_QWORD *)&v69 + 1) = v8 & 0xFFFFFFFFFFFFFFF8;
      v37 = sub_1C51526A0(v36, (uint64_t *)&v69);
      v38 = *((_DWORD *)v35 + 4);
      v39 = *((_DWORD *)v37 + 4);
      v16 = v38 <= v39;
      v40 = v38 < v39;
      v41 = !v16;
    }
    while (!(**(_BYTE **)(a3 + 8) ? v40 : v41));
  }
  else
  {
    do
    {
      v21 = *(_DWORD **)a3;
      v22 = *(a2 - 2);
      v23 = *(a2 - 1);
      a2 -= 2;
      *(_QWORD *)&v69 = v22;
      *((_QWORD *)&v69 + 1) = v23 & 0xFFFFFFFFFFFFFFF8;
      v24 = sub_1C51526A0(v21, (uint64_t *)&v69);
      v25 = *(_DWORD **)a3;
      *(_QWORD *)&v69 = v7;
      *((_QWORD *)&v69 + 1) = v8 & 0xFFFFFFFFFFFFFFF8;
      v26 = sub_1C51526A0(v25, (uint64_t *)&v69);
      v27 = *((_DWORD *)v24 + 4);
      v28 = *((_DWORD *)v26 + 4);
      v16 = v27 <= v28;
      v29 = v27 < v28;
      v30 = !v16;
      if (**(_BYTE **)(a3 + 8))
        v31 = v29;
      else
        v31 = v30;
    }
    while (v31 != 1);
  }
  v43 = &a1[v6];
  if (v20 < a2)
  {
    v44 = a2;
    do
    {
      v69 = *(_OWORD *)v43;
      v45 = v69;
      *(_OWORD *)v43 = *(_OWORD *)v44;
      *(_OWORD *)v44 = v45;
      do
      {
        v46 = *(_DWORD **)a3;
        v47 = v43[2];
        v48 = v43[3];
        v43 += 2;
        *(_QWORD *)&v69 = v47;
        *((_QWORD *)&v69 + 1) = v48 & 0xFFFFFFFFFFFFFFF8;
        v49 = sub_1C51526A0(v46, (uint64_t *)&v69);
        v50 = *(_DWORD **)a3;
        *(_QWORD *)&v69 = v7;
        *((_QWORD *)&v69 + 1) = v8 & 0xFFFFFFFFFFFFFFF8;
        v51 = sub_1C51526A0(v50, (uint64_t *)&v69);
        v52 = *((_DWORD *)v49 + 4);
        v53 = *((_DWORD *)v51 + 4);
        v16 = v52 <= v53;
        v54 = v52 < v53;
        v55 = !v16;
        if (**(_BYTE **)(a3 + 8))
          v56 = v54;
        else
          v56 = v55;
      }
      while ((v56 & 1) != 0);
      do
      {
        v57 = *(_DWORD **)a3;
        v58 = *(v44 - 2);
        v59 = *(v44 - 1);
        v44 -= 2;
        *(_QWORD *)&v69 = v58;
        *((_QWORD *)&v69 + 1) = v59 & 0xFFFFFFFFFFFFFFF8;
        v60 = sub_1C51526A0(v57, (uint64_t *)&v69);
        v61 = *(_DWORD **)a3;
        *(_QWORD *)&v69 = v7;
        *((_QWORD *)&v69 + 1) = v8 & 0xFFFFFFFFFFFFFFF8;
        v62 = sub_1C51526A0(v61, (uint64_t *)&v69);
        v63 = *((_DWORD *)v60 + 4);
        v64 = *((_DWORD *)v62 + 4);
        v16 = v63 <= v64;
        v65 = v63 < v64;
        v66 = !v16;
        if (**(_BYTE **)(a3 + 8))
          v67 = v65;
        else
          v67 = v66;
      }
      while (v67 != 1);
    }
    while (v43 < v44);
  }
  result = v43 - 2;
  if (v43 - 2 != a1)
    *(_OWORD *)a1 = *(_OWORD *)result;
  *(v43 - 2) = v7;
  *(v43 - 1) = v8;
  return result;
}

BOOL sub_1C5153588(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;
  _BOOL8 result;
  _DWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  int v15;
  int v16;
  BOOL v17;
  _BOOL4 v18;
  int v19;
  int v20;
  __int128 v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  _DWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  int v32;
  int v33;
  _BOOL4 v34;
  _BOOL4 v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _DWORD *v40;
  _QWORD *v41;
  _DWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  int v45;
  int v46;
  BOOL v47;
  char v48;
  char v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;

  v4 = a2;
  v6 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(_DWORD **)a3;
      v9 = *(a2 - 1);
      v10 = a2 - 2;
      v53 = *(a2 - 2);
      v54 = v9 & 0xFFFFFFFFFFFFFFF8;
      v11 = sub_1C51526A0(v8, &v53);
      v12 = *(_DWORD **)a3;
      v13 = a1[1] & 0xFFFFFFFFFFFFFFF8;
      v53 = *a1;
      v54 = v13;
      v14 = sub_1C51526A0(v12, &v53);
      v15 = *((_DWORD *)v11 + 4);
      v16 = *((_DWORD *)v14 + 4);
      v17 = v15 <= v16;
      v18 = v15 < v16;
      v19 = !v17;
      if (**(_BYTE **)(a3 + 8))
        v20 = v18;
      else
        v20 = v19;
      if (v20 == 1)
      {
        v21 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v10;
        *(_OWORD *)v10 = v21;
      }
      return 1;
    case 3:
      sub_1C5152DE4(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      sub_1C5153824(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      sub_1C51539C0(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v22 = a1 + 4;
      sub_1C5152DE4(a1, a1 + 2, a1 + 4, a3);
      v23 = a1 + 6;
      if (a1 + 6 == v4)
        return 1;
      v24 = 0;
      v25 = 0;
      v51 = v4;
      break;
  }
  while (1)
  {
    v26 = *(_DWORD **)a3;
    v27 = v23[1] & 0xFFFFFFFFFFFFFFF8;
    v53 = *v23;
    v54 = v27;
    v28 = sub_1C51526A0(v26, &v53);
    v29 = *(_DWORD **)a3;
    v30 = v22[1] & 0xFFFFFFFFFFFFFFF8;
    v53 = *v22;
    v54 = v30;
    v31 = sub_1C51526A0(v29, &v53);
    v32 = *((_DWORD *)v28 + 4);
    v33 = *((_DWORD *)v31 + 4);
    v17 = v32 <= v33;
    v34 = v32 < v33;
    v35 = !v17;
    if (**(_BYTE **)(a3 + 8) ? v34 : v35)
    {
      v37 = *v23;
      v52 = v23[1];
      v38 = v24;
      while (1)
      {
        v39 = (char *)a1 + v38;
        *(_OWORD *)((char *)a1 + v38 + 48) = *(_OWORD *)((char *)a1 + v38 + 32);
        if (v38 == -32)
          break;
        v40 = *(_DWORD **)a3;
        v53 = v37;
        v54 = v52 & 0xFFFFFFFFFFFFFFF8;
        v41 = sub_1C51526A0(v40, &v53);
        v42 = *(_DWORD **)a3;
        v43 = *((_QWORD *)v39 + 3) & 0xFFFFFFFFFFFFFFF8;
        v53 = *((_QWORD *)v39 + 2);
        v54 = v43;
        v44 = sub_1C51526A0(v42, &v53);
        v45 = *((_DWORD *)v41 + 4);
        v46 = *((_DWORD *)v44 + 4);
        v17 = v45 <= v46;
        v47 = v45 < v46;
        v48 = !v17;
        if (**(_BYTE **)(a3 + 8))
          v49 = v47;
        else
          v49 = v48;
        v38 -= 16;
        if ((v49 & 1) == 0)
        {
          v50 = (uint64_t *)((char *)a1 + v38 + 48);
          goto LABEL_30;
        }
      }
      v50 = a1;
LABEL_30:
      v4 = v51;
      *v50 = v37;
      v50[1] = v52;
      if (++v25 == 8)
        return v23 + 2 == v51;
    }
    v22 = v23;
    v24 += 16;
    v23 += 2;
    if (v23 == v4)
      return 1;
  }
}

__n128 sub_1C5153824(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _DWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _DWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  __n128 result;
  int v17;
  int v18;
  BOOL v19;
  _BOOL4 v20;
  int v21;
  int v22;
  __int128 v23;
  _DWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  _DWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  int v30;
  int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  __int128 v35;
  _DWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  _DWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  int v42;
  int v43;
  _BOOL4 v44;
  int v45;
  int v46;
  uint64_t v47;
  unint64_t v48;

  sub_1C5152DE4(a1, a2, a3, a5);
  v10 = *(_DWORD **)a5;
  v11 = a4[1] & 0xFFFFFFFFFFFFFFF8;
  v47 = *a4;
  v48 = v11;
  v12 = sub_1C51526A0(v10, &v47);
  v13 = *(_DWORD **)a5;
  v14 = a3[1] & 0xFFFFFFFFFFFFFFF8;
  v47 = *a3;
  v48 = v14;
  v15 = sub_1C51526A0(v13, &v47);
  v17 = *((_DWORD *)v12 + 4);
  v18 = *((_DWORD *)v15 + 4);
  v19 = v17 <= v18;
  v20 = v17 < v18;
  v21 = !v19;
  if (**(_BYTE **)(a5 + 8))
    v22 = v20;
  else
    v22 = v21;
  if (v22 == 1)
  {
    v23 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v23;
    v24 = *(_DWORD **)a5;
    v25 = a3[1] & 0xFFFFFFFFFFFFFFF8;
    v47 = *a3;
    v48 = v25;
    v26 = sub_1C51526A0(v24, &v47);
    v27 = *(_DWORD **)a5;
    v28 = a2[1] & 0xFFFFFFFFFFFFFFF8;
    v47 = *a2;
    v48 = v28;
    v29 = sub_1C51526A0(v27, &v47);
    v30 = *((_DWORD *)v26 + 4);
    v31 = *((_DWORD *)v29 + 4);
    v19 = v30 <= v31;
    v32 = v30 < v31;
    v33 = !v19;
    if (**(_BYTE **)(a5 + 8) ? v32 : v33)
    {
      v35 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v35;
      v36 = *(_DWORD **)a5;
      v37 = a2[1] & 0xFFFFFFFFFFFFFFF8;
      v47 = *a2;
      v48 = v37;
      v38 = sub_1C51526A0(v36, &v47);
      v39 = *(_DWORD **)a5;
      v40 = a1[1] & 0xFFFFFFFFFFFFFFF8;
      v47 = *a1;
      v48 = v40;
      v41 = sub_1C51526A0(v39, &v47);
      v42 = *((_DWORD *)v38 + 4);
      v43 = *((_DWORD *)v41 + 4);
      v19 = v42 <= v43;
      v44 = v42 < v43;
      v45 = !v19;
      if (**(_BYTE **)(a5 + 8))
        v46 = v44;
      else
        v46 = v45;
      if (v46 == 1)
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_1C51539C0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  _DWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  __n128 result;
  int v19;
  int v20;
  BOOL v21;
  _BOOL4 v22;
  int v23;
  int v24;
  __int128 v25;
  _DWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  _DWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  int v32;
  int v33;
  _BOOL4 v34;
  _BOOL4 v35;
  __int128 v37;
  _DWORD *v38;
  unint64_t v39;
  _QWORD *v40;
  _DWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  int v44;
  int v45;
  _BOOL4 v46;
  _BOOL4 v47;
  __int128 v49;
  _DWORD *v50;
  unint64_t v51;
  _QWORD *v52;
  _DWORD *v53;
  unint64_t v54;
  _QWORD *v55;
  int v56;
  int v57;
  _BOOL4 v58;
  int v59;
  int v60;
  uint64_t v61;
  unint64_t v62;

  sub_1C5153824(a1, a2, a3, a4, a6);
  v12 = *(_DWORD **)a6;
  v13 = a5[1] & 0xFFFFFFFFFFFFFFF8;
  v61 = *a5;
  v62 = v13;
  v14 = sub_1C51526A0(v12, &v61);
  v15 = *(_DWORD **)a6;
  v16 = a4[1] & 0xFFFFFFFFFFFFFFF8;
  v61 = *a4;
  v62 = v16;
  v17 = sub_1C51526A0(v15, &v61);
  v19 = *((_DWORD *)v14 + 4);
  v20 = *((_DWORD *)v17 + 4);
  v21 = v19 <= v20;
  v22 = v19 < v20;
  v23 = !v21;
  if (**(_BYTE **)(a6 + 8))
    v24 = v22;
  else
    v24 = v23;
  if (v24 == 1)
  {
    v25 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v25;
    v26 = *(_DWORD **)a6;
    v27 = a4[1] & 0xFFFFFFFFFFFFFFF8;
    v61 = *a4;
    v62 = v27;
    v28 = sub_1C51526A0(v26, &v61);
    v29 = *(_DWORD **)a6;
    v30 = a3[1] & 0xFFFFFFFFFFFFFFF8;
    v61 = *a3;
    v62 = v30;
    v31 = sub_1C51526A0(v29, &v61);
    v32 = *((_DWORD *)v28 + 4);
    v33 = *((_DWORD *)v31 + 4);
    v21 = v32 <= v33;
    v34 = v32 < v33;
    v35 = !v21;
    if (**(_BYTE **)(a6 + 8) ? v34 : v35)
    {
      v37 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v37;
      v38 = *(_DWORD **)a6;
      v39 = a3[1] & 0xFFFFFFFFFFFFFFF8;
      v61 = *a3;
      v62 = v39;
      v40 = sub_1C51526A0(v38, &v61);
      v41 = *(_DWORD **)a6;
      v42 = a2[1] & 0xFFFFFFFFFFFFFFF8;
      v61 = *a2;
      v62 = v42;
      v43 = sub_1C51526A0(v41, &v61);
      v44 = *((_DWORD *)v40 + 4);
      v45 = *((_DWORD *)v43 + 4);
      v21 = v44 <= v45;
      v46 = v44 < v45;
      v47 = !v21;
      if (**(_BYTE **)(a6 + 8) ? v46 : v47)
      {
        v49 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v49;
        v50 = *(_DWORD **)a6;
        v51 = a2[1] & 0xFFFFFFFFFFFFFFF8;
        v61 = *a2;
        v62 = v51;
        v52 = sub_1C51526A0(v50, &v61);
        v53 = *(_DWORD **)a6;
        v54 = a1[1] & 0xFFFFFFFFFFFFFFF8;
        v61 = *a1;
        v62 = v54;
        v55 = sub_1C51526A0(v53, &v61);
        v56 = *((_DWORD *)v52 + 4);
        v57 = *((_DWORD *)v55 + 4);
        v21 = v56 <= v57;
        v58 = v56 < v57;
        v59 = !v21;
        if (**(_BYTE **)(a6 + 8))
          v60 = v58;
        else
          v60 = v59;
        if (v60 == 1)
        {
          result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1C5153BD8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  _DWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _DWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  int v21;
  int v22;
  BOOL v23;
  _BOOL4 v24;
  int v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  _DWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  int v39;
  int v40;
  _BOOL4 v41;
  _BOOL4 v42;
  uint64_t *v45;
  uint64_t *v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        sub_1C5153E44(a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *(_DWORD **)a4;
        v16 = v14[1] & 0xFFFFFFFFFFFFFFF8;
        v48 = *v14;
        v49 = v16;
        v17 = sub_1C51526A0(v15, &v48);
        v18 = *(_DWORD **)a4;
        v19 = a1[1] & 0xFFFFFFFFFFFFFFF8;
        v48 = *a1;
        v49 = v19;
        v20 = sub_1C51526A0(v18, &v48);
        v21 = *((_DWORD *)v17 + 4);
        v22 = *((_DWORD *)v20 + 4);
        v23 = v21 <= v22;
        v24 = v21 < v22;
        v25 = !v23;
        if (**(_BYTE **)(a4 + 8))
          v26 = v24;
        else
          v26 = v25;
        if (v26 == 1)
        {
          v27 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v27;
          sub_1C5153E44(a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 < 17)
    {
      return v13;
    }
    else
    {
      v45 = v13;
      do
      {
        v46 = v6;
        v28 = 0;
        v47 = *(_OWORD *)a1;
        v29 = a1;
        do
        {
          v30 = &v29[2 * v28 + 2];
          v31 = (2 * v28) | 1;
          v32 = 2 * v28 + 2;
          if (v32 < v9)
          {
            v33 = *(_DWORD **)a4;
            v34 = v30[1] & 0xFFFFFFFFFFFFFFF8;
            v48 = *v30;
            v49 = v34;
            v35 = sub_1C51526A0(v33, &v48);
            v36 = *(_DWORD **)a4;
            v37 = v30[3] & 0xFFFFFFFFFFFFFFF8;
            v48 = v30[2];
            v49 = v37;
            v38 = sub_1C51526A0(v36, &v48);
            v39 = *((_DWORD *)v35 + 4);
            v40 = *((_DWORD *)v38 + 4);
            v23 = v39 <= v40;
            v41 = v39 < v40;
            v42 = !v23;
            if (**(_BYTE **)(a4 + 8) ? v41 : v42)
            {
              v30 += 2;
              v31 = v32;
            }
          }
          *(_OWORD *)v29 = *(_OWORD *)v30;
          v29 = v30;
          v28 = v31;
        }
        while (v31 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
        v6 -= 2;
        if (v30 == v46 - 2)
        {
          *(_OWORD *)v30 = v47;
        }
        else
        {
          *(_OWORD *)v30 = *(_OWORD *)v6;
          *(_OWORD *)v6 = v47;
          sub_1C51540C0(a1, (uint64_t)(v30 + 2), a4, ((char *)(v30 + 2) - (char *)a1) >> 4);
        }
        v23 = v9-- <= 2;
      }
      while (!v23);
      return v45;
    }
  }
  return a3;
}

_QWORD *sub_1C5153E44(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _DWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  int v22;
  int v23;
  BOOL v24;
  _BOOL4 v25;
  _BOOL4 v26;
  _DWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _DWORD *v31;
  unint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  _DWORD *v45;
  unint64_t v46;
  _QWORD *v47;
  int v48;
  int v49;
  _BOOL4 v50;
  int v51;
  int v52;
  _DWORD *v53;
  unint64_t v54;
  _QWORD *v55;
  _DWORD *v56;
  int v57;
  int v58;
  _BOOL4 v59;
  _BOOL4 v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v66 = v4;
    v67 = v5;
    v7 = a4;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((char *)a4 - (char *)result) >> 4)
    {
      v10 = a3;
      v12 = a4 - result;
      v13 = v12 + 1;
      v14 = &result[2 * v12 + 2];
      v15 = v12 + 2;
      if (v12 + 2 < a3)
      {
        v16 = *(_DWORD **)a2;
        v17 = v14[1] & 0xFFFFFFFFFFFFFFF8;
        v64 = *v14;
        v65 = v17;
        v18 = sub_1C51526A0(v16, &v64);
        v19 = *(_DWORD **)a2;
        v20 = v14[3] & 0xFFFFFFFFFFFFFFF8;
        v64 = v14[2];
        v65 = v20;
        v21 = sub_1C51526A0(v19, &v64);
        v22 = *((_DWORD *)v18 + 4);
        v23 = *((_DWORD *)v21 + 4);
        v24 = v22 <= v23;
        v25 = v22 < v23;
        v26 = !v24;
        if (**(_BYTE **)(a2 + 8) ? v25 : v26)
        {
          v14 += 2;
          v13 = v15;
        }
      }
      v28 = *(_DWORD **)a2;
      v29 = v14[1] & 0xFFFFFFFFFFFFFFF8;
      v64 = *v14;
      v65 = v29;
      v30 = sub_1C51526A0(v28, &v64);
      v31 = *(_DWORD **)a2;
      v32 = v7[1] & 0xFFFFFFFFFFFFFFF8;
      v64 = *v7;
      v65 = v32;
      result = sub_1C51526A0(v31, &v64);
      v33 = *((_DWORD *)v30 + 4);
      v34 = *((_DWORD *)result + 4);
      v24 = v33 <= v34;
      v35 = v33 < v34;
      v36 = !v24;
      if (**(_BYTE **)(a2 + 8))
        v37 = v35;
      else
        v37 = v36;
      if ((v37 & 1) == 0)
      {
        v38 = *v7;
        v62 = v7[1];
        v63 = v10;
        do
        {
          v39 = v14;
          *(_OWORD *)v7 = *(_OWORD *)v14;
          if (v9 < v13)
            break;
          v40 = (2 * v13) | 1;
          v14 = &v8[2 * v40];
          v41 = 2 * v13 + 2;
          if (v41 < v10)
          {
            v42 = *(_DWORD **)a2;
            v43 = v14[1] & 0xFFFFFFFFFFFFFFF8;
            v64 = *v14;
            v65 = v43;
            v44 = sub_1C51526A0(v42, &v64);
            v45 = *(_DWORD **)a2;
            v46 = v14[3] & 0xFFFFFFFFFFFFFFF8;
            v64 = v14[2];
            v65 = v46;
            v47 = sub_1C51526A0(v45, &v64);
            v48 = *((_DWORD *)v44 + 4);
            v49 = *((_DWORD *)v47 + 4);
            v24 = v48 <= v49;
            v50 = v48 < v49;
            v51 = !v24;
            if (**(_BYTE **)(a2 + 8))
              v52 = v50;
            else
              v52 = v51;
            if (v52)
              v14 += 2;
            v10 = v63;
            if (v52)
              v40 = v41;
          }
          v53 = *(_DWORD **)a2;
          v54 = v14[1] & 0xFFFFFFFFFFFFFFF8;
          v64 = *v14;
          v65 = v54;
          v55 = sub_1C51526A0(v53, &v64);
          v56 = *(_DWORD **)a2;
          v64 = v38;
          v65 = v62 & 0xFFFFFFFFFFFFFFF8;
          result = sub_1C51526A0(v56, &v64);
          v57 = *((_DWORD *)v55 + 4);
          v58 = *((_DWORD *)result + 4);
          v24 = v57 <= v58;
          v59 = v57 < v58;
          v60 = !v24;
          v61 = **(_BYTE **)(a2 + 8) ? v59 : v60;
          v7 = v39;
          v13 = v40;
        }
        while (!v61);
        *v39 = v38;
        v39[1] = v62;
      }
    }
  }
  return result;
}

_QWORD *sub_1C51540C0(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v9;
  unint64_t v10;
  uint64_t *v11;
  _DWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  uint64_t *v16;
  unint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  _BOOL4 v21;
  _BOOL4 v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _DWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _DWORD *v30;
  int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v38 = v4;
    v39 = v5;
    v9 = result;
    v10 = v6 >> 1;
    v11 = &result[2 * (v6 >> 1)];
    v12 = *(_DWORD **)a3;
    v13 = v11[1] & 0xFFFFFFFFFFFFFFF8;
    v36 = *v11;
    v37 = v13;
    v14 = sub_1C51526A0(v12, &v36);
    v15 = *(_DWORD **)a3;
    v16 = (uint64_t *)(a2 - 16);
    v17 = *(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
    v36 = *(_QWORD *)(a2 - 16);
    v37 = v17;
    result = sub_1C51526A0(v15, &v36);
    v18 = *((_DWORD *)v14 + 4);
    v19 = *((_DWORD *)result + 4);
    v20 = v18 <= v19;
    v21 = v18 < v19;
    v22 = !v20;
    if (**(_BYTE **)(a3 + 8) ? v21 : v22)
    {
      v24 = *(_QWORD *)(a2 - 16);
      v25 = *(_QWORD *)(a2 - 8);
      do
      {
        v26 = v11;
        *(_OWORD *)v16 = *(_OWORD *)v11;
        if (!v10)
          break;
        v10 = (v10 - 1) >> 1;
        v11 = &v9[2 * v10];
        v27 = *(_DWORD **)a3;
        v28 = v11[1] & 0xFFFFFFFFFFFFFFF8;
        v36 = *v11;
        v37 = v28;
        v29 = sub_1C51526A0(v27, &v36);
        v30 = *(_DWORD **)a3;
        v36 = v24;
        v37 = v25 & 0xFFFFFFFFFFFFFFF8;
        result = sub_1C51526A0(v30, &v36);
        v31 = *((_DWORD *)v29 + 4);
        v32 = *((_DWORD *)result + 4);
        v20 = v31 <= v32;
        v33 = v31 < v32;
        v34 = !v20;
        v35 = **(_BYTE **)(a3 + 8) ? v33 : v34;
        v16 = v26;
      }
      while (v35);
      *v26 = v24;
      v26[1] = v25;
    }
  }
  return result;
}

double sub_1C5154200(_DWORD *a1, uint64_t *a2)
{
  char v4;
  double result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = 0;
  v4 = sub_1C515430C((uint64_t)a1, *a2, &v10);
  v6 = v10;
  if ((v4 & 1) != 0)
    return result;
  v7 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v8 = 4;
  else
    v8 = a1[4];
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_12;
  }
  if (v8 + ~v7 - a1[1] <= v8 >> 3)
  {
LABEL_12:
    sub_1C51543BC((uint64_t)a1, v8);
    v10 = 0;
    sub_1C515430C((uint64_t)a1, *a2, &v10);
    v6 = v10;
  }
  *a1 += 2;
  if (*(_QWORD *)v6 != -4096)
    --a1[1];
  v9 = *a2;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)v6 = v9;
  *(_QWORD *)(v6 + 8) = v6 + 24;
  *(_QWORD *)&result = 0x200000000;
  *(_QWORD *)(v6 + 16) = 0x200000000;
  *(_QWORD *)(v6 + 40) = v6 + 56;
  *(_DWORD *)(v6 + 52) = 2;
  return result;
}

uint64_t sub_1C515430C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 72 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 72 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void sub_1C51543BC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  char v17;
  uint64_t *v18;
  void *v19;
  uint64_t *v20;
  unint64_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v29[38];

  v29[36] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 4)
    {
      v26 = a2;
      *(_QWORD *)(a1 + 8) = operator new(72 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v26;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5154684(a1, v6, &v6[9 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v27 = a2;
  v8 = 0;
  v9 = a1 + 8;
  v10 = v29;
  v11 = a1;
  v12 = (uint64_t *)(a1 + 8);
  do
  {
    if ((*v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_28;
    v13 = 0;
    v14 = 0;
    *v10 = *v12;
    v15 = v10 + 1;
    v16 = v12 + 1;
    do
    {
      v17 = v13;
      v18 = &v15[4 * v14];
      v19 = v18 + 2;
      *v18 = (uint64_t)(v18 + 2);
      v18[1] = 0x200000000;
      if (v15 != v16)
      {
        v20 = &v16[4 * v14];
        v21 = *((unsigned int *)v20 + 2);
        if (*((_DWORD *)v20 + 2))
        {
          v22 = (const void *)*v20;
          if ((uint64_t *)*v20 != v20 + 2)
          {
            *v18 = (uint64_t)v22;
            *((_DWORD *)v18 + 2) = v21;
            *((_DWORD *)v18 + 3) = *((_DWORD *)v20 + 3);
            *v20 = (uint64_t)(v20 + 2);
            *((_DWORD *)v20 + 3) = 0;
            goto LABEL_18;
          }
          if (v21 >= 3)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15[4 * v14], (uint64_t)(v18 + 2), *((unsigned int *)v20 + 2), 8);
            v23 = *((unsigned int *)v20 + 2);
            if (!(_DWORD)v23)
              goto LABEL_17;
            v22 = (const void *)*v20;
            v19 = (void *)*v18;
          }
          else
          {
            v23 = *((unsigned int *)v20 + 2);
          }
          memcpy(v19, v22, 8 * v23);
LABEL_17:
          *((_DWORD *)v18 + 2) = v21;
LABEL_18:
          *((_DWORD *)v20 + 2) = 0;
        }
      }
      v13 = 1;
      v14 = 1;
    }
    while ((v17 & 1) == 0);
    for (i = 0; i != -64; i -= 32)
    {
      v25 = *(void **)(v11 + i + 48);
      if ((void *)(v11 + i + 64) != v25)
        free(v25);
    }
    v10 += 9;
LABEL_28:
    ++v8;
    v12 = (uint64_t *)(v9 + 72 * v8);
    v11 += 72;
  }
  while (v8 != 4);
  if (v27 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(72 * v27, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v27;
  }
  sub_1C5154684(a1, v29, v10);
}

void sub_1C5154684(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  char v16;
  uint64_t *v17;
  void *v18;
  uint64_t *v19;
  unint64_t v20;
  const void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;

  v4 = a2;
  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 296);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (!v7)
      goto LABEL_6;
    v8 = *(_QWORD **)(a1 + 8);
    v9 = &v8[9 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 9;
  }
  while (v8 != v9);
LABEL_6:
  if (a2 == a3)
    return;
  do
  {
    v10 = *v4;
    if ((*v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_25;
    v26 = 0;
    sub_1C515430C(a1, v10, &v26);
    v11 = 0;
    v12 = 0;
    v13 = v26;
    v14 = v4 + 1;
    *v26 = *v4;
    v15 = v13 + 1;
    do
    {
      v16 = v11;
      v17 = &v15[4 * v12];
      v18 = v17 + 2;
      *v17 = (uint64_t)(v17 + 2);
      v17[1] = 0x200000000;
      if (v15 != v14)
      {
        v19 = &v14[4 * v12];
        v20 = *((unsigned int *)v19 + 2);
        if (*((_DWORD *)v19 + 2))
        {
          v21 = (const void *)*v19;
          if ((uint64_t *)*v19 != v19 + 2)
          {
            *v17 = (uint64_t)v21;
            v23 = *((_DWORD *)v19 + 3);
            *((_DWORD *)v17 + 2) = v20;
            *((_DWORD *)v17 + 3) = v23;
            *v19 = (uint64_t)(v19 + 2);
            *((_DWORD *)v19 + 3) = 0;
            goto LABEL_16;
          }
          if (v20 >= 3)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15[4 * v12], (uint64_t)(v17 + 2), *((unsigned int *)v19 + 2), 8);
            v22 = *((unsigned int *)v19 + 2);
            if (!(_DWORD)v22)
              goto LABEL_15;
            v21 = (const void *)*v19;
            v18 = (void *)*v17;
          }
          else
          {
            v22 = *((unsigned int *)v19 + 2);
          }
          memcpy(v18, v21, 8 * v22);
LABEL_15:
          *((_DWORD *)v17 + 2) = v20;
LABEL_16:
          *((_DWORD *)v19 + 2) = 0;
        }
      }
      v11 = 1;
      v12 = 1;
    }
    while ((v16 & 1) == 0);
    v24 = 0;
    *(_DWORD *)a1 += 2;
    do
    {
      v25 = (uint64_t *)v4[v24 + 5];
      if (&v4[v24 + 7] != v25)
        free(v25);
      v24 -= 4;
    }
    while (v24 != -8);
LABEL_25:
    v4 += 9;
  }
  while (v4 != a3);
}

void sub_1C5154848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  _BOOL4 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v17;
  char v18[8];
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v3 = *(unsigned int *)(a2 + 608);
  if (!(_DWORD)v3)
    return;
  if ((_DWORD)v3 == 1)
  {
    v7 = sub_1C51549B0(a2);
    if (a3)
    {
      v18[0] = 0;
      v19 = a3;
      v20 = a3;
      v21 = *(unsigned int *)(a3 + 608);
      v8 = v6 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 4) != 0)
        sub_1C515524C(a1, (uint64_t)v18, v7, v8);
      else
        sub_1C5154AA4(a1, (uint64_t)v18, v7, v8);
    }
    else
    {
      v17 = v6 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 4) != 0)
        sub_1C515524C(a1, 0, v7, v17);
      else
        sub_1C5154AA4(a1, 0, v7, v17);
    }
    return;
  }
  v18[0] = 0;
  v19 = a2;
  v20 = a3;
  v21 = v3;
  v9 = *(_DWORD *)(a1 + 32);
  if (v9 > 0x64)
  {
    if (v3 <= v9 / 0x28)
      goto LABEL_8;
LABEL_10:
    sub_1C50F0A2C(a1, (uint64_t)v18);
    v10 = v18[0] == 0;
    if (!v21)
      return;
    goto LABEL_11;
  }
  if (v3 > v9)
    goto LABEL_10;
LABEL_8:
  v10 = 1;
LABEL_11:
  if (v10)
  {
    v11 = 1;
    do
    {
      v12 = sub_1C51549B0(v19);
      v14 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        sub_1C515524C(a1, (uint64_t)v18, v12, v14);
      else
        sub_1C5154AA4(a1, (uint64_t)v18, v12, v14);
    }
    while (v11++ < v21 && v18[0] == 0);
  }
}

uint64_t sub_1C51549B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v15;

  v2 = *(unsigned int *)(a1 + 608);
  v3 = *(_QWORD *)(a1 + 600) + 16 * v2;
  v4 = *(_QWORD *)(v3 - 16);
  v5 = *(_QWORD *)(v3 - 8);
  *(_DWORD *)(a1 + 608) = v2 - 1;
  v6 = (v5 >> 2) & 1 ^ (*(_BYTE *)(a1 + 592) == 0);
  v15 = v4;
  sub_1C5154200((_DWORD *)a1, (uint64_t *)&v15);
  v8 = v7 + 8 + 32 * v6;
  v9 = *(_DWORD *)(v8 + 8) - 1;
  *(_DWORD *)(v8 + 8) = v9;
  if (!v9 && !*(_DWORD *)(v7 + 8 + 32 * (v6 ^ 1) + 8))
    sub_1C5156BC0((_DWORD *)a1, v4);
  v10 = (_DWORD *)(a1 + 296);
  v15 = v5 & 0xFFFFFFFFFFFFFFF8;
  sub_1C5154200(v10, (uint64_t *)&v15);
  v12 = v11 + 8 + 32 * v6;
  v13 = *(_DWORD *)(v12 + 8) - 1;
  *(_DWORD *)(v12 + 8) = v13;
  if (!v13 && !*(_DWORD *)(v11 + 8 + 32 * (v6 ^ 1) + 8))
    sub_1C5156BC0(v10, v5 & 0xFFFFFFFFFFFFFFF8);
  return v4;
}

void sub_1C5154AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  int v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  char *v47;
  uint64_t *v48;
  uint64_t *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  int v61;
  int v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  unsigned int v67;
  _QWORD *v68;
  uint64_t *v69;
  int v70;
  BOOL v71;
  unsigned int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t *v88;
  uint64_t v89;
  void *__p;
  char *v91;
  char *v92;
  uint64_t v93[2];
  unsigned int v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  void *v98;
  uint64_t v99;
  _BYTE v100[128];
  void *v101;
  unsigned int v102;
  uint64_t v103;
  void *v104;
  unsigned int v105;
  unsigned int v106;
  _QWORD v107[66];

  v107[64] = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4)
  {
    v8 = *(_QWORD *)(a1 + 24);
    v9 = v4 - 1;
    LODWORD(v10) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    v11 = (uint64_t *)(v8 + 16 * v10);
    v12 = *v11;
    if (*v11 != a3)
    {
      v13 = 1;
      do
      {
        if (v12 == -4096)
          return;
        v14 = v10 + v13++;
        v10 = v14 & v9;
        v12 = *(_QWORD *)(v8 + 16 * v10);
      }
      while (v12 != a3);
      v11 = (uint64_t *)(v8 + 16 * v10);
    }
    v15 = (uint64_t *)(v8 + 16 * v4);
    if (v11 != v15)
    {
      v16 = (uint64_t *)v11[1];
      if (v16)
      {
        *(_BYTE *)(a1 + 64) = 0;
        LODWORD(v17) = v9 & ((a4 >> 4) ^ (a4 >> 9));
        v18 = (uint64_t *)(v8 + 16 * v17);
        v19 = *v18;
        if (*v18 != a4)
        {
          v20 = 1;
          do
          {
            if (v19 == -4096)
              goto LABEL_17;
            v21 = v17 + v20++;
            v17 = v21 & v9;
            v19 = *(_QWORD *)(v8 + 16 * v17);
          }
          while (v19 != a4);
          v18 = (uint64_t *)(v8 + 16 * v17);
        }
        if (v18 != v15)
        {
          v22 = v18[1];
          if (v22)
          {
            sub_1C5156C40(a1, a2, *v16, v22);
            return;
          }
        }
LABEL_17:
        v88 = v16;
        v98 = v100;
        v99 = 0x800000000;
        v23 = (char *)operator new(8uLL);
        v24 = 0;
        __p = v23;
        *(_QWORD *)v23 = 0;
        v91 = v23 + 8;
        v92 = v23 + 8;
        v93[0] = 0;
        v93[1] = 0;
        v94 = 0;
        v89 = a2;
        v95 = a2;
        v25 = 1;
        v106 = 64;
        v107[0] = a4;
        v104 = v107;
        while (1)
        {
          v97 = 0;
          v26 = (_QWORD *)*((_QWORD *)v104 + v25 - 1);
          v105 = v25 - 1;
          v97 = v26;
          if (!v94)
            break;
          v27 = (v94 - 1) & ((v26 >> 4) ^ (v26 >> 9));
          v28 = (_QWORD *)(v93[0] + 72 * v27);
          v29 = (_QWORD *)*v28;
          if (v26 != (_QWORD *)*v28)
          {
            v30 = 0;
            v31 = 1;
            while (v29 != (_QWORD *)-4096)
            {
              if (v30)
                v32 = 0;
              else
                v32 = v29 == (_QWORD *)-8192;
              if (v32)
                v30 = v28;
              v33 = v27 + v31++;
              v27 = v33 & (v94 - 1);
              v28 = (_QWORD *)(v93[0] + 72 * v27);
              v29 = (_QWORD *)*v28;
              if (v26 == (_QWORD *)*v28)
                goto LABEL_33;
            }
            if (v30)
              v34 = v30;
            else
              v34 = v28;
            goto LABEL_32;
          }
LABEL_33:
          if (!*((_DWORD *)v28 + 2))
          {
            *((_DWORD *)v28 + 4) = ++v24;
            *((_DWORD *)v28 + 2) = v24;
            v35 = v97;
            v28[3] = v97;
            v36 = v91;
            if (v91 >= v92)
            {
              v38 = (char *)__p;
              v39 = (v91 - (_BYTE *)__p) >> 3;
              v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 61)
                abort();
              v41 = v92 - (_BYTE *)__p;
              if ((v92 - (_BYTE *)__p) >> 2 > v40)
                v40 = v41 >> 2;
              if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
                v42 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v42 = v40;
              if (v42)
              {
                if (v42 >> 61)
                  sub_1C4764EE4();
                v43 = (char *)operator new(8 * v42);
              }
              else
              {
                v43 = 0;
              }
              v44 = &v43[8 * v39];
              *(_QWORD *)v44 = v35;
              v37 = v44 + 8;
              if (v36 != v38)
              {
                do
                {
                  v45 = *((_QWORD *)v36 - 1);
                  v36 -= 8;
                  *((_QWORD *)v44 - 1) = v45;
                  v44 -= 8;
                }
                while (v36 != v38);
                v36 = (char *)__p;
              }
              __p = v44;
              v91 = v37;
              v92 = &v43[8 * v42];
              if (v36)
                operator delete(v36);
            }
            else
            {
              *(_QWORD *)v91 = v35;
              v37 = v36 + 8;
            }
            v91 = v37;
            if (v95)
              sub_1C50F2308(*(_QWORD *)(v95 + 8), (uint64_t)v97, (uint64_t)&v101);
            else
              sub_1C50F2538(v97, (uint64_t *)&v101);
            v46 = (uint64_t *)v101;
            v47 = (char *)v101 + 8 * v102;
            if (v102)
            {
              while (1)
              {
                v96 = 0;
                v96 = (_QWORD *)*v46;
                v48 = sub_1C50F1E18(v93, (uint64_t)v96);
                if ((uint64_t *)(v93[0] + 72 * v94) == v48)
                  break;
                v49 = v48;
                if (!*((_DWORD *)v48 + 2))
                  break;
                v50 = v97;
                if (v96 != v97)
                {
                  v52 = v48 + 6;
                  v51 = *((unsigned int *)v48 + 12);
                  v53 = v48 + 5;
                  goto LABEL_89;
                }
LABEL_93:
                if (++v46 == (uint64_t *)v47)
                {
                  v46 = (uint64_t *)v101;
                  goto LABEL_96;
                }
              }
              v54 = v96;
              v55 = *(_QWORD *)(a1 + 24);
              v56 = *(unsigned int *)(a1 + 40);
              v57 = v96 >> 4;
              if ((_DWORD)v56)
              {
                LODWORD(v58) = (v57 ^ (v96 >> 9)) & (v56 - 1);
                v59 = (_QWORD *)(v55 + 16 * v58);
                v60 = (_QWORD *)*v59;
                if ((_QWORD *)*v59 != v96)
                {
                  v61 = 1;
                  while (v60 != (_QWORD *)-4096)
                  {
                    v62 = v58 + v61++;
                    v58 = v62 & (v56 - 1);
                    v60 = *(_QWORD **)(v55 + 16 * v58);
                    if (v60 == v96)
                    {
                      v59 = (_QWORD *)(v55 + 16 * v58);
                      goto LABEL_66;
                    }
                  }
                  goto LABEL_65;
                }
              }
              else
              {
LABEL_65:
                v59 = (_QWORD *)(v55 + 16 * v56);
              }
LABEL_66:
              if (v59 != (_QWORD *)(v55 + 16 * v56))
              {
                v63 = v59[1];
                if (v63)
                {
                  v64 = v97;
                  v65 = v99;
                  if (v99 >= (unint64_t)HIDWORD(v99))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, (uint64_t)v100, v99 + 1, 16);
                    v65 = v99;
                  }
                  v66 = (char *)v98 + 16 * v65;
                  *v66 = v64;
                  v66[1] = v63;
                  v52 = &v99;
                  goto LABEL_92;
                }
              }
              if (v94)
              {
                v67 = (v57 ^ (v96 >> 9)) & (v94 - 1);
                v49 = (uint64_t *)(v93[0] + 72 * v67);
                v68 = (_QWORD *)*v49;
                if (v96 != (_QWORD *)*v49)
                {
                  v69 = 0;
                  v70 = 1;
                  while (v68 != (_QWORD *)-4096)
                  {
                    if (v69)
                      v71 = 0;
                    else
                      v71 = v68 == (_QWORD *)-8192;
                    if (v71)
                      v69 = v49;
                    v72 = v67 + v70++;
                    v67 = v72 & (v94 - 1);
                    v49 = (uint64_t *)(v93[0] + 72 * v67);
                    v68 = (_QWORD *)*v49;
                    if (v96 == (_QWORD *)*v49)
                      goto LABEL_86;
                  }
                  if (v69)
                    v73 = v69;
                  else
                    v73 = v49;
LABEL_85:
                  v49 = sub_1C50F1F2C((uint64_t)v93, (uint64_t)&v96, (uint64_t *)&v96, v73);
                  *v49 = (uint64_t)v96;
                  *(_OWORD *)(v49 + 5) = 0u;
                  *(_OWORD *)(v49 + 1) = 0u;
                  *(_OWORD *)(v49 + 3) = 0u;
                  *(_OWORD *)(v49 + 7) = 0u;
                  v49[5] = (uint64_t)(v49 + 7);
                  *((_DWORD *)v49 + 13) = 2;
                  v54 = v96;
                }
LABEL_86:
                v74 = v105;
                if (v105 >= (unint64_t)v106)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, (uint64_t)v107, v105 + 1, 8);
                  v74 = v105;
                }
                *((_QWORD *)v104 + v74) = v54;
                v52 = v49 + 6;
                v51 = *((unsigned int *)v49 + 12);
                ++v105;
                *((_DWORD *)v49 + 3) = v24;
                v53 = v49 + 5;
                v50 = v97;
LABEL_89:
                if (v51 >= *((unsigned int *)v52 + 1))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v53, (uint64_t)(v49 + 7), v51 + 1, 8);
                  v51 = *((unsigned int *)v49 + 12);
                }
                *(_QWORD *)(*v53 + 8 * v51) = v50;
LABEL_92:
                ++*(_DWORD *)v52;
                goto LABEL_93;
              }
              v73 = 0;
              goto LABEL_85;
            }
LABEL_96:
            if (v46 != &v103)
              free(v46);
          }
          v25 = v105;
          if (!v105)
          {
            if (v104 != v107)
              free(v104);
            sub_1C50F0D38((uint64_t)&__p, a1, 0);
            sub_1C50F1518((uint64_t)&__p, a1, v88);
            v75 = v93[0];
            if (v94)
            {
              v76 = v93[0] + 56;
              v77 = 72 * v94;
              do
              {
                v78 = *(_QWORD *)(v76 - 56);
                if (v78 != -4096 && v78 != -8192)
                {
                  v79 = *(void **)(v76 - 16);
                  if ((void *)v76 != v79)
                    free(v79);
                }
                v76 += 72;
                v77 -= 72;
              }
              while (v77);
              v75 = v93[0];
            }
            MEMORY[0x1CAA32FB4](v75, 8);
            if (__p)
            {
              v91 = (char *)__p;
              operator delete(__p);
            }
            v80 = (char *)v98;
            if ((_DWORD)v99)
            {
              v81 = (char *)v98 + 16 * v99;
              do
              {
                v82 = *(_QWORD *)(a1 + 24);
                v83 = *(_DWORD *)(a1 + 40) - 1;
                LODWORD(v84) = ((*(_QWORD *)v80 >> 4) ^ (*(_QWORD *)v80 >> 9)) & v83;
                v85 = v82 + 16 * v84;
                if (*(_QWORD *)v80 != *(_QWORD *)v85)
                {
                  v86 = 1;
                  do
                  {
                    v87 = v84 + v86++;
                    v84 = v87 & v83;
                  }
                  while (*(_QWORD *)v80 != *(_QWORD *)(v82 + 16 * v84));
                  v85 = v82 + 16 * v84;
                }
                sub_1C5156C40(a1, v89, **(_QWORD **)(v85 + 8), *((_QWORD *)v80 + 1));
                v80 += 16;
              }
              while (v80 != v81);
              v80 = (char *)v98;
            }
            if (v80 != v100)
              free(v80);
            return;
          }
        }
        v34 = 0;
LABEL_32:
        v28 = sub_1C50F1F2C((uint64_t)v93, (uint64_t)&v97, (uint64_t *)&v97, v34);
        *v28 = v97;
        *(_OWORD *)(v28 + 5) = 0u;
        *(_OWORD *)(v28 + 1) = 0u;
        *(_OWORD *)(v28 + 3) = 0u;
        *(_OWORD *)(v28 + 7) = 0u;
        v28[5] = v28 + 7;
        *((_DWORD *)v28 + 13) = 2;
        goto LABEL_33;
      }
    }
  }
}

void sub_1C515524C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int32x2_t *v5;
  uint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t NearestCommonDominator;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  int v66;
  unsigned int v67;
  char *v68;
  uint64_t v69;
  unsigned int v70;
  char *v71;
  unsigned int v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  int v76;
  BOOL v77;
  unsigned int v78;
  _QWORD *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char **v91;
  char **v92;
  uint64_t *v93;
  uint64_t *v94;
  char *v95;
  unint64_t v96;
  uint64_t *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  int v105;
  int v106;
  unsigned int v107;
  _QWORD *v108;
  uint64_t *v109;
  int v110;
  BOOL v111;
  unsigned int v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t *v118;
  uint64_t v119;
  unsigned int v120;
  char *v121;
  unsigned int v122;
  void *v123;
  unsigned int v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  int v128;
  BOOL v129;
  unsigned int v130;
  _QWORD *v131;
  void *v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char **v143;
  char **v144;
  uint64_t *v145;
  uint64_t *v146;
  void *v147;
  _QWORD *v148;
  unint64_t v149;
  _DWORD *v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  int v159;
  int v160;
  unsigned int v161;
  _QWORD *v162;
  uint64_t *v163;
  int v164;
  BOOL v165;
  unsigned int v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  _QWORD *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  int v182;
  int v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  unsigned int v209;
  char *v210;
  unsigned int v211;
  unsigned int v212;
  char **v213;
  char *v214;
  int v215;
  char *v216;
  unsigned int v217;
  unsigned int v218;
  char **v219;
  int v220;
  BOOL v221;
  unsigned int v222;
  int v223;
  char *v224;
  unsigned int v225;
  _QWORD *v226;
  uint64_t v227;
  _QWORD *v228;
  int v229;
  BOOL v230;
  unsigned int v231;
  _QWORD *v232;
  char *v233;
  char *v234;
  char *v235;
  char *v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  char **v244;
  char **v245;
  uint64_t *v246;
  uint64_t *v247;
  uint64_t *v248;
  char *v249;
  _QWORD *v250;
  unint64_t v251;
  _DWORD *v252;
  unint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  char **v259;
  char *v260;
  int v261;
  int v262;
  char *v263;
  unsigned int v264;
  uint64_t v265;
  uint64_t *v266;
  int v267;
  BOOL v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  void *v275;
  uint64_t v276;
  char *v277;
  char *v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  _QWORD *v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t *v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  char **v307;
  _QWORD *v308;
  int32x2_t *v309;
  uint64_t *v310;
  uint64_t v311;
  uint64_t *v312;
  unsigned int v313;
  int v314;
  unsigned int v315;
  void *v316;
  char *v317;
  char *v318;
  uint64_t v319[2];
  unsigned int v320;
  uint64_t v321;
  char *v322;
  char *v323;
  char *v324;
  void *v325;
  uint64_t v326;
  _BYTE v327[128];
  void *__p;
  char *v329;
  char *v330;
  uint64_t v331[2];
  unsigned int v332;
  uint64_t v333;
  void *__src;
  uint64_t v335;
  _QWORD v336[66];

  v336[64] = *MEMORY[0x1E0C80C00];
  v5 = (int32x2_t *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v6)
    return;
  v9 = v6 - 1;
  LODWORD(v10) = (v6 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v11 = (uint64_t *)(v4 + 16 * v10);
  v12 = *v11;
  if (*v11 != a3)
  {
    v13 = 1;
    do
    {
      if (v12 == -4096)
        return;
      v14 = v10 + v13++;
      v10 = v14 & v9;
      v12 = *(_QWORD *)(v4 + 16 * v10);
    }
    while (v12 != a3);
    v11 = (uint64_t *)(v4 + 16 * v10);
  }
  v15 = (uint64_t *)(v4 + 16 * v6);
  if (v11 == v15)
    return;
  v16 = (uint64_t *)v11[1];
  if (!v16)
    return;
  LODWORD(v17) = v9 & ((a4 >> 4) ^ (a4 >> 9));
  v18 = (uint64_t *)(v4 + 16 * v17);
  v19 = *v18;
  if (*v18 != a4)
  {
    v20 = 1;
    do
    {
      if (v19 == -4096)
        return;
      v21 = v17 + v20++;
      v17 = v21 & v9;
      v19 = *(_QWORD *)(v4 + 16 * v17);
    }
    while (v19 != a4);
    v18 = (uint64_t *)(v4 + 16 * v17);
  }
  if (v18 == v15)
    return;
  v22 = v18[1];
  if (!v22)
    return;
  NearestCommonDominator = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator(a1, a3, a4);
  v24 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v24)
  {
    v25 = *(_QWORD *)(a1 + 24);
    LODWORD(v26) = ((NearestCommonDominator >> 4) ^ (NearestCommonDominator >> 9)) & (v24 - 1);
    v27 = (uint64_t *)(v25 + 16 * v26);
    v28 = *v27;
    if (NearestCommonDominator == *v27)
    {
LABEL_22:
      if (v27 != (uint64_t *)(v25 + 16 * v24))
      {
        v31 = v27[1];
        goto LABEL_25;
      }
    }
    else
    {
      v29 = 1;
      while (v28 != -4096)
      {
        v30 = v26 + v29++;
        v26 = v30 & (v24 - 1);
        v28 = *(_QWORD *)(v25 + 16 * v26);
        if (NearestCommonDominator == v28)
        {
          v27 = (uint64_t *)(v25 + 16 * v26);
          goto LABEL_22;
        }
      }
    }
    v31 = 0;
LABEL_25:
    if (v22 == v31)
      return;
  }
  *(_BYTE *)(a1 + 64) = 0;
  if (v16 != *(uint64_t **)(v22 + 8))
    goto LABEL_27;
  v309 = v5;
  v42 = *(_QWORD *)v22;
  v311 = a2;
  if (a2)
  {
    v276 = *(_QWORD *)(a2 + 8);
    v277 = *(char **)(v42 + 64);
    v278 = *(char **)(v42 + 72);
    v279 = v336;
    __src = v336;
    v335 = 0x800000000;
    v280 = v278 - v277;
    if ((unint64_t)(v278 - v277) >= 0x41)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v336, v280 >> 3, 8);
      v281 = v335;
      v279 = __src;
      v282 = v335;
    }
    else
    {
      v281 = 0;
      v282 = 0;
    }
    if (v277 != v278)
    {
      v283 = &v279[v281];
      do
      {
        v284 = *(_QWORD *)v277;
        v277 += 8;
        *v283++ = v284;
      }
      while (v277 != v278);
      v279 = __src;
    }
    v285 = v279;
    v286 = v282 + ((unint64_t)v280 >> 3);
    if ((_DWORD)v286)
    {
      v287 = 8 * v286;
      v285 = v279;
      while (*v285)
      {
        ++v285;
        v287 -= 8;
        if (!v287)
        {
          v285 = &v279[v286];
          break;
        }
      }
    }
    v288 = v285 - v279;
    v289 = v285 + 1;
    if (v288 != v286 && v289 != &v279[v286])
    {
      v291 = 8 * v286 - 8 * v288 - 8;
      do
      {
        if (*v289)
          *v285++ = *v289;
        ++v289;
        v291 -= 8;
      }
      while (v291);
      v279 = __src;
    }
    LODWORD(v335) = (unint64_t)((char *)v285 - (char *)v279) >> 3;
    v292 = sub_1C61E0EDC(v276 + 296, v42);
    if ((*(_BYTE *)(v276 + 296) & 1) != 0)
    {
      v293 = v276 + 304;
      v294 = 4;
    }
    else
    {
      v293 = *(_QWORD *)(v276 + 304);
      v294 = *(_DWORD *)(v276 + 312);
    }
    v45 = (uint64_t *)__src;
    if (v293 + 72 * v294 != v292)
    {
      v295 = *(unsigned int *)(v292 + 16);
      v296 = v335;
      if ((_DWORD)v295)
      {
        v297 = *(uint64_t **)(v292 + 8);
        v298 = &v297[v295];
        do
        {
          v299 = *v297;
          v300 = 8 * v296;
          v301 = v45;
          v302 = &v45[v296];
          if (v296)
          {
            v303 = 8 * v296;
            v301 = v45;
            while (*v301 != v299)
            {
              ++v301;
              v303 -= 8;
              if (!v303)
              {
                v301 = &v45[v296];
                break;
              }
            }
          }
          v304 = v301 - v45;
          if (v304 != v296)
          {
            v305 = v301 + 1;
            if (v301 + 1 != v302)
            {
              v306 = v300 - 8 * v304 - 8;
              do
              {
                if (*v305 != v299)
                  *v301++ = *v305;
                ++v305;
                v306 -= 8;
              }
              while (v306);
              v45 = (uint64_t *)__src;
            }
          }
          v296 = ((unint64_t)((char *)v301 - (char *)v45) >> 3);
          ++v297;
        }
        while (v297 != v298);
        LODWORD(v335) = (unint64_t)((char *)v301 - (char *)v45) >> 3;
      }
      sub_1C61BB99C((unsigned int *)&__src, (uint64_t)&v45[v296], *(uint64_t **)(v292 + 40), (uint64_t *)(*(_QWORD *)(v292 + 40) + 8 * *(unsigned int *)(v292 + 48)));
      v45 = (uint64_t *)__src;
    }
  }
  else
  {
    v43 = *(char **)(v42 + 64);
    v44 = *(char **)(v42 + 72);
    v45 = v336;
    __src = v336;
    v335 = 0x800000000;
    v46 = v44 - v43;
    if ((unint64_t)(v44 - v43) >= 0x41)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v336, v46 >> 3, 8);
      v47 = v335;
      v45 = (uint64_t *)__src;
      v48 = v335;
    }
    else
    {
      v47 = 0;
      v48 = 0;
    }
    if (v43 != v44)
    {
      v49 = &v45[v47];
      do
      {
        v50 = *(_QWORD *)v43;
        v43 += 8;
        *v49++ = v50;
      }
      while (v43 != v44);
      v45 = (uint64_t *)__src;
    }
    v51 = v45;
    v52 = v48 + ((unint64_t)v46 >> 3);
    if (v48 + ((unint64_t)v46 >> 3))
    {
      v53 = 8 * v52;
      v51 = v45;
      while (*v51)
      {
        ++v51;
        v53 -= 8;
        if (!v53)
        {
          v51 = &v45[v52];
          break;
        }
      }
    }
    v54 = v51 - v45;
    v55 = v51 + 1;
    if (v54 != v52 && v55 != &v45[v52])
    {
      v57 = 8 * v52 - 8 * v54 - 8;
      do
      {
        if (*v55)
          *v51++ = *v55;
        ++v55;
        v57 -= 8;
      }
      while (v57);
      v45 = (uint64_t *)__src;
    }
    LODWORD(v335) = (unint64_t)((char *)v51 - (char *)v45) >> 3;
  }
  if (!(_DWORD)v335)
    goto LABEL_70;
  v58 = &v45[v335];
  do
  {
    v59 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v59)
    {
      v60 = *v45;
      v61 = *(_QWORD *)(a1 + 24);
      LODWORD(v62) = ((*v45 >> 4) ^ (*v45 >> 9)) & (v59 - 1);
      v63 = (uint64_t *)(v61 + 16 * v62);
      v64 = *v63;
      if (*v45 != *v63)
      {
        v65 = 1;
        do
        {
          if (v64 == -4096)
            goto LABEL_68;
          v66 = v62 + v65++;
          v62 = v66 & (v59 - 1);
          v64 = *(_QWORD *)(v61 + 16 * v62);
        }
        while (v60 != v64);
        v63 = (uint64_t *)(v61 + 16 * v62);
      }
      if (v63 != (uint64_t *)(v61 + 16 * v59)
        && v63[1]
        && llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator(a1, v42, v60) != v42)
      {
        if (__src != v336)
          free(__src);
        a2 = v311;
LABEL_27:
        v32 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator(a1, *v16, *(_QWORD *)v22);
        v33 = v32;
        v34 = *(unsigned int *)(a1 + 40);
        if (!(_DWORD)v34)
          goto LABEL_161;
        v35 = *(_QWORD *)(a1 + 24);
        LODWORD(v36) = ((v32 >> 4) ^ (v32 >> 9)) & (v34 - 1);
        v37 = (uint64_t *)(v35 + 16 * v36);
        v38 = *v37;
        if (v32 != *v37)
        {
          v39 = 1;
          do
          {
            if (v38 == -4096)
              goto LABEL_161;
            v40 = v36 + v39++;
            v36 = v40 & (v34 - 1);
            v38 = *(_QWORD *)(v35 + 16 * v36);
          }
          while (v32 != v38);
          v37 = (uint64_t *)(v35 + 16 * v36);
        }
        if (v37 == (uint64_t *)(v35 + 16 * v34))
LABEL_161:
          v41 = 0;
        else
          v41 = v37[1];
        if (!*(_QWORD *)(v41 + 8))
        {
          sub_1C50F0A2C(a1, a2);
          return;
        }
        v312 = *(uint64_t **)(v41 + 8);
        v120 = *(_DWORD *)(v41 + 16);
        v121 = (char *)operator new(8uLL);
        v314 = 0;
        __p = v121;
        *(_QWORD *)v121 = 0;
        v329 = v121 + 8;
        v330 = v121 + 8;
        v331[0] = 0;
        v331[1] = 0;
        v332 = 0;
        v333 = a2;
        v122 = 1;
        HIDWORD(v335) = 64;
        v336[0] = v33;
        __src = v336;
LABEL_164:
        v316 = 0;
        v123 = (void *)*((_QWORD *)__src + v122 - 1);
        LODWORD(v335) = v122 - 1;
        v316 = v123;
        if (v332)
        {
          v124 = (v332 - 1) & ((v123 >> 4) ^ (v123 >> 9));
          v125 = (_QWORD *)(v331[0] + 72 * v124);
          v126 = *v125;
          if (v123 == (void *)*v125)
          {
LABEL_179:
            if (*((_DWORD *)v125 + 2))
              goto LABEL_239;
            *((_DWORD *)v125 + 4) = ++v314;
            *((_DWORD *)v125 + 2) = v314;
            v132 = v316;
            v125[3] = v316;
            v133 = v329;
            if (v329 >= v330)
            {
              v135 = (char *)__p;
              v136 = (v329 - (_BYTE *)__p) >> 3;
              v137 = v136 + 1;
              if ((unint64_t)(v136 + 1) >> 61)
                goto LABEL_464;
              v138 = v330 - (_BYTE *)__p;
              if ((v330 - (_BYTE *)__p) >> 2 > v137)
                v137 = v138 >> 2;
              if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
                v139 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v139 = v137;
              if (v139)
              {
                if (v139 >> 61)
                  goto LABEL_465;
                v140 = (char *)operator new(8 * v139);
              }
              else
              {
                v140 = 0;
              }
              v141 = &v140[8 * v136];
              *(_QWORD *)v141 = v132;
              v134 = v141 + 8;
              if (v133 != v135)
              {
                do
                {
                  v142 = *((_QWORD *)v133 - 1);
                  v133 -= 8;
                  *((_QWORD *)v141 - 1) = v142;
                  v141 -= 8;
                }
                while (v133 != v135);
                v133 = (char *)__p;
              }
              __p = v141;
              v329 = v134;
              v330 = &v140[8 * v139];
              if (v133)
                operator delete(v133);
            }
            else
            {
              *(_QWORD *)v329 = v132;
              v134 = v133 + 8;
            }
            v329 = v134;
            if (v333)
              sub_1C50F2308(*(_QWORD *)(v333 + 8), (uint64_t)v316, (uint64_t)&v325);
            else
              sub_1C50F2538(v316, (uint64_t *)&v325);
            v143 = (char **)v325;
            v144 = (char **)((char *)v325 + 8 * v326);
            if (!(_DWORD)v326)
              goto LABEL_237;
            while (1)
            {
              v324 = 0;
              v324 = *v143;
              v145 = sub_1C50F1E18(v331, (uint64_t)v324);
              if ((uint64_t *)(v331[0] + 72 * v332) != v145)
              {
                v146 = v145;
                if (*((_DWORD *)v145 + 2))
                {
                  v147 = v316;
                  if (v324 != v316)
                  {
                    v148 = v145 + 5;
                    v150 = v145 + 6;
                    v149 = *((unsigned int *)v145 + 12);
                    v151 = *((unsigned int *)v145 + 13);
                    goto LABEL_231;
                  }
                  goto LABEL_234;
                }
              }
              v152 = v324;
              v153 = *(_QWORD *)(a1 + 24);
              v154 = *(unsigned int *)(a1 + 40);
              v155 = v324 >> 4;
              if ((_DWORD)v154)
              {
                LODWORD(v156) = (v155 ^ (v324 >> 9)) & (v154 - 1);
                v157 = v153 + 16 * v156;
                v158 = *(char **)v157;
                if (v324 == *(char **)v157)
                  goto LABEL_212;
                v159 = 1;
                while (v158 != (char *)-4096)
                {
                  v160 = v156 + v159++;
                  v156 = v160 & (v154 - 1);
                  v158 = *(char **)(v153 + 16 * v156);
                  if (v324 == v158)
                  {
                    v157 = v153 + 16 * v156;
                    goto LABEL_212;
                  }
                }
              }
              v157 = v153 + 16 * v154;
LABEL_212:
              if (*(_DWORD *)(*(_QWORD *)(v157 + 8) + 16) > v120)
              {
                if (!v332)
                {
                  v167 = 0;
                  goto LABEL_227;
                }
                v161 = (v155 ^ (v324 >> 9)) & (v332 - 1);
                v146 = (uint64_t *)(v331[0] + 72 * v161);
                v162 = (_QWORD *)*v146;
                if (v324 != (char *)*v146)
                {
                  v163 = 0;
                  v164 = 1;
                  while (v162 != (_QWORD *)-4096)
                  {
                    if (v163)
                      v165 = 0;
                    else
                      v165 = v162 == (_QWORD *)-8192;
                    if (v165)
                      v163 = v146;
                    v166 = v161 + v164++;
                    v161 = v166 & (v332 - 1);
                    v146 = (uint64_t *)(v331[0] + 72 * v161);
                    v162 = (_QWORD *)*v146;
                    if (v324 == (char *)*v146)
                      goto LABEL_228;
                  }
                  if (v163)
                    v167 = v163;
                  else
                    v167 = v146;
LABEL_227:
                  v146 = sub_1C50F1F2C((uint64_t)v331, (uint64_t)&v324, (uint64_t *)&v324, v167);
                  *v146 = (uint64_t)v324;
                  *(_OWORD *)(v146 + 5) = 0u;
                  *(_OWORD *)(v146 + 1) = 0u;
                  *(_OWORD *)(v146 + 3) = 0u;
                  *(_OWORD *)(v146 + 7) = 0u;
                  v146[5] = (uint64_t)(v146 + 7);
                  *((_DWORD *)v146 + 13) = 2;
                  v152 = v324;
                }
LABEL_228:
                v168 = v335;
                if (v335 >= (unint64_t)HIDWORD(v335))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v336, v335 + 1, 8);
                  v168 = v335;
                }
                *((_QWORD *)__src + v168) = v152;
                v150 = v146 + 6;
                v149 = *((unsigned int *)v146 + 12);
                LODWORD(v335) = v335 + 1;
                *((_DWORD *)v146 + 3) = v314;
                v148 = v146 + 5;
                v147 = v316;
                v151 = *((unsigned int *)v146 + 13);
LABEL_231:
                if (v149 >= v151)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v148, (uint64_t)(v146 + 7), v149 + 1, 8);
                  v149 = *((unsigned int *)v146 + 12);
                }
                *(_QWORD *)(*v148 + 8 * v149) = v147;
                ++*v150;
              }
LABEL_234:
              if (++v143 == v144)
              {
                v143 = (char **)v325;
LABEL_237:
                if (v143 != (char **)v327)
                  free(v143);
LABEL_239:
                v122 = v335;
                if (!(_DWORD)v335)
                {
                  if (__src != v336)
                    free(__src);
                  sub_1C50F0D38((uint64_t)&__p, a1, v120);
                  sub_1C51577A0((uint64_t *)&__p, a1, *v312);
                  v169 = v331[0];
                  if (v332)
                  {
                    v170 = v331[0] + 56;
                    v171 = 72 * v332;
                    do
                    {
                      v172 = *(_QWORD *)(v170 - 56);
                      if (v172 != -4096 && v172 != -8192)
                      {
                        v173 = *(void **)(v170 - 16);
                        if ((void *)v170 != v173)
                          free(v173);
                      }
                      v170 += 72;
                      v171 -= 72;
                    }
                    while (v171);
                    v169 = v331[0];
                  }
                  MEMORY[0x1CAA32FB4](v169, 8);
                  if (__p)
                  {
                    v329 = (char *)__p;
                    operator delete(__p);
                  }
                  return;
                }
                goto LABEL_164;
              }
            }
          }
          v127 = 0;
          v128 = 1;
          while (v126 != -4096)
          {
            if (v127)
              v129 = 0;
            else
              v129 = v126 == -8192;
            if (v129)
              v127 = v125;
            v130 = v124 + v128++;
            v124 = v130 & (v332 - 1);
            v125 = (_QWORD *)(v331[0] + 72 * v124);
            v126 = *v125;
            if (v123 == (void *)*v125)
              goto LABEL_179;
          }
          if (v127)
            v131 = v127;
          else
            v131 = v125;
        }
        else
        {
          v131 = 0;
        }
        v125 = sub_1C50F1F2C((uint64_t)v331, (uint64_t)&v316, (uint64_t *)&v316, v131);
        *v125 = v316;
        *(_OWORD *)(v125 + 5) = 0u;
        *(_OWORD *)(v125 + 1) = 0u;
        *(_OWORD *)(v125 + 3) = 0u;
        *(_OWORD *)(v125 + 7) = 0u;
        v125[5] = v125 + 7;
        *((_DWORD *)v125 + 13) = 2;
        goto LABEL_179;
      }
    }
LABEL_68:
    ++v45;
  }
  while (v45 != v58);
  v45 = (uint64_t *)__src;
LABEL_70:
  if (v45 != v336)
    free(v45);
  v325 = v327;
  v326 = 0x1000000000;
  v67 = *(_DWORD *)(v22 + 16);
  v68 = (char *)operator new(8uLL);
  v313 = 0;
  v316 = v68;
  *(_QWORD *)v68 = 0;
  v317 = v68 + 8;
  v318 = v68 + 8;
  v319[0] = 0;
  v319[1] = 0;
  v320 = 0;
  v321 = v311;
  v310 = (uint64_t *)v22;
  v69 = *(_QWORD *)v22;
  __src = v336;
  HIDWORD(v335) = 64;
  v336[0] = v69;
  v70 = 1;
  while (2)
  {
    v324 = 0;
    v71 = (char *)*((_QWORD *)__src + v70 - 1);
    LODWORD(v335) = v70 - 1;
    v324 = v71;
    if (!v320)
    {
      v79 = 0;
      goto LABEL_87;
    }
    v72 = (v320 - 1) & ((v71 >> 4) ^ (v71 >> 9));
    v73 = (_QWORD *)(v319[0] + 72 * v72);
    v74 = (_QWORD *)*v73;
    if (v71 != (char *)*v73)
    {
      v75 = 0;
      v76 = 1;
      while (v74 != (_QWORD *)-4096)
      {
        if (v75)
          v77 = 0;
        else
          v77 = v74 == (_QWORD *)-8192;
        if (v77)
          v75 = v73;
        v78 = v72 + v76++;
        v72 = v78 & (v320 - 1);
        v73 = (_QWORD *)(v319[0] + 72 * v72);
        v74 = (_QWORD *)*v73;
        if (v71 == (char *)*v73)
          goto LABEL_88;
      }
      if (v75)
        v79 = v75;
      else
        v79 = v73;
LABEL_87:
      v73 = sub_1C50F1F2C((uint64_t)v319, (uint64_t)&v324, (uint64_t *)&v324, v79);
      *v73 = v324;
      *(_OWORD *)(v73 + 5) = 0u;
      *(_OWORD *)(v73 + 1) = 0u;
      *(_OWORD *)(v73 + 3) = 0u;
      *(_OWORD *)(v73 + 7) = 0u;
      v73[5] = v73 + 7;
      *((_DWORD *)v73 + 13) = 2;
    }
LABEL_88:
    if (!*((_DWORD *)v73 + 2))
    {
      *((_DWORD *)v73 + 4) = ++v313;
      *((_DWORD *)v73 + 2) = v313;
      v80 = v324;
      v73[3] = v324;
      v81 = v317;
      if (v317 >= v318)
      {
        v83 = (char *)v316;
        v84 = (v317 - (_BYTE *)v316) >> 3;
        v85 = v84 + 1;
        if ((unint64_t)(v84 + 1) >> 61)
LABEL_464:
          abort();
        v86 = v318 - (_BYTE *)v316;
        if ((v318 - (_BYTE *)v316) >> 2 > v85)
          v85 = v86 >> 2;
        if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8)
          v87 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v87 = v85;
        if (v87)
        {
          if (v87 >> 61)
LABEL_465:
            sub_1C4764EE4();
          v88 = (char *)operator new(8 * v87);
        }
        else
        {
          v88 = 0;
        }
        v89 = &v88[8 * v84];
        *(_QWORD *)v89 = v80;
        v82 = v89 + 8;
        if (v81 != v83)
        {
          do
          {
            v90 = *((_QWORD *)v81 - 1);
            v81 -= 8;
            *((_QWORD *)v89 - 1) = v90;
            v89 -= 8;
          }
          while (v81 != v83);
          v81 = (char *)v316;
        }
        v316 = v89;
        v317 = v82;
        v318 = &v88[8 * v87];
        if (v81)
          operator delete(v81);
      }
      else
      {
        *(_QWORD *)v317 = v80;
        v82 = v81 + 8;
      }
      v317 = v82;
      if (v321)
        sub_1C50F2308(*(_QWORD *)(v321 + 8), (uint64_t)v324, (uint64_t)&__p);
      else
        sub_1C50F2538(v324, (uint64_t *)&__p);
      v91 = (char **)__p;
      v92 = (char **)((char *)__p + 8 * v329);
      if ((_DWORD)v329)
      {
        while (1)
        {
          v323 = 0;
          v323 = *v91;
          v93 = sub_1C50F1E18(v319, (uint64_t)v323);
          if ((uint64_t *)(v319[0] + 72 * v320) == v93)
            break;
          v94 = v93;
          if (!*((_DWORD *)v93 + 2))
            break;
          v95 = v324;
          if (v323 != v324)
          {
            v97 = v93 + 6;
            v96 = *((unsigned int *)v93 + 12);
            v98 = v93 + 5;
            goto LABEL_149;
          }
LABEL_153:
          if (++v91 == v92)
          {
            v91 = (char **)__p;
            goto LABEL_156;
          }
        }
        v95 = v323;
        v99 = *(_QWORD *)(a1 + 24);
        v100 = *(unsigned int *)(a1 + 40);
        v101 = v323 >> 4;
        if ((_DWORD)v100)
        {
          LODWORD(v102) = (v101 ^ (v323 >> 9)) & (v100 - 1);
          v103 = v99 + 16 * v102;
          v104 = *(char **)v103;
          if (*(char **)v103 == v323)
            goto LABEL_121;
          v105 = 1;
          while (v104 != (char *)-4096)
          {
            v106 = v102 + v105++;
            v102 = v106 & (v100 - 1);
            v104 = *(char **)(v99 + 16 * v102);
            if (v104 == v323)
            {
              v103 = v99 + 16 * v102;
              goto LABEL_121;
            }
          }
        }
        v103 = v99 + 16 * v100;
LABEL_121:
        if (*(_DWORD *)(*(_QWORD *)(v103 + 8) + 16) <= v67)
        {
          v113 = (char *)v325;
          v114 = v326;
          v115 = (char *)v325;
          if ((_DWORD)v326)
          {
            v116 = 8 * v326;
            v115 = (char *)v325;
            while (*(char **)v115 != v323)
            {
              v115 += 8;
              v116 -= 8;
              if (!v116)
              {
                v115 = (char *)v325 + 8 * v326;
                break;
              }
            }
          }
          if (v326 != (v115 - (_BYTE *)v325) >> 3)
            goto LABEL_153;
          if (v326 >= HIDWORD(v326))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v325, (uint64_t)v327, v326 + 1, 8);
            v113 = (char *)v325;
            v114 = v326;
          }
          v117 = &v113[8 * v114];
          v97 = &v326;
          goto LABEL_152;
        }
        if (v320)
        {
          v107 = (v101 ^ (v323 >> 9)) & (v320 - 1);
          v94 = (uint64_t *)(v319[0] + 72 * v107);
          v108 = (_QWORD *)*v94;
          if (v323 == (char *)*v94)
            goto LABEL_146;
          v109 = 0;
          v110 = 1;
          while (v108 != (_QWORD *)-4096)
          {
            if (v109)
              v111 = 0;
            else
              v111 = v108 == (_QWORD *)-8192;
            if (v111)
              v109 = v94;
            v112 = v107 + v110++;
            v107 = v112 & (v320 - 1);
            v94 = (uint64_t *)(v319[0] + 72 * v107);
            v108 = (_QWORD *)*v94;
            if (v323 == (char *)*v94)
              goto LABEL_146;
          }
          if (v109)
            v118 = v109;
          else
            v118 = v94;
        }
        else
        {
          v118 = 0;
        }
        v94 = sub_1C50F1F2C((uint64_t)v319, (uint64_t)&v323, (uint64_t *)&v323, v118);
        *v94 = (uint64_t)v323;
        *(_OWORD *)(v94 + 5) = 0u;
        *(_OWORD *)(v94 + 1) = 0u;
        *(_OWORD *)(v94 + 3) = 0u;
        *(_OWORD *)(v94 + 7) = 0u;
        v94[5] = (uint64_t)(v94 + 7);
        *((_DWORD *)v94 + 13) = 2;
        v95 = v323;
LABEL_146:
        v119 = v335;
        if (v335 >= (unint64_t)HIDWORD(v335))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v336, v335 + 1, 8);
          v119 = v335;
        }
        *((_QWORD *)__src + v119) = v95;
        v97 = v94 + 6;
        v96 = *((unsigned int *)v94 + 12);
        LODWORD(v335) = v335 + 1;
        *((_DWORD *)v94 + 3) = v313;
        v98 = v94 + 5;
        v95 = v324;
LABEL_149:
        if (v96 >= *((unsigned int *)v97 + 1))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v98, (uint64_t)(v94 + 7), v96 + 1, 8);
          v96 = *((unsigned int *)v94 + 12);
        }
        v117 = (char *)(*v98 + 8 * v96);
LABEL_152:
        *(_QWORD *)v117 = v95;
        ++*(_DWORD *)v97;
        goto LABEL_153;
      }
LABEL_156:
      if (v91 != &v330)
        free(v91);
    }
    v70 = v335;
    if ((_DWORD)v335)
      continue;
    break;
  }
  if (__src != v336)
    free(__src);
  if ((_DWORD)v326)
  {
    v174 = v325;
    v175 = (char *)v325 + 8 * v326;
    v176 = *(_QWORD *)(a1 + 24);
    LODWORD(v177) = *(_DWORD *)(a1 + 40);
    v178 = v310;
    while (1)
    {
      if ((_DWORD)v177)
      {
        LODWORD(v179) = ((*v174 >> 4) ^ (*v174 >> 9)) & (v177 - 1);
        v180 = (uint64_t *)(v176 + 16 * v179);
        v181 = *v180;
        if (*v174 == *v180)
          goto LABEL_265;
        v182 = 1;
        while (v181 != -4096)
        {
          v183 = v179 + v182++;
          v179 = v183 & (v177 - 1);
          v181 = *(_QWORD *)(v176 + 16 * v179);
          if (*v174 == v181)
          {
            v180 = (uint64_t *)(v176 + 16 * v179);
            goto LABEL_265;
          }
        }
      }
      v180 = (uint64_t *)(v176 + 16 * v177);
LABEL_265:
      v184 = (uint64_t *)v180[1];
      v185 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator(a1, *v184, *v310);
      v176 = *(_QWORD *)(a1 + 24);
      v177 = *(unsigned int *)(a1 + 40);
      if ((_DWORD)v177)
      {
        LODWORD(v186) = ((v185 >> 4) ^ (v185 >> 9)) & (v177 - 1);
        v187 = (uint64_t *)(v176 + 16 * v186);
        v188 = *v187;
        if (v185 == *v187)
        {
LABEL_271:
          if (v187 != (uint64_t *)(v176 + 16 * v177))
          {
            v191 = v187[1];
            goto LABEL_274;
          }
        }
        else
        {
          v189 = 1;
          while (v188 != -4096)
          {
            v190 = v186 + v189++;
            v186 = v190 & (v177 - 1);
            v188 = *(_QWORD *)(v176 + 16 * v186);
            if (v185 == v188)
            {
              v187 = (uint64_t *)(v176 + 16 * v186);
              goto LABEL_271;
            }
          }
        }
      }
      v191 = 0;
LABEL_274:
      if ((uint64_t *)v191 != v184 && *(_DWORD *)(v191 + 16) < *((_DWORD *)v178 + 4))
        v178 = (uint64_t *)v191;
      if (++v174 == (_QWORD *)v175)
        goto LABEL_281;
    }
  }
  v178 = v310;
LABEL_281:
  if (!v178[1])
  {
    sub_1C50F0A2C(a1, v311);
    goto LABEL_400;
  }
  if (v313)
  {
    v192 = v313;
    while (1)
    {
      v193 = *(unsigned int *)(a1 + 40);
      if (!(_DWORD)v193)
        goto LABEL_292;
      v194 = *((_QWORD *)v316 + v192);
      v195 = *(_QWORD *)(a1 + 24);
      LODWORD(v196) = ((v194 >> 4) ^ (v194 >> 9)) & (v193 - 1);
      v197 = (uint64_t *)(v195 + 16 * v196);
      v198 = *v197;
      if (v194 != *v197)
        break;
LABEL_290:
      if (v197 == (uint64_t *)(v195 + 16 * v193))
        goto LABEL_292;
      v201 = v197[1];
LABEL_293:
      v202 = *(_QWORD *)(v201 + 8);
      v203 = *(uint64_t **)(v202 + 24);
      v204 = *(unsigned int *)(v202 + 32);
      v205 = &v203[v204];
      if ((_DWORD)v204)
      {
        v206 = 8 * v204;
        while (*v203 != v201)
        {
          ++v203;
          v206 -= 8;
          if (!v206)
          {
            v203 = v205;
            break;
          }
        }
      }
      v207 = *v203;
      *v203 = *(v205 - 1);
      *(v205 - 1) = v207;
      *(_DWORD *)(v202 + 32) = v204 - 1;
      __src = *(void **)v201;
      sub_1C4867FFC(v309, &__src);
      if (!(_DWORD)--v192)
        goto LABEL_299;
    }
    v199 = 1;
    while (v198 != -4096)
    {
      v200 = v196 + v199++;
      v196 = v200 & (v193 - 1);
      v198 = *(_QWORD *)(v195 + 16 * v196);
      if (v194 == v198)
      {
        v197 = (uint64_t *)(v195 + 16 * v196);
        goto LABEL_290;
      }
    }
LABEL_292:
    v201 = 0;
    goto LABEL_293;
  }
LABEL_299:
  if (v178 == v310)
    goto LABEL_400;
  v315 = *((_DWORD *)v178 + 4);
  v208 = (uint64_t *)v178[1];
  __src = 0;
  v209 = 1;
  sub_1C4DE4490(&v316, (char *)&__src, (char *)&v335, 1uLL);
  sub_1C61ED094((uint64_t)v319);
  v210 = (char *)*v178;
  v324 = v210;
  __src = v336;
  v336[0] = v210;
  v335 = 0x4000000001;
  if (v320)
  {
    v211 = v320 - 1;
    v212 = (v320 - 1) & ((v210 >> 4) ^ (v210 >> 9));
    v213 = (char **)(v319[0] + 72 * v212);
    v214 = *v213;
    if (*v213 == v210)
    {
LABEL_313:
      *(_DWORD *)(v319[0] + 72 * v212 + 12) = 0;
    }
    else
    {
      v215 = 1;
      v216 = *v213;
      v217 = v211 & ((v210 >> 4) ^ (v210 >> 9));
      while (v216 != (char *)-4096)
      {
        v218 = v217 + v215++;
        v217 = v218 & v211;
        v216 = *(char **)(v319[0] + 72 * v217);
        if (v216 == v210)
        {
          v219 = 0;
          v220 = 1;
          while (v214 != (char *)-4096)
          {
            if (v219)
              v221 = 0;
            else
              v221 = v214 == (char *)-8192;
            if (v221)
              v219 = v213;
            v222 = v212 + v220++;
            v212 = v222 & v211;
            v213 = (char **)(v319[0] + 72 * v212);
            v214 = *v213;
            if (*v213 == v210)
              goto LABEL_313;
          }
          if (v219)
            v307 = v219;
          else
            v307 = v213;
          v308 = sub_1C50F1F2C((uint64_t)v319, (uint64_t)&v324, (uint64_t *)&v324, v307);
          *v308 = v324;
          *(_OWORD *)(v308 + 5) = 0u;
          *(_OWORD *)(v308 + 3) = 0u;
          *(_OWORD *)(v308 + 1) = 0u;
          *(_OWORD *)(v308 + 7) = 0u;
          v308[5] = v308 + 7;
          *((_DWORD *)v308 + 13) = 2;
          v209 = v335;
          if (!(_DWORD)v335)
            goto LABEL_396;
          goto LABEL_315;
        }
      }
    }
    v209 = 1;
  }
LABEL_315:
  v223 = 0;
  do
  {
    v323 = 0;
    v224 = (char *)*((_QWORD *)__src + v209 - 1);
    LODWORD(v335) = v209 - 1;
    v323 = v224;
    if (!v320)
    {
      v232 = 0;
LABEL_330:
      v226 = sub_1C50F1F2C((uint64_t)v319, (uint64_t)&v323, (uint64_t *)&v323, v232);
      *v226 = v323;
      *(_OWORD *)(v226 + 5) = 0u;
      *(_OWORD *)(v226 + 1) = 0u;
      *(_OWORD *)(v226 + 3) = 0u;
      *(_OWORD *)(v226 + 7) = 0u;
      v226[5] = v226 + 7;
      *((_DWORD *)v226 + 13) = 2;
      goto LABEL_331;
    }
    v225 = (v320 - 1) & ((v224 >> 4) ^ (v224 >> 9));
    v226 = (_QWORD *)(v319[0] + 72 * v225);
    v227 = *v226;
    if (v224 != (char *)*v226)
    {
      v228 = 0;
      v229 = 1;
      while (v227 != -4096)
      {
        if (v228)
          v230 = 0;
        else
          v230 = v227 == -8192;
        if (v230)
          v228 = v226;
        v231 = v225 + v229++;
        v225 = v231 & (v320 - 1);
        v226 = (_QWORD *)(v319[0] + 72 * v225);
        v227 = *v226;
        if (v224 == (char *)*v226)
          goto LABEL_331;
      }
      if (v228)
        v232 = v228;
      else
        v232 = v226;
      goto LABEL_330;
    }
LABEL_331:
    if (*((_DWORD *)v226 + 2))
      goto LABEL_395;
    *((_DWORD *)v226 + 4) = ++v223;
    *((_DWORD *)v226 + 2) = v223;
    v233 = v323;
    v226[3] = v323;
    v234 = v317;
    if (v317 >= v318)
    {
      v236 = (char *)v316;
      v237 = (v317 - (_BYTE *)v316) >> 3;
      v238 = v237 + 1;
      if ((unint64_t)(v237 + 1) >> 61)
        goto LABEL_464;
      v239 = v318 - (_BYTE *)v316;
      if ((v318 - (_BYTE *)v316) >> 2 > v238)
        v238 = v239 >> 2;
      if ((unint64_t)v239 >= 0x7FFFFFFFFFFFFFF8)
        v240 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v240 = v238;
      if (v240)
      {
        if (v240 >> 61)
          goto LABEL_465;
        v241 = (char *)operator new(8 * v240);
      }
      else
      {
        v241 = 0;
      }
      v242 = &v241[8 * v237];
      *(_QWORD *)v242 = v233;
      v235 = v242 + 8;
      if (v234 != v236)
      {
        do
        {
          v243 = *((_QWORD *)v234 - 1);
          v234 -= 8;
          *((_QWORD *)v242 - 1) = v243;
          v242 -= 8;
        }
        while (v234 != v236);
        v234 = (char *)v316;
      }
      v316 = v242;
      v317 = v235;
      v318 = &v241[8 * v240];
      if (v234)
        operator delete(v234);
    }
    else
    {
      *(_QWORD *)v317 = v233;
      v235 = v234 + 8;
    }
    v317 = v235;
    if (v321)
      sub_1C50F2308(*(_QWORD *)(v321 + 8), (uint64_t)v323, (uint64_t)&__p);
    else
      sub_1C50F2538(v323, (uint64_t *)&__p);
    v244 = (char **)__p;
    v245 = (char **)((char *)__p + 8 * v329);
    if (!(_DWORD)v329)
      goto LABEL_393;
    do
    {
      v322 = 0;
      v322 = *v244;
      v247 = sub_1C50F1E18(v319, (uint64_t)v322);
      if ((uint64_t *)(v319[0] + 72 * v320) != v247)
      {
        v248 = v247;
        if (*((_DWORD *)v247 + 2))
        {
          v249 = v323;
          if (v322 == v323)
            goto LABEL_391;
          v250 = v247 + 5;
          v252 = v247 + 6;
          v251 = *((unsigned int *)v247 + 12);
          v253 = *((unsigned int *)v247 + 13);
          goto LABEL_388;
        }
      }
      v254 = v322;
      v255 = *(_QWORD *)(a1 + 24);
      v256 = *(unsigned int *)(a1 + 40);
      v257 = v322 >> 4;
      if (!(_DWORD)v256)
        goto LABEL_366;
      LODWORD(v258) = (v257 ^ (v322 >> 9)) & (v256 - 1);
      v259 = (char **)(v255 + 16 * v258);
      v260 = *v259;
      if (*v259 != v322)
      {
        v261 = 1;
        while (v260 != (char *)-4096)
        {
          v262 = v258 + v261++;
          v258 = v262 & (v256 - 1);
          v260 = *(char **)(v255 + 16 * v258);
          if (v260 == v322)
          {
            v259 = (char **)(v255 + 16 * v258);
            goto LABEL_367;
          }
        }
LABEL_366:
        v259 = (char **)(v255 + 16 * v256);
      }
LABEL_367:
      if (v259 == (char **)(v255 + 16 * v256))
        goto LABEL_391;
      v263 = v259[1];
      if (!v263 || *((_DWORD *)v263 + 4) <= v315)
        goto LABEL_391;
      if (!v320)
      {
        v246 = 0;
LABEL_384:
        v248 = sub_1C50F1F2C((uint64_t)v319, (uint64_t)&v322, (uint64_t *)&v322, v246);
        *v248 = (uint64_t)v322;
        *(_OWORD *)(v248 + 5) = 0u;
        *(_OWORD *)(v248 + 1) = 0u;
        *(_OWORD *)(v248 + 3) = 0u;
        *(_OWORD *)(v248 + 7) = 0u;
        v248[5] = (uint64_t)(v248 + 7);
        *((_DWORD *)v248 + 13) = 2;
        v254 = v322;
        goto LABEL_385;
      }
      v264 = (v257 ^ (v322 >> 9)) & (v320 - 1);
      v248 = (uint64_t *)(v319[0] + 72 * v264);
      v265 = *v248;
      if (v322 != (char *)*v248)
      {
        v266 = 0;
        v267 = 1;
        while (v265 != -4096)
        {
          if (v266)
            v268 = 0;
          else
            v268 = v265 == -8192;
          if (v268)
            v266 = v248;
          v269 = v264 + v267++;
          v264 = v269 & (v320 - 1);
          v248 = (uint64_t *)(v319[0] + 72 * v264);
          v265 = *v248;
          if (v322 == (char *)*v248)
            goto LABEL_385;
        }
        if (v266)
          v246 = v266;
        else
          v246 = v248;
        goto LABEL_384;
      }
LABEL_385:
      v270 = v335;
      if (v335 >= (unint64_t)HIDWORD(v335))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v336, v335 + 1, 8);
        v270 = v335;
      }
      *((_QWORD *)__src + v270) = v254;
      v252 = v248 + 6;
      v251 = *((unsigned int *)v248 + 12);
      LODWORD(v335) = v335 + 1;
      *((_DWORD *)v248 + 3) = v223;
      v250 = v248 + 5;
      v249 = v323;
      v253 = *((unsigned int *)v248 + 13);
LABEL_388:
      if (v251 >= v253)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v250, (uint64_t)(v248 + 7), v251 + 1, 8);
        v251 = *((unsigned int *)v248 + 12);
      }
      *(_QWORD *)(*v250 + 8 * v251) = v249;
      ++*v252;
LABEL_391:
      ++v244;
    }
    while (v244 != v245);
    v244 = (char **)__p;
LABEL_393:
    if (v244 != &v330)
      free(v244);
LABEL_395:
    v209 = v335;
  }
  while ((_DWORD)v335);
LABEL_396:
  if (__src != v336)
    free(__src);
  sub_1C50F0D38((uint64_t)&v316, a1, v315);
  sub_1C51577A0((uint64_t *)&v316, a1, *v208);
LABEL_400:
  v271 = v319[0];
  if (v320)
  {
    v272 = v319[0] + 56;
    v273 = 72 * v320;
    do
    {
      v274 = *(_QWORD *)(v272 - 56);
      if (v274 != -4096 && v274 != -8192)
      {
        v275 = *(void **)(v272 - 16);
        if ((void *)v272 != v275)
          free(v275);
      }
      v272 += 72;
      v273 -= 72;
    }
    while (v273);
    v271 = v319[0];
  }
  MEMORY[0x1CAA32FB4](v271, 8);
  if (v316)
  {
    v317 = (char *)v316;
    operator delete(v316);
  }
  if (v325 != v327)
    free(v325);
}

void sub_1C5156BC0(_DWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;

  v7 = 0;
  if (sub_1C515430C((uint64_t)a1, a2, &v7))
  {
    v3 = 0;
    v4 = v7;
    do
    {
      v5 = (_QWORD *)v4[v3 + 5];
      if (&v4[v3 + 7] != v5)
        free(v5);
      v3 -= 4;
    }
    while (v3 != -8);
    *v4 = -8192;
    v6 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v6;
  }
}

void sub_1C5156C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t NearestCommonDominator;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _BYTE *v18;
  _QWORD **v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unsigned int v64;
  char *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[31];
  void *v73;
  unsigned int v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  _BYTE v78[64];
  void *v79;
  uint64_t v80;
  _QWORD v81[9];
  uint64_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  void *v87;
  uint64_t v88;
  _BYTE v89[64];
  void *v90;
  uint64_t v91;
  _QWORD v92[10];

  v92[8] = *MEMORY[0x1E0C80C00];
  v71 = a4;
  if (a3 && *(_QWORD *)a4)
    NearestCommonDominator = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator(a1, a3, *(_QWORD *)a4);
  else
    NearestCommonDominator = 0;
  v8 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(a1 + 24);
    LODWORD(v10) = ((NearestCommonDominator >> 4) ^ (NearestCommonDominator >> 9)) & (v8 - 1);
    v11 = (uint64_t *)(v9 + 16 * v10);
    v12 = *v11;
    if (NearestCommonDominator == *v11)
    {
LABEL_11:
      if (v11 != (uint64_t *)(v9 + 16 * v8))
      {
        v15 = v11[1];
        goto LABEL_14;
      }
    }
    else
    {
      v13 = 1;
      while (v12 != -4096)
      {
        v14 = v10 + v13++;
        v10 = v14 & (v8 - 1);
        v12 = *(_QWORD *)(v9 + 16 * v10);
        if (NearestCommonDominator == v12)
        {
          v11 = (uint64_t *)(v9 + 16 * v10);
          goto LABEL_11;
        }
      }
    }
  }
  v15 = 0;
LABEL_14:
  v16 = *(_DWORD *)(v15 + 16) + 1;
  if (v16 < *(_DWORD *)(a4 + 16))
  {
    v79 = v81;
    v80 = 0x800000001;
    v82 = 1;
    v83 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v84 = v83;
    v85 = v83;
    v86 = v83;
    v87 = v89;
    v88 = 0x800000000;
    v90 = v92;
    v91 = 0x800000000;
    v76 = v78;
    v77 = 0x800000000;
    v81[0] = a4;
    v69 = v15;
    sub_1C5157358((uint64_t)&v82, &v71, (uint64_t)&v73);
    v17 = v80;
    while ((_DWORD)v80)
    {
      v18 = v79;
      v19 = *(_QWORD ***)v79;
      v20 = v17;
      if (v17 != 1)
      {
        v21 = 0;
        v22 = (char *)v79 + 8 * v17;
        v23 = ((unint64_t)v17 - 2) >> 1;
        v24 = v79;
        do
        {
          v25 = &v24[v21];
          v28 = v25[1];
          v26 = (char *)(v25 + 1);
          v27 = v28;
          v29 = (2 * v21) | 1;
          v30 = 2 * v21 + 2;
          if (v30 < v20 && *(_DWORD *)(v27 + 16) < *(_DWORD *)(*((_QWORD *)v26 + 1) + 16))
          {
            v27 = *((_QWORD *)v26 + 1);
            v26 += 8;
            v29 = v30;
          }
          *v24 = v27;
          v24 = v26;
          v21 = v29;
        }
        while (v29 <= v23);
        v31 = v22 - 8;
        if (v26 == v31)
        {
          *(_QWORD *)v26 = v19;
        }
        else
        {
          *(_QWORD *)v26 = *(_QWORD *)v31;
          *(_QWORD *)v31 = v19;
          v32 = v26 - v18 + 8;
          if (v32 >= 9)
          {
            v33 = (((unint64_t)v32 >> 3) - 2) >> 1;
            v34 = &v18[8 * v33];
            v35 = *(_QWORD *)v34;
            v36 = *(_QWORD *)v26;
            v37 = *(_DWORD *)(*(_QWORD *)v26 + 16);
            if (*(_DWORD *)(*(_QWORD *)v34 + 16) < v37)
            {
              do
              {
                v38 = v34;
                *(_QWORD *)v26 = v35;
                if (!v33)
                  break;
                v33 = (v33 - 1) >> 1;
                v34 = &v18[8 * v33];
                v35 = *(_QWORD *)v34;
                v26 = v38;
              }
              while (*(_DWORD *)(*(_QWORD *)v34 + 16) < v37);
              *(_QWORD *)v38 = v36;
            }
          }
        }
      }
      LODWORD(v80) = v20 - 1;
      v39 = v88;
      if (v88 >= (unint64_t)HIDWORD(v88))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, (uint64_t)v89, v88 + 1, 8);
        v39 = v88;
      }
      *((_QWORD *)v87 + v39) = v19;
      LODWORD(v88) = v88 + 1;
      v40 = *((_DWORD *)v19 + 4);
      while (1)
      {
        if (a2)
          sub_1C50F2308(*(_QWORD *)(a2 + 8), (uint64_t)*v19, (uint64_t)&v73);
        else
          sub_1C50F2538(*v19, (uint64_t *)&v73);
        v41 = (uint64_t *)v73;
        v42 = (char *)v73 + 8 * v74;
        if (v74)
        {
          while (1)
          {
            v43 = *v41;
            v70 = 0;
            v44 = *(_QWORD *)(a1 + 24);
            v45 = *(unsigned int *)(a1 + 40);
            if ((_DWORD)v45)
            {
              LODWORD(v46) = (v45 - 1) & ((v43 >> 4) ^ (v43 >> 9));
              v47 = (uint64_t *)(v44 + 16 * v46);
              v48 = *v47;
              if (v43 == *v47)
                goto LABEL_43;
              v49 = 1;
              while (v48 != -4096)
              {
                v50 = v46 + v49++;
                v46 = v50 & (v45 - 1);
                v48 = *(_QWORD *)(v44 + 16 * v46);
                if (v43 == v48)
                {
                  v47 = (uint64_t *)(v44 + 16 * v46);
                  goto LABEL_43;
                }
              }
            }
            v47 = (uint64_t *)(v44 + 16 * v45);
LABEL_43:
            v70 = v47[1];
            v51 = *(_DWORD *)(v70 + 16);
            if (v51 > v16)
            {
              sub_1C5157358((uint64_t)&v82, &v70, (uint64_t)v72);
              if (v72[16])
              {
                v52 = v70;
                if (v51 <= v40)
                {
                  v54 = v80;
                  if (v80 >= (unint64_t)HIDWORD(v80))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, (uint64_t)v81, v80 + 1, 8);
                    v54 = v80;
                  }
                  *((_QWORD *)v79 + v54) = v52;
                  v55 = (v80 + 1);
                  LODWORD(v80) = v55;
                  if (v55 >= 2)
                  {
                    v56 = (char *)v79;
                    v57 = (char *)v79 + 8 * v55;
                    v58 = (unint64_t)(v55 - 2) >> 1;
                    v59 = (char *)v79 + 8 * v58;
                    v60 = *(_QWORD *)v59;
                    v63 = *((_QWORD *)v57 - 1);
                    v62 = v57 - 8;
                    v61 = v63;
                    v64 = *(_DWORD *)(v63 + 16);
                    if (*(_DWORD *)(*(_QWORD *)v59 + 16) < v64)
                    {
                      do
                      {
                        v65 = v59;
                        *(_QWORD *)v62 = v60;
                        if (!v58)
                          break;
                        v58 = (v58 - 1) >> 1;
                        v59 = &v56[8 * v58];
                        v60 = *(_QWORD *)v59;
                        v62 = v65;
                      }
                      while (*(_DWORD *)(*(_QWORD *)v59 + 16) < v64);
                      *(_QWORD *)v65 = v61;
                    }
                  }
                }
                else
                {
                  v53 = v77;
                  if (v77 >= (unint64_t)HIDWORD(v77))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, (uint64_t)v78, v77 + 1, 8);
                    v53 = v77;
                  }
                  *((_QWORD *)v76 + v53) = v52;
                  LODWORD(v77) = v77 + 1;
                }
              }
            }
            if (++v41 == (uint64_t *)v42)
            {
              v41 = (uint64_t *)v73;
              break;
            }
          }
        }
        if (v41 != &v75)
          free(v41);
        if (!(_DWORD)v77)
          break;
        v19 = (_QWORD **)*((_QWORD *)v76 + v77 - 1);
        LODWORD(v77) = v77 - 1;
      }
      v17 = v80;
    }
    if ((_DWORD)v88)
    {
      v66 = (uint64_t *)v87;
      v67 = 8 * v88;
      do
      {
        v68 = *v66++;
        llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::setIDom(v68, v69);
        v67 -= 8;
      }
      while (v67);
    }
    if (v76 != v78)
      free(v76);
    if (v90 != v92)
      free(v90);
    if (v87 != v89)
      free(v87);
    if ((v82 & 1) == 0)
      MEMORY[0x1CAA32FB4](v83.i64[0], 8);
    if (v79 != v81)
      free(v79);
  }
}

uint64_t sub_1C515725C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;

  v2 = *(unsigned int *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v4 = 72 * v2;
    v5 = (_QWORD *)(v3 + 56);
    do
    {
      v6 = *(v5 - 7);
      if (v6 != -4096 && v6 != -8192)
      {
        v7 = (_QWORD *)*(v5 - 2);
        if (v5 != v7)
          free(v7);
      }
      v5 += 9;
      v4 -= 72;
    }
    while (v4);
    v3 = *(_QWORD *)(a1 + 24);
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_1C51572F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 72 * v1;
    v3 = *(_QWORD *)a1 + 56;
    do
    {
      v4 = *(_QWORD *)(v3 - 56);
      if (v4 != -4096 && v4 != -8192)
      {
        v5 = *(void **)(v3 - 16);
        if ((void *)v3 != v5)
          free(v5);
      }
      v3 += 72;
      v2 -= 72;
    }
    while (v2);
  }
}

_QWORD *sub_1C5157358@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_1C5157410(a1, a2, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v8 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v9 = 8;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(unsigned int *)(a1 + 16);
    }
    v12 = 0;
    v13 = v8 + 8 * v9;
  }
  else
  {
    result = sub_1C51574C0((_DWORD *)a1, (uint64_t)a2, a2, v14);
    v7 = result;
    *result = *a2;
    v10 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v11 = 8;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(unsigned int *)(a1 + 16);
    }
    v13 = v10 + 8 * v11;
    v12 = 1;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v13;
  *(_BYTE *)(a3 + 16) = v12;
  return result;
}

uint64_t sub_1C5157410(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C51574C0(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 8;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C515757C((uint64_t)a1, v7);
  v9 = 0;
  sub_1C5157410((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C515757C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C51576E4(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 72; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C51576E4(a1, v14, v8);
}

uint64_t sub_1C51576E4(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C5157410((uint64_t)v5, a2, &v10);
      *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

void sub_1C51577A0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;

  v7 = (uint64_t)(a1 + 3);
  v6 = a1[3];
  v8 = *a1;
  v9 = (uint64_t *)(*a1 + 8);
  v10 = *((_DWORD *)a1 + 10);
  if (v10)
  {
    v11 = v10 - 1;
    v12 = ((*v9 >> 4) ^ (*v9 >> 9)) & v11;
    v13 = (_QWORD *)(v6 + 72 * v12);
    v14 = *v13;
    if (*v9 == *v13)
      goto LABEL_16;
    v15 = 0;
    v16 = 1;
    while (v14 != -4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v14 == -8192;
      if (v17)
        v15 = v13;
      v18 = v12 + v16++;
      v12 = v18 & v11;
      v13 = (_QWORD *)(v6 + 72 * v12);
      v14 = *v13;
      if (*v9 == *v13)
        goto LABEL_16;
    }
    if (v15)
      v19 = v15;
    else
      v19 = v13;
  }
  else
  {
    v19 = 0;
  }
  v13 = sub_1C50F1F2C(v7, (uint64_t)v9, v9, v19);
  *v13 = *v9;
  *(_OWORD *)(v13 + 5) = 0u;
  *(_OWORD *)(v13 + 3) = 0u;
  *(_OWORD *)(v13 + 1) = 0u;
  *(_OWORD *)(v13 + 7) = 0u;
  v13[5] = v13 + 7;
  *((_DWORD *)v13 + 13) = 2;
  v8 = *a1;
LABEL_16:
  v13[4] = a3;
  v20 = a1[1] - v8;
  if (v20 != 8)
  {
    v21 = v20 >> 3;
    v22 = 1;
    while (1)
    {
      v52 = 0;
      v23 = *(_QWORD *)(*a1 + 8 * v22);
      v52 = v23;
      v24 = *(_QWORD *)(a2 + 24);
      v25 = *(unsigned int *)(a2 + 40);
      v26 = v23 >> 4;
      if (!(_DWORD)v25)
        goto LABEL_25;
      LODWORD(v27) = (v26 ^ (v23 >> 9)) & (v25 - 1);
      v28 = (uint64_t *)(v24 + 16 * v27);
      v29 = *v28;
      if (v23 != *v28)
        break;
LABEL_24:
      if (v28 == (uint64_t *)(v24 + 16 * v25))
        goto LABEL_25;
      v32 = v28[1];
LABEL_27:
      v33 = *((_DWORD *)a1 + 10);
      if (v33)
      {
        v34 = a1[3];
        v35 = v26 ^ (v23 >> 9);
        v36 = v33 - 1;
        v37 = (v33 - 1) & v35;
        v38 = (_QWORD *)(v34 + 72 * v37);
        v39 = *v38;
        if (v23 == *v38)
        {
LABEL_37:
          if (!(_DWORD)v25)
            goto LABEL_44;
          goto LABEL_38;
        }
        v40 = 0;
        v41 = 1;
        while (v39 != -4096)
        {
          if (v40)
            v42 = 0;
          else
            v42 = v39 == -8192;
          if (v42)
            v40 = v38;
          v43 = v37 + v41++;
          v37 = v43 & v36;
          v38 = (_QWORD *)(v34 + 72 * v37);
          v39 = *v38;
          if (v23 == *v38)
            goto LABEL_37;
        }
        if (v40)
          v51 = v40;
        else
          v51 = v38;
      }
      else
      {
        v51 = 0;
      }
      v38 = sub_1C50F1F2C(v7, (uint64_t)&v52, &v52, v51);
      *v38 = v52;
      *(_OWORD *)(v38 + 5) = 0u;
      *(_OWORD *)(v38 + 1) = 0u;
      *(_OWORD *)(v38 + 3) = 0u;
      *(_OWORD *)(v38 + 7) = 0u;
      v38[5] = v38 + 7;
      *((_DWORD *)v38 + 13) = 2;
      v24 = *(_QWORD *)(a2 + 24);
      LODWORD(v25) = *(_DWORD *)(a2 + 40);
      if (!(_DWORD)v25)
        goto LABEL_44;
LABEL_38:
      v44 = v38[4];
      LODWORD(v45) = ((v44 >> 4) ^ (v44 >> 9)) & (v25 - 1);
      v46 = (uint64_t *)(v24 + 16 * v45);
      v47 = *v46;
      if (v44 == *v46)
      {
LABEL_43:
        if (v46 != (uint64_t *)(v24 + 16 * v25))
        {
          v50 = v46[1];
          goto LABEL_46;
        }
      }
      else
      {
        v48 = 1;
        while (v47 != -4096)
        {
          v49 = v45 + v48++;
          v45 = v49 & (v25 - 1);
          v47 = *(_QWORD *)(v24 + 16 * v45);
          if (v44 == v47)
          {
            v46 = (uint64_t *)(v24 + 16 * v45);
            goto LABEL_43;
          }
        }
      }
LABEL_44:
      v50 = 0;
LABEL_46:
      llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::setIDom(v32, v50);
      if (++v22 == v21)
        return;
    }
    v30 = 1;
    while (v29 != -4096)
    {
      v31 = v27 + v30++;
      v27 = v31 & (v25 - 1);
      v29 = *(_QWORD *)(v24 + 16 * v27);
      if (v23 == v29)
      {
        v28 = (uint64_t *)(v24 + 16 * v27);
        goto LABEL_24;
      }
    }
LABEL_25:
    v32 = 0;
    goto LABEL_27;
  }
}

void sub_1C5157AA0(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_DWORD *)(a1 + 8);
  sub_1C51572F0(a1);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD **)a1;
      v6 = 72 * v4;
      do
      {
        *v5 = -4096;
        v5 += 9;
        v6 -= 72;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v4)
    {
      v7 = (4 * (int)v4 / 3u + 1) | ((unint64_t)(4 * (int)v4 / 3u + 1) >> 1);
      v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
      LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v8;
      v9 = operator new(72 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = 0;
      v10 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v10)
      {
        v11 = 72 * v10;
        do
        {
          *v9 = -4096;
          v9 += 9;
          v11 -= 72;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
}

_BYTE *sub_1C5157BAC(unsigned int *a1, uint64_t a2, __int128 *__src, __int128 *a4)
{
  __int128 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned int v15;
  _OWORD *v16;
  __int128 v17;

  v5 = __src;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 4;
  v9 = a1[2];
  if (*(_QWORD *)a1 + 16 * v9 == a2)
  {
    sub_1C612E234(a1, __src, a4);
    return (_BYTE *)(*(_QWORD *)a1 + 16 * v8);
  }
  else
  {
    v10 = (char *)a4 - (char *)__src;
    v11 = a4 - __src;
    if (v9 + v11 > a1[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v9 + v11, 16);
      v7 = *(_QWORD *)a1;
      v9 = a1[2];
    }
    v12 = (_BYTE *)(v7 + 16 * v8);
    v13 = (_BYTE *)(v7 + 16 * v9);
    v14 = (v13 - v12) >> 4;
    if (v14 >= v11)
    {
      sub_1C6132E18(a1, &v13[-16 * v11], (char *)(v7 + 16 * v9));
      if (&v13[-16 * v11] != v12)
        memmove(&v12[16 * v11], v12, &v13[-16 * v11] - v12);
      if (v5 != a4)
        memmove(v12, v5, (char *)a4 - (char *)v5);
    }
    else
    {
      v15 = v9 + (v10 >> 4);
      a1[2] = v15;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 16 * v15 - 16 * v14), v12, v13 - v12);
        v16 = v12;
        do
        {
          v17 = *v5++;
          *v16++ = v17;
          --v14;
        }
        while (v14);
      }
      if (v5 != a4)
        memcpy(v13, v5, (char *)a4 - (char *)v5);
    }
  }
  return v12;
}

uint64_t sub_1C5157D08(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  int v4;
  llvm::raw_ostream *v6;
  void *v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  llvm *v10;
  llvm::raw_ostream *v11;
  void *v12;
  llvm::raw_ostream *v13;
  llvm *v14;
  llvm::raw_ostream *v15;
  const char *v16;
  const char *v17;
  void *v18[2];
  uint64_t v19;
  uint64_t v20[2];
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v18[0] = &v19;
  v18[1] = (void *)0x100000000;
  v25 = 0;
  v20[0] = 0;
  v20[1] = 0;
  v21 = 0;
  v24 = 0;
  v2 = *(_QWORD *)(a1 + 56);
  v22 = 0;
  v23 = v2;
  sub_1C50F0A2C((uint64_t)v18, 0);
  v3 = (llvm *)llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::compare(a1, (uint64_t)v18);
  v4 = (int)v3;
  if ((_DWORD)v3)
  {
    v6 = (llvm::raw_ostream *)llvm::errs(v3);
    v7 = (void *)*((_QWORD *)v6 + 4);
    if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 0x37uLL)
    {
      qmemcpy(v7, "DominatorTree is different than a freshly computed one!\n", 56);
      v8 = *((_QWORD *)v6 + 4) + 56;
      *((_QWORD *)v6 + 4) = v8;
    }
    else
    {
      v6 = llvm::raw_ostream::write(v6, "DominatorTree is different than a freshly computed one!\n", 0x38uLL);
      v8 = *((_QWORD *)v6 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v6 + 3) - v8) > 9)
    {
      *(_WORD *)(v8 + 8) = 2618;
      *(_QWORD *)v8 = *(_QWORD *)"\tCurrent:\n";
      *((_QWORD *)v6 + 4) += 10;
    }
    else
    {
      v6 = llvm::raw_ostream::write(v6, "\tCurrent:\n", 0xAuLL);
    }
    v9 = (llvm::raw_ostream *)llvm::errs(v6);
    v10 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::print(a1, v9);
    v11 = (llvm::raw_ostream *)llvm::errs(v10);
    v12 = (void *)*((_QWORD *)v11 + 4);
    if (*((_QWORD *)v11 + 3) - (_QWORD)v12 > 0x18uLL)
    {
      qmemcpy(v12, "\n\tFreshly computed tree:\n", 25);
      *((_QWORD *)v11 + 4) += 25;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, "\n\tFreshly computed tree:\n", 0x19uLL);
    }
    v13 = (llvm::raw_ostream *)llvm::errs(v11);
    v14 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::print((uint64_t)v18, v13);
    v15 = (llvm::raw_ostream *)llvm::errs(v14);
    v16 = (const char *)*((_QWORD *)v15 + 4);
    v17 = (const char *)*((_QWORD *)v15 + 2);
    if (v16 != v17)
    {
      *((_QWORD *)v15 + 4) = v17;
      llvm::raw_ostream::flush_tied_then_write(v15, v17, v16 - v17);
    }
  }
  sub_1C4DC4E38(v20);
  if (v18[0] != &v19)
    free(v18[0]);
  return v4 ^ 1u;
}

BOOL sub_1C5157EFC(uint64_t a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  llvm *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  size_t v9;
  llvm::raw_ostream *v10;
  void *v11;
  void *v12;
  llvm::raw_ostream *v13;
  const char *v14;
  const char *v15;
  _BOOL8 v16;
  _BOOL8 v18;
  llvm::raw_ostream *v19;
  void *v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::MachineBasicBlock **v24;
  uint64_t v25;
  llvm::MachineBasicBlock *v26;
  llvm::raw_ostream *v27;
  _DWORD *v28;
  _WORD *v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  uint64_t v32;
  llvm::MachineBasicBlock **v33;
  uint64_t v34;
  llvm::MachineBasicBlock *v35;
  llvm::raw_ostream *v36;
  _DWORD *v37;
  _WORD *v38;
  llvm::raw_ostream *v39;
  _BYTE *v40;
  llvm::raw_ostream *v41;
  const char *v42;
  const char *v43;
  void *v44;
  uint64_t v45;
  _QWORD v46[2];

  v46[1] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(_DWORD *)(a1 + 8);
  if (v1)
    v3 = 1;
  else
    v3 = v2 == 0;
  if (!v3)
  {
    v10 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    v11 = (void *)*((_QWORD *)v10 + 4);
    if (*((_QWORD *)v10 + 3) - (_QWORD)v11 <= 0x21uLL)
    {
      v8 = "Tree has no parent but has roots!\n";
      v9 = 34;
      goto LABEL_14;
    }
    qmemcpy(v11, "Tree has no parent but has roots!\n", 34);
    v30 = *((_QWORD *)v10 + 4) + 34;
    goto LABEL_59;
  }
  if (!v2)
  {
    v10 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    v12 = (void *)*((_QWORD *)v10 + 4);
    if (*((_QWORD *)v10 + 3) - (_QWORD)v12 <= 0x19uLL)
    {
      v8 = "Tree doesn't have a root!\n";
      v9 = 26;
      goto LABEL_14;
    }
    qmemcpy(v12, "Tree doesn't have a root!\n", 26);
    v30 = *((_QWORD *)v10 + 4) + 26;
    goto LABEL_59;
  }
  v5 = *(llvm **)a1;
  v6 = *(_QWORD *)v5;
  if (*(_QWORD *)v5 != *(_QWORD *)(v1 + 328))
  {
    v10 = (llvm::raw_ostream *)llvm::errs(v5);
    v7 = (void *)*((_QWORD *)v10 + 4);
    if (*((_QWORD *)v10 + 3) - (_QWORD)v7 <= 0x2BuLL)
    {
      v8 = "Tree's root is not its parent's entry node!\n";
      v9 = 44;
LABEL_14:
      v10 = llvm::raw_ostream::write(v10, v8, v9);
LABEL_15:
      v13 = (llvm::raw_ostream *)llvm::errs(v10);
      v14 = (const char *)*((_QWORD *)v13 + 4);
      v15 = (const char *)*((_QWORD *)v13 + 2);
      if (v14 != v15)
      {
        *((_QWORD *)v13 + 4) = v15;
        llvm::raw_ostream::flush_tied_then_write(v13, v15, v14 - v15);
      }
      return 0;
    }
    qmemcpy(v7, "Tree's root is not its parent's entry node!\n", 44);
    v30 = *((_QWORD *)v10 + 4) + 44;
LABEL_59:
    *((_QWORD *)v10 + 4) = v30;
    goto LABEL_15;
  }
  v44 = v46;
  v46[0] = v6;
  v45 = 0x100000001;
  v18 = sub_1C61ED220((uint64_t *)v5, v2, (uint64_t)&v44);
  v16 = v18;
  if (!v18)
  {
    v19 = (llvm::raw_ostream *)llvm::errs((llvm *)v18);
    v20 = (void *)*((_QWORD *)v19 + 4);
    if (*((_QWORD *)v19 + 3) - (_QWORD)v20 > 0x34uLL)
    {
      qmemcpy(v20, "Tree has different roots than freshly computed ones!\n", 53);
      *((_QWORD *)v19 + 4) += 53;
    }
    else
    {
      v19 = llvm::raw_ostream::write(v19, "Tree has different roots than freshly computed ones!\n", 0x35uLL);
    }
    v21 = (llvm::raw_ostream *)llvm::errs(v19);
    v22 = *((_QWORD *)v21 + 4);
    if ((unint64_t)(*((_QWORD *)v21 + 3) - v22) > 0xB)
    {
      *(_DWORD *)(v22 + 8) = 540701556;
      *(_QWORD *)v22 = *(_QWORD *)"\tPDT roots: ";
      *((_QWORD *)v21 + 4) += 12;
    }
    else
    {
      v21 = llvm::raw_ostream::write(v21, "\tPDT roots: ", 0xCuLL);
    }
    v23 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v23)
    {
      v24 = *(llvm::MachineBasicBlock ***)a1;
      v25 = 8 * v23;
      do
      {
        v26 = *v24;
        v21 = (llvm::raw_ostream *)llvm::errs(v21);
        v27 = v21;
        if (v26)
        {
          v21 = llvm::MachineBasicBlock::printAsOperand(v26, v21);
        }
        else
        {
          v28 = (_DWORD *)*((_QWORD *)v21 + 4);
          if (*((_QWORD *)v21 + 3) - (_QWORD)v28 > 6uLL)
          {
            *(_DWORD *)((char *)v28 + 3) = 1920233580;
            *v28 = 1819047278;
            *((_QWORD *)v21 + 4) += 7;
          }
          else
          {
            v21 = llvm::raw_ostream::write(v21, "nullptr", 7uLL);
          }
        }
        v29 = (_WORD *)*((_QWORD *)v27 + 4);
        if (*((_QWORD *)v27 + 3) - (_QWORD)v29 > 1uLL)
        {
          *v29 = 8236;
          *((_QWORD *)v27 + 4) += 2;
        }
        else
        {
          v21 = llvm::raw_ostream::write(v27, ", ", 2uLL);
        }
        ++v24;
        v25 -= 8;
      }
      while (v25);
    }
    v31 = (llvm::raw_ostream *)llvm::errs(v21);
    v32 = *((_QWORD *)v31 + 4);
    if ((unint64_t)(*((_QWORD *)v31 + 3) - v32) > 0x11)
    {
      *(_WORD *)(v32 + 16) = 8250;
      *(_OWORD *)v32 = *(_OWORD *)"\n\tComputed roots: ";
      *((_QWORD *)v31 + 4) += 18;
    }
    else
    {
      v31 = llvm::raw_ostream::write(v31, "\n\tComputed roots: ", 0x12uLL);
    }
    if ((_DWORD)v45)
    {
      v33 = (llvm::MachineBasicBlock **)v44;
      v34 = 8 * v45;
      do
      {
        v35 = *v33;
        v31 = (llvm::raw_ostream *)llvm::errs(v31);
        v36 = v31;
        if (v35)
        {
          v31 = llvm::MachineBasicBlock::printAsOperand(v35, v31);
        }
        else
        {
          v37 = (_DWORD *)*((_QWORD *)v31 + 4);
          if (*((_QWORD *)v31 + 3) - (_QWORD)v37 > 6uLL)
          {
            *(_DWORD *)((char *)v37 + 3) = 1920233580;
            *v37 = 1819047278;
            *((_QWORD *)v31 + 4) += 7;
          }
          else
          {
            v31 = llvm::raw_ostream::write(v31, "nullptr", 7uLL);
          }
        }
        v38 = (_WORD *)*((_QWORD *)v36 + 4);
        if (*((_QWORD *)v36 + 3) - (_QWORD)v38 > 1uLL)
        {
          *v38 = 8236;
          *((_QWORD *)v36 + 4) += 2;
        }
        else
        {
          v31 = llvm::raw_ostream::write(v36, ", ", 2uLL);
        }
        ++v33;
        v34 -= 8;
      }
      while (v34);
    }
    v39 = (llvm::raw_ostream *)llvm::errs(v31);
    v40 = (_BYTE *)*((_QWORD *)v39 + 4);
    if (*((_BYTE **)v39 + 3) == v40)
    {
      v39 = llvm::raw_ostream::write(v39, "\n", 1uLL);
    }
    else
    {
      *v40 = 10;
      ++*((_QWORD *)v39 + 4);
    }
    v41 = (llvm::raw_ostream *)llvm::errs(v39);
    v42 = (const char *)*((_QWORD *)v41 + 4);
    v43 = (const char *)*((_QWORD *)v41 + 2);
    if (v42 != v43)
    {
      *((_QWORD *)v41 + 4) = v43;
      llvm::raw_ostream::flush_tied_then_write(v41, v43, v42 - v43);
    }
  }
  if (v44 != v46)
    free(v44);
  return v16;
}

uint64_t sub_1C51583C0(uint64_t a1, uint64_t a2)
{
  llvm *v4;
  uint64_t v5;
  uint64_t v6;
  llvm::MachineBasicBlock **v7;
  unsigned int v8;
  llvm::MachineBasicBlock **v9;
  uint64_t v10;
  llvm::MachineBasicBlock **v11;
  uint64_t v12;
  int v13;
  int v14;
  llvm::MachineBasicBlock *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  llvm::MachineBasicBlock **v19;
  llvm::MachineBasicBlock **v20;
  llvm::MachineBasicBlock **v21;
  unsigned int v22;
  llvm::MachineBasicBlock *v23;
  uint64_t v24;
  llvm::MachineBasicBlock **v25;
  llvm::MachineBasicBlock *v26;
  int v27;
  int v28;
  llvm::raw_ostream *v30;
  llvm::raw_ostream *v31;
  void *v32;
  _DWORD *v33;
  void *v34;
  const char *v35;
  llvm::raw_ostream *v36;
  size_t v37;
  llvm::raw_ostream *v38;
  llvm::raw_ostream *v39;
  uint64_t v40;
  void *v41;
  llvm::raw_ostream *v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v45 = 0;
  sub_1C4DE4490((_QWORD *)a1, (char *)&v45, (char *)&v46, 1uLL);
  sub_1C61ED094(a1 + 24);
  v4 = (llvm *)sub_1C50F1834(a1, **(_QWORD **)a2, 0, (unsigned int (*)(_QWORD *, _QWORD *))sub_1C50F0D30, 0, 0);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(unsigned int *)(a2 + 40);
  v7 = (llvm::MachineBasicBlock **)(v5 + 16 * v6);
  v8 = *(_DWORD *)(a2 + 40);
  v9 = v7;
  if (*(_DWORD *)(a2 + 32))
  {
    if ((_DWORD)v6)
    {
      v10 = 16 * v6;
      v9 = *(llvm::MachineBasicBlock ***)(a2 + 24);
      while (((unint64_t)*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v9 += 2;
        v10 -= 16;
        if (!v10)
        {
          v8 = *(_DWORD *)(a2 + 40);
          v9 = (llvm::MachineBasicBlock **)(v5 + 16 * v6);
          goto LABEL_9;
        }
      }
      v8 = *(_DWORD *)(a2 + 40);
    }
    else
    {
      v8 = 0;
      v9 = *(llvm::MachineBasicBlock ***)(a2 + 24);
    }
  }
LABEL_9:
  v11 = (llvm::MachineBasicBlock **)(v5 + 16 * v8);
  if (v9 != v11)
  {
    v12 = *(_QWORD *)(a1 + 24);
    v13 = *(_DWORD *)(a1 + 40);
    v14 = v13 - 1;
    while (1)
    {
      v15 = *(llvm::MachineBasicBlock **)v9[1];
      if (!v13)
        break;
      v16 = ((v15 >> 4) ^ (v15 >> 9)) & v14;
      v4 = *(llvm **)(v12 + 72 * v16);
      if (v15 != v4)
      {
        v17 = 1;
        while (v4 != (llvm *)-4096)
        {
          v18 = v16 + v17++;
          v16 = v18 & v14;
          v4 = *(llvm **)(v12 + 72 * v16);
          if (v15 == v4)
            goto LABEL_16;
        }
        break;
      }
LABEL_16:
      v19 = v9 + 2;
      v9 = (llvm::MachineBasicBlock **)(v5 + 16 * v6);
      if (v19 != v7)
      {
        v9 = v19;
        while (((unint64_t)*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v9 += 2;
          if (v9 == v7)
          {
            v9 = (llvm::MachineBasicBlock **)(v5 + 16 * v6);
            break;
          }
        }
      }
      if (v9 == v11)
        goto LABEL_22;
    }
    v30 = (llvm::raw_ostream *)llvm::errs(v4);
    v31 = v30;
    v32 = (void *)*((_QWORD *)v30 + 4);
    if (*((_QWORD *)v30 + 3) - (_QWORD)v32 > 0xCuLL)
    {
      qmemcpy(v32, "DomTree node ", 13);
      *((_QWORD *)v30 + 4) += 13;
      if (!v15)
      {
LABEL_37:
        v33 = (_DWORD *)*((_QWORD *)v31 + 4);
        if (*((_QWORD *)v31 + 3) - (_QWORD)v33 > 6uLL)
        {
          *(_DWORD *)((char *)v33 + 3) = 1920233580;
          *v33 = 1819047278;
          *((_QWORD *)v31 + 4) += 7;
        }
        else
        {
          v30 = llvm::raw_ostream::write(v31, "nullptr", 7uLL);
        }
LABEL_39:
        v34 = (void *)*((_QWORD *)v31 + 4);
        if (*((_QWORD *)v31 + 3) - (_QWORD)v34 <= 0x17uLL)
        {
          v35 = " not found by DFS walk!\n";
          v36 = v31;
          v37 = 24;
          goto LABEL_45;
        }
        qmemcpy(v34, " not found by DFS walk!\n", 24);
        *((_QWORD *)v31 + 4) += 24;
LABEL_46:
        v42 = (llvm::raw_ostream *)llvm::errs(v30);
        v43 = (const char *)*((_QWORD *)v42 + 4);
        v44 = (const char *)*((_QWORD *)v42 + 2);
        if (v43 != v44)
        {
          *((_QWORD *)v42 + 4) = v44;
          llvm::raw_ostream::flush_tied_then_write(v42, v44, v43 - v44);
        }
        return 0;
      }
    }
    else
    {
      v30 = llvm::raw_ostream::write(v30, "DomTree node ", 0xDuLL);
      if (!v15)
        goto LABEL_37;
    }
    v30 = llvm::MachineBasicBlock::printAsOperand(v15, v31);
    goto LABEL_39;
  }
LABEL_22:
  v20 = *(llvm::MachineBasicBlock ***)a1;
  v21 = *(llvm::MachineBasicBlock ***)(a1 + 8);
  if (*(llvm::MachineBasicBlock ***)a1 != v21)
  {
    v22 = v6 - 1;
    do
    {
      v23 = *v20;
      if (*v20)
      {
        if (!(_DWORD)v6)
          goto LABEL_41;
        LODWORD(v24) = ((v23 >> 4) ^ (v23 >> 9)) & v22;
        v25 = (llvm::MachineBasicBlock **)(v5 + 16 * v24);
        v26 = *v25;
        if (v23 != *v25)
        {
          v27 = 1;
          while (v26 != (llvm::MachineBasicBlock *)-4096)
          {
            v28 = v24 + v27++;
            v24 = v28 & v22;
            v26 = *(llvm::MachineBasicBlock **)(v5 + 16 * v24);
            if (v23 == v26)
            {
              v25 = (llvm::MachineBasicBlock **)(v5 + 16 * v24);
              goto LABEL_31;
            }
          }
LABEL_41:
          v38 = (llvm::raw_ostream *)llvm::errs(v4);
          v39 = v38;
          v40 = *((_QWORD *)v38 + 4);
          if ((unint64_t)(*((_QWORD *)v38 + 3) - v40) > 8)
          {
            *(_BYTE *)(v40 + 8) = 32;
            *(_QWORD *)v40 = *(_QWORD *)"CFG node ";
            *((_QWORD *)v38 + 4) += 9;
          }
          else
          {
            llvm::raw_ostream::write(v38, "CFG node ", 9uLL);
          }
          v30 = llvm::MachineBasicBlock::printAsOperand(v23, v39);
          v41 = (void *)*((_QWORD *)v39 + 4);
          if (*((_QWORD *)v39 + 3) - (_QWORD)v41 > 0x1AuLL)
          {
            qmemcpy(v41, " not found in the DomTree!\n", 27);
            *((_QWORD *)v39 + 4) += 27;
          }
          else
          {
            v35 = " not found in the DomTree!\n";
            v36 = v39;
            v37 = 27;
LABEL_45:
            v30 = llvm::raw_ostream::write(v36, v35, v37);
          }
          goto LABEL_46;
        }
LABEL_31:
        if (v25 == v7 || !v25[1])
          goto LABEL_41;
      }
      ++v20;
    }
    while (v20 != v21);
  }
  return 1;
}

uint64_t sub_1C51587C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  llvm::MachineBasicBlock *v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  llvm::raw_ostream *v21;
  void *v22;
  void *v23;
  llvm *v24;
  _WORD *v25;
  llvm::raw_ostream *v26;
  const char *v27;
  const char *v28;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(unsigned int *)(a1 + 40);
  v3 = (_QWORD *)(v1 + 16 * v2);
  if (*(_DWORD *)(a1 + 32))
  {
    if ((_DWORD)v2)
    {
      v4 = 16 * v2;
      v5 = *(_QWORD **)(a1 + 24);
      while ((*v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v5 += 2;
        v4 -= 16;
        if (!v4)
          goto LABEL_6;
      }
    }
    else
    {
      v5 = *(_QWORD **)(a1 + 24);
    }
  }
  else
  {
LABEL_6:
    v5 = (_QWORD *)(v1 + 16 * v2);
  }
  v6 = (_QWORD *)(v1 + 16 * v2);
  while (1)
  {
LABEL_9:
    if (v5 == v6)
      return 1;
    v7 = v5[1];
    v8 = *(llvm::MachineBasicBlock **)v7;
    if (!*(_QWORD *)v7)
      goto LABEL_15;
    v9 = *(_QWORD *)(v7 + 8);
    v10 = *(_DWORD *)(v7 + 16);
    if (!v9)
      break;
    if (v10 != *(_DWORD *)(v9 + 16) + 1)
    {
      v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
      v14 = v13;
      v15 = *((_QWORD *)v13 + 4);
      if ((unint64_t)(*((_QWORD *)v13 + 3) - v15) > 4)
      {
        *(_BYTE *)(v15 + 4) = 32;
        *(_DWORD *)v15 = 1701080910;
        *((_QWORD *)v13 + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write(v13, "Node ", 5uLL);
      }
      llvm::MachineBasicBlock::printAsOperand(v8, v14);
      v16 = *((_QWORD *)v14 + 4);
      if ((unint64_t)(*((_QWORD *)v14 + 3) - v16) > 0xA)
      {
        *(_DWORD *)(v16 + 7) = 543974774;
        *(_QWORD *)v16 = *(_QWORD *)" has level ";
        *((_QWORD *)v14 + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(v14, " has level ", 0xBuLL);
      }
      sub_1C5E21910(v14, *(unsigned int *)(v7 + 16), 0, 0, 0);
      v17 = (_OWORD *)*((_QWORD *)v14 + 4);
      if (*((_QWORD *)v14 + 3) - (_QWORD)v17 > 0xFuLL)
      {
        *v17 = *(_OWORD *)" while its IDom ";
        *((_QWORD *)v14 + 4) += 16;
      }
      else
      {
        llvm::raw_ostream::write(v14, " while its IDom ", 0x10uLL);
      }
      if (*(_QWORD *)v9)
      {
        llvm::MachineBasicBlock::printAsOperand(*(llvm::MachineBasicBlock **)v9, v14);
      }
      else
      {
        v18 = (_DWORD *)*((_QWORD *)v14 + 4);
        if (*((_QWORD *)v14 + 3) - (_QWORD)v18 > 6uLL)
        {
          *(_DWORD *)((char *)v18 + 3) = 1920233580;
          *v18 = 1819047278;
          *((_QWORD *)v14 + 4) += 7;
        }
        else
        {
          llvm::raw_ostream::write(v14, "nullptr", 7uLL);
        }
      }
      v19 = *((_QWORD *)v14 + 4);
      if ((unint64_t)(*((_QWORD *)v14 + 3) - v19) > 0xA)
      {
        *(_DWORD *)(v19 + 7) = 543974774;
        *(_QWORD *)v19 = *(_QWORD *)" has level ";
        *((_QWORD *)v14 + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(v14, " has level ", 0xBuLL);
      }
      v20 = *(unsigned int *)(v9 + 16);
      goto LABEL_38;
    }
LABEL_15:
    v11 = v5 + 2;
    v5 = v3;
    if (v11 != v3)
    {
      v5 = v11;
      while ((*v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v5 += 2;
        if (v5 == v3)
        {
          v5 = v3;
          goto LABEL_9;
        }
      }
    }
  }
  if (!v10)
    goto LABEL_15;
  v21 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v14 = v21;
  v22 = (void *)*((_QWORD *)v21 + 4);
  if (*((_QWORD *)v21 + 3) - (_QWORD)v22 > 0x14uLL)
  {
    qmemcpy(v22, "Node without an IDom ", 21);
    *((_QWORD *)v21 + 4) += 21;
  }
  else
  {
    llvm::raw_ostream::write(v21, "Node without an IDom ", 0x15uLL);
  }
  llvm::MachineBasicBlock::printAsOperand(v8, v14);
  v23 = (void *)*((_QWORD *)v14 + 4);
  if (*((_QWORD *)v14 + 3) - (_QWORD)v23 > 0x14uLL)
  {
    qmemcpy(v23, " has a nonzero level ", 21);
    *((_QWORD *)v14 + 4) += 21;
  }
  else
  {
    llvm::raw_ostream::write(v14, " has a nonzero level ", 0x15uLL);
  }
  v20 = *(unsigned int *)(v7 + 16);
LABEL_38:
  v24 = sub_1C5E21910(v14, v20, 0, 0, 0);
  v25 = (_WORD *)*((_QWORD *)v14 + 4);
  if (*((_QWORD *)v14 + 3) - (_QWORD)v25 > 1uLL)
  {
    *v25 = 2593;
    *((_QWORD *)v14 + 4) += 2;
  }
  else
  {
    v24 = llvm::raw_ostream::write(v14, "!\n", 2uLL);
  }
  v26 = (llvm::raw_ostream *)llvm::errs(v24);
  v27 = (const char *)*((_QWORD *)v26 + 4);
  v28 = (const char *)*((_QWORD *)v26 + 2);
  if (v27 != v28)
  {
    *((_QWORD *)v26 + 4) = v28;
    llvm::raw_ostream::flush_tied_then_write(v26, v28, v27 - v28);
  }
  return 0;
}

uint64_t sub_1C5158B94(uint64_t result)
{
  BOOL v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int **v24;
  int v25;
  unsigned int *v26;
  int v27;
  llvm::raw_ostream *v28;
  void *v29;
  unsigned int *v30;
  llvm *v31;
  llvm::raw_ostream *v32;
  _BYTE *v33;
  llvm::raw_ostream *v34;
  const char *v35;
  const char *v36;
  llvm::raw_ostream *v37;
  void *v38;
  _QWORD v39[3];
  void *v40;
  uint64_t v41;
  _QWORD v42[9];

  v42[8] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(result + 64))
    v1 = *(_QWORD *)(result + 56) == 0;
  else
    v1 = 1;
  if (v1)
    return 1;
  v2 = *(uint64_t **)(result + 24);
  v3 = *(unsigned int *)(result + 40);
  if ((_DWORD)v3)
  {
    v4 = **(_QWORD **)result;
    LODWORD(v5) = ((v4 >> 4) ^ (v4 >> 9)) & (v3 - 1);
    v6 = &v2[2 * v5];
    v7 = *v6;
    if (v4 == *v6)
    {
LABEL_11:
      v10 = &v2[2 * v3];
      goto LABEL_12;
    }
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v3 - 1);
      v7 = v2[2 * v5];
      if (v4 == v7)
      {
        v6 = &v2[2 * v5];
        goto LABEL_11;
      }
    }
  }
  v10 = &v2[2 * v3];
  v6 = v10;
LABEL_12:
  v11 = (unsigned int *)v6[1];
  if (v11[18])
  {
    v28 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
    v29 = (void *)*((_QWORD *)v28 + 4);
    if (*((_QWORD *)v28 + 3) - (_QWORD)v29 > 0x27uLL)
    {
      qmemcpy(v29, "DFSIn number for the tree root is not:\n\t", 40);
      *((_QWORD *)v28 + 4) += 40;
    }
    else
    {
      llvm::raw_ostream::write(v28, "DFSIn number for the tree root is not:\n\t", 0x28uLL);
    }
    v30 = v11;
LABEL_50:
    v31 = sub_1C61ED2E8(v30);
    v32 = (llvm::raw_ostream *)llvm::errs(v31);
    v33 = (_BYTE *)*((_QWORD *)v32 + 4);
    if ((unint64_t)v33 >= *((_QWORD *)v32 + 3))
    {
      v32 = llvm::raw_ostream::write(v32, 10);
    }
    else
    {
      *((_QWORD *)v32 + 4) = v33 + 1;
      *v33 = 10;
    }
    v34 = (llvm::raw_ostream *)llvm::errs(v32);
    v35 = (const char *)*((_QWORD *)v34 + 4);
    v36 = (const char *)*((_QWORD *)v34 + 2);
    if (v35 != v36)
    {
      *((_QWORD *)v34 + 4) = v36;
      llvm::raw_ostream::flush_tied_then_write(v34, v36, v35 - v36);
    }
    return 0;
  }
  if (!*(_DWORD *)(result + 32))
    return 1;
  if (v2 != v10)
  {
    while ((*v2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v2 += 2;
      if (v2 == v10)
        return 1;
    }
  }
  if (v2 == v10)
    return 1;
LABEL_19:
  v12 = v2[1];
  v13 = *(unsigned int *)(v12 + 32);
  if (!(_DWORD)v13)
  {
    if (*(_DWORD *)(v12 + 72) + 1 == *(_DWORD *)(v12 + 76))
      goto LABEL_37;
    v37 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
    v38 = (void *)*((_QWORD *)v37 + 4);
    if (*((_QWORD *)v37 + 3) - (_QWORD)v38 > 0x2AuLL)
    {
      qmemcpy(v38, "Tree leaf should have DFSOut = DFSIn + 1:\n\t", 43);
      *((_QWORD *)v37 + 4) += 43;
    }
    else
    {
      llvm::raw_ostream::write(v37, "Tree leaf should have DFSOut = DFSIn + 1:\n\t", 0x2BuLL);
    }
    v30 = (unsigned int *)v12;
    goto LABEL_50;
  }
  v14 = *(const void **)(v12 + 24);
  v40 = v42;
  v41 = 0x800000000;
  if (v13 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, (uint64_t)v42, v13, 8);
    v15 = v41;
    v16 = v40;
  }
  else
  {
    v15 = 0;
    v16 = v42;
  }
  memcpy(&v16[v15], v14, 8 * v13);
  v17 = (v41 + v13);
  v1 = (_DWORD)v41 + (_DWORD)v13 == 0;
  LODWORD(v41) = v17;
  v18 = (uint64_t *)((char *)v40 + 8 * v17);
  v19 = 126 - 2 * __clz(v17);
  if (v1)
    v20 = 0;
  else
    v20 = v19;
  sub_1C515A0BC((uint64_t *)v40, v18, v20, 1);
  v39[0] = v12;
  v39[1] = &v40;
  v21 = *(unsigned int **)v40;
  if (*(_DWORD *)(*(_QWORD *)v40 + 72) == *(_DWORD *)(v12 + 72) + 1)
  {
    v22 = (unsigned int *)*((_QWORD *)v40 + v41 - 1);
    if (v22[19] + 1 == *(_DWORD *)(v12 + 76))
    {
      v23 = v41 - 1;
      v24 = (unsigned int **)((char *)v40 + 8);
      while (v23)
      {
        v22 = v21;
        v25 = v21[19] + 1;
        v26 = *v24++;
        v21 = v26;
        --v23;
        if (v25 != v26[18])
          goto LABEL_43;
      }
      v27 = 1;
      goto LABEL_32;
    }
  }
  else
  {
    v22 = *(unsigned int **)v40;
  }
  v21 = 0;
LABEL_43:
  sub_1C61ED3B8((llvm *)v39, v22, v21);
  v27 = 0;
LABEL_32:
  if (v40 != v42)
    free(v40);
  if (v27)
  {
LABEL_37:
    while (1)
    {
      v2 += 2;
      if (v2 == v10)
        return 1;
      if ((*v2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        result = 1;
        if (v2 != v10)
          goto LABEL_19;
        return result;
      }
    }
  }
  return 0;
}

uint64_t sub_1C5158F48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  llvm::MachineBasicBlock *v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  llvm::MachineBasicBlock *v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  _QWORD *v33;
  llvm::MachineBasicBlock *v34;
  _QWORD *v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  _QWORD *v39;
  llvm::MachineBasicBlock *v40;
  unint64_t v41;
  llvm::MachineBasicBlock **v42;
  _QWORD *v43;
  llvm::MachineBasicBlock **v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  llvm::MachineBasicBlock **v53;
  llvm::MachineBasicBlock **v54;
  uint64_t *v55;
  uint64_t v56;
  unsigned int v57;
  _QWORD *v58;
  llvm::MachineBasicBlock *v59;
  _QWORD *v60;
  unint64_t v61;
  _DWORD *v62;
  unint64_t v63;
  llvm::MachineBasicBlock *v64;
  unsigned int v66;
  unsigned int v67;
  _QWORD *v68;
  _QWORD *v69;
  int v70;
  BOOL v71;
  unsigned int v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  llvm *v77;
  uint64_t v78;
  llvm::MachineBasicBlock ***v79;
  llvm::MachineBasicBlock ***v80;
  uint64_t v81;
  int v82;
  int v83;
  llvm::MachineBasicBlock **v84;
  llvm::MachineBasicBlock *v85;
  unsigned int v86;
  llvm::MachineBasicBlock *v87;
  int v88;
  unsigned int v89;
  llvm::raw_ostream *v91;
  llvm::raw_ostream *v92;
  uint64_t v93;
  _DWORD *v94;
  void *v95;
  llvm *v96;
  void *v97;
  llvm::raw_ostream *v98;
  const char *v99;
  const char *v100;
  uint64_t v101;
  _QWORD *v102;
  int v104;
  uint64_t *v105;
  llvm::MachineBasicBlock *v106;
  llvm::MachineBasicBlock *v107;
  uint64_t v108;
  void *v109;
  unsigned int v110;
  uint64_t v111;
  void *__src;
  uint64_t v113;
  _QWORD v114[66];

  v114[64] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(unsigned int *)(a2 + 40);
  v5 = (_QWORD *)(v3 + 16 * v4);
  if (*(_DWORD *)(a2 + 32))
  {
    if ((_DWORD)v4)
    {
      v6 = 16 * v4;
      v7 = *(_QWORD **)(a2 + 24);
      while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 2;
        v6 -= 16;
        if (!v6)
          goto LABEL_6;
      }
    }
    else
    {
      v7 = *(_QWORD **)(a2 + 24);
    }
  }
  else
  {
LABEL_6:
    v7 = (_QWORD *)(v3 + 16 * v4);
  }
  v8 = (_QWORD *)(v3 + 16 * v4);
  if (v7 == v8)
    return 1;
  v105 = (uint64_t *)(a1 + 24);
  while (1)
  {
    v9 = v7[1];
    v10 = *(llvm::MachineBasicBlock **)v9;
    if (!*(_QWORD *)v9 || !*(_DWORD *)(v9 + 32))
      goto LABEL_12;
    v101 = v7[1];
    v102 = v8;
    __src = 0;
    v12 = 1;
    sub_1C4DE4490((_QWORD *)a1, (char *)&__src, (char *)&v113, 1uLL);
    sub_1C61ED094((uint64_t)v105);
    v13 = **(_QWORD **)a2;
    v108 = v13;
    __src = v114;
    v114[0] = v13;
    v113 = 0x4000000001;
    v14 = *(_DWORD *)(a1 + 40);
    if (!v14)
      goto LABEL_34;
    v15 = *(_QWORD *)(a1 + 24);
    v16 = v14 - 1;
    v17 = (v14 - 1) & ((v13 >> 4) ^ (v13 >> 9));
    v18 = (_QWORD *)(v15 + 72 * v17);
    v19 = *v18;
    if (*v18 == v13)
    {
LABEL_32:
      *(_DWORD *)(v15 + 72 * v17 + 12) = 0;
LABEL_33:
      v12 = 1;
LABEL_34:
      v104 = 0;
      while (1)
      {
        v107 = 0;
        v28 = (llvm::MachineBasicBlock *)*((_QWORD *)__src + v12 - 1);
        LODWORD(v113) = v12 - 1;
        v107 = v28;
        v29 = *(_DWORD *)(a1 + 40);
        if (v29)
        {
          v30 = *(_QWORD *)(a1 + 24);
          v31 = v29 - 1;
          v32 = v31 & ((v28 >> 4) ^ (v28 >> 9));
          v33 = (_QWORD *)(v30 + 72 * v32);
          v34 = (llvm::MachineBasicBlock *)*v33;
          if (v28 == (llvm::MachineBasicBlock *)*v33)
            goto LABEL_50;
          v35 = 0;
          v36 = 1;
          while (v34 != (llvm::MachineBasicBlock *)-4096)
          {
            if (v35)
              v37 = 0;
            else
              v37 = v34 == (llvm::MachineBasicBlock *)-8192;
            if (v37)
              v35 = v33;
            v38 = v32 + v36++;
            v32 = v38 & v31;
            v33 = (_QWORD *)(v30 + 72 * v32);
            v34 = (llvm::MachineBasicBlock *)*v33;
            if (v28 == (llvm::MachineBasicBlock *)*v33)
              goto LABEL_50;
          }
          if (v35)
            v39 = v35;
          else
            v39 = v33;
        }
        else
        {
          v39 = 0;
        }
        v33 = sub_1C50F1F2C((uint64_t)v105, (uint64_t)&v107, (uint64_t *)&v107, v39);
        *v33 = v107;
        *(_OWORD *)(v33 + 5) = 0u;
        *(_OWORD *)(v33 + 1) = 0u;
        *(_OWORD *)(v33 + 3) = 0u;
        *(_OWORD *)(v33 + 7) = 0u;
        v33[5] = v33 + 7;
        *((_DWORD *)v33 + 13) = 2;
LABEL_50:
        if (!*((_DWORD *)v33 + 2))
        {
          *((_DWORD *)v33 + 4) = ++v104;
          *((_DWORD *)v33 + 2) = v104;
          v40 = v107;
          v33[3] = v107;
          v42 = *(llvm::MachineBasicBlock ***)(a1 + 8);
          v41 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)v42 >= v41)
          {
            v44 = *(llvm::MachineBasicBlock ***)a1;
            v45 = ((uint64_t)v42 - *(_QWORD *)a1) >> 3;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 61)
              abort();
            v47 = v41 - (_QWORD)v44;
            if (v47 >> 2 > v46)
              v46 = v47 >> 2;
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
              v48 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v48 = v46;
            if (v48)
            {
              if (v48 >> 61)
                sub_1C4764EE4();
              v49 = (char *)operator new(8 * v48);
            }
            else
            {
              v49 = 0;
            }
            v50 = &v49[8 * v45];
            *(_QWORD *)v50 = v40;
            v43 = v50 + 8;
            if (v42 != v44)
            {
              do
              {
                v51 = (uint64_t)*--v42;
                *((_QWORD *)v50 - 1) = v51;
                v50 -= 8;
              }
              while (v42 != v44);
              v42 = *(llvm::MachineBasicBlock ***)a1;
            }
            *(_QWORD *)a1 = v50;
            *(_QWORD *)(a1 + 8) = v43;
            *(_QWORD *)(a1 + 16) = &v49[8 * v48];
            if (v42)
              operator delete(v42);
          }
          else
          {
            *v42 = v40;
            v43 = v42 + 1;
          }
          *(_QWORD *)(a1 + 8) = v43;
          v52 = *(_QWORD *)(a1 + 48);
          if (v52)
            sub_1C50F2308(*(_QWORD *)(v52 + 8), (uint64_t)v107, (uint64_t)&v109);
          else
            sub_1C50F2538(v107, (uint64_t *)&v109);
          v53 = (llvm::MachineBasicBlock **)v109;
          v54 = (llvm::MachineBasicBlock **)((char *)v109 + 8 * v110);
          if (v110)
          {
            while (1)
            {
              v106 = 0;
              v106 = *v53;
              v55 = sub_1C50F1E18(v105, (uint64_t)v106);
              v56 = *(_QWORD *)(a1 + 24);
              v57 = *(_DWORD *)(a1 + 40);
              if ((uint64_t *)(v56 + 72 * v57) == v55 || (v58 = v55, !*((_DWORD *)v55 + 2)))
              {
                v64 = v106;
                if (v107 != v10 && v106 != v10)
                {
                  if (!v57)
                  {
                    v73 = 0;
                    goto LABEL_94;
                  }
                  v66 = v57 - 1;
                  v67 = ((v106 >> 4) ^ (v106 >> 9)) & v66;
                  v58 = (_QWORD *)(v56 + 72 * v67);
                  v68 = (_QWORD *)*v58;
                  if (v106 != (llvm::MachineBasicBlock *)*v58)
                  {
                    v69 = 0;
                    v70 = 1;
                    while (v68 != (_QWORD *)-4096)
                    {
                      if (v69)
                        v71 = 0;
                      else
                        v71 = v68 == (_QWORD *)-8192;
                      if (v71)
                        v69 = v58;
                      v72 = v67 + v70++;
                      v67 = v72 & v66;
                      v58 = (_QWORD *)(v56 + 72 * v67);
                      v68 = (_QWORD *)*v58;
                      if (v106 == (llvm::MachineBasicBlock *)*v58)
                        goto LABEL_95;
                    }
                    if (v69)
                      v73 = v69;
                    else
                      v73 = v58;
LABEL_94:
                    v58 = sub_1C50F1F2C((uint64_t)v105, (uint64_t)&v106, (uint64_t *)&v106, v73);
                    *v58 = v106;
                    *(_OWORD *)(v58 + 5) = 0u;
                    *(_OWORD *)(v58 + 1) = 0u;
                    *(_OWORD *)(v58 + 3) = 0u;
                    *(_OWORD *)(v58 + 7) = 0u;
                    v58[5] = v58 + 7;
                    *((_DWORD *)v58 + 13) = 2;
                    v64 = v106;
                  }
LABEL_95:
                  v74 = v113;
                  if (v113 >= (unint64_t)HIDWORD(v113))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v114, v113 + 1, 8);
                    v74 = v113;
                  }
                  *((_QWORD *)__src + v74) = v64;
                  v62 = v58 + 6;
                  v61 = *((unsigned int *)v58 + 12);
                  LODWORD(v113) = v113 + 1;
                  *((_DWORD *)v58 + 3) = v104;
                  v60 = v58 + 5;
                  v59 = v107;
                  v63 = *((unsigned int *)v58 + 13);
LABEL_98:
                  if (v61 >= v63)
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v60, (uint64_t)(v58 + 7), v61 + 1, 8);
                    v61 = *((unsigned int *)v58 + 12);
                  }
                  *(_QWORD *)(*v60 + 8 * v61) = v59;
                  ++*v62;
                }
              }
              else
              {
                v59 = v107;
                if (v106 != v107)
                {
                  v60 = v55 + 5;
                  v62 = v55 + 6;
                  v61 = *((unsigned int *)v55 + 12);
                  v63 = *((unsigned int *)v55 + 13);
                  goto LABEL_98;
                }
              }
              if (++v53 == v54)
              {
                v53 = (llvm::MachineBasicBlock **)v109;
                break;
              }
            }
          }
          if (v53 != (llvm::MachineBasicBlock **)&v111)
            free(v53);
        }
        v12 = v113;
        if (!(_DWORD)v113)
          goto LABEL_113;
      }
    }
    v20 = 1;
    v21 = *v18;
    v22 = v16 & ((v13 >> 4) ^ (v13 >> 9));
    do
    {
      if (v21 == -4096)
        goto LABEL_33;
      v23 = v22 + v20++;
      v22 = v23 & v16;
      v21 = *(_QWORD *)(v15 + 72 * v22);
    }
    while (v21 != v13);
    v24 = 0;
    v25 = 1;
    while (v19 != -4096)
    {
      if (v24)
        v26 = 0;
      else
        v26 = v19 == -8192;
      if (v26)
        v24 = v18;
      v27 = v17 + v25++;
      v17 = v27 & v16;
      v18 = (_QWORD *)(v15 + 72 * v17);
      v19 = *v18;
      if (*v18 == v13)
        goto LABEL_32;
    }
    if (v24)
      v75 = v24;
    else
      v75 = v18;
    v76 = sub_1C50F1F2C((uint64_t)v105, (uint64_t)&v108, &v108, v75);
    *v76 = v108;
    *(_OWORD *)(v76 + 5) = 0u;
    *(_OWORD *)(v76 + 3) = 0u;
    *(_OWORD *)(v76 + 1) = 0u;
    *(_OWORD *)(v76 + 7) = 0u;
    v76[5] = v76 + 7;
    *((_DWORD *)v76 + 13) = 2;
    v12 = v113;
    if ((_DWORD)v113)
      goto LABEL_34;
LABEL_113:
    v77 = (llvm *)__src;
    if (__src != v114)
      free(__src);
    v8 = v102;
    v78 = *(unsigned int *)(v101 + 32);
    if ((_DWORD)v78)
      break;
LABEL_12:
    v11 = v7 + 2;
    v7 = v5;
    if (v11 != v5)
    {
      v7 = v11;
      while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 2;
        if (v7 == v5)
        {
          v7 = v5;
          break;
        }
      }
    }
    if (v7 == v8)
      return 1;
  }
  v79 = *(llvm::MachineBasicBlock ****)(v101 + 24);
  v80 = &v79[v78];
  v81 = *(_QWORD *)(a1 + 24);
  v82 = *(_DWORD *)(a1 + 40);
  v83 = v82 - 1;
  while (!v82)
  {
LABEL_123:
    if (++v79 == v80)
      goto LABEL_12;
  }
  v84 = *v79;
  v85 = **v79;
  v86 = ((v85 >> 4) ^ (v85 >> 9)) & v83;
  v87 = *(llvm::MachineBasicBlock **)(v81 + 72 * v86);
  if (v85 != v87)
  {
    v88 = 1;
    while (v87 != (llvm::MachineBasicBlock *)-4096)
    {
      v89 = v86 + v88++;
      v86 = v89 & v83;
      v87 = *(llvm::MachineBasicBlock **)(v81 + 72 * v86);
      if (v85 == v87)
        goto LABEL_126;
    }
    goto LABEL_123;
  }
LABEL_126:
  v91 = (llvm::raw_ostream *)llvm::errs(v77);
  v92 = v91;
  v93 = *((_QWORD *)v91 + 4);
  if ((unint64_t)(*((_QWORD *)v91 + 3) - v93) > 5)
  {
    *(_WORD *)(v93 + 4) = 8292;
    *(_DWORD *)v93 = 1818847299;
    *((_QWORD *)v91 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v91, "Child ", 6uLL);
  }
  if (*v84)
  {
    llvm::MachineBasicBlock::printAsOperand(*v84, v92);
  }
  else
  {
    v94 = (_DWORD *)*((_QWORD *)v92 + 4);
    if (*((_QWORD *)v92 + 3) - (_QWORD)v94 > 6uLL)
    {
      *(_DWORD *)((char *)v94 + 3) = 1920233580;
      *v94 = 1819047278;
      *((_QWORD *)v92 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v92, "nullptr", 7uLL);
    }
  }
  v95 = (void *)*((_QWORD *)v92 + 4);
  if (*((_QWORD *)v92 + 3) - (_QWORD)v95 > 0x1BuLL)
  {
    qmemcpy(v95, " reachable after its parent ", 28);
    *((_QWORD *)v92 + 4) += 28;
  }
  else
  {
    llvm::raw_ostream::write(v92, " reachable after its parent ", 0x1CuLL);
  }
  v96 = llvm::MachineBasicBlock::printAsOperand(v10, v92);
  v97 = (void *)*((_QWORD *)v92 + 4);
  if (*((_QWORD *)v92 + 3) - (_QWORD)v97 > 0xCuLL)
  {
    qmemcpy(v97, " is removed!\n", 13);
    *((_QWORD *)v92 + 4) += 13;
  }
  else
  {
    v96 = llvm::raw_ostream::write(v92, " is removed!\n", 0xDuLL);
  }
  v98 = (llvm::raw_ostream *)llvm::errs(v96);
  v99 = (const char *)*((_QWORD *)v98 + 4);
  v100 = (const char *)*((_QWORD *)v98 + 2);
  if (v99 != v100)
  {
    *((_QWORD *)v98 + 4) = v100;
    llvm::raw_ostream::flush_tied_then_write(v98, v100, v99 - v100);
  }
  return 0;
}

uint64_t sub_1C51597C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  llvm::MachineBasicBlock ***v11;
  llvm::MachineBasicBlock **v12;
  unsigned int v13;
  llvm::MachineBasicBlock *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  llvm::MachineBasicBlock *v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  _QWORD *v35;
  llvm::MachineBasicBlock *v36;
  _QWORD *v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  _QWORD *v41;
  llvm::MachineBasicBlock *v42;
  unint64_t v43;
  llvm::MachineBasicBlock **v44;
  _QWORD *v45;
  llvm::MachineBasicBlock **v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  llvm::MachineBasicBlock **v55;
  llvm::MachineBasicBlock **v56;
  uint64_t *v57;
  uint64_t v58;
  unsigned int v59;
  _QWORD *v60;
  llvm::MachineBasicBlock *v61;
  _QWORD *v62;
  unint64_t v63;
  _DWORD *v64;
  unint64_t v65;
  llvm::MachineBasicBlock *v66;
  unsigned int v68;
  unsigned int v69;
  _QWORD *v70;
  _QWORD *v71;
  int v72;
  BOOL v73;
  unsigned int v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  llvm *v79;
  uint64_t v80;
  llvm::MachineBasicBlock ***v81;
  llvm::MachineBasicBlock ***v82;
  llvm::MachineBasicBlock **v83;
  int v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  llvm::MachineBasicBlock *v88;
  int v89;
  unsigned int v90;
  _QWORD *v91;
  llvm::raw_ostream *v93;
  llvm::raw_ostream *v94;
  uint64_t v95;
  _DWORD *v96;
  void *v97;
  llvm::MachineBasicBlock *v98;
  _DWORD *v99;
  void *v100;
  llvm::raw_ostream *v101;
  const char *v102;
  const char *v103;
  _QWORD *v104;
  _QWORD *v105;
  llvm::MachineBasicBlock ***v106;
  _QWORD *v107;
  llvm::MachineBasicBlock ***v108;
  uint64_t v109;
  llvm::MachineBasicBlock **v111;
  int v112;
  llvm::MachineBasicBlock *v113;
  llvm::MachineBasicBlock *v114;
  uint64_t v115;
  void *v116;
  unsigned int v117;
  uint64_t v118;
  void *__src;
  uint64_t v120;
  _QWORD v121[66];

  v121[64] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(unsigned int *)(a2 + 40);
  v5 = (_QWORD *)(v3 + 16 * v4);
  if (*(_DWORD *)(a2 + 32))
  {
    if ((_DWORD)v4)
    {
      v6 = 16 * v4;
      v7 = *(_QWORD **)(a2 + 24);
      while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 2;
        v6 -= 16;
        if (!v6)
          goto LABEL_6;
      }
    }
    else
    {
      v7 = *(_QWORD **)(a2 + 24);
    }
  }
  else
  {
LABEL_6:
    v7 = (_QWORD *)(v3 + 16 * v4);
  }
  v8 = (_QWORD *)(v3 + 16 * v4);
  if (v7 == v8)
    return 1;
  v104 = v8;
  v105 = v5;
  while (1)
  {
    v9 = v7[1];
    if (*(_QWORD *)v9)
    {
      v10 = *(unsigned int *)(v9 + 32);
      if ((_DWORD)v10)
        break;
    }
LABEL_119:
    v91 = v7 + 2;
    v7 = v5;
    if (v91 != v5)
    {
      v7 = v91;
      while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 2;
        if (v7 == v5)
        {
          v7 = v5;
          break;
        }
      }
    }
    if (v7 == v8)
      return 1;
  }
  v11 = *(llvm::MachineBasicBlock ****)(v9 + 24);
  v106 = &v11[v10];
  v107 = v7;
  v109 = v7[1];
  while (1)
  {
    v108 = v11;
    v12 = *v11;
    __src = 0;
    v13 = 1;
    sub_1C4DE4490((_QWORD *)a1, (char *)&__src, (char *)&v120, 1uLL);
    sub_1C61ED094(a1 + 24);
    v111 = v12;
    v14 = *v12;
    v15 = **(_QWORD **)a2;
    v115 = v15;
    __src = v121;
    v121[0] = v15;
    v120 = 0x4000000001;
    v16 = *(_DWORD *)(a1 + 40);
    if (!v16)
      goto LABEL_28;
    v17 = *(_QWORD *)(a1 + 24);
    v18 = v16 - 1;
    v19 = (v16 - 1) & ((v15 >> 4) ^ (v15 >> 9));
    v20 = (_QWORD *)(v17 + 72 * v19);
    v21 = *v20;
    if (*v20 == v15)
    {
LABEL_26:
      *(_DWORD *)(v17 + 72 * v19 + 12) = 0;
LABEL_27:
      v13 = 1;
LABEL_28:
      v112 = 0;
      while (1)
      {
        v114 = 0;
        v30 = (llvm::MachineBasicBlock *)*((_QWORD *)__src + v13 - 1);
        LODWORD(v120) = v13 - 1;
        v114 = v30;
        v31 = *(_DWORD *)(a1 + 40);
        if (v31)
        {
          v32 = *(_QWORD *)(a1 + 24);
          v33 = v31 - 1;
          v34 = v33 & ((v30 >> 4) ^ (v30 >> 9));
          v35 = (_QWORD *)(v32 + 72 * v34);
          v36 = (llvm::MachineBasicBlock *)*v35;
          if (v30 == (llvm::MachineBasicBlock *)*v35)
            goto LABEL_44;
          v37 = 0;
          v38 = 1;
          while (v36 != (llvm::MachineBasicBlock *)-4096)
          {
            if (v37)
              v39 = 0;
            else
              v39 = v36 == (llvm::MachineBasicBlock *)-8192;
            if (v39)
              v37 = v35;
            v40 = v34 + v38++;
            v34 = v40 & v33;
            v35 = (_QWORD *)(v32 + 72 * v34);
            v36 = (llvm::MachineBasicBlock *)*v35;
            if (v30 == (llvm::MachineBasicBlock *)*v35)
              goto LABEL_44;
          }
          if (v37)
            v41 = v37;
          else
            v41 = v35;
        }
        else
        {
          v41 = 0;
        }
        v35 = sub_1C50F1F2C(a1 + 24, (uint64_t)&v114, (uint64_t *)&v114, v41);
        *v35 = v114;
        *(_OWORD *)(v35 + 5) = 0u;
        *(_OWORD *)(v35 + 1) = 0u;
        *(_OWORD *)(v35 + 3) = 0u;
        *(_OWORD *)(v35 + 7) = 0u;
        v35[5] = v35 + 7;
        *((_DWORD *)v35 + 13) = 2;
LABEL_44:
        if (!*((_DWORD *)v35 + 2))
        {
          *((_DWORD *)v35 + 4) = ++v112;
          *((_DWORD *)v35 + 2) = v112;
          v42 = v114;
          v35[3] = v114;
          v44 = *(llvm::MachineBasicBlock ***)(a1 + 8);
          v43 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)v44 >= v43)
          {
            v46 = *(llvm::MachineBasicBlock ***)a1;
            v47 = ((uint64_t)v44 - *(_QWORD *)a1) >> 3;
            v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 61)
              abort();
            v49 = v43 - (_QWORD)v46;
            if (v49 >> 2 > v48)
              v48 = v49 >> 2;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
              v50 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v50 = v48;
            if (v50)
            {
              if (v50 >> 61)
                sub_1C4764EE4();
              v51 = (char *)operator new(8 * v50);
            }
            else
            {
              v51 = 0;
            }
            v52 = &v51[8 * v47];
            *(_QWORD *)v52 = v42;
            v45 = v52 + 8;
            if (v44 != v46)
            {
              do
              {
                v53 = (uint64_t)*--v44;
                *((_QWORD *)v52 - 1) = v53;
                v52 -= 8;
              }
              while (v44 != v46);
              v44 = *(llvm::MachineBasicBlock ***)a1;
            }
            *(_QWORD *)a1 = v52;
            *(_QWORD *)(a1 + 8) = v45;
            *(_QWORD *)(a1 + 16) = &v51[8 * v50];
            if (v44)
              operator delete(v44);
          }
          else
          {
            *v44 = v42;
            v45 = v44 + 1;
          }
          *(_QWORD *)(a1 + 8) = v45;
          v54 = *(_QWORD *)(a1 + 48);
          if (v54)
            sub_1C50F2308(*(_QWORD *)(v54 + 8), (uint64_t)v114, (uint64_t)&v116);
          else
            sub_1C50F2538(v114, (uint64_t *)&v116);
          v55 = (llvm::MachineBasicBlock **)v116;
          v56 = (llvm::MachineBasicBlock **)((char *)v116 + 8 * v117);
          if (v117)
          {
            while (1)
            {
              v113 = 0;
              v113 = *v55;
              v57 = sub_1C50F1E18((uint64_t *)(a1 + 24), (uint64_t)v113);
              v58 = *(_QWORD *)(a1 + 24);
              v59 = *(_DWORD *)(a1 + 40);
              if ((uint64_t *)(v58 + 72 * v59) == v57 || (v60 = v57, !*((_DWORD *)v57 + 2)))
              {
                v66 = v113;
                if (v114 != v14 && v113 != v14)
                {
                  if (!v59)
                  {
                    v75 = 0;
                    goto LABEL_88;
                  }
                  v68 = v59 - 1;
                  v69 = ((v113 >> 4) ^ (v113 >> 9)) & v68;
                  v60 = (_QWORD *)(v58 + 72 * v69);
                  v70 = (_QWORD *)*v60;
                  if (v113 != (llvm::MachineBasicBlock *)*v60)
                  {
                    v71 = 0;
                    v72 = 1;
                    while (v70 != (_QWORD *)-4096)
                    {
                      if (v71)
                        v73 = 0;
                      else
                        v73 = v70 == (_QWORD *)-8192;
                      if (v73)
                        v71 = v60;
                      v74 = v69 + v72++;
                      v69 = v74 & v68;
                      v60 = (_QWORD *)(v58 + 72 * v69);
                      v70 = (_QWORD *)*v60;
                      if (v113 == (llvm::MachineBasicBlock *)*v60)
                        goto LABEL_89;
                    }
                    if (v71)
                      v75 = v71;
                    else
                      v75 = v60;
LABEL_88:
                    v60 = sub_1C50F1F2C(a1 + 24, (uint64_t)&v113, (uint64_t *)&v113, v75);
                    *v60 = v113;
                    *(_OWORD *)(v60 + 5) = 0u;
                    *(_OWORD *)(v60 + 1) = 0u;
                    *(_OWORD *)(v60 + 3) = 0u;
                    *(_OWORD *)(v60 + 7) = 0u;
                    v60[5] = v60 + 7;
                    *((_DWORD *)v60 + 13) = 2;
                    v66 = v113;
                  }
LABEL_89:
                  v76 = v120;
                  if (v120 >= (unint64_t)HIDWORD(v120))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v121, v120 + 1, 8);
                    v76 = v120;
                  }
                  *((_QWORD *)__src + v76) = v66;
                  v64 = v60 + 6;
                  v63 = *((unsigned int *)v60 + 12);
                  LODWORD(v120) = v120 + 1;
                  *((_DWORD *)v60 + 3) = v112;
                  v62 = v60 + 5;
                  v61 = v114;
                  v65 = *((unsigned int *)v60 + 13);
LABEL_92:
                  if (v63 >= v65)
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v62, (uint64_t)(v60 + 7), v63 + 1, 8);
                    v63 = *((unsigned int *)v60 + 12);
                  }
                  *(_QWORD *)(*v62 + 8 * v63) = v61;
                  ++*v64;
                }
              }
              else
              {
                v61 = v114;
                if (v113 != v114)
                {
                  v62 = v57 + 5;
                  v64 = v57 + 6;
                  v63 = *((unsigned int *)v57 + 12);
                  v65 = *((unsigned int *)v57 + 13);
                  goto LABEL_92;
                }
              }
              if (++v55 == v56)
              {
                v55 = (llvm::MachineBasicBlock **)v116;
                break;
              }
            }
          }
          if (v55 != (llvm::MachineBasicBlock **)&v118)
            free(v55);
        }
        v13 = v120;
        if (!(_DWORD)v120)
          goto LABEL_107;
      }
    }
    v22 = 1;
    v23 = *v20;
    v24 = v18 & ((v15 >> 4) ^ (v15 >> 9));
    do
    {
      if (v23 == -4096)
        goto LABEL_27;
      v25 = v24 + v22++;
      v24 = v25 & v18;
      v23 = *(_QWORD *)(v17 + 72 * v24);
    }
    while (v23 != v15);
    v26 = 0;
    v27 = 1;
    while (v21 != -4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v21 == -8192;
      if (v28)
        v26 = v20;
      v29 = v19 + v27++;
      v19 = v29 & v18;
      v20 = (_QWORD *)(v17 + 72 * v19);
      v21 = *v20;
      if (*v20 == v15)
        goto LABEL_26;
    }
    if (v26)
      v77 = v26;
    else
      v77 = v20;
    v78 = sub_1C50F1F2C(a1 + 24, (uint64_t)&v115, &v115, v77);
    *v78 = v115;
    *(_OWORD *)(v78 + 5) = 0u;
    *(_OWORD *)(v78 + 3) = 0u;
    *(_OWORD *)(v78 + 1) = 0u;
    *(_OWORD *)(v78 + 7) = 0u;
    v78[5] = v78 + 7;
    *((_DWORD *)v78 + 13) = 2;
    v13 = v120;
    if ((_DWORD)v120)
      goto LABEL_28;
LABEL_107:
    v79 = (llvm *)__src;
    if (__src != v121)
      free(__src);
    v80 = *(unsigned int *)(v109 + 32);
    if ((_DWORD)v80)
      break;
LABEL_118:
    v7 = v107;
    v11 = v108 + 1;
    v5 = v105;
    v8 = v104;
    if (v108 + 1 == v106)
      goto LABEL_119;
  }
  v81 = *(llvm::MachineBasicBlock ****)(v109 + 24);
  v82 = &v81[v80];
  while (1)
  {
    v83 = *v81;
    if (*v81 != v111)
    {
      v84 = *(_DWORD *)(a1 + 40);
      if (!v84)
        goto LABEL_126;
      v85 = *(_QWORD *)(a1 + 24);
      v86 = v84 - 1;
      v87 = ((*v83 >> 4) ^ (*v83 >> 9)) & v86;
      v88 = *(llvm::MachineBasicBlock **)(v85 + 72 * v87);
      if (*v83 != v88)
        break;
    }
LABEL_117:
    if (++v81 == v82)
      goto LABEL_118;
  }
  v89 = 1;
  while (v88 != (llvm::MachineBasicBlock *)-4096)
  {
    v90 = v87 + v89++;
    v87 = v90 & v86;
    v88 = *(llvm::MachineBasicBlock **)(v85 + 72 * v87);
    if (*v83 == v88)
      goto LABEL_117;
  }
LABEL_126:
  v93 = (llvm::raw_ostream *)llvm::errs(v79);
  v94 = v93;
  v95 = *((_QWORD *)v93 + 4);
  if ((unint64_t)(*((_QWORD *)v93 + 3) - v95) > 4)
  {
    *(_BYTE *)(v95 + 4) = 32;
    *(_DWORD *)v95 = 1701080910;
    *((_QWORD *)v93 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v93, "Node ", 5uLL);
  }
  if (*v83)
  {
    llvm::MachineBasicBlock::printAsOperand(*v83, v94);
  }
  else
  {
    v96 = (_DWORD *)*((_QWORD *)v94 + 4);
    if (*((_QWORD *)v94 + 3) - (_QWORD)v96 > 6uLL)
    {
      *(_DWORD *)((char *)v96 + 3) = 1920233580;
      *v96 = 1819047278;
      *((_QWORD *)v94 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v94, "nullptr", 7uLL);
    }
  }
  v97 = (void *)*((_QWORD *)v94 + 4);
  if (*((_QWORD *)v94 + 3) - (_QWORD)v97 > 0x1FuLL)
  {
    qmemcpy(v97, " not reachable when its sibling ", 32);
    *((_QWORD *)v94 + 4) += 32;
  }
  else
  {
    llvm::raw_ostream::write(v94, " not reachable when its sibling ", 0x20uLL);
  }
  v98 = *v111;
  if (*v111)
  {
    v98 = llvm::MachineBasicBlock::printAsOperand(v98, v94);
  }
  else
  {
    v99 = (_DWORD *)*((_QWORD *)v94 + 4);
    if (*((_QWORD *)v94 + 3) - (_QWORD)v99 > 6uLL)
    {
      *(_DWORD *)((char *)v99 + 3) = 1920233580;
      *v99 = 1819047278;
      *((_QWORD *)v94 + 4) += 7;
    }
    else
    {
      v98 = llvm::raw_ostream::write(v94, "nullptr", 7uLL);
    }
  }
  v100 = (void *)*((_QWORD *)v94 + 4);
  if (*((_QWORD *)v94 + 3) - (_QWORD)v100 > 0xCuLL)
  {
    qmemcpy(v100, " is removed!\n", 13);
    *((_QWORD *)v94 + 4) += 13;
  }
  else
  {
    v98 = llvm::raw_ostream::write(v94, " is removed!\n", 0xDuLL);
  }
  v101 = (llvm::raw_ostream *)llvm::errs(v98);
  v102 = (const char *)*((_QWORD *)v101 + 4);
  v103 = (const char *)*((_QWORD *)v101 + 2);
  if (v102 != v103)
  {
    *((_QWORD *)v101 + 4) = v103;
    llvm::raw_ostream::flush_tied_then_write(v101, v103, v102 - v103);
  }
  return 0;
}

uint64_t *sub_1C515A0BC(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  BOOL v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t *v77;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v38 = *(a2 - 1);
        v39 = *v8;
        if (*(_DWORD *)(v38 + 72) < *(_DWORD *)(*v8 + 72))
        {
          *v8 = v38;
          *(a2 - 1) = v39;
        }
        return result;
      case 3:
        return sub_1C515A754(v8, v8 + 1, a2 - 1);
      case 4:
        return sub_1C515A94C(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        return sub_1C515A9E0(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 <= 191)
        {
          v40 = v8 + 1;
          v42 = v8 == a2 || v40 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v42)
            {
              v43 = 8;
              v44 = v8;
              do
              {
                v46 = *v44;
                v45 = v44[1];
                v44 = v40;
                v47 = *(_DWORD *)(v45 + 72);
                if (v47 < *(_DWORD *)(v46 + 72))
                {
                  v48 = v43;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v48) = v46;
                    v49 = v48 - 8;
                    if (v48 == 8)
                      break;
                    v46 = *(uint64_t *)((char *)v8 + v48 - 16);
                    v48 -= 8;
                    if (v47 >= *(_DWORD *)(v46 + 72))
                    {
                      v50 = (uint64_t *)((char *)v8 + v49);
                      goto LABEL_76;
                    }
                  }
                  v50 = v8;
LABEL_76:
                  *v50 = v45;
                }
                v40 = v44 + 1;
                v43 += 8;
              }
              while (v44 + 1 != a2);
            }
          }
          else if (!v42)
          {
            do
            {
              v80 = *v7;
              v79 = v7[1];
              v7 = v40;
              v81 = *(_DWORD *)(v79 + 72);
              if (v81 < *(_DWORD *)(v80 + 72))
              {
                do
                {
                  *v40 = v80;
                  v80 = *(v40 - 2);
                  --v40;
                }
                while (v81 < *(_DWORD *)(v80 + 72));
                *v40 = v79;
              }
              v40 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            do
            {
              v53 = v52;
              if (v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = &v8[v54];
                v56 = *v55;
                if (2 * v53 + 2 < v10 && *(_DWORD *)(v56 + 72) < *(_DWORD *)(v55[1] + 72))
                {
                  v56 = v55[1];
                  ++v55;
                  v54 = 2 * v53 + 2;
                }
                result = &v8[v53];
                v57 = *result;
                v58 = *(_DWORD *)(*result + 72);
                if (*(_DWORD *)(v56 + 72) >= v58)
                {
                  do
                  {
                    v59 = v55;
                    *result = v56;
                    if (v51 < v54)
                      break;
                    v60 = (2 * v54) | 1;
                    v55 = &v8[v60];
                    v61 = 2 * v54 + 2;
                    v56 = *v55;
                    if (v61 < v10 && *(_DWORD *)(v56 + 72) < *(_DWORD *)(v55[1] + 72))
                    {
                      v56 = v55[1];
                      ++v55;
                      v60 = v61;
                    }
                    result = v59;
                    v54 = v60;
                  }
                  while (*(_DWORD *)(v56 + 72) >= v58);
                  *v59 = v57;
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            do
            {
              v62 = 0;
              v63 = *v8;
              v64 = v8;
              do
              {
                v65 = &v64[v62];
                v68 = v65[1];
                v66 = v65 + 1;
                v67 = v68;
                v69 = (2 * v62) | 1;
                v70 = 2 * v62 + 2;
                if (v70 < v10)
                {
                  result = (uint64_t *)*(unsigned int *)(v67 + 72);
                  if (result < *(_DWORD *)(v66[1] + 72))
                  {
                    v67 = v66[1];
                    ++v66;
                    v69 = v70;
                  }
                }
                *v64 = v67;
                v64 = v66;
                v62 = v69;
              }
              while (v69 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v66 == --a2)
              {
                *v66 = v63;
              }
              else
              {
                *v66 = *a2;
                *a2 = v63;
                v71 = (char *)v66 - (char *)v8 + 8;
                if (v71 >= 9)
                {
                  v72 = (((unint64_t)v71 >> 3) - 2) >> 1;
                  v73 = &v8[v72];
                  v74 = *v73;
                  v75 = *v66;
                  v76 = *(_DWORD *)(*v66 + 72);
                  if (*(_DWORD *)(*v73 + 72) < v76)
                  {
                    do
                    {
                      v77 = v73;
                      *v66 = v74;
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = &v8[v72];
                      v74 = *v73;
                      v66 = v77;
                    }
                    while (*(_DWORD *)(*v73 + 72) < v76);
                    *v77 = v75;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1C515A754(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C515A754(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C515A754(v7 + 1, v12 - 1, a2 - 2);
          sub_1C515A754(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_1C515A754(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_DWORD *)(v14 + 72);
          if (*(_DWORD *)(*(v7 - 1) + 72) < v15)
            goto LABEL_12;
          if (v15 >= *(_DWORD *)(*(a2 - 1) + 72))
          {
            v30 = v7 + 1;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 >= *(_DWORD *)(*v8 + 72));
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = v8[1];
              ++v8;
            }
            while (v15 >= *(_DWORD *)(v29 + 72));
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 < *(_DWORD *)(v32 + 72));
          }
          if (v8 < v31)
          {
            v33 = *v8;
            v34 = *v31;
            do
            {
              *v8 = v34;
              *v31 = v33;
              do
              {
                v35 = v8[1];
                ++v8;
                v33 = v35;
              }
              while (v15 >= *(_DWORD *)(v35 + 72));
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while (v15 < *(_DWORD *)(v36 + 72));
            }
            while (v8 < v31);
          }
          v37 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v37;
          a4 = 0;
          *v37 = v14;
          continue;
        }
        v15 = *(_DWORD *)(v14 + 72);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_DWORD *)(v17 + 72) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_DWORD *)(v21 + 72) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_DWORD *)(v20 + 72) >= v15);
        }
        if (v18 >= v19)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            do
            {
              v25 = v23[1];
              ++v23;
              v17 = v25;
            }
            while (*(_DWORD *)(v25 + 72) < v15);
            do
            {
              v26 = *--v24;
              v22 = v26;
            }
            while (*(_DWORD *)(v26 + 72) >= v15);
          }
          while (v23 < v24);
          v27 = v23 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = (uint64_t *)sub_1C515A0BC(v7, v27, a3, a4 & 1);
          a4 = 0;
          v8 = v27 + 1;
          continue;
        }
        v28 = sub_1C515A7DC(v7, v27);
        v8 = v27 + 1;
        result = (uint64_t *)sub_1C515A7DC(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C515A754(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(_DWORD *)(*a2 + 72);
  v6 = *(_DWORD *)(*result + 72);
  v7 = *a3;
  v8 = *(_DWORD *)(*a3 + 72);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(_DWORD *)(*a2 + 72) < *(_DWORD *)(*result + 72))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*a3 + 72) >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1C515A7DC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_DWORD *)(v6 + 72) < *(_DWORD *)(*a1 + 72))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C515A754(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C515A94C(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1C515A9E0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C515A754(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_DWORD *)(*v9 + 72);
    if (v14 < *(_DWORD *)(*v8 + 72))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)(v13 + 72))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *sub_1C515A94C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1C515A754(a1, a2, a3);
  v9 = *a3;
  if (*(_DWORD *)(*a4 + 72) < *(_DWORD *)(*a3 + 72))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(_DWORD *)(*a3 + 72) < *(_DWORD *)(*a2 + 72))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(_DWORD *)(*a2 + 72) < *(_DWORD *)(*a1 + 72))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t *sub_1C515A9E0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_1C515A94C(a1, a2, a3, a4);
  v11 = *a4;
  if (*(_DWORD *)(*a5 + 72) < *(_DWORD *)(*a4 + 72))
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*(_DWORD *)(*a4 + 72) < *(_DWORD *)(*a3 + 72))
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*(_DWORD *)(*a3 + 72) < *(_DWORD *)(*a2 + 72))
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*(_DWORD *)(*a2 + 72) < *(_DWORD *)(*a1 + 72))
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C515AAA0()
{
  __n128 v1;
  int v2;
  char *v3;

  v3 = &llvm::VerifyMachineDomInfo;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Verify machine dominator info (time consuming)";
  v1.n128_u64[1] = 46;
  sub_1C61ECF78(&v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4EB22A8, &qword_1ED7FA7B0, &dword_1C475E000);
}

uint64_t llvm::MachineFrameInfo::ensureMaxAlignment(uint64_t result, unsigned __int8 a2)
{
  if (*(unsigned __int8 *)(result + 60) < a2)
    *(_BYTE *)(result + 60) = a2;
  return result;
}

uint64_t llvm::MachineFrameInfo::CreateStackObject(unsigned __int8 *a1, uint64_t a2, unsigned __int8 a3, unsigned __int8 a4, uint64_t a5, int a6)
{
  unsigned __int8 v12;
  char v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;

  if (a3 > *a1 && a1[1] == 0)
    v12 = *a1;
  else
    v12 = a3;
  v13 = a4 ^ 1;
  v15 = (_QWORD *)*((_QWORD *)a1 + 2);
  v14 = *((_QWORD *)a1 + 3);
  if ((unint64_t)v15 >= v14)
  {
    v20 = (_QWORD *)*((_QWORD *)a1 + 1);
    v21 = 0xCCCCCCCCCCCCCCCDLL * (v15 - v20);
    v22 = v21 + 1;
    if (v21 + 1 > 0x666666666666666)
      abort();
    v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - (_QWORD)v20) >> 3);
    if (2 * v23 > v22)
      v22 = 2 * v23;
    if (v23 >= 0x333333333333333)
      v24 = 0x666666666666666;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 > 0x666666666666666)
        sub_1C4764EE4();
      v25 = (char *)operator new(40 * v24);
      v21 = 0xCCCCCCCCCCCCCCCDLL * (v15 - v20);
    }
    else
    {
      v25 = 0;
    }
    v26 = &v25[40 * v21];
    *(_QWORD *)v26 = 0;
    *((_QWORD *)v26 + 1) = a2;
    v26[16] = v12;
    v26[17] = 0;
    v26[18] = a4;
    v26[19] = 0;
    v26[20] = a6;
    *((_QWORD *)v26 + 3) = a5;
    v26[32] = 0;
    v26[33] = v13;
    *((_WORD *)v26 + 17) = 0;
    v26[36] = 0;
    v16 = v26 + 40;
    if (v15 != v20)
    {
      do
      {
        v27 = *(_OWORD *)(v15 - 5);
        v28 = *(_OWORD *)(v15 - 3);
        *(_QWORD *)(v26 - 11) = *(_QWORD *)((char *)v15 - 11);
        *(_OWORD *)(v26 - 24) = v28;
        *(_OWORD *)(v26 - 40) = v27;
        v26 -= 40;
        v15 -= 5;
      }
      while (v15 != v20);
      v15 = (_QWORD *)*((_QWORD *)a1 + 1);
    }
    *((_QWORD *)a1 + 1) = v26;
    *((_QWORD *)a1 + 2) = v16;
    *((_QWORD *)a1 + 3) = &v25[40 * v24];
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v15 = 0;
    v15[1] = a2;
    *((_BYTE *)v15 + 16) = v12;
    *((_BYTE *)v15 + 17) = 0;
    *((_WORD *)v15 + 9) = a4;
    *((_BYTE *)v15 + 20) = a6;
    v15[3] = a5;
    *((_BYTE *)v15 + 32) = 0;
    *((_BYTE *)v15 + 33) = v13;
    *((_WORD *)v15 + 17) = 0;
    v16 = v15 + 5;
    *((_BYTE *)v15 + 36) = 0;
  }
  *((_QWORD *)a1 + 2) = v16;
  v17 = *((_QWORD *)a1 + 1);
  v18 = *((_DWORD *)a1 + 8);
  if (!a6 && a1[60] < v12)
    a1[60] = v12;
  return ~v18 - 858993459 * (((unint64_t)v16 - v17) >> 3);
}

uint64_t llvm::MachineFrameInfo::CreateSpillStackObject(unsigned __int8 *a1, uint64_t a2, unsigned __int8 a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (a3 > *a1 && a1[1] == 0)
    v5 = *a1;
  else
    v5 = a3;
  llvm::MachineFrameInfo::CreateStackObject(a1, a2, v5, 1u, 0, 0);
  v7 = *((_QWORD *)a1 + 1);
  v6 = *((_QWORD *)a1 + 2);
  v8 = *((_DWORD *)a1 + 8);
  if (a1[60] < v5)
    a1[60] = v5;
  return ~v8 - 858993459 * ((unint64_t)(v6 - v7) >> 3);
}

uint64_t llvm::MachineFrameInfo::CreateFixedObject(llvm::MachineFrameInfo *this, uint64_t a2, uint64_t a3, char a4, char a5)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  int v14;
  __int128 v16;
  char v17;
  char v18;
  __int16 v19;
  char v20;
  uint64_t v21;
  char v22;
  char v23;
  __int16 v24;
  char v25;

  v6 = *(unsigned __int8 *)this;
  if (*((_BYTE *)this + 2))
    v7 = 1;
  else
    v7 = 1 << v6;
  v8 = *((unsigned __int8 *)this + 1);
  v9 = 63 - __clz((v7 | a3) & -(v7 | a3));
  v12 = (char *)*((_QWORD *)this + 1);
  v10 = (_QWORD *)((char *)this + 8);
  v11 = v12;
  *(_QWORD *)&v16 = a3;
  *((_QWORD *)&v16 + 1) = a2;
  if (v9 <= v6 || v8 != 0)
    LOBYTE(v6) = v9;
  v17 = v6;
  v18 = a4;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = a5;
  v24 = 0;
  v25 = 0;
  sub_1C515AE40(v10, v11, &v16);
  v14 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = v14 + 1;
  return ~v14;
}

char *sub_1C515AE40(_QWORD *a1, char *__src, __int128 *a3)
{
  char *v4;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  int64_t v32;
  char *v33;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  void *__p;

  v4 = __src;
  v6 = (char *)a1[1];
  v7 = a1[2];
  if ((unint64_t)v6 < v7)
  {
    if (__src == v6)
    {
      v20 = *a3;
      v21 = a3[1];
      *((_QWORD *)__src + 4) = *((_QWORD *)a3 + 4);
      *(_OWORD *)__src = v20;
      *((_OWORD *)__src + 1) = v21;
      a1[1] = __src + 40;
    }
    else
    {
      v8 = __src + 40;
      v9 = v6 - 40;
      v10 = a1[1];
      while (v9 < v6)
      {
        v11 = *(_OWORD *)v9;
        v12 = *((_OWORD *)v9 + 1);
        *(_QWORD *)(v10 + 32) = *((_QWORD *)v9 + 4);
        *(_OWORD *)v10 = v11;
        *(_OWORD *)(v10 + 16) = v12;
        v9 += 40;
        v10 += 40;
      }
      a1[1] = v10;
      if (v6 != v8)
        memmove(v8, __src, v6 - v8 - 3);
      v18 = *a3;
      v19 = a3[1];
      *(_QWORD *)(v4 + 29) = *(_QWORD *)((char *)a3 + 29);
      *(_OWORD *)v4 = v18;
      *((_OWORD *)v4 + 1) = v19;
    }
    return v4;
  }
  v13 = (char *)*a1;
  v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v6[-*a1] >> 3) + 1;
  if (v14 > 0x666666666666666)
    abort();
  v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (_QWORD)v13) >> 3);
  if (2 * v15 > v14)
    v14 = 2 * v15;
  if (v15 >= 0x333333333333333)
    v16 = 0x666666666666666;
  else
    v16 = v14;
  if (v16)
  {
    if (v16 > 0x666666666666666)
      goto LABEL_41;
    v17 = (char *)operator new(40 * v16);
  }
  else
  {
    v17 = 0;
  }
  v22 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v13) >> 3);
  v23 = &v17[8 * ((v4 - v13) >> 3)];
  v24 = &v17[40 * v16];
  if (v22 == v16)
  {
    __p = v17;
    if (v4 - v13 >= 1)
    {
      if (v22 >= -1)
        v35 = v22 + 1;
      else
        v35 = v22 + 2;
      v23 -= 40 * (v35 >> 1);
      goto LABEL_21;
    }
    v36 = 0x999999999999999ALL * ((v4 - v13) >> 3);
    if (v13 == v4)
      v36 = 1;
    if (v36 <= 0x666666666666666)
    {
      v37 = v36 >> 2;
      v38 = 5 * v36;
      v39 = (char *)operator new(40 * v36);
      v23 = &v39[40 * v37];
      v24 = &v39[8 * v38];
      if (__p)
      {
        operator delete(__p);
        v13 = (char *)*a1;
      }
      goto LABEL_21;
    }
LABEL_41:
    sub_1C4764EE4();
  }
LABEL_21:
  v25 = a3[1];
  *(_OWORD *)v23 = *a3;
  *((_OWORD *)v23 + 1) = v25;
  *((_QWORD *)v23 + 4) = *((_QWORD *)a3 + 4);
  v26 = v23;
  if (v4 != v13)
  {
    v27 = v4;
    v28 = v23;
    do
    {
      v29 = *(_OWORD *)(v27 - 40);
      v30 = *(_OWORD *)(v27 - 24);
      v26 = v28 - 40;
      *(_QWORD *)(v28 - 11) = *(_QWORD *)(v27 - 11);
      *(_OWORD *)(v28 - 24) = v30;
      *(_OWORD *)(v28 - 40) = v29;
      v27 -= 40;
      v28 -= 40;
    }
    while (v27 != v13);
  }
  v31 = (char *)a1[1];
  v32 = v31 - v4;
  if (v31 != v4)
    memmove(v23 + 40, v4, v32 - 3);
  v33 = (char *)*a1;
  *a1 = v26;
  a1[1] = &v23[v32 + 40];
  a1[2] = v24;
  if (v33)
    operator delete(v33);
  return v23;
}

uint64_t llvm::MachineFrameInfo::CreateFixedSpillStackObject(llvm::MachineFrameInfo *this, uint64_t a2, uint64_t a3, char a4)
{
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  int v13;
  __int128 v15;
  char v16;
  char v17;
  __int16 v18;
  char v19;
  _QWORD v20[2];

  v5 = *(unsigned __int8 *)this;
  if (*((_BYTE *)this + 2))
    v6 = 1;
  else
    v6 = 1 << v5;
  v7 = 63 - __clz((v6 | a3) & -(v6 | a3));
  v8 = *((unsigned __int8 *)this + 1);
  *(_QWORD *)&v15 = a3;
  *((_QWORD *)&v15 + 1) = a2;
  v11 = (char *)*((_QWORD *)this + 1);
  v9 = (_QWORD *)((char *)this + 8);
  v10 = v11;
  if (v7 > v5 && v8 == 0)
    LOBYTE(v7) = v5;
  v16 = v7;
  v17 = a4;
  v18 = 1;
  v19 = 0;
  v20[0] = 0;
  *(_QWORD *)((char *)v20 + 5) = 0;
  sub_1C515AE40(v9, v10, &v15);
  v13 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = v13 + 1;
  return ~v13;
}

uint64_t llvm::MachineFrameInfo::estimateStackSize(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 112))(*(_QWORD *)(a2 + 16));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  v6 = *(_BYTE *)(a1 + 60);
  v7 = *(_DWORD *)(a1 + 32);
  if (v7)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = -v7 + 1;
    v11 = v9;
    do
    {
      if (!*(_BYTE *)(v11 + 20) && v8 <= -*(_QWORD *)v11)
        v8 = -*(_QWORD *)v11;
      v12 = v10++;
      v11 += 40;
    }
    while (v12);
  }
  else
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 8);
  }
  v13 = -858993459 * ((unint64_t)(*(_QWORD *)(a1 + 16) - v9) >> 3);
  if (v7 != v13)
  {
    do
    {
      v14 = v7;
      v15 = *(_QWORD *)(v9 + 40 * v7 + 8);
      if (v15 != -1 && !*(_BYTE *)(v9 + 40 * v14 + 20))
      {
        v16 = *(unsigned __int8 *)(v9 + 40 * v14 + 16);
        v8 = (v8 + v15 + (1 << v16) - 1) & -(1 << v16);
        if (v16 > v6)
          v6 = *(_BYTE *)(v9 + 40 * v14 + 16);
      }
      v7 = v14 + 1;
    }
    while (v13 != v14 + 1);
  }
  if (*(_BYTE *)(a1 + 61))
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 208))(v4, a2))
    {
      LODWORD(v17) = *(_DWORD *)(a1 + 72);
      if ((_DWORD)v17 == -1)
        v17 = 0;
      else
        v17 = v17;
      v8 += v17;
    }
    if (*(_BYTE *)(a1 + 61))
      goto LABEL_23;
  }
  if (*(_BYTE *)(a1 + 36)
    || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 440))(v5, a2)
    && (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 432))(v5, a2)
    && *(_DWORD *)(a1 + 32) != -858993459 * ((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3))
  {
LABEL_23:
    v18 = (unsigned __int8 *)(v4 + 12);
  }
  else
  {
    v18 = (unsigned __int8 *)(v4 + 13);
  }
  v19 = *v18;
  if (v19 <= v6)
    LOBYTE(v19) = v6;
  return (v8 + (1 << v19) - 1) & -(1 << v19);
}

uint64_t llvm::MachineFrameInfo::computeMaxCallFrameSize(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  int v10;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  v5 = *(_DWORD *)(result + 64);
  v6 = *(_DWORD *)(result + 68);
  *(_DWORD *)(a1 + 72) = 0;
  v7 = *(_QWORD *)(a2 + 328);
  if (v7 != a2 + 320)
  {
    v8 = 0;
    do
    {
      for (i = *(_QWORD *)(v7 + 56); i != v7 + 48; i = *(_QWORD *)(i + 8))
      {
        v10 = **(unsigned __int16 **)(i + 16);
        if (v5 == v10 || v6 == v10)
        {
          if (v8 <= *(_DWORD *)(*(_QWORD *)(i + 32) + 16))
            v8 = *(_DWORD *)(*(_QWORD *)(i + 32) + 16);
          *(_DWORD *)(a1 + 72) = v8;
LABEL_15:
          *(_BYTE *)(a1 + 61) = 1;
          goto LABEL_16;
        }
        if ((v10 - 1) <= 1 && (*(_BYTE *)(*(_QWORD *)(i + 32) + 48) & 2) != 0)
          goto LABEL_15;
LABEL_16:
        if ((*(_BYTE *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
      }
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != a2 + 320);
  }
  return result;
}

llvm::raw_ostream *llvm::MachineFrameInfo::print(llvm::raw_ostream *this, const llvm::MachineFunction *a2, llvm::raw_ostream *a3)
{
  llvm::raw_ostream *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  unint64_t v12;
  llvm::raw_ostream *v13;
  int v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::raw_ostream *v22;
  const char *v23;
  size_t v24;
  void *v25;
  uint64_t v26;
  llvm::raw_ostream *v27;
  _QWORD *v28;
  llvm::raw_ostream *v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;

  if (*((_QWORD *)this + 1) != *((_QWORD *)this + 2))
  {
    v4 = this;
    this = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 112))(*((_QWORD *)a2 + 2));
    v36 = this ? *((int *)this + 4) : 0;
    v5 = (void *)*((_QWORD *)a3 + 4);
    if (*((_QWORD *)a3 + 3) - (_QWORD)v5 > 0xEuLL)
    {
      qmemcpy(v5, "Frame Objects:\n", 15);
      *((_QWORD *)a3 + 4) += 15;
    }
    else
    {
      this = llvm::raw_ostream::write(a3, "Frame Objects:\n", 0xFuLL);
    }
    v6 = -858993459 * ((*((_QWORD *)v4 + 2) - *((_QWORD *)v4 + 1)) >> 3);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *((_QWORD *)v4 + 1);
        v10 = *((_QWORD *)a3 + 4);
        if ((unint64_t)(*((_QWORD *)a3 + 3) - v10) > 4)
        {
          *(_BYTE *)(v10 + 4) = 35;
          *(_DWORD *)v10 = 1768300576;
          *((_QWORD *)a3 + 4) += 5;
          v11 = a3;
        }
        else
        {
          v11 = llvm::raw_ostream::write(a3, "  fi#", 5uLL);
        }
        v12 = (int)v8 - *((_DWORD *)v4 + 8);
        if ((v12 & 0x80000000) != 0)
        {
          v12 = -(uint64_t)v12;
          v13 = v11;
          v14 = 1;
        }
        else
        {
          v13 = v11;
          v14 = 0;
        }
        this = sub_1C5E21910(v13, v12, 0, 0, v14);
        v15 = (_WORD *)*((_QWORD *)v11 + 4);
        if (*((_QWORD *)v11 + 3) - (_QWORD)v15 > 1uLL)
        {
          *v15 = 8250;
          *((_QWORD *)v11 + 4) += 2;
        }
        else
        {
          this = llvm::raw_ostream::write(v11, ": ", 2uLL);
        }
        v16 = v9 + v7;
        if (*(_BYTE *)(v9 + v7 + 20))
        {
          v17 = *((_QWORD *)a3 + 4);
          if ((unint64_t)(*((_QWORD *)a3 + 3) - v17) > 2)
          {
            *(_BYTE *)(v17 + 2) = 61;
            *(_WORD *)v17 = 25705;
            *((_QWORD *)a3 + 4) += 3;
            v18 = a3;
          }
          else
          {
            v18 = llvm::raw_ostream::write(a3, "id=", 3uLL);
          }
          this = sub_1C5E21910(v18, *(unsigned __int8 *)(v16 + 20), 0, 0, 0);
          v19 = (_BYTE *)*((_QWORD *)v18 + 4);
          if ((unint64_t)v19 >= *((_QWORD *)v18 + 3))
          {
            this = llvm::raw_ostream::write(v18, 32);
          }
          else
          {
            *((_QWORD *)v18 + 4) = v19 + 1;
            *v19 = 32;
          }
        }
        v20 = *(_QWORD *)(v16 + 8);
        if (v20)
        {
          if (v20 == -1)
          {
            v21 = *((_QWORD *)a3 + 4);
            if ((unint64_t)(*((_QWORD *)a3 + 3) - v21) > 4)
            {
              *(_BYTE *)(v21 + 4) = 10;
              *(_DWORD *)v21 = 1684104548;
              v35 = *((_QWORD *)a3 + 4) + 5;
              goto LABEL_57;
            }
            v22 = a3;
            v23 = "dead\n";
            v24 = 5;
            goto LABEL_48;
          }
          v26 = *((_QWORD *)a3 + 4);
          if ((unint64_t)(*((_QWORD *)a3 + 3) - v26) > 4)
          {
            *(_BYTE *)(v26 + 4) = 61;
            *(_DWORD *)v26 = 1702521203;
            *((_QWORD *)a3 + 4) += 5;
            v27 = a3;
          }
          else
          {
            v27 = llvm::raw_ostream::write(a3, "size=", 5uLL);
          }
          sub_1C5E21910(v27, *(_QWORD *)(v16 + 8), 0, 0, 0);
        }
        else
        {
          v25 = (void *)*((_QWORD *)a3 + 4);
          if (*((_QWORD *)a3 + 3) - (_QWORD)v25 > 0xDuLL)
          {
            qmemcpy(v25, "variable sized", 14);
            *((_QWORD *)a3 + 4) += 14;
          }
          else
          {
            llvm::raw_ostream::write(a3, "variable sized", 0xEuLL);
          }
        }
        v28 = (_QWORD *)*((_QWORD *)a3 + 4);
        if (*((_QWORD *)a3 + 3) - (_QWORD)v28 > 7uLL)
        {
          *v28 = 0x3D6E67696C61202CLL;
          *((_QWORD *)a3 + 4) += 8;
          v29 = a3;
        }
        else
        {
          v29 = llvm::raw_ostream::write(a3, ", align=", 8uLL);
        }
        this = sub_1C5E21910(v29, 1 << *(_BYTE *)(v9 + v7 + 16), 0, 0, 0);
        v30 = *((_QWORD *)a3 + 4);
        if (v8 < *((unsigned int *)v4 + 8))
        {
          if ((unint64_t)(*((_QWORD *)a3 + 3) - v30) > 6)
          {
            *(_DWORD *)(v30 + 3) = 1684371561;
            *(_DWORD *)v30 = 1768300588;
            v30 = *((_QWORD *)a3 + 4) + 7;
            *((_QWORD *)a3 + 4) = v30;
          }
          else
          {
            this = llvm::raw_ostream::write(a3, ", fixed", 7uLL);
            v30 = *((_QWORD *)a3 + 4);
          }
        }
        v31 = *(_QWORD *)(v9 + v7);
        if (v8 < *((unsigned int *)v4 + 8) || v31 != -1)
          break;
LABEL_46:
        if (*((_QWORD *)a3 + 3) != v30)
        {
          *(_BYTE *)v30 = 10;
          v35 = *((_QWORD *)a3 + 4) + 1;
LABEL_57:
          *((_QWORD *)a3 + 4) = v35;
          goto LABEL_49;
        }
        v22 = a3;
        v23 = "\n";
        v24 = 1;
LABEL_48:
        this = llvm::raw_ostream::write(v22, v23, v24);
LABEL_49:
        ++v8;
        v7 += 40;
        if (v6 == v8)
          return this;
      }
      if ((unint64_t)(*((_QWORD *)a3 + 3) - v30) > 0x10)
      {
        *(_BYTE *)(v30 + 16) = 80;
        *(_OWORD *)v30 = *(_OWORD *)", at location [SP";
        *((_QWORD *)a3 + 4) += 17;
      }
      else
      {
        llvm::raw_ostream::write(a3, ", at location [SP", 0x11uLL);
      }
      v32 = v31 - v36;
      if (v32 < 1)
      {
        this = a3;
        if ((v32 & 0x8000000000000000) == 0)
        {
LABEL_44:
          v34 = (_BYTE *)*((_QWORD *)a3 + 4);
          if (*((_BYTE **)a3 + 3) == v34)
          {
            this = llvm::raw_ostream::write(a3, "]", 1uLL);
            v30 = *((_QWORD *)a3 + 4);
          }
          else
          {
            *v34 = 93;
            v30 = *((_QWORD *)a3 + 4) + 1;
            *((_QWORD *)a3 + 4) = v30;
          }
          goto LABEL_46;
        }
      }
      else
      {
        v33 = (_BYTE *)*((_QWORD *)a3 + 4);
        if (*((_BYTE **)a3 + 3) == v33)
        {
          this = llvm::raw_ostream::write(a3, "+", 1uLL);
        }
        else
        {
          *v33 = 43;
          ++*((_QWORD *)a3 + 4);
          this = a3;
        }
      }
      this = llvm::raw_ostream::operator<<(this, v32);
      goto LABEL_44;
    }
  }
  return this;
}

char *sub_1C515B9A4(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  __int128 v13;
  __int128 v14;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    abort();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - v3) >> 3) > v5)
    v5 = 0x999999999999999ALL * (((_BYTE *)a1[2] - v3) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - v3) >> 3) >= 0x333333333333333)
    v8 = 0x666666666666666;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x666666666666666)
      sub_1C4764EE4();
    v9 = (char *)operator new(40 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[40 * v4];
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v11;
  *((_QWORD *)v10 + 4) = *(_QWORD *)(a2 + 32);
  v12 = v10 + 40;
  if (v2 != v3)
  {
    do
    {
      v13 = *(_OWORD *)(v2 - 40);
      v14 = *(_OWORD *)(v2 - 24);
      *(_QWORD *)(v10 - 11) = *(_QWORD *)(v2 - 11);
      *(_OWORD *)(v10 - 24) = v14;
      *(_OWORD *)(v10 - 40) = v13;
      v10 -= 40;
      v2 -= 40;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = &v9[40 * v8];
  if (v2)
    operator delete(v2);
  return v12;
}

uint64_t ***setUnsafeStackSize(uint64_t ***result, llvm::MachineFrameInfo *a2)
{
  uint64_t **v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t ***v9;
  uint64_t ***v10;
  uint64_t ***v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t ***v29;
  uint64_t **v30;
  uint64_t ***v31;

  v2 = result[14];
  if (!v2 || (*((_BYTE *)v2 + 18) & 2) == 0 || (*((_BYTE *)result + 23) & 0x20) == 0)
    return result;
  v4 = ***result;
  v31 = result;
  v5 = *(_DWORD *)(v4 + 2496);
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 2480);
    v7 = v5 - 1;
    v8 = (v5 - 1) & ((result >> 4) ^ (result >> 9));
    v9 = (uint64_t ***)(v6 + 40 * v8);
    v10 = (uint64_t ***)*v9;
    if (*v9 == (uint64_t **)result)
      goto LABEL_14;
    v11 = 0;
    v12 = 1;
    while (v10 != (uint64_t ***)-4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == (uint64_t ***)-8192;
      if (v13)
        v11 = v9;
      v14 = v8 + v12++;
      v8 = v14 & v7;
      v9 = (uint64_t ***)(v6 + 40 * (v14 & v7));
      v10 = (uint64_t ***)*v9;
      if (*v9 == (uint64_t **)result)
        goto LABEL_14;
    }
    if (v11)
      v29 = v11;
    else
      v29 = v9;
  }
  else
  {
    v29 = 0;
  }
  result = (uint64_t ***)sub_1C541AB24(v4 + 2480, (uint64_t)&v31, (uint64_t *)&v31, v29);
  v9 = result;
  v30 = (uint64_t **)v31;
  result[3] = 0;
  result[4] = 0;
  *result = v30;
  result[1] = (uint64_t **)(result + 3);
  result[2] = (uint64_t **)0x100000000;
LABEL_14:
  v15 = *((unsigned int *)v9 + 4);
  if ((_DWORD)v15)
  {
    v16 = v9[1] + 1;
    v17 = 16 * v15;
    while (*((_DWORD *)v16 - 2) != 30)
    {
      v16 += 2;
      v17 -= 16;
      if (!v17)
        return result;
    }
    v18 = *v16;
    if (v18)
    {
      if (*(_BYTE *)v18 == 4 && *(_DWORD *)(v18 + 8) == 2)
      {
        v19 = *(_QWORD *)(v18 - 16);
        if (v19)
        {
          v20 = *(_QWORD *)(v19 + 8);
          if (*(_QWORD *)v20 == 17)
          {
            v21 = *(_QWORD *)(v20 + 24);
            v22 = *(_QWORD *)(v20 + 32);
            v23 = *(unsigned __int8 *)(v20 + 40);
            v24 = v21 == 0x732D656661736E75 && v22 == 0x7A69732D6B636174;
            if (v24 && v23 == 101)
            {
              v26 = *(_QWORD *)(v18 - 8);
              if (v26)
              {
                v27 = *(_QWORD *)(v26 + 128);
                v28 = (_QWORD *)(v27 + 24);
                if (*(_DWORD *)(v27 + 32) >= 0x41u)
                  v28 = (_QWORD *)*v28;
                *((_QWORD *)a2 + 84) = *v28;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void llvm::MachineFunctionInfo::~MachineFunctionInfo(llvm::MachineFunctionInfo *this)
{
  JUMPOUT(0x1CAA32FC0);
}

void llvm::ilist_alloc_traits<llvm::MachineBasicBlock>::deleteNode(int a1, llvm::MachineBasicBlock *a2)
{
  uint64_t v3;
  llvm::MachineJumpTableInfo *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  llvm::MachineBasicBlock *i;

  v3 = *((_QWORD *)a2 + 4);
  v4 = *(llvm::MachineJumpTableInfo **)(v3 + 72);
  if (v4)
    llvm::MachineJumpTableInfo::RemoveMBBFromJumpTables(v4, a2);
  v5 = (void *)*((_QWORD *)a2 + 19);
  if (v5)
  {
    *((_QWORD *)a2 + 20) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)a2 + 14);
  if (v6)
  {
    *((_QWORD *)a2 + 15) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)a2 + 11);
  if (v7)
  {
    *((_QWORD *)a2 + 12) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)a2 + 8);
  if (v8)
  {
    *((_QWORD *)a2 + 9) = v8;
    operator delete(v8);
  }
  for (i = (llvm::MachineBasicBlock *)*((_QWORD *)a2 + 7);
        (llvm::MachineBasicBlock *)((char *)a2 + 48) != i;
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 312);
  *(_QWORD *)(v3 + 312) = a2;
}

void llvm::MachineFunction::deleteMachineBasicBlock(llvm::MachineFunction *this, llvm::MachineBasicBlock **a2)
{
  llvm::MachineJumpTableInfo *v4;
  llvm::MachineBasicBlock *v5;
  llvm::MachineBasicBlock *v6;
  llvm::MachineBasicBlock *v7;
  llvm::MachineBasicBlock *v8;
  llvm::MachineBasicBlock *i;

  v4 = (llvm::MachineJumpTableInfo *)*((_QWORD *)this + 9);
  if (v4)
    llvm::MachineJumpTableInfo::RemoveMBBFromJumpTables(v4, (llvm::MachineBasicBlock *)a2);
  v5 = a2[19];
  if (v5)
  {
    a2[20] = v5;
    operator delete(v5);
  }
  v6 = a2[14];
  if (v6)
  {
    a2[15] = v6;
    operator delete(v6);
  }
  v7 = a2[11];
  if (v7)
  {
    a2[12] = v7;
    operator delete(v7);
  }
  v8 = a2[8];
  if (v8)
  {
    a2[9] = v8;
    operator delete(v8);
  }
  for (i = a2[7];
        a2 + 6 != (llvm::MachineBasicBlock **)i;
  *a2 = (llvm::MachineBasicBlock *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = a2;
}

llvm::MachineFunction *llvm::MachineFunction::MachineFunction(llvm::MachineFunction *this, llvm::Function *a2, const llvm::LLVMTargetMachine *a3, const llvm::TargetSubtargetInfo *a4, int a5, llvm::MachineModuleInfo *a6, llvm::FunctionGroup *a7)
{
  char *v9;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  v9 = (char *)*((_QWORD *)a6 + 257);
  if (!v9)
    v9 = (char *)a6 + 8;
  *((_QWORD *)this + 2) = a4;
  *((_QWORD *)this + 3) = v9;
  *((_QWORD *)this + 4) = a6;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 18) = (char *)this + 160;
  *((_QWORD *)this + 19) = 0x400000000;
  *((_QWORD *)this + 24) = (char *)this + 208;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_QWORD *)this + 27) = 1;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = (char *)this + 248;
  *((_QWORD *)this + 30) = 0x800000000;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = (char *)this + 320;
  *((_QWORD *)this + 41) = (char *)this + 320;
  *((_QWORD *)this + 43) = a7;
  *((_DWORD *)this + 88) = 0;
  *((_QWORD *)this + 45) = (char *)this + 376;
  *((_QWORD *)this + 46) = 0x600000000;
  sub_1C4765AA4((char *)this + 360, 1uLL, 0);
  *((_DWORD *)this + 106) = 11;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *(_OWORD *)((char *)this + 540) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_DWORD *)this + 144) = 0;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_DWORD *)this + 150) = 0;
  *((_QWORD *)this + 76) = 0;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_QWORD *)((char *)this + 629) = 0;
  *((_DWORD *)this + 160) = 4;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 708) = 0u;
  *((_DWORD *)this + 190) = 0;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((_QWORD *)this + 96) = (char *)this + 784;
  *((_QWORD *)this + 97) = 0x400000000;
  *((_DWORD *)this + 228) = 0;
  *((_QWORD *)this + 115) = (char *)this + 936;
  *((_QWORD *)this + 116) = 0x800000000;
  *((_DWORD *)this + 278) = 0;
  *(_OWORD *)((char *)this + 1096) = 0u;
  *((_DWORD *)this + 84) = a5;
  llvm::MachineFunction::init(this);
  return this;
}

uint64_t llvm::MachineFunction::init(llvm::MachineFunction *this)
{
  llvm::MachineRegisterInfo *v2;
  llvm::MachineRegisterInfo *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  int v16;
  unint64_t v17;
  unsigned __int16 FnStackAlignment;
  unint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  unint64_t v26;
  uint64_t v27;
  const llvm::Value *v28;
  uint64_t v29;
  unsigned int v30;
  llvm::Value *v31;
  _QWORD *v32;
  int v33;
  llvm::Value **v34;
  const llvm::Value *v35;
  _QWORD *v36;
  llvm::Value *v37;
  int v38;
  llvm::Value **v39;
  unsigned int v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t result;
  __n128 *v45;
  uint64_t v46;
  unint64_t v47;

  **((_QWORD **)this + 45) |= 5uLL;
  v2 = (llvm::MachineRegisterInfo *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 176))(*((_QWORD *)this + 2));
  if (v2)
  {
    v3 = (llvm::MachineRegisterInfo *)sub_1C484358C((uint64_t)this + 128, 480, 3);
    v2 = llvm::MachineRegisterInfo::MachineRegisterInfo(v3, this);
  }
  *((_QWORD *)this + 5) = v2;
  *((_QWORD *)this + 6) = 0;
  if (*(_BYTE *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 112))(*((_QWORD *)this + 2)) + 20))
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 112);
    if (v4)
    {
      if (*(_DWORD *)(v4 + 8))
      {
        v5 = *(_QWORD *)(v4 + 40);
        if (v5)
        {
          v6 = *(_DWORD *)(v5 + 40);
          if (v6)
          {
            v7 = *(_QWORD *)(v5 + 24);
            v8 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
            if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
            {
              v47 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v47 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v47;
              __cxa_guard_release(&qword_1ED7EAC88);
            }
            v9 = 0x9DDFEA08EB382D69
               * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0x71B0A0613591C43)) ^ ((0x9DDFEA08EB382D69
                                                                                     * (qword_1ED7EAC80 ^ 0x71B0A0613591C43)) >> 47) ^ 0x6E776B636174732DLL);
            v10 = (-348639895 * ((v9 >> 47) ^ v9)) ^ 0x732D6E67;
            for (i = 1; ; ++i)
            {
              v12 = v10 & (v6 - 1);
              v13 = v7 + 24 * v12;
              v14 = *(_QWORD **)v13;
              if (*(_QWORD *)v13 == -1)
              {
                if ("no-realign-stack" == (char *)-1)
                  goto LABEL_23;
              }
              else if (v14 == (_QWORD *)-2)
              {
                if ("no-realign-stack" == (char *)-2)
                  goto LABEL_23;
              }
              else if (*(_QWORD *)(v13 + 8) == 16 && *v14 == 0x696C6165722D6F6ELL && v14[1] == 0x6B636174732D6E67)
              {
                goto LABEL_23;
              }
              if (v14 == (_QWORD *)-1)
                break;
              v10 = i + v12;
            }
          }
        }
      }
    }
    v16 = 1;
  }
  else
  {
LABEL_23:
    v16 = 0;
  }
  v17 = sub_1C484358C((uint64_t)this + 128, 680, 3);
  FnStackAlignment = llvm::AttributeList::getFnStackAlignment((llvm::AttributeList *)(*(_QWORD *)this + 112));
  if (FnStackAlignment > 0xFFu)
    v19 = FnStackAlignment;
  else
    v19 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 112))(*((_QWORD *)this + 2))
                             + 12);
  if (v16)
  {
    v20 = *(_QWORD *)(*(_QWORD *)this + 112);
    if (v20)
      LODWORD(v20) = (*(unsigned __int8 *)(v20 + 21) >> 6) & 1;
  }
  else
  {
    LOBYTE(v20) = 0;
  }
  v21 = 63 - __clz((1 << v19));
  if (v19 <= 0x1F)
    v22 = v21;
  else
    v22 = 0;
  *(_BYTE *)v17 = v22;
  *(_BYTE *)(v17 + 1) = v16;
  *(_BYTE *)(v17 + 2) = v20;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_BYTE *)(v17 + 40) = 0;
  *(_QWORD *)(v17 + 48) = 0;
  *(_QWORD *)(v17 + 55) = 0;
  *(_QWORD *)(v17 + 64) = -1;
  *(_DWORD *)(v17 + 72) = -1;
  *(_QWORD *)(v17 + 76) = 0;
  *(_OWORD *)(v17 + 84) = 0u;
  *(_QWORD *)(v17 + 97) = 0;
  *(_QWORD *)(v17 + 112) = v17 + 128;
  *(_QWORD *)(v17 + 120) = 0x2000000000;
  *(_QWORD *)(v17 + 640) = 0;
  *(_QWORD *)(v17 + 647) = 0;
  *(_QWORD *)(v17 + 672) = 0;
  *(_OWORD *)(v17 + 656) = 0u;
  *((_QWORD *)this + 7) = v17;
  setUnsafeStackSize(*(uint64_t ****)this, (llvm::MachineFrameInfo *)v17);
  v23 = *(_QWORD *)(*(_QWORD *)this + 112);
  if (v23)
  {
    if ((*(_BYTE *)(v23 + 21) & 0x40) != 0)
    {
      v24 = *((_QWORD *)this + 7);
      v25 = llvm::AttributeList::getFnStackAlignment((llvm::AttributeList *)(*(_QWORD *)this + 112));
      if (*(unsigned __int8 *)(v24 + 60) < v25)
        *(_BYTE *)(v24 + 60) = v25;
    }
  }
  v26 = sub_1C484358C((uint64_t)this + 128, 64, 3);
  v27 = *(_QWORD *)(*(_QWORD *)this + 40) + 272;
  *(_BYTE *)v26 = 0;
  *(_OWORD *)(v26 + 8) = 0u;
  *(_OWORD *)(v26 + 24) = 0u;
  *(_OWORD *)(v26 + 36) = 0u;
  *(_QWORD *)(v26 + 56) = v27;
  *((_QWORD *)this + 8) = v26;
  *((_BYTE *)this + 352) = *(_BYTE *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2))
                                    + 69);
  v29 = *(_QWORD *)(*(_QWORD *)this + 112);
  if (!v29 || (*(_BYTE *)(v29 + 17) & 4) == 0)
  {
    v30 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2))
                             + 70);
    if (*((unsigned __int8 *)this + 352) > v30)
      LOBYTE(v30) = *((_BYTE *)this + 352);
    *((_BYTE *)this + 352) = v30;
  }
  if (dword_1ED7FA8F0)
    *((_BYTE *)this + 352) = __clz(1 << dword_1ED7FA8F0) ^ 0x3F;
  v31 = 0;
  *((_QWORD *)this + 9) = 0;
  v32 = *(_QWORD **)this;
  if ((*(_WORD *)(*(_QWORD *)this + 18) & 8) != 0)
  {
    v33 = *((_DWORD *)v32 + 5);
    if ((v33 & 0x40000000) != 0)
      v34 = (llvm::Value **)*(v32 - 1);
    else
      v34 = (llvm::Value **)&v32[-4 * (v33 & 0x7FFFFFF)];
    v31 = *v34;
  }
  if (llvm::classifyEHPersonality(v31, v28) - 7 <= 3)
  {
    v45 = (__n128 *)sub_1C484358C((uint64_t)this + 128, 696, 3);
    llvm::WinEHFuncInfo::WinEHFuncInfo(v45);
    *((_QWORD *)this + 12) = v46;
  }
  v36 = *(_QWORD **)this;
  if ((*(_WORD *)(*(_QWORD *)this + 18) & 8) != 0)
  {
    v38 = *((_DWORD *)v36 + 5);
    if ((v38 & 0x40000000) != 0)
      v39 = (llvm::Value **)*(v36 - 1);
    else
      v39 = (llvm::Value **)&v36[-4 * (v38 & 0x7FFFFFF)];
    v37 = *v39;
  }
  else
  {
    v37 = 0;
  }
  v40 = llvm::classifyEHPersonality(v37, v35);
  if (v40 - 7 < 4 || v40 == 12)
  {
    v41 = (_OWORD *)sub_1C484358C((uint64_t)this + 128, 48, 3);
    *v41 = 0u;
    v41[1] = 0u;
    v41[2] = 0u;
    *((_QWORD *)this + 11) = v41;
  }
  v42 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  v43 = (uint64_t *)operator new();
  llvm::PseudoSourceValueManager::PseudoSourceValueManager(v43, v42);
  result = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = v43;
  if (result)
  {
    sub_1C515FB54(result);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t llvm::MachineFunction::handleInsertion(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 728);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t llvm::MachineFunction::handleRemoval(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 728);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t llvm::MachineFunction::getDataLayout(llvm::MachineFunction *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 40) + 272;
}

void llvm::MachineFunction::~MachineFunction(llvm::MachineFunction *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  llvm::MachineBasicBlock *i;
  char *v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  void **v29;

  llvm::MachineFunction::clear(this);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 137), 8);
  v2 = (char *)*((_QWORD *)this + 115);
  if (v2 != (char *)this + 936)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 96);
  if (v3 != (char *)this + 784)
    free(v3);
  v4 = *((unsigned int *)this + 190);
  v5 = *((_QWORD *)this + 93);
  if ((_DWORD)v4)
  {
    v23 = (_QWORD *)(v5 + 24);
    v24 = 32 * v4;
    do
    {
      if ((*(v23 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v25 = (_QWORD *)*(v23 - 2);
        if (v23 != v25)
          free(v25);
      }
      v23 += 4;
      v24 -= 32;
    }
    while (v24);
    v5 = *((_QWORD *)this + 93);
  }
  MEMORY[0x1CAA32FB4](v5, 8);
  v6 = (void *)*((_QWORD *)this + 87);
  if (v6)
  {
    *((_QWORD *)this + 88) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 84);
  if (v7)
  {
    *((_QWORD *)this + 85) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 81);
  if (v8)
  {
    *((_QWORD *)this + 82) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 76);
  if (v9)
  {
    *((_QWORD *)this + 77) = v9;
    operator delete(v9);
  }
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 73), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 70), 8);
  v10 = *((unsigned int *)this + 138);
  v11 = *((_QWORD *)this + 67);
  if ((_DWORD)v10)
  {
    v26 = (_QWORD *)(v11 + 24);
    v27 = 40 * v10;
    do
    {
      if ((*(v26 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v28 = (_QWORD *)*(v26 - 2);
        if (v26 != v28)
          free(v28);
      }
      v26 += 5;
      v27 -= 40;
    }
    while (v27);
    v11 = *((_QWORD *)this + 67);
  }
  MEMORY[0x1CAA32FB4](v11, 8);
  v12 = (_QWORD *)*((_QWORD *)this + 64);
  if (v12)
  {
    v13 = (_QWORD *)*((_QWORD *)this + 65);
    v14 = (void *)*((_QWORD *)this + 64);
    if (v13 != v12)
    {
      do
        v13 = sub_1C61EEFF0(v13 - 15);
      while (v13 != v12);
      v14 = (void *)*((_QWORD *)this + 64);
    }
    *((_QWORD *)this + 65) = v12;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 61);
  if (v15)
  {
    *((_QWORD *)this + 62) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 58);
  if (v16)
  {
    *((_QWORD *)this + 59) = v16;
    operator delete(v16);
  }
  v29 = (void **)((char *)this + 440);
  sub_1C515FCE0(&v29);
  v17 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v17)
  {
    v18 = sub_1C515FB54(v17);
    MEMORY[0x1CAA32FC0](v18, 0x10E2C4016F627CCLL);
  }
  v19 = (char *)*((_QWORD *)this + 45);
  if (v19 != (char *)this + 376)
    free(v19);
  for (i = (llvm::MachineBasicBlock *)*((_QWORD *)this + 41);
        (llvm::MachineFunction *)((char *)this + 320) != i;
  v21 = (char *)*((_QWORD *)this + 29);
  if (v21 != (char *)this + 248)
    free(v21);
  sub_1C4926AE8((uint64_t)this + 128);
  v22 = (void *)*((_QWORD *)this + 13);
  if (v22)
  {
    *((_QWORD *)this + 14) = v22;
    operator delete(v22);
  }
}

uint64_t llvm::MachineFunction::clear(llvm::MachineFunction *this)
{
  uint64_t v2;
  llvm::MachineFunction *v3;
  char *v4;
  llvm::MachineFunction *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  llvm::MachineJumpTableInfo *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t i;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void (***v31)(_QWORD);
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  void **v39;

  v2 = *((unsigned int *)this + 92);
  if ((_DWORD)v2)
    bzero(*((void **)this + 45), 8 * v2);
  v3 = (llvm::MachineFunction *)*((_QWORD *)this + 41);
  if (v3 != (llvm::MachineFunction *)((char *)this + 320))
  {
    do
    {
      v4 = (char *)v3 + 48;
      *((_QWORD *)v3 + 6) = *((_QWORD *)v3 + 6) & 7 | ((unint64_t)v3 + 48);
      *((_QWORD *)v3 + 7) = (char *)v3 + 48;
      v5 = (llvm::MachineFunction *)*((_QWORD *)v3 + 1);
      *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 4) + 104) + 8 * *((unsigned int *)v3 + 6)) = 0;
      *((_DWORD *)v3 + 6) = -1;
      v6 = *(_QWORD *)v3;
      v7 = (_QWORD *)*((_QWORD *)v3 + 1);
      *v7 = *(_QWORD *)v3;
      *(_QWORD *)(v6 + 8) = v7;
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      v8 = *((_QWORD *)v3 + 4);
      v9 = *(llvm::MachineJumpTableInfo **)(v8 + 72);
      if (v9)
        llvm::MachineJumpTableInfo::RemoveMBBFromJumpTables(v9, v3);
      v10 = (void *)*((_QWORD *)v3 + 19);
      if (v10)
      {
        *((_QWORD *)v3 + 20) = v10;
        operator delete(v10);
      }
      v11 = (void *)*((_QWORD *)v3 + 14);
      if (v11)
      {
        *((_QWORD *)v3 + 15) = v11;
        operator delete(v11);
      }
      v12 = (void *)*((_QWORD *)v3 + 11);
      if (v12)
      {
        *((_QWORD *)v3 + 12) = v12;
        operator delete(v12);
      }
      v13 = (void *)*((_QWORD *)v3 + 8);
      if (v13)
      {
        *((_QWORD *)v3 + 9) = v13;
        operator delete(v13);
      }
      for (i = *((_QWORD *)v3 + 7); v4 != (char *)i; i = sub_1C512C89C((uint64_t)v3 + 40, i))
        ;
      *(_QWORD *)v3 = *(_QWORD *)(v8 + 312);
      *(_QWORD *)(v8 + 312) = v3;
      v3 = v5;
    }
    while (v5 != (llvm::MachineFunction *)((char *)this + 320));
  }
  *((_QWORD *)this + 14) = *((_QWORD *)this + 13);
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 60) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 77) = *((_QWORD *)this + 76);
  *((_DWORD *)this + 194) = 0;
  v15 = *((_QWORD *)this + 5);
  if (v15)
  {
    v16 = *(void **)(v15 + 456);
    if (v16)
    {
      *(_QWORD *)(v15 + 464) = v16;
      operator delete(v16);
    }
    v17 = *(void **)(v15 + 424);
    if (v17 != (void *)(v15 + 440))
      free(v17);
    v18 = *(void **)(v15 + 352);
    if (v18 != (void *)(v15 + 368))
      free(v18);
    v19 = *(void **)(v15 + 280);
    if (v19 != (void *)(v15 + 296))
      free(v19);
    v20 = *(_QWORD *)(v15 + 272);
    *(_QWORD *)(v15 + 272) = 0;
    if (v20)
      MEMORY[0x1CAA32F9C](v20, 0x20C8093837F09);
    v21 = *(void **)(v15 + 232);
    if (v21 != (void *)(v15 + 248))
      free(v21);
    v22 = *(char **)(v15 + 208);
    v23 = *(unsigned int *)(v15 + 216);
    if ((_DWORD)v23)
    {
      v24 = 40 * v23;
      do
      {
        v25 = *(char **)&v22[v24 - 32];
        if (&v22[v24 - 16] != v25)
          free(v25);
        v24 -= 40;
      }
      while (v24);
      v22 = *(char **)(v15 + 208);
    }
    if (v22 != (char *)(v15 + 224))
      free(v22);
    v26 = *(void **)(v15 + 152);
    if (v26 != (void *)(v15 + 176))
      free(v26);
    sub_1C4F02264(v15 + 112);
    if (*(char *)(v15 + 103) < 0)
      operator delete(*(void **)(v15 + 80));
    v27 = *(char **)(v15 + 64);
    v28 = *(unsigned int *)(v15 + 72);
    if ((_DWORD)v28)
    {
      v29 = 24 * v28;
      do
      {
        if (v27[v29 - 1] < 0)
          operator delete(*(void **)&v27[v29 - 24]);
        v29 -= 24;
      }
      while (v29);
      v27 = *(char **)(v15 + 64);
    }
    if (v27 != (char *)(v15 + 80))
      free(v27);
    v30 = *(void **)(v15 + 24);
    if (v30 != (void *)(v15 + 40))
      free(v30);
  }
  v31 = (void (***)(_QWORD))*((_QWORD *)this + 6);
  if (v31)
    (**v31)(v31);
  v32 = (_QWORD *)*((_QWORD *)this + 7);
  v33 = (_QWORD *)v32[14];
  if (v33 != v32 + 16)
    free(v33);
  v34 = (void *)v32[10];
  if (v34)
  {
    v32[11] = v34;
    operator delete(v34);
  }
  v35 = (void *)v32[1];
  if (v35)
  {
    v32[2] = v35;
    operator delete(v35);
  }
  llvm::MachineConstantPool::~MachineConstantPool(*((llvm::MachineConstantPool **)this + 8));
  v36 = *((_QWORD *)this + 9);
  if (v36)
  {
    v39 = (void **)(v36 + 8);
    sub_1C4DB60AC(&v39);
  }
  v37 = *((_QWORD *)this + 12);
  if (v37)
    sub_1C61EEE48(v37);
  result = *((_QWORD *)this + 11);
  if (result)
    return sub_1C61EEF4C(result);
  return result;
}

uint64_t sub_1C515CAC4(llvm::MachineBasicBlock *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  llvm::MachineJumpTableInfo *v6;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 104) + 8 * *((unsigned int *)this + 6)) = 0;
  *((_DWORD *)this + 6) = -1;
  v3 = *(_QWORD *)this;
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  *v4 = *(_QWORD *)this;
  *(_QWORD *)(v3 + 8) = v4;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v5 = *((_QWORD *)this + 4);
  v6 = *(llvm::MachineJumpTableInfo **)(v5 + 72);
  if (v6)
    llvm::MachineJumpTableInfo::RemoveMBBFromJumpTables(v6, this);
  llvm::MachineBasicBlock::~MachineBasicBlock(this);
  *(_QWORD *)this = *(_QWORD *)(v5 + 312);
  *(_QWORD *)(v5 + 312) = this;
  return v2;
}

uint64_t llvm::MachineFunction::shouldSplitStack(llvm::MachineFunction *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  _QWORD *v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;

  v1 = *(_QWORD *)(*(_QWORD *)this + 112);
  if (!v1)
    return 0;
  if (!*(_DWORD *)(v1 + 8))
    return 0;
  v2 = *(_QWORD *)(v1 + 40);
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(v2 + 40);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v2 + 24);
  v5 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v6 = &unk_1ED7EA000;
  if ((v5 & 1) == 0)
  {
    v19 = v4;
    v18 = v3;
    v16 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v6 = &unk_1ED7EA000;
    v3 = v18;
    v4 = v19;
    if (v16)
    {
      v17 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v17 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v17;
      __cxa_guard_release(&qword_1ED7EAC88);
      v6 = (_QWORD *)&unk_1ED7EA000;
      v3 = v18;
      v4 = v19;
    }
  }
  v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6[400] ^ 0xFAFE411847E215DDLL)) ^ ((0x9DDFEA08EB382D69
                                                                    * (v6[400] ^ 0xFAFE411847E215DDLL)) >> 47) ^ 0x8E8D6C6C2E8E65AELL);
  v8 = (-348639895 * ((v7 >> 47) ^ v7)) ^ 0x732D7469;
  v9 = v3 - 1;
  for (i = 1; ; ++i)
  {
    v11 = v8 & v9;
    v12 = v4 + 24 * v11;
    v13 = *(_QWORD **)v12;
    if (*(_QWORD *)v12 == -1)
    {
      if ("split-stack" == (char *)-1)
        return 1;
      goto LABEL_9;
    }
    if (v13 != (_QWORD *)-2)
      break;
    if ("split-stack" == (char *)-2)
      return 1;
LABEL_9:
    if (v13 == (_QWORD *)-1)
      return 0;
    v8 = i + v11;
  }
  if (*(_QWORD *)(v12 + 8) != 11)
    goto LABEL_9;
  if (*v13 != 0x74732D74696C7073 || *(_QWORD *)((char *)v13 + 3) != 0x6B636174732D7469)
    goto LABEL_9;
  return 1;
}

uint64_t llvm::MachineFunction::addFrameInst(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;
  uint64_t v8;

  v4 = a1[56];
  if (v4 >= a1[57])
  {
    v8 = sub_1C515FD68(a1 + 55, a2);
  }
  else
  {
    v5 = *(_OWORD *)a2;
    *(_OWORD *)(v4 + 12) = *(_OWORD *)(a2 + 12);
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 48) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    sub_1C515FEEC((_QWORD *)(v4 + 32), *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32));
    v6 = (_BYTE *)(v4 + 56);
    if (*(char *)(a2 + 79) < 0)
    {
      sub_1C47EBC30(v6, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
    }
    else
    {
      v7 = *(_OWORD *)(a2 + 56);
      *(_QWORD *)(v4 + 72) = *(_QWORD *)(a2 + 72);
      *(_OWORD *)v6 = v7;
    }
    v8 = v4 + 80;
  }
  a1[56] = v8;
  return -858993459 * ((unint64_t)(v8 - a1[55]) >> 4) - 1;
}

void llvm::MachineFunction::RenumberBlocks(llvm::MachineFunction *this, llvm::MachineBasicBlock *a2)
{
  llvm::MachineBasicBlock *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (llvm::MachineFunction *)((char *)this + 320);
  if (*((llvm::MachineFunction **)this + 40) == (llvm::MachineFunction *)((char *)this + 320))
  {
    v9 = *((_QWORD *)this + 13);
LABEL_16:
    *((_QWORD *)this + 14) = v9;
    return;
  }
  if (a2)
  {
    if (*((llvm::MachineBasicBlock **)this + 41) == a2)
      v3 = 0;
    else
      v3 = *(_DWORD *)(*(_QWORD *)a2 + 24) + 1;
  }
  else
  {
    v3 = 0;
    a2 = (llvm::MachineBasicBlock *)*((_QWORD *)this + 41);
  }
  for (; a2 != v2; ++v3)
  {
    v4 = *((int *)a2 + 6);
    if (v3 != (_DWORD)v4)
    {
      if ((_DWORD)v4 != -1)
        *(_QWORD *)(*((_QWORD *)this + 13) + 8 * v4) = 0;
      v5 = *((_QWORD *)this + 13);
      v6 = *(_QWORD *)(v5 + 8 * v3);
      if (v6)
        *(_DWORD *)(v6 + 24) = -1;
      *(_QWORD *)(v5 + 8 * v3) = a2;
      *((_DWORD *)a2 + 6) = v3;
    }
    a2 = (llvm::MachineBasicBlock *)*((_QWORD *)a2 + 1);
  }
  v7 = *((_QWORD *)this + 13);
  v8 = (*((_QWORD *)this + 14) - v7) >> 3;
  if (v3 <= v8)
  {
    if (v3 >= v8)
      return;
    v9 = v7 + 8 * v3;
    goto LABEL_16;
  }
  sub_1C50100A0((char **)this + 13, v3 - v8);
}

llvm::MachineInstr *llvm::MachineFunction::CreateMachineInstr(llvm::MachineFunction *a1, uint64_t a2, unsigned __int8 **a3, char a4)
{
  llvm::MachineInstr *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v11;

  v8 = (llvm::MachineInstr *)*((_QWORD *)a1 + 28);
  if (v8)
    *((_QWORD *)a1 + 28) = *(_QWORD *)v8;
  else
    v8 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)a1 + 128, 72, 3);
  v9 = *a3;
  v11 = v9;
  if (v9)
  {
    llvm::MetadataTracking::retrack((uint64_t)a3, v9, (uint64_t)&v11);
    *a3 = 0;
  }
  llvm::MachineInstr::MachineInstr(v8, a1, a2, &v11, a4);
  if (v11)
    llvm::MetadataTracking::untrack((uint64_t)&v11, v11);
  return v8;
}

llvm::MachineInstr *llvm::MachineFunction::CloneMachineInstr(llvm::MachineFunction *this, const llvm::MachineInstr *a2)
{
  llvm::MachineInstr *v4;

  v4 = (llvm::MachineInstr *)*((_QWORD *)this + 28);
  if (v4)
    *((_QWORD *)this + 28) = *(_QWORD *)v4;
  else
    v4 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)this + 128, 72, 3);
  return llvm::MachineInstr::MachineInstr(v4, this, a2);
}

const llvm::MachineInstr *llvm::MachineFunction::cloneMachineInstrBundle(llvm::MachineFunction *a1, uint64_t a2, unint64_t *a3, const llvm::MachineInstr *a4)
{
  const llvm::MachineInstr *v8;
  uint64_t v9;
  const llvm::MachineInstr *i;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v8 = 0;
  v9 = (uint64_t)a1 + 128;
  for (i = a4; ; i = (const llvm::MachineInstr *)*((_QWORD *)i + 1))
  {
    v11 = *((_QWORD *)a1 + 28);
    if (v11)
      *((_QWORD *)a1 + 28) = *(_QWORD *)v11;
    else
      v11 = sub_1C484358C(v9, 72, 3);
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v11, a1, i);
    v12 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(v11 + 24) = v12;
    v13 = *(_QWORD *)(v12 + 32);
    v14 = *(unsigned int *)(v11 + 40);
    if ((_DWORD)v14)
    {
      v17 = *(_QWORD *)(v11 + 32);
      v18 = *(_QWORD *)(v13 + 40);
      v19 = 32 * v14;
      do
      {
        if (!*(_BYTE *)v17)
        {
          v20 = *(unsigned int *)(v17 + 4);
          if ((int)v20 >= 0)
            v21 = (uint64_t *)(*(_QWORD *)(v18 + 272) + 8 * v20);
          else
            v21 = (uint64_t *)(*(_QWORD *)(v18 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
          v22 = *v21;
          if (*v21)
          {
            v23 = *(_QWORD *)(v22 + 16);
            *(_QWORD *)(v22 + 16) = v17;
            *(_QWORD *)(v17 + 16) = v23;
            if ((*(_BYTE *)(v17 + 3) & 1) != 0)
            {
              *(_QWORD *)(v17 + 24) = v22;
            }
            else
            {
              *(_QWORD *)(v17 + 24) = 0;
              v21 = (uint64_t *)(v23 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v17 + 16) = v17;
            *(_QWORD *)(v17 + 24) = 0;
          }
          *v21 = v17;
        }
        v17 += 32;
        v19 -= 32;
      }
      while (v19);
    }
    v15 = *(_QWORD *)(v13 + 728);
    if (v15)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v15 + 24))(v15, v11);
    v16 = *a3 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v11 = v16 | *(_QWORD *)v11 & 7;
    *(_QWORD *)(v11 + 8) = a3;
    *(_QWORD *)(v16 + 8) = v11;
    *a3 = *a3 & 7 | v11;
    if (v8)
    {
      *(_WORD *)(v11 + 44) |= 4u;
      *(_WORD *)((*(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8) + 44) |= 8u;
    }
    else
    {
      v8 = (const llvm::MachineInstr *)v11;
    }
    if ((*((_WORD *)i + 22) & 8) == 0)
      break;
  }
  if (llvm::MachineInstr::shouldUpdateCallSiteInfo(a4))
    llvm::MachineFunction::copyCallSiteInfo(a1, a4, v8);
  return v8;
}

void llvm::MachineFunction::deleteMachineInstr(llvm::MachineFunction *this, llvm::MachineInstr *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = (_QWORD *)*((_QWORD *)a2 + 4);
  if (v4)
  {
    v5 = *((unsigned __int8 *)a2 + 47);
    v6 = (uint64_t *)((char *)this + 232);
    if (*((_DWORD *)this + 60) <= v5)
      sub_1C515FA1C((uint64_t)this + 232, v5 + 1);
    v7 = *v6;
    *v4 = *(_QWORD *)(*v6 + 8 * v5);
    *(_QWORD *)(v7 + 8 * v5) = v4;
  }
  *(_QWORD *)a2 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = a2;
}

unint64_t llvm::MachineFunction::CreateMachineBasicBlock(llvm::MachineFunction *this, const llvm::BasicBlock *a2)
{
  unint64_t v4;
  uint64_t v5;

  v4 = *((_QWORD *)this + 39);
  if (v4)
    *((_QWORD *)this + 39) = *(_QWORD *)v4;
  else
    v4 = sub_1C484358C((uint64_t)this + 128, 232, 3);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = a2;
  *(_DWORD *)(v4 + 24) = -1;
  *(_QWORD *)(v4 + 48) = (v4 + 48) | 4;
  *(_QWORD *)(v4 + 56) = v4 + 48;
  *(_BYTE *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 121) = 0u;
  *(_QWORD *)(v4 + 160) = 0;
  *(_QWORD *)(v4 + 168) = 0;
  *(_QWORD *)(v4 + 152) = 0;
  *(_BYTE *)(v4 + 176) = 0;
  *(_DWORD *)(v4 + 187) = 0;
  *(_QWORD *)(v4 + 180) = 0;
  *(_QWORD *)(v4 + 192) = 0;
  *(_DWORD *)(v4 + 199) = 0;
  *(_QWORD *)(v4 + 216) = 0;
  *(_QWORD *)(v4 + 224) = 0;
  *(_QWORD *)(v4 + 208) = 0;
  *(_QWORD *)(v4 + 32) = this;
  *(_QWORD *)(v4 + 40) = v4;
  if (a2)
  {
    *(_QWORD *)(v4 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(a2);
    *(_QWORD *)(v4 + 144) = v5;
  }
  return v4;
}

uint64_t llvm::MachineJumpTableInfo::RemoveMBBFromJumpTables(llvm::MachineJumpTableInfo *this, llvm::MachineBasicBlock *a2)
{
  llvm::MachineBasicBlock ***v2;
  llvm::MachineBasicBlock ***v3;
  char v4;
  llvm::MachineBasicBlock **v5;
  llvm::MachineBasicBlock **v6;
  llvm::MachineBasicBlock **v7;

  v2 = (llvm::MachineBasicBlock ***)*((_QWORD *)this + 1);
  v3 = (llvm::MachineBasicBlock ***)*((_QWORD *)this + 2);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = v2[1];
      v6 = *v2;
      if (*v2 != v5)
      {
        while (*v6 != a2)
        {
          if (++v6 == v5)
          {
            v6 = v2[1];
            break;
          }
        }
      }
      v7 = v6 + 1;
      if (v6 != v5 && v7 != v5)
      {
        do
        {
          if (*v7 != a2)
            *v6++ = *v7;
          ++v7;
        }
        while (v7 != v5);
        v5 = v2[1];
      }
      if (v6 != v5)
        v2[1] = v6;
      v4 |= v6 != v5;
      v2 += 3;
    }
    while (v2 != v3);
  }
  return v4 & 1;
}

__n128 llvm::MachineFunction::getMachineMemOperand(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, __int16 a8, char a9, __int16 a10, __int16 a11)
{
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 result;

  v18 = sub_1C484358C(a1 + 128, 80, 3);
  v19 = ((unint64_t)(a4 & 0x1FFFFFFF) << 6) | 1;
  if (a4 == -1)
    v19 = 0;
  v20 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v18 = *(_OWORD *)a2;
  *(_QWORD *)(v18 + 16) = v20;
  *(_QWORD *)(v18 + 24) = v19;
  *(_WORD *)(v18 + 32) = a3;
  *(_BYTE *)(v18 + 34) = a5;
  result = *(__n128 *)(a6 + 16);
  *(_OWORD *)(v18 + 40) = *(_OWORD *)a6;
  *(__n128 *)(v18 + 56) = result;
  *(_QWORD *)(v18 + 72) = a7;
  *(_WORD *)(v18 + 36) = a8 & 0xF0FF | ((a9 & 0xF) << 8) | (a11 << 12);
  return result;
}

{
  unint64_t v18;
  uint64_t v19;
  __n128 result;

  v18 = sub_1C484358C(a1 + 128, 80, 3);
  v19 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v18 = *(_OWORD *)a2;
  *(_QWORD *)(v18 + 16) = v19;
  *(_QWORD *)(v18 + 24) = a4;
  *(_WORD *)(v18 + 32) = a3;
  *(_BYTE *)(v18 + 34) = a5;
  result = *(__n128 *)(a6 + 16);
  *(_OWORD *)(v18 + 40) = *(_OWORD *)a6;
  *(__n128 *)(v18 + 56) = result;
  *(_QWORD *)(v18 + 72) = a7;
  *(_WORD *)(v18 + 36) = a8 & 0xF0FF | ((a9 & 0xF) << 8) | (a11 << 12);
  return result;
}

unint64_t llvm::MachineFunction::getMachineMemOperand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7;
  char v8;
  unint64_t v9;
  __int16 v10;
  __int128 v11;
  __int128 v12;
  __int16 v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;

  v7 = 63 - __clz(((1 << *(_BYTE *)(a2 + 34)) | a3) & -((1 << *(_BYTE *)(a2 + 34)) | a3));
  if (*(_QWORD *)a2 <= 7uLL)
    v8 = v7;
  else
    v8 = *(_BYTE *)(a2 + 34);
  v9 = sub_1C484358C(a1 + 128, 80, 3);
  sub_1C4824250((uint64_t *)a2, a3, (uint64_t)&v16);
  v10 = *(_WORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 40);
  v12 = *(_OWORD *)(a2 + 56);
  v13 = *(_WORD *)(a2 + 36);
  v14 = v17;
  *(_OWORD *)v9 = v16;
  *(_QWORD *)(v9 + 16) = v14;
  *(_QWORD *)(v9 + 24) = a4;
  *(_WORD *)(v9 + 32) = v10;
  *(_BYTE *)(v9 + 34) = v8;
  *(_OWORD *)(v9 + 56) = v12;
  *(_OWORD *)(v9 + 40) = v11;
  *(_QWORD *)(v9 + 72) = 0;
  *(_WORD *)(v9 + 36) = v13;
  return v9;
}

unint64_t llvm::MachineFunction::getMachineMemOperand(llvm::MachineFunction *this, const llvm::MachineMemOperand *a2, const llvm::AAMDNodes *a3)
{
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  __int16 v11;
  const char *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v20;

  v5 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)a2 & 4) != 0 || !v5)
  {
    if ((*(_QWORD *)a2 & 4) != 0)
      v9 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    else
      v9 = 0;
    v6 = *((_QWORD *)a2 + 1);
    v5 = v9 | 4;
    if (v9)
      v8 = *(_DWORD *)(v9 + 12);
    else
      v8 = 0;
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    v7 = *(_DWORD *)(*(_QWORD *)v5 + 8);
    if ((v7 & 0xFE) == 0x12)
      v7 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v5 + 16) + 8);
    v8 = v7 >> 8;
  }
  v10 = sub_1C484358C((uint64_t)this + 128, 80, 3);
  v11 = *((_WORD *)a2 + 16);
  if ((*((_QWORD *)a2 + 3) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v13 = (unint64_t)(sub_1C4825F50((unint64_t *)a2 + 3) + 7) >> 3;
    if ((_DWORD)v12 == 1)
    {
      v20 = v13;
      v13 = v20;
    }
  }
  else
  {
    v13 = -1;
  }
  v14 = *((_BYTE *)a2 + 34);
  v15 = *((_QWORD *)a2 + 9);
  v16 = *((_WORD *)a2 + 18);
  if (v13 == -1)
    v17 = 0;
  else
    v17 = ((v13 & 0x1FFFFFFF) << 6) | 1;
  *(_QWORD *)v10 = v5;
  *(_QWORD *)(v10 + 8) = v6;
  *(_DWORD *)(v10 + 16) = v8;
  *(_BYTE *)(v10 + 20) = 0;
  *(_QWORD *)(v10 + 24) = v17;
  *(_WORD *)(v10 + 32) = v11;
  *(_BYTE *)(v10 + 34) = v14;
  v18 = *(_OWORD *)a3;
  *(_OWORD *)(v10 + 56) = *((_OWORD *)a3 + 1);
  *(_OWORD *)(v10 + 40) = v18;
  *(_QWORD *)(v10 + 72) = v15;
  *(_WORD *)(v10 + 36) = v16;
  return v10;
}

unint64_t llvm::MachineFunction::getMachineMemOperand(uint64_t a1, __int128 *a2, __int16 a3)
{
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;

  v5 = sub_1C484358C(a1 + 128, 80, 3);
  v16 = *a2;
  v17 = *((_QWORD *)a2 + 2);
  if ((*((_QWORD *)a2 + 3) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v7 = (unint64_t)(sub_1C4825F50((unint64_t *)a2 + 3) + 7) >> 3;
    if ((_DWORD)v6 == 1)
    {
      v15 = v7;
      v7 = v15;
    }
  }
  else
  {
    v7 = -1;
  }
  v8 = *((_BYTE *)a2 + 34);
  v9 = *(__int128 *)((char *)a2 + 40);
  v10 = *(__int128 *)((char *)a2 + 56);
  v11 = *((_QWORD *)a2 + 9);
  v12 = *((_WORD *)a2 + 18);
  if (v7 == -1)
    v13 = 0;
  else
    v13 = ((v7 & 0x1FFFFFFF) << 6) | 1;
  *(_OWORD *)v5 = v16;
  *(_QWORD *)(v5 + 16) = v17;
  *(_QWORD *)(v5 + 24) = v13;
  *(_WORD *)(v5 + 32) = a3;
  *(_BYTE *)(v5 + 34) = v8;
  *(_OWORD *)(v5 + 56) = v10;
  *(_OWORD *)(v5 + 40) = v9;
  *(_QWORD *)(v5 + 72) = v11;
  *(_WORD *)(v5 + 36) = v12;
  return v5;
}

unint64_t llvm::MachineFunction::createMIExtraInfo(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1C515D7E4(a1 + 128, a2, a3, a4, a5, a6);
}

unint64_t sub_1C515D7E4(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL8 v11;
  uint64_t v12;
  _BOOL4 v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v11 = a4 != 0;
  if (a4)
    v12 = a3 + 1;
  else
    v12 = a3;
  v13 = a5 != 0;
  if (a5)
    ++v12;
  v14 = a6 != 0;
  if (a6)
    ++v12;
  v15 = sub_1C484358C(a1, 8 * v12 + 8, 3);
  v16 = v15;
  *(_DWORD *)v15 = a3;
  *(_BYTE *)(v15 + 4) = v11;
  *(_BYTE *)(v15 + 5) = v13;
  *(_BYTE *)(v15 + 6) = v14;
  v17 = v15 + 8;
  if (a3)
    memmove((void *)(v15 + 8), a2, 8 * a3);
  if (a4)
    *(_QWORD *)(v17 + 8 * (int)a3) = a4;
  if (a5)
    *(_QWORD *)(v17 + 8 * (int)a3 + 8 * v11) = a5;
  if (a6)
    *(_QWORD *)(v17 + 8 * (int)a3 + 8 * (v13 + v11)) = a6;
  return v16;
}

_BYTE *llvm::MachineFunction::createExternalSymbolName(uint64_t a1, const void *a2, size_t a3)
{
  _BYTE *v5;
  _BYTE *v6;

  v5 = (_BYTE *)sub_1C484358C(a1 + 128, a3 + 1, 0);
  v6 = v5;
  if (a3)
    memmove(v5, a2, a3);
  v6[a3] = 0;
  return v6;
}

void llvm::MachineFunction::allocateRegMask(llvm::MachineFunction *this)
{
  unsigned int v2;
  char *v3;
  size_t v4;
  void *v5;

  v2 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 176))(*((_QWORD *)this + 2)) + 16)
     + 31;
  v3 = (char *)this + 128;
  v4 = (v2 >> 3) & 0x1FFFFFFC;
  v5 = (void *)sub_1C484358C((uint64_t)v3, v4, 2);
  bzero(v5, v4);
}

void *llvm::MachineFunction::allocateShuffleMask(uint64_t a1, const void *a2, uint64_t a3)
{
  size_t v5;
  void *v6;
  void *v7;

  v5 = 4 * a3;
  v6 = (void *)sub_1C484358C(a1 + 128, 4 * a3, 2);
  v7 = v6;
  if (a3)
    memmove(v6, a2, v5);
  return v7;
}

uint64_t llvm::MachineFunction::needsFrameMovesForDebug(llvm::MachineFunction *this)
{
  if (*(_BYTE *)(*((_QWORD *)this + 4) + 2108))
    return 1;
  else
    return (*(unsigned __int16 *)(*((_QWORD *)this + 1) + 1064) >> 4) & 1;
}

double llvm::MachineFunction::viewCFG(llvm::MachineFunction *this)
{
  llvm::raw_ostream *v1;
  void *v2;
  void *v3;
  double result;

  v1 = (llvm::raw_ostream *)llvm::errs(this);
  v2 = (void *)*((_QWORD *)v1 + 4);
  if (*((_QWORD *)v1 + 3) - (_QWORD)v2 > 0x3DuLL)
  {
    qmemcpy(v2, "MachineFunction::viewCFG is only available in debug builds on ", 62);
    v3 = (void *)(*((_QWORD *)v1 + 4) + 62);
    *((_QWORD *)v1 + 4) = v3;
  }
  else
  {
    v1 = llvm::raw_ostream::write(v1, "MachineFunction::viewCFG is only available in debug builds on ", 0x3EuLL);
    v3 = (void *)*((_QWORD *)v1 + 4);
  }
  if (*((_QWORD *)v1 + 3) - (_QWORD)v3 > 0x1CuLL)
  {
    qmemcpy(v3, "systems with Graphviz or gv!\n", 29);
    result = *(double *)"Graphviz or gv!\n";
    *((_QWORD *)v1 + 4) += 29;
  }
  else
  {
    llvm::raw_ostream::write(v1, "systems with Graphviz or gv!\n", 0x1DuLL);
  }
  return result;
}

double llvm::MachineFunction::viewCFGOnly(llvm::MachineFunction *this)
{
  llvm::raw_ostream *v1;
  void *v2;
  void *v3;
  double result;

  v1 = (llvm::raw_ostream *)llvm::errs(this);
  v2 = (void *)*((_QWORD *)v1 + 4);
  if (*((_QWORD *)v1 + 3) - (_QWORD)v2 > 0x41uLL)
  {
    qmemcpy(v2, "MachineFunction::viewCFGOnly is only available in debug builds on ", 66);
    v3 = (void *)(*((_QWORD *)v1 + 4) + 66);
    *((_QWORD *)v1 + 4) = v3;
  }
  else
  {
    v1 = llvm::raw_ostream::write(v1, "MachineFunction::viewCFGOnly is only available in debug builds on ", 0x42uLL);
    v3 = (void *)*((_QWORD *)v1 + 4);
  }
  if (*((_QWORD *)v1 + 3) - (_QWORD)v3 > 0x1CuLL)
  {
    qmemcpy(v3, "systems with Graphviz or gv!\n", 29);
    result = *(double *)"Graphviz or gv!\n";
    *((_QWORD *)v1 + 4) += 29;
  }
  else
  {
    llvm::raw_ostream::write(v1, "systems with Graphviz or gv!\n", 0x1DuLL);
  }
  return result;
}

uint64_t llvm::MachineFunction::addLiveIn(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t IncompleteVirtualRegister;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t *v21;
  _QWORD *v22;
  unint64_t v23;

  v4 = *(_QWORD **)(a1 + 40);
  v5 = v4[57];
  v6 = v4[58] - v5;
  if (!v6)
    goto LABEL_5;
  v7 = (unsigned int *)(v5 + 4);
  v8 = 8 * (v6 >> 3);
  while (*(v7 - 1) != a2)
  {
    v7 += 2;
    v8 -= 8;
    if (!v8)
      goto LABEL_5;
  }
  IncompleteVirtualRegister = *v7;
  if (!(_DWORD)IncompleteVirtualRegister)
  {
LABEL_5:
    v9 = a2;
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(*(_QWORD *)(a1 + 40), (unsigned __int8 *)&unk_1C86AE2AB, 0);
    *(_QWORD *)(v4[3] + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = a3 & 0xFFFFFFFFFFFFFFFBLL;
    v11 = v4[1];
    if (v11)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 24))(v11, IncompleteVirtualRegister);
    v12 = v9 | ((unint64_t)IncompleteVirtualRegister << 32);
    v14 = (unint64_t *)v4[58];
    v13 = v4[59];
    if ((unint64_t)v14 < v13)
    {
      *v14 = v12;
      v22 = v14 + 1;
    }
    else
    {
      v15 = (_QWORD *)v4[57];
      v16 = v14 - v15;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        abort();
      v18 = v13 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          sub_1C4764EE4();
        v20 = (char *)operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = (unint64_t *)&v20[8 * v16];
      *v21 = v12;
      v22 = v21 + 1;
      if (v14 != v15)
      {
        do
        {
          v23 = *--v14;
          *--v21 = v23;
        }
        while (v14 != v15);
        v14 = (unint64_t *)v4[57];
      }
      v4[57] = v21;
      v4[58] = v22;
      v4[59] = &v20[8 * v19];
      if (v14)
        operator delete(v14);
    }
    v4[58] = v22;
  }
  return IncompleteVirtualRegister;
}

unint64_t llvm::MachineFunction::getJTISymbol(llvm::MachineFunction *this, unsigned int a2, llvm::MCContext *a3, int a4)
{
  uint64_t v7;
  size_t v8;
  const char *v9;
  char *v10;
  char *v11;
  unint64_t Symbol;
  _QWORD v14[2];
  uint64_t v15;
  unint64_t v16;
  char *v17;
  int v18;
  void *v19;
  __int128 v20;
  _QWORD v21[9];

  v21[8] = *MEMORY[0x1E0C80C00];
  v7 = *(int *)(*(_QWORD *)(*(_QWORD *)this + 40) + 300);
  if (a4)
  {
    v8 = (_DWORD)v7 == 2;
    if ((_DWORD)v7 == 2)
      v9 = "l";
    else
      v9 = (const char *)&unk_1C86AE2AB;
  }
  else
  {
    v9 = (const char *)*(&off_1E8144B60 + v7);
    v8 = qword_1C85FB240[v7];
  }
  v19 = v21;
  v20 = xmmword_1C85FB220;
  sub_1C613932C((uint64_t)v14, (uint64_t)&v19);
  v10 = v17;
  if (v8 <= v16 - (unint64_t)v17)
  {
    if (v8)
    {
      memcpy(v17, v9, v8);
      v10 = &v17[v8];
      v17 += v8;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v14, v9, v8);
    v10 = v17;
  }
  if (v16 - (unint64_t)v10 > 2)
  {
    v10[2] = 73;
    *(_WORD *)v10 = 21578;
    v17 += 3;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v14, "JTI", 3uLL);
  }
  sub_1C5E21910((llvm::raw_ostream *)v14, *((unsigned int *)this + 84), 0, 0, 0);
  v11 = v17;
  if ((unint64_t)v17 >= v16)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v14, 95);
  }
  else
  {
    ++v17;
    *v11 = 95;
  }
  sub_1C5E21910((llvm::raw_ostream *)v14, a2, 0, 0, 0);
  v14[0] = off_1E81A6E70;
  if (v18 == 1 && v15)
    MEMORY[0x1CAA32F9C](v15, 0x1000C8077774924);
  LOWORD(v17) = 261;
  v14[0] = v19;
  v14[1] = v20;
  Symbol = llvm::MCContext::getOrCreateSymbol((uint64_t)a3, (uint64_t)v14);
  if (v19 != v21)
    free(v19);
  return Symbol;
}

unint64_t llvm::MachineFunction::getPICBaseSymbol(llvm::MachineFunction *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];
  __int16 v7;
  _QWORD v8[4];
  __int16 v9;

  v1 = *(int *)(*(_QWORD *)(*(_QWORD *)this + 40) + 300);
  v2 = qword_1C85FB240[v1];
  v3 = *((_QWORD *)this + 3);
  v4 = *((unsigned int *)this + 84);
  v6[0] = *(&off_1E8144B60 + v1);
  v6[1] = v2;
  v6[2] = v4;
  v7 = 2053;
  v8[0] = v6;
  v8[2] = "$pb";
  v9 = 770;
  return llvm::MCContext::getOrCreateSymbol(v3, (uint64_t)v8);
}

llvm::MachineBasicBlock *llvm::MachineFunction::addLandingPad(llvm::MachineFunction *this, llvm::MachineBasicBlock *a2)
{
  uint64_t v4;
  llvm::MachineBasicBlock *TempSymbol;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  llvm::Value **v14;
  unsigned int v15;
  uint64_t v16;
  llvm::Value *v17;
  llvm::Value *v18;
  llvm::Value *v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  llvm::Value *v24;
  int v25;
  uint64_t v26;
  llvm::Value **v27;
  uint64_t v28;
  llvm::Value *v29;
  llvm::Value *v30;
  llvm::Value *v31;
  _WORD *v32;
  void *v34;
  uint64_t v35;
  _WORD v36[16];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 3);
  v34 = "tmp";
  v36[8] = 259;
  TempSymbol = (llvm::MachineBasicBlock *)llvm::MCContext::createTempSymbol(v4, (uint64_t)&v34, 1);
  llvm::MachineFunction::getOrCreateLandingPadInfo(this, a2)[11] = TempSymbol;
  v6 = *((_QWORD *)a2 + 2);
  v7 = v6 + 40;
  for (i = *(_QWORD *)(v6 + 48); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v7)
      return TempSymbol;
    v9 = i - 24;
    v10 = i ? i - 24 : 0;
    if (*(_BYTE *)(v10 + 16) != 83)
      break;
  }
  v11 = *(unsigned __int8 *)(i - 8);
  if (v11 == 80)
  {
    if ((*(_DWORD *)(i - 4) & 0x7FFFFFF) != 1)
    {
      v15 = (*(_DWORD *)(i - 4) & 0x7FFFFFF) - 2;
      do
      {
        v16 = v15;
        v17 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v9 - 32 * (*(_DWORD *)(i - 4) & 0x7FFFFFF) + 32 * v15));
        if (*((unsigned __int8 *)v17 + 16) >= 4u)
          v18 = 0;
        else
          v18 = v17;
        v34 = v18;
        llvm::MachineFunction::addCatchTypeInfo(this, a2, (uint64_t)&v34, 1);
        --v15;
      }
      while (v16);
    }
  }
  else if (v11 == 94)
  {
    v12 = *(_QWORD *)this;
    v13 = *(_DWORD *)(*(_QWORD *)this + 20);
    if ((v13 & 0x40000000) != 0)
      v14 = *(llvm::Value ***)(v12 - 8);
    else
      v14 = (llvm::Value **)(v12 - 32 * (v13 & 0x7FFFFFF));
    v19 = llvm::Value::stripPointerCasts(*v14);
    if (v19)
      v20 = *((_BYTE *)v19 + 16) == 0;
    else
      v20 = 0;
    if (v20)
      llvm::MachineModuleInfo::addPersonality(*((llvm::MachineModuleInfo **)this + 4), (const Function *)v19);
    if ((*(_WORD *)(i - 6) & 1) != 0)
      llvm::MachineFunction::addCleanup(this, a2);
    v21 = *(_DWORD *)(i - 4) & 0x7FFFFFF;
    while (v21)
    {
      --v21;
      v22 = *(_DWORD *)(i - 4);
      if ((v22 & 0x40000000) != 0)
        v23 = *(_QWORD *)(i - 32);
      else
        v23 = v9 - 32 * (v22 & 0x7FFFFFF);
      v24 = *(llvm::Value **)(v23 + 32 * v21);
      if (*(_BYTE *)(*(_QWORD *)v24 + 8) != 17)
      {
        v30 = llvm::Value::stripPointerCasts(v24);
        if (*((unsigned __int8 *)v30 + 16) >= 4u)
          v31 = 0;
        else
          v31 = v30;
        v34 = v31;
        llvm::MachineFunction::addCatchTypeInfo(this, a2, (uint64_t)&v34, 1);
        continue;
      }
      v34 = v36;
      v35 = 0x400000000;
      v25 = *((_DWORD *)v24 + 5);
      if ((v25 & 0x40000000) != 0)
      {
        v27 = (llvm::Value **)*((_QWORD *)v24 - 1);
        v26 = v25 & 0x7FFFFFF;
        if (v26)
        {
LABEL_35:
          v28 = 32 * v26;
          do
          {
            v29 = llvm::Value::stripPointerCasts(*v27);
            v26 = v35;
            if (v35 >= (unint64_t)HIDWORD(v35))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, (uint64_t)v36, v35 + 1, 8);
              v26 = v35;
            }
            *((_QWORD *)v34 + v26) = v29;
            LODWORD(v26) = v35 + 1;
            LODWORD(v35) = v35 + 1;
            v27 += 4;
            v28 -= 32;
          }
          while (v28);
          v32 = v34;
          goto LABEL_46;
        }
      }
      else
      {
        v26 = v25 & 0x7FFFFFF;
        v27 = (llvm::Value **)((char *)v24 - 32 * v26);
        if (v26)
          goto LABEL_35;
      }
      v32 = v36;
LABEL_46:
      llvm::MachineFunction::addFilterTypeInfo(this, a2, (uint64_t)v32, v26);
      if (v34 != v36)
        free(v34);
    }
  }
  return TempSymbol;
}

void llvm::MachineFunction::tidyLandingPads(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _DWORD **v36;
  _DWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned int v43;
  uint64_t v45;
  uint64_t v46;

  v3 = *(_QWORD *)(a1 + 512);
  if (*(_QWORD *)(a1 + 520) != v3)
  {
    v4 = a3;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (uint64_t *)(v3 + 120 * v6);
      v10 = v8 + 11;
      v9 = v8[11];
      if (v9)
      {
        v11 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
        if (!v11 && (*(_DWORD *)(v9 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v9 + 8) |= 4u;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v9 + 24));
          *(_QWORD *)v9 = *(_QWORD *)v9 & 7 | v11;
        }
        if (!v11 && (!a2 || !sub_1C617C470(a2, v10)[1]))
          *v10 = 0;
      }
      v12 = *v8;
      if (*v10)
        v13 = 1;
      else
        v13 = v12 == 0;
      if (v13)
      {
        if (!v4)
          goto LABEL_46;
        v14 = *(_QWORD *)(a1 + 512);
        v15 = *(_DWORD *)(v14 + 120 * v6 + 16);
        if (v15)
        {
          v43 = v7;
          v16 = 0;
          v17 = v3 + 120 * v6;
          v18 = v17 + 8;
          v19 = v17 + 32;
          do
          {
            v20 = *(_QWORD *)(*(_QWORD *)v18 + 8 * v16);
            v21 = *(_QWORD *)(*(_QWORD *)v19 + 8 * v16);
            v45 = v21;
            v46 = v20;
            v22 = *(_QWORD *)v20 & 0xFFFFFFFFFFFFFFF8;
            if (!v22 && (*(_DWORD *)(v20 + 8) & 0x1C00) == 0x800)
            {
              *(_DWORD *)(v20 + 8) |= 4u;
              llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v20 + 24));
              *(_QWORD *)v20 = *(_QWORD *)v20 & 7 | v22;
            }
            if (!v22 && (!a2 || !sub_1C617C470(a2, &v46)[1]))
              goto LABEL_24;
            v23 = *(_QWORD *)v21 & 0xFFFFFFFFFFFFFFF8;
            if (!v23 && (*(_DWORD *)(v21 + 8) & 0x1C00) == 0x800)
            {
              *(_DWORD *)(v21 + 8) |= 4u;
              llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v21 + 24));
              *(_QWORD *)v21 = *(_QWORD *)v21 & 7 | v23;
            }
            if (!v23 && (!a2 || !sub_1C617C470(a2, &v45)[1]))
            {
LABEL_24:
              v24 = *(_QWORD *)v18 + 8 * v16;
              v25 = *(unsigned int *)(v18 + 8);
              v26 = *(_QWORD *)v18 + 8 * v25;
              if (v26 != v24 + 8)
              {
                memmove((void *)v24, (const void *)(v24 + 8), v26 - (v24 + 8));
                LODWORD(v25) = *(_DWORD *)(v18 + 8);
              }
              *(_DWORD *)(v18 + 8) = v25 - 1;
              v27 = *(_QWORD *)v19 + 8 * v16;
              v28 = *(unsigned int *)(v19 + 8);
              v29 = *(_QWORD *)v19 + 8 * v28;
              if (v29 != v27 + 8)
              {
                memmove((void *)v27, (const void *)(v27 + 8), v29 - (v27 + 8));
                LODWORD(v28) = *(_DWORD *)(v19 + 8);
              }
              *(_DWORD *)(v19 + 8) = v28 - 1;
              --v16;
              --v15;
            }
            ++v16;
          }
          while (v16 != v15);
          v14 = *(_QWORD *)(a1 + 512);
          v4 = a3;
          v7 = v43;
          if (*(_DWORD *)(v14 + 120 * v6 + 16))
          {
            v12 = *v8;
LABEL_46:
            v36 = (_DWORD **)(v3 + 120 * v6 + 96);
            if (v12)
            {
              v37 = *v36;
              if (*(_QWORD *)(v3 + 120 * v6 + 104) - (_QWORD)*v36 == 4 && !*v37)
LABEL_58:
                *(_QWORD *)(v3 + 120 * v6 + 104) = v37;
              ++v7;
              v31 = *(_QWORD **)(a1 + 520);
              goto LABEL_60;
            }
            v37 = *v36;
            goto LABEL_58;
          }
        }
        v31 = (_QWORD *)(v14 + 120 * v6);
        v38 = *(_QWORD **)(a1 + 520);
        if (v31 + 15 != v38)
        {
          v39 = v14 + 120 * v6;
          v31 = (_QWORD *)v39;
          do
          {
            v40 = v39 + 120;
            v41 = sub_1C61EF45C((_QWORD *)v39, (__n128 *)(v39 + 120)) + 30;
            v31 += 15;
            v39 = v40;
          }
          while (v41 != v38);
          v38 = *(_QWORD **)(a1 + 520);
        }
        while (v38 != v31)
        {
          v38 -= 15;
          sub_1C61EEFF0(v38);
        }
      }
      else
      {
        v30 = *(_QWORD *)(a1 + 512);
        v31 = (_QWORD *)(v30 + 120 * v6);
        v32 = *(_QWORD **)(a1 + 520);
        if (v31 + 15 != v32)
        {
          v33 = v30 + 120 * v6;
          v31 = (_QWORD *)v33;
          do
          {
            v34 = v33 + 120;
            v35 = sub_1C61EF45C((_QWORD *)v33, (__n128 *)(v33 + 120)) + 30;
            v31 += 15;
            v33 = v34;
          }
          while (v35 != v32);
          v32 = *(_QWORD **)(a1 + 520);
        }
        while (v32 != v31)
        {
          v32 -= 15;
          sub_1C61EEFF0(v32);
        }
      }
      *(_QWORD *)(a1 + 520) = v31;
LABEL_60:
      v6 = v7;
      v3 = *(_QWORD *)(a1 + 512);
    }
    while (0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v31 - v3) >> 3) != v7);
  }
}

_DWORD *llvm::MachineFunction::addSEHCatchHandler(llvm::MachineFunction *this, llvm::MachineBasicBlock *a2, const llvm::Function *a3, const llvm::BlockAddress *a4)
{
  _DWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = llvm::MachineFunction::getOrCreateLandingPadInfo(this, a2);
  v7 = (uint64_t)result;
  v8 = result[16];
  if (v8 >= result[17])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(result + 14), (uint64_t)(result + 18), v8 + 1, 16);
    LODWORD(v8) = *(_DWORD *)(v7 + 64);
  }
  v9 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v8);
  *v9 = a3;
  v9[1] = a4;
  ++*(_DWORD *)(v7 + 64);
  return result;
}

_DWORD *llvm::MachineFunction::addSEHCleanupHandler(llvm::MachineFunction *this, llvm::MachineBasicBlock *a2, const llvm::Function *a3)
{
  _DWORD *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  result = llvm::MachineFunction::getOrCreateLandingPadInfo(this, a2);
  v5 = (uint64_t)result;
  v6 = result[16];
  if (v6 >= result[17])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(result + 14), (uint64_t)(result + 18), v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(v5 + 64);
  }
  v7 = (_QWORD *)(*(_QWORD *)(v5 + 56) + 16 * v6);
  *v7 = a3;
  v7[1] = 0;
  ++*(_DWORD *)(v5 + 64);
  return result;
}

void sub_1C515E708(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;

  v2 = *(_BYTE **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 2)
  {
    if (a2 >> 62)
      abort();
    v5 = *(_BYTE **)(a1 + 8);
    v6 = (char *)operator new(4 * a2);
    v7 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFFCLL];
    v8 = v7;
    if (v5 != v2)
    {
      v8 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
        v9 = *((_DWORD *)v5 - 1);
        v5 -= 4;
        *((_DWORD *)v8 - 1) = v9;
        v8 -= 4;
      }
      while (v5 != v2);
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v6[4 * a2];
    if (v2)
      operator delete(v2);
  }
}

unint64_t sub_1C515E7A8(unint64_t result)
{
  __int16 v1;
  unint64_t v2;
  uint64_t i;
  unsigned __int16 *v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;

  if (**(_WORD **)(result + 16) == 20)
  {
    v1 = *(_WORD *)(result + 44);
    v2 = result;
    if ((v1 & 4) != 0)
    {
      v2 = result;
      do
        v2 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v2 + 44) & 4) != 0);
    }
    if ((v1 & 8) != 0)
    {
      do
        result = *(_QWORD *)(result + 8);
      while ((*(_WORD *)(result + 44) & 8) != 0);
    }
    for (i = *(_QWORD *)(result + 8); v2 != i; v2 = *(_QWORD *)(result + 8))
    {
      result = v2;
      v4 = *(unsigned __int16 **)(v2 + 16);
      if ((v4[4] & 0x80) != 0)
      {
        v5 = *v4;
        v6 = v5 > 0x1F;
        v7 = (1 << v5) & 0x8E000000;
        if (v6 || v7 == 0)
          break;
      }
    }
  }
  return result;
}

uint64_t llvm::MachineFunction::setDebugInstrNumberingCount(uint64_t this, int a2)
{
  *(_DWORD *)(this + 912) = a2;
  return this;
}

unint64_t llvm::MachineFunction::substituteDebugValuesForInst(unint64_t this, const llvm::MachineInstr *a2, llvm::MachineInstr *a3, unsigned int a4)
{
  uint64_t v4;
  unsigned int v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  int v18;

  v4 = *((unsigned int *)a2 + 16);
  if ((_DWORD)v4)
  {
    v6 = *((_DWORD *)a2 + 10);
    if (v6 >= a4)
      v6 = a4;
    if (v6)
    {
      v8 = this;
      v9 = 0;
      v10 = 0;
      v16 = this + 920;
      v11 = 32 * v6;
      do
      {
        if ((*(_DWORD *)(*((_QWORD *)a2 + 4) + v10) & 0x10000FF) == 0x1000000)
        {
          v12 = *((_DWORD *)a3 + 16);
          if (!v12)
          {
            v13 = *(_QWORD *)(*((_QWORD *)a3 + 3) + 32);
            v12 = *(_DWORD *)(v13 + 912) + 1;
            *(_DWORD *)(v13 + 912) = v12;
            *((_DWORD *)a3 + 16) = v12;
          }
          v17[0] = v4 + v9;
          v17[1] = v9 + v12;
          v18 = 0;
          this = sub_1C5160200(v16, (unint64_t)v17, 1);
          v14 = *(_QWORD *)(v8 + 920) + 20 * *(unsigned int *)(v8 + 928);
          v15 = *(_OWORD *)this;
          *(_DWORD *)(v14 + 16) = *(_DWORD *)(this + 16);
          *(_OWORD *)v14 = v15;
          ++*(_DWORD *)(v8 + 928);
        }
        v10 += 32;
        v9 += 0x100000000;
      }
      while (v11 != v10);
    }
  }
  return this;
}

unsigned __int8 *llvm::MachineFunction::salvageCopySSA(llvm::MachineFunction *this, llvm::MachineInstr *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v20;
  uint64_t v21;
  int *v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  llvm::MachineFunction *v36;
  llvm::MachineInstr *v37;
  llvm::MachineInstr *v38;
  uint64_t v39;
  char *v40;
  unsigned int v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  char *v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  unsigned __int8 *v74;
  _QWORD *v75;
  unsigned __int8 *v76;
  unint64_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  _QWORD v82[3];

  v82[2] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)*((_QWORD *)this + 5);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v4 + 16) + 176))(*(_QWORD *)(*v4 + 16));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  v7 = v6;
  v8 = **((unsigned __int16 **)a2 + 2);
  if (v8 == 11)
  {
    v12 = *((_QWORD *)a2 + 4);
    v10 = (int *)(v12 + 68);
    v13 = *(_DWORD *)(v12 + 112);
  }
  else
  {
    if (v8 == 19)
    {
      v9 = *((_QWORD *)a2 + 4);
      v10 = (int *)(v9 + 36);
      v11 = *(_DWORD *)(v9 + 32);
    }
    else
    {
      (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, llvm::MachineInstr *))(*(_QWORD *)v6 + 416))(&v76, v6, a2);
      v10 = (int *)(v77 + 4);
      v11 = *(_DWORD *)v77;
    }
    v13 = (v11 >> 8) & 0xFFF;
  }
  v14 = *v10;
  v80 = v82;
  v81 = 0x400000000;
  if (v14 < 0)
  {
    while (1)
    {
      if (v13)
      {
        v15 = v81;
        if (v81 >= (unint64_t)HIDWORD(v81))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, (uint64_t)v82, v81 + 1, 4);
          v15 = v81;
        }
        *((_DWORD *)v80 + v15) = v13;
        LODWORD(v81) = v81 + 1;
      }
      v16 = v14 & 0x7FFFFFFF;
      v17 = *(_QWORD *)(v4[3] + 16 * v16 + 8);
      if ((*(_BYTE *)(v17 + 3) & 1) == 0)
      {
        v17 = *(_QWORD *)(v17 + 24);
        if ((*(_BYTE *)(v17 + 3) & 1) == 0)
          v17 = 0;
      }
      a2 = *(llvm::MachineInstr **)(v17 + 8);
      v18 = **((unsigned __int16 **)a2 + 2);
      if (v18 != 11 && v18 != 19)
      {
        (*(void (**)(unsigned __int8 **__return_ptr, unint64_t, llvm::MachineInstr *))(*(_QWORD *)v7 + 416))(&v76, v7, a2);
        if (!(_BYTE)v78)
          break;
      }
      v20 = **((unsigned __int16 **)a2 + 2);
      if (v20 == 11)
      {
        v24 = *((_QWORD *)a2 + 4);
        v22 = (int *)(v24 + 68);
        v13 = *(_DWORD *)(v24 + 112);
      }
      else
      {
        if (v20 == 19)
        {
          v21 = *((_QWORD *)a2 + 4);
          v22 = (int *)(v21 + 36);
          v23 = *(_DWORD *)(v21 + 32);
        }
        else
        {
          (*(void (**)(unsigned __int8 **__return_ptr, unint64_t, llvm::MachineInstr *))(*(_QWORD *)v7 + 416))(&v76, v7, a2);
          v22 = (int *)(v77 + 4);
          v23 = *(_DWORD *)v77;
        }
        v13 = (v23 >> 8) & 0xFFF;
      }
      v14 = *v22;
      if ((*v22 & 0x80000000) == 0)
        goto LABEL_27;
    }
    v56 = *(_QWORD *)(v4[3] + 16 * v16 + 8);
    if ((*(_BYTE *)(v56 + 3) & 1) == 0)
    {
      v56 = *(_QWORD *)(v56 + 24);
      if ((*(_BYTE *)(v56 + 3) & 1) == 0)
        v56 = 0;
    }
    v57 = *(_QWORD *)(v56 + 8);
    v58 = *(unsigned int *)(v57 + 40);
    if ((_DWORD)v58)
    {
      v59 = 0;
      v60 = 32 * v58;
      v61 = (_DWORD *)(*(_QWORD *)(v57 + 32) + 4);
      while ((*(v61 - 1) & 0x10000FF) != 0x1000000 || *v61 != v14)
      {
        v59 += 0x100000000;
        v61 += 8;
        v60 -= 32;
        if (!v60)
          goto LABEL_63;
      }
      v62 = *(_DWORD *)(v57 + 64);
      if (!v62)
      {
        v63 = *(_QWORD *)(*(_QWORD *)(v57 + 24) + 32);
        v62 = *(_DWORD *)(v63 + 912) + 1;
        *(_DWORD *)(v63 + 912) = v62;
        *(_DWORD *)(v57 + 64) = v62;
      }
      v64 = v59 | v62;
      if ((_DWORD)v81)
      {
        v65 = 4 * v81;
        v66 = (char *)v80 - 4;
        v67 = v59;
        do
        {
          v68 = *(_DWORD *)&v66[v65];
          v69 = (*((_DWORD *)this + 228) + 1);
          *((_DWORD *)this + 228) = v69;
          v76 = (unsigned __int8 *)v69;
          v77 = v67 | v64;
          LODWORD(v78) = v68;
          v70 = sub_1C5160200((uint64_t)this + 920, (unint64_t)&v76, 1);
          v67 = 0;
          v59 = 0;
          v71 = *((_QWORD *)this + 115) + 20 * *((unsigned int *)this + 232);
          v72 = *(_OWORD *)v70;
          *(_DWORD *)(v71 + 16) = *(_DWORD *)(v70 + 16);
          *(_OWORD *)v71 = v72;
          ++*((_DWORD *)this + 232);
          v64 = v69;
          v65 -= 4;
        }
        while (v65);
      }
      else
      {
        v69 = v59 | v62;
      }
      v7 = v59 | v69;
    }
  }
  else
  {
LABEL_27:
    v25 = **((unsigned __int16 **)a2 + 2);
    v74 = (unsigned __int8 *)v7;
    if (v25 == 11)
    {
      v26 = (unsigned int *)(*((_QWORD *)a2 + 4) + 68);
    }
    else if (v25 == 19)
    {
      v26 = (unsigned int *)(*((_QWORD *)a2 + 4) + 36);
    }
    else
    {
      (*(void (**)(unsigned __int8 **__return_ptr, unint64_t, llvm::MachineInstr *))(*(_QWORD *)v7 + 416))(&v76, v7, a2);
      v26 = (unsigned int *)(v77 + 4);
    }
    v27 = *v26;
    v73 = *((_QWORD *)a2 + 3);
    v28 = (unint64_t *)(v73 + 48);
    if (a2 == (llvm::MachineInstr *)(v73 + 48))
    {
LABEL_43:
      v34 = *(_QWORD *)(v73 + 56);
      if ((unint64_t *)v34 == v28)
      {
        v35 = v74;
      }
      else
      {
        v35 = v74;
        while (!**(_WORD **)(v34 + 16) || **(_WORD **)(v34 + 16) == 69)
        {
          v34 = *(_QWORD *)(v34 + 8);
          if ((unint64_t *)v34 == v28)
            goto LABEL_50;
        }
        v28 = (unint64_t *)v34;
      }
LABEL_50:
      v76 = 0;
      v36 = sub_1C477A100(v73, v28, &v76, *((_QWORD *)v35 + 1) + 768);
      v38 = v37;
      if (v76)
        llvm::MetadataTracking::untrack((uint64_t)&v76, v76);
      v77 = 0;
      v78 = 0;
      LODWORD(v76) = 0;
      HIDWORD(v76) = v27;
      v79 = 0;
      llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v76);
      v7 = (*((_DWORD *)this + 228) + 1);
      *((_DWORD *)this + 228) = v7;
      LODWORD(v76) = 1;
      v77 = 0;
      v78 = (unsigned __int8 *)v7;
      llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v76);
      if ((_DWORD)v81)
      {
        v39 = 4 * v81;
        v40 = (char *)v80 - 4;
        v41 = v7;
        do
        {
          v42 = *(_DWORD *)&v40[v39];
          v7 = (*((_DWORD *)this + 228) + 1);
          *((_DWORD *)this + 228) = v7;
          v76 = (unsigned __int8 *)v7;
          v77 = v41;
          LODWORD(v78) = v42;
          v43 = sub_1C5160200((uint64_t)this + 920, (unint64_t)&v76, 1);
          v44 = *((_QWORD *)this + 115) + 20 * *((unsigned int *)this + 232);
          v45 = *(_OWORD *)v43;
          *(_DWORD *)(v44 + 16) = *(_DWORD *)(v43 + 16);
          *(_OWORD *)v44 = v45;
          ++*((_DWORD *)this + 232);
          v41 = v7;
          v39 -= 4;
        }
        while (v39);
      }
    }
    else
    {
      v75 = (_QWORD *)(v5 + 8);
      while (1)
      {
        v29 = *((unsigned int *)a2 + 10);
        if ((_DWORD)v29)
          break;
LABEL_42:
        a2 = (llvm::MachineInstr *)(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8);
        v28 = (unint64_t *)(v73 + 48);
        if ((llvm::MachineInstr *)(v73 + 48) == a2)
          goto LABEL_43;
      }
      v30 = 0;
      v31 = 32 * v29;
      v32 = (unsigned int *)(*((_QWORD *)a2 + 4) + 4);
      while (1)
      {
        if ((*(v32 - 1) & 0x10000FF) == 0x1000000)
        {
          v33 = *v32;
          if (*v32 == v27
            || v27 - 1 <= 0x3FFFFFFE && v33 - 1 <= 0x3FFFFFFE && llvm::MCRegisterInfo::regsOverlap(v75, v27, v33))
          {
            break;
          }
        }
        v30 += 0x100000000;
        v32 += 8;
        v31 -= 32;
        if (!v31)
          goto LABEL_42;
      }
      v46 = *((_DWORD *)a2 + 16);
      if (!v46)
      {
        v47 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
        v46 = *(_DWORD *)(v47 + 912) + 1;
        *(_DWORD *)(v47 + 912) = v46;
        *((_DWORD *)a2 + 16) = v46;
      }
      if ((_DWORD)v81)
      {
        v48 = v46 | v30;
        v49 = 4 * v81;
        v50 = (char *)v80 - 4;
        do
        {
          v51 = *(_DWORD *)&v50[v49];
          v7 = (*((_DWORD *)this + 228) + 1);
          *((_DWORD *)this + 228) = v7;
          v76 = (unsigned __int8 *)v7;
          v77 = v30 | v48;
          LODWORD(v78) = v51;
          v52 = sub_1C5160200((uint64_t)this + 920, (unint64_t)&v76, 1);
          v30 = 0;
          v53 = *((_QWORD *)this + 115) + 20 * *((unsigned int *)this + 232);
          v54 = *(_OWORD *)v52;
          *(_DWORD *)(v53 + 16) = *(_DWORD *)(v52 + 16);
          *(_OWORD *)v53 = v54;
          ++*((_DWORD *)this + 232);
          v48 = v7;
          v49 -= 4;
        }
        while (v49);
      }
      else
      {
        v7 = v30 | v46;
      }
    }
  }
LABEL_63:
  if (v80 != v82)
    free(v80);
  return (unsigned __int8 *)v7;
}

uint64_t llvm::MachineFunction::finalizeDebugInstrRefs(llvm::MachineFunction *this)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  v3 = (_QWORD *)*((_QWORD *)this + 41);
  if (v3 != (_QWORD *)((char *)this + 320))
  {
    v4 = (_QWORD *)result;
    do
    {
      for (i = v3[7]; (_QWORD *)i != v3 + 6; i = *(_QWORD *)(i + 8))
      {
        if (**(_WORD **)(i + 16) == 15)
        {
          result = *(_QWORD *)(i + 32);
          if (!*(_BYTE *)result)
          {
            v6 = *(unsigned int *)(result + 4);
            if ((_DWORD)v6
              && ((v7 = *((_QWORD *)this + 5), (v6 & 0x80000000) != 0)
                ? (v8 = (uint64_t *)(*(_QWORD *)(v7 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8))
                : (v8 = (uint64_t *)(*(_QWORD *)(v7 + 272) + 8 * v6)),
                  (v9 = *v8) != 0
               && ((*(_BYTE *)(v9 + 3) & 1) != 0 || (v9 = *(_QWORD *)(v9 + 24)) != 0 && (*(_BYTE *)(v9 + 3) & 1) != 0)
               && ((v10 = *(_QWORD *)(v9 + 24)) == 0 || (*(_BYTE *)(v10 + 3) & 1) == 0)))
            {
              if ((v6 & 0x80000000) != 0)
                v11 = (uint64_t *)(*(_QWORD *)(v7 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
              else
                v11 = (uint64_t *)(*(_QWORD *)(v7 + 272) + 8 * v6);
              v12 = *v11;
              if ((*(_BYTE *)(v12 + 3) & 1) == 0)
              {
                v12 = *(_QWORD *)(v12 + 24);
                if ((*(_BYTE *)(v12 + 3) & 1) == 0)
                  v12 = 0;
              }
              v13 = *(_QWORD *)(v12 + 8);
              v14 = **(unsigned __int16 **)(v13 + 16);
              v15 = v14 == 11 || v14 == 19;
              if (v15
                || ((*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*v4 + 416))(&v24, v4, v13), v25))
              {
                v16 = llvm::MachineFunction::salvageCopySSA(this, (llvm::MachineInstr *)v13);
                v17 = (unint64_t)v16 >> 32;
                result = (uint64_t)llvm::MachineOperand::ChangeToImmediate(*(unsigned int **)(i + 32), v16, 0);
                *(_QWORD *)(*(_QWORD *)(i + 32) + 48) = v17;
              }
              else
              {
                v18 = *(unsigned int *)(v13 + 40);
                if ((_DWORD)v18)
                {
                  v19 = 0;
                  v20 = 32 * v18;
                  v21 = (_DWORD *)(*(_QWORD *)(v13 + 32) + 4);
                  while ((*(v21 - 1) & 0x10000FF) != 0x1000000 || *v21 != (_DWORD)v6)
                  {
                    ++v19;
                    v21 += 8;
                    v20 -= 32;
                    if (!v20)
                    {
                      v19 = *(unsigned int *)(v13 + 40);
                      break;
                    }
                  }
                }
                else
                {
                  v19 = 0;
                }
                v22 = *(_DWORD *)(v13 + 64);
                if (!v22)
                {
                  v23 = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 32);
                  v22 = *(_DWORD *)(v23 + 912) + 1;
                  *(_DWORD *)(v23 + 912) = v22;
                  *(_DWORD *)(v13 + 64) = v22;
                }
                result = (uint64_t)llvm::MachineOperand::ChangeToImmediate(*(unsigned int **)(i + 32), v22, 0);
                *(_QWORD *)(*(_QWORD *)(i + 32) + 48) = v19;
              }
            }
            else
            {
              *(_QWORD *)(i + 16) = v4[1] + 624;
              llvm::MachineOperand::setReg(result, 0);
              result = llvm::MachineOperand::ChangeToRegister(*(_QWORD *)(i + 32) + 32, 0, 0, 0, 0, 0, 0, 0);
            }
          }
        }
        if ((*(_BYTE *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
      }
      v3 = (_QWORD *)v3[1];
    }
    while (v3 != (_QWORD *)((char *)this + 320));
  }
  return result;
}

BOOL llvm::MachineFunction::useDebugInstrRef(llvm::MachineFunction *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!*(_DWORD *)(v1 + 552))
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)this + 112);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 17) & 8) != 0)
      return 0;
  }
  return *(_DWORD *)(v1 + 472) == 42 && dword_1ED830560 != 2 || dword_1ED830560 == 1;
}

uint64_t llvm::MachineJumpTableInfo::createJumpTableIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  void *__p;
  char *v13;
  char *v14;

  __p = 0;
  v13 = 0;
  v14 = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 == *(_QWORD *)a2)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - *(_QWORD *)a2);
    v7 = &v6[8 * (v5 >> 3)];
    __p = v6;
    v14 = v7;
    memmove(v6, v4, v5);
    v13 = v7;
  }
  v8 = *(_QWORD **)(a1 + 16);
  if ((unint64_t)v8 >= *(_QWORD *)(a1 + 24))
  {
    v9 = sub_1C5160278((char **)(a1 + 8), (uint64_t)&__p);
    v10 = (char *)__p;
    *(_QWORD *)(a1 + 16) = v9;
    if (v10)
    {
      v13 = v10;
      operator delete(v10);
      v9 = *(char **)(a1 + 16);
    }
  }
  else
  {
    *v8 = v6;
    v8[1] = v7;
    v8[2] = v7;
    v9 = (char *)(v8 + 3);
    *(_QWORD *)(a1 + 16) = v8 + 3;
  }
  return -1431655765 * ((unint64_t)&v9[-*(_QWORD *)(a1 + 8)] >> 3) - 1;
}

uint64_t llvm::MachineJumpTableInfo::ReplaceMBBInJumpTable(llvm::MachineJumpTableInfo *this, unsigned int a2, llvm::MachineBasicBlock *a3, llvm::MachineBasicBlock *a4)
{
  uint64_t v4;
  llvm::MachineBasicBlock **v5;
  llvm::MachineBasicBlock **v6;
  char v7;

  v4 = *((_QWORD *)this + 1) + 24 * a2;
  v5 = *(llvm::MachineBasicBlock ***)v4;
  v6 = *(llvm::MachineBasicBlock ***)(v4 + 8);
  if (v5 == v6)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      if (*v5 == a3)
      {
        *v5 = a4;
        v7 = 1;
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return v7 & 1;
}

uint64_t llvm::printJumpTableEntryReference@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 24) = a2;
  *(_QWORD *)a2 = &off_1E8144AD0;
  *(_DWORD *)(a2 + 8) = this;
  return this;
}

uint64_t llvm::MachineConstantPoolValue::getSizeInBytes(llvm::MachineConstantPoolValue *this, const llvm::DataLayout *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  BOOL v7;
  char v8;
  const char *v9;
  char v11;

  v3 = *((_QWORD *)this + 1);
  sub_1C4768AD0((uint64_t)a2, v3);
  v5 = (unint64_t)(v4 + 7) >> 3;
  v7 = v6 == 1;
  llvm::DataLayout::getAlignment((uint64_t)a2, v3);
  if (v7)
  {
    v11 = v8;
    v8 = v11;
  }
  return ((1 << v8) + v5 - 1) & -(1 << v8);
}

BOOL llvm::MachineConstantPoolEntry::needsRelocation(llvm::MachineConstantPoolEntry *this)
{
  return *((_BYTE *)this + 9) || llvm::Constant::getRelocationInfo(*(llvm::Constant **)this) == 2;
}

void llvm::MachineConstantPool::~MachineConstantPool(llvm::MachineConstantPool *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t *v15;
  void *v16;
  _QWORD v17[2];
  int v18;
  char v19[31];

  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 1);
  v3 = (uint64_t *)*((_QWORD *)this + 2);
  while (v2 != v3)
  {
    if (*((_BYTE *)v2 + 9))
    {
      sub_1C61EF798((uint64_t)v17, v2, (uint64_t)v19);
      if (*v2)
        (*(void (**)(uint64_t))(*(_QWORD *)*v2 + 16))(*v2);
    }
    v2 += 2;
  }
  v4 = *((_QWORD *)this + 4);
  v5 = *((unsigned int *)this + 12);
  v6 = (uint64_t *)(v4 + 8 * v5);
  if (*((_DWORD *)this + 10))
  {
    if ((_DWORD)v5)
    {
      v7 = 8 * v5;
      v8 = (uint64_t *)*((_QWORD *)this + 4);
      while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v8;
        v7 -= 8;
        if (!v7)
          goto LABEL_12;
      }
    }
    else
    {
      v8 = (uint64_t *)*((_QWORD *)this + 4);
    }
  }
  else
  {
LABEL_12:
    v8 = (uint64_t *)(v4 + 8 * v5);
  }
  v9 = (uint64_t *)(v4 + 8 * v5);
LABEL_15:
  while (v8 != v9)
  {
    v10 = *v8;
    if (!v18)
      goto LABEL_22;
    v11 = ((v10 >> 4) ^ (v10 >> 9)) & (v18 - 1);
    v12 = *(_QWORD *)(v17[0] + 8 * v11);
    if (v10 != v12)
    {
      v13 = 1;
      while (v12 != -4096)
      {
        v14 = v11 + v13++;
        v11 = v14 & (v18 - 1);
        v12 = *(_QWORD *)(v17[0] + 8 * v11);
        if (v10 == v12)
          goto LABEL_24;
      }
LABEL_22:
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    }
LABEL_24:
    v15 = v8 + 1;
    v8 = v6;
    if (v15 != v6)
    {
      v8 = v15;
      while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v8 == v6)
        {
          v8 = v6;
          goto LABEL_15;
        }
      }
    }
  }
  MEMORY[0x1CAA32FB4](v17[0], 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 4), 8);
  v16 = (void *)*((_QWORD *)this + 1);
  if (v16)
  {
    *((_QWORD *)this + 2) = v16;
    operator delete(v16);
  }
}

uint64_t llvm::MachineConstantPool::getConstantPoolIndex(unsigned __int8 *a1, uint64_t *a2, unsigned __int8 a3)
{
  uint64_t **v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  llvm::Type *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  const llvm::DataLayout *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  int v24;
  unint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  unint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v43;
  _DWORD *v44;
  unsigned int v45;
  int v46;

  if (a3 > *a1)
    *a1 = a3;
  v6 = (uint64_t **)*((_QWORD *)a1 + 2);
  v7 = (unint64_t)v6 - *((_QWORD *)a1 + 1);
  if ((v7 & 0xFFFFFFFF0) == 0)
  {
LABEL_46:
    v31 = *((_QWORD *)a1 + 3);
    if ((unint64_t)v6 >= v31)
    {
      v33 = (char *)*((_QWORD *)a1 + 1);
      v34 = ((char *)v6 - v33) >> 4;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 60)
        abort();
      v36 = v31 - (_QWORD)v33;
      if (v36 >> 3 > v35)
        v35 = v36 >> 3;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
        v37 = 0xFFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
      {
        if (v37 >> 60)
          sub_1C4764EE4();
        v38 = (char *)operator new(16 * v37);
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[16 * v34];
      *(_QWORD *)v39 = a2;
      v39[8] = a3;
      v39[9] = 0;
      v32 = v39 + 16;
      if (v6 != (uint64_t **)v33)
      {
        do
        {
          v40 = (uint64_t)*(v6 - 2);
          v6 -= 2;
          v41 = *((_WORD *)v6 + 4);
          *((_QWORD *)v39 - 2) = v40;
          v39 -= 16;
          *((_WORD *)v39 + 4) = v41;
        }
        while (v6 != (uint64_t **)v33);
        v6 = (uint64_t **)*((_QWORD *)a1 + 1);
      }
      *((_QWORD *)a1 + 1) = v39;
      *((_QWORD *)a1 + 2) = v32;
      *((_QWORD *)a1 + 3) = &v38[16 * v37];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *v6 = a2;
      *((_BYTE *)v6 + 8) = a3;
      v32 = v6 + 2;
      *((_BYTE *)v6 + 9) = 0;
    }
    *((_QWORD *)a1 + 2) = v32;
    return (((unint64_t)v32 - *((_QWORD *)a1 + 1)) >> 4) - 1;
  }
  v45 = a3;
  v8 = 0;
  v9 = 0;
  v10 = (v7 >> 4);
  while (1)
  {
    v11 = *((_QWORD *)a1 + 1);
    if (!*(_BYTE *)(v11 + v8 + 9))
    {
      v12 = *(uint64_t **)(v11 + v8);
      if (v12 == a2)
        goto LABEL_65;
      v13 = (_QWORD *)*v12;
      if (*v12 != *a2 && (v13[1] & 0xFE) != 0x10 && (*(_DWORD *)(*a2 + 8) & 0xFE) != 0x10)
      {
        v14 = (llvm::Type *)*((_QWORD *)a1 + 7);
        sub_1C4768AD0((uint64_t)v14, (uint64_t)v13);
        v17 = v16;
        if ((_DWORD)v15 == 1)
        sub_1C4768AD0((uint64_t)v14, *a2);
        v21 = v20;
        if ((_DWORD)v18 == 1)
        if ((unint64_t)(v17 + 7) <= 0x407
          && (unint64_t)(v17 + 7) >> 3 == (unint64_t)(v21 + 7) >> 3)
        {
          break;
        }
      }
    }
LABEL_6:
    ++v9;
    v8 += 16;
    if (v10 == v9)
    {
      v6 = (uint64_t **)*((_QWORD *)a1 + 2);
      goto LABEL_46;
    }
  }
  v23 = *(_QWORD **)*v12;
  v24 = (v17 + 7) & 0xFFFFFFF8;
  v46 = v24;
  if (v24 <= 63)
  {
    switch(v24)
    {
      case 32:
        v25 = *v23 + 1960;
        goto LABEL_28;
      case 16:
        v25 = *v23 + 1936;
        goto LABEL_28;
      case 8:
        v25 = *v23 + 1912;
        goto LABEL_28;
    }
  }
  else
  {
    if (v24 == 64)
    {
      v25 = *v23 + 1984;
      goto LABEL_28;
    }
    if (v24 == 128)
    {
      v25 = *v23 + 2008;
      goto LABEL_28;
    }
  }
  v29 = sub_1C5270984(*v23 + 2168, &v46);
  v25 = *((_QWORD *)v29 + 1);
  if (!v25)
  {
    v44 = v29;
    v25 = sub_1C484358C(*v23 + 2040, 24, 3);
    v30 = v46;
    *(_QWORD *)v25 = v23;
    *(_QWORD *)(v25 + 16) = 0;
    *(_DWORD *)(v25 + 8) = (v30 << 8) | 0xD;
    *(_DWORD *)(v25 + 12) = 0;
    *((_QWORD *)v44 + 1) = v25;
  }
LABEL_28:
  if (*(_BYTE *)(*v12 + 8) == 15)
  {
    v26 = 47;
  }
  else
  {
    if (*v12 == v25)
      goto LABEL_33;
    v26 = 49;
  }
  v12 = (uint64_t *)llvm::ConstantFoldCastOperand(v26, v12, (llvm::Constant *)v25, v14, v19);
LABEL_33:
  if (*(_BYTE *)(*a2 + 8) == 15)
  {
    v27 = 47;
  }
  else
  {
    v28 = (uint64_t)a2;
    if (*a2 == v25)
      goto LABEL_38;
    v27 = 49;
  }
  v28 = llvm::ConstantFoldCastOperand(v27, a2, (llvm::Constant *)v25, v14, v19);
LABEL_38:
  if (v12 != (uint64_t *)v28)
    goto LABEL_6;
  v11 = *((_QWORD *)a1 + 1);
LABEL_65:
  v43 = v11 + v8;
  if (v45 > *(unsigned __int8 *)(v43 + 8))
    *(_BYTE *)(v43 + 8) = a3;
  return v9;
}

void sub_1C515FA1C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, a2, 8);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2)
        bzero((void *)(*(_QWORD *)a1 + 8 * v2), 8 * (a2 - v2));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

_QWORD *sub_1C515FA90(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61EF184(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = -4096;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C515FB54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 176))
  {
    sub_1C4E43068(a1 + 152);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 152), 8);
    *(_BYTE *)(a1 + 176) = 0;
  }
  v2 = *(unsigned int *)(a1 + 144);
  v3 = *(_QWORD *)(a1 + 128);
  if ((_DWORD)v2)
  {
    v4 = (uint64_t *)(v3 + 40);
    v5 = 48 * v2;
    do
    {
      v6 = *(v4 - 2);
      if ((v6 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v7 = *v4;
        *v4 = 0;
        if (v7)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
          v6 = *(v4 - 2);
        }
      }
      if (v6 != -4096 && v6 != -8192 && v6 != 0)
        llvm::ValueHandleBase::RemoveFromUseList(v4 - 4);
      v4 += 6;
      v5 -= 48;
    }
    while (v5);
    v3 = *(_QWORD *)(a1 + 128);
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  if (*(_DWORD *)(a1 + 108))
  {
    v10 = *(unsigned int *)(a1 + 104);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = 8 * v10;
      do
      {
        v13 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + v11);
        if (v13 != -8 && v13 != 0)
        {
          v15 = *(_QWORD *)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
          MEMORY[0x1CAA32FB4](v13, 8);
        }
        v11 += 8;
      }
      while (v12 != v11);
    }
  }
  free(*(void **)(a1 + 96));
  sub_1C515FC90(*(_QWORD **)(a1 + 80));
  return a1;
}

void sub_1C515FC90(_QWORD *a1)
{
  uint64_t v2;

  if (a1)
  {
    sub_1C515FC90(*a1);
    sub_1C515FC90(a1[1]);
    v2 = a1[5];
    a1[5] = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    operator delete(a1);
  }
}

void sub_1C515FCE0(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v6 = *(v4 - 6);
        if (v6)
        {
          *(v4 - 5) = v6;
          operator delete(v6);
        }
        v4 -= 10;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C515FD68(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x333333333333333)
    abort();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v3)
    v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v3;
  v19 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x333333333333333)
      sub_1C4764EE4();
    v7 = (char *)operator new(80 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[80 * v2];
  __p = v7;
  v16 = v8;
  v18 = &v7[80 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 12) = *(_OWORD *)(a2 + 12);
  *((_QWORD *)v8 + 5) = 0;
  *((_QWORD *)v8 + 6) = 0;
  *((_QWORD *)v8 + 4) = 0;
  sub_1C515FEEC((_QWORD *)v8 + 4, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32));
  v9 = v8 + 56;
  if (*(char *)(a2 + 79) < 0)
  {
    sub_1C47EBC30(v9, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)(a2 + 56);
    *((_QWORD *)v8 + 9) = *(_QWORD *)(a2 + 72);
  }
  v17 = v8 + 80;
  sub_1C515FF68(a1, &__p);
  v10 = a1[1];
  v11 = v16;
  while (1)
  {
    v12 = v17;
    if (v17 == v11)
      break;
    v17 -= 80;
    if (*(v12 - 1) < 0)
      operator delete(*((void **)v12 - 3));
    v13 = (void *)*((_QWORD *)v12 - 6);
    if (v13)
    {
      *((_QWORD *)v12 - 5) = v13;
      operator delete(v13);
    }
  }
  if (__p)
    operator delete(__p);
  return v10;
}

_QWORD *sub_1C515FEEC(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v7;
  char *v8;
  size_t v9;

  if (__sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      abort();
    v7 = result;
    result = operator new(__sz);
    v8 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + __sz;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = &v8[v9];
  }
  return result;
}

uint64_t *sub_1C515FF68(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 80;
      v6 = *(_OWORD *)(v3 - 80);
      *(_OWORD *)(v4 - 68) = *(_OWORD *)(v3 - 68);
      *(_OWORD *)(v4 - 80) = v6;
      *(_QWORD *)(v4 - 40) = 0;
      *(_QWORD *)(v4 - 32) = 0;
      *(_QWORD *)(v4 - 48) = 0;
      *(_OWORD *)(v4 - 48) = *(_OWORD *)(v3 - 48);
      *(_QWORD *)(v4 - 32) = *(_QWORD *)(v3 - 32);
      *(_QWORD *)(v3 - 48) = 0;
      *(_QWORD *)(v3 - 40) = 0;
      *(_QWORD *)(v3 - 32) = 0;
      v7 = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v7;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      *(_QWORD *)(v3 - 24) = 0;
      v3 -= 80;
      v4 -= 80;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v8 = *result;
  *result = v5;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

_QWORD *sub_1C516001C(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  _QWORD *v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  char *v13;

  v2 = 0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x222222222222222)
    abort();
  if (0xDDDDDDDDDDDDDDDELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0xDDDDDDDDDDDDDDDELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x111111111111111)
    v6 = 0x222222222222222;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x222222222222222)
      sub_1C4764EE4();
    v7 = operator new(120 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (char *)&v7[15 * v6];
  v9 = sub_1C61EF394(&v7[15 * v2], a2);
  v10 = v9 + 15;
  v12 = (char *)*a1;
  v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v8;
  }
  else
  {
    do
    {
      v11 -= 120;
      v9 = sub_1C61EF394(v9 - 15, (uint64_t)v11);
    }
    while (v11 != v12);
    v11 = (char *)*a1;
    v13 = (char *)a1[1];
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v8;
    while (v13 != v11)
    {
      v13 -= 120;
      sub_1C61EEFF0(v13);
    }
  }
  if (v11)
    operator delete(v11);
  return v10;
}

_QWORD *sub_1C5160148(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61EF6A4(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_1C5160200(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 20 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 20);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 20);
    }
  }
  return v3;
}

char *sub_1C5160278(char **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int64x2_t v13;
  __int128 v14;
  char *v15;
  uint64_t v17;
  int64x2_t v18;
  char *v19;
  _QWORD *v20;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_1C4764EE4();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  v10 = v8 + 24;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v18.i64[1] = (uint64_t)(v8 + 24);
  v19 = v9;
  v12 = *a1;
  v11 = a1[1];
  if (v11 == *a1)
  {
    v13 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      *((_QWORD *)v8 - 3) = 0;
      *((_QWORD *)v8 - 2) = 0;
      v8 -= 24;
      *((_QWORD *)v8 + 2) = 0;
      v14 = *(_OWORD *)(v11 - 24);
      v11 -= 24;
      *(_OWORD *)v8 = v14;
      *((_QWORD *)v8 + 2) = *((_QWORD *)v11 + 2);
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = 0;
    }
    while (v11 != v12);
    v13 = *(int64x2_t *)a1;
    v10 = (char *)v18.i64[1];
    v9 = v19;
  }
  *a1 = v8;
  a1[1] = v10;
  v18 = v13;
  v15 = a1[2];
  a1[2] = v9;
  v19 = v15;
  v17 = v13.i64[0];
  sub_1C61B83C8((uint64_t)&v17);
  return v10;
}

void sub_1C51603C8()
{
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C51603DC(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E8144AD0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C5160414(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E8144AD0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

llvm::raw_ostream *sub_1C5160434(uint64_t a1, llvm::raw_ostream *this)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v4) > 0xB)
  {
    *(_DWORD *)(v4 + 8) = 778398818;
    *(_QWORD *)v4 = *(_QWORD *)"%jump-table.";
    *((_QWORD *)this + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(this, "%jump-table.", 0xCuLL);
  }
  return sub_1C5E21910(this, *(unsigned int *)(a1 + 8), 0, 0, 0);
}

char *sub_1C51604B8(char **a1, _OWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  __int16 v14;

  v3 = *a1;
  v2 = a1[1];
  v4 = (v2 - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    abort();
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 60)
      sub_1C4764EE4();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * v4];
  *(_OWORD *)v11 = *a2;
  v12 = v11 + 16;
  if (v2 != v3)
  {
    do
    {
      v13 = *((_QWORD *)v2 - 2);
      v2 -= 16;
      v14 = *((_WORD *)v2 + 4);
      *((_QWORD *)v11 - 2) = v13;
      v11 -= 16;
      *((_WORD *)v11 + 4) = v14;
    }
    while (v2 != v3);
    v2 = *a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[16 * v9];
  if (v2)
    operator delete(v2);
  return v12;
}

uint64_t sub_1C5160598()
{
  int v1;
  int v2;
  int *v3;
  __int128 v4;

  *(_QWORD *)&v4 = "Force the alignment of all functions in log2 format (e.g. 4 means align on 16B boundaries).";
  *((_QWORD *)&v4 + 1) = 91;
  v3 = &v2;
  v1 = 1;
  v2 = 0;
  sub_1C61D8E94((uint64_t)&unk_1ED7FA870, "align-all-functions", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FA870, &dword_1C475E000);
}

uint64_t llvm::MachineFunctionPass::runOnFunction(llvm::MachineFunctionPass *this, llvm::Function *a2)
{
  uint64_t v2;
  void **v5;
  void *v6;
  uint64_t v7;
  llvm::MachineFunction *MachineFunction;
  uint64_t v9;
  char *v10;
  char *v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t ***v44;
  uint64_t **v45;
  uint64_t ***v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  llvm::Function *v65;
  int v66;
  int v67;
  _QWORD *v68;
  char *v69;
  size_t v70;
  size_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  void **v77;
  uint64_t v78;
  uint64_t ***v79;
  uint64_t (**v80)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t ***v81[2];
  std::string v82;
  void *__p;
  char v84;
  std::string v85;
  void *v86;
  char v87;
  std::string v88;
  void *v89;
  char v90;
  void *v91[2];
  char v92;
  void *v93;
  char v94;
  void *__dst[2];
  char v96;
  void *v97;
  char v98;
  uint64_t (**v99)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  const char *v106;
  const char *v107;
  uint64_t v108;
  char v109;
  char v110;
  void *v111;
  uint64_t v112;
  _BYTE v113[260];
  int v114;
  uint64_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  if ((*((_DWORD *)a2 + 8) & 0xF) == 1)
    return 0;
  v5 = (void **)**((_QWORD **)this + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::MachineModuleInfoWrapperPass::ID);
  v7 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::MachineModuleInfoWrapperPass::ID);
  MachineFunction = llvm::MachineModuleInfo::getOrCreateMachineFunction((llvm::MachineModuleInfo *)(v7 + 32), a2);
  v9 = *(_QWORD *)(***((_QWORD ***)a2 + 5) + 72);
  if (((*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v9 + 24))(v9, "size-info", 9) & 1) != 0)
  {
    v10 = (char *)MachineFunction + 320;
    v11 = (char *)*((_QWORD *)MachineFunction + 41);
    if (v11 == (char *)MachineFunction + 320)
    {
      v12 = 0;
    }
    else
    {
      v12 = 0;
      do
      {
        --v12;
        v13 = v11 + 48;
        do
        {
          v13 = (char *)*((_QWORD *)v13 + 1);
          ++v12;
        }
        while (v13 != v11 + 48);
        v11 = (char *)*((_QWORD *)v11 + 1);
      }
      while (v11 != v10);
    }
    v2 = (*(uint64_t (**)(llvm::MachineFunctionPass *, llvm::MachineFunction *))(*(_QWORD *)this + 144))(this, MachineFunction);
    v14 = *((_QWORD *)MachineFunction + 41);
    if ((char *)v14 == v10)
    {
      v15 = 0;
    }
    else
    {
      v15 = 0;
      do
      {
        --v15;
        v16 = v14 + 48;
        do
        {
          v16 = *(_QWORD *)(v16 + 8);
          ++v15;
        }
        while (v16 != v14 + 48);
        v14 = *(_QWORD *)(v14 + 8);
      }
      while ((char *)v14 != v10);
    }
    if (v12 == v15)
      goto LABEL_24;
    v81[0] = (uint64_t ***)MachineFunction;
    v81[1] = 0;
    v17 = *(uint64_t ***)MachineFunction;
    v18 = ****(_QWORD ****)MachineFunction;
    if (!*(_QWORD *)(v18 + 128))
    {
      if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v18 + 72) + 48))(*(_QWORD *)(v18 + 72)))
        goto LABEL_24;
      v17 = *(uint64_t ***)MachineFunction;
    }
    v38 = v15 - (unint64_t)v12;
    if ((*((_BYTE *)v17 + 23) & 0x20) == 0)
      goto LABEL_63;
    v39 = *(_QWORD *)**v17;
    v99 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v17;
    v40 = *(_DWORD *)(v39 + 2496);
    if (v40)
    {
      v41 = *(_QWORD *)(v39 + 2480);
      v42 = v40 - 1;
      v43 = v42 & ((v17 >> 4) ^ (v17 >> 9));
      v44 = (uint64_t ***)(v41 + 40 * v43);
      v45 = *v44;
      if (*v44 == v17)
        goto LABEL_58;
      v46 = 0;
      v47 = 1;
      while (v45 != (uint64_t **)-4096)
      {
        if (v46)
          v48 = 0;
        else
          v48 = v45 == (uint64_t **)-8192;
        if (v48)
          v46 = v44;
        v49 = v43 + v47++;
        v43 = v49 & v42;
        v44 = (uint64_t ***)(v41 + 40 * v43);
        v45 = *v44;
        if (*v44 == v17)
          goto LABEL_58;
      }
      if (v46)
        v79 = v46;
      else
        v79 = v44;
    }
    else
    {
      v79 = 0;
    }
    v44 = (uint64_t ***)sub_1C541AB24(v39 + 2480, (uint64_t)&v99, (uint64_t *)&v99, v79);
    v80 = v99;
    v44[3] = 0;
    v44[4] = 0;
    *v44 = (uint64_t **)v80;
    v44[1] = (uint64_t **)(v44 + 3);
    v44[2] = (uint64_t **)0x100000000;
LABEL_58:
    v50 = *((unsigned int *)v44 + 4);
    if ((_DWORD)v50)
    {
      v51 = v44[1] + 1;
      v52 = 16 * v50;
      LODWORD(v53) = 0;
      while (*((_DWORD *)v51 - 2))
      {
        v54 = 0;
        v51 += 2;
        v52 -= 16;
        if (!v52)
          goto LABEL_65;
      }
      v53 = *v51;
      if (*v51)
      {
        v54 = *v51;
        if (*(_BYTE *)v53 != 15)
          v54 = *(_QWORD *)(v53 - 8 * *(unsigned int *)(v53 + 8));
        LODWORD(v53) = *(_DWORD *)(v53 + 28);
LABEL_65:
        v55 = *((_QWORD *)MachineFunction + 41);
        v56 = **(_QWORD **)(v55 + 32);
        v100 = 17;
        v101 = 2;
        v102 = v56;
        v103 = v54;
        v104 = v53;
        v105 = 0;
        v106 = "size-info";
        v107 = "FunctionMISizeChange";
        v108 = 20;
        v109 = 0;
        v110 = 0;
        v111 = v113;
        v112 = 0x400000000;
        v113[256] = 0;
        v114 = -1;
        v115 = v55;
        v99 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&unk_1E8144BB0;
        v57 = (void *)(*(uint64_t (**)(llvm::MachineFunctionPass *))(*(_QWORD *)this + 16))(this);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, "Pass", 4uLL, v57, v58);
        v59 = sub_1C47E3888((uint64_t)&v99, (uint64_t)__dst);
        v91[0] = ": Function: ";
        v91[1] = (void *)12;
        sub_1C53B17B4(v59 + 80, (const void **)v91);
        if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
        {
          v70 = 0;
          v69 = &byte_1C871356D;
          goto LABEL_74;
        }
        v60 = ***(_QWORD ***)a2;
        v61 = *(_QWORD *)(v60 + 152);
        v62 = *(unsigned int *)(v60 + 168);
        if ((_DWORD)v62)
        {
          LODWORD(v63) = (v62 - 1) & ((a2 >> 4) ^ (a2 >> 9));
          v64 = v61 + 16 * v63;
          v65 = *(llvm::Function **)v64;
          if (*(llvm::Function **)v64 == a2)
          {
LABEL_73:
            v68 = *(_QWORD **)(v64 + 8);
            v71 = *v68;
            v69 = (char *)(v68 + 2);
            v70 = v71;
LABEL_74:
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v91, "Function", 8uLL, v69, v70);
            v72 = sub_1C47E3888(v59, (uint64_t)v91);
            v88.__r_.__value_.__r.__words[0] = (std::string::size_type)": ";
            v88.__r_.__value_.__l.__size_ = 2;
            sub_1C53B17B4(v72 + 80, (const void **)&v88.__r_.__value_.__l.__data_);
            v88.__r_.__value_.__r.__words[0] = (std::string::size_type)"MI Instruction count changed from ";
            v88.__r_.__value_.__l.__size_ = 34;
            sub_1C53B17B4(v72 + 80, (const void **)&v88.__r_.__value_.__l.__data_);
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v88, "MIInstrsBefore", 0xEuLL, v12);
            v73 = sub_1C47E3888(v72, (uint64_t)&v88);
            v85.__r_.__value_.__r.__words[0] = (std::string::size_type)" to ";
            v85.__r_.__value_.__l.__size_ = 4;
            sub_1C53B17B4(v73 + 80, (const void **)&v85.__r_.__value_.__l.__data_);
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v85, "MIInstrsAfter", 0xDuLL, v15);
            v74 = sub_1C47E3888(v73, (uint64_t)&v85);
            v82.__r_.__value_.__r.__words[0] = (std::string::size_type)"; Delta: ";
            v82.__r_.__value_.__l.__size_ = 9;
            sub_1C53B17B4(v74 + 80, (const void **)&v82.__r_.__value_.__l.__data_);
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v82, "Delta", 5uLL, v38);
            sub_1C47E3888(v74, (uint64_t)&v82);
            if (v84 < 0)
              operator delete(__p);
            if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v82.__r_.__value_.__l.__data_);
            if (v87 < 0)
              operator delete(v86);
            if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v85.__r_.__value_.__l.__data_);
            if (v90 < 0)
              operator delete(v89);
            if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v88.__r_.__value_.__l.__data_);
            if (v94 < 0)
              operator delete(v93);
            if (v92 < 0)
              operator delete(v91[0]);
            if (v98 < 0)
              operator delete(v97);
            if (v96 < 0)
              operator delete(__dst[0]);
            llvm::MachineOptimizationRemarkEmitter::emit(v81, (llvm::DiagnosticInfoOptimizationBase *)&v99);
            v99 = &off_1E814E790;
            v75 = (char *)v111;
            if ((_DWORD)v112)
            {
              v76 = (unint64_t)v112 << 6;
              do
              {
                v77 = (void **)&v75[v76];
                if (v75[v76 - 17] < 0)
                  operator delete(*(v77 - 5));
                if (*((char *)v77 - 41) < 0)
                  operator delete(*(v77 - 8));
                v76 -= 64;
              }
              while (v76);
              v75 = (char *)v111;
            }
            if (v75 != v113)
              free(v75);
            goto LABEL_24;
          }
          v66 = 1;
          while (v65 != (llvm::Function *)-4096)
          {
            v67 = v63 + v66++;
            v63 = v67 & (v62 - 1);
            v65 = *(llvm::Function **)(v61 + 16 * v63);
            if (v65 == a2)
            {
              v64 = v61 + 16 * v63;
              goto LABEL_73;
            }
          }
        }
        v64 = v61 + 16 * v62;
        goto LABEL_73;
      }
LABEL_64:
      v54 = 0;
      goto LABEL_65;
    }
LABEL_63:
    LODWORD(v53) = 0;
    goto LABEL_64;
  }
  v2 = (*(uint64_t (**)(llvm::MachineFunctionPass *, llvm::MachineFunction *))(*(_QWORD *)this + 144))(this, MachineFunction);
LABEL_24:
  v19 = (_QWORD *)((char *)MachineFunction + 360);
  v20 = *((_DWORD *)this + 42);
  if (*((_DWORD *)MachineFunction + 106) < v20)
  {
    v31 = *((_DWORD *)MachineFunction + 106) & 0x3F;
    v32 = *((unsigned int *)MachineFunction + 92);
    if (v31)
    {
      v78 = *((_QWORD *)MachineFunction + 45) + 8 * v32;
      *(_QWORD *)(v78 - 8) &= ~(-1 << v31);
    }
    v33 = v32;
    *((_DWORD *)MachineFunction + 106) = v20;
    v34 = v20 + 63;
    if ((_DWORD)v32 != (v20 + 63) >> 6)
    {
      v35 = v34 >> 6;
      if (v32 > v35)
      {
        *((_DWORD *)MachineFunction + 92) = v35;
        v33 = v34 >> 6;
      }
      else
      {
        v36 = v32;
        if (v35 > *((_DWORD *)MachineFunction + 93))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)MachineFunction + 360, (uint64_t)MachineFunction + 376, v35, 8);
          v36 = *((unsigned int *)MachineFunction + 92);
          v33 = *((_DWORD *)MachineFunction + 92);
        }
        if (v35 != v32)
          bzero((void *)(*v19 + 8 * v36), 8 * (v35 - v32));
        v33 += v35 - v32;
        *((_DWORD *)MachineFunction + 92) = v33;
        v20 = *((_DWORD *)MachineFunction + 106);
      }
    }
    v37 = v20 & 0x3F;
    if (v37)
      *(_QWORD *)(*v19 + 8 * v33 - 8) &= ~(-1 << v37);
  }
  v21 = *((unsigned int *)this + 28);
  if ((_DWORD)v21)
  {
    v22 = (uint64_t *)*((_QWORD *)this + 13);
    v23 = (_QWORD *)*v19;
    do
    {
      v24 = *v22++;
      *v23++ |= v24;
      --v21;
    }
    while (v21);
  }
  LODWORD(v25) = *((_DWORD *)MachineFunction + 92);
  v26 = *((_DWORD *)this + 46);
  if (v26 >= v25)
    v25 = v25;
  else
    v25 = v26;
  if ((_DWORD)v25)
  {
    v27 = (uint64_t *)*((_QWORD *)this + 22);
    v28 = (_QWORD *)*v19;
    do
    {
      v29 = *v27++;
      *v28++ &= ~v29;
      --v25;
    }
    while (v25);
  }
  return v2;
}

void *llvm::MachineFunctionPass::getAnalysisUsage(llvm::MachineFunctionPass *this, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineModuleInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MachineModuleInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::BasicAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::DominanceFrontierWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::IVUsersWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MemoryDependenceWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::ScalarEvolutionWrapperPass::ID);
  return sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::SCEVAAWrapperPass::ID);
}

uint64_t sub_1C5160F1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t v3;

  v1 = *(_QWORD *)(****(_QWORD ****)(a1 + 16) + 72);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    v3 = strlen(*(const char **)(a1 + 40));
  else
    v3 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, size_t))(*(_QWORD *)v1 + 24))(v1, v2, v3);
}

uint64_t sub_1C5160F74(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Machine Function Printer";
  *(_QWORD *)(v2 + 8) = 24;
  *(_QWORD *)(v2 + 16) = "machineinstr-printer";
  *(_QWORD *)(v2 + 24) = 20;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F2EF0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5161090;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createMachineFunctionPrinterPass(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v4 = operator new();
  v5 = (_QWORD *)sub_1C4776848(v4, (uint64_t)&unk_1EF8F2EF0);
  *v5 = off_1E8144CB0;
  v5[31] = a1;
  v6 = v5 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1C47EBC30(v6, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v6 = *(_OWORD *)a2;
    v6[2] = *(_QWORD *)(a2 + 16);
  }
  return v4;
}

_QWORD *sub_1C5161090()
{
  _QWORD *v0;
  llvm *v1;

  v0 = (_QWORD *)operator new();
  v1 = (llvm *)sub_1C4776848((uint64_t)v0, (uint64_t)&unk_1EF8F2EF0);
  *(_QWORD *)v1 = off_1E8144CB0;
  v0[31] = llvm::dbgs(v1);
  v0[32] = 0;
  v0[33] = 0;
  v0[34] = 0;
  return v0;
}

void sub_1C51610EC(void **this)
{
  void **v2;
  void **v3;
  void **v4;

  *this = off_1E8144CB0;
  if (*((char *)this + 279) < 0)
    operator delete(this[32]);
  *this = &unk_1E8144BE8;
  v2 = (void **)this[22];
  if (v2 != this + 24)
    free(v2);
  v3 = (void **)this[13];
  if (v3 != this + 15)
    free(v3);
  v4 = (void **)this[4];
  if (v4 != this + 6)
    free(v4);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C5161180(void **this)
{
  void **v2;
  void **v3;
  void **v4;

  *this = off_1E8144CB0;
  if (*((char *)this + 279) < 0)
    operator delete(this[32]);
  *this = &unk_1E8144BE8;
  v2 = (void **)this[22];
  if (v2 != this + 24)
    free(v2);
  v3 = (void **)this[13];
  if (v3 != this + 15)
    free(v3);
  v4 = (void **)this[4];
  if (v4 != this + 6)
    free(v4);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5161228()
{
  return "MachineFunction Printer";
}

void *sub_1C5161238(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 144, (uint64_t)&llvm::SlotIndexes::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1C516127C(uint64_t a1, llvm::Value **a2)
{
  char *Name;
  size_t v5;
  llvm::raw_ostream *v6;
  _WORD *v7;
  char v8;
  const char *v9;
  size_t v10;
  llvm::raw_ostream *v11;
  _WORD *v12;
  llvm::raw_ostream *v13;
  uint64_t AnalysisPass;
  const llvm::SlotIndexes *v15;

  Name = llvm::Value::getName(*a2);
  if (llvm::isFunctionInPrintList(Name, v5))
  {
    v6 = *(llvm::raw_ostream **)(a1 + 248);
    v7 = (_WORD *)*((_QWORD *)v6 + 4);
    if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 1uLL)
    {
      *v7 = 8227;
      *((_QWORD *)v6 + 4) += 2;
    }
    else
    {
      v6 = llvm::raw_ostream::write(v6, "# ", 2uLL);
    }
    v8 = *(_BYTE *)(a1 + 279);
    if (v8 >= 0)
      v9 = (const char *)(a1 + 256);
    else
      v9 = *(const char **)(a1 + 256);
    if (v8 >= 0)
      v10 = v8 & 0x7F;
    else
      v10 = *(_QWORD *)(a1 + 264);
    v11 = llvm::raw_ostream::write(v6, v9, v10);
    v12 = (_WORD *)*((_QWORD *)v11 + 4);
    if (*((_QWORD *)v11 + 3) - (_QWORD)v12 > 1uLL)
    {
      *v12 = 2618;
      *((_QWORD *)v11 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v11, ":\n", 2uLL);
    }
    v13 = *(llvm::raw_ostream **)(a1 + 248);
    AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::SlotIndexes::ID, 1);
    if (AnalysisPass)
      v15 = (const llvm::SlotIndexes *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::SlotIndexes::ID);
    else
      v15 = 0;
    llvm::MachineFunction::print(a2, v13, v15);
  }
  return 0;
}

void llvm::initializeMachineFunctionSplitterPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7FA940);
  if (v1 != -1)
  {
    v4[0] = sub_1C51613FC;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7FA940, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C51613FC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Split machine functions using profile information";
  *(_QWORD *)(v2 + 8) = 49;
  *(_QWORD *)(v2 + 16) = "machine-function-splitter";
  *(_QWORD *)(v2 + 24) = 25;
  *(_QWORD *)(v2 + 32) = &unk_1ED7FA938;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C516154C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C516148C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7FA938) = &off_1E8144D70;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7FA940);
  if (v3 != -1)
  {
    v7[0] = sub_1C51613FC;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7FA940, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C516154C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C516148C(v0);
}

void sub_1C5161574(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C5161608(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5161694()
{
  return "Machine Function Splitter Transformation";
}

void *sub_1C51616A4(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::MachineModuleInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::ProfileSummaryInfoWrapperPass::ID);
}

uint64_t sub_1C51616F4(uint64_t a1, uint64_t a2)
{
  uint64_t ***v4;
  uint64_t **v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t Metadata;
  uint64_t v20;
  void **v21;
  void *v22;
  llvm::MachineBlockFrequencyInfo *v23;
  void **v24;
  void *v25;
  llvm::ProfileSummaryInfo *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  const llvm::MachineBasicBlock **v30;
  uint64_t v31;
  const llvm::MachineBasicBlock *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v38;
  int v39;
  unint64_t v41;
  char v42;
  void *v43;
  uint64_t v44;
  _BYTE v45[16];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  llvm::Function::getEntryCount(*(uint64_t ****)a2, 0, (uint64_t)&v43);
  if (!v45[0])
    return 0;
  v4 = *(uint64_t ****)a2;
  if ((*(_BYTE *)(*(_QWORD *)a2 + 34) & 0x40) != 0)
    return 0;
  v5 = v4[14];
  if (v5)
  {
    if (*((_DWORD *)v5 + 2))
    {
      v6 = v5[5];
      if (v6)
      {
        v7 = *((_DWORD *)v6 + 10);
        if (v7)
        {
          v8 = v6[3];
          v9 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
          if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
          {
            v41 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v41 = 0xFF51AFD7ED558CCDLL;
            qword_1ED7EAC80 = v41;
            __cxa_guard_release(&qword_1ED7EAC88);
          }
          v10 = __ROR8__(qword_1ED7EAC80 ^ 0xF54B982192FEA167, 30);
          v11 = 0x9DDFEA08EB382D69
              * ((qword_1ED7EAC80 + 0x18EB4DAABB32FA18) ^ ((0x9DDFEA08EB382D69
                                                            * ((v10 - 0x1A1B69534B932F1) ^ (qword_1ED7EAC80
                                                                                            + 0x18EB4DAABB32FA18))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v10 - 0x1A1B69534B932F1) ^ (qword_1ED7EAC80 + 0x18EB4DAABB32FA18))));
          v12 = -348639895 * ((v11 >> 47) ^ v11);
          for (i = 1; ; ++i)
          {
            v14 = v12 & (v7 - 1);
            v15 = v8 + 24 * v14;
            v16 = *(_QWORD **)v15;
            if (*(_QWORD *)v15 == -1)
            {
              if ("implicit-section-name" == (char *)-1)
                return 0;
            }
            else if (v16 == (_QWORD *)-2)
            {
              if ("implicit-section-name" == (char *)-2)
                return 0;
            }
            else if (*(_QWORD *)(v15 + 8) == 21)
            {
              v17 = *v16 == 0x746963696C706D69 && v16[1] == 0x6E6F69746365732DLL;
              if (v17 && *(_QWORD *)((char *)v16 + 13) == 0x656D616E2D6E6F69)
                return 0;
            }
            if (v16 == (_QWORD *)-1)
              break;
            v12 = i + v14;
          }
          v4 = *(uint64_t ****)a2;
        }
      }
    }
  }
  Metadata = llvm::Value::getMetadata((llvm::Value *)v4, 20);
  if (!Metadata)
    goto LABEL_31;
  v20 = *(_QWORD *)(*(_QWORD *)(Metadata - 8 * *(unsigned int *)(Metadata + 8) + 8) + 8);
  if (*(_QWORD *)v20 == 7)
  {
    v38 = *(_DWORD *)(v20 + 24);
    v39 = *(_DWORD *)(v20 + 27);
    if (v38 != 1852534389 || v39 != 1853321070)
      goto LABEL_31;
    return 0;
  }
  if (*(_QWORD *)v20 == 8 && *(_QWORD *)(v20 + 24) == 0x796C656B696C6E75)
    return 0;
LABEL_31:
  llvm::MachineFunction::RenumberBlocks((llvm::MachineFunction *)a2, 0);
  *(_DWORD *)(a2 + 640) = 3;
  v21 = **(void ****)(a1 + 8);
  do
  {
    v22 = *v21;
    v21 += 2;
  }
  while (v22 != &llvm::MachineBlockFrequencyInfo::ID);
  v23 = (llvm::MachineBlockFrequencyInfo *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v21 - 1) + 96))(*(v21 - 1), &llvm::MachineBlockFrequencyInfo::ID);
  v24 = **(void ****)(a1 + 8);
  do
  {
    v25 = *v24;
    v24 += 2;
  }
  while (v25 != &llvm::ProfileSummaryInfoWrapperPass::ID);
  v26 = *(llvm::ProfileSummaryInfo **)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v24 - 1) + 96))(*(v24 - 1), &llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);
  v43 = v45;
  v44 = 0x200000000;
  v27 = *(_QWORD *)(a2 + 328);
  if (v27 != a2 + 320)
  {
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(v27 + 32) + 328) != v27)
      {
        if (*(_BYTE *)(v27 + 184))
        {
          v28 = v44;
          if (v44 >= (unint64_t)HIDWORD(v44))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v45, v44 + 1, 8);
            v28 = v44;
          }
          *((_QWORD *)v43 + v28) = v27;
          LODWORD(v44) = v44 + 1;
        }
        else if (sub_1C5161B68((const llvm::MachineBasicBlock *)v27, v23, v26))
        {
          *(_QWORD *)(v27 + 192) = llvm::MBBSectionID::ColdSectionID;
        }
      }
      v27 = *(_QWORD *)(v27 + 8);
    }
    while (v27 != a2 + 320);
    if ((_DWORD)v44)
    {
      v29 = 0;
      v30 = (const llvm::MachineBasicBlock **)v43;
      v31 = 8 * v44;
      do
      {
        v32 = *v30++;
        v29 |= sub_1C5161B68(v32, v23, v26) ^ 1;
        v31 -= 8;
      }
      while (v31);
      if ((v29 & 1) == 0 && (_DWORD)v44)
      {
        v33 = (uint64_t *)v43;
        v34 = llvm::MBBSectionID::ColdSectionID;
        v35 = 8 * v44;
        do
        {
          v36 = *v33++;
          *(_QWORD *)(v36 + 192) = v34;
          v35 -= 8;
        }
        while (v35);
      }
    }
  }
  llvm::sortBasicBlocksAndUpdateBranches(a2, (uint64_t (*)(uint64_t, uint64_t *, uint64_t *))sub_1C5161BDC, (uint64_t)&v42);
  if (v43 != v45)
    free(v43);
  return 1;
}

uint64_t sub_1C5161B68(const llvm::MachineBasicBlock *a1, llvm::MachineBlockFrequencyInfo *a2, llvm::ProfileSummaryInfo *a3)
{
  uint64_t *BlockProfileCount;
  char v5;
  uint64_t *v6;
  unint64_t v7;
  char v8;

  BlockProfileCount = llvm::MachineBlockFrequencyInfo::getBlockProfileCount(a2, a1);
  if (!v5)
    return 1;
  v6 = BlockProfileCount;
  if (!dword_1ED7FA9C8)
    return (unint64_t)BlockProfileCount < dword_1ED7FAA88;
  v7 = llvm::ProfileSummaryInfo::computeThreshold(a3, dword_1ED7FA9C8);
  return v8 && v7 >= (unint64_t)v6;
}

BOOL sub_1C5161BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_DWORD *)(a2 + 192) < *(_DWORD *)(a3 + 192);
}

uint64_t sub_1C5161BF0()
{
  int v1;
  int v2;
  int *v3;
  __int128 v4;

  *(_QWORD *)&v4 = "Percentile profile summary cutoff used to determine cold blocks. Unused if set to zero.";
  *((_QWORD *)&v4 + 1) = 87;
  v3 = &v2;
  v1 = 1;
  v2 = 999950;
  sub_1C61D8E94((uint64_t)&unk_1ED7FA948, "mfs-psi-cutoff", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FA948, &dword_1C475E000);
  *(_QWORD *)&v4 = "Minimum number of times a block must be executed to be retained.";
  *((_QWORD *)&v4 + 1) = 64;
  v1 = 1;
  v2 = 1;
  v3 = &v2;
  sub_1C61D8E94((uint64_t)&unk_1ED7FAA08, "mfs-count-threshold", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FAA08, &dword_1C475E000);
}

uint64_t sub_1C5161CD4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Unpack machine instruction bundles";
  *(_QWORD *)(v2 + 8) = 34;
  *(_QWORD *)(v2 + 16) = "unpack-mi-bundles";
  *(_QWORD *)(v2 + 24) = 17;
  *(_QWORD *)(v2 + 32) = &unk_1ED7FAAC8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5163288;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createUnpackMachineBundles(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void (**v4)(void);
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = operator new();
  v3 = (_QWORD *)a1[3];
  if (v3)
  {
    if (v3 == a1)
    {
      v7 = v6;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v6);
    }
    else
    {
      v7 = (_QWORD *)a1[3];
      a1[3] = 0;
    }
  }
  else
  {
    v7 = 0;
  }
  sub_1C5161E54(v2, (uint64_t)v6);
  if (v7 == v6)
  {
    v4 = (void (**)(void))(v6[0] + 32);
    goto LABEL_10;
  }
  if (v7)
  {
    v4 = (void (**)(void))(*v7 + 40);
LABEL_10:
    (*v4)();
  }
  return v2;
}

uint64_t sub_1C5161E54(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t v9;
  _QWORD *v10;
  _QWORD v11[2];

  v4 = (_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7FAAC8);
  *v4 = &off_1E8144E40;
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      *(_QWORD *)(a1 + 272) = v4 + 31;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 272) = v5;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 272) = 0;
  }
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v9 = qword_1ED830BC0[0];
  v7 = atomic_load(&qword_1ED7FAAD0);
  if (v7 != -1)
  {
    v11[0] = sub_1C5161CD4;
    v11[1] = &v9;
    v10 = v11;
    std::__call_once(&qword_1ED7FAAD0, &v10, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5161F54(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Finalize machine instruction bundles";
  *(_QWORD *)(v2 + 8) = 36;
  *(_QWORD *)(v2 + 16) = "finalize-mi-bundles";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &unk_1ED7FAAC9;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5163628;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::finalizeBundle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  llvm::MachineInstr *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  int *v18;
  unsigned int v19;
  _QWORD *j;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  char *v32;
  size_t v33;
  char *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 v40;
  unsigned __int16 *v41;
  int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  int k;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  char *v61;
  unsigned int v62;
  uint64_t v63;
  _QWORD *m;
  unsigned int v65;
  char *v66;
  char *v67;
  int v68;
  int v69;
  llvm::MachineInstr *v70;
  __int16 v71;
  int v72;
  llvm::MachineFunction *v73;
  llvm::MachineInstr *v74;
  uint64_t v75[3];
  void *v76[2];
  _BYTE v77[128];
  _QWORD **v78;
  _QWORD *v79[2];
  _QWORD *v80;
  uint64_t v81;
  _BYTE v82[32];
  char *v83;
  uint64_t v84;
  _BYTE v85[32];
  _QWORD **v86;
  _QWORD *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  _BYTE v91[32];
  char **v92;
  char *v93;
  uint64_t v94;
  void *v95[2];
  _BYTE v96[32];
  _QWORD **v97;
  _QWORD *v98[2];
  _DWORD *v99;
  uint64_t v100;
  _BYTE v101[32];
  char *v102;
  uint64_t v103;
  _BYTE v104[64];
  _QWORD **v105;
  _QWORD *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  _BYTE v110[32];
  _QWORD **v111;
  _QWORD *v112;
  uint64_t v113;
  unsigned __int8 *v114;
  uint64_t v115;
  _BYTE v116[128];
  _QWORD **v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD v122[18];

  v4 = a2;
  v122[16] = *MEMORY[0x1E0C80C00];
  sub_1C61EF9B4(v75, a1, a2, a3);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 16) + 104))(*(_QWORD *)(v6 + 16));
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 16) + 176))(*(_QWORD *)(v6 + 16));
  if (v4 == a3)
  {
LABEL_5:
    v120 = 0;
    v11 = *(_QWORD *)(v7 + 8) + 960;
    v76[0] = 0;
  }
  else
  {
    v9 = v4;
    while (1)
    {
      v10 = *(unsigned __int8 **)(v9 + 56);
      if (v10)
        break;
      v9 = *(_QWORD *)(v9 + 8);
      if (v9 == a3)
        goto LABEL_5;
    }
    v120 = *(_QWORD **)(v9 + 56);
    llvm::MetadataTracking::track((uint64_t)&v120, v10, 2);
    v11 = *(_QWORD *)(v7 + 8) + 960;
    v76[0] = v120;
    if (v120)
      llvm::MetadataTracking::track((uint64_t)v76, (unsigned __int8 *)v120, 2);
  }
  v12 = *(llvm::MachineInstr **)(v6 + 224);
  if (v12)
    *(_QWORD *)(v6 + 224) = *(_QWORD *)v12;
  else
    v12 = (llvm::MachineInstr *)sub_1C484358C(v6 + 128, 72, 3);
  v114 = (unsigned __int8 *)v76[0];
  if (v76[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v76, (unsigned __int8 *)v76[0], (uint64_t)&v114);
    v76[0] = 0;
  }
  llvm::MachineInstr::MachineInstr(v12, (llvm::MachineFunction *)v6, v11, &v114, 0);
  if (v114)
    llvm::MetadataTracking::untrack((uint64_t)&v114, v114);
  if (v76[0])
    llvm::MetadataTracking::untrack((uint64_t)v76, (unsigned __int8 *)v76[0]);
  v73 = (llvm::MachineFunction *)v6;
  v74 = v12;
  if (v120)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v120, (unsigned __int8 *)v120);
    v12 = v74;
  }
  sub_1C61EFA50(v75, v75[1], (uint64_t)v12);
  v120 = v122;
  v121 = 0x2000000000;
  v114 = v116;
  v115 = 0x2000000000;
  v119 = 0;
  v118 = 0;
  v117 = &v118;
  v108 = v110;
  v109 = 0x800000000;
  v113 = 0;
  v112 = 0;
  v111 = &v112;
  v102 = v104;
  v103 = 0x1000000000;
  v107 = 0;
  v106 = 0;
  v105 = &v106;
  v100 = 0x800000000;
  v95[1] = (void *)0x800000000;
  v98[1] = 0;
  v99 = v101;
  v97 = v98;
  v98[0] = 0;
  v90 = 0x800000000;
  v94 = 0;
  v95[0] = v96;
  v92 = &v93;
  v93 = 0;
  v83 = v85;
  v84 = 0x800000000;
  v88 = 0;
  v89 = v91;
  v86 = &v87;
  v87 = 0;
  v80 = v82;
  v81 = 0x400000000;
  if (v4 != a3)
  {
    if (v8)
      v13 = (_QWORD *)(v8 + 8);
    else
      v13 = 0;
    v14 = v4;
    while (1)
    {
      if (**(unsigned __int16 **)(v14 + 16) - 13 < 5)
        goto LABEL_87;
      v15 = *(unsigned int *)(v14 + 40);
      if (!(_DWORD)v15)
        goto LABEL_86;
      for (i = 0; i != v15; ++i)
      {
        v17 = *(_QWORD *)(v14 + 32);
        v18 = (int *)(v17 + 32 * i);
        if (*v18)
          continue;
        if ((*v18 & 0x1000000) != 0)
        {
          v22 = v81;
          if (v81 >= (unint64_t)HIDWORD(v81))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, (uint64_t)v82, v81 + 1, 8);
            v22 = v81;
          }
          v80[v22] = v18;
          LODWORD(v81) = v81 + 1;
        }
        else
        {
          v19 = *(_DWORD *)(v17 + 32 * i + 4);
          LODWORD(v76[0]) = v19;
          if (!v19)
            continue;
          if (v119)
          {
            for (j = v118; j; j = (_QWORD *)*j)
            {
              v21 = *((_DWORD *)j + 7);
              if (v19 >= v21)
              {
                if (v21 >= v19)
                  goto LABEL_46;
                ++j;
              }
            }
LABEL_48:
            if ((sub_1C484FF44((uint64_t)v95, (unsigned int *)v76) & 0x100000000) != 0)
            {
              v26 = (int)v76[0];
              v27 = v100;
              if (v100 >= (unint64_t)HIDWORD(v100))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, (uint64_t)v101, v100 + 1, 4);
                v27 = v100;
              }
              v99[v27] = v26;
              LODWORD(v100) = v100 + 1;
              if ((*((_BYTE *)v18 + 3) & 0x10) != 0)
                sub_1C484FF44((uint64_t)&v83, (unsigned int *)v76);
            }
            if (((*v18 >> 26) & ~HIBYTE(*v18) & 1) != 0)
              sub_1C484FF44((uint64_t)&v89, (unsigned int *)v76);
            continue;
          }
          if (!(_DWORD)v115)
            goto LABEL_48;
          v23 = v114;
          v24 = 4 * v115;
          while (*(_DWORD *)v23 != v19)
          {
            v23 += 4;
            v24 -= 4;
            if (!v24)
              goto LABEL_48;
          }
          if (!v24)
            goto LABEL_48;
LABEL_46:
          v25 = *v18;
          *v18 |= 0x20000000u;
          if (((v25 >> 26) & ~HIBYTE(v25) & 1) != 0)
            sub_1C48302EC((uint64_t)&v102, (unsigned int *)v76);
        }
      }
      v28 = v81;
      if ((_DWORD)v81)
      {
        v29 = 0;
        do
        {
          v30 = (_DWORD *)v80[v29];
          LODWORD(v76[0]) = v30[1];
          if (LODWORD(v76[0]))
          {
            if ((sub_1C4879438((uint64_t)&v114, (unsigned int *)v76) & 0x100000000) != 0)
            {
              v36 = (int)v76[0];
              v37 = v121;
              if (v121 >= (unint64_t)HIDWORD(v121))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, (uint64_t)v122, v121 + 1, 4);
                v37 = v121;
              }
              *((_DWORD *)v120 + v37) = v36;
              LODWORD(v121) = v121 + 1;
              if ((~*v30 & 0x5000000) == 0)
                sub_1C484FF44((uint64_t)&v108, (unsigned int *)v76);
            }
            else
            {
              sub_1C5162A80((uint64_t)&v102, (unsigned int *)v76);
              if ((~*v30 & 0x5000000) != 0)
              {
                if (v113)
                {
                  sub_1C61D9060((uint64_t)&v111, (unsigned int *)v76);
                }
                else
                {
                  v31 = v109;
                  if ((_DWORD)v109)
                  {
                    v32 = v108;
                    v33 = 4 * v109 - 4;
                    v34 = v108;
                    while (1)
                    {
                      v35 = *(_DWORD *)v34;
                      v34 += 4;
                      if (v35 == LODWORD(v76[0]))
                        break;
                      v33 -= 4;
                      v32 = v34;
                      if (v33 == -4)
                        goto LABEL_74;
                    }
                    if (v33)
                    {
                      memmove(v32, v32 + 4, v33);
                      v31 = v109;
                    }
                    LODWORD(v109) = v31 - 1;
                  }
                }
              }
            }
LABEL_74:
            if ((~*v30 & 0x5000000) != 0 && (LODWORD(v76[0]) - 1) <= 0x3FFFFFFE)
            {
              v38 = v13[6];
              v39 = *(unsigned int *)(*v13 + 24 * LODWORD(v76[0]) + 4);
              if (*(_WORD *)(v38 + 2 * v39))
              {
                v40 = *(_WORD *)(v38 + 2 * v39) + LOWORD(v76[0]);
                v41 = (unsigned __int16 *)(v38 + 2 * v39 + 2);
                do
                {
                  v42 = v40;
                  v72 = v40;
                  if ((sub_1C4879438((uint64_t)&v114, (unsigned int *)&v72) & 0x100000000) != 0)
                  {
                    v43 = v121;
                    if (v121 >= (unint64_t)HIDWORD(v121))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, (uint64_t)v122, v121 + 1, 4);
                      v43 = v121;
                    }
                    *((_DWORD *)v120 + v43) = v42;
                    LODWORD(v121) = v121 + 1;
                  }
                  v44 = *v41++;
                  v40 = v44 + v42;
                }
                while (v44);
              }
            }
          }
          ++v29;
        }
        while (v29 != v28);
      }
LABEL_86:
      LODWORD(v81) = 0;
LABEL_87:
      v14 = *(_QWORD *)(v14 + 8);
      if (v14 == a3)
      {
        v45 = v121;
        goto LABEL_90;
      }
    }
  }
  v45 = 0;
LABEL_90:
  v76[0] = v77;
  v76[1] = (void *)0x2000000000;
  v79[0] = 0;
  v79[1] = 0;
  v78 = v79;
  if (v45)
  {
    v46 = 0;
    v47 = v45;
    while (1)
    {
      v72 = *((_DWORD *)v120 + v46);
      if ((sub_1C4879438((uint64_t)v76, (unsigned int *)&v72) & 0x100000000) != 0)
        break;
LABEL_123:
      if (++v46 == v47)
        goto LABEL_124;
    }
    if (v113)
    {
      v48 = v112;
      if (v112)
      {
        k = v72;
        do
        {
          v50 = *((unsigned int *)v48 + 7);
          if (v72 >= v50)
          {
            if (v50 >= v72)
              goto LABEL_120;
            ++v48;
          }
          v48 = (_QWORD *)*v48;
        }
        while (v48);
      }
    }
    else if ((_DWORD)v109)
    {
      v51 = v108;
      k = v72;
      v52 = 4 * v109;
      while (*(_DWORD *)v51 != (unint64_t)v72)
      {
        v51 += 4;
        v52 -= 4;
        if (!v52)
          goto LABEL_107;
      }
      if (v52)
        goto LABEL_120;
    }
LABEL_107:
    if (v107)
    {
      v53 = v106;
      for (k = v72; v53; v53 = (_QWORD *)*v53)
      {
        v54 = *((unsigned int *)v53 + 7);
        if (v72 >= v54)
        {
          if (v54 >= v72)
            goto LABEL_120;
          ++v53;
        }
      }
LABEL_121:
      v57 = 6;
      goto LABEL_122;
    }
    k = v72;
    if (!(_DWORD)v103)
      goto LABEL_121;
    v55 = v102;
    v56 = &v102[4 * v103];
    while (*(_DWORD *)v55 != (unint64_t)v72)
    {
      v55 += 4;
      if (v55 == v56)
        goto LABEL_121;
    }
    if (v55 == v56)
      goto LABEL_121;
LABEL_120:
    v57 = 22;
LABEL_122:
    sub_1C47BF4F4(&v73, k, v57, 0);
    goto LABEL_123;
  }
LABEL_124:
  v58 = v100;
  if (!(_DWORD)v100)
    goto LABEL_157;
  v59 = 0;
  do
  {
    v60 = v99[v59];
    if (!v94)
    {
      v61 = v89;
      if ((_DWORD)v90)
      {
        v63 = 4 * v90;
        while (*(_DWORD *)v61 != v60)
        {
          v61 += 4;
          v63 -= 4;
          if (!v63)
            goto LABEL_137;
        }
      }
      else
      {
LABEL_137:
        v61 = &v89[4 * v90];
      }
      LODWORD(v61) = v61 != &v89[4 * v90];
      goto LABEL_140;
    }
    v61 = v93;
    if (!v93)
      goto LABEL_140;
    while (1)
    {
      v62 = *((_DWORD *)v61 + 7);
      if (v60 >= v62)
        break;
LABEL_131:
      v61 = *(char **)v61;
      if (!v61)
        goto LABEL_140;
    }
    if (v62 < v60)
    {
      v61 += 8;
      goto LABEL_131;
    }
    LODWORD(v61) = 1;
LABEL_140:
    if (v88)
    {
      for (m = v87; m; m = (_QWORD *)*m)
      {
        v65 = *((_DWORD *)m + 7);
        if (v60 >= v65)
        {
          if (v65 >= v60)
          {
            v68 = 8 * (_DWORD)v61;
            goto LABEL_155;
          }
          ++m;
        }
      }
LABEL_151:
      v68 = 8 * (_DWORD)v61;
      goto LABEL_152;
    }
    if (!(_DWORD)v84)
      goto LABEL_151;
    v66 = v83;
    v67 = &v83[4 * v84];
    while (*(_DWORD *)v66 != v60)
    {
      v66 += 4;
      if (v66 == v67)
        goto LABEL_151;
    }
    v68 = 8 * (_DWORD)v61;
    if (v66 == v67)
LABEL_152:
      v69 = 0;
    else
LABEL_155:
      v69 = 32;
    sub_1C47BF4F4(&v73, v60, v68 | v69 | 4, 0);
    ++v59;
  }
  while (v59 != v58);
LABEL_157:
  if (v4 != a3)
  {
    v70 = v74;
    do
    {
      v71 = *(_WORD *)(v4 + 44);
      if ((v71 & 1) != 0)
      {
        *((_WORD *)v70 + 22) |= 1u;
        v71 = *(_WORD *)(v4 + 44);
      }
      if ((v71 & 2) != 0)
        *((_WORD *)v70 + 22) |= 2u;
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != a3);
  }
  sub_1C47655E8((uint64_t)&v78, v79[0]);
  if (v76[0] != v77)
    free(v76[0]);
  if (v80 != (_QWORD *)v82)
    free(v80);
  sub_1C47655E8((uint64_t)&v86, v87);
  if (v83 != v85)
    free(v83);
  sub_1C47655E8((uint64_t)&v92, v93);
  if (v89 != v91)
    free(v89);
  sub_1C47655E8((uint64_t)&v97, v98[0]);
  if (v95[0] != v96)
    free(v95[0]);
  if (v99 != (_DWORD *)v101)
    free(v99);
  sub_1C47655E8((uint64_t)&v105, v106);
  if (v102 != v104)
    free(v102);
  sub_1C47655E8((uint64_t)&v111, v112);
  if (v108 != v110)
    free(v108);
  sub_1C47655E8((uint64_t)&v117, v118);
  if (v114 != v116)
    free(v114);
  if (v120 != v122)
    free(v120);
}

BOOL sub_1C5162A80(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  int *v4;
  size_t v5;
  int *v6;
  int v7;

  if (*(_QWORD *)(a1 + 96))
    return sub_1C61D9060(a1 + 80, a2) != 0;
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = *(int **)a1;
  v5 = 4 * v3 - 4;
  v6 = *(int **)a1;
  while (1)
  {
    v7 = *v6++;
    if (v7 == *a2)
      break;
    v5 -= 4;
    v4 = v6;
    if (v5 == -4)
      return 0;
  }
  if (v5)
  {
    memmove(v4, v4 + 1, v5);
    LODWORD(v3) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v3 - 1;
  return 1;
}

uint64_t llvm::finalizeBundle(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 != a1 + 48)
  {
    while ((*(_WORD *)(v2 + 44) & 4) != 0)
    {
      v2 = *(_QWORD *)(v2 + 8);
      if (v2 == a1 + 48)
      {
        v2 = a1 + 48;
        break;
      }
    }
  }
  llvm::finalizeBundle(a1, a2, v2);
  return v2;
}

uint64_t llvm::finalizeBundles(llvm *this, llvm::MachineFunction *a2)
{
  char *v2;
  char *v3;
  char v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (char *)this + 320;
  v3 = (char *)*((_QWORD *)this + 41);
  if (v3 == (char *)this + 320)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = v3 + 48;
      v6 = (char *)*((_QWORD *)v3 + 7);
      if (v6 != v3 + 48)
      {
        v7 = *((_QWORD *)v6 + 1);
        while ((_QWORD *)v7 != v5)
        {
          if ((*(_WORD *)(v7 + 44) & 4) != 0)
          {
            v8 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
            v9 = *(_QWORD *)(v8 + 8);
            v7 = (uint64_t)(v3 + 48);
            if ((_QWORD *)v9 != v5)
            {
              while ((*(_WORD *)(v9 + 44) & 4) != 0)
              {
                v9 = *(_QWORD *)(v9 + 8);
                if ((_QWORD *)v9 == v5)
                {
                  v7 = (uint64_t)(v3 + 48);
                  goto LABEL_13;
                }
              }
              v7 = v9;
            }
LABEL_13:
            llvm::finalizeBundle((uint64_t)v3, v8, v7);
            v4 = 1;
          }
          else
          {
            v7 = *(_QWORD *)(v7 + 8);
          }
        }
      }
      v3 = (char *)*((_QWORD *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

uint64_t llvm::AnalyzeVirtRegInBundle(unint64_t a1, int a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int *v9;
  unsigned __int8 v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _BOOL4 v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;

  v5 = a1;
  if ((*(_WORD *)(a1 + 44) & 4) != 0)
  {
    v5 = a1;
    do
      v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v5 + 44) & 4) != 0);
  }
  v6 = *(_QWORD *)(a1 + 24) + 48;
  v7 = *(int **)(v5 + 32);
  v8 = *(unsigned int *)(v5 + 40);
  v9 = &v7[8 * v8];
  if (!(_DWORD)v8)
  {
    v29 = *(_QWORD *)(v5 + 8);
    if (v29 == v6)
    {
      v5 = *(_QWORD *)(a1 + 24) + 48;
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 24) + 48;
      if ((*(_WORD *)(v29 + 44) & 4) != 0)
      {
        do
        {
          v30 = v29;
          v31 = *(unsigned int *)(v29 + 40);
          if ((_DWORD)v31)
          {
            v5 = v29;
            goto LABEL_58;
          }
          v29 = *(_QWORD *)(v29 + 8);
        }
        while (v29 != v6 && (*(_WORD *)(v29 + 44) & 4) != 0);
        v5 = *(_QWORD *)(a1 + 24) + 48;
LABEL_58:
        v7 = *(int **)(v30 + 32);
        v9 = &v7[8 * v31];
      }
    }
  }
  if (v7 == v9)
  {
    v12 = 0;
    LOBYTE(v11) = 0;
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = a3 + 16;
    do
    {
      v14 = *v7;
      if (!*v7 && v7[1] == a2)
      {
        if (a3)
        {
          v15 = *((_QWORD *)v7 + 1);
          v16 = *(_QWORD *)(v5 + 32);
          v17 = *(unsigned int *)(a3 + 8);
          if (v17 >= *(unsigned int *)(a3 + 12))
          {
            v33 = v13;
            v32 = v11;
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v13, v17 + 1, 16);
            v13 = v33;
            v11 = v32;
            v17 = *(unsigned int *)(a3 + 8);
          }
          v18 = (_QWORD *)(*(_QWORD *)a3 + 16 * v17);
          *v18 = v15;
          v18[1] = (((unint64_t)v7 - v16) >> 5);
          ++*(_DWORD *)(a3 + 8);
          v14 = *v7;
        }
        v19 = (v14 & 0x1000000) == 0;
        v20 = (v14 & 0x30000000) != 0 || (v14 & 0x10FFF00) == 0x1000000;
        v21 = v20;
        if (v20)
          v19 = 1;
        if (v19)
          v22 = v12;
        else
          v22 = 1;
        if (!v21)
          v10 = 1;
        if ((v14 & 0x1000000) != 0)
        {
          v11 = 1;
          v12 = v22;
        }
        else if ((v12 & 1) == 0)
        {
          v23 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 1) + 32)
                          + (((unint64_t)v7 - *(_QWORD *)(v5 + 32)) & 0x1FFFFFFFE0));
          if ((v23 & 0xF00000) != 0 && (v23 & 0x10000FF) == 0)
            v12 = 1;
        }
      }
      v7 += 8;
      if (v7 == v9)
      {
        v25 = *(_QWORD *)(v5 + 8);
        if (v25 == v6)
          return (v12 << 16) | (v11 << 8) | v10;
        v7 = v9;
        v5 = v6;
        if ((*(_WORD *)(v25 + 44) & 4) != 0)
        {
          while (1)
          {
            v26 = v25;
            v27 = *(unsigned int *)(v25 + 40);
            if ((_DWORD)v27)
              break;
            v25 = *(_QWORD *)(v25 + 8);
            if (v25 == v6 || (*(_WORD *)(v25 + 44) & 4) == 0)
            {
              v5 = v6;
              goto LABEL_42;
            }
          }
          v5 = v25;
LABEL_42:
          v7 = *(int **)(v26 + 32);
          v9 = &v7[8 * v27];
        }
      }
    }
    while (v7 != v9);
  }
  return (v12 << 16) | (v11 << 8) | v10;
}

unint64_t llvm::AnalyzePhysRegInBundle(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  int *v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  _BOOL4 v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  int v29;
  unsigned __int16 v30;
  BOOL v31;
  unsigned __int16 *v32;
  int v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;

  v3 = a1;
  if ((*(_WORD *)(a1 + 44) & 4) != 0)
  {
    v3 = a1;
    do
      v3 = *(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v3 + 44) & 4) != 0);
  }
  v4 = *(_QWORD *)(a1 + 24) + 48;
  v5 = *(unsigned int **)(v3 + 32);
  v6 = *(unsigned int *)(v3 + 40);
  v7 = (int *)&v5[8 * v6];
  if (!(_DWORD)v6)
  {
    v42 = *(_QWORD *)(v3 + 8);
    if (v42 == v4)
    {
      v3 = *(_QWORD *)(a1 + 24) + 48;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 24) + 48;
      if ((*(_WORD *)(v42 + 44) & 4) != 0)
      {
        do
        {
          v43 = v42;
          v44 = *(unsigned int *)(v42 + 40);
          if ((_DWORD)v44)
          {
            v3 = v42;
            goto LABEL_79;
          }
          v42 = *(_QWORD *)(v42 + 8);
        }
        while (v42 != v4 && (*(_WORD *)(v42 + 44) & 4) != 0);
        v3 = *(_QWORD *)(a1 + 24) + 48;
LABEL_79:
        v5 = *(unsigned int **)(v43 + 32);
        v7 = (int *)&v5[8 * v44];
      }
    }
  }
  if (v5 == (unsigned int *)v7)
  {
    v8 = 0;
    LOBYTE(v9) = 0;
    LOBYTE(v10) = 0;
    LOBYTE(v11) = 0;
    LOBYTE(v12) = 0;
    v13 = 0;
    goto LABEL_64;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = a2;
  v15 = a2 - 1;
  v16 = (_QWORD *)(a3 + 8);
  v17 = a2 >> 5;
  v18 = 1 << a2;
  v19 = 1;
  do
  {
    v20 = *v5;
    if (*v5)
    {
      if (*v5 == 12 && (*(_DWORD *)(*((_QWORD *)v5 + 2) + 4 * v17) & v18) == 0)
        v8 = 1;
    }
    else
    {
      v21 = v5[1];
      if (v21 - 1 > 0x3FFFFFFE)
        goto LABEL_51;
      if (v21 == (_DWORD)a2)
      {
        v22 = (v20 & 0x30000000) != 0 || (v20 & 0x10FFF00) == 0x1000000;
        if (!v22)
          goto LABEL_46;
        v23 = 1;
      }
      else
      {
        if (v15 > 0x3FFFFFFE)
          goto LABEL_51;
        v45 = v18;
        v46 = v17;
        v47 = v16;
        v48 = v15;
        v49 = v9;
        v50 = v11;
        v51 = v12;
        v52 = v13;
        v53 = v10;
        v25 = a2;
        v26 = a3;
        v27 = v14;
        if (!llvm::MCRegisterInfo::regsOverlap(v16, v21, v14))
        {
          a3 = v26;
          a2 = v25;
          v9 = v49;
          v11 = v50;
          v13 = v52;
          v10 = v53;
          v12 = v51;
          v14 = v27;
          v15 = v48;
          v17 = v46;
          v16 = v47;
          v18 = v45;
          goto LABEL_51;
        }
        a3 = v26;
        v28 = (_WORD *)(*(_QWORD *)(v26 + 56)
                      + 2 * *(unsigned int *)(*(_QWORD *)(v26 + 8) + 24 * v27 + 8));
        v29 = (unsigned __int16)*v28;
        a2 = v25;
        v30 = v29 + v25;
        v22 = v29 == 0;
        v23 = *v28 != 0;
        v31 = v22 || v21 == v30;
        v9 = v49;
        v11 = v50;
        v10 = v53;
        v12 = v51;
        v14 = v27;
        v17 = v46;
        v16 = v47;
        v18 = v45;
        if (v31)
        {
          v13 = v52;
          v15 = v48;
        }
        else
        {
          v32 = v28 + 1;
          v15 = v48;
          do
          {
            v34 = *v32++;
            v33 = v34;
            v30 += v34;
            v23 = v34 != 0;
            if (!v34)
              v32 = 0;
            if (v33)
              v35 = v21 == v30;
            else
              v35 = 1;
          }
          while (!v35);
          v13 = v52;
        }
        if ((v20 & 0x30000000) == 0 && (v20 & 0x10FFF00) != 0x1000000)
        {
          if (v23)
          {
LABEL_46:
            if (((v20 >> 26) & ~HIBYTE(v20) & 1) != 0)
              v13 = 1;
            else
              v13 = v13;
            v12 = 1;
          }
          v11 = 1;
          goto LABEL_51;
        }
      }
      if (v23)
        v24 = 1;
      else
        v24 = v10;
      if ((v20 & 0x1000000) != 0)
      {
        v19 &= (~v20 & 0x5000000) == 0;
        v10 = v24;
      }
      else
      {
        v10 = v10;
      }
      if ((v20 & 0x1000000) != 0)
        v9 = 1;
      else
        v9 = v9;
    }
LABEL_51:
    v5 += 8;
    if (v5 == (unsigned int *)v7)
    {
      v36 = *(_QWORD *)(v3 + 8);
      if (v36 == v4)
        break;
      v5 = (unsigned int *)v7;
      v3 = v4;
      if ((*(_WORD *)(v36 + 44) & 4) != 0)
      {
        while (1)
        {
          v37 = v36;
          v38 = *(unsigned int *)(v36 + 40);
          if ((_DWORD)v38)
            break;
          v36 = *(_QWORD *)(v36 + 8);
          if (v36 == v4 || (*(_WORD *)(v36 + 44) & 4) == 0)
          {
            v3 = v4;
            goto LABEL_59;
          }
        }
        v3 = v36;
LABEL_59:
        v5 = *(unsigned int **)(v37 + 32);
        v7 = (int *)&v5[8 * v38];
      }
    }
  }
  while (v5 != (unsigned int *)v7);
  if ((v19 & 1) == 0)
  {
    v39 = 0;
    v40 = 0;
    return ((unint64_t)v11 << 24) | ((unint64_t)v12 << 32) | ((unint64_t)v10 << 16) | v40 | v39 | (v13 << 56) | v8 | ((unint64_t)v9 << 8);
  }
LABEL_64:
  v39 = (unint64_t)(v9 & 1) << 48;
  if (((v10 | v8) & 1) != 0)
  {
    v39 = 0;
    v40 = 0x10000000000;
  }
  else
  {
    v40 = 0;
  }
  return ((unint64_t)v11 << 24) | ((unint64_t)v12 << 32) | ((unint64_t)v10 << 16) | v40 | v39 | (v13 << 56) | v8 | ((unint64_t)v9 << 8);
}

uint64_t sub_1C5163288()
{
  uint64_t v0;
  void (**v1)(void);
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  v4 = 0;
  sub_1C5161E54(v0, (uint64_t)v3);
  if (v4 == v3)
  {
    v1 = (void (**)(void))(v3[0] + 32);
    goto LABEL_5;
  }
  if (v4)
  {
    v1 = (void (**)(void))(*v4 + 40);
LABEL_5:
    (*v1)();
  }
  return v0;
}

void sub_1C5163334(llvm::Pass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;

  *(_QWORD *)this = &off_1E8144E40;
  v2 = (char *)this + 248;
  v3 = (char *)*((_QWORD *)this + 34);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)this = &unk_1E8144BE8;
  v5 = (char *)*((_QWORD *)this + 22);
  if (v5 != (char *)this + 192)
    free(v5);
  v6 = (char *)*((_QWORD *)this + 13);
  if (v6 != (char *)this + 120)
    free(v6);
  v7 = (char *)*((_QWORD *)this + 4);
  if (v7 != (char *)this + 48)
    free(v7);
  llvm::Pass::~Pass(this);
}

void sub_1C51633E8(llvm::Pass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;

  *(_QWORD *)this = &off_1E8144E40;
  v2 = (char *)this + 248;
  v3 = (char *)*((_QWORD *)this + 34);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)this = &unk_1E8144BE8;
  v5 = (char *)*((_QWORD *)this + 22);
  if (v5 != (char *)this + 192)
    free(v5);
  v6 = (char *)*((_QWORD *)this + 13);
  if (v6 != (char *)this + 120)
    free(v6);
  v7 = (char *)*((_QWORD *)this + 4);
  if (v7 != (char *)this + 48)
    free(v7);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C51634B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 272);
  if (v3 && !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(v3, a2)
    || (v4 = a2 + 320, v5 = *(_QWORD *)(a2 + 328), v5 == v4))
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = v5 + 48;
      v8 = *(_QWORD *)(v5 + 56);
      if (v8 != v5 + 48)
      {
        do
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (**(_WORD **)(v8 + 16) == 20)
          {
            v10 = v5 + 48;
            if (v9 != v7)
            {
              while (1)
              {
                v11 = *(_WORD *)(v9 + 44);
                if ((v11 & 4) == 0)
                  break;
                *(_WORD *)(v9 + 44) = v11 & 0xFFFB;
                *(_WORD *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 44) &= ~8u;
                v12 = *(unsigned int *)(v9 + 40);
                if ((_DWORD)v12)
                {
                  v13 = 0;
                  v14 = 32 * v12;
                  do
                  {
                    v15 = *(_QWORD *)(v9 + 32);
                    v16 = *(_DWORD *)(v15 + v13);
                    if ((v16 & 0x200000FF) == 0x20000000)
                      *(_DWORD *)(v15 + v13) = v16 & 0xDFFFFFFF;
                    v13 += 32;
                  }
                  while (v14 != v13);
                }
                v9 = *(_QWORD *)(v9 + 8);
                if (v9 == v7)
                {
                  v10 = v5 + 48;
                  goto LABEL_18;
                }
              }
              v10 = v9;
            }
LABEL_18:
            v17 = v8;
            if ((*(_BYTE *)v8 & 4) == 0)
            {
              v17 = v8;
              if ((*(_WORD *)(v8 + 44) & 8) != 0)
              {
                v17 = v8;
                do
                  v17 = *(_QWORD *)(v17 + 8);
                while ((*(_WORD *)(v17 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(v8 + 24) + 40, v8, *(_QWORD *)(v17 + 8));
            v6 = 1;
          }
          else
          {
            v10 = *(_QWORD *)(v8 + 8);
          }
          v8 = v10;
        }
        while (v10 != v7);
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v4);
  }
  return v6 & 1;
}

uint64_t sub_1C5163628()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1ED7FAAC9) = &off_1E8144F00;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED7FAAD8);
  if (v2 != -1)
  {
    v6[0] = sub_1C5161F54;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED7FAAD8, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C5163700(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C5163794(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5163820(int a1, llvm *this)
{
  return llvm::finalizeBundles(this, this);
}

void llvm::MachineInstr::addImplicitDefUseOperands(llvm::MachineInstr *this, llvm::MachineFunction *a2)
{
  uint64_t v4;
  _WORD *v5;
  _WORD *v6;
  int v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  unsigned __int16 *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *((_QWORD *)this + 2);
  v5 = *(_WORD **)(v4 + 32);
  if (v5)
  {
    v10 = (unsigned __int16)*v5;
    if (*v5)
    {
      v11 = v5 + 1;
      do
      {
        v15 = 0;
        v16 = 0;
        v17 = 0;
        v13 = 50331648;
        v14 = v10;
        llvm::MachineInstr::addOperand(this, a2, (const llvm::MachineOperand *)&v13);
        v12 = *v11++;
        v10 = v12;
      }
      while (v12);
      v4 = *((_QWORD *)this + 2);
    }
  }
  v6 = *(_WORD **)(v4 + 24);
  if (v6)
  {
    v7 = (unsigned __int16)*v6;
    if (*v6)
    {
      v8 = v6 + 1;
      do
      {
        v15 = 0;
        v16 = 0;
        v17 = 0;
        v13 = 0x2000000;
        v14 = v7;
        llvm::MachineInstr::addOperand(this, a2, (const llvm::MachineOperand *)&v13);
        v9 = *v8++;
        v7 = v9;
      }
      while (v9);
    }
  }
}

void llvm::MachineInstr::addOperand(llvm::MachineInstr *this, llvm::MachineFunction *a2, const llvm::MachineOperand *a3)
{
  llvm::MachineOperand *v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  int *v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  llvm::MachineOperand *v21;
  int v22;
  unsigned int v23;
  llvm::MachineOperand *v24;
  llvm::MachineOperand *v25;
  int v26;
  llvm::MachineOperand *v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  int v32;
  _QWORD *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _OWORD v49[2];

  v6 = (llvm::MachineOperand *)*((_QWORD *)this + 4);
  LODWORD(v7) = *((_DWORD *)this + 10);
  v8 = v7;
  if (v6 <= a3 && (llvm::MachineOperand *)((char *)v6 + 32 * v7) > a3)
  {
    v14 = *((_OWORD *)a3 + 1);
    v49[0] = *(_OWORD *)a3;
    v49[1] = v14;
    llvm::MachineInstr::addOperand(this, a2, (const llvm::MachineOperand *)v49);
    return;
  }
  v10 = *(_DWORD *)a3 & 0x20000FF;
  if (v10 != 0x2000000 && **((unsigned __int16 **)this + 2) - 1 >= 2 && (_DWORD)v7 != 0)
  {
    v12 = (int *)((char *)v6 + 32 * v7 - 32);
    v7 = *((unsigned int *)this + 10);
    do
    {
      v13 = *v12;
      v12 -= 8;
      if ((v13 & 0x20000FF) != 0x2000000)
        break;
      --v7;
    }
    while (v7);
  }
  v15 = *((_QWORD *)this + 3);
  if (v15)
    v16 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 40);
  else
    v16 = 0;
  v17 = *((unsigned __int8 *)this + 47);
  if (v6)
  {
    if (1 << v17 != v8)
      goto LABEL_29;
    v18 = v17 + 1;
  }
  else
  {
    v18 = 0;
  }
  *((_BYTE *)this + 47) = v18;
  v19 = v18;
  if (*((_DWORD *)a2 + 60) > v18
    && (v20 = *((_QWORD *)a2 + 29), (v21 = *(llvm::MachineOperand **)(v20 + 8 * v19)) != 0))
  {
    *(_QWORD *)(v20 + 8 * v19) = *(_QWORD *)v21;
  }
  else
  {
    v21 = (llvm::MachineOperand *)sub_1C484358C((uint64_t)a2 + 128, 32 << v19, 3);
  }
  *((_QWORD *)this + 4) = v21;
  if (!(_DWORD)v7)
  {
LABEL_29:
    v22 = *((_DWORD *)this + 10);
    v23 = v22 - v7;
    if (v22 == (_DWORD)v7)
      goto LABEL_35;
    v24 = (llvm::MachineOperand *)(*((_QWORD *)this + 4) + 32 * v7 + 32);
    v25 = (llvm::MachineOperand *)((char *)v6 + 32 * v7);
    if (v16)
    {
      llvm::MachineRegisterInfo::moveOperands(v16, v24, v25, v23);
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if (v16)
  {
    llvm::MachineRegisterInfo::moveOperands(v16, v21, v6, v7);
    goto LABEL_29;
  }
  memmove(v21, v6, 32 * v7);
  v26 = *((_DWORD *)this + 10);
  v23 = v26 - v7;
  if (v26 == (_DWORD)v7)
    goto LABEL_35;
  v24 = (llvm::MachineOperand *)(*((_QWORD *)this + 4) + 32 * v7 + 32);
  v25 = (llvm::MachineOperand *)((char *)v6 + 32 * v7);
LABEL_34:
  memmove(v24, v25, 32 * v23);
LABEL_35:
  ++*((_DWORD *)this + 10);
  v27 = (llvm::MachineOperand *)*((_QWORD *)this + 4);
  if (v6 && v6 != v27)
  {
    v28 = (uint64_t *)((char *)a2 + 232);
    if (*((_DWORD *)a2 + 60) <= v17)
      sub_1C515FA1C((uint64_t)a2 + 232, v17 + 1);
    v29 = *v28;
    *(_QWORD *)v6 = *(_QWORD *)(*v28 + 8 * v17);
    *(_QWORD *)(v29 + 8 * v17) = v6;
    v27 = (llvm::MachineOperand *)*((_QWORD *)this + 4);
  }
  v30 = (char *)v27 + 32 * v7;
  v31 = *((_OWORD *)a3 + 1);
  *(_OWORD *)v30 = *(_OWORD *)a3;
  *((_OWORD *)v30 + 1) = v31;
  *((_QWORD *)v30 + 1) = this;
  v32 = *(_DWORD *)v30;
  if (!*(_DWORD *)v30)
  {
    *((_QWORD *)v30 + 2) = 0;
    v33 = v30 + 16;
    v34 = v32 & 0xFF0FFFFF;
    *(_DWORD *)v30 = v34;
    if (v16)
    {
      v35 = *((unsigned int *)v27 + 8 * v7 + 1);
      if ((v35 & 0x80000000) != 0)
        v36 = (uint64_t *)(*(_QWORD *)(v16 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
      else
        v36 = (uint64_t *)(*(_QWORD *)(v16 + 272) + 8 * v35);
      v37 = *v36;
      if (*v36)
      {
        v38 = *(_QWORD *)(v37 + 16);
        *(_QWORD *)(v37 + 16) = v30;
        *v33 = v38;
        v39 = (_QWORD *)((char *)v27 + 32 * v7 + 24);
        if ((v30[3] & 1) != 0)
        {
          *v39 = v37;
        }
        else
        {
          *v39 = 0;
          v36 = (uint64_t *)(v38 + 24);
        }
      }
      else
      {
        *v33 = v30;
        *((_QWORD *)v27 + 4 * v7 + 3) = 0;
      }
      *v36 = (uint64_t)v30;
      v34 = *(_DWORD *)v30;
    }
    if (v10 != 0x2000000)
    {
      if ((v34 & 0x1000000) == 0)
      {
        v40 = *((_QWORD *)this + 2);
        if (v7 < *(unsigned __int16 *)(v40 + 2))
        {
          v41 = *(_WORD *)(*(_QWORD *)(v40 + 40) + 6 * v7 + 4);
          if ((v41 & 1) != 0)
          {
            v42 = v41 >> 4;
            v43 = *((_QWORD *)this + 4);
            v44 = (unsigned int *)(v43 + 32 * v7);
            v45 = *v44 & 0xFF0FFFFF | ((((((_DWORD)v42 << 20) + 0x100000) >> 20) & 0xF) << 20);
            if ((_DWORD)v42 == 15)
              v45 = *v44 | 0xF00000;
            v46 = 32 * v42;
            *v44 = v45;
            if (v7 >= 0xE)
              v47 = 14;
            else
              v47 = v7;
            *(_DWORD *)(v43 + v46) = *(_DWORD *)(v43 + v46) & 0xFF0FFFFF | ((v47 << 20) + 0x100000);
          }
        }
      }
      v48 = *((_QWORD *)this + 2);
      if (v7 >= *(unsigned __int16 *)(v48 + 2))
      {
        v34 = *(_DWORD *)v30;
      }
      else
      {
        v34 = *(_DWORD *)v30;
        if ((*(_WORD *)(*(_QWORD *)(v48 + 40) + 6 * v7 + 4) & 2) != 0)
        {
          v34 |= 0x40000000u;
          *(_DWORD *)v30 = v34;
        }
      }
    }
    if ((v34 & 0x1000000) == 0 && **((unsigned __int16 **)this + 2) - 13 <= 4)
      *(_DWORD *)v30 = v34 | 0x80000000;
  }
}

llvm::MachineInstr *llvm::MachineInstr::MachineInstr(llvm::MachineInstr *this, llvm::MachineFunction *a2, uint64_t a3, unsigned __int8 **a4, char a5)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _WORD *v19;
  _WORD *v20;
  int v23;
  unsigned __int16 *v24;
  int v25;
  int v26;
  unsigned __int16 *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = *a4;
  *((_QWORD *)this + 2) = a3;
  if (*a4)
  {
    llvm::MetadataTracking::retrack((uint64_t)a4, *a4, (uint64_t)this + 56);
    *a4 = 0;
    a3 = *((_QWORD *)this + 2);
  }
  v8 = 0;
  *((_DWORD *)this + 16) = 0;
  v9 = *(_QWORD *)(a3 + 32);
  if (v9)
  {
    v8 = -1;
    do
      ++v8;
    while (*(_WORD *)(v9 + 2 * v8));
  }
  v10 = v8 + *(unsigned __int16 *)(a3 + 2);
  v11 = *(_QWORD *)(a3 + 24);
  if (v11)
  {
    v12 = -1;
    do
      ++v12;
    while (*(_WORD *)(v11 + 2 * v12));
  }
  else
  {
    v12 = 0;
  }
  v13 = v10 + v12;
  if ((_DWORD)v13)
  {
    v14 = 64 - __clz(v13 - 1);
    *((_BYTE *)this + 47) = v14;
    v15 = v14;
    if (*((_DWORD *)a2 + 60) > v14
      && (v16 = *((_QWORD *)a2 + 29), (v17 = *(_QWORD **)(v16 + 8 * v15)) != 0))
    {
      *(_QWORD *)(v16 + 8 * v15) = *v17;
    }
    else
    {
      v17 = (_QWORD *)sub_1C484358C((uint64_t)a2 + 128, 32 << v15, 3);
    }
    *((_QWORD *)this + 4) = v17;
  }
  if ((a5 & 1) == 0)
  {
    v18 = *((_QWORD *)this + 2);
    v19 = *(_WORD **)(v18 + 32);
    if (v19)
    {
      v26 = (unsigned __int16)*v19;
      if (*v19)
      {
        v27 = v19 + 1;
        do
        {
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v29 = 50331648;
          v30 = v26;
          llvm::MachineInstr::addOperand(this, a2, (const llvm::MachineOperand *)&v29);
          v28 = *v27++;
          v26 = v28;
        }
        while (v28);
        v18 = *((_QWORD *)this + 2);
      }
    }
    v20 = *(_WORD **)(v18 + 24);
    if (v20)
    {
      v23 = (unsigned __int16)*v20;
      if (*v20)
      {
        v24 = v20 + 1;
        do
        {
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v29 = 0x2000000;
          v30 = v23;
          llvm::MachineInstr::addOperand(this, a2, (const llvm::MachineOperand *)&v29);
          v25 = *v24++;
          v23 = v25;
        }
        while (v25);
      }
    }
  }
  return this;
}

llvm::MachineInstr *llvm::MachineInstr::MachineInstr(llvm::MachineInstr *this, llvm::MachineFunction *a2, const llvm::MachineInstr *a3)
{
  unsigned __int8 *v6;
  char *v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  const llvm::MachineOperand *v13;
  uint64_t v14;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = *((_QWORD *)a3 + 2);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = *((_QWORD *)a3 + 6);
  v6 = (unsigned __int8 *)*((_QWORD *)a3 + 7);
  *((_QWORD *)this + 7) = v6;
  v7 = (char *)this + 56;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)v7, v6, 2);
  *((_DWORD *)this + 16) = 0;
  v8 = 64 - __clz(*((unsigned int *)a3 + 10) - 1);
  if (!*((_DWORD *)a3 + 10))
    v8 = 0;
  *((_BYTE *)this + 47) = v8;
  v9 = v8;
  if (*((_DWORD *)a2 + 60) > v8
    && (v10 = *((_QWORD *)a2 + 29), (v11 = *(_QWORD **)(v10 + 8 * v9)) != 0))
  {
    *(_QWORD *)(v10 + 8 * v9) = *v11;
  }
  else
  {
    v11 = (_QWORD *)sub_1C484358C((uint64_t)a2 + 128, 32 << v9, 3);
  }
  *((_QWORD *)this + 4) = v11;
  v12 = *((unsigned int *)a3 + 10);
  if ((_DWORD)v12)
  {
    v13 = (const llvm::MachineOperand *)*((_QWORD *)a3 + 4);
    v14 = 32 * v12;
    do
    {
      llvm::MachineInstr::addOperand(this, a2, v13);
      v13 = (const llvm::MachineOperand *)((char *)v13 + 32);
      v14 -= 32;
    }
    while (v14);
  }
  *((_WORD *)this + 22) = *((_WORD *)this + 22) & 0xC | *((_WORD *)a3 + 22) & 0xFFF3;
  return this;
}

uint64_t llvm::MachineInstr::getRegInfo(llvm::MachineInstr *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    return *(_QWORD *)(*(_QWORD *)(v1 + 32) + 40);
  else
    return 0;
}

uint64_t llvm::MachineInstr::removeRegOperandsFromUseLists(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(result + 40);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(result + 32);
    v4 = 32 * v2;
    do
    {
      if (!*(_BYTE *)v3)
      {
        v5 = *(unsigned int *)(v3 + 4);
        if ((v5 & 0x80000000) != 0)
          v6 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8);
        else
          v6 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v5);
        v7 = *v6;
        v9 = *(_QWORD *)(v3 + 16);
        v8 = *(_QWORD *)(v3 + 24);
        if (v3 != *v6)
          v6 = (uint64_t *)(v9 + 24);
        *v6 = v8;
        if (v8)
          v10 = v8;
        else
          v10 = v7;
        *(_QWORD *)(v10 + 16) = v9;
        *(_QWORD *)(v3 + 16) = 0;
        *(_QWORD *)(v3 + 24) = 0;
      }
      v3 += 32;
      v4 -= 32;
    }
    while (v4);
  }
  return result;
}

uint64_t llvm::MachineInstr::addRegOperandsToUseLists(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(result + 40);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(result + 32);
    v4 = 32 * v2;
    do
    {
      if (!*(_BYTE *)v3)
      {
        v5 = *(unsigned int *)(v3 + 4);
        if ((int)v5 >= 0)
          v6 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v5);
        else
          v6 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8);
        v7 = *v6;
        if (*v6)
        {
          v8 = *(_QWORD *)(v7 + 16);
          *(_QWORD *)(v7 + 16) = v3;
          *(_QWORD *)(v3 + 16) = v8;
          if ((*(_BYTE *)(v3 + 3) & 1) != 0)
          {
            *(_QWORD *)(v3 + 24) = v7;
          }
          else
          {
            *(_QWORD *)(v3 + 24) = 0;
            v6 = (uint64_t *)(v8 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v3 + 16) = v3;
          *(_QWORD *)(v3 + 24) = 0;
        }
        *v6 = v3;
      }
      v3 += 32;
      v4 -= 32;
    }
    while (v4);
  }
  return result;
}

void llvm::MachineInstr::addOperand(llvm::MachineInstr *this, const llvm::MachineOperand *a2)
{
  llvm::MachineInstr::addOperand(this, *(llvm::MachineFunction **)(*((_QWORD *)this + 3) + 32), a2);
}

uint64_t llvm::MachineInstr::tieOperands(uint64_t this, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  int v6;

  v3 = *(_QWORD *)(this + 32);
  v4 = (unsigned int *)(v3 + 32 * a3);
  v5 = *v4 & 0xFF0FFFFF | (((((a2 << 20) + 0x100000) >> 20) & 0xF) << 20);
  if (a2 > 0xE)
    v5 = *v4 | 0xF00000;
  *v4 = v5;
  if (a3 + 1 < 0xF)
    v6 = a3 + 1;
  else
    v6 = 15;
  *(_DWORD *)(v3 + 32 * a2) = *(_DWORD *)(v3 + 32 * a2) & 0xFF0FFFFF | (v6 << 20);
  return this;
}

uint64_t llvm::MachineInstr::removeOperand(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  _DWORD *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int TiedOperandIdx;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;

  v2 = a2;
  v3 = (_DWORD *)(*(_QWORD *)(this + 32) + 32 * a2);
  if (*v3)
    v4 = 1;
  else
    v4 = (*v3 & 0xF00000) == 0;
  if (!v4)
  {
    v23 = this;
    v22 = a2;
    v21 = a2;
    TiedOperandIdx = llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)this, a2);
    v2 = v21;
    a2 = v22;
    v20 = TiedOperandIdx;
    this = v23;
    *(_DWORD *)(*(_QWORD *)(v23 + 32) + 32 * v20) &= 0xFF0FFFFF;
    *v3 &= 0xFF0FFFFF;
  }
  v5 = *(_QWORD *)(this + 24);
  if (v5 && (v6 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 40)) != 0)
  {
    v7 = *(_QWORD *)(this + 32);
    v8 = v7 + 32 * v2;
    if (!*(_BYTE *)v8)
    {
      v11 = *(unsigned int *)(v8 + 4);
      if ((v11 & 0x80000000) != 0)
        v12 = (_QWORD *)(*(_QWORD *)(v6 + 24) + 16 * (v11 & 0x7FFFFFFF) + 8);
      else
        v12 = (_QWORD *)(*(_QWORD *)(v6 + 272) + 8 * v11);
      v13 = *v12;
      v14 = v7 + 32 * v2;
      v16 = *(_QWORD *)(v14 + 16);
      v15 = *(_QWORD *)(v14 + 24);
      if (*v12 == v8)
        v17 = v12;
      else
        v17 = (_QWORD *)(v16 + 24);
      *v17 = v15;
      if (v15)
        v18 = v15;
      else
        v18 = v13;
      *(_QWORD *)(v18 + 16) = v16;
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)(v14 + 24) = 0;
    }
    v9 = (_DWORD *)(this + 40);
    v10 = *(_DWORD *)(this + 40) + ~a2;
    if (v10)
      this = llvm::MachineRegisterInfo::moveOperands(v6, (llvm::MachineOperand *)(*(_QWORD *)(this + 32) + 32 * v2), (llvm::MachineOperand *)(*(_QWORD *)(this + 32) + 32 * v2 + 32), v10);
  }
  else
  {
    v9 = (_DWORD *)(this + 40);
    if (*(_DWORD *)(this + 40) + ~a2)
      this = (uint64_t)memmove((void *)(*(_QWORD *)(this + 32) + 32 * v2), (const void *)(*(_QWORD *)(this + 32) + 32 * v2 + 32), 32 * (*(_DWORD *)(this + 40) + ~a2));
  }
  --*v9;
  return this;
}

unint64_t llvm::MachineInstr::setExtraInfo(unint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v7;
  int v8;
  uint64_t v9;

  v7 = result;
  if (a5)
    v8 = a4 + 1;
  else
    v8 = a4;
  if (a6)
    ++v8;
  if (a7)
    ++v8;
  if (v8 <= 0)
  {
    *(_QWORD *)(result + 48) = 0;
  }
  else
  {
    if (a7 || v8 != 1)
    {
      result = sub_1C515D7E4(a2 + 128, a3, a4, a5, a6, a7);
      v9 = result | 3;
    }
    else if (a5)
    {
      v9 = a5 | 1;
    }
    else if (a6)
    {
      v9 = a6 | 2;
    }
    else
    {
      v9 = *a3;
    }
    *(_QWORD *)(v7 + 48) = v9;
  }
  return result;
}

uint64_t llvm::MachineInstr::dropMemRefs(uint64_t this, llvm::MachineFunction *a2)
{
  unint64_t v2;
  int *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  int *v9;

  v2 = *(_QWORD *)(this + 48);
  if (v2 >= 8)
  {
    if ((v2 & 7) == 0)
    {
      v3 = (int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(this + 48) = v2 & 0xFFFFFFFFFFFFFFF8;
      if ((v2 & 0xFFFFFFFFFFFFFFF8) == 0)
        goto LABEL_12;
      LOBYTE(v2) = v2 & 0xF8;
LABEL_5:
      v4 = v2 & 7;
      if (v4 != 1)
      {
        if (v4 == 3)
        {
          v8 = *((unsigned __int8 *)v3 + 4);
          if (*((_BYTE *)v3 + 4))
            v9 = *(int **)&v3[2 * *v3 + 2];
          else
            v9 = 0;
          if (*((_BYTE *)v3 + 5))
            v6 = *(_QWORD *)&v3[2 * *v3 + 2 + 2 * v8];
          else
            v6 = 0;
          if (*((_BYTE *)v3 + 6))
            v5 = *(_QWORD *)&v3[2 * *v3 + 2 + 2 * *((unsigned __int8 *)v3 + 5) + 2 * v8];
          else
            v5 = 0;
          v3 = v9;
        }
        else
        {
          v5 = 0;
          if (v4 == 2)
            v6 = (uint64_t)v3;
          else
            v6 = 0;
          v3 = 0;
        }
        return llvm::MachineInstr::setExtraInfo(this, (uint64_t)a2, 0, 0, (uint64_t)v3, v6, v5);
      }
LABEL_12:
      v6 = 0;
      v5 = 0;
      return llvm::MachineInstr::setExtraInfo(this, (uint64_t)a2, 0, 0, (uint64_t)v3, v6, v5);
    }
    v3 = (int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    v7 = (*(_QWORD *)(this + 48) & 7) != 3 || v3 == 0;
    if (!v7 && *v3)
      goto LABEL_5;
  }
  return this;
}

uint64_t llvm::MachineInstr::setMemRefs(unint64_t a1, llvm::MachineFunction *a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  BOOL v12;
  uint64_t v14;

  if (a4)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4 >= 8)
    {
      v8 = *(_QWORD *)(a1 + 48) & 7;
      v9 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if (v8 == 1 && v9 != 0)
      {
        v5 = 0;
        v7 = 0;
        v6 = (uint64_t)v9;
        return llvm::MachineInstr::setExtraInfo(a1, (uint64_t)a2, a3, a4, v6, v5, v7);
      }
      if (v8 != 3 || v9 == 0)
      {
        v6 = 0;
        v7 = 0;
        if (v9)
          v12 = v8 == 2;
        else
          v12 = 0;
        if (v12)
          v5 = (uint64_t)v9;
        else
          v5 = 0;
        return llvm::MachineInstr::setExtraInfo(a1, (uint64_t)a2, a3, a4, v6, v5, v7);
      }
      v14 = v9[4];
      if (v9[4])
        v6 = *(_QWORD *)&v9[8 * *(int *)v9 + 8];
      else
        v6 = 0;
      if (v9[5])
        v5 = *(_QWORD *)&v9[8 * *(int *)v9 + 8 + 8 * v14];
      else
        v5 = 0;
      if (v9[6])
      {
        v7 = *(_QWORD *)&v9[8 * *(int *)v9 + 8 + 8 * v9[5] + 8 * v14];
        return llvm::MachineInstr::setExtraInfo(a1, (uint64_t)a2, a3, a4, v6, v5, v7);
      }
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v7 = 0;
    return llvm::MachineInstr::setExtraInfo(a1, (uint64_t)a2, a3, a4, v6, v5, v7);
  }
  return llvm::MachineInstr::dropMemRefs(a1, a2);
}

void llvm::MachineInstr::addMemOperand(llvm::MachineInstr *this, llvm::MachineFunction *a2, llvm::MachineMemOperand *a3)
{
  unint64_t v3;
  unint64_t *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  BOOL v18;
  unint64_t v19;
  BOOL v20;
  int *v21;
  uint64_t v23;
  llvm::MachineInstr *v24;
  llvm::MachineFunction *v25;
  llvm::MachineMemOperand *v26;
  uint64_t v27;
  llvm::MachineMemOperand *v28;
  llvm::MachineInstr *v29;
  llvm::MachineFunction *v30;
  size_t v31;
  void *__src;
  unint64_t *v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[3];

  v36[2] = *MEMORY[0x1E0C80C00];
  v34 = v36;
  v35 = 0x200000000;
  v4 = (unint64_t *)((char *)this + 48);
  v3 = *((_QWORD *)this + 6);
  if (v3 < 8)
  {
    v5 = 0;
LABEL_3:
    v3 = 0;
    v6 = 0;
    goto LABEL_4;
  }
  if ((v3 & 7) != 0)
  {
    v20 = (v3 & 0xFFFFFFFFFFFFFFF8) != 0 && (*((_QWORD *)this + 6) & 7) == 3;
    v5 = (char *)((v3 & 0xFFFFFFFFFFFFFFF8) + 8);
    if (!v20)
      v5 = 0;
  }
  else
  {
    v5 = (char *)this + 48;
    v3 &= 0xFFFFFFFFFFFFFFF8;
    *v4 = v3;
    if (!v3)
    {
      v6 = 0;
      v5 = (char *)this + 48;
      goto LABEL_4;
    }
  }
  v19 = v3 & 7;
  if ((v3 & 7) != 0)
  {
    v21 = (int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    if (v19 != 3 || v21 == 0)
      goto LABEL_3;
    v23 = *v21;
    v3 = (unint64_t)(v21 + 2);
    v6 = v23;
  }
  else
  {
    *v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    v6 = 1;
    v3 = (unint64_t)this + 48;
  }
LABEL_4:
  v7 = v3 + 8 * v6 - (_QWORD)v5;
  v8 = v7 == 0;
  if (v7)
  {
    __src = v5;
    v33 = (unint64_t *)((char *)this + 48);
    v28 = a3;
    v29 = this;
    v30 = a2;
    v31 = v7;
    if ((unint64_t)v7 >= 0x11)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, (uint64_t)v36, v7 >> 3, 8);
      v9 = v35;
    }
    else
    {
      v9 = 0;
    }
    if (v8)
    {
      a2 = v30;
      this = v29;
      a3 = v28;
      v7 = v31;
    }
    else
    {
      memcpy((char *)v34 + 8 * v9, __src, v31);
      v7 = v31;
      v9 = v35;
      a2 = v30;
      this = v29;
      a3 = v28;
    }
    v4 = v33;
  }
  else
  {
    v9 = 0;
  }
  v10 = v9 + ((unint64_t)v7 >> 3);
  LODWORD(v35) = v10;
  if (v10 >= HIDWORD(v35))
  {
    v24 = this;
    v25 = a2;
    v26 = a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, (uint64_t)v36, v10 + 1, 8);
    a3 = v26;
    this = v24;
    a2 = v25;
    LODWORD(v10) = v35;
  }
  *((_QWORD *)v34 + v10) = a3;
  v11 = __CFADD__((_DWORD)v35, 1);
  v12 = (v35 + 1);
  LODWORD(v35) = v35 + 1;
  if (!v11)
  {
    if (*v4 >= 8)
    {
      v16 = *v4 & 7;
      v17 = (unsigned __int8 *)(*v4 & 0xFFFFFFFFFFFFFFF8);
      if (v16 == 1 && v17)
      {
        v13 = 0;
        v15 = 0;
        v14 = *v4 & 0xFFFFFFFFFFFFFFF8;
        goto LABEL_12;
      }
      if (v16 != 3 || !v17)
      {
        v14 = 0;
        v15 = 0;
        if (v17)
          v18 = v16 == 2;
        else
          v18 = 0;
        if (v18)
          v13 = *v4 & 0xFFFFFFFFFFFFFFF8;
        else
          v13 = 0;
        goto LABEL_12;
      }
      v27 = v17[4];
      if (v17[4])
        v14 = *(_QWORD *)&v17[8 * *(int *)v17 + 8];
      else
        v14 = 0;
      if (v17[5])
        v13 = *(_QWORD *)&v17[8 * *(int *)v17 + 8 + 8 * v27];
      else
        v13 = 0;
      if (v17[6])
      {
        v15 = *(_QWORD *)&v17[8 * *(int *)v17 + 8 + 8 * v17[5] + 8 * v27];
        goto LABEL_12;
      }
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
    v15 = 0;
LABEL_12:
    llvm::MachineInstr::setExtraInfo((unint64_t)this, (uint64_t)a2, v34, v12, v14, v13, v15);
    goto LABEL_13;
  }
  llvm::MachineInstr::dropMemRefs((uint64_t)this, a2);
LABEL_13:
  if (v34 != v36)
    free(v34);
}

void llvm::MachineInstr::cloneMergedMemRefs(llvm::MachineInstr *this, llvm::MachineFunction *a2, const llvm::MachineInstr **a3, uint64_t a4)
{
  const llvm::MachineInstr *v8;
  unint64_t v9;
  _DWORD *v10;
  BOOL v11;
  unint64_t v12;
  BOOL v13;
  _BYTE *v14;
  _BYTE *v15;
  int *v16;
  unint64_t v17;
  uint64_t v19;
  int *v20;
  const llvm::MachineInstr **v21;
  const llvm::MachineInstr **v22;
  const llvm::MachineInstr *v23;
  uint64_t v24;
  uint64_t *v25;
  int *v26;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  int *v33;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  BOOL v40;
  unint64_t v41;
  _BYTE *v42;
  int *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  BOOL v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  _QWORD v54[3];

  v54[2] = *MEMORY[0x1E0C80C00];
  if (!a4)
    goto LABEL_11;
  if (a4 == 1)
  {
    llvm::MachineInstr::cloneMemRefs(this, a2, *a3);
    return;
  }
  v8 = *a3;
  v9 = *((_QWORD *)*a3 + 6);
  if (v9 < 8)
    goto LABEL_11;
  if ((v9 & 7) != 0)
  {
    v10 = (_DWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
    v11 = (*((_QWORD *)*a3 + 6) & 7) != 3 || v10 == 0;
    if (!v11 && *v10)
    {
      v52 = v54;
      v53 = 0x200000000;
      goto LABEL_13;
    }
LABEL_11:
    llvm::MachineInstr::dropMemRefs((uint64_t)this, a2);
    return;
  }
  *((_QWORD *)v8 + 6) = v9 & 0xFFFFFFFFFFFFFFF8;
  v8 = *a3;
  v9 = *((_QWORD *)*a3 + 6);
  v52 = v54;
  v53 = 0x200000000;
  if (v9 < 8)
  {
    v15 = 0;
    goto LABEL_28;
  }
LABEL_13:
  v12 = v9 & 0xFFFFFFFFFFFFFFF8;
  if ((v9 & 7) == 0)
  {
    *((_QWORD *)v8 + 6) = v12;
    v15 = (char *)v8 + 48;
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 6);
    if (v9 >= 8)
      goto LABEL_22;
LABEL_28:
    v20 = 0;
    v19 = 0;
    goto LABEL_31;
  }
  if (v12)
    v13 = (v9 & 7) == 3;
  else
    v13 = 0;
  v14 = (_BYTE *)(v12 + 8);
  if (v13)
    v15 = v14;
  else
    v15 = 0;
LABEL_22:
  v16 = (int *)(v9 & 0xFFFFFFFFFFFFFFF8);
  v17 = v9 & 7;
  if (!v17)
  {
    *((_QWORD *)v8 + 6) = v16;
    v20 = (int *)((char *)v8 + 48);
    v19 = 1;
    goto LABEL_31;
  }
  if (v17 != 3 || v16 == 0)
    goto LABEL_28;
  v19 = *v16;
  v20 = v16 + 2;
LABEL_31:
  sub_1C4FA6FB8((unsigned int *)&v52, v15, &v20[2 * v19]);
  v21 = &a3[a4];
  v22 = a3 + 1;
  do
  {
    v23 = *v22;
    v25 = (uint64_t *)((char *)*a3 + 48);
    v24 = *v25;
    if ((unint64_t)*v25 < 8)
      goto LABEL_39;
    if ((v24 & 7) != 0)
    {
      v26 = (int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      if ((v24 & 7) == 3 && v26 != 0)
      {
        v29 = *v26;
        v25 = (uint64_t *)(v26 + 2);
        v28 = v29;
        goto LABEL_41;
      }
LABEL_39:
      v25 = 0;
      v28 = 0;
      goto LABEL_41;
    }
    *v25 = v24 & 0xFFFFFFFFFFFFFFF8;
    v28 = 1;
LABEL_41:
    v32 = *((_QWORD *)v23 + 6);
    v31 = (uint64_t *)((char *)v23 + 48);
    v30 = v32;
    if (v32 < 8)
      goto LABEL_48;
    if ((v30 & 7) != 0)
    {
      v33 = (int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      if ((v30 & 7) == 3 && v33 != 0)
      {
        v37 = *v33;
        v36 = (uint64_t *)(v33 + 2);
        v35 = v37;
        goto LABEL_50;
      }
LABEL_48:
      v36 = 0;
      v35 = 0;
      goto LABEL_50;
    }
    v30 &= 0xFFFFFFFFFFFFFFF8;
    *v31 = v30;
    v36 = v31;
    v35 = 1;
LABEL_50:
    if (v28 == v35)
    {
      if (!v28)
        goto LABEL_84;
      v38 = 8 * v28;
      while (sub_1C61F0E70(*v25, *v36))
      {
        ++v25;
        ++v36;
        v38 -= 8;
        if (!v38)
          goto LABEL_84;
      }
      v30 = *v31;
    }
    if (v30 < 8)
      goto LABEL_90;
    if ((v30 & 7) != 0)
    {
      v39 = (_DWORD *)(v30 & 0xFFFFFFFFFFFFFFF8);
      v40 = (v30 & 7) != 3 || v39 == 0;
      if (v40 || !*v39)
        goto LABEL_90;
    }
    else
    {
      v30 &= 0xFFFFFFFFFFFFFFF8;
      *v31 = v30;
      if (!v30)
      {
        v42 = 0;
        goto LABEL_82;
      }
    }
    if ((v30 & 7) != 0)
    {
      if ((v30 & 0xFFFFFFFFFFFFFFF8) != 0)
        v41 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      else
        v41 = 0;
      if ((v30 & 7) == 3)
        v42 = (_BYTE *)v41;
      else
        v42 = 0;
LABEL_74:
      if ((v30 & 7) != 0)
      {
        v31 = 0;
        if ((v30 & 7) == 3 && (v43 = (int *)(v30 & 0xFFFFFFFFFFFFFFF8), (v30 & 0xFFFFFFFFFFFFFFF8) != 0))
        {
          v30 = *v43;
          v31 = (uint64_t *)(v43 + 2);
        }
        else
        {
          v30 = 0;
        }
      }
      else
      {
        *v31 = v30 & 0xFFFFFFFFFFFFFFF8;
        v30 = 1;
      }
      goto LABEL_83;
    }
    v42 = v31;
    v30 &= 0xFFFFFFFFFFFFFFF8;
    *v31 = v30;
    if (v30)
      goto LABEL_74;
    v42 = v31;
LABEL_82:
    v31 = 0;
LABEL_83:
    sub_1C4FA6FB8((unsigned int *)&v52, v42, &v31[v30]);
LABEL_84:
    ++v22;
  }
  while (v22 != v21);
  if ((_DWORD)v53)
  {
    v44 = *((_QWORD *)this + 6);
    if (v44 < 8)
    {
      v45 = 0;
      v46 = 0;
      goto LABEL_88;
    }
    v48 = *((_QWORD *)this + 6) & 7;
    v49 = (unsigned __int8 *)(v44 & 0xFFFFFFFFFFFFFFF8);
    if (v48 == 1 && v49)
    {
      v45 = 0;
      v47 = 0;
      v46 = (uint64_t)v49;
    }
    else if (v48 == 3 && v49)
    {
      v51 = v49[4];
      if (v49[4])
        v46 = *(_QWORD *)&v49[8 * *(int *)v49 + 8];
      else
        v46 = 0;
      if (v49[5])
        v45 = *(_QWORD *)&v49[8 * *(int *)v49 + 8 + 8 * v51];
      else
        v45 = 0;
      if (v49[6])
        v47 = *(_QWORD *)&v49[8 * *(int *)v49 + 8 + 8 * v49[5] + 8 * v51];
      else
LABEL_88:
        v47 = 0;
    }
    else
    {
      v46 = 0;
      v47 = 0;
      if (v49)
        v50 = v48 == 2;
      else
        v50 = 0;
      if (v50)
        v45 = (uint64_t)v49;
      else
        v45 = 0;
    }
    llvm::MachineInstr::setExtraInfo((unint64_t)this, (uint64_t)a2, v52, v53, v46, v45, v47);
    goto LABEL_91;
  }
LABEL_90:
  llvm::MachineInstr::dropMemRefs((uint64_t)this, a2);
LABEL_91:
  if (v52 != v54)
    free(v52);
}

uint64_t llvm::MachineInstr::mergeFlagsWith(llvm::MachineInstr *this, const llvm::MachineInstr *a2)
{
  return *((unsigned __int16 *)a2 + 22) | *((unsigned __int16 *)this + 22);
}

uint64_t llvm::MachineInstr::copyFlagsFromInstruction(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  BOOL v5;
  int v6;
  uint64_t v8;
  int v9;

  v2 = *(unsigned __int8 *)(a1 + 16);
  HIDWORD(v4) = v2 - 41;
  LODWORD(v4) = v2 - 41;
  v3 = v4 >> 1;
  v5 = v3 > 6;
  v6 = (1 << v3) & 0x47;
  if (v5 || v6 == 0)
    v8 = 0;
  else
    v8 = (*(_BYTE *)(a1 + 17) & 6) << 10;
  if (v2 <= 0x37 && ((1 << v2) & 0xC1800000000000) != 0)
    v8 = v8 & 0xFFFFDFFF | ((((*(_BYTE *)(a1 + 17) & 2) >> 1) & 1u) << 13);
  if (sub_1C4774A9C(a1))
  {
    v9 = *(unsigned __int8 *)(a1 + 17) >> 1;
    if (v9 == 127)
      v9 = -1;
    return (8 * v9) & 0x3F0 | ((v9 & 1) << 10) | v8;
  }
  return v8;
}

uint64_t llvm::MachineInstr::copyIRFlags(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = llvm::MachineInstr::copyFlagsFromInstruction(a2);
  *(_WORD *)(a1 + 44) = result;
  return result;
}

BOOL llvm::MachineInstr::hasPropertyInBundle(uint64_t a1, uint64_t a2, int a3)
{
  _BOOL8 result;
  uint64_t v5;

  result = a3 == 2;
  while (1)
  {
    v5 = *(_QWORD *)(a1 + 16);
    if ((*(_QWORD *)(v5 + 8) & a2) == 0)
      break;
    if (a3 == 1)
      return 1;
LABEL_4:
    if ((*(_WORD *)(a1 + 44) & 8) == 0)
      return result;
    a1 = *(_QWORD *)(a1 + 8);
  }
  if (a3 != 2 || *(_WORD *)v5 == 20)
    goto LABEL_4;
  return 0;
}

uint64_t llvm::MachineInstr::isIdenticalTo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::MachineOperand *v14;
  uint64_t v15;
  const llvm::MachineOperand *v16;
  uint64_t result;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v3 = **(unsigned __int16 **)(a2 + 16);
  if (v3 == **(unsigned __int16 **)(a1 + 16))
  {
    v6 = *(_DWORD *)(a2 + 40);
    if (v6 == *(_DWORD *)(a1 + 40))
    {
      if (v3 == 20)
      {
        v8 = a2;
        v9 = a1;
        while (1)
        {
          v10 = *(_WORD *)(v8 + 44);
          if ((*(_WORD *)(v9 + 44) & 8) == 0)
            break;
          if ((v10 & 8) != 0)
          {
            v9 = *(_QWORD *)(v9 + 8);
            v8 = *(_QWORD *)(v8 + 8);
            if ((llvm::MachineInstr::isIdenticalTo(v9, v8, a3) & 1) != 0)
              continue;
          }
          return 0;
        }
        if ((v10 & 8) != 0)
          return 0;
        v6 = *(_DWORD *)(a1 + 40);
      }
      if (v6)
      {
        v11 = 0;
        v12 = 32 * v6;
        while (1)
        {
          v13 = *(_QWORD *)(a1 + 32);
          v14 = (llvm::MachineOperand *)(v13 + v11);
          v15 = *(_QWORD *)(a2 + 32);
          v16 = (const llvm::MachineOperand *)(v15 + v11);
          if (*(_DWORD *)(v13 + v11))
          {
LABEL_14:
            if ((llvm::MachineOperand::isIdenticalTo(v14, v16) & 1) == 0)
              return 0;
            goto LABEL_15;
          }
          if ((*(_DWORD *)(v13 + v11) & 0x1000000) == 0)
            break;
          if ((_DWORD)a3 == 2)
            goto LABEL_15;
          if ((_DWORD)a3 != 3)
          {
            result = llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(v13 + v11), (const llvm::MachineOperand *)(v15 + v11));
            if (!(_DWORD)result)
              return result;
            if ((_DWORD)a3 != 1)
              goto LABEL_15;
            v18 = (~*(_DWORD *)v14 & 0x5000000) == 0;
            v19 = (~*(_DWORD *)v16 & 0x5000000) == 0;
            goto LABEL_29;
          }
          if ((*(_DWORD *)(v13 + v11 + 4) & 0x80000000) == 0 || (*(_DWORD *)(v15 + v11 + 4) & 0x80000000) == 0)
            goto LABEL_14;
LABEL_15:
          v11 += 32;
          if (v12 == v11)
            goto LABEL_31;
        }
        result = llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(v13 + v11), (const llvm::MachineOperand *)(v15 + v11));
        if (!(_DWORD)result)
          return result;
        if ((_DWORD)a3 != 1)
          goto LABEL_15;
        v18 = (*(_DWORD *)v14 >> 26) & ~HIBYTE(*(_DWORD *)v14);
        v19 = (*(_DWORD *)v16 >> 26) & ~HIBYTE(*(_DWORD *)v16);
LABEL_29:
        if (((v18 ^ v19) & 1) != 0)
          return 0;
        goto LABEL_15;
      }
LABEL_31:
      if (**(unsigned __int16 **)(a1 + 16) - 13 > 4)
        return 1;
      v20 = *(_QWORD *)(a1 + 56);
      if (!v20)
        return 1;
      v21 = *(_QWORD *)(a2 + 56);
      if (!v21 || v20 == v21)
        return 1;
    }
  }
  return 0;
}

uint64_t llvm::MachineInstr::getMF(llvm::MachineInstr *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 32);
}

llvm::MachineInstr *llvm::MachineInstr::removeFromParent(llvm::MachineInstr *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 728);
    if (v3)
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(_QWORD *)v3 + 32))(v3, this);
    v4 = *((unsigned int *)this + 10);
    if ((_DWORD)v4)
    {
      v5 = *((_QWORD *)this + 4);
      v6 = *(_QWORD *)(v2 + 40);
      v7 = 32 * v4;
      do
      {
        if (!*(_BYTE *)v5)
        {
          v8 = *(unsigned int *)(v5 + 4);
          if ((v8 & 0x80000000) != 0)
            v9 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
          else
            v9 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v8);
          v10 = *v9;
          v12 = *(_QWORD *)(v5 + 16);
          v11 = *(_QWORD *)(v5 + 24);
          if (v5 != *v9)
            v9 = (uint64_t *)(v12 + 24);
          *v9 = v11;
          if (v11)
            v13 = v11;
          else
            v13 = v10;
          *(_QWORD *)(v13 + 16) = v12;
          *(_QWORD *)(v5 + 16) = 0;
          *(_QWORD *)(v5 + 24) = 0;
        }
        v5 += 32;
        v7 -= 32;
      }
      while (v7);
    }
  }
  *((_QWORD *)this + 3) = 0;
  v14 = (unint64_t *)*((_QWORD *)this + 1);
  v15 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFF8;
  *v14 = v15 | *v14 & 7;
  *(_QWORD *)(v15 + 8) = v14;
  *(_QWORD *)this &= 7uLL;
  *((_QWORD *)this + 1) = 0;
  return this;
}

uint64_t llvm::MachineInstr::eraseFromParent(llvm::MachineInstr *this)
{
  llvm::MachineInstr *v1;

  v1 = this;
  if ((*(_BYTE *)this & 4) == 0)
  {
    v1 = this;
    if ((*((_WORD *)this + 22) & 8) != 0)
    {
      v1 = this;
      do
        v1 = (llvm::MachineInstr *)*((_QWORD *)v1 + 1);
      while ((*((_WORD *)v1 + 22) & 8) != 0);
    }
  }
  return sub_1C487FE80(*((_QWORD *)this + 3) + 40, (uint64_t)this, *((_QWORD *)v1 + 1));
}

uint64_t llvm::MachineInstr::eraseFromBundle(llvm::MachineInstr *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  sub_1C512C844((uint64_t)this);
  return sub_1C512C89C(v2 + 40, (uint64_t)this);
}

uint64_t llvm::MachineInstr::isCandidateForCallSiteEntry(uint64_t a1, int a2)
{
  BOOL v2;
  uint64_t i;
  uint64_t v5;
  unsigned int v6;

  if (!a2 || ((*(_WORD *)(a1 + 44) & 0xC) != 0 ? (v2 = (*(_WORD *)(a1 + 44) & 4) == 0) : (v2 = 0), !v2))
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 8) & 0x80) == 0)
      return 0;
LABEL_20:
    v6 = **(unsigned __int16 **)(a1 + 16);
    if (v6 > 0x1F)
      return 1;
    else
      return (0x71FFFFFFu >> v6) & 1;
  }
  for (i = a1; ; i = *(_QWORD *)(i + 8))
  {
    v5 = *(_QWORD *)(i + 16);
    if ((*(_BYTE *)(v5 + 8) & 0x80) != 0)
      break;
    if (a2 == 2)
    {
      if (*(_WORD *)v5 != 20)
        return 0;
      if ((*(_WORD *)(i + 44) & 8) == 0)
        goto LABEL_20;
    }
    else if ((*(_WORD *)(i + 44) & 8) == 0)
    {
      return 0;
    }
LABEL_16:
    ;
  }
  if (a2 == 1)
    goto LABEL_20;
  if ((*(_WORD *)(i + 44) & 8) != 0)
    goto LABEL_16;
  if (a2 == 2)
    goto LABEL_20;
  return 0;
}

BOOL llvm::MachineInstr::shouldUpdateCallSiteInfo(llvm::MachineInstr *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)*((_QWORD *)this + 2);
  v2 = *v1;
  if (v2 == 20)
  {
    v3 = *((_QWORD *)v1 + 1);
    if ((*((_WORD *)this + 22) & 0xC) == 0 || (*((_WORD *)this + 22) & 4) != 0)
      return (v3 & 0x80) != 0;
    if ((v3 & 0x80) == 0)
    {
      while ((*((_WORD *)this + 22) & 8) != 0)
      {
        this = (llvm::MachineInstr *)*((_QWORD *)this + 1);
        if ((*(_BYTE *)(*((_QWORD *)this + 2) + 8) & 0x80) != 0)
          return 1;
      }
      return 0;
    }
  }
  else
  {
    if ((v1[4] & 0x80) == 0)
      return 0;
    if (v2 <= 0x1F)
      return (0x71FFFFFFu >> v2) & 1;
  }
  return 1;
}

uint64_t llvm::MachineInstr::getNumExplicitOperands(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;

  v1 = *(_QWORD *)(this + 16);
  v2 = *(unsigned __int16 *)(v1 + 2);
  if ((*(_BYTE *)(v1 + 8) & 2) == 0)
    return *(unsigned __int16 *)(v1 + 2);
  v3 = *(_DWORD *)(this + 40);
  if (v3 == v2)
    return *(unsigned __int16 *)(v1 + 2);
  v4 = *(_QWORD *)(this + 32);
  v5 = v3 - 1;
  LODWORD(this) = v2;
  do
  {
    v6 = *(_DWORD *)(v4 + 32 * v2) & 0x20000FF;
    if (v6 == 0x2000000)
      this = this;
    else
      this = (this + 1);
    if (v5 == v2)
      break;
    ++v2;
  }
  while (v6 != 0x2000000);
  return this;
}

uint64_t llvm::MachineInstr::getNumExplicitDefs(llvm::MachineInstr *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  int v6;
  int v7;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 4);
  if ((*(_BYTE *)(v1 + 8) & 2) == 0)
    return *(unsigned __int8 *)(v1 + 4);
  v4 = *((_DWORD *)this + 10);
  if (v4 == (_DWORD)v2)
    return *(unsigned __int8 *)(v1 + 4);
  v5 = *((_QWORD *)this + 4);
  v6 = v4 - 1;
  result = v2;
  do
  {
    v7 = *(_DWORD *)(v5 + 32 * v2);
    if ((v7 & 0x10000FF) != 0x1000000)
      break;
    result = ((v7 & 0x2000000) == 0) + result;
    if (v6 == (_DWORD)v2)
      break;
    LODWORD(v2) = v2 + 1;
  }
  while ((v7 & 0x2000000) == 0);
  return result;
}

uint64_t llvm::MachineInstr::bundleWithPred(uint64_t this)
{
  *(_WORD *)(this + 44) |= 4u;
  *(_WORD *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 44) |= 8u;
  return this;
}

uint64_t llvm::MachineInstr::unbundleFromSucc(uint64_t this)
{
  *(_WORD *)(this + 44) &= ~8u;
  *(_WORD *)(*(_QWORD *)(this + 8) + 44) &= ~4u;
  return this;
}

BOOL llvm::MachineInstr::isStackAligningInlineAsm(llvm::MachineInstr *this)
{
  return **((unsigned __int16 **)this + 2) - 1 <= 1 && (*(_BYTE *)(*((_QWORD *)this + 4) + 48) & 2) != 0;
}

unint64_t llvm::MachineInstr::getDebugVariableOp(llvm::MachineInstr *this)
{
  return *((_QWORD *)this + 4) + ((unint64_t)(**((_WORD **)this + 2) != 14) << 6);
}

{
  return *((_QWORD *)this + 4) + ((unint64_t)(**((_WORD **)this + 2) != 14) << 6);
}

uint64_t llvm::MachineInstr::getDebugVariable(llvm::MachineInstr *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 4) + ((unint64_t)(**((_WORD **)this + 2) != 14) << 6) + 16);
}

uint64_t llvm::MachineInstr::getDebugExpressionOp(llvm::MachineInstr *this)
{
  uint64_t v1;

  v1 = 96;
  if (**((_WORD **)this + 2) == 14)
    v1 = 32;
  return *((_QWORD *)this + 4) + v1;
}

{
  uint64_t v1;

  v1 = 96;
  if (**((_WORD **)this + 2) == 14)
    v1 = 32;
  return *((_QWORD *)this + 4) + v1;
}

uint64_t llvm::MachineInstr::getDebugExpression(llvm::MachineInstr *this)
{
  uint64_t v1;

  v1 = 96;
  if (**((_WORD **)this + 2) == 14)
    v1 = 32;
  return *(_QWORD *)(*((_QWORD *)this + 4) + v1 + 16);
}

BOOL llvm::MachineInstr::isDebugEntryValue(llvm::MachineInstr *this)
{
  int v1;
  BOOL v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = **((unsigned __int16 **)this + 2);
  if ((v1 - 13) > 1)
    return 0;
  v2 = v1 == 14;
  v3 = 96;
  if (v2)
    v3 = 32;
  v5 = *(_QWORD *)(*((_QWORD *)this + 4) + v3 + 16) + 24;
  v4 = *(_QWORD **)v5;
  return ((*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) & 0x7FFFFFFF8) != 0 && *v4 == 4099;
}

uint64_t llvm::MachineInstr::getRegClassConstraint(llvm::MachineInstr *this, uint64_t a2, const llvm::TargetInstrInfo *a3, const llvm::TargetRegisterInfo *a4)
{
  unsigned int TiedOperandIdx;
  uint64_t v6;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  TiedOperandIdx = a2;
  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 32);
  if (**((unsigned __int16 **)this + 2) - 1 >= 2)
    return (*(uint64_t (**)(const llvm::TargetInstrInfo *))(*(_QWORD *)a3 + 16))(a3);
  v8 = *(_DWORD *)(*((_QWORD *)this + 4) + 32 * a2);
  if (!(_BYTE)v8)
  {
    if ((v8 & 0x1000000) == 0)
    {
      v9 = v8 & 0x10000FF;
      v10 = v8 & 0xF00000;
      if (v9)
        v11 = 1;
      else
        v11 = v10 == 0;
      if (!v11)
        TiedOperandIdx = llvm::MachineInstr::findTiedOperandIdx(this, a2);
    }
    if (TiedOperandIdx >= 2)
    {
      v12 = *((_DWORD *)this + 10);
      if (v12 >= 3)
      {
        v13 = *((_QWORD *)this + 4);
        v14 = 2;
        while (*(_BYTE *)(v13 + 32 * v14) == 1)
        {
          v15 = v14;
          v16 = *(_DWORD *)(v13 + 32 * v14 + 16);
          v14 += ((unsigned __int16)v16 >> 3) + 1;
          if (v14 > TiedOperandIdx)
          {
            if ((v15 & 0x80000000) != 0)
              return 0;
            if ((v16 & 7u) - 1 >= 3)
            {
              if ((v16 & 7) != 6)
                return 0;
              return (*(uint64_t (**)(const llvm::TargetRegisterInfo *, uint64_t, _QWORD))(*(_QWORD *)a4 + 240))(a4, v6, 0);
            }
            else
            {
              if (v16 < 0x10000)
                return 0;
              return *(_QWORD *)(*((_QWORD *)a4 + 30) + 8 * (HIWORD(v16) - 1));
            }
          }
          if (v14 >= v12)
            return 0;
        }
      }
    }
  }
  return 0;
}

uint64_t llvm::MachineInstr::getRegClassConstraintEffectForVRegImpl(llvm::MachineInstr *a1, uint64_t a2, int a3, uint64_t a4, llvm::TargetInstrInfo *a5, llvm::TargetRegisterInfo *a6)
{
  uint64_t v6;

  v6 = *((_QWORD *)a1 + 4);
  if (!*(_BYTE *)(v6 + 32 * a2) && *(_DWORD *)(v6 + 32 * a2 + 4) == a3)
    return llvm::MachineInstr::getRegClassConstraintEffect(a1, a2, a4, a5, a6);
  else
    return a4;
}

uint64_t llvm::MachineInstr::hasRegisterImplicitUseOperand(uint64_t a1, int a2)
{
  uint64_t v2;
  _DWORD *i;

  v2 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v2)
    return 0;
  for (i = (_DWORD *)(*(_QWORD *)(a1 + 32) + 4); (*(i - 1) & 0x30000FF) != 0x2000000 || *i != a2; i += 8)
  {
    if (!--v2)
      return 0;
  }
  return 1;
}

uint64_t llvm::MachineInstr::findRegisterUseOperandIdx(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v9;
  _QWORD *v10;
  unsigned int *i;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  _BOOL4 v15;

  v4 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v4)
    return 0xFFFFFFFFLL;
  v7 = 0;
  v8 = a2 - 1;
  if (a2)
    v9 = a4 != 0;
  else
    v9 = 0;
  v10 = (_QWORD *)(a4 + 8);
  for (i = (unsigned int *)(*(_QWORD *)(a1 + 32) + 4); ; i += 8)
  {
    v12 = *(i - 1);
    if ((v12 & 0x10000FF) == 0)
    {
      v13 = *i;
      if (*i)
      {
        if (v13 == a2
          || (v8 < 0x3FFFFFFF ? (v14 = v13 >> 30 == 0) : (v14 = 0),
              v14 ? (v15 = v9) : (v15 = 0),
              v15 && llvm::MCRegisterInfo::regsOverlap(v10, v13, a2)))
        {
          if (!a3 || ((v12 >> 26) & ~HIBYTE(v12) & 1) != 0)
            break;
        }
      }
    }
    if (v4 == ++v7)
      return 0xFFFFFFFFLL;
  }
  return v7;
}

uint64_t llvm::MachineInstr::readsWritesVirtualRegister(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  char v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  char v18;
  int v19;
  uint64_t v21;

  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = a3 + 16;
    do
    {
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(_DWORD *)(v13 + v7);
      if (!(_BYTE)v14 && *(_DWORD *)(v13 + v7 + 4) == a2)
      {
        if (a3)
        {
          v15 = *(unsigned int *)(a3 + 8);
          if (v15 >= *(unsigned int *)(a3 + 12))
          {
            v21 = v12;
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v12, v15 + 1, 4);
            v12 = v21;
            v15 = *(unsigned int *)(a3 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a3 + 4 * v15) = v8;
          ++*(_DWORD *)(a3 + 8);
          v14 = *(_DWORD *)(v13 + v7);
        }
        if ((v14 & 0x1000000) != 0)
        {
          v16 = (v14 & 0xFFF00) == 0;
          v17 = (v14 >> 28) & 1;
          if (v16)
            LOBYTE(v17) = 1;
          v11 |= v17;
          v9 |= v17 ^ 1;
        }
        else
        {
          v10 |= (v14 & 0x10000000) == 0;
        }
      }
      ++v8;
      v7 += 32;
    }
    while (v3 != v8);
    if ((v10 & 1) != 0)
    {
      v18 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  v18 = v9 & (v11 ^ 1);
LABEL_20:
  if (((v9 | v11) & 1) != 0)
    v19 = 256;
  else
    v19 = 0;
  return v19 & 0xFFFFFFFE | v18 & 1;
}

uint64_t llvm::MachineInstr::findRegisterDefOperandIdx(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  _BOOL4 v18;
  uint64_t v19;
  BOOL v20;
  _WORD *v21;
  int v22;
  unsigned __int16 v23;
  BOOL v24;
  unsigned __int16 *v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  int v33;

  v5 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v5)
  {
    v8 = 0;
    v9 = a2 - 0x40000000;
    v10 = a2 >> 5;
    v11 = 1 << a2;
    v30 = a5;
    v31 = (_QWORD *)(a5 + 8);
    v13 = *(_QWORD *)(a1 + 32);
    if (a2 - 0x40000000 > 0xC0000000)
      v14 = a4;
    else
      v14 = 0;
    v32 = 1 << a2;
    v33 = a3;
    while (1)
    {
      v15 = *(_DWORD *)(v13 + 32 * v8);
      if (v15 == 12)
        v16 = v14;
      else
        v16 = 0;
      if (v16 == 1 && (*(_DWORD *)(*(_QWORD *)(v13 + 32 * v8 + 16) + 4 * v10) & v11) == 0)
        return v8;
      if ((v15 & 0x10000FF) == 0x1000000)
        break;
LABEL_34:
      if (++v8 == v5)
        return 0xFFFFFFFFLL;
    }
    v17 = *(_DWORD *)(v13 + 32 * v8 + 4);
    v18 = v17 == a2;
    if (v9 >= 0xC0000001 && a5 && v17 != a2)
    {
      if (v17 - 1 > 0x3FFFFFFE)
        goto LABEL_34;
      if (a4)
      {
        v19 = v10;
        v20 = llvm::MCRegisterInfo::regsOverlap(v31, v17, a2);
        v11 = v32;
        a3 = v33;
        a5 = v30;
        v10 = v19;
        if (!v20)
          goto LABEL_34;
LABEL_32:
        if (!a3 || (~v15 & 0x5000000) == 0)
          return v8;
        goto LABEL_34;
      }
      v21 = (_WORD *)(*(_QWORD *)(a5 + 56) + 2 * *(unsigned int *)(*(_QWORD *)(a5 + 8) + 24 * a2 + 8));
      v22 = (unsigned __int16)*v21;
      v23 = v22 + a2;
      v24 = v22 == 0;
      v18 = *v21 != 0;
      v24 = v24 || v17 == v23;
      if (!v24)
      {
        v25 = v21 + 1;
        do
        {
          v27 = *v25++;
          v26 = v27;
          v23 += v27;
          v18 = v27 != 0;
          if (!v27)
            v25 = 0;
          if (v26)
            v28 = v17 == v23;
          else
            v28 = 1;
        }
        while (!v28);
      }
    }
    if (!v18)
      goto LABEL_34;
    goto LABEL_32;
  }
  return 0xFFFFFFFFLL;
}

uint64_t llvm::MachineInstr::findTiedOperandIdx(llvm::MachineInstr *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned __int16 *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v19;
  _QWORD *v20;
  int v21;
  int v22;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int NumGCPtrIdx;
  uint64_t NextMetaArgIdx;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t i;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  void *v47;
  uint64_t v48;
  _QWORD v49[5];

  v2 = a2;
  v49[4] = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 4);
  v4 = *(_DWORD *)(v3 + 32 * a2);
  v5 = (v4 >> 20) & 0xF;
  if (v5 != 15)
    return (v5 - 1);
  v7 = (unsigned __int16 *)*((_QWORD *)this + 2);
  v8 = *v7;
  if ((v8 - 1) >= 2)
  {
    if (v8 == 31)
    {
      v47 = this;
      v28 = *((unsigned __int8 *)v7 + 4);
      v29 = *((_QWORD *)v7 + 1);
      v30 = v28;
      if ((v29 & 2) != 0)
      {
        v40 = *((_DWORD *)this + 10);
        v30 = *((unsigned __int8 *)v7 + 4);
        if (v40 != v28)
        {
          v41 = v40 - 1;
          v42 = *((unsigned __int8 *)v7 + 4);
          v30 = v42;
          do
          {
            v43 = *(_DWORD *)(v3 + 32 * v42);
            if ((v43 & 0x10000FF) != 0x1000000)
              break;
            v30 += (v43 & 0x2000000) == 0;
            if (v41 == v42)
              break;
            ++v42;
          }
          while ((v43 & 0x2000000) == 0);
        }
      }
      v31 = *((_QWORD *)v7 + 4);
      if (v31)
      {
        v32 = -1;
        do
          ++v32;
        while (*(_WORD *)(v31 + 2 * v32));
      }
      else
      {
        v32 = 0;
      }
      LODWORD(v48) = v32 + v30;
      NumGCPtrIdx = llvm::StatepointOpers::getNumGCPtrIdx((llvm::StatepointOpers *)&v47);
      if (*(_DWORD *)(v3 + 32 * NumGCPtrIdx + 16))
        NextMetaArgIdx = NumGCPtrIdx + 1;
      else
        NextMetaArgIdx = 0xFFFFFFFFLL;
      if ((v29 & 2) == 0 || (v44 = *((_DWORD *)this + 10), v44 == v28))
      {
        v35 = v28;
      }
      else
      {
        v45 = v44 - 1;
        v35 = v28;
        do
        {
          v46 = *(_DWORD *)(v3 + 32 * v28);
          if ((v46 & 0x10000FF) != 0x1000000)
            break;
          v35 += (v46 & 0x2000000) == 0;
          if (v45 == v28)
            break;
          ++v28;
        }
        while ((v46 & 0x2000000) == 0);
      }
      if (v31)
      {
        v36 = -1;
        do
          ++v36;
        while (*(_WORD *)(v31 + 2 * v36));
      }
      else
      {
        v36 = 0;
      }
      v37 = v36 + v35;
      if (v36 + v35)
      {
        v38 = 0;
        do
        {
          for (i = 32 * NextMetaArgIdx; *(_BYTE *)(v3 + i); i = 32 * NextMetaArgIdx)
            NextMetaArgIdx = llvm::StackMaps::getNextMetaArgIdx(this, (const llvm::MachineInstr *)NextMetaArgIdx);
          if ((_DWORD)v38 == (_DWORD)v2)
            break;
          if ((_DWORD)NextMetaArgIdx == (_DWORD)v2)
            return v38;
          NextMetaArgIdx = llvm::StackMaps::getNextMetaArgIdx(this, (const llvm::MachineInstr *)NextMetaArgIdx);
          v38 = (v38 + 1);
        }
        while ((_DWORD)v38 != v37);
      }
      return NextMetaArgIdx;
    }
    else if ((v4 & 0x1000000) != 0 && (v22 = *((_DWORD *)this + 10), v22 != 14))
    {
      v2 = 14;
      while (1)
      {
        v24 = *(_DWORD *)(v3 + 32 * v2);
        v25 = v24 & 0x10000FF;
        v26 = (v24 >> 20) & 0xF;
        if (!v25 && v26 == (_DWORD)a2 + 1)
          break;
        v2 = (v2 + 1);
        if (v22 == (_DWORD)v2)
          return *((unsigned int *)this + 10);
      }
    }
    else
    {
      return 14;
    }
  }
  else
  {
    v9 = 0;
    v47 = v49;
    v48 = 0x800000000;
    v10 = *((_DWORD *)this + 10);
    v11 = -1;
    v12 = 2;
    while (1)
    {
      v13 = *((_QWORD *)this + 4);
      v14 = v9;
      if (v9 >= HIDWORD(v48))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, (uint64_t)v49, v9 + 1, 4);
        v14 = v48;
      }
      *((_DWORD *)v47 + v14) = v12;
      v15 = v48 + 1;
      LODWORD(v48) = v48 + 1;
      v16 = *(_DWORD *)(v13 + 32 * v12 + 16);
      v17 = v12 + ((unsigned __int16)v16 >> 3) + 1;
      if (v17 > v2 && v2 > v12)
        v11 = v9;
      if ((v16 & 0x80000000) != 0)
      {
        v19 = HIWORD(v16) & 0x7FFF;
        v20 = v47;
        v21 = *((_DWORD *)v47 + v19);
        if (v11 == v9)
        {
          v2 = v2 - v12 + v21;
          goto LABEL_23;
        }
        if (v11 == v19)
          break;
      }
      v9 = v15;
      v12 = v17;
      if (v17 >= v10)
      {
        v20 = v47;
        goto LABEL_23;
      }
    }
    v2 = v12 + v2 - v21;
LABEL_23:
    if (v20 != v49)
      free(v20);
  }
  return v2;
}

uint64_t llvm::MachineInstr::clearKillInfo(uint64_t this)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(this + 40);
  if ((_DWORD)v1)
  {
    v2 = *(_DWORD **)(this + 32);
    v3 = 32 * v1;
    do
    {
      if ((*v2 & 0x10000FF) == 0)
        *v2 &= ~0x4000000u;
      v2 += 8;
      v3 -= 32;
    }
    while (v3);
  }
  return this;
}

uint64_t llvm::MachineInstr::substituteRegister(uint64_t result, int a2, unsigned int a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t i;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;

  v8 = result;
  if (a3 - 1 <= 0x3FFFFFFE)
  {
    if ((_DWORD)a4)
    {
      result = llvm::MCRegisterInfo::getSubReg(a5 + 1, a3, a4);
      a3 = result;
    }
    v14 = *(unsigned int *)(v8 + 40);
    if ((_DWORD)v14)
    {
      v15 = *(unsigned int **)(v8 + 32);
      v16 = 32 * v14;
      v17 = a3;
      do
      {
        if (!*(_BYTE *)v15 && v15[1] == a2)
          result = llvm::MachineOperand::substPhysReg(v15, v17, (uint64_t)a5);
        v15 += 8;
        v16 -= 32;
      }
      while (v16);
    }
  }
  else
  {
    v9 = *(unsigned int *)(result + 40);
    if ((_DWORD)v9)
    {
      v10 = *(unsigned int **)(result + 32);
      v11 = a3;
      for (i = 32 * v9; i; i -= 32)
      {
        if (*v10 || v10[1] != a2)
          goto LABEL_5;
        if ((_DWORD)a4)
        {
          if (((*v10 >> 8) & 0xFFF) != 0)
          {
            v13 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a5 + 208))(a5, a4);
            result = llvm::MachineOperand::setReg((uint64_t)v10, v11);
            if (!v13)
              goto LABEL_5;
          }
          else
          {
            result = llvm::MachineOperand::setReg((uint64_t)v10, v11);
            LOWORD(v13) = a4;
          }
          *v10 = *v10 & 0xFFF000FF | ((v13 & 0xFFF) << 8);
        }
        else
        {
          result = llvm::MachineOperand::setReg((uint64_t)v10, v11);
        }
LABEL_5:
        v10 += 8;
      }
    }
  }
  return result;
}

BOOL llvm::MachineInstr::isSafeToMove(llvm::MachineInstr *this, llvm::AAResults *a2, BOOL *a3)
{
  unsigned __int16 *v6;
  int v7;
  unsigned int v8;
  int v9;
  char v10;
  uint64_t v11;
  llvm::MachineInstr *v12;
  llvm::MachineInstr *v13;
  llvm::MachineInstr *v14;
  _BOOL8 result;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;
  unsigned __int16 *v19;
  __int16 v20;
  uint64_t v21;
  llvm::MachineInstr *v22;
  llvm::MachineInstr *v23;

  v6 = (unsigned __int16 *)*((_QWORD *)this + 2);
  v7 = *v6;
  if ((unsigned __int16)(v7 - 1) <= 1u && (*(_BYTE *)(*((_QWORD *)this + 4) + 48) & 0x10) != 0)
    goto LABEL_30;
  v8 = *((unsigned __int16 *)this + 22);
  v18 = (v8 & 0xC) == 0;
  v9 = (v8 >> 2) & 1;
  if (v18)
    v10 = 1;
  else
    v10 = v9;
  v11 = *((_QWORD *)v6 + 1);
  if ((v10 & 1) != 0)
  {
    if ((v11 & 0x100080) != 0)
    {
LABEL_30:
      result = 0;
      *a3 = 1;
      return result;
    }
  }
  else
  {
    if ((v11 & 0x100000) != 0)
      goto LABEL_30;
    v12 = this;
    while ((*((_WORD *)v12 + 22) & 8) != 0)
    {
      v12 = (llvm::MachineInstr *)*((_QWORD *)v12 + 1);
      if ((*(_BYTE *)(*((_QWORD *)v12 + 2) + 10) & 0x10) != 0)
        goto LABEL_30;
    }
    if ((v11 & 0x80) != 0)
      goto LABEL_30;
    v13 = this;
    while ((*((_WORD *)v13 + 22) & 8) != 0)
    {
      v13 = (llvm::MachineInstr *)*((_QWORD *)v13 + 1);
      if ((*(_BYTE *)(*((_QWORD *)v13 + 2) + 8) & 0x80) != 0)
        goto LABEL_30;
    }
  }
  if (!*v6 || v7 == 69)
    goto LABEL_30;
  if ((unsigned __int16)(v7 - 1) > 1u || (*(_BYTE *)(*((_QWORD *)this + 4) + 48) & 8) == 0)
  {
    if ((v10 & 1) != 0)
    {
      if ((v11 & 0x80000) == 0)
        goto LABEL_32;
    }
    else if ((v11 & 0x80000) == 0)
    {
      v14 = this;
      while ((*((_WORD *)v14 + 22) & 8) != 0)
      {
        v14 = (llvm::MachineInstr *)*((_QWORD *)v14 + 1);
        if ((*(_BYTE *)(*((_QWORD *)v14 + 2) + 10) & 8) != 0)
          goto LABEL_29;
      }
      goto LABEL_32;
    }
  }
LABEL_29:
  if (llvm::MachineInstr::hasOrderedMemoryRef(this))
    goto LABEL_30;
  v6 = (unsigned __int16 *)*((_QWORD *)this + 2);
  v7 = *v6;
LABEL_32:
  v16 = v7 - 3;
  if (v16 < 0xF && ((0x7C0Fu >> v16) & 1) != 0)
    return 0;
  v17 = *((_QWORD *)v6 + 1);
  v18 = (*((_WORD *)this + 22) & 0xC) != 0 && (*((_WORD *)this + 22) & 4) == 0;
  if (!v18)
  {
    if ((v17 & 0x200) == 0)
      goto LABEL_39;
    return 0;
  }
  if ((v17 & 0x200) != 0)
    return 0;
  v23 = this;
  result = 0;
  while ((*((_WORD *)v23 + 22) & 8) != 0)
  {
    v23 = (llvm::MachineInstr *)*((_QWORD *)v23 + 1);
    if ((*(_BYTE *)(*((_QWORD *)v23 + 2) + 9) & 2) != 0)
      return result;
  }
LABEL_39:
  if (sub_1C5166344((uint64_t)this) || llvm::MachineInstr::hasUnmodeledSideEffects(this))
    return 0;
  v19 = (unsigned __int16 *)*((_QWORD *)this + 2);
  if (*v19 - 1 > 1 || (*(_BYTE *)(*((_QWORD *)this + 4) + 48) & 8) == 0)
  {
    v20 = *((_WORD *)this + 22);
    v21 = *((_QWORD *)v19 + 1);
    if ((v20 & 0xC) == 0 || (v20 & 4) != 0)
    {
      if ((v21 & 0x80000) == 0)
        return 1;
    }
    else if ((v21 & 0x80000) == 0)
    {
      v22 = this;
      while ((*((_WORD *)v22 + 22) & 8) != 0)
      {
        v22 = (llvm::MachineInstr *)*((_QWORD *)v22 + 1);
        if ((*(_BYTE *)(*((_QWORD *)v22 + 2) + 10) & 8) != 0)
          goto LABEL_57;
      }
      return 1;
    }
  }
LABEL_57:
  if ((llvm::MachineInstr::isDereferenceableInvariantLoad(this, a2) & 1) != 0)
    return 1;
  return !*a3;
}

BOOL llvm::MachineInstr::hasOrderedMemoryRef(llvm::MachineInstr *this)
{
  unsigned __int16 *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  _BOOL8 result;
  llvm::MachineInstr *v8;
  llvm::MachineInstr *v9;
  llvm::MachineInstr *v10;
  char *v11;
  unint64_t v12;
  _DWORD *v13;
  BOOL v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;

  v2 = (unsigned __int16 *)*((_QWORD *)this + 2);
  v3 = *v2 - 1;
  if (v3 > 1 || (*(_BYTE *)(*((_QWORD *)this + 4) + 48) & 0x10) == 0)
  {
    v4 = *((unsigned __int16 *)this + 22);
    v14 = (v4 & 0xC) == 0;
    v5 = (v4 >> 2) & 1;
    if (v14)
      LOBYTE(v5) = 1;
    v6 = *((_QWORD *)v2 + 1);
    if ((v5 & 1) != 0)
    {
      if ((v6 & 0x100000) != 0)
        goto LABEL_28;
    }
    else
    {
      if ((v6 & 0x100000) != 0)
        goto LABEL_28;
      v8 = this;
      while ((*((_WORD *)v8 + 22) & 8) != 0)
      {
        v8 = (llvm::MachineInstr *)*((_QWORD *)v8 + 1);
        if ((*(_BYTE *)(*((_QWORD *)v8 + 2) + 10) & 0x10) != 0)
          goto LABEL_28;
      }
    }
    if (v3 > 1 || (*(_BYTE *)(*((_QWORD *)this + 4) + 48) & 8) == 0)
    {
      if ((v5 & 1) != 0)
      {
        if ((v6 & 0x80080) != 0)
          goto LABEL_28;
      }
      else
      {
        if ((v6 & 0x80000) != 0)
          goto LABEL_28;
        v9 = this;
        while ((*((_WORD *)v9 + 22) & 8) != 0)
        {
          v9 = (llvm::MachineInstr *)*((_QWORD *)v9 + 1);
          if ((*(_BYTE *)(*((_QWORD *)v9 + 2) + 10) & 8) != 0)
            goto LABEL_28;
        }
        if ((v6 & 0x80) != 0)
          goto LABEL_28;
        v10 = this;
        while ((*((_WORD *)v10 + 22) & 8) != 0)
        {
          v10 = (llvm::MachineInstr *)*((_QWORD *)v10 + 1);
          if ((*(_BYTE *)(*((_QWORD *)v10 + 2) + 8) & 0x80) != 0)
            goto LABEL_28;
        }
      }
      result = llvm::MachineInstr::hasUnmodeledSideEffects(this);
      if (!result)
        return result;
    }
  }
LABEL_28:
  v11 = (char *)this + 48;
  v12 = *((_QWORD *)this + 6);
  if (v12 < 8)
    return 1;
  if ((v12 & 7) != 0)
  {
    v13 = (_DWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
    v14 = (*((_QWORD *)this + 6) & 7) != 3 || v13 == 0;
    if (v14 || !*v13)
      return 1;
  }
  else
  {
    v12 &= 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v11 = v12;
    if (!v12)
      return 0;
  }
  if ((v12 & 7) == 0)
  {
    *((_QWORD *)this + 6) = v12 & 0xFFFFFFFFFFFFFFF8;
    v18 = (char *)this + 56;
    goto LABEL_44;
  }
  result = 0;
  if ((v12 & 7) == 3)
  {
    v15 = (int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v17 = *v15;
      v11 = (char *)(v15 + 2);
      v16 = v17;
      if ((_DWORD)v17)
      {
        v18 = &v11[8 * v16];
LABEL_44:
        while ((*(_WORD *)(*(_QWORD *)v11 + 36) & 0xE00) == 0 && (*(_WORD *)(*(_QWORD *)v11 + 32) & 4) == 0)
        {
          v11 += 8;
          if (v11 == v18)
            return 0;
        }
        return 1;
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1C5166344(uint64_t a1)
{
  __int16 v1;
  uint64_t v2;

  v1 = *(_WORD *)(a1 + 44);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if ((v1 & 0xC) != 0 && (v1 & 4) == 0)
  {
    if ((v2 & 0x200000) == 0)
    {
      while ((*(_WORD *)(a1 + 44) & 8) != 0)
      {
        a1 = *(_QWORD *)(a1 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 10) & 0x20) != 0)
          return (v1 & 0x4000) == 0;
      }
      return 0;
    }
  }
  else if ((v2 & 0x200000) == 0)
  {
    return 0;
  }
  return (v1 & 0x4000) == 0;
}

BOOL llvm::MachineInstr::hasUnmodeledSideEffects(llvm::MachineInstr *this)
{
  unsigned __int16 *v1;
  uint64_t v2;
  llvm::MachineInstr *v5;

  v1 = (unsigned __int16 *)*((_QWORD *)this + 2);
  v2 = *((_QWORD *)v1 + 1);
  if ((*((_WORD *)this + 22) & 0xC) != 0 && (*((_WORD *)this + 22) & 4) == 0)
  {
    if ((v2 & 0x1000000) != 0)
      return 1;
    v5 = this;
    while ((*((_WORD *)v5 + 22) & 8) != 0)
    {
      v5 = (llvm::MachineInstr *)*((_QWORD *)v5 + 1);
      if ((*(_BYTE *)(*((_QWORD *)v5 + 2) + 11) & 1) != 0)
        return 1;
    }
  }
  else if ((v2 & 0x1000000) != 0)
  {
    return 1;
  }
  return *v1 - 1 <= 1 && (*(_BYTE *)(*((_QWORD *)this + 4) + 48) & 1) != 0;
}

uint64_t llvm::MachineInstr::isDereferenceableInvariantLoad(llvm::MachineInstr *this, llvm::AAResults *a2)
{
  unsigned __int16 *v3;
  uint64_t v4;
  llvm::MachineInstr *v6;
  unint64_t v7;
  char *v8;
  _DWORD *v9;
  BOOL v10;
  uint64_t result;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  const char *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  _QWORD v27[2];
  __int128 v28;
  __int128 v29;

  v3 = (unsigned __int16 *)*((_QWORD *)this + 2);
  if (*v3 - 1 > 1 || (*(_BYTE *)(*((_QWORD *)this + 4) + 48) & 8) == 0)
  {
    v4 = *((_QWORD *)v3 + 1);
    if ((*((_WORD *)this + 22) & 0xC) != 0 && (*((_WORD *)this + 22) & 4) == 0)
    {
      if ((v4 & 0x80000) == 0)
      {
        v6 = this;
        while ((*((_WORD *)v6 + 22) & 8) != 0)
        {
          v6 = (llvm::MachineInstr *)*((_QWORD *)v6 + 1);
          if ((*(_BYTE *)(*((_QWORD *)v6 + 2) + 10) & 8) != 0)
            goto LABEL_13;
        }
        return 0;
      }
    }
    else if ((v4 & 0x80000) == 0)
    {
      return 0;
    }
  }
LABEL_13:
  v8 = (char *)this + 48;
  v7 = *((_QWORD *)this + 6);
  if (v7 < 8)
    return 0;
  if ((v7 & 7) != 0)
  {
    v9 = (_DWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
    v10 = (*((_QWORD *)this + 6) & 7) != 3 || v9 == 0;
    if (v10 || !*v9)
      return 0;
  }
  else
  {
    v7 &= 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v8 = v7;
    if (!v7)
      return 1;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 32) + 56);
  if ((v7 & 7) == 0)
  {
    *((_QWORD *)this + 6) = v7 & 0xFFFFFFFFFFFFFFF8;
    v16 = (char *)this + 56;
    goto LABEL_29;
  }
  result = 1;
  if ((v7 & 7) == 3)
  {
    v13 = (int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v15 = *v13;
      v8 = (char *)(v13 + 2);
      v14 = v15;
      if ((_DWORD)v15)
      {
        v16 = &v8[8 * v14];
        do
        {
LABEL_29:
          v17 = *(uint64_t **)v8;
          if ((*(_WORD *)(*(_QWORD *)v8 + 36) & 0xE00) != 0)
            return 0;
          v18 = *((unsigned __int16 *)v17 + 16);
          if ((v18 & 6) != 0)
            return 0;
          if ((~v18 & 0x30) != 0)
          {
            v19 = *v17;
            v20 = *v17 & 0xFFFFFFFFFFFFFFF8;
            if ((*v17 & 4) != 0 && v20)
            {
              if (((*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v20 + 24))(*v17 & 0xFFFFFFFFFFFFFFF8, v12) & 1) != 0)goto LABEL_46;
              v19 = *v17;
              v20 = *v17 & 0xFFFFFFFFFFFFFFF8;
            }
            v21 = v19 & 4;
            if (v20)
              v22 = v21 == 0;
            else
              v22 = 0;
            if (!v22 || !a2)
              return 0;
            if ((v17[3] & 0xFFFFFFFFFFFFFFF9) != 0)
            {
              v24 = (unint64_t)(sub_1C4825F50((unint64_t *)v17 + 3) + 7) >> 3;
              if ((_DWORD)v23 == 1)
              {
                v26 = v24;
                v24 = v26;
              }
            }
            else
            {
              v24 = -2;
            }
            v27[0] = v20;
            v27[1] = v24;
            v25 = *(_OWORD *)(v17 + 7);
            v28 = *(_OWORD *)(v17 + 5);
            v29 = v25;
            if ((llvm::AAResults::pointsToConstantMemory((uint64_t)a2, (uint64_t)v27, 0) & 1) == 0)
              return 0;
          }
LABEL_46:
          v8 += 8;
          result = 1;
        }
        while (v8 != v16);
      }
    }
  }
  return result;
}

uint64_t llvm::MachineInstr::mayAlias(llvm::MachineInstr *this, llvm::AAResults *a2, const llvm::MachineInstr *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  char v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  llvm::MachineInstr *v24;
  const llvm::MachineInstr *v25;
  llvm::MachineInstr *v26;
  const llvm::MachineInstr *v27;
  llvm::MachineInstr *v28;
  unsigned int v29;
  uint64_t result;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  int v35;
  int *v36;
  int v37;
  int *v38;
  unint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  int *v46;
  BOOL v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  int *v51;
  _QWORD *v52;
  uint64_t v53;
  const char *v54;
  const char *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  int v64;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  BOOL v71;
  int64_t v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  unint64_t v81;
  llvm::MachineInstr *v82;
  const llvm::MachineInstr *v83;
  const llvm::MachineInstr *v84;
  char *v85;
  unint64_t *v86;
  unint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  int *v90;
  _QWORD *v91;
  unint64_t *v92;
  _QWORD *v93;
  int64_t v94;
  uint64_t v95;
  int64_t v96;
  unint64_t v97;
  _QWORD v98[2];
  __int128 v99;
  __int128 v100;
  _QWORD v101[2];
  __int128 v102;
  __int128 v103;

  v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 32);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 104))(*(_QWORD *)(v8 + 16));
  v10 = v9;
  v11 = *(_QWORD *)(v8 + 56);
  v12 = *((unsigned __int16 *)this + 22);
  v47 = (v12 & 0xC) == 0;
  v13 = (v12 >> 2) & 1;
  if (v47)
    v14 = 1;
  else
    v14 = v13;
  v15 = (unsigned __int16 *)*((_QWORD *)this + 2);
  v16 = *((_QWORD *)v15 + 1);
  if ((v14 & 1) != 0)
  {
    if ((v16 & 0x80) != 0)
      return 1;
  }
  else
  {
    if ((v16 & 0x80) != 0)
      return 1;
    v24 = this;
    while ((*((_WORD *)v24 + 22) & 8) != 0)
    {
      v24 = (llvm::MachineInstr *)*((_QWORD *)v24 + 1);
      if ((*(_BYTE *)(*((_QWORD *)v24 + 2) + 8) & 0x80) != 0)
        return 1;
    }
  }
  v17 = *((unsigned __int16 *)a3 + 22);
  v47 = (v17 & 0xC) == 0;
  v18 = (v17 >> 2) & 1;
  if (v47)
    v19 = 1;
  else
    v19 = v18;
  v20 = (unsigned __int16 *)*((_QWORD *)a3 + 2);
  v21 = *((_QWORD *)v20 + 1);
  if ((v19 & 1) != 0)
  {
    if ((v21 & 0x80) != 0)
      return 1;
  }
  else
  {
    if ((v21 & 0x80) != 0)
      return 1;
    v25 = a3;
    while ((*((_WORD *)v25 + 22) & 8) != 0)
    {
      v25 = (const llvm::MachineInstr *)*((_QWORD *)v25 + 1);
      if ((*(_BYTE *)(*((_QWORD *)v25 + 2) + 8) & 0x80) != 0)
        return 1;
    }
  }
  v22 = *v15 - 1;
  if (v22 <= 1)
  {
    v23 = *(_QWORD *)(*((_QWORD *)this + 4) + 48);
    if ((v23 & 0x10) != 0)
      goto LABEL_52;
  }
  if ((v14 & 1) != 0)
  {
    if ((v16 & 0x100000) == 0)
      goto LABEL_15;
  }
  else if ((v16 & 0x100000) == 0)
  {
    v26 = this;
    while ((*((_WORD *)v26 + 22) & 8) != 0)
    {
      v26 = (llvm::MachineInstr *)*((_QWORD *)v26 + 1);
      if ((*(_BYTE *)(*((_QWORD *)v26 + 2) + 10) & 0x10) != 0)
        goto LABEL_39;
    }
LABEL_15:
    if (*v20 - 1 > 1 || (*(_BYTE *)(*((_QWORD *)a3 + 4) + 48) & 0x10) == 0)
    {
      if ((v19 & 1) != 0)
      {
        if ((v21 & 0x100000) == 0)
          return 0;
      }
      else if ((v21 & 0x100000) == 0)
      {
        v27 = a3;
        while ((*((_WORD *)v27 + 22) & 8) != 0)
        {
          v27 = (const llvm::MachineInstr *)*((_QWORD *)v27 + 1);
          if ((*(_BYTE *)(*((_QWORD *)v27 + 2) + 10) & 0x10) != 0)
            goto LABEL_39;
        }
        return 0;
      }
    }
  }
LABEL_39:
  if (v22 > 1)
    goto LABEL_40;
  v23 = *(_QWORD *)(*((_QWORD *)this + 4) + 48);
LABEL_52:
  if ((v23 & 8) != 0)
    goto LABEL_53;
LABEL_40:
  if ((v14 & 1) != 0)
  {
    if ((v16 & 0x80000) != 0)
      goto LABEL_53;
  }
  else
  {
    if ((v16 & 0x80000) != 0)
      goto LABEL_53;
    v28 = this;
    while ((*((_WORD *)v28 + 22) & 8) != 0)
    {
      v28 = (llvm::MachineInstr *)*((_QWORD *)v28 + 1);
      if ((*(_BYTE *)(*((_QWORD *)v28 + 2) + 10) & 8) != 0)
        goto LABEL_53;
    }
  }
  if (v22 > 1 || (*(_BYTE *)(*((_QWORD *)this + 4) + 48) & 0x10) == 0)
  {
    if ((v14 & 1) != 0)
    {
      if ((v16 & 0x100000) == 0)
        return 0;
    }
    else if ((v16 & 0x100000) == 0)
    {
      v82 = this;
      while ((*((_WORD *)v82 + 22) & 8) != 0)
      {
        v82 = (llvm::MachineInstr *)*((_QWORD *)v82 + 1);
        if ((*(_BYTE *)(*((_QWORD *)v82 + 2) + 10) & 0x10) != 0)
          goto LABEL_53;
      }
      return 0;
    }
  }
LABEL_53:
  v29 = *v20 - 1;
  if (v29 > 1 || (*(_BYTE *)(*((_QWORD *)a3 + 4) + 48) & 8) == 0)
  {
    if ((v19 & 1) != 0)
    {
      if ((v21 & 0x80000) != 0)
        goto LABEL_59;
    }
    else
    {
      if ((v21 & 0x80000) != 0)
        goto LABEL_59;
      v83 = a3;
      while ((*((_WORD *)v83 + 22) & 8) != 0)
      {
        v83 = (const llvm::MachineInstr *)*((_QWORD *)v83 + 1);
        if ((*(_BYTE *)(*((_QWORD *)v83 + 2) + 10) & 8) != 0)
          goto LABEL_59;
      }
    }
    if (v29 > 1 || (*(_BYTE *)(*((_QWORD *)a3 + 4) + 48) & 0x10) == 0)
    {
      if ((v19 & 1) != 0)
      {
        if ((v21 & 0x100000) == 0)
          return 0;
      }
      else if ((v21 & 0x100000) == 0)
      {
        v84 = a3;
        while ((*((_WORD *)v84 + 22) & 8) != 0)
        {
          v84 = (const llvm::MachineInstr *)*((_QWORD *)v84 + 1);
          if ((*(_BYTE *)(*((_QWORD *)v84 + 2) + 10) & 0x10) != 0)
            goto LABEL_59;
        }
        return 0;
      }
    }
  }
LABEL_59:
  if (((*(uint64_t (**)(uint64_t, llvm::MachineInstr *, const llvm::MachineInstr *))(*(_QWORD *)v9 + 1064))(v9, this, a3) & 1) != 0)return 0;
  v32 = (unint64_t *)((char *)this + 48);
  v31 = *((_QWORD *)this + 6);
  if (v31 < 8)
    return 1;
  if ((v31 & 7) == 0)
  {
    v31 &= 0xFFFFFFFFFFFFFFF8;
    *v32 = v31;
    goto LABEL_68;
  }
  result = 1;
  if ((*((_QWORD *)this + 6) & 7) == 3
    && (v31 & 0xFFFFFFFFFFFFFFF8) != 0
    && *(_DWORD *)(v31 & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_68:
    v34 = (unint64_t *)((char *)a3 + 48);
    v33 = *((_QWORD *)a3 + 6);
    if (v33 >= 8)
    {
      if ((v33 & 7) != 0)
      {
        result = 1;
        if ((*((_QWORD *)a3 + 6) & 7) != 3
          || (v33 & 0xFFFFFFFFFFFFFFF8) == 0
          || !*(_DWORD *)(v33 & 0xFFFFFFFFFFFFFFF8))
        {
          return result;
        }
      }
      else
      {
        v33 &= 0xFFFFFFFFFFFFFFF8;
        *v34 = v33;
        v31 = *v32;
      }
      if (v31 < 8)
      {
        v35 = 0;
      }
      else if ((v31 & 7) != 0)
      {
        v35 = 0;
        if ((v31 & 7) == 3)
        {
          v36 = (int *)(v31 & 0xFFFFFFFFFFFFFFF8);
          if (v36)
            v35 = *v36;
        }
      }
      else
      {
        *v32 = v31 & 0xFFFFFFFFFFFFFFF8;
        v33 = *v34;
        v35 = 1;
      }
      if (v33 < 8)
      {
        v37 = 0;
      }
      else if ((v33 & 7) != 0)
      {
        v37 = 0;
        if ((v33 & 7) == 3)
        {
          v38 = (int *)(v33 & 0xFFFFFFFFFFFFFFF8);
          if (v38)
            v37 = *v38;
        }
      }
      else
      {
        *v34 = v33 & 0xFFFFFFFFFFFFFFF8;
        v37 = 1;
      }
      if (v37 * v35 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 1088))(v10))
      {
        v39 = *v32;
        if (*v32 < 8)
          return 0;
        v87 = (unint64_t *)((char *)a3 + 48);
        if ((v39 & 7) != 0)
        {
          result = 0;
          if ((*v32 & 7) != 3)
            return result;
          v40 = (int *)(v39 & 0xFFFFFFFFFFFFFFF8);
          if ((v39 & 0xFFFFFFFFFFFFFFF8) == 0)
            return result;
          v42 = *v40;
          v32 = (unint64_t *)(v40 + 2);
          v41 = v42;
          if (!(_DWORD)v42)
            return 0;
          v43 = &v32[v41];
        }
        else
        {
          *((_QWORD *)this + 6) = v39 & 0xFFFFFFFFFFFFFFF8;
          v43 = (unint64_t *)((char *)this + 56);
        }
        v86 = v43;
        v85 = (char *)a3 + 56;
        while (1)
        {
          v44 = *v87;
          if (*v87 >= 8)
          {
            v45 = (_QWORD *)*v32;
            if ((v44 & 7) == 0)
            {
              v49 = (int *)v87;
              *v87 = v44 & 0xFFFFFFFFFFFFFFF8;
              v51 = (int *)v85;
LABEL_109:
              v90 = v51;
              v92 = v45 + 3;
              v93 = v45;
              while (2)
              {
                v52 = *(_QWORD **)v49;
                v53 = *(_QWORD *)(*(_QWORD *)v49 + 8);
                v96 = v53;
                if (v53 >= v45[1])
                  v53 = v45[1];
                v94 = v45[1];
                v95 = v53;
                if ((v45[3] & 0xFFFFFFFFFFFFFFF9) != 0)
                {
                  v97 = (unint64_t)(sub_1C4825F50(v92) + 7) >> 3;
                  if ((_DWORD)v54 == 1)
                }
                else
                {
                  v97 = -1;
                }
                if ((v52[3] & 0xFFFFFFFFFFFFFFF9) != 0)
                {
                  v56 = (unint64_t)(sub_1C4825F50(v52 + 3) + 7) >> 3;
                  if ((_DWORD)v55 == 1)
                  {
                    v81 = v56;
                    v56 = v81;
                  }
                }
                else
                {
                  v56 = -1;
                }
                v57 = *v45;
                v58 = *v45 & 0xFFFFFFFFFFFFFFF8;
                if ((*v45 & 4) != 0)
                  v59 = 0;
                else
                  v59 = *v45 & 0xFFFFFFFFFFFFFFF8;
                v91 = v52;
                v60 = *v52;
                v61 = *v52 & 0xFFFFFFFFFFFFFFF8;
                if ((*v52 & 4) != 0)
                  v62 = 0;
                else
                  v62 = *v52 & 0xFFFFFFFFFFFFFFF8;
                if (v59)
                  v63 = v62 == 0;
                else
                  v63 = 1;
                v64 = !v63;
                if (v64 == 1 && v59 == v62)
                  goto LABEL_146;
                v89 = v56;
                v66 = v58 & (v57 << 61 >> 63);
                if (!v66
                  || !v62
                  || (v88 = v66,
                      v67 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 40))(v66, v11),
                      v66 = v88,
                      v67))
                {
                  v68 = v61 & (v60 << 61 >> 63);
                  if (!v59
                    || !v68
                    || (v69 = v66,
                        v70 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 40))(v68, v11),
                        v66 = v69,
                        v70))
                  {
                    v56 = v89;
                    if (!v66 || (v68 ? (v71 = v66 == v68) : (v71 = 0), !v71))
                    {
                      v74 = v64 ^ 1;
                      if (!a2)
                        v74 = 1;
                      if ((v74 & 1) != 0)
                        return 1;
                      if (v97 == -1)
                        v75 = -1;
                      else
                        v75 = v94 - v95 + v97;
                      v76 = v96 - v95 + v89;
                      if (v89 == -1)
                        v76 = -1;
                      if (v75 > 0x7FFFFFFFFFFFFFFBLL)
                        v75 = -2;
                      v77 = 0uLL;
                      v78 = 0uLL;
                      v79 = 0uLL;
                      if (a4)
                      {
                        v78 = *(_OWORD *)(v93 + 5);
                        v79 = *(_OWORD *)(v93 + 7);
                      }
                      v101[0] = v59;
                      v101[1] = v75;
                      v102 = v78;
                      v103 = v79;
                      if (v76 > 0x7FFFFFFFFFFFFFFBLL)
                        v76 = -2;
                      v80 = 0uLL;
                      if (a4)
                      {
                        v77 = *(_OWORD *)(v91 + 5);
                        v80 = *(_OWORD *)(v91 + 7);
                      }
                      v98[0] = v62;
                      v98[1] = v76;
                      v99 = v77;
                      v100 = v80;
                      if (llvm::AAResults::alias((uint64_t)a2, (uint64_t)v101, (uint64_t)v98))
                        return 1;
                      goto LABEL_152;
                    }
LABEL_146:
                    result = 1;
                    if (v97 == -1 || v56 == -1)
                      return result;
                    v72 = v96;
                    if (v94 <= v96)
                    {
                      v73 = v97;
                    }
                    else
                    {
                      v72 = v94;
                      v73 = v56;
                    }
                    if ((uint64_t)(v73 + v95) > v72)
                      return result;
                  }
                }
LABEL_152:
                v49 += 2;
                v45 = v93;
                if (v49 == v90)
                  goto LABEL_174;
                continue;
              }
            }
            v46 = (int *)(v44 & 0xFFFFFFFFFFFFFFF8);
            v47 = (*v87 & 7) != 3 || v46 == 0;
            if (!v47)
            {
              v50 = *v46;
              v49 = v46 + 2;
              v48 = v50;
              if ((_DWORD)v50)
              {
                v51 = &v49[2 * v48];
                goto LABEL_109;
              }
            }
          }
LABEL_174:
          result = 0;
          if (++v32 == v86)
            return result;
        }
      }
    }
    return 1;
  }
  return result;
}

BOOL llvm::MachineInstr::isLoadFoldBarrier(llvm::MachineInstr *this)
{
  unsigned __int16 *v1;
  int v2;
  uint64_t v3;
  _BOOL4 hasUnmodeledSideEffects;
  uint64_t v6;
  llvm::MachineInstr *v7;
  llvm::MachineInstr *v8;

  v1 = (unsigned __int16 *)*((_QWORD *)this + 2);
  v2 = *v1;
  if ((v2 - 1) <= 1 && (*(_BYTE *)(*((_QWORD *)this + 4) + 48) & 0x10) != 0)
    return 1;
  v3 = *((_QWORD *)v1 + 1);
  if ((*((_WORD *)this + 22) & 0xC) != 0 && (*((_WORD *)this + 22) & 4) == 0)
  {
    if ((v3 & 0x100000) == 0)
    {
      v7 = this;
      while ((*((_WORD *)v7 + 22) & 8) != 0)
      {
        v7 = (llvm::MachineInstr *)*((_QWORD *)v7 + 1);
        if ((*(_BYTE *)(*((_QWORD *)v7 + 2) + 10) & 0x10) != 0)
          return 1;
      }
      if ((v3 & 0x80) == 0)
      {
        v8 = this;
        while ((*((_WORD *)v8 + 22) & 8) != 0)
        {
          v8 = (llvm::MachineInstr *)*((_QWORD *)v8 + 1);
          v6 = 1;
          if ((*(_BYTE *)(*((_QWORD *)v8 + 2) + 8) & 0x80) != 0)
            return v6;
        }
        goto LABEL_8;
      }
    }
    return 1;
  }
  if ((v3 & 0x100080) != 0)
    return 1;
LABEL_8:
  hasUnmodeledSideEffects = llvm::MachineInstr::hasUnmodeledSideEffects(this);
  return v2 != 23 && hasUnmodeledSideEffects;
}

BOOL llvm::MachineInstr::allDefsAreDead(llvm::MachineInstr *this)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _BOOL8 result;

  v1 = *((unsigned int *)this + 10);
  if (!(_DWORD)v1)
    return 1;
  v2 = (_DWORD *)*((_QWORD *)this + 4);
  v3 = 32 * v1;
  do
  {
    v4 = (~*v2 & 0x5000000) != 0 && (*v2 & 0x10000FF) == 0x1000000;
    result = !v4;
    if (v4)
      break;
    v2 += 8;
    v3 -= 32;
  }
  while (v3);
  return result;
}

void llvm::MachineInstr::copyImplicitOps(llvm::MachineInstr *this, llvm::MachineFunction *a2, const llvm::MachineInstr *a3)
{
  uint64_t v3;
  uint64_t v4;
  const llvm::MachineOperand *v7;
  uint64_t v8;

  v3 = *((unsigned int *)a3 + 10);
  v4 = *(unsigned __int16 *)(*((_QWORD *)a3 + 2) + 2);
  if (v4 != v3)
  {
    v7 = (const llvm::MachineOperand *)(*((_QWORD *)a3 + 4) + 32 * v4);
    v8 = 32 * v3 - 32 * v4;
    do
    {
      if ((*(_DWORD *)v7 & 0x20000FF) == 0x2000000 || *(_DWORD *)v7 == 12)
        llvm::MachineInstr::addOperand(this, a2, v7);
      v7 = (const llvm::MachineOperand *)((char *)v7 + 32);
      v8 -= 32;
    }
    while (v8);
  }
}

uint64_t llvm::MachineInstr::hasComplexRegisterTies(llvm::MachineInstr *this)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t i;
  int v8;
  __int16 v9;
  int v10;
  int v11;

  v1 = *((_QWORD *)this + 2);
  if (*(_WORD *)v1 == 31)
    return 1;
  v4 = *((unsigned int *)this + 10);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = 0;
    for (i = 4; ; i += 6)
    {
      v8 = *(_DWORD *)(*((_QWORD *)this + 4) + v5);
      if ((v8 & 0x10000FF) == 0)
      {
        if (v6 >= *(unsigned __int16 *)(v1 + 2))
        {
          v10 = -1;
        }
        else
        {
          v9 = *(_WORD *)(*(_QWORD *)(v1 + 40) + i);
          v10 = (v9 & 1) != 0 ? v9 >> 4 : -1;
        }
        v11 = (v8 & 0xF00000) != 0 ? llvm::MachineInstr::findTiedOperandIdx(this, v6) : -1;
        if (v10 != v11)
          break;
      }
      ++v6;
      v5 += 32;
      if (v4 == v6)
        return 0;
    }
    return 1;
  }
  return 0;
}

uint64_t llvm::MachineInstr::getTypeToPrint(uint64_t a1, unsigned int a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v4 + 32 * a2))
    return 0;
  v5 = a2;
  v6 = *(_QWORD *)(a1 + 16);
  if ((*(_BYTE *)(v6 + 8) & 2) != 0
    || *(unsigned __int16 *)(v6 + 2) <= a2
    || (v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 40) + 6 * a2 + 3) - 6, v7 >= 6))
  {
    v10 = *(_DWORD *)(v4 + 32 * v5 + 4);
    if (v10 < 0)
    {
      v11 = v10 & 0x7FFFFFFF;
      if (v11 < *(_DWORD *)(a4 + 432))
        return *(_QWORD *)(*(_QWORD *)(a4 + 424) + 8 * v11);
    }
    return 0;
  }
  v8 = *a3;
  if ((*a3 & 1) != 0)
    v9 = (1 << v7) & (v8 >> 1) & ~(-1 << (v8 >> 58));
  else
    v9 = *(_QWORD *)(*(_QWORD *)v8 + 8 * (v7 >> 6)) & (1 << v7);
  if (v9)
    return 0;
  v13 = *(_DWORD *)(v4 + 32 * v5 + 4);
  if ((v13 & 0x80000000) == 0)
    return 0;
  v14 = v13 & 0x7FFFFFFF;
  if (v14 >= *(_DWORD *)(a4 + 432))
    return 0;
  v12 = *(_QWORD *)(*(_QWORD *)(a4 + 424) + 8 * v14);
  if ((v12 & 0xFFFFFFFFFFFFFFF9) != 0)
    sub_1C496F8DC(a3, v7);
  return v12;
}

void ***llvm::MachineInstr::print(llvm::MachineInstr *this, llvm::raw_ostream *a2, llvm::ModuleSlotTracker *a3, char a4, char a5, char a6, int a7, const llvm::TargetInstrInfo *a8)
{
  llvm::raw_ostream *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  _WORD *v20;
  uint64_t TypeToPrint;
  int v22;
  BOOL v23;
  unsigned int TiedOperandIdx;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _QWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  size_t v40;
  void *v41;
  llvm::raw_ostream *v42;
  const char *v43;
  size_t v44;
  uint64_t v45;
  _QWORD *v46;
  _DWORD *v47;
  BOOL v48;
  char v49;
  int v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  llvm::raw_ostream *v54;
  unsigned int v55;
  int v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  int v64;
  char v65;
  const llvm::TargetInstrInfo *v66;
  unint64_t v67;
  unint64_t *v68;
  llvm::raw_ostream *v69;
  uint64_t v70;
  uint64_t **v71;
  _BYTE *v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  _WORD *v79;
  llvm::raw_ostream *v80;
  const char *v81;
  size_t v82;
  uint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  size_t *v87;
  size_t v88;
  size_t v89;
  _BYTE *v90;
  const llvm::TargetRegisterInfo *v91;
  uint64_t v92;
  int v93;
  BOOL v94;
  unsigned int v95;
  int v96;
  _BOOL4 v97;
  BOOL v99;
  unint64_t v100;
  _WORD *v101;
  uint64_t v102;
  uint64_t v103;
  size_t v104;
  const void *v105;
  void *v106;
  _BYTE *v107;
  int v108;
  int v110;
  uint64_t v111;
  llvm::raw_ostream *v112;
  unint64_t v113;
  uint64_t v114;
  const char *v115;
  size_t v116;
  void *v117;
  _BYTE *v118;
  llvm::raw_ostream *v119;
  void *v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  _BYTE *v126;
  _OWORD *v127;
  unint64_t v128;
  _DWORD *v129;
  uint64_t v130;
  uint64_t v131;
  llvm::LLVMContext *v132;
  _QWORD *v133;
  uint64_t *v134;
  _DWORD *v135;
  unint64_t v136;
  int *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t *v140;
  char v141;
  uint64_t *v142;
  _WORD *v143;
  uint64_t v144;
  int v145;
  _BYTE *v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  _BYTE *v151;
  _BYTE *v153;
  _BYTE *v154;
  _BYTE *v155;
  uint64_t v156;
  _BYTE *v157;
  uint64_t v158;
  int v159;
  char v160;
  unsigned int v161;
  char v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  const llvm::Function **v168;
  int hasComplexRegisterTies;
  void *v170[2];
  uint64_t v171;

  v168 = (const llvm::Function **)a3;
  v12 = a2;
  v14 = *((_QWORD *)this + 3);
  if (v14 && (v15 = *(_QWORD *)(v14 + 32)) != 0)
  {
    v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 16) + 176))(*(_QWORD *)(v15 + 16));
    v165 = *(_QWORD *)(v15 + 40);
    v166 = v16;
    v164 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 8) + 56))(*(_QWORD *)(v15 + 8));
    a8 = (const llvm::TargetInstrInfo *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 16) + 104))(*(_QWORD *)(v15 + 16));
  }
  else
  {
    v164 = 0;
    v165 = 0;
    v166 = 0;
  }
  v171 = 0x2000000000000001;
  v159 = a7;
  v162 = a5;
  if ((a4 & 1) != 0)
    hasComplexRegisterTies = 1;
  else
    hasComplexRegisterTies = llvm::MachineInstr::hasComplexRegisterTies(this);
  v17 = *((unsigned int *)this + 10);
  if ((_DWORD)v17)
  {
    v18 = 0;
    while (1)
    {
      v19 = (llvm::raw_ostream *)(*((_QWORD *)this + 4) + 32 * v18);
      if ((*(_DWORD *)v19 & 0x30000FF) != 0x1000000)
        break;
      if (v18)
      {
        v20 = (_WORD *)*((_QWORD *)v12 + 4);
        if (*((_QWORD *)v12 + 3) - (_QWORD)v20 > 1uLL)
        {
          *v20 = 8236;
          *((_QWORD *)v12 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v12, ", ", 2uLL);
        }
      }
      if (v165)
        TypeToPrint = llvm::MachineInstr::getTypeToPrint((uint64_t)this, v18, (unint64_t *)&v171, v165);
      else
        TypeToPrint = 0;
      if (!hasComplexRegisterTies
        || ((v22 = *(_DWORD *)(*((_QWORD *)this + 4) + 32 * v18), (v22 & 0x10000FF) == 0)
          ? (v23 = (v22 & 0xF00000) == 0)
          : (v23 = 1),
            v23))
      {
        TiedOperandIdx = 0;
      }
      else
      {
        TiedOperandIdx = llvm::MachineInstr::findTiedOperandIdx(this, v18);
      }
      llvm::MachineOperand::print(v19, v12, v168, TypeToPrint, v18++ | 0x100000000, 0, a4, hasComplexRegisterTies, TiedOperandIdx, v166, v164);
      if (v18 == v17)
      {
        LODWORD(v18) = v17;
        break;
      }
    }
    if ((_DWORD)v18)
    {
      v25 = *((_QWORD *)v12 + 4);
      if ((unint64_t)(*((_QWORD *)v12 + 3) - v25) > 2)
      {
        *(_BYTE *)(v25 + 2) = 32;
        *(_WORD *)v25 = 15648;
        *((_QWORD *)v12 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v12, " = ", 3uLL);
      }
    }
  }
  else
  {
    LODWORD(v18) = 0;
  }
  if ((*((_WORD *)this + 22) & 1) != 0)
  {
    v26 = *((_QWORD *)v12 + 4);
    if ((unint64_t)(*((_QWORD *)v12 + 3) - v26) > 0xB)
    {
      *(_DWORD *)(v26 + 8) = 544241012;
      *(_QWORD *)v26 = *(_QWORD *)"frame-setup ";
      *((_QWORD *)v12 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v12, "frame-setup ", 0xCuLL);
    }
  }
  if ((*((_WORD *)this + 22) & 2) != 0)
  {
    v27 = (void *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v27 > 0xDuLL)
    {
      qmemcpy(v27, "frame-destroy ", 14);
      *((_QWORD *)v12 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v12, "frame-destroy ", 0xEuLL);
    }
  }
  if ((*((_WORD *)this + 22) & 0x10) != 0)
  {
    v28 = *((_QWORD *)v12 + 4);
    if ((unint64_t)(*((_QWORD *)v12 + 3) - v28) > 4)
    {
      *(_BYTE *)(v28 + 4) = 32;
      *(_DWORD *)v28 = 1851879022;
      *((_QWORD *)v12 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v12, "nnan ", 5uLL);
    }
  }
  if ((*((_WORD *)this + 22) & 0x20) != 0)
  {
    v29 = *((_QWORD *)v12 + 4);
    if ((unint64_t)(*((_QWORD *)v12 + 3) - v29) > 4)
    {
      *(_BYTE *)(v29 + 4) = 32;
      *(_DWORD *)v29 = 1718511982;
      *((_QWORD *)v12 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v12, "ninf ", 5uLL);
    }
  }
  if ((*((_WORD *)this + 22) & 0x40) != 0)
  {
    v30 = (_DWORD *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v30 > 3uLL)
    {
      *v30 = 544895854;
      *((_QWORD *)v12 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v12, "nsz ", 4uLL);
    }
  }
  if ((*((_WORD *)this + 22) & 0x80) != 0)
  {
    v31 = *((_QWORD *)v12 + 4);
    if ((unint64_t)(*((_QWORD *)v12 + 3) - v31) > 4)
    {
      *(_BYTE *)(v31 + 4) = 32;
      *(_DWORD *)v31 = 1885565537;
      *((_QWORD *)v12 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v12, "arcp ", 5uLL);
    }
  }
  if ((*((_WORD *)this + 22) & 0x100) != 0)
  {
    v32 = *((_QWORD *)v12 + 4);
    if ((unint64_t)(*((_QWORD *)v12 + 3) - v32) > 8)
    {
      *(_BYTE *)(v32 + 8) = 32;
      *(_QWORD *)v32 = *(_QWORD *)"contract ";
      *((_QWORD *)v12 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v12, "contract ", 9uLL);
    }
  }
  if ((*((_WORD *)this + 22) & 0x200) != 0)
  {
    v33 = (_DWORD *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v33 > 3uLL)
    {
      *v33 = 544106081;
      *((_QWORD *)v12 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v12, "afn ", 4uLL);
    }
  }
  if ((*((_WORD *)this + 22) & 0x400) != 0)
  {
    v34 = (_QWORD *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v34 > 7uLL)
    {
      *v34 = 0x20636F7373616572;
      *((_QWORD *)v12 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v12, "reassoc ", 8uLL);
    }
  }
  if ((*((_WORD *)this + 22) & 0x800) != 0)
  {
    v35 = (_DWORD *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v35 > 3uLL)
    {
      *v35 = 544699758;
      *((_QWORD *)v12 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v12, "nuw ", 4uLL);
    }
  }
  if ((*((_WORD *)this + 22) & 0x1000) != 0)
  {
    v36 = (_DWORD *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v36 > 3uLL)
    {
      *v36 = 544699246;
      *((_QWORD *)v12 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v12, "nsw ", 4uLL);
    }
  }
  if ((*((_WORD *)this + 22) & 0x2000) != 0)
  {
    v37 = *((_QWORD *)v12 + 4);
    if ((unint64_t)(*((_QWORD *)v12 + 3) - v37) > 5)
    {
      *(_WORD *)(v37 + 4) = 8308;
      *(_DWORD *)v37 = 1667332197;
      *((_QWORD *)v12 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v12, "exact ", 6uLL);
    }
  }
  if ((*((_WORD *)this + 22) & 0x4000) != 0)
  {
    v45 = *((_QWORD *)v12 + 4);
    if ((unint64_t)(*((_QWORD *)v12 + 3) - v45) > 0xA)
    {
      *(_DWORD *)(v45 + 7) = 544501861;
      *(_QWORD *)v45 = *(_QWORD *)"nofpexcept ";
      *((_QWORD *)v12 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(v12, "nofpexcept ", 0xBuLL);
    }
    if ((*((_WORD *)this + 22) & 0x8000) == 0)
    {
LABEL_69:
      if (a8)
        goto LABEL_70;
LABEL_78:
      v47 = (_DWORD *)*((_QWORD *)v12 + 4);
      if (*((_QWORD *)v12 + 3) - (_QWORD)v47 <= 6uLL)
      {
        v43 = "UNKNOWN";
        v42 = v12;
        v44 = 7;
        goto LABEL_80;
      }
      *(_DWORD *)((char *)v47 + 3) = 1314344782;
      *v47 = 1313558101;
      v53 = *((_QWORD *)v12 + 4) + 7;
      goto LABEL_96;
    }
  }
  else if ((*((_WORD *)this + 22) & 0x8000) == 0)
  {
    goto LABEL_69;
  }
  v46 = (_QWORD *)*((_QWORD *)v12 + 4);
  if (*((_QWORD *)v12 + 3) - (_QWORD)v46 > 7uLL)
  {
    *v46 = 0x20656772656D6F6ELL;
    *((_QWORD *)v12 + 4) += 8;
    if (!a8)
      goto LABEL_78;
  }
  else
  {
    llvm::raw_ostream::write(v12, "nomerge ", 8uLL);
    if (!a8)
      goto LABEL_78;
  }
LABEL_70:
  v38 = *((_QWORD *)a8 + 3);
  if (!v38)
    goto LABEL_81;
  v39 = (const char *)(v38 + *(unsigned int *)(*((_QWORD *)a8 + 2) + 4 * **((unsigned __int16 **)this + 2)));
  v40 = strlen(v39);
  v41 = (void *)*((_QWORD *)v12 + 4);
  if (v40 > *((_QWORD *)v12 + 3) - (_QWORD)v41)
  {
    v42 = v12;
    v43 = v39;
    v44 = v40;
LABEL_80:
    llvm::raw_ostream::write(v42, v43, v44);
    goto LABEL_81;
  }
  if (v40)
  {
    memcpy(v41, v39, v40);
    v53 = *((_QWORD *)v12 + 4) + v40;
LABEL_96:
    *((_QWORD *)v12 + 4) = v53;
  }
LABEL_81:
  if ((v162 & 1) != 0)
    return sub_1C4914448((void ***)&v171);
  v48 = v17 >= 2 && **((unsigned __int16 **)this + 2) - 3 >= 0xFFFFFFFE;
  v49 = !v48;
  if (!v48)
  {
    v50 = -1;
    goto LABEL_125;
  }
  v51 = (_BYTE *)*((_QWORD *)v12 + 4);
  if (*((_BYTE **)v12 + 3) == v51)
  {
    llvm::raw_ostream::write(v12, " ", 1uLL);
  }
  else
  {
    *v51 = 32;
    ++*((_QWORD *)v12 + 4);
  }
  if (v165)
    v52 = llvm::MachineInstr::getTypeToPrint((uint64_t)this, 0, (unint64_t *)&v171, v165);
  else
    v52 = 0;
  v54 = (llvm::raw_ostream *)*((_QWORD *)this + 4);
  v55 = hasComplexRegisterTies;
  if (hasComplexRegisterTies)
  {
    v55 = 0;
    if ((*(_DWORD *)v54 & 0x10000FF) == 0 && (*(_DWORD *)v54 & 0xF00000) != 0)
    {
      v55 = llvm::MachineInstr::findTiedOperandIdx(this, 0);
      v54 = (llvm::raw_ostream *)*((_QWORD *)this + 4);
    }
  }
  llvm::MachineOperand::print(v54, v12, v168, v52, 0x100000000, 1, a4, hasComplexRegisterTies, v55, v166, v164);
  v56 = *(_DWORD *)(*((_QWORD *)this + 4) + 48);
  if ((v56 & 1) != 0)
  {
    v57 = (void *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v57 > 0xCuLL)
    {
      qmemcpy(v57, " [sideeffect]", 13);
      *((_QWORD *)v12 + 4) += 13;
      if ((v56 & 8) != 0)
        goto LABEL_110;
    }
    else
    {
      llvm::raw_ostream::write(v12, " [sideeffect]", 0xDuLL);
      if ((v56 & 8) != 0)
        goto LABEL_110;
    }
LABEL_104:
    if ((v56 & 0x10) == 0)
      goto LABEL_105;
LABEL_112:
    v59 = *((_QWORD *)v12 + 4);
    if ((unint64_t)(*((_QWORD *)v12 + 3) - v59) > 0xA)
    {
      *(_DWORD *)(v59 + 7) = 1566929519;
      *(_QWORD *)v59 = *(_QWORD *)" [maystore]";
      *((_QWORD *)v12 + 4) += 11;
      if ((v56 & 0x20) != 0)
        goto LABEL_114;
    }
    else
    {
      llvm::raw_ostream::write(v12, " [maystore]", 0xBuLL);
      if ((v56 & 0x20) != 0)
        goto LABEL_114;
    }
LABEL_106:
    if ((v56 & 2) == 0)
      goto LABEL_118;
LABEL_116:
    v61 = (void *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v61 > 0xCuLL)
    {
      qmemcpy(v61, " [alignstack]", 13);
      *((_QWORD *)v12 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v12, " [alignstack]", 0xDuLL);
    }
    goto LABEL_118;
  }
  if ((v56 & 8) == 0)
    goto LABEL_104;
LABEL_110:
  v58 = *((_QWORD *)v12 + 4);
  if ((unint64_t)(*((_QWORD *)v12 + 3) - v58) > 9)
  {
    *(_WORD *)(v58 + 8) = 23908;
    *(_QWORD *)v58 = *(_QWORD *)" [mayload]";
    *((_QWORD *)v12 + 4) += 10;
    if ((v56 & 0x10) != 0)
      goto LABEL_112;
  }
  else
  {
    llvm::raw_ostream::write(v12, " [mayload]", 0xAuLL);
    if ((v56 & 0x10) != 0)
      goto LABEL_112;
  }
LABEL_105:
  if ((v56 & 0x20) == 0)
    goto LABEL_106;
LABEL_114:
  v60 = (void *)*((_QWORD *)v12 + 4);
  if (*((_QWORD *)v12 + 3) - (_QWORD)v60 > 0xEuLL)
  {
    qmemcpy(v60, " [isconvergent]", 15);
    *((_QWORD *)v12 + 4) += 15;
    if ((v56 & 2) == 0)
      goto LABEL_118;
    goto LABEL_116;
  }
  llvm::raw_ostream::write(v12, " [isconvergent]", 0xFuLL);
  if ((v56 & 2) != 0)
    goto LABEL_116;
LABEL_118:
  if ((*(_BYTE *)(*((_QWORD *)this + 4) + 48) & 4) == 0)
  {
    v62 = (void *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v62 > 0xCuLL)
    {
      qmemcpy(v62, " [attdialect]", 13);
      *((_QWORD *)v12 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v12, " [attdialect]", 0xDuLL);
    }
  }
  if ((*(_BYTE *)(*((_QWORD *)this + 4) + 48) & 4) != 0)
  {
    v63 = (void *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v63 > 0xEuLL)
    {
      qmemcpy(v63, " [inteldialect]", 15);
      *((_QWORD *)v12 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v12, " [inteldialect]", 0xFuLL);
    }
  }
  LODWORD(v18) = 2;
  v50 = 2;
LABEL_125:
  v163 = v50;
  v64 = *((_DWORD *)this + 10);
  if ((_DWORD)v18 != v64)
  {
    v161 = 0;
    while (1)
    {
      v73 = *((_QWORD *)this + 4);
      v74 = (_BYTE *)*((_QWORD *)v12 + 4);
      if ((v49 & 1) == 0)
      {
        if (*((_BYTE **)v12 + 3) == v74)
        {
          llvm::raw_ostream::write(v12, ",", 1uLL);
          v74 = (_BYTE *)*((_QWORD *)v12 + 4);
        }
        else
        {
          *v74 = 44;
          v74 = (_BYTE *)(*((_QWORD *)v12 + 4) + 1);
          *((_QWORD *)v12 + 4) = v74;
        }
      }
      if (*((_BYTE **)v12 + 3) == v74)
      {
        llvm::raw_ostream::write(v12, " ", 1uLL);
      }
      else
      {
        *v74 = 32;
        ++*((_QWORD *)v12 + 4);
      }
      v75 = (_BYTE *)(v73 + 32 * v18);
      v76 = **((unsigned __int16 **)this + 2);
      if ((v76 - 13) > 1)
      {
        if (v76 == 17 && *v75 == 14)
        {
          v77 = *(_QWORD *)(v73 + 32 * v18 + 16);
          if (*(_BYTE *)v77 == 26)
          {
            v83 = *(_QWORD *)(v77 - 8 * *(unsigned int *)(v77 + 8) + 8);
            if (v83)
            {
              if (**(_QWORD **)(v83 + 8))
              {
                v84 = (_BYTE *)*((_QWORD *)v12 + 4);
                if (*((_BYTE **)v12 + 3) == v84)
                {
                  v80 = v12;
                  v81 = "\"";
                  v82 = 1;
LABEL_167:
                  llvm::raw_ostream::write(v80, v81, v82);
                  v85 = (_BYTE *)*((_QWORD *)v12 + 4);
LABEL_168:
                  v86 = *(_QWORD *)(v77 - 8 * *(unsigned int *)(v77 + 8) + 8);
                  if (v86)
                  {
                    v87 = *(size_t **)(v86 + 8);
                    v89 = *v87;
                    a2 = (llvm::raw_ostream *)(v87 + 3);
                    v88 = v89;
                    if (v89 <= *((_QWORD *)v12 + 3) - (_QWORD)v85)
                    {
                      if (v88)
                      {
                        memcpy(v85, a2, v88);
                        v85 = (_BYTE *)(*((_QWORD *)v12 + 4) + v88);
                        *((_QWORD *)v12 + 4) = v85;
                      }
                    }
                    else
                    {
                      llvm::raw_ostream::write(v12, (const char *)a2, v88);
                      v85 = (_BYTE *)*((_QWORD *)v12 + 4);
                    }
                  }
                  if ((unint64_t)v85 >= *((_QWORD *)v12 + 3))
                  {
                    llvm::raw_ostream::write(v12, 34);
                  }
                  else
                  {
                    *((_QWORD *)v12 + 4) = v85 + 1;
                    *v85 = 34;
                  }
                  goto LABEL_233;
                }
                *v84 = 34;
                v85 = (_BYTE *)(*((_QWORD *)v12 + 4) + 1);
LABEL_268:
                *((_QWORD *)v12 + 4) = v85;
                goto LABEL_168;
              }
            }
          }
          if (v165)
            v92 = llvm::MachineInstr::getTypeToPrint((uint64_t)this, v18, (unint64_t *)&v171, v165);
          else
            v92 = 0;
          if (hasComplexRegisterTies)
          {
            v95 = 0;
            v110 = *(_DWORD *)(*((_QWORD *)this + 4) + 32 * v18);
            if ((v110 & 0x10000FF) == 0 && (v110 & 0xF00000) != 0)
              goto LABEL_230;
LABEL_232:
            llvm::MachineOperand::print((llvm::raw_ostream *)(v73 + 32 * v18), v12, v168, v92, v18 | 0x100000000, 1, a4, hasComplexRegisterTies, v95, v166, v164);
            goto LABEL_233;
          }
LABEL_231:
          v95 = 0;
          goto LABEL_232;
        }
      }
      else if (*v75 == 14)
      {
        v77 = *(_QWORD *)(v73 + 32 * v18 + 16);
        if (*(_BYTE *)v77 == 25)
        {
          v78 = *(_QWORD *)(v77 - 8 * *(unsigned int *)(v77 + 8) + 8);
          if (v78)
          {
            if (**(_QWORD **)(v78 + 8))
            {
              v79 = (_WORD *)*((_QWORD *)v12 + 4);
              if (*((_QWORD *)v12 + 3) - (_QWORD)v79 <= 1uLL)
              {
                v80 = v12;
                v81 = "!\"";
                v82 = 2;
                goto LABEL_167;
              }
              *v79 = 8737;
              v85 = (_BYTE *)(*((_QWORD *)v12 + 4) + 2);
              goto LABEL_268;
            }
          }
        }
        if (v165)
          v92 = llvm::MachineInstr::getTypeToPrint((uint64_t)this, v18, (unint64_t *)&v171, v165);
        else
          v92 = 0;
        if (hasComplexRegisterTies)
        {
          v108 = *(_DWORD *)(*((_QWORD *)this + 4) + 32 * v18);
          if ((v108 & 0x10000FF) == 0 && (v108 & 0xF00000) != 0)
          {
LABEL_230:
            v95 = llvm::MachineInstr::findTiedOperandIdx(this, v18);
            goto LABEL_232;
          }
        }
        goto LABEL_231;
      }
      if ((_DWORD)v18 == v163 && *v75 == 1)
      {
        v90 = (_BYTE *)*((_QWORD *)v12 + 4);
        if ((unint64_t)v90 >= *((_QWORD *)v12 + 3))
        {
          llvm::raw_ostream::write(v12, 36);
        }
        else
        {
          *((_QWORD *)v12 + 4) = v90 + 1;
          *v90 = 36;
        }
        sub_1C5E21910(v12, v161, 0, 0, 0);
        v100 = *(_QWORD *)(v73 + 32 * v18 + 16);
        v101 = (_WORD *)*((_QWORD *)v12 + 4);
        if (*((_QWORD *)v12 + 3) - (_QWORD)v101 > 1uLL)
        {
          *v101 = 23354;
          *((_QWORD *)v12 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v12, ":[", 2uLL);
        }
        v102 = v100 & 7;
        v103 = 8 * v102 - 8;
        v104 = *(_QWORD *)((char *)&unk_1C85FB2A0 + v103);
        v105 = *(char **)((char *)off_1E8145040 + v103);
        v106 = (void *)*((_QWORD *)v12 + 4);
        if (v104 <= *((_QWORD *)v12 + 3) - (_QWORD)v106)
        {
          memcpy(v106, v105, v104);
          *((_QWORD *)v12 + 4) += v104;
        }
        else
        {
          llvm::raw_ostream::write(v12, (const char *)v105, v104);
        }
        if ((_DWORD)v102 != 5)
        {
          if ((_DWORD)v102 != 6)
          {
            if ((v100 & 0x80000000) == 0)
            {
              if (v100 >= 0x10000)
              {
                if (v166)
                {
                  v107 = (_BYTE *)*((_QWORD *)v12 + 4);
                  if ((unint64_t)v107 >= *((_QWORD *)v12 + 3))
                  {
                    llvm::raw_ostream::write(v12, 58);
                  }
                  else
                  {
                    *((_QWORD *)v12 + 4) = v107 + 1;
                    *v107 = 58;
                  }
                  v114 = *(_QWORD *)(v166 + 80);
                  if (v114)
                  {
                    v115 = (const char *)(v114
                                        + *(unsigned int *)(**(_QWORD **)(*(_QWORD *)(v166 + 240)
                                                                        + 8 * (WORD1(v100) - 1))
                                                          + 16));
                    v116 = strlen(v115);
                    v117 = (void *)*((_QWORD *)v12 + 4);
                    if (v116 <= *((_QWORD *)v12 + 3) - (_QWORD)v117)
                    {
                      if (v116)
                      {
                        memcpy(v117, v115, v116);
                        *((_QWORD *)v12 + 4) += v116;
                      }
                    }
                    else
                    {
                      llvm::raw_ostream::write(v12, v115, v116);
                    }
                  }
                  goto LABEL_261;
                }
                v111 = *((_QWORD *)v12 + 4);
                if ((unint64_t)(*((_QWORD *)v12 + 3) - v111) > 2)
                {
                  *(_BYTE *)(v111 + 2) = 67;
                  *(_WORD *)v111 = 21050;
                  *((_QWORD *)v12 + 4) += 3;
                }
                else
                {
                  llvm::raw_ostream::write(v12, ":RC", 3uLL);
                }
                v112 = v12;
                v113 = WORD1(v100) - 1;
LABEL_260:
                sub_1C5E21910(v112, v113, 0, 0, 0);
              }
LABEL_261:
              v122 = (_BYTE *)*((_QWORD *)v12 + 4);
              if ((unint64_t)v122 >= *((_QWORD *)v12 + 3))
              {
                llvm::raw_ostream::write(v12, 93);
              }
              else
              {
                *((_QWORD *)v12 + 4) = v122 + 1;
                *v122 = 93;
              }
              ++v161;
              v163 += ((unsigned __int16)v100 >> 3) + 1;
              goto LABEL_233;
            }
LABEL_257:
            v121 = *((_QWORD *)v12 + 4);
            if ((unint64_t)(*((_QWORD *)v12 + 3) - v121) > 8)
            {
              *(_BYTE *)(v121 + 8) = 36;
              *(_QWORD *)v121 = *(_QWORD *)" tiedto:$";
              *((_QWORD *)v12 + 4) += 9;
            }
            else
            {
              llvm::raw_ostream::write(v12, " tiedto:$", 9uLL);
            }
            v113 = (v100 >> 16) & 0x7FFF;
            v112 = v12;
            goto LABEL_260;
          }
          v118 = (_BYTE *)*((_QWORD *)v12 + 4);
          if (*((_BYTE **)v12 + 3) == v118)
          {
            llvm::raw_ostream::write(v12, ":", 1uLL);
          }
          else
          {
            *v118 = 58;
            ++*((_QWORD *)v12 + 4);
          }
          a3 = (llvm::ModuleSlotTracker *)sub_1C61F08E4(WORD1(v100) & 0x7FFF);
          v119 = a2;
          v120 = (void *)*((_QWORD *)v12 + 4);
          if ((unint64_t)a2 <= *((_QWORD *)v12 + 3) - (_QWORD)v120)
          {
            if (a2)
            {
              memcpy(v120, a3, (size_t)a2);
              *((_QWORD *)v12 + 4) += v119;
            }
          }
          else
          {
            llvm::raw_ostream::write(v12, (const char *)a3, (size_t)a2);
          }
        }
        if ((v100 & 0x80000000) == 0)
          goto LABEL_261;
        goto LABEL_257;
      }
      v91 = (const llvm::TargetRegisterInfo *)v165;
      if (v165)
        v92 = llvm::MachineInstr::getTypeToPrint((uint64_t)this, v18, (unint64_t *)&v171, v165);
      else
        v92 = 0;
      if (!hasComplexRegisterTies
        || ((v93 = *(_DWORD *)(*((_QWORD *)this + 4) + 32 * v18), (v93 & 0x10000FF) == 0)
          ? (v94 = (v93 & 0xF00000) == 0)
          : (v94 = 1),
            v94))
      {
        v95 = 0;
      }
      else
      {
        v95 = llvm::MachineInstr::findTiedOperandIdx(this, v18);
      }
      if (*v75 != 1)
        goto LABEL_232;
      v96 = **((unsigned __int16 **)this + 2);
      if (((_DWORD)v18 != 2 || v96 != 8) && ((_DWORD)v18 != 3 || v96 != 9))
      {
        v97 = (v18 & 1) == 0;
        if (v18 <= 1 || v96 != 18)
          v97 = 0;
        v99 = v96 == 11 && (_DWORD)v18 == 3;
        if (!v99 && !v97)
          goto LABEL_232;
      }
      llvm::MachineOperand::printSubRegIdx(v12, *(llvm::raw_ostream **)(v73 + 32 * v18 + 16), v166, v91);
LABEL_233:
      v65 = 0;
      v49 = 0;
      LODWORD(v18) = v18 + 1;
      if (v64 == (_DWORD)v18)
        goto LABEL_127;
    }
  }
  v65 = v49;
LABEL_127:
  v66 = a8;
  v68 = (unint64_t *)((char *)this + 48);
  v67 = *((_QWORD *)this + 6);
  if (v67 < 8)
    goto LABEL_277;
  v69 = (llvm::raw_ostream *)(v67 & 0xFFFFFFFFFFFFFFF8);
  if ((*((_QWORD *)this + 6) & 7) == 1 && v69)
    goto LABEL_370;
  if ((*((_QWORD *)this + 6) & 7) == 3 && v69 && *((_BYTE *)v69 + 4) && *((_QWORD *)v69 + *(int *)v69 + 1))
  {
    v69 = (llvm::raw_ostream *)*((_QWORD *)v69 + *(int *)v69 + 1);
LABEL_370:
    if ((v65 & 1) == 0)
    {
      v155 = (_BYTE *)*((_QWORD *)v12 + 4);
      if ((unint64_t)v155 >= *((_QWORD *)v12 + 3))
      {
        llvm::raw_ostream::write(v12, 44);
      }
      else
      {
        *((_QWORD *)v12 + 4) = v155 + 1;
        *v155 = 44;
      }
    }
    v156 = *((_QWORD *)v12 + 4);
    if ((unint64_t)(*((_QWORD *)v12 + 3) - v156) > 0x11)
    {
      *(_WORD *)(v156 + 16) = 8300;
      *(_OWORD *)v156 = *(_OWORD *)" pre-instr-symbol ";
      *((_QWORD *)v12 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v12, " pre-instr-symbol ", 0x12uLL);
    }
    llvm::MachineOperand::printSymbol(v12, v69, a3);
    v67 = *v68;
    if (*v68 < 8)
      goto LABEL_277;
    v69 = (llvm::raw_ostream *)(v67 & 0xFFFFFFFFFFFFFFF8);
  }
  if ((v67 & 7) != 2 || !v69)
  {
    if ((v67 & 7) != 3
      || !v69
      || !*((_BYTE *)v69 + 5)
      || (v70 = *((unsigned __int8 *)v69 + 4), !*((_QWORD *)v69 + *(int *)v69 + v70 + 1)))
    {
LABEL_140:
      if ((v67 & 7) == 3)
      {
        if (v69)
        {
          if (*((_BYTE *)v69 + 6))
          {
            v71 = (uint64_t **)*((_QWORD *)v69
                              + *(int *)v69
                              + (*((_BYTE *)v69 + 5) + *((_BYTE *)v69 + 4))
                              + 1);
            if (v71)
            {
              if ((v65 & 1) == 0)
              {
                v72 = (_BYTE *)*((_QWORD *)v12 + 4);
                if ((unint64_t)v72 >= *((_QWORD *)v12 + 3))
                {
                  llvm::raw_ostream::write(v12, 44);
                }
                else
                {
                  *((_QWORD *)v12 + 4) = v72 + 1;
                  *v72 = 44;
                }
              }
              v123 = *((_QWORD *)v12 + 4);
              if ((unint64_t)(*((_QWORD *)v12 + 3) - v123) > 0x12)
              {
                *(_DWORD *)(v123 + 15) = 544367979;
                *(_OWORD *)v123 = *(_OWORD *)" heap-alloc-marker ";
                *((_QWORD *)v12 + 4) += 19;
              }
              else
              {
                llvm::raw_ostream::write(v12, " heap-alloc-marker ", 0x13uLL);
              }
              sub_1C5314B04((uint64_t)v12, v71, (llvm::ModuleSlotTracker *)v168, 0, 1, 0);
            }
          }
        }
      }
      goto LABEL_277;
    }
    v69 = (llvm::raw_ostream *)*((_QWORD *)v69 + *(int *)v69 + v70 + 1);
  }
  if ((v65 & 1) == 0)
  {
    v157 = (_BYTE *)*((_QWORD *)v12 + 4);
    if ((unint64_t)v157 >= *((_QWORD *)v12 + 3))
    {
      llvm::raw_ostream::write(v12, 44);
    }
    else
    {
      *((_QWORD *)v12 + 4) = v157 + 1;
      *v157 = 44;
    }
  }
  v158 = *((_QWORD *)v12 + 4);
  if ((unint64_t)(*((_QWORD *)v12 + 3) - v158) > 0x12)
  {
    *(_DWORD *)(v158 + 15) = 543977314;
    *(_OWORD *)v158 = *(_OWORD *)" post-instr-symbol ";
    *((_QWORD *)v12 + 4) += 19;
  }
  else
  {
    llvm::raw_ostream::write(v12, " post-instr-symbol ", 0x13uLL);
  }
  llvm::MachineOperand::printSymbol(v12, v69, a3);
  v67 = *v68;
  if (*v68 >= 8)
  {
    v69 = (llvm::raw_ostream *)(v67 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_140;
  }
LABEL_277:
  if (*((_DWORD *)this + 16))
  {
    if ((v65 & 1) == 0)
    {
      v124 = (_BYTE *)*((_QWORD *)v12 + 4);
      if (*((_BYTE **)v12 + 3) == v124)
      {
        llvm::raw_ostream::write(v12, ",", 1uLL);
      }
      else
      {
        *v124 = 44;
        ++*((_QWORD *)v12 + 4);
      }
    }
    v125 = *((_QWORD *)v12 + 4);
    if ((unint64_t)(*((_QWORD *)v12 + 3) - v125) > 0x13)
    {
      *(_DWORD *)(v125 + 16) = 544367970;
      *(_OWORD *)v125 = *(_OWORD *)" debug-instr-number ";
      *((_QWORD *)v12 + 4) += 20;
    }
    else
    {
      llvm::raw_ostream::write(v12, " debug-instr-number ", 0x14uLL);
    }
    sub_1C5E21910(v12, *((unsigned int *)this + 16), 0, 0, 0);
  }
  if ((a6 & 1) == 0 && *((_QWORD *)this + 7))
  {
    if ((v65 & 1) == 0)
    {
      v126 = (_BYTE *)*((_QWORD *)v12 + 4);
      if ((unint64_t)v126 >= *((_QWORD *)v12 + 3))
      {
        llvm::raw_ostream::write(v12, 44);
      }
      else
      {
        *((_QWORD *)v12 + 4) = v126 + 1;
        *v126 = 44;
      }
    }
    v127 = (_OWORD *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v127 > 0xFuLL)
    {
      *v127 = *(_OWORD *)" debug-location ";
      *((_QWORD *)v12 + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(v12, " debug-location ", 0x10uLL);
    }
    sub_1C5314B04((uint64_t)v12, *((uint64_t ***)this + 7), (llvm::ModuleSlotTracker *)v168, 0, 1, 0);
  }
  v128 = *v68;
  if (*v68 >= 8)
  {
    if ((v128 & 7) != 0)
    {
      if ((*v68 & 7) != 3)
        goto LABEL_324;
      v129 = (_DWORD *)(v128 & 0xFFFFFFFFFFFFFFF8);
      if (!v129 || !*v129)
        goto LABEL_324;
    }
    else
    {
      *v68 = v128 & 0xFFFFFFFFFFFFFFF8;
    }
    v170[0] = &v171;
    v170[1] = 0;
    v130 = *((_QWORD *)this + 3);
    if (v130 && (v131 = *(_QWORD *)(v130 + 32)) != 0)
    {
      v132 = 0;
      v133 = *(_QWORD **)(v131 + 56);
      v134 = ***(uint64_t ****)v131;
    }
    else
    {
      v132 = (llvm::LLVMContext *)operator new();
      v133 = 0;
      v134 = (uint64_t *)llvm::LLVMContext::LLVMContext(v132);
    }
    v135 = (_DWORD *)*((_QWORD *)v12 + 4);
    v160 = a6;
    if (*((_QWORD *)v12 + 3) - (_QWORD)v135 > 3uLL)
    {
      *v135 = 540686880;
      *((_QWORD *)v12 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v12, " :: ", 4uLL);
    }
    v136 = *v68;
    if (*v68 < 8)
      goto LABEL_320;
    if ((v136 & 7) != 0)
    {
      if ((*v68 & 7) != 3
        || (v137 = (int *)(v136 & 0xFFFFFFFFFFFFFFF8), (v136 & 0xFFFFFFFFFFFFFFF8) == 0)
        || (v139 = *v137, v68 = (unint64_t *)(v137 + 2), v138 = v139, !(_DWORD)v139))
      {
LABEL_320:
        if (v132)
        {
          llvm::LLVMContext::~LLVMContext((llvm::LLVMContextImpl **)v132, a2);
          MEMORY[0x1CAA32FC0]();
        }
        a6 = v160;
        if (v170[0] != &v171)
          free(v170[0]);
        goto LABEL_324;
      }
      v140 = &v68[v138];
    }
    else
    {
      *((_QWORD *)this + 6) = v136 & 0xFFFFFFFFFFFFFFF8;
      v140 = (unint64_t *)((char *)this + 56);
    }
    v141 = 0;
    do
    {
      v142 = (uint64_t *)*v68;
      if ((v141 & 1) != 0)
      {
        v143 = (_WORD *)*((_QWORD *)v12 + 4);
        if (*((_QWORD *)v12 + 3) - (_QWORD)v143 > 1uLL)
        {
          *v143 = 8236;
          *((_QWORD *)v12 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v12, ", ", 2uLL);
        }
      }
      llvm::MachineMemOperand::print(v142, v12, (llvm::ModuleSlotTracker *)v168, (uint64_t)v170, v134, v133, (uint64_t)v66);
      ++v68;
      v141 = 1;
    }
    while (v68 != v140);
    goto LABEL_320;
  }
LABEL_324:
  if ((a6 & 1) != 0)
    return sub_1C4914448((void ***)&v171);
  v144 = *((_QWORD *)this + 7);
  if (v144)
  {
    v153 = (_BYTE *)*((_QWORD *)v12 + 4);
    if ((unint64_t)v153 >= *((_QWORD *)v12 + 3))
    {
      llvm::raw_ostream::write(v12, 59);
    }
    else
    {
      *((_QWORD *)v12 + 4) = v153 + 1;
      *v153 = 59;
    }
    v154 = (_BYTE *)*((_QWORD *)v12 + 4);
    if ((unint64_t)v154 >= *((_QWORD *)v12 + 3))
    {
      llvm::raw_ostream::write(v12, 32);
    }
    else
    {
      *((_QWORD *)v12 + 4) = v154 + 1;
      *v154 = 32;
    }
    llvm::DebugLoc::print((uint64_t)this + 56, v12);
  }
  v145 = **((unsigned __int16 **)this + 2);
  if ((v145 - 13) > 1 || *(_BYTE *)(*((_QWORD *)this + 4) + ((unint64_t)(v145 != 14) << 6)) != 14)
    goto LABEL_338;
  if (!v144)
  {
    v146 = (_BYTE *)*((_QWORD *)v12 + 4);
    if (*((_BYTE **)v12 + 3) == v146)
    {
      llvm::raw_ostream::write(v12, ";", 1uLL);
    }
    else
    {
      *v146 = 59;
      ++*((_QWORD *)v12 + 4);
    }
  }
  v147 = *(_QWORD *)(*((_QWORD *)this + 4) + ((unint64_t)(**((_WORD **)this + 2) != 14) << 6) + 16);
  v148 = *((_QWORD *)v12 + 4);
  if ((unint64_t)(*((_QWORD *)v12 + 3) - v148) > 8)
  {
    *(_BYTE *)(v148 + 8) = 58;
    *(_QWORD *)v148 = *(_QWORD *)" line no:";
    *((_QWORD *)v12 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v12, " line no:", 9uLL);
  }
  sub_1C5E21910(v12, *(unsigned int *)(v147 + 24), 0, 0, 0);
  if (**((_WORD **)this + 2) != 13)
    goto LABEL_338;
  v149 = (_BYTE *)*((_QWORD *)this + 4);
  if (v149[32] != 1 || *v149)
    goto LABEL_338;
  v150 = *((_QWORD *)v12 + 4);
  if ((unint64_t)(*((_QWORD *)v12 + 3) - v150) <= 8)
  {
    llvm::raw_ostream::write(v12, " indirect", 9uLL);
LABEL_338:
    if (!v159)
      return sub_1C4914448((void ***)&v171);
    goto LABEL_339;
  }
  *(_BYTE *)(v150 + 8) = 116;
  *(_QWORD *)v150 = *(_QWORD *)" indirect";
  *((_QWORD *)v12 + 4) += 9;
  if (!v159)
    return sub_1C4914448((void ***)&v171);
LABEL_339:
  v151 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v151 >= *((_QWORD *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 10);
  }
  else
  {
    *((_QWORD *)v12 + 4) = v151 + 1;
    *v151 = 10;
  }
  return sub_1C4914448((void ***)&v171);
}

uint64_t llvm::MachineInstr::addRegisterKilled(llvm::MachineInstr *this, unsigned int a2, uint64_t a3, int a4)
{
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  unsigned __int16 *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int *v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  _WORD *v33;
  int v34;
  unsigned __int16 v35;
  _BOOL4 v36;
  unsigned __int16 *v38;
  int v39;
  int v40;
  BOOL v41;
  _WORD *v42;
  int v43;
  unsigned __int16 v44;
  _BOOL4 v45;
  unsigned __int16 *v47;
  int v48;
  int v49;
  BOOL v50;
  uint64_t v51;
  unsigned int i;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  _DWORD v67[2];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  _QWORD v73[3];

  v73[2] = *MEMORY[0x1E0C80C00];
  v7 = a2 - 1;
  if (a2 - 1 > 0x3FFFFFFE)
  {
    v21 = 0;
  }
  else
  {
    v8 = (uint64_t *)(a3 + 8);
    if (!a3)
      v8 = 0;
    v9 = *v8;
    v10 = *(unsigned int *)(*v8 + 24 * a2 + 16);
    v11 = v10 & 0xF;
    v12 = (v10 >> 3) & 0x1FFFFFFE;
    v14 = v8[5];
    v13 = v8[6];
    v15 = (_WORD *)(v13 + v12);
    v16 = *v15 + v11 * a2;
    while (1)
    {
      v17 = *(_WORD *)(v14 + 4 * v16);
      if (v17)
        break;
LABEL_13:
      v21 = 0;
      v22 = (unsigned __int16)v15[1];
      ++v15;
      v16 += v22;
      if (!v22)
        goto LABEL_17;
    }
    v18 = *(_WORD *)(v14 + 4 * v16 + 2);
    while (!v13)
    {
LABEL_11:
      v17 = v18;
      v30 = v18 == 0;
      v18 = 0;
      if (v30)
        goto LABEL_13;
    }
    v19 = (unsigned __int16 *)(v13 + 2 * *(unsigned int *)(v9 + 24 * v17 + 8));
    while (a2 == v17)
    {
      v20 = *v19++;
      v17 += v20;
      if (!v20)
        goto LABEL_11;
    }
    v21 = 1;
  }
LABEL_17:
  v71 = v73;
  v72 = 0x400000000;
  v23 = *((unsigned int *)this + 10);
  if (!(_DWORD)v23)
  {
    v25 = 0;
LABEL_86:
    if (a4)
    {
      v68 = 0;
      v69 = 0;
      v70 = 0;
      v67[0] = 100663296;
      v67[1] = a2;
      llvm::MachineInstr::addOperand(this, *(llvm::MachineFunction **)(*((_QWORD *)this + 3) + 32), (const llvm::MachineOperand *)v67);
LABEL_88:
      v25 = 1;
    }
    goto LABEL_89;
  }
  v24 = 0;
  v25 = 0;
  v26 = a2;
  do
  {
    v27 = (int *)(*((_QWORD *)this + 4) + 32 * v24);
    v28 = *v27;
    if ((*v27 & 0x910000FF) == 0)
    {
      v29 = v27[1];
      if (v29)
      {
        if (v29 == a2)
        {
          if ((v25 & 1) == 0)
          {
            if (((v28 >> 26) & ~HIBYTE(v28) & 1) != 0)
              goto LABEL_88;
            if (v7 <= 0x3FFFFFFE)
            {
              v30 = (v28 & 0x10000FF) != 0 || (v28 & 0xF00000) == 0;
              if (!v30)
                goto LABEL_88;
            }
            *v27 = v28 | 0x4000000;
          }
          v25 = 1;
        }
        else if (v21 && ((v28 >> 26) & ~HIBYTE(v28) & 1) != 0 && !(v29 >> 30))
        {
          v31 = *(_QWORD *)(a3 + 56);
          v32 = *(_QWORD *)(a3 + 8);
          v33 = (_WORD *)(v31 + 2 * *(unsigned int *)(v32 + 24 * v26 + 8));
          v34 = (unsigned __int16)*v33;
          v35 = v34 + a2;
          v30 = v34 == 0;
          v36 = *v33 == 0;
          if (!v30 && v29 != v35)
          {
            v38 = v33 + 1;
            do
            {
              v40 = *v38++;
              v39 = v40;
              v35 += v40;
              v36 = v40 == 0;
              if (!v40)
                v38 = 0;
              if (v39)
                v41 = v29 == v35;
              else
                v41 = 1;
            }
            while (!v41);
          }
          if (!v36)
            goto LABEL_88;
          v42 = (_WORD *)(v31 + 2 * *(unsigned int *)(v32 + 24 * v29 + 8));
          v43 = (unsigned __int16)*v42;
          v44 = v43 + v29;
          v30 = v43 == 0;
          v45 = *v42 != 0;
          if (!v30 && v44 != a2)
          {
            v47 = v42 + 1;
            do
            {
              v49 = *v47++;
              v48 = v49;
              v44 += v49;
              v45 = v49 != 0;
              if (!v49)
                v47 = 0;
              if (v48)
                v50 = v44 == a2;
              else
                v50 = 1;
            }
            while (!v50);
          }
          if (v45)
          {
            v51 = v72;
            if (v72 >= (unint64_t)HIDWORD(v72))
            {
              v66 = v7;
              v65 = a3;
              v64 = v21;
              v62 = v23;
              v63 = v24;
              v61 = v26;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, (uint64_t)v73, v72 + 1, 4);
              v26 = v61;
              v23 = v62;
              v24 = v63;
              v21 = v64;
              v7 = v66;
              a3 = v65;
              v51 = v72;
            }
            *((_DWORD *)v71 + v51) = v24;
            LODWORD(v72) = v72 + 1;
          }
        }
      }
    }
    ++v24;
  }
  while (v24 != v23);
  for (i = v72; (_DWORD)v72; LODWORD(v72) = v72 - 1)
  {
    v53 = *((unsigned int *)v71 + i - 1);
    v54 = *((_QWORD *)this + 4);
    v55 = (_DWORD *)(v54 + 32 * v53);
    if ((*v55 & 0x2000000) != 0)
    {
      if (v53 >= 2 && **((unsigned __int16 **)this + 2) - 3 >= 0xFFFFFFFE)
      {
        v57 = *((_DWORD *)this + 10);
        if (v57 >= 3)
        {
          v58 = 2;
          while (*(_BYTE *)(v54 + 32 * v58) == 1)
          {
            v59 = v58;
            v58 += ((unsigned __int16)*(_DWORD *)(v54 + 32 * v58 + 16) >> 3) + 1;
            if (v58 > v53)
            {
              if ((v59 & 0x80000000) == 0)
                goto LABEL_68;
              break;
            }
            if (v58 >= v57)
              break;
          }
        }
      }
      llvm::MachineInstr::removeOperand((uint64_t)this, v53);
    }
    else
    {
LABEL_68:
      *v55 &= ~0x4000000u;
    }
    i = v72 - 1;
  }
  if ((v25 & 1) == 0)
    goto LABEL_86;
LABEL_89:
  if (v71 != v73)
    free(v71);
  return v25 & 1;
}

uint64_t llvm::MachineInstr::clearRegisterKills(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;

  v3 = *(unsigned int *)(result + 40);
  if ((_DWORD)v3)
  {
    v5 = a2 - 1;
    v6 = *(unsigned int **)(result + 32);
    if (a2 - 1 >= 0x3FFFFFFF)
      a3 = 0;
    v9 = 32 * v3;
    while (1)
    {
      v10 = *v6;
      if ((*v6 & 0x10000FF) != 0 || ((v10 >> 26) & ~HIBYTE(v10) & 1) == 0)
        goto LABEL_16;
      v11 = v6[1];
      if (a3)
      {
        if (v11 == a2)
          goto LABEL_15;
        if (v5 <= 0x3FFFFFFE && v11 - 1 <= 0x3FFFFFFE)
          break;
      }
      if (v11 == a2)
        goto LABEL_15;
LABEL_16:
      v6 += 8;
      v9 -= 32;
      if (!v9)
        return result;
    }
    result = llvm::MCRegisterInfo::regsOverlap((_QWORD *)(a3 + 8), a2, v11);
    if ((result & 1) == 0)
      goto LABEL_16;
LABEL_15:
    *v6 = v10 & 0xFBFFFFFF;
    goto LABEL_16;
  }
  return result;
}

uint64_t llvm::MachineInstr::addRegisterDead(llvm::MachineInstr *this, unsigned int a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _WORD *v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  unsigned __int16 *v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int *v28;
  int v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  _WORD *v34;
  int v35;
  unsigned __int16 v36;
  _BOOL4 v37;
  unsigned __int16 *v39;
  int v40;
  int v41;
  BOOL v42;
  _WORD *v43;
  int v44;
  unsigned __int16 v45;
  _BOOL4 v46;
  unsigned __int16 *v48;
  int v49;
  int v50;
  BOOL v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v62;
  _DWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  _QWORD v70[3];

  v4 = a4;
  v70[2] = *MEMORY[0x1E0C80C00];
  if (a2 - 1 > 0x3FFFFFFE)
  {
    v22 = 0;
  }
  else
  {
    if (a3)
      v8 = (uint64_t *)(a3 + 8);
    else
      v8 = 0;
    v9 = *v8;
    v10 = *(unsigned int *)(*v8 + 24 * a2 + 16);
    v11 = v10 & 0xF;
    v12 = (v10 >> 3) & 0x1FFFFFFE;
    v15 = v8 + 5;
    v14 = v8[5];
    v13 = v15[1];
    v16 = (_WORD *)(v13 + v12);
    v17 = *v16 + v11 * a2;
    while (1)
    {
      v18 = *(_WORD *)(v14 + 4 * v17);
      if (v18)
        break;
LABEL_14:
      v22 = 0;
      v23 = (unsigned __int16)v16[1];
      ++v16;
      v17 += v23;
      if (!v23)
        goto LABEL_18;
    }
    v19 = *(_WORD *)(v14 + 4 * v17 + 2);
    while (!v13)
    {
LABEL_12:
      v18 = v19;
      v31 = v19 == 0;
      v19 = 0;
      if (v31)
        goto LABEL_14;
    }
    v20 = (unsigned __int16 *)(v13 + 2 * *(unsigned int *)(v9 + 24 * v18 + 8));
    while (a2 == v18)
    {
      v21 = *v20++;
      v18 += v21;
      if (!v21)
        goto LABEL_12;
    }
    v22 = 1;
  }
LABEL_18:
  v68 = v70;
  v69 = 0x400000000;
  v24 = *((unsigned int *)this + 10);
  if ((_DWORD)v24)
  {
    v25 = 0;
    v26 = 0;
    v27 = a2;
    do
    {
      v28 = (int *)(*((_QWORD *)this + 4) + 32 * v25);
      v29 = *v28;
      if ((*v28 & 0x10000FF) == 0x1000000)
      {
        v30 = v28[1];
        if (v30)
        {
          if (v30 == a2)
          {
            *v28 = v29 | 0x4000000;
            v26 = 1;
          }
          else if (v22)
          {
            v31 = (~v29 & 0x5000000) == 0 && v30 >> 30 == 0;
            if (v31)
            {
              v32 = *(_QWORD *)(a3 + 56);
              v33 = *(_QWORD *)(a3 + 8);
              v34 = (_WORD *)(v32 + 2 * *(unsigned int *)(v33 + 24 * v27 + 8));
              v35 = (unsigned __int16)*v34;
              v36 = v35 + a2;
              v31 = v35 == 0;
              v37 = *v34 == 0;
              if (!v31 && v30 != v36)
              {
                v39 = v34 + 1;
                do
                {
                  v41 = *v39++;
                  v40 = v41;
                  v36 += v41;
                  v37 = v41 == 0;
                  if (!v41)
                    v39 = 0;
                  if (v40)
                    v42 = v30 == v36;
                  else
                    v42 = 1;
                }
                while (!v42);
              }
              if (!v37)
                goto LABEL_83;
              v43 = (_WORD *)(v32 + 2 * *(unsigned int *)(v33 + 24 * v30 + 8));
              v44 = (unsigned __int16)*v43;
              v45 = v44 + v30;
              v31 = v44 == 0;
              v46 = *v43 != 0;
              if (!v31 && v45 != a2)
              {
                v48 = v43 + 1;
                do
                {
                  v50 = *v48++;
                  v49 = v50;
                  v45 += v50;
                  v46 = v50 != 0;
                  if (!v50)
                    v48 = 0;
                  if (v49)
                    v51 = v45 == a2;
                  else
                    v51 = 1;
                }
                while (!v51);
              }
              if (v46)
              {
                v52 = v69;
                if (v69 >= (unint64_t)HIDWORD(v69))
                {
                  v62 = v27;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, (uint64_t)v70, v69 + 1, 4);
                  v27 = v62;
                  v52 = v69;
                }
                *((_DWORD *)v68 + v52) = v25;
                LODWORD(v69) = v69 + 1;
              }
            }
          }
        }
      }
      ++v25;
    }
    while (v25 != v24);
    v53 = v69;
    if (!(_DWORD)v69)
    {
      v4 = a4;
      if ((v26 & 1) != 0)
        goto LABEL_84;
      goto LABEL_81;
    }
    v4 = a4;
    do
    {
      v54 = *((unsigned int *)v68 + v53 - 1);
      v55 = *((_QWORD *)this + 4);
      v56 = (_DWORD *)(v55 + 32 * v54);
      if ((*v56 & 0x2000000) != 0)
      {
        if (v54 >= 2 && **((unsigned __int16 **)this + 2) - 3 >= 0xFFFFFFFE)
        {
          v58 = *((_DWORD *)this + 10);
          if (v58 >= 3)
          {
            v59 = 2;
            while (*(_BYTE *)(v55 + 32 * v59) == 1)
            {
              v60 = v59;
              v59 += ((unsigned __int16)*(_DWORD *)(v55 + 32 * v59 + 16) >> 3) + 1;
              if (v59 > v54)
              {
                if ((v60 & 0x80000000) == 0)
                  goto LABEL_63;
                break;
              }
              if (v59 >= v58)
                break;
            }
          }
        }
        llvm::MachineInstr::removeOperand((uint64_t)this, v54);
      }
      else
      {
LABEL_63:
        *v56 &= ~0x4000000u;
      }
      v53 = v69 - 1;
      LODWORD(v69) = v69 - 1;
    }
    while ((_DWORD)v69);
  }
  else
  {
    v26 = 0;
  }
  if ((v26 & 1) != 0)
    goto LABEL_84;
LABEL_81:
  if (v4)
  {
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v64[0] = 117440512;
    v64[1] = a2;
    llvm::MachineInstr::addOperand(this, *(llvm::MachineFunction **)(*((_QWORD *)this + 3) + 32), (const llvm::MachineOperand *)v64);
LABEL_83:
    v26 = 1;
  }
LABEL_84:
  if (v68 != v70)
    free(v68);
  return v26 & 1;
}

uint64_t llvm::MachineInstr::clearRegisterDeads(uint64_t result, int a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *(unsigned int *)(result + 40);
  if ((_DWORD)v2)
  {
    v3 = *(_DWORD **)(result + 32);
    v4 = 32 * v2;
    do
    {
      if ((*v3 & 0x10000FF) == 0x1000000 && v3[1] == a2)
        *v3 &= ~0x4000000u;
      v3 += 8;
      v4 -= 32;
    }
    while (v4);
  }
  return result;
}

uint64_t llvm::MachineInstr::setRegisterDefReadUndef(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  int v8;

  v3 = *(unsigned int *)(result + 40);
  if ((_DWORD)v3)
  {
    v4 = *(unsigned int **)(result + 32);
    v5 = 32 * v3;
    do
    {
      v6 = *v4;
      if ((*v4 & 0x10000FF) == 0x1000000 && (v6 & 0xFFF00) != 0 && v4[1] == a2)
      {
        if (a3)
          v8 = 0x10000000;
        else
          v8 = 0;
        *v4 = v6 & 0xEFFFFFFF | v8;
      }
      v4 += 8;
      v5 -= 32;
    }
    while (v5);
  }
  return result;
}

void llvm::MachineInstr::addRegisterDefined(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 - 1 > 0x3FFFFFFE)
  {
    v5 = *(unsigned int *)(a1 + 40);
    if (!(_DWORD)v5)
    {
LABEL_13:
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v9[0] = 50331648;
      v9[1] = a2;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)a1, *(llvm::MachineFunction **)(*(_QWORD *)(a1 + 24) + 32), (const llvm::MachineOperand *)v9);
      return;
    }
    v6 = 32 * v5;
    v7 = (_DWORD *)(*(_QWORD *)(a1 + 32) + 4);
    while (*(v7 - 1) || (*(v7 - 1) & 0x10FFF00) != 0x1000000 || *v7 != a2)
    {
      v7 += 8;
      v6 -= 32;
      if (!v6)
        goto LABEL_13;
    }
  }
  else if (llvm::MachineInstr::findRegisterDefOperandIdx(a1, a2, 0, 0, a3) == -1 || !*(_QWORD *)(a1 + 32))
  {
    goto LABEL_13;
  }
}

void llvm::MachineInstr::setPhysRegsDeadExcept(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v7;
  int *v8;
  _QWORD *v9;
  char v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char v21;
  uint64_t v22;

  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4)
  {
    v7 = *(int **)(a1 + 32);
    v8 = &v7[8 * v4];
    v9 = (_QWORD *)(a4 + 8);
    v22 = 4 * a3;
    v10 = 1;
LABEL_3:
    v21 = v10;
    do
    {
      v11 = *v7;
      if (*v7)
      {
        if (*v7 == 12)
        {
          v10 = 0;
          v7 += 8;
          if (v7 != v8)
            goto LABEL_3;
          v16 = a4;
          v17 = a3;
          if (a3)
            goto LABEL_22;
          return;
        }
      }
      else if ((v11 & 0x1000000) != 0)
      {
        v12 = v7[1];
        if (v12 - 1 <= 0x3FFFFFFE)
        {
          if (a3)
          {
            v13 = v22;
            v14 = a2;
            while (1)
            {
              v15 = *v14;
              if (v12 == *v14 || v15 - 1 <= 0x3FFFFFFE && llvm::MCRegisterInfo::regsOverlap(v9, v15, v12))
                break;
              ++v14;
              v13 -= 4;
              if (!v13)
                goto LABEL_15;
            }
          }
          else
          {
LABEL_15:
            *v7 = v11 | 0x4000000;
          }
        }
      }
      v7 += 8;
    }
    while (v7 != v8);
    v17 = a3;
    v16 = a4;
    if (!(v21 & 1 | (a3 == 0)))
    {
LABEL_22:
      v18 = 4 * v17;
      do
      {
        v19 = *a2++;
        llvm::MachineInstr::addRegisterDefined(a1, v19, v16);
        v18 -= 4;
      }
      while (v18);
    }
  }
}

unint64_t llvm::MachineInstrExpressionTrait::getHashValue(llvm::MachineInstrExpressionTrait *this, const llvm::MachineInstr *const *a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  llvm *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x1000000000;
  v3 = (*(_DWORD *)(*(_QWORD *)this + 40) + 1);
  if (v3 > 0x10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, (uint64_t)v17, v3, 8);
    v4 = v16;
    v5 = **(unsigned __int16 **)(*(_QWORD *)this + 16);
    if (v16 >= HIDWORD(v16))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, (uint64_t)v17, v16 + 1, 8);
      v4 = v16;
    }
  }
  else
  {
    v4 = 0;
    v5 = **(unsigned __int16 **)(*(_QWORD *)this + 16);
  }
  *((_QWORD *)v15 + v4) = v5;
  v6 = v16 + 1;
  LODWORD(v16) = v16 + 1;
  v7 = *(unsigned int *)(*(_QWORD *)this + 40);
  if ((_DWORD)v7)
  {
    v8 = *(llvm **)(*(_QWORD *)this + 32);
    v9 = 32 * v7;
    do
    {
      if ((*(_DWORD *)v8 & 0x10000FF) != 0x1000000 || (*((_DWORD *)v8 + 1) & 0x80000000) == 0)
      {
        llvm::hash_value(v8, (const llvm::MachineOperand *)a2);
        v11 = v16;
        if (v16 >= (unint64_t)HIDWORD(v16))
        {
          v14 = v10;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, (uint64_t)v17, v16 + 1, 8);
          v10 = v14;
          v11 = v16;
        }
        *((_QWORD *)v15 + v11) = v10;
        v6 = v16 + 1;
        LODWORD(v16) = v16 + 1;
      }
      v8 = (llvm *)((char *)v8 + 32);
      v9 -= 32;
    }
    while (v9);
  }
  v12 = sub_1C4F5AB38(v15, (uint64_t)v15 + 8 * v6);
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t llvm::MachineInstr::emitError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  _QWORD v17[4];
  __int16 v18;
  uint64_t (**v19)(llvm::DiagnosticInfo *__hidden);
  int v20;
  char v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v3 = *(_DWORD *)(a1 + 40);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = v3 - 1;
    while (1)
    {
      v6 = v5;
      if (*(_BYTE *)(v4 + 32 * v5) == 14)
      {
        v7 = *(_QWORD *)(v4 + 32 * v5 + 16);
        if (v7)
        {
          v8 = *(unsigned int *)(v7 + 8);
          if ((_DWORD)v8)
          {
            v9 = *(_QWORD *)(v7 - 8 * v8);
            if (*(_BYTE *)v9 == 1)
            {
              v10 = *(_QWORD *)(v9 + 128);
              if (*(_BYTE *)(v10 + 16) == 16)
                break;
            }
          }
        }
      }
      --v5;
      if (!v6)
        goto LABEL_9;
    }
    v16 = (_QWORD *)(v10 + 24);
    if (*(_DWORD *)(v10 + 32) >= 0x41u)
      v16 = (_QWORD *)*v16;
    v11 = (_QWORD *)*v16;
  }
  else
  {
LABEL_9:
    v11 = 0;
  }
  v12 = *(_QWORD *)(a1 + 24);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 32)) == 0)
    llvm::report_fatal_error(a2, a3, 1);
  v14 = **(_QWORD **)(*(_QWORD *)(v13 + 32) + 2064);
  v18 = 261;
  v17[0] = a2;
  v17[1] = a3;
  v20 = 0;
  v21 = 0;
  v19 = &off_1E814E960;
  v22 = v11;
  v23 = v17;
  v24 = 0;
  return llvm::LLVMContext::diagnose(v14, (const llvm::DiagnosticInfo *)&v19);
}

llvm::MachineFunction *llvm::BuildMI(llvm::MachineFunction *a1, unsigned __int8 **a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 *v13;
  llvm::MachineInstr *v14;
  __int128 v16;
  __int128 v17;
  unsigned __int8 *v18;

  v13 = *a2;
  v18 = v13;
  if (v13)
    llvm::MetadataTracking::track((uint64_t)&v18, v13, 2);
  v14 = (llvm::MachineInstr *)*((_QWORD *)a1 + 28);
  if (v14)
    *((_QWORD *)a1 + 28) = *(_QWORD *)v14;
  else
    v14 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)a1 + 128, 72, 3);
  *(_QWORD *)&v16 = v18;
  if (v18)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v18, v18, (uint64_t)&v16);
    v18 = 0;
  }
  llvm::MachineInstr::MachineInstr(v14, a1, a3, (unsigned __int8 **)&v16, 0);
  if ((_QWORD)v16)
    llvm::MetadataTracking::untrack((uint64_t)&v16, (unsigned __int8 *)v16);
  if (v18)
    llvm::MetadataTracking::untrack((uint64_t)&v18, v18);
  *((_QWORD *)&v16 + 1) = 0;
  v17 = 0uLL;
  LODWORD(v16) = 0;
  DWORD1(v16) = a5;
  llvm::MachineInstr::addOperand(v14, a1, (const llvm::MachineOperand *)&v16);
  if (a4)
  {
    LODWORD(v16) = 1;
    *((_QWORD *)&v16 + 1) = 0;
    *(_QWORD *)&v17 = 0;
  }
  else
  {
    v16 = 0u;
    v17 = 0u;
  }
  llvm::MachineInstr::addOperand(v14, a1, (const llvm::MachineOperand *)&v16);
  LODWORD(v16) = 14;
  *((_QWORD *)&v16 + 1) = 0;
  *(_QWORD *)&v17 = a6;
  llvm::MachineInstr::addOperand(v14, a1, (const llvm::MachineOperand *)&v16);
  LODWORD(v16) = 14;
  *((_QWORD *)&v16 + 1) = 0;
  *(_QWORD *)&v17 = a7;
  llvm::MachineInstr::addOperand(v14, a1, (const llvm::MachineOperand *)&v16);
  return a1;
}

llvm::MachineFunction *sub_1C5169B3C(llvm::MachineFunction *a1, unsigned __int8 **a2, uint64_t a3)
{
  unsigned __int8 *v5;
  llvm::MachineInstr *v6;
  unsigned __int8 *v8;
  unsigned __int8 *v9;

  v5 = *a2;
  v8 = v5;
  if (v5)
    llvm::MetadataTracking::track((uint64_t)&v8, v5, 2);
  v6 = (llvm::MachineInstr *)*((_QWORD *)a1 + 28);
  if (v6)
    *((_QWORD *)a1 + 28) = *(_QWORD *)v6;
  else
    v6 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)a1 + 128, 72, 3);
  v9 = v8;
  if (v8)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v8, v8, (uint64_t)&v9);
    v8 = 0;
  }
  llvm::MachineInstr::MachineInstr(v6, a1, a3, &v9, 0);
  if (v9)
    llvm::MetadataTracking::untrack((uint64_t)&v9, v9);
  if (v8)
    llvm::MetadataTracking::untrack((uint64_t)&v8, v8);
  return a1;
}

llvm::MachineFunction *llvm::BuildMI(llvm::MachineInstr **a1, unsigned __int8 **a2, uint64_t a3, int a4, int *a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 *v14;
  llvm::MachineInstr *v15;
  __int128 v16;
  __int128 v17;
  unsigned __int8 *v18;

  if (!*(_BYTE *)a5)
    return llvm::BuildMI((llvm::MachineFunction *)a1, a2, a3, a4, a5[1], a6, a7);
  v14 = *a2;
  v18 = v14;
  if (v14)
    llvm::MetadataTracking::track((uint64_t)&v18, v14, 2);
  v15 = a1[28];
  if (v15)
    a1[28] = *(llvm::MachineInstr **)v15;
  else
    v15 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)(a1 + 16), 72, 3);
  *(_QWORD *)&v16 = v18;
  if (v18)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v18, v18, (uint64_t)&v16);
    v18 = 0;
  }
  llvm::MachineInstr::MachineInstr(v15, (llvm::MachineFunction *)a1, a3, (unsigned __int8 **)&v16, 0);
  if ((_QWORD)v16)
    llvm::MetadataTracking::untrack((uint64_t)&v16, (unsigned __int8 *)v16);
  if (v18)
    llvm::MetadataTracking::untrack((uint64_t)&v18, v18);
  llvm::MachineInstr::addOperand(v15, (llvm::MachineFunction *)a1, (const llvm::MachineOperand *)a5);
  if (a4)
  {
    LODWORD(v16) = 1;
    *((_QWORD *)&v16 + 1) = 0;
    *(_QWORD *)&v17 = 0;
  }
  else
  {
    v16 = 0u;
    v17 = 0u;
  }
  llvm::MachineInstr::addOperand(v15, (llvm::MachineFunction *)a1, (const llvm::MachineOperand *)&v16);
  LODWORD(v16) = 14;
  *((_QWORD *)&v16 + 1) = 0;
  *(_QWORD *)&v17 = a6;
  llvm::MachineInstr::addOperand(v15, (llvm::MachineFunction *)a1, (const llvm::MachineOperand *)&v16);
  LODWORD(v16) = 14;
  *((_QWORD *)&v16 + 1) = 0;
  *(_QWORD *)&v17 = a7;
  llvm::MachineInstr::addOperand(v15, (llvm::MachineFunction *)a1, (const llvm::MachineOperand *)&v16);
  return (llvm::MachineFunction *)a1;
}

llvm::MachineFunction *llvm::BuildMI(llvm::MachineInstr **a1, unsigned __int8 **a2, _WORD *a3, int a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  llvm::MachineFunction *v12;
  llvm::MachineInstr *v13;
  llvm::MachineInstr *v14;
  uint64_t v15;
  llvm::MachineInstr *v16;
  llvm::MachineFunction *v17;
  const llvm::MachineOperand *v18;
  int v19;
  llvm::MachineOperand *v20;
  _DWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (*a3 == 13)
    return llvm::BuildMI(a1, a2, (uint64_t)a3, a4, a5, a7, a8);
  v20 = (llvm::MachineOperand *)a5;
  v12 = sub_1C5169B3C((llvm::MachineFunction *)a1, a2, (uint64_t)a3);
  v14 = v13;
  v21[0] = 14;
  v22 = 0;
  v23 = a7;
  llvm::MachineInstr::addOperand(v13, v12, (const llvm::MachineOperand *)v21);
  v21[0] = 14;
  v22 = 0;
  v23 = a8;
  llvm::MachineInstr::addOperand(v14, v12, (const llvm::MachineOperand *)v21);
  if (a6)
  {
    v15 = 32 * a6;
    do
    {
      if (*(_BYTE *)v20)
      {
        v16 = v14;
        v17 = v12;
        v18 = v20;
      }
      else
      {
        v19 = *((_DWORD *)v20 + 1);
        v22 = 0;
        v21[0] = 0;
        v21[1] = v19;
        v23 = 0;
        v24 = 0;
        v18 = (const llvm::MachineOperand *)v21;
        v16 = v14;
        v17 = v12;
      }
      llvm::MachineInstr::addOperand(v16, v17, v18);
      v20 = (llvm::MachineOperand *)((char *)v20 + 32);
      v15 -= 32;
    }
    while (v15);
  }
  return v12;
}

llvm::MachineInstr **llvm::BuildMI(uint64_t a1, unint64_t *a2, unsigned __int8 **a3, _WORD *a4, int a5, int *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  llvm::MachineInstr **v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v11 = *(llvm::MachineInstr ***)(a1 + 32);
  llvm::BuildMI(v11, a3, a4, a5, a6, a7, a8, a9);
  v13 = (unint64_t *)v12;
  v14 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v12 + 24) = v14;
  v15 = *(_QWORD *)(v14 + 32);
  v16 = *(unsigned int *)(v12 + 40);
  if ((_DWORD)v16)
  {
    v20 = *(_QWORD *)(v12 + 32);
    v21 = *(_QWORD *)(v15 + 40);
    v22 = 32 * v16;
    do
    {
      if (!*(_BYTE *)v20)
      {
        v23 = *(unsigned int *)(v20 + 4);
        if ((int)v23 >= 0)
          v24 = (uint64_t *)(*(_QWORD *)(v21 + 272) + 8 * v23);
        else
          v24 = (uint64_t *)(*(_QWORD *)(v21 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
        v25 = *v24;
        if (*v24)
        {
          v26 = *(_QWORD *)(v25 + 16);
          *(_QWORD *)(v25 + 16) = v20;
          *(_QWORD *)(v20 + 16) = v26;
          if ((*(_BYTE *)(v20 + 3) & 1) != 0)
          {
            *(_QWORD *)(v20 + 24) = v25;
          }
          else
          {
            *(_QWORD *)(v20 + 24) = 0;
            v24 = (uint64_t *)(v26 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v20 + 16) = v20;
          *(_QWORD *)(v20 + 24) = 0;
        }
        *v24 = v20;
      }
      v20 += 32;
      v22 -= 32;
    }
    while (v22);
  }
  v17 = *(_QWORD *)(v15 + 728);
  if (v17)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 24))(v17, v12);
  v18 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *v13 = v18 | *v13 & 7;
  v13[1] = (unint64_t)a2;
  *(_QWORD *)(v18 + 8) = v13;
  *a2 = *a2 & 7 | (unint64_t)v13;
  return v11;
}

llvm::DIExpression *sub_1C516A018(uint64_t a1, int a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::DIExpression *v9;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE *v17;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD v26[7];

  v26[6] = *MEMORY[0x1E0C80C00];
  v24 = v26;
  v25 = 0x600000000;
  sub_1C61F0F94(v18, a1, a2);
  v14 = v18[0];
  v15 = v18[1];
  v3 = v16;
  if (v20)
  {
    if (v20 == &v19)
    {
      v17 = v16;
      (*(void (**)(void))(*v20 + 24))();
    }
    else
    {
      v17 = (_BYTE *)(*(uint64_t (**)(void))(*v20 + 16))();
    }
  }
  else
  {
    v17 = 0;
  }
  v11 = v21;
  v4 = v12;
  if (v23)
  {
    if (v23 == &v22)
    {
      v13 = v12;
      (*(void (**)(void))(*v23 + 24))();
    }
    else
    {
      v13 = (_BYTE *)(*(uint64_t (**)(void))(*v23 + 16))();
    }
  }
  else
  {
    v13 = 0;
  }
LABEL_11:
  v5 = v14;
  while (v5 != v11)
  {
    v6 = v25;
    if (v25 >= (unint64_t)HIDWORD(v25))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, (uint64_t)v26, v25 + 1, 8);
      v6 = v25;
    }
    v24[v6] = v5;
    LODWORD(v25) = v25 + 1;
    while (1)
    {
      v5 = v14 + 32;
      v14 = v5;
      if (v5 == v15)
        break;
      if (!v17)
        sub_1C485C2F0();
      if ((*(unsigned int (**)(_BYTE *, uint64_t))(*(_QWORD *)v17 + 48))(v17, v5))
        goto LABEL_11;
    }
  }
  if (v13 == v12)
  {
    v7 = 4;
  }
  else
  {
    if (!v13)
      goto LABEL_25;
    v7 = 5;
    v4 = v13;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v7))(v4);
LABEL_25:
  if (v17 == v16)
  {
    v8 = 4;
  }
  else
  {
    if (!v17)
      goto LABEL_30;
    v8 = 5;
    v3 = v17;
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v8))(v3);
LABEL_30:
  sub_1C619047C(v18);
  v9 = sub_1C516A264(a1, v24, v25);
  if (v24 != v26)
    free(v24);
  return v9;
}

llvm::DIExpression *sub_1C516A264(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  int v4;
  _BYTE *v5;
  uint64_t v6;
  llvm::DIExpression *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = **(unsigned __int16 **)(a1 + 16);
  v5 = *(_BYTE **)(a1 + 32);
  v6 = 96;
  if (v4 == 14)
    v6 = 32;
  result = *(llvm::DIExpression **)&v5[v6 + 16];
  if (v4 == 13)
  {
    if (v5[32] == 1 && !*v5)
      return llvm::DIExpression::prepend(result, (const llvm::DIExpression *)1, 0);
  }
  else if (v4 == 14)
  {
    v11 = 6;
    if (a3)
    {
      v9 = 8 * a3;
      do
      {
        v10 = *a2++;
        result = llvm::DIExpression::appendOpsToArg(result, &v11, 1, (v10 - (*(_QWORD *)(a1 + 32) + ((unint64_t)(**(_WORD **)(a1 + 16) == 14) << 6))) >> 5, 0);
        v9 -= 8;
      }
      while (v9);
    }
  }
  return result;
}

_QWORD *llvm::updateDbgValueForSpill(uint64_t a1, int a2, int a3)
{
  llvm::DIExpression *v6;
  _QWORD *v7;
  _QWORD *v8;
  llvm::MachineOperand *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  llvm::MachineOperand *v15;
  _BYTE v16[24];
  _BYTE *v17;
  llvm::MachineOperand *v18;
  llvm::MachineOperand *v19;
  _BYTE v20[24];
  _BYTE *v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t *v24;
  llvm::MachineOperand *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = sub_1C516A018(a1, a3);
  if (**(_WORD **)(a1 + 16) == 13)
    llvm::MachineOperand::ChangeToImmediate((unsigned int *)(*(_QWORD *)(a1 + 32) + 32), 0, 0);
  sub_1C61F1700(a1, a3, v22);
  v18 = (llvm::MachineOperand *)v22[0];
  v19 = (llvm::MachineOperand *)v22[1];
  v7 = v20;
  if (v24)
  {
    if (v24 == &v23)
    {
      v21 = v20;
      (*(void (**)(void))(*v24 + 24))();
    }
    else
    {
      v21 = (_BYTE *)(*(uint64_t (**)(void))(*v24 + 16))();
    }
  }
  else
  {
    v21 = 0;
  }
  v15 = v25;
  v8 = v16;
  if (v27)
  {
    if (v27 == &v26)
    {
      v17 = v16;
      (*(void (**)(void))(*v27 + 24))();
    }
    else
    {
      v17 = (_BYTE *)(*(uint64_t (**)(void))(*v27 + 16))();
    }
  }
  else
  {
    v17 = 0;
  }
  v9 = v18;
  while (v9 != v15)
  {
    llvm::MachineOperand::removeRegFromUses(v9);
    v10 = *(_DWORD *)v9;
    *((_DWORD *)v9 + 4) = a2;
    *(_DWORD *)v9 = v10 & 0xFFF00000 | 5;
    while (1)
    {
      v9 = (llvm::MachineOperand *)((char *)v18 + 32);
      v18 = v9;
      if (v9 == v19)
        break;
      if (!v21)
        sub_1C485C2F0();
      if ((*(unsigned int (**)(_BYTE *, llvm::MachineOperand *))(*(_QWORD *)v21 + 48))(v21, v9))
      {
        v9 = v18;
        break;
      }
    }
  }
  if (v17 == v16)
  {
    v11 = 4;
  }
  else
  {
    if (!v17)
      goto LABEL_25;
    v11 = 5;
    v8 = v17;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v11))(v8);
LABEL_25:
  if (v21 == v20)
  {
    v12 = 4;
  }
  else
  {
    if (!v21)
      goto LABEL_30;
    v12 = 5;
    v7 = v21;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v12))(v7);
LABEL_30:
  result = sub_1C619047C(v22);
  v14 = 96;
  if (**(_WORD **)(a1 + 16) == 14)
    v14 = 32;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + v14 + 16) = v6;
  return result;
}

_WORD *llvm::MachineInstr::collectDebugValues(_WORD *result, uint64_t a2)
{
  _WORD *v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t i;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  if (!**((_BYTE **)result + 4))
  {
    v3 = result;
    v4 = result;
    if ((*(_BYTE *)result & 4) == 0)
    {
      v4 = result;
      if ((result[22] & 8) != 0)
      {
        v4 = result;
        do
          v4 = (_WORD *)*((_QWORD *)v4 + 1);
        while ((v4[22] & 8) != 0);
      }
    }
    v5 = *((_QWORD *)v4 + 1);
    for (i = *((_QWORD *)result + 3) + 48; v5 != i; v5 = *(_QWORD *)(v5 + 8))
    {
      v7 = **(unsigned __int16 **)(v5 + 16);
      if ((v7 - 13) > 1)
        break;
      v8 = *(_QWORD *)(v5 + 32);
      if (v7 != 14)
      {
        v10 = v8 + 32;
        goto LABEL_13;
      }
      v9 = *(unsigned int *)(v5 + 40);
      if ((_DWORD)v9 != 2)
      {
        v10 = v8 + 32 * v9;
        v8 += 64;
LABEL_13:
        while (*(_BYTE *)v8 || *(_DWORD *)(v8 + 4) != *(_DWORD *)(*((_QWORD *)v3 + 4) + 4))
        {
          v8 += 32;
          if (v8 == v10)
          {
            if (v5)
              goto LABEL_21;
            goto LABEL_24;
          }
        }
        v11 = *(unsigned int *)(a2 + 8);
        if (v11 >= *(unsigned int *)(a2 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v11 + 1, 8);
          v11 = *(unsigned int *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v11) = v5;
        ++*(_DWORD *)(a2 + 8);
        if (!v5)
          goto LABEL_24;
      }
LABEL_21:
      if ((*(_BYTE *)v5 & 4) == 0)
      {
LABEL_24:
        while ((*(_WORD *)(v5 + 44) & 8) != 0)
          v5 = *(_QWORD *)(v5 + 8);
      }
    }
  }
  return result;
}

void llvm::MachineInstr::changeDebugValuesDefReg(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];
  _BYTE *v28;
  _QWORD v29[2];
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[3];
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD v37[3];

  v37[2] = *MEMORY[0x1E0C80C00];
  v35 = v37;
  v36 = 0x200000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)v2)
  {
    v3 = *(unsigned int *)(v2 + 4);
    v4 = *(_QWORD **)(a1 + 24);
    if (v4)
      v4 = *(_QWORD **)(v4[4] + 40);
    v5 = (uint64_t *)((v3 & 0x80000000) != 0 ? v4[3] + 16 * (v3 & 0x7FFFFFFF) + 8 : v4[34] + 8 * v3);
    v6 = *v5;
    if (*v5)
    {
      while ((*(_BYTE *)(v6 + 3) & 1) != 0)
      {
        v6 = *(_QWORD *)(v6 + 24);
        if (!v6)
          return;
      }
      v7 = 0;
LABEL_13:
      v8 = *(_QWORD *)(v6 + 8);
      v9 = **(unsigned __int16 **)(v8 + 16);
      if ((v9 - 13) > 1)
        goto LABEL_25;
      v10 = *(_QWORD *)(v8 + 32);
      if (v9 == 14)
      {
        v11 = *(unsigned int *)(v8 + 40);
        if ((_DWORD)v11 == 2)
          goto LABEL_25;
        v12 = v10 + 32 * v11;
        v10 += 64;
      }
      else
      {
        v12 = v10 + 32;
      }
      while (*(_BYTE *)v10 || *(_DWORD *)(v10 + 4) != (_DWORD)v3)
      {
        v10 += 32;
        if (v10 == v12)
          goto LABEL_25;
      }
      if (v7 >= HIDWORD(v36))
      {
        v13 = a2;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, (uint64_t)v37, v7 + 1, 8);
        a2 = v13;
        v7 = v36;
      }
      v35[v7] = v8;
      v7 = v36 + 1;
      LODWORD(v36) = v36 + 1;
LABEL_25:
      while (1)
      {
        v6 = *(_QWORD *)(v6 + 24);
        if (!v6)
          break;
        if ((*(_BYTE *)(v6 + 3) & 1) == 0)
          goto LABEL_13;
      }
      v14 = v35;
      if (v7)
      {
        v15 = a2;
        v16 = &v35[v7];
        while (1)
        {
          sub_1C61F1700(*v14, v3, v29);
          v25 = v29[0];
          v26 = v29[1];
          if (v31)
          {
            if (v31 == v30)
            {
              v28 = v27;
              (*(void (**)(_QWORD *, _BYTE *))(v30[0] + 24))(v30, v27);
            }
            else
            {
              v28 = (_BYTE *)(*(uint64_t (**)(void))(*v31 + 16))();
            }
          }
          else
          {
            v28 = 0;
          }
          v22 = v32;
          if (v34)
          {
            if (v34 == v33)
            {
              v24 = v23;
              (*(void (**)(_QWORD *, _BYTE *))(v33[0] + 24))(v33, v23);
            }
            else
            {
              v24 = (_BYTE *)(*(uint64_t (**)(void))(*v34 + 16))();
            }
          }
          else
          {
            v24 = 0;
          }
LABEL_40:
          v17 = v25;
          while (v17 != v22)
          {
            llvm::MachineOperand::setReg(v17, v15);
            while (1)
            {
              v17 = v25 + 32;
              v25 = v17;
              if (v17 == v26)
                break;
              if (!v28)
                sub_1C485C2F0();
              if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v28 + 48))(v28))
                goto LABEL_40;
            }
          }
          v18 = v24;
          if (v24 == v23)
          {
            v18 = v23;
            v19 = 4;
          }
          else
          {
            if (!v24)
              goto LABEL_52;
            v19 = 5;
          }
          (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_52:
          v20 = v28;
          if (v28 == v27)
          {
            v20 = v27;
            v21 = 4;
LABEL_56:
            (*(void (**)(void))(*v20 + 8 * v21))();
            goto LABEL_57;
          }
          if (v28)
          {
            v21 = 5;
            goto LABEL_56;
          }
LABEL_57:
          sub_1C619047C(v29);
          if (++v14 == v16)
          {
            v14 = v35;
            break;
          }
        }
      }
      if (v14 != v37)
        free(v14);
    }
  }
}

uint64_t llvm::MachineInstr::getSpillSize(llvm::MachineInstr *this, const llvm::TargetInstrInfo *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;

  v11 = 0;
  if ((*(unsigned int (**)(const llvm::TargetInstrInfo *, llvm::MachineInstr *, int *))(*(_QWORD *)a2 + 112))(a2, this, &v11)&& (v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 32) + 56), *(_BYTE *)(*(_QWORD *)(v7 + 8) + 40 * (*(_DWORD *)(v7 + 32) + v11) + 18)))
  {
    v8 = *((_QWORD *)this + 6);
    if ((v8 & 7) != 0)
    {
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v9 = v8 & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 6) = v8 & 0xFFFFFFFFFFFFFFF8;
    }
    v10 = sub_1C4831E04(v9);
    v5 = v10 & 0xFFFFFF00;
    v3 = v10;
    v4 = 0x100000000;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
  }
  return v4 | v3 | v5;
}

uint64_t llvm::MachineInstr::getFoldedSpillSize(llvm::MachineInstr *this, const llvm::TargetInstrInfo *a2)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10[2];
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  v10[0] = v11;
  v10[1] = (void *)0x200000000;
  if ((*(unsigned int (**)(const llvm::TargetInstrInfo *, llvm::MachineInstr *, void **))(*(_QWORD *)a2 + 120))(a2, this, v10))
  {
    v7 = sub_1C516ABE4((uint64_t)v10, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 32) + 56));
    v5 = v7 & 0xFFFFFF00;
    v3 = v7;
    v4 = 0x100000000;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
  }
  if (v10[0] != v11)
  {
    v9 = v4;
    v8 = v5;
    free(v10[0]);
    v5 = v8;
    v4 = v9;
  }
  return v4 | v5 | v3;
}

uint64_t sub_1C516ABE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;
  int v13;

  v2 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v2)
    return 0;
  v4 = 0;
  v5 = *(_QWORD **)a1;
  v6 = 8 * v2;
  do
  {
    v7 = (_QWORD *)*v5;
    if (*(_BYTE *)(*(_QWORD *)(a2 + 8)
                  + 40
                  * (*(_DWORD *)(a2 + 32)
                                 + *(_DWORD *)((*(_QWORD *)*v5 & ((uint64_t)(*(_QWORD *)*v5 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)
                                             + 0x10))
                  + 18))
    {
      v9 = v7[3];
      v8 = v7 + 3;
      if ((v9 & 0xFFFFFFFFFFFFFFF9) != 0)
      {
        v11 = (unint64_t)(sub_1C4825F50(v8) + 7) >> 3;
        if ((_DWORD)v10 == 1)
        {
          v13 = v11;
          LODWORD(v11) = v13;
        }
      }
      else
      {
        LODWORD(v11) = -1;
      }
      v4 = (v4 + v11);
    }
    ++v5;
    v6 -= 8;
  }
  while (v6);
  return v4;
}

uint64_t llvm::MachineInstr::getRestoreSize(llvm::MachineInstr *this, const llvm::TargetInstrInfo *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;

  v11 = 0;
  if ((*(unsigned int (**)(const llvm::TargetInstrInfo *, llvm::MachineInstr *, int *))(*(_QWORD *)a2 + 80))(a2, this, &v11)&& (v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 32) + 56), *(_BYTE *)(*(_QWORD *)(v7 + 8) + 40 * (*(_DWORD *)(v7 + 32) + v11) + 18)))
  {
    v8 = *((_QWORD *)this + 6);
    if ((v8 & 7) != 0)
    {
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v9 = v8 & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 6) = v8 & 0xFFFFFFFFFFFFFFF8;
    }
    v10 = sub_1C4831E04(v9);
    v5 = v10 & 0xFFFFFF00;
    v3 = v10;
    v4 = 0x100000000;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
  }
  return v4 | v3 | v5;
}

uint64_t llvm::MachineInstr::getDebugInstrNum(llvm::MachineInstr *this, llvm::MachineFunction *a2)
{
  uint64_t result;

  result = *((unsigned int *)this + 16);
  if (!(_DWORD)result)
  {
    result = (*((_DWORD *)a2 + 228) + 1);
    *((_DWORD *)a2 + 228) = result;
    *((_DWORD *)this + 16) = result;
  }
  return result;
}

_QWORD *sub_1C516AD9C(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *result = 0;
  result[1] = 0;
  v2 = a2;
  if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
    v2 = a2;
    do
      v2 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v2 + 44) & 4) != 0);
  }
  *result = v2;
  v3 = *(_QWORD *)(a2 + 24) + 48;
  result[1] = v3;
  v4 = *(_QWORD *)(v2 + 32);
  v5 = *(unsigned int *)(v2 + 40);
  result[2] = v4;
  result[3] = v4 + 32 * v5;
  if (!(_DWORD)v5)
  {
    do
    {
      v2 = *(_QWORD *)(v2 + 8);
      if (v2 == v3 || (*(_WORD *)(v2 + 44) & 4) == 0)
      {
        *result = v3;
        return result;
      }
      v6 = *(_QWORD *)(v2 + 32);
      v7 = *(unsigned int *)(v2 + 40);
      result[2] = v6;
      result[3] = v6 + 32 * v7;
    }
    while (!(_DWORD)v7);
    *result = v2;
  }
  return result;
}

uint64_t sub_1C516AE24(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  llvm::initializeMachineBlockFrequencyInfoPass(a1, v2);
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "Machine Loop Invariant Code Motion";
  *(_QWORD *)(v4 + 8) = 34;
  *(_QWORD *)(v4 + 16) = "machinelicm";
  *(_QWORD *)(v4 + 24) = 11;
  *(_QWORD *)(v4 + 32) = &unk_1EF8F6F51;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C516AF90;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C516AED0(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  llvm::initializeMachineBlockFrequencyInfoPass(a1, v2);
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "Early Machine Loop Invariant Code Motion";
  *(_QWORD *)(v4 + 8) = 40;
  *(_QWORD *)(v4 + 16) = "early-machinelicm";
  *(_QWORD *)(v4 + 24) = 17;
  *(_QWORD *)(v4 + 32) = &unk_1EF8F6F52;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C516F15C;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C516AF7C(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

uint64_t sub_1C516AF90()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v0 = operator new();
  sub_1C516B06C(v0, (uint64_t)&unk_1EF8F6F51, 0);
  *v1 = &off_1E8145258;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7FAAE0);
  if (v3 != -1)
  {
    v7[0] = sub_1C516AE24;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7FAAE0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

double sub_1C516B06C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  double result;

  v4 = sub_1C4776848(a1, a2);
  *(_QWORD *)v4 = &off_1E8145318;
  *(_OWORD *)(v4 + 320) = xmmword_1C8663800;
  *(_OWORD *)(v4 + 336) = unk_1C8663810;
  *(_QWORD *)(v4 + 352) = 0;
  *(_OWORD *)(v4 + 288) = llvm::MCSchedModel::Default;
  *(_OWORD *)(v4 + 304) = unk_1C86637F0;
  *(_OWORD *)(v4 + 376) = unk_1C86637F0;
  *(_OWORD *)(v4 + 392) = xmmword_1C8663800;
  *(_OWORD *)(v4 + 408) = unk_1C8663810;
  *(_QWORD *)(v4 + 424) = 0;
  *(_OWORD *)(v4 + 360) = llvm::MCSchedModel::Default;
  result = 0.0;
  *(_OWORD *)(v4 + 432) = 0u;
  *(_OWORD *)(v4 + 448) = 0u;
  *(_OWORD *)(v4 + 464) = 0u;
  *(_QWORD *)(v4 + 480) = v4 + 496;
  *(_QWORD *)(v4 + 488) = 0x1000000000;
  *(_QWORD *)(v4 + 560) = 0;
  *(_BYTE *)(v4 + 568) = a3;
  *(_QWORD *)(v4 + 632) = v4 + 648;
  *(_QWORD *)(v4 + 640) = 0x800000000;
  *(_QWORD *)(v4 + 712) = v4 + 728;
  *(_QWORD *)(v4 + 720) = 0x2000000000;
  *(_OWORD *)(v4 + 864) = 0u;
  *(_QWORD *)(v4 + 856) = v4 + 864;
  *(_QWORD *)(v4 + 880) = v4 + 896;
  *(_QWORD *)(v4 + 888) = 0x800000000;
  *(_QWORD *)(v4 + 928) = v4 + 944;
  *(_QWORD *)(v4 + 936) = 0x800000000;
  *(_QWORD *)(v4 + 976) = v4 + 992;
  *(_QWORD *)(v4 + 984) = 0x1000000000;
  *(_DWORD *)(v4 + 1776) = 0;
  *(_OWORD *)(v4 + 1760) = 0u;
  return result;
}

void sub_1C516B15C(uint64_t a1)
{
  sub_1C516DB2C(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C516B180(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  if (dword_1ED7FAE70)
    sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

void sub_1C516B214(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *(_DWORD *)(a1 + 720) = 0;
  sub_1C47655E8(a1 + 856, *(_QWORD **)(a1 + 864));
  *(_QWORD *)(a1 + 856) = a1 + 864;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 864) = 0;
  *(_DWORD *)(a1 + 888) = 0;
  *(_DWORD *)(a1 + 936) = 0;
  v2 = *(unsigned int *)(a1 + 984);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(a1 + 976);
    v4 = 48 * v2;
    do
    {
      v5 = *(void **)(v3 + v4 - 48);
      if ((void *)(v3 + v4 - 32) != v5)
        free(v5);
      v4 -= 48;
    }
    while (v4);
  }
  *(_DWORD *)(a1 + 984) = 0;
  sub_1C61F1FA0((unsigned int *)(a1 + 1760));
}

BOOL sub_1C516B29C(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t NamedMetadata;
  uint64_t v6;
  _QWORD *v7;
  _BOOL8 v8;
  const llvm::TargetSubtargetInfo *v9;
  unsigned int v10;
  unsigned int v11;
  void **v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  void **v17;
  void *v18;
  void **v19;
  void *v20;
  void **v21;
  void *v22;
  void **v23;
  void *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unsigned int v28;
  _QWORD *v29;
  llvm::MachineBasicBlock *v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  unint64_t v53;
  int v54;
  _WORD *v55;
  uint64_t v56;
  int v57;
  BOOL v58;
  int v59;
  unsigned int v60;
  uint64_t i;
  unsigned __int16 *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char v67;
  unsigned int v68;
  int **v69;
  int *v70;
  unint64_t *v71;
  int v72;
  int v73;
  int v74;
  _QWORD *j;
  int v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  _DWORD *v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  int v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  unsigned __int16 *v91;
  _WORD *v92;
  int v93;
  int v94;
  _WORD *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  int v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  unsigned __int16 *v113;
  _WORD *v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  int v120;
  unsigned int v121;
  uint64_t *v122;
  _QWORD *v123;
  unsigned int v124;
  unsigned __int16 *v125;
  int v126;
  unsigned __int16 *v127;
  unsigned int v128;
  uint64_t *v129;
  unsigned int k;
  unsigned __int16 *v131;
  int v132;
  unsigned __int16 *v133;
  unsigned int v134;
  _QWORD *v135;
  unsigned int v136;
  int v137;
  unsigned __int16 *v138;
  int v139;
  unsigned __int16 *v140;
  unsigned __int16 *v141;
  __int16 v142;
  uint64_t v143;
  unint64_t v144;
  _DWORD *v145;
  BOOL v146;
  int *v147;
  uint64_t **v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t **v151;
  uint64_t v152;
  unint64_t v153;
  _DWORD *v154;
  uint64_t v155;
  uint64_t v156;
  _DWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  unint64_t FirstTerminator;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  int v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  unsigned __int16 *v176;
  _WORD *v177;
  int v178;
  int v179;
  uint64_t v180;
  int v181;
  int v183;
  unsigned int v184;
  uint64_t m;
  unsigned __int16 *v186;
  int v187;
  unsigned int *v188;
  llvm::MachineBasicBlock *v189;
  signed int v190;
  _QWORD *n;
  signed int v192;
  _DWORD *v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int *v199;
  unsigned int v200;
  uint64_t v201;
  unsigned int v202;
  llvm::MachineBasicBlock *v203;
  unint64_t *v204;
  unint64_t *v205;
  unsigned __int8 **v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t ii;
  _QWORD *v210;
  unsigned __int16 *v211;
  unsigned __int16 *v212;
  unsigned __int16 *v213;
  unint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  uint64_t jj;
  uint64_t v226;
  unsigned int *v227;
  unsigned int *v228;
  unsigned int v229;
  unsigned int v230;
  _WORD *v231;
  int v232;
  unsigned __int16 v233;
  BOOL v234;
  unsigned __int16 *v236;
  int v237;
  int v238;
  BOOL v239;
  unsigned __int8 *v240;
  uint64_t v241;
  unsigned int v242;
  uint64_t *v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  unsigned int v260;
  unsigned int v261;
  _QWORD *v262;
  uint64_t v263;
  _QWORD *v264;
  int v265;
  BOOL v266;
  unsigned int v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  uint64_t **v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unsigned int v284;
  _QWORD *v285;
  _QWORD *v286;
  _QWORD *v287;
  int v288;
  BOOL v289;
  unsigned int v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  int v295;
  uint64_t v296;
  unsigned int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  llvm::MachineBasicBlock *v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unsigned int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t IncompleteVirtualRegister;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  llvm::MachineInstr *v327;
  int v328;
  int v329;
  int v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  int v336;
  uint64_t v337;
  int v338;
  int v339;
  uint64_t v340;
  unsigned int v341;
  uint64_t v342;
  _DWORD *v343;
  int v344;
  _DWORD *v345;
  int v346;
  BOOL v347;
  int v348;
  _DWORD *v349;
  unint64_t v350;
  _QWORD *v351;
  _QWORD *v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  unint64_t v356;
  char *v357;
  char *v358;
  _QWORD *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  int *v363;
  int *v364;
  unint64_t *v366;
  unsigned __int8 **v367;
  unsigned int v368;
  uint64_t *v369;
  uint64_t *v370;
  uint64_t *v371;
  uint64_t v372;
  BOOL v373;
  unsigned int *v374;
  unsigned int *v375;
  uint64_t v376;
  uint64_t v377;
  unsigned int *v378;
  uint64_t v379;
  unsigned int *v380;
  uint64_t v381;
  unsigned int v382;
  uint64_t v383;
  unsigned int *v384;
  unsigned int v385;
  uint64_t v386;
  uint64_t v387;
  unsigned int *v388;
  int v389;
  int v390;
  int v391;
  uint64_t v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t *v396;
  _QWORD *v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  unint64_t v401;
  char *v402;
  _QWORD *v403;
  _QWORD *v404;
  uint64_t v405;
  uint64_t v406;
  int v407;
  unsigned int v408;
  uint64_t v409;
  int v410;
  int *v411;
  int v412;
  BOOL v413;
  int v414;
  uint64_t v415;
  uint64_t v416;
  unsigned int v417;
  uint64_t kk;
  uint64_t v419;
  int *v420;
  unint64_t v421;
  _QWORD *v422;
  _QWORD *v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  int v432;
  int v433;
  uint64_t v434;
  uint64_t v435;
  unsigned __int8 *v436;
  uint64_t v437;
  char v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unsigned int *v455;
  uint64_t v456;
  uint64_t v457;
  char *v458;
  uint64_t v459;
  uint64_t v460;
  unsigned int v461;
  _QWORD *v462;
  uint64_t *v463;
  uint64_t v464;
  uint64_t v465;
  _QWORD *v466;
  _QWORD *v467;
  unsigned int v468;
  void **v469;
  uint64_t v470;
  uint64_t *v471;
  void *v472;
  unsigned int v473;
  _QWORD *v474;
  void *v475;
  _QWORD *v476;
  int v477;
  BOOL v478;
  unsigned int v479;
  _QWORD *v480;
  int v481;
  int v482;
  int v483;
  uint64_t v485;
  uint64_t v486;
  char *v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t *v490;
  uint64_t **v491;
  uint64_t v492;
  int *v493;
  unint64_t v494;
  uint64_t v495;
  int v496;
  uint64_t v497;
  char *v498;
  uint64_t v499;
  llvm::MachineBasicBlock *v500;
  _QWORD *v501;
  uint64_t v502;
  _QWORD *v503;
  uint64_t v504;
  unsigned int *v505;
  llvm::MachineBasicBlock *v506;
  llvm::MachineBasicBlock *v507;
  _QWORD *v508;
  unsigned int *v509;
  char *v510;
  _QWORD v511[2];
  int v512;
  unsigned __int8 *v513;
  int v514;
  void *v515;
  uint64_t v516;
  _BYTE v517[64];
  void *v518;
  uint64_t v519;
  _DWORD v520[14];
  void *v521;
  uint64_t v522;
  _QWORD v523[16];
  uint64_t *v524;
  _QWORD *v525;
  uint64_t v526;
  void *v527;
  uint64_t v528;
  _BYTE v529[16];
  __int16 v530;
  void *v531;
  uint64_t v532;
  _DWORD v533[14];
  uint64_t *v534;
  uint64_t v535;
  _DWORD v536[14];
  uint64_t v537;

  v3 = (uint64_t)a1;
  v537 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, *(const llvm::Function **)a2) & 1) != 0)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 40);
  v527 = "agx.reduce.reg.pressure";
  v530 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v4, (uint64_t)&v527);
  if (NamedMetadata)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(***(_QWORD ***)(NamedMetadata + 48)
                               - 8 * *(unsigned int *)(***(_QWORD ***)(NamedMetadata + 48) + 8))
                   + 128);
    v7 = (_QWORD *)(v6 + 24);
    if (*(_DWORD *)(v6 + 32) >= 0x41u)
      v7 = (_QWORD *)*v7;
    if (*v7)
      return 0;
  }
  *(_WORD *)(v3 + 608) = 0;
  v9 = *(const llvm::TargetSubtargetInfo **)(a2 + 16);
  *(_QWORD *)(v3 + 248) = (*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(_QWORD *)v9 + 104))(v9);
  *(_QWORD *)(v3 + 256) = (*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(_QWORD *)v9 + 120))(v9);
  *(_QWORD *)(v3 + 264) = (*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(_QWORD *)v9 + 176))(v9);
  *(_QWORD *)(v3 + 272) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(v3 + 280) = *(_QWORD *)(a2 + 40);
  llvm::TargetSchedModel::init((llvm::TargetSchedModel *)(v3 + 288), v9);
  *(_BYTE *)(v3 + 568) = **(_BYTE **)(**(_QWORD **)(v3 + 280) + 360) & 1;
  llvm::Function::getEntryCount(*(uint64_t ****)a2, 0, (uint64_t)&v527);
  *(_BYTE *)(v3 + 569) = v529[0];
  if (*(_BYTE *)(v3 + 568))
  {
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 264) + 296))(*(_QWORD *)(v3 + 264));
    v11 = v10;
    v12 = (void **)(v3 + 880);
    v13 = v10;
    v14 = *(_DWORD *)(v3 + 888);
    if (v14 != v10)
    {
      if (v14 <= v10)
      {
        if (*(_DWORD *)(v3 + 892) < v10)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 880, v3 + 896, v10, 4);
          v14 = *(_DWORD *)(v3 + 888);
        }
        if (v14 != v11)
          bzero((char *)*v12 + 4 * v14, 4 * (v13 - v14));
      }
      *(_DWORD *)(v3 + 888) = v11;
    }
    if (v11)
      bzero(*v12, 4 * v13);
    v15 = *(_DWORD *)(v3 + 936);
    if (v15 != v11)
    {
      if (v15 <= v11)
      {
        if (*(_DWORD *)(v3 + 940) < v11)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 928, v3 + 944, v13, 4);
          v15 = *(_DWORD *)(v3 + 936);
        }
        if (v15 != v11)
          bzero((void *)(*(_QWORD *)(v3 + 928) + 4 * v15), 4 * (v13 - v15));
      }
      *(_DWORD *)(v3 + 936) = v11;
    }
    if (v11)
    {
      v16 = 0;
      do
      {
        *(_DWORD *)(*(_QWORD *)(v3 + 928) + 4 * v16) = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 264) + 312))(*(_QWORD *)(v3 + 264), a2, v16);
        ++v16;
      }
      while (v13 != v16);
    }
  }
  if (dword_1ED7FAE70)
  {
    v17 = **(void ****)(v3 + 8);
    do
    {
      v18 = *v17;
      v17 += 2;
    }
    while (v18 != &llvm::MachineBlockFrequencyInfo::ID);
    *(_QWORD *)(v3 + 584) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v17 - 1) + 96))(*(v17 - 1), &llvm::MachineBlockFrequencyInfo::ID);
  }
  v19 = **(void ****)(v3 + 8);
  do
  {
    v20 = *v19;
    v19 += 2;
  }
  while (v20 != &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(v3 + 592) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v19 - 1) + 96))(*(v19 - 1), &llvm::MachineLoopInfo::ID);
  v21 = **(void ****)(v3 + 8);
  do
  {
    v22 = *v21;
    v21 += 2;
  }
  while (v22 != &llvm::MachineDominatorTree::ID);
  *(_QWORD *)(v3 + 600) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v21 - 1) + 96))(*(v21 - 1), &llvm::MachineDominatorTree::ID);
  v23 = **(void ****)(v3 + 8);
  do
  {
    v24 = *v23;
    v23 += 2;
  }
  while (v24 != &llvm::AAResultsWrapperPass::ID);
  *(_QWORD *)(v3 + 576) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v23 - 1) + 96))(*(v23 - 1), &llvm::AAResultsWrapperPass::ID)+ 32);
  v25 = *(_QWORD *)(v3 + 592);
  v26 = *(char **)(v25 + 272);
  v27 = *(char **)(v25 + 280);
  v515 = v517;
  v516 = 0x800000000;
  sub_1C499C3FC((unsigned int *)&v515, v26, v27);
  v28 = v516;
  if (!(_DWORD)v516)
    goto LABEL_732;
  v485 = v3 + 864;
  v486 = v3 + 856;
  v488 = v3 + 880;
  v489 = v3 + 976;
  v505 = (unsigned int *)(v3 + 1760);
  v492 = v3 + 632;
  v499 = v3;
  do
  {
    v29 = (_QWORD *)*((_QWORD *)v515 + v28 - 1);
    LODWORD(v516) = v28 - 1;
    *(_QWORD *)(v3 + 616) = v29;
    *(_QWORD *)(v3 + 624) = 0;
    *(_DWORD *)(v3 + 640) = 0;
    if (*(_BYTE *)(v3 + 568))
    {
      if (!llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPredecessor((uint64_t)v29))
      {
LABEL_43:
        sub_1C499C3FC((unsigned int *)&v515, *(char **)(*(_QWORD *)(v3 + 616) + 8), *(char **)(*(_QWORD *)(v3 + 616) + 16));
        goto LABEL_346;
      }
      while (1)
      {
        v29 = (_QWORD *)*v29;
        if (!v29)
          break;
        if (llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPredecessor((uint64_t)v29))
          goto LABEL_43;
      }
      v29 = *(_QWORD **)(v3 + 616);
    }
    llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getExitBlocks(v29, v492);
    if (!*(_BYTE *)(v3 + 568))
    {
      v30 = sub_1C516DD4C(v3);
      if (!v30)
        goto LABEL_346;
      v500 = v30;
      v31 = *(_DWORD *)(*(_QWORD *)(v3 + 264) + 16);
      v534 = (uint64_t *)v536;
      v535 = 0x600000000;
      sub_1C4765AA4((char *)&v534, (v31 + 63) >> 6, 0);
      v536[12] = v31;
      v531 = v533;
      v532 = 0x600000000;
      v494 = (v31 + 63) >> 6;
      sub_1C4765AA4((char *)&v531, v494, 0);
      v496 = v31;
      v533[12] = v31;
      v527 = v529;
      v528 = 0x2000000000;
      v521 = v523;
      v522 = 0x2000000000;
      v525 = 0;
      v526 = 0;
      v524 = (uint64_t *)&v525;
      v32 = *(_QWORD *)(v3 + 616);
      v33 = *(_QWORD **)(v32 + 32);
      v501 = *(_QWORD **)(v32 + 40);
      if (v501 != v33)
      {
LABEL_48:
        v503 = v33;
        v34 = (_QWORD *)*v33;
        v35 = *(_QWORD *)(v3 + 592);
        v36 = *(_DWORD *)(v35 + 264);
        if (v36)
        {
          v37 = *(_QWORD *)(v35 + 248);
          v38 = v36 - 1;
          v39 = ((v34 >> 4) ^ (v34 >> 9)) & (v36 - 1);
          v40 = *(_QWORD **)(v37 + 16 * v39);
          if (v34 == v40)
          {
LABEL_53:
            v43 = *(_QWORD *)(v37 + 16 * v39 + 8);
            if (v43 && *(_BYTE *)(**(_QWORD **)(v43 + 32) + 184))
              goto LABEL_220;
          }
          else
          {
            v41 = 1;
            while (v40 != (_QWORD *)-4096)
            {
              v42 = v39 + v41++;
              v39 = v42 & v38;
              v40 = *(_QWORD **)(v37 + 16 * v39);
              if (v34 == v40)
                goto LABEL_53;
            }
          }
        }
        v44 = (unsigned __int16 *)v34[19];
        v45 = (unsigned __int16 *)v34[20];
        if (v45 != v44)
        {
          v46 = *(_QWORD *)(v3 + 264);
          if (v46)
            v47 = (uint64_t *)(v46 + 8);
          else
            v47 = 0;
          v48 = *v47;
          v51 = v47 + 5;
          v50 = v47[5];
          v49 = v51[1];
          v52 = v534;
          do
          {
            v53 = ((unint64_t)*(unsigned int *)(v48 + 24 * *v44 + 16) >> 3) & 0x1FFFFFFE;
            v54 = *(unsigned __int16 *)(v49 + v53) + (*(_DWORD *)(v48 + 24 * *v44 + 16) & 0xF) * *v44;
            v55 = (_WORD *)(v49 + 2 + v53);
            while (1)
            {
              v56 = (unsigned __int16)v54;
              v57 = *(unsigned __int16 *)(v50 + 4 * (unsigned __int16)v54);
              v58 = !*(_WORD *)(v50 + 4 * (unsigned __int16)v54) || v49 == 0;
              if (!v58)
                break;
              v59 = (unsigned __int16)*v55++;
              v54 += v59;
              if (!v59)
                goto LABEL_67;
            }
            while (1)
            {
              v60 = *(unsigned __int16 *)(v50 + 4 * v56 + 2) << 16;
              for (i = (unsigned __int16)v57; ; v57 = i)
              {
                v62 = (unsigned __int16 *)(v49 + 2 * *(unsigned int *)(v48 + 24 * i + 8));
                do
                {
                  v52[(unsigned __int16)v57 >> 6] |= 1 << v57;
                  v63 = *v62++;
                  v57 += v63;
                }
                while (v63);
                i = HIWORD(v60);
                if (!(_DWORD)i)
                  break;
                v60 >>= 16;
              }
              if (!*v55)
                break;
              v54 += (unsigned __int16)*v55++;
              v56 = (unsigned __int16)v54;
              v57 = *(unsigned __int16 *)(v50 + 4 * (unsigned __int16)v54);
            }
LABEL_67:
            v44 += 8;
          }
          while (v44 != v45);
        }
        *(_DWORD *)(v3 + 1784) = 2;
        v64 = v34[7];
        v508 = v34 + 6;
        if ((_QWORD *)v64 == v34 + 6)
          goto LABEL_220;
        while (1)
        {
          v65 = *(unsigned int *)(v64 + 40);
          if (!(_DWORD)v65)
            goto LABEL_215;
          v66 = 0;
          v67 = 0;
          v68 = 0;
          v69 = *(int ***)(v64 + 32);
          v70 = (int *)&v69[4 * v65];
          v71 = (unint64_t *)(v64 + 48);
          do
          {
            v72 = *(_DWORD *)v69;
            v73 = *(_DWORD *)v69;
            if (*(_DWORD *)v69)
            {
              if (v73 == 12)
              {
                sub_1C4963F5C((uint64_t)&v531, v69[2], 0xFFFFFFFF);
                goto LABEL_197;
              }
              if (v73 != 5)
                goto LABEL_197;
              v74 = *((_DWORD *)v69 + 4);
              LODWORD(v518) = v74;
              if (v526)
              {
                for (j = v525; j; j = (_QWORD *)*j)
                {
                  v76 = *((_DWORD *)j + 7);
                  if (v74 >= v76)
                  {
                    if (v76 >= v74)
                      goto LABEL_196;
                    ++j;
                  }
                }
                goto LABEL_155;
              }
              if ((_DWORD)v522)
              {
                v80 = v521;
                v81 = 4 * v522;
                while (*v80 != v74)
                {
                  ++v80;
                  v81 -= 4;
                  if (!v81)
                    goto LABEL_155;
                }
                if (v81)
                  goto LABEL_196;
              }
LABEL_155:
              if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 272) + 8)
                             + 40 * (*(_DWORD *)(*(_QWORD *)(v3 + 272) + 32) + v74)
                             + 18))
                goto LABEL_196;
              v141 = *(unsigned __int16 **)(v64 + 16);
              if (*v141 - 1 <= 1 && (*(_BYTE *)(*(_QWORD *)(v64 + 32) + 48) & 0x10) != 0)
              {
LABEL_160:
                v144 = *v71;
                if (*v71 < 8)
                  goto LABEL_167;
                if ((v144 & 7) != 0)
                {
                  v145 = (_DWORD *)(v144 & 0xFFFFFFFFFFFFFFF8);
                  v146 = (*v71 & 7) != 3 || v145 == 0;
                  if (v146 || !*v145)
                  {
LABEL_167:
                    if (v526)
                      goto LABEL_195;
LABEL_184:
                    v154 = v521;
                    v155 = v522;
                    if (!(_DWORD)v522)
                      goto LABEL_191;
                    v156 = 4 * v522;
                    v157 = v521;
                    while (*v157 != v74)
                    {
                      ++v157;
                      v156 -= 4;
                      if (!v156)
                        goto LABEL_190;
                    }
                    if (v156)
                      goto LABEL_196;
LABEL_190:
                    if (v522 < 0x20)
                    {
LABEL_191:
                      if (v522 >= HIDWORD(v522))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v521, (uint64_t)v523, v522 + 1, 4);
                        v154 = v521;
                        v155 = v522;
                      }
                      v154[v155] = v74;
                      LODWORD(v522) = v522 + 1;
                      goto LABEL_196;
                    }
                    do
                    {
                      sub_1C49915F0(&v524, (int *)v521 + v155 - 1, (_DWORD *)v521 + v155 - 1);
                      LODWORD(v155) = v522 - 1;
                      LODWORD(v522) = v522 - 1;
                    }
                    while ((_DWORD)v522);
LABEL_195:
                    sub_1C49915F0(&v524, (int *)&v518, &v518);
LABEL_196:
                    v67 = 1;
                    goto LABEL_197;
                  }
                }
                else
                {
                  v144 &= 0xFFFFFFFFFFFFFFF8;
                  *v71 = v144;
                  if (!v144)
                    goto LABEL_196;
                }
                if ((v144 & 7) == 0)
                {
                  *v71 = v144 & 0xFFFFFFFFFFFFFFF8;
                  v151 = (uint64_t **)(v64 + 56);
                  v148 = (uint64_t **)(v64 + 48);
                  goto LABEL_176;
                }
                if ((v144 & 7) != 3)
                  goto LABEL_196;
                v147 = (int *)(v144 & 0xFFFFFFFFFFFFFFF8);
                if ((v144 & 0xFFFFFFFFFFFFFFF8) == 0)
                  goto LABEL_196;
                v150 = *v147;
                v148 = (uint64_t **)(v147 + 2);
                v149 = v150;
                if (!(_DWORD)v150)
                  goto LABEL_196;
                v151 = &v148[v149];
LABEL_176:
                while (1)
                {
                  if (((*v148)[4] & 2) != 0)
                  {
                    v152 = **v148;
                    if ((v152 & 4) != 0)
                    {
                      v153 = v152 & 0xFFFFFFFFFFFFFFF8;
                      if (v153)
                      {
                        if (*(_DWORD *)(v153 + 8) == 4 && *(_DWORD *)(v153 + 16) == v74)
                          break;
                      }
                    }
                  }
                  if (++v148 == v151)
                    goto LABEL_196;
                }
                if (!v526)
                  goto LABEL_184;
                goto LABEL_195;
              }
              v142 = *(_WORD *)(v64 + 44);
              v143 = *((_QWORD *)v141 + 1);
              if ((v142 & 0xC) != 0 && (v142 & 4) == 0)
              {
                v158 = v64;
                if ((v143 & 0x100000) != 0)
                  goto LABEL_160;
                while ((*(_WORD *)(v158 + 44) & 8) != 0)
                {
                  v158 = *(_QWORD *)(v158 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(v158 + 16) + 10) & 0x10) != 0)
                    goto LABEL_160;
                }
              }
              else if ((v143 & 0x100000) != 0)
              {
                goto LABEL_160;
              }
              goto LABEL_196;
            }
            v77 = *((_DWORD *)v69 + 1);
            if (!v77)
              goto LABEL_197;
            if ((v72 & 0x1000000) != 0)
            {
              if ((v72 & 0x2000000) != 0)
              {
                v105 = *(_QWORD *)(v3 + 264);
                if (v105)
                  v106 = (uint64_t *)(v105 + 8);
                else
                  v106 = 0;
                v107 = *v106;
                v108 = *(_DWORD *)(*v106 + 24 * v77 + 16) & 0xF;
                v109 = ((unint64_t)*(unsigned int *)(*v106 + 24 * v77 + 16) >> 3) & 0x1FFFFFFE;
                v112 = v106 + 5;
                v111 = v106[5];
                v110 = v112[1];
                v113 = (unsigned __int16 *)(v110 + v109);
                v115 = *v113;
                v114 = v113 + 1;
                v116 = v115 + v108 * v77;
                while (1)
                {
                  v117 = 4 * (unsigned __int16)v116;
                  v118 = *(unsigned __int16 *)(v111 + v117);
                  if (*(_WORD *)(v111 + v117) && v110 != 0)
                    break;
                  v120 = (unsigned __int16)*v114++;
                  v116 += v120;
                  if (!v120)
                    goto LABEL_153;
                }
                v134 = *(unsigned __int16 *)(v111 + 4 * (unsigned __int16)v116 + 2) << 16;
                v135 = v531;
                v136 = v118;
                v137 = v116;
                while (1)
                {
                  while (1)
                  {
                    v138 = (unsigned __int16 *)(v110 + 2 * *(unsigned int *)(v107 + 24 * v118 + 8));
                    do
                    {
                      v135[(unsigned __int16)v136 >> 6] |= 1 << v136;
                      v139 = *v138++;
                      v136 += v139;
                    }
                    while (v139);
                    v118 = HIWORD(v134);
                    if (!(_DWORD)v118)
                      break;
                    v136 = HIWORD(v134);
                    v134 >>= 16;
                  }
                  if (!*v114)
                    break;
                  v137 += (unsigned __int16)*v114++;
                  v140 = (unsigned __int16 *)(v111 + 4 * (unsigned __int16)v137);
                  v118 = *v140;
                  v134 = v140[1] << 16;
                  v136 = v118;
                }
                v72 = *(_DWORD *)v69;
LABEL_153:
                v66 |= (~v72 & 0x5000000) != 0;
              }
              else
              {
                if (v68)
                  v82 = v68;
                else
                  v82 = *((_DWORD *)v69 + 1);
                v83 = *(_QWORD *)(v3 + 264);
                if (v83)
                  v84 = (uint64_t *)(v83 + 8);
                else
                  v84 = 0;
                v85 = *v84;
                v86 = *(_DWORD *)(*v84 + 24 * v77 + 16) & 0xF;
                v87 = ((unint64_t)*(unsigned int *)(*v84 + 24 * v77 + 16) >> 3) & 0x1FFFFFFE;
                v90 = v84 + 5;
                v89 = v84[5];
                v88 = v90[1];
                v91 = (unsigned __int16 *)(v88 + v87);
                v93 = *v91;
                v92 = v91 + 1;
                v94 = v93 + v86 * v77;
                v95 = v92;
                v96 = v94;
                while (1)
                {
                  v97 = 4 * (unsigned __int16)v96;
                  v98 = *(unsigned __int16 *)(v89 + v97);
                  if (*(_WORD *)(v89 + v97) && v88 != 0)
                    break;
                  v100 = (unsigned __int16)*v95++;
                  v96 += v100;
                  if (!v100)
                    goto LABEL_114;
                }
                v121 = *(unsigned __int16 *)(v89 + 4 * (unsigned __int16)v96 + 2) << 16;
                v122 = v534;
                v123 = v531;
                for (LOWORD(v124) = v98; ; LOWORD(v124) = v98)
                {
                  while (1)
                  {
                    v125 = (unsigned __int16 *)(v88 + 2 * *(unsigned int *)(v85 + 24 * v98 + 8));
                    do
                    {
                      if ((v122[(unsigned __int16)v124 >> 6] & (1 << v124)) != 0)
                        v123[(unsigned __int16)v124 >> 6] |= 1 << v124;
                      v126 = *v125++;
                      LOWORD(v124) = v126 + v124;
                    }
                    while (v126);
                    v98 = HIWORD(v121);
                    if (!(_DWORD)v98)
                      break;
                    v124 = HIWORD(v121);
                    v121 >>= 16;
                  }
                  if (!*v95)
                    break;
                  v96 += (unsigned __int16)*v95++;
                  v127 = (unsigned __int16 *)(v89 + 4 * (unsigned __int16)v96);
                  v98 = *v127;
                  v121 = v127[1] << 16;
                }
LABEL_114:
                while (1)
                {
                  v101 = 4 * (unsigned __int16)v94;
                  v102 = *(unsigned __int16 *)(v89 + v101);
                  if (*(_WORD *)(v89 + v101) && v88 != 0)
                    break;
                  v104 = (unsigned __int16)*v92++;
                  v94 += v104;
                  if (!v104)
                    goto LABEL_120;
                }
                v128 = *(unsigned __int16 *)(v89 + 4 * (unsigned __int16)v94 + 2) << 16;
                v129 = v534;
                for (k = v102; ; k = v102)
                {
                  while (1)
                  {
                    v131 = (unsigned __int16 *)(v88 + 2 * *(unsigned int *)(v85 + 24 * v102 + 8));
                    do
                    {
                      v129[(unsigned __int16)k >> 6] |= 1 << k;
                      v132 = *v131++;
                      k += v132;
                    }
                    while (v132);
                    v102 = HIWORD(v128);
                    if (!(_DWORD)v102)
                      break;
                    k = HIWORD(v128);
                    v128 >>= 16;
                  }
                  if (!*v92)
                    break;
                  v94 += (unsigned __int16)*v92++;
                  v133 = (unsigned __int16 *)(v89 + 4 * (unsigned __int16)v94);
                  v102 = *v133;
                  v128 = v133[1] << 16;
                }
LABEL_120:
                v66 |= (*((_QWORD *)v531 + (v77 >> 6)) >> v77) | (v68 != 0);
                v68 = v82;
              }
            }
            else
            {
              v78 = 1 << v77;
              v79 = v77 >> 6;
              if ((v534[v79] & v78) != 0 || (*((_QWORD *)v531 + v79) & v78) != 0)
                goto LABEL_196;
            }
LABEL_197:
            v69 += 4;
          }
          while (v69 != (int **)v70);
          if (!((v68 == 0) | v66 & 1))
          {
            LODWORD(v518) = 0x80000000;
            if ((v67 & 1) == 0 && sub_1C516DDC8(v3, (llvm::MachineInstr *)v64))
            {
              v159 = v518;
              goto LABEL_211;
            }
            if ((*(unsigned int (**)(_QWORD, uint64_t, void **))(**(_QWORD **)(v3 + 248) + 64))(*(_QWORD *)(v3 + 248), v64, &v518))
            {
              v159 = v518;
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 272) + 8)
                            + 40 * (*(_DWORD *)(*(_QWORD *)(v3 + 272) + 32) + (_DWORD)v518)
                            + 18))
              {
LABEL_211:
                v160 = v528;
                if (v528 >= (unint64_t)HIDWORD(v528))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v527, (uint64_t)v529, v528 + 1, 16);
                  v160 = v528;
                }
                v161 = (char *)v527 + 16 * v160;
                *v161 = v64;
                v161[1] = v68 | (unint64_t)(v159 << 32);
                LODWORD(v528) = v528 + 1;
              }
            }
          }
          if (v64)
          {
LABEL_215:
            if ((*(_BYTE *)v64 & 4) != 0)
              goto LABEL_219;
          }
          while ((*(_WORD *)(v64 + 44) & 8) != 0)
            v64 = *(_QWORD *)(v64 + 8);
LABEL_219:
          v64 = *(_QWORD *)(v64 + 8);
          if ((_QWORD *)v64 == v508)
          {
LABEL_220:
            v33 = v503 + 1;
            if (v503 + 1 == v501)
              break;
            goto LABEL_48;
          }
        }
      }
      v518 = v520;
      v519 = 0x600000000;
      sub_1C4765AA4((char *)&v518, v494, 0);
      v520[12] = v496;
      FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v500);
      if ((llvm::MachineBasicBlock *)((char *)v500 + 48) != (llvm::MachineBasicBlock *)FirstTerminator)
      {
        v163 = *(unsigned int *)(FirstTerminator + 40);
        if ((_DWORD)v163)
        {
          v164 = *(_QWORD *)(FirstTerminator + 32);
          v165 = v164 + 32 * v163;
          v166 = v518;
          do
          {
            if (!*(_BYTE *)v164)
            {
              v167 = *(_DWORD *)(v164 + 4);
              if (v167)
              {
                v168 = *(_QWORD *)(v3 + 264);
                if (v168)
                  v169 = (uint64_t *)(v168 + 8);
                else
                  v169 = 0;
                v170 = *v169;
                v171 = *(_DWORD *)(*v169 + 24 * v167 + 16) & 0xF;
                v172 = ((unint64_t)*(unsigned int *)(*v169 + 24 * v167 + 16) >> 3) & 0x1FFFFFFE;
                v175 = v169 + 5;
                v174 = v169[5];
                v173 = v175[1];
                v176 = (unsigned __int16 *)(v173 + v172);
                v178 = *v176;
                v177 = v176 + 1;
                v179 = v178 + v171 * v167;
                while (1)
                {
                  v180 = (unsigned __int16)v179;
                  v181 = *(unsigned __int16 *)(v174 + 4 * (unsigned __int16)v179);
                  if (*(_WORD *)(v174 + 4 * (unsigned __int16)v179) && v173 != 0)
                    break;
                  v183 = (unsigned __int16)*v177++;
                  v179 += v183;
                  if (!v183)
                    goto LABEL_225;
                }
                while (1)
                {
                  v184 = *(unsigned __int16 *)(v174 + 4 * v180 + 2) << 16;
                  for (m = (unsigned __int16)v181; ; v181 = m)
                  {
                    v186 = (unsigned __int16 *)(v173 + 2 * *(unsigned int *)(v170 + 24 * m + 8));
                    do
                    {
                      v166[(unsigned __int16)v181 >> 6] |= 1 << v181;
                      v187 = *v186++;
                      v181 += v187;
                    }
                    while (v187);
                    m = HIWORD(v184);
                    if (!(_DWORD)m)
                      break;
                    v184 >>= 16;
                  }
                  if (!*v177)
                    break;
                  v179 += (unsigned __int16)*v177++;
                  v180 = (unsigned __int16)v179;
                  v181 = *(unsigned __int16 *)(v174 + 4 * (unsigned __int16)v179);
                }
              }
            }
LABEL_225:
            v164 += 32;
          }
          while (v164 != v165);
        }
      }
      if (!(_DWORD)v528)
      {
LABEL_336:
        if (v518 != v520)
          free(v518);
        sub_1C61247C0((uint64_t)&v524, v525);
        if (v521 != v523)
          free(v521);
        if (v527 != v529)
          free(v527);
        if (v531 != v533)
          free(v531);
        if (v534 != (uint64_t *)v536)
          free(v534);
        goto LABEL_346;
      }
      v188 = (unsigned int *)v527;
      v189 = (llvm::MachineBasicBlock *)((char *)v527 + 16 * v528);
      v506 = v189;
      while (1)
      {
        v190 = v188[3];
        if (v190 != 0x80000000)
        {
          if (v526)
          {
            for (n = v525; n; n = (_QWORD *)*n)
            {
              v192 = *((_DWORD *)n + 7);
              if (v190 >= v192)
              {
                if (v192 >= v190)
                  goto LABEL_332;
                ++n;
              }
            }
          }
          else if ((_DWORD)v522)
          {
            v193 = v521;
            v194 = 4 * v522;
            while (*v193 != v190)
            {
              ++v193;
              v194 -= 4;
              if (!v194)
                goto LABEL_262;
            }
            if (v194)
              goto LABEL_332;
          }
        }
LABEL_262:
        v195 = v188[2];
        if (((1 << v195) & *((_QWORD *)v531 + (v195 >> 6))) == 0
          && (*((_QWORD *)v518 + (v195 >> 6)) & (1 << v195)) == 0)
        {
          v196 = *(unint64_t **)v188;
          v197 = *(unsigned int *)(*(_QWORD *)v188 + 40);
          if ((_DWORD)v197)
          {
            v198 = 32 * v197;
            v199 = (unsigned int *)(v196[4] + 4);
            while (1)
            {
              if ((*(v199 - 1) & 0x10000FF) == 0)
              {
                v200 = *v199;
                if (*v199)
                {
                  v201 = 1 << v200;
                  v202 = v200 >> 6;
                  if ((v534[v202] & v201) != 0 || (*((_QWORD *)v531 + v202) & v201) != 0)
                    break;
                }
              }
              v199 += 8;
              v198 -= 32;
              if (!v198)
                goto LABEL_271;
            }
          }
          else
          {
LABEL_271:
            v509 = v188;
            v203 = sub_1C516DD4C(v3);
            v204 = (unint64_t *)v196[3];
            v205 = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(v203);
            sub_1C48532D0((unint64_t *)v203, v205, v204, v196);
            v511[0] = 0;
            v206 = (unsigned __int8 **)(v196 + 7);
            if (v511 != v206)
            {
              if (*v206)
              {
                llvm::MetadataTracking::untrack((uint64_t)v206, *v206);
                v240 = (unsigned __int8 *)v511[0];
                *v206 = (unsigned __int8 *)v511[0];
                if (v240)
                {
                  llvm::MetadataTracking::retrack((uint64_t)v511, v240, (uint64_t)v206);
                  v511[0] = 0;
                }
              }
              else
              {
                *v206 = 0;
              }
            }
            v207 = *(_QWORD *)(v3 + 616);
            v208 = *(_QWORD *)(v207 + 32);
            for (ii = *(_QWORD *)(v207 + 40); v208 != ii; v208 += 8)
            {
              v210 = *(_QWORD **)v208;
              v211 = *(unsigned __int16 **)(*(_QWORD *)v208 + 152);
              v212 = *(unsigned __int16 **)(*(_QWORD *)v208 + 160);
              if (v211 == v212)
                goto LABEL_279;
              v213 = *(unsigned __int16 **)(*(_QWORD *)v208 + 152);
              while (*v213 != (unsigned __int16)v195)
              {
                v213 += 8;
                if (v213 == v212)
                  goto LABEL_279;
              }
              if (!*((_QWORD *)v213 + 1))
              {
LABEL_279:
                v214 = v210[21];
                if ((unint64_t)v212 >= v214)
                {
                  v216 = ii;
                  v217 = ((char *)v212 - (char *)v211) >> 4;
                  v218 = v217 + 1;
                  if ((unint64_t)(v217 + 1) >> 60)
                    goto LABEL_735;
                  v219 = v214 - (_QWORD)v211;
                  if (v219 >> 3 > v218)
                    v218 = v219 >> 3;
                  if ((unint64_t)v219 >= 0x7FFFFFFFFFFFFFF0)
                    v220 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v220 = v218;
                  if (v220)
                  {
                    if (v220 >> 60)
                      goto LABEL_736;
                    v221 = (char *)operator new(16 * v220);
                  }
                  else
                  {
                    v221 = 0;
                  }
                  v222 = &v221[16 * v217];
                  *(_WORD *)v222 = v195;
                  *((_QWORD *)v222 + 1) = -1;
                  v223 = v222;
                  ii = v216;
                  if (v211 != v212)
                  {
                    do
                    {
                      *((_OWORD *)v223 - 1) = *((_OWORD *)v212 - 1);
                      v223 -= 16;
                      v212 -= 8;
                    }
                    while (v212 != v211);
                    v211 = (unsigned __int16 *)v210[19];
                  }
                  v3 = v499;
                  v224 = &v221[16 * v220];
                  v215 = v222 + 16;
                  v210[19] = v223;
                  v210[20] = v222 + 16;
                  v210[21] = v224;
                  if (v211)
                    operator delete(v211);
                }
                else
                {
                  *v212 = v195;
                  *((_QWORD *)v212 + 1) = -1;
                  v215 = (char *)(v212 + 8);
                }
                v210[20] = v215;
              }
              for (jj = v210[7]; (_QWORD *)jj != v210 + 6; jj = *(_QWORD *)(jj + 8))
              {
                v226 = *(unsigned int *)(jj + 40);
                if ((_DWORD)v226)
                {
                  v227 = *(unsigned int **)(jj + 32);
                  v228 = &v227[8 * v226];
                  do
                  {
                    v229 = *v227;
                    if (!*v227 && (v229 & 0x1000000) == 0)
                    {
                      v230 = v227[1];
                      if (v230)
                      {
                        if (v230 == (_DWORD)v195)
                          goto LABEL_320;
                        v231 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 264) + 56)
                                       + 2
                                       * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v3 + 264) + 8)
                                                         + 24 * v195
                                                         + 8));
                        v232 = (unsigned __int16)*v231;
                        v233 = v232 + v195;
                        v58 = v232 == 0;
                        v234 = *v231 == 0;
                        if (!v58 && v230 != v233)
                        {
                          v236 = v231 + 1;
                          do
                          {
                            v238 = *v236++;
                            v237 = v238;
                            v233 += v238;
                            v234 = v238 == 0;
                            if (!v238)
                              v236 = 0;
                            if (v237)
                              v239 = v230 == v233;
                            else
                              v239 = 1;
                          }
                          while (!v239);
                        }
                        if (!v234)
LABEL_320:
                          *v227 = v229 & 0xFBFFFFFF;
                      }
                    }
                    v227 += 8;
                  }
                  while (v227 != v228);
                  if (!jj)
                    goto LABEL_325;
                }
                if ((*(_BYTE *)jj & 4) == 0)
                {
LABEL_325:
                  while ((*(_WORD *)(jj + 44) & 8) != 0)
                    jj = *(_QWORD *)(jj + 8);
                }
              }
            }
            *(_BYTE *)(v3 + 608) = 1;
            v189 = v506;
            v188 = v509;
          }
        }
LABEL_332:
        v188 += 4;
        if (v188 == (unsigned int *)v189)
          goto LABEL_336;
      }
    }
    v241 = sub_1C49FA70C(*(_QWORD *)(v3 + 600), **(_QWORD **)(*(_QWORD *)(v3 + 616) + 32));
    *(_BYTE *)(v3 + 609) = 1;
    v507 = sub_1C516DD4C(v3);
    if (!v507)
      goto LABEL_402;
    v527 = v529;
    v528 = 0x2000000000;
    v521 = v523;
    HIDWORD(v522) = 8;
    v518 = 0;
    v519 = 0;
    v520[0] = 0;
    v511[0] = 0;
    v511[1] = 0;
    v512 = 0;
    v242 = 1;
    v523[0] = v241;
    do
    {
      v534 = 0;
      v243 = (uint64_t *)*((_QWORD *)v521 + v242 - 1);
      LODWORD(v522) = v242 - 1;
      v534 = v243;
      v244 = *v243;
      v245 = *(_QWORD *)(v3 + 592);
      v246 = *(_DWORD *)(v245 + 264);
      if (v246)
      {
        v247 = *(_QWORD *)(v245 + 248);
        v248 = v246 - 1;
        v249 = ((v244 >> 4) ^ (v244 >> 9)) & (v246 - 1);
        v250 = *(_QWORD *)(v247 + 16 * v249);
        if (v244 == v250)
        {
LABEL_355:
          v253 = *(_QWORD *)(v247 + 16 * v249 + 8);
          if (v253 && *(_BYTE *)(**(_QWORD **)(v253 + 32) + 184))
            goto LABEL_387;
        }
        else
        {
          v251 = 1;
          while (v250 != -4096)
          {
            v252 = v249 + v251++;
            v249 = v252 & v248;
            v250 = *(_QWORD *)(v247 + 16 * v249);
            if (v244 == v250)
              goto LABEL_355;
          }
        }
      }
      v254 = *(_QWORD *)(v3 + 616);
      v255 = sub_1C477672C(v254 + 56, v244);
      v256 = *(_QWORD *)(v254 + 64);
      v257 = 72;
      if (v256 == *(_QWORD *)(v254 + 56))
        v257 = 76;
      if (v255 == (_QWORD *)(v256 + 8 * *(unsigned int *)(v254 + v257)))
      {
LABEL_387:
        v242 = v522;
        continue;
      }
      v258 = v534;
      v259 = v528;
      if (v528 >= (unint64_t)HIDWORD(v528))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v527, (uint64_t)v529, v528 + 1, 8);
        v259 = v528;
      }
      *((_QWORD *)v527 + v259) = v258;
      LODWORD(v528) = v528 + 1;
      if (((*(_QWORD *)(v244 + 96) - *(_QWORD *)(v244 + 88)) >> 3) <= 0x18)
        v260 = *((_DWORD *)v534 + 8);
      else
        v260 = 0;
      if (!v512)
      {
        v268 = 0;
LABEL_379:
        v262 = sub_1C50E44BC((uint64_t)v511, (uint64_t)&v534, (uint64_t *)&v534, v268);
        *v262 = v534;
        *((_DWORD *)v262 + 2) = 0;
        goto LABEL_380;
      }
      v261 = (v512 - 1) & ((v534 >> 4) ^ (v534 >> 9));
      v262 = (_QWORD *)(v511[0] + 16 * v261);
      v263 = *v262;
      if (v534 != (uint64_t *)*v262)
      {
        v264 = 0;
        v265 = 1;
        while (v263 != -4096)
        {
          if (v264)
            v266 = 0;
          else
            v266 = v263 == -8192;
          if (v266)
            v264 = v262;
          v267 = v261 + v265++;
          v261 = v267 & (v512 - 1);
          v262 = (_QWORD *)(v511[0] + 16 * v261);
          v263 = *v262;
          if (v534 == (uint64_t *)*v262)
            goto LABEL_380;
        }
        if (v264)
          v268 = v264;
        else
          v268 = v262;
        goto LABEL_379;
      }
LABEL_380:
      *((_DWORD *)v262 + 2) = v260;
      if (!v260)
        goto LABEL_387;
      v269 = *((unsigned int *)v534 + 8);
      if (!(_DWORD)v269)
        goto LABEL_387;
      v270 = 8 * v269;
      v271 = v534[3] - 8;
      do
      {
        v272 = *(void **)(v271 + v270);
        v531 = v272;
        v273 = v534;
        sub_1C6180A54((uint64_t)&v518, (uint64_t *)&v531)[1] = v273;
        v274 = v522;
        if (v522 >= (unint64_t)HIDWORD(v522))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v521, (uint64_t)v523, v522 + 1, 8);
          v274 = v522;
        }
        *((_QWORD *)v521 + v274) = v272;
        v242 = v522 + 1;
        LODWORD(v522) = v522 + 1;
        v270 -= 8;
      }
      while (v270);
    }
    while (v242);
    if ((_DWORD)v528)
    {
      *(_DWORD *)(v3 + 720) = 0;
      sub_1C47655E8(v486, *(_QWORD **)(v3 + 864));
      *(_QWORD *)(v3 + 856) = v485;
      *(_OWORD *)(v3 + 864) = 0u;
      v275 = *(unsigned int *)(v3 + 984);
      if ((_DWORD)v275)
      {
        v276 = *(_QWORD *)(v3 + 976);
        v277 = 48 * v275;
        do
        {
          v278 = *(void **)(v276 + v277 - 48);
          if ((void *)(v276 + v277 - 32) != v278)
            free(v278);
          v277 -= 48;
        }
        while (v277);
      }
      *(_DWORD *)(v3 + 984) = 0;
      sub_1C516E234(v3, (uint64_t)v507);
      if ((_DWORD)v528)
      {
        v279 = (uint64_t **)v527;
        v487 = (char *)v527 + 8 * v528;
        v510 = (char *)v507 + 48;
        v280 = (v507 >> 4) ^ (v507 >> 9);
        do
        {
          v490 = *v279;
          v491 = v279;
          v281 = **v279;
          sub_1C61F2048(v489, v488);
          *(_DWORD *)(v3 + 1784) = 2;
          v282 = v281 + 48;
          v283 = *(_QWORD *)(v281 + 56);
          v502 = v282;
          if (v283 == v282)
            goto LABEL_405;
          do
          {
            if (!v283 || (v291 = v283, (*(_BYTE *)v283 & 4) == 0))
            {
              v291 = v283;
              if ((*(_WORD *)(v283 + 44) & 8) != 0)
              {
                v291 = v283;
                do
                  v291 = *(_QWORD *)(v291 + 8);
                while ((*(_WORD *)(v291 + 44) & 8) != 0);
              }
            }
            v292 = *(_QWORD *)(v291 + 8);
            v293 = *(_QWORD *)(v283 + 24);
            if (dword_1ED7FAE70 == 2 || dword_1ED7FAE70 == 1 && *(_BYTE *)(v3 + 569))
            {
              v294 = *(_QWORD *)(*(_QWORD *)(v3 + 584) + 248);
              if (!v294)
                goto LABEL_580;
              v295 = *(_DWORD *)(v294 + 176);
              if (!v295)
                goto LABEL_580;
              v296 = *(_QWORD *)(v294 + 160);
              v297 = v295 - 1;
              v298 = v297 & ((v293 >> 4) ^ (v293 >> 9));
              v299 = *(_QWORD *)(v296 + 16 * v298);
              if (v299 == v293)
              {
LABEL_427:
                v300 = *(unsigned int *)(v296 + 16 * v298 + 8);
                if (v300 != 0xFFFFFFFFLL)
                {
                  v301 = *(_QWORD *)(*(_QWORD *)(v294 + 8) + 24 * v300 + 16);
                  goto LABEL_429;
                }
              }
              else
              {
                v328 = 1;
                while (v299 != -4096)
                {
                  v329 = v298 + v328++;
                  v298 = v329 & v297;
                  v299 = *(_QWORD *)(v296 + 16 * v298);
                  if (v299 == v293)
                    goto LABEL_427;
                }
              }
              v301 = 0;
LABEL_429:
              v302 = v297 & v280;
              v303 = *(llvm::MachineBasicBlock **)(v296 + 16 * v302);
              if (v303 == v507)
              {
LABEL_430:
                v304 = *(unsigned int *)(v296 + 16 * v302 + 8);
                if (v304 != 0xFFFFFFFFLL)
                {
                  v305 = *(_QWORD *)(*(_QWORD *)(v294 + 8) + 24 * v304 + 16);
                  if (!v301)
                    goto LABEL_580;
LABEL_432:
                  *(double *)&v306 = (double)v301;
                  LODWORD(v306) = dword_1ED7FADB0;
                  if ((double)v305 / (double)v301 > (double)v306)
                    goto LABEL_580;
                  goto LABEL_433;
                }
              }
              else
              {
                v330 = 1;
                while (v303 != (llvm::MachineBasicBlock *)-4096)
                {
                  v331 = v302 + v330++;
                  v302 = v331 & v297;
                  v303 = *(llvm::MachineBasicBlock **)(v296 + 16 * v302);
                  if (v303 == v507)
                    goto LABEL_430;
                }
              }
              v305 = 0;
              if (!v301)
                goto LABEL_580;
              goto LABEL_432;
            }
LABEL_433:
            if (!sub_1C516DDC8(v3, (llvm::MachineInstr *)v283)
              || !llvm::MachineLoop::isLoopInvariant(*(llvm::MachineLoop **)(v3 + 616), (llvm::MachineInstr *)v283)|| (sub_1C516E4A8(v3, v283) & 1) == 0)
            {
              if ((*(_BYTE *)(*(_QWORD *)(v283 + 16) + 10) & 4) == 0)
              {
                if (llvm::MachineInstr::isDereferenceableInvariantLoad((llvm::MachineInstr *)v283, *(llvm::AAResults **)(v3 + 576)))
                {
                  LODWORD(v531) = 0;
                  v308 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, void **))(**(_QWORD **)(v3 + 248)
                                                                                             + 656))(*(_QWORD *)(v3 + 248), **(unsigned __int16 **)(v283 + 16), 1, 0, &v531);
                  if (v308)
                  {
                    v309 = *(_QWORD *)(*(_QWORD *)(v283 + 24) + 32);
                    v310 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v3 + 248)
                                                                                               + 16))(*(_QWORD *)(v3 + 248), *(_QWORD *)(*(_QWORD *)(v3 + 248) + 8) + 48 * v308, v531, *(_QWORD *)(v3 + 264), v309);
                    v311 = *(_QWORD *)(v3 + 280);
                    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v311, "", 0);
                    *(_QWORD *)(*(_QWORD *)(v311 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v310 & 0xFFFFFFFFFFFFFFFBLL;
                    v313 = *(_QWORD *)(v311 + 8);
                    if (v313)
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v313 + 24))(v313, IncompleteVirtualRegister);
                    v534 = (uint64_t *)v536;
                    v535 = 0x200000000;
                    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t **))(**(_QWORD **)(v3 + 248) + 640))(*(_QWORD *)(v3 + 248), v309, v283, IncompleteVirtualRegister, 1, 0, &v534);
                    v314 = *(_QWORD *)(v283 + 24);
                    v315 = *v534;
                    v316 = *(_QWORD *)(v314 + 40);
                    *(_QWORD *)(v315 + 24) = v316;
                    v317 = *(_QWORD *)(v316 + 32);
                    v318 = *(unsigned int *)(v315 + 40);
                    if ((_DWORD)v318)
                    {
                      v440 = *(_QWORD *)(v315 + 32);
                      v441 = *(_QWORD *)(v317 + 40);
                      v442 = 32 * v318;
                      do
                      {
                        if (!*(_BYTE *)v440)
                        {
                          v443 = *(unsigned int *)(v440 + 4);
                          if ((int)v443 >= 0)
                            v444 = (uint64_t *)(*(_QWORD *)(v441 + 272) + 8 * v443);
                          else
                            v444 = (uint64_t *)(*(_QWORD *)(v441 + 24) + 16 * (v443 & 0x7FFFFFFF) + 8);
                          v445 = *v444;
                          if (*v444)
                          {
                            v446 = *(_QWORD *)(v445 + 16);
                            *(_QWORD *)(v445 + 16) = v440;
                            *(_QWORD *)(v440 + 16) = v446;
                            if ((*(_BYTE *)(v440 + 3) & 1) != 0)
                            {
                              *(_QWORD *)(v440 + 24) = v445;
                            }
                            else
                            {
                              *(_QWORD *)(v440 + 24) = 0;
                              v444 = (uint64_t *)(v446 + 24);
                            }
                          }
                          else
                          {
                            *(_QWORD *)(v440 + 16) = v440;
                            *(_QWORD *)(v440 + 24) = 0;
                          }
                          *v444 = v440;
                        }
                        v440 += 32;
                        v442 -= 32;
                      }
                      while (v442);
                    }
                    v319 = *(_QWORD *)(v317 + 728);
                    if (v319)
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v319 + 24))(v319, v315);
                    v320 = *(_QWORD *)v283 & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v315 = v320 | *(_QWORD *)v315 & 7;
                    *(_QWORD *)(v315 + 8) = v283;
                    *(_QWORD *)(v320 + 8) = v315;
                    *(_QWORD *)v283 = *(_QWORD *)v283 & 7 | v315;
                    v321 = v534[1];
                    v322 = *(_QWORD *)(v314 + 40);
                    *(_QWORD *)(v321 + 24) = v322;
                    v323 = *(_QWORD *)(v322 + 32);
                    v324 = *(unsigned int *)(v321 + 40);
                    if ((_DWORD)v324)
                    {
                      v447 = *(_QWORD *)(v321 + 32);
                      v448 = *(_QWORD *)(v323 + 40);
                      v449 = 32 * v324;
                      do
                      {
                        if (!*(_BYTE *)v447)
                        {
                          v450 = *(unsigned int *)(v447 + 4);
                          if ((int)v450 >= 0)
                            v451 = (uint64_t *)(*(_QWORD *)(v448 + 272) + 8 * v450);
                          else
                            v451 = (uint64_t *)(*(_QWORD *)(v448 + 24) + 16 * (v450 & 0x7FFFFFFF) + 8);
                          v452 = *v451;
                          if (*v451)
                          {
                            v453 = *(_QWORD *)(v452 + 16);
                            *(_QWORD *)(v452 + 16) = v447;
                            *(_QWORD *)(v447 + 16) = v453;
                            if ((*(_BYTE *)(v447 + 3) & 1) != 0)
                            {
                              *(_QWORD *)(v447 + 24) = v452;
                            }
                            else
                            {
                              *(_QWORD *)(v447 + 24) = 0;
                              v451 = (uint64_t *)(v453 + 24);
                            }
                          }
                          else
                          {
                            *(_QWORD *)(v447 + 16) = v447;
                            *(_QWORD *)(v447 + 24) = 0;
                          }
                          *v451 = v447;
                        }
                        v447 += 32;
                        v449 -= 32;
                      }
                      while (v449);
                    }
                    v325 = *(_QWORD *)(v323 + 728);
                    if (v325)
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v325 + 24))(v325, v321);
                    v326 = *(_QWORD *)v283 & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v321 = v326 | *(_QWORD *)v321 & 7;
                    *(_QWORD *)(v321 + 8) = v283;
                    *(_QWORD *)(v326 + 8) = v321;
                    *(_QWORD *)v283 = *(_QWORD *)v283 & 7 | v321;
                    v327 = (llvm::MachineInstr *)*v534;
                    if (sub_1C516DDC8(v3, (llvm::MachineInstr *)*v534)
                      && llvm::MachineLoop::isLoopInvariant(*(llvm::MachineLoop **)(v3 + 616), v327)
                      && (sub_1C516E4A8(v3, *v534) & 1) != 0)
                    {
                      sub_1C516E368(v3, v534[1], 0);
                    }
                    v332 = *v534;
                    v333 = *v534;
                    if ((*(_BYTE *)*v534 & 4) == 0)
                    {
                      v333 = *v534;
                      if ((*(_WORD *)(v332 + 44) & 8) != 0)
                      {
                        v333 = *v534;
                        do
                          v333 = *(_QWORD *)(v333 + 8);
                        while ((*(_WORD *)(v333 + 44) & 8) != 0);
                      }
                    }
                    sub_1C487FE80(*(_QWORD *)(v332 + 24) + 40, v332, *(_QWORD *)(v333 + 8));
                    v334 = v534[1];
                    v335 = v334;
                    if ((*(_BYTE *)v334 & 4) == 0)
                    {
                      v335 = v534[1];
                      if ((*(_WORD *)(v334 + 44) & 8) != 0)
                      {
                        v335 = v534[1];
                        do
                          v335 = *(_QWORD *)(v335 + 8);
                        while ((*(_WORD *)(v335 + 44) & 8) != 0);
                      }
                    }
                    sub_1C487FE80(*(_QWORD *)(v334 + 24) + 40, v334, *(_QWORD *)(v335 + 8));
                    if (v534 != (uint64_t *)v536)
                      free(v534);
                  }
                }
              }
LABEL_580:
              sub_1C516E368(v3, v283, 0);
            }
            v307 = v283;
            v336 = **(unsigned __int16 **)(v283 + 16);
            v504 = v292;
            if (!*(_BYTE *)(v3 + 609))
              goto LABEL_510;
            v337 = *((_QWORD *)v507 + 7);
            if ((char *)v337 == v510)
              goto LABEL_509;
            do
            {
              v338 = **(unsigned __int16 **)(v337 + 16);
              LODWORD(v534) = v338;
              v339 = *(_DWORD *)(v3 + 1776);
              if (v339)
              {
                v340 = *(_QWORD *)(v3 + 1760);
                v341 = v339 - 1;
                v342 = v341 & (37 * v338);
                v343 = (_DWORD *)(v340 + 32 * v342);
                v344 = *v343;
                if (*v343 == v338)
                  goto LABEL_482;
                v345 = 0;
                v346 = 1;
                while (v344 != -1)
                {
                  if (v345)
                    v347 = 0;
                  else
                    v347 = v344 == -2;
                  if (v347)
                    v345 = v343;
                  v348 = v342 + v346++;
                  v342 = v348 & v341;
                  v343 = (_DWORD *)(v340 + 32 * v342);
                  v344 = *v343;
                  if (*v343 == v338)
                    goto LABEL_482;
                }
                if (v345)
                  v349 = v345;
                else
                  v349 = v343;
              }
              else
              {
                v349 = 0;
              }
              v343 = sub_1C516EFD8((uint64_t)v505, &v534, v349);
              *v343 = v338;
              *((_QWORD *)v343 + 2) = 0;
              *((_QWORD *)v343 + 3) = 0;
              *((_QWORD *)v343 + 1) = 0;
LABEL_482:
              v351 = (_QWORD *)*((_QWORD *)v343 + 2);
              v350 = *((_QWORD *)v343 + 3);
              if ((unint64_t)v351 < v350)
              {
                *v351 = v337;
                *((_QWORD *)v343 + 2) = v351 + 1;
LABEL_500:
                if ((*(_BYTE *)v337 & 4) != 0)
                  goto LABEL_504;
                goto LABEL_503;
              }
              v352 = (_QWORD *)*((_QWORD *)v343 + 1);
              v353 = v351 - v352;
              v354 = v353 + 1;
              if ((unint64_t)(v353 + 1) >> 61)
                goto LABEL_735;
              v355 = v350 - (_QWORD)v352;
              if (v355 >> 2 > v354)
                v354 = v355 >> 2;
              if ((unint64_t)v355 >= 0x7FFFFFFFFFFFFFF8)
                v356 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v356 = v354;
              if (v356)
              {
                if (v356 >> 61)
                  goto LABEL_736;
                v357 = (char *)operator new(8 * v356);
              }
              else
              {
                v357 = 0;
              }
              v358 = &v357[8 * v353];
              *(_QWORD *)v358 = v337;
              v359 = v358 + 8;
              if (v351 != v352)
              {
                do
                {
                  v360 = *--v351;
                  *((_QWORD *)v358 - 1) = v360;
                  v358 -= 8;
                }
                while (v351 != v352);
                v351 = (_QWORD *)*((_QWORD *)v343 + 1);
              }
              *((_QWORD *)v343 + 1) = v358;
              *((_QWORD *)v343 + 2) = v359;
              *((_QWORD *)v343 + 3) = &v357[8 * v356];
              if (v351)
                operator delete(v351);
              *((_QWORD *)v343 + 2) = v359;
              if (v337)
                goto LABEL_500;
LABEL_503:
              while ((*(_WORD *)(v337 + 44) & 8) != 0)
                v337 = *(_QWORD *)(v337 + 8);
LABEL_504:
              v337 = *(_QWORD *)(v337 + 8);
            }
            while ((char *)v337 != v510);
            v336 = **(unsigned __int16 **)(v307 + 16);
LABEL_509:
            *(_BYTE *)(v3 + 609) = 0;
LABEL_510:
            v514 = v336;
            v361 = *(_QWORD *)(v3 + 1760);
            v362 = *(unsigned int *)(v3 + 1776);
            v363 = sub_1C4E341F8(v361, *(_DWORD *)(v3 + 1776), v336);
            v364 = v363;
            if ((int *)(v361 + 32 * v362) == v363 || v336 == 10)
              goto LABEL_515;
            v403 = (_QWORD *)*((_QWORD *)v363 + 1);
            v404 = (_QWORD *)*((_QWORD *)v363 + 2);
            while (1)
            {
              if (v403 == v404)
                goto LABEL_515;
              v405 = *(_BYTE *)(v3 + 568) ? *(_QWORD *)(v3 + 280) : 0;
              v406 = *v403;
              if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(v3 + 248) + 216))(*(_QWORD *)(v3 + 248), v307, *v403, v405))
              {
                break;
              }
              ++v403;
            }
            if (!v406)
              goto LABEL_515;
            v531 = v533;
            v532 = 0x200000000;
            v415 = *(unsigned int *)(v307 + 40);
            v493 = v364;
            if (!(_DWORD)v415)
            {
              v534 = (uint64_t *)v536;
              v535 = 0x200000000;
LABEL_628:
              v437 = v307;
              if ((*(_BYTE *)v307 & 4) == 0)
              {
                v437 = v307;
                if ((*(_WORD *)(v307 + 44) & 8) != 0)
                {
                  v437 = v307;
                  do
                    v437 = *(_QWORD *)(v437 + 8);
                  while ((*(_WORD *)(v437 + 44) & 8) != 0);
                }
              }
              sub_1C487FE80(*(_QWORD *)(v307 + 24) + 40, v307, *(_QWORD *)(v437 + 8));
              v438 = 1;
              v439 = v534;
LABEL_631:
              v364 = v493;
              goto LABEL_632;
            }
            v416 = 0;
            v417 = 0;
            for (kk = 0; kk != v415; ++kk)
            {
              v419 = *(_QWORD *)(v307 + 32);
              if ((*(_DWORD *)(v419 + v416) & 0x10000FF) == 0x1000000
                && (*(_DWORD *)(v419 + v416 + 4) - 1) >= 0x3FFFFFFF)
              {
                if (v417 >= HIDWORD(v532))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v531, (uint64_t)v533, v417 + 1, 4);
                  v417 = v532;
                }
                *((_DWORD *)v531 + v417) = kk;
                v417 = v532 + 1;
                LODWORD(v532) = v532 + 1;
              }
              v416 += 32;
            }
            v534 = (uint64_t *)v536;
            v535 = 0x200000000;
            if (!v417)
              goto LABEL_628;
            v430 = 0;
            v497 = v417;
            while (1)
            {
              v431 = *((unsigned int *)v531 + v430);
              v432 = *(_DWORD *)(*(_QWORD *)(v307 + 32) + 32 * v431 + 4);
              v433 = *(_DWORD *)(*(_QWORD *)(v406 + 32) + 32 * v431 + 4);
              v434 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 280) + 24) + 16 * (v433 & 0x7FFFFFFF));
              v435 = v535;
              if (v535 >= (unint64_t)HIDWORD(v535))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v534, (uint64_t)v536, v535 + 1, 8);
                v435 = v535;
              }
              v534[v435] = v434 & 0xFFFFFFFFFFFFFFF8;
              LODWORD(v535) = v535 + 1;
              if (!sub_1C51A3F30(*(_QWORD **)(v3 + 280), v433, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 280) + 24) + 16 * (v433 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 280) + 24) + 16 * (v432 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, 0))break;
              if (v497 == ++v430)
              {
                if ((_DWORD)v532)
                {
                  v458 = (char *)v531;
                  v498 = (char *)v531 + 4 * v532;
                  do
                  {
                    v459 = *(unsigned int *)v458;
                    v460 = *(unsigned int *)(*(_QWORD *)(v307 + 32) + 32 * v459 + 4);
                    v461 = *(_DWORD *)(*(_QWORD *)(v406 + 32) + 32 * v459 + 4);
                    v462 = *(_QWORD **)(v3 + 280);
                    v495 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v462 + 16) + 176))(*(_QWORD *)(*v462 + 16));
                    if ((v460 & 0x80000000) != 0)
                      v463 = (uint64_t *)(v462[3] + 16 * (v460 & 0x7FFFFFFF) + 8);
                    else
                      v463 = (uint64_t *)(v462[34] + 8 * v460);
                    v464 = *v463;
                    if (*v463)
                    {
                      do
                      {
                        v465 = *(_QWORD *)(v464 + 24);
                        if (v461 - 1 <= 0x3FFFFFFE)
                          llvm::MachineOperand::substPhysReg((unsigned int *)v464, v461, v495);
                        else
                          llvm::MachineOperand::setReg(v464, v461);
                        v464 = v465;
                      }
                      while (v465);
                    }
                    llvm::MachineRegisterInfo::clearKillFlags(*(_QWORD *)(v3 + 280), v461);
                    if (!sub_1C4A91738(*(_QWORD *)(v3 + 280), v461))
                      *(_DWORD *)(*(_QWORD *)(v406 + 32) + 32 * v459) &= ~0x4000000u;
                    v458 += 4;
                  }
                  while (v458 != v498);
                }
                goto LABEL_628;
              }
            }
            v439 = v534;
            if (!v430)
            {
              v438 = 0;
              goto LABEL_631;
            }
            v454 = 0;
            v455 = (unsigned int *)v531;
            v456 = *(_QWORD *)(v406 + 32);
            v457 = *(_QWORD *)(*(_QWORD *)(v3 + 280) + 24);
            v364 = v493;
            do
            {
              *(_QWORD *)(v457 + 16 * (*(_DWORD *)(v456 + 32 * v455[v454] + 4) & 0x7FFFFFFF)) = v439[v454] & 0xFFFFFFFFFFFFFFFBLL;
              ++v454;
            }
            while (v430 != v454);
            v438 = 0;
LABEL_632:
            if (v439 != (uint64_t *)v536)
              free(v439);
            if (v531 != v533)
              free(v531);
            if ((v438 & 1) == 0)
            {
LABEL_515:
              v366 = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(v507);
              sub_1C48532D0((unint64_t *)v507, v366, *(unint64_t **)(v307 + 24), (unint64_t *)v307);
              v513 = 0;
              v367 = (unsigned __int8 **)(v307 + 56);
              if (&v513 != (unsigned __int8 **)(v307 + 56))
              {
                if (*v367)
                {
                  llvm::MetadataTracking::untrack(v307 + 56, *v367);
                  v436 = v513;
                  *v367 = v513;
                  if (v436)
                  {
                    llvm::MetadataTracking::retrack((uint64_t)&v513, v436, v307 + 56);
                    v513 = 0;
                  }
                }
                else
                {
                  *v367 = 0;
                }
              }
              sub_1C516EDE0((uint64_t)&v534, v3, v307, 0, 0);
              v368 = *(_DWORD *)(v3 + 984);
              v369 = v534;
              if (v368)
              {
                v370 = *(uint64_t **)(v3 + 976);
                v371 = &v370[6 * v368];
                v372 = v536[0];
                v373 = (_DWORD)v535 == 0;
                v374 = (unsigned int *)&v534[v536[0]];
                if ((_DWORD)v535)
                  v375 = (unsigned int *)v534;
                else
                  v375 = (unsigned int *)&v534[v536[0]];
                if ((_DWORD)v535)
                  v376 = 0;
                else
                  v376 = v536[0];
                if (!v536[0])
                  v373 = 1;
                do
                {
                  v377 = v376;
                  v378 = v375;
                  if (!v373)
                  {
                    v379 = 8 * v372;
                    v378 = (unsigned int *)v369;
                    while (*v378 >= 0xFFFFFFFE)
                    {
                      v378 += 2;
                      v379 -= 8;
                      if (!v379)
                      {
                        v377 = v372;
                        v378 = (unsigned int *)&v369[v372];
                        goto LABEL_533;
                      }
                    }
                    v377 = v372;
                  }
LABEL_533:
                  v380 = (unsigned int *)&v369[v377];
                  if (v378 != v380)
                  {
                    v381 = *v370;
                    do
                    {
                      v383 = *v378;
                      v382 = v378[1];
                      v384 = v378 + 2;
                      *(_DWORD *)(v381 + 4 * v383) += v382;
                      while (v384 != v374)
                      {
                        v385 = *v384;
                        v384 += 2;
                        if (v385 <= 0xFFFFFFFD)
                        {
                          v378 = v384 - 2;
                          goto LABEL_540;
                        }
                      }
                      v378 = (unsigned int *)&v369[v372];
LABEL_540:
                      ;
                    }
                    while (v378 != v380);
                  }
                  v370 += 6;
                }
                while (v370 != v371);
              }
              MEMORY[0x1CAA32FB4](v369, 4);
              v386 = *(unsigned int *)(v307 + 40);
              if ((_DWORD)v386)
              {
                v387 = 32 * v386;
                v388 = (unsigned int *)(*(_QWORD *)(v307 + 32) + 4);
                do
                {
                  v389 = *(v388 - 1);
                  v390 = v389 & 0x10000FF;
                  v391 = v389 & 0x5000000;
                  if (v390 == 0x1000000 && v391 != 83886080)
                    llvm::MachineRegisterInfo::clearKillFlags(*(_QWORD *)(v3 + 280), *v388);
                  v388 += 8;
                  v387 -= 32;
                }
                while (v387);
              }
              v393 = *(_QWORD *)(v3 + 1760);
              v394 = *(unsigned int *)(v3 + 1776);
              if ((int *)(v393 + 32 * v394) != v364)
              {
                v396 = (uint64_t *)*((_QWORD *)v364 + 2);
                v395 = *((_QWORD *)v364 + 3);
                if ((unint64_t)v396 >= v395)
                {
                  v397 = (_QWORD *)*((_QWORD *)v364 + 1);
                  v398 = v396 - v397;
                  v399 = v398 + 1;
                  if (!((unint64_t)(v398 + 1) >> 61))
                  {
                    v400 = v395 - (_QWORD)v397;
                    if (v400 >> 2 > v399)
                      v399 = v400 >> 2;
                    if ((unint64_t)v400 >= 0x7FFFFFFFFFFFFFF8)
                      v401 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v401 = v399;
                    if (v401)
                    {
                      if (!(v401 >> 61))
                      {
                        v402 = (char *)operator new(8 * v401);
                        goto LABEL_607;
                      }
LABEL_736:
                      sub_1C4764EE4();
                    }
                    v402 = 0;
LABEL_607:
                    v427 = (uint64_t *)&v402[8 * v398];
                    *v427 = v307;
                    v422 = v427 + 1;
                    if (v396 != v397)
                    {
                      do
                      {
                        v428 = *--v396;
                        *--v427 = v428;
                      }
                      while (v396 != v397);
                      goto LABEL_613;
                    }
                    goto LABEL_614;
                  }
LABEL_735:
                  abort();
                }
LABEL_596:
                *v396 = v307;
                v422 = v396 + 1;
                goto LABEL_616;
              }
              v407 = v514;
              if ((_DWORD)v394)
              {
                v408 = v394 - 1;
                v409 = (37 * v514) & v408;
                v364 = (int *)(v393 + 32 * v409);
                v410 = *v364;
                if (v514 != *v364)
                {
                  v411 = 0;
                  v412 = 1;
                  while (v410 != -1)
                  {
                    if (v411)
                      v413 = 0;
                    else
                      v413 = v410 == -2;
                    if (v413)
                      v411 = v364;
                    v414 = v409 + v412++;
                    v409 = v414 & v408;
                    v364 = (int *)(v393 + 32 * v409);
                    v410 = *v364;
                    if (v514 == *v364)
                      goto LABEL_595;
                  }
                  if (v411)
                    v420 = v411;
                  else
                    v420 = v364;
LABEL_594:
                  v364 = sub_1C516EFD8((uint64_t)v505, &v514, v420);
                  *v364 = v407;
                  *((_QWORD *)v364 + 2) = 0;
                  *((_QWORD *)v364 + 3) = 0;
                  *((_QWORD *)v364 + 1) = 0;
                }
LABEL_595:
                v396 = (uint64_t *)*((_QWORD *)v364 + 2);
                v421 = *((_QWORD *)v364 + 3);
                if ((unint64_t)v396 < v421)
                  goto LABEL_596;
                v423 = (_QWORD *)*((_QWORD *)v364 + 1);
                v424 = v396 - v423;
                v425 = v424 + 1;
                if ((unint64_t)(v424 + 1) >> 61)
                  goto LABEL_735;
                v426 = v421 - (_QWORD)v423;
                if (v426 >> 2 > v425)
                  v425 = v426 >> 2;
                if ((unint64_t)v426 >= 0x7FFFFFFFFFFFFFF8)
                  v401 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v401 = v425;
                if (v401)
                {
                  if (v401 >> 61)
                    goto LABEL_736;
                  v402 = (char *)operator new(8 * v401);
                }
                else
                {
                  v402 = 0;
                }
                v427 = (uint64_t *)&v402[8 * v424];
                *v427 = v307;
                v422 = v427 + 1;
                if (v396 != v423)
                {
                  do
                  {
                    v429 = *--v396;
                    *--v427 = v429;
                  }
                  while (v396 != v423);
LABEL_613:
                  v396 = (uint64_t *)*((_QWORD *)v364 + 1);
                }
LABEL_614:
                *((_QWORD *)v364 + 1) = v427;
                *((_QWORD *)v364 + 2) = v422;
                *((_QWORD *)v364 + 3) = &v402[8 * v401];
                if (v396)
                  operator delete(v396);
LABEL_616:
                *((_QWORD *)v364 + 2) = v422;
                goto LABEL_617;
              }
              v420 = 0;
              goto LABEL_594;
            }
LABEL_617:
            *(_BYTE *)(v3 + 608) = 1;
            v280 = (v507 >> 4) ^ (v507 >> 9);
            v283 = v504;
          }
          while (v504 != v502);
LABEL_405:
          v534 = v490;
          if (!v512)
          {
            v466 = 0;
            goto LABEL_699;
          }
          v284 = (v512 - 1) & ((v490 >> 4) ^ (v490 >> 9));
          v285 = (_QWORD *)(v511[0] + 16 * v284);
          v286 = (_QWORD *)*v285;
          if (v490 != (uint64_t *)*v285)
          {
            v287 = 0;
            v288 = 1;
            while (v286 != (_QWORD *)-4096)
            {
              if (v287)
                v289 = 0;
              else
                v289 = v286 == (_QWORD *)-8192;
              if (v289)
                v287 = v285;
              v290 = v284 + v288++;
              v284 = v290 & (v512 - 1);
              v285 = (_QWORD *)(v511[0] + 16 * v284);
              v286 = (_QWORD *)*v285;
              if (v490 == (uint64_t *)*v285)
                goto LABEL_700;
            }
            if (v287)
              v466 = v287;
            else
              v466 = v285;
LABEL_699:
            v285 = sub_1C50E44BC((uint64_t)v511, (uint64_t)&v534, (uint64_t *)&v534, v466);
            *v285 = v534;
            *((_DWORD *)v285 + 2) = 0;
          }
LABEL_700:
          if (!*((_DWORD *)v285 + 2))
          {
            v467 = v518;
            while (1)
            {
              v468 = *(_DWORD *)(v3 + 984) - 1;
              *(_DWORD *)(v3 + 984) = v468;
              v469 = (void **)(*(_QWORD *)(v3 + 976) + 48 * v468);
              if (*v469 != v469 + 2)
                free(*v469);
              v531 = 0;
              if (!v520[0])
                break;
              v470 = ((v534 >> 4) ^ (v534 >> 9)) & (v520[0] - 1);
              v471 = (uint64_t *)v467[2 * v470];
              if (v534 != v471)
              {
                v482 = 1;
                while (v471 != (uint64_t *)-4096)
                {
                  v483 = v470 + v482++;
                  v470 = v483 & (v520[0] - 1);
                  v471 = (uint64_t *)v467[2 * v470];
                  if (v534 == v471)
                    goto LABEL_706;
                }
                break;
              }
LABEL_706:
              v472 = (void *)v467[2 * v470 + 1];
              v531 = v472;
              if (!v472)
                break;
              if (v512)
              {
                v473 = (v512 - 1) & ((v472 >> 4) ^ (v472 >> 9));
                v474 = (_QWORD *)(v511[0] + 16 * v473);
                v475 = (void *)*v474;
                if (v472 == (void *)*v474)
                  goto LABEL_722;
                v476 = 0;
                v477 = 1;
                while (v475 != (void *)-4096)
                {
                  if (v476)
                    v478 = 0;
                  else
                    v478 = v475 == (void *)-8192;
                  if (v478)
                    v476 = v474;
                  v479 = v473 + v477++;
                  v473 = v479 & (v512 - 1);
                  v474 = (_QWORD *)(v511[0] + 16 * v473);
                  v475 = (void *)*v474;
                  if (v472 == (void *)*v474)
                    goto LABEL_722;
                }
                if (v476)
                  v480 = v476;
                else
                  v480 = v474;
              }
              else
              {
                v480 = 0;
              }
              v474 = sub_1C50E44BC((uint64_t)v511, (uint64_t)&v531, (uint64_t *)&v531, v480);
              *v474 = v531;
              *((_DWORD *)v474 + 2) = 0;
LABEL_722:
              v481 = *((_DWORD *)v474 + 2) - 1;
              *((_DWORD *)v474 + 2) = v481;
              if (v481)
                break;
              v534 = (uint64_t *)v531;
            }
          }
          v279 = v491 + 1;
        }
        while (v491 + 1 != (uint64_t **)v487);
      }
    }
    MEMORY[0x1CAA32FB4](v511[0], 8);
    MEMORY[0x1CAA32FB4](v518, 8);
    if (v521 != v523)
      free(v521);
    if (v527 != v529)
      free(v527);
LABEL_402:
    sub_1C61F1FA0(v505);
LABEL_346:
    v28 = v516;
  }
  while ((_DWORD)v516);
LABEL_732:
  v8 = *(_BYTE *)(v3 + 608) != 0;
  if (v515 != v517)
    free(v515);
  return v8;
}

void sub_1C516DB08(uint64_t a1)
{
  sub_1C516DB2C(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C516DB2C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *(_QWORD *)a1 = &off_1E8145318;
  sub_1C61EA930((unsigned int *)(a1 + 1760));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1760), 8);
  sub_1C618F3AC((char **)(a1 + 976));
  v2 = *(void **)(a1 + 928);
  if (v2 != (void *)(a1 + 944))
    free(v2);
  v3 = *(void **)(a1 + 880);
  if (v3 != (void *)(a1 + 896))
    free(v3);
  sub_1C47655E8(a1 + 856, *(_QWORD **)(a1 + 864));
  v4 = *(void **)(a1 + 712);
  if (v4 != (void *)(a1 + 728))
    free(v4);
  v5 = *(void **)(a1 + 632);
  if (v5 != (void *)(a1 + 648))
    free(v5);
  v6 = *(void **)(a1 + 480);
  if (v6 != (void *)(a1 + 496))
    free(v6);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v7 = *(void **)(a1 + 176);
  if (v7 != (void *)(a1 + 192))
    free(v7);
  v8 = *(void **)(a1 + 104);
  if (v8 != (void *)(a1 + 120))
    free(v8);
  v9 = *(void **)(a1 + 32);
  if (v9 != (void *)(a1 + 48))
    free(v9);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C516DC3C(unsigned int *a1)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1[2];
  sub_1C61EA930(a1);
  if (v2)
  {
    v3 = 1 << (33 - __clz(v2 - 1));
    if (v3 <= 64)
      v4 = 64;
    else
      v4 = v3;
    if (v4 == a1[4])
    {
      *((_QWORD *)a1 + 1) = 0;
      v5 = 32 * v4;
      v6 = *(_DWORD **)a1;
      do
      {
        *v6 = -1;
        v6 += 8;
        v5 -= 32;
      }
      while (v5);
    }
    else
    {
      MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
      v7 = (4 * v4 / 3 + 1) | ((unint64_t)(4 * v4 / 3 + 1) >> 1);
      v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
      LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
      a1[4] = v8;
      v9 = operator new(32 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v9;
      *((_QWORD *)a1 + 1) = 0;
      v10 = a1[4];
      if ((_DWORD)v10)
      {
        v11 = 32 * v10;
        do
        {
          *v9 = -1;
          v9 += 8;
          v11 -= 32;
        }
        while (v11);
      }
    }
  }
  else if (a1[4])
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    a1[4] = 0;
  }
  else
  {
    *((_QWORD *)a1 + 1) = 0;
  }
}

llvm::MachineBasicBlock *sub_1C516DD4C(uint64_t a1)
{
  llvm::MachineBasicBlock *result;
  uint64_t v3;

  result = *(llvm::MachineBasicBlock **)(a1 + 624);
  if (result == (llvm::MachineBasicBlock *)-1)
    return 0;
  if (!result)
  {
    result = llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPreheader(*(_QWORD *)(a1 + 616));
    *(_QWORD *)(a1 + 624) = result;
    if (!result)
    {
      result = (llvm::MachineBasicBlock *)llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPredecessor(*(_QWORD *)(a1 + 616));
      if (result)
      {
        result = (llvm::MachineBasicBlock *)llvm::MachineBasicBlock::SplitCriticalEdge(result, **(const llvm::MachineBasicBlock ***)(*(_QWORD *)(a1 + 616) + 32), a1, 0);
        if (result)
          v3 = (uint64_t)result;
        else
          v3 = -1;
      }
      else
      {
        v3 = -1;
      }
      *(_QWORD *)(a1 + 624) = v3;
    }
  }
  return result;
}

uint64_t sub_1C516DDC8(uint64_t a1, llvm::MachineInstr *this)
{
  uint64_t result;
  unsigned __int16 *v5;
  uint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  _DWORD *v10;
  BOOL v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  llvm::MachineInstr *v20;
  llvm::MachineInstr *v21;
  BOOL v22;

  v22 = 1;
  if (!llvm::MachineInstr::isSafeToMove(this, *(llvm::AAResults **)(a1 + 576), &v22))
  {
    if (!byte_1ED7FACF0)
      return 0;
    result = sub_1C516DFD4(this, *(_QWORD *)(a1 + 264));
    if (!(_DWORD)result)
      return result;
  }
  v5 = (unsigned __int16 *)*((_QWORD *)this + 2);
  if (*v5 - 1 > 1 || (*(_BYTE *)(*((_QWORD *)this + 4) + 48) & 8) == 0)
  {
    v6 = *((_QWORD *)v5 + 1);
    if ((*((_WORD *)this + 22) & 0xC) != 0 && (*((_WORD *)this + 22) & 4) == 0)
    {
      if ((v6 & 0x80000) == 0)
      {
        v20 = this;
        while ((*((_WORD *)v20 + 22) & 8) != 0)
        {
          v20 = (llvm::MachineInstr *)*((_QWORD *)v20 + 1);
          if ((*(_BYTE *)(*((_QWORD *)v20 + 2) + 10) & 8) != 0)
            goto LABEL_10;
        }
        goto LABEL_31;
      }
    }
    else if ((v6 & 0x80000) == 0)
    {
      goto LABEL_31;
    }
  }
LABEL_10:
  v8 = (unint64_t *)((char *)this + 48);
  v9 = *((_QWORD *)this + 6);
  if (v9 < 8)
    goto LABEL_31;
  if ((v9 & 7) != 0)
  {
    v10 = (_DWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
    v11 = (*((_QWORD *)this + 6) & 7) != 3 || v10 == 0;
    if (v11 || !*v10)
      goto LABEL_31;
LABEL_19:
    if ((v9 & 7) == 0)
    {
      *((_QWORD *)this + 6) = v9 & 0xFFFFFFFFFFFFFFF8;
      v15 = (unint64_t *)((char *)this + 56);
      goto LABEL_25;
    }
    if ((v9 & 7) == 3)
    {
      v12 = (int *)(v9 & 0xFFFFFFFFFFFFFFF8);
      if ((v9 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v14 = *v12;
        v8 = (unint64_t *)(v12 + 2);
        v13 = v14;
        if ((_DWORD)v14)
        {
          v15 = &v8[v13];
LABEL_25:
          while (1)
          {
            v16 = *(_QWORD *)*v8;
            if ((v16 & 4) != 0)
            {
              v17 = v16 & 0xFFFFFFFFFFFFFFF8;
              if (v17)
              {
                if ((*(_DWORD *)(v17 + 8) | 2) == 3)
                  goto LABEL_31;
              }
            }
            if (++v8 == v15)
              goto LABEL_29;
          }
        }
      }
    }
    goto LABEL_29;
  }
  v9 &= 0xFFFFFFFFFFFFFFF8;
  *v8 = v9;
  if (v9)
    goto LABEL_19;
LABEL_29:
  result = sub_1C516E104(a1, *((_QWORD *)this + 3));
  if (!(_DWORD)result)
    return result;
  v5 = (unsigned __int16 *)*((_QWORD *)this + 2);
LABEL_31:
  if (*v5 - 1 <= 1 && (*(_BYTE *)(*((_QWORD *)this + 4) + 48) & 0x20) != 0)
    return 0;
  v18 = *((_QWORD *)v5 + 1);
  if ((*((_WORD *)this + 22) & 0xC) != 0 && (*((_WORD *)this + 22) & 4) == 0)
  {
    if ((v18 & 0x1000000000) == 0)
    {
      v21 = this;
      result = 0;
      while ((*((_WORD *)v21 + 22) & 8) != 0)
      {
        v21 = (llvm::MachineInstr *)*((_QWORD *)v21 + 1);
        if ((*(_BYTE *)(*((_QWORD *)v21 + 2) + 12) & 0x10) != 0)
          return result;
      }
      return (*(uint64_t (**)(_QWORD, llvm::MachineInstr *, _QWORD))(**(_QWORD **)(a1 + 248) + 168))(*(_QWORD *)(a1 + 248), this, *(_QWORD *)(a1 + 616));
    }
  }
  else if ((v18 & 0x1000000000) == 0)
  {
    return (*(uint64_t (**)(_QWORD, llvm::MachineInstr *, _QWORD))(**(_QWORD **)(a1 + 248) + 168))(*(_QWORD *)(a1 + 248), this, *(_QWORD *)(a1 + 616));
  }
  return 0;
}

uint64_t sub_1C516DFD4(llvm::MachineInstr *this, uint64_t a2)
{
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _DWORD *i;
  unsigned int v11;
  llvm::MachineInstr *v12;

  v4 = (unsigned __int16 *)*((_QWORD *)this + 2);
  if (*v4 - 1 <= 1 && (*(_BYTE *)(*((_QWORD *)this + 4) + 48) & 0x10) != 0)
    goto LABEL_7;
  v5 = *((_QWORD *)v4 + 1);
  if ((*((_WORD *)this + 22) & 0xC) == 0 || (*((_WORD *)this + 22) & 4) != 0)
  {
    if ((v5 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_7;
  }
  if ((v5 & 0x100000) != 0)
  {
LABEL_7:
    if (!llvm::MachineInstr::hasUnmodeledSideEffects(this))
    {
      v7 = *((unsigned int *)this + 10);
      if ((_DWORD)v7)
      {
        v8 = 0;
        v9 = 32 * v7;
        for (i = (_DWORD *)(*((_QWORD *)this + 4) + 4); ; i += 8)
        {
          if (*((_BYTE *)i - 4) != 1)
          {
            if (*((_BYTE *)i - 4))
              goto LABEL_25;
            v11 = *i;
            if ((*i & 0x80000000) != 0)
            {
              v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
              if ((v11 & 0x80000000) != 0)
                goto LABEL_25;
            }
            if (!(*(unsigned int (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 128))(a2, v11, *(_QWORD *)(*((_QWORD *)this + 3) + 32)))goto LABEL_25;
            v8 = 1;
          }
          v9 -= 32;
          if (!v9)
            return v8 & 1;
        }
      }
    }
    goto LABEL_25;
  }
  v12 = this;
  while ((*((_WORD *)v12 + 22) & 8) != 0)
  {
    v12 = (llvm::MachineInstr *)*((_QWORD *)v12 + 1);
    if ((*(_BYTE *)(*((_QWORD *)v12 + 2) + 10) & 0x10) != 0)
      goto LABEL_7;
  }
LABEL_25:
  v8 = 0;
  return v8 & 1;
}

BOOL sub_1C516E104(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 1784);
  if (v2 != 2)
    return v2 == 0;
  v5 = *(_QWORD *)(a1 + 616);
  if (**(_QWORD **)(v5 + 32) != a2)
  {
    v12 = v14;
    v13 = 0x800000000;
    llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getExitingBlocks((_QWORD *)v5, (uint64_t)&v12);
    if ((_DWORD)v13)
    {
      v7 = (uint64_t *)v12;
      v8 = 8 * v13;
      while (1)
      {
        v9 = *v7;
        v10 = *(_QWORD *)(a1 + 600);
        llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v10);
        if (!llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v10 + 1320), a2, v9))
          break;
        ++v7;
        v8 -= 8;
        if (!v8)
          goto LABEL_9;
      }
      v11 = 0;
      *(_DWORD *)(a1 + 1784) = 1;
    }
    else
    {
LABEL_9:
      v11 = 1;
    }
    if (v12 != v14)
      free(v12);
    if (!v11)
      return 0;
  }
  *(_DWORD *)(a1 + 1784) = 0;
  return 1;
}

void sub_1C516E234(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[17];

  v11[16] = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 888);
  if ((_DWORD)v4)
    bzero(*(void **)(a1 + 880), 4 * v4);
  if (((*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) & 0x7FFFFFFF8) == 8)
  {
    v7 = 0;
    v8 = 0;
    v9 = v11;
    v10 = 0x400000000;
    if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t *, void **, _QWORD))(**(_QWORD **)(a1 + 248)
                                                                                            + 248))(*(_QWORD *)(a1 + 248), a2, &v8, &v7, &v9, 0) & 1) == 0&& !(_DWORD)v10)
    {
      sub_1C516E234(a1, **(_QWORD **)(a2 + 64));
    }
    if (v9 != v11)
      free(v9);
  }
  v5 = a2 + 48;
  v6 = *(_QWORD *)(a2 + 56);
  if (v6 != v5)
    sub_1C516E368(a1, v6, 1);
}

void sub_1C516E368(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  int v17;
  unsigned int v18;

  sub_1C516EDE0((uint64_t)&v16, a1, a2, 1, a3);
  v4 = &v16[2 * v18];
  if (v17)
  {
    if (v18)
    {
      v5 = 8 * v18;
      v6 = v16;
      while (*v6 >= 0xFFFFFFFE)
      {
        v6 += 2;
        v5 -= 8;
        if (!v5)
          goto LABEL_6;
      }
    }
    else
    {
      v6 = v16;
    }
  }
  else
  {
LABEL_6:
    v6 = &v16[2 * v18];
  }
  v7 = &v16[2 * v18];
  if (v6 != v7)
  {
    v8 = *(_QWORD *)(a1 + 880);
    do
    {
      v10 = *v6;
      v11 = v6[1];
      v9 = v6 + 2;
      v12 = *(_DWORD *)(v8 + 4 * v10);
      v13 = -v11;
      v14 = v11 + v12;
      if (v12 < v13)
        v14 = 0;
      *(_DWORD *)(v8 + 4 * v10) = v14;
      while (v9 != v4)
      {
        v15 = *v9;
        v9 += 2;
        if (v15 <= 0xFFFFFFFD)
        {
          v6 = v9 - 2;
          goto LABEL_17;
        }
      }
      v6 = v4;
LABEL_17:
      ;
    }
    while (v6 != v7);
  }
  JUMPOUT(0x1CAA32FB4);
}

unint64_t sub_1C516E440(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 48 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C61DDA28(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C61DDA28(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C516E4A8(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  llvm::AAResults *v40;
  llvm::TargetInstrInfo *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *i;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  void *v65;
  uint64_t v66;
  unsigned int *v67;
  int v68;
  uint64_t v69;
  BOOL v70;
  char *v71;
  int v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  uint64_t v78;
  llvm::AAResults *v79;
  llvm::TargetInstrInfo *v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int16 *v89;
  uint64_t v90;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int *v96;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v102;
  char v103;
  int v104;
  _QWORD *v106;
  unsigned int v107;
  unsigned int v108;
  _QWORD v109[9];

  v109[8] = *MEMORY[0x1E0C80C00];
  v2 = **(unsigned __int16 **)(a2 + 16);
  if (v2 == 10)
    return 1;
  v4 = a2;
  if (byte_1ED7FACF0)
  {
    if (v2 == 19 && (*(_DWORD *)(*(_QWORD *)(a2 + 32) + 36) & 0x80000000) == 0)
    {
      v6 = *(_QWORD *)(a1 + 280);
      v7 = *(_QWORD *)(a1 + 264);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 128))(v7))
      {
        v8 = *(unsigned int *)(*(_QWORD *)(v4 + 32) + 4);
        v9 = (uint64_t *)((v8 & 0x80000000) != 0
                       ? *(_QWORD *)(v6 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v6 + 272) + 8 * v8);
        v10 = *v9;
        if (*v9)
        {
          while ((*(_BYTE *)(v10 + 3) & 1) != 0)
          {
            v10 = *(_QWORD *)(v10 + 24);
            if (!v10)
              goto LABEL_13;
          }
          v88 = *(_QWORD *)(v10 + 8);
LABEL_158:
          v89 = *(unsigned __int16 **)(v88 + 16);
          if (*v89 - 1 > 1 || (*(_BYTE *)(*(_QWORD *)(v88 + 32) + 48) & 0x10) == 0)
          {
            v90 = *((_QWORD *)v89 + 1);
            if ((*(_WORD *)(v88 + 44) & 0xC) != 0 && (*(_WORD *)(v88 + 44) & 4) == 0)
            {
              v92 = v88;
              if ((v90 & 0x100000) == 0)
              {
                do
                {
                  if ((*(_WORD *)(v92 + 44) & 8) == 0)
                  {
                    v4 = a2;
                    goto LABEL_166;
                  }
                  v92 = *(_QWORD *)(v92 + 8);
                  v4 = a2;
                }
                while ((*(_BYTE *)(*(_QWORD *)(v92 + 16) + 10) & 0x10) == 0);
              }
            }
            else if ((v90 & 0x100000) == 0)
            {
              goto LABEL_166;
            }
          }
          if ((sub_1C516DFD4((llvm::MachineInstr *)v88, v7) & 1) != 0)
            return 1;
          v88 = *(_QWORD *)(v10 + 8);
LABEL_166:
          while (1)
          {
            v10 = *(_QWORD *)(v10 + 24);
            if (!v10)
              break;
            if ((*(_BYTE *)(v10 + 3) & 1) == 0 && *(_QWORD *)(v10 + 8) != v88)
            {
              v88 = *(_QWORD *)(v10 + 8);
              goto LABEL_158;
            }
          }
        }
      }
    }
  }
LABEL_13:
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 248) + 152))(*(_QWORD *)(a1 + 248), v4) & 1) != 0
    || ((v11 = *(unsigned __int16 **)(v4 + 16), v12 = *v11, v12 != 11) ? (v13 = v12 == 19) : (v13 = 1), v13))
  {
    v104 = 1;
  }
  else
  {
    v68 = *((unsigned __int8 *)v11 + 4);
    v69 = *(unsigned int *)(v4 + 40);
    if (v68)
      v70 = (_DWORD)v69 == 0;
    else
      v70 = 1;
    if (v70)
    {
LABEL_118:
      v104 = 0;
    }
    else
    {
      v84 = 0;
      v85 = 0;
      v104 = 0;
      v86 = v69 - 1;
      do
      {
        v87 = *(_QWORD *)(a2 + 32);
        if ((*(_DWORD *)(v87 + v84) & 0x10000FF) == 0x1000000)
        {
          --v68;
          if ((*(_DWORD *)(v87 + v84 + 4) - 1) >= 0x3FFFFFFF)
          {
            if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 248) + 1000))(*(_QWORD *)(a1 + 248), a1 + 288, a2, v85))goto LABEL_118;
            v104 = 1;
          }
        }
        if (!v68)
          break;
        v84 += 32;
        v13 = v86 == v85++;
      }
      while (!v13);
    }
  }
  v106 = v109;
  v108 = 8;
  v109[0] = a2;
  v14 = 1;
  while (1)
  {
    v15 = v106[--v14];
    v107 = v14;
    v16 = *(unsigned int *)(v15 + 40);
    if ((_DWORD)v16)
      break;
LABEL_58:
    if (!v14)
    {
      v37 = 0;
      goto LABEL_61;
    }
  }
  v17 = *(_DWORD **)(v15 + 32);
  v18 = &v17[8 * v16];
  while (1)
  {
    if ((*v17 & 0x10000FF) == 0x1000000)
    {
      v19 = v17[1];
      if (v19 < 0)
      {
        v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 24) + 16 * (v19 & 0x7FFFFFFF) + 8);
        if (v20)
          break;
      }
    }
LABEL_25:
    v17 += 8;
    if (v17 == v18)
    {
      v14 = v107;
      goto LABEL_58;
    }
  }
  while ((*(_BYTE *)(v20 + 3) & 1) != 0)
  {
    v20 = *(_QWORD *)(v20 + 24);
    if (!v20)
      goto LABEL_25;
  }
  v21 = *(_QWORD *)(v20 + 8);
LABEL_32:
  v22 = **(unsigned __int16 **)(v21 + 16);
  if (v22 != 69)
  {
    if (v22 == 19)
    {
      v31 = *(_QWORD *)(a1 + 616);
      v32 = sub_1C477672C(v31 + 56, *(_QWORD *)(v21 + 24));
      v33 = *(_QWORD *)(v31 + 64);
      if (v33 == *(_QWORD *)(v31 + 56))
        v34 = 76;
      else
        v34 = 72;
      if (v32 != (_QWORD *)(v33 + 8 * *(unsigned int *)(v31 + v34)))
      {
        v35 = v107;
        if (v107 >= (unint64_t)v108)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, (uint64_t)v109, v107 + 1, 8);
          v35 = v107;
        }
        v106[v35] = v21;
        ++v107;
      }
    }
    else if (!**(_WORD **)(v21 + 16))
    {
      goto LABEL_35;
    }
LABEL_53:
    v36 = *(_QWORD *)(v20 + 8);
    while (1)
    {
      v20 = *(_QWORD *)(v20 + 24);
      if (!v20)
        goto LABEL_25;
      if ((*(_BYTE *)(v20 + 3) & 1) == 0)
      {
        v21 = *(_QWORD *)(v20 + 8);
        if (v21 != v36)
          goto LABEL_32;
      }
    }
  }
LABEL_35:
  v23 = *(_QWORD *)(a1 + 616);
  v24 = sub_1C477672C(v23 + 56, *(_QWORD *)(v21 + 24));
  v25 = *(_QWORD *)(v23 + 64);
  if (v25 == *(_QWORD *)(v23 + 56))
    v26 = 76;
  else
    v26 = 72;
  if (v24 == (_QWORD *)(v25 + 8 * *(unsigned int *)(v23 + v26)))
  {
    v27 = *(_QWORD *)(a1 + 632);
    v28 = *(unsigned int *)(a1 + 640);
    if ((_DWORD)v28)
    {
      v29 = 8 * v28;
      v30 = *(_QWORD **)(a1 + 632);
      while (*v30 != *(_QWORD *)(v21 + 24))
      {
        ++v30;
        v29 -= 8;
        if (!v29)
        {
          v30 = (_QWORD *)(v27 + 8 * v28);
          break;
        }
      }
    }
    else
    {
      v30 = *(_QWORD **)(a1 + 632);
    }
    if (v28 == ((uint64_t)v30 - v27) >> 3)
      goto LABEL_53;
  }
  v37 = 1;
LABEL_61:
  v38 = a2;
  if (v106 != v109)
    free(v106);
  if ((v104 & v37 & 1) != 0)
    return 0;
  v103 = v37;
  v39 = *(_QWORD *)(a2 + 16);
  if (*(_WORD *)v39 == 10
    || (*(_BYTE *)(v39 + 11) & 0x20) != 0
    && ((v40 = *(llvm::AAResults **)(a1 + 576),
         v41 = *(llvm::TargetInstrInfo **)(a1 + 248),
         ((*(uint64_t (**)(llvm::TargetInstrInfo *, uint64_t, llvm::AAResults *))(*(_QWORD *)v41 + 32))(v41, a2, v40) & 1) != 0)|| llvm::TargetInstrInfo::isReallyTriviallyReMaterializableGeneric(v41, (const llvm::MachineInstr *)a2, v40)))
  {
    v42 = *(unsigned int *)(a2 + 40);
    if (!(_DWORD)v42)
      return 1;
    v43 = 32 * v42;
    for (i = (_DWORD *)(*(_QWORD *)(a2 + 32) + 4); (*(i - 1) & 0x10000FF) != 0 || (*i & 0x80000000) == 0; i += 8)
    {
      v43 -= 32;
      if (!v43)
        return 1;
    }
  }
  v45 = *(_QWORD *)(a2 + 16);
  v46 = *(unsigned __int16 *)(v45 + 2);
  if (!*(_WORD *)(v45 + 2))
  {
LABEL_107:
    sub_1C516EDE0((uint64_t)&v106, a1, v38, 0, 0);
    v65 = v106;
    if (v107)
    {
      if (LODWORD(v109[0]))
      {
        v66 = 8 * LODWORD(v109[0]);
        v67 = (unsigned int *)v106;
        while (*v67 >= 0xFFFFFFFE)
        {
          v67 += 2;
          v66 -= 8;
          if (!v66)
            goto LABEL_112;
        }
      }
      else
      {
        v67 = (unsigned int *)v106;
      }
    }
    else
    {
LABEL_112:
      v67 = (unsigned int *)&v106[LODWORD(v109[0])];
    }
    v71 = (char *)&v106[LODWORD(v109[0])];
    if (v67 == (unsigned int *)v71)
      goto LABEL_156;
    while (1)
    {
      v72 = v67[1];
      if (v72 > 0)
      {
        if ((v104 & (byte_1ED7FAC30 == 0)) != 0)
          goto LABEL_134;
        v73 = *(unsigned int *)(a1 + 984);
        if ((_DWORD)v73)
          break;
      }
LABEL_127:
      v76 = v67 + 2;
      while (v76 != (unsigned int *)&v106[LODWORD(v109[0])])
      {
        v77 = *v76;
        v76 += 2;
        if (v77 <= 0xFFFFFFFD)
        {
          v67 = v76 - 2;
          goto LABEL_132;
        }
      }
      v67 = (unsigned int *)&v106[LODWORD(v109[0])];
LABEL_132:
      if (v67 == (unsigned int *)v71)
        goto LABEL_156;
    }
    v74 = *(_QWORD **)(a1 + 976);
    v75 = 48 * v73;
    while (*(_DWORD *)(*v74 + 4 * *v67) + v72 < *(_DWORD *)(*(_QWORD *)(a1 + 928) + 4 * *v67))
    {
      v74 += 6;
      v75 -= 48;
      if (!v75)
        goto LABEL_127;
    }
LABEL_134:
    if ((v103 & 1) == 0)
    {
      if (byte_1ED7FAB70 && !sub_1C516E104(a1, *(_QWORD *)(v38 + 24)))
      {
        v93 = **(unsigned __int16 **)(v38 + 16);
        v94 = *(_QWORD *)(a1 + 1760);
        v95 = *(unsigned int *)(a1 + 1776);
        v96 = sub_1C4E341F8(v94, *(_DWORD *)(a1 + 1776), v93);
        if ((int *)(v94 + 32 * v95) == v96 || v93 == 10)
          goto LABEL_188;
        v98 = (uint64_t *)*((_QWORD *)v96 + 1);
        v99 = (uint64_t *)*((_QWORD *)v96 + 2);
        if (v98 == v99)
          goto LABEL_188;
        while (1)
        {
          v100 = *(_BYTE *)(a1 + 568) ? *(_QWORD *)(a1 + 280) : 0;
          v3 = *v98;
          if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 248) + 216))(*(_QWORD *)(a1 + 248), a2, *v98, v100))
          {
            break;
          }
          v3 = 0;
          if (++v98 == v99)
            goto LABEL_189;
        }
        v38 = a2;
        if (!v3)
          goto LABEL_189;
      }
      v78 = *(_QWORD *)(v38 + 16);
      if (*(_WORD *)v78 == 10
        || (*(_BYTE *)(v78 + 11) & 0x20) != 0
        && ((v79 = *(llvm::AAResults **)(a1 + 576),
             v80 = *(llvm::TargetInstrInfo **)(a1 + 248),
             ((*(uint64_t (**)(llvm::TargetInstrInfo *, uint64_t, llvm::AAResults *))(*(_QWORD *)v80 + 32))(v80, v38, v79) & 1) != 0)|| llvm::TargetInstrInfo::isReallyTriviallyReMaterializableGeneric(v80, (const llvm::MachineInstr *)v38, v79)))
      {
        v81 = *(unsigned int *)(v38 + 40);
        if (!(_DWORD)v81)
        {
LABEL_156:
          v3 = 1;
LABEL_189:
          MEMORY[0x1CAA32FB4](v65, 4);
          return v3;
        }
        v82 = 32 * v81;
        v83 = (_DWORD *)(*(_QWORD *)(v38 + 32) + 4);
        while ((*(v83 - 1) & 0x10000FF) != 0 || (*v83 & 0x80000000) == 0)
        {
          v83 += 8;
          v82 -= 32;
          if (!v82)
            goto LABEL_156;
        }
      }
      if (llvm::MachineInstr::isDereferenceableInvariantLoad((llvm::MachineInstr *)v38, *(llvm::AAResults **)(a1 + 576)))goto LABEL_156;
    }
LABEL_188:
    v3 = 0;
    goto LABEL_189;
  }
  v47 = 0;
  while (1)
  {
    v48 = *(_QWORD *)(v38 + 32);
    v49 = *(_DWORD *)(v48 + 32 * v47);
    if ((v49 & 0x20000FF) == 0 && (v49 & 0x1000000) != 0)
    {
      v50 = v48 + 32 * v47;
      v51 = *(_DWORD *)(v50 + 4);
      if (v51 < 0 && !sub_1C4A91738(*(_QWORD *)(a1 + 280), *(_DWORD *)(v50 + 4)))
      {
        v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 24) + 16 * (v51 & 0x7FFFFFFF) + 8);
        if (v52)
        {
          while ((*(_DWORD *)v52 & 0x81000000) != 0)
          {
            v52 = *(_QWORD *)(v52 + 24);
            if (!v52)
              goto LABEL_78;
          }
          v53 = *(_QWORD *)(v52 + 8);
LABEL_88:
          v54 = **(unsigned __int16 **)(v53 + 16);
          if (v54 == 11 || v54 == 19)
          {
LABEL_96:
            while (1)
            {
              v52 = *(_QWORD *)(v52 + 24);
              if (!v52)
                goto LABEL_78;
              if ((*(_DWORD *)v52 & 0x81000000) == 0 && *(_QWORD *)(v52 + 8) != v53)
              {
                v53 = *(_QWORD *)(v52 + 8);
                goto LABEL_88;
              }
            }
          }
          v56 = *(_QWORD *)(a1 + 616);
          v57 = sub_1C477672C(v56 + 56, *(_QWORD *)(v53 + 24));
          v58 = *(_QWORD *)(v56 + 64);
          v59 = 72;
          if (v58 == *(_QWORD *)(v56 + 56))
            v59 = 76;
          if (v57 == (_QWORD *)(v58 + 8 * *(unsigned int *)(v56 + v59)))
          {
            v53 = *(_QWORD *)(v52 + 8);
            goto LABEL_96;
          }
          v60 = *(unsigned int *)(v53 + 40);
          if ((_DWORD)v60)
            break;
        }
      }
    }
LABEL_78:
    ++v47;
    v38 = a2;
    if (v47 == v46)
      goto LABEL_107;
  }
  v61 = 0;
  v62 = 0;
  v102 = *(unsigned int *)(v53 + 40);
  while (1)
  {
    v63 = *(_QWORD *)(v53 + 32);
    if ((*(_DWORD *)(v63 + v61) & 0x10000FF) == 0 && *(_DWORD *)(v63 + v61 + 4) == v51)
    {
      v64 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 248) + 992))(*(_QWORD *)(a1 + 248), a1 + 288, *(_QWORD *)(a1 + 280), a2, v47, v53, v62);
      v60 = v102;
      if ((v64 & 1) != 0)
        return 1;
    }
    ++v62;
    v61 += 32;
    if (v60 == v62)
      goto LABEL_78;
  }
}

uint64_t sub_1C516EDE0(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  _WORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v25;
  int v26;
  unsigned int v27;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  v5 = *(_WORD **)(a3 + 16);
  if (*v5 != 10)
  {
    v6 = (unsigned __int16)v5[1];
    if (v5[1])
    {
      v8 = result;
      v9 = 0;
      v21 = a2 + 712;
      do
      {
        v10 = (_DWORD *)(*(_QWORD *)(a3 + 32) + 32 * v9);
        if ((*v10 & 0x20000FF) == 0)
        {
          v11 = v10[1];
          v27 = v11;
          if ((v11 & 0x80000000) != 0)
          {
            if (a4)
            {
              v12 = (sub_1C4879438(v21, &v27) >> 32) & 1;
              v11 = v27;
            }
            else
            {
              LODWORD(v12) = 0;
            }
            v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 280) + 24) + 16 * (v11 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
            result = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a2 + 264) + 280))(*(_QWORD *)(a2 + 264), v13);
            v14 = *(_DWORD *)result;
            if ((*v10 & 0x1000000) != 0)
              goto LABEL_22;
            if (((*v10 >> 26) & ~HIBYTE(*v10) & 1) != 0)
            {
              if ((v12 & 1) == 0)
                goto LABEL_21;
            }
            else
            {
              result = llvm::MachineRegisterInfo::hasOneNonDBGUse(*(_QWORD *)(a2 + 280), v10[1]);
              if ((v12 & ~(_DWORD)result & a5) != 0)
                v15 = v14;
              else
                v15 = 0;
              if ((v12 & 1) != 0)
              {
                v14 = v15;
LABEL_22:
                if (v14)
                {
                  result = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a2 + 264) + 320))(*(_QWORD *)(a2 + 264), v13);
                  v16 = *(_DWORD *)result;
                  if (*(_DWORD *)result != -1)
                  {
                    v17 = (int *)(result + 4);
                    do
                    {
                      v18 = *(_QWORD *)v8;
                      v19 = *(unsigned int *)(v8 + 16);
                      if ((int *)(v18 + 8 * v19) == sub_1C49796E4(*(_QWORD *)v8, *(_DWORD *)(v8 + 16), v16))
                      {
                        v26 = v16;
                        result = (uint64_t)sub_1C61F20A8(v8, &v26);
                        *(_DWORD *)(result + 4) = v14;
                      }
                      else
                      {
                        v25 = v16;
                        result = (uint64_t)sub_1C61F20A8(v8, &v25);
                        *(_DWORD *)(result + 4) += v14;
                      }
                      v20 = *v17++;
                      v16 = v20;
                    }
                    while (v20 != -1);
                  }
                }
                goto LABEL_6;
              }
              if ((_DWORD)result)
              {
LABEL_21:
                v14 = -v14;
                goto LABEL_22;
              }
            }
          }
        }
LABEL_6:
        ++v9;
      }
      while (v9 != v6);
    }
  }
  return result;
}

_DWORD *sub_1C516EFD8(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
    sub_1C510202C((uint64_t *)a1, v6);
    v16 = *(_DWORD *)(a1 + 16);
    if (v16)
    {
      v17 = v16 - 1;
      v18 = (37 * *a2) & v17;
      a3 = (_DWORD *)(*(_QWORD *)a1 + 32 * v18);
      v19 = *a3;
      if (*a2 == *a3)
        goto LABEL_3;
      v12 = 0;
      v20 = 1;
      while (v19 != -1)
      {
        if (v12)
          v21 = 0;
        else
          v21 = v19 == -2;
        if (v21)
          v12 = a3;
        v22 = v18 + v20++;
        v18 = v22 & v17;
        a3 = (_DWORD *)(*(_QWORD *)a1 + 32 * v18);
        v19 = *a3;
        if (*a2 == *a3)
          goto LABEL_3;
      }
      goto LABEL_29;
    }
LABEL_28:
    a3 = 0;
    goto LABEL_3;
  }
  sub_1C510202C((uint64_t *)a1, 2 * v6);
  v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_28;
  v9 = v8 - 1;
  v10 = (37 * *a2) & v9;
  a3 = (_DWORD *)(*(_QWORD *)a1 + 32 * v10);
  v11 = *a3;
  if (*a2 == *a3)
    goto LABEL_3;
  v12 = 0;
  v13 = 1;
  while (v11 != -1)
  {
    if (v12)
      v14 = 0;
    else
      v14 = v11 == -2;
    if (v14)
      v12 = a3;
    v15 = v10 + v13++;
    v10 = v15 & v9;
    a3 = (_DWORD *)(*(_QWORD *)a1 + 32 * v10);
    v11 = *a3;
    if (*a2 == *a3)
      goto LABEL_3;
  }
LABEL_29:
  if (v12)
    a3 = v12;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C516F15C()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v0 = operator new();
  sub_1C516B06C(v0, (uint64_t)&unk_1EF8F6F52, 1);
  *v1 = &off_1E81453D8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7FAAE8);
  if (v3 != -1)
  {
    v7[0] = sub_1C516AED0;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7FAAE8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C516F23C(uint64_t a1)
{
  sub_1C516DB2C(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C516F260(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = a1;
    v3 = a1 + 40 * a2;
    do
    {
      sub_1C61F248C(*(unsigned __int8 **)v2, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
}

unint64_t sub_1C516F2A4(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1ED7FAEA0 >= HIDWORD(qword_1ED7FAEA0))
  {
    v3 = qword_1ED7FAEA0 + 1;
    if (qword_1ED7FAE98 <= a1 && qword_1ED7FAE98 + 48 * (unint64_t)qword_1ED7FAEA0 > a1)
    {
      v5 = a1 - qword_1ED7FAE98;
      sub_1C61F2540(v3);
      return qword_1ED7FAE98 + v5;
    }
    else
    {
      sub_1C61F2540(v3);
    }
  }
  return a1;
}

uint64_t sub_1C516F318()
{
  int v1;
  int v2;
  int *v3;
  __int128 v4;
  __n128 v5;
  _QWORD v6[2];
  int v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5.n128_u64[0] = (unint64_t)"MachineLICM should avoid speculation";
  v5.n128_u64[1] = 36;
  LOBYTE(v2) = 1;
  *(_QWORD *)&v4 = &v2;
  LODWORD(v3) = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED7FAAF0, "avoid-speculation", &v5, (_BYTE **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FAAF0, &dword_1C475E000);
  v5.n128_u64[0] = (unint64_t)"MachineLICM should hoist even cheap instructions";
  v5.n128_u64[1] = 48;
  LOBYTE(v2) = 0;
  *(_QWORD *)&v4 = &v2;
  LODWORD(v3) = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED7FABB0, "hoist-cheap-insts", &v5, (_BYTE **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FABB0, &dword_1C475E000);
  v5.n128_u64[0] = (unint64_t)"Hoist invariant stores";
  v5.n128_u64[1] = 22;
  LOBYTE(v2) = 1;
  *(_QWORD *)&v4 = &v2;
  LODWORD(v3) = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED7FAC70, "hoist-const-stores", &v5, (_BYTE **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FAC70, &dword_1C475E000);
  v5.n128_u64[0] = (unint64_t)"Do not hoist instructions if targetblock is N times hotter than the source.";
  v5.n128_u64[1] = 75;
  v2 = 1;
  LODWORD(v3) = 100;
  *(_QWORD *)&v4 = &v3;
  sub_1C61D8E94((uint64_t)&unk_1ED7FAD30, "block-freq-ratio-threshold", &v5, (int **)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FAD30, &dword_1C475E000);
  *(_QWORD *)&v4 = "Disable hoisting instructions to hotter blocks";
  *((_QWORD *)&v4 + 1) = 46;
  v1 = 1;
  v2 = 1;
  v3 = &v2;
  v5.n128_u64[0] = (unint64_t)v6;
  v6[0] = "none";
  v6[1] = 4;
  v7 = 0;
  v8 = "disable the feature";
  v9 = 19;
  v10 = "pgo";
  v11 = 3;
  v12 = 1;
  v13 = "enable the feature when using profile data";
  v14 = 42;
  v15 = "all";
  v16 = 3;
  v17 = 2;
  v18 = "enable the feature with/wo profile data";
  v19 = 39;
  v5.n128_u64[1] = 0x400000003;
  sub_1C61F22E4(&v4, &v3, &v1, (uint64_t)&v5);
  if ((_QWORD *)v5.n128_u64[0] != v6)
    free((void *)v5.n128_u64[0]);
  return __cxa_atexit((void (*)(void *))sub_1C61F1C10, &qword_1ED7FADF0, &dword_1C475E000);
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopDepth(_QWORD *a1)
{
  uint64_t v1;

  LODWORD(v1) = 0;
  do
  {
    a1 = (_QWORD *)*a1;
    v1 = (v1 + 1);
  }
  while (a1);
  return v1;
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getHeader(uint64_t a1)
{
  return **(_QWORD **)(a1 + 32);
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getBlocks(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getParentLoop(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::setParentLoop(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

BOOL llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::contains(_QWORD *a1, _QWORD *a2)
{
  _BOOL8 result;

  if (a2 == a1)
    return 1;
  do
  {
    result = a2 != 0;
    if (!a2)
      break;
    a2 = (_QWORD *)*a2;
  }
  while (a2 != a1);
  return result;
}

BOOL llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::contains(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_1C477672C(a1 + 56, a2);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = 72;
  if (v4 == *(_QWORD *)(a1 + 56))
    v5 = 76;
  return v3 != (_QWORD *)(v4 + 8 * *(unsigned int *)(a1 + v5));
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getSubLoops(uint64_t a1)
{
  return a1 + 8;
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getSubLoopsVector(uint64_t a1)
{
  return a1 + 8;
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::begin(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::end(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::rbegin(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::rend(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

BOOL llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::isInnermost(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 16);
}

BOOL llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::isOutermost(_QWORD *a1)
{
  return *a1 == 0;
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::block_begin(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::block_end(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::blocks(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getNumBlocks(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3;
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getBlocksVector(uint64_t a1)
{
  return a1 + 32;
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getBlocksSet(uint64_t a1)
{
  return a1 + 56;
}

{
  return a1 + 56;
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::isInvalid()
{
  return 0;
}

BOOL llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::isLoopExiting(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  BOOL v11;

  v2 = *(_QWORD *)(a2 + 88);
  v3 = *(_QWORD *)(a2 + 96);
  if (v2 == v3)
    return 0;
  v5 = a1 + 56;
  v6 = v2 + 8;
  do
  {
    v7 = sub_1C477672C(v5, *(_QWORD *)(v6 - 8));
    v8 = *(_QWORD *)(a1 + 64);
    if (v8 == *(_QWORD *)(a1 + 56))
      v9 = 76;
    else
      v9 = 72;
    v11 = v7 == (_QWORD *)(v8 + 8 * *(unsigned int *)(a1 + v9));
    result = v11;
    v11 = v11 || v6 == v3;
    v6 += 8;
  }
  while (!v11);
  return result;
}

BOOL llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::isLoopLatch(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = **(_QWORD **)(a1 + 32);
  v3 = *(_QWORD **)(v2 + 64);
  v4 = *(_QWORD **)(v2 + 72);
  if (v3 != v4)
  {
    while (*v3 != a2)
    {
      if (++v3 == v4)
      {
        v3 = v4;
        return v3 != v4;
      }
    }
  }
  return v3 != v4;
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getNumBackEdges(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = **(_QWORD **)(a1 + 32);
  v2 = *(uint64_t **)(v1 + 64);
  v3 = *(uint64_t **)(v1 + 72);
  if (v2 == v3)
    return 0;
  LODWORD(v5) = 0;
  v6 = a1 + 56;
  do
  {
    v7 = *v2++;
    v8 = sub_1C477672C(v6, v7);
    v9 = *(_QWORD *)(a1 + 64);
    if (v9 == *(_QWORD *)(a1 + 56))
      v10 = 76;
    else
      v10 = 72;
    if (v8 == (_QWORD *)(v9 + 8 * *(unsigned int *)(a1 + v10)))
      v5 = v5;
    else
      v5 = (v5 + 1);
  }
  while (v2 != v3);
  return v5;
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getExitingBlock(_QWORD *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  _QWORD v5[9];

  v5[8] = *MEMORY[0x1E0C80C00];
  v3 = v5;
  v4 = 0x800000000;
  llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getExitingBlocks(a1, (uint64_t)&v3);
  if ((_DWORD)v4 == 1)
    v1 = *(_QWORD *)v3;
  else
    v1 = 0;
  if (v3 != v5)
    free(v3);
  return v1;
}

{
  return __ZNK4llvm8LoopBaseINS_17MachineBasicBlockENS_11MachineLoopEE15getExitingBlockEv(a1);
}

_QWORD *llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getExitBlocks(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2 = result[4];
  v3 = result[5];
  if (v3 != v2)
  {
    v5 = result;
    v6 = (uint64_t)(result + 7);
    do
    {
      v7 = *(uint64_t **)(*(_QWORD *)v2 + 88);
      v8 = *(uint64_t **)(*(_QWORD *)v2 + 96);
      while (v7 != v8)
      {
        v9 = *v7;
        result = sub_1C477672C(v6, *v7);
        v10 = v5[8];
        if (v10 == v5[7])
          v11 = 76;
        else
          v11 = 72;
        if (result == (_QWORD *)(v10 + 8 * *(unsigned int *)((char *)v5 + v11)))
        {
          v12 = *(unsigned int *)(a2 + 8);
          if (v12 >= *(unsigned int *)(a2 + 12))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v12 + 1, 8);
            v12 = *(unsigned int *)(a2 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v12) = v9;
          ++*(_DWORD *)(a2 + 8);
        }
        ++v7;
      }
      v2 += 8;
    }
    while (v2 != v3);
  }
  return result;
}

{
  return __ZNK4llvm8LoopBaseINS_17MachineBasicBlockENS_11MachineLoopEE13getExitBlocksERNS_15SmallVectorImplIPS1_EE(result, a2);
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getExitBlock(_QWORD *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  _QWORD v5[9];

  v5[8] = *MEMORY[0x1E0C80C00];
  v3 = v5;
  v4 = 0x800000000;
  llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getExitBlocks(a1, (uint64_t)&v3);
  if ((_DWORD)v4 == 1)
    v1 = *(_QWORD *)v3;
  else
    v1 = 0;
  if (v3 != v5)
    free(v3);
  return v1;
}

{
  return __ZNK4llvm8LoopBaseINS_17MachineBasicBlockENS_11MachineLoopEE12getExitBlockEv(a1);
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::hasDedicatedExits(_QWORD *a1)
{
  char *v2;
  char *v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x400000000;
  sub_1C516FBA4(a1, (uint64_t)&v11);
  if ((_DWORD)v12)
  {
    v2 = (char *)v11;
    v3 = (char *)v11 + 8 * v12;
    while (2)
    {
      v4 = *(uint64_t **)(*(_QWORD *)v2 + 64);
      v5 = *(uint64_t **)(*(_QWORD *)v2 + 72);
      while (v4 != v5)
      {
        v6 = sub_1C477672C((uint64_t)(a1 + 7), *v4);
        v7 = a1[8];
        if (v7 == a1[7])
          v8 = 76;
        else
          v8 = 72;
        if (v6 == (_QWORD *)(v7 + 8 * *(unsigned int *)((char *)a1 + v8)))
        {
          v9 = 0;
          goto LABEL_13;
        }
        ++v4;
      }
      v2 += 8;
      if (v2 != v3)
        continue;
      break;
    }
  }
  v9 = 1;
LABEL_13:
  if (v11 != v13)
    free(v11);
  return v9;
}

void sub_1C516FBA4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  _BYTE v20[264];

  v16 = v20;
  v17 = v20;
  v18 = 32;
  v19 = 0;
  v2 = a1[4];
  v3 = a1[5];
  if (v3 != v2)
  {
    v6 = (uint64_t)(a1 + 7);
    v15 = a2 + 16;
    do
    {
      v8 = *(uint64_t **)(*(_QWORD *)v2 + 88);
      v7 = *(uint64_t **)(*(_QWORD *)v2 + 96);
      while (v8 != v7)
      {
        v9 = *v8;
        v10 = sub_1C477672C(v6, *v8);
        v11 = a1[8];
        if (v11 == a1[7])
          v12 = 76;
        else
          v12 = 72;
        if (v10 == (_QWORD *)(v11 + 8 * *(unsigned int *)((char *)a1 + v12)))
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v16, v9);
          if (v13)
          {
            v14 = *(unsigned int *)(a2 + 8);
            if (v14 >= *(unsigned int *)(a2 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v15, v14 + 1, 8);
              v14 = *(unsigned int *)(a2 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a2 + 8 * v14) = v9;
            ++*(_DWORD *)(a2 + 8);
          }
        }
        ++v8;
      }
      v2 += 8;
    }
    while (v2 != v3);
    if (v17 != v16)
      free(v17);
  }
}

void llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getUniqueNonLatchExitBlocks(_QWORD *a1, uint64_t a2)
{
  uint64_t LoopLatch;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  int v25;
  _BYTE v26[264];

  LoopLatch = llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopLatch((uint64_t)a1);
  v5 = LoopLatch;
  v22 = v26;
  v23 = v26;
  v24 = 32;
  v25 = 0;
  v6 = a1[4];
  v7 = a1[5] - v6;
  if (v7)
  {
    v8 = 8 * (v7 >> 3);
    for (i = (uint64_t *)a1[4]; *i == LoopLatch; ++i)
    {
      v8 -= 8;
      if (!v8)
        return;
    }
  }
  else
  {
    i = (uint64_t *)a1[4];
  }
  v10 = (uint64_t *)(v6 + (v7 & 0xFFFFFFFFFFFFFFF8));
  if (i != v10)
  {
    v11 = *i;
LABEL_9:
    v12 = *(uint64_t **)(v11 + 88);
    v13 = *(uint64_t **)(v11 + 96);
    while (v12 != v13)
    {
      v14 = *v12;
      v15 = sub_1C477672C((uint64_t)(a1 + 7), *v12);
      v16 = a1[8];
      v17 = 72;
      if (v16 == a1[7])
        v17 = 76;
      if (v15 == (_QWORD *)(v16 + 8 * *(unsigned int *)((char *)a1 + v17)))
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v22, v14);
        if (v18)
        {
          v19 = *(unsigned int *)(a2 + 8);
          if (v19 >= *(unsigned int *)(a2 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v19 + 1, 8);
            v19 = *(unsigned int *)(a2 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v19) = v14;
          ++*(_DWORD *)(a2 + 8);
        }
      }
      ++v12;
    }
    v20 = i + 1;
    while (v20 != v10)
    {
      v21 = *v20++;
      v11 = v21;
      if (v21 != v5)
      {
        i = v20 - 1;
        goto LABEL_9;
      }
    }
    if (v23 != v22)
      free(v23);
  }
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopLatch(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = **(_QWORD **)(a1 + 32);
  v2 = *(uint64_t **)(v1 + 64);
  v3 = *(uint64_t **)(v1 + 72);
  if (v2 == v3)
    return 0;
  v5 = 0;
  v6 = a1 + 56;
  do
  {
    v7 = *v2;
    v8 = sub_1C477672C(v6, *v2);
    v9 = *(_QWORD *)(a1 + 64);
    if (v9 == *(_QWORD *)(a1 + 56))
      v10 = 76;
    else
      v10 = 72;
    if (v8 == (_QWORD *)(v9 + 8 * *(unsigned int *)(a1 + v10)))
    {
      v7 = v5;
    }
    else if (v5)
    {
      return 0;
    }
    ++v2;
    v5 = v7;
  }
  while (v2 != v3);
  return v7;
}

{
  return __ZNK4llvm8LoopBaseINS_17MachineBasicBlockENS_11MachineLoopEE12getLoopLatchEv(a1);
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getUniqueExitBlock(_QWORD *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  _QWORD v5[9];

  v5[8] = *MEMORY[0x1E0C80C00];
  v3 = v5;
  v4 = 0x800000000;
  sub_1C516FBA4(a1, (uint64_t)&v3);
  if ((_DWORD)v4 == 1)
    v1 = *(_QWORD *)v3;
  else
    v1 = 0;
  if (v3 != v5)
    free(v3);
  return v1;
}

BOOL llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::hasNoExitBlocks(_QWORD *a1)
{
  int v1;
  void *v3;
  uint64_t v4;
  _QWORD v5[9];

  v5[8] = *MEMORY[0x1E0C80C00];
  v3 = v5;
  v4 = 0x800000000;
  llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getExitBlocks(a1, (uint64_t)&v3);
  v1 = v4;
  if (v3 != v5)
    free(v3);
  return v1 == 0;
}

_QWORD *llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getExitEdges(_QWORD *result, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;

  v2 = (uint64_t *)result[4];
  v15 = (uint64_t *)result[5];
  if (v15 != v2)
  {
    v4 = result;
    v5 = (uint64_t)(result + 7);
    v14 = a2 + 16;
    do
    {
      v6 = *v2;
      v7 = *(uint64_t **)(*v2 + 88);
      v8 = *(uint64_t **)(*v2 + 96);
      while (v7 != v8)
      {
        v9 = *v7;
        result = sub_1C477672C(v5, *v7);
        v10 = v4[8];
        if (v10 == v4[7])
          v11 = 76;
        else
          v11 = 72;
        if (result == (_QWORD *)(v10 + 8 * *(unsigned int *)((char *)v4 + v11)))
        {
          v12 = *(unsigned int *)(a2 + 8);
          if (v12 >= *(_DWORD *)(a2 + 12))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v14, v12 + 1, 16);
            v12 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 8);
            *(_QWORD *)v12 = v6;
            *(_QWORD *)(v12 + 8) = v9;
            LODWORD(v12) = *(_DWORD *)(a2 + 8);
          }
          else
          {
            v13 = (_QWORD *)(*(_QWORD *)a2 + 16 * v12);
            *v13 = v6;
            v13[1] = v9;
          }
          *(_DWORD *)(a2 + 8) = v12 + 1;
        }
        ++v7;
      }
      ++v2;
    }
    while (v2 != v15);
  }
  return result;
}

llvm::MachineBasicBlock *llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPreheader(uint64_t a1)
{
  llvm::MachineBasicBlock *result;
  llvm::MachineBasicBlock *v2;

  result = (llvm::MachineBasicBlock *)llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPredecessor(a1);
  if (result)
  {
    v2 = result;
    if (llvm::MachineBasicBlock::isLegalToHoistInto(result))
    {
      if (*((_QWORD *)v2 + 11) + 8 == *((_QWORD *)v2 + 12))
        return v2;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

{
  return __ZNK4llvm8LoopBaseINS_17MachineBasicBlockENS_11MachineLoopEE16getLoopPreheaderEv(a1);
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPredecessor(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = **(_QWORD **)(a1 + 32);
  v2 = *(uint64_t **)(v1 + 64);
  v3 = *(uint64_t **)(v1 + 72);
  if (v2 != v3)
  {
    v5 = 0;
    v6 = a1 + 56;
    while (1)
    {
      v7 = *v2;
      v8 = sub_1C477672C(v6, *v2);
      v9 = *(_QWORD *)(a1 + 64);
      if (v9 == *(_QWORD *)(a1 + 56))
        v10 = 76;
      else
        v10 = 72;
      if (v8 == (_QWORD *)(v9 + 8 * *(unsigned int *)(a1 + v10)))
      {
        if (v5 && v5 != v7)
          return 0;
      }
      else
      {
        v7 = v5;
      }
      ++v2;
      v5 = v7;
      if (v2 == v3)
        return v7;
    }
  }
  return 0;
}

{
  return __ZNK4llvm8LoopBaseINS_17MachineBasicBlockENS_11MachineLoopEE18getLoopPredecessorEv(a1);
}

_QWORD **llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopLatches(_QWORD **result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  _QWORD **v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;

  v2 = *result[4];
  v3 = *(uint64_t **)(v2 + 64);
  v4 = *(uint64_t **)(v2 + 72);
  if (v3 != v4)
  {
    v6 = result;
    v7 = (uint64_t)(result + 7);
    do
    {
      v8 = *v3;
      result = (_QWORD **)sub_1C477672C(v7, *v3);
      v9 = v6[8];
      if (v9 == v6[7])
        v10 = 76;
      else
        v10 = 72;
      if (result != &v9[*(unsigned int *)((char *)v6 + v10)])
      {
        v11 = *(unsigned int *)(a2 + 8);
        if (v11 >= *(unsigned int *)(a2 + 12))
        {
          result = (_QWORD **)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v11 + 1, 8);
          v11 = *(unsigned int *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v11) = v8;
        ++*(_DWORD *)(a2 + 8);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  return result;
}

{
  return __ZNK4llvm8LoopBaseINS_17MachineBasicBlockENS_11MachineLoopEE14getLoopLatchesERNS_15SmallVectorImplIPS1_EE(result, a2);
}

void llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopsInPreorder(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[5];

  v10[4] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a2 + 16) = a1;
  v3 = a2 + 16;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000001;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v8 = v10;
  v9 = 0x400000000;
  sub_1C61898C0((unsigned int *)&v8, v4, v4, v5, v5);
  while ((_DWORD)v9)
  {
    v6 = *((_QWORD *)v8 + v9 - 1);
    LODWORD(v9) = v9 - 1;
    sub_1C61898C0((unsigned int *)&v8, *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 8));
    v7 = *(unsigned int *)(a2 + 8);
    if (v7 >= *(unsigned int *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v3, v7 + 1, 8);
      v7 = *(unsigned int *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = v6;
    ++*(_DWORD *)(a2 + 8);
  }
  if (v8 != v10)
    free(v8);
}

void llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopsInPreorder(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  a2[2] = a1;
  *a2 = a2 + 2;
  a2[1] = 0x400000001;
  sub_1C5170440(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)a2);
}

void sub_1C5170440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int i;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[5];

  v9[4] = *MEMORY[0x1E0C80C00];
  v7 = v9;
  v8 = 0x400000000;
  sub_1C61898C0((unsigned int *)&v7, a2, a2, a1, a1);
  for (i = v8; (_DWORD)v8; i = v8)
  {
    v5 = *((_QWORD *)v7 + i - 1);
    LODWORD(v8) = i - 1;
    sub_1C61898C0((unsigned int *)&v7, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 8));
    v6 = *(unsigned int *)(a3 + 8);
    if (v6 >= *(unsigned int *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v6 + 1, 8);
      v6 = *(unsigned int *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v6) = v5;
    ++*(_DWORD *)(a3 + 8);
  }
  if (v7 != v9)
    free(v7);
}

_QWORD *llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::addBlockEntry(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  v6 = a2;
  v2 = *(uint64_t **)(a1 + 40);
  if ((unint64_t)v2 >= *(_QWORD *)(a1 + 48))
  {
    v5 = a1;
    v3 = sub_1C4DFEA3C((void **)(a1 + 32), &v6);
    a1 = v5;
    a2 = v6;
  }
  else
  {
    *v2 = a2;
    v3 = v2 + 1;
  }
  *(_QWORD *)(a1 + 40) = v3;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 56), a2);
}

{
  return __ZN4llvm8LoopBaseINS_17MachineBasicBlockENS_11MachineLoopEE13addBlockEntryEPS1_(a1, a2);
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::replaceChildLoopWith(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)(result + 8);
  v4 = *(_QWORD **)(result + 16);
  if (v3 != v4)
  {
    while ((_QWORD *)*v3 != a2)
    {
      if (++v3 == v4)
      {
        v3 = *(_QWORD **)(result + 16);
        break;
      }
    }
  }
  *v3 = a3;
  *a2 = 0;
  *a3 = result;
  return result;
}

void llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::addChildLoop(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  *a2 = a1;
  v5 = (_QWORD *)a1[2];
  v4 = a1[3];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (_QWORD *)a1[1];
    v8 = v5 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_1C4764EE4();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      v5 = (_QWORD *)a1[1];
    }
    a1[1] = v13;
    a1[2] = v6;
    a1[3] = &v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  a1[2] = v6;
}

_QWORD *llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::removeChildLoop(uint64_t a1, char *__dst)
{
  char *v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  int64_t v8;

  v6 = *(_QWORD **)__dst;
  v4 = __dst + 8;
  v5 = v6;
  v7 = *(char **)(a1 + 16);
  v8 = v7 - v4;
  if (v7 != v4)
    memmove(__dst, v4, v7 - v4);
  *(_QWORD *)(a1 + 16) = &__dst[v8];
  *v5 = 0;
  return v5;
}

_QWORD *llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::removeChildLoop(uint64_t a1, uint64_t a2)
{
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  int64_t v6;

  v4 = *(_QWORD **)(a1 + 8);
  v3 = *(char **)(a1 + 16);
  if (v4 != (_QWORD *)v3)
  {
    while (*v4 != a2)
    {
      if (++v4 == (_QWORD *)v3)
      {
        v4 = *(_QWORD **)(a1 + 16);
        break;
      }
    }
  }
  v5 = (_QWORD *)*v4;
  v6 = v3 - (char *)(v4 + 1);
  if (v3 != (char *)(v4 + 1))
    memmove(v4, v4 + 1, v3 - (char *)(v4 + 1));
  *(_QWORD *)(a1 + 16) = (char *)v4 + v6;
  *v5 = 0;
  return v5;
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::reverseBlock(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(result + 32);
  v3 = *(_QWORD *)(result + 40);
  v4 = v2 + 8 * a2;
  v5 = (_QWORD *)(v3 - 8);
  v6 = v4 == v3 || v4 >= (unint64_t)v5;
  if (!v6)
  {
    v7 = v2 + 8 * a2 + 8;
    do
    {
      v8 = *(_QWORD *)(v7 - 8);
      *(_QWORD *)(v7 - 8) = *v5;
      *v5-- = v8;
      v6 = v7 >= (unint64_t)v5;
      v7 += 8;
    }
    while (!v6);
  }
  return result;
}

void llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::reserveBlocks(uint64_t a1, unsigned int a2)
{
  sub_1C4D98200(a1 + 32, a2);
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::moveToHeader(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  int v4;
  uint64_t v5;

  v2 = *(_QWORD **)(result + 32);
  if (*v2 != a2)
  {
    v3 = 0;
    do
    {
      v4 = v3;
      v5 = v2[v3++];
    }
    while (v5 != a2);
    v2[v4] = *v2;
    **(_QWORD **)(result + 32) = a2;
  }
  return result;
}

_QWORD *llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::removeBlockFromLoop(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  int64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;

  v5 = *(char **)(a1 + 32);
  v4 = *(char **)(a1 + 40);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 40);
        break;
      }
    }
  }
  v6 = v4 - (v5 + 8);
  if (v4 != v5 + 8)
    memmove(v5, v5 + 8, v4 - (v5 + 8));
  *(_QWORD *)(a1 + 40) = &v5[v6];
  result = sub_1C477672C(a1 + 56, a2);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = 72;
  if (v8 == *(_QWORD *)(a1 + 56))
    v9 = 76;
  if (result != (_QWORD *)(v8 + 8 * *(unsigned int *)(a1 + v9)))
  {
    *result = -2;
    ++*(_DWORD *)(a1 + 80);
  }
  return result;
}

{
  return __ZN4llvm8LoopBaseINS_17MachineBasicBlockENS_11MachineLoopEE19removeBlockFromLoopEPS1_(a1, a2);
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::verifyLoopNest(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v11 = 0;
  result = sub_1C4EBC5C8(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a1, &v11);
  if ((result & 1) != 0)
    goto LABEL_7;
  v5 = *(_DWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a2 + 8);
  if (4 * v6 + 4 >= 3 * v5)
  {
    v5 *= 2;
    goto LABEL_12;
  }
  if (v5 + ~v6 - *(_DWORD *)(a2 + 12) <= v5 >> 3)
  {
LABEL_12:
    sub_1C4EBC65C(a2, v5);
    v11 = 0;
    result = sub_1C4EBC5C8(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a1, &v11);
  }
  v7 = v11;
  ++*(_DWORD *)(a2 + 8);
  if (*v7 != -4096)
    --*(_DWORD *)(a2 + 12);
  *v7 = a1;
LABEL_7:
  v9 = *(uint64_t **)(a1 + 8);
  v8 = *(uint64_t **)(a1 + 16);
  while (v9 != v8)
  {
    v10 = *v9++;
    result = llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::verifyLoopNest(v10, a2);
  }
  return result;
}

{
  return __ZNK4llvm8LoopBaseINS_17MachineBasicBlockENS_11MachineLoopEE14verifyLoopNestEPNS_8DenseSetIPKS2_NS_12DenseMapInfoIS6_vEEEE(a1, a2);
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::isAnnotatedParallel()
{
  return 0;
}

double llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::LoopBase(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 88;
  *(_QWORD *)(a1 + 64) = a1 + 88;
  *(_QWORD *)&result = 8;
  *(_QWORD *)(a1 + 72) = 8;
  *(_DWORD *)(a1 + 80) = 0;
  return result;
}

{
  double result;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 88;
  *(_QWORD *)(a1 + 64) = a1 + 88;
  *(_QWORD *)&result = 8;
  *(_QWORD *)(a1 + 72) = 8;
  *(_DWORD *)(a1 + 80) = 0;
  return result;
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::LoopBase(uint64_t a1, uint64_t a2)
{
  llvm::SmallPtrSetImplBase *v4;
  uint64_t *v5;

  *(_QWORD *)(a1 + 56) = a1 + 88;
  v4 = (llvm::SmallPtrSetImplBase *)(a1 + 56);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 64) = a1 + 88;
  *(_QWORD *)(a1 + 72) = 8;
  *(_DWORD *)(a1 + 80) = 0;
  v5 = (uint64_t *)operator new(8uLL);
  *(_QWORD *)(a1 + 32) = v5;
  *v5++ = a2;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v5;
  sub_1C4774094(v4, a2);
  return a1;
}

{
  return __ZN4llvm8LoopBaseINS_17MachineBasicBlockENS_11MachineLoopEEC2EPS1_(a1, a2);
}

uint64_t llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::~LoopBase(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  int v13;
  unsigned int v14;
  void *v15;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v9 = *v2++;
      llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::~LoopBase(v9);
    }
    while (v2 != v3);
    v2 = *(uint64_t **)(a1 + 8);
  }
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(a1 + 64);
  if (v4 == *(void **)(a1 + 56))
    goto LABEL_3;
  v10 = *(unsigned int *)(a1 + 72);
  if (v10 < 0x21 || 4 * (*(_DWORD *)(a1 + 76) - *(_DWORD *)(a1 + 80)) >= v10)
  {
    memset(v4, 255, 8 * v10);
LABEL_3:
    *(_DWORD *)(a1 + 76) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    goto LABEL_4;
  }
  free(v4);
  v12 = *(_DWORD *)(a1 + 76) - *(_DWORD *)(a1 + 80);
  v13 = 1 << (33 - __clz(v12 - 1));
  *(_DWORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  if (v12 <= 0x10)
    v14 = 32;
  else
    v14 = v13;
  *(_DWORD *)(a1 + 72) = v14;
  v15 = malloc_type_malloc(8 * v14, 0x4065EBACuLL);
  if (!v15)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *(_QWORD *)(a1 + 64) = v15;
  memset(v15, 255, 8 * *(unsigned int *)(a1 + 72));
LABEL_4:
  *(_QWORD *)a1 = 0;
  v5 = *(void **)(a1 + 64);
  if (v5 != *(void **)(a1 + 56))
    free(v5);
  v6 = *(void **)(a1 + 32);
  if (v6)
  {
    *(_QWORD *)(a1 + 40) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 8);
  if (v7)
  {
    *(_QWORD *)(a1 + 16) = v7;
    operator delete(v7);
  }
  return a1;
}

{
  return __ZN4llvm8LoopBaseINS_17MachineBasicBlockENS_11MachineLoopEED2Ev(a1);
}

_QWORD *llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::~LoopInfoBase(_QWORD *a1)
{
  void *v2;

  llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::releaseMemory((uint64_t)a1);
  sub_1C4926AE8((uint64_t)(a1 + 6));
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](*a1, 8);
  return a1;
}

{
  return __ZN4llvm12LoopInfoBaseINS_17MachineBasicBlockENS_11MachineLoopEED2Ev(a1);
}

uint64_t llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::releaseMemory(uint64_t a1)
{
  int v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 || *(_DWORD *)(a1 + 12))
  {
    v7 = *(unsigned int *)(a1 + 16);
    if (v7 <= 4 * v2 || v7 < 0x41)
    {
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD **)a1;
        v9 = 16 * v7;
        do
        {
          *v8 = -4096;
          v8 += 2;
          v9 -= 16;
        }
        while (v9);
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      sub_1C476B2A4((_DWORD *)a1);
    }
  }
  v3 = *(uint64_t **)(a1 + 24);
  v4 = *(uint64_t **)(a1 + 32);
  if (v3 != v4)
  {
    do
    {
      v6 = *v3++;
      llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::~LoopBase(v6);
    }
    while (v3 != v4);
    v3 = *(uint64_t **)(a1 + 24);
  }
  *(_QWORD *)(a1 + 32) = v3;
  return sub_1C4926A50(a1 + 48);
}

{
  return __ZN4llvm12LoopInfoBaseINS_17MachineBasicBlockENS_11MachineLoopEE13releaseMemoryEv(a1);
}

uint64_t llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::LoopInfoBase(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v4;
  v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  sub_1C4E854AC(a1 + 48, a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a2 + 24);
  return a1;
}

{
  return __ZN4llvm12LoopInfoBaseINS_17MachineBasicBlockENS_11MachineLoopEEC2EOS3_(a1, a2);
}

uint64_t llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t **v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;

  MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v5 = (uint64_t **)(a1 + 24);
  v4 = *(uint64_t **)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v6;
  v7 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v7;
  v8 = *(uint64_t **)(a1 + 32);
  if (v4 != v8)
  {
    do
    {
      v9 = *v4++;
      llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::~LoopBase(v9);
    }
    while (v4 != v8);
    v4 = *v5;
  }
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
    *v5 = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  sub_1C4E85668(a1 + 48, a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::begin(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::end(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::rbegin(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::rend(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

BOOL llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::empty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 32);
}

void llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopsInPreorder(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *__src;
  uint64_t v12;
  _QWORD v13[4];
  void *v14;
  uint64_t v15;
  _QWORD v16[5];

  v16[4] = *MEMORY[0x1E0C80C00];
  v3 = a2 + 16;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  v14 = v16;
  v15 = 0x400000000;
  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 != v5)
  {
    do
    {
      v6 = *(_QWORD *)(v4 - 8);
      v4 -= 8;
      __src = v13;
      v13[0] = v6;
      v12 = 0x400000001;
      sub_1C5170440(*(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)&__src);
      v7 = __src;
      v8 = v12;
      v9 = *(unsigned int *)(a2 + 8);
      v10 = v9 + v12;
      if (v10 > *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v3, v10, 8);
        LODWORD(v9) = *(_DWORD *)(a2 + 8);
      }
      if ((_DWORD)v8)
      {
        memcpy((void *)(*(_QWORD *)a2 + 8 * v9), v7, 8 * v8);
        LODWORD(v9) = *(_DWORD *)(a2 + 8);
      }
      *(_DWORD *)(a2 + 8) = v9 + v8;
      if (__src != v13)
        free(__src);
    }
    while (v4 != v5);
    if (v14 != v16)
      free(v14);
  }
}

void llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopsInReverseSiblingPreorder(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  v3 = a2 + 16;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  v11 = v13;
  v12 = 0x400000000;
  v4 = *(uint64_t **)(a1 + 24);
  v5 = *(uint64_t **)(a1 + 32);
  if (v4 != v5)
  {
    do
    {
      v6 = *v4;
      if (HIDWORD(v12))
      {
        v7 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v11, (uint64_t)v13, 1uLL, 8);
        v7 = v12;
      }
      *((_QWORD *)v11 + v7) = v6;
      v8 = v12 + 1;
      do
      {
        v9 = *((_QWORD *)v11 + v8 - 1);
        LODWORD(v12) = v8 - 1;
        sub_1C499C3FC((unsigned int *)&v11, *(char **)(v9 + 8), *(char **)(v9 + 16));
        v10 = *(unsigned int *)(a2 + 8);
        if (v10 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v3, v10 + 1, 8);
          v10 = *(unsigned int *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v10) = v9;
        ++*(_DWORD *)(a2 + 8);
        v8 = v12;
      }
      while ((_DWORD)v12);
      ++v4;
    }
    while (v4 != v5);
    if (v11 != v13)
      free(v11);
  }
}

uint64_t llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopFor(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *((_DWORD *)a1 + 4);
  if (v2)
  {
    v3 = *a1;
    v4 = v2 - 1;
    v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = *(_QWORD *)(*a1 + 16 * v5);
    if (v6 == a2)
      return *(_QWORD *)(v3 + 16 * v5 + 8);
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v5 + v7++;
      v5 = v8 & v4;
      v6 = *(_QWORD *)(v3 + 16 * v5);
      if (v6 == a2)
        return *(_QWORD *)(v3 + 16 * v5 + 8);
    }
  }
  return 0;
}

uint64_t llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::operator[](uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *((_DWORD *)a1 + 4);
  if (v2)
  {
    v3 = *a1;
    v4 = v2 - 1;
    v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = *(_QWORD *)(*a1 + 16 * v5);
    if (v6 == a2)
      return *(_QWORD *)(v3 + 16 * v5 + 8);
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v5 + v7++;
      v5 = v8 & v4;
      v6 = *(_QWORD *)(v3 + 16 * v5);
      if (v6 == a2)
        return *(_QWORD *)(v3 + 16 * v5 + 8);
    }
  }
  return 0;
}

uint64_t llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopDepth(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  _QWORD *v9;
  uint64_t result;

  v2 = *((_DWORD *)a1 + 4);
  if (!v2)
    return 0;
  v3 = *a1;
  v4 = v2 - 1;
  v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v6 = *(_QWORD *)(*a1 + 16 * v5);
  if (v6 != a2)
  {
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v5 + v7++;
      v5 = v8 & v4;
      v6 = *(_QWORD *)(v3 + 16 * v5);
      if (v6 == a2)
        goto LABEL_6;
    }
    return 0;
  }
LABEL_6:
  v9 = *(_QWORD **)(v3 + 16 * v5 + 8);
  if (!v9)
    return 0;
  LODWORD(result) = 0;
  do
  {
    v9 = (_QWORD *)*v9;
    result = (result + 1);
  }
  while (v9);
  return result;
}

BOOL llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::isLoopHeader(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  v2 = *((_DWORD *)a1 + 4);
  if (v2)
  {
    v3 = *a1;
    v4 = v2 - 1;
    v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = *(_QWORD *)(*a1 + 16 * v5);
    if (v6 == a2)
    {
LABEL_6:
      v9 = *(_QWORD *)(v3 + 16 * v5 + 8);
      if (v9)
        return **(_QWORD **)(v9 + 32) == a2;
    }
    else
    {
      v7 = 1;
      while (v6 != -4096)
      {
        v8 = v5 + v7++;
        v5 = v8 & v4;
        v6 = *(_QWORD *)(v3 + 16 * v5);
        if (v6 == a2)
          goto LABEL_6;
      }
    }
  }
  return 0;
}

uint64_t llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getTopLevelLoops(uint64_t a1)
{
  return a1 + 24;
}

uint64_t llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getTopLevelLoopsVector(uint64_t a1)
{
  return a1 + 24;
}

uint64_t llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::removeLoop(uint64_t a1, char *__dst)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;

  v6 = *(_QWORD *)__dst;
  v4 = __dst + 8;
  v5 = v6;
  v7 = *(char **)(a1 + 32);
  v8 = v7 - v4;
  if (v7 != v4)
    memmove(__dst, v4, v7 - v4);
  *(_QWORD *)(a1 + 32) = &__dst[v8];
  return v5;
}

int32x2_t llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::changeLoopFor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  _QWORD *v13;
  int32x2_t result;
  uint64_t v16;
  _QWORD *v17;

  v16 = a2;
  if (a3)
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (v4)
    {
      v5 = v4 - 1;
      v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
      v8 = *v7;
      if (*v7 == a2)
      {
LABEL_17:
        v7[1] = a3;
        return result;
      }
      v9 = 0;
      v10 = 1;
      while (v8 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v8 == -8192;
        if (v11)
          v9 = v7;
        v12 = v6 + v10++;
        v6 = v12 & v5;
        v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v12 & v5));
        v8 = *v7;
        if (*v7 == a2)
          goto LABEL_17;
      }
      if (v9)
        v13 = v9;
      else
        v13 = v7;
    }
    else
    {
      v13 = 0;
    }
    v7 = sub_1C5173734(a1, &v16, v13);
    *v7 = v16;
    v7[1] = 0;
    goto LABEL_17;
  }
  v17 = 0;
  if (sub_1C48BF0C0((uint64_t *)a1, &v16, &v17))
  {
    *v17 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

uint64_t llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::changeTopLevelLoop(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)(result + 24);
  v4 = *(_QWORD **)(result + 32);
  if (v3 != v4)
  {
    while (*v3 != a2)
    {
      if (++v3 == v4)
      {
        v3 = *(_QWORD **)(result + 32);
        break;
      }
    }
  }
  *v3 = a3;
  return result;
}

void llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::addTopLevelLoop(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = (_QWORD *)a1[4];
  v4 = a1[5];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (_QWORD *)a1[3];
    v8 = v5 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_1C4764EE4();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      v5 = (_QWORD *)a1[3];
    }
    a1[3] = v13;
    a1[4] = v6;
    a1[5] = &v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  a1[4] = v6;
}

int32x2_t llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::removeBlock(int32x2_t *a1, uint64_t a2)
{
  int32x2_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  _QWORD *i;
  int32x2_t result;

  v4 = *a1;
  v5 = a1[2].u32[0];
  if ((_DWORD)v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = (uint64_t *)(*(_QWORD *)&v4 + 16 * v6);
    v8 = *v7;
    if (*v7 == a2)
      goto LABEL_8;
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(_QWORD *)(*(_QWORD *)&v4 + 16 * v6);
      if (v8 == a2)
      {
        v7 = (uint64_t *)(*(_QWORD *)&v4 + 16 * v6);
        goto LABEL_8;
      }
    }
  }
  v7 = (uint64_t *)(*(_QWORD *)&v4 + 16 * v5);
LABEL_8:
  if (v7 != (uint64_t *)(*(_QWORD *)&v4 + 16 * v5))
  {
    for (i = (_QWORD *)v7[1]; i; i = (_QWORD *)*i)
      llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::removeBlockFromLoop((uint64_t)i, a2);
    *v7 = -8192;
    result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
    a1[1] = result;
  }
  return result;
}

{
  return __ZN4llvm12LoopInfoBaseINS_17MachineBasicBlockENS_11MachineLoopEE11removeBlockEPS1_(a1, a2);
}

BOOL llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::isNotAlreadyContainedIn(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _BOOL8 result;

  if (!a1)
    return 1;
  v2 = a1;
  do
  {
    result = v2 != a2;
    if (v2 == a2)
      break;
    v2 = (_QWORD *)*v2;
  }
  while (v2);
  return result;
}

void llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::analyze(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;
  _BYTE *v18;
  const void *v19;
  void *v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  char *v35;
  unsigned int v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  char *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  int v69;
  int v70;
  unsigned int v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  int v75;
  BOOL v76;
  unsigned int v77;
  _QWORD *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  size_t v103;
  char *v104;
  _BYTE *v105;
  _BYTE *v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  _BYTE *v114;
  unsigned int v115;
  _BYTE *v116;
  _BYTE *v117;
  _BYTE *v118;
  _BYTE *v119;
  unsigned int v120;
  unsigned int v121;
  _QWORD *v122;
  _BYTE *v123;
  const void *v124;
  void *v125;
  unsigned int v126;
  unsigned int v127;
  _QWORD *v128;
  _QWORD *v129;
  int v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  _QWORD *v139;
  _QWORD *v140;
  unint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  unint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  _BYTE *v147;
  _QWORD *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  _BYTE *v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  BOOL v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t *v179;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t v183;
  _QWORD *v184;
  _BYTE *v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  uint64_t *v189;
  uint64_t v190;
  unsigned int v191;
  unsigned int v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unsigned int v197;
  _QWORD *v198;
  unsigned int v199;
  _BYTE *v200;
  _BYTE *v201;
  _BYTE *v202;
  uint64_t v203;
  _BYTE *v204;
  _BYTE *v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  int v210;
  int v211;
  _BYTE v212[64];
  void *v213;
  uint64_t v214;
  _BYTE v215[128];
  _BYTE *v216;
  _BYTE *v217;
  unsigned int v218;
  unsigned int v219;
  int v220;
  _BYTE v221[64];
  void *v222;
  uint64_t v223;
  _BYTE v224[128];
  void *v225;
  void *v226;
  uint64_t v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  void *v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  void *v243;
  void *__src;
  uint64_t v245;
  int v246;
  _BYTE v247[64];
  void *v248;
  uint64_t v249;
  _BYTE v250[128];
  _BYTE *v251;
  void *v252;
  unint64_t v253;
  int v254;
  _BYTE v255[64];
  void *v256;
  uint64_t v257;
  _BYTE v258[128];
  _BYTE *v259;
  void *v260;
  unint64_t v261;
  int v262;
  _BYTE v263[64];
  void *v264;
  uint64_t v265;
  _QWORD v266[18];

  v2 = a2;
  v266[16] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 48);
  v243 = v247;
  __src = v247;
  v245 = 8;
  v246 = 0;
  v248 = v250;
  v249 = 0x800000000;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v243, v4);
  v5 = *(_QWORD *)(v4 + 24);
  v6 = v249;
  if (v249 >= HIDWORD(v249))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v248, (uint64_t)v250, v249 + 1, 16);
    v6 = v249;
  }
  v7 = (uint64_t *)((char *)v248 + 16 * v6);
  *v7 = v4;
  v7[1] = v5;
  LODWORD(v249) = v249 + 1;
  sub_1C4EB6F48(&v243);
  v232 = 0;
  v234 = 0u;
  v242 = 0;
  v241 = 0u;
  v240 = 0u;
  v239 = 0u;
  v238 = 0u;
  v237 = 0u;
  v236 = 0u;
  v235 = 0u;
  v231 = 0u;
  v230 = 0u;
  v229 = 0u;
  v228 = 0u;
  v225 = (char *)&v228 + 8;
  v226 = (char *)&v228 + 8;
  v227 = 8;
  v233 = (char *)&v234 + 8;
  DWORD1(v234) = 8;
  v259 = v263;
  if (__src == v243)
  {
    v260 = v263;
    v8 = HIDWORD(v245);
    if (HIDWORD(v245))
      memmove(v263, __src, 8 * HIDWORD(v245));
  }
  else
  {
    v260 = __src;
    __src = v243;
    v8 = HIDWORD(v245);
  }
  v261 = __PAIR64__(v8, v245);
  v262 = v246;
  v245 = 8;
  v246 = 0;
  v264 = v266;
  v265 = 0x800000000;
  v203 = a1;
  v193 = (uint64_t *)v4;
  if ((_DWORD)v249)
  {
    sub_1C486F510((uint64_t)&v264, (uint64_t)&v248);
    v251 = v255;
    v9 = HIDWORD(v227);
    if (v226 == v225)
    {
      v252 = v255;
    }
    else
    {
      v252 = v226;
      v226 = v225;
    }
  }
  else
  {
    v9 = 0;
    v251 = v255;
    v252 = v255;
  }
  v253 = __PAIR64__(v9, v227);
  v254 = v228;
  v227 = 8;
  LODWORD(v228) = 0;
  v256 = v258;
  v257 = 0x800000000;
  if ((_DWORD)v234)
    sub_1C486F510((uint64_t)&v256, (uint64_t)&v233);
  if (v260 == v259)
  {
    v204 = v212;
    v10 = HIDWORD(v261);
    if (HIDWORD(v261))
      memmove(v212, v260, 8 * HIDWORD(v261));
  }
  else
  {
    v204 = v260;
    v260 = v259;
    v10 = HIDWORD(v261);
  }
  v206 = v261;
  v208 = v10;
  v210 = v262;
  v261 = 8;
  v262 = 0;
  v213 = v215;
  v214 = 0x800000000;
  if ((_DWORD)v265)
    sub_1C486F510((uint64_t)&v213, (uint64_t)&v264);
  v216 = v221;
  if (v252 == v251)
  {
    v217 = v221;
    v11 = HIDWORD(v253);
    if (HIDWORD(v253))
      memmove(v221, v252, 8 * HIDWORD(v253));
  }
  else
  {
    v217 = v252;
    v252 = v251;
    v11 = HIDWORD(v253);
  }
  v218 = v253;
  v219 = v11;
  v220 = v254;
  v253 = 8;
  v254 = 0;
  v222 = v224;
  v223 = 0x800000000;
  if ((_DWORD)v257)
    sub_1C486F510((uint64_t)&v222, (uint64_t)&v256);
  if (v256 != v258)
    free(v256);
  v12 = a1;
  if (v252 != v251)
    free(v252);
  if (v264 != v266)
    free(v264);
  if (v260 != v259)
    free(v260);
  if (v233 != (char *)&v234 + 8)
    free(v233);
  if (v226 != v225)
    free(v226);
  if (v248 != v250)
    free(v248);
  if (__src != v243)
    free(__src);
  v13 = v263;
  v259 = v263;
  v14 = v204;
  v195 = v2;
  if (v204 == v212)
  {
    v260 = v263;
    v15 = v204;
  }
  else
  {
    v13 = malloc_type_malloc(8 * v206, 0x4065EBACuLL);
    if (!v13)
    {
      if (v206)
        goto LABEL_398;
      v13 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      v12 = a1;
      if (!v13)
        goto LABEL_398;
    }
    v260 = v13;
    v15 = v212;
    v14 = v204;
  }
  v16 = v208;
  LODWORD(v261) = v206;
  if (v14 == v15)
    v17 = v208;
  else
    v17 = v206;
  if (v17)
  {
    memmove(v13, v14, 8 * v17);
    v16 = v208;
  }
  HIDWORD(v261) = v16;
  v262 = v210;
  v264 = v266;
  v265 = 0x800000000;
  if ((_DWORD)v214)
    sub_1C49DA288((uint64_t)&v264, (uint64_t)&v213);
  v18 = v255;
  v251 = v255;
  v19 = v217;
  if (v217 == v216)
  {
    v252 = v255;
    v20 = v217;
  }
  else
  {
    v191 = v218;
    v18 = malloc_type_malloc(8 * v218, 0x4065EBACuLL);
    if (!v18)
    {
      if (v191)
        goto LABEL_398;
      v18 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      v12 = a1;
      if (!v18)
        goto LABEL_398;
    }
    v252 = v18;
    v20 = v216;
    v19 = v217;
  }
  LODWORD(v253) = v218;
  v21 = v219;
  if (v19 == v20)
    v22 = v219;
  else
    v22 = v218;
  if (v22)
  {
    memmove(v18, v19, 8 * v22);
    v21 = v219;
  }
  HIDWORD(v253) = v21;
  v254 = v220;
  v256 = v258;
  v257 = 0x800000000;
  if ((_DWORD)v223)
    sub_1C49DA288((uint64_t)&v256, (uint64_t)&v222);
  v194 = v12 + 48;
  while (1)
  {
    if ((_DWORD)v265 != (_DWORD)v257)
      goto LABEL_67;
    if (!(_DWORD)v265)
      break;
    v23 = v256;
    v24 = v264;
    while (*v24 == *v23 && v24[1] == v23[1])
    {
      v24 += 2;
      v23 += 2;
      if (v24 == (_QWORD *)((char *)v264 + 16 * v265))
        goto LABEL_188;
    }
LABEL_67:
    v26 = **((_QWORD **)v264 + 2 * v265 - 2);
    v243 = &v245;
    __src = (void *)0x400000000;
    v27 = *(uint64_t **)(v26 + 64);
    v28 = *(uint64_t **)(v26 + 72);
    if (v27 != v28)
    {
      do
      {
        v29 = *v27;
        if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(v2, v26, *v27)
          && llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::isReachableFromEntry(v2, v29))
        {
          v30 = __src;
          if (__src >= (unint64_t)HIDWORD(__src))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v243, (uint64_t)&v245, __src + 1, 8);
            v30 = __src;
          }
          *((_QWORD *)v243 + v30) = v29;
          LODWORD(__src) = (_DWORD)__src + 1;
        }
        ++v27;
      }
      while (v27 != v28);
      if ((_DWORD)__src)
      {
        v31 = sub_1C484358C(v194, 152, 3);
        llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::LoopBase(v31, v26);
        v32 = __src;
        if ((_DWORD)__src)
        {
          v33 = v243;
          v34 = (char *)operator new(8 * __src);
          v35 = &v34[8 * v32];
          memmove(v34, v33, 8 * v32);
          v36 = 0;
          v197 = 0;
          v37 = v35;
          v196 = v31;
          while (1)
          {
            v38 = v37 - 8;
            v39 = *((_QWORD *)v37 - 1);
            v40 = *(_DWORD *)(v12 + 16);
            v41 = v39 >> 4;
            if (!v40)
              goto LABEL_116;
            v42 = *(_QWORD *)v12;
            v43 = v40 - 1;
            v44 = (v41 ^ (v39 >> 9)) & (v40 - 1);
            v45 = *(_QWORD *)(*(_QWORD *)v12 + 16 * v44);
            if (v39 != v45)
              break;
LABEL_82:
            v48 = *(unint64_t **)(v42 + 16 * v44 + 8);
            if (!v48)
              goto LABEL_116;
            do
            {
              v49 = v48;
              v48 = (unint64_t *)*v48;
            }
            while (v48);
            if (v49 != (unint64_t *)v31)
            {
              *v49 = v31;
              ++v197;
              v50 = v49[4];
              v199 = v36 + ((v49[6] - v50) >> 3);
              v51 = *(uint64_t **)(*(_QWORD *)v50 + 64);
              v52 = *(uint64_t **)(*(_QWORD *)v50 + 72);
              if (v51 == v52)
                goto LABEL_145;
              v53 = v38;
              while (2)
              {
                v54 = *v51;
                v55 = *(_DWORD *)(v12 + 16);
                if (v55)
                {
                  v56 = *(_QWORD *)v12;
                  v57 = v55 - 1;
                  v58 = ((v54 >> 4) ^ (v54 >> 9)) & (v55 - 1);
                  v59 = *(_QWORD *)(*(_QWORD *)v12 + 16 * v58);
                  if (v54 != v59)
                  {
                    v60 = 1;
                    while (v59 != -4096)
                    {
                      v61 = v58 + v60++;
                      v58 = v61 & v57;
                      v59 = *(_QWORD *)(v56 + 16 * v58);
                      if (v54 == v59)
                        goto LABEL_92;
                    }
                    goto LABEL_93;
                  }
LABEL_92:
                  v62 = *(unint64_t **)(v56 + 16 * v58 + 8);
                }
                else
                {
LABEL_93:
                  v62 = 0;
                }
                if (v62 != v49)
                {
                  if (v53 >= v35)
                  {
                    v63 = (v53 - v34) >> 3;
                    v64 = v63 + 1;
                    if ((unint64_t)(v63 + 1) >> 61)
                      goto LABEL_385;
                    if ((v35 - v34) >> 2 > v64)
                      v64 = (v35 - v34) >> 2;
                    if ((unint64_t)(v35 - v34) >= 0x7FFFFFFFFFFFFFF8)
                      v65 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v65 = v64;
                    if (v65)
                    {
                      if (v65 >> 61)
                        goto LABEL_386;
                      v66 = (char *)operator new(8 * v65);
                    }
                    else
                    {
                      v66 = 0;
                    }
                    v67 = &v66[8 * v63];
                    *(_QWORD *)v67 = v54;
                    v38 = v67 + 8;
                    while (v53 != v34)
                    {
                      v68 = *((_QWORD *)v53 - 1);
                      v53 -= 8;
                      *((_QWORD *)v67 - 1) = v68;
                      v67 -= 8;
                    }
                    v35 = &v66[8 * v65];
                    if (v34)
                      operator delete(v34);
                    v34 = v67;
                    v53 = v38;
                    v12 = v203;
                  }
                  else
                  {
                    *(_QWORD *)v53 = v54;
                    v53 += 8;
                    v38 = v53;
                  }
                }
                if (++v51 == v52)
                {
                  v37 = v38;
                  v2 = v195;
                  goto LABEL_115;
                }
                continue;
              }
            }
LABEL_144:
            v37 = v38;
LABEL_172:
            if (v34 == v37)
              goto LABEL_176;
          }
          v46 = 1;
          while (v45 != -4096)
          {
            v47 = v44 + v46++;
            v44 = v47 & v43;
            v45 = *(_QWORD *)(v42 + 16 * v44);
            if (v39 == v45)
              goto LABEL_82;
          }
LABEL_116:
          if (!llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::isReachableFromEntry(v2, v39))
            goto LABEL_144;
          v225 = (void *)v39;
          v69 = *(_DWORD *)(v12 + 16);
          if (v69)
          {
            v70 = v69 - 1;
            v71 = v70 & (v41 ^ (v39 >> 9));
            v72 = (_QWORD *)(*(_QWORD *)v12 + 16 * v71);
            v73 = *v72;
            if (*v72 != v39)
            {
              v74 = 0;
              v75 = 1;
              while (v73 != -4096)
              {
                if (v74)
                  v76 = 0;
                else
                  v76 = v73 == -8192;
                if (v76)
                  v74 = v72;
                v77 = v71 + v75++;
                v71 = v77 & v70;
                v72 = (_QWORD *)(*(_QWORD *)v12 + 16 * v71);
                v73 = *v72;
                if (*v72 == v39)
                  goto LABEL_132;
              }
              if (v74)
                v78 = v74;
              else
                v78 = v72;
LABEL_131:
              v72 = sub_1C5173734(v12, (uint64_t *)&v225, v78);
              *v72 = v225;
              v72[1] = 0;
            }
LABEL_132:
            v72[1] = v31;
            ++v36;
            if (v39 != **(_QWORD **)(v31 + 32))
            {
              v199 = v36;
              v80 = *(char **)(v39 + 64);
              v79 = *(char **)(v39 + 72);
              if (v79 - v80 >= 1)
              {
                v81 = (v79 - v80) >> 3;
                v82 = v38 - v34;
                v83 = &v34[(v38 - v34) & 0xFFFFFFFFFFFFFFF8];
                if (v81 > (v35 - v38) >> 3)
                {
                  v84 = v82 >> 3;
                  v85 = v81 + (v82 >> 3);
                  if (v85 >> 61)
                    goto LABEL_385;
                  if ((v35 - v34) >> 2 > v85)
                    v85 = (v35 - v34) >> 2;
                  if ((unint64_t)(v35 - v34) >= 0x7FFFFFFFFFFFFFF8)
                    v86 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v86 = v85;
                  if (v86)
                  {
                    if (v86 >> 61)
                      goto LABEL_386;
                    v87 = (char *)operator new(8 * v86);
                    v83 = &v34[(v38 - v34) & 0xFFFFFFFFFFFFFFF8];
                  }
                  else
                  {
                    v87 = 0;
                  }
                  v97 = &v87[8 * v84];
                  v98 = &v97[8 * v81];
                  v99 = 8 * v81;
                  v100 = v97;
                  do
                  {
                    v101 = *(_QWORD *)v80;
                    v80 += 8;
                    *(_QWORD *)v100 = v101;
                    v100 += 8;
                    v99 -= 8;
                  }
                  while (v99);
                  v31 = v196;
                  if ((unint64_t)v82 >= 8)
                  {
                    v102 = 8 * v84;
                    do
                    {
                      *(_QWORD *)&v87[v102 - 8] = *(_QWORD *)&v34[v102 - 8];
                      v102 -= 8;
                    }
                    while (v102);
                    v97 = v87;
                  }
                  v103 = v38 - v83;
                  if (v38 != v83)
                  {
                    v104 = v98;
                    memmove(v98, v83, v103);
                    v98 = v104;
                  }
                  v35 = &v87[8 * v86];
                  v37 = &v98[v103];
                  v2 = v195;
                  if (v34)
                    operator delete(v34);
                  v34 = v97;
                  goto LABEL_171;
                }
                v88 = v38 - v83;
                v89 = (v38 - v83) >> 3;
                if (v89 >= v81)
                {
                  v90 = &v80[8 * v81];
                  v92 = v38;
                }
                else
                {
                  v90 = &v80[8 * v89];
                  v91 = v79 - v90;
                  if (v79 != v90)
                  {
                    memmove(v38, &v80[8 * v89], v79 - v90);
                    v83 = &v34[(v38 - v34) & 0xFFFFFFFFFFFFFFF8];
                  }
                  v92 = &v38[v91];
                  if (v88 < 1)
                  {
                    v37 = &v38[v91];
LABEL_115:
                    v31 = v196;
                    goto LABEL_171;
                  }
                }
                v93 = &v92[-8 * v81];
                v37 = v92;
                while (v93 < v38)
                {
                  v94 = *(_QWORD *)v93;
                  v93 += 8;
                  *(_QWORD *)v37 = v94;
                  v37 += 8;
                }
                v95 = &v83[8 * v81];
                if (v92 != v95)
                {
                  v96 = v83;
                  memmove(&v92[-8 * ((v92 - v95) >> 3)], v83, v92 - v95);
                  v83 = v96;
                }
                v31 = v196;
                if (v90 != v80)
                  memmove(v83, v80, v90 - v80);
LABEL_171:
                v36 = v199;
                goto LABEL_172;
              }
LABEL_145:
              v37 = v38;
              goto LABEL_171;
            }
            goto LABEL_144;
          }
          v78 = 0;
          goto LABEL_131;
        }
        v37 = 0;
        v197 = 0;
        v36 = 0;
LABEL_176:
        v105 = *(_BYTE **)(v31 + 8);
        if (v197 > (unint64_t)((uint64_t)(*(_QWORD *)(v31 + 24) - (_QWORD)v105) >> 3))
        {
          v106 = *(_BYTE **)(v31 + 16);
          v107 = (char *)operator new(8 * v197);
          v108 = &v107[(v106 - v105) & 0xFFFFFFFFFFFFFFF8];
          v109 = v108;
          if (v106 != v105)
          {
            v109 = &v107[(v106 - v105) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v110 = *((_QWORD *)v106 - 1);
              v106 -= 8;
              *((_QWORD *)v109 - 1) = v110;
              v109 -= 8;
            }
            while (v106 != v105);
          }
          *(_QWORD *)(v31 + 8) = v109;
          *(_QWORD *)(v31 + 16) = v108;
          *(_QWORD *)(v31 + 24) = &v107[8 * v197];
          if (v105)
            operator delete(v105);
        }
        sub_1C4D98200(v31 + 32, v36);
        if (v37)
          operator delete(v37);
      }
    }
    if (v243 != &v245)
      free(v243);
    LODWORD(v265) = v265 - 1;
    if ((_DWORD)v265)
      sub_1C4EB6F48(&v259);
  }
LABEL_188:
  if (v256 != v258)
    free(v256);
  if (v252 != v251)
    free(v252);
  if (v264 != v266)
    free(v264);
  if (v260 != v259)
    free(v260);
  if (v222 != v224)
    free(v222);
  if (v217 != v216)
    free(v217);
  if (v213 != v215)
    free(v213);
  if (v204 != v212)
    free(v204);
  sub_1C486F76C((uint64_t)&v243, *v193);
  v232 = 0;
  v234 = 0u;
  v242 = 0;
  v241 = 0u;
  v240 = 0u;
  v239 = 0u;
  v238 = 0u;
  v237 = 0u;
  v236 = 0u;
  v235 = 0u;
  v231 = 0u;
  v230 = 0u;
  v229 = 0u;
  v228 = 0u;
  v225 = (char *)&v228 + 8;
  v226 = (char *)&v228 + 8;
  v227 = 8;
  v233 = (char *)&v234 + 8;
  DWORD1(v234) = 8;
  v259 = v263;
  if (__src == v243)
  {
    v260 = v263;
    v111 = HIDWORD(v245);
    if (HIDWORD(v245))
      memmove(v263, __src, 8 * HIDWORD(v245));
  }
  else
  {
    v260 = __src;
    __src = v243;
    v111 = HIDWORD(v245);
  }
  v261 = __PAIR64__(v111, v245);
  v262 = v246;
  v245 = 8;
  v246 = 0;
  v264 = v266;
  v265 = 0x800000000;
  if ((_DWORD)v249)
  {
    sub_1C486F510((uint64_t)&v264, (uint64_t)&v248);
    v251 = v255;
    v112 = HIDWORD(v227);
    if (v226 == v225)
    {
      v252 = v255;
      if (HIDWORD(v227))
        memmove(v255, v226, 8 * HIDWORD(v227));
    }
    else
    {
      v252 = v226;
      v226 = v225;
    }
  }
  else
  {
    v112 = 0;
    v251 = v255;
    v252 = v255;
  }
  v253 = __PAIR64__(v112, v227);
  v254 = v228;
  v227 = 8;
  LODWORD(v228) = 0;
  v256 = v258;
  v257 = 0x800000000;
  if ((_DWORD)v234)
    sub_1C486F510((uint64_t)&v256, (uint64_t)&v233);
  if (v260 == v259)
  {
    v205 = v212;
    v113 = HIDWORD(v261);
    if (HIDWORD(v261))
      memmove(v212, v260, 8 * HIDWORD(v261));
  }
  else
  {
    v205 = v260;
    v260 = v259;
    v113 = HIDWORD(v261);
  }
  v207 = v261;
  v209 = v113;
  v211 = v262;
  v261 = 8;
  v262 = 0;
  v114 = v215;
  v213 = v215;
  v214 = 0x800000000;
  if ((_DWORD)v265)
    sub_1C486F510((uint64_t)&v213, (uint64_t)&v264);
  v216 = v221;
  if (v252 == v251)
  {
    v217 = v221;
    v115 = HIDWORD(v253);
    if (HIDWORD(v253))
      memmove(v221, v252, 8 * HIDWORD(v253));
  }
  else
  {
    v217 = v252;
    v252 = v251;
    v115 = HIDWORD(v253);
  }
  v218 = v253;
  v219 = v115;
  v220 = v254;
  v253 = 8;
  v254 = 0;
  v116 = v224;
  v222 = v224;
  v223 = 0x800000000;
  if ((_DWORD)v257)
    sub_1C486F510((uint64_t)&v222, (uint64_t)&v256);
  if (v256 != v258)
    free(v256);
  if (v252 != v251)
    free(v252);
  if (v264 != v266)
    free(v264);
  if (v260 != v259)
    free(v260);
  if (v233 != (char *)&v234 + 8)
    free(v233);
  if (v226 != v225)
    free(v226);
  if (v248 != v250)
    free(v248);
  if (__src != v243)
    free(__src);
  v117 = v263;
  v259 = v263;
  v118 = v205;
  if (v205 == v212)
  {
    v260 = v263;
    v119 = v205;
    goto LABEL_242;
  }
  v117 = malloc_type_malloc(8 * v207, 0x4065EBACuLL);
  if (!v117 && (v207 || (v117 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_398:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v260 = v117;
  v119 = v212;
  v118 = v205;
  v116 = v224;
LABEL_242:
  v120 = v209;
  LODWORD(v261) = v207;
  if (v118 == v119)
    v121 = v209;
  else
    v121 = v207;
  if (v121)
  {
    memmove(v117, v118, 8 * v121);
    v120 = v209;
  }
  HIDWORD(v261) = v120;
  v262 = v211;
  v122 = v266;
  v264 = v266;
  v265 = 0x800000000;
  if ((_DWORD)v214)
    sub_1C486F660((uint64_t)&v264, (uint64_t)&v213);
  v123 = v255;
  v251 = v255;
  v124 = v217;
  if (v217 == v216)
  {
    v252 = v255;
    v125 = v217;
  }
  else
  {
    v192 = v218;
    v123 = malloc_type_malloc(8 * v218, 0x4065EBACuLL);
    if (!v123)
    {
      if (v192)
        goto LABEL_398;
      v123 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v123)
        goto LABEL_398;
    }
    v252 = v123;
    v125 = v216;
    v124 = v217;
    v116 = v224;
  }
  LODWORD(v253) = v218;
  v126 = v219;
  if (v124 == v125)
    v127 = v219;
  else
    v127 = v218;
  if (v127)
  {
    memmove(v123, v124, 8 * v127);
    v126 = v219;
  }
  HIDWORD(v253) = v126;
  v254 = v220;
  v256 = v258;
  v257 = 0x800000000;
  if ((_DWORD)v223)
    sub_1C486F660((uint64_t)&v256, (uint64_t)&v222);
  while (2)
  {
    if ((_DWORD)v265 != (_DWORD)v257)
    {
LABEL_268:
      v131 = *(_DWORD *)(v203 + 16);
      if (v131)
      {
        v132 = *((_QWORD *)v264 + 2 * v265 - 2);
        v133 = *(_QWORD *)v203;
        v134 = v131 - 1;
        v135 = ((v132 >> 4) ^ (v132 >> 9)) & v134;
        v136 = *(_QWORD *)(*(_QWORD *)v203 + 16 * v135);
        if (v136 == v132)
        {
LABEL_273:
          v139 = *(_QWORD **)(v133 + 16 * v135 + 8);
          if (v139)
          {
            if (*(_QWORD *)v139[4] == v132)
            {
              v140 = (_QWORD *)*v139;
              if (*v139)
              {
                v142 = (_QWORD *)v140[2];
                v141 = v140[3];
                if ((unint64_t)v142 < v141)
                {
                  *v142 = v139;
                  v143 = v142 + 1;
                  goto LABEL_305;
                }
                v198 = v122;
                v200 = v114;
                v147 = v116;
                v148 = (_QWORD *)v140[1];
                v149 = v142 - v148;
                v150 = v149 + 1;
                if (!((unint64_t)(v149 + 1) >> 61))
                {
                  v151 = v141 - (_QWORD)v148;
                  if (v151 >> 2 > v150)
                    v150 = v151 >> 2;
                  if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF8)
                    v152 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v152 = v150;
                  if (!v152)
                  {
                    v153 = 0;
                    goto LABEL_299;
                  }
                  if (!(v152 >> 61))
                  {
                    v153 = (char *)operator new(8 * v152);
LABEL_299:
                    v161 = &v153[8 * v149];
                    *(_QWORD *)v161 = v139;
                    v143 = v161 + 8;
                    v116 = v147;
                    if (v142 != v148)
                    {
                      do
                      {
                        v162 = *--v142;
                        *((_QWORD *)v161 - 1) = v162;
                        v161 -= 8;
                      }
                      while (v142 != v148);
                      v142 = (_QWORD *)v140[1];
                    }
                    v122 = v198;
                    v140[1] = v161;
                    v140[2] = v143;
                    v140[3] = &v153[8 * v152];
                    if (v142)
                      operator delete(v142);
                    v114 = v200;
LABEL_305:
                    v140[2] = v143;
LABEL_316:
                    v166 = v139[4];
                    v167 = v139[5];
                    v168 = (_QWORD *)(v167 - 8);
                    v169 = v166 + 8 == v167 || v166 + 8 >= (unint64_t)v168;
                    if (!v169)
                    {
                      v170 = v166 + 16;
                      do
                      {
                        v171 = *(_QWORD *)(v170 - 8);
                        *(_QWORD *)(v170 - 8) = *v168;
                        *v168-- = v171;
                        v169 = v170 >= (unint64_t)v168;
                        v170 += 8;
                      }
                      while (!v169);
                    }
                    v172 = v139[1];
                    v173 = v139[2];
                    v174 = (_QWORD *)(v173 - 8);
                    if (v172 != v173 && v172 < (unint64_t)v174)
                    {
                      v176 = v172 + 8;
                      do
                      {
                        v177 = *(_QWORD *)(v176 - 8);
                        *(_QWORD *)(v176 - 8) = *v174;
                        *v174-- = v177;
                        v169 = v176 >= (unint64_t)v174;
                        v176 += 8;
                      }
                      while (!v169);
                    }
                    goto LABEL_330;
                  }
LABEL_386:
                  sub_1C4764EE4();
                }
LABEL_385:
                abort();
              }
              v145 = *(_QWORD **)(v203 + 32);
              v144 = *(_QWORD *)(v203 + 40);
              if ((unint64_t)v145 >= v144)
              {
                v154 = v116;
                v201 = v114;
                v155 = *(_QWORD **)(v203 + 24);
                v156 = v145 - v155;
                v157 = v156 + 1;
                if ((unint64_t)(v156 + 1) >> 61)
                  goto LABEL_385;
                v158 = v144 - (_QWORD)v155;
                if (v158 >> 2 > v157)
                  v157 = v158 >> 2;
                if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF8)
                  v159 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v159 = v157;
                if (v159)
                {
                  if (v159 >> 61)
                    goto LABEL_386;
                  v160 = (char *)operator new(8 * v159);
                }
                else
                {
                  v160 = 0;
                }
                v163 = &v160[8 * v156];
                *(_QWORD *)v163 = v139;
                v146 = v163 + 8;
                if (v145 == v155)
                {
                  v165 = (_QWORD *)v203;
                  v116 = v154;
                }
                else
                {
                  v116 = v154;
                  do
                  {
                    v164 = *--v145;
                    *((_QWORD *)v163 - 1) = v164;
                    v163 -= 8;
                  }
                  while (v145 != v155);
                  v165 = (_QWORD *)v203;
                  v145 = *(_QWORD **)(v203 + 24);
                }
                v165[3] = v163;
                v165[4] = v146;
                v165[5] = &v160[8 * v159];
                if (v145)
                  operator delete(v145);
                v114 = v201;
              }
              else
              {
                *v145 = v139;
                v146 = v145 + 1;
              }
              *(_QWORD *)(v203 + 32) = v146;
              goto LABEL_316;
            }
            do
            {
              v179 = (uint64_t *)v139[5];
              v178 = v139[6];
              if ((unint64_t)v179 >= v178)
              {
                v202 = v116;
                v181 = (_QWORD *)v139[4];
                v182 = v179 - v181;
                v183 = v182 + 1;
                if ((unint64_t)(v182 + 1) >> 61)
                  goto LABEL_385;
                v184 = v122;
                v185 = v114;
                v186 = v178 - (_QWORD)v181;
                if (v186 >> 2 > v183)
                  v183 = v186 >> 2;
                if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFF8)
                  v187 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v187 = v183;
                if (v187)
                {
                  if (v187 >> 61)
                    goto LABEL_386;
                  v188 = (char *)operator new(8 * v187);
                }
                else
                {
                  v188 = 0;
                }
                v189 = (uint64_t *)&v188[8 * v182];
                *v189 = v132;
                v180 = v189 + 1;
                if (v179 != v181)
                {
                  do
                  {
                    v190 = *--v179;
                    *--v189 = v190;
                  }
                  while (v179 != v181);
                  v179 = (uint64_t *)v139[4];
                }
                v139[4] = v189;
                v139[5] = v180;
                v139[6] = &v188[8 * v187];
                if (v179)
                  operator delete(v179);
                v114 = v185;
                v116 = v202;
                v122 = v184;
              }
              else
              {
                *v179 = v132;
                v180 = v179 + 1;
              }
              v139[5] = v180;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)(v139 + 7), v132);
LABEL_330:
              v139 = (_QWORD *)*v139;
            }
            while (v139);
          }
        }
        else
        {
          v137 = 1;
          while (v136 != -4096)
          {
            v138 = v135 + v137++;
            v135 = v138 & v134;
            v136 = *(_QWORD *)(v133 + 16 * v135);
            if (v136 == v132)
              goto LABEL_273;
          }
        }
      }
      LODWORD(v265) = v265 - 1;
      if ((_DWORD)v265)
        sub_1C486F1F8(&v259);
      continue;
    }
    break;
  }
  if ((_DWORD)v265)
  {
    v128 = v256;
    v129 = v264;
    while (*v129 == *v128 && v129[1] == v128[1])
    {
      v129 += 2;
      v128 += 2;
      if (v129 == (_QWORD *)((char *)v264 + 16 * v265))
        goto LABEL_352;
    }
    goto LABEL_268;
  }
LABEL_352:
  if (v256 != v258)
    free(v256);
  if (v252 != v251)
    free(v252);
  if (v264 != v122)
    free(v264);
  if (v260 != v259)
    free(v260);
  if (v222 != v116)
    free(v222);
  if (v217 != v216)
    free(v217);
  if (v213 != v114)
    free(v213);
  if (v205 != v212)
    free(v205);
}

{
  __ZN4llvm12LoopInfoBaseINS_17MachineBasicBlockENS_11MachineLoopEE7analyzeERKNS_17DominatorTreeBaseIS1_Lb0EEE(a1, a2);
}

void llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::print(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t v2;
  unint64_t v5;
  unsigned int v6;

  v2 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) != v2)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::print(*(_QWORD **)(v2 + 8 * v5), a2, 0, 1, 0);
      v5 = v6;
      v2 = *(_QWORD *)(a1 + 24);
      ++v6;
    }
    while (v5 < (*(_QWORD *)(a1 + 32) - v2) >> 3);
  }
}

uint64_t llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::verify(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  int v7;

  v6[0] = 0;
  v6[1] = 0;
  v7 = 0;
  v1 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v1 == v2)
  {
    v4 = 0;
  }
  else
  {
    do
    {
      v3 = *v1++;
      llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::verifyLoopNest(v3, (uint64_t)v6);
    }
    while (v1 != v2);
    v4 = v6[0];
  }
  return MEMORY[0x1CAA32FB4](v4, 8);
}

uint64_t llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::destroy(uint64_t a1, uint64_t a2)
{
  return llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::~LoopBase(a2);
}

void llvm::initializeMachineLoopInfoPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82F698);
  if (v1 != -1)
  {
    v4[0] = sub_1C5172DEC;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82F698, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5172DEC(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeMachineDominatorTreePass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Machine Natural Loop Construction";
  *(_QWORD *)(v2 + 8) = 33;
  *(_QWORD *)(v2 + 16) = "machine-loops";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &llvm::MachineLoopInfo::ID;
  *(_WORD *)(v2 + 40) = 257;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::MachineLoopInfo>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::MachineLoopInfo::runOnMachineFunction(llvm::MachineLoopInfo *this, llvm::MachineFunction *a2)
{
  void **v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v3 = (void **)**((_QWORD **)this + 1);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::MachineDominatorTree::ID);
  v5 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::MachineDominatorTree::ID);
  (*(void (**)(llvm::MachineLoopInfo *))(*(_QWORD *)this + 88))(this);
  if (!*(_QWORD *)(v5 + 1320))
  {
    v7 = operator new();
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_QWORD *)(v7 + 56) = 0;
    *(_QWORD *)(v7 + 64) = 0;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_QWORD *)v7 = v7 + 16;
    *(_QWORD *)(v7 + 8) = 0x100000000;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    *(_DWORD *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 48) = 0;
    *(_BYTE *)(v7 + 64) = 0;
    v8 = *(_QWORD *)(v5 + 1320);
    *(_QWORD *)(v5 + 1320) = v7;
    if (v8)
      sub_1C4DC4DE4(v5 + 1320, v8);
  }
  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v5);
  llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::analyze((uint64_t)this + 248, *(_QWORD *)(v5 + 1320));
  return 0;
}

void llvm::MachineLoopInfo::calculate(llvm::MachineLoopInfo *this, llvm::MachineDominatorTree *a2)
{
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(llvm::MachineLoopInfo *))(*(_QWORD *)this + 88))(this);
  if (!*((_QWORD *)a2 + 165))
  {
    v4 = operator new();
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 64) = 0;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_QWORD *)v4 = v4 + 16;
    *(_QWORD *)(v4 + 8) = 0x100000000;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    *(_DWORD *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 48) = 0;
    *(_BYTE *)(v4 + 64) = 0;
    v5 = *((_QWORD *)a2 + 165);
    *((_QWORD *)a2 + 165) = v4;
    if (v5)
      sub_1C4DC4DE4((uint64_t)a2 + 1320, v5);
  }
  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)a2);
  llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::analyze((uint64_t)this + 248, *((_QWORD *)a2 + 165));
}

uint64_t llvm::MachineLoop::getBottomBlock(llvm::MachineLoop *this)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = **((_QWORD **)this + 4);
  if (v1 != *(_QWORD *)(*(_QWORD *)(v1 + 32) + 320))
  {
    v3 = *(_QWORD *)(v1 + 8);
    v4 = (char *)this + 56;
    v5 = sub_1C477672C((uint64_t)this + 56, v3);
    v6 = *((_QWORD *)this + 8);
    v7 = 72;
    if (v6 == *((_QWORD *)this + 7))
      v7 = 76;
    if (v5 != (_QWORD *)(v6 + 8 * *(unsigned int *)((char *)this + v7)))
    {
      do
      {
        v1 = v3;
        v3 = *(_QWORD *)(v3 + 8);
        if (v1 == v3)
          break;
        v8 = sub_1C477672C((uint64_t)v4, v3);
        v9 = *((_QWORD *)this + 8);
        v10 = v9 == *((_QWORD *)this + 7) ? 76 : 72;
      }
      while (v8 != (_QWORD *)(v9 + 8 * *(unsigned int *)((char *)this + v10)));
    }
  }
  return v1;
}

uint64_t llvm::MachineLoop::findLoopControlBlock(llvm::MachineLoop *this)
{
  uint64_t LoopLatch;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  LoopLatch = llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopLatch((uint64_t)this);
  v3 = LoopLatch;
  if (LoopLatch)
  {
    v4 = *(uint64_t **)(LoopLatch + 88);
    v5 = *(uint64_t **)(LoopLatch + 96);
    if (v4 == v5)
      return llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getExitingBlock(this);
    while (1)
    {
      v6 = sub_1C477672C((uint64_t)this + 56, *v4);
      v7 = *((_QWORD *)this + 8);
      v8 = v7 == *((_QWORD *)this + 7) ? 76 : 72;
      if (v6 == (_QWORD *)(v7 + 8 * *(unsigned int *)((char *)this + v8)))
        break;
      if (++v4 == v5)
        return llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getExitingBlock(this);
    }
  }
  return v3;
}

uint64_t llvm::MachineLoop::getStartLoc@<X0>(llvm::MachineLoop *this@<X0>, unsigned __int8 **a2@<X8>)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;

  result = llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPredecessor((uint64_t)this);
  if (!result)
    goto LABEL_4;
  v5 = (_QWORD *)result;
  result = llvm::MachineBasicBlock::isLegalToHoistInto((llvm::MachineBasicBlock *)result);
  if (!(_DWORD)result)
    goto LABEL_4;
  if (v5[11] + 8 != v5[12])
    goto LABEL_4;
  v11 = v5[2];
  if (!v11)
    goto LABEL_4;
  v12 = *(_QWORD *)(v11 + 40);
  if (v12)
    v13 = v12 - 24;
  else
    v13 = 0;
  if (*(unsigned __int8 *)(v13 + 16) - 29 >= 0xB)
    v13 = 0;
  v14 = *(unsigned __int8 **)(v13 + 48);
  *a2 = v14;
  if (!v14 || (result = llvm::MetadataTracking::track((uint64_t)a2, v14, 2), !*a2))
  {
LABEL_4:
    v6 = **((_QWORD **)this + 4);
    if (v6 && (v7 = *(_QWORD *)(v6 + 16)) != 0)
    {
      v8 = *(_QWORD *)(v7 + 40);
      if (v8)
        v9 = v8 - 24;
      else
        v9 = 0;
      if (*(unsigned __int8 *)(v9 + 16) - 29 >= 0xB)
        v9 = 0;
      v10 = *(unsigned __int8 **)(v9 + 48);
      *a2 = v10;
      if (v10)
        return llvm::MetadataTracking::track((uint64_t)a2, v10, 2);
    }
    else
    {
      *a2 = 0;
    }
  }
  return result;
}

_QWORD *llvm::MachineLoopInfo::findLoopPreheader(llvm::MachineLoopInfo *this, llvm::MachineLoop *a2, int a3, char a4)
{
  _QWORD *result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t LoopLatch;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  BOOL v17;
  uint64_t *i;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;

  result = (_QWORD *)llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPredecessor((uint64_t)a2);
  if (result)
  {
    v9 = result;
    if (!llvm::MachineBasicBlock::isLegalToHoistInto((llvm::MachineBasicBlock *)result))
    {
      result = 0;
      goto LABEL_9;
    }
    if (v9[11] + 8 == v9[12])
      result = v9;
    else
      result = 0;
  }
  if (result)
    return result;
LABEL_9:
  if (!a3)
    return result;
  v10 = **((_QWORD **)a2 + 4);
  LoopLatch = llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopLatch((uint64_t)a2);
  v13 = *(char **)(v10 + 64);
  v12 = *(char **)(v10 + 72);
  if (((v12 - v13) & 0x7FFFFFFF8) != 0x10 || *(_BYTE *)(v10 + 185))
    return 0;
  if (v13 != v12)
  {
    v14 = LoopLatch;
    result = 0;
    while (1)
    {
      v15 = result != 0;
      if (*(_QWORD *)v13 == v14)
        v15 = 3;
      if (v15 != 3 && v15 != 0)
        return 0;
      if (result)
        v17 = 1;
      else
        v17 = *(_QWORD *)v13 == v14;
      if (!v17)
        result = *(_QWORD **)v13;
      v13 += 8;
      if (v13 == v12)
        goto LABEL_31;
    }
  }
  result = 0;
LABEL_31:
  if ((a4 & 1) == 0)
  {
    for (i = (uint64_t *)result[11]; i != (uint64_t *)result[12]; ++i)
    {
      v19 = *i;
      if (*i != v10)
      {
        v20 = *((_DWORD *)this + 66);
        if (v20)
        {
          v21 = *((_QWORD *)this + 31);
          v22 = v20 - 1;
          v23 = (v20 - 1) & ((v19 >> 4) ^ (v19 >> 9));
          v24 = *(_QWORD *)(v21 + 16 * v23);
          if (v19 == v24)
          {
LABEL_40:
            v27 = *(_QWORD *)(v21 + 16 * v23 + 8);
            if (v27 && **(_QWORD **)(v27 + 32) == v19)
              return 0;
          }
          else
          {
            v25 = 1;
            while (v24 != -4096)
            {
              v26 = v23 + v25++;
              v23 = v26 & v22;
              v24 = *(_QWORD *)(v21 + 16 * v23);
              if (v19 == v24)
                goto LABEL_40;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t llvm::MachineLoop::isLoopInvariant(llvm::MachineLoop *this, llvm::MachineInstr *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
  v5 = *(_QWORD **)(v4 + 40);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6);
  v9 = *((unsigned int *)a2 + 10);
  if ((_DWORD)v9)
  {
    v10 = v8;
    v11 = (int *)*((_QWORD *)a2 + 4);
    v12 = &v11[8 * v9];
    do
    {
      v13 = *v11;
      if (!*v11)
      {
        v14 = v11[1];
        if ((_DWORD)v14)
        {
          if (v14 >> 30)
          {
            if ((v13 & 0x1000000) == 0)
            {
              if ((v14 & 0x80000000) != 0)
                v15 = (uint64_t *)(v5[3] + 16 * (v14 & 0x7FFFFFFF) + 8);
              else
                v15 = (uint64_t *)(v5[34] + 8 * v14);
              v19 = *v15;
              if ((*(_BYTE *)(v19 + 3) & 1) == 0)
                v19 = *(_QWORD *)(v19 + 24);
              v20 = sub_1C477672C((uint64_t)this + 56, *(_QWORD *)(*(_QWORD *)(v19 + 8) + 24));
              v21 = *((_QWORD *)this + 8);
              v22 = 72;
              if (v21 == *((_QWORD *)this + 7))
                v22 = 76;
              if (v20 != (_QWORD *)(v21 + 8 * *(unsigned int *)((char *)this + v22)))
                return 0;
            }
          }
          else if ((v13 & 0x1000000) != 0)
          {
            if ((~v13 & 0x5000000) != 0)
              return 0;
            v16 = **((_QWORD **)this + 4);
            v17 = *(unsigned __int16 **)(v16 + 152);
            v18 = *(unsigned __int16 **)(v16 + 160);
            while (v17 != v18)
            {
              if (*v17 == (unsigned __int16)v14)
              {
                if (!*((_QWORD *)v17 + 1))
                  break;
                return 0;
              }
              v17 += 8;
            }
          }
          else if (!llvm::MachineRegisterInfo::isConstantPhysReg(v5, v11[1])
                 && ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 128))(v7, v14, *(_QWORD *)(*((_QWORD *)a2 + 3) + 32)) & 1) == 0&& ((*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v10 + 24))(v10, v11) & 1) == 0)
          {
            return 0;
          }
        }
      }
      v11 += 8;
    }
    while (v11 != v12);
  }
  return 1;
}

uint64_t sub_1C51735DC(uint64_t a1)
{
  int v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a1 + 256);
  if (v2 || *(_DWORD *)(a1 + 260))
  {
    v7 = (_DWORD *)(a1 + 248);
    v8 = *(unsigned int *)(a1 + 264);
    if (v8 <= 4 * v2 || v8 < 0x41)
    {
      if ((_DWORD)v8)
      {
        v9 = *(_QWORD **)v7;
        v10 = 16 * v8;
        do
        {
          *v9 = -4096;
          v9 += 2;
          v10 -= 16;
        }
        while (v10);
      }
      *(_QWORD *)(a1 + 256) = 0;
    }
    else
    {
      sub_1C476B2A4(v7);
    }
  }
  v3 = *(uint64_t **)(a1 + 272);
  v4 = *(uint64_t **)(a1 + 280);
  if (v3 != v4)
  {
    do
    {
      v6 = *v3++;
      llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::~LoopBase(v6);
    }
    while (v3 != v4);
    v3 = *(uint64_t **)(a1 + 272);
  }
  *(_QWORD *)(a1 + 280) = v3;
  return sub_1C4926A50(a1 + 296);
}

_QWORD *sub_1C5173680(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_15:
    v6 = sub_1C5173734(a1, a2, v12);
    *v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_15;
  }
  return v6;
}

_QWORD *sub_1C5173734(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  _QWORD *v16;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1C4964094(a1, v6);
      v16 = 0;
      sub_1C48BF0C0((uint64_t *)a1, a2, &v16);
      a3 = v16;
    }
LABEL_4:
    v7 = *a3;
    goto LABEL_5;
  }
  sub_1C4964094(a1, 2 * v6);
  v7 = *a2;
  v9 = *(_DWORD *)(a1 + 16) - 1;
  v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
  v11 = *a3;
  if (*a2 != *a3)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = a3;
      v15 = v10 + v13++;
      v10 = v15 & v9;
      a3 = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
      v11 = *a3;
      if (v7 == *a3)
        goto LABEL_5;
    }
    if (v12)
      a3 = v12;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

unint64_t llvm::PeelSingleBlockLoop(int a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  llvm::MachineBasicBlock **v8;
  llvm::MachineBasicBlock *v9;
  llvm::MachineBasicBlock **v10;
  llvm::MachineBasicBlock *v11;
  llvm::BasicBlock *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  llvm::MachineFunction *i;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  llvm::MachineBasicBlock *v30;
  _DWORD *v31;
  unint64_t v32;
  unsigned int IncompleteVirtualRegister;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  llvm::MachineBasicBlock *v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  int v62;
  _DWORD *v63;
  int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  uint64_t *j;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  int v85;
  int v86;
  unsigned int v87;
  unint64_t v88;
  unint64_t v89;
  llvm::MachineBasicBlock *v91;
  uint64_t v92;
  uint64_t *v93;
  llvm::MachineBasicBlock *v94;
  unint64_t v95;
  _QWORD *v96;
  llvm::MachineFunction *v97;
  int v98;
  unint64_t *v99;
  llvm::MachineBasicBlock *v100;
  llvm::MachineBasicBlock *v101;
  unsigned __int8 *v102;
  _QWORD v103[2];
  int v104;
  void *v105;
  uint64_t v106;
  _QWORD v107[18];

  v107[16] = *MEMORY[0x1E0C80C00];
  v8 = (llvm::MachineBasicBlock **)a2[8];
  v9 = *v8;
  if (*v8 == (llvm::MachineBasicBlock *)a2)
    v9 = v8[1];
  v97 = (llvm::MachineFunction *)a2[4];
  v10 = (llvm::MachineBasicBlock **)a2[11];
  v11 = *v10;
  if (*v10 == (llvm::MachineBasicBlock *)a2)
    v11 = v10[1];
  v12 = (llvm::BasicBlock *)a2[2];
  v13 = *((_QWORD *)v97 + 39);
  if (v13)
    *((_QWORD *)v97 + 39) = *(_QWORD *)v13;
  else
    v13 = sub_1C484358C((uint64_t)v97 + 128, 232, 3);
  *(_QWORD *)v13 = 0;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = v12;
  *(_DWORD *)(v13 + 24) = -1;
  *(_QWORD *)(v13 + 56) = v13 + 48;
  v93 = (uint64_t *)(v13 + 56);
  v99 = (unint64_t *)(v13 + 48);
  *(_QWORD *)(v13 + 40) = v13;
  *(_QWORD *)(v13 + 48) = (v13 + 48) | 4;
  *(_BYTE *)(v13 + 144) = 0;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 121) = 0u;
  *(_QWORD *)(v13 + 160) = 0;
  *(_QWORD *)(v13 + 168) = 0;
  *(_QWORD *)(v13 + 152) = 0;
  *(_BYTE *)(v13 + 176) = 0;
  *(_DWORD *)(v13 + 187) = 0;
  *(_QWORD *)(v13 + 180) = 0;
  *(_QWORD *)(v13 + 192) = 0;
  *(_DWORD *)(v13 + 199) = 0;
  *(_QWORD *)(v13 + 216) = 0;
  *(_QWORD *)(v13 + 224) = 0;
  *(_QWORD *)(v13 + 208) = 0;
  *(_QWORD *)(v13 + 32) = v97;
  if (v12)
  {
    *(_QWORD *)(v13 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v12);
    *(_QWORD *)(v13 + 144) = v14;
  }
  v91 = v11;
  v92 = a4;
  v15 = a2;
  if (a1)
    v15 = (unint64_t *)a2[1];
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v97 + 320, v13);
  v16 = *v15;
  *(_QWORD *)v13 = *v15;
  *(_QWORD *)(v13 + 8) = v15;
  *(_QWORD *)(v16 + 8) = v13;
  *v15 = v13;
  v103[0] = 0;
  v103[1] = 0;
  v104 = 0;
  v94 = (llvm::MachineBasicBlock *)a2;
  v17 = a2[7];
  v96 = a2 + 6;
  if ((unint64_t *)v17 != a2 + 6)
  {
    i = v97;
    v98 = a1;
    v95 = v13;
    do
    {
      v19 = *((_QWORD *)i + 28);
      if (v19)
        *((_QWORD *)i + 28) = *(_QWORD *)v19;
      else
        v19 = sub_1C484358C((uint64_t)v97 + 128, 72, 3);
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v19, i, (const llvm::MachineInstr *)v17);
      v20 = *(_QWORD *)(v13 + 40);
      *(_QWORD *)(v19 + 24) = v20;
      v21 = *(_QWORD *)(v20 + 32);
      v22 = *(unsigned int *)(v19 + 40);
      if ((_DWORD)v22)
      {
        v44 = *(_QWORD *)(v19 + 32);
        v45 = *(_QWORD *)(v21 + 40);
        v46 = 32 * v22;
        do
        {
          if (!*(_BYTE *)v44)
          {
            v47 = *(unsigned int *)(v44 + 4);
            if ((int)v47 >= 0)
              v48 = (uint64_t *)(*(_QWORD *)(v45 + 272) + 8 * v47);
            else
              v48 = (uint64_t *)(*(_QWORD *)(v45 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
            v49 = *v48;
            if (*v48)
            {
              v50 = *(_QWORD *)(v49 + 16);
              *(_QWORD *)(v49 + 16) = v44;
              *(_QWORD *)(v44 + 16) = v50;
              if ((*(_BYTE *)(v44 + 3) & 1) != 0)
              {
                *(_QWORD *)(v44 + 24) = v49;
              }
              else
              {
                *(_QWORD *)(v44 + 24) = 0;
                v48 = (uint64_t *)(v50 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v44 + 16) = v44;
              *(_QWORD *)(v44 + 24) = 0;
            }
            *v48 = v44;
          }
          v44 += 32;
          v46 -= 32;
        }
        while (v46);
      }
      v23 = *(_QWORD *)(v21 + 728);
      if (v23)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v23 + 24))(v23, v19);
      v24 = *v99 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v19 = v24 | *(_QWORD *)v19 & 7;
      *(_QWORD *)(v19 + 8) = v99;
      *(_QWORD *)(v24 + 8) = v19;
      *v99 = *v99 & 7 | v19;
      v25 = *(_QWORD *)(v19 + 32);
      v26 = *(_QWORD *)(v19 + 16);
      v27 = *(unsigned __int8 *)(v26 + 4);
      if ((*(_BYTE *)(v26 + 8) & 2) == 0 || (v41 = *(_DWORD *)(v19 + 40), v41 == v27))
      {
        v28 = v27;
      }
      else
      {
        v42 = v41 - 1;
        v28 = v27;
        do
        {
          v43 = *(_DWORD *)(v25 + 32 * v27);
          if ((v43 & 0x10000FF) != 0x1000000)
            break;
          v28 += (v43 & 0x2000000) == 0;
          if (v42 == v27)
            break;
          ++v27;
        }
        while ((v43 & 0x2000000) == 0);
      }
      if (v28)
      {
        v29 = v25 + 32 * v28;
        do
        {
          LODWORD(v102) = *(_DWORD *)(v25 + 4);
          if (((_DWORD)v102 - 1) >= 0x3FFFFFFF)
          {
            v30 = v9;
            v31 = sub_1C61482A0((uint64_t)v103, (int *)&v102);
            v32 = *(_QWORD *)(a3[3] + 16 * (v102 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
            IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)a3, "", 0);
            *(_QWORD *)(a3[3] + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v32;
            v34 = a3[1];
            if (v34)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 24))(v34, IncompleteVirtualRegister);
            v31[1] = IncompleteVirtualRegister;
            llvm::MachineOperand::setReg(v25, IncompleteVirtualRegister);
            if (v98 == 1)
            {
              v105 = v107;
              v106 = 0x400000000;
              if ((int)v102 >= 0)
                v35 = (uint64_t *)(a3[34] + 8 * v102);
              else
                v35 = (uint64_t *)(a3[3] + 16 * (v102 & 0x7FFFFFFF) + 8);
              v36 = *v35;
              if (*v35)
              {
                while ((*(_BYTE *)(v36 + 3) & 1) != 0)
                {
                  v36 = *(_QWORD *)(v36 + 24);
                  if (!v36)
                    goto LABEL_49;
                }
                v37 = 0;
LABEL_36:
                if (*(llvm::MachineBasicBlock **)(*(_QWORD *)(v36 + 8) + 24) != v94)
                {
                  if (v37 >= HIDWORD(v106))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v105, (uint64_t)v107, v37 + 1, 8);
                    v37 = v106;
                  }
                  *((_QWORD *)v105 + v37) = v36;
                  v37 = v106 + 1;
                  LODWORD(v106) = v106 + 1;
                }
                while (1)
                {
                  v36 = *(_QWORD *)(v36 + 24);
                  if (!v36)
                    break;
                  if ((*(_BYTE *)(v36 + 3) & 1) == 0)
                    goto LABEL_36;
                }
                v38 = (uint64_t *)v105;
                if (v37)
                {
                  v39 = 8 * v37;
                  do
                  {
                    v40 = *v38++;
                    sub_1C51A3F30(a3, v31[1], *(_QWORD *)(a3[3] + 16 * (v31[1] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a3[3] + 16 * (*(_DWORD *)(v40 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, 0);
                    llvm::MachineOperand::setReg(v40, v31[1]);
                    v39 -= 8;
                  }
                  while (v39);
                  v38 = (uint64_t *)v105;
                }
                if (v38 != v107)
                  free(v38);
              }
LABEL_49:
              v9 = v30;
            }
          }
          v25 += 32;
        }
        while (v25 != v29);
      }
      if ((*(_BYTE *)v17 & 4) != 0)
      {
        v13 = v95;
        a1 = v98;
        i = v97;
      }
      else
      {
        v13 = v95;
        a1 = v98;
        for (i = v97; (*(_WORD *)(v17 + 44) & 8) != 0; v17 = *(_QWORD *)(v17 + 8))
          ;
      }
      v17 = *(_QWORD *)(v17 + 8);
    }
    while ((_QWORD *)v17 != v96);
  }
  v51 = (unint64_t *)*v93;
  if ((unint64_t *)*v93 == v99)
  {
    v52 = v91;
    v67 = v92;
  }
  else
  {
    v52 = v91;
    while (!*(_WORD *)v51[2] || *(_WORD *)v51[2] == 69)
    {
      v51 = (unint64_t *)v51[1];
      if (v51 == v99)
        goto LABEL_111;
    }
    while (v51 != v99)
    {
      v53 = v51[4];
      v54 = v51[2];
      v55 = *(unsigned __int8 *)(v54 + 4);
      v56 = *((unsigned int *)v51 + 10);
      if ((*(_BYTE *)(v54 + 8) & 2) != 0)
      {
        if ((_DWORD)v56 == v55)
          goto LABEL_99;
        v57 = *(unsigned __int8 *)(v54 + 4);
        do
        {
          v66 = *(_DWORD *)(v53 + 32 * v55);
          if ((v66 & 0x10000FF) != 0x1000000)
            break;
          v57 += (v66 & 0x2000000) == 0;
          if ((_DWORD)v56 - 1 == v55)
            break;
          ++v55;
        }
        while ((v66 & 0x2000000) == 0);
      }
      else
      {
        v57 = *(unsigned __int8 *)(v54 + 4);
      }
      if (v57 != (_DWORD)v56)
      {
        v58 = v53 + 32 * v56;
        v59 = v53 + 32 * v57;
        do
        {
          if (!*(_BYTE *)v59 && v104)
          {
            v60 = *(_DWORD *)(v59 + 4);
            v61 = (v104 - 1) & (37 * v60);
            v62 = *(_DWORD *)(v103[0] + 8 * v61);
            if (v60 == v62)
            {
LABEL_91:
              LODWORD(v105) = *(_DWORD *)(v59 + 4);
              v63 = sub_1C61482A0((uint64_t)v103, (int *)&v105);
              llvm::MachineOperand::setReg(v59, v63[1]);
            }
            else
            {
              v64 = 1;
              while (v62 != -1)
              {
                v65 = v61 + v64++;
                v61 = v65 & (v104 - 1);
                v62 = *(_DWORD *)(v103[0] + 8 * v61);
                if (v60 == v62)
                  goto LABEL_91;
              }
            }
          }
          v59 += 32;
        }
        while (v59 != v58);
        if (!v51)
        {
LABEL_102:
          while ((*((_WORD *)v51 + 22) & 8) != 0)
            v51 = (unint64_t *)v51[1];
          goto LABEL_103;
        }
      }
LABEL_99:
      if ((*(_BYTE *)v51 & 4) == 0)
        goto LABEL_102;
LABEL_103:
      v51 = (unint64_t *)v51[1];
    }
LABEL_111:
    v67 = v92;
  }
  for (j = v93; ; j = (uint64_t *)(v69 + 8))
  {
    v69 = *j;
    v70 = **(unsigned __int16 **)(*j + 16);
    if (v70)
    {
      if (v70 != 69)
        break;
    }
    v71 = *(_QWORD *)(v69 + 32);
    if (*(llvm::MachineBasicBlock **)(v71 + 80) == v9)
      v72 = 3;
    else
      v72 = 1;
    if (*(llvm::MachineBasicBlock **)(v71 + 80) == v9)
      v73 = 1;
    else
      v73 = 3;
    v74 = *(_QWORD *)(*(_QWORD *)(v69 + 24) + 56);
    if (v74 == v69)
    {
      v78 = *((_QWORD *)v94 + 7);
      if (a1)
        goto LABEL_128;
    }
    else
    {
      v75 = 0;
      v76 = 1;
      do
      {
        v77 = v76;
        ++v75;
        v74 = *(_QWORD *)(v74 + 8);
        ++v76;
      }
      while (v74 != v69);
      v78 = *((_QWORD *)v94 + 7);
      if (v75)
      {
        v79 = v77 + 1;
        do
        {
          v78 = *(_QWORD *)(v78 + 8);
          --v79;
        }
        while (v79 > 1);
      }
      if (a1)
      {
LABEL_128:
        llvm::MachineOperand::setReg(v71 + 32 * v72, *(_DWORD *)(*(_QWORD *)(v78 + 32) + 32 * v72 + 4));
        llvm::MachineInstr::removeOperand(v69, v73 + 1);
        v80 = v69;
        v81 = v73;
        goto LABEL_134;
      }
    }
    v82 = *(_DWORD *)(v71 + 32 * v72 + 4);
    LODWORD(v105) = v82;
    if (v104)
    {
      v83 = v104 - 1;
      v84 = (v104 - 1) & (37 * v82);
      v85 = *(_DWORD *)(v103[0] + 8 * v84);
      if (v82 == v85)
      {
LABEL_132:
        v82 = sub_1C61482A0((uint64_t)v103, (int *)&v105)[1];
        LODWORD(v105) = v82;
      }
      else
      {
        v86 = 1;
        while (v85 != -1)
        {
          v87 = v84 + v86++;
          v84 = v87 & v83;
          v85 = *(_DWORD *)(v103[0] + 8 * (v87 & v83));
          if (v82 == v85)
            goto LABEL_132;
        }
      }
    }
    llvm::MachineOperand::setReg(*(_QWORD *)(v78 + 32) + 32 * v73, v82);
    llvm::MachineInstr::removeOperand(v69, v72 + 1);
    v80 = v69;
    v81 = v72;
LABEL_134:
    llvm::MachineInstr::removeOperand(v80, v81);
    if (!v69 || (*(_BYTE *)v69 & 4) == 0)
    {
      while ((*(_WORD *)(v69 + 44) & 8) != 0)
        v69 = *(_QWORD *)(v69 + 8);
    }
  }
  v102 = 0;
  if (a1)
  {
    llvm::MachineBasicBlock::replaceSuccessor(v94, v52, (llvm::MachineBasicBlock *)v13);
    llvm::MachineBasicBlock::replacePhiUsesWith((uint64_t)v52, v94, (llvm::MachineBasicBlock *)v13);
    llvm::MachineBasicBlock::addSuccessor((_QWORD *)v13, v52, -1);
    v100 = 0;
    v101 = 0;
    v105 = v107;
    v106 = 0x400000000;
    (*(void (**)(uint64_t, llvm::MachineBasicBlock *, llvm::MachineBasicBlock **, llvm::MachineBasicBlock **, void **, _QWORD))(*(_QWORD *)v67 + 248))(v67, v94, &v101, &v100, &v105, 0);
    (*(void (**)(uint64_t, llvm::MachineBasicBlock *, _QWORD))(*(_QWORD *)v67 + 264))(v67, v94, 0);
    if (v101 == v52)
      v88 = v13;
    else
      v88 = (unint64_t)v101;
    if (v100 == v52)
      v89 = v13;
    else
      v89 = (unint64_t)v100;
    (*(void (**)(uint64_t, llvm::MachineBasicBlock *, unint64_t, unint64_t, void *, _QWORD, unsigned __int8 **, _QWORD))(*(_QWORD *)v67 + 272))(v67, v94, v88, v89, v105, v106, &v102, 0);
    if ((*(unsigned int (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v67 + 264))(v67, v13, 0))
      (*(void (**)(uint64_t, unint64_t, llvm::MachineBasicBlock *, _QWORD, _QWORD, _QWORD, unsigned __int8 **, _QWORD))(*(_QWORD *)v67 + 272))(v67, v13, v52, 0, 0, 0, &v102, 0);
    if (v105 != v107)
      free(v105);
  }
  else
  {
    llvm::MachineBasicBlock::replaceSuccessor(v9, v94, (llvm::MachineBasicBlock *)v13);
    llvm::MachineBasicBlock::addSuccessor((_QWORD *)v13, v94, -1);
    llvm::MachineBasicBlock::replacePhiUsesWith((uint64_t)v94, v9, (llvm::MachineBasicBlock *)v13);
    if ((*(unsigned int (**)(uint64_t, llvm::MachineBasicBlock *, _QWORD))(*(_QWORD *)v67 + 264))(v67, v9, 0))
    {
      (*(void (**)(uint64_t, llvm::MachineBasicBlock *, unint64_t, _QWORD, _QWORD, _QWORD, unsigned __int8 **, _QWORD))(*(_QWORD *)v67 + 272))(v67, v9, v13, 0, 0, 0, &v102, 0);
    }
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v67 + 264))(v67, v13, 0);
    (*(void (**)(uint64_t, unint64_t, llvm::MachineBasicBlock *, _QWORD, _QWORD, _QWORD, unsigned __int8 **, _QWORD))(*(_QWORD *)v67 + 272))(v67, v13, v94, 0, 0, 0, &v102, 0);
  }
  if (v102)
    llvm::MetadataTracking::untrack((uint64_t)&v102, v102);
  MEMORY[0x1CAA32FB4](v103[0], 4);
  return v13;
}

void llvm::MachineModuleInfoImpl::~MachineModuleInfoImpl(llvm::MachineModuleInfoImpl *this)
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::MachineModuleInfo::initialize(uint64_t this)
{
  *(_QWORD *)(this + 2072) = 0;
  *(_DWORD *)(this + 2104) = 0;
  *(_DWORD *)(this + 2136) = 0;
  *(_WORD *)(this + 2108) = 0;
  return this;
}

uint64_t llvm::MachineModuleInfo::finalize(llvm::MachineModuleInfo *this)
{
  uint64_t result;

  *((_QWORD *)this + 261) = *((_QWORD *)this + 260);
  llvm::MCContext::reset((llvm::MachineModuleInfo *)((char *)this + 8));
  result = *((_QWORD *)this + 259);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 259) = 0;
  return result;
}

uint64_t llvm::MachineModuleInfo::MachineModuleInfo(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;

  *(_QWORD *)a1 = *a2;
  llvm::MCContext::MCContext(a1 + 8, (__int128 *)(*a2 + 448), *(_QWORD *)(*a2 + 560), *(_QWORD *)(*a2 + 568), *(_QWORD *)(*a2 + 584), 0, *a2 + 1128, 0, 0, 0);
  *(_QWORD *)(a1 + 2056) = 0;
  *(_QWORD *)(a1 + 2080) = 0;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_DWORD *)(a1 + 2128) = 0;
  *(_OWORD *)(a1 + 2112) = 0u;
  *(_QWORD *)(a1 + 2112) = a2[264];
  a2[264] = 0;
  *(_DWORD *)(a1 + 2120) = *((_DWORD *)a2 + 530);
  *((_DWORD *)a2 + 530) = 0;
  v4 = *(_DWORD *)(a1 + 2124);
  *(_DWORD *)(a1 + 2124) = *((_DWORD *)a2 + 531);
  *((_DWORD *)a2 + 531) = v4;
  v5 = *(_DWORD *)(a1 + 2128);
  *(_DWORD *)(a1 + 2128) = *((_DWORD *)a2 + 532);
  *((_DWORD *)a2 + 532) = v5;
  *(_DWORD *)(a1 + 2136) = 0;
  *(_QWORD *)(a1 + 2192) = 0;
  *(_QWORD *)(a1 + 2144) = 0;
  *(_QWORD *)(a1 + 2160) = 0;
  *(_QWORD *)(a1 + 2152) = 0;
  *(_QWORD *)(a1 + 176) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
  *(_DWORD *)(a1 + 2104) = *((_DWORD *)a2 + 526);
  *(_QWORD *)(a1 + 2056) = a2[257];
  *(_OWORD *)(a1 + 2064) = *((_OWORD *)a2 + 129);
  return a1;
}

llvm::MachineModuleInfo *llvm::MachineModuleInfo::MachineModuleInfo(llvm::MachineModuleInfo *this, const llvm::LLVMTargetMachine *a2, llvm::MCContext *a3)
{
  *(_QWORD *)this = a2;
  llvm::MCContext::MCContext((uint64_t)this + 8, (__int128 *)a2 + 28, *((_QWORD *)a2 + 70), *((_QWORD *)a2 + 71), *((_QWORD *)a2 + 73), 0, (uint64_t)a2 + 1128, 0, 0, 0);
  *((_QWORD *)this + 257) = a3;
  *((_DWORD *)this + 534) = 0;
  *((_QWORD *)this + 274) = 0;
  *((_QWORD *)this + 260) = 0;
  *(_OWORD *)((char *)this + 2088) = 0u;
  *((_OWORD *)this + 132) = 0u;
  *((_DWORD *)this + 532) = 0;
  *((_QWORD *)this + 268) = 0;
  *((_QWORD *)this + 270) = 0;
  *((_QWORD *)this + 269) = 0;
  *((_QWORD *)this + 22) = (*(uint64_t (**)(const llvm::LLVMTargetMachine *))(*(_QWORD *)a2 + 24))(a2);
  *((_QWORD *)this + 259) = 0;
  *((_DWORD *)this + 526) = 0;
  *((_DWORD *)this + 534) = 0;
  *((_WORD *)this + 1054) = 0;
  return this;
}

void llvm::MachineModuleInfo::addPersonality(llvm::MachineModuleInfo *this, const Function *a2)
{
  const Function **v4;
  const Function **v5;
  const Function **v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v4 = (const Function **)*((_QWORD *)this + 260);
  v5 = (const Function **)*((_QWORD *)this + 261);
  v6 = v4;
  if (v4 != v5)
  {
    v6 = (const Function **)*((_QWORD *)this + 260);
    while (*v6 != a2)
    {
      if (++v6 == v5)
      {
        v6 = (const Function **)*((_QWORD *)this + 261);
        break;
      }
    }
  }
  if (v6 == v5)
  {
    v7 = *((_QWORD *)this + 262);
    if ((unint64_t)v5 >= v7)
    {
      v9 = v5 - v4;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v11 = v7 - (_QWORD)v4;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          sub_1C4764EE4();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[8 * v9];
      *(_QWORD *)v14 = a2;
      v8 = v14 + 8;
      if (v4 != v5)
      {
        do
        {
          v15 = (uint64_t)*--v5;
          *((_QWORD *)v14 - 1) = v15;
          v14 -= 8;
        }
        while (v5 != v4);
        v4 = (const Function **)*((_QWORD *)this + 260);
      }
      *((_QWORD *)this + 260) = v14;
      *((_QWORD *)this + 261) = v8;
      *((_QWORD *)this + 262) = &v13[8 * v12];
      if (v4)
        operator delete(v4);
    }
    else
    {
      *v5 = a2;
      v8 = v5 + 1;
    }
    *((_QWORD *)this + 261) = v8;
  }
}

uint64_t llvm::MachineModuleInfo::getMachineFunction(llvm::MachineModuleInfo *this, const Function *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  const Function *v8;

  v7 = 0;
  v8 = a2;
  if (sub_1C4E36534((uint64_t *)this + 264, &v8, &v7))
  {
    v3 = v7;
    v4 = *((_QWORD *)this + 264);
    v5 = *((unsigned int *)this + 532);
  }
  else
  {
    v4 = *((_QWORD *)this + 264);
    v5 = *((unsigned int *)this + 532);
    v3 = v4 + 16 * v5;
  }
  if (v3 == v4 + 16 * v5)
    return 0;
  else
    return *(_QWORD *)(v3 + 8);
}

llvm::MachineFunction *llvm::MachineModuleInfo::getOrCreateMachineFunction(llvm::MachineModuleInfo *this, llvm::Function *a2)
{
  llvm::MachineFunction *v3;
  llvm::MachineFunction *v6;
  const llvm::TargetSubtargetInfo *v7;
  const llvm::LLVMTargetMachine *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  llvm::FunctionGroup *v12;
  llvm::MachineFunction *v13;
  llvm::Function *v14;
  llvm::MachineFunction *v15;
  uint64_t v16;
  char v17;

  if (*((llvm::Function **)this + 268) != a2)
  {
    v14 = a2;
    v15 = 0;
    sub_1C5174F34((uint64_t)this + 2112, &v14, (uint64_t *)&v15, (uint64_t)&v16);
    v6 = v15;
    v15 = 0;
    if (v6)
    {
      llvm::MachineFunction::~MachineFunction(v6);
      MEMORY[0x1CAA32FC0]();
    }
    if (!v17)
    {
      v3 = *(llvm::MachineFunction **)(v16 + 8);
LABEL_8:
      *((_QWORD *)this + 268) = a2;
      *((_QWORD *)this + 269) = v3;
      return v3;
    }
    v7 = (const llvm::TargetSubtargetInfo *)(*(uint64_t (**)(_QWORD, llvm::Function *))(**(_QWORD **)this
                                                                                                + 16))(*(_QWORD *)this, a2);
    v3 = (llvm::MachineFunction *)operator new();
    v8 = *(const llvm::LLVMTargetMachine **)this;
    v9 = *((_DWORD *)this + 534);
    *((_DWORD *)this + 534) = v9 + 1;
    v10 = *((_QWORD *)this + 274);
    if (v10)
    {
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
    }
    else
    {
      v11 = *((_QWORD *)this + 270);
      if (!v11)
      {
        v12 = 0;
LABEL_12:
        llvm::MachineFunction::MachineFunction(v3, a2, v8, v7, v9, this, v12);
        v13 = *(llvm::MachineFunction **)(v16 + 8);
        *(_QWORD *)(v16 + 8) = v3;
        if (v13)
        {
          llvm::MachineFunction::~MachineFunction(v13);
          MEMORY[0x1CAA32FC0]();
        }
        goto LABEL_8;
      }
    }
    v12 = (llvm::FunctionGroup *)(*(uint64_t (**)(uint64_t, llvm::Function *))(*(_QWORD *)v11 + 24))(v11, a2);
    goto LABEL_12;
  }
  return (llvm::MachineFunction *)*((_QWORD *)this + 269);
}

double llvm::MachineModuleInfo::deleteMachineFunctionFor(llvm::MachineModuleInfo *this, llvm::Function *a2)
{
  double result;
  llvm::Function *v4;

  v4 = a2;
  sub_1C5174884((uint64_t)this + 2112, &v4);
  result = 0.0;
  *((_OWORD *)this + 134) = 0u;
  return result;
}

int32x2_t sub_1C5174884(uint64_t a1, _QWORD *a2)
{
  int32x2_t result;
  _QWORD *v4;
  llvm::MachineFunction *v5;
  uint64_t v6;

  v6 = 0;
  if (sub_1C4E36534((uint64_t *)a1, a2, &v6))
  {
    v4 = (_QWORD *)v6;
    v5 = *(llvm::MachineFunction **)(v6 + 8);
    *(_QWORD *)(v6 + 8) = 0;
    if (v5)
    {
      llvm::MachineFunction::~MachineFunction(v5);
      MEMORY[0x1CAA32FC0]();
    }
    *v4 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

BOOL sub_1C51748FC(uint64_t a1)
{
  int v2;
  void *__p[2];
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  if (*(char *)(a1 + 471) < 0)
  {
    sub_1C47EBC30(__p, *(void **)(a1 + 448), *(_QWORD *)(a1 + 456));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 448);
    v5 = *(_QWORD *)(a1 + 464);
  }
  v6 = *(_OWORD *)(a1 + 472);
  v7 = *(_QWORD *)(a1 + 488);
  v2 = v6;
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
  return (v2 - 27) < 3;
}

llvm::MachineModuleInfoWrapperPass *llvm::MachineModuleInfoWrapperPass::MachineModuleInfoWrapperPass(llvm::MachineModuleInfoWrapperPass *this, const llvm::LLVMTargetMachine *a2, llvm::MCContext *a3)
{
  unint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  _QWORD v9[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::MachineModuleInfoWrapperPass::ID;
  *((_DWORD *)this + 6) = 4;
  *(_QWORD *)this = &off_1E81455A8;
  llvm::MachineModuleInfo::MachineModuleInfo((llvm::MachineModuleInfoWrapperPass *)((char *)this + 32), a2, a3);
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v7 = qword_1ED830BC0[0];
  v5 = atomic_load(&qword_1ED82F6A0);
  if (v5 != -1)
  {
    v9[0] = sub_1C5174A50;
    v9[1] = &v7;
    v8 = v9;
    std::__call_once(&qword_1ED82F6A0, &v8, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

uint64_t sub_1C5174A50(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeFunctionGroupInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Machine Module Information";
  *(_QWORD *)(v2 + 8) = 26;
  *(_QWORD *)(v2 + 16) = "machinemoduleinfo";
  *(_QWORD *)(v2 + 24) = 17;
  *(_QWORD *)(v2 + 32) = &llvm::MachineModuleInfoWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::MachineModuleInfoWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::MachineModuleInfoWrapperPass::doInitialization(llvm::MachineModuleInfoWrapperPass *this, llvm::Module *a2)
{
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  void (**v7)(_QWORD *);
  BOOL v8;
  uint64_t v10;
  int v11;
  int v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 263) = 0;
  *((_DWORD *)this + 534) = 0;
  *((_DWORD *)this + 542) = 0;
  *((_WORD *)this + 1070) = 0;
  *((_QWORD *)this + 262) = a2;
  v4 = *(_QWORD *)a2;
  v5 = (char *)*((_QWORD *)this + 261);
  if (!v5)
    v5 = (char *)this + 40;
  v13[0] = &off_1E8145758;
  v13[1] = v4;
  v13[2] = a2;
  v14 = v13;
  sub_1C4D7BD48((_QWORD *)v5 + 14, v13);
  v6 = v14;
  if (v14 == v13)
  {
    v7 = (void (**)(_QWORD *))(v13[0] + 32);
    v6 = v13;
LABEL_5:
    (*v7)(v6);
    goto LABEL_6;
  }
  if (v14)
  {
    v7 = (void (**)(_QWORD *))(*v14 + 40);
    goto LABEL_5;
  }
LABEL_6:
  if (byte_1ED7FB0C8)
  {
    v8 = 0;
  }
  else
  {
    sub_1C5174BF0((uint64_t)a2, &v10);
    v8 = v11 != v12;
  }
  *((_BYTE *)this + 2140) = v8;
  return 0;
}

uint64_t sub_1C5174BF0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  const char *v8;
  __int16 v9;

  v8 = "llvm.dbg.cu";
  v9 = 259;
  result = llvm::Module::getNamedMetadata(a1, (uint64_t)&v8);
  if (result && (v6 = *(uint64_t **)(result + 48), v5 = *((unsigned int *)v6 + 2), (_DWORD)v5))
  {
    v4 = 0;
    v7 = *v6;
    while (!*(_DWORD *)(*(_QWORD *)(v7 + 8 * v4) + 36))
    {
      if (v5 == ++v4)
      {
        LODWORD(v4) = v5;
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
    v5 = 0;
  }
  *a2 = result;
  a2[1] = v4;
  a2[2] = result;
  a2[3] = v5;
  return result;
}

uint64_t llvm::MachineModuleInfoWrapperPass::doFinalization(llvm::MachineModuleInfoWrapperPass *this, llvm::Module *a2)
{
  uint64_t v3;

  *((_QWORD *)this + 265) = *((_QWORD *)this + 264);
  llvm::MCContext::reset((llvm::MachineModuleInfoWrapperPass *)((char *)this + 40));
  v3 = *((_QWORD *)this + 263);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 263) = 0;
  return 0;
}

uint64_t llvm::MachineModuleAnalysis::run@<X0>(const llvm::LLVMTargetMachine **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v8;
  uint64_t result;
  uint64_t (**v10)(void);
  uint64_t v11;
  int v12;
  int v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  llvm::MachineModuleInfo::MachineModuleInfo((llvm::MachineModuleInfo *)a4, *a1);
  *(_QWORD *)(a4 + 2064) = a2;
  if (byte_1ED7FB0C8)
  {
    v8 = 0;
  }
  else
  {
    sub_1C5174BF0(a2, &v11);
    v8 = v12 != v13;
  }
  *(_BYTE *)(a4 + 2108) = v8;
  result = sub_1C51748FC((uint64_t)*a1);
  if ((_DWORD)result)
  {
    v14[0] = &off_1E81457A0;
    v14[1] = a2;
    v14[2] = a3;
    v15 = v14;
    sub_1C61F3014((_QWORD *)(a4 + 2168), v14);
    result = (uint64_t)v15;
    if (v15 == v14)
    {
      v10 = (uint64_t (**)(void))(v14[0] + 32);
    }
    else
    {
      if (!v15)
        return result;
      v10 = (uint64_t (**)(void))(*v15 + 40);
    }
    return (*v10)();
  }
  return result;
}

void sub_1C5174DD4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5174DF8()
{
  return "Free MachineFunction";
}

void *sub_1C5174E08(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::MachineModuleInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::MachineModuleInfoWrapperPass::ID);
}

uint64_t sub_1C5174E44(uint64_t a1, uint64_t a2)
{
  void **v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  v3 = **(void ****)(a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::MachineModuleInfoWrapperPass::ID);
  v5 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::MachineModuleInfoWrapperPass::ID);
  v7 = a2;
  sub_1C5174884(v5 + 2144, &v7);
  *(_OWORD *)(v5 + 2176) = 0u;
  return 1;
}

unsigned int *sub_1C5174EBC(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int **v3;
  unsigned int **v4;
  uint64_t v5;

  v1 = result[4];
  if ((_DWORD)v1)
  {
    v2 = 16 * v1;
    v3 = (unsigned int **)(*(_QWORD *)result + 8);
    do
    {
      if (((unint64_t)*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        result = *v3;
        *v3 = 0;
        if (result)
        {
          v4 = v3;
          v5 = v2;
          llvm::MachineFunction::~MachineFunction((llvm::MachineFunction *)result);
          result = (unsigned int *)MEMORY[0x1CAA32FC0]();
          v3 = v4;
          v2 = v5;
        }
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1C5174F34@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v13 = 0;
  result = sub_1C4E36534((uint64_t *)a1, a2, &v13);
  v9 = v13;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C5174FC8(a1, (uint64_t)a2, a2, v13);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v11 = *a3;
    *a3 = 0;
    *(_QWORD *)(result + 8) = v11;
    v10 = 1;
  }
  v12 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v12;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *sub_1C5174FC8(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5175074(a1, v7);
  v9 = 0;
  sub_1C4E36534((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C5175074(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  llvm::MachineFunction *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (_QWORD *)v4;
      do
      {
        if (*v13 != -8192 && *v13 != -4096)
        {
          v19 = 0;
          sub_1C4E36534((uint64_t *)a1, v13, &v19);
          v14 = v19;
          *v19 = *v13;
          v15 = v13[1];
          v13[1] = 0;
          v14[1] = v15;
          ++*(_DWORD *)(a1 + 8);
          v16 = (llvm::MachineFunction *)v13[1];
          v13[1] = 0;
          if (v16)
          {
            llvm::MachineFunction::~MachineFunction(v16);
            MEMORY[0x1CAA32FC0]();
          }
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 16 * v17;
    do
    {
      *result = -4096;
      result += 2;
      v18 -= 16;
    }
    while (v18);
  }
  return result;
}

void sub_1C51751DC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C51751F0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8145710;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5175224(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8145710;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C5175240(uint64_t a1)
{
  void **v1;
  void *v2;

  v1 = **(void ****)(*(_QWORD *)(a1 + 8) + 8);
  do
  {
    v2 = *v1;
    v1 += 2;
  }
  while (v2 != &llvm::FunctionGroupInfoWrapperPass::ID);
  return *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v1 - 1) + 96))(*(v1 - 1), &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
}

void sub_1C5175290()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C51752A4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E8145758;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C51752DC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8145758;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C51752FC(uint64_t a1, uint64_t a2, char *a3, uint64_t *a4, _QWORD *a5)
{
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int BufferContainingLoc;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;

  v7 = *a3;
  if (!*a3)
    goto LABEL_2;
  BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(a4, *(_QWORD *)(a2 + 8));
  if (!BufferContainingLoc)
    goto LABEL_2;
  if (BufferContainingLoc > (unint64_t)((uint64_t)(a5[1] - *a5) >> 3))
    goto LABEL_2;
  v21 = *(_QWORD *)(*a5 + 8 * (BufferContainingLoc - 1));
  if (!v21)
    goto LABEL_2;
  v22 = *(unsigned int *)(v21 + 8);
  if (!(_DWORD)v22)
    goto LABEL_2;
  v8 = 0;
  v23 = *(_DWORD *)(a2 + 40) - 1;
  if (v23 >= v22)
    v23 = 0;
  v24 = *(_QWORD *)(v21 - 8 * v22 + 8 * v23);
  if (*(_BYTE *)v24 == 1)
  {
    v25 = *(_QWORD *)(v24 + 128);
    if (*(_BYTE *)(v25 + 16) == 16)
    {
      v26 = (_QWORD *)(v25 + 24);
      if (*(_DWORD *)(v25 + 32) >= 0x41u)
        v26 = (_QWORD *)*v26;
      v8 = *(_DWORD *)v26;
      goto LABEL_3;
    }
LABEL_2:
    v8 = 0;
  }
LABEL_3:
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(v10 + 168);
  v11 = v10 + 168;
  v12 = v13;
  v14 = *(_BYTE *)(v11 + 23);
  v15 = *(_QWORD *)(v11 + 8);
  v16 = *(_DWORD *)(a2 + 48);
  if (v14 < 0)
    v11 = v12;
  v17 = v14 & 0x7F;
  if (v14 < 0)
    v17 = v15;
  v28 = 23;
  v29 = v16;
  v27 = &unk_1E814E900;
  v30 = a2;
  v31 = v11;
  v32 = v17;
  v33 = v7;
  v34 = v8;
  return llvm::LLVMContext::diagnose(v9, (const llvm::DiagnosticInfo *)&v27);
}

void sub_1C5175428()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C517543C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E81457A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C5175474(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E81457A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C5175494(uint64_t a1)
{
  return *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(*(_QWORD *)(a1 + 16), &llvm::FunctionGroupAnalysis::Key, *(_QWORD *)(a1 + 8))+ 8);
}

uint64_t sub_1C51754BC()
{
  __int128 v1;
  int v2;

  v2 = 1;
  *(_QWORD *)&v1 = "Disable debug info printing";
  *((_QWORD *)&v1 + 1) = 27;
  sub_1C61B2D38((uint64_t)&unk_1ED7FB048, "disable-debug-info-print", &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FB048, &dword_1C475E000);
}

unsigned int *llvm::MachineModuleInfoImpl::getSortedStubs@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_OWORD **)a1;
  v5 = a1[4];
  v6 = (_OWORD *)(*(_QWORD *)a1 + 16 * v5);
  if (a1[2])
  {
    if ((_DWORD)v5)
    {
      v7 = 16 * v5;
      while ((*(_QWORD *)v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v4;
        v7 -= 16;
        if (!v7)
          goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    v4 = v6;
  }
  v8 = sub_1C5175938(a2, v4, v6, v6, (uint64_t)v6);
  v9 = *(_QWORD *)(v8 + 8) - *(_QWORD *)v8;
  if (v9 >= 32)
    qsort(*(void **)v8, (unint64_t)v9 >> 4, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_1C51755C4);
  return sub_1C61446F0(a1);
}

uint64_t sub_1C51755C4(_QWORD *a1, _QWORD *a2)
{
  const void *v2;
  size_t v3;
  size_t *v4;
  size_t v5;
  const void *v6;
  size_t v7;
  size_t *v8;
  size_t v9;
  size_t v10;
  int v11;
  unsigned int v13;

  if ((*(_BYTE *)*a1 & 4) != 0)
  {
    v4 = *(size_t **)(*a1 - 8);
    v5 = *v4;
    v2 = v4 + 2;
    v3 = v5;
  }
  else
  {
    v2 = 0;
    v3 = 0;
  }
  if ((*(_BYTE *)*a2 & 4) != 0)
  {
    v8 = *(size_t **)(*a2 - 8);
    v9 = *v8;
    v6 = v8 + 2;
    v7 = v9;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  if (v7 >= v3)
    v10 = v3;
  else
    v10 = v7;
  if (v10)
  {
    v11 = memcmp(v2, v6, v10);
    if (v11)
      return (v11 >> 31) | 1u;
  }
  if (v3 < v7)
    v13 = -1;
  else
    v13 = 1;
  if (v3 == v7)
    return 0;
  else
    return v13;
}

uint64_t llvm::MachineModuleInfoMachO::getAuthGVStubList@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t **v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = this;
  v4 = this + 56;
  v5 = *(_DWORD *)(this + 64);
  if (v5)
  {
    v6 = *(unsigned int *)(this + 72);
    if ((_DWORD)v6)
    {
      v7 = 16 * v6;
      v8 = *(_QWORD **)(this + 56);
      while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v8 += 2;
        v7 -= 16;
        if (!v7)
          goto LABEL_6;
      }
    }
    else
    {
      v8 = *(_QWORD **)(this + 56);
    }
    v16 = *(_QWORD *)(this + 56) + 16 * v6;
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (v8 != (_QWORD *)v16)
    {
      v17 = 0;
      v18 = v8;
LABEL_28:
      v19 = v17++;
      while (1)
      {
        v18 += 2;
        if (v18 == (_QWORD *)v16)
          break;
        if ((*v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v18 != (_QWORD *)v16)
            goto LABEL_28;
          break;
        }
      }
      if (v19 >= 0xFFFFFFFFFFFFFFFLL)
        abort();
      this = (uint64_t)operator new(16 * v17);
      *a2 = this;
      a2[1] = this;
      a2[2] = this + 16 * v17;
      v20 = (uint64_t **)this;
      while (2)
      {
        *(_OWORD *)v20 = *(_OWORD *)v8;
        do
        {
          v8 += 2;
          if (v8 == (_QWORD *)v16)
          {
            v20 += 2;
            goto LABEL_40;
          }
        }
        while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000);
        v20 += 2;
        if (v8 != (_QWORD *)v16)
          continue;
        break;
      }
LABEL_40:
      a2[1] = v20;
      if (v20 != (uint64_t **)this)
      {
        this = sub_1C5175A50(this, v20, 126 - 2 * __clz(((uint64_t)v20 - this) >> 4), 1);
        v5 = *(_DWORD *)(v2 + 64);
      }
    }
  }
  else
  {
LABEL_6:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  if (v5)
  {
    v9 = *(_DWORD *)(v2 + 72);
    if (v9 > 4 * v5 && v9 >= 0x41)
    {
      v10 = 1 << (33 - __clz(v5 - 1));
      if (v10 <= 64)
        v11 = 64;
      else
        v11 = v10;
LABEL_16:
      if (v11 == v9)
      {
        *(_QWORD *)(v2 + 64) = 0;
        v12 = 16 * v9;
        v13 = *(_QWORD **)(v2 + 56);
        do
        {
          *v13 = -4096;
          v13 += 2;
          v12 -= 16;
        }
        while (v12);
      }
      else
      {
        this = MEMORY[0x1CAA32FB4](*(_QWORD *)v4, 8);
        if (v11)
        {
          v21 = (4 * v11 / 3u + 1) | ((unint64_t)(4 * v11 / 3u + 1) >> 1);
          v22 = v21 | (v21 >> 2) | ((v21 | (v21 >> 2)) >> 4);
          LODWORD(v22) = (((v22 | (v22 >> 8)) >> 16) | v22 | (v22 >> 8)) + 1;
          *(_DWORD *)(v2 + 72) = v22;
          this = (uint64_t)operator new(16 * v22, (std::align_val_t)8uLL);
          *(_QWORD *)(v2 + 56) = this;
          *(_QWORD *)(v2 + 64) = 0;
          v23 = *(unsigned int *)(v2 + 72);
          if ((_DWORD)v23)
          {
            v24 = 16 * v23;
            do
            {
              *(_QWORD *)this = -4096;
              this += 16;
              v24 -= 16;
            }
            while (v24);
          }
        }
        else
        {
          *(_QWORD *)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
          *(_DWORD *)(v4 + 16) = 0;
        }
      }
      return this;
    }
  }
  else
  {
    if (!*(_DWORD *)(v2 + 68))
      return this;
    v9 = *(_DWORD *)(v2 + 72);
    if (v9 > 0x40)
    {
      v11 = 0;
      goto LABEL_16;
    }
  }
  if (v9)
  {
    v14 = *(_QWORD **)v4;
    v15 = 16 * v9;
    do
    {
      *v14 = -4096;
      v14 += 2;
      v15 -= 16;
    }
    while (v15);
  }
  *(_QWORD *)(v2 + 64) = 0;
  return this;
}

_QWORD *sub_1C51758C8(_QWORD *a1)
{
  *a1 = &off_1E8145860;
  sub_1C4F02264((uint64_t)(a1 + 1));
  return a1;
}

void sub_1C51758F8(_QWORD *a1)
{
  *a1 = &off_1E8145860;
  sub_1C4F02264((uint64_t)(a1 + 1));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5175938(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4, uint64_t a5)
{
  unint64_t v6;
  _QWORD *v7;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a2 != a4)
  {
    v6 = 0;
    v7 = a2;
    while (1)
    {
      v7 += 2;
      if (v7 == (_QWORD *)a3)
      {
        v7 = a3;
LABEL_7:
        ++v6;
        if (v7 == (_QWORD *)a4)
          goto LABEL_10;
      }
      else if ((*v7 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        goto LABEL_7;
      }
    }
  }
  v6 = 0;
LABEL_10:
  sub_1C51759B0((_OWORD *)a1, a2, a3, a4, a5, v6);
  return a1;
}

_OWORD *sub_1C51759B0(_OWORD *result, _OWORD *a2, _OWORD *a3, _OWORD *a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v10;

  if (a6)
  {
    if (a6 >> 60)
      abort();
    v10 = result;
    result = operator new(16 * a6);
    *v10 = result;
    v10[1] = result;
    v10[2] = &result[a6];
    while (a2 != a4)
    {
      *result = *a2;
      while (++a2 != a3)
      {
        if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_10;
      }
      a2 = a3;
LABEL_10:
      ++result;
    }
    v10[1] = result;
  }
  return result;
}

uint64_t sub_1C5175A50(uint64_t result, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t v15;
  _BYTE *v16;
  const void *v17;
  size_t v18;
  size_t *v19;
  size_t v20;
  const void *v21;
  size_t v22;
  size_t *v23;
  size_t v24;
  size_t v25;
  int v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  const void *v31;
  size_t v32;
  size_t *v33;
  const void *v34;
  size_t v35;
  size_t v36;
  size_t *v37;
  size_t v38;
  size_t v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t **v43;
  uint64_t **v44;
  const void *v45;
  size_t v46;
  size_t *v47;
  const void *v48;
  size_t v49;
  size_t v50;
  size_t *v51;
  size_t v52;
  size_t v53;
  int v54;
  int v55;
  uint64_t **v56;
  const void *v57;
  size_t v58;
  size_t *v59;
  const void *v60;
  size_t v61;
  size_t v62;
  size_t *v63;
  size_t v64;
  size_t v65;
  int v66;
  int v67;
  uint64_t *v68;
  uint64_t **v69;
  uint64_t *v70;
  uint64_t **v71;
  const void *v72;
  size_t v73;
  size_t *v74;
  const void *v75;
  size_t v76;
  size_t v77;
  size_t *v78;
  size_t v79;
  size_t v80;
  int v81;
  int v82;
  uint64_t **v83;
  const void *v84;
  size_t v85;
  size_t *v86;
  const void *v87;
  size_t v88;
  size_t v89;
  size_t *v90;
  size_t v91;
  size_t v92;
  int v93;
  int v94;
  BOOL v95;
  size_t *v96;
  size_t v97;
  const void *v98;
  size_t v99;
  size_t *v100;
  size_t v101;
  uint64_t *v102;
  size_t v103;
  uint64_t **v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  const void *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  size_t v112;
  int v113;
  uint64_t **v114;
  size_t v115;
  size_t *v116;
  size_t v117;
  const void *v118;
  size_t v119;
  size_t *v120;
  size_t v121;
  size_t v122;
  int v123;
  uint64_t **v124;
  uint64_t **v125;
  size_t v126;
  size_t *v127;
  size_t v128;
  const void *v129;
  size_t v130;
  size_t *v131;
  size_t v132;
  size_t v133;
  int v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t **v138;
  const void *v139;
  size_t v140;
  size_t *v141;
  size_t v142;
  const void *v143;
  size_t v144;
  size_t *v145;
  size_t v146;
  size_t v147;
  int v148;
  int v149;
  uint64_t **v150;
  size_t v151;
  size_t *v152;
  size_t v153;
  const void *v154;
  size_t v155;
  size_t *v156;
  size_t v157;
  size_t v158;
  int v159;
  _BYTE *v160;
  size_t v161;
  uint64_t **v162;
  BOOL v164;
  uint64_t v165;
  uint64_t **v166;
  uint64_t **v167;
  uint64_t *v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t *v173;
  const void *v174;
  unint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  size_t v178;
  uint64_t *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t **v183;
  unint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  const void *v187;
  unint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  size_t v191;
  int v192;
  int64_t v193;
  int64_t v194;
  int64_t v195;
  uint64_t v196;
  uint64_t **v197;
  uint64_t v198;
  _QWORD *v199;
  const void *v200;
  size_t v201;
  size_t *v202;
  size_t v203;
  const void *v204;
  size_t v205;
  size_t *v206;
  size_t v207;
  size_t v208;
  int v209;
  int v210;
  uint64_t *v211;
  unint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  uint64_t **v215;
  uint64_t v216;
  const void *v217;
  unint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  size_t v221;
  uint64_t *v222;
  uint64_t **v223;
  uint64_t v224;
  _QWORD *v225;
  const void *v226;
  size_t v227;
  size_t *v228;
  size_t v229;
  const void *v230;
  size_t v231;
  size_t *v232;
  size_t v233;
  size_t v234;
  int v235;
  int v236;
  size_t v237;
  size_t *v238;
  const void *v239;
  size_t v240;
  size_t v241;
  size_t *v242;
  size_t v243;
  size_t v244;
  int v245;
  uint64_t **v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t **v251;
  size_t v252;
  size_t *v253;
  size_t v254;
  const void *v255;
  size_t v256;
  size_t *v257;
  size_t v258;
  size_t v259;
  int v260;
  uint64_t **v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t **v264;
  uint64_t *v265;
  size_t v266;
  size_t *v267;
  size_t v268;
  uint64_t v269;
  const void *v270;
  size_t v271;
  size_t *v272;
  size_t v273;
  size_t v274;
  BOOL v275;
  uint64_t **v276;
  size_t v277;
  size_t *v278;
  const void *v279;
  size_t v280;
  size_t v281;
  size_t *v282;
  size_t v283;
  size_t v284;
  int v285;
  size_t *v287;
  size_t v288;
  uint64_t *v289;
  const void *v290;
  size_t v291;
  size_t *v292;
  size_t v293;
  size_t v294;
  uint64_t *v295;
  uint64_t **i;
  uint64_t **v297;
  uint64_t *v298;
  uint64_t v299;
  size_t v300;
  size_t *v301;
  size_t v302;
  uint64_t **v303;
  uint64_t *v304;
  const void *v305;
  size_t v306;
  size_t *v307;
  size_t v308;
  size_t v309;
  uint64_t *v310;
  uint64_t **v311;
  uint64_t **v312;
  uint64_t *v313;
  size_t v314;
  size_t *v315;
  size_t v316;
  const void *v317;
  size_t v318;
  size_t *v319;
  size_t v320;
  size_t v321;
  int v322;
  uint64_t *v324;
  uint64_t *v325;
  uint64_t v326;
  int64_t v327;
  uint64_t *v328;
  uint64_t **v329;
  uint64_t *v330;
  uint64_t *v331;
  uint64_t *v332;
  uint64_t *v334;
  uint64_t **v335;

  v5 = result;
LABEL_2:
  v329 = a2 - 2;
  v6 = (uint64_t **)v5;
  while (2)
  {
    v7 = v6;
    v8 = (char *)a2 - (char *)v6;
    v9 = ((char *)a2 - (char *)v6) >> 4;
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v160 = *(a2 - 2);
        if ((*v160 & 4) != 0)
        {
          v287 = (size_t *)*((_QWORD *)v160 - 1);
          v288 = *v287;
          result = (uint64_t)(v287 + 2);
          v161 = v288;
        }
        else
        {
          result = 0;
          v161 = 0;
        }
        v289 = *v7;
        if ((*(_BYTE *)*v7 & 4) != 0)
        {
          v292 = (size_t *)*(v289 - 1);
          v293 = *v292;
          v290 = v292 + 2;
          v291 = v293;
        }
        else
        {
          v290 = 0;
          v291 = 0;
        }
        if (v291 >= v161)
          v294 = v161;
        else
          v294 = v291;
        if (v294 && (result = memcmp((const void *)result, v290, v294), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v161 >= v291)
        {
          return result;
        }
        *v7 = (uint64_t *)v160;
        *(a2 - 2) = v289;
        v295 = v7[1];
        v7[1] = *(a2 - 1);
        *(a2 - 1) = v295;
        return result;
      case 3:
        return (uint64_t)sub_1C5176D88(v7, v7 + 2, v329);
      case 4:
        return (uint64_t)sub_1C51772EC(v7, v7 + 2, v7 + 4, v329);
      case 5:
        return (uint64_t)sub_1C5176B48(v7, v7 + 2, v7 + 4, v7 + 6, v329);
      default:
        v335 = v7;
        if (v8 <= 383)
        {
          v162 = v7 + 2;
          v164 = v7 == a2 || v162 == a2;
          if ((a4 & 1) != 0)
          {
            if (v164)
              return result;
            v165 = 0;
            v166 = v7;
            while (1)
            {
              v167 = v166;
              v166 = v162;
              v168 = v167[2];
              v169 = *v168;
              if ((*v168 & 4) != 0)
              {
                v171 = (unint64_t *)*(v168 - 1);
                v172 = *v171;
                result = (uint64_t)(v171 + 2);
                v170 = v172;
              }
              else
              {
                result = 0;
                v170 = 0;
              }
              v173 = *v167;
              if ((*(_BYTE *)*v167 & 4) != 0)
              {
                v176 = (unint64_t *)*(v173 - 1);
                v177 = *v176;
                v174 = v176 + 2;
                v175 = v177;
              }
              else
              {
                v174 = 0;
                v175 = 0;
              }
              v178 = v175 >= v170 ? v170 : v175;
              if (v178 && (result = memcmp((const void *)result, v174, v178), (_DWORD)result))
              {
                if ((result & 0x80000000) == 0)
                  goto LABEL_280;
              }
              else if (v170 >= v175)
              {
                goto LABEL_280;
              }
              v179 = v167[3];
              v180 = v165;
              while (1)
              {
                v181 = (char *)v335 + v180;
                v182 = *(uint64_t *)((char *)v335 + v180 + 8);
                *((_QWORD *)v181 + 2) = v173;
                *((_QWORD *)v181 + 3) = v182;
                if (!v180)
                {
                  v183 = v335;
                  goto LABEL_279;
                }
                v183 = v167;
                if ((v169 & 4) != 0)
                {
                  v185 = (unint64_t *)*(v168 - 1);
                  v186 = *v185;
                  result = (uint64_t)(v185 + 2);
                  v184 = v186;
                }
                else
                {
                  result = 0;
                  v184 = 0;
                }
                v173 = (uint64_t *)*((_QWORD *)v181 - 2);
                if ((*(_BYTE *)v173 & 4) != 0)
                {
                  v189 = (unint64_t *)*(v173 - 1);
                  v190 = *v189;
                  v187 = v189 + 2;
                  v188 = v190;
                }
                else
                {
                  v187 = 0;
                  v188 = 0;
                }
                v191 = v188 >= v184 ? v184 : v188;
                if (!v191)
                  break;
                result = memcmp((const void *)result, v187, v191);
                if (!(_DWORD)result)
                  break;
                v192 = ((int)result >> 31) | 1;
LABEL_275:
                v167 = v183 - 2;
                v180 -= 16;
                if (v192 != -1)
                  goto LABEL_279;
              }
              if (v184 < v188)
                break;
              v183 = (uint64_t **)((char *)v335 + v180);
LABEL_279:
              *v183 = v168;
              v183[1] = v179;
LABEL_280:
              v162 = v166 + 2;
              v165 += 16;
              if (v166 + 2 == a2)
                return result;
            }
            v192 = -1;
            goto LABEL_275;
          }
          if (v164)
            return result;
          for (i = v7 + 1; ; i += 2)
          {
            v297 = v7;
            v298 = v7[2];
            v299 = *v298;
            if ((*v298 & 4) != 0)
            {
              v301 = (size_t *)*(v298 - 1);
              v302 = *v301;
              result = (uint64_t)(v301 + 2);
              v300 = v302;
            }
            else
            {
              result = 0;
              v300 = 0;
            }
            v303 = v162;
            v304 = *v7;
            if ((*(_BYTE *)*v7 & 4) != 0)
            {
              v307 = (size_t *)*(v304 - 1);
              v308 = *v307;
              v305 = v307 + 2;
              v306 = v308;
            }
            else
            {
              v305 = 0;
              v306 = 0;
            }
            if (v306 >= v300)
              v309 = v300;
            else
              v309 = v306;
            if (v309 && (result = memcmp((const void *)result, v305, v309), (_DWORD)result))
            {
              v7 = v303;
              if ((result & 0x80000000) == 0)
                goto LABEL_468;
            }
            else
            {
              v275 = v300 >= v306;
              v7 = v303;
              if (v275)
                goto LABEL_468;
            }
            v310 = v297[3];
            v311 = i;
            do
            {
              v312 = v311;
              v313 = *v311;
              v312[1] = v304;
              v312[2] = v313;
              if ((v299 & 4) != 0)
              {
                v315 = (size_t *)*(v298 - 1);
                v316 = *v315;
                result = (uint64_t)(v315 + 2);
                v314 = v316;
              }
              else
              {
                result = 0;
                v314 = 0;
              }
              v304 = *(v312 - 3);
              if ((*(_BYTE *)v304 & 4) != 0)
              {
                v319 = (size_t *)*(v304 - 1);
                v320 = *v319;
                v317 = v319 + 2;
                v318 = v320;
              }
              else
              {
                v317 = 0;
                v318 = 0;
              }
              if (v318 >= v314)
                v321 = v314;
              else
                v321 = v318;
              if (v321 && (result = memcmp((const void *)result, v317, v321), (_DWORD)result))
              {
                v322 = ((int)result >> 31) | 1;
                v7 = v303;
              }
              else
              {
                v275 = v314 >= v318;
                v7 = v303;
                if (v275)
                  break;
                v322 = -1;
              }
              v311 = v312 - 2;
            }
            while (v322 == -1);
            *(v312 - 1) = v298;
            *v312 = v310;
LABEL_468:
            v162 = v7 + 2;
            if (v7 + 2 == a2)
              return result;
          }
        }
        if (!a3)
        {
          if (v7 == a2)
            return result;
          v193 = (unint64_t)(v9 - 2) >> 1;
          v194 = v193;
          while (1)
          {
            v195 = v194;
            if (v193 < v194)
              goto LABEL_360;
            v196 = (2 * v194) | 1;
            v197 = &v335[2 * v196];
            v198 = 2 * v194 + 2;
            v327 = v194;
            if (v198 < v9)
            {
              v199 = v197 + 2;
              if ((*(_BYTE *)*v197 & 4) != 0)
              {
                v202 = (size_t *)*(*v197 - 1);
                v203 = *v202;
                v200 = v202 + 2;
                v201 = v203;
              }
              else
              {
                v200 = 0;
                v201 = 0;
              }
              if ((*(_BYTE *)*v199 & 4) != 0)
              {
                v206 = *(size_t **)(*v199 - 8);
                v207 = *v206;
                v204 = v206 + 2;
                v205 = v207;
              }
              else
              {
                v204 = 0;
                v205 = 0;
              }
              if (v205 >= v201)
                v208 = v201;
              else
                v208 = v205;
              if (v208 && (v209 = memcmp(v200, v204, v208)) != 0)
              {
                v210 = (v209 >> 31) | 1;
              }
              else
              {
                if (v201 < v205)
                  v210 = -1;
                else
                  v210 = 1;
                if (v201 == v205)
                  v210 = 0;
              }
              if (v210 == -1)
              {
                v197 += 2;
                v196 = v198;
              }
            }
            v211 = *v197;
            if ((*(_BYTE *)*v197 & 4) != 0)
            {
              v213 = (unint64_t *)*(v211 - 1);
              v214 = *v213;
              result = (uint64_t)(v213 + 2);
              v212 = v214;
            }
            else
            {
              result = 0;
              v212 = 0;
            }
            v215 = &v335[2 * v327];
            v216 = **v215;
            v330 = *v215;
            if ((v216 & 4) != 0)
            {
              v219 = (unint64_t *)*(*v215 - 1);
              v220 = *v219;
              v217 = v219 + 2;
              v218 = v220;
            }
            else
            {
              v217 = 0;
              v218 = 0;
            }
            v221 = v218 >= v212 ? v212 : v218;
            if (!v221)
              break;
            result = memcmp((const void *)result, v217, v221);
            if (!(_DWORD)result)
              break;
            v195 = v327;
            if ((result & 0x80000000) == 0)
              goto LABEL_319;
LABEL_360:
            v194 = v195 - 1;
            if (!v195)
            {
              v246 = v335;
              while (1)
              {
                v247 = 0;
                v328 = v246[1];
                v331 = *v246;
                do
                {
                  v248 = (uint64_t)&v246[2 * v247 + 2];
                  v249 = (2 * v247) | 1;
                  v250 = 2 * v247 + 2;
                  if (v250 < v9)
                  {
                    v251 = &v246[2 * v247 + 4];
                    if ((**(_BYTE **)v248 & 4) != 0)
                    {
                      v253 = *(size_t **)(*(_QWORD *)v248 - 8);
                      v254 = *v253;
                      result = (uint64_t)(v253 + 2);
                      v252 = v254;
                    }
                    else
                    {
                      result = 0;
                      v252 = 0;
                    }
                    if ((*(_BYTE *)*v251 & 4) != 0)
                    {
                      v257 = (size_t *)*(*v251 - 1);
                      v258 = *v257;
                      v255 = v257 + 2;
                      v256 = v258;
                    }
                    else
                    {
                      v255 = 0;
                      v256 = 0;
                    }
                    if (v256 >= v252)
                      v259 = v252;
                    else
                      v259 = v256;
                    if (v259 && (result = memcmp((const void *)result, v255, v259), (_DWORD)result))
                    {
                      v260 = ((int)result >> 31) | 1;
                    }
                    else
                    {
                      if (v252 < v256)
                        v260 = -1;
                      else
                        v260 = 1;
                      if (v252 == v256)
                        v260 = 0;
                    }
                    if (v260 == -1)
                    {
                      v248 += 16;
                      v249 = v250;
                    }
                  }
                  *v246 = *(uint64_t **)v248;
                  v246[1] = *(uint64_t **)(v248 + 8);
                  v246 = (uint64_t **)v248;
                  v247 = v249;
                }
                while (v249 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
                v261 = a2 - 2;
                if ((uint64_t **)v248 == a2 - 2)
                {
                  *(_QWORD *)v248 = v331;
                  *(_QWORD *)(v248 + 8) = v328;
                  goto LABEL_418;
                }
                *(_QWORD *)v248 = *(a2 - 2);
                *(_QWORD *)(v248 + 8) = *(a2 - 1);
                *(a2 - 2) = v331;
                *(a2 - 1) = v328;
                v246 = v335;
                v262 = v248 - (_QWORD)v335 + 16;
                if (v262 >= 17)
                  break;
LABEL_419:
                a2 = v261;
                if (v9-- <= 2)
                  return result;
              }
              v263 = (((unint64_t)v262 >> 4) - 2) >> 1;
              v264 = &v335[2 * v263];
              v265 = *v264;
              if ((*(_BYTE *)*v264 & 4) != 0)
              {
                v267 = (size_t *)*(v265 - 1);
                v268 = *v267;
                result = (uint64_t)(v267 + 2);
                v266 = v268;
              }
              else
              {
                result = 0;
                v266 = 0;
              }
              v269 = **(_QWORD **)v248;
              v334 = *(uint64_t **)v248;
              if ((v269 & 4) != 0)
              {
                v272 = *(size_t **)(*(_QWORD *)v248 - 8);
                v273 = *v272;
                v270 = v272 + 2;
                v271 = v273;
              }
              else
              {
                v270 = 0;
                v271 = 0;
              }
              if (v271 >= v266)
                v274 = v266;
              else
                v274 = v271;
              if (v274 && (result = memcmp((const void *)result, v270, v274), (_DWORD)result))
              {
                v246 = v335;
                if ((result & 0x80000000) == 0)
                  goto LABEL_419;
              }
              else
              {
                v275 = v266 >= v271;
                v246 = v335;
                if (v275)
                  goto LABEL_419;
              }
              v332 = *(uint64_t **)(v248 + 8);
              while (1)
              {
                v276 = v264;
                *(_QWORD *)v248 = v265;
                *(_QWORD *)(v248 + 8) = v264[1];
                if (!v263)
                {
LABEL_417:
                  *v276 = v334;
                  v276[1] = v332;
LABEL_418:
                  v246 = v335;
                  goto LABEL_419;
                }
                v263 = (v263 - 1) >> 1;
                v264 = &v335[2 * v263];
                v265 = *v264;
                if ((*(_BYTE *)*v264 & 4) != 0)
                {
                  v282 = (size_t *)*(v265 - 1);
                  v283 = *v282;
                  result = (uint64_t)(v282 + 2);
                  v277 = v283;
                  if ((v269 & 4) == 0)
                  {
LABEL_407:
                    v279 = 0;
                    v280 = 0;
                    goto LABEL_408;
                  }
                }
                else
                {
                  result = 0;
                  v277 = 0;
                  if ((v269 & 4) == 0)
                    goto LABEL_407;
                }
                v278 = (size_t *)*(v334 - 1);
                v281 = *v278;
                v279 = v278 + 2;
                v280 = v281;
LABEL_408:
                if (v280 >= v277)
                  v284 = v277;
                else
                  v284 = v280;
                if (v284 && (result = memcmp((const void *)result, v279, v284), (_DWORD)result))
                {
                  v285 = ((int)result >> 31) | 1;
                }
                else
                {
                  if (v277 >= v280)
                    goto LABEL_417;
                  v285 = -1;
                }
                v248 = (uint64_t)v276;
                if (v285 != -1)
                  goto LABEL_417;
              }
            }
          }
          v195 = v327;
          if (v212 < v218)
            goto LABEL_360;
LABEL_319:
          v325 = v215[1];
          v222 = v330;
          while (1)
          {
            v223 = v197;
            *v215 = v211;
            v215[1] = v197[1];
            if (v193 < v196)
            {
LABEL_359:
              v195 = v327;
              *v223 = v222;
              v223[1] = v325;
              goto LABEL_360;
            }
            v224 = (2 * v196) | 1;
            v197 = &v335[2 * v224];
            v196 = 2 * v196 + 2;
            if (v196 >= v9)
            {
              v196 = v224;
            }
            else
            {
              v225 = v197 + 2;
              if ((*(_BYTE *)*v197 & 4) != 0)
              {
                v228 = (size_t *)*(*v197 - 1);
                v229 = *v228;
                v226 = v228 + 2;
                v227 = v229;
              }
              else
              {
                v226 = 0;
                v227 = 0;
              }
              if ((*(_BYTE *)*v225 & 4) != 0)
              {
                v232 = *(size_t **)(*v225 - 8);
                v233 = *v232;
                v230 = v232 + 2;
                v231 = v233;
              }
              else
              {
                v230 = 0;
                v231 = 0;
              }
              if (v231 >= v227)
                v234 = v227;
              else
                v234 = v231;
              if (v234 && (v235 = memcmp(v226, v230, v234)) != 0)
              {
                v236 = (v235 >> 31) | 1;
              }
              else
              {
                if (v227 < v231)
                  v236 = -1;
                else
                  v236 = 1;
                if (v227 == v231)
                  v236 = 0;
              }
              v222 = v330;
              if (v236 == -1)
                v197 += 2;
              else
                v196 = v224;
            }
            v211 = *v197;
            if ((*(_BYTE *)*v197 & 4) != 0)
            {
              v242 = (size_t *)*(v211 - 1);
              v243 = *v242;
              result = (uint64_t)(v242 + 2);
              v237 = v243;
              if ((v216 & 4) == 0)
              {
LABEL_347:
                v239 = 0;
                v240 = 0;
                goto LABEL_348;
              }
            }
            else
            {
              result = 0;
              v237 = 0;
              if ((v216 & 4) == 0)
                goto LABEL_347;
            }
            v238 = (size_t *)*(v222 - 1);
            v241 = *v238;
            v239 = v238 + 2;
            v240 = v241;
LABEL_348:
            if (v240 >= v237)
              v244 = v237;
            else
              v244 = v240;
            if (v244 && (result = memcmp((const void *)result, v239, v244), (_DWORD)result))
            {
              v245 = ((int)result >> 31) | 1;
            }
            else if (v237 == v240)
            {
              v245 = 0;
            }
            else
            {
              if (v237 < v240)
                goto LABEL_359;
              v245 = 1;
            }
            v215 = v223;
            if (v245 == -1)
              goto LABEL_359;
          }
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = &v7[2 * ((unint64_t)v9 >> 1)];
        if ((unint64_t)v8 < 0x801)
        {
          sub_1C5176D88(v11, v7, v329);
        }
        else
        {
          sub_1C5176D88(v7, v11, v329);
          sub_1C5176D88(v7 + 2, v11 - 2, a2 - 4);
          sub_1C5176D88(v7 + 4, &v7[2 * v10 + 2], a2 - 6);
          sub_1C5176D88(v11 - 2, v11, &v7[2 * v10 + 2]);
          v12 = v11[1];
          v13 = *(_OWORD *)v7;
          *v7 = *v11;
          v7[1] = v12;
          *(_OWORD *)v11 = v13;
        }
        v326 = a3 - 1;
        if ((a4 & 1) == 0)
        {
          v16 = *(v7 - 2);
          if ((*v16 & 4) != 0)
          {
            v19 = (size_t *)*((_QWORD *)v16 - 1);
            v20 = *v19;
            v17 = v19 + 2;
            v18 = v20;
          }
          else
          {
            v17 = 0;
            v18 = 0;
          }
          v14 = *v7;
          if ((**v7 & 4) != 0)
          {
            v23 = (size_t *)*(v14 - 1);
            v24 = *v23;
            v21 = v23 + 2;
            v22 = v24;
          }
          else
          {
            v21 = 0;
            v22 = 0;
          }
          v15 = **v7 & 4;
          if (v22 >= v18)
            v25 = v18;
          else
            v25 = v22;
          if (v25 && (v26 = memcmp(v17, v21, v25)) != 0)
          {
            if (v26 < 0)
              goto LABEL_26;
          }
          else if (v18 < v22)
          {
            goto LABEL_26;
          }
          if (v15)
          {
            v96 = (size_t *)*(v14 - 1);
            v97 = *v96;
            result = (uint64_t)(v96 + 2);
            v27 = v97;
          }
          else
          {
            result = 0;
            v27 = 0;
          }
          if ((*(_BYTE *)*v329 & 4) != 0)
          {
            v100 = (size_t *)*(*v329 - 1);
            v101 = *v100;
            v98 = v100 + 2;
            v99 = v101;
          }
          else
          {
            v98 = 0;
            v99 = 0;
          }
          v102 = v7[1];
          if (v99 >= v27)
            v103 = v27;
          else
            v103 = v99;
          if (v103 && (result = memcmp((const void *)result, v98, v103), (_DWORD)result))
          {
            if ((result & 0x80000000) == 0)
              goto LABEL_132;
          }
          else if (v27 >= v99)
          {
LABEL_132:
            v104 = v7 + 2;
            do
            {
              v6 = v104;
              if (v104 >= a2)
                break;
              if (v15)
              {
                v106 = (unint64_t *)*(v14 - 1);
                v107 = *v106;
                result = (uint64_t)(v106 + 2);
                v105 = v107;
              }
              else
              {
                result = 0;
                v105 = 0;
              }
              if ((*(_BYTE *)*v104 & 4) != 0)
              {
                v110 = (unint64_t *)*(*v104 - 1);
                v111 = *v110;
                v108 = v110 + 2;
                v109 = v111;
              }
              else
              {
                v108 = 0;
                v109 = 0;
              }
              v112 = v109 >= v105 ? v105 : v109;
              if (v112 && (result = memcmp((const void *)result, v108, v112), (_DWORD)result))
              {
                v113 = ((int)result >> 31) | 1;
              }
              else if (v105 == v109)
              {
                v113 = 0;
              }
              else
              {
                if (v105 < v109)
                  goto LABEL_171;
                v113 = 1;
              }
              v104 = v6 + 2;
            }
            while (v113 != -1);
            goto LABEL_171;
          }
          v114 = v7 + 2;
          do
          {
            v6 = v114;
            if (v15)
            {
              v116 = (size_t *)*(v14 - 1);
              v117 = *v116;
              result = (uint64_t)(v116 + 2);
              v115 = v117;
            }
            else
            {
              result = 0;
              v115 = 0;
            }
            if ((*(_BYTE *)*v114 & 4) != 0)
            {
              v120 = (size_t *)*(*v114 - 1);
              v121 = *v120;
              v118 = v120 + 2;
              v119 = v121;
            }
            else
            {
              v118 = 0;
              v119 = 0;
            }
            if (v119 >= v115)
              v122 = v115;
            else
              v122 = v119;
            if (v122 && (result = memcmp((const void *)result, v118, v122), (_DWORD)result))
            {
              v123 = ((int)result >> 31) | 1;
            }
            else if (v115 == v119)
            {
              v123 = 0;
            }
            else
            {
              if (v115 < v119)
                break;
              v123 = 1;
            }
            v114 = v6 + 2;
          }
          while (v123 != -1);
LABEL_171:
          v124 = a2;
          if (v6 < a2)
          {
            v125 = a2 - 2;
            do
            {
              v124 = v125;
              if (v15)
              {
                v127 = (size_t *)*(v14 - 1);
                v128 = *v127;
                result = (uint64_t)(v127 + 2);
                v126 = v128;
              }
              else
              {
                result = 0;
                v126 = 0;
              }
              if ((*(_BYTE *)*v125 & 4) != 0)
              {
                v131 = (size_t *)*(*v125 - 1);
                v132 = *v131;
                v129 = v131 + 2;
                v130 = v132;
              }
              else
              {
                v129 = 0;
                v130 = 0;
              }
              if (v130 >= v126)
                v133 = v126;
              else
                v133 = v130;
              if (v133 && (result = memcmp((const void *)result, v129, v133), (_DWORD)result))
              {
                v134 = ((int)result >> 31) | 1;
              }
              else
              {
                if (v126 >= v130)
                  break;
                v134 = -1;
              }
              v125 = v124 - 2;
            }
            while (v134 == -1);
          }
          if (v6 < v124)
          {
            v135 = *v6;
            v136 = *v124;
            do
            {
              *v6 = v136;
              *v124 = v135;
              v137 = v6[1];
              v6[1] = v124[1];
              v124[1] = v137;
              v138 = v6 + 2;
              do
              {
                v6 = v138;
                if (v15)
                {
                  v141 = (size_t *)*(v14 - 1);
                  v142 = *v141;
                  v139 = v141 + 2;
                  v140 = v142;
                }
                else
                {
                  v139 = 0;
                  v140 = 0;
                }
                v135 = *v138;
                if ((*(_BYTE *)*v138 & 4) != 0)
                {
                  v145 = (size_t *)*(v135 - 1);
                  v146 = *v145;
                  v143 = v145 + 2;
                  v144 = v146;
                }
                else
                {
                  v143 = 0;
                  v144 = 0;
                }
                if (v144 >= v140)
                  v147 = v140;
                else
                  v147 = v144;
                if (v147 && (v148 = memcmp(v139, v143, v147)) != 0)
                {
                  v149 = (v148 >> 31) | 1;
                }
                else if (v140 == v144)
                {
                  v149 = 0;
                }
                else
                {
                  if (v140 < v144)
                    break;
                  v149 = 1;
                }
                v138 = v6 + 2;
              }
              while (v149 != -1);
              v150 = v124 - 2;
              do
              {
                v124 = v150;
                if (v15)
                {
                  v152 = (size_t *)*(v14 - 1);
                  v153 = *v152;
                  result = (uint64_t)(v152 + 2);
                  v151 = v153;
                }
                else
                {
                  result = 0;
                  v151 = 0;
                }
                v136 = *v150;
                if ((*(_BYTE *)*v150 & 4) != 0)
                {
                  v156 = (size_t *)*(v136 - 1);
                  v157 = *v156;
                  v154 = v156 + 2;
                  v155 = v157;
                }
                else
                {
                  v154 = 0;
                  v155 = 0;
                }
                if (v155 >= v151)
                  v158 = v151;
                else
                  v158 = v155;
                if (v158 && (result = memcmp((const void *)result, v154, v158), (_DWORD)result))
                {
                  v159 = ((int)result >> 31) | 1;
                }
                else
                {
                  if (v151 >= v155)
                    break;
                  v159 = -1;
                }
                v150 = v124 - 2;
              }
              while (v159 == -1);
            }
            while (v6 < v124);
          }
          if (v6 - 2 != v7)
          {
            *v7 = *(v6 - 2);
            v7[1] = *(v6 - 1);
          }
          a4 = 0;
          *(v6 - 2) = v14;
          *(v6 - 1) = v102;
          a3 = v326;
          continue;
        }
        v14 = *v7;
        v15 = **v7 & 4;
LABEL_26:
        v324 = v7[1];
        v28 = 16;
        while (2)
        {
          v29 = v28;
          v30 = *(uint64_t **)((char *)v7 + v28);
          if ((*(_BYTE *)v30 & 4) != 0)
          {
            v37 = (size_t *)*(v30 - 1);
            v38 = *v37;
            v31 = v37 + 2;
            v32 = v38;
            if (!v15)
              goto LABEL_31;
LABEL_29:
            v33 = (size_t *)*(v14 - 1);
            v36 = *v33;
            v34 = v33 + 2;
            v35 = v36;
          }
          else
          {
            v31 = 0;
            v32 = 0;
            if (v15)
              goto LABEL_29;
LABEL_31:
            v34 = 0;
            v35 = 0;
          }
          if (v35 >= v32)
            v39 = v32;
          else
            v39 = v35;
          if (v39 && (v40 = memcmp(v31, v34, v39)) != 0)
          {
            v41 = (v40 >> 31) | 1;
          }
          else
          {
            if (v32 >= v35)
              break;
            v41 = -1;
          }
          v28 = v29 + 16;
          if (v41 == -1)
            continue;
          break;
        }
        v42 = (unint64_t)v7 + v29;
        v43 = a2 - 2;
        if (v29 != 16)
        {
          while (2)
          {
            v44 = v43;
            if ((*(_BYTE *)*v43 & 4) != 0)
            {
              v51 = (size_t *)*(*v43 - 1);
              v52 = *v51;
              v45 = v51 + 2;
              v46 = v52;
              if (!v15)
                goto LABEL_46;
LABEL_44:
              v47 = (size_t *)*(v14 - 1);
              v50 = *v47;
              v48 = v47 + 2;
              v49 = v50;
            }
            else
            {
              v45 = 0;
              v46 = 0;
              if (v15)
                goto LABEL_44;
LABEL_46:
              v48 = 0;
              v49 = 0;
            }
            if (v49 >= v46)
              v53 = v46;
            else
              v53 = v49;
            if (v53 && (v54 = memcmp(v45, v48, v53)) != 0)
            {
              v55 = (v54 >> 31) | 1;
            }
            else if (v46 == v49)
            {
              v55 = 0;
            }
            else
            {
              if (v46 < v49)
                goto LABEL_79;
              v55 = 1;
            }
            v43 = v44 - 2;
            if (v55 == -1)
              goto LABEL_79;
            continue;
          }
        }
        v56 = a2 - 2;
        while (2)
        {
          if (v42 < (unint64_t)(v56 + 2))
          {
            v44 = v56;
            if ((*(_BYTE *)*v56 & 4) != 0)
            {
              v63 = (size_t *)*(*v56 - 1);
              v64 = *v63;
              v57 = v63 + 2;
              v58 = v64;
              if (!v15)
                goto LABEL_65;
LABEL_63:
              v59 = (size_t *)*(v14 - 1);
              v62 = *v59;
              v60 = v59 + 2;
              v61 = v62;
            }
            else
            {
              v57 = 0;
              v58 = 0;
              if (v15)
                goto LABEL_63;
LABEL_65:
              v60 = 0;
              v61 = 0;
            }
            if (v61 >= v58)
              v65 = v58;
            else
              v65 = v61;
            if (v65 && (v66 = memcmp(v57, v60, v65)) != 0)
            {
              v67 = (v66 >> 31) | 1;
            }
            else if (v58 == v61)
            {
              v67 = 0;
            }
            else
            {
              if (v58 < v61)
                goto LABEL_79;
              v67 = 1;
            }
            v56 = v44 - 2;
            if (v67 == -1)
              goto LABEL_79;
            continue;
          }
          break;
        }
        v44 = v56 + 2;
LABEL_79:
        if (v42 >= (unint64_t)v44)
        {
          v6 = (uint64_t **)v42;
          goto LABEL_116;
        }
        v68 = *v44;
        v6 = (uint64_t **)v42;
        v69 = v44;
        while (2)
        {
          *v6 = v68;
          *v69 = v30;
          v70 = v6[1];
          v6[1] = v69[1];
          v69[1] = v70;
          v71 = v6 + 2;
          while (2)
          {
            v6 = v71;
            v30 = *v71;
            if ((*(_BYTE *)*v71 & 4) != 0)
            {
              v78 = (size_t *)*(v30 - 1);
              v79 = *v78;
              v72 = v78 + 2;
              v73 = v79;
              if (!v15)
                goto LABEL_86;
LABEL_84:
              v74 = (size_t *)*(v14 - 1);
              v77 = *v74;
              v75 = v74 + 2;
              v76 = v77;
            }
            else
            {
              v72 = 0;
              v73 = 0;
              if (v15)
                goto LABEL_84;
LABEL_86:
              v75 = 0;
              v76 = 0;
            }
            if (v76 >= v73)
              v80 = v73;
            else
              v80 = v76;
            if (v80 && (v81 = memcmp(v72, v75, v80)) != 0)
            {
              v82 = (v81 >> 31) | 1;
            }
            else
            {
              if (v73 >= v76)
                break;
              v82 = -1;
            }
            v71 = v6 + 2;
            if (v82 == -1)
              continue;
            break;
          }
          v83 = v69 - 2;
          while (2)
          {
            v69 = v83;
            v68 = *v83;
            if ((*(_BYTE *)*v83 & 4) != 0)
            {
              v90 = (size_t *)*(v68 - 1);
              v91 = *v90;
              v84 = v90 + 2;
              v85 = v91;
              if (!v15)
                goto LABEL_101;
LABEL_99:
              v86 = (size_t *)*(v14 - 1);
              v89 = *v86;
              v87 = v86 + 2;
              v88 = v89;
            }
            else
            {
              v84 = 0;
              v85 = 0;
              if (v15)
                goto LABEL_99;
LABEL_101:
              v87 = 0;
              v88 = 0;
            }
            if (v88 >= v85)
              v92 = v85;
            else
              v92 = v88;
            if (v92 && (v93 = memcmp(v84, v87, v92)) != 0)
            {
              v94 = (v93 >> 31) | 1;
            }
            else if (v85 == v88)
            {
              v94 = 0;
            }
            else
            {
              if (v85 < v88)
                break;
              v94 = 1;
            }
            v83 = v69 - 2;
            if (v94 != -1)
              continue;
            break;
          }
          if (v6 < v69)
            continue;
          break;
        }
LABEL_116:
        v5 = (uint64_t)v335;
        if (v6 - 2 != v335)
        {
          *v335 = *(v6 - 2);
          v335[1] = *(v6 - 1);
        }
        a3 = v326;
        *(v6 - 2) = v14;
        *(v6 - 1) = v324;
        if (v42 < (unint64_t)v44)
        {
LABEL_121:
          result = sub_1C5175A50(v335, v6 - 2, v326, a4 & 1);
          a4 = 0;
          continue;
        }
        v95 = sub_1C5177010(v335, v6 - 2);
        result = sub_1C5177010(v6, a2);
        if (!(_DWORD)result)
        {
          if (v95)
            continue;
          goto LABEL_121;
        }
        a2 = v6 - 2;
        if (!v95)
          goto LABEL_2;
        return result;
    }
  }
}

_QWORD *sub_1C5176B48(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t *v10;
  _QWORD *result;
  size_t v12;
  size_t *v13;
  size_t v14;
  uint64_t *v15;
  const void *v16;
  size_t v17;
  size_t *v18;
  size_t v19;
  size_t v20;
  uint64_t *v21;
  uint64_t *v22;
  size_t v23;
  size_t *v24;
  size_t v25;
  uint64_t *v26;
  const void *v27;
  size_t v28;
  size_t *v29;
  size_t v30;
  size_t v31;
  uint64_t *v32;
  uint64_t *v33;
  size_t v34;
  size_t *v35;
  size_t v36;
  uint64_t *v37;
  const void *v38;
  size_t v39;
  size_t *v40;
  size_t v41;
  size_t v42;
  uint64_t *v43;
  uint64_t *v44;
  size_t v45;
  size_t *v46;
  size_t v47;
  uint64_t *v48;
  const void *v49;
  size_t v50;
  size_t *v51;
  size_t v52;
  size_t v53;
  uint64_t *v54;

  sub_1C51772EC((uint64_t **)a1, a2, a3, a4);
  v10 = *a5;
  if ((*(_BYTE *)*a5 & 4) != 0)
  {
    v13 = (size_t *)*(v10 - 1);
    v14 = *v13;
    result = v13 + 2;
    v12 = v14;
  }
  else
  {
    result = 0;
    v12 = 0;
  }
  v15 = *a4;
  if ((*(_BYTE *)*a4 & 4) != 0)
  {
    v18 = (size_t *)*(v15 - 1);
    v19 = *v18;
    v16 = v18 + 2;
    v17 = v19;
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  if (v17 >= v12)
    v20 = v12;
  else
    v20 = v17;
  if (v20 && (result = (_QWORD *)memcmp(result, v16, v20), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v12 >= v17)
  {
    return result;
  }
  *a4 = v10;
  *a5 = v15;
  v21 = a4[1];
  a4[1] = a5[1];
  a5[1] = v21;
  v22 = *a4;
  if ((*(_BYTE *)*a4 & 4) != 0)
  {
    v24 = (size_t *)*(v22 - 1);
    v25 = *v24;
    result = v24 + 2;
    v23 = v25;
  }
  else
  {
    result = 0;
    v23 = 0;
  }
  v26 = *a3;
  if ((*(_BYTE *)*a3 & 4) != 0)
  {
    v29 = (size_t *)*(v26 - 1);
    v30 = *v29;
    v27 = v29 + 2;
    v28 = v30;
  }
  else
  {
    v27 = 0;
    v28 = 0;
  }
  if (v28 >= v23)
    v31 = v23;
  else
    v31 = v28;
  if (v31 && (result = (_QWORD *)memcmp(result, v27, v31), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v23 >= v28)
  {
    return result;
  }
  *a3 = v22;
  *a4 = v26;
  v32 = a3[1];
  a3[1] = a4[1];
  a4[1] = v32;
  v33 = *a3;
  if ((*(_BYTE *)*a3 & 4) != 0)
  {
    v35 = (size_t *)*(v33 - 1);
    v36 = *v35;
    result = v35 + 2;
    v34 = v36;
  }
  else
  {
    result = 0;
    v34 = 0;
  }
  v37 = *a2;
  if ((*(_BYTE *)*a2 & 4) != 0)
  {
    v40 = (size_t *)*(v37 - 1);
    v41 = *v40;
    v38 = v40 + 2;
    v39 = v41;
  }
  else
  {
    v38 = 0;
    v39 = 0;
  }
  if (v39 >= v34)
    v42 = v34;
  else
    v42 = v39;
  if (v42 && (result = (_QWORD *)memcmp(result, v38, v42), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v34 >= v39)
  {
    return result;
  }
  *a2 = v33;
  *a3 = v37;
  v43 = a2[1];
  a2[1] = a3[1];
  a3[1] = v43;
  v44 = *a2;
  if ((*(_BYTE *)*a2 & 4) != 0)
  {
    v46 = (size_t *)*(v44 - 1);
    v47 = *v46;
    result = v46 + 2;
    v45 = v47;
  }
  else
  {
    result = 0;
    v45 = 0;
  }
  v48 = *(uint64_t **)a1;
  if ((**(_BYTE **)a1 & 4) != 0)
  {
    v51 = (size_t *)*(v48 - 1);
    v52 = *v51;
    v49 = v51 + 2;
    v50 = v52;
  }
  else
  {
    v49 = 0;
    v50 = 0;
  }
  if (v50 >= v45)
    v53 = v45;
  else
    v53 = v50;
  if (v53 && (result = (_QWORD *)memcmp(result, v49, v53), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v45 >= v50)
  {
    return result;
  }
  *(_QWORD *)a1 = v44;
  *a2 = v48;
  v54 = *(uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[1];
  a2[1] = v54;
  return result;
}

_QWORD *sub_1C5176D88(uint64_t **a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t *v6;
  uint64_t v7;
  const void *v8;
  size_t v9;
  size_t *v10;
  size_t v11;
  uint64_t *v12;
  const void *v13;
  size_t v14;
  size_t *v15;
  size_t v16;
  size_t v17;
  int v18;
  uint64_t *v19;
  _QWORD *result;
  size_t v21;
  size_t *v22;
  const void *v23;
  size_t v24;
  size_t v25;
  uint64_t *v26;
  size_t v27;
  size_t *v28;
  const void *v29;
  size_t v30;
  size_t v31;
  size_t *v32;
  size_t v33;
  size_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  size_t v38;
  size_t *v39;
  size_t v40;
  size_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  size_t v45;
  uint64_t *v46;
  uint64_t *v47;
  size_t *v48;
  size_t v49;
  uint64_t *v50;
  const void *v51;
  size_t v52;
  size_t *v53;
  size_t v54;
  uint64_t *v55;
  const void *v56;
  size_t v57;
  size_t *v58;
  size_t v59;
  size_t v60;
  size_t *v61;
  size_t v62;
  size_t v63;
  uint64_t v64;

  v6 = *a2;
  v7 = **a2;
  if ((v7 & 4) != 0)
  {
    v10 = (size_t *)*(v6 - 1);
    v11 = *v10;
    v8 = v10 + 2;
    v9 = v11;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v12 = *a1;
  if ((*(_BYTE *)*a1 & 4) != 0)
  {
    v15 = (size_t *)*(v12 - 1);
    v16 = *v15;
    v13 = v15 + 2;
    v14 = v16;
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  if (v14 >= v9)
    v17 = v9;
  else
    v17 = v14;
  if (v17 && (v18 = memcmp(v8, v13, v17)) != 0)
  {
    if ((v18 & 0x80000000) == 0)
      goto LABEL_13;
  }
  else if (v9 >= v14)
  {
LABEL_13:
    v19 = *a3;
    if ((*(_BYTE *)*a3 & 4) != 0)
    {
      v32 = (size_t *)*(v19 - 1);
      v33 = *v32;
      result = v32 + 2;
      v21 = v33;
      if ((v7 & 4) != 0)
        goto LABEL_15;
    }
    else
    {
      result = 0;
      v21 = 0;
      if ((v7 & 4) != 0)
      {
LABEL_15:
        v22 = (size_t *)*(v6 - 1);
        v25 = *v22;
        v23 = v22 + 2;
        v24 = v25;
LABEL_22:
        if (v24 >= v21)
          v34 = v21;
        else
          v34 = v24;
        if (v34 && (result = (_QWORD *)memcmp(result, v23, v34), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v21 >= v24)
        {
          return result;
        }
        *a2 = v19;
        *a3 = v6;
        v36 = (uint64_t *)(a2 + 1);
        v35 = a2[1];
        a2[1] = a3[1];
        a3[1] = v35;
        v37 = *a2;
        if ((*(_BYTE *)*a2 & 4) != 0)
        {
          v48 = (size_t *)*(v37 - 1);
          v49 = *v48;
          result = v48 + 2;
          v38 = v49;
        }
        else
        {
          result = 0;
          v38 = 0;
        }
        v50 = *a1;
        if ((*(_BYTE *)*a1 & 4) != 0)
        {
          v58 = (size_t *)*(v50 - 1);
          v59 = *v58;
          v51 = v58 + 2;
          v52 = v59;
        }
        else
        {
          v51 = 0;
          v52 = 0;
        }
        if (v52 >= v38)
          v60 = v38;
        else
          v60 = v52;
        if (v60 && (result = (_QWORD *)memcmp(result, v51, v60), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v38 >= v52)
        {
          return result;
        }
        *a1 = v37;
        v46 = (uint64_t *)(a1 + 1);
        *a2 = v50;
        goto LABEL_71;
      }
    }
    v23 = 0;
    v24 = 0;
    goto LABEL_22;
  }
  v26 = *a3;
  if ((*(_BYTE *)*a3 & 4) != 0)
  {
    v39 = (size_t *)*(v26 - 1);
    v40 = *v39;
    result = v39 + 2;
    v27 = v40;
    if ((v7 & 4) != 0)
      goto LABEL_19;
  }
  else
  {
    result = 0;
    v27 = 0;
    if ((v7 & 4) != 0)
    {
LABEL_19:
      v28 = (size_t *)*(v6 - 1);
      v31 = *v28;
      v29 = v28 + 2;
      v30 = v31;
      goto LABEL_34;
    }
  }
  v29 = 0;
  v30 = 0;
LABEL_34:
  if (v30 >= v27)
    v41 = v27;
  else
    v41 = v30;
  if (v41 && (result = (_QWORD *)memcmp(result, v29, v41), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
    {
LABEL_40:
      *a1 = v6;
      v42 = a2[1];
      *a2 = v12;
      v43 = a1[1];
      a1[1] = v42;
      a2[1] = v43;
      v44 = *a3;
      if ((*(_BYTE *)*a3 & 4) != 0)
      {
        v53 = (size_t *)*(v44 - 1);
        v54 = *v53;
        result = v53 + 2;
        v45 = v54;
      }
      else
      {
        result = 0;
        v45 = 0;
      }
      v55 = *a2;
      if ((*(_BYTE *)*a2 & 4) != 0)
      {
        v61 = (size_t *)*(v55 - 1);
        v62 = *v61;
        v56 = v61 + 2;
        v57 = v62;
      }
      else
      {
        v56 = 0;
        v57 = 0;
      }
      if (v57 >= v45)
        v63 = v45;
      else
        v63 = v57;
      if (v63 && (result = (_QWORD *)memcmp(result, v56, v63), (_DWORD)result))
      {
        if ((result & 0x80000000) == 0)
          return result;
      }
      else if (v45 >= v57)
      {
        return result;
      }
      *a2 = v44;
      *a3 = v55;
      v47 = (uint64_t *)(a3 + 1);
      v46 = (uint64_t *)(a2 + 1);
      goto LABEL_70;
    }
  }
  else if (v27 >= v30)
  {
    goto LABEL_40;
  }
  *a1 = v26;
  v46 = (uint64_t *)(a1 + 1);
  *a3 = v12;
  v47 = (uint64_t *)(a3 + 1);
LABEL_70:
  v36 = v47;
LABEL_71:
  v64 = *v46;
  *v46 = *v36;
  *v36 = v64;
  return result;
}

BOOL sub_1C5177010(uint64_t **a1, uint64_t **a2)
{
  uint64_t v3;
  _BOOL8 result;
  _BYTE *v5;
  const void *v6;
  size_t v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  const void *v13;
  size_t v14;
  size_t *v15;
  size_t v16;
  uint64_t *v17;
  const void *v18;
  size_t v19;
  size_t *v20;
  size_t v21;
  size_t v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t **v27;
  const void *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  const void *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  size_t v36;
  int v37;
  int v38;
  size_t *v39;
  size_t v40;
  uint64_t *v41;
  const void *v42;
  size_t v43;
  size_t *v44;
  size_t v45;
  size_t v46;
  int v47;
  uint64_t *v48;
  uint64_t *v49;
  int v50;

  v3 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v3)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v5 = *(a2 - 2);
      if ((*v5 & 4) != 0)
      {
        v39 = (size_t *)*((_QWORD *)v5 - 1);
        v40 = *v39;
        v6 = v39 + 2;
        v7 = v40;
      }
      else
      {
        v6 = 0;
        v7 = 0;
      }
      v41 = *a1;
      if ((*(_BYTE *)*a1 & 4) != 0)
      {
        v44 = (size_t *)*(v41 - 1);
        v45 = *v44;
        v42 = v44 + 2;
        v43 = v45;
      }
      else
      {
        v42 = 0;
        v43 = 0;
      }
      if (v43 >= v7)
        v46 = v7;
      else
        v46 = v43;
      if (v46 && (v47 = memcmp(v6, v42, v46)) != 0)
      {
        if ((v47 & 0x80000000) == 0)
          return 1;
      }
      else if (v7 >= v43)
      {
        return 1;
      }
      *a1 = (uint64_t *)v5;
      *(a2 - 2) = v41;
      v48 = a1[1];
      a1[1] = *(a2 - 1);
      *(a2 - 1) = v48;
      return 1;
    case 3:
      sub_1C5176D88(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1C51772EC(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1C5176B48(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v8 = a1 + 4;
      sub_1C5176D88(a1, a1 + 2, a1 + 4);
      v9 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v10 = 0;
      v50 = 0;
      break;
  }
  while (2)
  {
    v11 = *v9;
    v12 = **v9;
    if ((v12 & 4) != 0)
    {
      v15 = (size_t *)*(v11 - 1);
      v16 = *v15;
      v13 = v15 + 2;
      v14 = v16;
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
    v17 = *v8;
    if ((*(_BYTE *)*v8 & 4) != 0)
    {
      v20 = (size_t *)*(v17 - 1);
      v21 = *v20;
      v18 = v20 + 2;
      v19 = v21;
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
    if (v19 >= v14)
      v22 = v14;
    else
      v22 = v19;
    if (v22 && (v23 = memcmp(v13, v18, v22)) != 0)
    {
      if ((v23 & 0x80000000) == 0)
        goto LABEL_41;
    }
    else if (v14 >= v19)
    {
      goto LABEL_41;
    }
    v49 = v9[1];
    v24 = v10;
    while (1)
    {
      v25 = (uint64_t **)((char *)a1 + v24);
      v26 = *(uint64_t *)((char *)a1 + v24 + 40);
      v25[6] = v17;
      v25[7] = v26;
      if (v24 == -32)
      {
        v27 = a1;
        goto LABEL_40;
      }
      v27 = v8;
      if ((v12 & 4) != 0)
      {
        v30 = (unint64_t *)*(v11 - 1);
        v31 = *v30;
        v28 = v30 + 2;
        v29 = v31;
      }
      else
      {
        v28 = 0;
        v29 = 0;
      }
      v17 = (uint64_t *)v25[2];
      if ((*(_BYTE *)v17 & 4) != 0)
      {
        v34 = (unint64_t *)*(v17 - 1);
        v35 = *v34;
        v32 = v34 + 2;
        v33 = v35;
      }
      else
      {
        v32 = 0;
        v33 = 0;
      }
      v36 = v33 >= v29 ? v29 : v33;
      if (!v36)
        break;
      v37 = memcmp(v28, v32, v36);
      if (!v37)
        break;
      v38 = (v37 >> 31) | 1;
LABEL_36:
      v8 = v27 - 2;
      v24 -= 16;
      if (v38 != -1)
        goto LABEL_40;
    }
    if (v29 < v33)
    {
      v38 = -1;
      goto LABEL_36;
    }
    v27 = (uint64_t **)((char *)a1 + v24 + 32);
LABEL_40:
    *v27 = v11;
    v27[1] = v49;
    if (++v50 != 8)
    {
LABEL_41:
      v8 = v9;
      v10 += 16;
      v9 += 2;
      if (v9 == a2)
        return 1;
      continue;
    }
    return v9 + 2 == a2;
  }
}

_QWORD *sub_1C51772EC(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t *v8;
  _QWORD *result;
  size_t v10;
  size_t *v11;
  size_t v12;
  uint64_t *v13;
  const void *v14;
  size_t v15;
  size_t *v16;
  size_t v17;
  size_t v18;
  uint64_t *v19;
  uint64_t *v20;
  size_t v21;
  size_t *v22;
  size_t v23;
  uint64_t *v24;
  const void *v25;
  size_t v26;
  size_t *v27;
  size_t v28;
  size_t v29;
  uint64_t *v30;
  uint64_t *v31;
  size_t v32;
  size_t *v33;
  size_t v34;
  uint64_t *v35;
  const void *v36;
  size_t v37;
  size_t *v38;
  size_t v39;
  size_t v40;
  uint64_t *v41;

  sub_1C5176D88(a1, a2, a3);
  v8 = *a4;
  if ((*(_BYTE *)*a4 & 4) != 0)
  {
    v11 = (size_t *)*(v8 - 1);
    v12 = *v11;
    result = v11 + 2;
    v10 = v12;
  }
  else
  {
    result = 0;
    v10 = 0;
  }
  v13 = *a3;
  if ((*(_BYTE *)*a3 & 4) != 0)
  {
    v16 = (size_t *)*(v13 - 1);
    v17 = *v16;
    v14 = v16 + 2;
    v15 = v17;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  if (v15 >= v10)
    v18 = v10;
  else
    v18 = v15;
  if (v18 && (result = (_QWORD *)memcmp(result, v14, v18), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v10 >= v15)
  {
    return result;
  }
  *a3 = v8;
  *a4 = v13;
  v19 = a3[1];
  a3[1] = a4[1];
  a4[1] = v19;
  v20 = *a3;
  if ((*(_BYTE *)*a3 & 4) != 0)
  {
    v22 = (size_t *)*(v20 - 1);
    v23 = *v22;
    result = v22 + 2;
    v21 = v23;
  }
  else
  {
    result = 0;
    v21 = 0;
  }
  v24 = *a2;
  if ((*(_BYTE *)*a2 & 4) != 0)
  {
    v27 = (size_t *)*(v24 - 1);
    v28 = *v27;
    v25 = v27 + 2;
    v26 = v28;
  }
  else
  {
    v25 = 0;
    v26 = 0;
  }
  if (v26 >= v21)
    v29 = v21;
  else
    v29 = v26;
  if (v29 && (result = (_QWORD *)memcmp(result, v25, v29), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v21 >= v26)
  {
    return result;
  }
  *a2 = v20;
  *a3 = v24;
  v30 = a2[1];
  a2[1] = a3[1];
  a3[1] = v30;
  v31 = *a2;
  if ((*(_BYTE *)*a2 & 4) != 0)
  {
    v33 = (size_t *)*(v31 - 1);
    v34 = *v33;
    result = v33 + 2;
    v32 = v34;
  }
  else
  {
    result = 0;
    v32 = 0;
  }
  v35 = *a1;
  if ((*(_BYTE *)*a1 & 4) != 0)
  {
    v38 = (size_t *)*(v35 - 1);
    v39 = *v38;
    v36 = v38 + 2;
    v37 = v39;
  }
  else
  {
    v36 = 0;
    v37 = 0;
  }
  if (v37 >= v32)
    v40 = v32;
  else
    v40 = v37;
  if (v40 && (result = (_QWORD *)memcmp(result, v36, v40), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v32 >= v37)
  {
    return result;
  }
  *a1 = v31;
  *a2 = v35;
  v41 = a1[1];
  a1[1] = a2[1];
  a2[1] = v41;
  return result;
}

void sub_1C51774AC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C51774C0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81458A8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C51774F4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81458A8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C5177510(uint64_t a1, llvm::AbstractSlotTrackerStorage **a2, const llvm::Module **a3, unsigned __int8 *a4)
{
  return llvm::MachineModuleSlotTracker::processMachineModule(*(_QWORD *)(a1 + 8), *a2, *a3, *a4);
}

void sub_1C5177528()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C517753C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81458F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5177570(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81458F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C517758C(uint64_t a1, llvm::AbstractSlotTrackerStorage **a2, const Function **a3, char *a4)
{
  return llvm::MachineModuleSlotTracker::processMachineFunction(*(_QWORD *)(a1 + 8), *a2, *a3, *a4);
}

uint64_t llvm::MachineOperand::setReg(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(unsigned int *)(result + 4);
  if ((_DWORD)v2 != a2)
  {
    *(_DWORD *)result &= ~0x8000000u;
    v3 = *(_QWORD *)(result + 8);
    if (v3 && (v4 = *(_QWORD *)(v3 + 24)) != 0 && (v5 = *(_QWORD *)(v4 + 32)) != 0)
    {
      v6 = *(_QWORD *)(v5 + 40);
      if ((v2 & 0x80000000) != 0)
        v7 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v2 & 0x7FFFFFFF) + 8);
      else
        v7 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v2);
      v8 = *v7;
      v10 = *(_QWORD *)(result + 16);
      v9 = *(_QWORD *)(result + 24);
      if (*v7 != result)
        v7 = (uint64_t *)(v10 + 24);
      *v7 = v9;
      if (v9)
        v11 = v9;
      else
        v11 = v8;
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_DWORD *)(result + 4) = a2;
      if ((a2 & 0x80000000) != 0)
        v12 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
      else
        v12 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * a2);
      v13 = *v12;
      if (*v12)
      {
        v14 = *(_QWORD *)(v13 + 16);
        *(_QWORD *)(v13 + 16) = result;
        *(_QWORD *)(result + 16) = v14;
        if ((*(_BYTE *)(result + 3) & 1) != 0)
        {
          *(_QWORD *)(result + 24) = v13;
        }
        else
        {
          *(_QWORD *)(result + 24) = 0;
          v12 = (uint64_t *)(v14 + 24);
        }
      }
      else
      {
        *(_QWORD *)(result + 16) = result;
        *(_QWORD *)(result + 24) = 0;
      }
      *v12 = result;
    }
    else
    {
      *(_DWORD *)(result + 4) = a2;
    }
  }
  return result;
}

uint64_t llvm::MachineOperand::substVirtReg(unsigned int *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v7;

  if (!(_DWORD)a3)
    return llvm::MachineOperand::setReg((uint64_t)a1, a2);
  LOWORD(v7) = a3;
  if (((*a1 >> 8) & 0xFFF) == 0)
  {
    result = llvm::MachineOperand::setReg((uint64_t)a1, a2);
LABEL_5:
    *a1 = *a1 & 0xFFF000FF | ((v7 & 0xFFF) << 8);
    return result;
  }
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 208))(a4, a3);
  result = llvm::MachineOperand::setReg((uint64_t)a1, a2);
  if (v7)
    goto LABEL_5;
  return result;
}

uint64_t llvm::MachineOperand::substPhysReg(unsigned int *a1, unsigned int SubReg, uint64_t a3)
{
  int v4;
  unsigned int v6;

  v4 = (*a1 >> 8) & 0xFFF;
  if (v4)
  {
    SubReg = llvm::MCRegisterInfo::getSubReg((_QWORD *)(a3 + 8), SubReg, v4);
    v6 = *a1;
    *a1 &= 0xFFF000FF;
    if ((v6 & 0x1000000) != 0)
      *a1 = v6 & 0xEFF000FF;
  }
  return llvm::MachineOperand::setReg((uint64_t)a1, SubReg);
}

uint64_t llvm::MachineOperand::setIsDef(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (((((*(_DWORD *)this & 0x1000000) == 0) ^ a2) & 1) == 0)
  {
    v2 = *(_QWORD *)(this + 8);
    if (v2 && (v3 = *(_QWORD *)(v2 + 24)) != 0 && (v4 = *(_QWORD *)(v3 + 32)) != 0)
    {
      v5 = *(_QWORD *)(v4 + 40);
      v6 = *(unsigned int *)(this + 4);
      if ((v6 & 0x80000000) != 0)
        v7 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
      else
        v7 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v6);
      v8 = *v7;
      v10 = *(_QWORD *)(this + 16);
      v9 = *(_QWORD *)(this + 24);
      if (*v7 != this)
        v7 = (uint64_t *)(v10 + 24);
      *v7 = v9;
      if (v9)
        v11 = v9;
      else
        v11 = v8;
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(this + 16) = 0;
      *(_QWORD *)(this + 24) = 0;
      if (a2)
        v12 = 0x1000000;
      else
        v12 = 0;
      v13 = *(unsigned int *)(this + 4);
      *(_DWORD *)this = *(_DWORD *)this & 0xFEFFFFFF | v12;
      if ((v13 & 0x80000000) != 0)
        v14 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
      else
        v14 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v13);
      v15 = *v14;
      if (*v14)
      {
        v16 = *(_QWORD *)(v15 + 16);
        *(_QWORD *)(v15 + 16) = this;
        *(_QWORD *)(this + 16) = v16;
        if ((*(_BYTE *)(this + 3) & 1) != 0)
        {
          *(_QWORD *)(this + 24) = v15;
        }
        else
        {
          *(_QWORD *)(this + 24) = 0;
          v14 = (uint64_t *)(v16 + 24);
        }
      }
      else
      {
        *(_QWORD *)(this + 16) = this;
        *(_QWORD *)(this + 24) = 0;
      }
      *v14 = this;
    }
    else
    {
      if (a2)
        v17 = 0x1000000;
      else
        v17 = 0;
      *(_DWORD *)this = *(_DWORD *)this & 0xFEFFFFFF | v17;
    }
  }
  return this;
}

BOOL llvm::MachineOperand::isRenamable(llvm::MachineOperand *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*(_DWORD *)this & 0x8000000) == 0)
    return 0;
  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 1;
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8);
  if ((*(_DWORD *)this & 0x1000000) != 0)
    return (v2 & 0x100000000) == 0;
  else
    return (int)v2 >= 0;
}

unsigned int *llvm::MachineOperand::setIsRenamable(unsigned int *this, int a2)
{
  int v2;

  if (a2)
    v2 = 0x8000000;
  else
    v2 = 0;
  *this = *this & 0xF7FFFFFF | v2;
  return this;
}

llvm::MachineOperand *llvm::MachineOperand::removeRegFromUses(llvm::MachineOperand *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!*(_BYTE *)this)
  {
    if (*((_QWORD *)this + 2))
    {
      v1 = *((_QWORD *)this + 1);
      if (v1)
      {
        v2 = *(_QWORD *)(v1 + 24);
        if (v2)
        {
          v3 = *(_QWORD *)(v2 + 32);
          if (v3)
            return (llvm::MachineOperand *)llvm::MachineRegisterInfo::removeRegOperandFromUseList(*(_QWORD *)(v3 + 40), this);
        }
      }
    }
  }
  return this;
}

unsigned int *llvm::MachineOperand::ChangeToImmediate(unsigned int *this, uint64_t a2, __int16 a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int *v11;
  int *v12;
  int *v13;

  v3 = *this;
  if (!*this)
  {
    v4 = *((_QWORD *)this + 2);
    if (v4)
    {
      v5 = *((_QWORD *)this + 1);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 24);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 32);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 40);
            v9 = this[1];
            if ((v9 & 0x80000000) != 0)
              v10 = (uint64_t *)(*(_QWORD *)(v8 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
            else
              v10 = (uint64_t *)(*(_QWORD *)(v8 + 272) + 8 * v9);
            v11 = (int *)*v10;
            v12 = (int *)*((_QWORD *)this + 3);
            if ((unsigned int *)*v10 != this)
              v10 = (uint64_t *)(v4 + 24);
            *v10 = (uint64_t)v12;
            if (v12)
              v13 = v12;
            else
              v13 = v11;
            *((_QWORD *)v13 + 2) = v4;
            *((_QWORD *)this + 3) = 0;
            v3 = *this;
          }
        }
      }
    }
  }
  *((_QWORD *)this + 2) = a2;
  *this = v3 & 0xFFF00000 | ((a3 & 0xFFF) << 8) | 1;
  return this;
}

unsigned int *llvm::MachineOperand::ChangeToFPImmediate(unsigned int *result, uint64_t a2, __int16 a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int *v11;
  int *v12;
  int *v13;

  v3 = *result;
  if (!*result)
  {
    v4 = *((_QWORD *)result + 2);
    if (v4)
    {
      v5 = *((_QWORD *)result + 1);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 24);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 32);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 40);
            v9 = result[1];
            if ((v9 & 0x80000000) != 0)
              v10 = (uint64_t *)(*(_QWORD *)(v8 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
            else
              v10 = (uint64_t *)(*(_QWORD *)(v8 + 272) + 8 * v9);
            v11 = (int *)*v10;
            v12 = (int *)*((_QWORD *)result + 3);
            if ((unsigned int *)*v10 != result)
              v10 = (uint64_t *)(v4 + 24);
            *v10 = (uint64_t)v12;
            if (v12)
              v13 = v12;
            else
              v13 = v11;
            *((_QWORD *)v13 + 2) = v4;
            *((_QWORD *)result + 3) = 0;
            v3 = *result;
          }
        }
      }
    }
  }
  *((_QWORD *)result + 2) = a2;
  *result = v3 & 0xFFF00000 | ((a3 & 0xFFF) << 8) | 3;
  return result;
}

int *llvm::MachineOperand::ChangeToES(int *this, const char *a2, __int16 a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int *v11;
  int *v12;
  int *v13;

  v3 = *this;
  if (!*this)
  {
    v4 = *((_QWORD *)this + 2);
    if (v4)
    {
      v5 = *((_QWORD *)this + 1);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 24);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 32);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 40);
            v9 = this[1];
            if ((v9 & 0x80000000) != 0)
              v10 = (uint64_t *)(*(_QWORD *)(v8 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
            else
              v10 = (uint64_t *)(*(_QWORD *)(v8 + 272) + 8 * v9);
            v11 = (int *)*v10;
            v12 = (int *)*((_QWORD *)this + 3);
            if ((int *)*v10 != this)
              v10 = (uint64_t *)(v4 + 24);
            *v10 = (uint64_t)v12;
            if (v12)
              v13 = v12;
            else
              v13 = v11;
            *((_QWORD *)v13 + 2) = v4;
            *((_QWORD *)this + 3) = 0;
            v3 = *this;
          }
        }
      }
    }
  }
  *((_QWORD *)this + 2) = a2;
  this[6] = 0;
  *(_QWORD *)this = v3 & 0xFFF00000 | ((a3 & 0xFFF) << 8) | 9;
  return this;
}

unsigned int *llvm::MachineOperand::ChangeToGA(unsigned int *result, uint64_t a2, uint64_t a3, __int16 a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int *v12;
  int *v13;
  int *v14;

  v4 = *result;
  if (!*result)
  {
    v5 = *((_QWORD *)result + 2);
    if (v5)
    {
      v6 = *((_QWORD *)result + 1);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 24);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 32);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 40);
            v10 = result[1];
            if ((v10 & 0x80000000) != 0)
              v11 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
            else
              v11 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * v10);
            v12 = (int *)*v11;
            v13 = (int *)*((_QWORD *)result + 3);
            if ((unsigned int *)*v11 != result)
              v11 = (uint64_t *)(v5 + 24);
            *v11 = (uint64_t)v13;
            if (v13)
              v14 = v13;
            else
              v14 = v12;
            *((_QWORD *)v14 + 2) = v5;
            *((_QWORD *)result + 3) = 0;
            v4 = *result;
          }
        }
      }
    }
  }
  *((_QWORD *)result + 2) = a2;
  result[6] = HIDWORD(a3);
  *result = v4 & 0xFFF00000 | ((a4 & 0xFFF) << 8) | 0xA;
  result[1] = a3;
  return result;
}

unsigned int *llvm::MachineOperand::ChangeToMCSymbol(unsigned int *result, uint64_t a2, __int16 a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int *v11;
  int *v12;
  int *v13;

  v3 = *result;
  if (!*result)
  {
    v4 = *((_QWORD *)result + 2);
    if (v4)
    {
      v5 = *((_QWORD *)result + 1);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 24);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 32);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 40);
            v9 = result[1];
            if ((v9 & 0x80000000) != 0)
              v10 = (uint64_t *)(*(_QWORD *)(v8 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
            else
              v10 = (uint64_t *)(*(_QWORD *)(v8 + 272) + 8 * v9);
            v11 = (int *)*v10;
            v12 = (int *)*((_QWORD *)result + 3);
            if ((unsigned int *)*v10 != result)
              v10 = (uint64_t *)(v4 + 24);
            *v10 = (uint64_t)v12;
            if (v12)
              v13 = v12;
            else
              v13 = v11;
            *((_QWORD *)v13 + 2) = v4;
            *((_QWORD *)result + 3) = 0;
            v3 = *result;
          }
        }
      }
    }
  }
  *((_QWORD *)result + 2) = a2;
  *result = v3 & 0xFFF00000 | ((a3 & 0xFFF) << 8) | 0xF;
  return result;
}

unsigned int *llvm::MachineOperand::ChangeToTargetIndex(unsigned int *this, unsigned int a2, uint64_t a3, __int16 a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int *v12;
  int *v13;
  int *v14;

  v4 = *this;
  if (!*this)
  {
    v5 = *((_QWORD *)this + 2);
    if (v5)
    {
      v6 = *((_QWORD *)this + 1);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 24);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 32);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 40);
            v10 = this[1];
            if ((v10 & 0x80000000) != 0)
              v11 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
            else
              v11 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * v10);
            v12 = (int *)*v11;
            v13 = (int *)*((_QWORD *)this + 3);
            if ((unsigned int *)*v11 != this)
              v11 = (uint64_t *)(v5 + 24);
            *v11 = (uint64_t)v13;
            if (v13)
              v14 = v13;
            else
              v14 = v12;
            *((_QWORD *)v14 + 2) = v5;
            *((_QWORD *)this + 2) = 0;
            *((_QWORD *)this + 3) = 0;
            v4 = *this;
          }
        }
      }
    }
  }
  this[4] = a2;
  this[6] = HIDWORD(a3);
  *this = v4 & 0xFFF00000 | ((a4 & 0xFFF) << 8) | 7;
  this[1] = a3;
  return this;
}

uint64_t llvm::MachineOperand::ChangeToRegister(uint64_t result, unsigned int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v8 = *(_QWORD *)(result + 8);
  if (v8 && (v9 = *(_QWORD *)(v8 + 24)) != 0 && (v10 = *(_QWORD *)(v9 + 32)) != 0)
  {
    v11 = *(_QWORD *)(v10 + 40);
    v12 = *(_BYTE *)result != 0;
    v13 = v11 == 0;
    if (v11)
      v14 = *(_BYTE *)result == 0;
    else
      v14 = 0;
    if (v14)
    {
      v15 = *(unsigned int *)(result + 4);
      if ((v15 & 0x80000000) != 0)
        v16 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
      else
        v16 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v15);
      v13 = 0;
      v12 = 0;
      v17 = *v16;
      v19 = *(_QWORD *)(result + 16);
      v18 = *(_QWORD *)(result + 24);
      if (*v16 != result)
        v16 = (uint64_t *)(v19 + 24);
      *v16 = v18;
      if (v18)
        v20 = v18;
      else
        v20 = v17;
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      v8 = *(_QWORD *)(result + 8);
    }
  }
  else
  {
    v11 = 0;
    v12 = *(_BYTE *)result != 0;
    v13 = 1;
  }
  if ((a3 & 1) == 0 && v8 && **(unsigned __int16 **)(v8 + 16) - 13 < 5)
    a8 = 1;
  if (a3)
    v21 = 0x1000000;
  else
    v21 = 0;
  if (a4)
    v22 = 0x2000000;
  else
    v22 = 0;
  if (a5 | a6)
    v23 = 0x4000000;
  else
    v23 = 0;
  if (a7)
    v24 = 0x10000000;
  else
    v24 = 0;
  if (a8)
    v25 = 0x80000000;
  else
    v25 = 0;
  v26 = v22 | v21 | v23 | v24 | v25;
  *(_DWORD *)result = v26 | *(_DWORD *)result & 0xF00000;
  *(_DWORD *)(result + 4) = a2;
  *(_QWORD *)(result + 16) = 0;
  if (v12)
  {
    *(_DWORD *)result = v26;
    if (v13)
      return result;
  }
  else if (v13)
  {
    return result;
  }
  if ((a2 & 0x80000000) != 0)
    v27 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v27 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * a2);
  v28 = *v27;
  if (*v27)
  {
    v29 = *(_QWORD *)(v28 + 16);
    *(_QWORD *)(v28 + 16) = result;
    *(_QWORD *)(result + 16) = v29;
    if ((*(_BYTE *)(result + 3) & 1) != 0)
    {
      *(_QWORD *)(result + 24) = v28;
    }
    else
    {
      *(_QWORD *)(result + 24) = 0;
      v27 = (uint64_t *)(v29 + 24);
    }
  }
  else
  {
    *(_QWORD *)(result + 16) = result;
    *(_QWORD *)(result + 24) = 0;
  }
  *v27 = result;
  return result;
}

uint64_t llvm::MachineOperand::isIdenticalTo(llvm::MachineOperand *this, const llvm::MachineOperand *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  int v6;

  v2 = *(_DWORD *)this;
  v3 = *(_DWORD *)this;
  if ((_DWORD)v3 != *(_DWORD *)a2)
    return 0;
  result = 0;
  if ((_BYTE)v2)
    v5 = (v2 >> 8) & 0xFFF;
  else
    v5 = 0;
  if (*(_DWORD *)a2)
    v6 = (*(_DWORD *)a2 >> 8) & 0xFFF;
  else
    v6 = 0;
  if (v5 == v6)
    __asm { BR              X14 }
  return result;
}

void llvm::hash_value(llvm *this, const llvm::MachineOperand *a2)
{
  if (*(_DWORD *)this)
    __asm { BR              X11 }
  __asm { BR              X10 }
}

void sub_1C5178360()
{
  JUMPOUT(0x1C5178068);
}

void sub_1C5178368(uint64_t a1@<X0>, unsigned int a2@<W8>, uint64_t a3, int a4, uint64_t a5, char a6, __int128 a7)
{
  int v7;

  a6 = 19;
  if ((_BYTE)a2)
    v7 = (a2 >> 8) & 0xFFF;
  else
    v7 = 0;
  a4 = v7;
  a7 = *(_OWORD *)(a1 + 16);
  sub_1C61F3A24(&a6, &a4, (uint64_t)&a7);
  JUMPOUT(0x1C51780E8);
}

void sub_1C517839C(uint64_t a1@<X0>, unsigned int a2@<W8>, uint64_t a3, int a4, uint64_t a5, char a6, int a7, int a8)
{
  int v8;

  a6 = 18;
  if ((_BYTE)a2)
    v8 = (a2 >> 8) & 0xFFF;
  else
    v8 = 0;
  a8 = v8;
  a4 = *(_DWORD *)(a1 + 16);
  sub_1C61F3970(&a6, &a8, &a4);
  JUMPOUT(0x1C51780E8);
}

void sub_1C51783E0(uint64_t a1@<X0>, unsigned int a2@<W8>, uint64_t a3, int a4, uint64_t a5, char a6, uint64_t a7)
{
  int v7;

  a6 = 15;
  if ((_BYTE)a2)
    v7 = (a2 >> 8) & 0xFFF;
  else
    v7 = 0;
  a4 = v7;
  a7 = *(_QWORD *)(a1 + 16);
  sub_1C61F36A0(&a6, &a4, &a7);
  JUMPOUT(0x1C51780E8);
}

void sub_1C5178414(uint64_t a1@<X0>, unsigned int a2@<W8>, uint64_t a3, int a4, uint64_t a5, char a6, uint64_t a7)
{
  int v7;

  a6 = 14;
  if ((_BYTE)a2)
    v7 = (a2 >> 8) & 0xFFF;
  else
    v7 = 0;
  a4 = v7;
  a7 = *(_QWORD *)(a1 + 16);
  sub_1C61F36A0(&a6, &a4, &a7);
  JUMPOUT(0x1C51780E8);
}

void sub_1C5178448(uint64_t a1@<X0>, unsigned int a2@<W8>, uint64_t a3, unint64_t a4, uint64_t a5, int a6, __int16 a7, char a8, char a9, uint64_t a10)
{
  int v10;

  a9 = 11;
  if ((_BYTE)a2)
    v10 = (a2 >> 8) & 0xFFF;
  else
    v10 = 0;
  a6 = v10;
  a10 = *(_QWORD *)(a1 + 16);
  a4 = *(unsigned int *)(a1 + 4) | ((unint64_t)*(unsigned int *)(a1 + 24) << 32);
  sub_1C61F3808(&a9, &a6, &a10, (uint64_t *)&a4);
  JUMPOUT(0x1C51780E8);
}

void sub_1C5178490(uint64_t a1@<X0>, unsigned int a2@<W8>, uint64_t a3, unint64_t a4, uint64_t a5, int a6, __int16 a7, char a8, char a9, const char *a10, const char *a11)
{
  int v11;
  const char *v12;

  a9 = 9;
  if ((_BYTE)a2)
    v11 = (a2 >> 8) & 0xFFF;
  else
    v11 = 0;
  a6 = v11;
  a4 = *(unsigned int *)(a1 + 4) | ((unint64_t)*(unsigned int *)(a1 + 24) << 32);
  v12 = *(const char **)(a1 + 16);
  a10 = v12;
  if (v12)
    v12 = (const char *)strlen(v12);
  a11 = v12;
  sub_1C61F3750(&a9, &a6, (uint64_t *)&a4, (uint64_t)&a10);
  JUMPOUT(0x1C51780E8);
}

void sub_1C51784E4()
{
  JUMPOUT(0x1C5178258);
}

void sub_1C51784FC(uint64_t a1@<X0>, unsigned int a2@<W8>, uint64_t a3, int a4, uint64_t a5, char a6, uint64_t a7)
{
  int v7;

  a6 = 2;
  if ((_BYTE)a2)
    v7 = (a2 >> 8) & 0xFFF;
  else
    v7 = 0;
  a4 = v7;
  a7 = *(_QWORD *)(a1 + 16);
  sub_1C61F36A0(&a6, &a4, &a7);
  JUMPOUT(0x1C51780E8);
}

void sub_1C517858C()
{
  JUMPOUT(0x1C5178120);
}

void sub_1C51785A0()
{
  unsigned __int8 v0;
  unint64_t v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v1 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v1 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v1;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  JUMPOUT(0x1C51781F8);
}

unint64_t sub_1C51787EC(_BYTE *a1, int *a2, uint64_t *a3)
{
  uint64_t *v3;
  int *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  int v8;
  int v9;
  unint64_t v10;
  _BYTE *v13;
  _OWORD v14[4];
  _OWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = a2;
  v18 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  v5 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v6 = &unk_1ED7EA000;
  if ((v5 & 1) == 0)
  {
    v13 = a1;
    v8 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v6 = &unk_1ED7EA000;
    v4 = a2;
    v3 = a3;
    v9 = v8;
    a1 = v13;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v10;
      __cxa_guard_release(&qword_1ED7EAC88);
      v6 = (_QWORD *)&unk_1ED7EA000;
      v3 = a3;
      a1 = v13;
      v4 = a2;
    }
  }
  v17 = v6[400];
  LOBYTE(v14[0]) = *a1;
  return sub_1C50FDABC((char *)v14, 0, (_OWORD *)((char *)v14 + 1), (char *)v15, v4, v3);
}

unint64_t sub_1C51788FC(_BYTE *a1, int *a2, int *a3)
{
  int *v3;
  int *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  int v8;
  int v9;
  unint64_t v10;
  _BYTE *v13;
  _OWORD v14[4];
  _OWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = a2;
  v18 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  v5 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v6 = &unk_1ED7EA000;
  if ((v5 & 1) == 0)
  {
    v13 = a1;
    v8 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v6 = &unk_1ED7EA000;
    v4 = a2;
    v3 = a3;
    v9 = v8;
    a1 = v13;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v10;
      __cxa_guard_release(&qword_1ED7EAC88);
      v6 = (_QWORD *)&unk_1ED7EA000;
      v3 = a3;
      a1 = v13;
      v4 = a2;
    }
  }
  v17 = v6[400];
  LOBYTE(v14[0]) = *a1;
  return sub_1C517CF98((char *)v14, 0, (_OWORD *)((char *)v14 + 1), (char *)v15, v4, v3);
}

unint64_t sub_1C5178A0C(char *a1, int *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  int *v6;
  char *v7;
  unsigned __int8 v8;
  _QWORD *v9;
  int v11;
  unint64_t v12;
  _OWORD v17[4];
  _OWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a4;
  v5 = a3;
  v6 = a2;
  v7 = a1;
  v21 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  memset(v17, 0, sizeof(v17));
  v8 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v9 = &unk_1ED7EA000;
  if ((v8 & 1) == 0)
  {
    v11 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v9 = &unk_1ED7EA000;
    v5 = a3;
    v7 = a1;
    v4 = a4;
    v6 = a2;
    if (v11)
    {
      v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v12 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v12;
      __cxa_guard_release(&qword_1ED7EAC88);
      v9 = (_QWORD *)&unk_1ED7EA000;
      v5 = a3;
      v7 = a1;
      v4 = a4;
      v6 = a2;
    }
  }
  v20 = v9[400];
  return sub_1C517D010((char *)v17, 0, v17, (char *)v18, v7, v6, v5, v4);
}

unint64_t llvm::MachineOperand::printTargetFlags(unint64_t this, llvm::raw_ostream *a2, const llvm::MachineOperand *a3)
{
  BOOL v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  void *v14;
  BOOL v15;
  uint64_t v16;
  const char **v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  llvm::raw_ostream *v21;
  size_t v22;
  const char *v23;
  unint64_t v24;
  llvm::raw_ostream *v25;
  const char *v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _WORD *v31;
  const void *v32;
  unint64_t v33;
  _WORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;

  if (*(_DWORD *)a2)
    v3 = (*(_DWORD *)a2 & 0xFFF00) == 0;
  else
    v3 = 1;
  if (!v3)
  {
    v5 = *((_QWORD *)a2 + 1);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 24);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 32);
        if (v7)
        {
          v8 = (llvm::raw_ostream *)this;
          v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 104))(*(_QWORD *)(v7 + 16));
          v10 = v9;
          if (*(_DWORD *)a2)
            v11 = (*(_DWORD *)a2 >> 8) & 0xFFF;
          else
            v11 = 0;
          this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 1104))(v9, v11);
          v12 = this;
          v13 = HIDWORD(this);
          v14 = (void *)*((_QWORD *)v8 + 4);
          if (*((_QWORD *)v8 + 3) - (_QWORD)v14 > 0xCuLL)
          {
            qmemcpy(v14, "target-flags(", 13);
            *((_QWORD *)v8 + 4) += 13;
          }
          else
          {
            this = (unint64_t)llvm::raw_ostream::write(v8, "target-flags(", 0xDuLL);
          }
          v15 = v12 != 0;
          if (!(v12 | v13))
          {
            v19 = *((_QWORD *)v8 + 4);
            if ((unint64_t)(*((_QWORD *)v8 + 3) - v19) <= 0xA)
            {
              v20 = "<unknown>) ";
              v21 = v8;
              v22 = 11;
              return (unint64_t)llvm::raw_ostream::write(v21, v20, v22);
            }
            *(_DWORD *)(v19 + 7) = 539573870;
            *(_QWORD *)v19 = *(_QWORD *)"<unknown>) ";
            v36 = *((_QWORD *)v8 + 4) + 11;
            goto LABEL_60;
          }
          if (v12)
          {
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 1112))(v10);
            if (!v16)
              goto LABEL_25;
            v17 = (const char **)(this + 8);
            v18 = 16 * v16;
            while (*((_DWORD *)v17 - 2) != v12)
            {
              v17 += 2;
              v18 -= 16;
              if (!v18)
                goto LABEL_25;
            }
            v23 = *v17;
            if (!*v17)
            {
LABEL_25:
              v27 = (void *)*((_QWORD *)v8 + 4);
              if (*((_QWORD *)v8 + 3) - (_QWORD)v27 <= 0x14uLL)
              {
                v26 = "<unknown target flag>";
                v25 = v8;
                v24 = 21;
                goto LABEL_27;
              }
              qmemcpy(v27, "<unknown target flag>", 21);
              v37 = *((_QWORD *)v8 + 4) + 21;
              goto LABEL_63;
            }
            v24 = strlen(*v17);
            this = *((_QWORD *)v8 + 4);
            if (v24 > *((_QWORD *)v8 + 3) - this)
            {
              v25 = v8;
              v26 = v23;
LABEL_27:
              this = (unint64_t)llvm::raw_ostream::write(v25, v26, v24);
              goto LABEL_28;
            }
            if (v24)
            {
              v38 = v23;
              v39 = v24;
              this = (unint64_t)memcpy((void *)this, v38, v24);
              v37 = *((_QWORD *)v8 + 4) + v39;
LABEL_63:
              *((_QWORD *)v8 + 4) = v37;
            }
          }
LABEL_28:
          if (!(_DWORD)v13)
          {
            v35 = *((_QWORD *)v8 + 3);
            v34 = (_WORD *)*((_QWORD *)v8 + 4);
LABEL_54:
            if ((unint64_t)(v35 - (_QWORD)v34) <= 1)
            {
              v20 = ") ";
              v21 = v8;
              v22 = 2;
              return (unint64_t)llvm::raw_ostream::write(v21, v20, v22);
            }
            *v34 = 8233;
            v36 = *((_QWORD *)v8 + 4) + 2;
LABEL_60:
            *((_QWORD *)v8 + 4) = v36;
            return this;
          }
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 1120))(v10);
          if (v28)
          {
            v29 = this;
            v30 = 16 * v28;
            do
            {
              if ((*(_DWORD *)v29 & ~(_DWORD)v13) == 0)
              {
                if (v15)
                {
                  v31 = (_WORD *)*((_QWORD *)v8 + 4);
                  if (*((_QWORD *)v8 + 3) - (_QWORD)v31 > 1uLL)
                  {
                    *v31 = 8236;
                    *((_QWORD *)v8 + 4) += 2;
                  }
                  else
                  {
                    this = (unint64_t)llvm::raw_ostream::write(v8, ", ", 2uLL);
                  }
                }
                v32 = *(const void **)(v29 + 8);
                if (v32)
                {
                  v33 = strlen(*(const char **)(v29 + 8));
                  this = *((_QWORD *)v8 + 4);
                  if (v33 <= *((_QWORD *)v8 + 3) - this)
                  {
                    if (v33)
                    {
                      this = (unint64_t)memcpy((void *)this, v32, v33);
                      *((_QWORD *)v8 + 4) += v33;
                    }
                  }
                  else
                  {
                    this = (unint64_t)llvm::raw_ostream::write(v8, (const char *)v32, v33);
                  }
                }
                LODWORD(v13) = v13 & ~*(_DWORD *)v29;
                v15 = 1;
              }
              v29 += 16;
              v30 -= 16;
            }
            while (v30);
            v34 = (_WORD *)*((_QWORD *)v8 + 4);
            if (!(_DWORD)v13)
              goto LABEL_53;
            if (!v15)
            {
LABEL_51:
              if (*((_QWORD *)v8 + 3) - (_QWORD)v34 > 0x1CuLL)
              {
                qmemcpy(v34, "<unknown bitmask target flag>", 29);
                v34 = (_WORD *)(*((_QWORD *)v8 + 4) + 29);
                *((_QWORD *)v8 + 4) = v34;
              }
              else
              {
                this = (unint64_t)llvm::raw_ostream::write(v8, "<unknown bitmask target flag>", 0x1DuLL);
                v34 = (_WORD *)*((_QWORD *)v8 + 4);
              }
LABEL_53:
              v35 = *((_QWORD *)v8 + 3);
              goto LABEL_54;
            }
          }
          else
          {
            v34 = (_WORD *)*((_QWORD *)v8 + 4);
            if (!v12)
              goto LABEL_51;
          }
          if (*((_QWORD *)v8 + 3) - (_QWORD)v34 > 1uLL)
          {
            *v34 = 8236;
            v34 = (_WORD *)(*((_QWORD *)v8 + 4) + 2);
            *((_QWORD *)v8 + 4) = v34;
          }
          else
          {
            this = (unint64_t)llvm::raw_ostream::write(v8, ", ", 2uLL);
            v34 = (_WORD *)*((_QWORD *)v8 + 4);
          }
          goto LABEL_51;
        }
      }
    }
  }
  return this;
}

void llvm::MachineOperand::print(llvm::raw_ostream *a1, llvm::MachineOperand *this, const llvm::Function **a3, uint64_t a4, uint64_t a5, int a6, char a7, int a8, unsigned int a9, uint64_t a10, uint64_t a11)
{
  int v19;
  unsigned int v20;
  _DWORD *v21;
  const char *v22;
  llvm::raw_ostream *v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  void (**v36)(void);
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  _BYTE *v42;
  _DWORD *v43;
  void (**v44)(void);
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  _WORD *v50;
  _DWORD *v51;
  void (**v52)(void);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  llvm::raw_ostream *v61;
  size_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  size_t v66;
  _BYTE *v67;
  unsigned int v68;
  const char *v69;
  size_t v70;
  void *v71;
  size_t v72;
  _BYTE *v73;
  size_t v74;
  const char *PredicateName;
  size_t v76;
  uint64_t v77;
  uint64_t v78;
  size_t v79;
  const char *v80;
  int *v81;
  uint64_t v82;
  char v83;
  unint64_t v84;
  _BYTE *v85;
  size_t v86;
  llvm::raw_ostream *v87;
  unint64_t v88;
  int v89;
  void *v90;
  size_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  unint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  unint64_t v107;
  const char *v108;
  size_t v109;
  _BYTE *v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  const char *v114;
  llvm::raw_ostream *v115;
  size_t v116;
  _DWORD *v117;
  char *v118;
  const char *v119;
  uint64_t v120;
  _DWORD *v121;
  uint64_t v122;
  unsigned int v123;
  const void *v124;
  size_t v125;
  void *v126;
  uint64_t v127;
  _BYTE *v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE *v135;
  _DWORD *v136;
  unint64_t v137;
  llvm::raw_ostream *v138;
  int v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  const char *v143;
  size_t v144;
  _BYTE *v145;
  llvm::raw_ostream *v146;
  size_t v147;
  void *v148;
  _WORD *v149;
  uint64_t v150;
  const llvm::Value *v151;
  const llvm::Function *v152;
  uint64_t v153;
  const char *v154;
  llvm::raw_ostream *v155;
  size_t v156;
  llvm::MCSymbol *v157;
  uint64_t v158;
  _DWORD *v159;
  _BYTE *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  const llvm::Value *v166;
  int v167;
  int v168;
  _WORD *v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  const char *v179;
  int LocalSlot;
  void *v181;
  void *v182;
  const char *v183;
  llvm::raw_ostream *v184;
  size_t v185;
  void *v186;
  _DWORD *v187;
  const char *v188;
  llvm::raw_ostream *v189;
  size_t v190;
  uint64_t v191;
  llvm::MCSymbol *v192;
  _WORD *v193;
  unint64_t v194;
  llvm::raw_ostream *v195;
  int v196;
  _WORD *v197;
  unint64_t v198;
  uint64_t v199;
  void *v200;
  const char *v201;
  llvm::raw_ostream *v202;
  size_t v203;
  _QWORD *v204;
  uint64_t v205;
  llvm::MCSymbol *v206;
  _WORD *v207;
  const char *v208;
  llvm::raw_ostream *v209;
  size_t v210;
  uint64_t v211;
  llvm::MCSymbol *v212;
  _DWORD *v213;
  llvm::MCSymbol *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t i;
  uint64_t v221;
  _WORD *v222;
  _QWORD *v223;
  uint64_t v224;
  llvm::MCSymbol *v225;
  unsigned int v226;
  uint64_t v227;
  llvm::MCSymbol *v228;
  _WORD *v229;
  uint64_t v230;
  void *v231;
  uint64_t v232;
  void **v233;
  _QWORD *v234;
  uint64_t v235;
  _BYTE *v236;
  unint64_t v237;
  llvm::raw_ostream *v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  _BYTE *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  _BYTE *v247;
  uint64_t v248;
  _BYTE *v249;
  uint64_t v250;
  _BYTE *v251;
  uint64_t v252;
  _BYTE *v253;
  uint64_t v254;
  _BYTE *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  void *__p;
  const char *v264;
  uint64_t v265;
  void **p_p;
  uint64_t v267;
  llvm::SlotTracker *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;

  v271 = *MEMORY[0x1E0C80C00];
  v262 = a4;
  llvm::MachineOperand::printTargetFlags((unint64_t)this, a1, (const llvm::MachineOperand *)a3);
  v19 = *(_DWORD *)a1;
  switch(*(_DWORD *)a1)
  {
    case 0u:
      v20 = *((_DWORD *)a1 + 1);
      if ((v19 & 0x2000000) != 0)
      {
        if ((v19 & 0x1000000) != 0)
          v22 = "implicit-def ";
        else
          v22 = "implicit ";
        if ((v19 & 0x1000000) != 0)
          v91 = 13;
        else
          v91 = 9;
        v92 = (void *)*((_QWORD *)this + 4);
        if (v91 > *((_QWORD *)this + 3) - (_QWORD)v92)
        {
          v23 = this;
          v24 = v91;
          goto LABEL_123;
        }
        memcpy(v92, v22, v91);
        v232 = *((_QWORD *)this + 4) + v91;
        goto LABEL_392;
      }
      if ((v19 & 0x1000000) != 0 && a6)
      {
        v21 = (_DWORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v21 <= 3uLL)
        {
          v22 = "def ";
          v23 = this;
          v24 = 4;
LABEL_123:
          llvm::raw_ostream::write(v23, v22, v24);
          goto LABEL_124;
        }
        *v21 = 543581540;
        v232 = *((_QWORD *)this + 4) + 4;
LABEL_392:
        *((_QWORD *)this + 4) = v232;
      }
LABEL_124:
      if ((*((_BYTE *)a1 + 3) & 0x20) != 0)
      {
        v93 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v93) > 8)
        {
          *(_BYTE *)(v93 + 8) = 32;
          *(_QWORD *)v93 = *(_QWORD *)"internal ";
          *((_QWORD *)this + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(this, "internal ", 9uLL);
        }
      }
      if ((~*(_DWORD *)a1 & 0x5000000) == 0)
      {
        v94 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v94) > 4)
        {
          *(_BYTE *)(v94 + 4) = 32;
          *(_DWORD *)v94 = 1684104548;
          *((_QWORD *)this + 4) += 5;
        }
        else
        {
          llvm::raw_ostream::write(this, "dead ", 5uLL);
        }
      }
      if (((*(_DWORD *)a1 >> 26) & ~HIBYTE(*(_DWORD *)a1) & 1) != 0)
      {
        v95 = (_DWORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v95 > 6uLL)
        {
          *(_DWORD *)((char *)v95 + 3) = 543450476;
          *v95 = 1819044203;
          *((_QWORD *)this + 4) += 7;
        }
        else
        {
          llvm::raw_ostream::write(this, "killed ", 7uLL);
        }
      }
      if ((*((_BYTE *)a1 + 3) & 0x10) != 0)
      {
        v96 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v96) > 5)
        {
          *(_WORD *)(v96 + 4) = 8294;
          *(_DWORD *)v96 = 1701080693;
          *((_QWORD *)this + 4) += 6;
        }
        else
        {
          llvm::raw_ostream::write(this, "undef ", 6uLL);
        }
      }
      if ((*((_BYTE *)a1 + 3) & 0x40) != 0)
      {
        v97 = (void *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v97 > 0xDuLL)
        {
          qmemcpy(v97, "early-clobber ", 14);
          *((_QWORD *)this + 4) += 14;
        }
        else
        {
          llvm::raw_ostream::write(this, "early-clobber ", 0xEuLL);
        }
      }
      if ((*((_DWORD *)a1 + 1) - 1) > 0x3FFFFFFE || (*(_DWORD *)a1 & 0x8000000) == 0)
        goto LABEL_147;
      v98 = *((_QWORD *)a1 + 1);
      if (v98)
      {
        v99 = *(_QWORD *)(*(_QWORD *)(v98 + 16) + 8);
        v100 = 0x80000000;
        if ((*(_DWORD *)a1 & 0x1000000) != 0)
          v100 = 0x100000000;
        if ((v99 & v100) != 0)
          goto LABEL_147;
      }
      v101 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v101) > 9)
      {
        *(_WORD *)(v101 + 8) = 8293;
        *(_QWORD *)v101 = *(_QWORD *)"renamable ";
        *((_QWORD *)this + 4) += 10;
        if ((v20 & 0x80000000) == 0)
        {
LABEL_148:
          v102 = 0;
          goto LABEL_149;
        }
      }
      else
      {
        llvm::raw_ostream::write(this, "renamable ", 0xAuLL);
LABEL_147:
        if ((v20 & 0x80000000) == 0)
          goto LABEL_148;
      }
      v243 = *((_QWORD *)a1 + 1);
      if (!v243)
        goto LABEL_148;
      v244 = *(_QWORD *)(v243 + 24);
      if (!v244)
        goto LABEL_148;
      v245 = *(_QWORD *)(v244 + 32);
      if (!v245)
        goto LABEL_148;
      v102 = *(_QWORD *)(v245 + 40);
LABEL_149:
      v103 = operator new(0x28uLL);
      *(_QWORD *)v103 = &off_1E814D010;
      v103[2] = v20;
      *((_QWORD *)v103 + 2) = a10;
      v103[6] = 0;
      *((_QWORD *)v103 + 4) = v102;
      sub_1C52C9630((llvm::raw_ostream *)v103, this);
      (*(void (**)(_DWORD *))(*(_QWORD *)v103 + 40))(v103);
      v104 = ((unint64_t)*(unsigned int *)a1 >> 8) & 0xFFF;
      if ((_DWORD)v104)
      {
        if (a10)
        {
          v105 = (_BYTE *)*((_QWORD *)this + 4);
          if ((unint64_t)v105 >= *((_QWORD *)this + 3))
          {
            llvm::raw_ostream::write(this, 46);
          }
          else
          {
            *((_QWORD *)this + 4) = v105 + 1;
            *v105 = 46;
          }
          v122 = *(_QWORD *)(a10 + 224);
          v123 = v104 - 1;
          v124 = *(const void **)(v122 + 8 * (v104 - 1));
          if (v124)
          {
            v125 = strlen(*(const char **)(v122 + 8 * v123));
            v126 = (void *)*((_QWORD *)this + 4);
            if (v125 <= *((_QWORD *)this + 3) - (_QWORD)v126)
            {
              if (v125)
              {
                memcpy(v126, v124, v125);
                *((_QWORD *)this + 4) += v125;
              }
            }
            else
            {
              llvm::raw_ostream::write(this, (const char *)v124, v125);
            }
          }
        }
        else
        {
          v121 = (_DWORD *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v121 > 6uLL)
          {
            *(_DWORD *)((char *)v121 + 3) = 1734701666;
            *v121 = 1651864366;
            *((_QWORD *)this + 4) += 7;
          }
          else
          {
            llvm::raw_ostream::write(this, ".subreg", 7uLL);
          }
          sub_1C5E21910(this, v104, 0, 0, 0);
        }
      }
      if ((v20 & 0x80000000) != 0)
      {
        v130 = *((_QWORD *)a1 + 1);
        if (v130)
        {
          v131 = *(_QWORD *)(v130 + 24);
          if (v131)
          {
            v132 = *(_QWORD *)(v131 + 32);
            if (v132)
            {
              v133 = *(_QWORD *)(v132 + 40);
              if (!a6 || (a7 & 1) != 0 || sub_1C50E3E8C(*(_QWORD *)(v132 + 40), v20))
              {
                v134 = (_BYTE *)*((_QWORD *)this + 4);
                if ((unint64_t)v134 >= *((_QWORD *)this + 3))
                {
                  llvm::raw_ostream::write(this, 58);
                }
                else
                {
                  *((_QWORD *)this + 4) = v134 + 1;
                  *v134 = 58;
                }
                v159 = operator new(0x20uLL);
                *(_QWORD *)v159 = &off_1E814D0E8;
                v159[2] = v20;
                *((_QWORD *)v159 + 2) = v133;
                *((_QWORD *)v159 + 3) = a10;
                sub_1C52C9EF0((uint64_t)v159, this);
                (*(void (**)(_DWORD *))(*(_QWORD *)v159 + 40))(v159);
              }
            }
          }
        }
      }
      if (a8 && (*(_DWORD *)a1 & 0xF00000) != 0 && (*(_DWORD *)a1 & 0x1000000) == 0)
      {
        v127 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v127) > 9)
        {
          *(_WORD *)(v127 + 8) = 8294;
          *(_QWORD *)v127 = *(_QWORD *)"(tied-def ";
          *((_QWORD *)this + 4) += 10;
        }
        else
        {
          llvm::raw_ostream::write(this, "(tied-def ", 0xAuLL);
        }
        sub_1C5E21910(this, a9, 0, 0, 0);
        v128 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v128)
        {
          llvm::raw_ostream::write(this, ")", 1uLL);
        }
        else
        {
          *v128 = 41;
          ++*((_QWORD *)this + 4);
        }
      }
      if ((a4 & 0xFFFFFFFFFFFFFFF9) != 0)
      {
        v129 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v129 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this, 40);
        }
        else
        {
          *((_QWORD *)this + 4) = v129 + 1;
          *v129 = 40;
        }
        llvm::LLT::print((llvm::raw_ostream *)&v262, this);
        v135 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v135 < *((_QWORD *)this + 3))
          goto LABEL_216;
        llvm::raw_ostream::write(this, 41);
      }
      return;
    case 1u:
      v25 = *((_QWORD *)a1 + 1);
      if (v25
        && (v26 = *(_QWORD *)(v25 + 24)) != 0
        && (v27 = *(_QWORD *)(v26 + 32)) != 0
        && (v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v27 + 16) + 104))(*(_QWORD *)(v27 + 16)),
            (v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 1256))(v28)) != 0))
      {
        (*(void (**)(uint64_t, llvm::MachineOperand *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v29 + 16))(v29, this, *((_QWORD *)a1 + 1), a5, *((_QWORD *)a1 + 2));
      }
      else
      {
        llvm::raw_ostream::operator<<(this, *((_QWORD *)a1 + 2));
      }
      return;
    case 2u:
    case 3u:
      sub_1C5314910(*((uint64_t **)a1 + 2), this, 1, (llvm::ModuleSlotTracker *)a3);
      return;
    case 4u:
      v30 = (const char *)*((_QWORD *)a1 + 2);
      p_p = &__p;
      __p = &off_1E8143F38;
      v264 = v30;
      sub_1C512E114((uint64_t)&__p, this);
      goto LABEL_19;
    case 5u:
      v31 = *((_QWORD *)a1 + 1);
      if (v31 && (v32 = *(_QWORD *)(v31 + 24)) != 0 && (v33 = *(_QWORD *)(v32 + 32)) != 0)
        v34 = *(_QWORD **)(v33 + 56);
      else
        v34 = 0;
      sub_1C517B4E8(this, *((_DWORD *)a1 + 4), 0, v34);
      return;
    case 6u:
      v136 = (_DWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v136 > 6uLL)
      {
        *(_DWORD *)((char *)v136 + 3) = 779383662;
        *v136 = 1852793637;
        *((_QWORD *)this + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(this, "%const.", 7uLL);
      }
      v137 = *((int *)a1 + 4);
      if ((v137 & 0x80000000) != 0)
      {
        v137 = -(uint64_t)v137;
        v138 = this;
        v139 = 1;
      }
      else
      {
        v138 = this;
        v139 = 0;
      }
      sub_1C5E21910(v138, v137, 0, 0, v139);
      goto LABEL_274;
    case 7u:
      v140 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v140 > 0xCuLL)
      {
        qmemcpy(v140, "target-index(", 13);
        *((_QWORD *)this + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(this, "target-index(", 0xDuLL);
      }
      v141 = *((_QWORD *)a1 + 1);
      if (!v141 || (v142 = *(_QWORD *)(v141 + 24)) == 0)
      {
        v143 = "<unknown>";
        goto LABEL_235;
      }
      v172 = *(_QWORD *)(v142 + 32);
      v143 = "<unknown>";
      if (!v172)
        goto LABEL_235;
      v173 = *((_DWORD *)a1 + 4);
      v174 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v172 + 16) + 104))(*(_QWORD *)(v172 + 16));
      v175 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 1096))(v174);
      if (!v176)
        goto LABEL_288;
      v177 = (_QWORD *)(v175 + 8);
      v178 = 16 * v176;
      while (*((_DWORD *)v177 - 2) != v173)
      {
        v177 += 2;
        v178 -= 16;
        if (!v178)
        {
LABEL_288:
          v179 = 0;
          goto LABEL_416;
        }
      }
      v179 = (const char *)*v177;
LABEL_416:
      if (v179)
        v143 = v179;
LABEL_235:
      v144 = strlen(v143);
      v145 = (_BYTE *)*((_QWORD *)this + 4);
      if (v144 <= *((_QWORD *)this + 3) - (_QWORD)v145)
      {
        if (v144)
        {
          memcpy(v145, v143, v144);
          v145 = (_BYTE *)(*((_QWORD *)this + 4) + v144);
          *((_QWORD *)this + 4) = v145;
        }
      }
      else
      {
        llvm::raw_ostream::write(this, v143, v144);
        v145 = (_BYTE *)*((_QWORD *)this + 4);
      }
      if ((unint64_t)v145 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 41);
      }
      else
      {
        *((_QWORD *)this + 4) = v145 + 1;
        *v145 = 41;
      }
LABEL_274:
      llvm::MachineOperand::printOperandOffset(this, *((unsigned int *)a1 + 1) | ((unint64_t)*((unsigned int *)a1 + 6) << 32));
      return;
    case 8u:
      v35 = *((_DWORD *)a1 + 4);
      p_p = &__p;
      __p = &off_1E8144AD0;
      LODWORD(v264) = v35;
      sub_1C5160434((uint64_t)&__p, this);
LABEL_19:
      if (p_p == &__p)
      {
        v36 = (void (**)(void))((char *)__p + 32);
      }
      else
      {
        if (!p_p)
          return;
        v36 = (void (**)(void))((char *)*p_p + 40);
      }
      (*v36)();
      return;
    case 9u:
      v146 = (llvm::raw_ostream *)*((_QWORD *)a1 + 2);
      if (v146)
        v147 = strlen(*((const char **)a1 + 2));
      else
        v147 = 0;
      v160 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v160 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 38);
      }
      else
      {
        *((_QWORD *)this + 4) = v160 + 1;
        *v160 = 38;
      }
      if (v147)
      {
        llvm::printLLVMNameWithoutPrefix(this, v146, v147);
      }
      else
      {
        v169 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v169 > 1uLL)
        {
          *v169 = 8738;
          *((_QWORD *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, "\"\"", 2uLL);
        }
      }
      goto LABEL_274;
    case 0xAu:
      llvm::Value::printAsOperand(*((llvm::Value **)a1 + 2), this, 0, (llvm::ModuleSlotTracker *)a3);
      goto LABEL_274;
    case 0xBu:
      v148 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v148 > 0xCuLL)
      {
        qmemcpy(v148, "blockaddress(", 13);
        *((_QWORD *)this + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(this, "blockaddress(", 0xDuLL);
      }
      llvm::Value::printAsOperand(*(llvm::Value **)(*((_QWORD *)a1 + 2) - 64), this, 0, (llvm::ModuleSlotTracker *)a3);
      v149 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v149 > 1uLL)
      {
        *v149 = 8236;
        v150 = *((_QWORD *)this + 4) + 2;
        *((_QWORD *)this + 4) = v150;
      }
      else
      {
        llvm::raw_ostream::write(this, ", ", 2uLL);
        v150 = *((_QWORD *)this + 4);
      }
      v151 = *(const llvm::Value **)(*((_QWORD *)a1 + 2) - 32);
      if ((unint64_t)(*((_QWORD *)this + 3) - v150) > 9)
      {
        *(_WORD *)(v150 + 8) = 11883;
        *(_QWORD *)v150 = *(_QWORD *)"%ir-block.";
        *((_QWORD *)this + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(this, "%ir-block.", 0xAuLL);
      }
      if ((*((_BYTE *)v151 + 23) & 0x10) == 0)
      {
        v152 = (const llvm::Function *)*((_QWORD *)v151 + 7);
        if (!v152)
        {
LABEL_250:
          v153 = *((_QWORD *)this + 4);
          if ((unint64_t)(*((_QWORD *)this + 3) - v153) <= 8)
          {
            v154 = "<unknown>";
            v155 = this;
            v156 = 9;
LABEL_374:
            llvm::raw_ostream::write(v155, v154, v156);
            goto LABEL_382;
          }
          *(_BYTE *)(v153 + 8) = 62;
          *(_QWORD *)v153 = *(_QWORD *)"<unknown>";
          v257 = *((_QWORD *)this + 4) + 9;
LABEL_474:
          *((_QWORD *)this + 4) = v257;
          goto LABEL_382;
        }
        if (v152 == a3[4])
        {
          LocalSlot = llvm::SlotTracker::getLocalSlot(a3[5], v151);
        }
        else
        {
          v233 = (void **)*((_QWORD *)v152 + 5);
          if (!v233)
            goto LABEL_250;
          __p = &off_1E814DC18;
          v264 = 0;
          LOWORD(v265) = 1;
          v270 = 0;
          v269 = 0;
          v267 = 0;
          v268 = 0;
          p_p = v233;
          llvm::ModuleSlotTracker::incorporateFunction((const llvm::Function **)&__p, v152);
          LocalSlot = llvm::SlotTracker::getLocalSlot(v268, v151);
          llvm::ModuleSlotTracker::~ModuleSlotTracker((llvm::ModuleSlotTracker *)&__p);
        }
        if (LocalSlot != -1)
        {
          v237 = LocalSlot;
          if (LocalSlot < 0)
          {
            v237 = -(uint64_t)LocalSlot;
            v238 = this;
            v239 = 1;
          }
          else
          {
            v238 = this;
            v239 = 0;
          }
          sub_1C5E21910(v238, v237, 0, 0, v239);
          goto LABEL_382;
        }
        v234 = (_QWORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v234 <= 7uLL)
        {
          v154 = "<badref>";
          v155 = this;
          v156 = 8;
          goto LABEL_374;
        }
        *v234 = 0x3E6665726461623CLL;
        v257 = *((_QWORD *)this + 4) + 8;
        goto LABEL_474;
      }
      v161 = ***(_QWORD ***)v151;
      v162 = *(_QWORD *)(v161 + 152);
      v163 = *(unsigned int *)(v161 + 168);
      if (!(_DWORD)v163)
        goto LABEL_380;
      LODWORD(v164) = (v163 - 1) & ((v151 >> 4) ^ (v151 >> 9));
      v165 = v162 + 16 * v164;
      v166 = *(const llvm::Value **)v165;
      if (*(const llvm::Value **)v165 != v151)
      {
        v167 = 1;
        while (v166 != (const llvm::Value *)-4096)
        {
          v168 = v164 + v167++;
          v164 = v168 & (v163 - 1);
          v166 = *(const llvm::Value **)(v162 + 16 * v164);
          if (v166 == v151)
          {
            v165 = v162 + 16 * v164;
            goto LABEL_381;
          }
        }
LABEL_380:
        v165 = v162 + 16 * v163;
      }
LABEL_381:
      llvm::printLLVMNameWithoutPrefix(this, (llvm::raw_ostream *)(*(_QWORD *)(v165 + 8) + 16), **(_QWORD **)(v165 + 8));
LABEL_382:
      v236 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v236 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 41);
      }
      else
      {
        *((_QWORD *)this + 4) = v236 + 1;
        *v236 = 41;
      }
      llvm::MachineOperand::printOperandOffset(this, *((unsigned int *)a1 + 1) | ((unint64_t)*((unsigned int *)a1 + 6) << 32));
      return;
    case 0xCu:
      v37 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v37 > 7uLL)
      {
        *v37 = 0x6B73616D6765723CLL;
        *((_QWORD *)this + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(this, "<regmask", 8uLL);
      }
      if (a10)
      {
        v38 = *(unsigned int *)(a10 + 16);
        if (!(_DWORD)v38)
          goto LABEL_176;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        while (((*(_DWORD *)(*((_QWORD *)a1 + 2) + 4 * (v39 >> 5)) >> v39) & 1) == 0)
        {
LABEL_39:
          if (++v39 >= v38)
          {
            v111 = v41 - v40;
            if (!(_DWORD)v111)
              goto LABEL_176;
            v112 = *((_QWORD *)this + 4);
            if ((unint64_t)(*((_QWORD *)this + 3) - v112) > 4)
            {
              *(_BYTE *)(v112 + 4) = 32;
              *(_DWORD *)v112 = 1684955424;
              *((_QWORD *)this + 4) += 5;
            }
            else
            {
              llvm::raw_ostream::write(this, " and ", 5uLL);
            }
            sub_1C5E21910(this, v111, 0, 0, 0);
            v113 = (_QWORD *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v113 <= 7uLL)
            {
              v114 = " more...";
              v115 = this;
              v116 = 8;
LABEL_175:
              llvm::raw_ostream::write(v115, v114, v116);
              goto LABEL_176;
            }
            *v113 = 0x2E2E2E65726F6D20;
            v235 = *((_QWORD *)this + 4) + 8;
            goto LABEL_398;
          }
        }
        if ((dword_1ED7FB188 & 0x80000000) == 0 && v40 > dword_1ED7FB188)
        {
LABEL_38:
          ++v41;
          goto LABEL_39;
        }
        v42 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v42)
        {
          llvm::raw_ostream::write(this, " ", 1uLL);
        }
        else
        {
          *v42 = 32;
          ++*((_QWORD *)this + 4);
        }
        v43 = operator new(0x28uLL);
        *(_QWORD *)v43 = &off_1E814D010;
        v43[2] = v39;
        *((_QWORD *)v43 + 2) = a10;
        v43[6] = 0;
        *((_QWORD *)v43 + 4) = 0;
        p_p = (void **)v43;
        sub_1C52C9630((llvm::raw_ostream *)v43, this);
        if (p_p == &__p)
        {
          v44 = (void (**)(void))((char *)__p + 32);
        }
        else
        {
          if (!p_p)
          {
LABEL_37:
            ++v40;
            v38 = *(unsigned int *)(a10 + 16);
            goto LABEL_38;
          }
          v44 = (void (**)(void))((char *)*p_p + 40);
        }
        (*v44)();
        goto LABEL_37;
      }
      v117 = (_DWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v117 <= 3uLL)
      {
        v114 = " ...";
        v115 = this;
        v116 = 4;
        goto LABEL_175;
      }
      *v117 = 774778400;
      v235 = *((_QWORD *)this + 4) + 4;
LABEL_398:
      *((_QWORD *)this + 4) = v235;
LABEL_176:
      v118 = (char *)*((_QWORD *)this + 4);
      if (*((char **)this + 3) == v118)
      {
        v119 = ">";
LABEL_182:
        llvm::raw_ostream::write(this, v119, 1uLL);
        return;
      }
LABEL_275:
      v170 = 62;
      goto LABEL_282;
    case 0xDu:
      v45 = *((_QWORD *)a1 + 2);
      v46 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v46 > 7uLL)
      {
        *v46 = 0x2874756F6576696CLL;
        *((_QWORD *)this + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(this, "liveout(", 8uLL);
      }
      if (!a10)
      {
        v120 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v120) > 8)
        {
          *(_BYTE *)(v120 + 8) = 62;
          *(_QWORD *)v120 = *(_QWORD *)"<unknown>";
          *((_QWORD *)this + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(this, "<unknown>", 9uLL);
        }
LABEL_180:
        v118 = (char *)*((_QWORD *)this + 4);
        if (*((char **)this + 3) == v118)
        {
          v119 = ")";
          goto LABEL_182;
        }
        v170 = 41;
LABEL_282:
        *v118 = v170;
        v171 = *((_QWORD *)this + 4) + 1;
LABEL_361:
        *((_QWORD *)this + 4) = v171;
        return;
      }
      v47 = *(unsigned int *)(a10 + 16);
      if (!(_DWORD)v47)
        goto LABEL_180;
      v48 = 0;
      v49 = 0;
      while (((*(_DWORD *)(v45 + 4 * (v48 >> 5)) >> v48) & 1) == 0)
      {
LABEL_57:
        if (v47 == ++v48)
          goto LABEL_180;
      }
      if ((v49 & 1) != 0)
      {
        v50 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v50 > 1uLL)
        {
          *v50 = 8236;
          *((_QWORD *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, ", ", 2uLL);
        }
      }
      v51 = operator new(0x28uLL);
      *(_QWORD *)v51 = &off_1E814D010;
      v51[2] = v48;
      *((_QWORD *)v51 + 2) = a10;
      v51[6] = 0;
      *((_QWORD *)v51 + 4) = 0;
      p_p = (void **)v51;
      sub_1C52C9630((llvm::raw_ostream *)v51, this);
      if (p_p == &__p)
      {
        v52 = (void (**)(void))((char *)__p + 32);
      }
      else
      {
        if (!p_p)
        {
LABEL_56:
          v49 = 1;
          goto LABEL_57;
        }
        v52 = (void (**)(void))((char *)*p_p + 40);
      }
      (*v52)();
      goto LABEL_56;
    case 0xEu:
      sub_1C5314B04((uint64_t)this, *((uint64_t ***)a1 + 2), (llvm::ModuleSlotTracker *)a3, 0, 1, 0);
      return;
    case 0xFu:
      v157 = (llvm::MCSymbol *)*((_QWORD *)a1 + 2);
LABEL_253:
      v158 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v158) > 9)
      {
        *(_WORD *)(v158 + 8) = 8300;
        *(_QWORD *)v158 = *(_QWORD *)"<mcsymbol ";
        *((_QWORD *)this + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(this, "<mcsymbol ", 0xAuLL);
      }
      llvm::MCSymbol::print(v157, this, 0);
      v118 = (char *)*((_QWORD *)this + 4);
      if (*((char **)this + 3) != v118)
        goto LABEL_275;
      llvm::raw_ostream::write(this, ">", 1uLL);
      return;
    case 0x10u:
      v53 = *((_QWORD *)a1 + 1);
      if (v53 && (v54 = *(_QWORD *)(v53 + 24)) != 0 && (v55 = *(_QWORD *)(v54 + 32)) != 0)
      {
        v56 = *((_DWORD *)a1 + 4);
        v57 = *(_QWORD *)(v55 + 440);
        v58 = a10;
        switch(*(_DWORD *)(v57 + 80 * v56))
        {
          case 0:
            v59 = *((_QWORD *)this + 4);
            if ((unint64_t)(*((_QWORD *)this + 3) - v59) <= 0xA)
            {
              v60 = "same_value ";
              v61 = this;
              v62 = 11;
              goto LABEL_343;
            }
            *(_DWORD *)(v59 + 7) = 543520108;
            *(_QWORD *)v59 = *(_QWORD *)"same_value ";
            v258 = *((_QWORD *)this + 4) + 11;
            goto LABEL_467;
          case 1:
            v182 = (void *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v182 <= 0xEuLL)
            {
              v183 = "remember_state ";
              v184 = this;
              v185 = 15;
              goto LABEL_357;
            }
            qmemcpy(v182, "remember_state ", 15);
            v259 = *((_QWORD *)this + 4) + 15;
            goto LABEL_472;
          case 2:
            v186 = (void *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v186 <= 0xDuLL)
            {
              v183 = "restore_state ";
              v184 = this;
              v185 = 14;
              goto LABEL_357;
            }
            qmemcpy(v186, "restore_state ", 14);
            v259 = *((_QWORD *)this + 4) + 14;
            goto LABEL_472;
          case 3:
            v187 = (_DWORD *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v187 <= 6uLL)
            {
              v188 = "offset ";
              v189 = this;
              v190 = 7;
              goto LABEL_317;
            }
            *(_DWORD *)((char *)v187 + 3) = 544499059;
            *v187 = 1936090735;
            v260 = *((_QWORD *)this + 4) + 7;
            goto LABEL_461;
          case 4:
            v191 = *((_QWORD *)this + 4);
            if ((unint64_t)(*((_QWORD *)this + 3) - v191) > 0x13)
            {
              *(_DWORD *)(v191 + 16) = 543254115;
              *(_OWORD *)v191 = *(_OWORD *)"llvm_def_aspace_cfa ";
              *((_QWORD *)this + 4) += 20;
            }
            else
            {
              llvm::raw_ostream::write(this, "llvm_def_aspace_cfa ", 0x14uLL);
            }
            v192 = *(llvm::MCSymbol **)(v57 + 80 * v56 + 8);
            if (v192)
            {
              v250 = *((_QWORD *)this + 4);
              if ((unint64_t)(*((_QWORD *)this + 3) - v250) > 9)
              {
                *(_WORD *)(v250 + 8) = 8300;
                *(_QWORD *)v250 = *(_QWORD *)"<mcsymbol ";
                *((_QWORD *)this + 4) += 10;
              }
              else
              {
                llvm::raw_ostream::write(this, "<mcsymbol ", 0xAuLL);
              }
              llvm::MCSymbol::print(v192, this, 0);
              v251 = (_BYTE *)*((_QWORD *)this + 4);
              if (*((_BYTE **)this + 3) == v251)
              {
                llvm::raw_ostream::write(this, ">", 1uLL);
              }
              else
              {
                *v251 = 62;
                ++*((_QWORD *)this + 4);
              }
              v58 = a10;
            }
            sub_1C517CCB4(*(_DWORD *)(v57 + 80 * v56 + 16), this, v58);
            v193 = (_WORD *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v193 > 1uLL)
            {
              *v193 = 8236;
              *((_QWORD *)this + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(this, ", ", 2uLL);
            }
            v194 = *(int *)(v57 + 80 * v56 + 20);
            if ((v194 & 0x80000000) != 0)
            {
              v194 = -(uint64_t)v194;
              v195 = this;
              v196 = 1;
            }
            else
            {
              v195 = this;
              v196 = 0;
            }
            sub_1C5E21910(v195, v194, 0, 0, v196);
            v197 = (_WORD *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v197 > 1uLL)
            {
              *v197 = 8236;
              *((_QWORD *)this + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(this, ", ", 2uLL);
            }
            v198 = *(unsigned int *)(v57 + 80 * v56 + 24);
            goto LABEL_327;
          case 5:
            v199 = *((_QWORD *)this + 4);
            if ((unint64_t)(*((_QWORD *)this + 3) - v199) <= 0x10)
            {
              v60 = "def_cfa_register ";
              v61 = this;
              v62 = 17;
              goto LABEL_343;
            }
            *(_BYTE *)(v199 + 16) = 32;
            *(_OWORD *)v199 = *(_OWORD *)"def_cfa_register ";
            v258 = *((_QWORD *)this + 4) + 17;
            goto LABEL_467;
          case 6:
            v200 = (void *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v200 <= 0xEuLL)
            {
              v201 = "def_cfa_offset ";
              v202 = this;
              v203 = 15;
              goto LABEL_324;
            }
            qmemcpy(v200, "def_cfa_offset ", 15);
            v261 = *((_QWORD *)this + 4) + 15;
            goto LABEL_463;
          case 7:
            v204 = (_QWORD *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v204 <= 7uLL)
            {
              v188 = "def_cfa ";
              v189 = this;
              v190 = 8;
              goto LABEL_317;
            }
            *v204 = 0x206166635F666564;
            v260 = *((_QWORD *)this + 4) + 8;
            goto LABEL_461;
          case 8:
            v205 = *((_QWORD *)this + 4);
            if ((unint64_t)(*((_QWORD *)this + 3) - v205) > 0xA)
            {
              *(_DWORD *)(v205 + 7) = 544499059;
              *(_QWORD *)v205 = *(_QWORD *)"rel_offset ";
              v260 = *((_QWORD *)this + 4) + 11;
LABEL_461:
              *((_QWORD *)this + 4) = v260;
            }
            else
            {
              v188 = "rel_offset ";
              v189 = this;
              v190 = 11;
LABEL_317:
              llvm::raw_ostream::write(v189, v188, v190);
            }
            v206 = *(llvm::MCSymbol **)(v57 + 80 * v56 + 8);
            if (v206)
            {
              v246 = *((_QWORD *)this + 4);
              if ((unint64_t)(*((_QWORD *)this + 3) - v246) > 9)
              {
                *(_WORD *)(v246 + 8) = 8300;
                *(_QWORD *)v246 = *(_QWORD *)"<mcsymbol ";
                *((_QWORD *)this + 4) += 10;
              }
              else
              {
                llvm::raw_ostream::write(this, "<mcsymbol ", 0xAuLL);
              }
              llvm::MCSymbol::print(v206, this, 0);
              v247 = (_BYTE *)*((_QWORD *)this + 4);
              if (*((_BYTE **)this + 3) == v247)
              {
                llvm::raw_ostream::write(this, ">", 1uLL);
              }
              else
              {
                *v247 = 62;
                ++*((_QWORD *)this + 4);
              }
              v58 = a10;
            }
            sub_1C517CCB4(*(_DWORD *)(v57 + 80 * v56 + 16), this, v58);
            v207 = (_WORD *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v207 <= 1uLL)
            {
              v208 = ", ";
              v209 = this;
              v210 = 2;
              goto LABEL_321;
            }
            *v207 = 8236;
            v256 = *((_QWORD *)this + 4) + 2;
            goto LABEL_446;
          case 9:
            v211 = *((_QWORD *)this + 4);
            if ((unint64_t)(*((_QWORD *)this + 3) - v211) > 0x11)
            {
              *(_WORD *)(v211 + 16) = 8308;
              *(_OWORD *)v211 = *(_OWORD *)"adjust_cfa_offset ";
              v261 = *((_QWORD *)this + 4) + 18;
LABEL_463:
              *((_QWORD *)this + 4) = v261;
            }
            else
            {
              v201 = "adjust_cfa_offset ";
              v202 = this;
              v203 = 18;
LABEL_324:
              llvm::raw_ostream::write(v202, v201, v203);
            }
            v212 = *(llvm::MCSymbol **)(v57 + 80 * v56 + 8);
            if (!v212)
              goto LABEL_326;
            v248 = *((_QWORD *)this + 4);
            if ((unint64_t)(*((_QWORD *)this + 3) - v248) > 9)
            {
              *(_WORD *)(v248 + 8) = 8300;
              *(_QWORD *)v248 = *(_QWORD *)"<mcsymbol ";
              *((_QWORD *)this + 4) += 10;
            }
            else
            {
              llvm::raw_ostream::write(this, "<mcsymbol ", 0xAuLL);
            }
            llvm::MCSymbol::print(v212, this, 0);
            v249 = (_BYTE *)*((_QWORD *)this + 4);
            if (*((_BYTE **)this + 3) == v249)
            {
              v208 = ">";
              v209 = this;
              v210 = 1;
LABEL_321:
              llvm::raw_ostream::write(v209, v208, v210);
            }
            else
            {
              *v249 = 62;
              v256 = *((_QWORD *)this + 4) + 1;
LABEL_446:
              *((_QWORD *)this + 4) = v256;
            }
LABEL_326:
            v198 = *(int *)(v57 + 80 * v56 + 20);
            if ((v198 & 0x80000000) != 0)
              sub_1C5E21910(this, -(uint64_t)v198, 0, 0, 1);
            else
LABEL_327:
              sub_1C5E21910(this, v198, 0, 0, 0);
            return;
          case 0xA:
            v213 = (_DWORD *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v213 > 6uLL)
            {
              *(_DWORD *)((char *)v213 + 3) = 543518817;
              *v213 = 1633907557;
              *((_QWORD *)this + 4) += 7;
            }
            else
            {
              llvm::raw_ostream::write(this, "escape ", 7uLL);
            }
            v214 = *(llvm::MCSymbol **)(v57 + 80 * v56 + 8);
            if (v214)
            {
              v252 = *((_QWORD *)this + 4);
              if ((unint64_t)(*((_QWORD *)this + 3) - v252) > 9)
              {
                *(_WORD *)(v252 + 8) = 8300;
                *(_QWORD *)v252 = *(_QWORD *)"<mcsymbol ";
                *((_QWORD *)this + 4) += 10;
              }
              else
              {
                llvm::raw_ostream::write(this, "<mcsymbol ", 0xAuLL);
              }
              llvm::MCSymbol::print(v214, this, 0);
              v253 = (_BYTE *)*((_QWORD *)this + 4);
              if (*((_BYTE **)this + 3) == v253)
              {
                llvm::raw_ostream::write(this, ">", 1uLL);
              }
              else
              {
                *v253 = 62;
                ++*((_QWORD *)this + 4);
              }
            }
            v215 = v57 + 80 * v56;
            v216 = *(_QWORD *)(v215 + 32);
            v217 = *(_QWORD *)(v215 + 40);
            v218 = (uint64_t *)(v215 + 32);
            if (v217 != v216)
            {
              v219 = v217 + ~v216;
              if (v219)
              {
                for (i = 0; i != v219; ++i)
                {
                  v221 = *(unsigned __int8 *)(*v218 + i);
                  __p = &unk_1E8145938;
                  v264 = "0x%02x";
                  v265 = v221;
                  llvm::raw_ostream::operator<<(this, (uint64_t)&__p);
                  v222 = (_WORD *)*((_QWORD *)this + 4);
                  if (*((_QWORD *)this + 3) - (_QWORD)v222 > 1uLL)
                  {
                    *v222 = 8236;
                    *((_QWORD *)this + 4) += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write(this, ", ", 2uLL);
                  }
                }
                v216 = *v218;
              }
              v240 = *(unsigned __int8 *)(v216 + v219);
              __p = &unk_1E8145938;
              v264 = "0x%02x";
              v265 = v240;
              llvm::raw_ostream::operator<<(this, (uint64_t)&__p);
            }
            return;
          case 0xB:
            v223 = (_QWORD *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v223 <= 7uLL)
            {
              v60 = "restore ";
              v61 = this;
              v62 = 8;
              goto LABEL_343;
            }
            *v223 = 0x2065726F74736572;
            v258 = *((_QWORD *)this + 4) + 8;
            goto LABEL_467;
          case 0xC:
            v224 = *((_QWORD *)this + 4);
            if ((unint64_t)(*((_QWORD *)this + 3) - v224) > 9)
            {
              *(_WORD *)(v224 + 8) = 8292;
              *(_QWORD *)v224 = *(_QWORD *)"undefined ";
              v258 = *((_QWORD *)this + 4) + 10;
LABEL_467:
              *((_QWORD *)this + 4) = v258;
            }
            else
            {
              v60 = "undefined ";
              v61 = this;
              v62 = 10;
LABEL_343:
              llvm::raw_ostream::write(v61, v60, v62);
            }
            v225 = *(llvm::MCSymbol **)(v57 + 80 * v56 + 8);
            if (v225)
            {
              v241 = *((_QWORD *)this + 4);
              if ((unint64_t)(*((_QWORD *)this + 3) - v241) > 9)
              {
                *(_WORD *)(v241 + 8) = 8300;
                *(_QWORD *)v241 = *(_QWORD *)"<mcsymbol ";
                *((_QWORD *)this + 4) += 10;
              }
              else
              {
                llvm::raw_ostream::write(this, "<mcsymbol ", 0xAuLL);
              }
              llvm::MCSymbol::print(v225, this, 0);
              v242 = (_BYTE *)*((_QWORD *)this + 4);
              if (*((_BYTE **)this + 3) == v242)
              {
                llvm::raw_ostream::write(this, ">", 1uLL);
              }
              else
              {
                *v242 = 62;
                ++*((_QWORD *)this + 4);
              }
              v58 = a10;
            }
            v226 = *(_DWORD *)(v57 + 80 * v56 + 16);
LABEL_346:
            sub_1C517CCB4(v226, this, v58);
            return;
          case 0xD:
            v227 = *((_QWORD *)this + 4);
            if ((unint64_t)(*((_QWORD *)this + 3) - v227) > 8)
            {
              *(_BYTE *)(v227 + 8) = 32;
              *(_QWORD *)v227 = *(_QWORD *)"register ";
              *((_QWORD *)this + 4) += 9;
            }
            else
            {
              llvm::raw_ostream::write(this, "register ", 9uLL);
            }
            v228 = *(llvm::MCSymbol **)(v57 + 80 * v56 + 8);
            if (v228)
            {
              v254 = *((_QWORD *)this + 4);
              if ((unint64_t)(*((_QWORD *)this + 3) - v254) > 9)
              {
                *(_WORD *)(v254 + 8) = 8300;
                *(_QWORD *)v254 = *(_QWORD *)"<mcsymbol ";
                *((_QWORD *)this + 4) += 10;
              }
              else
              {
                llvm::raw_ostream::write(this, "<mcsymbol ", 0xAuLL);
              }
              llvm::MCSymbol::print(v228, this, 0);
              v255 = (_BYTE *)*((_QWORD *)this + 4);
              if (*((_BYTE **)this + 3) == v255)
              {
                llvm::raw_ostream::write(this, ">", 1uLL);
              }
              else
              {
                *v255 = 62;
                ++*((_QWORD *)this + 4);
              }
              v58 = a10;
            }
            sub_1C517CCB4(*(_DWORD *)(v57 + 80 * v56 + 16), this, v58);
            v229 = (_WORD *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v229 > 1uLL)
            {
              *v229 = 8236;
              *((_QWORD *)this + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(this, ", ", 2uLL);
            }
            v226 = *(_DWORD *)(v57 + 80 * v56 + 20);
            goto LABEL_346;
          case 0xE:
            v230 = *((_QWORD *)this + 4);
            if ((unint64_t)(*((_QWORD *)this + 3) - v230) <= 0xB)
            {
              v183 = "window_save ";
              v184 = this;
              v185 = 12;
              goto LABEL_357;
            }
            *(_DWORD *)(v230 + 8) = 543520353;
            *(_QWORD *)v230 = *(_QWORD *)"window_save ";
            v259 = *((_QWORD *)this + 4) + 12;
            goto LABEL_472;
          case 0xF:
            v231 = (void *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v231 > 0x14uLL)
            {
              qmemcpy(v231, "negate_ra_sign_state ", 21);
              v259 = *((_QWORD *)this + 4) + 21;
LABEL_472:
              *((_QWORD *)this + 4) = v259;
            }
            else
            {
              v183 = "negate_ra_sign_state ";
              v184 = this;
              v185 = 21;
LABEL_357:
              llvm::raw_ostream::write(v184, v183, v185);
            }
            v157 = *(llvm::MCSymbol **)(v57 + 80 * v56 + 8);
            if (v157)
              goto LABEL_253;
            return;
          default:
            v181 = (void *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v181 <= 0x1DuLL)
            {
              llvm::raw_ostream::write(this, "<unserializable cfi directive>", 0x1EuLL);
              return;
            }
            qmemcpy(v181, "<unserializable cfi directive>", 30);
            v171 = *((_QWORD *)this + 4) + 30;
            break;
        }
      }
      else
      {
        v90 = (void *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v90 <= 0xEuLL)
        {
          llvm::raw_ostream::write(this, "<cfi directive>", 0xFuLL);
          return;
        }
        qmemcpy(v90, "<cfi directive>", 15);
        v171 = *((_QWORD *)this + 4) + 15;
      }
      goto LABEL_361;
    case 0x11u:
      v63 = *((unsigned int *)a1 + 4);
      if (v63 > 0x30EC)
      {
        v106 = *((_QWORD *)this + 4);
        v107 = *((_QWORD *)this + 3) - v106;
        if (a11)
        {
          if (v107 > 0xA)
          {
            *(_DWORD *)(v106 + 7) = 1076388713;
            *(_QWORD *)v106 = *(_QWORD *)"intrinsic(@";
            *((_QWORD *)this + 4) += 11;
          }
          else
          {
            llvm::raw_ostream::write(this, "intrinsic(@", 0xBuLL);
          }
          (*(void (**)(void **__return_ptr, uint64_t, unint64_t, _QWORD, _QWORD))(*(_QWORD *)a11 + 16))(&__p, a11, v63, 0, 0);
          if (v265 >= 0)
            v108 = (const char *)&__p;
          else
            v108 = (const char *)__p;
          if (v265 >= 0)
            v109 = HIBYTE(v265) & 0x7F;
          else
            v109 = (size_t)v264;
          llvm::raw_ostream::write(this, v108, v109);
          v110 = (_BYTE *)*((_QWORD *)this + 4);
          if ((unint64_t)v110 >= *((_QWORD *)this + 3))
          {
            llvm::raw_ostream::write(this, 41);
          }
          else
          {
            *((_QWORD *)this + 4) = v110 + 1;
            *v110 = 41;
          }
          if (SHIBYTE(v265) < 0)
            operator delete(__p);
          return;
        }
        if (v107 > 9)
        {
          *(_WORD *)(v106 + 8) = 10339;
          *(_QWORD *)v106 = *(_QWORD *)"intrinsic(";
          *((_QWORD *)this + 4) += 10;
        }
        else
        {
          llvm::raw_ostream::write(this, "intrinsic(", 0xAuLL);
        }
        sub_1C5E21910(this, v63, 0, 0, 0);
LABEL_215:
        v135 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v135 < *((_QWORD *)this + 3))
        {
LABEL_216:
          *((_QWORD *)this + 4) = v135 + 1;
          *v135 = 41;
          return;
        }
LABEL_221:
        llvm::raw_ostream::write(this, 41);
        return;
      }
      v64 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v64) > 0xA)
      {
        *(_DWORD *)(v64 + 7) = 1076388713;
        *(_QWORD *)v64 = *(_QWORD *)"intrinsic(@";
        *((_QWORD *)this + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(this, "intrinsic(@", 0xBuLL);
      }
      v65 = off_1E814EB28[v63];
      if (!v65)
        goto LABEL_73;
      v66 = strlen(off_1E814EB28[v63]);
      v67 = (_BYTE *)*((_QWORD *)this + 4);
      if (v66 <= *((_QWORD *)this + 3) - (_QWORD)v67)
      {
        if (v66)
        {
          memcpy(v67, v65, v66);
          v67 = (_BYTE *)(*((_QWORD *)this + 4) + v66);
          *((_QWORD *)this + 4) = v67;
        }
      }
      else
      {
        llvm::raw_ostream::write(this, v65, v66);
LABEL_73:
        v67 = (_BYTE *)*((_QWORD *)this + 4);
      }
      if ((unint64_t)v67 < *((_QWORD *)this + 3))
      {
        *((_QWORD *)this + 4) = v67 + 1;
        *v67 = 41;
        return;
      }
      goto LABEL_221;
    case 0x12u:
      v68 = *((_DWORD *)a1 + 4);
      if (v68 - 32 >= 0xA)
        v69 = "float";
      else
        v69 = "int";
      if (v68 - 32 >= 0xA)
        v70 = 5;
      else
        v70 = 3;
      v71 = (void *)*((_QWORD *)this + 4);
      if (v70 <= *((_QWORD *)this + 3) - (_QWORD)v71)
      {
        memcpy(v71, v69, v70);
        v72 = *((_QWORD *)this + 4) + v70;
        *((_QWORD *)this + 4) = v72;
      }
      else
      {
        llvm::raw_ostream::write(this, v69, v70);
        v72 = *((_QWORD *)this + 4);
      }
      if (*((_QWORD *)this + 3) - v72 > 4)
      {
        *(_BYTE *)(v72 + 4) = 40;
        *(_DWORD *)v72 = 1684370032;
        v73 = (_BYTE *)(*((_QWORD *)this + 4) + 5);
        *((_QWORD *)this + 4) = v73;
      }
      else
      {
        llvm::raw_ostream::write(this, "pred(", 5uLL);
        v73 = (_BYTE *)*((_QWORD *)this + 4);
      }
      PredicateName = llvm::CmpInst::getPredicateName(v68);
      v76 = v74;
      if (v74 <= *((_QWORD *)this + 3) - (_QWORD)v73)
      {
        if (v74)
        {
          memcpy(v73, PredicateName, v74);
          v73 = (_BYTE *)(*((_QWORD *)this + 4) + v76);
          *((_QWORD *)this + 4) = v73;
        }
      }
      else
      {
        llvm::raw_ostream::write(this, PredicateName, v74);
        v73 = (_BYTE *)*((_QWORD *)this + 4);
      }
      if ((unint64_t)v73 >= *((_QWORD *)this + 3))
        goto LABEL_221;
      *((_QWORD *)this + 4) = v73 + 1;
      *v73 = 41;
      return;
    case 0x13u:
      v77 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v77) > 0xB)
      {
        *(_DWORD *)(v77 + 8) = 678130529;
        *(_QWORD *)v77 = *(_QWORD *)"shufflemask(";
        *((_QWORD *)this + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(this, "shufflemask(", 0xCuLL);
      }
      v78 = *((_QWORD *)a1 + 3);
      if (v78)
      {
        v79 = 0;
        v80 = 0;
        v81 = (int *)*((_QWORD *)a1 + 2);
        v82 = 4 * v78;
        v83 = 1;
        do
        {
          v84 = *v81;
          v85 = (_BYTE *)*((_QWORD *)this + 4);
          v86 = *((_QWORD *)this + 3) - (_QWORD)v85;
          if ((_DWORD)v84 == -1)
          {
            if (v79 <= v86)
            {
              if ((v83 & 1) == 0)
              {
                memcpy(v85, v80, v79);
                v85 = (_BYTE *)(*((_QWORD *)this + 4) + v79);
                *((_QWORD *)this + 4) = v85;
              }
            }
            else
            {
              llvm::raw_ostream::write(this, v80, v79);
              v85 = (_BYTE *)*((_QWORD *)this + 4);
            }
            if (*((_QWORD *)this + 3) - (_QWORD)v85 > 4uLL)
            {
              v85[4] = 102;
              *(_DWORD *)v85 = 1701080693;
              *((_QWORD *)this + 4) += 5;
            }
            else
            {
              llvm::raw_ostream::write(this, "undef", 5uLL);
            }
          }
          else
          {
            if (v79 <= v86)
            {
              if ((v83 & 1) == 0)
              {
                memcpy(v85, v80, v79);
                *((_QWORD *)this + 4) += v79;
              }
            }
            else
            {
              llvm::raw_ostream::write(this, v80, v79);
            }
            if ((v84 & 0x80000000) != 0)
            {
              v88 = -(uint64_t)v84;
              v87 = this;
              v89 = 1;
            }
            else
            {
              v87 = this;
              v88 = v84;
              v89 = 0;
            }
            sub_1C5E21910(v87, v88, 0, 0, v89);
          }
          v83 = 0;
          ++v81;
          v79 = 2;
          v80 = ", ";
          v82 -= 4;
        }
        while (v82);
      }
      goto LABEL_215;
    default:
      return;
  }
}

llvm::raw_ostream *sub_1C517B4E8(llvm::raw_ostream *a1, signed int a2, _BOOL4 a3, _QWORD *a4)
{
  size_t v4;
  int v5;
  unsigned int v7;
  uint64_t ***v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ****v13;
  uint64_t ***v14;
  int v15;
  int v16;
  size_t *v17;
  size_t v18;

  if (!a4)
  {
    v4 = 0;
    return llvm::MachineOperand::printStackObjectReference(a1, a2, a3, a4, v4);
  }
  v5 = *((_DWORD *)a4 + 8);
  a3 = a2 < 0 && -v5 <= a2;
  v7 = v5 + a2;
  v8 = *(uint64_t ****)(a4[1] + 40 * v7 + 24);
  if (!v8 || (*((_BYTE *)v8 + 23) & 0x10) == 0)
  {
    v4 = 0;
    a4 = 0;
    goto LABEL_21;
  }
  v9 = ***v8;
  v10 = *(_QWORD *)(v9 + 152);
  v11 = *(unsigned int *)(v9 + 168);
  if (!(_DWORD)v11)
    goto LABEL_19;
  LODWORD(v12) = (v11 - 1) & ((v8 >> 4) ^ (v8 >> 9));
  v13 = (uint64_t ****)(v10 + 16 * v12);
  v14 = *v13;
  if (*v13 != v8)
  {
    v15 = 1;
    while (v14 != (uint64_t ***)-4096)
    {
      v16 = v12 + v15++;
      v12 = v16 & (v11 - 1);
      v14 = *(uint64_t ****)(v10 + 16 * v12);
      if (v14 == v8)
      {
        v13 = (uint64_t ****)(v10 + 16 * v12);
        goto LABEL_20;
      }
    }
LABEL_19:
    v13 = (uint64_t ****)(v10 + 16 * v11);
  }
LABEL_20:
  v17 = (size_t *)v13[1];
  v18 = *v17;
  a4 = v17 + 2;
  v4 = v18;
LABEL_21:
  if (a3)
    a2 = v7;
  return llvm::MachineOperand::printStackObjectReference(a1, a2, a3, a4, v4);
}

uint64_t llvm::MachinePointerInfo::getAddrSpace(llvm::MachinePointerInfo *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t llvm::MachinePointerInfo::isDereferenceable(llvm::MachinePointerInfo *this, unsigned int a2, llvm::LLVMContext *a3, const llvm::DataLayout *a4)
{
  uint64_t v4;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const llvm::DataLayout *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  _BYTE v20[256];

  v4 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 4) != 0)
    return 0;
  v6 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 0xFFFFFFFFFFFFFFF8) == 0)
    return 0;
  v7 = *(_DWORD *)(*((_QWORD *)a4 + 29) + 4);
  v8 = *((_QWORD *)this + 1) + a2;
  v15 = v7;
  if (v7 > 0x40)
  {
    v13 = v6;
    v12 = a4;
    llvm::APInt::initSlowCase((llvm::APInt *)&v14, v8, 0);
    v6 = v13;
    a4 = v12;
  }
  else
  {
    v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
    if (!v7)
      v9 = 0;
    v14 = v9 & v8;
  }
  v16 = v20;
  v17 = v20;
  v18 = 32;
  v19 = 0;
  v10 = sub_1C4E99094(v6, 0, (llvm::APInt *)&v14, a4, 0, 0, 0, (llvm::SmallPtrSetImplBase *)&v16, 16);
  if (v17 != v16)
    free(v17);
  if (v15 >= 0x41 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  return v10;
}

uint64_t *llvm::MachinePointerInfo::getFixedStack@<X0>(uint64_t ***this@<X0>, llvm::MachineFunction *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *result;
  int v7;

  result = llvm::PseudoSourceValueManager::getFixedStack(this[54], (int)a2);
  *(_QWORD *)a4 = (unint64_t)result | 4;
  *(_QWORD *)(a4 + 8) = a3;
  *(_BYTE *)(a4 + 20) = 0;
  if (result)
    v7 = *((_DWORD *)result + 3);
  else
    v7 = 0;
  *(_DWORD *)(a4 + 16) = v7;
  return result;
}

uint64_t llvm::MachinePointerInfo::getGOT@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 432);
  *(_QWORD *)a2 = (v3 + 24) | 4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 20) = 0;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(v3 + 36);
  return this;
}

uint64_t llvm::MachinePointerInfo::getStack@<X0>(uint64_t this@<X0>, llvm::MachineFunction *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  v4 = *(_QWORD *)(this + 432);
  *(_QWORD *)a4 = (v4 + 8) | 4;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 20) = a3;
  *(_DWORD *)(a4 + 16) = *(_DWORD *)(v4 + 20);
  return this;
}

__n128 llvm::MachineMemOperand::MachineMemOperand(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, __int16 a8, char a9, __int16 a10, __int16 a11)
{
  uint64_t v11;
  __n128 result;

  v11 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 34) = a5;
  result = *(__n128 *)a6;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a6 + 16);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 72) = a7;
  *(_WORD *)(a1 + 36) = a8 & 0xF0FF | ((a9 & 0xF) << 8) | (a11 << 12);
  return result;
}

{
  uint64_t v11;
  __n128 result;

  v11 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 34) = a5;
  result = *(__n128 *)a6;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a6 + 16);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 72) = a7;
  *(_WORD *)(a1 + 36) = a8 & 0xF0FF | ((a9 & 0xF) << 8) | (a11 << 12);
  return result;
}

{
  uint64_t v11;
  uint64_t v12;
  __n128 result;

  v11 = ((unint64_t)(a4 & 0x1FFFFFFF) << 6) | 1;
  if (a4 == -1)
    v11 = 0;
  v12 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v11;
  *(_WORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 34) = a5;
  result = *(__n128 *)a6;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a6 + 16);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 72) = a7;
  *(_WORD *)(a1 + 36) = a8 & 0xF0FF | ((a9 & 0xF) << 8) | (a11 << 12);
  return result;
}

{
  uint64_t v11;
  uint64_t v12;
  __n128 result;

  v11 = ((unint64_t)(a4 & 0x1FFFFFFF) << 6) | 1;
  if (a4 == -1)
    v11 = 0;
  v12 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v11;
  *(_WORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 34) = a5;
  result = *(__n128 *)a6;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a6 + 16);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 72) = a7;
  *(_WORD *)(a1 + 36) = a8 & 0xF0FF | ((a9 & 0xF) << 8) | (a11 << 12);
  return result;
}

_QWORD *llvm::MachineMemOperand::Profile(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;

  v3 = result;
  v4 = result[1];
  v5 = *(unsigned int *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    v27 = result[1];
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v5 + 1, 4);
    v4 = v27;
    LODWORD(v5) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v5) = v4;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 >= v6)
  {
    v29 = HIDWORD(v4);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v7 + 1, 4);
    HIDWORD(v4) = v29;
    LODWORD(v7) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v7) = HIDWORD(v4);
  v8 = *(_DWORD *)(a2 + 12);
  v9 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v9;
  v10 = v3[3];
  v11 = v3[3] & 0xFFFFFFFA | (__rbit32(v10) >> 29) & 0xFFFFFFFD;
  if (v9 >= v8)
  {
    v32 = v3[3];
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v9 + 1, 4);
    HIDWORD(v10) = HIDWORD(v32);
    LODWORD(v9) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v9) = v11;
  v12 = *(_DWORD *)(a2 + 12);
  v13 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v13;
  if (v13 >= v12)
  {
    v30 = HIDWORD(v10);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v13 + 1, 4);
    HIDWORD(v10) = v30;
    LODWORD(v13) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v13) = HIDWORD(v10);
  v14 = *(_DWORD *)(a2 + 12);
  v15 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v15;
  v16 = *v3;
  if (v15 >= v14)
  {
    v28 = *v3;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v15 + 1, 4);
    v16 = v28;
    LODWORD(v15) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v15) = v16;
  v17 = *(_DWORD *)(a2 + 12);
  v18 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v18;
  if (v18 >= v17)
  {
    v31 = HIDWORD(v16);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 4);
    HIDWORD(v16) = v31;
    LODWORD(v18) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = HIDWORD(v16);
  v19 = *(_DWORD *)(a2 + 12);
  v20 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v20;
  v21 = *((unsigned __int16 *)v3 + 16);
  if (v20 >= v19)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v20 + 1, 4);
    LODWORD(v20) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v20) = v21;
  v22 = *(_DWORD *)(a2 + 12);
  v23 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v23;
  v24 = 1 << *((_BYTE *)v3 + 34);
  if (v23 >= v22)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v23 + 1, 4);
    LODWORD(v23) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v23) = v24;
  v25 = *(_DWORD *)(a2 + 12);
  v26 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v26;
  if (v26 >= v25)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v26 + 1, 4);
    LODWORD(v26) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v26) = HIDWORD(v24);
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t llvm::MachineMemOperand::getAlign(llvm::MachineMemOperand *this)
{
  uint64_t v1;

  v1 = (1 << *((_BYTE *)this + 34)) | *((_QWORD *)this + 1);
  return 63 - __clz(v1 & -v1);
}

uint64_t llvm::MachineMemOperand::print(uint64_t *a1, llvm::raw_ostream *a2, llvm::ModuleSlotTracker *a3, uint64_t a4, uint64_t *a5, _QWORD *a6, uint64_t a7)
{
  char *v14;
  uint64_t result;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  void *v19;
  _OWORD *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  const char **v25;
  uint64_t v26;
  const char *v27;
  size_t v28;
  void *v29;
  _WORD *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  const char **v34;
  uint64_t v35;
  const char *v36;
  size_t v37;
  void *v38;
  _WORD *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  const char **v43;
  uint64_t v44;
  const char *v45;
  size_t v46;
  void *v47;
  _WORD *v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  char *v56;
  _BYTE *v57;
  size_t v58;
  size_t v59;
  unsigned int v60;
  char *v61;
  _BYTE *v62;
  size_t v63;
  size_t v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  llvm::Value **v69;
  __int16 v70;
  int v71;
  const char *v72;
  const char *v73;
  size_t v74;
  void *v75;
  llvm::ModuleSlotTracker *v76;
  __int16 v77;
  int v78;
  const char *v79;
  const char *v80;
  size_t v81;
  void *v82;
  uint64_t v83;
  const char *v84;
  llvm::raw_ostream *v85;
  size_t v86;
  __int16 v87;
  int v88;
  const char *v89;
  const char *v90;
  size_t v91;
  void *v92;
  void *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  _QWORD *v97;
  _BYTE *v98;
  uint64_t v99;
  const char *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  const char *v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t **v109;
  uint64_t **v110;
  uint64_t **v111;
  _QWORD *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  llvm::raw_ostream *v121;
  size_t v122;
  uint64_t v123;
  uint64_t v124;

  v14 = getenv("MIR_PSEUDO_SRC_HACK");
  if (v14)
  {
    result = atoi(v14);
    if ((_DWORD)result)
    {
      if ((*a1 & 4) != 0)
      {
        v16 = *a1 & 0xFFFFFFFFFFFFFFF8;
        if (v16)
        {
          if (*(_DWORD *)(v16 + 8) == 7)
            return result;
        }
      }
    }
  }
  v17 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 40);
  }
  else
  {
    *((_QWORD *)a2 + 4) = v17 + 1;
    *v17 = 40;
  }
  if ((a1[4] & 4) != 0)
  {
    v18 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v18) > 8)
    {
      *(_BYTE *)(v18 + 8) = 32;
      *(_QWORD *)v18 = *(_QWORD *)"volatile ";
      *((_QWORD *)a2 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(a2, "volatile ", 9uLL);
    }
  }
  if ((a1[4] & 8) != 0)
  {
    v19 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v19 > 0xCuLL)
    {
      qmemcpy(v19, "non-temporal ", 13);
      *((_QWORD *)a2 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(a2, "non-temporal ", 0xDuLL);
    }
  }
  if ((a1[4] & 0x10) != 0)
  {
    v20 = (_OWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v20 > 0xFuLL)
    {
      *v20 = *(_OWORD *)"dereferenceable ";
      *((_QWORD *)a2 + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(a2, "dereferenceable ", 0x10uLL);
    }
  }
  if ((a1[4] & 0x20) != 0)
  {
    v21 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v21) > 9)
    {
      *(_WORD *)(v21 + 8) = 8308;
      *(_QWORD *)v21 = *(_QWORD *)"invariant ";
      *((_QWORD *)a2 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(a2, "invariant ", 0xAuLL);
    }
  }
  if ((a1[4] & 0x40) != 0)
  {
    v22 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v22 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 34);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v22 + 1;
      *v22 = 34;
    }
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a7 + 1128))(a7);
    if (v24)
    {
      v25 = (const char **)(v23 + 8);
      v26 = 16 * v24;
      while (*((_WORD *)v25 - 4) != 64)
      {
        v25 += 2;
        v26 -= 16;
        if (!v26)
          goto LABEL_33;
      }
      v27 = *v25;
      if (*v25)
      {
        v28 = strlen(*v25);
        v29 = (void *)*((_QWORD *)a2 + 4);
        if (v28 <= *((_QWORD *)a2 + 3) - (_QWORD)v29)
        {
          if (v28)
          {
            memcpy(v29, v27, v28);
            *((_QWORD *)a2 + 4) += v28;
          }
        }
        else
        {
          llvm::raw_ostream::write(a2, v27, v28);
        }
      }
    }
LABEL_33:
    v30 = (_WORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v30 > 1uLL)
    {
      *v30 = 8226;
      *((_QWORD *)a2 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a2, "\" ", 2uLL);
    }
  }
  if ((a1[4] & 0x80) != 0)
  {
    v31 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v31 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 34);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v31 + 1;
      *v31 = 34;
    }
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a7 + 1128))(a7);
    if (v33)
    {
      v34 = (const char **)(v32 + 8);
      v35 = 16 * v33;
      while (*((_WORD *)v34 - 4) != 128)
      {
        v34 += 2;
        v35 -= 16;
        if (!v35)
          goto LABEL_47;
      }
      v36 = *v34;
      if (*v34)
      {
        v37 = strlen(*v34);
        v38 = (void *)*((_QWORD *)a2 + 4);
        if (v37 <= *((_QWORD *)a2 + 3) - (_QWORD)v38)
        {
          if (v37)
          {
            memcpy(v38, v36, v37);
            *((_QWORD *)a2 + 4) += v37;
          }
        }
        else
        {
          llvm::raw_ostream::write(a2, v36, v37);
        }
      }
    }
LABEL_47:
    v39 = (_WORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v39 > 1uLL)
    {
      *v39 = 8226;
      *((_QWORD *)a2 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a2, "\" ", 2uLL);
    }
  }
  if ((a1[4] & 0x100) != 0)
  {
    v40 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v40 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 34);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v40 + 1;
      *v40 = 34;
    }
    v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a7 + 1128))(a7);
    if (v42)
    {
      v43 = (const char **)(v41 + 8);
      v44 = 16 * v42;
      while (*((_WORD *)v43 - 4) != 256)
      {
        v43 += 2;
        v44 -= 16;
        if (!v44)
          goto LABEL_61;
      }
      v45 = *v43;
      if (*v43)
      {
        v46 = strlen(*v43);
        v47 = (void *)*((_QWORD *)a2 + 4);
        if (v46 <= *((_QWORD *)a2 + 3) - (_QWORD)v47)
        {
          if (v46)
          {
            memcpy(v47, v45, v46);
            *((_QWORD *)a2 + 4) += v46;
          }
        }
        else
        {
          llvm::raw_ostream::write(a2, v45, v46);
        }
      }
    }
LABEL_61:
    v48 = (_WORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v48 > 1uLL)
    {
      *v48 = 8226;
      *((_QWORD *)a2 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a2, "\" ", 2uLL);
    }
  }
  if ((a1[4] & 1) != 0)
  {
    v49 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v49) > 4)
    {
      *(_BYTE *)(v49 + 4) = 32;
      *(_DWORD *)v49 = 1684107116;
      *((_QWORD *)a2 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(a2, "load ", 5uLL);
    }
  }
  if ((a1[4] & 2) != 0)
  {
    v50 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v50) > 5)
    {
      *(_WORD *)(v50 + 4) = 8293;
      *(_DWORD *)v50 = 1919906931;
      *((_QWORD *)a2 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(a2, "store ", 6uLL);
    }
  }
  v51 = *((_WORD *)a1 + 18);
  if (v51 != 1)
  {
    if (!*(_DWORD *)(a4 + 8))
      llvm::LLVMContextImpl::getSyncScopeNames(*a5, (_QWORD *)a4);
    v52 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v52) > 0xA)
    {
      *(_DWORD *)(v52 + 7) = 573072752;
      *(_QWORD *)v52 = *(_QWORD *)"syncscope(\"";
      *((_QWORD *)a2 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(a2, "syncscope(\"", 0xBuLL);
    }
    llvm::printEscapedString(*(llvm::raw_ostream **)(*(_QWORD *)a4 + 16 * v51), *(_QWORD *)(*(_QWORD *)a4 + 16 * v51 + 8), a2);
    v53 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v53) > 2)
    {
      *(_BYTE *)(v53 + 2) = 32;
      *(_WORD *)v53 = 10530;
      *((_QWORD *)a2 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(a2, "\") ", 3uLL);
    }
  }
  v54 = ((unint64_t)*((unsigned __int16 *)a1 + 18) >> 8) & 0xF;
  if ((_DWORD)v54)
  {
    v56 = off_1EF8EB230[v54];
    v57 = (_BYTE *)*((_QWORD *)a2 + 4);
    if (v56)
    {
      v58 = strlen(off_1EF8EB230[v54]);
      v59 = v58;
      if (v58 <= *((_QWORD *)a2 + 3) - (_QWORD)v57)
      {
        if (v58)
        {
          memcpy(v57, v56, v58);
          v57 = (_BYTE *)(*((_QWORD *)a2 + 4) + v59);
          *((_QWORD *)a2 + 4) = v57;
        }
      }
      else
      {
        llvm::raw_ostream::write(a2, v56, v58);
        v57 = (_BYTE *)*((_QWORD *)a2 + 4);
      }
    }
    if ((unint64_t)v57 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 32);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v57 + 1;
      *v57 = 32;
    }
    v55 = *((unsigned __int16 *)a1 + 18);
  }
  else
  {
    v55 = *((unsigned __int16 *)a1 + 18);
  }
  if (v55 >= 0x1000)
  {
    v60 = v55 >> 12;
    v61 = off_1EF8EB230[v60];
    v62 = (_BYTE *)*((_QWORD *)a2 + 4);
    if (v61)
    {
      v63 = strlen(off_1EF8EB230[v60]);
      v64 = v63;
      if (v63 <= *((_QWORD *)a2 + 3) - (_QWORD)v62)
      {
        if (v63)
        {
          memcpy(v62, v61, v63);
          v62 = (_BYTE *)(*((_QWORD *)a2 + 4) + v64);
          *((_QWORD *)a2 + 4) = v62;
        }
      }
      else
      {
        llvm::raw_ostream::write(a2, v61, v63);
        v62 = (_BYTE *)*((_QWORD *)a2 + 4);
      }
    }
    if ((unint64_t)v62 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 32);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v62 + 1;
      *v62 = 32;
    }
  }
  if ((a1[3] & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v66 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v66 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 40);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v66 + 1;
      *v66 = 40;
    }
    v124 = a1[3];
    llvm::LLT::print((llvm::raw_ostream *)&v124, a2);
    v67 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v67 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 41);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v67 + 1;
      *v67 = 41;
    }
  }
  else
  {
    v65 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v65) > 0xB)
    {
      *(_DWORD *)(v65 + 8) = 1702521203;
      *(_QWORD *)v65 = *(_QWORD *)"unknown-size";
      *((_QWORD *)a2 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(a2, "unknown-size", 0xCuLL);
    }
  }
  v68 = *a1;
  v69 = (llvm::Value **)(*a1 & 0xFFFFFFFFFFFFFFF8);
  if ((*a1 & 4) != 0 || !v69)
  {
    if (v69 && (v68 & 4) != 0)
    {
      v77 = *((_WORD *)a1 + 16);
      v78 = v77 & 3;
      if ((v77 & 1) != 0)
        v79 = " from ";
      else
        v79 = " into ";
      if (v78 == 3)
        v80 = " on ";
      else
        v80 = v79;
      if (v78 == 3)
        v81 = 4;
      else
        v81 = 6;
      v82 = (void *)*((_QWORD *)a2 + 4);
      if (v81 <= *((_QWORD *)a2 + 3) - (_QWORD)v82)
      {
        memcpy(v82, v80, v81);
        *((_QWORD *)a2 + 4) += v81;
      }
      else
      {
        llvm::raw_ostream::write(a2, v80, v81);
      }
      switch(*((_DWORD *)v69 + 2))
      {
        case 0:
          v83 = *((_QWORD *)a2 + 4);
          if ((unint64_t)(*((_QWORD *)a2 + 3) - v83) <= 4)
          {
            v84 = "stack";
            v85 = a2;
            v86 = 5;
            goto LABEL_157;
          }
          *(_BYTE *)(v83 + 4) = 107;
          *(_DWORD *)v83 = 1667331187;
          v123 = *((_QWORD *)a2 + 4) + 5;
          break;
        case 1:
          v99 = *((_QWORD *)a2 + 4);
          if ((unint64_t)(*((_QWORD *)a2 + 3) - v99) <= 2)
          {
            v84 = "got";
            v85 = a2;
            v86 = 3;
            goto LABEL_157;
          }
          *(_BYTE *)(v99 + 2) = 116;
          *(_WORD *)v99 = 28519;
          v123 = *((_QWORD *)a2 + 4) + 3;
          break;
        case 2:
          v94 = *((_QWORD *)a2 + 4);
          if ((unint64_t)(*((_QWORD *)a2 + 3) - v94) <= 9)
          {
            v84 = "jump-table";
            v85 = a2;
            v86 = 10;
            goto LABEL_157;
          }
          *(_WORD *)(v94 + 8) = 25964;
          *(_QWORD *)v94 = *(_QWORD *)"jump-table";
          v123 = *((_QWORD *)a2 + 4) + 10;
          break;
        case 3:
          v95 = (void *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v95 <= 0xCuLL)
          {
            v84 = "constant-pool";
            v85 = a2;
            v86 = 13;
            goto LABEL_157;
          }
          qmemcpy(v95, "constant-pool", 13);
          v123 = *((_QWORD *)a2 + 4) + 13;
          break;
        case 4:
          sub_1C517B4E8(a2, *((_DWORD *)v69 + 4), 1, a6);
          goto LABEL_158;
        case 5:
          v119 = *((_QWORD *)a2 + 4);
          if ((unint64_t)(*((_QWORD *)a2 + 3) - v119) > 0xA)
          {
            *(_DWORD *)(v119 + 7) = 544830068;
            *(_QWORD *)v119 = *(_QWORD *)"call-entry ";
            *((_QWORD *)a2 + 4) += 11;
          }
          else
          {
            llvm::raw_ostream::write(a2, "call-entry ", 0xBuLL);
          }
          llvm::Value::printAsOperand(v69[2], a2, 0, a3);
          goto LABEL_158;
        case 6:
          v120 = *((_QWORD *)a2 + 4);
          if ((unint64_t)(*((_QWORD *)a2 + 3) - v120) > 0xB)
          {
            *(_DWORD *)(v120 + 8) = 639662450;
            *(_QWORD *)v120 = *(_QWORD *)"call-entry &";
            *((_QWORD *)a2 + 4) += 12;
          }
          else
          {
            llvm::raw_ostream::write(a2, "call-entry &", 0xCuLL);
          }
          v121 = v69[2];
          if (v121)
            v122 = strlen((const char *)v69[2]);
          else
            v122 = 0;
          llvm::printLLVMNameWithoutPrefix(a2, v121, v122);
          goto LABEL_158;
        default:
          v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a7 + 1256))(a7);
          v97 = (_QWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v97 > 7uLL)
          {
            *v97 = 0x22206D6F74737563;
            *((_QWORD *)a2 + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(a2, "custom \"", 8uLL);
          }
          (*(void (**)(uint64_t, llvm::raw_ostream *, llvm::ModuleSlotTracker *, llvm::Value **))(*(_QWORD *)v96 + 32))(v96, a2, a3, v69);
          v98 = (_BYTE *)*((_QWORD *)a2 + 4);
          if ((unint64_t)v98 >= *((_QWORD *)a2 + 3))
          {
            llvm::raw_ostream::write(a2, 34);
          }
          else
          {
            *((_QWORD *)a2 + 4) = v98 + 1;
            *v98 = 34;
          }
          goto LABEL_158;
      }
    }
    else
    {
      if (v68 || !a1[1])
        goto LABEL_158;
      v87 = *((_WORD *)a1 + 16);
      v88 = v87 & 3;
      if ((v87 & 1) != 0)
        v89 = " from ";
      else
        v89 = " into ";
      if (v88 == 3)
        v90 = " on ";
      else
        v90 = v89;
      if (v88 == 3)
        v91 = 4;
      else
        v91 = 6;
      v92 = (void *)*((_QWORD *)a2 + 4);
      if (v91 <= *((_QWORD *)a2 + 3) - (_QWORD)v92)
      {
        memcpy(v92, v90, v91);
        v93 = (void *)(*((_QWORD *)a2 + 4) + v91);
        *((_QWORD *)a2 + 4) = v93;
      }
      else
      {
        llvm::raw_ostream::write(a2, v90, v91);
        v93 = (void *)*((_QWORD *)a2 + 4);
      }
      if (*((_QWORD *)a2 + 3) - (_QWORD)v93 <= 0xEuLL)
      {
        v84 = "unknown-address";
        v85 = a2;
        v86 = 15;
LABEL_157:
        llvm::raw_ostream::write(v85, v84, v86);
        goto LABEL_158;
      }
      qmemcpy(v93, "unknown-address", 15);
      v123 = *((_QWORD *)a2 + 4) + 15;
    }
    *((_QWORD *)a2 + 4) = v123;
    goto LABEL_158;
  }
  v70 = *((_WORD *)a1 + 16);
  v71 = v70 & 3;
  if ((v70 & 1) != 0)
    v72 = " from ";
  else
    v72 = " into ";
  if (v71 == 3)
    v73 = " on ";
  else
    v73 = v72;
  if (v71 == 3)
    v74 = 4;
  else
    v74 = 6;
  v75 = (void *)*((_QWORD *)a2 + 4);
  if (v74 <= *((_QWORD *)a2 + 3) - (_QWORD)v75)
  {
    memcpy(v75, v73, v74);
    *((_QWORD *)a2 + 4) += v74;
  }
  else
  {
    llvm::raw_ostream::write(a2, v73, v74);
  }
  llvm::MIRFormatter::printIRValue(a2, (llvm::raw_ostream *)v69, a3, v76);
LABEL_158:
  llvm::MachineOperand::printOperandOffset(a2, a1[1]);
  if ((a1[3] & 0xFFFFFFFFFFFFFFF9) == 0)
    goto LABEL_166;
  result = sub_1C4825F50((unint64_t *)a1 + 3);
  v101 = result + 7;
  if ((_DWORD)v100 == 1)
  if (v101 >= 8)
  {
    if ((a1[3] & 0xFFFFFFFFFFFFFFF9) == 0)
      goto LABEL_166;
    v102 = (1 << *((_BYTE *)a1 + 34)) | a1[1];
    v103 = 63 - __clz(v102 & -v102);
    result = sub_1C4825F50((unint64_t *)a1 + 3);
    v105 = (unint64_t)(result + 7) >> 3;
    if ((_DWORD)v104 == 1)
    if (1 << v103 != v105)
    {
LABEL_166:
      v106 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v106 > 7uLL)
      {
        *v106 = 0x206E67696C61202CLL;
        *((_QWORD *)a2 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(a2, ", align ", 8uLL);
      }
      v107 = (1 << *((_BYTE *)a1 + 34)) | a1[1];
      result = (uint64_t)sub_1C5E21910(a2, 1 << (63 - __clz(v107 & -v107)), 0, 0, 0);
    }
  }
  if (*((unsigned __int8 *)a1 + 34) != (63
                                                        - __clz(((1 << *((_BYTE *)a1 + 34)) | a1[1]) & -((1 << *((_BYTE *)a1 + 34)) | a1[1]))))
  {
    v108 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v108) > 0xB)
    {
      *(_DWORD *)(v108 + 8) = 544106345;
      *(_QWORD *)v108 = *(_QWORD *)", basealign ";
      *((_QWORD *)a2 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(a2, ", basealign ", 0xCuLL);
    }
    result = (uint64_t)sub_1C5E21910(a2, 1 << *((_BYTE *)a1 + 34), 0, 0, 0);
  }
  v109 = (uint64_t **)a1[5];
  v111 = (uint64_t **)a1[7];
  v110 = (uint64_t **)a1[8];
  if (v109)
  {
    v112 = (_QWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v112 > 7uLL)
    {
      *v112 = 0x206161627421202CLL;
      *((_QWORD *)a2 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a2, ", !tbaa ", 8uLL);
    }
    result = (uint64_t)sub_1C5314B04((uint64_t)a2, v109, a3, 0, 1, 0);
  }
  if (v111)
  {
    v113 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v113 > 0xEuLL)
    {
      qmemcpy(v113, ", !alias.scope ", 15);
      *((_QWORD *)a2 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(a2, ", !alias.scope ", 0xFuLL);
    }
    result = (uint64_t)sub_1C5314B04((uint64_t)a2, v111, a3, 0, 1, 0);
  }
  if (v110)
  {
    v114 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v114) > 0xA)
    {
      *(_DWORD *)(v114 + 7) = 544432489;
      *(_QWORD *)v114 = *(_QWORD *)", !noalias ";
      *((_QWORD *)a2 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(a2, ", !noalias ", 0xBuLL);
    }
    result = (uint64_t)sub_1C5314B04((uint64_t)a2, v110, a3, 0, 1, 0);
  }
  if (a1[9])
  {
    v115 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v115) > 8)
    {
      *(_BYTE *)(v115 + 8) = 32;
      *(_QWORD *)v115 = *(_QWORD *)", !range ";
      *((_QWORD *)a2 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(a2, ", !range ", 9uLL);
    }
    result = (uint64_t)sub_1C5314B04((uint64_t)a2, (uint64_t **)a1[9], a3, 0, 1, 0);
  }
  v116 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v116)
  {
    v117 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v117) > 0xB)
    {
      *(_DWORD *)(v117 + 8) = 543515489;
      *(_QWORD *)v117 = *(_QWORD *)", addrspace ";
      *((_QWORD *)a2 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(a2, ", addrspace ", 0xCuLL);
    }
    result = (uint64_t)sub_1C5E21910(a2, v116, 0, 0, 0);
  }
  v118 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v118 >= *((_QWORD *)a2 + 3))
    return (uint64_t)llvm::raw_ostream::write(a2, 41);
  *((_QWORD *)a2 + 4) = v118 + 1;
  *v118 = 41;
  return result;
}

uint64_t sub_1C517CCB4(unsigned int a1, llvm::raw_ostream *this, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  int v8;
  _DWORD *v9;
  _QWORD *v10;

  if (a3)
  {
    result = llvm::MCRegisterInfo::getLLVMRegNum((llvm::MCRegisterInfo *)(a3 + 8), a1, 1);
    if ((result & 0xFF00000000) != 0)
    {
      v8 = result;
      v9 = operator new(0x28uLL);
      *(_QWORD *)v9 = &off_1E814D010;
      v9[2] = v8;
      *((_QWORD *)v9 + 2) = a3;
      v9[6] = 0;
      *((_QWORD *)v9 + 4) = 0;
      sub_1C52C9630((llvm::raw_ostream *)v9, this);
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 40))(v9);
    }
    else
    {
      v10 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v10 > 7uLL)
      {
        *v10 = 0x3E6765726461623CLL;
        *((_QWORD *)this + 4) += 8;
      }
      else
      {
        return (uint64_t)llvm::raw_ostream::write(this, "<badreg>", 8uLL);
      }
    }
  }
  else
  {
    v5 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v5) > 9)
    {
      *(_WORD *)(v5 + 8) = 11879;
      *(_QWORD *)v5 = *(_QWORD *)"%dwarfreg.";
      *((_QWORD *)this + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(this, "%dwarfreg.", 0xAuLL);
    }
    return (uint64_t)sub_1C5E21910(this, a1, 0, 0, 0);
  }
  return result;
}

__n128 sub_1C517CE0C(__n128 *a1, int **a2, _WORD *a3)
{
  __n128 result;
  int *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7FB108, "print-regmask-num-regs", 0x16uLL);
  result = *a1;
  xmmword_1ED7FB128 = (__int128)*a1;
  v7 = *a2;
  dword_1ED7FB188 = **a2;
  byte_1ED7FB19C = 1;
  dword_1ED7FB198 = *v7;
  word_1ED7FB112 = (32 * (*a3 & 3)) | word_1ED7FB112 & 0xFF9F;
  return result;
}

unint64_t sub_1C517CE90(char *a1, uint64_t a2, _BYTE *a3, char *a4, char *a5, int *a6, int *a7, char *a8)
{
  _BYTE *v13;
  _DWORD *v14;
  uint64_t v16;
  uint64_t v17;

  v16 = a2;
  v13 = sub_1C4ED4714(a1, &v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = sub_1C4ED49B0(a1, &v17, v13, (unint64_t)a4, *a6);
  return sub_1C517CF20(a1, v17, v14, a4, a7, a8);
}

unint64_t sub_1C517CF20(char *a1, uint64_t a2, _DWORD *a3, char *a4, int *a5, char *a6)
{
  _BYTE *v9;
  char *v10;
  uint64_t v12;
  int v13[2];

  v12 = a2;
  v9 = sub_1C4ED49B0(a1, &v12, a3, (unint64_t)a4, *a5);
  *(_QWORD *)v13 = v12;
  v10 = sub_1C4ED4714(a1, (uint64_t *)v13, v9, (unint64_t)a4, *a6);
  return sub_1C4E37BA0(a1, *(uint64_t *)v13, v10, a4);
}

unint64_t sub_1C517CF98(char *a1, uint64_t a2, _DWORD *a3, char *a4, int *a5, int *a6)
{
  _DWORD *v9;
  char *v10;
  uint64_t v12;
  int v13[2];

  v12 = a2;
  v9 = sub_1C4ED49B0(a1, &v12, a3, (unint64_t)a4, *a5);
  *(_QWORD *)v13 = v12;
  v10 = (char *)sub_1C4ED49B0(a1, (uint64_t *)v13, v9, (unint64_t)a4, *a6);
  return sub_1C4E37BA0(a1, *(uint64_t *)v13, v10, a4);
}

unint64_t sub_1C517D010(char *a1, uint64_t a2, _BYTE *a3, char *a4, char *a5, int *a6, uint64_t *a7, uint64_t *a8)
{
  _BYTE *v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;

  v16 = a2;
  v13 = sub_1C4ED4714(a1, &v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = sub_1C4ED49B0(a1, &v17, v13, (unint64_t)a4, *a6);
  return sub_1C517D0A0(a1, v17, v14, a4, a7, a8);
}

unint64_t sub_1C517D0A0(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  _QWORD *v9;
  char *v10;
  uint64_t v12;
  int v13[2];

  v12 = a2;
  v9 = sub_1C50FDB34(a1, &v12, a3, (unint64_t)a4, *a5);
  *(_QWORD *)v13 = v12;
  v10 = (char *)sub_1C50FDB34(a1, (uint64_t *)v13, v9, (unint64_t)a4, *a6);
  return sub_1C4E37BA0(a1, *(uint64_t *)v13, v10, a4);
}

unint64_t sub_1C517D118(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15[7];

  v2 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v2 & 1) == 0)
  {
    v13 = a1;
    v4 = a2;
    v5 = __cxa_guard_acquire(&qword_1ED7EAC88);
    a2 = v4;
    v6 = v5;
    a1 = v13;
    if (v6)
    {
      v7 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v7 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v7;
      __cxa_guard_release(&qword_1ED7EAC88);
      a1 = v13;
      a2 = v4;
    }
  }
  if ((unint64_t)(a2 - (_QWORD)a1) <= 0x40)
    return sub_1C49CE808(a1, a2 - (_QWORD)a1, qword_1ED7EAC80);
  v12 = a2;
  v14 = a2 - (_QWORD)a1;
  v8 = (a2 - (_QWORD)a1) & 0xFFFFFFFFFFFFFFC0;
  v9 = a1;
  sub_1C4E378E0(a1, qword_1ED7EAC80, v15);
  v10 = v8 - 64;
  if (v10)
  {
    v11 = v9 + 8;
    do
    {
      sub_1C4E37A08(v15, v11);
      v11 += 8;
      v10 -= 64;
    }
    while (v10);
  }
  if ((v14 & 0x3F) != 0)
    sub_1C4E37A08(v15, (_QWORD *)(v12 - 64));
  return sub_1C4E37DC8(v15, v14);
}

uint64_t sub_1C517D23C()
{
  int v1;
  int v2;
  int *v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"Number of registers to limit to when printing regmask operands in IR dumps. unlimited = -1";
  v4.n128_u64[1] = 90;
  v3 = &v2;
  v1 = 1;
  v2 = 32;
  sub_1C61F4004(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED7FB108, &dword_1C475E000);
}

uint64_t llvm::DiagnosticInfoMIROptimization::MachineArgument::MachineArgument(uint64_t a1, const void *a2, size_t a3, llvm::MachineInstr *a4)
{
  uint64_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  __int128 __dst;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  *(_WORD *)(a1 + 23) = 6;
  strcpy((char *)a1, "String");
  *(_QWORD *)(a1 + 55) = 0;
  *(_QWORD *)(a1 + 47) = 0;
  *(_BYTE *)(a1 + 63) = 0;
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v8 = a1 + 24;
  if (a3 >= 0x17)
  {
    v10 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v10 = a3 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = a3;
    v14 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v14) = a3;
  p_dst = &__dst;
  if (a3)
LABEL_8:
    memmove(p_dst, a2, a3);
  *((_BYTE *)p_dst + a3) = 0;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v14;
  DWORD2(__dst) = 0;
  v17 = 0;
  v18 = 0;
  *(_QWORD *)&__dst = &unk_1E81A7208;
  v20 = v8;
  v19 = 0;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  llvm::MachineInstr::print(a4, (llvm::raw_ostream *)&__dst, 1, 0, 1, 1, 0);
  *(_QWORD *)&__dst = off_1E81A6E70;
  if (v19 == 1 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8077774924);
  return a1;
}

uint64_t *llvm::MachineOptimizationRemarkEmitter::computeHotness(llvm::MachineOptimizationRemarkEmitter *this, const llvm::MachineBasicBlock *a2)
{
  uint64_t *result;

  result = (uint64_t *)*((_QWORD *)this + 1);
  if (result)
    return llvm::MachineBlockFrequencyInfo::getBlockProfileCount((llvm::MachineBlockFrequencyInfo *)result, a2);
  return result;
}

uint64_t *llvm::MachineOptimizationRemarkEmitter::computeHotness(uint64_t *result, _QWORD *a2)
{
  const llvm::MachineBasicBlock *v3;
  uint64_t v4;

  v3 = (const llvm::MachineBasicBlock *)a2[45];
  if (v3)
  {
    result = (uint64_t *)result[1];
    if (result)
      result = llvm::MachineBlockFrequencyInfo::getBlockProfileCount((llvm::MachineBlockFrequencyInfo *)result, v3);
    else
      v4 = 0;
    a2[8] = result;
    a2[9] = v4;
  }
  return result;
}

uint64_t llvm::MachineOptimizationRemarkEmitter::emit(uint64_t ****this, llvm::DiagnosticInfoOptimizationBase *a2)
{
  const llvm::MachineBasicBlock *v2;
  llvm::MachineBlockFrequencyInfo *v3;
  uint64_t *BlockProfileCount;
  uint64_t result;
  unint64_t v6;
  llvm::MachineBlockFrequencyInfo *v7;
  llvm::MachineOptimizationRemarkEmitter *v8;
  llvm::DiagnosticInfoOptimizationBase *v9;

  v2 = (const llvm::MachineBasicBlock *)*((_QWORD *)a2 + 45);
  if (v2)
  {
    v3 = (llvm::MachineBlockFrequencyInfo *)this[1];
    if (v3)
    {
      v8 = (llvm::MachineOptimizationRemarkEmitter *)this;
      v9 = a2;
      BlockProfileCount = llvm::MachineBlockFrequencyInfo::getBlockProfileCount(v3, v2);
      v3 = v7;
      this = (uint64_t ****)v8;
      a2 = v9;
    }
    else
    {
      BlockProfileCount = 0;
    }
    *((_QWORD *)a2 + 8) = BlockProfileCount;
    *((_QWORD *)a2 + 9) = v3;
  }
  else
  {
    BlockProfileCount = (uint64_t *)*((_QWORD *)a2 + 8);
    LOBYTE(v3) = *((_BYTE *)a2 + 72);
  }
  result = ****this;
  if (!(_BYTE)v3)
    BlockProfileCount = 0;
  if (*(_BYTE *)(*(_QWORD *)result + 96))
    v6 = *(_QWORD *)(*(_QWORD *)result + 88);
  else
    v6 = -1;
  if ((unint64_t)BlockProfileCount >= v6)
    return llvm::LLVMContext::diagnose(result, a2);
  return result;
}

uint64_t llvm::MachineOptimizationRemarkEmitterPass::runOnMachineFunction(llvm::MachineOptimizationRemarkEmitterPass *this, llvm::MachineFunction *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void **v8;
  void *v9;
  llvm::LazyMachineBlockFrequencyInfoPass *v10;

  if (*(_BYTE *)(****(_QWORD ****)a2 + 81))
  {
    v8 = (void **)**((_QWORD **)this + 1);
    do
    {
      v9 = *v8;
      v8 += 2;
    }
    while (v9 != &llvm::LazyMachineBlockFrequencyInfoPass::ID);
    v10 = (llvm::LazyMachineBlockFrequencyInfoPass *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1)
                                                                                               + 96))(*(v8 - 1), &llvm::LazyMachineBlockFrequencyInfoPass::ID);
    v4 = llvm::LazyMachineBlockFrequencyInfoPass::calculateIfNotAvailable(v10);
  }
  else
  {
    v4 = 0;
  }
  v5 = (_QWORD *)operator new();
  *v5 = a2;
  v5[1] = v4;
  v6 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = v5;
  if (v6)
    MEMORY[0x1CAA32FC0](v6, 0x20C40A4A59CD2);
  return 0;
}

uint64_t sub_1C517D600(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeLazyMachineBlockFrequencyInfoPassPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "Machine Optimization Remark Emitter";
  *(_QWORD *)(v3 + 8) = 35;
  *(_QWORD *)(v3 + 16) = "machine-opt-remark-emitter";
  *(_QWORD *)(v3 + 24) = 26;
  *(_QWORD *)(v3 + 32) = &llvm::MachineOptimizationRemarkEmitterPass::ID;
  *(_WORD *)(v3 + 40) = 257;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = llvm::callDefaultCtor<llvm::MachineOptimizationRemarkEmitterPass>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C517D698(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED7FB1C8;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8145A18;
  *(_BYTE *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 1;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7FB1D0);
  if (v3 != -1)
  {
    v7[0] = sub_1C517D770;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7FB1D0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C517D770(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Machine Function Outliner";
  *(_QWORD *)(v2 + 8) = 25;
  *(_QWORD *)(v2 + 16) = "machine-outliner";
  *(_QWORD *)(v2 + 24) = 16;
  *(_QWORD *)(v2 + 32) = &unk_1ED7FB1C8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5183938;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void sub_1C517D804(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C517D828()
{
  return "Machine Outliner";
}

void *sub_1C517D838(uint64_t a1, uint64_t a2)
{
  void *result;

  sub_1C4771E64(a2, a2, (uint64_t)&llvm::MachineModuleInfoWrapperPass::ID);
  result = sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::MachineModuleInfoWrapperPass::ID);
  *(_BYTE *)(a2 + 160) = 1;
  return result;
}

uint64_t sub_1C517D880(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v7;

  if ((_QWORD *)a2[3] == a2 + 3)
    return 0;
  v7 = 0;
  *(_DWORD *)(a1 + 32) = 0;
  v4 = sub_1C517D930(a1, a2, &v7);
  if ((_DWORD)v4 && dword_1ED7FB318)
  {
    v5 = 0;
    do
    {
      v7 = 0;
      ++*(_DWORD *)(a1 + 32);
      if ((sub_1C517D930(a1, a2, &v7) & 1) == 0)
        break;
      ++v5;
    }
    while (v5 < dword_1ED7FB318);
  }
  return v4;
}

uint64_t sub_1C517D930(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  void **v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t MachineFunction;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type i;
  int v13;
  std::string::size_type v14;
  int data;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  std::string::size_type v37;
  std::string::size_type v38;
  std::string::size_type v39;
  char *v40;
  std::string::size_type v41;
  uint64_t *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  char *v56;
  char *v57;
  void *v58;
  char **n;
  char **v60;
  char *v61;
  void *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  int v67;
  __n128 v68;
  _QWORD *k;
  const Function *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const Function **v79;
  const Function *v80;
  int v81;
  int v82;
  unint64_t *v83;
  size_t v84;
  const void *v85;
  unint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  size_t v91;
  unsigned int v92;
  int v93;
  size_t v94;
  unsigned __int8 *v95;
  int v96;
  unsigned int v97;
  std::string::size_type v98;
  std::string::size_type v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  unsigned int v109;
  uint64_t *m;
  _QWORD *v111;
  BOOL v112;
  unint64_t v113;
  const std::nothrow_t *v114;
  unint64_t v115;
  void *v116;
  BOOL v117;
  uint64_t *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  unsigned int v124;
  int *v125;
  int *v126;
  int v127;
  uint64_t v128;
  unsigned int v129;
  char *j;
  _QWORD *v131;
  char **v132;
  uint64_t v133;
  uint64_t v134;
  __int128 *v135;
  __int128 *v136;
  unint64_t v137;
  int v138;
  __int128 *v139;
  __int128 v140;
  _QWORD *v141;
  uint64_t v142;
  __int128 *v143;
  void *v144;
  __int128 *v145;
  __int128 *v146;
  __int128 *v147;
  __int128 *v148;
  unint64_t v149;
  unint64_t v150;
  char *v151;
  char *v152;
  char **v153;
  char *v154;
  __int128 v155;
  __int128 v156;
  char **v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  __int128 *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void **v175;
  size_t v176;
  unsigned __int8 *v177;
  char *v178;
  unint64_t v179;
  void **v180;
  void *v181;
  unsigned int **v182;
  unsigned int **v183;
  unsigned int *v184;
  uint64_t v185;
  uint64_t v186;
  _DWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int *v191;
  uint64_t v192;
  unsigned int *v193;
  uint64_t v194;
  _DWORD *v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  __int128 v199;
  const void **v200;
  unsigned int *v201;
  void **v202;
  _DWORD *v203;
  unint64_t v204;
  uint64_t v205;
  const void **v206;
  unsigned int *v207;
  void **v208;
  _DWORD *v209;
  unint64_t v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  void *v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  uint64_t *v220;
  unsigned int v221;
  int v222;
  std::string *v223;
  std::string::size_type v224;
  const std::string::value_type *v225;
  std::string::size_type v226;
  const std::string::value_type *v227;
  std::string::size_type v228;
  _QWORD *v229;
  llvm::PointerType *v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int UWTableKind;
  unint64_t v239;
  uint64_t **v240;
  unsigned int v241;
  uint64_t *v242;
  uint64_t v243;
  void **v244;
  void *v245;
  uint64_t v246;
  llvm::MachineFunction *v247;
  llvm::MachineFunction *v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t *v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t ii;
  uint64_t v256;
  _DWORD *v257;
  const llvm::LivePhysRegs *v258;
  _DWORD *v259;
  int v260;
  void *v261;
  unsigned int *v262;
  unsigned int *v263;
  const llvm::MachineFunction **v264;
  int v265;
  void *v266;
  const llvm::MachineFunction **v267;
  unint64_t v268;
  const llvm::MachineInstr *v269;
  unsigned __int16 *v270;
  uint64_t v271;
  unsigned int v272;
  unsigned int *v273;
  unsigned int *v274;
  uint64_t v275;
  uint64_t v276;
  unsigned int v277;
  int v278;
  unsigned __int8 *v280;
  uint64_t v281;
  unsigned int v282;
  unsigned int v283;
  uint64_t ****v284;
  uint64_t ***v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  int v289;
  unsigned int v290;
  _QWORD *v291;
  _QWORD ***v292;
  _QWORD *v293;
  int v294;
  BOOL v295;
  unsigned int v296;
  uint64_t v297;
  _QWORD *v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  uint64_t v302;
  char v303;
  uint64_t v304;
  unsigned int *v305;
  int v306;
  int v307;
  unint64_t v308;
  unsigned int v309;
  uint64_t v310;
  uint64_t v311;
  __int128 v312;
  void **v313;
  __int128 v314;
  unsigned __int8 **v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  unsigned __int8 *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  unsigned int *v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  std::string *v340;
  size_t v341;
  char *v342;
  char *v343;
  char *v344;
  unint64_t v345;
  void **v346;
  unsigned int *v347;
  uint64_t v348;
  unsigned int *v349;
  unsigned int *v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  llvm::MachineInstr *v354;
  llvm::MachineInstr *v355;
  unint64_t v356;
  unint64_t v357;
  uint64_t v358;
  int *v359;
  int *v360;
  int v361;
  unsigned int v362;
  _DWORD *v363;
  unsigned int v364;
  _DWORD *v365;
  uint64_t v366;
  _QWORD *jj;
  unsigned int v368;
  _DWORD *v369;
  uint64_t v370;
  int v371;
  int *v372;
  size_t v373;
  int *v374;
  int v375;
  unsigned __int16 *v376;
  unsigned int v377;
  unsigned int v378;
  uint64_t v380;
  std::string::value_type *v381;
  uint64_t v382;
  std::string::value_type *v383;
  uint64_t v384;
  std::string::value_type *v385;
  char *v386;
  char *v387;
  std::string::value_type *v388;
  int v389;
  char *v390;
  char *v391;
  const char *v392;
  void **v393;
  void **v394;
  void **v395;
  int v396;
  void **v397;
  void **v398;
  _QWORD *v399;
  uint64_t v400;
  void *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t **v407;
  uint64_t *v408;
  int v409;
  int v410;
  uint64_t *v411;
  unsigned __int8 *v412;
  size_t v413;
  size_t v414;
  char v415;
  unsigned __int8 *v416;
  size_t size;
  uint64_t TypeArray;
  char *Impl;
  llvm::DISubprogram *Function;
  char v421;
  _QWORD *v422;
  const Function *v423;
  uint64_t v424;
  uint64_t ****v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  const Function **v430;
  const Function *v431;
  int v432;
  int v433;
  unint64_t *v434;
  std::string::size_type v435;
  const void *v436;
  unint64_t v437;
  std::string *v438;
  uint64_t v439;
  uint64_t v440;
  unsigned int v441;
  uint64_t ****v442;
  uint64_t ****v443;
  char v444;
  std::string *v445;
  size_t v446;
  int v447;
  size_t v448;
  std::string *v449;
  int v450;
  int v451;
  std::string::size_type v452;
  std::string::size_type v453;
  uint64_t v454;
  int v455;
  int v456;
  uint64_t v457;
  _QWORD *v458;
  unsigned int v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  const Function **v467;
  const Function *v468;
  int v469;
  int v470;
  const Function *v471;
  char *v472;
  size_t v473;
  size_t v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  char *v479;
  unint64_t v480;
  void **v481;
  char **v482;
  char *v484;
  uint64_t v485;
  int v487;
  unsigned int *v488;
  int v489;
  unsigned int **v490;
  uint64_t v492;
  uint64_t v493;
  unsigned int v494;
  uint64_t v495;
  void *v496;
  uint64_t v497;
  uint64_t *v498;
  int v499[2];
  int v500[2];
  int v501[2];
  unint64_t v502;
  std::string::size_type v503;
  _QWORD *v504;
  const Function *v505;
  int v506[2];
  char v507;
  uint64_t *__src;
  uint64_t *__srca;
  char **__srcb;
  char *__srcc;
  unint64_t __s1;
  unsigned __int8 *__s1a;
  uint64_t ****__s1b;
  llvm::MachineModuleInfo *v515;
  _QWORD *v517;
  _QWORD *v518;
  int v519;
  __int128 v520;
  uint64_t v521;
  _QWORD v522[2];
  int v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  char v527;
  void *v528;
  __int128 *v529;
  __int128 v530;
  int v531;
  void *v532;
  char *v533;
  uint64_t v534;
  uint64_t ***v535[2];
  unsigned __int8 *v536;
  char *v537;
  uint64_t v538;
  unint64_t v539;
  __int16 v540;
  void *v541[2];
  char v542;
  void *v543;
  uint64_t v544;
  char v545;
  void *v546;
  char v547;
  std::string v548;
  void *v549;
  char v550;
  std::string v551;
  void *v552;
  char v553;
  std::string v554;
  void *v555;
  __int16 v556;
  char v557;
  std::string v558;
  void *v559;
  char v560;
  void *v561;
  void *v562;
  void *v563[2];
  __int128 v564;
  void *v565[2];
  int v566;
  std::string v567;
  void *v568;
  _QWORD *v569;
  uint64_t v570;
  uint64_t **v571;
  _QWORD **v572;
  uint64_t v573;
  void **v574;
  void **v575;
  uint64_t v576;
  int v577;
  __int16 v578;
  char v579;
  uint64_t v580;
  uint64_t v581;
  void *v582;
  void *v583;
  std::string v584;
  void *v585;
  _QWORD *v586;
  uint64_t v587;
  uint64_t v588;
  int v589;
  std::string *v590;
  _BYTE __dst[32];
  void *v592;
  const char *v593;
  void *v594;
  __int128 v595;
  uint64_t v596;
  void *v597;
  uint64_t v598;
  _BYTE v599[256];
  char v600;
  int v601;
  uint64_t v602;
  uint64_t v603;

  v603 = *MEMORY[0x1E0C80C00];
  v3 = **(void ****)(a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::MachineModuleInfoWrapperPass::ID);
  v515 = (llvm::MachineModuleInfo *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::MachineModuleInfoWrapperPass::ID)+ 32);
  *(_BYTE *)(a1 + 28) = byte_1ED7FB258;
  v519 = -3;
  v520 = 0uLL;
  v521 = 0;
  v522[0] = 0;
  v522[1] = 0;
  v523 = 0;
  v524 = 0u;
  v525 = 0u;
  v526 = 0u;
  v527 = 0;
  v5 = (_QWORD *)a2[4];
  v518 = a2 + 3;
  if (v5 != a2 + 3)
  {
    __s1 = (unint64_t)&__dst[16];
    while (1)
    {
      v6 = v5 ? (uint64_t)(v5 - 7) : 0;
      if (*(_QWORD *)(v6 + 72) != v6 + 72)
      {
        MachineFunction = llvm::MachineModuleInfo::getMachineFunction(v515, (const Function *)v6);
        if (MachineFunction)
        {
          v8 = MachineFunction;
          v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(MachineFunction + 16) + 104))(*(_QWORD *)(MachineFunction + 16));
          v10 = v9;
          if (*(_BYTE *)(a1 + 36)
            || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 1232))(v9, v8))
          {
            if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 1224))(v10, v8, *(unsigned __int8 *)(a1 + 28)))
            {
              break;
            }
          }
        }
      }
LABEL_89:
      v5 = (_QWORD *)v5[1];
      if (v5 == v518)
        goto LABEL_90;
    }
    v11 = v8 + 320;
    for (i = *(_QWORD *)(v8 + 328); ; i = *(_QWORD *)(i + 8))
    {
      if (i == v11)
        goto LABEL_89;
      if (i + 48 != (*(_QWORD *)(i + 48) & 0xFFFFFFFFFFFFFFF8))
      {
        v13 = -1;
        v14 = i + 48;
        do
        {
          v14 = *(_QWORD *)(v14 + 8);
          ++v13;
        }
        while (v14 != i + 48);
        if ((v13 & 0xFFFFFFFE) != 0 && !*(_BYTE *)(i + 185))
        {
          LODWORD(v558.__r_.__value_.__l.__data_) = 0;
          if ((*(unsigned int (**)(uint64_t, std::string::size_type, std::string *))(*(_QWORD *)v10 + 1192))(v10, i, &v558))
          {
            break;
          }
        }
      }
LABEL_88:
      ;
    }
    (*(void (**)(_BYTE *__return_ptr, uint64_t, std::string::size_type, std::string *))(*(_QWORD *)v10 + 1200))(__dst, v10, i, &v558);
    if (!*(_DWORD *)&__dst[8])
    {
LABEL_86:
      if (*(_BYTE **)__dst != &__dst[16])
        free(*(void **)__dst);
      goto LABEL_88;
    }
    data = (int)v558.__r_.__value_.__l.__data_;
    v567.__r_.__value_.__r.__words[0] = i;
    *((_DWORD *)sub_1C49D78CC((uint64_t)v522, (uint64_t *)&v567) + 2) = data;
    v16 = *(void **)(i + 56);
    v561 = v16;
    LODWORD(v554.__r_.__value_.__l.__data_) = 0;
    v551.__r_.__value_.__s.__data_[0] = 0;
    v548.__r_.__value_.__s.__data_[0] = 0;
    memset(&v567, 0, sizeof(v567));
    memset(&v584, 0, sizeof(v584));
    if (!*(_DWORD *)&__dst[8])
    {
LABEL_84:
      if (v567.__r_.__value_.__r.__words[0])
        operator delete(v567.__r_.__value_.__l.__data_);
      goto LABEL_86;
    }
    v17 = *(_QWORD *)__dst;
    v18 = *(_QWORD *)__dst + 16 * *(unsigned int *)&__dst[8];
    do
    {
      v20 = *(void **)v17;
      v19 = *(void **)(v17 + 8);
      if (v16 != *(void **)v17)
      {
        do
        {
          sub_1C5181294((uint64_t)&v519, &v561, &v548, (uint64_t)&v567, &v584.__r_.__value_.__l.__data_);
          v21 = v561;
          if (!v561 || (*(_BYTE *)v561 & 4) == 0)
          {
            while ((*((_WORD *)v21 + 22) & 8) != 0)
              v21 = (void *)*((_QWORD *)v21 + 1);
          }
          v561 = (void *)*((_QWORD *)v21 + 1);
        }
        while (v561 != v20);
        v16 = v20;
      }
      while (v16 != v19)
      {
        switch((*(unsigned int (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v10 + 1184))(v10, &v561, LODWORD(v558.__r_.__value_.__l.__data_)))
        {
          case 0u:
            sub_1C5181464((uint64_t)&v519, &v561, &v548, &v551, &v554, (uint64_t)&v567, &v584.__r_.__value_.__l.__data_);
            break;
          case 1u:
            sub_1C5181464((uint64_t)&v519, &v561, &v548, &v551, &v554, (uint64_t)&v567, &v584.__r_.__value_.__l.__data_);
            goto LABEL_35;
          case 2u:
LABEL_35:
            sub_1C5181294((uint64_t)&v519, &v561, &v548, (uint64_t)&v567, &v584.__r_.__value_.__l.__data_);
            break;
          case 3u:
            v527 = 0;
            break;
          default:
            break;
        }
        v22 = v561;
        if (!v561 || (*(_BYTE *)v561 & 4) == 0)
        {
          while ((*((_WORD *)v22 + 22) & 8) != 0)
            v22 = (_QWORD *)v22[1];
        }
        v16 = (void *)v22[1];
        v561 = v16;
      }
      v17 += 16;
      v16 = v19;
    }
    while (v17 != v18);
    if (!v551.__r_.__value_.__s.__data_[0])
    {
      v23 = (uint64_t *)v584.__r_.__value_.__r.__words[0];
      goto LABEL_82;
    }
    sub_1C5181294((uint64_t)&v519, &v561, &v548, (uint64_t)&v567, &v584.__r_.__value_.__l.__data_);
    v23 = (uint64_t *)v584.__r_.__value_.__r.__words[0];
    if ((uint64_t)(v584.__r_.__value_.__l.__size_ - v584.__r_.__value_.__r.__words[0]) >= 1)
    {
      v24 = (uint64_t)(v584.__r_.__value_.__l.__size_ - v584.__r_.__value_.__r.__words[0]) >> 3;
      v25 = *((_QWORD *)&v525 + 1);
      v26 = (uint64_t *)v526;
      v27 = v526 - *((_QWORD *)&v525 + 1);
      v28 = (char *)(*((_QWORD *)&v525 + 1) + ((v526 - *((_QWORD *)&v525 + 1)) & 0xFFFFFFFFFFFFFFF8));
      if (v24 > (uint64_t)(*((_QWORD *)&v526 + 1) - v526) >> 3)
      {
        v29 = v27 >> 3;
        v30 = (v27 >> 3) + v24;
        if (v30 >> 61)
LABEL_835:
          abort();
        v31 = *((_QWORD *)&v526 + 1) - *((_QWORD *)&v525 + 1);
        if ((uint64_t)(*((_QWORD *)&v526 + 1) - *((_QWORD *)&v525 + 1)) >> 2 > v30)
          v30 = v31 >> 2;
        v32 = (unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8;
        v33 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v32)
          v33 = v30;
        __src = (uint64_t *)v584.__r_.__value_.__r.__words[0];
        v502 = v33;
        if (v33)
        {
          v495 = v27 >> 3;
          v497 = v526 - *((_QWORD *)&v525 + 1);
          *(_QWORD *)v499 = *((_QWORD *)&v525 + 1) + ((v526 - *((_QWORD *)&v525 + 1)) & 0xFFFFFFFFFFFFFFF8);
          if (v33 >> 61)
LABEL_836:
            sub_1C4764EE4();
          v34 = (char *)operator new(8 * v33);
          v27 = v497;
          v28 = *(char **)v499;
          v29 = v495;
        }
        else
        {
          v34 = 0;
        }
        v47 = &v34[8 * v29];
        v48 = &v47[8 * v24];
        v49 = 8 * v24;
        v50 = v47;
        v51 = __src;
        do
        {
          v52 = *v51++;
          *(_QWORD *)v50 = v52;
          v50 += 8;
          v49 -= 8;
        }
        while (v49);
        if ((unint64_t)v27 >= 8)
        {
          v53 = 8 * v29;
          do
          {
            *(_QWORD *)&v34[v53 - 8] = *(_QWORD *)(v25 - 8 + v53);
            v53 -= 8;
          }
          while (v53);
          v26 = (uint64_t *)v526;
          v47 = v34;
        }
        v54 = (char *)v26 - v28;
        if (v26 != (uint64_t *)v28)
        {
          v55 = (char *)v26 - v28;
          v56 = v48;
          v57 = v47;
          memmove(v48, v28, v55);
          v47 = v57;
          v48 = v56;
        }
        v58 = (void *)*((_QWORD *)&v525 + 1);
        *((_QWORD *)&v525 + 1) = v47;
        *(_QWORD *)&v526 = &v48[v54];
        *((_QWORD *)&v526 + 1) = &v34[8 * v502];
        v23 = __src;
        if (v58)
          operator delete(v58);
        goto LABEL_81;
      }
      v35 = v526 - (_QWORD)v28;
      v36 = (uint64_t)(v526 - (_QWORD)v28) >> 3;
      if (v36 >= v24)
      {
        v41 = v584.__r_.__value_.__r.__words[0] + 8 * v24;
        v40 = (char *)v526;
      }
      else
      {
        __srca = (uint64_t *)v584.__r_.__value_.__r.__words[0];
        v37 = v584.__r_.__value_.__r.__words[0] + 8 * v36;
        v38 = v584.__r_.__value_.__l.__size_ - v37;
        if (v584.__r_.__value_.__l.__size_ != v37)
        {
          *(_QWORD *)v500 = *((_QWORD *)&v525 + 1) + ((v526 - *((_QWORD *)&v525 + 1)) & 0xFFFFFFFFFFFFFFF8);
          v503 = v584.__r_.__value_.__l.__size_ - v37;
          memmove((void *)v526, (const void *)(v584.__r_.__value_.__r.__words[0] + 8 * v36), v584.__r_.__value_.__l.__size_ - v37);
          v28 = *(char **)v500;
          v38 = v503;
        }
        v39 = v37;
        v40 = (char *)v26 + v38;
        *(_QWORD *)&v526 = v40;
        v23 = __srca;
        if (v35 < 1)
          goto LABEL_81;
        v41 = v39;
      }
      v42 = (uint64_t *)&v40[-8 * v24];
      v43 = v40;
      while (v42 < v26)
      {
        v44 = *v42++;
        *(_QWORD *)v43 = v44;
        v43 += 8;
      }
      v45 = &v28[8 * v24];
      *(_QWORD *)&v526 = v43;
      if (v40 != v45)
      {
        v46 = v28;
        memmove(&v40[-8 * ((v40 - v45) >> 3)], v28, v40 - v45);
        v28 = v46;
      }
      if ((uint64_t *)v41 != v23)
        memmove(v28, v23, v41 - (_QWORD)v23);
    }
LABEL_81:
    sub_1C4E36A24((char **)&v524, *((char **)&v524 + 1), v567.__r_.__value_.__l.__data_, (char *)v567.__r_.__value_.__l.__size_, (uint64_t)(v567.__r_.__value_.__l.__size_ - v567.__r_.__value_.__r.__words[0]) >> 2);
LABEL_82:
    if (v23)
      operator delete(v23);
    goto LABEL_84;
  }
LABEL_90:
  llvm::SuffixTree::SuffixTree((uint64_t)&v567, &v524);
  v533 = 0;
  v532 = 0;
  v534 = 0;
  sub_1C619335C((uint64_t)&v584, v581);
  n = 0;
  v60 = 0;
  v561 = 0;
  *(_OWORD *)v563 = 0u;
  v564 = 0u;
  *(_OWORD *)v565 = 0u;
  v566 = 2;
  if (v584.__r_.__value_.__r.__words[0])
  {
    n = 0;
    v60 = 0;
    __srcc = 0;
    do
    {
      v119 = (char *)v532;
      if (v533 != v532)
      {
        v120 = v533 - 80;
        do
        {
          v121 = (char *)*((_QWORD *)v120 - 2);
          if (v120 != v121)
            free(v121);
          v122 = (char *)*((_QWORD *)v120 - 12);
          if (v120 - 80 != v122)
            free(v122);
          v123 = v120 - 144;
          v120 -= 224;
        }
        while (v123 != v119);
      }
      v533 = v119;
      v124 = v584.__r_.__value_.__r.__words[1];
      v125 = (int *)v584.__r_.__value_.__r.__words[2];
      v126 = (int *)v585;
      if ((void *)v584.__r_.__value_.__r.__words[2] != v585)
      {
        v127 = LODWORD(v584.__r_.__value_.__r.__words[1]) - 1;
        do
        {
          v128 = *v125;
          v129 = v127 + v128;
          for (j = (char *)v532; j != v533; j += 224)
          {
            if (v129 >= *(_DWORD *)j && v128 <= *(_DWORD *)j + *((_DWORD *)j + 1) - 1)
              goto LABEL_195;
          }
          *(_QWORD *)__dst = *(_QWORD *)(*((_QWORD *)&v525 + 1) + 8 * v128);
          v558.__r_.__value_.__r.__words[0] = *(_QWORD *)(*((_QWORD *)&v525 + 1) + 8 * v129);
          v554.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)__dst + 24);
          v131 = sub_1C49D78CC((uint64_t)v522, (uint64_t *)&v554);
          sub_1C61F4760((uint64_t)&v532, *v125, v124, (uint64_t *)__dst, (uint64_t *)&v558, (uint64_t)v554.__r_.__value_.__l.__data_, -1431655765 * (((char *)v60 - (char *)n) >> 4), *((_DWORD *)v131 + 2));
LABEL_195:
          ++v125;
        }
        while (v125 != v126);
        v119 = v533;
      }
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v119 - (_BYTE *)v532) >> 5)) < 2)
        goto LABEL_220;
      v132 = n;
      v133 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v532 + 3) + 32) + 16);
      v134 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v133 + 104))(v133);
      (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v134 + 1168))(&v528, v134, &v532);
      v136 = (__int128 *)v528;
      v135 = v529;
      v137 = 0x6DB6DB6DB6DB6DB7 * (((char *)v529 - (_BYTE *)v528) >> 5);
      if (v137 < 2)
        goto LABEL_209;
      if (v528 == v529)
      {
        v138 = 0;
      }
      else
      {
        v138 = 0;
        v139 = (__int128 *)v528;
        do
        {
          v138 += *((_DWORD *)v139 + 8);
          v139 += 14;
        }
        while (v139 != v529);
      }
      if (DWORD2(v530) * (int)v137 > (v138 + DWORD2(v530) + HIDWORD(v530)))
      {
        if (v60 >= (char **)__srcc)
        {
          v149 = 0xAAAAAAAAAAAAAAABLL * (((char *)v60 - (char *)v132) >> 4) + 1;
          if (v149 > 0x555555555555555)
            goto LABEL_835;
          if (0x5555555555555556 * ((__srcc - (char *)v132) >> 4) > v149)
            v149 = 0x5555555555555556 * ((__srcc - (char *)v132) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((__srcc - (char *)v132) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v150 = 0x555555555555555;
          else
            v150 = v149;
          if (v150)
          {
            if (v150 > 0x555555555555555)
              goto LABEL_836;
            v151 = (char *)operator new(48 * v150);
          }
          else
          {
            v151 = 0;
          }
          v152 = &v151[16 * (((char *)v60 - (char *)v132) >> 4)];
          *(_QWORD *)v152 = 0;
          *((_QWORD *)v152 + 1) = 0;
          *((_QWORD *)v152 + 2) = 0;
          sub_1C5181D20(v152, v136, v135, v137);
          *(_OWORD *)(v152 + 24) = v530;
          *((_DWORD *)v152 + 10) = v531;
          if (v60 == v132)
          {
            v154 = &v151[16 * (((char *)v60 - (char *)v132) >> 4)];
          }
          else
          {
            v153 = v60;
            v154 = &v151[16 * (((char *)v60 - (char *)v132) >> 4)];
            do
            {
              *((_QWORD *)v154 - 6) = 0;
              *((_QWORD *)v154 - 5) = 0;
              v154 -= 48;
              *((_QWORD *)v154 + 2) = 0;
              v155 = *((_OWORD *)v153 - 3);
              v153 -= 6;
              *(_OWORD *)v154 = v155;
              *((_QWORD *)v154 + 2) = v153[2];
              *v153 = 0;
              v153[1] = 0;
              v153[2] = 0;
              v156 = *(_OWORD *)(v153 + 3);
              *((_DWORD *)v154 + 10) = *((_DWORD *)v153 + 10);
              *(_OWORD *)(v154 + 24) = v156;
            }
            while (v153 != v132);
            v157 = v60 - 6;
            do
            {
              if (*v157)
              {
                sub_1C5181AD4((uint64_t)v157, *v157);
                operator delete(*v157);
              }
              v112 = v157 == v132;
              v157 -= 6;
            }
            while (!v112);
          }
          __srcc = &v151[48 * v150];
          v60 = (char **)(v152 + 48);
          if (v132)
            operator delete(v132);
          n = (char **)v154;
        }
        else
        {
          *v60 = 0;
          v60[1] = 0;
          v60[2] = 0;
          sub_1C5181D20(v60, (__int128 *)v528, v529, 0x6DB6DB6DB6DB6DB7 * (((char *)v529 - (_BYTE *)v528) >> 5));
          v140 = v530;
          *((_DWORD *)v60 + 10) = v531;
          *(_OWORD *)(v60 + 3) = v140;
          v60 += 6;
          n = v132;
        }
        goto LABEL_210;
      }
      v141 = v532;
      v535[0] = *(uint64_t ****)(*((_QWORD *)v532 + 3) + 32);
      v535[1] = 0;
      v142 = ****(_QWORD ****)v535[0];
      if (*(_QWORD *)(v142 + 128)
        || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v142 + 72) + 48))(*(_QWORD *)(v142 + 72)))
      {
        v158 = *(_QWORD *)(v141[1] + 56);
        if (v158)
        {
          v159 = *(_QWORD *)(v158 - 8 * *(unsigned int *)(v158 + 8));
          if (*(_BYTE *)v159 != 15)
            v159 = *(_QWORD *)(v159 - 8 * *(unsigned int *)(v159 + 8));
          v160 = *(_DWORD *)(v158 + 4);
          LODWORD(v158) = *(unsigned __int16 *)(v158 + 2);
        }
        else
        {
          v159 = 0;
          v160 = 0;
        }
        v161 = v141[3];
        v162 = **(_QWORD **)(v161 + 32);
        *(_DWORD *)&__dst[8] = 16;
        __dst[12] = 2;
        *(_QWORD *)&__dst[16] = v162;
        *(_QWORD *)&__dst[24] = v159;
        v592 = (void *)__PAIR64__(v158, v160);
        v593 = "machine-outliner";
        v594 = "NotOutliningCheaper";
        *(_QWORD *)&v595 = 19;
        BYTE8(v595) = 0;
        LOBYTE(v596) = 0;
        v597 = v599;
        v598 = 0x400000000;
        v600 = 0;
        v601 = -1;
        v602 = v161;
        *(_QWORD *)__dst = &unk_1E8141F00;
        v558.__r_.__value_.__r.__words[0] = (std::string::size_type)"Did not outline ";
        v558.__r_.__value_.__l.__size_ = 16;
        sub_1C53B17B4((uint64_t)&v597, (const void **)&v558.__r_.__value_.__l.__data_);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v558, "Length", 6uLL, v124);
        v163 = sub_1C47E3888((uint64_t)__dst, (uint64_t)&v558);
        v554.__r_.__value_.__r.__words[0] = (std::string::size_type)" instructions";
        v554.__r_.__value_.__l.__size_ = 13;
        sub_1C53B17B4(v163 + 80, (const void **)&v554.__r_.__value_.__l.__data_);
        v554.__r_.__value_.__r.__words[0] = (std::string::size_type)" from ";
        v554.__r_.__value_.__l.__size_ = 6;
        sub_1C53B17B4(v163 + 80, (const void **)&v554.__r_.__value_.__l.__data_);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v554, "NumOccurrences", 0xEuLL, 0x6DB6DB6DB6DB6DB7 * ((v533 - (_BYTE *)v532) >> 5));
        v164 = sub_1C47E3888(v163, (uint64_t)&v554);
        v551.__r_.__value_.__r.__words[0] = (std::string::size_type)" locations.";
        v551.__r_.__value_.__l.__size_ = 11;
        sub_1C53B17B4(v164 + 80, (const void **)&v551.__r_.__value_.__l.__data_);
        v551.__r_.__value_.__r.__words[0] = (std::string::size_type)" Bytes from outlining all occurrences (";
        v551.__r_.__value_.__l.__size_ = 39;
        sub_1C53B17B4(v164 + 80, (const void **)&v551.__r_.__value_.__l.__data_);
        v165 = 0;
        v166 = (__int128 *)v528;
        if (v528 != v529)
        {
          v165 = 0;
          do
          {
            v165 += *((_DWORD *)v166 + 8);
            v166 += 14;
          }
          while (v166 != v529);
        }
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v551, "OutliningCost", 0xDuLL, DWORD2(v530) + v165 + HIDWORD(v530));
        v167 = sub_1C47E3888(v164, (uint64_t)&v551);
        v548.__r_.__value_.__r.__words[0] = (std::string::size_type)")";
        v548.__r_.__value_.__l.__size_ = 1;
        sub_1C53B17B4(v167 + 80, (const void **)&v548.__r_.__value_.__l.__data_);
        v548.__r_.__value_.__r.__words[0] = (std::string::size_type)" >= Unoutlined instruction bytes (";
        v548.__r_.__value_.__l.__size_ = 34;
        sub_1C53B17B4(v167 + 80, (const void **)&v548.__r_.__value_.__l.__data_);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v548, "NotOutliningCost", 0x10uLL, -1227133513 * ((unint64_t)((char *)v529 - (_BYTE *)v528) >> 5) * DWORD2(v530));
        v168 = sub_1C47E3888(v167, (uint64_t)&v548);
        v543 = ")";
        v544 = 1;
        v169 = v168 + 80;
        sub_1C53B17B4(v168 + 80, (const void **)&v543);
        v543 = " (Also found at: ";
        v544 = 17;
        sub_1C53B17B4(v169, (const void **)&v543);
        if (v550 < 0)
          operator delete(v549);
        if (SHIBYTE(v548.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v548.__r_.__value_.__l.__data_);
        if (v553 < 0)
          operator delete(v552);
        if (SHIBYTE(v551.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v551.__r_.__value_.__l.__data_);
        if (v557 < 0)
          operator delete(v555);
        if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v554.__r_.__value_.__l.__data_);
        if (v560 < 0)
          operator delete(v559);
        if (SHIBYTE(v558.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v558.__r_.__value_.__l.__data_);
        v170 = 0x6DB6DB6DB6DB6DB7 * ((v533 - (_BYTE *)v532) >> 5);
        if ((v170 & 0xFFFFFFFE) != 0)
        {
          v171 = (v170 - 1);
          v172 = -1227133513 * ((v533 - (_BYTE *)v532) >> 5);
          v173 = 232;
          v174 = 1;
          do
          {
            v537 = "OtherStartLoc";
            __s1 = __s1 & 0xFFFFFFFF00000000 | v174;
            v539 = __s1;
            v540 = 2051;
            llvm::Twine::str((llvm::Twine *)&v537, v541);
            if (v542 >= 0)
              v175 = v541;
            else
              v175 = (void **)v541[0];
            if (v542 >= 0)
              v176 = v542 & 0x7F;
            else
              v176 = (size_t)v541[1];
            v177 = *(unsigned __int8 **)(*(_QWORD *)((char *)v532 + v173) + 56);
            v536 = v177;
            if (v177)
              llvm::MetadataTracking::track((uint64_t)&v536, v177, 2);
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v543, v175, v176, (const llvm::DebugLoc *)&v536);
            sub_1C47E3888((uint64_t)__dst, (uint64_t)&v543);
            if (v547 < 0)
              operator delete(v546);
            if (v545 < 0)
              operator delete(v543);
            if (v536)
              llvm::MetadataTracking::untrack((uint64_t)&v536, v536);
            if (v542 < 0)
              operator delete(v541[0]);
            if (v171 != v174)
            {
              v537 = ", ";
              v538 = 2;
              sub_1C53B17B4((uint64_t)&v597, (const void **)&v537);
            }
            ++v174;
            v173 += 224;
          }
          while (v172 != v174);
        }
        v537 = ")";
        v538 = 1;
        sub_1C53B17B4((uint64_t)&v597, (const void **)&v537);
        llvm::MachineOptimizationRemarkEmitter::emit(v535, (llvm::DiagnosticInfoOptimizationBase *)__dst);
        *(_QWORD *)__dst = &off_1E814E790;
        v178 = (char *)v597;
        if ((_DWORD)v598)
        {
          v179 = (unint64_t)v598 << 6;
          n = v132;
          do
          {
            v180 = (void **)&v178[v179];
            if (v178[v179 - 17] < 0)
              operator delete(*(v180 - 5));
            if (*((char *)v180 - 41) < 0)
              operator delete(*(v180 - 8));
            v179 -= 64;
          }
          while (v179);
          v178 = (char *)v597;
        }
        else
        {
          n = v132;
        }
        if (v178 != v599)
          free(v178);
      }
      else
      {
LABEL_209:
        n = v132;
      }
LABEL_210:
      v143 = (__int128 *)v528;
      if (v528)
      {
        v144 = v528;
        if (v529 != v528)
        {
          v145 = v529 - 5;
          do
          {
            v146 = (__int128 *)*((_QWORD *)v145 - 2);
            if (v145 != v146)
              free(v146);
            v147 = (__int128 *)*((_QWORD *)v145 - 12);
            if (v145 - 5 != v147)
              free(v147);
            v148 = v145 - 9;
            v145 -= 14;
          }
          while (v148 != v143);
          v144 = v528;
        }
        v529 = v143;
        operator delete(v144);
      }
LABEL_220:
      sub_1C4E35998(&v584);
    }
    while (v584.__r_.__value_.__l.__data_ != v561);
  }
  v498 = (uint64_t *)v60;
  sub_1C61936E8(&v561);
  sub_1C61936E8(&v584);
  v61 = (char *)v532;
  if (v532)
  {
    v62 = v532;
    if (v533 != v532)
    {
      v63 = v533 - 80;
      do
      {
        v64 = (char *)*((_QWORD *)v63 - 2);
        if (v63 != v64)
          free(v64);
        v65 = (char *)*((_QWORD *)v63 - 12);
        if (v63 - 80 != v65)
          free(v65);
        v66 = v63 - 144;
        v63 -= 224;
      }
      while (v66 != v61);
      v62 = v532;
    }
    v533 = v61;
    operator delete(v62);
  }
  sub_1C4926AE8((uint64_t)&v582);
  sub_1C4E36210((uint64_t)&v567.__r_.__value_.__r.__words[2]);
  sub_1C4926AE8((uint64_t)&v567.__r_.__value_.__r.__words[2]);
  v67 = (*(uint64_t (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(*(_QWORD *)*a2 + 72) + 24))(*(_QWORD *)(*(_QWORD *)*a2 + 72), "size-info", 9);
  *(_OWORD *)&v551.__r_.__value_.__l.__data_ = 0uLL;
  v551.__r_.__value_.__r.__words[2] = 0x1000000000;
  __srcb = n;
  v489 = v67;
  if (v67)
  {
    for (k = (_QWORD *)a2[4]; ; k = (_QWORD *)k[1])
    {
      if (k == v518)
        goto LABEL_174;
      v70 = k ? (const Function *)(k - 7) : 0;
      v71 = llvm::MachineModuleInfo::getMachineFunction(v515, v70);
      if (v71)
        break;
LABEL_172:
      ;
    }
    v72 = *(_QWORD *)(v71 + 328);
    if (v72 == v71 + 320)
    {
      v73 = 0;
    }
    else
    {
      v73 = 0;
      do
      {
        --v73;
        v74 = v72 + 48;
        do
        {
          v74 = *(_QWORD *)(v74 + 8);
          ++v73;
        }
        while (v74 != v72 + 48);
        v72 = *(_QWORD *)(v72 + 8);
      }
      while (v72 != v71 + 320);
    }
    if ((*((_BYTE *)v70 + 23) & 0x10) == 0)
    {
      v84 = 0;
      __dst[23] = 0;
      v87 = __dst;
      goto LABEL_131;
    }
    v75 = ***(_QWORD ***)v70;
    v76 = *(_QWORD *)(v75 + 152);
    v77 = *(unsigned int *)(v75 + 168);
    if ((_DWORD)v77)
    {
      LODWORD(v78) = (v77 - 1) & ((v70 >> 4) ^ (v70 >> 9));
      v79 = (const Function **)(v76 + 16 * v78);
      v80 = *v79;
      if (*v79 == v70)
        goto LABEL_123;
      v81 = 1;
      while (v80 != (const Function *)-4096)
      {
        v82 = v78 + v81++;
        v78 = v82 & (v77 - 1);
        v80 = *(const Function **)(v76 + 16 * v78);
        if (v80 == v70)
        {
          v79 = (const Function **)(v76 + 16 * v78);
          goto LABEL_123;
        }
      }
    }
    v79 = (const Function **)(v76 + 16 * v77);
LABEL_123:
    v83 = (unint64_t *)v79[1];
    v86 = *v83;
    v85 = v83 + 2;
    v84 = v86;
    if (v86 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_835;
    if (v84 >= 0x17)
    {
      v88 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v84 | 7) != 0x17)
        v88 = v84 | 7;
      v89 = v88 + 1;
      v87 = operator new(v88 + 1);
      *(_QWORD *)&__dst[16] = v89 | 0x8000000000000000;
      *(_QWORD *)__dst = v87;
      *(_QWORD *)&__dst[8] = v84;
    }
    else
    {
      __dst[23] = v84;
      v87 = __dst;
      if (!v84)
      {
LABEL_131:
        v87[v84] = 0;
        v90 = __dst;
        if (__dst[23] < 0)
          v90 = *(unsigned __int8 **)__dst;
        __s1a = v90;
        if (__dst[23] >= 0)
          v91 = __dst[23] & 0x7F;
        else
          v91 = *(_QWORD *)&__dst[8];
        v92 = v551.__r_.__value_.__r.__words[1];
        if (!LODWORD(v551.__r_.__value_.__r.__words[1]))
        {
          v551.__r_.__value_.__l.__size_ = 0;
          LODWORD(v551.__r_.__value_.__r.__words[2]) = 0;
          v111 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
          if (!v111)
          {
            v484 = "Allocation failed";
            goto LABEL_839;
          }
          v111[16] = 2;
          v551.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
          v92 = 16;
          LODWORD(v551.__r_.__value_.__r.__words[1]) = 16;
        }
        v504 = k;
        v93 = 0;
        if (v91)
        {
          v94 = v91;
          v95 = __s1a;
          do
          {
            v96 = *v95++;
            v93 = 33 * v93 + v96;
            --v94;
          }
          while (v94);
        }
        v97 = v92 - 1;
        v98 = v551.__r_.__value_.__r.__words[0];
        v99 = v551.__r_.__value_.__r.__words[0] + 8 * v92 + 8;
        *(_QWORD *)v506 = HIDWORD(v551.__r_.__value_.__r.__words[2]);
        v100 = -1;
        v101 = 1;
        v102 = v93;
        while (1)
        {
          v103 = v102 & v97;
          v104 = *(_QWORD *)(v98 + 8 * v103);
          if (!v104)
            break;
          if (v104 == -8)
          {
            if (v100 == -1)
              v100 = v102 & v97;
          }
          else if (*(_DWORD *)(v99 + 4 * v103) == v93
                 && v91 == *(_QWORD *)v104
                 && (!v91 || !memcmp(__s1a, (const void *)(v104 + *(_QWORD *)v506), v91)))
          {
            goto LABEL_155;
          }
          v102 = v101 + v103;
          ++v101;
        }
        v105 = v100;
        if (v100 == -1)
        {
          v105 = v103;
          v103 = v103;
        }
        else
        {
          v103 = v100;
        }
        *(_DWORD *)(v99 + 4 * v105) = v93;
        v104 = *(_QWORD *)(v98 + 8 * v103);
LABEL_155:
        if (v104)
        {
          if (v104 != -8)
          {
            k = v504;
LABEL_169:
            *(_DWORD *)(v104 + 8) = v73;
            if ((__dst[23] & 0x80000000) != 0)
              operator delete(*(void **)__dst);
            n = __srcb;
            goto LABEL_172;
          }
          --LODWORD(v551.__r_.__value_.__r.__words[2]);
        }
        v106 = (char *)operator new(v91 + 17, (std::align_val_t)8uLL);
        v107 = v106;
        v108 = v106 + 16;
        k = v504;
        if (v91)
          memcpy(v106 + 16, __s1a, v91);
        v108[v91] = 0;
        *(_QWORD *)v107 = v91;
        *((_DWORD *)v107 + 2) = 0;
        *(_QWORD *)(v98 + 8 * v103) = v107;
        ++HIDWORD(v551.__r_.__value_.__r.__words[1]);
        v109 = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v551, v103);
        for (m = (uint64_t *)(v551.__r_.__value_.__r.__words[0] + 8 * v109); ; ++m)
        {
          v104 = *m;
          v112 = !*m || v104 == -8;
          if (!v112)
            break;
        }
        goto LABEL_169;
      }
    }
    memmove(v87, v85, v84);
    goto LABEL_131;
  }
LABEL_174:
  v113 = 0xAAAAAAAAAAAAAAABLL * (((char *)v498 - (char *)n) >> 4);
  if ((char *)v498 - (char *)n < 1)
  {
LABEL_178:
    v118 = v498;
    sub_1C5181DA8((uint64_t)n, v498, v113, 0, 0, v68);
  }
  else
  {
    v114 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v115 = 0xAAAAAAAAAAAAAAABLL * (((char *)v498 - (char *)n) >> 4);
    while (1)
    {
      v116 = operator new(48 * v115, v114);
      if (v116)
        break;
      v117 = v115 > 1;
      v115 >>= 1;
      if (!v117)
        goto LABEL_178;
    }
    v181 = v116;
    v118 = v498;
    sub_1C5181DA8((uint64_t)n, v498, v113, (uint64_t)v116, v115, v68);
    operator delete(v181);
  }
  if (n == (char **)v118)
  {
    sub_1C51838C8((uint64_t)&v551);
    v421 = 0;
    if (n)
      goto LABEL_829;
    goto LABEL_830;
  }
  v487 = 0;
  v182 = (unsigned int **)n;
  do
  {
    v183 = v182;
    v184 = *v182;
    v490 = v183;
    v185 = (uint64_t)v183[1];
    if (v184 == (unsigned int *)v185)
    {
      v185 = (uint64_t)v184;
LABEL_312:
      v190 = (uint64_t)v184;
      goto LABEL_313;
    }
    while (1)
    {
      v186 = *v184;
      v187 = (_DWORD *)(v524 + 4 * v186);
      v188 = v186 + v184[1] - 1;
      if (v187 != (_DWORD *)(v524 + 4 + 4 * v188))
        break;
LABEL_309:
      v184 += 56;
      if (v184 == (unsigned int *)v185)
      {
        v190 = (uint64_t)v183[1];
LABEL_313:
        v192 = (uint64_t)v490;
        goto LABEL_356;
      }
    }
    v189 = 4 * v188 - 4 * v186 + 4;
    while (*v187 != -1)
    {
      ++v187;
      v189 -= 4;
      if (!v189)
        goto LABEL_309;
    }
    v191 = v184 + 56;
    if (v184 + 56 == (unsigned int *)v185)
      goto LABEL_312;
    v190 = (uint64_t)v184;
    do
    {
      v193 = v191;
      v194 = v184[56];
      v195 = (_DWORD *)(v524 + 4 * v194);
      v196 = v194 + v184[57] - 1;
      if (v195 == (_DWORD *)(v524 + 4 * v196 + 4))
      {
LABEL_319:
        v198 = *(_OWORD *)v193;
        v199 = *((_OWORD *)v193 + 1);
        *(_DWORD *)(v190 + 32) = v193[8];
        *(_OWORD *)v190 = v198;
        *(_OWORD *)(v190 + 16) = v199;
        *(_QWORD *)(v190 + 40) = *((_QWORD *)v184 + 33);
        if ((unsigned int *)v190 == v184 + 56)
          goto LABEL_326;
        v200 = (const void **)(v184 + 68);
        v201 = (unsigned int *)*((_QWORD *)v184 + 34);
        if (v201 != v184 + 72)
        {
          v215 = *(void **)(v190 + 48);
          if (v215 != (void *)(v190 + 64))
          {
            free(v215);
            v201 = (unsigned int *)*v200;
          }
          *(_QWORD *)(v190 + 48) = v201;
          v203 = v184 + 70;
          *(_QWORD *)(v190 + 56) = *((_QWORD *)v184 + 35);
          *((_QWORD *)v184 + 34) = v184 + 72;
          v184[71] = 0;
          goto LABEL_325;
        }
        v202 = (void **)(v190 + 48);
        v203 = v184 + 70;
        v204 = v184[70];
        v205 = *(unsigned int *)(v190 + 56);
        if (v205 >= v204)
        {
          if ((_DWORD)v204)
            memmove(*v202, v201, 8 * v204);
LABEL_324:
          *(_DWORD *)(v190 + 56) = v204;
LABEL_325:
          *v203 = 0;
LABEL_326:
          *(_DWORD *)(v190 + 112) = v184[84];
          *(_QWORD *)(v190 + 120) = *((_QWORD *)v184 + 43);
          if ((unsigned int *)v190 == v184 + 56)
          {
LABEL_333:
            *(_DWORD *)(v190 + 192) = v184[104];
            v212 = *(_OWORD *)(v184 + 106);
            *(_DWORD *)(v190 + 216) = v184[110];
            *(_OWORD *)(v190 + 200) = v212;
            v190 += 224;
            goto LABEL_334;
          }
          v206 = (const void **)(v184 + 88);
          v207 = (unsigned int *)*((_QWORD *)v184 + 44);
          if (v207 != v184 + 92)
          {
            v216 = *(void **)(v190 + 128);
            if (v216 != (void *)(v190 + 144))
            {
              free(v216);
              v207 = (unsigned int *)*v206;
            }
            *(_QWORD *)(v190 + 128) = v207;
            v209 = v184 + 90;
            *(_QWORD *)(v190 + 136) = *((_QWORD *)v184 + 45);
            *((_QWORD *)v184 + 44) = v184 + 92;
            v184[91] = 0;
            goto LABEL_332;
          }
          v208 = (void **)(v190 + 128);
          v209 = v184 + 90;
          v210 = v184[90];
          v211 = *(unsigned int *)(v190 + 136);
          if (v211 >= v210)
          {
            if ((_DWORD)v210)
              memmove(*v208, v207, 8 * v210);
LABEL_331:
            *(_DWORD *)(v190 + 136) = v210;
LABEL_332:
            *v209 = 0;
            goto LABEL_333;
          }
          if (*(_DWORD *)(v190 + 140) < v210)
          {
            *(_DWORD *)(v190 + 136) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v190 + 128, v190 + 144, v210, 8);
          }
          else if ((_DWORD)v211)
          {
            memmove(*v208, v207, 8 * v211);
LABEL_344:
            v214 = *v209;
            if (v211 != v214)
              memcpy((char *)*v208 + 8 * v211, (char *)*v206 + 8 * v211, (_BYTE *)*v206 + 8 * v214 - ((_BYTE *)*v206 + 8 * v211));
            goto LABEL_331;
          }
          v211 = 0;
          goto LABEL_344;
        }
        if (*(_DWORD *)(v190 + 60) < v204)
        {
          *(_DWORD *)(v190 + 56) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v190 + 48, v190 + 64, v204, 8);
        }
        else if ((_DWORD)v205)
        {
          memmove(*v202, v201, 8 * v205);
LABEL_339:
          v213 = *v203;
          if (v205 != v213)
            memcpy((char *)*v202 + 8 * v205, (char *)*v200 + 8 * v205, (_BYTE *)*v200 + 8 * v213 - ((_BYTE *)*v200 + 8 * v205));
          goto LABEL_324;
        }
        v205 = 0;
        goto LABEL_339;
      }
      v197 = 4 * v196 - 4 * v194 + 4;
      while (*v195 != -1)
      {
        ++v195;
        v197 -= 4;
        if (!v197)
          goto LABEL_319;
      }
LABEL_334:
      v191 = v193 + 56;
      v184 = v193;
    }
    while (v193 + 56 != (unsigned int *)v185);
    v192 = (uint64_t)v490;
    v185 = (uint64_t)v490[1];
    n = __srcb;
LABEL_356:
    sub_1C61F4988(v192, v190, v185);
    v217 = *(_QWORD *)(v192 + 8);
    if (*(_QWORD *)v192 == v217)
    {
      v218 = 0;
      v220 = v498;
    }
    else
    {
      v218 = 0;
      v219 = *(_QWORD *)v192;
      v220 = v498;
      do
      {
        v218 += *(_DWORD *)(v219 + 32);
        v219 += 224;
      }
      while (v219 != v217);
    }
    if (-1227133513 * ((unint64_t)(v217 - *(_QWORD *)v192) >> 5) * *(_DWORD *)(v192 + 32) <= v218 + *(_DWORD *)(v192 + 32) + *(_DWORD *)(v192 + 36))
      goto LABEL_362;
    v221 = *a3;
    *((_BYTE *)&v558.__r_.__value_.__s + 23) = 18;
    strcpy((char *)&v558, "OUTLINED_FUNCTION_");
    v222 = *(_DWORD *)(a1 + 32);
    if (v222)
    {
      std::to_string(&v567, v222 + 1);
      v223 = std::string::append(&v567, "_");
      v224 = v223->__r_.__value_.__r.__words[2];
      *(_OWORD *)__dst = *(_OWORD *)&v223->__r_.__value_.__l.__data_;
      *(_QWORD *)&__dst[16] = v224;
      v223->__r_.__value_.__l.__size_ = 0;
      v223->__r_.__value_.__r.__words[2] = 0;
      v223->__r_.__value_.__r.__words[0] = 0;
      if (__dst[23] >= 0)
        v225 = __dst;
      else
        v225 = *(const std::string::value_type **)__dst;
      if (__dst[23] >= 0)
        v226 = __dst[23] & 0x7F;
      else
        v226 = *(_QWORD *)&__dst[8];
      std::string::append(&v558, v225, v226);
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      if (SHIBYTE(v567.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v567.__r_.__value_.__l.__data_);
    }
    std::to_string((std::string *)__dst, v221);
    if (__dst[23] >= 0)
      v227 = __dst;
    else
      v227 = *(const std::string::value_type **)__dst;
    if (__dst[23] >= 0)
      v228 = __dst[23] & 0x7F;
    else
      v228 = *(_QWORD *)&__dst[8];
    std::string::append(&v558, v227, v228);
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    v229 = (_QWORD *)*a2;
    v230 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*(_QWORD *)*a2 + 1576), 0, 0, 0);
    LOWORD(v592) = 260;
    *(_QWORD *)__dst = &v558;
    v231 = llvm::Function::Create(v230, 0, (uint64_t)__dst, (uint64_t)a2);
    *((_DWORD *)v231 + 8) = v231[4] & 0xFFFFBF00 | 0x4087;
    v231[14] = llvm::AttributeList::addAttributeAtIndex(v231 + 14, *(uint64_t **)*v231, -1, 42);
    v231[14] = llvm::AttributeList::addAttributeAtIndex(v231 + 14, *(uint64_t **)*v231, -1, 15);
    v232 = *(_QWORD *)v192;
    v233 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v192 + 24) + 32) + 16);
    v234 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v233 + 104))(v233);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v234 + 1176))(v234, v231, v192);
    v235 = *(_QWORD *)v192;
    v236 = *(_QWORD *)(v192 + 8);
    if (*(_QWORD *)v192 != v236)
    {
      LODWORD(v237) = 0;
      do
      {
        UWTableKind = llvm::AttributeList::getUWTableKind((llvm::AttributeList *)(**(_QWORD **)(*(_QWORD *)(v235 + 24)
                                                                                              + 32)
                                                                                + 112));
        if (UWTableKind <= (int)v237)
          v237 = v237;
        else
          v237 = UWTableKind;
        v235 += 224;
      }
      while (v235 != v236);
      if ((_DWORD)v237)
      {
        v239 = llvm::Attribute::get(*(uint64_t **)*v231, 79, v237);
        v231[14] = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(v231 + 14), *(llvm::LLVMContext **)*v231, -1, v239);
      }
    }
    *(_QWORD *)__dst = "entry";
    LOWORD(v592) = 259;
    v240 = (uint64_t **)operator new();
    *v240 = (uint64_t *)(*v229 + 1600);
    v240[1] = 0;
    v241 = *((_DWORD *)v240 + 5) & 0xC0000000;
    *((_DWORD *)v240 + 4) = 22;
    *((_DWORD *)v240 + 5) = v241;
    v240[3] = 0;
    v240[4] = 0;
    v240[5] = (uint64_t *)(v240 + 5);
    v240[6] = (uint64_t *)(v240 + 5);
    v240[7] = 0;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v231 + 9), v240);
    v242 = (uint64_t *)v231[9];
    v240[4] = v231 + 9;
    v240[3] = v242;
    v242[1] = (uint64_t)(v240 + 3);
    v231[9] = (uint64_t)(v240 + 3);
    llvm::Value::setName((uint64_t ***)v240, (uint64_t)__dst);
    v243 = **v240;
    v567.__r_.__value_.__r.__words[0] = (std::string::size_type)&v567.__r_.__value_.__r.__words[2];
    v567.__r_.__value_.__l.__size_ = 0x200000000;
    v573 = v243;
    v574 = &v582;
    v575 = &v583;
    v576 = 0;
    v577 = 0;
    v578 = 512;
    v579 = 7;
    v580 = 0;
    v581 = 0;
    v582 = &unk_1E8167888;
    v583 = &unk_1E8167A08;
    v571 = v240;
    v572 = v240 + 5;
    LLVMBuildRetVoid_0((uint64_t *)&v567);
    v244 = **(void ****)(a1 + 8);
    do
    {
      v245 = *v244;
      v244 += 2;
    }
    while (v245 != &llvm::MachineModuleInfoWrapperPass::ID);
    v246 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v244 - 1) + 96))(*(v244 - 1), &llvm::MachineModuleInfoWrapperPass::ID);
    v247 = llvm::MachineModuleInfo::getOrCreateMachineFunction((llvm::MachineModuleInfo *)(v246 + 32), (llvm::Function *)v231);
    v248 = v247;
    v249 = *((_QWORD *)v247 + 39);
    if (v249)
      *((_QWORD *)v247 + 39) = *(_QWORD *)v249;
    else
      v249 = sub_1C484358C((uint64_t)v247 + 128, 232, 3);
    *(_QWORD *)v249 = 0;
    *(_QWORD *)(v249 + 8) = 0;
    *(_QWORD *)(v249 + 16) = 0;
    *(_DWORD *)(v249 + 24) = -1;
    v250 = (unint64_t *)(v249 + 48);
    *(_QWORD *)(v249 + 48) = (v249 + 48) | 4;
    *(_QWORD *)(v249 + 56) = v249 + 48;
    *(_BYTE *)(v249 + 144) = 0;
    *(_OWORD *)(v249 + 64) = 0u;
    *(_OWORD *)(v249 + 80) = 0u;
    *(_OWORD *)(v249 + 96) = 0u;
    *(_OWORD *)(v249 + 112) = 0u;
    *(_OWORD *)(v249 + 121) = 0u;
    *(_QWORD *)(v249 + 160) = 0;
    *(_QWORD *)(v249 + 168) = 0;
    *(_QWORD *)(v249 + 152) = 0;
    *(_BYTE *)(v249 + 176) = 0;
    *(_DWORD *)(v249 + 187) = 0;
    *(_QWORD *)(v249 + 180) = 0;
    *(_QWORD *)(v249 + 192) = 0;
    *(_DWORD *)(v249 + 199) = 0;
    *(_QWORD *)(v249 + 216) = 0;
    *(_QWORD *)(v249 + 224) = 0;
    *(_QWORD *)(v249 + 208) = 0;
    *(_QWORD *)(v249 + 32) = v248;
    *(_QWORD *)(v249 + 40) = v249;
    v251 = (unint64_t *)*((_QWORD *)v248 + 41);
    llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v248 + 320, v249);
    v252 = *v251;
    *(_QWORD *)v249 = *v251;
    *(_QWORD *)(v249 + 8) = v251;
    *(_QWORD *)(v252 + 8) = v249;
    *v251 = v249;
    v254 = *(_QWORD *)(v232 + 8);
    v253 = *(_QWORD *)(v232 + 16);
    v492 = *(_QWORD *)(*(_QWORD *)(v254 + 24) + 32);
    v485 = v234;
    if (v253 && (*(_BYTE *)v253 & 4) != 0)
    {
      n = __srcb;
    }
    else
    {
      for (n = __srcb; (*(_WORD *)(v253 + 44) & 8) != 0; v253 = *(_QWORD *)(v253 + 8))
        ;
    }
    for (ii = *(_QWORD *)(v253 + 8); v254 != ii; v254 = *(_QWORD *)(v254 + 8))
    {
      if (**(unsigned __int16 **)(v254 + 16) - 13 >= 5)
      {
        v308 = *((_QWORD *)v248 + 28);
        if (v308)
          *((_QWORD *)v248 + 28) = *(_QWORD *)v308;
        else
          v308 = sub_1C484358C((uint64_t)v248 + 128, 72, 3);
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v308, v248, (const llvm::MachineInstr *)v254);
        if (**(_WORD **)(v254 + 16) == 3)
        {
          v309 = *(_DWORD *)(*(_QWORD *)(v308 + 32) + 16);
          v310 = *(_QWORD *)(v492 + 440);
          v311 = v310 + 80 * v309;
          v312 = *(_OWORD *)(v311 + 12);
          *(_OWORD *)__dst = *(_OWORD *)v311;
          *(_OWORD *)&__dst[12] = v312;
          v593 = 0;
          v594 = 0;
          v592 = 0;
          sub_1C515FEEC(&v592, *(const void **)(v311 + 32), *(_QWORD *)(v311 + 40), *(_QWORD *)(v311 + 40) - *(_QWORD *)(v311 + 32));
          v313 = (void **)(v311 + 56);
          if (*(char *)(v311 + 79) < 0)
          {
            sub_1C47EBC30(&v595, *v313, *(_QWORD *)(v310 + 80 * v309 + 64));
          }
          else
          {
            v314 = *(_OWORD *)v313;
            v596 = *(_QWORD *)(v311 + 72);
            v595 = v314;
          }
          llvm::MachineFunction::addFrameInst((uint64_t *)v248, (uint64_t)__dst);
          if (SHIBYTE(v596) < 0)
            operator delete((void *)v595);
          if (v592)
          {
            v593 = (const char *)v592;
            operator delete(v592);
          }
        }
        llvm::MachineInstr::dropMemRefs(v308, v248);
        v543 = 0;
        v315 = (unsigned __int8 **)(v308 + 56);
        if (&v543 != (void **)(v308 + 56))
        {
          if (*v315)
          {
            llvm::MetadataTracking::untrack(v308 + 56, *v315);
            v321 = (unsigned __int8 *)v543;
            *v315 = (unsigned __int8 *)v543;
            if (v321)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v543, v321, v308 + 56);
              v543 = 0;
            }
          }
          else
          {
            *v315 = 0;
          }
        }
        v316 = *(_QWORD *)(v249 + 40);
        *(_QWORD *)(v308 + 24) = v316;
        v317 = *(_QWORD *)(v316 + 32);
        v318 = *(unsigned int *)(v308 + 40);
        if ((_DWORD)v318)
        {
          v322 = *(_QWORD *)(v308 + 32);
          v323 = *(_QWORD *)(v317 + 40);
          v324 = 32 * v318;
          do
          {
            if (!*(_BYTE *)v322)
            {
              v325 = *(unsigned int *)(v322 + 4);
              if ((int)v325 >= 0)
                v326 = (uint64_t *)(*(_QWORD *)(v323 + 272) + 8 * v325);
              else
                v326 = (uint64_t *)(*(_QWORD *)(v323 + 24) + 16 * (v325 & 0x7FFFFFFF) + 8);
              v327 = *v326;
              if (*v326)
              {
                v328 = *(_QWORD *)(v327 + 16);
                *(_QWORD *)(v327 + 16) = v322;
                *(_QWORD *)(v322 + 16) = v328;
                if ((*(_BYTE *)(v322 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v322 + 24) = v327;
                }
                else
                {
                  *(_QWORD *)(v322 + 24) = 0;
                  v326 = (uint64_t *)(v328 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v322 + 16) = v322;
                *(_QWORD *)(v322 + 24) = 0;
              }
              *v326 = v322;
            }
            v322 += 32;
            v324 -= 32;
          }
          while (v324);
        }
        v319 = *(_QWORD *)(v317 + 728);
        if (v319)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v319 + 24))(v319, v308);
        v320 = *v250 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v308 = v320 | *(_QWORD *)v308 & 7;
        *(_QWORD *)(v308 + 8) = v250;
        *(_QWORD *)(v320 + 8) = v308;
        *v250 = *v250 & 7 | v308;
        n = __srcb;
      }
      if ((*(_BYTE *)v254 & 4) == 0)
      {
        while ((*(_WORD *)(v254 + 44) & 8) != 0)
          v254 = *(_QWORD *)(v254 + 8);
      }
    }
    **((_QWORD **)v248 + 45) = **((_QWORD **)v248 + 45) & 0xFFFFFFFFFFFFFFF0 | 0xE;
    llvm::MachineRegisterInfo::freezeReservedRegs(*((llvm::MachineRegisterInfo **)v248 + 5), v248);
    v256 = *(_QWORD *)(**((_QWORD **)v248 + 5) + 16);
    v257 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v256 + 176))(v256);
    v259 = v257;
    v561 = v257;
    v562 = &v564;
    *(_OWORD *)v563 = xmmword_1C6464ED0;
    v565[0] = 0;
    LODWORD(v565[1]) = 0;
    v260 = v257[4];
    if (v260)
    {
      v261 = malloc_type_calloc(v257[4], 1uLL, 0x6D9A4F0CuLL);
      if (v261)
      {
        v565[0] = v261;
        LODWORD(v565[1]) = v260;
        goto LABEL_406;
      }
LABEL_837:
      v484 = "Allocation failed";
LABEL_839:
      llvm::report_bad_alloc_error((llvm *)v484, (const char *)1);
    }
LABEL_406:
    v262 = *v490;
    v263 = v490[1];
    while (v262 != v263)
    {
      v264 = *(const llvm::MachineFunction ***)(*((_QWORD *)v262 + 1) + 24);
      *(_QWORD *)__dst = v259;
      *(_QWORD *)&__dst[8] = &v592;
      *(_OWORD *)&__dst[16] = xmmword_1C6464ED0;
      v594 = 0;
      LODWORD(v595) = 0;
      v265 = v259[4];
      if (v265)
      {
        v266 = malloc_type_calloc(v259[4], 1uLL, 0x6D9A4F0CuLL);
        if (!v266)
          goto LABEL_837;
        v594 = v266;
        LODWORD(v595) = v265;
      }
      llvm::LivePhysRegs::addLiveOuts((llvm::LivePhysRegs *)__dst, v264);
      v267 = (const llvm::MachineFunction **)*((_QWORD *)v262 + 1);
      v268 = (unint64_t)(v264 + 6);
      n = __srcb;
      if (v264 + 6 != v267)
      {
        do
        {
          v269 = (const llvm::MachineInstr *)(*(_QWORD *)v268 & 0xFFFFFFFFFFFFFFF8);
          if (!v269 || (*(_BYTE *)v269 & 4) == 0)
          {
            while ((*((_WORD *)v269 + 22) & 4) != 0)
              v269 = (const llvm::MachineInstr *)(*(_QWORD *)v269 & 0xFFFFFFFFFFFFFFF8);
          }
          llvm::LivePhysRegs::removeDefs((llvm::LivePhysRegs *)__dst, v269);
          llvm::LivePhysRegs::addUses((llvm::LivePhysRegs *)__dst, v269);
          v268 = *(_QWORD *)v268 & 0xFFFFFFFFFFFFFFF8;
          if (!v268 || (*(_BYTE *)v268 & 4) == 0)
          {
            while ((*(_WORD *)(v268 + 44) & 4) != 0)
              v268 = *(_QWORD *)v268 & 0xFFFFFFFFFFFFFFF8;
          }
        }
        while ((const llvm::MachineFunction **)v268 != v267);
      }
      if (*(_QWORD *)&__dst[16])
      {
        v270 = *(unsigned __int16 **)&__dst[8];
        v271 = 2 * *(_QWORD *)&__dst[16];
        do
        {
          v272 = *v270++;
          sub_1C61E308C((uint64_t *)&v561, v272);
          v271 -= 2;
        }
        while (v271);
      }
      free(v594);
      if (*(void ***)&__dst[8] != &v592)
        free(*(void **)&__dst[8]);
      v262 += 56;
    }
    llvm::addLiveIns((llvm *)v249, (llvm::MachineBasicBlock *)&v561, v258);
    (*(void (**)(uint64_t, unint64_t, llvm::MachineFunction *, unsigned int **))(*(_QWORD *)v485
                                                                                                + 1208))(v485, v249, v248, v490);
    v273 = *v490;
    v274 = v490[1];
    if (*v490 == v274)
      goto LABEL_430;
    while (2)
    {
      v284 = *(uint64_t *****)(*((_QWORD *)v273 + 3) + 32);
      if (!v284)
        goto LABEL_461;
      v285 = *v284;
      if ((*((_BYTE *)*v284 + 23) & 0x20) == 0)
        goto LABEL_461;
      v286 = ***v285;
      *(_QWORD *)__dst = v285;
      v287 = *(_DWORD *)(v286 + 2496);
      if (!v287)
      {
        v301 = 0;
        goto LABEL_466;
      }
      v288 = *(_QWORD *)(v286 + 2480);
      v289 = v287 - 1;
      v290 = v289 & ((v285 >> 4) ^ (v285 >> 9));
      v291 = (_QWORD *)(v288 + 40 * v290);
      v292 = (_QWORD ***)*v291;
      if ((uint64_t ***)*v291 != v285)
      {
        v293 = 0;
        v294 = 1;
        while (v292 != (_QWORD ***)-4096)
        {
          if (v293)
            v295 = 0;
          else
            v295 = v292 == (_QWORD ***)-8192;
          if (v295)
            v293 = v291;
          v296 = v290 + v294++;
          v290 = v296 & v289;
          v291 = (_QWORD *)(v288 + 40 * v290);
          v292 = (_QWORD ***)*v291;
          if ((uint64_t ***)*v291 == v285)
            goto LABEL_455;
        }
        if (v293)
          v301 = v293;
        else
          v301 = v291;
LABEL_466:
        v291 = sub_1C541AB24(v286 + 2480, (uint64_t)__dst, (uint64_t *)__dst, v301);
        v302 = *(_QWORD *)__dst;
        v291[4] = 0;
        v291[3] = 0;
        *v291 = v302;
        v291[1] = v291 + 3;
        v291[2] = 0x100000000;
      }
LABEL_455:
      v297 = *((unsigned int *)v291 + 4);
      if (!(_DWORD)v297)
        goto LABEL_461;
      v298 = (_QWORD *)(v291[1] + 8);
      v299 = 16 * v297;
      while (*((_DWORD *)v298 - 2))
      {
        v298 += 2;
        v299 -= 16;
        if (!v299)
          goto LABEL_461;
      }
      v300 = *v298;
      if (!*v298)
      {
LABEL_461:
        v273 += 56;
        if (v273 == v274)
          goto LABEL_430;
        continue;
      }
      break;
    }
    llvm::DIBuilder::DIBuilder((uint64_t)__dst, a2, 1, *(_QWORD *)(v300 - 8 * *(unsigned int *)(v300 + 8) + 40));
    if (*(_BYTE *)v300 != 15)
      v300 = *(_QWORD *)(v300 - 8 * *(unsigned int *)(v300 + 8));
    memset(&v554, 0, 20);
    memset(&v548, 0, sizeof(v548));
    LODWORD(v584.__r_.__value_.__r.__words[1]) = 0;
    LOBYTE(v587) = 0;
    v588 = 0;
    v584.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
    v590 = &v548;
    v589 = 0;
    v585 = 0;
    v586 = 0;
    v584.__r_.__value_.__r.__words[2] = 0;
    llvm::Mangler::getNameWithPrefix((llvm::Mangler *)&v554, (llvm::raw_ostream *)&v584, (const llvm::GlobalValue *)v231, 0);
    if ((*((_BYTE *)v231 + 23) & 0x10) != 0)
    {
      v403 = **(_QWORD **)*v231;
      v404 = *(_QWORD *)(v403 + 152);
      v405 = *(unsigned int *)(v403 + 168);
      if (!(_DWORD)v405)
        goto LABEL_701;
      LODWORD(v406) = (v405 - 1) & ((v231 >> 4) ^ (v231 >> 9));
      v407 = (uint64_t **)(v404 + 16 * v406);
      v408 = *v407;
      if (*v407 != v231)
      {
        v409 = 1;
        while (v408 != (uint64_t *)-4096)
        {
          v410 = v406 + v409++;
          v406 = v410 & (v405 - 1);
          v408 = *(uint64_t **)(v404 + 16 * v406);
          if (v408 == v231)
          {
            v407 = (uint64_t **)(v404 + 16 * v406);
            goto LABEL_702;
          }
        }
LABEL_701:
        v407 = (uint64_t **)(v404 + 16 * v405);
      }
LABEL_702:
      v411 = v407[1];
      v414 = *v411;
      v412 = (unsigned __int8 *)(v411 + 2);
      v413 = v414;
    }
    else
    {
      v413 = 0;
      v412 = (unsigned __int8 *)&byte_1C871356D;
    }
    v415 = HIBYTE(v590->__r_.__value_.__r.__words[2]);
    if (v415 >= 0)
      v416 = (unsigned __int8 *)v590;
    else
      v416 = (unsigned __int8 *)v590->__r_.__value_.__r.__words[0];
    if (v415 >= 0)
      size = v415 & 0x7F;
    else
      size = v590->__r_.__value_.__l.__size_;
    TypeArray = llvm::DIBuilder::getOrCreateTypeArray((uint64_t)__dst, 0, 0);
    Impl = llvm::DISubroutineType::getImpl(*(_QWORD **)&__dst[8], 0, 0, TypeArray, 0, 1);
    Function = (llvm::DISubprogram *)llvm::DIBuilder::createFunction((uint64_t)__dst, (_BYTE *)v300, v412, v413, v416, size, (void *)v300, 0, Impl, 0, 0x40u, 0x18u, 0, 0, 0, 0, "", 0);
    llvm::DIBuilder::finalizeSubprogram((llvm::DIBuilder *)__dst, Function);
    llvm::Value::setMetadata((llvm::Value *)v231, 0, Function);
    llvm::DIBuilder::finalize((llvm::DIBuilder *)__dst);
    v584.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
    if (v589 == 1 && v584.__r_.__value_.__r.__words[2])
      MEMORY[0x1CAA32F9C](v584.__r_.__value_.__r.__words[2], 0x1000C8077774924);
    n = __srcb;
    if (SHIBYTE(v548.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v548.__r_.__value_.__l.__data_);
    MEMORY[0x1CAA32FB4](v554.__r_.__value_.__r.__words[0], 8);
    sub_1C50F023C((uint64_t)__dst);
LABEL_430:
    free(v565[0]);
    if (v562 != &v564)
      free(v562);
    v192 = (uint64_t)v490;
    if ((std::string::size_type *)v567.__r_.__value_.__l.__data_ != &v567.__r_.__value_.__r.__words[2])
      free(v567.__r_.__value_.__l.__data_);
    if (SHIBYTE(v558.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v558.__r_.__value_.__l.__data_);
    v490[3] = (unsigned int *)v248;
    v275 = *((_QWORD *)v248 + 41);
    v543 = v248;
    v544 = 0;
    v276 = *(_QWORD *)(v275 + 56);
    if (v275 + 48 == v276)
    {
LABEL_442:
      v280 = 0;
      v281 = 0;
      v282 = 0;
      v283 = 0;
      v567.__r_.__value_.__r.__words[0] = 0;
    }
    else
    {
      while (1)
      {
        v277 = **(unsigned __int16 **)(v276 + 16);
        v117 = v277 > 0x17;
        v278 = (1 << v277) & 0x83E000;
        if (v117 || v278 == 0)
          break;
        v276 = *(_QWORD *)(v276 + 8);
        if (v276 == v275 + 48)
          goto LABEL_442;
      }
      v280 = *(unsigned __int8 **)(v276 + 56);
      v567.__r_.__value_.__r.__words[0] = (std::string::size_type)v280;
      if (v280)
      {
        llvm::MetadataTracking::track((uint64_t)&v567, v280, 2);
        v280 = (unsigned __int8 *)v567.__r_.__value_.__r.__words[0];
        if (v567.__r_.__value_.__r.__words[0])
        {
          v281 = *(_QWORD *)(v567.__r_.__value_.__r.__words[0]
                           - 8 * *(unsigned int *)(v567.__r_.__value_.__r.__words[0] + 8));
          if (*(_BYTE *)v281 != 15)
            v281 = *(_QWORD *)(v281 - 8 * *(unsigned int *)(v281 + 8));
          v303 = 0;
          v282 = *(_DWORD *)(v567.__r_.__value_.__r.__words[0] + 4);
          v283 = *(unsigned __int16 *)(v567.__r_.__value_.__r.__words[0] + 2);
          goto LABEL_471;
        }
      }
      v281 = 0;
      v282 = 0;
      v283 = 0;
    }
    v303 = 1;
LABEL_471:
    v304 = **(_QWORD **)(v275 + 32);
    *(_DWORD *)&__dst[8] = 15;
    __dst[12] = 2;
    *(_QWORD *)&__dst[16] = v304;
    *(_QWORD *)&__dst[24] = v281;
    v592 = (void *)__PAIR64__(v283, v282);
    v593 = "machine-outliner";
    v594 = "OutlinedFunction";
    *(_QWORD *)&v595 = 16;
    BYTE8(v595) = 0;
    LOBYTE(v596) = 0;
    v597 = v599;
    v598 = 0x400000000;
    v600 = 0;
    v601 = -1;
    v602 = v275;
    *(_QWORD *)__dst = &unk_1E8141E08;
    if ((v303 & 1) == 0)
      llvm::MetadataTracking::untrack((uint64_t)&v567, v280);
    v567.__r_.__value_.__r.__words[0] = (std::string::size_type)"Saved ";
    v567.__r_.__value_.__l.__size_ = 6;
    sub_1C53B17B4((uint64_t)&v597, (const void **)&v567.__r_.__value_.__l.__data_);
    v305 = v490[1];
    v306 = *((_DWORD *)v490 + 8);
    if (*v490 == v305)
    {
      v307 = 0;
    }
    else
    {
      v307 = 0;
      v329 = *v490;
      do
      {
        v307 += v329[8];
        v329 += 56;
      }
      while (v329 != v305);
    }
    v330 = -1227133513 * ((unint64_t)((char *)v305 - (char *)*v490) >> 5) * v306;
    v331 = v307 + v306 + *((_DWORD *)v490 + 9);
    v32 = v330 >= v331;
    v332 = v330 - v331;
    if (v32)
      v333 = v332;
    else
      v333 = 0;
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v567, "OutliningBenefit", 0x10uLL, v333);
    v334 = sub_1C47E3888((uint64_t)__dst, (uint64_t)&v567);
    v584.__r_.__value_.__r.__words[0] = (std::string::size_type)" bytes by ";
    v584.__r_.__value_.__l.__size_ = 10;
    sub_1C53B17B4(v334 + 80, (const void **)&v584.__r_.__value_.__l.__data_);
    v584.__r_.__value_.__r.__words[0] = (std::string::size_type)"outlining ";
    v584.__r_.__value_.__l.__size_ = 10;
    sub_1C53B17B4(v334 + 80, (const void **)&v584.__r_.__value_.__l.__data_);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v584, "Length", 6uLL, (*v490)[1]);
    v335 = sub_1C47E3888(v334, (uint64_t)&v584);
    v561 = " instructions ";
    v562 = (void *)14;
    sub_1C53B17B4(v335 + 80, (const void **)&v561);
    v561 = "from ";
    v562 = (void *)5;
    sub_1C53B17B4(v335 + 80, (const void **)&v561);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((std::string *)&v561, "NumOccurrences", 0xEuLL, -1227133513 * ((unint64_t)((char *)v490[1] - (char *)*v490) >> 5));
    v336 = sub_1C47E3888(v335, (uint64_t)&v561);
    v558.__r_.__value_.__r.__words[0] = (std::string::size_type)" locations. ";
    v558.__r_.__value_.__l.__size_ = 12;
    v337 = v336 + 80;
    sub_1C53B17B4(v336 + 80, (const void **)&v558.__r_.__value_.__l.__data_);
    v558.__r_.__value_.__r.__words[0] = (std::string::size_type)"(Found at: ";
    v558.__r_.__value_.__l.__size_ = 11;
    sub_1C53B17B4(v337, (const void **)&v558.__r_.__value_.__l.__data_);
    if (SHIBYTE(v564) < 0)
      operator delete(v563[1]);
    v220 = v498;
    if (SHIBYTE(v563[0]) < 0)
      operator delete(v561);
    if (SHIBYTE(v587) < 0)
      operator delete(v585);
    if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v584.__r_.__value_.__l.__data_);
    if (SHIBYTE(v570) < 0)
      operator delete(v568);
    if (SHIBYTE(v567.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v567.__r_.__value_.__l.__data_);
    v528 = 0;
    v338 = (char *)v490[1] - (char *)*v490;
    if (v338)
    {
      v339 = 0x6DB6DB6DB6DB6DB7 * (v338 >> 5);
      do
      {
        v554.__r_.__value_.__r.__words[0] = (std::string::size_type)"StartLoc";
        v554.__r_.__value_.__r.__words[2] = (std::string::size_type)&v528;
        v556 = 2563;
        llvm::Twine::str((llvm::Twine *)&v554, &v548);
        if ((v548.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v340 = &v548;
        else
          v340 = (std::string *)v548.__r_.__value_.__r.__words[0];
        if ((v548.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v341 = *((_BYTE *)&v548.__r_.__value_.__s + 23) & 0x7F;
        else
          v341 = v548.__r_.__value_.__l.__size_;
        v342 = *(char **)(*(_QWORD *)&(*v490)[56 * (_QWORD)v528 + 2] + 56);
        v537 = v342;
        if (v342)
          llvm::MetadataTracking::track((uint64_t)&v537, (unsigned __int8 *)v342, 2);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v558, v340, v341, (const llvm::DebugLoc *)&v537);
        sub_1C47E3888((uint64_t)__dst, (uint64_t)&v558);
        if (v560 < 0)
          operator delete(v559);
        v220 = v498;
        if (SHIBYTE(v558.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v558.__r_.__value_.__l.__data_);
        if (v537)
          llvm::MetadataTracking::untrack((uint64_t)&v537, (unsigned __int8 *)v537);
        if (SHIBYTE(v548.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v548.__r_.__value_.__l.__data_);
        v343 = (char *)(v339 - 1);
        if (v528 != (void *)(v339 - 1))
        {
          v554.__r_.__value_.__r.__words[0] = (std::string::size_type)", ";
          v554.__r_.__value_.__l.__size_ = 2;
          sub_1C53B17B4((uint64_t)&v597, (const void **)&v554.__r_.__value_.__l.__data_);
          v343 = (char *)v528;
        }
        v528 = v343 + 1;
      }
      while ((unint64_t)(v343 + 1) < v339);
    }
    v554.__r_.__value_.__r.__words[0] = (std::string::size_type)")";
    v554.__r_.__value_.__l.__size_ = 1;
    sub_1C53B17B4((uint64_t)&v597, (const void **)&v554.__r_.__value_.__l.__data_);
    llvm::MachineOptimizationRemarkEmitter::emit((uint64_t ****)&v543, (llvm::DiagnosticInfoOptimizationBase *)__dst);
    *(_QWORD *)__dst = &off_1E814E790;
    v344 = (char *)v597;
    if ((_DWORD)v598)
    {
      v345 = (unint64_t)v598 << 6;
      do
      {
        v346 = (void **)&v344[v345];
        if (v344[v345 - 17] < 0)
          operator delete(*(v346 - 5));
        if (*((char *)v346 - 41) < 0)
          operator delete(*(v346 - 8));
        v345 -= 64;
      }
      while (v345);
      v344 = (char *)v597;
    }
    if (v344 != v599)
      free(v344);
    ++*a3;
    v347 = v490[3];
    v348 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v347 + 2) + 104))(*((_QWORD *)v347 + 2));
    v350 = *v490;
    v349 = v490[1];
    if (*v490 != v349)
    {
      v351 = v348;
      v493 = v348;
      v488 = v490[1];
      do
      {
        v353 = *((_QWORD *)v350 + 2);
        v352 = *((_QWORD *)v350 + 3);
        v561 = (void *)*((_QWORD *)v350 + 1);
        v354 = (llvm::MachineInstr *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, void **, unsigned int *, unsigned int *))(*(_QWORD *)v351 + 1216))(v351, a2, v352, &v561, v347, v350);
        if ((**(_BYTE **)(*(_QWORD *)(v352 + 32) + 360) & 4) != 0)
        {
          v355 = v354;
          *(_QWORD *)__dst = &__dst[16];
          *(_QWORD *)&__dst[8] = 0x200000000;
          v592 = 0;
          v593 = 0;
          *(_QWORD *)&__dst[24] = &v592;
          v567.__r_.__value_.__r.__words[0] = (std::string::size_type)&v567.__r_.__value_.__r.__words[2];
          v567.__r_.__value_.__l.__size_ = 0x200000000;
          v569 = 0;
          v570 = 0;
          v568 = &v569;
          v356 = *(_QWORD *)v354 & 0xFFFFFFFFFFFFFFF8;
          if (!v356 || (*(_BYTE *)v356 & 4) == 0)
          {
            while ((*(_WORD *)(v356 + 44) & 4) != 0)
              v356 = *(_QWORD *)v356 & 0xFFFFFFFFFFFFFFF8;
          }
          if (v356 != v353)
          {
            v357 = v353;
            while (1)
            {
              v584.__r_.__value_.__r.__words[0] = (std::string::size_type)&v584.__r_.__value_.__r.__words[2];
              v584.__r_.__value_.__l.__size_ = 0x200000000;
              v586 = 0;
              v587 = 0;
              v585 = &v586;
              v358 = *(unsigned int *)(v357 + 40);
              if ((_DWORD)v358)
                break;
LABEL_616:
              v376 = *(unsigned __int16 **)(v357 + 16);
              if ((v376[4] & 0x80) != 0)
              {
                v377 = *v376;
                v117 = v377 > 0x1F;
                v378 = (1 << v377) & 0x8E000000;
                if (v117 || v378 == 0)
                  llvm::MachineFunction::eraseCallSiteInfo(*(int32x2_t **)(*(_QWORD *)(v357 + 24) + 32), (const llvm::MachineInstr *)v357);
              }
              sub_1C47655E8((uint64_t)&v585, v586);
              if ((std::string::size_type *)v584.__r_.__value_.__l.__data_ != &v584.__r_.__value_.__r.__words[2])
                free(v584.__r_.__value_.__l.__data_);
              v357 = *(_QWORD *)v357 & 0xFFFFFFFFFFFFFFF8;
              if (!v357 || (*(_BYTE *)v357 & 4) == 0)
              {
                while ((*(_WORD *)(v357 + 44) & 4) != 0)
                  v357 = *(_QWORD *)v357 & 0xFFFFFFFFFFFFFFF8;
              }
              if (v357 == v356)
              {
                v380 = v352;
                v381 = (std::string::value_type *)v567.__r_.__value_.__r.__words[0];
                v382 = v570;
                v383 = (std::string::value_type *)v568;
                v384 = LODWORD(v567.__r_.__value_.__r.__words[1]);
                n = __srcb;
                goto LABEL_633;
              }
            }
            v359 = *(int **)(v357 + 32);
            v360 = &v359[8 * v358];
            while (2)
            {
              v361 = *v359;
              if (!*v359)
              {
                if ((v361 & 0x1000000) == 0)
                {
                  if ((v361 & 0x10000000) == 0)
                  {
                    LODWORD(v558.__r_.__value_.__l.__data_) = v359[1];
                    sub_1C4778DC4((uint64_t)__dst, (unsigned int *)&v558);
                    LODWORD(v558.__r_.__value_.__l.__data_) = v359[1];
                    sub_1C4778DC4((uint64_t)&v584, (unsigned int *)&v558);
                  }
                  goto LABEL_575;
                }
                LODWORD(v558.__r_.__value_.__l.__data_) = v359[1];
                sub_1C4778DC4((uint64_t)&v567, (unsigned int *)&v558);
                v362 = v359[1];
                if (v593)
                {
                  v363 = v592;
                  if (v592)
                  {
                    do
                    {
                      v364 = v363[7];
                      if (v362 >= v364)
                      {
                        if (v364 >= v362)
                          goto LABEL_593;
                        v363 += 2;
                      }
                      v363 = *(_DWORD **)v363;
                    }
                    while (v363);
                  }
                }
                else if (*(_DWORD *)&__dst[8])
                {
                  v365 = *(_DWORD **)__dst;
                  v366 = 4 * *(unsigned int *)&__dst[8];
                  while (*v365 != v362)
                  {
                    ++v365;
                    v366 -= 4;
                    if (!v366)
                      goto LABEL_575;
                  }
                  if (v366)
                  {
LABEL_593:
                    if (v587)
                    {
                      for (jj = v586; jj; jj = (_QWORD *)*jj)
                      {
                        v368 = *((_DWORD *)jj + 7);
                        if (v362 >= v368)
                        {
                          if (v368 >= v362)
                            goto LABEL_575;
                          ++jj;
                        }
                      }
                    }
                    else if (LODWORD(v584.__r_.__value_.__r.__words[1]))
                    {
                      v369 = (_DWORD *)v584.__r_.__value_.__r.__words[0];
                      v370 = 4 * LODWORD(v584.__r_.__value_.__r.__words[1]);
                      while (*v369 != v362)
                      {
                        ++v369;
                        v370 -= 4;
                        if (!v370)
                          goto LABEL_606;
                      }
                      if (v370)
                        goto LABEL_575;
                    }
LABEL_606:
                    LODWORD(v558.__r_.__value_.__l.__data_) = v359[1];
                    if (v593)
                    {
                      sub_1C61D9060((uint64_t)&__dst[24], (unsigned int *)&v558);
                    }
                    else
                    {
                      v371 = *(_DWORD *)&__dst[8];
                      if (*(_DWORD *)&__dst[8])
                      {
                        v372 = *(int **)__dst;
                        v373 = 4 * *(unsigned int *)&__dst[8] - 4;
                        v374 = *(int **)__dst;
                        while (1)
                        {
                          v375 = *v374++;
                          if (v375 == v362)
                            break;
                          v373 -= 4;
                          v372 = v374;
                          if (v373 == -4)
                            goto LABEL_575;
                        }
                        if (v373)
                        {
                          memmove(v372, v372 + 1, v373);
                          v371 = *(_DWORD *)&__dst[8];
                        }
                        *(_DWORD *)&__dst[8] = v371 - 1;
                      }
                    }
                  }
                }
              }
LABEL_575:
              v359 += 8;
              if (v359 == v360)
                goto LABEL_616;
              continue;
            }
          }
          v380 = v352;
          v384 = 0;
          v382 = 0;
          v383 = (std::string::value_type *)&v569;
          v381 = &v567.__r_.__value_.__s.__data_[16];
LABEL_633:
          if (v382)
            v385 = v383;
          else
            v385 = v381;
          v386 = &v381[4 * v384];
          if (v382)
            v387 = (char *)&v569;
          else
            v387 = v386;
          if (v385 != v387)
          {
            do
            {
              v388 = v385 + 28;
              if (!v382)
                v388 = v385;
              v389 = *(_DWORD *)v388;
              *(_OWORD *)&v584.__r_.__value_.__r.__words[1] = 0uLL;
              v585 = 0;
              HIDWORD(v584.__r_.__value_.__r.__words[0]) = v389;
              LODWORD(v584.__r_.__value_.__l.__data_) = 50331648;
              llvm::MachineInstr::addOperand(v355, *(llvm::MachineFunction **)(*((_QWORD *)v355 + 3) + 32), (const llvm::MachineOperand *)&v584);
              if (v382)
              {
                v390 = (char *)*((_QWORD *)v385 + 1);
                if (v390)
                {
                  do
                  {
                    v391 = v390;
                    v390 = *(char **)v390;
                  }
                  while (v390);
                }
                else
                {
                  do
                  {
                    v391 = (char *)*((_QWORD *)v385 + 2);
                    v112 = *(_QWORD *)v391 == (_QWORD)v385;
                    v385 = v391;
                  }
                  while (!v112);
                }
              }
              else
              {
                v391 = v385 + 4;
              }
              v385 = v391;
            }
            while (v391 != v387);
          }
          v392 = v593;
          if (v593)
            v393 = *(void ***)&__dst[24];
          else
            v393 = *(void ***)__dst;
          if (v593)
            v394 = &v592;
          else
            v394 = (void **)(*(_QWORD *)__dst + 4 * *(unsigned int *)&__dst[8]);
          if (v393 != v394)
          {
            do
            {
              v395 = (void **)((char *)v393 + 28);
              if (!v392)
                v395 = v393;
              v396 = *(_DWORD *)v395;
              *(_OWORD *)&v584.__r_.__value_.__r.__words[1] = 0uLL;
              v585 = 0;
              HIDWORD(v584.__r_.__value_.__r.__words[0]) = v396;
              LODWORD(v584.__r_.__value_.__l.__data_) = 0x2000000;
              llvm::MachineInstr::addOperand(v355, *(llvm::MachineFunction **)(*((_QWORD *)v355 + 3) + 32), (const llvm::MachineOperand *)&v584);
              if (v392)
              {
                v397 = (void **)v393[1];
                if (v397)
                {
                  do
                  {
                    v398 = v397;
                    v397 = (void **)*v397;
                  }
                  while (v397);
                }
                else
                {
                  do
                  {
                    v398 = (void **)v393[2];
                    v112 = *v398 == v393;
                    v393 = v398;
                  }
                  while (!v112);
                }
              }
              else
              {
                v398 = (void **)((char *)v393 + 4);
              }
              v393 = v398;
            }
            while (v398 != v394);
          }
          sub_1C47655E8((uint64_t)&v568, v569);
          if ((std::string::size_type *)v567.__r_.__value_.__l.__data_ != &v567.__r_.__value_.__r.__words[2])
            free(v567.__r_.__value_.__l.__data_);
          sub_1C47655E8((uint64_t)&__dst[24], v592);
          v351 = v493;
          v349 = v488;
          v352 = v380;
          if (*(_BYTE **)__dst != &__dst[16])
            free(*(void **)__dst);
        }
        v399 = v561;
        if (!v561 || (*(_BYTE *)v561 & 4) == 0)
        {
          while ((*((_WORD *)v399 + 22) & 8) != 0)
            v399 = (_QWORD *)v399[1];
        }
        if (!v353 || (*(_BYTE *)v353 & 4) == 0)
        {
          while ((*(_WORD *)(v353 + 44) & 8) != 0)
            v353 = *(_QWORD *)(v353 + 8);
        }
        sub_1C487FE80(v352 + 40, v399[1], *(_QWORD *)(v353 + 8));
        v400 = *v350;
        v401 = (void *)(v524 + 4 * v400);
        v402 = v400 + v350[1] - 1;
        if (v401 != (void *)(v524 + 4 * v402 + 4))
          memset(v401, 255, 4 * (v402 - v400) + 4);
        v350 += 56;
      }
      while (v350 != v349);
      v487 = 1;
      v220 = v498;
      v192 = (uint64_t)v490;
    }
LABEL_362:
    v182 = (unsigned int **)(v192 + 48);
  }
  while (v182 != (unsigned int **)v220);
  v421 = v487;
  if ((v489 & v487) != 1)
    goto LABEL_823;
  v422 = (_QWORD *)a2[4];
  if (v422 == v518)
    goto LABEL_822;
  do
  {
    if (v422)
      v423 = (const Function *)(v422 - 7);
    else
      v423 = 0;
    v424 = llvm::MachineModuleInfo::getMachineFunction(v515, v423);
    if (!v424)
      goto LABEL_772;
    v425 = (uint64_t ****)v424;
    v505 = v423;
    v494 = v423 >> 4;
    if ((*((_BYTE *)v423 + 23) & 0x10) == 0)
    {
      v435 = 0;
      *((_BYTE *)&v548.__r_.__value_.__s + 23) = 0;
      v438 = &v548;
      goto LABEL_738;
    }
    v426 = ***(_QWORD ***)v423;
    v427 = *(_QWORD *)(v426 + 152);
    v428 = *(unsigned int *)(v426 + 168);
    if (!(_DWORD)v428)
      goto LABEL_729;
    LODWORD(v429) = (v428 - 1) & ((v423 >> 4) ^ (v423 >> 9));
    v430 = (const Function **)(v427 + 16 * v429);
    v431 = *v430;
    if (*v430 != v423)
    {
      v432 = 1;
      while (v431 != (const Function *)-4096)
      {
        v433 = v429 + v432++;
        v429 = v433 & (v428 - 1);
        v431 = *(const Function **)(v427 + 16 * v429);
        if (v431 == v423)
        {
          v430 = (const Function **)(v427 + 16 * v429);
          goto LABEL_730;
        }
      }
LABEL_729:
      v430 = (const Function **)(v427 + 16 * v428);
    }
LABEL_730:
    v434 = (unint64_t *)v430[1];
    v437 = *v434;
    v436 = v434 + 2;
    v435 = v437;
    if (v437 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_835;
    if (v435 >= 0x17)
    {
      v439 = (v435 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v435 | 7) != 0x17)
        v439 = v435 | 7;
      v440 = v439 + 1;
      v438 = (std::string *)operator new(v439 + 1);
      v548.__r_.__value_.__r.__words[2] = v440 | 0x8000000000000000;
      v548.__r_.__value_.__r.__words[0] = (std::string::size_type)v438;
      v548.__r_.__value_.__l.__size_ = v435;
    }
    else
    {
      *((_BYTE *)&v548.__r_.__value_.__s + 23) = v435;
      v438 = &v548;
      if (!v435)
        goto LABEL_738;
    }
    memmove(v438, v436, v435);
LABEL_738:
    v438->__r_.__value_.__s.__data_[v435] = 0;
    if (v425[41] == (uint64_t ***)(v425 + 40))
    {
      v441 = 0;
    }
    else
    {
      v441 = 0;
      v442 = (uint64_t ****)v425[41];
      do
      {
        --v441;
        v443 = v442 + 6;
        do
        {
          v443 = (uint64_t ****)v443[1];
          ++v441;
        }
        while (v443 != v442 + 6);
        v442 = (uint64_t ****)v442[1];
      }
      while (v442 != v425 + 40);
    }
    v444 = HIBYTE(v548.__r_.__value_.__r.__words[2]);
    if ((v548.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v445 = &v548;
    else
      v445 = (std::string *)v548.__r_.__value_.__r.__words[0];
    if ((v548.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v446 = *((_BYTE *)&v548.__r_.__value_.__s + 23) & 0x7F;
    else
      v446 = v548.__r_.__value_.__l.__size_;
    *(_QWORD *)v501 = v425[41];
    if (!LODWORD(v551.__r_.__value_.__r.__words[1]))
    {
      v459 = 0;
      goto LABEL_765;
    }
    __s1b = v425;
    v517 = v422;
    v507 = HIBYTE(v548.__r_.__value_.__r.__words[2]);
    v447 = 0;
    if (v446)
    {
      v448 = v446;
      v449 = v445;
      do
      {
        v450 = v449->__r_.__value_.__s.__data_[0];
        v449 = (std::string *)((char *)v449 + 1);
        v447 = 33 * v447 + v450;
        --v448;
      }
      while (v448);
    }
    v451 = LODWORD(v551.__r_.__value_.__r.__words[1]) - 1;
    v452 = v551.__r_.__value_.__r.__words[0];
    v496 = (void *)LODWORD(v551.__r_.__value_.__r.__words[1]);
    v453 = v551.__r_.__value_.__r.__words[0] + 8 * LODWORD(v551.__r_.__value_.__r.__words[1]) + 8;
    v454 = HIDWORD(v551.__r_.__value_.__r.__words[2]);
    v455 = 1;
    v456 = v447;
    while (1)
    {
      v457 = v456 & v451;
      v458 = *(_QWORD **)(v452 + 8 * v457);
      if (v458 != (_QWORD *)-8)
      {
        if (!v458)
        {
          v459 = 0;
          n = __srcb;
          v425 = __s1b;
          v422 = v517;
LABEL_764:
          v444 = v507;
          goto LABEL_765;
        }
        if (*(_DWORD *)(v453 + 4 * v457) == v447
          && v446 == *v458
          && (!v446 || !memcmp(v445, (char *)v458 + v454, v446)))
        {
          break;
        }
      }
      v456 = v455 + v457;
      ++v455;
    }
    v459 = 0;
    n = __srcb;
    v425 = __s1b;
    v422 = v517;
    if ((_DWORD)v457 == -1)
      goto LABEL_764;
    v444 = v507;
    if ((void *)(int)v457 != v496)
      v459 = *(_DWORD *)(*(_QWORD *)(v452 + 8 * (int)v457) + 8);
LABEL_765:
    if (v441 != v459)
    {
      v543 = v425;
      v544 = 0;
      v460 = ****v425;
      if (!*(_QWORD *)(v460 + 128))
      {
        if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v460 + 72) + 48))(*(_QWORD *)(v460 + 72)))
          goto LABEL_768;
        *(_QWORD *)v501 = v425[41];
      }
      v461 = **(_QWORD **)(*(_QWORD *)v501 + 32);
      *(_DWORD *)&__dst[8] = 17;
      __dst[12] = 2;
      *(_QWORD *)&__dst[24] = 0;
      v592 = 0;
      *(_QWORD *)&__dst[16] = v461;
      v593 = "size-info";
      v594 = "FunctionMISizeChange";
      *(_QWORD *)&v595 = 20;
      BYTE8(v595) = 0;
      LOBYTE(v596) = 0;
      v597 = v599;
      v598 = 0x400000000;
      v600 = 0;
      v601 = -1;
      v602 = *(_QWORD *)v501;
      *(_QWORD *)__dst = &unk_1E8144BB0;
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v567, "Pass", 4uLL, "Machine Outliner", 0x10uLL);
      v462 = sub_1C47E3888((uint64_t)__dst, (uint64_t)&v567);
      v584.__r_.__value_.__r.__words[0] = (std::string::size_type)": Function: ";
      v584.__r_.__value_.__l.__size_ = 12;
      sub_1C53B17B4(v462 + 80, (const void **)&v584.__r_.__value_.__l.__data_);
      if ((*((_BYTE *)v505 + 23) & 0x10) != 0)
      {
        v463 = ***(_QWORD ***)v505;
        v464 = *(_QWORD *)(v463 + 152);
        v465 = *(unsigned int *)(v463 + 168);
        if (!(_DWORD)v465)
          goto LABEL_786;
        LODWORD(v466) = (v465 - 1) & (v494 ^ (v505 >> 9));
        v467 = (const Function **)(v464 + 16 * v466);
        v468 = *v467;
        if (*v467 != v505)
        {
          v469 = 1;
          while (v468 != (const Function *)-4096)
          {
            v470 = v466 + v469++;
            v466 = v470 & (v465 - 1);
            v468 = *(const Function **)(v464 + 16 * v466);
            if (v468 == v505)
            {
              v467 = (const Function **)(v464 + 16 * v466);
              goto LABEL_787;
            }
          }
LABEL_786:
          v467 = (const Function **)(v464 + 16 * v465);
        }
LABEL_787:
        v471 = v467[1];
        v474 = *(_QWORD *)v471;
        v472 = (char *)v471 + 16;
        v473 = v474;
      }
      else
      {
        v473 = 0;
        v472 = &byte_1C871356D;
      }
      v475 = v441 - (unint64_t)v459;
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v584, "Function", 8uLL, v472, v473);
      v476 = sub_1C47E3888(v462, (uint64_t)&v584);
      v561 = ": MI instruction count changed from ";
      v562 = (void *)36;
      sub_1C53B17B4(v476 + 80, (const void **)&v561);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((std::string *)&v561, "MIInstrsBefore", 0xEuLL, v459);
      v477 = sub_1C47E3888(v476, (uint64_t)&v561);
      v558.__r_.__value_.__r.__words[0] = (std::string::size_type)" to ";
      v558.__r_.__value_.__l.__size_ = 4;
      sub_1C53B17B4(v477 + 80, (const void **)&v558.__r_.__value_.__l.__data_);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v558, "MIInstrsAfter", 0xDuLL, v441);
      v478 = sub_1C47E3888(v477, (uint64_t)&v558);
      v554.__r_.__value_.__r.__words[0] = (std::string::size_type)"; Delta: ";
      v554.__r_.__value_.__l.__size_ = 9;
      sub_1C53B17B4(v478 + 80, (const void **)&v554.__r_.__value_.__l.__data_);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v554, "Delta", 5uLL, v475);
      sub_1C47E3888(v478, (uint64_t)&v554);
      if (v557 < 0)
        operator delete(v555);
      if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v554.__r_.__value_.__l.__data_);
      if (v560 < 0)
        operator delete(v559);
      if (SHIBYTE(v558.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v558.__r_.__value_.__l.__data_);
      if (SHIBYTE(v564) < 0)
        operator delete(v563[1]);
      if (SHIBYTE(v563[0]) < 0)
        operator delete(v561);
      if (SHIBYTE(v587) < 0)
        operator delete(v585);
      if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v584.__r_.__value_.__l.__data_);
      if (SHIBYTE(v570) < 0)
        operator delete(v568);
      if (SHIBYTE(v567.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v567.__r_.__value_.__l.__data_);
      llvm::MachineOptimizationRemarkEmitter::emit((uint64_t ****)&v543, (llvm::DiagnosticInfoOptimizationBase *)__dst);
      *(_QWORD *)__dst = &off_1E814E790;
      v479 = (char *)v597;
      if ((_DWORD)v598)
      {
        v480 = (unint64_t)v598 << 6;
        do
        {
          v481 = (void **)&v479[v480];
          if (v479[v480 - 17] < 0)
            operator delete(*(v481 - 5));
          if (*((char *)v481 - 41) < 0)
            operator delete(*(v481 - 8));
          v480 -= 64;
        }
        while (v480);
        v479 = (char *)v597;
      }
      if (v479 != v599)
        free(v479);
LABEL_768:
      v444 = HIBYTE(v548.__r_.__value_.__r.__words[2]);
    }
    if (v444 < 0)
      operator delete(v548.__r_.__value_.__l.__data_);
    v220 = v498;
LABEL_772:
    v422 = (_QWORD *)v422[1];
  }
  while (v422 != v518);
LABEL_822:
  v421 = 1;
LABEL_823:
  sub_1C51838C8((uint64_t)&v551);
  if (n)
  {
    v482 = (char **)(v220 - 6);
    do
    {
      if (*v482)
      {
        sub_1C5181AD4((uint64_t)v482, *v482);
        operator delete(*v482);
      }
      v112 = v482 == n;
      v482 -= 6;
    }
    while (!v112);
LABEL_829:
    operator delete(n);
  }
LABEL_830:
  if (*((_QWORD *)&v525 + 1))
  {
    *(_QWORD *)&v526 = *((_QWORD *)&v525 + 1);
    operator delete(*((void **)&v525 + 1));
  }
  if ((_QWORD)v524)
  {
    *((_QWORD *)&v524 + 1) = v524;
    operator delete((void *)v524);
  }
  MEMORY[0x1CAA32FB4](v522[0], 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)((char *)&v520 + 4), 8);
  return v421 & 1;
}

void sub_1C5181294(uint64_t a1, _QWORD *a2, _BYTE *a3, uint64_t a4, char **a5)
{
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int v30;

  *a3 = 0;
  if (!*(_BYTE *)(a1 + 104))
  {
    *(_BYTE *)(a1 + 104) = 1;
    v10 = a5[1];
    v9 = (unint64_t)a5[2];
    if ((unint64_t)v10 >= v9)
    {
      v12 = *a5;
      v13 = (v10 - *a5) >> 3;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61)
        goto LABEL_38;
      v15 = v9 - (_QWORD)v12;
      if (v15 >> 2 > v14)
        v14 = v15 >> 2;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        if (v16 >> 61)
          goto LABEL_39;
        v17 = (char *)operator new(8 * v16);
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[8 * v13];
      *(_QWORD *)v18 = *a2;
      v11 = v18 + 8;
      if (v10 != v12)
      {
        do
        {
          v19 = *((_QWORD *)v10 - 1);
          v10 -= 8;
          *((_QWORD *)v18 - 1) = v19;
          v18 -= 8;
        }
        while (v10 != v12);
        v10 = *a5;
      }
      *a5 = v18;
      a5[1] = v11;
      a5[2] = &v17[8 * v16];
      if (v10)
        operator delete(v10);
    }
    else
    {
      *(_QWORD *)v10 = *a2;
      v11 = v10 + 8;
    }
    a5[1] = v11;
    v21 = *(_DWORD **)(a4 + 8);
    v20 = *(_QWORD *)(a4 + 16);
    if ((unint64_t)v21 < v20)
    {
      *v21 = *(_DWORD *)a1;
      v22 = v21 + 1;
LABEL_36:
      *(_QWORD *)(a4 + 8) = v22;
      --*(_DWORD *)a1;
      return;
    }
    v23 = *(_DWORD **)a4;
    v24 = ((uint64_t)v21 - *(_QWORD *)a4) >> 2;
    v25 = v24 + 1;
    if (!((unint64_t)(v24 + 1) >> 62))
    {
      v26 = v20 - (_QWORD)v23;
      if (v26 >> 1 > v25)
        v25 = v26 >> 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
        v27 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (!v27)
      {
        v28 = 0;
LABEL_31:
        v29 = &v28[4 * v24];
        *(_DWORD *)v29 = *(_DWORD *)a1;
        v22 = v29 + 4;
        while (v21 != v23)
        {
          v30 = *--v21;
          *((_DWORD *)v29 - 1) = v30;
          v29 -= 4;
        }
        *(_QWORD *)a4 = v29;
        *(_QWORD *)(a4 + 8) = v22;
        *(_QWORD *)(a4 + 16) = &v28[4 * v27];
        if (v23)
          operator delete(v23);
        goto LABEL_36;
      }
      if (!(v27 >> 62))
      {
        v28 = (char *)operator new(4 * v27);
        goto LABEL_31;
      }
LABEL_39:
      sub_1C4764EE4();
    }
LABEL_38:
    abort();
  }
}

void sub_1C5181464(uint64_t a1, _QWORD *a2, _BYTE *a3, _BYTE *a4, _DWORD *a5, uint64_t a6, char **a7)
{
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  *(_BYTE *)(a1 + 104) = 0;
  if (*a3)
    *a4 = 1;
  *a3 = 1;
  ++*a5;
  v12 = a7[1];
  v11 = (unint64_t)a7[2];
  if ((unint64_t)v12 >= v11)
  {
    v14 = *a7;
    v15 = (v12 - *a7) >> 3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      goto LABEL_41;
    v17 = v11 - (_QWORD)v14;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        goto LABEL_42;
      v19 = (char *)operator new(8 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[8 * v15];
    *(_QWORD *)v20 = *a2;
    v13 = v20 + 8;
    if (v12 != v14)
    {
      do
      {
        v21 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        *((_QWORD *)v20 - 1) = v21;
        v20 -= 8;
      }
      while (v12 != v14);
      v12 = *a7;
    }
    *a7 = v20;
    a7[1] = v13;
    a7[2] = &v19[8 * v18];
    if (v12)
      operator delete(v12);
  }
  else
  {
    *(_QWORD *)v12 = *a2;
    v13 = v12 + 8;
  }
  a7[1] = v13;
  v22 = *(unsigned int *)(a1 + 4);
  v35 = *a2;
  v36 = v22;
  sub_1C61F46C8((uint64_t)&v37, a1 + 8, (llvm::MachineInstrExpressionTrait *)&v35, &v36);
  v23 = *(_DWORD *)(v37 + 8);
  if (v38)
    ++*(_DWORD *)(a1 + 4);
  v25 = *(_DWORD **)(a6 + 8);
  v24 = *(_QWORD *)(a6 + 16);
  if ((unint64_t)v25 < v24)
  {
    *v25 = v23;
    v26 = v25 + 1;
    goto LABEL_39;
  }
  v27 = *(_DWORD **)a6;
  v28 = ((uint64_t)v25 - *(_QWORD *)a6) >> 2;
  v29 = v28 + 1;
  if ((unint64_t)(v28 + 1) >> 62)
LABEL_41:
    abort();
  v30 = v24 - (_QWORD)v27;
  if (v30 >> 1 > v29)
    v29 = v30 >> 1;
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
    v31 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v31 = v29;
  if (!v31)
  {
    v32 = 0;
    goto LABEL_34;
  }
  if (v31 >> 62)
LABEL_42:
    sub_1C4764EE4();
  v32 = (char *)operator new(4 * v31);
LABEL_34:
  v33 = &v32[4 * v28];
  *(_DWORD *)v33 = v23;
  v26 = v33 + 4;
  while (v25 != v27)
  {
    v34 = *--v25;
    *((_DWORD *)v33 - 1) = v34;
    v33 -= 4;
  }
  *(_QWORD *)a6 = v33;
  *(_QWORD *)(a6 + 8) = v26;
  *(_QWORD *)(a6 + 16) = &v32[4 * v31];
  if (v27)
    operator delete(v27);
LABEL_39:
  *(_QWORD *)(a6 + 8) = v26;
  if (*(_DWORD *)(a1 + 4) >= *(_DWORD *)a1)
    llvm::report_fatal_error((llvm *)"Instruction mapping overflow!", (const char *)1);
}

uint64_t sub_1C5181698(uint64_t *a1, llvm::MachineInstrExpressionTrait *this, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MachineInstrExpressionTrait::getHashValue(this, (const llvm::MachineInstr *const *)this);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = (uint64_t *)(v6 + 16 * (HashValue & v9));
      v13 = *v12;
      if ((unint64_t)(*v12 + 1) < 2 || (unint64_t)(*(_QWORD *)this + 1) <= 1)
      {
        if (*(_QWORD *)this == v13)
          goto LABEL_18;
      }
      else
      {
        if ((llvm::MachineInstr::isIdenticalTo(*(_QWORD *)this, v13, 3) & 1) != 0)
        {
LABEL_18:
          result = 1;
          goto LABEL_17;
        }
        v13 = *v12;
      }
      if (!v13)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -1;
      if (v14)
        v8 = (uint64_t *)(v6 + 16 * v11);
      HashValue = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_17:
  *a3 = v12;
  return result;
}

uint64_t *sub_1C5181784(uint64_t a1, uint64_t a2, llvm::MachineInstrExpressionTrait *a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  const llvm::MachineInstr *const *v10;
  int v11;
  uint64_t v12;
  unsigned int HashValue;
  uint64_t *v14;
  int v15;
  int i;
  unsigned int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t *v20;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C51818F4(a1, 2 * v7);
    v11 = *(_DWORD *)(a1 + 16);
    if (v11)
    {
      v12 = *(_QWORD *)a1;
      HashValue = llvm::MachineInstrExpressionTrait::getHashValue(a3, v10);
      v14 = 0;
      v15 = v11 - 1;
      for (i = 1; ; ++i)
      {
        v17 = HashValue & v15;
        a4 = (uint64_t *)(v12 + 16 * (HashValue & v15));
        v18 = *a4;
        if ((unint64_t)(*a4 + 1) < 2 || (unint64_t)(*(_QWORD *)a3 + 1) <= 1)
        {
          if (*(_QWORD *)a3 == v18)
            goto LABEL_4;
        }
        else
        {
          if ((llvm::MachineInstr::isIdenticalTo(*(_QWORD *)a3, v18, 3) & 1) != 0)
            goto LABEL_4;
          v18 = *a4;
        }
        if (!v18)
          break;
        if (v14)
          v19 = 0;
        else
          v19 = v18 == -1;
        if (v19)
          v14 = (uint64_t *)(v12 + 16 * v17);
        HashValue = v17 + i;
      }
      if (v14)
        a4 = v14;
    }
    else
    {
      a4 = 0;
    }
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
    sub_1C51818F4(a1, v7);
    v20 = 0;
    sub_1C5181698((uint64_t *)a1, a3, &v20);
    a4 = v20;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C51818F4(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm::MachineInstrExpressionTrait *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm::MachineInstrExpressionTrait **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C51819A8(a1, v4, (llvm::MachineInstrExpressionTrait *)((char *)v4 + 16 * v3));
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = 0;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C51819A8(uint64_t result, llvm::MachineInstrExpressionTrait *this, llvm::MachineInstrExpressionTrait *a3)
{
  llvm::MachineInstrExpressionTrait *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int i;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;

  v4 = this;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = 0;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  if (this != a3)
  {
    do
    {
      if ((unint64_t)(*(_QWORD *)v4 + 1) >= 2)
      {
        v9 = *(_QWORD *)v5;
        v10 = *(_DWORD *)(v5 + 16);
        result = llvm::MachineInstrExpressionTrait::getHashValue(v4, (const llvm::MachineInstr *const *)this);
        v11 = 0;
        v12 = v10 - 1;
        for (i = 1; ; ++i)
        {
          v14 = result & v12;
          v15 = v9 + 16 * (result & v12);
          this = *(llvm::MachineInstrExpressionTrait **)v15;
          if ((unint64_t)(*(_QWORD *)v15 + 1) < 2
            || (result = *(_QWORD *)v4, (unint64_t)(*(_QWORD *)v4 + 1) <= 1))
          {
            if (*(llvm::MachineInstrExpressionTrait **)v4 == this)
              goto LABEL_21;
          }
          else
          {
            result = llvm::MachineInstr::isIdenticalTo(result, (uint64_t)this, 3);
            if ((result & 1) != 0)
              goto LABEL_21;
            this = *(llvm::MachineInstrExpressionTrait **)v15;
          }
          if (!this)
            break;
          if (v11)
            v16 = 0;
          else
            v16 = this == (llvm::MachineInstrExpressionTrait *)-1;
          if (v16)
            v11 = v9 + 16 * v14;
          result = v14 + i;
        }
        if (v11)
          v15 = v11;
LABEL_21:
        *(_QWORD *)v15 = *(_QWORD *)v4;
        *(_DWORD *)(v15 + 8) = *((_DWORD *)v4 + 2);
        ++*(_DWORD *)(v5 + 8);
      }
      v4 = (llvm::MachineInstrExpressionTrait *)((char *)v4 + 16);
    }
    while (v4 != a3);
  }
  return result;
}

void sub_1C5181AD4(uint64_t a1, char *a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;

  v4 = *(char **)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 80;
    do
    {
      v6 = (char *)*((_QWORD *)v5 - 2);
      if (v5 != v6)
        free(v6);
      v7 = (char *)*((_QWORD *)v5 - 12);
      if (v5 - 80 != v7)
        free(v7);
      v8 = v5 - 144;
      v5 -= 224;
    }
    while (v8 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t sub_1C5181B44(__int128 **a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned int a8)
{
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;

  v9 = *a1;
  v8 = a1[1];
  v10 = 0x6DB6DB6DB6DB6DB7 * (((char *)v8 - (char *)*a1) >> 5);
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) > 0x124924924924924)
    abort();
  if (0xDB6DB6DB6DB6DB6ELL * (((char *)a1[2] - (char *)v9) >> 5) > v11)
    v11 = 0xDB6DB6DB6DB6DB6ELL * (((char *)a1[2] - (char *)v9) >> 5);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)a1[2] - (char *)v9) >> 5)) >= 0x92492492492492)
    v11 = 0x124924924924924;
  if (v11 > 0x124924924924924)
    sub_1C4764EE4();
  v18 = 224 * v11;
  v19 = (char *)operator new(224 * v11);
  v20 = (uint64_t)&v19[224 * v10];
  *(_DWORD *)v20 = a2;
  *(_DWORD *)(v20 + 4) = a3;
  v21 = (__int128 *)&v19[v18];
  *(_QWORD *)(v20 + 8) = a4;
  *(_QWORD *)(v20 + 16) = a5;
  *(_QWORD *)(v20 + 24) = a6;
  *(_DWORD *)(v20 + 32) = 0;
  *(_QWORD *)(v20 + 40) = 0;
  *(_QWORD *)(v20 + 48) = v20 + 64;
  *(_QWORD *)(v20 + 56) = 0x600000000;
  *(_DWORD *)(v20 + 112) = 0;
  *(_QWORD *)(v20 + 120) = 0;
  *(_QWORD *)(v20 + 128) = v20 + 144;
  *(_QWORD *)(v20 + 136) = 0x600000000;
  *(_DWORD *)(v20 + 192) = 0;
  *(_WORD *)(v20 + 200) = 0;
  *(_DWORD *)(v20 + 204) = a7;
  *(_DWORD *)(v20 + 208) = 0;
  v22 = v20 + 224;
  *(_QWORD *)(v20 + 212) = a8;
  if (v8 == v9)
  {
    *a1 = (__int128 *)v20;
    a1[1] = (__int128 *)v22;
    a1[2] = v21;
    if (!v8)
      return v22;
    goto LABEL_17;
  }
  do
  {
    v8 -= 14;
    v20 = sub_1C61F47F0(v20 - 224, v8);
  }
  while (v8 != v9);
  v8 = *a1;
  v23 = a1[1];
  *a1 = (__int128 *)v20;
  a1[1] = (__int128 *)v22;
  a1[2] = v21;
  if (v23 != v8)
  {
    v24 = v23 - 5;
    do
    {
      v25 = (__int128 *)*((_QWORD *)v24 - 2);
      if (v24 != v25)
        free(v25);
      v26 = (__int128 *)*((_QWORD *)v24 - 12);
      if (v24 - 5 != v26)
        free(v26);
      v27 = v24 - 9;
      v24 -= 14;
    }
    while (v27 != v8);
  }
  if (v8)
LABEL_17:
    operator delete(v8);
  return v22;
}

_QWORD *sub_1C5181D20(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    if (a4 >= 0x124924924924925)
      abort();
    v6 = result;
    v7 = 28 * a4;
    result = operator new(224 * a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    while (a2 != a3)
    {
      v8 = sub_1C61F48A0((uint64_t)result, a2);
      a2 += 14;
      result = (_QWORD *)(v8 + 224);
    }
    v6[1] = result;
  }
  return result;
}

__n128 sub_1C5181DA8(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  char **v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  __n128 v69;
  uint64_t v70;
  char **v71;
  uint64_t v72;
  char **v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  char *v77;
  int v78;
  char *v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  __n128 *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  char **v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  __n128 v102;
  int v103;
  __n128 v104;
  int v105;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      v8 = *(a2 - 6);
      v9 = *(a2 - 5);
      v10 = a2 - 6;
      if (v8 == v9)
      {
        v11 = 0;
      }
      else
      {
        v11 = 0;
        v12 = *(a2 - 6);
        do
        {
          v11 += *(_DWORD *)(v12 + 32);
          v12 += 224;
        }
        while (v12 != v9);
      }
      v19 = *((_DWORD *)a2 - 4);
      v21 = *(_QWORD *)a1;
      v20 = *(_QWORD *)(a1 + 8);
      v22 = *(_DWORD *)(a1 + 32);
      if (*(_QWORD *)a1 == v20)
      {
        v23 = 0;
      }
      else
      {
        v23 = 0;
        v24 = *(_QWORD *)a1;
        do
        {
          v23 += *(_DWORD *)(v24 + 32);
          v24 += 224;
        }
        while (v24 != v20);
      }
      v63 = -1227133513 * ((unint64_t)(v9 - v8) >> 5) * v19;
      v64 = v11 + v19 + *((_DWORD *)a2 - 3);
      v38 = v63 >= v64;
      v65 = v63 - v64;
      if (!v38)
        v65 = 0;
      v66 = -1227133513 * ((unint64_t)(v20 - v21) >> 5) * v22;
      v67 = v23 + v22 + *(_DWORD *)(a1 + 36);
      v38 = v66 >= v67;
      v68 = v66 - v67;
      if (!v38)
        v68 = 0;
      if (v65 > v68)
      {
        v98 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        v104 = *(__n128 *)(a1 + 24);
        v105 = *(_DWORD *)(a1 + 40);
        sub_1C61F4950(a1);
        *(_OWORD *)v7 = *((_OWORD *)a2 - 3);
        *(_QWORD *)(v7 + 16) = *(a2 - 4);
        *v10 = 0;
        *(a2 - 5) = 0;
        *(a2 - 4) = 0;
        v99 = *(_OWORD *)(a2 - 3);
        *(_DWORD *)(v7 + 40) = *((_DWORD *)a2 - 2);
        *(_OWORD *)(v7 + 24) = v99;
        sub_1C61F4950((uint64_t)(a2 - 6));
        *(a2 - 6) = v21;
        *(a2 - 5) = v20;
        *(a2 - 4) = v98;
        result = v104;
        *(__n128 *)(a2 - 3) = v104;
        *((_DWORD *)a2 - 2) = v105;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((uint64_t *)a1 != a2)
      {
        v25 = (_QWORD *)(a1 + 48);
        if ((uint64_t *)(a1 + 48) != a2)
        {
          v26 = a1;
          do
          {
            v27 = v25;
            v28 = *(_QWORD *)(v26 + 56);
            v29 = *v25;
            if (*v25 == v28)
            {
              v30 = 0;
            }
            else
            {
              v30 = 0;
              v31 = *v25;
              do
              {
                v30 += *(_DWORD *)(v31 + 32);
                v31 += 224;
              }
              while (v31 != v28);
            }
            v32 = *(_QWORD *)(v26 + 8);
            if (*(_QWORD *)v26 == v32)
            {
              v33 = 0;
            }
            else
            {
              v33 = 0;
              v34 = *(_QWORD *)v26;
              do
              {
                v33 += *(_DWORD *)(v34 + 32);
                v34 += 224;
              }
              while (v34 != v32);
            }
            v35 = *(_DWORD *)(v26 + 80);
            v36 = -1227133513 * ((unint64_t)(v28 - v29) >> 5);
            v37 = v30 + v35 + *(_DWORD *)(v26 + 84);
            v38 = v35 * v36 >= v37;
            v39 = v35 * v36 - v37;
            if (!v38)
              v39 = 0;
            v40 = *(_DWORD *)(v26 + 32);
            v41 = -1227133513 * ((unint64_t)(v32 - *(_QWORD *)v26) >> 5) * v40;
            v42 = v33 + v40 + *(_DWORD *)(v26 + 36);
            v38 = v41 >= v42;
            v43 = v41 - v42;
            if (!v38)
              v43 = 0;
            if (v39 > v43)
            {
              v44 = *(_QWORD *)(v26 + 64);
              *(_QWORD *)(v26 + 56) = 0;
              *(_QWORD *)(v26 + 64) = 0;
              *v25 = 0;
              v100 = *(_QWORD *)(v26 + 72);
              v101 = v44;
              LODWORD(v44) = *(_DWORD *)(v26 + 80);
              result.n128_u64[0] = *(_QWORD *)(v26 + 84);
              v45 = v44 * v36;
              v102 = result;
              v103 = v44;
              v46 = result.n128_u32[0] + v44;
              v47 = (uint64_t)v25;
              while (1)
              {
                v48 = v26;
                sub_1C61F4950(v47);
                *(_OWORD *)v47 = *(_OWORD *)v48;
                *(_QWORD *)(v47 + 16) = *(_QWORD *)(v48 + 16);
                *(_QWORD *)v48 = 0;
                *(_QWORD *)(v48 + 8) = 0;
                *(_QWORD *)(v48 + 16) = 0;
                v49 = *(_OWORD *)(v48 + 24);
                *(_DWORD *)(v47 + 40) = *(_DWORD *)(v48 + 40);
                *(_OWORD *)(v47 + 24) = v49;
                if (v48 == v7)
                  break;
                if (v29 == v28)
                {
                  v50 = 0;
                }
                else
                {
                  v50 = 0;
                  v51 = v29;
                  do
                  {
                    v50 += *(_DWORD *)(v51 + 32);
                    v51 += 224;
                  }
                  while (v51 != v28);
                }
                v53 = *(_QWORD *)(v48 - 48);
                v52 = *(_QWORD *)(v48 - 40);
                if (v53 == v52)
                {
                  v54 = 0;
                }
                else
                {
                  v54 = 0;
                  v55 = *(_QWORD *)(v48 - 48);
                  do
                  {
                    v54 += *(_DWORD *)(v55 + 32);
                    v55 += 224;
                  }
                  while (v55 != v52);
                }
                v26 = v48 - 48;
                v56 = v46 + v50;
                v38 = v45 >= v56;
                v57 = v45 - v56;
                if (!v38)
                  v57 = 0;
                v58 = (unint64_t)(v52 - v53) >> 5;
                v59 = *(_DWORD *)(v48 - 16);
                LODWORD(v58) = -1227133513 * v58 * v59;
                v60 = v54 + v59 + *(_DWORD *)(v48 - 12);
                v38 = v58 >= v60;
                v61 = v58 - v60;
                if (!v38)
                  v61 = 0;
                v47 = v48;
                if (v57 <= v61)
                {
                  v62 = v48;
                  goto LABEL_52;
                }
              }
              v62 = v7;
LABEL_52:
              sub_1C61F4950(v62);
              *(_QWORD *)v62 = v29;
              *(_QWORD *)(v62 + 8) = v28;
              *(_QWORD *)(v62 + 16) = v101;
              *(_QWORD *)(v48 + 24) = v100;
              *(_DWORD *)(v62 + 32) = v103;
              result = v102;
              *(_QWORD *)(v62 + 36) = v102.n128_u64[0];
            }
            v25 = v27 + 6;
            v26 = (uint64_t)v27;
          }
          while (v27 + 6 != a2);
        }
      }
    }
    else
    {
      v15 = (char **)a4;
      v16 = a3 >> 1;
      v17 = (uint64_t *)(a1 + 48 * (a3 >> 1));
      v18 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v69 = sub_1C518243C((uint64_t *)a1, v17, v18, a4, result);
        v70 = (uint64_t)&v15[6 * v16];
        result.n128_u64[0] = sub_1C518243C((uint64_t *)(v7 + 48 * (a3 >> 1)), a2, a3 - (a3 >> 1), v70, v69).n128_u64[0];
        v71 = &v15[6 * a3];
        v72 = v70;
        v73 = v15;
        while ((char **)v72 != v71)
        {
          v74 = *(_QWORD *)(v72 + 8);
          if (*(_QWORD *)v72 == v74)
          {
            v75 = 0;
          }
          else
          {
            v75 = 0;
            v76 = *(_QWORD *)v72;
            do
            {
              v75 += *(_DWORD *)(v76 + 32);
              v76 += 224;
            }
            while (v76 != v74);
          }
          v77 = v73[1];
          if (*v73 == v77)
          {
            v78 = 0;
          }
          else
          {
            v78 = 0;
            v79 = *v73;
            do
            {
              v78 += *((_DWORD *)v79 + 8);
              v79 += 224;
            }
            while (v79 != v77);
          }
          v80 = *(_DWORD *)(v72 + 32);
          v81 = -1227133513 * ((unint64_t)(v74 - *(_QWORD *)v72) >> 5) * v80;
          v82 = v75 + v80 + *(_DWORD *)(v72 + 36);
          v38 = v81 >= v82;
          v83 = v81 - v82;
          if (v38)
            v84 = v83;
          else
            v84 = 0;
          v85 = *((_DWORD *)v73 + 8);
          v86 = -1227133513 * ((unint64_t)(v77 - *v73) >> 5) * v85;
          v87 = v78 + v85 + *((_DWORD *)v73 + 9);
          v38 = v86 >= v87;
          v88 = v86 - v87;
          if (v38)
            v89 = v88;
          else
            v89 = 0;
          sub_1C61F4950(v7);
          v90 = (__n128 *)(v7 + 24);
          if (v84 <= v89)
          {
            *(_OWORD *)v7 = *(_OWORD *)v73;
            *(_QWORD *)(v7 + 16) = v73[2];
            *v73 = 0;
            v73[1] = 0;
            v73[2] = 0;
            result = *(__n128 *)(v73 + 3);
            *(_DWORD *)(v7 + 40) = *((_DWORD *)v73 + 10);
            *v90 = result;
            v73 += 6;
          }
          else
          {
            *(_OWORD *)v7 = *(_OWORD *)v72;
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(v72 + 16);
            *(_QWORD *)v72 = 0;
            *(_QWORD *)(v72 + 8) = 0;
            *(_QWORD *)(v72 + 16) = 0;
            result = *(__n128 *)(v72 + 24);
            *(_DWORD *)(v7 + 40) = *(_DWORD *)(v72 + 40);
            *v90 = result;
            v72 += 48;
          }
          v7 += 48;
          if (v73 == (char **)v70)
          {
            if ((char **)v72 != v71)
            {
              v91 = 0;
              do
              {
                v92 = (_QWORD *)(v72 + v91);
                v93 = v7 + v91;
                sub_1C61F4950(v7 + v91);
                *(_OWORD *)v93 = *(_OWORD *)(v72 + v91);
                *(_QWORD *)(v93 + 16) = *(_QWORD *)(v72 + v91 + 16);
                *v92 = 0;
                v92[1] = 0;
                v92[2] = 0;
                result = *(__n128 *)(v72 + v91 + 24);
                *(_DWORD *)(v93 + 40) = *(_DWORD *)(v72 + v91 + 40);
                *(__n128 *)(v93 + 24) = result;
                v91 += 48;
              }
              while (v92 + 6 != v71);
            }
            goto LABEL_88;
          }
        }
        if (v73 != (char **)v70)
        {
          v94 = 0;
          do
          {
            v95 = &v73[v94];
            v96 = v7 + v94 * 8;
            sub_1C61F4950(v7 + v94 * 8);
            *(_OWORD *)v96 = *(_OWORD *)&v73[v94];
            *(_QWORD *)(v96 + 16) = v73[v94 + 2];
            *v95 = 0;
            v95[1] = 0;
            v95[2] = 0;
            result = *(__n128 *)&v73[v94 + 3];
            *(_DWORD *)(v96 + 40) = v73[v94 + 5];
            *(__n128 *)(v96 + 24) = result;
            v94 += 6;
          }
          while (v95 + 6 != (char **)v70);
        }
LABEL_88:
        if (v15)
        {
          v97 = a3;
          do
          {
            if (*v15)
            {
              sub_1C5181AD4((uint64_t)v15, *v15);
              operator delete(*v15);
            }
            v15 += 6;
            --v97;
          }
          while (v97);
        }
      }
      else
      {
        sub_1C5181DA8(a1, v17, v18, a4, a5);
        sub_1C5181DA8(v7 + 48 * (a3 >> 1), a2, a3 - (a3 >> 1), v15, a5);
        result.n128_u64[0] = sub_1C5182B34(v7, (char *)(v7 + 48 * (a3 >> 1)), (char *)a2, a3 >> 1, a3 - (a3 >> 1), v15, a5).n128_u64[0];
      }
    }
  }
  return result;
}

__n128 sub_1C518243C(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  uint64_t v5;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  __n128 *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  __n128 *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  _OWORD *v88;
  _QWORD *v89;
  __int128 v90;
  int v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;

  if (a3)
  {
    v5 = a4;
    v8 = a1;
    if (a3 == 2)
    {
      v10 = *(a2 - 6);
      v11 = *(a2 - 5);
      v9 = a2 - 6;
      if (v10 == v11)
      {
        v12 = 0;
      }
      else
      {
        v12 = 0;
        v13 = *(a2 - 6);
        do
        {
          v12 += *(_DWORD *)(v13 + 32);
          v13 += 224;
        }
        while (v13 != v11);
      }
      v74 = *((_DWORD *)a2 - 4);
      v76 = *a1;
      v75 = a1[1];
      v77 = *((_DWORD *)a1 + 8);
      if (*a1 == v75)
      {
        v78 = 0;
      }
      else
      {
        v78 = 0;
        v79 = *a1;
        do
        {
          v78 += *(_DWORD *)(v79 + 32);
          v79 += 224;
        }
        while (v79 != v75);
      }
      v80 = -1227133513 * ((unint64_t)(v11 - v10) >> 5) * v74;
      v81 = v12 + v74 + *((_DWORD *)a2 - 3);
      v29 = v80 >= v81;
      v82 = v80 - v81;
      if (v29)
        v83 = v82;
      else
        v83 = 0;
      v84 = -1227133513 * ((unint64_t)(v75 - v76) >> 5) * v77;
      v85 = v78 + v77 + *((_DWORD *)v8 + 9);
      v29 = v84 >= v85;
      v86 = v84 - v85;
      if (v29)
        v87 = v86;
      else
        v87 = 0;
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      v88 = (_OWORD *)(a4 + 24);
      v89 = (_QWORD *)(a4 + 48);
      if (v83 <= v87)
      {
        *(_OWORD *)a4 = *(_OWORD *)v8;
        *(_QWORD *)(a4 + 16) = v8[2];
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
        v92 = *(_OWORD *)(v8 + 3);
        *(_DWORD *)(a4 + 40) = *((_DWORD *)v8 + 10);
        *v88 = v92;
        *(_QWORD *)(a4 + 56) = 0;
        *(_QWORD *)(a4 + 64) = 0;
        *v89 = 0;
        *(_OWORD *)(a4 + 48) = *((_OWORD *)a2 - 3);
        *(_QWORD *)(a4 + 64) = *(a2 - 4);
        *v9 = 0;
        *(a2 - 5) = 0;
        *(a2 - 4) = 0;
        result = *(__n128 *)(a2 - 3);
        v91 = *((_DWORD *)a2 - 2);
      }
      else
      {
        *(_OWORD *)a4 = *((_OWORD *)a2 - 3);
        *(_QWORD *)(a4 + 16) = *(a2 - 4);
        *v9 = 0;
        *(a2 - 5) = 0;
        *(a2 - 4) = 0;
        v90 = *(_OWORD *)(a2 - 3);
        *(_DWORD *)(a4 + 40) = *((_DWORD *)a2 - 2);
        *v88 = v90;
        *(_QWORD *)(a4 + 56) = 0;
        *(_QWORD *)(a4 + 64) = 0;
        *v89 = 0;
        *(_OWORD *)(a4 + 48) = *(_OWORD *)v8;
        *(_QWORD *)(a4 + 64) = v8[2];
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
        result = *(__n128 *)(v8 + 3);
        v91 = *((_DWORD *)v8 + 10);
      }
      *(_DWORD *)(a4 + 88) = v91;
      *(__n128 *)(a4 + 72) = result;
    }
    else if (a3 == 1)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_OWORD *)a4 = *(_OWORD *)a1;
      *(_QWORD *)(a4 + 16) = a1[2];
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      result = *(__n128 *)(a1 + 3);
      *(_DWORD *)(a4 + 40) = *((_DWORD *)a1 + 10);
      *(__n128 *)(a4 + 24) = result;
    }
    else if ((uint64_t)a3 > 8)
    {
      v52 = &a1[6 * (a3 >> 1)];
      sub_1C5181DA8(a1, v52, a3 >> 1, a4, a3 >> 1);
      sub_1C5181DA8(&v8[6 * (a3 >> 1)], a2, a3 - (a3 >> 1), v5 + 48 * (a3 >> 1), a3 - (a3 >> 1));
      v53 = &v8[6 * (a3 >> 1)];
      while (v53 != a2)
      {
        v54 = v53[1];
        if (*v53 == v54)
        {
          v55 = 0;
        }
        else
        {
          v55 = 0;
          v56 = *v53;
          do
          {
            v55 += *(_DWORD *)(v56 + 32);
            v56 += 224;
          }
          while (v56 != v54);
        }
        v57 = v8[1];
        if (*v8 == v57)
        {
          v58 = 0;
        }
        else
        {
          v58 = 0;
          v59 = *v8;
          do
          {
            v58 += *(_DWORD *)(v59 + 32);
            v59 += 224;
          }
          while (v59 != v57);
        }
        v60 = *((_DWORD *)v53 + 8);
        v61 = -1227133513 * ((unint64_t)(v54 - *v53) >> 5) * v60;
        v62 = v55 + v60 + *((_DWORD *)v53 + 9);
        v29 = v61 >= v62;
        v63 = v61 - v62;
        if (v29)
          v64 = v63;
        else
          v64 = 0;
        v65 = *((_DWORD *)v8 + 8);
        v66 = -1227133513 * ((unint64_t)(v57 - *v8) >> 5) * v65;
        v67 = v58 + v65 + *((_DWORD *)v8 + 9);
        v29 = v66 >= v67;
        v68 = v66 - v67;
        if (v29)
          v69 = v68;
        else
          v69 = 0;
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        *(_QWORD *)(v5 + 16) = 0;
        v70 = (__n128 *)(v5 + 24);
        if (v64 <= v69)
        {
          *(_OWORD *)v5 = *(_OWORD *)v8;
          *(_QWORD *)(v5 + 16) = v8[2];
          *v8 = 0;
          v8[1] = 0;
          v8[2] = 0;
          result = *(__n128 *)(v8 + 3);
          *(_DWORD *)(v5 + 40) = *((_DWORD *)v8 + 10);
          *v70 = result;
          v8 += 6;
        }
        else
        {
          *(_OWORD *)v5 = *(_OWORD *)v53;
          *(_QWORD *)(v5 + 16) = v53[2];
          *v53 = 0;
          v53[1] = 0;
          v53[2] = 0;
          result = *(__n128 *)(v53 + 3);
          *(_DWORD *)(v5 + 40) = *((_DWORD *)v53 + 10);
          *v70 = result;
          v53 += 6;
        }
        v5 += 48;
        if (v8 == v52)
        {
          if (v53 != a2)
          {
            v71 = 0;
            do
            {
              v72 = &v53[v71];
              v73 = v5 + v71 * 8;
              *(_QWORD *)v73 = 0;
              *(_QWORD *)(v73 + 8) = 0;
              *(_QWORD *)(v73 + 16) = 0;
              *(_OWORD *)v73 = *(_OWORD *)&v53[v71];
              *(_QWORD *)(v73 + 16) = v53[v71 + 2];
              *v72 = 0;
              v72[1] = 0;
              v72[2] = 0;
              result = *(__n128 *)&v53[v71 + 3];
              *(_DWORD *)(v73 + 40) = v53[v71 + 5];
              *(__n128 *)(v73 + 24) = result;
              v71 += 6;
            }
            while (v72 + 6 != a2);
          }
          return result;
        }
      }
      if (v8 != v52)
      {
        v93 = 0;
        do
        {
          v94 = v5 + v93 * 8;
          v95 = &v8[v93];
          *(_QWORD *)v94 = 0;
          *(_QWORD *)(v94 + 8) = 0;
          *(_QWORD *)(v94 + 16) = 0;
          *(_OWORD *)v94 = *(_OWORD *)&v8[v93];
          *(_QWORD *)(v94 + 16) = v8[v93 + 2];
          *v95 = 0;
          v95[1] = 0;
          v95[2] = 0;
          result = *(__n128 *)&v8[v93 + 3];
          *(_DWORD *)(v94 + 40) = v8[v93 + 5];
          *(__n128 *)(v94 + 24) = result;
          v93 += 6;
        }
        while (v95 + 6 != v52);
      }
    }
    else if (a1 != a2)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_OWORD *)a4 = *(_OWORD *)a1;
      *(_QWORD *)(a4 + 16) = a1[2];
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      result = *(__n128 *)(a1 + 3);
      *(_DWORD *)(a4 + 40) = *((_DWORD *)a1 + 10);
      *(__n128 *)(a4 + 24) = result;
      v14 = a1 + 6;
      if (a1 + 6 != a2)
      {
        v15 = a4;
        do
        {
          v16 = v14;
          v18 = v8 + 7;
          v17 = v8[7];
          if (*v16 == v17)
          {
            v19 = 0;
          }
          else
          {
            v19 = 0;
            v20 = *v16;
            do
            {
              v19 += *(_DWORD *)(v20 + 32);
              v20 += 224;
            }
            while (v20 != v17);
          }
          v22 = *(_QWORD *)v15;
          v21 = *(_QWORD *)(v15 + 8);
          if (*(_QWORD *)v15 == v21)
          {
            v23 = 0;
          }
          else
          {
            v23 = 0;
            v24 = *(_QWORD *)v15;
            do
            {
              v23 += *(_DWORD *)(v24 + 32);
              v24 += 224;
            }
            while (v24 != v21);
          }
          v25 = (_QWORD *)(v15 + 48);
          v26 = *((_DWORD *)v8 + 20);
          v27 = -1227133513 * ((unint64_t)(v17 - *v16) >> 5) * v26;
          v28 = v19 + v26 + *((_DWORD *)v8 + 21);
          v29 = v27 >= v28;
          v30 = v27 - v28;
          if (!v29)
            v30 = 0;
          v31 = *(_DWORD *)(v15 + 32);
          v32 = -1227133513 * ((unint64_t)(v21 - v22) >> 5) * v31;
          v33 = v23 + v31 + *(_DWORD *)(v15 + 36);
          v29 = v32 >= v33;
          v34 = v32 - v33;
          if (!v29)
            v34 = 0;
          if (v30 > v34)
          {
            *(_QWORD *)(v15 + 48) = v22;
            *(_QWORD *)(v15 + 56) = v21;
            *(_QWORD *)(v15 + 64) = *(_QWORD *)(v15 + 16);
            *(_QWORD *)v15 = 0;
            *(_QWORD *)(v15 + 8) = 0;
            *(_QWORD *)(v15 + 16) = 0;
            *(_OWORD *)(v15 + 72) = *(_OWORD *)(v15 + 24);
            v36 = v5;
            *(_DWORD *)(v15 + 88) = *(_DWORD *)(v15 + 40);
            if (v15 != v5)
            {
              while (1)
              {
                v37 = v8[7];
                if (*v16 == v37)
                {
                  v38 = 0;
                }
                else
                {
                  v38 = 0;
                  v39 = *v16;
                  do
                  {
                    v38 += *(_DWORD *)(v39 + 32);
                    v39 += 224;
                  }
                  while (v39 != v37);
                }
                v41 = *(_QWORD *)(v15 - 48);
                v40 = *(_QWORD *)(v15 - 40);
                if (v41 == v40)
                {
                  v42 = 0;
                }
                else
                {
                  v42 = 0;
                  v43 = *(_QWORD *)(v15 - 48);
                  do
                  {
                    v42 += *(_DWORD *)(v43 + 32);
                    v43 += 224;
                  }
                  while (v43 != v40);
                }
                v44 = *((_DWORD *)v8 + 20);
                v45 = -1227133513 * ((unint64_t)(v37 - *v16) >> 5) * v44;
                v46 = v38 + v44 + *((_DWORD *)v8 + 21);
                v29 = v45 >= v46;
                v47 = v45 - v46;
                if (!v29)
                  v47 = 0;
                v48 = *(_DWORD *)(v15 - 16);
                v49 = -1227133513 * ((unint64_t)(v40 - v41) >> 5) * v48;
                v50 = v42 + v48 + *(_DWORD *)(v15 - 12);
                v29 = v49 >= v50;
                v51 = v49 - v50;
                if (!v29)
                  v51 = 0;
                if (v47 <= v51)
                  break;
                sub_1C61F4950(v15);
                *(_OWORD *)v15 = *(_OWORD *)(v15 - 48);
                *(_QWORD *)(v15 + 16) = *(_QWORD *)(v15 - 32);
                *(_QWORD *)(v15 - 40) = 0;
                *(_QWORD *)(v15 - 32) = 0;
                *(_OWORD *)(v15 + 24) = *(_OWORD *)(v15 - 24);
                *(_DWORD *)(v15 + 40) = *(_DWORD *)(v15 - 8);
                v15 -= 48;
                *(_QWORD *)v15 = 0;
                if (v15 == v5)
                {
                  v36 = v5;
                  goto LABEL_48;
                }
              }
              v36 = v15;
            }
LABEL_48:
            sub_1C61F4950(v36);
            *(_OWORD *)v36 = *(_OWORD *)v16;
            *(_QWORD *)(v36 + 16) = v8[8];
            *v18 = 0;
            v8[8] = 0;
            *v16 = 0;
            v35 = (__n128 *)(v36 + 24);
          }
          else
          {
            *v25 = 0;
            *(_QWORD *)(v15 + 56) = 0;
            *(_QWORD *)(v15 + 64) = 0;
            *(_OWORD *)(v15 + 48) = *(_OWORD *)v16;
            *(_QWORD *)(v15 + 64) = v8[8];
            *v18 = 0;
            v8[8] = 0;
            *v16 = 0;
            v35 = (__n128 *)(v15 + 72);
          }
          result = *(__n128 *)(v8 + 9);
          v35[1].n128_u32[0] = *((_DWORD *)v8 + 22);
          *v35 = result;
          v14 = v16 + 6;
          v15 = (uint64_t)v25;
          v8 = v16;
        }
        while (v16 + 6 != a2);
      }
    }
  }
  return result;
}

__n128 sub_1C5182B34(uint64_t a1, char *a2, char *a3, uint64_t a4, uint64_t a5, char **a6, uint64_t a7)
{
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  char *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unsigned int v61;
  int v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  __n128 result;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char **v96;
  char *v97;
  char *v98;
  char **v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  char **v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  char **v119;
  char **v120;
  char **v121;
  unint64_t v122;
  char **v123;
  _QWORD *v124;
  char **v125;
  char **v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  char *v130;
  int v131;
  char *v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  char *v143;
  __n128 *v144;
  char *v145;
  uint64_t v146;
  char **v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char **v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  char **v157;
  char **v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __n128 v168;
  int v169;
  int v170;
  int v171;

  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4)
        return result;
      v12 = *((_QWORD *)a2 + 1);
      v13 = *((_DWORD *)a2 + 8);
      v14 = -1227133513 * ((unint64_t)(v12 - *(_QWORD *)a2) >> 5) * v13;
      v15 = *((_DWORD *)a2 + 9) + v13;
      while (1)
      {
        if (*(_QWORD *)a2 == v12)
        {
          v16 = 0;
        }
        else
        {
          v16 = 0;
          v17 = *(_QWORD *)a2;
          do
          {
            v16 += *(_DWORD *)(v17 + 32);
            v17 += 224;
          }
          while (v17 != v12);
        }
        v19 = *(_QWORD *)a1;
        v18 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)a1 == v18)
        {
          v20 = 0;
        }
        else
        {
          v20 = 0;
          v21 = *(_QWORD *)a1;
          do
          {
            v20 += *(_DWORD *)(v21 + 32);
            v21 += 224;
          }
          while (v21 != v18);
        }
        v22 = v15 + v16;
        v23 = v14 >= v22;
        v24 = v14 - v22;
        if (!v23)
          v24 = 0;
        v25 = *(_DWORD *)(a1 + 32);
        v26 = -1227133513 * ((unint64_t)(v18 - v19) >> 5) * v25;
        v27 = v20 + v25 + *(_DWORD *)(a1 + 36);
        v23 = v26 >= v27;
        v28 = v26 - v27;
        if (!v23)
          v28 = 0;
        if (v24 > v28)
          break;
        a1 += 48;
        if (!--a4)
          return result;
      }
      if (a4 >= a5)
      {
        if (a4 == 1)
        {
          v152 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          v168 = *(__n128 *)(a1 + 24);
          v171 = *(_DWORD *)(a1 + 40);
          v153 = (uint64_t)a2;
          sub_1C61F4950(a1);
          *(_OWORD *)a1 = *(_OWORD *)v153;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v153 + 16);
          *(_QWORD *)v153 = 0;
          *(_QWORD *)(v153 + 8) = 0;
          *(_QWORD *)(v153 + 16) = 0;
          v154 = *(_OWORD *)(v153 + 24);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(v153 + 40);
          *(_OWORD *)(a1 + 24) = v154;
          sub_1C61F4950(v153);
          *(_QWORD *)v153 = v19;
          *(_QWORD *)(v153 + 8) = v18;
          *(_QWORD *)(v153 + 16) = v152;
          result = v168;
          *(__n128 *)(v153 + 24) = v168;
          *(_DWORD *)(v153 + 40) = v171;
          return result;
        }
        if (a4 >= 0)
          v54 = a4;
        else
          v54 = a4 + 1;
        v55 = v54 >> 1;
        v39 = (char *)(a1 + 48 * (v54 >> 1));
        v31 = a3;
        if (a3 != a2)
        {
          v56 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 4);
          v57 = *((_QWORD *)v39 + 1);
          v58 = a1 + 48 * v55;
          v59 = *(_DWORD *)(v58 + 32);
          v60 = *(_DWORD *)(v58 + 36);
          v61 = -1227133513 * ((unint64_t)(v57 - *(_QWORD *)v39) >> 5) * v59;
          v62 = v60 + v59;
          v31 = a2;
          do
          {
            v63 = v56 >> 1;
            v64 = &v31[48 * (v56 >> 1)];
            v65 = *((_QWORD *)v64 + 1);
            if (*(_QWORD *)v64 == v65)
            {
              v66 = 0;
            }
            else
            {
              v66 = 0;
              v67 = *(_QWORD *)v64;
              do
              {
                v66 += *(_DWORD *)(v67 + 32);
                v67 += 224;
              }
              while (v67 != v65);
            }
            if (*(_QWORD *)v39 == v57)
            {
              v68 = 0;
            }
            else
            {
              v68 = 0;
              v69 = *(_QWORD *)v39;
              do
              {
                v68 += *(_DWORD *)(v69 + 32);
                v69 += 224;
              }
              while (v69 != v57);
            }
            v70 = *((_DWORD *)v64 + 8);
            v71 = -1227133513 * ((unint64_t)(v65 - *(_QWORD *)v64) >> 5) * v70;
            v72 = v66 + v70 + *(_DWORD *)&v31[48 * v63 + 36];
            v23 = v71 >= v72;
            v73 = v71 - v72;
            if (!v23)
              v73 = 0;
            v74 = v61 - (v62 + v68);
            if (v61 < v62 + v68)
              v74 = 0;
            v75 = v64 + 48;
            v56 += ~v63;
            if (v73 > v74)
              v31 = v75;
            else
              v56 = v63;
          }
          while (v56);
        }
        v30 = 0xAAAAAAAAAAAAAAABLL * ((v31 - a2) >> 4);
      }
      else
      {
        if (a5 >= 0)
          v29 = a5;
        else
          v29 = a5 + 1;
        v30 = v29 >> 1;
        v31 = &a2[48 * (v29 >> 1)];
        if (a2 == (char *)a1)
        {
          v39 = a2;
        }
        else
        {
          v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a2[-a1] >> 4);
          v33 = *((_QWORD *)v31 + 1);
          v34 = &a2[48 * v30];
          v35 = *((_DWORD *)v34 + 8);
          v36 = *((_DWORD *)v34 + 9);
          v37 = -1227133513 * ((unint64_t)(v33 - *(_QWORD *)v31) >> 5) * v35;
          v38 = v36 + v35;
          v39 = (char *)a1;
          do
          {
            if (*(_QWORD *)v31 == v33)
            {
              v40 = 0;
            }
            else
            {
              v40 = 0;
              v41 = *(_QWORD *)v31;
              do
              {
                v40 += *(_DWORD *)(v41 + 32);
                v41 += 224;
              }
              while (v41 != v33);
            }
            v42 = v32 >> 1;
            v43 = (uint64_t *)&v39[48 * (v32 >> 1)];
            v44 = v43[1];
            if (*v43 == v44)
            {
              v45 = 0;
            }
            else
            {
              v45 = 0;
              v46 = *v43;
              do
              {
                v45 += *(_DWORD *)(v46 + 32);
                v46 += 224;
              }
              while (v46 != v44);
            }
            v47 = *(_DWORD *)&v39[48 * v42 + 32];
            v48 = v38 + v40;
            v23 = v37 >= v48;
            v49 = v37 - v48;
            if (!v23)
              v49 = 0;
            v50 = -1227133513 * ((unint64_t)(v44 - *v43) >> 5) * v47;
            v51 = v45 + v47 + *(_DWORD *)&v39[48 * v42 + 36];
            v23 = v50 >= v51;
            v52 = v50 - v51;
            if (!v23)
              v52 = 0;
            v53 = (char *)(v43 + 6);
            v32 += ~v42;
            if (v49 > v52)
              v32 = v42;
            else
              v39 = v53;
          }
          while (v32);
        }
        v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v39[-a1] >> 4);
      }
      v76 = v31;
      if (v39 != a2)
      {
        v76 = v39;
        if (a2 != v31)
        {
          v159 = v55;
          v160 = a5;
          v155 = v30;
          v156 = a7;
          v157 = a6;
          v161 = a3;
          v162 = v39 + 48;
          v77 = (uint64_t)v39;
          v78 = (uint64_t)a2;
          v79 = (uint64_t)a2;
          while (1)
          {
            v80 = *(_QWORD *)(v77 + 16);
            v81 = *(_OWORD *)v77;
            *(_QWORD *)(v77 + 8) = 0;
            *(_QWORD *)(v77 + 16) = 0;
            *(_QWORD *)v77 = 0;
            v163 = v81;
            v166 = *(_OWORD *)(v77 + 24);
            v169 = *(_DWORD *)(v77 + 40);
            sub_1C61F4950(v77);
            *(_OWORD *)v77 = *(_OWORD *)v79;
            *(_QWORD *)(v77 + 16) = *(_QWORD *)(v79 + 16);
            *(_QWORD *)v79 = 0;
            *(_QWORD *)(v79 + 8) = 0;
            *(_QWORD *)(v79 + 16) = 0;
            v82 = *(_OWORD *)(v79 + 24);
            *(_DWORD *)(v77 + 40) = *(_DWORD *)(v79 + 40);
            *(_OWORD *)(v77 + 24) = v82;
            sub_1C61F4950(v79);
            *(_OWORD *)v79 = v163;
            *(_QWORD *)(v79 + 16) = v80;
            *(_DWORD *)(v79 + 40) = v169;
            *(_OWORD *)(v79 + 24) = v166;
            v77 += 48;
            v79 += 48;
            if ((char *)v79 == v31)
              break;
            if (v77 == v78)
              v78 = v79;
            v162 += 48;
          }
          a5 = v160;
          a3 = v161;
          v55 = v159;
          if (v77 == v78)
          {
            a7 = v156;
            a6 = v157;
            v30 = v155;
          }
          else
          {
            v83 = v78;
            do
            {
              while (1)
              {
                v84 = *(_QWORD *)(v77 + 16);
                v85 = *(_OWORD *)v77;
                *(_QWORD *)(v77 + 8) = 0;
                *(_QWORD *)(v77 + 16) = 0;
                *(_QWORD *)v77 = 0;
                v170 = *(_DWORD *)(v77 + 40);
                v164 = v85;
                v167 = *(_OWORD *)(v77 + 24);
                sub_1C61F4950(v77);
                *(_OWORD *)v77 = *(_OWORD *)v83;
                *(_QWORD *)(v77 + 16) = *(_QWORD *)(v83 + 16);
                *(_QWORD *)v83 = 0;
                *(_QWORD *)(v83 + 8) = 0;
                *(_QWORD *)(v83 + 16) = 0;
                v86 = *(_OWORD *)(v83 + 24);
                *(_DWORD *)(v77 + 40) = *(_DWORD *)(v83 + 40);
                *(_OWORD *)(v77 + 24) = v86;
                sub_1C61F4950(v83);
                *(_OWORD *)v83 = v164;
                *(_QWORD *)(v83 + 16) = v84;
                *(_OWORD *)(v83 + 24) = v167;
                *(_DWORD *)(v83 + 40) = v170;
                v77 += 48;
                v83 += 48;
                if ((char *)v83 == v31)
                  break;
                if (v77 == v78)
                  v78 = v83;
              }
              v83 = v78;
            }
            while (v77 != v78);
            a7 = v156;
            a6 = v157;
            a5 = v160;
            a3 = v161;
            v30 = v155;
            v55 = v159;
          }
          v76 = v162;
        }
      }
      a4 -= v55;
      v87 = a5 - v30;
      if (v55 + v30 >= a4 + v87)
      {
        v92 = a3;
        a3 = v76;
        v93 = a4;
        a4 = v55;
        sub_1C5182B34(v76, v31, v92, v93);
        v31 = v39;
        a5 = v30;
      }
      else
      {
        v88 = a1;
        v89 = v39;
        a1 = (uint64_t)v76;
        v90 = v87;
        sub_1C5182B34(v88, v89, v76, v55);
        a5 = v90;
      }
      a2 = v31;
      if (!a5)
        return result;
    }
    if (a4 <= a5)
    {
      if ((char *)a1 == a2)
        return result;
      v122 = 0;
      v95 = 0;
      do
      {
        v123 = &a6[v122 / 8];
        v124 = (_QWORD *)(a1 + v122);
        *v123 = 0;
        v123[1] = 0;
        v123[2] = 0;
        *(_OWORD *)v123 = *(_OWORD *)(a1 + v122);
        v123[2] = *(char **)(a1 + v122 + 16);
        *v124 = 0;
        v124[1] = 0;
        v124[2] = 0;
        result = *(__n128 *)(a1 + v122 + 24);
        *((_DWORD *)v123 + 10) = *(_DWORD *)(a1 + v122 + 40);
        *(__n128 *)(v123 + 3) = result;
        ++v95;
        v122 += 48;
      }
      while (v124 + 6 != (_QWORD *)a2);
      if (v122)
      {
        v125 = &a6[v122 / 8];
        v165 = (uint64_t)&a6[v122 / 8 - 6];
        v126 = a6;
        while (a2 != a3)
        {
          v127 = *((_QWORD *)a2 + 1);
          if (*(_QWORD *)a2 == v127)
          {
            v128 = 0;
          }
          else
          {
            v128 = 0;
            v129 = *(_QWORD *)a2;
            do
            {
              v128 += *(_DWORD *)(v129 + 32);
              v129 += 224;
            }
            while (v129 != v127);
          }
          v130 = v126[1];
          if (*v126 == v130)
          {
            v131 = 0;
          }
          else
          {
            v131 = 0;
            v132 = *v126;
            do
            {
              v131 += *((_DWORD *)v132 + 8);
              v132 += 224;
            }
            while (v132 != v130);
          }
          v133 = *((_DWORD *)a2 + 8);
          v134 = -1227133513 * ((unint64_t)(v127 - *(_QWORD *)a2) >> 5) * v133;
          v135 = v128 + v133 + *((_DWORD *)a2 + 9);
          v23 = v134 >= v135;
          v136 = v134 - v135;
          if (v23)
            v137 = v136;
          else
            v137 = 0;
          v138 = *((_DWORD *)v126 + 8);
          v139 = -1227133513 * ((unint64_t)(v130 - *v126) >> 5) * v138;
          v140 = v131 + v138 + *((_DWORD *)v126 + 9);
          v23 = v139 >= v140;
          v141 = v139 - v140;
          if (v23)
            v142 = v141;
          else
            v142 = 0;
          v143 = a2;
          sub_1C61F4950(a1);
          v144 = (__n128 *)(a1 + 24);
          if (v137 <= v142)
          {
            *(_OWORD *)a1 = *(_OWORD *)v126;
            *(_QWORD *)(a1 + 16) = v126[2];
            *v126 = 0;
            v126[1] = 0;
            v126[2] = 0;
            result = *(__n128 *)(v126 + 3);
            *(_DWORD *)(a1 + 40) = *((_DWORD *)v126 + 10);
            *v144 = result;
            v126 += 6;
            a2 = v143;
          }
          else
          {
            *(_OWORD *)a1 = *(_OWORD *)v143;
            *(_QWORD *)(a1 + 16) = *((_QWORD *)v143 + 2);
            *(_QWORD *)v143 = 0;
            *((_QWORD *)v143 + 1) = 0;
            *((_QWORD *)v143 + 2) = 0;
            result = *(__n128 *)(v143 + 24);
            *(_DWORD *)(a1 + 40) = *((_DWORD *)v143 + 10);
            *v144 = result;
            a2 = v143 + 48;
          }
          a1 += 48;
          if (v125 == v126)
            goto LABEL_163;
        }
        if (v125 != v126)
        {
          v149 = 0;
          do
          {
            v150 = a1 + v149 * 8;
            v151 = &v126[v149];
            sub_1C61F4950(a1 + v149 * 8);
            *(_OWORD *)v150 = *(_OWORD *)&v126[v149];
            *(_QWORD *)(v150 + 16) = v126[v149 + 2];
            *v151 = 0;
            v151[1] = 0;
            v151[2] = 0;
            result = *(__n128 *)&v126[v149 + 3];
            *(_DWORD *)(v150 + 40) = v126[v149 + 5];
            *(__n128 *)(v150 + 24) = result;
            v149 += 6;
          }
          while ((char **)v165 != v151);
        }
      }
    }
    else
    {
      if (a2 == a3)
        return result;
      v94 = 0;
      v95 = 0;
      do
      {
        v96 = &a6[v94 / 8];
        v97 = &a2[v94];
        *v96 = 0;
        v96[1] = 0;
        v96[2] = 0;
        *(_OWORD *)v96 = *(_OWORD *)&a2[v94];
        v96[2] = *(char **)&a2[v94 + 16];
        *(_QWORD *)v97 = 0;
        *((_QWORD *)v97 + 1) = 0;
        *((_QWORD *)v97 + 2) = 0;
        result = *(__n128 *)&a2[v94 + 24];
        *((_DWORD *)v96 + 10) = *(_DWORD *)&a2[v94 + 40];
        *(__n128 *)(v96 + 3) = result;
        ++v95;
        v94 += 48;
      }
      while (v97 + 48 != a3);
      if (v94)
      {
        v98 = a3;
        v99 = &a6[v94 / 8];
        v158 = a6;
        while (a2 != (char *)a1)
        {
          v100 = (uint64_t)*(v99 - 6);
          v101 = (uint64_t)*(v99 - 5);
          if (v100 == v101)
          {
            v102 = 0;
          }
          else
          {
            v102 = 0;
            v103 = (uint64_t)*(v99 - 6);
            do
            {
              v102 += *(_DWORD *)(v103 + 32);
              v103 += 224;
            }
            while (v103 != v101);
          }
          v105 = *((_QWORD *)a2 - 6);
          v104 = *((_QWORD *)a2 - 5);
          if (v105 == v104)
          {
            v106 = 0;
          }
          else
          {
            v106 = 0;
            v107 = *((_QWORD *)a2 - 6);
            do
            {
              v106 += *(_DWORD *)(v107 + 32);
              v107 += 224;
            }
            while (v107 != v104);
          }
          v108 = (char **)(a2 - 48);
          v109 = *((_DWORD *)v99 - 4);
          v110 = -1227133513 * ((unint64_t)(v101 - v100) >> 5) * v109;
          v111 = v102 + v109 + *((_DWORD *)v99 - 3);
          v23 = v110 >= v111;
          v112 = v110 - v111;
          if (v23)
            v113 = v112;
          else
            v113 = 0;
          v114 = *((_DWORD *)a2 - 4);
          v115 = -1227133513 * ((unint64_t)(v104 - v105) >> 5) * v114;
          v116 = v106 + v114 + *((_DWORD *)a2 - 3);
          v23 = v115 >= v116;
          v117 = v115 - v116;
          if (v23)
            v118 = v117;
          else
            v118 = 0;
          v119 = (char **)a2;
          sub_1C61F4950((uint64_t)(v98 - 48));
          if (v113 <= v118)
            v120 = v99;
          else
            v120 = v119;
          if (v113 <= v118)
            v121 = v99 - 6;
          else
            v121 = v108;
          if (v113 <= v118)
            a2 = (char *)v119;
          else
            a2 = (char *)v108;
          if (v113 <= v118)
            v99 -= 6;
          *((_QWORD *)v98 - 6) = *(v120 - 6);
          *((_QWORD *)v98 - 5) = *(v120 - 5);
          *((_QWORD *)v98 - 4) = *(v120 - 4);
          *v121 = 0;
          v121[1] = 0;
          v121[2] = 0;
          result = *(__n128 *)(v120 - 3);
          *((_DWORD *)v98 - 2) = *((_DWORD *)v120 - 2);
          *(__n128 *)(v98 - 24) = result;
          v98 -= 48;
          a6 = v158;
          if (v99 == v158)
            goto LABEL_163;
        }
        if (v99 != a6)
        {
          v145 = v98;
          v146 = 0;
          do
          {
            v147 = &v99[v146];
            v148 = &v145[v146 * 8];
            sub_1C61F4950((uint64_t)&v145[v146 * 8 - 48]);
            *((_OWORD *)v148 - 3) = *(_OWORD *)&v99[v146 - 6];
            *((_QWORD *)v148 - 4) = v99[v146 - 4];
            *(v147 - 6) = 0;
            *(v147 - 5) = 0;
            *(v147 - 4) = 0;
            result = *(__n128 *)&v99[v146 - 3];
            *((_DWORD *)v148 - 2) = v99[v146 - 1];
            *(__n128 *)(v148 - 24) = result;
            v146 -= 6;
          }
          while (&v99[v146] != a6);
        }
      }
    }
LABEL_163:
    if (a6)
    {
      do
      {
        if (*a6)
        {
          sub_1C5181AD4((uint64_t)a6, *a6);
          operator delete(*a6);
        }
        a6 += 6;
        --v95;
      }
      while (v95);
    }
  }
  return result;
}

uint64_t sub_1C5183588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  void **v10;
  void *v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void **v19;
  uint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v30;

  if (a1 != a2)
  {
    v4 = 0;
    v5 = a1;
    v30 = a3;
    while (1)
    {
      v6 = a1 + v4;
      v7 = a3 + v4;
      v8 = *(_OWORD *)(a1 + v4);
      v9 = *(_OWORD *)(a1 + v4 + 16);
      *(_DWORD *)(v7 + 32) = *(_DWORD *)(a1 + v4 + 32);
      *(_OWORD *)v7 = v8;
      *(_OWORD *)(v7 + 16) = v9;
      *(_QWORD *)(v7 + 40) = *(_QWORD *)(a1 + v4 + 40);
      if (a3 != a1)
        break;
LABEL_15:
      *(_DWORD *)(v7 + 192) = *(_DWORD *)(v6 + 192);
      v24 = *(_OWORD *)(v6 + 200);
      *(_DWORD *)(v7 + 216) = *(_DWORD *)(v6 + 216);
      *(_OWORD *)(v7 + 200) = v24;
      v4 += 224;
      v5 = v6 + 224;
      if (v6 + 224 == a2)
      {
        a3 += v4;
        return a3;
      }
    }
    v10 = (void **)(v7 + 48);
    v11 = *(void **)(v6 + 48);
    if ((void *)(v6 + 64) != v11)
    {
      v27 = a3 + v4;
      if ((void *)(a3 + v4 + 64) != *v10)
      {
        free(*v10);
        a3 = v30;
        v11 = *(void **)(v6 + 48);
      }
      *v10 = v11;
      v13 = (_DWORD *)(v5 + 56);
      *(_QWORD *)(v27 + 56) = *(_QWORD *)(a1 + v4 + 56);
      *(_QWORD *)(v6 + 48) = v6 + 64;
      *(_DWORD *)(a1 + v4 + 60) = 0;
LABEL_9:
      *v13 = 0;
      v16 = a1 + v4;
      v17 = a3 + v4;
      *(_DWORD *)(v17 + 112) = *(_DWORD *)(a1 + v4 + 112);
      v18 = *(void **)(a1 + v4 + 128);
      *(_QWORD *)(v17 + 120) = *(_QWORD *)(a1 + v4 + 120);
      v19 = (void **)(a3 + v4 + 128);
      v20 = a1 + v4 + 144;
      if ((void *)v20 != v18)
      {
        if ((void *)(v17 + 144) != *v19)
        {
          free(*v19);
          a3 = v30;
          v18 = *(void **)(v16 + 128);
        }
        *v19 = v18;
        v21 = (_DWORD *)(v5 + 136);
        *(_QWORD *)(a3 + v4 + 136) = *(_QWORD *)(a1 + v4 + 136);
        *(_QWORD *)(v16 + 128) = v20;
        *(_DWORD *)(a1 + v4 + 140) = 0;
        goto LABEL_14;
      }
      v21 = (_DWORD *)(v16 + 136);
      v22 = *(unsigned int *)(v16 + 136);
      v23 = *(unsigned int *)(v17 + 136);
      if (v23 >= v22)
      {
        if ((_DWORD)v22)
        {
          memmove(*v19, v18, 8 * v22);
          a3 = v30;
        }
        *(_DWORD *)(v17 + 136) = v22;
LABEL_14:
        *v21 = 0;
        goto LABEL_15;
      }
      if (*(_DWORD *)(a3 + v4 + 140) < v22)
      {
        *(_DWORD *)(v17 + 136) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + v4 + 128, a3 + v4 + 144, v22, 8);
      }
      else if ((_DWORD)v23)
      {
        memmove(*v19, v18, 8 * v23);
        goto LABEL_26;
      }
      v23 = 0;
LABEL_26:
      v26 = *v21;
      if (v23 != v26)
        memcpy((char *)*v19 + 8 * v23, (const void *)(*(_QWORD *)(v16 + 128) + 8 * v23), 8 * v26 - 8 * v23);
      *(_DWORD *)(v17 + 136) = v22;
      a3 = v30;
      goto LABEL_14;
    }
    v13 = (_DWORD *)(a1 + v4 + 56);
    v12 = *v13;
    v14 = a3 + v4;
    v15 = *(unsigned int *)(a3 + v4 + 56);
    if (v15 >= v12)
    {
      if ((_DWORD)v12)
      {
        memmove(*v10, v11, 8 * v12);
        a3 = v30;
      }
      *(_DWORD *)(v14 + 56) = v12;
      goto LABEL_9;
    }
    if (*(_DWORD *)(v14 + 60) < v12)
    {
      *(_DWORD *)(v14 + 56) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7 + 48, a3 + v4 + 64, v12, 8);
    }
    else if ((_DWORD)v15)
    {
      memmove(*v10, v11, 8 * v15);
      goto LABEL_20;
    }
    v15 = 0;
LABEL_20:
    v25 = *v13;
    if (v15 != v25)
      memcpy((char *)*v10 + 8 * v15, (const void *)(*(_QWORD *)(v6 + 48) + 8 * v15), 8 * v25 - 8 * v15);
    *(_DWORD *)(v14 + 56) = v12;
    a3 = v30;
    goto LABEL_9;
  }
  return a3;
}

unsigned __int8 **LLVMBuildRetVoid_0(uint64_t *a1)
{
  _QWORD *v2;
  char *v3;
  _BYTE v5[32];
  __int16 v6;

  v2 = (_QWORD *)a1[8];
  v3 = (char *)operator new(0x40uLL);
  *(_QWORD *)v3 = *v2 + 1576;
  *((_QWORD *)v3 + 1) = 0;
  v3[16] = 29;
  *(_OWORD *)(v3 + 44) = 0u;
  *(_OWORD *)(v3 + 33) = 0u;
  *(_OWORD *)(v3 + 17) = 0u;
  v6 = 257;
  return sub_1C4867F8C(a1, (unsigned __int8 **)v3, (uint64_t)v5);
}

uint64_t sub_1C51838C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)a1 + v3);
        if (v5)
          v6 = v5 == -8;
        else
          v6 = 1;
        if (!v6)
          MEMORY[0x1CAA32FB4]();
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_1C5183938()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C517D698(v0);
}

uint64_t sub_1C5183960()
{
  __n128 v1;
  int v2;
  int v3;
  int *v4;

  v3 = 1;
  v1.n128_u64[0] = (unint64_t)"Enable the machine outliner on linkonceodr functions";
  v1.n128_u64[1] = 52;
  LOBYTE(v2) = 0;
  v4 = &v2;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7FB1D8, "enable-linkonceodr-outlining", &v3, &v1, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FB1D8, &dword_1C475E000);
  v2 = 1;
  v3 = 0;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Number of times to rerun the outliner after the initial outline";
  v1.n128_u64[1] = 63;
  sub_1C4DB1928((uint64_t)&unk_1ED7FB298, "machine-outliner-reruns", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FB298, &dword_1C475E000);
}

void *llvm::AllAnalysesOn<llvm::MachineFunction>::ID()
{
  return &llvm::AllAnalysesOn<llvm::MachineFunction>::SetKey;
}

uint64_t llvm::AnalysisManager<llvm::MachineFunction>::Invalidator::invalidate(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  _BYTE v18[8];
  _QWORD v19[3];

  v8 = sub_1C4D91F84(*a1, a2);
  v9 = *a1;
  v10 = *a1 + 8;
  if ((*(_BYTE *)*a1 & 1) != 0)
  {
    v11 = 8;
  }
  else
  {
    v10 = *(_QWORD *)(v9 + 8);
    v11 = *(unsigned int *)(v9 + 16);
  }
  if (v10 + 16 * v11 == v8)
  {
    v12 = a1[1];
    v19[0] = 0;
    if (sub_1C5185B24(*(_QWORD *)v12, *(_DWORD *)(v12 + 16), a2, a3, v19))
      v13 = v19[0];
    else
      v13 = *(_QWORD *)v12 + 24 * *(unsigned int *)(v12 + 16);
    v14 = *a1;
    v15 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)(*(_QWORD *)(v13 + 16) + 24)
                                                                         + 16))(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 24), a3, a4, a1);
    v17 = a2;
    v18[0] = v15;
    sub_1C4D921A4(v14, &v17, v18, (uint64_t)v19);
    v8 = v19[0];
  }
  return *(unsigned __int8 *)(v8 + 8);
}

_QWORD *llvm::AnalysisManager<llvm::MachineFunction>::Invalidator::Invalidator(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

{
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t llvm::AnalysisManager<llvm::MachineFunction>::AnalysisManager(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t llvm::AnalysisManager<llvm::MachineFunction>::AnalysisManager(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  v4 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v4;
  v5 = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v5;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  v6 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v6;
  v7 = *(_DWORD *)(result + 64);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v7;
  return result;
}

{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  v4 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v4;
  v5 = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v5;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  v6 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v6;
  v7 = *(_DWORD *)(result + 64);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v7;
  return result;
}

uint64_t *llvm::AnalysisManager<llvm::MachineFunction>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;

  v4 = *((unsigned int *)a1 + 4);
  v5 = *a1;
  if ((_DWORD)v4)
  {
    v6 = (uint64_t *)(v5 + 8);
    v7 = 16 * v4;
    do
    {
      if ((*(v6 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
    v5 = *a1;
  }
  MEMORY[0x1CAA32FB4](v5, 8);
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = 0;
  *a1 = *a2;
  *a2 = 0;
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  v10 = a1 + 3;
  v9 = a1[3];
  v11 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v11;
  v12 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  v13 = *((unsigned int *)a1 + 10);
  if ((_DWORD)v13)
  {
    v14 = (uint64_t *)(v9 + 8);
    v15 = 32 * v13;
    do
    {
      if ((*(v14 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        sub_1C4D8B4AC(v14);
      v14 += 4;
      v15 -= 32;
    }
    while (v15);
    v9 = *v10;
  }
  MEMORY[0x1CAA32FB4](v9, 8);
  *v10 = 0;
  a1[4] = 0;
  *((_DWORD *)a1 + 10) = 0;
  a1[3] = a2[3];
  a2[3] = 0;
  *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  v16 = *((_DWORD *)a1 + 9);
  *((_DWORD *)a1 + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v16;
  v17 = *((_DWORD *)a1 + 10);
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v17;
  MEMORY[0x1CAA32FB4](a1[6], 8);
  a1[6] = 0;
  a1[7] = 0;
  *((_DWORD *)a1 + 16) = 0;
  a1[6] = a2[6];
  a2[6] = 0;
  *((_DWORD *)a1 + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = 0;
  v18 = *((_DWORD *)a1 + 15);
  *((_DWORD *)a1 + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v18;
  v19 = *((_DWORD *)a1 + 16);
  *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v19;
  return a1;
}

BOOL llvm::AnalysisManager<llvm::MachineFunction>::empty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 56) == 0;
}

void llvm::AnalysisManager<llvm::MachineFunction>::clear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CachedResultImpl;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *i;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  int v24;
  _QWORD *v25;

  CachedResultImpl = llvm::AnalysisManager<llvm::MachineFunction>::getCachedResultImpl(a1, (uint64_t)&llvm::PassInstrumentationAnalysis::Key, a2);
  if (CachedResultImpl)
  {
    v9 = *(_QWORD *)(CachedResultImpl + 8);
    if (v9)
    {
      v10 = *(unsigned int *)(v9 + 1160);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD **)(v9 + 1152);
        v12 = 32 * v10;
        do
        {
          v13 = v11[3];
          v14 = v11;
          if ((v13 & 2) == 0)
            v14 = (_QWORD *)*v11;
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(v13 & 0xFFFFFFFFFFFFFFF8))(v14, a3, a4);
          v11 += 4;
          v12 -= 32;
        }
        while (v12);
      }
    }
  }
  v15 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(a1 + 24);
    v17 = ((_DWORD)v15 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v18 = (uint64_t *)(v16 + 32 * v17);
    v19 = *v18;
    if (*v18 == a2)
    {
LABEL_10:
      if (v18 != (uint64_t *)(v16 + 32 * v15))
      {
        for (i = (uint64_t *)v18[2]; i != v18 + 1; i = (uint64_t *)i[1])
        {
          v21 = i[2];
          v25 = 0;
          if (sub_1C5185B24(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 64), v21, a2, &v25))
          {
            v22 = v25;
            *v25 = -8192;
            v22[1] = -8192;
            *(int32x2_t *)(a1 + 56) = vadd_s32(*(int32x2_t *)(a1 + 56), (int32x2_t)0x1FFFFFFFFLL);
          }
        }
        sub_1C4D8B4AC(v18 + 1);
        *v18 = -8192;
        *(int32x2_t *)(a1 + 32) = vadd_s32(*(int32x2_t *)(a1 + 32), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    else
    {
      v23 = 1;
      while (v19 != -4096)
      {
        v24 = v17 + v23++;
        v17 = v24 & (v15 - 1);
        v19 = *(_QWORD *)(v16 + 32 * v17);
        if (v19 == a2)
        {
          v18 = (uint64_t *)(v16 + 32 * v17);
          goto LABEL_10;
        }
      }
    }
  }
}

void llvm::AnalysisManager<llvm::MachineFunction>::clear(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  int64x2_t *v7;
  uint64_t v8;
  int64x2_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int64x2_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;

  v2 = a1 + 48;
  v3 = *(_DWORD *)(a1 + 56);
  if (v3)
  {
    v4 = *(_DWORD *)(a1 + 64);
    if (v4 > 4 * v3 && v4 >= 0x41)
    {
      v5 = 1 << (33 - __clz(v3 - 1));
      if (v5 <= 64)
        v6 = 64;
      else
        v6 = v5;
LABEL_10:
      if (v6 == v4)
      {
        *(_QWORD *)(a1 + 56) = 0;
        v7 = *(int64x2_t **)(a1 + 48);
        v8 = 24 * v4;
        v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        do
        {
          *v7 = v9;
          v7 = (int64x2_t *)((char *)v7 + 24);
          v8 -= 24;
        }
        while (v8);
      }
      else
      {
        MEMORY[0x1CAA32FB4](*(_QWORD *)v2, 8);
        if (v6)
        {
          v25 = (4 * v6 / 3u + 1) | ((unint64_t)(4 * v6 / 3u + 1) >> 1);
          v26 = v25 | (v25 >> 2) | ((v25 | (v25 >> 2)) >> 4);
          LODWORD(v26) = (((v26 | (v26 >> 8)) >> 16) | v26 | (v26 >> 8)) + 1;
          *(_DWORD *)(a1 + 64) = v26;
          v27 = operator new(24 * v26, (std::align_val_t)8uLL);
          *(_QWORD *)(a1 + 48) = v27;
          *(_QWORD *)(a1 + 56) = 0;
          v28 = *(unsigned int *)(a1 + 64);
          if ((_DWORD)v28)
          {
            v29 = 24 * v28;
            v30 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
            do
            {
              *v27 = v30;
              v27 = (_OWORD *)((char *)v27 + 24);
              v29 -= 24;
            }
            while (v29);
          }
        }
        else
        {
          *(_QWORD *)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
          *(_DWORD *)(v2 + 16) = 0;
        }
      }
      goto LABEL_18;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 60))
      goto LABEL_18;
    v4 = *(_DWORD *)(a1 + 64);
    if (v4 > 0x40)
    {
      v6 = 0;
      goto LABEL_10;
    }
  }
  if (v4)
  {
    v10 = *(_QWORD **)v2;
    v11 = *(_QWORD *)v2 + 24 * v4;
    do
    {
      *v10 = -4096;
      v10[1] = -4096;
      v10 += 3;
    }
    while (v10 != (_QWORD *)v11);
  }
  *(_QWORD *)(a1 + 56) = 0;
LABEL_18:
  v12 = *(_DWORD *)(a1 + 32);
  if (!v12 && !*(_DWORD *)(a1 + 36))
    return;
  v13 = *(unsigned int *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 24);
  if (v13 <= 4 * v12 || v13 < 0x41)
  {
    if (!(_DWORD)v13)
    {
LABEL_41:
      *(_QWORD *)(a1 + 32) = 0;
      return;
    }
    v22 = (uint64_t *)(v14 + 8);
    v23 = 32 * v13;
    while (1)
    {
      v24 = *(v22 - 1);
      if (v24 == -8192)
        goto LABEL_39;
      if (v24 != -4096)
        break;
LABEL_40:
      v22 += 4;
      v23 -= 32;
      if (!v23)
        goto LABEL_41;
    }
    sub_1C4D8B4AC(v22);
LABEL_39:
    *(v22 - 1) = -4096;
    goto LABEL_40;
  }
  v15 = (_QWORD *)(a1 + 24);
  v16 = (uint64_t *)(v14 + 8);
  v17 = 32 * v13;
  do
  {
    if ((*(v16 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      sub_1C4D8B4AC(v16);
    v16 += 4;
    v17 -= 32;
  }
  while (v17);
  if (!v12)
  {
    if (*(_DWORD *)(a1 + 40))
    {
      MEMORY[0x1CAA32FB4](*v15, 8);
      *v15 = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      return;
    }
    goto LABEL_41;
  }
  v18 = 1 << (33 - __clz(v12 - 1));
  if (v18 <= 64)
    v19 = 64;
  else
    v19 = v18;
  if (v19 == *(_DWORD *)(a1 + 40))
  {
    *(_QWORD *)(a1 + 32) = 0;
    v20 = 32 * v19;
    v21 = *(_QWORD **)(a1 + 24);
    do
    {
      *v21 = -4096;
      v21 += 4;
      v20 -= 32;
    }
    while (v20);
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 24), 8);
    v31 = (4 * v19 / 3 + 1) | ((unint64_t)(4 * v19 / 3 + 1) >> 1);
    v32 = v31 | (v31 >> 2) | ((v31 | (v31 >> 2)) >> 4);
    LODWORD(v32) = (((v32 | (v32 >> 8)) >> 16) | v32 | (v32 >> 8)) + 1;
    *(_DWORD *)(a1 + 40) = v32;
    v33 = operator new(32 * v32, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 24) = v33;
    *(_QWORD *)(a1 + 32) = 0;
    v34 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v34)
    {
      v35 = 32 * v34;
      do
      {
        *v33 = -4096;
        v33 += 4;
        v35 -= 32;
      }
      while (v35);
    }
  }
}

void llvm::AnalysisManager<llvm::MachineFunction>::invalidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t CachedResultImpl;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  char v41[8];
  uint64_t v42[3];
  _QWORD v43[2];
  uint64_t v44;
  _QWORD *v45;
  unsigned int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (!sub_1C4DDA07C(a3, (uint64_t)&llvm::AllAnalysesOn<llvm::MachineFunction>::SetKey))
  {
    v44 = 1;
    for (i = 8; i != 136; i += 16)
      *(uint64_t *)((char *)&v44 + i) = -4096;
    v43[0] = &v44;
    v43[1] = a1 + 48;
    v42[0] = a2;
    v7 = sub_1C5185C10(a1 + 24, v42);
    v8 = v7 + 1;
    v39 = v7;
    v9 = (uint64_t *)v7[2];
    if (v9 != v7 + 1)
    {
      do
      {
        v10 = v9[2];
        v11 = v9[3];
        v12 = sub_1C4D91F84((uint64_t)&v44, v10);
        if ((v44 & 1) != 0)
          v13 = &v45;
        else
          v13 = v45;
        v14 = v46;
        if ((v44 & 1) != 0)
          v14 = 8;
        if (&v13[2 * v14] == (_QWORD *)v12)
        {
          v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v11 + 16))(v11, a2, a3, v43);
          v40 = v10;
          v41[0] = v15;
          sub_1C4D921A4((uint64_t)&v44, &v40, v41, (uint64_t)v42);
        }
        v9 = (uint64_t *)v9[1];
      }
      while (v9 != v8);
    }
    if (v44 >= 2)
    {
      v16 = (uint64_t *)v39[2];
      if (v16 != v8)
      {
        do
        {
          v17 = v16[2];
          v42[0] = v17;
          v40 = 0;
          if (sub_1C4D92000((uint64_t)&v44, v42, &v40) && *(_BYTE *)(v40 + 8))
          {
            CachedResultImpl = llvm::AnalysisManager<llvm::MachineFunction>::getCachedResultImpl(a1, (uint64_t)&llvm::PassInstrumentationAnalysis::Key, a2);
            if (CachedResultImpl)
            {
              v19 = CachedResultImpl;
              v42[0] = 0;
              v20 = (sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v17, v42) & 1) != 0
                  ? v42[0]
                  : *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
              v22 = *(_QWORD *)(v19 + 8);
              if (v22)
              {
                v23 = *(unsigned int *)(v22 + 1016);
                if ((_DWORD)v23)
                {
                  v24 = *(_QWORD *)(v20 + 8);
                  v25 = *(_QWORD **)(v22 + 1008);
                  v26 = 32 * v23;
                  do
                  {
                    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
                    v29 = v28;
                    v42[0] = 0;
                    v30 = (_QWORD *)operator new();
                    *v30 = &off_1E8145AB8;
                    v30[1] = a2;
                    v31 = v42[0];
                    v42[0] = (uint64_t)v30;
                    if (v31)
                      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
                    v32 = v25[3];
                    v33 = v25;
                    if ((v32 & 2) == 0)
                      v33 = (_QWORD *)*v25;
                    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t *))(v32 & 0xFFFFFFFFFFFFFFF8))(v33, v27, v29, v42);
                    v34 = v42[0];
                    v42[0] = 0;
                    if (v34)
                      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
                    v25 += 4;
                    v26 -= 32;
                  }
                  while (v26);
                }
              }
            }
            v35 = *v16;
            v21 = (uint64_t *)v16[1];
            *(_QWORD *)(v35 + 8) = v21;
            *(_QWORD *)v16[1] = v35;
            --v39[3];
            v36 = v16[3];
            v16[3] = 0;
            if (v36)
              (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
            operator delete(v16);
            v42[0] = 0;
            if (sub_1C5185B24(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 64), v17, a2, v42))
            {
              v37 = v42[0];
              *(_QWORD *)v42[0] = -8192;
              *(_QWORD *)(v37 + 8) = -8192;
              *(int32x2_t *)(a1 + 56) = vadd_s32(*(int32x2_t *)(a1 + 56), (int32x2_t)0x1FFFFFFFFLL);
            }
          }
          else
          {
            v21 = (uint64_t *)v16[1];
          }
          v16 = v21;
        }
        while (v21 != v8);
      }
    }
    if (!v39[3])
    {
      v42[0] = 0;
      if (sub_1C4DCDF60(*(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 40), a2, v42))
      {
        v38 = (_QWORD *)v42[0];
        sub_1C4D8B4AC((uint64_t *)(v42[0] + 8));
        *v38 = -8192;
        *(int32x2_t *)(a1 + 32) = vadd_s32(*(int32x2_t *)(a1 + 32), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    if ((v44 & 1) == 0)
      MEMORY[0x1CAA32FB4](v45, 8);
  }
}

{
  __ZN4llvm15AnalysisManagerINS_15MachineFunctionEJEE10invalidateERS1_RKNS_17PreservedAnalysesE(a1, a2, a3);
}

uint64_t llvm::AnalysisManager<llvm::MachineFunction>::lookUpPass(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  if ((sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v5) & 1) != 0)
    v3 = v5;
  else
    v3 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  return *(_QWORD *)(v3 + 8);
}

{
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  if (sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v5))
    v3 = v5;
  else
    v3 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  return *(_QWORD *)(v3 + 8);
}

uint64_t llvm::AnalysisManager<llvm::MachineFunction>::getResultImpl(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v45;

  v7 = a1 + 48;
  v6 = *(_QWORD *)(a1 + 48);
  v45 = 0;
  v8 = sub_1C5185B24(v6, *(_DWORD *)(v7 + 16), (uint64_t)a2, a3, &v45);
  v9 = v45;
  if ((v8 & 1) != 0)
  {
    v10 = v45[2];
    return *(_QWORD *)(v10 + 24);
  }
  v11 = *(_DWORD *)(v7 + 16);
  v12 = *(_DWORD *)(a1 + 56);
  if (4 * v12 + 4 >= 3 * v11)
  {
    v11 *= 2;
  }
  else if (v11 + ~v12 - *(_DWORD *)(a1 + 60) > v11 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C5185ED4(v7, v11);
  v45 = 0;
  sub_1C5185B24(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 64), (uint64_t)a2, a3, &v45);
  v9 = v45;
LABEL_5:
  ++*(_DWORD *)(a1 + 56);
  if (*v9 != -4096 || v9[1] != -4096)
    --*(_DWORD *)(a1 + 60);
  *v9 = a2;
  v9[1] = a3;
  v9[2] = 0;
  v45 = 0;
  if ((sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t)a2, &v45) & 1) != 0)
    v13 = (uint64_t)v45;
  else
    v13 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  v14 = *(_QWORD *)(v13 + 8);
  if (a2 == &llvm::PassInstrumentationAnalysis::Key)
  {
    v15 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(llvm::AnalysisManager<llvm::MachineFunction>::getResultImpl(a1, &llvm::PassInstrumentationAnalysis::Key, a3)+ 8);
    if (v15)
    {
      v16 = *(unsigned int *)(v15 + 728);
      if ((_DWORD)v16)
      {
        v17 = *(_QWORD **)(v15 + 720);
        v18 = 32 * v16;
        do
        {
          v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
          v21 = v20;
          v45 = 0;
          v22 = (_QWORD *)operator new();
          *v22 = &off_1E8145AB8;
          v22[1] = a3;
          v23 = (uint64_t)v45;
          v45 = v22;
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v24 = v17[3];
          v25 = v17;
          if ((v24 & 2) == 0)
            v25 = (_QWORD *)*v17;
          (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v24 & 0xFFFFFFFFFFFFFFF8))(v25, v19, v21, &v45);
          v26 = (uint64_t)v45;
          v45 = 0;
          if (v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          v17 += 4;
          v18 -= 32;
        }
        while (v18);
      }
    }
  }
  v45 = (_QWORD *)a3;
  v27 = sub_1C5185C10(a1 + 24, (uint64_t *)&v45);
  (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(&v45, v14, a3, a1);
  v28 = operator new(0x20uLL);
  v30 = v27[1];
  v29 = v27 + 1;
  v31 = (uint64_t)v45;
  v28[2] = a2;
  v28[3] = v31;
  *v28 = v30;
  v28[1] = v29;
  *(_QWORD *)(v30 + 8) = v28;
  *v29 = (uint64_t)v28;
  ++v29[2];
  if (v15)
  {
    v32 = *(unsigned int *)(v15 + 872);
    if ((_DWORD)v32)
    {
      v33 = *(_QWORD **)(v15 + 864);
      v34 = 32 * v32;
      do
      {
        v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
        v37 = v36;
        v45 = 0;
        v38 = (_QWORD *)operator new();
        *v38 = &off_1E8145AB8;
        v38[1] = a3;
        v39 = (uint64_t)v45;
        v45 = v38;
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
        v40 = v33[3];
        v41 = v33;
        if ((v40 & 2) == 0)
          v41 = (_QWORD *)*v33;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v40 & 0xFFFFFFFFFFFFFFF8))(v41, v35, v37, &v45);
        v42 = (uint64_t)v45;
        v45 = 0;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
        v33 += 4;
        v34 -= 32;
      }
      while (v34);
    }
  }
  v45 = 0;
  if ((sub_1C5185B24(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 64), (uint64_t)a2, a3, &v45) & 1) != 0)
    v43 = (uint64_t)v45;
  else
    v43 = *(_QWORD *)(a1 + 48) + 24 * *(unsigned int *)(a1 + 64);
  v10 = *v29;
  *(_QWORD *)(v43 + 16) = *v29;
  return *(_QWORD *)(v10 + 24);
}

{
  return __ZN4llvm15AnalysisManagerINS_15MachineFunctionEJEE13getResultImplEPNS_11AnalysisKeyERS1_(a1, a2, a3);
}

uint64_t llvm::AnalysisManager<llvm::MachineFunction>::getCachedResultImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;

  v8 = 0;
  if (sub_1C5185B24(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 64), a2, a3, &v8))
  {
    v4 = v8;
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(_DWORD *)(a1 + 64);
    v4 = v5 + 24 * v6;
  }
  if (v4 == v5 + 24 * v6)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(v4 + 16) + 24);
}

{
  return __ZNK4llvm15AnalysisManagerINS_15MachineFunctionEJEE19getCachedResultImplEPNS_11AnalysisKeyERS1_(a1, a2, a3);
}

__n128 llvm::PassManager<llvm::MachineFunction,llvm::AnalysisManager<llvm::MachineFunction>>::PassManager(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

_QWORD *llvm::PassManager<llvm::MachineFunction,llvm::AnalysisManager<llvm::MachineFunction>>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (_QWORD *)*a1;
  if (*a1)
  {
    v5 = (_QWORD *)a1[1];
    v6 = (_QWORD *)*a1;
    if (v5 != v4)
    {
      do
      {
        v8 = *--v5;
        v7 = v8;
        *v5 = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
      while (v5 != v4);
      v6 = (_QWORD *)*a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return a1;
}

llvm::raw_ostream *llvm::PassManager<llvm::MachineFunction,llvm::AnalysisManager<llvm::MachineFunction>>::printPipeline(llvm::raw_ostream *result, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  llvm::raw_ostream *v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;

  v4 = *((_QWORD *)result + 1) - *(_QWORD *)result;
  if ((v4 & 0x7FFFFFFF8) != 0)
  {
    v8 = result;
    v9 = 0;
    v10 = (v4 >> 3);
    do
    {
      result = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD, llvm::raw_ostream *, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)v8 + 8 * v9) + 24))(*(_QWORD *)(*(_QWORD *)v8 + 8 * v9), a2, a3, a4);
      if (++v9 < v10)
      {
        v11 = (_BYTE *)*((_QWORD *)a2 + 4);
        if (*((_BYTE **)a2 + 3) == v11)
        {
          result = llvm::raw_ostream::write(a2, ",", 1uLL);
        }
        else
        {
          *v11 = 44;
          ++*((_QWORD *)a2 + 4);
        }
      }
    }
    while (v10 != v9);
  }
  return result;
}

_QWORD *llvm::PassManager<llvm::MachineFunction,llvm::AnalysisManager<llvm::MachineFunction>>::run@<X0>(_QWORD *a1@<X0>, llvm::Value **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t ResultImpl;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  const void *v38;
  size_t v39;
  size_t v40;
  char *Name;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  int v75;
  void *v76;
  void *v77;
  uint64_t v78;
  int v79;
  void *__dst;
  _BYTE *v81;
  uint64_t v82;
  int v83;
  _BYTE v84[16];
  void *v85;
  _BYTE *v86;
  uint64_t v87;
  int v88;
  _BYTE v89[16];
  _QWORD *v90;

  v7 = a4;
  v8 = a4 + 32;
  *(_QWORD *)v7 = v8;
  *(_QWORD *)(v7 + 8) = v8;
  *(_QWORD *)(v7 + 16) = 2;
  *(_DWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 48) = v7 + 80;
  *(_QWORD *)(v7 + 56) = v7 + 80;
  *(_QWORD *)(v7 + 64) = 2;
  *(_DWORD *)(v7 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)v7, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  v71 = a3;
  ResultImpl = llvm::AnalysisManager<llvm::MachineFunction>::getResultImpl(a3, &llvm::PassInstrumentationAnalysis::Key, (uint64_t)a2);
  v10 = a1[1] - *a1;
  if ((v10 & 0x7FFFFFFF8) != 0)
  {
    v11 = *(_QWORD *)(ResultImpl + 8);
    v69 = (v10 >> 3);
    v70 = (uint64_t *)off_1EF8EEB50();
    v12 = 0;
    v68 = v7;
    do
    {
      v13 = *(_QWORD *)(*a1 + 8 * v12);
      if (v11)
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v13 + 40))(*(_QWORD *)(*a1 + 8 * v12)) & 1) == 0)
        {
          v14 = *(unsigned int *)(v11 + 8);
          if ((_DWORD)v14)
          {
            v15 = *(_QWORD **)v11;
            v16 = 32 * v14;
            v17 = 1;
            do
            {
              v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
              v20 = v19;
              __dst = 0;
              v21 = (_QWORD *)operator new();
              *v21 = &off_1E8145AB8;
              v21[1] = a2;
              v22 = __dst;
              __dst = v21;
              if (v22)
                (*(void (**)(void *))(*(_QWORD *)v22 + 8))(v22);
              v23 = v15[3];
              v24 = v15;
              if ((v23 & 2) == 0)
                v24 = (_QWORD *)*v15;
              v25 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, void **))(v23 & 0xFFFFFFFFFFFFFFF8))(v24, v18, v20, &__dst);
              v26 = __dst;
              __dst = 0;
              if (v26)
                (*(void (**)(void *))(*(_QWORD *)v26 + 8))(v26);
              v17 &= v25;
              v15 += 4;
              v16 -= 32;
            }
            while (v16);
            v7 = v68;
            if (!v17)
            {
              v56 = *(unsigned int *)(v11 + 152);
              if ((_DWORD)v56)
              {
                v57 = *(_QWORD **)(v11 + 144);
                v58 = 32 * v56;
                do
                {
                  v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
                  v61 = v60;
                  v90 = 0;
                  v62 = (_QWORD *)operator new();
                  *v62 = &off_1E8145AB8;
                  v62[1] = a2;
                  v63 = v90;
                  v90 = v62;
                  if (v63)
                    (*(void (**)(_QWORD *))(*v63 + 8))(v63);
                  v64 = v57[3];
                  v65 = v57;
                  if ((v64 & 2) == 0)
                    v65 = (_QWORD *)*v57;
                  (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v64 & 0xFFFFFFFFFFFFFFF8))(v65, v59, v61, &v90);
                  v66 = v90;
                  v90 = 0;
                  if (v66)
                    (*(void (**)(_QWORD *))(*v66 + 8))(v66);
                  v57 += 4;
                  v58 -= 32;
                }
                while (v58);
              }
              goto LABEL_56;
            }
          }
        }
        v27 = *(unsigned int *)(v11 + 296);
        if ((_DWORD)v27)
        {
          v28 = *(_QWORD **)(v11 + 288);
          v29 = 32 * v27;
          do
          {
            v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
            v32 = v31;
            v72 = 0;
            v33 = (_QWORD *)operator new();
            *v33 = &off_1E8145AB8;
            v33[1] = a2;
            v34 = v72;
            v72 = v33;
            if (v34)
              (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
            v35 = v28[3];
            v36 = v28;
            if ((v35 & 2) == 0)
              v36 = (_QWORD *)*v28;
            (*(void (**)(_QWORD *, uint64_t, uint64_t, void **))(v35 & 0xFFFFFFFFFFFFFFF8))(v36, v30, v32, &v72);
            v37 = v72;
            v72 = 0;
            if (v37)
              (*(void (**)(void *))(*(_QWORD *)v37 + 8))(v37);
            v28 += 4;
            v29 -= 32;
          }
          while (v29);
        }
      }
      __dst = v84;
      v81 = v84;
      v82 = 2;
      v83 = 0;
      v85 = v89;
      v86 = v89;
      v87 = 2;
      v88 = 0;
      v38 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
      v40 = v39;
      Name = llvm::Value::getName(*a2);
      if (*v70)
        llvm::timeTraceProfilerBegin(v38, v40, (uint64_t)Name, v42);
      (*(void (**)(void **__return_ptr, uint64_t, llvm::Value **, uint64_t))(*(_QWORD *)v13 + 16))(&v72, v13, a2, v71);
      if (v81 != __dst)
        free(v81);
      if (v73 == v72)
      {
        v81 = __dst;
        if (HIDWORD(v74))
          memmove(__dst, v73, 8 * HIDWORD(v74));
      }
      else
      {
        v81 = v73;
        v73 = v72;
      }
      v82 = v74;
      v83 = v75;
      v74 = 2;
      v75 = 0;
      if (v86 != v85)
        free(v86);
      v43 = v76;
      v44 = v77;
      if (v77 == v76)
      {
        v86 = v85;
        if (HIDWORD(v78))
        {
          memmove(v85, v77, 8 * HIDWORD(v78));
          v44 = v76;
        }
        v43 = v77;
      }
      else
      {
        v86 = v77;
        v77 = v76;
        v44 = v76;
      }
      v87 = v78;
      v88 = v79;
      v78 = 2;
      v79 = 0;
      if (v43 != v44)
        free(v43);
      if (v73 != v72)
        free(v73);
      if (*v70)
      {
        sub_1C6392DC0(*v70);
        if (v11)
        {
LABEL_43:
          v45 = *(unsigned int *)(v11 + 440);
          if ((_DWORD)v45)
          {
            v46 = *(_QWORD **)(v11 + 432);
            v47 = 32 * v45;
            do
            {
              v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
              v50 = v49;
              v72 = 0;
              v51 = (_QWORD *)operator new();
              *v51 = &off_1E8145AB8;
              v51[1] = a2;
              v52 = v72;
              v72 = v51;
              if (v52)
                (*(void (**)(void *))(*(_QWORD *)v52 + 8))(v52);
              v53 = v46[3];
              v54 = v46;
              if ((v53 & 2) == 0)
                v54 = (_QWORD *)*v46;
              (*(void (**)(_QWORD *, uint64_t, uint64_t, void **, void **))(v53 & 0xFFFFFFFFFFFFFFF8))(v54, v48, v50, &v72, &__dst);
              v55 = v72;
              v72 = 0;
              if (v55)
                (*(void (**)(void *))(*(_QWORD *)v55 + 8))(v55);
              v46 += 4;
              v47 -= 32;
            }
            while (v47);
          }
        }
      }
      else if (v11)
      {
        goto LABEL_43;
      }
      llvm::AnalysisManager<llvm::MachineFunction>::invalidate(v71, (uint64_t)a2, (uint64_t)&__dst);
      sub_1C4DD4444(v7, (uint64_t)&__dst);
      if (v86 != v85)
        free(v86);
      if (v81 != __dst)
        free(v81);
LABEL_56:
      ++v12;
    }
    while (v12 != v69);
  }
  return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)v7, (uint64_t)&llvm::AllAnalysesOn<llvm::MachineFunction>::SetKey);
}

BOOL llvm::PassManager<llvm::MachineFunction,llvm::AnalysisManager<llvm::MachineFunction>>::isEmpty(_QWORD *a1)
{
  return *a1 == a1[1];
}

uint64_t llvm::PassManager<llvm::MachineFunction,llvm::AnalysisManager<llvm::MachineFunction>>::isRequired()
{
  return 1;
}

void llvm::MachineFunctionPassManager::run(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ResultImpl;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int i;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  llvm::Function *v34;
  llvm::MachineFunction *MachineFunction;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  void *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t *v95;
  _QWORD *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  llvm::MachineModuleInfo *v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  _QWORD *v119;
  _QWORD v120[2];

  v4 = a3;
  v5 = a2;
  ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(*(_QWORD *)(a3 + 80), &llvm::MachineModuleAnalysis::Key, a2);
  v110 = v4;
  if (*(_BYTE *)(a1 + 337))
  {
    v9 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(*(_QWORD *)(v4 + 80), &llvm::PassInstrumentationAnalysis::Key, v5)+ 8);
    if (v9)
    {
      v10 = *(unsigned int *)(v9 + 296);
      if (v10 >= *(_DWORD *)(v9 + 300))
      {
        v113 = a1;
        v115 = 0;
        v91 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(v9 + 288, 0, 32, (unint64_t *)&v115);
        v92 = v4;
        v93 = v91;
        v94 = *(unsigned int *)(v9 + 296);
        v95 = (uint64_t *)&v91[32 * v94];
        *v95 = v92;
        v95[3] = (uint64_t)&off_1EF8EB278 + 2;
        v96 = *(_QWORD **)(v9 + 288);
        if ((_DWORD)v94)
        {
          v97 = 32 * v94;
          v98 = v91;
          do
          {
            *((_QWORD *)v98 + 3) = 0;
            v99 = v96[3];
            *((_QWORD *)v98 + 3) = v99;
            if (v96[3] >= 8uLL)
            {
              if ((v99 & 2) != 0 && (v99 & 4) != 0)
              {
                (*(void (**)(char *, _QWORD *))((v99 & 0xFFFFFFFFFFFFFFF8) + 8))(v98, v96);
              }
              else
              {
                v100 = *(_OWORD *)v96;
                *((_QWORD *)v98 + 2) = v96[2];
                *(_OWORD *)v98 = v100;
              }
              v96[3] = 0;
            }
            v96 += 4;
            v98 += 32;
            v97 -= 32;
          }
          while (v97);
          v96 = *(_QWORD **)(v9 + 288);
          v101 = *(unsigned int *)(v9 + 296);
          if ((_DWORD)v101)
          {
            v102 = 4 * v101;
            do
            {
              sub_1C5052E10(&v96[v102 - 4]);
              v102 -= 4;
            }
            while (v102 * 8);
            v96 = *(_QWORD **)(v9 + 288);
          }
        }
        v103 = (int)v115;
        if (v96 != (_QWORD *)(v9 + 304))
          free(v96);
        *(_QWORD *)(v9 + 288) = v93;
        *(_DWORD *)(v9 + 300) = v103;
        ++*(_DWORD *)(v9 + 296);
        v4 = v110;
        a1 = v113;
      }
      else
      {
        v11 = (uint64_t *)(*(_QWORD *)(v9 + 288) + 32 * v10);
        *v11 = v4;
        v11[3] = (uint64_t)&off_1EF8EB278 + 2;
        *(_DWORD *)(v9 + 296) = v10 + 1;
      }
    }
  }
  v12 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD **)(a1 + 24);
    v14 = 32 * v12;
    do
    {
      v15 = v13[3];
      v16 = v13;
      if ((v15 & 2) == 0)
        v16 = (_QWORD *)*v13;
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v15 & 0xFFFFFFFFFFFFFFF8))(v16, v5, v4);
      if (*a4)
        return;
      v13 += 4;
      v14 -= 32;
    }
    while (v14);
  }
  i = 0;
  v106 = a4;
  v107 = (llvm::MachineModuleInfo *)(ResultImpl + 8);
  v18 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  v109 = v5 + 24;
  v104 = v18;
  v105 = v5;
  v112 = a1;
LABEL_12:
  while (1)
  {
    v19 = i;
    v20 = *(_QWORD **)(a1 + 320);
    if (v20)
      break;
    v30 = 0;
LABEL_33:
    v108 = i;
LABEL_34:
    if (v18 == v19)
      goto LABEL_102;
    for (i = v108; ; ++i)
    {
      if (v30)
      {
        v31 = v30;
        do
        {
          v32 = v31[4];
          if (v32 <= i)
          {
            if (v32 >= i)
              goto LABEL_44;
            ++v31;
          }
          v31 = (_QWORD *)*v31;
        }
        while (v31);
      }
      if (v18 == i)
        break;
    }
LABEL_44:
    v33 = *(_QWORD *)(v5 + 32);
    if (v33 != v109)
    {
      v114 = i;
      while (1)
      {
        v111 = v33;
        v34 = v33 ? (llvm::Function *)(v33 - 56) : 0;
        if ((*((_DWORD *)v34 + 8) & 0xF) != 1)
        {
          MachineFunction = llvm::MachineModuleInfo::getOrCreateMachineFunction(v107, v34);
          v36 = llvm::AnalysisManager<llvm::MachineFunction>::getResultImpl(v4, &llvm::PassInstrumentationAnalysis::Key, (uint64_t)MachineFunction);
          i = v114;
          if (v108 != v114)
            break;
        }
LABEL_51:
        v33 = *(_QWORD *)(v111 + 8);
        if (v33 == v109)
        {
          v5 = v105;
          a4 = v106;
          v18 = v104;
          goto LABEL_12;
        }
      }
      v37 = *(_QWORD *)(v36 + 8);
      v38 = v108;
      while (2)
      {
        v39 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v38);
        if (v37)
        {
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39) & 1) != 0)
            goto LABEL_66;
          v40 = *(unsigned int *)(v37 + 8);
          if (!(_DWORD)v40)
            goto LABEL_66;
          v41 = *(_QWORD **)v37;
          v42 = 32 * v40;
          v43 = 1;
          do
          {
            v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39);
            v46 = v45;
            v115 = 0;
            v47 = (_QWORD *)operator new();
            *v47 = &off_1E8145AB8;
            v47[1] = MachineFunction;
            v48 = v115;
            v115 = v47;
            if (v48)
              (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
            v49 = v41[3];
            v50 = v41;
            if ((v49 & 2) == 0)
              v50 = (_QWORD *)*v41;
            v51 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, void **))(v49 & 0xFFFFFFFFFFFFFFF8))(v50, v44, v46, &v115);
            v52 = v115;
            v115 = 0;
            if (v52)
              (*(void (**)(void *))(*(_QWORD *)v52 + 8))(v52);
            v43 &= v51;
            v41 += 4;
            v42 -= 32;
          }
          while (v42);
          v4 = v110;
          if (v43)
          {
LABEL_66:
            v53 = *(unsigned int *)(v37 + 296);
            if ((_DWORD)v53)
            {
              v54 = *(_QWORD **)(v37 + 288);
              v55 = 32 * v53;
              do
              {
                v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39);
                v58 = v57;
                v120[0] = 0;
                v59 = (_QWORD *)operator new();
                *v59 = &off_1E8145AB8;
                v59[1] = MachineFunction;
                v60 = v120[0];
                v120[0] = v59;
                if (v60)
                  (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
                v61 = v54[3];
                v62 = v54;
                if ((v61 & 2) == 0)
                  v62 = (_QWORD *)*v54;
                (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD *))(v61 & 0xFFFFFFFFFFFFFFF8))(v62, v56, v58, v120);
                v63 = v120[0];
                v120[0] = 0;
                if (v63)
                  (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
                v54 += 4;
                v55 -= 32;
              }
              while (v55);
            }
            (*(void (**)(void **__return_ptr, uint64_t, llvm::MachineFunction *, uint64_t))(*(_QWORD *)v39 + 16))(&v115, v39, MachineFunction, v4);
            v64 = *(unsigned int *)(v37 + 440);
            if ((_DWORD)v64)
            {
              v65 = *(_QWORD **)(v37 + 432);
              v66 = 32 * v64;
              do
              {
                v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39);
                v69 = v68;
                v120[0] = 0;
                v70 = (_QWORD *)operator new();
                *v70 = &off_1E8145AB8;
                v70[1] = MachineFunction;
                v71 = v120[0];
                v120[0] = v70;
                if (v71)
                  (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
                v72 = v65[3];
                v73 = v65;
                if ((v72 & 2) == 0)
                  v73 = (_QWORD *)*v65;
                (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD *, void **))(v72 & 0xFFFFFFFFFFFFFFF8))(v73, v67, v69, v120, &v115);
                v74 = v120[0];
                v120[0] = 0;
                if (v74)
                  (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
                v65 += 4;
                v66 -= 32;
              }
              while (v66);
            }
LABEL_86:
            llvm::AnalysisManager<llvm::MachineFunction>::invalidate(v4, (uint64_t)MachineFunction, (uint64_t)&v115);
            if (v118 != v117)
              free(v118);
            a1 = v112;
            if (v116 != v115)
              free(v116);
          }
          else
          {
            v75 = *(unsigned int *)(v37 + 152);
            if ((_DWORD)v75)
            {
              v76 = *(_QWORD **)(v37 + 144);
              v77 = 32 * v75;
              do
              {
                v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39);
                v80 = v79;
                v119 = 0;
                v81 = (_QWORD *)operator new();
                *v81 = &off_1E8145AB8;
                v81[1] = MachineFunction;
                v82 = v119;
                v119 = v81;
                if (v82)
                  (*(void (**)(_QWORD *))(*v82 + 8))(v82);
                v83 = v76[3];
                v84 = v76;
                if ((v83 & 2) == 0)
                  v84 = (_QWORD *)*v76;
                (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v83 & 0xFFFFFFFFFFFFFFF8))(v84, v78, v80, &v119);
                v85 = v119;
                v119 = 0;
                if (v85)
                  (*(void (**)(_QWORD *))(*v85 + 8))(v85);
                v76 += 4;
                v77 -= 32;
              }
              while (v77);
            }
            a1 = v112;
          }
          ++v38;
          i = v114;
          if (v38 == v114)
            goto LABEL_51;
          continue;
        }
        break;
      }
      (*(void (**)(void **__return_ptr, uint64_t, llvm::MachineFunction *, uint64_t))(*(_QWORD *)v39 + 16))(&v115, v39, MachineFunction, v4);
      goto LABEL_86;
    }
  }
  while (2)
  {
    v21 = v20;
    while (1)
    {
      v22 = v21[4];
      if (v22 <= v19)
        break;
LABEL_17:
      v21 = (_QWORD *)*v21;
      if (!v21)
      {
        v30 = v20;
        goto LABEL_33;
      }
    }
    if (v22 < v19)
    {
      ++v21;
      goto LABEL_17;
    }
    if (v18 == v19)
    {
LABEL_102:
      v86 = *(unsigned int *)(a1 + 176);
      if ((_DWORD)v86)
      {
        v87 = *(_QWORD **)(a1 + 168);
        v88 = 32 * v86;
        while (1)
        {
          v89 = v87[3];
          v90 = v87;
          if ((v89 & 2) == 0)
            v90 = (_QWORD *)*v87;
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(v89 & 0xFFFFFFFFFFFFFFF8))(v90, v5, v4);
          if (*a4)
            break;
          v87 += 4;
          v88 -= 32;
          if (!v88)
            goto LABEL_108;
        }
      }
      else
      {
LABEL_108:
        *a4 = 0;
      }
      return;
    }
    while (1)
    {
      while (1)
      {
        v23 = v20[4];
        if (v23 <= v19)
          break;
        v20 = (_QWORD *)*v20;
        if (!v20)
LABEL_110:
          abort();
      }
      if (v23 >= v19)
        break;
      v20 = (_QWORD *)v20[1];
      if (!v20)
        goto LABEL_110;
    }
    v24 = i;
    v27 = (_QWORD *)v20[5];
    v26 = v20 + 5;
    v25 = v27;
    v28 = v26[3];
    if ((v28 & 2) != 0)
      v29 = v26;
    else
      v29 = v25;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v28 & 0xFFFFFFFFFFFFFFF8))(v29, v5, v4);
    if (!*a4)
    {
      v30 = 0;
      v19 = v24 + 1;
      v20 = *(_QWORD **)(a1 + 320);
      i = v24 + 1;
      v108 = v24 + 1;
      if (!v20)
        goto LABEL_34;
      continue;
    }
    break;
  }
}

uint64_t sub_1C5185B24(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (_QWORD *)(a1 + 24 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
      v14 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v11 != -4096 || v12 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v12 == -8192;
        if (v18 && v11 == -8192)
          v16 = v10;
        v20 = v9 + v17++;
        v9 = v20 & v8;
        v10 = (_QWORD *)(a1 + 24 * (v20 & v8));
        v11 = *v10;
        v12 = v10[1];
        v14 = 1;
        if (*v10 == a3 && v12 == a4)
          goto LABEL_9;
      }
      v14 = 0;
      if (v16)
        v10 = v16;
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
  }
LABEL_9:
  *a5 = v10;
  return v14;
}

uint64_t *sub_1C5185C10(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_1C4DCDF60(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1C5185CF0(a1, v7);
    v8 = 0;
    sub_1C4DCDF60(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = (uint64_t)(result + 1);
  result[2] = (uint64_t)(result + 1);
  result[3] = 0;
  return result;
}

_QWORD *sub_1C5185CF0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = (uint64_t *)(v4 + 24);
      v13 = 32 * v3;
      do
      {
        v14 = *(v12 - 3);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v24 = 0;
          sub_1C4DCDF60(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v24);
          v15 = v24;
          v16 = v24 + 1;
          *v24 = *(v12 - 3);
          v15[1] = v16;
          v15[2] = v16;
          v15[3] = 0;
          v17 = *v12;
          if (*v12)
          {
            v19 = *(v12 - 2);
            v18 = (uint64_t *)*(v12 - 1);
            v20 = *v18;
            *(_QWORD *)(v20 + 8) = *(_QWORD *)(v19 + 8);
            **(_QWORD **)(v19 + 8) = v20;
            v21 = v15[1];
            *(_QWORD *)(v21 + 8) = v18;
            *v18 = v21;
            v15[1] = v19;
            *(_QWORD *)(v19 + 8) = v16;
            v15[3] = v17;
            *v12 = 0;
          }
          ++*(_DWORD *)(a1 + 8);
          sub_1C4D8B4AC(v12 - 2);
        }
        v12 += 4;
        v13 -= 32;
      }
      while (v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v22 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v22)
  {
    v23 = 32 * v22;
    do
    {
      *result = -4096;
      result += 4;
      v23 -= 32;
    }
    while (v23);
  }
  return result;
}

void sub_1C5185E68()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5185E7C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (_QWORD *)operator new();
  v5 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8145AB8;
  result[1] = v5;
  *a2 = result;
  return result;
}

void *sub_1C5185EC8()
{
  return &llvm::Any::TypeId<llvm::MachineFunction const*>::Id;
}

_OWORD *sub_1C5185ED4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  _QWORD *v21;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *result = v12;
        result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v13 = 24 * v3;
      v14 = (uint64_t *)(v4 + 8);
      do
      {
        v15 = *(v14 - 1);
        v16 = *v14;
        if ((v15 != -4096 || v16 != -4096) && (v15 != -8192 || v16 != -8192))
        {
          v21 = 0;
          sub_1C5185B24(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, v16, &v21);
          v17 = v21;
          *v21 = *(v14 - 1);
          v17[1] = *v14;
          v17[2] = v14[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v14 += 3;
        v13 -= 24;
      }
      while (v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    v19 = 24 * v18;
    v20 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *result = v20;
      result = (_OWORD *)((char *)result + 24);
      v19 -= 24;
    }
    while (v19);
  }
  return result;
}

uint64_t sub_1C5186038(uint64_t *a1, const void *a2, size_t a3, _QWORD **a4)
{
  _QWORD *v7;
  uint64_t v8;
  void *p_p;
  uint64_t v10;
  uint64_t v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  void *__p;
  std::string::size_type v18;
  int64_t v19;
  std::string v20;
  void *v21[2];
  std::string::size_type v22;

  v7 = *a4;
  *a4 = 0;
  (*(void (**)(_QWORD *))(*v7 + 24))(v7);
  v8 = v7[1];
  *((_BYTE *)&v20.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v20, "After ");
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v10 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v10 = a3 | 7;
    v11 = v10 + 1;
    p_p = operator new(v10 + 1);
    v18 = a3;
    v19 = v11 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_8;
  }
  HIBYTE(v19) = a3;
  p_p = &__p;
  if (a3)
LABEL_8:
    memmove(p_p, a2, a3);
  *((_BYTE *)p_p + a3) = 0;
  if (v19 >= 0)
    v12 = (const std::string::value_type *)&__p;
  else
    v12 = (const std::string::value_type *)__p;
  if (v19 >= 0)
    v13 = HIBYTE(v19) & 0x7F;
  else
    v13 = v18;
  v14 = std::string::append(&v20, v12, v13);
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)v21 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v22 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  llvm::verifyMachineFunction(*a1, (uint64_t *)v21, v8);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
}

uint64_t sub_1C51861B4(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeAAResultsWrapperPassPass(a1, a2);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeLiveIntervalsPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Modulo Software Pipelining";
  *(_QWORD *)(v3 + 8) = 26;
  *(_QWORD *)(v3 + 16) = "pipeliner";
  *(_QWORD *)(v3 + 24) = 9;
  *(_QWORD *)(v3 + 32) = &llvm::MachinePipeliner::ID;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = llvm::callDefaultCtor<llvm::MachinePipeliner>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t llvm::MachinePipeliner::runOnMachineFunction(llvm::MachinePipeliner *this, llvm::MachineFunction *a2)
{
  uint64_t v4;
  void **v5;
  void *v6;
  void **v7;
  void *v8;
  void **v9;
  void *v10;
  uint64_t v11;
  llvm::MachineLoop **v12;
  llvm::MachineLoop **v13;
  llvm::MachineLoop *v14;

  if ((llvm::FunctionPass::skipFunction(this, *(const llvm::Function **)a2) & 1) == 0)
  {
    if (byte_1ED7FB3E0)
    {
      v4 = *(_QWORD *)(*(_QWORD *)a2 + 112);
      if ((!v4 || (*(_BYTE *)(v4 + 17) & 4) == 0 || word_1ED7FB42C)
        && (*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 2) + 248))(*((_QWORD *)a2 + 2))
        && (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 2) + 344))(*((_QWORD *)a2 + 2))
         || (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 192))(*((_QWORD *)a2 + 2))
         && *(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 192))(*((_QWORD *)a2 + 2)) + 96)))
      {
        *((_QWORD *)this + 31) = a2;
        v5 = (void **)**((_QWORD **)this + 1);
        do
        {
          v6 = *v5;
          v5 += 2;
        }
        while (v6 != &llvm::MachineLoopInfo::ID);
        *((_QWORD *)this + 33) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::MachineLoopInfo::ID);
        v7 = (void **)**((_QWORD **)this + 1);
        do
        {
          v8 = *v7;
          v7 += 2;
        }
        while (v8 != &llvm::MachineDominatorTree::ID);
        *((_QWORD *)this + 34) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::MachineDominatorTree::ID);
        v9 = (void **)**((_QWORD **)this + 1);
        do
        {
          v10 = *v9;
          v9 += 2;
        }
        while (v10 != &llvm::MachineOptimizationRemarkEmitterPass::ID);
        *((_QWORD *)this + 32) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), &llvm::MachineOptimizationRemarkEmitterPass::ID)+ 248);
        *((_QWORD *)this + 36) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 31) + 16) + 104))(*(_QWORD *)(*((_QWORD *)this + 31) + 16));
        llvm::RegisterClassInfo::runOnMachineFunction((llvm::MachinePipeliner *)((char *)this + 296), *((const llvm::MachineFunction **)this + 31));
        v11 = *((_QWORD *)this + 33);
        v12 = *(llvm::MachineLoop ***)(v11 + 272);
        v13 = *(llvm::MachineLoop ***)(v11 + 280);
        while (v12 != v13)
        {
          v14 = *v12++;
          llvm::MachinePipeliner::scheduleLoop((uint64_t *****)this, v14);
        }
      }
    }
  }
  return 0;
}

uint64_t *llvm::MachinePipeliner::setPragmaPipelineOptions(llvm::MachinePipeliner *this, llvm::MachineLoop *a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  *((_BYTE *)this + 536) = 0;
  *((_DWORD *)this + 135) = 0;
  result = llvm::MachineLoop::getTopBlock(a2);
  if (!result)
    return result;
  v4 = result[2];
  if (!v4)
    return result;
  v5 = *(_QWORD *)(v4 + 40);
  if (v5 == v4 + 40)
    return result;
  v6 = v5 - 24;
  if (!v5)
    v6 = 0;
  if (*(unsigned __int8 *)(v6 + 16) - 29 > 0xA || (*(_BYTE *)(v6 + 23) & 0x20) == 0)
    return result;
  v7 = ***(_QWORD ***)v6;
  v37 = v6;
  v8 = *(_DWORD *)(v7 + 2496);
  if (v8)
  {
    v9 = *(_QWORD *)(v7 + 2480);
    v10 = v8 - 1;
    v11 = v10 & ((v6 >> 4) ^ (v6 >> 9));
    result = (uint64_t *)(v9 + 40 * v11);
    v12 = *result;
    if (*result == v6)
      goto LABEL_18;
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = result;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      result = (uint64_t *)(v9 + 40 * v11);
      v12 = *result;
      if (*result == v6)
        goto LABEL_18;
    }
    if (v13)
      v35 = v13;
    else
      v35 = result;
  }
  else
  {
    v35 = 0;
  }
  result = sub_1C541AB24(v7 + 2480, (uint64_t)&v37, &v37, v35);
  v36 = v37;
  result[3] = 0;
  result[4] = 0;
  *result = v36;
  result[1] = (uint64_t)(result + 3);
  result[2] = 0x100000000;
LABEL_18:
  v17 = *((unsigned int *)result + 4);
  if ((_DWORD)v17)
  {
    v18 = (_QWORD *)(result[1] + 8);
    v19 = 16 * v17;
    while (*((_DWORD *)v18 - 2) != 18)
    {
      v18 += 2;
      v19 -= 16;
      if (!v19)
        return result;
    }
    v20 = *v18;
    if (*v18)
    {
      v23 = *(_DWORD *)(v20 + 8);
      v22 = v20 + 8;
      v21 = v23;
      if (v23 >= 2)
      {
        v24 = -8 * v21;
        do
        {
          v25 = *(unsigned __int8 **)(v22 + v24);
          if (*v25 - 4 <= 0x1E)
          {
            v26 = &v25[-8 * *((unsigned int *)v25 + 2)];
            if (!**(_BYTE **)v26)
            {
              v27 = *(uint64_t **)(*(_QWORD *)v26 + 8);
              v29 = *v27;
              result = v27 + 3;
              v28 = v29;
              if (v29 == 26)
              {
                if (*result == 0x6F6F6C2E6D766C6CLL
                  && result[1] == 0x696C657069702E70
                  && result[2] == 0x62617369642E656ELL
                  && *((_WORD *)result + 12) == 25964)
                {
                  *((_BYTE *)this + 536) = 1;
                }
              }
              else if (v28 == 37)
              {
                result = (uint64_t *)memcmp(result, "llvm.loop.pipeline.initiationinterval", 0x25uLL);
                if (!(_DWORD)result)
                {
                  v30 = *(_QWORD *)(*((_QWORD *)v26 + 1) + 128);
                  v31 = (_QWORD *)(v30 + 24);
                  if (*(_DWORD *)(v30 + 32) >= 0x41u)
                    v31 = (_QWORD *)*v31;
                  *((_DWORD *)this + 135) = *v31;
                }
              }
            }
          }
          v24 += 8;
        }
        while (v24 != -8);
      }
    }
  }
  return result;
}

uint64_t llvm::MachinePipeliner::canPipelineLoop(llvm::MachinePipeliner *this, llvm::MachineLoop *a2)
{
  _QWORD *v4;
  uint64_t ****v5;
  uint64_t v6;
  uint64_t result;
  int data;
  uint64_t v9;
  int v10;
  uint64_t ****v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t ****v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  void **v26;
  char *v27;
  unint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  void **v34;
  unint64_t v35;
  void **v36;
  uint64_t v37;
  uint64_t *TopBlock;
  uint64_t (**v39)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t ****v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  void **v49;
  unint64_t v50;
  void **v51;
  uint64_t ****v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  void **v61;
  unint64_t v62;
  void **v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  void **v68;
  unint64_t v69;
  void **v70;
  std::string v71;
  void *__p;
  char v73;
  unsigned __int8 *v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t (**v80)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  const char *v87;
  const char *v88;
  uint64_t v89;
  char v90;
  char v91;
  void *v92;
  uint64_t v93;
  _BYTE v94[256];
  char v95;
  int v96;
  uint64_t v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)*((_QWORD *)a2 + 4);
  if (((*((_QWORD *)a2 + 5) - (_QWORD)v4) & 0x7FFFFFFF8) != 8)
  {
    v11 = (uint64_t ****)*((_QWORD *)this + 32);
    v12 = *(_QWORD *)****v11;
    if (!*(_QWORD *)(v12 + 128))
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 72) + 48))(*(_QWORD *)(v12 + 72));
      if (!(_DWORD)result)
        return result;
    }
    llvm::MachineLoop::getStartLoc(a2, &v74);
    v13 = (int)v74;
    if (v74)
    {
      v14 = *(_QWORD *)&v74[-8 * *((unsigned int *)v74 + 2)];
      if (*(_BYTE *)v14 != 15)
        v14 = *(_QWORD *)(v14 - 8 * *(unsigned int *)(v14 + 8));
      v15 = *((_DWORD *)v74 + 1);
      v13 = *((unsigned __int16 *)v74 + 1);
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    v21 = **((_QWORD **)a2 + 4);
    v22 = **(_QWORD **)(v21 + 32);
    v81 = 17;
    v82 = 2;
    v83 = v22;
    v84 = v14;
    v85 = v15;
    v86 = v13;
    v87 = "pipeliner";
    v88 = "canPipelineLoop";
    v89 = 15;
    v90 = 0;
    v91 = 0;
    v92 = v94;
    v93 = 0x400000000;
    v95 = 0;
    v96 = -1;
    v97 = v21;
    v80 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&unk_1E8144BB0;
    v75 = "Not a single basic block: ";
    v76 = 26;
    sub_1C53B17B4((uint64_t)&v92, (const void **)&v75);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v71, "NumBlocks", 9uLL, (*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
    v23 = sub_1C47E3888((uint64_t)&v80, (uint64_t)&v71);
    sub_1C61F875C((uint64_t)&v75, v23);
    v75 = (const char *)&unk_1E8144BB0;
    if (v73 < 0)
      operator delete(__p);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
    v80 = &off_1E814E790;
    v24 = (char *)v92;
    if ((_DWORD)v93)
    {
      v25 = (unint64_t)v93 << 6;
      do
      {
        v26 = (void **)&v24[v25];
        if (v24[v25 - 17] < 0)
          operator delete(*(v26 - 5));
        if (*((char *)v26 - 41) < 0)
          operator delete(*(v26 - 8));
        v25 -= 64;
      }
      while (v25);
      v24 = (char *)v92;
    }
    if (v24 != v94)
      free(v24);
    if (v74)
      llvm::MetadataTracking::untrack((uint64_t)&v74, v74);
    llvm::MachineOptimizationRemarkEmitter::emit(v11, (llvm::DiagnosticInfoOptimizationBase *)&v75);
    v75 = (const char *)&off_1E814E790;
    v27 = (char *)v77;
    if (!v78)
      goto LABEL_95;
    v28 = (unint64_t)v78 << 6;
    do
    {
      v29 = (void **)&v27[v28];
      if (v27[v28 - 17] < 0)
        operator delete(*(v29 - 5));
      if (*((char *)v29 - 41) < 0)
        operator delete(*(v29 - 8));
      v28 -= 64;
    }
    while (v28);
    goto LABEL_94;
  }
  if (*((_BYTE *)this + 536))
  {
    v5 = (uint64_t ****)*((_QWORD *)this + 32);
    v6 = *(_QWORD *)****v5;
    if (!*(_QWORD *)(v6 + 128))
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 72) + 48))(*(_QWORD *)(v6 + 72));
      if (!(_DWORD)result)
        return result;
    }
    llvm::MachineLoop::getStartLoc(a2, (unsigned __int8 **)&v71);
    data = (int)v71.__r_.__value_.__l.__data_;
    if (v71.__r_.__value_.__r.__words[0])
    {
      v9 = *(_QWORD *)(v71.__r_.__value_.__r.__words[0] - 8 * *(unsigned int *)(v71.__r_.__value_.__r.__words[0] + 8));
      if (*(_BYTE *)v9 != 15)
        v9 = *(_QWORD *)(v9 - 8 * *(unsigned int *)(v9 + 8));
      v10 = *(_DWORD *)(v71.__r_.__value_.__r.__words[0] + 4);
      data = *(unsigned __int16 *)(v71.__r_.__value_.__r.__words[0] + 2);
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
    v30 = **((_QWORD **)a2 + 4);
    v31 = **(_QWORD **)(v30 + 32);
    v81 = 17;
    v82 = 2;
    v83 = v31;
    v84 = v9;
    v85 = v10;
    v86 = data;
    v87 = "pipeliner";
    v88 = "canPipelineLoop";
    v89 = 15;
    v90 = 0;
    v91 = 0;
    v92 = v94;
    v93 = 0x400000000;
    v95 = 0;
    v96 = -1;
    v97 = v30;
    v80 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&unk_1E8144BB0;
    v75 = "Disabled by Pragma.";
    v76 = 19;
    sub_1C53B17B4((uint64_t)&v92, (const void **)&v75);
    sub_1C61F875C((uint64_t)&v75, (uint64_t)&v80);
    v75 = (const char *)&unk_1E8144BB0;
    v80 = &off_1E814E790;
    v32 = (char *)v92;
    if ((_DWORD)v93)
    {
      v33 = (unint64_t)v93 << 6;
      do
      {
        v34 = (void **)&v32[v33];
        if (v32[v33 - 17] < 0)
          operator delete(*(v34 - 5));
        if (*((char *)v34 - 41) < 0)
          operator delete(*(v34 - 8));
        v33 -= 64;
      }
      while (v33);
      v32 = (char *)v92;
    }
    if (v32 != v94)
      free(v32);
    if (v71.__r_.__value_.__r.__words[0])
      llvm::MetadataTracking::untrack((uint64_t)&v71, (unsigned __int8 *)v71.__r_.__value_.__l.__data_);
    llvm::MachineOptimizationRemarkEmitter::emit(v5, (llvm::DiagnosticInfoOptimizationBase *)&v75);
    v75 = (const char *)&off_1E814E790;
    v27 = (char *)v77;
    if (!v78)
      goto LABEL_95;
    v35 = (unint64_t)v78 << 6;
    do
    {
      v36 = (void **)&v27[v35];
      if (v27[v35 - 17] < 0)
        operator delete(*(v36 - 5));
      if (*((char *)v36 - 41) < 0)
        operator delete(*(v36 - 8));
      v35 -= 64;
    }
    while (v35);
    goto LABEL_94;
  }
  *((_DWORD *)this + 142) = 0;
  *((_OWORD *)this + 34) = 0u;
  if ((*(unsigned int (**)(_QWORD, _QWORD, char *, char *, char *, _QWORD))(**((_QWORD **)this + 36) + 248))(*((_QWORD *)this + 36), *v4, (char *)this + 544, (char *)this + 552, (char *)this + 560, 0))
  {
    v16 = (uint64_t ****)*((_QWORD *)this + 32);
    v17 = *(_QWORD *)****v16;
    if (!*(_QWORD *)(v17 + 128))
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 72) + 48))(*(_QWORD *)(v17 + 72));
      if (!(_DWORD)result)
        return result;
    }
    llvm::MachineLoop::getStartLoc(a2, (unsigned __int8 **)&v71);
    v18 = (int)v71.__r_.__value_.__l.__data_;
    if (v71.__r_.__value_.__r.__words[0])
    {
      v19 = *(_QWORD *)(v71.__r_.__value_.__r.__words[0] - 8 * *(unsigned int *)(v71.__r_.__value_.__r.__words[0] + 8));
      if (*(_BYTE *)v19 != 15)
        v19 = *(_QWORD *)(v19 - 8 * *(unsigned int *)(v19 + 8));
      v20 = *(_DWORD *)(v71.__r_.__value_.__r.__words[0] + 4);
      v18 = *(unsigned __int16 *)(v71.__r_.__value_.__r.__words[0] + 2);
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
    v45 = **((_QWORD **)a2 + 4);
    v46 = **(_QWORD **)(v45 + 32);
    v81 = 17;
    v82 = 2;
    v83 = v46;
    v84 = v19;
    v85 = v20;
    v86 = v18;
    v87 = "pipeliner";
    v88 = "canPipelineLoop";
    v89 = 15;
    v90 = 0;
    v91 = 0;
    v92 = v94;
    v93 = 0x400000000;
    v95 = 0;
    v96 = -1;
    v97 = v45;
    v80 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&unk_1E8144BB0;
    v75 = "The branch can't be understood";
    v76 = 30;
    sub_1C53B17B4((uint64_t)&v92, (const void **)&v75);
    sub_1C61F875C((uint64_t)&v75, (uint64_t)&v80);
    v75 = (const char *)&unk_1E8144BB0;
    v80 = &off_1E814E790;
    v47 = (char *)v92;
    if ((_DWORD)v93)
    {
      v48 = (unint64_t)v93 << 6;
      do
      {
        v49 = (void **)&v47[v48];
        if (v47[v48 - 17] < 0)
          operator delete(*(v49 - 5));
        if (*((char *)v49 - 41) < 0)
          operator delete(*(v49 - 8));
        v48 -= 64;
      }
      while (v48);
      v47 = (char *)v92;
    }
    if (v47 != v94)
      free(v47);
    if (v71.__r_.__value_.__r.__words[0])
      llvm::MetadataTracking::untrack((uint64_t)&v71, (unsigned __int8 *)v71.__r_.__value_.__l.__data_);
    llvm::MachineOptimizationRemarkEmitter::emit(v16, (llvm::DiagnosticInfoOptimizationBase *)&v75);
    v75 = (const char *)&off_1E814E790;
    v27 = (char *)v77;
    if (!v78)
      goto LABEL_95;
    v50 = (unint64_t)v78 << 6;
    do
    {
      v51 = (void **)&v27[v50];
      if (v27[v50 - 17] < 0)
        operator delete(*(v51 - 5));
      if (*((char *)v51 - 41) < 0)
        operator delete(*(v51 - 8));
      v50 -= 64;
    }
    while (v50);
    goto LABEL_94;
  }
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 88) = 0;
  v37 = *((_QWORD *)this + 36);
  TopBlock = llvm::MachineLoop::getTopBlock(a2);
  (*(void (**)(uint64_t (***__return_ptr)(llvm::DiagnosticInfoWithLocationBase *__hidden), uint64_t, uint64_t *))(*(_QWORD *)v37 + 280))(&v80, v37, TopBlock);
  v39 = v80;
  v80 = 0;
  if (!v39)
  {
    v52 = (uint64_t ****)*((_QWORD *)this + 32);
    v53 = *(_QWORD *)****v52;
    if (!*(_QWORD *)(v53 + 128))
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v53 + 72) + 48))(*(_QWORD *)(v53 + 72));
      if (!(_DWORD)result)
        return result;
    }
    llvm::MachineLoop::getStartLoc(a2, (unsigned __int8 **)&v71);
    v54 = (int)v71.__r_.__value_.__l.__data_;
    if (v71.__r_.__value_.__r.__words[0])
    {
      v55 = *(_QWORD *)(v71.__r_.__value_.__r.__words[0] - 8 * *(unsigned int *)(v71.__r_.__value_.__r.__words[0] + 8));
      if (*(_BYTE *)v55 != 15)
        v55 = *(_QWORD *)(v55 - 8 * *(unsigned int *)(v55 + 8));
      v56 = *(_DWORD *)(v71.__r_.__value_.__r.__words[0] + 4);
      v54 = *(unsigned __int16 *)(v71.__r_.__value_.__r.__words[0] + 2);
    }
    else
    {
      v55 = 0;
      v56 = 0;
    }
    v64 = **((_QWORD **)a2 + 4);
    v65 = **(_QWORD **)(v64 + 32);
    v81 = 17;
    v82 = 2;
    v83 = v65;
    v84 = v55;
    v85 = v56;
    v86 = v54;
    v87 = "pipeliner";
    v88 = "canPipelineLoop";
    v89 = 15;
    v90 = 0;
    v91 = 0;
    v92 = v94;
    v93 = 0x400000000;
    v95 = 0;
    v96 = -1;
    v97 = v64;
    v80 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&unk_1E8144BB0;
    v75 = "The loop structure is not supported";
    v76 = 35;
    sub_1C53B17B4((uint64_t)&v92, (const void **)&v75);
    sub_1C61F875C((uint64_t)&v75, (uint64_t)&v80);
    v75 = (const char *)&unk_1E8144BB0;
    v80 = &off_1E814E790;
    v66 = (char *)v92;
    if ((_DWORD)v93)
    {
      v67 = (unint64_t)v93 << 6;
      do
      {
        v68 = (void **)&v66[v67];
        if (v66[v67 - 17] < 0)
          operator delete(*(v68 - 5));
        if (*((char *)v68 - 41) < 0)
          operator delete(*(v68 - 8));
        v67 -= 64;
      }
      while (v67);
      v66 = (char *)v92;
    }
    if (v66 != v94)
      free(v66);
    if (v71.__r_.__value_.__r.__words[0])
      llvm::MetadataTracking::untrack((uint64_t)&v71, (unsigned __int8 *)v71.__r_.__value_.__l.__data_);
    llvm::MachineOptimizationRemarkEmitter::emit(v52, (llvm::DiagnosticInfoOptimizationBase *)&v75);
    v75 = (const char *)&off_1E814E790;
    v27 = (char *)v77;
    if (!v78)
      goto LABEL_95;
    v69 = (unint64_t)v78 << 6;
    do
    {
      v70 = (void **)&v27[v69];
      if (v27[v69 - 17] < 0)
        operator delete(*(v70 - 5));
      if (*((char *)v70 - 41) < 0)
        operator delete(*(v70 - 8));
      v69 -= 64;
    }
    while (v69);
    goto LABEL_94;
  }
  (*((void (**)(uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden)))*v39 + 1))(v39);
  if (llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPreheader((uint64_t)a2))
  {
    llvm::MachinePipeliner::preprocessPhiNodes(this, **((llvm::MachineBasicBlock ***)a2 + 4));
    return 1;
  }
  v40 = (uint64_t ****)*((_QWORD *)this + 32);
  v41 = *(_QWORD *)****v40;
  if (*(_QWORD *)(v41 + 128)
    || (result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v41 + 72) + 48))(*(_QWORD *)(v41 + 72)),
        (_DWORD)result))
  {
    llvm::MachineLoop::getStartLoc(a2, (unsigned __int8 **)&v71);
    v42 = (int)v71.__r_.__value_.__l.__data_;
    if (v71.__r_.__value_.__r.__words[0])
    {
      v43 = *(_QWORD *)(v71.__r_.__value_.__r.__words[0] - 8 * *(unsigned int *)(v71.__r_.__value_.__r.__words[0] + 8));
      if (*(_BYTE *)v43 != 15)
        v43 = *(_QWORD *)(v43 - 8 * *(unsigned int *)(v43 + 8));
      v44 = *(_DWORD *)(v71.__r_.__value_.__r.__words[0] + 4);
      v42 = *(unsigned __int16 *)(v71.__r_.__value_.__r.__words[0] + 2);
    }
    else
    {
      v43 = 0;
      v44 = 0;
    }
    v57 = **((_QWORD **)a2 + 4);
    v58 = **(_QWORD **)(v57 + 32);
    v81 = 17;
    v82 = 2;
    v83 = v58;
    v84 = v43;
    v85 = v44;
    v86 = v42;
    v87 = "pipeliner";
    v88 = "canPipelineLoop";
    v89 = 15;
    v90 = 0;
    v91 = 0;
    v92 = v94;
    v93 = 0x400000000;
    v95 = 0;
    v96 = -1;
    v97 = v57;
    v80 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&unk_1E8144BB0;
    v75 = "No loop preheader found";
    v76 = 23;
    sub_1C53B17B4((uint64_t)&v92, (const void **)&v75);
    sub_1C61F875C((uint64_t)&v75, (uint64_t)&v80);
    v75 = (const char *)&unk_1E8144BB0;
    v80 = &off_1E814E790;
    v59 = (char *)v92;
    if ((_DWORD)v93)
    {
      v60 = (unint64_t)v93 << 6;
      do
      {
        v61 = (void **)&v59[v60];
        if (v59[v60 - 17] < 0)
          operator delete(*(v61 - 5));
        if (*((char *)v61 - 41) < 0)
          operator delete(*(v61 - 8));
        v60 -= 64;
      }
      while (v60);
      v59 = (char *)v92;
    }
    if (v59 != v94)
      free(v59);
    if (v71.__r_.__value_.__r.__words[0])
      llvm::MetadataTracking::untrack((uint64_t)&v71, (unsigned __int8 *)v71.__r_.__value_.__l.__data_);
    llvm::MachineOptimizationRemarkEmitter::emit(v40, (llvm::DiagnosticInfoOptimizationBase *)&v75);
    v75 = (const char *)&off_1E814E790;
    v27 = (char *)v77;
    if (!v78)
      goto LABEL_95;
    v62 = (unint64_t)v78 << 6;
    do
    {
      v63 = (void **)&v27[v62];
      if (v27[v62 - 17] < 0)
        operator delete(*(v63 - 5));
      if (*((char *)v63 - 41) < 0)
        operator delete(*(v63 - 8));
      v62 -= 64;
    }
    while (v62);
LABEL_94:
    v27 = (char *)v77;
LABEL_95:
    if (v27 != (char *)&v79)
      free(v27);
    return 0;
  }
  return result;
}

void llvm::SwingSchedulerDAG::schedule(llvm::SwingSchedulerDAG *this)
{
  void **v2;
  void *v3;
  llvm::AAResults *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  uint64_t ****v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  char *v27;
  _BYTE *v28;
  uint64_t v29;
  char *v30;
  uint64_t ****v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  __n128 *v42;
  const std::nothrow_t *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  void **v52;
  char *v53;
  unint64_t v54;
  void **v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  BOOL v59;
  int v60;
  uint64_t ****v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t ****v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t ****v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  void **v81;
  char *v82;
  unint64_t v83;
  void **v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  void **v89;
  unint64_t v90;
  void **v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  void **v99;
  unint64_t v100;
  void **v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  void **v108;
  unint64_t v109;
  void **v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  unint64_t v114;
  void **v115;
  char *v116;
  unint64_t v117;
  void **v118;
  char *v119;
  char *v120;
  char *v121;
  int v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD **v139;
  _QWORD **v140;
  _QWORD *v141;
  unint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD *v151;
  int v152;
  int v153;
  int v154;
  void **v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  const char *v167;
  unsigned __int8 *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD v174[2];
  int v175;
  _QWORD v176[2];
  int v177;
  void *v178;
  void *v179;
  char *v180;
  unsigned __int8 *v181;
  _QWORD v182[2];
  void *v183;
  uint64_t v184;
  int v185;
  char v186;
  void *v187;
  char v188;
  void *v189;
  uint64_t v190;
  int v191;
  char v192;
  void *__p;
  char v194;
  void **v195;
  void **v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  const char *v200;
  const char *v201;
  uint64_t v202;
  void **v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  _QWORD v207[2];
  __int128 v208;
  _QWORD v209[6];
  int v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  _QWORD *v229;
  uint64_t v230;
  _QWORD v231[5];
  const char *v232;
  uint64_t v233;
  int v234;
  _QWORD **v235;
  _QWORD *v236[2];
  uint64_t v237;
  int v238;
  _QWORD *v239;
  uint64_t v240;
  void *v241;
  unsigned int v242;
  uint64_t v243;
  void *v244;
  uint64_t v245;
  _BYTE v246[704];
  void *v247;
  uint64_t v248;
  _BYTE v249[704];
  void *v250;
  uint64_t v251;
  char v252;
  void *v253;
  char v254;
  void *v255;
  unsigned int v256;
  _QWORD v257[36];

  v257[34] = *MEMORY[0x1E0C80C00];
  v2 = **(void ****)(*((_QWORD *)this + 329) + 8);
  do
  {
    v3 = *v2;
    v2 += 2;
  }
  while (v3 != &llvm::AAResultsWrapperPass::ID);
  v4 = *(llvm::AAResults **)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v2 - 1) + 96))(*(v2 - 1), &llvm::AAResultsWrapperPass::ID)+ 32);
  llvm::ScheduleDAGInstrs::buildSchedGraph(this, v4, 0, 0, 0, 0);
  llvm::SwingSchedulerDAG::addLoopCarriedDependences((llvm::Type *****)this, v4);
  llvm::SwingSchedulerDAG::updatePhiDependences(this);
  llvm::ScheduleDAGTopologicalSort::InitDAGTopologicalSorting((uint64_t **)this + 336);
  llvm::SwingSchedulerDAG::changeDependences(this);
  v5 = (uint64_t *)*((_QWORD *)this + 403);
  v6 = (uint64_t *)*((_QWORD *)this + 404);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, llvm::SwingSchedulerDAG *))(*(_QWORD *)v7 + 24))(v7, this);
  }
  v247 = v249;
  v248 = 0x800000000;
  llvm::SwingSchedulerDAG::findCircuits((uint64_t)this, (uint64_t)&v247);
  v244 = v246;
  v245 = 0x800000000;
  v8 = v248;
  if ((_DWORD)v248)
  {
    if (v248 <= 8)
    {
      v9 = (char *)v247;
      v10 = (char *)v247 + 88 * v248;
    }
    else
    {
      sub_1C61F882C((uint64_t)&v244, v248);
      if (!(_DWORD)v248)
      {
LABEL_13:
        LODWORD(v245) = v8;
        goto LABEL_14;
      }
      v9 = (char *)v247;
      v10 = (char *)v247 + 88 * v248;
    }
    v11 = v244;
    do
    {
      *v11 = 0;
      v11[1] = 0;
      *((_DWORD *)v11 + 4) = 0;
      sub_1C4DFE328((uint64_t)v11, (uint64_t)v9);
      v11[3] = 0;
      v11[4] = 0;
      v12 = (char *)(v11 + 3);
      *((_QWORD *)v12 + 2) = 0;
      sub_1C4DFE394(v12, *((const void **)v9 + 3), *((_QWORD *)v9 + 4), (uint64_t)(*((_QWORD *)v9 + 4) - *((_QWORD *)v9 + 3)) >> 3);
      v13 = *((_OWORD *)v9 + 3);
      v14 = *((_OWORD *)v9 + 4);
      *((_DWORD *)v12 + 14) = *((_DWORD *)v9 + 20);
      *(_OWORD *)(v12 + 40) = v14;
      *(_OWORD *)(v12 + 24) = v13;
      v9 += 88;
      v11 = v12 + 64;
    }
    while (v9 != v10);
    goto LABEL_13;
  }
LABEL_14:
  v15 = llvm::SwingSchedulerDAG::calculateResMII(this);
  v16 = v15;
  if ((_DWORD)v248)
  {
    v17 = 0;
    v18 = 88 * v248;
    v19 = (unsigned int *)((char *)v247 + 52);
    do
    {
      if (*(_QWORD *)(v19 - 7) != *(_QWORD *)(v19 - 5))
      {
        v20 = v19[7];
        *v19 = v20;
        if (v20 > v17)
          v17 = v20;
      }
      v19 += 22;
      v18 -= 88;
    }
    while (v18);
  }
  else
  {
    v17 = 0;
  }
  llvm::SwingSchedulerDAG::fuseRecs(v15, (uint64_t)&v247);
  v21 = *((_DWORD *)this + 670);
  if (v21)
  {
    *((_DWORD *)this + 660) = v21;
    *((_DWORD *)this + 661) = v21;
    goto LABEL_29;
  }
  if (byte_1ED7FB860)
    v21 = 0;
  else
    v21 = v17;
  if (v16 > v21)
    v21 = v16;
  *((_DWORD *)this + 660) = v21;
  *((_DWORD *)this + 661) = v21 + 10;
  if (v21)
  {
LABEL_29:
    v22 = dword_1ED7FB560 == -1 || v21 <= dword_1ED7FB560;
    if (!v22)
    {
      v23 = *(uint64_t *****)(*((_QWORD *)this + 329) + 256);
      v24 = *(_QWORD *)****v23;
      if (!*(_QWORD *)(v24 + 128)
        && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v24 + 72) + 48))(*(_QWORD *)(v24 + 72)))
      {
        goto LABEL_35;
      }
      llvm::MachineLoop::getStartLoc(*((llvm::MachineLoop **)this + 332), (unsigned __int8 **)&v183);
      v36 = v183;
      if (v183)
      {
        v37 = *((_QWORD *)v183 - *((unsigned int *)v183 + 2));
        if (*(_BYTE *)v37 != 15)
          v37 = *(_QWORD *)(v37 - 8 * *(unsigned int *)(v37 + 8));
        v38 = *((_DWORD *)v183 + 1);
        v36 = *((unsigned __int16 *)v183 + 1);
      }
      else
      {
        v37 = 0;
        v38 = 0;
      }
      v46 = **(_QWORD **)(*((_QWORD *)this + 332) + 32);
      v47 = **(_QWORD **)(v46 + 32);
      LODWORD(v196) = 17;
      BYTE4(v196) = 2;
      v197 = v47;
      v198 = v37;
      v199 = __PAIR64__(v36, v38);
      v200 = "pipeliner";
      v201 = "schedule";
      v202 = 8;
      LOBYTE(v203) = 0;
      LOBYTE(v204) = 0;
      v205 = v207;
      v206 = 0x400000000;
      BYTE8(v227) = 0;
      HIDWORD(v227) = -1;
      *(_QWORD *)&v228 = v46;
      v195 = (void **)&unk_1E8144BB0;
      v232 = "Minimal Initiation Interval too large: ";
      v233 = 39;
      sub_1C53B17B4((uint64_t)&v205, (const void **)&v232);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v250, "MII", 3uLL, *((_DWORD *)this + 660));
      v48 = sub_1C47E3888((uint64_t)&v195, (uint64_t)&v250);
      v232 = " > ";
      v233 = 3;
      sub_1C53B17B4(v48 + 80, (const void **)&v232);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v189, "SwpMaxMii", 9uLL, dword_1ED7FB560);
      v49 = sub_1C47E3888(v48, (uint64_t)&v189);
      v232 = ".";
      v233 = 1;
      sub_1C53B17B4(v49 + 80, (const void **)&v232);
      v232 = "Refer to -pipeliner-max-mii.";
      v233 = 28;
      sub_1C53B17B4(v49 + 80, (const void **)&v232);
      sub_1C61F875C((uint64_t)&v232, v49);
      v232 = (const char *)&unk_1E8144BB0;
      if (v194 < 0)
        operator delete(__p);
      if (v192 < 0)
        operator delete(v189);
      if (v254 < 0)
        operator delete(v253);
      if (v252 < 0)
        operator delete(v250);
      v195 = (void **)&off_1E814E790;
      v50 = (char *)v205;
      if ((_DWORD)v206)
      {
        v51 = (unint64_t)v206 << 6;
        do
        {
          v52 = (void **)&v50[v51];
          if (v50[v51 - 17] < 0)
            operator delete(*(v52 - 5));
          if (*((char *)v52 - 41) < 0)
            operator delete(*(v52 - 8));
          v51 -= 64;
        }
        while (v51);
        v50 = (char *)v205;
      }
      if (v50 != (char *)v207)
        free(v50);
      if (v183)
        llvm::MetadataTracking::untrack((uint64_t)&v183, (unsigned __int8 *)v183);
      llvm::MachineOptimizationRemarkEmitter::emit(v23, (llvm::DiagnosticInfoOptimizationBase *)&v232);
      v232 = (const char *)&off_1E814E790;
      v53 = (char *)v241;
      if (!v242)
        goto LABEL_90;
      v54 = (unint64_t)v242 << 6;
      do
      {
        v55 = (void **)&v53[v54];
        if (v53[v54 - 17] < 0)
          operator delete(*(v55 - 5));
        if (*((char *)v55 - 41) < 0)
          operator delete(*(v55 - 8));
        v54 -= 64;
      }
      while (v54);
      goto LABEL_89;
    }
    llvm::SwingSchedulerDAG::computeNodeFunctions((uint64_t)this, (uint64_t *)&v247);
    llvm::SwingSchedulerDAG::registerPressureFilter((uint64_t *)this, (uint64_t)&v247);
    llvm::SwingSchedulerDAG::colocateNodeSets(v39, (uint64_t *)&v247);
    llvm::SwingSchedulerDAG::checkNodeSets(this, &v247);
    v40 = v247;
    v41 = v248;
    v42 = (__n128 *)((char *)v247 + 88 * v248);
    if ((_DWORD)v248)
    {
      v43 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v44 = v248;
      while (1)
      {
        v45 = operator new(88 * v44, v43);
        if (v45)
          break;
        v22 = v44 > 1;
        v44 >>= 1;
        if (!v22)
          goto LABEL_58;
      }
      v56 = v45;
      sub_1C5191D6C((uint64_t)v40, v42, v41, (uint64_t)v45, v44);
      operator delete(v56);
    }
    else
    {
LABEL_58:
      sub_1C5191D6C((uint64_t)v40, v42, v41, 0, 0);
    }
    v57 = llvm::SwingSchedulerDAG::groupRemainingNodes((uint64_t)this, (uint64_t)&v247);
    llvm::SwingSchedulerDAG::removeDuplicateNodes((uint64_t)v57, (uint64_t *)&v247);
    llvm::SwingSchedulerDAG::computeNodeOrder((uint64_t)this, (uint64_t)&v247);
    llvm::SwingSchedulerDAG::checkValidNodeOrder((uint64_t)this, (uint64_t *)&v244);
    v58 = *(_QWORD *)(*((_QWORD *)this + 329) + 248);
    v234 = 0;
    v233 = 0;
    v232 = 0;
    v236[1] = 0;
    v236[0] = 0;
    v235 = v236;
    v237 = 0;
    v238 = 0;
    v239 = *(_QWORD **)(v58 + 16);
    v240 = *(_QWORD *)(v58 + 40);
    sub_1C61F7D34((uint64_t)&v241, v239);
    v59 = llvm::SwingSchedulerDAG::schedulePipeline(this, (llvm::SMSchedule *)&v232);
    *((_BYTE *)this + 2648) = v59;
    if (v59)
    {
      v60 = (HIDWORD(v237) - (int)v237) / v238;
      if (v60)
      {
        v71 = *(uint64_t *****)(*((_QWORD *)this + 329) + 256);
        v72 = *(_QWORD *)****v71;
        v73 = *(_QWORD *)(v72 + 128);
        if (dword_1ED7FB620 < 0 || v60 <= dword_1ED7FB620)
        {
          if (v73 || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v72 + 72) + 48))(*(_QWORD *)(v72 + 72)))
          {
            llvm::MachineLoop::getStartLoc(*((llvm::MachineLoop **)this + 332), (unsigned __int8 **)&v189);
            v92 = v189;
            if (v189)
            {
              v93 = *((_QWORD *)v189 - *((unsigned int *)v189 + 2));
              if (*(_BYTE *)v93 != 15)
                v93 = *(_QWORD *)(v93 - 8 * *(unsigned int *)(v93 + 8));
              v94 = *((_DWORD *)v189 + 1);
              v92 = *((unsigned __int16 *)v189 + 1);
            }
            else
            {
              v93 = 0;
              v94 = 0;
            }
            v111 = **(_QWORD **)(*((_QWORD *)this + 332) + 32);
            v112 = **(_QWORD **)(v111 + 32);
            LODWORD(v196) = 15;
            BYTE4(v196) = 2;
            v197 = v112;
            v198 = v93;
            v199 = __PAIR64__(v92, v94);
            v200 = "pipeliner";
            v201 = "schedule";
            v202 = 8;
            LOBYTE(v203) = 0;
            LOBYTE(v204) = 0;
            v205 = v207;
            v206 = 0x400000000;
            BYTE8(v227) = 0;
            HIDWORD(v227) = -1;
            *(_QWORD *)&v228 = v111;
            v195 = (void **)&unk_1E8141E08;
            v250 = "Pipelined succesfully!";
            v251 = 22;
            sub_1C53B17B4((uint64_t)&v205, (const void **)&v250);
            sub_1C61F875C((uint64_t)&v250, (uint64_t)&v195);
            v250 = &unk_1E8141E08;
            v195 = (void **)&off_1E814E790;
            v113 = (char *)v205;
            if ((_DWORD)v206)
            {
              v114 = (unint64_t)v206 << 6;
              do
              {
                v115 = (void **)&v113[v114];
                if (v113[v114 - 17] < 0)
                  operator delete(*(v115 - 5));
                if (*((char *)v115 - 41) < 0)
                  operator delete(*(v115 - 8));
                v114 -= 64;
              }
              while (v114);
              v113 = (char *)v205;
            }
            if (v113 != (char *)v207)
              free(v113);
            if (v189)
              llvm::MetadataTracking::untrack((uint64_t)&v189, (unsigned __int8 *)v189);
            llvm::MachineOptimizationRemarkEmitter::emit(v71, (llvm::DiagnosticInfoOptimizationBase *)&v250);
            v250 = &off_1E814E790;
            v116 = (char *)v255;
            if (v256)
            {
              v117 = (unint64_t)v256 << 6;
              do
              {
                v118 = (void **)&v116[v117];
                if (v116[v117 - 17] < 0)
                  operator delete(*(v118 - 5));
                if (*((char *)v118 - 41) < 0)
                  operator delete(*(v118 - 8));
                v117 -= 64;
              }
              while (v117);
              v116 = (char *)v255;
            }
            if (v116 != (char *)v257)
              free(v116);
          }
          v119 = 0;
          v120 = 0;
          v121 = 0;
          v189 = 0;
          v190 = 0;
          v191 = 0;
          v183 = 0;
          v184 = 0;
          v185 = 0;
          if (v238 >= 1)
          {
            v121 = 0;
            v120 = 0;
            v119 = 0;
            v122 = v237;
            do
            {
              LODWORD(v195) = v122;
              v123 = sub_1C61F81C8((uint64_t)&v232, (int *)&v195);
              v124 = v123[2];
              if (v123[3] != v124)
              {
                v125 = v123[5];
                v126 = (_QWORD *)(v124 + 8 * (v125 >> 9));
                v127 = *v126 + 8 * (v125 & 0x1FF);
                v128 = *(_QWORD *)(v124 + (((v123[6] + v125) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * ((v123[6] + v125) & 0x1FF);
                v172 = v128;
                while (v127 != v128)
                {
                  v129 = *(_QWORD *)v127;
                  v130 = *(_QWORD *)(*(_QWORD *)v127 + 8);
                  v173 = v126;
                  if (v120 >= v119)
                  {
                    v131 = (v120 - v121) >> 3;
                    v132 = v131 + 1;
                    if ((unint64_t)(v131 + 1) >> 61)
                      abort();
                    if ((v119 - v121) >> 2 > v132)
                      v132 = (v119 - v121) >> 2;
                    if ((unint64_t)(v119 - v121) >= 0x7FFFFFFFFFFFFFF8)
                      v133 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v133 = v132;
                    if (v133)
                    {
                      if (v133 >> 61)
                        sub_1C4764EE4();
                      v134 = (char *)operator new(8 * v133);
                    }
                    else
                    {
                      v134 = 0;
                    }
                    v135 = &v134[8 * v131];
                    *(_QWORD *)v135 = v130;
                    v136 = v135 + 8;
                    while (v120 != v121)
                    {
                      v137 = *((_QWORD *)v120 - 1);
                      v120 -= 8;
                      *((_QWORD *)v135 - 1) = v137;
                      v135 -= 8;
                    }
                    v119 = &v134[8 * v133];
                    if (v121)
                      operator delete(v121);
                    v121 = v135;
                    v120 = v136;
                  }
                  else
                  {
                    *(_QWORD *)v120 = v130;
                    v120 += 8;
                  }
                  v195 = *(void ***)(v129 + 8);
                  *((_DWORD *)sub_1C6128C08((uint64_t *)&v189, &v195) + 2) = v122;
                  v138 = v236[0];
                  if (!v236[0])
                    goto LABEL_276;
                  v139 = v236;
                  do
                  {
                    v140 = v139;
                    v141 = v138;
                    v142 = v138[4];
                    v143 = v138 + 1;
                    if (v142 >= v129)
                    {
                      v143 = v141;
                      v139 = (_QWORD **)v141;
                    }
                    v138 = (_QWORD *)*v143;
                  }
                  while (v138);
                  if (v139 != v236 && (v142 >= v129 ? (v144 = v141) : (v144 = v140), v144[4] <= v129))
                  {
                    if (v142 >= v129)
                      v140 = (_QWORD **)v141;
                    v145 = (*((_DWORD *)v140 + 10) - (int)v237) / v238;
                  }
                  else
                  {
LABEL_276:
                    v145 = -1;
                  }
                  v195 = *(void ***)(v129 + 8);
                  *((_DWORD *)sub_1C6128C08((uint64_t *)&v183, &v195) + 2) = v145;
                  v127 += 8;
                  v126 = v173;
                  if (v127 - *v173 == 4096)
                  {
                    v126 = v173 + 1;
                    v127 = v173[1];
                  }
                  v128 = v172;
                }
              }
              ++v122;
            }
            while (v122 < v238 + (int)v237);
          }
          v181 = 0;
          memset(v182, 0, 12);
          v146 = *((_QWORD *)this + 400);
          v147 = *((unsigned int *)this + 804);
          v148 = (_QWORD *)(v146 + 16 * v147);
          if (*((_DWORD *)this + 802))
          {
            if ((_DWORD)v147)
            {
              v150 = 16 * v147;
              v149 = (_QWORD *)*((_QWORD *)this + 400);
              while ((*v149 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v149 += 2;
                v150 -= 16;
                if (!v150)
                  goto LABEL_289;
              }
            }
            else
            {
              v149 = (_QWORD *)*((_QWORD *)this + 400);
            }
          }
          else
          {
LABEL_289:
            v149 = (_QWORD *)(v146 + 16 * v147);
          }
          v151 = (_QWORD *)(v146 + 16 * v147);
          while (v149 != v151)
          {
            v152 = *((_DWORD *)sub_1C6128C08((uint64_t *)&v189, v149 + 1) + 2);
            *((_DWORD *)sub_1C6128C08((uint64_t *)&v189, v149) + 2) = v152;
            v153 = *((_DWORD *)sub_1C6128C08((uint64_t *)&v183, v149 + 1) + 2);
            *((_DWORD *)sub_1C6128C08((uint64_t *)&v183, v149) + 2) = v153;
            v195 = (void **)*v149;
            v250 = 0;
            v154 = sub_1C61252B8((uint64_t *)this + 119, &v195, &v250);
            v155 = 0;
            if (v154)
              v155 = (void **)*((_QWORD *)v250 + 1);
            v195 = v155;
            v156 = sub_1C61F8928((uint64_t)this + 3176, (uint64_t *)&v195);
            v157 = sub_1C61F8928((uint64_t)&v181, v149);
            *((_DWORD *)v157 + 2) = *((_DWORD *)v156 + 2);
            v157[2] = v156[2];
            v158 = v149 + 2;
            v149 = v148;
            if (v158 != v148)
            {
              v149 = v158;
              while ((*v149 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v149 += 2;
                if (v149 == v148)
                {
                  v149 = v148;
                  break;
                }
              }
            }
          }
          v159 = *((_QWORD *)this + 4);
          v160 = *((_QWORD *)this + 332);
          v178 = v121;
          v179 = v120;
          v180 = v119;
          v176[0] = v189;
          v189 = 0;
          v176[1] = v190;
          v190 = 0;
          v177 = v191;
          v191 = 0;
          v174[0] = v183;
          v183 = 0;
          v174[1] = v184;
          v184 = 0;
          v175 = v185;
          v185 = 0;
          sub_1C5190EA4((uint64_t)&v250, v159, v160, (uint64_t)&v178, (uint64_t)v176, (uint64_t)v174);
          MEMORY[0x1CAA32FB4](v174[0], 8);
          MEMORY[0x1CAA32FB4](v176[0], 8);
          if (v178)
          {
            v179 = v178;
            operator delete(v178);
          }
          if (byte_1ED7FBAA0)
          {
            v195 = (void **)*((_QWORD *)this + 4);
            v196 = &v250;
            llvm::ModuloScheduleTestAnnotater::annotate((llvm::ModuloScheduleTestAnnotater *)&v195);
          }
          else
          {
            v161 = v182[0];
            if (!byte_1ED7FBB60 || LODWORD(v182[0]))
            {
              v166 = *((_QWORD *)this + 4);
              v167 = (const char *)*((_QWORD *)this + 333);
              v168 = v181;
              v181 = 0;
              v195 = &v250;
              v196 = (void **)v166;
              v169 = *(_QWORD *)(v166 + 16);
              v170 = *(_QWORD *)(v166 + 40);
              v197 = v169;
              v198 = v170;
              v199 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v169 + 104))(v169);
              v200 = v167;
              v203 = 0;
              v204 = 0;
              v205 = &v206;
              v206 = 0;
              v207[0] = 0;
              v207[1] = v168;
              LODWORD(v208) = v161;
              v171 = *(_QWORD *)((char *)v182 + 4);
              memset(v182, 0, 12);
              *(_QWORD *)((char *)&v208 + 4) = v171;
              MEMORY[0x1CAA32FB4](0, 8);
              llvm::ModuloScheduleExpander::expand((llvm::ModuloScheduleExpander *)&v195);
              llvm::ModuloScheduleExpander::cleanup((llvm::ModuloScheduleExpander *)&v195);
              sub_1C61F7BE8((uint64_t)&v195);
            }
            else
            {
              v162 = *((_QWORD *)this + 4);
              v163 = (const char *)*((_QWORD *)this + 333);
              v195 = &v250;
              v196 = (void **)v162;
              v164 = *(_QWORD *)(v162 + 16);
              v165 = *(_QWORD *)(v162 + 40);
              v197 = v164;
              v198 = v165;
              v199 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v164 + 104))(v164);
              v200 = v163;
              v203 = &v205;
              v204 = 0x400000000;
              *(_QWORD *)&v208 = v209;
              *((_QWORD *)&v208 + 1) = 0x400000000;
              v209[4] = 0;
              v209[5] = 0;
              v210 = 0;
              v211 = 0;
              v212 = 0;
              v213 = 0;
              v214 = 0;
              v215 = 0;
              v216 = 0;
              v217 = 0;
              v218 = 0;
              v219 = 0;
              v221 = 0;
              v220 = 0;
              v222 = 0;
              v227 = 0u;
              v228 = 0u;
              v225 = 0u;
              v226 = 0u;
              v223 = 0u;
              v224 = 0u;
              v229 = v231;
              v230 = 0x400000000;
              v231[4] = 0;
              llvm::PeelingModuloScheduleExpander::expand((llvm::PeelingModuloScheduleExpander *)&v195);
              sub_1C61F7AB4(&v195);
            }
          }
          sub_1C61F7C38(&v250);
          MEMORY[0x1CAA32FB4](v181, 8);
          MEMORY[0x1CAA32FB4](v183, 8);
          MEMORY[0x1CAA32FB4](v189, 8);
          goto LABEL_215;
        }
        if (v73 || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v72 + 72) + 48))(*(_QWORD *)(v72 + 72)))
        {
          llvm::MachineLoop::getStartLoc(*((llvm::MachineLoop **)this + 332), &v181);
          v74 = v181;
          if (v181)
          {
            v75 = *(_QWORD *)&v181[-8 * *((unsigned int *)v181 + 2)];
            if (*(_BYTE *)v75 != 15)
              v75 = *(_QWORD *)(v75 - 8 * *(unsigned int *)(v75 + 8));
            v76 = *((_DWORD *)v181 + 1);
            v74 = *((unsigned __int16 *)v181 + 1);
          }
          else
          {
            v75 = 0;
            v76 = 0;
          }
          v102 = **(_QWORD **)(*((_QWORD *)this + 332) + 32);
          v103 = **(_QWORD **)(v102 + 32);
          LODWORD(v196) = 17;
          BYTE4(v196) = 2;
          v197 = v103;
          v198 = v75;
          v199 = __PAIR64__(v74, v76);
          v200 = "pipeliner";
          v201 = "schedule";
          v202 = 8;
          LOBYTE(v203) = 0;
          LOBYTE(v204) = 0;
          v205 = v207;
          v206 = 0x400000000;
          BYTE8(v227) = 0;
          HIDWORD(v227) = -1;
          *(_QWORD *)&v228 = v102;
          v195 = (void **)&unk_1E8144BB0;
          v250 = "Too many stages in schedule: ";
          v251 = 29;
          sub_1C53B17B4((uint64_t)&v205, (const void **)&v250);
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v189, "numStages", 9uLL, v60);
          v104 = sub_1C47E3888((uint64_t)&v195, (uint64_t)&v189);
          v250 = " > ";
          v251 = 3;
          sub_1C53B17B4(v104 + 80, (const void **)&v250);
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v183, "SwpMaxStages", 0xCuLL, dword_1ED7FB620);
          v105 = sub_1C47E3888(v104, (uint64_t)&v183);
          v250 = ". Refer to -pipeliner-max-stages.";
          v251 = 33;
          sub_1C53B17B4(v105 + 80, (const void **)&v250);
          sub_1C61F875C((uint64_t)&v250, v105);
          v250 = &unk_1E8144BB0;
          if (v188 < 0)
            operator delete(v187);
          if (v186 < 0)
            operator delete(v183);
          if (v194 < 0)
            operator delete(__p);
          if (v192 < 0)
            operator delete(v189);
          v195 = (void **)&off_1E814E790;
          v106 = (char *)v205;
          if ((_DWORD)v206)
          {
            v107 = (unint64_t)v206 << 6;
            do
            {
              v108 = (void **)&v106[v107];
              if (v106[v107 - 17] < 0)
                operator delete(*(v108 - 5));
              if (*((char *)v108 - 41) < 0)
                operator delete(*(v108 - 8));
              v107 -= 64;
            }
            while (v107);
            v106 = (char *)v205;
          }
          if (v106 != (char *)v207)
            free(v106);
          if (v181)
            llvm::MetadataTracking::untrack((uint64_t)&v181, v181);
          llvm::MachineOptimizationRemarkEmitter::emit(v71, (llvm::DiagnosticInfoOptimizationBase *)&v250);
          v250 = &off_1E814E790;
          v82 = (char *)v255;
          if (!v256)
            goto LABEL_213;
          v109 = (unint64_t)v256 << 6;
          do
          {
            v110 = (void **)&v82[v109];
            if (v82[v109 - 17] < 0)
              operator delete(*(v110 - 5));
            if (*((char *)v110 - 41) < 0)
              operator delete(*(v110 - 8));
            v109 -= 64;
          }
          while (v109);
          goto LABEL_212;
        }
      }
      else
      {
        v61 = *(uint64_t *****)(*((_QWORD *)this + 329) + 256);
        v62 = *(_QWORD *)****v61;
        if (*(_QWORD *)(v62 + 128)
          || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v62 + 72) + 48))(*(_QWORD *)(v62 + 72)))
        {
          llvm::MachineLoop::getStartLoc(*((llvm::MachineLoop **)this + 332), (unsigned __int8 **)&v189);
          v63 = v189;
          if (v189)
          {
            v64 = *((_QWORD *)v189 - *((unsigned int *)v189 + 2));
            if (*(_BYTE *)v64 != 15)
              v64 = *(_QWORD *)(v64 - 8 * *(unsigned int *)(v64 + 8));
            v65 = *((_DWORD *)v189 + 1);
            v63 = *((unsigned __int16 *)v189 + 1);
          }
          else
          {
            v64 = 0;
            v65 = 0;
          }
          v95 = **(_QWORD **)(*((_QWORD *)this + 332) + 32);
          v96 = **(_QWORD **)(v95 + 32);
          LODWORD(v196) = 17;
          BYTE4(v196) = 2;
          v197 = v96;
          v198 = v64;
          v199 = __PAIR64__(v63, v65);
          v200 = "pipeliner";
          v201 = "schedule";
          v202 = 8;
          LOBYTE(v203) = 0;
          LOBYTE(v204) = 0;
          v205 = v207;
          v206 = 0x400000000;
          BYTE8(v227) = 0;
          HIDWORD(v227) = -1;
          *(_QWORD *)&v228 = v95;
          v195 = (void **)&unk_1E8144BB0;
          v250 = "No need to pipeline - no overlapped iterations in schedule.";
          v251 = 59;
          sub_1C53B17B4((uint64_t)&v205, (const void **)&v250);
          sub_1C61F875C((uint64_t)&v250, (uint64_t)&v195);
          v250 = &unk_1E8144BB0;
          v195 = (void **)&off_1E814E790;
          v97 = (char *)v205;
          if ((_DWORD)v206)
          {
            v98 = (unint64_t)v206 << 6;
            do
            {
              v99 = (void **)&v97[v98];
              if (v97[v98 - 17] < 0)
                operator delete(*(v99 - 5));
              if (*((char *)v99 - 41) < 0)
                operator delete(*(v99 - 8));
              v98 -= 64;
            }
            while (v98);
            v97 = (char *)v205;
          }
          if (v97 != (char *)v207)
            free(v97);
          if (v189)
            llvm::MetadataTracking::untrack((uint64_t)&v189, (unsigned __int8 *)v189);
          llvm::MachineOptimizationRemarkEmitter::emit(v61, (llvm::DiagnosticInfoOptimizationBase *)&v250);
          v250 = &off_1E814E790;
          v82 = (char *)v255;
          if (!v256)
            goto LABEL_213;
          v100 = (unint64_t)v256 << 6;
          do
          {
            v101 = (void **)&v82[v100];
            if (v82[v100 - 17] < 0)
              operator delete(*(v101 - 5));
            if (*((char *)v101 - 41) < 0)
              operator delete(*(v101 - 8));
            v100 -= 64;
          }
          while (v100);
LABEL_212:
          v82 = (char *)v255;
LABEL_213:
          if (v82 != (char *)v257)
            free(v82);
        }
      }
    }
    else
    {
      v66 = *(uint64_t *****)(*((_QWORD *)this + 329) + 256);
      v67 = *(_QWORD *)****v66;
      if (*(_QWORD *)(v67 + 128)
        || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v67 + 72) + 48))(*(_QWORD *)(v67 + 72)))
      {
        llvm::MachineLoop::getStartLoc(*((llvm::MachineLoop **)this + 332), (unsigned __int8 **)&v189);
        v68 = v189;
        if (v189)
        {
          v69 = *((_QWORD *)v189 - *((unsigned int *)v189 + 2));
          if (*(_BYTE *)v69 != 15)
            v69 = *(_QWORD *)(v69 - 8 * *(unsigned int *)(v69 + 8));
          v70 = *((_DWORD *)v189 + 1);
          v68 = *((unsigned __int16 *)v189 + 1);
        }
        else
        {
          v69 = 0;
          v70 = 0;
        }
        v77 = **(_QWORD **)(*((_QWORD *)this + 332) + 32);
        v78 = **(_QWORD **)(v77 + 32);
        LODWORD(v196) = 17;
        BYTE4(v196) = 2;
        v197 = v78;
        v198 = v69;
        v199 = __PAIR64__(v68, v70);
        v200 = "pipeliner";
        v201 = "schedule";
        v202 = 8;
        LOBYTE(v203) = 0;
        LOBYTE(v204) = 0;
        v205 = v207;
        v206 = 0x400000000;
        BYTE8(v227) = 0;
        HIDWORD(v227) = -1;
        *(_QWORD *)&v228 = v77;
        v195 = (void **)&unk_1E8144BB0;
        v250 = "Unable to find schedule";
        v251 = 23;
        sub_1C53B17B4((uint64_t)&v205, (const void **)&v250);
        sub_1C61F875C((uint64_t)&v250, (uint64_t)&v195);
        v250 = &unk_1E8144BB0;
        v195 = (void **)&off_1E814E790;
        v79 = (char *)v205;
        if ((_DWORD)v206)
        {
          v80 = (unint64_t)v206 << 6;
          do
          {
            v81 = (void **)&v79[v80];
            if (v79[v80 - 17] < 0)
              operator delete(*(v81 - 5));
            if (*((char *)v81 - 41) < 0)
              operator delete(*(v81 - 8));
            v80 -= 64;
          }
          while (v80);
          v79 = (char *)v205;
        }
        if (v79 != (char *)v207)
          free(v79);
        if (v189)
          llvm::MetadataTracking::untrack((uint64_t)&v189, (unsigned __int8 *)v189);
        llvm::MachineOptimizationRemarkEmitter::emit(v66, (llvm::DiagnosticInfoOptimizationBase *)&v250);
        v250 = &off_1E814E790;
        v82 = (char *)v255;
        if (!v256)
          goto LABEL_213;
        v83 = (unint64_t)v256 << 6;
        do
        {
          v84 = (void **)&v82[v83];
          if (v82[v83 - 17] < 0)
            operator delete(*(v84 - 5));
          if (*((char *)v84 - 41) < 0)
            operator delete(*(v84 - 8));
          v83 -= 64;
        }
        while (v83);
        goto LABEL_212;
      }
    }
LABEL_215:
    sub_1C61F7E34(&v241);
    sub_1C6143384(v236[0]);
    sub_1C61F7C80((uint64_t *)&v232);
    goto LABEL_35;
  }
  v31 = *(uint64_t *****)(*((_QWORD *)this + 329) + 256);
  v32 = *(_QWORD *)****v31;
  if (!*(_QWORD *)(v32 + 128)
    && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v32 + 72) + 48))(*(_QWORD *)(v32 + 72)))
  {
    goto LABEL_35;
  }
  llvm::MachineLoop::getStartLoc(*((llvm::MachineLoop **)this + 332), (unsigned __int8 **)&v250);
  v33 = v250;
  if (v250)
  {
    v34 = *((_QWORD *)v250 - *((unsigned int *)v250 + 2));
    if (*(_BYTE *)v34 != 15)
      v34 = *(_QWORD *)(v34 - 8 * *(unsigned int *)(v34 + 8));
    v35 = *((_DWORD *)v250 + 1);
    v33 = *((unsigned __int16 *)v250 + 1);
  }
  else
  {
    v34 = 0;
    v35 = 0;
  }
  v85 = **(_QWORD **)(*((_QWORD *)this + 332) + 32);
  v86 = **(_QWORD **)(v85 + 32);
  LODWORD(v196) = 17;
  BYTE4(v196) = 2;
  v197 = v86;
  v198 = v34;
  v199 = __PAIR64__(v33, v35);
  v200 = "pipeliner";
  v201 = "schedule";
  v202 = 8;
  LOBYTE(v203) = 0;
  LOBYTE(v204) = 0;
  v205 = v207;
  v206 = 0x400000000;
  BYTE8(v227) = 0;
  HIDWORD(v227) = -1;
  *(_QWORD *)&v228 = v85;
  v195 = (void **)&unk_1E8144BB0;
  v232 = "Invalid Minimal Initiation Interval: 0";
  v233 = 38;
  sub_1C53B17B4((uint64_t)&v205, (const void **)&v232);
  sub_1C61F875C((uint64_t)&v232, (uint64_t)&v195);
  v232 = (const char *)&unk_1E8144BB0;
  v195 = (void **)&off_1E814E790;
  v87 = (char *)v205;
  if ((_DWORD)v206)
  {
    v88 = (unint64_t)v206 << 6;
    do
    {
      v89 = (void **)&v87[v88];
      if (v87[v88 - 17] < 0)
        operator delete(*(v89 - 5));
      if (*((char *)v89 - 41) < 0)
        operator delete(*(v89 - 8));
      v88 -= 64;
    }
    while (v88);
    v87 = (char *)v205;
  }
  if (v87 != (char *)v207)
    free(v87);
  if (v250)
    llvm::MetadataTracking::untrack((uint64_t)&v250, (unsigned __int8 *)v250);
  llvm::MachineOptimizationRemarkEmitter::emit(v31, (llvm::DiagnosticInfoOptimizationBase *)&v232);
  v232 = (const char *)&off_1E814E790;
  v53 = (char *)v241;
  if (v242)
  {
    v90 = (unint64_t)v242 << 6;
    do
    {
      v91 = (void **)&v53[v90];
      if (v53[v90 - 17] < 0)
        operator delete(*(v91 - 5));
      if (*((char *)v91 - 41) < 0)
        operator delete(*(v91 - 8));
      v90 -= 64;
    }
    while (v90);
LABEL_89:
    v53 = (char *)v241;
  }
LABEL_90:
  if (v53 != (char *)&v243)
    free(v53);
LABEL_35:
  v25 = v244;
  if ((_DWORD)v245)
  {
    v26 = 88 * v245;
    v27 = (char *)v244 - 88;
    do
    {
      sub_1C6176BF8(&v27[v26]);
      v26 -= 88;
    }
    while (v26);
    v25 = v244;
  }
  if (v25 != v246)
    free(v25);
  v28 = v247;
  if ((_DWORD)v248)
  {
    v29 = 88 * v248;
    v30 = (char *)v247 - 88;
    do
    {
      sub_1C6176BF8(&v30[v29]);
      v29 -= 88;
    }
    while (v29);
    v28 = v247;
  }
  if (v28 != v249)
    free(v28);
}

unsigned int *llvm::SwingSchedulerDAG::finishBlock(llvm::SwingSchedulerDAG *this)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int *result;

  v2 = (unsigned int *)((char *)this + 3200);
  v3 = *((_QWORD *)this + 400);
  v4 = *((unsigned int *)this + 804);
  v5 = (_QWORD *)(v3 + 16 * v4);
  if (*((_DWORD *)this + 802))
  {
    if ((_DWORD)v4)
    {
      v7 = 16 * v4;
      v6 = (_QWORD *)*((_QWORD *)this + 400);
      while ((*v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v6 += 2;
        v7 -= 16;
        if (!v7)
          goto LABEL_7;
      }
    }
    else
    {
      v6 = (_QWORD *)*((_QWORD *)this + 400);
    }
  }
  else
  {
LABEL_7:
    v6 = (_QWORD *)(v3 + 16 * v4);
  }
  v8 = (_QWORD *)(v3 + 16 * v4);
LABEL_9:
  while (v6 != v8)
  {
    v9 = *((_QWORD *)this + 4);
    v10 = v6[1];
    v11 = *(_QWORD **)(v10 + 32);
    if (v11)
    {
      v12 = *(unsigned __int8 *)(v10 + 47);
      v13 = (uint64_t *)(v9 + 232);
      if (*(_DWORD *)(v9 + 240) <= v12)
        sub_1C515FA1C(v9 + 232, v12 + 1);
      v14 = *v13;
      *v11 = *(_QWORD *)(*v13 + 8 * v12);
      *(_QWORD *)(v14 + 8 * v12) = v11;
    }
    *(_QWORD *)v10 = *(_QWORD *)(v9 + 224);
    *(_QWORD *)(v9 + 224) = v10;
    v15 = v6 + 2;
    v6 = v5;
    if (v15 != v5)
    {
      v6 = v15;
      while ((*v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v6 += 2;
        if (v6 == v5)
        {
          v6 = v5;
          goto LABEL_9;
        }
      }
    }
  }
  result = sub_1C61446F0(v2);
  *((_QWORD *)this + 115) = 0;
  return result;
}

uint64_t llvm::SwingSchedulerDAG::setMII(uint64_t this, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;

  v3 = *(_DWORD *)(this + 2680);
  if (a2 <= a3)
    v4 = a3;
  else
    v4 = a2;
  if (!v3)
    v3 = v4;
  *(_DWORD *)(this + 2640) = v3;
  return this;
}

_DWORD *llvm::SwingSchedulerDAG::setMAX_II(_DWORD *this)
{
  int v1;

  v1 = this[670];
  if (!v1)
    v1 = this[660] + 10;
  this[661] = v1;
  return this;
}

void llvm::SwingSchedulerDAG::updatePhiDependences(llvm::SwingSchedulerDAG *this)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t UniqueVRegDef;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v37;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD v58[9];

  v58[8] = *MEMORY[0x1E0C80C00];
  v55 = v58;
  v57 = 4;
  v1 = *((_QWORD *)this + 6);
  v50 = *((_QWORD *)this + 7);
  if (v1 != v50)
  {
    v49 = *(_QWORD *)(*((_QWORD *)this + 4) + 16);
    v51 = (uint64_t *)((char *)this + 952);
    while (1)
    {
      v56 = 0;
      v3 = *(_QWORD *)(v1 + 8);
      v4 = *(unsigned int *)(v3 + 40);
      if ((_DWORD)v4)
        break;
      v6 = 0;
      LODWORD(v9) = 0;
LABEL_57:
      if (byte_1ED7FB6E0)
      {
        v29 = *(unsigned int *)(v1 + 40);
        if ((_DWORD)v29)
        {
          v30 = *(uint64_t **)(v1 + 32);
          v31 = &v30[2 * v29];
          do
          {
            v32 = *v30;
            v33 = *(_QWORD *)((*v30 & 0xFFFFFFFFFFFFFFF8) + 8);
            v34 = **(unsigned __int16 **)(v33 + 16);
            if ((v34 == 69 || v34 == 0) && (~(_BYTE)v32 & 6) == 0)
            {
              v37 = **(unsigned __int16 **)(*(_QWORD *)(v1 + 8) + 16);
              if (v37 != 69 && v37 != 0)
                goto LABEL_81;
              v39 = *(_QWORD *)(v33 + 32);
              if (*(_DWORD *)(v39 + 4) != (_DWORD)v9)
              {
                v40 = *(_DWORD *)(v33 + 40);
                if (v40 == 1)
                {
LABEL_78:
                  v43 = 0;
                }
                else
                {
                  v41 = *(_QWORD *)(v33 + 24);
                  v42 = 1;
                  while (*(_QWORD *)(v39 + 32 * (v42 + 1) + 16) != v41)
                  {
                    v42 += 2;
                    if (v40 == v42)
                      goto LABEL_78;
                  }
                  v43 = *(_DWORD *)(v39 + 32 * v42 + 4);
                }
                if (v43 != v6)
                {
LABEL_81:
                  v44 = v30[1];
                  v45 = v56;
                  if (v56 >= (unint64_t)v57)
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, (uint64_t)v58, v56 + 1, 16);
                    v45 = v56;
                  }
                  v46 = (char *)v55 + 16 * v45;
                  *v46 = v32;
                  v46[1] = v44;
                  ++v56;
                }
              }
            }
            v30 += 2;
          }
          while (v30 != v31);
        }
        if (v56)
        {
          v47 = 0;
          v48 = 16 * v56;
          do
          {
            llvm::SUnit::removePred(v1, (const llvm::SDep *)((char *)v55 + v47));
            v47 += 16;
          }
          while (v48 != v47);
        }
      }
      v1 += 272;
      if (v1 == v50)
      {
        if (v55 != v58)
          free(v55);
        return;
      }
    }
    v5 = 0;
    v6 = 0;
    v7 = *(_DWORD **)(v3 + 32);
    v8 = &v7[8 * v4];
    while (1)
    {
      if (!*v7)
      {
        v9 = v7[1];
        v10 = *((_QWORD *)this + 5);
        if ((*v7 & 0x1000000) != 0)
        {
          if ((v9 & 0x80000000) != 0)
            v19 = (uint64_t *)(*(_QWORD *)(v10 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
          else
            v19 = (uint64_t *)(*(_QWORD *)(v10 + 272) + 8 * v9);
          v20 = *v19;
          if (*v19)
          {
            while ((*(_BYTE *)(v20 + 3) & 1) != 0)
            {
              v20 = *(_QWORD *)(v20 + 24);
              if (!v20)
                goto LABEL_29;
            }
            v21 = *(_QWORD *)(v20 + 8);
LABEL_33:
            v52 = v21;
            v54 = 0;
            if ((sub_1C61252B8(v51, &v52, &v54) & 1) != 0)
            {
              v22 = *(_QWORD *)(v54 + 8);
              if (v22)
              {
                v23 = **(unsigned __int16 **)(v21 + 16);
                if (v23 == 69 || v23 == 0)
                {
                  if (**(_WORD **)(v3 + 16) && **(_WORD **)(v3 + 16) != 69)
                  {
                    v52 = v22 & 0xFFFFFFFFFFFFFFF9 | 2;
                    v53 = v9 | 0x100000000;
                    llvm::SUnit::addPred(v1, (const llvm::SDep *)&v52, 1);
                  }
                  else
                  {
                    v6 = v9;
                    if (*(_DWORD *)(v22 + 192) < *(_DWORD *)(v1 + 192))
                    {
                      v25 = *(unsigned int *)(v1 + 40);
                      if ((_DWORD)v25)
                      {
                        v26 = *(_QWORD **)(v1 + 32);
                        v27 = 16 * v25;
                        while (v22 != (*v26 & 0xFFFFFFFFFFFFFFF8))
                        {
                          v26 += 2;
                          v27 -= 16;
                          if (!v27)
                            goto LABEL_47;
                        }
                      }
                      else
                      {
LABEL_47:
                        v52 = v22 | 6;
                        v53 = 0;
                        llvm::SUnit::addPred(v1, (const llvm::SDep *)&v52, 1);
                      }
                      v6 = v9;
                    }
                  }
                }
              }
            }
            v28 = *(_QWORD *)(v20 + 8);
            while (1)
            {
              v20 = *(_QWORD *)(v20 + 24);
              if (!v20)
                break;
              if ((*(_BYTE *)(v20 + 3) & 1) == 0)
              {
                v21 = *(_QWORD *)(v20 + 8);
                if (v21 != v28)
                  goto LABEL_33;
              }
            }
          }
        }
        else
        {
          UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(v10, v7[1]);
          if (UniqueVRegDef)
          {
            v12 = UniqueVRegDef;
            v52 = UniqueVRegDef;
            v54 = 0;
            if ((sub_1C61252B8(v51, &v52, &v54) & 1) != 0)
            {
              v13 = *(_QWORD *)(v54 + 8);
              if (v13)
              {
                v14 = **(unsigned __int16 **)(v12 + 16);
                if (v14 == 69 || v14 == 0)
                {
                  if (!**(_WORD **)(v3 + 16) || **(_WORD **)(v3 + 16) == 69)
                  {
                    if (*(_DWORD *)(v13 + 192) < *(_DWORD *)(v1 + 192))
                    {
                      v16 = *(unsigned int *)(v1 + 40);
                      if ((_DWORD)v16)
                      {
                        v17 = *(_QWORD **)(v1 + 32);
                        v18 = 16 * v16;
                        while (v13 != (*v17 & 0xFFFFFFFFFFFFFFF8))
                        {
                          v17 += 2;
                          v18 -= 16;
                          if (!v18)
                            goto LABEL_22;
                        }
                      }
                      else
                      {
LABEL_22:
                        v52 = v13 | 6;
                        v53 = 0;
                        llvm::SUnit::addPred(v1, (const llvm::SDep *)&v52, 1);
                      }
                    }
                    goto LABEL_30;
                  }
                  v52 = v13 & 0xFFFFFFFFFFFFFFF9;
                  v53 = v9;
                  (*(void (**)(uint64_t))(*(_QWORD *)v49 + 304))(v49);
                  llvm::SUnit::addPred(v1, (const llvm::SDep *)&v52, 1);
                }
              }
            }
          }
        }
      }
LABEL_29:
      v9 = v5;
LABEL_30:
      v7 += 8;
      v5 = v9;
      if (v7 == v8)
        goto LABEL_57;
    }
  }
}

void llvm::SwingSchedulerDAG::changeDependences(llvm::SwingSchedulerDAG *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  llvm::ScheduleDAGTopologicalSort *v5;
  char *v6;
  void *UniqueVRegDef;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  llvm::SUnit *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  llvm::SUnit *v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  _QWORD v49[10];

  v49[8] = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 6);
  v2 = *((_QWORD *)this + 7);
  if (v1 != v2)
  {
    v4 = (uint64_t *)((char *)this + 952);
    v5 = (llvm::SwingSchedulerDAG *)((char *)this + 2688);
    v6 = (char *)this + 3176;
    do
    {
      v46 = 0;
      v44 = 0;
      v43 = 0;
      if (llvm::SwingSchedulerDAG::canUseLastOffsetValue(this, *(llvm::MachineInstr **)(v1 + 8), &v46, &v45, &v44, &v43))
      {
        UniqueVRegDef = (void *)llvm::MachineRegisterInfo::getUniqueVRegDef(*((_QWORD *)this + 5), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 32) + 32 * v46 + 4));
        if (UniqueVRegDef)
        {
          v47 = UniqueVRegDef;
          v40 = 0;
          if ((sub_1C61252B8(v4, &v47, &v40) & 1) != 0)
          {
            v8 = *(_QWORD *)(v40 + 8);
            if (v8)
            {
              v9 = v44;
              v10 = (void *)llvm::MachineRegisterInfo::getUniqueVRegDef(*((_QWORD *)this + 5), v44);
              if (v10)
              {
                v47 = v10;
                v40 = 0;
                if ((sub_1C61252B8(v4, &v47, &v40) & 1) != 0)
                {
                  v11 = *(llvm::SUnit **)(v40 + 8);
                  if (v11)
                  {
                    if (!llvm::ScheduleDAGTopologicalSort::IsReachable(v5, (const llvm::SUnit *)v1, *(const llvm::SUnit **)(v40 + 8)))
                    {
                      v37 = v9;
                      v38 = v11;
                      v47 = v49;
                      v48 = 0x400000000;
                      v12 = *(unsigned int *)(v1 + 40);
                      if ((_DWORD)v12)
                      {
                        v13 = 0;
                        v14 = 16 * v12;
                        v15 = (uint64_t *)(*(_QWORD *)(v1 + 32) + 8);
                        do
                        {
                          v16 = *(v15 - 1);
                          if (v8 == (v16 & 0xFFFFFFFFFFFFFFF8))
                          {
                            v17 = *v15;
                            if (v13 >= HIDWORD(v48))
                            {
                              v34 = *v15;
                              v35 = *(v15 - 1);
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, (uint64_t)v49, v13 + 1, 16);
                              v17 = v34;
                              v16 = v35;
                              v13 = v48;
                            }
                            v18 = (char *)v47 + 16 * v13;
                            *v18 = v16;
                            v18[1] = v17;
                            v13 = v48 + 1;
                            LODWORD(v48) = v48 + 1;
                          }
                          v15 += 2;
                          v14 -= 16;
                        }
                        while (v14);
                        if (v13)
                        {
                          v19 = 0;
                          v20 = 16 * v13;
                          do
                          {
                            llvm::SUnit::removePred(v1, (const llvm::SDep *)((char *)v47 + v19));
                            v19 += 16;
                          }
                          while (v20 != v19);
                        }
                      }
                      LODWORD(v48) = 0;
                      v21 = (unint64_t)v38;
                      v22 = *((unsigned int *)v38 + 10);
                      if ((_DWORD)v22)
                      {
                        v23 = 0;
                        v24 = 16 * v22;
                        v25 = (uint64_t *)(*((_QWORD *)v38 + 4) + 8);
                        do
                        {
                          v26 = *(v25 - 1);
                          if ((~(_BYTE)v26 & 6) == 0 && v1 == (v26 & 0xFFFFFFFFFFFFFFF8))
                          {
                            v28 = *v25;
                            if (v23 >= HIDWORD(v48))
                            {
                              v36 = *v25;
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, (uint64_t)v49, v23 + 1, 16);
                              v28 = v36;
                              v23 = v48;
                            }
                            v29 = (char *)v47 + 16 * v23;
                            *v29 = v26;
                            v29[1] = v28;
                            v23 = v48 + 1;
                            LODWORD(v48) = v48 + 1;
                          }
                          v25 += 2;
                          v24 -= 16;
                        }
                        while (v24);
                        v21 = (unint64_t)v38;
                        if (v23)
                        {
                          v30 = 0;
                          v31 = 16 * v23;
                          do
                          {
                            llvm::SUnit::removePred((unint64_t)v38, (const llvm::SDep *)((char *)v47 + v30));
                            v30 += 16;
                          }
                          while (v31 != v30);
                        }
                      }
                      v40 = v1 & 0xFFFFFFFFFFFFFFF9 | 2;
                      v41 = v37;
                      v42 = 0;
                      llvm::ScheduleDAGTopologicalSort::AddPred((uint64_t)v5, v21, v1);
                      llvm::SUnit::addPred(v21, (const llvm::SDep *)&v40, 1);
                      v32 = v43;
                      v39 = v1;
                      v33 = sub_1C61F8928((uint64_t)v6, &v39);
                      *((_DWORD *)v33 + 2) = v37;
                      v33[2] = v32;
                      if (v47 != v49)
                        free(v47);
                    }
                  }
                }
              }
            }
          }
        }
      }
      v1 += 272;
    }
    while (v1 != v2);
  }
}

uint64_t llvm::SwingSchedulerDAG::postprocessDAG(uint64_t this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(uint64_t **)(this + 3224);
  v2 = *(uint64_t **)(this + 3232);
  if (v1 != v2)
  {
    v3 = this;
    do
    {
      v4 = *v1++;
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, v3);
    }
    while (v1 != v2);
  }
  return this;
}

uint64_t llvm::SwingSchedulerDAG::calculateResMII(llvm::SwingSchedulerDAG *this)
{
  llvm::MachineBasicBlock *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t FirstTerminator;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int8x8_t *v15;
  int8x8_t v16;
  uint8x8_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  uint64_t i;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  uint64_t *v81;
  uint64_t *v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  _QWORD *v91;
  llvm::SwingSchedulerDAG *v93;
  llvm::MachineBasicBlock *v94;
  llvm::MachineBasicBlock *v95;
  int64_t v96;
  uint64_t v97;
  int64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  __int128 v104;
  _QWORD v105[2];
  int v106;
  __int128 v107;
  _QWORD v108[2];
  int v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  _QWORD v117[10];

  v117[8] = *MEMORY[0x1E0C80C00];
  v115 = v117;
  v116 = 0x800000000;
  v2 = **(llvm::MachineBasicBlock ***)(*((_QWORD *)this + 332) + 32);
  v3 = operator new();
  sub_1C61F7D34(v3, *(_QWORD **)(*((_QWORD *)this + 4) + 16));
  v117[0] = v3;
  LODWORD(v116) = 1;
  v4 = *(_QWORD *)(*((_QWORD *)this + 4) + 16);
  *(_QWORD *)&v107 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 192))(v4);
  *((_QWORD *)&v107 + 1) = v4;
  v108[0] = 0;
  v108[1] = 0;
  v109 = 0;
  v5 = (_QWORD *)((char *)v2 + 48);
  v6 = (_QWORD *)((char *)v2 + 48);
  if (*((llvm::MachineBasicBlock **)v2 + 7) != (llvm::MachineBasicBlock *)((char *)v2 + 48))
  {
    v6 = (_QWORD *)*((_QWORD *)v2 + 7);
    while (!*(_WORD *)v6[2] || *(_WORD *)v6[2] == 69)
    {
      v6 = (_QWORD *)v6[1];
      if (v6 == v5)
      {
        v6 = (_QWORD *)((char *)v2 + 48);
        break;
      }
    }
  }
  v94 = v2;
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v2);
  v93 = this;
  if (v6 != (_QWORD *)FirstTerminator)
  {
    v8 = FirstTerminator;
    while ((_QWORD)v107)
    {
      v9 = *(_QWORD *)(v107 + 96);
      if (!v9)
        break;
      v10 = v9 + 10 * *(unsigned __int16 *)(v6[2] + 6);
      v11 = *(unsigned __int16 *)(v10 + 2);
      v12 = *(unsigned __int16 *)(v10 + 4);
      if ((_DWORD)v11 != v12)
      {
        v13 = 3 * v11;
        v14 = 24 * v12 - 8 * v13;
        v15 = (int8x8_t *)(*(_QWORD *)(v107 + 72) + 8 * v13 + 8);
        do
        {
          v16 = *v15;
          v15 += 3;
          v101 = (char *)v16;
          v17 = (uint8x8_t)vcnt_s8(v16);
          v17.i16[0] = vaddlv_u8(v17);
          if (v17.u32[0] == 1)
          {
            v18 = sub_1C51910A4((uint64_t)v108, (uint64_t *)&v101);
            ++*((_DWORD *)v18 + 2);
          }
          v14 -= 24;
        }
        while (v14);
LABEL_16:
        if (!v6)
        {
LABEL_44:
          while ((*((_WORD *)v6 + 22) & 8) != 0)
            v6 = (_QWORD *)v6[1];
          goto LABEL_45;
        }
      }
LABEL_41:
      if ((*(_BYTE *)v6 & 4) == 0)
        goto LABEL_44;
LABEL_45:
      v6 = (_QWORD *)v6[1];
      if (v6 == (_QWORD *)v8)
        goto LABEL_46;
    }
    v19 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v107 + 1) + 160) + 40);
    if ((~*(unsigned __int16 *)(v19 + 24 * *(unsigned __int16 *)(v6[2] + 6) + 8) & 0x1FFF) == 0)
      goto LABEL_41;
    v20 = v19 + 24 * *(unsigned __int16 *)(v6[2] + 6);
    if (!*(_WORD *)(v20 + 12))
      goto LABEL_41;
    v21 = (unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)&v107 + 1) + 136) + 4 * *(unsigned __int16 *)(v20 + 10));
    v22 = &v21[2 * *(unsigned __int16 *)(v20 + 12)];
    while (!v21[1])
    {
LABEL_36:
      v21 += 2;
      if (v21 == v22)
        goto LABEL_16;
    }
    v23 = *v21;
    v101 = (char *)v23;
    if (v109)
    {
      v24 = (v109 - 1) & (37 * v23);
      v25 = (_QWORD *)(v108[0] + 16 * v24);
      v26 = *v25;
      if (*v25 == v23)
      {
LABEL_35:
        ++*((_DWORD *)v25 + 2);
        goto LABEL_36;
      }
      v27 = 0;
      v28 = 1;
      while (v26 != -1)
      {
        if (v27)
          v29 = 0;
        else
          v29 = v26 == -2;
        if (v29)
          v27 = v25;
        v30 = v24 + v28++;
        v24 = v30 & (v109 - 1);
        v25 = (_QWORD *)(v108[0] + 16 * v24);
        v26 = *v25;
        if (*v25 == v23)
          goto LABEL_35;
      }
      if (v27)
        v31 = v27;
      else
        v31 = v25;
    }
    else
    {
      v31 = 0;
    }
    v25 = sub_1C5191160((uint64_t)v108, (uint64_t)&v101, (uint64_t *)&v101, v31);
    *v25 = v101;
    *((_DWORD *)v25 + 2) = 0;
    goto LABEL_35;
  }
LABEL_46:
  v102 = 0;
  v103 = 0;
  v101 = 0;
  v104 = v107;
  v105[0] = 0;
  v105[1] = 0;
  v106 = 0;
  sub_1C4DFEB14((uint64_t)v105, (uint64_t)v108);
  v33 = (uint64_t)v101;
  v32 = v102;
  v110 = v104;
  v111 = 0;
  v112 = 0;
  v113 = 0;
  sub_1C4DFEB14((uint64_t)&v111, (uint64_t)v105);
  v34 = (uint64_t)&v32[-v33];
  if ((uint64_t)&v32[-v33] >= 9)
  {
    v35 = v34 >> 3;
    v36 = (unint64_t)((v34 >> 3) - 2) >> 1;
    v37 = v36;
    v98 = v36;
    do
    {
      if (v36 >= v37)
      {
        v38 = (2 * v37) | 1;
        v39 = (uint64_t *)(v33 + 8 * v38);
        v40 = *v39;
        if (2 * v37 + 2 < v35)
        {
          v41 = v39[1];
          v42 = sub_1C51935A4((uint64_t)&v110, *(_WORD *)(*(_QWORD *)(v40 + 16) + 6), v41);
          if (v42)
            v40 = v41;
          v36 = v98;
          if (v42)
          {
            ++v39;
            v38 = 2 * v37 + 2;
          }
        }
        v43 = (uint64_t *)(v33 + 8 * v37);
        v100 = *v43;
        if (!sub_1C51935A4((uint64_t)&v110, *(_WORD *)(*(_QWORD *)(v40 + 16) + 6), *v43))
        {
          v96 = v37;
          do
          {
            *v43 = v40;
            v43 = v39;
            if (v36 < v38)
              break;
            v44 = (2 * v38) | 1;
            v39 = (uint64_t *)(v33 + 8 * v44);
            v45 = 2 * v38 + 2;
            v40 = *v39;
            if (v45 < v35)
            {
              v46 = v39[1];
              v47 = sub_1C51935A4((uint64_t)&v110, *(_WORD *)(*(_QWORD *)(v40 + 16) + 6), v46);
              if (v47)
              {
                v40 = v46;
                ++v39;
              }
              v36 = v98;
              if (v47)
                v44 = v45;
            }
            v38 = v44;
          }
          while (!sub_1C51935A4((uint64_t)&v110, *(_WORD *)(*(_QWORD *)(v40 + 16) + 6), v100));
          *v43 = v100;
          v37 = v96;
        }
      }
    }
    while (v37-- > 0);
  }
  MEMORY[0x1CAA32FB4](v111, 8);
  for (i = *((_QWORD *)v94 + 7); (_QWORD *)i != v5; i = *(_QWORD *)(i + 8))
  {
    if (**(_WORD **)(i + 16) && **(_WORD **)(i + 16) != 69)
    {
      v5 = (_QWORD *)i;
      break;
    }
  }
  v50 = llvm::MachineBasicBlock::getFirstTerminator(v94);
  v51 = v102;
  if (v5 == (_QWORD *)v50)
  {
    v62 = v101;
  }
  else
  {
    v52 = v50;
    do
    {
      if (v51 >= v103)
      {
        v53 = (uint64_t)v101;
        v54 = (v51 - v101) >> 3;
        v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 61)
          abort();
        v56 = v103 - v101;
        if ((v103 - v101) >> 2 > v55)
          v55 = v56 >> 2;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
          v57 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v57 = v55;
        if (v57)
        {
          if (v57 >> 61)
            sub_1C4764EE4();
          v58 = (char *)operator new(8 * v57);
        }
        else
        {
          v58 = 0;
        }
        v59 = &v58[8 * v54];
        *(_QWORD *)v59 = v5;
        v60 = v59 + 8;
        if (v51 != (char *)v53)
        {
          do
          {
            v61 = *((_QWORD *)v51 - 1);
            v51 -= 8;
            *((_QWORD *)v59 - 1) = v61;
            v59 -= 8;
          }
          while (v51 != (char *)v53);
          v51 = v101;
        }
        v101 = v59;
        v102 = v60;
        v103 = &v58[8 * v57];
        if (v51)
          operator delete(v51);
        v51 = v60;
      }
      else
      {
        *(_QWORD *)v51 = v5;
        v51 += 8;
      }
      v102 = v51;
      v62 = v101;
      v110 = v104;
      v111 = 0;
      v112 = 0;
      v113 = 0;
      sub_1C4DFEB14((uint64_t)&v111, (uint64_t)v105);
      sub_1C51937AC((_BOOL8)v62, (uint64_t)v51, (uint64_t)&v110, (v51 - v62) >> 3);
      MEMORY[0x1CAA32FB4](v111, 8);
      if (!v5 || (*(_BYTE *)v5 & 4) == 0)
      {
        while ((*((_WORD *)v5 + 22) & 8) != 0)
          v5 = (_QWORD *)v5[1];
      }
      v5 = (_QWORD *)v5[1];
    }
    while (v5 != (_QWORD *)v52);
  }
  if (v62 != v51)
  {
    while (1)
    {
      v63 = *(_QWORD *)v62;
      v110 = v104;
      v111 = 0;
      v112 = 0;
      v113 = 0;
      sub_1C4DFEB14((uint64_t)&v111, (uint64_t)v105);
      v64 = v51 - v62;
      if (v51 - v62 >= 9)
      {
        v65 = 0;
        v66 = v64 >> 3;
        v97 = *(_QWORD *)v62;
        v99 = v63;
        v67 = (unint64_t)((v64 >> 3) - 2) >> 1;
        v95 = (llvm::MachineBasicBlock *)v62;
        v68 = v62;
        do
        {
          v69 = &v68[v65];
          v72 = v69[1];
          v71 = (char *)(v69 + 1);
          v70 = v72;
          v73 = (2 * v65) | 1;
          v74 = 2 * v65 + 2;
          if (v74 < v66)
          {
            v75 = *((_QWORD *)v71 + 1);
            if (sub_1C51935A4((uint64_t)&v110, *(_WORD *)(*(_QWORD *)(v70 + 16) + 6), v75))
            {
              v70 = v75;
              v71 += 8;
              v73 = v74;
            }
          }
          *v68 = v70;
          v68 = v71;
          v65 = v73;
        }
        while (v73 <= v67);
        v76 = v51 - 8;
        if (v71 == v51 - 8)
        {
          *(_QWORD *)v71 = v97;
        }
        else
        {
          *(_QWORD *)v71 = *(_QWORD *)v76;
          *(_QWORD *)v76 = v97;
          sub_1C51937AC((_BOOL8)v95, (uint64_t)(v71 + 8), (uint64_t)&v110, (v71 + 8 - (char *)v95) >> 3);
        }
        v63 = v99;
      }
      MEMORY[0x1CAA32FB4](v111, 8);
      v51 = v102 - 8;
      v102 -= 8;
      if (**(unsigned __int16 **)(v63 + 16) >= 0x14u)
        break;
LABEL_112:
      v62 = v101;
      if (v101 == v51)
        goto LABEL_130;
    }
    *(_QWORD *)&v110 = v63;
    v114 = 0;
    sub_1C61252B8((uint64_t *)v93 + 119, &v110, &v114);
    v77 = *(_QWORD *)(v114 + 8);
    v78 = *(unsigned __int16 *)(v77 + 226);
    if (!*(_WORD *)(v77 + 226))
    {
      v79 = 0;
LABEL_124:
      v83 = v78 >= v79;
      v84 = v78 - v79;
      if (v84 != 0 && v83)
      {
        do
        {
          v85 = operator new();
          v86 = sub_1C61F7D34(v85, *(_QWORD **)(*((_QWORD *)v93 + 4) + 16));
          llvm::ResourceManager::reserveResources(v86, *(_QWORD *)(v63 + 16));
          v87 = v116;
          if (v116 >= (unint64_t)HIDWORD(v116))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, (uint64_t)v117, v116 + 1, 8);
            v87 = v116;
          }
          v115[v87] = v85;
          LODWORD(v116) = v116 + 1;
          --v84;
        }
        while (v84);
      }
      goto LABEL_112;
    }
    v79 = 0;
    v80 = 0;
    v81 = v115;
    v82 = &v115[v116];
    while (1)
    {
      while (v81 == v82)
      {
        v81 = v82;
LABEL_120:
        if (++v80 == v78)
          goto LABEL_124;
      }
      if (llvm::ResourceManager::canReserveResources(*v81, *(_QWORD *)(v63 + 16)))
      {
        llvm::ResourceManager::reserveResources(*v81, *(_QWORD *)(v63 + 16));
        ++v79;
        goto LABEL_120;
      }
      ++v81;
    }
  }
LABEL_130:
  v88 = v116;
  if ((_DWORD)v116)
  {
    v89 = v115;
    v90 = 8 * v116;
    do
    {
      if (*v89)
      {
        v91 = sub_1C61F7E34((_QWORD *)*v89);
        MEMORY[0x1CAA32FC0](v91, 0x10E0C402FB0A128);
      }
      ++v89;
      v90 -= 8;
    }
    while (v90);
  }
  LODWORD(v116) = 0;
  MEMORY[0x1CAA32FB4](v105[0], 8);
  if (v51)
  {
    v102 = v51;
    operator delete(v51);
  }
  MEMORY[0x1CAA32FB4](v108[0], 8);
  if (v115 != v117)
    free(v115);
  return v88;
}

uint64_t llvm::SwingSchedulerDAG::calculateRecMII(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;
  uint64_t result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = a2[2];
  if (!v2)
    return 0;
  result = 0;
  v4 = 88 * v2;
  v5 = (unsigned int *)(*(_QWORD *)a2 + 52);
  do
  {
    if (*(_QWORD *)(v5 - 7) != *(_QWORD *)(v5 - 5))
    {
      v6 = v5[7];
      *v5 = v6;
      if (v6 <= result)
        result = result;
      else
        result = v6;
    }
    v5 += 22;
    v4 -= 88;
  }
  while (v4);
  return result;
}

void llvm::SwingSchedulerDAG::computeNodeFunctions(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  BOOL v33;
  int v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  BOOL v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  unsigned int v59;

  v4 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 4);
  v5 = *(char **)(a1 + 3112);
  v6 = *(_BYTE **)(a1 + 3104);
  v7 = (v5 - v6) >> 4;
  if (v4 <= v7)
  {
    if (v4 < v7)
      *(_QWORD *)(a1 + 3112) = &v6[0xF0F0F0F0F0F0F10 * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 4)];
  }
  else
  {
    v8 = v4 - v7;
    v9 = *(_QWORD *)(a1 + 3120);
    if (v4 - v7 <= (v9 - (uint64_t)v5) >> 4)
    {
      bzero(*(void **)(a1 + 3112), 16 * v8);
      *(_QWORD *)(a1 + 3112) = &v5[16 * v8];
    }
    else
    {
      if (v4 >> 60)
        abort();
      v10 = v9 - (_QWORD)v6;
      v11 = v10 >> 3;
      if (v10 >> 3 <= v4)
        v11 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 4);
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
        v12 = 0xFFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12 >> 60)
        sub_1C4764EE4();
      v13 = (char *)operator new(16 * v12);
      v14 = &v13[16 * v7];
      bzero(v14, 16 * v8);
      if (v5 != v6)
      {
        do
        {
          *((_OWORD *)v14 - 1) = *((_OWORD *)v5 - 1);
          v14 -= 16;
          v5 -= 16;
        }
        while (v5 != v6);
        v5 = *(char **)(a1 + 3104);
      }
      *(_QWORD *)(a1 + 3104) = v14;
      *(_QWORD *)(a1 + 3112) = &v13[16 * v4];
      *(_QWORD *)(a1 + 3120) = &v13[16 * v12];
      if (v5)
        operator delete(v5);
    }
  }
  v15 = *(int **)(a1 + 2984);
  v16 = *(int **)(a1 + 2992);
  if (v15 != v16)
  {
    v17 = 0;
    v18 = *(_QWORD *)(a1 + 48);
    v19 = *(_QWORD *)(a1 + 3104);
    v20 = *(int **)(a1 + 2984);
    do
    {
      v21 = *v20;
      v22 = v18 + 272 * (int)v21;
      v23 = *(unsigned int *)(v22 + 40);
      if ((_DWORD)v23)
      {
        v24 = 0;
        v25 = 0;
        v26 = *(_QWORD *)(v22 + 32);
        v27 = v26 + 16 * v23;
        do
        {
          v28 = *(_QWORD *)v26 & 0xFFFFFFFFFFFFFFF8;
          v29 = *(_DWORD *)(v26 + 12);
          if (!v29)
          {
            v30 = *(_DWORD *)(v19 + 16 * *(unsigned int *)(v28 + 192) + 8);
            if (v25 <= v30 + 1)
              v25 = v30 + 1;
          }
          v31 = *(_QWORD *)v26 & 6;
          v33 = v31 == 6 && *(_DWORD *)(v26 + 8) == 3;
          if (v31 != 2 && !v33)
          {
            v34 = *(_DWORD *)(v19 + 16 * *(unsigned int *)(v28 + 192)) + v29;
            if (v24 <= v34)
              v24 = v34;
          }
          v26 += 16;
        }
        while (v26 != v27);
      }
      else
      {
        v25 = 0;
        v24 = 0;
      }
      if (v17 <= v24)
        v17 = v24;
      v35 = (_DWORD *)(v19 + 16 * v21);
      *v35 = v24;
      v35[2] = v25;
      ++v20;
    }
    while (v20 != v16);
    do
    {
      v37 = *--v16;
      v36 = v37;
      v38 = v18 + 272 * (int)v37;
      v39 = *(unsigned int *)(v38 + 120);
      if ((_DWORD)v39)
      {
        v40 = 0;
        v41 = *(_QWORD *)(v38 + 112);
        v42 = v41 + 16 * v39;
        v43 = v17;
        do
        {
          v44 = *(_QWORD *)v41 & 0xFFFFFFFFFFFFFFF8;
          v45 = *(_DWORD *)(v41 + 12);
          if (!v45)
          {
            v46 = *(_DWORD *)(v19 + 16 * *(unsigned int *)(v44 + 192) + 12);
            if (v40 <= v46 + 1)
              v40 = v46 + 1;
          }
          v47 = *(_QWORD *)v41 & 6;
          v49 = v47 == 6 && *(_DWORD *)(v41 + 8) == 3;
          if (v47 != 2 && !v49)
          {
            v50 = *(_DWORD *)(v19 + 16 * *(unsigned int *)(v44 + 192) + 4) - v45;
            if (v50 < v43)
              v43 = v50;
          }
          v41 += 16;
        }
        while (v41 != v42);
      }
      else
      {
        v40 = 0;
        v43 = v17;
      }
      v51 = v19 + 16 * v36;
      *(_DWORD *)(v51 + 4) = v43;
      *(_DWORD *)(v51 + 12) = v40;
    }
    while (v16 != v15);
  }
  v52 = *((_DWORD *)a2 + 2);
  if (v52)
  {
    v53 = *a2;
    v54 = *a2 + 88 * v52;
    do
    {
      v55 = *(uint64_t **)(v53 + 24);
      v56 = *(uint64_t **)(v53 + 32);
      while (v55 != v56)
      {
        v57 = *v55;
        v58 = *(_DWORD *)(*(_QWORD *)(a1 + 3104) + 16 * *(unsigned int *)(*v55 + 192) + 4)
            - *(_DWORD *)(*(_QWORD *)(a1 + 3104) + 16 * *(unsigned int *)(*v55 + 192));
        if (*(_DWORD *)(v53 + 56) > v58)
          v58 = *(_DWORD *)(v53 + 56);
        *(_DWORD *)(v53 + 56) = v58;
        if ((*(_BYTE *)(v57 + 236) & 1) == 0)
          llvm::SUnit::ComputeDepth((llvm::SUnit *)v57);
        v59 = *(_DWORD *)(v57 + 240);
        if (*(_DWORD *)(v53 + 60) > v59)
          v59 = *(_DWORD *)(v53 + 60);
        *(_DWORD *)(v53 + 60) = v59;
        ++v55;
      }
      v53 += 88;
    }
    while (v53 != v54);
  }
}

void llvm::SwingSchedulerDAG::registerPressureFilter(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  unint64_t v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  unint64_t v28;
  unint64_t v29;
  _WORD *v30;
  unsigned __int16 v31;
  uint64_t v32;
  _QWORD *j;
  unsigned int v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int v39;
  _QWORD *i;
  unsigned int v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int *v46;
  char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t CurrSlot;
  void **v56;
  _BYTE *v57;
  _BYTE *v58;
  int64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v69;
  _QWORD *v70;
  int v71;
  uint64_t v72;
  _QWORD v73[6];
  void **v74;
  __int16 v75;
  char v76;
  __int128 v77;
  __int128 v78;
  void *v79;
  uint64_t v80;
  _BYTE v81[128];
  void *v82;
  int v83;
  int v84;
  void *v85;
  uint64_t v86;
  _BYTE v87[32];
  void *v88;
  int v89;
  void *__p;
  void *v91;
  uint64_t v92;
  void *v93;
  _BYTE *v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  _BYTE v98[128];
  void *v99;
  uint64_t v100;
  _QWORD v101[18];
  void *v102;
  uint64_t v103;
  _BYTE v104[16];
  _QWORD **v105;
  _QWORD *v106;
  uint64_t v107;
  int *v108;
  uint64_t v109;
  _QWORD v110[18];

  v110[16] = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a2 + 8);
  if (v2)
  {
    v3 = *(_QWORD **)a2;
    v4 = *(_QWORD *)a2 + 88 * v2;
    v67 = v4;
    while (((v3[4] - v3[3]) >> 3) < 3)
    {
LABEL_120:
      v3 += 11;
      if (v3 == (_QWORD *)v4)
        return;
    }
    v94 = 0;
    v93 = 0;
    v95 = 0;
    v96 = v98;
    v97 = 0x800000000;
    v99 = v101;
    v100 = 0x800000000;
    v101[16] = 0;
    v101[17] = 0;
    memset(v73, 0, 24);
    v73[4] = 0;
    v73[5] = 0;
    v74 = &v93;
    v75 = 1;
    v76 = 0;
    v77 = 0u;
    v78 = 0u;
    v79 = v81;
    v80 = 0x800000000;
    v82 = 0;
    v83 = 0;
    v85 = v87;
    v86 = 0x800000000;
    v88 = 0;
    v89 = 0;
    __p = 0;
    v91 = 0;
    v92 = 0;
    llvm::RegPressureTracker::init((uint64_t)v73, a1[4], a1[334], a1[333], a1[115], a1[115] + 48, 0, 1);
    v5 = a1[4];
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 16) + 176))(*(_QWORD *)(v5 + 16));
    v7 = *(_QWORD **)(v5 + 40);
    v108 = (int *)v110;
    v109 = 0x800000000;
    v102 = v104;
    v103 = 0x400000000;
    v106 = 0;
    v107 = 0;
    v105 = &v106;
    v69 = v3;
    v8 = v3[3];
    v9 = v3[4];
    if (v8 != v9)
    {
      v10 = (_QWORD *)(v6 + 8);
      if (!v6)
        v10 = 0;
      v70 = v10;
      do
      {
        v11 = *(_QWORD *)(*(_QWORD *)v8 + 8);
        if (**(_WORD **)(v11 + 16))
        {
          if (**(_WORD **)(v11 + 16) != 69)
          {
            v12 = *(unsigned int *)(v11 + 40);
            if ((_DWORD)v12)
            {
              v13 = *(_DWORD **)(v11 + 32);
              v14 = &v13[8 * v12];
              do
              {
                if ((*v13 & 0x10000FF) == 0)
                {
                  v15 = v13[1];
                  if ((v15 & 0x80000000) != 0)
                  {
                    v71 = v13[1];
                    sub_1C4854E58((uint64_t)&v102, (unsigned int *)&v71);
                  }
                  else if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v7 + 16)
                                                                                                 + 176))(*(_QWORD *)(*v7 + 16))
                                                             + 216)
                                                 + 16)
                                     + v15)
                         && ((*(_QWORD *)(v7[44] + ((v15 >> 3) & 0x1FFFFFF8)) >> v15) & 1) == 0)
                  {
                    v16 = (unsigned __int16 *)(v70[6]
                                             + (((unint64_t)*(unsigned int *)(*v70 + 24 * v15 + 16) >> 3) & 0x1FFFFFFE));
                    v18 = *v16;
                    v17 = v16 + 1;
                    v19 = v18 + (*(_DWORD *)(*v70 + 24 * v15 + 16) & 0xF) * v15;
                    do
                    {
                      v71 = (unsigned __int16)v19;
                      sub_1C4854E58((uint64_t)&v102, (unsigned int *)&v71);
                      v20 = *v17++;
                      v19 += v20;
                    }
                    while (v20);
                  }
                }
                v13 += 8;
              }
              while (v13 != v14);
            }
          }
        }
        v8 += 8;
      }
      while (v8 != v9);
      v21 = v69[3];
      v22 = v69[4];
      if (v21 != v22)
      {
        while (1)
        {
          v23 = *(_QWORD *)(*(_QWORD *)v21 + 8);
          v24 = *(unsigned int *)(v23 + 40);
          if ((_DWORD)v24)
            break;
LABEL_69:
          v21 += 8;
          if (v21 == v22)
            goto LABEL_70;
        }
        v25 = *(_DWORD **)(v23 + 32);
        v26 = &v25[8 * v24];
        while (2)
        {
          if ((*v25 & 0x10000FF) == 0x1000000 && (*v25 & 0x5000000) != 83886080)
          {
            v28 = v25[1];
            if ((v28 & 0x80000000) != 0)
            {
              if (v107)
              {
                for (i = v106; i; i = (_QWORD *)*i)
                {
                  v41 = *((_DWORD *)i + 7);
                  if (v28 >= v41)
                  {
                    if (v41 >= v28)
                      goto LABEL_68;
                    ++i;
                  }
                }
              }
              else if ((_DWORD)v103)
              {
                v42 = v102;
                v43 = 4 * v103;
                while (*v42 != (_DWORD)v28)
                {
                  ++v42;
                  v43 -= 4;
                  if (!v43)
                    goto LABEL_65;
                }
                if (v43)
                  goto LABEL_68;
              }
LABEL_65:
              v44 = v109;
              if (v109 >= (unint64_t)HIDWORD(v109))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, (uint64_t)v110, v109 + 1, 16);
                v44 = v109;
              }
              v45 = (char *)&v108[4 * v44];
              *(_QWORD *)v45 = v28;
              *((_QWORD *)v45 + 1) = 0;
              LODWORD(v109) = v109 + 1;
              goto LABEL_68;
            }
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v7 + 16) + 176))(*(_QWORD *)(*v7 + 16))
                                                  + 216)
                                      + 16)
                          + v28)
              && ((*(_QWORD *)(v7[44] + ((v28 >> 3) & 0x1FFFFFF8)) >> v28) & 1) == 0)
            {
              v29 = *(unsigned int *)(*v70 + 24 * v28 + 16);
              v30 = (_WORD *)(v70[6] + ((v29 >> 3) & 0x1FFFFFFE));
              v31 = *v30 + (v29 & 0xF) * v28;
              do
              {
                v32 = v31;
                if (v107)
                {
                  for (j = v106; j; j = (_QWORD *)*j)
                  {
                    v34 = *((_DWORD *)j + 7);
                    if (v34 <= v32)
                    {
                      if (v34 >= v32)
                        goto LABEL_50;
                      ++j;
                    }
                  }
                }
                else if ((_DWORD)v103)
                {
                  v35 = v102;
                  v36 = 4 * v103;
                  while (*v35 != (_DWORD)v32)
                  {
                    ++v35;
                    v36 -= 4;
                    if (!v36)
                      goto LABEL_47;
                  }
                  if (v36)
                    goto LABEL_50;
                }
LABEL_47:
                v37 = v109;
                if (v109 >= (unint64_t)HIDWORD(v109))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, (uint64_t)v110, v109 + 1, 16);
                  v37 = v109;
                }
                v38 = (char *)&v108[4 * v37];
                *(_QWORD *)v38 = v32;
                *((_QWORD *)v38 + 1) = 0;
                LODWORD(v109) = v109 + 1;
LABEL_50:
                v39 = (unsigned __int16)v30[1];
                ++v30;
                v31 = v39 + v32;
              }
              while (v39);
            }
          }
LABEL_68:
          v25 += 8;
          if (v25 == v26)
            goto LABEL_69;
          continue;
        }
      }
    }
LABEL_70:
    if ((_DWORD)v109)
    {
      v46 = v108;
      v47 = (char *)&v108[4 * v109];
      do
      {
        v48 = *v46;
        v49 = *((_QWORD *)v46 + 1);
        if (*v46 < 0)
          v48 = v84 + (*v46 & 0x7FFFFFFF);
        v71 = v48;
        v72 = v49;
        v50 = sub_1C525D1D8((uint64_t)&v79, (unsigned int *)&v71);
        if ((v51 & 1) != 0)
        {
          v52 = 0;
        }
        else
        {
          v52 = *(_QWORD *)(v50 + 8);
          *(_QWORD *)(v50 + 8) = v52 | v49;
        }
        v53 = *((_QWORD *)v46 + 1) | v52;
        v54 = *v46;
        v46 += 4;
        llvm::RegPressureTracker::increaseRegPressure((uint64_t)v73, v54, v52, v53);
      }
      while (v46 != (int *)v47);
    }
    sub_1C47655E8((uint64_t)&v105, v106);
    if (v102 != v104)
      free(v102);
    v3 = v69;
    if (v108 != (int *)v110)
      free(v108);
    if ((_BYTE)v75)
    {
      CurrSlot = llvm::RegPressureTracker::getCurrSlot((llvm::RegPressureTracker *)v73);
      v56 = v74;
      v74[40] = (void *)CurrSlot;
    }
    else
    {
      v56 = v74;
      v74[40] = (void *)v77;
    }
    if (*((_DWORD *)v56 + 45) < v80)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v56 + 21), (uint64_t)(v56 + 23), v80, 16);
      v56 = v74;
    }
    sub_1C5258650((unsigned int *)&v79, (uint64_t)(v56 + 21));
    v58 = (_BYTE *)v69[3];
    v57 = (_BYTE *)v69[4];
    v59 = v57 - v58;
    if (v57 == v58)
    {
      v60 = 0;
      v61 = 0;
    }
    else
    {
      if (v59 < 0)
        abort();
      v60 = (uint64_t *)operator new(v57 - v58);
      memmove(v60, v58, v59);
      v61 = &v60[v59 >> 3];
    }
    v62 = 126 - 2 * __clz(v61 - v60);
    if (v61 == v60)
      v63 = 0;
    else
      v63 = v62;
    sub_1C5193A24(v60, v61, v63, 1);
    if (v61 == v60)
    {
LABEL_103:
      if (!v60)
      {
LABEL_105:
        if (__p)
        {
          v91 = __p;
          operator delete(__p);
        }
        free(v88);
        if (v85 != v87)
          free(v85);
        free(v82);
        if (v79 != v81)
          free(v79);
        if (*((_QWORD *)&v77 + 1))
        {
          *(_QWORD *)&v78 = *((_QWORD *)&v77 + 1);
          operator delete(*((void **)&v77 + 1));
        }
        if (v99 != v101)
          free(v99);
        if (v96 != v98)
          free(v96);
        if (v93)
        {
          v94 = v93;
          operator delete(v93);
        }
        v4 = v67;
        goto LABEL_120;
      }
    }
    else
    {
      v64 = v60;
      while (1)
      {
        v65 = *v64;
        v66 = *(_QWORD *)(*v64 + 8);
        if (!v66 || (*(_BYTE *)v66 & 4) == 0)
        {
          while ((*(_WORD *)(v66 + 44) & 8) != 0)
            v66 = *(_QWORD *)(v66 + 8);
        }
        *(_QWORD *)&v77 = *(_QWORD *)(v66 + 8);
        LODWORD(v109) = 0;
        v108 = 0;
        llvm::RegPressureTracker::getMaxUpwardPressureDelta((uint64_t)v73, *(const llvm::MachineInstr **)(v65 + 8), 0, (uint64_t)&v108, 0, 0, (uint64_t)v93, (v94 - (_BYTE *)v93) >> 2);
        if ((_WORD)v108)
          break;
        llvm::RegPressureTracker::recede((uint64_t)v73, 0);
        if (++v64 == v61)
          goto LABEL_103;
      }
      v69[9] = *v64;
      if (!v60)
        goto LABEL_105;
    }
    operator delete(v60);
    goto LABEL_105;
  }
}

void llvm::SwingSchedulerDAG::colocateNodeSets(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  int v20;
  int64x2_t v21;
  uint64_t v22;
  uint64_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[64];
  uint64_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[10];

  v38[8] = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned int *)a2 + 2);
  if ((int)v2 >= 1)
  {
    v4 = 0;
    v20 = 0;
    v21 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    for (i = 1; ; ++i)
    {
      v6 = *a2;
      v31 = 1;
      v32 = v21;
      v33 = v21;
      v34 = v21;
      v35 = v21;
      v7 = v6 + 88 * v4;
      v36 = v38;
      v37 = 0x800000000;
      if (*(_QWORD *)(v7 + 24) != *(_QWORD *)(v7 + 32) && sub_1C518D680(v7, (uint64_t)&v31, 0) && v4 < v2 - 1)
        break;
LABEL_8:
      if (v36 != v38)
        free(v36);
      if ((v31 & 1) == 0)
        MEMORY[0x1CAA32FB4](v32.i64[0], 8);
      if (++v4 == v2)
        return;
    }
    v9 = v6 + 88 * v4;
    v10 = (_DWORD *)(v9 + 52);
    v19 = (_DWORD *)(v9 + 64);
    v11 = i;
    while (1)
    {
      v12 = *a2;
      v13 = *a2 + 88 * v11;
      if (*v10 != *(_DWORD *)(v13 + 52))
        goto LABEL_34;
      v23 = 1;
      v24 = v21;
      v25 = v21;
      v26 = v21;
      v27 = v21;
      v28 = v30;
      v29 = 0x800000000;
      if (*(_QWORD *)(v13 + 24) == *(_QWORD *)(v13 + 32) || !sub_1C518D680(v13, (uint64_t)&v23, 0))
      {
        v18 = 7;
        goto LABEL_28;
      }
      v14 = v37;
      v15 = v29;
      if (v37 > v29)
        goto LABEL_27;
      if (!(_DWORD)v37)
        break;
      v16 = (uint64_t *)v36;
      v17 = 8 * v37;
      while ((sub_1C61F8EB4((uint64_t)&v23, *v16, &v22) & 1) != 0)
      {
        ++v16;
        v17 -= 8;
        if (!v17)
        {
          v14 = v37;
          v15 = v29;
          goto LABEL_24;
        }
      }
      v18 = 0;
LABEL_28:
      if (v28 != v30)
        free(v28);
      if ((v23 & 1) == 0)
        MEMORY[0x1CAA32FB4](v24.i64[0], 8);
      if (v18 != 7 && v18)
        goto LABEL_8;
LABEL_34:
      if (++v11 == v2)
        goto LABEL_8;
    }
LABEL_24:
    if (v14 == v15)
    {
      *v19 = ++v20;
      *(_DWORD *)(v12 + 88 * v11 + 64) = v20;
      v18 = 5;
      goto LABEL_28;
    }
LABEL_27:
    v18 = 0;
    goto LABEL_28;
  }
}

_QWORD *llvm::SwingSchedulerDAG::checkNodeSets(_QWORD *result, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_DWORD *)result + 660);
  if (v2 >= 0x11)
  {
    v4 = a2[2];
    if (v4)
    {
      v5 = (unsigned int *)(*(_QWORD *)a2 + 60);
      v6 = 88 * v4;
      while ((int)*(v5 - 2) <= 2 && *v5 <= v2)
      {
        v5 += 22;
        v6 -= 88;
        if (!v6)
        {
          v7 = 88 * v4;
          v8 = *(_QWORD *)a2 - 88;
          do
          {
            result = sub_1C6176BF8((_QWORD *)(v8 + v7));
            v7 -= 88;
          }
          while (v7);
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      a2[2] = 0;
    }
  }
  return result;
}

_QWORD *llvm::SwingSchedulerDAG::groupRemainingNodes(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;
  int v11;
  unsigned int v12;
  _BYTE *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;
  int v19;
  unsigned int v20;
  _BYTE *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  int64x2_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  int v51;
  _BYTE v52[64];
  _QWORD v53[2];
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  void *v63;
  uint64_t v64;
  _QWORD v65[10];

  v65[8] = *MEMORY[0x1E0C80C00];
  v53[0] = 0;
  v53[1] = 0;
  v54 = 0;
  v56 = 0;
  v57 = 0;
  v55 = 0;
  v48 = v52;
  v49 = v52;
  v50 = 8;
  v51 = 0;
  v3 = *(_DWORD *)(a2 + 8);
  if (!v3)
    goto LABEL_50;
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)a2 + 88 * v3;
  v36 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    v58 = 1;
    v59 = v36;
    v60 = v36;
    v61 = v36;
    v62 = v36;
    v63 = v65;
    v64 = 0x800000000;
    if (!sub_1C518D680(v4, (uint64_t)&v58, 0))
      goto LABEL_24;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v41 = 0;
    v42 = 0;
    v40 = 0;
    if (!(_DWORD)v64)
      goto LABEL_23;
    v6 = (uint64_t *)v63;
    v7 = 8 * v64;
    do
    {
      v8 = *v6;
      if (v49 == v48)
        goto LABEL_7;
      if (v50 < 0x21 || 4 * (HIDWORD(v50) - v51) >= v50)
      {
        memset(v49, 255, 8 * v50);
LABEL_7:
        HIDWORD(v50) = 0;
        v51 = 0;
        goto LABEL_8;
      }
      free(v49);
      v10 = HIDWORD(v50) - v51;
      v11 = 1 << (33 - __clz(HIDWORD(v50) - v51 - 1));
      HIDWORD(v50) = 0;
      v51 = 0;
      if (v10 <= 0x10)
        v12 = 32;
      else
        v12 = v11;
      LODWORD(v50) = v12;
      v13 = malloc_type_malloc(8 * v12, 0x4065EBACuLL);
      if (!v13)
LABEL_80:
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v49 = v13;
      memset(v13, 255, 8 * v50);
LABEL_8:
      sub_1C518D81C(v8, (uint64_t)&v37, (uint64_t)v53, v4, (llvm::SmallPtrSetImplBase *)&v48);
      ++v6;
      v7 -= 8;
    }
    while (v7);
    if (v40 != v41)
      sub_1C518D9D0((_QWORD *)v4, v40, v41);
LABEL_23:
    sub_1C6176BF8(&v37);
LABEL_24:
    sub_1C61F8CBC(&v58);
    LODWORD(v64) = 0;
    if (!sub_1C518D680((uint64_t)v53, (uint64_t)&v58, 0))
      goto LABEL_45;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v41 = 0;
    v42 = 0;
    v40 = 0;
    if (!(_DWORD)v64)
      goto LABEL_44;
    v14 = (uint64_t *)v63;
    v15 = 8 * v64;
    while (2)
    {
      v16 = *v14;
      if (v49 == v48)
      {
LABEL_28:
        HIDWORD(v50) = 0;
        v51 = 0;
      }
      else
      {
        if (v50 < 0x21 || 4 * (HIDWORD(v50) - v51) >= v50)
        {
          memset(v49, 255, 8 * v50);
          goto LABEL_28;
        }
        free(v49);
        v18 = HIDWORD(v50) - v51;
        v19 = 1 << (33 - __clz(HIDWORD(v50) - v51 - 1));
        HIDWORD(v50) = 0;
        v51 = 0;
        if (v18 <= 0x10)
          v20 = 32;
        else
          v20 = v19;
        LODWORD(v50) = v20;
        v21 = malloc_type_malloc(8 * v20, 0x4065EBACuLL);
        if (!v21)
          goto LABEL_80;
        v49 = v21;
        memset(v21, 255, 8 * v50);
      }
      sub_1C518D81C(v16, (uint64_t)&v37, v4, (uint64_t)v53, (llvm::SmallPtrSetImplBase *)&v48);
      ++v14;
      v15 -= 8;
      if (v15)
        continue;
      break;
    }
    if (v40 != v41)
      sub_1C518D9D0((_QWORD *)v4, v40, v41);
LABEL_44:
    sub_1C6176BF8(&v37);
LABEL_45:
    sub_1C518D9D0(v53, *(uint64_t **)(v4 + 24), *(uint64_t **)(v4 + 32));
    if (v63 != v65)
      free(v63);
    if ((v58 & 1) == 0)
      MEMORY[0x1CAA32FB4](v59.i64[0], 8);
    v4 += 88;
  }
  while (v4 != v5);
LABEL_50:
  v46 = 0;
  v47 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  v43 = 0;
  v45 = 0;
  v44 = 0;
  v58 = 1;
  v59 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v60 = v59;
  v61 = v59;
  v62 = v59;
  v63 = v65;
  v64 = 0x800000000;
  if (sub_1C518D680((uint64_t)v53, (uint64_t)&v58, 0) && (_DWORD)v64)
  {
    v22 = (uint64_t *)v63;
    v23 = 8 * v64;
    do
    {
      v24 = *v22++;
      llvm::SwingSchedulerDAG::addConnectedNodes(a1, v24, &v37, (uint64_t)v53);
      v23 -= 8;
    }
    while (v23);
  }
  if (v40 != v41)
    sub_1C61F657C(a2, (unint64_t)&v37);
  sub_1C6189548((unsigned int *)&v37);
  v41 = v40;
  v43 = 0;
  v46 = 0;
  v44 = 0;
  v45 = 0;
  if (sub_1C518DB08((uint64_t)v53, (uint64_t)&v58, 0) && (_DWORD)v64)
  {
    v25 = (uint64_t *)v63;
    v26 = 8 * v64;
    do
    {
      v27 = *v25++;
      llvm::SwingSchedulerDAG::addConnectedNodes(a1, v27, &v37, (uint64_t)v53);
      v26 -= 8;
    }
    while (v26);
  }
  if (v40 != v41)
    sub_1C61F657C(a2, (unint64_t)&v37);
  v28 = *(_QWORD *)(a1 + 48);
  v29 = *(_QWORD *)(a1 + 56);
  while (2)
  {
    if (v28 != v29)
    {
      if (v54)
      {
        v30 = ((v28 >> 4) ^ (v28 >> 9)) & (v54 - 1);
        v31 = *(_QWORD *)(v53[0] + 8 * v30);
        if (v28 == v31)
        {
LABEL_66:
          v28 += 272;
          continue;
        }
        v32 = 1;
        while (v31 != -4096)
        {
          v33 = v30 + v32++;
          v30 = v33 & (v54 - 1);
          v31 = *(_QWORD *)(v53[0] + 8 * v30);
          if (v28 == v31)
            goto LABEL_66;
        }
      }
      sub_1C6189548((unsigned int *)&v37);
      v41 = v40;
      v43 = 0;
      v46 = 0;
      v44 = 0;
      v45 = 0;
      llvm::SwingSchedulerDAG::addConnectedNodes(a1, v28, &v37, (uint64_t)v53);
      if (v40 != v41)
        sub_1C61F657C(a2, (unint64_t)&v37);
      goto LABEL_66;
    }
    break;
  }
  if (v63 != v65)
    free(v63);
  if ((v58 & 1) == 0)
    MEMORY[0x1CAA32FB4](v59.i64[0], 8);
  sub_1C6176BF8(&v37);
  if (v49 != v48)
    free(v49);
  return sub_1C6176BF8(v53);
}

void llvm::SwingSchedulerDAG::computeNodeOrder(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  llvm::SUnit *v23;
  llvm::SUnit **v24;
  uint64_t v25;
  llvm::SUnit *v26;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  llvm::SUnit *v48;
  llvm::SUnit **v49;
  uint64_t v50;
  llvm::SUnit *v51;
  unsigned int v52;
  int v53;
  int v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64x2_t v74;
  llvm::SUnit *v75;
  unint64_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  void *v81;
  uint64_t v82;
  _BYTE v83[64];
  uint64_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  void *v89;
  uint64_t v90;
  _BYTE v91[64];
  uint64_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  void *v97;
  uint64_t v98;
  _QWORD v99[10];

  v99[8] = *MEMORY[0x1E0C80C00];
  v92 = 1;
  v93 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v94 = v93;
  v95 = v93;
  v96 = v93;
  v74 = v93;
  v97 = v99;
  v98 = 0x800000000;
  v4 = (_QWORD *)(a1 + 3128);
  sub_1C6189548((unsigned int *)(a1 + 3128));
  *(_QWORD *)(a1 + 3160) = *(_QWORD *)(a1 + 3152);
  v72 = a2;
  v5 = *(_DWORD *)(a2 + 8);
  if (!v5)
    goto LABEL_155;
  v6 = *(_QWORD *)a2;
  v73 = *(_QWORD *)a2 + 88 * v5;
  do
  {
    v84 = 1;
    v85 = v74;
    v86 = v74;
    v87 = v74;
    v88 = v74;
    v89 = v91;
    v90 = 0x800000000;
    if (sub_1C518DB08((uint64_t)v4, (uint64_t)&v84, 0) && sub_1C518DCAC((uint64_t *)v89, v90, v6))
    {
      sub_1C61F6608(&v92, (uint64_t *)v89, (uint64_t *)v89 + v90);
LABEL_94:
      v10 = 0;
      goto LABEL_36;
    }
    if (sub_1C518D680((uint64_t)v4, (uint64_t)&v84, 0) && sub_1C518DCAC((uint64_t *)v89, v90, v6))
    {
      sub_1C61F6608(&v92, (uint64_t *)v89, (uint64_t *)v89 + v90);
      goto LABEL_35;
    }
    sub_1C61F8CBC(&v92);
    LODWORD(v98) = 0;
    if (!(_DWORD)v90)
      goto LABEL_16;
    v7 = 0;
    v8 = 8 * v90;
    do
    {
      v75 = *(llvm::SUnit **)((char *)v89 + v7);
      if (sub_1C61B75F0(*(_QWORD *)v6, *(_DWORD *)(v6 + 16), (uint64_t)v75, &v76))
        sub_1C61F66B4((uint64_t)&v92, (uint64_t *)&v75);
      v7 += 8;
    }
    while (v8 != v7);
    v9 = v98;
    if (!(_DWORD)v98)
    {
LABEL_16:
      if (*(_DWORD *)(v72 + 8) == 1)
      {
        v12 = *(uint64_t **)(v6 + 24);
        v11 = *(uint64_t **)(v6 + 32);
        while (v12 != v11)
        {
          if (!*(_DWORD *)(*v12 + 120))
            sub_1C61F66B4((uint64_t)&v92, v12);
          ++v12;
        }
      }
      else
      {
        v76 = 0;
        v13 = *(unint64_t **)(v6 + 24);
        v14 = *(unint64_t **)(v6 + 32);
        if (v13 != v14)
        {
          v15 = 0;
          v16 = 0;
          do
          {
            if (!v16
              || (v17 = *(unsigned int *)(*v13 + 192),
                  v18 = *(_QWORD *)(a1 + 3104),
                  v19 = *(_DWORD *)(v18 + 16 * v17),
                  v20 = *(unsigned int *)(v16 + 192),
                  v21 = *(_DWORD *)(v18 + 16 * v20),
                  v19 > v21)
              || (v17 > v20 ? (v22 = v19 == v21) : (v22 = 0), v22))
            {
              v15 = *v13;
              v16 = *v13;
            }
            ++v13;
          }
          while (v13 != v14);
          v76 = v15;
        }
        sub_1C61F66B4((uint64_t)&v92, (uint64_t *)&v76);
      }
      goto LABEL_94;
    }
    v10 = 1;
    do
    {
      if (v10 == 1)
      {
        do
        {
          v23 = 0;
          v75 = 0;
          v24 = (llvm::SUnit **)v97;
          v25 = 8 * v9;
          do
          {
            v26 = *v24;
            if (!v23)
              goto LABEL_45;
            if ((*((_BYTE *)v26 + 236) & 2) == 0)
              llvm::SUnit::ComputeHeight(*v24);
            v27 = *((_DWORD *)v26 + 61);
            if ((*((_BYTE *)v23 + 236) & 2) == 0)
              llvm::SUnit::ComputeHeight(v23);
            if (v27 > *((_DWORD *)v23 + 61))
              goto LABEL_45;
            if ((*((_BYTE *)v26 + 236) & 2) == 0)
              llvm::SUnit::ComputeHeight(v26);
            v28 = *((_DWORD *)v26 + 61);
            if ((*((_BYTE *)v23 + 236) & 2) == 0)
              llvm::SUnit::ComputeHeight(v23);
            if (v28 == *((_DWORD *)v23 + 61)
              && *(_DWORD *)(*(_QWORD *)(a1 + 3104) + 16 * *((unsigned int *)v26 + 48) + 12) > *(_DWORD *)(*(_QWORD *)(a1 + 3104) + 16 * *((unsigned int *)v23 + 48) + 12))
            {
              goto LABEL_45;
            }
            if ((*((_BYTE *)v26 + 236) & 2) == 0)
              llvm::SUnit::ComputeHeight(v26);
            v29 = *((_DWORD *)v26 + 61);
            if ((*((_BYTE *)v23 + 236) & 2) == 0)
              llvm::SUnit::ComputeHeight(v23);
            if (v29 == *((_DWORD *)v23 + 61))
            {
              v30 = *(_QWORD *)(a1 + 3104);
              v31 = (_DWORD *)(v30 + 16 * *((unsigned int *)v26 + 48));
              v32 = (_DWORD *)(v30 + 16 * *((unsigned int *)v23 + 48));
              if (v31[3] == v32[3] && v31[1] - *v31 < v32[1] - *v32)
              {
LABEL_45:
                v75 = v26;
                v23 = v26;
              }
            }
            ++v24;
            v25 -= 8;
          }
          while (v25);
          sub_1C518D044(v4, (uint64_t *)&v75);
          sub_1C61F6734((uint64_t)&v92, (uint64_t *)&v75);
          v33 = *((unsigned int *)v23 + 30);
          if ((_DWORD)v33)
          {
            v34 = *((_QWORD *)v23 + 14);
            v35 = 16 * v33;
            do
            {
              if (sub_1C61B75F0(*(_QWORD *)v6, *(_DWORD *)(v6 + 16), *(_QWORD *)v34 & 0xFFFFFFFFFFFFFFF8, &v76))
              {
                v36 = *(_QWORD *)v34 & 0xFFFFFFFFFFFFFFF8;
                v76 = 0;
                if (sub_1C61B75F0(*(_QWORD *)(a1 + 3128), *(_DWORD *)(a1 + 3144), v36, &v76))
                {
                  v37 = v76;
                  v38 = *(_QWORD *)(a1 + 3128);
                  v39 = *(unsigned int *)(a1 + 3144);
                }
                else
                {
                  v38 = *(_QWORD *)(a1 + 3128);
                  v39 = *(unsigned int *)(a1 + 3144);
                  v37 = v38 + 8 * v39;
                }
                if (v37 == v38 + 8 * v39 && ((~*(_QWORD *)v34 & 6) != 0 || *(_DWORD *)(v34 + 8) != 3))
                {
                  v76 = *(_QWORD *)v34 & 0xFFFFFFFFFFFFFFF8;
                  sub_1C61F66B4((uint64_t)&v92, (uint64_t *)&v76);
                }
              }
              v34 += 16;
              v35 -= 16;
            }
            while (v35);
          }
          v41 = *((unsigned int *)v23 + 10);
          if ((_DWORD)v41)
          {
            v42 = (_QWORD *)*((_QWORD *)v23 + 4);
            v43 = 16 * v41;
            do
            {
              if ((*v42 & 6) == 2
                && sub_1C61B75F0(*(_QWORD *)v6, *(_DWORD *)(v6 + 16), *v42 & 0xFFFFFFFFFFFFFFF8, &v76))
              {
                v44 = *v42 & 0xFFFFFFFFFFFFFFF8;
                v76 = 0;
                if (sub_1C61B75F0(*(_QWORD *)(a1 + 3128), *(_DWORD *)(a1 + 3144), v44, &v76))
                {
                  v45 = v76;
                  v46 = *(_QWORD *)(a1 + 3128);
                  v47 = *(unsigned int *)(a1 + 3144);
                }
                else
                {
                  v46 = *(_QWORD *)(a1 + 3128);
                  v47 = *(unsigned int *)(a1 + 3144);
                  v45 = v46 + 8 * v47;
                }
                if (v45 == v46 + 8 * v47)
                {
                  v76 = *v42 & 0xFFFFFFFFFFFFFFF8;
                  sub_1C61F66B4((uint64_t)&v92, (uint64_t *)&v76);
                }
              }
              v42 += 2;
              v43 -= 16;
            }
            while (v43);
          }
          v9 = v98;
        }
        while ((_DWORD)v98);
        v76 = 1;
        v77 = v74;
        v78 = v74;
        v79 = v74;
        v80 = v74;
        v81 = v83;
        v82 = 0x800000000;
        if (sub_1C518DB08((uint64_t)v4, (uint64_t)&v76, v6))
          sub_1C61F6608(&v92, (uint64_t *)v81, (uint64_t *)v81 + v82);
        if (v81 != v83)
          free(v81);
        if ((v76 & 1) == 0)
          MEMORY[0x1CAA32FB4](v77.i64[0], 8);
        goto LABEL_94;
      }
      while (1)
      {
        v48 = 0;
        v75 = 0;
        v49 = (llvm::SUnit **)v97;
        v50 = 8 * v9;
        do
        {
          v51 = *v49;
          if (!v48)
            goto LABEL_102;
          if ((*((_BYTE *)v51 + 236) & 1) == 0)
            llvm::SUnit::ComputeDepth(*v49);
          v52 = *((_DWORD *)v51 + 60);
          if ((*((_BYTE *)v48 + 236) & 1) == 0)
            llvm::SUnit::ComputeDepth(v48);
          if (v52 > *((_DWORD *)v48 + 60))
            goto LABEL_102;
          if ((*((_BYTE *)v51 + 236) & 1) == 0)
            llvm::SUnit::ComputeDepth(v51);
          v53 = *((_DWORD *)v51 + 60);
          if ((*((_BYTE *)v48 + 236) & 1) == 0)
            llvm::SUnit::ComputeDepth(v48);
          if (v53 == *((_DWORD *)v48 + 60)
            && *(_DWORD *)(*(_QWORD *)(a1 + 3104) + 16 * *((unsigned int *)v51 + 48) + 8) > *(_DWORD *)(*(_QWORD *)(a1 + 3104) + 16 * *((unsigned int *)v48 + 48) + 8))
          {
            goto LABEL_102;
          }
          if ((*((_BYTE *)v51 + 236) & 1) == 0)
            llvm::SUnit::ComputeDepth(v51);
          v54 = *((_DWORD *)v51 + 60);
          if ((*((_BYTE *)v48 + 236) & 1) == 0)
            llvm::SUnit::ComputeDepth(v48);
          if (v54 == *((_DWORD *)v48 + 60))
          {
            v55 = *(_QWORD *)(a1 + 3104);
            v56 = (_DWORD *)(v55 + 16 * *((unsigned int *)v51 + 48));
            v57 = (_DWORD *)(v55 + 16 * *((unsigned int *)v48 + 48));
            if (v56[2] == v57[2] && v56[1] - *v56 < v57[1] - *v57)
            {
LABEL_102:
              v75 = v51;
              v48 = v51;
            }
          }
          ++v49;
          v50 -= 8;
        }
        while (v50);
        sub_1C518D044(v4, (uint64_t *)&v75);
        sub_1C61F6734((uint64_t)&v92, (uint64_t *)&v75);
        if (*(llvm::SUnit **)(v6 + 72) == v48)
          break;
        v58 = *((unsigned int *)v48 + 10);
        if ((_DWORD)v58)
        {
          v59 = (_QWORD *)*((_QWORD *)v48 + 4);
          v60 = 16 * v58;
          do
          {
            if (sub_1C61B75F0(*(_QWORD *)v6, *(_DWORD *)(v6 + 16), *v59 & 0xFFFFFFFFFFFFFFF8, &v76))
            {
              v61 = *v59 & 0xFFFFFFFFFFFFFFF8;
              v76 = 0;
              if (sub_1C61B75F0(*(_QWORD *)(a1 + 3128), *(_DWORD *)(a1 + 3144), v61, &v76))
              {
                v62 = v76;
                v63 = *(_QWORD *)(a1 + 3128);
                v64 = *(unsigned int *)(a1 + 3144);
              }
              else
              {
                v63 = *(_QWORD *)(a1 + 3128);
                v64 = *(unsigned int *)(a1 + 3144);
                v62 = v63 + 8 * v64;
              }
              if (v62 == v63 + 8 * v64)
              {
                v76 = *v59 & 0xFFFFFFFFFFFFFFF8;
                sub_1C61F66B4((uint64_t)&v92, (uint64_t *)&v76);
              }
            }
            v59 += 2;
            v60 -= 16;
          }
          while (v60);
        }
        v65 = *((unsigned int *)v48 + 30);
        if ((_DWORD)v65)
        {
          v66 = (_QWORD *)*((_QWORD *)v48 + 14);
          v67 = 16 * v65;
          do
          {
            if ((*v66 & 6) == 2
              && sub_1C61B75F0(*(_QWORD *)v6, *(_DWORD *)(v6 + 16), *v66 & 0xFFFFFFFFFFFFFFF8, &v76))
            {
              v68 = *v66 & 0xFFFFFFFFFFFFFFF8;
              v76 = 0;
              if (sub_1C61B75F0(*(_QWORD *)(a1 + 3128), *(_DWORD *)(a1 + 3144), v68, &v76))
              {
                v69 = v76;
                v70 = *(_QWORD *)(a1 + 3128);
                v71 = *(unsigned int *)(a1 + 3144);
              }
              else
              {
                v70 = *(_QWORD *)(a1 + 3128);
                v71 = *(unsigned int *)(a1 + 3144);
                v69 = v70 + 8 * v71;
              }
              if (v69 == v70 + 8 * v71)
              {
                v76 = *v66 & 0xFFFFFFFFFFFFFFF8;
                sub_1C61F66B4((uint64_t)&v92, (uint64_t *)&v76);
              }
            }
            v66 += 2;
            v67 -= 16;
          }
          while (v67);
        }
        v9 = v98;
        if (!(_DWORD)v98)
          goto LABEL_142;
      }
      sub_1C61F8CBC(&v92);
      LODWORD(v98) = 0;
      v76 = **(_QWORD **)(v6 + 24);
      sub_1C61F66B4((uint64_t)&v92, (uint64_t *)&v76);
LABEL_142:
      v76 = 1;
      v77 = v74;
      v78 = v74;
      v79 = v74;
      v80 = v74;
      v81 = v83;
      v82 = 0x800000000;
      if (sub_1C518D680((uint64_t)v4, (uint64_t)&v76, v6))
        sub_1C61F6608(&v92, (uint64_t *)v81, (uint64_t *)v81 + v82);
      if (v81 != v83)
        free(v81);
      if ((v76 & 1) == 0)
        MEMORY[0x1CAA32FB4](v77.i64[0], 8);
LABEL_35:
      v10 = 1;
LABEL_36:
      v9 = v98;
    }
    while ((_DWORD)v98);
    if (v89 != v91)
      free(v89);
    if ((v84 & 1) == 0)
      MEMORY[0x1CAA32FB4](v85.i64[0], 8);
    v6 += 88;
  }
  while (v6 != v73);
LABEL_155:
  if (v97 != v99)
    free(v97);
  if ((v92 & 1) == 0)
    MEMORY[0x1CAA32FB4](v93.i64[0], 8);
}

void llvm::SwingSchedulerDAG::checkValidNodeOrder(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;

  v3 = *(_QWORD *)(a1 + 3160);
  v4 = *(_QWORD *)(a1 + 3152);
  v5 = v3 - v4;
  if (v3 == v4)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFF9)
LABEL_81:
      abort();
    v6 = (unint64_t *)operator new(2 * v5);
    v7 = &v6[2 * (v5 >> 3)];
    v8 = v6;
    do
    {
      *v8 = 0;
      *((_DWORD *)v8 + 2) = 0;
      v8 += 2;
    }
    while (v8 != v7);
  }
  if ((v5 & 0x7FFFFFFF8) != 0)
  {
    v9 = 0;
    v10 = ((unint64_t)v5 >> 3);
    v11 = v7;
    do
    {
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 3152) + 8 * v9);
      if (v11 >= v7)
      {
        v14 = ((char *)v11 - (char *)v6) >> 4;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 60)
          goto LABEL_81;
        if (v7 - v6 > v15)
          v15 = v7 - v6;
        if ((unint64_t)((char *)v7 - (char *)v6) >= 0x7FFFFFFFFFFFFFF0)
          v16 = 0xFFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
        {
          if (v16 >> 60)
            sub_1C4764EE4();
          v17 = (char *)operator new(16 * v16);
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[16 * v14];
        *(_QWORD *)v18 = v12;
        *((_QWORD *)v18 + 1) = v9;
        if (v11 == v6)
        {
          v6 = (unint64_t *)&v17[16 * v14];
        }
        else
        {
          v19 = (unint64_t *)&v17[16 * v14];
          do
          {
            *((_OWORD *)v19 - 1) = *((_OWORD *)v11 - 1);
            v19 -= 2;
            v11 -= 2;
          }
          while (v11 != v6);
          v11 = v6;
          v6 = v19;
        }
        v7 = (unint64_t *)&v17[16 * v16];
        v13 = (unint64_t *)(v18 + 16);
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v11 = v12;
        v11[1] = v9;
        v13 = v11 + 2;
      }
      ++v9;
      v11 = v13;
    }
    while (v9 != v10);
  }
  else
  {
    v13 = v7;
  }
  v20 = 126 - 2 * __clz(((char *)v13 - (char *)v6) >> 4);
  if (v13 == v6)
    v21 = 0;
  else
    v21 = v20;
  sub_1C51948AC(v6, v13, v21, 1);
  v22 = *(_QWORD *)(a1 + 3160) - *(_QWORD *)(a1 + 3152);
  if ((v22 & 0x7FFFFFFF8) != 0)
  {
    v23 = 0;
    v24 = (v22 >> 3);
    do
    {
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 3152) + 8 * v23);
      v26 = *(unsigned int *)(v25 + 40);
      if ((_DWORD)v26)
      {
        v27 = *(_QWORD **)(v25 + 32);
        v28 = &v27[2 * v26];
        while (1)
        {
          v29 = *v27 & 0xFFFFFFFFFFFFFFF8;
          v30 = v6;
          if (v13 != v6)
          {
            v30 = v6;
            v31 = ((char *)v13 - (char *)v6) >> 4;
            do
            {
              v32 = v31 >> 1;
              v33 = &v30[2 * (v31 >> 1)];
              v35 = *v33;
              v34 = v33 + 2;
              v31 += ~(v31 >> 1);
              if (v29 > v35)
                v30 = v34;
              else
                v31 = v32;
            }
            while (v31);
          }
          if (v23 > *((unsigned int *)v30 + 2))
          {
            v36 = **(unsigned __int16 **)(*(_QWORD *)(v29 + 8) + 16);
            if (v36 != 69 && v36 != 0)
              break;
          }
          v27 += 2;
          if (v27 == v28)
            goto LABEL_51;
        }
        v50 = 1;
      }
      else
      {
LABEL_51:
        v50 = 0;
      }
      v38 = *(unsigned int *)(v25 + 120);
      if ((_DWORD)v38)
      {
        v39 = *(_QWORD **)(v25 + 112);
        v40 = &v39[2 * v38];
        while (1)
        {
          v41 = *v39 & 0xFFFFFFFFFFFFFFF8;
          if (*(_DWORD *)(v41 + 192) != -1)
          {
            v42 = v6;
            if (v13 != v6)
            {
              v42 = v6;
              v43 = ((char *)v13 - (char *)v6) >> 4;
              do
              {
                v44 = v43 >> 1;
                v45 = &v42[2 * (v43 >> 1)];
                v47 = *v45;
                v46 = v45 + 2;
                v43 += ~(v43 >> 1);
                if (v41 > v47)
                  v42 = v46;
                else
                  v43 = v44;
              }
              while (v43);
            }
            if (v23 > *((unsigned int *)v42 + 2))
            {
              v48 = **(unsigned __int16 **)(*(_QWORD *)(v41 + 8) + 16);
              if (v48 != 69 && v48 != 0)
                break;
            }
          }
          v39 += 2;
          if (v39 == v40)
            goto LABEL_68;
        }
        if (v50)
        {
          if (**(_WORD **)(*(_QWORD *)(v25 + 8) + 16))
          {
            if (**(_WORD **)(*(_QWORD *)(v25 + 8) + 16) != 69)
            {
              v51 = *((_DWORD *)a2 + 2);
              if (v51)
              {
                v52 = *a2;
                v53 = *a2 + 88 * v51;
                do
                {
                  if ((sub_1C61B75F0(*(_QWORD *)v52, *(_DWORD *)(v52 + 16), v25, &v55) & 1) != 0)
                    break;
                  v52 += 88;
                }
                while (v52 != v53);
              }
            }
          }
        }
      }
LABEL_68:
      ++v23;
    }
    while (v23 != v24);
  }
  if (v6)
    operator delete(v6);
}

BOOL llvm::SwingSchedulerDAG::schedulePipeline(llvm::SwingSchedulerDAG *this, llvm::SMSchedule *a2)
{
  _BOOL8 result;
  unsigned int v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int data;
  llvm::SMSchedule *v15;
  llvm::SUnit *v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v22;
  char isValidSchedule;
  uint64_t ****v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  void **v37;
  char *v38;
  unint64_t v39;
  void **v40;
  char *v41;
  std::string v42;
  void *__p;
  char v44;
  void *v45[2];
  char v46;
  void *v47;
  char v48;
  unsigned __int8 *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  unsigned int v53;
  uint64_t v54;
  int v55[2];
  int v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  const char *v62;
  const char *v63;
  uint64_t v64;
  char v65;
  char v66;
  void *v67;
  uint64_t v68;
  _BYTE v69[260];
  int v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 394) == *((_QWORD *)this + 395))
    return 0;
  v5 = *((_DWORD *)this + 660);
  if (v5 > *((_DWORD *)this + 661))
    goto LABEL_60;
  v41 = (char *)a2 + 32;
  do
  {
    sub_1C61F80D8((uint64_t)a2);
    sub_1C6143384(*((_QWORD **)a2 + 4));
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = v41;
    *((_QWORD *)a2 + 6) = 0;
    *((_DWORD *)a2 + 14) = v5;
    v6 = (uint64_t *)*((_QWORD *)this + 394);
    v7 = v5 - 1;
    v8 = (uint64_t *)*((_QWORD *)this + 395);
    while (1)
    {
      v9 = *v6;
      v55[0] = 0x80000000;
      LODWORD(v50) = 0x7FFFFFFF;
      LODWORD(v45[0]) = 0x7FFFFFFF;
      LODWORD(v42.__r_.__value_.__l.__data_) = 0x80000000;
      llvm::SMSchedule::computeStart((uint64_t)a2, v9, v55, (int *)&v50, (int *)v45, (int *)&v42, v5, (llvm::TargetInstrInfo **)this);
      v10 = (int)v50;
      v11 = v55[0] > (int)v50 || SLODWORD(v45[0]) < v55[0];
      if (v11 || SLODWORD(v42.__r_.__value_.__l.__data_) > (int)v50)
        break;
      if (v55[0] != 0x80000000 && (_DWORD)v50 == 0x7FFFFFFF)
      {
        if ((int)(v55[0] + v7) >= SLODWORD(v45[0]))
          data = (int)v45[0];
        else
          data = v55[0] + v7;
        v15 = a2;
        v16 = (llvm::SUnit *)v9;
        v10 = v55[0];
      }
      else if (v55[0] != 0x80000000 || (_DWORD)v50 == 0x7FFFFFFF)
      {
        if (v55[0] == 0x80000000 || (_DWORD)v50 == 0x7FFFFFFF)
        {
          v22 = *(_DWORD *)(*((_QWORD *)this + 388) + 16 * *(unsigned int *)(v9 + 192)) + *((_DWORD *)a2 + 12);
          if (!llvm::SMSchedule::insert(a2, (llvm::SUnit *)v9, v22, v22 + v7, v5))
            break;
          goto LABEL_29;
        }
        if ((int)(v55[0] + v5) <= (int)v50)
          v18 = v55[0] + v5 - 1;
        else
          v18 = (int)v50;
        if (v18 >= SLODWORD(v45[0]))
          v19 = (int)v45[0];
        else
          v19 = v18;
        v20 = **(unsigned __int16 **)(*(_QWORD *)(v9 + 8) + 16);
        v15 = a2;
        v16 = (llvm::SUnit *)v9;
        if (v20 == 69 || v20 == 0)
        {
          v10 = v19;
          data = v55[0];
        }
        else
        {
          v10 = v55[0];
          data = v19;
        }
      }
      else
      {
        if (SLODWORD(v42.__r_.__value_.__l.__data_) <= (int)((_DWORD)v50 - v5 + 1))
          data = (_DWORD)v50 - v5 + 1;
        else
          data = (int)v42.__r_.__value_.__l.__data_;
        v15 = a2;
        v16 = (llvm::SUnit *)v9;
      }
      if ((llvm::SMSchedule::insert(v15, v16, v10, data, v5) & 1) == 0)
        break;
LABEL_29:
      if (dword_1ED7FB620 < 0)
      {
        if (++v6 == v8)
          goto LABEL_52;
      }
      else
      {
        ++v6;
        v17 = (*((_DWORD *)a2 + 13) - *((_DWORD *)a2 + 12)) / *((_DWORD *)a2 + 14);
        if (v6 == v8 || v17 > dword_1ED7FB620)
        {
          if (v17 <= dword_1ED7FB620)
          {
LABEL_52:
            isValidSchedule = llvm::SMSchedule::isValidSchedule(a2, this);
            goto LABEL_54;
          }
          break;
        }
      }
    }
    isValidSchedule = 0;
LABEL_54:
    ++v5;
  }
  while (v5 <= *((_DWORD *)this + 661) && (isValidSchedule & 1) == 0);
  if ((isValidSchedule & 1) == 0)
  {
LABEL_60:
    sub_1C61F80D8((uint64_t)a2);
    v27 = (_QWORD *)*((_QWORD *)a2 + 4);
    v26 = (char *)a2 + 32;
    sub_1C6143384(v27);
    result = 0;
    *((_QWORD *)v26 - 1) = v26;
    *(_QWORD *)v26 = 0;
    *((_QWORD *)v26 + 1) = 0;
    *((_QWORD *)v26 + 2) = 0;
    *((_DWORD *)v26 + 6) = 0;
    return result;
  }
  llvm::SMSchedule::finalizeSchedule(a2, this);
  v24 = *(uint64_t *****)(*((_QWORD *)this + 329) + 256);
  v25 = *(_QWORD *)****v24;
  if (*(_QWORD *)(v25 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v25 + 72) + 48))(*(_QWORD *)(v25 + 72)))
  {
    llvm::MachineLoop::getStartLoc(*((llvm::MachineLoop **)this + 332), &v49);
    v28 = (int)v49;
    if (v49)
    {
      v29 = *(_QWORD *)&v49[-8 * *((unsigned int *)v49 + 2)];
      if (*(_BYTE *)v29 != 15)
        v29 = *(_QWORD *)(v29 - 8 * *(unsigned int *)(v29 + 8));
      v30 = *((_DWORD *)v49 + 1);
      v28 = *((unsigned __int16 *)v49 + 1);
    }
    else
    {
      v29 = 0;
      v30 = 0;
    }
    v31 = **(_QWORD **)(*((_QWORD *)this + 332) + 32);
    v32 = **(_QWORD **)(v31 + 32);
    v56 = 17;
    v57 = 2;
    v58 = v32;
    v59 = v29;
    v60 = v30;
    v61 = v28;
    v62 = "pipeliner";
    v63 = "schedule";
    v64 = 8;
    v65 = 0;
    v66 = 0;
    v67 = v69;
    v68 = 0x400000000;
    v69[256] = 0;
    v70 = -1;
    v71 = v31;
    *(_QWORD *)v55 = &unk_1E8144BB0;
    v50 = "Schedule found with Initiation Interval: ";
    v51 = 41;
    sub_1C53B17B4((uint64_t)&v67, (const void **)&v50);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v45, "II", 2uLL, *((_DWORD *)a2 + 14));
    v33 = sub_1C47E3888((uint64_t)v55, (uint64_t)v45);
    v50 = ", MaxStageCount: ";
    v51 = 17;
    sub_1C53B17B4(v33 + 80, (const void **)&v50);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v42, "MaxStageCount", 0xDuLL, (*((_DWORD *)a2 + 13) - *((_DWORD *)a2 + 12)) / *((_DWORD *)a2 + 14));
    v34 = sub_1C47E3888(v33, (uint64_t)&v42);
    sub_1C61F875C((uint64_t)&v50, v34);
    v50 = (const char *)&unk_1E8144BB0;
    if (v44 < 0)
      operator delete(__p);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    if (v48 < 0)
      operator delete(v47);
    if (v46 < 0)
      operator delete(v45[0]);
    *(_QWORD *)v55 = &off_1E814E790;
    v35 = (char *)v67;
    if ((_DWORD)v68)
    {
      v36 = (unint64_t)v68 << 6;
      do
      {
        v37 = (void **)&v35[v36];
        if (v35[v36 - 17] < 0)
          operator delete(*(v37 - 5));
        if (*((char *)v37 - 41) < 0)
          operator delete(*(v37 - 8));
        v36 -= 64;
      }
      while (v36);
      v35 = (char *)v67;
    }
    if (v35 != v69)
      free(v35);
    if (v49)
      llvm::MetadataTracking::untrack((uint64_t)&v49, v49);
    llvm::MachineOptimizationRemarkEmitter::emit(v24, (llvm::DiagnosticInfoOptimizationBase *)&v50);
    v50 = (const char *)&off_1E814E790;
    v38 = (char *)v52;
    if (v53)
    {
      v39 = (unint64_t)v53 << 6;
      do
      {
        v40 = (void **)&v38[v39];
        if (v38[v39 - 17] < 0)
          operator delete(*(v40 - 5));
        if (*((char *)v40 - 41) < 0)
          operator delete(*(v40 - 8));
        v39 -= 64;
      }
      while (v39);
      v38 = (char *)v52;
    }
    if (v38 != (char *)&v54)
      free(v38);
  }
  return (*((_DWORD *)a2 + 13) - *((_DWORD *)a2 + 12)) / *((_DWORD *)a2 + 14) != 0;
}

void sub_1C518C4FC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _DWORD *v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v7;
  const llvm::Value *v8;
  uint64_t v9;
  llvm **v10;
  uint64_t v11;
  llvm *v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2 < 8)
    return;
  if ((v2 & 7) != 0)
  {
    v4 = (_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    v5 = (*(_QWORD *)(a1 + 48) & 7) != 3 || v4 == 0;
    if (v5 || *v4 != 1)
      return;
  }
  else
  {
    v2 &= 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a1 + 48) = v2;
  }
  if ((v2 & 7) != 0)
  {
    v6 = *(uint64_t **)((v2 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v6 = (uint64_t *)(v2 & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)(a1 + 48) = v6;
  }
  v7 = *v6;
  if ((v7 & 4) == 0 && (v7 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    llvm::getUnderlyingObjects(v7 & 0xFFFFFFFFFFFFFFF8, a2, 0, (llvm::Value *)6);
    v9 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v9)
    {
      v10 = *(llvm ***)a2;
      v11 = 8 * v9;
      while (1)
      {
        v12 = *v10;
        if (!llvm::isIdentifiedObject(*v10, v8))
          break;
        v13 = *(unsigned int *)(a2 + 8);
        if (v13 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v13 + 1, 8);
          v13 = *(unsigned int *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v13) = v12;
        ++*(_DWORD *)(a2 + 8);
        ++v10;
        v11 -= 8;
        if (!v11)
          return;
      }
      *(_DWORD *)(a2 + 8) = 0;
    }
  }
}

BOOL llvm::ResourceManager::canReserveResources(llvm::ResourceManager *this, const llvm::MachineInstr *a2)
{
  return llvm::ResourceManager::canReserveResources((uint64_t)this, *((_QWORD *)a2 + 2));
}

uint64_t llvm::ResourceManager::reserveResources(llvm::ResourceManager *this, const llvm::MachineInstr *a2)
{
  return llvm::ResourceManager::reserveResources((uint64_t)this, *((_QWORD *)a2 + 2));
}

void llvm::SwingSchedulerDAG::Circuits::createAdjacencyStructure(uint64_t **this, llvm::TargetInstrInfo **a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  const llvm::SDep *v24;
  const llvm::SDep *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  unint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  int *v42;
  int *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int *v48;
  int v49;
  uint64_t v50;
  int v52;
  int v53;
  int *v54;
  int32x2_t v55;
  unsigned int v56;
  void *v57;
  uint64_t v58;
  _DWORD v59[14];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v3 = 0xF0F0F0F0F0F0F0F1 * (((*this)[1] - **this) >> 4);
  v57 = v59;
  v58 = 0x600000000;
  sub_1C4765AA4((char *)&v57, (v3 + 63) >> 6, 0);
  v59[12] = v3;
  v56 = 0;
  v54 = 0;
  v55 = 0;
  v4 = -252645135 * ((unint64_t)((*this)[1] - **this) >> 4);
  v50 = v4;
  if (!(_DWORD)v4)
  {
    v39 = 0;
    goto LABEL_68;
  }
  v5 = 0;
  do
  {
    if ((_DWORD)v58)
      bzero(v57, 8 * v58);
    v6 = **this;
    v7 = v6 + 272 * v5;
    v8 = *(unsigned int *)(v7 + 120);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)(v7 + 112);
      v10 = 16 * v8;
      while (1)
      {
        v11 = *v9;
        if ((*v9 & 6) == 4)
        {
          v19 = *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 192);
          v52 = v5;
          v53 = v19;
          v20 = sub_1C61F5F34((uint64_t *)&v54, &v52);
          if (&v54[2 * v56] != v20)
          {
            v52 = v20[1];
            *v20 = 0x80000000;
            v55 = vadd_s32(v55, (int32x2_t)0x1FFFFFFFFLL);
          }
          v21 = v52;
          sub_1C61F8A6C((uint64_t)&v54, &v53)[1] = v21;
          v11 = *v9;
        }
        v12 = v11 & 0xFFFFFFFFFFFFFFF8;
        v13 = *(unsigned int *)((v11 & 0xFFFFFFFFFFFFFFF8) + 192);
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
        v14 = v11 & 6;
        if (v14 == 2)
        {
          v15 = **(unsigned __int16 **)(*(_QWORD *)(v12 + 8) + 16);
          if (v15 == 69 || v15 == 0)
          {
LABEL_18:
            if ((*((_QWORD *)v57 + (v13 >> 6)) & (1 << v13)) == 0)
            {
              v17 = (uint64_t)&this[98][4 * v5];
              v18 = *(unsigned int *)(v17 + 8);
              if (v18 >= *(unsigned int *)(v17 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&this[98][4 * v5], v17 + 16, v18 + 1, 4);
                v18 = *(unsigned int *)(v17 + 8);
              }
              *(_DWORD *)(*(_QWORD *)v17 + 4 * v18) = v13;
              ++*(_DWORD *)(v17 + 8);
              *((_QWORD *)v57 + (v13 >> 6)) |= 1 << v13;
            }
          }
        }
        else if (v14 != 6 || *((_DWORD *)v9 + 2) != 3)
        {
          goto LABEL_18;
        }
LABEL_22:
        v9 += 2;
        v10 -= 16;
        if (!v10)
        {
          v6 = **this;
          break;
        }
      }
    }
    v22 = v6 + 272 * v5;
    v23 = *(unsigned int *)(v22 + 40);
    if ((_DWORD)v23)
    {
      v24 = *(const llvm::SDep **)(v22 + 32);
      v25 = (const llvm::SDep *)((char *)v24 + 16 * v23);
      do
      {
        v26 = **this;
        v27 = *(_QWORD *)(v26 + 272 * v5 + 8);
        v28 = *(unsigned __int16 **)(v27 + 16);
        if (*v28 - 1 > 1 || (*(_BYTE *)(*(_QWORD *)(v27 + 32) + 48) & 0x10) == 0)
        {
          v29 = *((_QWORD *)v28 + 1);
          if ((*(_WORD *)(v27 + 44) & 0xC) != 0 && (*(_WORD *)(v27 + 44) & 4) == 0)
          {
            if ((v29 & 0x100000) == 0)
            {
              while ((*(_WORD *)(v27 + 44) & 8) != 0)
              {
                v27 = *(_QWORD *)(v27 + 8);
                if ((*(_BYTE *)(*(_QWORD *)(v27 + 16) + 10) & 0x10) != 0)
                  goto LABEL_38;
              }
              goto LABEL_35;
            }
          }
          else if ((v29 & 0x100000) == 0)
          {
            goto LABEL_35;
          }
        }
LABEL_38:
        if (llvm::SwingSchedulerDAG::isLoopCarriedDep(a2, (llvm::SUnit *)(v26 + 272 * v5), v24, 0)
          && (~*(_DWORD *)v24 & 6) == 0)
        {
          v31 = *(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF8;
          v32 = *(_QWORD *)(v31 + 8);
          v33 = *(unsigned __int16 **)(v32 + 16);
          if (*v33 - 1 <= 1 && (*(_BYTE *)(*(_QWORD *)(v32 + 32) + 48) & 8) != 0)
            goto LABEL_46;
          v34 = *((_QWORD *)v33 + 1);
          if ((*(_WORD *)(v32 + 44) & 0xC) != 0 && (*(_WORD *)(v32 + 44) & 4) == 0)
          {
            if ((v34 & 0x80000) == 0)
            {
              while ((*(_WORD *)(v32 + 44) & 8) != 0)
              {
                v32 = *(_QWORD *)(v32 + 8);
                if ((*(_BYTE *)(*(_QWORD *)(v32 + 16) + 10) & 8) != 0)
                  goto LABEL_46;
              }
              goto LABEL_35;
            }
LABEL_46:
            v36 = *(unsigned int *)(v31 + 192);
            if (((1 << v36) & *((_QWORD *)v57 + (v36 >> 6))) == 0)
            {
              v37 = (uint64_t)&this[98][4 * v5];
              v38 = *(unsigned int *)(v37 + 8);
              if (v38 >= *(unsigned int *)(v37 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&this[98][4 * v5], v37 + 16, v38 + 1, 4);
                v38 = *(unsigned int *)(v37 + 8);
              }
              *(_DWORD *)(*(_QWORD *)v37 + 4 * v38) = v36;
              ++*(_DWORD *)(v37 + 8);
              *((_QWORD *)v57 + (v36 >> 6)) |= 1 << v36;
            }
            goto LABEL_35;
          }
          if ((v34 & 0x80000) != 0)
            goto LABEL_46;
        }
LABEL_35:
        v24 = (const llvm::SDep *)((char *)v24 + 16);
      }
      while (v24 != v25);
    }
    ++v5;
  }
  while (v5 != v50);
  v39 = (uint64_t)v54;
  LODWORD(v4) = v56;
  if (!v55.i32[0])
  {
LABEL_68:
    v42 = (int *)(v39 + 8 * v4);
    v40 = v42;
    goto LABEL_69;
  }
  v40 = &v54[2 * v56];
  if (v56)
  {
    v41 = 0;
    while ((v54[v41] - 0x7FFFFFFF) <= 1)
    {
      v41 += 2;
      if (2 * v56 == v41)
      {
        v42 = &v54[2 * v56];
        goto LABEL_69;
      }
    }
    v42 = &v54[v41];
  }
  else
  {
    v42 = v54;
  }
LABEL_69:
  v43 = (int *)(v39 + 8 * v4);
  if (v42 != v43)
  {
    v44 = (char *)v57;
    do
    {
      v45 = v42[1];
      if (((*(_QWORD *)&v44[(v45 >> 3) & 0x1FFFFFF8] >> v45) & 1) == 0)
      {
        v46 = (uint64_t)&this[98][4 * *v42];
        v47 = *(unsigned int *)(v46 + 8);
        if (v47 >= *(unsigned int *)(v46 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&this[98][4 * *v42], v46 + 16, v47 + 1, 4);
          v47 = *(unsigned int *)(v46 + 8);
        }
        *(_DWORD *)(*(_QWORD *)v46 + 4 * v47) = v45;
        ++*(_DWORD *)(v46 + 8);
        v44 = (char *)v57;
        *(_QWORD *)((char *)v57 + (((unint64_t)v42[1] >> 3) & 0x1FFFFFF8)) |= 1 << v42[1];
      }
      v48 = v42 + 2;
      while (v48 != v40)
      {
        v49 = *v48;
        v48 += 2;
        if ((v49 - 0x7FFFFFFF) >= 2)
        {
          v42 = v48 - 2;
          goto LABEL_80;
        }
      }
      v42 = v40;
LABEL_80:
      ;
    }
    while (v42 != v43);
    v39 = (uint64_t)v54;
  }
  MEMORY[0x1CAA32FB4](v39, 4);
  if (v57 != v59)
    free(v57);
}

uint64_t llvm::SwingSchedulerDAG::Circuits::circuit(int32x2_t *a1, signed int a2, int a3, uint64_t a4, char a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  int32x2_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  _QWORD v63[2];
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;

  v10 = a2;
  v11 = **(_QWORD **)a1 + 272 * a2;
  v73 = v11;
  sub_1C518D044(&a1[1], &v73);
  *(_QWORD *)(*(_QWORD *)&a1[7] + 8 * (a2 >> 6)) |= 1 << a2;
  v12 = *(_QWORD *)&a1[98] + 32 * v10;
  v13 = *(unsigned int *)(v12 + 8);
  if (!(_DWORD)v13)
  {
LABEL_2:
    v14 = 0;
    goto LABEL_28;
  }
  v62 = a2;
  v15 = 0;
  v16 = *(int **)v12;
  v17 = llvm::SwingSchedulerDAG::Circuits::MaxPaths;
  v18 = 4 * v13;
  while (1)
  {
    v19 = a1[165].u32[0];
    if (v19 > v17)
    {
LABEL_12:
      if ((v15 & 1) != 0)
        goto LABEL_27;
      v22 = *(_QWORD *)&a1[98] + 32 * v10;
      v23 = *(unsigned int *)(v22 + 8);
      if ((_DWORD)v23)
      {
        v24 = *(int **)v22;
        v25 = 4 * v23;
        do
        {
          v26 = *v24;
          if ((int)v26 >= a3)
          {
            v27 = (_QWORD *)(*(_QWORD *)&a1[16] + (v26 << 6));
            v28 = sub_1C477672C((uint64_t)v27, v11);
            v29 = v27[1];
            v30 = v29 == *v27 ? 20 : 16;
            if (v28 == (_QWORD *)(v29 + 8 * *(unsigned int *)((char *)v27 + v30)))
              sub_1C4774094((llvm::SmallPtrSetImplBase *)(*(_QWORD *)&a1[16] + (v26 << 6)), v11);
          }
          ++v24;
          v25 -= 4;
        }
        while (v25);
      }
      goto LABEL_2;
    }
    v20 = *v16;
    if (*v16 >= a3)
      break;
LABEL_11:
    ++v16;
    v18 -= 4;
    if (!v18)
      goto LABEL_12;
  }
  if (v20 != a3)
  {
    if (((*(_QWORD *)(*(_QWORD *)&a1[7] + 8 * (v20 >> 6)) >> v20) & 1) == 0)
    {
      v21 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&a1[164] + 8) - **(_QWORD **)&a1[164]) >> 2;
      if (v21 <= v20 || v21 <= v10)
        abort();
      v15 |= llvm::SwingSchedulerDAG::Circuits::circuit(a1);
      v17 = llvm::SwingSchedulerDAG::Circuits::MaxPaths;
    }
    goto LABEL_11;
  }
  if ((a5 & 1) != 0)
    goto LABEL_26;
  v31 = (uint64_t *)a1[4];
  v32 = (uint64_t *)a1[5];
  v63[0] = 0;
  v63[1] = 0;
  v64 = 0;
  v66 = 0;
  v67 = 0;
  v65 = 0;
  sub_1C518D9D0(v63, v31, v32);
  v68 = 1;
  v71 = 0;
  v72 = 0;
  v70 = 0;
  v69 = 0;
  if (((v66 - v65) & 0x7FFFFFFF8) == 0)
    goto LABEL_25;
  v39 = 0;
  v40 = ((unint64_t)(v66 - v65) >> 3);
  do
  {
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v41 = *(_QWORD *)(v65 + 8 * v39);
    v42 = *(unsigned int *)(v41 + 120);
    if (!(_DWORD)v42)
    {
      v55 = 0;
      v54 = 0;
LABEL_53:
      v58 = v54 + 16 * v55;
      v56 = v58;
      goto LABEL_54;
    }
    v43 = *(_QWORD *)(v41 + 112);
    v44 = v43 + 16 * v42;
    v45 = v63[0];
    v46 = v64;
    do
    {
      v74 = 0;
      v74 = *(_QWORD *)v43 & 0xFFFFFFFFFFFFFFF8;
      if (!sub_1C61B75F0(v45, v46, v74, &v78))
        goto LABEL_45;
      v47 = *(_DWORD *)(v43 + 12);
      if (v77)
      {
        v48 = v77 - 1;
        v49 = ((v74 >> 4) ^ (v74 >> 9)) & (v77 - 1);
        v50 = *(_QWORD *)(v75 + 16 * v49);
        if (v74 == v50)
        {
LABEL_37:
          v51 = *((_DWORD *)sub_1C496F93C(&v75, &v74) + 2);
          goto LABEL_43;
        }
        v52 = 1;
        while (v50 != -4096)
        {
          v53 = v49 + v52++;
          v49 = v53 & v48;
          v50 = *(_QWORD *)(v75 + 16 * (v53 & v48));
          if (v74 == v50)
            goto LABEL_37;
        }
      }
      v51 = 0;
LABEL_43:
      if (v47 > v51)
        *((_DWORD *)sub_1C496F93C(&v75, &v74) + 2) = v47;
LABEL_45:
      v43 += 16;
    }
    while (v43 != v44);
    v54 = v75;
    v55 = v77;
    if (!(_DWORD)v76)
      goto LABEL_53;
    v56 = v75 + 16 * v77;
    if (v77)
    {
      v57 = 0;
      while ((*(_QWORD *)(v75 + v57) | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v57 += 16;
        if (16 * v77 == v57)
        {
          v58 = v75 + 16 * v77;
          goto LABEL_54;
        }
      }
      v58 = v75 + v57;
    }
    else
    {
      v58 = v75;
    }
LABEL_54:
    v59 = v54 + 16 * v55;
    if (v58 != v59)
    {
      v60 = v72;
      do
      {
        v60 += *(_DWORD *)(v58 + 8);
        v72 = v60;
        v61 = v58 + 16;
        v58 = v56;
        if (v61 != v56)
        {
          v58 = v61;
          while ((*(_QWORD *)v58 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v58 += 16;
            if (v58 == v56)
            {
              v58 = v56;
              break;
            }
          }
        }
      }
      while (v58 != v59);
    }
    MEMORY[0x1CAA32FB4](v54);
    ++v39;
  }
  while (v39 != v40);
LABEL_25:
  v33 = sub_1C5193854(a4, (unint64_t)v63);
  sub_1C6182CAC(*(_QWORD *)a4 + 88 * *(unsigned int *)(a4 + 8), v33);
  v34 = *(_OWORD *)(v33 + 48);
  v35 = *(_OWORD *)(v33 + 64);
  *(_DWORD *)(v36 + 80) = *(_DWORD *)(v33 + 80);
  *(_OWORD *)(v36 + 48) = v34;
  *(_OWORD *)(v36 + 64) = v35;
  ++*(_DWORD *)(a4 + 8);
  sub_1C6176BF8(v63);
  v19 = a1[165].u32[0];
LABEL_26:
  a1[165].i32[0] = v19 + 1;
LABEL_27:
  llvm::SwingSchedulerDAG::Circuits::unblock((llvm::SwingSchedulerDAG::Circuits *)a1, v62);
  v14 = 1;
LABEL_28:
  v37 = a1[5];
  v63[0] = 0;
  if (sub_1C61B75F0(*(_QWORD *)&a1[1], a1[3].i32[0], *(_QWORD *)(*(_QWORD *)&v37 - 8), v63))
  {
    *(_QWORD *)v63[0] = -8192;
    a1[2] = vadd_s32(a1[2], (int32x2_t)0x1FFFFFFFFLL);
  }
  *(_QWORD *)&a1[5] -= 8;
  return v14;
}

void sub_1C518D044(_QWORD *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  _BYTE v15[24];

  sub_1C61B7564((uint64_t)v15, (uint64_t)a1, a2);
  if (v15[16])
  {
    v5 = (uint64_t *)a1[4];
    v4 = a1[5];
    if ((unint64_t)v5 >= v4)
    {
      v7 = (_QWORD *)a1[3];
      v8 = v5 - v7;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        abort();
      v10 = v4 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 61)
          sub_1C4764EE4();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = (uint64_t *)&v12[8 * v8];
      *v13 = *a2;
      v6 = v13 + 1;
      if (v5 != v7)
      {
        do
        {
          v14 = *--v5;
          *--v13 = v14;
        }
        while (v5 != v7);
        v5 = (uint64_t *)a1[3];
      }
      a1[3] = v13;
      a1[4] = v6;
      a1[5] = &v12[8 * v11];
      if (v5)
        operator delete(v5);
    }
    else
    {
      *v5 = *a2;
      v6 = v5 + 1;
    }
    a1[4] = v6;
  }
}

void sub_1C518D154(unint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[25];

  v20[24] = *MEMORY[0x1E0C80C00];
  v18 = v20;
  v19 = 0x800000000;
  if (a1 != a2)
  {
    v3 = a1;
    v4 = 0;
    do
    {
      v5 = *(unsigned int *)(v3 + 40);
      if ((_DWORD)v5)
      {
        v6 = *(__int128 **)(v3 + 32);
        v7 = 16 * v5;
        do
        {
          if ((*(_QWORD *)v6 & 6) == 2)
          {
            v16 = v3;
            v17 = *v6;
            v8 = sub_1C4926708((uint64_t)&v18, (unint64_t)&v16, 1);
            v9 = (char *)v18 + 24 * v19;
            v10 = *(_OWORD *)v8;
            *((_QWORD *)v9 + 2) = *(_QWORD *)(v8 + 16);
            *(_OWORD *)v9 = v10;
            v4 = v19 + 1;
            LODWORD(v19) = v19 + 1;
          }
          ++v6;
          v7 -= 16;
        }
        while (v7);
      }
      v3 += 272;
    }
    while (v3 != a2);
    v11 = (unint64_t *)v18;
    if (v4)
    {
      v12 = (unint64_t *)((char *)v18 + 24 * v4);
      do
      {
        v13 = v11[1] & 0xFFFFFFFFFFFFFFF8;
        v14 = *v11 & 0xFFFFFFFFFFFFFFF9 | 2;
        v15 = v11[2];
        llvm::SUnit::removePred(*v11, (const llvm::SDep *)(v11 + 1));
        v16 = v14;
        *(_QWORD *)&v17 = v15;
        llvm::SUnit::addPred(v13, (const llvm::SDep *)&v16, 1);
        v11 += 3;
      }
      while (v11 != v12);
      v11 = (unint64_t *)v18;
    }
    if (v11 != v20)
      free(v11);
  }
}

void llvm::SwingSchedulerDAG::CopyToPhiMutation::apply(llvm::SwingSchedulerDAG::CopyToPhiMutation *this, llvm::ScheduleDAGInstrs *a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm::ScheduleDAGTopologicalSort *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v13;
  void **v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  void **v27;
  const llvm::SUnit **v28;
  const llvm::SUnit **v29;
  const llvm::SUnit *v30;
  const llvm::SUnit **v31;
  uint64_t v32;
  uint64_t v33;
  const llvm::SUnit *v34;
  _QWORD v35[2];
  void *v36;
  uint64_t v37;
  _BYTE v38[64];
  void *v39;
  uint64_t v40;
  _BYTE v41[32];
  void *v42;
  uint64_t v43;
  _QWORD v44[6];

  v44[4] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)a2 + 6);
  v3 = *((_QWORD *)a2 + 7);
  if (v2 == v3)
    return;
  v4 = (llvm::ScheduleDAGInstrs *)((char *)a2 + 2688);
  do
  {
    if ((**(_WORD **)(*(_QWORD *)(v2 + 8) + 16) & 0xFFFE) != 0x12)
      goto LABEL_61;
    v42 = v44;
    v43 = 0x400000000;
    v39 = v41;
    v40 = 0x400000000;
    v5 = *(unsigned int *)(v2 + 40);
    if (!(_DWORD)v5)
      goto LABEL_57;
    v6 = *(_QWORD **)(v2 + 32);
    v7 = 16 * v5;
    do
    {
      v8 = *v6 & 0xFFFFFFFFFFFFFFF8;
      v9 = *(_QWORD *)(v8 + 8);
      v10 = (*v6 >> 1) & 3;
      if (v10)
      {
        if (v10 == 1)
        {
          v11 = **(unsigned __int16 **)(v9 + 16);
          if (v11 == 69 || v11 == 0)
          {
            v13 = v43;
            v14 = &v42;
            if (v43 >= (unint64_t)HIDWORD(v43))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, v43 + 1, 8);
              v13 = v43;
            }
LABEL_20:
            *((_QWORD *)*v14 + v13) = v8;
            ++*((_DWORD *)v14 + 2);
          }
        }
      }
      else
      {
        v15 = **(unsigned __int16 **)(v9 + 16);
        if (v15 && v15 != 69 && *(_DWORD *)(v8 + 200))
        {
          v13 = v40;
          v14 = &v39;
          if (v40 >= (unint64_t)HIDWORD(v40))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, v40 + 1, 8);
            v13 = v40;
          }
          goto LABEL_20;
        }
      }
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
    v16 = v43;
    if ((_DWORD)v43 && (_DWORD)v40)
    {
      v17 = 0;
      v36 = v38;
      v37 = 0x800000000;
      do
      {
        v18 = *((_QWORD *)v42 + v17);
        v19 = *(unsigned int *)(v18 + 120);
        if ((_DWORD)v19)
        {
          v20 = *(uint64_t **)(v18 + 112);
          v21 = 16 * v19;
          do
          {
            v22 = *v20;
            if ((*v20 & 6) == 0)
            {
              v23 = v22 & 0xFFFFFFFFFFFFFFF8;
              v24 = **(unsigned __int16 **)(*(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 8) + 16);
              if (!v24 || (v24 != 69 ? (v25 = v24 == 18) : (v25 = 1), v25))
              {
                v26 = v43;
                v27 = &v42;
                if (v43 >= (unint64_t)HIDWORD(v43))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, v43 + 1, 8);
                  v26 = v43;
                }
              }
              else
              {
                v26 = v37;
                v27 = &v36;
                if (v37 >= (unint64_t)HIDWORD(v37))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)v38, v37 + 1, 8);
                  v26 = v37;
                }
              }
              *((_QWORD *)*v27 + v26) = v23;
              ++*((_DWORD *)v27 + 2);
            }
            v20 += 2;
            v21 -= 16;
          }
          while (v21);
          v16 = v43;
        }
        ++v17;
      }
      while (v17 < v16);
      v28 = (const llvm::SUnit **)v36;
      if ((_DWORD)v37)
      {
        v29 = (const llvm::SUnit **)((char *)v36 + 8 * v37);
        do
        {
          if ((_DWORD)v40)
          {
            v30 = *v28;
            v31 = (const llvm::SUnit **)v39;
            v32 = (unint64_t)*v28 | 6;
            v33 = 8 * v40;
            do
            {
              v34 = *v31;
              if (!llvm::ScheduleDAGTopologicalSort::IsReachable(v4, v30, *v31) && v34 != v30)
              {
                v35[0] = v32;
                v35[1] = 3;
                llvm::SUnit::addPred((int64_t)v34, (const llvm::SDep *)v35, 1);
                llvm::ScheduleDAGTopologicalSort::AddPred((uint64_t)v4, (unint64_t)v34, (uint64_t)v30);
              }
              ++v31;
              v33 -= 8;
            }
            while (v33);
          }
          ++v28;
        }
        while (v28 != v29);
        v28 = (const llvm::SUnit **)v36;
      }
      if (v28 != (const llvm::SUnit **)v38)
        free(v28);
    }
LABEL_57:
    if (v39 != v41)
      free(v39);
    if (v42 != v44)
      free(v42);
LABEL_61:
    v2 += 272;
  }
  while (v2 != v3);
}

BOOL sub_1C518D680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;

  sub_1C61F8CBC((_QWORD *)a2);
  *(_DWORD *)(a2 + 80) = 0;
  v6 = *(uint64_t **)(a1 + 24);
  v7 = *(uint64_t **)(a1 + 32);
  if (v6 != v7)
  {
    while (1)
    {
      v8 = *v6;
      v9 = *(unsigned int *)(*v6 + 120);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)(v8 + 112);
        v11 = 16 * v9;
        do
        {
          if ((!a3
             || sub_1C61B75F0(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), *(_QWORD *)v10 & 0xFFFFFFFFFFFFFFF8, &v19))&& ((~*(_QWORD *)v10 & 6) != 0 || *(_DWORD *)(v10 + 8) != 3))
          {
            v13 = sub_1C61B75F0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)v10 & 0xFFFFFFFFFFFFFFF8, &v19);
            if ((v13 & 1) == 0)
            {
              v19 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFFF8;
              sub_1C61F66B4(a2, (uint64_t *)&v19);
            }
          }
          v10 += 16;
          v11 -= 16;
        }
        while (v11);
      }
      v14 = *(unsigned int *)(v8 + 40);
      if ((_DWORD)v14)
        break;
LABEL_26:
      if (++v6 == v7)
        return *(_DWORD *)(a2 + 80) != 0;
    }
    v15 = *(uint64_t **)(v8 + 32);
    v16 = 16 * v14;
    while (1)
    {
      v17 = *v15;
      if ((*v15 & 6) == 2)
      {
        if (!a3)
          goto LABEL_22;
        if (sub_1C61B75F0(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v17 & 0xFFFFFFFFFFFFFFF8, &v19))
          break;
      }
LABEL_19:
      v15 += 2;
      v16 -= 16;
      if (!v16)
        goto LABEL_26;
    }
    v17 = *v15;
LABEL_22:
    if ((sub_1C61B75F0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v17 & 0xFFFFFFFFFFFFFFF8, &v19) & 1) == 0)
    {
      v19 = *v15 & 0xFFFFFFFFFFFFFFF8;
      sub_1C61F66B4(a2, (uint64_t *)&v19);
    }
    goto LABEL_19;
  }
  return 0;
}

uint64_t sub_1C518D81C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::SmallPtrSetImplBase *a5)
{
  uint64_t result;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a1;
  if (*(_DWORD *)(a1 + 192) == -1)
    return 0;
  v22 = 0;
  if (sub_1C61B75F0(*(_QWORD *)a4, *(_DWORD *)(a4 + 16), a1, &v22)
    && v22 != *(_QWORD *)a4 + 8 * *(unsigned int *)(a4 + 16))
  {
    return 0;
  }
  v22 = 0;
  if (sub_1C61B75F0(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), a1, &v22)
    && v22 != *(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 16))
  {
    return 1;
  }
  sub_1C4774094(a5, a1);
  if (v12)
  {
    v13 = *(unsigned int *)(a1 + 120);
    if ((_DWORD)v13)
    {
      v14 = 0;
      v15 = *(uint64_t **)(a1 + 112);
      v16 = 16 * v13;
      do
      {
        v17 = *v15;
        v15 += 2;
        v14 |= sub_1C518D81C(v17 & 0xFFFFFFFFFFFFFFF8, a2, a3, a4, a5);
        v16 -= 16;
      }
      while (v16);
    }
    else
    {
      v14 = 0;
    }
    v18 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v18)
    {
      v19 = *(_QWORD **)(a1 + 32);
      v20 = 16 * v18;
      do
      {
        if ((*v19 & 6) == 2)
          v14 |= sub_1C518D81C(*v19 & 0xFFFFFFFFFFFFFFF8, a2, a3, a4, a5);
        v19 += 2;
        v20 -= 16;
      }
      while (v20);
    }
    if ((v14 & 1) == 0)
      return 0;
    sub_1C518D044((_QWORD *)a2, &v21);
    return 1;
  }
  v22 = 0;
  LODWORD(result) = sub_1C61B75F0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a1, &v22);
  if (v22 == *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16))
    return 0;
  else
    return result;
}

void sub_1C518D9D0(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  _BYTE v17[24];

  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      sub_1C61B7564((uint64_t)v17, (uint64_t)a1, v4);
      if (v17[16])
      {
        v7 = (uint64_t *)a1[4];
        v6 = a1[5];
        if ((unint64_t)v7 >= v6)
        {
          v9 = (_QWORD *)a1[3];
          v10 = v7 - v9;
          v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 61)
            abort();
          v12 = v6 - (_QWORD)v9;
          if (v12 >> 2 > v11)
            v11 = v12 >> 2;
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v11;
          if (v13)
          {
            if (v13 >> 61)
              sub_1C4764EE4();
            v14 = (char *)operator new(8 * v13);
          }
          else
          {
            v14 = 0;
          }
          v15 = (uint64_t *)&v14[8 * v10];
          *v15 = *v4;
          v8 = v15 + 1;
          if (v7 != v9)
          {
            do
            {
              v16 = *--v7;
              *--v15 = v16;
            }
            while (v7 != v9);
            v7 = (uint64_t *)a1[3];
          }
          a1[3] = v15;
          a1[4] = v8;
          a1[5] = &v14[8 * v13];
          if (v7)
            operator delete(v7);
        }
        else
        {
          *v7 = *v4;
          v8 = v7 + 1;
        }
        a1[4] = v8;
      }
      ++v4;
    }
    while (v4 != a3);
  }
}

BOOL sub_1C518DB08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;

  sub_1C61F8CBC((_QWORD *)a2);
  *(_DWORD *)(a2 + 80) = 0;
  v6 = *(uint64_t **)(a1 + 24);
  v7 = *(uint64_t **)(a1 + 32);
  if (v6 != v7)
  {
    while (1)
    {
      v8 = *v6;
      v9 = *(unsigned int *)(*v6 + 40);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)(v8 + 32);
        v11 = 16 * v9;
        do
        {
          if (!a3
            || sub_1C61B75F0(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), *(_QWORD *)v10 & 0xFFFFFFFFFFFFFFF8, &v20))
          {
            v12 = *(_QWORD *)v10 & 6;
            v14 = v12 == 6 && *(_DWORD *)(v10 + 8) == 3;
            if (v12 != 2
              && !v14
              && (sub_1C61B75F0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)v10 & 0xFFFFFFFFFFFFFFF8, &v20) & 1) == 0)
            {
              v20 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFFF8;
              sub_1C61F66B4(a2, (uint64_t *)&v20);
            }
          }
          v10 += 16;
          v11 -= 16;
        }
        while (v11);
      }
      v15 = *(unsigned int *)(v8 + 120);
      if ((_DWORD)v15)
        break;
LABEL_29:
      if (++v6 == v7)
        return *(_DWORD *)(a2 + 80) != 0;
    }
    v16 = *(uint64_t **)(v8 + 112);
    v17 = 16 * v15;
    while (1)
    {
      v18 = *v16;
      if ((*v16 & 6) == 2)
      {
        if (!a3)
          goto LABEL_25;
        if (sub_1C61B75F0(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v18 & 0xFFFFFFFFFFFFFFF8, &v20))
          break;
      }
LABEL_22:
      v16 += 2;
      v17 -= 16;
      if (!v17)
        goto LABEL_29;
    }
    v18 = *v16;
LABEL_25:
    if ((sub_1C61B75F0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v18 & 0xFFFFFFFFFFFFFFF8, &v20) & 1) == 0)
    {
      v20 = *v16 & 0xFFFFFFFFFFFFFFF8;
      sub_1C61F66B4(a2, (uint64_t *)&v20);
    }
    goto LABEL_22;
  }
  return 0;
}

uint64_t sub_1C518DCAC(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  if (a2 > (unint64_t)((*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 3))
    return 0;
  if (!a2)
    return 1;
  v6 = 8 * a2 - 8;
  do
  {
    v7 = *a1++;
    result = sub_1C61B75F0(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v7, &v9);
    if ((_DWORD)result)
      v8 = v6 == 0;
    else
      v8 = 1;
    v6 -= 8;
  }
  while (!v8);
  return result;
}

uint64_t llvm::SMSchedule::computeStart(uint64_t result, uint64_t a2, int *a3, int *a4, int *a5, int *a6, int a7, llvm::TargetInstrInfo **a8)
{
  int v8;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  uint64_t v22;
  const llvm::SDep *v23;
  uint64_t v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  int *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  int v38;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  int v47;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const llvm::SDep *v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v62;
  int v63;
  int *v64;
  int v65;
  _BOOL4 v68;
  int v69;
  int v71;
  llvm::SMSchedule *v74;
  uint64_t i;
  _QWORD *v77;
  int v78;

  v8 = *(_DWORD *)(result + 48);
  if (v8 <= *(_DWORD *)(result + 52))
  {
    v71 = a7 - 1;
    v74 = (llvm::SMSchedule *)result;
    while (1)
    {
      v78 = v8;
      v13 = sub_1C61F81C8(result, &v78);
      v14 = v13[2];
      if (v13[3] != v14)
        break;
LABEL_110:
      result = (uint64_t)v74;
      if (v8++ >= *((_DWORD *)v74 + 13))
        return result;
    }
    v15 = v13[5];
    v16 = (_QWORD *)(v14 + 8 * (v15 >> 9));
    v17 = (uint64_t *)(*v16 + 8 * (v15 & 0x1FF));
    v18 = *(_QWORD *)(v14 + (((v13[6] + v15) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v13[6] + v15) & 0x1FF);
    for (i = v18; ; v18 = i)
    {
      if (v17 == (uint64_t *)v18)
        goto LABEL_110;
      v77 = v16;
      v19 = *v17;
      v20 = *(unsigned int *)(a2 + 40);
      if ((_DWORD)v20)
      {
        for (j = 0; j != v20; ++j)
        {
          v22 = *(_QWORD *)(a2 + 32);
          v23 = (const llvm::SDep *)(v22 + 16 * j);
          if (v19 == (*(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8))
          {
            v24 = *(_QWORD *)v23 & 6;
            v25 = **(unsigned __int16 **)(*(_QWORD *)(a2 + 8) + 16);
            if (v24 == 2
              && (!**(_WORD **)(*(_QWORD *)(a2 + 8) + 16)
               || v25 == 69
               || !**(_WORD **)(*(_QWORD *)(v19 + 8) + 16)
               || **(_WORD **)(*(_QWORD *)(v19 + 8) + 16) == 69))
            {
              v26 = v8 - *(_DWORD *)(v22 + 16 * j + 12);
              if (**(_WORD **)(*(_QWORD *)(v19 + 8) + 16))
                v27 = **(unsigned __int16 **)(*(_QWORD *)(v19 + 8) + 16) == 69;
              else
                v27 = 1;
              if (v27)
                v28 = a7;
              else
                v28 = 0;
              v29 = v26 + v28;
              v30 = a4;
            }
            else
            {
              v47 = *(_DWORD *)(v22 + 16 * j + 12) + v8;
              if ((v25 == 69 || v25 == 0) && v24 == 2)
                v50 = -1;
              else
                v50 = 0;
              v51 = v47 + v50 * a7;
              if (*a3 > v51)
                v51 = *a3;
              *a3 = v51;
              if (!llvm::SwingSchedulerDAG::isLoopCarriedDep(a8, (llvm::SUnit *)a2, v23, 0))
                goto LABEL_24;
              v29 = v71 + llvm::SMSchedule::earliestCycleInChain(v74, v23);
              v30 = a5;
            }
            if (v29 >= *v30)
              v29 = *v30;
            *v30 = v29;
          }
LABEL_24:
          v31 = *(unsigned int *)(v19 + 40);
          if ((_DWORD)v31)
          {
            v32 = *(uint64_t **)(v19 + 32);
            v33 = &v32[2 * v31];
            while (1)
            {
              v34 = *v32;
              if ((*v32 & 6) == 2)
              {
                if (!**(_WORD **)(*(_QWORD *)(v19 + 8) + 16)
                  || **(_WORD **)(*(_QWORD *)(v19 + 8) + 16) == 69
                  || ((v35 = **(unsigned __int16 **)(*(_QWORD *)((v34 & 0xFFFFFFFFFFFFFFF8) + 8) + 16), v35 != 69)
                    ? (v36 = v35 == 0)
                    : (v36 = 1),
                      v36))
                {
                  v37 = v34 & 0xFFFFFFFFFFFFFFF8;
                  v38 = **(unsigned __int16 **)(*(_QWORD *)(v37 + 8) + 16);
                  if (v38 == 69 || v38 == 0)
                  {
                    v40 = *(unsigned int *)(v37 + 120);
                    if ((_DWORD)v40)
                      break;
                  }
                }
              }
LABEL_45:
              v32 += 2;
              if (v32 == v33)
                goto LABEL_49;
            }
            v41 = *(_QWORD **)(v37 + 112);
            v42 = 16 * v40;
            while ((*v41 & 6) != 0
                 || **(_WORD **)(*(_QWORD *)((*v41 & 0xFFFFFFFFFFFFFFF8) + 8) + 16)
                 && **(_WORD **)(*(_QWORD *)((*v41 & 0xFFFFFFFFFFFFFFF8) + 8) + 16) != 69)
            {
              v41 += 2;
              v42 -= 16;
              if (!v42)
                goto LABEL_45;
            }
            if (v37
              && v37 == (*(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8)
              && **(_WORD **)(*(_QWORD *)(a2 + 8) + 16)
              && **(_WORD **)(*(_QWORD *)(a2 + 8) + 16) != 69)
            {
              v43 = *(unsigned int *)(a2 + 40);
              if ((_DWORD)v43)
              {
                v44 = *(_QWORD **)(a2 + 32);
                v45 = 16 * v43;
                while (v19 != (*v44 & 0xFFFFFFFFFFFFFFF8))
                {
                  v44 += 2;
                  v45 -= 16;
                  if (!v45)
                    goto LABEL_57;
                }
              }
              else
              {
LABEL_57:
                v46 = *a4;
                if (v8 < *a4)
                  v46 = v8;
                *a4 = v46;
              }
            }
          }
LABEL_49:
          ;
        }
      }
      v52 = *(unsigned int *)(a2 + 120);
      if ((_DWORD)v52)
        break;
LABEL_107:
      ++v17;
      v16 = v77;
      if ((uint64_t *)((char *)v17 - *v77) == (uint64_t *)4096)
      {
        v16 = v77 + 1;
        v17 = (uint64_t *)v77[1];
      }
    }
    v53 = 0;
    v54 = 16 * v52;
    while (1)
    {
      v55 = *(_QWORD *)(a2 + 112);
      v56 = (const llvm::SDep *)(v55 + v53);
      if (v19 == (*(_QWORD *)(v55 + v53) & 0xFFFFFFFFFFFFFFF8))
        break;
LABEL_91:
      v53 += 16;
      if (v54 == v53)
        goto LABEL_107;
    }
    v57 = *(_QWORD *)(v55 + v53) & 6;
    if (v57 == 2)
    {
      v58 = **(unsigned __int16 **)(*(_QWORD *)(a2 + 8) + 16);
      if (!**(_WORD **)(*(_QWORD *)(a2 + 8) + 16)
        || v58 == 69
        || (v59 = **(unsigned __int16 **)(*(_QWORD *)(v19 + 8) + 16), !**(_WORD **)(*(_QWORD *)(v19 + 8) + 16))
        || v59 == 69)
      {
        v60 = *(_DWORD *)(v55 + v53 + 12);
        v62 = v58 == 69 || v58 == 0;
        v63 = v8 + (v62 << 31 >> 31) * a7 + v60;
        v64 = a3;
LABEL_88:
        if (*v64 > v63)
          v63 = *v64;
        *v64 = v63;
        goto LABEL_91;
      }
    }
    else
    {
      v59 = **(unsigned __int16 **)(*(_QWORD *)(v19 + 8) + 16);
    }
    v65 = v8 - *(_DWORD *)(v55 + v53 + 12);
    v68 = (v59 == 69 || v59 == 0) && v57 == 2;
    v69 = v65 + v68 * a7;
    if (v69 >= *a4)
      v69 = *a4;
    *a4 = v69;
    if (!llvm::SwingSchedulerDAG::isLoopCarriedDep(a8, (llvm::SUnit *)a2, v56, 1))
      goto LABEL_91;
    v63 = llvm::SMSchedule::latestCycleInChain(v74, v56) - a7 + 1;
    v64 = a6;
    goto LABEL_88;
  }
  return result;
}

uint64_t llvm::SMSchedule::isValidSchedule(llvm::SMSchedule *this, llvm::SwingSchedulerDAG *a2)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  char *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;
  int v20;

  v2 = *((_QWORD *)a2 + 6);
  v3 = *((_QWORD *)a2 + 7);
  if (v2 == v3)
    return 1;
  v4 = (char *)this + 32;
  while (1)
  {
    if ((*(_WORD *)(v2 + 228) & 0x40) != 0)
    {
      if (!*(_QWORD *)v4)
        goto LABEL_15;
      v5 = *(_QWORD **)v4;
      v6 = (char *)this + 32;
      do
      {
        v7 = v5[4];
        v8 = v7 >= v2;
        if (v7 >= v2)
          v9 = v5;
        else
          v9 = v5 + 1;
        if (v8)
          v6 = (char *)v5;
        v5 = (_QWORD *)*v9;
      }
      while (*v9);
      if (v6 != v4 && *((_QWORD *)v6 + 4) <= v2)
        v10 = (*((_DWORD *)v6 + 10) - *((_DWORD *)this + 12)) / *((_DWORD *)this + 14);
      else
LABEL_15:
        v10 = -1;
      v11 = *(unsigned int *)(v2 + 120);
      if ((_DWORD)v11)
        break;
    }
LABEL_36:
    v2 += 272;
    if (v2 == v3)
      return 1;
  }
  v12 = *(_QWORD *)(v2 + 112);
  v13 = v12 + 16 * v11;
  while (1)
  {
    if ((*(_QWORD *)v12 & 6) == 0 && (*(_DWORD *)(v12 + 8) - 1) <= 0x3FFFFFFE)
    {
      if (!*(_QWORD *)v4)
        goto LABEL_31;
      v14 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
      v15 = *(_QWORD **)v4;
      v16 = (char *)this + 32;
      do
      {
        v17 = v15[4];
        v18 = v17 >= v14;
        if (v17 >= v14)
          v19 = v15;
        else
          v19 = v15 + 1;
        if (v18)
          v16 = (char *)v15;
        v15 = (_QWORD *)*v19;
      }
      while (*v19);
      if (v16 != v4 && *((_QWORD *)v16 + 4) <= v14)
        v20 = (*((_DWORD *)v16 + 10) - *((_DWORD *)this + 12)) / *((_DWORD *)this + 14);
      else
LABEL_31:
        v20 = -1;
      if (v20 != v10)
        return 0;
    }
    v12 += 16;
    if (v12 == v13)
      goto LABEL_36;
  }
}

uint64_t llvm::SwingSchedulerDAG::computeDelta(llvm::SwingSchedulerDAG *this, llvm::MachineInstr *a2, unsigned int *a3)
{
  const llvm::TargetRegisterInfo *v6;
  int MemOperandWithOffset;
  uint64_t result;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  llvm::MachineOperand *v25;

  v6 = (const llvm::TargetRegisterInfo *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 4) + 16)
                                                                           + 176))(*(_QWORD *)(*((_QWORD *)this + 4)
                                                                                               + 16));
  v24 = 0;
  v25 = 0;
  v23 = 0;
  MemOperandWithOffset = llvm::TargetInstrInfo::getMemOperandWithOffset(*((llvm::TargetInstrInfo **)this + 2), a2, &v25, &v24, &v23, v6);
  result = 0;
  if (MemOperandWithOffset)
    v9 = !v23;
  else
    v9 = 0;
  if (v9)
  {
    if (*(_BYTE *)v25)
      return 0;
    v10 = *((unsigned int *)v25 + 1);
    v11 = *(_QWORD *)(*((_QWORD *)this + 4) + 40);
    v12 = (uint64_t *)((v10 & 0x80000000) != 0
                    ? *(_QWORD *)(v11 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8
                    : *(_QWORD *)(v11 + 272) + 8 * v10);
    v13 = *v12;
    if (!v13)
      return 0;
    if ((*(_BYTE *)(v13 + 3) & 1) == 0)
    {
      v13 = *(_QWORD *)(v13 + 24);
      if (!v13 || (*(_BYTE *)(v13 + 3) & 1) == 0)
        return 0;
    }
    v14 = *(_QWORD *)(v13 + 8);
    if (!v14)
      return 0;
    v15 = **(unsigned __int16 **)(v14 + 16);
    if (v15 != 69 && v15 != 0)
      goto LABEL_35;
    v17 = *(_DWORD *)(v14 + 40);
    if (v17 == 1)
    {
LABEL_26:
      v20 = 0;
    }
    else
    {
      v18 = *(_QWORD *)(v14 + 32);
      v19 = 1;
      while (*(_QWORD *)(v18 + 32 * (v19 + 1) + 16) != *((_QWORD *)a2 + 3))
      {
        v19 += 2;
        if (v17 == v19)
          goto LABEL_26;
      }
      v20 = *(unsigned int *)(v18 + 32 * v19 + 4);
      if ((v20 & 0x80000000) != 0)
      {
        v21 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
LABEL_30:
        v22 = *v21;
        if (v22)
        {
          if ((*(_BYTE *)(v22 + 3) & 1) != 0 || (v22 = *(_QWORD *)(v22 + 24)) != 0 && (*(_BYTE *)(v22 + 3) & 1) != 0)
          {
            if (*(_QWORD *)(v22 + 8))
            {
LABEL_35:
              result = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 712))(*((_QWORD *)this + 2));
              if ((_DWORD)result == 1)
                *a3 = 0;
              return result;
            }
          }
        }
        return 0;
      }
    }
    v21 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v20);
    goto LABEL_30;
  }
  return result;
}

uint64_t llvm::SwingSchedulerDAG::applyInstrChange(llvm::SwingSchedulerDAG *this, llvm::MachineInstr *a2, llvm::SMSchedule *a3)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t result;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  llvm::MachineInstr *DefInLoop;
  int v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  unint64_t v26;
  BOOL v27;
  _QWORD *v28;
  int v29;
  int v30;
  _QWORD *v31;
  char *v32;
  unint64_t v33;
  BOOL v34;
  _QWORD *v35;
  int v36;
  char *v37;
  unint64_t v38;
  BOOL v39;
  _QWORD *v40;
  int v41;
  int v42;
  llvm::MachineFunction *v43;
  llvm::MachineInstr *v44;
  llvm::MachineInstr *v45;
  int v46;
  uint64_t v47;
  llvm::MachineInstr *v48;
  uint64_t v49;
  llvm::MachineInstr *v50;

  v48 = a2;
  v49 = 0;
  v6 = (uint64_t *)((char *)this + 952);
  v50 = a2;
  v7 = 0;
  if (sub_1C61252B8((uint64_t *)this + 119, &v50, &v49))
    v7 = *(_QWORD *)(v49 + 8);
  v50 = 0;
  result = sub_1C617A1AC(*((_QWORD *)this + 397), *((_DWORD *)this + 798), v7, &v50);
  if ((_DWORD)result)
    v9 = v50 == (llvm::MachineInstr *)(*((_QWORD *)this + 397) + 24 * *((unsigned int *)this + 798));
  else
    v9 = 1;
  if (!v9)
  {
    v10 = *((_DWORD *)v50 + 2);
    v11 = *((_QWORD *)v50 + 2);
    v47 = 0;
    result = (*(uint64_t (**)(_QWORD, llvm::MachineInstr *, char *, uint64_t *))(**((_QWORD **)this + 2) + 688))(*((_QWORD *)this + 2), a2, (char *)&v47 + 4, &v47);
    if ((_DWORD)result)
    {
      DefInLoop = (llvm::MachineInstr *)llvm::SwingSchedulerDAG::findDefInLoop((uint64_t)this, *(_DWORD *)(*((_QWORD *)a2 + 4) + 32 * HIDWORD(v47) + 4));
      v49 = 0;
      v50 = DefInLoop;
      v13 = sub_1C61252B8(v6, &v50, &v49);
      v14 = 0;
      if (v13)
        v14 = *(_QWORD *)(v49 + 8);
      v16 = (char *)a3 + 32;
      v15 = (_QWORD *)*((_QWORD *)a3 + 4);
      if (!v15)
        goto LABEL_22;
      v17 = (char *)a3 + 32;
      do
      {
        v18 = v15[4];
        v19 = v18 >= v14;
        if (v18 >= v14)
          v20 = v15;
        else
          v20 = v15 + 1;
        if (v19)
          v17 = (char *)v15;
        v15 = (_QWORD *)*v20;
      }
      while (*v20);
      if (v17 != v16 && *((_QWORD *)v17 + 4) <= v14)
        v21 = (*((_DWORD *)v17 + 10) - *((_DWORD *)a3 + 12)) / *((_DWORD *)a3 + 14);
      else
LABEL_22:
        v21 = -1;
      v49 = 0;
      v50 = DefInLoop;
      result = sub_1C61252B8(v6, &v50, &v49);
      v22 = 0;
      if ((_DWORD)result)
        v22 = *(_QWORD *)(v49 + 8);
      v23 = *(_QWORD **)v16;
      if (!*(_QWORD *)v16)
        goto LABEL_36;
      v24 = *(_QWORD **)v16;
      v25 = (char *)a3 + 32;
      do
      {
        v26 = v24[4];
        v27 = v26 >= v22;
        if (v26 >= v22)
          v28 = v24;
        else
          v28 = v24 + 1;
        if (v27)
          v25 = (char *)v24;
        v24 = (_QWORD *)*v28;
      }
      while (*v28);
      if (v25 == v16 || *((_QWORD *)v25 + 4) > v22)
LABEL_36:
        v25 = (char *)a3 + 32;
      v29 = *((_DWORD *)a3 + 12);
      v30 = *((_DWORD *)a3 + 14);
      if (v23)
      {
        v31 = *(_QWORD **)v16;
        v32 = (char *)a3 + 32;
        do
        {
          v33 = v31[4];
          v34 = v33 >= v7;
          if (v33 >= v7)
            v35 = v31;
          else
            v35 = v31 + 1;
          if (v34)
            v32 = (char *)v31;
          v31 = (_QWORD *)*v35;
        }
        while (*v35);
        if (v32 == v16 || *((_QWORD *)v32 + 4) > v7)
          v36 = -1;
        else
          v36 = (*((_DWORD *)v32 + 10) - v29) / v30;
        v37 = (char *)a3 + 32;
        do
        {
          v38 = v23[4];
          v39 = v38 >= v7;
          if (v38 >= v7)
            v40 = v23;
          else
            v40 = v23 + 1;
          if (v39)
            v37 = (char *)v23;
          v23 = (_QWORD *)*v40;
        }
        while (*v40);
        if (v37 != v16 && *((_QWORD *)v37 + 4) <= v7)
          goto LABEL_62;
      }
      else
      {
        v36 = -1;
      }
      v37 = (char *)a3 + 32;
LABEL_62:
      v41 = v21 - v36;
      if (v21 > v36)
      {
        v46 = (*((_DWORD *)v25 + 10) - v29) % v30;
        v42 = (*((_DWORD *)v37 + 10) - v29) % v30;
        v43 = (llvm::MachineFunction *)*((_QWORD *)this + 4);
        v44 = (llvm::MachineInstr *)*((_QWORD *)v43 + 28);
        if (v44)
          *((_QWORD *)v43 + 28) = *(_QWORD *)v44;
        else
          v44 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v43 + 128, 72, 3);
        llvm::MachineInstr::MachineInstr(v44, v43, a2);
        v50 = v44;
        if (v46 < v42)
        {
          llvm::MachineOperand::setReg(*((_QWORD *)v44 + 4) + 32 * HIDWORD(v47), v10);
          v41 -= v41 > 0;
        }
        *(_QWORD *)(*((_QWORD *)v44 + 4) + 32 * v47 + 16) = *(_QWORD *)(*((_QWORD *)a2 + 4)
                                                                                      + 32 * v47
                                                                                      + 16)
                                                                          + v11 * v41;
        *(_QWORD *)(v7 + 8) = v44;
        sub_1C61F90DC((uint64_t)v6, (uint64_t *)&v50)[1] = v7;
        v45 = v50;
        result = (uint64_t)sub_1C61B6040((uint64_t *)this + 400, &v48);
        *(_QWORD *)(result + 8) = v45;
      }
    }
  }
  return result;
}

void llvm::ResourceManager::clearResources(llvm::ResourceManager *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*((_BYTE *)this + 16))
  {
    v1 = *((_QWORD *)this + 3);
    *(_QWORD *)(v1 + 40) = 1;
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
      sub_1C61DCC98(v2);
  }
  else
  {
    v3 = *((unsigned int *)this + 46);
    if ((_DWORD)v3)
      bzero(*((void **)this + 22), 8 * v3);
  }
}

uint64_t llvm::SMSchedule::earliestCycleInChain(llvm::SMSchedule *this, const llvm::SDep *a2)
{
  _QWORD *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  _BYTE v29[64];
  void *v30;
  unsigned int v31;
  unsigned int v32;
  _OWORD v33[8];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v25 = v29;
  v26 = v29;
  v27 = 8;
  v28 = 0;
  v30 = v33;
  v32 = 8;
  v33[0] = *(_OWORD *)a2;
  v2 = (_QWORD *)((char *)this + 32);
  v3 = 1;
  v4 = 0x7FFFFFFFLL;
  do
  {
    v5 = *((_QWORD *)v30 + 2 * v3 - 2);
    v31 = v3 - 1;
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    v7 = sub_1C477672C((uint64_t)&v25, v5 & 0xFFFFFFFFFFFFFFF8);
    v9 = v25;
    v8 = v26;
    v10 = (uint64_t *)((char *)&v27 + 4);
    if (v26 != v25)
      v10 = &v27;
    if (v7 == (_QWORD *)&v26[8 * *(unsigned int *)v10])
    {
      v11 = (_QWORD *)*v2;
      if (*v2)
      {
        v12 = v2;
        do
        {
          v13 = v11[4];
          v14 = v13 >= v6;
          if (v13 >= v6)
            v15 = v11;
          else
            v15 = v11 + 1;
          if (v14)
            v12 = v11;
          v11 = (_QWORD *)*v15;
        }
        while (*v15);
        if (v12 != v2 && v12[4] <= v6)
        {
          v16 = *((_DWORD *)v12 + 10);
          if (v16 >= (int)v4)
            v4 = v4;
          else
            v4 = v16;
          v17 = *(unsigned int *)(v6 + 40);
          if ((_DWORD)v17)
          {
            v18 = 16 * v17;
            v19 = (uint64_t *)(*(_QWORD *)(v6 + 32) + 8);
            do
            {
              v20 = *(v19 - 1);
              if ((v20 & 4) != 0)
              {
                v21 = *v19;
                v22 = v31;
                if (v31 >= (unint64_t)v32)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, (uint64_t)v33, v31 + 1, 16);
                  v22 = v31;
                }
                v23 = (char *)v30 + 16 * v22;
                *v23 = v20;
                v23[1] = v21;
                ++v31;
              }
              v19 += 2;
              v18 -= 16;
            }
            while (v18);
          }
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v25, v6);
          v9 = v25;
          v8 = v26;
        }
      }
    }
    v3 = v31;
  }
  while (v31);
  if (v30 != v33)
  {
    free(v30);
    v9 = v25;
    v8 = v26;
  }
  if (v8 != v9)
    free(v8);
  return v4;
}

uint64_t llvm::SMSchedule::latestCycleInChain(llvm::SMSchedule *this, const llvm::SDep *a2)
{
  _QWORD *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  _BYTE v29[64];
  void *v30;
  unsigned int v31;
  unsigned int v32;
  _OWORD v33[8];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v25 = v29;
  v26 = v29;
  v27 = 8;
  v28 = 0;
  v30 = v33;
  v32 = 8;
  v33[0] = *(_OWORD *)a2;
  v2 = (_QWORD *)((char *)this + 32);
  v3 = 1;
  v4 = 0x80000000;
  do
  {
    v5 = *((_QWORD *)v30 + 2 * v3 - 2);
    v31 = v3 - 1;
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    v7 = sub_1C477672C((uint64_t)&v25, v5 & 0xFFFFFFFFFFFFFFF8);
    v9 = v25;
    v8 = v26;
    v10 = (uint64_t *)((char *)&v27 + 4);
    if (v26 != v25)
      v10 = &v27;
    if (v7 == (_QWORD *)&v26[8 * *(unsigned int *)v10])
    {
      v11 = (_QWORD *)*v2;
      if (*v2)
      {
        v12 = v2;
        do
        {
          v13 = v11[4];
          v14 = v13 >= v6;
          if (v13 >= v6)
            v15 = v11;
          else
            v15 = v11 + 1;
          if (v14)
            v12 = v11;
          v11 = (_QWORD *)*v15;
        }
        while (*v15);
        if (v12 != v2 && v12[4] <= v6)
        {
          v16 = *((_DWORD *)v12 + 10);
          if ((int)v4 <= v16)
            v4 = v16;
          else
            v4 = v4;
          v17 = *(unsigned int *)(v6 + 120);
          if ((_DWORD)v17)
          {
            v18 = 16 * v17;
            v19 = (uint64_t *)(*(_QWORD *)(v6 + 112) + 8);
            do
            {
              v20 = *(v19 - 1);
              if ((v20 & 4) != 0)
              {
                v21 = *v19;
                v22 = v31;
                if (v31 >= (unint64_t)v32)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, (uint64_t)v33, v31 + 1, 16);
                  v22 = v31;
                }
                v23 = (char *)v30 + 16 * v22;
                *v23 = v20;
                v23[1] = v21;
                ++v31;
              }
              v19 += 2;
              v18 -= 16;
            }
            while (v18);
          }
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v25, v6);
          v9 = v25;
          v8 = v26;
        }
      }
    }
    v3 = v31;
  }
  while (v31);
  if (v30 != v33)
  {
    free(v30);
    v9 = v25;
    v8 = v26;
  }
  if (v8 != v9)
    free(v8);
  return v4;
}

void llvm::SMSchedule::orderDependence(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  llvm::SMSchedule *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  llvm::MachineOperand *v25;
  llvm::MachineOperand *v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned __int16 v30;
  int v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  BOOL v37;
  _QWORD *v38;
  int v39;
  _QWORD *v40;
  unint64_t v41;
  BOOL v42;
  _QWORD *v43;
  int v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  BOOL v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  BOOL v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  BOOL v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  BOOL v68;
  _QWORD *v69;
  int v70;
  _QWORD *v71;
  unsigned int v72;
  BOOL v73;
  unsigned int v74;
  unint64_t v75;
  BOOL v76;
  _QWORD *v77;
  int v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  BOOL v83;
  _QWORD *v84;
  int v85;
  char isLoopCarriedDefOfUse;
  char v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t v96;
  BOOL v97;
  _QWORD *v98;
  int v99;
  unsigned int v100;
  _BOOL4 v101;
  _QWORD *v102;
  _QWORD *v103;
  unint64_t v104;
  BOOL v105;
  _QWORD *v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t v112;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t v116;
  BOOL v117;
  _QWORD *v118;
  int v119;
  _BOOL4 v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  unint64_t v136;
  unsigned int v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char v148;
  uint64_t v149;
  _QWORD *v150;
  unsigned int v151;
  llvm::SMSchedule *v152;
  int v153;
  uint64_t v154;
  unint64_t *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;

  v4 = a4;
  v6 = (llvm::SMSchedule *)a1;
  v157 = a3;
  v7 = *(_QWORD *)(a3 + 8);
  v9 = (_QWORD *)(a1 + 32);
  v8 = *(_QWORD **)(a1 + 32);
  if (!v8)
    goto LABEL_12;
  v10 = (_QWORD *)(a1 + 32);
  do
  {
    v11 = v8[4];
    v12 = v11 >= a3;
    if (v11 >= a3)
      v13 = v8;
    else
      v13 = v8 + 1;
    if (v12)
      v10 = v8;
    v8 = (_QWORD *)*v13;
  }
  while (*v13);
  if (v10 != v9 && v10[4] <= a3)
    v14 = (*((_DWORD *)v10 + 10) - *(_DWORD *)(a1 + 48)) / *(_DWORD *)(a1 + 56);
  else
LABEL_12:
    v14 = -1;
  v15 = a4[1];
  if (a4[2] == v15)
    goto LABEL_249;
  v16 = a4[4];
  v17 = (_QWORD *)(v15 + 8 * (v16 >> 9));
  v18 = *v17 + 8 * (v16 & 0x1FF);
  v149 = *(_QWORD *)(v15 + (((a4[5] + v16) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a4[5] + v16) & 0x1FF);
  if (v18 == v149)
    goto LABEL_249;
  v19 = 0;
  v20 = 0;
  v148 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v152 = v6;
  v154 = *(_QWORD *)(a3 + 8);
  do
  {
    v153 = v19;
    v155 = (unint64_t *)v18;
    v150 = v17;
    v151 = v21;
    v24 = *(unsigned int *)(v7 + 40);
    if ((_DWORD)v24)
    {
      v25 = *(llvm::MachineOperand **)(v7 + 32);
      v26 = (llvm::MachineOperand *)((char *)v25 + 32 * v24);
      while (1)
      {
        if (*(_BYTE *)v25)
          goto LABEL_155;
        v27 = *((_DWORD *)v25 + 1);
        if ((v27 & 0x80000000) == 0)
          goto LABEL_155;
        v156 = 0;
        v28 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v6 + 8) + 104))(*((_QWORD *)v6 + 8));
        if ((*(unsigned int (**)(uint64_t, uint64_t, char *, uint64_t *))(*(_QWORD *)v28 + 688))(v28, v154, (char *)&v156 + 4, &v156)&& *(_DWORD *)(*(_QWORD *)(v154 + 32) + 32 * HIDWORD(v156) + 4) == v27)
        {
          v158 = 0;
          if (!sub_1C617A1AC(*(_QWORD *)(a2 + 3176), *(_DWORD *)(a2 + 3192), a3, &v158)
            || v158 == *(_QWORD *)(a2 + 3176) + 24 * *(unsigned int *)(a2 + 3192)
            || (v29 = *(_DWORD *)(v158 + 8)) == 0)
          {
            v29 = v27;
          }
        }
        else
        {
          v29 = v27;
        }
        v30 = llvm::MachineInstr::readsWritesVirtualRegister(*(_QWORD *)(*v155 + 8), v29, 0);
        v31 = *(_DWORD *)v25;
        v6 = v152;
        if ((*(_DWORD *)v25 & 0x1000000) == 0 || !(_BYTE)v30)
          goto LABEL_52;
        v32 = (_QWORD *)*v9;
        if (!*v9)
          break;
        v33 = *v155;
        v34 = (_QWORD *)*v9;
        v35 = v9;
        do
        {
          v36 = v34[4];
          v37 = v36 >= v33;
          if (v36 >= v33)
            v38 = v34;
          else
            v38 = v34 + 1;
          if (v37)
            v35 = v34;
          v34 = (_QWORD *)*v38;
        }
        while (*v38);
        if (v35 == v9 || v35[4] > v33)
          v39 = -1;
        else
          v39 = (*((_DWORD *)v35 + 10) - *((_DWORD *)v152 + 12)) / *((_DWORD *)v152 + 14);
        v40 = v9;
        if (v39 <= v14)
          goto LABEL_135;
        do
        {
          v41 = v32[4];
          v42 = v41 >= v33;
          if (v41 >= v33)
            v43 = v32;
          else
            v43 = v32 + 1;
          if (v42)
            v40 = v32;
          v32 = (_QWORD *)*v43;
        }
        while (*v43);
        if (v40 == v9 || v40[4] > v33)
          goto LABEL_50;
        v44 = (*((_DWORD *)v40 + 10) - *((_DWORD *)v152 + 12)) / *((_DWORD *)v152 + 14);
LABEL_51:
        if (v44 > v14)
          goto LABEL_109;
LABEL_52:
        if ((v31 & 0x1000000) != 0 || v30 < 0x100u)
        {
LABEL_138:
          if ((v31 & 0x1000000) == 0)
          {
            v79 = *v155;
            v80 = (_QWORD *)*v9;
            if (!*v9)
              goto LABEL_150;
            v81 = v9;
            do
            {
              v82 = v80[4];
              v83 = v82 >= v79;
              if (v82 >= v79)
                v84 = v80;
              else
                v84 = v80 + 1;
              if (v83)
                v81 = v80;
              v80 = (_QWORD *)*v84;
            }
            while (*v84);
            if (v81 != v9 && v81[4] <= v79)
              v85 = (*((_DWORD *)v81 + 10) - *((_DWORD *)v152 + 12)) / *((_DWORD *)v152 + 14);
            else
LABEL_150:
              v85 = -1;
            if (v85 == v14)
            {
              isLoopCarriedDefOfUse = llvm::SMSchedule::isLoopCarriedDefOfUse(v152, (llvm::SwingSchedulerDAG *)a2, *(llvm::MachineInstr **)(v79 + 8), v25);
              v6 = v152;
              v87 = isLoopCarriedDefOfUse & (v22 == 0);
              if (v87)
                v22 = v23;
              v148 |= v87;
            }
          }
          goto LABEL_155;
        }
        v45 = *v155;
        v46 = (_QWORD *)*v9;
        if (*v9)
        {
          v47 = (_QWORD *)*v9;
          v48 = v9;
          do
          {
            v49 = v47[4];
            v50 = v49 >= v45;
            if (v49 >= v45)
              v51 = v47;
            else
              v51 = v47 + 1;
            if (v50)
              v48 = v47;
            v47 = (_QWORD *)*v51;
          }
          while (*v51);
          if (v48 == v9 || v48[4] > v45)
            v52 = -1;
          else
            v52 = (*((_DWORD *)v48 + 10) - *((_DWORD *)v152 + 12)) / *((_DWORD *)v152 + 14);
          v53 = (_QWORD *)*v9;
          v54 = v9;
          v55 = (_QWORD *)*v9;
          v56 = v9;
          if (v52 != v14)
          {
            do
            {
              v67 = v55[4];
              v68 = v67 >= v45;
              if (v67 >= v45)
                v69 = v55;
              else
                v69 = v55 + 1;
              if (v68)
                v56 = v55;
              v55 = (_QWORD *)*v69;
            }
            while (*v69);
            if (v56 == v9 || v56[4] > v45)
              v70 = -1;
            else
              v70 = (*((_DWORD *)v56 + 10) - *((_DWORD *)v152 + 12)) / *((_DWORD *)v152 + 14);
            v71 = v9;
            if (v70 > v14)
            {
LABEL_113:
              if (v22)
                v72 = v22;
              else
                v72 = v23;
              v73 = v72 == 0;
              if (v72)
                v22 = v72;
              else
                v22 = 0;
              v74 = v151;
              if (!v73)
                v74 = v23 - 1;
              v151 = v74;
              if (!v73)
                v20 = 1;
              goto LABEL_137;
            }
            do
            {
              v75 = v46[4];
              v76 = v75 >= v45;
              if (v75 >= v45)
                v77 = v46;
              else
                v77 = v46 + 1;
              if (v76)
                v71 = v46;
              v46 = (_QWORD *)*v77;
            }
            while (*v77);
            if (v71 == v9 || v71[4] > v45)
LABEL_133:
              v78 = -1;
            else
              v78 = (*((_DWORD *)v71 + 10) - *((_DWORD *)v152 + 12)) / *((_DWORD *)v152 + 14);
            if (v78 >= v14)
              goto LABEL_138;
LABEL_135:
            if (!v22)
              v22 = v23;
LABEL_137:
            v153 = 1;
            goto LABEL_155;
          }
          do
          {
            v57 = v53[4];
            v58 = v57 >= v45;
            if (v57 >= v45)
              v59 = v53;
            else
              v59 = v53 + 1;
            if (v58)
              v54 = v53;
            v53 = (_QWORD *)*v59;
          }
          while (*v59);
          if (v54 != v9 && v54[4] <= v45)
            goto LABEL_81;
        }
        else if (v14 != -1)
        {
          if (v14 <= -2)
            goto LABEL_113;
          goto LABEL_133;
        }
        v54 = v9;
LABEL_81:
        if (!v46)
          goto LABEL_92;
        v60 = v9;
        do
        {
          v61 = v46[4];
          v62 = v61 >= a3;
          if (v61 >= a3)
            v63 = v46;
          else
            v63 = v46 + 1;
          if (v62)
            v60 = v46;
          v46 = (_QWORD *)*v63;
        }
        while (*v63);
        if (v60 == v9 || v60[4] > a3)
LABEL_92:
          v60 = v9;
        if ((*((_DWORD *)v54 + 10) - *((_DWORD *)v152 + 12)) % *((_DWORD *)v152 + 14) == (*((_DWORD *)v60 + 10)
                                                                                         - *((_DWORD *)v152 + 12))
                                                                                        % *((_DWORD *)v152 + 14))
        {
          v64 = *(unsigned int *)(v45 + 120);
          if (!(_DWORD)v64)
            goto LABEL_135;
          v65 = *(_QWORD **)(v45 + 112);
          v66 = 16 * v64;
          while ((*v65 & 0xFFFFFFFFFFFFFFF8) != a3)
          {
            v65 += 2;
            v66 -= 16;
            if (!v66)
              goto LABEL_135;
          }
        }
LABEL_109:
        v20 = 1;
        v151 = v23;
LABEL_155:
        v25 = (llvm::MachineOperand *)((char *)v25 + 32);
        if (v25 == v26)
          goto LABEL_163;
      }
      if (v14 >= -1)
        goto LABEL_135;
LABEL_50:
      v44 = -1;
      goto LABEL_51;
    }
LABEL_163:
    v88 = *(unsigned int *)(a3 + 120);
    if ((_DWORD)v88)
    {
      v89 = *(_QWORD **)(a3 + 112);
      v90 = &v89[2 * v88];
      v7 = v154;
      v91 = v155;
      v92 = *v155;
      v21 = v151;
      v17 = v150;
      v19 = v153;
      do
      {
        if (v92 == (*v89 & 0xFFFFFFFFFFFFFFF8))
        {
          v93 = *v89 & 6;
          if (v93 == 2)
          {
            v102 = (_QWORD *)*v9;
            if (!*v9)
              goto LABEL_199;
            v103 = v9;
            do
            {
              v104 = v102[4];
              v105 = v104 >= v92;
              if (v104 >= v92)
                v106 = v102;
              else
                v106 = v102 + 1;
              if (v105)
                v103 = v102;
              v102 = (_QWORD *)*v106;
            }
            while (*v106);
            if (v103 != v9 && v103[4] <= v92)
              v107 = (*((_DWORD *)v103 + 10) - *((_DWORD *)v6 + 12)) / *((_DWORD *)v6 + 14);
            else
LABEL_199:
              v107 = -1;
            if (v22 - 1 >= v23)
              v108 = v23;
            else
              v108 = v22;
            if (v107 == v14)
            {
              v22 = v108;
              v19 = 1;
            }
          }
          else if (v93 == 6)
          {
            v94 = (_QWORD *)*v9;
            if (!*v9)
              goto LABEL_181;
            v95 = v9;
            do
            {
              v96 = v94[4];
              v97 = v96 >= v92;
              if (v96 >= v92)
                v98 = v94;
              else
                v98 = v94 + 1;
              if (v97)
                v95 = v94;
              v94 = (_QWORD *)*v98;
            }
            while (*v98);
            if (v95 != v9 && v95[4] <= v92)
              v99 = (*((_DWORD *)v95 + 10) - *((_DWORD *)v6 + 12)) / *((_DWORD *)v6 + 14);
            else
LABEL_181:
              v99 = -1;
            if (v23 >= v22)
              v100 = v22;
            else
              v100 = v23;
            v73 = v99 == v14;
            v101 = v99 == v14;
            if (v73)
              v22 = v100;
            v19 |= v101;
          }
        }
        v89 += 2;
      }
      while (v89 != v90);
    }
    else
    {
      v7 = v154;
      v91 = v155;
      v21 = v151;
      v17 = v150;
      v19 = v153;
    }
    v109 = *(unsigned int *)(a3 + 40);
    if ((_DWORD)v109)
    {
      v110 = *(_QWORD **)(a3 + 32);
      v111 = &v110[2 * v109];
      v112 = *v91;
      do
      {
        if ((~*v110 & 6) == 0 && v112 == (*v110 & 0xFFFFFFFFFFFFFFF8))
        {
          v114 = (_QWORD *)*v9;
          if (!*v9)
            goto LABEL_227;
          v115 = v9;
          do
          {
            v116 = v114[4];
            v117 = v116 >= v112;
            if (v116 >= v112)
              v118 = v114;
            else
              v118 = v114 + 1;
            if (v117)
              v115 = v114;
            v114 = (_QWORD *)*v118;
          }
          while (*v118);
          if (v115 != v9 && v115[4] <= v112)
            v119 = (*((_DWORD *)v115 + 10) - *((_DWORD *)v6 + 12)) / *((_DWORD *)v6 + 14);
          else
LABEL_227:
            v119 = -1;
          v73 = v119 == v14;
          v120 = v119 == v14;
          if (v73)
            v21 = v23;
          v20 |= v120;
        }
        v110 += 2;
      }
      while (v110 != v111);
    }
    v18 = (uint64_t)(v91 + 1);
    if (v18 - *v17 == 4096)
    {
      v121 = v17[1];
      ++v17;
      v18 = v121;
    }
    ++v23;
  }
  while (v18 != v149);
  v122 = (v20 & v19 ^ 1 | (v22 != v21)) & v19;
  if ((v148 & 1) != 0)
    v122 = v20 ^ 1 | (v22 > v21);
  v4 = a4;
  if ((v122 & v20 & 1) == 0)
  {
    if ((v122 & 1) != 0)
    {
      sub_1C61F6E60(a4, &v157);
      return;
    }
LABEL_249:
    sub_1C48410F0(v4, &v157);
    return;
  }
  v123 = a4[5];
  if (v123 <= v22 || v123 <= v21)
    abort();
  v124 = a4[4];
  v125 = a4[1];
  v126 = a4[2];
  v127 = *(_QWORD *)(*(_QWORD *)(v125 + (((v124 + v22) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v124 + v22) & 0x1FF));
  v128 = v21;
  v129 = *(_QWORD *)(*(_QWORD *)(v125 + (((v124 + v21) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v124 + v21) & 0x1FF));
  v130 = (char *)(v125 + 8 * (v124 >> 9));
  if (v22 <= v21)
  {
    if (v126 == v125)
    {
      v135 = 0;
      if (!v21)
        goto LABEL_263;
    }
    else
    {
      v135 = (char *)(*(_QWORD *)v130 + 8 * (a4[4] & 0x1FFLL));
      if (!v21)
        goto LABEL_263;
    }
    v141 = v21 + ((uint64_t)&v135[-*(_QWORD *)v130] >> 3);
    if (v141 < 1)
    {
      v143 = 511 - v141;
      v130 -= 8 * (v143 >> 9);
      v135 = (char *)(*(_QWORD *)v130 + 8 * (~(_WORD)v143 & 0x1FF));
    }
    else
    {
      v130 += 8 * ((unint64_t)v141 >> 9);
      v135 = (char *)(*(_QWORD *)v130 + 8 * (v141 & 0x1FF));
    }
LABEL_263:
    sub_1C518F8A8((uint64_t)a4, v130, v135);
    v144 = a4[1];
    v139 = (char *)(v144 + 8 * (a4[4] >> 9));
    if (a4[2] == v144)
    {
      v140 = 0;
      if (!v22)
        goto LABEL_271;
    }
    else
    {
      v140 = (char *)(*(_QWORD *)v139 + 8 * (a4[4] & 0x1FFLL));
      if (!v22)
        goto LABEL_271;
    }
    v142 = v22 + ((uint64_t)&v140[-*(_QWORD *)v139] >> 3);
    goto LABEL_268;
  }
  v131 = *(_QWORD *)v130 + 8 * (a4[4] & 0x1FFLL);
  if (v126 == v125)
    v131 = 0;
  v132 = v22 + ((v131 - *(_QWORD *)v130) >> 3);
  if (v132 < 1)
  {
    v136 = 511 - v132;
    v133 = &v130[-8 * (v136 >> 9)];
    v134 = (char *)(*(_QWORD *)v133 + 8 * (~(_WORD)v136 & 0x1FF));
  }
  else
  {
    v133 = &v130[8 * ((unint64_t)v132 >> 9)];
    v134 = (char *)(*(_QWORD *)v133 + 8 * (v132 & 0x1FF));
  }
  v137 = v21;
  sub_1C518F8A8((uint64_t)a4, v133, v134);
  v138 = a4[1];
  v139 = (char *)(v138 + 8 * (a4[4] >> 9));
  if (a4[2] == v138)
  {
    v140 = 0;
    if (!v137)
      goto LABEL_271;
  }
  else
  {
    v140 = (char *)(*(_QWORD *)v139 + 8 * (a4[4] & 0x1FFLL));
    if (!v137)
      goto LABEL_271;
  }
  v142 = v128 + ((uint64_t)&v140[-*(_QWORD *)v139] >> 3);
LABEL_268:
  if (v142 < 1)
  {
    v145 = 511 - v142;
    v139 -= 8 * (v145 >> 9);
    v140 = (char *)(*(_QWORD *)v139 + 8 * (~(_WORD)v145 & 0x1FF));
  }
  else
  {
    v139 += 8 * ((unint64_t)v142 >> 9);
    v140 = (char *)(*(_QWORD *)v139 + 8 * (v142 & 0x1FF));
  }
LABEL_271:
  sub_1C518F8A8((uint64_t)a4, v139, v140);
  llvm::SMSchedule::orderDependence(v152, a2, v127, a4);
  llvm::SMSchedule::orderDependence(v152, a2, a3, a4);
  llvm::SMSchedule::orderDependence(v152, a2, v129, a4);
}

uint64_t llvm::SMSchedule::isLoopCarriedDefOfUse(llvm::SMSchedule *this, llvm::SwingSchedulerDAG *a2, llvm::MachineInstr *a3, llvm::MachineOperand *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  _DWORD *i;

  v4 = *(unsigned __int8 *)a4;
  if (*(_BYTE *)a4)
    return 0;
  if (**((_WORD **)a3 + 2) && **((_WORD **)a3 + 2) != 69)
  {
    v6 = *((_QWORD *)this + 9);
    v7 = *((unsigned int *)a4 + 1);
    v8 = (uint64_t *)((v7 & 0x80000000) != 0
                   ? *(_QWORD *)(v6 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8
                   : *(_QWORD *)(v6 + 272) + 8 * v7);
    v4 = *v8;
    if (v4)
    {
      if ((*(_BYTE *)(v4 + 3) & 1) == 0)
      {
        v4 = *(_QWORD *)(v4 + 24);
        if (!v4)
          return v4;
        if ((*(_BYTE *)(v4 + 3) & 1) == 0)
          return 0;
      }
      v9 = *(_QWORD *)(v4 + 8);
      if (!v9)
        return 0;
      v10 = **(unsigned __int16 **)(v9 + 16);
      v11 = v10 == 69 || v10 == 0;
      if (!v11
        || *(_QWORD *)(v9 + 24) != *((_QWORD *)a3 + 3)
        || !llvm::SMSchedule::isLoopCarried(this, a2, (llvm::MachineInstr *)v9))
      {
        return 0;
      }
      v12 = *(_DWORD *)(v9 + 40);
      if (v12 == 1)
      {
LABEL_25:
        v15 = 0;
      }
      else
      {
        v13 = *(_QWORD *)(v9 + 32);
        v14 = 1;
        while (*(_QWORD *)(v13 + 32 * (v14 + 1) + 16) != *(_QWORD *)(v9 + 24))
        {
          v14 += 2;
          if (v12 == v14)
            goto LABEL_25;
        }
        v15 = *(_DWORD *)(v13 + 32 * v14 + 4);
      }
      v16 = *((unsigned int *)a3 + 10);
      if (!(_DWORD)v16)
        return 0;
      for (i = (_DWORD *)(*((_QWORD *)a3 + 4) + 4); (*(i - 1) & 0x10000FF) != 0x1000000 || *i != v15; i += 8)
      {
        v4 = 0;
        if (!--v16)
          return v4;
      }
      return 1;
    }
  }
  return v4;
}

void sub_1C518F8A8(uint64_t a1, char *a2, char *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  void **v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void **v19;
  char *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64x2_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void **v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE **v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void **v52[4];

  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = (char **)(v7 + 8 * (v6 >> 9));
  if (v8 == v7)
    v10 = 0;
  else
    v10 = &(*v9)[8 * (*(_QWORD *)(a1 + 32) & 0x1FFLL)];
  if (a3 == v10)
  {
    v12 = *v9;
    goto LABEL_9;
  }
  v11 = ((uint64_t)&a3[-*(_QWORD *)a2] >> 3) + ((a2 - (char *)v9) << 6);
  v12 = *v9;
  v13 = v11 - ((v10 - *v9) >> 3);
  if (v11 == (v10 - *v9) >> 3)
  {
LABEL_9:
    v14 = (void **)(v7 + 8 * (v6 >> 9));
    v15 = (void **)v10;
    goto LABEL_10;
  }
  if (v11 < 1)
  {
    v30 = 511 - v11;
    LOWORD(v11) = ~(511 - v11);
    v14 = (void **)&v9[-(v30 >> 9)];
  }
  else
  {
    v14 = (void **)&v9[(unint64_t)v11 >> 9];
  }
  v12 = *v14;
  v15 = (void **)((char *)*v14 + 8 * (v11 & 0x1FF));
  v31 = *(_QWORD *)(a1 + 40);
  if (v13 > (unint64_t)(v31 - 1) >> 1)
  {
    v32 = (char *)v15 - v12;
    v33 = ((char *)v15 - v12) >> 3;
    if (v32 < -7)
    {
      v21 = v33 > 510;
      v37 = 510 - v33;
      v38 = 1021 - v33;
      if (!v21)
        v38 = v37;
      v35 = &v14[-(v38 >> 9)];
      v39 = v37 & 0x1FF;
      v40 = -v37;
      v25 = v40 < 0;
      v41 = v40 & 0x1FF;
      if (v25)
        v42 = v39;
      else
        v42 = -v41;
      v36 = (char *)*v35 + 8 * (511 - v42);
    }
    else
    {
      v34 = v33 + 1;
      v35 = &v14[v34 >> 9];
      v36 = (char *)*v35 + 8 * (v34 & 0x1FF);
    }
    v43 = (_BYTE **)(v7 + 8 * ((v31 + v6) >> 9));
    if (v8 == v7)
      v44 = 0;
    else
      v44 = &(*v43)[8 * (((_WORD)v31 + (_WORD)v6) & 0x1FF)];
    v52[0] = v14;
    v52[1] = v15;
    sub_1C5194838(v35, v36, v43, v44, v52);
    v46 = *(_QWORD *)(a1 + 8);
    v45 = *(_QWORD *)(a1 + 16);
    v47 = v45 - v46;
    v48 = v45 == v46;
    v50 = *(_QWORD *)(a1 + 32);
    v49 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v49 - 1;
    v51 = (v47 << 6) - 1;
    if (v48)
      v51 = 0;
    if ((unint64_t)(v51 - (v49 + v50) - 1023) <= 0xFFFFFFFFFFFFFBFFLL)
    {
      operator delete(*(void **)(v45 - 8));
      *(_QWORD *)(a1 + 16) -= 8;
    }
    return;
  }
LABEL_10:
  v16 = (char *)v15 - v12;
  v17 = ((char *)v15 - v12) >> 3;
  if (v16 < -7)
  {
    v21 = v17 > 510;
    v22 = 510 - v17;
    v23 = 1021 - v17;
    if (!v21)
      v23 = v22;
    v19 = &v14[-(v23 >> 9)];
    v24 = v22 & 0x1FF;
    v26 = -v22;
    v25 = v26 < 0;
    v27 = v26 & 0x1FF;
    if (v25)
      v28 = v24;
    else
      v28 = -v27;
    v20 = (char *)*v19 + 8 * (511 - v28);
  }
  else
  {
    v18 = v17 + 1;
    v19 = &v14[v18 >> 9];
    v20 = (char *)*v19 + 8 * (v18 & 0x1FF);
  }
  sub_1C51946F0((uint64_t)v52, v9, v10, (char **)v14, (char *)v15, v19, v20);
  v29 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1C85FB4A0);
  *(int64x2_t *)(a1 + 32) = v29;
  if (v29.i64[0] >= 0x400uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
}

uint64_t llvm::SwingSchedulerDAG::fixupRegisterOverlaps(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  llvm::MachineFunction *v25;
  llvm::MachineInstr *v26;
  llvm::MachineInstr *v27;
  llvm::MachineInstr *v28;
  llvm::MachineInstr *v29;
  llvm::MachineFunction *v30;
  uint64_t v31;
  uint64_t v32;
  llvm::MachineInstr *v33;
  llvm::MachineInstr *v34;

  v2 = a2[1];
  if (a2[2] == v2)
    return result;
  v3 = a2[4];
  v4 = (_QWORD *)(v2 + 8 * (v3 >> 9));
  v5 = *v4 + 8 * (v3 & 0x1FF);
  v6 = *(_QWORD *)(v2 + (((a2[5] + v3) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a2[5] + v3) & 0x1FF);
  if (v5 == v6)
    return result;
  v7 = result;
  v8 = 0;
  v9 = 0;
  v31 = result + 952;
  v10 = (uint64_t *)(result + 3200);
  do
  {
    v11 = *(_QWORD *)v5;
    result = *(_QWORD *)(*(_QWORD *)v5 + 8);
    v33 = (llvm::MachineInstr *)result;
    v12 = *(unsigned int *)(result + 40);
    if (!(_DWORD)v12)
      goto LABEL_14;
    v13 = 0;
    v14 = 0;
    v15 = *(_QWORD *)(result + 32);
    v16 = 32 * v12;
    while (1)
    {
      v17 = *(_DWORD *)(v15 + v14);
      v18 = v17 & 0x10000FF;
      if ((v17 & 0x10000FF) == 0)
        break;
      v19 = v17 & 0xF00000;
      if (v18 == 0x1000000 && v19 != 0)
      {
        result = llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)result, v13);
        v21 = *((_QWORD *)v33 + 4);
        v8 = *(_DWORD *)(v21 + 32 * result + 4);
        v9 = *(_DWORD *)(v21 + v14 + 4);
        goto LABEL_14;
      }
LABEL_13:
      v14 += 32;
      v13 = (v13 + 1);
      if (v16 == v14)
        goto LABEL_14;
    }
    if (*(_DWORD *)(v15 + v14 + 4) != v8)
      goto LABEL_13;
    v34 = 0;
    result = sub_1C617A1AC(*(_QWORD *)(v7 + 3176), *(_DWORD *)(v7 + 3192), v11, &v34);
    v23 = (uint64_t)v34;
    if ((_DWORD)result)
      v24 = v34 == (llvm::MachineInstr *)(*(_QWORD *)(v7 + 3176) + 24 * *(unsigned int *)(v7 + 3192));
    else
      v24 = 1;
    if (!v24)
    {
      v32 = 0;
      result = (*(uint64_t (**)(_QWORD, llvm::MachineInstr *, char *, uint64_t *))(**(_QWORD **)(v7 + 16)
                                                                                          + 688))(*(_QWORD *)(v7 + 16), v33, (char *)&v32 + 4, &v32);
      if ((_DWORD)result)
      {
        v34 = 0;
        v25 = *(llvm::MachineFunction **)(v7 + 32);
        v26 = v33;
        v27 = (llvm::MachineInstr *)*((_QWORD *)v25 + 28);
        if (v27)
        {
          *((_QWORD *)v25 + 28) = *(_QWORD *)v27;
        }
        else
        {
          v29 = v33;
          v30 = *(llvm::MachineFunction **)(v7 + 32);
          v27 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v25 + 128, 72, 3);
          v26 = v29;
          v25 = v30;
        }
        v34 = llvm::MachineInstr::MachineInstr(v27, v25, v26);
        llvm::MachineOperand::setReg(*((_QWORD *)v34 + 4) + 32 * HIDWORD(v32), v9);
        *(_QWORD *)(*((_QWORD *)v34 + 4) + 32 * v32 + 16) = *(_QWORD *)(*((_QWORD *)v33 + 4)
                                                                                      + 32 * v32
                                                                                      + 16)
                                                                          - *(_QWORD *)(v23 + 16);
        *(_QWORD *)(v11 + 8) = v34;
        sub_1C61F90DC(v31, (uint64_t *)&v34)[1] = v11;
        v28 = v34;
        result = (uint64_t)sub_1C61B6040(v10, &v33);
        *(_QWORD *)(result + 8) = v28;
      }
    }
    v9 = 0;
    v8 = 0;
LABEL_14:
    v5 += 8;
    if (v5 - *v4 == 4096)
    {
      v22 = v4[1];
      ++v4;
      v5 = v22;
    }
  }
  while (v5 != v6);
  return result;
}

void sub_1C518FD8C(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  char *j;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  int64_t v58;
  char *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t i;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int64_t v83;
  char *v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *k;
  char *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t *v107;
  char *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  __int16 v154;
  unint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  _BYTE *v164;
  unint64_t v165;
  uint64_t v166;
  char *v167;
  _BYTE *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  _BYTE *v174;
  unint64_t v175;
  char *v176;
  uint64_t v177;
  _BYTE *v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  unint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  char *v186;
  uint64_t v187;
  unint64_t v188;
  __int16 v189;
  unint64_t v190;
  char *v191;
  char *v192;
  _QWORD *v193;
  char *v194;
  uint64_t v195;
  char **v196;
  char *v197;
  unint64_t v198;
  char **v199;
  char *v200;
  _QWORD *v201;
  char *v202;
  uint64_t v203;
  char **v204;
  char *v205;
  unint64_t v206;
  char *v207;
  char *v208;
  char *v209;
  char *v210;
  char *v211;
  _BYTE *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  unint64_t v222;
  unint64_t v223;
  char *v224;
  char *v225;
  char *v226;
  char *v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  void ***v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = v3 + v4;
  v6 = (v3 + v4) >> 9;
  v7 = *(char **)(a1 + 8);
  v8 = *(char **)(a1 + 16);
  v9 = &v7[8 * v6];
  if (v8 == v7)
    v10 = 0;
  else
    v10 = *(_QWORD *)v9 + 8 * (v5 & 0x1FF);
  v11 = a2[4];
  v12 = a2[1];
  v13 = (char *)(v12 + 8 * (v11 >> 9));
  if (a2[2] == v12)
  {
    v14 = 0;
    j = 0;
    v16 = (char *)(v12 + 8 * ((a2[5] + v11) >> 9));
  }
  else
  {
    v14 = (char *)(*(_QWORD *)v13 + 8 * (a2[4] & 0x1FFLL));
    v15 = a2[5] + v11;
    v16 = (char *)(v12 + 8 * (v15 >> 9));
    j = (char *)(*(_QWORD *)v16 + 8 * (v15 & 0x1FF));
  }
  if (j == v14)
    v18 = 0;
  else
    v18 = ((uint64_t)&j[-*(_QWORD *)v16] >> 3) + ((v16 - v13) << 6) - ((uint64_t)&v14[-*(_QWORD *)v13] >> 3);
  v19 = v3 >> 9;
  v20 = &v7[8 * (v3 >> 9)];
  v21 = v8 - v7;
  if (v8 == v7)
    v22 = 0;
  else
    v22 = *(_QWORD *)v20 + 8 * (*(_QWORD *)(a1 + 32) & 0x1FFLL);
  if (v10 == v22)
    v23 = 0;
  else
    v23 = ((v10 - *(_QWORD *)v9) >> 3) + ((v9 - v20) << 6) - ((v22 - *(_QWORD *)v20) >> 3);
  if (v23 >= v4 - v23)
  {
    v35 = (v21 << 6) - 1;
    v36 = v8 - v7;
    if (v8 == v7)
      v35 = 0;
    v37 = v35 - v5;
    v38 = v18 >= v37;
    v39 = v18 - v37;
    if (v39 != 0 && v38)
    {
      v229 = v23;
      v231 = v18;
      if (v8 == v7)
        v40 = v39 + 1;
      else
        v40 = v39;
      if ((v40 & 0x1FF) != 0)
        v41 = (v40 >> 9) + 1;
      else
        v41 = v40 >> 9;
      if (v41 >= v19)
        v42 = v3 >> 9;
      else
        v42 = v41;
      v225 = v14;
      v227 = j;
      if (v41 <= v19)
      {
        for (*(_QWORD *)(a1 + 32) = v3 - (v42 << 9); v42; --v42)
        {
          v50 = *(_QWORD **)(a1 + 8);
          v53 = *v50;
          v52 = (char *)(v50 + 1);
          v51 = v53;
          *(_QWORD *)(a1 + 8) = v52;
          if (v8 == *(char **)(a1 + 24))
          {
            v54 = *(char **)a1;
            if ((unint64_t)v52 <= *(_QWORD *)a1)
            {
              if (v8 == v54)
                v60 = 1;
              else
                v60 = (v8 - v54) >> 2;
              if (v60 >> 61)
                goto LABEL_314;
              v61 = (char *)operator new(8 * v60);
              v62 = &v61[8 * (v60 >> 2)];
              v64 = v8 - v52;
              v63 = v8 == v52;
              v8 = v62;
              if (!v63)
              {
                v8 = &v62[v64 & 0xFFFFFFFFFFFFFFF8];
                v65 = 8 * (v64 >> 3);
                v66 = &v61[8 * (v60 >> 2)];
                do
                {
                  v67 = *(_QWORD *)v52;
                  v52 += 8;
                  *(_QWORD *)v66 = v67;
                  v66 += 8;
                  v65 -= 8;
                }
                while (v65);
              }
              *(_QWORD *)a1 = v61;
              *(_QWORD *)(a1 + 8) = v62;
              *(_QWORD *)(a1 + 16) = v8;
              *(_QWORD *)(a1 + 24) = &v61[8 * v60];
              if (v54)
              {
                operator delete(v54);
                v8 = *(char **)(a1 + 16);
              }
            }
            else
            {
              v55 = (uint64_t)&v52[-*(_QWORD *)a1] >> 3;
              if (v55 >= -1)
                v56 = v55 + 1;
              else
                v56 = v55 + 2;
              v57 = &v52[-8 * (v56 >> 1)];
              v58 = v8 - v52;
              if (v8 != v52)
              {
                memmove(&v52[-8 * (v56 >> 1)], v52, v8 - v52);
                v8 = *(char **)(a1 + 8);
              }
              v59 = &v8[-8 * (v56 >> 1)];
              v8 = &v57[v58];
              *(_QWORD *)(a1 + 8) = v59;
              *(_QWORD *)(a1 + 16) = &v57[v58];
            }
          }
          *(_QWORD *)v8 = v51;
          v8 = (char *)(*(_QWORD *)(a1 + 16) + 8);
          *(_QWORD *)(a1 + 16) = v8;
        }
      }
      else
      {
        v43 = v41 - v42;
        v44 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
        if (v41 - v42 <= (v44 >> 3) - (v36 >> 3))
        {
          if (v43)
          {
            while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
            {
              *(_QWORD *)&v233 = operator new(0x1000uLL);
              sub_1C61351F0(a1, &v233);
              --v41;
              if (!--v43)
              {
                v8 = *(char **)(a1 + 16);
                goto LABEL_101;
              }
            }
            for (i = 0; i != v43; ++i)
            {
              *(_QWORD *)&v233 = operator new(0x1000uLL);
              sub_1C6135314((void **)a1, &v233);
              v8 = *(char **)(a1 + 16);
              if (&v8[-*(_QWORD *)(a1 + 8)] == (char *)8)
                v73 = 511;
              else
                v73 = 512;
              v74 = v73 + *(_QWORD *)(a1 + 32);
              *(_QWORD *)(a1 + 32) = v74;
            }
            v42 = v41;
          }
          else
          {
LABEL_101:
            v74 = *(_QWORD *)(a1 + 32);
          }
          for (*(_QWORD *)(a1 + 32) = v74 - (v42 << 9); v42; --v42)
          {
            v75 = *(_QWORD **)(a1 + 8);
            v78 = *v75;
            v77 = (char *)(v75 + 1);
            v76 = v78;
            *(_QWORD *)(a1 + 8) = v77;
            if (v8 == *(char **)(a1 + 24))
            {
              v79 = *(char **)a1;
              if ((unint64_t)v77 <= *(_QWORD *)a1)
              {
                if (v8 == v79)
                  v85 = 1;
                else
                  v85 = (v8 - v79) >> 2;
                if (v85 >> 61)
                  goto LABEL_314;
                v86 = (char *)operator new(8 * v85);
                v87 = &v86[8 * (v85 >> 2)];
                v88 = v8 - v77;
                v63 = v8 == v77;
                v8 = v87;
                if (!v63)
                {
                  v8 = &v87[v88 & 0xFFFFFFFFFFFFFFF8];
                  v89 = 8 * (v88 >> 3);
                  v90 = &v86[8 * (v85 >> 2)];
                  do
                  {
                    v91 = *(_QWORD *)v77;
                    v77 += 8;
                    *(_QWORD *)v90 = v91;
                    v90 += 8;
                    v89 -= 8;
                  }
                  while (v89);
                }
                *(_QWORD *)a1 = v86;
                *(_QWORD *)(a1 + 8) = v87;
                *(_QWORD *)(a1 + 16) = v8;
                *(_QWORD *)(a1 + 24) = &v86[8 * v85];
                if (v79)
                {
                  operator delete(v79);
                  v8 = *(char **)(a1 + 16);
                }
              }
              else
              {
                v80 = (uint64_t)&v77[-*(_QWORD *)a1] >> 3;
                if (v80 >= -1)
                  v81 = v80 + 1;
                else
                  v81 = v80 + 2;
                v82 = &v77[-8 * (v81 >> 1)];
                v83 = v8 - v77;
                if (v8 != v77)
                {
                  memmove(&v77[-8 * (v81 >> 1)], v77, v8 - v77);
                  v8 = *(char **)(a1 + 8);
                }
                v84 = &v8[-8 * (v81 >> 1)];
                v8 = &v82[v83];
                *(_QWORD *)(a1 + 8) = v84;
                *(_QWORD *)(a1 + 16) = &v82[v83];
              }
            }
            *(_QWORD *)v8 = v76;
            v8 = (char *)(*(_QWORD *)(a1 + 16) + 8);
            *(_QWORD *)(a1 + 16) = v8;
          }
        }
        else
        {
          v45 = v36 >> 3;
          v46 = v44 >> 2;
          if (v46 <= v43 + (v36 >> 3))
            v47 = v43 + (v36 >> 3);
          else
            v47 = v46;
          v235 = a1 + 24;
          if (v47)
          {
            if (v47 >> 61)
              goto LABEL_314;
            v48 = (char *)operator new(8 * v47);
          }
          else
          {
            v48 = 0;
          }
          v223 = v42 << 9;
          *(_QWORD *)&v233 = v48;
          *((_QWORD *)&v233 + 1) = &v48[8 * (v45 - v42)];
          *(_QWORD *)&v234 = *((_QWORD *)&v233 + 1);
          *((_QWORD *)&v234 + 1) = &v48[8 * v47];
          do
          {
            v232 = (void ***)operator new(0x1000uLL);
            sub_1C61351F0((uint64_t)&v233, &v232);
            --v43;
          }
          while (v43);
          v122 = *(char **)(a1 + 8);
          if (v42)
          {
            v123 = (char *)v234;
            do
            {
              if (v123 == *((char **)&v234 + 1))
              {
                v124 = (char *)*((_QWORD *)&v233 + 1);
                v125 = (void *)v233;
                if (*((_QWORD *)&v233 + 1) <= (unint64_t)v233)
                {
                  if (v123 == (char *)v233)
                    v131 = 1;
                  else
                    v131 = (uint64_t)&v123[-v233] >> 2;
                  if (v131 >> 61)
                    goto LABEL_314;
                  v132 = (char *)operator new(8 * v131);
                  v133 = v123 - v124;
                  v63 = v123 == v124;
                  v123 = &v132[8 * (v131 >> 2)];
                  if (!v63)
                  {
                    v123 = &v132[8 * (v131 >> 2) + (v133 & 0xFFFFFFFFFFFFFFF8)];
                    v134 = 8 * (v133 >> 3);
                    v135 = &v132[8 * (v131 >> 2)];
                    do
                    {
                      v136 = *(_QWORD *)v124;
                      v124 += 8;
                      *(_QWORD *)v135 = v136;
                      v135 += 8;
                      v134 -= 8;
                    }
                    while (v134);
                  }
                  *(_QWORD *)&v233 = v132;
                  *((_QWORD *)&v233 + 1) = &v132[8 * (v131 >> 2)];
                  *(_QWORD *)&v234 = v123;
                  *((_QWORD *)&v234 + 1) = &v132[8 * v131];
                  if (v125)
                  {
                    operator delete(v125);
                    v123 = (char *)v234;
                  }
                }
                else
                {
                  v126 = (uint64_t)(*((_QWORD *)&v233 + 1) - v233) >> 3;
                  if (v126 >= -1)
                    v127 = v126 + 1;
                  else
                    v127 = v126 + 2;
                  v128 = *((_QWORD *)&v233 + 1) - 8 * (v127 >> 1);
                  v129 = &v123[-*((_QWORD *)&v233 + 1)];
                  if (v123 != *((char **)&v233 + 1))
                  {
                    memmove((void *)(*((_QWORD *)&v233 + 1) - 8 * (v127 >> 1)), *((const void **)&v233 + 1), (size_t)&v123[-*((_QWORD *)&v233 + 1)]);
                    v123 = (char *)*((_QWORD *)&v233 + 1);
                  }
                  v130 = &v123[-8 * (v127 >> 1)];
                  v123 = &v129[v128];
                  *((_QWORD *)&v233 + 1) = v130;
                  *(_QWORD *)&v234 = &v129[v128];
                }
              }
              *(_QWORD *)v123 = *(_QWORD *)v122;
              v123 = (char *)(v234 + 8);
              *(_QWORD *)&v234 = v234 + 8;
              v122 = (char *)(*(_QWORD *)(a1 + 8) + 8);
              *(_QWORD *)(a1 + 8) = v122;
              --v42;
            }
            while (v42);
          }
          v137 = v122;
          if (*(char **)(a1 + 16) != v122)
          {
            v137 = *(char **)(a1 + 16);
            do
            {
              v137 -= 8;
              sub_1C6135314((void **)&v233, v137);
            }
            while (v137 != *(char **)(a1 + 8));
            v122 = *(char **)(a1 + 16);
          }
          v138 = *(char **)a1;
          v140 = v233;
          v139 = v234;
          *(_QWORD *)&v233 = *(_QWORD *)a1;
          *((_QWORD *)&v233 + 1) = v137;
          v141 = *(_QWORD *)(a1 + 24);
          v142 = *(_QWORD *)(a1 + 32);
          *(_OWORD *)a1 = v140;
          *(_OWORD *)(a1 + 16) = v139;
          *(_QWORD *)&v234 = v122;
          *((_QWORD *)&v234 + 1) = v141;
          *(_QWORD *)(a1 + 32) = v142 - v223;
          if (v122 != v137)
            *(_QWORD *)&v234 = &v122[(v137 - v122 + 7) & 0xFFFFFFFFFFFFFFF8];
          if (v138)
          {
            operator delete(v138);
            v8 = *(char **)(a1 + 16);
          }
          else
          {
            v8 = (char *)v139;
          }
        }
      }
      v4 = *(_QWORD *)(a1 + 40);
      v7 = *(char **)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 32) + v4;
      v6 = v5 >> 9;
      v14 = v225;
      j = v227;
      v23 = v229;
      v18 = v231;
    }
    v181 = &v7[8 * v6];
    if (v8 == v7)
      v182 = 0;
    else
      v182 = (char *)(*(_QWORD *)v181 + 8 * (v5 & 0x1FF));
    v183 = v4 - v23;
    if (v4 - v23 >= v18)
    {
      v185 = v182;
      v186 = &v7[8 * v6];
      if (!v18)
        return;
      goto LABEL_280;
    }
    if (v183 >= v18 >> 1)
    {
      v184 = v4 - v23 - v18 + ((uint64_t)&j[-*(_QWORD *)v16] >> 3);
      if (v184 >= 1)
      {
        v16 += 8 * ((unint64_t)v184 >> 9);
        goto LABEL_265;
      }
      v188 = 511 - v184;
      v189 = ~(_WORD)v188;
      v16 -= 8 * (v188 >> 9);
    }
    else
    {
      if (!v183)
      {
        v16 = v13;
        v187 = (uint64_t)v14;
        goto LABEL_270;
      }
      v184 = v183 + ((uint64_t)&v14[-*(_QWORD *)v13] >> 3);
      if (v184 >= 1)
      {
        v16 = &v13[8 * ((unint64_t)v184 >> 9)];
LABEL_265:
        v187 = *(_QWORD *)v16 + 8 * (v184 & 0x1FF);
        goto LABEL_270;
      }
      v190 = 511 - v184;
      v189 = ~(_WORD)v190;
      v16 = &v13[-8 * (v190 >> 9)];
    }
    v187 = *(_QWORD *)v16 + 8 * (v189 & 0x1FF);
LABEL_270:
    if ((char *)v187 == j)
    {
      v185 = v182;
      v186 = v181;
    }
    else
    {
      v191 = v16;
      v192 = (char *)v187;
      v186 = v181;
      v185 = v182;
      do
      {
        *v185++ = *(_QWORD *)v192;
        if ((_QWORD *)((char *)v185 - *(_QWORD *)v186) == (_QWORD *)4096)
        {
          v193 = (_QWORD *)*((_QWORD *)v186 + 1);
          v186 += 8;
          v185 = v193;
        }
        v192 += 8;
        if (&v192[-*(_QWORD *)v191] == (char *)4096)
        {
          v194 = (char *)*((_QWORD *)v191 + 1);
          v191 += 8;
          v192 = v194;
        }
        ++v4;
      }
      while (v192 != j);
      *(_QWORD *)(a1 + 40) = v4;
    }
    v18 = v183;
    j = (char *)v187;
    if (!v183)
      return;
LABEL_280:
    v195 = ((uint64_t)&v182[-*(_QWORD *)v181] >> 3) - v18;
    if (v195 < 1)
    {
      v198 = 511 - v195;
      v196 = (char **)&v181[-8 * (v198 >> 9)];
      v197 = &(*v196)[8 * (~(_WORD)v198 & 0x1FF)];
    }
    else
    {
      v196 = (char **)&v181[8 * ((unint64_t)v195 >> 9)];
      v197 = &(*v196)[8 * (v195 & 0x1FF)];
    }
    if (v197 != v182)
    {
      v199 = v196;
      v200 = v197;
      do
      {
        *v185++ = *(_QWORD *)v200;
        if ((_QWORD *)((char *)v185 - *(_QWORD *)v186) == (_QWORD *)4096)
        {
          v201 = (_QWORD *)*((_QWORD *)v186 + 1);
          v186 += 8;
          v185 = v201;
        }
        v200 += 8;
        if (v200 - *v199 == 4096)
        {
          v202 = v199[1];
          ++v199;
          v200 = v202;
        }
        ++v4;
      }
      while (v200 != v182);
      *(_QWORD *)(a1 + 40) = v4;
    }
    if (v18 < v183)
    {
      v203 = ((uint64_t)&v182[-*(_QWORD *)v181] >> 3) - v183;
      if (v203 < 1)
      {
        v206 = 511 - v203;
        v204 = (char **)&v181[-8 * (v206 >> 9)];
        v205 = &(*v204)[8 * (~(_WORD)v206 & 0x1FF)];
      }
      else
      {
        v204 = (char **)&v181[8 * ((unint64_t)v203 >> 9)];
        v205 = &(*v204)[8 * (v203 & 0x1FF)];
      }
      sub_1C51946F0((uint64_t)&v233, v204, v205, v196, v197, v181, v182);
      v182 = (char *)*((_QWORD *)&v234 + 1);
      v181 = (char *)v234;
    }
    if (v13 == v16)
    {
      v219 = v14;
      v218 = j;
      v220 = v181;
      v221 = v182;
    }
    else
    {
      v208 = *(char **)v16;
      v207 = v16 - 8;
      sub_1C4EB9D18(&v233, v208, j, v181, v182);
      v209 = (char *)*((_QWORD *)&v233 + 1);
      v210 = (char *)v234;
      if (v207 != v13)
      {
        v211 = (char *)**((_QWORD **)&v233 + 1);
        do
        {
          v212 = *(_BYTE **)v207;
          v213 = (char *)(*(_QWORD *)v207 + 4096);
          while (1)
          {
            v214 = v210 - v211;
            if ((v213 - v212) >> 3 >= v214 >> 3)
              v215 = v214 >> 3;
            else
              v215 = (v213 - v212) >> 3;
            v213 -= 8 * v215;
            v210 -= 8 * v215;
            if (v215)
              memmove(v210, v213, 8 * v215);
            if (v213 == v212)
              break;
            v216 = (char *)*((_QWORD *)v209 - 1);
            v209 -= 8;
            v211 = v216;
            v210 = v216 + 4096;
          }
          v211 = *(char **)v209;
          if ((char *)(*(_QWORD *)v209 + 4096) == v210)
          {
            v217 = (char *)*((_QWORD *)v209 + 1);
            v209 += 8;
            v211 = v217;
            v210 = v217;
          }
          v207 -= 8;
        }
        while (v207 != v13);
      }
      v218 = (char *)(*(_QWORD *)v13 + 4096);
      v219 = v14;
      v220 = v209;
      v221 = v210;
    }
    sub_1C4EB9D18(&v233, v219, v218, v220, v221);
    return;
  }
  v24 = v18 - v3;
  if (v18 <= v3)
    goto LABEL_202;
  v228 = v23;
  v230 = v18;
  v25 = (v21 << 6) - 1;
  v26 = v8 - v7;
  if (v8 == v7)
  {
    v25 = 0;
    ++v24;
  }
  if ((v24 & 0x1FF) != 0)
    v27 = (v24 >> 9) + 1;
  else
    v27 = v24 >> 9;
  v28 = v25 - v5;
  if (v27 >= v28 >> 9)
    v29 = v28 >> 9;
  else
    v29 = v27;
  if (v27 > v28 >> 9)
  {
    v226 = j;
    v30 = v27 - v29;
    v31 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
    if (v27 - v29 <= (v31 >> 3) - (v26 >> 3))
    {
      if (v30)
      {
        if (v7 == *(char **)a1)
        {
LABEL_85:
          v70 = v30;
          do
          {
            *(_QWORD *)&v233 = operator new(0x1000uLL);
            sub_1C61351F0(a1, &v233);
            --v70;
          }
          while (v70);
          v29 += v30;
          v3 = *(_QWORD *)(a1 + 32);
        }
        else
        {
          while (1)
          {
            *(_QWORD *)&v233 = operator new(0x1000uLL);
            sub_1C6135314((void **)a1, &v233);
            v68 = *(_QWORD *)(a1 + 8);
            v69 = *(_QWORD *)(a1 + 16) - v68 == 8 ? 511 : 512;
            v3 = v69 + *(_QWORD *)(a1 + 32);
            *(_QWORD *)(a1 + 32) = v3;
            if (!--v30)
              break;
            if (v68 == *(_QWORD *)a1)
              goto LABEL_85;
          }
        }
      }
      *(_QWORD *)(a1 + 32) = v3 + (v29 << 9);
      for (j = v226; v29; --v29)
      {
        v71 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)&v233 = *(_QWORD *)(v71 - 8);
        *(_QWORD *)(a1 + 16) = v71 - 8;
        sub_1C6135314((void **)a1, &v233);
      }
      goto LABEL_201;
    }
    v224 = v14;
    v32 = v8 == v7;
    if (v31 >> 2 <= v30 + (v26 >> 3))
      v33 = v30 + (v26 >> 3);
    else
      v33 = v31 >> 2;
    v235 = a1 + 24;
    if (!v33)
    {
      v34 = 0;
LABEL_123:
      v222 = (v27 << 9) - v32;
      *(_QWORD *)&v233 = v34;
      *((_QWORD *)&v233 + 1) = v34;
      *(_QWORD *)&v234 = v34;
      *((_QWORD *)&v234 + 1) = &v34[8 * v33];
      do
      {
        v232 = (void ***)operator new(0x1000uLL);
        sub_1C61351F0((uint64_t)&v233, &v232);
        --v30;
      }
      while (v30);
      v92 = *(_QWORD *)(a1 + 16);
      for (k = (char *)v234; v29; --v29)
      {
        if (k == *((char **)&v234 + 1))
        {
          v94 = (char *)*((_QWORD *)&v233 + 1);
          v95 = (void *)v233;
          if (*((_QWORD *)&v233 + 1) <= (unint64_t)v233)
          {
            if (k == (char *)v233)
              v101 = 1;
            else
              v101 = (uint64_t)&k[-v233] >> 2;
            if (v101 >> 61)
              goto LABEL_314;
            v102 = (char *)operator new(8 * v101);
            v103 = k - v94;
            v63 = k == v94;
            k = &v102[8 * (v101 >> 2)];
            if (!v63)
            {
              k = &v102[8 * (v101 >> 2) + (v103 & 0xFFFFFFFFFFFFFFF8)];
              v104 = 8 * (v103 >> 3);
              v105 = &v102[8 * (v101 >> 2)];
              do
              {
                v106 = *(_QWORD *)v94;
                v94 += 8;
                *(_QWORD *)v105 = v106;
                v105 += 8;
                v104 -= 8;
              }
              while (v104);
            }
            *(_QWORD *)&v233 = v102;
            *((_QWORD *)&v233 + 1) = &v102[8 * (v101 >> 2)];
            *(_QWORD *)&v234 = k;
            *((_QWORD *)&v234 + 1) = &v102[8 * v101];
            if (v95)
            {
              operator delete(v95);
              k = (char *)v234;
            }
          }
          else
          {
            v96 = (uint64_t)(*((_QWORD *)&v233 + 1) - v233) >> 3;
            if (v96 >= -1)
              v97 = v96 + 1;
            else
              v97 = v96 + 2;
            v98 = *((_QWORD *)&v233 + 1) - 8 * (v97 >> 1);
            v99 = &k[-*((_QWORD *)&v233 + 1)];
            if (k != *((char **)&v233 + 1))
            {
              memmove((void *)(*((_QWORD *)&v233 + 1) - 8 * (v97 >> 1)), *((const void **)&v233 + 1), (size_t)&k[-*((_QWORD *)&v233 + 1)]);
              k = (char *)*((_QWORD *)&v233 + 1);
            }
            v100 = &k[-8 * (v97 >> 1)];
            k = &v99[v98];
            *((_QWORD *)&v233 + 1) = v100;
            *(_QWORD *)&v234 = &v99[v98];
          }
        }
        *(_QWORD *)k = *(_QWORD *)(v92 - 8);
        k = (char *)(v234 + 8);
        *(_QWORD *)&v234 = v234 + 8;
        v92 = *(_QWORD *)(a1 + 16) - 8;
        *(_QWORD *)(a1 + 16) = v92;
      }
      v107 = *(uint64_t **)(a1 + 8);
      if (v107 == (uint64_t *)v92)
      {
        v107 = (uint64_t *)v92;
      }
      else
      {
        do
        {
          if (k == *((char **)&v234 + 1))
          {
            v108 = (char *)*((_QWORD *)&v233 + 1);
            v109 = (void *)v233;
            if (*((_QWORD *)&v233 + 1) <= (unint64_t)v233)
            {
              if (k == (char *)v233)
                v115 = 1;
              else
                v115 = (uint64_t)&k[-v233] >> 2;
              if (v115 >> 61)
                goto LABEL_314;
              v116 = (char *)operator new(8 * v115);
              v117 = k - v108;
              v63 = k == v108;
              k = &v116[8 * (v115 >> 2)];
              if (!v63)
              {
                k = &v116[8 * (v115 >> 2) + (v117 & 0xFFFFFFFFFFFFFFF8)];
                v118 = 8 * (v117 >> 3);
                v119 = &v116[8 * (v115 >> 2)];
                do
                {
                  v120 = *(_QWORD *)v108;
                  v108 += 8;
                  *(_QWORD *)v119 = v120;
                  v119 += 8;
                  v118 -= 8;
                }
                while (v118);
              }
              *(_QWORD *)&v233 = v116;
              *((_QWORD *)&v233 + 1) = &v116[8 * (v115 >> 2)];
              *(_QWORD *)&v234 = k;
              *((_QWORD *)&v234 + 1) = &v116[8 * v115];
              if (v109)
              {
                operator delete(v109);
                k = (char *)v234;
              }
            }
            else
            {
              v110 = (uint64_t)(*((_QWORD *)&v233 + 1) - v233) >> 3;
              if (v110 >= -1)
                v111 = v110 + 1;
              else
                v111 = v110 + 2;
              v112 = *((_QWORD *)&v233 + 1) - 8 * (v111 >> 1);
              v113 = &k[-*((_QWORD *)&v233 + 1)];
              if (k != *((char **)&v233 + 1))
              {
                memmove((void *)(*((_QWORD *)&v233 + 1) - 8 * (v111 >> 1)), *((const void **)&v233 + 1), (size_t)&k[-*((_QWORD *)&v233 + 1)]);
                k = (char *)*((_QWORD *)&v233 + 1);
              }
              v114 = &k[-8 * (v111 >> 1)];
              k = &v113[v112];
              *((_QWORD *)&v233 + 1) = v114;
              *(_QWORD *)&v234 = &v113[v112];
            }
          }
          v121 = *v107++;
          *(_QWORD *)k = v121;
          k = (char *)(v234 + 8);
          *(_QWORD *)&v234 = v234 + 8;
        }
        while (v107 != *(uint64_t **)(a1 + 16));
        v92 = *(_QWORD *)(a1 + 8);
      }
      v143 = *((_QWORD *)&v234 + 1);
      v144 = *(_QWORD *)(a1 + 24);
      v145 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 16) = k;
      *(_QWORD *)(a1 + 24) = v143;
      v146 = *(char **)a1;
      *(_OWORD *)a1 = v233;
      *(_QWORD *)&v233 = v146;
      *((_QWORD *)&v233 + 1) = v92;
      *(_QWORD *)&v234 = v107;
      *((_QWORD *)&v234 + 1) = v144;
      v14 = v224;
      *(_QWORD *)(a1 + 32) = v222 + v145;
      if (v107 != (uint64_t *)v92)
        *(_QWORD *)&v234 = (char *)v107 + ((v92 - (_QWORD)v107 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v146)
        operator delete(v146);
      j = v226;
      goto LABEL_201;
    }
    if (!(v33 >> 61))
    {
      v34 = (char *)operator new(8 * v33);
      goto LABEL_123;
    }
LABEL_314:
    sub_1C4764EE4();
  }
  for (*(_QWORD *)(a1 + 32) = v3 + (v29 << 9); v29; --v29)
  {
    v49 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)&v233 = *(_QWORD *)(v49 - 8);
    *(_QWORD *)(a1 + 16) = v49 - 8;
    sub_1C6135314((void **)a1, &v233);
  }
LABEL_201:
  v3 = *(_QWORD *)(a1 + 32);
  v7 = *(char **)(a1 + 8);
  v8 = *(char **)(a1 + 16);
  v19 = v3 >> 9;
  v23 = v228;
  v18 = v230;
LABEL_202:
  v147 = &v7[8 * v19];
  if (v8 == v7)
    v148 = 0;
  else
    v148 = *(_QWORD *)v147 + 8 * (v3 & 0x1FF);
  if (v18 <= v23)
  {
    v150 = v148;
    v151 = v147;
    if (!v18)
      return;
    goto LABEL_229;
  }
  if (v23 >= v18 >> 1)
  {
    v149 = v18 - v23 + ((uint64_t)&v14[-*(_QWORD *)v13] >> 3);
    if (v149 >= 1)
    {
      v13 += 8 * ((unint64_t)v149 >> 9);
      goto LABEL_214;
    }
    v153 = 511 - v149;
    v154 = ~(_WORD)v153;
    v13 -= 8 * (v153 >> 9);
  }
  else
  {
    if (!v23)
    {
      v13 = v16;
      v152 = (uint64_t)j;
      goto LABEL_219;
    }
    v149 = ((uint64_t)&j[-*(_QWORD *)v16] >> 3) - v23;
    if (v149 >= 1)
    {
      v13 = &v16[8 * ((unint64_t)v149 >> 9)];
LABEL_214:
      v152 = *(_QWORD *)v13 + 8 * (v149 & 0x1FF);
      goto LABEL_219;
    }
    v155 = 511 - v149;
    v154 = ~(_WORD)v155;
    v13 = &v16[-8 * (v155 >> 9)];
  }
  v152 = *(_QWORD *)v13 + 8 * (v154 & 0x1FF);
LABEL_219:
  if ((char *)v152 == v14)
  {
    v150 = v148;
    v151 = v147;
  }
  else
  {
    v156 = *(_QWORD *)(a1 + 40);
    v157 = v13;
    v158 = (char *)v152;
    v151 = v147;
    v150 = v148;
    do
    {
      if (v150 == *(_QWORD *)v151)
      {
        v159 = *((_QWORD *)v151 - 1);
        v151 -= 8;
        v150 = v159 + 4096;
      }
      if (v158 == *(char **)v157)
      {
        v160 = *((_QWORD *)v157 - 1);
        v157 -= 8;
        v158 = (char *)(v160 + 4096);
      }
      v161 = *((_QWORD *)v158 - 1);
      v158 -= 8;
      *(_QWORD *)(v150 - 8) = v161;
      v150 -= 8;
      --v3;
      ++v156;
    }
    while (v158 != v14);
    *(_QWORD *)(a1 + 32) = v3;
    *(_QWORD *)(a1 + 40) = v156;
  }
  v18 = v23;
  v14 = (char *)v152;
  if (v23)
  {
LABEL_229:
    v162 = v18 + ((v148 - *(_QWORD *)v147) >> 3);
    if (v162 < 1)
    {
      v165 = 511 - v162;
      v163 = &v147[-8 * (v165 >> 9)];
      v164 = (_BYTE *)(*(_QWORD *)v163 + 8 * (~(_WORD)v165 & 0x1FF));
    }
    else
    {
      v163 = &v147[8 * ((unint64_t)v162 >> 9)];
      v164 = (_BYTE *)(*(_QWORD *)v163 + 8 * (v162 & 0x1FF));
    }
    if (v164 != (_BYTE *)v148)
    {
      v166 = *(_QWORD *)(a1 + 40);
      v167 = v163;
      v168 = v164;
      do
      {
        if (v150 == *(_QWORD *)v151)
        {
          v169 = *((_QWORD *)v151 - 1);
          v151 -= 8;
          v150 = v169 + 4096;
        }
        if (v168 == *(_BYTE **)v167)
        {
          v170 = *((_QWORD *)v167 - 1);
          v167 -= 8;
          v168 = (_BYTE *)(v170 + 4096);
        }
        v171 = *((_QWORD *)v168 - 1);
        v168 -= 8;
        *(_QWORD *)(v150 - 8) = v171;
        v150 -= 8;
        --v3;
        ++v166;
      }
      while (v168 != (_BYTE *)v148);
      *(_QWORD *)(a1 + 32) = v3;
      *(_QWORD *)(a1 + 40) = v166;
    }
    if (v18 < v23)
    {
      v172 = v23 + ((v148 - *(_QWORD *)v147) >> 3);
      if (v172 < 1)
      {
        v175 = 511 - v172;
        v173 = &v147[-8 * (v175 >> 9)];
        v174 = (_BYTE *)(*(_QWORD *)v173 + 8 * (~(_WORD)v175 & 0x1FF));
      }
      else
      {
        v173 = &v147[8 * ((unint64_t)v172 >> 9)];
        v174 = (_BYTE *)(*(_QWORD *)v173 + 8 * (v172 & 0x1FF));
      }
      *(_QWORD *)&v233 = v147;
      *((_QWORD *)&v233 + 1) = v148;
      sub_1C5194838(v163, v164, (_BYTE **)v173, v174, (void ***)&v233);
      v148 = *((_QWORD *)&v233 + 1);
      v147 = (char *)v233;
    }
    *(_QWORD *)&v233 = v147;
    *((_QWORD *)&v233 + 1) = v148;
    v232 = (void ***)&v233;
    if (v16 != v13)
    {
      v177 = *(_QWORD *)v13;
      v176 = v13 + 8;
      v178 = (_BYTE *)(v177 + 4096);
      v179 = v14;
      while (1)
      {
        sub_1C4EBA3AC(&v232, v179, v178);
        if (v176 == v16)
          break;
        v180 = *(char **)v176;
        v176 += 8;
        v179 = v180;
        v178 = v180 + 4096;
      }
      v14 = *(char **)v16;
    }
    sub_1C4EBA3AC(&v232, v14, j);
  }
}

_QWORD *sub_1C5190E2C(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (_QWORD *)a1[43];
  if (v2 != a1 + 45)
    free(v2);
  v3 = (void *)a1[40];
  if (v3)
  {
    a1[41] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[37];
  if (v4)
  {
    a1[38] = v4;
    operator delete(v4);
  }
  v5 = (_QWORD *)a1[3];
  if (v5 != a1 + 5)
    free(v5);
  return a1;
}

uint64_t sub_1C5190EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C4DFE394((_QWORD *)(a1 + 8), *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a5 + 8);
  *(_DWORD *)(a5 + 8) = 0;
  v9 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a5 + 12);
  *(_DWORD *)(a5 + 12) = v9;
  v10 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a5 + 16);
  *(_DWORD *)(a5 + 16) = v10;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)a6;
  *(_QWORD *)a6 = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a6 + 8);
  *(_DWORD *)(a6 + 8) = 0;
  v11 = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a6 + 12);
  *(_DWORD *)(a6 + 12) = v11;
  v12 = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a6 + 16);
  *(_DWORD *)(a6 + 16) = v12;
  *(_DWORD *)(a1 + 80) = 0;
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(unsigned int *)(a1 + 72);
  v15 = v13 + 16 * v14;
  if (*(_DWORD *)(a1 + 64))
  {
    if ((_DWORD)v14)
    {
      v16 = 16 * v14;
      v17 = *(_QWORD *)(a1 + 56);
      while ((*(_QWORD *)v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v17 += 16;
        v16 -= 16;
        if (!v16)
          goto LABEL_6;
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 56);
    }
  }
  else
  {
LABEL_6:
    v17 = v13 + 16 * v14;
  }
  v18 = v13 + 16 * v14;
  if (v17 == v18)
  {
    v21 = 1;
  }
  else
  {
    v19 = 0;
    do
    {
      if (v19 <= *(_DWORD *)(v17 + 8))
        v19 = *(_DWORD *)(v17 + 8);
      *(_DWORD *)(a1 + 80) = v19;
      v20 = v17 + 16;
      v17 = v15;
      if (v20 != v15)
      {
        v17 = v20;
        while ((*(_QWORD *)v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v17 += 16;
          if (v17 == v15)
          {
            v17 = v15;
            break;
          }
        }
      }
    }
    while (v17 != v18);
    v21 = v19 + 1;
  }
  *(_DWORD *)(a1 + 80) = v21;
  return a1;
}

void sub_1C5191028(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v4 - 6);
        if (v4 - 32 != v6)
          free(v6);
        v4 -= 56;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_1C51910A4(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_13:
    v6 = sub_1C5191160(a1, (uint64_t)a2, a2, v12);
    *v6 = *a2;
    *((_DWORD *)v6 + 2) = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = (37 * *a2) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_13;
  }
  return v6;
}

_QWORD *sub_1C5191160(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C51912D4(a1, 2 * v7);
    v8 = *a3;
    v10 = *(_DWORD *)(a1 + 16) - 1;
    v11 = (37 * *a3) & v10;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
    v12 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v14 = 1;
      while (v12 != -1)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -2;
        if (v15)
          v13 = a4;
        v16 = v11 + v14++;
        v11 = v16 & v10;
        a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
        v12 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      v8 = *a4;
      goto LABEL_4;
    }
    sub_1C51912D4(a1, v7);
    v8 = *a3;
    v17 = *(_DWORD *)(a1 + 16) - 1;
    v18 = (37 * *a3) & v17;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v18);
    v19 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v20 = 1;
      while (v19 != -1)
      {
        if (v13)
          v21 = 0;
        else
          v21 = v19 == -2;
        if (v21)
          v13 = a4;
        v22 = v18 + v20++;
        v18 = v22 & v17;
        a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v18);
        v19 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
LABEL_27:
      if (v13)
        a4 = v13;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C51912D4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C519138C(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -1;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C519138C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(_QWORD **)result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    v6 = *(_QWORD **)result;
    do
    {
      *v6 = -1;
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    v7 = *a2;
    if ((unint64_t)*a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v8 = *(_DWORD *)(result + 16) - 1;
      v9 = v8 & (37 * v7);
      v10 = &v3[2 * v9];
      v11 = *v10;
      if (v7 != *v10)
      {
        v12 = 0;
        v13 = 1;
        while (v11 != -1)
        {
          if (v12)
            v14 = 0;
          else
            v14 = v11 == -2;
          if (v14)
            v12 = v10;
          v15 = v9 + v13++;
          v9 = v15 & v8;
          v10 = &v3[2 * (v15 & v8)];
          v11 = *v10;
          if (v7 == *v10)
            goto LABEL_7;
        }
        if (v12)
          v10 = v12;
      }
LABEL_7:
      *v10 = v7;
      *((_DWORD *)v10 + 2) = *((_DWORD *)a2 + 2);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t sub_1C5191464(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  int *v17;
  int *v18;
  int v19;
  unint64_t v20;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD v26[5];

  v26[4] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v6 = 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 4);
  *(_QWORD *)(a1 + 56) = a1 + 72;
  *(_QWORD *)(a1 + 64) = 0x600000000;
  sub_1C4765AA4((char *)(a1 + 56), (v6 + 63) >> 6, 0);
  *(_DWORD *)(a1 + 120) = v6;
  v7 = 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 4);
  v22 = v26;
  v23 = (uint64_t)v26;
  v24 = 4;
  v25 = 0;
  *(_QWORD *)(a1 + 128) = a1 + 144;
  *(_QWORD *)(a1 + 136) = 0xA00000000;
  sub_1C5191690(a1 + 128, v7, (llvm::SmallPtrSetImplBase *)&v22);
  if ((void *)v23 != v22)
    free((void *)v23);
  v8 = 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 4);
  v22 = &v24;
  v23 = 0x400000000;
  *(_QWORD *)(a1 + 784) = a1 + 800;
  *(_QWORD *)(a1 + 792) = 0x1000000000;
  sub_1C5191820(a1 + 784, v8, (uint64_t)&v22);
  if (v22 != &v24)
    free(v22);
  v9 = (_QWORD *)operator new();
  v11 = *a2;
  v10 = a2[1];
  v9[1] = 0;
  v9[2] = 0;
  *v9 = 0;
  v12 = v10 - v11;
  if (v12)
  {
    v13 = 0xF0F0F0F0F0F0F0F1 * (v12 >> 4);
    if (v13 >> 62)
      goto LABEL_14;
    v14 = 0xC3C3C3C3C3C3C3C4 * (v12 >> 4);
    v15 = (char *)operator new(v14);
    *v9 = v15;
    v16 = &v15[4 * v13];
    v9[2] = v16;
    bzero(v15, v14);
    v9[1] = v16;
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  *(_QWORD *)(a1 + 1312) = v9;
  v17 = *(int **)(a3 + 296);
  v18 = *(int **)(a3 + 304);
  if (v17 != v18)
  {
    v19 = 0;
    while (1)
    {
      v20 = *v17;
      if ((v16 - v15) >> 2 <= v20)
        break;
      *(_DWORD *)&v15[4 * v20] = v19++;
      if (++v17 == v18)
        return a1;
    }
LABEL_14:
    abort();
  }
  return a1;
}

void sub_1C5191690(uint64_t a1, unint64_t a2, llvm::SmallPtrSetImplBase *a3)
{
  unint64_t v6;
  unint64_t v7;
  llvm::SmallPtrSetImplBase *v8;
  unint64_t v9;
  uint64_t v10;
  const void *v11;
  void *v12;
  const void *v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v18;
  void **v19;
  unint64_t v20;
  void *v21;

  if (*(unsigned int *)(a1 + 12) < a2)
  {
    sub_1C61F7EAC(a1, a2, a3);
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= a2)
      v7 = a2;
    else
      v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      v8 = *(llvm::SmallPtrSetImplBase **)a1;
      do
      {
        if (v8 != a3)
          llvm::SmallPtrSetImplBase::CopyFrom(v8, a3);
        v8 = (llvm::SmallPtrSetImplBase *)((char *)v8 + 64);
        --v7;
      }
      while (v7);
      v6 = *(unsigned int *)(a1 + 8);
    }
    v9 = v6 - a2;
    if (v6 >= a2)
    {
      if (v6 > a2)
      {
        v19 = (void **)(*(_QWORD *)a1 + (v6 << 6) - 64);
        v20 = (a2 << 6) - (v6 << 6);
        do
        {
          v21 = v19[1];
          if (v21 != *v19)
            free(v21);
          v19 -= 8;
          v20 += 64;
        }
        while (v20);
      }
    }
    else
    {
      v10 = *(_QWORD *)a1 + (v6 << 6) + 32;
      do
      {
        *(_QWORD *)(v10 - 32) = v10;
        v11 = (const void *)*((_QWORD *)a3 + 1);
        if (v11 == *(const void **)a3)
        {
          *(_QWORD *)(v10 - 24) = v10;
          v12 = (void *)v10;
        }
        else
        {
          v18 = *((unsigned int *)a3 + 4);
          v12 = malloc_type_malloc(8 * v18, 0x4065EBACuLL);
          if (!v12 && ((_DWORD)v18 || (v12 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
            llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
          *(_QWORD *)(v10 - 24) = v12;
          v11 = *(const void **)a3;
        }
        *(_DWORD *)(v10 - 16) = *((_DWORD *)a3 + 4);
        v13 = (const void *)*((_QWORD *)a3 + 1);
        v14 = *((_DWORD *)a3 + 5);
        if (v13 == v11)
          v15 = *((_DWORD *)a3 + 5);
        else
          v15 = *((_DWORD *)a3 + 4);
        if (v15)
        {
          memmove(v12, v13, 8 * v15);
          v14 = *((_DWORD *)a3 + 5);
        }
        v16 = *((_DWORD *)a3 + 6);
        *(_DWORD *)(v10 - 12) = v14;
        *(_DWORD *)(v10 - 8) = v16;
        v10 += 64;
      }
      while (!__CFADD__(v9++, 1));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

void sub_1C5191820(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  if (*(unsigned int *)(a1 + 12) >= a2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= a2)
      v7 = a2;
    else
      v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)a1;
      do
      {
        sub_1C614CA14(v8, a3);
        v8 += 32;
        --v7;
      }
      while (v7);
      v6 = *(unsigned int *)(a1 + 8);
    }
    v9 = v6 - a2;
    if (v6 >= a2)
    {
      if (v6 > a2)
      {
        v12 = *(_QWORD *)a1 + 32 * v6 - 16;
        v13 = 32 * a2 - 32 * v6;
        do
        {
          v14 = *(void **)(v12 - 16);
          if ((void *)v12 != v14)
            free(v14);
          v12 -= 32;
          v13 += 32;
        }
        while (v13);
      }
    }
    else
    {
      v10 = (_QWORD *)(*(_QWORD *)a1 + 32 * v6);
      do
      {
        *v10 = v10 + 2;
        v10[1] = 0x400000000;
        if (*(_DWORD *)(a3 + 8))
          sub_1C614CA14((uint64_t)v10, a3);
        v10 += 4;
      }
      while (!__CFADD__(v9++, 1));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
  else
  {
    sub_1C5191948(a1, a2, a3);
  }
}

_QWORD *sub_1C5191948(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;

  v20 = 0;
  result = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 32, &v20);
  if (a2)
  {
    v7 = 0x400000000;
    v8 = result;
    v9 = a2;
    do
    {
      *v8 = v8 + 2;
      v8[1] = v7;
      if (*(_DWORD *)(a3 + 8))
      {
        v16 = v9;
        v17 = result;
        v15 = v7;
        sub_1C614CA14((uint64_t)v8, a3);
        v9 = v16;
        result = v17;
        v7 = v15;
      }
      v8 += 4;
      --v9;
    }
    while (v9);
  }
  v10 = *(char **)a1;
  v11 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v11)
  {
    v18 = result;
    v13 = 32 * v11;
    do
    {
      v14 = *(char **)&v10[v13 - 32];
      if (&v10[v13 - 16] != v14)
        free(v14);
      v13 -= 32;
    }
    while (v13);
    v10 = *(char **)a1;
    result = v18;
  }
  v12 = v20;
  if (v10 != (char *)(a1 + 16))
  {
    v19 = result;
    free(v10);
    result = v19;
  }
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = v12;
  return result;
}

char **sub_1C5191A4C(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 32 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 32];
      if (&v2[v4 - 16] != v5)
        free(v5);
      v4 -= 32;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C5191AC4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = result;
  v2 = *(unsigned int *)(result + 16);
  v3 = *(_DWORD *)(result + 8);
  if ((_DWORD)v2)
  {
    v4 = 56 * v2;
    result = *(_QWORD *)result + 8;
    do
    {
      if ((*(_DWORD *)(result - 8) - 0x7FFFFFFF) >= 2)
        result = sub_1C484143C(result);
      result += 56;
      v4 -= 56;
    }
    while (v4);
  }
  v5 = 1 << (33 - __clz(v3 - 1));
  if (v5 <= 64)
    v5 = 64;
  if (v3)
    v6 = v5;
  else
    v6 = 0;
  if ((_DWORD)v6 == *(_DWORD *)(v1 + 16))
  {
    *(_QWORD *)(v1 + 8) = 0;
    if ((_DWORD)v6)
    {
      v7 = *(_DWORD **)v1;
      v8 = 56 * v6;
      do
      {
        *v7 = 0x7FFFFFFF;
        v7 += 14;
        v8 -= 56;
      }
      while (v8);
    }
  }
  else
  {
    result = MEMORY[0x1CAA32FB4](*(_QWORD *)v1, 8);
    if ((_DWORD)v6)
    {
      v9 = (4 * (int)v6 / 3u + 1) | ((unint64_t)(4 * (int)v6 / 3u + 1) >> 1);
      v10 = v9 | (v9 >> 2) | ((v9 | (v9 >> 2)) >> 4);
      LODWORD(v10) = (((v10 | (v10 >> 8)) >> 16) | v10 | (v10 >> 8)) + 1;
      *(_DWORD *)(v1 + 16) = v10;
      result = (uint64_t)operator new(56 * v10, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *(_QWORD *)(v1 + 8) = 0;
      v11 = *(unsigned int *)(v1 + 16);
      if ((_DWORD)v11)
      {
        v12 = 56 * v11;
        do
        {
          *(_DWORD *)result = 0x7FFFFFFF;
          result += 56;
          v12 -= 56;
        }
        while (v12);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
      *(_DWORD *)(v1 + 16) = 0;
    }
  }
  return result;
}

_DWORD *sub_1C5191C10(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61F8394(a1, v4, v4 + 56 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 56 * v10;
    do
    {
      *result = 0x7FFFFFFF;
      result += 14;
      v11 -= 56;
    }
    while (v11);
  }
  return result;
}

__n128 sub_1C5191CD4(uint64_t a1, char *__s, __n128 *a3, _WORD *a4, _DWORD **a5)
{
  size_t v10;
  __n128 result;
  _DWORD *v12;

  v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)__s, v10);
  result = *a3;
  *(__n128 *)(a1 + 32) = *a3;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  v12 = *a5;
  *(_DWORD *)(a1 + 128) = **a5;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = *v12;
  return result;
}

void sub_1C5191D6C(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unsigned __int32 v7;
  unsigned __int32 v8;
  BOOL v9;
  unsigned __int32 v10;
  unsigned __int32 v11;
  unint64_t v12;
  _QWORD *v14;
  unint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  int v29;
  int v30;
  __n128 v31;
  __n128 v32;
  void **v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  unsigned __int32 v37;
  unsigned int v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  void *v43;
  __n128 v44;
  __n128 v45;
  signed __int32 v46;
  signed __int32 v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  BOOL v54;
  unsigned int v55;
  int v56;
  int v57;
  __int128 v58;
  __int128 v59;
  unsigned int v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  unsigned __int32 v72;
  unint64_t v73;
  __n128 v74;
  __n128 v75;
  unint64_t v76;
  __int128 v77;
  __int128 v78;
  void *v79;
  __n128 v80;
  __n128 *v81;
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  __int128 v86;
  uint64_t v87;
  __n128 v88;
  __n128 v89;
  unsigned __int32 v90;

  if (a3 < 2)
    return;
  v6 = a1;
  if (a3 == 2)
  {
    v7 = a2[-3].n128_u32[3];
    v8 = *(_DWORD *)(a1 + 52);
    v9 = v7 > v8;
    if (v7 == v8)
    {
      v10 = a2[-2].n128_u32[2];
      if (v10)
      {
        v11 = *(_DWORD *)(a1 + 64);
        if (v11)
        {
          if (v10 != v11)
          {
            if (v10 >= v11)
              return;
LABEL_88:
            v71 = *(_QWORD *)a1;
            *(_QWORD *)a1 = 0;
            v72 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = 0;
            v73 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)&v86 = v73;
            v74 = *(__n128 *)(a1 + 48);
            v82 = *(__n128 *)(a1 + 32);
            *((_QWORD *)&v86 + 1) = *(_QWORD *)(a1 + 32);
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)(a1 + 40) = 0;
            v75 = *(__n128 *)(a1 + 64);
            v88 = v74;
            v89 = v75;
            v90 = *(_DWORD *)(a1 + 80);
            v76 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;
            sub_1C6182300(a1, (uint64_t)&a2[-6].n128_i64[1]);
            sub_1C6184574(v6 + 24, a2 - 4);
            v77 = *(__int128 *)((char *)&a2[-3] + 8);
            v78 = *(__int128 *)((char *)&a2[-2] + 8);
            *(_DWORD *)(v6 + 80) = a2[-1].n128_u32[2];
            *(_OWORD *)(v6 + 48) = v77;
            *(_OWORD *)(v6 + 64) = v78;
            MEMORY[0x1CAA32FB4](a2[-6].n128_u64[1], 8);
            a2[-6].n128_u64[1] = v71;
            v83 = 0;
            a2[-5].n128_u64[0] = v76;
            v84 = 0;
            a2[-5].n128_u32[2] = v72;
            v85 = 0;
            v79 = (void *)a2[-4].n128_u64[0];
            if (v79)
            {
              a2[-4].n128_u64[1] = (unint64_t)v79;
              operator delete(v79);
            }
            a2[-4].n128_u64[0] = v73;
            *(__n128 *)((char *)a2 - 56) = v82;
            v87 = 0;
            v86 = 0uLL;
            v80 = v89;
            *(__n128 *)((char *)a2 - 40) = v88;
            *(__n128 *)((char *)a2 - 24) = v80;
            a2[-1].n128_u32[2] = v90;
            sub_1C6176BF8(&v83);
            return;
          }
        }
      }
      v46 = a2[-2].n128_i32[0];
      v47 = *(_DWORD *)(a1 + 56);
      if (v46 != v47)
      {
        if (v46 >= v47)
          return;
        goto LABEL_88;
      }
      v9 = a2[-2].n128_u32[1] > *(_DWORD *)(a1 + 60);
    }
    if (!v9)
      return;
    goto LABEL_88;
  }
  v12 = a3;
  if ((uint64_t)a3 <= 0)
  {
    if ((__n128 *)a1 == a2)
      return;
    v18 = a1 + 88;
    if ((__n128 *)(a1 + 88) == a2)
      return;
    v19 = 0;
    v20 = &v88;
    v21 = a1;
    while (1)
    {
      v22 = v21;
      v21 = v18;
      v23 = *(_DWORD *)(v22 + 140);
      v24 = *(_DWORD *)(v22 + 52);
      v25 = v23 > v24;
      if (v23 == v24)
      {
        v26 = *(_DWORD *)(v22 + 152);
        if (v26)
        {
          v27 = *(_DWORD *)(v22 + 64);
          if (v27 && v26 != v27)
          {
            if (v26 >= v27)
              goto LABEL_54;
            goto LABEL_30;
          }
        }
        v29 = *(_DWORD *)(v22 + 144);
        v30 = *(_DWORD *)(v22 + 56);
        if (v29 != v30)
        {
          if (v29 >= v30)
            goto LABEL_54;
          goto LABEL_30;
        }
        v25 = *(_DWORD *)(v22 + 148) > *(_DWORD *)(v22 + 60);
      }
      if (!v25)
        goto LABEL_54;
LABEL_30:
      v83 = *(_QWORD *)(v22 + 88);
      v84 = *(_QWORD *)(v22 + 96);
      *(_QWORD *)(v22 + 88) = 0;
      *(_QWORD *)(v22 + 96) = 0;
      v85 = *(_DWORD *)(v22 + 104);
      *(_DWORD *)(v22 + 104) = 0;
      v86 = *(_OWORD *)(v22 + 112);
      v87 = *(_QWORD *)(v22 + 128);
      *(_QWORD *)(v22 + 112) = 0;
      *(_QWORD *)(v22 + 120) = 0;
      *(_QWORD *)(v22 + 128) = 0;
      v31 = *(__n128 *)(v22 + 136);
      v32 = *(__n128 *)(v22 + 152);
      v20[2].n128_u32[0] = *(_DWORD *)(v22 + 168);
      *v20 = v31;
      v20[1] = v32;
      sub_1C6182300(v21, v22);
      v33 = (void **)(v22 + 24);
      sub_1C6184574(v21 + 24, (__n128 *)(v22 + 24));
      v34 = v22 + 48;
      v35 = *(_OWORD *)(v22 + 64);
      *(_OWORD *)(v21 + 48) = *(_OWORD *)(v22 + 48);
      *(_OWORD *)(v21 + 64) = v35;
      *(_DWORD *)(v21 + 80) = *(_DWORD *)(v22 + 80);
      if (v22 == v6)
      {
        v22 = v6;
      }
      else
      {
        v81 = v20;
        v36 = v19;
        do
        {
          v37 = *(_DWORD *)(v6 + v36 - 36);
          if (v88.n128_u32[1] == v37)
          {
            if (!v89.n128_u32[0]
              || ((v38 = *(_DWORD *)(v6 + v36 - 24)) != 0 ? (v39 = v89.n128_u32[0] == v38) : (v39 = 1), v39))
            {
              v40 = *(_DWORD *)(v6 + v36 - 32);
              if (v88.n128_u32[2] == v40)
              {
                if (v88.n128_u32[3] <= *(_DWORD *)(v6 + v36 - 28))
                  goto LABEL_50;
              }
              else if (v88.n128_i32[2] >= v40)
              {
                goto LABEL_50;
              }
            }
            else if (v89.n128_u32[0] >= v38)
            {
              goto LABEL_50;
            }
          }
          else if (v88.n128_u32[1] <= v37)
          {
            v22 = v6 + v36;
            v34 = v6 + v36 + 48;
            v33 = (void **)(v6 + v36 + 24);
            goto LABEL_50;
          }
          sub_1C6182300(v6 + v36, v6 + v36 - 88);
          v41 = v6 + v36;
          v33 = (void **)(v22 - 64);
          sub_1C6184574(v6 + v36 + 24, (__n128 *)(v6 + v36 - 64));
          v34 = v22 - 40;
          v42 = *(_OWORD *)(v6 + v36 - 24);
          *(_OWORD *)(v41 + 48) = *(_OWORD *)(v41 - 40);
          *(_OWORD *)(v41 + 64) = v42;
          *(_DWORD *)(v41 + 80) = *(_DWORD *)(v41 - 8);
          v22 -= 88;
          v36 -= 88;
        }
        while (v36);
        v34 = v6 + 48;
        v22 = v6;
LABEL_50:
        v20 = v81;
      }
      MEMORY[0x1CAA32FB4](*(_QWORD *)v22, 8);
      *(_QWORD *)v22 = 0;
      *(_QWORD *)(v22 + 8) = 0;
      *(_DWORD *)(v22 + 16) = 0;
      *(_QWORD *)v22 = v83;
      *(_QWORD *)(v22 + 8) = v84;
      v83 = 0;
      v84 = 0;
      *(_DWORD *)(v22 + 16) = v85;
      v85 = 0;
      v43 = *v33;
      if (*v33)
      {
        *(_QWORD *)(v22 + 32) = v43;
        operator delete(v43);
        *(_QWORD *)(v22 + 32) = 0;
        *(_QWORD *)(v22 + 40) = 0;
        *v33 = 0;
      }
      *v33 = (void *)v86;
      *(_QWORD *)(v22 + 32) = *((_QWORD *)&v86 + 1);
      *(_QWORD *)(v22 + 40) = v87;
      v86 = 0uLL;
      v87 = 0;
      v44 = *v20;
      v45 = v20[1];
      *(_DWORD *)(v34 + 32) = v20[2].n128_u32[0];
      *(__n128 *)v34 = v44;
      *(__n128 *)(v34 + 16) = v45;
      sub_1C6176BF8(&v83);
LABEL_54:
      v18 = v21 + 88;
      v19 += 88;
      if ((__n128 *)(v21 + 88) == a2)
        return;
    }
  }
  v14 = (_QWORD *)a4;
  v15 = a3 >> 1;
  v16 = (_DWORD *)(a1 + 88 * (a3 >> 1));
  v17 = a3 >> 1;
  if ((uint64_t)v12 > a5)
  {
    sub_1C5191D6C(a1, v16, v17, a4, a5);
    sub_1C5191D6C(v6 + 88 * (v12 >> 1), a2, v12 - (v12 >> 1), v14, a5);
    sub_1C519288C(v6, v6 + 88 * (v12 >> 1), (uint64_t)a2, v12 >> 1, v12 - (v12 >> 1), v14, a5);
    return;
  }
  sub_1C51923E8((_DWORD *)a1, v16, v17, a4);
  v48 = (uint64_t)&v14[11 * v15];
  sub_1C51923E8((_DWORD *)(v6 + 88 * (v12 >> 1)), a2, v12 - (v12 >> 1), v48);
  v49 = &v14[11 * v12];
  v50 = v48;
  v51 = (uint64_t)v14;
  while ((_QWORD *)v50 != v49)
  {
    v52 = *(_DWORD *)(v50 + 52);
    v53 = *(_DWORD *)(v51 + 52);
    v54 = v52 > v53;
    if (v52 != v53)
      goto LABEL_67;
    v55 = *(_DWORD *)(v50 + 64);
    if (v55 && (v60 = *(_DWORD *)(v51 + 64)) != 0 && v55 != v60)
    {
      if (v55 >= v60)
        goto LABEL_75;
    }
    else
    {
      v56 = *(_DWORD *)(v50 + 56);
      v57 = *(_DWORD *)(v51 + 56);
      if (v56 == v57)
      {
        v54 = *(_DWORD *)(v50 + 60) > *(_DWORD *)(v51 + 60);
LABEL_67:
        if (!v54)
          goto LABEL_75;
        goto LABEL_69;
      }
      if (v56 >= v57)
      {
LABEL_75:
        sub_1C6182300(v6, v51);
        sub_1C6184574(v6 + 24, (__n128 *)(v51 + 24));
        v61 = *(_OWORD *)(v51 + 48);
        v62 = *(_OWORD *)(v51 + 64);
        *(_DWORD *)(v6 + 80) = *(_DWORD *)(v51 + 80);
        *(_OWORD *)(v6 + 48) = v61;
        *(_OWORD *)(v6 + 64) = v62;
        v51 += 88;
        goto LABEL_76;
      }
    }
LABEL_69:
    sub_1C6182300(v6, v50);
    sub_1C6184574(v6 + 24, (__n128 *)(v50 + 24));
    v58 = *(_OWORD *)(v50 + 48);
    v59 = *(_OWORD *)(v50 + 64);
    *(_DWORD *)(v6 + 80) = *(_DWORD *)(v50 + 80);
    *(_OWORD *)(v6 + 48) = v58;
    *(_OWORD *)(v6 + 64) = v59;
    v50 += 88;
LABEL_76:
    v6 += 88;
    if (v51 == v48)
    {
      if ((_QWORD *)v50 != v49)
      {
        v63 = 0;
        do
        {
          v64 = v6 + v63;
          sub_1C6182300(v6 + v63, v50 + v63);
          sub_1C6184574(v6 + v63 + 24, (__n128 *)(v50 + v63 + 24));
          v65 = *(_OWORD *)(v50 + v63 + 48);
          v66 = *(_OWORD *)(v50 + v63 + 64);
          *(_DWORD *)(v64 + 80) = *(_DWORD *)(v50 + v63 + 80);
          *(_OWORD *)(v64 + 48) = v65;
          *(_OWORD *)(v64 + 64) = v66;
          v63 += 88;
        }
        while ((_QWORD *)(v50 + v63) != v49);
      }
      goto LABEL_84;
    }
  }
  if (v51 != v48)
  {
    v67 = 0;
    do
    {
      v68 = v6 + v67;
      sub_1C6182300(v6 + v67, v51 + v67);
      sub_1C6184574(v6 + v67 + 24, (__n128 *)(v51 + v67 + 24));
      v69 = *(_OWORD *)(v51 + v67 + 48);
      v70 = *(_OWORD *)(v51 + v67 + 64);
      *(_DWORD *)(v68 + 80) = *(_DWORD *)(v51 + v67 + 80);
      *(_OWORD *)(v68 + 48) = v69;
      *(_OWORD *)(v68 + 64) = v70;
      v67 += 88;
    }
    while (v51 + v67 != v48);
  }
LABEL_84:
  if (v14)
  {
    do
    {
      sub_1C6176BF8(v14);
      v14 += 11;
      --v12;
    }
    while (v12);
  }
}

void sub_1C51923E8(_DWORD *a1, _DWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  int v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  BOOL v62;
  unsigned int v63;
  unsigned int v64;
  __int128 v65;
  __int128 v66;
  int v67;
  int v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  int v73;
  __int128 v74;
  __int128 v75;

  if (!a3)
    return;
  v4 = a4;
  v7 = (uint64_t)a1;
  if (a3 == 2)
  {
    v60 = *(a2 - 9);
    v61 = a1[13];
    v62 = v60 > v61;
    if (v60 == v61)
    {
      v63 = *(a2 - 6);
      if (v63)
      {
        v64 = a1[16];
        if (v64)
        {
          if (v63 != v64)
          {
            if (v63 >= v64)
              goto LABEL_83;
            goto LABEL_81;
          }
        }
      }
      v67 = *(a2 - 8);
      v68 = a1[14];
      if (v67 != v68)
      {
        if (v67 >= v68)
        {
LABEL_83:
          sub_1C6182CAC(a4, (uint64_t)a1);
          v74 = *(_OWORD *)(v7 + 48);
          v75 = *(_OWORD *)(v7 + 64);
          *(_DWORD *)(v4 + 80) = *(_DWORD *)(v7 + 80);
          *(_OWORD *)(v4 + 48) = v74;
          *(_OWORD *)(v4 + 64) = v75;
          sub_1C6182CAC(v4 + 88, (uint64_t)(a2 - 22));
          v71 = *(_OWORD *)(a2 - 10);
          v72 = *(_OWORD *)(a2 - 6);
          v73 = *(a2 - 2);
          goto LABEL_84;
        }
LABEL_81:
        sub_1C6182CAC(a4, (uint64_t)(a2 - 22));
        v69 = *(_OWORD *)(a2 - 10);
        v70 = *(_OWORD *)(a2 - 6);
        *(_DWORD *)(v4 + 80) = *(a2 - 2);
        *(_OWORD *)(v4 + 48) = v69;
        *(_OWORD *)(v4 + 64) = v70;
        sub_1C6182CAC(v4 + 88, v7);
        v71 = *(_OWORD *)(v7 + 48);
        v72 = *(_OWORD *)(v7 + 64);
        v73 = *(_DWORD *)(v7 + 80);
LABEL_84:
        *(_DWORD *)(v4 + 168) = v73;
        *(_OWORD *)(v4 + 152) = v72;
        *(_OWORD *)(v4 + 136) = v71;
        return;
      }
      v62 = *(a2 - 7) > a1[15];
    }
    if (!v62)
      goto LABEL_83;
    goto LABEL_81;
  }
  if (a3 == 1)
  {
    sub_1C6182CAC(a4, (uint64_t)a1);
    v65 = *(_OWORD *)(v7 + 48);
    v66 = *(_OWORD *)(v7 + 64);
    *(_DWORD *)(v4 + 80) = *(_DWORD *)(v7 + 80);
    *(_OWORD *)(v4 + 48) = v65;
    *(_OWORD *)(v4 + 64) = v66;
    return;
  }
  if ((uint64_t)a3 > 8)
  {
    v38 = 88 * (a3 >> 1);
    v39 = &a1[(unint64_t)v38 / 4];
    sub_1C5191D6C(a1, &a1[(unint64_t)v38 / 4], a3 >> 1, a4, a3 >> 1);
    sub_1C5191D6C(v7 + v38, a2, a3 - (a3 >> 1), v4 + v38, a3 - (a3 >> 1));
    v40 = v7 + v38;
    while (1)
    {
      if ((_DWORD *)v40 == a2)
      {
        if ((_DWORD *)v7 != v39)
        {
          v56 = 0;
          do
          {
            sub_1C6182CAC(v4 + v56, v7 + v56);
            v57 = *(_OWORD *)(v7 + v56 + 48);
            v58 = *(_OWORD *)(v7 + v56 + 64);
            *(_DWORD *)(v59 + 80) = *(_DWORD *)(v7 + v56 + 80);
            *(_OWORD *)(v59 + 48) = v57;
            *(_OWORD *)(v59 + 64) = v58;
            v56 += 88;
          }
          while ((_DWORD *)(v7 + v56) != v39);
        }
        return;
      }
      v41 = *(_DWORD *)(v40 + 52);
      v42 = *(_DWORD *)(v7 + 52);
      v43 = v41 > v42;
      if (v41 != v42)
        goto LABEL_56;
      v44 = *(_DWORD *)(v40 + 64);
      if (v44)
      {
        v45 = *(_DWORD *)(v7 + 64);
        if (v45)
        {
          if (v44 != v45)
          {
            if (v44 >= v45)
              goto LABEL_60;
            goto LABEL_58;
          }
        }
      }
      v46 = *(_DWORD *)(v40 + 56);
      v47 = *(_DWORD *)(v7 + 56);
      if (v46 == v47)
        break;
      if (v46 >= v47)
      {
LABEL_60:
        sub_1C6182CAC(v4, v7);
        v50 = *(_OWORD *)(v7 + 48);
        v51 = *(_OWORD *)(v7 + 64);
        *(_DWORD *)(v4 + 80) = *(_DWORD *)(v7 + 80);
        *(_OWORD *)(v4 + 48) = v50;
        *(_OWORD *)(v4 + 64) = v51;
        v7 += 88;
        goto LABEL_61;
      }
LABEL_58:
      sub_1C6182CAC(v4, v40);
      v48 = *(_OWORD *)(v40 + 48);
      v49 = *(_OWORD *)(v40 + 64);
      *(_DWORD *)(v4 + 80) = *(_DWORD *)(v40 + 80);
      *(_OWORD *)(v4 + 48) = v48;
      *(_OWORD *)(v4 + 64) = v49;
      v40 += 88;
LABEL_61:
      v4 += 88;
      if ((_DWORD *)v7 == v39)
      {
        if ((_DWORD *)v40 != a2)
        {
          v52 = 0;
          do
          {
            sub_1C6182CAC(v4 + v52, v40 + v52);
            v53 = *(_OWORD *)(v40 + v52 + 48);
            v54 = *(_OWORD *)(v40 + v52 + 64);
            *(_DWORD *)(v55 + 80) = *(_DWORD *)(v40 + v52 + 80);
            *(_OWORD *)(v55 + 48) = v53;
            *(_OWORD *)(v55 + 64) = v54;
            v52 += 88;
          }
          while ((_DWORD *)(v40 + v52) != a2);
        }
        return;
      }
    }
    v43 = *(_DWORD *)(v40 + 60) > *(_DWORD *)(v7 + 60);
LABEL_56:
    if (!v43)
      goto LABEL_60;
    goto LABEL_58;
  }
  if (a1 == a2)
    return;
  sub_1C6182CAC(a4, (uint64_t)a1);
  v8 = *(_OWORD *)(v7 + 48);
  v9 = *(_OWORD *)(v7 + 64);
  *(_DWORD *)(v4 + 80) = *(_DWORD *)(v7 + 80);
  *(_OWORD *)(v4 + 48) = v8;
  *(_OWORD *)(v4 + 64) = v9;
  v10 = v7 + 88;
  if ((_DWORD *)(v7 + 88) == a2)
    return;
  v11 = 0;
  v12 = v4;
  do
  {
    v13 = v10;
    v14 = v12 + 88;
    v15 = *(_DWORD *)(v7 + 140);
    v16 = *(_DWORD *)(v12 + 52);
    v17 = v15 > v16;
    if (v15 == v16)
    {
      v18 = *(_DWORD *)(v7 + 152);
      if (v18)
      {
        v19 = *(_DWORD *)(v12 + 64);
        if (v19 && v18 != v19)
        {
          if (v18 >= v19)
          {
LABEL_39:
            sub_1C6182CAC(v12 + 88, v13);
            v35 = v12 + 136;
            goto LABEL_44;
          }
          goto LABEL_19;
        }
      }
      v21 = *(_DWORD *)(v7 + 144);
      v22 = *(_DWORD *)(v12 + 56);
      if (v21 != v22)
      {
        if (v21 >= v22)
          goto LABEL_39;
        goto LABEL_19;
      }
      v17 = *(_DWORD *)(v7 + 148) > *(_DWORD *)(v12 + 60);
    }
    if (!v17)
      goto LABEL_39;
LABEL_19:
    sub_1C6182CAC(v12 + 88, v12);
    v23 = *(_OWORD *)(v12 + 64);
    *(_OWORD *)(v12 + 136) = *(_OWORD *)(v12 + 48);
    *(_OWORD *)(v12 + 152) = v23;
    *(_DWORD *)(v12 + 168) = *(_DWORD *)(v12 + 80);
    v24 = v4;
    if (v12 == v4)
      goto LABEL_43;
    v25 = v11;
    while (1)
    {
      v26 = *(_DWORD *)(v7 + 140);
      v27 = *(_DWORD *)(v4 + v25 - 36);
      if (v26 != v27)
      {
        if (v26 <= v27)
        {
          v24 = v4 + v25;
          goto LABEL_43;
        }
        goto LABEL_36;
      }
      v28 = *(_DWORD *)(v7 + 152);
      if (v28)
      {
        v29 = *(_DWORD *)(v4 + v25 - 24);
        if (v29 && v28 != v29)
          break;
      }
      v31 = *(_DWORD *)(v7 + 144);
      v32 = *(_DWORD *)(v4 + v25 - 32);
      if (v31 == v32)
      {
        if (*(_DWORD *)(v7 + 148) <= *(_DWORD *)(v4 + v25 - 28))
          goto LABEL_42;
      }
      else if (v31 >= v32)
      {
        goto LABEL_42;
      }
LABEL_36:
      v12 -= 88;
      sub_1C6182300(v4 + v25, v4 + v25 - 88);
      v33 = v4 + v25;
      sub_1C6184574(v4 + v25 + 24, (__n128 *)(v4 + v25 - 64));
      v34 = *(_OWORD *)(v4 + v25 - 24);
      *(_OWORD *)(v33 + 48) = *(_OWORD *)(v33 - 40);
      *(_OWORD *)(v33 + 64) = v34;
      *(_DWORD *)(v33 + 80) = *(_DWORD *)(v33 - 8);
      v25 -= 88;
      if (!v25)
      {
        v24 = v4;
        goto LABEL_43;
      }
    }
    if (v28 < v29)
      goto LABEL_36;
LABEL_42:
    v24 = v12;
LABEL_43:
    sub_1C6182300(v24, v13);
    sub_1C6184574(v24 + 24, (__n128 *)(v7 + 112));
    v35 = v24 + 48;
LABEL_44:
    v36 = *(_OWORD *)(v7 + 136);
    v37 = *(_OWORD *)(v7 + 152);
    *(_DWORD *)(v35 + 32) = *(_DWORD *)(v7 + 168);
    v10 = v13 + 88;
    *(_OWORD *)v35 = v36;
    *(_OWORD *)(v35 + 16) = v37;
    v11 += 88;
    v12 = v14;
    v7 = v13;
  }
  while ((_DWORD *)(v13 + 88) != a2);
}

void sub_1C519288C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  _DWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  int v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  _DWORD *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  BOOL v58;
  unsigned int v59;
  BOOL v60;
  int v62;
  _BOOL4 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  void *v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  void *v84;
  int v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  BOOL v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  int v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  unint64_t v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int v118;
  BOOL v119;
  unsigned int v120;
  unsigned int v121;
  int v122;
  int v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  __int128 *v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  void *v138;
  int v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  __int128 v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  int v154;

  if (!a5)
    return;
  while (a4 > a7 && a5 > a7)
  {
    if (!a4)
      return;
    v13 = 0;
    v14 = *(_DWORD *)(a2 + 52);
    v15 = -a4;
    while (1)
    {
      v16 = *(_DWORD *)(a1 + v13 + 52);
      v17 = v14 > v16;
      if (v14 != v16)
        goto LABEL_15;
      v18 = *(_DWORD *)(a2 + 64);
      if (!v18 || ((v19 = *(_DWORD *)(a1 + v13 + 64)) != 0 ? (v20 = v18 == v19) : (v20 = 1), v20))
      {
        v21 = *(_DWORD *)(a2 + 56);
        v22 = *(_DWORD *)(a1 + v13 + 56);
        if (v21 != v22)
        {
          if (v21 < v22)
            break;
          goto LABEL_21;
        }
        v17 = *(_DWORD *)(a2 + 60) > *(_DWORD *)(a1 + v13 + 60);
LABEL_15:
        if (v17)
          break;
        goto LABEL_21;
      }
      if (v18 < v19)
        break;
LABEL_21:
      v13 += 88;
      if (__CFADD__(v15++, 1))
        return;
    }
    v24 = -v15;
    v25 = a1 + v13;
    if (-v15 >= a5)
    {
      if (v15 == -1)
      {
        v132 = a1 + v13;
        v147 = *(_QWORD *)(a1 + v13);
        *(_QWORD *)v132 = 0;
        LODWORD(v148) = *(_DWORD *)(a1 + v13 + 8);
        *(_DWORD *)(v132 + 8) = 0;
        HIDWORD(v148) = *(_DWORD *)(a1 + v13 + 12);
        *(_DWORD *)(v132 + 12) = 0;
        v149 = *(_DWORD *)(a1 + v13 + 16);
        *(_DWORD *)(v132 + 16) = 0;
        v133 = (__int128 *)(a1 + v13 + 24);
        v150 = *v133;
        v151 = *(_QWORD *)(a1 + v13 + 40);
        *(_QWORD *)(v132 + 24) = 0;
        *(_QWORD *)(v132 + 32) = 0;
        *(_QWORD *)(v132 + 40) = 0;
        v134 = *(_OWORD *)(a1 + v13 + 48);
        v135 = *(_OWORD *)(a1 + v13 + 64);
        v154 = *(_DWORD *)(a1 + v13 + 80);
        v152 = v134;
        v153 = v135;
        sub_1C6182300(a1 + v13, a2);
        sub_1C6184574((uint64_t)v133, (__n128 *)(a2 + 24));
        v136 = *(_OWORD *)(a2 + 48);
        v137 = *(_OWORD *)(a2 + 64);
        *(_DWORD *)(v132 + 80) = *(_DWORD *)(a2 + 80);
        *(_OWORD *)(v132 + 48) = v136;
        *(_OWORD *)(v132 + 64) = v137;
        MEMORY[0x1CAA32FB4](*(_QWORD *)a2, 8);
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 16) = 0;
        *(_QWORD *)a2 = v147;
        *(_QWORD *)(a2 + 8) = v148;
        v147 = 0;
        v148 = 0;
        *(_DWORD *)(a2 + 16) = v149;
        v149 = 0;
        v138 = *(void **)(a2 + 24);
        if (v138)
        {
          *(_QWORD *)(a2 + 32) = v138;
          operator delete(v138);
        }
        *(_OWORD *)(a2 + 24) = v150;
        *(_QWORD *)(a2 + 40) = v151;
        v150 = 0uLL;
        v151 = 0;
        v139 = v154;
        v140 = v153;
        *(_OWORD *)(a2 + 48) = v152;
        *(_OWORD *)(a2 + 64) = v140;
        *(_DWORD *)(a2 + 80) = v139;
        sub_1C6176BF8(&v147);
        return;
      }
      if (v15 > 0)
        v24 = 1 - v15;
      v46 = v24 >> 1;
      if (a3 == a2)
      {
        v54 = a3;
LABEL_76:
        v36 = a1 + 88 * v46 + v13;
        v27 = 0x2E8BA2E8BA2E8BA3 * ((v54 - a2) >> 3);
        goto LABEL_77;
      }
      v47 = 0x2E8BA2E8BA2E8BA3 * ((a3 - a2) >> 3);
      v48 = (_DWORD *)(a1 + 88 * v46 + v13);
      v49 = v48[13];
      v50 = v48[14];
      v53 = v48 + 15;
      v52 = v48[15];
      v51 = v53[1];
      v54 = a2;
      while (2)
      {
        v55 = v47 >> 1;
        v56 = v54 + 88 * (v47 >> 1);
        v57 = *(_DWORD *)(v56 + 52);
        v58 = v57 > v49;
        if (v57 == v49)
        {
          v59 = *(_DWORD *)(v54 + 88 * v55 + 64);
          if (v59)
            v60 = v51 == 0;
          else
            v60 = 1;
          if (!v60 && v59 != v51)
          {
            v63 = v59 < v51;
            goto LABEL_68;
          }
          v62 = *(_DWORD *)(v54 + 88 * v55 + 56);
          if (v62 != v50)
          {
            v63 = v62 < v50;
LABEL_68:
            v64 = v56 + 88;
            v47 += ~v55;
            if (v63)
              v54 = v64;
            else
              v47 = v55;
            if (!v47)
              goto LABEL_76;
            continue;
          }
          v58 = *(_DWORD *)(v54 + 88 * v55 + 60) > v52;
        }
        break;
      }
      v63 = v58;
      goto LABEL_68;
    }
    if (a5 >= 0)
      v26 = a5;
    else
      v26 = a5 + 1;
    v27 = v26 >> 1;
    if (v25 != a2)
    {
      v28 = a1 + v13;
      v29 = 0x2E8BA2E8BA2E8BA3 * ((a2 - a1 - v13) >> 3);
      v30 = (_DWORD *)(a2 + 88 * v27);
      v31 = v30[13];
      v32 = v30[14];
      v35 = v30 + 15;
      v34 = v30[15];
      v33 = v35[1];
      v36 = v25;
      while (1)
      {
        v37 = v29 >> 1;
        v38 = v36 + 88 * (v29 >> 1);
        v39 = *(_DWORD *)(v38 + 52);
        v40 = v31 > v39;
        if (v31 == v39)
        {
          if (v33)
          {
            v41 = *(_DWORD *)(v36 + 88 * v37 + 64);
            if (v41 && v33 != v41)
            {
              v44 = v33 < v41;
              goto LABEL_43;
            }
          }
          v43 = *(_DWORD *)(v36 + 88 * v37 + 56);
          if (v32 != v43)
          {
            v44 = v32 < v43;
            goto LABEL_43;
          }
          v40 = v34 > *(_DWORD *)(v36 + 88 * v37 + 60);
        }
        v44 = v40;
LABEL_43:
        v45 = v38 + 88;
        v29 += ~v37;
        if (v44)
          v29 = v37;
        else
          v36 = v45;
        if (!v29)
          goto LABEL_74;
      }
    }
    v28 = a1 + v13;
    v36 = a2;
LABEL_74:
    v54 = a2 + 88 * v27;
    v46 = 0x2E8BA2E8BA2E8BA3 * ((v36 - v28) >> 3);
LABEL_77:
    v65 = v54;
    if (v36 != a2)
    {
      v65 = v36;
      if (a2 != v54)
      {
        v141 = v46;
        v142 = v27;
        v143 = v25;
        v144 = a5;
        v145 = a7;
        v146 = a3;
        v66 = 0;
        v65 = a2;
        while (1)
        {
          v67 = v36 + v66;
          v68 = a2 + v66;
          v147 = *(_QWORD *)(v36 + v66);
          *(_QWORD *)v67 = 0;
          LODWORD(v148) = *(_DWORD *)(v36 + v66 + 8);
          *(_DWORD *)(v67 + 8) = 0;
          HIDWORD(v148) = *(_DWORD *)(v36 + v66 + 12);
          *(_DWORD *)(v67 + 12) = 0;
          v149 = *(_DWORD *)(v36 + v66 + 16);
          *(_DWORD *)(v67 + 16) = 0;
          v150 = *(_OWORD *)(v36 + v66 + 24);
          v151 = *(_QWORD *)(v36 + v66 + 40);
          *(_QWORD *)(v36 + v66 + 24) = 0;
          *(_QWORD *)(v67 + 32) = 0;
          *(_QWORD *)(v67 + 40) = 0;
          v69 = *(_OWORD *)(v36 + v66 + 48);
          v70 = *(_OWORD *)(v36 + v66 + 64);
          v154 = *(_DWORD *)(v36 + v66 + 80);
          v152 = v69;
          v153 = v70;
          sub_1C6182300(v36 + v66, a2 + v66);
          sub_1C6184574(v36 + v66 + 24, (__n128 *)(a2 + v66 + 24));
          v71 = *(_OWORD *)(a2 + v66 + 48);
          v72 = *(_OWORD *)(a2 + v66 + 64);
          *(_DWORD *)(v67 + 80) = *(_DWORD *)(a2 + v66 + 80);
          *(_OWORD *)(v67 + 48) = v71;
          *(_OWORD *)(v67 + 64) = v72;
          MEMORY[0x1CAA32FB4](*(_QWORD *)(a2 + v66), 8);
          *(_QWORD *)v68 = v147;
          v147 = 0;
          *(_QWORD *)(v68 + 8) = v148;
          v148 = 0;
          *(_DWORD *)(v68 + 16) = v149;
          v149 = 0;
          v73 = *(void **)(a2 + v66 + 24);
          if (v73)
          {
            *(_QWORD *)(v68 + 32) = v73;
            operator delete(v73);
          }
          *(_OWORD *)(v68 + 24) = v150;
          *(_QWORD *)(v68 + 40) = v151;
          v150 = 0uLL;
          v151 = 0;
          v74 = v152;
          v75 = v153;
          *(_DWORD *)(v68 + 80) = v154;
          *(_OWORD *)(v68 + 48) = v74;
          *(_OWORD *)(v68 + 64) = v75;
          sub_1C6176BF8(&v147);
          v76 = v36 + v66 + 88;
          if (v68 + 88 == v54)
            break;
          if (v76 == v65)
            v65 = v68 + 88;
          v66 += 88;
        }
        if (v76 == v65)
        {
          a3 = v146;
        }
        else
        {
          v77 = v36 + v66 + 88;
          v78 = v77;
          v79 = v65;
          a3 = v146;
          do
          {
            while (1)
            {
              v147 = *(_QWORD *)v78;
              *(_QWORD *)v78 = 0;
              LODWORD(v148) = *(_DWORD *)(v78 + 8);
              *(_DWORD *)(v78 + 8) = 0;
              HIDWORD(v148) = *(_DWORD *)(v78 + 12);
              *(_DWORD *)(v78 + 12) = 0;
              v149 = *(_DWORD *)(v78 + 16);
              *(_DWORD *)(v78 + 16) = 0;
              v150 = *(_OWORD *)(v78 + 24);
              v151 = *(_QWORD *)(v78 + 40);
              *(_QWORD *)(v78 + 24) = 0;
              *(_QWORD *)(v78 + 32) = 0;
              *(_QWORD *)(v78 + 40) = 0;
              v80 = *(_OWORD *)(v78 + 48);
              v81 = *(_OWORD *)(v78 + 64);
              v154 = *(_DWORD *)(v78 + 80);
              v152 = v80;
              v153 = v81;
              sub_1C6182300(v78, v65);
              sub_1C6184574(v78 + 24, (__n128 *)(v65 + 24));
              v82 = *(_OWORD *)(v65 + 48);
              v83 = *(_OWORD *)(v65 + 64);
              *(_DWORD *)(v78 + 80) = *(_DWORD *)(v65 + 80);
              *(_OWORD *)(v78 + 48) = v82;
              *(_OWORD *)(v78 + 64) = v83;
              MEMORY[0x1CAA32FB4](*(_QWORD *)v65, 8);
              *(_QWORD *)v65 = 0;
              *(_QWORD *)(v65 + 8) = 0;
              *(_DWORD *)(v65 + 16) = 0;
              *(_QWORD *)v65 = v147;
              *(_QWORD *)(v65 + 8) = v148;
              v147 = 0;
              v148 = 0;
              *(_DWORD *)(v65 + 16) = v149;
              v149 = 0;
              v84 = *(void **)(v65 + 24);
              if (v84)
              {
                *(_QWORD *)(v65 + 32) = v84;
                operator delete(v84);
              }
              *(_OWORD *)(v65 + 24) = v150;
              *(_QWORD *)(v65 + 40) = v151;
              v150 = 0uLL;
              v151 = 0;
              v85 = v154;
              v86 = v153;
              *(_OWORD *)(v65 + 48) = v152;
              *(_OWORD *)(v65 + 64) = v86;
              *(_DWORD *)(v65 + 80) = v85;
              sub_1C6176BF8(&v147);
              v87 = v78 + 88;
              v65 += 88;
              v78 += 88;
              if (v65 == v54)
                break;
              if (v78 == v79)
                v79 = v65;
              v78 = v87;
            }
            v65 = v79;
          }
          while (v87 != v79);
          v65 = v77;
        }
        a5 = v144;
        a7 = v145;
        v27 = v142;
        v25 = v143;
        v46 = v141;
      }
    }
    a4 = -(v46 + v15);
    v88 = a5 - v27;
    if (v46 + v27 >= a5 - (v46 + v27) - v15)
    {
      v90 = v25;
      v91 = v46;
      v88 = v27;
      sub_1C519288C(v65, v54, a3, a4, a5 - v27, a6, a7);
      v89 = v90;
      v54 = v36;
      a4 = v91;
      a3 = v65;
    }
    else
    {
      sub_1C519288C(v25, v36, v65, v46, v27, a6, a7);
      v89 = v65;
    }
    a5 = v88;
    a2 = v54;
    a1 = v89;
    if (!v88)
      return;
  }
  if (a4 <= a5)
  {
    if (a1 == a2)
      return;
    v110 = 0;
    v93 = 0;
    do
    {
      sub_1C6182CAC((uint64_t)&a6[v110 / 8], a1 + v110);
      v111 = *(_OWORD *)(a1 + v110 + 48);
      v112 = *(_OWORD *)(a1 + v110 + 64);
      *(_DWORD *)(v113 + 80) = *(_DWORD *)(a1 + v110 + 80);
      *(_OWORD *)(v113 + 48) = v111;
      *(_OWORD *)(v113 + 64) = v112;
      ++v93;
      v110 += 88;
    }
    while (a1 + v110 != a2);
    if (!v110)
      goto LABEL_151;
    v114 = (uint64_t)&a6[v110 / 8];
    v115 = a1 + 24;
    v116 = (uint64_t)a6;
    while (1)
    {
      if (a2 == a3)
      {
        sub_1C519329C(v116, v114, v115 - 24);
        goto LABEL_151;
      }
      v117 = *(_DWORD *)(a2 + 52);
      v118 = *(_DWORD *)(v116 + 52);
      v119 = v117 > v118;
      if (v117 != v118)
        goto LABEL_139;
      v120 = *(_DWORD *)(a2 + 64);
      if (v120)
      {
        v121 = *(_DWORD *)(v116 + 64);
        if (v121)
        {
          if (v120 != v121)
          {
            if (v120 >= v121)
              goto LABEL_143;
            goto LABEL_141;
          }
        }
      }
      v122 = *(_DWORD *)(a2 + 56);
      v123 = *(_DWORD *)(v116 + 56);
      if (v122 == v123)
        break;
      if (v122 >= v123)
      {
LABEL_143:
        sub_1C6182300(v115 - 24, v116);
        sub_1C6184574(v115, (__n128 *)(v116 + 24));
        v126 = *(_OWORD *)(v116 + 48);
        v127 = *(_OWORD *)(v116 + 64);
        *(_DWORD *)(v115 + 56) = *(_DWORD *)(v116 + 80);
        *(_OWORD *)(v115 + 40) = v127;
        *(_OWORD *)(v115 + 24) = v126;
        v116 += 88;
        goto LABEL_144;
      }
LABEL_141:
      sub_1C6182300(v115 - 24, a2);
      sub_1C6184574(v115, (__n128 *)(a2 + 24));
      v124 = *(_OWORD *)(a2 + 48);
      v125 = *(_OWORD *)(a2 + 64);
      *(_DWORD *)(v115 + 56) = *(_DWORD *)(a2 + 80);
      *(_OWORD *)(v115 + 40) = v125;
      *(_OWORD *)(v115 + 24) = v124;
      a2 += 88;
LABEL_144:
      v115 += 88;
      if (v114 == v116)
        goto LABEL_151;
    }
    v119 = *(_DWORD *)(a2 + 60) > *(_DWORD *)(v116 + 60);
LABEL_139:
    if (!v119)
      goto LABEL_143;
    goto LABEL_141;
  }
  if (a2 == a3)
    return;
  v92 = 0;
  v93 = 0;
  do
  {
    sub_1C6182CAC((uint64_t)&a6[v92 / 8], a2 + v92);
    v94 = *(_OWORD *)(a2 + v92 + 48);
    v95 = *(_OWORD *)(a2 + v92 + 64);
    *(_DWORD *)(v96 + 80) = *(_DWORD *)(a2 + v92 + 80);
    *(_OWORD *)(v96 + 48) = v94;
    *(_OWORD *)(v96 + 64) = v95;
    ++v93;
    v92 += 88;
  }
  while (a2 + v92 != a3);
  if (!v92)
    goto LABEL_151;
  v97 = &a6[v92 / 8];
  v98 = a3 - 40;
  while (a2 != a1)
  {
    v99 = a2 - 88;
    v100 = *((_DWORD *)v97 - 9);
    v101 = *(_DWORD *)(a2 - 36);
    v102 = v100 > v101;
    if (v100 != v101)
      goto LABEL_118;
    v103 = *((_DWORD *)v97 - 6);
    if (v103)
    {
      v104 = *(_DWORD *)(a2 - 24);
      if (v104)
      {
        if (v103 != v104)
        {
          if (v103 >= v104)
            goto LABEL_122;
          goto LABEL_120;
        }
      }
    }
    v105 = *((_DWORD *)v97 - 8);
    v106 = *(_DWORD *)(a2 - 32);
    if (v105 == v106)
    {
      v102 = *((_DWORD *)v97 - 7) > *(_DWORD *)(a2 - 28);
LABEL_118:
      if (!v102)
        goto LABEL_122;
      goto LABEL_120;
    }
    if (v105 >= v106)
    {
LABEL_122:
      v99 = (uint64_t)(v97 - 11);
      v107 = (uint64_t)v97;
      v97 -= 11;
      goto LABEL_123;
    }
LABEL_120:
    v107 = a2;
    a2 -= 88;
LABEL_123:
    sub_1C6182300(v98 - 48, v99);
    sub_1C6184574(v98 - 24, (__n128 *)(v107 - 64));
    v108 = *(_OWORD *)(v107 - 40);
    v109 = *(_OWORD *)(v107 - 24);
    *(_DWORD *)(v98 + 32) = *(_DWORD *)(v107 - 8);
    *(_OWORD *)v98 = v108;
    *(_OWORD *)(v98 + 16) = v109;
    v98 -= 88;
    if (v97 == a6)
      goto LABEL_151;
  }
  if (v97 != a6)
  {
    v128 = 0;
    do
    {
      v129 = v98 + v128 * 8;
      sub_1C6182300(v98 + v128 * 8 - 48, (uint64_t)&v97[v128 - 11]);
      sub_1C6184574(v98 + v128 * 8 - 24, (__n128 *)&v97[v128 - 8]);
      v130 = *(_OWORD *)&v97[v128 - 5];
      v131 = *(_OWORD *)&v97[v128 - 3];
      *(_DWORD *)(v129 + 32) = v97[v128 - 1];
      *(_OWORD *)v129 = v130;
      *(_OWORD *)(v129 + 16) = v131;
      v128 -= 11;
    }
    while (&v97[v128] != a6);
  }
LABEL_151:
  if (a6)
  {
    do
    {
      sub_1C6176BF8(a6);
      a6 += 11;
      --v93;
    }
    while (v93);
  }
}

__n128 sub_1C519329C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  uint64_t v8;

  if (a1 != a2)
  {
    v4 = a3 + 24;
    v5 = a1 + 24;
    do
    {
      sub_1C6182300(v4 - 24, v5 - 24);
      sub_1C6184574(v4, (__n128 *)v5);
      result = *(__n128 *)(v5 + 24);
      v7 = *(_OWORD *)(v5 + 40);
      *(_DWORD *)(v4 + 56) = *(_DWORD *)(v5 + 56);
      *(_OWORD *)(v4 + 40) = v7;
      *(__n128 *)(v4 + 24) = result;
      v4 += 88;
      v8 = v5 + 64;
      v5 += 88;
    }
    while (v8 != a2);
  }
  return result;
}

void sub_1C5193314(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *i;
  char *v16;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v4 = a1[2];
  v5 = (_QWORD *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v5 - *a1) >> 3);
    if ((unint64_t)(v7 + 1) > 0x492492492492492)
      abort();
    v8 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - *a1) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x249249249249249)
      v10 = 0x492492492492492;
    else
      v10 = v9;
    v21 = a1 + 2;
    if (v10 > 0x492492492492492)
      sub_1C4764EE4();
    v11 = 56 * v10;
    v12 = (char *)operator new(56 * v10);
    v13 = &v12[56 * v7];
    __p = v12;
    v18 = v13;
    v20 = &v12[v11];
    *(_QWORD *)v13 = *(_QWORD *)a2;
    *((_QWORD *)v13 + 1) = v13 + 24;
    *((_QWORD *)v13 + 2) = 0x400000000;
    if (*(_DWORD *)(a2 + 16))
      sub_1C614D378((uint64_t)(v13 + 8), a2 + 8);
    v19 = v13 + 56;
    sub_1C61F8998(a1, &__p);
    v6 = (_QWORD *)a1[1];
    v14 = v18;
    for (i = v19; i != v14; i -= 56)
    {
      v16 = (char *)*((_QWORD *)i - 6);
      if (i - 32 != v16)
        free(v16);
    }
    if (__p)
      operator delete(__p);
  }
  else
  {
    *v5 = *(_QWORD *)a2;
    v5[1] = v5 + 3;
    v5[2] = 0x400000000;
    if (*(_DWORD *)(a2 + 16))
      sub_1C614D378((uint64_t)(v5 + 1), a2 + 8);
    v6 = v5 + 7;
  }
  a1[1] = (uint64_t)v6;
}

_QWORD *sub_1C51934B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  char v17;
  _QWORD *v18;

  v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
  {
    v18 = 0;
LABEL_15:
    result = sub_1C504A120(a1, (uint64_t)a2, a2, v18);
    *result = *a2;
    *((_DWORD *)result + 2) = *a3;
    v9 = *(_QWORD *)a1;
    v8 = *(_DWORD *)(a1 + 16);
    v17 = 1;
    goto LABEL_16;
  }
  v9 = *(_QWORD *)a1;
  v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v8 - 1);
  result = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
  v12 = *result;
  if (*a2 != *result)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = result;
      v16 = v10 + v14++;
      v10 = v16 & (v8 - 1);
      result = (_QWORD *)(v9 + 16 * v10);
      v12 = *result;
      if (*a2 == *result)
        goto LABEL_11;
    }
    if (v13)
      v18 = v13;
    else
      v18 = result;
    goto LABEL_15;
  }
LABEL_11:
  v17 = 0;
LABEL_16:
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v9 + 16 * v8;
  *(_BYTE *)(a4 + 16) = v17;
  return result;
}

BOOL sub_1C51935A4(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int8x8_t v11;
  int8x8_t v12;

  v11 = 0;
  v12 = 0;
  v5 = sub_1C519363C((uint64_t *)a1, a2, &v12);
  v6 = sub_1C519363C((uint64_t *)a1, *(_WORD *)(*(_QWORD *)(a3 + 16) + 6), &v11);
  if (v5 != v6)
    return v5 > v6;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_DWORD *)(a1 + 32);
  v9 = sub_1C5193748(v7, v8, *(_QWORD *)&v12);
  return v9 < sub_1C5193748(v7, v8, *(_QWORD *)&v11);
}

uint64_t sub_1C519363C(uint64_t *a1, unsigned __int16 a2, int8x8_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x8_t *v11;
  uint64_t result;
  int8x8_t v13;
  int8x8_t v14;
  uint8x8_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  int8x8_t v23;
  uint64_t v24;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_QWORD *)(v3 + 96);
    if (v4)
    {
      v5 = v4 + 10 * a2;
      v6 = *(unsigned __int16 *)(v5 + 2);
      v7 = *(unsigned __int16 *)(v5 + 4);
      if ((_DWORD)v6 != v7)
      {
        v8 = *(_QWORD *)(v3 + 72);
        v9 = 3 * v6;
        v10 = 24 * v7 - 8 * v9;
        v11 = (int8x8_t *)(v8 + 8 * v9 + 8);
        result = 0xFFFFFFFFLL;
        do
        {
          v14 = *v11;
          v11 += 3;
          v13 = v14;
          v15 = (uint8x8_t)vcnt_s8(v14);
          v15.i16[0] = vaddlv_u8(v15);
          if (result > v15.i32[0])
          {
            *a3 = v13;
            result = v15.u32[0];
          }
          v10 -= 24;
        }
        while (v10);
        return result;
      }
      return 0xFFFFFFFFLL;
    }
  }
  v16 = a1[1];
  v17 = *(_QWORD *)(v16 + 160);
  v18 = *(_QWORD *)(v17 + 40);
  if ((~*(unsigned __int16 *)(v18 + 24 * a2 + 8) & 0x1FFF) == 0)
    return 0xFFFFFFFFLL;
  v19 = v18 + 24 * a2;
  if (!*(_WORD *)(v19 + 12))
    return 0xFFFFFFFFLL;
  v20 = *(_QWORD *)(v16 + 136);
  v21 = 4 * *(unsigned __int16 *)(v19 + 12);
  v22 = (_WORD *)(v20 + 4 * *(unsigned __int16 *)(v19 + 10) + 2);
  result = 0xFFFFFFFFLL;
  do
  {
    if (*v22)
    {
      v23 = (int8x8_t)(unsigned __int16)*(v22 - 1);
      v24 = *(unsigned int *)(*(_QWORD *)(v17 + 32) + 32 * *(_QWORD *)&v23 + 8);
      if (v24 < result)
      {
        *a3 = v23;
        result = v24;
      }
    }
    v22 += 2;
    v21 -= 4;
  }
  while (v21);
  return result;
}

uint64_t sub_1C5193748(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;

  if (a2)
  {
    v3 = (37 * (_DWORD)a3) & (a2 - 1);
    v4 = *(_QWORD *)(a1 + 16 * v3);
    if (v4 == a3)
      return *(unsigned int *)(a1 + 16 * v3 + 8);
    v6 = 1;
    while (v4 != -1)
    {
      v7 = v3 + v6++;
      v3 = v7 & (a2 - 1);
      v4 = *(_QWORD *)(a1 + 16 * v3);
      if (v4 == a3)
        return *(unsigned int *)(a1 + 16 * v3 + 8);
    }
  }
  return 0;
}

BOOL sub_1C51937AC(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _BOOL8 v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    v9 = *v8;
    v11 = (uint64_t *)(a2 - 8);
    v10 = *(_QWORD *)(a2 - 8);
    result = sub_1C51935A4(a3, *(_WORD *)(*(_QWORD *)(*v8 + 16) + 6), v10);
    if (result)
    {
      do
      {
        v12 = v8;
        *v11 = v9;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *v8;
        result = sub_1C51935A4(a3, *(_WORD *)(*(_QWORD *)(*v8 + 16) + 6), v10);
        v11 = v12;
      }
      while (result);
      *v12 = v10;
    }
  }
  return result;
}

unint64_t sub_1C5193854(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 88 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C61F882C(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C61F882C(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C51938BC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C61F901C(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 72; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C61F901C(a1, v14, v8);
}

uint64_t *sub_1C5193A24(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  BOOL v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t *v86;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (*(_DWORD *)(v37 + 192) > *(_DWORD *)(*v8 + 192))
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3:
        return sub_1C519410C(v8, v8 + 1, a2 - 1);
      case 4:
        return sub_1C519437C(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v39 = v8 + 1;
        v40 = v8 + 2;
        v41 = v8 + 3;
        result = sub_1C519437C(v8, v8 + 1, v8 + 2, v8 + 3);
        v42 = *(a2 - 1);
        v43 = v8[3];
        if (*(_DWORD *)(v42 + 192) > *(_DWORD *)(v43 + 192))
        {
          *v41 = v42;
          *(a2 - 1) = v43;
          v44 = *v41;
          v45 = *v40;
          v46 = *(_DWORD *)(*v41 + 192);
          if (v46 > *(_DWORD *)(*v40 + 192))
          {
            *v40 = v44;
            *v41 = v45;
            v47 = *v39;
            if (v46 > *(_DWORD *)(*v39 + 192))
            {
              v8[1] = v44;
              v8[2] = v47;
              v48 = *v8;
              if (v46 > *(_DWORD *)(*v8 + 192))
              {
                *v8 = v44;
                v8[1] = v48;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v49 = v8 + 1;
          v51 = v8 == a2 || v49 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v51)
            {
              v52 = 8;
              v53 = v8;
              do
              {
                v55 = *v53;
                v54 = v53[1];
                v53 = v49;
                v56 = *(_DWORD *)(v54 + 192);
                if (v56 > *(_DWORD *)(v55 + 192))
                {
                  v57 = v52;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v57) = v55;
                    v58 = v57 - 8;
                    if (v57 == 8)
                      break;
                    v55 = *(uint64_t *)((char *)v8 + v57 - 16);
                    v57 -= 8;
                    if (v56 <= *(_DWORD *)(v55 + 192))
                    {
                      v59 = (uint64_t *)((char *)v8 + v58);
                      goto LABEL_80;
                    }
                  }
                  v59 = v8;
LABEL_80:
                  *v59 = v54;
                }
                v49 = v53 + 1;
                v52 += 8;
              }
              while (v53 + 1 != a2);
            }
          }
          else if (!v51)
          {
            do
            {
              v89 = *v7;
              v88 = v7[1];
              v7 = v49;
              v90 = *(_DWORD *)(v88 + 192);
              if (v90 > *(_DWORD *)(v89 + 192))
              {
                do
                {
                  *v49 = v89;
                  v89 = *(v49 - 2);
                  --v49;
                }
                while (v90 > *(_DWORD *)(v89 + 192));
                *v49 = v88;
              }
              v49 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (unint64_t)(v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                v65 = *v64;
                if (2 * v62 + 2 < v10 && *(_DWORD *)(v65 + 192) > *(_DWORD *)(v64[1] + 192))
                {
                  v65 = v64[1];
                  ++v64;
                  v63 = 2 * v62 + 2;
                }
                result = &v8[v62];
                v66 = *result;
                v67 = *(_DWORD *)(*result + 192);
                if (*(_DWORD *)(v65 + 192) <= v67)
                {
                  do
                  {
                    v68 = v64;
                    *result = v65;
                    if (v60 < v63)
                      break;
                    v69 = (2 * v63) | 1;
                    v64 = &v8[v69];
                    v70 = 2 * v63 + 2;
                    v65 = *v64;
                    if (v70 < v10 && *(_DWORD *)(v65 + 192) > *(_DWORD *)(v64[1] + 192))
                    {
                      v65 = v64[1];
                      ++v64;
                      v69 = v70;
                    }
                    result = v68;
                    v63 = v69;
                  }
                  while (*(_DWORD *)(v65 + 192) <= v67);
                  *v68 = v66;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            do
            {
              v71 = 0;
              v72 = *v8;
              v73 = v8;
              do
              {
                v74 = &v73[v71];
                v77 = v74[1];
                v75 = v74 + 1;
                v76 = v77;
                v78 = (2 * v71) | 1;
                v79 = 2 * v71 + 2;
                if (v79 < v10)
                {
                  result = (uint64_t *)*(unsigned int *)(v76 + 192);
                  if (result > *(_DWORD *)(v75[1] + 192))
                  {
                    v76 = v75[1];
                    ++v75;
                    v78 = v79;
                  }
                }
                *v73 = v76;
                v73 = v75;
                v71 = v78;
              }
              while (v78 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v75 == --a2)
              {
                *v75 = v72;
              }
              else
              {
                *v75 = *a2;
                *a2 = v72;
                v80 = (char *)v75 - (char *)v8 + 8;
                if (v80 >= 9)
                {
                  v81 = (((unint64_t)v80 >> 3) - 2) >> 1;
                  v82 = &v8[v81];
                  v83 = *v82;
                  v84 = *v75;
                  v85 = *(_DWORD *)(*v75 + 192);
                  if (*(_DWORD *)(*v82 + 192) > v85)
                  {
                    do
                    {
                      v86 = v82;
                      *v75 = v83;
                      if (!v81)
                        break;
                      v81 = (v81 - 1) >> 1;
                      v82 = &v8[v81];
                      v83 = *v82;
                      v75 = v86;
                    }
                    while (*(_DWORD *)(*v82 + 192) > v85);
                    *v86 = v84;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1C519410C(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C519410C(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C519410C(v7 + 1, v12 - 1, a2 - 2);
          sub_1C519410C(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_1C519410C(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_DWORD *)(v14 + 192);
          if (*(_DWORD *)(*(v7 - 1) + 192) > v15)
            goto LABEL_12;
          if (v15 <= *(_DWORD *)(*(a2 - 1) + 192))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v15 <= *(_DWORD *)(*v8 + 192));
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v15 <= *(_DWORD *)(v28 + 192));
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v15 > *(_DWORD *)(v31 + 192));
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v15 <= *(_DWORD *)(v34 + 192));
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v15 > *(_DWORD *)(v35 + 192));
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v15 = *(_DWORD *)(v14 + 192);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_DWORD *)(v17 + 192) > v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_DWORD *)(v21 + 192) <= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_DWORD *)(v20 + 192) <= v15);
        }
        if (v18 >= v19)
        {
          v8 = &v7[v16];
        }
        else
        {
          v22 = *v19;
          v8 = &v7[v16];
          v23 = v19;
          do
          {
            *v8 = v22;
            *v23 = v17;
            do
            {
              v24 = v8[1];
              ++v8;
              v17 = v24;
            }
            while (*(_DWORD *)(v24 + 192) > v15);
            do
            {
              v25 = *--v23;
              v22 = v25;
            }
            while (*(_DWORD *)(v25 + 192) <= v15);
          }
          while (v8 < v23);
        }
        v26 = v8 - 1;
        if (v8 - 1 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = (uint64_t *)sub_1C5193A24(v7, v8 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v27 = sub_1C5194194(v7, v8 - 1);
        result = (uint64_t *)sub_1C5194194(v8, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 1;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C519410C(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(_DWORD *)(*a2 + 192);
  v6 = *(_DWORD *)(*result + 192);
  v7 = *a3;
  v8 = *(_DWORD *)(*a3 + 192);
  if (v5 <= v6)
  {
    if (v8 > v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(_DWORD *)(*a2 + 192) > *(_DWORD *)(*result + 192))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 <= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*a3 + 192) <= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1C5194194(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_DWORD *)(v6 + 192) > *(_DWORD *)(*a1 + 192))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C519410C(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C519437C(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      sub_1C519437C(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(_DWORD *)(v21 + 192) > *(_DWORD *)(v22 + 192))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(_DWORD *)(*v20 + 192);
        if (v25 > *(_DWORD *)(*v19 + 192))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 > *(_DWORD *)(*v18 + 192))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 > *(_DWORD *)(*a1 + 192))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C519410C(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_DWORD *)(*v9 + 192);
    if (v14 > *(_DWORD *)(*v8 + 192))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 <= *(_DWORD *)(v13 + 192))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *sub_1C519437C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1C519410C(a1, a2, a3);
  v9 = *a3;
  if (*(_DWORD *)(*a4 + 192) > *(_DWORD *)(*a3 + 192))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(_DWORD *)(*a3 + 192) > *(_DWORD *)(*a2 + 192))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(_DWORD *)(*a2 + 192) > *(_DWORD *)(*a1 + 192))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_1C5194410(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;

  v4 = sub_1C61B75F0(***(_QWORD ***)a1, *(_DWORD *)(**(_QWORD **)a1 + 16), *a2, &v7);
  if ((_DWORD)v4)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = 0;
    if (sub_1C61B75F0(*(_QWORD *)v6, *(_DWORD *)(v6 + 16), *a2, &v7))
    {
      *v7 = -8192;
      *(int32x2_t *)(v6 + 8) = vadd_s32(*(int32x2_t *)(v6 + 8), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
  return v4;
}

uint64_t sub_1C51944AC(_DWORD *a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  _QWORD *v5;

  v5 = 0;
  result = sub_1C61F8EB4((uint64_t)a1, a2, &v5);
  if ((_DWORD)result)
  {
    *v5 = -8192;
    v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

_QWORD *sub_1C51944FC(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C4775244(a1, v7);
      v17 = 0;
      sub_1C4926528(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C4775244(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t *sub_1C519462C(uint64_t *result, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;

  v6 = result;
  v8 = (uint64_t **)(result + 1);
  v7 = (uint64_t *)result[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v7;
        v10 = v7[4];
        if (v10 <= a2)
          break;
        v7 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v10 >= a2)
        break;
      v7 = v9[1];
      if (!v7)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v9 = (uint64_t **)(result + 1);
LABEL_9:
    v11 = operator new(0x30uLL);
    v11[4] = a3;
    *((_DWORD *)v11 + 10) = a4;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v9;
    *v8 = v11;
    v12 = *(_QWORD *)*v6;
    if (v12)
    {
      *v6 = v12;
      v13 = *v8;
    }
    else
    {
      v13 = v11;
    }
    result = sub_1C4768E74((uint64_t *)v6[1], v13);
    ++v6[2];
  }
  return result;
}

_QWORD *sub_1C51946F0(uint64_t a1, char **a2, char *a3, char **a4, char *a5, _QWORD *a6, char *a7)
{
  char **v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _QWORD *result;
  __int128 v23;
  uint64_t v24;
  __int128 v25;

  if (a2 == a4)
  {
    result = sub_1C4EB9D18(&v24, a3, a5, a6, a7);
    *(_QWORD *)a1 = a4;
    *(_QWORD *)(a1 + 8) = a5;
    v23 = v25;
  }
  else
  {
    v12 = a4 - 1;
    sub_1C4EB9D18(&v24, *a4, a5, a6, a7);
    v14 = (char *)*((_QWORD *)&v25 + 1);
    v13 = (_QWORD *)v25;
    if (v12 != a2)
    {
      v15 = *(char **)v25;
      do
      {
        v16 = *v12;
        v17 = *v12 + 4096;
        while (1)
        {
          v18 = v14 - v15;
          if ((v17 - v16) >> 3 >= v18 >> 3)
            v19 = v18 >> 3;
          else
            v19 = (v17 - v16) >> 3;
          v17 -= 8 * v19;
          v14 -= 8 * v19;
          if (v19)
            memmove(v14, v17, 8 * v19);
          if (v17 == v16)
            break;
          v20 = (char *)*--v13;
          v15 = v20;
          v14 = v20 + 4096;
        }
        v15 = (char *)*v13;
        if ((char *)(*v13 + 4096) == v14)
        {
          v21 = (char *)v13[1];
          ++v13;
          v15 = v21;
          v14 = v21;
        }
        --v12;
      }
      while (v12 != a2);
    }
    result = sub_1C4EB9D18(&v24, a3, *a2 + 4096, v13, v14);
    v23 = v25;
    *(_QWORD *)a1 = a4;
    *(_QWORD *)(a1 + 8) = a5;
  }
  *(_OWORD *)(a1 + 16) = v23;
  return result;
}

void ****sub_1C5194838(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, void ***a5)
{
  _QWORD *v7;
  _BYTE *i;
  _BYTE *v9;
  void ***v11;

  v11 = a5;
  if (a1 != a3)
  {
    v7 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4096); ; i = v9 + 4096)
    {
      sub_1C4EBA3AC(&v11, a2, i);
      if (v7 == a3)
        break;
      v9 = (_BYTE *)*v7++;
      a2 = v9;
    }
    a2 = *a3;
  }
  return sub_1C4EBA3AC(&v11, a2, a4);
}

unint64_t *sub_1C51948AC(unint64_t *result, unint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  int v50;
  unint64_t *v51;
  BOOL v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  _DWORD *v96;
  int v97;

  v7 = (uint64_t)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v37 = *(a2 - 2);
        v38 = *(_QWORD *)v8;
        if (v37 < *(_QWORD *)v8)
        {
          *(_QWORD *)v8 = v37;
          *(a2 - 2) = v38;
          v39 = *(_DWORD *)(v8 + 8);
          *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v39;
        }
        return result;
      case 3:
        return sub_1C5195008((unint64_t *)v8, (unint64_t *)(v8 + 16), a2 - 2);
      case 4:
        return sub_1C51952D4(v8, v8 + 16, v8 + 32, (uint64_t)(a2 - 2));
      case 5:
        result = sub_1C51952D4(v8, v8 + 16, v8 + 32, v8 + 48);
        v40 = *(a2 - 2);
        v41 = *(_QWORD *)(v8 + 48);
        if (v40 < v41)
        {
          *(_QWORD *)(v8 + 48) = v40;
          *(a2 - 2) = v41;
          v42 = *(_DWORD *)(v8 + 56);
          *(_DWORD *)(v8 + 56) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v42;
          v43 = *(_QWORD *)(v8 + 48);
          v44 = *(_QWORD *)(v8 + 32);
          if (v43 < v44)
          {
            *(_QWORD *)(v8 + 32) = v43;
            *(_QWORD *)(v8 + 48) = v44;
            v45 = *(_DWORD *)(v8 + 40);
            v46 = *(_DWORD *)(v8 + 56);
            *(_DWORD *)(v8 + 40) = v46;
            *(_DWORD *)(v8 + 56) = v45;
            v47 = *(_QWORD *)(v8 + 16);
            if (v43 < v47)
            {
              *(_QWORD *)(v8 + 16) = v43;
              *(_QWORD *)(v8 + 32) = v47;
              v48 = *(_DWORD *)(v8 + 24);
              *(_DWORD *)(v8 + 24) = v46;
              *(_DWORD *)(v8 + 40) = v48;
              v49 = *(_QWORD *)v8;
              if (v43 < *(_QWORD *)v8)
              {
                *(_QWORD *)v8 = v43;
                *(_QWORD *)(v8 + 16) = v49;
                v50 = *(_DWORD *)(v8 + 8);
                *(_DWORD *)(v8 + 8) = v46;
                *(_DWORD *)(v8 + 24) = v50;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v51 = (unint64_t *)(v8 + 16);
          v53 = (unint64_t *)v8 == a2 || v51 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v53)
            {
              v54 = 0;
              v55 = (unint64_t *)v8;
              do
              {
                v56 = v51;
                v57 = v55[2];
                v58 = *v55;
                if (v57 < *v55)
                {
                  v59 = v55[3];
                  v60 = v54;
                  while (1)
                  {
                    v61 = v8 + v60;
                    *(_QWORD *)(v61 + 16) = v58;
                    *(_DWORD *)(v61 + 24) = *(_DWORD *)(v8 + v60 + 8);
                    if (!v60)
                      break;
                    v58 = *(_QWORD *)(v61 - 16);
                    v60 -= 16;
                    if (v57 >= v58)
                    {
                      v62 = v8 + v60 + 16;
                      goto LABEL_80;
                    }
                  }
                  v62 = v8;
LABEL_80:
                  *(_QWORD *)v62 = v57;
                  *(_DWORD *)(v62 + 8) = v59;
                }
                v51 = v56 + 2;
                v54 += 16;
                v55 = v56;
              }
              while (v56 + 2 != a2);
            }
          }
          else if (!v53)
          {
            v90 = (_DWORD *)(v8 + 24);
            do
            {
              v91 = (uint64_t)v51;
              v92 = *(_QWORD *)(v7 + 16);
              v93 = *(_QWORD *)v7;
              if (v92 < *(_QWORD *)v7)
              {
                v94 = *(_QWORD *)(v7 + 24);
                v95 = v90;
                do
                {
                  v96 = v95;
                  *((_QWORD *)v95 - 1) = v93;
                  v97 = *(v95 - 4);
                  v95 -= 4;
                  *v96 = v97;
                  v93 = *((_QWORD *)v96 - 5);
                }
                while (v92 < v93);
                *((_QWORD *)v95 - 1) = v92;
                *v95 = v94;
              }
              v51 = (unint64_t *)(v91 + 16);
              v90 += 4;
              v7 = v91;
            }
            while ((unint64_t *)(v91 + 16) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((unint64_t *)v8 != a2)
          {
            v63 = (unint64_t)(v10 - 2) >> 1;
            v64 = v63;
            do
            {
              v65 = v64;
              if (v63 >= v64)
              {
                v66 = (2 * v64) | 1;
                v67 = v8 + 16 * v66;
                v68 = *(_QWORD *)v67;
                if (2 * v65 + 2 < v10 && v68 < *(_QWORD *)(v67 + 16))
                {
                  v68 = *(_QWORD *)(v67 + 16);
                  v67 += 16;
                  v66 = 2 * v65 + 2;
                }
                v69 = (unint64_t *)(v8 + 16 * v65);
                v70 = *v69;
                if (v68 >= *v69)
                {
                  v71 = v69[1];
                  v72 = *(_QWORD *)v67;
                  do
                  {
                    v73 = v69;
                    v69 = (unint64_t *)v67;
                    *v73 = v72;
                    *((_DWORD *)v73 + 2) = *(_DWORD *)(v67 + 8);
                    if (v63 < v66)
                      break;
                    v74 = (2 * v66) | 1;
                    v67 = v8 + 16 * v74;
                    v66 = 2 * v66 + 2;
                    v72 = *(_QWORD *)v67;
                    if (v66 >= v10)
                    {
                      v66 = v74;
                    }
                    else
                    {
                      result = (unint64_t *)(v67 + 16);
                      if (v72 >= *(_QWORD *)(v67 + 16))
                      {
                        v66 = v74;
                      }
                      else
                      {
                        v72 = *(_QWORD *)(v67 + 16);
                        v67 += 16;
                      }
                    }
                  }
                  while (v70 <= v72);
                  *v69 = v70;
                  *((_DWORD *)v69 + 2) = v71;
                }
              }
              v64 = v65 - 1;
            }
            while (v65);
            do
            {
              v75 = 0;
              v76 = *(_QWORD *)v8;
              v77 = *(_DWORD *)(v8 + 8);
              v78 = v8;
              do
              {
                v79 = v78 + 16 * v75 + 16;
                v80 = (2 * v75) | 1;
                v81 = 2 * v75 + 2;
                if (v81 < v10)
                {
                  result = *(unint64_t **)(v79 + 16);
                  if (*(_QWORD *)v79 < (unint64_t)result)
                  {
                    v79 += 16;
                    v80 = v81;
                  }
                }
                *(_QWORD *)v78 = *(_QWORD *)v79;
                *(_DWORD *)(v78 + 8) = *(_DWORD *)(v79 + 8);
                v78 = v79;
                v75 = v80;
              }
              while (v80 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if ((unint64_t *)v79 == a2 - 2)
              {
                *(_QWORD *)v79 = v76;
                *(_DWORD *)(v79 + 8) = v77;
              }
              else
              {
                *(_QWORD *)v79 = *(a2 - 2);
                *(_DWORD *)(v79 + 8) = *((_DWORD *)a2 - 2);
                *(a2 - 2) = v76;
                *((_DWORD *)a2 - 2) = v77;
                v82 = v79 - v8 + 16;
                if (v82 >= 17)
                {
                  v83 = (((unint64_t)v82 >> 4) - 2) >> 1;
                  v84 = v8 + 16 * v83;
                  v85 = *(_QWORD *)v84;
                  v86 = *(_QWORD *)v79;
                  if (*(_QWORD *)v84 < *(_QWORD *)v79)
                  {
                    v87 = *(_QWORD *)(v79 + 8);
                    do
                    {
                      v88 = v79;
                      v79 = v84;
                      *(_QWORD *)v88 = v85;
                      *(_DWORD *)(v88 + 8) = *(_DWORD *)(v84 + 8);
                      if (!v83)
                        break;
                      v83 = (v83 - 1) >> 1;
                      v84 = v8 + 16 * v83;
                      v85 = *(_QWORD *)v84;
                    }
                    while (v86 > *(_QWORD *)v84);
                    *(_QWORD *)v79 = v86;
                    *(_DWORD *)(v79 + 8) = v87;
                  }
                }
              }
              a2 -= 2;
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 16 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x801)
        {
          result = sub_1C5195008((unint64_t *)(v7 + 16 * ((unint64_t)v10 >> 1)), (unint64_t *)v7, a2 - 2);
        }
        else
        {
          sub_1C5195008((unint64_t *)v7, (unint64_t *)(v7 + 16 * ((unint64_t)v10 >> 1)), a2 - 2);
          sub_1C5195008((unint64_t *)(v7 + 16), (unint64_t *)(v12 - 16), a2 - 4);
          sub_1C5195008((unint64_t *)(v7 + 32), (unint64_t *)(v7 + 16 + 16 * v11), a2 - 6);
          result = sub_1C5195008((unint64_t *)(v12 - 16), (unint64_t *)v12, (unint64_t *)(v7 + 16 + 16 * v11));
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
          LODWORD(v13) = *(_DWORD *)(v7 + 8);
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v12 + 8);
          *(_DWORD *)(v12 + 8) = v13;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *(_QWORD *)v7;
          v14 = *(_QWORD *)(v7 + 8);
          if (*(_QWORD *)(v7 - 16) < *(_QWORD *)v7)
            goto LABEL_12;
          if (v15 >= *(a2 - 2))
          {
            v29 = v7 + 16;
            do
            {
              v8 = v29;
              if (v29 >= (unint64_t)a2)
                break;
              v29 += 16;
            }
            while (v15 >= *(_QWORD *)v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = *(_QWORD *)(v8 + 16);
              v8 += 16;
            }
            while (v15 >= v28);
          }
          v30 = a2;
          if (v8 < (unint64_t)a2)
          {
            v30 = a2;
            do
            {
              v31 = *(v30 - 2);
              v30 -= 2;
            }
            while (v15 < v31);
          }
          if (v8 < (unint64_t)v30)
          {
            v32 = *(_QWORD *)v8;
            v33 = *v30;
            do
            {
              *(_QWORD *)v8 = v33;
              *v30 = v32;
              v34 = *(_DWORD *)(v8 + 8);
              *(_DWORD *)(v8 + 8) = *((_DWORD *)v30 + 2);
              *((_DWORD *)v30 + 2) = v34;
              do
              {
                v35 = *(_QWORD *)(v8 + 16);
                v8 += 16;
                v32 = v35;
              }
              while (v15 >= v35);
              do
              {
                v36 = *(v30 - 2);
                v30 -= 2;
                v33 = v36;
              }
              while (v15 < v36);
            }
            while (v8 < (unint64_t)v30);
          }
          if (v8 - 16 != v7)
          {
            *(_QWORD *)v7 = *(_QWORD *)(v8 - 16);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 8);
          }
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v15;
          *(_DWORD *)(v8 - 8) = v14;
          continue;
        }
        v15 = *(_QWORD *)v7;
        v14 = *(_QWORD *)(v7 + 8);
LABEL_12:
        v16 = 0;
        do
        {
          v17 = *(_QWORD *)(v7 + v16 + 16);
          v16 += 16;
        }
        while (v15 > v17);
        v18 = v7 + v16;
        v19 = a2;
        if (v16 == 16)
        {
          v19 = a2;
          do
          {
            if (v18 >= (unint64_t)v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (v15 <= v21);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (v15 <= v20);
        }
        if (v18 >= (unint64_t)v19)
        {
          v8 = v7 + v16;
        }
        else
        {
          v22 = *v19;
          v8 = v7 + v16;
          v23 = v19;
          do
          {
            *(_QWORD *)v8 = v22;
            *v23 = v17;
            v24 = *(_DWORD *)(v8 + 8);
            *(_DWORD *)(v8 + 8) = *((_DWORD *)v23 + 2);
            *((_DWORD *)v23 + 2) = v24;
            do
            {
              v25 = *(_QWORD *)(v8 + 16);
              v8 += 16;
              v17 = v25;
            }
            while (v15 > v25);
            do
            {
              v26 = *(v23 - 2);
              v23 -= 2;
              v22 = v26;
            }
            while (v15 <= v26);
          }
          while (v8 < (unint64_t)v23);
        }
        if (v8 - 16 != v7)
        {
          *(_QWORD *)v7 = *(_QWORD *)(v8 - 16);
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 8);
        }
        *(_QWORD *)(v8 - 16) = v15;
        *(_DWORD *)(v8 - 8) = v14;
        if (v18 < (unint64_t)v19)
        {
LABEL_33:
          result = (unint64_t *)sub_1C51948AC(v7, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v27 = sub_1C51950C8(v7, (unint64_t *)(v8 - 16));
        result = (unint64_t *)sub_1C51950C8(v8, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_33;
        }
        a2 = (unint64_t *)(v8 - 16);
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

unint64_t *sub_1C5195008(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 >= *result)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      v7 = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
      *((_DWORD *)a3 + 2) = v7;
      v8 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v8;
        v9 = *((_DWORD *)result + 2);
        *((_DWORD *)result + 2) = *((_DWORD *)a2 + 2);
        *((_DWORD *)a2 + 2) = v9;
      }
    }
  }
  else if (v5 >= v3)
  {
    *result = v3;
    *a2 = v4;
    v10 = *((_DWORD *)result + 2);
    *((_DWORD *)result + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v10;
    if (*a3 < v4)
    {
      *a2 = *a3;
      *a3 = v4;
      *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
      *((_DWORD *)a3 + 2) = v10;
    }
  }
  else
  {
    *result = v5;
    *a3 = v4;
    v6 = *((_DWORD *)result + 2);
    *((_DWORD *)result + 2) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = v6;
  }
  return result;
}

BOOL sub_1C51950C8(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *(_QWORD *)a1;
      if (v6 < *(_QWORD *)a1)
      {
        *(_QWORD *)a1 = v6;
        *(a2 - 2) = v7;
        v8 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v8;
      }
      return result;
    case 3:
      sub_1C5195008((unint64_t *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      sub_1C51952D4(a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 2));
      return 1;
    case 5:
      sub_1C51952D4(a1, a1 + 16, a1 + 32, a1 + 48);
      v19 = *(a2 - 2);
      v20 = *(_QWORD *)(a1 + 48);
      if (v19 < v20)
      {
        *(_QWORD *)(a1 + 48) = v19;
        *(a2 - 2) = v20;
        v21 = *(_DWORD *)(a1 + 56);
        *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v21;
        v22 = *(_QWORD *)(a1 + 48);
        v23 = *(_QWORD *)(a1 + 32);
        if (v22 < v23)
        {
          *(_QWORD *)(a1 + 32) = v22;
          *(_QWORD *)(a1 + 48) = v23;
          v24 = *(_DWORD *)(a1 + 40);
          v25 = *(_DWORD *)(a1 + 56);
          *(_DWORD *)(a1 + 40) = v25;
          *(_DWORD *)(a1 + 56) = v24;
          v26 = *(_QWORD *)(a1 + 16);
          if (v22 < v26)
          {
            *(_QWORD *)(a1 + 16) = v22;
            *(_QWORD *)(a1 + 32) = v26;
            v27 = *(_DWORD *)(a1 + 24);
            *(_DWORD *)(a1 + 24) = v25;
            *(_DWORD *)(a1 + 40) = v27;
            v28 = *(_QWORD *)a1;
            if (v22 < *(_QWORD *)a1)
            {
              *(_QWORD *)a1 = v22;
              *(_QWORD *)(a1 + 16) = v28;
              v29 = *(_DWORD *)(a1 + 8);
              *(_DWORD *)(a1 + 8) = v25;
              *(_DWORD *)(a1 + 24) = v29;
            }
          }
        }
      }
      return 1;
    default:
      v9 = (unint64_t *)(a1 + 32);
      sub_1C5195008((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v10 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *v10;
    v14 = *v9;
    if (*v10 < *v9)
    {
      v15 = v10[1];
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        *(_QWORD *)(v17 + 48) = v14;
        *(_DWORD *)(v17 + 56) = *(_DWORD *)(a1 + v16 + 40);
        if (v16 == -32)
          break;
        v14 = *(_QWORD *)(v17 + 16);
        v16 -= 16;
        if (v13 >= v14)
        {
          v18 = a1 + v16 + 48;
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *(_QWORD *)v18 = v13;
      *(_DWORD *)(v18 + 8) = v15;
      if (++v12 == 8)
        return v10 + 2 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2)
      return 1;
  }
}

unint64_t *sub_1C51952D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *result;
  unint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;

  result = sub_1C5195008((unint64_t *)a1, (unint64_t *)a2, (unint64_t *)a3);
  v9 = *(_QWORD *)a3;
  if (*(_QWORD *)a4 < *(_QWORD *)a3)
  {
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v9;
    v10 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v10;
    v11 = *(_QWORD *)a2;
    if (*(_QWORD *)a3 < *(_QWORD *)a2)
    {
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v11;
      v12 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v12;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a2 < *(_QWORD *)a1)
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v13;
        v14 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v14;
      }
    }
  }
  return result;
}

uint64_t sub_1C5195380()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;
  int v5;

  v5 = 1;
  v3 = 1;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Enable Software Pipelining";
  v1.n128_u64[1] = 26;
  sub_1C6199F14((llvm::cl::Option *)&unk_1ED7FB360, "enable-pipeliner", &v5, &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FB360, &dword_1C475E000);
  v1.n128_u64[0] = (unint64_t)"Enable SWP at Os.";
  v1.n128_u64[1] = 17;
  v5 = 1;
  LOBYTE(v2) = 0;
  v4 = (char *)&v2;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED7FB420, "enable-pipeliner-opt-size", &v1, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FB420, &dword_1C475E000);
  v1.n128_u64[0] = (unint64_t)"Size limit for the MII.";
  v1.n128_u64[1] = 23;
  v5 = 1;
  v2 = 27;
  v4 = (char *)&v2;
  sub_1C61F8494((llvm::cl::Option *)&unk_1ED7FB4E0, "pipeliner-max-mii", &v1, &v5, (_DWORD **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED7FB4E0, &dword_1C475E000);
  v1.n128_u64[0] = (unint64_t)"Maximum stages allowed in the generated scheduled.";
  v1.n128_u64[1] = 50;
  v5 = 1;
  v2 = 3;
  v4 = (char *)&v2;
  sub_1C61F8494((llvm::cl::Option *)&unk_1ED7FB5A0, "pipeliner-max-stages", &v1, &v5, (_DWORD **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED7FB5A0, &dword_1C475E000);
  v1.n128_u64[0] = (unint64_t)"Prune dependences between unrelated Phi nodes.";
  v1.n128_u64[1] = 46;
  v5 = 1;
  LOBYTE(v2) = 1;
  v4 = (char *)&v2;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED7FB660, "pipeliner-prune-deps", &v1, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FB660, &dword_1C475E000);
  v1.n128_u64[0] = (unint64_t)"Prune loop carried order dependences.";
  v1.n128_u64[1] = 37;
  v5 = 1;
  LOBYTE(v2) = 1;
  v4 = (char *)&v2;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED7FB720, "pipeliner-prune-loop-carried", &v1, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FB720, &dword_1C475E000);
  v5 = 2;
  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Ignore RecMII";
  v1.n128_u64[1] = 13;
  sub_1C6199F14((llvm::cl::Option *)&unk_1ED7FB7E0, "pipeliner-ignore-recmii", &v5, &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FB7E0, &dword_1C475E000);
  LODWORD(v4) = 1;
  LOBYTE(v5) = 0;
  v1.n128_u64[0] = (unint64_t)&v5;
  sub_1C61F8540(&v4, (char **)&v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7FB8A0, &dword_1C475E000);
  LODWORD(v4) = 1;
  LOBYTE(v5) = 0;
  v1.n128_u64[0] = (unint64_t)&v5;
  sub_1C617ACEC((uint64_t)&unk_1ED7FB960, "pipeliner-dbg-res", &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FB960, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 0;
  v4 = (char *)&v2;
  v1.n128_u64[0] = (unint64_t)"Instead of emitting the pipelined code, annotate instructions with the generated sc"
                                     "hedule for feeding into the -modulo-schedule-test pass";
  v1.n128_u64[1] = 137;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7FBA20, "pipeliner-annotate-for-testing", &v5, &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FBA20, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 0;
  v4 = (char *)&v2;
  v1.n128_u64[0] = (unint64_t)"Use the experimental peeling code generator for software pipelining";
  v1.n128_u64[1] = 67;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7FBAE0, "pipeliner-experimental-cg", &v5, &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FBAE0, &dword_1C475E000);
  v5 = 2;
  v3 = 1;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Enable CopyToPhi DAG Mutation";
  v1.n128_u64[1] = 29;
  sub_1C61F8614(&v5, &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::SwpEnableCopyToPhi, &dword_1C475E000);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::DominatorTreeBase(uint64_t a1, uint64_t a2)
{
  void *v4;
  unsigned int v5;
  const void *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v13;

  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x400000000;
  if (a1 != a2)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (v5)
    {
      v6 = *(const void **)a2;
      if (*(_QWORD *)a2 != a2 + 16)
      {
        *(_QWORD *)a1 = v6;
        v13 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 8) = v5;
        *(_DWORD *)(a1 + 12) = v13;
        *(_QWORD *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
        goto LABEL_8;
      }
      if (v5 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, *(unsigned int *)(a2 + 8), 8);
        v7 = *(_DWORD *)(a2 + 8);
        if (!v7)
          goto LABEL_7;
        v6 = *(const void **)a2;
        v4 = *(void **)a1;
      }
      else
      {
        v7 = *(_DWORD *)(a2 + 8);
      }
      memcpy(v4, v6, 8 * v7);
LABEL_7:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_8:
      *(_DWORD *)(a2 + 8) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  v9 = *(_QWORD *)(a2 + 48);
  v8 = a2 + 48;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)v8 = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v8 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 60);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(v8 + 12);
  *(_DWORD *)(v8 + 12) = v10;
  v11 = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v8 + 16);
  *(_DWORD *)(v8 + 16) = v11;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(v8 + 24);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(v8 + 40);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(v8 + 44);
  sub_1C4EF5C94((uint64_t *)v8);
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  return a1;
}

{
  return __ZN4llvm17DominatorTreeBaseINS_17MachineBasicBlockELb1EEC2EOS2_(a1, a2);
}

uint64_t *llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::wipe(uint64_t *a1)
{
  uint64_t *result;

  result = sub_1C4EF5C94(a1 + 6);
  a1[9] = 0;
  a1[10] = 0;
  return result;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = *(const void **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v11 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v11);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v6 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = a2 + 16;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_10;
    }
    v6 = (_DWORD *)(a2 + 8);
    v5 = *(unsigned int *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v5)
    {
      if ((_DWORD)v5)
        memmove(*(void **)a1, v4, 8 * v5);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 8);
    }
    else if ((_DWORD)v7)
    {
      v12 = *(unsigned int *)(a1 + 8);
      memmove(*(void **)a1, v4, 8 * v7);
      v8 = v12;
LABEL_7:
      v9 = *v6;
      if (v8 != v9)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v8), (const void *)(*(_QWORD *)a2 + 8 * v8), *(_QWORD *)a2 + 8 * v9 - (*(_QWORD *)a2 + 8 * v8));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_10:
      *v6 = 0;
      goto LABEL_11;
    }
    v8 = 0;
    goto LABEL_7;
  }
LABEL_11:
  sub_1C514F874((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  sub_1C4EF5C94((uint64_t *)(a2 + 48));
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  return a1;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::root_begin(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::root_end(uint64_t a1)
{
  return *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8);
}

{
  return *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::root_size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::roots(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::isPostDominator()
{
  return 1;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::compare(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  _QWORD *v19;
  uint64_t result;

  if (*(_QWORD *)(a1 + 80) != *(_QWORD *)(a2 + 80))
    return 1;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 != *(_DWORD *)(a2 + 8))
    return 1;
  if (!sub_1C5151CDC(*(char **)a1, (char *)(*(_QWORD *)a1 + 8 * v4), *(_QWORD **)a2))
    return 1;
  v5 = *(_DWORD *)(a1 + 56);
  if (v5 != *(_DWORD *)(a2 + 56))
    return 1;
  v6 = *(_QWORD **)(a1 + 48);
  v7 = *(unsigned int *)(a1 + 64);
  v8 = &v6[2 * v7];
  if (v5)
  {
    if ((_DWORD)v7)
    {
      v9 = 16 * v7;
      v10 = v6;
      while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v10 += 2;
        v9 -= 16;
        if (!v9)
          goto LABEL_10;
      }
    }
    else
    {
      v10 = v6;
    }
  }
  else
  {
LABEL_10:
    v10 = &v6[2 * v7];
  }
  v11 = &v6[2 * v7];
  if (v10 != v11)
  {
    while (1)
    {
      v12 = *(_QWORD *)(a2 + 48);
      v13 = *(unsigned int *)(a2 + 64);
      if ((_DWORD)v13)
      {
        LODWORD(v14) = ((*v10 >> 4) ^ (*v10 >> 9)) & (v13 - 1);
        v15 = (uint64_t *)(v12 + 16 * v14);
        v16 = *v15;
        if (*v10 == *v15)
          goto LABEL_20;
        v17 = 1;
        while (v16 != -4096)
        {
          v18 = v14 + v17++;
          v14 = v18 & (v13 - 1);
          v16 = *(_QWORD *)(v12 + 16 * v14);
          if (*v10 == v16)
          {
            v15 = (uint64_t *)(v12 + 16 * v14);
            goto LABEL_20;
          }
        }
      }
      v15 = (uint64_t *)(v12 + 16 * v13);
LABEL_20:
      if (v15 == (uint64_t *)(v12 + 16 * v13)
        || (llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::compare(v10[1], v15[1]) & 1) != 0)
      {
        return 1;
      }
      v19 = v10 + 2;
      v10 = v8;
      if (v19 != v8)
      {
        v10 = v19;
        while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v10 += 2;
          if (v10 == v8)
          {
            v10 = v8;
            break;
          }
        }
      }
      result = 0;
      if (v10 == v11)
        return result;
    }
  }
  return 0;
}

{
  return __ZNK4llvm17DominatorTreeBaseINS_17MachineBasicBlockELb1EE7compareERKS2_(a1, a2);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::getNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_3;
    v8 = 1;
    while (v6 != -4096)
    {
      v9 = v4 + v8++;
      v4 = v9 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_3;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_3:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    return 0;
  else
    return v5[1];
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    return 0;
  else
    return v5[1];
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::getRootNode(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

{
  return *(_QWORD *)(a1 + 72);
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::getDescendants(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  unsigned int v17;
  int v18;
  _QWORD v19[9];

  v19[8] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a3 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(unsigned int *)(a1 + 64);
  if (!(_DWORD)v5)
  {
LABEL_7:
    v7 = (uint64_t *)(v4 + 16 * v5);
    goto LABEL_8;
  }
  LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (uint64_t *)(v4 + 16 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(_QWORD *)(v4 + 16 * v6);
      if (v8 == a2)
      {
        v7 = (uint64_t *)(v4 + 16 * v6);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v7 != (uint64_t *)(v4 + 16 * v5))
  {
    v11 = v7[1];
    if (v11)
    {
      v16 = v19;
      v18 = 8;
      v19[0] = v11;
      v12 = 1;
      do
      {
        v13 = (uint64_t *)*((_QWORD *)v16 + v12 - 1);
        v17 = v12 - 1;
        v14 = *v13;
        v15 = *(unsigned int *)(a3 + 8);
        if (v15 >= *(unsigned int *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
          v15 = *(unsigned int *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
        ++*(_DWORD *)(a3 + 8);
        sub_1C6177054((unsigned int *)&v16, (char *)v13[3], (char *)(v13[3] + 8 * *((unsigned int *)v13 + 8)));
        v12 = v17;
      }
      while (v17);
      if (v16 != v19)
        free(v16);
    }
  }
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::properlyDominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  result = 0;
  if (a2 != a3 && a2 && a3)
  {
    if (*(_QWORD *)(a3 + 8) == a2)
      return 1;
    if (*(_QWORD *)(a2 + 8) == a3)
      return 0;
    v5 = *(_DWORD *)(a2 + 16);
    if (v5 >= *(_DWORD *)(a3 + 16))
      return 0;
    if (*(_BYTE *)(a1 + 88))
    {
      if (*(_DWORD *)(a3 + 72) >= *(_DWORD *)(a2 + 72))
      {
        v6 = *(_DWORD *)(a3 + 76) > *(_DWORD *)(a2 + 76);
        return !v6;
      }
      return 0;
    }
    v7 = *(_DWORD *)(a1 + 92) + 1;
    *(_DWORD *)(a1 + 92) = v7;
    if (v7 > 0x20)
    {
      v9 = a3;
      llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::updateDFSNumbers(a1);
      if (*(_DWORD *)(v9 + 72) >= *(_DWORD *)(a2 + 72))
      {
        v6 = *(_DWORD *)(v9 + 76) > *(_DWORD *)(a2 + 76);
        return !v6;
      }
      return 0;
    }
    do
    {
      v8 = a3;
      a3 = *(_QWORD *)(a3 + 8);
    }
    while (a3 && *(_DWORD *)(a3 + 16) >= v5);
    return v8 == a2;
  }
  return result;
}

BOOL llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::dominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BOOL4 v6;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v3 = a3;
  v6 = a3 != a2 && a3 != 0;
  if (!v6 || a2 == 0)
  {
    if (!v6)
      return 1;
    if (!a2)
      return 0;
    if (*(_QWORD *)(a3 + 8) == a2)
      return 1;
    if (*(_QWORD *)(a2 + 8) == a3)
      return 0;
    v12 = *(_DWORD *)(a2 + 16);
    if (v12 >= *(_DWORD *)(a3 + 16))
      return 0;
    if (*(_BYTE *)(a1 + 88))
    {
LABEL_17:
      if (*(_DWORD *)(v3 + 72) >= *(_DWORD *)(a2 + 72))
        return *(_DWORD *)(v3 + 76) <= *(_DWORD *)(a2 + 76);
      return 0;
    }
    v13 = *(_DWORD *)(a1 + 92) + 1;
    *(_DWORD *)(a1 + 92) = v13;
    if (v13 <= 0x20)
    {
      do
      {
        v11 = v3;
        v3 = *(_QWORD *)(v3 + 8);
      }
      while (v3 && *(_DWORD *)(v3 + 16) >= v12);
      return v11 == a2;
    }
LABEL_33:
    llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::updateDFSNumbers(a1);
    goto LABEL_17;
  }
  if (*(_QWORD *)(a3 + 8) == a2)
    return 1;
  if (*(_QWORD *)(a2 + 8) == a3)
    return 0;
  v9 = *(_DWORD *)(a2 + 16);
  if (v9 >= *(_DWORD *)(a3 + 16))
    return 0;
  if (*(_BYTE *)(a1 + 88))
    goto LABEL_17;
  v10 = *(_DWORD *)(a1 + 92) + 1;
  *(_DWORD *)(a1 + 92) = v10;
  if (v10 > 0x20)
    goto LABEL_33;
  do
  {
    v11 = v3;
    v3 = *(_QWORD *)(v3 + 8);
  }
  while (v3 && *(_DWORD *)(v3 + 16) >= v9);
  return v11 == a2;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a2 == a3)
    return 1;
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t *)(v3 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_10;
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(_QWORD *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_10;
      }
    }
  }
  v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_10:
  v11 = (uint64_t *)(v3 + 16 * v4);
  if (v6 == v11)
  {
    v12 = 0;
    if (!(_DWORD)v4)
      return 1;
  }
  else
  {
    v12 = v6[1];
    if (!(_DWORD)v4)
      return 1;
  }
  v13 = v4 - 1;
  LODWORD(v4) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v14 = (uint64_t *)(v3 + 16 * v4);
  v15 = *v14;
  if (*v14 != a3)
  {
    v16 = 1;
    while (v15 != -4096)
    {
      v17 = v4 + v16++;
      v4 = v17 & v13;
      v15 = *(_QWORD *)(v3 + 16 * v4);
      if (v15 == a3)
      {
        v14 = (uint64_t *)(v3 + 16 * v4);
        goto LABEL_19;
      }
    }
    return 1;
  }
LABEL_19:
  if (v14 == v11)
    return 1;
  v18 = v14[1];
  if (v18 == v12 || v18 == 0)
    return 1;
  if (!v12)
    return 0;
  if (*(_QWORD *)(v18 + 8) == v12)
    return 1;
  if (*(_QWORD *)(v12 + 8) == v18)
    return 0;
  v20 = *(_DWORD *)(v12 + 16);
  if (v20 >= *(_DWORD *)(v18 + 16))
    return 0;
  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_DWORD *)(v18 + 72) >= *(_DWORD *)(v12 + 72))
    {
      v21 = *(_DWORD *)(v18 + 76) > *(_DWORD *)(v12 + 76);
      return !v21;
    }
    return 0;
  }
  v22 = *(_DWORD *)(a1 + 92) + 1;
  *(_DWORD *)(a1 + 92) = v22;
  if (v22 > 0x20)
  {
    v24 = v12;
    v25 = v18;
    llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::updateDFSNumbers(a1);
    if (*(_DWORD *)(v25 + 72) >= *(_DWORD *)(v24 + 72))
    {
      v21 = *(_DWORD *)(v25 + 76) > *(_DWORD *)(v24 + 76);
      return !v21;
    }
    return 0;
  }
  do
  {
    v23 = v18;
    v18 = *(_QWORD *)(v18 + 8);
  }
  while (v18 && *(_DWORD *)(v18 + 16) >= v20);
  return v23 == v12;
}

{
  return __ZNK4llvm17DominatorTreeBaseINS_17MachineBasicBlockELb1EE9dominatesEPKS1_S4_(a1, a2, a3);
}

BOOL llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::properlyDominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a2 == a3)
    return 0;
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t *)(v3 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_10;
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(_QWORD *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_10;
      }
    }
  }
  v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_10:
  v11 = (uint64_t *)(v3 + 16 * v4);
  if (v6 == v11)
  {
    v12 = 0;
    if (!(_DWORD)v4)
      return 1;
  }
  else
  {
    v12 = v6[1];
    if (!(_DWORD)v4)
      return 1;
  }
  v13 = v4 - 1;
  LODWORD(v4) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v14 = (uint64_t *)(v3 + 16 * v4);
  v15 = *v14;
  if (*v14 != a3)
  {
    v16 = 1;
    while (v15 != -4096)
    {
      v17 = v4 + v16++;
      v4 = v17 & v13;
      v15 = *(_QWORD *)(v3 + 16 * v4);
      if (v15 == a3)
      {
        v14 = (uint64_t *)(v3 + 16 * v4);
        goto LABEL_19;
      }
    }
    return 1;
  }
LABEL_19:
  if (v14 == v11)
    return 1;
  v18 = v14[1];
  if (v18 == v12 || v18 == 0)
    return 1;
  if (!v12)
    return 0;
  if (*(_QWORD *)(v18 + 8) == v12)
    return 1;
  if (*(_QWORD *)(v12 + 8) == v18)
    return 0;
  v20 = *(_DWORD *)(v12 + 16);
  if (v20 >= *(_DWORD *)(v18 + 16))
    return 0;
  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_DWORD *)(v18 + 72) >= *(_DWORD *)(v12 + 72))
    {
      v21 = *(_DWORD *)(v18 + 76) > *(_DWORD *)(v12 + 76);
      return !v21;
    }
    return 0;
  }
  v22 = *(_DWORD *)(a1 + 92) + 1;
  *(_DWORD *)(a1 + 92) = v22;
  if (v22 > 0x20)
  {
    v24 = v12;
    v25 = v18;
    llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::updateDFSNumbers(a1);
    if (*(_DWORD *)(v25 + 72) >= *(_DWORD *)(v24 + 72))
    {
      v21 = *(_DWORD *)(v25 + 76) > *(_DWORD *)(v24 + 76);
      return !v21;
    }
    return 0;
  }
  do
  {
    v23 = v18;
    v18 = *(_QWORD *)(v18 + 8);
  }
  while (v18 && *(_DWORD *)(v18 + 16) >= v20);
  return v23 == v12;
}

{
  return __ZNK4llvm17DominatorTreeBaseINS_17MachineBasicBlockELb1EE17properlyDominatesEPKS1_S4_(a1, a2, a3);
}

BOOL llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::isReachableFromEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      return v5 != (uint64_t *)(v2 + 16 * v3) && v5[1] != 0;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        return v5 != (uint64_t *)(v2 + 16 * v3) && v5[1] != 0;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
  return v5 != (uint64_t *)(v2 + 16 * v3) && v5[1] != 0;
}

{
  return a2 != 0;
}

{
  return __ZNK4llvm17DominatorTreeBaseINS_17MachineBasicBlockELb1EE20isReachableFromEntryEPKS1_(a1, a2);
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::updateDFSNumbers(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD v18[65];

  v18[64] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 88))
  {
    *(_DWORD *)(a1 + 92) = 0;
  }
  else
  {
    v15 = v18;
    v17 = 32;
    v2 = *(_QWORD *)(a1 + 72);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      v18[0] = *(_QWORD *)(a1 + 72);
      v18[1] = v3;
      v4 = 1;
      v16 = 1;
      *(_DWORD *)(v2 + 72) = 0;
      v5 = 1;
      do
      {
        v6 = (char *)v15;
        v7 = v5;
        v8 = (char *)v15 + 16 * v5;
        v10 = *((_QWORD *)v8 - 2);
        v9 = (uint64_t *)*((_QWORD *)v8 - 1);
        if (v9 == (uint64_t *)(*(_QWORD *)(v10 + 24) + 8 * *(unsigned int *)(v10 + 32)))
        {
          *(_DWORD *)(v10 + 76) = v4;
          v5 = v7 - 1;
          v16 = v7 - 1;
        }
        else
        {
          v11 = *v9;
          *((_QWORD *)v8 - 1) = v9 + 1;
          v12 = *(_QWORD *)(v11 + 24);
          if (v7 >= v17)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, (uint64_t)v18, v7 + 1, 16);
            v6 = (char *)v15;
            v7 = v16;
          }
          v13 = &v6[16 * v7];
          *(_QWORD *)v13 = v11;
          *((_QWORD *)v13 + 1) = v12;
          v5 = ++v16;
          *(_DWORD *)(v11 + 72) = v4;
        }
        ++v4;
      }
      while (v5);
      v14 = v15;
      *(_DWORD *)(a1 + 92) = 0;
      *(_BYTE *)(a1 + 88) = 1;
      if (v14 != v18)
        free(v14);
    }
  }
}

{
  __ZNK4llvm17DominatorTreeBaseINS_17MachineBasicBlockELb1EE16updateDFSNumbersEv(a1);
}

BOOL llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::dominatedBySlowTreeWalk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  do
  {
    v3 = a3;
    a3 = *(_QWORD *)(a3 + 8);
  }
  while (a3 && *(_DWORD *)(a3 + 16) >= *(_DWORD *)(a2 + 16));
  return v3 == a2;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::getRoot(uint64_t a1)
{
  return **(_QWORD **)a1;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  _DWORD *v21;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t *)(v3 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_8;
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(_QWORD *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_8;
      }
    }
  }
  v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_8:
  v10 = (uint64_t *)(v3 + 16 * v4);
  if (v6 == v10)
  {
    v11 = 0;
    if (!(_DWORD)v4)
      goto LABEL_19;
  }
  else
  {
    v11 = (_DWORD *)v6[1];
    if (!(_DWORD)v4)
      goto LABEL_19;
  }
  v12 = v4 - 1;
  LODWORD(v4) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v13 = (uint64_t *)(v3 + 16 * v4);
  v14 = *v13;
  if (*v13 == a3)
  {
LABEL_17:
    if (v13 != v10)
    {
      v17 = (_DWORD *)v13[1];
      goto LABEL_20;
    }
  }
  else
  {
    v15 = 1;
    while (v14 != -4096)
    {
      v16 = v4 + v15++;
      v4 = v16 & v12;
      v14 = *(_QWORD *)(v3 + 16 * v4);
      if (v14 == a3)
      {
        v13 = (uint64_t *)(v3 + 16 * v4);
        goto LABEL_17;
      }
    }
  }
LABEL_19:
  v17 = 0;
LABEL_20:
  if (v11 == v17)
  {
    v17 = v11;
  }
  else
  {
    do
    {
      v18 = v11[4];
      v19 = v17[4];
      v20 = v18 >= v19;
      if (v18 >= v19)
        v21 = v11;
      else
        v21 = v17;
      if (!v20)
        v17 = v11;
      v11 = (_DWORD *)*((_QWORD *)v21 + 1);
    }
    while (v11 != v17);
  }
  return *(_QWORD *)v17;
}

{
  return __ZNK4llvm17DominatorTreeBaseINS_17MachineBasicBlockELb1EE26findNearestCommonDominatorEPS1_S3_(a1, a2, a3);
}

BOOL llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::isVirtualRoot(uint64_t a1, _QWORD *a2)
{
  return *a2 == 0;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::applyUpdates(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _BYTE v5[296];
  uint64_t v6;
  void *v7;
  _QWORD v8[9];

  v8[8] = *MEMORY[0x1E0C80C00];
  sub_1C5197A08((uint64_t)v5, a2, a3, 1u);
  sub_1C5197BA8(a1, (uint64_t)v5, 0);
  if (v7 != v8)
    free(v7);
  sub_1C5151CA4((uint64_t)&v6);
  return sub_1C5151CA4((uint64_t)v5);
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::applyUpdates(uint64_t a1, _BYTE *a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  _BYTE v8[296];
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _BYTE v14[48];
  _BYTE v15[296];
  _BYTE v16[304];
  void *v17;
  _QWORD v18[9];

  v18[8] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v12 = v14;
    v13 = 0x300000000;
    sub_1C612E234((unsigned int *)&v12, a2, &a2[16 * a3]);
    sub_1C5157BAC((unsigned int *)&v12, (uint64_t)v12 + 16 * v13, a4, &a4[a5]);
    sub_1C5197A08((uint64_t)v15, (unint64_t *)v12, v13, 1u);
    sub_1C5197A08((uint64_t)v8, (unint64_t *)a4, a5, 0);
    sub_1C5197BA8(a1, (uint64_t)v15, (uint64_t)v8);
    if (v10 != &v11)
      free(v10);
    sub_1C5151CA4((uint64_t)&v9);
    sub_1C5151CA4((uint64_t)v8);
    if (v17 != v18)
      free(v17);
    sub_1C5151CA4((uint64_t)v16);
    sub_1C5151CA4((uint64_t)v15);
    if (v12 != v14)
      free(v12);
  }
  else
  {
    sub_1C5197A08((uint64_t)v15, (unint64_t *)a4, a5, 0);
    sub_1C5197BA8(a1, (uint64_t)v15, (uint64_t)v15);
    if (v17 != v18)
      free(v17);
    sub_1C5151CA4((uint64_t)v16);
    sub_1C5151CA4((uint64_t)v15);
  }
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::insertEdge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C5197D10(a1, 0, a3, a2);
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::deleteEdge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C51985A4(a1, 0, a3, a2);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::addNewBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    v6 = (uint64_t *)(v3 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
      goto LABEL_8;
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(_QWORD *)(v3 + 16 * v5);
      if (v7 == a3)
      {
        v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_8;
      }
    }
  }
  v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_8:
  if (v6 == (uint64_t *)(v3 + 16 * v4))
    v10 = 0;
  else
    v10 = v6[1];
  *(_BYTE *)(a1 + 88) = 0;
  return llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::createChild(a1, a2, v10);
}

{
  return __ZN4llvm17DominatorTreeBaseINS_17MachineBasicBlockELb1EE11addNewBlockEPS1_S3_(a1, a2, a3);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::createChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v25;
  void *v26;
  uint64_t v27;

  v27 = a2;
  v6 = operator new();
  v7 = v6;
  *(_QWORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = a3;
  if (a3)
    v8 = *(_DWORD *)(a3 + 16) + 1;
  else
    v8 = 0;
  *(_DWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 24) = v6 + 40;
  *(_QWORD *)(v6 + 32) = 0x400000000;
  *(_QWORD *)(v6 + 72) = -1;
  v9 = *(unsigned int *)(a3 + 32);
  if (v9 >= *(_DWORD *)(a3 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 24, a3 + 40, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * v9) = v7;
  ++*(_DWORD *)(a3 + 32);
  v12 = *(_QWORD *)(a1 + 48);
  v11 = a1 + 48;
  v10 = v12;
  v13 = *(_DWORD *)(v11 + 16);
  if (v13)
  {
    v14 = v13 - 1;
    v15 = v14 & ((a2 >> 4) ^ (a2 >> 9));
    v16 = (_QWORD *)(v10 + 16 * v15);
    v17 = *v16;
    if (*v16 == a2)
      goto LABEL_20;
    v18 = 0;
    v19 = 1;
    while (v17 != -4096)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v17 == -8192;
      if (v20)
        v18 = v16;
      v21 = v15 + v19++;
      v15 = v21 & v14;
      v16 = (_QWORD *)(v10 + 16 * v15);
      v17 = *v16;
      if (*v16 == a2)
        goto LABEL_20;
    }
    if (v18)
      v22 = v18;
    else
      v22 = v16;
  }
  else
  {
    v22 = 0;
  }
  v16 = sub_1C50F392C(v11, (uint64_t)&v27, &v27, v22);
  *v16 = v27;
  v16[1] = 0;
LABEL_20:
  v23 = v16[1];
  v16[1] = v7;
  if (v23)
  {
    v25 = v16;
    v26 = *(void **)(v23 + 24);
    if (v26 != (void *)(v23 + 40))
      free(v26);
    MEMORY[0x1CAA32FC0](v23, 0x10A0C40528A66C4);
    return v25[1];
  }
  return v7;
}

{
  return __ZN4llvm17DominatorTreeBaseINS_17MachineBasicBlockELb1EE11createChildEPS1_PNS_15DomTreeNodeBaseIS1_EE(a1, a2, a3);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::setNewRoot(uint64_t a1, uint64_t a2)
{
  uint64_t Node;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  int v17;
  _QWORD *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  BOOL v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;

  *(_BYTE *)(a1 + 88) = 0;
  Node = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::createNode(a1, a2);
  if (!*(_DWORD *)(a1 + 8))
  {
    if (*(_DWORD *)(a1 + 12))
    {
      v5 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, 1uLL, 8);
      v5 = *(unsigned int *)(a1 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = a2;
    ++*(_DWORD *)(a1 + 8);
    goto LABEL_5;
  }
  v7 = **(_QWORD **)a1;
  v32 = v7;
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_DWORD *)(a1 + 64);
  if (v9)
  {
    v10 = v9 - 1;
    v11 = ((v7 >> 4) ^ (v7 >> 9)) & (v9 - 1);
    v12 = (_QWORD *)(v8 + 16 * v11);
    v13 = *v12;
    if (v7 == *v12)
    {
      v19 = v12 + 1;
      goto LABEL_24;
    }
    v14 = 0;
    v15 = 1;
    while (v13 != -4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == -8192;
      if (v16)
        v14 = v12;
      v17 = v11 + v15++;
      LODWORD(v11) = v17 & v10;
      v12 = (_QWORD *)(v8 + 16 * v11);
      v13 = *v12;
      if (v7 == *v12)
        goto LABEL_21;
    }
    if (v14)
      v18 = v14;
    else
      v18 = v12;
  }
  else
  {
    v18 = 0;
  }
  v12 = sub_1C50F392C(a1 + 48, (uint64_t)&v32, &v32, v18);
  *v12 = v32;
  v12[1] = 0;
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_DWORD *)(a1 + 64);
LABEL_21:
  v19 = v12 + 1;
  if (!v9)
  {
    v26 = 0;
LABEL_37:
    v20 = sub_1C50F392C(a1 + 48, (uint64_t)&v32, &v32, v26);
    *v20 = v32;
    v20[1] = 0;
    goto LABEL_38;
  }
  v7 = v32;
  v10 = v9 - 1;
  v11 = ((v32 >> 4) ^ (v32 >> 9)) & (v9 - 1);
LABEL_24:
  v20 = (_QWORD *)(v8 + 16 * v11);
  v21 = *v20;
  if (v7 != *v20)
  {
    v22 = 0;
    v23 = 1;
    while (v21 != -4096)
    {
      if (v22)
        v24 = 0;
      else
        v24 = v21 == -8192;
      if (v24)
        v22 = v20;
      v25 = v11 + v23++;
      LODWORD(v11) = v25 & v10;
      v20 = (_QWORD *)(v8 + 16 * v11);
      v21 = *v20;
      if (v7 == *v20)
        goto LABEL_38;
    }
    if (v22)
      v26 = v22;
    else
      v26 = v20;
    goto LABEL_37;
  }
LABEL_38:
  v27 = v20[1];
  v20[1] = 0;
  v28 = *(unsigned int *)(Node + 32);
  if (v28 >= *(_DWORD *)(Node + 36))
  {
    v31 = v27;
    llvm::SmallVectorBase<unsigned int>::grow_pod(Node + 24, Node + 40, v28 + 1, 8);
    v27 = v31;
    LODWORD(v28) = *(_DWORD *)(Node + 32);
  }
  *(_QWORD *)(*(_QWORD *)(Node + 24) + 8 * v28) = v27;
  ++*(_DWORD *)(Node + 32);
  v29 = *v19;
  *v19 = v27;
  if (v29)
  {
    v30 = *(void **)(v29 + 24);
    if (v30 != (void *)(v29 + 40))
      free(v30);
    MEMORY[0x1CAA32FC0](v29, 0x10A0C40528A66C4);
    v27 = *v19;
  }
  *(_QWORD *)(v27 + 8) = Node;
  llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::UpdateLevel(*v19);
  **(_QWORD **)a1 = a2;
LABEL_5:
  *(_QWORD *)(a1 + 72) = Node;
  return Node;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::createNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v20;
  void *v21;
  uint64_t v22;

  v22 = a2;
  v4 = operator new();
  *(_QWORD *)v4 = a2;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = v4 + 40;
  *(_QWORD *)(v4 + 32) = 0x400000000;
  *(_QWORD *)(v4 + 72) = -1;
  v7 = *(_QWORD *)(a1 + 48);
  v6 = a1 + 48;
  v5 = v7;
  v8 = *(_DWORD *)(v6 + 16);
  if (v8)
  {
    v9 = v8 - 1;
    v10 = v9 & ((a2 >> 4) ^ (a2 >> 9));
    v11 = (_QWORD *)(v5 + 16 * v10);
    v12 = *v11;
    if (*v11 == a2)
      goto LABEL_16;
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = v11;
      v16 = v10 + v14++;
      v10 = v16 & v9;
      v11 = (_QWORD *)(v5 + 16 * v10);
      v12 = *v11;
      if (*v11 == a2)
        goto LABEL_16;
    }
    if (v13)
      v17 = v13;
    else
      v17 = v11;
  }
  else
  {
    v17 = 0;
  }
  v11 = sub_1C50F392C(v6, (uint64_t)&v22, &v22, v17);
  *v11 = v22;
  v11[1] = 0;
LABEL_16:
  v18 = v11[1];
  v11[1] = v4;
  if (v18)
  {
    v20 = v11;
    v21 = *(void **)(v18 + 24);
    if (v21 != (void *)(v18 + 40))
      free(v21);
    MEMORY[0x1CAA32FC0](v18, 0x10A0C40528A66C4);
    return v20[1];
  }
  return v4;
}

{
  return __ZN4llvm17DominatorTreeBaseINS_17MachineBasicBlockELb1EE10createNodeEPS1_(a1, a2);
}

_DWORD *llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::addRoot(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[2];
  if (v4 >= result[3])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v4 + 1, 8);
    LODWORD(v4) = v3[2];
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = a2;
  ++v3[2];
  return result;
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::changeImmediateDominator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(a1 + 88) = 0;
  llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::setIDom(a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t *)(v3 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_8;
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(_QWORD *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_8;
      }
    }
  }
  v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_8:
  v10 = (uint64_t *)(v3 + 16 * v4);
  if (v6 == v10)
  {
    v11 = 0;
    if (!(_DWORD)v4)
      goto LABEL_18;
  }
  else
  {
    v11 = v6[1];
    if (!(_DWORD)v4)
      goto LABEL_18;
  }
  v12 = v4 - 1;
  LODWORD(v4) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v13 = (uint64_t *)(v3 + 16 * v4);
  v14 = *v13;
  if (*v13 == a3)
  {
LABEL_17:
    if (v13 != v10)
    {
      v17 = v13[1];
      goto LABEL_20;
    }
  }
  else
  {
    v15 = 1;
    while (v14 != -4096)
    {
      v16 = v4 + v15++;
      v4 = v16 & v12;
      v14 = *(_QWORD *)(v3 + 16 * v4);
      if (v14 == a3)
      {
        v13 = (uint64_t *)(v3 + 16 * v4);
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  v17 = 0;
LABEL_20:
  *(_BYTE *)(a1 + 88) = 0;
  llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::setIDom(v11, v17);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::eraseNode(int32x2_t *a1, uint64_t a2)
{
  int32x2_t v3;
  int32x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a2;
  v4 = a1 + 6;
  v3 = a1[6];
  v5 = a1[8].u32[0];
  if ((_DWORD)v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = (uint64_t *)(*(_QWORD *)&v3 + 16 * v6);
    v8 = *v7;
    if (*v7 == a2)
      goto LABEL_8;
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(_QWORD *)(*(_QWORD *)&v3 + 16 * v6);
      if (v8 == a2)
      {
        v7 = (uint64_t *)(*(_QWORD *)&v3 + 16 * v6);
        goto LABEL_8;
      }
    }
  }
  v7 = (uint64_t *)(*(_QWORD *)&v3 + 16 * v5);
LABEL_8:
  if (v7 == (uint64_t *)(*(_QWORD *)&v3 + 16 * v5))
    v11 = 0;
  else
    v11 = v7[1];
  a1[11].i8[0] = 0;
  v12 = *(_QWORD *)(v11 + 8);
  if (v12)
  {
    v13 = *(_QWORD **)(v12 + 24);
    v14 = *(unsigned int *)(v12 + 32);
    v15 = &v13[v14];
    if ((_DWORD)v14)
    {
      v16 = 8 * v14;
      while (*v13 != v11)
      {
        ++v13;
        v16 -= 8;
        if (!v16)
        {
          v13 = v15;
          break;
        }
      }
    }
    if (v15 != v13 + 1)
    {
      memmove(v13, v13 + 1, (char *)v15 - (char *)(v13 + 1));
      LODWORD(v14) = *(_DWORD *)(v12 + 32);
    }
    *(_DWORD *)(v12 + 32) = v14 - 1;
  }
  result = sub_1C4867FFC(v4, &v25);
  v18 = (_QWORD *)*a1;
  v19 = a1[1].u32[0];
  v20 = *(_QWORD *)a1 + 8 * v19;
  v21 = (_QWORD *)*a1;
  if ((_DWORD)v19)
  {
    v22 = 8 * v19;
    v21 = (_QWORD *)*a1;
    while (*v21 != v25)
    {
      ++v21;
      v22 -= 8;
      if (!v22)
      {
        v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v19);
        break;
      }
    }
  }
  v23 = v21 - v18;
  if (v23 != v19)
  {
    v24 = v18[v23];
    v18[v23] = *(_QWORD *)(v20 - 8);
    *(_QWORD *)(v20 - 8) = v24;
    a1[1].i32[0] = v19 - 1;
  }
  return result;
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::splitBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t NearestCommonDominator;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[5];

  v32[4] = *MEMORY[0x1E0C80C00];
  v4 = **(_QWORD **)(a2 + 64);
  v5 = *(char **)(a2 + 88);
  v6 = *(char **)(a2 + 96);
  v30 = v32;
  v31 = 0x400000000;
  v7 = v6 - v5;
  if ((unint64_t)(v6 - v5) >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, (uint64_t)v32, v7 >> 3, 8);
    v8 = v31;
    v9 = v31;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  if (v5 != v6)
  {
    v10 = (char *)v30 + 8 * v8;
    do
    {
      v11 = *(_QWORD *)v5;
      v5 += 8;
      *v10++ = v11;
    }
    while (v5 != v6);
  }
  v12 = v9 + ((unint64_t)v7 >> 3);
  LODWORD(v31) = v12;
  v13 = *(uint64_t **)(v4 + 88);
  v14 = *(uint64_t **)(v4 + 96);
  if (v13 == v14)
  {
    v16 = 1;
    if (!v12)
      goto LABEL_27;
LABEL_16:
    v17 = 0;
    while (!llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::isReachableFromEntry(a1, *((_QWORD *)v30 + v17)))
    {
      if (++v17 >= (unint64_t)v31)
        goto LABEL_27;
    }
    NearestCommonDominator = *((_QWORD *)v30 + v17);
    if (!NearestCommonDominator)
      goto LABEL_27;
    if (v31 > (int)v17 + 1)
    {
      v19 = v17 + 1;
      do
      {
        if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::isReachableFromEntry(a1, *((_QWORD *)v30 + v19)))
          NearestCommonDominator = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(a1, NearestCommonDominator, *((_QWORD *)v30 + v19));
        ++v19;
      }
      while (v19 < v31);
    }
    v20 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::addNewBlock(a1, a2, NearestCommonDominator);
    if (!v16)
      goto LABEL_27;
    v21 = v20;
    v22 = *(_QWORD *)(a1 + 48);
    v23 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v23)
    {
      LODWORD(v24) = (v23 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      v25 = (uint64_t *)(v22 + 16 * v24);
      v26 = *v25;
      if (v4 == *v25)
      {
LABEL_38:
        if (v25 == (uint64_t *)(v22 + 16 * v23))
          v29 = 0;
        else
          v29 = v25[1];
        *(_BYTE *)(a1 + 88) = 0;
        llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::setIDom(v29, v21);
        goto LABEL_27;
      }
      v27 = 1;
      while (v26 != -4096)
      {
        v28 = v24 + v27++;
        v24 = v28 & (v23 - 1);
        v26 = *(_QWORD *)(v22 + 16 * v24);
        if (v4 == v26)
        {
          v25 = (uint64_t *)(v22 + 16 * v24);
          goto LABEL_38;
        }
      }
    }
    v25 = (uint64_t *)(v22 + 16 * v23);
    goto LABEL_38;
  }
  while (1)
  {
    v15 = *v13;
    if (*v13 != a2
      && !llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::dominates(a1, v4, *v13)
      && llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::isReachableFromEntry(a1, v15))
    {
      break;
    }
    if (++v13 == v14)
    {
      v16 = 1;
      goto LABEL_15;
    }
  }
  v16 = 0;
LABEL_15:
  if ((_DWORD)v31)
    goto LABEL_16;
LABEL_27:
  if (v30 != v32)
    free(v30);
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::recalculate(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 80) = a2;
  sub_1C51991B8(a1, 0);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::recalculate(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _BYTE v6[8];
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[296];
  uint64_t v11;
  void *v12;
  unsigned int v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 80) = a2;
  sub_1C5197A08((uint64_t)v10, a3, a4, 1u);
  v6[0] = 0;
  v7 = v10;
  v8 = 0;
  v9 = v13;
  sub_1C51991B8(a1, (uint64_t)v6);
  if (v12 != v14)
    free(v12);
  sub_1C5151CA4((uint64_t)&v11);
  return sub_1C5151CA4((uint64_t)v10);
}

uint64_t *llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::reset(uint64_t a1)
{
  uint64_t *result;

  result = sub_1C4EF5C94((uint64_t *)(a1 + 48));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  return result;
}

uint64_t sub_1C5197650(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "MachinePostDominator Tree Construction";
  *(_QWORD *)(v2 + 8) = 38;
  *(_QWORD *)(v2 + 16) = "machinepostdomtree";
  *(_QWORD *)(v2 + 24) = 18;
  *(_QWORD *)(v2 + 32) = &llvm::MachinePostDominatorTree::ID;
  *(_WORD *)(v2 + 40) = 257;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::MachinePostDominatorTree>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

llvm::MachinePostDominatorTree *llvm::MachinePostDominatorTree::createMachinePostDominatorTreePass(llvm::MachinePostDominatorTree *this)
{
  llvm::MachinePostDominatorTree *v1;

  v1 = (llvm::MachinePostDominatorTree *)operator new();
  return llvm::MachinePostDominatorTree::MachinePostDominatorTree(v1);
}

uint64_t llvm::MachinePostDominatorTree::runOnMachineFunction(llvm::MachinePostDominatorTree *this, llvm::MachineFunction *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = operator new();
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)v4 = v4 + 16;
  *(_QWORD *)(v4 + 8) = 0x400000000;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_DWORD *)(v4 + 64) = 0;
  *(_BYTE *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  v5 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = v4;
  if (v5)
    sub_1C51979BC(v5);
  *(_QWORD *)(v4 + 80) = a2;
  sub_1C51991B8(v4, 0);
  return 0;
}

uint64_t llvm::MachinePostDominatorTree::findNearestCommonDominator(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t NearestCommonDominator;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;

  v3 = a2;
  v5 = *a2;
  v6 = &v3[a3];
  while (1)
  {
    if (++v3 == v6)
      return v5;
    NearestCommonDominator = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(*(_QWORD *)(a1 + 248), v5, *v3);
    v5 = NearestCommonDominator;
    v8 = *(_QWORD *)(a1 + 248);
    v9 = *(_QWORD *)(v8 + 48);
    v10 = *(unsigned int *)(v8 + 64);
    if (!(_DWORD)v10)
      goto LABEL_9;
    LODWORD(v11) = ((NearestCommonDominator >> 4) ^ (NearestCommonDominator >> 9)) & (v10 - 1);
    v12 = (uint64_t *)(v9 + 16 * v11);
    v13 = *v12;
    if (NearestCommonDominator != *v12)
    {
      v14 = 1;
      while (v13 != -4096)
      {
        v15 = v11 + v14++;
        v11 = v15 & (v10 - 1);
        v13 = *(_QWORD *)(v9 + 16 * v11);
        if (NearestCommonDominator == v13)
        {
          v12 = (uint64_t *)(v9 + 16 * v11);
          goto LABEL_10;
        }
      }
LABEL_9:
      v12 = (uint64_t *)(v9 + 16 * v10);
    }
LABEL_10:
    if (!*(_QWORD *)v12[1])
      return 0;
  }
}

void sub_1C5197868(llvm::Pass *this)
{
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = &off_1E8145CA8;
  v2 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v2)
    sub_1C51979BC(v2);
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
}

void sub_1C51978FC(llvm::Pass *this)
{
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = &off_1E8145CA8;
  v2 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v2)
    sub_1C51979BC(v2);
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C51979A4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;
  if (result)
    sub_1C51979BC(result);
  return result;
}

void sub_1C51979BC(uint64_t a1)
{
  sub_1C4DC4E38((uint64_t *)(a1 + 48));
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5197A08(uint64_t a1, unint64_t *a2, uint64_t a3, unsigned int a4)
{
  _DWORD *v6;
  uint64_t i;
  uint64_t j;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v24;

  *(_QWORD *)a1 = 1;
  v6 = (_DWORD *)(a1 + 296);
  for (i = 8; i != 296; i += 72)
    *(_QWORD *)(a1 + i) = -4096;
  *(_QWORD *)(a1 + 296) = 1;
  for (j = 304; j != 592; j += 72)
    *(_QWORD *)(a1 + j) = -4096;
  *(_QWORD *)(a1 + 600) = a1 + 616;
  *(_QWORD *)(a1 + 608) = 0x400000000;
  sub_1C5151F64(a2, a3, a1 + 600, 1, 0);
  v9 = *(unsigned int *)(a1 + 608);
  if ((_DWORD)v9)
  {
    v10 = *(unint64_t **)(a1 + 600);
    v11 = &v10[2 * v9];
    do
    {
      v12 = *v10;
      v13 = v10[1];
      v14 = ((v13 & 4) == 0) ^ a4;
      v24 = *v10;
      sub_1C5154200((_DWORD *)a1, (uint64_t *)&v24);
      v16 = v15 + 32 * v14;
      v17 = v16 + 8;
      v18 = *(unsigned int *)(v16 + 16);
      if (v18 >= *(unsigned int *)(v16 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v16 + 8, v16 + 24, v18 + 1, 8);
        v18 = *(unsigned int *)(v17 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v17 + 8 * v18) = v13 & 0xFFFFFFFFFFFFFFF8;
      ++*(_DWORD *)(v17 + 8);
      v24 = v13 & 0xFFFFFFFFFFFFFFF8;
      sub_1C5154200(v6, (uint64_t *)&v24);
      v20 = v19 + 32 * v14;
      v21 = v20 + 8;
      v22 = *(unsigned int *)(v20 + 16);
      if (v22 >= *(unsigned int *)(v20 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v20 + 8, v20 + 24, v22 + 1, 8);
        v22 = *(unsigned int *)(v21 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v21 + 8 * v22) = v12;
      ++*(_DWORD *)(v21 + 8);
      v10 += 2;
    }
    while (v10 != v11);
  }
  *(_BYTE *)(a1 + 592) = a4;
  return a1;
}

void sub_1C5197BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  _BOOL4 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v17;
  char v18[8];
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v3 = *(unsigned int *)(a2 + 608);
  if (!(_DWORD)v3)
    return;
  if ((_DWORD)v3 == 1)
  {
    v7 = sub_1C51549B0(a2);
    if (a3)
    {
      v18[0] = 0;
      v19 = a3;
      v20 = a3;
      v21 = *(unsigned int *)(a3 + 608);
      v8 = v6 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 4) != 0)
        sub_1C51985A4(a1, (uint64_t)v18, v7, v8);
      else
        sub_1C5197D10(a1, (uint64_t)v18, v7, v8);
    }
    else
    {
      v17 = v6 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 4) != 0)
        sub_1C51985A4(a1, 0, v7, v17);
      else
        sub_1C5197D10(a1, 0, v7, v17);
    }
    return;
  }
  v18[0] = 0;
  v19 = a2;
  v20 = a3;
  v21 = v3;
  v9 = *(_DWORD *)(a1 + 56);
  if (v9 > 0x64)
  {
    if (v3 <= v9 / 0x28)
      goto LABEL_8;
LABEL_10:
    sub_1C51991B8(a1, (uint64_t)v18);
    v10 = v18[0] == 0;
    if (!v21)
      return;
    goto LABEL_11;
  }
  if (v3 > v9)
    goto LABEL_10;
LABEL_8:
  v10 = 1;
LABEL_11:
  if (v10)
  {
    v11 = 1;
    do
    {
      v12 = sub_1C51549B0(v19);
      v14 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        sub_1C51985A4(a1, (uint64_t)v18, v12, v14);
      else
        sub_1C5197D10(a1, (uint64_t)v18, v12, v14);
    }
    while (v11++ < v21 && v18[0] == 0);
  }
}

void sub_1C5197D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t *Child;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  uint64_t *v39;
  char *v40;
  uint64_t *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  int v79;
  BOOL v80;
  unsigned int v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t *v98;
  void *__p;
  uint64_t *v101;
  char *v102;
  uint64_t v103[2];
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  _BYTE v110[128];
  void *v111;
  unsigned int v112;
  uint64_t v113;
  void *v114;
  unsigned int v115;
  unsigned int v116;
  _QWORD v117[66];

  v117[64] = *MEMORY[0x1E0C80C00];
  v7 = *(uint64_t **)(a1 + 48);
  v8 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v8)
  {
    LODWORD(v9) = (v8 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    v10 = &v7[2 * v9];
    v11 = *v10;
    if (*v10 == a3)
    {
LABEL_7:
      if (v10 != &v7[2 * v8])
      {
        Child = (uint64_t *)v10[1];
        if (Child)
          goto LABEL_22;
        v10 = &v7[2 * v8];
      }
      goto LABEL_10;
    }
    v12 = 1;
    while (v11 != -4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v8 - 1);
      v11 = v7[2 * v9];
      if (v11 == a3)
      {
        v10 = &v7[2 * v9];
        goto LABEL_7;
      }
    }
  }
  v10 = &v7[2 * v8];
  if (!(_DWORD)v8)
    goto LABEL_18;
LABEL_10:
  v15 = *v7;
  if (*v7)
  {
    LODWORD(v16) = 0;
    v17 = v8 - 1;
    v18 = 1;
    while (v15 != -4096)
    {
      v19 = v16 + v18++;
      v16 = v19 & v17;
      v15 = v7[2 * v16];
      if (!v15)
      {
        v7 += 2 * v16;
        goto LABEL_15;
      }
    }
    goto LABEL_18;
  }
LABEL_15:
  if (v7 == v10)
  {
LABEL_18:
    v20 = 0;
    goto LABEL_19;
  }
  v20 = v7[1];
LABEL_19:
  Child = (uint64_t *)llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::createChild(a1, a3, v20);
  v21 = *(unsigned int *)(a1 + 8);
  if (v21 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v21 + 1, 8);
    LODWORD(v21) = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = a3;
  ++*(_DWORD *)(a1 + 8);
  v7 = *(uint64_t **)(a1 + 48);
  LODWORD(v8) = *(_DWORD *)(a1 + 64);
LABEL_22:
  *(_BYTE *)(a1 + 88) = 0;
  if ((_DWORD)v8)
  {
    LODWORD(v22) = (v8 - 1) & ((a4 >> 4) ^ (a4 >> 9));
    v23 = &v7[2 * v22];
    v24 = *v23;
    if (*v23 != a4)
    {
      v25 = 1;
      do
      {
        if (v24 == -4096)
          goto LABEL_31;
        v26 = v22 + v25++;
        v22 = v26 & (v8 - 1);
        v24 = v7[2 * v22];
      }
      while (v24 != a4);
      v23 = &v7[2 * v22];
    }
    if (v23 != &v7[2 * v8])
    {
      v27 = v23[1];
      if (v27)
      {
        sub_1C5199594(a1, a2, Child, v27);
        return;
      }
    }
  }
LABEL_31:
  v108 = v110;
  v109 = 0x800000000;
  v28 = (uint64_t *)operator new(8uLL);
  v29 = 0;
  __p = v28;
  *v28 = 0;
  v101 = v28 + 1;
  v102 = (char *)(v28 + 1);
  v103[0] = 0;
  v103[1] = 0;
  v104 = 0;
  v105 = a2;
  v30 = 1;
  v116 = 64;
  v117[0] = a4;
  v114 = v117;
  do
  {
    v31 = *((_QWORD *)v114 + v30 - 1);
    v115 = v30 - 1;
    v107 = v31;
    if (v104)
    {
      v32 = (v104 - 1) & ((v31 >> 4) ^ (v31 >> 9));
      v33 = (uint64_t *)(v103[0] + 72 * v32);
      v34 = *v33;
      if (v31 == *v33)
        goto LABEL_47;
      v35 = 0;
      v36 = 1;
      while (v34 != -4096)
      {
        if (v35)
          v37 = 0;
        else
          v37 = v34 == -8192;
        if (v37)
          v35 = v33;
        v38 = v32 + v36++;
        v32 = v38 & (v104 - 1);
        v33 = (uint64_t *)(v103[0] + 72 * v32);
        v34 = *v33;
        if (v31 == *v33)
          goto LABEL_47;
      }
      if (v35)
        v39 = v35;
      else
        v39 = v33;
    }
    else
    {
      v39 = 0;
    }
    v33 = sub_1C519AA58((uint64_t)v103, &v107, v39);
    *v33 = v31;
    *(_OWORD *)(v33 + 5) = 0u;
    *(_OWORD *)(v33 + 1) = 0u;
    *(_OWORD *)(v33 + 3) = 0u;
    *(_OWORD *)(v33 + 7) = 0u;
    v33[5] = (uint64_t)(v33 + 7);
    *((_DWORD *)v33 + 13) = 2;
LABEL_47:
    if (!*((_DWORD *)v33 + 2))
    {
      *((_DWORD *)v33 + 4) = ++v29;
      *((_DWORD *)v33 + 2) = v29;
      v33[3] = v31;
      v40 = (char *)v101;
      if (v101 >= (uint64_t *)v102)
      {
        v42 = (char *)__p;
        v43 = ((char *)v101 - (_BYTE *)__p) >> 3;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 61)
          abort();
        v45 = v102 - (_BYTE *)__p;
        if ((v102 - (_BYTE *)__p) >> 2 > v44)
          v44 = v45 >> 2;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v44;
        if (v46)
        {
          if (v46 >> 61)
            sub_1C4764EE4();
          v47 = (char *)operator new(8 * v46);
        }
        else
        {
          v47 = 0;
        }
        v48 = (uint64_t *)&v47[8 * v43];
        *v48 = v31;
        v41 = v48 + 1;
        if (v40 != v42)
        {
          do
          {
            v49 = *((_QWORD *)v40 - 1);
            v40 -= 8;
            *--v48 = v49;
          }
          while (v40 != v42);
          v40 = (char *)__p;
        }
        __p = v48;
        v102 = &v47[8 * v46];
        if (v40)
          operator delete(v40);
      }
      else
      {
        *v101 = v31;
        v41 = (uint64_t *)(v40 + 8);
      }
      v101 = v41;
      if (v105)
        sub_1C519AE08((uint64_t)&v111, *(_QWORD *)(v105 + 8), v107);
      else
        sub_1C519B044((uint64_t *)&v111, *(char **)(v107 + 64), *(char **)(v107 + 72));
      v50 = (uint64_t *)v111;
      v51 = (uint64_t *)((char *)v111 + 8 * v112);
      if (v112)
      {
        while (1)
        {
          v52 = *v50;
          v106 = v52;
          v53 = v103[0];
          v54 = v104;
          v55 = sub_1C4F4C0E0(v103[0], v104, v52);
          if ((uint64_t *)(v53 + 72 * v54) == v55)
            break;
          v56 = v55;
          v57 = v107;
          if (!*((_DWORD *)v55 + 2))
            goto LABEL_76;
          if (v52 != v107)
          {
            v59 = v55 + 6;
            v58 = *((unsigned int *)v55 + 12);
            v60 = v55 + 5;
            if (v58 >= *((unsigned int *)v55 + 13))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v55 + 5), (uint64_t)(v55 + 7), v58 + 1, 8);
              v58 = *((unsigned int *)v56 + 12);
            }
            v61 = *v60;
            goto LABEL_108;
          }
LABEL_110:
          if (++v50 == v51)
          {
            v50 = (uint64_t *)v111;
            goto LABEL_113;
          }
        }
        v57 = v107;
LABEL_76:
        v62 = *(_QWORD *)(a1 + 48);
        v63 = *(unsigned int *)(a1 + 64);
        v64 = v52 >> 4;
        if ((_DWORD)v63)
        {
          LODWORD(v65) = (v63 - 1) & (v64 ^ (v52 >> 9));
          v66 = (uint64_t *)(v62 + 16 * v65);
          v67 = *v66;
          if (*v66 != v52)
          {
            v68 = 1;
            while (v67 != -4096)
            {
              v69 = v65 + v68++;
              v65 = v69 & (v63 - 1);
              v67 = *(_QWORD *)(v62 + 16 * v65);
              if (v67 == v52)
              {
                v66 = (uint64_t *)(v62 + 16 * v65);
                goto LABEL_83;
              }
            }
            goto LABEL_82;
          }
        }
        else
        {
LABEL_82:
          v66 = (uint64_t *)(v62 + 16 * v63);
        }
LABEL_83:
        if (v66 != (uint64_t *)(v62 + 16 * v63))
        {
          v70 = v66[1];
          if (v70)
          {
            v71 = v109;
            if (v109 >= (unint64_t)HIDWORD(v109))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, (uint64_t)v110, v109 + 1, 16);
              v71 = v109;
            }
            v72 = (uint64_t *)((char *)v108 + 16 * v71);
            *v72 = v57;
            v72[1] = v70;
            v59 = &v109;
            goto LABEL_109;
          }
        }
        if (v54)
        {
          v73 = v64 ^ (v52 >> 9);
          v74 = v54 - 1;
          v75 = v73 & (v54 - 1);
          v76 = (uint64_t *)(v53 + 72 * v75);
          v77 = *v76;
          if (v52 != *v76)
          {
            v78 = 0;
            v79 = 1;
            while (v77 != -4096)
            {
              if (v78)
                v80 = 0;
              else
                v80 = v77 == -8192;
              if (v80)
                v78 = v76;
              v81 = v75 + v79++;
              v75 = v81 & v74;
              v76 = (uint64_t *)(v53 + 72 * v75);
              v77 = *v76;
              if (v52 == *v76)
                goto LABEL_103;
            }
            if (v78)
              v82 = v78;
            else
              v82 = v76;
LABEL_102:
            v76 = sub_1C519AA58((uint64_t)v103, &v106, v82);
            *v76 = v52;
            *(_OWORD *)(v76 + 5) = 0u;
            *(_OWORD *)(v76 + 1) = 0u;
            *(_OWORD *)(v76 + 3) = 0u;
            *(_OWORD *)(v76 + 7) = 0u;
            v76[5] = (uint64_t)(v76 + 7);
            *((_DWORD *)v76 + 13) = 2;
          }
LABEL_103:
          v83 = v115;
          if (v115 >= (unint64_t)v116)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, (uint64_t)v117, v115 + 1, 8);
            v83 = v115;
          }
          *((_QWORD *)v114 + v83) = v52;
          ++v115;
          v59 = v76 + 6;
          v58 = *((unsigned int *)v76 + 12);
          *((_DWORD *)v76 + 3) = v29;
          if (v58 >= *((unsigned int *)v76 + 13))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v76 + 5), (uint64_t)(v76 + 7), v58 + 1, 8);
            v58 = *((unsigned int *)v76 + 12);
          }
          v61 = v76[5];
LABEL_108:
          *(_QWORD *)(v61 + 8 * v58) = v57;
LABEL_109:
          ++*(_DWORD *)v59;
          goto LABEL_110;
        }
        v82 = 0;
        goto LABEL_102;
      }
LABEL_113:
      if (v50 != &v113)
        free(v50);
    }
    v30 = v115;
  }
  while (v115);
  if (v114 != v117)
    free(v114);
  sub_1C5199C50((uint64_t *)&__p, a1, 0);
  sub_1C519A794((uint64_t)&__p, a1, *Child);
  v84 = v103[0];
  if (v104)
  {
    v85 = v103[0] + 56;
    v86 = 72 * v104;
    do
    {
      v87 = *(_QWORD *)(v85 - 56);
      if (v87 != -4096 && v87 != -8192)
      {
        v88 = *(void **)(v85 - 16);
        if ((void *)v85 != v88)
          free(v88);
      }
      v85 += 72;
      v86 -= 72;
    }
    while (v86);
  }
  MEMORY[0x1CAA32FB4](v84, 8);
  if (__p)
    operator delete(__p);
  v89 = (char *)v108;
  if ((_DWORD)v109)
  {
    v90 = (char *)v108 + 16 * v109;
    while (1)
    {
      v91 = *(unsigned int *)(a1 + 64);
      if (!(_DWORD)v91)
        goto LABEL_140;
      v92 = *(_QWORD *)(a1 + 48);
      LODWORD(v93) = ((*(_QWORD *)v89 >> 4) ^ (*(_QWORD *)v89 >> 9)) & (v91 - 1);
      v94 = (uint64_t *)(v92 + 16 * v93);
      v95 = *v94;
      if (*(_QWORD *)v89 != *v94)
        break;
LABEL_138:
      if (v94 == (uint64_t *)(v92 + 16 * v91))
        goto LABEL_140;
      v98 = (uint64_t *)v94[1];
LABEL_141:
      sub_1C5199594(a1, a2, v98, *((_QWORD *)v89 + 1));
      v89 += 16;
      if (v89 == v90)
      {
        v89 = (char *)v108;
        goto LABEL_143;
      }
    }
    v96 = 1;
    while (v95 != -4096)
    {
      v97 = v93 + v96++;
      v93 = v97 & (v91 - 1);
      v95 = *(_QWORD *)(v92 + 16 * v93);
      if (*(_QWORD *)v89 == v95)
      {
        v94 = (uint64_t *)(v92 + 16 * v93);
        goto LABEL_138;
      }
    }
LABEL_140:
    v98 = 0;
    goto LABEL_141;
  }
LABEL_143:
  if (v89 != v110)
    free(v89);
}

void sub_1C51985A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t *v21;
  uint64_t NearestCommonDominator;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  int v53;
  BOOL v54;
  unsigned int v55;
  uint64_t *v56;
  char *v57;
  uint64_t *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  _DWORD *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  int v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t *v89;
  int v90;
  BOOL v91;
  unsigned int v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t *v97;
  unsigned int v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t *v101;
  int v102;
  BOOL v103;
  unsigned int v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  void **v135;
  void *v136;
  int v137;
  int v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t *v143;
  int v144;
  BOOL v145;
  unsigned int v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t v160;
  void *__p;
  uint64_t *v162;
  char *v163;
  uint64_t v164[2];
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  unsigned int v170;
  uint64_t v171;
  void *v172;
  unsigned int v173;
  unsigned int v174;
  _QWORD v175[66];

  v175[64] = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 64);
  if (!(_DWORD)v4)
    return;
  v7 = *(_QWORD *)(a1 + 48);
  v8 = v4 - 1;
  LODWORD(v9) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v10 = (uint64_t *)(v7 + 16 * v9);
  v11 = *v10;
  if (*v10 != a3)
  {
    v12 = 1;
    do
    {
      if (v11 == -4096)
        return;
      v13 = v9 + v12++;
      v9 = v13 & v8;
      v11 = *(_QWORD *)(v7 + 16 * v9);
    }
    while (v11 != a3);
    v10 = (uint64_t *)(v7 + 16 * v9);
  }
  v14 = (uint64_t *)(v7 + 16 * v4);
  if (v10 == v14)
    return;
  v15 = (uint64_t *)v10[1];
  if (!v15)
    return;
  LODWORD(v16) = v8 & ((a4 >> 4) ^ (a4 >> 9));
  v17 = (uint64_t *)(v7 + 16 * v16);
  v18 = *v17;
  if (*v17 != a4)
  {
    v19 = 1;
    do
    {
      if (v18 == -4096)
        return;
      v20 = v16 + v19++;
      v16 = v20 & v8;
      v18 = *(_QWORD *)(v7 + 16 * v16);
    }
    while (v18 != a4);
    v17 = (uint64_t *)(v7 + 16 * v16);
  }
  if (v17 == v14)
    return;
  v21 = (uint64_t *)v17[1];
  if (!v21)
    return;
  NearestCommonDominator = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(a1, a3, a4);
  v23 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v23)
  {
    v24 = *(_QWORD *)(a1 + 48);
    LODWORD(v25) = ((NearestCommonDominator >> 4) ^ (NearestCommonDominator >> 9)) & (v23 - 1);
    v26 = (uint64_t *)(v24 + 16 * v25);
    v27 = *v26;
    if (NearestCommonDominator == *v26)
    {
LABEL_22:
      if (v26 != (uint64_t *)(v24 + 16 * v23))
      {
        v30 = (uint64_t *)v26[1];
        goto LABEL_26;
      }
    }
    else
    {
      v28 = 1;
      while (v27 != -4096)
      {
        v29 = v25 + v28++;
        v25 = v29 & (v23 - 1);
        v27 = *(_QWORD *)(v24 + 16 * v25);
        if (NearestCommonDominator == v27)
        {
          v26 = (uint64_t *)(v24 + 16 * v25);
          goto LABEL_22;
        }
      }
    }
    v30 = 0;
LABEL_26:
    if (v21 == v30)
      goto LABEL_214;
  }
  *(_BYTE *)(a1 + 88) = 0;
  if (v15 == (uint64_t *)v21[1])
  {
    v41 = *v21;
    if (a2)
    {
      v42 = a2;
      sub_1C519BC38((uint64_t)&v172, *(_QWORD *)(a2 + 8), *v21);
    }
    else
    {
      v42 = 0;
      sub_1C519BE94((uint64_t *)&v172, *(_QWORD *)(v41 + 88), *(_QWORD *)(v41 + 96));
    }
    v105 = (uint64_t *)v172;
    if (v173)
    {
      v106 = (uint64_t *)((char *)v172 + 8 * v173);
      while (1)
      {
        v107 = *(unsigned int *)(a1 + 64);
        if ((_DWORD)v107)
        {
          v108 = *v105;
          v109 = *(_QWORD *)(a1 + 48);
          LODWORD(v110) = ((*v105 >> 4) ^ (*v105 >> 9)) & (v107 - 1);
          v111 = (uint64_t *)(v109 + 16 * v110);
          v112 = *v111;
          if (*v105 != *v111)
          {
            v113 = 1;
            do
            {
              if (v112 == -4096)
                goto LABEL_145;
              v114 = v110 + v113++;
              v110 = v114 & (v107 - 1);
              v112 = *(_QWORD *)(v109 + 16 * v110);
            }
            while (v108 != v112);
            v111 = (uint64_t *)(v109 + 16 * v110);
          }
          if (v111 != (uint64_t *)(v109 + 16 * v107)
            && v111[1]
            && llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(a1, v41, v108) != v41)
          {
            break;
          }
        }
LABEL_145:
        if (++v105 == v106)
        {
          v105 = (uint64_t *)v172;
          goto LABEL_147;
        }
      }
      if (v172 != v175)
        free(v172);
      a2 = v42;
      goto LABEL_28;
    }
LABEL_147:
    if (v105 != v175)
      free(v105);
    v115 = *v21;
    v116 = *(unsigned int *)(a1 + 8);
    if (v116 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v116 + 1, 8);
      LODWORD(v116) = *(_DWORD *)(a1 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v116) = v115;
    ++*(_DWORD *)(a1 + 8);
    v117 = *(unsigned int *)(a1 + 64);
    a2 = v42;
    if ((_DWORD)v117)
    {
      v118 = *(uint64_t **)(a1 + 48);
      v119 = *v118;
      if (*v118)
      {
        LODWORD(v155) = 0;
        v156 = 1;
        while (v119 != -4096)
        {
          v157 = v155 + v156++;
          v155 = v157 & (v117 - 1);
          v119 = v118[2 * v155];
          if (!v119)
          {
            v120 = &v118[2 * v155];
            goto LABEL_210;
          }
        }
      }
      else
      {
        v120 = *(uint64_t **)(a1 + 48);
LABEL_210:
        if (v120 != &v118[2 * v117])
        {
          v158 = (uint64_t *)v120[1];
LABEL_213:
          sub_1C5199594(a1, v42, v158, (uint64_t)v21);
          goto LABEL_214;
        }
      }
    }
    v158 = 0;
    goto LABEL_213;
  }
LABEL_28:
  v31 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(a1, *v15, *v21);
  v32 = v31;
  v33 = *(unsigned int *)(a1 + 64);
  if (!(_DWORD)v33)
    goto LABEL_38;
  v34 = *(_QWORD *)(a1 + 48);
  LODWORD(v35) = ((v31 >> 4) ^ (v31 >> 9)) & (v33 - 1);
  v36 = (uint64_t *)(v34 + 16 * v35);
  v37 = *v36;
  if (v31 != *v36)
  {
    v38 = 1;
    while (v37 != -4096)
    {
      v39 = v35 + v38++;
      v35 = v39 & (v33 - 1);
      v37 = *(_QWORD *)(v34 + 16 * v35);
      if (v31 == v37)
      {
        v36 = (uint64_t *)(v34 + 16 * v35);
        goto LABEL_34;
      }
    }
    goto LABEL_38;
  }
LABEL_34:
  if (v36 == (uint64_t *)(v34 + 16 * v33))
  {
LABEL_38:
    v40 = 0;
    goto LABEL_39;
  }
  v40 = v36[1];
LABEL_39:
  if (!*(_QWORD *)(v40 + 8))
  {
    sub_1C51991B8(a1, a2);
    goto LABEL_214;
  }
  v159 = *(uint64_t **)(v40 + 8);
  v43 = *(_DWORD *)(v40 + 16);
  v44 = (uint64_t *)operator new(8uLL);
  v45 = a2;
  v46 = 0;
  __p = v44;
  *v44 = 0;
  v162 = v44 + 1;
  v163 = (char *)(v44 + 1);
  v164[0] = 0;
  v164[1] = 0;
  v165 = 0;
  v160 = v45;
  v166 = v45;
  v47 = 1;
  v174 = 64;
  v175[0] = v32;
  v172 = v175;
  do
  {
    v48 = *((_QWORD *)v172 + v47 - 1);
    v173 = v47 - 1;
    v168 = v48;
    if (v165)
    {
      v49 = (v165 - 1) & ((v48 >> 4) ^ (v48 >> 9));
      v50 = (uint64_t *)(v164[0] + 72 * v49);
      v51 = *v50;
      if (v48 == *v50)
        goto LABEL_56;
      v52 = 0;
      v53 = 1;
      while (v51 != -4096)
      {
        if (v52)
          v54 = 0;
        else
          v54 = v51 == -8192;
        if (v54)
          v52 = v50;
        v55 = v49 + v53++;
        v49 = v55 & (v165 - 1);
        v50 = (uint64_t *)(v164[0] + 72 * v49);
        v51 = *v50;
        if (v48 == *v50)
          goto LABEL_56;
      }
      if (v52)
        v56 = v52;
      else
        v56 = v50;
    }
    else
    {
      v56 = 0;
    }
    v50 = sub_1C519AA58((uint64_t)v164, &v168, v56);
    *v50 = v48;
    *(_OWORD *)(v50 + 5) = 0u;
    *(_OWORD *)(v50 + 1) = 0u;
    *(_OWORD *)(v50 + 3) = 0u;
    *(_OWORD *)(v50 + 7) = 0u;
    v50[5] = (uint64_t)(v50 + 7);
    *((_DWORD *)v50 + 13) = 2;
LABEL_56:
    if (!*((_DWORD *)v50 + 2))
    {
      *((_DWORD *)v50 + 4) = ++v46;
      *((_DWORD *)v50 + 2) = v46;
      v50[3] = v48;
      v57 = (char *)v162;
      if (v162 >= (uint64_t *)v163)
      {
        v59 = (char *)__p;
        v60 = ((char *)v162 - (_BYTE *)__p) >> 3;
        v61 = v60 + 1;
        if ((unint64_t)(v60 + 1) >> 61)
          abort();
        v62 = v163 - (_BYTE *)__p;
        if ((v163 - (_BYTE *)__p) >> 2 > v61)
          v61 = v62 >> 2;
        if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
          v63 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v63 = v61;
        if (v63)
        {
          if (v63 >> 61)
            sub_1C4764EE4();
          v64 = (char *)operator new(8 * v63);
        }
        else
        {
          v64 = 0;
        }
        v65 = (uint64_t *)&v64[8 * v60];
        *v65 = v48;
        v58 = v65 + 1;
        if (v57 != v59)
        {
          do
          {
            v66 = *((_QWORD *)v57 - 1);
            v57 -= 8;
            *--v65 = v66;
          }
          while (v57 != v59);
          v57 = (char *)__p;
        }
        __p = v65;
        v163 = &v64[8 * v63];
        if (v57)
          operator delete(v57);
      }
      else
      {
        *v162 = v48;
        v58 = (uint64_t *)(v57 + 8);
      }
      v162 = v58;
      if (v166)
        sub_1C519AE08((uint64_t)&v169, *(_QWORD *)(v166 + 8), v168);
      else
        sub_1C519B044((uint64_t *)&v169, *(char **)(v168 + 64), *(char **)(v168 + 72));
      v67 = (uint64_t *)v169;
      v68 = (uint64_t *)((char *)v169 + 8 * v170);
      if (v170)
      {
        while (1)
        {
          v69 = *v67;
          v167 = v69;
          v70 = v164[0];
          v71 = v165;
          v72 = sub_1C4F4C0E0(v164[0], v165, v69);
          if ((uint64_t *)(v70 + 72 * v71) != v72)
          {
            v73 = v72;
            if (*((_DWORD *)v72 + 2))
            {
              v74 = v168;
              if (v69 != v168)
              {
                v75 = v72 + 5;
                v77 = v72 + 6;
                v76 = *((unsigned int *)v72 + 12);
                v78 = *((unsigned int *)v72 + 13);
                goto LABEL_108;
              }
              goto LABEL_111;
            }
          }
          v79 = *(_QWORD *)(a1 + 48);
          v80 = *(unsigned int *)(a1 + 64);
          v81 = v69 >> 4;
          if ((_DWORD)v80)
          {
            LODWORD(v82) = (v80 - 1) & (v81 ^ (v69 >> 9));
            v83 = (uint64_t *)(v79 + 16 * v82);
            v84 = *v83;
            if (v69 == *v83)
              goto LABEL_89;
            v85 = 1;
            while (v84 != -4096)
            {
              v86 = v82 + v85++;
              v82 = v86 & (v80 - 1);
              v84 = *(_QWORD *)(v79 + 16 * v82);
              if (v69 == v84)
              {
                v83 = (uint64_t *)(v79 + 16 * v82);
                goto LABEL_89;
              }
            }
          }
          v83 = (uint64_t *)(v79 + 16 * v80);
LABEL_89:
          if (*(_DWORD *)(v83[1] + 16) > v43)
          {
            if (!v71)
            {
              v93 = 0;
              goto LABEL_104;
            }
            v87 = (v71 - 1) & (v81 ^ (v69 >> 9));
            v73 = (uint64_t *)(v70 + 72 * v87);
            v88 = *v73;
            if (v69 != *v73)
            {
              v89 = 0;
              v90 = 1;
              while (v88 != -4096)
              {
                if (v89)
                  v91 = 0;
                else
                  v91 = v88 == -8192;
                if (v91)
                  v89 = v73;
                v92 = v87 + v90++;
                v87 = v92 & (v71 - 1);
                v73 = (uint64_t *)(v70 + 72 * v87);
                v88 = *v73;
                if (v69 == *v73)
                  goto LABEL_105;
              }
              if (v89)
                v93 = v89;
              else
                v93 = v73;
LABEL_104:
              v73 = sub_1C519AA58((uint64_t)v164, &v167, v93);
              *v73 = v69;
              *(_OWORD *)(v73 + 5) = 0u;
              *(_OWORD *)(v73 + 1) = 0u;
              *(_OWORD *)(v73 + 3) = 0u;
              *(_OWORD *)(v73 + 7) = 0u;
              v73[5] = (uint64_t)(v73 + 7);
              *((_DWORD *)v73 + 13) = 2;
            }
LABEL_105:
            v94 = v173;
            if (v173 >= (unint64_t)v174)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, (uint64_t)v175, v173 + 1, 8);
              v94 = v173;
            }
            *((_QWORD *)v172 + v94) = v69;
            v77 = v73 + 6;
            v76 = *((unsigned int *)v73 + 12);
            ++v173;
            *((_DWORD *)v73 + 3) = v46;
            v75 = v73 + 5;
            v74 = v168;
            v78 = *((unsigned int *)v73 + 13);
LABEL_108:
            if (v76 >= v78)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v75, (uint64_t)(v73 + 7), v76 + 1, 8);
              v76 = *((unsigned int *)v73 + 12);
            }
            *(_QWORD *)(*v75 + 8 * v76) = v74;
            ++*v77;
          }
LABEL_111:
          if (++v67 == v68)
          {
            v67 = (uint64_t *)v169;
            break;
          }
        }
      }
      if (v67 != &v171)
        free(v67);
    }
    v47 = v173;
  }
  while (v173);
  if (v172 != v175)
    free(v172);
  sub_1C5199C50((uint64_t *)&__p, a1, v43);
  v95 = *v159;
  v96 = __p;
  v97 = (uint64_t *)((char *)__p + 8);
  if (!v165)
  {
    v121 = 0;
    goto LABEL_157;
  }
  v98 = ((*v97 >> 4) ^ (*v97 >> 9)) & (v165 - 1);
  v99 = (uint64_t *)(v164[0] + 72 * v98);
  v100 = *v99;
  if (*v97 != *v99)
  {
    v101 = 0;
    v102 = 1;
    while (v100 != -4096)
    {
      if (v101)
        v103 = 0;
      else
        v103 = v100 == -8192;
      if (v103)
        v101 = v99;
      v104 = v98 + v102++;
      v98 = v104 & (v165 - 1);
      v99 = (uint64_t *)(v164[0] + 72 * v98);
      v100 = *v99;
      if (*v97 == *v99)
        goto LABEL_158;
    }
    if (v101)
      v121 = v101;
    else
      v121 = v99;
LABEL_157:
    v99 = sub_1C519AA58((uint64_t)v164, (uint64_t *)__p + 1, v121);
    *v99 = *v97;
    *(_OWORD *)(v99 + 5) = 0u;
    *(_OWORD *)(v99 + 3) = 0u;
    *(_OWORD *)(v99 + 1) = 0u;
    *(_OWORD *)(v99 + 7) = 0u;
    v99[5] = (uint64_t)(v99 + 7);
    *((_DWORD *)v99 + 13) = 2;
    v96 = __p;
  }
LABEL_158:
  v99[4] = v95;
  v122 = (char *)v162 - v96;
  if (v122 != 8)
  {
    v128 = v122 >> 3;
    v129 = 1;
    while (1)
    {
      v130 = (void *)*((_QWORD *)__p + v129);
      v172 = v130;
      v131 = *(_QWORD *)(a1 + 48);
      v132 = *(unsigned int *)(a1 + 64);
      v133 = v130 >> 4;
      if (!(_DWORD)v132)
        goto LABEL_177;
      LODWORD(v134) = (v133 ^ (v130 >> 9)) & (v132 - 1);
      v135 = (void **)(v131 + 16 * v134);
      v136 = *v135;
      if (v130 != *v135)
        break;
LABEL_176:
      if (v135 == (void **)(v131 + 16 * v132))
        goto LABEL_177;
      v139 = (uint64_t)v135[1];
LABEL_179:
      if (v165)
      {
        v140 = (v165 - 1) & (v133 ^ (v130 >> 9));
        v141 = (uint64_t *)(v164[0] + 72 * v140);
        v142 = *v141;
        if (v130 == (void *)*v141)
          goto LABEL_194;
        v143 = 0;
        v144 = 1;
        while (v142 != -4096)
        {
          if (v143)
            v145 = 0;
          else
            v145 = v142 == -8192;
          if (v145)
            v143 = v141;
          v146 = v140 + v144++;
          v140 = v146 & (v165 - 1);
          v141 = (uint64_t *)(v164[0] + 72 * v140);
          v142 = *v141;
          if (v130 == (void *)*v141)
            goto LABEL_194;
        }
        if (v143)
          v147 = v143;
        else
          v147 = v141;
      }
      else
      {
        v147 = 0;
      }
      v141 = sub_1C519AA58((uint64_t)v164, (uint64_t *)&v172, v147);
      *v141 = (uint64_t)v130;
      *(_OWORD *)(v141 + 5) = 0u;
      *(_OWORD *)(v141 + 1) = 0u;
      *(_OWORD *)(v141 + 3) = 0u;
      *(_OWORD *)(v141 + 7) = 0u;
      v141[5] = (uint64_t)(v141 + 7);
      *((_DWORD *)v141 + 13) = 2;
      v131 = *(_QWORD *)(a1 + 48);
      LODWORD(v132) = *(_DWORD *)(a1 + 64);
LABEL_194:
      if ((_DWORD)v132)
      {
        v148 = v141[4];
        LODWORD(v149) = ((v148 >> 4) ^ (v148 >> 9)) & (v132 - 1);
        v150 = (uint64_t *)(v131 + 16 * v149);
        v151 = *v150;
        if (v148 == *v150)
        {
LABEL_200:
          if (v150 != (uint64_t *)(v131 + 16 * v132))
          {
            v154 = v150[1];
            goto LABEL_203;
          }
        }
        else
        {
          v152 = 1;
          while (v151 != -4096)
          {
            v153 = v149 + v152++;
            v149 = v153 & (v132 - 1);
            v151 = *(_QWORD *)(v131 + 16 * v149);
            if (v148 == v151)
            {
              v150 = (uint64_t *)(v131 + 16 * v149);
              goto LABEL_200;
            }
          }
        }
      }
      v154 = 0;
LABEL_203:
      llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::setIDom(v139, v154);
      if (++v129 == v128)
        goto LABEL_159;
    }
    v137 = 1;
    while (v136 != (void *)-4096)
    {
      v138 = v134 + v137++;
      v134 = v138 & (v132 - 1);
      v136 = *(void **)(v131 + 16 * v134);
      if (v130 == v136)
      {
        v135 = (void **)(v131 + 16 * v134);
        goto LABEL_176;
      }
    }
LABEL_177:
    v139 = 0;
    goto LABEL_179;
  }
LABEL_159:
  v123 = v164[0];
  a2 = v160;
  if (v165)
  {
    v124 = v164[0] + 56;
    v125 = 72 * v165;
    do
    {
      v126 = *(_QWORD *)(v124 - 56);
      if (v126 != -4096 && v126 != -8192)
      {
        v127 = *(void **)(v124 - 16);
        if ((void *)v124 != v127)
          free(v127);
      }
      v124 += 72;
      v125 -= 72;
    }
    while (v125);
  }
  MEMORY[0x1CAA32FB4](v123, 8);
  if (__p)
    operator delete(__p);
LABEL_214:
  sub_1C519B364(a1, a2);
}

void sub_1C51991B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *Node;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *__p;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  void *__src;
  uint64_t v33;
  _QWORD v34[5];

  v34[4] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 80);
  sub_1C4EF5C94((uint64_t *)(a1 + 48));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 92) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = v4;
  if (a2)
  {
    v5 = *(_QWORD *)(a2 + 16);
    if (v5)
    {
      sub_1C61E0C00(*(_QWORD *)(a2 + 8), v5);
      v6 = a2;
    }
    else
    {
      v6 = 0;
    }
    v7 = operator new(8uLL);
    __p = v7;
    *v7 = 0;
    v26 = v7 + 1;
    v27 = v7 + 1;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = v6;
    sub_1C519B438((uint64_t)&__src, a1, v6);
    v8 = __src;
    if (&__src == (void **)a1)
      goto LABEL_14;
    if (__src != v34)
    {
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(*(void **)a1);
        v8 = __src;
      }
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v33;
      __src = v34;
      HIDWORD(v33) = 0;
      goto LABEL_13;
    }
    v9 = v33;
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v33)
    {
      if ((_DWORD)v33)
        memmove(*(void **)a1, __src, 8 * v33);
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) < v33)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v9, 8);
    }
    else if ((_DWORD)v10)
    {
      v24 = *(unsigned int *)(a1 + 8);
      memmove(*(void **)a1, __src, 8 * v10);
      v11 = v24;
LABEL_10:
      if (v11 != v33)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v11), (char *)__src + 8 * v11, 8 * v33 - 8 * v11);
LABEL_12:
      *(_DWORD *)(a1 + 8) = v9;
LABEL_13:
      LODWORD(v33) = 0;
      v8 = __src;
LABEL_14:
      if (v8 != v34)
        free(v8);
      sub_1C519D97C((char **)&__p, a1);
      sub_1C5199C50((uint64_t *)&__p, a1, 0);
      *(_BYTE *)a2 = 1;
      goto LABEL_30;
    }
    v11 = 0;
    goto LABEL_10;
  }
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = 0;
  v26 = v12 + 1;
  v27 = v12 + 1;
  v31 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  sub_1C519B438((uint64_t)&__src, a1, 0);
  v13 = __src;
  if (&__src != (void **)a1)
  {
    if (__src != v34)
    {
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(*(void **)a1);
        v13 = __src;
      }
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v33;
      __src = v34;
      HIDWORD(v33) = 0;
      goto LABEL_26;
    }
    v14 = v33;
    v15 = *(unsigned int *)(a1 + 8);
    if (v15 >= v33)
    {
      if ((_DWORD)v33)
        memmove(*(void **)a1, v34, 8 * v33);
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 12) < v33)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v14, 8);
    }
    else if ((_DWORD)v15)
    {
      v23 = *(unsigned int *)(a1 + 8);
      memmove(*(void **)a1, v34, 8 * v15);
      v16 = v23;
LABEL_23:
      if (v16 != v33)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v16), (char *)__src + 8 * v16, 8 * v33 - 8 * v16);
LABEL_25:
      *(_DWORD *)(a1 + 8) = v14;
LABEL_26:
      LODWORD(v33) = 0;
      v13 = __src;
      goto LABEL_27;
    }
    v16 = 0;
    goto LABEL_23;
  }
LABEL_27:
  if (v13 != v34)
    free(v13);
  sub_1C519D97C((char **)&__p, a1);
  sub_1C5199C50((uint64_t *)&__p, a1, 0);
LABEL_30:
  if (*(_DWORD *)(a1 + 8))
  {
    Node = (uint64_t *)llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::createNode(a1, 0);
    *(_QWORD *)(a1 + 72) = Node;
    sub_1C519A794((uint64_t)&__p, a1, *Node);
  }
  v18 = v28;
  if (v30)
  {
    v19 = 72 * v30;
    v20 = (_QWORD *)(v28 + 56);
    do
    {
      v21 = *(v20 - 7);
      if (v21 != -4096 && v21 != -8192)
      {
        v22 = (_QWORD *)*(v20 - 2);
        if (v20 != v22)
          free(v22);
      }
      v20 += 9;
      v19 -= 72;
    }
    while (v19);
  }
  MEMORY[0x1CAA32FB4](v18, 8);
  if (__p)
    operator delete(__p);
}

void sub_1C5199594(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t NearestCommonDominator;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unsigned int v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE v77[31];
  void *v78;
  unsigned int v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  _BYTE v83[64];
  void *v84;
  uint64_t v85;
  _QWORD v86[9];
  uint64_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  void *v92;
  uint64_t v93;
  _BYTE v94[64];
  void *v95;
  uint64_t v96;
  _QWORD v97[10];

  v97[8] = *MEMORY[0x1E0C80C00];
  v76 = a4;
  if (!**(_QWORD **)(a4 + 8))
  {
    v7 = *(_QWORD **)a1;
    v8 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      v10 = *(_QWORD **)a1;
      while (*v10 != *(_QWORD *)a4)
      {
        ++v10;
        v9 -= 8;
        if (!v9)
        {
          v10 = &v7[v8];
          break;
        }
      }
    }
    else
    {
      v10 = *(_QWORD **)a1;
    }
    if (v8 != v10 - v7)
    {
      sub_1C51991B8(a1, a2);
      return;
    }
  }
  if (*a3 && *(_QWORD *)a4)
    NearestCommonDominator = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(a1, *a3, *(_QWORD *)a4);
  else
    NearestCommonDominator = 0;
  v12 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD *)(a1 + 48);
    LODWORD(v14) = ((NearestCommonDominator >> 4) ^ (NearestCommonDominator >> 9)) & (v12 - 1);
    v15 = (uint64_t *)(v13 + 16 * v14);
    v16 = *v15;
    if (NearestCommonDominator == *v15)
    {
LABEL_19:
      if (v15 != (uint64_t *)(v13 + 16 * v12))
      {
        v19 = v15[1];
        goto LABEL_22;
      }
    }
    else
    {
      v17 = 1;
      while (v16 != -4096)
      {
        v18 = v14 + v17++;
        v14 = v18 & (v12 - 1);
        v16 = *(_QWORD *)(v13 + 16 * v14);
        if (NearestCommonDominator == v16)
        {
          v15 = (uint64_t *)(v13 + 16 * v14);
          goto LABEL_19;
        }
      }
    }
  }
  v19 = 0;
LABEL_22:
  v20 = *(_DWORD *)(v19 + 16) + 1;
  if (v20 < *(_DWORD *)(a4 + 16))
  {
    v74 = v19;
    v84 = v86;
    v85 = 0x800000001;
    v87 = 1;
    v88 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v89 = v88;
    v90 = v88;
    v91 = v88;
    v92 = v94;
    v93 = 0x800000000;
    v95 = v97;
    v96 = 0x800000000;
    v81 = v83;
    v82 = 0x800000000;
    v86[0] = a4;
    sub_1C5157358((uint64_t)&v87, &v76, (uint64_t)&v78);
    v21 = v85;
    while ((_DWORD)v85)
    {
      v22 = v84;
      v23 = *(_QWORD *)v84;
      v24 = v21;
      if (v21 != 1)
      {
        v25 = 0;
        v26 = (char *)v84 + 8 * v21;
        v27 = ((unint64_t)v21 - 2) >> 1;
        v28 = v84;
        do
        {
          v29 = &v28[v25];
          v32 = v29[1];
          v30 = (char *)(v29 + 1);
          v31 = v32;
          v33 = (2 * v25) | 1;
          v34 = 2 * v25 + 2;
          if (v34 < v24 && *(_DWORD *)(v31 + 16) < *(_DWORD *)(*((_QWORD *)v30 + 1) + 16))
          {
            v31 = *((_QWORD *)v30 + 1);
            v30 += 8;
            v33 = v34;
          }
          *v28 = v31;
          v28 = v30;
          v25 = v33;
        }
        while (v33 <= v27);
        v35 = v26 - 8;
        if (v30 == v35)
        {
          *(_QWORD *)v30 = v23;
        }
        else
        {
          *(_QWORD *)v30 = *(_QWORD *)v35;
          *(_QWORD *)v35 = v23;
          v36 = v30 - v22 + 8;
          if (v36 >= 9)
          {
            v37 = (((unint64_t)v36 >> 3) - 2) >> 1;
            v38 = &v22[8 * v37];
            v39 = *(_QWORD *)v38;
            v40 = *(_QWORD *)v30;
            v41 = *(_DWORD *)(*(_QWORD *)v30 + 16);
            if (*(_DWORD *)(*(_QWORD *)v38 + 16) < v41)
            {
              do
              {
                v42 = v38;
                *(_QWORD *)v30 = v39;
                if (!v37)
                  break;
                v37 = (v37 - 1) >> 1;
                v38 = &v22[8 * v37];
                v39 = *(_QWORD *)v38;
                v30 = v42;
              }
              while (*(_DWORD *)(*(_QWORD *)v38 + 16) < v41);
              *(_QWORD *)v42 = v40;
            }
          }
        }
      }
      LODWORD(v85) = v24 - 1;
      v43 = v93;
      if (v93 >= (unint64_t)HIDWORD(v93))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, (uint64_t)v94, v93 + 1, 8);
        v43 = v93;
      }
      *((_QWORD *)v92 + v43) = v23;
      LODWORD(v93) = v93 + 1;
      v44 = *(_DWORD *)(v23 + 16);
      while (1)
      {
        v45 = *(_QWORD *)v23;
        if (a2)
          sub_1C519AE08((uint64_t)&v78, *(_QWORD *)(a2 + 8), v45);
        else
          sub_1C519B044((uint64_t *)&v78, *(char **)(v45 + 64), *(char **)(v45 + 72));
        v46 = (uint64_t *)v78;
        v47 = (char *)v78 + 8 * v79;
        if (v79)
        {
          while (1)
          {
            v48 = *v46;
            v75 = 0;
            v49 = *(_QWORD *)(a1 + 48);
            v50 = *(unsigned int *)(a1 + 64);
            if ((_DWORD)v50)
            {
              LODWORD(v51) = (v50 - 1) & ((v48 >> 4) ^ (v48 >> 9));
              v52 = (uint64_t *)(v49 + 16 * v51);
              v53 = *v52;
              if (v48 == *v52)
                goto LABEL_51;
              v54 = 1;
              while (v53 != -4096)
              {
                v55 = v51 + v54++;
                v51 = v55 & (v50 - 1);
                v53 = *(_QWORD *)(v49 + 16 * v51);
                if (v48 == v53)
                {
                  v52 = (uint64_t *)(v49 + 16 * v51);
                  goto LABEL_51;
                }
              }
            }
            v52 = (uint64_t *)(v49 + 16 * v50);
LABEL_51:
            v75 = v52[1];
            v56 = *(_DWORD *)(v75 + 16);
            if (v56 > v20)
            {
              sub_1C5157358((uint64_t)&v87, &v75, (uint64_t)v77);
              if (v77[16])
              {
                v57 = v75;
                if (v56 <= v44)
                {
                  v59 = v85;
                  if (v85 >= (unint64_t)HIDWORD(v85))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, (uint64_t)v86, v85 + 1, 8);
                    v59 = v85;
                  }
                  *((_QWORD *)v84 + v59) = v57;
                  v60 = (v85 + 1);
                  LODWORD(v85) = v60;
                  if (v60 >= 2)
                  {
                    v61 = (char *)v84;
                    v62 = (char *)v84 + 8 * v60;
                    v63 = (unint64_t)(v60 - 2) >> 1;
                    v64 = (char *)v84 + 8 * v63;
                    v65 = *(_QWORD *)v64;
                    v68 = *((_QWORD *)v62 - 1);
                    v67 = v62 - 8;
                    v66 = v68;
                    v69 = *(_DWORD *)(v68 + 16);
                    if (*(_DWORD *)(*(_QWORD *)v64 + 16) < v69)
                    {
                      do
                      {
                        v70 = v64;
                        *(_QWORD *)v67 = v65;
                        if (!v63)
                          break;
                        v63 = (v63 - 1) >> 1;
                        v64 = &v61[8 * v63];
                        v65 = *(_QWORD *)v64;
                        v67 = v70;
                      }
                      while (*(_DWORD *)(*(_QWORD *)v64 + 16) < v69);
                      *(_QWORD *)v70 = v66;
                    }
                  }
                }
                else
                {
                  v58 = v82;
                  if (v82 >= (unint64_t)HIDWORD(v82))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, (uint64_t)v83, v82 + 1, 8);
                    v58 = v82;
                  }
                  *((_QWORD *)v81 + v58) = v57;
                  LODWORD(v82) = v82 + 1;
                }
              }
            }
            if (++v46 == (uint64_t *)v47)
            {
              v46 = (uint64_t *)v78;
              break;
            }
          }
        }
        if (v46 != &v80)
          free(v46);
        if (!(_DWORD)v82)
          break;
        v23 = *((_QWORD *)v81 + v82 - 1);
        LODWORD(v82) = v82 - 1;
      }
      v21 = v85;
    }
    if ((_DWORD)v93)
    {
      v71 = (uint64_t *)v92;
      v72 = 8 * v93;
      do
      {
        v73 = *v71++;
        llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::setIDom(v73, v74);
        v72 -= 8;
      }
      while (v72);
    }
    sub_1C519B364(a1, a2);
    if (v81 != v83)
      free(v81);
    if (v95 != v97)
      free(v95);
    if (v92 != v94)
      free(v92);
    if ((v87 & 1) == 0)
      MEMORY[0x1CAA32FB4](v88.i64[0], 8);
    if (v84 != v86)
      free(v84);
  }
}

void sub_1C5199C50(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  int v57;
  BOOL v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  int v70;
  BOOL v71;
  unsigned int v72;
  uint64_t *v73;
  unsigned int v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  int v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  int v85;
  BOOL v86;
  unsigned int v87;
  uint64_t *v88;
  uint64_t *v89;
  int v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  int v97;
  BOOL v98;
  unsigned int v99;
  uint64_t *v100;
  uint64_t *v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t *v110;
  int v111;
  BOOL v112;
  unsigned int v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  unsigned int v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  int v126;
  BOOL v127;
  unsigned int v128;
  uint64_t *v129;
  unsigned int v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;
  int v134;
  BOOL v135;
  unsigned int v136;
  uint64_t *v137;
  unsigned int v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t v141;
  int v142;
  unsigned int v143;
  uint64_t v144;
  int v145;
  unsigned int v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t *v149;
  int v150;
  BOOL v151;
  unsigned int v152;
  uint64_t *v153;
  int v154;
  uint64_t v155;
  int v156;
  unsigned int v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t *v160;
  int v161;
  BOOL v162;
  unsigned int v163;
  uint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  _QWORD v175[34];

  v175[32] = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v165 = a1[1] - *a1;
  v166 = v165 >> 3;
  if ((v165 >> 3) >= 2)
  {
    v6 = 1;
    while (1)
    {
      v173 = 0;
      v7 = *(void **)(v5 + 8 * v6);
      v173 = v7;
      v8 = *((_DWORD *)a1 + 10);
      if (!v8)
        break;
      v9 = a1[3];
      v10 = v8 - 1;
      v11 = ((v7 >> 4) ^ (v7 >> 9)) & v10;
      v12 = (uint64_t *)(v9 + 72 * v11);
      v13 = *v12;
      if (v7 != (void *)*v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = (uint64_t *)(v9 + 72 * v11);
          v13 = *v12;
          if (v7 == (void *)*v12)
            goto LABEL_18;
        }
        if (v14)
          v18 = v14;
        else
          v18 = v12;
        goto LABEL_17;
      }
LABEL_18:
      v12[4] = *(_QWORD *)(v5 + 8 * *((unsigned int *)v12 + 3));
      if (++v6 == (v165 >> 3))
        goto LABEL_21;
    }
    v18 = 0;
LABEL_17:
    v12 = sub_1C519AA58((uint64_t)(a1 + 3), (uint64_t *)&v173, v18);
    *v12 = (uint64_t)v7;
    *(_OWORD *)(v12 + 5) = 0u;
    *(_OWORD *)(v12 + 3) = 0u;
    *(_OWORD *)(v12 + 1) = 0u;
    *(_OWORD *)(v12 + 7) = 0u;
    v12[5] = (uint64_t)(v12 + 7);
    *((_DWORD *)v12 + 13) = 2;
    v5 = *a1;
    goto LABEL_18;
  }
LABEL_21:
  v173 = v175;
  v174 = 0x2000000000;
  v19 = (v166 - 1);
  if (v19 < 2)
    goto LABEL_225;
  v170 = (uint64_t)(a1 + 3);
  v20 = v165 >> 3;
  do
  {
    v167 = v19;
    v21 = *(_QWORD *)(*a1 + 8 * v19);
    v171 = v21;
    v22 = *((_DWORD *)a1 + 10);
    v169 = v20;
    if (v22)
    {
      v23 = a1[3];
      v24 = v22 - 1;
      v25 = ((v21 >> 4) ^ (v21 >> 9)) & v24;
      v26 = (uint64_t *)(v23 + 72 * v25);
      v27 = *v26;
      if (v21 == *v26)
        goto LABEL_38;
      v28 = 0;
      v29 = 1;
      while (v27 != -4096)
      {
        if (v28)
          v30 = 0;
        else
          v30 = v27 == -8192;
        if (v30)
          v28 = v26;
        v31 = v25 + v29++;
        v25 = v31 & v24;
        v26 = (uint64_t *)(v23 + 72 * v25);
        v27 = *v26;
        if (v21 == *v26)
          goto LABEL_38;
      }
      if (v28)
        v32 = v28;
      else
        v32 = v26;
    }
    else
    {
      v32 = 0;
    }
    v26 = sub_1C519AA58(v170, &v171, v32);
    *v26 = v21;
    *(_OWORD *)(v26 + 5) = 0u;
    *(_OWORD *)(v26 + 1) = 0u;
    *(_OWORD *)(v26 + 3) = 0u;
    *(_OWORD *)(v26 + 7) = 0u;
    v26[5] = (uint64_t)(v26 + 7);
    *((_DWORD *)v26 + 13) = 2;
    v20 = v169;
LABEL_38:
    *((_DWORD *)v26 + 4) = *((_DWORD *)v26 + 3);
    v33 = *((unsigned int *)v26 + 12);
    if ((_DWORD)v33)
    {
      v34 = (uint64_t *)v26[5];
      v35 = &v34[v33];
      while (1)
      {
        v36 = *((_DWORD *)a1 + 10);
        if (v36)
        {
          v37 = *v34;
          v38 = a1[3];
          v39 = (*v34 >> 4) ^ (*v34 >> 9);
          v40 = v36 - 1;
          v41 = v39 & v40;
          v42 = (uint64_t *)(v38 + 72 * (v39 & v40));
          v43 = *v42;
          if (*v34 != *v42)
          {
            v44 = 1;
            v45 = *v42;
            v46 = v39 & v40;
            while (v45 != -4096)
            {
              v47 = v46 + v44++;
              v46 = v47 & v40;
              v45 = *(_QWORD *)(v38 + 72 * v46);
              if (v37 == v45)
                goto LABEL_45;
            }
            goto LABEL_87;
          }
LABEL_45:
          v48 = *(unsigned int *)(a2 + 64);
          if (!(_DWORD)v48)
            break;
          v49 = *(_QWORD *)(a2 + 48);
          LODWORD(v50) = (v48 - 1) & v39;
          v51 = (uint64_t *)(v49 + 16 * v50);
          v52 = *v51;
          if (v37 != *v51)
          {
            v53 = 1;
            do
            {
              if (v52 == -4096)
                goto LABEL_54;
              v54 = v50 + v53++;
              v50 = v54 & (v48 - 1);
              v52 = *(_QWORD *)(v49 + 16 * v50);
            }
            while (v37 != v52);
            v51 = (uint64_t *)(v49 + 16 * v50);
          }
          if (v51 == (uint64_t *)(v49 + 16 * v48))
            break;
          v55 = v51[1];
          if (!v55 || *(_DWORD *)(v55 + 16) >= a3)
            break;
        }
LABEL_87:
        if (++v34 == v35)
          goto LABEL_149;
      }
LABEL_54:
      v172 = *v34;
      if (v37 != v43)
      {
        v56 = 0;
        v57 = 1;
        while (v43 != -4096)
        {
          if (v56)
            v58 = 0;
          else
            v58 = v43 == -8192;
          if (v58)
            v56 = v42;
          v59 = v41 + v57++;
          v41 = v59 & v40;
          v42 = (uint64_t *)(v38 + 72 * v41);
          v43 = *v42;
          if (*v42 == v37)
            goto LABEL_68;
        }
        if (v56)
          v60 = v56;
        else
          v60 = v42;
        v42 = sub_1C519AA58(v170, &v172, v60);
        v20 = v169;
        *v42 = v37;
        *(_OWORD *)(v42 + 5) = 0u;
        *(_OWORD *)(v42 + 1) = 0u;
        *(_OWORD *)(v42 + 3) = 0u;
        *(_OWORD *)(v42 + 7) = 0u;
        v42[5] = (uint64_t)(v42 + 7);
        *((_DWORD *)v42 + 13) = 2;
      }
LABEL_68:
      if (*((_DWORD *)v42 + 3) < v20)
      {
        v61 = v42 + 3;
LABEL_70:
        v62 = *v61;
        v172 = *v61;
        v63 = *((_DWORD *)a1 + 10);
        if (v63)
        {
          v64 = a1[3];
          v65 = v63 - 1;
          v66 = v65 & ((v62 >> 4) ^ (v62 >> 9));
          v67 = (uint64_t *)(v64 + 72 * v66);
          v68 = *v67;
          if (v62 == *v67)
            goto LABEL_85;
          v69 = 0;
          v70 = 1;
          while (v68 != -4096)
          {
            if (v69)
              v71 = 0;
            else
              v71 = v68 == -8192;
            if (v71)
              v69 = v67;
            v72 = v66 + v70++;
            v66 = v72 & v65;
            v67 = (uint64_t *)(v64 + 72 * v66);
            v68 = *v67;
            if (v62 == *v67)
              goto LABEL_85;
          }
          if (v69)
            v73 = v69;
          else
            v73 = v67;
        }
        else
        {
          v73 = 0;
        }
        v67 = sub_1C519AA58(v170, &v172, v73);
        *v67 = v62;
        *(_OWORD *)(v67 + 5) = 0u;
        *(_OWORD *)(v67 + 1) = 0u;
        *(_OWORD *)(v67 + 3) = 0u;
        *(_OWORD *)(v67 + 7) = 0u;
        v67[5] = (uint64_t)(v67 + 7);
        *((_DWORD *)v67 + 13) = 2;
        v20 = v169;
LABEL_85:
        v74 = *((_DWORD *)v67 + 4);
        if (v74 < *((_DWORD *)v26 + 4))
          *((_DWORD *)v26 + 4) = v74;
        goto LABEL_87;
      }
      v75 = v42 + 1;
      while (1)
      {
        v76 = v174;
        if (v174 >= (unint64_t)HIDWORD(v174))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v173, (uint64_t)v175, v174 + 1, 8);
          v20 = v169;
          v76 = v174;
        }
        *((_QWORD *)v173 + v76) = v75;
        LODWORD(v174) = v174 + 1;
        v77 = (uint64_t *)(*a1 + 8 * *((unsigned int *)v75 + 1));
        v78 = *((_DWORD *)a1 + 10);
        if (!v78)
          break;
        v79 = a1[3];
        v80 = v78 - 1;
        v81 = ((*v77 >> 4) ^ (*v77 >> 9)) & v80;
        v82 = (uint64_t *)(v79 + 72 * v81);
        v83 = *v82;
        if (*v77 != *v82)
        {
          v84 = 0;
          v85 = 1;
          while (v83 != -4096)
          {
            if (v84)
              v86 = 0;
            else
              v86 = v83 == -8192;
            if (v86)
              v84 = v82;
            v87 = v81 + v85++;
            v81 = v87 & v80;
            v82 = (uint64_t *)(v79 + 72 * v81);
            v83 = *v82;
            if (*v77 == *v82)
              goto LABEL_107;
          }
          if (v84)
            v88 = v84;
          else
            v88 = v82;
          goto LABEL_106;
        }
LABEL_107:
        v75 = v82 + 1;
        if (*((_DWORD *)v82 + 3) < v20)
        {
          v89 = v82 + 3;
          v90 = *((_DWORD *)a1 + 10);
          if (!v90)
          {
            v100 = 0;
            goto LABEL_124;
          }
          v91 = a1[3];
          v92 = v90 - 1;
          v93 = ((*v89 >> 4) ^ (*v89 >> 9)) & v92;
          v94 = (uint64_t *)(v91 + 72 * v93);
          v95 = *v94;
          if (*v89 != *v94)
          {
            v96 = 0;
            v97 = 1;
            while (v95 != -4096)
            {
              if (v96)
                v98 = 0;
              else
                v98 = v95 == -8192;
              if (v98)
                v96 = v94;
              v99 = v93 + v97++;
              v93 = v99 & v92;
              v94 = (uint64_t *)(v91 + 72 * v93);
              v95 = *v94;
              if (*v89 == *v94)
                goto LABEL_125;
            }
            if (v96)
              v100 = v96;
            else
              v100 = v94;
LABEL_124:
            v94 = sub_1C519AA58(v170, v89, v100);
            *v94 = *v89;
            *(_OWORD *)(v94 + 5) = 0u;
            *(_OWORD *)(v94 + 3) = 0u;
            *(_OWORD *)(v94 + 1) = 0u;
            *(_OWORD *)(v94 + 7) = 0u;
            v94[5] = (uint64_t)(v94 + 7);
            *((_DWORD *)v94 + 13) = 2;
            v20 = v169;
          }
LABEL_125:
          v101 = v94 + 1;
          v102 = v174;
          while (2)
          {
            v103 = *((_QWORD *)v173 + v102 - 1);
            LODWORD(v174) = v102 - 1;
            *(_DWORD *)(v103 + 4) = *((_DWORD *)v75 + 1);
            v61 = (uint64_t *)(v103 + 16);
            v104 = *((_DWORD *)a1 + 10);
            if (v104)
            {
              v105 = a1[3];
              v106 = v104 - 1;
              v107 = ((*v61 >> 4) ^ (*v61 >> 9)) & v106;
              v108 = (uint64_t *)(v105 + 72 * v107);
              v109 = *v108;
              if (*v61 != *v108)
              {
                v110 = 0;
                v111 = 1;
                while (v109 != -4096)
                {
                  if (v110)
                    v112 = 0;
                  else
                    v112 = v109 == -8192;
                  if (v112)
                    v110 = v108;
                  v113 = v107 + v111++;
                  v107 = v113 & v106;
                  v108 = (uint64_t *)(v105 + 72 * v107);
                  v109 = *v108;
                  if (*v61 == *v108)
                    goto LABEL_141;
                }
                if (v110)
                  v114 = v110;
                else
                  v114 = v108;
LABEL_140:
                v108 = sub_1C519AA58(v170, (uint64_t *)(v103 + 16), v114);
                *v108 = *v61;
                *(_OWORD *)(v108 + 5) = 0u;
                *(_OWORD *)(v108 + 3) = 0u;
                *(_OWORD *)(v108 + 1) = 0u;
                *(_OWORD *)(v108 + 7) = 0u;
                v108[5] = (uint64_t)(v108 + 7);
                *((_DWORD *)v108 + 13) = 2;
                v20 = v169;
              }
LABEL_141:
              if (*((_DWORD *)v101 + 2) >= *((_DWORD *)v108 + 4))
                v101 = v108 + 1;
              else
                *v61 = v75[2];
              v102 = v174;
              v75 = (uint64_t *)v103;
              if (!(_DWORD)v174)
                goto LABEL_70;
              continue;
            }
            break;
          }
          v114 = 0;
          goto LABEL_140;
        }
      }
      v88 = 0;
LABEL_106:
      v82 = sub_1C519AA58(v170, v77, v88);
      *v82 = *v77;
      *(_OWORD *)(v82 + 5) = 0u;
      *(_OWORD *)(v82 + 3) = 0u;
      *(_OWORD *)(v82 + 1) = 0u;
      *(_OWORD *)(v82 + 7) = 0u;
      v82[5] = (uint64_t)(v82 + 7);
      *((_DWORD *)v82 + 13) = 2;
      v20 = v169;
      goto LABEL_107;
    }
LABEL_149:
    v20 = v167;
    v19 = v167 - 1;
  }
  while (((v167 - 1) & 0xFFFFFFFELL) != 0);
  if (v166 < 3)
    goto LABEL_225;
  v115 = 2;
  while (2)
  {
    v116 = *a1;
    v117 = *(_QWORD *)(*a1 + 8 * v115);
    v172 = v117;
    v118 = *((_DWORD *)a1 + 10);
    if (v118)
    {
      v119 = a1[3];
      v120 = v118 - 1;
      v121 = ((v117 >> 4) ^ (v117 >> 9)) & (v118 - 1);
      v122 = (uint64_t *)(v119 + 72 * v121);
      v123 = *v122;
      if (v117 == *v122)
      {
        v124 = (uint64_t *)(v116 + 8 * *((unsigned int *)v122 + 4));
        goto LABEL_172;
      }
      v125 = 0;
      v126 = 1;
      while (v123 != -4096)
      {
        if (v125)
          v127 = 0;
        else
          v127 = v123 == -8192;
        if (v127)
          v125 = v122;
        v128 = v121 + v126++;
        v121 = v128 & v120;
        v122 = (uint64_t *)(v119 + 72 * v121);
        v123 = *v122;
        if (v117 == *v122)
          goto LABEL_170;
      }
      if (v125)
        v129 = v125;
      else
        v129 = v122;
    }
    else
    {
      v129 = 0;
    }
    v122 = sub_1C519AA58(v170, &v172, v129);
    *v122 = v117;
    *(_OWORD *)(v122 + 5) = 0u;
    *(_OWORD *)(v122 + 3) = 0u;
    *(_OWORD *)(v122 + 7) = 0u;
    *(_OWORD *)(v122 + 1) = 0u;
    v122[5] = (uint64_t)(v122 + 7);
    *((_DWORD *)v122 + 13) = 2;
    v116 = *a1;
    v119 = a1[3];
    v118 = *((_DWORD *)a1 + 10);
LABEL_170:
    v124 = (uint64_t *)(v116 + 8 * *((unsigned int *)v122 + 4));
    if (!v118)
    {
      v137 = 0;
      goto LABEL_185;
    }
    v120 = v118 - 1;
LABEL_172:
    v130 = ((*v124 >> 4) ^ (*v124 >> 9)) & v120;
    v131 = (uint64_t *)(v119 + 72 * v130);
    v132 = *v131;
    if (*v124 != *v131)
    {
      v133 = 0;
      v134 = 1;
      while (v132 != -4096)
      {
        if (v133)
          v135 = 0;
        else
          v135 = v132 == -8192;
        if (v135)
          v133 = v131;
        v136 = v130 + v134++;
        v130 = v136 & v120;
        v131 = (uint64_t *)(v119 + 72 * v130);
        v132 = *v131;
        if (*v124 == *v131)
          goto LABEL_186;
      }
      if (v133)
        v137 = v133;
      else
        v137 = v131;
LABEL_185:
      v131 = sub_1C519AA58(v170, v124, v137);
      *v131 = *v124;
      *(_OWORD *)(v131 + 5) = 0u;
      *(_OWORD *)(v131 + 3) = 0u;
      *(_OWORD *)(v131 + 1) = 0u;
      *(_OWORD *)(v131 + 7) = 0u;
      v131[5] = (uint64_t)(v131 + 7);
      *((_DWORD *)v131 + 13) = 2;
    }
LABEL_186:
    v138 = *((_DWORD *)v131 + 2);
    v139 = v122 + 4;
    v140 = v139;
    while (2)
    {
      v141 = *v140;
      v171 = v141;
      v142 = *((_DWORD *)a1 + 10);
      v143 = v141 >> 4;
      if (!v142)
      {
        v153 = 0;
        goto LABEL_201;
      }
      v144 = a1[3];
      v145 = v142 - 1;
      v146 = (v143 ^ (v141 >> 9)) & v145;
      v147 = (uint64_t *)(v144 + 72 * v146);
      v148 = *v147;
      if (v141 != *v147)
      {
        v149 = 0;
        v150 = 1;
        while (v148 != -4096)
        {
          if (v149)
            v151 = 0;
          else
            v151 = v148 == -8192;
          if (v151)
            v149 = v147;
          v152 = v146 + v150++;
          v146 = v152 & v145;
          v147 = (uint64_t *)(v144 + 72 * v146);
          v148 = *v147;
          if (v141 == *v147)
            goto LABEL_202;
        }
        if (v149)
          v153 = v149;
        else
          v153 = v147;
LABEL_201:
        v147 = sub_1C519AA58(v170, &v171, v153);
        *v147 = v141;
        *(_OWORD *)(v147 + 5) = 0u;
        *(_OWORD *)(v147 + 1) = 0u;
        *(_OWORD *)(v147 + 3) = 0u;
        *(_OWORD *)(v147 + 7) = 0u;
        v147[5] = (uint64_t)(v147 + 7);
        *((_DWORD *)v147 + 13) = 2;
      }
LABEL_202:
      if (*((_DWORD *)v147 + 2) > v138)
      {
        v154 = *((_DWORD *)a1 + 10);
        if (v154)
        {
          v155 = a1[3];
          v156 = v154 - 1;
          v157 = v156 & (v143 ^ (v141 >> 9));
          v158 = (uint64_t *)(v155 + 72 * v157);
          v159 = *v158;
          if (v141 != *v158)
          {
            v160 = 0;
            v161 = 1;
            while (v159 != -4096)
            {
              if (v160)
                v162 = 0;
              else
                v162 = v159 == -8192;
              if (v162)
                v160 = v158;
              v163 = v157 + v161++;
              v157 = v163 & v156;
              v158 = (uint64_t *)(v155 + 72 * v157);
              v159 = *v158;
              if (v141 == *v158)
                goto LABEL_218;
            }
            if (v160)
              v164 = v160;
            else
              v164 = v158;
LABEL_217:
            v158 = sub_1C519AA58(v170, &v171, v164);
            *v158 = v141;
            *(_OWORD *)(v158 + 5) = 0u;
            *(_OWORD *)(v158 + 1) = 0u;
            *(_OWORD *)(v158 + 3) = 0u;
            *(_OWORD *)(v158 + 7) = 0u;
            v158[5] = (uint64_t)(v158 + 7);
            *((_DWORD *)v158 + 13) = 2;
          }
LABEL_218:
          v140 = v158 + 4;
          continue;
        }
        v164 = 0;
        goto LABEL_217;
      }
      break;
    }
    *v139 = v141;
    if (++v115 != (v165 >> 3))
      continue;
    break;
  }
LABEL_225:
  if (v173 != v175)
    free(v173);
}

uint64_t sub_1C519A794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v8 = *(_QWORD *)(a1 + 24);
  result = a1 + 24;
  v7 = v8;
  v9 = *(_QWORD *)a1;
  v10 = (_QWORD *)(*(_QWORD *)a1 + 8);
  v11 = *(_DWORD *)(a1 + 40);
  if (v11)
  {
    v12 = v11 - 1;
    v13 = ((*v10 >> 4) ^ (*v10 >> 9)) & (v11 - 1);
    v14 = (uint64_t *)(v7 + 72 * v13);
    v15 = *v14;
    if (*v10 == *v14)
      goto LABEL_16;
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = v14;
      v19 = v13 + v17++;
      v13 = v19 & v12;
      v14 = (uint64_t *)(v7 + 72 * (v19 & v12));
      v15 = *v14;
      if (*v10 == *v14)
        goto LABEL_16;
    }
    if (v16)
      v20 = v16;
    else
      v20 = v14;
  }
  else
  {
    v20 = 0;
  }
  result = (uint64_t)sub_1C519AA58(result, (uint64_t *)(*(_QWORD *)a1 + 8), v20);
  v14 = (uint64_t *)result;
  *(_QWORD *)result = *v10;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_QWORD *)(result + 40) = result + 56;
  *(_DWORD *)(result + 52) = 2;
  v9 = *(_QWORD *)a1;
LABEL_16:
  v14[4] = a3;
  v21 = *(_QWORD *)(a1 + 8) - v9;
  if (v21 != 8)
  {
    v22 = v21 >> 3;
    v23 = 1;
    while (1)
    {
      v40 = 0;
      v24 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v23);
      v40 = v24;
      v25 = *(_DWORD *)(a2 + 64);
      if (!v25)
        break;
      v26 = *(_QWORD *)(a2 + 48);
      v27 = v25 - 1;
      v28 = ((v24 >> 4) ^ (v24 >> 9)) & v27;
      result = v26 + 16 * v28;
      v29 = *(_QWORD *)result;
      if (v24 != *(_QWORD *)result)
      {
        v30 = 0;
        v31 = 1;
        while (v29 != -4096)
        {
          if (v30)
            v32 = 0;
          else
            v32 = v29 == -8192;
          if (v32)
            v30 = (_QWORD *)result;
          v33 = v28 + v31++;
          v28 = v33 & v27;
          result = v26 + 16 * v28;
          v29 = *(_QWORD *)result;
          if (v24 == *(_QWORD *)result)
            goto LABEL_33;
        }
        if (v30)
          v34 = v30;
        else
          v34 = (_QWORD *)result;
        goto LABEL_32;
      }
LABEL_33:
      if (!*(_QWORD *)(result + 8))
      {
        v35 = *(_QWORD *)(a1 + 24);
        v36 = *(_DWORD *)(a1 + 40);
        v37 = sub_1C4F4C0E0(v35, v36, v40);
        if ((uint64_t *)(v35 + 72 * v36) == v37)
          v38 = 0;
        else
          v38 = v37[4];
        v39 = sub_1C519B158(a1, v38, a2);
        result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::createChild(a2, v40, v39);
      }
      if (++v23 == v22)
        return result;
    }
    v34 = 0;
LABEL_32:
    result = (uint64_t)sub_1C50F392C(a2 + 48, (uint64_t)&v40, &v40, v34);
    *(_QWORD *)result = v40;
    *(_QWORD *)(result + 8) = 0;
    goto LABEL_33;
  }
  return result;
}

uint64_t sub_1C519A9D4(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(result + 72 * v5);
    v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(result + 72 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_3;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_3:
  *a4 = v6;
  return result;
}

uint64_t *sub_1C519AA58(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t *v16;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1C519AB90((uint64_t *)a1, v6);
      v16 = 0;
      sub_1C519A9D4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
LABEL_4:
    v7 = *a3;
    goto LABEL_5;
  }
  sub_1C519AB90((uint64_t *)a1, 2 * v6);
  v7 = *a2;
  v9 = *(_DWORD *)(a1 + 16) - 1;
  v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (uint64_t *)(*(_QWORD *)a1 + 72 * v10);
  v11 = *a3;
  if (*a2 != *a3)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = a3;
      v15 = v10 + v13++;
      v10 = v15 & v9;
      a3 = (uint64_t *)(*(_QWORD *)a1 + 72 * v10);
      v11 = *a3;
      if (v7 == *a3)
        goto LABEL_5;
    }
    if (v12)
      a3 = v12;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C519AB90(uint64_t *a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(72 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 72 * v10;
      do
      {
        *result = -4096;
        result += 9;
        v11 -= 72;
      }
      while (v11);
    }
    if (!v3)
LABEL_43:
      JUMPOUT(0x1CAA32FB4);
    v12 = &v4[9 * v3];
    v13 = v4;
    while (1)
    {
      v14 = *v13;
      if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
LABEL_33:
      v13 += 9;
      if (v13 == v12)
        goto LABEL_43;
    }
    v15 = *((_DWORD *)a1 + 4) - 1;
    v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
    v17 = *a1 + 72 * v16;
    v18 = *(_QWORD *)v17;
    if (v14 != *(_QWORD *)v17)
    {
      v19 = 0;
      v20 = 1;
      while (v18 != -4096)
      {
        if (v19)
          v21 = 0;
        else
          v21 = v18 == -8192;
        if (v21)
          v19 = v17;
        v22 = v16 + v20++;
        v16 = v22 & v15;
        v17 = *a1 + 72 * v16;
        v18 = *(_QWORD *)v17;
        if (v14 == *(_QWORD *)v17)
          goto LABEL_23;
      }
      if (v19)
        v17 = v19;
    }
LABEL_23:
    *(_QWORD *)v17 = v14;
    v23 = (void *)(v17 + 56);
    v24 = *(_OWORD *)(v13 + 1);
    v25 = *(_OWORD *)(v13 + 3);
    *(_QWORD *)(v17 + 40) = v17 + 56;
    *(_OWORD *)(v17 + 8) = v24;
    *(_OWORD *)(v17 + 24) = v25;
    *(_QWORD *)(v17 + 48) = 0x200000000;
    v26 = *((unsigned int *)v13 + 12);
    if (!(_DWORD)v26 || (uint64_t *)v17 == v13)
    {
LABEL_31:
      ++*((_DWORD *)a1 + 2);
      v29 = (uint64_t *)v13[5];
      if (v29 != v13 + 7)
        free(v29);
      goto LABEL_33;
    }
    v27 = (uint64_t *)v13[5];
    if (v27 != v13 + 7)
    {
      *(_QWORD *)(v17 + 40) = v27;
      v30 = *((_DWORD *)v13 + 13);
      *(_DWORD *)(v17 + 48) = v26;
      *(_DWORD *)(v17 + 52) = v30;
      v13[5] = (uint64_t)(v13 + 7);
      *((_DWORD *)v13 + 13) = 0;
      goto LABEL_30;
    }
    if (v26 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17 + 40, v17 + 56, v26, 8);
      v28 = *((unsigned int *)v13 + 12);
      if (!(_DWORD)v28)
        goto LABEL_29;
      v27 = (uint64_t *)v13[5];
      v23 = *(void **)(v17 + 40);
    }
    else
    {
      v28 = *((unsigned int *)v13 + 12);
    }
    memcpy(v23, v27, 8 * v28);
LABEL_29:
    *(_DWORD *)(v17 + 48) = v26;
LABEL_30:
    *((_DWORD *)v13 + 12) = 0;
    goto LABEL_31;
  }
  a1[1] = 0;
  v31 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v31)
  {
    v32 = 72 * v31;
    do
    {
      *result = -4096;
      result += 9;
      v32 -= 72;
    }
    while (v32);
  }
  return result;
}

_BYTE *sub_1C519AE08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _BYTE *result;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;

  v6 = *(char **)(a3 + 64);
  v7 = *(char **)(a3 + 72);
  v8 = (_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x800000000;
  v9 = v7 - v6;
  if ((unint64_t)(v7 - v6) >= 0x41)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v9 >> 3, 8);
    v10 = *(unsigned int *)(a1 + 8);
    v8 = *(_QWORD **)a1;
    v11 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  if (v6 != v7)
  {
    v12 = &v8[v10];
    do
    {
      v13 = *(_QWORD *)v6;
      v6 += 8;
      *v12++ = v13;
    }
    while (v6 != v7);
    v8 = *(_QWORD **)a1;
  }
  v14 = v8;
  v15 = v11 + ((unint64_t)v9 >> 3);
  if (v11 + ((unint64_t)v9 >> 3))
  {
    v16 = 8 * v15;
    v14 = v8;
    while (*v14)
    {
      ++v14;
      v16 -= 8;
      if (!v16)
      {
        v14 = &v8[v15];
        break;
      }
    }
  }
  v17 = v14 - v8;
  v18 = v14 + 1;
  if (v17 != v15 && v18 != &v8[v15])
  {
    v20 = 8 * v15 - 8 * v17 - 8;
    do
    {
      if (*v18)
        *v14++ = *v18;
      ++v18;
      v20 -= 8;
    }
    while (v20);
    v8 = *(_QWORD **)a1;
  }
  v21 = (char *)v14 - (char *)v8;
  v22 = (unint64_t)((char *)v14 - (char *)v8) >> 3;
  *(_DWORD *)(a1 + 8) = v22;
  result = (_BYTE *)sub_1C61F968C(a2, a3);
  v24 = a2 + 8;
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    v25 = 4;
  }
  else
  {
    v24 = *(_QWORD *)(a2 + 8);
    v25 = *(_DWORD *)(a2 + 16);
  }
  if ((_BYTE *)(v24 + 72 * v25) != result)
  {
    v26 = *((unsigned int *)result + 4);
    if ((_DWORD)v26)
    {
      v27 = (v21 >> 3);
      v28 = (uint64_t *)*((_QWORD *)result + 1);
      v29 = &v28[v26];
      do
      {
        v30 = *v28;
        v31 = 8 * v27;
        v32 = v8;
        v33 = &v8[v27];
        if (v27)
        {
          v34 = 8 * v27;
          v32 = v8;
          while (*v32 != v30)
          {
            ++v32;
            v34 -= 8;
            if (!v34)
            {
              v32 = &v8[v27];
              break;
            }
          }
        }
        v35 = v32 - v8;
        if (v35 != v27)
        {
          v36 = v32 + 1;
          if (v32 + 1 != v33)
          {
            v37 = v31 - 8 * v35 - 8;
            do
            {
              if (*v36 != v30)
                *v32++ = *v36;
              ++v36;
              v37 -= 8;
            }
            while (v37);
            v8 = *(_QWORD **)a1;
          }
        }
        v38 = (char *)v32 - (char *)v8;
        v27 = (v38 >> 3);
        ++v28;
      }
      while (v28 != v29);
      v22 = v38 >> 3;
      *(_DWORD *)(a1 + 8) = v27;
    }
    return sub_1C61BB99C((unsigned int *)a1, (uint64_t)&v8[v22], *((uint64_t **)result + 5), (uint64_t *)(*((_QWORD *)result + 5) + 8 * *((unsigned int *)result + 12)));
  }
  return result;
}

uint64_t *sub_1C519B044(uint64_t *result, char *a2, char *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v5 = result;
  v6 = (uint64_t)(result + 2);
  *result = (uint64_t)(result + 2);
  result[1] = 0x800000000;
  v7 = a3 - a2;
  if ((unint64_t)(a3 - a2) >= 0x41)
  {
    result = (uint64_t *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, v6, v7 >> 3, 8);
    v8 = *((unsigned int *)v5 + 2);
    v6 = *v5;
    v9 = *((_DWORD *)v5 + 2);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  if (a2 != a3)
  {
    v10 = (_QWORD *)(v6 + 8 * v8);
    do
    {
      v11 = *(_QWORD *)a2;
      a2 += 8;
      *v10++ = v11;
    }
    while (a2 != a3);
    v6 = *v5;
  }
  v12 = (_QWORD *)v6;
  v13 = v9 + ((unint64_t)v7 >> 3);
  if (v9 + ((unint64_t)v7 >> 3))
  {
    v14 = 8 * v13;
    v12 = (_QWORD *)v6;
    while (*v12)
    {
      ++v12;
      v14 -= 8;
      if (!v14)
      {
        v12 = (_QWORD *)(v6 + 8 * v13);
        break;
      }
    }
  }
  v15 = ((uint64_t)v12 - v6) >> 3;
  v16 = v12 + 1;
  if (v15 != v13 && v16 != (_QWORD *)(v6 + 8 * v13))
  {
    v18 = 8 * v13 - 8 * v15 - 8;
    do
    {
      if (*v16)
        *v12++ = *v16;
      ++v16;
      v18 -= 8;
    }
    while (v18);
    v6 = *v5;
  }
  *((_DWORD *)v5 + 2) = ((unint64_t)v12 - v6) >> 3;
  return result;
}

uint64_t sub_1C519B158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(unsigned int *)(a3 + 64);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a3 + 48);
    LODWORD(v8) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v9 = (uint64_t *)(v7 + 16 * v8);
    v10 = *v9;
    if (*v9 == a2)
    {
LABEL_7:
      if (v9 != (uint64_t *)(v7 + 16 * v6))
      {
        result = v9[1];
        if (result)
          return result;
      }
    }
    else
    {
      v11 = 1;
      while (v10 != -4096)
      {
        v12 = v8 + v11++;
        v8 = v12 & (v6 - 1);
        v10 = *(_QWORD *)(v7 + 16 * v8);
        if (v10 == a2)
        {
          v9 = (uint64_t *)(v7 + 16 * v8);
          goto LABEL_7;
        }
      }
    }
  }
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_DWORD *)(a1 + 40);
  v16 = sub_1C4F4C0E0(v14, v15, a2);
  if ((uint64_t *)(v14 + 72 * v15) == v16)
    v17 = 0;
  else
    v17 = v16[4];
  v18 = sub_1C519B158(a1, v17, a3);
  return llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::createChild(a3, a2, v18);
}

uint64_t sub_1C519B258(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v10;
  uint64_t v11;

  v2 = *(unsigned int *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v4 = 72 * v2;
    v5 = (_QWORD *)(v3 + 56);
    do
    {
      v6 = *(v5 - 7);
      if (v6 != -4096 && v6 != -8192)
      {
        v7 = (_QWORD *)*(v5 - 2);
        if (v5 != v7)
        {
          v10 = v5;
          v11 = v4;
          free(v7);
          v5 = v10;
          v4 = v11;
        }
      }
      v5 += 9;
      v4 -= 72;
    }
    while (v4);
    v3 = *(_QWORD *)(a1 + 24);
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_1C519B2F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 72 * v1;
    v3 = *(_QWORD *)a1 + 56;
    do
    {
      v4 = *(_QWORD *)(v3 - 56);
      if (v4 != -4096 && v4 != -8192)
      {
        v5 = *(void **)(v3 - 16);
        if ((void *)v3 != v5)
        {
          v6 = v3;
          v7 = v2;
          free(v5);
          v3 = v6;
          v2 = v7;
        }
      }
      v3 += 72;
      v2 -= 72;
    }
    while (v2);
  }
}

void sub_1C519B364(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  void *v7[2];
  _QWORD v8[5];

  v8[4] = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v5 = *(uint64_t **)a1;
    v6 = 8 * v2;
    while (!sub_1C519BBA4(*v5, a2))
    {
      ++v5;
      v6 -= 8;
      if (!v6)
        return;
    }
    sub_1C519B438((uint64_t)v7, a1, a2);
    if (!sub_1C61ED220(*(uint64_t **)a1, *(_DWORD *)(a1 + 8), (uint64_t)v7))
      sub_1C51991B8(a1, a2);
    if (v7[0] != v8)
      free(v7[0]);
  }
}

void sub_1C519B438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int32x2_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  _QWORD *v43;
  int v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  int v54;
  BOOL v55;
  unsigned int v56;
  _QWORD *v57;
  uint64_t v58;
  int v59;
  _QWORD *v60;
  unsigned int v61;
  _QWORD *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int32x2_t v83;
  uint64_t v84;
  void *v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  int32x2_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t __src;
  char v94[8];
  unsigned int v95;
  char v96;
  void *__p;
  void *v98;
  _QWORD *v99;
  _QWORD v100[2];
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v81 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x400000000;
  v6 = operator new(8uLL);
  v85 = v6;
  *v6 = 0;
  v86 = v6 + 1;
  v87 = v6 + 1;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = a3;
  sub_1C519BFB0((char **)&v85);
  v7 = *(_QWORD *)(a2 + 80);
  v8 = v7 + 320;
  v9 = *(_QWORD *)(v7 + 328);
  if (v9 == v7 + 320)
    goto LABEL_108;
  v10 = 1;
  v11 = 1;
  do
  {
    if (!sub_1C519BBA4(v9, a3))
    {
      v12 = *(unsigned int *)(a1 + 8);
      if (v12 >= *(unsigned int *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, v81, v12 + 1, 8);
        v12 = *(unsigned int *)(a1 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v9;
      ++*(_DWORD *)(a1 + 8);
      v11 = sub_1C519C154((uint64_t)&v85, v9, v11, 1);
    }
    v9 = *(_QWORD *)(v9 + 8);
    ++v10;
  }
  while (v9 != v8);
  if (v10 == (_DWORD)v11)
    goto LABEL_108;
  LOBYTE(__src) = 0;
  v96 = 0;
  v13 = *(_QWORD *)(a2 + 80);
  v14 = v13 + 320;
  v15 = *(_QWORD *)(v13 + 328);
  if (v15 != v13 + 320)
  {
    v80 = a3;
    v84 = v13 + 320;
    while (1)
    {
      v16 = v88;
      v17 = v90;
      if (!v90)
        goto LABEL_17;
      v18 = ((v15 >> 4) ^ (v15 >> 9)) & (v90 - 1);
      v19 = *(_QWORD *)(v88 + 72 * v18);
      if (v15 != v19)
        break;
LABEL_33:
      v15 = *(_QWORD *)(v15 + 8);
      if (v15 == v14)
      {
        a3 = v80;
        if (v96)
          MEMORY[0x1CAA32FB4](__src, 8);
        goto LABEL_80;
      }
    }
    v20 = 1;
    while (v19 != -4096)
    {
      v21 = v18 + v20++;
      v18 = v21 & (v90 - 1);
      v19 = *(_QWORD *)(v88 + 72 * v18);
      if (v15 == v19)
        goto LABEL_33;
    }
LABEL_17:
    if (v96)
    {
LABEL_18:
      v22 = sub_1C519C6AC((uint64_t)&v85, v15, v11, v11, (uint64_t)&__src);
      v23 = v85;
      v24 = *((_QWORD *)v85 + v22);
      v25 = *(unsigned int *)(a1 + 8);
      if (v25 >= *(unsigned int *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, v81, v25 + 1, 8);
        v25 = *(unsigned int *)(a1 + 8);
      }
      v26 = v22;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v24;
      ++*(_DWORD *)(a1 + 8);
      if (v22 > v11)
      {
        v27 = v90;
        v28 = v90 - 1;
        v29 = v89;
        do
        {
          if (v27)
          {
            v30 = v23[v26];
            v31 = ((v30 >> 4) ^ (v30 >> 9)) & v28;
            v32 = (uint64_t *)(v88 + 72 * v31);
            v33 = *v32;
            if (*v32 == v30)
            {
LABEL_27:
              v36 = (uint64_t *)v32[5];
              if (v36 != v32 + 7)
              {
                v83 = v29;
                free(v36);
                v29 = v83;
              }
              *v32 = -8192;
              v29 = vadd_s32(v29, (int32x2_t)0x1FFFFFFFFLL);
            }
            else
            {
              v34 = 1;
              while (v33 != -4096)
              {
                v35 = v31 + v34++;
                v31 = v35 & v28;
                v32 = (uint64_t *)(v88 + 72 * v31);
                v33 = *v32;
                if (*v32 == v30)
                  goto LABEL_27;
              }
            }
          }
          --v86;
          --v26;
        }
        while (v11 < v26);
        v89 = v29;
      }
      v11 = sub_1C519C154((uint64_t)&v85, v24, v11, 1);
      v14 = v84;
      goto LABEL_33;
    }
    __p = 0;
    v98 = 0;
    LODWORD(v99) = 0;
    sub_1C61F97A0((uint64_t)&__src, (uint64_t)&__p);
    MEMORY[0x1CAA32FB4](__p, 8);
    v37 = *(_QWORD *)(a2 + 80);
    v38 = v37 + 320;
    v39 = *(_QWORD **)(v37 + 328);
    if (v39 == (_QWORD *)(v37 + 320))
    {
LABEL_71:
      v58 = v37 + 320;
      if (v38 != v37 + 320)
      {
        v59 = 1;
        do
        {
          v92 = v38;
          __p = 0;
          if (sub_1C4926528((uint64_t)&__src, &v92, &__p) && __p != (void *)(__src + 16 * v95))
            *((_DWORD *)__p + 2) = v59;
          v38 = *(_QWORD *)(v38 + 8);
          ++v59;
        }
        while (v38 != v58);
      }
      goto LABEL_18;
    }
    v40 = v17 - 1;
    v41 = v91;
    v82 = v91;
    while (1)
    {
      if (!v17)
        goto LABEL_43;
      v42 = ((v39 >> 4) ^ (v39 >> 9)) & v40;
      v43 = *(_QWORD **)(v16 + 72 * v42);
      if (v39 != v43)
        break;
LABEL_69:
      v39 = (_QWORD *)v39[1];
      if (v39 == (_QWORD *)v38)
      {
        v37 = *(_QWORD *)(a2 + 80);
        v38 = *(_QWORD *)(v37 + 328);
        goto LABEL_71;
      }
    }
    v44 = 1;
    while (v43 != (_QWORD *)-4096)
    {
      v45 = v42 + v44++;
      v42 = v45 & v40;
      v43 = *(_QWORD **)(v16 + 72 * v42);
      if (v39 == v43)
        goto LABEL_69;
    }
LABEL_43:
    if (v41)
      sub_1C519BC38((uint64_t)&__p, *(_QWORD *)(v41 + 8), (uint64_t)v39);
    else
      sub_1C519BE94((uint64_t *)&__p, v39[11], v39[12]);
    v46 = (uint64_t *)__p;
    v47 = (uint64_t *)((char *)__p + 8 * v98);
    if (!(_DWORD)v98)
    {
LABEL_66:
      if (v46 != (uint64_t *)&v99)
        free(v46);
      v40 = v17 - 1;
      v41 = v82;
      goto LABEL_69;
    }
    while (1)
    {
      v92 = 0;
      v49 = *v46;
      v92 = *v46;
      if (!v95)
        break;
      v50 = (v95 - 1) & ((v49 >> 4) ^ (v49 >> 9));
      v51 = (_QWORD *)(__src + 16 * v50);
      v52 = *v51;
      if (v49 != *v51)
      {
        v53 = 0;
        v54 = 1;
        while (v52 != -4096)
        {
          if (v53)
            v55 = 0;
          else
            v55 = v52 == -8192;
          if (v55)
            v53 = v51;
          v56 = v50 + v54++;
          v50 = v56 & (v95 - 1);
          v51 = (_QWORD *)(__src + 16 * v50);
          v52 = *v51;
          if (v49 == *v51)
            goto LABEL_64;
        }
        if (v53)
          v48 = v53;
        else
          v48 = v51;
        goto LABEL_63;
      }
LABEL_64:
      if (++v46 == v47)
      {
        v46 = (uint64_t *)__p;
        goto LABEL_66;
      }
    }
    v48 = 0;
LABEL_63:
    v57 = sub_1C49D7988((uint64_t)&__src, (uint64_t)&v92, &v92, v48);
    *v57 = v92;
    *((_DWORD *)v57 + 2) = 0;
    goto LABEL_64;
  }
LABEL_80:
  v60 = operator new(8uLL);
  __p = v60;
  *v60 = 0;
  v98 = v60 + 1;
  v99 = v60 + 1;
  v100[0] = 0;
  v100[1] = 0;
  v101 = 0;
  v102 = a3;
  if (*(_DWORD *)(a1 + 8))
  {
    v61 = 0;
    do
    {
      v62 = *(_QWORD **)a1;
      if (sub_1C519BBA4(*(_QWORD *)(*(_QWORD *)a1 + 8 * v61), a3))
      {
        __src = 0;
        sub_1C4DE4490(&__p, (char *)&__src, v94, 1uLL);
        sub_1C519D7B0((uint64_t)v100);
        v63 = sub_1C519C6AC((uint64_t)&__p, v62[v61], 0, 0, 0);
        v64 = *(unsigned int *)(a1 + 8);
        if (v63 >= 2)
        {
          v65 = *(_QWORD *)a1 + 8 * v64;
          v66 = 2;
          while (1)
          {
            if ((_DWORD)v64)
            {
              v67 = 8 * v64;
              v68 = *(_QWORD **)a1;
              while (*v68 != *((_QWORD *)__p + v66))
              {
                ++v68;
                v67 -= 8;
                if (!v67)
                {
                  v68 = (_QWORD *)(*(_QWORD *)a1 + 8 * v64);
                  break;
                }
              }
            }
            else
            {
              v68 = *(_QWORD **)a1;
            }
            if (v64 != ((uint64_t)v68 - *(_QWORD *)a1) >> 3)
              break;
            if (++v66 > v63)
              goto LABEL_96;
          }
          v69 = v62[v61];
          v62[v61] = *(_QWORD *)(v65 - 8);
          *(_QWORD *)(v65 - 8) = v69;
          LODWORD(v64) = v64 - 1;
          *(_DWORD *)(a1 + 8) = v64;
          --v61;
        }
      }
      else
      {
        LODWORD(v64) = *(_DWORD *)(a1 + 8);
      }
LABEL_96:
      ++v61;
    }
    while (v64 > v61);
    v70 = v100[0];
    if (v101)
    {
      v71 = v100[0] + 56;
      v72 = 72 * v101;
      do
      {
        v73 = *(_QWORD *)(v71 - 56);
        if (v73 != -4096 && v73 != -8192)
        {
          v74 = *(void **)(v71 - 16);
          if ((void *)v71 != v74)
            free(v74);
        }
        v71 += 72;
        v72 -= 72;
      }
      while (v72);
      v70 = v100[0];
    }
  }
  else
  {
    v70 = 0;
  }
  MEMORY[0x1CAA32FB4](v70, 8);
  if (__p)
  {
    v98 = __p;
    operator delete(__p);
  }
LABEL_108:
  v75 = v88;
  if (v90)
  {
    v76 = 72 * v90;
    v77 = (_QWORD *)(v88 + 56);
    do
    {
      v78 = *(v77 - 7);
      if (v78 != -4096 && v78 != -8192)
      {
        v79 = (_QWORD *)*(v77 - 2);
        if (v77 != v79)
          free(v79);
      }
      v77 += 9;
      v76 -= 72;
    }
    while (v76);
  }
  MEMORY[0x1CAA32FB4](v75, 8);
  if (v85)
    operator delete(v85);
}

BOOL sub_1C519BBA4(uint64_t a1, uint64_t a2)
{
  int v2;
  void *v4;
  int v5;
  _QWORD v6[9];

  v6[8] = *MEMORY[0x1E0C80C00];
  if (a2)
    sub_1C519BC38((uint64_t)&v4, *(_QWORD *)(a2 + 8), a1);
  else
    sub_1C519BE94((uint64_t *)&v4, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
  v2 = v5;
  if (v4 != v6)
    free(v4);
  return v2 != 0;
}

_BYTE *sub_1C519BC38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *result;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = a3;
  v6 = *(_QWORD *)(a3 + 88);
  v7 = *(_QWORD *)(a3 + 96);
  v8 = (_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x800000000;
  v9 = v7 - v6;
  if ((unint64_t)(v7 - v6) >= 0x41)
  {
    v40 = v7 - v6;
    v41 = v6;
    v42 = v7;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v9 >> 3, 8);
    v7 = v42;
    v6 = v41;
    v9 = v40;
    v3 = a3;
    v10 = *(unsigned int *)(a1 + 8);
    v8 = *(_QWORD **)a1;
    v11 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  if (v7 != v6)
  {
    v12 = &v8[v10];
    do
    {
      v13 = *(_QWORD *)(v7 - 8);
      v7 -= 8;
      *v12++ = v13;
    }
    while (v7 != v6);
    v8 = *(_QWORD **)a1;
  }
  v14 = (unint64_t)v9 >> 3;
  v15 = v8;
  v16 = (v11 + v14);
  if (v11 + (_DWORD)v14)
  {
    v17 = 8 * v16;
    v15 = v8;
    while (*v15)
    {
      ++v15;
      v17 -= 8;
      if (!v17)
      {
        v15 = &v8[v16];
        break;
      }
    }
  }
  v18 = v15 - v8;
  v19 = v15 + 1;
  if (v18 != v16 && v19 != &v8[v16])
  {
    v21 = 8 * v16 - 8 * v18 - 8;
    do
    {
      if (*v19)
        *v15++ = *v19;
      ++v19;
      v21 -= 8;
    }
    while (v21);
    v8 = *(_QWORD **)a1;
  }
  v22 = (char *)v15 - (char *)v8;
  v23 = (unint64_t)((char *)v15 - (char *)v8) >> 3;
  *(_DWORD *)(a1 + 8) = v23;
  result = (_BYTE *)sub_1C61F968C(a2 + 296, v3);
  if ((*(_BYTE *)(a2 + 296) & 1) != 0)
  {
    v25 = a2 + 304;
    v26 = 4;
  }
  else
  {
    v25 = *(_QWORD *)(a2 + 304);
    v26 = *(_DWORD *)(a2 + 312);
  }
  if ((_BYTE *)(v25 + 72 * v26) != result)
  {
    v27 = *((unsigned int *)result + 4);
    if ((_DWORD)v27)
    {
      v28 = (v22 >> 3);
      v29 = (uint64_t *)*((_QWORD *)result + 1);
      v30 = &v29[v27];
      do
      {
        v31 = *v29;
        v32 = 8 * v28;
        v33 = v8;
        v34 = &v8[v28];
        if (v28)
        {
          v35 = 8 * v28;
          v33 = v8;
          while (*v33 != v31)
          {
            ++v33;
            v35 -= 8;
            if (!v35)
            {
              v33 = &v8[v28];
              break;
            }
          }
        }
        v36 = v33 - v8;
        if (v36 != v28)
        {
          v37 = v33 + 1;
          if (v33 + 1 != v34)
          {
            v38 = v32 - 8 * v36 - 8;
            do
            {
              if (*v37 != v31)
                *v33++ = *v37;
              ++v37;
              v38 -= 8;
            }
            while (v38);
            v8 = *(_QWORD **)a1;
          }
        }
        v39 = (char *)v33 - (char *)v8;
        v28 = (v39 >> 3);
        ++v29;
      }
      while (v29 != v30);
      v23 = v39 >> 3;
      *(_DWORD *)(a1 + 8) = v28;
    }
    return sub_1C61BB99C((unsigned int *)a1, (uint64_t)&v8[v23], *((uint64_t **)result + 5), (uint64_t *)(*((_QWORD *)result + 5) + 8 * *((unsigned int *)result + 12)));
  }
  return result;
}

uint64_t *sub_1C519BE94(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  v4 = (uint64_t)(result + 2);
  *result = (uint64_t)(result + 2);
  result[1] = 0x800000000;
  v5 = a3 - a2;
  if ((unint64_t)(a3 - a2) >= 0x41)
  {
    v20 = a3 - a2;
    v21 = result;
    v18 = a2;
    v19 = a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, v4, v5 >> 3, 8);
    a3 = v19;
    v5 = v20;
    a2 = v18;
    result = v21;
    v6 = *((unsigned int *)v21 + 2);
    v4 = *v21;
    v7 = *((_DWORD *)v21 + 2);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  if (a3 != a2)
  {
    v8 = (_QWORD *)(v4 + 8 * v6);
    do
    {
      v9 = *(_QWORD *)(a3 - 8);
      a3 -= 8;
      *v8++ = v9;
    }
    while (a3 != a2);
    v4 = *result;
  }
  v10 = (unint64_t)v5 >> 3;
  v11 = (_QWORD *)v4;
  v12 = (v7 + v10);
  if (v7 + (_DWORD)v10)
  {
    v13 = 8 * v12;
    v11 = (_QWORD *)v4;
    while (*v11)
    {
      ++v11;
      v13 -= 8;
      if (!v13)
      {
        v11 = (_QWORD *)(v4 + 8 * v12);
        break;
      }
    }
  }
  v14 = ((uint64_t)v11 - v4) >> 3;
  v15 = v11 + 1;
  if (v14 != v12 && v15 != (_QWORD *)(v4 + 8 * v12))
  {
    v17 = 8 * v12 - 8 * v14 - 8;
    do
    {
      if (*v15)
        *v11++ = *v15;
      ++v15;
      v17 -= 8;
    }
    while (v17);
    v4 = *result;
  }
  *((_DWORD *)result + 2) = ((unint64_t)v11 - v4) >> 3;
  return result;
}

void sub_1C519BFB0(char **a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  unsigned int v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;

  v4 = (uint64_t *)a1[3];
  v2 = (uint64_t)(a1 + 3);
  v3 = v4;
  v26 = 0;
  v5 = *(_DWORD *)(v2 + 16);
  if (v5)
  {
    v6 = *v3;
    if (!*v3)
    {
      v7 = v3;
      goto LABEL_4;
    }
    v19 = 0;
    v20 = 0;
    v21 = v5 - 1;
    v22 = 1;
    v7 = v3;
    while (v6 != -4096)
    {
      if (v20)
        v23 = 0;
      else
        v23 = v6 == -8192;
      if (v23)
        v20 = v7;
      v24 = v19 + v22++;
      v19 = v24 & v21;
      v7 = &v3[9 * (v24 & v21)];
      v6 = *v7;
      if (!*v7)
        goto LABEL_4;
    }
    if (v20)
      v25 = v20;
    else
      v25 = v7;
  }
  else
  {
    v25 = 0;
  }
  v7 = sub_1C519AA58(v2, &v26, v25);
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[8] = 0;
  v7[5] = (uint64_t)(v7 + 7);
  *((_DWORD *)v7 + 13) = 2;
LABEL_4:
  *((_DWORD *)v7 + 4) = 1;
  *((_DWORD *)v7 + 2) = 1;
  v7[3] = 0;
  v9 = a1[1];
  v8 = (unint64_t)a1[2];
  if ((unint64_t)v9 < v8)
  {
    *(_QWORD *)v9 = 0;
    v17 = v9 + 8;
  }
  else
  {
    v10 = *a1;
    v11 = (v9 - *a1) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v13 = v8 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_1C4764EE4();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *(_QWORD *)v16 = 0;
    v17 = v16 + 8;
    if (v9 != v10)
    {
      do
      {
        v18 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v16 - 1) = v18;
        v16 -= 8;
      }
      while (v9 != v10);
      v9 = *a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
  a1[1] = v17;
}

uint64_t sub_1C519C154(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  int v7;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  _DWORD *v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t *v61;
  int v62;
  BOOL v63;
  unsigned int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  unsigned int v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  _QWORD v79[66];

  v79[64] = *MEMORY[0x1E0C80C00];
  v73 = a2;
  v77 = v79;
  v79[0] = a2;
  v78 = 0x4000000001;
  v6 = *(_QWORD *)(a1 + 24);
  v70 = a1 + 24;
  v7 = *(_DWORD *)(a1 + 40);
  if (!v7)
    goto LABEL_15;
  v10 = v7 - 1;
  v11 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v12 = (uint64_t *)(v6 + 72 * v11);
  v13 = *v12;
  if (*v12 == a2)
  {
LABEL_14:
    *(_DWORD *)(v6 + 72 * v11 + 12) = a4;
LABEL_15:
    v22 = 1;
    goto LABEL_16;
  }
  v14 = 1;
  v15 = *v12;
  v16 = v10 & ((a2 >> 4) ^ (a2 >> 9));
  do
  {
    if (v15 == -4096)
      goto LABEL_15;
    v17 = v16 + v14++;
    v16 = v17 & v10;
    v15 = *(_QWORD *)(v6 + 72 * v16);
  }
  while (v15 != a2);
  v18 = 0;
  v19 = 1;
  while (v13 != -4096)
  {
    if (v18)
      v20 = 0;
    else
      v20 = v13 == -8192;
    if (v20)
      v18 = v12;
    v21 = v11 + v19++;
    v11 = v21 & v10;
    v12 = (uint64_t *)(v6 + 72 * v11);
    v13 = *v12;
    if (*v12 == a2)
      goto LABEL_14;
  }
  if (v18)
    v67 = v18;
  else
    v67 = v12;
  v68 = sub_1C519AA58(v70, &v73, v67);
  *v68 = a2;
  *(_OWORD *)(v68 + 5) = 0u;
  *(_OWORD *)(v68 + 3) = 0u;
  *(_OWORD *)(v68 + 7) = 0u;
  *(_OWORD *)(v68 + 1) = 0u;
  v68[5] = (uint64_t)(v68 + 7);
  *((_DWORD *)v68 + 13) = 2;
  v22 = v78;
  *((_DWORD *)v68 + 3) = a4;
  if (v22)
  {
    do
    {
LABEL_16:
      v23 = *((_QWORD *)v77 + v22 - 1);
      LODWORD(v78) = v22 - 1;
      v72 = v23;
      v24 = *(_DWORD *)(a1 + 40);
      if (v24)
      {
        v25 = *(_QWORD *)(a1 + 24);
        v26 = v24 - 1;
        v27 = v26 & ((v23 >> 4) ^ (v23 >> 9));
        v28 = (uint64_t *)(v25 + 72 * v27);
        v29 = *v28;
        if (v23 == *v28)
          goto LABEL_31;
        v30 = 0;
        v31 = 1;
        while (v29 != -4096)
        {
          if (v30)
            v32 = 0;
          else
            v32 = v29 == -8192;
          if (v32)
            v30 = v28;
          v33 = v27 + v31++;
          v27 = v33 & v26;
          v28 = (uint64_t *)(v25 + 72 * v27);
          v29 = *v28;
          if (v23 == *v28)
            goto LABEL_31;
        }
        if (v30)
          v34 = v30;
        else
          v34 = v28;
      }
      else
      {
        v34 = 0;
      }
      v28 = sub_1C519AA58(v70, &v72, v34);
      *v28 = v23;
      *(_OWORD *)(v28 + 5) = 0u;
      *(_OWORD *)(v28 + 1) = 0u;
      *(_OWORD *)(v28 + 3) = 0u;
      *(_OWORD *)(v28 + 7) = 0u;
      v28[5] = (uint64_t)(v28 + 7);
      *((_DWORD *)v28 + 13) = 2;
LABEL_31:
      if (!*((_DWORD *)v28 + 2))
      {
        a3 = (a3 + 1);
        *((_DWORD *)v28 + 4) = a3;
        *((_DWORD *)v28 + 2) = a3;
        v28[3] = v23;
        v36 = *(uint64_t **)(a1 + 8);
        v35 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v36 >= v35)
        {
          v38 = *(uint64_t **)a1;
          v39 = ((uint64_t)v36 - *(_QWORD *)a1) >> 3;
          v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 61)
            abort();
          v41 = v35 - (_QWORD)v38;
          if (v41 >> 2 > v40)
            v40 = v41 >> 2;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
            v42 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v42 = v40;
          if (v42)
          {
            if (v42 >> 61)
              sub_1C4764EE4();
            v43 = (char *)operator new(8 * v42);
          }
          else
          {
            v43 = 0;
          }
          v44 = (uint64_t *)&v43[8 * v39];
          *v44 = v23;
          v37 = v44 + 1;
          if (v36 != v38)
          {
            do
            {
              v45 = *--v36;
              *--v44 = v45;
            }
            while (v36 != v38);
            v36 = *(uint64_t **)a1;
          }
          *(_QWORD *)a1 = v44;
          *(_QWORD *)(a1 + 8) = v37;
          *(_QWORD *)(a1 + 16) = &v43[8 * v42];
          if (v36)
            operator delete(v36);
        }
        else
        {
          *v36 = v23;
          v37 = v36 + 1;
        }
        *(_QWORD *)(a1 + 8) = v37;
        v46 = *(_QWORD *)(a1 + 48);
        if (v46)
          sub_1C519AE08((uint64_t)&v74, *(_QWORD *)(v46 + 8), v72);
        else
          sub_1C519B044((uint64_t *)&v74, *(char **)(v72 + 64), *(char **)(v72 + 72));
        v47 = (uint64_t *)v74;
        v48 = (uint64_t *)((char *)v74 + 8 * v75);
        if (v75)
        {
          while (1)
          {
            v49 = *v47;
            v71 = v49;
            v50 = *(_QWORD *)(a1 + 24);
            v51 = *(_DWORD *)(a1 + 40);
            v52 = sub_1C4F4C0E0(v50, v51, v49);
            if ((uint64_t *)(v50 + 72 * v51) == v52)
              break;
            v53 = v52;
            if (!*((_DWORD *)v52 + 2))
              break;
            v54 = v72;
            if (v49 != v72)
            {
              v55 = v52 + 5;
              v57 = v52 + 6;
              v56 = *((unsigned int *)v52 + 12);
              v58 = *((unsigned int *)v52 + 13);
LABEL_75:
              if (v56 >= v58)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v55, (uint64_t)(v53 + 7), v56 + 1, 8);
                v56 = *((unsigned int *)v53 + 12);
              }
              *(_QWORD *)(*v55 + 8 * v56) = v54;
              ++*v57;
            }
            if (++v47 == v48)
            {
              v47 = (uint64_t *)v74;
              goto LABEL_81;
            }
          }
          if (v51)
          {
            v59 = ((v49 >> 4) ^ (v49 >> 9)) & (v51 - 1);
            v53 = (uint64_t *)(v50 + 72 * v59);
            v60 = *v53;
            if (v49 != *v53)
            {
              v61 = 0;
              v62 = 1;
              while (v60 != -4096)
              {
                if (v61)
                  v63 = 0;
                else
                  v63 = v60 == -8192;
                if (v63)
                  v61 = v53;
                v64 = v59 + v62++;
                v59 = v64 & (v51 - 1);
                v53 = (uint64_t *)(v50 + 72 * v59);
                v60 = *v53;
                if (v49 == *v53)
                  goto LABEL_72;
              }
              if (v61)
                v65 = v61;
              else
                v65 = v53;
LABEL_71:
              v53 = sub_1C519AA58(v70, &v71, v65);
              *v53 = v49;
              *(_OWORD *)(v53 + 5) = 0u;
              *(_OWORD *)(v53 + 1) = 0u;
              *(_OWORD *)(v53 + 3) = 0u;
              *(_OWORD *)(v53 + 7) = 0u;
              v53[5] = (uint64_t)(v53 + 7);
              *((_DWORD *)v53 + 13) = 2;
            }
LABEL_72:
            v66 = v78;
            if (v78 >= (unint64_t)HIDWORD(v78))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, (uint64_t)v79, v78 + 1, 8);
              v66 = v78;
            }
            *((_QWORD *)v77 + v66) = v49;
            v57 = v53 + 6;
            v56 = *((unsigned int *)v53 + 12);
            LODWORD(v78) = v78 + 1;
            *((_DWORD *)v53 + 3) = a3;
            v55 = v53 + 5;
            v54 = v72;
            v58 = *((unsigned int *)v53 + 13);
            goto LABEL_75;
          }
          v65 = 0;
          goto LABEL_71;
        }
LABEL_81:
        if (v47 != &v76)
          free(v47);
      }
      v22 = v78;
    }
    while ((_DWORD)v78);
  }
  if (v77 != v79)
    free(v77);
  return a3;
}

uint64_t sub_1C519C6AC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v7;
  int v8;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  _DWORD *v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  BOOL v65;
  unsigned int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  unsigned int v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  _QWORD v82[66];

  v82[64] = *MEMORY[0x1E0C80C00];
  v75 = a2;
  v80 = v82;
  v82[0] = a2;
  v81 = 0x4000000001;
  v7 = *(_QWORD *)(a1 + 24);
  v73 = a1 + 24;
  v8 = *(_DWORD *)(a1 + 40);
  if (!v8)
    goto LABEL_15;
  v11 = v8 - 1;
  v12 = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v13 = (uint64_t *)(v7 + 72 * v12);
  v14 = *v13;
  if (*v13 == a2)
  {
LABEL_14:
    *(_DWORD *)(v7 + 72 * v12 + 12) = a4;
LABEL_15:
    v23 = 1;
    goto LABEL_16;
  }
  v15 = 1;
  v16 = *v13;
  v17 = v11 & ((a2 >> 4) ^ (a2 >> 9));
  do
  {
    if (v16 == -4096)
      goto LABEL_15;
    v18 = v17 + v15++;
    v17 = v18 & v11;
    v16 = *(_QWORD *)(v7 + 72 * v17);
  }
  while (v16 != a2);
  v19 = 0;
  v20 = 1;
  while (v14 != -4096)
  {
    if (v19)
      v21 = 0;
    else
      v21 = v14 == -8192;
    if (v21)
      v19 = v13;
    v22 = v12 + v20++;
    v12 = v22 & v11;
    v13 = (uint64_t *)(v7 + 72 * v12);
    v14 = *v13;
    if (*v13 == a2)
      goto LABEL_14;
  }
  if (v19)
    v69 = v19;
  else
    v69 = v13;
  v70 = sub_1C519AA58(v73, &v75, v69);
  *v70 = a2;
  *(_OWORD *)(v70 + 5) = 0u;
  *(_OWORD *)(v70 + 3) = 0u;
  *(_OWORD *)(v70 + 7) = 0u;
  *(_OWORD *)(v70 + 1) = 0u;
  v70[5] = (uint64_t)(v70 + 7);
  *((_DWORD *)v70 + 13) = 2;
  v23 = v81;
  *((_DWORD *)v70 + 3) = a4;
  if (v23)
  {
    do
    {
LABEL_16:
      v24 = *((_QWORD *)v80 + v23 - 1);
      LODWORD(v81) = v23 - 1;
      v74 = v24;
      v25 = *(_DWORD *)(a1 + 40);
      if (v25)
      {
        v26 = *(_QWORD *)(a1 + 24);
        v27 = v25 - 1;
        v28 = v27 & ((v24 >> 4) ^ (v24 >> 9));
        v29 = (uint64_t *)(v26 + 72 * v28);
        v30 = *v29;
        if (v24 == *v29)
          goto LABEL_31;
        v31 = 0;
        v32 = 1;
        while (v30 != -4096)
        {
          if (v31)
            v33 = 0;
          else
            v33 = v30 == -8192;
          if (v33)
            v31 = v29;
          v34 = v28 + v32++;
          v28 = v34 & v27;
          v29 = (uint64_t *)(v26 + 72 * v28);
          v30 = *v29;
          if (v24 == *v29)
            goto LABEL_31;
        }
        if (v31)
          v35 = v31;
        else
          v35 = v29;
      }
      else
      {
        v35 = 0;
      }
      v29 = sub_1C519AA58(v73, &v74, v35);
      *v29 = v24;
      *(_OWORD *)(v29 + 5) = 0u;
      *(_OWORD *)(v29 + 1) = 0u;
      *(_OWORD *)(v29 + 3) = 0u;
      *(_OWORD *)(v29 + 7) = 0u;
      v29[5] = (uint64_t)(v29 + 7);
      *((_DWORD *)v29 + 13) = 2;
LABEL_31:
      if (!*((_DWORD *)v29 + 2))
      {
        a3 = (a3 + 1);
        *((_DWORD *)v29 + 4) = a3;
        *((_DWORD *)v29 + 2) = a3;
        v29[3] = v24;
        v37 = *(uint64_t **)(a1 + 8);
        v36 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v37 >= v36)
        {
          v39 = *(uint64_t **)a1;
          v40 = ((uint64_t)v37 - *(_QWORD *)a1) >> 3;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61)
            abort();
          v42 = v36 - (_QWORD)v39;
          if (v42 >> 2 > v41)
            v41 = v42 >> 2;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v43 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            if (v43 >> 61)
              sub_1C4764EE4();
            v44 = (char *)operator new(8 * v43);
          }
          else
          {
            v44 = 0;
          }
          v45 = (uint64_t *)&v44[8 * v40];
          *v45 = v24;
          v38 = v45 + 1;
          if (v37 != v39)
          {
            do
            {
              v46 = *--v37;
              *--v45 = v46;
            }
            while (v37 != v39);
            v37 = *(uint64_t **)a1;
          }
          *(_QWORD *)a1 = v45;
          *(_QWORD *)(a1 + 8) = v38;
          *(_QWORD *)(a1 + 16) = &v44[8 * v43];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v37 = v24;
          v38 = v37 + 1;
        }
        *(_QWORD *)(a1 + 8) = v38;
        v47 = *(_QWORD *)(a1 + 48);
        if (v47)
          sub_1C519BC38((uint64_t)&v77, *(_QWORD *)(v47 + 8), v74);
        else
          sub_1C519BE94((uint64_t *)&v77, *(_QWORD *)(v74 + 88), *(_QWORD *)(v74 + 96));
        v48 = v78;
        if (a5 && v78 >= 2uLL)
        {
          v76 = a5;
          sub_1C519CC44((uint64_t)v77, (uint64_t *)v77 + v78, &v76, 126 - 2 * __clz(v78), 1);
          v48 = v78;
        }
        v49 = (uint64_t *)v77;
        v50 = (uint64_t *)((char *)v77 + 8 * v48);
        if (v48)
        {
          while (1)
          {
            v51 = *v49;
            v76 = v51;
            v52 = *(_QWORD *)(a1 + 24);
            v53 = *(_DWORD *)(a1 + 40);
            v54 = sub_1C4F4C0E0(v52, v53, v51);
            if ((uint64_t *)(v52 + 72 * v53) == v54)
              break;
            v55 = v54;
            if (!*((_DWORD *)v54 + 2))
              break;
            v56 = v74;
            if (v51 != v74)
            {
              v57 = v54 + 5;
              v59 = v54 + 6;
              v58 = *((unsigned int *)v54 + 12);
              v60 = *((unsigned int *)v54 + 13);
LABEL_78:
              if (v58 >= v60)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v57, (uint64_t)(v55 + 7), v58 + 1, 8);
                v58 = *((unsigned int *)v55 + 12);
              }
              *(_QWORD *)(*v57 + 8 * v58) = v56;
              ++*v59;
            }
            if (++v49 == v50)
            {
              v49 = (uint64_t *)v77;
              goto LABEL_84;
            }
          }
          if (v53)
          {
            v61 = ((v51 >> 4) ^ (v51 >> 9)) & (v53 - 1);
            v55 = (uint64_t *)(v52 + 72 * v61);
            v62 = *v55;
            if (v51 != *v55)
            {
              v63 = 0;
              v64 = 1;
              while (v62 != -4096)
              {
                if (v63)
                  v65 = 0;
                else
                  v65 = v62 == -8192;
                if (v65)
                  v63 = v55;
                v66 = v61 + v64++;
                v61 = v66 & (v53 - 1);
                v55 = (uint64_t *)(v52 + 72 * v61);
                v62 = *v55;
                if (v51 == *v55)
                  goto LABEL_75;
              }
              if (v63)
                v67 = v63;
              else
                v67 = v55;
LABEL_74:
              v55 = sub_1C519AA58(v73, &v76, v67);
              *v55 = v51;
              *(_OWORD *)(v55 + 5) = 0u;
              *(_OWORD *)(v55 + 1) = 0u;
              *(_OWORD *)(v55 + 3) = 0u;
              *(_OWORD *)(v55 + 7) = 0u;
              v55[5] = (uint64_t)(v55 + 7);
              *((_DWORD *)v55 + 13) = 2;
            }
LABEL_75:
            v68 = v81;
            if (v81 >= (unint64_t)HIDWORD(v81))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, (uint64_t)v82, v81 + 1, 8);
              v68 = v81;
            }
            *((_QWORD *)v80 + v68) = v51;
            v59 = v55 + 6;
            v58 = *((unsigned int *)v55 + 12);
            LODWORD(v81) = v81 + 1;
            *((_DWORD *)v55 + 3) = a3;
            v57 = v55 + 5;
            v56 = v74;
            v60 = *((unsigned int *)v55 + 13);
            goto LABEL_78;
          }
          v67 = 0;
          goto LABEL_74;
        }
LABEL_84:
        if (v49 != &v79)
          free(v49);
      }
      v23 = v81;
    }
    while ((_DWORD)v81);
  }
  if (v80 != v82)
    free(v80);
  return a3;
}

uint64_t sub_1C519CC44(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  BOOL v41;
  char v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = a2;
  v10 = a2 - 1;
  v11 = v8;
  while (2)
  {
    v8 = v11;
    v12 = (char *)v9 - (char *)v11;
    v13 = v9 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = sub_1C61E1020(a3, *(a2 - 1), *v11);
        if ((_DWORD)result)
        {
          v80 = *v11;
          *v11 = *(a2 - 1);
          *(a2 - 1) = v80;
        }
        return result;
      case 3:
        return sub_1C519D394(v11, v11 + 1, v10, a3);
      case 4:
        return sub_1C519D620(v11, v11 + 1, v11 + 2, v10, a3);
      case 5:
        return sub_1C519D6D4(v11, v11 + 1, v11 + 2, v11 + 3, v10, a3);
      default:
        if (v12 <= 191)
        {
          v40 = v11 + 1;
          v41 = v11 == v9 || v40 == v9;
          v42 = v41;
          if ((a5 & 1) != 0)
          {
            if ((v42 & 1) == 0)
            {
              v43 = 0;
              v44 = v11;
              do
              {
                v46 = *v44;
                v45 = v44[1];
                v44 = v40;
                result = sub_1C61E1020(a3, v45, v46);
                if ((_DWORD)result)
                {
                  v47 = *v44;
                  v48 = v43;
                  while (1)
                  {
                    *(uint64_t *)((char *)v11 + v48 + 8) = *(uint64_t *)((char *)v11 + v48);
                    if (!v48)
                      break;
                    result = sub_1C61E1020(a3, v47, *(uint64_t *)((char *)v11 + v48 - 8));
                    v48 -= 8;
                    if ((result & 1) == 0)
                    {
                      v49 = (uint64_t *)((char *)v11 + v48 + 8);
                      goto LABEL_73;
                    }
                  }
                  v49 = v11;
LABEL_73:
                  *v49 = v47;
                }
                v40 = v44 + 1;
                v43 += 8;
              }
              while (v44 + 1 != a2);
            }
          }
          else if ((v42 & 1) == 0)
          {
            do
            {
              v75 = *v8;
              v74 = v8[1];
              v8 = v40;
              result = sub_1C61E1020(a3, v74, v75);
              if ((_DWORD)result)
              {
                v76 = *v8;
                v77 = v8;
                do
                {
                  v78 = v77;
                  v79 = *--v77;
                  *v78 = v79;
                  result = sub_1C61E1020(a3, v76, *(v78 - 2));
                }
                while ((result & 1) != 0);
                *v77 = v76;
              }
              v40 = v8 + 1;
            }
            while (v8 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v11 != v9)
          {
            v50 = (unint64_t)(v13 - 2) >> 1;
            v51 = v50;
            do
            {
              v52 = v51;
              if (v50 >= v51)
              {
                v53 = (2 * v51) | 1;
                v54 = &v8[v53];
                if (2 * v51 + 2 < v13 && sub_1C61E1020(a3, *v54, v54[1]))
                {
                  ++v54;
                  v53 = 2 * v52 + 2;
                }
                v55 = &v8[v52];
                result = sub_1C61E1020(a3, *v54, *v55);
                if ((result & 1) == 0)
                {
                  v81 = *v55;
                  do
                  {
                    v56 = v54;
                    *v55 = *v54;
                    if (v50 < v53)
                      break;
                    v57 = (2 * v53) | 1;
                    v54 = &v8[v57];
                    v58 = 2 * v53 + 2;
                    if (v58 < v13 && sub_1C61E1020(a3, *v54, v54[1]))
                    {
                      ++v54;
                      v57 = v58;
                    }
                    result = sub_1C61E1020(a3, *v54, v81);
                    v55 = v56;
                    v53 = v57;
                  }
                  while (!(_DWORD)result);
                  *v56 = v81;
                }
              }
              v51 = v52 - 1;
            }
            while (v52);
            do
            {
              v59 = 0;
              v60 = *v8;
              v61 = v13 - 2;
              if (v13 < 2)
                v61 = v13 - 1;
              v62 = v61 >> 1;
              v63 = v8;
              do
              {
                v64 = &v63[v59 + 1];
                v65 = (2 * v59) | 1;
                v66 = 2 * v59 + 2;
                if (v66 < v13)
                {
                  result = sub_1C61E1020(a3, *v64, v63[v59 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v64;
                    v65 = v66;
                  }
                }
                *v63 = *v64;
                v63 = v64;
                v59 = v65;
              }
              while (v65 <= v62);
              v67 = a2 - 1;
              v41 = v64 == --a2;
              if (v41)
              {
                *v64 = v60;
              }
              else
              {
                *v64 = *v67;
                *v67 = v60;
                v68 = (char *)v64 - (char *)v8 + 8;
                if (v68 >= 9)
                {
                  v69 = (((unint64_t)v68 >> 3) - 2) >> 1;
                  v70 = &v8[v69];
                  result = sub_1C61E1020(a3, *v70, *v64);
                  if ((_DWORD)result)
                  {
                    v71 = *v64;
                    do
                    {
                      v72 = v70;
                      *v64 = *v70;
                      if (!v69)
                        break;
                      v69 = (v69 - 1) >> 1;
                      v70 = &v8[v69];
                      result = sub_1C61E1020(a3, *v70, v71);
                      v64 = v72;
                    }
                    while ((result & 1) != 0);
                    *v72 = v71;
                  }
                }
              }
            }
            while (v13-- > 2);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &v11[(unint64_t)v13 >> 1];
        if ((unint64_t)v12 < 0x401)
        {
          sub_1C519D394(&v8[(unint64_t)v13 >> 1], v8, v10, a3);
        }
        else
        {
          sub_1C519D394(v8, &v8[(unint64_t)v13 >> 1], v10, a3);
          sub_1C519D394(v8 + 1, v15 - 1, a2 - 2, a3);
          sub_1C519D394(v8 + 2, &v8[v14 + 1], a2 - 3, a3);
          sub_1C519D394(v15 - 1, &v8[(unint64_t)v13 >> 1], &v8[v14 + 1], a3);
          v16 = *v8;
          *v8 = *v15;
          *v15 = v16;
        }
        --a4;
        if ((a5 & 1) == 0 && !sub_1C61E1020(a3, *(v8 - 1), *v8))
        {
          v31 = *v8;
          result = sub_1C61E1020(a3, *v8, *v10);
          if ((result & 1) != 0)
          {
            v11 = v8;
            do
            {
              v32 = v11[1];
              ++v11;
              result = sub_1C61E1020(a3, v31, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v39 = v8 + 1;
            do
            {
              v11 = v39;
              if (v39 >= v9)
                break;
              ++v39;
              result = sub_1C61E1020(a3, v31, *v11);
            }
            while (!(_DWORD)result);
          }
          v33 = v9;
          if (v11 < v9)
          {
            v33 = v9;
            do
            {
              v34 = *--v33;
              result = sub_1C61E1020(a3, v31, v34);
            }
            while ((result & 1) != 0);
          }
          while (v11 < v33)
          {
            v35 = *v11;
            *v11 = *v33;
            *v33 = v35;
            do
            {
              v36 = v11[1];
              ++v11;
            }
            while (!sub_1C61E1020(a3, v31, v36));
            do
            {
              v37 = *--v33;
              result = sub_1C61E1020(a3, v31, v37);
            }
            while ((result & 1) != 0);
          }
          v38 = v11 - 1;
          if (v11 - 1 != v8)
            *v8 = *v38;
          a5 = 0;
          *v38 = v31;
          continue;
        }
        v17 = 0;
        v18 = *v8;
        while (sub_1C61E1020(a3, v8[++v17], v18))
          ;
        v20 = &v8[v17];
        if (v17 == 1)
        {
          v9 = a2;
          do
          {
            if (v20 >= v9)
              break;
            v30 = *--v9;
          }
          while (!sub_1C61E1020(a3, v30, v18));
        }
        else
        {
          do
            v21 = *--v9;
          while (!sub_1C61E1020(a3, v21, v18));
        }
        if (v20 >= v9)
        {
          v27 = v20 - 1;
        }
        else
        {
          v22 = &v8[v17];
          v23 = v9;
          do
          {
            v24 = *v22;
            *v22 = *v23;
            *v23 = v24;
            do
            {
              v25 = v22[1];
              ++v22;
            }
            while (sub_1C61E1020(a3, v25, v18));
            do
              v26 = *--v23;
            while (!sub_1C61E1020(a3, v26, v18));
          }
          while (v22 < v23);
          v27 = v22 - 1;
        }
        if (v27 != v8)
          *v8 = *v27;
        *v27 = v18;
        v28 = v20 >= v9;
        v9 = a2;
        if (!v28)
        {
LABEL_28:
          result = sub_1C519CC44(v8, v27, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v27 + 1;
          continue;
        }
        v29 = sub_1C519D478(v8, v27, a3);
        v11 = v27 + 1;
        result = sub_1C519D478(v27 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_28;
        }
        a2 = v27;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C519D394(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = sub_1C61E1020(a4, *a2, *a1);
  result = sub_1C61E1020(a4, *a3, *a2);
  if (v8)
  {
    v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = sub_1C61E1020(a4, *a3, v10);
      if (result)
      {
        v11 = *a2;
        *a2 = *a3;
        *a3 = v11;
      }
    }
  }
  else if (result)
  {
    v12 = *a2;
    *a2 = *a3;
    *a3 = v12;
    result = sub_1C61E1020(a4, *a2, *a1);
    if (result)
    {
      v13 = *a1;
      *a1 = *a2;
      *a2 = v13;
    }
  }
  return result;
}

BOOL sub_1C519D478(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_1C61E1020(a3, *(a2 - 1), *a1))
      {
        v16 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v16;
      }
      return 1;
    case 3:
      sub_1C519D394(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C519D620(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C519D6D4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C519D394(a1, a1 + 1, a1 + 2, a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (sub_1C61E1020(a3, *v9, *v8))
    {
      v12 = *v9;
      v13 = v10;
      while (1)
      {
        v14 = (char *)a1 + v13;
        *(uint64_t *)((char *)a1 + v13 + 24) = *(uint64_t *)((char *)a1 + v13 + 16);
        if (v13 == -16)
          break;
        v13 -= 8;
        if (!sub_1C61E1020(a3, v12, *((_QWORD *)v14 + 1)))
        {
          v15 = (uint64_t *)((char *)a1 + v13 + 24);
          goto LABEL_11;
        }
      }
      v15 = a1;
LABEL_11:
      *v15 = v12;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v10 += 8;
    result = 1;
    if (++v9 == a2)
      return result;
  }
}

BOOL sub_1C519D620(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1C519D394(a1, a2, a3, a5);
  result = sub_1C61E1020(a5, *a4, *a3);
  if (result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = sub_1C61E1020(a5, *a3, *a2);
    if (result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = sub_1C61E1020(a5, *a2, *a1);
      if (result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

BOOL sub_1C519D6D4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1C519D620(a1, a2, a3, a4, a6);
  result = sub_1C61E1020(a6, *a5, *a4);
  if (result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = sub_1C61E1020(a6, *a4, *a3);
    if (result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = sub_1C61E1020(a6, *a3, *a2);
      if (result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = sub_1C61E1020(a6, *a2, *a1);
        if (result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

void sub_1C519D7B0(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 || *(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 16);
    if (v2 > 4 * v1 && v2 >= 0x41)
    {
      sub_1C519D870(a1);
    }
    else
    {
      if ((_DWORD)v2)
      {
        v3 = 72 * v2;
        v4 = *(_QWORD *)a1 + 56;
        do
        {
          v5 = *(_QWORD *)(v4 - 56);
          if (v5 != -4096)
          {
            if (v5 != -8192)
            {
              v6 = *(void **)(v4 - 16);
              if ((void *)v4 != v6)
              {
                v9 = a1;
                v7 = v4;
                v8 = v3;
                free(v6);
                v4 = v7;
                v3 = v8;
                a1 = v9;
              }
            }
            *(_QWORD *)(v4 - 56) = -4096;
          }
          v4 += 72;
          v3 -= 72;
        }
        while (v3);
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
}

void sub_1C519D870(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_DWORD *)(a1 + 8);
  sub_1C519B2F4(a1);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD **)a1;
      v6 = 72 * v4;
      do
      {
        *v5 = -4096;
        v5 += 9;
        v6 -= 72;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v4)
    {
      v7 = (4 * (int)v4 / 3u + 1) | ((unint64_t)(4 * (int)v4 / 3u + 1) >> 1);
      v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
      LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v8;
      v9 = operator new(72 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = 0;
      v10 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v10)
      {
        v11 = 72 * v10;
        do
        {
          *v9 = -4096;
          v9 += 9;
          v11 -= 72;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
}

void sub_1C519D97C(char **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1C519BFB0(a1);
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)a2;
    v6 = 8 * v4;
    v7 = 1;
    do
    {
      v8 = *v5++;
      v7 = sub_1C519C154((uint64_t)a1, v8, v7, 0);
      v6 -= 8;
    }
    while (v6);
  }
}

uint64_t sub_1C519D9D8(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  int v4;
  llvm::raw_ostream *v6;
  _DWORD *v7;
  void *v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  llvm *v11;
  llvm::raw_ostream *v12;
  void *v13;
  llvm::raw_ostream *v14;
  llvm *v15;
  llvm::raw_ostream *v16;
  const char *v17;
  const char *v18;
  void *v19[2];
  _BYTE v20[32];
  uint64_t v21[2];
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v19[0] = v20;
  v19[1] = (void *)0x400000000;
  v26 = 0;
  v21[0] = 0;
  v21[1] = 0;
  v22 = 0;
  v25 = 0;
  v2 = *(_QWORD *)(a1 + 80);
  v23 = 0;
  v24 = v2;
  sub_1C51991B8((uint64_t)v19, 0);
  v3 = (llvm *)llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::compare(a1, (uint64_t)v19);
  v4 = (int)v3;
  if ((_DWORD)v3)
  {
    v6 = (llvm::raw_ostream *)llvm::errs(v3);
    v7 = (_DWORD *)*((_QWORD *)v6 + 4);
    if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 3uLL)
    {
      *v7 = 1953722192;
      v8 = (void *)(*((_QWORD *)v6 + 4) + 4);
      *((_QWORD *)v6 + 4) = v8;
    }
    else
    {
      v6 = llvm::raw_ostream::write(v6, "Post", 4uLL);
      v8 = (void *)*((_QWORD *)v6 + 4);
    }
    if (*((_QWORD *)v6 + 3) - (_QWORD)v8 > 0x37uLL)
    {
      qmemcpy(v8, "DominatorTree is different than a freshly computed one!\n", 56);
      v9 = *((_QWORD *)v6 + 4) + 56;
      *((_QWORD *)v6 + 4) = v9;
    }
    else
    {
      v6 = llvm::raw_ostream::write(v6, "DominatorTree is different than a freshly computed one!\n", 0x38uLL);
      v9 = *((_QWORD *)v6 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v6 + 3) - v9) > 9)
    {
      *(_WORD *)(v9 + 8) = 2618;
      *(_QWORD *)v9 = *(_QWORD *)"\tCurrent:\n";
      *((_QWORD *)v6 + 4) += 10;
    }
    else
    {
      v6 = llvm::raw_ostream::write(v6, "\tCurrent:\n", 0xAuLL);
    }
    v10 = (llvm::raw_ostream *)llvm::errs(v6);
    v11 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::print(a1, v10);
    v12 = (llvm::raw_ostream *)llvm::errs(v11);
    v13 = (void *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 0x18uLL)
    {
      qmemcpy(v13, "\n\tFreshly computed tree:\n", 25);
      *((_QWORD *)v12 + 4) += 25;
    }
    else
    {
      v12 = llvm::raw_ostream::write(v12, "\n\tFreshly computed tree:\n", 0x19uLL);
    }
    v14 = (llvm::raw_ostream *)llvm::errs(v12);
    v15 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::print((uint64_t)v19, v14);
    v16 = (llvm::raw_ostream *)llvm::errs(v15);
    v17 = (const char *)*((_QWORD *)v16 + 4);
    v18 = (const char *)*((_QWORD *)v16 + 2);
    if (v17 != v18)
    {
      *((_QWORD *)v16 + 4) = v18;
      llvm::raw_ostream::flush_tied_then_write(v16, v18, v17 - v18);
    }
  }
  sub_1C4DC4E38(v21);
  if (v19[0] != v20)
    free(v19[0]);
  return v4 ^ 1u;
}

BOOL sub_1C519DC0C(uint64_t a1)
{
  BOOL v1;
  llvm::raw_ostream *v2;
  void *v3;
  llvm::raw_ostream *v4;
  const char *v5;
  const char *v6;
  _BOOL8 v7;
  _BOOL8 v10;
  llvm::raw_ostream *v11;
  void *v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  llvm::MachineBasicBlock *v18;
  llvm::raw_ostream *v19;
  _DWORD *v20;
  _WORD *v21;
  llvm::raw_ostream *v22;
  uint64_t v23;
  llvm::MachineBasicBlock **v24;
  uint64_t v25;
  llvm::MachineBasicBlock *v26;
  llvm::raw_ostream *v27;
  _DWORD *v28;
  _WORD *v29;
  llvm::raw_ostream *v30;
  _BYTE *v31;
  llvm::raw_ostream *v32;
  const char *v33;
  const char *v34;
  void *v35;
  unsigned int v36;
  _QWORD v37[5];

  v37[4] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 80))
    v1 = 1;
  else
    v1 = *(_DWORD *)(a1 + 8) == 0;
  if (v1)
  {
    sub_1C519B438((uint64_t)&v35, a1, 0);
    v10 = sub_1C61ED220(*(uint64_t **)a1, *(_DWORD *)(a1 + 8), (uint64_t)&v35);
    v7 = v10;
    if (!v10)
    {
      v11 = (llvm::raw_ostream *)llvm::errs((llvm *)v10);
      v12 = (void *)*((_QWORD *)v11 + 4);
      if (*((_QWORD *)v11 + 3) - (_QWORD)v12 > 0x34uLL)
      {
        qmemcpy(v12, "Tree has different roots than freshly computed ones!\n", 53);
        *((_QWORD *)v11 + 4) += 53;
      }
      else
      {
        v11 = llvm::raw_ostream::write(v11, "Tree has different roots than freshly computed ones!\n", 0x35uLL);
      }
      v13 = (llvm::raw_ostream *)llvm::errs(v11);
      v14 = *((_QWORD *)v13 + 4);
      if ((unint64_t)(*((_QWORD *)v13 + 3) - v14) > 0xB)
      {
        *(_DWORD *)(v14 + 8) = 540701556;
        *(_QWORD *)v14 = *(_QWORD *)"\tPDT roots: ";
        *((_QWORD *)v13 + 4) += 12;
      }
      else
      {
        v13 = llvm::raw_ostream::write(v13, "\tPDT roots: ", 0xCuLL);
      }
      v15 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v15)
      {
        v16 = *(uint64_t **)a1;
        v17 = 8 * v15;
        do
        {
          v18 = (llvm::MachineBasicBlock *)*v16;
          v13 = (llvm::raw_ostream *)llvm::errs(v13);
          v19 = v13;
          if (v18)
          {
            v13 = llvm::MachineBasicBlock::printAsOperand(v18, v13);
          }
          else
          {
            v20 = (_DWORD *)*((_QWORD *)v13 + 4);
            if (*((_QWORD *)v13 + 3) - (_QWORD)v20 > 6uLL)
            {
              *(_DWORD *)((char *)v20 + 3) = 1920233580;
              *v20 = 1819047278;
              *((_QWORD *)v13 + 4) += 7;
            }
            else
            {
              v13 = llvm::raw_ostream::write(v13, "nullptr", 7uLL);
            }
          }
          v21 = (_WORD *)*((_QWORD *)v19 + 4);
          if (*((_QWORD *)v19 + 3) - (_QWORD)v21 > 1uLL)
          {
            *v21 = 8236;
            *((_QWORD *)v19 + 4) += 2;
          }
          else
          {
            v13 = llvm::raw_ostream::write(v19, ", ", 2uLL);
          }
          ++v16;
          v17 -= 8;
        }
        while (v17);
      }
      v22 = (llvm::raw_ostream *)llvm::errs(v13);
      v23 = *((_QWORD *)v22 + 4);
      if ((unint64_t)(*((_QWORD *)v22 + 3) - v23) > 0x11)
      {
        *(_WORD *)(v23 + 16) = 8250;
        *(_OWORD *)v23 = *(_OWORD *)"\n\tComputed roots: ";
        *((_QWORD *)v22 + 4) += 18;
      }
      else
      {
        v22 = llvm::raw_ostream::write(v22, "\n\tComputed roots: ", 0x12uLL);
      }
      if (v36)
      {
        v24 = (llvm::MachineBasicBlock **)v35;
        v25 = 8 * v36;
        do
        {
          v26 = *v24;
          v22 = (llvm::raw_ostream *)llvm::errs(v22);
          v27 = v22;
          if (v26)
          {
            v22 = llvm::MachineBasicBlock::printAsOperand(v26, v22);
          }
          else
          {
            v28 = (_DWORD *)*((_QWORD *)v22 + 4);
            if (*((_QWORD *)v22 + 3) - (_QWORD)v28 > 6uLL)
            {
              *(_DWORD *)((char *)v28 + 3) = 1920233580;
              *v28 = 1819047278;
              *((_QWORD *)v22 + 4) += 7;
            }
            else
            {
              v22 = llvm::raw_ostream::write(v22, "nullptr", 7uLL);
            }
          }
          v29 = (_WORD *)*((_QWORD *)v27 + 4);
          if (*((_QWORD *)v27 + 3) - (_QWORD)v29 > 1uLL)
          {
            *v29 = 8236;
            *((_QWORD *)v27 + 4) += 2;
          }
          else
          {
            v22 = llvm::raw_ostream::write(v27, ", ", 2uLL);
          }
          ++v24;
          v25 -= 8;
        }
        while (v25);
      }
      v30 = (llvm::raw_ostream *)llvm::errs(v22);
      v31 = (_BYTE *)*((_QWORD *)v30 + 4);
      if (*((_BYTE **)v30 + 3) == v31)
      {
        v30 = llvm::raw_ostream::write(v30, "\n", 1uLL);
      }
      else
      {
        *v31 = 10;
        ++*((_QWORD *)v30 + 4);
      }
      v32 = (llvm::raw_ostream *)llvm::errs(v30);
      v33 = (const char *)*((_QWORD *)v32 + 4);
      v34 = (const char *)*((_QWORD *)v32 + 2);
      if (v33 != v34)
      {
        *((_QWORD *)v32 + 4) = v34;
        llvm::raw_ostream::flush_tied_then_write(v32, v34, v33 - v34);
      }
    }
    if (v35 != v37)
      free(v35);
  }
  else
  {
    v2 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    v3 = (void *)*((_QWORD *)v2 + 4);
    if (*((_QWORD *)v2 + 3) - (_QWORD)v3 > 0x21uLL)
    {
      qmemcpy(v3, "Tree has no parent but has roots!\n", 34);
      *((_QWORD *)v2 + 4) += 34;
    }
    else
    {
      v2 = llvm::raw_ostream::write(v2, "Tree has no parent but has roots!\n", 0x22uLL);
    }
    v4 = (llvm::raw_ostream *)llvm::errs(v2);
    v5 = (const char *)*((_QWORD *)v4 + 4);
    v6 = (const char *)*((_QWORD *)v4 + 2);
    if (v5 != v6)
    {
      *((_QWORD *)v4 + 4) = v6;
      llvm::raw_ostream::flush_tied_then_write(v4, v6, v5 - v6);
    }
    return 0;
  }
  return v7;
}

uint64_t sub_1C519E030(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::MachineBasicBlock **v7;
  unsigned int v8;
  llvm::MachineBasicBlock **v9;
  uint64_t v10;
  llvm::MachineBasicBlock **v11;
  llvm::MachineBasicBlock *v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  llvm::MachineBasicBlock *v17;
  int v18;
  llvm::MachineBasicBlock **v19;
  llvm::MachineBasicBlock **v20;
  llvm::MachineBasicBlock **v21;
  unsigned int v22;
  llvm::MachineBasicBlock *v23;
  uint64_t v24;
  llvm::MachineBasicBlock **v25;
  llvm::MachineBasicBlock *v26;
  int v27;
  int v28;
  llvm::raw_ostream *v30;
  llvm::raw_ostream *v31;
  void *v32;
  llvm *v33;
  void *v34;
  const char *v35;
  llvm::raw_ostream *v36;
  size_t v37;
  llvm::raw_ostream *v38;
  llvm::raw_ostream *v39;
  uint64_t v40;
  void *v41;
  llvm::raw_ostream *v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v45 = 0;
  sub_1C4DE4490((_QWORD *)a1, (char *)&v45, (char *)&v46, 1uLL);
  sub_1C519D7B0(a1 + 24);
  sub_1C519D97C((char **)a1, a2);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(unsigned int *)(a2 + 64);
  v7 = (llvm::MachineBasicBlock **)(v5 + 16 * v6);
  v8 = *(_DWORD *)(a2 + 64);
  v9 = v7;
  if (*(_DWORD *)(a2 + 56))
  {
    if ((_DWORD)v6)
    {
      v10 = 16 * v6;
      v9 = *(llvm::MachineBasicBlock ***)(a2 + 48);
      while (((unint64_t)*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v9 += 2;
        v10 -= 16;
        if (!v10)
        {
          v8 = *(_DWORD *)(a2 + 64);
          v9 = (llvm::MachineBasicBlock **)(v5 + 16 * v6);
          goto LABEL_9;
        }
      }
      v8 = *(_DWORD *)(a2 + 64);
    }
    else
    {
      v8 = 0;
      v9 = *(llvm::MachineBasicBlock ***)(a2 + 48);
    }
  }
LABEL_9:
  v11 = (llvm::MachineBasicBlock **)(v5 + 16 * v8);
  if (v9 == v11)
  {
LABEL_22:
    v20 = *(llvm::MachineBasicBlock ***)a1;
    v21 = *(llvm::MachineBasicBlock ***)(a1 + 8);
    if (*(llvm::MachineBasicBlock ***)a1 != v21)
    {
      v22 = v6 - 1;
      do
      {
        v23 = *v20;
        if (*v20)
        {
          if (!(_DWORD)v6)
            goto LABEL_39;
          LODWORD(v24) = ((v23 >> 4) ^ (v23 >> 9)) & v22;
          v25 = (llvm::MachineBasicBlock **)(v5 + 16 * v24);
          v26 = *v25;
          if (v23 != *v25)
          {
            v27 = 1;
            while (v26 != (llvm::MachineBasicBlock *)-4096)
            {
              v28 = v24 + v27++;
              v24 = v28 & v22;
              v26 = *(llvm::MachineBasicBlock **)(v5 + 16 * v24);
              if (v23 == v26)
              {
                v25 = (llvm::MachineBasicBlock **)(v5 + 16 * v24);
                goto LABEL_31;
              }
            }
LABEL_39:
            v38 = (llvm::raw_ostream *)llvm::errs((llvm *)v4);
            v39 = v38;
            v40 = *((_QWORD *)v38 + 4);
            if ((unint64_t)(*((_QWORD *)v38 + 3) - v40) > 8)
            {
              *(_BYTE *)(v40 + 8) = 32;
              *(_QWORD *)v40 = *(_QWORD *)"CFG node ";
              *((_QWORD *)v38 + 4) += 9;
            }
            else
            {
              llvm::raw_ostream::write(v38, "CFG node ", 9uLL);
            }
            v33 = llvm::MachineBasicBlock::printAsOperand(v23, v39);
            v41 = (void *)*((_QWORD *)v39 + 4);
            if (*((_QWORD *)v39 + 3) - (_QWORD)v41 > 0x1AuLL)
            {
              qmemcpy(v41, " not found in the DomTree!\n", 27);
              *((_QWORD *)v39 + 4) += 27;
            }
            else
            {
              v35 = " not found in the DomTree!\n";
              v36 = v39;
              v37 = 27;
LABEL_43:
              v33 = llvm::raw_ostream::write(v36, v35, v37);
            }
            goto LABEL_44;
          }
LABEL_31:
          if (v25 == v7 || !v25[1])
            goto LABEL_39;
        }
        ++v20;
      }
      while (v20 != v21);
    }
    return 1;
  }
  else
  {
    while (1)
    {
      v12 = *(llvm::MachineBasicBlock **)v9[1];
      if (v12)
      {
        v13 = *(_DWORD *)(a1 + 40);
        if (!v13)
          goto LABEL_35;
        v14 = *(_QWORD *)(a1 + 24);
        v15 = v13 - 1;
        v16 = v15 & ((v12 >> 4) ^ (v12 >> 9));
        v17 = *(llvm::MachineBasicBlock **)(v14 + 72 * v16);
        if (v12 != v17)
          break;
      }
LABEL_16:
      v19 = v9 + 2;
      v9 = (llvm::MachineBasicBlock **)(v5 + 16 * v6);
      if (v19 != v7)
      {
        v9 = v19;
        while (((unint64_t)*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v9 += 2;
          if (v9 == v7)
          {
            v9 = (llvm::MachineBasicBlock **)(v5 + 16 * v6);
            break;
          }
        }
      }
      if (v9 == v11)
        goto LABEL_22;
    }
    v4 = 1;
    while (v17 != (llvm::MachineBasicBlock *)-4096)
    {
      v18 = v16 + v4;
      v4 = (v4 + 1);
      v16 = v18 & v15;
      v17 = *(llvm::MachineBasicBlock **)(v14 + 72 * v16);
      if (v12 == v17)
        goto LABEL_16;
    }
LABEL_35:
    v30 = (llvm::raw_ostream *)llvm::errs((llvm *)v4);
    v31 = v30;
    v32 = (void *)*((_QWORD *)v30 + 4);
    if (*((_QWORD *)v30 + 3) - (_QWORD)v32 > 0xCuLL)
    {
      qmemcpy(v32, "DomTree node ", 13);
      *((_QWORD *)v30 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v30, "DomTree node ", 0xDuLL);
    }
    v33 = llvm::MachineBasicBlock::printAsOperand(v12, v31);
    v34 = (void *)*((_QWORD *)v31 + 4);
    if (*((_QWORD *)v31 + 3) - (_QWORD)v34 <= 0x17uLL)
    {
      v35 = " not found by DFS walk!\n";
      v36 = v31;
      v37 = 24;
      goto LABEL_43;
    }
    qmemcpy(v34, " not found by DFS walk!\n", 24);
    *((_QWORD *)v31 + 4) += 24;
LABEL_44:
    v42 = (llvm::raw_ostream *)llvm::errs(v33);
    v43 = (const char *)*((_QWORD *)v42 + 4);
    v44 = (const char *)*((_QWORD *)v42 + 2);
    if (v43 != v44)
    {
      *((_QWORD *)v42 + 4) = v44;
      llvm::raw_ostream::flush_tied_then_write(v42, v44, v43 - v44);
    }
    return 0;
  }
}

uint64_t sub_1C519E3C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  llvm::MachineBasicBlock *v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  llvm::raw_ostream *v21;
  void *v22;
  void *v23;
  llvm *v24;
  _WORD *v25;
  llvm::raw_ostream *v26;
  const char *v27;
  const char *v28;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(unsigned int *)(a1 + 64);
  v3 = (_QWORD *)(v1 + 16 * v2);
  if (*(_DWORD *)(a1 + 56))
  {
    if ((_DWORD)v2)
    {
      v4 = 16 * v2;
      v5 = *(_QWORD **)(a1 + 48);
      while ((*v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v5 += 2;
        v4 -= 16;
        if (!v4)
          goto LABEL_6;
      }
    }
    else
    {
      v5 = *(_QWORD **)(a1 + 48);
    }
  }
  else
  {
LABEL_6:
    v5 = (_QWORD *)(v1 + 16 * v2);
  }
  v6 = (_QWORD *)(v1 + 16 * v2);
  while (1)
  {
LABEL_9:
    if (v5 == v6)
      return 1;
    v7 = v5[1];
    v8 = *(llvm::MachineBasicBlock **)v7;
    if (!*(_QWORD *)v7)
      goto LABEL_15;
    v9 = *(_QWORD *)(v7 + 8);
    v10 = *(_DWORD *)(v7 + 16);
    if (!v9)
      break;
    if (v10 != *(_DWORD *)(v9 + 16) + 1)
    {
      v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
      v14 = v13;
      v15 = *((_QWORD *)v13 + 4);
      if ((unint64_t)(*((_QWORD *)v13 + 3) - v15) > 4)
      {
        *(_BYTE *)(v15 + 4) = 32;
        *(_DWORD *)v15 = 1701080910;
        *((_QWORD *)v13 + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write(v13, "Node ", 5uLL);
      }
      llvm::MachineBasicBlock::printAsOperand(v8, v14);
      v16 = *((_QWORD *)v14 + 4);
      if ((unint64_t)(*((_QWORD *)v14 + 3) - v16) > 0xA)
      {
        *(_DWORD *)(v16 + 7) = 543974774;
        *(_QWORD *)v16 = *(_QWORD *)" has level ";
        *((_QWORD *)v14 + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(v14, " has level ", 0xBuLL);
      }
      sub_1C5E21910(v14, *(unsigned int *)(v7 + 16), 0, 0, 0);
      v17 = (_OWORD *)*((_QWORD *)v14 + 4);
      if (*((_QWORD *)v14 + 3) - (_QWORD)v17 > 0xFuLL)
      {
        *v17 = *(_OWORD *)" while its IDom ";
        *((_QWORD *)v14 + 4) += 16;
      }
      else
      {
        llvm::raw_ostream::write(v14, " while its IDom ", 0x10uLL);
      }
      if (*(_QWORD *)v9)
      {
        llvm::MachineBasicBlock::printAsOperand(*(llvm::MachineBasicBlock **)v9, v14);
      }
      else
      {
        v18 = (_DWORD *)*((_QWORD *)v14 + 4);
        if (*((_QWORD *)v14 + 3) - (_QWORD)v18 > 6uLL)
        {
          *(_DWORD *)((char *)v18 + 3) = 1920233580;
          *v18 = 1819047278;
          *((_QWORD *)v14 + 4) += 7;
        }
        else
        {
          llvm::raw_ostream::write(v14, "nullptr", 7uLL);
        }
      }
      v19 = *((_QWORD *)v14 + 4);
      if ((unint64_t)(*((_QWORD *)v14 + 3) - v19) > 0xA)
      {
        *(_DWORD *)(v19 + 7) = 543974774;
        *(_QWORD *)v19 = *(_QWORD *)" has level ";
        *((_QWORD *)v14 + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(v14, " has level ", 0xBuLL);
      }
      v20 = *(unsigned int *)(v9 + 16);
      goto LABEL_38;
    }
LABEL_15:
    v11 = v5 + 2;
    v5 = v3;
    if (v11 != v3)
    {
      v5 = v11;
      while ((*v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v5 += 2;
        if (v5 == v3)
        {
          v5 = v3;
          goto LABEL_9;
        }
      }
    }
  }
  if (!v10)
    goto LABEL_15;
  v21 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v14 = v21;
  v22 = (void *)*((_QWORD *)v21 + 4);
  if (*((_QWORD *)v21 + 3) - (_QWORD)v22 > 0x14uLL)
  {
    qmemcpy(v22, "Node without an IDom ", 21);
    *((_QWORD *)v21 + 4) += 21;
  }
  else
  {
    llvm::raw_ostream::write(v21, "Node without an IDom ", 0x15uLL);
  }
  llvm::MachineBasicBlock::printAsOperand(v8, v14);
  v23 = (void *)*((_QWORD *)v14 + 4);
  if (*((_QWORD *)v14 + 3) - (_QWORD)v23 > 0x14uLL)
  {
    qmemcpy(v23, " has a nonzero level ", 21);
    *((_QWORD *)v14 + 4) += 21;
  }
  else
  {
    llvm::raw_ostream::write(v14, " has a nonzero level ", 0x15uLL);
  }
  v20 = *(unsigned int *)(v7 + 16);
LABEL_38:
  v24 = sub_1C5E21910(v14, v20, 0, 0, 0);
  v25 = (_WORD *)*((_QWORD *)v14 + 4);
  if (*((_QWORD *)v14 + 3) - (_QWORD)v25 > 1uLL)
  {
    *v25 = 2593;
    *((_QWORD *)v14 + 4) += 2;
  }
  else
  {
    v24 = llvm::raw_ostream::write(v14, "!\n", 2uLL);
  }
  v26 = (llvm::raw_ostream *)llvm::errs(v24);
  v27 = (const char *)*((_QWORD *)v26 + 4);
  v28 = (const char *)*((_QWORD *)v26 + 2);
  if (v27 != v28)
  {
    *((_QWORD *)v26 + 4) = v28;
    llvm::raw_ostream::flush_tied_then_write(v26, v28, v27 - v28);
  }
  return 0;
}

uint64_t sub_1C519E79C(uint64_t result)
{
  BOOL v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int **v23;
  int v24;
  unsigned int *v25;
  int v26;
  llvm::raw_ostream *v27;
  void *v28;
  unsigned int *v29;
  llvm *v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;
  llvm::raw_ostream *v33;
  const char *v34;
  const char *v35;
  llvm::raw_ostream *v36;
  void *v37;
  _QWORD v38[3];
  void *v39;
  uint64_t v40;
  _QWORD v41[9];

  v41[8] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(result + 88))
    v1 = *(_QWORD *)(result + 80) == 0;
  else
    v1 = 1;
  if (v1)
    return 1;
  v2 = *(uint64_t **)(result + 48);
  v3 = *(unsigned int *)(result + 64);
  if ((_DWORD)v3)
  {
    v4 = *v2;
    v5 = *(uint64_t **)(result + 48);
    if (!*v2)
    {
LABEL_11:
      v9 = &v2[2 * v3];
      goto LABEL_12;
    }
    LODWORD(v6) = 0;
    v7 = 1;
    while (v4 != -4096)
    {
      v8 = v6 + v7++;
      v6 = v8 & (v3 - 1);
      v4 = v2[2 * v6];
      if (!v4)
      {
        v5 = &v2[2 * v6];
        goto LABEL_11;
      }
    }
  }
  v9 = &v2[2 * v3];
  v5 = v9;
LABEL_12:
  v10 = (unsigned int *)v5[1];
  if (v10[18])
  {
    v27 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
    v28 = (void *)*((_QWORD *)v27 + 4);
    if (*((_QWORD *)v27 + 3) - (_QWORD)v28 > 0x27uLL)
    {
      qmemcpy(v28, "DFSIn number for the tree root is not:\n\t", 40);
      *((_QWORD *)v27 + 4) += 40;
    }
    else
    {
      llvm::raw_ostream::write(v27, "DFSIn number for the tree root is not:\n\t", 0x28uLL);
    }
    v29 = v10;
LABEL_50:
    v30 = sub_1C61ED2E8(v29);
    v31 = (llvm::raw_ostream *)llvm::errs(v30);
    v32 = (_BYTE *)*((_QWORD *)v31 + 4);
    if ((unint64_t)v32 >= *((_QWORD *)v31 + 3))
    {
      v31 = llvm::raw_ostream::write(v31, 10);
    }
    else
    {
      *((_QWORD *)v31 + 4) = v32 + 1;
      *v32 = 10;
    }
    v33 = (llvm::raw_ostream *)llvm::errs(v31);
    v34 = (const char *)*((_QWORD *)v33 + 4);
    v35 = (const char *)*((_QWORD *)v33 + 2);
    if (v34 != v35)
    {
      *((_QWORD *)v33 + 4) = v35;
      llvm::raw_ostream::flush_tied_then_write(v33, v35, v34 - v35);
    }
    return 0;
  }
  if (!*(_DWORD *)(result + 56))
    return 1;
  if (v2 != v9)
  {
    while ((*v2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v2 += 2;
      if (v2 == v9)
        return 1;
    }
  }
  if (v2 == v9)
    return 1;
LABEL_19:
  v11 = v2[1];
  v12 = *(unsigned int *)(v11 + 32);
  if (!(_DWORD)v12)
  {
    if (*(_DWORD *)(v11 + 72) + 1 == *(_DWORD *)(v11 + 76))
      goto LABEL_37;
    v36 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
    v37 = (void *)*((_QWORD *)v36 + 4);
    if (*((_QWORD *)v36 + 3) - (_QWORD)v37 > 0x2AuLL)
    {
      qmemcpy(v37, "Tree leaf should have DFSOut = DFSIn + 1:\n\t", 43);
      *((_QWORD *)v36 + 4) += 43;
    }
    else
    {
      llvm::raw_ostream::write(v36, "Tree leaf should have DFSOut = DFSIn + 1:\n\t", 0x2BuLL);
    }
    v29 = (unsigned int *)v11;
    goto LABEL_50;
  }
  v13 = *(const void **)(v11 + 24);
  v39 = v41;
  v40 = 0x800000000;
  if (v12 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, v12, 8);
    v14 = v40;
    v15 = v39;
  }
  else
  {
    v14 = 0;
    v15 = v41;
  }
  memcpy(&v15[v14], v13, 8 * v12);
  v16 = (v40 + v12);
  v1 = (_DWORD)v40 + (_DWORD)v12 == 0;
  LODWORD(v40) = v16;
  v17 = (uint64_t *)((char *)v39 + 8 * v16);
  v18 = 126 - 2 * __clz(v16);
  if (v1)
    v19 = 0;
  else
    v19 = v18;
  sub_1C519F268((uint64_t *)v39, v17, v19, 1);
  v38[0] = v11;
  v38[1] = &v39;
  v20 = *(unsigned int **)v39;
  if (*(_DWORD *)(*(_QWORD *)v39 + 72) == *(_DWORD *)(v11 + 72) + 1)
  {
    v21 = (unsigned int *)*((_QWORD *)v39 + v40 - 1);
    if (v21[19] + 1 == *(_DWORD *)(v11 + 76))
    {
      v22 = v40 - 1;
      v23 = (unsigned int **)((char *)v39 + 8);
      while (v22)
      {
        v21 = v20;
        v24 = v20[19] + 1;
        v25 = *v23++;
        v20 = v25;
        --v22;
        if (v24 != v25[18])
          goto LABEL_43;
      }
      v26 = 1;
      goto LABEL_32;
    }
  }
  else
  {
    v21 = *(unsigned int **)v39;
  }
  v20 = 0;
LABEL_43:
  sub_1C61ED3B8((llvm *)v38, v21, v20);
  v26 = 0;
LABEL_32:
  if (v39 != v41)
    free(v39);
  if (v26)
  {
LABEL_37:
    while (1)
    {
      v2 += 2;
      if (v2 == v9)
        return 1;
      if ((*v2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        result = 1;
        if (v2 != v9)
          goto LABEL_19;
        return result;
      }
    }
  }
  return 0;
}

uint64_t sub_1C519EB38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  llvm::MachineBasicBlock *v11;
  _QWORD *v12;
  llvm *v13;
  uint64_t v14;
  llvm::MachineBasicBlock ***v15;
  llvm::MachineBasicBlock ***v16;
  uint64_t v17;
  int v18;
  int v19;
  llvm::MachineBasicBlock **v20;
  llvm::MachineBasicBlock *v21;
  unsigned int v22;
  llvm::MachineBasicBlock *v23;
  int v24;
  unsigned int v25;
  llvm::raw_ostream *v27;
  llvm::raw_ostream *v28;
  uint64_t v29;
  _DWORD *v30;
  void *v31;
  llvm *v32;
  void *v33;
  llvm::raw_ostream *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(unsigned int *)(a2 + 64);
  v6 = (_QWORD *)(v4 + 16 * v5);
  if (*(_DWORD *)(a2 + 56))
  {
    if ((_DWORD)v5)
    {
      v7 = 16 * v5;
      v8 = *(_QWORD **)(a2 + 48);
      while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v8 += 2;
        v7 -= 16;
        if (!v7)
          goto LABEL_6;
      }
    }
    else
    {
      v8 = *(_QWORD **)(a2 + 48);
    }
  }
  else
  {
LABEL_6:
    v8 = (_QWORD *)(v4 + 16 * v5);
  }
  v9 = (_QWORD *)(v4 + 16 * v5);
  if (v8 == v9)
    return 1;
  while (1)
  {
    v10 = v8[1];
    v11 = *(llvm::MachineBasicBlock **)v10;
    if (*(_QWORD *)v10)
    {
      if (*(_DWORD *)(v10 + 32))
      {
        v37 = 0;
        sub_1C4DE4490((_QWORD *)a1, (char *)&v37, (char *)&v38, 1uLL);
        sub_1C519D7B0(a1 + 24);
        sub_1C61F9808((char **)a1, a2, (uint64_t)v11);
        v14 = *(unsigned int *)(v10 + 32);
        if ((_DWORD)v14)
          break;
      }
    }
LABEL_11:
    v12 = v8 + 2;
    v8 = v6;
    if (v12 != v6)
    {
      v8 = v12;
      while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v8 += 2;
        if (v8 == v6)
        {
          v8 = v6;
          break;
        }
      }
    }
    if (v8 == v9)
      return 1;
  }
  v15 = *(llvm::MachineBasicBlock ****)(v10 + 24);
  v16 = &v15[v14];
  v17 = *(_QWORD *)(a1 + 24);
  v18 = *(_DWORD *)(a1 + 40);
  v19 = v18 - 1;
  while (!v18)
  {
LABEL_26:
    if (++v15 == v16)
      goto LABEL_11;
  }
  v20 = *v15;
  v21 = **v15;
  v22 = ((v21 >> 4) ^ (v21 >> 9)) & v19;
  v23 = *(llvm::MachineBasicBlock **)(v17 + 72 * v22);
  if (v21 != v23)
  {
    v24 = 1;
    while (v23 != (llvm::MachineBasicBlock *)-4096)
    {
      v25 = v22 + v24++;
      v22 = v25 & v19;
      v23 = *(llvm::MachineBasicBlock **)(v17 + 72 * v22);
      if (v21 == v23)
        goto LABEL_29;
    }
    goto LABEL_26;
  }
LABEL_29:
  v27 = (llvm::raw_ostream *)llvm::errs(v13);
  v28 = v27;
  v29 = *((_QWORD *)v27 + 4);
  if ((unint64_t)(*((_QWORD *)v27 + 3) - v29) > 5)
  {
    *(_WORD *)(v29 + 4) = 8292;
    *(_DWORD *)v29 = 1818847299;
    *((_QWORD *)v27 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v27, "Child ", 6uLL);
  }
  if (*v20)
  {
    llvm::MachineBasicBlock::printAsOperand(*v20, v28);
  }
  else
  {
    v30 = (_DWORD *)*((_QWORD *)v28 + 4);
    if (*((_QWORD *)v28 + 3) - (_QWORD)v30 > 6uLL)
    {
      *(_DWORD *)((char *)v30 + 3) = 1920233580;
      *v30 = 1819047278;
      *((_QWORD *)v28 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v28, "nullptr", 7uLL);
    }
  }
  v31 = (void *)*((_QWORD *)v28 + 4);
  if (*((_QWORD *)v28 + 3) - (_QWORD)v31 > 0x1BuLL)
  {
    qmemcpy(v31, " reachable after its parent ", 28);
    *((_QWORD *)v28 + 4) += 28;
  }
  else
  {
    llvm::raw_ostream::write(v28, " reachable after its parent ", 0x1CuLL);
  }
  v32 = llvm::MachineBasicBlock::printAsOperand(v11, v28);
  v33 = (void *)*((_QWORD *)v28 + 4);
  if (*((_QWORD *)v28 + 3) - (_QWORD)v33 > 0xCuLL)
  {
    qmemcpy(v33, " is removed!\n", 13);
    *((_QWORD *)v28 + 4) += 13;
  }
  else
  {
    v32 = llvm::raw_ostream::write(v28, " is removed!\n", 0xDuLL);
  }
  v34 = (llvm::raw_ostream *)llvm::errs(v32);
  v35 = (const char *)*((_QWORD *)v34 + 4);
  v36 = (const char *)*((_QWORD *)v34 + 2);
  if (v35 != v36)
  {
    *((_QWORD *)v34 + 4) = v36;
    llvm::raw_ostream::flush_tied_then_write(v34, v36, v35 - v36);
  }
  return 0;
}

uint64_t sub_1C519EE98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t v15;
  llvm *v16;
  uint64_t v17;
  llvm::MachineBasicBlock ***v18;
  llvm::MachineBasicBlock ***v19;
  llvm::MachineBasicBlock **v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  llvm::MachineBasicBlock *v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  llvm::raw_ostream *v30;
  llvm::raw_ostream *v31;
  uint64_t v32;
  _DWORD *v33;
  void *v34;
  llvm::MachineBasicBlock *v35;
  _DWORD *v36;
  void *v37;
  llvm::raw_ostream *v38;
  const char *v39;
  const char *v40;
  uint64_t **v41;
  uint64_t __src;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(unsigned int *)(a2 + 64);
  v6 = (_QWORD *)(v4 + 16 * v5);
  if (*(_DWORD *)(a2 + 56))
  {
    if ((_DWORD)v5)
    {
      v7 = 16 * v5;
      v8 = *(_QWORD **)(a2 + 48);
      while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v8 += 2;
        v7 -= 16;
        if (!v7)
          goto LABEL_6;
      }
    }
    else
    {
      v8 = *(_QWORD **)(a2 + 48);
    }
  }
  else
  {
LABEL_6:
    v8 = (_QWORD *)(v4 + 16 * v5);
  }
  v9 = (_QWORD *)(v4 + 16 * v5);
  if (v8 == v9)
    return 1;
  v10 = a1 + 24;
  while (1)
  {
    v11 = v8[1];
    if (*(_QWORD *)v11)
    {
      v12 = *(unsigned int *)(v11 + 32);
      if ((_DWORD)v12)
        break;
    }
LABEL_23:
    v28 = v8 + 2;
    v8 = v6;
    if (v28 != v6)
    {
      v8 = v28;
      while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v8 += 2;
        if (v8 == v6)
        {
          v8 = v6;
          break;
        }
      }
    }
    if (v8 == v9)
      return 1;
  }
  v13 = *(uint64_t ***)(v11 + 24);
  v41 = &v13[v12];
  while (1)
  {
    v14 = *v13;
    __src = 0;
    sub_1C4DE4490((_QWORD *)a1, (char *)&__src, (char *)&v43, 1uLL);
    v15 = v10;
    sub_1C519D7B0(v10);
    sub_1C61F9808((char **)a1, a2, *v14);
    v17 = *(unsigned int *)(v11 + 32);
    if ((_DWORD)v17)
      break;
LABEL_22:
    ++v13;
    v10 = v15;
    if (v13 == v41)
      goto LABEL_23;
  }
  v18 = *(llvm::MachineBasicBlock ****)(v11 + 24);
  v19 = &v18[v17];
  while (1)
  {
    v20 = *v18;
    if (*v18 != (llvm::MachineBasicBlock **)v14)
    {
      v21 = *(_DWORD *)(a1 + 40);
      if (!v21)
        goto LABEL_30;
      v22 = *(_QWORD *)(a1 + 24);
      v23 = v21 - 1;
      v24 = ((*v20 >> 4) ^ (*v20 >> 9)) & v23;
      v25 = *(llvm::MachineBasicBlock **)(v22 + 72 * v24);
      if (*v20 != v25)
        break;
    }
LABEL_21:
    if (++v18 == v19)
      goto LABEL_22;
  }
  v26 = 1;
  while (v25 != (llvm::MachineBasicBlock *)-4096)
  {
    v27 = v24 + v26++;
    v24 = v27 & v23;
    v25 = *(llvm::MachineBasicBlock **)(v22 + 72 * v24);
    if (*v20 == v25)
      goto LABEL_21;
  }
LABEL_30:
  v30 = (llvm::raw_ostream *)llvm::errs(v16);
  v31 = v30;
  v32 = *((_QWORD *)v30 + 4);
  if ((unint64_t)(*((_QWORD *)v30 + 3) - v32) > 4)
  {
    *(_BYTE *)(v32 + 4) = 32;
    *(_DWORD *)v32 = 1701080910;
    *((_QWORD *)v30 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v30, "Node ", 5uLL);
  }
  if (*v20)
  {
    llvm::MachineBasicBlock::printAsOperand(*v20, v31);
  }
  else
  {
    v33 = (_DWORD *)*((_QWORD *)v31 + 4);
    if (*((_QWORD *)v31 + 3) - (_QWORD)v33 > 6uLL)
    {
      *(_DWORD *)((char *)v33 + 3) = 1920233580;
      *v33 = 1819047278;
      *((_QWORD *)v31 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v31, "nullptr", 7uLL);
    }
  }
  v34 = (void *)*((_QWORD *)v31 + 4);
  if (*((_QWORD *)v31 + 3) - (_QWORD)v34 > 0x1FuLL)
  {
    qmemcpy(v34, " not reachable when its sibling ", 32);
    *((_QWORD *)v31 + 4) += 32;
  }
  else
  {
    llvm::raw_ostream::write(v31, " not reachable when its sibling ", 0x20uLL);
  }
  v35 = (llvm::MachineBasicBlock *)*v14;
  if (*v14)
  {
    v35 = llvm::MachineBasicBlock::printAsOperand(v35, v31);
  }
  else
  {
    v36 = (_DWORD *)*((_QWORD *)v31 + 4);
    if (*((_QWORD *)v31 + 3) - (_QWORD)v36 > 6uLL)
    {
      *(_DWORD *)((char *)v36 + 3) = 1920233580;
      *v36 = 1819047278;
      *((_QWORD *)v31 + 4) += 7;
    }
    else
    {
      v35 = llvm::raw_ostream::write(v31, "nullptr", 7uLL);
    }
  }
  v37 = (void *)*((_QWORD *)v31 + 4);
  if (*((_QWORD *)v31 + 3) - (_QWORD)v37 > 0xCuLL)
  {
    qmemcpy(v37, " is removed!\n", 13);
    *((_QWORD *)v31 + 4) += 13;
  }
  else
  {
    v35 = llvm::raw_ostream::write(v31, " is removed!\n", 0xDuLL);
  }
  v38 = (llvm::raw_ostream *)llvm::errs(v35);
  v39 = (const char *)*((_QWORD *)v38 + 4);
  v40 = (const char *)*((_QWORD *)v38 + 2);
  if (v39 != v40)
  {
    *((_QWORD *)v38 + 4) = v40;
    llvm::raw_ostream::flush_tied_then_write(v38, v40, v39 - v40);
  }
  return 0;
}

uint64_t *sub_1C519F268(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  BOOL v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t *v77;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v38 = *(a2 - 1);
        v39 = *v8;
        if (*(_DWORD *)(v38 + 72) < *(_DWORD *)(*v8 + 72))
        {
          *v8 = v38;
          *(a2 - 1) = v39;
        }
        return result;
      case 3:
        return sub_1C515A754(v8, v8 + 1, a2 - 1);
      case 4:
        return sub_1C515A94C(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        return sub_1C515A9E0(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 <= 191)
        {
          v40 = v8 + 1;
          v42 = v8 == a2 || v40 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v42)
            {
              v43 = 8;
              v44 = v8;
              do
              {
                v46 = *v44;
                v45 = v44[1];
                v44 = v40;
                v47 = *(_DWORD *)(v45 + 72);
                if (v47 < *(_DWORD *)(v46 + 72))
                {
                  v48 = v43;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v48) = v46;
                    v49 = v48 - 8;
                    if (v48 == 8)
                      break;
                    v46 = *(uint64_t *)((char *)v8 + v48 - 16);
                    v48 -= 8;
                    if (v47 >= *(_DWORD *)(v46 + 72))
                    {
                      v50 = (uint64_t *)((char *)v8 + v49);
                      goto LABEL_76;
                    }
                  }
                  v50 = v8;
LABEL_76:
                  *v50 = v45;
                }
                v40 = v44 + 1;
                v43 += 8;
              }
              while (v44 + 1 != a2);
            }
          }
          else if (!v42)
          {
            do
            {
              v80 = *v7;
              v79 = v7[1];
              v7 = v40;
              v81 = *(_DWORD *)(v79 + 72);
              if (v81 < *(_DWORD *)(v80 + 72))
              {
                do
                {
                  *v40 = v80;
                  v80 = *(v40 - 2);
                  --v40;
                }
                while (v81 < *(_DWORD *)(v80 + 72));
                *v40 = v79;
              }
              v40 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            do
            {
              v53 = v52;
              if (v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = &v8[v54];
                v56 = *v55;
                if (2 * v53 + 2 < v10 && *(_DWORD *)(v56 + 72) < *(_DWORD *)(v55[1] + 72))
                {
                  v56 = v55[1];
                  ++v55;
                  v54 = 2 * v53 + 2;
                }
                result = &v8[v53];
                v57 = *result;
                v58 = *(_DWORD *)(*result + 72);
                if (*(_DWORD *)(v56 + 72) >= v58)
                {
                  do
                  {
                    v59 = v55;
                    *result = v56;
                    if (v51 < v54)
                      break;
                    v60 = (2 * v54) | 1;
                    v55 = &v8[v60];
                    v61 = 2 * v54 + 2;
                    v56 = *v55;
                    if (v61 < v10 && *(_DWORD *)(v56 + 72) < *(_DWORD *)(v55[1] + 72))
                    {
                      v56 = v55[1];
                      ++v55;
                      v60 = v61;
                    }
                    result = v59;
                    v54 = v60;
                  }
                  while (*(_DWORD *)(v56 + 72) >= v58);
                  *v59 = v57;
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            do
            {
              v62 = 0;
              v63 = *v8;
              v64 = v8;
              do
              {
                v65 = &v64[v62];
                v68 = v65[1];
                v66 = v65 + 1;
                v67 = v68;
                v69 = (2 * v62) | 1;
                v70 = 2 * v62 + 2;
                if (v70 < v10)
                {
                  result = (uint64_t *)*(unsigned int *)(v67 + 72);
                  if (result < *(_DWORD *)(v66[1] + 72))
                  {
                    v67 = v66[1];
                    ++v66;
                    v69 = v70;
                  }
                }
                *v64 = v67;
                v64 = v66;
                v62 = v69;
              }
              while (v69 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v66 == --a2)
              {
                *v66 = v63;
              }
              else
              {
                *v66 = *a2;
                *a2 = v63;
                v71 = (char *)v66 - (char *)v8 + 8;
                if (v71 >= 9)
                {
                  v72 = (((unint64_t)v71 >> 3) - 2) >> 1;
                  v73 = &v8[v72];
                  v74 = *v73;
                  v75 = *v66;
                  v76 = *(_DWORD *)(*v66 + 72);
                  if (*(_DWORD *)(*v73 + 72) < v76)
                  {
                    do
                    {
                      v77 = v73;
                      *v66 = v74;
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = &v8[v72];
                      v74 = *v73;
                      v66 = v77;
                    }
                    while (*(_DWORD *)(*v73 + 72) < v76);
                    *v77 = v75;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1C515A754(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C515A754(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C515A754(v7 + 1, v12 - 1, a2 - 2);
          sub_1C515A754(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_1C515A754(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_DWORD *)(v14 + 72);
          if (*(_DWORD *)(*(v7 - 1) + 72) < v15)
            goto LABEL_12;
          if (v15 >= *(_DWORD *)(*(a2 - 1) + 72))
          {
            v30 = v7 + 1;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 >= *(_DWORD *)(*v8 + 72));
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = v8[1];
              ++v8;
            }
            while (v15 >= *(_DWORD *)(v29 + 72));
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 < *(_DWORD *)(v32 + 72));
          }
          if (v8 < v31)
          {
            v33 = *v8;
            v34 = *v31;
            do
            {
              *v8 = v34;
              *v31 = v33;
              do
              {
                v35 = v8[1];
                ++v8;
                v33 = v35;
              }
              while (v15 >= *(_DWORD *)(v35 + 72));
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while (v15 < *(_DWORD *)(v36 + 72));
            }
            while (v8 < v31);
          }
          v37 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v37;
          a4 = 0;
          *v37 = v14;
          continue;
        }
        v15 = *(_DWORD *)(v14 + 72);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_DWORD *)(v17 + 72) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_DWORD *)(v21 + 72) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_DWORD *)(v20 + 72) >= v15);
        }
        if (v18 >= v19)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            do
            {
              v25 = v23[1];
              ++v23;
              v17 = v25;
            }
            while (*(_DWORD *)(v25 + 72) < v15);
            do
            {
              v26 = *--v24;
              v22 = v26;
            }
            while (*(_DWORD *)(v26 + 72) >= v15);
          }
          while (v23 < v24);
          v27 = v23 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = (uint64_t *)sub_1C519F268(v7, v27, a3, a4 & 1);
          a4 = 0;
          v8 = v27 + 1;
          continue;
        }
        v28 = sub_1C519F900(v7, v27);
        v8 = v27 + 1;
        result = (uint64_t *)sub_1C519F900(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C519F900(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_DWORD *)(v6 + 72) < *(_DWORD *)(*a1 + 72))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C515A754(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C515A94C(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1C515A9E0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C515A754(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_DWORD *)(*v9 + 72);
    if (v14 < *(_DWORD *)(*v8 + 72))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)(v13 + 72))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t sub_1C519FA70(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  _DWORD *v56;
  unint64_t v57;
  unsigned int v59;
  uint64_t v60;
  uint64_t *v61;
  int v62;
  BOOL v63;
  unsigned int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  unsigned int v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  _QWORD v80[66];

  v80[64] = *MEMORY[0x1E0C80C00];
  v74 = a2;
  v78 = v80;
  v80[0] = a2;
  v79 = 0x4000000001;
  v6 = *(_QWORD *)(a1 + 24);
  v70 = a1 + 24;
  v7 = *(_DWORD *)(a1 + 40);
  if (!v7)
    goto LABEL_15;
  v9 = v7 - 1;
  v10 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v11 = (uint64_t *)(v6 + 72 * v10);
  v12 = *v11;
  if (*v11 == a2)
  {
LABEL_14:
    *(_DWORD *)(v6 + 72 * v10 + 12) = 0;
LABEL_15:
    v21 = 1;
    goto LABEL_16;
  }
  v13 = 1;
  v14 = *v11;
  v15 = v9 & ((a2 >> 4) ^ (a2 >> 9));
  do
  {
    if (v14 == -4096)
      goto LABEL_15;
    v16 = v15 + v13++;
    v15 = v16 & v9;
    v14 = *(_QWORD *)(v6 + 72 * v15);
  }
  while (v14 != a2);
  v17 = 0;
  v18 = 1;
  while (v12 != -4096)
  {
    if (v17)
      v19 = 0;
    else
      v19 = v12 == -8192;
    if (v19)
      v17 = v11;
    v20 = v10 + v18++;
    v10 = v20 & v9;
    v11 = (uint64_t *)(v6 + 72 * v10);
    v12 = *v11;
    if (*v11 == a2)
      goto LABEL_14;
  }
  if (v17)
    v67 = v17;
  else
    v67 = v11;
  v68 = sub_1C519AA58(v70, &v74, v67);
  *v68 = a2;
  *(_OWORD *)(v68 + 5) = 0u;
  *(_OWORD *)(v68 + 3) = 0u;
  *(_OWORD *)(v68 + 1) = 0u;
  *(_OWORD *)(v68 + 7) = 0u;
  v68[5] = (uint64_t)(v68 + 7);
  *((_DWORD *)v68 + 13) = 2;
  v21 = v79;
  while ((_DWORD)v79)
  {
LABEL_16:
    v22 = *((_QWORD *)v78 + v21 - 1);
    LODWORD(v79) = v21 - 1;
    v73 = v22;
    v23 = *(_DWORD *)(a1 + 40);
    if (v23)
    {
      v24 = *(_QWORD *)(a1 + 24);
      v25 = v23 - 1;
      v26 = v25 & ((v22 >> 4) ^ (v22 >> 9));
      v27 = (uint64_t *)(v24 + 72 * v26);
      v28 = *v27;
      if (v22 == *v27)
        goto LABEL_31;
      v29 = 0;
      v30 = 1;
      while (v28 != -4096)
      {
        if (v29)
          v31 = 0;
        else
          v31 = v28 == -8192;
        if (v31)
          v29 = v27;
        v32 = v26 + v30++;
        v26 = v32 & v25;
        v27 = (uint64_t *)(v24 + 72 * v26);
        v28 = *v27;
        if (v22 == *v27)
          goto LABEL_31;
      }
      if (v29)
        v33 = v29;
      else
        v33 = v27;
    }
    else
    {
      v33 = 0;
    }
    v27 = sub_1C519AA58(v70, &v73, v33);
    *v27 = v22;
    *(_OWORD *)(v27 + 5) = 0u;
    *(_OWORD *)(v27 + 1) = 0u;
    *(_OWORD *)(v27 + 3) = 0u;
    *(_OWORD *)(v27 + 7) = 0u;
    v27[5] = (uint64_t)(v27 + 7);
    *((_DWORD *)v27 + 13) = 2;
LABEL_31:
    if (!*((_DWORD *)v27 + 2))
    {
      *((_DWORD *)v27 + 4) = ++a3;
      *((_DWORD *)v27 + 2) = a3;
      v27[3] = v22;
      v35 = *(uint64_t **)(a1 + 8);
      v34 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v35 >= v34)
      {
        v37 = *(uint64_t **)a1;
        v38 = ((uint64_t)v35 - *(_QWORD *)a1) >> 3;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 61)
          abort();
        v40 = v34 - (_QWORD)v37;
        if (v40 >> 2 > v39)
          v39 = v40 >> 2;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
          v41 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          if (v41 >> 61)
            sub_1C4764EE4();
          v42 = (char *)operator new(8 * v41);
        }
        else
        {
          v42 = 0;
        }
        v43 = (uint64_t *)&v42[8 * v38];
        *v43 = v22;
        v36 = v43 + 1;
        if (v35 != v37)
        {
          do
          {
            v44 = *--v35;
            *--v43 = v44;
          }
          while (v35 != v37);
          v35 = *(uint64_t **)a1;
        }
        *(_QWORD *)a1 = v43;
        *(_QWORD *)(a1 + 8) = v36;
        *(_QWORD *)(a1 + 16) = &v42[8 * v41];
        if (v35)
          operator delete(v35);
      }
      else
      {
        *v35 = v22;
        v36 = v35 + 1;
      }
      *(_QWORD *)(a1 + 8) = v36;
      v45 = *(_QWORD *)(a1 + 48);
      if (v45)
        sub_1C519AE08((uint64_t)&v75, *(_QWORD *)(v45 + 8), v73);
      else
        sub_1C519B044((uint64_t *)&v75, *(char **)(v73 + 64), *(char **)(v73 + 72));
      v46 = (uint64_t *)v75;
      v47 = (uint64_t *)((char *)v75 + 8 * v76);
      if (v76)
      {
        while (1)
        {
          v48 = *v46;
          v72 = v48;
          v49 = *(_QWORD *)(a1 + 24);
          v50 = *(_DWORD *)(a1 + 40);
          v51 = sub_1C4F4C0E0(v49, v50, v48);
          if ((uint64_t *)(v49 + 72 * v50) == v51)
          {
            v53 = v73;
          }
          else
          {
            v52 = v51;
            v53 = v73;
            if (*((_DWORD *)v51 + 2))
            {
              if (v48 != v73)
              {
                v54 = v51 + 5;
                v56 = v51 + 6;
                v55 = *((unsigned int *)v51 + 12);
                v57 = *((unsigned int *)v51 + 13);
                goto LABEL_80;
              }
              goto LABEL_83;
            }
          }
          if (v48 != a4 && v53 != a4)
          {
            if (!v50)
            {
              v65 = 0;
              goto LABEL_76;
            }
            v59 = (v50 - 1) & ((v48 >> 4) ^ (v48 >> 9));
            v52 = (uint64_t *)(v49 + 72 * v59);
            v60 = *v52;
            if (v48 != *v52)
            {
              v61 = 0;
              v62 = 1;
              while (v60 != -4096)
              {
                if (v61)
                  v63 = 0;
                else
                  v63 = v60 == -8192;
                if (v63)
                  v61 = v52;
                v64 = v59 + v62++;
                v59 = v64 & (v50 - 1);
                v52 = (uint64_t *)(v49 + 72 * v59);
                v60 = *v52;
                if (v48 == *v52)
                  goto LABEL_77;
              }
              if (v61)
                v65 = v61;
              else
                v65 = v52;
LABEL_76:
              v52 = sub_1C519AA58(v70, &v72, v65);
              *v52 = v48;
              *(_OWORD *)(v52 + 5) = 0u;
              *(_OWORD *)(v52 + 1) = 0u;
              *(_OWORD *)(v52 + 3) = 0u;
              *(_OWORD *)(v52 + 7) = 0u;
              v52[5] = (uint64_t)(v52 + 7);
              *((_DWORD *)v52 + 13) = 2;
            }
LABEL_77:
            v66 = v79;
            if (v79 >= (unint64_t)HIDWORD(v79))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, (uint64_t)v80, v79 + 1, 8);
              v66 = v79;
            }
            *((_QWORD *)v78 + v66) = v48;
            LODWORD(v79) = v79 + 1;
            v56 = v52 + 6;
            v55 = *((unsigned int *)v52 + 12);
            *((_DWORD *)v52 + 3) = a3;
            v54 = v52 + 5;
            v57 = *((unsigned int *)v52 + 13);
LABEL_80:
            if (v55 >= v57)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v54, (uint64_t)(v52 + 7), v55 + 1, 8);
              v55 = *((unsigned int *)v52 + 12);
            }
            *(_QWORD *)(*v54 + 8 * v55) = v53;
            ++*v56;
          }
LABEL_83:
          if (++v46 == v47)
          {
            v46 = (uint64_t *)v75;
            break;
          }
        }
      }
      if (v46 != &v77)
        free(v46);
    }
    v21 = v79;
  }
  if (v78 != v80)
    free(v78);
  return a3;
}

unint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getEntry(_QWORD *a1)
{
  return *a1 & 0xFFFFFFFFFFFFFFF8;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getExit(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::begin(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

{
  return *(_QWORD *)(a1 + 40);
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::end(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

{
  return *(_QWORD *)(a1 + 48);
}

uint64_t *llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::RegionBase(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *result = a2 | 4;
  result[1] = a6;
  result[2] = a4;
  result[3] = a5;
  result[4] = a3;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[10] = 0;
  result[9] = 0;
  result[8] = (uint64_t)(result + 9);
  return result;
}

{
  *result = a2 | 4;
  result[1] = a6;
  result[2] = a4;
  result[3] = a5;
  result[4] = a3;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[10] = 0;
  result[9] = 0;
  result[8] = (uint64_t)(result + 9);
  return result;
}

unint64_t *llvm::RegionNodeBase<llvm::RegionTraits<llvm::MachineFunction>>::RegionNodeBase(unint64_t *result, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;

  v4 = 4;
  if (!a4)
    v4 = 0;
  *result = a3 & 0xFFFFFFFFFFFFFFFBLL | v4;
  result[1] = a2;
  return result;
}

{
  uint64_t v4;

  v4 = 4;
  if (!a4)
    v4 = 0;
  *result = a3 & 0xFFFFFFFFFFFFFFFBLL | v4;
  result[1] = a2;
  return result;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::~RegionBase(uint64_t a1)
{
  _QWORD *v2;
  void **v4;

  v2 = (_QWORD *)(a1 + 72);
  sub_1C61FA9B0(*(_QWORD **)(a1 + 72));
  *(_QWORD *)(a1 + 64) = v2;
  *(_QWORD *)(a1 + 80) = 0;
  *v2 = 0;
  v4 = (void **)(a1 + 40);
  sub_1C51A35F8(&v4);
  return a1;
}

{
  _QWORD *v2;
  void **v4;

  v2 = (_QWORD *)(a1 + 72);
  sub_1C61FA9B0(*(_QWORD **)(a1 + 72));
  *(_QWORD *)(a1 + 64) = v2;
  *(_QWORD *)(a1 + 80) = 0;
  *v2 = 0;
  v4 = (void **)(a1 + 40);
  sub_1C51A35F8(&v4);
  return a1;
}

unint64_t llvm::RegionNodeBase<llvm::RegionTraits<llvm::MachineFunction>>::getEntry(_QWORD *a1)
{
  return *a1 & 0xFFFFFFFFFFFFFFF8;
}

uint64_t *llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::replaceEntry(uint64_t *result, uint64_t a2)
{
  *result = *result & 7 | a2;
  return result;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::replaceExit(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

void llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::replaceEntryRecursive(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v3 = *a1 & 0xFFFFFFFFFFFFFFF8;
  v4 = (char *)operator new(8uLL);
  *(_QWORD *)v4 = a1;
  v5 = v4 + 8;
  v6 = v4 + 8;
  do
  {
    v7 = (uint64_t *)*((_QWORD *)v6 - 1);
    v8 = v6 - 8;
    *v7 = *v7 & 7 | a2;
    v9 = (_QWORD *)v7[5];
    v10 = (_QWORD *)v7[6];
    if (v9 != v10)
    {
      while (1)
      {
        v11 = (_QWORD *)*v9;
        if ((*(_QWORD *)*v9 & 0xFFFFFFFFFFFFFFF8) == v3)
        {
          if (v8 >= v5)
          {
            v12 = (v8 - v4) >> 3;
            v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 61)
              abort();
            if ((v5 - v4) >> 2 > v13)
              v13 = (v5 - v4) >> 2;
            if ((unint64_t)(v5 - v4) >= 0x7FFFFFFFFFFFFFF8)
              v14 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v14 = v13;
            if (v14)
            {
              if (v14 >> 61)
                sub_1C4764EE4();
              v15 = (char *)operator new(8 * v14);
            }
            else
            {
              v15 = 0;
            }
            v16 = &v15[8 * v12];
            *(_QWORD *)v16 = v11;
            v6 = v16 + 8;
            if (v8 != v4)
            {
              do
              {
                v17 = *((_QWORD *)v8 - 1);
                v8 -= 8;
                *((_QWORD *)v16 - 1) = v17;
                v16 -= 8;
              }
              while (v8 != v4);
              v8 = v4;
            }
            v4 = v16;
            v5 = &v15[8 * v14];
            if (v8)
              operator delete(v8);
            goto LABEL_7;
          }
          *(_QWORD *)v8 = v11;
          v8 += 8;
        }
        v6 = v8;
LABEL_7:
        ++v9;
        v8 = v6;
        if (v9 == v10)
          goto LABEL_25;
      }
    }
    v6 -= 8;
LABEL_25:
    ;
  }
  while (v4 != v6);
  if (v4)
    operator delete(v4);
}

void llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::replaceExitRecursive(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (char *)operator new(8uLL);
  *(_QWORD *)v4 = a1;
  v5 = v4 + 8;
  v6 = v4 + 8;
  do
  {
    v7 = (_QWORD *)*((_QWORD *)v6 - 1);
    v8 = v6 - 8;
    v7[4] = a2;
    v9 = (uint64_t *)v7[5];
    v10 = (uint64_t *)v7[6];
    if (v9 != v10)
    {
      while (1)
      {
        v11 = *v9;
        if (*(_QWORD *)(*v9 + 32) == v3)
        {
          if (v8 >= v5)
          {
            v12 = (v8 - v4) >> 3;
            v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 61)
              abort();
            if ((v5 - v4) >> 2 > v13)
              v13 = (v5 - v4) >> 2;
            if ((unint64_t)(v5 - v4) >= 0x7FFFFFFFFFFFFFF8)
              v14 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v14 = v13;
            if (v14)
            {
              if (v14 >> 61)
                sub_1C4764EE4();
              v15 = (char *)operator new(8 * v14);
            }
            else
            {
              v15 = 0;
            }
            v16 = &v15[8 * v12];
            *(_QWORD *)v16 = v11;
            v6 = v16 + 8;
            if (v8 != v4)
            {
              do
              {
                v17 = *((_QWORD *)v8 - 1);
                v8 -= 8;
                *((_QWORD *)v16 - 1) = v17;
                v16 -= 8;
              }
              while (v8 != v4);
              v8 = v4;
            }
            v4 = v16;
            v5 = &v15[8 * v14];
            if (v8)
              operator delete(v8);
            goto LABEL_7;
          }
          *(_QWORD *)v8 = v11;
          v8 += 8;
        }
        v6 = v8;
LABEL_7:
        ++v9;
        v8 = v6;
        if (v9 == v10)
          goto LABEL_25;
      }
    }
    v6 -= 8;
LABEL_25:
    ;
  }
  while (v4 != v6);
  if (v4)
    operator delete(v4);
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getParent(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t llvm::RegionNodeBase<llvm::RegionTraits<llvm::MachineFunction>>::getParent(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getDepth(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  LODWORD(result) = -1;
  do
  {
    v1 = *(_QWORD *)(v1 + 8);
    result = (result + 1);
  }
  while (v1);
  return result;
}

BOOL llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::isTopLevelRegion(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) == 0;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getExpandedRegion(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = a1[4];
  if (((*(_QWORD *)(v1 + 96) - *(_QWORD *)(v1 + 88)) & 0x7FFFFFFF8) == 0)
    return 0;
  v4 = a1[2];
  v16 = 0;
  sub_1C6144BDC(*(_QWORD *)(v4 + 40), *(_DWORD *)(v4 + 56), v1, &v16);
  v5 = *(_QWORD **)(v16 + 8);
  v6 = *v5 & 0xFFFFFFFFFFFFFFF8;
  v7 = (_QWORD *)a1[4];
  if (v7 == (_QWORD *)v6)
  {
    do
    {
      v11 = v5;
      v5 = (_QWORD *)v5[1];
    }
    while (v5 && v6 == (*v5 & 0xFFFFFFFFFFFFFFF8));
    v12 = *(uint64_t **)(v6 + 64);
    v13 = *(uint64_t **)(v6 + 72);
    while (v12 != v13)
    {
      v14 = *v12;
      if ((llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(a1, *v12) & 1) == 0
        && !llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(v11, v14))
      {
        return 0;
      }
      ++v12;
    }
    result = operator new();
    v15 = v11[4];
    *(_QWORD *)result = *a1 & 0xFFFFFFFFFFFFFFF8 | 4;
    *(_QWORD *)(result + 8) = 0;
    *(_OWORD *)(result + 16) = *((_OWORD *)a1 + 1);
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 32) = v15;
    *(_QWORD *)(result + 40) = 0;
  }
  else
  {
    v8 = (uint64_t *)v7[8];
    v9 = (uint64_t *)v7[9];
    if (v8 != v9)
    {
      while ((llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(a1, *v8) & 1) != 0)
      {
        if (++v8 == v9)
        {
          v7 = (_QWORD *)a1[4];
          goto LABEL_8;
        }
      }
      return 0;
    }
LABEL_8:
    if (((v7[12] - v7[11]) & 0x7FFFFFFF8) != 8)
      return 0;
    result = operator new();
    v10 = **(_QWORD **)(a1[4] + 88);
    *(_QWORD *)result = *a1 & 0xFFFFFFFFFFFFFFF8 | 4;
    *(_QWORD *)(result + 8) = 0;
    *(_OWORD *)(result + 16) = *((_OWORD *)a1 + 1);
    *(_QWORD *)(result + 32) = v10;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
  }
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 64) = result + 72;
  return result;
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::getRegionFor(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  uint64_t v4;

  v4 = 0;
  v2 = sub_1C6144BDC(*(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 56), a2, &v4);
  result = 0;
  if (v2)
    return *(_QWORD *)(v4 + 8);
  return result;
}

uint64_t *llvm::MachineRegion::MachineRegion(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *result = a2 | 4;
  result[1] = a6;
  result[2] = a4;
  result[3] = a5;
  result[4] = a3;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[10] = 0;
  result[9] = 0;
  result[8] = (uint64_t)(result + 9);
  return result;
}

{
  *result = a2 | 4;
  result[1] = a6;
  result[2] = a4;
  result[3] = a5;
  result[4] = a3;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[10] = 0;
  result[9] = 0;
  result[8] = (uint64_t)(result + 9);
  return result;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getExitingBlock(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  v1 = a1[4];
  if (!v1)
    return 0;
  v2 = *(uint64_t **)(v1 + 64);
  v3 = *(uint64_t **)(v1 + 72);
  if (v2 == v3)
    return 0;
  v5 = 0;
  do
  {
    v6 = *v2;
    if (llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(a1, *v2))
    {
      if (v5)
        return 0;
    }
    else
    {
      v6 = v5;
    }
    ++v2;
    v5 = v6;
  }
  while (v2 != v3);
  return v6;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getExitingBlocks(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;

  v2 = a1[4];
  if (!v2 || (v3 = *(uint64_t **)(v2 + 64), v4 = *(uint64_t **)(v2 + 72), v3 == v4))
  {
    v8 = 1;
  }
  else
  {
    v7 = a2 + 16;
    v8 = 1;
    do
    {
      v9 = *v3;
      if (llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(a1, *v3))
      {
        v10 = *(unsigned int *)(a2 + 8);
        if (v10 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v7, v10 + 1, 8);
          v10 = *(unsigned int *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v10) = v9;
        ++*(_DWORD *)(a2 + 8);
      }
      else
      {
        v8 = 0;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  return v8 & 1;
}

void llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getNameStr(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  llvm::Value **v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Value *v7;
  char *Name;
  unint64_t v9;
  char *v10;
  std::string::size_type v11;
  std::string *p_dst;
  uint64_t v13;
  uint64_t v14;
  llvm::Value **v15;
  uint64_t v16;
  llvm::Value *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  std::string::size_type v21;
  std::string *v22;
  uint64_t v23;
  uint64_t v24;
  size_t size;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string __dst;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  int v36;
  std::string *p_p;
  std::string __p;
  std::string v39;

  memset(&v39, 0, sizeof(v39));
  memset(&__p, 0, sizeof(__p));
  v4 = (llvm::Value **)(*a1 & 0xFFFFFFFFFFFFFFF8);
  if (v4[2])
  {
    llvm::Value::getName(v4[2]);
    v5 = *a1;
    if (v6)
    {
      v7 = *(llvm::Value **)((v5 & 0xFFFFFFFFFFFFFFF8) + 16);
      if (v7)
      {
        Name = llvm::Value::getName(v7);
        if (v9 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_63;
        v10 = Name;
        v11 = v9;
        if (v9 >= 0x17)
        {
          v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v9 | 7) != 0x17)
            v13 = v9 | 7;
          v14 = v13 + 1;
          p_dst = (std::string *)operator new(v13 + 1);
          __dst.__r_.__value_.__l.__size_ = v11;
          __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v9;
          p_dst = &__dst;
          if (!v9)
            goto LABEL_13;
        }
        memmove(p_dst, v10, v11);
      }
      else
      {
        v11 = 0;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
        p_dst = &__dst;
      }
LABEL_13:
      p_dst->__r_.__value_.__s.__data_[v11] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = __dst;
      goto LABEL_16;
    }
    v4 = (llvm::Value **)(v5 & 0xFFFFFFFFFFFFFFF8);
  }
  LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
  v34 = 0;
  v35 = 0;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
  p_p = &__p;
  v36 = 0;
  v32 = 0;
  v33 = 0;
  __dst.__r_.__value_.__r.__words[2] = 0;
  llvm::MachineBasicBlock::printAsOperand((llvm::MachineBasicBlock *)v4, (llvm::raw_ostream *)&__dst);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
  if (v36 == 1 && __dst.__r_.__value_.__r.__words[2])
    MEMORY[0x1CAA32F9C](__dst.__r_.__value_.__r.__words[2], 0x1000C8077774924);
LABEL_16:
  v15 = (llvm::Value **)a1[4];
  if (!v15)
  {
    MEMORY[0x1CAA32ABC](&v39, "<Function Return>");
    goto LABEL_33;
  }
  if (v15[2])
  {
    llvm::Value::getName(v15[2]);
    v15 = (llvm::Value **)a1[4];
    if (v16)
    {
      v17 = v15[2];
      if (!v17)
      {
        v21 = 0;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
        v22 = &__dst;
        goto LABEL_30;
      }
      v18 = llvm::Value::getName(v17);
      if (v19 <= 0x7FFFFFFFFFFFFFF7)
      {
        v20 = v18;
        v21 = v19;
        if (v19 >= 0x17)
        {
          v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v23 = v19 | 7;
          v24 = v23 + 1;
          v22 = (std::string *)operator new(v23 + 1);
          __dst.__r_.__value_.__l.__size_ = v21;
          __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v19;
          v22 = &__dst;
          if (!v19)
            goto LABEL_30;
        }
        memmove(v22, v20, v21);
LABEL_30:
        v22->__r_.__value_.__s.__data_[v21] = 0;
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        v39 = __dst;
        goto LABEL_33;
      }
LABEL_63:
      abort();
    }
  }
  LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
  v34 = 0;
  v35 = 0;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
  p_p = &v39;
  v36 = 0;
  v32 = 0;
  v33 = 0;
  __dst.__r_.__value_.__r.__words[2] = 0;
  llvm::MachineBasicBlock::printAsOperand((llvm::MachineBasicBlock *)v15, (llvm::raw_ostream *)&__dst);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
  if (v36 == 1 && __dst.__r_.__value_.__r.__words[2])
    MEMORY[0x1CAA32F9C](__dst.__r_.__value_.__r.__words[2], 0x1000C8077774924);
LABEL_33:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v26 = &__dst;
  sub_1C484371C((uint64_t)&__dst, size + 4);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v26 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if (size)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &__p;
    else
      v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(v26, v27, size);
  }
  strcpy((char *)v26 + size, " => ");
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &v39;
  else
    v28 = (std::string *)v39.__r_.__value_.__r.__words[0];
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = *((_BYTE *)&v39.__r_.__value_.__s + 23) & 0x7F;
  else
    v29 = v39.__r_.__value_.__l.__size_;
  v30 = std::string::append(&__dst, (const std::string::value_type *)v28, v29);
  *a2 = *v30;
  v30->__r_.__value_.__r.__words[0] = 0;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
}

{
  __ZNK4llvm10RegionBaseINS_12RegionTraitsINS_15MachineFunctionEEEE10getNameStrEv(a1, a2);
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getRegionInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::print(uint64_t *a1, llvm::raw_ostream *a2, int a3, unsigned int a4, uint64_t a5)
{
  unsigned int v10;
  _BYTE *v11;
  _WORD *v12;
  std::string *p_p;
  size_t size;
  _BYTE *v15;
  _WORD *v16;
  _BYTE *v17;
  const void *v18;
  std::string::size_type v19;
  int v20;
  unsigned int v21;
  _BYTE *v22;
  const void *v23;
  void *v24;
  unsigned int v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  llvm::Value *v34;
  size_t v35;
  char *Name;
  void *v37;
  std::string *v38;
  size_t v39;
  _WORD *v40;
  size_t v41;
  _BYTE *v42;
  const void *v43;
  std::string::size_type v44;
  int v45;
  unsigned int v46;
  _BYTE *v47;
  const void *v48;
  void *v49;
  unsigned int v50;
  char *v51;
  char *v52;
  char *v53;
  int v54;
  BOOL v55;
  llvm::Value *v56;
  size_t v57;
  char *v58;
  size_t v59;
  _WORD *v60;
  _BYTE *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  _BYTE *v71;
  _BYTE v72[64];
  char *v73;
  _BYTE *v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  int v78;
  int v79;
  int v80;
  _BYTE v81[64];
  void *v82;
  char *v83;
  uint64_t v84;
  std::string __p;
  int v86;
  void *v87;
  _BYTE *v88;
  void *v89;
  void *v90;
  unsigned int v91;
  unsigned int v92;
  void *v93;
  _BYTE *v94;
  std::string v95;

  v10 = 2 * a4;
  llvm::raw_ostream::indent(a2, 2 * a4);
  if (a3)
  {
    v11 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v11 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 91);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v11 + 1;
      *v11 = 91;
    }
    sub_1C5E21910(a2, a4, 0, 0, 0);
    v12 = (_WORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v12 > 1uLL)
    {
      *v12 = 8285;
      *((_QWORD *)a2 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a2, "] ", 2uLL);
    }
  }
  llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getNameStr(a1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(a2, (const char *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 10);
    if (!(_DWORD)a5)
      goto LABEL_130;
  }
  else
  {
    *((_QWORD *)a2 + 4) = v15 + 1;
    *v15 = 10;
    if (!(_DWORD)a5)
    {
LABEL_130:
      if (a3)
        goto LABEL_133;
      goto LABEL_136;
    }
  }
  llvm::raw_ostream::indent(a2, v10);
  v16 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v16 > 1uLL)
  {
    *v16 = 2683;
    *((_QWORD *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, "{\n", 2uLL);
  }
  llvm::raw_ostream::indent(a2, v10 + 2);
  if ((_DWORD)a5 != 1)
  {
    if ((_DWORD)a5 != 2)
      goto LABEL_128;
    llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::elements(a1, &__p);
    v17 = v81;
    v76 = v81;
    v18 = (const void *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
    {
      v77 = v81;
      v19 = __p.__r_.__value_.__l.__size_;
    }
    else
    {
      v69 = __p.__r_.__value_.__r.__words[2];
      v17 = malloc_type_malloc(8 * LODWORD(__p.__r_.__value_.__r.__words[2]), 0x4065EBACuLL);
      if (!v17)
      {
        if (v69)
          goto LABEL_162;
        v17 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v17)
          goto LABEL_162;
      }
      v77 = v17;
      v18 = (const void *)__p.__r_.__value_.__l.__size_;
      v19 = __p.__r_.__value_.__r.__words[0];
    }
    v20 = HIDWORD(__p.__r_.__value_.__r.__words[2]);
    v78 = __p.__r_.__value_.__r.__words[2];
    if (v18 == (const void *)v19)
      v21 = HIDWORD(__p.__r_.__value_.__r.__words[2]);
    else
      v21 = __p.__r_.__value_.__r.__words[2];
    if (v21)
    {
      memmove(v17, v18, 8 * v21);
      v20 = HIDWORD(__p.__r_.__value_.__r.__words[2]);
    }
    v79 = v20;
    v80 = v86;
    v83 = 0;
    v84 = 0;
    v82 = 0;
    sub_1C4E19D7C(&v82, v87, v88, (v88 - (_BYTE *)v87) >> 5);
    v22 = v72;
    v23 = v90;
    if (v90 == v89)
    {
      v71 = v72;
      v24 = v90;
LABEL_32:
      if (v23 == v24)
        v25 = v92;
      else
        v25 = v91;
      if (v25)
        memmove(v22, v23, 8 * v25);
      v74 = 0;
      v75 = 0;
      v73 = 0;
      sub_1C4E19D7C(&v73, v93, v94, (v94 - (_BYTE *)v93) >> 5);
      while (1)
      {
        v26 = v73;
        if (v83 - (_BYTE *)v82 == v74 - v73)
        {
          if (v82 == v83)
            goto LABEL_112;
          v27 = v73 + 16;
          v28 = (char *)v82 + 16;
          while (1)
          {
            v29 = v28 - 16;
            if (*((_QWORD *)v28 - 2) != *((_QWORD *)v27 - 2))
              break;
            v30 = v27[8];
            if (v28[8])
              v31 = v30 == 0;
            else
              v31 = 1;
            if (v31)
            {
              if ((v28[8] == 0) == (v30 != 0))
                break;
            }
            else
            {
              v32 = *((_QWORD *)v28 - 1);
              if ((v32 & 6) != 0)
              {
                if (((*((_DWORD *)v27 - 2) ^ v32) & 6) != 0)
                  break;
              }
              else if (*(_QWORD *)v28 != *(_QWORD *)v27)
              {
                break;
              }
            }
            v27 += 32;
            v28 += 32;
            if (v29 + 32 == v83)
              goto LABEL_112;
          }
        }
        v33 = (uint64_t *)*((_QWORD *)v83 - 4);
        if ((*v33 & 4) != 0)
        {
          llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getNameStr(v33, &v95);
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v38 = &v95;
          else
            v38 = (std::string *)v95.__r_.__value_.__r.__words[0];
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v39 = *((_BYTE *)&v95.__r_.__value_.__s + 23) & 0x7F;
          else
            v39 = v95.__r_.__value_.__l.__size_;
          llvm::raw_ostream::write(a2, (const char *)v38, v39);
          if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v95.__r_.__value_.__l.__data_);
        }
        else
        {
          v34 = *(llvm::Value **)((*v33 & 0xFFFFFFFFFFFFFFF8) + 16);
          if (v34)
          {
            Name = llvm::Value::getName(v34);
            v37 = (void *)*((_QWORD *)a2 + 4);
            if (v35 <= *((_QWORD *)a2 + 3) - (_QWORD)v37)
            {
              if (v35)
              {
                v41 = v35;
                memcpy(v37, Name, v35);
                *((_QWORD *)a2 + 4) += v41;
              }
            }
            else
            {
              llvm::raw_ostream::write(a2, Name, v35);
            }
          }
        }
        v40 = (_WORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v40 > 1uLL)
        {
          *v40 = 8236;
          *((_QWORD *)a2 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(a2, ", ", 2uLL);
        }
        sub_1C61FAA08((char *)&v76);
      }
    }
    v70 = v91;
    v22 = malloc_type_malloc(8 * v91, 0x4065EBACuLL);
    if (v22 || !v70 && (v22 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v71 = v22;
      v24 = v89;
      v23 = v90;
      goto LABEL_32;
    }
LABEL_162:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::blocks(a1, &__p);
  v42 = v81;
  v76 = v81;
  v43 = (const void *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
  {
    v77 = v81;
    v44 = __p.__r_.__value_.__l.__size_;
  }
  else
  {
    v67 = __p.__r_.__value_.__r.__words[2];
    v42 = malloc_type_malloc(8 * LODWORD(__p.__r_.__value_.__r.__words[2]), 0x4065EBACuLL);
    if (!v42)
    {
      if (v67)
        goto LABEL_162;
      v42 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v42)
        goto LABEL_162;
    }
    v77 = v42;
    v43 = (const void *)__p.__r_.__value_.__l.__size_;
    v44 = __p.__r_.__value_.__r.__words[0];
  }
  v45 = HIDWORD(__p.__r_.__value_.__r.__words[2]);
  v78 = __p.__r_.__value_.__r.__words[2];
  if (v43 == (const void *)v44)
    v46 = HIDWORD(__p.__r_.__value_.__r.__words[2]);
  else
    v46 = __p.__r_.__value_.__r.__words[2];
  if (v46)
  {
    memmove(v42, v43, 8 * v46);
    v45 = HIDWORD(__p.__r_.__value_.__r.__words[2]);
  }
  v79 = v45;
  v80 = v86;
  v83 = 0;
  v84 = 0;
  v82 = 0;
  sub_1C4D6CDA0(&v82, v87, v88, 0xAAAAAAAAAAAAAAABLL * ((v88 - (_BYTE *)v87) >> 3));
  v47 = v72;
  v48 = v90;
  if (v90 == v89)
  {
    v71 = v72;
    v49 = v90;
  }
  else
  {
    v68 = v91;
    v47 = malloc_type_malloc(8 * v91, 0x4065EBACuLL);
    if (!v47)
    {
      if (v68)
        goto LABEL_162;
      v47 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v47)
        goto LABEL_162;
    }
    v71 = v47;
    v49 = v89;
    v48 = v90;
  }
  if (v48 == v49)
    v50 = v92;
  else
    v50 = v91;
  if (v50)
    memmove(v47, v48, 8 * v50);
  v74 = 0;
  v75 = 0;
  v73 = 0;
  sub_1C4D6CDA0(&v73, v93, v94, 0xAAAAAAAAAAAAAAABLL * ((v94 - (_BYTE *)v93) >> 3));
  while (1)
  {
    v26 = v73;
    if (v83 - (_BYTE *)v82 != v74 - v73)
      goto LABEL_102;
    if (v82 == v83)
      break;
    v51 = v73 + 8;
    v52 = (char *)v82 + 8;
    while (1)
    {
      v53 = v52 - 8;
      if (*((_QWORD *)v52 - 1) != *((_QWORD *)v51 - 1))
        break;
      v54 = v51[8];
      if (v52[8])
        v55 = v54 == 0;
      else
        v55 = 1;
      if (v55)
      {
        if ((v52[8] == 0) == (v54 != 0))
          break;
      }
      else if (*(_QWORD *)v52 != *(_QWORD *)v51)
      {
        break;
      }
      v51 += 24;
      v52 += 24;
      if (v53 + 24 == v83)
        goto LABEL_112;
    }
LABEL_102:
    v56 = *(llvm::Value **)(*((_QWORD *)v83 - 3) + 16);
    if (!v56)
      goto LABEL_105;
    v58 = llvm::Value::getName(v56);
    v59 = v57;
    v60 = (_WORD *)*((_QWORD *)a2 + 4);
    if (v57 > *((_QWORD *)a2 + 3) - (_QWORD)v60)
    {
      llvm::raw_ostream::write(a2, v58, v57);
LABEL_105:
      v60 = (_WORD *)*((_QWORD *)a2 + 4);
      goto LABEL_106;
    }
    if (v57)
    {
      memcpy(v60, v58, v57);
      v60 = (_WORD *)(*((_QWORD *)a2 + 4) + v59);
      *((_QWORD *)a2 + 4) = v60;
    }
LABEL_106:
    if (*((_QWORD *)a2 + 3) - (_QWORD)v60 > 1uLL)
    {
      *v60 = 8236;
      *((_QWORD *)a2 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a2, ", ", 2uLL);
    }
    sub_1C61D9EC8((char *)&v76);
  }
LABEL_112:
  if (v26)
  {
    v74 = v26;
    operator delete(v26);
  }
  if (v71 != v72)
    free(v71);
  if (v82)
  {
    v83 = (char *)v82;
    operator delete(v82);
  }
  if (v77 != v76)
    free(v77);
  if (v93)
  {
    v94 = v93;
    operator delete(v93);
  }
  if (v90 != v89)
    free(v90);
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    free((void *)__p.__r_.__value_.__l.__size_);
LABEL_128:
  v61 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v61 < *((_QWORD *)a2 + 3))
  {
    *((_QWORD *)a2 + 4) = v61 + 1;
    *v61 = 10;
    goto LABEL_130;
  }
  llvm::raw_ostream::write(a2, 10);
  if (a3)
  {
LABEL_133:
    v63 = (uint64_t *)a1[5];
    v62 = (uint64_t *)a1[6];
    if (v63 != v62)
    {
      v64 = a4 + 1;
      do
      {
        v65 = *v63++;
        llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::print(v65, a2, 1, v64, a5);
      }
      while (v63 != v62);
    }
  }
LABEL_136:
  if ((_DWORD)a5)
  {
    llvm::raw_ostream::indent(a2, v10);
    v66 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v66) > 2)
    {
      *(_BYTE *)(v66 + 2) = 10;
      *(_WORD *)v66 = 8317;
      *((_QWORD *)a2 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(a2, "} \n", 3uLL);
    }
  }
}

{
  __ZNK4llvm10RegionBaseINS_12RegionTraitsINS_15MachineFunctionEEEE5printERNS_11raw_ostreamEbjNS4_10PrintStyleE(a1, a2, a3, a4, a5);
}

void llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::blocks(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  int v6;
  _BYTE v7[64];
  void *__p;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  sub_1C51A3B6C((uint64_t)&v11, *a1 & 0xFFFFFFFFFFFFFFF8, a1[4]);
  v3 = v7;
  v4 = v7;
  v5 = 8;
  v6 = 0;
  v9 = 0;
  v10 = 0;
  __p = 0;
  sub_1C6187DA4(a2, (uint64_t)&v11, (uint64_t)&v3);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  if (v4 != v3)
    free(v4);
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (v12 != v11)
    free(v12);
}

{
  __ZNK4llvm10RegionBaseINS_12RegionTraitsINS_15MachineFunctionEEEE6blocksEv(a1, a2);
}

void llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::dump(llvm *a1)
{
  unsigned int v2;
  llvm *v3;
  llvm *v4;

  v2 = -1;
  v3 = llvm::dbgs(a1);
  v4 = a1;
  do
  {
    v4 = (llvm *)*((_QWORD *)v4 + 1);
    ++v2;
  }
  while (v4);
  llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::print((uint64_t *)a1, v3, 1, v2, llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::printStyle);
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(_QWORD *a1, uint64_t a2)
{
  return llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(a1, *(_QWORD *)(a2 + 24));
}

{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_1C49FA70C(a1[3], a2);
  if (result)
  {
    v5 = a1[4];
    if (!v5)
      return 1;
    v6 = *a1 & 0xFFFFFFFFFFFFFFF8;
    v7 = a1[3];
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v7);
    result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v7 + 1320), v6, a2);
    if (!(_DWORD)result)
      return result;
    v8 = a1[3];
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v8);
    if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v8 + 1320), v5, a2))
    {
      v9 = a1[3];
      llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v9);
      return !llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v9 + 1320), v6, v5);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

{
  return __ZNK4llvm10RegionBaseINS_12RegionTraitsINS_15MachineFunctionEEEE8containsEPKNS_17MachineBasicBlockE(a1, a2);
}

BOOL llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return a1[4] == 0;
  if (!llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(a1, **(_QWORD **)(a2 + 32)))
    return 0;
  v11 = v13;
  v12 = 0x800000000;
  llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getExitingBlocks((_QWORD *)a2, (uint64_t)&v11);
  v6 = (uint64_t *)v11;
  if ((_DWORD)v12)
  {
    v7 = 8 * v12 - 8;
    do
    {
      v8 = *v6++;
      v9 = llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(a1, v8);
      if ((_DWORD)v9)
        v10 = v7 == 0;
      else
        v10 = 1;
      v7 -= 8;
    }
    while (!v10);
    v3 = v9;
    v6 = (uint64_t *)v11;
  }
  else
  {
    v3 = 1;
  }
  if (v6 != v13)
    free(v6);
  return v3;
}

{
  return __ZNK4llvm10RegionBaseINS_12RegionTraitsINS_15MachineFunctionEEEE8containsEPKNS_11MachineLoopE(a1, a2);
}

uint64_t *llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::outermostLoopInRegion(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  _BOOL4 v4;
  uint64_t *result;

  v2 = (uint64_t *)a2;
  v4 = llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(a1, a2);
  result = 0;
  if (v2 && v4)
  {
    while (llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(a1, *v2))
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
        return 0;
    }
    return v2;
  }
  return result;
}

uint64_t *llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::outermostLoopInRegion(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t *v11;
  _BOOL4 v12;

  v3 = *(_DWORD *)(a2 + 264);
  if (!v3)
    return 0;
  v5 = *(_QWORD *)(a2 + 248);
  v6 = v3 - 1;
  v7 = (v3 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v8 = *(_QWORD *)(v5 + 16 * v7);
  if (v8 != a3)
  {
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v7 + v9++;
      v7 = v10 & v6;
      v8 = *(_QWORD *)(v5 + 16 * v7);
      if (v8 == a3)
        goto LABEL_6;
    }
    return 0;
  }
LABEL_6:
  v11 = *(uint64_t **)(v5 + 16 * v7 + 8);
  v12 = llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(a1, (uint64_t)v11);
  if (!v11 || !v12)
    return 0;
  do
  {
    if (!llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(a1, *v11))
      break;
    v11 = (uint64_t *)*v11;
  }
  while (v11);
  return v11;
}

